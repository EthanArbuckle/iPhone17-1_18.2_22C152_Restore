uint64_t __preIterateQueryForIndex_block_invoke_167(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return (*a2 - *a3);
}

uint64_t PropertyIdKeyHash(int a1)
{
  return a1 & 0x3FFFFFF;
}

BOOL PropertyIdKeyEquals(int a1, int a2)
{
  return ((a2 ^ a1) & 0x3FFFFFF) == 0;
}

uint64_t __serializeDBO_block_invoke(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return (*a2 - *a3);
}

uint64_t ___ZN19PartialQueryResults18setupFieldIdVectorEPPKjPmPP20db_field_lookup_pairb_block_invoke(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return (*a2 - *a3);
}

void stack_deallocate(void *ptr, void *a2)
{
  if (*a2 > (unint64_t)ptr || a2[2] <= (unint64_t)ptr)
  {
    v3 = (malloc_zone_t *)a2[4];
    --a2[3];
    malloc_zone_free(v3, ptr);
  }
}

uint64_t ___qsort_offset_t_block_invoke(uint64_t a1, void *a2, void *a3)
{
  unint64_t v3 = *a2 & 0x3FFFFFFFFFFFFFFFLL;
  unint64_t v4 = *a3 & 0x3FFFFFFFFFFFFFFFLL;
  BOOL v5 = v3 > v4;
  if (v3 == v4) {
    unsigned int v6 = 0;
  }
  else {
    unsigned int v6 = -1;
  }
  if (v5) {
    return 1;
  }
  else {
    return v6;
  }
}

BOOL cStringEqualCallback(const char *a1, const char *a2)
{
  return strcmp(a1, a2) == 0;
}

uint64_t __si_scheduler_set_thread_block_invoke(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 64) = *(void *)(result + 40);
  return result;
}

void *stack_allocate(size_t size, uint64_t a2, uint64_t a3)
{
  result = *(void **)(a3 + 8);
  size_t v6 = ((unint64_t)result + size + 15) & 0xFFFFFFFFFFFFFFF0;
  if (v6 >= *(void *)(a3 + 16))
  {
    result = malloc_type_zone_malloc(*(malloc_zone_t **)(a3 + 32), size, 0xD2E25A3BuLL);
    if (result) {
      ++*(void *)(a3 + 24);
    }
  }
  else
  {
    *(void *)(a3 + 8) = v6;
  }
  return result;
}

double __CIIndexSetInit(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

uint64_t compare_node_cost(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(void *)a1 + 8) - *(_DWORD *)(*(void *)a2 + 8));
}

void _ContentIndexDocSetRelease(uint64_t a1, uint64_t a2)
{
}

void _ContentIndexDocSetRelease(const __CFAllocator *a1, uint64_t a2)
{
}

void __enqueue_work_with_qos_block_invoke(uint64_t a1)
{
}

void free_qp(uint64_t a1)
{
  v2 = *(void **)(a1 + 168);
  if (v2)
  {
    if (*(int *)(a1 + 40) >= 1)
    {
      uint64_t v3 = 0;
      do
        free(*(void **)(*(void *)(a1 + 168) + 8 * v3++));
      while (v3 < *(int *)(a1 + 40));
      v2 = *(void **)(a1 + 168);
    }
    free(v2);
    *(void *)(a1 + 168) = 0;
    unint64_t v4 = *(void **)(a1 + 272);
    if (v4)
    {
      free(v4);
      *(void *)(a1 + 272) = 0;
    }
  }
  BOOL v5 = *(void **)(a1 + 296);
  if (v5)
  {
    free(v5);
    *(void *)(a1 + 296) = 0;
  }
  size_t v6 = *(void **)(a1 + 288);
  if (v6)
  {
    free(v6);
    *(void *)(a1 + 288) = 0;
  }
  if (*(void *)a1) {
    free(*(void **)a1);
  }
  *(void *)a1 = 0;
  v7 = *(void **)(a1 + 136);
  if (v7) {
    free(v7);
  }
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  v8 = *(void **)(a1 + 72);
  if (v8) {
    free(v8);
  }
  *(void *)(a1 + 72) = 0;
  v9 = *(void **)(a1 + 88);
  if (v9) {
    free(v9);
  }
  v10 = *(void **)(a1 + 104);
  if ((*(_DWORD *)(a1 + 24) - 13) > 1)
  {
    icu_ctx_release();
LABEL_28:
    if (!*(void *)(a1 + 120)) {
      goto LABEL_34;
    }
    goto LABEL_32;
  }
  if (!v10) {
    goto LABEL_28;
  }
  int v11 = *(_DWORD *)(a1 + 40);
  if (v11 >= 1)
  {
    for (uint64_t i = 0; i < v11; ++i)
    {
      if (*(void *)(*(void *)(a1 + 104) + 8 * i))
      {
        icu_ctx_release();
        int v11 = *(_DWORD *)(a1 + 40);
      }
    }
    v10 = *(void **)(a1 + 104);
  }
  free(v10);
  if (*(void *)(a1 + 120))
  {
LABEL_32:
    v13 = *(void (**)(void))(a1 + 128);
    if (v13)
    {
      v13();
      *(void *)(a1 + 120) = 0;
    }
  }
LABEL_34:
  qp_string_id_cache_free(*(void **)(a1 + 112));
  free((void *)a1);
}

BOOL PayloadIterate(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v175 = *MEMORY[0x1E4F143B8];
  uint64_t v157 = *a1;
  if (*a1) {
    float v4 = *((float *)a1 + 4);
  }
  else {
    float v4 = 0.0;
  }
  BOOL v5 = *(unsigned char **)a2;
  uint64_t v6 = *(void *)(a2 + 48);
  char v172 = 1;
  int v7 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v8 = setThreadIdAndInfo(-1, sIteratorExceptionCallbacks, (uint64_t)a1, 0, v7);
  LODWORD(v159) = HIDWORD(v8);
  LODWORD(v173) = v8;
  LODWORD(v158) = v9;
  unsigned int v171 = v10;
  uint64_t v11 = *(void *)&threadData[18 * v8 + 2];
  uint64_t v12 = v11 + 320 * HIDWORD(v8);
  int v13 = *(_DWORD *)(v12 + 312);
  v14 = *(void (**)(void))(v12 + 224);
  if (v14) {
    v14(*(void *)(v11 + 320 * HIDWORD(v8) + 288));
  }
  unsigned int v170 = v173;
  unsigned int v169 = v159;
  unsigned int v168 = v158;
  unsigned int v167 = v171;
  if (_setjmp((int *)v12))
  {
    v15 = (_DWORD *)(v12 + 312);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
    }
    _DWORD *v15 = v13;
    CIOnThreadCleanUpReset(v167);
    dropThreadId(v170, 1, v7);
    CICleanUpReset(v170, v168);
    goto LABEL_31;
  }
  v155 = v5;
  uint64_t v17 = v6;
  int v18 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v19 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v18);
  unsigned int v165 = HIDWORD(v19);
  *(_DWORD *)buf = v19;
  unint64_t v164 = __PAIR64__(v20, v21);
  uint64_t v22 = *(void *)&threadData[18 * v19 + 2];
  uint64_t v23 = v22 + 320 * HIDWORD(v19);
  int v24 = *(_DWORD *)(v23 + 312);
  v25 = *(void (**)(void))(v23 + 224);
  if (v25) {
    v25(*(void *)(v22 + 320 * HIDWORD(v19) + 288));
  }
  unsigned int v163 = *(_DWORD *)buf;
  unsigned int v162 = v165;
  unint64_t v161 = v164;
  if (!_setjmp((int *)v23))
  {
    if (!a1[81])
    {
      if (*(void *)(v17 + 24) >> 1 >= *(void *)(*(void *)(a2 + 48) + 32)) {
        unint64_t v26 = *(void *)(v17 + 24) >> 1;
      }
      else {
        unint64_t v26 = 0;
      }
      *((void *)a1 + 3) = v26;
      a1[81] = 1;
      if (v26)
      {
        uint64_t v27 = (uint64_t)(a1 + 160);
      }
      else
      {
        if (a1[80])
        {
          *((void *)a1 + 28) = 0;
          ++*((_DWORD *)a1 + 54);
          uint64_t v28 = *((void *)a1 + 24);
          *((void *)a1 + 25) = 0;
          *((void *)a1 + 26) = v28;
          *((void *)a1 + 24) = 0;
          goto LABEL_25;
        }
        uint64_t v27 = (uint64_t)(a1 + 160);
        unint64_t v26 = 0;
      }
      oqsplit(v27, v26);
    }
LABEL_25:
    char v172 = 0;
    uint64_t v29 = *(void *)&threadData[18 * v163 + 2];
    unsigned int v30 = v162;
    uint64_t v31 = v29 + 320 * v162;
    *(_DWORD *)(v31 + 312) = v24;
    v32 = *(void (**)(void))(v31 + 232);
    if (v32) {
      v32(*(void *)(v29 + 320 * v30 + 288));
    }
    dropThreadId(v163, 0, v18);
    goto LABEL_28;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v160 = 0;
    _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v160, 2u);
  }
  *(_DWORD *)(v23 + 312) = v24;
  CIOnThreadCleanUpReset(v161);
  dropThreadId(v163, 1, v18);
  CICleanUpReset(v163, HIDWORD(v161));
LABEL_28:
  uint64_t v6 = v17;
  uint64_t v33 = *(void *)&threadData[18 * v170 + 2];
  unsigned int v34 = v169;
  uint64_t v35 = v33 + 320 * v169;
  *(_DWORD *)(v35 + 312) = v13;
  v36 = *(void (**)(void))(v35 + 232);
  BOOL v5 = v155;
  if (v36) {
    v36(*(void *)(v33 + 320 * v34 + 288));
  }
  dropThreadId(v170, 0, v7);
LABEL_31:
  if (v172)
  {
    BOOL result = 0;
    a1[64] = 1;
    return result;
  }
  uint64_t v38 = *((void *)a1 + 1);
  if (!v38)
  {
    uint64_t v50 = 0;
    unint64_t v51 = 0xBFFFFFFFFFFFFFFFLL;
    goto LABEL_140;
  }
  unint64_t v39 = v38 & 0x3FFFFFFFFFFFFFFFLL;
  unint64_t v40 = *(void *)(a2 + 16);
  if ((v38 & 0x3FFFFFFFFFFFFFFFuLL) >= v40)
  {
    unint64_t v41 = *(void *)(a2 + 56) + v40;
    if (v41 > v39 && v39 + 30 <= v41)
    {
      ++*(_DWORD *)(a2 + 64);
      v42 = v5;
      goto LABEL_58;
    }
  }
  if (*(unsigned char *)(a2 + 8))
  {
    v43 = (size_t *)MEMORY[0x1E4F14B00];
    int64_t v44 = v39 & -*MEMORY[0x1E4F14B00];
    size_t v45 = *(void *)(v6 + 24);
    size_t v46 = *(void *)(a2 + 56);
    if (v45 <= v46)
    {
      if ((uint64_t)v46 >= v44)
      {
        ++*(_DWORD *)(a2 + 64);
        v42 = *(unsigned char **)a2;
        goto LABEL_58;
      }
      size_t v49 = *(void *)(a2 + 56);
      if (!v46) {
        goto LABEL_56;
      }
    }
    else
    {
      uint64_t v47 = v6;
      v48 = (uint64_t *)MEMORY[0x1E4F14AF0];
      if ((uint64_t)(((*MEMORY[0x1E4F14AF0] + v45) & ~*MEMORY[0x1E4F14AF0]) + *MEMORY[0x1E4F14B00]) >= v44)
      {
        *(void *)(a2 + 16) = 0;
        munmap(*(void **)a2, v46);
        uint64_t v52 = *v48;
        uint64_t v6 = v47;
        size_t v53 = ((v52 + *(void *)(v47 + 24)) & ~v52) + *v43;
        *(void *)(a2 + 56) = v53;
        v54 = (char *)mmap(0, v53, 1, 1, *(_DWORD *)(v47 + 4496), 0);
        *(void *)a2 = v54;
        if (v54 == (char *)-1) {
          goto LABEL_56;
        }
        if (mmap(&v54[*(void *)(a2 + 56) - *v43], *v43, 1, 4114, -83886080, 0) != (void *)-1)
        {
          v42 = *(unsigned char **)a2;
          BOOL v5 = *(unsigned char **)a2;
          if (*(unsigned char *)(a2 + 8)) {
            goto LABEL_58;
          }
          goto LABEL_57;
        }
        int v55 = *__error();
        v56 = _SILogForLogForCategory(10);
        os_log_type_t v57 = dword_1E9FC90CC < 3;
        if (os_log_type_enabled(v56, (os_log_type_t)(dword_1E9FC90CC < 3)))
        {
          int v58 = *__error();
          LODWORD(v173) = 67109120;
          DWORD1(v173) = v58;
          _os_log_impl(&dword_1BD672000, v56, v57, "*warn* Failed to allocated guard page error %d", (uint8_t *)&v173, 8u);
        }
        *__error() = v55;
        size_t v49 = *(void *)(a2 + 56);
        uint64_t v6 = v47;
        if (!v49) {
          goto LABEL_56;
        }
      }
      else
      {
        size_t v49 = *(void *)(a2 + 56);
        uint64_t v6 = v47;
        if (!v46) {
          goto LABEL_56;
        }
      }
    }
    munmap(*(void **)a2, v49);
LABEL_56:
    *(void *)(a2 + 56) = 0x10000;
    v59 = malloc_type_malloc(0x10000uLL, 0x99FF4402uLL);
    *(void *)a2 = v59;
    *(unsigned char *)(a2 + 8) = 0;
    BOOL v5 = v59;
  }
LABEL_57:
  v42 = v5;
  *(void *)(a2 + 16) = v38 & 0x3FFFFFFFFFFFF000;
  uint64_t v60 = fd_pread(*(_DWORD **)(v6 + 4488), v5, *(void *)(a2 + 56), v38 & 0x3FFFFFFFFFFFF000);
  *(_DWORD *)(a2 + 64) = 0;
  if (v60 == -1) {
    return 0;
  }
LABEL_58:
  uint64_t v61 = v6;
  v62 = v42;
  uint64_t v63 = v38 & 0x4000000000000000;
  unint64_t v154 = v38 & 0x4000000000000000;
  unint64_t v159 = v39 - *(void *)(a2 + 16);
  unint64_t v64 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = v159;
  do
  {
    uint64_t v67 = v66;
    uint64_t v68 = v65;
    uint64_t v69 = v66 + 1;
    unint64_t v70 = ((unint64_t)(v42[v66] & 0x7F) << v65) | v64;
    if ((v42[v66] & 0x80) == 0) {
      break;
    }
    v65 += 7;
    ++v66;
    unint64_t v64 = v70;
  }
  while (v68 != 63);
  unint64_t v159 = v69;
  uint64_t v156 = v38 & 0x3FFFFFFFFFFFFFFFLL;
  if ((v70 & 1) == 0)
  {
    DWORD2(v173) = 0;
    *(void *)&long long v173 = 0;
    int v71 = unpackPosting((uint64_t)v42, (uint64_t *)&v159, (uint64_t)&v173);
    if (v71)
    {
      if (*(void *)((char *)&v173 + 4)) {
        handleUpdate(a1, *(unint64_t *)((char *)&v173 + 4), v71, v157 | ((unint64_t)LODWORD(v4) << 32));
      }
LABEL_89:
      unint64_t v91 = *((void *)a1 + 1);
      if ((v91 & 0x3FFFFFFFFFFFFFFFLL) != v39)
      {
        v92 = __si_assert_copy_extra(0);
        v93 = v92;
        v94 = "";
        if (v92) {
          v94 = v92;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 760, "((((iter->ptr.has_meta?iter->ptr.with_meta.offset:iter->ptr.just_offset) & 0x3FFFFFFFFFFFFFFF)))==next", v94);
        free(v93);
        if (__valid_fs(-1))
        {
LABEL_93:
          uint64_t v95 = 2989;
          goto LABEL_210;
        }
LABEL_209:
        uint64_t v95 = 3072;
LABEL_210:
        *(_DWORD *)uint64_t v95 = -559038737;
        abort();
      }
      goto LABEL_110;
    }
    if (*((void *)a1 + 17))
    {
      uint64_t v73 = *(void *)((char *)&v173 + 4);
      uint64_t v74 = *((void *)a1 + 14);
      if ((unint64_t)(v74 + *(void *)((char *)&v173 + 4)) <= **((void **)a1 + 16))
      {
        char v75 = checkAgainstChangeHolder((uint64_t)(a1 + 128), v74 + DWORD1(v173));
        if (!v73) {
          goto LABEL_89;
        }
        uint64_t v76 = v73;
        if (v75) {
          goto LABEL_89;
        }
LABEL_75:
        if (v63)
        {
          v88 = (unsigned int *)*((void *)a1 + 11);
          LODWORD(v158) = -1;
          if (!_CIIndexSetAddIndex(v88, v76, 0, &v158, v72))
          {
LABEL_87:
            if (v157) {
              distanceHolderSetMinDistance(*((void *)a1 + 9), *((void *)a1 + 14) + v76, v4);
            }
            goto LABEL_89;
          }
          v90 = (unsigned int *)*((void *)a1 + 12);
          LODWORD(v158) = -1;
          if (_CIIndexSetAddIndex(v90, v76, 0, &v158, v89)) {
            ++*((_DWORD *)a1 + 26);
          }
        }
        else
        {
          if (_CIIndexSetRemoveIndex(*((int **)a1 + 12), v76)) {
            --*((_DWORD *)a1 + 26);
          }
          v87 = (unsigned int *)*((void *)a1 + 11);
          LODWORD(v158) = -1;
          if (!_CIIndexSetAddIndex(v87, v76, 0, &v158, v86)) {
            goto LABEL_87;
          }
        }
        if (*(_DWORD *)(a2 + 40) >= v76)
        {
          if (*(_DWORD *)(a2 + 44) > v76) {
            *(_DWORD *)(a2 + 44) = v76;
          }
        }
        else
        {
          *(_DWORD *)(a2 + 40) = v76;
        }
        goto LABEL_87;
      }
    }
    else
    {
      uint64_t v73 = *(void *)((char *)&v173 + 4);
    }
    uint64_t v76 = v73;
    if (!v73) {
      goto LABEL_89;
    }
    goto LABEL_75;
  }
  uint64_t v77 = v67 + 2;
  int v78 = (char)v42[v69];
  unsigned int v79 = v42[v69];
  if ((v78 & 0x80000000) == 0)
  {
    unsigned int v80 = v79;
    uint64_t v81 = v67 + 2;
    unsigned int v82 = v80;
    goto LABEL_99;
  }
  uint64_t v83 = v67 + 3;
  int v84 = (char)v42[v77];
  int v85 = v42[v77];
  if ((v84 & 0x80000000) == 0)
  {
    unsigned int v82 = v79 & 0x7F | (v85 << 7);
    uint64_t v81 = v67 + 3;
    goto LABEL_99;
  }
  uint64_t v96 = v67 + 4;
  int v97 = (char)v42[v83];
  int v98 = v42[v83];
  if ((v97 & 0x80000000) == 0)
  {
    int v99 = ((v85 & 0x7F) << 7) | (v98 << 14) | v79 & 0x7F;
    uint64_t v81 = v96;
LABEL_98:
    unsigned int v82 = v99;
    goto LABEL_99;
  }
  uint64_t v100 = v67 + 5;
  int v101 = (char)v42[v96];
  int v102 = v42[v96];
  if ((v101 & 0x80000000) == 0)
  {
    int v99 = ((v98 & 0x7F) << 14) | (v102 << 21) | ((v85 & 0x7F) << 7) | v79 & 0x7F;
    uint64_t v81 = v100;
    goto LABEL_98;
  }
  int v134 = (char)v42[v100];
  if (v134 < 0)
  {
    v138 = __si_assert_copy_extra(0);
    __message_assert("%s:%u: failed assertion '%s' %s readVInt32: exceeds max size for uint32_t");
LABEL_179:
    free(v138);
    if (__valid_fs(-1)) {
      uint64_t v139 = 2989;
    }
    else {
      uint64_t v139 = 3072;
    }
    *(_DWORD *)uint64_t v139 = -559038737;
    abort();
  }
  int v135 = ((v102 & 0x7F) << 21) | (v134 << 28) | ((v98 & 0x7F) << 14) | ((v85 & 0x7F) << 7) | v79 & 0x7F;
  uint64_t v81 = v67 + 6;
  unsigned int v82 = v135;
LABEL_99:
  size_t v158 = 0;
  unint64_t v159 = v81;
  size_t v103 = v82;
  unint64_t v152 = *(unsigned int *)(a2 + 56);
  unint64_t v153 = v81 + v82;
  if (v153 <= v152)
  {
    v104 = 0;
    v105 = &v62[v81];
    uint64_t v106 = 0;
    goto LABEL_101;
  }
  v136 = malloc_type_malloc(v82 + 4, 0xD22D2601uLL);
  if (v103 >> 28)
  {
    uint64_t v137 = 5;
  }
  else if ((v103 & 0xFE00000) != 0)
  {
    uint64_t v137 = 4;
  }
  else
  {
    uint64_t v146 = 1;
    if ((v103 & 0x3F80) != 0) {
      uint64_t v146 = 2;
    }
    uint64_t v137 = 3;
    if ((v103 & 0x1FC000) == 0) {
      uint64_t v137 = v146;
    }
  }
  uint64_t v144 = 1;
  if ((v70 & 0x3F80) != 0) {
    uint64_t v144 = 2;
  }
  if ((v70 & 0x1FC000) != 0) {
    uint64_t v144 = 3;
  }
  uint64_t v145 = 4;
  if ((v70 & 0xFE00000) == 0) {
    uint64_t v145 = v144;
  }
  if (v70 >> 28) {
    uint64_t v145 = 5;
  }
  if (fd_pread(*(_DWORD **)(v61 + 4488), v136, v103, v137 + v39 + v145) == -1)
  {
    free(v136);
    return 0;
  }
  v104 = CICleanUpThreadLoc();
  uint64_t v106 = CICleanUpPush((uint64_t)v104, MEMORY[0x1E4F14838], (uint64_t)v136);
  v105 = v136;
LABEL_101:
  unint64_t v151 = v106;
  *((void *)&v173 + 1) = a2;
  unint64_t v174 = 0xFFFFFFFF00000000;
  *(void *)&long long v173 = a1;
  LOBYTE(v174) = v154 >> 62;
  if (v103)
  {
    do
    {
      if (unpackPostingChunk((uint64_t)v105, &v158, v103, *(_DWORD *)(a2 + 68), v157 | ((unint64_t)LODWORD(v4) << 32), (void (*)(uint64_t, void, uint64_t, void, void, uint64_t))PayloadProcessDocIDRangeBitsReversed, (uint64_t)&v173))BOOL v107 = v158 >= v103; {
      else
      }
        BOOL v107 = 1;
    }
    while (!v107);
  }
  if (v153 > v152)
  {
    free(v105);
    CICleanUpClearItem((uint64_t)v104, v151);
    CICleanUpPop((uint64_t)v104);
  }
  unint64_t v91 = *((void *)a1 + 1);
  if ((v91 & 0x3FFFFFFFFFFFFFFFLL) != v39)
  {
    v138 = __si_assert_copy_extra(0);
    __message_assert("%s:%u: failed assertion '%s' %s ");
    goto LABEL_179;
  }
LABEL_110:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  unint64_t v108 = v91;
  if (v70 >= 2)
  {
    unint64_t v109 = v70 >> 1;
    if (a1[80])
    {
      v140 = __si_assert_copy_extra(*(_DWORD **)(*(void *)(a2 + 48) + 4488));
      v141 = v140;
      v142 = "";
      if (v140) {
        v142 = v140;
      }
      __message_assert("%s:%u: failed assertion '%s' %s nxtLink: %lld. compact", "PayloadIterator.c", 819, "iter->compact == false", v142, v70 >> 1);
      free(v141);
      if (__valid_fsp(*(_DWORD **)(*(void *)(a2 + 48) + 4488))) {
        uint64_t v143 = 2989;
      }
      else {
        uint64_t v143 = 3072;
      }
      *(_DWORD *)uint64_t v143 = -559038737;
      abort();
    }
    unint64_t v110 = (v70 >> 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v110 != v39)
    {
      if (v110 <= v39)
      {
        unint64_t v112 = *((void *)a1 + 3);
        uint64_t v113 = *(void *)(a2 + 48);
        unint64_t v114 = *(void *)(v113 + 32);
        if (v112 >= v114) {
          unint64_t v114 = 2 * v112;
        }
        BOOL v116 = v110 <= v114 && v39 > v114;
        if (v110 >= v112 && !v116)
        {
          unint64_t v147 = v114;
          v148 = __si_assert_copy_extra(*(_DWORD **)(v113 + 4488));
          v149 = v148;
          v150 = "";
          if (v148) {
            v150 = v148;
          }
          __message_assert("%s:%u: failed assertion '%s' %s Unexpected value for nextLink: %lld. next=%lld barrier=%lld split=%lld", "PayloadIterator.c", 843, "(OFFSET_GET_VALUE(nxtLink) <= barrier && next>barrier)|| (OFFSET_GET_VALUE(nxtLink)<iter->split)", v150, v110, v156, v147, *((void *)a1 + 3));
          free(v149);
          if (__valid_fsp(*(_DWORD **)(*(void *)(a2 + 48) + 4488))) {
            goto LABEL_93;
          }
          goto LABEL_209;
        }
        if (v157) {
          oqpush_with_meta((uint64_t)(a1 + 160), v109 | v154, LODWORD(v4));
        }
        else {
          oqpush_10759(a1 + 160, v109 | v154, v16);
        }
        if (*(void *)(a2 + 32) > v110)
        {
          unint64_t v118 = *((void *)a1 + 3);
          if (v110 < v118 && v110 > v118 >> 1) {
            *(void *)(a2 + 32) = v110;
          }
        }
      }
      else
      {
        if (v157)
        {
          uint64_t v111 = v109 | v154;
          pq_force_meta((uint64_t)(a1 + 232));
          pqpush_with_meta((uint64_t)(a1 + 232), v111, LODWORD(v4));
        }
        else
        {
          pqpush((uint64_t)(a1 + 232), v109 | v154);
        }
        unint64_t v117 = *(void *)(a2 + 24);
        if (v117 >= v110) {
          unint64_t v117 = v110;
        }
        *(void *)(a2 + 24) = v117;
      }
    }
  }
  uint64_t v119 = *((void *)a1 + 1);
  if ((v119 & 0x3FFFFFFFFFFFFFFFLL) != 0)
  {
    unint64_t v120 = v119 & 0x3FFFFFFFFFFFFFFFLL;
    return v120 != 0;
  }
  unint64_t v51 = v108;
  uint64_t v50 = *((void *)a1 + 1);
  do
  {
LABEL_140:
    uint64_t v121 = *((void *)a1 + 25);
    uint64_t v122 = *((void *)a1 + 26);
    if (*((void *)a1 + 32) == 1)
    {
      uint64_t v123 = v50;
      if (v122 == v121) {
        break;
      }
      goto LABEL_160;
    }
    if (v122 == v121) {
      goto LABEL_159;
    }
    uint64_t v124 = *((void *)a1 + 30);
    if (a1[232])
    {
      if (v124)
      {
        v125 = (unint64_t *)(v124 + 16);
LABEL_149:
        unint64_t v126 = *v125;
        goto LABEL_151;
      }
    }
    else if (v124)
    {
      v125 = (unint64_t *)(v124 + 8);
      goto LABEL_149;
    }
    unint64_t v126 = 0;
LABEL_151:
    if (a1[160])
    {
      if (v121 < v122)
      {
        v127 = (unint64_t *)(*((void *)a1 + 22) + 16 * v121);
LABEL_156:
        unint64_t v128 = *v127;
        goto LABEL_158;
      }
    }
    else if (v121 < v122)
    {
      v127 = (unint64_t *)(*((void *)a1 + 22) + 8 * v121);
      goto LABEL_156;
    }
    unint64_t v128 = 0;
LABEL_158:
    if (v126 < v128)
    {
LABEL_159:
      uint64_t v50 = pqpop((uint64_t)(a1 + 232), a1);
      goto LABEL_161;
    }
LABEL_160:
    uint64_t v50 = oqpop((uint64_t)(a1 + 160), a1);
LABEL_161:
    *((void *)a1 + 1) = v50;
    *((void *)a1 + 2) = v129;
    uint64_t v123 = v50;
  }
  while (((v50 ^ v51) & 0x3FFFFFFFFFFFFFFFLL) == 0);
  unint64_t v120 = v123 & 0x3FFFFFFFFFFFFFFFLL;
  if ((v123 & 0x3FFFFFFFFFFFFFFFLL) == 0)
  {
    unint64_t v120 = *((void *)a1 + 24);
    if (v120)
    {
      unint64_t v120 = *((void *)a1 + 3);
      do
      {
        unint64_t v130 = v120 >> 1;
        if (v130 >= *(void *)(*(void *)(a2 + 48) + 32)) {
          unint64_t v131 = v130;
        }
        else {
          unint64_t v131 = 0;
        }
        *((void *)a1 + 3) = v131;
        oqsplit((uint64_t)(a1 + 160), v131);
        uint64_t v132 = oqpop((uint64_t)(a1 + 160), a1);
        *((void *)a1 + 1) = v132;
        *((void *)a1 + 2) = v133;
        unint64_t v120 = v132 & 0x3FFFFFFFFFFFFFFFLL;
        if ((v132 & 0x3FFFFFFFFFFFFFFFLL) != 0) {
          break;
        }
        unint64_t v120 = *((void *)a1 + 3);
      }
      while (v120);
    }
  }
  return v120 != 0;
}

void *internal_copy_field_ids(uint64_t a1, char *__s, uint64_t a3, unint64_t a4, int a5)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(a1 + 804) & 0x14) != 0)
  {
    uint64_t v9 = *(void *)(a1 + 880);
    size_t v10 = strlen(__s);
    size_t v11 = v10 + 1;
    if (a5)
    {
      if (*(unsigned char *)(v9 + 1460)) {
        unsigned int v12 = LegacyHash((unsigned __int16 *)__s, v11);
      }
      else {
        unsigned int v12 = commonHash((int)v10 + 1, (uint64_t)__s);
      }
      unsigned int locked_with_hash = data_map32_ids_get_locked_with_hash(a3, v9, v12, a4, __s, v11);
      unsigned int v49 = locked_with_hash;
      BOOL v50 = locked_with_hash != 0;
      if (locked_with_hash)
      {
        unint64_t v51 = locked_with_hash + 1;
        if (v51 > a4)
        {
          LODWORD(v52) = locked_with_hash + 1;
          size_t v53 = (void *)a3;
          do
          {
            if (v53 == (void *)a3) {
              v54 = malloc_type_malloc(4 * v51, 0x100004052888210uLL);
            }
            else {
              v54 = malloc_type_realloc(v53, 4 * v51, 0x100004052888210uLL);
            }
            size_t v53 = v54;
            if (*(unsigned char *)(v9 + 1460)) {
              unsigned int v55 = LegacyHash((unsigned __int16 *)__s, v11);
            }
            else {
              unsigned int v55 = commonHash(v11, (uint64_t)__s);
            }
            unsigned int v56 = data_map32_ids_get_locked_with_hash((uint64_t)v53, v9, v55, v52, __s, v11);
            unsigned int v49 = v56;
            BOOL v50 = v56 != 0;
            if (!v56) {
              break;
            }
            unint64_t v52 = v56 + 1;
            BOOL v26 = v51 >= v52;
            unint64_t v51 = v52;
          }
          while (!v26);
LABEL_95:
          if (v50) {
            goto LABEL_96;
          }
          return 0;
        }
      }
    }
    else
    {
      if (*(unsigned char *)(v9 + 1460)) {
        unsigned int v20 = LegacyHash((unsigned __int16 *)__s, v11);
      }
      else {
        unsigned int v20 = commonHash((int)v10 + 1, (uint64_t)__s);
      }
      unsigned int v57 = v20;
      if (_data_map32_rdlock(v9)) {
        return 0;
      }
      unsigned int v49 = data_map32_ids_get_locked_with_hash(a3, v9, v57, a4, __s, v11);
      _data_map32_unlock(v9);
      BOOL v50 = v49 != 0;
      if (!v49)
      {
        size_t v53 = (void *)a3;
        goto LABEL_95;
      }
      unint64_t v58 = v49 + 1;
      if (v58 > a4)
      {
        LODWORD(v59) = v49 + 1;
        size_t v53 = (void *)a3;
        while (1)
        {
          uint64_t v60 = v53 == (void *)a3
              ? malloc_type_malloc(4 * v58, 0x100004052888210uLL)
              : malloc_type_realloc(v53, 4 * v58, 0x100004052888210uLL);
          size_t v53 = v60;
          unsigned int v61 = *(unsigned char *)(v9 + 1460) ? LegacyHash((unsigned __int16 *)__s, v11) : commonHash(v11, (uint64_t)__s);
          unsigned int v62 = v61;
          if (_data_map32_rdlock(v9)) {
            return 0;
          }
          unsigned int v49 = data_map32_ids_get_locked_with_hash((uint64_t)v53, v9, v62, v59, __s, v11);
          _data_map32_unlock(v9);
          BOOL v50 = v49 != 0;
          if (v49)
          {
            unint64_t v59 = v49 + 1;
            BOOL v26 = v58 >= v59;
            unint64_t v58 = v59;
            if (!v26) {
              continue;
            }
          }
          goto LABEL_95;
        }
      }
    }
    size_t v53 = (void *)a3;
    if (v50)
    {
LABEL_96:
      *((_DWORD *)v53 + v49) = 0;
      return v53;
    }
    return 0;
  }
  int v13 = -1759636613;
  memset(__src, 0, sizeof(__src));
  uint64_t v14 = *(void *)(*(void *)(a1 + 880) + 16);
  int v15 = strlen(__s);
  if (v15 >= 0) {
    int v16 = v15;
  }
  else {
    int v16 = v15 + 3;
  }
  uint64_t v17 = &__s[v16 & 0xFFFFFFFC];
  if ((v15 + 3) >= 7)
  {
    uint64_t v21 = -(v16 >> 2);
    int v22 = -1789642873;
    int v23 = 718793509;
    do
    {
      int v22 = 5 * v22 + 2071795100;
      int v23 = 5 * v23 + 1808688022;
      HIDWORD(v24) = v22 * *(_DWORD *)&v17[4 * v21];
      LODWORD(v24) = HIDWORD(v24);
      int v25 = (v24 >> 21) * v23;
      HIDWORD(v24) = v13;
      LODWORD(v24) = v13;
      int v13 = v25 ^ (5 * (v24 >> 19) + 1390208809);
      BOOL v26 = __CFADD__(v21++, 1);
    }
    while (!v26);
    int v19 = 5 * v22 + 2071795100;
    int v18 = 5 * v23 + 1808688022;
  }
  else
  {
    int v18 = 1107688271;
    int v19 = 1713515327;
  }
  int v27 = 0;
  int v28 = v15 & 3;
  switch(v28)
  {
    case 1:
      goto LABEL_21;
    case 2:
LABEL_20:
      v27 |= v17[1] << 8;
LABEL_21:
      HIDWORD(v29) = (v27 ^ *v17) * v19;
      LODWORD(v29) = HIDWORD(v29);
      int v30 = (v29 >> 21) * v18;
      HIDWORD(v29) = v13;
      LODWORD(v29) = v13;
      int v13 = v30 ^ (5 * (v29 >> 19) + 1390208809);
      break;
    case 3:
      int v27 = v17[2] << 16;
      goto LABEL_20;
  }
  uint64_t v73 = (void *)a3;
  unsigned int v31 = -1028477387 * ((-2048144789 * (v13 ^ v15)) ^ ((-2048144789 * (v13 ^ v15)) >> 13));
  int v32 = v31 ^ HIWORD(v31);
  if ((a5 & 1) == 0) {
    pthread_rwlock_rdlock((pthread_rwlock_t *)v14);
  }
  uint64_t v33 = v14 + 208 + 16 * (v32 & 0x7F);
  int v34 = *(_DWORD *)(v33 + 8);
  char v72 = a5;
  if ((v34 & 0x80000000) == 0)
  {
    uint64_t v35 = 0;
    unint64_t v36 = 0;
    goto LABEL_84;
  }
  unsigned int v75 = v32 & 0x7FFFFFFF;
  __s1 = __s;
  if ((v34 & 0x7FFFFFFF) == (v32 & 0x7FFFFFFF) && (v37 = *(const char **)v33, !strcmp(__s, *(const char **)v33)))
  {
    *(void *)&__src[0] = &v37[-*(void *)(v14 + 200) - 4];
    uint64_t v35 = __src;
    unint64_t v39 = 8;
    unint64_t v38 = 1;
  }
  else
  {
    uint64_t v35 = 0;
    unint64_t v38 = 0;
    unint64_t v39 = 0;
  }
  unsigned int v40 = *(_DWORD *)(v14 + 2272);
  int v41 = v75 % v40;
  unsigned int v42 = v75 % v40;
  do
  {
    uint64_t v44 = *(void *)(v14 + 2264);
    uint64_t v45 = v44 + 16 * v42;
    if ((*(_DWORD *)(v45 + 8) & 0x80000000) != 0)
    {
      uint64_t v46 = v14;
      unsigned int v47 = v42;
      while ((*(_DWORD *)(v45 + 8) & 0x7FFFFFFF) != v75 || strcmp(__s1, *(const char **)v45))
      {
        if (v47 + 1 < v40) {
          ++v47;
        }
        else {
          unsigned int v47 = v47 + 1 - v40;
        }
        if (v47 != v42)
        {
          uint64_t v45 = v44 + 16 * v47;
          if ((*(_DWORD *)(v45 + 8) & 0x80000000) != 0) {
            continue;
          }
        }
        unint64_t v36 = v38;
        BOOL v26 = v47 >= v40;
        uint64_t v14 = v46;
        if (!v26) {
          goto LABEL_84;
        }
LABEL_102:
        uint64_t v68 = __si_assert_copy_extra_329();
        uint64_t v69 = v68;
        unint64_t v70 = "";
        if (v68) {
          unint64_t v70 = v68;
        }
        __message_assert(v68, "db-common.c", 248, "slot < table->size", v70);
        free(v69);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      unsigned int v42 = v47;
      uint64_t v14 = v46;
    }
    if (v42 >= v40) {
      goto LABEL_102;
    }
    if ((*(_DWORD *)(v45 + 8) & 0x80000000) == 0)
    {
      unint64_t v36 = v38;
      break;
    }
    if (v39 <= v38)
    {
      if (v39) {
        v39 *= 2;
      }
      else {
        unint64_t v39 = 1;
      }
      if (v35 == __src)
      {
        uint64_t v35 = malloc_type_malloc(8 * v39, 0x80040B8603338uLL);
        memcpy(v35, __src, 8 * v38);
      }
      else
      {
        uint64_t v35 = malloc_type_realloc(v35, 8 * v39, 0x80040B8603338uLL);
      }
    }
    uint64_t v43 = *(void *)v45 - *(void *)(v14 + 200) - 4;
    unint64_t v36 = v38 + 1;
    *((void *)v35 + v38) = v43;
    unsigned int v40 = *(_DWORD *)(v14 + 2272);
    unsigned int v42 = (v42 + 1) % v40;
    ++v38;
  }
  while (v41 != v42);
LABEL_84:
  if ((v72 & 1) == 0) {
    pthread_rwlock_unlock((pthread_rwlock_t *)v14);
  }
  size_t v53 = v73;
  if (!v35) {
    return 0;
  }
  if (v36 + 1 > a4) {
    size_t v53 = malloc_type_malloc(4 * (v36 + 1), 0x100004052888210uLL);
  }
  if (v36)
  {
    uint64_t v63 = (_DWORD **)v35;
    unint64_t v64 = v53;
    unint64_t v65 = v36;
    do
    {
      uint64_t v66 = *v63++;
      *v64++ = *v66;
      --v65;
    }
    while (v65);
  }
  *((_DWORD *)v53 + v36) = 0;
  if (v35 != __src) {
    free(v35);
  }
  return v53;
}

uint64_t commonHash(int a1, uint64_t a2)
{
  int v2 = -1759636613;
  if (a1 >= 0) {
    int v3 = a1;
  }
  else {
    int v3 = a1 + 3;
  }
  float v4 = (unsigned __int8 *)(a2 + (int)(v3 & 0xFFFFFFFC));
  if ((a1 + 3) >= 7)
  {
    uint64_t v7 = -(v3 >> 2);
    int v8 = -1789642873;
    int v9 = 718793509;
    do
    {
      int v8 = 5 * v8 + 2071795100;
      int v9 = 5 * v9 + 1808688022;
      HIDWORD(v10) = v8 * *(_DWORD *)&v4[4 * v7];
      LODWORD(v10) = HIDWORD(v10);
      int v11 = (v10 >> 21) * v9;
      HIDWORD(v10) = v2;
      LODWORD(v10) = v2;
      int v2 = v11 ^ (5 * (v10 >> 19) + 1390208809);
    }
    while (!__CFADD__(v7++, 1));
    int v6 = 5 * v8 + 2071795100;
    int v5 = 5 * v9 + 1808688022;
  }
  else
  {
    int v5 = 1107688271;
    int v6 = 1713515327;
  }
  int v13 = 0;
  int v14 = a1 & 3;
  switch(v14)
  {
    case 1:
      goto LABEL_15;
    case 2:
LABEL_14:
      v13 |= v4[1] << 8;
LABEL_15:
      HIDWORD(v15) = (v13 ^ *v4) * v6;
      LODWORD(v15) = HIDWORD(v15);
      int v16 = (v15 >> 21) * v5;
      HIDWORD(v15) = v2;
      LODWORD(v15) = v2;
      int v2 = v16 ^ (5 * (v15 >> 19) + 1390208809);
      break;
    case 3:
      int v13 = v4[2] << 16;
      goto LABEL_14;
  }
  unsigned int v17 = -1028477387 * ((-2048144789 * (v2 ^ a1)) ^ ((-2048144789 * (v2 ^ a1)) >> 13));
  return v17 ^ HIWORD(v17);
}

uint64_t data_map32_ids_get_locked_with_hash(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, const void *a5, size_t a6)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(unsigned int *)(a2 + 1244);
  unsigned int v11 = *(_DWORD *)(a2 + 1384);
  char v69 = 0;
  makeThreadId();
  int v12 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v13 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_13821, a2, 0, v12);
  unsigned int v67 = HIDWORD(v13);
  unsigned int v68 = v13;
  unint64_t v66 = __PAIR64__(v14, v15);
  uint64_t v16 = *(void *)&threadData[18 * v13 + 2];
  uint64_t v17 = v16 + 320 * HIDWORD(v13);
  int v58 = *(_DWORD *)(v17 + 312);
  int v18 = *(void (**)(void))(v17 + 224);
  if (v18) {
    v18(*(void *)(v16 + 320 * HIDWORD(v13) + 288));
  }
  unsigned int v65 = v68;
  unsigned int v64 = v67;
  unint64_t v63 = v66;
  if (_setjmp((int *)v17))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", (uint8_t *)&buf, 2u);
    }
    *(_DWORD *)(v17 + 312) = v58;
    CIOnThreadCleanUpReset(v63);
    dropThreadId(v65, 1, v12);
    CICleanUpReset(v65, HIDWORD(v63));
    uint64_t v19 = 0;
    goto LABEL_38;
  }
  size_t v59 = a6;
  int v60 = v12;
  int v20 = a3 % v11;
  unsigned int v21 = a3 % v11;
  uint64_t v55 = v10;
  size_t v54 = v10 + a6;
  uint64_t v22 = 0;
  do
  {
    uint64_t v23 = v22;
    uint64_t v24 = *(void *)(a2 + 1376);
    uint64_t v25 = *(unsigned int *)(v24 + 4 * v21);
    if (!v25) {
      break;
    }
    uint64_t v26 = v21;
    if (*(_DWORD *)(a2 + 1388) <= v25)
    {
      long long v99 = 0u;
      long long v100 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long buf = 0u;
      long long v86 = 0u;
      int v39 = *__error();
      unsigned int v40 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        log = v40;
        int v43 = *(_DWORD *)(a2 + 1388);
        uint64_t v44 = fd_name(*(void *)(a2 + 1264), (char *)&buf, 0x100uLL);
        LODWORD(v101[0]) = 136316418;
        *(void *)((char *)v101 + 4) = "_data_map32_get_offset_entry";
        WORD2(v101[1]) = 1024;
        *(_DWORD *)((char *)&v101[1] + 6) = 424;
        WORD1(v101[2]) = 1024;
        HIDWORD(v101[2]) = v25;
        LOWORD(v101[3]) = 1024;
        *(_DWORD *)((char *)&v101[3] + 2) = v43;
        HIWORD(v101[3]) = 2048;
        v101[4] = a2;
        LOWORD(v101[5]) = 2080;
        *(void *)((char *)&v101[5] + 2) = v44;
        _os_log_error_impl(&dword_1BD672000, log, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %d max %d %p %s", (uint8_t *)v101, 0x32u);
      }
      *__error() = v39;
      goto LABEL_23;
    }
    uint64_t v27 = *(unsigned int *)(*(void *)(a2 + 1344) + 4 * v25);
    if (v27 != 1)
    {
      uint64_t v61 = 0;
      uint64_t v62 = 0;
      char v70 = 0;
      unsigned int v28 = *(_DWORD *)(a2 + 1320);
      if (v28 <= v27)
      {
        long long v99 = 0u;
        long long v100 = 0u;
        long long v97 = 0u;
        long long v98 = 0u;
        long long v95 = 0u;
        long long v96 = 0u;
        long long v93 = 0u;
        long long v94 = 0u;
        long long v91 = 0u;
        long long v92 = 0u;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        long long buf = 0u;
        long long v86 = 0u;
        int v31 = *__error();
        int v41 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
        {
          os_log_t v53 = v41;
          uint64_t v45 = *(unsigned int *)(a2 + 1320);
          uint64_t v46 = fd_name(*(void *)(a2 + 1264), (char *)&buf, 0x100uLL);
          LODWORD(v101[0]) = 136316418;
          *(void *)((char *)v101 + 4) = "_data_map32_get_data_entry";
          WORD2(v101[1]) = 1024;
          *(_DWORD *)((char *)&v101[1] + 6) = 448;
          WORD1(v101[2]) = 2048;
          *(void *)((char *)&v101[2] + 4) = v27;
          WORD2(v101[3]) = 2048;
          *(void *)((char *)&v101[3] + 6) = v45;
          HIWORD(v101[4]) = 2048;
          v101[5] = a2;
          LOWORD(v101[6]) = 2080;
          *(void *)((char *)&v101[6] + 2) = v46;
          uint64_t v35 = v53;
          unint64_t v36 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
          v37 = (uint8_t *)v101;
          uint32_t v38 = 58;
LABEL_34:
          _os_log_error_impl(&dword_1BD672000, v35, OS_LOG_TYPE_ERROR, v36, v37, v38);
        }
      }
      else
      {
        data_entry_restore_32(*(void *)(a2 + 1312), v27, v28, (uint64_t)&v61, &v70);
        if (!v70)
        {
          if (v54 == v61 && !memcmp(a5, (const void *)(v62 + v55), v59))
          {
            if (v23 < a4) {
              *(_DWORD *)(a1 + 4 * v23) = *(_DWORD *)(v24 + 4 * v26);
            }
            uint64_t v23 = (v23 + 1);
          }
          goto LABEL_23;
        }
        uint64_t v110 = 0;
        long long v108 = 0u;
        long long v109 = 0u;
        long long v106 = 0u;
        long long v107 = 0u;
        long long v104 = 0u;
        long long v105 = 0u;
        long long v102 = 0u;
        long long v103 = 0u;
        uint64_t v29 = 0;
        memset(v101, 0, sizeof(v101));
        do
        {
          if (v27 + v29 >= (unint64_t)*(unsigned int *)(a2 + 1320)) {
            break;
          }
          size_t v30 = strlen((const char *)v101);
          sprintf((char *)v101 + v30, "%d ", *(unsigned __int8 *)(*(void *)(a2 + 1312) + v27 + v29++));
        }
        while (v29 != 5);
        long long v99 = 0u;
        long long v100 = 0u;
        long long v97 = 0u;
        long long v98 = 0u;
        long long v95 = 0u;
        long long v96 = 0u;
        long long v93 = 0u;
        long long v94 = 0u;
        long long v91 = 0u;
        long long v92 = 0u;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        long long buf = 0u;
        long long v86 = 0u;
        int v31 = *__error();
        int v32 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          uint64_t v33 = fd_name(*(void *)(a2 + 1264), (char *)&buf, 0x100uLL);
          uint64_t v34 = *(unsigned int *)(a2 + 1320);
          int v71 = 136316674;
          char v72 = "_data_map32_get_data_entry";
          __int16 v73 = 1024;
          int v74 = 444;
          __int16 v75 = 2080;
          uint64_t v76 = v33;
          __int16 v77 = 2048;
          uint64_t v78 = v27;
          __int16 v79 = 2048;
          uint64_t v80 = v34;
          __int16 v81 = 2048;
          uint64_t v82 = v61;
          __int16 v83 = 2080;
          int v84 = v101;
          uint64_t v35 = v32;
          unint64_t v36 = "%s:%d: data_entry_restore_32 failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
          v37 = (uint8_t *)&v71;
          uint32_t v38 = 68;
          goto LABEL_34;
        }
      }
      *__error() = v31;
    }
LABEL_23:
    uint64_t v22 = v23;
    if (v26 + 1 == v11) {
      unsigned int v42 = 0;
    }
    else {
      unsigned int v42 = v26 + 1;
    }
    unsigned int v21 = v42;
  }
  while (v42 != v20);
  char v69 = 1;
  uint64_t v47 = *(void *)&threadData[18 * v65 + 2];
  unsigned int v48 = v64;
  uint64_t v49 = v47 + 320 * v64;
  *(_DWORD *)(v49 + 312) = v58;
  BOOL v50 = *(void (**)(void))(v49 + 232);
  if (v50) {
    v50(*(void *)(v47 + 320 * v48 + 288));
  }
  dropThreadId(v65, 0, v60);
  uint64_t v19 = v23;
LABEL_38:
  uint64_t result = v19;
  if (!v69)
  {
    uint64_t result = 0;
    *(_DWORD *)(a2 + 1464) = 22;
  }
  return result;
}

uint64_t data_map32_get_data(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  if (_data_map32_rdlock(a1))
  {
LABEL_2:
    if (a3) {
      *a3 = 0;
    }
    return 0;
  }
  char v44 = 0;
  makeThreadId();
  int v7 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v8 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_13821, a1, 0, v7);
  unsigned int v42 = HIDWORD(v8);
  unsigned int v43 = v8;
  unsigned int v40 = v10;
  unsigned int v41 = v9;
  uint64_t v11 = *(void *)&threadData[18 * v8 + 2];
  uint64_t v12 = v11 + 320 * HIDWORD(v8);
  int v13 = *(_DWORD *)(v12 + 312);
  unsigned int v14 = *(void (**)(void))(v12 + 224);
  if (v14) {
    v14(*(void *)(v11 + 320 * HIDWORD(v8) + 288));
  }
  if (_setjmp((int *)v12))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", (uint8_t *)&buf, 2u);
    }
    *(_DWORD *)(v12 + 312) = v13;
    CIOnThreadCleanUpReset(v40);
    dropThreadId(v43, 1, v7);
    CICleanUpReset(v43, v41);
    uint64_t v15 = 0;
    goto LABEL_31;
  }
  if (*(_DWORD *)(a1 + 1388) <= a2)
  {
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long buf = 0u;
    long long v63 = 0u;
    int v28 = *__error();
    uint64_t v29 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      int v35 = *(_DWORD *)(a1 + 1388);
      unint64_t v36 = fd_name(*(void *)(a1 + 1264), (char *)&buf, 0x100uLL);
      *(_DWORD *)__s = 136316418;
      *(void *)&__s[4] = "_data_map32_get_offset_entry";
      *(_WORD *)&__s[12] = 1024;
      *(_DWORD *)&__s[14] = 424;
      *(_WORD *)&__s[18] = 1024;
      *(_DWORD *)&__s[20] = a2;
      *(_WORD *)&__s[24] = 1024;
      *(_DWORD *)&__s[26] = v35;
      *(_WORD *)&__s[30] = 2048;
      *(void *)&__s[32] = a1;
      *(_WORD *)&__s[40] = 2080;
      *(void *)&__s[42] = v36;
      _os_log_error_impl(&dword_1BD672000, v29, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %d max %d %p %s", (uint8_t *)__s, 0x32u);
    }
    *__error() = v28;
  }
  else
  {
    uint64_t v16 = *(void *)(a1 + 1344);
    if (v16)
    {
      uint64_t v17 = *(unsigned int *)(v16 + 4 * a2);
      if (v17 != 1)
      {
        uint64_t v45 = 0;
        uint64_t v46 = 0;
        char v47 = 0;
        unsigned int v18 = *(_DWORD *)(a1 + 1320);
        if (v18 <= v17)
        {
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          long long v66 = 0u;
          long long v67 = 0u;
          long long v64 = 0u;
          long long v65 = 0u;
          long long buf = 0u;
          long long v63 = 0u;
          int v21 = *__error();
          uint64_t v22 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            uint64_t v37 = *(unsigned int *)(a1 + 1320);
            uint32_t v38 = fd_name(*(void *)(a1 + 1264), (char *)&buf, 0x100uLL);
            *(_DWORD *)__s = 136316418;
            *(void *)&__s[4] = "_data_map32_get_data_entry";
            *(_WORD *)&__s[12] = 1024;
            *(_DWORD *)&__s[14] = 448;
            *(_WORD *)&__s[18] = 2048;
            *(void *)&__s[20] = v17;
            *(_WORD *)&__s[28] = 2048;
            *(void *)&__s[30] = v37;
            *(_WORD *)&__s[38] = 2048;
            *(void *)&__s[40] = a1;
            *(_WORD *)&__s[48] = 2080;
            *(void *)&__s[50] = v38;
            uint64_t v25 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
            uint64_t v26 = __s;
            uint32_t v27 = 58;
            goto LABEL_40;
          }
        }
        else
        {
          data_entry_restore_32(*(void *)(a1 + 1312), v17, v18, (uint64_t)&v45, &v47);
          if (!v47)
          {
            if (a3) {
              *a3 = (v45 - *(_DWORD *)(a1 + 1244));
            }
            if (*(void *)(a1 + 1448))
            {
              os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1444));
              int v39 = *(void **)(a1 + 1448);
              if (v39) {
                bit_vector_set_10635(v39, a2);
              }
              os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1444));
            }
            uint64_t v31 = v46 + *(unsigned int *)(a1 + 1244);
            goto LABEL_27;
          }
          uint64_t v87 = 0;
          long long v85 = 0u;
          long long v86 = 0u;
          long long v83 = 0u;
          long long v84 = 0u;
          long long v81 = 0u;
          long long v82 = 0u;
          long long v79 = 0u;
          long long v80 = 0u;
          memset(__s, 0, sizeof(__s));
          for (uint64_t i = 0; i != 5; ++i)
          {
            if (v17 + i >= (unint64_t)*(unsigned int *)(a1 + 1320)) {
              break;
            }
            size_t v20 = strlen(__s);
            sprintf(&__s[v20], "%d ", *(unsigned __int8 *)(*(void *)(a1 + 1312) + v17 + i));
          }
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          long long v66 = 0u;
          long long v67 = 0u;
          long long v64 = 0u;
          long long v65 = 0u;
          long long buf = 0u;
          long long v63 = 0u;
          int v21 = *__error();
          uint64_t v22 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            uint64_t v23 = fd_name(*(void *)(a1 + 1264), (char *)&buf, 0x100uLL);
            uint64_t v24 = *(unsigned int *)(a1 + 1320);
            int v48 = 136316674;
            uint64_t v49 = "_data_map32_get_data_entry";
            __int16 v50 = 1024;
            int v51 = 444;
            __int16 v52 = 2080;
            os_log_t v53 = v23;
            __int16 v54 = 2048;
            uint64_t v55 = v17;
            __int16 v56 = 2048;
            uint64_t v57 = v24;
            __int16 v58 = 2048;
            uint64_t v59 = v45;
            __int16 v60 = 2080;
            uint64_t v61 = __s;
            uint64_t v25 = "%s:%d: data_entry_restore_32 failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
            uint64_t v26 = (char *)&v48;
            uint32_t v27 = 68;
LABEL_40:
            _os_log_error_impl(&dword_1BD672000, v22, OS_LOG_TYPE_ERROR, v25, (uint8_t *)v26, v27);
          }
        }
        *__error() = v21;
        uint64_t v31 = 0;
LABEL_27:
        uint64_t v30 = v31;
        goto LABEL_28;
      }
    }
  }
  uint64_t v30 = 0;
LABEL_28:
  char v44 = 1;
  uint64_t v32 = *(void *)&threadData[18 * v43 + 2];
  uint64_t v33 = v32 + 320 * v42;
  *(_DWORD *)(v33 + 312) = v13;
  uint64_t v34 = *(void (**)(void))(v33 + 232);
  if (v34) {
    v34(*(void *)(v32 + 320 * v42 + 288));
  }
  dropThreadId(v43, 0, v7);
  uint64_t v15 = v30;
LABEL_31:
  if (!v44) {
    *(_DWORD *)(a1 + 1464) = 22;
  }
  _data_map32_unlock(a1);
  uint64_t result = v15;
  if (!v15) {
    goto LABEL_2;
  }
  return result;
}

unint64_t setThreadIdAndInfo(int a1, long long *a2, uint64_t a3, int a4, int a5)
{
  unsigned int v10 = (char *)pthread_getspecific(__THREAD_SLOT_KEY);
  if (!v10)
  {
    uint64_t v32 = __si_assert_copy_extra_329();
    uint64_t v33 = v32;
    if (v32) {
      uint64_t v34 = v32;
    }
    else {
      uint64_t v34 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "ContentIndexExceptionHandler.c", 1347, v34);
    free(v33);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  uint64_t v11 = v10 - 1;
  ++*((_DWORD *)&threadList + 4 * (void)(v10 - 1) + 3);
  uint64_t v12 = (char *)&threadData[18 * (void)(v10 - 1)];
  uint64_t v14 = *((void *)v12 + 1);
  int v13 = (void **)(v12 + 8);
  if (!v14)
  {
    threadData[18 * (void)v11 + 5] = 16;
    *int v13 = malloc_type_malloc(0x1400uLL, 0x10800406452CBC3uLL);
  }
  pthread_t v15 = pthread_self();
  uint64_t v16 = (char *)&threadData[18 * (void)v11];
  uint64_t v19 = *((int *)v16 + 4);
  uint64_t v17 = v16 + 16;
  uint64_t v18 = v19;
  *((void *)v17 + 3) = v15;
  if (v19 >= *((_DWORD *)v17 + 1))
  {
    int v28 = __si_assert_copy_extra_329();
    uint64_t v29 = v28;
    uint64_t v30 = "";
    if (v28) {
      uint64_t v30 = v28;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "ContentIndexExceptionHandler.c", 1356, "td->itemCount < td->itemSize", v30);
    free(v29);
    if (__valid_fs(-1)) {
      uint64_t v31 = 2989;
    }
    else {
      uint64_t v31 = 3072;
    }
    *(_DWORD *)uint64_t v31 = -559038737;
    abort();
  }
  uint64_t v20 = 5 * v18;
  uint64_t v21 = (uint64_t)*v13 + 64 * v20;
  *(_DWORD *)(v21 + 296) = a1;
  *(void *)(v21 + 288) = a3;
  long long v22 = *a2;
  long long v23 = a2[1];
  long long v24 = a2[3];
  *(_OWORD *)(v21 + 256) = a2[2];
  *(_OWORD *)(v21 + 272) = v24;
  *(_OWORD *)(v21 + 224) = v22;
  *(_OWORD *)(v21 + 240) = v23;
  uint64_t v25 = (char *)*v13 + 64 * v20;
  v25[53] = a4 & 0x7FFFFFFF;
  uint64_t v26 = (char *)&threadData[18 * (void)v11];
  v25[75] = *((_DWORD *)v26 + 8);
  v25[76] = *((_DWORD *)v26 + 14);
  v25[77] = a5;
  LODWORD(v25) = (*(_DWORD *)v17)++;
  return v11 | ((unint64_t)v25 << 32);
}

uint64_t dropThreadId(uint64_t result, int a2, int a3)
{
  uint64_t v3 = result;
  float v4 = &threadData[18 * result];
  unsigned int v7 = v4[4];
  int v6 = v4 + 4;
  uint64_t v5 = v7;
  if (!v7)
  {
    long long v23 = __si_assert_copy_extra_329();
    uint64_t v17 = v23;
    long long v24 = "";
    if (v23) {
      long long v24 = v23;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "ContentIndexExceptionHandler.c", 1469, "td->itemCount", v24);
    goto LABEL_12;
  }
  if (!a2)
  {
    unsigned int v20 = v5 - 1;
    *int v6 = v20;
    --*((_DWORD *)&threadList + 4 * result + 3);
    if (*(_DWORD *)(*(void *)&threadData[18 * result + 2] + 320 * v20 + 308) == a3) {
      return result;
    }
    uint64_t v21 = __si_assert_copy_extra_329();
    uint64_t v17 = v21;
    long long v22 = "";
    if (v21) {
      long long v22 = v21;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "ContentIndexExceptionHandler.c", 1491, "seqNum == td->items[td->itemCount].seqNum", v22);
LABEL_12:
    free(v17);
    if (__valid_fs(-1)) {
      uint64_t v19 = 2989;
    }
    else {
      uint64_t v19 = 3072;
    }
    *(_DWORD *)uint64_t v19 = -559038737;
    abort();
  }
  int v9 = 0;
  unsigned int v10 = &threadData[18 * result + 2];
  int v11 = v5 & ~((int)v5 >> 31);
  uint64_t v12 = 320 * v5;
  while (1)
  {
    if (v11 == v9) {
      goto LABEL_19;
    }
    uint64_t v13 = *v10 + v12;
    uint64_t v14 = *(uint64_t (**)(void))(v13 - 72);
    if (v14)
    {
      uint64_t result = v14(*(void *)(v13 - 32));
      *(void *)(v13 - 72) = 0;
    }
    if ((*(_DWORD *)(v13 - 108) & 0x80000001) != 0) {
      break;
    }
    int v15 = *(_DWORD *)(*v10 + v12 - 12);
    v12 -= 320;
    ++v9;
    if (v15 < a3)
    {
      uint64_t v16 = __si_assert_copy_extra_329();
      uint64_t v17 = v16;
      uint64_t v18 = "";
      if (v16) {
        uint64_t v18 = v16;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "ContentIndexExceptionHandler.c", 1484, "seqNum <= td->items[j].seqNum", v18);
      goto LABEL_12;
    }
  }
  int v11 = v9 + 1;
LABEL_19:
  *v6 -= v11;
  *((_DWORD *)&threadList + 4 * v3 + 3) -= v11;
  return result;
}

void *makeThreadId()
{
  kern_return_t exception_ports;
  char *v8;
  char *v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  mach_error_t v13;
  uint64_t v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  thread_act_t v18;
  uint64_t v19;

  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (makeThreadId_once[0] != -1) {
    dispatch_once(makeThreadId_once, &__block_literal_global_5756);
  }
  v0 = &unk_1EC02F000;
  uint64_t result = pthread_getspecific(__THREAD_SLOT_KEY);
  if (!result)
  {
    int v2 = (char *)OSAtomicDequeue(&sAvailabeThreadEntries, 0);
    if (v2)
    {
      uint64_t v3 = v2;
      if (*((_DWORD *)v2 + 3) != -1)
      {
        int v9 = __si_assert_copy_extra_329();
        __message_assert("%s:%u: failed assertion '%s' %s invalid count %d");
        goto LABEL_22;
      }
      uint64_t v4 = (v2 - (char *)&threadList) >> 4;
      thread_act_t v5 = MEMORY[0x1C1881CE0]();
      if (gSILogLevels[0] >= 5)
      {
        unsigned int v10 = *__error();
        int v11 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109376;
          uint64_t v16 = (unint64_t)(v3 - (char *)&threadList) >> 4;
          uint64_t v17 = 1024;
          uint64_t v18 = v5;
          _os_log_impl(&dword_1BD672000, v11, OS_LOG_TYPE_DEFAULT, "Adding handler slot:%u port:%d", buf, 0xEu);
        }
        *__error() = v10;
        v0 = (void *)&unk_1EC02F000;
        uint64_t v4 = (v3 - (char *)&threadList) >> 4;
      }
      *((_DWORD *)v3 + 2) = v5;
      *((_DWORD *)v3 + 3) = 0;
      if (!pthread_setspecific(v0[12], (const void *)(v4 + 1)))
      {
        int v6 = (char *)malloc_type_malloc(0x404uLL, 0x100004084B5CCE0uLL);
        *(void *)&threadData[18 * v4] = v6;
        bzero(v6 + 4, 0x400uLL);
        *(_DWORD *)int v6 = 64;
        exception_ports = thread_get_exception_ports(v5, 0x22u, (exception_mask_array_t)v6 + 1, (mach_msg_type_number_t *)v6, (exception_handler_array_t)v6 + 65, (exception_behavior_array_t)v6 + 129, (exception_flavor_array_t)v6 + 193);
        if (!exception_ports)
        {
          exception_ports = thread_set_exception_ports(v5, 0x22u, _exceptionPort, -2147483644, 7);
          if (!exception_ports) {
            return (void *)mach_port_deallocate(*MEMORY[0x1E4F14960], v5);
          }
        }
        uint64_t v13 = exception_ports;
        int v9 = __si_assert_copy_extra_329();
        mach_error_string(v13);
        __message_assert("%s:%u: failed assertion '%s' %s %s");
LABEL_22:
        free(v9);
        if (__valid_fs(-1)) {
          uint64_t v14 = 2989;
        }
        else {
          uint64_t v14 = 3072;
        }
        *(_DWORD *)uint64_t v14 = -559038737;
        abort();
      }
      unint64_t v8 = __si_assert_copy_extra_329();
      __message_assert("%s:%u: failed assertion '%s' %s ");
    }
    else
    {
      unint64_t v8 = __si_assert_copy_extra_329();
      __message_assert("%s:%u: failed assertion '%s' %s Active handlers > MAX_CI_THREAD_COUNT");
    }
    free(v8);
    if (__valid_fs(-1)) {
      uint64_t v12 = 2989;
    }
    else {
      uint64_t v12 = 3072;
    }
    *(_DWORD *)uint64_t v12 = -559038737;
    abort();
  }
  return result;
}

uint64_t _data_map32_unlock(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 1461)) {
    return 0;
  }
  uint64_t v1 = db_rwlock_unlock_unknown(a1);
  if (v1)
  {
    int v3 = *__error();
    uint64_t v4 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = v1;
      if (v1 == -1) {
        int v5 = *__error();
      }
      int v6 = 136315650;
      unsigned int v7 = "_data_map32_unlock";
      __int16 v8 = 1024;
      int v9 = 312;
      __int16 v10 = 1024;
      int v11 = v5;
      _os_log_error_impl(&dword_1BD672000, v4, OS_LOG_TYPE_ERROR, "%s:%d: _data_map32_unlock error %d", (uint8_t *)&v6, 0x18u);
    }
    *__error() = v3;
  }
  return v1;
}

uint64_t _data_map32_rdlock(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 1461)) {
    return 0;
  }
  uint64_t lock = db_read_lock(a1);
  if (lock)
  {
    int v3 = *__error();
    uint64_t v4 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = lock;
      if (lock == -1) {
        int v5 = *__error();
      }
      int v6 = 136315650;
      unsigned int v7 = "_data_map32_rdlock";
      __int16 v8 = 1024;
      int v9 = 302;
      __int16 v10 = 1024;
      int v11 = v5;
      _os_log_error_impl(&dword_1BD672000, v4, OS_LOG_TYPE_ERROR, "%s:%d: _data_map32_rdlock error %d", (uint8_t *)&v6, 0x18u);
    }
    *__error() = v3;
  }
  return lock;
}

uint64_t db_query_tree_apply_block_with_meta(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    int v5 = a1;
    unint64_t v52 = 0;
    unint64_t v53 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v55 = 0;
    ptr = 0;
    uint64_t v57 = 0;
    uint64_t v54 = a2;
    while (1)
    {
      uint64_t v58 = v6;
      uint64_t v12 = (void *)*v5;
      uint64_t v13 = v5[1];
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
      if (a3) {
        break;
      }
      unint64_t v17 = v9;
      if (!v13)
      {
        unint64_t v17 = v9;
        goto LABEL_46;
      }
      if (v10 < v7)
      {
LABEL_15:
        uint64_t v18 = v57;
        goto LABEL_45;
      }
LABEL_35:
      if (v7) {
        v7 *= 2;
      }
      else {
        unint64_t v7 = 4;
      }
      if (v57)
      {
        uint64_t v18 = (char *)malloc_type_zone_realloc((malloc_zone_t *)queryZone, v57, 16 * v7, 0xECA6AA46uLL);
        if (!v18) {
          goto LABEL_42;
        }
      }
      else
      {
        uint64_t v18 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 16 * v7, 0x8DDAA030uLL);
        if (!v18)
        {
LABEL_42:
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)uint64_t v61 = 0;
            _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", v61, 2u);
          }
          uint64_t v18 = 0;
        }
      }
LABEL_45:
      uint64_t v57 = v18;
      uint64_t v21 = &v18[16 * v10];
      uint64_t v22 = v58;
      ++v10;
      *(void *)uint64_t v21 = v13;
      *((void *)v21 + 1) = v22;
LABEL_46:
      if (v12)
      {
        int v11 = &v58;
      }
      else
      {
        if (v8)
        {
          if (v55[v8 - 1] == v10)
          {
            long long v23 = (uint64_t *)&ptr[8 * v17 - 24];
            unint64_t v24 = v17;
            while (1)
            {
              unint64_t v17 = v24 - 2;
              if (v24 <= 2)
              {
LABEL_75:
                int v35 = __si_assert_copy_extra_329();
                __message_assert_333((uint64_t)v35, v36, v37, v38, v39, v40, v41, v42, (char)"core-query.c");
                free(v35);
                if (__valid_fs(-1)) {
                  uint64_t v43 = 2989;
                }
                else {
                  uint64_t v43 = 3072;
                }
                *(_DWORD *)uint64_t v43 = -559038737;
                abort();
              }
              uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, *v23, v23[1], v23[2]);
              *long long v23 = v14;
              unint64_t v25 = v8 - 1;
              if (v8 == 1) {
                break;
              }
              uint64_t v26 = v55[v8 - 2];
              v23 -= 2;
              --v8;
              v24 -= 2;
              if (v26 != v10) {
                goto LABEL_57;
              }
            }
            unint64_t v17 = v24 - 3;
            if (!v10) {
              goto LABEL_62;
            }
          }
          else
          {
            unint64_t v25 = v8;
LABEL_57:
            if (!v10)
            {
LABEL_62:
              unint64_t v8 = v25;
LABEL_63:
              if (v8)
              {
                uint64_t v29 = v55;
                uint64_t v30 = (uint64_t *)&ptr[8 * v17 - 24];
                do
                {
                  BOOL v31 = v17 > 2;
                  v17 -= 2;
                  if (!v31) {
                    goto LABEL_75;
                  }
                  --v8;
                  uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, *v30, v30[1], v30[2]);
                  *uint64_t v30 = v32;
                  v30 -= 2;
                }
                while (v8);
                uint64_t v14 = v32;
                --v17;
                uint64_t v33 = v57;
                if (!v55)
                {
LABEL_73:
                  free(v33);
                  free(ptr);
                  free(v29);
                  return v14;
                }
              }
              else
              {
                uint64_t v29 = v55;
                uint64_t v33 = v57;
                if (!v55) {
                  goto LABEL_73;
                }
              }
              if (v17 || v10)
              {
                char v44 = __si_assert_copy_extra_329();
                __message_assert_333((uint64_t)v44, v45, v46, v47, v48, v49, v50, v51, (char)"core-query.c");
                free(v44);
                if (__valid_fs(-1))
                {
                  MEMORY[0xBAD] = -559038737;
                  abort();
                }
                MEMORY[0xC00] = -559038737;
                abort();
              }
              goto LABEL_73;
            }
          }
        }
        else
        {
          unint64_t v25 = 0;
          if (!v10) {
            goto LABEL_62;
          }
        }
        --v10;
        uint32_t v27 = &v57[16 * v10];
        int v28 = *(void **)v27;
        int v11 = (uint64_t *)(v27 + 8);
        uint64_t v12 = v28;
        unint64_t v8 = v25;
      }
      uint64_t v6 = *v11;
      int v5 = v12;
      unint64_t v9 = v17;
      a2 = v54;
      if (!v12) {
        goto LABEL_63;
      }
    }
    if (v9 >= v53)
    {
      if (v53) {
        uint64_t v15 = 2 * v53;
      }
      else {
        uint64_t v15 = 4;
      }
      if (ptr)
      {
        uint64_t v16 = (char *)malloc_type_zone_realloc((malloc_zone_t *)queryZone, ptr, 8 * v15, 0xECA6AA46uLL);
        unint64_t v53 = v15;
        if (v16)
        {
LABEL_12:
          ptr = v16;
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v16 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 8 * v15, 0x8DDAA030uLL);
        unint64_t v53 = v15;
        if (v16) {
          goto LABEL_12;
        }
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
      }
      ptr = 0;
    }
LABEL_21:
    unint64_t v17 = v9 + 1;
    *(void *)&ptr[8 * v9] = v14;
    if (!v13) {
      goto LABEL_46;
    }
    uint64_t v19 = v52;
    if (v8 < v52)
    {
      unsigned int v20 = v55;
      goto LABEL_34;
    }
    if (v52) {
      uint64_t v19 = 2 * v52;
    }
    else {
      uint64_t v19 = 4;
    }
    if (v55)
    {
      unsigned int v20 = malloc_type_zone_realloc((malloc_zone_t *)queryZone, v55, 8 * v19, 0xECA6AA46uLL);
      if (v20) {
        goto LABEL_34;
      }
    }
    else
    {
      unsigned int v20 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 8 * v19, 0x8DDAA030uLL);
      if (v20) {
        goto LABEL_34;
      }
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)__int16 v60 = 0;
      _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", v60, 2u);
    }
    unsigned int v20 = 0;
LABEL_34:
    unint64_t v52 = v19;
    uint64_t v55 = v20;
    v20[v8++] = v10;
    if (v10 < v7) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
  return 0;
}

uint64_t __db_query_tree_apply_block_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t db_rwlock_unlock_unknown(uint64_t a1)
{
  uint64_t v2 = pthread_mutex_lock((pthread_mutex_t *)a1);
  int v3 = *(_opaque_pthread_t **)(a1 + 184);
  if (v3 == pthread_self()
    || *(void *)(a1 + 184)
    && exc_pthread_key
    && ((uint64_t v4 = pthread_getspecific(exc_pthread_key), v4 == (void *)-1) || v4 == *(void **)(a1 + 184)))
  {
    *(_DWORD *)(a1 + 204) = 0;
    uint64_t v6 = *(pthread_override_s **)(a1 + 176);
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
    char v7 = *(_DWORD *)(a1 + 196) != 0;
    *(unsigned char *)(a1 + 212) = 0;
    db_rwlock_wakeup(a1, v7, 0);
    pthread_mutex_unlock((pthread_mutex_t *)a1);
    if (v6) {
      pthread_override_qos_class_end_np(v6);
    }
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 196) - 1;
    *(_DWORD *)(a1 + 196) = v5;
    if (!v5) {
      db_rwlock_wakeup(a1, 0, 0);
    }
    pthread_mutex_unlock((pthread_mutex_t *)a1);
  }
  return v2;
}

uint64_t db_rwlock_wakeup(uint64_t result, char a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = 6;
  while (1)
  {
    unint64_t v7 = v6 - 1;
    if ((uint64_t)(v6 - 1) <= *(int *)(v5 + 192))
    {
      uint64_t result = *(void *)(v5 + 160);
      if (result)
      {
        if ((a2 & 1) == 0)
        {
          *(unsigned char *)(result + 52) = 1;
          *(void *)(v5 + 160) = 0;
          *(_DWORD *)(v5 + 192) = 0;
          *(unsigned char *)(v5 + 212) = 0;
          return pthread_cond_signal((pthread_cond_t *)result);
        }
        return result;
      }
    }
    BOOL v8 = (a2 & 1) != 0 || *(unsigned char *)(v5 + 212) != 0;
    long long v26 = 0uLL;
    unint64_t v9 = v5 + 16 * v7;
    uint64_t v12 = *(void *)(v9 + 64);
    int v11 = (uint64_t *)(v9 + 64);
    uint64_t v10 = v12;
    if (v12) {
      break;
    }
LABEL_38:
    if (v6-- <= 1) {
      return result;
    }
  }
  uint64_t v13 = (void *)(v5 + 16 * v7 + 72);
  while (1)
  {
    unsigned int v14 = *(_DWORD *)(v10 + 48);
    if (v14 < 3) {
      break;
    }
    if (v14 != 3)
    {
      if (v14 == 5 && ((a3 & 1) != 0 || *(_DWORD *)(v5 + 200))) {
        goto LABEL_21;
      }
      uint64_t result = pthread_cond_signal((pthread_cond_t *)v10);
      uint64_t v15 = *v11;
      if (*v11 != *v13)
      {
        *int v11 = *(void *)(v15 + 64);
        goto LABEL_26;
      }
      *int v11 = 0;
      v11[1] = 0;
      if (v15)
      {
LABEL_26:
        *(unsigned char *)(v15 + 52) = 1;
        --*(_DWORD *)(v5 + 208);
      }
      ++*(_DWORD *)(v5 + 196);
      if (*(_DWORD *)(v10 + 48) == 5) {
        ++*(_DWORD *)(v5 + 200);
      }
      goto LABEL_34;
    }
    if (*(void *)(v5 + 184))
    {
      if (!*(void *)(v10 + 56))
      {
        uint64_t v22 = __si_assert_copy_extra_329();
        long long v23 = v22;
        unint64_t v24 = "";
        if (v22) {
          unint64_t v24 = v22;
        }
        __message_assert(v22, "sdb2_rwlock.c", 470, "waiter->threadid", v24);
        free(v23);
        if (__valid_fs(-1)) {
          uint64_t v25 = 2989;
        }
        else {
          uint64_t v25 = 3072;
        }
        *(_DWORD *)uint64_t v25 = -559038737;
        abort();
      }
      goto LABEL_21;
    }
    uint64_t result = pthread_cond_signal((pthread_cond_t *)v10);
    uint64_t v17 = *v11;
    if (*v11 != *v13)
    {
      *int v11 = *(void *)(v17 + 64);
LABEL_32:
      *(unsigned char *)(v17 + 52) = 1;
      --*(_DWORD *)(v5 + 208);
      goto LABEL_33;
    }
    *int v11 = 0;
    v11[1] = 0;
    if (v17) {
      goto LABEL_32;
    }
LABEL_33:
    *(void *)(v5 + 184) = *(void *)(v10 + 56);
    a3 = 1;
    *(unsigned char *)(v5 + 212) = 1;
LABEL_34:
    BOOL v8 = 1;
    a2 = 1;
LABEL_35:
    uint64_t v10 = *v11;
    if (!*v11)
    {
      if ((void)v26) {
        *(_OWORD *)int v11 = v26;
      }
      goto LABEL_38;
    }
  }
  if (*(_DWORD *)(v5 + 200) || *(unsigned char *)(v5 + 212))
  {
LABEL_21:
    if (v10 == *v13)
    {
      uint64_t v16 = 0;
      *uint64_t v13 = 0;
    }
    else
    {
      uint64_t v16 = *(void *)(v10 + 64);
    }
    *int v11 = v16;
    uint64_t result = (uint64_t)db_rwlock_waiter_list_enqueue_inner(&v26, v10);
    goto LABEL_35;
  }
  if (!v8)
  {
    pthread_cond_signal((pthread_cond_t *)v10);
    uint64_t v19 = *v11;
    if (*v11 != *v13)
    {
      unsigned int v20 = *(void **)(v19 + 64);
      *int v11 = (uint64_t)v20;
      goto LABEL_44;
    }
    unsigned int v20 = 0;
    uint64_t result = 0;
    *int v11 = 0;
    v11[1] = 0;
    if (v19)
    {
LABEL_44:
      *(unsigned char *)(v19 + 52) = 1;
      --*(_DWORD *)(v5 + 208);
      uint64_t result = (uint64_t)v20;
    }
    *(void *)(v5 + 184) = *(void *)(v10 + 56);
    uint64_t v10 = result;
  }
  if ((void)v26)
  {
    if (v10)
    {
      uint64_t v21 = v11[1];
      *(_OWORD *)int v11 = v26;
      *(void *)(v11[1] + 64) = v10;
      v11[1] = v21;
    }
    else
    {
      *(_OWORD *)int v11 = v26;
    }
  }
  return result;
}

uint64_t db_read_lock(uint64_t a1)
{
  uint64_t v2 = pthread_mutex_lock((pthread_mutex_t *)a1);
  HIDWORD(v4) = qos_class_self() - 9;
  LODWORD(v4) = HIDWORD(v4);
  unsigned int v3 = v4 >> 2;
  if (v3 > 6) {
    unsigned int v5 = 0;
  }
  else {
    unsigned int v5 = dword_1BDA87810[v3];
  }
  unint64_t v6 = *(_opaque_pthread_t **)(a1 + 184);
  if (v6 == pthread_self())
  {
    BOOL v8 = __si_assert_copy_extra_329();
    unint64_t v9 = v8;
    uint64_t v10 = "";
    if (v8) {
      uint64_t v10 = v8;
    }
    __message_assert(v8, "sdb2_rwlock.c", 580, "lock->writer != pthread_self()", v10);
    free(v9);
    if (__valid_fs(-1)) {
      uint64_t v11 = 2989;
    }
    else {
      uint64_t v11 = 3072;
    }
    *(_DWORD *)uint64_t v11 = -559038737;
    abort();
  }
  if (db_rwlock_reader_excluded(a1, v5, 0)) {
    db_rwlock_wait(a1, v5, 4);
  }
  else {
    ++*(_DWORD *)(a1 + 196);
  }
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v2;
}

BOOL db_rwlock_reader_excluded(uint64_t a1, int a2, char a3)
{
  if (*(void *)(a1 + 184) && ((a3 & 1) != 0 || !*(unsigned char *)(a1 + 212))
    || *(void *)(a1 + 160) && *(_DWORD *)(a1 + 192) >= a2 && (a3 & 1) == 0 && !*(_DWORD *)(a1 + 200))
  {
    return 1;
  }
  if (!*(_DWORD *)(a1 + 196) && !*(unsigned char *)(a1 + 212)) {
    return 0;
  }
  uint64_t v3 = a2 <= 5 ? 5 : a2;
  unint64_t v4 = (uint64_t *)(a1 + 16 * a2 + 80);
  uint64_t v5 = v3 - a2 + 1;
  while (--v5)
  {
    uint64_t v6 = *v4;
    v4 += 2;
    if (v6) {
      return 1;
    }
  }
  return *(void *)(a1 + 16 * a2 + 64) && !*(_DWORD *)(a1 + 200);
}

uint64_t oqpop(uint64_t a1, unsigned char *a2)
{
  *a2 = *(unsigned char *)a1;
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  if (*(unsigned char *)a1)
  {
    if (v2 < v3)
    {
      uint64_t v4 = *(void *)(a1 + 16);
      *(void *)(a1 + 40) = v2 + 1;
      return *(void *)(v4 + 16 * v2);
    }
  }
  else if (v2 < v3)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 40) = v2 + 1;
    return *(void *)(v6 + 8 * v2);
  }
  return 0;
}

uint64_t __free_tree_block_invoke(int a1, void *a2)
{
  uint64_t v3 = (void *)*((void *)a2 + 3);
  if (v3)
  {
    uint64_t v4 = (char *)*((void *)a2 + 5);
    if (*v4 >= 1)
    {
      uint64_t v5 = 0;
      do
      {
        uint64_t v7 = v5++;
        uint64_t v6 = *((void *)a2 + 3);
        if (v4[v5] >= 1 && *(void *)(v6 + 8 * v7))
        {
          uint64_t v8 = 0;
          do
          {
            uint64_t v9 = *(void *)(*((void *)a2 + 3) + 8 * v7);
            if (v9)
            {
              uint64_t v10 = *(void *)(v9 + 8 * v8);
              if (v10)
              {
                if (atomic_fetch_add((atomic_uint *volatile)(v10 + 32), 0xFFFFFFFF) == 1)
                {
                  free(*(void **)v10);
                  free((void *)v10);
                }
                *(void *)(*(void *)(*((void *)a2 + 3) + 8 * v7) + 8 * v8) = 0;
                uint64_t v4 = (char *)*((void *)a2 + 5);
              }
            }
            ++v8;
          }
          while (v8 < v4[v5]);
          uint64_t v6 = *((void *)a2 + 3);
        }
        free(*(void **)(v6 + 8 * v7));
        *(void *)(*((void *)a2 + 3) + 8 * v7) = 0;
        uint64_t v4 = (char *)*((void *)a2 + 5);
      }
      while (v5 < *v4);
      uint64_t v3 = (void *)*((void *)a2 + 3);
    }
    free(v3);
    free(*((void **)a2 + 5));
    *((void *)a2 + 3) = 0;
    *((void *)a2 + 5) = 0;
  }
  uint64_t v11 = *((void *)a2 + 2);
  if (v11) {
    free_qp(v11);
  }
  free(a2);
  return 0;
}

void *__db_clone_query_node_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*MEMORY[0x1E4F14B00] <= 0x4FuLL) {
    ++sTotal_12395;
  }
  uint64_t v3 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x50uLL, 0x31F9A007uLL);
  if (!v3)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      v9[0] = 0;
      _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)v9, 2u);
    }
    return 0;
  }
  uint64_t v4 = v3;
  if (*v3) {
    void *v3 = -1;
  }
  if (v3[1]) {
    v3[1] = -1;
  }
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t piece = clone_query_piece(v5);
    v4[2] = piece;
    if (!piece)
    {
      free(v4);
      return 0;
    }
  }
  *((_WORD *)v4 + 24) = *(_WORD *)(a2 + 48);
  *((_DWORD *)v4 + 13) = *(_DWORD *)(a2 + 52);
  __int16 v7 = v4[7] & 0xFE00 | *(unsigned __int8 *)(a2 + 56);
  *((_WORD *)v4 + 28) = v7;
  *((_WORD *)v4 + 28) = v7 & 0xF9FF | *(_WORD *)(a2 + 56) & 0x200;
  v4[8] = 0;
  *((_DWORD *)v4 + 18) = *(_DWORD *)(a2 + 72);
  return v4;
}

uint64_t unpackPosting(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = 0;
  unint64_t v4 = 0;
  uint64_t v5 = *a2;
  do
  {
    uint64_t v6 = v5++;
    v4 |= (unint64_t)(*(unsigned char *)(a1 + v6) & 0x7F) << v3;
    if ((*(unsigned char *)(a1 + v6) & 0x80) == 0) {
      break;
    }
    BOOL v7 = v3 == 63;
    v3 += 7;
  }
  while (!v7);
  *a2 = v5;
  *(void *)(a3 + 4) = v4;
  if ((v4 & 1) == 0)
  {
    uint64_t v8 = v6 + 2;
    int v9 = *(char *)(a1 + v5);
    int v10 = *(unsigned __int8 *)(a1 + v5);
    if (v9 < 0)
    {
      uint64_t v11 = v6 + 3;
      int v13 = *(char *)(a1 + v8);
      int v14 = *(unsigned __int8 *)(a1 + v8);
      if (v13 < 0)
      {
        uint64_t v15 = v6 + 4;
        int v16 = *(char *)(a1 + v11);
        char v17 = v16;
        if (v16 < 0)
        {
          uint64_t v11 = v6 + 5;
          int v19 = *(char *)(a1 + v15);
          int v20 = *(unsigned __int8 *)(a1 + v15);
          if (v19 < 0)
          {
            int v22 = *(char *)(a1 + v11);
            if (v22 < 0) {
              goto LABEL_37;
            }
            int v23 = v22;
            uint64_t v11 = v6 + 6;
            int v21 = ((v20 & 0x7F) << 21) | (v23 << 28) | ((v17 & 0x7F) << 14);
          }
          else
          {
            int v21 = ((v17 & 0x7F) << 14) | (v20 << 21);
          }
          unsigned int v18 = v21 & 0xFFFFC000 | ((v14 & 0x7F) << 7) | v10 & 0x7F;
        }
        else
        {
          unsigned int v18 = ((v14 & 0x7F) << 7) | (v16 << 14) | v10 & 0x7F;
          uint64_t v11 = v15;
        }
        int v10 = v18;
      }
      else
      {
        int v10 = v10 & 0x7F | (v14 << 7);
      }
    }
    else
    {
      uint64_t v11 = v6 + 2;
    }
    *a2 = v11;
    *(_DWORD *)a3 = v10;
    *(void *)(a3 + 4) = v4 >> 1;
    if (v10) {
      return 0;
    }
    uint64_t v25 = v11 + 1;
    uint64_t v12 = *(unsigned __int8 *)(a1 + v11);
    if ((*(char *)(a1 + v11) & 0x80000000) == 0)
    {
      uint64_t v26 = v11 + 1;
      goto LABEL_35;
    }
    uint64_t v26 = v11 + 2;
    int v27 = *(char *)(a1 + v25);
    int v28 = *(unsigned __int8 *)(a1 + v25);
    if ((v27 & 0x80000000) == 0)
    {
      uint64_t v12 = v12 & 0x7F | (v28 << 7);
      goto LABEL_35;
    }
    uint64_t v29 = v11 + 3;
    int v30 = *(char *)(a1 + v26);
    char v31 = v30;
    if ((v30 & 0x80000000) == 0)
    {
      uint64_t v32 = ((v28 & 0x7F) << 7) | (v30 << 14) | (v12 & 0x7F);
      uint64_t v26 = v29;
LABEL_34:
      uint64_t v12 = v32;
LABEL_35:
      *a2 = v26;
      if (v12 == 2) {
        return v12;
      }
      goto LABEL_9;
    }
    uint64_t v26 = v11 + 4;
    int v33 = *(char *)(a1 + v29);
    int v34 = *(unsigned __int8 *)(a1 + v29);
    if ((v33 & 0x80000000) == 0)
    {
      int v35 = ((v31 & 0x7F) << 14) | (v34 << 21);
LABEL_33:
      uint64_t v32 = v35 & 0xFFFFC000 | ((v28 & 0x7F) << 7) | v12 & 0x7F;
      goto LABEL_34;
    }
    int v36 = *(char *)(a1 + v26);
    if ((v36 & 0x80000000) == 0)
    {
      int v37 = v36;
      uint64_t v26 = v11 + 5;
      int v35 = ((v34 & 0x7F) << 21) | (v37 << 28) | ((v31 & 0x7F) << 14);
      goto LABEL_33;
    }
LABEL_37:
    uint64_t v38 = __si_assert_copy_extra(0);
    uint64_t v39 = v38;
    uint64_t v40 = "";
    if (v38) {
      uint64_t v40 = v38;
    }
    __message_assert("%s:%u: failed assertion '%s' %s readVInt32: exceeds max size for uint32_t", "VIntUtils.h", 341, "(b4 & 0x80) == 0", v40);
    free(v39);
    if (__valid_fs(-1)) {
      uint64_t v41 = 2989;
    }
    else {
      uint64_t v41 = 3072;
    }
    *(_DWORD *)uint64_t v41 = -559038737;
    abort();
  }
  uint64_t v12 = 0;
  *(void *)(a3 + 4) = v4 >> 1;
LABEL_9:
  *(_DWORD *)a3 = 1;
  return v12;
}

void qp_string_id_cache_free(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (const void *)a1[1];
    if (v2) {
      CFRelease(v2);
    }
    uint64_t v3 = (const void *)a1[2];
    if (v3) {
      CFRelease(v3);
    }
    unint64_t v4 = (const void *)a1[4];
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = (const void *)a1[5];
    if (v5) {
      CFRelease(v5);
    }
    uint64_t v6 = (const void *)a1[7];
    if (v6) {
      CFRelease(v6);
    }
    BOOL v7 = (const void *)a1[8];
    if (v7) {
      CFRelease(v7);
    }
    uint64_t v8 = (const void *)a1[10];
    if (v8) {
      CFRelease(v8);
    }
    int v9 = (const void *)a1[11];
    if (v9) {
      CFRelease(v9);
    }
    int v10 = (const void *)a1[13];
    if (v10) {
      CFRelease(v10);
    }
    uint64_t v11 = (const void *)a1[14];
    if (v11) {
      CFRelease(v11);
    }
    uint64_t v12 = (const void *)a1[16];
    if (v12) {
      CFRelease(v12);
    }
    int v13 = (const void *)a1[17];
    if (v13) {
      CFRelease(v13);
    }
    int v14 = (const void *)a1[19];
    if (v14) {
      CFRelease(v14);
    }
    uint64_t v15 = (const void *)a1[20];
    if (v15) {
      CFRelease(v15);
    }
    int v16 = (const void *)a1[22];
    if (v16) {
      CFRelease(v16);
    }
    char v17 = (const void *)a1[23];
    if (v17) {
      CFRelease(v17);
    }
    unsigned int v18 = (const void *)a1[25];
    if (v18) {
      CFRelease(v18);
    }
    int v19 = (const void *)a1[26];
    if (v19) {
      CFRelease(v19);
    }
    int v20 = (const void *)a1[28];
    if (v20) {
      CFRelease(v20);
    }
    int v21 = (const void *)a1[29];
    if (v21) {
      CFRelease(v21);
    }
    int v22 = (const void *)a1[31];
    if (v22) {
      CFRelease(v22);
    }
    int v23 = (const void *)a1[32];
    if (v23) {
      CFRelease(v23);
    }
    unint64_t v24 = (const void *)a1[34];
    if (v24) {
      CFRelease(v24);
    }
    uint64_t v25 = (const void *)a1[35];
    if (v25) {
      CFRelease(v25);
    }
    uint64_t v26 = (const void *)a1[37];
    if (v26) {
      CFRelease(v26);
    }
    int v27 = (const void *)a1[38];
    if (v27) {
      CFRelease(v27);
    }
    int v28 = (const void *)a1[40];
    if (v28) {
      CFRelease(v28);
    }
    uint64_t v29 = (const void *)a1[41];
    if (v29) {
      CFRelease(v29);
    }
    int v30 = (const void *)a1[43];
    if (v30) {
      CFRelease(v30);
    }
    char v31 = (const void *)a1[44];
    if (v31) {
      CFRelease(v31);
    }
    uint64_t v32 = (const void *)a1[46];
    if (v32) {
      CFRelease(v32);
    }
    int v33 = (const void *)a1[47];
    if (v33) {
      CFRelease(v33);
    }
    free(a1);
  }
}

uint64_t __decorateExpandingFunctions_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4) {
    int v5 = *(_DWORD *)(v4 + 176);
  }
  else {
    int v5 = 0;
  }
  if (*(_WORD *)(a2 + 48) != 4) {
    goto LABEL_64;
  }
  uint64_t v6 = *(void *)(a2 + 16);
  if (!v6) {
    goto LABEL_64;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  CFAbsoluteTime v8 = *(double *)(a1 + 40);
  int v9 = *(const char **)(v6 + 72);
  if (v9)
  {
    int v10 = *(char **)v6;
    if (!strcmp(*(const char **)v6, "kMDItemFSName") && !strcmp(v9, "*"))
    {
      free(v10);
      uint64_t v11 = strdup("kMDItemFSFileId");
      uint64_t v6 = *(void *)(a2 + 16);
      *(void *)uint64_t v6 = v11;
    }
  }
  uint64_t v12 = *(void *)(v6 + 32);
  if ((v12 & 0x400) != 0
    || (int v13 = *(const char **)v6) != 0
    && (!strcmp(*(const char **)v6, "kMDItemTextContent") || !strncmp(v13, "_kMDItemOCRContent", 0x12uLL)))
  {
    *(void *)(v6 + 32) = v12 | 0x480;
    *(void *)(v6 + 8) = _qpContentIndexMatch;
    int v16 = *(const char **)(v6 + 72);
    if (!v16)
    {
      int v20 = 0;
      goto LABEL_32;
    }
  }
  else
  {
    unsigned int v14 = *(_DWORD *)(v6 + 24);
    if (v14 > 6 || ((1 << v14) & 0x66) == 0)
    {
      int v20 = 100;
      goto LABEL_33;
    }
    int v16 = *(const char **)(v6 + 72);
    if (!v16)
    {
      *(_DWORD *)(v6 + 48) = 100;
      goto LABEL_42;
    }
  }
  int v17 = strlen(v16);
  int v18 = *(unsigned __int8 *)v16;
  if (v17 < 1)
  {
    if (v18 == 42) {
      goto LABEL_27;
    }
LABEL_31:
    int v20 = -v17;
    goto LABEL_32;
  }
  int v19 = v16[v17 - 1];
  if (v18 != 42)
  {
    if (v19 == 42)
    {
      int v21 = 50;
      goto LABEL_30;
    }
    goto LABEL_31;
  }
  if (v19 != 42)
  {
LABEL_27:
    int v21 = 99;
LABEL_30:
    int v20 = v21 - v17;
    goto LABEL_32;
  }
  int v20 = 99;
LABEL_32:
  unsigned int v14 = *(_DWORD *)(v6 + 24);
LABEL_33:
  *(_DWORD *)(v6 + 48) = v20;
  if (v14 == 11 && *(void *)(v6 + 168))
  {
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    if (*(int *)(v6 + 40) >= 1)
    {
      uint64_t v22 = 0;
      do
      {
        uint64_t v23 = *(void *)(*(void *)(v6 + 168) + 8 * v22);
        if (v23 && *(unsigned char *)v23 == 36)
        {
          unsigned int v24 = _expandFunctions((const char *)(v23 + 1), (char *)&v43, 0x200uLL, v7, (uint64_t)&__block_literal_global_4, v8);
          uint64_t v25 = *(void *)(a2 + 16);
          *(void *)(v25 + 32) |= v24;
          free(*(void **)(*(void *)(v25 + 168) + 8 * v22));
          *(void *)(*(void *)(*(void *)(a2 + 16) + 168) + 8 * v22) = strdup((const char *)&v43);
          uint64_t v6 = *(void *)(a2 + 16);
        }
        ++v22;
      }
      while (v22 < *(int *)(v6 + 40));
    }
LABEL_56:
    if ((*(unsigned char *)(v6 + 32) & 0x80) != 0)
    {
      if (*(void *)(v6 + 168))
      {
        long long v73 = 0u;
        long long v74 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
        long long v69 = 0u;
        long long v70 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        long long v65 = 0u;
        long long v66 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        if (*(int *)(v6 + 40) >= 1)
        {
          uint64_t v36 = 0;
          do
          {
            uint64_t v37 = *(void *)(*(void *)(v6 + 168) + 8 * v36);
            if (v37 && *(unsigned char *)v37 == 36)
            {
              unsigned int v38 = _expandFunctions((const char *)(v37 + 1), (char *)&v43, 0x200uLL, v7, (uint64_t)&__block_literal_global_4, v8);
              uint64_t v39 = *(void *)(a2 + 16);
              *(void *)(v39 + 32) |= v38;
              free(*(void **)(*(void *)(v39 + 168) + 8 * v36));
              *(void *)(*(void *)(*(void *)(a2 + 16) + 168) + 8 * v36) = strdup((const char *)&v43);
              uint64_t v6 = *(void *)(a2 + 16);
            }
            ++v36;
          }
          while (v36 < *(int *)(v6 + 40));
        }
      }
    }
    goto LABEL_64;
  }
LABEL_42:
  uint64_t v26 = *(void *)(v6 + 72);
  if (v26 && *(unsigned char *)v26 == 36)
  {
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    unsigned int v27 = _expandFunctions((const char *)(v26 + 1), (char *)&v43, 0x200uLL, v7, (uint64_t)&__block_literal_global_4, v8);
    uint64_t v28 = *(void *)(a2 + 16);
    *(void *)(v28 + 32) |= v27;
    int v29 = strlen((const char *)&v43);
    int v30 = *(void **)(v28 + 72);
    if (v29 <= (int)strlen((const char *)v30))
    {
      memcpy(v30, &v43, v29 + 1);
      uint64_t v6 = *(void *)(a2 + 16);
    }
    else
    {
      free(v30);
      char v31 = strdup((const char *)&v43);
      uint64_t v6 = *(void *)(a2 + 16);
      *(void *)(v6 + 72) = v31;
    }
LABEL_55:
    if (!v6) {
      goto LABEL_64;
    }
    goto LABEL_56;
  }
  char v32 = isEntitledForAttribute(v5, *(void **)v6);
  uint64_t v6 = *(void *)(a2 + 16);
  if (v32) {
    goto LABEL_55;
  }
  unsigned int v33 = 0;
  unsigned int v34 = *(unsigned __int16 *)(a2 + 48);
  if (v34 == 4 && v6) {
    unsigned int v33 = (*(_DWORD *)(v6 + 24) < 0xFu) & (0x5060u >> *(_DWORD *)(v6 + 24));
  }
  if (v33 == ((v34 >> 3) & 1)) {
    __int16 v35 = 16;
  }
  else {
    __int16 v35 = 32;
  }
  *(_WORD *)(a2 + 48) = v35;
  free_qp(v6);
  *(void *)(a2 + 16) = 0;
LABEL_64:
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v40 = *(const char ***)(a2 + 16);
    if (v40)
    {
      uint64_t v41 = (char *)*v40;
      if (*v40)
      {
        if (!strcmp(*v40, "_kMDItemFileName")) {
          strcpy(v41, "kMDItemFilename");
        }
      }
    }
  }
  return a2;
}

uint64_t __db_optimize_query_tree_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 48);
  if (v3 == 32)
  {
    uint64_t v10 = *(void *)(a2 + 16);
    uint64_t v11 = (_DWORD *)(v10 + 52);
    if (!v10) {
      uint64_t v11 = (_DWORD *)(a2 + 72);
    }
    *(_DWORD *)(a2 + 72) = *v11;
    if (v10)
    {
      free_qp(v10);
      *(void *)(a2 + 16) = 0;
    }
    uint64_t v12 = *(void **)a2;
    if (*(void *)a2)
    {
      uint64_t v15 = MEMORY[0x1E4F143A8];
      uint64_t v16 = 0x40000000;
      int v17 = __db_query_tree_apply_block_block_invoke;
      int v18 = &unk_1E6348598;
      int v19 = &__block_literal_global_161;
      db_query_tree_apply_block_with_meta(v12, (uint64_t)&v15, 0);
      *(void *)a2 = 0;
    }
    int v13 = *(void **)(a2 + 8);
    if (v13)
    {
      uint64_t v15 = MEMORY[0x1E4F143A8];
      uint64_t v16 = 0x40000000;
      int v17 = __db_query_tree_apply_block_block_invoke;
      int v18 = &unk_1E6348598;
      int v19 = &__block_literal_global_161;
      db_query_tree_apply_block_with_meta(v13, (uint64_t)&v15, 0);
      *(void *)(a2 + 8) = 0;
    }
  }
  else if (v3 == 16)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    int v5 = (float *)(a2 + 72);
    if (v4) {
      uint64_t v6 = (_DWORD *)(v4 + 56);
    }
    else {
      uint64_t v6 = (_DWORD *)(a2 + 72);
    }
    *(_DWORD *)(a2 + 72) = *v6;
    uint64_t v7 = *(void **)a2;
    if (*(void *)a2)
    {
      uint64_t v15 = MEMORY[0x1E4F143A8];
      uint64_t v16 = 0x40000000;
      int v17 = __db_query_tree_apply_block_block_invoke;
      int v18 = &unk_1E6348598;
      int v19 = &__block_literal_global_161;
      db_query_tree_apply_block_with_meta(v7, (uint64_t)&v15, 0);
      *(void *)a2 = 0;
    }
    CFAbsoluteTime v8 = *(void **)(a2 + 8);
    if (v8)
    {
      uint64_t v15 = MEMORY[0x1E4F143A8];
      uint64_t v16 = 0x40000000;
      int v17 = __db_query_tree_apply_block_block_invoke;
      int v18 = &unk_1E6348598;
      int v19 = &__block_literal_global_161;
      db_query_tree_apply_block_with_meta(v8, (uint64_t)&v15, 0);
      *(void *)(a2 + 8) = 0;
    }
    uint64_t v9 = *(void *)(a2 + 16);
    if (v9)
    {
      free_qp(v9);
      *(void *)(a2 + 16) = 0;
    }
    if (*v5 != 0.0) {
      *(_WORD *)(a2 + 48) = 32;
    }
  }
  return a2;
}

void *__db_clone_query_node_block_invoke_2(int a1, void *a2, void *a3, void *a4)
{
  int v5 = a2;
  if (a2 && a3 && a4)
  {
    *a2 = a3;
    a2[1] = a4;
  }
  else
  {
    if (a3)
    {
      uint64_t v7 = MEMORY[0x1E4F143A8];
      uint64_t v8 = 0x40000000;
      uint64_t v9 = __db_query_tree_apply_block_block_invoke;
      uint64_t v10 = &unk_1E6348598;
      uint64_t v11 = &__block_literal_global_161;
      db_query_tree_apply_block_with_meta(a3, (uint64_t)&v7, 0);
    }
    if (a4)
    {
      uint64_t v7 = MEMORY[0x1E4F143A8];
      uint64_t v8 = 0x40000000;
      uint64_t v9 = __db_query_tree_apply_block_block_invoke;
      uint64_t v10 = &unk_1E6348598;
      uint64_t v11 = &__block_literal_global_161;
      db_query_tree_apply_block_with_meta(a4, (uint64_t)&v7, 0);
    }
    free(v5);
    return 0;
  }
  return v5;
}

void pqpush(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    unsigned int v14 = __si_assert_copy_extra(0);
    uint64_t v15 = v14;
    uint64_t v16 = "";
    if (v14) {
      uint64_t v16 = v14;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "PQueue.h", 259, "!pqueue->has_meta", v16);
    free(v15);
    if (__valid_fs(-1)) {
      uint64_t v17 = 2989;
    }
    else {
      uint64_t v17 = 3072;
    }
    *(_DWORD *)uint64_t v17 = -559038737;
    abort();
  }
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void **)(a1 + 8);
  if ((uint64_t)(v5 + 2) >= v4)
  {
    uint64_t v8 = 2 * v4;
    BOOL v9 = v4 < 4;
    uint64_t v10 = 4;
    if (!v9) {
      uint64_t v10 = v8;
    }
    *(void *)(a1 + 16) = v10;
    size_t v11 = 8 * v10 + 16;
    if (v6) {
      uint64_t v12 = malloc_type_zone_realloc((malloc_zone_t *)queryZone, v6, v11, 0xECA6AA46uLL);
    }
    else {
      uint64_t v12 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v11, 0x8DDAA030uLL);
    }
    uint64_t v6 = v12;
    if (!v12) {
      _log_fault_for_malloc_failure();
    }
    *(void *)(a1 + 8) = v6;
    *uint64_t v6 = 0;
    uint64_t v7 = *(void *)(a1 + 24);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 24);
  }
  *(void *)(a1 + 24) = v7 + 1;
  v6[v5] = a2;
  if ((uint64_t)v5 >= 2)
  {
    do
    {
      uint64_t v13 = v6[v5 >> 1];
      if ((a2 & 0x3FFFFFFFFFFFFFFFuLL) > (v13 & 0x3FFFFFFFFFFFFFFFuLL)) {
        break;
      }
      v6[v5] = v13;
      v6[v5 >> 1] = a2;
      BOOL v9 = v5 > 3;
      v5 >>= 1;
    }
    while (v9);
  }
}

uint64_t pqpop(uint64_t a1, unsigned char *a2)
{
  *a2 = *(unsigned char *)a1;
  if (*(unsigned char *)a1)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3 != 1)
    {
      uint64_t v4 = *(void *)(a1 + 8);
      uint64_t result = *(void *)(v4 + 16);
      long long v6 = *(_OWORD *)(v4 + 16 * v3 - 16);
      *(_OWORD *)(v4 + 16) = v6;
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v7 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = v7 - 1;
      uint64_t v9 = v8 >> 1;
      unint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v11 = 3;
      uint64_t v12 = 2;
      uint64_t v13 = 1;
      while (1)
      {
        uint64_t v14 = *(void *)(a1 + 8);
        int8x16_t v15 = *(int8x16_t *)(v14 + 16 * v12);
        if (v11 >= v7)
        {
          int8x16_t v16 = (int8x16_t)xmmword_1BDA82720;
          if (v12 >= v7) {
            return result;
          }
        }
        else
        {
          int8x16_t v16 = *(int8x16_t *)(v14 + 16 * v11);
        }
        unint64_t v17 = v15.i64[0] & 0x3FFFFFFFFFFFFFFFLL;
        unint64_t v18 = v16.i64[0] & 0x3FFFFFFFFFFFFFFFLL;
        if ((v15.i64[0] & 0x3FFFFFFFFFFFFFFFuLL) >= v10)
        {
          if (v18 >= v10)
          {
            _X8 = v14 + 32 * v13;
            __asm { PRFM            #1, [X8] }
            return result;
          }
        }
        else
        {
          int32x2_t v19 = vdup_n_s32(v18 < v17);
          v20.i64[0] = v19.u32[0];
          v20.i64[1] = v19.u32[1];
          int8x16_t v16 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v20, 0x3FuLL)), v16, v15);
          if (v18 >= v17) {
            uint64_t v11 = v12;
          }
        }
        _X15 = v14 + 32 * v11;
        __asm { PRFM            #1, [X15] }
        if (v11 != v13)
        {
          uint64_t v12 = 2 * v11;
          *(_OWORD *)(v14 + 16 * v11) = v6;
          *(int8x16_t *)(*(void *)(a1 + 8) + 16 * v13) = v16;
          uint64_t v13 = v11;
          _VF = __OFSUB__(v11, v9);
          _NF = v11 - v9 < 0;
          uint64_t v11 = (2 * v11) | 1;
          if (_NF != _VF) {
            continue;
          }
        }
        return result;
      }
    }
    return 0;
  }
  uint64_t v29 = *(void *)(a1 + 24);
  uint64_t v30 = v29 - 1;
  if (v29 == 1) {
    return 0;
  }
  uint64_t v31 = *(void *)(a1 + 8);
  uint64_t result = *(void *)(v31 + 8);
  unint64_t v32 = *(void *)(v31 + 8 * v30);
  uint64_t v33 = *(uint64_t *)(a1 + 16) >> 1;
  *(void *)(v31 + 8) = v32;
  *(void *)(a1 + 24) = v30;
  unint64_t v34 = v32 & 0x3FFFFFFFFFFFFFFFLL;
  uint64_t v35 = 3;
  uint64_t v36 = 2;
  uint64_t v37 = 1;
  do
  {
    unint64_t v38 = *(void *)(v31 + 8 * v36);
    if (v35 >= v29)
    {
      if (v36 >= v29) {
        return result;
      }
      unint64_t v39 = 0xBFFFFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t v39 = *(void *)(v31 + 8 * v35);
    }
    unint64_t v40 = v38 & 0x3FFFFFFFFFFFFFFFLL;
    if ((v39 & 0x3FFFFFFFFFFFFFFFLL) >= v34) {
      unint64_t v41 = v32;
    }
    else {
      unint64_t v41 = v39;
    }
    if ((v39 & 0x3FFFFFFFFFFFFFFFLL) >= v34) {
      uint64_t v42 = v37;
    }
    else {
      uint64_t v42 = v35;
    }
    if ((v39 & 0x3FFFFFFFFFFFFFFFLL) < v40)
    {
      unint64_t v38 = v39;
      uint64_t v36 = v35;
    }
    if (v40 < v34) {
      unint64_t v43 = v38;
    }
    else {
      unint64_t v43 = v41;
    }
    if (v40 < v34) {
      uint64_t v44 = v36;
    }
    else {
      uint64_t v44 = v42;
    }
    _X14 = v31 + 16 * v44;
    __asm { PRFM            #1, [X14] }
    if (v44 == v37) {
      break;
    }
    uint64_t v36 = 2 * v44;
    uint64_t v35 = (2 * v44) | 1;
    *(void *)(v31 + 8 * v44) = v32;
    *(void *)(v31 + 8 * v37) = v43;
    uint64_t v37 = v44;
  }
  while (v44 < v33);
  return result;
}

void *__queryRemapFieldsForStore_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a2;
  if (*(_WORD *)(a2 + 48) != 4) {
    return v2;
  }
  uint64_t v3 = *(void *)(a2 + 16);
  if (!v3) {
    return v2;
  }
  uint64_t v4 = *(const char **)v3;
  if (!*(void *)v3) {
    return v2;
  }
  unint64_t v5 = *(const char **)(v3 + 72);
  if (!v5 || (*(_DWORD *)(v3 + 24) | 4) != 5 || strncmp(*(const char **)v3, "_kMDItemQueryPath", 0x11uLL)) {
    return v2;
  }
  if (v4[17])
  {
    if (!strncmp(v4 + 17, "OID", 3uLL)) {
      uint64_t v7 = v4 + 20;
    }
    else {
      uint64_t v7 = v4 + 17;
    }
    strncmp(v7, "Flat", 4uLL);
  }
  __endptr = 0;
  if (!strcmp(v5, "kMDQueryConstantOrphanOID"))
  {
    _SIGetMissingParentOID(*(void *)(a1 + 32));
    uint64_t v8 = (char *)(v5 + 25);
  }
  else
  {
    strtoll(v5, &__endptr, 0);
    uint64_t v8 = __endptr;
    if (__endptr == v5)
    {
LABEL_17:
      PathNodeForPath = createPathNodeForPath(*(void *)(a1 + 32));
      goto LABEL_19;
    }
  }
  if (*v8) {
    goto LABEL_17;
  }
  PathNodeForPath = createPathNodeForOid(*(void *)(a1 + 32));
LABEL_19:
  unint64_t v10 = PathNodeForPath;
  if (PathNodeForPath)
  {
    db_free_query_node(v2);
    return v10;
  }
  return v2;
}

uint64_t __queryRemapFieldsForStore_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*(_WORD *)(a2 + 48) == 4)
  {
    uint64_t v3 = *(void ***)(a2 + 16);
    if (v3)
    {
      if (sSIQueryCSFieldNameCallback)
      {
        CFStringRef v4 = (const __CFString *)sSIQueryCSFieldNameCallback(*v3);
        if (v4)
        {
          memset(v8, 0, sizeof(v8));
          if (CFStringGetCString(v4, (char *)v8, 256, 0x8000100u))
          {
            unint64_t v5 = strdup((const char *)v8);
            if (v5)
            {
              long long v6 = v5;
              free(*v3);
              const void *v3 = v6;
            }
          }
        }
      }
    }
  }
  return a2;
}

uint64_t __processScopeTerms_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3 && (*(unsigned char *)(v3 + 33) & 4) == 0 && !strcmp(*(const char **)v3, *(const char **)(a1 + 32)))
  {
    if (!*(unsigned char *)(a1 + 68))
    {
      uint64_t v7 = *(const char **)(v3 + 72);
      if (v7)
      {
        if (*(void *)(a1 + 40))
        {
          int64_t v8 = strlen(*(const char **)(v3 + 72));
          int64_t v9 = v8 - 1;
          if (v8 >= 1)
          {
            if (v8 != 1 && v7[v9] == 42 && v7[v8 - 2] == 47)
            {
              v7[v9] = 0;
              uint64_t v3 = *(void *)(a2 + 16);
              uint64_t v7 = *(const char **)(v3 + 72);
            }
            int v10 = *(unsigned __int8 *)v7;
            uint64_t v11 = v10 == 42 ? v7 + 1 : v7;
            if (*v11 == 47)
            {
              if (v10 == 42)
              {
                uint64_t v12 = *(const char **)(a1 + 40);
                v21[0] = 0;
                asprintf(v21, "%s/%s", v12, v7 + 1);
                uint64_t v13 = v21[0];
              }
              else
              {
                uint64_t v13 = strdup(v7);
              }
              remove_escaped_chars((unsigned __int8 *)v13);
              size_t v14 = strlen(*(const char **)(a1 + 40));
              if (!strncmp(*(const char **)(a1 + 40), v13, v14))
              {
                if (SIPersistentIDStoreVetPath(*(void *)(a1 + 48), v13, *(_DWORD *)(a1 + 64)))
                {
                  uint64_t v15 = addNodeForCPath(*(void *)(a1 + 48));
                  if (v15)
                  {
                    long long v16 = *(_OWORD *)(a2 + 48);
                    long long v23 = *(_OWORD *)(a2 + 32);
                    long long v24 = v16;
                    long long v25 = *(_OWORD *)(a2 + 64);
                    long long v17 = *(_OWORD *)(a2 + 16);
                    *(_OWORD *)int v21 = *(_OWORD *)a2;
                    long long v22 = v17;
                    *(_OWORD *)a2 = *(_OWORD *)v15;
                    long long v18 = *(_OWORD *)(v15 + 64);
                    long long v20 = *(_OWORD *)(v15 + 16);
                    long long v19 = *(_OWORD *)(v15 + 32);
                    *(_OWORD *)(a2 + 48) = *(_OWORD *)(v15 + 48);
                    *(_OWORD *)(a2 + 64) = v18;
                    *(_OWORD *)(a2 + 16) = v20;
                    *(_OWORD *)(a2 + 32) = v19;
                    *(_OWORD *)uint64_t v15 = *(_OWORD *)v21;
                    *(_OWORD *)(v15 + 64) = v25;
                    *(_OWORD *)(v15 + 48) = v24;
                    *(_OWORD *)(v15 + 32) = v23;
                    *(_OWORD *)(v15 + 16) = v22;
                    db_free_query_node((void *)v15);
                    free(v13);
                    return a2;
                  }
                }
              }
              free(v13);
              uint64_t v3 = *(void *)(a2 + 16);
            }
          }
        }
      }
    }
    if (*(_DWORD *)(v3 + 24) == 5) {
      __int16 v5 = 32;
    }
    else {
      __int16 v5 = 16;
    }
    free_qp(v3);
    *(void *)(a2 + 16) = 0;
    *(_WORD *)(a2 + 48) = v5;
  }
  return a2;
}

unsigned char *___translateSDBQuery_block_invoke(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if ((*(_WORD *)(a2 + 48) & 0xFFF7u) > 0x20)
  {
LABEL_13:
    __int16 v5 = __si_assert_copy_extra_329();
    long long v6 = v5;
    uint64_t v7 = "";
    if (v5) {
      uint64_t v7 = v5;
    }
    __message_assert("%s:%u: failed assertion '%s' %s Unexpected node type %x", "siquerynode.c", 445, "0", v7, *(unsigned __int16 *)(a2 + 48));
    free(v6);
    if (__valid_fs(-1)) {
      uint64_t v8 = 2989;
    }
    else {
      uint64_t v8 = 3072;
    }
    *(_DWORD *)uint64_t v8 = -559038737;
    abort();
  }
  if (((1 << (*(unsigned char *)(a2 + 48) & 0xF7)) & 0x100010010) == 0)
  {
    if (((1 << (*(unsigned char *)(a2 + 48) & 0xF7)) & 6) != 0) {
      return (unsigned char *)a2;
    }
    goto LABEL_13;
  }
  if (*MEMORY[0x1E4F14B00] <= 0x27uLL) {
    ++sTotal_4070;
  }
  uint64_t v3 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x28uLL, 0x31F9A007uLL);
  if (!v3) {
    _log_fault_for_malloc_failure();
  }
  *(_DWORD *)uint64_t v3 = 3;
  v3[17] = (*(_WORD *)(a2 + 56) & 0x200) != 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = __db_query_tree_apply_block_block_invoke;
  v9[3] = &unk_1E6348598;
  v9[4] = &__block_literal_global_21_12478;
  *((void *)v3 + 3) = db_query_tree_apply_block_with_meta((void *)a2, (uint64_t)v9, (uint64_t)&__block_literal_global_25);
  return v3;
}

uint64_t ___rewriteQuery_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  int v3 = *(_WORD *)(a2 + 48) & 0xFFF7;
  if ((v3 - 1) >= 2)
  {
    if (v3 != 4)
    {
      __int16 v16 = *(_WORD *)(a2 + 56) & 0xFCFF;
LABEL_38:
      *(_WORD *)(a2 + 56) = v16;
      return a2;
    }
    *(_WORD *)(a2 + 56) |= 0x100u;
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      uint64_t v6 = *(void *)(v4 + 32);
      if ((v6 & 0x400) != 0
        || (uint64_t v7 = *(const char **)v4) != 0
        && (!strcmp(*(const char **)v4, "kMDItemTextContent") || !strncmp(v7, "_kMDItemOCRContent", 0x12uLL)))
      {
        v6 |= 0x400uLL;
        *(void *)(v4 + 32) = v6;
      }
      uint64_t v8 = *(void *)(v4 + 72);
      if (v8 && *(unsigned char *)v8 == 36)
      {
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
        if (!v9)
        {
          *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = si_calendar_retain();
          uint64_t v8 = *(void *)(*(void *)(a2 + 16) + 72);
          uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
        }
        unsigned int v10 = _expandFunctions((const char *)(v8 + 1), (char *)&v26, 0x200uLL, v9, (uint64_t)&__block_literal_global_4, *(CFAbsoluteTime *)(a1 + 40));
        uint64_t v11 = *(void *)(a2 + 16);
        *(void *)(v11 + 32) |= v10;
        uint64_t v12 = *(char **)(v11 + 72);
        int v13 = strlen(v12);
        int v14 = strlen((const char *)&v26);
        if (v14 <= v13)
        {
          memcpy(v12, &v26, v14 + 1);
          uint64_t v4 = *(void *)(a2 + 16);
        }
        else
        {
          free(v12);
          uint64_t v15 = strdup((const char *)&v26);
          uint64_t v4 = *(void *)(a2 + 16);
          *(void *)(v4 + 72) = v15;
        }
        uint64_t v6 = *(void *)(v4 + 32);
      }
      if ((v6 & 0x80) != 0 && *(void *)(v4 + 168))
      {
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        if (*(int *)(v4 + 40) >= 1)
        {
          uint64_t v17 = 0;
          do
          {
            uint64_t v18 = *(void *)(*(void *)(v4 + 168) + 8 * v17);
            if (v18 && *(unsigned char *)v18 == 36)
            {
              uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
              if (!v19)
              {
                *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = si_calendar_retain();
                uint64_t v18 = *(void *)(*(void *)(*(void *)(a2 + 16) + 168) + 8 * v17);
                uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
              }
              unsigned int v20 = _expandFunctions((const char *)(v18 + 1), (char *)&v26, 0x200uLL, v19, (uint64_t)&__block_literal_global_4, *(CFAbsoluteTime *)(a1 + 40));
              uint64_t v21 = *(void *)(a2 + 16);
              *(void *)(v21 + 32) |= v20;
              free(*(void **)(*(void *)(v21 + 168) + 8 * v17));
              *(void *)(*(void *)(*(void *)(a2 + 16) + 168) + 8 * v17) = strdup((const char *)&v26);
              uint64_t v4 = *(void *)(a2 + 16);
            }
            ++v17;
          }
          while (v17 < *(int *)(v4 + 40));
        }
        uint64_t v6 = *(void *)(v4 + 32);
      }
      if ((v6 & 0x800) != 0)
      {
        __int16 v16 = *(_WORD *)(a2 + 56) & 0xFDFF;
      }
      else
      {
        int v22 = *(_DWORD *)(v4 + 24);
        if (v22 == 14 || v22 == 5) {
          __int16 v24 = 512;
        }
        else {
          __int16 v24 = 0;
        }
        __int16 v16 = v24 | *(_WORD *)(a2 + 56) & 0xFDFF;
      }
      goto LABEL_38;
    }
  }
  return a2;
}

void *___queryGoCracked_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a2;
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (*(_WORD *)(a2 + 48) == 4)
  {
    uint64_t v3 = *(void *)(a2 + 16);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 32);
      if ((v4 & 0x1008000) == 0x1000000)
      {
        __int16 v5 = *(const char **)v3;
        if (*(void *)v3)
        {
          int v7 = strcmp(*(const char **)v3, "*");
          int v8 = v7;
          if ((v4 & 0x400) != 0 || !v7 || !strcmp(v5, "kMDItemTextContent"))
          {
            BOOL v10 = 0;
            BOOL v9 = v8 != 0;
          }
          else if (!strncmp(v5, "_kMDItemOCRContent", 0x12uLL))
          {
            BOOL v10 = 0;
            BOOL v9 = 1;
          }
          else if (!strcmp(v5, "kMDItemDisplayName") || !strcmp(v5, "kMDItemSubject"))
          {
            BOOL v9 = 0;
            BOOL v10 = 1;
          }
          else
          {
            BOOL v9 = 0;
            BOOL v10 = strcmp(v5, "kMDItemTitle") == 0;
          }
          unsigned int v40 = (v4 >> 26) & 2;
          long long v39 = 0;
          if (!v8 || v9 || v10)
          {
            int v11 = *__error();
            uint64_t v12 = _SILogForLogForCategory(1);
            os_log_type_t v13 = 2 * (dword_1E9FC90A8 < 4);
            if (os_log_type_enabled(v12, v13))
            {
              int v14 = (uint64_t *)v2[2];
              uint64_t v15 = *v14;
              uint64_t v16 = v14[9];
              *(_DWORD *)long long buf = 136315394;
              *(void *)&buf[4] = v15;
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = v16;
              _os_log_impl(&dword_1BD672000, v12, v13, "Segmenting %s %s", buf, 0x16u);
            }
            *__error() = v11;
            uint64_t v38 = *(void *)(v2[2] + 72);
            *(void *)long long buf = 0;
            *(void *)&uint8_t buf[8] = buf;
            *(void *)&uint8_t buf[16] = 0x2000000000;
            char v42 = 0;
            if (!v9)
            {
              uint64_t v17 = *(void *)(*(void *)(a1 + 40) + 6640);
              if (v17) {
                _CITermUpdateSetFindTokens(v17);
              }
            }
            uint64_t v18 = *(void *)(a1 + 40);
            uint64_t v19 = *(void *)(v18 + 1384);
            uint64_t v20 = *(void *)(v18 + 1376);
            v29[0] = MEMORY[0x1E4F143A8];
            v29[1] = 0x40000000;
            long long v30 = ___queryGoCracked_block_invoke_425;
            long long v31 = &unk_1E63465C0;
            BOOL v37 = v9;
            long long v34 = &v40;
            long long v35 = &v39;
            uint64_t v36 = v18;
            long long v32 = buf;
            long long v33 = &v38;
            if (v20)
            {
              uint64_t v21 = *(unsigned int *)(v20 + 8);
              while ((int)v21 >= 1)
              {
                uint64_t v22 = v21 - 1;
                int v23 = ((uint64_t (*)(void *, void, uint64_t))v30)(v29, *(void *)(*(void *)v20 + 8 * v21 - 8), 1);
                uint64_t v21 = v22;
                if (!v23) {
                  goto LABEL_30;
                }
              }
            }
            if (v19)
            {
              uint64_t v24 = *(unsigned int *)(v19 + 8);
              do
              {
                if ((int)v24 < 1) {
                  break;
                }
                uint64_t v25 = v24 - 1;
                int v26 = ((uint64_t (*)(void *, void, void))v30)(v29, *(void *)(*(void *)v19 + 8 * v24 - 8), 0);
                uint64_t v24 = v25;
              }
              while (v26);
            }
LABEL_30:
            _Block_object_dispose(buf, 8);
            if (v39)
            {
              if (*((_DWORD *)v39 + 6))
              {
                node_from_token_data = query_node_from_token_data((uint64_t)v39, v2);
                if (node_from_token_data != (_WORD *)v2)
                {
                  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
                  uint64_t v2 = node_from_token_data;
                }
              }
            }
          }
          TokenDataDispose(v39);
        }
      }
    }
  }
  return v2;
}

uint64_t __preIterateQueryForIndex_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(_WORD *)(a2 + 48) & 0xFFF7;
  if (v4 > 0x20) {
    goto LABEL_74;
  }
  if (((1 << (*(_WORD *)(a2 + 48) & 0xF7)) & 0x100010006) != 0) {
    return a2;
  }
  if (v4 != 4)
  {
LABEL_74:
    uint64_t v43 = __si_assert_copy_extra_625(*(_DWORD *)(*(void *)(a1 + 32) + 32));
    __message_assert("%s:%u: failed assertion '%s' %s Bad query node; unexpected type %d");
    goto LABEL_75;
  }
  if (dword_1E9FC90A8 >= 5)
  {
    int v33 = *__error();
    long long v34 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1BD672000, v34, OS_LOG_TYPE_DEFAULT, "Factor.", buf, 2u);
    }
    *__error() = v33;
  }
  uint64_t v6 = *(void *)(a2 + 16);
  if ((*(unsigned char *)(v6 + 33) & 8) == 0)
  {
    if (dword_1E9FC90A8 >= 5)
    {
      int v35 = *__error();
      uint64_t v36 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1BD672000, v36, OS_LOG_TYPE_DEFAULT, "Metadata or Content.", buf, 2u);
      }
      *__error() = v35;
      uint64_t v6 = *(void *)(a2 + 16);
    }
    int v7 = *(_DWORD *)(v6 + 24);
    if ((v7 - 11) < 2)
    {
      BOOL v9 = *(char **)v6;
      if (dword_1E9FC90A8 >= 5)
      {
        BOOL v37 = *(char **)v6;
        int v38 = *__error();
        long long v39 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1BD672000, v39, OS_LOG_TYPE_DEFAULT, "Range query.", buf, 2u);
        }
        *__error() = v38;
        uint64_t v6 = *(void *)(a2 + 16);
        BOOL v9 = v37;
      }
      if (*(_DWORD *)(v6 + 40) != 2) {
        goto LABEL_21;
      }
      goto LABEL_13;
    }
    if ((v7 - 13) < 2)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      BOOL v9 = *(char **)v6;
LABEL_16:
      if (db_get_id_for_field_locked(*(int **)(v8 + 1184), v9) != -2) {
        return a2;
      }
      goto LABEL_17;
    }
    if (v7 == 15)
    {
      BOOL v9 = *(char **)v6;
      if (dword_1E9FC90A8 >= 5)
      {
        unsigned int v40 = *(char **)v6;
        int v41 = *__error();
        char v42 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1BD672000, v42, OS_LOG_TYPE_DEFAULT, "Vector query.", buf, 2u);
        }
        *__error() = v41;
        uint64_t v6 = *(void *)(a2 + 16);
        BOOL v9 = v40;
      }
      if (*(_DWORD *)(v6 + 40) != 5)
      {
LABEL_21:
        int v10 = *(_DWORD *)(v6 + 24);
        goto LABEL_22;
      }
LABEL_13:
      if (**(unsigned char **)v6 == 42 && !*(unsigned char *)(*(void *)v6 + 1)) {
        return a2;
      }
      uint64_t v8 = *(void *)(a1 + 32);
      goto LABEL_16;
    }
    if (everythingQuery(v6))
    {
      int v13 = *__error();
      int v14 = _SILogForLogForCategory(1);
      os_log_type_t v15 = 2 * (dword_1E9FC90A8 < 4);
      if (os_log_type_enabled(v14, v15))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1BD672000, v14, v15, "Found *=* query", buf, 2u);
      }
      *__error() = v13;
      return a2;
    }
    uint64_t v16 = *(char **)v6;
    if (**(unsigned char **)v6 != 42 || v16[1])
    {
      uint64_t v17 = *(void *)(v6 + 32);
      if ((v17 & 0x400) != 0)
      {
        unsigned int id_for_field_locked = 0;
LABEL_38:
        CFStringRef String = copyQueryString(a2);
        if (String)
        {
          unsigned int v20 = *(_DWORD *)(*(void *)(a2 + 16) + 24);
          if (v20 <= 0xF)
          {
            CFStringRef v21 = String;
            int v22 = 1 << v20;
            if ((v22 & 0x8198) != 0)
            {
LABEL_48:
              CFRelease(v21);
              return a2;
            }
            if ((v22 & 0x66) != 0)
            {
              if (id_for_field_locked <= 1
                && (!CFEqual(String, @"*")
                 || db_get_id_for_field_locked(*(int **)(*(void *)(a1 + 32) + 1184), "_kMDItemTextContentIndexExists") == -2)&& !id_for_field_locked)
              {
                if (*(_DWORD *)(*(void *)(a1 + 32) + 2000))
                {
                  uint64_t v23 = *(void *)(a2 + 16);
                  uint64_t v24 = *(const char **)v23;
                  if (!strncmp(*(const char **)v23, "_kMDItemOCRContent", 0x12uLL))
                  {
                    long long v30 = v24 + 18;
                    if (strncmp(v30, "Title", 5uLL))
                    {
                      if (strncmp(v30, "Level1", 6uLL) && strncmp(v30, "Level2", 6uLL) && strncmp(v30, "Level3", 6uLL))
                      {
                        if (dword_1E9FC90A8 >= 5)
                        {
                          int v45 = *__error();
                          long long v46 = _SILogForLogForCategory(1);
                          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
                          {
                            uint64_t v47 = **(void **)(a2 + 16);
                            *(_DWORD *)long long buf = 136315138;
                            uint64_t v49 = v47;
                            _os_log_impl(&dword_1BD672000, v46, OS_LOG_TYPE_DEFAULT, "Invalid property name %s", buf, 0xCu);
                          }
                          *__error() = v45;
                          uint64_t v23 = *(void *)(a2 + 16);
                        }
                        unsigned int v31 = *(_DWORD *)(v23 + 24) - 5;
                        if (v31 > 7) {
                          __int16 v32 = 16;
                        }
                        else {
                          __int16 v32 = word_1BDA82990[v31];
                        }
                        *(_WORD *)(a2 + 48) = v32;
                      }
                    }
                  }
                }
              }
              goto LABEL_48;
            }
          }
          uint64_t v43 = __si_assert_copy_extra_625(*(_DWORD *)(*(void *)(a1 + 32) + 32));
          __message_assert("%s:%u: failed assertion '%s' %s Bad query node; unexpected op %d");
LABEL_75:
          free(v43);
          if (__valid_fs(*(_DWORD *)(*(void *)(a1 + 32) + 32))) {
            uint64_t v44 = 2989;
          }
          else {
            uint64_t v44 = 3072;
          }
          *(_DWORD *)uint64_t v44 = -559038737;
          abort();
        }
        if (dword_1E9FC90A8 >= 5)
        {
          int v25 = *__error();
          int v26 = _SILogForLogForCategory(1);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            long long v27 = *(uint64_t **)(a2 + 16);
            uint64_t v28 = *v27;
            uint64_t v29 = v27[9];
            *(_DWORD *)long long buf = 136315394;
            uint64_t v49 = v28;
            __int16 v50 = 2080;
            uint64_t v51 = v29;
            _os_log_impl(&dword_1BD672000, v26, OS_LOG_TYPE_DEFAULT, "No string for %s = %s", buf, 0x16u);
          }
          *__error() = v25;
        }
LABEL_17:
        int v10 = *(_DWORD *)(*(void *)(a2 + 16) + 24);
LABEL_22:
        unsigned int v11 = v10 - 5;
        if (v11 > 7) {
          __int16 v12 = 16;
        }
        else {
          __int16 v12 = word_1BDA82990[v11];
        }
        *(_WORD *)(a2 + 48) = v12;
        return a2;
      }
      if ((v17 & 0x40000) == 0)
      {
        unsigned int id_for_field_locked = db_get_id_for_field_locked(*(int **)(*(void *)(a1 + 32) + 1184), v16);
        if (id_for_field_locked == -2) {
          goto LABEL_17;
        }
        goto LABEL_38;
      }
    }
    unsigned int id_for_field_locked = 1;
    goto LABEL_38;
  }
  return a2;
}

uint64_t __si_setup_run_stubquery_block_invoke(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 48) & 0xFFF7) == 4)
  {
    uint64_t v3 = *(void *)(a2 + 16);
    if (v3)
    {
      uint64_t v4 = *(char **)v3;
      if (*(void *)v3)
      {
        if (strcmp(*(const char **)v3, "*") && (*(_DWORD *)(v3 + 32) & 0x2C0C00) == 0)
        {
          uint64_t v6 = db_copy_field_ids_with_buffer(*(int **)(**(void **)(a1 + 32) + 1184), v4, 0, 0);
          if (v6)
          {
            free(v6);
          }
          else if ((*(_WORD *)(a2 + 48) & 8) == 0)
          {
            uint64_t v7 = *(void *)(a2 + 16);
            if ((*(_DWORD *)(v7 + 24) - 5) >= 2)
            {
              if (strncmp(*(const char **)v7, "_kMDItemQuery", 0xDuLL)) {
                return 0;
              }
            }
          }
        }
      }
    }
  }
  return 1;
}

uint64_t __db_optimize_query_tree_block_invoke_2(int32x2_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5;
  *(void *)a3 = a4;
  *(void *)(a3 + 8) = a5;
  int v8 = *(unsigned __int16 *)(a3 + 48);
  if (v8 == 2)
  {
    if (a4 && a5)
    {
      int v11 = *(unsigned __int16 *)(a4 + 48);
      if (v11 != 16)
      {
        int v12 = *(unsigned __int16 *)(a5 + 48);
        if (v12 != 16)
        {
          if (v11 == 32 && v12 == 32)
          {
            uint64_t v20 = *(void *)(a4 + 16);
            if (v20) {
              CFStringRef v21 = (float *)(v20 + 52);
            }
            else {
              CFStringRef v21 = (float *)(a4 + 72);
            }
            float v22 = *v21 + *(float *)(a3 + 72);
            uint64_t v23 = *(void *)(a5 + 16);
            if (v23) {
              uint64_t v24 = (float *)(v23 + 52);
            }
            else {
              uint64_t v24 = (float *)(a5 + 72);
            }
            float v25 = v22 + *v24;
            *(_WORD *)(a3 + 48) = 32;
            uint64_t v38 = MEMORY[0x1E4F143A8];
            uint64_t v39 = 0x40000000;
            unsigned int v40 = __db_query_tree_apply_block_block_invoke;
            int v41 = &unk_1E6348598;
            char v42 = &__block_literal_global_161;
            db_query_tree_apply_block_with_meta((void *)a4, (uint64_t)&v38, 0);
            *(void *)a3 = 0;
            int v26 = *(void **)(a3 + 8);
            if (v26)
            {
              uint64_t v38 = MEMORY[0x1E4F143A8];
              uint64_t v39 = 0x40000000;
              unsigned int v40 = __db_query_tree_apply_block_block_invoke;
              int v41 = &unk_1E6348598;
              char v42 = &__block_literal_global_161;
              db_query_tree_apply_block_with_meta(v26, (uint64_t)&v38, 0);
              *(void *)(a3 + 8) = 0;
            }
            *(float *)(a3 + 72) = v25;
            return a3;
          }
          if (v11 == 32)
          {
            uint64_t v27 = *(void *)(a4 + 16);
            if (v27) {
              uint64_t v28 = (float *)(v27 + 52);
            }
            else {
              uint64_t v28 = (float *)(a4 + 72);
            }
            *(float *)a1.i32 = *v28 + *(float *)(a3 + 72);
            int32x2_t v36 = a1;
            *(void *)(a3 + 8) = 0;
            db_free_query_node((void *)a3);
            if (*(float *)v36.i32 != 0.0)
            {
              uint64_t v29 = *(void *)(v5 + 16);
              if (v29)
              {
                *(float32x2_t *)(v29 + 52) = vadd_f32(*(float32x2_t *)(v29 + 52), (float32x2_t)vdup_lane_s32(v36, 0));
              }
              else
              {
                float v34 = *(float *)(v5 + 72);
                if (v34 == 0.0) {
                  *(_DWORD *)(v5 + 72) = v36.i32[0];
                }
                else {
                  *(float *)(v5 + 72) = v34 + *(float *)v36.i32;
                }
              }
            }
            return v5;
          }
          if (v12 == 32)
          {
            uint64_t v30 = *(void *)(a5 + 16);
            if (v30) {
              unsigned int v31 = (float *)(v30 + 52);
            }
            else {
              unsigned int v31 = (float *)(a5 + 72);
            }
            *(float *)a1.i32 = *v31 + *(float *)(a3 + 72);
            int32x2_t v37 = a1;
            *(void *)a3 = 0;
            db_free_query_node((void *)a3);
            if (*(float *)v37.i32 != 0.0)
            {
              uint64_t v32 = *(void *)(a4 + 16);
              if (v32)
              {
                *(float32x2_t *)(v32 + 52) = vadd_f32(*(float32x2_t *)(v32 + 52), (float32x2_t)vdup_lane_s32(v37, 0));
              }
              else
              {
                float v35 = *(float *)(a4 + 72);
                if (v35 == 0.0) {
                  *(_DWORD *)(a4 + 72) = v37.i32[0];
                }
                else {
                  *(float *)(a4 + 72) = v35 + *(float *)v37.i32;
                }
              }
            }
            return a4;
          }
          return a3;
        }
      }
      *(_WORD *)(a3 + 48) = 16;
    }
    else
    {
      *(_WORD *)(a3 + 48) = 16;
      if (!a4) {
        goto LABEL_18;
      }
    }
    uint64_t v38 = MEMORY[0x1E4F143A8];
    uint64_t v39 = 0x40000000;
    unsigned int v40 = __db_query_tree_apply_block_block_invoke;
    int v41 = &unk_1E6348598;
    char v42 = &__block_literal_global_161;
    db_query_tree_apply_block_with_meta((void *)a4, (uint64_t)&v38, 0);
    *(void *)a3 = 0;
    uint64_t v5 = *(void *)(a3 + 8);
LABEL_18:
    if (v5)
    {
LABEL_19:
      uint64_t v38 = MEMORY[0x1E4F143A8];
      uint64_t v39 = 0x40000000;
      unsigned int v40 = __db_query_tree_apply_block_block_invoke;
      int v41 = &unk_1E6348598;
      char v42 = &__block_literal_global_161;
      db_query_tree_apply_block_with_meta((void *)v5, (uint64_t)&v38, 0);
      *(void *)(a3 + 8) = 0;
      return a3;
    }
    return a3;
  }
  if (v8 != 1) {
    return a3;
  }
  if (!a4 || (int v9 = *(unsigned __int16 *)(a4 + 48), v9 == 16))
  {
    if (!a5 || (int v10 = *(unsigned __int16 *)(a5 + 48), v10 == 16))
    {
      *(_WORD *)(a3 + 48) = 16;
      if (a4)
      {
        uint64_t v38 = MEMORY[0x1E4F143A8];
        uint64_t v39 = 0x40000000;
        unsigned int v40 = __db_query_tree_apply_block_block_invoke;
        int v41 = &unk_1E6348598;
        char v42 = &__block_literal_global_161;
        db_query_tree_apply_block_with_meta((void *)a4, (uint64_t)&v38, 0);
        *(void *)a3 = 0;
        uint64_t v5 = *(void *)(a3 + 8);
      }
      if (!v5) {
        return a3;
      }
      goto LABEL_19;
    }
    if (!a4 || (int v9 = *(unsigned __int16 *)(a4 + 48), v9 == 16))
    {
      *(void *)(a3 + 8) = 0;
      uint64_t v38 = MEMORY[0x1E4F143A8];
      uint64_t v39 = 0x40000000;
      unsigned int v40 = __db_query_tree_apply_block_block_invoke;
      int v41 = &unk_1E6348598;
      char v42 = &__block_literal_global_161;
      db_query_tree_apply_block_with_meta((void *)a3, (uint64_t)&v38, 0);
      return v5;
    }
    goto LABEL_27;
  }
  if (!a5 || (int v10 = *(unsigned __int16 *)(a5 + 48), v10 == 16))
  {
    *(void *)a3 = 0;
    uint64_t v38 = MEMORY[0x1E4F143A8];
    uint64_t v39 = 0x40000000;
    unsigned int v40 = __db_query_tree_apply_block_block_invoke;
    int v41 = &unk_1E6348598;
    char v42 = &__block_literal_global_161;
    db_query_tree_apply_block_with_meta((void *)a3, (uint64_t)&v38, 0);
    return a4;
  }
LABEL_27:
  if (v9 != 32
    || ((uint64_t v13 = *(void *)(a4 + 16)) != 0 ? (v14 = (float *)(v13 + 52)) : (v14 = (float *)(a4 + 72)),
        float v15 = *v14,
        node_max_bias(a5),
        v15 < v16))
  {
    if (v10 != 32) {
      return a3;
    }
    uint64_t v17 = *(void *)(v5 + 16);
    uint64_t v18 = (float *)(v17 ? v17 + 52 : v5 + 72);
    float v15 = *v18;
    node_max_bias(a4);
    if (v15 < v19) {
      return a3;
    }
  }
  *(_WORD *)(a3 + 48) = 32;
  *(float *)(a3 + 72) = v15;
  cleanup_children(a3);
  return a3;
}

uint64_t __db_sanitize_query_tree_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v3 = v2;
  uint64_t v233 = *MEMORY[0x1E4F143B8];
  ++*(_DWORD *)(*(void *)(*(void *)(v1 + 40) + 8) + 24);
  if (*(_WORD *)(v2 + 48) != 4) {
    return v3;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  if (!v4) {
    return v3;
  }
  uint64_t v5 = v1;
  int v6 = *(_DWORD *)(v4 + 24);
  if ((v6 - 11) >= 2)
  {
    if (v6 == 15)
    {
LABEL_23:
      BOOL v175 = 0;
      LODWORD(v176) = 0;
      goto LABEL_24;
    }
  }
  else if (*(void *)(v4 + 168))
  {
    if (*(int *)(v4 + 40) >= 1)
    {
      uint64_t v7 = 0;
      do
      {
        int v8 = *(unsigned char **)(*(void *)(v4 + 168) + 8 * v7);
        if (v8 && *v8 == 36)
        {
          int v9 = v8 + 1;
          uint64_t v10 = (*(uint64_t (**)(void))(*(void *)(v5 + 32) + 16))();
          uint64_t v4 = *(void *)(v3 + 16);
          if (v10 && v10 != (void)v9)
          {
            uint64_t v12 = v10;
            free(*(void **)(*(void *)(v4 + 168) + 8 * v7));
            *(void *)(*(void *)(*(void *)(v3 + 16) + 168) + 8 * v7) = v12;
            uint64_t v4 = *(void *)(v3 + 16);
          }
        }
        ++v7;
      }
      while (v7 < *(int *)(v4 + 40));
    }
    goto LABEL_23;
  }
  uint64_t v13 = *(unsigned char **)(v4 + 72);
  if (!v13) {
    goto LABEL_23;
  }
  if (*v13 == 36)
  {
    int v14 = v13 + 1;
    uint64_t v15 = (*(uint64_t (**)(void))(*(void *)(v1 + 32) + 16))();
    uint64_t v4 = *(void *)(v3 + 16);
    if (v15) {
      BOOL v16 = v15 == (void)v14;
    }
    else {
      BOOL v16 = 1;
    }
    if (!v16)
    {
      uint64_t v174 = v15;
      free(*(void **)(v4 + 72));
      BOOL v175 = 0;
      LODWORD(v176) = 0;
      uint64_t v4 = *(void *)(v3 + 16);
      *(void *)(v4 + 72) = v174;
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  uint64_t v176 = (*(void *)(v4 + 32) >> 3) & 1;
  BOOL v175 = (*(void *)(v4 + 32) & 0x1000004) != 0;
LABEL_24:
  if ((*(unsigned char *)(v4 + 32) & 0x80) != 0 && *(void *)(v4 + 168) && *(int *)(v4 + 40) >= 1)
  {
    uint64_t v17 = 0;
    do
    {
      uint64_t v18 = *(unsigned char **)(*(void *)(v4 + 168) + 8 * v17);
      if (v18 && *v18 == 36)
      {
        float v19 = v18 + 1;
        uint64_t v20 = (*(uint64_t (**)(void))(*(void *)(v5 + 32) + 16))();
        uint64_t v4 = *(void *)(v3 + 16);
        if (v20 && v20 != (void)v19)
        {
          uint64_t v22 = v20;
          free(*(void **)(*(void *)(v4 + 168) + 8 * v17));
          *(void *)(*(void *)(*(void *)(v3 + 16) + 168) + 8 * v17) = v22;
          uint64_t v4 = *(void *)(v3 + 16);
        }
      }
      ++v17;
    }
    while (v17 < *(int *)(v4 + 40));
  }
  if (!v175)
  {
    if (*(_WORD *)(v3 + 48) == 4 && *(void *)v4 && !strcmp(*(const char **)v4, "**"))
    {
      *(_DWORD *)(*(void *)(*(void *)(v5 + 40) + 8) + 24) += 2;
      if ((*(_DWORD *)(v4 + 24) - 5) >= 2) {
        __int16 v26 = 1;
      }
      else {
        __int16 v26 = 2;
      }
      query_node_expand_double_star_in_place(v3, v26);
      if (!v176) {
        return v3;
      }
    }
    else
    {
LABEL_379:
      if (!v176) {
        return v3;
      }
    }
LABEL_380:
    uint64_t v228 = MEMORY[0x1E4F143A8];
    uint64_t v229 = 0x40000000;
    v230 = __db_query_tree_apply_block_block_invoke;
    v231 = &unk_1E6348598;
    v232 = &__block_literal_global_100;
    return db_query_tree_apply_block_with_meta((void *)v3, (uint64_t)&v228, (uint64_t)&__block_literal_global_109);
  }
  if (*(_WORD *)(v3 + 48) != 4 || (uint64_t v23 = *(void *)(v4 + 72)) == 0)
  {
    v177 = __si_assert_copy_extra_329();
    __message_assert_333((uint64_t)v177, v178, v179, v180, v181, v182, v183, v184, (char)"core-query.c");
    free(v177);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v24 = *(void *)(*(void *)(v5 + 40) + 8);
  int v189 = *(unsigned __int8 *)(v5 + 48);
  if ((*(_DWORD *)(v4 + 24) - 5) < 2) {
    __int16 v25 = 1;
  }
  else {
    __int16 v25 = 2;
  }
  __int16 v191 = v25;
  if (*(void *)v4) {
    BOOL v205 = strcmp(*(const char **)v4, "**") == 0;
  }
  else {
    BOOL v205 = 0;
  }
  BOOL v203 = *(unsigned char *)v23 == 42 && *(unsigned char *)(v23 + 1) != 0;
  size_t v27 = strlen((const char *)v23);
  int v187 = v176;
  BOOL v28 = v27 >= 2 && *(unsigned char *)(v27 + v23 - 1) == 42 && *(unsigned __int8 *)(v27 + v23 - 2) != 92;
  *(void *)(v4 + 72) = 0;
  unint64_t v29 = *(void *)(v4 + 32);
  unint64_t v185 = v29 & 0xFFFFFFFFFEFFFFFBLL;
  *(void *)(v4 + 32) = v29 & 0xFFFFFFFFFEFFFFFBLL;
  bzero(&v228, 0x2000uLL);
  bzero(v227, 0x2000uLL);
  bzero(v226, 0x2000uLL);
  bzero(v225, 0x800uLL);
  uint64_t v186 = v23;
  uint64_t v30 = (const char *)(v23 + v203);
  uint64_t node_copy_factor_node_expanding_queryTerm = 0;
  size_t v32 = (size_t)&v30[strlen(v30) - v28];
  v206 = v30;
  if ((unint64_t)v30 >= v32) {
    goto LABEL_374;
  }
  unint64_t v201 = v29;
  BOOL v202 = v28;
  char v33 = 0;
  char v34 = 0;
  v197 = (_DWORD *)(v24 + 24);
  LODWORD(v24) = -1;
  float v35 = (char *)v206;
  do
  {
    unint64_t v37 = *v35;
    if (*v35 < 0)
    {
      uint64_t v38 = utf8_byte_length(unsigned char)::utf8_len_table[v37 >> 4];
      int v39 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v38] & v37;
      if ((~(v37 >> 4) & 0xC) != 0)
      {
        LODWORD(v37) = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v38] & v37;
      }
      else
      {
        if (v38 <= 2) {
          uint64_t v40 = 2;
        }
        else {
          uint64_t v40 = utf8_byte_length(unsigned char)::utf8_len_table[v37 >> 4];
        }
        uint64_t v41 = v40 - 1;
        char v42 = v35 + 1;
        do
        {
          char v43 = *v42++;
          LODWORD(v37) = v43 & 0x3F | (v39 << 6);
          int v39 = v37;
          --v41;
        }
        while (v41);
      }
    }
    if (!u_isUWhiteSpace(v37))
    {
      int v44 = v35 - v206;
      int v45 = v37 & 0xFFFFFF00;
      BOOL v48 = (v37 - 11904) >> 7 < 0x197 || (v37 - 65376) < 0x50 || v45 == 4352;
      if (v34 & 1 | ((v37 - 123) < 0xFFFFFFE6))
      {
        if (v37 >> 8 < 0x11 || !v48)
        {
          if ((v33 & 1) == 0)
          {
            uint64_t v24 = (int)v24 + 1;
            uint64_t v55 = 4 * v24;
            *(_DWORD *)((char *)&v228 + v55) = v44;
            *(_DWORD *)&v227[v55] = 0;
            v226[(unint64_t)v55 / 4] = 0;
            v225[v24] = 0;
            char v33 = 1;
          }
          char v56 = v225[(int)v24];
          v225[(int)v24] = v56 & 0xFC | 1;
          if ((v37 & 0xFFFFFF80) == 0xE00 && (v56 & 0x40) == 0) {
            v225[(int)v24] = v56 & 0xBC | 0x41;
          }
          goto LABEL_109;
        }
        if ((v33 & 1) == 0 || (uint64_t v49 = (int)v24, v50 = v225[(int)v24], (v50 & 3) != 0))
        {
          char v50 = 0;
          uint64_t v49 = (int)v24 + 1;
          uint64_t v51 = 4 * v49;
          *(_DWORD *)((char *)&v228 + v51) = v44;
          *(_DWORD *)&v227[v51] = 0;
          v226[(unint64_t)v51 / 4] = 0;
          v225[v49] = 0;
          char v33 = 1;
          LODWORD(v24) = v24 + 1;
        }
        if ((v37 - 12352) > 0x5F)
        {
          if ((v37 - 12448) > 0x5F)
          {
            if (v45 != 4352)
            {
              if ((v50 & 0x10) == 0) {
                v225[v49] = v50 | 0x10;
              }
              goto LABEL_109;
            }
            if ((v50 & 0x20) == 0)
            {
              char v52 = v50 | 0x20;
              goto LABEL_116;
            }
          }
          else if ((v50 & 8) == 0)
          {
            char v52 = v50 | 8;
            goto LABEL_116;
          }
        }
        else if ((v50 & 4) == 0)
        {
          char v52 = v50 | 4;
LABEL_116:
          v225[v49] = v52;
          char v34 = 1;
          goto LABEL_109;
        }
        char v34 = 1;
        goto LABEL_109;
      }
      if (v33)
      {
        uint64_t v53 = (int)v24;
        int v54 = v225[(int)v24];
        if (v54) {
          goto LABEL_105;
        }
      }
      else
      {
        int v54 = 0;
        uint64_t v53 = (int)v24 + 1;
        uint64_t v57 = 4 * v53;
        *(_DWORD *)((char *)&v228 + v57) = v44;
        *(_DWORD *)&v227[v57] = 0;
        v226[(unint64_t)v57 / 4] = 0;
        v225[v53] = 0;
        char v33 = 1;
        LODWORD(v24) = v24 + 1;
      }
      if ((v54 & 0x3C) != 0)
      {
        uint64_t v24 = (int)v24 + 1;
        uint64_t v58 = 4 * v24;
        *(_DWORD *)((char *)&v228 + v58) = v44;
        *(_DWORD *)&v227[v58] = 0;
        v226[(unint64_t)v58 / 4] = 0;
        long long v59 = &v225[v24];
        v225[v24] = 0;
        char v33 = 1;
        goto LABEL_107;
      }
LABEL_105:
      long long v59 = &v225[v53];
      if ((v54 & 0xFFFFFFFD) != 0)
      {
        char v34 = 0;
        char v60 = v54 | 1;
LABEL_108:
        char *v59 = v60;
LABEL_109:
        uint64_t v36 = utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*v35 >> 4];
        uint64_t v61 = (int)v24;
        *(_DWORD *)&v227[v61 * 4] += v36;
        ++v226[v61];
        goto LABEL_65;
      }
LABEL_107:
      char v34 = 0;
      char v60 = 2;
      goto LABEL_108;
    }
    if (v33) {
      char v33 = 0;
    }
    uint64_t v36 = utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*v35 >> 4];
LABEL_65:
    v35 += v36;
  }
  while ((unint64_t)v35 < v32);
  if ((v24 & 0x80000000) == 0)
  {
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    int v64 = v201;
    uint64_t v65 = (v201 >> 24) & 1;
    if (v189) {
      LOBYTE(v65) = 1;
    }
    char v196 = v65;
    CFAllocatorRef v194 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    unsigned __int8 v188 = v34 ^ 1;
    uint64_t v192 = v24;
    CFAllocatorRef v193 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    uint64_t v195 = (v24 + 1);
    BOOL v66 = v202;
    long long v67 = v197;
    uint64_t v190 = v3;
    while (1)
    {
      int v69 = !v62 && v203;
      if (v66)
      {
        BOOL v70 = v62 == v192 || (v225[v62] & 0x3C) == 0;
        BOOL v209 = v70;
      }
      else
      {
        BOOL v209 = 0;
      }
      long long v71 = (char *)&v206[*((int *)&v228 + v62)];
      __src = v71;
      CFIndex v72 = *(int *)&v227[4 * v62];
      int v207 = v69;
      if ((v196 & 1) == 0) {
        break;
      }
      if ((v225[v62] & 0x10) == 0)
      {
        uint64_t node_copy_factor_node_expanding_queryTerm = 0;
        if ((v64 & 0x1000000) == 0) {
          goto LABEL_341;
        }
        goto LABEL_299;
      }
      uint64_t v204 = v63;
      CFStringRef v73 = CFStringCreateWithBytesNoCopy(v194, (const UInt8 *)v71, v72, 0x8000100u, 0, v193);
      if (!v189) {
        goto LABEL_141;
      }
      CFIndex v200 = v72;
      int v77 = 0;
      unint64_t v76 = 0;
      CFArrayRef theArray = 0;
      char v199 = 1;
LABEL_154:
      *(void *)long long buf = 0;
      uint64_t v220 = 0;
      uint64_t v78 = OSAtomicDequeue(&stru_1EC02F0C0, 0);
      if (v78)
      {
        long long v79 = (void *)v78[1];
        v78[1] = 0;
        OSAtomicEnqueue(&gIndexingTokenizerHeap, v78, 0);
      }
      else
      {
        long long v79 = CITokenizerCreate(3);
      }
      CITokenizerGetQueryTokensWithOptions((uint64_t)v79);
      CIReleaseIndexingTokenizer((uint64_t)v79);
      unint64_t v80 = HIDWORD(v220);
      icu_locale_release();
      long long v81 = *(const char ***)buf;
      v216 = *(void **)buf;
      unint64_t v217 = v80;
      v214 = 0;
      unint64_t v215 = 0;
      v212 = 0;
      unint64_t v213 = 0;
      v210 = 0;
      uint64_t v211 = 0;
      if (!v76)
      {
        long long v105 = 0;
        goto LABEL_218;
      }
      int v198 = v77;
      if (v76 == 1) {
        goto LABEL_190;
      }
      if (v76 != 2)
      {
        CFArrayGetValueAtIndex(theArray, 2);
        *(void *)long long buf = 0;
        uint64_t v220 = 0;
        long long v82 = OSAtomicDequeue(&stru_1EC02F0C0, 0);
        if (v82)
        {
          long long v83 = (void *)v82[1];
          v82[1] = 0;
          OSAtomicEnqueue(&gIndexingTokenizerHeap, v82, 0);
        }
        else
        {
          long long v83 = CITokenizerCreate(3);
        }
        CITokenizerGetQueryTokensWithOptions((uint64_t)v83);
        CIReleaseIndexingTokenizer((uint64_t)v83);
        uint64_t v84 = HIDWORD(v220);
        icu_locale_release();
        long long v85 = *(const char ***)buf;
        v210 = *(void **)buf;
        uint64_t v211 = v84;
        if (v84)
        {
          if (v80 == v84)
          {
            if ((int)v80 < 1) {
              goto LABEL_170;
            }
            uint64_t v86 = 0;
            BOOL v87 = 0;
            do
            {
              if (strcmp(v85[v86], v81[v86])) {
                break;
              }
              BOOL v87 = ++v86 >= v80;
            }
            while (v84 != v86);
            if (v87)
            {
              uint64_t v88 = (void **)v85;
              unint64_t v89 = v80;
              do
              {
                long long v90 = *v88++;
                free(v90);
                --v89;
              }
              while (v89);
LABEL_170:
              free(v85);
              v210 = 0;
              LODWORD(v211) = 0;
            }
          }
        }
      }
      CFArrayGetValueAtIndex(theArray, 1);
      *(void *)long long buf = 0;
      uint64_t v220 = 0;
      long long v91 = OSAtomicDequeue(&stru_1EC02F0C0, 0);
      if (v91)
      {
        long long v92 = (void *)v91[1];
        v91[1] = 0;
        OSAtomicEnqueue(&gIndexingTokenizerHeap, v91, 0);
      }
      else
      {
        long long v92 = CITokenizerCreate(3);
      }
      CITokenizerGetQueryTokensWithOptions((uint64_t)v92);
      CIReleaseIndexingTokenizer((uint64_t)v92);
      unint64_t v93 = HIDWORD(v220);
      icu_locale_release();
      long long v94 = *(const char ***)buf;
      v212 = *(void **)buf;
      unint64_t v213 = v93;
      if (!v93) {
        goto LABEL_190;
      }
      if (v80 == v93)
      {
        if ((int)v80 < 1) {
          goto LABEL_186;
        }
        uint64_t v95 = 0;
        BOOL v96 = 0;
        do
        {
          if (strcmp(v94[v95], v81[v95])) {
            break;
          }
          BOOL v96 = ++v95 >= v80;
        }
        while (v93 != v95);
        if (v96) {
          goto LABEL_186;
        }
      }
      if (v93 == v211)
      {
        if ((int)v93 >= 1)
        {
          int v97 = v69;
          uint64_t v98 = 0;
          BOOL v99 = 0;
          long long v100 = (const char **)v210;
          do
          {
            if (strcmp(v94[v98], v100[v98])) {
              break;
            }
            BOOL v99 = ++v98 >= v93;
          }
          while (v93 != v98);
          int v69 = v97;
          uint64_t v3 = v190;
          if (!v99) {
            goto LABEL_190;
          }
LABEL_186:
          if ((int)v93 >= 1)
          {
            int v101 = (void **)v94;
            do
            {
              long long v102 = *v101++;
              free(v102);
              --v93;
            }
            while (v93);
          }
        }
        free(v94);
        v212 = 0;
        LODWORD(v213) = 0;
      }
LABEL_190:
      CFArrayGetValueAtIndex(theArray, 0);
      *(void *)long long buf = 0;
      uint64_t v220 = 0;
      long long v103 = OSAtomicDequeue(&stru_1EC02F0C0, 0);
      if (v103)
      {
        long long v104 = (void *)v103[1];
        v103[1] = 0;
        OSAtomicEnqueue(&gIndexingTokenizerHeap, v103, 0);
      }
      else
      {
        long long v104 = CITokenizerCreate(3);
      }
      int v77 = v198;
      CITokenizerGetQueryTokensWithOptions((uint64_t)v104);
      CIReleaseIndexingTokenizer((uint64_t)v104);
      unint64_t v76 = HIDWORD(v220);
      icu_locale_release();
      long long v105 = *(const char ***)buf;
      v214 = *(const char ***)buf;
      unint64_t v215 = v76;
      if (v76)
      {
        if (v80 == v76)
        {
          if ((int)v80 < 1) {
            goto LABEL_211;
          }
          uint64_t v106 = 0;
          BOOL v107 = 0;
          do
          {
            if (strcmp(v105[v106], v81[v106])) {
              break;
            }
            BOOL v107 = ++v106 >= v80;
          }
          while (v76 != v106);
          if (v107) {
            goto LABEL_211;
          }
        }
        if (v76 != v213) {
          goto LABEL_205;
        }
        if ((int)v76 < 1)
        {
LABEL_214:
          free(v105);
          long long v105 = 0;
          unint64_t v76 = 0;
          v214 = 0;
          LODWORD(v215) = 0;
        }
        else
        {
          uint64_t v108 = 0;
          BOOL v109 = 0;
          uint64_t v110 = (const char **)v212;
          do
          {
            if (strcmp(v105[v108], v110[v108])) {
              break;
            }
            BOOL v109 = ++v108 >= v76;
          }
          while (v76 != v108);
          if (v109) {
            goto LABEL_211;
          }
LABEL_205:
          if (v76 == v211)
          {
            if ((int)v76 < 1) {
              goto LABEL_214;
            }
            uint64_t v111 = 0;
            BOOL v112 = 0;
            uint64_t v113 = (const char **)v210;
            do
            {
              if (strcmp(v105[v111], v113[v111])) {
                break;
              }
              BOOL v112 = ++v111 >= v76;
            }
            while (v76 != v111);
            if (v112)
            {
LABEL_211:
              if ((int)v76 >= 1)
              {
                unint64_t v114 = (void **)v105;
                do
                {
                  v115 = *v114++;
                  free(v115);
                  --v76;
                }
                while (v76);
              }
              goto LABEL_214;
            }
          }
        }
        int v77 = v198;
        goto LABEL_218;
      }
      unint64_t v76 = 0;
LABEL_218:
      long long v67 = v197;
      uint64_t node_copy_factor_node_expanding_queryTerm = _query_node_copy_factor_node_expanding_queryTerm(v3, (uint64_t)&v216, v205, v69, v209, v197);
      if (node_copy_factor_node_expanding_queryTerm)
      {
        if (v77)
        {
          if (v76)
          {
            uint64_t v116 = _query_node_copy_factor_node_expanding_queryTerm(v3, (uint64_t)&v214, v205, v207, v209, v197);
            int v117 = (*(_WORD *)(v3 + 48) & 8) != 0 ? -1 : -5;
            __int16 v118 = (v117 + *(_DWORD *)(*(void *)(v3 + 16) + 24)) >= 2 ? 1 : 2;
            if (v116)
            {
              uint64_t v119 = v116;
              if (*MEMORY[0x1E4F14B00] <= 0x4FuLL) {
                ++sTotal_12395;
              }
              unint64_t v120 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x50uLL, 0x31F9A007uLL);
              if (!v120 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
              {
                *(_WORD *)long long buf = 0;
                _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
              }
              v120[24] = v118;
              *(void *)unint64_t v120 = node_copy_factor_node_expanding_queryTerm;
              *((void *)v120 + 1) = v119;
              uint64_t node_copy_factor_node_expanding_queryTerm = (uint64_t)v120;
              long long v67 = v197;
            }
          }
          if (v213)
          {
            uint64_t v121 = _query_node_copy_factor_node_expanding_queryTerm(v3, (uint64_t)&v212, v205, v207, v209, v67);
            int v122 = (*(_WORD *)(v3 + 48) & 8) != 0 ? -1 : -5;
            __int16 v123 = (v122 + *(_DWORD *)(*(void *)(v3 + 16) + 24)) >= 2 ? 1 : 2;
            if (v121)
            {
              uint64_t v124 = v121;
              if (*MEMORY[0x1E4F14B00] <= 0x4FuLL) {
                ++sTotal_12395;
              }
              v125 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x50uLL, 0x31F9A007uLL);
              if (!v125 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
              {
                *(_WORD *)long long buf = 0;
                _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
              }
              v125[24] = v123;
              *(void *)v125 = node_copy_factor_node_expanding_queryTerm;
              *((void *)v125 + 1) = v124;
              uint64_t node_copy_factor_node_expanding_queryTerm = (uint64_t)v125;
              long long v67 = v197;
            }
          }
          if (v211)
          {
            uint64_t v126 = _query_node_copy_factor_node_expanding_queryTerm(v3, (uint64_t)&v210, v205, v207, v209, v67);
            int v127 = (*(_WORD *)(v3 + 48) & 8) != 0 ? -1 : -5;
            __int16 v128 = (v127 + *(_DWORD *)(*(void *)(v3 + 16) + 24)) >= 2 ? 1 : 2;
            if (v126)
            {
              uint64_t v129 = v126;
              if (*MEMORY[0x1E4F14B00] <= 0x4FuLL) {
                ++sTotal_12395;
              }
              unint64_t v130 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x50uLL, 0x31F9A007uLL);
              if (!v130 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
              {
                *(_WORD *)long long buf = 0;
                _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
              }
              v130[24] = v128;
              *(void *)unint64_t v130 = node_copy_factor_node_expanding_queryTerm;
              *((void *)v130 + 1) = v129;
              uint64_t node_copy_factor_node_expanding_queryTerm = (uint64_t)v130;
              long long v67 = v197;
            }
          }
        }
        if (v202 && !v209 && (v201 & 0x40) != 0 && (v201 & 0x800000) == 0)
        {
          uint64_t v220 = 1;
          *(void *)long long buf = &__src;
          uint64_t v131 = _query_node_copy_factor_node_expanding_queryTerm(v3, (uint64_t)buf, 0, 0, 0, v67);
          uint64_t v132 = *(void *)(v131 + 16);
          if (v205)
          {
            free(*(void **)v132);
            uint64_t v133 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 2uLL, 0x6085D6BuLL);
            if (!v133 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)v224 = 0;
              _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", v224, 2u);
            }
            *uint64_t v133 = 42;
            uint64_t v132 = *(void *)(v131 + 16);
            *(void *)uint64_t v132 = v133;
          }
          *(void *)(v132 + 32) |= 0x4000uLL;
          if ((*(_WORD *)(v3 + 48) & 8) != 0) {
            int v134 = -1;
          }
          else {
            int v134 = -5;
          }
          if ((v134 + *(_DWORD *)(*(void *)(v3 + 16) + 24)) >= 2) {
            __int16 v135 = 1;
          }
          else {
            __int16 v135 = 2;
          }
          if (*MEMORY[0x1E4F14B00] <= 0x4FuLL) {
            ++sTotal_12395;
          }
          v136 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x50uLL, 0x31F9A007uLL);
          if (!v136 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)v224 = 0;
            _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", v224, 2u);
          }
          v136[24] = v135;
          *(void *)v136 = node_copy_factor_node_expanding_queryTerm;
          *((void *)v136 + 1) = v131;
          uint64_t node_copy_factor_node_expanding_queryTerm = (uint64_t)v136;
          long long v67 = v197;
        }
      }
      if (v77)
      {
        uint64_t v137 = v211;
        v138 = v210;
        if ((int)v211 >= 1)
        {
          uint64_t v139 = (void **)v210;
          do
          {
            v140 = *v139++;
            free(v140);
            --v137;
          }
          while (v137);
        }
        free(v138);
        v210 = 0;
        LODWORD(v211) = 0;
        uint64_t v141 = v213;
        v142 = v212;
        if ((int)v213 >= 1)
        {
          uint64_t v143 = (void **)v212;
          do
          {
            uint64_t v144 = *v143++;
            free(v144);
            --v141;
          }
          while (v141);
        }
        free(v142);
        if ((int)v76 >= 1)
        {
          uint64_t v145 = (void **)v105;
          do
          {
            uint64_t v146 = *v145++;
            free(v146);
            --v76;
          }
          while (v76);
        }
        free(v105);
      }
      uint64_t v147 = v217;
      v148 = v216;
      if ((int)v217 >= 1)
      {
        v149 = (void **)v216;
        do
        {
          v150 = *v149++;
          free(v150);
          --v147;
        }
        while (v147);
      }
      free(v148);
      CFIndex v72 = v200;
      if ((v199 & 1) == 0) {
        goto LABEL_297;
      }
LABEL_298:
      CFRelease(v73);
      BOOL v66 = v202;
      int v64 = v201;
      uint64_t v63 = v204;
      if ((v201 & 0x1000000) == 0) {
        goto LABEL_341;
      }
LABEL_299:
      if (v226[v62] < 2) {
        goto LABEL_341;
      }
      int v151 = v225[v62];
      if (v62 == v192 && (v188 & (v151 == 2)) != 0)
      {
        uint64_t v152 = 150994944;
      }
      else
      {
        if ((v151 & 0x3C) == 0 || (v151 & 8) != 0)
        {
LABEL_341:
          if (!node_copy_factor_node_expanding_queryTerm)
          {
            *(void *)long long buf = MEMORY[0x1E4F143A8];
            uint64_t v220 = 0x40000000;
            v221 = __db_query_tree_apply_block_block_invoke;
            v222 = &unk_1E6348598;
            v223 = &__block_literal_global_21_12478;
            uint64_t node_copy_factor_node_expanding_queryTerm = db_query_tree_apply_block_with_meta((void *)v3, (uint64_t)buf, (uint64_t)&__block_literal_global_25);
            if (v207) {
              int v165 = 2;
            }
            else {
              int v165 = 1;
            }
            v166 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v165 + v209 + (int)v72, 0x6085D6BuLL);
            if (!v166 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
            }
            *(void *)(*(void *)(node_copy_factor_node_expanding_queryTerm + 16) + 72) = v166;
            unsigned int v167 = __src;
            if (v207 && *(unsigned char *)__src != 42)
            {
              *v166++ = 42;
              unsigned int v167 = __src;
            }
            uint64_t v3 = v190;
            memcpy(v166, v167, v72);
            unsigned int v168 = &v166[v72];
            if (v209 && *v168 != 42) {
              *v168++ = 42;
            }
            *unsigned int v168 = 0;
            if (v205)
            {
              if ((*(_WORD *)(v190 + 48) & 8) != 0) {
                int v169 = -1;
              }
              else {
                int v169 = -5;
              }
              if ((v169 + *(_DWORD *)(*(void *)(v190 + 16) + 24)) >= 2) {
                __int16 v170 = 1;
              }
              else {
                __int16 v170 = 2;
              }
              query_node_expand_double_star_in_place(node_copy_factor_node_expanding_queryTerm, v170);
              int v164 = 2;
              goto LABEL_362;
            }
          }
LABEL_363:
          if (v63) {
            goto LABEL_364;
          }
          goto LABEL_126;
        }
        if ((v151 & 4) != 0) {
          uint64_t v152 = 150994944;
        }
        else {
          uint64_t v152 = 0x1000000;
        }
      }
      *(void *)long long buf = MEMORY[0x1E4F143A8];
      uint64_t v220 = 0x40000000;
      v221 = __db_query_tree_apply_block_block_invoke;
      v222 = &unk_1E6348598;
      v223 = &__block_literal_global_21_12478;
      uint64_t tree_apply_block_with_meta = db_query_tree_apply_block_with_meta((void *)v3, (uint64_t)buf, (uint64_t)&__block_literal_global_25);
      *(void *)(*(void *)(tree_apply_block_with_meta + 16) + 32) |= v152;
      if (v207) {
        int v154 = 2;
      }
      else {
        int v154 = 1;
      }
      size_t v155 = v72;
      uint64_t v156 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v154 + v209 + (int)v72, 0x6085D6BuLL);
      if (!v156 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
      }
      *(void *)(*(void *)(tree_apply_block_with_meta + 16) + 72) = v156;
      uint64_t v157 = __src;
      if (v207 && *(unsigned char *)__src != 42)
      {
        *v156++ = 42;
        uint64_t v157 = __src;
      }
      uint64_t v3 = v190;
      memcpy(v156, v157, v155);
      size_t v158 = &v156[v155];
      if (v209 && *v158 != 42) {
        *v158++ = 42;
      }
      *size_t v158 = 0;
      if (v205)
      {
        if ((*(_WORD *)(v190 + 48) & 8) != 0) {
          int v159 = -1;
        }
        else {
          int v159 = -5;
        }
        if ((v159 + *(_DWORD *)(*(void *)(v190 + 16) + 24)) >= 2) {
          __int16 v160 = 1;
        }
        else {
          __int16 v160 = 2;
        }
        query_node_expand_double_star_in_place(tree_apply_block_with_meta, v160);
        *v67 += 2;
      }
      if (node_copy_factor_node_expanding_queryTerm)
      {
        if ((*(_WORD *)(v190 + 48) & 8) != 0) {
          int v161 = -1;
        }
        else {
          int v161 = -5;
        }
        if ((v161 + *(_DWORD *)(*(void *)(v190 + 16) + 24)) >= 2) {
          __int16 v162 = 1;
        }
        else {
          __int16 v162 = 2;
        }
        if (*MEMORY[0x1E4F14B00] <= 0x4FuLL) {
          ++sTotal_12395;
        }
        unsigned int v163 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x50uLL, 0x31F9A007uLL);
        if (!v163 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
        }
        v163[24] = v162;
        int v164 = 1;
        *(void *)unsigned int v163 = node_copy_factor_node_expanding_queryTerm;
        *((void *)v163 + 1) = tree_apply_block_with_meta;
        uint64_t node_copy_factor_node_expanding_queryTerm = (uint64_t)v163;
LABEL_362:
        *v67 += v164;
        goto LABEL_363;
      }
      uint64_t node_copy_factor_node_expanding_queryTerm = tree_apply_block_with_meta;
      if (v63)
      {
LABEL_364:
        if (*MEMORY[0x1E4F14B00] <= 0x4FuLL) {
          ++sTotal_12395;
        }
        long long v68 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x50uLL, 0x31F9A007uLL);
        if (!v68 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
        }
        v68[24] = v191;
        *(void *)long long v68 = v63;
        *((void *)v68 + 1) = node_copy_factor_node_expanding_queryTerm;
        ++*v67;
        uint64_t node_copy_factor_node_expanding_queryTerm = (uint64_t)v68;
      }
LABEL_126:
      ++v62;
      uint64_t v63 = node_copy_factor_node_expanding_queryTerm;
      if (v62 == v195) {
        goto LABEL_374;
      }
    }
    uint64_t v204 = v63;
    CFStringRef v73 = CFStringCreateWithBytesNoCopy(v194, (const UInt8 *)v71, v72, 0x8000100u, 0, v193);
LABEL_141:
    CFStringGetLength(v73);
    CFArrayRef v74 = (const __CFArray *)_NLStringTokenizerCopyPossibleStringLanguages();
    if (v74)
    {
      CFArrayRef theArray = v74;
      CFIndex Count = CFArrayGetCount(v74);
      if (Count)
      {
        unint64_t v76 = Count;
        CFIndex v200 = v72;
        char v199 = 0;
        int v77 = 1;
      }
      else
      {
        if ((v225[v62] & 0x40) == 0)
        {
          uint64_t node_copy_factor_node_expanding_queryTerm = 0;
LABEL_297:
          CFRelease(theArray);
          goto LABEL_298;
        }
        CFIndex v200 = v72;
        int v77 = 0;
        unint64_t v76 = 0;
        char v199 = 0;
      }
    }
    else
    {
      if ((v225[v62] & 0x40) == 0)
      {
        uint64_t node_copy_factor_node_expanding_queryTerm = 0;
        goto LABEL_298;
      }
      CFIndex v200 = v72;
      int v77 = 0;
      unint64_t v76 = 0;
      CFArrayRef theArray = 0;
      char v199 = 1;
    }
    goto LABEL_154;
  }
  uint64_t node_copy_factor_node_expanding_queryTerm = 0;
LABEL_374:
  uint64_t v171 = *(void *)(v3 + 16);
  *(void *)(v171 + 72) = v186;
  *(void *)(v171 + 32) = v185;
  if (node_copy_factor_node_expanding_queryTerm) {
    uint64_t v172 = node_copy_factor_node_expanding_queryTerm;
  }
  else {
    uint64_t v172 = v3;
  }
  if (v172 != v3)
  {
    uint64_t v228 = MEMORY[0x1E4F143A8];
    uint64_t v229 = 0x40000000;
    v230 = __db_query_tree_apply_block_block_invoke;
    v231 = &unk_1E6348598;
    v232 = &__block_literal_global_161;
    db_query_tree_apply_block_with_meta((void *)v3, (uint64_t)&v228, 0);
    uint64_t v3 = v172;
    LODWORD(v176) = v187;
    goto LABEL_379;
  }
  if (v187) {
    goto LABEL_380;
  }
  return v3;
}

uint64_t __db_count_query_tree_block_invoke(uint64_t a1, uint64_t a2)
{
  return a2;
}

unsigned int *__evaluateFuzzyQueryForIndex_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *(_WORD *)(a2 + 48) & 0xFFF7;
  if (v4 > 0xF)
  {
    if (v4 == 16)
    {
      if (dword_1E9FC90A8 >= 5)
      {
        int v93 = *__error();
        long long v94 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1BD672000, v94, OS_LOG_TYPE_DEFAULT, "This node is always false.", buf, 2u);
        }
        *__error() = v93;
      }
      if (*MEMORY[0x1E4F14B00] <= 0x97uLL) {
        ++sTotal_5091;
      }
      uint64_t v9 = *(void *)(a1 + 48);
      AllWithPrototype = (char *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x98uLL, 0x31F9A007uLL);
      if (!AllWithPrototype && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
      }
      atomic_store(1u, (unsigned int *)AllWithPrototype);
      *((_DWORD *)AllWithPrototype + 1) = -1073627135;
      *((void *)AllWithPrototype + 7) = v9;
      *((_DWORD *)AllWithPrototype + 12) = 0;
      *((void *)AllWithPrototype + 5) = -1;
      uint64_t v10 = *(void *)(a2 + 16);
      if (v10) {
        int v11 = (_DWORD *)(v10 + 56);
      }
      else {
        int v11 = (_DWORD *)(a2 + 72);
      }
      *((_DWORD *)AllWithPrototype + 5) = *v11;
      return (unsigned int *)AllWithPrototype;
    }
    if (v4 == 32)
    {
      if (dword_1E9FC90A8 >= 5)
      {
        int v89 = *__error();
        long long v90 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1BD672000, v90, OS_LOG_TYPE_DEFAULT, "This node is always true.", buf, 2u);
        }
        *__error() = v89;
      }
      return ContentIndexDocSetCreateAllWithPrototype(*(void *)(a1 + 48), a2);
    }
LABEL_181:
    uint64_t v108 = __si_assert_copy_extra_625(*(_DWORD *)(*(void *)(a1 + 88) + 32));
    BOOL v109 = v108;
    uint64_t v110 = "";
    if (v108) {
      uint64_t v110 = v108;
    }
    __message_assert("%s:%u: failed assertion '%s' %s Bad query node; unexpected type %d",
      "SIQueryC.c",
      5810,
      "0",
      v110,
      *(unsigned __int16 *)(a2 + 48));
    free(v109);
    int v103 = *(_DWORD *)(*(void *)(a1 + 88) + 32);
LABEL_170:
    if (__valid_fs(v103)) {
      uint64_t v104 = 2989;
    }
    else {
      uint64_t v104 = 3072;
    }
    *(_DWORD *)uint64_t v104 = -559038737;
    abort();
  }
  if (v4 - 1 < 2) {
    return (unsigned int *)a2;
  }
  if (v4 != 4) {
    goto LABEL_181;
  }
  if (dword_1E9FC90A8 >= 5)
  {
    int v91 = *__error();
    long long v92 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1BD672000, v92, OS_LOG_TYPE_DEFAULT, "Factor.", buf, 2u);
    }
    *__error() = v91;
  }
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 + 32);
  if (*(unsigned char *)(a1 + 96) || (v8 & 0x800) != 0)
  {
    if ((v8 & 0x800) != 0)
    {
      unsigned int v18 = 0;
      **(unsigned char **)(a1 + 40) = 1;
      unsigned int v19 = *(unsigned __int16 *)(a2 + 48);
      if (v19 == 4 && v7) {
        unsigned int v18 = (*(_DWORD *)(v7 + 24) < 0xFu) & (0x5060u >> *(_DWORD *)(v7 + 24));
      }
      uint64_t v20 = *(void *)(a1 + 48);
      int v21 = (v19 >> 3) & 1;
      unint64_t v22 = *MEMORY[0x1E4F14B00];
      if (v18 == v21)
      {
        if (v22 <= 0x97) {
          ++sTotal_5091;
        }
        AllWithPrototype = (char *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x98uLL, 0x31F9A007uLL);
        if (!AllWithPrototype && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
        }
        atomic_store(1u, (unsigned int *)AllWithPrototype);
        *((_DWORD *)AllWithPrototype + 1) = -1073627135;
        *((void *)AllWithPrototype + 7) = v20;
        *((_DWORD *)AllWithPrototype + 12) = 1;
        *((void *)AllWithPrototype + 5) = -1;
        uint64_t v23 = *(void *)(a2 + 16);
        uint64_t v24 = (_DWORD *)(v23 + 52);
      }
      else
      {
        if (v22 <= 0x97) {
          ++sTotal_5091;
        }
        AllWithPrototype = (char *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x98uLL, 0x31F9A007uLL);
        if (!AllWithPrototype && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
        }
        atomic_store(1u, (unsigned int *)AllWithPrototype);
        *((_DWORD *)AllWithPrototype + 1) = -1073627135;
        *((void *)AllWithPrototype + 7) = v20;
        *((_DWORD *)AllWithPrototype + 12) = 0;
        *((void *)AllWithPrototype + 5) = -1;
        uint64_t v23 = *(void *)(a2 + 16);
        uint64_t v24 = (_DWORD *)(v23 + 56);
      }
      if (v23) {
        char v43 = v24;
      }
      else {
        char v43 = (_DWORD *)(a2 + 72);
      }
      *((_DWORD *)AllWithPrototype + 5) = *v43;
      *((_DWORD *)AllWithPrototype + 13) = 3;
      return (unsigned int *)AllWithPrototype;
    }
  }
  else if (expensiveNodeCheck(*(void *)(a2 + 16)))
  {
    **(unsigned char **)(a1 + 40) = 1;
    AllWithPrototype = (char *)ContentIndexDocSetCreateAllWithPrototype(*(void *)(a1 + 48), a2);
    *((_DWORD *)AllWithPrototype + 13) = 3;
    return (unsigned int *)AllWithPrototype;
  }
  if (dword_1E9FC90A8 >= 5)
  {
    int v95 = *__error();
    BOOL v96 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1BD672000, v96, OS_LOG_TYPE_DEFAULT, "Metadata or Content.", buf, 2u);
    }
    *__error() = v95;
    uint64_t v7 = *(void *)(a2 + 16);
  }
  int v12 = *(_DWORD *)(v7 + 24);
  if ((v12 - 11) < 2)
  {
    if (dword_1E9FC90A8 >= 5)
    {
      int v97 = *__error();
      uint64_t v98 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1BD672000, v98, OS_LOG_TYPE_DEFAULT, "Range query.", buf, 2u);
      }
      *__error() = v97;
      uint64_t v7 = *(void *)(a2 + 16);
    }
    if (*(_DWORD *)(v7 + 40) == 2)
    {
      uint64_t v13 = *(uint64_t **)(a1 + 64);
      uint64_t v14 = *v13;
      AllWithPrototype = *(char **)(*(void *)(a1 + 56) + 8 * *v13);
      if (!AllWithPrototype)
      {
        uint64_t v15 = __si_assert_copy_extra_625(-1);
        BOOL v16 = v15;
        uint64_t v17 = "";
        if (v15) {
          uint64_t v17 = v15;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIQueryC.c", 5654, "holder", v17);
LABEL_169:
        free(v16);
        int v103 = -1;
        goto LABEL_170;
      }
      goto LABEL_123;
    }
    int v32 = *__error();
    char v33 = _SILogForLogForCategory(1);
    os_log_type_t v34 = dword_1E9FC90A8 < 3;
    if (os_log_type_enabled(v33, (os_log_type_t)(dword_1E9FC90A8 < 3)))
    {
      int v35 = *(_DWORD *)(*(void *)(a2 + 16) + 40);
      *(_DWORD *)long long buf = 67109120;
      int v113 = v35;
      _os_log_impl(&dword_1BD672000, v33, v34, "*warn* Too few arguments for query: %d", buf, 8u);
    }
    *__error() = v32;
    uint64_t v37 = *(void *)(a2 + 16);
    if (*(int *)(v37 + 40) >= 1)
    {
      uint64_t v38 = 0;
      int v39 = dword_1E9FC90A8;
      *(void *)&long long v36 = 67109378;
      do
      {
        if (v39 >= 5)
        {
          long long v111 = v36;
          int v40 = *__error();
          uint64_t v41 = _SILogForLogForCategory(1);
          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v42 = *(void *)(*(void *)(*(void *)(a2 + 16) + 168) + 8 * v38);
            *(_DWORD *)long long buf = v111;
            int v113 = v38;
            __int16 v114 = 2080;
            uint64_t v115 = v42;
            _os_log_impl(&dword_1BD672000, v41, OS_LOG_TYPE_DEFAULT, "%d: %s", buf, 0x12u);
          }
          *__error() = v40;
          int v39 = dword_1E9FC90A8;
          uint64_t v37 = *(void *)(a2 + 16);
          long long v36 = v111;
        }
        ++v38;
      }
      while (v38 < *(int *)(v37 + 40));
    }
    return ContentIndexDocSetCreateEmpty(*(void *)(a1 + 48));
  }
  if (v12 != 15)
  {
    if (**(unsigned char **)v7 == 42 && v12 == 1 && !*(unsigned char *)(*(void *)v7 + 1))
    {
      int v44 = *(unsigned char **)(v7 + 72);
      if (*v44 == 42 && !v44[1])
      {
        int v69 = *__error();
        BOOL v70 = _SILogForLogForCategory(1);
        os_log_type_t v71 = 2 * (dword_1E9FC90A8 < 4);
        if (os_log_type_enabled(v70, v71))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1BD672000, v70, v71, "Found *=* query", buf, 2u);
        }
        *__error() = v69;
        AllWithPrototype = (char *)ContentIndexDocSetCreateAllWithPrototype(*(void *)(a1 + 48), a2);
        (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
        return (unsigned int *)AllWithPrototype;
      }
    }
    uint64_t v45 = *(void *)(v7 + 32);
    long long v46 = *(void **)(a1 + 64);
    uint64_t v47 = (uint64_t *)(*(void *)(a1 + 56) + 8 * *v46);
    if ((v45 & 0x400000) != 0)
    {
      AllWithPrototype = (char *)ContentIndexDocSetUnionLazy(2, v47, *(float *)(a2 + 72));
      uint64_t v48 = *(void *)(a1 + 56);
      uint64_t v49 = *(void **)(a1 + 64);
      uint64_t v50 = (*v49)++;
      ContentIndexDocSetDispose(*(void *)(v48 + 8 * v50));
      uint64_t v51 = *(void *)(a1 + 56);
      char v52 = *(void **)(a1 + 64);
      uint64_t v53 = (*v52)++;
      ContentIndexDocSetDispose(*(void *)(v51 + 8 * v53));
      uint64_t v7 = *(void *)(a2 + 16);
      uint64_t v45 = *(void *)(v7 + 32);
    }
    else
    {
      AllWithPrototype = (char *)*v47;
      if (!*v47)
      {
        long long v105 = __si_assert_copy_extra_625(-1);
        long long v82 = v105;
        uint64_t v106 = "";
        if (v105) {
          uint64_t v106 = v105;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIQueryC.c", 5741, "holder", v106);
LABEL_177:
        free(v82);
        if (__valid_fs(-1)) {
          uint64_t v107 = 2989;
        }
        else {
          uint64_t v107 = 3072;
        }
        *(_DWORD *)uint64_t v107 = -559038737;
        abort();
      }
      ++*v46;
    }
    if ((v45 & 0x400) != 0 && (v45 & 0x6000000000) != 0)
    {
      if (*(_DWORD *)(v7 + 96))
      {
        int v54 = *__error();
        uint64_t v55 = _SILogForLogForCategory(1);
        os_log_type_t v56 = 2 * (dword_1E9FC90A8 < 4);
        if (os_log_type_enabled(v55, v56))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1BD672000, v55, v56, "Found custom proximity query", buf, 2u);
        }
        *__error() = v54;
        if ((ContentIndexDocSetSetProximities((uint64_t)AllWithPrototype, *(_DWORD *)(*(void *)(a2 + 16) + 96), *(const void **)(*(void *)(a2 + 16) + 88)) & 1) == 0)*(void *)(*(void *)(a2 + 16) + 32) &= 0xFFFFFF9FFFFFFFFFLL; {
      }
        }
      if (*(unsigned char *)(a1 + 97)) {
        *((void *)AllWithPrototype + 18) = *(void *)(a1 + 80);
      }
    }
    goto LABEL_124;
  }
  if (dword_1E9FC90A8 >= 5)
  {
    int v99 = *__error();
    long long v100 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1BD672000, v100, OS_LOG_TYPE_DEFAULT, "Vector query.", buf, 2u);
    }
    *__error() = v99;
  }
  AllWithPrototype = *(char **)(*(void *)(a1 + 56) + 8 * **(void **)(a1 + 64));
  if (!AllWithPrototype)
  {
    int v101 = __si_assert_copy_extra_625(-1);
    BOOL v16 = v101;
    long long v102 = "";
    if (v101) {
      long long v102 = v101;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIQueryC.c", 5673, "holder", v102);
    goto LABEL_169;
  }
  uint64_t v25 = *(void *)(*((void *)AllWithPrototype + 8) + 72);
  __int16 v26 = *(unsigned char **)(a2 + 40);
  if (v25)
  {
    if (v26 && *v26) {
      goto LABEL_122;
    }
    uint64_t v27 = *(void *)(a1 + 72);
    BOOL v28 = *(unsigned char **)(v27 + 40);
    if ((!v28 || !*v28) && v27 != a2)
    {
      atomic_fetch_add((atomic_uint *volatile)(v25 + 32), 1u);
      db_node_set_vector_distance_cache(a2, v25);
      unint64_t v29 = *(void **)(a1 + 72);
      unsigned int v30 = *(_DWORD *)(*(void *)(a2 + 16) + 80);
      uint64_t v31 = *(void *)(*((void *)AllWithPrototype + 8) + 72);
      atomic_fetch_add((atomic_uint *volatile)(v31 + 32), 1u);
LABEL_103:
      db_query_set_vector_distance_cache(v29, v30, v31);
      goto LABEL_122;
    }
    atomic_fetch_add((atomic_uint *volatile)(v25 + 32), 1u);
    db_node_set_vector_distance_cache(a2, v25);
    uint64_t v64 = *(void *)(a1 + 72);
    if (v64 != a2)
    {
      int has_room = db_query_vector_distance_cache_has_room(*(char **)(v64 + 40));
      unsigned int v30 = *(_DWORD *)(*(void *)(a2 + 16) + 80);
      uint64_t v31 = *(void *)(*((void *)AllWithPrototype + 8) + 72);
      if (!has_room)
      {
        if (!db_query_has_vector_distance_cache(v64, v30, v31))
        {
          int v67 = *__error();
          long long v68 = _SILogForLogForCategory(1);
          if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1BD672000, v68, OS_LOG_TYPE_DEFAULT, "hit vector distance cache limit", buf, 2u);
          }
          *__error() = v67;
        }
        goto LABEL_122;
      }
      atomic_fetch_add((atomic_uint *volatile)(v31 + 32), 1u);
      unint64_t v29 = (void *)v64;
      goto LABEL_103;
    }
  }
  else
  {
    if (v26 && *v26)
    {
      uint64_t v57 = (uint64_t **)(*(void *)(a2 + 24) + 8 * (char)*v26 - 8);
    }
    else
    {
      uint64_t v58 = *(void *)(a1 + 72);
      if (!db_query_vector_distance_cache_has_room(*(char **)(v58 + 40)))
      {
        if (v26) {
          uint64_t v66 = (char)*v26 - 1;
        }
        else {
          uint64_t v66 = -1;
        }
        db_node_set_vector_distance_cache(a2, *(void *)(*(void *)(v58 + 24) + 8 * v66));
        goto LABEL_122;
      }
      long long v59 = (unsigned int *)malloc_type_calloc(1uLL, 0x28uLL, 0x10200406E8F4065uLL);
      atomic_store(1u, v59 + 8);
      db_node_set_vector_distance_cache(a2, (uint64_t)v59);
      char v60 = *(void **)(a1 + 72);
      if (v60 != (void *)a2)
      {
        unsigned int v61 = *(_DWORD *)(*(void *)(a2 + 16) + 80);
        uint64_t v62 = *(char **)(a2 + 40);
        if (v62) {
          uint64_t v63 = *v62 - 1;
        }
        else {
          uint64_t v63 = -1;
        }
        uint64_t v72 = **(void **)(*(void *)(a2 + 24) + 8 * v63);
        atomic_fetch_add((atomic_uint *volatile)(v72 + 32), 1u);
        db_query_set_vector_distance_cache(v60, v61, v72);
      }
      CFStringRef v73 = *(char **)(a2 + 40);
      if (v73) {
        uint64_t v74 = *v73 - 1;
      }
      else {
        uint64_t v74 = -1;
      }
      uint64_t v57 = (uint64_t **)(*(void *)(a2 + 24) + 8 * v74);
    }
    uint64_t v75 = **v57;
    atomic_fetch_add((atomic_uint *volatile)(v75 + 32), 1u);
    *(void *)(*((void *)AllWithPrototype + 8) + 72) = v75;
  }
LABEL_122:
  uint64_t v13 = *(uint64_t **)(a1 + 64);
  uint64_t v14 = *v13;
LABEL_123:
  *uint64_t v13 = v14 + 1;
LABEL_124:
  if (*(void *)(a2 + 16))
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    uint64_t v76 = *(void *)(a2 + 16);
  }
  else
  {
    uint64_t v76 = 0;
  }
  if (*(float *)(v76 + 52) != 0.0 || *(float *)(v76 + 56) != 0.0)
  {
    float v77 = *(float *)(a2 + 72);
    if (v77 == 0.0) {
      float v77 = 1.0;
    }
    *(float32x2_t *)(AllWithPrototype + 12) = vmul_n_f32(*(float32x2_t *)(v76 + 52), v77);
  }
  uint64_t v78 = *(void *)(v76 + 120);
  if (v78)
  {
    if (*(_DWORD *)(v78 + 48) == 3)
    {
      uint64_t v79 = *(void *)(v78 + 64);
      if (*(void *)(v79 + 136))
      {
        if (!AllWithPrototype)
        {
LABEL_139:
          long long v81 = __si_assert_copy_extra_329();
          long long v82 = v81;
          long long v83 = "";
          if (v81) {
            long long v83 = v81;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "ContentIndexQuery.c", 1778, "!(!target || target->docIdSetType==Empty || target->docIdSetType==Mute)", v83);
          goto LABEL_177;
        }
        int v80 = *((_DWORD *)AllWithPrototype + 12);
        if (v80 == 3)
        {
          uint64_t v84 = *((void *)AllWithPrototype + 8);
          long long v85 = *(_OWORD *)(v79 + 144);
          *(_OWORD *)(v84 + 128) = *(_OWORD *)(v79 + 128);
          *(_OWORD *)(v84 + 144) = v85;
          *(void *)(*(void *)(v78 + 64) + 128) = 0;
          *(void *)(*(void *)(v78 + 64) + 144) = 0;
          *(void *)(*(void *)(v78 + 64) + 136) = 0;
        }
        else if (v80 == 2 || !v80)
        {
          goto LABEL_139;
        }
      }
    }
    ContentIndexDocSetDispose(v78);
    uint64_t v86 = *(void *)(a2 + 16);
    *(void *)(v86 + 120) = 0;
    *(void *)(v86 + 128) = 0;
  }
  if (AllWithPrototype && *((_DWORD *)AllWithPrototype + 12))
  {
    atomic_fetch_add((atomic_uint *volatile)AllWithPrototype, 1u);
    uint64_t v87 = *(void *)(a2 + 16);
    *(void *)(v87 + 120) = AllWithPrototype;
    *(void *)(v87 + 128) = ContentIndexDocSetDispose;
  }
  return (unsigned int *)AllWithPrototype;
}

void *__queryRemapFieldsForStore_block_invoke_4(int a1, void *a2, void *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 && a3 && a4)
  {
    *a2 = a3;
    a2[1] = a4;
  }
  else
  {
    if (a3)
    {
      uint64_t v7 = MEMORY[0x1E4F143A8];
      uint64_t v8 = 0x40000000;
      uint64_t v9 = __db_query_tree_apply_block_block_invoke;
      uint64_t v10 = &unk_1E6348598;
      int v11 = &__block_literal_global_161;
      db_query_tree_apply_block_with_meta(a3, (uint64_t)&v7, 0);
    }
    if (a4)
    {
      uint64_t v7 = MEMORY[0x1E4F143A8];
      uint64_t v8 = 0x40000000;
      uint64_t v9 = __db_query_tree_apply_block_block_invoke;
      uint64_t v10 = &unk_1E6348598;
      int v11 = &__block_literal_global_161;
      db_query_tree_apply_block_with_meta(a4, (uint64_t)&v7, 0);
    }
    free(v5);
    return 0;
  }
  return v5;
}

uint64_t __queryRemapFieldsForStore_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return a2;
}

unsigned char *___translateSDBQuery_block_invoke_2(uint64_t a1, uint64_t a2, void **a3, _DWORD *a4)
{
  int v7 = *(_WORD *)(a2 + 48) & 0xFFF7;
  if (v7 == 1)
  {
    int v8 = 0;
  }
  else
  {
    if (v7 != 2)
    {
      uint64_t v24 = __si_assert_copy_extra_329();
      int v21 = v24;
      uint64_t v25 = "";
      if (v24) {
        uint64_t v25 = v24;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "siquerynode.c", 468, "0", v25);
      goto LABEL_24;
    }
    int v8 = 1;
  }
  uint64_t v9 = 0;
  if (a3 && a4)
  {
    int v10 = *(_DWORD *)a3;
    if (v8 == *a4)
    {
      if (v8 != v10)
      {
        uint64_t v15 = (void *)*((void *)a4 + 4);
        uint64_t v16 = *((void *)a4 + 3) + 1;
        *((void *)a4 + 3) = v16;
        uint64_t v17 = malloc_type_realloc(v15, 8 * v16, 0x2004093837F09uLL);
        *((void *)a4 + 4) = v17;
        v17[*((void *)a4 + 3) - 1] = a3;
        uint64_t v9 = a4;
        goto LABEL_19;
      }
      int v11 = (char *)malloc_type_realloc(a3[4], 8 * ((void)a3[3] + *((void *)a4 + 3)), 0x2004093837F09uLL);
      a3[4] = v11;
      memcpy(&v11[8 * (void)a3[3]], *((const void **)a4 + 4), 8 * *((void *)a4 + 3));
      a3[3] = (char *)a3[3] + *((void *)a4 + 3);
      free(*((void **)a4 + 4));
      free(a4);
    }
    else
    {
      if (v8 != v10)
      {
        if (*MEMORY[0x1E4F14B00] <= 0x27uLL) {
          ++sTotal_4070;
        }
        uint64_t v9 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x28uLL, 0x31F9A007uLL);
        if (!v9) {
          _log_fault_for_malloc_failure();
        }
        *(_DWORD *)uint64_t v9 = v8;
        v9[17] = (*(_WORD *)(a2 + 56) & 0x200) != 0;
        *((void *)v9 + 3) = 2;
        unsigned int v18 = malloc_type_calloc(1uLL, 0x10uLL, 0x2004093837F09uLL);
        *((void *)v9 + 4) = v18;
        *unsigned int v18 = a3;
        *(void *)(*((void *)v9 + 4) + 8) = a4;
        goto LABEL_19;
      }
      int v12 = a3[4];
      uint64_t v13 = (uint64_t)a3[3] + 1;
      a3[3] = (void *)v13;
      uint64_t v14 = malloc_type_realloc(v12, 8 * v13, 0x2004093837F09uLL);
      a3[4] = v14;
      v14[(void)a3[3] - 1] = a4;
    }
    uint64_t v9 = a3;
LABEL_19:
    if (*((uint64_t *)v9 + 3) > 1) {
      return v9;
    }
    uint64_t v20 = __si_assert_copy_extra_329();
    int v21 = v20;
    unint64_t v22 = "";
    if (v20) {
      unint64_t v22 = v20;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "siquerynode.c", 501, "sinode->node.mnode.nodeCount>=2", v22);
LABEL_24:
    free(v21);
    if (__valid_fs(-1)) {
      uint64_t v23 = 2989;
    }
    else {
      uint64_t v23 = 3072;
    }
    *(_DWORD *)uint64_t v23 = -559038737;
    abort();
  }
  return v9;
}

uint64_t ___rewriteQuery_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)a2 != a3)
  {
    unint64_t v29 = __si_assert_copy_extra_329();
    unsigned int v30 = v29;
    uint64_t v31 = "";
    if (v29) {
      uint64_t v31 = v29;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "siquerynode.c", 1153, "node->lchild==lchild", v31);
    free(v30);
    if (__valid_fs(-1)) {
      uint64_t v32 = 2989;
    }
    else {
      uint64_t v32 = 3072;
    }
    *(_DWORD *)uint64_t v32 = -559038737;
    abort();
  }
  if (*(void *)(a2 + 8) != a4)
  {
    char v33 = __si_assert_copy_extra_329();
    uint64_t v25 = v33;
    os_log_type_t v34 = "";
    if (v33) {
      os_log_type_t v34 = v33;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "siquerynode.c", 1154, "node->rchild==rchild", v34);
LABEL_52:
    free(v25);
    if (__valid_fs(-1)) {
      uint64_t v35 = 2989;
    }
    else {
      uint64_t v35 = 3072;
    }
    *(_DWORD *)uint64_t v35 = -559038737;
    abort();
  }
  int v5 = *(unsigned __int16 *)(a2 + 48);
  unsigned int v6 = v5 & 0xFFFFFFF7;
  if ((v5 & 0xFFFFFFF7) - 1 > 1)
  {
LABEL_36:
    uint64_t v24 = __si_assert_copy_extra_329();
    uint64_t v25 = v24;
    __int16 v26 = "";
    if (v24) {
      __int16 v26 = v24;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "siquerynode.c", 985, "0", v26);
    goto LABEL_52;
  }
  while (1)
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = *(void *)(a2 + 8);
    int v9 = *(unsigned __int16 *)(*(void *)a2 + 56);
    int v10 = *(unsigned __int16 *)(v8 + 56);
    __int16 v11 = *(_WORD *)(a2 + 56) | 0x100;
    *(_WORD *)(a2 + 56) = v11;
    if (v6 != 2) {
      break;
    }
    if ((v9 & 0x200) != 0 && (v10 & 0x200) != 0) {
      goto LABEL_42;
    }
    if ((v9 & 0x200) != 0)
    {
      uint64_t v12 = *(void *)(v8 + 16);
      if (v12)
      {
        if ((*(unsigned char *)(v12 + 33) & 8) != 0) {
          goto LABEL_42;
        }
      }
    }
    if ((v10 & 0x200) != 0)
    {
      uint64_t v13 = *(void *)(v7 + 16);
      if (v13)
      {
        if ((*(unsigned char *)(v13 + 33) & 8) != 0) {
          goto LABEL_42;
        }
      }
    }
    if ((v9 & 0x200) != 0)
    {
      unsigned int v14 = *(unsigned __int16 *)(v7 + 48);
      if (v14 == 4)
      {
        uint64_t v15 = *(void *)(v7 + 16);
        if (v15) {
          LODWORD(v15) = (*(_DWORD *)(v15 + 24) < 0xFu) & (0x5060u >> *(_DWORD *)(v15 + 24));
        }
      }
      else
      {
        LODWORD(v15) = 0;
      }
      if (v15 != ((v14 >> 3) & 1))
      {
        uint64_t v16 = *(void *)(v8 + 16);
        if (!v16 || (*(unsigned char *)(v16 + 33) & 8) == 0) {
          goto LABEL_41;
        }
      }
    }
    if ((v10 & 0x200) != 0)
    {
      unsigned int v17 = *(unsigned __int16 *)(v8 + 48);
      if (v17 == 4)
      {
        uint64_t v18 = *(void *)(v8 + 16);
        if (v18) {
          LODWORD(v18) = (*(_DWORD *)(v18 + 24) < 0xFu) & (0x5060u >> *(_DWORD *)(v18 + 24));
        }
      }
      else
      {
        LODWORD(v18) = 0;
      }
      if (v18 != ((v17 >> 3) & 1))
      {
        uint64_t v19 = *(void *)(v7 + 16);
        if (!v19 || (*(unsigned char *)(v19 + 33) & 8) == 0) {
          goto LABEL_41;
        }
      }
    }
    if ((v9 & 0x200) != 0 && (*(_WORD *)(v7 + 48) & 0xFFF7) == 1)
    {
      *(_WORD *)(a2 + 48) = v5 ^ 0xB;
      uint64_t v36 = MEMORY[0x1E4F143A8];
      uint64_t v37 = 0x40000000;
      uint64_t v38 = __db_query_tree_apply_block_block_invoke;
      int v39 = &unk_1E6348598;
      int v40 = &__block_literal_global_21_12478;
      uint64_t tree_apply_block_with_meta = db_query_tree_apply_block_with_meta((void *)v7, (uint64_t)&v36, (uint64_t)&__block_literal_global_25);
      int v21 = *(void **)(a2 + 8);
      *(void *)(a2 + 8) = tree_apply_block_with_meta;
      *(_WORD *)(tree_apply_block_with_meta + 48) = 2;
      *(void *)uint64_t tree_apply_block_with_meta = v21;
      *(_WORD *)(*(void *)a2 + 48) = 2;
      uint64_t v36 = MEMORY[0x1E4F143A8];
      uint64_t v37 = 0x40000000;
      uint64_t v38 = __db_query_tree_apply_block_block_invoke;
      int v39 = &unk_1E6348598;
      int v40 = &__block_literal_global_21_12478;
      *(void *)(*(void *)a2 + 8) = db_query_tree_apply_block_with_meta(v21, (uint64_t)&v36, (uint64_t)&__block_literal_global_25);
    }
    else
    {
      if ((v10 & 0x200) == 0 || (*(_WORD *)(v8 + 48) & 0xFFF7) != 1) {
        goto LABEL_41;
      }
      *(_WORD *)(a2 + 48) = v5 ^ 0xB;
      uint64_t v36 = MEMORY[0x1E4F143A8];
      uint64_t v37 = 0x40000000;
      uint64_t v38 = __db_query_tree_apply_block_block_invoke;
      int v39 = &unk_1E6348598;
      int v40 = &__block_literal_global_21_12478;
      uint64_t v22 = db_query_tree_apply_block_with_meta((void *)v8, (uint64_t)&v36, (uint64_t)&__block_literal_global_25);
      uint64_t v23 = *(void **)a2;
      *(void *)a2 = v22;
      *(_WORD *)(v22 + 48) = 2;
      *(void *)(v22 + 8) = v23;
      *(_WORD *)(*(void *)(a2 + 8) + 48) = 2;
      uint64_t v36 = MEMORY[0x1E4F143A8];
      uint64_t v37 = 0x40000000;
      uint64_t v38 = __db_query_tree_apply_block_block_invoke;
      int v39 = &unk_1E6348598;
      int v40 = &__block_literal_global_21_12478;
      **(void **)(a2 + 8) = db_query_tree_apply_block_with_meta(v23, (uint64_t)&v36, (uint64_t)&__block_literal_global_25);
    }
    int v5 = *(unsigned __int16 *)(a2 + 48);
    unsigned int v6 = v5 & 0xFFFFFFF7;
    if ((v5 & 0xFFFFFFF7) - 1 >= 2) {
      goto LABEL_36;
    }
  }
  if (v6 != 1) {
    return a2;
  }
  if (((v9 | v10) & 0x200) == 0)
  {
LABEL_41:
    __int16 v27 = v11 & 0xFDFF;
    goto LABEL_43;
  }
LABEL_42:
  *(_WORD *)(a2 + 48) = v5 ^ 0xB;
  negateQuery(v7);
  negateQuery(*(void *)(a2 + 8));
  __int16 v27 = *(_WORD *)(a2 + 56) | 0x200;
LABEL_43:
  *(_WORD *)(a2 + 56) = v27;
  return a2;
}

void *___queryGoCracked_block_invoke_2(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = a2;
  if (a2)
  {
    *a2 = a3;
    a2[1] = a4;
  }
  return result;
}

uint64_t __si_setup_run_stubquery_block_invoke_2(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = a2;
  if (a2 >= 2)
  {
    int v5 = *(unsigned __int16 *)(a2 + 48);
    if ((v5 & 0xFFFFFFF7) == 1)
    {
      BOOL v6 = (a3 | a4) == 0;
    }
    else
    {
      if ((v5 & 0xFFFFFFF7) != 2) {
        return 1;
      }
      if (a3) {
        BOOL v6 = a4 == 0;
      }
      else {
        BOOL v6 = 1;
      }
    }
    int v7 = !v6;
    return v7 ^ ((v5 & 8) >> 3);
  }
  return result;
}

void oqpush_offset_t(uint64_t a1, uint64_t a2, size_t size)
{
  if (*(_DWORD *)(a1 + 48))
  {
    if (*(void *)(a1 + 56) < (a2 & 0x3FFFFFFFFFFFFFFFuLL))
    {
      unsigned int v17 = __si_assert_copy_extra(0);
      int v7 = v17;
      uint64_t v8 = "";
      if (v17) {
        uint64_t v8 = v17;
      }
      int v9 = "!queue->split || queue->splitPoint >= offset_t_GET_VALUE(value)";
LABEL_20:
      __message_assert("%s:%u: failed assertion '%s' %s ", "OQueue.h", 247, v9, v8);
      free(v7);
      if (__valid_fs(-1)) {
        uint64_t v18 = 2989;
      }
      else {
        uint64_t v18 = 3072;
      }
      *(_DWORD *)uint64_t v18 = -559038737;
      abort();
    }
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5 >= *(void *)(a1 + 16))
    {
      BOOL v6 = __si_assert_copy_extra(0);
      int v7 = v6;
      uint64_t v8 = "";
      if (v6) {
        uint64_t v8 = v6;
      }
      int v9 = "!queue->split";
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5 >= v10)
    {
      uint64_t v11 = 2 * v10;
      if (!v10) {
        uint64_t v11 = 4;
      }
      *(void *)(a1 + 16) = v11;
      uint64_t v12 = *(void **)(a1 + 8);
      size_t v13 = 8 * v11;
      if (v12) {
        unsigned int v14 = malloc_type_zone_realloc((malloc_zone_t *)queryZone, v12, v13, 0xECA6AA46uLL);
      }
      else {
        unsigned int v14 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v13, 0x8DDAA030uLL);
      }
      uint64_t v15 = v14;
      if (!v14) {
        _log_fault_for_malloc_failure();
      }
      *(void *)(a1 + 8) = v15;
      uint64_t v5 = *(void *)(a1 + 24);
    }
  }
  uint64_t v16 = *(void *)(a1 + 8);
  *(void *)(a1 + 24) = v5 + 1;
  *(void *)(v16 + 8 * v5) = a2;
}

uint64_t ___ZL23cacheQPDataForPostCheckRP20SISearchCtx_METADATAP10query_node_block_invoke(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 48) & 0xFFF7) == 4)
  {
    uint64_t v3 = *(void *)(a2 + 16);
    if (v3)
    {
      if ((*(unsigned char *)(v3 + 33) & 8) == 0)
      {
        uint64_t v4 = *(void *)(a1 + 32);
        uint64_t v5 = *(void *)(a2 + 32);
        if ((unint64_t)(v5 + 1) >= 2) {
          ContentIndexDocSetDispose(v5);
        }
        uint64_t Value = *(void *)(v3 + 120);
        if (Value)
        {
          if (*(void (**)(uint64_t))(v3 + 128) != ContentIndexDocSetDispose)
          {
            int v7 = __si_assert_copy_extra_329();
            uint64_t v8 = v7;
            int v9 = "";
            if (v7) {
              int v9 = v7;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "SISearchCtx_METADATA.cpp", 410, "node->qp->_free_cache_data == (void (*)(void*))ContentIndexDocSetDispose", v9);
            free(v8);
            if (__valid_fs(-1)) {
              uint64_t v10 = 2989;
            }
            else {
              uint64_t v10 = 3072;
            }
            *(_DWORD *)uint64_t v10 = -559038737;
            abort();
          }
        }
        else
        {
          uint64_t Value = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)v4 + 216), (const void *)v3);
          if (!Value)
          {
            if ((*(_DWORD *)(v3 + 24) - 5) > 1
              || ((memcpy(__dst, (const void *)v3, sizeof(__dst)), (__dst[6] - 16) >= 0xFFFFFFF1)
                ? (int v12 = dword_1BDA88360[__dst[6]])
                : (int v12 = 0),
                  __dst[6] = v12,
                  (uint64_t Value = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)v4 + 216), __dst)) == 0))
            {
              uint64_t Value = -1;
              goto LABEL_14;
            }
          }
        }
        atomic_fetch_add((atomic_uint *volatile)Value, 1u);
LABEL_14:
        *(void *)(a2 + 32) = Value;
      }
    }
  }
  return 0;
}

void *__db_sanitize_query_tree_block_invoke_3(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = a2;
  if (a2)
  {
    *a2 = a3;
    a2[1] = a4;
  }
  return result;
}

void ___ZL19_evaluateFuzzyQueryP20SISearchCtx_METADATAP14__ContentIndexPP19_ContentIndexDocSetPm_block_invoke(uint64_t a1, void *key, void *value)
{
  uint64_t v5 = *(void *)(a1 + 32);
  Mutable = *(__CFDictionary **)(v5 + 216);
  if (!Mutable)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)kCIQueryZoneAllocator, 0, &dbqpDictionaryKeyCallbacks, &kCIDocSetCallbacks);
    *(void *)(v5 + 216) = Mutable;
  }
  CFDictionarySetValue(Mutable, key, value);
}

uint64_t __query_push_negation_to_leaves_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = a2;
  uint64_t v4 = *(unsigned __int8 *)a3;
  int v5 = *(unsigned __int16 *)(a2 + 48);
  if ((v5 & 8) != 0)
  {
    v5 &= ~8u;
    *(_WORD *)(a2 + 48) = v5;
    *a3 = v4 == 0;
    if (v4) {
      return result;
    }
  }
  else
  {
    *a3 = v4;
    if (!v4) {
      return result;
    }
  }
  switch(v5)
  {
    case 1:
      *(_WORD *)(a2 + 48) = 2;
      break;
    case 2:
      *(_WORD *)(a2 + 48) = 1;
      break;
    case 4:
      uint64_t v6 = *(void *)(a2 + 16);
      uint64_t v7 = *(unsigned int *)(v6 + 24);
      if ((v7 - 16) >= 0xFFFFFFF1) {
        *(_DWORD *)(v6 + 24) = dword_1BDA88360[v7];
      }
      else {
        *(_DWORD *)(v6 + 24) = 0;
      }
      break;
    case 16:
      *(_WORD *)(a2 + 48) = 32;
      break;
    case 32:
      *(_WORD *)(a2 + 48) = 16;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t negateQuery(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    switch(*(_DWORD *)(v1 + 24))
    {
      case 1:
        int v2 = 5;
        break;
      case 2:
        int v2 = 6;
        break;
      case 3:
        int v2 = 8;
        break;
      case 4:
        int v2 = 7;
        break;
      case 5:
        int v2 = 1;
        break;
      case 6:
        int v2 = 2;
        break;
      case 7:
        int v2 = 4;
        break;
      case 8:
        int v2 = 3;
        break;
      case 0xB:
        int v2 = 12;
        break;
      case 0xC:
        int v2 = 11;
        break;
      case 0xD:
        int v2 = 14;
        break;
      case 0xE:
        int v2 = 13;
        break;
      default:
        goto LABEL_4;
    }
    *(_DWORD *)(v1 + 24) = v2;
  }
  else
  {
LABEL_4:
    int v3 = *(unsigned __int16 *)(result + 48);
    if (v3 == 16)
    {
      __int16 v4 = 32;
    }
    else if (v3 == 32)
    {
      __int16 v4 = 16;
    }
    else
    {
      __int16 v4 = v3 ^ 8;
    }
    *(_WORD *)(result + 48) = v4;
  }
  return result;
}

void *__query_node_unique_retain_block_invoke_2(uint64_t a1, void *a2, void *a3, void *a4)
{
  int v5 = a2;
  if (a2 && a3 && a4)
  {
    *a2 = a3;
    a2[1] = a4;
    uint64_t Value = CFBagGetValue(*(CFBagRef *)(*(void *)(a1 + 32) + 64), a2);
    if (Value)
    {
      uint64_t v8 = Value;
      *int v5 = 0;
      v5[1] = 0;
      uint64_t v10 = MEMORY[0x1E4F143A8];
      uint64_t v11 = 0x40000000;
      int v12 = __db_query_tree_apply_block_block_invoke;
      size_t v13 = &unk_1E6348598;
      unsigned int v14 = &__block_literal_global_161;
      db_query_tree_apply_block_with_meta(v5, (uint64_t)&v10, 0);
      int v5 = v8;
    }
    *((_DWORD *)v5 + 13) = *(_DWORD *)(*v5 + 52) + *(_DWORD *)(v5[1] + 52);
    CFBagAddValue(*(CFMutableBagRef *)(*(void *)(a1 + 32) + 64), v5);
  }
  else
  {
    if (a3)
    {
      uint64_t v10 = MEMORY[0x1E4F143A8];
      uint64_t v11 = 0x40000000;
      int v12 = __db_query_tree_apply_block_block_invoke;
      size_t v13 = &unk_1E6348598;
      unsigned int v14 = &__block_literal_global_161;
      db_query_tree_apply_block_with_meta(a3, (uint64_t)&v10, 0);
    }
    if (a4)
    {
      uint64_t v10 = MEMORY[0x1E4F143A8];
      uint64_t v11 = 0x40000000;
      int v12 = __db_query_tree_apply_block_block_invoke;
      size_t v13 = &unk_1E6348598;
      unsigned int v14 = &__block_literal_global_161;
      db_query_tree_apply_block_with_meta(a4, (uint64_t)&v10, 0);
    }
    free(v5);
    return 0;
  }
  return v5;
}

uint64_t __apply_demorgans_law_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  switch(*(_WORD *)(a2 + 48))
  {
    case 1:
      __int16 v3 = 2;
      goto LABEL_8;
    case 2:
      __int16 v3 = 1;
      goto LABEL_8;
    case 4:
      uint64_t v4 = *(void *)(a2 + 16);
      uint64_t v5 = *(unsigned int *)(v4 + 24);
      if ((v5 - 16) >= 0xFFFFFFF1) {
        *(_DWORD *)(v4 + 24) = dword_1BDA88360[v5];
      }
      else {
        *(_DWORD *)(v4 + 24) = 0;
      }
      return result;
    case 0x10:
      __int16 v3 = 32;
      goto LABEL_8;
    case 0x20:
      __int16 v3 = 16;
LABEL_8:
      *(_WORD *)(a2 + 48) = v3;
      break;
    default:
      return result;
  }
  return result;
}

void node_max_bias(uint64_t a1)
{
  int v2 = *(_WORD *)(a1 + 48) & 0xFFF7;
  if (v2 != 32)
  {
    if (v2 == 2)
    {
      if (!*(void *)a1)
      {
        if (!*(void *)(a1 + 8)) {
          return;
        }
        goto LABEL_15;
      }
      node_max_bias();
      if (*(void *)(a1 + 8)) {
LABEL_15:
      }
        node_max_bias();
    }
    else if (v2 == 1)
    {
      if (*(void *)a1)
      {
        node_max_bias();
        if (!*(void *)(a1 + 8)) {
          return;
        }
      }
      else if (!*(void *)(a1 + 8))
      {
        return;
      }
      goto LABEL_15;
    }
  }
}

void *cleanup_children(uint64_t a1)
{
  int v2 = *(void **)a1;
  if (v2)
  {
    uint64_t v4 = MEMORY[0x1E4F143A8];
    uint64_t v5 = 0x40000000;
    uint64_t v6 = __db_query_tree_apply_block_block_invoke;
    uint64_t v7 = &unk_1E6348598;
    uint64_t v8 = &__block_literal_global_161;
    db_query_tree_apply_block_with_meta(v2, (uint64_t)&v4, 0);
    *(void *)a1 = 0;
  }
  uint64_t result = *(void **)(a1 + 8);
  if (result)
  {
    uint64_t v4 = MEMORY[0x1E4F143A8];
    uint64_t v5 = 0x40000000;
    uint64_t v6 = __db_query_tree_apply_block_block_invoke;
    uint64_t v7 = &unk_1E6348598;
    uint64_t v8 = &__block_literal_global_161;
    uint64_t result = (void *)db_query_tree_apply_block_with_meta(result, (uint64_t)&v4, 0);
    *(void *)(a1 + 8) = 0;
  }
  return result;
}

unsigned int *ContentIndexDocSetCreateAllWithPrototype(uint64_t a1, uint64_t a2)
{
  if (*MEMORY[0x1E4F14B00] <= 0x97uLL) {
    ++sTotal_5091;
  }
  uint64_t v4 = (unsigned int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x98uLL, 0x31F9A007uLL);
  if (!v4 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    v8[0] = 0;
    _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)v8, 2u);
  }
  atomic_store(1u, v4);
  v4[1] = -1073627135;
  *((void *)v4 + 7) = a1;
  v4[12] = 1;
  *((void *)v4 + 5) = -1;
  if (a2)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    if (v5) {
      unsigned int v6 = *(_DWORD *)(v5 + 52);
    }
    else {
      unsigned int v6 = *(_DWORD *)(a2 + 72);
    }
  }
  else
  {
    unsigned int v6 = 0;
  }
  v4[5] = v6;
  return v4;
}

CFComparisonResult __setOneLocalizedFieldWithFlags_block_invoke(uint64_t a1, CFStringRef *a2, CFStringRef *a3)
{
  return CFStringCompare(*a2, *a3, 0);
}

uint64_t si_lqn_retain(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t ___ZL15prepareFieldIdsP20SISearchCtx_METADATAP19PartialQueryResults_block_invoke(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return (__PAIR64__(*a2 > *a3, *a2) - *a3) >> 32;
}

uint64_t BestLanguageDictionaryHashCallBack(int *a1)
{
  return *a1;
}

atomic_uint *_ContentIndexDocSetRetain(uint64_t a1, atomic_uint *a2)
{
  uint64_t result = a2;
  if (a2) {
    atomic_fetch_add(a2, 1u);
  }
  return result;
}

atomic_uint *_ContentIndexDocSetRetain(const __CFAllocator *a1, atomic_uint *a2)
{
  uint64_t result = a2;
  if (a2) {
    atomic_fetch_add(a2, 1u);
  }
  return result;
}

uint64_t __RLEOIDArrayInit(char *a1)
{
  return pthread_rwlock_init((pthread_rwlock_t *)(a1 + 16), 0);
}

void __si_enqueue_work_with_qos_block_invoke(uint64_t a1)
{
}

uint64_t __enqueue_barrier_with_qos_block_invoke(uint64_t a1)
{
  return work_fun(*(void *)(a1 + 32));
}

uint64_t _inflateDBO(uint64_t a1, unsigned int *a2, void **a3, uint64_t a4, int a5, uint64_t a6)
{
  size_t v9 = 4 * *a2 + 48;
  if (a6) {
    uint64_t v10 = (void *)(*(uint64_t (**)(uint64_t, void, void, size_t))(a6 + 16))(a6, 0, 0, v9);
  }
  else {
    uint64_t v10 = malloc_type_malloc(v9, 0x601707B2uLL);
  }
  uint64_t v11 = v10;
  *a3 = v10;
  uint64_t v12 = a4;
  if (*(_DWORD *)a1 != 1685287992)
  {
    uint64_t v157 = __si_assert_copy_extra_329();
    size_t v155 = v157;
    size_t v158 = "";
    if (v157) {
      size_t v158 = v157;
    }
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 464, v158);
    goto LABEL_272;
  }
  unsigned int v13 = *(_DWORD *)(a1 + 804);
  *((_DWORD *)v10 + 2) = v9;
  *((_DWORD *)v10 + 3) = 48;
  *((_DWORD *)v10 + 11) = 0;
  unsigned int v14 = a2 + 1;
  uint64_t v15 = a2 + 1;
  char v16 = *((unsigned char *)a2 + 4);
  if (v16 < 0)
  {
    unsigned int v19 = *((unsigned __int8 *)a2 + 4);
    if (v19 > 0xBF)
    {
      if (v19 > 0xDF)
      {
        if (v19 > 0xEF)
        {
          if (v19 > 0xF7)
          {
            if (v19 > 0xFB)
            {
              if (v19 > 0xFD)
              {
                if (v19 == 255)
                {
                  unint64_t v18 = *(void *)((char *)a2 + 5);
                  uint64_t v17 = 9;
                }
                else
                {
                  unint64_t v18 = ((unint64_t)*((unsigned __int8 *)a2 + 5) << 48) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 40) | ((unint64_t)*((unsigned __int8 *)a2 + 7) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 8) << 24) | ((unint64_t)*((unsigned __int8 *)a2 + 9) << 16) | ((unint64_t)*((unsigned __int8 *)a2 + 10) << 8) | *((unsigned __int8 *)a2 + 11);
                  uint64_t v17 = 8;
                }
              }
              else
              {
                unint64_t v18 = ((unint64_t)(v16 & 1) << 48) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 7) << 24) | ((unint64_t)*((unsigned __int8 *)a2 + 8) << 16) | ((unint64_t)*((unsigned __int8 *)a2 + 9) << 8) | *((unsigned __int8 *)a2 + 10);
                uint64_t v17 = 7;
              }
            }
            else
            {
              unint64_t v18 = ((unint64_t)(v16 & 3) << 40) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 24) | ((unint64_t)*((unsigned __int8 *)a2 + 7) << 16) | ((unint64_t)*((unsigned __int8 *)a2 + 8) << 8) | *((unsigned __int8 *)a2 + 9);
              uint64_t v17 = 6;
            }
          }
          else
          {
            unint64_t v18 = ((unint64_t)(v16 & 7) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 24) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 16) | ((unint64_t)*((unsigned __int8 *)a2 + 7) << 8) | *((unsigned __int8 *)a2 + 8);
            uint64_t v17 = 5;
          }
        }
        else
        {
          unint64_t v18 = ((unint64_t)(v16 & 0xF) << 24) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 16) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 8) | *((unsigned __int8 *)a2 + 7);
          uint64_t v17 = 4;
        }
      }
      else
      {
        unint64_t v18 = ((unint64_t)(v16 & 0x1F) << 16) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 8) | *((unsigned __int8 *)a2 + 6);
        uint64_t v17 = 3;
      }
    }
    else
    {
      unint64_t v18 = *((unsigned __int8 *)a2 + 5) | ((unint64_t)(v16 & 0x3F) << 8);
      uint64_t v17 = 2;
    }
  }
  else
  {
    uint64_t v17 = 1;
    unint64_t v18 = *((unsigned __int8 *)a2 + 4);
  }
  unint64_t v20 = v18;
  unint64_t v21 = *a2;
  void *v10 = v20;
  uint64_t v22 = v17 + 1;
  unsigned int v23 = *((unsigned __int8 *)v15 + v17);
  if (*((char *)v15 + v17) < 0)
  {
    if (v23 > 0xBF)
    {
      if (v23 > 0xDF)
      {
        if (v23 > 0xEF)
        {
          int v25 = *(unsigned int *)((char *)v15 + v22);
          uint64_t v26 = v17 + 5;
        }
        else
        {
          int v25 = ((v23 & 0xF) << 24) | (*((unsigned __int8 *)v15 + v22) << 16) | (*((unsigned __int8 *)v14 + v17 + 2) << 8) | *((unsigned __int8 *)v14 + v17 + 3);
          uint64_t v26 = v17 + 4;
        }
      }
      else
      {
        int v25 = ((v23 & 0x1F) << 16) | (*((unsigned __int8 *)v15 + v22) << 8) | *((unsigned __int8 *)v14 + v17 + 2);
        uint64_t v26 = v17 + 3;
      }
    }
    else
    {
      int v25 = *((unsigned __int8 *)v15 + v22) | ((v23 & 0x3F) << 8);
      uint64_t v26 = v17 + 2;
    }
    int v24 = v25;
    uint64_t v22 = v26;
  }
  else
  {
    int v24 = *((unsigned __int8 *)v15 + v17);
  }
  *((_DWORD *)v11 + 10) = v24;
  uint64_t v27 = v22 + 1;
  char v28 = *((unsigned char *)v15 + v22);
  if (v28 < 0)
  {
    unsigned int v31 = *((unsigned __int8 *)v15 + v22);
    if (v31 > 0xBF)
    {
      if (v31 > 0xDF)
      {
        if (v31 > 0xEF)
        {
          if (v31 > 0xF7)
          {
            if (v31 > 0xFB)
            {
              if (v31 > 0xFD)
              {
                if (v31 == 255)
                {
                  unint64_t v29 = *(void *)((char *)v15 + v27);
                  uint64_t v30 = v22 + 9;
                }
                else
                {
                  unint64_t v29 = ((unint64_t)*((unsigned __int8 *)v15 + v27) << 48) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 2) << 40) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 3) << 32) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 4) << 24) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 5) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 6) << 8) | *((unsigned __int8 *)v14 + v22 + 7);
                  uint64_t v30 = v22 + 8;
                }
              }
              else
              {
                unint64_t v29 = ((unint64_t)(v28 & 1) << 48) | ((unint64_t)*((unsigned __int8 *)v15 + v27) << 40) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 3) << 24) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 4) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 5) << 8) | *((unsigned __int8 *)v14 + v22 + 6);
                uint64_t v30 = v22 + 7;
              }
            }
            else
            {
              unint64_t v29 = ((unint64_t)(v28 & 3) << 40) | ((unint64_t)*((unsigned __int8 *)v15 + v27) << 32) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 2) << 24) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 3) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 4) << 8) | *((unsigned __int8 *)v14 + v22 + 5);
              uint64_t v30 = v22 + 6;
            }
          }
          else
          {
            unint64_t v29 = ((unint64_t)(v28 & 7) << 32) | ((unint64_t)*((unsigned __int8 *)v15 + v27) << 24) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 2) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 3) << 8) | *((unsigned __int8 *)v14 + v22 + 4);
            uint64_t v30 = v22 + 5;
          }
        }
        else
        {
          unint64_t v29 = ((unint64_t)(v28 & 0xF) << 24) | ((unint64_t)*((unsigned __int8 *)v15 + v27) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 2) << 8) | *((unsigned __int8 *)v14 + v22 + 3);
          uint64_t v30 = v22 + 4;
        }
      }
      else
      {
        unint64_t v29 = ((unint64_t)(v28 & 0x1F) << 16) | ((unint64_t)*((unsigned __int8 *)v15 + v27) << 8) | *((unsigned __int8 *)v14 + v22 + 2);
        uint64_t v30 = v22 + 3;
      }
    }
    else
    {
      uint64_t v30 = v22 + 2;
      unint64_t v29 = *((unsigned __int8 *)v15 + v27) | ((unint64_t)(v28 & 0x3F) << 8);
    }
  }
  else
  {
    unint64_t v29 = *((unsigned __int8 *)v15 + v22);
    uint64_t v30 = v22 + 1;
  }
  v11[4] = v29;
  uint64_t v32 = v30 + 1;
  char v33 = *((unsigned char *)v15 + v30);
  if (v33 < 0)
  {
    unsigned int v36 = *((unsigned __int8 *)v15 + v30);
    if (v36 > 0xBF)
    {
      if (v36 > 0xDF)
      {
        if (v36 > 0xEF)
        {
          if (v36 > 0xF7)
          {
            if (v36 > 0xFB)
            {
              if (v36 > 0xFD)
              {
                if (v36 == 255)
                {
                  unint64_t v34 = *(void *)((char *)v15 + v32);
                  unint64_t v35 = v30 + 9;
                }
                else
                {
                  unint64_t v34 = ((unint64_t)*((unsigned __int8 *)v15 + v32) << 48) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 2) << 40) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 3) << 32) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 4) << 24) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 5) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 6) << 8) | *((unsigned __int8 *)v14 + v30 + 7);
                  unint64_t v35 = v30 + 8;
                }
              }
              else
              {
                unint64_t v34 = ((unint64_t)(v33 & 1) << 48) | ((unint64_t)*((unsigned __int8 *)v15 + v32) << 40) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 3) << 24) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 4) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 5) << 8) | *((unsigned __int8 *)v14 + v30 + 6);
                unint64_t v35 = v30 + 7;
              }
            }
            else
            {
              unint64_t v34 = ((unint64_t)(v33 & 3) << 40) | ((unint64_t)*((unsigned __int8 *)v15 + v32) << 32) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 2) << 24) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 3) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 4) << 8) | *((unsigned __int8 *)v14 + v30 + 5);
              unint64_t v35 = v30 + 6;
            }
          }
          else
          {
            unint64_t v34 = ((unint64_t)(v33 & 7) << 32) | ((unint64_t)*((unsigned __int8 *)v15 + v32) << 24) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 2) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 3) << 8) | *((unsigned __int8 *)v14 + v30 + 4);
            unint64_t v35 = v30 + 5;
          }
        }
        else
        {
          unint64_t v34 = ((unint64_t)(v33 & 0xF) << 24) | ((unint64_t)*((unsigned __int8 *)v15 + v32) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 2) << 8) | *((unsigned __int8 *)v14 + v30 + 3);
          unint64_t v35 = v30 + 4;
        }
      }
      else
      {
        unint64_t v34 = ((unint64_t)(v33 & 0x1F) << 16) | ((unint64_t)*((unsigned __int8 *)v15 + v32) << 8) | *((unsigned __int8 *)v14 + v30 + 2);
        unint64_t v35 = v30 + 3;
      }
    }
    else
    {
      unint64_t v35 = v30 + 2;
      unint64_t v34 = *((unsigned __int8 *)v15 + v32) | ((unint64_t)(v33 & 0x3F) << 8);
    }
  }
  else
  {
    unint64_t v34 = *((unsigned __int8 *)v15 + v30);
    unint64_t v35 = v30 + 1;
  }
  unint64_t v178 = v35;
  v11[3] = v34;
  unint64_t v37 = v35 + 1;
  char v38 = *((unsigned char *)v15 + v35);
  if (v38 < 0)
  {
    unsigned int v41 = *((unsigned __int8 *)v15 + v35);
    if (v41 > 0xBF)
    {
      if (v41 > 0xDF)
      {
        if (v41 > 0xEF)
        {
          if (v41 > 0xF7)
          {
            if (v41 > 0xFB)
            {
              if (v41 > 0xFD)
              {
                if (v41 == 255)
                {
                  unint64_t v39 = *(void *)((char *)v15 + v37);
                  unint64_t v40 = v35 + 9;
                }
                else
                {
                  unint64_t v39 = ((unint64_t)*((unsigned __int8 *)v15 + v37) << 48) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 2) << 40) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 3) << 32) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 4) << 24) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 5) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 6) << 8) | *((unsigned __int8 *)v14 + v35 + 7);
                  unint64_t v40 = v35 + 8;
                }
              }
              else
              {
                unint64_t v39 = ((unint64_t)(v38 & 1) << 48) | ((unint64_t)*((unsigned __int8 *)v15 + v37) << 40) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 3) << 24) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 4) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 5) << 8) | *((unsigned __int8 *)v14 + v35 + 6);
                unint64_t v40 = v35 + 7;
              }
            }
            else
            {
              unint64_t v39 = ((unint64_t)(v38 & 3) << 40) | ((unint64_t)*((unsigned __int8 *)v15 + v37) << 32) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 2) << 24) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 3) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 4) << 8) | *((unsigned __int8 *)v14 + v35 + 5);
              unint64_t v40 = v35 + 6;
            }
          }
          else
          {
            unint64_t v39 = ((unint64_t)(v38 & 7) << 32) | ((unint64_t)*((unsigned __int8 *)v15 + v37) << 24) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 2) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 3) << 8) | *((unsigned __int8 *)v14 + v35 + 4);
            unint64_t v40 = v35 + 5;
          }
        }
        else
        {
          unint64_t v39 = ((unint64_t)(v38 & 0xF) << 24) | ((unint64_t)*((unsigned __int8 *)v15 + v37) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 2) << 8) | *((unsigned __int8 *)v14 + v35 + 3);
          unint64_t v40 = v35 + 4;
        }
      }
      else
      {
        unint64_t v39 = ((unint64_t)(v38 & 0x1F) << 16) | ((unint64_t)*((unsigned __int8 *)v15 + v37) << 8) | *((unsigned __int8 *)v14 + v35 + 2);
        unint64_t v40 = v35 + 3;
      }
    }
    else
    {
      unint64_t v40 = v35 + 2;
      unint64_t v39 = *((unsigned __int8 *)v15 + v37) | ((unint64_t)(v38 & 0x3F) << 8);
    }
  }
  else
  {
    unint64_t v39 = *((unsigned __int8 *)v15 + v35);
    unint64_t v40 = v35 + 1;
  }
  v11[2] = v39;
  if ((v24 & 0x80) != 0)
  {
    unint64_t v43 = v40 + 1;
    unsigned int v44 = *((unsigned __int8 *)v15 + v40);
    if (*((char *)v15 + v40) < 0)
    {
      if (v44 > 0xBF)
      {
        if (v44 > 0xDF)
        {
          if (v44 > 0xEF)
          {
            int v46 = *(unsigned int *)((char *)v15 + v43);
            unint64_t v47 = v40 + 5;
          }
          else
          {
            int v46 = ((v44 & 0xF) << 24) | (*((unsigned __int8 *)v15 + v43) << 16) | (*((unsigned __int8 *)v14 + v40 + 2) << 8) | *((unsigned __int8 *)v14 + v40 + 3);
            unint64_t v47 = v40 + 4;
          }
        }
        else
        {
          int v46 = ((v44 & 0x1F) << 16) | (*((unsigned __int8 *)v15 + v43) << 8) | *((unsigned __int8 *)v14 + v40 + 2);
          unint64_t v47 = v40 + 3;
        }
      }
      else
      {
        int v46 = *((unsigned __int8 *)v15 + v43) | ((v44 & 0x3F) << 8);
        unint64_t v47 = v40 + 2;
      }
      int v45 = v46;
      unint64_t v43 = v47;
    }
    else
    {
      int v45 = *((unsigned __int8 *)v15 + v40);
    }
    unint64_t v178 = v43;
    *((_DWORD *)v11 + 11) = v45;
    unint64_t v42 = v43;
  }
  else
  {
    unint64_t v42 = v40;
  }
  char v163 = v13;
  unint64_t v164 = v21;
  uint64_t v165 = (uint64_t)v15;
  int v162 = (v13 >> 2) & 1;
  uint64_t v171 = a1;
  if ((a5 & 0x10000) == 0) {
    goto LABEL_111;
  }
  if (*(_DWORD *)a1 != 1685287992)
  {
LABEL_266:
    int v154 = __si_assert_copy_extra_329();
    size_t v155 = v154;
    uint64_t v156 = "";
    if (v154) {
      uint64_t v156 = v154;
    }
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 470, v156);
LABEL_272:
    free(v155);
    goto LABEL_254;
  }
  if ((*(unsigned char *)(a1 + 804) & 0x14) == 0)
  {
LABEL_111:
    v166 = v14;
    if (v42 >= v21) {
      goto LABEL_243;
    }
    int v64 = 0;
    unint64_t v65 = v42;
    uint64_t v66 = 0;
    while (1)
    {
      if (v12 && !*(_DWORD *)(v12 + 4 * v66)) {
        goto LABEL_243;
      }
      unint64_t v69 = v65 + 1;
      unsigned int v70 = *((unsigned __int8 *)v15 + v65);
      if (*((char *)v15 + v65) < 0)
      {
        if (v70 > 0xBF)
        {
          if (v70 > 0xDF)
          {
            if (v70 > 0xEF)
            {
              int v72 = *(unsigned int *)((char *)v15 + v69);
              unint64_t v73 = v65 + 5;
            }
            else
            {
              int v72 = ((v70 & 0xF) << 24) | (*((unsigned __int8 *)v15 + v69) << 16) | (*((unsigned __int8 *)v166 + v65 + 2) << 8) | *((unsigned __int8 *)v166 + v65 + 3);
              unint64_t v73 = v65 + 4;
            }
          }
          else
          {
            int v72 = ((v70 & 0x1F) << 16) | (*((unsigned __int8 *)v15 + v69) << 8) | *((unsigned __int8 *)v166 + v65 + 2);
            unint64_t v73 = v65 + 3;
          }
        }
        else
        {
          int v72 = *((unsigned __int8 *)v15 + v69) | ((v70 & 0x3F) << 8);
          unint64_t v73 = v65 + 2;
        }
        int v71 = v72;
        unint64_t v69 = v73;
      }
      else
      {
        int v71 = *((unsigned __int8 *)v15 + v65);
      }
      uint64_t v75 = (unsigned int *)*a3;
      unint64_t v178 = v69;
      if (!v71) {
        goto LABEL_243;
      }
      uint64_t v76 = (unsigned int **)a3;
      unsigned int v77 = v71 + v64;
      if (!(v71 + v64))
      {
LABEL_245:
        uint64_t v144 = __si_assert_copy_extra_1921(0);
        uint64_t v145 = v144;
        uint64_t v146 = "";
        if (v144) {
          uint64_t v146 = v144;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.c", 1806, "field_id!=0", v146);
        free(v145);
        if (__valid_fs(-1)) {
          goto LABEL_254;
        }
        uint64_t v147 = 3072;
LABEL_256:
        *(_DWORD *)uint64_t v147 = -559038737;
        abort();
      }
      v64 += v71;
      LOBYTE(v176) = 0;
      __int16 field_tags_for_id_locked = db2_get_field_tags_for_id_locked(a1, v77, (char *)&v176);
      if ((_BYTE)v176) {
        goto LABEL_175;
      }
      if (*(_DWORD *)a1 != 1685287992) {
        goto LABEL_266;
      }
      __int16 v79 = field_tags_for_id_locked;
      if ((*(unsigned char *)(a1 + 804) & 0x14) != 0)
      {
        int v80 = *(_DWORD **)(a1 + 880);
        if (v80)
        {
          int v81 = v80[54];
          if (v81 == 1684300900)
          {
            if (v80[1144]) {
              goto LABEL_175;
            }
          }
          else if (v81 == 842150450)
          {
            if (v80[366]) {
              goto LABEL_175;
            }
          }
          else if (v81 == -270471200 && v80[116])
          {
LABEL_175:
            a3 = (void **)v76;
            goto LABEL_243;
          }
        }
      }
      int v82 = field_tags_for_id_locked;
      if (!a4)
      {
        uint64_t v85 = v66;
        goto LABEL_153;
      }
      if (!*(_DWORD *)(a4 + 4 * v66)) {
        goto LABEL_159;
      }
      unsigned int v83 = *(_DWORD *)(a4 + 4 * v66);
      uint64_t v84 = v66;
      while (1)
      {
        if (v83 == v77)
        {
          uint64_t v85 = v84 + 1;
LABEL_153:
          uint64_t v86 = v75;
          unsigned int v87 = v75[2];
          uint64_t v88 = v75[3];
          size_t v89 = (v88 + 13);
          v86[3] = v89;
          if (v89 >= v87)
          {
            size_t v90 = 2 * v87;
            do
            {
              size_t v91 = v90;
              v90 *= 2;
            }
            while (v91 <= v89);
            if (a6) {
              long long v92 = (unsigned int *)(*(uint64_t (**)(void))(a6 + 16))();
            }
            else {
              long long v92 = (unsigned int *)malloc_type_realloc(v86, v91, 0x2F16373EuLL);
            }
            v92[2] = v91;
            *uint64_t v76 = v92;
            uint64_t v86 = v92;
          }
          int v93 = (char *)v86 + v88;
          *((_DWORD *)v93 + 1) = v77 & 0xFFFFF;
          *((_WORD *)v93 + 1) = 0;
          v93[12] = 0;
          long long v94 = (char *)v86 + v88;
          unsigned int v95 = (2 * HIBYTE(v79)) & 8 | (32 * ((HIBYTE(v79) >> 1) & 1)) & 0xFFFFFC7F | (((HIBYTE(v79) >> 3) & 1) << 8) & 0xFFFFFDFF | ((HIBYTE(v79) & 1) << 7) | (((HIBYTE(v79) >> 6) & 1) << 9);
          __int16 v96 = v95;
          if ((v79 & 0x4F00) != 0) {
            *((_WORD *)v94 + 1) = v95;
          }
          a3 = (void **)v76;
          if ((v163 & 4) != 0)
          {
            if ((v79 & 0x2000) != 0) {
              __int16 v97 = 12288;
            }
            else {
              __int16 v97 = 4096;
            }
            __int16 v98 = v95 | v97;
            *((_WORD *)v94 + 1) = v98;
            if (v82 < 0)
            {
              __int16 v74 = v98 | 0x4000;
LABEL_172:
              *((_WORD *)v94 + 1) = v74;
            }
          }
          else
          {
            if ((v79 & 0x2000) != 0)
            {
              __int16 v99 = v95 | 0x800;
              *((_WORD *)v94 + 1) = v99;
              __int16 v96 = v99;
            }
            if (v82 < 0)
            {
              *((_WORD *)v94 + 1) = v96 | 0x1000;
              if ((v82 & 0xFFFF80FF) == 0xFFFF800E)
              {
                __int16 v74 = v96 | 0x5000;
                goto LABEL_172;
              }
            }
          }
          uint64_t v15 = (unsigned int *)v165;
          inflateDBFData(v171, v76, v88, v79, BYTE1(v82), &v178, v165, v164, a5, a6);
          unint64_t v67 = v178;
          uint64_t v68 = v85;
          a1 = v171;
          uint64_t v12 = a4;
          goto LABEL_115;
        }
        if (v83 > v77) {
          break;
        }
        unsigned int v83 = *(_DWORD *)(a4 + 4 + 4 * v84);
        uint64_t v66 = ++v84;
        if (!v83) {
          goto LABEL_159;
        }
      }
      uint64_t v66 = v84;
LABEL_159:
      uint64_t v68 = v66;
      uint64_t v15 = (unsigned int *)v165;
      skipDBFData(field_tags_for_id_locked, HIBYTE(field_tags_for_id_locked), (uint64_t *)&v178, v165, v162);
      unint64_t v67 = v178;
      if (v178 > v164)
      {
        si_analytics_log_2842("%s:%u: failed assertion '%s' Expected offset %ld to fit in size %ld", "ldb.c", 1844, "*offset <= buffer_size", v178, v164);
        memset(&buf, 0, sizeof(buf));
        int v148 = -2;
        uint64_t v149 = *(void *)(a1 + 848);
        if (v149)
        {
          unsigned int v150 = *(_DWORD *)(v149 + 44);
          if (v150 >= 0xFFFFFFFE) {
            int v148 = -2;
          }
          else {
            int v148 = v150;
          }
        }
        if (fstatat(v148, "CrystalGlow.created", &buf, 0)) {
          uint64_t v147 = 2816;
        }
        else {
LABEL_254:
        }
          uint64_t v147 = 2989;
        goto LABEL_256;
      }
      uint64_t v12 = a4;
      a3 = (void **)v76;
      if (!*(_DWORD *)(a4 + 4 * v66)) {
        goto LABEL_243;
      }
LABEL_115:
      uint64_t v66 = v68;
      unint64_t v65 = v67;
      if (v67 >= v164) {
        goto LABEL_243;
      }
    }
  }
  char v177 = 0;
  int v48 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v49 = setThreadIdAndInfo(-1, (long long *)sSDBExceptionCallbacks, a1, 0x40000000, v48);
  unsigned int v175 = HIDWORD(v49);
  unsigned int v176 = v49;
  unsigned int v173 = v51;
  unsigned int v174 = v50;
  uint64_t v52 = *(void *)&threadData[18 * v49 + 2];
  uint64_t v53 = v52 + 320 * HIDWORD(v49);
  *(unsigned char *)(v53 + 216) = 0;
  int v54 = *(_DWORD *)(v53 + 312);
  uint64_t v55 = *(void (**)(void))(v53 + 224);
  if (v55) {
    v55(*(void *)(v52 + 320 * HIDWORD(v49) + 288));
  }
  unsigned int v172 = v176;
  uint64_t v56 = (uint64_t)v15;
  if (_setjmp((int *)v53))
  {
    uint64_t v57 = (_DWORD *)(v53 + 312);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.st_dev) = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", (uint8_t *)&buf, 2u);
    }
    *uint64_t v57 = v54;
    if (__THREAD_SLOT_KEY)
    {
      uint64_t v58 = pthread_getspecific(__THREAD_SLOT_KEY);
      if (v58) {
        goto LABEL_106;
      }
    }
    else
    {
      makeThreadId();
      uint64_t v58 = pthread_getspecific(__THREAD_SLOT_KEY);
      if (v58)
      {
LABEL_106:
        long long v59 = v58;
        if ((unint64_t)v58 < 0x801) {
          goto LABEL_107;
        }
      }
    }
    makeThreadId();
    long long v59 = pthread_getspecific(__THREAD_SLOT_KEY);
LABEL_107:
    uint64_t v60 = (uint64_t)v59 - 1;
    unsigned int v61 = &threadData[18 * ((uint64_t)v59 - 1)];
    unsigned int v63 = v61[14];
    uint64_t v62 = v61 + 14;
    if (v63 > v173)
    {
      do
        CIOnThreadCleanUpPop(v60);
      while (*v62 > v173);
    }
    dropThreadId(v172, 1, v48);
    CICleanUpReset(v172, v174);
    if (v177) {
      goto LABEL_243;
    }
    goto LABEL_244;
  }
  int v160 = v54;
  int v161 = v48;
  unsigned int v167 = v14;
  uint64_t v100 = a4;
  if (v42 >= v164) {
    goto LABEL_240;
  }
  unint64_t v101 = v42;
  uint64_t v102 = 0;
  int v103 = 0;
  do
  {
    if (v100 && !*(_DWORD *)(v100 + 4 * v102)) {
      break;
    }
    unint64_t v107 = v101 + 1;
    unsigned int v108 = *(unsigned __int8 *)(v56 + v101);
    if (*(char *)(v56 + v101) < 0)
    {
      if (v108 > 0xBF)
      {
        if (v108 > 0xDF)
        {
          if (v108 > 0xEF)
          {
            int v110 = *(_DWORD *)(v56 + v107);
            unint64_t v111 = v101 + 5;
          }
          else
          {
            int v110 = ((v108 & 0xF) << 24) | (*(unsigned __int8 *)(v56 + v107) << 16) | (*((unsigned __int8 *)v167
                                                                                      + v101
                                                                                      + 2) << 8) | *((unsigned __int8 *)v167 + v101 + 3);
            unint64_t v111 = v101 + 4;
          }
        }
        else
        {
          int v110 = ((v108 & 0x1F) << 16) | (*(unsigned __int8 *)(v56 + v107) << 8) | *((unsigned __int8 *)v167 + v101 + 2);
          unint64_t v111 = v101 + 3;
        }
      }
      else
      {
        int v110 = *(unsigned __int8 *)(v56 + v107) | ((v108 & 0x3F) << 8);
        unint64_t v111 = v101 + 2;
      }
      int v109 = v110;
      unint64_t v107 = v111;
    }
    else
    {
      int v109 = *(unsigned __int8 *)(v56 + v101);
    }
    int v113 = (unsigned int *)*a3;
    unint64_t v178 = v107;
    if (!v109) {
      break;
    }
    unsigned int v114 = v109 + v103;
    if (!(v109 + v103)) {
      goto LABEL_245;
    }
    v103 += v109;
    v180[0] = 0;
    __int16 v115 = db2_get_field_tags_for_id_locked(v171, v114, v180);
    if (v180[0]) {
      break;
    }
    if (*(_DWORD *)v171 != 1685287992) {
      goto LABEL_266;
    }
    unsigned __int8 v116 = HIBYTE(v115);
    if ((*(unsigned char *)(v171 + 804) & 0x14) != 0)
    {
      int v117 = *(_DWORD **)(v171 + 880);
      if (v117)
      {
        int v118 = v117[54];
        if (v118 == 1684300900)
        {
          if (v117[1144]) {
            break;
          }
        }
        else if (v118 == 842150450)
        {
          if (v117[366]) {
            break;
          }
        }
        else if (v118 == -270471200 && v117[116])
        {
          break;
        }
      }
    }
    uint64_t v119 = (unsigned int **)a3;
    int v120 = v115;
    unsigned int v121 = v115;
    if (!a4)
    {
LABEL_217:
      uint64_t v124 = v113;
      unsigned int v125 = v113[2];
      uint64_t v126 = v113[3];
      size_t v127 = (v126 + 13);
      v113[3] = v127;
      uint64_t v159 = v102;
      if (v127 >= v125)
      {
        size_t v129 = 2 * v125;
        uint64_t v128 = v171;
        do
        {
          size_t v130 = v129;
          v129 *= 2;
        }
        while (v130 <= v127);
        unsigned int v131 = v115;
        if (a6) {
          uint64_t v132 = (unsigned int *)(*(uint64_t (**)(void))(a6 + 16))();
        }
        else {
          uint64_t v132 = (unsigned int *)malloc_type_realloc(v124, v130, 0x2F16373EuLL);
        }
        v132[2] = v130;
        *uint64_t v119 = v132;
        uint64_t v124 = v132;
        unsigned int v121 = v131;
      }
      else
      {
        uint64_t v128 = v171;
      }
      uint64_t v133 = (char *)v124 + v126;
      *((_DWORD *)v133 + 1) = v114 & 0xFFFFF;
      *((_WORD *)v133 + 1) = 0;
      v133[12] = 0;
      int v134 = (char *)v124 + v126;
      unsigned int v135 = (2 * v116) & 8 | (32 * ((v116 >> 1) & 1)) & 0xFFFFFC7F | (((v116 >> 3) & 1) << 8) & 0xFFFFFDFF | ((v116 & 1) << 7) | (((v116 >> 6) & 1) << 9);
      __int16 v136 = v135;
      if ((v116 & 0x4F) != 0) {
        *((_WORD *)v134 + 1) = v135;
      }
      uint64_t v56 = v165;
      if ((v163 & 4) != 0)
      {
        if ((v116 & 0x20) != 0) {
          __int16 v137 = 12288;
        }
        else {
          __int16 v137 = 4096;
        }
        __int16 v138 = v135 | v137;
        *((_WORD *)v134 + 1) = v138;
        if ((v120 & 0x80000000) == 0) {
          goto LABEL_179;
        }
        __int16 v112 = v138 | 0x4000;
      }
      else
      {
        if ((v116 & 0x20) != 0)
        {
          __int16 v139 = v135 | 0x800;
          *((_WORD *)v134 + 1) = v139;
          __int16 v136 = v139;
        }
        if ((v120 & 0x80000000) == 0) {
          goto LABEL_179;
        }
        *((_WORD *)v134 + 1) = v136 | 0x1000;
        if ((v120 & 0xFFFF80FF) != 0xFFFF800E) {
          goto LABEL_179;
        }
        __int16 v112 = v136 | 0x5000;
      }
      *((_WORD *)v134 + 1) = v112;
LABEL_179:
      gid_t v104 = BYTE1(v120);
      a3 = (void **)v119;
      inflateDBFData(v128, v119, v126, v121, v104, &v178, v165, v164, a5, a6);
      unint64_t v105 = v178;
      uint64_t v106 = v159;
      uint64_t v100 = a4;
      goto LABEL_180;
    }
    if (!*(_DWORD *)(a4 + 4 * v102)) {
      goto LABEL_224;
    }
    unsigned int v122 = *(_DWORD *)(a4 + 4 * v102);
    uint64_t v123 = v102;
    while (1)
    {
      if (v122 == v114)
      {
        uint64_t v102 = v123 + 1;
        goto LABEL_217;
      }
      if (v122 > v114) {
        break;
      }
      unsigned int v122 = *(_DWORD *)(a4 + 4 + 4 * v123);
      uint64_t v102 = ++v123;
      if (!v122) {
        goto LABEL_224;
      }
    }
    uint64_t v102 = v123;
LABEL_224:
    uint64_t v106 = v102;
    uint64_t v56 = v165;
    skipDBFData(v115, HIBYTE(v115), (uint64_t *)&v178, v165, v162);
    unint64_t v105 = v178;
    if (v178 > v164)
    {
      si_analytics_log_2842("%s:%u: failed assertion '%s' Expected offset %ld to fit in size %ld", "ldb.c", 1844, "*offset <= buffer_size", v178, v164);
      memset(&buf, 0, sizeof(buf));
      int v151 = -2;
      uint64_t v152 = *(void *)(v171 + 848);
      if (v152)
      {
        unsigned int v153 = *(_DWORD *)(v152 + 44);
        if (v153 >= 0xFFFFFFFE) {
          int v151 = -2;
        }
        else {
          int v151 = v153;
        }
      }
      if (!fstatat(v151, "CrystalGlow.created", &buf, 0))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xB00] = -559038737;
      abort();
    }
    uint64_t v100 = a4;
    a3 = (void **)v119;
    if (!*(_DWORD *)(a4 + 4 * v102)) {
      break;
    }
LABEL_180:
    uint64_t v102 = v106;
    unint64_t v101 = v105;
  }
  while (v105 < v164);
LABEL_240:
  char v177 = 1;
  uint64_t v140 = *(void *)&threadData[18 * v172 + 2];
  uint64_t v141 = v140 + 320 * v175;
  *(_DWORD *)(v141 + 312) = v160;
  v142 = *(void (**)(void))(v141 + 232);
  if (v142) {
    v142(*(void *)(v140 + 320 * v175 + 288));
  }
  dropThreadId(v172, 0, v161);
  if (v177)
  {
LABEL_243:
    uint64_t result = 0;
    *((_DWORD *)*a3 + 10) |= 0x100u;
    return result;
  }
LABEL_244:
  free(*a3);
  *a3 = 0;
  return 9;
}

uint64_t db2_get_field_tags_for_id_locked(uint64_t a1, int a2, char *a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a2 & 0x7FFFFFFF;
  if (v4 <= 0x7FFFFFFD)
  {
    uint64_t v6 = *(void *)(a1 + 880);
    if ((*(unsigned char *)(a1 + 804) & 0x14) != 0)
    {
      uint64_t v24 = 0;
      uint64_t data_locked = data_map_get_data_locked(v6, a2 & 0x7FFFFFFF, &v24);
      if (!data_locked)
      {
        unint64_t v8 = data_map_count(v6);
        if (v8 < v4)
        {
          unint64_t v23 = v8;
          int v15 = *__error();
          char v16 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            int v19 = *(_DWORD *)(a1 + 4);
            int v20 = data_map_valid((_DWORD *)v6);
            *(_DWORD *)stat buf = 136316930;
            uint64_t v26 = "_get_string_and_length_for_id";
            __int16 v27 = 1024;
            int v28 = 571;
            unint64_t v21 = "y";
            if (!v20) {
              unint64_t v21 = "n";
            }
            __int16 v29 = 2048;
            unint64_t v30 = v4;
            __int16 v31 = 2048;
            unint64_t v32 = v23;
            __int16 v33 = 1024;
            int v34 = 0;
            __int16 v35 = 2080;
            uint64_t v36 = a1 + 324;
            __int16 v37 = 1024;
            int v38 = v19;
            __int16 v39 = 2080;
            unint64_t v40 = v21;
            _os_log_error_impl(&dword_1BD672000, v16, OS_LOG_TYPE_ERROR, "%s:%d: Invalid string_id:%lu, map_count:%lu, index:%d, dst->name:%s, dst->flags:0x%x valid:%s", buf, 0x46u);
          }
          *__error() = v15;
          if ((*(unsigned char *)(a1 + 4) & 0x20) != 0)
          {
            int v17 = *__error();
            unint64_t v18 = _SILogForLogForCategory(7);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            {
              int v22 = *(_DWORD *)(a1 + 4);
              *(_DWORD *)stat buf = 136315906;
              uint64_t v26 = "_get_string_and_length_for_id";
              __int16 v27 = 1024;
              int v28 = 573;
              __int16 v29 = 2080;
              unint64_t v30 = a1 + 324;
              __int16 v31 = 1024;
              LODWORD(v32) = v22;
              _os_log_error_impl(&dword_1BD672000, v18, OS_LOG_TYPE_ERROR, "%s:%d: marking invalid %s flags:0x%x", buf, 0x22u);
            }
            *__error() = v17;
            *(_DWORD *)(a1 + 4) |= 0x40u;
          }
        }
        goto LABEL_5;
      }
    }
    else
    {
      if (*(_DWORD *)(v6 + 56) <= v4
        || (uint64_t v12 = *(void *)(*(void *)(v6 + 32) + 8 * v4)) == 0)
      {
        int v14 = *(_DWORD *)(a1 + 4);
        if ((v14 & 0x20) != 0)
        {
          int v9 = 0;
          int v10 = 0;
          *(_DWORD *)(a1 + 4) = v14 | 0x40;
          char v11 = 1;
          goto LABEL_10;
        }
        if (SIIsAppleInternal_onceToken == -1)
        {
          int v9 = 0;
          int v10 = 0;
          char v11 = 1;
          goto LABEL_10;
        }
        dispatch_once(&SIIsAppleInternal_onceToken, &__block_literal_global_5267);
        goto LABEL_5;
      }
      uint64_t data_locked = v12 + 6;
    }
    char v11 = 0;
    int v10 = *(unsigned __int8 *)(data_locked - 2);
    int v9 = *(unsigned __int8 *)(data_locked - 1);
    goto LABEL_10;
  }
LABEL_5:
  int v9 = 0;
  int v10 = 0;
  char v11 = 1;
LABEL_10:
  *a3 = v11;
  return v10 | (v9 << 8);
}

uint64_t data_map_get_data_locked(uint64_t result, unint64_t key, void *a3)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v5 = result;
    int v6 = *(_DWORD *)(result + 216);
    if (v6 != -270471200)
    {
      if (v6 == 1684300900)
      {
        if (*(void *)(result + 4504) > key)
        {
          uint64_t v29 = *(void *)(result + 4448);
          if (v29)
          {
            unint64_t v30 = *(void *)(v29 + 16 * key);
            if (v30 != 1)
            {
              *(void *)int v72 = 0;
              *(void *)&v72[8] = 0;
              LOBYTE(v69) = 0;
              unint64_t v31 = *(void *)(result + 288);
              if (v31 <= v30)
              {
                long long v103 = 0u;
                long long v104 = 0u;
                long long v101 = 0u;
                long long v102 = 0u;
                long long v99 = 0u;
                long long v100 = 0u;
                long long v97 = 0u;
                long long v98 = 0u;
                long long v95 = 0u;
                long long v96 = 0u;
                long long v93 = 0u;
                long long v94 = 0u;
                memset(buf, 0, sizeof(buf));
                int v12 = *__error();
                unint64_t v32 = _SILogForLogForCategory(0);
                if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v58 = *(void *)(v5 + 288);
                  long long v59 = fd_name(*(void *)(v5 + 240), (char *)buf, 0x100uLL);
                  *(_DWORD *)__s = 136316418;
                  *(void *)&__s[4] = "_data_map64_get_data_entry";
                  *(_WORD *)&__s[12] = 1024;
                  *(_DWORD *)&__s[14] = 379;
                  *(_WORD *)&__s[18] = 2048;
                  *(void *)&__s[20] = v30;
                  *(_WORD *)&__s[28] = 2048;
                  *(void *)&__s[30] = v58;
                  *(_WORD *)&__s[38] = 2048;
                  *(void *)&__s[40] = v5;
                  *(_WORD *)&__s[48] = 2080;
                  *(void *)&__s[50] = v59;
                  char v16 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
                  goto LABEL_61;
                }
              }
              else
              {
                data_entry_restore_64(result + 272, v30, v31, (unsigned int *)v72, &v69);
                if (!(_BYTE)v69)
                {
                  if (a3) {
                    *a3 = (*(_DWORD *)v72 - *(_DWORD *)(v5 + 220));
                  }
                  if (*(void *)(v5 + 4560))
                  {
                    os_unfair_lock_lock((os_unfair_lock_t)(v5 + 4552));
                    unint64_t v65 = *(void **)(v5 + 4560);
                    if (v65) {
                      bit_vector_set_5929(v65, key);
                    }
                    os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 4552));
                  }
                  uint64_t v49 = *(void *)&v72[8];
                  uint64_t v50 = *(unsigned int *)(v5 + 220);
                  return v49 + v50;
                }
                long long v103 = 0u;
                long long v104 = 0u;
                long long v101 = 0u;
                long long v102 = 0u;
                long long v99 = 0u;
                long long v100 = 0u;
                long long v97 = 0u;
                long long v98 = 0u;
                long long v95 = 0u;
                long long v96 = 0u;
                long long v93 = 0u;
                long long v94 = 0u;
                memset(buf, 0, sizeof(buf));
                int v12 = *__error();
                unint64_t v32 = _SILogForLogForCategory(0);
                if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
                {
                  __int16 v33 = fd_name(*(void *)(v5 + 240), (char *)buf, 0x100uLL);
                  uint64_t v34 = *(void *)(v5 + 288);
                  *(_DWORD *)__s = 136316418;
                  *(void *)&__s[4] = "_data_map64_get_data_entry";
                  *(_WORD *)&__s[12] = 1024;
                  *(_DWORD *)&__s[14] = 375;
                  *(_WORD *)&__s[18] = 2080;
                  *(void *)&__s[20] = v33;
                  *(_WORD *)&__s[28] = 2048;
                  *(void *)&__s[30] = v30;
                  *(_WORD *)&__s[38] = 2048;
                  *(void *)&__s[40] = v34;
                  *(_WORD *)&__s[48] = 2048;
                  *(void *)&__s[50] = *(unsigned int *)v72;
                  char v16 = "%s:%d: data_entry_restore_64 failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx";
LABEL_61:
                  int v17 = __s;
                  unint64_t v18 = v32;
                  uint32_t v19 = 58;
LABEL_62:
                  _os_log_error_impl(&dword_1BD672000, v18, OS_LOG_TYPE_ERROR, v16, (uint8_t *)v17, v19);
                }
              }
LABEL_33:
              unint64_t v42 = __error();
              uint64_t result = 0;
              int *v42 = v12;
              return result;
            }
          }
          return 0;
        }
        long long v103 = 0u;
        long long v104 = 0u;
        long long v101 = 0u;
        long long v102 = 0u;
        long long v99 = 0u;
        long long v100 = 0u;
        long long v97 = 0u;
        long long v98 = 0u;
        long long v95 = 0u;
        long long v96 = 0u;
        long long v93 = 0u;
        long long v94 = 0u;
        memset(buf, 0, sizeof(buf));
        int v21 = *__error();
        int v38 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          uint64_t v54 = *(void *)(v5 + 4504);
          uint64_t v55 = fd_name(*(void *)(v5 + 240), (char *)buf, 0x100uLL);
          *(_DWORD *)__s = 136316418;
          *(void *)&__s[4] = "_data_map64_get_offset_entry";
          *(_WORD *)&__s[12] = 1024;
          *(_DWORD *)&__s[14] = 362;
          *(_WORD *)&__s[18] = 2048;
          *(void *)&__s[20] = key;
          *(_WORD *)&__s[28] = 2048;
          *(void *)&__s[30] = v54;
          *(_WORD *)&__s[38] = 2048;
          *(void *)&__s[40] = v5;
          *(_WORD *)&__s[48] = 2080;
          *(void *)&__s[50] = v55;
          uint64_t v26 = "%s:%d: invalid data id %lld max %lld %p %s";
          __int16 v27 = v38;
          uint32_t v28 = 58;
          goto LABEL_56;
        }
        goto LABEL_29;
      }
      if (v6 == 842150450)
      {
        if (*(_DWORD *)(result + 1388) > key)
        {
          uint64_t v7 = *(void *)(result + 1344);
          if (v7)
          {
            uint64_t v8 = *(unsigned int *)(v7 + 4 * key);
            if (v8 != 1)
            {
              uint64_t v69 = 0;
              uint64_t v70 = 0;
              char v71 = 0;
              unsigned int v9 = *(_DWORD *)(result + 1320);
              if (v9 > v8)
              {
                data_entry_restore_32(*(void *)(result + 1312), v8, v9, (uint64_t)&v69, &v71);
                if (v71)
                {
                  uint64_t v10 = 0;
                  uint64_t v91 = 0;
                  long long v89 = 0u;
                  long long v90 = 0u;
                  long long v87 = 0u;
                  long long v88 = 0u;
                  long long v85 = 0u;
                  long long v86 = 0u;
                  long long v84 = 0u;
                  memset(__s, 0, sizeof(__s));
                  do
                  {
                    if (v8 + v10 >= (unint64_t)*(unsigned int *)(v5 + 1320)) {
                      break;
                    }
                    size_t v11 = strlen(__s);
                    sprintf(&__s[v11], "%d ", *(unsigned __int8 *)(*(void *)(v5 + 1312) + v8 + v10++));
                  }
                  while (v10 != 5);
                  long long v103 = 0u;
                  long long v104 = 0u;
                  long long v101 = 0u;
                  long long v102 = 0u;
                  long long v99 = 0u;
                  long long v100 = 0u;
                  long long v97 = 0u;
                  long long v98 = 0u;
                  long long v95 = 0u;
                  long long v96 = 0u;
                  long long v93 = 0u;
                  long long v94 = 0u;
                  memset(buf, 0, sizeof(buf));
                  int v12 = *__error();
                  unsigned int v13 = _SILogForLogForCategory(0);
                  if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_33;
                  }
                  int v14 = fd_name(*(void *)(v5 + 1264), (char *)buf, 0x100uLL);
                  uint64_t v15 = *(unsigned int *)(v5 + 1320);
                  *(_DWORD *)int v72 = 136316674;
                  *(void *)&v72[4] = "_data_map32_get_data_entry";
                  *(_WORD *)&v72[12] = 1024;
                  *(_DWORD *)&v72[14] = 444;
                  __int16 v73 = 2080;
                  __int16 v74 = v14;
                  __int16 v75 = 2048;
                  uint64_t v76 = v8;
                  __int16 v77 = 2048;
                  uint64_t v78 = v15;
                  __int16 v79 = 2048;
                  uint64_t v80 = v69;
                  __int16 v81 = 2080;
                  int v82 = __s;
                  char v16 = "%s:%d: data_entry_restore_32 failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
                  int v17 = v72;
                  unint64_t v18 = v13;
                  uint32_t v19 = 68;
                  goto LABEL_62;
                }
                if (a3) {
                  *a3 = (v69 - *(_DWORD *)(v5 + 1244));
                }
                if (*(void *)(v5 + 1448))
                {
                  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 1444));
                  int v64 = *(void **)(v5 + 1448);
                  if (v64) {
                    bit_vector_set_10635(v64, key);
                  }
                  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 1444));
                }
                uint64_t v49 = v70;
                uint64_t v50 = *(unsigned int *)(v5 + 1244);
                return v49 + v50;
              }
              long long v103 = 0u;
              long long v104 = 0u;
              long long v101 = 0u;
              long long v102 = 0u;
              long long v99 = 0u;
              long long v100 = 0u;
              long long v97 = 0u;
              long long v98 = 0u;
              long long v95 = 0u;
              long long v96 = 0u;
              long long v93 = 0u;
              long long v94 = 0u;
              memset(buf, 0, sizeof(buf));
              int v12 = *__error();
              unint64_t v32 = _SILogForLogForCategory(0);
              if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
              {
                uint64_t v40 = *(unsigned int *)(v5 + 1320);
                uint64_t v41 = fd_name(*(void *)(v5 + 1264), (char *)buf, 0x100uLL);
                *(_DWORD *)__s = 136316418;
                *(void *)&__s[4] = "_data_map32_get_data_entry";
                *(_WORD *)&__s[12] = 1024;
                *(_DWORD *)&__s[14] = 448;
                *(_WORD *)&__s[18] = 2048;
                *(void *)&__s[20] = v8;
                *(_WORD *)&__s[28] = 2048;
                *(void *)&__s[30] = v40;
                *(_WORD *)&__s[38] = 2048;
                *(void *)&__s[40] = v5;
                *(_WORD *)&__s[48] = 2080;
                *(void *)&__s[50] = v41;
                char v16 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
                goto LABEL_61;
              }
              goto LABEL_33;
            }
          }
          return 0;
        }
        long long v103 = 0u;
        long long v104 = 0u;
        long long v101 = 0u;
        long long v102 = 0u;
        long long v99 = 0u;
        long long v100 = 0u;
        long long v97 = 0u;
        long long v98 = 0u;
        long long v95 = 0u;
        long long v96 = 0u;
        long long v93 = 0u;
        long long v94 = 0u;
        memset(buf, 0, sizeof(buf));
        int v21 = *__error();
        __int16 v35 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          int v36 = *(_DWORD *)(v5 + 1388);
          __int16 v37 = fd_name(*(void *)(v5 + 1264), (char *)buf, 0x100uLL);
          *(_DWORD *)__s = 136316418;
          *(void *)&__s[4] = "_data_map32_get_offset_entry";
          *(_WORD *)&__s[12] = 1024;
          *(_DWORD *)&__s[14] = 424;
          *(_WORD *)&__s[18] = 1024;
          *(_DWORD *)&__s[20] = key;
          *(_WORD *)&__s[24] = 1024;
          *(_DWORD *)&__s[26] = v36;
          *(_WORD *)&__s[30] = 2048;
          *(void *)&__s[32] = v5;
          *(_WORD *)&__s[40] = 2080;
          *(void *)&__s[42] = v37;
          uint64_t v26 = "%s:%d: invalid data id %d max %d %p %s";
          __int16 v27 = v35;
          uint32_t v28 = 50;
          goto LABEL_56;
        }
        goto LABEL_29;
      }
      return 0;
    }
    if (*(void *)(result + 376) <= key || (uint64_t v20 = *(void *)(result + 288), (unint64_t)(v20 + 1) <= 1))
    {
      long long v103 = 0u;
      long long v104 = 0u;
      long long v101 = 0u;
      long long v102 = 0u;
      long long v99 = 0u;
      long long v100 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      memset(buf, 0, sizeof(buf));
      int v21 = *__error();
      int v22 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = *(void *)(v5 + 376);
        uint64_t v24 = *(void *)(v5 + 288);
        int v25 = fd_name(*(void *)(v5 + 240), (char *)buf, 0x100uLL);
        *(_DWORD *)__s = 136316674;
        *(void *)&__s[4] = "_data_map_ext_get_offset_entry";
        *(_WORD *)&__s[12] = 1024;
        *(_DWORD *)&__s[14] = 416;
        *(_WORD *)&__s[18] = 2048;
        *(void *)&__s[20] = key;
        *(_WORD *)&__s[28] = 2048;
        *(void *)&__s[30] = v23;
        *(_WORD *)&__s[38] = 2048;
        *(void *)&__s[40] = v5;
        *(_WORD *)&__s[48] = 2048;
        *(void *)&__s[50] = v24;
        *(_WORD *)&__s[58] = 2080;
        *(void *)&__s[60] = v25;
        uint64_t v26 = "%s:%d: invalid data id %lld max %lld %p map: %p %s";
        __int16 v27 = v22;
        uint32_t v28 = 68;
LABEL_56:
        _os_log_error_impl(&dword_1BD672000, v27, OS_LOG_TYPE_ERROR, v26, (uint8_t *)__s, v28);
      }
LABEL_29:
      __int16 v39 = __error();
      uint64_t result = 0;
      *__int16 v39 = v21;
      return result;
    }
    uint64_t v43 = v20 + 24 * key;
    unint64_t v44 = *(void *)v43;
    if (*(void *)v43 == -2) {
      return 0;
    }
    *(void *)int v72 = 0;
    *(void *)&v72[8] = 0;
    if (v44 == -1)
    {
      CFDictionaryRef v51 = *(const __CFDictionary **)(result + 480);
      if (!v51)
      {
        long long v103 = 0u;
        long long v104 = 0u;
        long long v101 = 0u;
        long long v102 = 0u;
        long long v99 = 0u;
        long long v100 = 0u;
        long long v97 = 0u;
        long long v98 = 0u;
        long long v95 = 0u;
        long long v96 = 0u;
        long long v93 = 0u;
        long long v94 = 0u;
        memset(buf, 0, sizeof(buf));
        int v56 = *__error();
        uint64_t v57 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
        {
          uint64_t v62 = fd_name(*(void *)(v5 + 240), (char *)buf, 0x100uLL);
          *(_DWORD *)__s = 136316162;
          *(void *)&__s[4] = "_data_map_ext_get_data_entry";
          *(_WORD *)&__s[12] = 1024;
          *(_DWORD *)&__s[14] = 456;
          *(_WORD *)&__s[18] = 2048;
          *(void *)&__s[20] = -1;
          *(_WORD *)&__s[28] = 2048;
          *(void *)&__s[30] = v5;
          *(_WORD *)&__s[38] = 2080;
          *(void *)&__s[40] = v62;
          _os_log_error_impl(&dword_1BD672000, v57, OS_LOG_TYPE_ERROR, "%s:%d: invalid data offset 0x%lx %p %s", (uint8_t *)__s, 0x30u);
        }
        *__error() = v56;
        fd_name(*(void *)(v5 + 240), (char *)buf, 0x100uLL);
        si_analytics_log_2351("(2)invalid data offset 0x%lx %p %s");
        return 0;
      }
      CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v51, (const void *)key);
      if (!Value)
      {
        long long v103 = 0u;
        long long v104 = 0u;
        long long v101 = 0u;
        long long v102 = 0u;
        long long v99 = 0u;
        long long v100 = 0u;
        long long v97 = 0u;
        long long v98 = 0u;
        long long v95 = 0u;
        long long v96 = 0u;
        long long v93 = 0u;
        long long v94 = 0u;
        memset(buf, 0, sizeof(buf));
        int v60 = *__error();
        unsigned int v61 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          unsigned int v63 = fd_name(*(void *)(v5 + 240), (char *)buf, 0x100uLL);
          *(_DWORD *)__s = 136316162;
          *(void *)&__s[4] = "_data_map_ext_get_data_entry";
          *(_WORD *)&__s[12] = 1024;
          *(_DWORD *)&__s[14] = 450;
          *(_WORD *)&__s[18] = 2048;
          *(void *)&__s[20] = -1;
          *(_WORD *)&__s[28] = 2048;
          *(void *)&__s[30] = v5;
          *(_WORD *)&__s[38] = 2080;
          *(void *)&__s[40] = v63;
          _os_log_error_impl(&dword_1BD672000, v61, OS_LOG_TYPE_ERROR, "%s:%d: invalid data offset 0x%lx %p %s", (uint8_t *)__s, 0x30u);
        }
        *__error() = v60;
        fd_name(*(void *)(v5 + 240), (char *)buf, 0x100uLL);
        si_analytics_log_2351("(1)invalid data offset 0x%lx %p %s");
        return 0;
      }
      CFDataRef v53 = Value;
      unsigned int v48 = CFDataGetLength(Value) - *(_DWORD *)(v5 + 220);
      *(_DWORD *)int v72 = v48;
      *(void *)&v72[8] = &CFDataGetBytePtr(v53)[*(unsigned int *)(v5 + 220)];
      CFDataGetBytePtr(v53);
      __memcpy_chk();
    }
    else
    {
      int v46 = *(_DWORD *)(v43 + 8);
      unsigned int v45 = *(_DWORD *)(v43 + 12);
      uint64_t result = *(void *)(result + 472);
      *(_DWORD *)__s = 0;
      if (!result) {
        return result;
      }
      uint64_t contentindex_for_id = si_get_contentindex_for_id(result, v46);
      LODWORD(v69) = 0;
      if (!contentindex_for_id)
      {
        if (data_entry_restore_ext__COUNT_ < 1)
        {
          if (++data_entry_restore_ext__COUNT2_ != 100) {
            return 0;
          }
          data_entry_restore_ext__COUNT2_ = 0;
        }
        else
        {
          --data_entry_restore_ext__COUNT_;
        }
        int v67 = *__error();
        uint64_t v68 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)stat buf = 136316418;
          *(void *)&uint8_t buf[4] = "data_entry_restore_ext";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 395;
          *(_WORD *)&buf[18] = 2048;
          *(void *)&buf[20] = key;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v46;
          *(_WORD *)&buf[34] = 2048;
          *(void *)&buf[36] = v44;
          *(_WORD *)&buf[44] = 1024;
          *(_DWORD *)&buf[46] = v45;
          _os_log_error_impl(&dword_1BD672000, v68, OS_LOG_TYPE_ERROR, "%s:%d: data id %lld invalid indexId %u offset 0x%llx meta 0x%x", buf, 0x32u);
        }
        *__error() = v67;
        return 0;
      }
      *(void *)&v72[8] = ContentIndexGetDataForId(*(void *)(contentindex_for_id + 4912), v44, v45, (uint64_t)&v69, (uint64_t)__s);
      unsigned int v48 = *(_DWORD *)__s;
      *(_DWORD *)int v72 = *(_DWORD *)__s;
      *(_DWORD *)&v72[4] = v69;
    }
    if (a3) {
      *a3 = v48;
    }
    if (*(void *)(v5 + 448))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(v5 + 440));
      uint64_t v66 = *(void **)(v5 + 448);
      if (v66) {
        bit_vector_set_5929(v66, key);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 440));
    }
    return *(void *)&v72[8];
  }
  return result;
}

uint64_t data_entry_restore_32(uint64_t result, unsigned int a2, unsigned int a3, uint64_t a4, unsigned char *a5)
{
  uint64_t v5 = a2;
  unint64_t v6 = a2 + 1;
  unsigned int v7 = *(unsigned __int8 *)(result + a2);
  if ((*(char *)(result + a2) & 0x80000000) == 0)
  {
    uint64_t v5 = a2 + 1;
    goto LABEL_16;
  }
  if (v6 >= a3) {
    goto LABEL_15;
  }
  unint64_t v8 = a2 + 2;
  int v9 = *(char *)(result + v6);
  int v10 = *(unsigned __int8 *)(result + v6);
  if ((v9 & 0x80000000) == 0)
  {
    unsigned int v7 = v7 & 0x7F | (v10 << 7);
    uint64_t v5 = a2 + 2;
    goto LABEL_16;
  }
  if (v8 >= a3) {
    goto LABEL_15;
  }
  unint64_t v11 = a2 + 3;
  int v12 = *(char *)(result + v8);
  int v13 = *(unsigned __int8 *)(result + v8);
  if ((v12 & 0x80000000) == 0)
  {
    uint64_t v5 = a2 + 3;
    unsigned int v7 = ((v10 & 0x7F) << 7) | (v13 << 14) | v7 & 0x7F;
    goto LABEL_16;
  }
  if (v11 >= a3) {
    goto LABEL_15;
  }
  unint64_t v14 = a2 + 4;
  int v15 = *(char *)(result + v11);
  int v16 = *(unsigned __int8 *)(result + v11);
  if ((v15 & 0x80000000) == 0)
  {
    uint64_t v5 = a2 + 4;
    unsigned int v7 = ((v13 & 0x7F) << 14) | (v16 << 21) | ((v10 & 0x7F) << 7) | v7 & 0x7F;
    goto LABEL_16;
  }
  if (v14 >= a3)
  {
LABEL_15:
    unsigned int v7 = 0;
    *a5 = 1;
  }
  else
  {
    int v17 = *(char *)(result + v14);
    if (v17 < 0)
    {
      if (__valid_fs(-1))
      {
        unint64_t v18 = __si_assert_copy_extra_329();
        si_analytics_log_5872((uint64_t)v18, v19, v20, v21, v22, v23, v24, v25, (char)"VIntUtils.h");
        free(v18);
        uint64_t v26 = 2816;
      }
      else
      {
        uint64_t v26 = 3072;
      }
      *(_DWORD *)uint64_t v26 = -559038737;
      abort();
    }
    uint64_t v5 = a2 + 5;
    unsigned int v7 = ((v16 & 0x7F) << 21) | (v17 << 28) | ((v13 & 0x7F) << 14) | ((v10 & 0x7F) << 7) | v7 & 0x7F;
  }
LABEL_16:
  *(_DWORD *)a4 = v7;
  if (v5 + (unint64_t)v7 <= a3) {
    *(void *)(a4 + 8) = result + v5;
  }
  else {
    *a5 = 1;
  }
  return result;
}

void inflateDBFData(uint64_t a1, unsigned int **a2, uint64_t a3, unsigned int a4, gid_t a5, void *a6, uint64_t a7, unint64_t a8, __int16 a9, uint64_t a10)
{
  uint64_t v10 = a7;
  unint64_t v11 = a6;
  uint64_t v17 = a10;
  uint64_t v223 = *MEMORY[0x1E4F143B8];
  unint64_t v18 = *a2;
  uint64_t v19 = (char *)*a2 + a3;
  *((_DWORD *)v19 + 2) = 0;
  if (!a4)
  {
    LOWORD(v20) = *((_WORD *)v19 + 1) | 0x400;
    *((_WORD *)v19 + 1) = v20;
    __int16 v28 = 1;
    goto LABEL_37;
  }
  if (a4 == 15)
  {
    __int16 v29 = *((_WORD *)v19 + 1);
    *((_WORD *)v19 + 1) = v29 | 0x10;
    *(_WORD *)uint64_t v19 = 11;
    if ((a5 & 3) == 2)
    {
      if ((a9 & 0x8000) == 0)
      {
        uint64_t v30 = *a6;
        unint64_t v31 = *a6 + 1;
        unsigned int v32 = *(unsigned __int8 *)(a7 + *a6);
        if (*(char *)(a7 + *a6) < 0)
        {
          if (v32 > 0xBF)
          {
            if (v32 > 0xDF)
            {
              if (v32 > 0xEF)
              {
                unsigned int v32 = *(_DWORD *)(a7 + v31);
                unint64_t v31 = v30 + 5;
              }
              else
              {
                unsigned int v32 = ((v32 & 0xF) << 24) | (*(unsigned __int8 *)(a7 + v31) << 16) | (*(unsigned __int8 *)(v30 + a7 + 2) << 8) | *(unsigned __int8 *)(v30 + a7 + 3);
                unint64_t v31 = v30 + 4;
              }
            }
            else
            {
              unsigned int v32 = ((v32 & 0x1F) << 16) | (*(unsigned __int8 *)(a7 + v31) << 8) | *(unsigned __int8 *)(v30 + a7 + 2);
              unint64_t v31 = v30 + 3;
            }
          }
          else
          {
            int v33 = *(unsigned __int8 *)(a7 + v31) | ((v32 & 0x3F) << 8);
            unint64_t v31 = v30 + 2;
            unsigned int v32 = v33;
          }
        }
        *a6 = v31;
        if (v31 > a8)
        {
          si_analytics_log_2842("%s:%u: failed assertion '%s' Expected offset %ld to fit in size %ld");
          goto LABEL_413;
        }
        uint64_t v127 = a1;
        string_and_length_for_id = (unsigned __int8 *)get_string_and_length_for_id(a1, 3u, v32, 1);
        if (!string_and_length_for_id) {
          goto LABEL_280;
        }
        unsigned int v129 = *string_and_length_for_id;
        if (((char)*string_and_length_for_id & 0x80000000) == 0)
        {
          if (*string_and_length_for_id)
          {
            unint64_t v130 = 1;
            unsigned int v131 = *string_and_length_for_id;
            unsigned int v132 = v131;
            goto LABEL_273;
          }
          goto LABEL_280;
        }
        if (v129 < 0xC0)
        {
          unsigned int v131 = string_and_length_for_id[1] | ((v129 & 0x3F) << 8);
          if (v131)
          {
            unint64_t v130 = 2;
            unsigned int v132 = string_and_length_for_id[1] | ((v129 & 0x3F) << 8);
            goto LABEL_273;
          }
LABEL_280:
          int v148 = *__error();
          uint64_t v149 = _SILogForLogForCategory(7);
          if (!os_log_type_enabled(v149, OS_LOG_TYPE_ERROR)) {
            goto LABEL_281;
          }
          __darwin_time_t v159 = *((unsigned __int16 *)v19 + 1);
          __darwin_time_t v160 = *(int *)(v127 + 4);
          __src.st_dev = 136317442;
          *(void *)&__src.st_mode = "inflateDBFData";
          WORD2(__src.st_ino) = 1024;
          *(_DWORD *)((char *)&__src.st_ino + 6) = 1318;
          HIWORD(__src.st_uid) = 1024;
          __src.st_gid = 3;
          LOWORD(__src.st_rdev) = 2048;
          *(void *)((char *)&__src.st_rdev + 2) = v32;
          WORD1(__src.st_atimespec.tv_sec) = 1024;
          HIDWORD(__src.st_atimespec.tv_sec) = a5;
          __src.st_atimespec.tv_nsec = 0x8000000000F0400;
          __src.st_mtimespec.tv_sec = v159;
          LOWORD(__src.st_mtimespec.tv_nsec) = 2048;
          *(uint64_t *)((char *)&__src.st_mtimespec.tv_nsec + 2) = a5;
          WORD1(__src.st_ctimespec.tv_sec) = 2048;
          *(__darwin_time_t *)((char *)&__src.st_ctimespec.tv_sec + 4) = v160;
          WORD2(__src.st_ctimespec.tv_nsec) = 2080;
          *(uint64_t *)((char *)&__src.st_ctimespec.tv_nsec + 6) = v127 + 324;
          goto LABEL_287;
        }
        if (v129 >= 0xE0)
        {
          if (v129 > 0xEF)
          {
            unsigned int v132 = *(_DWORD *)(string_and_length_for_id + 1);
            if (!v132) {
              goto LABEL_280;
            }
            unsigned int v134 = v132 >> 8;
            int v133 = *(_DWORD *)(string_and_length_for_id + 1);
          }
          else
          {
            int v133 = string_and_length_for_id[1];
            unsigned int v134 = string_and_length_for_id[2];
            unsigned int v132 = ((v129 & 0xF) << 24) | (v133 << 16) | (v134 << 8) | string_and_length_for_id[3];
            if (!v132) {
              goto LABEL_280;
            }
          }
          if (v129 > 0xEF)
          {
            unsigned int v131 = *(_DWORD *)(string_and_length_for_id + 1);
            unint64_t v130 = 5;
          }
          else
          {
            unsigned int v131 = ((v129 & 0xF) << 24) | (v133 << 16) | (v134 << 8) | string_and_length_for_id[3];
            unint64_t v130 = 4;
          }
        }
        else
        {
          unsigned int v132 = ((v129 & 0x1F) << 16) | (string_and_length_for_id[1] << 8) | string_and_length_for_id[2];
          if (!v132) {
            goto LABEL_280;
          }
          unsigned int v131 = ((v129 & 0x1F) << 16) | (string_and_length_for_id[1] << 8) | string_and_length_for_id[2];
          unint64_t v130 = 3;
        }
        if (!v131)
        {
          int v148 = *__error();
          uint64_t v149 = _SILogForLogForCategory(7);
          if (!os_log_type_enabled(v149, OS_LOG_TYPE_ERROR)) {
            goto LABEL_281;
          }
          __darwin_time_t v165 = *((unsigned __int16 *)v19 + 1);
          __darwin_time_t v166 = *(int *)(v127 + 4);
          __src.st_dev = 136317442;
          *(void *)&__src.st_mode = "inflateDBFData";
          WORD2(__src.st_ino) = 1024;
          *(_DWORD *)((char *)&__src.st_ino + 6) = 1327;
          HIWORD(__src.st_uid) = 1024;
          __src.st_gid = 3;
          LOWORD(__src.st_rdev) = 2048;
          *(void *)((char *)&__src.st_rdev + 2) = v32;
          WORD1(__src.st_atimespec.tv_sec) = 1024;
          HIDWORD(__src.st_atimespec.tv_sec) = a5;
          __src.st_atimespec.tv_nsec = 0x8000000000F0400;
          __src.st_mtimespec.tv_sec = v165;
          LOWORD(__src.st_mtimespec.tv_nsec) = 2048;
          *(uint64_t *)((char *)&__src.st_mtimespec.tv_nsec + 2) = a5;
          WORD1(__src.st_ctimespec.tv_sec) = 2048;
          *(__darwin_time_t *)((char *)&__src.st_ctimespec.tv_sec + 4) = v166;
          WORD2(__src.st_ctimespec.tv_nsec) = 2080;
          *(uint64_t *)((char *)&__src.st_ctimespec.tv_nsec + 6) = v127 + 324;
          goto LABEL_287;
        }
LABEL_273:
        if (v130 > v132)
        {
          si_analytics_log_2842("%s:%u: failed assertion '%s' Expected offset %ld to fit in size %ld extras:%d type:%d");
        }
        else
        {
          *((_DWORD *)v19 + 2) = v131;
          uint64_t v152 = v18[3];
          size_t v153 = v131;
          unint64_t v154 = v152 + v131;
          if (v154 < 0xFFFFFFFF)
          {
            unint64_t v155 = v18[2];
            if (v154 >= v155)
            {
              size_t v156 = (2 * v155);
              do
              {
                size_t v157 = v156;
                v156 *= 2;
              }
              while (v157 <= v154);
              if (a10) {
                size_t v158 = (unsigned int *)(*(uint64_t (**)(uint64_t, unsigned int *, void, size_t))(a10 + 16))(a10, v18, v18[2], v157);
              }
              else {
                size_t v158 = (unsigned int *)malloc_type_realloc(v18, v157, 0x2F16373EuLL);
              }
              unint64_t v18 = v158;
              v158[2] = v157;
              *a2 = v158;
              uint64_t v152 = v158[3];
              size_t v153 = *(unsigned int *)((char *)v158 + a3 + 8);
              unint64_t v154 = v153 + v152;
              unint64_t v155 = v157 & 0xFFFFFFFE;
              unsigned int v131 = *(unsigned int *)((char *)v158 + a3 + 8);
            }
            if (v154 <= v155)
            {
              memcpy((char *)v18 + a3 + 13, &string_and_length_for_id[v130], v153);
              LODWORD(v88) = v18[3] + v131;
              goto LABEL_408;
            }
            si_analytics_log_2842("%s:%u: failed assertion '%s' Buffer overflow %ld + %ld > %ld extras:%d type:%d", "ldb.c", 1336, "(size_t)dbo->used_bytes+(size_t)dbf->data_len <= (size_t)dbo->size", v152, v153, v155, a5, 15);
            memset(&__src, 0, sizeof(__src));
            int v188 = -2;
            uint64_t v189 = *(void *)(v127 + 848);
            if (!v189) {
              goto LABEL_417;
            }
            goto LABEL_414;
          }
          si_analytics_log_2842("%s:%u: failed assertion '%s' Overflow %ld + %ld extras:%d type:%d");
        }
        memset(&__src, 0, sizeof(__src));
        int v177 = -2;
        uint64_t v178 = *(void *)(v127 + 848);
        if (!v178) {
          goto LABEL_351;
        }
        goto LABEL_348;
      }
      *((_WORD *)v19 + 1) = v29 | 0x8030;
      uint64_t v55 = *a6;
      unint64_t v56 = *a6 + 1;
      unsigned int v57 = *(unsigned __int8 *)(a7 + *a6);
      if (*(char *)(a7 + *a6) < 0)
      {
        if (v57 > 0xBF)
        {
          if (v57 > 0xDF)
          {
            if (v57 > 0xEF)
            {
              unsigned int v57 = *(_DWORD *)(a7 + v56);
              unint64_t v56 = v55 + 5;
            }
            else
            {
              unsigned int v57 = ((v57 & 0xF) << 24) | (*(unsigned __int8 *)(a7 + v56) << 16) | (*(unsigned __int8 *)(v55 + a7 + 2) << 8) | *(unsigned __int8 *)(v55 + a7 + 3);
              unint64_t v56 = v55 + 4;
            }
          }
          else
          {
            unsigned int v57 = ((v57 & 0x1F) << 16) | (*(unsigned __int8 *)(a7 + v56) << 8) | *(unsigned __int8 *)(v55 + a7 + 2);
            unint64_t v56 = v55 + 3;
          }
        }
        else
        {
          int v58 = *(unsigned __int8 *)(a7 + v56) | ((v57 & 0x3F) << 8);
          unint64_t v56 = v55 + 2;
          unsigned int v57 = v58;
        }
      }
      *a6 = v56;
      if (v56 <= a8)
      {
        unint64_t v135 = v18[2];
        uint64_t v136 = v18[3];
        unint64_t v137 = v136 + 4;
        if (v136 + 4 >= v135)
        {
          size_t v138 = (2 * v135);
          do
          {
            size_t v139 = v138;
            v138 *= 2;
          }
          while (v139 <= v137);
          if (a10) {
            uint64_t v140 = (unsigned int *)(*(uint64_t (**)(uint64_t, unsigned int *))(a10 + 16))(a10, v18);
          }
          else {
            uint64_t v140 = (unsigned int *)malloc_type_realloc(v18, v139, 0x2F16373EuLL);
          }
          unint64_t v18 = v140;
          v140[2] = v139;
          *a2 = v140;
          uint64_t v19 = (char *)v140 + a3;
          unint64_t v137 = v140[3] + 4;
          unint64_t v135 = v139 & 0xFFFFFFFE;
        }
        if (v137 <= v135)
        {
          *(_DWORD *)(v19 + 13) = v57;
          *(_WORD *)uint64_t v19 = 11;
          *((_DWORD *)v19 + 2) = 4;
          LODWORD(v88) = v18[3] + 4;
          goto LABEL_408;
        }
        si_analytics_log_2842("%s:%u: failed assertion '%s' Buffer overflow %ld + %ld > %ld extras:%d type:%d", "ldb.c");
        goto LABEL_413;
      }
LABEL_412:
      si_analytics_log_2842("%s:%u: failed assertion '%s' Expected offset %ld to fit in size %ld extras:%d type:%d");
      goto LABEL_413;
    }
    if ((a5 & 1) == 0)
    {
LABEL_46:
      unint64_t v42 = v18[2];
      unint64_t v43 = v18[3] + 8;
      if (v43 >= v42)
      {
        size_t v44 = (2 * v42);
        do
        {
          size_t v45 = v44;
          v44 *= 2;
        }
        while (v45 <= v43);
        uint64_t v46 = a1;
        unint64_t v47 = a8;
        if (a10)
        {
          uint64_t v48 = a10;
          uint64_t v49 = (unsigned int *)(*(uint64_t (**)(uint64_t, unsigned int *))(a10 + 16))(a10, v18);
        }
        else
        {
          uint64_t v48 = 0;
          uint64_t v49 = (unsigned int *)malloc_type_realloc(v18, v45, 0x2F16373EuLL);
        }
        unint64_t v18 = v49;
        v49[2] = v45;
        *a2 = v49;
        uint64_t v19 = (char *)v49 + a3;
        LODWORD(v42) = v45;
        a8 = v47;
        uint64_t v17 = v48;
        a1 = v46;
      }
      size_t v63 = 8;
      switch(a4)
      {
        case 0u:
        case 1u:
        case 2u:
          v19[13] = *(unsigned char *)(v10 + *v11);
          if (v18[3] < v18[2])
          {
            unint64_t v64 = *v11 + 1;
            *unint64_t v11 = v64;
            if (v64 > a8)
            {
LABEL_343:
              si_analytics_log_2842("%s:%u: failed assertion '%s' Expected offset %ld to fit in size %ld extras:%d type:%d");
              break;
            }
            LODWORD(v63) = 1;
LABEL_358:
            *((_DWORD *)v19 + 2) = v63;
            LODWORD(v88) = v18[3] + v63;
            goto LABEL_408;
          }
          si_analytics_log_2842("%s:%u: failed assertion '%s' Expected %ld <= %ld, extras:%d type:%d");
          break;
        case 3u:
        case 4u:
          if ((unint64_t)v18[3] + 2 > v42) {
            goto LABEL_411;
          }
          uint64_t v76 = *v11;
          unint64_t v77 = *v11 + 1;
          unsigned int v78 = *(unsigned __int8 *)(v10 + *v11);
          if ((*(char *)(v10 + *v11) & 0x80000000) == 0) {
            goto LABEL_209;
          }
          if (v78 > 0xBF)
          {
            if (v78 >= 0xE0)
            {
LABEL_392:
              CFAllocatorRef v193 = __si_assert_copy_extra_1921(0);
              CFAllocatorRef v194 = v193;
              uint64_t v195 = "";
              if (v193) {
                uint64_t v195 = v193;
              }
              __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v195);
              free(v194);
              if (__valid_fs(-1))
              {
                MEMORY[0xBAD] = -559038737;
                abort();
              }
              MEMORY[0xC00] = -559038737;
              abort();
            }
            LOWORD(v78) = *(unsigned __int8 *)(v76 + v10 + 2) | (*(unsigned __int8 *)(v10 + v77) << 8);
            unint64_t v77 = v76 + 3;
          }
          else
          {
            __int16 v79 = *(unsigned __int8 *)(v10 + v77) | ((v78 & 0x3F) << 8);
            unint64_t v77 = v76 + 2;
            LOWORD(v78) = v79;
          }
LABEL_209:
          *unint64_t v11 = v77;
          *(_WORD *)(v19 + 13) = v78;
          if (v77 > a8) {
            goto LABEL_412;
          }
          LODWORD(v63) = 2;
          goto LABEL_358;
        case 5u:
        case 6u:
        case 0xFu:
          if ((unint64_t)v18[3] + 4 <= v42)
          {
            uint64_t v65 = *v11;
            unint64_t v66 = *v11 + 1;
            unsigned int v67 = *(unsigned __int8 *)(v10 + *v11);
            if (*(char *)(v10 + *v11) < 0)
            {
              if (v67 > 0xBF)
              {
                if (v67 > 0xDF)
                {
                  if (v67 > 0xEF)
                  {
                    unsigned int v67 = *(_DWORD *)(v10 + v66);
                    unint64_t v66 = v65 + 5;
                  }
                  else
                  {
                    unsigned int v67 = ((v67 & 0xF) << 24) | (*(unsigned __int8 *)(v10 + v66) << 16) | (*(unsigned __int8 *)(v65 + v10 + 2) << 8) | *(unsigned __int8 *)(v65 + v10 + 3);
                    unint64_t v66 = v65 + 4;
                  }
                }
                else
                {
                  unsigned int v67 = ((v67 & 0x1F) << 16) | (*(unsigned __int8 *)(v10 + v66) << 8) | *(unsigned __int8 *)(v65 + v10 + 2);
                  unint64_t v66 = v65 + 3;
                }
              }
              else
              {
                int v68 = *(unsigned __int8 *)(v10 + v66) | ((v67 & 0x3F) << 8);
                unint64_t v66 = v65 + 2;
                unsigned int v67 = v68;
              }
            }
            *unint64_t v11 = v66;
            *(_DWORD *)(v19 + 13) = v67;
            if (v66 > a8) {
              goto LABEL_343;
            }
            LODWORD(v63) = 4;
            goto LABEL_358;
          }
          si_analytics_log_2842("%s:%u: failed assertion '%s' Expected %ld <= %ld extras:%d type:%d");
          break;
        case 7u:
        case 8u:
          if ((unint64_t)v18[3] + 8 > v42)
          {
LABEL_411:
            si_analytics_log_2842("%s:%u: failed assertion '%s' Expected %ld <= %ld extras:%d type:%d");
            goto LABEL_413;
          }
          uint64_t v80 = *v11;
          unint64_t v81 = *v11 + 1;
          unint64_t v82 = *(unsigned __int8 *)(v10 + *v11);
          if (*(char *)(v10 + *v11) < 0)
          {
            unsigned int v83 = *(unsigned __int8 *)(v10 + *v11);
            if (v83 > 0xBF)
            {
              if (v83 > 0xDF)
              {
                if (v83 > 0xEF)
                {
                  if (v83 > 0xF7)
                  {
                    if (v83 > 0xFB)
                    {
                      if (v83 > 0xFD)
                      {
                        if (v83 == 255)
                        {
                          unint64_t v82 = *(void *)(v10 + v81);
                          unint64_t v81 = v80 + 9;
                        }
                        else
                        {
                          unint64_t v82 = ((unint64_t)*(unsigned __int8 *)(v10 + v81) << 48) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 2) << 40) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 3) << 32) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 4) << 24) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 5) << 16) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 6) << 8) | *(unsigned __int8 *)(v80 + v10 + 7);
                          unint64_t v81 = v80 + 8;
                        }
                      }
                      else
                      {
                        unint64_t v82 = ((v82 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(v10 + v81) << 40) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 2) << 32) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 3) << 24) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 4) << 16) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 5) << 8) | *(unsigned __int8 *)(v80 + v10 + 6);
                        unint64_t v81 = v80 + 7;
                      }
                    }
                    else
                    {
                      unint64_t v82 = ((v82 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(v10 + v81) << 32) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 2) << 24) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 3) << 16) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 4) << 8) | *(unsigned __int8 *)(v80 + v10 + 5);
                      unint64_t v81 = v80 + 6;
                    }
                  }
                  else
                  {
                    unint64_t v82 = ((v82 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v10 + v81) << 24) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 2) << 16) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 3) << 8) | *(unsigned __int8 *)(v80 + v10 + 4);
                    unint64_t v81 = v80 + 5;
                  }
                }
                else
                {
                  unint64_t v82 = ((v82 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(v10 + v81) << 16) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 2) << 8) | *(unsigned __int8 *)(v80 + v10 + 3);
                  unint64_t v81 = v80 + 4;
                }
              }
              else
              {
                unint64_t v82 = ((v82 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(v10 + v81) << 8) | *(unsigned __int8 *)(v80 + v10 + 2);
                unint64_t v81 = v80 + 3;
              }
            }
            else
            {
              unint64_t v82 = *(unsigned __int8 *)(v10 + v81) | ((v82 & 0x3F) << 8);
              unint64_t v81 = v80 + 2;
            }
          }
          *unint64_t v11 = v81;
          *(void *)(v19 + 13) = v82;
          if (v81 > a8) {
            goto LABEL_412;
          }
          LODWORD(v63) = 8;
          goto LABEL_358;
        case 9u:
          size_t v63 = 4;
          goto LABEL_315;
        case 0xAu:
        case 0xCu:
          goto LABEL_315;
        default:
          uint64_t v84 = *v11;
          uint64_t v85 = *v11 + 1;
          unsigned int v86 = *(unsigned __int8 *)(v10 + *v11);
          if (*(char *)(v10 + *v11) < 0)
          {
            if (v86 > 0xBF)
            {
              if (v86 > 0xDF)
              {
                if (v86 > 0xEF)
                {
                  unsigned int v86 = *(_DWORD *)(v10 + v85);
                  uint64_t v85 = v84 + 5;
                }
                else
                {
                  unsigned int v86 = ((v86 & 0xF) << 24) | (*(unsigned __int8 *)(v10 + v85) << 16) | (*(unsigned __int8 *)(v84 + v10 + 2) << 8) | *(unsigned __int8 *)(v84 + v10 + 3);
                  uint64_t v85 = v84 + 4;
                }
              }
              else
              {
                unsigned int v86 = ((v86 & 0x1F) << 16) | (*(unsigned __int8 *)(v10 + v85) << 8) | *(unsigned __int8 *)(v84 + v10 + 2);
                uint64_t v85 = v84 + 3;
              }
            }
            else
            {
              int v87 = *(unsigned __int8 *)(v10 + v85) | ((v86 & 0x3F) << 8);
              uint64_t v85 = v84 + 2;
              unsigned int v86 = v87;
            }
          }
          *unint64_t v11 = v85;
          size_t v63 = v86;
LABEL_315:
          uint64_t v167 = a1;
          unint64_t v168 = v63 + v18[3];
          if (v168 >= v42)
          {
            uint64_t v169 = v10;
            __int16 v170 = v11;
            size_t v171 = (2 * v42);
            do
            {
              size_t v172 = v171;
              v171 *= 2;
            }
            while (v172 <= v168);
            unint64_t v173 = a8;
            if (v17) {
              unsigned int v174 = (unsigned int *)(*(uint64_t (**)(uint64_t, unsigned int *, void, size_t))(v17 + 16))(v17, v18, v42, v172);
            }
            else {
              unsigned int v174 = (unsigned int *)malloc_type_realloc(v18, v172, 0x2F16373EuLL);
            }
            unint64_t v18 = v174;
            v174[2] = v172;
            *a2 = v174;
            uint64_t v19 = (char *)v174 + a3;
            LODWORD(v42) = v172;
            unint64_t v11 = v170;
            a8 = v173;
            uint64_t v10 = v169;
          }
          unsigned int v175 = v11;
          uint64_t v176 = *v11;
          if (v176 + v63 > a8)
          {
            hexdumpDBOBuffer(v10, a8);
            si_analytics_log_2842("%s:%u: failed assertion '%s' Expected offset %ld plus len %ld to fit in size %ld extras:%d type:%d", "ldb.c");
          }
          else
          {
            if (v63 + v18[3] <= v42)
            {
              memcpy(v19 + 13, (const void *)(v10 + v176), v63);
              *v175 += v63;
              goto LABEL_358;
            }
            si_analytics_log_2842("%s:%u: failed assertion '%s' Expected len %ld plus used_bytes %ld to fit in dbo %ld extras:%d type:%d", "ldb.c");
          }
          memset(&__src, 0, sizeof(__src));
          int v188 = -2;
          uint64_t v189 = *(void *)(v167 + 848);
          if (v189) {
            goto LABEL_414;
          }
          goto LABEL_417;
      }
LABEL_347:
      memset(&__src, 0, sizeof(__src));
      int v177 = -2;
      uint64_t v178 = *(void *)(a1 + 848);
      if (!v178) {
        goto LABEL_351;
      }
      goto LABEL_348;
    }
    uint64_t v59 = *a6;
    unint64_t v60 = *a6 + 1;
    unsigned int v61 = *(unsigned __int8 *)(a7 + *a6);
    if (*(char *)(a7 + *a6) < 0)
    {
      if (v61 > 0xBF)
      {
        if (v61 > 0xDF)
        {
          if (v61 > 0xEF)
          {
            unsigned int v61 = *(_DWORD *)(a7 + v60);
            unint64_t v60 = v59 + 5;
          }
          else
          {
            unsigned int v61 = ((v61 & 0xF) << 24) | (*(unsigned __int8 *)(a7 + v60) << 16) | (*(unsigned __int8 *)(v59 + a7 + 2) << 8) | *(unsigned __int8 *)(v59 + a7 + 3);
            unint64_t v60 = v59 + 4;
          }
        }
        else
        {
          unsigned int v61 = ((v61 & 0x1F) << 16) | (*(unsigned __int8 *)(a7 + v60) << 8) | *(unsigned __int8 *)(v59 + a7 + 2);
          unint64_t v60 = v59 + 3;
        }
      }
      else
      {
        int v62 = *(unsigned __int8 *)(a7 + v60) | ((v61 & 0x3F) << 8);
        unint64_t v60 = v59 + 2;
        unsigned int v61 = v62;
      }
    }
    *a6 = v60;
    if (v60 > a8) {
      goto LABEL_412;
    }
    *(void *)&v214[0] = 0;
    if ((a5 & 8) != 0) {
      unsigned int v143 = 2;
    }
    else {
      unsigned int v143 = 4;
    }
    uint64_t v206 = a1;
    DBFForUniquedCFDataRef Value = getDBFForUniquedValue(a1, v143, v61, v214);
    if (!DBFForUniquedValue)
    {
      int v148 = *__error();
      uint64_t v149 = _SILogForLogForCategory(7);
      if (!os_log_type_enabled(v149, OS_LOG_TYPE_ERROR))
      {
LABEL_281:
        *__error() = v148;
        return;
      }
      __darwin_time_t v150 = *((unsigned __int16 *)v19 + 1);
      __darwin_time_t v151 = *(int *)(a1 + 4);
      __src.st_dev = 136317442;
      *(void *)&__src.st_mode = "inflateDBFData";
      WORD2(__src.st_ino) = 1024;
      *(_DWORD *)((char *)&__src.st_ino + 6) = 1463;
      HIWORD(__src.st_uid) = 1024;
      __src.st_gid = v143;
      LOWORD(__src.st_rdev) = 2048;
      *(void *)((char *)&__src.st_rdev + 2) = v61;
      WORD1(__src.st_atimespec.tv_sec) = 1024;
      HIDWORD(__src.st_atimespec.tv_sec) = a5;
      __src.st_atimespec.tv_nsec = 0x8000000000F0400;
      __src.st_mtimespec.tv_sec = v150;
      LOWORD(__src.st_mtimespec.tv_nsec) = 2048;
      *(uint64_t *)((char *)&__src.st_mtimespec.tv_nsec + 2) = a5;
      WORD1(__src.st_ctimespec.tv_sec) = 2048;
      *(__darwin_time_t *)((char *)&__src.st_ctimespec.tv_sec + 4) = v151;
      WORD2(__src.st_ctimespec.tv_nsec) = 2080;
      *(uint64_t *)((char *)&__src.st_ctimespec.tv_nsec + 6) = a1 + 324;
LABEL_287:
      _os_log_error_impl(&dword_1BD672000, v149, OS_LOG_TYPE_ERROR, "%s:%d: Failed to fetch the field for index:%d, nameId:%lu, extras:%d, type:%d, flags:0x%lx(0x%lx), dst->flags:0x%lx, dst->name:%s", (uint8_t *)&__src, 0x56u);
      goto LABEL_281;
    }
    uint64_t v145 = DBFForUniquedValue;
    unint64_t v213 = a2;
    unsigned int v40 = *DBFForUniquedValue;
    if ((char)*DBFForUniquedValue < 0)
    {
      uint64_t v147 = a10;
      if (v40 > 0xBF)
      {
        if (v40 > 0xDF)
        {
          if (v40 > 0xEF)
          {
            unsigned int v40 = *(_DWORD *)(v145 + 1);
            unint64_t v146 = 5;
          }
          else
          {
            unsigned int v40 = ((v40 & 0xF) << 24) | (v145[1] << 16) | (v145[2] << 8) | v145[3];
            unint64_t v146 = 4;
          }
        }
        else
        {
          unsigned int v40 = ((v40 & 0x1F) << 16) | (v145[1] << 8) | v145[2];
          unint64_t v146 = 3;
        }
      }
      else
      {
        unint64_t v146 = 2;
        unsigned int v40 = v145[1] | ((v40 & 0x3F) << 8);
      }
    }
    else
    {
      unint64_t v146 = 1;
      uint64_t v147 = a10;
    }
    unint64_t v161 = *(void *)&v214[0];
    if (*(void *)&v214[0] < v146)
    {
      si_analytics_log_2842("Expected offset %ld to fit in size %ld pc:%d extras:%d type:%d", v146, *(void *)&v214[0], *(_DWORD *)(v206 + 984), a5, 15);
      uint64_t v147 = a10;
      if ((a5 & 8) == 0) {
        goto LABEL_291;
      }
    }
    else if ((a5 & 8) == 0)
    {
LABEL_291:
      unint64_t v162 = v146 + 1;
      unsigned int v163 = v145[v146];
      if ((char)v145[v146] < 0)
      {
        if (v163 > 0xBF)
        {
          if (v163 > 0xDF)
          {
            if (v163 > 0xEF)
            {
              unsigned int v163 = *(_DWORD *)&v145[v162];
              unint64_t v162 = v146 + 5;
            }
            else
            {
              unsigned int v163 = ((v163 & 0xF) << 24) | (v145[v162] << 16) | (v145[v146 + 2] << 8) | v145[v146 + 3];
              unint64_t v162 = v146 + 4;
            }
          }
          else
          {
            unsigned int v163 = ((v163 & 0x1F) << 16) | (v145[v162] << 8) | v145[v146 + 2];
            unint64_t v162 = v146 + 3;
          }
        }
        else
        {
          int v164 = v145[v162] | ((v163 & 0x3F) << 8);
          unint64_t v162 = v146 + 2;
          unsigned int v163 = v164;
        }
      }
      if (v161 < v162)
      {
        si_analytics_log_2842("Expected offset %ld to fit in size %ld pc:%d, extras:%d type:%d", v162, v161, *(_DWORD *)(v206 + 984), a5, 15);
        return;
      }
      if (v163 != *((_DWORD *)v19 + 1))
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
        {
          __darwin_time_t v203 = *((unsigned __int16 *)v19 + 1);
          __darwin_time_t v204 = *(int *)(v206 + 4);
          *(void *)&__src.st_dev = 0x404000802;
          LOWORD(__src.st_ino) = 2048;
          *(__darwin_ino64_t *)((char *)&__src.st_ino + 2) = v61;
          HIWORD(__src.st_uid) = 1024;
          __src.st_gid = a5;
          LOWORD(__src.st_rdev) = 1024;
          *(dev_t *)((char *)&__src.st_rdev + 2) = 15;
          *((_WORD *)&__src.st_rdev + 3) = 2048;
          __src.st_atimespec.tv_sec = v203;
          LOWORD(__src.st_atimespec.tv_nsec) = 2048;
          *(uint64_t *)((char *)&__src.st_atimespec.tv_nsec + 2) = a5;
          WORD1(__src.st_mtimespec.tv_sec) = 2048;
          *(__darwin_time_t *)((char *)&__src.st_mtimespec.tv_sec + 4) = v204;
          WORD2(__src.st_mtimespec.tv_nsec) = 2080;
          *(uint64_t *)((char *)&__src.st_mtimespec.tv_nsec + 6) = v206 + 324;
          _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "Got the wrong field for index:%d, nameId:%lu, extras:%d, type:%d, flags:0x%lx(0x%lx), dst->flags:0x%lx, dst->name:%s", (uint8_t *)&__src, 0x46u);
        }
        return;
      }
      if (v162 - v146 > (int)v40)
      {
        si_analytics_log_2842("Expected len %ld to contain new data size %ld - %ld pc:%d extras:%d type:%d", (int)v40, v146, v162, *(_DWORD *)(v206 + 984), a5, 15);
        return;
      }
      v40 -= v162 - v146;
      goto LABEL_398;
    }
    unint64_t v162 = v146;
LABEL_398:
    *((_DWORD *)v19 + 2) = v40;
    size_t v196 = v18[2];
    uint64_t v197 = v18[3];
    size_t v198 = v197 + (int)v40;
    if (v198 >= v196)
    {
      size_t v199 = (2 * v196);
      do
      {
        size_t v200 = v199;
        v199 *= 2;
      }
      while (v200 <= v198);
      if (v147) {
        unint64_t v201 = (unsigned int *)(*(uint64_t (**)(uint64_t, unsigned int *))(v147 + 16))(v147, v18);
      }
      else {
        unint64_t v201 = (unsigned int *)malloc_type_realloc(v18, v200, 0x2F16373EuLL);
      }
      unint64_t v18 = v201;
      v201[2] = v200;
      *unint64_t v213 = v201;
      unsigned int v40 = *(unsigned int *)((char *)v201 + a3 + 8);
      uint64_t v197 = v201[3];
      size_t v196 = v200 & 0xFFFFFFFE;
    }
    if (v197 + (unint64_t)v40 <= v196)
    {
      memcpy((char *)v18 + a3 + 13, &v145[v162], v40);
      goto LABEL_407;
    }
    si_analytics_log_2842("%s:%u: failed assertion '%s' Expected %ld + %ld <= %ld extras:%d type:%d", "ldb.c", 1503, "(size_t)dbf->data_len + (size_t)dbo->used_bytes <= (size_t)dbo->size", v40, v197, v196, a5, 15);
LABEL_370:
    memset(&__src, 0, sizeof(__src));
    int v188 = -2;
    uint64_t v189 = *(void *)(v206 + 848);
    if (v189) {
      goto LABEL_414;
    }
    goto LABEL_417;
  }
  if (a4 != 14)
  {
    *(_WORD *)uint64_t v19 = a4;
    if ((a5 & 3) == 2)
    {
      LOWORD(v20) = *((_WORD *)v19 + 1);
      goto LABEL_38;
    }
LABEL_41:
    if (a5)
    {
      uint64_t v38 = *a6;
      uint64_t v39 = *a6 + 1;
      unsigned int v40 = *(unsigned __int8 *)(a7 + *a6);
      uint64_t v206 = a1;
      if (*(char *)(a7 + *a6) < 0)
      {
        if (v40 > 0xBF)
        {
          if (v40 > 0xDF)
          {
            if (v40 > 0xEF)
            {
              unsigned int v40 = *(_DWORD *)(a7 + v39);
              uint64_t v39 = v38 + 5;
            }
            else
            {
              unsigned int v40 = ((v40 & 0xF) << 24) | (*(unsigned __int8 *)(a7 + v39) << 16) | (*(unsigned __int8 *)(v38 + a7 + 2) << 8) | *(unsigned __int8 *)(v38 + a7 + 3);
              uint64_t v39 = v38 + 4;
            }
          }
          else
          {
            unsigned int v40 = ((v40 & 0x1F) << 16) | (*(unsigned __int8 *)(a7 + v39) << 8) | *(unsigned __int8 *)(v38 + a7 + 2);
            uint64_t v39 = v38 + 3;
          }
        }
        else
        {
          int v41 = *(unsigned __int8 *)(a7 + v39) | ((v40 & 0x3F) << 8);
          uint64_t v39 = v38 + 2;
          unsigned int v40 = v41;
        }
      }
      *a6 = v39;
      uint64_t v114 = a3 + 13;
      if (a3 + 13 > (unint64_t)v18[2])
      {
        uint64_t v180 = __si_assert_copy_extra_1921(0);
        gid_t v181 = a5;
        uint64_t v182 = v180;
        uint64_t v183 = "";
        if (v180) {
          uint64_t v183 = v180;
        }
        __message_assert("%s:%u: failed assertion '%s' %s Field outside allocated object (%lu + %lu) > %u extras:%d type:%d", "ldb.c", 1508, "dbfOffset + sizeof(db_field) <= dbo->size", v183, a3, 13, v18[2], v181, a4);
        free(v182);
        if (!__valid_fs(-1))
        {
          uint64_t v184 = 3072;
          goto LABEL_421;
        }
        goto LABEL_419;
      }
      uint64_t v115 = v40;
      *((_DWORD *)v19 + 2) = v40;
      unint64_t v116 = v18[2];
      unint64_t v117 = v18[3] + (unint64_t)v40;
      if (v117 >= v116)
      {
        size_t v119 = (2 * v116);
        do
        {
          size_t v120 = v119;
          v119 *= 2;
        }
        while (v120 <= v117);
        unint64_t v121 = a8;
        if (a10) {
          uint64_t v123 = (unsigned int *)(*(uint64_t (**)(uint64_t, unsigned int *))(a10 + 16))(a10, v18);
        }
        else {
          uint64_t v123 = (unsigned int *)malloc_type_realloc(v18, v120, 0x2F16373EuLL);
        }
        unint64_t v18 = v123;
        v123[2] = v120;
        *a2 = v123;
        uint64_t v19 = (char *)v123 + a3;
        size_t v118 = *(unsigned int *)((char *)v123 + a3 + 8);
        unint64_t v116 = v120 & 0xFFFFFFFE;
        unsigned int v40 = *(unsigned int *)((char *)v123 + a3 + 8);
        unint64_t v11 = a6;
        a8 = v121;
        uint64_t v10 = a7;
      }
      else
      {
        size_t v118 = v40;
      }
      if (v114 + v118 > v116)
      {
        unint64_t v185 = __si_assert_copy_extra_1921(0);
        uint64_t v186 = v185;
        int v187 = "";
        if (v185) {
          int v187 = v185;
        }
        __message_assert("%s:%u: failed assertion '%s' %s Field outside allocated object (%lu + %lu + %u) > %u extras:%d type:%d", "ldb.c", 1513, "dbfOffset + sizeof(db_field) + dbf->data_len <= dbo->size", v187, a3, 13, *((_DWORD *)v19 + 2), v18[2], a5, a4);
        free(v186);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      if (v39 + v118 <= a8)
      {
        uint64_t v124 = v18[3];
        if (v118 + v124 <= v116)
        {
          memcpy(v19 + 13, (const void *)(v10 + v39), v118);
          *v11 += v118;
LABEL_407:
          LODWORD(v88) = v18[3] + v40;
          goto LABEL_408;
        }
        si_analytics_log_2842("%s:%u: failed assertion '%s' Expected %ld + %ld <= %ld extras:%d type:%d", "ldb.c", 1515, "(size_t)dbf->data_len + (size_t)dbo->used_bytes <= (size_t)dbo->size", v118, v124, v116, a5, a4);
        goto LABEL_370;
      }
      si_analytics_log_2842("%s:%u: failed assertion '%s' Expected offset %ld plus len %ld to fit in size %ld extras:%d type:%d", "ldb.c", 1514, "*offset+dbf->data_len <= buffer_size", v39, v115, a8, a5, a4);
      memset(&__src, 0, sizeof(__src));
      int v177 = -2;
      uint64_t v178 = *(void *)(v206 + 848);
      if (!v178)
      {
LABEL_351:
        if (!fstatat(v177, "CrystalGlow.created", &__src, 0))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xB00] = -559038737;
        abort();
      }
LABEL_348:
      unsigned int v179 = *(_DWORD *)(v178 + 44);
      if (v179 >= 0xFFFFFFFE) {
        int v177 = -2;
      }
      else {
        int v177 = v179;
      }
      goto LABEL_351;
    }
    goto LABEL_46;
  }
  int v20 = *((unsigned __int16 *)v19 + 1);
  if ((~v20 & 0x5020) == 0)
  {
    *((_WORD *)v19 + 1) = v20 | 0x10;
    if ((v20 & 8) == 0)
    {
      long long v221 = 0u;
      long long v222 = 0u;
      long long v219 = 0u;
      long long v220 = 0u;
      long long v217 = 0u;
      long long v218 = 0u;
      long long v216 = 0u;
      memset(&__src, 0, sizeof(__src));
      uint64_t v21 = *a6;
      unint64_t v22 = *a6 + 1;
      *a6 = v22;
      unint64_t v23 = v21 + *(unsigned __int8 *)(a7 + v21);
      if (v22 >= v23)
      {
        unint64_t v24 = 0;
      }
      else
      {
        unint64_t v24 = 0;
        do
        {
          unint64_t v25 = v22 + 1;
          unint64_t v26 = *(unsigned __int8 *)(a7 + v22);
          if (*(char *)(a7 + v22) < 0)
          {
            unsigned int v27 = *(unsigned __int8 *)(a7 + v22);
            if (v27 > 0xBF)
            {
              if (v27 > 0xDF)
              {
                if (v27 > 0xEF)
                {
                  if (v27 > 0xF7)
                  {
                    if (v27 > 0xFB)
                    {
                      if (v27 > 0xFD)
                      {
                        if (v27 == 255)
                        {
                          unint64_t v26 = *(void *)(a7 + v25);
                          v22 += 9;
                        }
                        else
                        {
                          unint64_t v26 = ((unint64_t)*(unsigned __int8 *)(a7 + v25) << 48) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 2) << 40) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 3) << 32) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 4) << 24) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 5) << 16) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 6) << 8) | *(unsigned __int8 *)(v22 + a7 + 7);
                          v22 += 8;
                        }
                      }
                      else
                      {
                        unint64_t v26 = ((v26 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(a7 + v25) << 40) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 2) << 32) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 3) << 24) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 4) << 16) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 5) << 8) | *(unsigned __int8 *)(v22 + a7 + 6);
                        v22 += 7;
                      }
                    }
                    else
                    {
                      unint64_t v26 = ((v26 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(a7 + v25) << 32) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 2) << 24) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 3) << 16) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 4) << 8) | *(unsigned __int8 *)(v22 + a7 + 5);
                      v22 += 6;
                    }
                  }
                  else
                  {
                    unint64_t v26 = ((v26 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(a7 + v25) << 24) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 2) << 16) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 3) << 8) | *(unsigned __int8 *)(v22 + a7 + 4);
                    v22 += 5;
                  }
                }
                else
                {
                  unint64_t v26 = ((v26 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(a7 + v25) << 16) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 2) << 8) | *(unsigned __int8 *)(v22 + a7 + 3);
                  v22 += 4;
                }
              }
              else
              {
                unint64_t v26 = ((v26 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(a7 + v25) << 8) | *(unsigned __int8 *)(v22 + a7 + 2);
                v22 += 3;
              }
            }
            else
            {
              unint64_t v26 = *(unsigned __int8 *)(a7 + v25) | ((v26 & 0x3F) << 8);
              v22 += 2;
            }
          }
          else
          {
            ++v22;
          }
          if (v24 <= 0x1F) {
            *((void *)&__src.st_dev + v24++) = v26;
          }
        }
        while (v22 < v23);
        *a6 = v22;
      }
      uint64_t v69 = 8 * v24;
      size_t v70 = v18[2];
      uint64_t v71 = v18[3];
      size_t v72 = 8 * v24 + v71;
      if (v72 >= v70)
      {
        size_t v73 = (2 * v70);
        do
        {
          size_t v74 = v73;
          v73 *= 2;
        }
        while (v74 <= v72);
        if (a10) {
          __int16 v75 = (unsigned int *)(*(uint64_t (**)(uint64_t, unsigned int *))(a10 + 16))(a10, v18);
        }
        else {
          __int16 v75 = (unsigned int *)malloc_type_realloc(v18, v74, 0x2F16373EuLL);
        }
        unint64_t v18 = v75;
        v75[2] = v74;
        *a2 = v75;
        uint64_t v19 = (char *)v75 + a3;
        uint64_t v71 = v75[3];
        size_t v72 = v69 + v71;
        size_t v70 = v74 & 0xFFFFFFFE;
      }
      if (v72 <= v70)
      {
        *((_DWORD *)v19 + 2) = v69;
        memcpy(v19 + 13, &__src, v69 & 0xFFFFFFF8);
        *(_WORD *)uint64_t v19 = 14;
        LODWORD(v88) = v18[3] + v69;
        goto LABEL_408;
      }
      si_analytics_log_2842("%s:%u: failed assertion '%s' Expected %ld + %ld <= %ld type:%d", "ldb.c", 1258, "sizeof(uint64_t)*vi + (size_t)dbo->used_bytes <= (size_t)dbo->size", 8, v71, v70, 14);
      memset(v214, 0, sizeof(v214));
      int v188 = -2;
      uint64_t v190 = *(void *)(a1 + 848);
      if (v190)
      {
        unsigned int v191 = *(_DWORD *)(v190 + 44);
        if (v191 >= 0xFFFFFFFE) {
          int v188 = -2;
        }
        else {
          int v188 = v191;
        }
      }
      p_src = (stat *)v214;
LABEL_418:
      if (fstatat(v188, "CrystalGlow.created", p_src, 0))
      {
        uint64_t v184 = 2816;
LABEL_421:
        *(_DWORD *)uint64_t v184 = -559038737;
        abort();
      }
LABEL_419:
      uint64_t v184 = 2989;
      goto LABEL_421;
    }
    unint64_t v50 = v18[2];
    unint64_t v51 = v18[3] + 8;
    if (v51 >= v50)
    {
      size_t v52 = (2 * v50);
      do
      {
        size_t v53 = v52;
        v52 *= 2;
      }
      while (v53 <= v51);
      if (a10) {
        uint64_t v54 = (unsigned int *)(*(uint64_t (**)(uint64_t, unsigned int *))(a10 + 16))(a10, v18);
      }
      else {
        uint64_t v54 = (unsigned int *)malloc_type_realloc(v18, v53, 0x2F16373EuLL);
      }
      unint64_t v18 = v54;
      v54[2] = v53;
      *a2 = v54;
      uint64_t v19 = (char *)v54 + a3;
      unint64_t v51 = v54[3] + 8;
      unint64_t v50 = v53 & 0xFFFFFFFE;
    }
    if (v51 <= v50)
    {
      uint64_t v110 = *v11;
      uint64_t v111 = *v11 + 1;
      unint64_t v112 = *(unsigned __int8 *)(v10 + *v11);
      if (*(char *)(v10 + *v11) < 0)
      {
        unsigned int v113 = *(unsigned __int8 *)(v10 + *v11);
        if (v113 > 0xBF)
        {
          if (v113 > 0xDF)
          {
            if (v113 > 0xEF)
            {
              if (v113 > 0xF7)
              {
                if (v113 > 0xFB)
                {
                  if (v113 > 0xFD)
                  {
                    if (v113 == 255)
                    {
                      unint64_t v112 = *(void *)(v10 + v111);
                      uint64_t v111 = v110 + 9;
                    }
                    else
                    {
                      unint64_t v112 = ((unint64_t)*(unsigned __int8 *)(v10 + v111) << 48) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 2) << 40) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 3) << 32) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 4) << 24) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 5) << 16) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 6) << 8) | *(unsigned __int8 *)(v110 + v10 + 7);
                      uint64_t v111 = v110 + 8;
                    }
                  }
                  else
                  {
                    unint64_t v112 = ((v112 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(v10 + v111) << 40) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 2) << 32) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 3) << 24) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 4) << 16) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 5) << 8) | *(unsigned __int8 *)(v110 + v10 + 6);
                    uint64_t v111 = v110 + 7;
                  }
                }
                else
                {
                  unint64_t v112 = ((v112 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(v10 + v111) << 32) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 2) << 24) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 3) << 16) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 4) << 8) | *(unsigned __int8 *)(v110 + v10 + 5);
                  uint64_t v111 = v110 + 6;
                }
              }
              else
              {
                unint64_t v112 = ((v112 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v10 + v111) << 24) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 2) << 16) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 3) << 8) | *(unsigned __int8 *)(v110 + v10 + 4);
                uint64_t v111 = v110 + 5;
              }
            }
            else
            {
              unint64_t v112 = ((v112 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(v10 + v111) << 16) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 2) << 8) | *(unsigned __int8 *)(v110 + v10 + 3);
              uint64_t v111 = v110 + 4;
            }
          }
          else
          {
            unint64_t v112 = ((v112 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(v10 + v111) << 8) | *(unsigned __int8 *)(v110 + v10 + 2);
            uint64_t v111 = v110 + 3;
          }
        }
        else
        {
          unint64_t v112 = *(unsigned __int8 *)(v10 + v111) | ((v112 & 0x3F) << 8);
          uint64_t v111 = v110 + 2;
        }
      }
      *unint64_t v11 = v111;
      *(void *)(v19 + 13) = v112;
      *((_DWORD *)v19 + 2) = 8;
      *(_WORD *)uint64_t v19 = 14;
      LODWORD(v88) = v18[3] + 8;
      goto LABEL_408;
    }
    si_analytics_log_2842("%s:%u: failed assertion '%s' Expected %ld + %ld <= %ld");
LABEL_413:
    memset(&__src, 0, sizeof(__src));
    int v188 = -2;
    uint64_t v189 = *(void *)(a1 + 848);
    if (v189)
    {
LABEL_414:
      unsigned int v202 = *(_DWORD *)(v189 + 44);
      if (v202 >= 0xFFFFFFFE) {
        int v188 = -2;
      }
      else {
        int v188 = v202;
      }
    }
LABEL_417:
    p_src = &__src;
    goto LABEL_418;
  }
  __int16 v28 = 14;
LABEL_37:
  *(_WORD *)uint64_t v19 = v28;
  if ((a5 & 3) != 2) {
    goto LABEL_41;
  }
LABEL_38:
  *((_WORD *)v19 + 1) = v20 | 0x20;
  uint64_t v34 = *a6;
  unint64_t v35 = *a6 + 1;
  unsigned int v36 = *(unsigned __int8 *)(a7 + *a6);
  if (*(char *)(a7 + *a6) < 0)
  {
    if (v36 > 0xBF)
    {
      if (v36 > 0xDF)
      {
        if (v36 > 0xEF)
        {
          unsigned int v36 = *(_DWORD *)(a7 + v35);
          unint64_t v35 = v34 + 5;
        }
        else
        {
          unsigned int v36 = ((v36 & 0xF) << 24) | (*(unsigned __int8 *)(a7 + v35) << 16) | (*(unsigned __int8 *)(v34 + a7 + 2) << 8) | *(unsigned __int8 *)(v34 + a7 + 3);
          unint64_t v35 = v34 + 4;
        }
      }
      else
      {
        unsigned int v36 = ((v36 & 0x1F) << 16) | (*(unsigned __int8 *)(a7 + v35) << 8) | *(unsigned __int8 *)(v34 + a7 + 2);
        unint64_t v35 = v34 + 3;
      }
    }
    else
    {
      int v37 = *(unsigned __int8 *)(a7 + v35) | ((v36 & 0x3F) << 8);
      unint64_t v35 = v34 + 2;
      unsigned int v36 = v37;
    }
  }
  *a6 = v35;
  if (v35 > a8) {
    goto LABEL_343;
  }
  *((_DWORD *)v19 + 2) = v36;
  uint64_t v88 = v18[3];
  unint64_t v89 = v88 + v36;
  if (v89 >= 0xFFFFFFFF)
  {
    si_analytics_log_2842("%s:%u: failed assertion '%s' Overflow %ld + %ld extras:%d type:%d");
    goto LABEL_413;
  }
  unint64_t v90 = v18[2];
  if (v89 >= v90)
  {
    uint64_t v92 = a3;
    uint64_t v93 = a1;
    size_t v95 = (2 * v90);
    do
    {
      size_t v96 = v95;
      v95 *= 2;
    }
    while (v96 <= v89);
    unint64_t v97 = a8;
    if (a10) {
      long long v98 = (unsigned int *)(*(uint64_t (**)(uint64_t, unsigned int *))(a10 + 16))(a10, v18);
    }
    else {
      long long v98 = (unsigned int *)malloc_type_realloc(v18, v96, 0x2F16373EuLL);
    }
    unint64_t v18 = v98;
    v98[2] = v96;
    *a2 = v98;
    uint64_t v19 = (char *)v98 + v92;
    uint64_t v88 = v98[3];
    unint64_t v89 = *((unsigned int *)v19 + 2) + v88;
    unint64_t v90 = v96 & 0xFFFFFFFE;
    unsigned int v91 = *((_DWORD *)v19 + 2);
    unint64_t v11 = a6;
    a1 = v93;
    a8 = v97;
    uint64_t v10 = a7;
  }
  else
  {
    unsigned int v91 = v36;
  }
  if (v89 > v90)
  {
    si_analytics_log_2842("%s:%u: failed assertion '%s' Buffer overflow %ld + %ld > %ld extras:%d type:%d", "ldb.c");
    goto LABEL_347;
  }
  if (a4 - 9 < 4 || a4 == 14)
  {
    if (v35 + v36 > a8)
    {
      hexdumpDBOBuffer(v10, a8);
      si_analytics_log_2842("%s:%u: failed assertion '%s' Buffer overflow: %ld + %ld > %ld extras:%d type:%d", "ldb.c");
      goto LABEL_347;
    }
    if (v88 + (unint64_t)v36 > v90)
    {
      si_analytics_log_2842("%s:%u: failed assertion '%s' dbo overflow: %ld + %ld > %ld extras:%d type:%d", "ldb.c");
      goto LABEL_413;
    }
    memcpy(v19 + 13, (const void *)(v10 + v35), v36);
    *v11 += v36;
    *((_DWORD *)v19 + 2) = v36;
    LODWORD(v88) = v18[3] + v36;
    goto LABEL_408;
  }
  if (!v91)
  {
LABEL_408:
    v18[3] = v88;
    return;
  }
  if (a4 < 9 || a4 == 15)
  {
    unint64_t v99 = 0;
    long long v100 = v19 + 13;
    do
    {
      int v104 = 1 << a4;
      if (((1 << a4) & 7) != 0)
      {
        if (v18[3] >= v18[2]) {
          goto LABEL_372;
        }
        v100[v99] = *(unsigned char *)(v10 + v35);
        unint64_t v102 = *v11 + 1;
        *unint64_t v11 = v102;
        if (v102 > a8) {
          goto LABEL_343;
        }
        ++v99;
      }
      else if ((v104 & 0x8060) != 0)
      {
        if ((unint64_t)v18[3] + 4 > v18[2]) {
          goto LABEL_372;
        }
        unint64_t v102 = v35 + 1;
        unsigned int v105 = *(unsigned __int8 *)(v10 + v35);
        if (*(char *)(v10 + v35) < 0)
        {
          if (v105 > 0xBF)
          {
            if (v105 > 0xDF)
            {
              if (v105 > 0xEF)
              {
                unsigned int v105 = *(_DWORD *)(v10 + v102);
                unint64_t v102 = v35 + 5;
              }
              else
              {
                unsigned int v105 = ((v105 & 0xF) << 24) | (*(unsigned __int8 *)(v10 + v102) << 16) | (*(unsigned __int8 *)(v35 + v10 + 2) << 8) | *(unsigned __int8 *)(v35 + v10 + 3);
                unint64_t v102 = v35 + 4;
              }
            }
            else
            {
              unsigned int v105 = ((v105 & 0x1F) << 16) | (*(unsigned __int8 *)(v10 + v102) << 8) | *(unsigned __int8 *)(v35 + v10 + 2);
              unint64_t v102 = v35 + 3;
            }
          }
          else
          {
            int v106 = *(unsigned __int8 *)(v10 + v102) | ((v105 & 0x3F) << 8);
            unint64_t v102 = v35 + 2;
            unsigned int v105 = v106;
          }
        }
        *unint64_t v11 = v102;
        *(_DWORD *)&v100[v99] = v105;
        if (v102 > a8) {
          goto LABEL_343;
        }
        v99 += 4;
      }
      else if ((v104 & 0x18) != 0)
      {
        if ((unint64_t)v18[3] + 2 > v18[2])
        {
          si_analytics_log_2842("%s:%u: failed assertion '%s' Expected %ld + %ld <= %ld extras:%d type:%d", "ldb.c");
          goto LABEL_347;
        }
        unint64_t v102 = v35 + 1;
        unsigned int v107 = *(unsigned __int8 *)(v10 + v35);
        if (*(char *)(v10 + v35) < 0)
        {
          if (v107 > 0xBF)
          {
            if (v107 >= 0xE0) {
              goto LABEL_392;
            }
            LOWORD(v107) = *(unsigned __int8 *)(v35 + v10 + 2) | (*(unsigned __int8 *)(v10 + v102) << 8);
            unint64_t v102 = v35 + 3;
          }
          else
          {
            __int16 v108 = *(unsigned __int8 *)(v10 + v102) | ((v107 & 0x3F) << 8);
            unint64_t v102 = v35 + 2;
            LOWORD(v107) = v108;
          }
        }
        *unint64_t v11 = v102;
        *(_WORD *)&v100[v99] = v107;
        if (v102 > a8) {
          goto LABEL_412;
        }
        v99 += 2;
      }
      else
      {
        if ((unint64_t)v18[3] + 8 > v18[2])
        {
LABEL_372:
          si_analytics_log_2842("%s:%u: failed assertion '%s' Expected %ld + %ld <= %ld extras:%d type:%d", "ldb.c");
          goto LABEL_413;
        }
        unint64_t v102 = v35 + 1;
        unint64_t v101 = *(unsigned __int8 *)(v10 + v35);
        if (*(char *)(v10 + v35) < 0)
        {
          unsigned int v109 = *(unsigned __int8 *)(v10 + v35);
          if (v109 <= 0xBF)
          {
            unint64_t v101 = *(unsigned __int8 *)(v10 + v102) | ((v101 & 0x3F) << 8);
            unint64_t v102 = v35 + 2;
          }
          else if (v109 > 0xDF)
          {
            if (v109 > 0xEF)
            {
              if (v109 > 0xF7)
              {
                if (v109 > 0xFB)
                {
                  if (v109 > 0xFD)
                  {
                    if (v109 == 255)
                    {
                      unint64_t v101 = *(void *)(v10 + v102);
                      unint64_t v102 = v35 + 9;
                    }
                    else
                    {
                      unint64_t v101 = ((unint64_t)*(unsigned __int8 *)(v10 + v102) << 48) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 2) << 40) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 3) << 32) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 4) << 24) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 5) << 16) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 6) << 8) | *(unsigned __int8 *)(v35 + v10 + 7);
                      unint64_t v102 = v35 + 8;
                    }
                  }
                  else
                  {
                    unint64_t v101 = ((v101 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(v10 + v102) << 40) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 2) << 32) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 3) << 24) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 4) << 16) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 5) << 8) | *(unsigned __int8 *)(v35 + v10 + 6);
                    unint64_t v102 = v35 + 7;
                  }
                }
                else
                {
                  unint64_t v101 = ((v101 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(v10 + v102) << 32) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 2) << 24) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 3) << 16) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 4) << 8) | *(unsigned __int8 *)(v35 + v10 + 5);
                  unint64_t v102 = v35 + 6;
                }
              }
              else
              {
                unint64_t v101 = ((v101 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v10 + v102) << 24) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 2) << 16) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 3) << 8) | *(unsigned __int8 *)(v35 + v10 + 4);
                unint64_t v102 = v35 + 5;
              }
            }
            else
            {
              unint64_t v101 = ((v101 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(v10 + v102) << 16) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 2) << 8) | *(unsigned __int8 *)(v35 + v10 + 3);
              unint64_t v102 = v35 + 4;
            }
          }
          else
          {
            unint64_t v101 = ((v101 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(v10 + v102) << 8) | *(unsigned __int8 *)(v35 + v10 + 2);
            unint64_t v102 = v35 + 3;
          }
        }
        *unint64_t v11 = v102;
        *(void *)&v100[v99] = v101;
        v99 += 8;
      }
      unint64_t v103 = *((unsigned int *)v19 + 2);
      unint64_t v35 = v102;
    }
    while (v99 < v103);
    LODWORD(v88) = v18[3] + v103;
    goto LABEL_408;
  }
}

uint64_t skipDBFData(uint64_t result, int a2, uint64_t *a3, uint64_t a4, int a5)
{
  if (result != 14)
  {
    if ((a2 & 3) == 2)
    {
      if (result != 15) {
        goto LABEL_11;
      }
    }
    else
    {
      if ((a2 & 1) == 0)
      {
        uint64_t v11 = 8;
        switch((int)result)
        {
          case 0:
          case 1:
          case 2:
            uint64_t v7 = *a3 + 1;
            break;
          case 3:
          case 4:
            uint64_t v20 = *a3;
            if (*(char *)(a4 + *a3) < 0)
            {
              unsigned int v26 = *(unsigned __int8 *)(a4 + *a3);
              if (v26 >= 0xC0)
              {
                if (v26 >= 0xE0)
                {
                  unsigned int v36 = __si_assert_copy_extra_1921(0);
                  int v37 = v36;
                  uint64_t v38 = "";
                  if (v36) {
                    uint64_t v38 = v36;
                  }
                  __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v38);
                  free(v37);
                  if (__valid_fs(-1))
                  {
                    MEMORY[0xBAD] = -559038737;
                    abort();
                  }
                  MEMORY[0xC00] = -559038737;
                  abort();
                }
                uint64_t v7 = v20 + 3;
              }
              else
              {
                uint64_t v7 = v20 + 2;
              }
            }
            else
            {
              uint64_t v7 = v20 + 1;
            }
            break;
          case 5:
          case 6:
          case 15:
            goto LABEL_29;
          case 7:
          case 8:
            uint64_t v6 = *a3;
            int v12 = *(char *)(a4 + *a3);
            if (v12 < 0) {
              goto LABEL_18;
            }
            goto LABEL_30;
          case 9:
            uint64_t v11 = 4;
            goto LABEL_113;
          case 10:
          case 12:
            goto LABEL_113;
          default:
            goto LABEL_25;
        }
        goto LABEL_114;
      }
      if (result != 15)
      {
LABEL_31:
        uint64_t v16 = *a3;
        uint64_t v17 = *a3 + 1;
        unsigned int v18 = *(unsigned __int8 *)(a4 + *a3);
        if (*(char *)(a4 + *a3) < 0)
        {
          if (v18 <= 0xBF)
          {
            uint64_t v7 = v16 + 2 + (*(unsigned __int8 *)(a4 + v17) | ((v18 & 0x3F) << 8));
            goto LABEL_114;
          }
          if (v18 <= 0xDF)
          {
            uint64_t v7 = v16
               + 3
               + (((v18 & 0x1F) << 16) | (*(unsigned __int8 *)(a4 + v17) << 8) | *(unsigned __int8 *)(v16 + a4 + 2));
            goto LABEL_114;
          }
          if (v18 <= 0xEF)
          {
            uint64_t v7 = v16
               + 4
               + (((v18 & 0xF) << 24) | (*(unsigned __int8 *)(a4 + v17) << 16) | (*(unsigned __int8 *)(v16 + a4 + 2) << 8) | *(unsigned __int8 *)(v16 + a4 + 3));
            goto LABEL_114;
          }
          unsigned int v18 = *(_DWORD *)(a4 + v17);
          uint64_t v17 = v16 + 5;
        }
        uint64_t v7 = v17 + v18;
LABEL_114:
        *a3 = v7;
        return result;
      }
    }
LABEL_29:
    uint64_t v6 = *a3;
    if (*(char *)(a4 + *a3) < 0)
    {
      unsigned int v19 = *(unsigned __int8 *)(a4 + *a3);
      if (v19 > 0xBF)
      {
        if (v19 > 0xDF)
        {
          if (v19 > 0xEF)
          {
LABEL_53:
            uint64_t v7 = v6 + 5;
            goto LABEL_114;
          }
LABEL_46:
          uint64_t v7 = v6 + 4;
          goto LABEL_114;
        }
LABEL_40:
        uint64_t v7 = v6 + 3;
        goto LABEL_114;
      }
LABEL_34:
      uint64_t v7 = v6 + 2;
      goto LABEL_114;
    }
LABEL_30:
    uint64_t v7 = v6 + 1;
    goto LABEL_114;
  }
  int v5 = (32 * a2) & 0x1000;
  if (a5) {
    int v5 = 4096;
  }
  if ((((a2 << 7) | (16 * a2)) & 0x4020 | v5) == 0x5020)
  {
    uint64_t v6 = *a3;
    if ((a2 & 4) == 0)
    {
      uint64_t v7 = v6 + *(unsigned __int8 *)(a4 + v6);
      goto LABEL_114;
    }
    int v12 = *(char *)(a4 + v6);
    if (v12 < 0)
    {
LABEL_18:
      if (v12 > 0xBFu)
      {
        if (v12 > 0xDFu)
        {
          if (v12 > 0xEFu)
          {
            if (v12 > 0xF7u)
            {
              if (v12 > 0xFBu)
              {
                if (v12 > 0xFDu)
                {
                  if (v12 == 255) {
                    uint64_t v7 = v6 + 9;
                  }
                  else {
                    uint64_t v7 = v6 + 8;
                  }
                }
                else
                {
                  uint64_t v7 = v6 + 7;
                }
              }
              else
              {
                uint64_t v7 = v6 + 6;
              }
              goto LABEL_114;
            }
            goto LABEL_53;
          }
          goto LABEL_46;
        }
        goto LABEL_40;
      }
      goto LABEL_34;
    }
    goto LABEL_30;
  }
  if ((a2 & 3) != 2)
  {
    if ((a2 & 1) == 0)
    {
LABEL_25:
      uint64_t v13 = *a3;
      uint64_t v14 = *a3 + 1;
      LODWORD(v11) = *(unsigned __int8 *)(a4 + *a3);
      if (*(char *)(a4 + *a3) < 0)
      {
        if (v11 > 0xBF)
        {
          if (v11 > 0xDF)
          {
            if (v11 > 0xEF)
            {
              LODWORD(v11) = *(_DWORD *)(a4 + v14);
              uint64_t v14 = v13 + 5;
            }
            else
            {
              LODWORD(v11) = ((v11 & 0xF) << 24) | (*(unsigned __int8 *)(a4 + v14) << 16) | (*(unsigned __int8 *)(v13 + a4 + 2) << 8) | *(unsigned __int8 *)(v13 + a4 + 3);
              uint64_t v14 = v13 + 4;
            }
          }
          else
          {
            LODWORD(v11) = ((v11 & 0x1F) << 16) | (*(unsigned __int8 *)(a4 + v14) << 8) | *(unsigned __int8 *)(v13 + a4 + 2);
            uint64_t v14 = v13 + 3;
          }
        }
        else
        {
          int v15 = *(unsigned __int8 *)(a4 + v14) | ((v11 & 0x3F) << 8);
          uint64_t v14 = v13 + 2;
          LODWORD(v11) = v15;
        }
      }
      *a3 = v14;
      uint64_t v11 = v11;
LABEL_113:
      uint64_t v7 = *a3 + v11;
      goto LABEL_114;
    }
    goto LABEL_31;
  }
LABEL_11:
  uint64_t v8 = *a3;
  uint64_t v7 = *a3 + 1;
  LODWORD(v9) = *(unsigned __int8 *)(a4 + *a3);
  if (*(char *)(a4 + *a3) < 0)
  {
    if (v9 > 0xBF)
    {
      if (v9 > 0xDF)
      {
        if (v9 > 0xEF)
        {
          LODWORD(v9) = *(_DWORD *)(a4 + v7);
          uint64_t v7 = v8 + 5;
        }
        else
        {
          LODWORD(v9) = ((v9 & 0xF) << 24) | (*(unsigned __int8 *)(a4 + v7) << 16) | (*(unsigned __int8 *)(v8 + a4 + 2) << 8) | *(unsigned __int8 *)(v8 + a4 + 3);
          uint64_t v7 = v8 + 4;
        }
      }
      else
      {
        LODWORD(v9) = ((v9 & 0x1F) << 16) | (*(unsigned __int8 *)(a4 + v7) << 8) | *(unsigned __int8 *)(v8 + a4 + 2);
        uint64_t v7 = v8 + 3;
      }
    }
    else
    {
      int v10 = *(unsigned __int8 *)(a4 + v7) | ((v9 & 0x3F) << 8);
      uint64_t v7 = v8 + 2;
      LODWORD(v9) = v10;
    }
  }
  *a3 = v7;
  if ((result - 9) < 4 || result == 14)
  {
    v7 += v9;
    goto LABEL_114;
  }
  if (v9)
  {
    uint64_t v9 = v9;
    switch((int)result)
    {
      case 0:
      case 1:
      case 2:
        if (v9 <= 1uLL) {
          uint64_t v9 = 1;
        }
        v7 += v9;
        goto LABEL_114;
      case 3:
      case 4:
        unint64_t v27 = 0;
        do
        {
          if (*(char *)(a4 + v7) < 0)
          {
            unsigned int v29 = *(unsigned __int8 *)(a4 + v7);
            if (v29 >= 0xC0)
            {
              if (v29 > 0xDF)
              {
                unsigned int v32 = __si_assert_copy_extra_1921(0);
                int v33 = v32;
                uint64_t v34 = "";
                if (v32) {
                  uint64_t v34 = v32;
                }
                __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v34);
                free(v33);
                if (__valid_fs(-1)) {
                  uint64_t v35 = 2989;
                }
                else {
                  uint64_t v35 = 3072;
                }
                *(_DWORD *)uint64_t v35 = -559038737;
                abort();
              }
              uint64_t v28 = 3;
            }
            else
            {
              uint64_t v28 = 2;
            }
          }
          else
          {
            uint64_t v28 = 1;
          }
          v7 += v28;
          *a3 = v7;
          v27 += 2;
        }
        while (v27 < v9);
        return result;
      case 5:
      case 6:
      case 15:
        unint64_t v21 = 0;
        do
        {
          if (*(char *)(a4 + v7) < 0)
          {
            unsigned int v22 = *(unsigned __int8 *)(a4 + v7);
            uint64_t v23 = v7 + 2;
            uint64_t v24 = v7 + 3;
            uint64_t v25 = v7 + 4;
            v7 += 5;
            if (v22 < 0xF0) {
              uint64_t v7 = v25;
            }
            if (v22 < 0xE0) {
              uint64_t v7 = v24;
            }
            if (v22 < 0xC0) {
              uint64_t v7 = v23;
            }
          }
          else
          {
            ++v7;
          }
          v21 += 4;
        }
        while (v21 < v9);
        goto LABEL_114;
      case 7:
      case 8:
        unint64_t v30 = 0;
        do
        {
          if (*(char *)(a4 + v7) < 0)
          {
            unsigned int v31 = *(unsigned __int8 *)(a4 + v7);
            if (v31 >= 0xC0)
            {
              if (v31 >= 0xE0)
              {
                if (v31 >= 0xF0)
                {
                  if (v31 >= 0xF8)
                  {
                    if (v31 >= 0xFC)
                    {
                      if (v31 >= 0xFE)
                      {
                        if (v31 == 255) {
                          v7 += 9;
                        }
                        else {
                          v7 += 8;
                        }
                      }
                      else
                      {
                        v7 += 7;
                      }
                    }
                    else
                    {
                      v7 += 6;
                    }
                  }
                  else
                  {
                    v7 += 5;
                  }
                }
                else
                {
                  v7 += 4;
                }
              }
              else
              {
                v7 += 3;
              }
            }
            else
            {
              v7 += 2;
            }
          }
          else
          {
            ++v7;
          }
          v30 += 8;
        }
        while (v30 < v9);
        goto LABEL_114;
      default:
        while (1)
          ;
    }
  }
  return result;
}

char *__dboi_inflateDBO_block_invoke(uint64_t a1, char *a2, size_t a3, unint64_t a4)
{
  unint64_t v4 = *(void ***)(a1 + 32);
  int v5 = *v4;
  if (a2)
  {
    uint64_t v6 = a2;
    uint64_t v7 = &a2[a4];
    if ((unint64_t)&a2[a4] > v5[2])
    {
      uint64_t v9 = slab_new(v4, a4, 250);
      memcpy(v9, v6, a3);
      return (char *)v9;
    }
LABEL_5:
    v5[1] = v7;
    return v6;
  }
  uint64_t v6 = (char *)v5[1];
  uint64_t v7 = &v6[a4];
  if ((unint64_t)&v6[a4 + 8] < v5[2]) {
    goto LABEL_5;
  }
  return (char *)slab_new(v4, a4, 250);
}

void *slab_new(void **a1, unint64_t a2, int a3)
{
  unint64_t v4 = *a1;
  unsigned int v18 = *a1;
  if (a2 >= 0xFFFE9)
  {
    uint64_t v17 = 0;
    unint64_t v5 = a2 + 24;
    if (!slab_vm_allocate((void **)&v17, a2 + 24, a3))
    {
      uint64_t v6 = v17;
      uint64_t v7 = (char *)v17 + v5;
      v17[1] = (char *)v17 + v5;
      v6[2] = v7;
      *uint64_t v6 = *v4;
      *unint64_t v4 = v6;
      return v6 + 3;
    }
    uint64_t v11 = __si_assert_copy_extra_329();
    int v12 = v11;
    uint64_t v13 = "";
    if (v11) {
      uint64_t v13 = v11;
    }
    __message_assert(v11, "slab_allocator.c", 438, "kr == 0", v13);
LABEL_13:
    free(v12);
    if (__valid_fs(-1)) {
      uint64_t v16 = 2989;
    }
    else {
      uint64_t v16 = 3072;
    }
    *(_DWORD *)uint64_t v16 = -559038737;
    abort();
  }
  if (slab_vm_allocate((void **)&v18, 0x100000uLL, a3))
  {
    uint64_t v14 = __si_assert_copy_extra_329();
    int v12 = v14;
    int v15 = "";
    if (v14) {
      int v15 = v14;
    }
    __message_assert(v14, "slab_allocator.c", 453, "kr==0", v15);
    goto LABEL_13;
  }
  int v10 = v18;
  *unsigned int v18 = *a1;
  *a1 = v10;
  uint64_t result = v10 + 3;
  v10[1] = (char *)v10 + a2 + 24;
  v10[2] = v10 + 0x20000;
  return result;
}

BOOL SIValidIndex(BOOL result)
{
  if (result) {
    return (atomic_load_explicit((atomic_uchar *volatile)(result + 2431), memory_order_acquire) & 1) == 0;
  }
  return result;
}

void db_apply_for_field_ids_matching_name_locked(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  memset(v8, 0, sizeof(v8));
  unint64_t v4 = db_copy_field_ids_with_buffer_locked(a1, a2, (uint64_t)v8, 8uLL, 0);
  if (v4)
  {
    unint64_t v5 = v4;
    if (*v4)
    {
      uint64_t v6 = v4 + 1;
      do
        (*(void (**)(uint64_t))(a3 + 16))(a3);
      while (*v6++);
    }
    if (v5 != v8) {
      free(v5);
    }
  }
}

void *db_copy_field_ids_with_buffer_locked(uint64_t a1, char *a2, uint64_t a3, unint64_t a4, _DWORD *a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a1 != 1685287992)
  {
    int v10 = *__error();
    uint64_t v11 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v12 = *(_DWORD *)a1;
      *(_DWORD *)stat buf = 136315650;
      uint64_t v17 = "db_copy_field_ids_with_buffer_locked";
      __int16 v18 = 1024;
      int v19 = 286;
      __int16 v20 = 1024;
      int v21 = v12;
      _os_log_error_impl(&dword_1BD672000, v11, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v10;
    uint64_t v13 = __si_assert_copy_extra_329();
    uint64_t v14 = v13;
    if (v13) {
      int v15 = v13;
    }
    else {
      int v15 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 286, v15);
    free(v14);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  uint64_t result = internal_copy_field_ids(a1, a2, a3, a4, 1);
  if (a5)
  {
    uint64_t v8 = *(void *)(a1 + 880);
    if ((*(unsigned char *)(a1 + 804) & 0x14) != 0)
    {
      if (v8)
      {
        int v9 = *(_DWORD *)(v8 + 216);
        if (v9 == -270471200)
        {
          uint64_t v8 = *(void *)(v8 + 376);
        }
        else
        {
          if (v9 != 1684300900)
          {
            if (v9 == 842150450) {
              LODWORD(v8) = *(_DWORD *)(v8 + 1388) - 1;
            }
            else {
              LODWORD(v8) = 0;
            }
            goto LABEL_14;
          }
          uint64_t v8 = *(void *)(v8 + 4504);
        }
        LODWORD(v8) = v8 - 1;
      }
    }
    else
    {
      LODWORD(v8) = *(_DWORD *)(v8 + 56);
    }
LABEL_14:
    *a5 = v8;
  }
  return result;
}

uint64_t __preIterateQueryForIndex_block_invoke_164(uint64_t a1, int a2)
{
  uint64_t result = db_get_field_name_for_id_locked(*(int **)(*(void *)(a1 + 40) + 1184), a2);
  if (result)
  {
    if ((*(unsigned __int8 *)(result - 2) | 4) == 0xF) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) |= *(unsigned char *)(a1 + 48) & *(unsigned char *)(result - 1);
    }
  }
  return result;
}

__CFDictionary *decodeDBOToDictionary(int *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, CFAllocatorRef allocator)
{
  if (a5) {
    int v15 = (const CFDictionaryKeyCallBacks *)&kSIDictionaryPropertyIdKeyCallbacks;
  }
  else {
    int v15 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  }
  theDict = CFDictionaryCreateMutable(allocator, 0, v15, MEMORY[0x1E4F1D540]);
  int v50 = 0;
  *(void *)uint64_t v48 = 0;
  cStr = 0;
  if (a5 == 1) {
    p_cStr = 0;
  }
  else {
    p_cStr = (uint64_t *)&cStr;
  }
  while (db_next_field(a1, a2, 0, &v50, p_cStr, v48) == 35)
  {
    uint64_t v17 = *(void *)v48;
    int v18 = *(unsigned __int16 *)(*(void *)v48 + 2);
    if ((v18 & a4) == 0 && (v18 & a3) == a3)
    {
      switch(a5)
      {
        case 0:
          CFStringRef v21 = CFStringCreateWithCString(allocator, cStr, 0x8000100u);
          uint64_t v17 = *(void *)v48;
          goto LABEL_34;
        case 1:
          int v20 = *(_DWORD *)(*(void *)v48 + 4);
LABEL_16:
          CFStringRef v21 = (CFStringRef)(v20 | ((unsigned __int16)(v18 & 0x100) << 23));
          goto LABEL_34;
        case 2:
          int id_for_field = db_get_id_for_field(a1, cStr);
          if (!a7 || id_for_field != a7)
          {
            if (id_for_field != a6 || a6 == 0) {
              int v24 = id_for_field;
            }
            else {
              int v24 = id_for_field | 0x20000000;
            }
            uint64_t v17 = *(void *)v48;
            int v18 = *(unsigned __int16 *)(*(void *)v48 + 2);
            int v25 = (v18 << 24) & 0x8000000;
            if ((v18 & 0x4000) != 0) {
              int v25 = 0x10000000;
            }
            int v20 = v25 | v24;
            if ((~v18 & 0x5020) == 0 && **(_WORD **)v48 == 14) {
              v20 |= 0x4000000u;
            }
            goto LABEL_16;
          }
          break;
        default:
          CFStringRef v21 = 0;
LABEL_34:
          CFDictionaryRef v26 = _decodeSDBField((unint64_t)a1, (unsigned __int16 *)v17, (unsigned __int8 *)(v17 + 13), 0, a8, a9, 0, allocator);
          if (v26)
          {
            CFDictionaryRef v27 = v26;
            CFDictionarySetValue(theDict, v21, v26);
            CFRelease(v27);
          }
          if (!a5)
          {
            if (v21) {
              CFRelease(v21);
            }
          }
          break;
      }
    }
  }
  if ((a3 & 0x800) != 0 || (unint64_t v28 = *(void *)(a2 + 16)) == 0)
  {
    if ((a3 & 0x800) == 0) {
      goto LABEL_47;
    }
  }
  else
  {
    if (a5)
    {
      unsigned int v29 = (__CFString *)(db_get_id_for_field(a1, "kMDItemAttributeChangeDate") | 0x80000000);
      unint64_t v28 = *(void *)(a2 + 16);
    }
    else
    {
      unsigned int v29 = @"kMDItemAttributeChangeDate";
    }
    CFDateRef v30 = CFDateCreate(allocator, (double)v28 / 1000000.0 - *MEMORY[0x1E4F1CF78]);
    CFDictionarySetValue(theDict, v29, v30);
    CFRelease(v30);
LABEL_47:
    CFAllocatorRef v31 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    v44[0] = MEMORY[0x1E4F143A8];
    v44[1] = 0x40000000;
    size_t v45 = __decodeDBOToDictionary_block_invoke;
    uint64_t v46 = &__block_descriptor_tmp_104;
    CFMutableArrayRef v47 = Mutable;
    if (a1)
    {
      uint64_t v42 = 0;
      *(void *)unint64_t v43 = 0;
      if (!db_get_field(a1, a2, "kMDItemPrimaryRecipientEmailAddresses", (unint64_t *)v43, &v42))
      {
        CFDictionaryRef v33 = _decodeSDBField((unint64_t)a1, *(unsigned __int16 **)v43, (unsigned __int8 *)(*(void *)v43 + 13), 0, 0, 0, 0, v31);
        v45((uint64_t)v44, v33);
        CFRelease(v33);
      }
      if (!db_get_field(a1, a2, "kMDItemAdditionalRecipientEmailAddresses", (unint64_t *)v43, &v42))
      {
        CFDictionaryRef v34 = _decodeSDBField((unint64_t)a1, *(unsigned __int16 **)v43, (unsigned __int8 *)(*(void *)v43 + 13), 0, 0, 0, 0, v31);
        v45((uint64_t)v44, v34);
        CFRelease(v34);
      }
      if (!db_get_field(a1, a2, "kMDItemHiddenAdditionalRecipientEmailAddresses", (unint64_t *)v43, &v42))
      {
        CFDictionaryRef v35 = _decodeSDBField((unint64_t)a1, *(unsigned __int16 **)v43, (unsigned __int8 *)(*(void *)v43 + 13), 0, 0, 0, 0, v31);
        v45((uint64_t)v44, v35);
        CFRelease(v35);
      }
    }
    if (CFArrayGetCount(Mutable))
    {
      if (a5) {
        unint64_t v36 = db_get_id_for_field(a1, "kMDItemRecipientEmailAddresses");
      }
      else {
        unint64_t v36 = (unint64_t)@"kMDItemRecipientEmailAddresses";
      }
      CFDictionarySetValue(theDict, (const void *)v36, Mutable);
    }
    CFRelease(Mutable);
  }
  return theDict;
}

uint64_t db_get_id_for_field(int *a1, char *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*a1 != 1685287992)
  {
    int v6 = *__error();
    uint64_t v7 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = *a1;
      *(_DWORD *)stat buf = 136315650;
      *(void *)&uint8_t buf[4] = "db_get_id_for_field";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 288;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v8;
      _os_log_error_impl(&dword_1BD672000, v7, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v6;
    int v9 = __si_assert_copy_extra_329();
    int v10 = v9;
    if (v9) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 288, v11);
    free(v10);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  memset(buf, 0, 32);
  int v2 = (uint8_t *)internal_copy_field_ids((uint64_t)a1, a2, (uint64_t)buf, 8uLL, 0);
  if (v2) {
    uint64_t v3 = *(unsigned int *)v2;
  }
  else {
    uint64_t v3 = 4294967294;
  }
  if (v2 != buf) {
    free(v2);
  }
  return v3;
}

CFDictionaryRef _decodeSDBField(unint64_t a1, unsigned __int16 *a2, unsigned __int8 *a3, char **a4, int a5, int a6, int a7, CFAllocatorRef allocator)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    return 0;
  }
  uint64_t v9 = *a2;
  if ((v9 - 1) > 0xF) {
    return 0;
  }
  int v12 = (const char *)a3;
  CFIndex v14 = *((unsigned int *)a2 + 2);
  int v90 = *((_DWORD *)a2 + 2);
  int v15 = a2[1];
  if (v9 != 14)
  {
    if (a4 || (v15 & 0x80) == 0)
    {
      if ((v15 & 0x80) != 0)
      {
        keys[0] = a3;
        values = 0;
        if (db_get_localized_string((int *)a1, (uint64_t)a2, a4, (uint64_t)keys, (uint64_t)&values, a7)) {
          CFStringRef v55 = CFStringCreateWithCString(allocator, "", 0x8000100u);
        }
        else {
          CFStringRef v55 = CFStringCreateWithBytes(allocator, (const UInt8 *)keys[0], (CFIndex)values - (unint64_t)keys[0], 0x8000100u, 0);
        }
        CFDictionaryRef v16 = (CFDictionaryRef)v55;
        if (dword_1E9FC90B4 < 5) {
          return v16;
        }
        CFDictionaryRef v33 = (void *)v55;
        int v34 = *__error();
        unsigned int v40 = _SILogForLogForCategory(4);
        if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_114;
        }
        LODWORD(keys[0]) = 138412290;
        *(void **)((char *)keys + 4) = v33;
        unint64_t v36 = "DB_FIELD_LOCALIZED_STR: %@. ";
      }
      else if ((v15 & 0x20) != 0)
      {
        if (v9 == 11)
        {
          StringArray = createStringArray((int *)a1, a2[1], (const char *)a3, v14, a7, allocator);
          CFDictionaryRef v16 = StringArray;
          if (dword_1E9FC90B4 < 5) {
            return v16;
          }
          CFDictionaryRef v33 = StringArray;
          int v34 = *__error();
          unsigned int v40 = _SILogForLogForCategory(4);
          if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_114;
          }
          LODWORD(keys[0]) = 138412290;
          *(void **)((char *)keys + 4) = v33;
          unint64_t v36 = "db_utf8str: %@. ";
        }
        else
        {
          ScalarArray = createScalarArray((int *)a1, v9, a2[1], (const char *)a3, v14 / SDBTypeSizes[v9], a7, allocator);
          CFDictionaryRef v16 = ScalarArray;
          if (dword_1E9FC90B4 < 5) {
            return v16;
          }
          CFDictionaryRef v33 = ScalarArray;
          int v34 = *__error();
          unsigned int v40 = _SILogForLogForCategory(4);
          if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_114;
          }
          LODWORD(keys[0]) = 138412290;
          *(void **)((char *)keys + 4) = v33;
          unint64_t v36 = "Scalar array: %@. ";
        }
      }
      else
      {
        CFDateRef Value = createValue((int *)a1, v9, a2[1], (const char *)a3, a7, allocator);
        CFDictionaryRef v16 = Value;
        if (dword_1E9FC90B4 < 5) {
          return v16;
        }
        CFDictionaryRef v33 = Value;
        int v34 = *__error();
        unsigned int v40 = _SILogForLogForCategory(4);
        if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_114;
        }
        LODWORD(keys[0]) = 138412290;
        *(void **)((char *)keys + 4) = v33;
        unint64_t v36 = "DB_VAL: %@. ";
      }
LABEL_112:
      int v37 = v40;
      uint32_t v38 = 12;
      goto LABEL_113;
    }
    if ((v15 & 0x110) == 0x10 && a5)
    {
      UniquedDBFCFDateRef Value = (void *)getUniquedDBFValue(a1, 4, a2, a6);
      keys[0] = UniquedDBFValue;
      if (UniquedDBFValue != -2 && UniquedDBFValue)
      {
        values = CFNumberCreate(allocator, kCFNumberCFIndexType, keys);
        unsigned int v29 = (_DWORD *)&unk_1E9FC9000;
        if (values)
        {
          int v87 = &stru_1F18198E8;
          CFDictionaryRef v16 = CFDictionaryCreate(allocator, (const void **)&v87, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          CFRelease(values);
        }
        else
        {
          CFDictionaryRef v16 = 0;
        }
      }
      else
      {
        int v27 = *__error();
        unint64_t v28 = _SILogForLogForCategory(4);
        unsigned int v29 = (int *)&unk_1E9FC9000;
        os_log_type_t v30 = dword_1E9FC90B4 < 3;
        if (os_log_type_enabled(v28, (os_log_type_t)(dword_1E9FC90B4 < 3)))
        {
          int v31 = *((_DWORD *)a2 + 1);
          LODWORD(values) = 67109120;
          HIDWORD(values) = v31;
          _os_log_impl(&dword_1BD672000, v28, v30, "*warn* could not resolve unique dbf value for field %d", (uint8_t *)&values, 8u);
        }
        CFDictionaryRef v16 = 0;
        *__error() = v27;
      }
      goto LABEL_77;
    }
    theArraya = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v14)
    {
LABEL_76:
      CFDictionaryRef v16 = theArraya;
      unsigned int v29 = (int *)&unk_1E9FC9000;
LABEL_77:
      if (v29[45] < 5) {
        return v16;
      }
      CFDictionaryRef v33 = v16;
      int v34 = *__error();
      unsigned int v40 = _SILogForLogForCategory(4);
      if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_114;
      }
      LODWORD(keys[0]) = 138412290;
      *(void **)((char *)keys + 4) = v33;
      unint64_t v36 = "DB_FIELD_LOCALIZED_STR: %@. ";
      goto LABEL_112;
    }
    size_t v44 = &v12[v14];
    while (1)
    {
      if ((v15 & 0x10) != 0)
      {
        int v49 = *(_DWORD *)v12;
        if (a7) {
          string_for_id_locked = (const char *)db_get_string_for_id_locked((int *)a1, v49);
        }
        else {
          string_for_id_locked = (const char *)db_get_string_for_id((int *)a1, v49);
        }
        uint64_t v48 = (const UInt8 *)string_for_id_locked;
        unint64_t v47 = (unint64_t)(v12 + 4);
        if (!string_for_id_locked)
        {
          size_t v45 = &stru_1F18198E8;
          goto LABEL_52;
        }
        int64_t v46 = strlen(string_for_id_locked);
        if (v46 >= 2)
        {
LABEL_61:
          CFIndex v51 = 0;
          while (v48[v51] != 22 || v48[v51 + 1] != 2)
          {
            if (v46 - 1 == ++v51) {
              goto LABEL_71;
            }
          }
          CFStringRef v52 = CFStringCreateWithBytes(allocator, v48, v51, 0x8000100u, 0);
          int64_t v53 = (v51 + 2);
          if (v46 > v53)
          {
            CFStringRef v54 = CFStringCreateWithCString(allocator, (const char *)&v48[v53], 0x8000100u);
            if (v54) {
              size_t v45 = (__CFString *)v54;
            }
            else {
              size_t v45 = &stru_1F18198E8;
            }
            if (!v52) {
              goto LABEL_52;
            }
LABEL_73:
            CFDictionarySetValue(theArraya, v45, v52);
            CFRelease(v52);
            goto LABEL_52;
          }
          goto LABEL_72;
        }
      }
      else
      {
        int64_t v46 = strlen(v12);
        unint64_t v47 = (unint64_t)&v12[v46 + 1];
        uint64_t v48 = (const UInt8 *)v12;
        if (v46 >= 2) {
          goto LABEL_61;
        }
      }
LABEL_71:
      CFStringRef v52 = CFStringCreateWithBytes(allocator, v48, v46, 0x8000100u, 0);
LABEL_72:
      size_t v45 = &stru_1F18198E8;
      if (v52) {
        goto LABEL_73;
      }
LABEL_52:
      CFRelease(v45);
      int v12 = (const char *)v47;
      if (v47 >= (unint64_t)v44) {
        goto LABEL_76;
      }
    }
  }
  if ((~v15 & 0x5020) != 0)
  {
    CFDataRef v32 = CFDataCreate(allocator, a3, v14);
    CFDictionaryRef v16 = v32;
    if (dword_1E9FC90B4 < 5) {
      return v16;
    }
    CFDictionaryRef v33 = v32;
    int v34 = *__error();
    CFDictionaryRef v35 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(keys[0]) = 0;
      unint64_t v36 = "DB Raw";
      int v37 = v35;
      uint32_t v38 = 2;
LABEL_113:
      _os_log_impl(&dword_1BD672000, v37, OS_LOG_TYPE_DEFAULT, v36, (uint8_t *)keys, v38);
    }
LABEL_114:
    *__error() = v34;
    return (CFDictionaryRef)v33;
  }
  if ((v15 & 8) != 0)
  {
    if ((v15 & 0x10) != 0)
    {
      unint64_t v41 = *(void *)((char *)a2 + 13);
      if (v14 >= 8 && v41 && v41 != 4294967294)
      {
        uint64_t v72 = *(void *)(a1 + 920);
        if (a7) {
          uint64_t vector_for_id_locked = db2_get_vector_for_id_locked(v72, v41, &v90, keys);
        }
        else {
          uint64_t vector_for_id_locked = db2_get_vector_for_id(v72, v41, &v90, keys);
        }
        LODWORD(v14) = v90;
        if (vector_for_id_locked)
        {
          int v12 = (const char *)(vector_for_id_locked - 2);
          LODWORD(v14) = v90 + 2;
          v90 += 2;
          CFDictionaryRef v16 = 0;
          if (vector_for_id_locked == 2) {
            return v16;
          }
          goto LABEL_44;
        }
      }
      else
      {
        si_analytics_log_2842("Malformed sdb entry for vector %llx %u", *(void *)((char *)a2 + 13), v14);
      }
      int v12 = 0;
    }
    CFDictionaryRef v16 = 0;
    if (!v12) {
      return v16;
    }
LABEL_44:
    if (v14 < 3) {
      return v16;
    }
    CFDictionaryRef v16 = 0;
    LOBYTE(valuePtr) = 0;
    LOBYTE(valuePtr) = *v12;
    uint64_t v42 = *((unsigned __int8 *)v12 + 1);
    HIBYTE(v89) = v12[1];
    if (valuePtr > 2uLL || v42 > 2) {
      return v16;
    }
    CFIndex v18 = (vector_dimension_vec_sizes_12485[v42] * vector_size_elem_sizes_12484[valuePtr]);
    unint64_t v43 = (const UInt8 *)(v12 + 2);
    int v87 = (void *)(v12 + 2);
    CFNumberRef v82 = CFNumberCreate(allocator, kCFNumberCharType, &valuePtr);
    CFNumberRef v20 = CFNumberCreate(allocator, kCFNumberCharType, (char *)&v89 + 1);
    unint64_t v21 = (unint64_t)&v12[v14];
    if ((unint64_t)&v43[v18] <= v21)
    {
      if ((a2[1] & 0x20) != 0)
      {
        CFArrayRef theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
        do
        {
          CFDataRef v74 = CFDataCreate(allocator, v43, v18);
          *(_OWORD *)keys = xmmword_1E6348060;
          long long v97 = xmmword_1E6348070;
          long long v98 = @"vec_version";
          values = v82;
          CFNumberRef v92 = v20;
          CFDataRef v93 = v74;
          CFNumberRef v94 = 0;
          CFNumberRef v95 = 0;
          CFDictionaryRef v75 = CFDictionaryCreate(allocator, (const void **)keys, (const void **)&values, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          CFRelease(v74);
          if (v75)
          {
            CFArrayAppendValue(theArray, v75);
            CFRelease(v75);
          }
          if ((unint64_t)&v43[v18] >= v21) {
            break;
          }
          uint64_t v76 = &v43[2 * v18];
          v43 += v18;
        }
        while ((unint64_t)v76 <= v21);
        goto LABEL_136;
      }
      goto LABEL_127;
    }
LABEL_48:
    CFDictionaryRef v16 = 0;
LABEL_137:
    CFRelease(v82);
    CFRelease(v20);
    return v16;
  }
  if ((v15 & 0x10) == 0)
  {
    if (v14 >= 3)
    {
      CFDictionaryRef v16 = 0;
      LOBYTE(valuePtr) = *a3;
      uint64_t v17 = a3[1];
      HIBYTE(v89) = a3[1];
      if (valuePtr > 2uLL || v17 > 2) {
        return v16;
      }
      CFIndex v18 = (vector_dimension_vec_sizes_12485[v17]
                         * vector_size_elem_sizes_12484[valuePtr]);
      int v19 = a3 + 2;
      int v87 = a3 + 2;
      CFNumberRef v82 = CFNumberCreate(allocator, kCFNumberCharType, &valuePtr);
      CFNumberRef v20 = CFNumberCreate(allocator, kCFNumberCharType, (char *)&v89 + 1);
      unint64_t v21 = (unint64_t)&v12[v14];
      if ((unint64_t)&v19[v18] <= v21)
      {
        if ((a2[1] & 0x20) != 0)
        {
          CFArrayRef theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
          do
          {
            CFDataRef v22 = CFDataCreate(allocator, v19, v18);
            *(_OWORD *)keys = xmmword_1E6348060;
            long long v97 = xmmword_1E6348070;
            long long v98 = @"vec_version";
            values = v82;
            CFNumberRef v92 = v20;
            CFDataRef v93 = v22;
            CFNumberRef v94 = 0;
            CFNumberRef v95 = 0;
            CFDictionaryRef v23 = CFDictionaryCreate(allocator, (const void **)keys, (const void **)&values, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            CFRelease(v22);
            if (v23)
            {
              CFArrayAppendValue(theArray, v23);
              CFRelease(v23);
            }
            if ((unint64_t)&v19[v18] >= v21) {
              break;
            }
            int v24 = &v19[2 * v18];
            v19 += v18;
          }
          while ((unint64_t)v24 <= v21);
LABEL_136:
          CFDictionaryRef v16 = theArray;
          goto LABEL_137;
        }
LABEL_127:
        CFDictionaryRef v16 = decodeVector(allocator, v18, (const UInt8 **)&v87, v21, v82, v20);
        goto LABEL_137;
      }
      goto LABEL_48;
    }
    return 0;
  }
  __int16 v89 = 0;
  unsigned __int16 valuePtr = 0;
  CFAllocatorRef allocatora = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFDictionaryRef v16 = Mutable;
  if (v14 < 8) {
    return v16;
  }
  CFNumberRef v83 = 0;
  theArrayb = Mutable;
  CFNumberRef cf = 0;
  CFNumberRef v57 = 0;
  int v58 = (void **)((char *)a2 + 13);
  if (v14 >> 3 <= 1) {
    uint64_t v59 = 1;
  }
  else {
    uint64_t v59 = v14 >> 3;
  }
  do
  {
    unsigned int v61 = *v58++;
    unint64_t v60 = (unint64_t)v61;
    int v87 = v61;
    if (v61 == (void *)4294967294)
    {
      unint64_t v77 = __si_assert_copy_extra_1921(0);
      unsigned int v78 = v77;
      __int16 v79 = "";
      if (v77) {
        __int16 v79 = v77;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.c", 2511, "((db_uint32_t)-2) != chunk", v79);
      free(v78);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    LOBYTE(values) = 0;
    keys[0] = 0;
    keys[1] = 0;
    *(void *)&long long v97 = 0;
    data_map_get_data_entry((uint64_t)keys, *(void *)(a1 + 920), v60, &values, a7 != 0);
    if ((_BYTE)values)
    {
      CFIndex v62 = LODWORD(keys[1]);
      size_t v63 = (const UInt8 *)keys[0];
      if (keys[0])
      {
        unsigned int v64 = BYTE2(v97) | (BYTE3(v97) << 8);
        if (v57)
        {
          if (v97 != HIBYTE(v89) || BYTE1(v97) != v89 || v64 != valuePtr) {
            goto LABEL_84;
          }
        }
        else
        {
          LOBYTE(v89) = BYTE1(v97);
          HIBYTE(v89) = v97;
          unsigned __int16 valuePtr = BYTE2(v97) | (BYTE3(v97) << 8);
          CFNumberRef v57 = CFNumberCreate(allocator, kCFNumberCharType, (char *)&v89 + 1);
          CFNumberRef v83 = CFNumberCreate(allocator, kCFNumberCharType, &v89);
          if (v64) {
            CFNumberRef cf = CFNumberCreate(allocator, kCFNumberSInt16Type, &valuePtr);
          }
        }
        CFNumberRef v65 = CFNumberCreate(allocatora, kCFNumberSInt64Type, &v87);
        CFDataRef v66 = CFDataCreate(allocator, v63, v62);
        *(_OWORD *)keys = xmmword_1E6348060;
        long long v97 = xmmword_1E6348070;
        long long v98 = @"vec_version";
        values = v57;
        CFNumberRef v92 = v83;
        CFDataRef v93 = v66;
        CFNumberRef v94 = v65;
        uint64_t v67 = 4;
        if (cf) {
          uint64_t v67 = 5;
        }
        if (v65) {
          CFIndex v68 = v67;
        }
        else {
          CFIndex v68 = 3;
        }
        CFNumberRef v95 = cf;
        CFDictionaryRef v69 = CFDictionaryCreate(allocator, (const void **)keys, (const void **)&values, v68, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFRelease(v66);
        CFRelease(v65);
        if (v69)
        {
          CFArrayAppendValue(theArrayb, v69);
          CFRelease(v69);
        }
      }
    }
LABEL_84:
    --v59;
  }
  while (v59);
  if (v57) {
    CFRelease(v57);
  }
  CFDictionaryRef v16 = theArrayb;
  if (v83) {
    CFRelease(v83);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v16;
}

CFDateRef createValue(int *a1, int a2, __int16 a3, const char *a4, int a5, CFAllocatorRef alloc)
{
  int v25 = a4;
  if (dword_1E9FC90B4 >= 5)
  {
    int v19 = *__error();
    CFNumberRef v20 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(valuePtr) = 0;
      _os_log_impl(&dword_1BD672000, v20, OS_LOG_TYPE_DEFAULT, (const char *)&unk_1BDAB99BE, (uint8_t *)&valuePtr, 2u);
    }
    *__error() = v19;
  }
  switch(a2)
  {
    case 1:
      *(void *)&double v12 = *a4;
      double valuePtr = v12;
      if ((a3 & 0x400) == 0) {
        goto LABEL_17;
      }
      goto LABEL_12;
    case 2:
      *(void *)&double v12 = *(unsigned __int8 *)a4;
      double valuePtr = v12;
      if ((a3 & 0x400) == 0) {
        goto LABEL_17;
      }
      goto LABEL_12;
    case 3:
      *(void *)&double v12 = *(__int16 *)a4;
      double valuePtr = v12;
      if ((a3 & 0x400) == 0) {
        goto LABEL_17;
      }
      goto LABEL_12;
    case 4:
      *(void *)&double v12 = *(unsigned __int16 *)a4;
      double valuePtr = v12;
      if ((a3 & 0x400) != 0) {
        goto LABEL_12;
      }
      goto LABEL_17;
    case 5:
    case 7:
    case 8:
      double v12 = *(double *)a4;
      double valuePtr = *(double *)a4;
      if ((a3 & 0x400) == 0) {
        goto LABEL_17;
      }
      goto LABEL_12;
    case 6:
      *(void *)&double v12 = *(unsigned int *)a4;
      double valuePtr = v12;
      if ((a3 & 0x400) == 0)
      {
LABEL_17:
        CFAllocatorRef v15 = alloc;
        CFNumberType v16 = kCFNumberSInt64Type;
        goto LABEL_18;
      }
LABEL_12:
      if (v12 == 0.0) {
        uint64_t v13 = (uint64_t *)MEMORY[0x1E4F1CFC8];
      }
      else {
        uint64_t v13 = (uint64_t *)MEMORY[0x1E4F1CFD0];
      }
      CFDateRef result = (CFDateRef)*v13;
      break;
    case 9:
      double v17 = *(float *)a4;
      double valuePtr = v17;
      if ((a3 & 0x400) != 0) {
        goto LABEL_21;
      }
      goto LABEL_25;
    case 10:
      double v17 = *(double *)a4;
      double valuePtr = *(double *)a4;
      if ((a3 & 0x400) != 0)
      {
LABEL_21:
        CFIndex v18 = (uint64_t *)MEMORY[0x1E4F1CFC8];
        if (v17 != 0.0) {
          CFIndex v18 = (uint64_t *)MEMORY[0x1E4F1CFD0];
        }
        CFDateRef result = (CFDateRef)*v18;
      }
      else
      {
LABEL_25:
        CFAllocatorRef v15 = alloc;
        CFNumberType v16 = kCFNumberFloat64Type;
LABEL_18:
        CFDateRef result = CFNumberCreate(v15, v16, &valuePtr);
      }
      break;
    case 11:
      return (CFDateRef)createString(a1, a3, &v25, a5, alloc);
    case 12:
      return CFDateCreate(alloc, *(CFAbsoluteTime *)a4);
    default:
      unint64_t v21 = __si_assert_copy_extra_1921(0);
      CFDataRef v22 = v21;
      CFDictionaryRef v23 = "";
      if (v21) {
        CFDictionaryRef v23 = v21;
      }
      __message_assert("%s:%u: failed assertion '%s' %s Unexpected type %d", "ldb.c", 2325, "0", v23, a2);
      free(v22);
      if (__valid_fsp(0))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
  }
  return result;
}

uint64_t db_iterate_localized_field(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t v5 = (int *)(a2 + 13);
  uint64_t v6 = *(unsigned int *)(a2 + 8);
  unint64_t v7 = a2 + 13 + v6;
  if ((*(_WORD *)(a2 + 2) & 0x10) == 0)
  {
    if (!v6) {
      return result;
    }
    while (1)
    {
      for (uint64_t i = v5; *(unsigned char *)i != 22; uint64_t i = (int *)((char *)i + 1))
      {
        if (!*(unsigned char *)i) {
          return result;
        }
LABEL_5:
        ;
      }
      if (*((unsigned char *)i + 1) != 2) {
        goto LABEL_5;
      }
      CFDateRef result = (*(uint64_t (**)(uint64_t, int *, int *))(a4 + 16))(a4, v5, i);
      if ((result & 1) == 0)
      {
        CFDateRef result = strlen((const char *)i);
        unint64_t v5 = (int *)((char *)i + result + 1);
        if ((unint64_t)v5 < v7) {
          continue;
        }
      }
      return result;
    }
  }
  if (v6)
  {
    uint64_t v10 = result;
    do
    {
      unsigned int v12 = 255;
      CFDateRef result = get_string_and_length_for_id_12082(v10, 1u, *v5, &v12, a3);
      if (result) {
        BOOL v11 = v12 == 0;
      }
      else {
        BOOL v11 = 1;
      }
      if (!v11 && *(unsigned char *)(result + v12) == 22 && *(unsigned char *)(result + v12 + 1) == 2)
      {
        CFDateRef result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a4, result);
        if (result) {
          break;
        }
      }
      ++v5;
    }
    while ((unint64_t)v5 < v7);
  }
  return result;
}

uint64_t db_next_field(_DWORD *a1, uint64_t a2, int a3, _DWORD *a4, uint64_t *a5, void *a6)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (*a1 != 1685287992)
  {
    int v19 = *__error();
    CFNumberRef v20 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      int v21 = *a1;
      *(_DWORD *)stat buf = 136315650;
      CFDictionaryRef v26 = "db_next_field";
      __int16 v27 = 1024;
      int v28 = 409;
      __int16 v29 = 1024;
      int v30 = v21;
      _os_log_error_impl(&dword_1BD672000, v20, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v19;
    CFDataRef v22 = __si_assert_copy_extra_329();
    CFDictionaryRef v23 = v22;
    if (v22) {
      int v24 = v22;
    }
    else {
      int v24 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 409, v24);
    free(v23);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  int v8 = a2;
  LODWORD(v9) = *a4;
  if (*a4) {
    uint64_t v9 = v9;
  }
  else {
    uint64_t v9 = 48;
  }
  if (v9 >= *(_DWORD *)(a2 + 12)) {
    return 0;
  }
  uint64_t v12 = a2 + v9;
  if (a5
    && (uint64_t string_and_length_for_id_12082 = get_string_and_length_for_id_12082((uint64_t)a1, 0, *(_DWORD *)(v12 + 4), 0, a3), (*a5 = string_and_length_for_id_12082) == 0))
  {
    int v15 = *__error();
    CFNumberType v16 = _SILogForLogForCategory(7);
    os_log_type_t v17 = 2 * (dword_1E9FC90C0 < 4);
    if (os_log_type_enabled(v16, v17))
    {
      int v18 = *(_DWORD *)(v12 + 4);
      *(_DWORD *)stat buf = 136315394;
      CFDictionaryRef v26 = (const char *)(a1 + 81);
      __int16 v27 = 1024;
      int v28 = v18;
      _os_log_impl(&dword_1BD672000, v16, v17, "%s : ERR: XXXdbg - whoa dude... can't get name ptr for name id %d\n", buf, 0x12u);
    }
    *__error() = v15;
    return 2;
  }
  else
  {
    if (a6) {
      *a6 = v12;
    }
    *a4 = v12 + *(_DWORD *)(v12 + 8) - v8 + 13;
    return 35;
  }
}

uint64_t data_map_get_data(uint64_t a1, unint64_t a2, void *a3)
{
  int v3 = *(_DWORD *)(a1 + 216);
  switch(v3)
  {
    case -270471200:
      return data_map_ext_get_data(a1, a2, a3);
    case 1684300900:
      return data_map64_get_data(a1, a2, a3);
    case 842150450:
      return data_map32_get_data(a1, a2, a3);
    default:
      unint64_t v5 = __si_assert_copy_extra_329();
      uint64_t v6 = v5;
      unint64_t v7 = "";
      if (v5) {
        unint64_t v7 = v5;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "data_map.c", 352, "data_map_is_32(data_map)", v7);
      free(v6);
      if (__valid_fs(-1)) {
        uint64_t v8 = 2989;
      }
      else {
        uint64_t v8 = 3072;
      }
      *(_DWORD *)uint64_t v8 = -559038737;
      abort();
  }
}

uint64_t __db2_get_localized_string_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 2;
  if (!strcmp((const char *)(a3 + 2), *(const char **)(a1 + 72)))
  {
    **(void **)(a1 + 80) = a2;
    **(void **)(a1 + 88) = a3;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
  int v8 = *(_DWORD *)(v7 + 24);
  if (v8 >= *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    uint64_t v9 = malloc_type_malloc(16 * v8, 0x10040436913F5uLL);
    if (!v9)
    {
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v12 = a1 + 32;
      *(unsigned char *)(*(void *)(v14 + 8) + 24) = 1;
      return *(unsigned __int8 *)(*(void *)(*(void *)v12 + 8) + 24);
    }
    uint64_t v10 = v9;
    memcpy(v9, *(const void **)(*(void *)(*(void *)(a1 + 64) + 8) + 24), 8 * *(int *)(*(void *)(*(void *)(a1 + 48) + 8) + 24));
    if (*(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) != 128) {
      free(*(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 24));
    }
    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v10;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) *= 2;
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
    int v8 = *(_DWORD *)(v7 + 24);
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
  *(_DWORD *)(v7 + 24) = v8 + 1;
  *(void *)(v11 + 8 * v8) = v6;
  uint64_t v12 = a1 + 32;
  return *(unsigned __int8 *)(*(void *)(*(void *)v12 + 8) + 24);
}

uint64_t __db2_get_localized_string_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!strcmp((const char *)(a3 + 2), *(const char **)(a1 + 48)))
  {
    **(void **)(a1 + 56) = a2;
    **(void **)(a1 + 64) = a3;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
}

__CFArray *createStringArray(int *a1, int a2, const char *a3, unsigned int a4, int a5, CFAllocatorRef allocator)
{
  uint64_t v9 = (unsigned int *)a3;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  CFNumberRef v20 = a3;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
  memset(v21, 0, sizeof(v21));
  if ((~a2 & 0x8010) != 0)
  {
    BOOL v13 = 0;
    uint64_t v14 = 0;
    if (!a4) {
      goto LABEL_9;
    }
  }
  else
  {
    unsigned int v19 = 512;
    uint64_t v9 = (unsigned int *)copyDataForUniquedValue((uint64_t)a1, *v9, v21, &v19);
    CFNumberRef v20 = (const char *)v9;
    BOOL v13 = v9 != (unsigned int *)v21;
    a4 = v19;
    uint64_t v14 = v9;
    if (!v19) {
      goto LABEL_9;
    }
  }
  unint64_t v15 = (unint64_t)v9 + a4;
  do
  {
    CFNumberType v16 = createString(a1, a2, &v20, a5, allocator);
    if (v16)
    {
      os_log_type_t v17 = v16;
      CFArrayAppendValue(Mutable, v16);
      CFRelease(v17);
    }
  }
  while ((unint64_t)v20 < v15);
LABEL_9:
  if (v13) {
    free(v14);
  }
  return Mutable;
}

uint64_t db_get_string_for_id(int *a1, int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*a1 != 1685287992)
  {
    int v4 = *__error();
    unint64_t v5 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = *a1;
      *(_DWORD *)stat buf = 136315650;
      uint64_t v11 = "db_get_string_for_id";
      __int16 v12 = 1024;
      int v13 = 390;
      __int16 v14 = 1024;
      int v15 = v6;
      _os_log_error_impl(&dword_1BD672000, v5, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v4;
    uint64_t v7 = __si_assert_copy_extra_329();
    int v8 = v7;
    if (v7) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 390, v9);
    free(v8);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  return get_string_and_length_for_id_12082((uint64_t)a1, 1u, a2, 0, 0);
}

__CFArray *createScalarArray(int *a1, unsigned int a2, __int16 a3, const char *a4, int a5, int a6, CFAllocatorRef allocator)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
  if (a5)
  {
    uint64_t v15 = SDBTypeSizes[a2];
    do
    {
      CFDateRef Value = createValue(a1, a2, a3, a4, a6, allocator);
      CFArrayAppendValue(Mutable, Value);
      if (Value) {
        CFRelease(Value);
      }
      a4 += v15;
      --a5;
    }
    while (a5);
  }
  return Mutable;
}

void __decodeDBOToDictionary_block_invoke(uint64_t a1, const __CFArray *a2)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  if (TypeID == CFGetTypeID(a2))
  {
    for (CFIndex i = 0; CFArrayGetCount(a2) > i; ++i)
    {
      int v6 = *(__CFArray **)(a1 + 32);
      ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
      CFArrayAppendValue(v6, ValueAtIndex);
    }
  }
  else
  {
    CFTypeID v8 = CFStringGetTypeID();
    if (v8 == CFGetTypeID(a2))
    {
      uint64_t v9 = *(__CFArray **)(a1 + 32);
      CFArrayAppendValue(v9, a2);
    }
  }
}

void __CIIndexSetFinalize(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16) <= 0xFFFFFFF6)
  {
    int v2 = *(void **)(a1 + 40);
    unint64_t v3 = 4 * *(unsigned int *)(a1 + 32);
    if (v3 >= *MEMORY[0x1E4F14B00] >> 1) {
      munmap(v2, (*MEMORY[0x1E4F14B00] + v3 - 1) & -*MEMORY[0x1E4F14B00]);
    }
    else {
      free(v2);
    }
  }
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = 0;
}

uint64_t si_lqn_hash(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  if (v3) {
    uint64_t v4 = db_hash_qps(v3);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = v2 + v1 + v4;
  int v6 = HIDWORD(v5) - v5;
  int v7 = HIDWORD(v5) - v5 - 8;
  LODWORD(v5) = (v5 - (HIDWORD(v5) - v5) - 1640531527) ^ (v7 << 8);
  unsigned int v8 = (16 - v6 - v5) ^ (v5 >> 13);
  int v9 = (v7 - v5 - v8) ^ (v8 >> 12);
  LODWORD(v5) = (v5 - v8 - v9) ^ (v9 << 16);
  unsigned int v10 = (v8 - v9 - v5) ^ (v5 >> 5);
  int v11 = (v9 - v5 - v10) ^ (v10 >> 3);
  return (v10 - v11 - ((v5 - v10 - v11) ^ (v11 << 10))) ^ (((v5 - v10 - v11) ^ (v11 << 10)) >> 15);
}

uint64_t qpHash(uint64_t a1)
{
  return db_hash_qps(a1);
}

uint64_t db_hash_qps(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 0xC0000) != 0 && (*(void *)(a1 + 32) & 0x200) == 0)
  {
    uint64_t v4 = *(char **)(a1 + 288);
    size_t v5 = 8 * *(int *)(a1 + 40);
  }
  else
  {
    uint64_t v4 = *(char **)(a1 + 72);
    if (v4)
    {
LABEL_6:
      size_t v5 = strlen(v4);
      goto LABEL_8;
    }
    int v15 = *(_DWORD *)(a1 + 24);
    if ((v15 - 11) > 1)
    {
      if (v15 == 15)
      {
        uint64_t v4 = *(char **)(a1 + 296);
        unint64_t v16 = *(unsigned int *)(a1 + 60);
        uint64_t v17 = v16 & 3;
        uint64_t v18 = (v16 >> 2) & 3;
        if (v17 == 3 || v18 == 3) {
          size_t v5 = -1;
        }
        else {
          size_t v5 = (vector_dimension_vec_sizes_12485[v17] * vector_size_elem_sizes_12484[v18]);
        }
        goto LABEL_8;
      }
    }
    else if (*(_DWORD *)(a1 + 40) == 2)
    {
      uint64_t v4 = **(char ***)(a1 + 168);
      goto LABEL_6;
    }
    uint64_t v4 = 0;
    size_t v5 = 0;
  }
LABEL_8:
  size_t v6 = strlen(*(const char **)a1);
  int v7 = hash_bytes(*(unsigned __int16 **)a1, v6);
  unsigned int v8 = (v2 >> 5) & 0x1FFF800 ^ (((v2 & 0xFFFE) + 8) << 16) ^ ((v2 & 0xFFFE) + 8);
  int v9 = (WORD2(v2) & 0xFFE2) + v8 + (v8 >> 11);
  int v10 = (v2 >> 37) & 0x7FFF800 ^ (v9 << 16);
  unsigned int v11 = (((v10 ^ v9) + ((v10 ^ v9) >> 11)) ^ (8 * ((v10 ^ v9) + ((v10 ^ v9) >> 11))))
      + ((((v10 ^ v9) + ((v10 ^ v9) >> 11)) ^ (8 * ((v10 ^ v9) + ((v10 ^ v9) >> 11)))) >> 5);
  unsigned int v12 = (v11 ^ (16 * v11)) + ((v11 ^ (16 * v11)) >> 17);
  uint64_t v13 = v7 ^ (*(_DWORD *)(a1 + 24) << 24) ^ *(float *)(a1 + 52) ^ *(float *)(a1 + 56) ^ ((v12 ^ (v12 << 25)) + ((v12 ^ (v12 << 25)) >> 6));
  if (v4) {
    return hash_bytes((unsigned __int16 *)v4, v5) ^ v13;
  }
  return v13;
}

uint64_t hash_bytes(unsigned __int16 *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    unint64_t v3 = a2 & 3;
    if (a2 >= 4)
    {
      unint64_t v7 = a2 >> 2;
      unsigned int v8 = (unsigned __int8 *)a1 + 3;
      unsigned int v4 = a2;
      do
      {
        unsigned int v9 = *(unsigned __int16 *)(v8 - 3) + v4;
        int v10 = ((*v8 << 19) | (*(v8 - 1) << 11)) ^ (v9 << 16);
        unsigned int v4 = (v10 ^ v9) + ((v10 ^ v9) >> 11);
        v8 += 4;
        --v7;
      }
      while (v7);
      a1 = (unsigned __int16 *)((char *)a1 + (a2 & 0xFFFFFFFFFFFFFFFCLL));
      if (v3 != 1)
      {
LABEL_5:
        if (v3 == 2)
        {
          unsigned int v4 = ((*a1 + v4) ^ ((*a1 + v4) << 11)) + (((*a1 + v4) ^ ((*a1 + v4) << 11)) >> 17);
        }
        else if (v3 == 3)
        {
          unsigned int v5 = *a1 + v4;
          int v6 = (*((char *)a1 + 2) << 18) ^ (v5 << 16);
          unsigned int v4 = (v6 ^ v5) + ((v6 ^ v5) >> 11);
        }
        goto LABEL_13;
      }
    }
    else
    {
      unsigned int v4 = a2;
      if (v3 != 1) {
        goto LABEL_5;
      }
    }
    unsigned int v4 = ((v4 + *(char *)a1) ^ ((v4 + *(char *)a1) << 10)) + (((v4 + *(char *)a1) ^ ((v4 + *(char *)a1) << 10)) >> 1);
LABEL_13:
    unsigned int v11 = (v4 ^ (8 * v4)) + ((v4 ^ (8 * v4)) >> 5);
    unsigned int v12 = (v11 ^ (16 * v11)) + ((v11 ^ (16 * v11)) >> 17);
    return (v12 ^ (v12 << 25)) + ((v12 ^ (v12 << 25)) >> 6);
  }
  return v2;
}

void __work_fun_inner_block_invoke(void *a1)
{
  uint64_t v2 = a1[6];
  BOOL v3 = !*(_DWORD *)(v2 + 96) && !*(unsigned char *)(v2 + 56) && *(_DWORD *)(a1[7] + 36) == 0;
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = v3;
  if (*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v2 + 120));
    ++*(_DWORD *)(v2 + 104);
    os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 120));
    uint64_t v4 = a1[8];
    if (v4) {
      *(void *)(v4 + 24) = a1[6];
    }
    unsigned int v5 = (os_unfair_lock_s *)a1[9];
    os_unfair_lock_lock(v5 + 30);
    ++v5[26]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v5 + 30);
    uint64_t v6 = a1[6];
    if (*(_DWORD *)(v6 + 104) == 1)
    {
      uint64_t v7 = *(void *)(v6 + 48);
      if (v7)
      {
        *(void *)(*(void *)(a1[5] + 8) + 24) = v7;
        *(void *)(a1[6] + 48) = 0;
      }
    }
  }
}

uint64_t cStringHashCallback(const char *a1)
{
  uint64_t v1 = a1;
  int v2 = -1640531527;
  unsigned int v3 = strlen(a1);
  if (v3 < 0xC)
  {
    int v6 = -1640531527;
    unsigned int v5 = -1640531527;
    unsigned int v4 = v3;
  }
  else
  {
    unsigned int v4 = v3;
    unsigned int v5 = -1640531527;
    int v6 = -1640531527;
    do
    {
      unsigned int v7 = *((_DWORD *)v1 + 1) + v5;
      unsigned int v8 = *((_DWORD *)v1 + 2) + v2;
      int v9 = (*(_DWORD *)v1 + v6 - (v7 + v8)) ^ (v8 >> 13);
      unsigned int v10 = (v7 - v8 - v9) ^ (v9 << 8);
      unsigned int v11 = (v8 - v9 - v10) ^ (v10 >> 13);
      int v12 = (v9 - v10 - v11) ^ (v11 >> 12);
      unsigned int v13 = (v10 - v11 - v12) ^ (v12 << 16);
      unsigned int v14 = (v11 - v12 - v13) ^ (v13 >> 5);
      int v6 = (v12 - v13 - v14) ^ (v14 >> 3);
      unsigned int v5 = (v13 - v14 - v6) ^ (v6 << 10);
      int v2 = (v14 - v6 - v5) ^ (v5 >> 15);
      v1 += 12;
      v4 -= 12;
    }
    while (v4 > 0xB);
  }
  unsigned int v15 = v2 + v3;
  switch(v4)
  {
    case 1u:
      goto LABEL_17;
    case 2u:
      goto LABEL_16;
    case 3u:
      goto LABEL_15;
    case 4u:
      goto LABEL_14;
    case 5u:
      goto LABEL_13;
    case 6u:
      goto LABEL_12;
    case 7u:
      goto LABEL_11;
    case 8u:
      goto LABEL_10;
    case 9u:
      goto LABEL_9;
    case 0xAu:
      goto LABEL_8;
    case 0xBu:
      v15 += *((unsigned __int8 *)v1 + 10) << 24;
LABEL_8:
      v15 += *((unsigned __int8 *)v1 + 9) << 16;
LABEL_9:
      v15 += *((unsigned __int8 *)v1 + 8) << 8;
LABEL_10:
      v5 += *((unsigned __int8 *)v1 + 7) << 24;
LABEL_11:
      v5 += *((unsigned __int8 *)v1 + 6) << 16;
LABEL_12:
      v5 += *((unsigned __int8 *)v1 + 5) << 8;
LABEL_13:
      v5 += *((unsigned __int8 *)v1 + 4);
LABEL_14:
      v6 += *((unsigned __int8 *)v1 + 3) << 24;
LABEL_15:
      v6 += *((unsigned __int8 *)v1 + 2) << 16;
LABEL_16:
      v6 += *((unsigned __int8 *)v1 + 1) << 8;
LABEL_17:
      v6 += *(unsigned __int8 *)v1;
      break;
    default:
      break;
  }
  int v16 = (v6 - v5 - v15) ^ (v15 >> 13);
  unsigned int v17 = (v5 - v15 - v16) ^ (v16 << 8);
  unsigned int v18 = (v15 - v16 - v17) ^ (v17 >> 13);
  int v19 = (v16 - v17 - v18) ^ (v18 >> 12);
  unsigned int v20 = (v17 - v18 - v19) ^ (v19 << 16);
  unsigned int v21 = (v18 - v19 - v20) ^ (v20 >> 5);
  int v22 = (v19 - v20 - v21) ^ (v21 >> 3);
  return (v21 - v22 - ((v20 - v21 - v22) ^ (v22 << 10))) ^ (((v20 - v21 - v22) ^ (v22 << 10)) >> 15);
}

BOOL ContentIndexDocSetEquals(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (*(unsigned __int8 *)(a1 + 33) == *(unsigned __int8 *)(a2 + 33))
  {
    unsigned int v2 = *(_DWORD *)(a1 + 48);
    if (v2 == *(_DWORD *)(a2 + 48)
      && *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52)
      && *(float *)(a1 + 20) == *(float *)(a2 + 20)
      && (v2 >= 9 || ((0x10Fu >> v2) & 1) == 0)
      && *(unsigned __int8 *)(a1 + 34) == *(unsigned __int8 *)(a2 + 34))
    {
      uint64_t v4 = *(unsigned int *)(a1 + 96);
      if (v4 == *(_DWORD *)(a2 + 96)) {
        return memcmp(*(const void **)(a1 + 72), *(const void **)(a2 + 72), 8 * v4) == 0;
      }
    }
  }
  return 0;
}

uint64_t SIQueryRetain(uint64_t result)
{
  return result;
}

unint64_t ContentIndexDocSetHash(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 48);
  unint64_t v2 = v1 ^ ((unint64_t)*(unsigned __int8 *)(a1 + 33) << 10) ^ (16 * *(_DWORD *)(a1 + 52));
  if (v1 < 4 || v1 == 8) {
    return v2 ^ *(void *)(a1 + 64);
  }
  int v5 = *(_DWORD *)(a1 + 96);
  int v6 = (*(unsigned __int8 *)(a1 + 34) << 16) ^ (v5 << 11) ^ v2 ^ (uint64_t)*(float *)(a1 + 20);
  int v7 = 8 * v5;
  unsigned int v8 = v6 ^ 0x971E137B;
  if (((8 * v5) | 3u) >= 7)
  {
    uint64_t v9 = *(void *)(a1 + 72) + v7;
    uint64_t v10 = -(v7 >> 2);
    int v11 = -1789642873;
    int v12 = 718793509;
    do
    {
      int v11 = 5 * v11 + 2071795100;
      int v12 = 5 * v12 + 1808688022;
      HIDWORD(v13) = v11 * *(_DWORD *)(v9 + 4 * v10);
      LODWORD(v13) = HIDWORD(v13);
      int v14 = (v13 >> 21) * v12;
      HIDWORD(v13) = v8;
      LODWORD(v13) = v8;
      unsigned int v8 = v14 ^ (5 * (v13 >> 19) + 1390208809);
    }
    while (!__CFADD__(v10++, 1));
  }
  unsigned int v16 = (-2048144789 * (v8 ^ v7)) ^ ((-2048144789 * (v8 ^ v7)) >> 13);
  return v6 ^ ((-1028477387 * v16) >> 16) ^ (-1028477387 * v16);
}

void __si_enqueue_barrier_with_qos_block_invoke(uint64_t a1)
{
}

uint64_t flat_levels_cf_set_applier1(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = 0;
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  memset(v6, 0, sizeof(v6));
  do
  {
    for (; v3; uint64_t v3 = *(void *)v3 & 0x7FFFFFFFFFFFFFFFLL)
    {
      CFDateRef result = (*(uint64_t (**)(void, uint64_t, uint64_t, void, void))a2)(*(unsigned __int16 *)(v3 + 32), v3 + 34, v3 + 16, *(unsigned int *)(v3 + 28), *(void *)(a2 + 16));
      if ((*(void *)(v3 + 8) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        *((void *)v6 + v4++) = *(void *)(v3 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      }
    }
    BOOL v5 = __OFSUB__(v4--, 1);
    if (v4 < 0 != v5) {
      break;
    }
    uint64_t v3 = *((void *)v6 + v4);
  }
  while (v3);
  return result;
}

void resolveQueryInfoCallback(unsigned int a1, unsigned __int8 *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  if (a1 >= 0x415)
  {
    CFDataRef v74 = __si_assert_copy_extra_329();
    CFDictionaryRef v75 = v74;
    uint64_t v76 = "";
    if (v74) {
      uint64_t v76 = v74;
    }
    __message_assert("%s:%u: failed assertion '%s' %s %d", "CIQuery.c", 1360, "termLen <= CI_UTF8CHARS_BUFFER_SIZE", v76, a1);
    free(v75);
    if (__valid_fs(-1)) {
      uint64_t v77 = 2989;
    }
    else {
      uint64_t v77 = 3072;
    }
    *(_DWORD *)uint64_t v77 = -559038737;
    abort();
  }
  bzero(&v83, 0x415uLL);
  if (a1)
  {
    uint64_t v10 = &v83;
    uint64_t v11 = a1;
    do
    {
      int v12 = *a2++;
      *v10++ = tcmr[v12];
      --v11;
    }
    while (v11);
  }
  *(&v83 + a1) = 0;
  if (*(_DWORD *)(a5 + 8))
  {
    for (unint64_t i = 0; i < *(unsigned int *)(a5 + 8); ++i)
    {
      uint64_t v14 = *(void *)(a5 + 16);
      unsigned int v15 = (unsigned __int8 **)(v14 + (i << 6));
      int v16 = *((_DWORD *)v15 + 4);
      if ((v16 & 0x610) == 0)
      {
        if ((v16 & 4) != 0)
        {
          unsigned int v20 = v83;
          unsigned int v21 = *v15;
          if (v83 - 2 > 2 || v83 != *v21) {
            continue;
          }
          CFDictionaryRef v23 = v21 + 1;
          int v24 = &v84;
          if ((v16 & 0x20) != 0)
          {
            do
            {
              unsigned int v32 = *v24++;
              unsigned int v31 = v32;
              unsigned int v34 = *v23++;
              unsigned int v33 = v34;
              if (v31) {
                BOOL v35 = v31 == v33;
              }
              else {
                BOOL v35 = 0;
              }
            }
            while (v35);
            BOOL v36 = v33 != 0;
            if (v31) {
              BOOL v36 = v31 < v33;
            }
            if (v36) {
              continue;
            }
          }
          else
          {
            do
            {
              unsigned int v26 = *v24++;
              unsigned int v25 = v26;
              unsigned int v28 = *v23++;
              unsigned int v27 = v28;
              if (v25) {
                BOOL v29 = v25 == v27;
              }
              else {
                BOOL v29 = 0;
              }
            }
            while (v29);
            if (v25) {
              BOOL v30 = v25 >= v27;
            }
            else {
              BOOL v30 = 0;
            }
            if (!v30) {
              continue;
            }
          }
          int v37 = *(unsigned __int8 **)(v14 + (i << 6) + 8);
          unsigned int v38 = *v37;
          BOOL v39 = v83 == 0;
          BOOL v40 = v83 != v38 || v83 == 0;
          if ((v16 & 0x40) != 0)
          {
            if (!v40)
            {
              uint64_t v59 = v37 + 1;
              unint64_t v60 = &v84;
              do
              {
                unsigned int v61 = *v60++;
                unsigned int v20 = v61;
                LOBYTE(v39) = v61 == 0;
                unsigned int v62 = *v59++;
                unsigned int v38 = v62;
                if (v20) {
                  BOOL v63 = v20 == v38;
                }
                else {
                  BOOL v63 = 0;
                }
              }
              while (v63);
            }
            if (v20 >= v38 && !v39) {
              continue;
            }
          }
          else
          {
            if (!v40)
            {
              unint64_t v41 = v37 + 1;
              uint64_t v42 = &v84;
              do
              {
                unsigned int v43 = *v42++;
                unsigned int v20 = v43;
                BOOL v39 = v43 == 0;
                unsigned int v44 = *v41++;
                unsigned int v38 = v44;
                if (v20) {
                  BOOL v45 = v20 == v38;
                }
                else {
                  BOOL v45 = 0;
                }
              }
              while (v45);
            }
            if (v38) {
              int v46 = -1;
            }
            else {
              int v46 = 0;
            }
            int v47 = (v20 < v38) << 31;
            if (v39) {
              int v47 = v46;
            }
            if ((v47 & 0x80000000) == 0) {
              continue;
            }
          }
LABEL_89:
          int v64 = *(_DWORD *)(v14 + (i << 6) + 20);
          if (v64 != -1)
          {
            int v65 = termPropertyID_11239(&v83, a1);
            if (v65 != v64 && (v16 & 0x3080 | v64 || v65 != 2)) {
              continue;
            }
          }
LABEL_13:
          uint64_t v19 = *(void *)(a5 + 64);
          if (v19)
          {
            (*(void (**)(uint64_t, unint64_t, uint64_t, void))(v19 + 16))(v19, i, a3, *(void *)a5);
          }
          else if ((*(_WORD *)(*(void *)(a5 + 16) + (i << 6) + 16) & 0x3080) == 0 || a4)
          {
            v9.n128_u64[0] = 0;
            (*(void (**)(__n128))(*(void *)(*(void *)(a5 + 24) + 8 * i) + 56))(v9);
          }
          continue;
        }
        uint64_t v17 = v14 + (i << 6);
        uint64_t v18 = *(void *)(v17 + 32);
        if (v18)
        {
          if (localizedFieldTermMatch_11238(v18, *(_DWORD *)(v17 + 20), &v83, a1, *((_DWORD *)v15 + 4))) {
            goto LABEL_13;
          }
        }
        else
        {
          if (*(void *)(v17 + 40))
          {
            if (v83 != 1)
            {
              int v48 = termPropertyID_11239(&v83, a1);
              uint64_t v49 = 0;
              uint64_t v14 = *(void *)(a5 + 16);
              goto LABEL_112;
            }
            int v48 = v84;
            if (v84 == 2)
            {
              int v48 = v85;
              if ((char)v85 < 0)
              {
                if (((char)v86 & 0x80000000) == 0)
                {
                  int v48 = v85 & 0x7F | (v86 << 7);
                  uint64_t v49 = 4;
                  goto LABEL_112;
                }
                if (((char)v87 & 0x80000000) == 0)
                {
                  int v67 = ((v86 & 0x7F) << 7) | (v87 << 14);
                  goto LABEL_110;
                }
                if (((char)v88 & 0x80000000) == 0)
                {
                  unsigned int v68 = ((v87 & 0x7F) << 14) | (v88 << 21) | ((v86 & 0x7F) << 7) | v85 & 0x7F;
                  uint64_t v49 = 6;
                  goto LABEL_111;
                }
                if ((char)v89 < 0) {
                  goto LABEL_138;
                }
                int v71 = ((v88 & 0x7F) << 21) | (v89 << 28) | ((v87 & 0x7F) << 14) | ((v86 & 0x7F) << 7) | v85 & 0x7F;
                uint64_t v49 = 7;
LABEL_124:
                int v48 = v71;
                goto LABEL_112;
              }
            }
            else
            {
              if ((v84 & 0x80) == 0)
              {
                uint64_t v49 = 2;
                goto LABEL_112;
              }
              if ((char)v85 < 0)
              {
                if (((char)v86 & 0x80000000) == 0)
                {
                  unsigned int v68 = ((v85 & 0x7F) << 7) | (v86 << 14) | v84 & 0x7F;
                  uint64_t v49 = 4;
                  goto LABEL_111;
                }
                if ((char)v87 < 0)
                {
                  if ((char)v88 < 0)
                  {
LABEL_138:
                    unsigned int v78 = __si_assert_copy_extra_329();
                    __int16 v79 = v78;
                    uint64_t v80 = "";
                    if (v78) {
                      uint64_t v80 = v78;
                    }
                    __message_assert("%s:%u: failed assertion '%s' %s readVInt32: exceeds max size for uint32_t", "VIntUtils.h", 341, "(b4 & 0x80) == 0", v80);
                    free(v79);
                    if (__valid_fs(-1)) {
                      uint64_t v81 = 2989;
                    }
                    else {
                      uint64_t v81 = 3072;
                    }
                    *(_DWORD *)uint64_t v81 = -559038737;
                    abort();
                  }
                  int v71 = ((v87 & 0x7F) << 21) | (v88 << 28) | ((v86 & 0x7F) << 14) | ((v85 & 0x7F) << 7) | v84 & 0x7F;
                  uint64_t v49 = 6;
                  goto LABEL_124;
                }
                int v67 = ((v86 & 0x7F) << 14) | (v87 << 21) | ((v85 & 0x7F) << 7);
LABEL_110:
                unsigned int v68 = v67 & 0xFFFFFF80 | v48 & 0x7F;
                uint64_t v49 = 5;
LABEL_111:
                int v48 = v68;
LABEL_112:
                if (*(_DWORD *)(v14 + (i << 6) + 20) == v48)
                {
                  int v69 = a1 - v49;
                  while (v69 >= 1)
                  {
                    unsigned int v70 = *(&v83 + v49 + v69 - 1);
                    if (v70 > 5)
                    {
                      if ((icu_regex_find() & 1) == 0) {
                        goto LABEL_8;
                      }
                      goto LABEL_13;
                    }
                    --v69;
                    if ((v70 & 0xFFFFFFFD) != 1) {
                      goto LABEL_8;
                    }
                  }
                }
                continue;
              }
              int v48 = v84 & 0x7F | (v85 << 7);
            }
            uint64_t v49 = 3;
            goto LABEL_112;
          }
          int v50 = *v15;
          int v51 = *(_DWORD *)(v14 + (i << 6) + 24);
          unsigned int v52 = **v15;
          if (v52 > 4)
          {
            CFStringRef v55 = &v83;
            if (v52 == 42 && termPropertyID_11239(&v83, a1) == 2) {
              continue;
            }
          }
          else
          {
            if (v52 != v83) {
              continue;
            }
            int64_t v53 = v50 + 1;
            int v54 = v50[1];
            if (v54 != v84) {
              continue;
            }
            CFStringRef v55 = &v85;
            if (v54 == 2)
            {
              int v57 = v50[2];
              unint64_t v56 = v50 + 2;
              LOBYTE(v54) = v57;
              if (v57 != v85) {
                continue;
              }
              int64_t v53 = v56;
              CFStringRef v55 = &v86;
            }
            int v50 = v53 + 1;
            if ((v54 & 0x80) != 0)
            {
              int v58 = *v50;
              if (v58 != *v55) {
                continue;
              }
              int v50 = v53 + 2;
              if ((char)v58 < 0)
              {
                int v72 = *v50;
                if (v72 != v55[1]) {
                  continue;
                }
                if ((char)v72 < 0)
                {
                  int v73 = (char)v53[3];
                  if (v73 < 0 || v55[2] != v73) {
                    continue;
                  }
                  v55 += 3;
                  int v50 = v53 + 4;
                }
                else
                {
                  v55 += 2;
                  int v50 = v53 + 3;
                }
              }
              else
              {
                ++v55;
              }
            }
          }
          if (matche(v50, v55, v51, 0, 0) == 1)
          {
            uint64_t v14 = *(void *)(a5 + 16);
            int v16 = *(_DWORD *)(v14 + (i << 6) + 16);
            goto LABEL_89;
          }
        }
      }
LABEL_8:
      ;
    }
  }
}

uint64_t si_lqn_equals(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int16 *)(a1 + 48);
  if (v2 != *(unsigned __int16 *)(a2 + 48) || *(float *)(a1 + 72) != *(float *)(a2 + 72)) {
    return 0;
  }
  if ((v2 & 0x30) != 0) {
    return 1;
  }
  if ((v2 & 3) != 0)
  {
    if (*(void *)a1 != *(void *)a2) {
      return 0;
    }
    return *(void *)(a1 + 8) == *(void *)(a2 + 8);
  }
  else
  {
    uint64_t result = *(void *)(a1 + 16);
    if (result)
    {
      uint64_t v4 = *(void *)(a2 + 16);
      if (!v4) {
        return 0;
      }
      if (result == v4) {
        return 1;
      }
      return db_equal_qps(result, v4);
    }
  }
  return result;
}

uint64_t qpEq(uint64_t a1, uint64_t a2)
{
  return db_equal_qps(a1, a2);
}

uint64_t db_equal_qps(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 24);
  if (v2 != *(_DWORD *)(a2 + 24)) {
    return 0;
  }
  if (*(float *)(a1 + 52) != *(float *)(a2 + 52)) {
    return 0;
  }
  if (*(float *)(a1 + 56) != *(float *)(a2 + 56)) {
    return 0;
  }
  unint64_t v5 = *(unsigned int *)(a1 + 60);
  if (v5 != *(_DWORD *)(a2 + 60)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (((*(void *)(a2 + 32) ^ v6) & 0xFFFFFFE23FFFFFFELL) != 0) {
    return 0;
  }
  unsigned int v8 = *(const char **)a1;
  __n128 v9 = *(const char **)a2;
  if (*(void *)a1 != *(void *)a2)
  {
    if (strcmp(v8, v9)) {
      return 0;
    }
  }
  if ((v6 & 0x800000) != 0 && *(unsigned __int8 *)(a1 + 28) != *(unsigned __int8 *)(a2 + 28)) {
    return 0;
  }
  if ((v6 & 0xC0000) != 0 && (v6 & 0x200) == 0)
  {
    uint64_t v10 = *(int *)(a1 + 40);
    if (v10 == *(_DWORD *)(a2 + 40))
    {
      int v11 = memcmp(*(const void **)(a1 + 288), *(const void **)(a2 + 288), 8 * v10);
      return v11 == 0;
    }
    return 0;
  }
  int v12 = *(const char **)(a1 + 72);
  if (v12)
  {
    unint64_t v13 = *(const char **)(a2 + 72);
    if (v13)
    {
LABEL_18:
      int v11 = strcmp(v12, v13);
      return v11 == 0;
    }
  }
  if (v2 != 15)
  {
    if ((v2 - 11) > 1)
    {
      if ((v2 - 13) <= 1)
      {
        uint64_t v22 = *(unsigned int *)(a1 + 40);
        if (v22 == *(_DWORD *)(a2 + 40))
        {
          if ((int)v22 < 1) {
            return 1;
          }
          CFDictionaryRef v23 = *(const char ***)(a1 + 168);
          int v24 = *(const char ***)(a2 + 168);
          uint64_t v25 = v22 - 1;
          do
          {
            unsigned int v27 = *v23++;
            unsigned int v26 = v27;
            unsigned int v28 = *v24++;
            int v29 = strcmp(v26, v28);
            uint64_t result = v29 == 0;
            BOOL v31 = v25-- != 0;
          }
          while (!v29 && v31);
          return result;
        }
      }
    }
    else if (*(_DWORD *)(a1 + 40) == 2)
    {
      uint64_t v17 = *(uint64_t **)(a1 + 168);
      uint64_t result = *v17;
      if (!*v17) {
        return result;
      }
      uint64_t v18 = (const char *)v17[1];
      if (v18)
      {
        uint64_t v19 = *(const char ***)(a2 + 168);
        unsigned int v20 = *v19;
        if (*v19)
        {
          unsigned int v21 = v19[1];
          if (v21)
          {
            unsigned int v32 = v21;
            if (*(_DWORD *)(a2 + 40) == 2 && !strcmp((const char *)result, v20))
            {
              int v12 = v18;
              unint64_t v13 = v32;
              goto LABEL_18;
            }
          }
        }
      }
    }
    return 0;
  }
  uint64_t result = *(void *)(a1 + 296);
  if (result)
  {
    uint64_t v14 = *(const void **)(a2 + 296);
    if (v14 && *(float *)(a1 + 64) == *(float *)(a2 + 64))
    {
      size_t v15 = -1;
      if ((v5 & 3) != 3)
      {
        uint64_t v16 = (v5 >> 2) & 3;
        if (v16 != 3) {
          size_t v15 = (vector_dimension_vec_sizes_12485[v5 & 3] * vector_size_elem_sizes_12484[v16]);
        }
      }
      int v11 = memcmp((const void *)result, v14, v15);
      return v11 == 0;
    }
    return 0;
  }
  return result;
}

uint64_t SIUserCtxSetEntitlements(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 176) = a2;
  }
  return result;
}

void SIQueryRelease(uint64_t a1)
{
  if (atomic_fetch_add((atomic_uint *volatile)(a1 + 584), 0xFFFFFFFF) == 1) {
    si_query_free(a1);
  }
}

uint64_t _TermTrieWalkFatWithOptions(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v13 = (void *)result;
  if (a6) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a6 + 16))(a6, result, 1);
  }
  if (a5 && *v13) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(a5 + 16))(a5);
  }
  uint64_t v14 = (a2 + 1);
  for (uint64_t i = 1; i != 257; ++i)
  {
    uint64_t v16 = v13[i];
    int v17 = v16 & 3;
    switch(v17)
    {
      case 3:
        uint64_t result = _TermTrieWalkListWithOptions(v16 & 0xFFFFFFFFFFFFFFFCLL, a3, a4, a5, a6, a7);
        break;
      case 2:
        uint64_t result = _TermTrieWalkCompactWithOptions(v16 & 0xFFFFFFFFFFFFFFFCLL, v14, a3, a4, a5, a6, a7);
        break;
      case 1:
        uint64_t result = _TermTrieWalkFatWithOptions(v16 & 0xFFFFFFFFFFFFFFFCLL, v14, a3, a4, a5, a6, a7);
        break;
      default:
        if (v16)
        {
          uint64_t v18 = __si_assert_copy_extra_329();
          uint64_t v19 = v18;
          unsigned int v20 = "";
          if (v18) {
            unsigned int v20 = v18;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "TermTrie.c", 744, "level->follows[i]==0", v20);
          free(v19);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        break;
    }
  }
  if (a7)
  {
    unsigned int v21 = *(uint64_t (**)(uint64_t, void *, uint64_t))(a7 + 16);
    return v21(a7, v13, 1);
  }
  return result;
}

uint64_t term_fat_level_iterate_helper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, atomic_uint *a5, uint64_t a6)
{
  unsigned int add_explicit = atomic_fetch_add_explicit(a5, 1u, memory_order_relaxed);
  if (add_explicit <= 0xFF)
  {
    do
    {
      uint64_t v13 = *(void *)(a1 + 8 * add_explicit + 8);
      int v14 = v13 & 3;
      switch(v14)
      {
        case 3:
          _TermTrieWalkListWithOptions(v13 & 0xFFFFFFFFFFFFFFFCLL, a6, 0, a2, a3, a4);
          break;
        case 2:
          _TermTrieWalkCompactWithOptions(v13 & 0xFFFFFFFFFFFFFFFCLL, 1, a6, 0, a2, a3, a4);
          break;
        case 1:
          _TermTrieWalkFatWithOptions(v13 & 0xFFFFFFFFFFFFFFFCLL, 1, a6, 0, a2, a3, a4);
          break;
        default:
          if (v13)
          {
            size_t v15 = __si_assert_copy_extra_329();
            uint64_t v16 = v15;
            int v17 = "";
            if (v15) {
              int v17 = v15;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "TermTrie.c", 233, "level->follows[i]==0", v17);
            free(v16);
            if (__valid_fs(-1))
            {
              MEMORY[0xBAD] = -559038737;
              abort();
            }
            MEMORY[0xC00] = -559038737;
            abort();
          }
          break;
      }
      unsigned int add_explicit = atomic_fetch_add_explicit(a5, 1u, memory_order_relaxed);
    }
    while (add_explicit < 0x100);
  }
  uint64_t v18 = *(uint64_t (**)(uint64_t, void))(a2 + 16);
  return v18(a2, 0);
}

uint64_t _TermTrieWalkCompactWithOptions(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = (int8x8_t *)result;
  if (a6) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a6 + 16))(a6, result, 2);
  }
  if (a5 && *(void *)v13) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(a5 + 16))(a5);
  }
  int v14 = v13[5].u8[0];
  if (v13[5].i8[0])
  {
    unsigned int v15 = 0;
    int v16 = 0;
    int v17 = a2;
    uint64_t v18 = v13 + 1;
    unsigned int v31 = v17 + 1;
    while (1)
    {
      if ((((unsigned __int32)v13[1].i32[v15 >> 5] >> v15) & 1) == 0) {
        goto LABEL_23;
      }
      uint64_t v19 = 0;
      unsigned int v20 = v15 >> 6;
      if (v15 >> 6 == 1) {
        goto LABEL_14;
      }
      if (v20 == 2) {
        goto LABEL_13;
      }
      if (v20 == 3) {
        break;
      }
LABEL_15:
      uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)&v18[v20] & ~(-1 << v15)));
      v24.i16[0] = vaddlv_u8(v24);
      int8x8_t v25 = v13[v24.u32[0] + 6 + v19];
      int v26 = v25.i8[0] & 3;
      switch(v26)
      {
        case 3:
          uint64_t result = _TermTrieWalkListWithOptions(*(void *)&v25 & 0xFFFFFFFFFFFFFFFCLL, a3, a4, a5, a6, a7);
          break;
        case 2:
          uint64_t result = _TermTrieWalkCompactWithOptions(*(void *)&v25 & 0xFFFFFFFFFFFFFFFCLL, v31, a3, a4, a5, a6, a7);
          break;
        case 1:
          uint64_t result = _TermTrieWalkFatWithOptions(*(void *)&v25 & 0xFFFFFFFFFFFFFFFCLL, v31, a3, a4, a5, a6, a7);
          break;
        default:
          if (v25)
          {
            unsigned int v28 = __si_assert_copy_extra_329();
            int v29 = v28;
            BOOL v30 = "";
            if (v28) {
              BOOL v30 = v28;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "TermTrie.c", 784, "level->follows[pos]==0", v30);
            free(v29);
            if (__valid_fs(-1))
            {
              MEMORY[0xBAD] = -559038737;
              abort();
            }
            MEMORY[0xC00] = -559038737;
            abort();
          }
          goto LABEL_23;
      }
      ++v16;
LABEL_23:
      if (v15 <= 0xFE)
      {
        ++v15;
        if (v16 < v14) {
          continue;
        }
      }
      goto LABEL_25;
    }
    uint8x8_t v21 = (uint8x8_t)vcnt_s8(v13[3]);
    v21.i16[0] = vaddlv_u8(v21);
    uint64_t v19 = v21.u32[0];
LABEL_13:
    uint8x8_t v22 = (uint8x8_t)vcnt_s8(v13[2]);
    v22.i16[0] = vaddlv_u8(v22);
    v19 += v22.u32[0];
LABEL_14:
    uint8x8_t v23 = (uint8x8_t)vcnt_s8(*v18);
    v23.i16[0] = vaddlv_u8(v23);
    v19 += v23.u32[0];
    goto LABEL_15;
  }
LABEL_25:
  if (a7)
  {
    unsigned int v27 = *(uint64_t (**)(uint64_t, int8x8_t *, uint64_t))(a7 + 16);
    return v27(a7, v13, 2);
  }
  return result;
}

uint64_t _TermTrieWalkListWithOptions(uint64_t result, char a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = (uint64_t *)result;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a5) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 16))(a5, result, 3);
  }
  if (a4)
  {
    if (a3)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(a4 + 16))(a4, v10);
      goto LABEL_19;
    }
    memset(v24, 0, sizeof(v24));
    if (a2)
    {
      int v11 = 0;
      uint64_t v12 = (uint64_t)v10;
      while (1)
      {
        if (v12)
        {
          do
          {
            while (1)
            {
              uint64_t v14 = *(void *)v12 & 0x7FFFFFFFFFFFFFFFLL;
              if (!v14) {
                break;
              }
              *((void *)v24 + v11) = v12;
              if (*(unsigned __int16 *)(v12 + 32) > 0x414u)
              {
                uint8x8_t v21 = __si_assert_copy_extra_329();
                uint8x8_t v22 = v21;
                uint8x8_t v23 = "";
                if (v21) {
                  uint8x8_t v23 = v21;
                }
                __message_assert("%s:%u: failed assertion '%s' %s ", "TermTrie.c", 846, "l->data.termLen <= (1024+20)", v23);
                free(v22);
                if (__valid_fs(-1))
                {
                  MEMORY[0xBAD] = -559038737;
                  abort();
                }
                MEMORY[0xC00] = -559038737;
                abort();
              }
              ++v11;
              uint64_t v12 = v14;
            }
            uint64_t v13 = *(void *)(v12 + 8) & 0x7FFFFFFFFFFFFFFFLL;
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a4, v12);
            uint64_t v12 = v13;
          }
          while (v13);
        }
        if (v11 < 1) {
          break;
        }
        uint64_t v12 = *(void *)(*((void *)v24 + (v11 - 1)) + 8) & 0x7FFFFFFFFFFFFFFFLL;
        uint64_t result = (*(uint64_t (**)(uint64_t))(a4 + 16))(a4);
        --v11;
        if (!v12)
        {
LABEL_18:
          if (!v11) {
            goto LABEL_19;
          }
        }
      }
      uint64_t v12 = 0;
      goto LABEL_18;
    }
    int v16 = 0;
    int v17 = v10;
    do
    {
      if (v17)
      {
        do
        {
          uint64_t v20 = *v17;
          if ((v17[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
            *((void *)v24 + v16++) = v17[1] & 0x7FFFFFFFFFFFFFFFLL;
          }
          uint64_t v19 = v20 & 0x7FFFFFFFFFFFFFFFLL;
          uint64_t result = (*(uint64_t (**)(uint64_t))(a4 + 16))(a4);
          int v17 = (uint64_t *)v19;
        }
        while (v19);
      }
      BOOL v18 = __OFSUB__(v16--, 1);
      if (v16 < 0 != v18) {
        break;
      }
      int v17 = (uint64_t *)*((void *)v24 + v16);
    }
    while (v17);
  }
LABEL_19:
  if (a6)
  {
    unsigned int v15 = *(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(a6 + 16);
    return v15(a6, v10, 3);
  }
  return result;
}

void __termUpdateSetResolveQueryInfo_block_invoke(uint64_t a1, const void **a2, int a3)
{
  uint64_t v3 = (const void ***)a2;
  if (a3 != 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3) {
        return;
      }
      unint64_t v5 = *(__CFSet **)(a1 + 32);
      goto LABEL_9;
    }
    uint64_t v6 = *a2;
    if (!*v3) {
      return;
    }
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 32), v6);
  }
  a2 = *v3;
  if (!*v3) {
    return;
  }
  unint64_t v5 = *(__CFSet **)(a1 + 32);
LABEL_9:
  CFSetAddValue(v5, a2);
}

void __TermUpdateSetMergeUpdateSet_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = TermTrieResolve(*(void *)(*(void *)(a1 + 32) + 24) + 16);
    if (*(unsigned char *)(a2 + 16))
    {
      unsigned int v20 = *(_DWORD *)(a2 + 20);
      if (v20 == 2) {
        int v21 = 1;
      }
      else {
        int v21 = 2;
      }
      pushTermData(*(void *)(a1 + 32), (int *)v4, *(void *)(a2 + 24), *(_DWORD *)(a1 + 60), 0, v21, v20);
    }
    else
    {
      unint64_t v5 = *(void **)(a1 + 32);
      if (!*(_DWORD *)(a2 + 28))
      {
        uint64_t v13 = *(unsigned int *)(a1 + 56);
        unsigned int v14 = *(_DWORD *)(a2 + 20);
        if (*(unsigned char *)v4)
        {
          if (*(void *)(v4 + 8) == v13) {
            return;
          }
        }
        else
        {
          int v19 = *(_DWORD *)(v4 + 8);
          if (v19 == v13) {
            return;
          }
          if (!v19)
          {
            *(_DWORD *)(v4 + 4) = v14;
            *(_DWORD *)(v4 + 8) = v13;
            return;
          }
        }
        addToExistingTermUpdateList(*(void *)(a1 + 32), (unsigned int *)v4, v13, 0, v14);
        return;
      }
      uint64_t v6 = *(unsigned int *)(a1 + 56);
      v5[73] = v5[1] + v6;
      pthread_key_t v7 = *(void *)(a1 + 104);
      unsigned int v8 = (void *)(*(void *)(a1 + 96) + 240);
      uint64_t v9 = *(unsigned int *)(a2 + 28);
      unsigned int v10 = *(_DWORD *)(a2 + 20);
      uint64_t v15 = v5[30] + 32 * *(unsigned int *)(v4 + 12);
      addToExistingTermUpdateList((uint64_t)v5, (unsigned int *)v4, v6, 0, v10);
      if (*(_DWORD *)(v15 + 8))
      {
        if (*(_DWORD *)(v15 + 24) >= v6)
        {
          uint8x8_t v22 = __si_assert_copy_extra_329();
          uint8x8_t v23 = v22;
          uint8x8_t v24 = "";
          if (v22) {
            uint8x8_t v24 = v22;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "TermUpdateSet.c", 3341, "docID > node->docId", v24);
          free(v23);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        CIPositionNodeFinalizeDocument((uint64_t)(v5 + 30));
      }
      pthread_getspecific(v7);
      if (*(_DWORD *)(*v8 + 32 * v9 + 8) < 2u)
      {
        CIPositionNodeTransferDocument((uint64_t)(v5 + 30));
      }
      else
      {
        int v16 = (uint64_t *)pthread_getspecific(v7);
        if (!v16)
        {
          int v16 = (uint64_t *)malloc_type_calloc(1uLL, 0x4008uLL, 0x10200409D758B34uLL);
          pthread_setspecific(v7, v16);
        }
        uint64_t v17 = *v16;
        BOOL v18 = &v16[*v16];
        v18[1] = *v8 + 32 * v9;
        v18[1025] = v15;
        *int v16 = v17 + 1;
        if (v17 == 1023)
        {
          CIPositionNodeTransferDocuments((uint64_t)(v5 + 30));
          *int v16 = 0;
        }
      }
    }
  }
  else
  {
    int v11 = pthread_getspecific(*(void *)(a1 + 104));
    if (v11)
    {
      uint64_t v12 = v11;
      CIPositionNodeTransferDocuments(*(void *)(a1 + 32) + 240);
      pthread_setspecific(*(void *)(a1 + 104), 0);
      free(v12);
    }
  }
}

uint64_t pushPropertyTerm(uint64_t a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6, int a7)
{
  int v11 = -1759636613;
  if ((a2 & 0x80000000) == 0) {
    int v12 = a2;
  }
  else {
    int v12 = a2 + 3;
  }
  uint64_t v13 = &a3[v12 & 0xFFFFFFFC];
  if ((a2 + 3) >= 7)
  {
    uint64_t v16 = -(v12 >> 2);
    int v17 = -1789642873;
    int v18 = 718793509;
    do
    {
      int v17 = 5 * v17 + 2071795100;
      int v18 = 5 * v18 + 1808688022;
      HIDWORD(v19) = v17 * *(_DWORD *)&v13[4 * v16];
      LODWORD(v19) = HIDWORD(v19);
      int v20 = (v19 >> 21) * v18;
      HIDWORD(v19) = v11;
      LODWORD(v19) = v11;
      int v11 = v20 ^ (5 * (v19 >> 19) + 1390208809);
    }
    while (!__CFADD__(v16++, 1));
    int v15 = 5 * v17 + 2071795100;
    int v14 = 5 * v18 + 1808688022;
  }
  else
  {
    int v14 = 1107688271;
    int v15 = 1713515327;
  }
  int v22 = 0;
  int v23 = a2 & 3;
  switch(v23)
  {
    case 1:
      goto LABEL_15;
    case 2:
LABEL_14:
      v22 |= v13[1] << 8;
LABEL_15:
      HIDWORD(v24) = (v22 ^ *v13) * v15;
      LODWORD(v24) = HIDWORD(v24);
      int v25 = (v24 >> 21) * v14;
      HIDWORD(v24) = v11;
      LODWORD(v24) = v11;
      int v11 = v25 ^ (5 * (v24 >> 19) + 1390208809);
      break;
    case 3:
      int v22 = v13[2] << 16;
      goto LABEL_14;
  }
  unsigned int v26 = -1028477387 * ((-2048144789 * (v11 ^ a2)) ^ ((-2048144789 * (v11 ^ a2)) >> 13));
  char v29 = 0;
  unsigned int v27 = (int *)pushTermTable(*(void *)(a1 + 24) + 16, **(void **)(a1 + 24), v26 ^ HIWORD(v26), a2, a3, a7, &v29);
  return pushTermData(a1, v27, a4, a5, v29, a6, 1u);
}

uint64_t pushTermTable(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unsigned __int8 *a5, int a6, unsigned char *a7)
{
  *a7 = 0;
  if (!a2)
  {
    return TermTrieResolve(a1);
  }
  int v8 = a3;
  uint64_t v10 = (a3 >> 16) & 0x7FF;
  int v11 = (unsigned int *)(a2 + 4 * v10 + 0x4000);
  uint64_t v12 = *(void *)(a2 + 8 * v10);
  unsigned int v13 = *v11;
  if ((*v11 & 0x80000000) == 0)
  {
LABEL_3:
    if (v13 & 0x80000000) == 0 && (a6)
    {
      uint64_t result = TermTrieResolve(a1);
LABEL_20:
      *(void *)(a2 + 8 * v10) = result;
      *int v11 = v8 | 0x80000000;
      return result;
    }
    goto LABEL_18;
  }
  if (((v13 ^ a3) & 0x7FFFFFFF) == 0 && *(unsigned __int16 *)(v12 + 16) == a4)
  {
    if (!a4) {
      return *(void *)(a2 + 8 * v10);
    }
    if (*(unsigned __int8 *)(v12 + 18) == *(unsigned __int8 *)(a1 + 2144 + *a5))
    {
      unint64_t v15 = 0;
      while (a4 - 1 != v15)
      {
        int v16 = *(unsigned __int8 *)(v12 + v15 + 19);
        int v17 = *(unsigned __int8 *)(a1 + 2144 + a5[++v15]);
        if (v16 != v17)
        {
          if (v15 < a4) {
            goto LABEL_3;
          }
          return *(void *)(a2 + 8 * v10);
        }
      }
      return *(void *)(a2 + 8 * v10);
    }
  }
LABEL_18:
  uint64_t result = TermTrieResolve(a1);
  if (a6 && *(void *)(v12 + 4) < *(void *)(result + 4)) {
    goto LABEL_20;
  }
  return result;
}

uint64_t TermTrieResolve(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  v124[17] = *MEMORY[0x1E4F143B8];
  if (!v3)
  {
    uint64_t v99 = __si_assert_copy_extra_329();
    if (__si_error_str_key) {
      pthread_getspecific(__si_error_str_key);
    }
    __message_assert("%s:%u: failed assertion '%s' %s invalid length for %s");
    goto LABEL_132;
  }
  int v7 = v5;
  size_t v8 = v3;
  uint64_t v9 = v1;
  unint64_t v112 = v4;
  uint64_t v10 = 0;
  unsigned __int16 v11 = 0;
  _X26 = v1 + 16;
  uint64_t v122 = 0;
  int v13 = 1;
  int v121 = 1;
  unint64_t v116 = v2;
  size_t v118 = (void **)(v1 + 8);
  while (2)
  {
    int v14 = &v2[v11];
    uint64_t v114 = (uint64_t *)_X26;
LABEL_5:
    if (v13 == 2)
    {
      if (v8 == v11)
      {
        uint64_t v85 = *v114;
        if (*v114) {
          return v85 + 16;
        }
        uint64_t v85 = (uint64_t)_TermListEntryCreate(v9, v116, v8, v7);
        *uint64_t v114 = v85;
        goto LABEL_99;
      }
      unint64_t v15 = v14;
      if (v7) {
        unint64_t v15 = (unsigned __int8 *)(v9 + *v14 + 2144);
      }
      unint64_t v16 = *v15;
      if ((*(_DWORD *)(_X26 + ((v16 >> 3) & 0x1C) + 8) >> v16))
      {
        uint64_t v46 = 0;
        int v47 = (int8x8_t *)(_X26 + 8);
        unint64_t v48 = v16 >> 6;
        if ((v16 >> 6) == 1)
        {
          int v2 = v116;
          goto LABEL_61;
        }
        int v2 = v116;
        if (v48 == 2) {
          goto LABEL_59;
        }
        if (v48 == 3)
        {
          uint8x8_t v49 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(_X26 + 24));
          v49.i16[0] = vaddlv_u8(v49);
          uint64_t v46 = v49.u32[0];
LABEL_59:
          uint8x8_t v50 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(_X26 + 16));
          v50.i16[0] = vaddlv_u8(v50);
          v46 += v50.u32[0];
LABEL_61:
          uint8x8_t v51 = (uint8x8_t)vcnt_s8(*v47);
          v51.i16[0] = vaddlv_u8(v51);
          v46 += v51.u32[0];
        }
        int8x8_t v6 = vcnt_s8((int8x8_t)(*(void *)&v47[v48] & ~(-1 << v16)));
        v6.i16[0] = vaddlv_u8((uint8x8_t)v6);
        unsigned int v52 = (int8x8_t *)(_X26 + 8 * (v6.u32[0] + v46));
        int8x8_t v53 = v52[6];
        uint64_t v10 = v52 + 6;
        int8x8_t v44 = v53;
        int v13 = v53.i8[0] & 3;
        int v121 = v13;
        _X10 = (char *)&__src[225] + 5;
        __asm { PRFUM           #0x14, [X10,#0xFF] }
LABEL_63:
        _X26 = *(void *)&v44 & 0xFFFFFFFFFFFFFFFCLL;
        __asm { PRFM            #0x14, [X26] }
        ++v11;
        continue;
      }
      unsigned int v17 = *(unsigned __int8 *)(_X26 + 41);
      if (*(unsigned __int8 *)(_X26 + 40) < v17)
      {
        uint64_t v85 = (uint64_t)_TermListEntryCreate(v9, v116, v8, v7);
        *unint64_t v112 = 1;
        *(void *)(_X26 + 8 * TermTrieCompactSetFollows((int8x8_t *)_X26, v16) + 48) = v85 | 3;
        goto LABEL_155;
      }
      if (v17 <= 0x1F)
      {
        unint64_t v18 = (unint64_t)_term_trie_compact_alloc(v9, 2 * (v17 & 0x7F), v6);
        memcpy((void *)v18, (const void *)_X26, 8 * *(unsigned __int8 *)(_X26 + 41) + 48);
        *(unsigned char *)(v18 + 41) = 2 * *(unsigned char *)(_X26 + 41);
        unsigned int v19 = __clz(__rbit32(*(unsigned __int8 *)(_X26 + 41)));
        v20.i32[0] = *(unsigned __int8 *)(_X26 + 41);
        uint8x8_t v21 = (uint8x8_t)vcnt_s8(v20);
        v21.i16[0] = vaddlv_u8(v21);
        if (v21.i32[0] == 1 && v19 >= 2 && v19 < 6)
        {
          OSAtomicEnqueue((OSQueueHead *)(v9 + 16 * (v19 - 2) + 2080), (void *)_X26, 0);
          int8x8_t *v10 = (int8x8_t)(v18 | 2);
          int v13 = 2;
          goto LABEL_4;
        }
LABEL_121:
        size_t v96 = __si_assert_copy_extra_329();
        unsigned __int8 v87 = v96;
        long long v97 = "";
        if (v96) {
          long long v97 = v96;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "TermTrie.c", 123, "__builtin_popcount(compactLevel->size)==1 && slot > 1 && slot <= 5", v97);
        goto LABEL_110;
      }
      uint64_t v24 = (uint64_t)*v118;
      unint64_t v25 = atomic_load(*v118 + 1);
      while (1)
      {
        unint64_t v18 = (v25 + 7) & 0xFFFFFFFFFFFFFFF8;
        if (v18 + 2064 >= *(void *)(v24 + 16)) {
          break;
        }
LABEL_22:
        unint64_t v26 = v25;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(v24 + 8), &v26, v18 + 2056);
        _ZF = v26 == v25;
        unint64_t v25 = v26;
        if (_ZF) {
          goto LABEL_29;
        }
      }
      while (1)
      {
        os_unfair_lock_lock(&_slablock);
        uint64_t v24 = (uint64_t)*v118;
        unsigned int v28 = *v118 + 1;
        unint64_t v29 = atomic_load(v28);
        if (((v29 + 7) & 0xFFFFFFFFFFFFFFF8) + 2064 >= *(void *)(v24 + 16)) {
          break;
        }
        os_unfair_lock_unlock(&_slablock);
        unint64_t v25 = atomic_load(v28);
        unint64_t v18 = (v25 + 7) & 0xFFFFFFFFFFFFFFF8;
        if (v18 + 2064 < *(void *)(v24 + 16)) {
          goto LABEL_22;
        }
      }
      unint64_t v18 = (unint64_t)slab_new_slab(v118, 0x808uLL, 244);
      os_unfair_lock_unlock(&_slablock);
LABEL_29:
      bzero((void *)v18, 0x808uLL);
      uint64_t v31 = 0;
      int v32 = 0;
      unsigned int v33 = (int8x8_t *)(_X26 + 8);
      *(void *)unint64_t v18 = *(void *)_X26;
      while (1)
      {
        if (v32 >= *(unsigned __int8 *)(_X26 + 40))
        {
LABEL_40:
          unsigned int v39 = __clz(__rbit32(*(unsigned __int8 *)(_X26 + 41)));
          v30.i32[0] = *(unsigned __int8 *)(_X26 + 41);
          uint8x8_t v40 = (uint8x8_t)vcnt_s8(v30);
          v40.i16[0] = vaddlv_u8(v40);
          if (v40.i32[0] != 1 || v39 < 2 || v39 >= 6) {
            goto LABEL_121;
          }
          OSAtomicEnqueue((OSQueueHead *)(v9 + 16 * (v39 - 2) + 2080), (void *)_X26, 0);
          int8x8_t *v10 = (int8x8_t)(v18 | 1);
          int v13 = 1;
          int v121 = 1;
LABEL_4:
          _X26 = v18;
          goto LABEL_5;
        }
        if ((*(_DWORD *)(_X26 + 4 * (v31 >> 5) + 8) >> v31)) {
          break;
        }
LABEL_33:
        if (++v31 == 256) {
          goto LABEL_40;
        }
      }
      uint64_t v35 = 0;
      unsigned int v37 = v31 >> 6;
      if (v31 >> 6 != 1)
      {
        if (v37 != 2)
        {
          if (v37 != 3) {
            goto LABEL_32;
          }
          uint8x8_t v38 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(_X26 + 24));
          v38.i16[0] = vaddlv_u8(v38);
          uint64_t v35 = v38.u32[0];
        }
        uint8x8_t v34 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(_X26 + 16));
        v34.i16[0] = vaddlv_u8(v34);
        v35 += v34.u32[0];
      }
      uint8x8_t v36 = (uint8x8_t)vcnt_s8(*v33);
      v36.i16[0] = vaddlv_u8(v36);
      v35 += v36.u32[0];
LABEL_32:
      int8x8_t v30 = vcnt_s8((int8x8_t)(*(void *)&v33[v37] & ~(-1 << v31)));
      v30.i16[0] = vaddlv_u8((uint8x8_t)v30);
      *(void *)(v18 + 8 * v31 + 8) = *(void *)(_X26 + 8 * (v30.u32[0] + v35) + 48);
      ++v32;
      goto LABEL_33;
    }
    break;
  }
  if (v13 != 3)
  {
    if (v13 == 1)
    {
      if (v8 != v11)
      {
        if (v7) {
          int v14 = (unsigned __int8 *)(v9 + *v14 + 2144);
        }
        unsigned int v43 = (int8x8_t *)(_X26 + 8 * *v14);
        int8x8_t v45 = v43[1];
        uint64_t v10 = v43 + 1;
        int8x8_t v44 = v45;
        if (!*(void *)&v45)
        {
          uint64_t v85 = (uint64_t)_TermListEntryCreate(v9, v116, v8, v7);
          *unint64_t v112 = 1;
          int8x8_t *v10 = (int8x8_t)(v85 | 3);
          goto LABEL_155;
        }
        int v13 = v44.i8[0] & 3;
        int v121 = v13;
        int v2 = v116;
        goto LABEL_63;
      }
      uint64_t v85 = *(void *)_X26;
      if (*(void *)_X26) {
        return v85 + 16;
      }
      uint64_t v85 = (uint64_t)_TermListEntryCreate(v9, v116, v8, v7);
      *(void *)_X26 = v85;
LABEL_99:
      *unint64_t v112 = 1;
      goto LABEL_155;
    }
LABEL_163:
    uint64_t v99 = __si_assert_copy_extra_329();
    goto LABEL_131;
  }
  unsigned int v120 = 0;
  uint64_t v59 = _RBInsert(v9, _X26 & 0x7FFFFFFFFFFFFFFFLL, v116, 0, v8, v112, &v120, v11, &v122, v7);
  uint64_t v60 = v122;
  if (!v122) {
    goto LABEL_163;
  }
  unint64_t v61 = v59 & 0x7FFFFFFFFFFFFFFFLL;
  int8x8_t *v10 = (int8x8_t)(v59 & 0x7FFFFFFFFFFFFFFCLL | 3);
  unsigned int v62 = v120;
  if (v120 < 6) {
    goto LABEL_152;
  }
  unsigned int v111 = v120;
  uint64_t v113 = v60;
  bzero(v123, 0x1000uLL);
  unsigned int v63 = 512;
  unsigned int v120 = 512;
  int64x2_t v115 = vdupq_n_s64(0x8000000000000000);
  while (2)
  {
    bzero(__src, 0x808uLL);
    int v64 = 0;
    unsigned int v65 = 0;
    memset(v124, 0, 128);
    int8x8_t v66 = *(int8x8_t *)v115.i8;
    do
    {
      do
      {
        while (1)
        {
          if (v61)
          {
            do
            {
              while (1)
              {
                uint64_t v68 = *(void *)v61 & 0x7FFFFFFFFFFFFFFFLL;
                if (!v68) {
                  break;
                }
                v124[v64] = v61;
                if (v64 >= 14)
                {
                  unsigned __int8 v86 = __si_assert_copy_extra_329();
                  unsigned __int8 v87 = v86;
                  unsigned __int8 v88 = "";
                  if (v86) {
                    unsigned __int8 v88 = v86;
                  }
                  __message_assert("%s:%u: failed assertion '%s' %s ", "TermTrie.c", 322, "depth<15", v88);
                  goto LABEL_110;
                }
                if (*(unsigned __int16 *)(v61 + 32) >= 0x415u)
                {
                  unsigned __int8 v89 = __si_assert_copy_extra_329();
                  unsigned __int8 v87 = v89;
                  uint64_t v90 = "";
                  if (v89) {
                    uint64_t v90 = v89;
                  }
                  __message_assert("%s:%u: failed assertion '%s' %s ", "TermTrie.c", 323, "l->data.termLen <= (1024+20)", v90);
                  goto LABEL_110;
                }
                ++v64;
                unint64_t v61 = v68;
              }
              if (v65 >= v63)
              {
                unsigned int v91 = __si_assert_copy_extra_329();
                unsigned __int8 v87 = v91;
                CFNumberRef v92 = "";
                if (v91) {
                  CFNumberRef v92 = v91;
                }
                __message_assert("%s:%u: failed assertion '%s' %s ", "TermTrie.c", 326, "count<size", v92);
LABEL_110:
                free(v87);
                if (__valid_fs(-1)) {
                  uint64_t v93 = 2989;
                }
                else {
                  uint64_t v93 = 3072;
                }
                *(_DWORD *)uint64_t v93 = -559038737;
                abort();
              }
              uint64_t v67 = *(void *)(v61 + 8);
              v123[v65++] = v61;
              *(int64x2_t *)unint64_t v61 = v115;
              unint64_t v61 = v67 & 0x7FFFFFFFFFFFFFFFLL;
            }
            while ((v67 & 0x7FFFFFFFFFFFFFFFLL) != 0);
          }
          int v69 = v64 - 1;
          if (v64 >= 1) {
            break;
          }
          unint64_t v61 = 0;
          if (!v64) {
            goto LABEL_81;
          }
        }
        if (v65 >= v63) {
          goto LABEL_130;
        }
        unsigned int v70 = (int64x2_t *)v124[v69];
        v124[v64] = 0;
        unint64_t v61 = v70->i64[1] & 0x7FFFFFFFFFFFFFFFLL;
        v123[v65++] = v70;
        *unsigned int v70 = v115;
        --v64;
      }
      while (v69);
LABEL_81:
      ;
    }
    while (v61);
    uint64_t v71 = __src[0];
    if (!v65)
    {
      unint64_t v94 = (unint64_t)_term_trie_compact_alloc(v9, 4u, *(int8x8_t *)v115.i8);
      *(void *)unint64_t v94 = v71;
      uint64_t v95 = 2;
      goto LABEL_151;
    }
    unsigned int v72 = 0;
    uint64_t v73 = (int)v65 - 1;
    unint64_t v117 = v10;
    do
    {
      unint64_t v75 = v123[v73];
      unsigned int v76 = *(unsigned __int16 *)(v75 + 32);
      if (v76 < v11) {
        goto LABEL_130;
      }
      if (v76 == v11)
      {
        if (v71) {
          goto LABEL_130;
        }
        ++v72;
        uint64_t v71 = v123[v73];
      }
      else
      {
        uint64_t v77 = &__src[*(unsigned __int8 *)(v75 + v11 + 34)];
        uint64_t v80 = v77[1];
        __int16 v79 = v77 + 1;
        uint64_t v78 = v80;
        if (v80)
        {
          if ((~(_BYTE)v78 & 3) != 0) {
            goto LABEL_130;
          }
          __src[*(unsigned __int8 *)(v75 + v11 + 34) + 1] = _RBAppend(v78 & 0x7FFFFFFFFFFFFFFCLL, v75, 0, v11 + 1) & 0x7FFFFFFFFFFFFFFCLL | 3;
        }
        else
        {
          ++v72;
          *__int16 v79 = v75 | 3;
        }
        uint64_t v10 = v117;
      }
    }
    while (v73--);
    __src[0] = v71;
    if (v72 == 1)
    {
      uint64_t v81 = (int8x8_t *)_term_trie_compact_alloc(v9, 4u, v66);
      uint64_t v82 = *(unsigned __int8 *)(v122 + v11 + 34);
      unint64_t v61 = __src[v82 + 1] & 0xFFFFFFFFFFFFFFFCLL;
      if (v61)
      {
        unsigned __int8 v83 = v81;
        unsigned __int8 v84 = &v81[TermTrieCompactSetFollows(v81, v82)];
        v84[6] = (int8x8_t)__src[*(unsigned __int8 *)(v122 + v11 + 34) + 1];
        int8x8_t *v10 = (int8x8_t)((unint64_t)v83 | 2);
        ++v11;
        unsigned int v63 = v120;
        uint64_t v10 = v84 + 6;
        continue;
      }
LABEL_130:
      uint64_t v99 = __si_assert_copy_extra_329();
LABEL_131:
      __message_assert("%s:%u: failed assertion '%s' %s ");
LABEL_132:
      free(v99);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    break;
  }
  if (v72 >= 5)
  {
    if (v72 >= 9)
    {
      if (v72 >= 0x11)
      {
        if (v72 > 0x20)
        {
          long long v100 = *v118;
          unint64_t v101 = atomic_load(*v118 + 1);
          while (1)
          {
            unint64_t v94 = (v101 + 7) & 0xFFFFFFFFFFFFFFF8;
            if (v94 + 2064 >= v100[2]) {
              break;
            }
LABEL_138:
            unint64_t v102 = v101;
            atomic_compare_exchange_strong(v100 + 1, &v102, v94 + 2056);
            _ZF = v102 == v101;
            unint64_t v101 = v102;
            if (_ZF) {
              goto LABEL_167;
            }
          }
          while (1)
          {
            os_unfair_lock_lock(&_slablock);
            long long v100 = *v118;
            unint64_t v103 = *v118 + 1;
            unint64_t v104 = atomic_load(v103);
            if (((v104 + 7) & 0xFFFFFFFFFFFFFFF8) + 2064 >= v100[2]) {
              break;
            }
            os_unfair_lock_unlock(&_slablock);
            unint64_t v101 = atomic_load(v103);
            unint64_t v94 = (v101 + 7) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v10 = v117;
            if (v94 + 2064 < v100[2]) {
              goto LABEL_138;
            }
          }
          unint64_t v94 = (unint64_t)slab_new_slab(v118, 0x808uLL, 244);
          os_unfair_lock_unlock(&_slablock);
          uint64_t v10 = v117;
LABEL_167:
          bzero((void *)v94, 0x808uLL);
          memcpy((void *)v94, __src, 0x808uLL);
          uint64_t v95 = 1;
          goto LABEL_151;
        }
        unsigned int v98 = 32;
      }
      else
      {
        unsigned int v98 = 16;
      }
    }
    else
    {
      unsigned int v98 = 8;
    }
    unint64_t v94 = (unint64_t)_term_trie_compact_alloc(v9, v98, v66);
    *(void *)unint64_t v94 = v71;
    goto LABEL_146;
  }
  unint64_t v94 = (unint64_t)_term_trie_compact_alloc(v9, 4u, v66);
  *(void *)unint64_t v94 = v71;
  if (!v72)
  {
    uint64_t v95 = 2;
    goto LABEL_151;
  }
LABEL_146:
  unint64_t v105 = 0;
  unsigned int v106 = 0;
  uint64_t v95 = 2;
  do
  {
    uint64_t v107 = __src[v105 + 1];
    if (v107)
    {
      *(void *)(v94 + 8 * TermTrieCompactSetFollows((int8x8_t *)v94, v105) + 48) = v107;
      ++v106;
    }
    if (v105 > 0xFE) {
      break;
    }
    ++v105;
  }
  while (v106 < v72);
LABEL_151:
  int8x8_t *v10 = (int8x8_t)(v95 | v94);
  uint64_t v60 = v113;
  unsigned int v62 = v111;
LABEL_152:
  if (v62 <= 5) {
    uint64_t v85 = v60;
  }
  else {
    uint64_t v85 = v122;
  }
LABEL_155:
  if (!v85)
  {
    unsigned int v109 = __si_assert_copy_extra_329();
    unsigned __int8 v87 = v109;
    uint64_t v110 = "";
    if (v109) {
      uint64_t v110 = v109;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "TermTrie.c", 715, "e", v110);
    goto LABEL_110;
  }
  return v85 + 16;
}

uint64_t _RBInsert(uint64_t a1, unint64_t a2, unsigned __int8 *a3, int a4, uint64_t a5, unsigned char *a6, _DWORD *a7, unsigned int a8, uint64_t *a9, unsigned __int8 a10)
{
  uint64_t v11 = a1;
  uint64_t v12 = a9;
  uint64_t v13 = a2 & 0x7FFFFFFFFFFFFFFFLL;
  if ((a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    unint64_t v14 = a2;
    uint64_t v16 = *(void *)v13;
    uint64_t v15 = *(void *)((a2 & 0x7FFFFFFFFFFFFFFFLL) + 8);
    if ((*(void *)v13 & 0x8000000000000000) != 0 && v15 < 0)
    {
      unint64_t v14 = a2 | 0x8000000000000000;
      v16 &= ~0x8000000000000000;
      v15 &= ~0x8000000000000000;
      *(void *)uint64_t v13 = v16;
      *(void *)((a2 & 0x7FFFFFFFFFFFFFFFLL) + 8) = v15;
    }
    _X8 = v16 & 0x7FFFFFFFFFFFFFFFLL;
    __asm { PRFM            #4, [X8] }
    _X8 = v15 & 0x7FFFFFFFFFFFFFFFLL;
    __asm { PRFM            #4, [X8] }
    unint64_t v25 = (unsigned __int8 *)(v13 + a8 + 34);
    unint64_t v26 = &a3[a8];
    unsigned int v27 = *(unsigned __int16 *)(v13 + 32);
    int v28 = v27 - a5;
    if (v27 >= a5) {
      unsigned int v27 = a5;
    }
    size_t v29 = v27 - a8;
    if (a10)
    {
      if (v27 == a8) {
        goto LABEL_20;
      }
      while (1)
      {
        int v31 = *v25++;
        int v30 = v31;
        unsigned int v32 = *v26++;
        int v33 = v30 - *(unsigned __int8 *)(v11 + 2144 + v32);
        if (v33) {
          break;
        }
        if (!--v29) {
          goto LABEL_20;
        }
      }
    }
    else
    {
      uint64_t v35 = a6;
      uint8x8_t v36 = a7;
      uint64_t v44 = v13;
      uint64_t v37 = v11;
      uint64_t v38 = a5;
      int v39 = memcmp(v25, v26, v29);
      a5 = v38;
      uint64_t v11 = v37;
      uint64_t v13 = v44;
      a7 = v36;
      a6 = v35;
      uint64_t v12 = a9;
      int v33 = v39;
    }
    if (v33)
    {
      if (v33 >= 1) {
        goto LABEL_16;
      }
      goto LABEL_21;
    }
LABEL_20:
    int v33 = v28;
    if (v28 >= 1)
    {
LABEL_16:
      ++*a7;
      uint64_t v40 = _RBInsert(v11, v16, a3, 0, a5, a6);
      *(void *)uint64_t v13 = v40;
      if ((v14 & 0x8000000000000000) != 0 && a4 && v40 < 0)
      {
        *(void *)uint64_t v13 = *(void *)((v40 & 0x7FFFFFFFFFFFFFFFLL) + 8);
        *(void *)((v40 & 0x7FFFFFFFFFFFFFFFLL) + 8) = v14;
        uint64_t v41 = *(void *)(v40 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v13 = v40 & 0x7FFFFFFFFFFFFFFFLL;
        if ((v41 & 0x8000000000000000) == 0) {
          return v40;
        }
      }
      else
      {
        uint64_t v41 = v40;
        uint64_t v40 = v14;
        if ((v41 & 0x8000000000000000) == 0) {
          return v40;
        }
      }
      unint64_t v14 = v41 & 0x7FFFFFFFFFFFFFFFLL;
      if ((*(void *)(v41 & 0x7FFFFFFFFFFFFFFFLL) & 0x8000000000000000) != 0)
      {
        *(void *)uint64_t v13 = *(void *)((v41 & 0x7FFFFFFFFFFFFFFFLL) + 8);
        *(void *)((v41 & 0x7FFFFFFFFFFFFFFFLL) + 8) = v40 | 0x8000000000000000;
        return v14;
      }
      return v40;
    }
LABEL_21:
    if ((v33 & 0x80000000) == 0)
    {
      *a6 = 0;
      *uint64_t v12 = v13;
      return v14;
    }
    ++*a7;
    uint64_t v40 = _RBInsert(v11, v15, a3, 1, a5, a6);
    *(void *)(v13 + 8) = v40;
    if ((v14 & 0x8000000000000000) != 0 && !a4 && v40 < 0)
    {
      *(void *)(v13 + 8) = *(void *)(v40 & 0x7FFFFFFFFFFFFFFFLL);
      *(void *)(v40 & 0x7FFFFFFFFFFFFFFFLL) = v14;
      uint64_t v42 = *(void *)((v40 & 0x7FFFFFFFFFFFFFFFLL) + 8);
      uint64_t v13 = v40 & 0x7FFFFFFFFFFFFFFFLL;
      if ((v42 & 0x8000000000000000) == 0) {
        return v40;
      }
    }
    else
    {
      uint64_t v42 = v40;
      uint64_t v40 = v14;
      if ((v42 & 0x8000000000000000) == 0) {
        return v40;
      }
    }
    unint64_t v14 = v42 & 0x7FFFFFFFFFFFFFFFLL;
    if ((*(void *)((v42 & 0x7FFFFFFFFFFFFFFFLL) + 8) & 0x8000000000000000) != 0)
    {
      *(void *)(v13 + 8) = *(void *)v14;
      *(void *)unint64_t v14 = v40 | 0x8000000000000000;
      return v14;
    }
    return v40;
  }
  *a6 = 1;
  uint64_t v34 = (uint64_t)_TermListEntryCreate(a1, a3, (unsigned __int16)a5, a10);
  *a9 = v34;
  return v34 & 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t _RBAppend(unint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  int v5 = (uint64_t *)(a1 & 0x7FFFFFFFFFFFFFFFLL);
  if ((a1 & 0x7FFFFFFFFFFFFFFFLL) == 0)
  {
    *(int64x2_t *)a2 = vdupq_n_s64(0x8000000000000000);
    return a2 & 0x7FFFFFFFFFFFFFFFLL;
  }
  unint64_t v8 = a1;
  unsigned __int16 v9 = *(_WORD *)(a2 + 32) - a4;
  uint64_t v10 = *v5;
  if (*v5 < 0)
  {
    uint64_t v11 = *(void *)((a1 & 0x7FFFFFFFFFFFFFFFLL) + 8);
    if (v11 < 0)
    {
      unint64_t v8 = a1 | 0x8000000000000000;
      v10 &= ~0x8000000000000000;
      *int v5 = v10;
      *(void *)((a1 & 0x7FFFFFFFFFFFFFFFLL) + 8) = v11 & 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  int v12 = v9;
  int v13 = *(unsigned __int16 *)((a1 & 0x7FFFFFFFFFFFFFFFLL) + 0x20);
  if (v13 - (int)a4 >= v9) {
    size_t v14 = v9;
  }
  else {
    size_t v14 = (v13 - a4);
  }
  int v15 = memcmp((const void *)(a2 + a4 + 34), (char *)v5 + a4 + 34, v14);
  if (!v15)
  {
    int v15 = a4 - v13 + v12;
    if (!v15)
    {
      int8x8_t v20 = __si_assert_copy_extra_329();
      uint8x8_t v21 = v20;
      int v22 = "";
      if (v20) {
        int v22 = v20;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "TermTrie.c", 1072, "result!=0", v22);
      free(v21);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
  }
  if (v15 < 0)
  {
    uint64_t result = _RBAppend(v10, a2, 0, a4);
    *int v5 = result;
    if ((v8 & 0x8000000000000000) != 0 && a3 && result < 0)
    {
      *int v5 = *(void *)((result & 0x7FFFFFFFFFFFFFFFLL) + 8);
      *(void *)((result & 0x7FFFFFFFFFFFFFFFLL) + 8) = v8;
      uint64_t v19 = *(void *)(result & 0x7FFFFFFFFFFFFFFFLL);
      int v5 = (uint64_t *)(result & 0x7FFFFFFFFFFFFFFFLL);
      if ((v19 & 0x8000000000000000) == 0) {
        return result;
      }
    }
    else
    {
      uint64_t v19 = result;
      uint64_t result = v8;
      if ((v19 & 0x8000000000000000) == 0) {
        return result;
      }
    }
    unint64_t v18 = (uint64_t *)(v19 & 0x7FFFFFFFFFFFFFFFLL);
    if (*v18 < 0)
    {
      *int v5 = v18[1];
      v18[1] = result | 0x8000000000000000;
      return (uint64_t)v18;
    }
  }
  else
  {
    uint64_t result = _RBAppend(v5[1], a2, 1, a4);
    v5[1] = result;
    if ((v8 & 0x8000000000000000) != 0 && !a3 && result < 0)
    {
      v5[1] = *(void *)(result & 0x7FFFFFFFFFFFFFFFLL);
      *(void *)(result & 0x7FFFFFFFFFFFFFFFLL) = v8;
      uint64_t v17 = *(void *)((result & 0x7FFFFFFFFFFFFFFFLL) + 8);
      int v5 = (uint64_t *)(result & 0x7FFFFFFFFFFFFFFFLL);
      if ((v17 & 0x8000000000000000) == 0) {
        return result;
      }
    }
    else
    {
      uint64_t v17 = result;
      uint64_t result = v8;
      if ((v17 & 0x8000000000000000) == 0) {
        return result;
      }
    }
    unint64_t v18 = (uint64_t *)(v17 & 0x7FFFFFFFFFFFFFFFLL);
    if (v18[1] < 0)
    {
      v5[1] = *v18;
      *unint64_t v18 = result | 0x8000000000000000;
      return (uint64_t)v18;
    }
  }
  return result;
}

uint64_t pushTermData(uint64_t a1, int *a2, uint64_t a3, int a4, char a5, int a6, unsigned int a7)
{
  if (a5)
  {
    a2[3] = 0;
    if (a6)
    {
      *((void *)a2 + 1) = a3;
      *a2 |= 1u;
      a2[1] = 2 * (a6 != 2);
      return 1;
    }
LABEL_14:
    a2[1] = a7;
    a2[2] = a3;
    return 1;
  }
  int v7 = *a2;
  if (!a6)
  {
    if (v7)
    {
      if (*((void *)a2 + 1) == a3) {
        return 0;
      }
    }
    else
    {
      uint64_t v8 = a2[2];
      if (v8 == a3) {
        return 0;
      }
      if (v8 == a4) {
        goto LABEL_14;
      }
    }
    addToExistingTermUpdateList(a1, (unsigned int *)a2, a3, 0, a7);
    return 1;
  }
  if ((v7 & 1) == 0 || *((void *)a2 + 1) != a3) {
    goto LABEL_17;
  }
  if (a6 != 2)
  {
    if (a6 == 1 && a2[1] == 2) {
      return 0;
    }
    goto LABEL_17;
  }
  if (a2[1]) {
LABEL_17:
  }
    addToExistingTermUpdateList(a1, (unsigned int *)a2, a3, a6, a7);
  return 0;
}

int64x2_t *_TermListEntryCreate(uint64_t a1, unsigned __int8 *__src, size_t __n, int a4)
{
  unsigned int v4 = __n;
  if (__n >= 0x415)
  {
    uint64_t v17 = __si_assert_copy_extra_329();
    unint64_t v18 = v17;
    uint64_t v19 = "";
    if (v17) {
      uint64_t v19 = v17;
    }
    __message_assert("%s:%u: failed assertion '%s' %s %d", "TermTrie.c", 270, "term_len <= CI_UTF8CHARS_BUFFER_SIZE", v19, v4);
    free(v18);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v8 = __n + 41;
  unsigned __int16 v9 = (void **)(a1 + 8);
  uint64_t v10 = *(void **)(a1 + 8);
  for (unint64_t i = atomic_load(v10 + 1); ; unint64_t i = atomic_load(v15))
  {
    while (1)
    {
      int v12 = (int64x2_t *)((i + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)&v12->u64[1] + v8 >= v10[2]) {
        break;
      }
      unint64_t v13 = i;
      atomic_compare_exchange_strong(v10 + 1, &v13, (unint64_t)v12->u64 + v8);
      BOOL v14 = v13 == i;
      unint64_t i = v13;
      if (v14) {
        goto LABEL_14;
      }
    }
    os_unfair_lock_lock(&_slablock);
    uint64_t v10 = *v9;
    int v15 = *v9 + 1;
    unint64_t v16 = atomic_load(v15);
    if (((v16 + 7) & 0xFFFFFFFFFFFFFFF8) + v8 + 8 >= v10[2]) {
      break;
    }
    os_unfair_lock_unlock(&_slablock);
  }
  int v12 = (int64x2_t *)slab_new_slab(v9, v4 + 41, 244);
  os_unfair_lock_unlock(&_slablock);
LABEL_14:
  int8x8_t v20 = &v12[2].i8[2];
  if (a4)
  {
    uint64_t v21 = v4;
    do
    {
      unsigned int v22 = *__src++;
      *v20++ = *(unsigned char *)(a1 + 2144 + v22);
      --v21;
    }
    while (v21);
  }
  else
  {
    memcpy(v20, __src, v4);
  }
  v12[1].i32[0] = 0;
  v12[2].i8[v4 + 2] = 0;
  v12[2].i16[0] = v4;
  *int v12 = vdupq_n_s64(0x8000000000000000);
  atomic_fetch_add((atomic_uint *volatile)a1, 1u);
  return v12;
}

void *addToExistingTermUpdateList(uint64_t a1, unsigned int *__src, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int v10 = *__src;
  if (*__src) {
    unsigned int v11 = 2;
  }
  else {
    unsigned int v11 = 1;
  }
  int v12 = (atomic_uint *)(a1 + 100);
  unsigned int v13 = atomic_load((unsigned int *)(a1 + 100));
  unsigned int v14 = v13 + v11;
  uint64_t v15 = *(unsigned int *)(a1 + 96);
  if (v14 >= v15)
  {
    uint64_t v19 = (void **)(a1 + 88);
    unsigned int v20 = 2 * v15;
    if (!v15) {
      unsigned int v20 = 0x4000;
    }
    *(_DWORD *)(a1 + 96) = v20;
    if (my_vm_reallocate(v19, 12 * v15, 12 * v20, 243, *(void *)(a1 + 104)))
    {
      uint64_t v21 = __si_assert_copy_extra_329();
      unsigned int v22 = v21;
      int v23 = "";
      if (v21) {
        int v23 = v21;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "DocPosting.h", 250, "0 == kr", v23);
      free(v22);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
  }
  unsigned int add = atomic_fetch_add(v12, v11);
  if (v10) {
    size_t v17 = 16;
  }
  else {
    size_t v17 = 12;
  }
  uint64_t result = memcpy((void *)(*(void *)(a1 + 88) + 12 * add), __src, v17);
  void *__src = 2 * add;
  if (a4)
  {
    *((void *)__src + 1) = a3;
    void *__src = (2 * add) | 1;
    __src[1] = 2 * (a4 != 2);
  }
  else
  {
    __src[2] = a3;
    if (v10) {
      __src[3] = 0;
    }
    __src[1] = a5;
  }
  return result;
}

uint64_t TermTrieCompactSetFollows(int8x8_t *a1, unsigned int a2)
{
  __int32 v2 = 0;
  uint64_t v3 = a1[5].u8[0];
  unsigned int v4 = a1 + 1;
  a1[1].i32[a2 >> 5] |= 1 << a2;
  unsigned int v5 = a2 >> 6;
  if (a2 >> 6 != 1)
  {
    if (v5 != 2)
    {
      if (v5 != 3) {
        goto LABEL_7;
      }
      uint8x8_t v6 = (uint8x8_t)vcnt_s8(a1[3]);
      v6.i16[0] = vaddlv_u8(v6);
      __int32 v2 = v6.i32[0];
    }
    uint8x8_t v7 = (uint8x8_t)vcnt_s8(a1[2]);
    v7.i16[0] = vaddlv_u8(v7);
    v2 += v7.i32[0];
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(*v4);
  v8.i16[0] = vaddlv_u8(v8);
  v2 += v8.i32[0];
LABEL_7:
  uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)&v4[v5] & ~(-1 << a2)));
  v9.i16[0] = vaddlv_u8(v9);
  uint64_t v10 = (v2 + v9.i32[0]);
  if (v10 >= v3) {
    goto LABEL_17;
  }
  uint64_t v11 = (~v10 + v3);
  if (v11 < 0x29
    || ((int v12 = &a1[v3], v13 = &a1[(v3 - 1)], &v12[-v11 + 6] <= &v12[6])
      ? (BOOL v14 = &v13[-v11 + 6] > &v13[6])
      : (BOOL v14 = 1),
        v14 || (unint64_t)((char *)v13 - (char *)v12) < 0x20))
  {
    uint64_t v15 = v3;
    goto LABEL_15;
  }
  uint64_t v21 = v11 + 1;
  uint64_t v22 = (v11 + 1) & 0x1FFFFFFFCLL;
  int v23 = &a1[v3 + 5];
  uint64_t v24 = v3 + 0xFFFFFFFFLL;
  uint64_t v25 = v22;
  do
  {
    unint64_t v26 = &a1[v24];
    long long v27 = *(_OWORD *)v26[5].i8;
    *(_OWORD *)v23[-2].i8 = *(_OWORD *)v26[3].i8;
    *(_OWORD *)v23->i8 = v27;
    v23 -= 4;
    v24 -= 4;
    v25 -= 4;
  }
  while (v25);
  if (v21 != v22)
  {
    uint64_t v15 = v3 - v22;
LABEL_15:
    unint64_t v16 = &a1[v15 + 6];
    size_t v17 = &a1[(v15 - 1) + 6];
    do
    {
      int8x8_t v18 = *v17--;
      *v16-- = v18;
      LODWORD(v15) = v15 - 1;
    }
    while (v10 < v15);
  }
LABEL_17:
  unsigned __int8 v19 = v3 + 1;
  a1[5].i8[0] = v19;
  if (a1[5].u8[1] < v19)
  {
    int v28 = __si_assert_copy_extra_329();
    size_t v29 = v28;
    int v30 = "";
    if (v28) {
      int v30 = v28;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "TermTrie.c", 154, "level->size>=level->count", v30);
    free(v29);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return v10;
}

void CIPositionNodeTransferDocument(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  int v3 = v2;
  unsigned int v5 = v4;
  uint8x8_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = v1;
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  unsigned int v13 = v6[2];
  if (v2) {
    size_t v14 = 5 * v13 + 6;
  }
  else {
    size_t v14 = 5 * v13 + 1;
  }
  if (v14 <= 0x10000)
  {
    uint64_t v15 = 0;
    unint64_t v16 = v29;
  }
  else
  {
    uint64_t v15 = malloc_type_malloc(v14, 0x70BE431FuLL);
    unint64_t v16 = v15;
  }
  bzero(v29, 0x10000uLL);
  uint64_t v27 = 0;
  CompactPositionsList((uint64_t)v16, v5, v13, 0, v3, &v28, *v7, v7[1], v17, &v27, v9);
  uint64_t v18 = v27;
  v16[v27] = 0;
  unsigned int v19 = positionInfoAlloc_ts(v12, v18 + 9);
  if (!v19)
  {
    int v23 = __si_assert_copy_extra(0);
    uint64_t v24 = v23;
    uint64_t v25 = "";
    if (v23) {
      uint64_t v25 = v23;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadData.c", 447, "posPtrStart!=0", v25);
    free(v24);
    if (__valid_fs(-1)) {
      uint64_t v26 = 2989;
    }
    else {
      uint64_t v26 = 3072;
    }
    *(_DWORD *)uint64_t v26 = -559038737;
    abort();
  }
  unsigned int v20 = v19;
  size_t v21 = v18 + 1;
  uint64_t v22 = (_DWORD *)(*(void *)(v12 + 16) + 8 * v19);
  *v22++ = v21;
  memcpy(v22, v16, v21);
  *(_DWORD *)((char *)v22 + v21) = *(_DWORD *)(v11 + 4);
  if (v15) {
    free(v15);
  }
  *(_DWORD *)(v11 + 24) = v5;
  *(void *)(v11 + 16) = 0;
  *(_DWORD *)uint64_t v11 = 0;
  *(_DWORD *)(v11 + 4) = v20;
  *(_DWORD *)(v11 + 8) = 0;
}

uint64_t positionInfoAlloc_ts(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = a2 >> 3;
  if ((a2 & 7) != 0) {
    LODWORD(v3) = v3 + 1;
  }
  uint64_t add = atomic_fetch_add((atomic_uint *volatile)(a1 + 28), v3);
  if (add + a2 > *(void *)(a1 + 48) + 0x8000)
  {
    *(void *)(a1 + 48) = ((add + a2) & 0xFFFFFFFFFFFC0000) + 0x40000;
    madvise((void *)((*(void *)(a1 + 16) + 8 * add + 8 * a2) & 0xFFFFFFFFFFFC0000), 0x40000uLL, 3);
  }
  while (1)
  {
    unsigned int v5 = atomic_load((unsigned int *)(a1 + 28));
    uint64_t v6 = *(unsigned int *)(a1 + 32);
    if (v5 < v6) {
      break;
    }
    unsigned int v7 = 2 * v6;
    if (!v6) {
      unsigned int v7 = 0x20000;
    }
    *(_DWORD *)(a1 + 32) = v7;
    if (my_vm_reallocate((void **)(a1 + 16), 8 * v6, 8 * v7, 247, *(void *)(a1 + 56)))
    {
      uint64_t v8 = __si_assert_copy_extra(0);
      uint64_t v9 = v8;
      uint64_t v10 = "";
      if (v8) {
        uint64_t v10 = v8;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "CIPositions.h", 163, "0 == kr", v10);
      free(v9);
      if (__valid_fs(-1)) {
        uint64_t v11 = 2989;
      }
      else {
        uint64_t v11 = 3072;
      }
      *(_DWORD *)uint64_t v11 = -559038737;
      abort();
    }
  }
  return add;
}

unsigned int *CompactPositionsList(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, _DWORD *a6, unsigned int a7, unsigned int a8, __n128 a9, uint64_t *a10, uint64_t a11)
{
  unsigned int v11 = a8;
  unsigned int v12 = a7;
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  *a6 = 0;
  if (!a8)
  {
    _X22 = 0;
    if (a5) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v18 = 0;
    goto LABEL_15;
  }
  _X22 = (unsigned int *)(*(void *)(a11 + 16) + 8 * a8);
  if (!a5) {
    goto LABEL_6;
  }
LABEL_3:
  if (a2 > 0x7F)
  {
    if (a2 >> 14)
    {
      if (a2 >> 21)
      {
        if (a2 >> 28)
        {
          *(unsigned char *)a1 = -16;
          *(_DWORD *)(a1 + 1) = a2;
          uint64_t v18 = 5;
        }
        else
        {
          *(unsigned char *)a1 = HIBYTE(a2) | 0xE0;
          *(unsigned char *)(a1 + 1) = BYTE2(a2);
          *(unsigned char *)(a1 + 2) = BYTE1(a2);
          *(unsigned char *)(a1 + 3) = a2;
          uint64_t v18 = 4;
        }
      }
      else
      {
        *(unsigned char *)a1 = BYTE2(a2) | 0xC0;
        *(unsigned char *)(a1 + 1) = BYTE1(a2);
        *(unsigned char *)(a1 + 2) = a2;
        uint64_t v18 = 3;
      }
    }
    else
    {
      *(unsigned char *)a1 = BYTE1(a2) | 0x80;
      *(unsigned char *)(a1 + 1) = a2;
      uint64_t v18 = 2;
    }
  }
  else
  {
    *(unsigned char *)a1 = a2;
    uint64_t v18 = 1;
  }
  *a10 = v18;
LABEL_15:
  if (a7 > 0x7F)
  {
    if (a7 >> 14)
    {
      if (a7 >> 21)
      {
        if (a7 >> 28)
        {
          uint64_t v23 = a1 + v18;
          *(unsigned char *)uint64_t v23 = -16;
          *(_DWORD *)(v23 + 1) = a7;
          uint64_t v19 = v18 + 5;
        }
        else
        {
          uint64_t v22 = (unsigned char *)(a1 + v18);
          *uint64_t v22 = HIBYTE(a7) | 0xE0;
          v22[1] = BYTE2(a7);
          v22[2] = BYTE1(a7);
          uint64_t v19 = v18 + 4;
          v22[3] = a7;
        }
      }
      else
      {
        size_t v21 = (unsigned char *)(a1 + v18);
        *size_t v21 = BYTE2(a7) | 0xC0;
        v21[1] = BYTE1(a7);
        uint64_t v19 = v18 + 3;
        v21[2] = a7;
      }
    }
    else
    {
      unsigned int v20 = (unsigned char *)(a1 + v18);
      *unsigned int v20 = BYTE1(a7) | 0x80;
      uint64_t v19 = v18 + 2;
      v20[1] = a7;
    }
  }
  else
  {
    uint64_t v19 = v18 + 1;
    *(unsigned char *)(a1 + v18) = a7;
  }
  *a10 = v19;
  uint64_t v24 = (int *)&unk_1E9FC9000;
  if (dword_1E9FC90CC >= 5)
  {
    unint64_t v75 = a6;
    int v59 = *__error();
    unsigned int v72 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 67109120;
      unsigned int v77 = a2;
      _os_log_impl(&dword_1BD672000, v72, OS_LOG_TYPE_DEFAULT, "DocID: %d", buf, 8u);
    }
    *__error() = v59;
    uint64_t v24 = (int *)&unk_1E9FC9000;
    a6 = v75;
    if (dword_1E9FC90CC >= 5)
    {
      int v60 = *__error();
      unint64_t v61 = _SILogForLogForCategory(10);
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)stat buf = 67109120;
        unsigned int v77 = v12;
        _os_log_impl(&dword_1BD672000, v61, OS_LOG_TYPE_DEFAULT, "Start pos: %d", buf, 8u);
      }
      *__error() = v60;
      a6 = v75;
      uint64_t v24 = (_DWORD *)&unk_1E9FC9000;
    }
  }
  if (a4)
  {
    if (a3 >= 2)
    {
      int v25 = 1;
      uint64_t v26 = &dword_1BD672000;
      a9.n128_u64[0] = 67109120;
      do
      {
        unsigned int v27 = v12;
        unsigned int v12 = *_X22;
        unsigned int v28 = v27 - *_X22;
        if (v24[51] >= 5)
        {
          __n128 v70 = a9;
          int8x8_t v45 = v26;
          uint64_t v73 = a6;
          int v66 = *__error();
          log = _SILogForLogForCategory(10);
          if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)stat buf = v70.n128_u32[0];
            unsigned int v77 = v12;
            _os_log_impl(v45, log, OS_LOG_TYPE_DEFAULT, "Next: %d", buf, 8u);
          }
          *__error() = v66;
          uint64_t v24 = (int *)&unk_1E9FC9000;
          a6 = v73;
          uint64_t v26 = v45;
          a9 = v70;
          if (dword_1E9FC90CC >= 5)
          {
            int v67 = *__error();
            loga = _SILogForLogForCategory(10);
            if (os_log_type_enabled(loga, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)stat buf = v70.n128_u32[0];
              unsigned int v77 = v28;
              _os_log_impl(v45, loga, OS_LOG_TYPE_DEFAULT, "Delta: %d", buf, 8u);
            }
            *__error() = v67;
            a6 = v73;
            uint64_t v24 = (_DWORD *)&unk_1E9FC9000;
            uint64_t v26 = v45;
            a9 = v70;
          }
        }
        uint64_t v29 = _X22[1];
        if (v29) {
          _X22 = (unsigned int *)(*(void *)(a11 + 16) + 8 * v29);
        }
        else {
          _X22 = 0;
        }
        __asm { PRFM            #0, [X22] }
        uint64_t v35 = *a10;
        if (v28 > 0x7F)
        {
          if (v28 >> 14)
          {
            if (v28 >> 21)
            {
              if (v28 >> 28)
              {
                uint64_t v40 = a1 + v35;
                *(unsigned char *)uint64_t v40 = -16;
                *(_DWORD *)(v40 + 1) = v28;
                uint64_t v36 = v35 + 5;
              }
              else
              {
                int v39 = (unsigned char *)(a1 + v35);
                *int v39 = HIBYTE(v28) | 0xE0;
                v39[1] = BYTE2(v28);
                v39[2] = BYTE1(v28);
                uint64_t v36 = v35 + 4;
                v39[3] = v28;
              }
            }
            else
            {
              uint64_t v38 = (unsigned char *)(a1 + v35);
              *uint64_t v38 = BYTE2(v28) | 0xC0;
              v38[1] = BYTE1(v28);
              uint64_t v36 = v35 + 3;
              v38[2] = v28;
            }
          }
          else
          {
            uint64_t v37 = (unsigned char *)(a1 + v35);
            unsigned char *v37 = BYTE1(v28) | 0x80;
            uint64_t v36 = v35 + 2;
            v37[1] = v28;
          }
        }
        else
        {
          uint64_t v36 = v35 + 1;
          *(unsigned char *)(a1 + v35) = v28;
        }
        *a10 = v36;
        if (v11)
        {
          uint64_t v41 = *(void *)(a11 + 16);
          unsigned int v42 = atomic_load((unsigned int *)(a11 + 24));
          unsigned int v43 = (unsigned int *)(v41 + 8 * v11 + 4);
          unsigned int v44 = v42;
          do
          {
            unsigned int *v43 = v42;
            atomic_compare_exchange_strong((atomic_uint *volatile)(a11 + 24), &v44, v11);
            _ZF = v44 == v42;
            unsigned int v42 = v44;
          }
          while (!_ZF);
        }
        ++v25;
        unsigned int v11 = v29;
      }
      while (v25 != a3);
      goto LABEL_78;
    }
LABEL_77:
    LODWORD(v29) = v11;
    goto LABEL_78;
  }
  if (a3 < 2) {
    goto LABEL_77;
  }
  uint64_t v46 = *(void *)(a11 + 16);
  int v47 = v24[51];
  unsigned int v48 = a3 - 1;
  a9.n128_u64[0] = 67109120;
  do
  {
    unsigned int v49 = v12;
    unsigned int v12 = *_X22;
    uint64_t v29 = _X22[1];
    if (v29) {
      _X22 = (unsigned int *)(v46 + 8 * v29);
    }
    else {
      _X22 = 0;
    }
    __asm { PRFM            #0, [X22] }
    unsigned int v51 = v49 - v12;
    if (v47 >= 5)
    {
      __n128 v71 = a9;
      CFDataRef v74 = a6;
      int v68 = *__error();
      logb = _SILogForLogForCategory(10);
      if (os_log_type_enabled(logb, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)stat buf = v71.n128_u32[0];
        unsigned int v77 = v12;
        _os_log_impl(&dword_1BD672000, logb, OS_LOG_TYPE_DEFAULT, "Next: %d", buf, 8u);
      }
      *__error() = v68;
      int v47 = dword_1E9FC90CC;
      if (dword_1E9FC90CC >= 5)
      {
        int v69 = *__error();
        logc = _SILogForLogForCategory(10);
        if (os_log_type_enabled(logc, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)stat buf = v71.n128_u32[0];
          unsigned int v77 = v51;
          _os_log_impl(&dword_1BD672000, logc, OS_LOG_TYPE_DEFAULT, "Delta: %d", buf, 8u);
        }
        *__error() = v69;
        int v47 = dword_1E9FC90CC;
      }
      a6 = v74;
      a9 = v71;
    }
    uint64_t v52 = *a10;
    if (v51 > 0x7F)
    {
      if (v51 >> 14)
      {
        if (v51 >> 21)
        {
          if (v51 >> 28)
          {
            uint64_t v57 = a1 + v52;
            *(unsigned char *)uint64_t v57 = -16;
            *(_DWORD *)(v57 + 1) = v51;
            uint64_t v53 = v52 + 5;
          }
          else
          {
            unint64_t v56 = (unsigned char *)(a1 + v52);
            unsigned char *v56 = HIBYTE(v51) | 0xE0;
            v56[1] = BYTE2(v51);
            v56[2] = BYTE1(v51);
            uint64_t v53 = v52 + 4;
            v56[3] = v51;
          }
        }
        else
        {
          CFStringRef v55 = (unsigned char *)(a1 + v52);
          *CFStringRef v55 = BYTE2(v51) | 0xC0;
          v55[1] = BYTE1(v51);
          uint64_t v53 = v52 + 3;
          v55[2] = v51;
        }
      }
      else
      {
        int v54 = (unsigned char *)(a1 + v52);
        unsigned char *v54 = BYTE1(v51) | 0x80;
        uint64_t v53 = v52 + 2;
        v54[1] = v51;
      }
    }
    else
    {
      uint64_t v53 = v52 + 1;
      *(unsigned char *)(a1 + v52) = v51;
    }
    *a10 = v53;
    --v48;
  }
  while (v48);
LABEL_78:
  *a6 = v29;
  return _X22;
}

unsigned char *_term_trie_compact_alloc(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3 = __clz(__rbit32(a2));
  a3.i32[0] = a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(a3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.i32[0] != 1 || v3 < 2 || v3 >= 6)
  {
    size_t v21 = __si_assert_copy_extra_329();
    uint64_t v22 = v21;
    uint64_t v23 = "";
    if (v21) {
      uint64_t v23 = v21;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "TermTrie.c", 106, "__builtin_popcount(entry_size)==1 && slot > 1 && slot <= 5", v23);
    free(v22);
    if (__valid_fs(-1)) {
      uint64_t v24 = 2989;
    }
    else {
      uint64_t v24 = 3072;
    }
    *(_DWORD *)uint64_t v24 = -559038737;
    abort();
  }
  uint64_t v9 = OSAtomicDequeue((OSQueueHead *)(a1 + 16 * (v3 - 2) + 2080), 0);
  if (v9)
  {
    uint64_t v10 = v9;
    size_t v11 = 8 * a2 + 48;
  }
  else
  {
    uint64_t v15 = *(void **)(a1 + 8);
    unsigned int v13 = (void **)(a1 + 8);
    size_t v14 = v15;
    size_t v11 = 8 * a2 + 48;
    for (unint64_t i = atomic_load(v15 + 1); ; unint64_t i = atomic_load(v19))
    {
      while (1)
      {
        uint64_t v10 = (unsigned char *)((i + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)&v10[v11 + 8] >= v14[2]) {
          break;
        }
        unint64_t v17 = i;
        atomic_compare_exchange_strong(v14 + 1, &v17, (unint64_t)&v10[v11]);
        BOOL v18 = v17 == i;
        unint64_t i = v17;
        if (v18) {
          goto LABEL_10;
        }
      }
      os_unfair_lock_lock(&_slablock);
      size_t v14 = *v13;
      uint64_t v19 = *v13 + 1;
      unint64_t v20 = atomic_load(v19);
      if (((v20 + 7) & 0xFFFFFFFFFFFFFFF8) + v11 + 8 >= v14[2]) {
        break;
      }
      os_unfair_lock_unlock(&_slablock);
    }
    uint64_t v10 = slab_new_slab(v13, 8 * a2 + 48, 244);
    os_unfair_lock_unlock(&_slablock);
  }
LABEL_10:
  bzero(v10, v11);
  v10[41] = a2;
  return v10;
}

void __RLEOIDArrayFinalize(char *a1)
{
  pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 16));
  uint64_t v2 = 0;
  a1[384] = 1;
  *((_DWORD *)a1 + 56) = 0;
  *((void *)a1 + 27) = 0;
  unsigned int v3 = a1 + 256;
  CFAllocatorRef v4 = (const __CFAllocator *)*((void *)a1 + 31);
  do
  {
    unsigned int v5 = *(void **)&v3[v2];
    if (v5)
    {
      if ((v5 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v5 + 72))(*(void *)&v3[v2]);
        CFAllocatorDeallocate(v4, v5);
      }
      *(void *)&v3[v2] = 0;
    }
    v2 += 8;
  }
  while (v2 != 128);
  uint64_t v6 = (void **)*((void *)a1 + 29);
  CFAllocatorRef v7 = (const __CFAllocator *)*((void *)a1 + 31);
  if (v6)
  {
    SIValueSet<unsigned long long>::CombLevel_s::malloc_chain_s::chain_s::clear(v6, *((const __CFAllocator **)a1 + 31), *((void *)a1 + 30));
    bzero(*((void **)a1 + 29), 0x1F88uLL);
    CFAllocatorRef v7 = (const __CFAllocator *)*((void *)a1 + 31);
  }
  uint64_t v8 = 0;
  *((void *)a1 + 30) = 0;
  do
  {
    uint64_t v9 = *(void **)&v3[v8];
    if (v9)
    {
      if ((v9 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v9 + 72))(*(void *)&v3[v8]);
        CFAllocatorDeallocate(v7, v9);
      }
      *(void *)&v3[v8] = 0;
    }
    v8 += 8;
  }
  while (v8 != 128);
  uint64_t v10 = (void **)*((void *)a1 + 29);
  if (v10)
  {
    SIValueSet<unsigned long long>::CombLevel_s::malloc_chain_s::chain_s::clear(v10, *((const __CFAllocator **)a1 + 31), *((void *)a1 + 30));
    CFAllocatorDeallocate(*((CFAllocatorRef *)a1 + 31), *((void **)a1 + 29));
    *((void *)a1 + 29) = 0;
  }
}

void zone_deallocate(void *ptr, malloc_zone_t *zone)
{
}

void SIValueSet<unsigned long long>::CombLevel_s::malloc_chain_s::chain_s::clear(void **a1, const __CFAllocator *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (v6)
  {
    SIValueSet<unsigned long long>::CombLevel_s::malloc_chain_s::chain_s::clear(v6, a2, 63);
    CFAllocatorDeallocate(a2, *a1);
    *a1 = 0;
  }
  if (a3)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a1 + 1;
    do
    {
      for (uint64_t i = 0; i != 16; ++i)
      {
        uint64_t v10 = v8[i];
        if (v10)
        {
          if ((v10 & 1) == 0)
          {
            (*(void (**)(void *))(*(void *)v10 + 72))(v8[i]);
            CFAllocatorDeallocate(a2, v10);
          }
          v8[i] = 0;
        }
      }
      ++v7;
      v8 += 16;
    }
    while (v7 != a3);
  }
}

void _SIScheduleBackgroundOperation(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 1096);
  if (a2) {
    si_enqueue_work_with_qos(v4, a2, a3, a4);
  }
  else {
    si_enqueue_work(v4, a3, a4);
  }
}

uint64_t __subiter_do_lookups_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 20);
  unsigned int v4 = *(unsigned __int8 *)(a3 + 20);
  if (v3 < v4) {
    return 0xFFFFFFFFLL;
  }
  if (v3 == v4) {
    return (*(_DWORD *)(a2 + 16) - *(_DWORD *)(a3 + 16));
  }
  return 1;
}

size_t __query_node_unique_retain_block_invoke(uint64_t a1, _OWORD *value)
{
  if (!*((void *)value + 2) && (value[3] & 0x30) == 0
    || (unsigned int v4 = CFBagGetValue(*(CFBagRef *)(*(void *)(a1 + 32) + 64), value)) == 0)
  {
    if (*MEMORY[0x1E4F14B00] <= 0x4FuLL) {
      ++sTotal_12395;
    }
    uint64_t v6 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x50uLL, 0x31F9A007uLL);
    if (v6)
    {
      size_t v5 = (size_t)v6;
      *uint64_t v6 = *value;
      long long v7 = value[1];
      long long v8 = value[2];
      long long v9 = value[4];
      v6[3] = value[3];
      v6[4] = v9;
      v6[1] = v7;
      v6[2] = v8;
      uint64_t v10 = *((void *)value + 2);
      if (!v10)
      {
LABEL_11:
        if ((value[3] & 0x30) == 0)
        {
LABEL_13:
          _assessNodeCost(v5);
          return v5;
        }
LABEL_12:
        CFBagAddValue(*(CFMutableBagRef *)(*(void *)(a1 + 32) + 64), (const void *)v5);
        goto LABEL_13;
      }
      uint64_t piece = clone_query_piece(v10);
      *(void *)(v5 + 16) = piece;
      if (piece)
      {
        if (*((void *)value + 2)) {
          goto LABEL_12;
        }
        goto LABEL_11;
      }
      free((void *)v5);
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)unsigned int v13 = 0;
      _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", v13, 2u);
    }
    return 0;
  }
  size_t v5 = (size_t)v4;
  CFBagAddValue(*(CFMutableBagRef *)(*(void *)(a1 + 32) + 64), v4);
  _assessNodeCost(v5);
  *(_DWORD *)(v5 + 52) >>= 1;
  return v5;
}

uint64_t clone_query_piece(uint64_t a1)
{
  if (*MEMORY[0x1E4F14B00] <= 0x12FuLL) {
    ++sTotal_12395;
  }
  uint64_t v2 = (char *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x130uLL, 0x31F9A007uLL);
  if (!v2)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
    }
    return 0;
  }
  uint64_t v3 = (uint64_t)v2;
  *((void *)v2 + 1) = *(void *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 24);
  *((_DWORD *)v2 + 6) = v4;
  v2[28] = *(unsigned char *)(a1 + 28);
  *((void *)v2 + 4) = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  *((_DWORD *)v2 + 12) = *(_DWORD *)(a1 + 48);
  *((void *)v2 + 5) = v5;
  *(void *)(v2 + 52) = *(void *)(a1 + 52);
  unint64_t v6 = *(unsigned int *)(a1 + 60);
  *((_DWORD *)v2 + 15) = v6;
  *((_DWORD *)v2 + 40) = *(_DWORD *)(a1 + 160);
  long long v7 = (char **)(v2 + 168);
  long long v8 = (void *)(a1 + 168);
  long long v9 = *(_OWORD *)(a1 + 232);
  long long v10 = *(_OWORD *)(a1 + 248);
  uint64_t v11 = *(void *)(a1 + 280);
  *(_OWORD *)(v2 + 264) = *(_OWORD *)(a1 + 264);
  long long v12 = *(_OWORD *)(a1 + 168);
  long long v13 = *(_OWORD *)(a1 + 184);
  long long v14 = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(v2 + 216) = *(_OWORD *)(a1 + 216);
  *(_OWORD *)(v2 + 200) = v14;
  *(_OWORD *)(v2 + 184) = v13;
  *(_OWORD *)(v2 + 168) = v12;
  *(_OWORD *)(v2 + 248) = v10;
  *(_OWORD *)(v2 + 232) = v9;
  *((void *)v2 + 34) = 0;
  *((void *)v2 + 35) = v11;
  *((void *)v2 + 36) = 0;
  *((void *)v2 + 37) = 0;
  *((_DWORD *)v2 + 16) = *(_DWORD *)(a1 + 64);
  if (v4 == 15)
  {
    unsigned int v15 = v6 & 3;
    size_t v16 = -1;
    if (v15 != 3)
    {
      uint64_t v17 = (v6 >> 2) & 3;
      if (v17 != 3) {
        size_t v16 = (vector_dimension_vec_sizes_12485[v15] * vector_size_elem_sizes_12484[v17]);
      }
    }
    BOOL v18 = malloc_type_malloc(v16, 0xFE24284EuLL);
    *(void *)(v3 + 296) = v18;
    uint64_t v19 = *(const void **)(a1 + 296);
    if (!v19) {
      goto LABEL_73;
    }
    memcpy(v18, v19, v16);
    *(_DWORD *)(v3 + 80) = *(_DWORD *)(a1 + 80);
  }
  uint64_t v20 = *(unsigned int *)(a1 + 96);
  if (v20 && *(void *)(a1 + 88))
  {
    size_t v21 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 4 * v20, 0x6085D6BuLL);
    if (!v21)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)stat buf = 0;
        _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
      }
      *(void *)(v3 + 88) = 0;
      goto LABEL_73;
    }
    *(void *)(v3 + 88) = v21;
    memcpy(v21, *(const void **)(a1 + 88), 4 * v20);
    *(_DWORD *)(v3 + 96) = v20;
  }
  uint64_t v22 = *(void *)(a1 + 32);
  int v48 = v5;
  if ((v22 & 0xC0000) != 0 && (v22 & 0x200) == 0 && v5)
  {
    uint64_t v23 = (void *)(v3 + 288);
    uint64_t v24 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 8 * (int)v5, 0x6085D6BuLL);
    if (v24)
    {
      *uint64_t v23 = v24;
      int v25 = *(const void **)(a1 + 288);
      if (v25)
      {
        memcpy(v24, v25, 8 * (int)v5);
        goto LABEL_20;
      }
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)stat buf = 0;
        _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
      }
      *uint64_t v23 = 0;
    }
    int v44 = *__error();
    int8x8_t v45 = _SILogForLogForCategory(1);
    os_log_type_t v46 = 2 * (dword_1E9FC90A8 < 4);
    if (os_log_type_enabled(v45, v46))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl(&dword_1BD672000, v45, v46, "clone_query_piece: ann data missing", buf, 2u);
    }
    *__error() = v44;
    goto LABEL_73;
  }
LABEL_20:
  if (!*v8) {
    goto LABEL_30;
  }
  uint64_t v26 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 8 * (int)v5, 0x6085D6BuLL);
  if (!v26)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
    }
    unsigned int *v7 = 0;
LABEL_73:
    free_qp(v3);
    return 0;
  }
  unsigned int v27 = v26;
  unsigned int *v7 = v26;
  if ((int)v5 >= 1)
  {
    uint64_t v28 = 0;
    uint64_t v29 = MEMORY[0x1E4F14500];
    do
    {
      uint64_t v30 = *(const char **)(*v8 + v28);
      size_t v31 = strlen(v30);
      unsigned int v32 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v31 + 1, 0x6085D6BuLL);
      if (!v32 && os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)stat buf = 0;
        _os_log_fault_impl(&dword_1BD672000, v29, OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
      }
      memcpy(v32, v30, v31);
      *((unsigned char *)v32 + v31) = 0;
      *(void *)&v27[v28] = v32;
      v28 += 8;
    }
    while (8 * v48 != v28);
  }
LABEL_30:
  int v33 = *(const char **)a1;
  uint64_t v34 = (void *)MEMORY[0x1E4F14B00];
  if (*(void *)a1)
  {
    size_t v35 = strlen(*(const char **)a1);
    uint64_t v36 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v35 + 1, 0x6085D6BuLL);
    if (!v36 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
    }
    memcpy(v36, v33, v35);
    *((unsigned char *)v36 + v35) = 0;
    *(void *)uint64_t v3 = v36;
  }
  uint64_t v37 = *(const void **)(a1 + 72);
  if (v37)
  {
    size_t v38 = strlen(*(const char **)(a1 + 72));
    int v39 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v38 + 1, 0x6085D6BuLL);
    if (!v39 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
    }
    memcpy(v39, v37, v38);
    *((unsigned char *)v39 + v38) = 0;
    *(void *)(v3 + 72) = v39;
  }
  if (*(void *)(a1 + 104))
  {
    if ((*(_DWORD *)(a1 + 24) - 13) > 1)
    {
      if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
        uint64_t v43 = icu_regex_copy();
      }
      else {
        uint64_t v43 = icu_ctx_retain();
      }
      *(void *)(v3 + 104) = v43;
      return v3;
    }
    if ((((unint64_t)v48 >> 14) & 0x7FFFFFFFFFFFLL) == 0 && (unint64_t)(8 * v48) > *v34) {
      ++sTotal_12395;
    }
    uint64_t v40 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 8uLL, v48, 0x31F9A007uLL);
    if (v40)
    {
      *(void *)(v3 + 104) = v40;
      if (v48 >= 1)
      {
        uint64_t v41 = 0;
        do
        {
          if (*(void *)(*(void *)(a1 + 104) + v41))
          {
            if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
              uint64_t v42 = icu_regex_copy();
            }
            else {
              uint64_t v42 = icu_ctx_retain();
            }
            *(void *)(*(void *)(v3 + 104) + v41) = v42;
          }
          v41 += 8;
        }
        while (8 * v48 != v41);
      }
      return v3;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
    }
    *(void *)(v3 + 104) = 0;
    goto LABEL_73;
  }
  return v3;
}

size_t _assessNodeCost(size_t result)
{
  if (*(_WORD *)(result + 48) == 4)
  {
    uint64_t v1 = *(void *)(result + 16);
    if (v1)
    {
      if ((*(unsigned char *)(v1 + 33) & 4) == 0)
      {
        uint64_t v2 = *(const char **)v1;
        if (!*(void *)v1
          || (uint64_t result = strcmp(*(const char **)v1, "kMDItemTextContent"), result)
          && (uint64_t result = strncmp(v2, "_kMDItemOCRContent", 0x12uLL), result))
        {
          uint64_t v3 = *(unsigned __int8 **)(v1 + 72);
          if (!v3)
          {
            int v5 = 0;
            goto LABEL_24;
          }
          uint64_t result = strlen(*(const char **)(v1 + 72));
          int v4 = *v3;
          if ((int)result < 1)
          {
            if (v4 != 42)
            {
LABEL_11:
              int v5 = 5;
LABEL_24:
              *(_DWORD *)(v1 + 48) = v5;
              return result;
            }
          }
          else if (v4 != 42 && v3[(result - 1)] != 42)
          {
            goto LABEL_11;
          }
          int v5 = 9;
          goto LABEL_24;
        }
      }
      unint64_t v6 = *(unsigned __int8 **)(v1 + 72);
      if (!v6)
      {
        int v9 = 0;
        goto LABEL_23;
      }
      uint64_t result = strlen(*(const char **)(v1 + 72));
      int v7 = *v6;
      if ((int)result < 1)
      {
        if (v7 == 42) {
          goto LABEL_19;
        }
      }
      else
      {
        int v8 = v6[(result - 1)];
        if (v7 == 42)
        {
          if (v8 == 42)
          {
            int v9 = 99;
LABEL_23:
            int v5 = 100 * v9;
            goto LABEL_24;
          }
LABEL_19:
          int v9 = 99 - result;
          goto LABEL_23;
        }
        if (v8 == 42)
        {
          int v9 = 50 - result;
          goto LABEL_23;
        }
      }
      int v9 = -(int)result;
      goto LABEL_23;
    }
  }
  return result;
}

uint64_t indexFindBulk(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, char a8, unsigned char *a9, char **a10, char **a11, void *a12)
{
  uint64_t v282 = *MEMORY[0x1E4F143B8];
  int v15 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v16 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v15);
  unint64_t v17 = v16;
  unsigned int v275 = v18;
  unsigned int v274 = v19;
  uint64_t v20 = *(void *)&threadData[18 * v16 + 2];
  uint64_t v21 = v20 + 320 * HIDWORD(v16);
  int v22 = *(_DWORD *)(v21 + 312);
  uint64_t v23 = *(void (**)(void))(v21 + 224);
  if (v23) {
    v23(*(void *)(v20 + 320 * HIDWORD(v16) + 288));
  }
  if (_setjmp((int *)v21))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", (uint8_t *)&buf, 2u);
    }
    *(_DWORD *)(v21 + 312) = v22;
    if (__THREAD_SLOT_KEY)
    {
      uint64_t v24 = pthread_getspecific(__THREAD_SLOT_KEY);
      if (!v24) {
        goto LABEL_211;
      }
    }
    else
    {
      makeThreadId();
      uint64_t v24 = pthread_getspecific(__THREAD_SLOT_KEY);
      if (!v24) {
        goto LABEL_211;
      }
    }
    int v25 = v24;
    if ((unint64_t)v24 < 0x801)
    {
LABEL_9:
      uint64_t v26 = (uint64_t)v25 - 1;
      unsigned int v27 = &threadData[18 * ((uint64_t)v25 - 1)];
      unsigned int v29 = v27[14];
      uint64_t v28 = v27 + 14;
      if (v29 > v274)
      {
        do
          CIOnThreadCleanUpPop(v26);
        while (*v28 > v274);
      }
      dropThreadId(v17, 1, v15);
      return CICleanUpReset(v17, v275);
    }
LABEL_211:
    makeThreadId();
    int v25 = pthread_getspecific(__THREAD_SLOT_KEY);
    goto LABEL_9;
  }
  if (__THREAD_SLOT_KEY)
  {
    size_t v31 = pthread_getspecific(__THREAD_SLOT_KEY);
    if (v31) {
      goto LABEL_14;
    }
  }
  else
  {
    makeThreadId();
    size_t v31 = pthread_getspecific(__THREAD_SLOT_KEY);
    if (v31)
    {
LABEL_14:
      unsigned int v32 = v31;
      if ((unint64_t)v31 < 0x801) {
        goto LABEL_15;
      }
    }
  }
  makeThreadId();
  unsigned int v32 = pthread_getspecific(__THREAD_SLOT_KEY);
LABEL_15:
  unsigned int v33 = threadData[18 * ((uint64_t)v32 - 1) + 8];
  if (a3)
  {
    uint64_t v34 = a3;
    size_t v35 = (uint64_t *)a5;
    do
    {
      uint64_t v36 = *v35++;
      *(unsigned char *)uint64_t v36 = 0;
      *(_OWORD *)(v36 + 16) = 0uLL;
      *(_OWORD *)(v36 + 32) = 0uLL;
      *(_OWORD *)(v36 + 44) = 0uLL;
      *(void *)(v36 + 64) = 0xFFFFFFFFLL;
      *(_DWORD *)(v36 + 8) = 0;
      --v34;
    }
    while (v34);
  }
  uint64_t v262 = (uint64_t)v32 - 1;
  int v268 = v15;
  int v267 = v22;
  unsigned int v263 = v33;
  if (!a6)
  {
    uint64_t v37 = -1;
    goto LABEL_24;
  }
  if (!a12)
  {
    uint64_t v37 = -1;
    if (!a3) {
      goto LABEL_24;
    }
    goto LABEL_57;
  }
  if (pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 14184)))
  {
    v240 = __si_assert_copy_extra_329();
    v241 = v240;
    v242 = "";
    if (v240) {
      v242 = v240;
    }
    __message_assert(v240, "poslock.c", 14, "result==0", v242);
    free(v241);
LABEL_217:
    if (__valid_fs(-1)) {
      uint64_t v243 = 2989;
    }
    else {
      uint64_t v243 = 3072;
    }
    *(_DWORD *)uint64_t v243 = -559038737;
    abort();
  }
  uint64_t v37 = CIOnThreadCleanUpPush(v262, (uint64_t)posreadunlock, a1 + 14184);
  if (a3)
  {
LABEL_57:
    uint64_t v70 = a3;
    __n128 v71 = a6;
    do
    {
      uint64_t v72 = *v71;
      if (*v71)
      {
        *(unsigned char *)uint64_t v72 = 0;
        *(_OWORD *)(v72 + 16) = 0uLL;
        *(_OWORD *)(v72 + 32) = 0uLL;
        *(_OWORD *)(v72 + 44) = 0uLL;
        *(void *)(v72 + 64) = 0xFFFFFFFFLL;
        *(_DWORD *)(v72 + 8) = 0;
      }
      ++v71;
      --v70;
    }
    while (v70);
  }
LABEL_24:
  int v265 = a7;
  unint64_t v261 = v37;
  int v38 = *__error();
  int v39 = _SILogForLogForCategory(1);
  os_log_type_t v40 = 2 * (dword_1E9FC90A8 < 4);
  if (os_log_type_enabled(v39, v40))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = a1;
    _os_log_impl(&dword_1BD672000, v39, v40, "process for %p", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v38;
  uint64_t v41 = a1;
  char v42 = atomic_load((unsigned int *)(a1 + 36));
  uint64_t v43 = a9;
  if (!*a9)
  {
    char v247 = a8;
    uint8x8_t v50 = (unsigned __int8 *)(a1 + 4685);
    uint64_t v51 = a3;
    if (a3) {
      _ZF = a6 == 0;
    }
    else {
      _ZF = 1;
    }
    int v53 = !_ZF;
    long long v54 = 0uLL;
    while (1)
    {
      char v55 = v42;
      int v56 = *(_DWORD *)(v41 + 4680);
      if (a7)
      {
        int v57 = 0;
      }
      else
      {
        uint64_t v58 = (uint64_t)a6;
        if (!v56) {
          uint64_t v58 = 0;
        }
        char v59 = v42;
        int v60 = v50;
        BOOL Bulk = _bt_findBulk(v41, a1 + 96, *(void *)(v41 + 4912), *(void *)(v41 + 4928), a2, a3, a4, a5, v58, v43, 0, 0, v247);
        long long v54 = 0uLL;
        uint64_t v43 = a9;
        uint64_t v41 = a1;
        if (*a9) {
          goto LABEL_27;
        }
        uint8x8_t v50 = v60;
        char v55 = v59;
        int v57 = Bulk;
      }
      int v62 = v57;
      if (v57 == *v50)
      {
        if ((v55 & 4) != 0) {
          break;
        }
        char v63 = atomic_load((unsigned int *)(v41 + 36));
        if ((v63 & 4) == 0) {
          break;
        }
      }
      int v64 = (uint64_t *)a5;
      uint64_t v65 = a3;
      if (a3)
      {
        do
        {
          uint64_t v66 = *v64++;
          *(unsigned char *)uint64_t v66 = 0;
          *(_OWORD *)(v66 + 16) = v54;
          *(_OWORD *)(v66 + 32) = v54;
          *(_OWORD *)(v66 + 44) = v54;
          *(void *)(v66 + 64) = 0xFFFFFFFFLL;
          *(_DWORD *)(v66 + 8) = 0;
          --v65;
        }
        while (v65);
        int v67 = a6;
        uint64_t v68 = a3;
        if (v53)
        {
          do
          {
            uint64_t v69 = *v67;
            if (*v67)
            {
              *(unsigned char *)uint64_t v69 = 0;
              *(_OWORD *)(v69 + 16) = v54;
              *(_OWORD *)(v69 + 32) = v54;
              *(_OWORD *)(v69 + 44) = v54;
              *(void *)(v69 + 64) = 0xFFFFFFFFLL;
              *(_DWORD *)(v69 + 8) = 0;
            }
            ++v67;
            --v68;
          }
          while (v68);
        }
      }
      char v42 = atomic_load((unsigned int *)(v41 + 36));
      if (*v43) {
        goto LABEL_27;
      }
    }
    int v258 = v62;
    v259 = v50;
    double Current = CFAbsoluteTimeGetCurrent();
    int v250 = v56;
    if (v56)
    {
      CFDataRef v74 = 0;
      uint64_t v75 = v262;
    }
    else
    {
      unsigned int v76 = malloc_type_malloc(0x18uLL, 0x102004024DAA5DEuLL);
      CFDataRef v74 = v76;
      v76[1] = a3;
      v76[2] = 1;
      uint64_t v75 = v262;
      if (a3)
      {
        unsigned int v77 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 40 * a3 + 80, 0x6085D6BuLL);
        if (!v77) {
          _log_fault_for_malloc_failure();
        }
        *CFDataRef v74 = v77;
        v77[4] = 0;
        *(_OWORD *)unsigned int v77 = 0u;
        *((_OWORD *)v77 + 1) = 0u;
      }
      else
      {
        *unsigned int v76 = 0;
      }
      CICleanUpPush(v262, (uint64_t)PQueue_bulk_TermIdQueue_free, (uint64_t)v74);
    }
    CFMutableSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)kCIQueryZoneAllocator, a3, 0);
    CICleanUpPush(v75, MEMORY[0x1E4F1C278], (uint64_t)Mutable);
    if (!a3)
    {
LABEL_97:
      char v273 = 0;
      if (v250)
      {
        char v273 = 1;
        unint64_t v112 = a9;
        goto LABEL_130;
      }
      uint64_t v113 = malloc_type_malloc(0x18uLL, 0x1020040F21E5318uLL);
      storage_reader_init(a1 + 4984, (uint64_t)v113);
      CICleanUpPush(v262, (uint64_t)storage_reader_free, (uint64_t)v113);
      uint64_t v114 = (uint64_t)a6;
      if (a6)
      {
        int64x2_t v115 = malloc_type_malloc(0x18uLL, 0x1020040F21E5318uLL);
        storage_reader_init(a1 + 9704, (uint64_t)v115);
        CICleanUpPush(v262, (uint64_t)storage_reader_free, (uint64_t)v115);
        uint64_t v114 = (uint64_t)v115;
      }
      unint64_t v116 = *(unsigned int *)(a1 + 9400);
      if (v113 && !*((unsigned char *)v113 + 16))
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "Skipping because index is shut down", (uint8_t *)&buf, 2u);
        }
LABEL_128:
        unint64_t v112 = a9;
        if (!*a9 && v74[2] != 1)
        {
          v244 = __si_assert_copy_extra_2445(0, -1);
          __message_assert("%s:%u: failed assertion '%s' %s ");
          goto LABEL_223;
        }
LABEL_130:
        if (!v273 || *v112) {
          goto LABEL_27;
        }
        int v144 = *v259;
        if (v258 != v144 || (v55 & 4) != 0)
        {
          int v146 = v265;
          uint64_t v147 = a10;
          int v148 = a11;
          if (v258 != v144) {
            goto LABEL_135;
          }
        }
        else
        {
          char v145 = atomic_load((unsigned int *)(a1 + 36));
          int v146 = v265;
          uint64_t v147 = a10;
          int v148 = a11;
          if ((v145 & 4) != 0)
          {
LABEL_135:
            uint64_t v149 = __si_assert_copy_extra_2445(0, -1);
            __darwin_time_t v150 = v149;
            __darwin_time_t v151 = "";
            if (v149) {
              __darwin_time_t v151 = v149;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "JHContentIndex.c", 958, "!((renamed != cindex->trie.renamed) || (!isCompact && (cindex->flags & kIndexFlagCompact)))", v151);
            free(v150);
            goto LABEL_217;
          }
        }
        if (v147) {
          *uint64_t v147 = clonePayloadData((uint64_t *)(a1 + 4944), *(_DWORD *)(a1 + 56), v146 ^ 1u);
        }
        int v44 = v268;
        int v45 = v267;
        if (a6 && v148) {
          void *v148 = clonePayloadData((uint64_t *)(a1 + 9664), *(_DWORD *)(a1 + 56), v146 ^ 1u);
        }
        int v152 = *__error();
        size_t v153 = _SILogForLogForCategory(1);
        os_log_type_t v154 = 2 * (dword_1E9FC90A8 < 4);
        if (os_log_type_enabled(v153, v154))
        {
          float v155 = CFAbsoluteTimeGetCurrent() - Current;
          LODWORD(buf) = 134217984;
          *(double *)((char *)&buf + 4) = v155;
          _os_log_impl(&dword_1BD672000, v153, v154, "resolve term ids: %f seconds", (uint8_t *)&buf, 0xCu);
        }
        *__error() = v152;
        uint64_t v46 = v262;
        if (v261 == -1) {
          goto LABEL_29;
        }
        CIOnThreadCleanUpClearItem(v262, v261);
        *a12 = a1 + 14184;
        goto LABEL_28;
      }
      uint64_t v254 = v114;
      int v117 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
      unint64_t v118 = setThreadIdAndInfo(-1, sStorageReaderExceptionCallbacks, (uint64_t)v113, 0, v117);
      unint64_t v119 = v118;
      unsigned int v272 = v120;
      unsigned int v271 = v121;
      uint64_t v122 = *(void *)&threadData[18 * v118 + 2];
      uint64_t v123 = v122 + 320 * HIDWORD(v118);
      int v124 = *(_DWORD *)(v123 + 312);
      unsigned int v125 = *(void (**)(void))(v123 + 224);
      if (v125) {
        v125(*(void *)(v122 + 320 * HIDWORD(v118) + 288));
      }
      if (_setjmp((int *)v123))
      {
        uint64_t v126 = (_DWORD *)(v123 + 312);
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", (uint8_t *)&buf, 2u);
        }
        *uint64_t v126 = v124;
        CIOnThreadCleanUpReset(v271);
        dropThreadId(v119, 1, v117);
        CICleanUpReset(v119, v272);
        goto LABEL_128;
      }
      if (v254 && !*(unsigned char *)(v254 + 16))
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "Skipping because index is shut down", (uint8_t *)&buf, 2u);
        }
        goto LABEL_125;
      }
      int v127 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
      unint64_t v128 = setThreadIdAndInfo(-1, sStorageReaderExceptionCallbacks, v254, 0, v127);
      unint64_t v129 = v128;
      unsigned int v270 = v130;
      unsigned int v269 = v131;
      uint64_t v132 = *(void *)&threadData[18 * v128 + 2];
      uint64_t v133 = v132 + 320 * HIDWORD(v128);
      int v253 = *(_DWORD *)(v133 + 312);
      unsigned int v134 = *(void (**)(void))(v133 + 224);
      if (v134) {
        v134(*(void *)(v132 + 320 * HIDWORD(v128) + 288));
      }
      if (_setjmp((int *)v133))
      {
        unint64_t v135 = (_DWORD *)(v133 + 312);
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", (uint8_t *)&buf, 2u);
        }
        *unint64_t v135 = v253;
        CIOnThreadCleanUpReset(v269);
        dropThreadId(v129, 1, v127);
        CICleanUpReset(v129, v270);
LABEL_125:
        uint64_t v141 = *(void *)&threadData[18 * v119 + 2];
        uint64_t v142 = v141 + 320 * HIDWORD(v119);
        *(_DWORD *)(v142 + 312) = v124;
        unsigned int v143 = *(void (**)(void))(v142 + 232);
        if (v143) {
          v143(*(void *)(v141 + 320 * HIDWORD(v119) + 288));
        }
        dropThreadId(v119, 0, v117);
        goto LABEL_128;
      }
      int v256 = v124;
      int v257 = v117;
      uint64_t v136 = v74[2];
      unint64_t v137 = a9;
      if (v136 == 1)
      {
LABEL_120:
        char v273 = 1;
        uint64_t v138 = *(void *)&threadData[18 * v129 + 2];
        uint64_t v139 = v138 + 320 * HIDWORD(v129);
        *(_DWORD *)(v139 + 312) = v253;
        uint64_t v140 = *(void (**)(void))(v139 + 232);
        if (v140) {
          v140(*(void *)(v138 + 320 * HIDWORD(v129) + 288));
        }
        dropThreadId(v129, 0, v127);
        int v124 = v256;
        int v117 = v257;
        goto LABEL_125;
      }
LABEL_151:
      if (*v137) {
        goto LABEL_120;
      }
      uint64_t v156 = *v74;
      uint64_t v157 = *(void *)(*v74 + 40);
      uint64_t v158 = *(void *)(*v74 + 56);
      uint64_t v159 = *(void *)(*v74 + 64);
      uint64_t v160 = v158;
      uint64_t v161 = *(void *)(*v74 + 72);
      uint64_t v162 = v161;
      uint64_t v163 = *v74 + 40 * v136;
      unint64_t v164 = *(void *)(v163 - 32);
      uint64_t v165 = *(void *)(v163 - 40);
      long long v276 = *(_OWORD *)(v163 - 24);
      uint64_t v166 = *(void *)(v163 - 8);
      *(void *)(v156 + 40) = v165;
      *(void *)(v156 + 48) = v164;
      *(_OWORD *)(v156 + 56) = v276;
      *(void *)(v156 + 72) = v166;
      uint64_t v168 = v74[1];
      uint64_t v167 = v74[2];
      uint64_t v277 = v166;
      v74[2] = v167 - 1;
      uint64_t v169 = v168 >> 1;
      uint64_t v170 = 3;
      uint64_t v171 = 2;
      uint64_t v172 = 1;
      while (1)
      {
        uint64_t v173 = v170;
        uint64_t v174 = *v74;
        uint64_t v175 = *v74 + 40 * v171;
        uint64_t v176 = *(void *)v175;
        unint64_t v177 = *(void *)(v175 + 8);
        long long buf = *(_OWORD *)(v175 + 16);
        uint64_t v281 = *(void *)(v175 + 32);
        uint64_t v178 = (uint64_t *)(v174 + 40 * v173);
        uint64_t v179 = *v178;
        unint64_t v180 = v178[1];
        long long v278 = *((_OWORD *)v178 + 1);
        uint64_t v279 = v178[4];
        if (v173 >= v167)
        {
          long long v278 = 0uLL;
          uint64_t v279 = 0;
          if (v171 >= v167) {
            goto LABEL_170;
          }
          uint64_t v183 = 0;
          unint64_t v182 = -1;
          if (v177 < v164)
          {
LABEL_155:
            _CF = v182 >= v177;
            if (v182 >= v177)
            {
              p_long long buf = &buf;
            }
            else
            {
              uint64_t v176 = v183;
              unint64_t v177 = v182;
              p_long long buf = &v278;
            }
            if (_CF) {
              uint64_t v173 = v171;
            }
            uint64_t v186 = p_buf;
            goto LABEL_162;
          }
        }
        else
        {
          uint64_t v181 = v179;
          unint64_t v182 = v180;
          uint64_t v183 = v181;
          if (v177 < v164) {
            goto LABEL_155;
          }
        }
        if (v182 >= v164)
        {
          _X8 = v174 + 80 * v172;
          __asm { PRFM            #1, [X8] }
LABEL_170:
          uint64_t v195 = *(void *)(v157 + 16);
          size_t v196 = (uint64_t *)(v195 + 16 * v158);
          uint64_t v197 = (uint64_t *)(v195 + 8 * v158);
          if (*(unsigned char *)v157) {
            size_t v198 = v196;
          }
          else {
            size_t v198 = v197;
          }
          uint64_t v199 = *v198;
          uint64_t v251 = v159;
          if ((*v198 & 0x3FFFFFFFFFFFFFFFuLL) >= v116)
          {
            uint64_t v206 = v161;
            goto LABEL_191;
          }
          uint64_t v248 = v158;
          uint64_t v249 = v161;
          ptr = (uint64_t *)storage_reader_get_ptr(*(void *)v113, *((void *)v113 + 1), 8 * *v198, 8);
          if (ptr == (uint64_t *)-1)
          {
            v244 = __si_assert_copy_extra_2445(0, -1);
            __message_assert("%s:%u: failed assertion '%s' %s failed to read offset for term %d");
LABEL_223:
            free(v244);
            if (__valid_fs(-1))
            {
              MEMORY[0xBAD] = -559038737;
              abort();
            }
            MEMORY[0xC00] = -559038737;
            abort();
          }
          uint64_t v201 = *ptr;
          if (*ptr)
          {
            if (v254 && (*(_WORD *)(a4 + (v159 << 6) + 16) & 0x3080) != 0)
            {
              uint64_t Next = termIdStoreReaderGetNext(*(void *)v254, *(void *)(v254 + 8), v199);
              oqpush_2500(a6[v159], Next, v203);
            }
            uint64_t v204 = v201 | v199 & 0x4000000000000000;
            if (*(unsigned char *)v157)
            {
              float v205 = oq_meta_at_index(v157, v160);
              oq_set_offset_with_meta_at_index(v157, v162, v204, LODWORD(v205));
            }
            else
            {
              oq_set_offset_at_index(v157, v162, v204);
            }
            uint64_t v158 = v248;
            uint64_t v207 = *(void *)(v157 + 16);
            v208 = (void *)(v207 + 16 * v249);
            BOOL v209 = (void *)(v207 + 8 * v249);
            if (*(unsigned char *)v157) {
              v210 = v208;
            }
            else {
              v210 = v209;
            }
            if (*v210) {
              uint64_t v206 = v249 + 1;
            }
            else {
              uint64_t v206 = v249;
            }
            unint64_t v137 = a9;
          }
          else
          {
            uint64_t v206 = v162;
            unint64_t v137 = a9;
            uint64_t v158 = v248;
          }
LABEL_191:
          uint64_t v211 = v158 + 1;
          if (v158 + 1 >= *(void *)(v157 + 32))
          {
            *(void *)(v157 + 32) = v206;
          }
          else
          {
            uint64_t v212 = *(void *)(v157 + 16);
            unint64_t v213 = (uint64_t *)(v212 + 16 * v211);
            v214 = (uint64_t *)(v212 + 8 * v211);
            if (*(unsigned char *)v157) {
              unint64_t v215 = v213;
            }
            else {
              unint64_t v215 = v214;
            }
            uint64_t v216 = *v215;
            uint64_t v217 = v74[1];
            uint64_t v218 = v74[2];
            uint64_t v219 = v218;
            long long v220 = (char *)*v74;
            if (v218 + 2 >= v217)
            {
              uint64_t v246 = v216;
              uint64_t v222 = 2 * v217;
              BOOL v94 = v217 < 4;
              uint64_t v223 = 4;
              if (!v94) {
                uint64_t v223 = v222;
              }
              v74[1] = v223;
              size_t v224 = 40 * v223 + 80;
              if (v220) {
                v225 = malloc_type_zone_realloc((malloc_zone_t *)queryZone, v220, v224, 0xECA6AA46uLL);
              }
              else {
                v225 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v224, 0x8DDAA030uLL);
              }
              v226 = v225;
              unint64_t v137 = a9;
              uint64_t v216 = v246;
              uint64_t v219 = v218;
              if (!v225)
              {
                _log_fault_for_malloc_failure();
                uint64_t v216 = v246;
                uint64_t v219 = v218;
                unint64_t v137 = a9;
              }
              *CFDataRef v74 = v226;
              v226[4] = 0;
              *(_OWORD *)v226 = 0u;
              *((_OWORD *)v226 + 1) = 0u;
              uint64_t v221 = v74[2];
              long long v220 = (char *)*v74;
            }
            else
            {
              uint64_t v221 = v74[2];
            }
            v74[2] = v221 + 1;
            v227 = (uint64_t *)&v220[40 * v218];
            uint64_t *v227 = v157;
            v227[1] = v216;
            v227[2] = v211;
            v227[3] = v251;
            v227[4] = v206;
            if (v218 >= 2)
            {
              unint64_t v228 = v219;
              do
              {
                unint64_t v229 = v228;
                uint64_t v230 = *v74;
                if (*(void *)(*v74 + 40 * v229 + 8) > *(void *)(*v74 + 40 * (v229 >> 1) + 8)) {
                  break;
                }
                v231 = (long long *)(v230 + 40 * v229);
                uint64_t v232 = *((void *)v231 + 4);
                long long v234 = *v231;
                long long v233 = v231[1];
                uint64_t v235 = 40 * (v229 >> 1);
                v236 = (long long *)(v230 + v235);
                uint64_t v237 = *((void *)v236 + 4);
                long long v238 = v236[1];
                long long *v231 = *v236;
                v231[1] = v238;
                *((void *)v231 + 4) = v237;
                uint64_t v239 = *v74 + v235;
                *(_OWORD *)uint64_t v239 = v234;
                *(_OWORD *)(v239 + 16) = v233;
                *(void *)(v239 + 32) = v232;
                unint64_t v228 = v229 >> 1;
              }
              while (v229 > 3);
            }
          }
          uint64_t v136 = v74[2];
          if (v136 == 1) {
            goto LABEL_120;
          }
          goto LABEL_151;
        }
        uint64_t v186 = &v278;
        uint64_t v176 = v183;
        unint64_t v177 = v182;
LABEL_162:
        _X1 = v174 + 80 * v173;
        __asm { PRFM            #1, [X1] }
        if (v173 != v172)
        {
          uint64_t v191 = v174 + 40 * v173;
          *(void *)uint64_t v191 = v165;
          *(void *)(v191 + 8) = v164;
          *(_OWORD *)(v191 + 16) = v276;
          *(void *)(v191 + 32) = v277;
          uint64_t v192 = *v74 + 40 * v172;
          *(void *)uint64_t v192 = v176;
          *(void *)(v192 + 8) = v177;
          *(_OWORD *)(v192 + 16) = *v186;
          *(void *)(v192 + 32) = *((void *)v186 + 2);
          uint64_t v172 = v173;
          uint64_t v171 = 2 * v173;
          uint64_t v170 = (2 * v173) | 1;
          if (v173 < v169) {
            continue;
          }
        }
        goto LABEL_170;
      }
    }
    __int16 v79 = Mutable;
    if (v250)
    {
      uint64_t v80 = (const void **)a5;
      uint64_t v81 = v51;
      do
      {
        uint64_t v82 = (unsigned __int8 *)*v80;
        if (!CFSetContainsValue(v79, *v80))
        {
          CFSetAddValue(v79, v82);
          int v84 = *v82;
          uint64_t v83 = (uint64_t)(v82 + 8);
          if (v84) {
            oqsort_offset_with_meta_t(v83);
          }
          else {
            oqsort_offset_t(v83);
          }
        }
        ++v80;
        --v81;
      }
      while (v81);
      goto LABEL_97;
    }
    uint64_t v85 = 0;
    while (1)
    {
      unsigned __int8 v86 = *(unsigned char **)(a5 + 8 * v85);
      if (!CFSetContainsValue(v79, v86))
      {
        CFSetAddValue(v79, v86);
        uint64_t v87 = (uint64_t)(v86 + 8);
        if (*v86)
        {
          oqsort_offset_with_meta_t(v87);
          if (*((void *)v86 + 4)) {
            goto LABEL_84;
          }
        }
        else
        {
          oqsort_offset_t(v87);
          if (*((void *)v86 + 4))
          {
LABEL_84:
            uint64_t v88 = **((void **)v86 + 2);
            uint64_t v89 = v74[1];
            uint64_t v90 = v74[2];
            unint64_t v91 = v90;
            uint64_t v92 = v90;
            if (v90 + 2 >= v89)
            {
              uint64_t v245 = **((void **)v86 + 2);
              uint64_t v93 = 2 * v89;
              BOOL v94 = v89 < 4;
              uint64_t v95 = 4;
              if (!v94) {
                uint64_t v95 = v93;
              }
              v74[1] = v95;
              size_t v96 = 40 * v95 + 80;
              if (*v74) {
                long long v97 = malloc_type_zone_realloc((malloc_zone_t *)queryZone, (void *)*v74, v96, 0xECA6AA46uLL);
              }
              else {
                long long v97 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v96, 0x8DDAA030uLL);
              }
              unsigned int v98 = v97;
              uint64_t v88 = v245;
              if (!v97)
              {
                _log_fault_for_malloc_failure();
                uint64_t v88 = v245;
              }
              *CFDataRef v74 = v98;
              v98[4] = 0;
              *(_OWORD *)unsigned int v98 = 0u;
              *((_OWORD *)v98 + 1) = 0u;
              uint64_t v92 = v74[2];
            }
            v74[2] = v92 + 1;
            uint64_t v99 = (void *)(*v74 + 40 * v90);
            *uint64_t v99 = v86;
            v99[1] = v88;
            v99[2] = 0;
            v99[3] = v85;
            v99[4] = 0;
            if (v90 >= 2)
            {
              do
              {
                long long v100 = (char *)*v74;
                unint64_t v101 = v91 >> 1;
                if (*(void *)(*v74 + 40 * v91 + 8) > *(void *)(*v74 + 40 * (v91 >> 1) + 8)) {
                  break;
                }
                unint64_t v102 = v91;
                v91 >>= 1;
                unint64_t v103 = &v100[40 * v102];
                uint64_t v104 = *((void *)v103 + 4);
                long long v106 = *(_OWORD *)v103;
                long long v105 = *((_OWORD *)v103 + 1);
                uint64_t v107 = 40 * v101;
                __int16 v108 = &v100[v107];
                uint64_t v109 = *((void *)v108 + 4);
                long long v110 = *((_OWORD *)v108 + 1);
                *(_OWORD *)unint64_t v103 = *(_OWORD *)v108;
                *((_OWORD *)v103 + 1) = v110;
                *((void *)v103 + 4) = v109;
                uint64_t v111 = *v74 + v107;
                *(_OWORD *)uint64_t v111 = v106;
                *(_OWORD *)(v111 + 16) = v105;
                *(void *)(v111 + 32) = v104;
              }
              while (v102 > 3);
            }
          }
        }
      }
      if (++v85 == v51) {
        goto LABEL_97;
      }
    }
  }
LABEL_27:
  int v44 = v268;
  int v45 = v267;
  uint64_t v46 = v262;
  if (v261 != -1) {
LABEL_28:
  }
    CIOnThreadCleanUpPop(v46);
LABEL_29:
  CICleanUpReset(v46, v263);
  uint64_t v47 = *(void *)&threadData[18 * v17 + 2];
  uint64_t v48 = v47 + 320 * HIDWORD(v17);
  *(_DWORD *)(v48 + 312) = v45;
  unsigned int v49 = *(void (**)(void))(v48 + 232);
  if (v49) {
    v49(*(void *)(v47 + 320 * HIDWORD(v17) + 288));
  }
  return dropThreadId(v17, 0, v44);
}

uint64_t storage_reader_get_ptr(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a2)
  {
    uint64_t v7 = a2;
    uint64_t v56 = a2;
    int v8 = CICleanUpThreadLoc();
    int v9 = 0;
    unint64_t v10 = a4 + a3;
    if (a3 <= a4 + a3) {
      unint64_t v11 = a4 + a3;
    }
    else {
      unint64_t v11 = a3;
    }
    while (1)
    {
      unint64_t v12 = a3 >> *(unsigned char *)(v7 + 576);
      if (v12 < *(int *)(v7 + 560))
      {
        long long v13 = *(void **)(v7 + 8 * v12 + 584);
        if (v13)
        {
          uint64_t v14 = v13[1];
          if ((unint64_t)(v14 + 1) >= 2)
          {
            unint64_t v15 = v13[2];
            BOOL v16 = a3 >= v15;
            unint64_t v17 = a3 - v15;
            if (v16 && v13[3] >= v10 && *(void *)(a1 + 224) >= v10) {
              return v14 + v17;
            }
          }
        }
      }
      unint64_t v18 = *(void *)(a1 + 224);
      if (v18 <= v11) {
        return -1;
      }
      uint64_t v19 = *(int *)(a1 + 248);
      *(_DWORD *)(v7 + 560) = v19;
      unint64_t v20 = *(int *)(a1 + 248);
      if (v12 >= v20 - 1) {
        break;
      }
      int v53 = (atomic_uint **)(v7 + 8 * v12 + 584);
      char v55 = 0;
      uint64_t v21 = *v53;
      char v55 = v21;
      uint8x8_t v50 = v21;
      if (v21 && (unint64_t)(*((void *)v21 + 1) + 1) >= 2 && (uint64_t v48 = (unsigned char *)(v7 + v12 + 12), *v48))
      {
        uint64_t v46 = *((void *)v21 + 3);
        uint64_t v43 = *((void *)v21 + 1);
        uint64_t v45 = *((void *)v21 + 2);
        uint64_t v28 = (os_unfair_lock_s *)((char *)&windowLock + 4 * v12);
        os_unfair_lock_lock(v28);
        CIOnThreadCleanUpPush((uint64_t)v8, MEMORY[0x1E4F14A18], (uint64_t)v28);
        if (v50 != *v53
          || v46 - v45 != *((void *)v50 + 3) - *((void *)v50 + 2)
          || v46 - v45 > (unint64_t)(1 << *(unsigned char *)(a1 + 264))
          || v43 != *((void *)v50 + 1))
        {
          goto LABEL_52;
        }
        storageWindowRelease(v53);
        unsigned char *v48 = 0;
        char v55 = 0;
LABEL_66:
        CIOnThreadCleanUpPop((uint64_t)v8);
        __dmb(0xBu);
        *(_DWORD *)(v7 + 560) = *(_DWORD *)(a1 + 248);
LABEL_67:
        if (++v9 == 1001) {
          return -1;
        }
      }
      else
      {
        os_unfair_lock_lock((os_unfair_lock_t)&windowLock + v12);
        CIOnThreadCleanUpPush((uint64_t)v8, MEMORY[0x1E4F14A18], (uint64_t)&windowLock + 4 * v12);
        if (*v53 == v50)
        {
          if (!v50) {
            goto LABEL_23;
          }
          if ((unint64_t)(*((void *)v50 + 1) + 1) < 2
            || *((void *)v50 + 2) > a3
            || *((void *)v50 + 3) < v10
            || *(void *)(a1 + 224) < v10)
          {
            storageWindowRelease(v53);
            *(unsigned char *)(v7 + v12 + 12) = 0;
            char v55 = 0;
LABEL_23:
            int v22 = *(atomic_uint **)(a1 + 8 * v12 + 272);
            if (v22)
            {
              atomic_fetch_add(v22, 1u);
              uint64_t v7 = v56;
              *(void *)(v56 + 8 * v12 + 584) = v22;
            }
            else
            {
              allocateReaderWindowAtSlot((uint64_t)&v56, a1 + 216, v12, (unsigned int **)&v55);
            }
            goto LABEL_66;
          }
        }
LABEL_52:
        CIOnThreadCleanUpPop((uint64_t)v8);
      }
    }
    if (v12 >= v20)
    {
      if (v19 << *(unsigned char *)(v7 + 576) <= a3 && v18 > a3)
      {
        do
        {
          uint64_t v30 = *(int *)(v7 + 560);
          os_unfair_lock_lock((os_unfair_lock_t)&windowLock + v30);
          CIOnThreadCleanUpPush((uint64_t)v8, MEMORY[0x1E4F14A18], (uint64_t)&windowLock + 4 * v30);
          if (v30 != *(_DWORD *)(v7 + 560)) {
            break;
          }
          uint64_t v52 = v7 + 8 * v30;
          char v49 = *(unsigned char *)(v7 + 564);
          uint64_t v31 = *(void *)(v7 + 568);
          unsigned int v32 = (unsigned int *)malloc_type_calloc(1uLL, 0x30uLL, 0x10800408BF3291EuLL);
          atomic_store(1u, v32);
          *((void *)v32 + 1) = 0;
          *((void *)v32 + 2) = 0;
          *((unsigned char *)v32 + 40) = v49;
          *((void *)v32 + 3) = 0;
          *((void *)v32 + 4) = v31;
          *(void *)(v52 + 584) = v32;
          uint64_t v7 = v56;
          char v33 = *(unsigned char *)(v56 + 576);
          uint64_t v34 = *(int *)(v56 + 560);
          unint64_t v35 = v34 << v33;
          unint64_t v36 = (v34 + 1) << v33;
          uint64_t v37 = v36 >= *(void *)(a1 + 224) ? *(void *)(a1 + 224) : v36;
          _initWindow(*(void **)(v56 + 528 + 8 * v30 + 56), (_DWORD **)(v56 + 528), v35, v37, 0);
          CIOnThreadCleanUpPop((uint64_t)v8);
          if ((uint64_t)((int)v30 + 1) << *(unsigned char *)(v7 + 576) > a3) {
            break;
          }
        }
        while (*(void *)(a1 + 224) > a3);
      }
      goto LABEL_67;
    }
    uint64_t v23 = v7 + 8 * v12;
    uint64_t v24 = *(atomic_uint **)(v23 + 584);
    uint64_t v51 = v24;
    if (v24)
    {
      uint64_t v44 = *((void *)v24 + 1);
      unint64_t v54 = *((void *)v24 + 3) - *((void *)v24 + 2);
    }
    else
    {
      unint64_t v54 = 0;
      uint64_t v44 = 0;
    }
    uint64_t v47 = (atomic_uint **)(v23 + 584);
    os_unfair_lock_lock((os_unfair_lock_t)&windowLock + v12);
    CIOnThreadCleanUpPush((uint64_t)v8, MEMORY[0x1E4F14A18], (uint64_t)&windowLock + 4 * v12);
    char v55 = 0;
    int v25 = *v47;
    char v55 = v25;
    if (v25) {
      uint64_t v26 = *((void *)v25 + 3) - *((void *)v25 + 2);
    }
    else {
      uint64_t v26 = 0;
    }
    BOOL v27 = v25 == v51 && v54 == v26;
    if (v27 && v54 <= 1 << *(unsigned char *)(a1 + 264))
    {
      if (v25)
      {
        if (v44 == *((void *)v51 + 1)
          && (*((void *)v51 + 2) > a3 || *((void *)v51 + 3) < v10 || *(void *)(a1 + 224) < v10))
        {
          if ((unint64_t)(v44 + 1) >= 2)
          {
            storageWindowRelease(v47);
            *(unsigned char *)(v7 + v12 + 12) = 0;
            char v55 = 0;
          }
LABEL_69:
          allocateReaderWindowAtSlot((uint64_t)&v56, a1 + 216, v12, (unsigned int **)&v55);
          CIOnThreadCleanUpPop((uint64_t)v8);
          goto LABEL_67;
        }
      }
      else if (!v44)
      {
        goto LABEL_69;
      }
    }
    goto LABEL_52;
  }
  uint64_t result = storageResolvePtr(a1, a3, a4, 1);
  if (!result || result == a3)
  {
    int v39 = __si_assert_copy_extra(0);
    os_log_type_t v40 = v39;
    uint64_t v41 = "";
    if (v39) {
      uint64_t v41 = v39;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "storage.c", 233, "result && (offset_t)(intptr_t)result != inOffset", v41);
    free(v40);
    if (__valid_fs(-1)) {
      uint64_t v42 = 2989;
    }
    else {
      uint64_t v42 = 3072;
    }
    *(_DWORD *)uint64_t v42 = -559038737;
    abort();
  }
  return result;
}

char *CICleanUpThreadLoc()
{
  pthread_key_t v0 = __THREAD_SLOT_KEY;
  if (!__THREAD_SLOT_KEY)
  {
    makeThreadId();
    pthread_key_t v0 = __THREAD_SLOT_KEY;
  }
  uint64_t v1 = (char *)pthread_getspecific(v0);
  if (!v1 || (unint64_t)v1 >= 0x801)
  {
    makeThreadId();
    uint64_t v1 = (char *)pthread_getspecific(__THREAD_SLOT_KEY);
  }
  return v1 - 1;
}

uint64_t oq_set_offset_at_index(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)result)
  {
    uint64_t v3 = __si_assert_copy_extra_2445(0, -1);
    int v4 = v3;
    int v5 = "";
    if (v3) {
      int v5 = v3;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "OQueue.h", 461, "!queue->has_meta", v5);
    free(v4);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  *(void *)(*(void *)(result + 16) + 8 * a2) = a3;
  return result;
}

void oqsort_offset_t(uint64_t a1)
{
  if (*(uint64_t *)(a1 + 24) >= 2)
  {
    qos_class_t v2 = qos_class_self();
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = *(void *)(a1 + 24);
    if (v2 < 0x12) {
      _qsort_offset_t(v3, 0, v4 - 1);
    }
    else {
      parallel_qsort_offset_t(v3, v4);
    }
  }
  if (*(_DWORD *)(a1 + 48))
  {
    int v5 = __si_assert_copy_extra_329();
    unint64_t v6 = v5;
    uint64_t v7 = "";
    if (v5) {
      uint64_t v7 = v5;
    }
    __message_assert(v5, "OQueue.c", 14, "!queue->split", v7);
    free(v6);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
}

void oqsplit(uint64_t a1, unint64_t a2)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)a1)
  {
    if (!a2)
    {
      *(void *)(a1 + 64) = 0;
      ++*(_DWORD *)(a1 + 56);
      uint64_t v50 = *(void *)(a1 + 32);
      *(void *)(a1 + 40) = 0;
      *(void *)(a1 + 48) = v50;
      *(void *)(a1 + 32) = 0;
      uint64_t v51 = *(void *)(a1 + 16);
      parallel_qsort_offset_t(v51, v50);
      return;
    }
    uint64_t v12 = *(void *)(a1 + 32);
    *(void *)(a1 + 48) = v12;
    if (v12 >= 100000)
    {
      uint64_t v52 = v12 - 1;
      int v53 = *(void **)(a1 + 16);
      qos_class_t v54 = qos_class_self();
      global_queue = dispatch_get_global_queue(v54, 0);
      signed int v56 = thread_count;
      if (!thread_count)
      {
        *(void *)unsigned int v76 = 0x1900000006;
        size_t v75 = 4;
        sysctl(v76, 2u, &thread_count, &v75, 0, 0);
        signed int v56 = thread_count;
      }
      uint64_t v15 = _big_split_offset_t(v53, v52, a2, global_queue, v56);
      uint64_t v12 = *(void *)(a1 + 48);
LABEL_69:
      *(void *)(a1 + 32) = v15;
      *(void *)(a1 + 40) = v15;
      if (v15 > v12)
      {
        uint64_t v70 = __si_assert_copy_extra_329();
        uint64_t v34 = v70;
        __n128 v71 = "";
        if (v70) {
          __n128 v71 = v70;
        }
        uint64_t v72 = "queue->top <= queue->end";
        goto LABEL_121;
      }
      if (v15 < v12)
      {
        uint64_t v57 = v15 + 1;
        do
        {
          if (v12 == v57) {
            goto LABEL_77;
          }
          unint64_t v58 = *(void *)(*(void *)(a1 + 16) + 8 * v57++) & 0x3FFFFFFFFFFFFFFFLL;
        }
        while (v58 >= a2);
        char v59 = __si_assert_copy_extra_329();
        uint64_t v47 = v59;
        int v60 = "";
        if (v59) {
          int v60 = v59;
        }
        unint64_t v61 = "current >= offset";
        goto LABEL_109;
      }
LABEL_77:
      if (v15 > 0)
      {
        uint64_t v62 = 0;
        uint64_t v63 = *(void *)(a1 + 16);
        while ((*(void *)(v63 + 8 * v62) & 0x3FFFFFFFFFFFFFFFuLL) <= a2)
        {
          if (v15 == ++v62) {
            goto LABEL_84;
          }
        }
        uint64_t v70 = __si_assert_copy_extra_329();
        uint64_t v34 = v70;
        __n128 v71 = "";
        if (v70) {
          __n128 v71 = v70;
        }
        uint64_t v72 = "current <= offset";
        goto LABEL_121;
      }
    }
    else
    {
      if (v12 > 0)
      {
        uint64_t v13 = 0;
        uint64_t v14 = *(void *)(a1 + 16);
        uint64_t v15 = v12;
        while (1)
        {
          uint64_t v16 = *(void *)(v14 + 8 * v13);
          unint64_t v17 = v16 & 0x3FFFFFFFFFFFFFFFLL;
          if ((v16 & 0x3FFFFFFFFFFFFFFFuLL) >= a2)
          {
            uint64_t v18 = v15 >= v13 ? v13 : v15;
            while (v15 > v13)
            {
              uint64_t v19 = v15--;
              uint64_t v20 = *(void *)(v14 - 8 + 8 * v19);
              if ((v20 & 0x3FFFFFFFFFFFFFFFuLL) < a2)
              {
                *(void *)(v14 + 8 * v13) = v20;
                *(void *)(v14 + 8 * v15) = v16;
                unint64_t v17 = *(void *)(v14 + 8 * v13) & 0x3FFFFFFFFFFFFFFFLL;
                uint64_t v18 = v19;
                break;
              }
            }
            uint64_t v15 = v18;
            if (v17 >= 2 * a2) {
              break;
            }
          }
          if (++v13 >= v15) {
            goto LABEL_69;
          }
        }
        uint64_t v70 = __si_assert_copy_extra_329();
        uint64_t v34 = v70;
        __n128 v71 = "";
        if (v70) {
          __n128 v71 = v70;
        }
        uint64_t v72 = "!offset || offset_t_GET_VALUE(queue->offsets[i]) < offset * 2";
        goto LABEL_121;
      }
      *(void *)(a1 + 40) = v12;
      uint64_t v15 = v12;
    }
    uint64_t v63 = *(void *)(a1 + 16);
LABEL_84:
    parallel_qsort_offset_t(v63 + 8 * v15, v12 - v15);
    uint64_t v64 = *(void *)(a1 + 48);
    if (v15 < v64)
    {
      uint64_t v65 = *(void *)(a1 + 16);
      uint64_t v66 = *(void *)(a1 + 40);
      unint64_t v67 = *(void *)(v65 + 8 * v66) & 0x3FFFFFFFFFFFFFFFLL;
      if (v67 < a2)
      {
LABEL_90:
        char v59 = __si_assert_copy_extra_329();
        uint64_t v47 = v59;
        int v60 = "";
        if (v59) {
          int v60 = v59;
        }
        unint64_t v61 = "last >= offset";
      }
      else
      {
        uint64_t v68 = v66 + 1;
        while (1)
        {
          if (v68 >= v64) {
            goto LABEL_93;
          }
          unint64_t v69 = *(void *)(v65 + 8 * v68) & 0x3FFFFFFFFFFFFFFFLL;
          if (v69 < v67) {
            break;
          }
          ++v68;
          unint64_t v67 = v69;
          if (v69 < a2) {
            goto LABEL_90;
          }
        }
        char v59 = __si_assert_copy_extra_329();
        uint64_t v47 = v59;
        int v60 = "";
        if (v59) {
          int v60 = v59;
        }
        unint64_t v61 = "current >= last";
      }
LABEL_109:
      __message_assert(v59, "OQueue.c", 14, v61, v60);
LABEL_110:
      free(v47);
      if (__valid_fs(-1)) {
        uint64_t v73 = 2989;
      }
      else {
        uint64_t v73 = 3072;
      }
      *(_DWORD *)uint64_t v73 = -559038737;
      abort();
    }
LABEL_93:
    if (!*(void *)(a1 + 32) || (**(void **)(a1 + 16) & 0x3FFFFFFFFFFFFFFFuLL) < a2)
    {
LABEL_95:
      ++*(_DWORD *)(a1 + 56);
      *(void *)(a1 + 64) = a2;
      return;
    }
    uint64_t v70 = __si_assert_copy_extra_329();
    uint64_t v34 = v70;
    __n128 v71 = "";
    if (v70) {
      __n128 v71 = v70;
    }
    uint64_t v72 = "last < offset";
LABEL_121:
    __message_assert(v70, "OQueue.c", 14, v72, v71);
LABEL_122:
    free(v34);
    if (__valid_fs(-1)) {
      uint64_t v74 = 2989;
    }
    else {
      uint64_t v74 = 3072;
    }
    *(_DWORD *)uint64_t v74 = -559038737;
    abort();
  }
  if (a2)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 48) = v4;
    if (v4 >= 100000)
    {
      uint64_t v23 = v4 - 1;
      uint64_t v24 = *(void **)(a1 + 16);
      qos_class_t v25 = qos_class_self();
      uint64_t v26 = dispatch_get_global_queue(v25, 0);
      signed int v27 = thread_count;
      if (!thread_count)
      {
        *(void *)unsigned int v76 = 0x1900000006;
        size_t v75 = 4;
        sysctl(v76, 2u, &thread_count, &v75, 0, 0);
        signed int v27 = thread_count;
      }
      uint64_t v4 = _big_split_offset_with_meta_t(v24, v23, a2, v26, v27);
    }
    else if (v4 >= 1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = *(void *)(a1 + 16);
      while (1)
      {
        uint64_t v7 = (_OWORD *)(v6 + 16 * v5);
        if ((*(void *)v7 & 0x3FFFFFFFFFFFFFFFuLL) >= a2)
        {
          uint64_t v8 = v4 >= v5 ? v5 : v4;
          int v9 = (uint64_t *)(v6 + 16 * v4 - 16);
          while (v4 > v5)
          {
            uint64_t v10 = v4--;
            uint64_t v11 = *v9;
            v9 -= 2;
            if ((v11 & 0x3FFFFFFFFFFFFFFFuLL) < a2)
            {
              memset(v76, 0, 16);
              *(_OWORD *)unsigned int v76 = *v7;
              _OWORD *v7 = *(_OWORD *)(v6 + 16 * v4);
              *(_OWORD *)(*(void *)(a1 + 16) + 16 * v4) = *(_OWORD *)v76;
              uint64_t v6 = *(void *)(a1 + 16);
              uint64_t v8 = v10;
              break;
            }
          }
          uint64_t v4 = v8;
          if ((*(void *)(v6 + 16 * v5) & 0x3FFFFFFFFFFFFFFFuLL) >= 2 * a2) {
            break;
          }
        }
        if (++v5 >= v4) {
          goto LABEL_37;
        }
      }
      char v33 = __si_assert_copy_extra_329();
      uint64_t v34 = v33;
      unint64_t v35 = "";
      if (v33) {
        unint64_t v35 = v33;
      }
      unint64_t v36 = "!offset || offset_with_meta_t_GET_VALUE(queue->offsets[i]) < offset * 2";
      goto LABEL_117;
    }
LABEL_37:
    *(void *)(a1 + 32) = v4;
    *(void *)(a1 + 40) = v4;
    uint64_t v28 = *(void *)(a1 + 48);
    uint64_t v29 = v28 - v4;
    if (v28 < v4)
    {
      uint64_t v46 = __si_assert_copy_extra_329();
      uint64_t v47 = v46;
      uint64_t v48 = "";
      if (v46) {
        uint64_t v48 = v46;
      }
      char v49 = "queue->top <= queue->end";
      goto LABEL_102;
    }
    if (v28 > v4)
    {
      uint64_t v30 = 16 * v4 + 16;
      uint64_t v31 = v28 - v4;
      do
      {
        if (!--v31) {
          goto LABEL_45;
        }
        uint64_t v32 = *(void *)(*(void *)(a1 + 16) + v30);
        v30 += 16;
      }
      while ((v32 & 0x3FFFFFFFFFFFFFFFuLL) >= a2);
      char v33 = __si_assert_copy_extra_329();
      uint64_t v34 = v33;
      unint64_t v35 = "";
      if (v33) {
        unint64_t v35 = v33;
      }
      unint64_t v36 = "current >= offset";
      goto LABEL_117;
    }
LABEL_45:
    if (v4 >= 1)
    {
      uint64_t v37 = *(uint64_t **)(a1 + 16);
      uint64_t v38 = v4;
      while (1)
      {
        uint64_t v39 = *v37;
        v37 += 2;
        if ((v39 & 0x3FFFFFFFFFFFFFFFuLL) > a2) {
          break;
        }
        if (!--v38) {
          goto LABEL_49;
        }
      }
      char v33 = __si_assert_copy_extra_329();
      uint64_t v34 = v33;
      unint64_t v35 = "";
      if (v33) {
        unint64_t v35 = v33;
      }
      unint64_t v36 = "current <= offset";
LABEL_117:
      __message_assert(v33, "OQueue.c", 13, v36, v35);
      goto LABEL_122;
    }
LABEL_49:
    parallel_qsort_offset_with_meta_t(*(void *)(a1 + 16) + 16 * v4, v29);
    uint64_t v40 = *(void *)(a1 + 48);
    if (v4 < v40)
    {
      uint64_t v41 = *(void *)(a1 + 16);
      uint64_t v42 = *(void *)(a1 + 40);
      unint64_t v43 = *(void *)(v41 + 16 * v42) & 0x3FFFFFFFFFFFFFFFLL;
      if (v43 < a2)
      {
LABEL_55:
        uint64_t v46 = __si_assert_copy_extra_329();
        uint64_t v47 = v46;
        uint64_t v48 = "";
        if (v46) {
          uint64_t v48 = v46;
        }
        char v49 = "last >= offset";
      }
      else
      {
        uint64_t v44 = (void *)(v41 + 16 * v42 + 16);
        while (1)
        {
          if (++v42 >= v40) {
            goto LABEL_58;
          }
          unint64_t v45 = *v44 & 0x3FFFFFFFFFFFFFFFLL;
          if (v45 < v43) {
            break;
          }
          v44 += 2;
          unint64_t v43 = v45;
          if (v45 < a2) {
            goto LABEL_55;
          }
        }
        uint64_t v46 = __si_assert_copy_extra_329();
        uint64_t v47 = v46;
        uint64_t v48 = "";
        if (v46) {
          uint64_t v48 = v46;
        }
        char v49 = "current >= last";
      }
      goto LABEL_102;
    }
LABEL_58:
    if (*(void *)(a1 + 32) && (**(void **)(a1 + 16) & 0x3FFFFFFFFFFFFFFFuLL) >= a2)
    {
      uint64_t v46 = __si_assert_copy_extra_329();
      uint64_t v47 = v46;
      uint64_t v48 = "";
      if (v46) {
        uint64_t v48 = v46;
      }
      char v49 = "last < offset";
LABEL_102:
      __message_assert(v46, "OQueue.c", 13, v49, v48);
      goto LABEL_110;
    }
    goto LABEL_95;
  }
  *(void *)(a1 + 64) = 0;
  ++*(_DWORD *)(a1 + 56);
  uint64_t v21 = *(void *)(a1 + 32);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = v21;
  *(void *)(a1 + 32) = 0;
  uint64_t v22 = *(void *)(a1 + 16);
  parallel_qsort_offset_with_meta_t(v22, v21);
}

void parallel_qsort_offset_t(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a2 > 2047)
  {
    uint64_t v4 = OSAtomicDequeue(&qsort_cached_allocations, 0);
    if (!v4) {
      uint64_t v4 = malloc_type_malloc(0x40uLL, 0x10300409C00947AuLL);
    }
    uint64_t v5 = dispatch_group_create();
    v4[3] = v5;
    v4[4] = 0;
    v4[1] = 0;
    v4[2] = a2 - 1;
    *uint64_t v4 = a1;
    int v6 = thread_count;
    if (!thread_count)
    {
      *(void *)int v9 = 0x1900000006;
      size_t v8 = 4;
      sysctl(v9, 2u, &thread_count, &v8, 0, 0);
      int v6 = thread_count;
    }
    *((_DWORD *)v4 + 14) = v6;
    v4[5] = (uint64_t)sqrt((double)a2) / 2;
    if (!v6)
    {
      *(void *)int v9 = 0x1900000006;
      size_t v8 = 4;
      sysctl(v9, 2u, &thread_count, &v8, 0, 0);
      int v6 = thread_count;
    }
    uint64_t v7 = a2 / (2 * v6);
    if (v7 <= 0x8000)
    {
      uint64_t v7 = 0x8000;
    }
    else if (!v6)
    {
      *(void *)int v9 = 0x1900000006;
      size_t v8 = 4;
      sysctl(v9, 2u, &thread_count, &v8, 0, 0);
      uint64_t v7 = a2 / (2 * thread_count);
    }
    v4[6] = v7;
    if ((uint64_t)v4[5] <= 2047) {
      v4[5] = 2048;
    }
    _qsort_big_offset_t(v4);
    dispatch_group_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(v5);
  }
  else
  {
    _qsort_offset_t(a1, 0, a2 - 1);
  }
}

void _qsort_offset_t(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = malloc_type_malloc(0x800uLL, 0x1000040451B5BE8uLL);
  *int v6 = 0;
  v6[1] = 0;
  uint64_t v7 = 1;
  do
  {
    if (a3 > a2)
    {
      if (v7 <= 128) {
        uint64_t v9 = 128;
      }
      else {
        uint64_t v9 = v7;
      }
      uint64_t v10 = &v6[2 * v7 + 1];
      while (a3 - a2 > 32)
      {
        uint64_t v11 = _partition_offset_t(a1, a2, a3);
        uint64_t v12 = v11 - a2;
        if (v11 < a2)
        {
          uint64_t v22 = __si_assert_copy_extra_329();
          uint64_t v23 = v22;
          uint64_t v24 = "";
          if (v22) {
            uint64_t v24 = v22;
          }
          __message_assert(v22, "OQueue.c", 14, "q>=left", v24);
          free(v23);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        if (v9 == v7)
        {
          heapsort_b((void *)(a1 + 8 * a2), a3 - a2 + 1, 8uLL, &__block_literal_global_26_3285);
          uint64_t v7 = v9;
          goto LABEL_3;
        }
        BOOL v13 = v12 <= a3 - v11;
        if (v12 <= a3 - v11) {
          uint64_t v14 = v11 - 1;
        }
        else {
          uint64_t v14 = a3;
        }
        if (v13) {
          uint64_t v15 = a2;
        }
        else {
          uint64_t v15 = v11;
        }
        if (v13) {
          a2 = v11;
        }
        else {
          a3 = v11 - 1;
        }
        *(v10 - 1) = v15;
        uint64_t *v10 = v14;
        ++v7;
        v10 += 2;
        if (a3 <= a2) {
          goto LABEL_3;
        }
      }
      uint64_t v16 = a2;
      do
      {
        uint64_t v17 = v16++;
        uint64_t v18 = *(void *)(a1 + 8 * v16);
        uint64_t v19 = *(void *)(a1 + 8 * v17);
        for (uint64_t i = v16; (v19 & 0x3FFFFFFFFFFFFFFFuLL) > (v18 & 0x3FFFFFFFFFFFFFFFuLL); v17 = i - 1)
        {
          uint64_t i = v17;
          uint64_t v21 = a1 + 8 * v17;
          *(void *)(v21 + 8) = v19;
          if (i <= a2) {
            break;
          }
          uint64_t v19 = *(void *)(v21 - 8);
        }
        *(void *)(a1 + 8 * i) = v18;
      }
      while (v16 != a3);
    }
LABEL_3:
    --v7;
    size_t v8 = &v6[2 * v7];
    a2 = *v8;
    a3 = v8[1];
  }
  while (v7);
  free(v6);
}

uint64_t _partition_offset_t(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - a2;
  uint64_t v4 = (uint64_t *)(a1 + 8 * a2);
  unint64_t v5 = a3 - a2 + 2;
  if (a3 - a2 >= -1) {
    unint64_t v5 = v3 + 1;
  }
  int v6 = &v4[v5 >> 1];
  uint64_t v7 = (uint64_t *)(a1 + 8 * a3);
  if (v3 < 1024)
  {
    uint64_t v22 = v6;
    qos_class_t v25 = (uint64_t *)(a1 + 8 * a3);
  }
  else
  {
    unint64_t v8 = (unint64_t)(a3 - a2 + 1) >> 3;
    uint64_t v9 = &v4[v8];
    unint64_t v10 = *v4 & 0x3FFFFFFFFFFFFFFFLL;
    unint64_t v11 = *v9 & 0x3FFFFFFFFFFFFFFFLL;
    if (v10 != v11)
    {
      uint64_t v12 = &v4[2 * v8];
      unint64_t v13 = *v12 & 0x3FFFFFFFFFFFFFFFLL;
      if (v10 >= v13) {
        uint64_t v14 = &v4[2 * v8];
      }
      else {
        uint64_t v14 = (uint64_t *)(a1 + 8 * a2);
      }
      if (v11 > v13) {
        uint64_t v14 = &v4[v8];
      }
      if (v10 < v13) {
        v4 += 2 * v8;
      }
      if (v11 < v13) {
        uint64_t v4 = v9;
      }
      if (v10 >= v11) {
        uint64_t v4 = v14;
      }
      if (v13 == v10 || v13 == v11) {
        uint64_t v4 = v12;
      }
    }
    uint64_t v16 = 2 * v8;
    uint64_t v17 = -(uint64_t)v8;
    uint64_t v18 = 8 * v8;
    uint64_t v19 = &v6[v18 / 0xFFFFFFFFFFFFFFF8];
    unint64_t v20 = v6[v18 / 0xFFFFFFFFFFFFFFF8] & 0x3FFFFFFFFFFFFFFFLL;
    unint64_t v21 = *v6 & 0x3FFFFFFFFFFFFFFFLL;
    if (v20 == v21)
    {
      uint64_t v22 = &v6[v18 / 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      uint64_t v22 = &v6[(unint64_t)v18 / 8];
      unint64_t v23 = *v22 & 0x3FFFFFFFFFFFFFFFLL;
      if (v23 != v20 && v23 != v21)
      {
        if (v20 >= v21)
        {
          if (v20 < v23) {
            uint64_t v22 = v19;
          }
          if (v21 > v23) {
            uint64_t v22 = v6;
          }
        }
        else
        {
          if (v20 >= v23) {
            uint64_t v22 = v19;
          }
          if (v21 < v23) {
            uint64_t v22 = v6;
          }
        }
      }
    }
    qos_class_t v25 = &v7[-v16];
    uint64_t v26 = &v7[v17];
    unint64_t v27 = *v25 & 0x3FFFFFFFFFFFFFFFLL;
    unint64_t v28 = *v26 & 0x3FFFFFFFFFFFFFFFLL;
    if (v27 != v28)
    {
      unint64_t v29 = *v7 & 0x3FFFFFFFFFFFFFFFLL;
      if (v27 >= v29) {
        uint64_t v30 = (uint64_t *)(a1 + 8 * a3);
      }
      else {
        uint64_t v30 = v25;
      }
      if (v28 > v29) {
        uint64_t v30 = v26;
      }
      if (v27 < v29) {
        qos_class_t v25 = (uint64_t *)(a1 + 8 * a3);
      }
      if (v28 < v29) {
        qos_class_t v25 = v26;
      }
      if (v27 >= v28) {
        qos_class_t v25 = v30;
      }
      if (v29 == v28) {
        qos_class_t v25 = (uint64_t *)(a1 + 8 * a3);
      }
      if (v29 == v27) {
        qos_class_t v25 = (uint64_t *)(a1 + 8 * a3);
      }
    }
  }
  unint64_t v31 = *v4 & 0x3FFFFFFFFFFFFFFFLL;
  unint64_t v32 = *v22 & 0x3FFFFFFFFFFFFFFFLL;
  if (v31 == v32)
  {
    uint64_t v22 = v4;
  }
  else
  {
    unint64_t v33 = *v25 & 0x3FFFFFFFFFFFFFFFLL;
    if (v33 == v31 || v33 == v32)
    {
      uint64_t v22 = v25;
    }
    else if (v31 >= v32)
    {
      if (v32 <= v33)
      {
        if (v31 >= v33) {
          uint64_t v22 = v25;
        }
        else {
          uint64_t v22 = v4;
        }
      }
    }
    else if (v32 >= v33)
    {
      if (v31 >= v33) {
        uint64_t v22 = v4;
      }
      else {
        uint64_t v22 = v25;
      }
    }
  }
  uint64_t v35 = *v22;
  *uint64_t v22 = *v7;
  uint64_t *v7 = v35;
  uint64_t v36 = a3 - a2;
  if (a3 > a2)
  {
    uint64_t v37 = (uint64_t *)(a1 + 8 * a2);
    uint64_t v40 = *v37;
    uint64_t v38 = v37 + 1;
    uint64_t v39 = v40;
    unint64_t v41 = v35 & 0x3FFFFFFFFFFFFFFFLL;
    do
    {
      uint64_t v42 = *v38;
      if ((v39 & 0x3FFFFFFFFFFFFFFFuLL) <= v41)
      {
        *(v38 - 1) = *(void *)(a1 + 8 * a2);
        *(void *)(a1 + 8 * a2++) = v39;
      }
      ++v38;
      uint64_t v39 = v42;
      --v36;
    }
    while (v36);
    uint64_t v35 = *v7;
  }
  uint64_t v43 = *(void *)(a1 + 8 * a2);
  *(void *)(a1 + 8 * a2) = v35;
  uint64_t *v7 = v43;
  return a2;
}

uint64_t storage_reader_init(uint64_t result, uint64_t a2)
{
  int v3 = 1;
  *(unsigned char *)(a2 + 16) = 1;
  *(void *)a2 = result;
  if (*(unsigned char *)(result + 252)) {
    goto LABEL_4;
  }
  uint64_t v4 = result;
  if (*(_DWORD *)(result + 4368))
  {
    int v3 = 2;
LABEL_4:
    *(_DWORD *)(a2 + 20) = v3;
    *(void *)(a2 + 8) = 0;
    return result;
  }
  *(_DWORD *)(a2 + 20) = 0;
  unint64_t v5 = *(pthread_rwlock_t **)(result + 4408);
  pthread_rwlock_rdlock(v5);
  uint64_t sig = v5[1].__sig;
  if (sig || (pthread_rwlock_unlock(v5), pthread_rwlock_wrlock(v5), (uint64_t sig = v5[1].__sig) != 0))
  {
    atomic_fetch_add((atomic_uint *volatile)(sig + 8), 1u);
    uint64_t result = pthread_rwlock_unlock(v5);
    *(void *)(a2 + 8) = sig;
  }
  else
  {
    uint64_t v7 = (char *)OSAtomicDequeue(&availableReaders, 0);
    if (!v7) {
      uint64_t v7 = (char *)malloc_type_calloc(1uLL, 0x1248uLL, 0x10A0040BDFA2EA3uLL);
    }
    *((_DWORD *)v7 + 2) = 2;
    *((_DWORD *)v7 + 140) = *(_DWORD *)(v4 + 248);
    v7[576] = *(unsigned char *)(v4 + 264);
    *((void *)v7 + 66) = 0;
    *(_OWORD *)(v7 + 536) = *(_OWORD *)(v4 + 224);
    v7[565] = 1;
    int v8 = *(_DWORD *)(v4 + 248);
    if (v8 >= 2)
    {
      uint64_t v9 = 0;
      while (1)
      {
        uint64_t v10 = *(void *)(v4 + 272 + 8 * v9);
        if (v10 && *(void *)(v10 + 24) && *(void *)(v10 + 8))
        {
          v7[v9 + 12] = 0;
          atomic_fetch_add((atomic_uint *volatile)v10, 1u);
          *(void *)&v7[8 * v9 + 584] = v10;
        }
        else if (!setupReaderOwnedWindow(v9, (uint64_t)v7, v4 + 216))
        {
LABEL_37:
          _release_read_window(&availableReaders, v7);
          uint64_t result = pthread_rwlock_unlock(v5);
          *(void *)(a2 + 8) = 0;
          goto LABEL_38;
        }
        ++v9;
        int v11 = *(_DWORD *)(v4 + 248) - 1;
        if (v9 >= v11) {
          goto LABEL_21;
        }
      }
    }
    int v11 = v8 - 1;
LABEL_21:
    uint64_t v12 = v11;
    if (*(unsigned char *)(v4 + 253))
    {
      unint64_t v13 = (uint64_t *)(v4 + 8 * v11 + 272);
      uint64_t v14 = v11 + 73;
      do
      {
        uint64_t v15 = *v13;
        if (*v13 && *(void *)(v15 + 24) && *(void *)(v15 + 8))
        {
          v7[v14 - 61] = 0;
          atomic_fetch_add((atomic_uint *volatile)v15, 1u);
          *(void *)&v7[8 * v14] = v15;
        }
        else if (!setupReaderOwnedWindow(v14 - 73, (uint64_t)v7, v4 + 216))
        {
          goto LABEL_37;
        }
        ++v13;
        uint64_t v16 = v14 - 72;
        ++v14;
      }
      while (v16 < *(int *)(v4 + 248));
    }
    else
    {
      uint64_t v17 = 0;
      do
      {
        if ((unint64_t)((v12 + v17) << *(unsigned char *)(v4 + 264)) > *(void *)(v4 + 224)) {
          break;
        }
        if (!setupReaderOwnedWindow(v12 + v17, (uint64_t)v7, v4 + 216)) {
          goto LABEL_37;
        }
        ++v17;
      }
      while (v12 + v17 < *(int *)(v4 + 248));
      *((_DWORD *)v7 + 140) = v17;
    }
    v5[1].__uint64_t sig = (uint64_t)v7;
    uint64_t result = pthread_rwlock_unlock(v5);
    *(void *)(a2 + 8) = v7;
    if (!v7) {
LABEL_38:
    }
      *(unsigned char *)(a2 + 16) = 0;
  }
  return result;
}

char *clonePayloadData(uint64_t *a1, int a2, int a3)
{
  int v6 = (char *)malloc_type_malloc(0x1270uLL, 0x10A004049197E80uLL);
  memcpy(v6, a1, 0x1270uLL);
  bzero(v6 + 40, 0x1160uLL);
  uint64_t v7 = fd_dup(a1[561]);
  *((void *)v6 + 561) = v7;
  *((_DWORD *)v6 + 1128) = a2;
  if (a3) {
    *((_DWORD *)v6 + 1124) = _fd_acquire_fd((uint64_t)v7, (void *)v6 + 563);
  }
  return v6;
}

atomic_uint *fd_dup(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  pthread_mutex_lock(&g_fd_lock);
  qos_class_t v2 = *(atomic_uint **)(a1 + 80);
  if (v2)
  {
    atomic_fetch_add_explicit(v2 + 8, 1u, memory_order_relaxed);
  }
  else
  {
    pthread_mutex_unlock(&g_fd_lock);
    bzero(v10, 0x400uLL);
    int v3 = fd_name(a1, v10, 0x400uLL);
    if (!v3 || (atomic_uint v4 = *(_DWORD *)(a1 + 44), v4 == -1))
    {
      qos_class_t v2 = 0;
    }
    else
    {
      unint64_t v5 = v3;
      atomic_uint v6 = *(_DWORD *)(a1 + 48);
      qos_class_t v2 = (atomic_uint *)malloc_type_calloc(1uLL, 0x68uLL, 0x10300409CE040BCuLL);
      atomic_uint *v2 = -50529037;
      v2[8] = 1;
      __int16 v7 = v2[14] & 0xFFFB | (4 * ((*(_WORD *)(a1 + 56) >> 2) & 1));
      *((_WORD *)v2 + 28) = v7;
      v2[11] = v4;
      v2[12] = v6;
      *((void *)v2 + 9) = strdup(v5);
      *((_WORD *)v2 + 28) = *(_WORD *)(a1 + 56) & 0xFF0 | v7 & 0xF00F;
      v2[10] = -1;
    }
    pthread_mutex_lock(&g_fd_lock);
    uint64_t v8 = *(void *)(a1 + 80);
    if (v8)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 32), 1u, memory_order_relaxed);
      pthread_mutex_unlock(&g_fd_lock);
      fd_release(v2);
      return (atomic_uint *)v8;
    }
    if (v2) {
      atomic_fetch_add_explicit(v2 + 8, 1u, memory_order_relaxed);
    }
    *(void *)(a1 + 80) = v2;
  }
  pthread_mutex_unlock(&g_fd_lock);
  return v2;
}

void *ContentIndexDocSetsCreateIterator(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, char a5, uint64_t a6)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a3 + 8)) {
    return 0;
  }
  uint64_t v8 = a2;
  uint64_t v93 = 0;
  size_t v11 = 8 * a2 + 80;
  if (v11 >> 17) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = *MEMORY[0x1E4F14B00] >= v11;
  }
  if (!v12) {
    ++sTotal_5091;
  }
  unint64_t v13 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v11, 0x31F9A007uLL);
  if (!v13 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
  }
  uint64_t v93 = v13;
  v13[55] = a5;
  uint64_t v91 = 0;
  uint64_t v92 = 8;
  char v90 = 1;
  uint64_t v14 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x40uLL, 0x6085D6BuLL);
  if (!v14 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
  }
  uint64_t v89 = v14;
  *((void *)v93 + 1) = a6;
  uint64_t v15 = *(void *)(*a1 + 56);
  if (*(unsigned char *)(v15 + 8))
  {
    int v80 = a4;
    int v16 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
    unint64_t v17 = setThreadIdAndInfo(-1, (long long *)sIndexExceptionCallbacks, v15, 0, v16);
    unsigned int v87 = HIDWORD(v17);
    unsigned int v88 = v17;
    unsigned int v85 = v19;
    unsigned int v86 = v18;
    uint64_t v20 = *(void *)&threadData[18 * v17 + 2];
    uint64_t v21 = v20 + 320 * HIDWORD(v17);
    *(unsigned char *)(v21 + 216) = 0;
    int v22 = *(_DWORD *)(v21 + 312);
    unint64_t v23 = *(void (**)(void))(v21 + 224);
    if (v23) {
      v23(*(void *)(v20 + 320 * HIDWORD(v17) + 288));
    }
    if (_setjmp((int *)v21))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
      }
      *(_DWORD *)(v21 + 312) = v22;
      if (__THREAD_SLOT_KEY)
      {
        uint64_t v24 = pthread_getspecific(__THREAD_SLOT_KEY);
        if (v24) {
          goto LABEL_21;
        }
      }
      else
      {
        makeThreadId();
        uint64_t v24 = pthread_getspecific(__THREAD_SLOT_KEY);
        if (v24)
        {
LABEL_21:
          qos_class_t v25 = v24;
          if ((unint64_t)v24 < 0x801) {
            goto LABEL_22;
          }
        }
      }
      makeThreadId();
      qos_class_t v25 = pthread_getspecific(__THREAD_SLOT_KEY);
LABEL_22:
      uint64_t v26 = (uint64_t)v25 - 1;
      unint64_t v27 = &threadData[18 * ((uint64_t)v25 - 1)];
      unsigned int v29 = v27[14];
      unint64_t v28 = v27 + 14;
      if (v29 > v85)
      {
        do
          CIOnThreadCleanUpPop(v26);
        while (*v28 > v85);
      }
      dropThreadId(v88, 1, v16);
      CICleanUpReset(v88, v86);
      if (!v90) {
        return v93;
      }
      goto LABEL_30;
    }
    CFMutableSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)kCIQueryZoneAllocator, 0, 0);
    if (v8 == 1)
    {
      int v32 = v16;
      uint64_t v33 = *a1;
      if (*(_DWORD *)(*a1 + 48) == 1)
      {
        *((_DWORD *)v93 + 7) = *(_DWORD *)(*(void *)(v33 + 56) + 68);
        *((_DWORD *)v93 + 10) = *((_DWORD *)v93 + 7);
        if (*((_DWORD *)v93 + 10))
        {
          *((_DWORD *)v93 + 11) = 1;
          *((unsigned char *)v93 + 56) = 1;
          atomic_fetch_add((atomic_uint *volatile)v33, 1u);
          *((void *)v93 + 10) = v33;
          atomic_fetch_add((atomic_uint *volatile)a3, 1u);
          *(void *)uint64_t v93 = a3;
          *((void *)v93 + 9) = 1;
          free(v89);
        }
        else
        {
          free(v93);
          uint64_t v93 = 0;
        }
        if (Mutable) {
          CFRelease(Mutable);
        }
        goto LABEL_81;
      }
      uint64_t v35 = a1;
      int v83 = v22;
      int v84 = v16;
      uint64_t v34 = a3;
      ContentIndexDocSetCreatePhraseIterators(v33, *(void *)(a3 + 16), *(unsigned int *)(*(void *)(v33 + 56) + 68), *(unsigned __int8 *)(a3 + 41));
      ContentIndexDocSetAppendIterators(v33, &v92, &v91, &v89, Mutable);
      atomic_fetch_add((atomic_uint *volatile)v33, 1u);
      *((void *)v93 + 10) = v33;
    }
    else
    {
      int v83 = v22;
      int v84 = v16;
      uint64_t v34 = a3;
      uint64_t v35 = a1;
      if (v8 >= 1)
      {
        uint64_t v36 = 0;
        do
        {
          uint64_t v37 = v8;
          uint64_t v38 = v36;
          uint64_t v39 = 8 * v36;
          uint64_t v40 = a1[v36];
          ContentIndexDocSetCreatePhraseIterators(v40, *(void *)(a3 + 16), *(unsigned int *)(*(void *)(v40 + 56) + 68), *(unsigned __int8 *)(a3 + 41));
          ContentIndexDocSetAppendIterators(v40, &v92, &v91, &v89, Mutable);
          atomic_fetch_add((atomic_uint *volatile)v40, 1u);
          *(void *)((char *)v93 + v39 + 80) = v40;
          uint64_t v35 = a1;
          uint64_t v41 = v38 + 1;
          uint64_t v8 = v37;
          uint64_t v36 = v41;
        }
        while (v37 != v41);
      }
    }
    CFRelease(Mutable);
    uint64_t v42 = v91;
    uint64_t v43 = *(void *)(*v35 + 56);
    uint64_t v44 = 8 * v91;
    size_t v45 = 8 * v91 + 160;
    if (!(v45 >> 17) && *MEMORY[0x1E4F14B00] < v45) {
      ++sTotal_10783;
    }
    uint64_t v46 = (atomic_uint *)v34;
    uint64_t v47 = *(void *)(v34 + 8);
    stat __src = v89;
    int v81 = *(_DWORD *)(v43 + 68);
    uint64_t v48 = (char *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v45, 0x31F9A007uLL);
    if (!v48 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
    }
    *((void *)v48 + 2) = v42;
    *((void *)v48 + 3) = 1;
    char v49 = v48 + 8;
    if (v42)
    {
      char v49 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v44 + 16, 0x6085D6BuLL);
      if (!v49 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
      }
      *((void *)v48 + 1) = v49;
    }
    *char v49 = 0;
    size_t __n = v44;
    *((void *)v48 + 7) = -1;
    *((void *)v48 + 8) = -1;
    *((void *)v48 + 10) = v47;
    *((_DWORD *)v48 + 25) = v81;
    v48[40] = 0;
    uint64_t v50 = v42;
    if (v80)
    {
      *((void *)v48 + 6) = 0;
      uint64_t v51 = (size_t *)MEMORY[0x1E4F14B00];
      size_t v52 = ((*MEMORY[0x1E4F14AF0] + *(void *)(v47 + 24)) & ~*MEMORY[0x1E4F14AF0]) + *MEMORY[0x1E4F14B00];
      *((void *)v48 + 11) = v52;
      int v53 = (char *)mmap(0, v52, 1, 2, *(_DWORD *)(v47 + 4496), 0);
      *((void *)v48 + 4) = v53;
      if (v53 == (char *)-1)
      {
        int v78 = *__error();
        bzero(buf, 0x400uLL);
        qos_class_t v54 = *(_DWORD **)(v47 + 4488);
        *(void *)BOOL v94 = 0;
        int v55 = _fd_acquire_fd((uint64_t)v54, v94);
        if (v55 != -1)
        {
          int v56 = v55;
          fcntl(v55, 50, buf);
          _fd_release_fd(v54, v56, 0, *(uint64_t *)v94);
        }
        int v57 = *__error();
        unint64_t v58 = _SILogForLogForCategory(10);
        os_log_type_t v59 = dword_1E9FC90CC < 3;
        if (os_log_type_enabled(v58, (os_log_type_t)(dword_1E9FC90CC < 3)))
        {
          uint64_t v60 = *((void *)v48 + 11);
          *(_DWORD *)BOOL v94 = 67109634;
          *(_DWORD *)&v94[4] = v78;
          __int16 v95 = 2048;
          uint64_t v96 = v60;
          __int16 v97 = 2080;
          unsigned int v98 = buf;
          _os_log_impl(&dword_1BD672000, v58, v59, "*warn* Failed to map postings: %d, %zd, %s", v94, 0x1Cu);
        }
        *__error() = v57;
        *__error() = v78;
      }
      else
      {
        if (mmap(&v53[*((void *)v48 + 11) - *v51], *v51, 1, 4114, -83886080, 0) != (void *)-1)
        {
          v48[40] = 1;
LABEL_71:
          unint64_t v67 = 0;
          *((_DWORD *)v48 + 18) = v81;
          *((_DWORD *)v48 + 19) = v81;
          *((void *)v48 + 19) = 0;
          unint64_t v68 = *(void *)(v47 + 24) >> 1;
          *((void *)v48 + 13) = v68;
          if (v68 >= *(void *)(v47 + 32)) {
            unint64_t v67 = v68;
          }
          *((void *)v48 + 13) = v67;
          memcpy(v48 + 160, __src, __n);
          *((void *)v48 + 14) = v50;
          *((void *)v48 + 15) = __src;
          if (v42 >= 1)
          {
            for (uint64_t i = 0; i != v42; ++i)
            {
              __n128 v71 = &v48[8 * i];
              if ((*(unsigned int (**)(void))(*((void *)v71 + 20) + 40))())
              {
                uint64_t v72 = *((void *)v71 + 20);
                if ((*(void *)(v72 + 8) & 0x3FFFFFFFFFFFFFFFuLL) <= *((void *)v48 + 13))
                {
                  uint64_t v70 = *((void *)v48 + 19);
                  *((void *)v48 + 19) = v70 + 1;
                  *(void *)&v48[8 * v70 + 160] = v72;
                }
                else
                {
                  ipqpush((uint64_t)(v48 + 8), v72);
                }
              }
              *v48 |= *(unsigned char *)(*((void *)v71 + 20) + 64);
            }
          }
          uint64_t v89 = 0;
          *((void *)v93 + 2) = v48;
          *((unsigned char *)v93 + 52) = 0;
          *((_DWORD *)v93 + 7) = v46[9];
          *((_DWORD *)v93 + 6) = v46[8];
          atomic_fetch_add(v46, 1u);
          *(void *)uint64_t v93 = v46;
          *((_DWORD *)v93 + 10) = 0;
          *((_DWORD *)v93 + 11) = 0;
          *((void *)v93 + 9) = v8;
          *((unsigned char *)v93 + 58) = *v48;
          int v22 = v83;
          int v32 = v84;
LABEL_81:
          char v90 = 0;
          uint64_t v73 = *(void *)&threadData[18 * v88 + 2];
          uint64_t v74 = v73 + 320 * v87;
          *(_DWORD *)(v74 + 312) = v22;
          size_t v75 = *(void (**)(void))(v74 + 232);
          if (v75) {
            v75(*(void *)(v73 + 320 * v87 + 288));
          }
          dropThreadId(v88, 0, v32);
          if (!v90) {
            return v93;
          }
          goto LABEL_30;
        }
        int v77 = *__error();
        bzero(buf, 0x400uLL);
        fd_realpath(*(_DWORD **)(v47 + 4488), buf);
        int v61 = *__error();
        uint64_t v62 = _SILogForLogForCategory(10);
        os_log_type_t v63 = dword_1E9FC90CC < 3;
        if (os_log_type_enabled(v62, (os_log_type_t)(dword_1E9FC90CC < 3)))
        {
          uint64_t v64 = *((void *)v48 + 11);
          uint64_t v65 = (uint8_t *)*MEMORY[0x1E4F14B00];
          *(_DWORD *)BOOL v94 = 67109890;
          *(_DWORD *)&v94[4] = v77;
          __int16 v95 = 2048;
          uint64_t v96 = v64;
          __int16 v97 = 2048;
          unsigned int v98 = v65;
          __int16 v99 = 2080;
          long long v100 = buf;
          _os_log_impl(&dword_1BD672000, v62, v63, "*warn* Failed to allocated guard page error %d, %zd, %lu, %s", v94, 0x26u);
        }
        *__error() = v61;
        *__error() = v77;
        munmap(*((void **)v48 + 4), *((void *)v48 + 11));
      }
      uint64_t v50 = v42;
      if (v48[40]) {
        goto LABEL_71;
      }
    }
    *((void *)v48 + 6) = -1;
    uint64_t v66 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x10004uLL, 0x6085D6BuLL);
    if (!v66) {
      _log_fault_for_malloc_failure();
    }
    *((void *)v48 + 4) = v66;
    *((void *)v48 + 11) = 0x10000;
    goto LABEL_71;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "Skipping because index is shut down", buf, 2u);
  }
  if (!v90) {
    return v93;
  }
LABEL_30:
  free(v89);
  free(v93);
  return 0;
}

void ContentIndexDocSetCreatePhraseIterators(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = *(_DWORD *)(a1 + 48);
  if (v5 > 9) {
    assert_invalid_doc_type((_DWORD *)a1);
  }
  int v6 = 1 << v5;
  if ((v6 & 0x10F) == 0)
  {
    if ((v6 & 0xF0) != 0)
    {
      if (*(_DWORD *)(a1 + 96))
      {
        unint64_t v10 = 0;
        do
          ContentIndexDocSetCreatePhraseIterators(*(void *)(*(void *)(a1 + 72) + 8 * v10++), a2, a3, a4);
        while (v10 < *(unsigned int *)(a1 + 96));
      }
      return;
    }
    if (*(void *)(a1 + 112)) {
      return;
    }
    uint64_t v62 = (uint64_t)&v62;
    MEMORY[0x1F4188790](a1);
    BOOL v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFF0);
    bzero(v12, v11);
    uint64_t v13 = *(unsigned int *)(a1 + 96);
    if (!v13) {
      goto LABEL_17;
    }
    uint64_t v14 = *(void *)(a1 + 72);
    if (v13 == 1)
    {
      uint64_t v15 = 0;
    }
    else
    {
      uint64_t v15 = v13 & 0xFFFFFFFE;
      uint64_t v16 = v14 + 8;
      unint64_t v17 = v12 + 8;
      uint64_t v18 = v15;
      do
      {
        uint64_t v19 = *(void *)(*(void *)v16 + 72);
        *(v17 - 1) = *(void *)(*(void *)(v16 - 8) + 72);
        *unint64_t v17 = v19;
        v16 += 16;
        v17 += 2;
        v18 -= 2;
      }
      while (v18);
      if (v15 == v13) {
        goto LABEL_17;
      }
    }
    uint64_t v20 = v13 - v15;
    uint64_t v21 = 8 * v15;
    int v22 = &v12[8 * v15];
    unint64_t v23 = (uint64_t *)(v14 + v21);
    do
    {
      uint64_t v24 = *v23++;
      *(void *)int v22 = *(void *)(v24 + 72);
      v22 += 8;
      --v20;
    }
    while (v20);
LABEL_17:
    os_log_type_t v63 = v12;
    qos_class_t v25 = (unsigned int *)(*(void *)(a1 + 56) + 36);
    char v26 = atomic_load(v25);
    char v27 = atomic_load(v25);
    char v28 = atomic_load((unsigned int *)(*(void *)(a1 + 56) + 36));
    uint64_t v29 = *(unsigned int *)(a1 + 96);
    size_t v30 = 8 * v29;
    size_t v31 = 8 * v29 + 3352;
    uint64_t v65 = v29;
    if (v29 <= 0x3E5C && *MEMORY[0x1E4F14B00] < v31) {
      ++sTotal_10783;
    }
    unsigned int v64 = v27 & 0x40;
    unsigned int v32 = v26 & 4;
    int v33 = v28 & 0xC;
    uint64_t v34 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v31, 0x31F9A007uLL);
    uint64_t v35 = (uint64_t)v34;
    if (v34)
    {
      int v36 = v65;
      v34[1] = v65;
      v34[2] = 1;
      uint64_t v37 = v34;
      if (v36)
      {
        uint64_t v37 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v30 + 16, 0x6085D6BuLL);
        if (!v37) {
          _log_fault_for_malloc_failure();
        }
        *(void *)uint64_t v35 = v37;
      }
      void *v37 = 0;
    }
    else
    {
      _log_fault_for_malloc_failure();
      pqinit_ItemIteratorRef(0, v65);
    }
    unsigned int v38 = v64 >> 6;
    *(void *)(v35 + 3160) = a2;
    *(void *)(v35 + 3168) = 0x10000;
    *(unsigned char *)(v35 + 3176) = v32 >> 2;
    if (v32) {
      BOOL v39 = 0;
    }
    else {
      BOOL v39 = v33 == 8;
    }
    char v40 = v39;
    *(unsigned char *)(v35 + 3177) = v40;
    *(unsigned char *)(v35 + 3178) = 0;
    *(unsigned char *)(v35 + 3179) = v38;
    qos_class_t v41 = qos_class_self();
    uint64_t v42 = dispatch_queue_attr_make_with_qos_class(MEMORY[0x1E4F14430], v41, 0);
    *(void *)(v35 + 3184) = dispatch_queue_create("com.apple.spotlight.positions", v42);
    int v43 = gCPUCount;
    if (gCPUCount >= 0x10) {
      int v43 = 16;
    }
    *(_DWORD *)(v35 + 3180) = v43;
    if (v43)
    {
      unint64_t v44 = 0;
      do
        *(void *)(v35 + 3192 + 8 * v44++) = dispatch_queue_create_with_target_V2(0, 0, *(dispatch_queue_t *)(v35 + 3184));
      while (v44 < *(unsigned int *)(v35 + 3180));
    }
    *(void *)(v35 + 3320) = dispatch_semaphore_create(16);
    if (v64 && a4)
    {
      unsigned int v45 = gCPUCount;
      if (gCPUCount >= v65) {
        unsigned int v45 = v65;
      }
      if (v45 >= 8) {
        unsigned int v45 = 8;
      }
      *(_DWORD *)(v35 + 3348) = v45;
      if (v45)
      {
        unint64_t v46 = 0;
        int32x2_t v47 = vdup_n_s32(a3);
        uint64_t v48 = v35;
        do
        {
          char v49 = (int32x2_t *)(v35 + 392 * v46);
          v49[4] = (int32x2_t)-1;
          v49[3] = (int32x2_t)malloc_type_malloc(0x10004uLL, 0xF09BA7B7uLL);
          v49[5] = v47;
          v49[7].i32[0] = 1;
          v49[51] = (int32x2_t)(v35 + 3160);
          v49[25] = 0;
          v49[26] = 0;
          if (*(_DWORD *)(v35 + 3180))
          {
            unint64_t v50 = 0;
            do
            {
              *(_DWORD *)(v48 + 4 * v50 + 344) = 0;
              *(void *)(v48 + 8 * v50++ + 216) = 0;
            }
            while (v50 < *(unsigned int *)(v35 + 3180));
          }
          ++v46;
          v48 += 392;
        }
        while (v46 < *(unsigned int *)(v35 + 3348));
      }
    }
    else
    {
      *(_DWORD *)(v35 + 3348) = 0;
      initFileState(v35 + 24, v35 + 3160, a3);
    }
    *(void *)(v35 + 3336) = 0;
    unint64_t v51 = *(void *)(a2 + 24) >> 1;
    *(void *)(v35 + 3328) = v51;
    if (v51 >= *(void *)(a2 + 32)) {
      unint64_t v52 = v51;
    }
    else {
      unint64_t v52 = 0;
    }
    *(void *)(v35 + 3328) = v52;
    memcpy((void *)(v35 + 3352), v63, v30);
    if (v65)
    {
      uint64_t v53 = 0;
      do
      {
        PositionIterator_Split(*(void *)(v35 + v53 + 3352), *(void *)(v35 + 3328));
        qos_class_t v54 = *(void **)(v35 + v53 + 3352);
        uint64_t v55 = *(void *)(v35 + 3328);
        if ((*v54 & 0x3FFFFFFFFFFFFFFFLL) != 0)
        {
          if (v55) {
            BOOL v56 = *v54 > (unint64_t)(2 * v55);
          }
          else {
            BOOL v56 = 0;
          }
          if (v56)
          {
            unint64_t v58 = __si_assert_copy_extra(0);
            os_log_type_t v59 = v58;
            uint64_t v60 = "";
            if (v58) {
              uint64_t v60 = v58;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 4905, "!bulkIter->split ||bulkIter->future[i]->ptr <= 2*bulkIter->split", v60);
            free(v59);
            if (__valid_fs(-1)) {
              uint64_t v61 = 2989;
            }
            else {
              uint64_t v61 = 3072;
            }
            *(_DWORD *)uint64_t v61 = -559038737;
            abort();
          }
          ipqpush(v35, (uint64_t)v54);
        }
        else if (v55)
        {
          uint64_t v57 = *(void *)(v35 + 3336);
          *(void *)(v35 + 3336) = v57 + 1;
          *(void *)(v35 + 8 * v57 + 3352) = v54;
        }
        v53 += 8;
      }
      while (v30 != v53);
      unint64_t v52 = *(void *)(v35 + 3328);
    }
    if (!v52 && *(uint64_t *)(v35 + 3336) >= 1 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "renedebug\n", buf, 2u);
    }
    *(void *)(a1 + 112) = v35;
  }
}

void ContentIndexDocSetAppendIterators(uint64_t a1, uint64_t *a2, uint64_t *a3, void **a4, __CFSet *a5)
{
  if (!CFSetContainsValue(a5, (const void *)a1))
  {
    CFSetAddValue(a5, (const void *)a1);
    switch(*(_DWORD *)(a1 + 48))
    {
      case 0:
        return;
      case 1:
      case 2:
        if (*(_DWORD *)(a1 + 96))
        {
          unint64_t v11 = 0;
          do
            ContentIndexDocSetAppendIterators(*(void *)(*(void *)(a1 + 72) + 8 * v11++), a2, a3, a4, a5);
          while (v11 < *(unsigned int *)(a1 + 96));
        }
        break;
      case 3:
      case 8:
        uint64_t v12 = *(void *)(a1 + 64);
        if (v12)
        {
          uint64_t v13 = *a3;
          uint64_t v14 = *a2;
          uint64_t v15 = *a4;
          if (*a3 >= *a2)
          {
            *a2 = 2 * v14;
            uint64_t v15 = malloc_type_realloc(v15, 16 * v14, 0x2004093837F09uLL);
            *a4 = v15;
            uint64_t v12 = *(void *)(a1 + 64);
            uint64_t v13 = *a3;
          }
          *a3 = v13 + 1;
          *((void *)v15 + v13) = v12;
        }
        break;
      case 4:
      case 5:
      case 6:
      case 7:
      case 9:
        if (*(_DWORD *)(a1 + 96))
        {
          unint64_t v10 = 0;
          do
            ContentIndexDocSetAppendIterators(*(void *)(*(void *)(a1 + 72) + 8 * v10++), a2, a3, a4, a5);
          while (v10 < *(unsigned int *)(a1 + 96));
        }
        break;
      default:
        assert_invalid_doc_type((_DWORD *)a1);
    }
  }
}

void BulkPayloadIterator_Step(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 32;
  *(void *)(a1 + 56) = -1;
  *(void *)(a1 + 64) = -1;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 76);
  __int16 v7 = (void *)(a1 + 8);
  uint64_t v8 = (uint64_t *)(a1 + 160);
  do
  {
    if (!*(void *)(a1 + 104) && *(void *)(a1 + 152))
    {
      uint64_t v24 = __si_assert_copy_extra(0);
      qos_class_t v25 = v24;
      char v26 = "";
      if (v24) {
        char v26 = v24;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 1817, "iterator->split>0 || iterator->futureCount==0", v26);
      goto LABEL_37;
    }
    uint64_t v9 = *(void *)(a1 + 24);
    if (v9 != 1)
    {
LABEL_18:
      uint64_t v18 = ipqpop(v7);
      if (!(*(unsigned int (**)(uint64_t, uint64_t))(v18 + 40))(v18, v6))
      {
        uint64_t v20 = *(uint64_t (**)(uint64_t, void))(v18 + 48);
        if (v20)
        {
          unsigned int v21 = v20(v18, 0);
          unsigned int v22 = *(_DWORD *)(a1 + 76);
          if (v21 > v22) {
            unsigned int v22 = v21;
          }
          *(_DWORD *)(a1 + 76) = v22;
        }
        goto LABEL_27;
      }
      unint64_t v19 = *(void *)(v18 + 8) & 0x3FFFFFFFFFFFFFFFLL;
      if (v19 > *(void *)(a1 + 104))
      {
        ipqpush((uint64_t)v7, v18);
LABEL_27:
        *(unsigned char *)a1 |= *(unsigned char *)(v18 + 64);
        uint64_t v9 = *(void *)(a1 + 24);
        continue;
      }
      if (v19)
      {
        uint64_t v23 = *(void *)(a1 + 152);
        *(void *)(a1 + 152) = v23 + 1;
        *(void *)(a1 + 8 * v23 + 160) = v18;
        goto LABEL_27;
      }
      char v27 = __si_assert_copy_extra(0);
      qos_class_t v25 = v27;
      char v28 = "";
      if (v27) {
        char v28 = v27;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 1935, "((((iter->ptr.has_meta?iter->ptr.with_meta.offset:iter->ptr.just_offset) & 0x3FFFFFFFFFFFFFFF)))", v28);
LABEL_37:
      free(v25);
      if (__valid_fs(-1)) {
        uint64_t v29 = 2989;
      }
      else {
        uint64_t v29 = 3072;
      }
      *(_DWORD *)uint64_t v29 = -559038737;
      abort();
    }
    while (1)
    {
      unint64_t v10 = *(void *)(a1 + 104);
      if (!v10) {
        break;
      }
      uint64_t v11 = *(void *)(a1 + 152);
      *(void *)(a1 + 152) = 0;
      *(void *)(a1 + 128) = 0;
      unint64_t v12 = v10 >> 1;
      *(void *)(a1 + 104) = v12;
      *(void *)(a1 + 56) = *(void *)(a1 + 64);
      *(void *)(a1 + 64) = -1;
      if (v12 < *(void *)(*(void *)(a1 + 80) + 32)) {
        *(void *)(a1 + 104) = 0;
      }
      if (v11 < 1)
      {
        uint64_t v17 = 1;
      }
      else
      {
        uint64_t v13 = v8;
        do
        {
          unint64_t v14 = *(void *)(*v13 + 8) & 0x3FFFFFFFFFFFFFFFLL;
          if (v14 <= *(void *)(a1 + 104))
          {
            if (v14)
            {
              puts("moving from future to future");
              uint64_t v15 = *v13;
              uint64_t v16 = *(void *)(a1 + 152);
              *(void *)(a1 + 152) = v16 + 1;
              *(void *)(a1 + 8 * v16 + 160) = v15;
            }
          }
          else
          {
            ipqpush((uint64_t)v7, *v13);
          }
          ++v13;
          --v11;
        }
        while (v11);
        uint64_t v9 = *(void *)(a1 + 24);
        uint64_t v17 = v9;
      }
      if (v17 != 1) {
        goto LABEL_18;
      }
    }
  }
  while (v9 != 1 || *(void *)(a1 + 152));
  *a2 = *(_DWORD *)(a1 + 76);
  *a3 = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 144) = 1;
}

uint64_t ipqpop(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = v1 - 1;
  if (v1 == 1)
  {
    char v27 = __si_assert_copy_extra(0);
    char v28 = v27;
    uint64_t v29 = "";
    if (v27) {
      uint64_t v29 = v27;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 83, "pqcount_ItemIteratorRef(queue)!=0", v29);
    free(v28);
    if (__valid_fs(-1)) {
      uint64_t v30 = 2989;
    }
    else {
      uint64_t v30 = 3072;
    }
    *(_DWORD *)uint64_t v30 = -559038737;
    abort();
  }
  uint64_t v3 = a1[1];
  uint64_t v4 = *(void *)(*a1 + 8);
  uint64_t v5 = *(void *)(*a1 + 8 * v2);
  *(void *)(*a1 + 8) = v5;
  a1[2] = v2;
  uint64_t v6 = v3 >> 1;
  uint64_t v7 = 3;
  uint64_t v8 = 2;
  uint64_t v9 = 1;
  do
  {
    uint64_t v10 = *a1;
    uint64_t v11 = *(void *)(*a1 + 8 * v8);
    if (v7 >= v1)
    {
      if (v8 >= v1) {
        return v4;
      }
      uint64_t v12 = -1;
    }
    else
    {
      uint64_t v12 = *(void *)(v10 + 8 * v7);
    }
    if (v5 == -1)
    {
      unint64_t v13 = -1;
    }
    else if (v5)
    {
      unint64_t v13 = *(void *)(v5 + 8);
    }
    else
    {
      unint64_t v13 = 0;
    }
    if (v11 == -1)
    {
      unint64_t v14 = -1;
    }
    else if (v11)
    {
      unint64_t v14 = *(void *)(v11 + 8);
    }
    else
    {
      unint64_t v14 = 0;
    }
    if (v12 == -1)
    {
      unint64_t v15 = -1;
    }
    else if (v12)
    {
      unint64_t v15 = *(void *)(v12 + 8);
    }
    else
    {
      unint64_t v15 = 0;
    }
    if (v15 >= v13) {
      uint64_t v16 = v5;
    }
    else {
      uint64_t v16 = v12;
    }
    if (v15 >= v13) {
      uint64_t v17 = v9;
    }
    else {
      uint64_t v17 = v7;
    }
    if (v15 < v14)
    {
      uint64_t v11 = v12;
      uint64_t v8 = v7;
    }
    if (v14 < v13) {
      uint64_t v18 = v11;
    }
    else {
      uint64_t v18 = v16;
    }
    if (v14 < v13) {
      uint64_t v19 = v8;
    }
    else {
      uint64_t v19 = v17;
    }
    _X13 = v10 + 16 * v19;
    __asm { PRFM            #1, [X13] }
    if (v19 == v9) {
      break;
    }
    uint64_t v8 = 2 * v19;
    *(void *)(v10 + 8 * v19) = v5;
    uint64_t v7 = (2 * v19) | 1;
    *(void *)(*a1 + 8 * v9) = v18;
    uint64_t v9 = v19;
  }
  while (v19 < v6);
  return v4;
}

void ipqpush(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v17 = __si_assert_copy_extra(0);
    uint64_t v18 = v17;
    uint64_t v19 = "";
    if (v17) {
      uint64_t v19 = v17;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 88, "item!=0", v19);
    free(v18);
    if (__valid_fs(-1)) {
      uint64_t v20 = 2989;
    }
    else {
      uint64_t v20 = 3072;
    }
    *(_DWORD *)uint64_t v20 = -559038737;
    abort();
  }
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = v5;
  if ((uint64_t)(v5 + 2) >= v4)
  {
    uint64_t v7 = 2 * v4;
    if (v4 < 4) {
      uint64_t v7 = 4;
    }
    *(void *)(a1 + 8) = v7;
    size_t v8 = 8 * v7 + 16;
    if (*(void *)a1) {
      uint64_t v9 = malloc_type_zone_realloc((malloc_zone_t *)queryZone, *(void **)a1, v8, 0xECA6AA46uLL);
    }
    else {
      uint64_t v9 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v8, 0x8DDAA030uLL);
    }
    uint64_t v10 = v9;
    if (!v9) {
      _log_fault_for_malloc_failure();
    }
    *(void *)a1 = v10;
    void *v10 = 0;
    unint64_t v6 = *(void *)(a1 + 16);
  }
  *(void *)(a1 + 16) = v6 + 1;
  *(void *)(*(void *)a1 + 8 * v5) = a2;
  if ((uint64_t)v5 >= 2)
  {
    do
    {
      uint64_t v11 = *(void **)a1;
      unint64_t v12 = *(void *)(*(void *)a1 + 8 * v5);
      unint64_t v13 = v12;
      if (v12 != -1 && v12) {
        unint64_t v13 = *(void *)(v12 + 8);
      }
      unint64_t v14 = v11[v5 >> 1];
      unint64_t v15 = v14;
      if (v14 != -1 && v14) {
        unint64_t v15 = *(void *)(v14 + 8);
      }
      if (v13 > v15) {
        break;
      }
      v11[v5] = v14;
      *(void *)(*(void *)a1 + 8 * (v5 >> 1)) = v12;
      BOOL v16 = v5 > 3;
      v5 >>= 1;
    }
    while (v16);
  }
}

uint64_t CIIndexSetAddSortedIndexes_ArrayBackwards(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  uint64_t result = binarySearchMap(a1, *a2);
  unsigned int v7 = result;
  signed int v8 = *(_DWORD *)(a1 + 16);
  int v9 = *(_DWORD *)(a1 + 32);
  if (v9 == v8)
  {
    int v9 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    uint64_t v10 = *(int *)(a1 + 36);
    if (v10 == result) {
      goto LABEL_5;
    }
    uint64_t v36 = *(void *)(a1 + 40);
    if ((int)v10 >= (int)result)
    {
      uint64_t result = (uint64_t)memmove((void *)(v36 + 4 * (v9 - v8 + result)), (const void *)(v36 + 4 * (int)result), 4 * ((int)v10 - (int)result));
      int v9 = *(_DWORD *)(a1 + 32);
      signed int v8 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      uint64_t result = (uint64_t)memmove((void *)(v36 + 4 * v10), (const void *)(v36 + 4 * (v10 + v9 - v8)), 4 * (result - (v10 + v9 - v8)));
      int v9 = *(_DWORD *)(a1 + 32);
      signed int v8 = *(_DWORD *)(a1 + 16);
      unsigned int v7 = v7 - v9 + v8;
    }
  }
  *(_DWORD *)(a1 + 36) = v7;
LABEL_5:
  unint64_t v11 = v9 - v8 + v7;
  BOOL v14 = v8 < 1;
  signed int v12 = v8 + a3;
  signed int v13 = (__clz(v8) ^ 0x1F) * a3;
  BOOL v14 = v14 || v12 <= v13;
  uint64_t v15 = a3;
  if (v14)
  {
    uint64_t v16 = 0;
    while (1)
    {
      unsigned int v18 = a2[v16];
      if (v18 <= *(_DWORD *)(a1 + 24) && v18 >= *(_DWORD *)(a1 + 20))
      {
        if (v11 >= *(_DWORD *)(a1 + 32)) {
          goto LABEL_11;
        }
        unint64_t v11 = v11;
        while (1)
        {
          uint64_t v19 = *(void *)(a1 + 40);
          unsigned int v20 = *(_DWORD *)(v19 + 4 * v11);
          if (v20 <= v18) {
            break;
          }
          ++v11;
          unsigned int v17 = v7 + 1;
          *(_DWORD *)(v19 + 4 * v7++) = v20;
          if (v11 >= *(unsigned int *)(a1 + 32)) {
            goto LABEL_12;
          }
        }
        if (v20 == v18)
        {
          LODWORD(v11) = v11 + 1;
          *(_DWORD *)(v19 + 4 * v7++) = v18;
        }
        else
        {
LABEL_11:
          unsigned int v17 = v7;
LABEL_12:
          unsigned int v7 = v17 + 1;
          *(_DWORD *)(*(void *)(a1 + 40) + 4 * v17) = v18;
          ++*(_DWORD *)(a1 + 16);
        }
      }
      if (++v16 == a3) {
        goto LABEL_52;
      }
    }
  }
  int v59 = a3;
  uint64_t v21 = 0;
  unsigned int v22 = a2 + 1;
  uint64_t v23 = 1;
  while (1)
  {
    unsigned int v25 = a2[v21];
    if (v25 > *(_DWORD *)(a1 + 24) || v25 < *(_DWORD *)(a1 + 20)) {
      goto LABEL_25;
    }
    uint64_t v26 = *(void *)(a1 + 40);
    unsigned int v27 = *(_DWORD *)(a1 + 32);
    int v28 = v27 - 1;
    LODWORD(v29) = v11;
    if ((int)(v27 - 33) < (int)v11)
    {
LABEL_36:
      uint64_t v29 = (int)v29;
      uint64_t v24 = v28 + 1 > (int)v29 ? v28 + 1 : (int)v29;
      while (v29 <= v28)
      {
        unsigned int v32 = *(_DWORD *)(v26 + 4 * v29++);
        if (v32 <= v25)
        {
          uint64_t v24 = v29 - 1;
          break;
        }
      }
    }
    else
    {
      while (1)
      {
        int v30 = v28 - v29;
        if (v28 < (int)v29) {
          ++v30;
        }
        uint64_t v24 = (v29 + (v30 >> 1));
        unsigned int v31 = *(_DWORD *)(v26 + 4 * (int)v24);
        if (v31 == v25) {
          break;
        }
        if (v31 <= v25) {
          int v28 = v24 - 1;
        }
        else {
          LODWORD(v29) = v24 + 1;
        }
        if ((int)v29 > v28 - 32) {
          goto LABEL_36;
        }
      }
    }
    if (v24 < v27 && v25 == *(_DWORD *)(v26 + 4 * v24)) {
      goto LABEL_25;
    }
    ++*(_DWORD *)(a1 + 16);
    int v33 = v24 - v11;
    if (v24 != v11) {
      break;
    }
    uint64_t v24 = v11;
LABEL_24:
    *(_DWORD *)(v26 + 4 * v7++) = v25;
    unint64_t v11 = v24;
LABEL_25:
    ++v21;
    ++v23;
    ++v22;
    if (v21 == v15) {
      goto LABEL_52;
    }
  }
  uint64_t v34 = (void *)(v26 + 4 * v7);
  uint64_t v35 = (const void *)(v26 + 4 * v11);
  if (v24 != v27)
  {
    uint64_t result = (uint64_t)memmove(v34, v35, 4 * (v24 - v11));
    v7 += v33;
    uint64_t v26 = *(void *)(a1 + 40);
    goto LABEL_24;
  }
  int v37 = v27 - v11;
  uint64_t result = (uint64_t)memmove(v34, v35, 4 * (v27 - v11));
  unsigned int v38 = v37 + v7;
  if ((signed int)(v37 + v7) > *(_DWORD *)(a1 + 16))
  {
    unint64_t v51 = __si_assert_copy_extra_329();
    __message_assert_333((uint64_t)v51, v52, v53, v54, v55, v56, v57, v58, (char)"CIIndexSet.c");
    free(v51);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  unsigned int v7 = v38 + 1;
  *(_DWORD *)(*(void *)(a1 + 40) + 4 * v38) = v25;
  if ((int)v21 + 1 < v59)
  {
    do
    {
      unsigned int v40 = *v22++;
      unsigned int v39 = v40;
      if (v40 <= *(_DWORD *)(a1 + 24) && v39 >= *(_DWORD *)(a1 + 20))
      {
        uint64_t v41 = *(void *)(a1 + 40);
        if (v39 >= *(_DWORD *)(v41 + 4 * (v7 - 1)))
        {
          uint64_t v42 = __si_assert_copy_extra_329();
          __message_assert_333((uint64_t)v42, v43, v44, v45, v46, v47, v48, v49, (char)"CIIndexSet.c");
          free(v42);
          if (__valid_fs(-1)) {
            uint64_t v50 = 2989;
          }
          else {
            uint64_t v50 = 3072;
          }
          *(_DWORD *)uint64_t v50 = -559038737;
          abort();
        }
        *(_DWORD *)(v41 + 4 * v7++) = v39;
        ++*(_DWORD *)(a1 + 16);
      }
      --v15;
    }
    while (v23 != v15);
  }
LABEL_52:
  *(_DWORD *)(a1 + 36) = v7;
  return result;
}

uint64_t PayloadIterate_UpdateSet(uint64_t result, uint64_t a2, uint64_t a3, int8x8_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned __int8 a10)
{
  if (a2)
  {
    float v10 = *(float *)a4.i32;
    uint64_t v13 = a2;
    uint64_t v14 = result;
    unint64_t v15 = a10 | ((unint64_t)a4.u32[0] << 32);
    uint64_t v16 = (unint64_t **)(result + 128);
    do
    {
      if (*(unsigned char *)v13)
      {
        if (*(_DWORD *)(v13 + 4)) {
          int v25 = 1;
        }
        else {
          int v25 = 2;
        }
        uint64_t result = (uint64_t)handleUpdate((void *)v14, *(void *)(v13 + 8), v25, v15);
      }
      else if (!*(void *)(v14 + 136) {
             || (unint64_t v17 = *(unsigned int *)(v13 + 8), **v16 < v17)
      }
             || (uint64_t result = checkAgainstChangeHolder((uint64_t)v16, *(void *)(v14 + 112) + v17), (result & 1) == 0))
      {
        if ((a9 & 1) == 0 && _CIIndexSetRemoveIndex(*(int **)(v14 + 96), *(_DWORD *)(v13 + 8))) {
          --*(_DWORD *)(v14 + 104);
        }
        unsigned int v18 = *(unsigned int **)(v14 + 88);
        unsigned int v19 = *(_DWORD *)(v13 + 8);
        int v26 = -1;
        uint64_t result = _CIIndexSetAddIndex(v18, v19, 0, &v26, a4);
        if (result)
        {
          if (a9)
          {
            unsigned int v20 = *(unsigned int **)(v14 + 96);
            unsigned int v21 = *(_DWORD *)(v13 + 8);
            int v27 = -1;
            uint64_t result = _CIIndexSetAddIndex(v20, v21, 0, &v27, a4);
            if (result) {
              ++*(_DWORD *)(v14 + 104);
            }
          }
        }
        if (a10)
        {
          unsigned int v22 = *(unsigned int **)(v14 + 72);
          if (!v22)
          {
            unsigned int v22 = (unsigned int *)malloc_type_calloc(1uLL, 0x28uLL, 0x10200406E8F4065uLL);
            atomic_store(1u, v22 + 8);
            *(void *)(v14 + 72) = v22;
          }
          uint64_t result = distanceHolderSetMinDistance((uint64_t)v22, *(void *)(v14 + 112) + *(unsigned int *)(v13 + 8), v10);
        }
      }
      unsigned int v23 = *(_DWORD *)v13;
      uint64_t v13 = a3 + 12 * (*(_DWORD *)v13 >> 1);
    }
    while (v23 >= 2 && a3 != 0);
  }
  return result;
}

BOOL _CIIndexSetRemoveIndex(int *cf, unsigned int a2)
{
  if (cf[5] > a2 || cf[6] < a2) {
    return 0;
  }
  if (CFGetTypeID(cf) == __kCIIndexSetInvertedTypeID)
  {
    int v47 = -1;
    int v5 = cf[4];
    if (v5 > -10)
    {
      if (v5 >= -1) {
        unsigned int v8 = cf[8];
      }
      else {
        unsigned int v8 = 4;
      }
      if (v5 < -1) {
        int v5 = -2 - v5;
      }
      if (v8 < v5 + 1) {
        _CIIndexSetMakeSpace((unsigned int *)cf, 1, 0, &v47, 0);
      }
    }
    else
    {
      int v6 = cf[6] - cf[5];
      unsigned int v7 = -9 - v5;
      if (v6 + 1 < v7) {
        unsigned int v7 = v6 + 1;
      }
      cf[4] = -10 - v7;
    }
  }
  CFTypeID v9 = CFGetTypeID(cf);
  int v10 = cf[4];
  if (v9 == __kCIIndexSetInvertedTypeID)
  {
    if (v10)
    {
      int v11 = binarySearchMap((uint64_t)cf, a2);
      int v10 = v11;
      int v12 = cf[4];
      if (v12 && v11 != cf[9] && v11 != cf[8] && *(_DWORD *)(*((void *)cf + 5) + 4 * v11) == a2) {
        return 0;
      }
    }
    else
    {
      int v12 = 0;
    }
    int v17 = cf[8];
    if (v17 != v12)
    {
      uint64_t v18 = cf[9];
      if (v18 == v10)
      {
LABEL_34:
        uint64_t v19 = *((void *)cf + 5);
        if (v10 && *(_DWORD *)(v19 + 4 * v10 - 4) <= a2)
        {
          uint64_t v35 = __si_assert_copy_extra_329();
          __message_assert_333((uint64_t)v35, v36, v37, v38, v39, v40, v41, v42, (char)"CIIndexSet.c");
          free(v35);
          if (__valid_fs(-1)) {
            uint64_t v43 = 2989;
          }
          else {
            uint64_t v43 = 3072;
          }
          *(_DWORD *)uint64_t v43 = -559038737;
          abort();
        }
        *(_DWORD *)(v19 + 4 * v10) = a2;
        ++cf[9];
        int v20 = cf[4] + 1;
        goto LABEL_37;
      }
      uint64_t v27 = *((void *)cf + 5);
      if ((int)v18 >= v10)
      {
        memmove((void *)(v27 + 4 * (v17 - (v12 - v10))), (const void *)(v27 + 4 * v10), 4 * ((int)v18 - v10));
      }
      else
      {
        memmove((void *)(v27 + 4 * v18), (const void *)(v27 + 4 * (v18 + v17 - v12)), 4 * (v10 - (v18 + v17 - v12)));
        int v10 = v10 - cf[8] + cf[4];
      }
    }
    cf[9] = v10;
    goto LABEL_34;
  }
  if (!v10) {
    return 0;
  }
  if (v10 > -10)
  {
    if (v10 < 0)
    {
      if (v10 > 0xFFFFFFFD) {
        return 0;
      }
      unsigned int v28 = cf[8];
      if (v28 < a2) {
        return 0;
      }
      if (v28 == a2)
      {
        uint64_t v29 = 0;
        int v30 = (char *)(cf + 8);
      }
      else
      {
        if (v10 == -3) {
          return 0;
        }
        int v30 = (char *)(cf + 9);
        unsigned int v33 = cf[9];
        if (v33 < a2) {
          return 0;
        }
        if (v33 == a2)
        {
          uint64_t v29 = 1;
        }
        else
        {
          if (v10 == -4) {
            return 0;
          }
          int v30 = (char *)(cf + 10);
          unsigned int v34 = cf[10];
          if (v34 < a2) {
            return 0;
          }
          if (v34 == a2)
          {
            uint64_t v29 = 2;
          }
          else
          {
            if (v10 == -5) {
              return 0;
            }
            int v30 = (char *)(cf + 11);
            unsigned int v44 = cf[11];
            if (v44 < a2) {
              return 0;
            }
            if (v44 == a2)
            {
              uint64_t v29 = 3;
            }
            else
            {
              if (v10 == -6) {
                return 0;
              }
              int v30 = (char *)(cf + 12);
              unsigned int v45 = cf[12];
              if (v45 < a2) {
                return 0;
              }
              if (v45 == a2)
              {
                uint64_t v29 = 4;
              }
              else
              {
                if (v10 == -7) {
                  return 0;
                }
                int v30 = (char *)(cf + 13);
                unsigned int v46 = cf[13];
                if (v46 < a2) {
                  return 0;
                }
                if (v46 == a2)
                {
                  uint64_t v29 = 5;
                }
                else
                {
                  if (v10 == -8) {
                    return 0;
                  }
                  int v30 = (char *)(cf + 14);
                  if (cf[14] != a2) {
                    return 0;
                  }
                  uint64_t v29 = 6;
                }
              }
            }
          }
        }
      }
      if (-3 - v10 > (int)v29) {
        memmove(v30, &cf[v29 + 9], 4 * (~v29 - v10 - 2));
      }
      int v20 = v10 + 1;
LABEL_37:
      cf[4] = v20;
      return 1;
    }
    unsigned int v21 = binarySearchMap((uint64_t)cf, a2);
    uint64_t v22 = cf[9];
    if ((int)v22 <= (int)v21)
    {
      BOOL result = 0;
      unsigned int v23 = cf[8];
      if (v21 >= v23 || v21 < v23 + v22 - cf[4]) {
        return result;
      }
    }
    uint64_t v24 = *((void *)cf + 5);
    if (*(_DWORD *)(v24 + 4 * v21) == a2)
    {
      int v25 = cf[8];
      int v26 = cf[4];
      if (v22 <= v21)
      {
        unsigned int v31 = v25 - v26 + v22;
        unsigned int v32 = v21 - v31;
        if (v21 <= v31)
        {
LABEL_58:
          int v20 = v26 - 1;
          goto LABEL_37;
        }
        memmove((void *)(v24 + 4 * v22), (const void *)(v24 + 4 * v31), 4 * (v21 - v31));
        unsigned int v21 = cf[9] + v32;
      }
      else
      {
        memmove((void *)(v24 + 4 * (v25 - (v26 - v21) + 1)), (const void *)(v24 + 4 * (v21 + 1)), 4 * (v22 - v21 - 1));
      }
      cf[9] = v21;
      int v26 = cf[4];
      goto LABEL_58;
    }
    return 0;
  }
  unsigned int v13 = cf[6] - a2;
  uint64_t v14 = v13 >> 5;
  int v15 = 1 << v13;
  uint64_t v16 = *((void *)cf + 5);
  BOOL result = (v15 & *(_DWORD *)(v16 + 4 * v14)) != 0;
  if ((v15 & *(_DWORD *)(v16 + 4 * v14)) != 0)
  {
    cf[4] = v10 + 1;
    if (v10 >= 0xFFFFFFF6) {
      cf[4] = -10;
    }
  }
  *(_DWORD *)(v16 + 4 * v14) &= ~v15;
  return result;
}

uint64_t unpackPostingChunk(uint64_t a1, unint64_t *a2, unint64_t a3, unsigned int a4, uint64_t a5, void (*a6)(uint64_t, void, uint64_t, void, void, uint64_t), uint64_t a7)
{
  unint64_t v9 = *a2;
  if (*a2 >= a3)
  {
    unint64_t v15 = 0;
LABEL_110:
    os_log_type_t v63 = __si_assert_copy_extra_329();
    unsigned int v64 = v63;
    uint64_t v65 = "";
    if (v63) {
      uint64_t v65 = v63;
    }
    __message_assert("%s:%u: failed assertion '%s' %s Offset past bounds; incoming %ld, current %ld, buffer length %ld, val %llu from %d",
      "PostingChunk.c",
      90,
      "offset < bufferLength",
      v65,
      *a2,
      v9,
      a3,
      v15,
      923);
    goto LABEL_113;
  }
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  while (1)
  {
    unint64_t v16 = v9 + 1;
    v15 |= (unint64_t)(*(unsigned char *)(a1 + v9) & 0x7F) << v14;
    if ((*(unsigned char *)(a1 + v9) & 0x80) == 0 || v14 == 63) {
      break;
    }
    v14 += 7;
    ++v9;
    if (a3 == v16)
    {
      unint64_t v9 = a3;
      goto LABEL_110;
    }
  }
  *a2 = v16;
  if (!v15) {
    return 0;
  }
  if (v16 >= a3)
  {
    unint64_t v18 = 0;
LABEL_115:
    uint64_t v66 = __si_assert_copy_extra_329();
    uint64_t v67 = v66;
    unint64_t v68 = "";
    if (v66) {
      unint64_t v68 = v66;
    }
    __message_assert("%s:%u: failed assertion '%s' %s Offset past bounds; incoming %ld, current %ld, buffer length %ld, val %llu from %d",
      "PostingChunk.c",
      90,
      "offset < bufferLength",
      v68,
      *a2,
      v16,
      a3,
      v18,
      929);
    goto LABEL_118;
  }
  uint64_t v17 = 0;
  unint64_t v18 = 0;
  while (1)
  {
    v18 |= (unint64_t)(*(unsigned char *)(a1 + v9 + 1) & 0x7F) << v17;
    if ((*(unsigned char *)(a1 + v9 + 1) & 0x80) == 0 || v17 == 63) {
      break;
    }
    v17 += 7;
    if (a3 - 1 == ++v9)
    {
      unint64_t v16 = a3;
      goto LABEL_115;
    }
  }
  unint64_t v19 = v9 + 2;
  *a2 = v9 + 2;
  uint64_t v20 = a3 - v9 - 2;
  if (v15 > v18)
  {
    uint64_t v21 = 1;
    a6(a7, v15, 1, 0, 0, a5);
    if (v18)
    {
      unsigned int v22 = v15;
      while (1)
      {
        while (1)
        {
          if (v22 <= v18) {
            goto LABEL_97;
          }
          if (v22 - v18 >= a4) {
            goto LABEL_103;
          }
          uint64_t v21 = ((uint64_t (*)(uint64_t, void, uint64_t, void, void, uint64_t))a6)(a7, v22 - v18, 1, 0, 0, a5);
          if (!v21) {
            return v21;
          }
          v22 -= v18;
          unint64_t v23 = *a2;
          if (*a2 + 5 <= a3) {
            break;
          }
          LODWORD(v18) = _protectedReadVInt32(a1, a2, a3);
          if (!v18) {
            return v21;
          }
        }
        unint64_t v24 = v23 + 1;
        LODWORD(v18) = *(unsigned __int8 *)(a1 + v23);
        if (*(char *)(a1 + v23) < 0)
        {
          uint64_t v25 = v23 + 2;
          int v26 = *(char *)(a1 + v24);
          int v27 = *(unsigned __int8 *)(a1 + v24);
          if (v26 < 0)
          {
            int v28 = *(char *)(a1 + v25);
            int v29 = v28;
            if (v28 < 0)
            {
              uint64_t v25 = v23 + 4;
              int v30 = *(char *)(a1 + v23 + 3);
              int v31 = *(unsigned __int8 *)(a1 + v23 + 3);
              if (v30 < 0)
              {
                int v32 = *(char *)(a1 + v25);
                if (v32 < 0)
                {
                  uint64_t v62 = __si_assert_copy_extra_329();
                  __message_assert("%s:%u: failed assertion '%s' %s readVInt32: exceeds max size for uint32_t");
LABEL_104:
                  free(v62);
                  if (__valid_fs(-1))
                  {
                    MEMORY[0xBAD] = -559038737;
                    abort();
                  }
                  MEMORY[0xC00] = -559038737;
                  abort();
                }
                int v33 = ((v31 & 0x7F) << 21) | (v32 << 28) | ((v29 & 0x7F) << 14) | ((v27 & 0x7F) << 7) | v18 & 0x7F;
                uint64_t v25 = *a2 + 5;
                LODWORD(v18) = v33;
              }
              else
              {
                LODWORD(v18) = ((v29 & 0x7F) << 14) | (v31 << 21) | ((v27 & 0x7F) << 7) | v18 & 0x7F;
              }
            }
            else
            {
              uint64_t v25 = v23 + 3;
              LODWORD(v18) = ((v27 & 0x7F) << 7) | (v29 << 14) | v18 & 0x7F;
            }
          }
          else
          {
            LODWORD(v18) = v18 & 0x7F | (v27 << 7);
          }
        }
        else
        {
          uint64_t v25 = v23 + 1;
        }
        *a2 = v25;
        if (!v18) {
          return v21;
        }
      }
    }
    return v21;
  }
  if (v15 >= v18)
  {
    if (v15 != v18) {
      return 0;
    }
    if (v19 < a3)
    {
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      unint64_t v37 = v9 + 3;
      uint64_t v38 = (char *)(a1 + v9 + 2);
      while (1)
      {
        char v39 = *v38++;
        v36 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0 || v35 == 63) {
          break;
        }
        v35 += 7;
        ++v37;
        if (!--v20)
        {
          unint64_t v19 = a3;
          goto LABEL_129;
        }
      }
      *a2 = v37;
      if (v36 <= 1) {
        uint64_t v40 = 1;
      }
      else {
        uint64_t v40 = v36;
      }
      if (!v36) {
        return ((unsigned int (*)(uint64_t, unint64_t, uint64_t, void, uint64_t, uint64_t))a6)(a7, v15, 1, 0, v40, a5) != 0;
      }
      while (1)
      {
        if (!((unsigned int (*)(uint64_t, unint64_t, uint64_t, void, uint64_t, uint64_t))a6)(a7, v15, 1, 0, v40, a5))return 0; {
        unint64_t v41 = *a2;
        }
        if (*a2 >= a3) {
          break;
        }
        uint64_t v42 = 0;
        uint64_t v43 = 0;
        while (1)
        {
          char v44 = *(unsigned char *)(a1 + v41++);
          v43 |= (unint64_t)(v44 & 0x7F) << v42;
          if ((v44 & 0x80) == 0 || v42 == 63) {
            break;
          }
          v42 += 7;
          if (a3 == v41)
          {
            unint64_t v41 = a3;
            goto LABEL_135;
          }
        }
        *a2 = v41;
        v15 -= v43;
        if (!v43) {
          return 1;
        }
      }
      uint64_t v43 = 0;
LABEL_135:
      uint64_t v74 = __si_assert_copy_extra_329();
      uint64_t v67 = v74;
      size_t v75 = "";
      if (v74) {
        size_t v75 = v74;
      }
      __message_assert("%s:%u: failed assertion '%s' %s Offset past bounds; incoming %ld, current %ld, buffer length %ld, val %llu from %d",
        "PostingChunk.c",
        90,
        "offset < bufferLength",
        v75,
        *a2,
        v41,
        a3,
        v43,
        912);
LABEL_118:
      free(v67);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    uint64_t v36 = 0;
LABEL_129:
    uint64_t v72 = __si_assert_copy_extra_329();
    unsigned int v64 = v72;
    uint64_t v73 = "";
    if (v72) {
      uint64_t v73 = v72;
    }
    __message_assert("%s:%u: failed assertion '%s' %s Offset past bounds; incoming %ld, current %ld, buffer length %ld, val %llu from %d",
      "PostingChunk.c",
      90,
      "offset < bufferLength",
      v73,
      *a2,
      v19,
      a3,
      v36,
      899);
LABEL_113:
    uint64_t v60 = v64;
LABEL_99:
    free(v60);
    if (__valid_fs(-1)) {
      uint64_t v61 = 2989;
    }
    else {
      uint64_t v61 = 3072;
    }
    *(_DWORD *)uint64_t v61 = -559038737;
    abort();
  }
  if (*(unsigned char *)(a1 + v19))
  {
    if (v15 < a4)
    {
      if (v18 <= a4)
      {
        unint64_t v34 = v19 + ((v18 - v15 + 7) >> 3);
        if (v34 > a3)
        {
          unint64_t v69 = __si_assert_copy_extra_329();
          uint64_t v70 = v69;
          __n128 v71 = "";
          if (v69) {
            __n128 v71 = v69;
          }
          __message_assert("%s:%u: failed assertion '%s' %s %ld, %ld", "PostingChunk.c", 843, "newOffset <= bufferLength", v71, v34, a3);
          free(v70);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        if (((unsigned int (*)(uint64_t, void))a6)(a7, v15))
        {
          *a2 = v34;
          return 1;
        }
        return 0;
      }
LABEL_103:
      uint64_t v62 = __si_assert_copy_extra_329();
      __message_assert("%s:%u: failed assertion '%s' %s %d, %d");
      goto LABEL_104;
    }
LABEL_97:
    unsigned int v45 = __si_assert_copy_extra_329();
    __message_assert("%s:%u: failed assertion '%s' %s %d, %d");
    goto LABEL_98;
  }
  if (v9 + 7 > a3)
  {
    if (!_protectedReadVInt32(a1, a2, a3)) {
      goto LABEL_66;
    }
    unsigned int v45 = __si_assert_copy_extra_329();
    __message_assert("%s:%u: failed assertion '%s' %s %d");
    goto LABEL_98;
  }
  *a2 = v9 + 3;
  do
  {
    while (1)
    {
LABEL_66:
      unint64_t v46 = *a2;
      unint64_t v47 = *a2 + 5;
      if (v47 > a3)
      {
        unsigned int VInt32 = _protectedReadVInt32(a1, a2, a3);
        unsigned int v49 = v18 - VInt32;
        if (v18 < VInt32) {
          goto LABEL_97;
        }
        goto LABEL_78;
      }
      unint64_t v50 = v46 + 1;
      unsigned int VInt32 = *(unsigned __int8 *)(a1 + v46);
      if ((*(char *)(a1 + v46) & 0x80000000) == 0)
      {
        *a2 = v50;
        unsigned int v49 = v18 - VInt32;
        if (v18 < VInt32) {
          goto LABEL_97;
        }
        goto LABEL_78;
      }
      unint64_t v51 = v46 + 2;
      int v52 = *(char *)(a1 + v50);
      int v53 = *(unsigned __int8 *)(a1 + v50);
      if ((v52 & 0x80000000) == 0)
      {
        unsigned int VInt32 = VInt32 & 0x7F | (v53 << 7);
        goto LABEL_74;
      }
      unint64_t v54 = v46 + 3;
      int v55 = *(char *)(a1 + v51);
      char v56 = v55;
      if (v55 < 0)
      {
        unint64_t v51 = v46 + 4;
        int v57 = *(char *)(a1 + v54);
        if ((v57 & 0x80000000) == 0)
        {
          unsigned int VInt32 = ((v56 & 0x7F) << 14) | (v57 << 21) | ((v53 & 0x7F) << 7) | VInt32 & 0x7F;
LABEL_74:
          *a2 = v51;
          unsigned int v49 = v18 - VInt32;
          if (v18 < VInt32) {
            goto LABEL_97;
          }
          goto LABEL_78;
        }
        int v58 = *(char *)(a1 + v51);
        if (v58 < 0)
        {
          unsigned int v45 = __si_assert_copy_extra_329();
          __message_assert("%s:%u: failed assertion '%s' %s readVInt32: exceeds max size for uint32_t");
LABEL_98:
          uint64_t v60 = v45;
          goto LABEL_99;
        }
        unsigned int VInt32 = ((v57 & 0x7F) << 21) | (v58 << 28) | ((v56 & 0x7F) << 14) | ((v53 & 0x7F) << 7) | VInt32 & 0x7F;
        *a2 = v47;
        unsigned int v49 = v18 - VInt32;
        if (v18 < VInt32) {
          goto LABEL_97;
        }
      }
      else
      {
        unsigned int VInt32 = ((v53 & 0x7F) << 7) | (v55 << 14) | VInt32 & 0x7F;
        *a2 = v54;
        unsigned int v49 = v18 - VInt32;
        if (v18 < VInt32) {
          goto LABEL_97;
        }
      }
LABEL_78:
      if (v49 < v15) {
        goto LABEL_97;
      }
      if (VInt32 < 2) {
        break;
      }
      if (v49 + 1 >= a4) {
        goto LABEL_103;
      }
      LODWORD(v18) = v49;
      if ((((uint64_t (*)(uint64_t))a6)(a7) & 1) == 0) {
        return 0;
      }
    }
    LODWORD(v18) = v49;
  }
  while (VInt32);
  if (v15 >= a4 || v49 > a4) {
    goto LABEL_103;
  }
  return ((uint64_t (*)(uint64_t, void, void, void, void, uint64_t))a6)(a7, v15, v49 - v15, 0, 0, a5);
}

uint64_t PayloadProcessDocIDRangeBitsReversed(uint64_t a1, unint64_t a2, unsigned int a3, uint8_t *a4, int a5, uint64_t a6)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *(void *)(a1 + 8);
  int v13 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v14 = (int *)(a1 + 20);
  unint64_t v15 = (int *)&unk_1E9FC9000;
  if (dword_1E9FC90CC < 5)
  {
    if (!a5) {
      goto LABEL_3;
    }
LABEL_35:
    if (a3 == 1)
    {
      if (!a4)
      {
        handleUpdate((void *)v11, a2, a5, a6);
        return 1;
      }
      unint64_t v51 = __si_assert_copy_extra(0);
      char v44 = v51;
      int v52 = "";
      if (v51) {
        int v52 = v51;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 551, "bits == ((void *)0)", v52);
    }
    else
    {
      unsigned int v49 = __si_assert_copy_extra(0);
      char v44 = v49;
      unint64_t v50 = "";
      if (v49) {
        unint64_t v50 = v49;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 550, "range.length == 1", v50);
    }
LABEL_52:
    free(v44);
    if (__valid_fs(-1)) {
      uint64_t v46 = 2989;
    }
    else {
      uint64_t v46 = 3072;
    }
    *(_DWORD *)uint64_t v46 = -559038737;
    abort();
  }
  int v58 = *__error();
  int v28 = _SILogForLogForCategory(10);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    int v29 = *v14;
    uint64_t v30 = *(void *)(v11 + 88);
    *(_DWORD *)long long buf = 134219008;
    *(void *)&uint8_t buf[4] = a2;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a3;
    *(_WORD *)&buf[18] = 2048;
    *(void *)&buf[20] = a4;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = v29;
    *(_WORD *)&buf[34] = 2048;
    *(void *)&buf[36] = v30;
    _os_log_impl(&dword_1BD672000, v28, OS_LOG_TYPE_DEFAULT, "range: %llu %u (%p) hint:%d docSet:%p", buf, 0x2Cu);
  }
  *__error() = v58;
  unint64_t v15 = (_DWORD *)&unk_1E9FC9000;
  if (a5) {
    goto LABEL_35;
  }
LABEL_3:
  uint64_t v60 = v14;
  if ((a6 & 1) == 0)
  {
    uint64_t v16 = a3;
    goto LABEL_17;
  }
  if (!a2)
  {
    uint64_t v43 = __si_assert_copy_extra(0);
    char v44 = v43;
    unsigned int v45 = "";
    if (v43) {
      unsigned int v45 = v43;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 389, "range.location > 0", v45);
    goto LABEL_52;
  }
  uint64_t v16 = a3;
  if (a4)
  {
    if (!a3) {
      goto LABEL_17;
    }
    int v57 = v13;
    uint64_t v17 = v15;
    unsigned int v18 = 0;
    uint64_t v19 = a3;
    uint64_t v20 = a3;
    do
    {
      if ((a4[v18 >> 3] >> (v18 & 7))) {
        distanceHolderSetMinDistance(*(void *)(v11 + 72), *(void *)(v11 + 112) + (a2 - 1 + v20), *((float *)&a6 + 1));
      }
      ++v18;
      --v20;
    }
    while (v20);
    unint64_t v15 = v17;
    int v13 = v57;
  }
  else
  {
    if (!a3) {
      goto LABEL_17;
    }
    uint64_t v19 = a3;
    uint64_t v21 = a3;
    do
      distanceHolderSetMinDistance(*(void *)(v11 + 72), *(void *)(v11 + 112) + (a2 - 1 + v21--), *((float *)&a6 + 1));
    while (v21);
  }
  uint64_t v16 = v19;
LABEL_17:
  unsigned int v22 = a2 + a3 - 1;
  if (*(_DWORD *)(v12 + 40) >= v22)
  {
    if (a2 < *(unsigned int *)(v12 + 44)) {
      *(_DWORD *)(v12 + 44) = a2;
    }
  }
  else
  {
    *(_DWORD *)(v12 + 40) = a3 + a2 - 1;
  }
  int8x8_t v23 = 0;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v66 = 0u;
  memset(buf, 0, sizeof(buf));
  uint64_t v24 = *(void *)(v11 + 136);
  if (!v24) {
    goto LABEL_22;
  }
  uint64_t v31 = v16;
  int v32 = *(unint64_t **)(v11 + 128);
  if (!*(void *)(v11 + 152)) {
    v32 += 2 * (*(void *)(v11 + 144) - v24);
  }
  unint64_t v33 = *(void *)(v11 + 112) + a2;
  unint64_t v34 = *v32;
  if (v15[51] >= 5)
  {
    int v59 = v13;
    int v56 = *__error();
    int v53 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t v61 = 134218240;
      unint64_t v62 = v33;
      __int16 v63 = 2048;
      unint64_t v64 = v34;
      _os_log_impl(&dword_1BD672000, v53, OS_LOG_TYPE_DEFAULT, "rMin:%lld, uMax:%lld, ", v61, 0x16u);
    }
    int v13 = v59;
    *__error() = v56;
  }
  if (v34 < v33) {
    goto LABEL_22;
  }
  uint64_t v35 = v15;
  uint64_t v36 = *(void *)(v11 + 152);
  if (v36 != *(void *)(v11 + 136)) {
    uint64_t v36 = *(void *)(v11 + 144);
  }
  unint64_t v37 = a2 + v31 + *(void *)(v11 + 112) - 1;
  unint64_t v38 = *(void *)(*(void *)(v11 + 128) + 16 * v36 - 16);
  if (v35[51] >= 5)
  {
    int v54 = *__error();
    int v55 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t v61 = 134218240;
      unint64_t v62 = v37;
      __int16 v63 = 2048;
      unint64_t v64 = v38;
      _os_log_impl(&dword_1BD672000, v55, OS_LOG_TYPE_DEFAULT, "rMax:%lld, uMin:%lld, ", v61, 0x16u);
    }
    *__error() = v54;
  }
  if (v38 <= v37)
  {
    uint64_t v39 = (a3 + 7) >> 3;
    BOOL v25 = v39 > 0xFB;
    if (v39 <= 0xFB)
    {
      uint64_t v42 = buf;
      if (a4) {
        __memcpy_chk();
      }
      else {
        __memset_chk();
      }
    }
    else
    {
      size_t v40 = (a3 + 7) >> 3;
      unint64_t v41 = (uint8_t *)malloc_type_malloc(v39 + 4, 0x126138F1uLL);
      uint64_t v42 = v41;
      if (a4) {
        memcpy(v41, a4, v40);
      }
      else {
        memset(v41, 255, v40);
      }
    }
    checkAgainstUpdatesBulkReversed(v11, a2, a3, (uint64_t)v42);
    a4 = v42;
    if (!v13)
    {
LABEL_61:
      if (*(_DWORD *)(v11 + 104)
        && lockedCountItemsInRange(*(_DWORD **)(v11 + 96), a2, a3 - 1 + a2, v23)
        && a3)
      {
        unsigned int v47 = 0;
        do
        {
          if (!a4 || ((a4[(unint64_t)v47 >> 3] >> (v47 & 7)))
            && _CIIndexSetRemoveIndex(*(int **)(v11 + 96), v22))
          {
            --*(_DWORD *)(v11 + 104);
          }
          ++v47;
          --v22;
        }
        while (a3 != v47);
      }
      goto LABEL_70;
    }
  }
  else
  {
LABEL_22:
    BOOL v25 = 0;
    if (!v13) {
      goto LABEL_61;
    }
  }
  if (a3)
  {
    unsigned int v26 = 0;
    do
    {
      if (!a4 || ((a4[(unint64_t)v26 >> 3] >> (v26 & 7)))
        && (CIIndexSetHasIndex(*(void *)(v11 + 88), v22) & 1) == 0)
      {
        int v27 = *(unsigned int **)(v11 + 96);
        *(_DWORD *)uint64_t v61 = -1;
        if (_CIIndexSetAddIndex(v27, v22, 0, v61, v23)) {
          ++*(_DWORD *)(v11 + 104);
        }
      }
      ++v26;
      --v22;
    }
    while (a3 != v26);
  }
LABEL_70:
  CIIndexSetAddRangeFromBitVectorWithHint(*(unsigned int **)(v11 + 88), a2, a3, (uint64_t)a4, v60, v23);
  if (v25) {
    free(a4);
  }
  return 1;
}

BOOL _CIIndexSetAddIndex(unsigned int *cf, unsigned int a2, void *a3, _DWORD *a4, int8x8_t a5)
{
  if (cf[5] > a2 || cf[6] < a2) {
    return 0;
  }
  int v8 = cf[4];
  if (v8 < -9) {
    goto LABEL_4;
  }
  BOOL v14 = 0;
  unsigned int v18 = cf + 8;
  while (1)
  {
    if (v8 < 0)
    {
      if (v8 > 0xFFFFFFFD)
      {
        uint64_t v20 = 0;
LABEL_41:
        cf[4] = v8 - 1;
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v20 = (-2 - v8);
        while (1)
        {
          unsigned int v21 = cf[v19 + 8];
          if (v21 < a2) {
            break;
          }
          if (v21 == a2) {
            return 0;
          }
          if (v20 == ++v19)
          {
            if (v8 != -6) {
              goto LABEL_41;
            }
            goto LABEL_20;
          }
        }
        if (v8 == -6)
        {
LABEL_20:
          _CIIndexSetMakeSpace(cf, 1, 0, a4, 0);
          int v8 = cf[4];
          goto LABEL_21;
        }
        cf[4] = v8 - 1;
        uint64_t v28 = v19;
        memmove(&v18[(v19 + 1)], &v18[v19], 4 * ((int)v20 - (int)v19));
        uint64_t v20 = v28;
      }
      v18[v20] = a2;
      return 1;
    }
    CFTypeID v22 = CFGetTypeID(cf);
    unsigned int v23 = cf[4];
    if (v22 == __kCIIndexSetInvertedTypeID)
    {
      if (v23)
      {
        unsigned int v29 = binarySearchMap((uint64_t)cf, a2);
        unsigned int v30 = v29;
        uint64_t v31 = (int)cf[9];
        if ((int)v31 <= (int)v29)
        {
          BOOL v14 = 0;
          unsigned int v32 = cf[8];
          if (v29 >= v32 || v29 < v32 + v31 - cf[4]) {
            return v14;
          }
        }
        uint64_t v33 = *((void *)cf + 5);
        if (*(_DWORD *)(v33 + 4 * v29) == a2)
        {
          unsigned int v34 = cf[8];
          unsigned int v35 = cf[4];
          if (v31 <= v29)
          {
            unsigned int v41 = v34 - v35 + v31;
            unsigned int v42 = v29 - v41;
            if (v29 <= v41)
            {
LABEL_67:
              cf[4] = v35 - 1;
              return 1;
            }
            memmove((void *)(v33 + 4 * v31), (const void *)(v33 + 4 * v41), 4 * (v29 - v41));
            unsigned int v30 = cf[9] + v42;
          }
          else
          {
            memmove((void *)(v33 + 4 * (v34 - (v35 - v29) + 1)), (const void *)(v33 + 4 * (v29 + 1)), 4 * (v31 - v29 - 1));
          }
          cf[9] = v30;
          unsigned int v35 = cf[4];
          goto LABEL_67;
        }
      }
      return 0;
    }
    int v24 = v23 ? searchMapWithHint((uint64_t)cf, a2, a4, 1) : 0;
    uint64_t v25 = (int)cf[9];
    if (v24 == v25)
    {
      int v8 = cf[4];
      unsigned int v26 = cf[8];
      if (v8 < v26) {
        goto LABEL_61;
      }
    }
    else
    {
      unsigned int v26 = *v18;
      if (v24 != *v18 && *(_DWORD *)(*((void *)cf + 5) + 4 * v24) == a2) {
        return v14;
      }
      int v8 = cf[4];
      if (v26 > v8)
      {
        uint64_t v39 = *((void *)cf + 5);
        if ((int)v25 >= v24)
        {
          memmove((void *)(v39 + 4 * (v24 - v8 + v26)), (const void *)(v39 + 4 * v24), 4 * ((int)v25 - v24));
        }
        else
        {
          memmove((void *)(v39 + 4 * v25), (const void *)(v39 + 4 * (v26 - v8 + v25)), 4 * (v24 - (v26 - v8 + v25)));
          int v24 = v24 - cf[8] + cf[4];
        }
        cf[9] = v24;
LABEL_61:
        uint64_t v40 = *((void *)cf + 5);
        if (v24 && *(_DWORD *)(v40 + 4 * v24 - 4) <= a2)
        {
          uint64_t v43 = __si_assert_copy_extra_329();
          __message_assert_333((uint64_t)v43, v44, v45, v46, v47, v48, v49, v50, (char)"CIIndexSet.c");
          free(v43);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        *(_DWORD *)(v40 + 4 * v24) = a2;
        ++cf[9];
        ++cf[4];
        return 1;
      }
    }
    if (v8 <= -10) {
      break;
    }
    int v27 = -2 - v8;
    if (v8 >= -1) {
      int v27 = v8;
    }
    else {
      unsigned int v26 = 4;
    }
    if (v26 < v27 + 1)
    {
      _CIIndexSetMakeSpace(cf, 1, a3, a4, 0);
      int v8 = cf[4];
    }
    BOOL v14 = 1;
LABEL_21:
    if (v8 < -9) {
      goto LABEL_4;
    }
  }
  int v37 = cf[6] - cf[5];
  unsigned int v38 = -9 - v8;
  if (v37 + 1 < v38) {
    unsigned int v38 = v37 + 1;
  }
  cf[4] = -10 - v38;
LABEL_4:
  unsigned int v9 = cf[6] - a2;
  uint64_t v10 = *((void *)cf + 5);
  uint64_t v11 = 4 * (v9 >> 5);
  int v12 = *(_DWORD *)(v10 + v11);
  int v13 = 1 << v9;
  BOOL v14 = (v13 & v12) == 0;
  *(_DWORD *)(v10 + v11) = v13 | v12;
  if ((v13 & v12) == 0)
  {
    int v15 = cf[6] - cf[5];
    if (v15 + 1 < -9 - cf[4]) {
      int v16 = v15 + 1;
    }
    else {
      int v16 = -9 - cf[4];
    }
    cf[4] = -10 - v16;
  }
  _CIIndexSetConvertIfInvertedArrayIsMoreEfficient(cf, a3, a5);
  return v14;
}

_DWORD *_CIIndexSetConvertIfInvertedArrayIsMoreEfficient(_DWORD *result, void *a2, int8x8_t a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = result[5];
  unsigned int v5 = result[6];
  unsigned int v6 = v5 - v4;
  int v7 = v5 - v4 + 1;
  unsigned int v8 = (v5 - v4 + 48) / 0x30;
  if (result[4] + v7 + 10 < v8)
  {
    uint64_t v9 = (uint64_t)result;
    BOOL result = (_DWORD *)lockedCountItemsInRange(result, v4, v5, a3);
    *(_DWORD *)(v9 + 16) = -10 - result;
    unsigned int v10 = v7 - result;
    if (v10 < v8)
    {
      *(_DWORD *)(v9 + 16) = -10 - v10;
      unsigned int v11 = *(_DWORD *)(v9 + 32);
      BOOL v13 = v11 >= v10 && v11 < 2 * v10;
      if (v13)
      {
        if (v10 <= 0x1FF)
        {
          MEMORY[0x1F4188790]();
          int v15 = (char *)v33 - v14;
          bzero((char *)v33 - v14, v16);
          uint64_t v17 = 0;
          goto LABEL_14;
        }
      }
      else
      {
        unsigned int v18 = (v6 - result) | ((v6 - result) >> 1) | (((v6 - result) | ((v6 - result) >> 1)) >> 2);
        unsigned int v19 = v18 | (v18 >> 4) | ((v18 | (v18 >> 4)) >> 8);
        unsigned int v10 = (v19 | HIWORD(v19)) + 1;
      }
      uint64_t v17 = (char *)blob_malloc(v10, a2);
      int v15 = v17;
LABEL_14:
      unsigned int v21 = *(_DWORD *)(v9 + 20);
      unsigned int v20 = *(_DWORD *)(v9 + 24);
      uint64_t v22 = (v20 - v21) >> 5;
      if (v20 - v21 >= 0x20)
      {
        uint64_t v23 = 0;
        if (v22 <= 1) {
          unsigned int v24 = 1;
        }
        else {
          unsigned int v24 = v22;
        }
        uint64_t v25 = 4 * v24;
        do
        {
          *(_DWORD *)(*(void *)(v9 + 40) + v23) = ~*(_DWORD *)(*(void *)(v9 + 40) + v23);
          v23 += 4;
        }
        while (v25 != v23);
        unsigned int v21 = *(_DWORD *)(v9 + 20);
        unsigned int v20 = *(_DWORD *)(v9 + 24);
      }
      if (v21 <= v20)
      {
        int v26 = -v21;
        do
        {
          if (v22 != (v20 + v26) >> 5) {
            break;
          }
          *(_DWORD *)(*(void *)(v9 + 40) + 4 * v22) ^= 1 << (v20 + v26);
          ++v21;
          unsigned int v20 = *(_DWORD *)(v9 + 24);
          --v26;
        }
        while (v21 <= v20);
        unsigned int v21 = *(_DWORD *)(v9 + 20);
      }
      v33[0] = v20;
      v33[1] = v21;
      uint64_t v34 = 0;
      uint64_t v35 = v9;
      int v27 = *(_DWORD *)(v9 + 16);
      if (v27 >= 1)
      {
        int v28 = binarySearchMap(v9, v20);
        LODWORD(v34) = v28;
        if (v28 != *(_DWORD *)(v9 + 36)) {
          goto LABEL_53;
        }
        int v29 = *(_DWORD *)(v9 + 32) + v28 - *(_DWORD *)(v9 + 16);
        goto LABEL_52;
      }
      if (v27 < 0xFFFFFFF7) {
        goto LABEL_53;
      }
      if (v27 <= 0xFFFFFFFD)
      {
        if (v20 >= *(_DWORD *)(v9 + 32))
        {
          int v29 = 0;
          goto LABEL_52;
        }
        if (v27 != -3)
        {
          if (v20 >= *(_DWORD *)(v9 + 36))
          {
            int v29 = 1;
            goto LABEL_52;
          }
          if (v27 != -4)
          {
            if (v20 >= *(_DWORD *)(v9 + 40))
            {
              int v29 = 2;
              goto LABEL_52;
            }
            if (v27 != -5)
            {
              if (v20 >= *(_DWORD *)(v9 + 44))
              {
                int v29 = 3;
                goto LABEL_52;
              }
              if (v27 != -6)
              {
                if (v20 >= *(_DWORD *)(v9 + 48))
                {
                  int v29 = 4;
                  goto LABEL_52;
                }
                if (v27 != -7)
                {
                  if (v20 >= *(_DWORD *)(v9 + 52))
                  {
                    int v29 = 5;
                    goto LABEL_52;
                  }
                  if (v27 != -8 && v20 >= *(_DWORD *)(v9 + 56))
                  {
                    int v29 = 6;
                    goto LABEL_52;
                  }
                }
              }
            }
          }
        }
      }
      int v29 = -2 - v27;
LABEL_52:
      LODWORD(v34) = v29;
LABEL_53:
      int v30 = _CIIndexSetEnumeratorNext(v33);
      if (v30)
      {
        int v31 = 0;
        do
        {
          int v32 = v31 + 1;
          *(_DWORD *)&v15[4 * v31] = v30;
          int v30 = _CIIndexSetEnumeratorNext(v33);
          int v31 = v32;
        }
        while (v30);
        if (v13) {
          goto LABEL_57;
        }
      }
      else
      {
        int v32 = 0;
        if (v13)
        {
LABEL_57:
          *(_DWORD *)(v9 + 16) = 0;
          *(_DWORD *)(v9 + 36) = 0;
          _CIIndexSetAddSortedIndexes((CFTypeRef)v9);
          if (v17) {
            blob_free(v17, v10, a2);
          }
          return (_DWORD *)_CFRuntimeSetInstanceTypeID();
        }
      }
      blob_free(*(void **)(v9 + 40), *(_DWORD *)(v9 + 32), a2);
      *(void *)(v9 + 40) = v15;
      *(_DWORD *)(v9 + 16) = v32;
      *(_DWORD *)(v9 + 32) = v10;
      *(_DWORD *)(v9 + 36) = v32;
      return (_DWORD *)_CFRuntimeSetInstanceTypeID();
    }
  }
  return result;
}

unsigned int *CIIndexSetAddRangeFromBitVectorWithHint(unsigned int *cf, unint64_t a2, int a3, uint64_t a4, int *a5, int8x8_t a6)
{
  unint64_t v6 = cf[6];
  if (a2 <= v6 && a3 != 0)
  {
    uint64_t v9 = cf;
    unint64_t v10 = cf[5];
    int v11 = a2 - v10;
    if (a2 <= v10) {
      unint64_t v12 = cf[5];
    }
    else {
      unint64_t v12 = a2;
    }
    unint64_t v13 = (v10 - a2) >> 3;
    if (v10 <= a2)
    {
      unint64_t v13 = 0;
      int v11 = 0;
    }
    uint64_t v14 = (v11 + a3);
    unint64_t v15 = v12 + v14 - 1;
    if (v15 <= v6) {
      int v16 = 0;
    }
    else {
      int v16 = v6 - v15;
    }
    unsigned int v17 = v16 + v14;
    if (a4)
    {
      unsigned int v18 = (unsigned int *)(a4 + v13);
      int v19 = cf[4];
      if (v19 > -10)
      {
        LODWORD(v28) = 0;
        int v29 = v12 + v17 - 1;
        while (v28 < v17)
        {
          if ((*((unsigned __int8 *)v18 + ((unint64_t)v28 >> 3)) >> (v28 & 7)))
          {
            unsigned int v30 = v29 - v28;
            while (1)
            {
              int v31 = v28;
              unint64_t v28 = (v28 + 1);
              if (v28 >= v17) {
                break;
              }
              if (((*((unsigned __int8 *)v18 + (v28 >> 3)) >> (v28 & 7)) & 1) == 0)
              {
                LODWORD(v28) = v31 + 1;
                break;
              }
            }
            CFNumberRef cf = _CIIndexSetAddIndexesInRange(v9, v29 - v31, v30, a5, a6);
            int v32 = v9[4];
            if (v32 <= -10)
            {
              int v33 = v28 & 0xFFFFFFF8;
              int v34 = v9[6] - v9[5];
              unsigned int v35 = ((v17 - (v28 & 0xFFFFFFF8)) >> 1) - v32 - 10;
              if (v34 + 1 < v35) {
                unsigned int v35 = v34 + 1;
              }
              v9[4] = -10 - v35;
              if (v17 != v33)
              {
                uint64_t v25 = (unsigned int *)((char *)v18 + (v28 >> 3));
                unsigned int v23 = v17 - v33;
                CFNumberRef cf = v9;
                int v24 = v12;
                goto LABEL_21;
              }
              return cf;
            }
          }
          else
          {
            LODWORD(v28) = v28 + 1;
          }
        }
      }
      else
      {
        int v20 = v6 - v10;
        unsigned int v21 = (v17 >> 1) - v19 - 10;
        if (v20 + 1 < v21) {
          unsigned int v22 = v20 + 1;
        }
        else {
          unsigned int v22 = v21;
        }
        cf[4] = -10 - v22;
        unsigned int v23 = v16 + v14;
        int v24 = v12;
        uint64_t v25 = v18;
LABEL_21:
        CIIndexSetAddRangeFromBitVector_Bitmap((uint64_t)cf, v24, v23, v25);
        return _CIIndexSetConvertIfInvertedArrayIsMoreEfficient(v9, 0, v26);
      }
    }
    else
    {
      uint64_t v27 = v12 + v17 - 1;
      if (v12 == v27)
      {
        return (unsigned int *)_CIIndexSetAddIndex(cf, v12 + v17 - 1, 0, a5, a6);
      }
      else
      {
        return _CIIndexSetAddIndexesInRange(cf, v12, v27, a5, a6);
      }
    }
  }
  return cf;
}

uint64_t searchMapWithHint(uint64_t a1, unsigned int a2, _DWORD *a3, int a4)
{
  uint64_t v6 = *a3;
  if (v6 == -1
    || (unsigned int v7 = *(_DWORD *)(a1 + 32), v7 <= v6)
    || (uint64_t v8 = *(unsigned int *)(a1 + 36), v9 = *(_DWORD *)(a1 + 16), v8 < v6)
    && v8 + v7 - v9 > v6)
  {
LABEL_5:
    uint64_t v8 = binarySearchMap(a1, a2);
LABEL_6:
    uint64_t v10 = v8;
LABEL_7:
    *a3 = v8;
    return v10;
  }
  unsigned int v12 = v7 - v9 + v8;
  if (v6 >= v8 && v6 < v12) {
    goto LABEL_25;
  }
  uint64_t v14 = *(void *)(a1 + 40);
  unsigned int v15 = *(_DWORD *)(v14 + 4 * v6);
  if (v15 == a2) {
    return v6;
  }
  if (v15 >= a2)
  {
LABEL_25:
    uint64_t v10 = (v6 + 1);
    if (v10 < v8 || v12 == 0)
    {
      uint64_t v17 = v7 - v9 + v8;
      if (v10 >= v7) {
        goto LABEL_44;
      }
    }
    else
    {
      if (v12 >= v7) {
        goto LABEL_6;
      }
      uint64_t v17 = 0;
      LODWORD(v6) = v7 - v9 + v8;
      uint64_t v10 = v6;
    }
    uint64_t v18 = *(void *)(a1 + 40);
    unsigned int v19 = *(_DWORD *)(v18 + 4 * v10);
    if (v19 == a2) {
      goto LABEL_35;
    }
    if (v19 > a2)
    {
      uint64_t v20 = (v10 + 1);
      if (v20 >= v8 && v17)
      {
        if (v17 >= v7) {
          goto LABEL_6;
        }
        LODWORD(v10) = v17;
        uint64_t v20 = v17;
        uint64_t v17 = 0;
      }
      if (v20 < v7)
      {
        unsigned int v21 = *(_DWORD *)(v18 + 4 * v20);
        if (v21 == a2)
        {
LABEL_43:
          LODWORD(v8) = v20;
          uint64_t v10 = v20;
          goto LABEL_7;
        }
        if (v21 > a2)
        {
          uint64_t v10 = (v20 + 1);
          if (v10 >= v8 && v17)
          {
            if (v17 >= v7) {
              goto LABEL_6;
            }
            LODWORD(v20) = v17;
            uint64_t v10 = v17;
            uint64_t v17 = 0;
          }
          if (v10 >= v7) {
            goto LABEL_81;
          }
          unsigned int v22 = *(_DWORD *)(v18 + 4 * v10);
          if (v22 == a2) {
            goto LABEL_35;
          }
          if (v22 <= a2) {
            goto LABEL_81;
          }
          uint64_t v20 = (v10 + 1);
          if (v20 >= v8 && v17)
          {
            if (v17 >= v7) {
              goto LABEL_6;
            }
            LODWORD(v10) = v17;
            uint64_t v20 = v17;
            uint64_t v17 = 0;
          }
          if (v20 < v7)
          {
            unsigned int v23 = *(_DWORD *)(v18 + 4 * v20);
            if (v23 == a2) {
              goto LABEL_43;
            }
            if (v23 > a2)
            {
              uint64_t v10 = (v20 + 1);
              if (v10 >= v8)
              {
                if (v17)
                {
                  LODWORD(v20) = v17;
                  uint64_t v10 = v17;
                  if (v17 >= v7) {
                    goto LABEL_6;
                  }
                }
              }
              if (v10 < v7)
              {
                if (*(_DWORD *)(v18 + 4 * v10) != a2)
                {
                  if (v8 == v9)
                  {
                    int v24 = v8 - 1;
                    if ((int)v8 - 33 >= (int)v10)
                    {
                      do
                      {
                        int v25 = v24 - v10;
                        if (v24 < (int)v10) {
                          ++v25;
                        }
                        uint64_t v8 = (v10 + (v25 >> 1));
                        unsigned int v26 = *(_DWORD *)(v18 + 4 * (int)v8);
                        if (v26 == a2) {
                          goto LABEL_6;
                        }
                        if (v26 <= a2) {
                          int v24 = v8 - 1;
                        }
                        else {
                          LODWORD(v10) = v8 + 1;
                        }
                      }
                      while ((int)v10 <= v24 - 32);
                    }
                    uint64_t v27 = (int)v10;
                    if (v24 + 1 > (int)v10) {
                      uint64_t v10 = v24 + 1;
                    }
                    else {
                      uint64_t v10 = (int)v10;
                    }
                    while (v27 <= v24)
                    {
                      unsigned int v28 = *(_DWORD *)(v18 + 4 * v27++);
                      if (v28 <= a2) {
                        goto LABEL_117;
                      }
                    }
                  }
                  else if (v8 && (uint64_t v29 = (int)v8 - 1, *(_DWORD *)(v18 + 4 * v29) <= a2))
                  {
                    if ((int)v8 > (int)v7)
                    {
                      int v37 = __si_assert_copy_extra_329();
                      __message_assert_333((uint64_t)v37, v38, v39, v40, v41, v42, v43, v44, (char)"CIIndexSet.c");
                      free(v37);
                      if (__valid_fs(-1))
                      {
                        MEMORY[0xBAD] = -559038737;
                        abort();
                      }
                      MEMORY[0xC00] = -559038737;
                      abort();
                    }
                    if (v8 < v10) {
                      LODWORD(v10) = v8 - 1;
                    }
                    if ((int)v8 - 33 >= (int)v10)
                    {
                      while (1)
                      {
                        int v34 = v29 - v10;
                        if ((int)v29 < (int)v10) {
                          ++v34;
                        }
                        uint64_t v8 = (v10 + (v34 >> 1));
                        unsigned int v35 = *(_DWORD *)(v18 + 4 * (int)v8);
                        if (v35 == a2) {
                          goto LABEL_6;
                        }
                        if (v35 <= a2) {
                          LODWORD(v29) = v8 - 1;
                        }
                        else {
                          LODWORD(v10) = v8 + 1;
                        }
                        if ((int)v10 > (int)v29 - 32)
                        {
                          uint64_t v29 = (int)v29;
                          break;
                        }
                      }
                    }
                    uint64_t v27 = (int)v10;
                    if (v29 + 1 > (int)v10) {
                      uint64_t v10 = v29 + 1;
                    }
                    else {
                      uint64_t v10 = (int)v10;
                    }
                    while (v27 <= v29)
                    {
                      unsigned int v36 = *(_DWORD *)(v18 + 4 * v27++);
                      if (v36 <= a2)
                      {
LABEL_117:
                        uint64_t v10 = v27 - 1;
                        break;
                      }
                    }
                  }
                  else
                  {
                    if (v12 > v10) {
                      LODWORD(v10) = v7 - v9 + v8;
                    }
                    int v30 = v7 - 1;
                    if ((int)(v7 - 33) >= (int)v10)
                    {
                      do
                      {
                        int v31 = v30 - v10;
                        if (v30 < (int)v10) {
                          ++v31;
                        }
                        uint64_t v8 = (v10 + (v31 >> 1));
                        unsigned int v32 = *(_DWORD *)(v18 + 4 * (int)v8);
                        if (v32 == a2) {
                          goto LABEL_6;
                        }
                        if (v32 <= a2) {
                          int v30 = v8 - 1;
                        }
                        else {
                          LODWORD(v10) = v8 + 1;
                        }
                      }
                      while ((int)v10 <= v30 - 32);
                    }
                    uint64_t v27 = (int)v10;
                    if (v30 + 1 > (int)v10) {
                      uint64_t v10 = v30 + 1;
                    }
                    else {
                      uint64_t v10 = (int)v10;
                    }
                    while (v27 <= v30)
                    {
                      unsigned int v33 = *(_DWORD *)(v18 + 4 * v27++);
                      if (v33 <= a2) {
                        goto LABEL_117;
                      }
                    }
                  }
                  LODWORD(v8) = v10;
                  goto LABEL_7;
                }
LABEL_35:
                LODWORD(v8) = v10;
                goto LABEL_7;
              }
LABEL_81:
              LODWORD(v8) = v20;
              goto LABEL_7;
            }
          }
        }
      }
      LODWORD(v8) = v10;
      uint64_t v10 = v20;
      goto LABEL_7;
    }
LABEL_44:
    LODWORD(v8) = v6;
    goto LABEL_7;
  }
  if (a4
    && (!v8 || v6 != v12 || *(_DWORD *)(v14 + 4 * ((int)v8 - 1)) <= a2)
    && (!v6
     || v6 >= v8 && v6 <= v12
     || *(_DWORD *)(v14 + 4 * (v6 - 1)) <= a2))
  {
    goto LABEL_5;
  }
  return v6;
}

uint64_t binarySearchMap(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(int *)(a1 + 36);
  int v3 = *(_DWORD *)(a1 + 16);
  if (v2 == v3)
  {
    if ((int)v2 > *(_DWORD *)(a1 + 32))
    {
      unsigned int v21 = __si_assert_copy_extra_329();
      __message_assert_333((uint64_t)v21, v22, v23, v24, v25, v26, v27, v28, (char)"CIIndexSet.c");
      free(v21);
      if (__valid_fs(-1)) {
        uint64_t v29 = 2989;
      }
      else {
        uint64_t v29 = 3072;
      }
      *(_DWORD *)uint64_t v29 = -559038737;
      abort();
    }
    int v4 = v2 - 1;
    uint64_t v5 = *(void *)(a1 + 40);
    if ((int)v2 >= 33)
    {
      LODWORD(v6) = 0;
      while (1)
      {
        int v15 = v4 - v6;
        if (v4 < (int)v6) {
          ++v15;
        }
        uint64_t result = (v6 + (v15 >> 1));
        unsigned int v16 = *(_DWORD *)(v5 + 4 * (int)result);
        if (v16 == a2) {
          break;
        }
        if (v16 <= a2) {
          int v4 = result - 1;
        }
        else {
          LODWORD(v6) = result + 1;
        }
        if ((int)v6 > v4 - 32)
        {
          uint64_t v6 = (int)v6;
          goto LABEL_30;
        }
      }
    }
    else
    {
      uint64_t v6 = 0;
LABEL_30:
      if (v4 + 1 > v6) {
        uint64_t result = v4 + 1;
      }
      else {
        uint64_t result = v6;
      }
      while (v6 <= v4)
      {
        unsigned int v17 = *(_DWORD *)(v5 + 4 * v6++);
        if (v17 <= a2) {
          return v6 - 1;
        }
      }
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 40);
    if (v2 && (uint64_t v8 = v2 - 1, *(_DWORD *)(v7 + 4 * (v2 - 1)) <= a2))
    {
      if ((int)v2 > *(_DWORD *)(a1 + 32))
      {
        int v30 = __si_assert_copy_extra_329();
        __message_assert_333((uint64_t)v30, v31, v32, v33, v34, v35, v36, v37, (char)"CIIndexSet.c");
        free(v30);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      if ((int)v2 >= 33)
      {
        LODWORD(v2) = 0;
        while (1)
        {
          int v18 = v8 - v2;
          if ((int)v8 < (int)v2) {
            ++v18;
          }
          uint64_t result = (v2 + (v18 >> 1));
          unsigned int v19 = *(_DWORD *)(v7 + 4 * (int)result);
          if (v19 == a2) {
            break;
          }
          if (v19 <= a2) {
            LODWORD(v8) = result - 1;
          }
          else {
            LODWORD(v2) = result + 1;
          }
          if ((int)v2 > (int)v8 - 32)
          {
            uint64_t v8 = (int)v8;
            uint64_t v2 = (int)v2;
            goto LABEL_48;
          }
        }
      }
      else
      {
        uint64_t v2 = 0;
LABEL_48:
        if (v8 + 1 > v2) {
          uint64_t result = v8 + 1;
        }
        else {
          uint64_t result = v2;
        }
        while (v2 <= v8)
        {
          unsigned int v20 = *(_DWORD *)(v7 + 4 * v2++);
          if (v20 <= a2) {
            return v2 - 1;
          }
        }
      }
    }
    else
    {
      int v9 = *(_DWORD *)(a1 + 32);
      LODWORD(v2) = v9 - v3 + v2;
      int v10 = v9 - 1;
      if (v9 - 33 < (int)v2)
      {
LABEL_15:
        uint64_t v2 = (int)v2;
        if (v10 + 1 > (int)v2) {
          uint64_t result = v10 + 1;
        }
        else {
          uint64_t result = (int)v2;
        }
        while (v2 <= v10)
        {
          unsigned int v14 = *(_DWORD *)(v7 + 4 * v2++);
          if (v14 <= a2) {
            return v2 - 1;
          }
        }
      }
      else
      {
        while (1)
        {
          int v11 = v10 - v2;
          if (v10 < (int)v2) {
            ++v11;
          }
          uint64_t result = (v2 + (v11 >> 1));
          unsigned int v13 = *(_DWORD *)(v7 + 4 * (int)result);
          if (v13 == a2) {
            break;
          }
          if (v13 <= a2) {
            int v10 = result - 1;
          }
          else {
            LODWORD(v2) = result + 1;
          }
          if ((int)v2 > v10 - 32) {
            goto LABEL_15;
          }
        }
      }
    }
  }
  return result;
}

uint64_t _protectedReadVInt32(uint64_t a1, unint64_t *a2, unint64_t a3)
{
  unint64_t v3 = *a2;
  if (*a2 >= a3)
  {
    unsigned int v19 = __si_assert_copy_extra_329();
    unsigned int v20 = v19;
    unsigned int v21 = "";
    if (v19) {
      unsigned int v21 = v19;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "PostingChunk.c", 19, "offset < bufferLength", v21);
    goto LABEL_22;
  }
  unint64_t v5 = v3 + 1;
  int v6 = *(char *)(a1 + v3);
  uint64_t result = *(unsigned __int8 *)(a1 + v3);
  if (v6 < 0)
  {
    if (v5 >= a3)
    {
      uint64_t v23 = __si_assert_copy_extra_329();
      uint64_t v24 = v23;
      uint64_t v25 = "";
      if (v23) {
        uint64_t v25 = v23;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "PostingChunk.c", 22, "offset < bufferLength", v25);
      goto LABEL_29;
    }
    unint64_t v8 = v3 + 2;
    int v9 = *(char *)(a1 + v5);
    int v10 = *(unsigned __int8 *)(a1 + v5);
    if ((v9 & 0x80000000) == 0)
    {
      uint64_t result = result & 0x7F | (v10 << 7);
      goto LABEL_18;
    }
    if (v8 < a3)
    {
      unint64_t v11 = v3 + 3;
      int v12 = *(char *)(a1 + v8);
      char v13 = v12;
      if ((v12 & 0x80000000) == 0)
      {
        uint64_t v14 = ((v10 & 0x7F) << 7) | (v12 << 14) | (result & 0x7F);
        unint64_t v8 = v3 + 3;
LABEL_17:
        uint64_t result = v14;
        goto LABEL_18;
      }
      if (v11 >= a3)
      {
        uint64_t v28 = __si_assert_copy_extra_329();
        uint64_t v24 = v28;
        uint64_t v29 = "";
        if (v28) {
          uint64_t v29 = v28;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "PostingChunk.c", 28, "offset < bufferLength", v29);
      }
      else
      {
        unint64_t v8 = v3 + 4;
        int v15 = *(char *)(a1 + v11);
        int v16 = *(unsigned __int8 *)(a1 + v11);
        if ((v15 & 0x80000000) == 0)
        {
          int v17 = ((v13 & 0x7F) << 14) | (v16 << 21);
LABEL_16:
          uint64_t v14 = v17 & 0xFFFFC000 | ((v10 & 0x7F) << 7) | result & 0x7F;
          goto LABEL_17;
        }
        if (v8 >= a3)
        {
          int v30 = __si_assert_copy_extra_329();
          uint64_t v24 = v30;
          uint64_t v31 = "";
          if (v30) {
            uint64_t v31 = v30;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "PostingChunk.c", 31, "offset < bufferLength", v31);
        }
        else
        {
          int v18 = *(char *)(a1 + v8);
          if ((v18 & 0x80000000) == 0)
          {
            unint64_t v8 = v3 + 5;
            int v17 = ((v16 & 0x7F) << 21) | (v18 << 28) | ((v13 & 0x7F) << 14);
            goto LABEL_16;
          }
          uint64_t v32 = __si_assert_copy_extra_329();
          uint64_t v24 = v32;
          uint64_t v33 = "";
          if (v32) {
            uint64_t v33 = v32;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "PostingChunk.c", 33, "(b4 & 0x80) == 0", v33);
        }
      }
LABEL_29:
      free(v24);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    uint64_t v26 = __si_assert_copy_extra_329();
    unsigned int v20 = v26;
    uint64_t v27 = "";
    if (v26) {
      uint64_t v27 = v26;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "PostingChunk.c", 25, "offset < bufferLength", v27);
LABEL_22:
    free(v20);
    if (__valid_fs(-1)) {
      uint64_t v22 = 2989;
    }
    else {
      uint64_t v22 = 3072;
    }
    *(_DWORD *)uint64_t v22 = -559038737;
    abort();
  }
  unint64_t v8 = v3 + 1;
LABEL_18:
  *a2 = v8;
  return result;
}

unsigned int *_CIIndexSetAddIndexesInRange(unsigned int *cf, unsigned int a2, unsigned int a3, int *a4, int8x8_t a5)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  if (a2 > a3) {
    goto LABEL_107;
  }
  uint64_t v5 = (uint64_t)cf;
  if (cf[6] >= a3) {
    unsigned int v6 = a3;
  }
  else {
    unsigned int v6 = cf[6];
  }
  if (cf[5] <= a2) {
    unsigned int v7 = a2;
  }
  else {
    unsigned int v7 = cf[5];
  }
  unsigned int v8 = v6 - v7;
  if (v6 < v7) {
    return cf;
  }
  if (v6 == v7)
  {
    return (unsigned int *)_CIIndexSetAddIndex(cf, v6, 0, a4, a5);
  }
  CFTypeID v10 = CFGetTypeID(cf);
  if (v10 != __kCIIndexSetInvertedTypeID)
  {
    int v12 = *(_DWORD *)(v5 + 16);
    if (v12 > -10
      || ((int v13 = *(_DWORD *)(v5 + 24) - *(_DWORD *)(v5 + 20), v14 = v8 - v12 - 9, v13 + 1 < v14)
        ? (unsigned int v15 = v13 + 1)
        : (unsigned int v15 = v14),
          int v12 = -10 - v15,
          *(_DWORD *)(v5 + 16) = -10 - v15,
          (v15 & 0x80000000) != 0))
    {
      int v16 = v8 + 1;
      if (v12 >= -1) {
        unsigned int v17 = *(_DWORD *)(v5 + 32);
      }
      else {
        unsigned int v17 = 4;
      }
      if (v12 < -1) {
        int v12 = -2 - v12;
      }
      if (v17 < v12 + v16) {
        _CIIndexSetMakeSpace((unsigned int *)v5, v16, 0, 0, 0);
      }
    }
  }
  if (*(int *)(v5 + 16) <= -10)
  {
    int v18 = *(_DWORD *)(v5 + 24);
    char v19 = v18 - v6;
    unsigned int v20 = (v18 - v6) >> 5;
    char v21 = v18 - v7;
    uint64_t v22 = (v18 - v7) >> 5;
    if (v20 <= v22 && v20 < *(_DWORD *)(v5 + 32))
    {
      int v23 = v19 & 0x1F;
      int v24 = v21 & 0x1F;
      if (v20 == v22)
      {
        int v25 = v24 + 1;
        int v26 = masks[v23];
        if (v23 != v25) {
          int v26 = masks[v25] & ~v26;
        }
        LODWORD(v22) = v20;
      }
      else
      {
        *(_DWORD *)(*(void *)(v5 + 40) + 4 * v20) |= ~masks[v23];
        uint64_t v32 = v20 + 1;
        if (v32 < v22)
        {
          do
            *(_DWORD *)(*(void *)(v5 + 40) + 4 * v32++) = -1;
          while (v22 != v32);
        }
        int v26 = masks[v24 + 1];
      }
      *(_DWORD *)(*(void *)(v5 + 40) + 4 * v22) |= v26;
      return _CIIndexSetConvertIfInvertedArrayIsMoreEfficient((_DWORD *)v5, 0, v11);
    }
LABEL_107:
    long long v71 = __si_assert_copy_extra_329();
    __message_assert_333((uint64_t)v71, v72, v73, v74, v75, v76, v77, v78, (char)"CIIndexSet.c");
    free(v71);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  CFNumberRef cf = (unsigned int *)CFGetTypeID((CFTypeRef)v5);
  if (cf == (unsigned int *)__kCIIndexSetInvertedTypeID)
  {
    return (unsigned int *)CIIndexSetClearRange_Array(v5, v7, v6);
  }
  uint64_t v27 = *(int *)(v5 + 16);
  if ((v27 & 0x80000000) != 0)
  {
    unsigned int v33 = -2;
    int v34 = -2 - v27;
    long long v79 = *(_OWORD *)(v5 + 32);
    *(_DWORD *)(v5 + 16) = -2;
    if (v27 > 0xFFFFFFFD)
    {
      int v36 = 0;
      LODWORD(v35) = 0;
    }
    else
    {
      uint64_t v35 = 0;
      int v36 = 0;
      uint64_t v37 = v5 + 32;
      do
      {
        unsigned int v38 = *((_DWORD *)&v79 + v36);
        if (v38 <= v6)
        {
          *(_DWORD *)(v37 + 4 * v35) = v6;
          unsigned int v33 = *(_DWORD *)(v5 + 16) - 1;
          *(_DWORD *)(v5 + 16) = v33;
          if (v38 == v6) {
            ++v36;
          }
          --v6;
        }
        else
        {
          ++v36;
          *(_DWORD *)(v37 + 4 * v35) = v38;
          unsigned int v33 = *(_DWORD *)(v5 + 16) - 1;
          *(_DWORD *)(v5 + 16) = v33;
        }
        ++v35;
      }
      while (v36 < v34 && v6 >= v7);
    }
    if (v36 >= v34)
    {
LABEL_92:
      if (v6 < v7) {
        return cf;
      }
      uint64_t v35 = v35;
      LODWORD(v58) = v6 - v7;
      if (v6 - 1 >= v7 - 1) {
        uint64_t v58 = v58;
      }
      else {
        uint64_t v58 = 0;
      }
      if (v58 >= 7)
      {
        uint64_t v59 = v58 + 1;
        uint64_t v60 = (v58 + 1) & 0x1FFFFFFF8;
        int32x4_t v61 = (int32x4_t)v33;
        int32x4_t v62 = 0uLL;
        int32x4_t v63 = vaddq_s32(vdupq_n_s32(v6), (int32x4_t)xmmword_1BDA82460);
        unint64_t v64 = (int32x4_t *)(v5 + 4 * v35 + 48);
        v65.i64[0] = 0x300000003;
        v65.i64[1] = 0x300000003;
        v66.i64[0] = -1;
        v66.i64[1] = -1;
        v67.i64[0] = 0x700000007;
        v67.i64[1] = 0x700000007;
        uint64_t v68 = v60;
        do
        {
          v64[-1] = v63;
          *unint64_t v64 = vaddq_s32(v63, v65);
          int32x4_t v61 = vaddq_s32(v61, v66);
          int32x4_t v62 = vaddq_s32(v62, v66);
          int32x4_t v63 = vaddq_s32(v63, v67);
          v64 += 2;
          v68 -= 8;
        }
        while (v68);
        unsigned int v33 = vaddvq_s32(vaddq_s32(v62, v61));
        if (v59 == v60) {
          goto LABEL_103;
        }
        uint64_t v35 = v60 + v35;
        v6 -= v60;
      }
      long long v69 = (unsigned int *)(v5 + 4 * v35 + 32);
      do
      {
        *v69++ = v6;
        --v33;
        --v6;
      }
      while (v6 >= v7);
LABEL_103:
      *(_DWORD *)(v5 + 16) = v33;
      return cf;
    }
    unint64_t v48 = v35;
    uint64_t v49 = v36;
    int v50 = v36 + v27;
    CFNumberRef cf = (unsigned int *)memcpy((void *)(v5 + 4 * v35 + 32), (char *)&v79 + 4 * v36, 4 * (-3 - (v36 + v27)) + 4);
    int v51 = v50 + v33;
    unint64_t v52 = -2 - v27 - v49;
    if (v52 >= 4)
    {
      unint64_t v53 = v52 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v54 = 0uLL;
      int64x2_t v55 = (int64x2_t)v48;
      int64x2_t v56 = vdupq_n_s64(1uLL);
      unint64_t v57 = v52 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        int64x2_t v55 = vaddq_s64(v55, v56);
        int64x2_t v54 = vaddq_s64(v54, v56);
        v57 -= 4;
      }
      while (v57);
      LODWORD(v48) = vaddvq_s64(vaddq_s64(v54, v55));
      if (v52 == v53) {
        goto LABEL_91;
      }
      LODWORD(v49) = v53 + v49;
    }
    LODWORD(v48) = v48 - v49 - v27 - 2;
LABEL_91:
    unsigned int v33 = v51 + 2;
    *(_DWORD *)(v5 + 16) = v51 + 2;
    LODWORD(v35) = v48;
    goto LABEL_92;
  }
  if (v7) {
    unsigned int v28 = v7 - 1;
  }
  else {
    unsigned int v28 = 0;
  }
  CFNumberRef cf = (unsigned int *)searchMapWithHint(v5, v28, a4, 1);
  int v29 = (int)cf;
  int v30 = *(_DWORD *)(v5 + 16);
  int v31 = *(_DWORD *)(v5 + 32);
  if (v31 != v30)
  {
    uint64_t v39 = *(int *)(v5 + 36);
    if (v39 == cf) {
      goto LABEL_62;
    }
    uint64_t v70 = *(void *)(v5 + 40);
    if ((int)v39 >= (int)cf)
    {
      CFNumberRef cf = (unsigned int *)memmove((void *)(v70 + 4 * (v31 - v30 + cf)), (const void *)(v70 + 4 * (int)cf), 4 * ((int)v39 - (int)cf));
    }
    else
    {
      CFNumberRef cf = (unsigned int *)memmove((void *)(v70 + 4 * v39), (const void *)(v70 + 4 * (v39 + v31 - v30)), 4 * (cf - (v39 + v31 - v30)));
      int v29 = v29 - *(_DWORD *)(v5 + 32) + *(_DWORD *)(v5 + 16);
    }
  }
  *(_DWORD *)(v5 + 36) = v29;
LABEL_62:
  uint64_t v40 = *(void *)(v5 + 40);
  int v41 = v29 - 1;
  if (v29 >= 33)
  {
    LODWORD(v42) = 0;
    while (1)
    {
      int v43 = v41 - v42;
      if (v41 < (int)v42) {
        ++v43;
      }
      int v44 = v42 + (v43 >> 1);
      unsigned int v45 = *(_DWORD *)(v40 + 4 * v44);
      if (v45 == v6) {
        break;
      }
      if (v45 <= v6) {
        int v41 = v44 - 1;
      }
      else {
        LODWORD(v42) = v44 + 1;
      }
      if ((int)v42 > v41 - 32)
      {
        uint64_t v42 = (int)v42;
        goto LABEL_73;
      }
    }
  }
  else
  {
    uint64_t v42 = 0;
LABEL_73:
    if (v41 + 1 > v42) {
      int v44 = v41 + 1;
    }
    else {
      int v44 = v42;
    }
    while (v42 <= v41)
    {
      unsigned int v46 = *(_DWORD *)(v40 + 4 * v42++);
      if (v46 <= v6)
      {
        int v44 = v42 - 1;
        break;
      }
    }
  }
  if (v8 + 1 > v29 - v44)
  {
    *(_DWORD *)(v5 + 16) -= v29 - v44;
    *(_DWORD *)(v5 + 36) = v44;
    uint64_t v47 = 4 * v44;
    do
    {
      *(_DWORD *)(*(void *)(v5 + 40) + v47) = v6;
      ++*(_DWORD *)(v5 + 16);
      int v29 = *(_DWORD *)(v5 + 36) + 1;
      *(_DWORD *)(v5 + 36) = v29;
      --v6;
      v47 += 4;
    }
    while (v6 >= v7);
  }
  *a4 = v29;
  return cf;
}

void _CIIndexSetMakeSpace(unsigned int *cf, int a2, void *a3, _DWORD *a4, int a5)
{
  if (a4) {
    *a4 = -1;
  }
  uint64_t v9 = cf[4];
  if ((v9 + 1) >= 0xFFFFFFF8)
  {
    uint64_t v10 = 4294967294 - v9;
    unsigned int v11 = ~v9 | (~v9 >> 1) | ((~v9 | (~v9 >> 1)) >> 2);
    unsigned int v12 = v11 | (v11 >> 4) | ((v11 | (v11 >> 4)) >> 8);
    unsigned int v13 = (v12 | HIWORD(v12)) + 1;
    unsigned int v14 = blob_calloc(v13, a3);
    memcpy(v14, cf + 8, 4 * v10);
    *((void *)cf + 5) = v14;
    cf[4] = v10;
    LODWORD(v9) = v10;
    cf[8] = v13;
    cf[9] = v10;
  }
  unsigned int v15 = (a2 + v9 - 1) | ((a2 + v9 - 1) >> 1);
  unsigned int v16 = v15 | (v15 >> 2) | ((v15 | (v15 >> 2)) >> 4);
  unsigned int v17 = (v16 | (v16 >> 8) | ((v16 | (v16 >> 8)) >> 16)) + 1;
  CFGetTypeID(cf);
  if (v17 < (cf[6] - cf[5] + 31) >> 5 || a5 != 0)
  {
    unint64_t v19 = *MEMORY[0x1E4F14B00] >> 1;
    if (v19 <= 4 * (unint64_t)v17 || (uint64_t v20 = cf[8], v19 <= 4 * v20))
    {
      uint64_t v22 = blob_malloc(v17, a3);
      int v23 = v22;
      char v21 = (char *)*((void *)cf + 5);
      if (cf[9] == cf[4])
      {
        unsigned int v24 = cf[8];
        if (v17 < v24) {
          unsigned int v24 = v17;
        }
        memcpy(v22, *((const void **)cf + 5), 4 * v24);
        blob_free(*((void **)cf + 5), cf[8], a3);
        char v21 = 0;
      }
      *((void *)cf + 5) = v23;
      if (!v21) {
        goto LABEL_22;
      }
    }
    else
    {
      char v21 = (char *)*((void *)cf + 5);
      if (cf[9] == cf[4])
      {
        *((void *)cf + 5) = blob_realloc(*((void **)cf + 5), v20, v17, a3);
LABEL_22:
        cf[8] = v17;
        return;
      }
      int v23 = blob_malloc(v17, a3);
      *((void *)cf + 5) = v23;
      if (!v21) {
        goto LABEL_22;
      }
    }
    memcpy(v23, v21, 4 * (int)cf[9]);
    memcpy((void *)(*((void *)cf + 5) + 4 * (v17 - cf[4] + cf[9])), &v21[4 * (cf[9] - cf[4]) + 4 * cf[8]], 4 * (int)(cf[4] - cf[9]));
    blob_free(v21, cf[8], a3);
    goto LABEL_22;
  }
  _CIIndexSetForceBitmap((uint64_t)cf, a3, a2);
}

void *blob_realloc(void *__src, unsigned int a2, unsigned int a3, void *a4)
{
  unint64_t v5 = *MEMORY[0x1E4F14B00] >> 1;
  size_t v6 = 4 * a3;
  if (v5 <= 4 * (unint64_t)a2 || v6 >= v5)
  {
    unint64_t v19 = __si_assert_copy_extra_329();
    __message_assert_333((uint64_t)v19, v20, v21, v22, v23, v24, v25, v26, (char)"CIIndexSet.c");
    free(v19);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAA] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (a4
    && a3 - 8 <= 0x37
    && (unsigned int v10 = __PAIR64__(a3, a3 - 8) >> 3, v10 <= 7)
    && ((0x8Bu >> v10) & 1) != 0
    && ((v14 = qword_1BDA875C8[v10], v15 = &a4[v14], v17 = (void *)v15[2], v16 = v15 + 2, (unsigned int v11 = v17) != 0)
     || *a4 && (unsigned int v11 = (void *)cicachelistdequeue(*a4 + 24 * v14 + 32, 0)) != 0))
  {
    *unsigned int v16 = v11[1];
    if (a3 >= a2) {
      unsigned int v18 = a2;
    }
    else {
      unsigned int v18 = a3;
    }
    memcpy(v11, __src, 4 * v18);
    blob_free(__src, a2, a4);
  }
  else
  {
    if (__src)
    {
      unsigned int v11 = malloc_type_zone_realloc((malloc_zone_t *)queryZone, __src, v6, 0xECA6AA46uLL);
      if (v11) {
        return v11;
      }
    }
    else
    {
      unsigned int v11 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v6, 0x8DDAA030uLL);
      if (v11) {
        return v11;
      }
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
    }
    return 0;
  }
  return v11;
}

uint64_t CIIndexSetAddRangeFromBitVector_Bitmap(uint64_t result, int a2, unsigned int a3, unsigned int *a4)
{
  int v4 = *(_DWORD *)(result + 24);
  unsigned int v5 = v4 - (a2 + a3) + 1;
  uint64_t v6 = v5 >> 5;
  unsigned int v7 = v5 & 0x1F;
  unsigned int v8 = v4 - a2;
  unsigned int v9 = v8 >> 5;
  int v10 = v8 & 0x1F;
  unsigned int v11 = *a4;
  if (v6 == v8 >> 5)
  {
    unsigned int v12 = v10 + 1;
    int v13 = masks[v7];
    if (v7 != v12) {
      int v13 = masks[v12] & ~v13;
    }
    int v14 = v13 & (v11 << v7);
    unsigned int v15 = (void *)(result + 40);
    goto LABEL_34;
  }
  char v16 = 32 - v7;
  unsigned int v15 = (void *)(result + 40);
  *(_DWORD *)(*(void *)(result + 40) + 4 * v6) |= (v11 << v7) & ~masks[v7];
  if (a3 >= 0x21)
  {
    if (v7)
    {
      if ((v6 + 1) < *(_DWORD *)(result + 32)) {
        *(_DWORD *)(*v15 + 4 * (v6 + 1)) |= v11 >> v16;
      }
      if (a3 + 31 > 0x5F)
      {
        unsigned int v17 = (a3 + 31) >> 5;
        if (v17 <= 3) {
          unsigned int v17 = 3;
        }
        uint64_t v18 = v17 - 1;
        uint64_t v19 = 4 * v6;
        uint64_t v20 = a4 + 1;
        uint64_t v21 = v18 - 1;
        do
        {
          unsigned int v22 = *v20++;
          *(_DWORD *)(*v15 + v19 + 4) |= v22 << v7;
          *(_DWORD *)(*v15 + v19 + 8) |= v22 >> v16;
          v19 += 4;
          --v21;
        }
        while (v21);
        goto LABEL_24;
      }
    }
    else if (a3 + 31 > 0x5F)
    {
      unsigned int v23 = (a3 + 31) >> 5;
      if (v23 <= 3) {
        unsigned int v23 = 3;
      }
      uint64_t v18 = v23 - 1;
      uint64_t v24 = v18 - 1;
      uint64_t v25 = 4 * v6 + 4;
      uint64_t v26 = (int *)(a4 + 1);
      do
      {
        int v27 = *v26++;
        *(_DWORD *)(*v15 + v25) |= v27;
        v25 += 4;
        --v24;
      }
      while (v24);
LABEL_24:
      unsigned int v11 = a4[v18];
      int v28 = v11 << v7;
      if ((int)v18 + (int)v6 >= v9 || (v18 + v6 + 1) >= *(_DWORD *)(result + 32)) {
        v28 &= masks[v10 + 1];
      }
      *(_DWORD *)(*v15 + 4 * (v18 + v6)) |= v28;
      if (!v7) {
        return result;
      }
      goto LABEL_28;
    }
    LODWORD(v18) = 1;
    goto LABEL_24;
  }
  LODWORD(v18) = 0;
  if (!v7) {
    return result;
  }
LABEL_28:
  LODWORD(v6) = v6 + v18 + 1;
  if (v6 <= v9 && v6 < *(_DWORD *)(result + 32))
  {
    int v14 = masks[v10 + 1] & (v11 >> v16);
LABEL_34:
    *(_DWORD *)(*v15 + 4 * v6) |= v14;
  }
  return result;
}

void *blob_malloc(unsigned int a1, void *a2)
{
  size_t v2 = 4 * a1;
  uint64_t v3 = *MEMORY[0x1E4F14B00];
  if (v2 >= *MEMORY[0x1E4F14B00] >> 1)
  {
    return mmap(0, (v2 + v3 - 1) & -v3, 3, 4098, -134217728, 0);
  }
  else if (a2 {
         && a1 - 8 <= 0x37
  }
         && (unsigned int v4 = __PAIR64__(a1, a1 - 8) >> 3, v4 <= 7)
         && ((0x8Bu >> v4) & 1) != 0
         && ((uint64_t v6 = qword_1BDA875C8[v4], v7 = &a2[v6], v9 = (void *)v7[2], v8 = v7 + 2, (result = v9) != 0)
          || *a2 && (uint64_t result = (void *)cicachelistdequeue(*a2 + 24 * v6 + 32, 0)) != 0))
  {
    void *v8 = result[1];
  }
  else
  {
    uint64_t result = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v2, 0x6085D6BuLL);
    if (!result)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
      {
        v10[0] = 0;
        _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)v10, 2u);
      }
      return 0;
    }
  }
  return result;
}

_DWORD *getRawLocalizedUniquedField(uint64_t a1, int a2, _DWORD *a3, int a4)
{
  string_and_length_for_id = (unsigned __int8 *)get_string_and_length_for_id(a1, 4u, a2, a4);
  if (!string_and_length_for_id) {
    return 0;
  }
  unsigned int v7 = string_and_length_for_id;
  unsigned int v8 = *string_and_length_for_id;
  if ((char)*string_and_length_for_id < 0)
  {
    if (v8 > 0xBF)
    {
      if (v8 > 0xDF)
      {
        if (v8 > 0xEF)
        {
          unsigned int v8 = *(_DWORD *)(string_and_length_for_id + 1);
          uint64_t v9 = 5;
          if (v8) {
            goto LABEL_4;
          }
        }
        else
        {
          unsigned int v8 = ((v8 & 0xF) << 24) | (string_and_length_for_id[1] << 16) | (string_and_length_for_id[2] << 8) | string_and_length_for_id[3];
          uint64_t v9 = 4;
          if (v8) {
            goto LABEL_4;
          }
        }
      }
      else
      {
        unsigned int v8 = ((v8 & 0x1F) << 16) | (string_and_length_for_id[1] << 8) | string_and_length_for_id[2];
        uint64_t v9 = 3;
        if (v8) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      uint64_t v9 = 2;
      unsigned int v8 = string_and_length_for_id[1] | ((v8 & 0x3F) << 8);
      if (v8) {
        goto LABEL_4;
      }
    }
    return 0;
  }
  uint64_t v9 = 1;
  if (!*string_and_length_for_id) {
    return 0;
  }
LABEL_4:
  uint64_t v10 = v9 + 1;
  unsigned int v11 = string_and_length_for_id[v9];
  if ((char)string_and_length_for_id[v9] < 0)
  {
    if (v11 > 0xBF)
    {
      if (v11 > 0xDF)
      {
        if (v11 > 0xEF)
        {
          unsigned int v11 = *(_DWORD *)&string_and_length_for_id[v10];
          uint64_t v10 = v9 + 5;
        }
        else
        {
          unsigned int v11 = ((v11 & 0xF) << 24) | (string_and_length_for_id[v10] << 16) | (string_and_length_for_id[v9 + 2] << 8) | string_and_length_for_id[v9 + 3];
          uint64_t v10 = v9 + 4;
        }
      }
      else
      {
        unsigned int v11 = ((v11 & 0x1F) << 16) | (string_and_length_for_id[v10] << 8) | string_and_length_for_id[v9 + 2];
        uint64_t v10 = v9 + 3;
      }
    }
    else
    {
      int v12 = string_and_length_for_id[v10] | ((v11 & 0x3F) << 8);
      uint64_t v10 = v9 + 2;
      unsigned int v11 = v12;
    }
  }
  unint64_t v13 = v10 - v9;
  size_t v14 = v8 - v13;
  if (v8 < v13)
  {
    char v16 = __si_assert_copy_extra_1921(*(_DWORD **)(a1 + 848));
    unsigned int v17 = v16;
    uint64_t v18 = "";
    if (v16) {
      uint64_t v18 = v16;
    }
    __message_assert("%s:%u: failed assertion '%s' %s %s", "ldb.c", 334, "len >= (off1-off)", v18, "len >= (off1-off)");
    free(v17);
    if (__valid_fsp(*(_DWORD **)(a1 + 848))) {
      uint64_t v19 = 2989;
    }
    else {
      uint64_t v19 = 3072;
    }
    *(_DWORD *)uint64_t v19 = -559038737;
    abort();
  }
  if (v14 + 13 < 0x401 || (a3 = malloc_type_malloc(v14 + 13, 0x90C1ED28uLL)) != 0)
  {
    *a3 = 9437195;
    a3[1] = v11;
    a3[2] = v14;
    memcpy((char *)a3 + 13, &v7[v10], v14);
  }
  return a3;
}

uint64_t writeDBOToPlistBytes(uint64_t a1, uint64_t a2, uint64_t a3, char **a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t *a10, int a11, char a12, uint64_t a13, uint64_t a14, const __CFDictionary *a15, unsigned int a16, uint64_t a17, void *a18, void *a19)
{
  uint64_t v147 = a7;
  uint64_t v153 = a6;
  int v144 = a4;
  unsigned int v143 = a19;
  uint64_t v158 = a18;
  CFDictionaryRef v23 = a15;
  uint64_t v140 = a9;
  int v146 = a10;
  uint64_t v178 = *MEMORY[0x1E4F143B8];
  int v174 = a11;
  char v175 = a12;
  v173[0] = a13;
  v173[1] = a14;
  uint64_t v152 = a1;
  uint64_t v160 = *(char **)(a1 + 1184);
  uint64_t v159 = (*(uint64_t (**)(_DWORD *))(*(void *)a5 + 32))(a5);
  if (!v159)
  {
    uint64_t v122 = __si_assert_copy_extra_329();
    uint64_t v123 = v122;
    int v124 = "";
    if (v122) {
      int v124 = v122;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SISearchCtx_METADATA.cpp", 6562, "oid", v124);
LABEL_158:
    free(v123);
    if (__valid_fs(-1)) {
      uint64_t v127 = 2989;
    }
    else {
      uint64_t v127 = 3072;
    }
    *(_DWORD *)uint64_t v127 = -559038737;
    abort();
  }
  unsigned int v25 = a5[2];
  uint64_t v26 = a3 + 8 * a16;
  ++*(void *)(v26 + 2512);
  int v27 = *(uint64_t **)(v26 + 3544);
  *int v27 = v159;
  *(void *)(v26 + 3544) = v27 + 1;
  CFIndex range = *(void *)(a3 + 232);
  float v155 = (CFIndex *)(a3 + 232);
  uint64_t v28 = a3;
  unsigned int v162 = v25;
  if ((v25 & 8) != 0)
  {
    CFBitVectorRef v29 = 0;
  }
  else
  {
    CFBitVectorRef v29 = *(const __CFBitVector **)(a3 + 248);
    if (v29)
    {
      v180.location = 0;
      v180.length = range;
      CFBitVectorGetCountOfBit(*(CFBitVectorRef *)(v28 + 248), v180, 1u);
    }
  }
  CFBitVectorRef v163 = v29;
  if (!range)
  {
    uint64_t v151 = 0;
LABEL_16:
    unsigned int v33 = 0;
    goto LABEL_17;
  }
  uint64_t v30 = *(void *)(v28 + 232);
  if (*(unsigned char *)v28)
  {
    if (v30)
    {
      uint64_t v24 = (char **)(v28 + 104);
      if (!*(void *)(v28 + 104))
      {
        CFArrayRef v31 = *(const __CFArray **)(v28 + 128);
        if (v31)
        {
          v172[0] = 0;
          SIFlattenArrayToCStringVector(v31, v24, v172, (CFIndex *)buf);
        }
      }
    }
    uint64_t v32 = *(void *)(v28 + 104);
  }
  else
  {
    uint64_t v24 = (char **)(v28 + 96);
    uint64_t v32 = *(void *)(v28 + 96);
    if (v30 && !v32)
    {
      CFArrayRef v38 = *(const __CFArray **)(v28 + 120);
      if (v38)
      {
        SIFlattenArrayToCStringVector(v38, v24, (size_t *)(v28 + 240), v155);
        uint64_t v32 = *(void *)(v28 + 96);
        if (!v32)
        {
LABEL_31:
          uint64_t v40 = __si_assert_copy_extra_329();
          __message_assert_333((uint64_t)v40, v41, v42, v43, v44, v45, v46, v47, (char)"SISearchCtx.h");
          free(v40);
          if (__valid_fs(-1)) {
LABEL_32:
          }
            uint64_t v48 = 2989;
          else {
            uint64_t v48 = 3072;
          }
          *(_DWORD *)uint64_t v48 = -559038737;
          abort();
        }
      }
      else
      {
        uint64_t v32 = 0;
      }
    }
  }
  uint64_t v151 = v32;
  if (!v160) {
    goto LABEL_16;
  }
  unsigned int v33 = (uint64_t *)(*(uint64_t (**)(_DWORD *, char **))(*(void *)a5 + 16))(a5, v24);
LABEL_17:
  uint64_t v161 = v33;
  CFIndex v34 = *v155;
  uint64_t v156 = v28;
  if (v34)
  {
    uint64_t v35 = (void *)(v28 + 224);
    if (!*(void *)(v28 + 224))
    {
      CFDictionaryRef v141 = a15;
      if (*(unsigned char *)v28)
      {
        uint64_t v36 = *(void *)(v28 + 104);
        if (!v36)
        {
          CFArrayRef v37 = *(const __CFArray **)(v28 + 128);
          if (v37)
          {
            v172[0] = 0;
            SIFlattenArrayToCStringVector(v37, (char **)(v28 + 104), v172, (CFIndex *)buf);
            uint64_t v36 = *(void *)(v28 + 104);
          }
          else
          {
            uint64_t v36 = 0;
          }
          uint64_t v28 = v156;
        }
        goto LABEL_36;
      }
      uint64_t v36 = *(void *)(v28 + 96);
      if (!v36)
      {
        CFArrayRef v39 = *(const __CFArray **)(v28 + 120);
        if (v39)
        {
          SIFlattenArrayToCStringVector(v39, (char **)(v28 + 96), (size_t *)(v28 + 240), v155);
          uint64_t v36 = *(void *)(v28 + 96);
          if (!v36) {
            goto LABEL_31;
          }
        }
        else
        {
          uint64_t v36 = 0;
        }
      }
LABEL_36:
      PartialQueryResults::setupFixedFunctionVector(v28, v36, v35);
      CFDictionaryRef v23 = v141;
    }
  }
  uint64_t v149 = a17;
  os_log_type_t v154 = a5;
  uint64_t v49 = *(void *)(v28 + 224);
  MEMORY[0x1F4188790](v33);
  int v51 = (char *)&v131 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v51, v50);
  unint64_t v53 = v160;
  unint64_t v52 = v161;
  uint64_t v148 = a8;
  if (!v161) {
    goto LABEL_52;
  }
  char v54 = v162;
  if (*v155)
  {
    uint64_t v142 = v51;
    uint64_t v55 = v49;
    CFDictionaryRef v56 = v23;
    unint64_t v57 = (void **)(v28 + 144);
    if (*(void *)(v28 + 144))
    {
      uint64_t v58 = 144;
      if ((v162 & 8) == 0) {
        uint64_t v58 = 160;
      }
      uint64_t v59 = *(char **)(v28 + v58);
    }
    else
    {
      uint64_t v116 = PartialQueryResults::attributeIdVector((void *)v28, (int *)v160);
      PartialQueryResults::setupFieldIdVector(v156, v116, (size_t *)(v156 + 152), v57, 0);
      int v117 = (void **)(v156 + 160);
      uint64_t v118 = v116;
      uint64_t v28 = v156;
      PartialQueryResults::setupFieldIdVector(v156, v118, (size_t *)(v156 + 168), (void **)(v156 + 160), 1);
      char v54 = v162;
      uint64_t v119 = 144;
      if ((v162 & 8) == 0) {
        uint64_t v119 = 160;
      }
      uint64_t v59 = *(char **)(v28 + v119);
      if (!*(void *)(v28 + 232))
      {
        CFDictionaryRef v23 = v56;
        unint64_t v53 = v160;
        unint64_t v52 = v161;
        goto LABEL_44;
      }
      unint64_t v52 = v161;
      if (!*v57)
      {
        unint64_t v53 = v160;
        uint64_t v120 = PartialQueryResults::attributeIdVector((void *)v28, (int *)v160);
        PartialQueryResults::setupFieldIdVector(v156, v120, (size_t *)(v156 + 152), v57, 0);
        uint64_t v121 = v120;
        uint64_t v28 = v156;
        PartialQueryResults::setupFieldIdVector(v156, v121, (size_t *)(v156 + 168), v117, 1);
        unint64_t v52 = v161;
        char v54 = v162;
        CFDictionaryRef v23 = v56;
        goto LABEL_44;
      }
    }
    CFDictionaryRef v23 = v56;
    unint64_t v53 = v160;
LABEL_44:
    uint64_t v49 = v55;
    int v51 = v142;
    goto LABEL_48;
  }
  uint64_t v60 = 144;
  if ((v162 & 8) == 0) {
    uint64_t v60 = 160;
  }
  uint64_t v59 = *(char **)(v28 + v60);
LABEL_48:
  uint64_t v61 = 152;
  if ((v54 & 8) == 0) {
    uint64_t v61 = 168;
  }
  db_get_offsets_for_fields(v53, (uint64_t)v52, v59, *(void *)(v28 + v61), (uint64_t)v51);
  unint64_t v52 = v161;
  if (*v161 && *v161 != v159)
  {
    unsigned int v125 = __si_assert_copy_extra_329();
    uint64_t v123 = v125;
    uint64_t v126 = "";
    if (v125) {
      uint64_t v126 = v125;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SISearchCtx_METADATA.cpp", 6593, "!dbo || !dbo->oid || dbo->oid == oid", v126);
    goto LABEL_158;
  }
LABEL_52:
  v172[1] = 0;
  v172[2] = 0;
  v172[0] = (size_t)v52;
  if (v158) {
    ++v158[65];
  }
  if (range)
  {
    _MDPlistBytesBeginArray();
    CFIndex v63 = 0;
    uint64_t v133 = v168;
    unsigned int v134 = v166;
    if (v149) {
      BOOL v64 = v143 == 0;
    }
    else {
      BOOL v64 = 1;
    }
    int v65 = v64;
    int v137 = v65;
    uint64_t v158 = (void *)(v28 + 200);
    __darwin_time_t v150 = (void *)(v28 + 192);
    unint64_t v135 = v171;
    uint64_t v136 = (void *)(v28 + 8);
    uint64_t v138 = (char **)(v28 + 96);
    uint64_t v139 = (char **)(v28 + 104);
    uint64_t v132 = (size_t *)(v28 + 240);
    *(void *)&long long v62 = 134217984;
    long long v131 = v62;
    int32x4_t v66 = v144;
    uint64_t v145 = v49;
    while (1)
    {
      if (v163 && !CFBitVectorGetBitAtIndex(v163, v63)) {
        goto LABEL_133;
      }
      int32x4_t v67 = *(unsigned int **)&v51[8 * v63];
      if (!v67) {
        break;
      }
      MDPlistBytesAddSDBFieldLocalized(a2, (int *)v53, v67, (unsigned int *)((char *)v67 + 13), v66, v23, (v162 >> 1) & 1);
LABEL_134:
      if (++v63 == range) {
        return _MDPlistBytesEndArray();
      }
    }
    if (v161)
    {
      switch(*(_DWORD *)(v49 + 4 * v63))
      {
        case 0:
          goto LABEL_68;
        case 1:
          dateScaled(v161, (int *)v53, v28);
          goto LABEL_110;
        case 2:
          if (dword_1E9FC90A8 >= 5)
          {
            uint64_t v142 = v51;
            uint64_t v107 = v49;
            int v108 = *__error();
            uint64_t v109 = _SILogForLogForCategory(1);
            if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v110 = *v146;
              *(_DWORD *)long long buf = v131;
              *(void *)&uint8_t buf[4] = v110;
              _os_log_impl(&dword_1BD672000, v109, OS_LOG_TYPE_DEFAULT, "Pack match bits %llx", buf, 0xCu);
            }
            *__error() = v108;
            int32x4_t v66 = v144;
            uint64_t v28 = v156;
            unint64_t v53 = v160;
            uint64_t v49 = v107;
            int v51 = v142;
          }
          goto LABEL_121;
        case 3:
          if (v140) {
            goto LABEL_121;
          }
          if (v148 >= 1)
          {
            uint64_t v75 = 0;
            do
              ++v75;
            while (!grouping_db_eval_obj_with_options((uint64_t)v53) && v148 != v75);
          }
          _MDPlistBytesAddInteger();
          goto LABEL_127;
        case 4:
          uint64_t v76 = v51;
          uint64_t v77 = v161;
          PartialQueryResults::messageAttrIds((uint64_t)v169, v28, (int *)v53);
          si_fancyMailRelevance((uint64_t)v77, v169);
          uint64_t v78 = v77;
          int v51 = v76;
          dateScaled(v78, (int *)v53, v28);
          goto LABEL_110;
        case 5:
          if (dword_1E9FC90A8 >= 5)
          {
            uint64_t v142 = v51;
            uint64_t v111 = v49;
            int v112 = *__error();
            uint64_t v113 = _SILogForLogForCategory(1);
            if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v114 = *v146;
              *(_DWORD *)long long buf = v131;
              *(void *)&uint8_t buf[4] = v114;
              _os_log_impl(&dword_1BD672000, v113, OS_LOG_TYPE_DEFAULT, "Pack match bits %llx", buf, 0xCu);
            }
            *__error() = v112;
            int32x4_t v66 = v144;
            uint64_t v28 = v156;
            unint64_t v53 = v160;
            uint64_t v49 = v111;
            int v51 = v142;
          }
          __MDPlistBytesAddUInt64Array();
          goto LABEL_134;
        case 6:
          _MDPlistBytesBeginArray();
          for (uint64_t i = 0; i != 5; ++i)
            _MDPlistBytesAddInteger();
          _MDPlistBytesEndArray();
          uint64_t v28 = v156;
          goto LABEL_134;
        case 7:
          goto LABEL_121;
        case 8:
LABEL_110:
          _MDPlistBytesAddReal();
          goto LABEL_134;
        case 9:
          if (v137) {
            goto LABEL_133;
          }
          CFDictionaryRef v141 = v23;
          uint64_t v79 = (uint64_t)v53;
          matched = TokenMatchNew((const __CFAllocator *)kCIQueryZoneAllocator);
          v170[0] = MEMORY[0x1E4F143A8];
          v170[1] = 0x40000000;
          v171[0] = __writeDBOToPlistBytes_block_invoke;
          v171[1] = &__block_descriptor_tmp_59_4781;
          v171[2] = matched;
          enumerate_matching_query_pieces(v149, v79, (uint64_t)v161, (uint64_t)v66, 0, v143, (uint64_t)v170);
          TokenMatchConvertToSnippetHints((uint64_t)matched);
          _MDPlistBytesBeginArray();
          uint64_t v81 = matched[2];
          uint64_t v82 = matched[3];
          while (v81 != v82)
          {
            _MDPlistBytesBeginArray();
            _MDPlistBytesAddInternedCString();
            uint64_t v83 = *(void *)(v81 + 24);
            uint64_t v84 = *(void *)(v81 + 32);
            while (v83 != v84)
            {
              _MDPlistBytesAddInternedCString();
              v83 += 24;
            }
            _MDPlistBytesEndArray();
            v81 += 56;
          }
          _MDPlistBytesEndArray();
          TokenMatchFree(matched);
          int32x4_t v66 = v144;
          uint64_t v49 = v145;
          uint64_t v28 = v156;
          CFDictionaryRef v23 = v141;
          unint64_t v53 = v160;
          goto LABEL_134;
        case 0xA:
          uint64_t v94 = v149;
          if (!v149) {
            goto LABEL_122;
          }
          CFDictionaryRef v141 = v23;
          uint64_t v142 = v51;
          *(void *)long long buf = 0;
          uint64_t v157 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v149 + 72))(v149, buf);
          _MDPlistBytesBeginArray();
          unsigned int v86 = v66;
          __int16 v95 = v161;
          if (*(uint64_t *)buf >= 1)
          {
            uint64_t v96 = v94;
            uint64_t v97 = 0;
            uint64_t v98 = MEMORY[0x1E4F143A8];
            do
            {
              __int16 v99 = *(void **)(v157 + 8 * v97);
              v167[0] = v98;
              v167[1] = 0x40000000;
              v168[0] = __writeDBOToPlistBytes_block_invoke_60;
              v168[1] = &__block_descriptor_tmp_61;
              v168[2] = a2;
              enumerate_matching_query_pieces(v96, (uint64_t)v160, (uint64_t)v95, (uint64_t)v66, 0, v99, (uint64_t)v167);
              ++v97;
            }
            while (v97 < *(uint64_t *)buf);
          }
          goto LABEL_115;
        case 0xB:
          uint64_t v85 = v149;
          if (v149)
          {
            CFDictionaryRef v141 = v23;
            uint64_t v142 = v51;
            *(void *)long long buf = 0;
            uint64_t v157 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v149 + 80))(v149, buf);
            _MDPlistBytesBeginArray();
            unsigned int v86 = v66;
            unsigned int v87 = v161;
            if (*(uint64_t *)buf >= 1)
            {
              uint64_t v88 = v85;
              uint64_t v89 = 0;
              uint64_t v90 = MEMORY[0x1E4F143A8];
              do
              {
                uint64_t v91 = *(void **)(v157 + 8 * v89);
                v165[0] = v90;
                v165[1] = 0x40000000;
                v166[0] = __writeDBOToPlistBytes_block_invoke_2;
                v166[1] = &__block_descriptor_tmp_63;
                v166[2] = v63;
                v166[3] = a2;
                enumerate_matching_query_pieces(v88, (uint64_t)v160, (uint64_t)v87, (uint64_t)v66, 1, v91, (uint64_t)v165);
                ++v89;
              }
              while (v89 < *(uint64_t *)buf);
            }
LABEL_115:
            _MDPlistBytesEndArray();
            int32x4_t v66 = v86;
            uint64_t v28 = v156;
            CFDictionaryRef v23 = v141;
            int v51 = v142;
            unint64_t v53 = v160;
            uint64_t v49 = v145;
          }
          else
          {
LABEL_122:
            _MDPlistBytesBeginArray();
            _MDPlistBytesEndArray();
            uint64_t v49 = v145;
          }
          break;
        case 0xC:
          _MDPlistBytesBeginArray();
          for (uint64_t j = 0; j != 3; ++j)
            _MDPlistBytesAddReal();
          _MDPlistBytesEndArray();
LABEL_127:
          uint64_t v28 = v156;
          goto LABEL_134;
        case 0xD:
          unint64_t v100 = 0;
          char v101 = 0;
          do
          {
            if (*((unsigned char *)v173 + v100)) {
              v101 |= 2u;
            }
            if (v100 > 1) {
              break;
            }
            ++v100;
          }
          while ((v101 & 2) == 0);
LABEL_121:
          _MDPlistBytesAddInteger();
          goto LABEL_134;
        default:
          unint64_t v128 = __si_assert_copy_extra_329();
          unint64_t v129 = v128;
          if (v128) {
            unsigned int v130 = v128;
          }
          else {
            unsigned int v130 = "";
          }
          __message_assert("%s:%u: Unexpected code path %s ", "SISearchCtx_METADATA.cpp", 6629, v130);
          free(v129);
          goto LABEL_32;
      }
      goto LABEL_134;
    }
LABEL_68:
    uint64_t v68 = *(void *)(v28 + 232);
    if (*(unsigned char *)v28)
    {
      long long v69 = v158;
      if (v68)
      {
        long long v69 = v158;
        if (!*v158)
        {
          uint64_t v70 = *v139;
          if (!*v139)
          {
            CFArrayRef v71 = *(const __CFArray **)(v28 + 128);
            if (v71)
            {
              *(void *)long long buf = 0;
              uint64_t v72 = v139;
              SIFlattenArrayToCStringVector(v71, v139, (size_t *)buf, &v176);
              uint64_t v70 = *v72;
            }
            else
            {
              uint64_t v70 = 0;
            }
          }
          uint64_t v102 = buf;
          uint64_t v103 = v28;
          uint64_t v104 = v158;
          long long v105 = v158;
LABEL_130:
          PartialQueryResults::setupCannedAttributeVector(v103, (uint64_t)v70, v105, v102);
          long long v69 = v104;
          uint64_t v49 = v145;
        }
      }
    }
    else
    {
      long long v69 = v150;
      if (v68)
      {
        long long v69 = v150;
        if (!*v150)
        {
          uint64_t v70 = *v138;
          if (!*v138)
          {
            CFArrayRef v73 = *(const __CFArray **)(v28 + 120);
            if (v73)
            {
              uint64_t v74 = v138;
              SIFlattenArrayToCStringVector(v73, v138, v132, v155);
              uint64_t v70 = *v74;
              if (!*v74) {
                goto LABEL_31;
              }
            }
            else
            {
              uint64_t v70 = 0;
            }
          }
          uint64_t v103 = v28;
          uint64_t v104 = v150;
          long long v105 = v150;
          uint64_t v102 = v136;
          goto LABEL_130;
        }
      }
    }
    long long v106 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t *, void, void, _DWORD *, void *, uint64_t))(*v69 + 8 * v63);
    if (v106
      && (v106(v152, *(void *)(v151 + 8 * v63), v153, v159, v161, 0, 0, v154, &__block_literal_global_67_4784, a2) & 1) != 0)
    {
      goto LABEL_134;
    }
LABEL_133:
    _MDPlistBytesAddNull();
    goto LABEL_134;
  }
  return _MDPlistBytesAddNull();
}

void MDPlistBytesAddSDBFieldLocalized(uint64_t a1, int *a2, unsigned int *key, unsigned int *a4, char **a5, CFDictionaryRef theDict, int a7)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(unsigned __int16 *)key;
  if ((v8 - 1) > 0xF)
  {
    _MDPlistBytesAddNull();
  }
  else
  {
    unint64_t v11 = key[2];
    int v12 = *((unsigned __int16 *)key + 1);
    if (v8 == 14)
    {
      if ((~v12 & 0x5020) != 0 || !_os_feature_enabled_impl())
      {
        _MDPlistBytesAddData();
      }
      else
      {
        __int16 v13 = *((_WORD *)key + 1);
        if ((v13 & 8) == 0)
        {
          size_t v14 = (unint64_t *)((char *)key + 13);
          if ((v13 & 0x10) == 0)
          {
            if (v11 >= 3)
            {
              __int16 v17 = *((char *)key + 15);
              char v16 = (char *)key + 15;
              __int16 v15 = v17;
              unint64_t v18 = *(v16 - 2);
              if (v18 <= 2)
              {
                uint64_t v19 = *(v16 - 1);
                if (v19 <= 2)
                {
                  uint64_t v20 = (vector_dimension_vec_sizes_12485[v19] * vector_size_elem_sizes_12484[v18]);
                  if (&v16[v20] <= (char *)v14 + v11)
                  {
                    unsigned __int16 v21 = v15 + (v16[1] << 8);
                    if ((v13 & 0x20) != 0)
                    {
                      _MDPlistBytesBeginArray();
                      while (1)
                        recodeVector(a1, v18, v19, v21, 0, (uint64_t)v16, v20);
                    }
                    unsigned int v22 = *(v16 - 2);
                    unsigned int v23 = *(v16 - 1);
                    uint64_t v24 = (vector_dimension_vec_sizes_12485[v19] * vector_size_elem_sizes_12484[v18]);
                    recodeVector(a1, v22, v23, v21, 0, (uint64_t)v16, v24);
                  }
                }
              }
            }
            return;
          }
          _MDPlistBytesBeginArray();
          if (v11 >= 8)
          {
            unint64_t v41 = v11 >> 3;
            while (1)
            {
              unint64_t v43 = *v14++;
              unint64_t v42 = v43;
              LODWORD(value[0]) = 0;
              *(_DWORD *)long long buf = 0;
              uint64_t vector_for_id_locked = db_get_vector_for_id_locked((uint64_t)a2, v43, value, buf);
              if (vector_for_id_locked) {
                break;
              }
              if (v42)
              {
                uint64_t v50 = a1;
                unsigned int v46 = 3;
                unsigned int v47 = 3;
                int v48 = 0;
                uint64_t v51 = v42;
                uint64_t v45 = 0;
                uint64_t v49 = 0;
                goto LABEL_56;
              }
LABEL_57:
              if (!--v41) {
                goto LABEL_61;
              }
            }
            uint64_t v45 = vector_for_id_locked;
            unsigned int v46 = buf[0];
            unsigned int v47 = buf[1];
            int v48 = *(unsigned __int16 *)&buf[2];
            uint64_t v49 = LODWORD(value[0]);
            uint64_t v50 = a1;
            uint64_t v51 = v42;
LABEL_56:
            recodeVector(v50, v46, v47, v48, v51, v45, v49);
            goto LABEL_57;
          }
          goto LABEL_61;
        }
        LODWORD(value[0]) = 0;
        *(_DWORD *)long long buf = 0;
        if ((v13 & 0x10) == 0)
        {
          unint64_t v34 = 0;
          uint64_t v35 = (char *)key + 13;
          *(_WORD *)long long buf = *(_WORD *)((char *)key + 13);
          unsigned int v36 = key[2] - 2;
          goto LABEL_75;
        }
        if (v11 == 4)
        {
          unint64_t v34 = *(unsigned int *)((char *)key + 13);
        }
        else
        {
          if (v11 != 8) {
            return;
          }
          unint64_t v34 = *(void *)((char *)key + 13);
        }
        if (v34)
        {
          uint64_t v35 = (char *)db_get_vector_for_id_locked((uint64_t)a2, v34, value, buf);
          unsigned int v36 = value[0];
LABEL_75:
          if (!v35) {
            return;
          }
          if (!v36) {
            return;
          }
          unsigned int v52 = buf[0];
          if (buf[0] > 2uLL) {
            return;
          }
          unsigned int v53 = buf[1];
          if (buf[1] > 2u) {
            return;
          }
          uint64_t v54 = (vector_dimension_vec_sizes_12485[buf[1]] * vector_size_elem_sizes_12484[buf[0]]);
          if (v54 > v36) {
            return;
          }
          unsigned __int16 v55 = *(_WORD *)&buf[2];
          if ((*((_WORD *)key + 1) & 0x20) == 0)
          {
            recodeVector(a1, buf[0], buf[1], *(unsigned __int16 *)&buf[2], v34, (uint64_t)v35, (vector_dimension_vec_sizes_12485[buf[1]] * vector_size_elem_sizes_12484[buf[0]]));
            return;
          }
          CFDictionaryRef v56 = &v35[v36];
          _MDPlistBytesBeginArray();
          do
          {
            recodeVector(a1, v52, v53, v55, v34, (uint64_t)v35, v54);
            v35 += v54;
          }
          while (&v35[v54] <= v56);
LABEL_71:
          _MDPlistBytesEndArray();
        }
      }
    }
    else
    {
      unsigned int v25 = a4;
      if ((v12 & 0x80) != 0)
      {
        value[0] = a4;
        *(void *)long long buf = 0;
        if (theDict && (v12 & 0x10) != 0 && CFDictionaryGetValue(theDict, key)
          || db_get_localized_string(a2, (uint64_t)key, a5, (uint64_t)value, (uint64_t)buf, a7))
        {
          _MDPlistBytesAddInternedCString();
        }
        else if ((*((_WORD *)key + 1) & 0x10) != 0)
        {
          int v39 = _MDPlistBytesAddInternedCString();
          if (theDict && v39)
          {
            uint64_t v40 = malloc_type_malloc(key[2] + 13, 0xF818BE54uLL);
            memcpy(v40, key, key[2] + 13);
            CFDictionarySetValue(theDict, v40, value[0]);
          }
        }
        else
        {
          _MDPlistBytesAddCString();
        }
      }
      else
      {
        if ((v12 & 0x20) != 0)
        {
          if (v8 == 11)
          {
            if ((v12 & 0x8000) != 0 && (v12 & 0x10) != 0)
            {
              unsigned int v30 = *a4;
              _MDPlistBytesBeginArray();
              long long v60 = 0u;
              long long v61 = 0u;
              *(_OWORD *)value = 0u;
              long long v59 = 0u;
              unsigned int v57 = 64;
              CFArrayRef v31 = (void **)copyDataForUniquedValue((uint64_t)a2, v30, value, &v57);
              uint64_t v32 = v31;
              if (v31)
              {
                *(void *)long long buf = v31;
                if (v57)
                {
                  unsigned int v33 = (char *)v31 + v57;
                  do
                    addString(a1, a2, v12, (const char **)buf);
                  while (*(void *)buf < (unint64_t)v33);
                }
              }
              else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)long long buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v30;
                _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "No data for uniqued array %u", buf, 8u);
              }
              if (v32 != value) {
                free(v32);
              }
              goto LABEL_71;
            }
            _MDPlistBytesBeginArray();
            value[0] = v25;
            if (v11)
            {
              do
                addString(a1, a2, v12, (const char **)value);
              while (value[0] < (char *)v25 + v11);
            }
          }
          else
          {
            unint64_t v37 = kSDBTypeSizes[v8];
            unint64_t v38 = v11 / v37;
            _MDPlistBytesBeginArray();
            if ((v11 / v37))
            {
              do
              {
                addValue(a1, 0, v8, v12, (const char *)v25);
                unsigned int v25 = (unsigned int *)((char *)v25 + v37);
                LODWORD(v38) = v38 - 1;
              }
              while (v38);
            }
          }
LABEL_61:
          _MDPlistBytesEndArray();
          return;
        }
        int v26 = *(unsigned __int16 *)key;
        addValue(a1, a2, v26, v12, (const char *)a4);
      }
    }
  }
}

uint64_t addValue(uint64_t a1, int *a2, int a3, __int16 a4, const char *a5)
{
  __int16 v15 = a5;
  switch(a3)
  {
    case 1:
      if ((a4 & 0x400) != 0) {
        goto LABEL_5;
      }
      goto LABEL_9;
    case 2:
      if ((a4 & 0x400) == 0) {
        goto LABEL_9;
      }
      goto LABEL_5;
    case 3:
    case 4:
      if ((a4 & 0x400) == 0) {
        goto LABEL_9;
      }
      goto LABEL_5;
    case 5:
    case 6:
      if ((a4 & 0x400) != 0) {
        goto LABEL_5;
      }
      goto LABEL_9;
    case 7:
    case 8:
      if ((a4 & 0x400) != 0) {
        goto LABEL_5;
      }
LABEL_9:
      uint64_t result = _MDPlistBytesAddInteger();
      break;
    case 9:
      if ((a4 & 0x400) != 0) {
        goto LABEL_5;
      }
      goto LABEL_19;
    case 10:
      if ((a4 & 0x400) != 0)
      {
LABEL_5:
        uint64_t result = _MDPlistBytesAddBoolean();
      }
      else
      {
LABEL_19:
        uint64_t result = _MDPlistBytesAddReal();
      }
      break;
    case 11:
      uint64_t result = addString(a1, a2, a4, &v15);
      break;
    case 12:
      uint64_t result = _MDPlistBytesAddDate();
      break;
    default:
      uint64_t v6 = __si_assert_copy_extra_329();
      __message_assert_333((uint64_t)v6, v7, v8, v9, v10, v11, v12, v13, (char)"MDPlistBytesAdditions.c");
      free(v6);
      if (__valid_fs(-1)) {
        uint64_t v14 = 2989;
      }
      else {
        uint64_t v14 = 3072;
      }
      *(_DWORD *)uint64_t v14 = -559038737;
      abort();
  }
  return result;
}

uint64_t addString(uint64_t a1, int *a2, char a3, const char **a4)
{
  unsigned int v5 = *a4;
  if ((a3 & 0x10) != 0)
  {
    int v10 = *(_DWORD *)v5;
    uint64_t result = _MDPlistBytesAddRawInternedCStringKey();
    if (!result)
    {
      db_get_string_for_id_locked(a2, v10);
      uint64_t result = _MDPlistBytesAddRawInternedCStringKeyWithString();
    }
    uint64_t v8 = 4;
  }
  else
  {
    int v6 = strlen(*a4);
    uint64_t result = _MDPlistBytesAddCString();
    uint64_t v8 = v6 + 1;
  }
  *a4 = &v5[v8];
  return result;
}

void *copyDataForUniquedValue(uint64_t a1, unsigned int a2, void *a3, unsigned int *a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  string_and_length_for_id = (unsigned __int8 *)get_string_and_length_for_id(a1, 3u, a2, 1);
  if (string_and_length_for_id)
  {
    uint64_t v9 = string_and_length_for_id;
    unsigned int v10 = *string_and_length_for_id;
    if (((char)*string_and_length_for_id & 0x80000000) == 0)
    {
      if (!*string_and_length_for_id) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v10 > 0xBF)
    {
      if (v10 > 0xDF)
      {
        if (v10 > 0xEF)
        {
          unsigned int v13 = *(_DWORD *)(string_and_length_for_id + 1);
          if (v13) {
            goto LABEL_16;
          }
        }
        else
        {
          unsigned int v13 = ((v10 & 0xF) << 24) | (string_and_length_for_id[1] << 16) | (string_and_length_for_id[2] << 8) | string_and_length_for_id[3];
          if (v13) {
            goto LABEL_16;
          }
        }
LABEL_25:
        si_analytics_log_2842("Failed to fetch the SDB fLen for index:%d, nameId:%lu, dst->flags:0x%lx, dst->name:%s", 3, a2, *(int *)(a1 + 4), (const char *)(a1 + 324));
        return 0;
      }
      unsigned int v13 = ((v10 & 0x1F) << 16) | (string_and_length_for_id[1] << 8) | string_and_length_for_id[2];
      if (!v13) {
        goto LABEL_25;
      }
    }
    else
    {
      unsigned int v13 = string_and_length_for_id[1] | ((v10 & 0x3F) << 8);
      if (!v13) {
        goto LABEL_25;
      }
    }
LABEL_16:
    if ((v10 & 0x80) != 0)
    {
      uint64_t v15 = v13;
      if (v10 > 0xBF)
      {
        if (v10 > 0xDF)
        {
          if (v10 > 0xEF)
          {
            unsigned int v10 = *(_DWORD *)(string_and_length_for_id + 1);
            unint64_t v14 = 5;
          }
          else
          {
            unsigned int v10 = ((v10 & 0xF) << 24) | (string_and_length_for_id[1] << 16) | (string_and_length_for_id[2] << 8) | string_and_length_for_id[3];
            unint64_t v14 = 4;
          }
        }
        else
        {
          unsigned int v10 = ((v10 & 0x1F) << 16) | (string_and_length_for_id[1] << 8) | string_and_length_for_id[2];
          unint64_t v14 = 3;
        }
      }
      else
      {
        unint64_t v14 = 2;
        unsigned int v10 = string_and_length_for_id[1] | ((v10 & 0x3F) << 8);
      }
      if (v14 > v13)
      {
        unint64_t v18 = __si_assert_copy_extra_1921(*(_DWORD **)(a1 + 848));
        uint64_t v19 = v18;
        uint64_t v20 = "";
        if (v18) {
          uint64_t v20 = v18;
        }
        si_analytics_log_2842("%s:%u: failure log '%s' %s Expected offset %ld to fit in size %ld, dst->flags:0x%lx, dst->name:%s", "ldb.c", 402, "fLen >= fOffset", v20, v14, v15, *(int *)(a1 + 4), (const char *)(a1 + 324));
        free(v19);
        return 0;
      }
      goto LABEL_18;
    }
LABEL_17:
    unint64_t v14 = 1;
LABEL_18:
    if (a3 && (int)*a4 < (int)v10) {
      a3 = malloc_type_malloc((int)v10, 0xA20395CCuLL);
    }
    memcpy(a3, &v9[v14], (int)v10);
    *a4 = v10;
    return a3;
  }
  int v11 = *__error();
  uint64_t v12 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    uint64_t v17 = *(int *)(a1 + 4);
    *(_DWORD *)long long buf = 136316418;
    unsigned int v22 = "copyDataForUniquedValue";
    __int16 v23 = 1024;
    int v24 = 389;
    __int16 v25 = 1024;
    int v26 = 3;
    __int16 v27 = 2048;
    uint64_t v28 = a2;
    __int16 v29 = 2048;
    uint64_t v30 = v17;
    __int16 v31 = 2080;
    uint64_t v32 = a1 + 324;
    _os_log_error_impl(&dword_1BD672000, v12, OS_LOG_TYPE_ERROR, "%s:%d: Failed to fetch the field for index:%d, nameId:%lu, dst->flags:0x%lx, dst->name:%s", buf, 0x36u);
  }
  a3 = 0;
  *__error() = v11;
  return a3;
}

unsigned __int8 *getDBFForUniquedValue(uint64_t a1, unsigned int a2, int a3, void *a4)
{
  uint64_t result = (unsigned __int8 *)get_string_and_length_for_id(a1, a2, a3, 1);
  if (result)
  {
    unsigned int v8 = *result;
    if ((char)*result < 0)
    {
      if (v8 > 0xBF)
      {
        if (v8 > 0xDF)
        {
          if (v8 > 0xEF)
          {
            unsigned int v8 = *(_DWORD *)(result + 1);
            uint64_t v9 = 5;
          }
          else
          {
            unsigned int v8 = ((v8 & 0xF) << 24) | (result[1] << 16) | (result[2] << 8) | result[3];
            uint64_t v9 = 4;
          }
        }
        else
        {
          unsigned int v8 = ((v8 & 0x1F) << 16) | (result[1] << 8) | result[2];
          uint64_t v9 = 3;
        }
      }
      else
      {
        uint64_t v9 = 2;
        unsigned int v8 = result[1] | ((v8 & 0x3F) << 8);
      }
    }
    else
    {
      uint64_t v9 = 1;
    }
    *a4 = v8;
    if (a2 == 4)
    {
      uint64_t v10 = v9 + 1;
      unsigned int v11 = result[v9];
      if ((char)result[v9] < 0)
      {
        if (v11 > 0xBF)
        {
          if (v11 > 0xDF)
          {
            if (v11 > 0xEF)
            {
              unsigned int v11 = *(_DWORD *)&result[v10];
              uint64_t v10 = v9 + 5;
            }
            else
            {
              unsigned int v11 = ((v11 & 0xF) << 24) | (result[v10] << 16) | (result[v9 + 2] << 8) | result[v9 + 3];
              uint64_t v10 = v9 + 4;
            }
          }
          else
          {
            unsigned int v11 = ((v11 & 0x1F) << 16) | (result[v10] << 8) | result[v9 + 2];
            uint64_t v10 = v9 + 3;
          }
        }
        else
        {
          int v12 = result[v10] | ((v11 & 0x3F) << 8);
          uint64_t v10 = v9 + 2;
          unsigned int v11 = v12;
        }
      }
      if (!v11)
      {
        unsigned int v13 = __si_assert_copy_extra_1921(*(_DWORD **)(a1 + 848));
        unint64_t v14 = v13;
        uint64_t v15 = "";
        if (v13) {
          uint64_t v15 = v13;
        }
        si_analytics_log_2842("%s:%u: failure log '%s' %s Unexpected field 0 at %ld, dst->flags:0x%lx, dst->name:%s", "ldb.c", 369, "field", v15, v10, *(int *)(a1 + 4), (const char *)(a1 + 324));
        free(v14);
        return 0;
      }
    }
  }
  return result;
}

uint64_t get_string_and_length_for_id(uint64_t a1, unsigned int a2, int a3, int a4)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = a3 & 0x7FFFFFFF;
  if (v4 > 0x7FFFFFFD) {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 804) & 0x14) != 0)
  {
    uint64_t v7 = *(_DWORD **)(a1 + 8 * a2 + 880);
    uint64_t v23 = 0;
    if (a4)
    {
      uint64_t data_locked = data_map_get_data_locked((uint64_t)v7, v4, &v23);
      if (data_locked) {
        return data_locked;
      }
    }
    else
    {
      uint64_t data_locked = data_map_get_data((uint64_t)v7, v4, &v23);
      if (data_locked) {
        return data_locked;
      }
    }
    unint64_t v12 = data_map_count((uint64_t)v7);
    if (v12 < v4)
    {
      unint64_t v22 = v12;
      int v13 = *__error();
      unint64_t v14 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        int v18 = *(_DWORD *)(a1 + 4);
        int v19 = data_map_valid(v7);
        *(_DWORD *)long long buf = 136316930;
        __int16 v25 = "_get_string_and_length_for_id";
        __int16 v26 = 1024;
        int v27 = 571;
        uint64_t v20 = "y";
        if (!v19) {
          uint64_t v20 = "n";
        }
        __int16 v28 = 2048;
        unint64_t v29 = v4;
        __int16 v30 = 2048;
        unint64_t v31 = v22;
        __int16 v32 = 1024;
        unsigned int v33 = a2;
        __int16 v34 = 2080;
        uint64_t v35 = a1 + 324;
        __int16 v36 = 1024;
        int v37 = v18;
        __int16 v38 = 2080;
        int v39 = v20;
        _os_log_error_impl(&dword_1BD672000, v14, OS_LOG_TYPE_ERROR, "%s:%d: Invalid string_id:%lu, map_count:%lu, index:%d, dst->name:%s, dst->flags:0x%x valid:%s", buf, 0x46u);
      }
      *__error() = v13;
      if ((*(unsigned char *)(a1 + 4) & 0x20) != 0)
      {
        int v15 = *__error();
        char v16 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          int v21 = *(_DWORD *)(a1 + 4);
          *(_DWORD *)long long buf = 136315906;
          __int16 v25 = "_get_string_and_length_for_id";
          __int16 v26 = 1024;
          int v27 = 573;
          __int16 v28 = 2080;
          unint64_t v29 = a1 + 324;
          __int16 v30 = 1024;
          LODWORD(v31) = v21;
          _os_log_error_impl(&dword_1BD672000, v16, OS_LOG_TYPE_ERROR, "%s:%d: marking invalid %s flags:0x%x", buf, 0x22u);
        }
        *__error() = v15;
        int v17 = *(_DWORD *)(a1 + 4);
        goto LABEL_23;
      }
    }
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 8 * a2 + 880);
    if (*(_DWORD *)(v9 + 56) > v4
      && (uint64_t v10 = *(void *)(*(void *)(v9 + 32) + 8 * v4)) != 0)
    {
      return v10 + table_extra_bytes_11691[a2] + 4;
    }
    else
    {
      int v17 = *(_DWORD *)(a1 + 4);
      if ((v17 & 0x20) != 0)
      {
        uint64_t data_locked = 0;
LABEL_23:
        *(_DWORD *)(a1 + 4) = v17 | 0x40;
        return data_locked;
      }
      if (SIIsAppleInternal_onceToken != -1) {
        dispatch_once(&SIIsAppleInternal_onceToken, &__block_literal_global_5267);
      }
      return 0;
    }
  }
  return data_locked;
}

uint64_t db_get_string_for_id_locked(int *a1, int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*a1 != 1685287992)
  {
    int v4 = *__error();
    unsigned int v5 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = *a1;
      *(_DWORD *)long long buf = 136315650;
      unsigned int v11 = "db_get_string_for_id_locked";
      __int16 v12 = 1024;
      int v13 = 387;
      __int16 v14 = 1024;
      int v15 = v6;
      _os_log_error_impl(&dword_1BD672000, v5, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v4;
    uint64_t v7 = __si_assert_copy_extra_329();
    unsigned int v8 = v7;
    if (v7) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 387, v9);
    free(v8);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  return get_string_and_length_for_id_12082((uint64_t)a1, 1u, a2, 0, 1);
}

char *db_get_offsets_for_fields(char *result, uint64_t a2, char *__base, size_t __nel, uint64_t a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)result != 1685287992)
  {
    uint64_t v20 = result;
    int v21 = *__error();
    unint64_t v22 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      int v23 = *(_DWORD *)v20;
      *(_DWORD *)long long buf = 136315650;
      __int16 v28 = "db_get_offsets_for_fields";
      __int16 v29 = 1024;
      int v30 = 382;
      __int16 v31 = 1024;
      int v32 = v23;
      _os_log_error_impl(&dword_1BD672000, v22, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v21;
    int v24 = __si_assert_copy_extra_329();
    __int16 v25 = v24;
    if (v24) {
      __int16 v26 = v24;
    }
    else {
      __int16 v26 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 382, v26);
    free(v25);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  uint64_t v9 = *(unsigned int *)(a2 + 12);
  if (*(unsigned char *)(a2 + 41))
  {
    if (v9 >= 0x31)
    {
      size_t v14 = 0;
      unint64_t v15 = a2 + v9;
      unint64_t v16 = a2 + 48;
      do
      {
        if (v14 < __nel)
        {
          unsigned int v17 = *(_DWORD *)(v16 + 4);
          for (uint64_t i = &__base[8 * v14 + 4]; ; i += 8)
          {
            unsigned int v19 = *((_DWORD *)i - 1);
            if (v19 > v17) {
              break;
            }
            if (v19 == v17) {
              *(void *)(a5 + 8 * *(unsigned int *)i) = v16;
            }
            if (__nel == ++v14) {
              return result;
            }
          }
        }
        if (v14 == __nel) {
          break;
        }
        v16 += *(unsigned int *)(v16 + 8) + 13;
      }
      while (v16 < v15);
    }
  }
  else if (v9 >= 0x31)
  {
    unint64_t v10 = a2 + 48;
    unsigned int v11 = &__base[8 * __nel];
    do
    {
      uint64_t result = (char *)bsearch_b((const void *)*(unsigned int *)(v10 + 4), __base, __nel, 8uLL, &__block_literal_global_108);
      if (result)
      {
        do
        {
          __int16 v12 = result;
          result -= 8;
        }
        while (result > __base && *((_DWORD *)v12 - 2) == *(_DWORD *)v12);
        if (v12 < v11)
        {
          int v13 = *(_DWORD *)(v10 + 4);
          do
          {
            if (*(_DWORD *)v12 != v13) {
              break;
            }
            *(void *)(a5 + 8 * *((unsigned int *)v12 + 1)) = v10;
            v12 += 8;
          }
          while (v12 < v11);
        }
      }
      v10 += *(unsigned int *)(v10 + 8) + 13;
    }
    while (v10 < a2 + (unint64_t)*(unsigned int *)(a2 + 12));
  }
  return result;
}

uint64_t CatInfoGotten_SDB::oid(CatInfoGotten_SDB *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    return *(void *)v1;
  }
  else {
    return 0;
  }
}

uint64_t CatInfoGotten_SDB::dbo(CatInfoGotten_SDB *this)
{
  return *((void *)this + 5);
}

BOOL si_dboLastModAttr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a5) {
    (*(void (**)(uint64_t, uint64_t, double, void, void, uint64_t))(a9 + 16))(a9, 25, (double)*(unint64_t *)(a5 + 16) / 1000000.0 - *MEMORY[0x1E4F1CF78], 0, a6, a10);
  }
  return a5 != 0;
}

BOOL plistBlock(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = 0;
  switch(a1)
  {
    case 6:
    case 8:
    case 12:
      _MDPlistBytesBeginArray();
      return a4;
    case 7:
    case 9:
    case 13:
      _MDPlistBytesEndArray();
      goto LABEL_16;
    case 10:
      _MDPlistBytesBeginDictionary();
      return a4;
    case 11:
      _MDPlistBytesEndDictionary();
      goto LABEL_16;
    case 14:
    case 28:
    case 29:
      _MDPlistBytesAddCString();
      goto LABEL_16;
    case 15:
      _MDPlistBytesAddBoolean();
      goto LABEL_16;
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      _MDPlistBytesAddInteger();
      goto LABEL_16;
    case 25:
      _MDPlistBytesAddDate();
      goto LABEL_16;
    case 26:
    case 27:
      _MDPlistBytesAddReal();
      goto LABEL_16;
    case 30:
      return _MDPlistBytesAddRawInternedCStringKey() != 0;
    case 31:
      _MDPlistBytesAddRawInternedCStringKeyWithString();
      goto LABEL_16;
    case 33:
      _MDPlistBytesAddData();
      goto LABEL_16;
    case 34:
      __MDPlistBytesAddObject();
LABEL_16:
      BOOL result = 0;
      break;
    default:
      return result;
  }
  return result;
}

BOOL __writeDBOToPlistBytes_block_invoke_4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return plistBlock(a2, a3, a4, a6);
}

uint64_t si_livequery_hash(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void ___bt_findBulk_block_invoke_80(uint64_t a1, const char *a2)
{
  uint64_t v346 = *MEMORY[0x1E4F143B8];
  if (*(void *)(*(void *)(a1 + 56) + 8 * (void)a2) >= (unint64_t)*(unsigned int *)(a1 + 112)
    || *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    return;
  }
  makeThreadId();
  uint64_t v3 = *(void **)(a1 + 72);
  v322 = (void *)a1;
  uint64_t v318 = *(void *)(a1 + 64);
  memcpy((void *)(v318 + 1296 * (void)a2), v3, 0x510uLL);
  v317 = (uint64_t *)(v318 + 1296 * (void)a2 + 1160);
  uint64_t v285 = v318 + 1296 * (void)a2;
  if (*v317)
  {
    uint64_t v4 = v318 + 1296 * (void)a2;
    size_t v5 = *(unsigned int *)(v4 + 1152);
    if (v5 >> 14) {
      BOOL v6 = 0;
    }
    else {
      BOOL v6 = 8 * v5 > *MEMORY[0x1E4F14B00];
    }
    if (v6) {
      ++sTotal;
    }
    uint64_t v7 = (_DWORD *)(v4 + 1152);
    unsigned int v8 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, v5, 8uLL, 0x31F9A007uLL);
    if (!v8 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
    }
    uint64_t *v317 = (uint64_t)v8;
    if (*v7)
    {
      uint64_t v9 = MEMORY[0x1E4F14500];
      unint64_t v10 = 0;
      do
      {
        __int16 v12 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x48uLL, 0x6085D6BuLL);
        if (!v12 && os_log_type_enabled(v9, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_fault_impl(&dword_1BD672000, v9, OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
        }
        *(void *)(*v317 + 8 * v10) = v12;
        uint64_t v11 = *(void *)(*v317 + 8 * v10);
        *(unsigned char *)uint64_t v11 = 0;
        *(_OWORD *)(v11 + 44) = 0u;
        *(_OWORD *)(v11 + 16) = 0u;
        *(_OWORD *)(v11 + 32) = 0u;
        *(void *)(v11 + 64) = 0xFFFFFFFFLL;
        *(_DWORD *)(v11 + 8) = 0;
        ++v10;
      }
      while (v10 < *v7);
    }
  }
  v315 = (uint64_t *)(v318 + 1296 * (void)a2 + 1168);
  if (*v315)
  {
    uint64_t v13 = v318 + 1296 * (void)a2;
    size_t v14 = *(unsigned int *)(v13 + 1152);
    if (v14 >> 14) {
      BOOL v15 = 0;
    }
    else {
      BOOL v15 = 8 * v14 > *MEMORY[0x1E4F14B00];
    }
    if (v15) {
      ++sTotal;
    }
    unint64_t v16 = (unsigned int *)(v13 + 1152);
    unsigned int v17 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, v14, 8uLL, 0x31F9A007uLL);
    if (!v17 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
    }
    uint64_t *v315 = (uint64_t)v17;
    unint64_t v18 = *v16;
    if (v18)
    {
      unint64_t v19 = 0;
      do
      {
        unint64_t v22 = v18;
        if (*(void *)(v3[146] + 8 * v19))
        {
          if (*MEMORY[0x1E4F14B00] <= 0x47uLL) {
            ++sTotal;
          }
          uint64_t v20 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x48uLL, 0x31F9A007uLL);
          if (!v20 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
          }
          *(void *)(*v315 + 8 * v19) = v20;
          uint64_t v21 = *(void *)(*v315 + 8 * v19);
          *(unsigned char *)uint64_t v21 = 0;
          *(_OWORD *)(v21 + 44) = 0u;
          *(_OWORD *)(v21 + 16) = 0u;
          *(_OWORD *)(v21 + 32) = 0u;
          *(void *)(v21 + 64) = 0xFFFFFFFFLL;
          *(_DWORD *)(v21 + 8) = 0;
          unint64_t v22 = *v16;
        }
        ++v19;
        unint64_t v18 = v22;
      }
      while (v19 < v22);
    }
  }
  char v331 = 0;
  int v23 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x18uLL, 0x6085D6BuLL);
  int v24 = v322;
  if (v23)
  {
    uint64_t v25 = v322[10] + 160;
    uint64_t v26 = (uint64_t)v23;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
    }
    uint64_t v25 = v322[10] + 160;
    uint64_t v26 = 0;
  }
  storage_reader_init(v25, v26);
  uint64_t v27 = *(void *)(v322[11] + 8 * (void)a2);
  uint64_t v28 = v322[12];
  if (v28 && !*(unsigned char *)(v28 + 8))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "Skipping because index is shut down", buf, 2u);
    }
    goto LABEL_341;
  }
  uint64_t v312 = *(void *)(v322[7] + 8 * (void)a2);
  int v29 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v30 = setThreadIdAndInfo(-1, (long long *)sIndexExceptionCallbacks, v28, 0, v29);
  unsigned int v329 = HIDWORD(v30);
  unsigned int v330 = v30;
  unsigned int v327 = v32;
  unsigned int v328 = v31;
  uint64_t v33 = *(void *)&threadData[18 * v30 + 2];
  uint64_t v34 = v33 + 320 * HIDWORD(v30);
  *(unsigned char *)(v34 + 216) = 0;
  int v35 = *(_DWORD *)(v34 + 312);
  __int16 v36 = *(void (**)(void))(v34 + 224);
  if (v36) {
    v36(*(void *)(v33 + 320 * HIDWORD(v30) + 288));
  }
  if (!_setjmp((int *)v34))
  {
    int v316 = v35;
    int v44 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
    unint64_t v45 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v44);
    unint64_t v46 = v45;
    unsigned int v326 = v47;
    unsigned int v325 = v48;
    uint64_t v49 = *(void *)&threadData[18 * v45 + 2];
    uint64_t v50 = v49 + 320 * HIDWORD(v45);
    int v313 = *(_DWORD *)(v50 + 312);
    uint64_t v51 = *(void (**)(void))(v50 + 224);
    if (v51) {
      v51(*(void *)(v49 + 320 * HIDWORD(v45) + 288));
    }
    int v314 = v44;
    if (_setjmp((int *)v50))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
      }
      *(_DWORD *)(v50 + 312) = v313;
      int v52 = v35;
      if (__THREAD_SLOT_KEY)
      {
        unsigned int v53 = pthread_getspecific(__THREAD_SLOT_KEY);
        if (!v53) {
          goto LABEL_326;
        }
      }
      else
      {
        makeThreadId();
        unsigned int v53 = pthread_getspecific(__THREAD_SLOT_KEY);
        if (!v53) {
          goto LABEL_326;
        }
      }
      uint64_t v54 = v53;
      if ((unint64_t)v53 < 0x801)
      {
LABEL_66:
        uint64_t v55 = (uint64_t)v54 - 1;
        CFDictionaryRef v56 = &threadData[18 * ((uint64_t)v54 - 1)];
        unsigned int v58 = v56[14];
        unsigned int v57 = v56 + 14;
        if (v58 > v325)
        {
          do
            CIOnThreadCleanUpPop(v55);
          while (*v57 > v325);
        }
        dropThreadId(v46, 1, v314);
        CICleanUpReset(v46, v326);
LABEL_338:
        uint64_t v276 = *(void *)&threadData[18 * v330 + 2];
        uint64_t v277 = v276 + 320 * v329;
        *(_DWORD *)(v277 + 312) = v52;
        long long v278 = *(void (**)(void))(v277 + 232);
        if (v278) {
          v278(*(void *)(v276 + 320 * v329 + 288));
        }
        dropThreadId(v330, 0, v29);
        goto LABEL_341;
      }
LABEL_326:
      makeThreadId();
      uint64_t v54 = pthread_getspecific(__THREAD_SLOT_KEY);
      goto LABEL_66;
    }
    if (v23 && !*((unsigned char *)v23 + 16))
    {
      int v52 = v35;
      int v68 = v44;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "Skipping because index is shut down", buf, 2u);
      }
      goto LABEL_335;
    }
    int v59 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
    unint64_t v60 = setThreadIdAndInfo(-1, sStorageReaderExceptionCallbacks, (uint64_t)v23, 0, v59);
    unint64_t v61 = v60;
    unsigned int v324 = v62;
    unsigned int v323 = v63;
    uint64_t v64 = *(void *)&threadData[18 * v60 + 2];
    uint64_t v65 = v64 + 320 * HIDWORD(v60);
    int v310 = *(_DWORD *)(v65 + 312);
    int32x4_t v66 = *(void (**)(void))(v65 + 224);
    if (v66) {
      v66(*(void *)(v64 + 320 * HIDWORD(v60) + 288));
    }
    if (_setjmp((int *)v65))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
      }
      *(_DWORD *)(v65 + 312) = v310;
      pthread_key_t v67 = __THREAD_SLOT_KEY;
      int v52 = v35;
      int v68 = v314;
      if (!__THREAD_SLOT_KEY)
      {
        makeThreadId();
        pthread_key_t v67 = __THREAD_SLOT_KEY;
      }
      int v69 = v59;
      uint64_t v70 = pthread_getspecific(v67);
      if (!v70 || (CFArrayRef v71 = v70, (unint64_t)v70 >= 0x801))
      {
        makeThreadId();
        CFArrayRef v71 = pthread_getspecific(__THREAD_SLOT_KEY);
      }
      uint64_t v72 = (uint64_t)v71 - 1;
      CFArrayRef v73 = &threadData[18 * ((uint64_t)v71 - 1)];
      unsigned int v75 = v73[14];
      uint64_t v74 = v73 + 14;
      if (v75 > v323)
      {
        do
          CIOnThreadCleanUpPop(v72);
        while (*v74 > v323);
      }
      dropThreadId(v61, 1, v69);
      CICleanUpReset(v61, v324);
LABEL_335:
      uint64_t v273 = *(void *)&threadData[18 * v46 + 2];
      uint64_t v274 = v273 + 320 * HIDWORD(v46);
      *(_DWORD *)(v274 + 312) = v313;
      unsigned int v275 = *(void (**)(void))(v274 + 232);
      if (v275) {
        v275(*(void *)(v273 + 320 * HIDWORD(v46) + 288));
      }
      dropThreadId(v46, 0, v68);
      goto LABEL_338;
    }
    int v311 = v59;
    int v319 = v29;
    uint64_t v76 = v312;
    unsigned int v77 = v27 - v312;
    v321 = v23;
    if (dword_1E9FC90A8 >= 5)
    {
      int v266 = *__error();
      int v267 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v267, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v268 = *(void *)(v322[7] + 8 * (void)a2);
        uint64_t v269 = *(void *)(v322[11] + 8 * (void)a2);
        *(_DWORD *)long long buf = 134218496;
        unint64_t v342 = (unint64_t)a2;
        *(_WORD *)v343 = 2048;
        *(void *)&v343[2] = v268;
        *(_WORD *)&v343[10] = 2048;
        *(void *)&long long v344 = v269;
        _os_log_impl(&dword_1BD672000, v267, OS_LOG_TYPE_DEFAULT, "Applier %lu starting at %lu ending at %lu", buf, 0x20u);
      }
      *__error() = v266;
      int v24 = v322;
      uint64_t v76 = v312;
      unint64_t v78 = v77;
      if (v77) {
        goto LABEL_87;
      }
    }
    else
    {
      unint64_t v78 = v77;
      if (v77)
      {
LABEL_87:
        v308 = (unsigned char *)(v318 + 1296 * (void)a2 + 88);
        uint64_t v79 = v318 + 1296 * (void)a2;
        v306 = (uint64_t *)(v79 + 1144);
        v307 = (unsigned char *)(v79 + 1289);
        v305 = (_DWORD *)(v79 + 48);
        v304 = (int *)(v79 + 1140);
        v302 = (void *)(v79 + 1240);
        v303 = (_DWORD *)(v79 + 1152);
        v300 = (void *)(v79 + 1256);
        v301 = (void *)(v79 + 1248);
        v298 = (unsigned __int8 *)(v79 + 89);
        v299 = (_DWORD *)(v79 + 1280);
        v297 = (unsigned __int8 *)(v79 + 89);
        v295 = (char *)(v79 + 91);
        v296 = (char *)(v79 + 90);
        v293 = (char *)(v79 + 93);
        v294 = (char *)(v79 + 92);
        v292 = (char *)(v79 + 94);
        uint64_t v80 = 0;
        unint64_t v309 = v78;
        do
        {
          uint64_t v81 = v80;
          uint64_t v82 = (unsigned char *)v24[13];
          int v83 = *v82;
          if (*v82)
          {
            uint64_t v84 = v24[5];
            if (!v84) {
              goto LABEL_91;
            }
            goto LABEL_90;
          }
          int v291 = *v82;
          uint64_t v85 = *((unsigned int *)v24 + 29);
          uint64_t v86 = v24[4];
          v290 = v81;
          unsigned int v87 = &v81[v76];
          uint64_t v88 = *(int **)(*(void *)(v285 + 40) + 8 * (void)v87);
          int v89 = *v88;
          int v289 = v88[1];
          uint64_t v90 = v88 + 3;
          uint64_t v91 = v88 + 2;
          if ((v89 & 3) != 0) {
            uint64_t v92 = v90;
          }
          else {
            uint64_t v92 = v91;
          }
          memcpy(v308, v92, v289);
          v308[v289 + 1] = 0;
          uint64_t v93 = *(unsigned int **)(*(void *)(v285 + 40) + 8 * (void)v87);
          unint64_t v94 = (unint64_t)*v93 >> 3;
          if (dword_1E9FC90A8 >= 5)
          {
            int v260 = *__error();
            unint64_t v261 = _SILogForLogForCategory(1);
            if (os_log_type_enabled(v261, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 134218754;
              unint64_t v342 = (unint64_t)v290;
              *(_WORD *)v343 = 1024;
              *(_DWORD *)&v343[2] = v94;
              *(_WORD *)&v343[6] = 1024;
              *(_DWORD *)&v343[8] = v289;
              LOWORD(v344) = 2080;
              *(void *)((char *)&v344 + 2) = v318 + 1296 * (void)a2 + 88;
              _os_log_impl(&dword_1BD672000, v261, OS_LOG_TYPE_DEFAULT, "bucket[%ld] %x %d %s\n", buf, 0x22u);
            }
            *__error() = v260;
            int v95 = **(_DWORD **)(*(void *)(v285 + 40) + 8 * (void)v87);
            uint64_t v96 = *(void *)(*(void *)(v285 + 40) + 8 * (void)v87);
            int v23 = v321;
          }
          else
          {
            int v95 = *v93;
            uint64_t v96 = *(void *)(*(void *)(v285 + 40) + 8 * (void)v87);
          }
          uint64_t v97 = *(unsigned int *)(v96 + 4);
          uint64_t v98 = v96 + 12;
          uint64_t v99 = v96 + 8;
          if ((v95 & 3) != 0) {
            uint64_t v100 = v98;
          }
          else {
            uint64_t v100 = v99;
          }
          uint64_t v101 = v100 + v97 + 1;
          uint64_t v81 = v290;
          if (*v307 && v85)
          {
            int v102 = -1;
            uint64_t v103 = 0;
            uint64_t v104 = 0;
            do
            {
              if ((*(unsigned char *)(*v306 + v104 + 16) & 4) == 0 && **(unsigned char **)(*v306 + v104) == 42)
              {
                uint64_t v105 = v103 >> 3;
                if (v102 == -1)
                {
                  if (((*(unsigned __int8 *)(v101 + v105) >> (v103 & 7)) & 1) == 0) {
                    break;
                  }
                  int v102 = v103;
                }
                else
                {
                  *(unsigned char *)(v101 + v105) |= 1 << (v103 & 7);
                }
              }
              ++v103;
              v104 += 64;
            }
            while (v85 != v103);
          }
          uint64_t v288 = v101;
          uint64_t ptr = storage_reader_get_ptr(*(void *)v23, *((void *)v23 + 1), v94 << 6, 8);
          if (ptr == -1
            || (uint64_t v107 = (unsigned __int16 *)storage_reader_get_ptr(*(void *)v23, *((void *)v23 + 1), v94 << 6, 64 << *(unsigned char *)(ptr + 2)), (unint64_t)v107 + 1 <= 1))
          {
            int v108 = *__error();
            uint64_t v109 = _SILogForLogForCategory(0);
            int v24 = v322;
            if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 136315394;
              unint64_t v342 = (unint64_t)"match_function";
              *(_WORD *)v343 = 1024;
              *(_DWORD *)&v343[2] = 3874;
              _os_log_error_impl(&dword_1BD672000, v109, OS_LOG_TYPE_ERROR, "%s:%d: can't resolve flat store page", buf, 0x12u);
            }
            *__error() = v108;
            uint64_t v76 = v312;
            unint64_t v78 = v309;
            int v83 = v291;
            uint64_t v84 = v322[5];
            if (!v84) {
              goto LABEL_91;
            }
LABEL_90:
            (*(void (**)(uint64_t, void *))(v84 + 16))(v84, v23);
            goto LABEL_91;
          }
          unint64_t v287 = v94 << 6;
          long long v344 = 0uLL;
          uint64_t v110 = v306;
          *(_DWORD *)long long buf = *v305;
          unint64_t v342 = 0;
          memset(v343, 0, sizeof(v343));
          unsigned int v111 = *v107;
          *(void *)&long long v344 = v107 + 4;
          unint64_t v112 = v111;
          unint64_t v345 = v111;
          uint64_t v113 = v303;
          uint64_t v114 = v288;
          if (v111)
          {
            uint64_t v115 = v86;
            uint64_t v286 = v86;
            size_t v116 = 0;
            unint64_t v117 = 0;
            uint64_t v118 = 0;
            while (1)
            {
              uint64_t v124 = v118;
              unint64_t v122 = v112;
              uint64_t v125 = v344;
              uint64_t v126 = v118 + 1;
              int v127 = *(char *)(v344 + v118);
              unsigned int v128 = *(unsigned __int8 *)(v344 + v118);
              if (v127 < 0)
              {
                if (v128 > 0xBF)
                {
                  if (v128 > 0xDF)
                  {
                    if (v128 > 0xEF)
                    {
                      unsigned int v129 = *(_DWORD *)(v344 + v126);
                      uint64_t v130 = v124 + 5;
                    }
                    else
                    {
                      unsigned int v129 = ((v128 & 0xF) << 24) | (*(unsigned __int8 *)(v344 + v126) << 16) | (*(unsigned __int8 *)(v124 + v344 + 2) << 8) | *(unsigned __int8 *)(v124 + v344 + 3);
                      uint64_t v130 = v124 + 4;
                    }
                  }
                  else
                  {
                    unsigned int v129 = ((v128 & 0x1F) << 16) | (*(unsigned __int8 *)(v344 + v126) << 8) | *(unsigned __int8 *)(v124 + v344 + 2);
                    uint64_t v130 = v124 + 3;
                  }
                }
                else
                {
                  uint64_t v130 = v124 + 2;
                  unsigned int v129 = *(unsigned __int8 *)(v344 + v126) | ((v128 & 0x3F) << 8);
                }
              }
              else
              {
                unsigned int v129 = v128;
                uint64_t v130 = v126;
              }
              if (v129) {
                BOOL v131 = 1;
              }
              else {
                BOOL v131 = v130 == 1;
              }
              if (!v131)
              {
                unsigned int v263 = __si_assert_copy_extra_1921(0);
                v264 = v263;
                int v265 = "";
                if (v263) {
                  int v265 = v263;
                }
                __message_assert("%s:%u: failed assertion '%s' %s %d, %ld", "FlatStore.h", 431, "entry->len > 0 || iter->pageCursor == v2_vInt32Size(0)", v265, 0, v130);
                free(v264);
                if (__valid_fs(-1))
                {
                  MEMORY[0xBAD] = -559038737;
                  abort();
                }
                MEMORY[0xC00] = -559038737;
                abort();
              }
              uint64_t v132 = v130 + 1;
              unsigned int v133 = *(unsigned __int8 *)(v344 + v130);
              if (*(char *)(v344 + v130) < 0)
              {
                if (v133 > 0xBF)
                {
                  if (v133 > 0xDF)
                  {
                    if (v133 > 0xEF)
                    {
                      unsigned int v134 = *(_DWORD *)(v344 + v132);
                      uint64_t v135 = v130 + 5;
                    }
                    else
                    {
                      unsigned int v134 = ((v133 & 0xF) << 24) | (*(unsigned __int8 *)(v344 + v132) << 16) | (*(unsigned __int8 *)(v130 + v344 + 2) << 8) | *(unsigned __int8 *)(v130 + v344 + 3);
                      uint64_t v135 = v130 + 4;
                    }
                  }
                  else
                  {
                    unsigned int v134 = ((v133 & 0x1F) << 16) | (*(unsigned __int8 *)(v344 + v132) << 8) | *(unsigned __int8 *)(v130 + v344 + 2);
                    uint64_t v135 = v130 + 3;
                  }
                }
                else
                {
                  uint64_t v135 = v130 + 2;
                  unsigned int v134 = *(unsigned __int8 *)(v344 + v132) | ((v133 & 0x3F) << 8);
                }
              }
              else
              {
                unsigned int v134 = *(unsigned __int8 *)(v344 + v130);
                uint64_t v135 = v130 + 1;
              }
              uint64_t v136 = v129;
              unint64_t v137 = v135 + v129;
              unint64_t v138 = v137;
              *((void *)&v344 + 1) = v137;
              if (v137 > v122) {
                goto LABEL_304;
              }
              if (*(_DWORD *)buf)
              {
                unint64_t v139 = v342;
                unint64_t v342 = v2_readVInt64_2086(v344, (uint64_t *)&v344 + 1) + v139;
                unint64_t v117 = HIDWORD(v342);
                unsigned int v140 = v342;
                unint64_t VInt64_2086 = v2_readVInt64_2086(v344, (uint64_t *)&v344 + 1);
                if (VInt64_2086)
                {
                  *(void *)v343 += VInt64_2086;
                  size_t v116 = *(void *)v343;
                  unsigned int v142 = v140;
                }
                else
                {
                  unsigned int v142 = v140;
                  size_t v116 = 0;
                }
                uint64_t v110 = v306;
                uint64_t v113 = v303;
                uint64_t v114 = v288;
                uint64_t v115 = v286;
              }
              else
              {
                unint64_t v143 = v137 + 1;
                unsigned int v144 = *(unsigned __int8 *)(v344 + v137);
                if (*(char *)(v344 + v137) < 0)
                {
                  if (v144 > 0xBF)
                  {
                    if (v144 > 0xDF)
                    {
                      if (v144 > 0xEF)
                      {
                        int v145 = *(_DWORD *)(v344 + v143);
                        unint64_t v146 = v137 + 5;
                      }
                      else
                      {
                        int v145 = ((v144 & 0xF) << 24) | (*(unsigned __int8 *)(v344 + v143) << 16) | (*(unsigned __int8 *)(v137 + v344 + 2) << 8) | *(unsigned __int8 *)(v137 + v344 + 3);
                        unint64_t v146 = v137 + 4;
                      }
                    }
                    else
                    {
                      int v145 = ((v144 & 0x1F) << 16) | (*(unsigned __int8 *)(v344 + v143) << 8) | *(unsigned __int8 *)(v137 + v344 + 2);
                      unint64_t v146 = v137 + 3;
                    }
                  }
                  else
                  {
                    unint64_t v146 = v137 + 2;
                    int v145 = *(unsigned __int8 *)(v344 + v143) | ((v144 & 0x3F) << 8);
                  }
                  unint64_t v143 = v146;
                }
                else
                {
                  int v145 = *(unsigned __int8 *)(v344 + v137);
                }
                *((void *)&v344 + 1) = v143;
                unsigned int v142 = v145;
              }
              unint64_t v138 = *((void *)&v344 + 1);
              if (*((void *)&v344 + 1) > v345)
              {
                uint64_t v262 = __si_assert_copy_extra_1921(0);
                __message_assert("%s:%u: failed assertion '%s' %s ");
                goto LABEL_317;
              }
              unsigned int v147 = v129 + v289 + v134;
              if (v147 > 0x413) {
                break;
              }
              size_t v121 = v116;
              if (v129)
              {
                uint64_t v148 = (unsigned __int8 *)(v125 + v135);
                uint64_t v149 = &v308[v289 + v134];
                do
                {
                  int v150 = *v148++;
                  *v149++ = tcmr[v150];
                  --v136;
                }
                while (v136);
              }
              v308[v147] = 0;
              int *v304 = v147;
              if (v115)
              {
                size_t v119 = v116;
                int v120 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v115 + 16))(v115, v285, v114);
                size_t v121 = v119;
                uint64_t v114 = v288;
                uint64_t v113 = v303;
                uint64_t v110 = v306;
                int v23 = v321;
                if (!v120) {
                  goto LABEL_309;
                }
              }
              else
              {
                int v23 = v321;
                if (*v113)
                {
                  uint64_t v151 = 0;
                  uint64_t v283 = v142 | (v117 << 32);
                  size_t v284 = v116;
                  while (1)
                  {
                    if (((*(unsigned __int8 *)(v114 + (v151 >> 3)) >> (v151 & 7)) & 1) == 0) {
                      goto LABEL_171;
                    }
                    uint64_t v152 = *v110;
                    uint64_t v153 = (unsigned __int8 **)(*v110 + (v151 << 6));
                    void *v302 = v153;
                    uint64_t v154 = *v317;
                    if (*v317) {
                      uint64_t v154 = *(void *)(v154 + 8 * v151);
                    }
                    void *v301 = v154;
                    uint64_t v155 = *v315;
                    if (*v315) {
                      uint64_t v155 = *(void *)(v155 + 8 * v151);
                    }
                    void *v300 = v155;
                    ++*v299;
                    int v156 = *(_DWORD *)(v152 + (v151 << 6) + 16);
                    if ((v156 & 0x610) != 0 || **(unsigned char **)v285) {
                      goto LABEL_171;
                    }
                    if ((v156 & 4) != 0) {
                      break;
                    }
                    if ((v156 & 0x8000) == 0 && **v153 == 42 && !(*v153)[1])
                    {
                      size_t v230 = v121;
                      int v231 = *(_DWORD *)(v152 + (v151 << 6) + 16);
                      uint64_t v232 = termFieldMatch(*(_DWORD *)(v152 + (v151 << 6) + 20), v308, *v304, v231);
                      LOWORD(v156) = v231;
                      size_t v121 = v230;
                      uint64_t v114 = v288;
                      uint64_t v113 = v303;
                      uint64_t v110 = v306;
                      if (!v232) {
                        goto LABEL_171;
                      }
                      goto LABEL_264;
                    }
                    uint64_t v157 = v152 + (v151 << 6);
                    uint64_t v159 = *(void *)(v157 + 32);
                    uint64_t v158 = *(void *)(v157 + 40);
                    if (!v159)
                    {
                      if (v158)
                      {
LABEL_185:
                        if (*v308 != 1)
                        {
                          size_t v217 = v121;
                          int v218 = termPropertyID(v308, *v304);
                          size_t v121 = v217;
                          uint64_t v114 = v288;
                          uint64_t v113 = v303;
                          uint64_t v110 = v306;
                          uint64_t v163 = 0;
                          int v162 = v218;
                          goto LABEL_271;
                        }
                        int v160 = *v297;
                        if (v160 == 2)
                        {
                          char v161 = *v296;
                          if ((*v296 & 0x80000000) == 0)
                          {
                            int v162 = *v296;
                            uint64_t v163 = 3;
                            goto LABEL_271;
                          }
                          int v238 = *v295;
                          if ((*v295 & 0x80000000) == 0)
                          {
                            int v239 = v161 & 0x7F | (v238 << 7);
                            uint64_t v240 = 4;
                            goto LABEL_270;
                          }
                          int v245 = *v294;
                          if ((*v294 & 0x80000000) == 0)
                          {
                            int v162 = ((v238 & 0x7F) << 7) | (v245 << 14) | v161 & 0x7F;
                            uint64_t v163 = 5;
                            goto LABEL_271;
                          }
                          int v248 = *v293;
                          if ((*v293 & 0x80000000) == 0)
                          {
                            int v249 = ((v245 & 0x7F) << 14) | (v248 << 21) | ((v238 & 0x7F) << 7) | v161 & 0x7F;
                            uint64_t v163 = 6;
                            goto LABEL_291;
                          }
                          int v251 = *v292;
                          if (v251 < 0) {
                            goto LABEL_355;
                          }
                          int v252 = ((v248 & 0x7F) << 21) | (v251 << 28) | ((v245 & 0x7F) << 14) | ((v238 & 0x7F) << 7) | v161 & 0x7F;
                          uint64_t v163 = 7;
LABEL_296:
                          int v162 = v252;
                        }
                        else
                        {
                          if ((v160 & 0x80) == 0)
                          {
                            int v162 = *v297;
                            uint64_t v163 = 2;
                            goto LABEL_271;
                          }
                          int v241 = *v296;
                          if (*v296 < 0)
                          {
                            int v246 = *v295;
                            if (*v295 < 0)
                            {
                              int v250 = *v294;
                              if (*v294 < 0)
                              {
                                int v253 = *v293;
                                if (v253 < 0)
                                {
LABEL_355:
                                  uint64_t v262 = __si_assert_copy_extra_1921(0);
                                  __message_assert("%s:%u: failed assertion '%s' %s readVInt32: exceeds max size for uint32_t");
LABEL_317:
                                  free(v262);
                                  if (__valid_fs(-1))
                                  {
                                    MEMORY[0xBAD] = -559038737;
                                    abort();
                                  }
                                  MEMORY[0xC00] = -559038737;
                                  abort();
                                }
                                int v252 = ((v250 & 0x7F) << 21) | (v253 << 28) | ((v246 & 0x7F) << 14) | ((v241 & 0x7F) << 7) | v160 & 0x7F;
                                uint64_t v163 = 6;
                                goto LABEL_296;
                              }
                              int v249 = ((v246 & 0x7F) << 14) | (v250 << 21) | ((v241 & 0x7F) << 7) | v160 & 0x7F;
                              uint64_t v163 = 5;
LABEL_291:
                              int v162 = v249;
                            }
                            else
                            {
                              int v162 = ((v241 & 0x7F) << 7) | (v246 << 14) | v160 & 0x7F;
                              uint64_t v163 = 4;
                            }
                          }
                          else
                          {
                            int v239 = v160 & 0x7F | (v241 << 7);
                            uint64_t v240 = 3;
LABEL_270:
                            uint64_t v242 = v240;
                            int v162 = v239;
                            uint64_t v163 = v242;
                          }
                        }
LABEL_271:
                        if (*(_DWORD *)(v152 + (v151 << 6) + 20) == v162)
                        {
                          int v243 = *v304 - v163;
                          while (v243 >= 1)
                          {
                            unsigned int v244 = *(unsigned __int8 *)(v318 + 1296 * (void)a2 + v163 - 1 + v243 + 88);
                            if (v244 > 5)
                            {
                              size_t v214 = v121;
                              char TermIDsContextMatchPatternsReg = __findTermIDsContextMatchPatternsRegExMatch();
                              goto LABEL_278;
                            }
                            --v243;
                            if ((v244 & 0xFFFFFFFD) != 1) {
                              goto LABEL_171;
                            }
                          }
                        }
                        goto LABEL_171;
                      }
                      uint64_t v173 = v152 + (v151 << 6);
                      unsigned int v174 = *v304;
                      if (*(_DWORD *)(v173 + 20) == 1)
                      {
                        size_t v175 = v121;
                        __int16 v176 = v156;
                        int v177 = termPropertyID(v308, v174);
                        size_t v121 = v175;
                        uint64_t v114 = v288;
                        uint64_t v113 = v303;
                        uint64_t v110 = v306;
                        if (v177 != 1) {
                          goto LABEL_171;
                        }
                        LOWORD(v156) = v176;
                        unsigned int v174 = *v304;
                      }
                      uint64_t v178 = *v153;
                      uint64_t v179 = *v153;
                      int v180 = *(_DWORD *)(v173 + 24);
                      unsigned int v181 = **v153;
                      if (v181 > 4)
                      {
                        if (v181 == 42)
                        {
                          size_t v219 = v121;
                          __int16 v220 = v156;
                          int v221 = termPropertyID(v308, v174);
                          LOWORD(v156) = v220;
                          size_t v121 = v219;
                          uint64_t v114 = v288;
                          uint64_t v113 = v303;
                          uint64_t v110 = v306;
                          uint64_t v190 = (unsigned __int8 *)(v318 + 1296 * (void)a2 + 88);
                          if (v221 == 2) {
                            goto LABEL_171;
                          }
                        }
                        else
                        {
                          uint64_t v190 = (unsigned __int8 *)(v318 + 1296 * (void)a2 + 88);
                        }
                      }
                      else
                      {
                        if (v181 != *v308) {
                          goto LABEL_171;
                        }
                        unint64_t v182 = v178 + 1;
                        int v183 = v178[1];
                        if (v183 != *v297) {
                          goto LABEL_171;
                        }
                        char v184 = v183;
                        unint64_t v185 = v182;
                        uint64_t v186 = (unsigned __int8 *)v296;
                        if (v183 == 2)
                        {
                          int v189 = v179[2];
                          int v188 = v179 + 2;
                          char v187 = v189;
                          if (v189 != *v296) {
                            goto LABEL_171;
                          }
                          char v184 = v187;
                          unint64_t v185 = v188;
                          uint64_t v186 = (unsigned __int8 *)v295;
                        }
                        uint64_t v179 = v185 + 1;
                        if (v184 < 0)
                        {
                          int v247 = *v179;
                          if (v247 != *v186) {
                            goto LABEL_171;
                          }
                          uint64_t v179 = v185 + 2;
                          if ((char)v247 < 0)
                          {
                            int v254 = *v179;
                            if (v254 != v186[1]) {
                              goto LABEL_171;
                            }
                            if ((char)v254 < 0)
                            {
                              int v255 = (char)v185[3];
                              if (v255 < 0 || v186[2] != v255) {
                                goto LABEL_171;
                              }
                              uint64_t v190 = v186 + 3;
                              uint64_t v179 = v185 + 4;
                            }
                            else
                            {
                              uint64_t v190 = v186 + 2;
                              uint64_t v179 = v185 + 3;
                            }
                          }
                          else
                          {
                            uint64_t v190 = v186 + 1;
                          }
                        }
                        else
                        {
                          uint64_t v190 = v186;
                        }
                      }
                      long long v233 = v179;
                      size_t v234 = v121;
                      __int16 v235 = v156;
                      int v236 = matche(v233, v190, v180, 0, 0);
                      LOWORD(v156) = v235;
                      size_t v121 = v234;
                      uint64_t v114 = v288;
                      uint64_t v113 = v303;
                      uint64_t v110 = v306;
                      if (v236 != 1) {
                        goto LABEL_171;
                      }
                      goto LABEL_264;
                    }
                    if (v158) {
                      goto LABEL_185;
                    }
                    size_t v214 = v121;
                    unint64_t v215 = termFieldMatch(*(_DWORD *)(v152 + (v151 << 6) + 20), v308, *v304, *(_DWORD *)(v152 + (v151 << 6) + 16));
                    size_t v121 = v214;
                    uint64_t v114 = v288;
                    uint64_t v113 = v303;
                    uint64_t v110 = v306;
                    if (v215)
                    {
                      *(void *)v332 = 0;
                      char TermIDsContextMatchPatternsReg = icu_search_match();
LABEL_278:
                      size_t v121 = v214;
                      uint64_t v114 = v288;
                      uint64_t v113 = v303;
                      uint64_t v110 = v306;
                      if (TermIDsContextMatchPatternsReg)
                      {
                        char v237 = 1;
LABEL_170:
                        findHandleMatch(v285, v283, v284, v308, *v304, v237);
                        uint64_t v110 = v306;
                        uint64_t v113 = v303;
                        uint64_t v114 = v288;
                        size_t v121 = v214;
                      }
                    }
LABEL_171:
                    if (++v151 >= (unint64_t)*v113) {
                      goto LABEL_121;
                    }
                  }
                  int v164 = *v308;
                  if ((v164 - 2) > 2 || v164 != **v153) {
                    goto LABEL_171;
                  }
                  uint64_t v165 = *v153 + 1;
                  if ((v156 & 0x20) != 0)
                  {
                    uint64_t v191 = v298;
                    do
                    {
                      unsigned int v193 = *v191++;
                      unsigned int v192 = v193;
                      unsigned int v195 = *v165++;
                      unsigned int v194 = v195;
                      if (v192) {
                        BOOL v196 = v192 == v194;
                      }
                      else {
                        BOOL v196 = 0;
                      }
                    }
                    while (v196);
                    BOOL v197 = v194 != 0;
                    BOOL v198 = v192 < v194;
                    if (v192) {
                      BOOL v199 = v198;
                    }
                    else {
                      BOOL v199 = v197;
                    }
                    if (v199) {
                      goto LABEL_171;
                    }
                  }
                  else
                  {
                    uint64_t v166 = v298;
                    do
                    {
                      unsigned int v168 = *v166++;
                      unsigned int v167 = v168;
                      unsigned int v170 = *v165++;
                      unsigned int v169 = v170;
                      if (v167) {
                        BOOL v171 = v167 == v169;
                      }
                      else {
                        BOOL v171 = 0;
                      }
                    }
                    while (v171);
                    if (v167) {
                      BOOL v172 = v167 >= v169;
                    }
                    else {
                      BOOL v172 = 0;
                    }
                    if (!v172) {
                      goto LABEL_171;
                    }
                  }
                  unsigned int v200 = *v308;
                  uint64_t v201 = *(unsigned __int8 **)(v152 + (v151 << 6) + 8);
                  unsigned int v202 = *v201;
                  BOOL v203 = v164 == 0;
                  BOOL v204 = v164 != v202 || v164 == 0;
                  if ((v156 & 0x40) != 0)
                  {
                    if (!v204)
                    {
                      uint64_t v222 = v201 + 1;
                      uint64_t v223 = v298;
                      do
                      {
                        unsigned int v225 = *v223++;
                        unsigned int v224 = v225;
                        BOOL v226 = v225 == 0;
                        unsigned int v228 = *v222++;
                        unsigned int v227 = v228;
                        if (v224) {
                          BOOL v229 = v224 == v227;
                        }
                        else {
                          BOOL v229 = 0;
                        }
                      }
                      while (v229);
                      unsigned int v202 = v227;
                      unsigned int v200 = v224;
                      LOBYTE(v203) = v226;
                    }
                    if (v200 >= v202 && !v203) {
                      goto LABEL_171;
                    }
                  }
                  else
                  {
                    if (!v204)
                    {
                      float v205 = v201 + 1;
                      uint64_t v206 = v298;
                      do
                      {
                        unsigned int v208 = *v206++;
                        unsigned int v207 = v208;
                        BOOL v209 = v208 == 0;
                        unsigned int v211 = *v205++;
                        unsigned int v210 = v211;
                        if (v207) {
                          BOOL v212 = v207 == v210;
                        }
                        else {
                          BOOL v212 = 0;
                        }
                      }
                      while (v212);
                      unsigned int v202 = v210;
                      unsigned int v200 = v207;
                      BOOL v203 = v209;
                    }
                    if (v202) {
                      int v213 = -1;
                    }
                    else {
                      int v213 = 0;
                    }
                    if (!v203) {
                      int v213 = (v200 < v202) << 31;
                    }
                    if ((v213 & 0x80000000) == 0) {
                      goto LABEL_171;
                    }
                  }
LABEL_264:
                  if ((v156 & 0x8000) != 0) {
                    goto LABEL_171;
                  }
                  size_t v214 = v121;
                  char v237 = 0;
                  goto LABEL_170;
                }
              }
LABEL_121:
              uint64_t v118 = *((void *)&v344 + 1);
              unint64_t v112 = v345;
              unint64_t v122 = v345;
              unint64_t v123 = *((void *)&v344 + 1);
              size_t v116 = v121;
              if (*((void *)&v344 + 1) >= v345) {
                goto LABEL_305;
              }
            }
            unint64_t v122 = v345;
LABEL_304:
            unint64_t v123 = v138;
            int v23 = v321;
LABEL_305:
            if (v123 != v122)
            {
              unint64_t v256 = v123;
              unint64_t v257 = v122;
              int v258 = *__error();
              v259 = _SILogForLogForCategory(0);
              if (os_log_type_enabled(v259, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v332 = 136316162;
                *(void *)&v332[4] = "match_function";
                __int16 v333 = 1024;
                int v334 = 3912;
                __int16 v335 = 2048;
                unint64_t v336 = v287;
                __int16 v337 = 2048;
                unint64_t v338 = v256;
                __int16 v339 = 2048;
                unint64_t v340 = v257;
                _os_log_error_impl(&dword_1BD672000, v259, OS_LOG_TYPE_ERROR, "%s:%d: invalid flat store page (0x%llx). cursor(%ld) != end(%ld)", v332, 0x30u);
              }
              *__error() = v258;
            }
          }
LABEL_309:
          int v24 = v322;
          uint64_t v76 = v312;
          unint64_t v78 = v309;
          int v83 = v291;
          uint64_t v81 = v290;
          uint64_t v84 = v322[5];
          if (v84) {
            goto LABEL_90;
          }
LABEL_91:
          uint64_t v80 = v81 + 1;
        }
        while ((unint64_t)(v81 + 1) < v78 && !v83);
      }
    }
    char v331 = 1;
    uint64_t v270 = *(void *)&threadData[18 * v61 + 2];
    uint64_t v271 = v270 + 320 * HIDWORD(v61);
    *(_DWORD *)(v271 + 312) = v310;
    unsigned int v272 = *(void (**)(void))(v271 + 232);
    if (v272) {
      v272(*(void *)(v270 + 320 * HIDWORD(v61) + 288));
    }
    dropThreadId(v61, 0, v311);
    int v29 = v319;
    int v52 = v316;
    int v68 = v314;
    goto LABEL_335;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
  }
  *(_DWORD *)(v34 + 312) = v35;
  pthread_key_t v37 = __THREAD_SLOT_KEY;
  if (!__THREAD_SLOT_KEY)
  {
    makeThreadId();
    pthread_key_t v37 = __THREAD_SLOT_KEY;
  }
  __int16 v38 = pthread_getspecific(v37);
  if (!v38 || (int v39 = v38, (unint64_t)v38 >= 0x801))
  {
    makeThreadId();
    int v39 = pthread_getspecific(__THREAD_SLOT_KEY);
  }
  uint64_t v40 = (uint64_t)v39 - 1;
  unint64_t v41 = &threadData[18 * ((uint64_t)v39 - 1)];
  unsigned int v43 = v41[14];
  unint64_t v42 = v41 + 14;
  if (v43 > v327)
  {
    do
      CIOnThreadCleanUpPop(v40);
    while (*v42 > v327);
  }
  dropThreadId(v330, 1, v29);
  CICleanUpReset(v330, v328);
LABEL_341:
  uint64_t v279 = (atomic_uint *)*((void *)v23 + 1);
  if (v279 && atomic_fetch_add(v279 + 2, 0xFFFFFFFF) == 1)
  {
    for (uint64_t i = 73; i != 585; ++i)
    {
      uint64_t v281 = *(void **)&v279[2 * i];
      if (v281)
      {
        if (atomic_fetch_add((atomic_uint *volatile)v281, 0xFFFFFFFF) == 1)
        {
          uint64_t v282 = (void *)v281[1];
          if ((unint64_t)v282 + 1 >= 2) {
            munmap(v282, v281[3] - v281[2]);
          }
          free(v281);
        }
        *(void *)&v279[2 * i] = 0;
      }
    }
    OSAtomicEnqueue(&availableReaders, v279, 0);
  }
  free(v23);
  if (!v331) {
    *(unsigned char *)(*(void *)(v24[6] + 8) + 24) = 1;
  }
}

uint64_t matche(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 a3, void *a4, unsigned __int8 **a5)
{
  size_t v5 = a4;
  unsigned __int8 v6 = a3;
  unint64_t v7 = (unint64_t)a2;
  unsigned int v8 = a1;
  int v195 = 0;
  uint64_t v194 = 0;
  unsigned __int8 v9 = *a1;
  if (!*a1)
  {
    int v23 = 0;
    LOWORD(v21) = 0;
    LOWORD(v20) = 0;
    unint64_t v16 = 0;
    int v178 = 0;
    unsigned int v24 = *a2;
    int v25 = a3 & 2;
    unint64_t v22 = a2;
LABEL_454:
    if (v25 && v24 >= 0xC0)
    {
      unsigned __int16 v125 = v20;
      while (1)
      {
        unint64_t v126 = utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*v22 >> 4];
        __key[0] = v125;
        if (utf8_decodestr(v22, v126, __key, &v194, 2, &v195, 0)) {
          break;
        }
        unsigned __int16 v125 = __key[0];
        v22 += v126;
        if (__key[0] >= 0x300u)
        {
          int v127 = __CFUniCharCombiningBitmap[(unint64_t)__key[0] >> 8];
          if (v127 == 255
            || __CFUniCharCombiningBitmap[(unint64_t)__key[0] >> 8]
            && ((__CFUniCharCombiningBitmap[(LOBYTE(__key[0]) >> 3) + 256 + 32 * v127 - 32] >> (__key[0] & 7)) & 1) != 0)
          {
            continue;
          }
        }
        goto LABEL_464;
      }
      unint64_t v126 = 0;
      int v178 = 1;
LABEL_464:
      v22 -= v126;
      unsigned int v24 = *v22;
      unint64_t v7 = (unint64_t)a2;
    }
    goto LABEL_465;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  int v178 = 0;
  int v189 = 0;
  int v191 = 0;
  LODWORD(v12) = 0;
  uint64_t v183 = 0;
  uint64_t v13 = 0;
  size_t v14 = 0;
  BOOL v15 = 0;
  unint64_t v16 = 0;
  unsigned __int8 v17 = v6;
  unint64_t v18 = 0;
  unint64_t v19 = 0;
  LOWORD(v20) = 0;
  uint64_t v21 = 0;
  unsigned __int8 v185 = v17;
  int v174 = v17 & 2;
  unint64_t v22 = (unsigned __int8 *)v7;
  __int16 v176 = v8;
  while (2)
  {
    unint64_t v26 = *v22;
    if (!*v22) {
      break;
    }
    uint64_t v184 = v13;
    char v27 = v9 - 34;
    BOOL v28 = (v9 - 34) < 0x3Fu;
    if (*(unsigned char *)(v7 + v11))
    {
      ++v11;
    }
    else
    {
      if (v10 > 2 * v11) {
        return 0;
      }
      ++v10;
    }
    uint64_t v192 = v11;
    uint64_t v193 = v10;
    if (v9 == 92)
    {
      unint64_t v30 = v8 + 1;
      unsigned __int8 v9 = v8[1];
      ++v183;
      uint64_t v190 = v8;
      if (!v9)
      {
        uint64_t v190 = v15;
        goto LABEL_165;
      }
    }
    else if (v9 == 42)
    {
      while (v9 == 42)
      {
        unsigned __int8 v29 = *++v8;
        unsigned __int8 v9 = v29;
      }
      if (!v9)
      {
        if (v26 < 0xC0)
        {
          if (!v5) {
            return 1;
          }
        }
        else
        {
          unint64_t v119 = utf8_byte_length_noerror(unsigned char)::utf8_len_table[v26 >> 4];
          __key[0] = v20;
          int v120 = utf8_decodestr(v22, v119, __key, &v194, 2, &v195, 0);
          LOWORD(v20) = __key[0];
          if (v120)
          {
            int v178 = 1;
            break;
          }
          if (__key[0] - 12441 < 2) {
            return 0;
          }
          if (v174) {
            BOOL v121 = 1;
          }
          else {
            BOOL v121 = __key[0] - 768 >= 0x70;
          }
          int v122 = !v121;
          uint64_t result = v122 ^ 1u;
          if (!v121 || !v5) {
            return result;
          }
        }
        if (!v16)
        {
          *a5 = 0;
          *size_t v5 = 0;
          return 1;
        }
LABEL_552:
        *size_t v5 = &v16[-v7];
        uint64_t v165 = (unsigned __int8 *)(v22 - v16);
        goto LABEL_560;
      }
      if (v9 == 92)
      {
        unint64_t v30 = v8 + 1;
        if (v8[1] != v26)
        {
          uint64_t v184 = 0;
          unsigned __int8 v9 = 92;
          unint64_t v30 = v8;
          size_t v14 = v8;
          uint64_t v190 = v15;
          goto LABEL_40;
        }
        unsigned __int8 v9 = *v22;
        uint64_t v190 = v15;
      }
      else
      {
        uint64_t v184 = 0;
        unint64_t v30 = v8;
        uint64_t v190 = v15;
        size_t v14 = v8;
      }
    }
    else
    {
      unint64_t v30 = v8;
      uint64_t v190 = v15;
    }
    if (v9 >= 0xC0u)
    {
      if ((v9 + 29) < 0xCu)
      {
        int v191 = 1;
        goto LABEL_32;
      }
      if (v9 == 239)
      {
        if (v30[1] < 0xACu)
        {
          int v191 = 1;
          unsigned __int8 v9 = -17;
          goto LABEL_32;
        }
      }
      else if (v9 == 226 && v30[1] > 0xB9u)
      {
        int v191 = 1;
        unsigned __int8 v9 = -30;
        goto LABEL_32;
      }
      int v191 = 0;
LABEL_32:
      unint64_t v19 = v30;
      if (v26 < 0xC0) {
        goto LABEL_33;
      }
      goto LABEL_45;
    }
LABEL_40:
    if ((v9 & 0x80u) == 0) {
      unint64_t v19 = 0;
    }
    int v33 = v191;
    if ((v9 & 0x80u) == 0) {
      int v33 = 0;
    }
    int v191 = v33;
    if (v26 < 0xC0)
    {
LABEL_33:
      if ((v26 & 0x80u) == 0) {
        unint64_t v18 = 0;
      }
      int v31 = v189;
      if ((v26 & 0x80u) == 0) {
        int v31 = 0;
      }
      int v189 = v31;
      if (v26 == v9)
      {
LABEL_38:
        uint64_t v21 = 0;
        LOWORD(v20) = 0;
        unint64_t v32 = 0;
        LODWORD(v12) = 0;
        goto LABEL_205;
      }
      goto LABEL_54;
    }
LABEL_45:
    if ((v26 + 29) < 0xCu)
    {
LABEL_46:
      int v189 = 1;
      goto LABEL_53;
    }
    if (v26 == 239)
    {
      if (v22[1] < 0xACu) {
        goto LABEL_46;
      }
    }
    else if (v26 == 226 && v22[1] > 0xB9u)
    {
      goto LABEL_46;
    }
    int v189 = 0;
LABEL_53:
    unint64_t v18 = v22;
    if (v26 == v9) {
      goto LABEL_38;
    }
LABEL_54:
    unsigned int v181 = v16;
    uint64_t v21 = 0;
    unsigned int v20 = 0u;
    unint64_t v32 = 0;
    LODWORD(v12) = 0;
    int v34 = v28 & (0x4000000000000021uLL >> v27);
    BOOL v35 = ((unint64_t)v19 | (unint64_t)v18) == 0;
    if ((unint64_t)v19 | (unint64_t)v18) {
      int v34 = 1;
    }
    int v36 = v34 ^ 1;
    if (v191) {
      int v36 = 1;
    }
    if (v189) {
      int v37 = 0;
    }
    else {
      int v37 = v185 & (v191 == 0);
    }
    int v177 = v30 + 1;
    if (v189) {
      int v38 = 1;
    }
    else {
      int v38 = v36;
    }
    uint64_t v186 = v14;
    char v187 = v19;
    int v188 = v30;
    while (1)
    {
      if (!v37) {
        goto LABEL_125;
      }
      if (!v35)
      {
        if (v21)
        {
          if (!v20) {
            goto LABEL_81;
          }
        }
        else
        {
          if (v19)
          {
            unint64_t v32 = utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*v19 >> 4];
            __key[0] = 0;
            int v44 = utf8_decodestr(v19, v32, __key, &v194, 2, &v195, 0);
            uint64_t v21 = __key[0];
            if (v44)
            {
LABEL_440:
              int v178 = 1;
              goto LABEL_441;
            }
            uint64_t v11 = v192;
            uint64_t v10 = v193;
            size_t v14 = v186;
            unint64_t v19 = v187;
            unint64_t v30 = v188;
            if (v20) {
              goto LABEL_92;
            }
            goto LABEL_81;
          }
          uint64_t v21 = *v30;
          if (!v20)
          {
LABEL_81:
            if (v18)
            {
              unint64_t v12 = utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*v18 >> 4];
              __key[0] = 0;
              int v43 = utf8_decodestr(v18, v12, __key, &v194, 2, &v195, 0);
              unsigned int v20 = __key[0];
              if (v43) {
                goto LABEL_440;
              }
              uint64_t v11 = v192;
              uint64_t v10 = v193;
              size_t v14 = v186;
              unint64_t v19 = v187;
              unint64_t v30 = v188;
            }
            else
            {
              unsigned int v20 = *v22;
            }
          }
        }
LABEL_92:
        if ((unsigned __int16)v20 > 0x7Fu)
        {
          if ((unsigned __int16)(v20 + 223) < 0x3Au
            || (unsigned __int16)v20 < 0x587u
            || (unsigned __int16 v45 = v20, (unsigned __int16)(v20 - 7680) <= 0x6E9u))
          {
            *(_DWORD *)__key = (unsigned __int16)v20;
            unint64_t v46 = bsearch(__key, &case_mapping_table, 0x57AuLL, 4uLL, (int (__cdecl *)(const void *, const void *))case_cmp);
            if (v46) {
              unsigned __int16 v45 = v46[1];
            }
            else {
              unsigned __int16 v45 = v20;
            }
            uint64_t v11 = v192;
            uint64_t v10 = v193;
            size_t v14 = v186;
            unint64_t v19 = v187;
            unint64_t v30 = v188;
          }
        }
        else if ((unsigned __int16)(v20 - 97) > 0x19u)
        {
          unsigned __int16 v45 = tolower_map[(unsigned __int16)v20];
        }
        else
        {
          unsigned __int16 v45 = toupper_map[(unsigned __int16)v20];
        }
        if (v21 == v45) {
          goto LABEL_204;
        }
        if ((unsigned __int16)v21 > 0x7Fu)
        {
          if ((unsigned __int16)(v21 + 223) < 0x3Au
            || (unsigned __int16)v21 < 0x587u
            || (unsigned __int16 v47 = v21, (unsigned __int16)(v21 - 7680) <= 0x6E9u))
          {
            *(_DWORD *)__key = (unsigned __int16)v21;
            unsigned int v48 = bsearch(__key, &case_mapping_table, 0x57AuLL, 4uLL, (int (__cdecl *)(const void *, const void *))case_cmp);
            if (v48) {
              unsigned __int16 v47 = v48[1];
            }
            else {
              unsigned __int16 v47 = v21;
            }
            uint64_t v11 = v192;
            uint64_t v10 = v193;
            size_t v14 = v186;
            unint64_t v19 = v187;
            unint64_t v30 = v188;
          }
        }
        else
        {
          unsigned __int16 v47 = (unsigned __int16)(v21 - 97) > 0x19u
              ? tolower_map[(unsigned __int16)v21]
              : toupper_map[(unsigned __int16)v21];
        }
        if (v47 == v45 || v20 == v47) {
          goto LABEL_204;
        }
        if (v21 == 223)
        {
          if (v20 == 115)
          {
            if (v22[1] == 115)
            {
              ++v22;
              LOWORD(v20) = 115;
              uint64_t v21 = 223;
              goto LABEL_204;
            }
            unsigned int v20 = 0x73u;
          }
          uint64_t v21 = 223;
        }
        else if (v21 == 115 && v20 == 223)
        {
          unsigned int v20 = 0xDFu;
          uint64_t v21 = 115;
          if (*v177 == 115)
          {
            unint64_t v30 = v177;
            goto LABEL_204;
          }
        }
        goto LABEL_125;
      }
      uint64_t v40 = *v22;
      if (((char)*v22 & 0x80000000) == 0 && ((char)*v30 & 0x80000000) == 0 && tolower_map[*v30] == tolower_map[v40]) {
        goto LABEL_204;
      }
      if (v30 == v14 && v40 >= 2)
      {
        unint64_t v41 = v22 + 1;
        while (((char)*v41 & 0x80000000) == 0)
        {
          uint64_t v42 = *v41;
          if (v42 < 2)
          {
            unint64_t v19 = 0;
            unint64_t v18 = 0;
            int v191 = 0;
            int v189 = 0;
            unint64_t v30 = v14;
            unint64_t v7 = (unint64_t)a2;
            size_t v5 = a4;
            unint64_t v16 = v181;
            goto LABEL_165;
          }
          ++v41;
          if (tolower_map[*v14] == tolower_map[v42])
          {
            unint64_t v22 = v41 - 1;
            unint64_t v30 = v14;
LABEL_204:
            unint64_t v7 = (unint64_t)a2;
            size_t v5 = a4;
            unint64_t v16 = v181;
            goto LABEL_205;
          }
        }
        unint64_t v22 = v41;
      }
LABEL_125:
      if (v38) {
        break;
      }
      if (v21)
      {
        unsigned int v49 = v21;
        if (v20) {
          goto LABEL_138;
        }
      }
      else if (v19)
      {
        unint64_t v32 = utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*v19 >> 4];
        __key[0] = 0;
        int v50 = utf8_decodestr(v19, v32, __key, &v194, 2, &v195, 0);
        unsigned int v49 = __key[0];
        if (v50) {
          goto LABEL_427;
        }
        uint64_t v11 = v192;
        uint64_t v10 = v193;
        size_t v14 = v186;
        unint64_t v19 = v187;
        unint64_t v30 = v188;
        if (v20) {
          goto LABEL_138;
        }
      }
      else
      {
        unsigned int v49 = *v30;
        if (v20) {
          goto LABEL_138;
        }
      }
      if (v18)
      {
        unint64_t v12 = utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*v18 >> 4];
        __key[0] = 0;
        int v51 = utf8_decodestr(v18, v12, __key, &v194, 2, &v195, 0);
        unsigned int v20 = __key[0];
        if (v51)
        {
LABEL_427:
          int v178 = 1;
          LOWORD(v21) = v49;
LABEL_441:
          unsigned int v8 = v188;
          unint64_t v7 = (unint64_t)a2;
          size_t v5 = a4;
          unint64_t v16 = v181;
          goto LABEL_442;
        }
        uint64_t v11 = v192;
        uint64_t v10 = v193;
        size_t v14 = v186;
        unint64_t v19 = v187;
        unint64_t v30 = v188;
      }
      else
      {
        unsigned int v20 = *v22;
      }
LABEL_138:
      unsigned int v52 = v49 - 65281;
      if (v49 == 12288) {
        unsigned int v53 = 32;
      }
      else {
        unsigned int v53 = v49;
      }
      if (v52 >= 0x5E) {
        uint64_t v21 = v53;
      }
      else {
        uint64_t v21 = v49 - 65248;
      }
      if (v20 - 65281 <= 0x5D)
      {
        int v39 = v20 - 65248;
      }
      else
      {
        if (v20 == 12288) {
          int v39 = 32;
        }
        else {
          int v39 = v20;
        }
        if (v20 != 12288 && v49 != 12288 && v52 > 0x5D)
        {
          if ((v21 | 0x20) == 0xF8)
          {
            unint64_t v7 = (unint64_t)a2;
            size_t v5 = a4;
            unint64_t v16 = v181;
            if ((v20 & 0xFFFFFFDF) == 0x4F)
            {
              if (v185)
              {
                if (v21 == 216) {
                  uint64_t v21 = 248;
                }
                else {
                  uint64_t v21 = v21;
                }
                unsigned int v20 = tolower_map[v20];
              }
              int v54 = v22[1];
              if (v54 == 101 || v54 == 204 && v22[2] == 136)
              {
                if (v54 == 101) {
                  ++v22;
                }
                goto LABEL_205;
              }
            }
          }
          else
          {
            unint64_t v7 = (unint64_t)a2;
            size_t v5 = a4;
            unint64_t v16 = v181;
          }
          if ((v20 | 0x20) == 0xF8 && (v21 & 0xFFFFFFDF) == 0x4F)
          {
            if (v185)
            {
              if (v20 == 216) {
                unsigned int v20 = 248;
              }
              uint64_t v21 = tolower_map[v21];
            }
            int v85 = *v177;
            if (v85 == 101 || v85 == 204 && v30[2] == 136)
            {
              if (v85 == 101) {
                unint64_t v30 = v177;
              }
              goto LABEL_205;
            }
          }
          unint64_t v86 = 0;
          unsigned int v87 = v22 + 1;
          uint64_t v88 = v22 + 2;
          int v89 = &byte_1BDA82EFB;
          while (1)
          {
            int v90 = *(unsigned __int16 *)(v89 - 3);
            if (v21 == v90)
            {
              uint64_t v91 = *(v89 - 1);
              if (v185)
              {
                if (v20 == v91 || tolower_map[v20] == tolower_map[v91])
                {
                  uint64_t v92 = *v87;
                  uint64_t v93 = *v89;
                  if (v92 == v93 || tolower_map[v92] == tolower_map[v93])
                  {
LABEL_328:
                    ++v22;
                    goto LABEL_205;
                  }
                  if (v92 == 204 && v86 <= 3 && *v88 == 136)
                  {
LABEL_336:
                    v22 += 2;
                    goto LABEL_205;
                  }
                }
                if (v20 != v21) {
                  goto LABEL_270;
                }
                goto LABEL_289;
              }
              if (v20 == v91)
              {
                int v94 = *v87;
                if (v94 == *v89) {
                  goto LABEL_328;
                }
                if (v94 == 204 && v86 <= 3 && *v88 == 136) {
                  goto LABEL_336;
                }
              }
            }
            if (v20 == v90)
            {
              LODWORD(v91) = *(v89 - 1);
              if (v185)
              {
LABEL_289:
                if (v21 != v91 && tolower_map[v21] != tolower_map[v91]) {
                  goto LABEL_270;
                }
                uint64_t v95 = *v177;
                uint64_t v96 = *v89;
                if (v95 == v96 || tolower_map[v95] == tolower_map[v96])
                {
LABEL_327:
                  unint64_t v30 = v177;
                  goto LABEL_205;
                }
                if (v95 != 204) {
                  goto LABEL_270;
                }
              }
              else
              {
                if (v21 != v91) {
                  goto LABEL_270;
                }
                int v97 = *v177;
                if (v97 == *v89) {
                  goto LABEL_327;
                }
                if (v97 != 204) {
                  goto LABEL_270;
                }
              }
              if (v86 <= 3 && v30[2] == 136)
              {
                v30 += 2;
                goto LABEL_205;
              }
            }
LABEL_270:
            ++v86;
            v89 += 6;
            if (v86 == 6)
            {
              if (!v174) {
                goto LABEL_360;
              }
              if (v21 == 778)
              {
                unsigned int v98 = v20 & 0xFFFFFFDF;
                uint64_t v21 = 778;
LABEL_334:
                if (v98 == 65) {
                  goto LABEL_205;
                }
LABEL_360:
                int v191 = 0;
                int v189 = 0;
LABEL_165:
                if (v5) {
                  unint64_t v16 = 0;
                }
                if ((v185 & 4) == 0)
                {
                  uint64_t v13 = v184;
                  if (v14)
                  {
                    uint64_t v183 = 0;
                    unint64_t v30 = v14;
                    goto LABEL_223;
                  }
                  unsigned __int8 v6 = v185;
LABEL_564:
                  int v124 = *v30;
                  unsigned int v8 = v30;
LABEL_450:
                  int v25 = v174;
                  goto LABEL_451;
                }
                unsigned __int8 v6 = v185;
LABEL_171:
                if ((v6 & 8) == 0)
                {
                  if (*v176 - 48 < 0xA && *v22 - 48 <= 9)
                  {
                    uint64_t v55 = v22;
                    do
                    {
                      unsigned int v57 = *++v55;
                      unsigned int v56 = v57;
                    }
                    while (v57 - 48 < 0xA);
                    int v58 = 0;
                    goto LABEL_309;
                  }
                  unint64_t v182 = v16;
                  unsigned int v59 = -1;
                  uint64_t v55 = v22;
                  unint64_t v60 = separator_map;
                  while (1)
                  {
                    unsigned int v61 = *v55;
                    if ((char)*v55 < 0)
                    {
                      if (v61 != 239)
                      {
                        unint64_t v16 = v182;
                        if (v61 == 227)
                        {
                          if (v55[1] == 128 && v55[2] == 128)
                          {
                            int v58 = 0;
                            goto LABEL_308;
                          }
                          unsigned int v61 = 227;
                        }
                        goto LABEL_302;
                      }
                      unsigned int v63 = v14;
                      int v64 = v55[1];
                      if (v64 != 188 && (v64 != 189 || v55[2] > 0x9Fu))
                      {
                        unsigned int v61 = 239;
                        uint64_t v11 = v192;
                        uint64_t v10 = v193;
                        size_t v5 = a4;
                        unint64_t v16 = v182;
LABEL_302:
                        v55 += utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)v61 >> 4];
                        int v58 = 1;
                        goto LABEL_308;
                      }
                      uint64_t v65 = v22;
                      uint64_t v66 = v21;
                      pthread_key_t v67 = v60;
                      unint64_t v68 = v7;
                      int v69 = v30;
                      __key[0] = v20;
                      LODWORD(v12) = 3;
                      int v70 = utf8_decodestr(v55, 3uLL, __key, &v194, 2, &v195, 0);
                      LOWORD(v20) = __key[0];
                      if (v70)
                      {
                        int v58 = 0;
                        int v178 = 1;
                        uint64_t v11 = v192;
                        uint64_t v10 = v193;
                        size_t v14 = v63;
                        size_t v5 = a4;
                        unint64_t v16 = v182;
                        LODWORD(v30) = v69;
                        unint64_t v7 = v68;
                        goto LABEL_307;
                      }
                      unsigned int v20 = __key[0] - 65248;
                      unint64_t v30 = v69;
                      if (((LOBYTE(__key[0]) + 32) & 0x80) != 0)
                      {
                        LODWORD(v12) = 3;
                        uint64_t v11 = v192;
                        uint64_t v10 = v193;
                        size_t v14 = v63;
                        size_t v5 = a4;
                        unint64_t v7 = v68;
                        unint64_t v60 = v67;
                      }
                      else
                      {
                        LODWORD(v12) = 3;
                        uint64_t v11 = v192;
                        uint64_t v10 = v193;
                        size_t v14 = v63;
                        unint64_t v7 = v68;
                        if (v67[(LOBYTE(__key[0]) + 32)])
                        {
                          int v58 = 0;
                          size_t v5 = a4;
                          unint64_t v16 = v182;
LABEL_307:
                          uint64_t v21 = v66;
                          unint64_t v22 = v65;
LABEL_308:
                          unsigned int v56 = *v55;
LABEL_309:
                          if (v56 < 2 || v58 != 0)
                          {
                            unint64_t v19 = 0;
                            unint64_t v18 = 0;
                            uint64_t v13 = 0;
                            uint64_t v79 = 0;
                            unint64_t v30 = v176;
                            unint64_t v22 = v55;
                            goto LABEL_4;
                          }
                          if (v56 == 227)
                          {
                            unint64_t v19 = 0;
                            unint64_t v18 = 0;
                            uint64_t v13 = 0;
                            uint64_t v79 = 0;
                            unint64_t v22 = v55 + 3;
                            unint64_t v30 = v176;
                            goto LABEL_4;
                          }
                          int v100 = *v176;
                          if (v56 == v100 && v100 != 92) {
                            goto LABEL_323;
                          }
                          if (v100 == 92)
                          {
                            if (v56 != v176[1])
                            {
                              unint64_t v19 = 0;
                              unint64_t v18 = 0;
                              uint64_t v13 = 0;
                              unint64_t v30 = v176;
                              unint64_t v22 = v55;
                              uint64_t v79 = 1;
                              goto LABEL_4;
                            }
LABEL_323:
                            unsigned int v101 = (v30 - (v183 + v176)) & ~(((int)v30 - ((int)v183 + (int)v176)) >> 31);
                            if (v101 >= 2) {
                              unint64_t v22 = &v55[-v101 + 1];
                            }
                            else {
                              unint64_t v22 = v55;
                            }
                            unint64_t v19 = 0;
                            unint64_t v18 = 0;
                            uint64_t v13 = 0;
                            uint64_t v79 = 0;
                            unint64_t v30 = v176;
                          }
                          else
                          {
                            unint64_t v19 = 0;
                            if (v55 != v22 && (char)v100 < 0) {
                              goto LABEL_323;
                            }
                            unint64_t v30 = v176;
                            unint64_t v22 = v55;
                            unint64_t v18 = 0;
                            uint64_t v13 = 0;
                            uint64_t v79 = 1;
                          }
                          goto LABEL_4;
                        }
                        unint64_t v60 = v67;
                        size_t v5 = a4;
                      }
                      uint64_t v21 = v66;
                      unint64_t v22 = v65;
                    }
                    else
                    {
                      if (v61 < 2 || v60[*v55] != 0)
                      {
                        int v58 = 0;
                        unint64_t v16 = v182;
                        goto LABEL_308;
                      }
                      LODWORD(v12) = 1;
                      unsigned int v20 = *v55;
                    }
                    unsigned int v71 = v20 - 97;
                    if (v59 <= 1 && v71 > 0x19)
                    {
                      int v58 = 1;
                      unint64_t v16 = v182;
                      goto LABEL_308;
                    }
                    unsigned int v59 = v71 < 0x1A;
                    v55 += v12;
                  }
                }
                unsigned int v8 = v30;
                goto LABEL_442;
              }
              if (v20 == 778)
              {
                unsigned int v98 = v21 & 0xFFFFFFDF;
                LOWORD(v20) = 778;
                goto LABEL_334;
              }
              if ((v21 - 8220) <= 0x17 && ((1 << (v21 - 28)) & 0x80000B) != 0)
              {
                if (v20 != 34) {
                  goto LABEL_360;
                }
                LOWORD(v20) = 34;
                goto LABEL_205;
              }
              BOOL v105 = v21 == 8219 || v21 >> 1 == 4108 || v21 == 8242 || v21 == 96;
              if (v20 == 39 && v105)
              {
                LOWORD(v20) = 39;
                goto LABEL_205;
              }
              if (v20 - 8220 <= 0x17 && ((1 << (v20 - 28)) & 0x80000B) != 0)
              {
                if (v21 != 34) {
                  goto LABEL_360;
                }
                uint64_t v21 = 34;
LABEL_205:
                if (v5)
                {
                  if (!v16)
                  {
                    unint64_t v16 = v22;
                    if ((char)*v22 < 0)
                    {
                      unint64_t v73 = *v22;
                      unint64_t v74 = v73 >> 4;
                      uint64_t v75 = utf8_byte_length(unsigned char)::utf8_len_table[v73 >> 4];
                      int v76 = v73 & utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v75];
                      if ((~(_BYTE)v74 & 0xC) != 0) {
                        goto LABEL_215;
                      }
                      uint64_t v75 = v75 <= 2 ? 2 : v75;
                      for (uint64_t i = 1; i != v75; v76 = v22[i++] & 0x3F | (v76 << 6))
                        ;
                      if (v76 < 0x10000)
                      {
LABEL_215:
                        if ((v76 - 12441) >= 4 && (v76 - 65438) >= 2)
                        {
                          unint64_t v16 = v22;
                          if ((unsigned __int16)v76 < 0x300u) {
                            goto LABEL_220;
                          }
                          int v84 = __CFUniCharCombiningBitmap[BYTE1(v76)];
                          if (v84 != 255)
                          {
                            unint64_t v16 = v22;
                            if (!__CFUniCharCombiningBitmap[BYTE1(v76)]) {
                              goto LABEL_220;
                            }
                            unint64_t v16 = v22;
                            if (((__CFUniCharCombiningBitmap[(v76 >> 3) + 256 + 32 * v84 - 32] >> (v76 & 7)) & 1) == 0) {
                              goto LABEL_220;
                            }
                          }
                        }
                      }
                      else
                      {
                        unsigned int v81 = v76 - 917760;
                        unsigned int v82 = v76 - 127995;
                        BOOL v83 = v81 >= 0xF0 && v82 > 4;
                        unint64_t v16 = v22;
                        if (v83) {
                          goto LABEL_220;
                        }
                      }
                      unint64_t v16 = 0;
                    }
                  }
                }
LABEL_220:
                if (v32) {
                  uint64_t v13 = &v19[v32] - v30;
                }
                else {
                  uint64_t v13 = 1;
                }
                goto LABEL_223;
              }
              BOOL v109 = v20 == 8219 || v20 >> 1 == 4108 || v20 == 8242 || v20 == 96;
              if (v21 == 39 && v109)
              {
                uint64_t v21 = 39;
LABEL_376:
                unint64_t v7 = (unint64_t)a2;
                size_t v5 = a4;
                unint64_t v16 = v181;
                uint64_t v11 = v192;
                uint64_t v10 = v193;
                size_t v14 = v186;
                unint64_t v19 = v187;
                unint64_t v30 = v188;
                goto LABEL_205;
              }
              if (v21 == 776 && v22 > a2)
              {
                uint64_t v110 = *(v22 - 1);
                int v111 = tolower_map[v110];
                if ((v111 - 97) <= 0x14 && ((1 << (v111 - 97)) & 0x104001) != 0)
                {
                  int v112 = tolower_map[*v22];
                  if (v112 == 101)
                  {
                    if ((v185 & 1) != 0 || *(v188 - 1) == v110)
                    {
                      uint64_t v21 = 776;
                      goto LABEL_376;
                    }
                  }
                  else if (v111 == 97 && v112 == 97)
                  {
                    int v191 = 0;
                    int v189 = 0;
                    uint64_t v21 = 776;
                    unint64_t v7 = (unint64_t)a2;
                    size_t v5 = a4;
                    unint64_t v16 = v181;
                    uint64_t v11 = v192;
                    uint64_t v10 = v193;
                    size_t v14 = v186;
                    unint64_t v19 = v187;
                    unint64_t v30 = v188;
                    goto LABEL_165;
                  }
                }
LABEL_400:
                if (unicode_combinable((unsigned __int16)v21))
                {
                  if (v186) {
                    unint64_t v116 = v32;
                  }
                  else {
                    unint64_t v116 = 0;
                  }
                  v183 += v116;
                  uint64_t v117 = &v187[v32] - v188;
                  char v187 = 0;
                  goto LABEL_406;
                }
LABEL_405:
                uint64_t v117 = 0;
LABEL_406:
                if (v20 >= 0x80 && unicode_combinable((unsigned __int16)v20))
                {
                  uint64_t v118 = &v18[v12];
                  unint64_t v18 = 0;
                  uint64_t v79 = v118 - v22;
                }
                else
                {
                  uint64_t v79 = 0;
                }
                if (v117)
                {
                  int v191 = 0;
                  int v189 = 0;
                  unint64_t v7 = (unint64_t)a2;
                  size_t v5 = a4;
                  unint64_t v16 = v181;
                  uint64_t v11 = v192;
                  uint64_t v10 = v193;
                  size_t v14 = v186;
                  unint64_t v19 = v187;
                  unint64_t v30 = v188;
                  uint64_t v13 = v117;
                  goto LABEL_4;
                }
                if (v79)
                {
                  if (v183)
                  {
                    uint64_t v13 = 0;
                    int v191 = 0;
                    int v189 = 0;
                    unint64_t v30 = v188;
                    if (v188 - 1 == v190) {
                      unint64_t v30 = v188 - 1;
                    }
                    unint64_t v16 = v181;
                    v183 -= v188 - 1 == v190;
                    unint64_t v7 = (unint64_t)a2;
                    size_t v5 = a4;
                    uint64_t v11 = v192;
                    uint64_t v10 = v193;
                    size_t v14 = v186;
                  }
                  else
                  {
                    uint64_t v13 = 0;
                    uint64_t v183 = 0;
                    int v191 = 0;
                    int v189 = 0;
                    unint64_t v7 = (unint64_t)a2;
                    size_t v5 = a4;
                    unint64_t v16 = v181;
                    uint64_t v11 = v192;
                    uint64_t v10 = v193;
                    size_t v14 = v186;
                    unint64_t v30 = v188;
                  }
                  unint64_t v19 = v187;
                  goto LABEL_4;
                }
                uint64_t v184 = 0;
                int v191 = 0;
                int v189 = 0;
LABEL_418:
                unint64_t v7 = (unint64_t)a2;
                size_t v5 = a4;
                unint64_t v16 = v181;
                uint64_t v11 = v192;
                uint64_t v10 = v193;
                size_t v14 = v186;
                unint64_t v19 = v187;
                unint64_t v30 = v188;
                goto LABEL_165;
              }
              if (v188 > v176 && v20 == 776)
              {
                uint64_t v113 = *(v188 - 1);
                int v114 = tolower_map[v113];
                if ((v114 - 97) <= 0x14 && ((1 << (v114 - 97)) & 0x104001) != 0)
                {
                  int v115 = tolower_map[*v188];
                  if (v115 == 101)
                  {
                    if ((v185 & 1) != 0 || v113 == *(v22 - 1))
                    {
                      LOWORD(v20) = 776;
                      unint64_t v7 = (unint64_t)a2;
                      size_t v5 = a4;
                      unint64_t v16 = v181;
                      uint64_t v11 = v192;
                      uint64_t v10 = v193;
                      size_t v14 = v186;
                      unint64_t v19 = v187;
                      unint64_t v30 = v188;
                      goto LABEL_205;
                    }
                  }
                  else if (v114 == 97 && v115 == 97)
                  {
                    int v191 = 0;
                    int v189 = 0;
                    LOWORD(v20) = 776;
                    goto LABEL_418;
                  }
                }
              }
              if (v21 >= 0x80) {
                goto LABEL_400;
              }
              goto LABEL_405;
            }
          }
        }
      }
      unsigned int v20 = v39;
      if (v21 == v39)
      {
        LOWORD(v20) = v21;
        goto LABEL_204;
      }
    }
    if (!v14)
    {
      size_t v5 = a4;
      unint64_t v16 = v181;
      if (a4) {
        unint64_t v16 = 0;
      }
      unint64_t v7 = (unint64_t)a2;
      unsigned __int8 v6 = v185;
      if ((v185 & 4) == 0) {
        goto LABEL_564;
      }
      goto LABEL_171;
    }
    uint64_t v13 = 0;
    unint64_t v16 = v181;
    int64_t v72 = &v14[v183] - v30;
    if (v30 <= v14) {
      int64_t v72 = 0;
    }
    v22 += v72;
    unint64_t v30 = v14;
    uint64_t v183 = 0;
    unint64_t v7 = (unint64_t)a2;
    size_t v5 = a4;
LABEL_223:
    uint64_t v79 = &v18[(int)v12] - v22;
    if (v12) {
      unint64_t v18 = 0;
    }
    else {
      uint64_t v79 = 1;
    }
    if (v13 && v14 && !v30[v13])
    {
      uint64_t v80 = v22[v79];
      if ((v185 & 4) != 0)
      {
        if ((v80 & 0x80) == 0 && separator_map[v80]) {
          goto LABEL_4;
        }
      }
      else if (v80 <= 1)
      {
        goto LABEL_4;
      }
      uint64_t v13 = 0;
      uint64_t v183 = 0;
      unint64_t v30 = v14;
    }
LABEL_4:
    unsigned int v8 = &v30[v13];
    v22 += v79;
    unsigned __int8 v9 = v30[v13];
    BOOL v15 = v190;
    if (v9) {
      continue;
    }
    break;
  }
LABEL_442:
  int v124 = *v8;
  if ((unint64_t)v22 <= v7)
  {
    unsigned __int8 v6 = v185;
    goto LABEL_450;
  }
  unsigned __int8 v6 = v185;
  int v25 = v174;
  if ((v185 & 4) != 0 && !*v8)
  {
    int v23 = 0;
    if (((char)*(v22 - 1) & 0x80000000) == 0 && *(v22 - 1) - 58 <= 0xFFFFFFF5) {
      int v23 = separator_map[*(v22 - 1)];
    }
    unsigned int v24 = *v22;
    goto LABEL_454;
  }
LABEL_451:
  unsigned int v24 = *v22;
  int v23 = 0;
  if (!v124) {
    goto LABEL_454;
  }
  if ((v24 & 0x80) != 0) {
    goto LABEL_480;
  }
LABEL_465:
  if (v24 >= 2 && ((v24 & 0x80) != 0 || (v6 & 4) == 0 || !separator_map[v24]) || (v6 & 2) == 0 || *v8 < 0xC0u)
  {
LABEL_480:
    if (v178) {
      goto LABEL_481;
    }
    uint64_t v142 = *v22;
    if (v142 >= 2)
    {
      if (v23)
      {
        if ((v6 & 4) == 0) {
          goto LABEL_481;
        }
      }
      else if ((v142 & 0x80) != 0 || (v142 - 58) > 0xFFFFFFF5)
      {
        if (v142 != 227 || v22[1] != 128 || (v6 & 4) == 0 || v22[2] != 128) {
          goto LABEL_481;
        }
      }
      else if ((v6 & 4) == 0 || !separator_map[v142])
      {
        goto LABEL_481;
      }
    }
    if (*v8 && (*v8 != 42 || v8[1])) {
      goto LABEL_481;
    }
    if (!v5) {
      return 1;
    }
    goto LABEL_552;
  }
  unint64_t v128 = 0;
  unsigned __int16 v129 = v21;
  while (1)
  {
    v8 += v128;
    if (!*v8)
    {
LABEL_479:
      unint64_t v7 = (unint64_t)a2;
      goto LABEL_480;
    }
    unint64_t v128 = utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*v8 >> 4];
    __key[0] = v129;
    if (utf8_decodestr(v8, v128, __key, &v194, 2, &v195, 0)) {
      break;
    }
    unsigned __int16 v129 = __key[0];
    if (__key[0] - 12441 >= 2 && __key[0] >= 0x300u)
    {
      int v130 = __CFUniCharCombiningBitmap[(unint64_t)__key[0] >> 8];
      if (v130 == 255
        || __CFUniCharCombiningBitmap[(unint64_t)__key[0] >> 8]
        && ((__CFUniCharCombiningBitmap[(LOBYTE(__key[0]) >> 3) + 256 + 32 * v130 - 32] >> (__key[0] & 7)) & 1) != 0)
      {
        continue;
      }
    }
    goto LABEL_479;
  }
  unint64_t v7 = (unint64_t)a2;
LABEL_481:
  uint64_t result = 0;
  if (v22 == (unsigned __int8 *)v7 || (v6 & 4) == 0 || *v8) {
    return result;
  }
  BOOL v131 = v16;
  uint64_t v132 = v22;
  while ((unint64_t)v132 > v7)
  {
    do
    {
      unsigned int v135 = *--v132;
      unsigned int v134 = v135;
      unint64_t v136 = (unint64_t)v135 >> 4;
      unint64_t v137 = v136 & 0xC;
    }
    while (v137 == 8);
    int v133 = v134;
    if ((v134 & 0x80) != 0)
    {
      uint64_t v138 = utf8_byte_length(unsigned char)::utf8_len_table[v136];
      unsigned int v139 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v138] & v134;
      if (v137 == 12)
      {
        if (v138 <= 2) {
          uint64_t v140 = 2;
        }
        else {
          uint64_t v140 = v138;
        }
        for (uint64_t j = 1; j != v140; ++j)
        {
          int v133 = v132[j] & 0x3F | (v139 << 6);
          unsigned int v139 = v133;
        }
      }
      else
      {
        int v133 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v138] & v134;
      }
    }
    if ((v133 - 880) <= 0xFFFFFF8F) {
      goto LABEL_502;
    }
  }
  unsigned int v134 = *v132;
LABEL_502:
  if ((v134 & 0x80) != 0)
  {
    unint64_t v143 = (unint64_t)v134 >> 4;
    char v144 = ~(_BYTE)v143;
    uint64_t v145 = utf8_byte_length(unsigned char)::utf8_len_table[v143];
    unsigned int v146 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v145] & v134;
    if ((v144 & 0xC) != 0)
    {
      v134 &= utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v145];
    }
    else
    {
      if (v145 <= 2) {
        uint64_t v147 = 2;
      }
      else {
        uint64_t v147 = v145;
      }
      uint64_t v148 = v147 - 1;
      uint64_t v149 = (char *)(v132 + 1);
      do
      {
        char v150 = *v149++;
        unsigned int v134 = v150 & 0x3F | (v146 << 6);
        unsigned int v146 = v134;
        --v148;
      }
      while (v148);
    }
  }
  unint64_t v151 = *v22;
  unsigned int v152 = v151;
  if ((char)*v22 < 0)
  {
    uint64_t v153 = utf8_byte_length(unsigned char)::utf8_len_table[v151 >> 4];
    unsigned int v154 = v151 & utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v153];
    if ((~(v151 >> 4) & 0xC) != 0)
    {
      unsigned int v152 = v151 & utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v153];
    }
    else
    {
      if (v153 <= 2) {
        uint64_t v155 = 2;
      }
      else {
        uint64_t v155 = utf8_byte_length(unsigned char)::utf8_len_table[v151 >> 4];
      }
      uint64_t v156 = v155 - 1;
      uint64_t v157 = (char *)(v22 + 1);
      do
      {
        char v158 = *v157++;
        unsigned int v152 = v158 & 0x3F | (v154 << 6);
        unsigned int v154 = v152;
        --v156;
      }
      while (v156);
    }
  }
  uint64_t result = 0;
  if (v152 > 0xFFFE) {
    return result;
  }
  if (v152 - 880 > 0xFFFFFF8F || v134 > 0xFFFE) {
    return result;
  }
  unsigned int v160 = v152 - 48;
  if (v134 - 48 > 9)
  {
    if (v160 <= 9) {
      goto LABEL_558;
    }
    if (v134 - 123 >= 0xFFFFFFE6)
    {
      if (v152 > 0x7F) {
        uint64_t result = __maskrune(v152, 0x8000uLL);
      }
      else {
        uint64_t result = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v152 + 60) & 0x8000;
      }
      if (result) {
        goto LABEL_558;
      }
      return result;
    }
    uint64_t result = 0;
    if (v134 - 91 < 0xFFFFFFE6 || v152 - 91 < 0xFFFFFFE6) {
      return result;
    }
    char_start = (unsigned __int8 *)utf8_prev_char_start(v7, (unint64_t)v132);
    if (utf8_to_code_point(char_start) - 91 >= 0xFFFFFFE6)
    {
      int v162 = &v22[utf8_byte_length(unsigned char)::utf8_len_table[v151 >> 4]];
      LODWORD(v163) = utf8_to_code_point(v162);
      if ((v163 - 880) >= 0xFFFFFF90)
      {
        LOBYTE(v166) = *v162;
        do
        {
          uint64_t v167 = utf8_byte_length(unsigned char)::utf8_len_table[v166 >> 4];
          int v164 = &v162[v167];
          int v166 = (char)v162[v167];
          unint64_t v163 = v162[v167];
          if (v166 < 0)
          {
            uint64_t v168 = utf8_byte_length(unsigned char)::utf8_len_table[v163 >> 4];
            int v169 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v168] & v163;
            if ((~(v163 >> 4) & 0xC) != 0)
            {
              LODWORD(v163) = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v168] & v163;
            }
            else
            {
              if (v168 <= 2) {
                uint64_t v170 = 2;
              }
              else {
                uint64_t v170 = utf8_byte_length(unsigned char)::utf8_len_table[v163 >> 4];
              }
              uint64_t v171 = v170 - 1;
              BOOL v172 = &v162[v167 + 1];
              do
              {
                char v173 = *v172++;
                LODWORD(v163) = v173 & 0x3F | (v169 << 6);
                int v169 = v163;
                --v171;
              }
              while (v171);
            }
          }
          int v162 = v164;
        }
        while ((v163 - 880) > 0xFFFFFF8F);
      }
      else
      {
        int v164 = v162;
      }
      if ((v163 - 91) <= 0xFFFFFFE5)
      {
        if (v5)
        {
          *size_t v5 = &v131[-v7];
          uint64_t v165 = (unsigned __int8 *)(v164 - v131);
          goto LABEL_560;
        }
        return 1;
      }
    }
    return 0;
  }
  if (v160 < 0xA) {
    return 0;
  }
LABEL_558:
  if (v5)
  {
    *size_t v5 = &v131[-v7];
    uint64_t v165 = (unsigned __int8 *)(v22 - v131);
LABEL_560:
    *a5 = v165;
  }
  return 1;
}

void oqpush(uint64_t a1, uint64_t a2, size_t size)
{
  if (*(unsigned char *)a1)
  {
    unint64_t v16 = __si_assert_copy_extra_1921(0);
    unint64_t v7 = v16;
    unsigned __int8 v17 = "";
    if (v16) {
      unsigned __int8 v17 = v16;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "OQueue.h", 327, "!oqueue->has_meta", v17);
LABEL_26:
    free(v7);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (!*(_DWORD *)(a1 + 56))
  {
    uint64_t v10 = *(void *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5 < v10) {
      goto LABEL_18;
    }
    uint64_t v11 = 2 * v10;
    if (!v10) {
      uint64_t v11 = 4;
    }
    *(void *)(a1 + 24) = v11;
    unint64_t v12 = *(void **)(a1 + 16);
    size_t v13 = 8 * v11;
    if (v12)
    {
      size_t v14 = malloc_type_zone_realloc((malloc_zone_t *)queryZone, v12, v13, 0xECA6AA46uLL);
      if (!v14)
      {
LABEL_15:
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
        }
      }
    }
    else
    {
      size_t v14 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v13, 0x8DDAA030uLL);
      if (!v14) {
        goto LABEL_15;
      }
    }
    *(void *)(a1 + 16) = v14;
    uint64_t v5 = *(void *)(a1 + 32);
    goto LABEL_18;
  }
  if (*(void *)(a1 + 64) < (a2 & 0x3FFFFFFFFFFFFFFFuLL))
  {
    unint64_t v18 = __si_assert_copy_extra_1921(0);
    unint64_t v7 = v18;
    unsigned int v8 = "";
    if (v18) {
      unsigned int v8 = v18;
    }
    unsigned __int8 v9 = "!queue->split || queue->splitPoint >= offset_t_GET_VALUE(value)";
    goto LABEL_25;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5 >= *(void *)(a1 + 24))
  {
    unsigned __int8 v6 = __si_assert_copy_extra_1921(0);
    unint64_t v7 = v6;
    unsigned int v8 = "";
    if (v6) {
      unsigned int v8 = v6;
    }
    unsigned __int8 v9 = "!queue->split";
LABEL_25:
    __message_assert("%s:%u: failed assertion '%s' %s ", "OQueue.h", 247, v9, v8);
    goto LABEL_26;
  }
LABEL_18:
  uint64_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 32) = v5 + 1;
  *(void *)(v15 + 8 * v5) = a2;
}

void findHandleMatch(uint64_t a1, uint64_t a2, size_t a3, unsigned __int8 *a4, unsigned int a5, char a6)
{
  if (!a5)
  {
    unsigned __int8 v29 = __si_assert_copy_extra_1921(*(_DWORD **)(*(void *)(a1 + 8) + 4576));
    unint64_t v30 = v29;
    int v31 = "";
    if (v29) {
      int v31 = v29;
    }
    __message_assert("%s:%u: failed assertion '%s' %s invalid len", "BurstTrie.c", 3643, "str_len", v31);
    free(v30);
    if (__valid_fsp(*(_DWORD **)(*(void *)(a1 + 8) + 4576))) {
      uint64_t v32 = 2989;
    }
    else {
      uint64_t v32 = 3072;
    }
    *(_DWORD *)uint64_t v32 = -559038737;
    abort();
  }
  if (*(_DWORD *)(a1 + 48)) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = a2;
  }
  uint64_t v11 = *(unsigned __int8 **)(a1 + 1248);
  uint64_t v12 = *((void *)v11 + 4);
  if (!v12) {
    goto LABEL_20;
  }
  uint64_t v13 = v12 - 1;
  int v14 = *v11;
  uint64_t v15 = *((void *)v11 + 2);
  unint64_t v16 = (void *)(v15 + 16 * v13);
  unsigned __int8 v17 = (void *)(v15 + 8 * v13);
  if (v14) {
    unsigned __int8 v17 = v16;
  }
  if ((*v17 & 0x3FFFFFFFFFFFFFFFLL) != v10)
  {
LABEL_20:
    if ((a6 & 1) != 0
      || (uint64_t v18 = *(void *)(a1 + 1240), v19 = *(_DWORD *)(v18 + 20), v19 == -1)
      || (int v20 = *(_DWORD *)(v18 + 16), v21 = termPropertyID(a4, a5), v21 == v19)
      || (!(v20 & 0x3080 | v19) ? (BOOL v22 = v21 == 2) : (BOOL v22 = 0), v22 ? (v23 = 0) : (v23 = 1), (v23 & 1) == 0))
    {
      if (v10)
      {
        if (*(void *)(a1 + 1256))
        {
          if (a3)
          {
            int v24 = termPropertyID(a4, a5);
            int v25 = a4[a5 - 1];
            uint64_t v26 = *(void *)(a1 + 1248);
            if (!v24)
            {
              if (v25 == 3) {
                uint64_t v27 = v10 | 0x4000000000000000;
              }
              else {
                uint64_t v27 = v10;
              }
              oqpush(v26, v27, a3);
              uint64_t v26 = *(void *)(a1 + 1256);
              uint64_t v28 = a3;
              goto LABEL_36;
            }
            if (v25 != 3) {
              goto LABEL_35;
            }
LABEL_32:
            uint64_t v28 = v10 | 0x4000000000000000;
LABEL_36:
            oqpush(v26, v28, a3);
            return;
          }
          if (a4[a5 - 1] == 3)
          {
LABEL_31:
            uint64_t v26 = *(void *)(a1 + 1248);
            goto LABEL_32;
          }
          if (!termPropertyID(a4, a5)) {
            return;
          }
        }
        else if (a4[a5 - 1] == 3)
        {
          goto LABEL_31;
        }
        uint64_t v26 = *(void *)(a1 + 1248);
LABEL_35:
        uint64_t v28 = v10;
        goto LABEL_36;
      }
    }
  }
}

unsigned __int8 *termFieldMatch(int a1, unsigned __int8 *a2, int a3, int a4)
{
  if (a1)
  {
    if (a1 == 1 && (a4 & 8) == 0)
    {
      if (*a2 < 4u) {
        return 0;
      }
      int v6 = a2[a3 - 1];
      if ((a4 & 0x800) != 0)
      {
        if (v6 == 4)
        {
          if (a2[a3 - 2] != 1) {
            return 0;
          }
          return a2;
        }
        if (v6 == 3)
        {
          uint64_t v13 = &a2[a3];
          if (*(v13 - 2) == 4)
          {
            if (*(v13 - 3) != 1) {
              return 0;
            }
            return a2;
          }
        }
      }
      else
      {
        if (v6 == 1)
        {
          if (a2[a3 - 2] != 1) {
            return 0;
          }
          return a2;
        }
        if (v6 == 3)
        {
          unint64_t v7 = &a2[a3];
          if (*(v7 - 2) == 1)
          {
            if (*(v7 - 3) != 1) {
              return 0;
            }
            return a2;
          }
        }
      }
      return 0;
    }
    if (a1 == 5)
    {
      if ((a4 & 0x800) == 0) {
        return 0;
      }
      uint64_t v10 = &a2[a3];
      int v11 = *(v10 - 1);
      if (v11 == 5)
      {
        if (*(v10 - 2) != 1) {
          return 0;
        }
        return a2;
      }
      if (v11 == 3)
      {
        uint64_t v12 = &a2[a3];
        if (*(v12 - 2) == 5)
        {
          if (*(v12 - 3) != 1) {
            return 0;
          }
          return a2;
        }
      }
      return 0;
    }
    if (*a2 != 1) {
      return 0;
    }
    if (a2[1] == 2)
    {
      uint64_t v8 = 2;
      if (a3 < 2) {
        goto LABEL_70;
      }
    }
    else
    {
      if ((a4 & 8) != 0) {
        return 0;
      }
      if (a3 > 2)
      {
        int v17 = a2[a3 - 1];
        if (v17 == 3)
        {
          if (a2[a3 - 2] == 1 && a2[a3 - 3] == 1) {
            return 0;
          }
          uint64_t v8 = 1;
          goto LABEL_70;
        }
        uint64_t v8 = 1;
        if (v17 != 1)
        {
LABEL_70:
          uint64_t v19 = v8 + 1;
          int v20 = a2[v8];
          if ((char)a2[v8] < 0)
          {
            uint64_t v21 = v8 + 2;
            int v22 = (char)a2[v19];
            int v23 = a2[v19];
            if (v22 < 0)
            {
              uint64_t v24 = v8 + 3;
              int v25 = (char)a2[v21];
              int v26 = v25;
              if (v25 < 0)
              {
                uint64_t v21 = v8 | 4;
                int v27 = (char)a2[v24];
                int v28 = a2[v24];
                if (v27 < 0)
                {
                  int v29 = ((v28 & 0x7F) << 21) | (a2[v21] << 28) | ((v26 & 0x7F) << 14) | ((v23 & 0x7F) << 7) | v20 & 0x7F;
                  uint64_t v21 = v8 + 5;
                  int v20 = v29;
                }
                else
                {
                  int v20 = ((v26 & 0x7F) << 14) | (v28 << 21) | ((v23 & 0x7F) << 7) | v20 & 0x7F;
                }
              }
              else
              {
                uint64_t v21 = v8 + 3;
                int v20 = ((v23 & 0x7F) << 7) | (v26 << 14) | v20 & 0x7F;
              }
            }
            else
            {
              int v20 = v20 & 0x7F | (v23 << 7);
            }
          }
          else
          {
            uint64_t v21 = v8 + 1;
          }
          uint64_t v18 = 0;
          if (!v20) {
            return (unsigned __int8 *)v18;
          }
          BOOL v30 = a1 == 1 || v20 == a1;
          BOOL v31 = v30;
          if (v20 < 6 || !v31) {
            return (unsigned __int8 *)v18;
          }
          if (a1 != 1) {
            goto LABEL_97;
          }
          if ((a4 & 8) == 0) {
            goto LABEL_97;
          }
          int v32 = a2[a3 - 1];
          if (v32 == 1) {
            goto LABEL_97;
          }
          uint64_t v18 = 0;
          if (a3 < 3 || v32 != 3) {
            return (unsigned __int8 *)v18;
          }
          if (a2[a3 - 2] == 1 && a2[a3 - 3] == 1)
          {
LABEL_97:
            a2 += v21;
            return a2;
          }
          return 0;
        }
LABEL_67:
        uint64_t v18 = 0;
        if (a2[a3 - 2] == 1) {
          return (unsigned __int8 *)v18;
        }
        goto LABEL_70;
      }
      uint64_t v8 = 1;
      if (a3 < 2) {
        goto LABEL_70;
      }
    }
    if (a2[a3 - 1] != 1) {
      goto LABEL_70;
    }
    goto LABEL_67;
  }
  if (*a2 < 4u) {
    return 0;
  }
  int v5 = a2[a3 - 1];
  if ((a4 & 0x800) != 0)
  {
    if (v5 != 1) {
      return 0;
    }
    int v9 = a2[a3-- - 2];
    if (v9 == 1) {
      return 0;
    }
  }
  else
  {
    if (v5 == 1) {
      return 0;
    }
    if (v5 == 2 && a2[a3 - 2] == 1)
    {
      if ((a4 & 0x3180) != 0) {
        return 0;
      }
      a3 -= 2;
    }
  }
  int v14 = &a2[a3];
  unsigned int v15 = *(v14 - 1);
  if (v15 != 5)
  {
    uint64_t v18 = 0;
    if ((a4 & 0x78000000) != 0 || v15 <= 4) {
      return (unsigned __int8 *)v18;
    }
    return a2;
  }
  int v16 = *(v14 - 2);
  if ((v16 - 6) < 0xFFFFFFFC) {
    return 0;
  }
  if (a2[a3 - 3] == 1)
  {
    if ((a4 & 0x78000000) != 0)
    {
      switch(v16)
      {
        case 4:
          if ((a4 & 0x20000000) == 0) {
            return 0;
          }
          break;
        case 3:
          if ((a4 & 0x10000000) == 0) {
            return 0;
          }
          break;
        case 2:
          if ((a4 & 0x8000000) == 0) {
            return 0;
          }
          break;
        default:
          if ((a4 & 0x40000000) == 0) {
            return 0;
          }
          break;
      }
    }
    return a2;
  }
  return 0;
}

uint64_t ContentIndexQueryNodeHash(unsigned int *a1)
{
  uint64_t v1 = (int)*a1;
  if ((int)v1 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *a1;
    while (1)
    {
      int v5 = (int *)&a1[4 * v3];
      uint64_t v6 = v5[6];
      if ((int)v6 >= 1) {
        break;
      }
LABEL_19:
      if (++v3 == v4) {
        return v1;
      }
    }
    uint64_t v7 = *((void *)v5 + 4);
    while (1)
    {
      uint64_t v8 = *(unsigned int *)(v7 + 16);
      uint64_t v9 = *(int *)(v7 + 20);
      v1 ^= v9 ^ v8 ^ *(int *)(v7 + 24);
      if ((v8 & 0x600) != 0)
      {
        int v10 = 8 * v9;
      }
      else
      {
        if ((v8 & 0x10) == 0)
        {
          int v11 = strlen(*(const char **)v7);
          v1 ^= commonHash(v11, *(void *)v7);
          uint64_t v12 = *(void *)(v7 + 8);
          if (v12)
          {
            int v13 = strlen(*(const char **)(v7 + 8));
            v1 ^= commonHash(v13, v12);
          }
          goto LABEL_8;
        }
        unint64_t v14 = *(unsigned int *)(v7 + 60);
        uint64_t v15 = v14 & 3;
        uint64_t v16 = (v14 >> 2) & 3;
        if (v15 == 3 || v16 == 3) {
          int v10 = -1;
        }
        else {
          int v10 = vector_dimension_vec_sizes_12485[v15] * vector_size_elem_sizes_12484[v16];
        }
      }
      commonHash(v10, *(void *)v7);
LABEL_8:
      v7 += 64;
      if (!--v6) {
        goto LABEL_19;
      }
    }
  }
  return v1;
}

void preparePostCheckQueries(SISearchCtx_METADATA **a1)
{
  size_t v2 = *a1;
  if (!*(void *)(*((void *)*a1 + 105) + 8))
  {
    *(void *)(*((void *)*a1 + 105) + 8) = compileToSDBPostCheckQuery(v2[14]);
    size_t v2 = *a1;
  }
  if (*((_DWORD *)v2 + 208) >= 2u)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 1;
    do
    {
      uint64_t v5 = v2[105] + v3;
      uint64_t v6 = *(void *)(v5 + 48);
      if (v6 && !*(void *)(v5 + 56))
      {
        uint64_t v7 = (int *)translateSDBQuery(v6);
        *(void *)(*((void *)*a1 + 105) + v3 + 56) = compileToSDBPostCheckQuery((uint64_t)v7);
        siquerynode_release(v7);
        size_t v2 = *a1;
      }
      ++v4;
      v3 += 48;
    }
    while (v4 < *((unsigned int *)v2 + 208));
  }
  *((unsigned char *)v2 + 642) = 1;
}

void *compileToSDBPostCheckQuery(uint64_t a1)
{
  uint64_t v1 = (void *)compileToSDBTree(a1, (uint64_t (*)(void))factorRewrite);
  db_query_tree_apply_block_with_meta(v1, (uint64_t)&__block_literal_global_15_12443, 0);
  setupCannedFields((uint64_t)v1);
  return v1;
}

unsigned int *si_add_livequery(uint64_t a1, atomic_uint *a2, atomic_uint *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (unsigned int *)malloc_type_calloc(1uLL, 0x38uLL, 0x10600408BC92946uLL);
  atomic_fetch_add(a2 + 146, 1u);
  *((void *)v6 + 1) = a2;
  atomic_fetch_add(a3, 1u);
  *((void *)v6 + 5) = a3;
  atomic_store(1u, v6);
  v6[12] = 0;
  uint64_t v7 = (pthread_mutex_t *)(a1 + 1704);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1704));
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 1768), v6);
  if (!*((void *)a2 + 15))
  {
    uint64_t v8 = *(void *)a2;
    uint64_t v9 = *(__CFString **)(*(void *)a2 + 152);
    if (!v9)
    {
      uint64_t v9 = *(__CFString **)(v8 + 112);
      if (v9)
      {
        os_unfair_lock_lock((os_unfair_lock_t)(v8 + 48));
        if (!*(void *)(v8 + 152)) {
          *(void *)(v8 + 152) = CFStringCreateByCombiningStrings((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CFArrayRef *)(v8 + 112), @",");
        }
        os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 48));
        uint64_t v9 = *(__CFString **)(v8 + 152);
      }
    }
    if (v9) {
      int v10 = v9;
    }
    else {
      int v10 = &stru_1F18198E8;
    }
    CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 1776), v10);
    CFDateRef Value = (atomic_uint *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 1776), v10);
    *((void *)a2 + 15) = Value;
    if (Value)
    {
      atomic_fetch_add_explicit(Value + 18, 1u, memory_order_relaxed);
    }
    else
    {
      uint64_t v12 = (pthread_mutex_t *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x50uLL, 0x6085D6BuLL);
      if (!v12 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
      {
        LOWORD(v20.version) = 0;
        _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)&v20, 2u);
      }
      CFBagCallBacks v20 = *(CFBagCallBacks *)byte_1F1817540;
      v12[1].__uint64_t sig = (uint64_t)CFBagCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &v20);
      pthread_mutex_init(v12, 0);
      *(_DWORD *)v12[1].__opaque = 1;
      *((void *)a2 + 15) = v12;
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 1776), v10, v12);
    }
    int v13 = (void *)compileToLiveQuery(*((void **)a2 + 9));
    *((void *)a2 + 13) = query_node_unique_retain(*((pthread_mutex_t **)a2 + 15), v13);
    db_free_query_node(v13);
    unint64_t v14 = (void *)*((void *)a2 + 10);
    if (v14)
    {
      uint64_t v15 = (void *)compileToLiveQuery(v14);
      *((void *)a2 + 14) = query_node_unique_retain(*((pthread_mutex_t **)a2 + 15), v15);
      db_free_query_node(v15);
    }
    if (dword_1E9FC90AC >= 5)
    {
      int v17 = *__error();
      uint64_t v18 = _SILogForLogForCategory(2);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef node_unique_set_copy_description = _query_node_unique_set_copy_description(*((pthread_mutex_t **)a2 + 15));
        LODWORD(v20.version) = 138412290;
        *(CFIndex *)((char *)&v20.version + 4) = (CFIndex)node_unique_set_copy_description;
        _os_log_impl(&dword_1BD672000, v18, OS_LOG_TYPE_DEFAULT, "live query nodes: %@", (uint8_t *)&v20, 0xCu);
        *__error() = v17;
        if (node_unique_set_copy_description) {
          CFRelease(node_unique_set_copy_description);
        }
      }
      else
      {
        *__error() = v17;
      }
    }
  }
  pthread_mutex_unlock(v7);
  return v6;
}

uint64_t query_node_unique_retain(pthread_mutex_t *a1, void *a2)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = __query_node_unique_retain_block_invoke;
  v7[3] = &__block_descriptor_tmp_27_12518;
  v7[4] = a1;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __query_node_unique_retain_block_invoke_2;
  v6[3] = &__block_descriptor_tmp_28_12519;
  v6[4] = a1;
  pthread_mutex_lock(a1);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  _OWORD v8[2] = __db_query_tree_apply_block_block_invoke;
  v8[3] = &unk_1E6348598;
  v8[4] = v7;
  uint64_t tree_apply_block_with_meta = db_query_tree_apply_block_with_meta(a2, (uint64_t)v8, (uint64_t)v6);
  pthread_mutex_unlock(a1);
  return tree_apply_block_with_meta;
}

uint64_t compileToLiveQuery(void *a1)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = __db_query_tree_apply_block_block_invoke;
  v3[3] = &unk_1E6348598;
  v3[4] = &__block_literal_global_21_12478;
  uint64_t tree_apply_block_with_meta = db_query_tree_apply_block_with_meta(a1, (uint64_t)v3, (uint64_t)&__block_literal_global_25);
  setupCannedFields(tree_apply_block_with_meta);
  return tree_apply_block_with_meta;
}

void PartialQueryResults::setupCannedRequiredAttributeVector(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 232);
  size_t v7 = 8 * v6;
  if (((v6 >> 14) & 0x7FFFFFFFFFFFLL) == 0 && v7 > *MEMORY[0x1E4F14B00]) {
    ++sTotal;
  }
  uint64_t v9 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v7, 0x31F9A007uLL);
  if (!v9) {
    _log_fault_for_malloc_failure();
  }
  *a3 = v9;
  uint64_t v10 = *(void *)(a1 + 232);
  if (v10 >= 1)
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      uint64_t v12 = (const char *)strlen(*(const char **)(a2 + 8 * i));
      int v13 = CannedFieldTable::in_word_set(*(CannedFieldTable **)(a2 + 8 * i), v12);
      if (v13) {
        unint64_t v14 = v13[4];
      }
      else {
        unint64_t v14 = 0;
      }
      *(void *)(*a3 + 8 * i) = v14;
    }
  }
}

void PartialQueryResults::setupCannedAttributeVector(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  unint64_t v8 = *(void *)(a1 + 232);
  size_t v9 = 8 * v8;
  if (((v8 >> 14) & 0x7FFFFFFFFFFFLL) == 0 && v9 > *MEMORY[0x1E4F14B00]) {
    ++sTotal;
  }
  int v11 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v9, 0x31F9A007uLL);
  if (!v11) {
    _log_fault_for_malloc_failure();
  }
  *a3 = v11;
  uint64_t v12 = *(void *)(a1 + 232);
  if (v12 < 1)
  {
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = (const char *)strlen(*(const char **)(a2 + 8 * v13));
      uint64_t v16 = CannedFieldTable::in_word_set(*(CannedFieldTable **)(a2 + 8 * v13), v15);
      if (v16)
      {
        *(void *)(*a3 + 8 * v13) = v16[1];
        ++v14;
      }
      ++v13;
    }
    while (v12 != v13);
  }
  *a4 = v14;
}

uint64_t compileToIndexQuery(uint64_t a1, double a2)
{
  uint64_t v4 = compileToSDBTree(a1, (uint64_t (*)(void))indexFactorRewrite);
  setupCannedFields(v4);
  _rewriteQuery((void *)v4, a2);
  __int16 v5 = *(_WORD *)(v4 + 48);
  if ((v5 & 8) != 0)
  {
    uint64_t v6 = *(void *)v4;
    if (*(void *)v4)
    {
      uint64_t v7 = *(void *)(v4 + 8);
      if (v7)
      {
        unsigned int v8 = *(unsigned __int16 *)(v6 + 48);
        if (v8 == 4)
        {
          uint64_t v9 = *(void *)(v6 + 16);
          if (v9) {
            LODWORD(v9) = (*(_DWORD *)(v9 + 24) < 0xFu) & (0x5060u >> *(_DWORD *)(v9 + 24));
          }
        }
        else
        {
          LODWORD(v9) = 0;
        }
        if (v9 != ((v8 >> 3) & 1)) {
          goto LABEL_14;
        }
        unsigned int v10 = *(unsigned __int16 *)(v7 + 48);
        if (v10 == 4)
        {
          uint64_t v11 = *(void *)(v7 + 16);
          if (v11) {
            LODWORD(v11) = (*(_DWORD *)(v11 + 24) < 0xFu) & (0x5060u >> *(_DWORD *)(v11 + 24));
          }
        }
        else
        {
          LODWORD(v11) = 0;
        }
        if (v11 != ((v10 >> 3) & 1))
        {
LABEL_14:
          if ((v5 & 2) != 0)
          {
            __int16 v12 = 1;
          }
          else
          {
            if ((v5 & 1) == 0)
            {
LABEL_19:
              negateQuery(v6);
              negateQuery(*(void *)(v4 + 8));
              goto LABEL_20;
            }
            __int16 v12 = 2;
          }
          *(_WORD *)(v4 + 48) = v12;
          goto LABEL_19;
        }
      }
    }
  }
LABEL_20:
  if (*(unsigned char *)(a1 + 16)) {
    *(_WORD *)(v4 + 56) |= 1u;
  }
  return v4;
}

const char **setupCannedFields(uint64_t a1)
{
  if (*(void *)a1) {
    setupCannedFields();
  }
  uint64_t result = *(const char ***)(a1 + 8);
  if (result) {
    uint64_t result = (const char **)setupCannedFields();
  }
  if (*(_WORD *)(a1 + 48) == 4)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (!*(void *)(v3 + 8))
    {
      uint64_t v4 = (const char *)strlen(*(const char **)v3);
      uint64_t result = CannedFieldTable::in_word_set(*(CannedFieldTable **)v3, v4);
      if (result)
      {
        *(void *)(v3 + 32) |= 0x80uLL;
        *(void *)(v3 + 8) = _qpCannedFieldQuery;
      }
    }
  }
  return result;
}

const char **CannedFieldTable::in_word_set(CannedFieldTable *this, const char *a2)
{
  if ((a2 - 11) > 0x1B) {
    return 0;
  }
  if ((a2 - 12) >= 6)
  {
    if (a2 == 11) {
      goto LABEL_4;
    }
    LODWORD(a2) = CannedFieldTable::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this
                                                                                                 + 17)]
                + a2;
  }
  LODWORD(a2) = a2
              + CannedFieldTable::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this
                                                                                               + 11)];
LABEL_4:
  unsigned int v2 = a2
     + CannedFieldTable::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 10)];
  if (v2 > 0x74) {
    return 0;
  }
  uint64_t v3 = (const char **)((char *)&CannedFieldTable::in_word_set(char const*,unsigned int)::wordlist + 40 * v2);
  uint64_t v4 = *v3;
  if (!*v3 || *(unsigned __int8 *)this != *(unsigned __int8 *)v4 || strcmp((const char *)this + 1, v4 + 1)) {
    return 0;
  }
  return v3;
}

uint64_t compileToSDBTree(uint64_t a1, uint64_t (*a2)(void))
{
  __int16 v4 = 2;
  switch(*(_DWORD *)a1)
  {
    case 0:
      __int16 v4 = 1;
      goto LABEL_3;
    case 1:
LABEL_3:
      size_t v5 = *(void *)(a1 + 24) / 2;
      uint64_t v6 = (void *)MEMORY[0x1E4F14B00];
      if (((v5 >> 14) & 0x7FFFFFFFFFFFLL) == 0
        && (unint64_t)(8 * (*(void *)(a1 + 24) / 2)) > *MEMORY[0x1E4F14B00])
      {
        ++sTotal_4070;
      }
      unsigned int v8 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, v5, 8uLL, 0x31F9A007uLL);
      if (!v8) {
        _log_fault_for_malloc_failure();
      }
      unint64_t v9 = *(void *)(a1 + 24);
      unint64_t v33 = v9 - 1;
      if (v9 == 1) {
        goto LABEL_19;
      }
      unint64_t v10 = *(void *)(a1 + 24);
      unint64_t v11 = 0;
      do
      {
        if (*v6 <= 0x4FuLL) {
          ++sTotal_4070;
        }
        __int16 v12 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x50uLL, 0x31F9A007uLL);
        if (!v12) {
          _log_fault_for_malloc_failure();
        }
        *__int16 v12 = compileToSDBTree(*(void *)(*(void *)(a1 + 32) + 8 * v11), a2);
        v12[1] = compileToSDBTree(*(void *)(*(void *)(a1 + 32) + 8 * v11 + 8), a2);
        *((_WORD *)v12 + 24) = v4;
        *((_WORD *)v12 + 28) = v12[7] & 0xFDFF | (*(unsigned __int8 *)(a1 + 17) << 9);
        v8[v11 / 2] = v12;
        v11 += 2;
      }
      while (v11 < v33);
      unint64_t v9 = v10;
      if (v10)
      {
LABEL_19:
        if (*v6 <= 0x4FuLL) {
          ++sTotal_4070;
        }
        uint64_t v13 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x50uLL, 0x31F9A007uLL);
        if (!v13) {
          _log_fault_for_malloc_failure();
        }
        *uint64_t v13 = compileToSDBTree(*(void *)(*(void *)(a1 + 32) + 8 * v33), a2);
        uint64_t v14 = 2;
        if (v9 >> 1 > 2) {
          uint64_t v14 = v9 >> 1;
        }
        uint64_t v15 = &v8[v14];
        v13[1] = *(v15 - 2);
        *((_WORD *)v13 + 24) = v4;
        *((_WORD *)v13 + 28) = v13[7] & 0xFDFF | (*(unsigned __int8 *)(a1 + 17) << 9);
        *(v15 - 2) = v13;
      }
      if (v9 >= 4)
      {
        do
        {
          unint64_t v32 = v9 >> 1;
          unint64_t v34 = v9;
          unint64_t v16 = (v9 >> 1) - 1;
          if (v9 >> 1 != 1)
          {
            unint64_t v17 = 0;
            uint64_t v18 = v8;
            do
            {
              if (*v6 <= 0x4FuLL) {
                ++sTotal_4070;
              }
              uint64_t v19 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x50uLL, 0x31F9A007uLL);
              if (!v19) {
                _log_fault_for_malloc_failure();
              }
              CFBagCallBacks v20 = &v8[v17];
              *uint64_t v19 = *v20;
              v19[1] = v20[1];
              *((_WORD *)v19 + 24) = v4;
              *((_WORD *)v19 + 28) = v19[7] & 0xFDFF | (*(unsigned __int8 *)(a1 + 17) << 9);
              *v18++ = v19;
              v17 += 2;
            }
            while (v17 < v16);
          }
          if ((v34 & 2) != 0)
          {
            if (*v6 <= 0x4FuLL) {
              ++sTotal_4070;
            }
            uint64_t v21 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x50uLL, 0x31F9A007uLL);
            if (!v21) {
              _log_fault_for_malloc_failure();
            }
            uint64_t v22 = v34 >> 2;
            *uint64_t v21 = v8[v16];
            if (v34 >> 2 <= 2) {
              uint64_t v22 = 2;
            }
            int v23 = &v8[v22];
            v21[1] = *(v23 - 2);
            *((_WORD *)v21 + 24) = v4;
            *((_WORD *)v21 + 28) = v21[7] & 0xFDFF | (*(unsigned __int8 *)(a1 + 17) << 9);
            *(v23 - 2) = v21;
          }
          unint64_t v9 = v32;
        }
        while (v34 > 7);
      }
      uint64_t v24 = *v8;
      if (*(unsigned char *)(a1 + 17)) {
        *(_WORD *)(v24 + 48) |= 8u;
      }
      free(v8);
      return v24;
    case 2:
      uint64_t v24 = compileToSDBTree(*(void *)(a1 + 24), a2);
      uint64_t v35 = MEMORY[0x1E4F143A8];
      uint64_t v36 = 0x40000000;
      int v37 = __db_query_tree_apply_block_block_invoke;
      int v38 = &unk_1E6348598;
      int v39 = &__block_literal_global_12437;
      db_query_tree_apply_block_with_meta((void *)v24, (uint64_t)&v35, 0);
      return v24;
    case 3:
      int v25 = *(void **)(a1 + 24);
      uint64_t v26 = v25[2];
      if (!a2)
      {
        int v27 = *(_DWORD *)(v26 + 24);
        if ((*(unsigned char *)(a1 + 4) & 4) != 0)
        {
          if (v27 == 2)
          {
            int v28 = 1;
            goto LABEL_65;
          }
          if (v27 == 6)
          {
            int v28 = 5;
LABEL_65:
            *(_DWORD *)(v26 + 24) = v28;
            int v25 = *(void **)(a1 + 24);
          }
        }
        uint64_t v35 = MEMORY[0x1E4F143A8];
        uint64_t v36 = 0x40000000;
        int v37 = __db_query_tree_apply_block_block_invoke;
        int v38 = &unk_1E6348598;
        int v39 = &__block_literal_global_21_12478;
        uint64_t tree_apply_block_with_meta = db_query_tree_apply_block_with_meta(v25, (uint64_t)&v35, (uint64_t)&__block_literal_global_25);
        goto LABEL_67;
      }
      if (v26) {
        int v27 = *(_DWORD *)(v26 + 24);
      }
      else {
        int v27 = 0;
      }
      if ((*(unsigned char *)(a1 + 4) & 4) != 0)
      {
        if (v27 == 2)
        {
          int v29 = 1;
          goto LABEL_63;
        }
        if (v27 == 6)
        {
          int v29 = 5;
LABEL_63:
          *(_DWORD *)(v26 + 24) = v29;
          uint64_t tree_apply_block_with_meta = ((uint64_t (*)(void))a2)(*(void *)(a1 + 24));
LABEL_67:
          uint64_t v24 = tree_apply_block_with_meta;
          goto LABEL_68;
        }
      }
      uint64_t v24 = a2();
      if (!v27) {
        return v24;
      }
LABEL_68:
      *(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16) + 24) = v27;
      return v24;
    default:
      return 0;
  }
}

uint64_t indexFactorRewrite(void *a1)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = __db_query_tree_apply_block_block_invoke;
  v2[3] = &unk_1E6348598;
  v2[4] = &__block_literal_global_21_12478;
  return db_query_tree_apply_block_with_meta(a1, (uint64_t)v2, (uint64_t)&__block_literal_global_25);
}

uint64_t factorRewrite(void *a1)
{
  result.location = MEMORY[0x1E4F143A8];
  result.length = 0x40000000;
  __int16 v12 = __db_query_tree_apply_block_block_invoke;
  uint64_t v13 = &unk_1E6348598;
  uint64_t v14 = &__block_literal_global_21_12478;
  uint64_t tree_apply_block_with_meta = db_query_tree_apply_block_with_meta(a1, (uint64_t)&result, (uint64_t)&__block_literal_global_25);
  uint64_t v2 = *(void *)(tree_apply_block_with_meta + 16);
  if (!v2) {
    return tree_apply_block_with_meta;
  }
  if ((*(void *)(v2 + 32) & 0x440) == 0x40)
  {
    uint64_t v3 = *(const char **)(v2 + 72);
    result.location = 0;
    result.length = 0;
    CFStringRef v4 = CFStringCreateWithCStringNoCopy((CFAllocatorRef)kCIQueryZoneAllocator, v3, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    CFIndex Length = CFStringGetLength(v4);
    if (initCharSets_onceToken != -1) {
      dispatch_once(&initCharSets_onceToken, &__block_literal_global_43);
    }
    v15.location = 0;
    v15.length = Length;
    if (CFStringFindCharacterFromSet(v4, (CFCharacterSetRef)_cjkChars, v15, 0, &result))
    {
      CFRelease(v4);
    }
    else
    {
      v16.location = 0;
      v16.length = Length;
      int CharacterFromSet = CFStringFindCharacterFromSet(v4, (CFCharacterSetRef)_infixChars, v16, 0, &result);
      CFRelease(v4);
      if (!CharacterFromSet) {
        goto LABEL_9;
      }
    }
    uint64_t v7 = *(void *)(tree_apply_block_with_meta + 16);
    unsigned int v8 = *(char **)(v7 + 72);
    asprintf((char **)(v7 + 72), "*%s", v8);
    free(v8);
  }
LABEL_9:
  uint64_t v9 = *(void *)(tree_apply_block_with_meta + 16);
  if (v9) {
    *(void *)(v9 + 16) = _qpPostcheckMatch;
  }
  return tree_apply_block_with_meta;
}

void _rewriteQuery(void *a1, double a2)
{
  uint64_t v4 = 0;
  size_t v5 = &v4;
  uint64_t v6 = 0x2000000000;
  uint64_t v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___rewriteQuery_block_invoke;
  v3[3] = &unk_1E6343C38;
  v3[4] = &v4;
  *(double *)&void v3[5] = a2;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  _OWORD v8[2] = __db_query_tree_apply_block_block_invoke;
  v8[3] = &unk_1E6348598;
  v8[4] = v3;
  db_query_tree_apply_block_with_meta(a1, (uint64_t)v8, (uint64_t)&__block_literal_global_18);
  uint64_t v2 = (void *)v5[3];
  if (v2) {
    OSAtomicEnqueue(&s_si_calendar_head, v2, 0);
  }
  _Block_object_dispose(&v4, 8);
}

void ___scheduler_suspension_locked_block_invoke(uint64_t a1)
{
  size_t v5 = 0;
  uint64_t v2 = *(void *)(a1 + 32);
  pthread_mutex_lock(*(pthread_mutex_t **)(v2 + 8));
  if (*(_DWORD *)(v2 + 112) || *(void *)(v2 + 136))
  {
    *(_DWORD *)(v2 + 192) = 0;
    si_scheduler_do_suspend(v2, &v5);
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(v2 + 8));
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3 && atomic_fetch_add((atomic_uint *volatile)(v3 + 88), 0xFFFFFFFF) == 1) {
    _si_scheduler_destroy(v3);
  }
  uint64_t v4 = v5;
  si_scheduler_trigger_tokens(v4);
}

uint64_t si_scheduler_do_suspend(uint64_t a1, void *a2)
{
  int v4 = *(_DWORD *)(a1 + 112);
  uint64_t result = *(void *)(a1 + 136);
  if (v4)
  {
    uint64_t v6 = (_DWORD *)(a1 + 108);
    int v7 = *(_DWORD *)(a1 + 108);
    *(void *)(a1 + 108) = (v7 + v4);
    *(void *)(a1 + 136) = 0;
    if (!result)
    {
      uint64_t v8 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v6 = (_DWORD *)(a1 + 108);
    int v7 = *(_DWORD *)(a1 + 108);
    *(_DWORD *)(a1 + 112) = 0;
    *(void *)(a1 + 136) = 0;
  }
  uint64_t v8 = 0;
  do
  {
    *(unsigned char *)(result + 4) = 1;
    ++*v6;
    uint64_t v9 = *(void *)(result + 16);
    if (*(void *)(result + 32))
    {
      *(void *)(result + 16) = v8;
      uint64_t v8 = result;
    }
    else
    {
      release_token((void *)result);
    }
    uint64_t result = v9;
  }
  while (v9);
LABEL_11:
  if (!v7 && *v6) {
    dispatch_suspend(*(dispatch_object_t *)(a1 + 152));
  }
  *a2 = v8;
  unint64_t v10 = *(pthread_cond_t **)(a1 + 16);
  return pthread_cond_broadcast(v10);
}

void SISearchCtx::~SISearchCtx(SISearchCtx *this)
{
  *(void *)this = &unk_1F1810958;
  os_unfair_lock_lock((os_unfair_lock_t)&sActiveCtxLock);
  if (activeCtxs) {
    CFSetRemoveValue((CFMutableSetRef)activeCtxs, this);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&sActiveCtxLock);
  uint64_t v2 = (const void *)*((void *)this + 11);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 11) = 0;
  uint64_t v3 = (const void *)*((void *)this + 4);
  if (v3) {
    CFRelease(v3);
  }
  *((void *)this + 4) = 0;
  int v4 = (const void *)*((void *)this + 7);
  if (v4) {
    CFRelease(v4);
  }
  *((void *)this + 7) = 0;
  size_t v5 = (const void *)*((void *)this + 8);
  if (v5) {
    CFRelease(v5);
  }
  *((void *)this + 8) = 0;
  uint64_t v6 = (const void *)*((void *)this + 27);
  if (v6) {
    CFRelease(v6);
  }
  *((void *)this + 27) = 0;
  int v7 = (const void *)*((void *)this + 2);
  if (v7) {
    CFRelease(v7);
  }
  *((void *)this + 2) = 0;
  SICompletionModelRelease(*((void **)this + 32));
  SIPommesSuggestionsModelRelease(*((void **)this + 35));
  free(*((void **)this + 33));
  uint64_t v8 = (const void *)*((void *)this + 9);
  if (v8) {
    CFRelease(v8);
  }
  *((void *)this + 9) = 0;
  siquerynode_release(*((int **)this + 14));
  siquerynode_release(*((int **)this + 15));
  uint64_t v9 = (const void *)*((void *)this + 26);
  if (v9) {
    CFRelease(v9);
  }
  *((void *)this + 26) = 0;
  unint64_t v10 = (atomic_uint **)*((void *)this + 18);
  if (v10) {
    db_release_files(v10);
  }
  for (uint64_t i = 312; i != 352; i += 8)
  {
    __int16 v12 = *(void **)((char *)this + i);
    *(void *)((char *)this + i) = 0;
    si_scheduler_resume_with_token(v12);
  }
  if (*((uint64_t *)this + 29) >= 1)
  {
    uint64_t v13 = 0;
    do
      db_free_query_node(*(void **)(*((void *)this + 28) + 8 * v13++));
    while (v13 < *((void *)this + 29));
  }
  free(*((void **)this + 28));
  uint64_t v14 = *((void *)this + 34);
  if (v14)
  {
    if (*(void *)(v14 + 32))
    {
      unint64_t v15 = 0;
      do
        free(*(void **)(*(void *)(v14 + 40) + 8 * v15++));
      while (v15 < *(void *)(v14 + 32));
    }
    free(*(void **)(v14 + 40));
    free(*(void **)(v14 + 8));
    free(*(void **)(v14 + 16));
    if (*(void *)(v14 + 48)) {
      icu_ctx_release();
    }
    if (*(void *)(v14 + 56)) {
      icu_ctx_release();
    }
    if (*(void *)(v14 + 64)) {
      icu_ctx_release();
    }
    if (*(void *)(v14 + 72)) {
      icu_ctx_release();
    }
    CFRange v16 = *(void **)(v14 + 80);
    if (v16)
    {
      unint64_t v17 = *(void *)(v14 + 32);
      if (v17)
      {
        for (unint64_t j = 0; j < v17; ++j)
        {
          if (*(void *)(*(void *)(v14 + 80) + 8 * j))
          {
            icu_ctx_release();
            unint64_t v17 = *(void *)(v14 + 32);
          }
        }
        CFRange v16 = *(void **)(v14 + 80);
      }
      free(v16);
    }
    uint64_t v19 = *(const void **)(v14 + 88);
    if (v19) {
      CFRelease(v19);
    }
  }
  free(*((void **)this + 34));
  si_querypipe_release(*((void *)this + 13));
  CFBagCallBacks v20 = (unsigned __int16 *)*((void *)this + 44);
  if (v20)
  {
    if (v20[2])
    {
      unint64_t v21 = 0;
      uint64_t v22 = 4;
      do
      {
        free(*(void **)&v20[v22]);
        ++v21;
        CFBagCallBacks v20 = (unsigned __int16 *)*((void *)this + 44);
        v22 += 12;
      }
      while (v21 < v20[2]);
    }
    free(v20);
  }
  md_deadline_once_cancel();
  md_deadline_once_release();
  uint64_t v23 = *((void *)this + 1);
  if (atomic_fetch_add((atomic_uint *volatile)(v23 + 584), 0xFFFFFFFF) == 1) {
    si_query_free(v23);
  }
}

void siquerynode_release(int *a1)
{
  if (a1)
  {
    int v2 = *a1;
    if (*a1 < 2)
    {
      if (*((uint64_t *)a1 + 3) >= 1)
      {
        uint64_t v3 = 0;
        do
          siquerynode_release(*(void *)(*((void *)a1 + 4) + 8 * v3++));
        while (*((void *)a1 + 3) > v3);
      }
      free(*((void **)a1 + 4));
    }
    else if (v2 == 2)
    {
      siquerynode_release(*((void *)a1 + 3));
    }
    else if (v2 == 3)
    {
      db_free_query_node(*((void **)a1 + 3));
    }
    free(a1);
  }
}

void *db_free_query_node(void *result)
{
  if (result)
  {
    v1[0] = MEMORY[0x1E4F143A8];
    v1[1] = 0x40000000;
    v1[2] = __db_query_tree_apply_block_block_invoke;
    v1[3] = &unk_1E6348598;
    v1[4] = &__block_literal_global_161;
    return (void *)db_query_tree_apply_block_with_meta(result, (uint64_t)v1, 0);
  }
  return result;
}

void release_token(void *a1)
{
  if (a1 && atomic_fetch_add((atomic_uint *volatile)a1, 0xFFFFFFFF) == 1)
  {
    int v2 = (void (*)(void, uint64_t))a1[4];
    if (v2) {
      v2(a1[5], 1);
    }
    free(a1);
  }
}

void si_scheduler_resume_with_token(void *a1)
{
  if (a1)
  {
    uint64_t v2 = a1[1];
    if (v2)
    {
      pthread_mutex_lock(*(pthread_mutex_t **)(v2 + 8));
      if (!*((unsigned char *)a1 + 5))
      {
        if (*((unsigned char *)a1 + 4))
        {
          int v3 = *(_DWORD *)(v2 + 108) - 1;
          *(_DWORD *)(v2 + 108) = v3;
          if (!v3) {
            dispatch_resume(*(dispatch_object_t *)(v2 + 152));
          }
        }
        else
        {
          int v4 = *(void **)(v2 + 136);
          if (v4 == a1)
          {
            *(void *)(v2 + 136) = a1[2];
LABEL_17:
            release_token(a1);
          }
          else
          {
            while (v4)
            {
              size_t v5 = v4;
              int v4 = (void *)v4[2];
              if (v4 == a1)
              {
                v5[2] = a1[2];
                goto LABEL_17;
              }
            }
          }
        }
      }
      *((unsigned char *)a1 + 5) = 1;
      pthread_cond_broadcast(*(pthread_cond_t **)(v2 + 16));
      pthread_mutex_unlock(*(pthread_mutex_t **)(v2 + 8));
    }
    release_token(a1);
  }
}

void *SIPommesSuggestionsModelRelease(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      if (result[2]) {
        SILocalizationRelease();
      }
      std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>>>::~__hash_table((uint64_t)(v1 + 38));
      std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>>>::~__hash_table((uint64_t)(v1 + 33));
      std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>>>::~__hash_table((uint64_t)(v1 + 28));
      std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>>>::~__hash_table((uint64_t)(v1 + 23));
      std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>>>::~__hash_table((uint64_t)(v1 + 18));
      uint64_t v2 = (void *)v1[15];
      if (v2)
      {
        do
        {
          int v3 = (void *)*v2;
          std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<_photosCandidate>>,0>((uint64_t)(v2 + 2));
          operator delete(v2);
          uint64_t v2 = v3;
        }
        while (v3);
      }
      int v4 = (void *)v1[13];
      v1[13] = 0;
      if (v4) {
        operator delete(v4);
      }
      size_t v5 = (void *)v1[10];
      if (v5)
      {
        do
        {
          uint64_t v6 = (void *)*v5;
          std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<_peopleCandidate>>,0>((uint64_t)(v5 + 2));
          operator delete(v5);
          size_t v5 = v6;
        }
        while (v6);
      }
      int v7 = (void *)v1[8];
      v1[8] = 0;
      if (v7) {
        operator delete(v7);
      }
      uint64_t v8 = (void *)v1[5];
      if (v8)
      {
        do
        {
          uint64_t v9 = (void *)*v8;
          std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<_freeTextCandidate>>,0>((uint64_t)(v8 + 2));
          operator delete(v8);
          uint64_t v8 = v9;
        }
        while (v9);
      }
      unint64_t v10 = (void *)v1[3];
      v1[3] = 0;
      if (v10) {
        operator delete(v10);
      }
      JUMPOUT(0x1C1881000);
    }
  }
  return result;
}

void SICompletionModelRelease(void *a1)
{
  if (a1 && atomic_fetch_add((atomic_uint *volatile)a1, 0xFFFFFFFF) == 1)
  {
    if (a1[1] && (*((unsigned char *)a1 + 4) & 0x10) != 0) {
      SILanguageModelRelease();
    }
    uint64_t v2 = (const void *)a1[5];
    if (v2)
    {
      CFRelease(v2);
      a1[5] = 0;
    }
    int v3 = (const void *)a1[2];
    if (v3)
    {
      CFRelease(v3);
      a1[2] = 0;
    }
    int v4 = (const void *)a1[3];
    if (v4)
    {
      CFRelease(v4);
      a1[3] = 0;
    }
    size_t v5 = (const void *)a1[4];
    if (v5) {
      CFRelease(v5);
    }
    free(a1);
  }
}

void si_query_free(uint64_t a1)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (int *)&unk_1E9FC9000;
  if (dword_1E9FC90A8 >= 5)
  {
    int v46 = *__error();
    unsigned __int16 v47 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v56) = 134217984;
      *(void *)((char *)&v56 + 4) = a1;
      _os_log_impl(&dword_1BD672000, v47, OS_LOG_TYPE_DEFAULT, "%p: Query completely done", (uint8_t *)&v56, 0xCu);
    }
    *__error() = v46;
  }
  int v3 = *(const void **)(a1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  *(void *)(a1 + 8) = 0;
  int v4 = *(const void **)(a1 + 16);
  if (v4) {
    CFRelease(v4);
  }
  *(void *)(a1 + 16) = 0;
  size_t v5 = *(const void **)(a1 + 48);
  if (v5) {
    CFRelease(v5);
  }
  *(void *)(a1 + 48) = 0;
  uint64_t v6 = *(const void **)(a1 + 40);
  if (v6) {
    CFRelease(v6);
  }
  *(void *)(a1 + 40) = 0;
  int v7 = *(const void **)(a1 + 192);
  if (v7) {
    CFRelease(v7);
  }
  *(void *)(a1 + 192) = 0;
  uint64_t v8 = *(const void **)(a1 + 176);
  if (v8) {
    CFRelease(v8);
  }
  *(void *)(a1 + 176) = 0;
  uint64_t v9 = *(const void **)(a1 + 184);
  if (v9) {
    CFRelease(v9);
  }
  *(void *)(a1 + 184) = 0;
  unint64_t v10 = *(const void **)(a1 + 240);
  if (v10) {
    CFRelease(v10);
  }
  *(void *)(a1 + 240) = 0;
  unint64_t v11 = *(const void **)(a1 + 576);
  if (v11) {
    CFRelease(v11);
  }
  *(void *)(a1 + 576) = 0;
  __int16 v12 = *(const void **)(a1 + 24);
  if (v12) {
    CFRelease(v12);
  }
  *(void *)(a1 + 24) = 0;
  uint64_t v13 = *(void **)(a1 + 72);
  if (v13)
  {
    *(void *)&long long v56 = MEMORY[0x1E4F143A8];
    *((void *)&v56 + 1) = 0x40000000;
    unsigned int v57 = __db_query_tree_apply_block_block_invoke;
    int v58 = &unk_1E6348598;
    unsigned int v59 = &__block_literal_global_161;
    db_query_tree_apply_block_with_meta(v13, (uint64_t)&v56, 0);
  }
  uint64_t v14 = *(void **)(a1 + 64);
  if (v14)
  {
    *(void *)&long long v56 = MEMORY[0x1E4F143A8];
    *((void *)&v56 + 1) = 0x40000000;
    unsigned int v57 = __db_query_tree_apply_block_block_invoke;
    int v58 = &unk_1E6348598;
    unsigned int v59 = &__block_literal_global_161;
    db_query_tree_apply_block_with_meta(v14, (uint64_t)&v56, 0);
  }
  unint64_t v15 = *(void **)(a1 + 80);
  if (v15)
  {
    *(void *)&long long v56 = MEMORY[0x1E4F143A8];
    *((void *)&v56 + 1) = 0x40000000;
    unsigned int v57 = __db_query_tree_apply_block_block_invoke;
    int v58 = &unk_1E6348598;
    unsigned int v59 = &__block_literal_global_161;
    db_query_tree_apply_block_with_meta(v15, (uint64_t)&v56, 0);
  }
  CFRange v16 = *(void **)(a1 + 88);
  if (v16)
  {
    *(void *)&long long v56 = MEMORY[0x1E4F143A8];
    *((void *)&v56 + 1) = 0x40000000;
    unsigned int v57 = __db_query_tree_apply_block_block_invoke;
    int v58 = &unk_1E6348598;
    unsigned int v59 = &__block_literal_global_161;
    db_query_tree_apply_block_with_meta(v16, (uint64_t)&v56, 0);
  }
  unint64_t v17 = *(void **)(a1 + 96);
  if (v17)
  {
    *(void *)&long long v56 = MEMORY[0x1E4F143A8];
    *((void *)&v56 + 1) = 0x40000000;
    unsigned int v57 = __db_query_tree_apply_block_block_invoke;
    int v58 = &unk_1E6348598;
    unsigned int v59 = &__block_literal_global_161;
    db_query_tree_apply_block_with_meta(v17, (uint64_t)&v56, 0);
  }
  uint64_t v18 = *(const void **)(a1 + 736);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(a1 + 736) = 0;
  }
  uint64_t v19 = *(const void **)(a1 + 656);
  if (v19) {
    CFRelease(v19);
  }
  *(void *)(a1 + 656) = 0;
  CFBagCallBacks v20 = *(const void **)(a1 + 680);
  if (v20) {
    CFRelease(v20);
  }
  *(void *)(a1 + 680) = 0;
  unint64_t v21 = *(const void **)(a1 + 696);
  if (v21) {
    CFRelease(v21);
  }
  *(void *)(a1 + 696) = 0;
  uint64_t v22 = *(const void **)(a1 + 704);
  if (v22) {
    CFRelease(v22);
  }
  *(void *)(a1 + 704) = 0;
  uint64_t v23 = *(const void **)(a1 + 712);
  if (v23) {
    CFRelease(v23);
  }
  *(void *)(a1 + 712) = 0;
  uint64_t v24 = *(pthread_mutex_t **)(a1 + 120);
  if (v24)
  {
    int v25 = *(void **)(a1 + 104);
    if (v25)
    {
      query_node_unique_release(v24, v25);
      if (dword_1E9FC90A8 >= 5)
      {
        int v48 = *__error();
        unsigned int v49 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
        {
          CFStringRef node_unique_set_copy_description = _query_node_unique_set_copy_description(*(pthread_mutex_t **)(a1 + 120));
          LODWORD(v56) = 138412290;
          *(void *)((char *)&v56 + 4) = node_unique_set_copy_description;
          _os_log_impl(&dword_1BD672000, v49, OS_LOG_TYPE_DEFAULT, "live query nodes: %@", (uint8_t *)&v56, 0xCu);
          int v51 = __error();
          CFStringRef v52 = node_unique_set_copy_description;
          uint64_t v2 = (_DWORD *)&unk_1E9FC9000;
          *int v51 = v48;
          if (v52) {
            CFRelease(v52);
          }
        }
        else
        {
          *__error() = v48;
        }
      }
    }
    uint64_t v26 = *(void **)(a1 + 112);
    if (v26)
    {
      query_node_unique_release(*(pthread_mutex_t **)(a1 + 120), v26);
      if (v2[42] >= 5)
      {
        int v53 = *__error();
        int v54 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
        {
          CFStringRef v55 = _query_node_unique_set_copy_description(*(pthread_mutex_t **)(a1 + 120));
          LODWORD(v56) = 138412290;
          *(void *)((char *)&v56 + 4) = v55;
          _os_log_impl(&dword_1BD672000, v54, OS_LOG_TYPE_DEFAULT, "live filter query nodes: %@", (uint8_t *)&v56, 0xCu);
          *__error() = v53;
          if (v55) {
            CFRelease(v55);
          }
        }
        else
        {
          *__error() = v53;
        }
      }
    }
    query_node_unique_set_release(*(void *)(a1 + 120));
  }
  int v27 = *(void **)(a1 + 272);
  if (v27)
  {
    *(void *)&long long v56 = MEMORY[0x1E4F143A8];
    *((void *)&v56 + 1) = 0x40000000;
    unsigned int v57 = __db_query_tree_apply_block_block_invoke;
    int v58 = &unk_1E6348598;
    unsigned int v59 = &__block_literal_global_161;
    db_query_tree_apply_block_with_meta(v27, (uint64_t)&v56, 0);
    *(void *)(a1 + 272) = 0;
  }
  int v28 = *(void **)(a1 + 128);
  if (v28)
  {
    if (*(uint64_t *)(a1 + 136) >= 1)
    {
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      do
      {
        siquerynode_release(*(int **)(*(void *)(a1 + 128) + v29));
        siquerynode_release(*(int **)(*(void *)(a1 + 128) + v29 + 8));
        ++v30;
        v29 += 16;
      }
      while (v30 < *(void *)(a1 + 136));
      int v28 = *(void **)(a1 + 128);
    }
    free(v28);
  }
  BOOL v31 = *(void **)(a1 + 248);
  if (v31)
  {
    if (*(uint64_t *)(a1 + 256) >= 1)
    {
      uint64_t v32 = 0;
      do
      {
        db_free_query_node(*(void **)(*(void *)(a1 + 248) + 8 * v32));
        *(void *)(*(void *)(a1 + 248) + 8 * v32++) = 0;
      }
      while (v32 < *(void *)(a1 + 256));
      BOOL v31 = *(void **)(a1 + 248);
    }
    free(v31);
  }
  unint64_t v33 = *(void **)(a1 + 264);
  if (v33)
  {
    if (*(uint64_t *)(a1 + 288) >= 1)
    {
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      do
      {
        uint64_t v36 = (long long *)(*(void *)(a1 + 264) + v34);
        long long v56 = *v36;
        unsigned int v57 = (uint64_t (*)(uint64_t))*((void *)v36 + 2);
        destroy_lifting_rule((uint64_t)&v56);
        ++v35;
        v34 += 24;
      }
      while (v35 < *(void *)(a1 + 288));
      unint64_t v33 = *(void **)(a1 + 264);
    }
    free(v33);
    *(void *)(a1 + 264) = 0;
  }
  int v37 = *(void **)(a1 + 280);
  if (v37)
  {
    *(void *)&long long v56 = MEMORY[0x1E4F143A8];
    *((void *)&v56 + 1) = 0x40000000;
    unsigned int v57 = __db_query_tree_apply_block_block_invoke;
    int v58 = &unk_1E6348598;
    unsigned int v59 = &__block_literal_global_161;
    db_query_tree_apply_block_with_meta(v37, (uint64_t)&v56, 0);
  }
  int v38 = *(void **)(a1 + 224);
  if (v38)
  {
    *(void *)&long long v56 = MEMORY[0x1E4F143A8];
    *((void *)&v56 + 1) = 0x40000000;
    unsigned int v57 = __db_query_tree_apply_block_block_invoke;
    int v58 = &unk_1E6348598;
    unsigned int v59 = &__block_literal_global_161;
    db_query_tree_apply_block_with_meta(v38, (uint64_t)&v56, 0);
  }
  int v39 = *(const void **)(a1 + 664);
  if (v39) {
    CFRelease(v39);
  }
  *(void *)(a1 + 664) = 0;
  CFArrayRef v40 = *(const __CFArray **)(a1 + 720);
  if (v40)
  {
    if (!*(void *)(a1 + 728)) {
      goto LABEL_82;
    }
    CFIndex Count = CFArrayGetCount(v40);
    if (Count >= 1)
    {
      CFIndex v42 = Count;
      for (uint64_t i = 0; i != v42; ++i)
        db_free_query_node(*(void **)(*(void *)(a1 + 728) + 8 * i));
    }
    free(*(void **)(a1 + 728));
    CFArrayRef v40 = *(const __CFArray **)(a1 + 720);
    if (v40) {
LABEL_82:
    }
      CFRelease(v40);
    *(void *)(a1 + 720) = 0;
  }
  int v44 = *(const void **)(a1 + 744);
  if (v44) {
    CFRelease(v44);
  }
  *(void *)(a1 + 744) = 0;
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  *(void *)a1 = 0;
  unsigned __int16 v45 = *(const void **)(a1 + 32);
  if (v45) {
    CFRelease(v45);
  }
  *(void *)(a1 + 32) = 0;
  free(*(void **)(a1 + 600));
  free((void *)a1);
}

void db_release_files(atomic_uint **a1)
{
  _fd_release_fd(*a1, *((_DWORD *)a1 + 2), 0, (uint64_t)a1[2]);
  fd_release(*a1);
  free(a1);
}

BOOL BestLanguageDictionaryEqualCallBack(unsigned __int16 *a1, unsigned __int16 *a2)
{
  uint64_t v2 = *a1;
  if (v2 != *a2) {
    return 0;
  }
  unint64_t v5 = a1[1];
  if (v5 != a2[1]) {
    return 0;
  }
  if (*a1)
  {
    uint64_t v6 = (const char **)*((void *)a1 + 1);
    int v7 = (const char **)*((void *)a2 + 1);
    while (!strcmp(*v6, *v7))
    {
      ++v7;
      ++v6;
      if (!--v2) {
        goto LABEL_7;
      }
    }
    return 0;
  }
LABEL_7:
  if (v5)
  {
    uint64_t v8 = 0;
    BOOL v9 = 0;
    uint64_t v10 = *((void *)a1 + 2);
    uint64_t v11 = *((void *)a2 + 2);
    do
    {
      if (strcmp(*(const char **)(v10 + 8 * v8), *(const char **)(v11 + 8 * v8))) {
        break;
      }
      BOOL v9 = ++v8 >= v5;
    }
    while (v5 != v8);
  }
  else
  {
    return 1;
  }
  return v9;
}

unsigned char *fd_realpath(_DWORD *a1, unsigned char *a2)
{
  uint64_t v7 = 0;
  int v4 = _fd_acquire_fd((uint64_t)a1, &v7);
  if (v4 == -1) {
    return 0;
  }
  int v5 = v4;
  if (fcntl(v4, 50, a2) < 0 || !*a2) {
    a2 = 0;
  }
  _fd_release_fd(a1, v5, 0, v7);
  return a2;
}

uint64_t _si_delete_attributes_inner(uint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  uint64_t v149 = *MEMORY[0x1E4F143B8];
  uint64_t v145 = 0;
  int v132 = *(unsigned __int8 *)(a1 + 2064);
  int v127 = *(_DWORD *)(a1 + 828);
  int v13 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v14 = setThreadIdAndInfo(-1, (long long *)sSDBExceptionCallbacks, *(void *)(a1 + 1184), 0x40000000, v13);
  unsigned int v143 = HIDWORD(v14);
  unsigned int v144 = v14;
  unsigned int v141 = v16;
  unsigned int v142 = v15;
  uint64_t v17 = *(void *)&threadData[18 * v14 + 2];
  uint64_t v18 = v17 + 320 * HIDWORD(v14);
  *(unsigned char *)(v18 + 216) = 0;
  int v133 = *(_DWORD *)(v18 + 312);
  uint64_t v19 = *(void (**)(void))(v18 + 224);
  if (v19) {
    v19(*(void *)(v17 + 320 * HIDWORD(v14) + 288));
  }
  unsigned int v140 = v144;
  unsigned int v139 = v143;
  unsigned int v138 = v142;
  unsigned int v137 = v141;
  if (_setjmp((int *)v18))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
    }
    *(_DWORD *)(v18 + 312) = v133;
    CIOnThreadCleanUpReset(v137);
    dropThreadId(v140, 1, v13);
    return CICleanUpReset(v140, v138);
  }
  if (!db_get_obj_callback(*(int **)(a1 + 1184), a2, (void **)&v145, 0, (void (*)(void *, uint64_t))si_docIdRewriteCallback, *(void *)(a1 + 2360), 0))
  {
    if (dword_1E9FC90B4 >= 5)
    {
      int v109 = *__error();
      uint64_t v110 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)&uint8_t buf[4] = a2;
        _os_log_impl(&dword_1BD672000, v110, OS_LOG_TYPE_DEFAULT, "si_delete_attributes_inner oid: %lld", buf, 0xCu);
      }
      *__error() = v109;
    }
    uint64_t v22 = (uint64_t)v145;
    uint64_t v23 = si_indexForDocId(a1, v145[4]);
    if (a7 && isSyndicatedContent(a1, v22)) {
      *a7 = 1;
    }
    unsigned int v128 = a4;
    unsigned int v129 = a3;
    int v134 = v13;
    unsigned int v130 = a5;
    uint64_t v125 = v23;
    if (!v132)
    {
      uint64_t v31 = a5;
      CFStringRef v32 = 0;
      CFStringRef v33 = 0;
      size_t v34 = 0;
      uint64_t v35 = 0;
LABEL_55:
      int v50 = (const UInt8 *)v35;
      size_t v51 = v34;
      CFStringRef v52 = v33;
      if (v125 && _CIGetOIDForDocId(v125, v145[4], 1) == a2)
      {
        _CIDelete(v125, v145[4], a2, 0);
      }
      else if (a6)
      {
        pthread_rwlock_wrlock((pthread_rwlock_t *)(a6 + 16));
        SIValueSet<unsigned long long>::SIValueSetInsert((unint64_t *)(a6 + 216), a2);
        pthread_rwlock_unlock((pthread_rwlock_t *)(a6 + 16));
      }
      int v53 = *(int **)(a1 + 1184);
      if (*v53 != 1685287992)
      {
        int v111 = *__error();
        int v112 = _SILogForLogForCategory(4);
        if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
        {
          int v113 = *v53;
          *(_DWORD *)long long buf = 136315650;
          *(void *)&uint8_t buf[4] = "db_delete_obj_with_flags";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 331;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v113;
          _os_log_error_impl(&dword_1BD672000, v112, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
        }
        *__error() = v111;
        int v114 = __si_assert_copy_extra_329();
        int v115 = v114;
        if (v114) {
          unint64_t v116 = v114;
        }
        else {
          unint64_t v116 = "";
        }
        __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 331, v116);
        free(v115);
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      int v54 = db2_delete_obj_with_flags(*(void *)(a1 + 1184), (uint64_t)v145, v128);
      if (!v54) {
        si_set_obj_state((os_unfair_lock_s *)a1, *(void *)(a1 + 1184));
      }
      if (!v132)
      {
        int v59 = v54;
        size_t v60 = v51;
        CFStringRef v61 = v32;
        CFStringRef v62 = v52;
        unsigned int v63 = v50;
        if (v59)
        {
LABEL_155:
          int v98 = v59;
          int v99 = *__error();
          int v100 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = "_si_delete_attributes_inner";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3036;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v98;
            _os_log_error_impl(&dword_1BD672000, v100, OS_LOG_TYPE_ERROR, "%s:%d: Deleting item failed with error %d", buf, 0x18u);
          }
          *__error() = v99;
LABEL_158:
          CFStringRef v80 = v61;
          int v13 = v134;
LABEL_159:
          free(v145);
          si_perform_livequeries_deletions(a1);
          int v21 = v133;
          if (v132)
          {
            si_remove_icon_cache_for_oid(a1, a2);
            if (v80) {
              CFRelease(v80);
            }
            if (v62) {
              CFRelease(v62);
            }
          }
          else
          {
            uint64_t v101 = *(void *)(a1 + 1408);
            if (v101)
            {
              int v102 = *(void (**)(void))(v101 + 104);
              if (v102)
              {
                if (!*(unsigned char *)(v101 + 240)) {
                  v102();
                }
              }
            }
          }
          goto LABEL_168;
        }
LABEL_77:
        *(void *)long long buf = 0;
        unsigned int v146 = 0;
        unint64_t v147 = *(unsigned int *)(a1 + 2000);
        if (!db_get_field_by_id(*(int **)(a1 + 1184), (uint64_t)v145, (int *)&v147, (unint64_t *)buf, (unint64_t *)&v146))
        {
          if (!v132 && *v146 > 0x15u)
          {
LABEL_96:
            if (objectCanHaveTextCache(*(int **)(a1 + 1184), (uint64_t)v145, 0)) {
              si_remove_text_content_cache_for_oid(a1, a2);
            }
            goto LABEL_158;
          }
          bytes = 0;
          LODWORD(v147) = *(_DWORD *)(a1 + 2004);
          int field_by_id = db_get_field_by_id(*(int **)(a1 + 1184), (uint64_t)v145, (int *)&v147, (unint64_t *)buf, (unint64_t *)&bytes);
          pthread_mutex_lock((pthread_mutex_t *)(a1 + 6968));
          if (field_by_id)
          {
            uint64_t v65 = v146;
          }
          else
          {
            uint64_t v66 = v146;
            *(void *)(a1 + 8 * *v146 + 7032) -= *(void *)bytes;
            uint64_t v65 = v66;
          }
          --*(_DWORD *)(a1 + 4 * *v65 + 9080);
          pthread_mutex_unlock((pthread_mutex_t *)(a1 + 6968));
        }
        if (v132 && v60)
        {
          bytes = 0;
          CFStringRef v126 = v62;
          if (!db_get_field(*(int **)(a1 + 1184), (uint64_t)v145, "_kMDItemRelatedObjects", (unint64_t *)buf, &bytes))
          {
            unint64_t v135 = 0;
            if ((*(_WORD *)(*(void *)buf + 2) & 0x20) != 0)
            {
              unsigned int v81 = bytes;
              unint64_t v118 = *(void *)buf + *(unsigned int *)(*(void *)buf + 8) + 13;
              if ((unint64_t)bytes < v118)
              {
                CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
                CFStringRef v82 = v61;
                do
                {
                  CFStringRef v61 = v82;
                  size_t v83 = strlen((const char *)v81);
                  size_t v84 = v83 + 1;
                  if (!_si_get_object_for_identifier_createParentDBO(a1, (int)v83 + 1, (char *)v81, v60, (uint64_t)v63, 0, 0, 0, &v135, 0, 0))
                  {
                    _si_delete_attributes_inner(a1, v135, v129, v128, v31, a6, a7);
                    CFStringRef v85 = v61;
                    if (!v61) {
                      CFStringRef v85 = CFStringCreateWithBytes(alloc, v63, v60 - 1, 0x8000100u, 0);
                    }
                    CFStringRef v86 = CFStringCreateWithBytes(alloc, bytes, v83, 0x8000100u, 0);
                    if (v86)
                    {
                      CFStringRef v87 = v86;
                      if (v85)
                      {
                        uint64_t v88 = *(void *)(a1 + 2352);
                        int v89 = *(void (**)(void, void, CFStringRef, CFStringRef, void))(v88 + 112);
                        if (v89)
                        {
                          if (*(unsigned char *)(a1 + 2064)) {
                            v89(*(void *)(v88 + 144), 0, v85, v86, 0);
                          }
                        }
                      }
                      CFRelease(v87);
                    }
                    CFStringRef v61 = v85;
                  }
                  CFStringRef v82 = v61;
                  bytes += v84;
                  unsigned int v81 = bytes;
                }
                while ((unint64_t)bytes < v118);
              }
            }
            else if (!_si_get_object_for_identifier_createParentDBO(a1, *(_DWORD *)(*(void *)buf + 8), (char *)bytes, v60, (uint64_t)v63, 0, 0, 0, &v135, 0, 0))
            {
              _si_delete_attributes_inner(a1, v135, v129, v128, v31, a6, a7);
              CFAllocatorRef v70 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              CFStringRef v71 = v61;
              if (!v61) {
                CFStringRef v71 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v63, v60 - 1, 0x8000100u, 0);
              }
              CFStringRef v61 = v71;
              CFStringRef v72 = CFStringCreateWithBytes(v70, bytes, *(unsigned int *)(*(void *)buf + 8), 0x8000100u, 0);
              if (v72)
              {
                CFStringRef v73 = v72;
                if (v61)
                {
                  uint64_t v74 = *(void *)(a1 + 2352);
                  uint64_t v75 = *(void (**)(void, void, CFStringRef, CFStringRef, void))(v74 + 112);
                  if (v75)
                  {
                    if (*(unsigned char *)(a1 + 2064)) {
                      v75(*(void *)(v74 + 144), 0, v61, v72, 0);
                    }
                  }
                }
                CFRelease(v73);
              }
            }
          }
          CFStringRef v67 = v61;
          if (!db_get_field(*(int **)(a1 + 1184), (uint64_t)v145, "_kMDItemRelatedObjectsWithBundle", (unint64_t *)buf, &bytes))
          {
            unint64_t v68 = (char *)(*(void *)buf + 13);
            uint64_t v69 = *(unsigned int *)(*(void *)buf + 8);
            if ((*(_WORD *)(*(void *)buf + 2) & 0x20) != 0)
            {
              unint64_t v76 = (unint64_t)&v68[v69];
              for (uint64_t i = bytes; (unint64_t)bytes < v76; uint64_t i = bytes)
              {
                uint64_t v78 = strlen((const char *)i) + 1;
                cleanupRelatedItemWithBundle((char *)i, v78, v129, v31, a1, a6);
                bytes += v78;
              }
            }
            else
            {
              cleanupRelatedItemWithBundle(v68, *(unsigned int *)(*(void *)buf + 8), v129, v31, a1, a6);
            }
          }
          char v79 = strcmp((const char *)v63, "com.apple.searchstressattr") == 0;
          if (objectCanHaveTextCache(*(int **)(a1 + 1184), (uint64_t)v145, v79)) {
            si_remove_text_content_cache_for_oid(a1, a2);
          }
          CFStringRef v80 = v67;
          int v13 = v134;
          CFStringRef v62 = v126;
          goto LABEL_159;
        }
        goto LABEL_96;
      }
      char v48 = 17;
      int v47 = v54;
      unsigned int v49 = (char *)v50;
      size_t v24 = v51;
      CFStringRef v44 = v52;
      CFStringRef v43 = v32;
LABEL_65:
      CFStringRef v123 = v43;
      size_t v55 = v24;
      __s1 = v49;
      int v122 = v47;
      if (v47) {
        char v56 = 19;
      }
      else {
        char v56 = v48;
      }
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2216));
      if (*(unsigned __int8 *)(a1 + 2221) != a3)
      {
        *(unsigned char *)(a1 + 2221) = a3;
        if (a3) {
          char v57 = 26;
        }
        else {
          char v57 = 27;
        }
        activityJournalWrite(a1 + 2184, v57, 0, 0);
      }
      if (*(_DWORD *)(a1 + 2200) != HIDWORD(a2))
      {
        *(_DWORD *)(a1 + 2200) = HIDWORD(a2);
        memset(buf, 0, sizeof(buf));
        if (HIDWORD(a2) > 0x7F)
        {
          if (HIDWORD(a2) >> 14)
          {
            if (HIDWORD(a2) >> 21)
            {
              if (HIDWORD(a2) >> 28)
              {
                buf[0] = -16;
                *(_DWORD *)&buf[1] = HIDWORD(a2);
                unsigned int v58 = 5;
              }
              else
              {
                buf[0] = HIBYTE(a2) | 0xE0;
                buf[1] = BYTE6(a2);
                buf[2] = BYTE5(a2);
                buf[3] = BYTE4(a2);
                unsigned int v58 = 4;
              }
            }
            else
            {
              buf[0] = BYTE6(a2) | 0xC0;
              buf[1] = BYTE5(a2);
              buf[2] = BYTE4(a2);
              unsigned int v58 = 3;
            }
          }
          else
          {
            buf[0] = BYTE5(a2) | 0x80;
            buf[1] = BYTE4(a2);
            unsigned int v58 = 2;
          }
        }
        else
        {
          buf[0] = BYTE4(a2);
          unsigned int v58 = 1;
        }
        activityJournalWrite(a1 + 2184, 16, buf, v58);
      }
      memset(buf, 0, sizeof(buf));
      if (a2 > 0x7F)
      {
        CFStringRef v91 = v44;
        CFStringRef v61 = v123;
        if (a2 >> 14)
        {
          if (a2 >> 21)
          {
            if (a2 >> 28)
            {
              buf[0] = -16;
              *(_DWORD *)&buf[1] = a2;
              unsigned int v90 = 5;
            }
            else
            {
              buf[0] = BYTE3(a2) | 0xE0;
              buf[1] = BYTE2(a2);
              buf[2] = BYTE1(a2);
              buf[3] = a2;
              unsigned int v90 = 4;
            }
          }
          else
          {
            buf[0] = BYTE2(a2) | 0xC0;
            buf[1] = BYTE1(a2);
            buf[2] = a2;
            unsigned int v90 = 3;
          }
        }
        else
        {
          buf[0] = BYTE1(a2) | 0x80;
          buf[1] = a2;
          unsigned int v90 = 2;
        }
      }
      else
      {
        buf[0] = a2;
        unsigned int v90 = 1;
        CFStringRef v91 = v44;
        CFStringRef v61 = v123;
      }
      activityJournalWrite(a1 + 2184, v56, buf, v90);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 2216));
      unsigned int v63 = (const UInt8 *)__s1;
      if (v55 && !strcmp(__s1, "com.apple.mobilemail") && objectHasContent(*(int **)(a1 + 1184), (uint64_t)v145)) {
        si_enqueue_text_store_doc_for_deletion(a1, a2);
      }
      if (_os_feature_enabled_impl())
      {
        if ((v127 & 0x1000) == 0)
        {
          if (v61)
          {
            if (v91)
            {
              CFAllocatorRef v92 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D510]);
              if (Mutable)
              {
                CFAllocatorRef v94 = v92;
                uint64_t v95 = Mutable;
                uint64_t v96 = CFDictionaryCreateMutable(v94, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                if (v96)
                {
                  int v97 = v96;
                  CFDictionarySetValue(v96, @"_kMDItemBundleID", v61);
                  CFDictionarySetValue(v97, @"_kMDItemExternalID", v91);
                  CFArrayAppendValue(v95, v97);
                  si_delete_journal_add_cs_deleted(a1, (const __CFDictionary *)v61, v95);
                  CFRelease(v97);
                }
                CFRelease(v95);
              }
            }
          }
        }
      }
      int v59 = v122;
      size_t v60 = v55;
      CFStringRef v62 = v91;
      uint64_t v31 = v130;
      if (v122) {
        goto LABEL_155;
      }
      goto LABEL_77;
    }
    size_t v24 = 0;
    unint64_t v147 = 0;
    bytes = 0;
    if (db_get_field(*(int **)(a1 + 1184), (uint64_t)v145, "_kMDItemBundleID", &v147, &bytes))
    {
      char v25 = 0;
      char v26 = 17;
      int v27 = 1;
      LODWORD(string_for_id) = 0;
      uint64_t v29 = 0;
      CFStringRef v30 = 0;
      goto LABEL_35;
    }
    if ((*(_WORD *)(v147 + 2) & 0x10) != 0)
    {
      string_for_id = (const char *)db_get_string_for_id(*(int **)(a1 + 1184), *(_DWORD *)(v147 + 13));
      if (!string_for_id)
      {
        char v25 = 0;
        size_t v24 = 0;
        char v37 = 17;
        int v27 = 1;
        uint64_t v29 = 0;
        goto LABEL_33;
      }
      uint64_t v29 = string_for_id;
      size_t v24 = strlen(string_for_id) + 1;
    }
    else
    {
      uint64_t v29 = (const char *)(v147 + 13);
      size_t v24 = *(unsigned int *)(v147 + 8);
    }
    if (v24)
    {
      if (!strcmp(v29, "com.apple.MobileSMS")) {
        goto LABEL_30;
      }
      uint64_t v36 = *(int **)(a1 + 1184);
      *(void *)long long buf = 0;
      unsigned int v146 = 0;
      if (db_get_field(v36, (uint64_t)v145, "_kMDItemEligibleForPhotosProcessing", (unint64_t *)&v146, buf)|| !**(unsigned char **)buf)
      {
        CFStringRef v30 = 0;
        char v37 = 17;
        char v25 = 1;
        int v27 = 1;
        LODWORD(string_for_id) = 0;
LABEL_34:
        char v26 = v37;
        goto LABEL_35;
      }
      if (!strcmp(v29, "com.apple.mobilenotes"))
      {
LABEL_30:
        CFStringRef v38 = 0;
      }
      else
      {
        CFStringRef v38 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)v29, v24 - 1, 0x8000100u, 0);
        if (!v38)
        {
          CFStringRef v30 = 0;
          char v26 = 17;
          LODWORD(string_for_id) = 0;
          char v25 = 1;
          int v27 = 1;
LABEL_35:
          size_t v39 = 0;
          char v120 = v26;
          int v121 = v27;
          int v119 = (int)string_for_id;
          *(void *)long long buf = 0;
          unsigned int v146 = 0;
          if (db_get_field(*(int **)(a1 + 1184), (uint64_t)v145, "_kMDItemExternalID", (unint64_t *)buf, &v146))
          {
            CFArrayRef v40 = 0;
          }
          else if ((*(_WORD *)(*(void *)buf + 2) & 0x10) != 0)
          {
            unint64_t v41 = (const char *)db_get_string_for_id(*(int **)(a1 + 1184), *(_DWORD *)(*(void *)buf + 13));
            if (v41)
            {
              CFArrayRef v40 = (const UInt8 *)v41;
              size_t v39 = strlen(v41) + 1;
            }
            else
            {
              CFArrayRef v40 = 0;
              size_t v39 = 0;
            }
          }
          else
          {
            CFArrayRef v40 = (const UInt8 *)(*(void *)buf + 13);
            size_t v39 = *(unsigned int *)(*(void *)buf + 8);
          }
          char v42 = v25 ^ 1;
          if (v30) {
            char v42 = 1;
          }
          CFStringRef v43 = v30;
          if ((v42 & 1) == 0) {
            CFStringRef v43 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)v29, v24 - 1, 0x8000100u, 0);
          }
          if (v39) {
            CFStringRef v44 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v40, v39 - 1, 0x8000100u, 0);
          }
          else {
            CFStringRef v44 = 0;
          }
          uint64_t v31 = v130;
          if (_os_feature_enabled_impl()
            && *(unsigned char *)(a1 + 2064)
            && v43
            && SpotlightCacheBundleID())
          {
            unsigned __int16 v45 = malloc_type_calloc(1uLL, 0x18uLL, 0x60040149E097CuLL);
            int v46 = v145;
            *unsigned __int16 v45 = a1;
            v45[1] = v46;
            si_deleteCacheEntry(v45, 0);
          }
          CFStringRef v32 = v43;
          CFStringRef v33 = v44;
          size_t v34 = v24;
          uint64_t v35 = v29;
          int v47 = v119;
          char v48 = v120;
          unsigned int v49 = (char *)v29;
          if (!v121) {
            goto LABEL_65;
          }
          goto LABEL_55;
        }
      }
      CFStringRef v30 = v38;
      LODWORD(string_for_id) = si_zombifyItem(a1);
      char v37 = 54;
      char v25 = 1;
      int v27 = 0;
      goto LABEL_34;
    }
    char v25 = 0;
    char v37 = 17;
    int v27 = 1;
    LODWORD(string_for_id) = 0;
LABEL_33:
    CFStringRef v30 = 0;
    goto LABEL_34;
  }
  if (a6)
  {
    pthread_rwlock_wrlock((pthread_rwlock_t *)(a6 + 16));
    SIValueSet<unsigned long long>::SIValueSetInsert((unint64_t *)(a6 + 216), a2);
    pthread_rwlock_unlock((pthread_rwlock_t *)(a6 + 16));
  }
  if (gSILogLevels[0] >= 5)
  {
    int v107 = *__error();
    int v108 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_impl(&dword_1BD672000, v108, OS_LOG_TYPE_DEFAULT, "couldn't get dbo for oid: %lld", buf, 0xCu);
    }
    *__error() = v107;
  }
  int v21 = v133;
  if (v132) {
    si_remove_icon_cache_for_oid(a1, a2);
  }
LABEL_168:
  uint64_t v103 = *(void *)&threadData[18 * v140 + 2];
  unsigned int v104 = v139;
  uint64_t v105 = v103 + 320 * v139;
  *(_DWORD *)(v105 + 312) = v21;
  long long v106 = *(void (**)(void))(v105 + 232);
  if (v106) {
    v106(*(void *)(v103 + 320 * v104 + 288));
  }
  return dropThreadId(v140, 0, v13);
}

uint64_t db_get_field(int *a1, uint64_t a2, char *__s, unint64_t *a4, void *a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (*a1 != 1685287992)
  {
    int v18 = *__error();
    uint64_t v19 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      int v20 = *a1;
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "db_get_field";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 368;
      __int16 v25 = 1024;
      int v26 = v20;
      _os_log_error_impl(&dword_1BD672000, v19, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v18;
    int v21 = __si_assert_copy_extra_329();
    uint64_t v22 = v21;
    if (v21) {
      uint64_t v23 = v21;
    }
    else {
      uint64_t v23 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 368, v23);
    free(v22);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  uint64_t v8 = (int *)internal_copy_field_ids((uint64_t)a1, __s, (uint64_t)buf, 4uLL, 0);
  if (!v8) {
    return 2;
  }
  uint64_t v9 = *(unsigned int *)(a2 + 12);
  if (v9 >= 0x31 && *v8)
  {
    unint64_t v10 = a2 + v9;
    unint64_t v11 = a2 + 48;
    while (2)
    {
      uint64_t v12 = 1;
      int v13 = *v8;
      do
      {
        if (*(_DWORD *)(v11 + 4) == v13)
        {
          if (a4) {
            *a4 = v11;
          }
          if (a5) {
            *a5 = v11 + 13;
          }
          uint64_t v14 = 0;
          uint64_t v15 = 0;
          goto LABEL_21;
        }
        int v13 = v8[v12++];
      }
      while (v13);
      v11 += *(unsigned int *)(v11 + 8) + 13;
      if (v11 < v10) {
        continue;
      }
      break;
    }
  }
  if (a4) {
    *a4 = 0;
  }
  if (a5) {
    *a5 = 0;
  }
  uint64_t v14 = 2;
  uint64_t v15 = 2;
LABEL_21:
  if (buf != (unsigned char *)v8)
  {
    free(v8);
    return v14;
  }
  return v15;
}

uint64_t db_get_field_by_id(int *a1, uint64_t a2, int *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (*a1 != 1685287992)
  {
    int v14 = *__error();
    uint64_t v15 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      int v16 = *a1;
      *(_DWORD *)long long buf = 136315650;
      int v21 = "db_get_field_by_id";
      __int16 v22 = 1024;
      int v23 = 371;
      __int16 v24 = 1024;
      int v25 = v16;
      _os_log_error_impl(&dword_1BD672000, v15, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v14;
    uint64_t v17 = __si_assert_copy_extra_329();
    int v18 = v17;
    if (v17) {
      uint64_t v19 = v17;
    }
    else {
      uint64_t v19 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 371, v19);
    free(v18);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  if (!a3) {
    return 2;
  }
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5 >= 0x31 && *a3)
  {
    unint64_t v6 = a2 + v5;
    unint64_t v7 = a2 + 48;
LABEL_6:
    uint64_t v8 = a3 + 1;
    int v9 = *a3;
    while (*(_DWORD *)(v7 + 4) != v9)
    {
      int v10 = *v8++;
      int v9 = v10;
      if (!v10)
      {
        v7 += *(unsigned int *)(v7 + 8) + 13;
        if (v7 < v6) {
          goto LABEL_6;
        }
        goto LABEL_10;
      }
    }
    if (a4) {
      *a4 = v7;
    }
    uint64_t result = 0;
    if (a5)
    {
      unint64_t v12 = v7 + 13;
      goto LABEL_19;
    }
  }
  else
  {
LABEL_10:
    if (a4) {
      *a4 = 0;
    }
    uint64_t result = 2;
    if (a5)
    {
      unint64_t v12 = 0;
LABEL_19:
      *a5 = v12;
    }
  }
  return result;
}

void activityJournalWrite(uint64_t a1, char a2, const void *a3, unsigned int a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(void *)a1)
  {
    bzero(&v17, 0x400uLL);
    if (!*(unsigned char *)(a1 + 36))
    {
      *(unsigned char *)(a1 + 36) = 1;
      char v17 = 113;
      unsigned int v8 = getpid();
      if (v8 > 0x7F)
      {
        if (v8 >> 14)
        {
          if (v8 >> 21)
          {
            if (v8 >> 28)
            {
              char v18 = -16;
              unsigned int v19 = v8;
              uint64_t v9 = 6;
            }
            else
            {
              char v18 = HIBYTE(v8) | 0xE0;
              LOBYTE(v19) = BYTE2(v8);
              BYTE1(v19) = BYTE1(v8);
              BYTE2(v19) = v8;
              uint64_t v9 = 5;
            }
          }
          else
          {
            char v18 = BYTE2(v8) | 0xC0;
            LOBYTE(v19) = BYTE1(v8);
            BYTE1(v19) = v8;
            uint64_t v9 = 4;
          }
        }
        else
        {
          char v18 = BYTE1(v8) | 0x80;
          LOBYTE(v19) = v8;
          uint64_t v9 = 3;
        }
      }
      else
      {
        char v18 = v8;
        uint64_t v9 = 2;
      }
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      uint64_t v11 = v2_writeVInt64_9466((uint64_t)&v17, v9, (unint64_t)Current);
      unint64_t v12 = &v17 + v11;
      *(&v17 + v11) = 0;
      CFDictionaryRef v13 = (const __CFDictionary *)_CFCopySystemVersionDictionary();
      if (v13)
      {
        CFDictionaryRef v14 = v13;
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E4F1CD10]);
        if (Value && !CFStringGetCString(Value, v12, 1024 - v11, 0x8000100u)) {
          *unint64_t v12 = 0;
        }
        CFRelease(v14);
      }
      size_t v16 = strlen(v12);
      fd_write(*(void *)a1, (uint64_t)&v17, v11 + v16 + 1);
    }
    char v17 = (2 * a2) | 1;
    if (a4 <= 0x3FE)
    {
      memcpy(&v18, a3, a4);
      fd_write(*(void *)a1, (uint64_t)&v17, a4 + 1);
    }
  }
}

uint64_t db_get_obj_callback(int *a1, unint64_t a2, void **a3, int a4, void (*a5)(void *, uint64_t), uint64_t a6, _DWORD *a7)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*a1 != 1685287992)
  {
    int v9 = *__error();
    int v10 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v11 = *a1;
      *(_DWORD *)long long buf = 136315650;
      size_t v16 = "db_get_obj_callback";
      __int16 v17 = 1024;
      int v18 = 316;
      __int16 v19 = 1024;
      int v20 = v11;
      _os_log_error_impl(&dword_1BD672000, v10, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v9;
    unint64_t v12 = __si_assert_copy_extra_329();
    CFDictionaryRef v13 = v12;
    if (v12) {
      CFDictionaryRef v14 = v12;
    }
    else {
      CFDictionaryRef v14 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 316, v14);
    free(v13);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  return db2_get_obj_callback((uint64_t)a1, a2, a3, a4, a5, a6, a7);
}

uint64_t si_indexForDocId(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 1376);
  unint64_t v3 = *(unsigned int *)(v2 + 8);
  if (v3)
  {
    uint64_t v4 = *(void *)v2 - 8;
    while (1)
    {
      uint64_t v5 = *(void *)(v4 + 8 * v3);
      if (v5)
      {
        unint64_t v6 = *(void *)(v5 + 80);
        if (v6 < a2 && v6 + *(unsigned int *)(v5 + 68) > a2) {
          break;
        }
      }
      if (v3-- <= 1) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    uint64_t v7 = *(void *)(a1 + 1384);
    unint64_t v8 = *(unsigned int *)(v7 + 8);
    if (v8)
    {
      uint64_t v9 = *(void *)v7 - 8;
      while (1)
      {
        uint64_t v5 = *(void *)(v9 + 8 * v8);
        if (v5)
        {
          unint64_t v10 = *(void *)(v5 + 80);
          if (v10 < a2 && v10 + *(unsigned int *)(v5 + 68) > a2) {
            break;
          }
        }
        if (v8-- <= 1) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t mobile_journal_plist(_DWORD *a1, unint64_t a2, int a3, uint64_t a4, uint64_t *a5, void *a6)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = fd_lseek(a1, 0, 2);
  if (v11 == -1) {
    goto LABEL_8;
  }
  off_t v12 = v11;
  if (a5) {
    *a5 = v11;
  }
  unsigned int Length = _MDPlistContainerGetLength();
  unsigned int v14 = Length;
  if (!Length)
  {
LABEL_8:
    int v17 = 22;
  }
  else
  {
    int v15 = -264306963;
    if (a2)
    {
      if (a2 >= 0x80)
      {
        if (a2 >= 0x4000)
        {
          if (a2 >= 0x200000)
          {
            if (a2 >> 28)
            {
              if (a2 >> 35)
              {
                if (a2 >> 42)
                {
                  if (a2 >> 49)
                  {
                    if (HIBYTE(a2)) {
                      int v16 = 9;
                    }
                    else {
                      int v16 = 8;
                    }
                  }
                  else
                  {
                    int v16 = 7;
                  }
                }
                else
                {
                  int v16 = 6;
                }
              }
              else
              {
                int v16 = 5;
              }
            }
            else
            {
              int v16 = 4;
            }
          }
          else
          {
            int v16 = 3;
          }
        }
        else
        {
          int v16 = 2;
        }
      }
      else
      {
        int v16 = 1;
      }
    }
    else
    {
      int v16 = 0;
      int v15 = -264372499;
    }
    v25[2] = a3;
    uint64_t v18 = v16 + Length;
    v25[0] = v15;
    v25[1] = v16 + Length;
    if (fd_write((uint64_t)a1, (uint64_t)v25, 0xCuLL) != -1)
    {
      if (!a2) {
        goto LABEL_45;
      }
      *(_OWORD *)long long buf = 0u;
      long long v27 = 0u;
      if (a2 > 0x7F)
      {
        if (a2 >> 14)
        {
          if (a2 >> 21)
          {
            if (a2 >> 28)
            {
              if (a2 >> 35)
              {
                if (a2 >> 42)
                {
                  if (a2 >> 49)
                  {
                    if (HIBYTE(a2))
                    {
                      buf[0] = -1;
                      *(void *)&buf[1] = a2;
                      unint64_t v19 = 9;
                    }
                    else
                    {
                      buf[0] = -2;
                      buf[1] = BYTE6(a2);
                      buf[2] = BYTE5(a2);
                      buf[3] = BYTE4(a2);
                      uint8_t buf[4] = BYTE3(a2);
                      buf[5] = BYTE2(a2);
                      buf[6] = BYTE1(a2);
                      unint64_t v19 = 8;
                      buf[7] = a2;
                    }
                  }
                  else
                  {
                    buf[0] = BYTE6(a2) | 0xFC;
                    buf[1] = BYTE5(a2);
                    buf[2] = BYTE4(a2);
                    buf[3] = BYTE3(a2);
                    uint8_t buf[4] = BYTE2(a2);
                    buf[5] = BYTE1(a2);
                    unint64_t v19 = 7;
                    buf[6] = a2;
                  }
                }
                else
                {
                  buf[0] = BYTE5(a2) | 0xF8;
                  buf[1] = BYTE4(a2);
                  buf[2] = BYTE3(a2);
                  buf[3] = BYTE2(a2);
                  uint8_t buf[4] = BYTE1(a2);
                  buf[5] = a2;
                  unint64_t v19 = 6;
                }
              }
              else
              {
                buf[0] = BYTE4(a2) | 0xF0;
                buf[1] = BYTE3(a2);
                buf[2] = BYTE2(a2);
                buf[3] = BYTE1(a2);
                uint8_t buf[4] = a2;
                unint64_t v19 = 5;
              }
            }
            else
            {
              buf[0] = BYTE3(a2) | 0xE0;
              buf[1] = BYTE2(a2);
              buf[2] = BYTE1(a2);
              buf[3] = a2;
              unint64_t v19 = 4;
            }
          }
          else
          {
            buf[0] = BYTE2(a2) | 0xC0;
            buf[1] = BYTE1(a2);
            buf[2] = a2;
            unint64_t v19 = 3;
          }
        }
        else
        {
          buf[0] = BYTE1(a2) | 0x80;
          buf[1] = a2;
          unint64_t v19 = 2;
        }
      }
      else
      {
        buf[0] = a2;
        unint64_t v19 = 1;
      }
      if (fd_write((uint64_t)a1, (uint64_t)buf, v19) != -1)
      {
LABEL_45:
        uint64_t Bytes = _MDPlistContainerGetBytes();
        if (fd_write((uint64_t)a1, Bytes, v14) != -1)
        {
          uint64_t result = 0;
          if (a6) {
            *a6 = v18 + 12;
          }
          return result;
        }
      }
    }
    int v17 = *__error();
    fd_truncate((uint64_t)a1, v12);
  }
  int v22 = *__error();
  int v23 = _SILogForLogForCategory(4);
  os_log_type_t v24 = 2 * (dword_1E9FC90B4 < 4);
  if (os_log_type_enabled(v23, v24))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v17;
    _os_log_impl(&dword_1BD672000, v23, v24, "Error writing to log file: %d", buf, 8u);
  }
  *__error() = v22;
  return 0xFFFFFFFFLL;
}

uint64_t fd_write(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    *__error() = 2;
    return -1;
  }
  if (*(void *)(a1 + 96))
  {
    unint64_t v19 = __si_assert_copy_extra_625(-1);
    int v20 = v19;
    uint64_t v21 = "";
    if (v19) {
      uint64_t v21 = v19;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 682, "!obj->forbidder", v21);
    free(v20);
    if (__valid_fs(-1)) {
      uint64_t v22 = 2989;
    }
    else {
      uint64_t v22 = 3072;
    }
    *(_DWORD *)uint64_t v22 = -559038737;
    abort();
  }
  uint64_t v23 = 0;
  uint64_t v6 = _fd_acquire_fd(a1, &v23);
  if (v6 == -1) {
    goto LABEL_14;
  }
  uint64_t v7 = 0;
  unint64_t v8 = a3;
  do
  {
    while (1)
    {
      unint64_t v9 = guarded_write_np();
      if ((v9 & 0x8000000000000000) != 0) {
        break;
      }
      v7 += v9;
      BOOL v12 = v8 > v9;
      v8 -= v9;
      if (!v12) {
        goto LABEL_13;
      }
      a2 += v9;
    }
    uint64_t v10 = g_prot_error_callback;
    if (!g_prot_error_callback) {
      break;
    }
    uint64_t v11 = __error();
  }
  while (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v10 + 16))(v10, v6, *v11, 6) & 1) != 0);
  uint64_t v7 = -1;
LABEL_13:
  int v13 = *__error();
  _fd_release_fd((_DWORD *)a1, v6, 0, v23);
  *__error() = v13;
  if (v7 == -1)
  {
LABEL_14:
    bzero(v36, 0x400uLL);
    int v14 = *__error();
    int v15 = *__error();
    int v16 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = fd_realpath((_DWORD *)a1, v36);
      if (!v18)
      {
        uint64_t v18 = fd_name(a1, v36, 0x400uLL);
        if (!v18) {
          uint64_t v18 = "";
        }
      }
      *(_DWORD *)long long buf = 136316418;
      int v25 = "fd_write";
      __int16 v26 = 1024;
      int v27 = 697;
      __int16 v28 = 1024;
      int v29 = v6;
      __int16 v30 = 2080;
      uint64_t v31 = v18;
      __int16 v32 = 1024;
      int v33 = a3;
      __int16 v34 = 1024;
      int v35 = v14;
      _os_log_error_impl(&dword_1BD672000, v16, OS_LOG_TYPE_ERROR, "%s:%d: write(%d %s, s:%d) err:%d", buf, 0x2Eu);
    }
    *__error() = v15;
    *__error() = v14;
    return -1;
  }
  return v7;
}

uint64_t _fd_acquire_fd(uint64_t a1, void *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    int v8 = *__error();
    unint64_t v9 = _SILogForLogForCategory(0);
    os_log_type_t v10 = 2 * (gSILogLevels[0] < 4);
    if (os_log_type_enabled(v9, v10))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1BD672000, v9, v10, "open error NULL obj", buf, 2u);
    }
    *__error() = v8;
    uint64_t v6 = __error();
    int v7 = 2;
    goto LABEL_10;
  }
  if (*(_DWORD *)a1 != -50529037)
  {
    int v25 = __si_assert_copy_extra_625(-1);
    __int16 v26 = v25;
    int v27 = "";
    if (v25) {
      int v27 = v25;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1622, "obj->_magic==(0xFCFCFCF3)", v27);
    free(v26);
    if (__valid_fs(-1)) {
      uint64_t v28 = 2989;
    }
    else {
      uint64_t v28 = 3072;
    }
    *(_DWORD *)uint64_t v28 = -559038737;
    abort();
  }
  pthread_mutex_lock(&g_fd_lock);
  if (*(unsigned char *)(a1 + 52))
  {
    pthread_mutex_unlock(&g_fd_lock);
    int v4 = *__error();
    uint64_t v5 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315394;
      int v35 = "_fd_acquire_fd";
      __int16 v36 = 1024;
      int v37 = 1627;
      _os_log_error_impl(&dword_1BD672000, v5, OS_LOG_TYPE_ERROR, "%s:%d: fd_ptr instance was invalidated", buf, 0x12u);
    }
    *__error() = v4;
    uint64_t v6 = __error();
    int v7 = 22;
LABEL_10:
    *uint64_t v6 = v7;
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 40) == -1)
  {
    pthread_mutex_unlock(&g_fd_lock);
    bzero(buf, 0x400uLL);
    int v14 = (*(unsigned __int16 *)(a1 + 56) >> 4);
    int v15 = fd_name(a1, (char *)buf, 0x400uLL);
    int v20 = _fd_open(*(unsigned int *)(a1 + 44), v15, *(_DWORD *)(a1 + 48), *(_WORD *)(a1 + 56) & 1, v14, v16, v17, v18, v19);
    if (v20 != -1)
    {
      int v21 = v20;
      __long long buf = 0;
      arc4random_buf(&__buf, 8uLL);
      int v32 = *(_DWORD *)(a1 + 48);
      int v22 = change_fdguard_np();
      __error();
      if (v22 && gSILogLevels[0] >= 5)
      {
        int v29 = *__error();
        __int16 v30 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v31 = 0;
          _os_log_impl(&dword_1BD672000, v30, OS_LOG_TYPE_DEFAULT, "open file failed to change fdguard", v31, 2u);
        }
        *__error() = v29;
      }
      pthread_mutex_lock(&g_fd_lock);
      if (*(_DWORD *)(a1 + 40) == -1)
      {
        *(void *)(a1 + 8) = __buf;
        *(_DWORD *)(a1 + 40) = v21;
        uint64_t updated = _fd_update_locked(a1, 1, a2);
        int v23 = *(_DWORD *)(g_fd_list + 4);
        int v24 = *(_DWORD *)(g_fd_list + 8);
        pthread_mutex_unlock(&g_fd_lock);
        if (v23 > v24
          && !_fd_close_inactive(*(unsigned int *)(a1 + 44), 0, 1, 1)
          && !_fd_close_inactive(0xFFFFFFFFLL, 0, 1, 1)
          && !_fd_close_inactive(*(unsigned int *)(a1 + 44), 0, 1, 0))
        {
          _fd_close_inactive(0xFFFFFFFFLL, 0, 1, 0);
        }
      }
      else
      {
        uint64_t updated = _fd_update_locked(a1, 0, a2);
        pthread_mutex_unlock(&g_fd_lock);
        guarded_close_np();
      }
      return updated;
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v13 = _fd_update_locked(a1, 0, a2);
  pthread_mutex_unlock(&g_fd_lock);
  return v13;
}

uint64_t _fd_update_locked(uint64_t a1, int a2, void *a3)
{
  uint64_t result = *(unsigned int *)(a1 + 40);
  if (result == -1)
  {
    BOOL v12 = __si_assert_copy_extra_625(-1);
    uint64_t v13 = v12;
    int v14 = "";
    if (v12) {
      int v14 = v12;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1565, "obj->fd != -1", v14);
LABEL_27:
    free(v13);
    if (__valid_fs(-1)) {
      uint64_t v19 = 2989;
    }
    else {
      uint64_t v19 = 3072;
    }
    *(_DWORD *)uint64_t v19 = -559038737;
    abort();
  }
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  if (!v6)
  {
    if (v5)
    {
      int v20 = __si_assert_copy_extra_625(-1);
      int v21 = v20;
      int v22 = "";
      if (v20) {
        int v22 = v20;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1567, "!obj->prev", v22);
    }
    else
    {
      uint64_t v7 = g_fd_list;
      uint64_t v9 = *(void *)(g_fd_list + 16);
      int v10 = *(_DWORD *)g_fd_list;
      if (v9)
      {
        if (v10)
        {
          *(void *)(a1 + 16) = *(void *)(v9 + 16);
          *(void *)(a1 + 24) = v9;
          *(void *)(*(void *)(v9 + 16) + 24) = a1;
          *(void *)(v9 + 16) = a1;
          int v11 = v10 + 1;
          goto LABEL_16;
        }
        int v23 = __si_assert_copy_extra_625(-1);
        int v21 = v23;
        int v24 = "";
        if (v23) {
          int v24 = v23;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1572, "g_fd_list->item_count!=0", v24);
      }
      else
      {
        if (!v10)
        {
          *(void *)(a1 + 16) = a1;
          *(void *)(a1 + 24) = a1;
          int v11 = 1;
LABEL_16:
          *(_DWORD *)uint64_t v7 = v11;
          if ((a2 & 1) == 0) {
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        int v25 = __si_assert_copy_extra_625(-1);
        int v21 = v25;
        __int16 v26 = "";
        if (v25) {
          __int16 v26 = v25;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1569, "g_fd_list->item_count==0", v26);
      }
    }
    free(v21);
    if (__valid_fs(-1)) {
      uint64_t v27 = 2989;
    }
    else {
      uint64_t v27 = 3072;
    }
    *(_DWORD *)uint64_t v27 = -559038737;
    abort();
  }
  if (!v5)
  {
    int v15 = __si_assert_copy_extra_625(-1);
    uint64_t v13 = v15;
    int v16 = "";
    if (v15) {
      int v16 = v15;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1583, "obj->prev", v16);
    goto LABEL_27;
  }
  uint64_t v7 = g_fd_list;
  uint64_t v8 = *(void *)(g_fd_list + 16);
  if (!v8)
  {
    int v17 = __si_assert_copy_extra_625(-1);
    uint64_t v13 = v17;
    int v18 = "";
    if (v17) {
      int v18 = v17;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1584, "g_fd_list->head", v18);
    goto LABEL_27;
  }
  if (v8 != a1)
  {
    *(void *)(v5 + 24) = v6;
    *(void *)(*(void *)(a1 + 24) + 16) = v5;
    *(void *)(a1 + 16) = *(void *)(v8 + 16);
    *(void *)(a1 + 24) = v8;
    *(void *)(*(void *)(v8 + 16) + 24) = a1;
    *(void *)(v8 + 16) = a1;
  }
  if (a2) {
LABEL_8:
  }
    ++*(_DWORD *)(v7 + 4);
LABEL_9:
  *(void *)(v7 + 16) = a1;
  ++*(_DWORD *)(a1 + 36);
  *a3 = *(void *)(a1 + 8);
  return result;
}

_DWORD *_fd_release_fd(_DWORD *result, int a2, int a3, uint64_t a4)
{
  if (!result || a2 == -1) {
    return result;
  }
  uint64_t v5 = (uint64_t)result;
  uint64_t v21 = 0;
  if (*result != -50529037)
  {
    int v11 = __si_assert_copy_extra_625(-1);
    BOOL v12 = v11;
    uint64_t v13 = "";
    if (v11) {
      uint64_t v13 = v11;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1701, "obj->_magic==(0xFCFCFCF3)", v13);
LABEL_28:
    free(v12);
    if (__valid_fs(-1)) {
      uint64_t v20 = 2989;
    }
    else {
      uint64_t v20 = 3072;
    }
    *(_DWORD *)uint64_t v20 = -559038737;
    abort();
  }
  pthread_mutex_lock(&g_fd_lock);
  int v8 = *(unsigned __int8 *)(v5 + 52);
  if (*(unsigned char *)(v5 + 52)) {
    goto LABEL_7;
  }
  if (*(_DWORD *)(v5 + 40) != a2)
  {
    int v16 = __si_assert_copy_extra_625(-1);
    BOOL v12 = v16;
    int v17 = "";
    if (v16) {
      int v17 = v16;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1706, "obj->fd == in_fd", v17);
    goto LABEL_28;
  }
  if (*(void *)(v5 + 8) != a4)
  {
    int v18 = __si_assert_copy_extra_625(-1);
    BOOL v12 = v18;
    uint64_t v19 = "";
    if (v18) {
      uint64_t v19 = v18;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1707, "obj->_guard == inguard", v19);
    goto LABEL_28;
  }
LABEL_7:
  int v9 = *(_DWORD *)(v5 + 36);
  if (!v9)
  {
    int v14 = __si_assert_copy_extra_625(-1);
    BOOL v12 = v14;
    int v15 = "";
    if (v14) {
      int v15 = v14;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1709, "obj->open_count", v15);
    goto LABEL_28;
  }
  int v10 = v9 - 1;
  *(_DWORD *)(v5 + 36) = v10;
  if (v8 || v10 || !a3 || *(_DWORD *)(v5 + 68) || _fd_remove_locked(v5, &v21) == -1) {
    return (_DWORD *)pthread_mutex_unlock(&g_fd_lock);
  }
  *(_WORD *)(v5 + 56) &= ~8u;
  pthread_mutex_unlock(&g_fd_lock);
  return (_DWORD *)guarded_close_np();
}

uint64_t fd_lseek(_DWORD *a1, off_t a2, int a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = 0;
  int v6 = _fd_acquire_fd((uint64_t)a1, &v17);
  if (v6 == -1) {
    goto LABEL_7;
  }
  while (1)
  {
    off_t v7 = lseek(v6, a2, a3);
    if (v7 != -1 || !g_prot_error_callback) {
      break;
    }
    int v8 = *__error();
    uint64_t v9 = g_prot_error_callback;
    uint64_t v10 = a1[10];
    int v11 = __error();
    if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v9 + 16))(v9, v10, *v11, 9) & 1) == 0)
    {
      *__error() = v8;
      _fd_release_fd(a1, v6, 0, v17);
      goto LABEL_7;
    }
  }
  _fd_release_fd(a1, v6, 0, v17);
  if (v7 == -1)
  {
LABEL_7:
    bzero(v32, 0x400uLL);
    int v12 = *__error();
    int v13 = *__error();
    int v14 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      int v16 = fd_realpath(a1, v32);
      if (!v16)
      {
        int v16 = fd_name((uint64_t)a1, v32, 0x400uLL);
        if (!v16) {
          int v16 = "";
        }
      }
      *(_DWORD *)long long buf = 136316674;
      uint64_t v19 = "fd_lseek";
      __int16 v20 = 1024;
      int v21 = 619;
      __int16 v22 = 1024;
      int v23 = v6;
      __int16 v24 = 2080;
      int v25 = v16;
      __int16 v26 = 2048;
      off_t v27 = a2;
      __int16 v28 = 1024;
      int v29 = a3;
      __int16 v30 = 1024;
      int v31 = v12;
      _os_log_error_impl(&dword_1BD672000, v14, OS_LOG_TYPE_ERROR, "%s:%d: lseek(%d %s, o:%lx, w:%d) err:%d", buf, 0x38u);
    }
    *__error() = v13;
    *__error() = v12;
    return -1;
  }
  return v7;
}

uint64_t si_set_obj_state(os_unfair_lock_s *a1, uint64_t a2)
{
  int v4 = a1 + 1642;
  os_unfair_lock_lock(a1 + 1642);
  uint64_t v5 = si_set_obj_state_locked((uint64_t)a1, a2, 1);
  os_unfair_lock_unlock(v4);
  return v5;
}

uint64_t si_set_obj_state_locked(uint64_t a1, uint64_t a2, int a3)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 6568));
  int v11 = *(unsigned __int8 *)(a1 + 2473);
  if (a3 == 1 && v11 == 3)
  {
    _si_dump_index_state(a1, 2);
    if (*(_DWORD *)(a1 + 2420) || **(_DWORD **)(a1 + 6584)) {
      return 89;
    }
    int v11 = *(unsigned __int8 *)(a1 + 2473);
    if (v11 == 3)
    {
      size_t v51 = __si_assert_copy_extra_625(-1);
      int v37 = v51;
      CFStringRef v52 = "";
      if (v51) {
        CFStringRef v52 = v51;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 30942, "!(s->state==kSIIndexStateNeedsShadow && state==kSIIndexStateDirty)", v52);
LABEL_94:
      free(v37);
      if (__valid_fs(-1)) {
        uint64_t v53 = 2989;
      }
      else {
        uint64_t v53 = 3072;
      }
      *(_DWORD *)uint64_t v53 = -559038737;
      abort();
    }
  }
  else if (a3 == 4 && v11 == 1)
  {
    int v13 = __si_assert_copy_extra_625(-1);
    int v14 = v13;
    int v15 = "";
    if (v13) {
      int v15 = v13;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 30945, "!(s->state==kSIIndexStateDirty && state==kSIIndexStateClean)", v15);
    free(v14);
    if (__valid_fs(-1)) {
      uint64_t v16 = 2989;
    }
    else {
      uint64_t v16 = 3072;
    }
    *(_DWORD *)uint64_t v16 = -559038737;
    abort();
  }
  if (a2 && a2 != a1)
  {
    if (*(void *)(a1 + 1184) == a2)
    {
      if (*(unsigned __int8 *)(a1 + 2474) != a3)
      {
        int v18 = 0;
        *(unsigned char *)(a1 + 2474) = a3;
        goto LABEL_57;
      }
    }
    else if (*(void *)(a1 + 6616) == a2)
    {
      if (*(unsigned __int8 *)(a1 + 2475) != a3)
      {
        int v18 = 0;
        *(unsigned char *)(a1 + 2475) = a3;
        goto LABEL_57;
      }
    }
    else
    {
      uint64_t v17 = (unsigned char *)(a2 + 15201);
      if (*(unsigned __int8 *)(a2 + 15201) != a3)
      {
        int v18 = 0;
        *uint64_t v17 = a3;
LABEL_57:
        BOOL v27 = 1;
        goto LABEL_58;
      }
    }
    goto LABEL_35;
  }
  if (v11 == a3)
  {
LABEL_35:
    BOOL v27 = 0;
    int v18 = 0;
    goto LABEL_58;
  }
  int v18 = 0;
  if (a3 != 2)
  {
    if (a3 != 3)
    {
      if (a3 == 4)
      {
        *(_WORD *)(a1 + 2474) = 1028;
        uint64_t v19 = *(void *)(a1 + 1384);
        uint64_t v20 = *(void *)(a1 + 1376);
        if (v19)
        {
          uint64_t v21 = *(unsigned int *)(v19 + 8);
          if (v21)
          {
            __int16 v22 = *(uint64_t **)v19;
            do
            {
              uint64_t v23 = *v22++;
              *(unsigned char *)(v23 + 15201) = 4;
              --v21;
            }
            while (v21);
          }
        }
        if (v20)
        {
          uint64_t v24 = *(unsigned int *)(v20 + 8);
          if (v24)
          {
            int v25 = *(uint64_t **)v20;
            do
            {
              uint64_t v26 = *v25++;
              *(unsigned char *)(v26 + 15201) = 4;
              --v24;
            }
            while (v24);
          }
        }
        int v18 = 1;
      }
LABEL_55:
      *(unsigned char *)(a1 + 2473) = a3;
      goto LABEL_57;
    }
    int v18 = 1;
  }
  uint64_t v59 = 0;
  size_t v60 = &v59;
  uint64_t v61 = 0x2000000000;
  char v62 = 0;
  int v28 = *(unsigned __int8 *)(a1 + 2474);
  if (v28 != a3 && v28 != 4)
  {
    *(unsigned char *)(a1 + 2474) = a3;
    char v62 = 1;
  }
  if (*(void *)(a1 + 6616))
  {
    int v29 = *(unsigned __int8 *)(a1 + 2475);
    if (v29 != a3 && v29 != 4)
    {
      *(unsigned char *)(a1 + 2475) = a3;
      char v62 = 1;
    }
  }
  uint64_t v30 = *(void *)(a1 + 1384);
  uint64_t v31 = *(void *)(a1 + 1376);
  v54[0] = MEMORY[0x1E4F143A8];
  v54[1] = 0x40000000;
  size_t v55 = __si_set_obj_state_locked_block_invoke_2;
  char v56 = &unk_1E6342AF0;
  char v58 = a3;
  char v57 = &v59;
  if (v30 && *(_DWORD *)(v30 + 8))
  {
    uint64_t v32 = 0;
    while (((unsigned int (*)(void *, void, void))v55)(v54, *(void *)(*(void *)v30 + 8 * v32), 0))
    {
      if (++v32 >= (unint64_t)*(unsigned int *)(v30 + 8)) {
        goto LABEL_49;
      }
    }
  }
  else
  {
LABEL_49:
    if (v31 && *(_DWORD *)(v31 + 8))
    {
      unint64_t v33 = 0;
      do
      {
        if (!((unsigned int (*)(void *, void, uint64_t))v55)(v54, *(void *)(*(void *)v31 + 8 * v33), 1))break; {
        ++v33;
        }
      }
      while (v33 < *(unsigned int *)(v31 + 8));
    }
  }
  int v34 = *((unsigned __int8 *)v60 + 24);
  _Block_object_dispose(&v59, 8);
  BOOL v27 = v34 != 0;
  if (v34) {
    goto LABEL_55;
  }
LABEL_58:
  if (a3 == 1 && *(unsigned char *)(a1 + 2473) != 1)
  {
    int v35 = *(unsigned __int8 *)(a1 + 2474);
    if (v35 == 2)
    {
      *(unsigned char *)(a1 + 2474) = 1;
    }
    else if (v35 == 3)
    {
      __int16 v36 = __si_assert_copy_extra_625(-1);
      int v37 = v36;
      uint64_t v38 = "";
      if (v36) {
        uint64_t v38 = v36;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 31040, "s->sdb_state!=kSIIndexStateNeedsShadow", v38);
      goto LABEL_94;
    }
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2216));
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    activityJournalWriteVInt64(a1 + 2184, 36, (unint64_t)Current);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 2216));
    if (*(void *)(a1 + 6616))
    {
      int v40 = *(unsigned __int8 *)(a1 + 2475);
      if (v40 == 2)
      {
        *(unsigned char *)(a1 + 2475) = 1;
      }
      else if (v40 == 3)
      {
        unint64_t v41 = __si_assert_copy_extra_625(-1);
        int v37 = v41;
        char v42 = "";
        if (v41) {
          char v42 = v41;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 31048, "s->directory_state!=kSIIndexStateNeedsShadow", v42);
        goto LABEL_94;
      }
    }
    uint64_t v43 = *(void *)(a1 + 1384);
    uint64_t v44 = *(void *)(a1 + 1376);
    if (v43)
    {
      uint64_t v45 = *(unsigned int *)(v43 + 8);
      if (v45)
      {
        int v46 = *(void **)v43;
        do
        {
          int v47 = (unsigned char *)(*v46 + 15201);
          if (*v47 == 2) {
            *int v47 = 1;
          }
          ++v46;
          --v45;
        }
        while (v45);
      }
    }
    if (v44)
    {
      uint64_t v48 = *(unsigned int *)(v44 + 8);
      if (v48)
      {
        unsigned int v49 = *(void **)v44;
        do
        {
          int v50 = (unsigned char *)(*v49 + 15201);
          if (*v50 == 2) {
            *int v50 = 1;
          }
          ++v49;
          --v48;
        }
        while (v48);
      }
    }
    *(unsigned char *)(a1 + 2473) = 1;
    return si_write_index_state(a1, 1, v18, v6, v7, v8, v9, v10);
  }
  if (!v27) {
    return 0;
  }
  return si_write_index_state(a1, 1, v18, v6, v7, v8, v9, v10);
}

int *si_remove_icon_cache_for_oid(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  bzero(__str, 0x400uLL);
  int v4 = si_cache_relative_path_for_oid(a2, "img", __str, *(unsigned __int8 *)(a1 + 2064));
  if (v4) {
    return (int *)unlinkat(*(_DWORD *)(a1 + 32), v4, 0);
  }
  else {
    return __error();
  }
}

void si_delete_journal_add_cs_deleted(uint64_t a1, const __CFDictionary *a2, CFArrayRef theArray)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  CFIndex Count = CFArrayGetCount(theArray);
  int v7 = *(_DWORD *)(a1 + 32);
  if (v7 == -1)
  {
    uint64_t v30 = __si_assert_copy_extra_625(-1);
    uint64_t v31 = v30;
    uint64_t v32 = "";
    if (v30) {
      uint64_t v32 = v30;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 3660, "indexFd != -1", v32);
    free(v31);
    if (__valid_fs(-1)) {
      uint64_t v33 = 2989;
    }
    else {
      uint64_t v33 = 3072;
    }
    *(_DWORD *)uint64_t v33 = -559038737;
    abort();
  }
  uint64_t v8 = Count;
  bzero(__s, 0x400uLL);
  if (fcntl(v7, 50, __s) < 0
    || !__s[0]
    || (size_t v9 = strlen(__s), snprintf(&__s[v9], 1024 - v9, "/%s", "skg_"), v10 = open(__s, 0), v10 < 0))
  {
    if (v8)
    {
      CFTypeID TypeID = CFDictionaryGetTypeID();
      CFTypeID v12 = CFStringGetTypeID();
      if (v8 < 1)
      {
LABEL_14:
        CFTypeID v18 = CFStringGetTypeID();
        if (v18 == CFGetTypeID(a2))
        {
          CFMutableArrayRef Mutable = (const void *)_MDPlistContainerCreateMutable();
          _MDPlistContainerBeginContainer();
          _MDPlistContainerBeginArray();
          _MDPlistContainerAddObject();
          _MDPlistContainerAddObject();
          _MDPlistContainerEndArray();
          _MDPlistContainerEndContainer();
          uint64_t v20 = (pthread_mutex_t *)(a1 + 1624);
          pthread_mutex_lock((pthread_mutex_t *)(a1 + 1624));
          uint64_t v21 = getDeleteJournalFd(a1);
          if (v21)
          {
            __int16 v22 = (_DWORD *)v21;
            uint64_t v23 = *(atomic_uint **)(a1 + 2112);
            if (v23 || (uint64_t v23 = (atomic_uint *)si_mobile_journal_create(a1), (*(void *)(a1 + 2112) = v23) != 0)) {
              atomic_fetch_add(v23, 1u);
            }
            unint64_t add_explicit = atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 2136), 1uLL, memory_order_relaxed);
            uint64_t v34 = 0;
            uint64_t v35 = 0;
            BOOL v25 = mobile_journal_plist(v22, add_explicit, 0x8000, (uint64_t)Mutable, &v35, &v34) == 0;
          }
          else
          {
            uint64_t v23 = 0;
            BOOL v25 = 0;
          }
          pthread_mutex_unlock(v20);
          CFRelease(Mutable);
          if (!v25 && v23 && atomic_fetch_add(v23, 0xFFFFFFFF) == 1) {
            _si_mobile_journal_finalize((uint64_t)v23, 1);
          }
        }
        else
        {
          int v28 = *__error();
          int v29 = _SILogForLogForCategory(10);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__s = 136316162;
            int v37 = "mobile_delete_journal";
            __int16 v38 = 1024;
            int v39 = 19196;
            __int16 v40 = 2048;
            CFDictionaryRef v41 = a2;
            __int16 v42 = 1024;
            int v43 = 0x8000;
            __int16 v44 = 2112;
            CFArrayRef v45 = theArray;
            _os_log_error_impl(&dword_1BD672000, v29, OS_LOG_TYPE_ERROR, "%s:%d: missing bundle %p 0x%x %@", (uint8_t *)__s, 0x2Cu);
          }
          *__error() = v28;
        }
      }
      else
      {
        CFTypeID v13 = v12;
        CFIndex v14 = 0;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v14);
          CFDictionaryRef v16 = ValueAtIndex;
          if (!ValueAtIndex) {
            break;
          }
          if (CFGetTypeID(ValueAtIndex) != TypeID) {
            break;
          }
          CFStringRef Value = CFDictionaryGetValue(v16, @"_kMDItemExternalID");
          if (!Value || CFGetTypeID(Value) != v13) {
            break;
          }
          if (v8 == ++v14) {
            goto LABEL_14;
          }
        }
        int v26 = *__error();
        BOOL v27 = _SILogForLogForCategory(10);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__s = 136315650;
          int v37 = "si_delete_journal_add_cs_deleted";
          __int16 v38 = 1024;
          int v39 = 19596;
          __int16 v40 = 2112;
          CFDictionaryRef v41 = v16;
          _os_log_error_impl(&dword_1BD672000, v27, OS_LOG_TYPE_ERROR, "%s:%d: bad object %@", (uint8_t *)__s, 0x1Cu);
        }
        *__error() = v26;
      }
    }
  }
  else
  {
    close(v10);
  }
}

char *si_cache_relative_path_for_oid(unint64_t a1, const char *a2, char *__str, int a4)
{
  int v4 = __str;
  if (a4)
  {
    if (snprintf(__str, 0x400uLL, "Cache/%x/%llx.%s", HIDWORD(a1), a1, a2) > 0x3FF) {
      return 0;
    }
  }
  else
  {
    snprintf(__str, 0x400uLL, "Cache/%4.4x/%4.4x/%4.4x/%lld.%s", HIWORD(a1), WORD2(a1), WORD1(a1), a1, a2);
  }
  return v4;
}

uint64_t isSyndicatedContent(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  uint64_t v6 = 0;
  if (db_get_field(*(int **)(a1 + 1184), a2, "_kMDItemBundleID", &v8, &v7)) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v7 == 0;
  }
  if (!v4)
  {
    if ((*(_WORD *)(v8 + 2) & 0x10) != 0)
    {
      uint64_t result = db_get_string_for_id(*(int **)(a1 + 1184), *(_DWORD *)(v8 + 13));
      if (!result) {
        return result;
      }
    }
    else
    {
      uint64_t result = v8 + 13;
    }
    if (!strcmp((const char *)result, "com.apple.MobileSMS"))
    {
      if (!db_get_field(*(int **)(a1 + 1184), a2, "com_apple_mobilesms_isHighlightedContent", &v8, &v6)
        && v6
        && *v6)
      {
        return 1;
      }
      uint64_t v6 = 0;
      if (!db_get_field(*(int **)(a1 + 1184), a2, "kMDItemSyndicationStatus", &v8, &v6) && v6 && *v6) {
        return 1;
      }
      uint64_t v6 = 0;
      if (!db_get_field(*(int **)(a1 + 1184), a2, "com_apple_mobilesms_isChatAutoDonating", &v8, &v6)
        && v6
        && *v6)
      {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t getDeleteJournalFd(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t result = *(void *)(a1 + 2328);
  if (result) {
    return result;
  }
  int v3 = *(_DWORD *)(a1 + 32);
  if (v3 == -1)
  {
    int v10 = __si_assert_copy_extra_625(-1);
    uint64_t v7 = v10;
    int v11 = "";
    if (v10) {
      int v11 = v10;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 3693, "indexFd != -1", v11);
LABEL_10:
    free(v7);
    if (__valid_fs(-1)) {
      uint64_t v9 = 2989;
    }
    else {
      uint64_t v9 = 3072;
    }
    *(_DWORD *)uint64_t v9 = -559038737;
    abort();
  }
  int v4 = *(_DWORD *)(a1 + 2344);
  if (v4 == 0x7FFFFFFF)
  {
LABEL_7:
    uint64_t v6 = __si_assert_copy_extra_625(-1);
    uint64_t v7 = v6;
    unint64_t v8 = "";
    if (v6) {
      unint64_t v8 = v6;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 3698, "syncCount < 2147483647", v8);
    goto LABEL_10;
  }
  while (1)
  {
    long long v25 = 0u;
    memset(v26, 0, sizeof(v26));
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    *(_OWORD *)__str = 0u;
    snprintf(__str, 0xFFuLL, "%s%d", "skg_deleteAttr.", v4);
    uint64_t v5 = fd_create_protected(v3, __str, 536873482, 3u);
    if (v5)
    {
      ++*(_DWORD *)(a1 + 2344);
      *(void *)(a1 + 2328) = v5;
      SIActivityJournalNewJournal((os_unfair_lock_s *)(a1 + 2184), (uint64_t)v5);
      _fd_acquire_fd(*(void *)(a1 + 2328), __str);
      return *(void *)(a1 + 2328);
    }
    if (*__error() != 17) {
      return 0;
    }
    int v4 = *(_DWORD *)(a1 + 2344) + 1;
    *(_DWORD *)(a1 + 2344) = v4;
    if (v4 == 0x7FFFFFFF) {
      goto LABEL_7;
    }
  }
}

void si_perform_livequeries_deletions(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  unint64_t v3 = v2;
  uint64_t v4 = v1;
  values[1024] = *(void **)MEMORY[0x1E4F143B8];
  bzero(values, 0x2000uLL);
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 1704));
  CFIndex Count = CFSetGetCount(*(CFSetRef *)(v4 + 1768));
  uint64_t v6 = Count;
  if (Count >= 1024)
  {
    uint64_t v7 = (const void **)malloc_type_malloc(8 * Count, 0x2004093837F09uLL);
    CFSetGetValues(*(CFSetRef *)(v4 + 1768), v7);
  }
  else if (!Count {
         || (uint64_t v7 = (const void **)values, CFSetGetValues(*(CFSetRef *)(v4 + 1768), (const void **)values), v6 < 1))
  }
  {
    pthread_mutex_unlock((pthread_mutex_t *)(v4 + 1704));
    return;
  }
  uint64_t v8 = 0;
  do
    atomic_fetch_add((atomic_uint *volatile)v7[v8++], 1u);
  while (v6 != v8);
  pthread_mutex_unlock((pthread_mutex_t *)(v4 + 1704));
  uint64_t v9 = 0;
  do
  {
    int v10 = v7[v9];
    uint64_t v11 = v10[5];
    do
    {
      uint64_t v12 = v11;
      uint64_t v11 = *(void *)(v11 + 80);
    }
    while (v11);
    uint64_t v13 = *(void *)(v12 + 40);
    if (RLEOIDArrayContainsOid(v13, v3))
    {
      uint64_t v14 = v10[5];
      do
      {
        uint64_t v15 = v14;
        uint64_t v14 = *(void *)(v14 + 80);
      }
      while (v14);
      uint64_t v16 = *(void *)(v15 + 8);
      long long v17 = malloc_type_calloc(1uLL, 0x40uLL, 0x10720403C4CCC75uLL);
      if (dword_1E9FC90AC >= 5)
      {
        int v24 = *__error();
        long long v21 = _SILogForLogForCategory(2);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1BD672000, v21, OS_LOG_TYPE_DEFAULT, "Passing up deletion", buf, 2u);
        }
        *__error() = v24;
      }
      v17[1] = *(_OWORD *)(v10[5] + 48);
      *((void *)v17 + 1) = si_querypipe_copy_jobid(v10[5]);
      *((void *)v17 + 5) = 0;
      *(_DWORD *)long long v17 = 7;
      long long v18 = malloc_type_malloc(0x10uLL, 0x100004000313F17uLL);
      RLEOIDArrayRemoveOid(v13, v3);
      *long long v18 = 0;
      uint64_t v19 = v10[5];
      do
      {
        uint64_t v20 = v19;
        uint64_t v19 = *(void *)(v19 + 80);
      }
      while (v19);
      *long long v18 = ((unint64_t)*(unsigned int *)(*(void *)(v20 + 8) + 80) << 32) | 0xDE10001;
      v18[1] = v3;
      *((void *)v17 + 4) = _MDStoreOIDArrayCreateMutableWithOids();
      _MDStoreOIDArraySetShouldUseMalloc();
      *((_DWORD *)v17 + 14) = 3;
      if (!si_resultqueue_enqueue(v16, (int *)v17))
      {
        if (dword_1E9FC90AC >= 5)
        {
          int v22 = *__error();
          long long v23 = _SILogForLogForCategory(2);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1BD672000, v23, OS_LOG_TYPE_DEFAULT, "Attempt to append to queue failed. Releasing result batch", buf, 2u);
          }
          *__error() = v22;
        }
        SIResultBatchFree((void **)v17);
      }
    }
    si_livequery_release(v7[v9++]);
  }
  while (v9 != v6);
  if (v7 != (const void **)values) {
    free(v7);
  }
}

char *fd_name(uint64_t a1, char *a2, size_t a3)
{
  if (!a1) {
    return 0;
  }
  if (*(_DWORD *)a1 != -50529037)
  {
    uint64_t v7 = __si_assert_copy_extra_625(-1);
    uint64_t v8 = v7;
    uint64_t v9 = "";
    if (v7) {
      uint64_t v9 = v7;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1231, "obj->_magic==(0xFCFCFCF3)", v9);
    free(v8);
    if (__valid_fs(-1)) {
      uint64_t v10 = 2989;
    }
    else {
      uint64_t v10 = 3072;
    }
    *(_DWORD *)uint64_t v10 = -559038737;
    abort();
  }
  os_unfair_lock_lock((os_unfair_lock_t)&g_name_lock);
  if (strlcpy(a2, *(const char **)(a1 + 72), a3) > a3) {
    a2 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&g_name_lock);
  return a2;
}

uint64_t _fd_open(uint64_t a1, char *a2, int a3, int a4, int a5, int a6, int a7, int a8, __n128 a9)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  a9.n128_u64[0] = 136315394;
  while (1)
  {
    uint64_t v14 = a5 ? si_openat_protected(a1, a2, a3, a5) : _safe_open_at(a1, a2, a3, a4, a5, a6, a7, a8, a9, 0x180u);
    uint64_t v15 = v14;
    if (a4)
    {
      if (v14 != -1) {
        break;
      }
    }
    if (v14 != -1 || !g_prot_error_callback) {
      return v15;
    }
    int v16 = *__error();
    if (gSILogLevels[0] >= 5)
    {
      int v22 = *__error();
      uint64_t v19 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        int v20 = *__error();
        *(_DWORD *)long long buf = 136315394;
        int v24 = a2;
        __int16 v25 = 1024;
        int v26 = v20;
        _os_log_impl(&dword_1BD672000, v19, OS_LOG_TYPE_DEFAULT, "~~~~########### file error %s %d", buf, 0x12u);
      }
      *__error() = v22;
    }
    uint64_t v17 = g_prot_error_callback;
    long long v18 = __error();
    if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v17 + 16))(v17, a1, *v18, 15) & 1) == 0)
    {
      *__error() = v16;
      return 0xFFFFFFFFLL;
    }
  }
  fcntl(v14, 48, 1);
  fcntl(v15, 76, 1);
  return v15;
}

uint64_t _safe_open_at(uint64_t a1, char *a2, int a3, int a4, int a5, int a6, int a7, int a8, __n128 a9, unsigned __int16 a10)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  if ((a3 & 0x200) != 0)
  {
    bzero(&v62, 0x400uLL);
    if (fcntl(a1, 50, &v62) < 0 || !(_BYTE)v62)
    {
      int v26 = *__error();
      int v27 = *__error();
      int v28 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        int v58 = 136316418;
        *(void *)uint64_t v59 = "_safe_open_at";
        *(_WORD *)&v59[8] = 1024;
        *(_DWORD *)&v59[10] = 1400;
        __int16 v60 = 1024;
        LODWORD(v61[0]) = a1;
        WORD2(v61[0]) = 2080;
        *(void *)((char *)v61 + 6) = a2;
        HIWORD(v61[1]) = 2048;
        v61[2] = a3;
        LOWORD(v61[3]) = 1024;
        *(_DWORD *)((char *)&v61[3] + 2) = v26;
        _os_log_error_impl(&dword_1BD672000, v28, OS_LOG_TYPE_ERROR, "%s:%d: faccurate_realpath() failed, parent_fd:%d, path:%s, flags:0x%lx, errno:%d\n", (uint8_t *)&v58, 0x32u);
      }
    }
    else
    {
      if ((unsigned __int16)v62 != 47)
      {
        uint64_t v13 = a10;
        goto LABEL_7;
      }
      int v27 = *__error();
      uint64_t v34 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        int v58 = 136316162;
        *(void *)uint64_t v59 = "_safe_open_at";
        *(_WORD *)&v59[8] = 1024;
        *(_DWORD *)&v59[10] = 1404;
        __int16 v60 = 2080;
        v61[0] = &v62;
        LOWORD(v61[1]) = 2080;
        *(void *)((char *)&v61[1] + 2) = a2;
        WORD1(v61[2]) = 2048;
        *(void *)((char *)&v61[2] + 4) = a3;
        _os_log_error_impl(&dword_1BD672000, v34, OS_LOG_TYPE_ERROR, "%s:%d: Invalid parent path, currentPath:%s, path:%s, flags:0x%lx\n", (uint8_t *)&v58, 0x30u);
      }
      int v26 = 22;
    }
    *__error() = v27;
    *__error() = v26;
    return 0xFFFFFFFFLL;
  }
  uint64_t v13 = 0;
LABEL_7:
  a9.n128_u64[0] = 136315394;
  __n128 v55 = a9;
  while (1)
  {
    uint64_t result = openat(a1, a2, a3, v13);
    if (result != -1) {
      break;
    }
    uint64_t v15 = g_prot_error_callback;
    if (!g_prot_error_callback) {
      break;
    }
    if (gSILogLevels[0] >= 5)
    {
      LODWORD(v56) = *__error();
      uint64_t v17 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        int v18 = *__error();
        int v62 = v55.n128_u32[0];
        unsigned int v63 = a2;
        __int16 v64 = 1024;
        int v65 = v18;
        _os_log_impl(&dword_1BD672000, v17, OS_LOG_TYPE_DEFAULT, "~~~~########### file error %s %d", (uint8_t *)&v62, 0x12u);
      }
      *__error() = v56;
      uint64_t v15 = g_prot_error_callback;
    }
    int v16 = __error();
    if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v15 + 16))(v15, a1, *v16, 13) & 1) == 0) {
      goto LABEL_17;
    }
  }
  if (result == -1)
  {
LABEL_17:
    LODWORD(v56) = *__error();
    if ((v56 - 23) > 1) {
      goto LABEL_32;
    }
    int v19 = *__error();
    int v20 = _SILogForLogForCategory(0);
    os_log_type_t v21 = gSILogLevels[0] < 3;
    if (os_log_type_enabled(v20, (os_log_type_t)(gSILogLevels[0] < 3)))
    {
      int v62 = 67109120;
      LODWORD(v63) = v56;
      _os_log_impl(&dword_1BD672000, v20, v21, "*warn* too many open files, err: %d, closing inactive and trying again", (uint8_t *)&v62, 8u);
    }
    *__error() = v19;
    _fd_close_inactive(0xFFFFFFFFLL, 0, 0, 0);
    while (1)
    {
      uint64_t result = openat(a1, a2, a3, v13);
      if (result != -1) {
        break;
      }
      uint64_t v22 = g_prot_error_callback;
      if (!g_prot_error_callback) {
        break;
      }
      if (gSILogLevels[0] >= 5)
      {
        int v54 = *__error();
        int v24 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          int v25 = *__error();
          int v62 = v55.n128_u32[0];
          unsigned int v63 = a2;
          __int16 v64 = 1024;
          int v65 = v25;
          _os_log_impl(&dword_1BD672000, v24, OS_LOG_TYPE_DEFAULT, "~~~~########### file error %s %d", (uint8_t *)&v62, 0x12u);
        }
        *__error() = v54;
        uint64_t v22 = g_prot_error_callback;
      }
      long long v23 = __error();
      if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v22 + 16))(v22, a1, *v23, 14) & 1) == 0) {
        goto LABEL_32;
      }
    }
    if (result == -1)
    {
LABEL_32:
      if (v56 == 23)
      {
        uint64_t v35 = __si_assert_copy_extra_625(-1);
        __int16 v36 = v35;
        int v37 = "";
        if (v35) {
          int v37 = v35;
        }
        __message_assert("%s:%u: failed assertion '%s' %s Too many open files in system %d", "fd_obj.c", 1511, "false", v37, 23);
        free(v36);
        if (!__valid_fs(-1)) {
          goto LABEL_62;
        }
        goto LABEL_50;
      }
      if (v56 == 24)
      {
        CFAllocatorRef v29 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFMutableArrayRef Mutable = CFBagCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D520]);
        bzero(&v62, 0x400uLL);
        if (gOpenLimit < 1)
        {
          int v32 = 0;
        }
        else
        {
          int v31 = 0;
          int v32 = 0;
          do
          {
            if ((fcntl(v31, 50, &v62) & 0x80000000) == 0 && (_BYTE)v62)
            {
              CFStringRef v33 = CFStringCreateWithCString(v29, (const char *)&v62, 0x8000100u);
              CFBagAddValue(Mutable, v33);
              CFRelease(v33);
              ++v32;
            }
            ++v31;
          }
          while (v31 < gOpenLimit);
        }
        size_t v39 = MEMORY[0x1C187F780](Mutable);
        MEMORY[0x1F4188790](v39);
        CFDictionaryRef v41 = (uint64_t *)((char *)&v53 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
        bzero(v41, v40);
        CFBagGetValues(Mutable, (const void **)v41);
        v57[0] = MEMORY[0x1E4F143A8];
        v57[1] = 0x40000000;
        v57[2] = ___safe_open_at_block_invoke;
        v57[3] = &__block_descriptor_tmp_28_7400;
        v57[4] = Mutable;
        qsort_b(v41, v39, 8uLL, v57);
        pthread_mutex_lock(&g_fd_lock);
        if (v32 >= 1)
        {
          uint64_t v43 = 0;
          uint64_t v44 = v32;
          *(void *)&long long v42 = 67109378;
          long long v56 = v42;
          do
          {
            if (*v41 != v43)
            {
              int v45 = *__error();
              uint64_t v46 = _SILogForLogForCategory(0);
              os_log_type_t v47 = gSILogLevels[0] < 3;
              if (os_log_type_enabled(v46, (os_log_type_t)(gSILogLevels[0] < 3)))
              {
                int v48 = MEMORY[0x1C187F790](Mutable, *v41);
                uint64_t v49 = *v41;
                int v58 = v56;
                *(_DWORD *)uint64_t v59 = v48;
                *(_WORD *)&v59[4] = 2112;
                *(void *)&v59[6] = v49;
                _os_log_impl(&dword_1BD672000, v46, v47, "*warn* (%d) - %@", (uint8_t *)&v58, 0x12u);
              }
              *__error() = v45;
              uint64_t v43 = *v41;
            }
            ++v41;
            --v44;
          }
          while (v44);
        }
        pthread_mutex_unlock(&g_fd_lock);
        CFRelease(Mutable);
        int v50 = __si_assert_copy_extra_625(-1);
        size_t v51 = v50;
        CFStringRef v52 = "";
        if (v50) {
          CFStringRef v52 = v50;
        }
        __message_assert("%s:%u: failed assertion '%s' %s Too many open files %d (%d) (%d)", "fd_obj.c", 1508, "false", v52, 24, v32, 0);
        free(v51);
        if (!__valid_fs(-1))
        {
LABEL_62:
          uint64_t v38 = 3072;
LABEL_63:
          *(_DWORD *)uint64_t v38 = -559038737;
          abort();
        }
LABEL_50:
        uint64_t v38 = 2989;
        goto LABEL_63;
      }
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t _fd_remove_locked(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  *a2 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4)
  {
    if (v2)
    {
      uint64_t v12 = __si_assert_copy_extra_625(-1);
      uint64_t v13 = v12;
      uint64_t v14 = "";
      if (v12) {
        uint64_t v14 = v12;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 454, "!obj->prev", v14);
      free(v13);
      if (__valid_fs(-1)) {
        uint64_t v15 = 2989;
      }
      else {
        uint64_t v15 = 3072;
      }
      *(_DWORD *)uint64_t v15 = -559038737;
      abort();
    }
    goto LABEL_20;
  }
  if (!v2)
  {
    uint64_t v17 = __si_assert_copy_extra_625(-1);
    uint64_t v10 = v17;
    int v18 = "";
    if (v17) {
      int v18 = v17;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 434, "obj->prev", v18);
    goto LABEL_30;
  }
  uint64_t v5 = g_fd_list;
  uint64_t v6 = *(void *)(g_fd_list + 16);
  if (v6 == a1)
  {
    *(void *)(g_fd_list + 16) = v4;
    uint64_t v6 = v4;
  }
  *(void *)(v2 + 24) = v4;
  *(void *)(*(void *)(a1 + 24) + 16) = v2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  int v7 = *(_DWORD *)v5;
  int v8 = *(_DWORD *)v5 - 1;
  *(_DWORD *)uint64_t v5 = v8;
  if (v6 == a1)
  {
    if (!v8)
    {
      *(void *)(v5 + 16) = 0;
      if (v3 != -1) {
        --*(_DWORD *)(v5 + 4);
      }
      goto LABEL_20;
    }
    os_log_type_t v21 = __si_assert_copy_extra_625(-1);
    uint64_t v10 = v21;
    uint64_t v22 = "";
    if (v21) {
      uint64_t v22 = v21;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 444, "g_fd_list->item_count==0", v22);
LABEL_30:
    free(v10);
    if (__valid_fs(-1)) {
      uint64_t v23 = 2989;
    }
    else {
      uint64_t v23 = 3072;
    }
    *(_DWORD *)uint64_t v23 = -559038737;
    abort();
  }
  if (!v8)
  {
    int v19 = __si_assert_copy_extra_625(-1);
    uint64_t v10 = v19;
    int v20 = "";
    if (v19) {
      int v20 = v19;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 447, "g_fd_list->item_count", v20);
    goto LABEL_30;
  }
  if (v3 != -1)
  {
    --*(_DWORD *)(v5 + 4);
    if (v7 <= 0)
    {
      uint64_t v9 = __si_assert_copy_extra_625(-1);
      uint64_t v10 = v9;
      uint64_t v11 = "";
      if (v9) {
        uint64_t v11 = v9;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 451, "g_fd_list->item_count>=0", v11);
      goto LABEL_30;
    }
  }
LABEL_20:
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 8) = 0;
  return v3;
}

double __SIUserCtxInit(uint64_t a1)
{
  *(void *)(a1 + 176) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

thread_read_t *SIResumeForUnlock()
{
  if ((sForceResume & 1) != 0
    || !sGetLockStateCallback
    || (double result = (thread_read_t *)(*(uint64_t (**)(void))(sGetLockStateCallback + 16))(), !result))
  {
    while (1)
    {
      double result = (thread_read_t *)OSAtomicDequeue(&threadResumeQueue, 0);
      if (!result) {
        break;
      }
      uint64_t v1 = result;
      uint64_t v2 = (void (**)(void, void))*((void *)result + 2);
      if (v2)
      {
        v2[2](*((void *)result + 2), 0);
        _Block_release(v2);
      }
      thread_resume(v1[2]);
      OSAtomicEnqueue(&threadResumeFreeQueue, v1, 0);
    }
  }
  return result;
}

atomic_uint *ContentIndexDocSetUnionLazy(uint64_t a1, uint64_t *a2, float a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  if (a1 >= 1)
  {
    char HasWeights = ContentIndexDocSetHasWeights(*a2);
    int v8 = *(_DWORD *)(*v4 + 48);
    int v7 = *(_DWORD *)(*v4 + 52);
    BOOL v9 = v8 == 2;
    if (v8 == 1) {
      uint64_t v10 = *(unsigned int *)(*v4 + 48);
    }
    else {
      uint64_t v10 = 0;
    }
    if (v8 == 1) {
      BOOL v9 = 0;
    }
    uint64_t v11 = v8 == 0;
    if (v8) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = 0;
    }
    if (v8) {
      BOOL v13 = v9;
    }
    else {
      BOOL v13 = 0;
    }
    if (v7 == 3) {
      uint64_t v14 = 3;
    }
    else {
      uint64_t v14 = v7 == 1;
    }
    uint64_t v15 = v5 - 1;
    if (v5 == 1)
    {
      LODWORD(v16) = v14;
      goto LABEL_19;
    }
    int v18 = v4 + 1;
    while (1)
    {
      if (HasWeights)
      {
        char HasWeights = 1;
        uint64_t v19 = *v18;
        if (!*v18) {
          goto LABEL_42;
        }
      }
      else
      {
        if (!*v18)
        {
          char HasWeights = 0;
          uint64_t v19 = *v18;
          goto LABEL_42;
        }
        char HasWeights = ContentIndexDocSetHasWeights(*v18);
        uint64_t v19 = *v18;
        if (!*v18) {
          goto LABEL_42;
        }
      }
      int v20 = *(_DWORD *)(v19 + 48);
      if (v20)
      {
        if (v20 == 2) {
          BOOL v21 = v13 + 1;
        }
        else {
          BOOL v21 = v13;
        }
        if (v20 == 1) {
          ++v12;
        }
        else {
          BOOL v13 = v21;
        }
        goto LABEL_43;
      }
LABEL_42:
      ++v11;
LABEL_43:
      int v22 = *(_DWORD *)(v19 + 52);
      if (v22 == v14)
      {
        uint64_t v16 = v14;
      }
      else
      {
        uint64_t v16 = 1;
        if (v14 != 1 && (v22 & 0xFFFFFFFD) != 1)
        {
          uint64_t v16 = v14;
          if (v14 == 3)
          {
            if (v22) {
              uint64_t v16 = 3;
            }
            else {
              uint64_t v16 = 1;
            }
          }
        }
      }
      ++v18;
      uint64_t v14 = v16;
      if (!--v15) {
        goto LABEL_19;
      }
    }
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  BOOL v13 = 0;
  LODWORD(v16) = 0;
  char HasWeights = 0;
LABEL_19:
  if (v11 == v5)
  {
    uint64_t v17 = (atomic_uint *)*v4;
    if (!*v4) {
      return v17;
    }
    goto LABEL_24;
  }
  uint64_t v17 = (atomic_uint *)*v4;
  if (v12 == v5)
  {
    v17[13] = v16;
LABEL_24:
    atomic_fetch_add(v17, 1u);
    return v17;
  }
  if (*MEMORY[0x1E4F14B00] <= 0x97uLL) {
    ++sTotal_5091;
  }
  uint64_t v23 = *((void *)v17 + 7);
  int v24 = (unsigned int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x98uLL, 0x31F9A007uLL);
  if (!v24 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    v37[0] = 0;
    _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)v37, 2u);
  }
  atomic_store(1u, v24);
  v24[1] = -1073627135;
  *((void *)v24 + 7) = v23;
  v24[12] = 4;
  if (v12) {
    char v25 = HasWeights;
  }
  else {
    char v25 = 1;
  }
  *((void *)v24 + 5) = -1;
  if (v13 + v11 == v5 || (v25 & 1) == 0)
  {
    if (v13 + v11 == v5) {
      int v26 = 2;
    }
    else {
      int v26 = 1;
    }
    v24[12] = v26;
  }
  size_t v27 = 8 * v5;
  if (!((unint64_t)v5 >> 14) && *MEMORY[0x1E4F14B00] < v27) {
    ++sTotal_5091;
  }
  int v28 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v27, 0x31F9A007uLL);
  if (!v28 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
  }
  *((void *)v24 + 9) = v28;
  if (v5 >= 1)
  {
    if (HasWeights)
    {
      do
      {
        int v31 = (atomic_uint *)*v4;
        if (*v4) {
          atomic_fetch_add(v31, 1u);
        }
        uint64_t v29 = *((void *)v24 + 9);
        uint64_t v30 = v24[24];
        v24[24] = v30 + 1;
        *(void *)(v29 + 8 * v30) = v31;
        ++v4;
        --v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        int v32 = (atomic_uint *)*v4;
        if (*v4 && v32[12])
        {
          atomic_fetch_add(v32, 1u);
          uint64_t v33 = *((void *)v24 + 9);
          uint64_t v34 = v24[24];
          v24[24] = v34 + 1;
          *(void *)(v33 + 8 * v34) = v32;
        }
        ++v4;
        --v5;
      }
      while (v5);
    }
  }
  if (v24[24] == 1) {
    char v35 = HasWeights;
  }
  else {
    char v35 = 1;
  }
  if (v35)
  {
    uint64_t v17 = (atomic_uint *)v24;
  }
  else
  {
    uint64_t v17 = (atomic_uint *)**((void **)v24 + 9);
    if (v17) {
      atomic_fetch_add(v17, 1u);
    }
    ContentIndexDocSetDispose((uint64_t)v24);
  }
  *((float *)v17 + 5) = a3;
  return v17;
}

uint64_t ContentIndexDocSetHasWeights(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(float *)(result + 12) == 0.0 && *(float *)(result + 16) == 0.0)
    {
      unsigned int v2 = *(_DWORD *)(result + 48);
      if (v2 > 9) {
        assert_invalid_doc_type((_DWORD *)result);
      }
      if (((1 << v2) & 0x30F) != 0 || !*(_DWORD *)(result + 96))
      {
        return 0;
      }
      else
      {
        unint64_t v3 = 0;
        do
        {
          double result = ContentIndexDocSetHasWeights(*(void *)(*(void *)(v1 + 72) + 8 * v3));
          if (result) {
            break;
          }
          ++v3;
        }
        while (v3 < *(unsigned int *)(v1 + 96));
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void __work_fun_inner_block_invoke_3(uint64_t a1)
{
}

atomic_uint *si_livequery_retain2(uint64_t a1, atomic_uint *a2)
{
  double result = a2;
  atomic_fetch_add(a2, 1u);
  return result;
}

BOOL si_livequery_equals(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) == *(void *)(a2 + 8);
}

uint64_t flattenChildrenAtIndex(void *value, unsigned int a2, CFSetRef theSet)
{
  uint64_t v3 = *(void *)(*((void *)value + 9) + 8 * a2);
  unsigned int v4 = *(_DWORD *)(v3 + 96);
  if (!v4) {
    return 0;
  }
  if (theSet)
  {
    int v8 = (void *)CFSetGetValue(theSet, value);
    BOOL v9 = v8 == value;
    if (v8 == value)
    {
      atomic_fetch_add((atomic_uint *volatile)value, 1u);
      CFSetRemoveValue(theSet, value);
    }
    unsigned int v4 = *(_DWORD *)(v3 + 96);
    if (v4 < 2) {
      goto LABEL_7;
    }
  }
  else
  {
    BOOL v9 = 0;
    if (v4 < 2) {
      goto LABEL_7;
    }
  }
  uint64_t v10 = (char *)malloc_type_realloc(*((void **)value + 9), 8 * (v4 + *((_DWORD *)value + 24) - 1), 0x2004093837F09uLL);
  *((void *)value + 9) = v10;
  memmove(&v10[8 * *(_DWORD *)(v3 + 96) + 8 * a2], &v10[8 * a2 + 8], 8 * (*((_DWORD *)value + 24) + ~a2));
  unsigned int v4 = *(_DWORD *)(v3 + 96);
LABEL_7:
  if (v4)
  {
    unint64_t v11 = 0;
    do
    {
      BOOL v13 = *(atomic_uint **)(*(void *)(v3 + 72) + 8 * v11);
      if (v13) {
        atomic_fetch_add(v13, 1u);
      }
      *(void *)(*((void *)value + 9) + 8 * (a2 + v11++)) = v13;
      unint64_t v12 = *(unsigned int *)(v3 + 96);
    }
    while (v11 < v12);
    uint64_t v14 = (v12 - 1);
  }
  else
  {
    uint64_t v14 = 0xFFFFFFFFLL;
  }
  *((_DWORD *)value + 24) += v14;
  if (v9)
  {
    CFSetSetValue(theSet, value);
    ContentIndexDocSetDispose((uint64_t)value);
  }
  ContentIndexDocSetDispose(v3);
  return v14;
}

uint64_t gatherIndexInfo(SISearchCtx_METADATA *a1, uint64_t a2, int a3)
{
  int v229 = a3;
  uint64_t v261 = *MEMORY[0x1E4F143B8];
  char v237 = a1;
  int v5 = *__error();
  uint64_t v6 = _SILogForLogForCategory(1);
  os_log_type_t v7 = 2 * (dword_1E9FC90A8 < 4);
  if (os_log_type_enabled(v6, v7))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = a1;
    _os_log_impl(&dword_1BD672000, v6, v7, "%p Start gatherIndexInfo", buf, 0xCu);
  }
  *__error() = v5;
  CFAbsoluteTimeGetCurrent();
  __dmb(0xBu);
  int v8 = v237;
  uint64_t v9 = *((void *)v237 + 3);
  uint64_t v10 = *(int *)(v9 + 1392);
  if (*((void *)v237 + 69) == v10)
  {
    uint64_t v11 = *((void *)v237 + 73);
    if (v11)
    {
      uint64_t v12 = *(void *)(v9 + 1376);
      if (v11 != v12)
      {
        *((void *)v237 + 73) = v12;
        *((void *)v8 + 70) = *(unsigned int *)(v12 + 8);
        cleanUp(v8);
        uint64_t v9 = *((void *)v8 + 3);
      }
    }
    uint64_t v13 = *((void *)v8 + 72);
    if (!v13) {
      goto LABEL_15;
    }
    uint64_t v14 = *(void *)(v9 + 1384);
    if (v13 == v14) {
      goto LABEL_15;
    }
    *((void *)v8 + 72) = v14;
    *((void *)v8 + 71) = *(unsigned int *)(v14 + 8);
  }
  else
  {
    *((void *)v237 + 69) = v10;
    if (*((void *)v8 + 72))
    {
      uint64_t v15 = *(void *)(v9 + 1384);
      *((void *)v8 + 72) = v15;
      *((void *)v8 + 71) = *(unsigned int *)(v15 + 8);
    }
    if (*((void *)v8 + 70))
    {
      uint64_t v16 = *(void *)(v9 + 1376);
      *((void *)v8 + 73) = v16;
      *((void *)v8 + 70) = *(unsigned int *)(v16 + 8);
    }
  }
  cleanUp(v8);
LABEL_15:
  kdebug_trace();
  Log = _MDPerf_QueryLog();
  os_signpost_id_t v18 = *((void *)v8 + 1);
  if (v18 + 1 >= 2)
  {
    uint64_t v19 = Log;
    if (os_signpost_enabled(Log))
    {
      uint64_t v20 = *(void *)(v18 + 608);
      qos_class_t v21 = qos_class_self();
      *(_DWORD *)long long buf = 134218240;
      *(void *)&uint8_t buf[4] = v20;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v21;
      _os_signpost_emit_with_name_impl(&dword_1BD672000, v19, OS_SIGNPOST_INTERVAL_BEGIN, v18, "QueryGatherIndexInfo", "QueryId=%{signpost.description:attribute}lld CurrentQoS=%{signpost.description:attribute}x", buf, 0x12u);
    }
  }
  if (dword_1E9FC90A8 >= 5)
  {
    int v190 = *__error();
    int v191 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v191, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1BD672000, v191, OS_LOG_TYPE_DEFAULT, "Get doc set!", buf, 2u);
    }
    *__error() = v190;
  }
  uint64_t v228 = a2;
  int v22 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v23 = setThreadIdAndInfo(-1, (long long *)sSDBExceptionCallbacks, *(void *)(*((void *)v8 + 3) + 1184), 0x40000000, v22);
  unsigned int v25 = v24;
  unint64_t v26 = v23;
  unsigned int v28 = v27;
  uint64_t v29 = *(void *)&threadData[18 * v23 + 2];
  uint64_t v30 = v29 + 320 * HIDWORD(v23);
  *(unsigned char *)(v30 + 216) = 0;
  int v230 = *(_DWORD *)(v30 + 312);
  int v31 = *(void (**)(void))(v30 + 224);
  if (v31) {
    v31(*(void *)(v29 + 320 * HIDWORD(v23) + 288));
  }
  int v231 = v22;
  unsigned int v235 = HIDWORD(v26);
  unsigned int v236 = v26;
  unsigned int v234 = v28;
  unsigned int v233 = v25;
  uint64_t v32 = _setjmp((int *)v30);
  if (v32)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
    }
    *(_DWORD *)(v30 + 312) = v230;
    CIOnThreadCleanUpReset(v233);
    dropThreadId(v236, 1, v231);
    CICleanUpReset(v236, v234);
    uint64_t v35 = 0;
    goto LABEL_212;
  }
  if (*((unsigned char *)v8 + 593))
  {
    __int16 v36 = v8;
    goto LABEL_27;
  }
  os_log_type_t v47 = 0;
  BOOL v226 = &buf[16];
  unsigned int v227 = v240;
  unsigned int v225 = &v247;
  *(void *)&long long v33 = 134218240;
  *(void *)&long long v34 = 134218240;
  long long v223 = v34;
  long long v224 = v34;
  long long v221 = v33;
  long long v222 = v34;
  uint64_t v220 = 32;
  size_t v219 = 256;
  malloc_type_id_t v218 = 838443015;
  *(void *)&long long v33 = 134217984;
  long long v217 = v33;
  malloc_type_id_t v216 = 101211499;
  int v48 = v8;
  uint64_t v49 = v228;
  while (1)
  {
    __int16 v36 = v48;
    uint64_t v50 = *(void *)(*((void *)v48 + 105) + 32);
    if (v50 && *(_DWORD *)(v50 + 48)) {
      goto LABEL_120;
    }
    if (*((uint64_t *)v36 + 70) <= 0 && *((uint64_t *)v36 + 71) < 1) {
      goto LABEL_120;
    }
    if (*(unsigned char *)(*((void *)v36 + 13) + 96)) {
      goto LABEL_120;
    }
    uint64_t v51 = *((void *)v36 + 13);
    do
    {
      uint64_t v52 = v51;
      uint64_t v51 = *(void *)(v51 + 80);
    }
    while (v51);
    if (*(unsigned char *)(*(void *)(v52 + 8) + 12))
    {
LABEL_120:
      int v37 = v47;
      goto LABEL_28;
    }
    uint64_t v53 = &v205;
    MEMORY[0x1F4188790](v32);
    __n128 v55 = (char *)&v205 - ((v54 + 15) & 0xFFFFFFFF0);
    bzero(v55, v54);
    if (*((_DWORD *)v36 + 208))
    {
      uint64_t v56 = 32;
      unint64_t v57 = 0;
      do
      {
        if (v49 && (int v58 = *(atomic_uint **)(v49 + 8 * v57)) != 0
          || (int v58 = *(atomic_uint **)(*((void *)v36 + 105) + v56)) != 0)
        {
          atomic_fetch_add(v58, 1u);
        }
        *(void *)&v55[8 * v57] = v58;
        uint64_t v59 = *((void *)v36 + 105);
        uint64_t v60 = *(void *)(v59 + v56);
        if (v60)
        {
          ContentIndexDocSetCleanupBorrowedChildren(v60);
          ContentIndexDocSetDispose(*(void *)(*((void *)v36 + 105) + v56));
          uint64_t v59 = *((void *)v36 + 105);
        }
        *(void *)(v59 + v56) = 0;
        ++v57;
        v56 += 48;
      }
      while (v57 < *((unsigned int *)v36 + 208));
    }
    if (v47)
    {
      ContentIndexDocSetContextRelease(v47);
      __int16 v36 = v237;
    }
    uint64_t v61 = v36;
    uint64_t v62 = *((void *)v36 + 70);
    unint64_t v215 = v55;
    if (v62)
    {
      uint64_t v63 = v62 - 1;
      *((void *)v36 + 70) = v63;
      uint64_t v64 = *(void *)(**((void **)v36 + 73) + 8 * v63);
      int v65 = *__error();
      uint64_t v66 = _SILogForLogForCategory(1);
      os_log_type_t v67 = 2 * (dword_1E9FC90A8 < 4);
      unint64_t v68 = v61;
      if (os_log_type_enabled(v66, v67))
      {
        uint64_t v69 = *((void *)v61 + 70);
        *(_DWORD *)long long buf = v222;
        *(void *)&uint8_t buf[4] = v61;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v69;
        _os_log_impl(&dword_1BD672000, v66, v67, "%p gII live: %ld", buf, 0x16u);
      }
      *__error() = v65;
      if (!*((void *)v61 + 70))
      {
        uint64_t v70 = *((void *)v61 + 3);
        uint64_t v71 = *(void *)(v70 + 1384);
        *((void *)v61 + 72) = v71;
        *((void *)v61 + 71) = *(unsigned int *)(v71 + 8);
        *((void *)v61 + 69) = *(int *)(v70 + 1392);
      }
      uint64_t v72 = v64;
    }
    else
    {
      uint64_t v72 = *((void *)v36 + 71);
      unint64_t v68 = v36;
      if (!v72) {
        goto LABEL_70;
      }
      *((void *)v36 + 71) = v72 - 1;
      int v73 = *__error();
      uint64_t v74 = _SILogForLogForCategory(1);
      os_log_type_t v75 = 2 * (dword_1E9FC90A8 < 4);
      if (os_log_type_enabled(v74, v75))
      {
        uint64_t v76 = *((void *)v61 + 71);
        *(_DWORD *)long long buf = v221;
        *(void *)&uint8_t buf[4] = v61;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v76;
        _os_log_impl(&dword_1BD672000, v74, v75, "%p gII scan: %ld", buf, 0x16u);
      }
      *__error() = v73;
      uint64_t v72 = *(void *)(**((void **)v61 + 72) + 8 * *((void *)v61 + 71));
    }
    if (*((unsigned char *)v68 + 592) && v72 && *(_DWORD *)(v72 + 56) == *((_DWORD *)v68 + 149)) {
      *((unsigned char *)v68 + 593) = 1;
    }
LABEL_70:
    uint64_t v77 = v72;
    int v78 = *__error();
    char v79 = _SILogForLogForCategory(1);
    os_log_type_t v80 = 2 * (dword_1E9FC90A8 < 4);
    if (os_log_type_enabled(v79, v80))
    {
      *(_DWORD *)long long buf = v224;
      *(void *)&uint8_t buf[4] = v68;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v77;
      _os_log_impl(&dword_1BD672000, v79, v80, "%p gatherIndexInfo at %p", buf, 0x16u);
    }
    *__error() = v78;
    double Current = CFAbsoluteTimeGetCurrent();
    uint64_t v82 = *((void *)v68 + 46);
    uint64_t v213 = v77;
    if (v82)
    {
      size_t v83 = v68;
    }
    else
    {
      uint64_t v232 = v220;
      *((void *)v68 + 47) = 0;
      if (*MEMORY[0x1E4F14B00] <= 0xFFuLL) {
        ++sTotal;
      }
      size_t v214 = &v205;
      size_t v84 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v219, v218);
      if (!v84) {
        _log_fault_for_malloc_failure();
      }
      *((void *)v68 + 46) = v84;
      if (*((_DWORD *)v68 + 208))
      {
        uint64_t v85 = 0;
        uint64_t v86 = *((void *)v68 + 3);
        uint64_t v209 = MEMORY[0x1E4F143A8];
        unsigned int v210 = (char *)v68 + 376;
        unsigned int v208 = __preIterateQueryForIndex_block_invoke;
        uint64_t v207 = MEMORY[0x1E4F143A8];
        uint64_t v206 = __preIterateQueryForIndex_block_invoke_163;
        uint64_t v87 = 0;
        uint64_t v88 = v84;
        do
        {
          char v238 = 0;
          uint64_t v205 = v87;
          uint64_t v89 = *((void *)v68 + 105) + v85;
          char v238 = *(unsigned char *)(v89 + 40);
          uint64_t v90 = *((void *)v68 + 2);
          uint64_t v241 = 0;
          uint64_t v242 = &v241;
          uint64_t v243 = 0x2000000000;
          unsigned int v244 = v88;
          if (*(unsigned char *)(v86 + 2064)) {
            char v91 = -124;
          }
          else {
            char v91 = 12;
          }
          v239[0] = v209;
          v239[1] = 0x40000000;
          v240[0] = v208;
          v240[1] = &__block_descriptor_tmp_162_8713;
          v240[2] = v86;
          *(void *)long long buf = v207;
          *(void *)&uint8_t buf[8] = 0x40000000;
          *(void *)&uint8_t buf[16] = v206;
          int v251 = &unk_1E63463C8;
          int v252 = &v241;
          BOOL v259 = v85 == 0;
          int v253 = v210;
          int v254 = &v232;
          int v255 = &v238;
          uint64_t v256 = v86;
          uint64_t v257 = v213;
          uint64_t v258 = v90;
          char v260 = v91;
          CFAllocatorRef v92 = CICleanUpThreadLoc();
          db_string_table_rdlock(*(_DWORD **)(v86 + 1184));
          CIOnThreadCleanUpPush((uint64_t)v92, (uint64_t)db_string_table_unlock, *(void *)(v86 + 1184));
          uint64_t v93 = *(void **)v89;
          int v245 = (SISearchCtx_METADATA *)MEMORY[0x1E4F143A8];
          uint64_t v246 = 0x40000000;
          int v247 = __db_query_tree_apply_block_block_invoke;
          int v248 = &unk_1E6348598;
          int v249 = v239;
          db_query_tree_apply_block_with_meta(v93, (uint64_t)&v245, 0);
          db_optimize_query_tree((void **)v89);
          CFAllocatorRef v94 = *(void **)v89;
          int v245 = (SISearchCtx_METADATA *)MEMORY[0x1E4F143A8];
          uint64_t v246 = 0x40000000;
          int v247 = __db_query_tree_apply_block_block_invoke;
          int v248 = &unk_1E6348598;
          int v249 = buf;
          db_query_tree_apply_block_with_meta(v94, (uint64_t)&v245, 0);
          CIOnThreadCleanUpPop((uint64_t)v92);
          size_t v84 = (void *)v242[3];
          _Block_object_dispose(&v241, 8);
          if (v238)
          {
            *((unsigned char *)v68 + 641) = 1;
            uint64_t v95 = *((void *)v68 + 105) + v85;
            if (!*(unsigned char *)(v95 + 40))
            {
              *((unsigned char *)v68 + 642) = 0;
              *(unsigned char *)(v95 + 40) = 1;
            }
          }
          uint64_t v87 = v205 + 1;
          v85 += 48;
          uint64_t v88 = v84;
        }
        while (v205 + 1 < (unint64_t)*((unsigned int *)v68 + 208));
        size_t v83 = v237;
        uint64_t v49 = v228;
      }
      else
      {
        size_t v83 = v68;
      }
      *((void *)v68 + 46) = v84;
      uint64_t v53 = v214;
    }
    uint64_t v96 = v53;
    uint64_t v97 = *((void *)v83 + 1);
    *(double *)(v97 + 392) = *(double *)(v97 + 392) + CFAbsoluteTimeGetCurrent() - Current;
    double v98 = CFAbsoluteTimeGetCurrent();
    unint64_t v99 = *((void *)v83 + 47);
    int v100 = CICleanUpThreadLoc();
    uint64_t v101 = (uint64_t)v215;
    int v245 = v83;
    uint64_t v246 = (uint64_t)v215;
    uint64_t v102 = CICleanUpPush((uint64_t)v100, (uint64_t)cleanupDocSets, (uint64_t)&v245);
    unint64_t v211 = v102;
    BOOL v212 = v96;
    if (v99 <= 0x400)
    {
      MEMORY[0x1F4188790](v102);
      unsigned int v104 = (char *)&v205 - ((v103 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v104, v103);
      MEMORY[0x1F4188790](v105);
      int v107 = (char *)&v205 - ((v106 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v107, v106);
      uint64_t v108 = v213;
      int v109 = processNodes((uint64_t)v83, v213, v101, (unint64_t *)v104, v107, v99);
      if (!v109)
      {
        int v161 = *__error();
        int v162 = _SILogForLogForCategory(1);
        os_log_type_t v163 = 2 * (dword_1E9FC90A8 < 4);
        if (os_log_type_enabled(v162, v163))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1BD672000, v162, v163, "Got NULL context from processNodes", buf, 2u);
        }
        *__error() = v161;
        goto LABEL_161;
      }
      uint64_t v110 = v109;
      evaluateFuzzyQuery((uint64_t)v83, v108, (uint64_t)v104);
      int v37 = v110;
      goto LABEL_98;
    }
    int v111 = *__error();
    int v112 = _SILogForLogForCategory(1);
    os_log_type_t v113 = 2 * (dword_1E9FC90A8 < 4);
    if (os_log_type_enabled(v112, v113))
    {
      uint64_t v114 = *((unsigned int *)v83 + 208);
      *(_DWORD *)long long buf = v223;
      *(void *)&uint8_t buf[4] = v99;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v114;
      _os_log_impl(&dword_1BD672000, v112, v113, "alloc %ld cinodes for %ld noded", buf, 0x16u);
    }
    *__error() = v111;
    int v115 = (unint64_t *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 16 * v99, v216);
    if (!v115) {
      break;
    }
    unint64_t v116 = v115;
    uint64_t v117 = v213;
    unint64_t v118 = processNodes((uint64_t)v83, v213, (uint64_t)v215, v115, &v115[v99], v99);
    if (!v118)
    {
      int v167 = *__error();
      uint64_t v168 = _SILogForLogForCategory(1);
      os_log_type_t v169 = 2 * (dword_1E9FC90A8 < 4);
      if (os_log_type_enabled(v168, v169))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1BD672000, v168, v169, "Got NULL context from processNodes", buf, 2u);
      }
      *__error() = v167;
      free(v116);
      goto LABEL_161;
    }
    int v37 = v118;
    evaluateFuzzyQuery((uint64_t)v83, v117, (uint64_t)v116);
    free(v116);
LABEL_98:
    CFAbsoluteTimeGetCurrent();
    int v119 = v237;
    uint64_t v120 = *((void *)v237 + 1);
    *(double *)(v120 + 400) = *(double *)(v120 + 400) + CFAbsoluteTimeGetCurrent() - v98;
    int v121 = *__error();
    int v122 = _SILogForLogForCategory(1);
    os_log_type_t v123 = 2 * (dword_1E9FC90A8 < 4);
    if (os_log_type_enabled(v122, v123))
    {
      CFAbsoluteTime v124 = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)long long buf = v217;
      *(double *)&uint8_t buf[4] = v124 - v98;
      _os_log_impl(&dword_1BD672000, v122, v123, "Computed doc set in %f seconds!", buf, 0xCu);
    }
    unint64_t v125 = v211;
    *__error() = v121;
    CICleanUpClearItem((uint64_t)v100, v125);
    cleanupDocSets(&v245);
    if (*((unsigned char *)v119 + 593)) {
      *((_OWORD *)v119 + 35) = 0u;
    }
    int v48 = v119;
    os_log_type_t v47 = v37;
    __int16 v36 = v119;
    if (*((unsigned char *)v119 + 593)) {
      goto LABEL_28;
    }
  }
  _log_fault_for_malloc_failure();
  int v164 = *__error();
  uint64_t v165 = _SILogForLogForCategory(1);
  os_log_type_t v166 = 2 * (dword_1E9FC90A8 < 4);
  if (os_log_type_enabled(v165, v166))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1BD672000, v165, v166, "query_malloc failed", buf, 2u);
  }
  *__error() = v164;
LABEL_161:
  __int16 v36 = v237;
LABEL_27:
  int v37 = 0;
LABEL_28:
  uint64_t v38 = v37;
  int v8 = v36;
  uint64_t v39 = *((void *)v36 + 13);
  if (*(unsigned char *)(v39 + 96)) {
    goto LABEL_32;
  }
  char v40 = v229;
  uint64_t v41 = v39;
  do
  {
    uint64_t v42 = v41;
    uint64_t v41 = *(void *)(v41 + 80);
  }
  while (v41);
  if (*(unsigned char *)(*(void *)(v42 + 8) + 12))
  {
LABEL_32:
    int v43 = *__error();
    uint64_t v44 = _SILogForLogForCategory(1);
    os_log_type_t v45 = 2 * (dword_1E9FC90A8 < 4);
    if (os_log_type_enabled(v44, v45))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v46 = "Query invalidated";
      goto LABEL_34;
    }
    goto LABEL_35;
  }
  if (!v38)
  {
    int v43 = *__error();
    uint64_t v44 = _SILogForLogForCategory(1);
    os_log_type_t v45 = 2 * (dword_1E9FC90A8 < 4);
    if (os_log_type_enabled(v44, v45))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v46 = "Null context";
LABEL_34:
      _os_log_impl(&dword_1BD672000, v44, v45, v46, buf, 2u);
    }
LABEL_35:
    uint64_t v35 = 0;
    *__error() = v43;
    goto LABEL_208;
  }
  if (*((unsigned char *)v8 + 641) && !*((unsigned char *)v8 + 642)) {
    preparePostCheckQueries(&v237);
  }
  double v126 = CFAbsoluteTimeGetCurrent();
  uint64_t v127 = *(void *)(*((void *)v8 + 105) + 32);
  if (!v127 || (int v128 = *(_DWORD *)(v127 + 48)) == 0)
  {
LABEL_206:
    uint64_t v35 = 0;
    goto LABEL_207;
  }
  if (v128 != 1)
  {
    int v245 = 0;
    unint64_t v135 = (void *)*((void *)v8 + 85);
    if (v135) {
      ContentIndexDocSetIteratorDispose(v135);
    }
    MEMORY[0x1F4188790](v135);
    unsigned int v137 = (char *)&v205 - ((v136 + 15) & 0xFFFFFFFF0);
    bzero(v137, v136);
    unint64_t v138 = *((unsigned int *)v8 + 208);
    if (v138)
    {
      unint64_t v139 = 0;
      uint64_t v140 = 0;
      do
      {
        uint64_t v141 = *(void *)(*((void *)v8 + 105) + v140 + 32);
        *(void *)&v137[8 * v139] = v141;
        uint64_t v142 = *(void *)(*((void *)v8 + 105) + v140);
        if (v142)
        {
          unsigned int v143 = *(unsigned __int16 *)(v142 + 48);
          if (v143 == 4)
          {
            uint64_t v144 = *(void *)(v142 + 16);
            if (v144) {
              LODWORD(v144) = (*(_DWORD *)(v144 + 24) < 0xFu) & (0x5060u >> *(_DWORD *)(v144 + 24));
            }
          }
          else
          {
            LODWORD(v144) = 0;
          }
          if (v144 != ((v143 >> 3) & 1))
          {
            *(unsigned char *)(v141 + 33) = 1;
            unint64_t v138 = *((unsigned int *)v8 + 208);
          }
        }
        ++v139;
        v140 += 48;
        uint64_t v145 = v138;
      }
      while (v139 < v138);
    }
    else
    {
      uint64_t v145 = 0;
    }
    if (*((unsigned char *)v8 + 650)) {
      BOOL v178 = *((unsigned char *)v8 + 656) != 0;
    }
    else {
      BOOL v178 = 0;
    }
    Iterator = ContentIndexDocSetsCreateIterator((uint64_t *)v137, v145, (uint64_t)v38, v178, *((unsigned char *)v8 + 1248), (uint64_t)v8 + 688);
    int v8 = v237;
    *((void *)v237 + 85) = Iterator;
    uint64_t v180 = *((unsigned int *)v8 + 212);
    if (v180 && Iterator)
    {
      Iterator[8] = v180;
      Iterator = (void *)*((void *)v8 + 85);
    }
    ContentIndexDocSet_Step((uint64_t)Iterator, &v245, (unsigned char *)(*((void *)v8 + 13) + 96));
    int v181 = *__error();
    unint64_t v182 = _SILogForLogForCategory(10);
    os_log_type_t v183 = 2 * (dword_1E9FC90CC < 4);
    if (!os_log_type_enabled(v182, v183)) {
      goto LABEL_196;
    }
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v245;
    uint64_t v184 = "2 - count: %ld";
    goto LABEL_195;
  }
  if (*((void *)v8 + 23) && *((void *)v8 + 22)
    || (*((unsigned char *)v8 + 40) & 0x80) == 0
    || (CFArrayRef v129 = (const __CFArray *)*((void *)v8 + 7)) == 0
    || !CFArrayGetCount(v129)
    || (v40 & 1) != 0)
  {
    int v245 = 0;
    unsigned int v146 = (void *)*((void *)v8 + 85);
    if (v146) {
      ContentIndexDocSetIteratorDispose(v146);
    }
    MEMORY[0x1F4188790](v146);
    uint64_t v148 = (uint64_t *)((char *)&v205 - ((v147 + 15) & 0xFFFFFFFF0));
    bzero(v148, v147);
    uint64_t v149 = *((unsigned int *)v8 + 208);
    uint64_t v150 = (v149 - 1);
    if (v149 <= 1)
    {
      if (v149)
      {
        uint64_t v170 = 0;
        uint64_t v171 = 0;
        uint64_t v172 = *((unsigned int *)v8 + 208);
        do
        {
          uint64_t v173 = v170;
          uint64_t v154 = v172;
          uint64_t v174 = *(void *)(*((void *)v8 + 105) + v171 + 32);
          v148[v173] = v174;
          uint64_t v175 = *(void *)(*((void *)v8 + 105) + v171);
          if (v175)
          {
            unsigned int v176 = *(unsigned __int16 *)(v175 + 48);
            if (v176 == 4)
            {
              uint64_t v177 = *(void *)(v175 + 16);
              if (v177) {
                LODWORD(v177) = (*(_DWORD *)(v177 + 24) < 0xFu) & (0x5060u >> *(_DWORD *)(v177 + 24));
              }
            }
            else
            {
              LODWORD(v177) = 0;
            }
            if (v177 != ((v176 >> 3) & 1))
            {
              *(unsigned char *)(v174 + 33) = 1;
              uint64_t v154 = *((unsigned int *)v8 + 208);
            }
          }
          uint64_t v172 = v154;
          v171 += 48;
          uint64_t v170 = v173 + 1;
        }
        while (v173 + 1 < (unint64_t)v154);
      }
      else
      {
        LODWORD(v154) = 0;
      }
    }
    else
    {
      uint64_t v151 = 8 * v149;
      uint64_t v152 = 8;
      uint64_t v153 = 80;
      do
      {
        v148[(unint64_t)v152 / 8] = *(void *)(*((void *)v8 + 105) + v153);
        v152 += 8;
        v153 += 48;
      }
      while (v151 != v152);
      uint64_t *v148 = (uint64_t)ContentIndexDocSetUnionLazy(v150, v148 + 1, 0.0);
      LODWORD(v154) = *((_DWORD *)v8 + 208);
      if (v154 >= 2)
      {
        unint64_t v155 = 1;
        uint64_t v156 = 48;
        uint64_t v157 = *((unsigned int *)v8 + 208);
        do
        {
          uint64_t v154 = v157;
          uint64_t v158 = *(void *)(*((void *)v8 + 105) + v156);
          if (v158)
          {
            unsigned int v159 = *(unsigned __int16 *)(v158 + 48);
            if (v159 == 4)
            {
              uint64_t v160 = *(void *)(v158 + 16);
              if (v160) {
                LODWORD(v160) = (*(_DWORD *)(v160 + 24) < 0xFu) & (0x5060u >> *(_DWORD *)(v160 + 24));
              }
            }
            else
            {
              LODWORD(v160) = 0;
            }
            if (v160 != ((v159 >> 3) & 1))
            {
              *(unsigned char *)(v148[v155] + 33) = 1;
              uint64_t v154 = *((unsigned int *)v8 + 208);
            }
          }
          uint64_t v157 = v154;
          ++v155;
          v156 += 48;
        }
        while (v155 < v154);
      }
    }
    if (*((unsigned char *)v8 + 650)) {
      BOOL v185 = *((unsigned char *)v8 + 656) != 0;
    }
    else {
      BOOL v185 = 0;
    }
    uint64_t v186 = ContentIndexDocSetsCreateIterator(v148, v154, (uint64_t)v38, v185, *((unsigned char *)v8 + 1248), (uint64_t)v8 + 688);
    int v8 = v237;
    *((void *)v237 + 85) = v186;
    char v187 = v186;
    if (*((_DWORD *)v8 + 208) >= 2u)
    {
      ContentIndexDocSetDispose(*v148);
      char v187 = (void *)*((void *)v8 + 85);
    }
    uint64_t v188 = *((unsigned int *)v8 + 212);
    if (v188)
    {
      if (v187)
      {
        v187[8] = v188;
        uint64_t v189 = *((void *)v8 + 85);
      }
      else
      {
        uint64_t v189 = 0;
      }
    }
    else
    {
      uint64_t v189 = (uint64_t)v187;
    }
    ContentIndexDocSet_Step(v189, &v245, (unsigned char *)(*((void *)v8 + 13) + 96));
    int v181 = *__error();
    unint64_t v182 = _SILogForLogForCategory(10);
    os_log_type_t v183 = 2 * (dword_1E9FC90CC < 4);
    if (!os_log_type_enabled(v182, v183)) {
      goto LABEL_196;
    }
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v245;
    uint64_t v184 = "1 - count: %ld";
LABEL_195:
    _os_log_impl(&dword_1BD672000, v182, v183, v184, buf, 0xCu);
LABEL_196:
    *__error() = v181;
LABEL_197:
    uint64_t v35 = 1;
    goto LABEL_207;
  }
  uint64_t v130 = *((void *)v8 + 105);
  query_node_with_ann = *(void **)(v130 + 8);
  if (query_node_with_ann)
  {
    uint64_t v132 = *(void *)(v130 + 16);
    if (v132)
    {
      *((void *)v8 + 102) = makeAndNode((uint64_t)query_node_with_ann, v132, 1, 1);
      uint64_t v133 = *((void *)v8 + 105);
      *(void *)(v133 + 8) = 0;
      *(void *)(v133 + 16) = 0;
      uint64_t v134 = *((void *)v8 + 102);
      goto LABEL_204;
    }
    *((void *)v8 + 102) = query_node_with_ann;
    *(void *)(v130 + 8) = 0;
  }
  else
  {
    query_node_with_ann = db_make_query_node_with_ann("*=*", 0);
    *((void *)v8 + 102) = query_node_with_ann;
  }
  uint64_t v134 = (uint64_t)query_node_with_ann;
LABEL_204:
  uint64_t v192 = db_open_query_with_expr(*(void *)(*((void *)v8 + 3) + 1184), v134);
  *((void *)v8 + 103) = v192;
  if (v192) {
    goto LABEL_197;
  }
  if (dword_1E9FC90A8 < 5) {
    goto LABEL_206;
  }
  int v203 = *__error();
  BOOL v204 = _SILogForLogForCategory(1);
  if (os_log_type_enabled(v204, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1BD672000, v204, OS_LOG_TYPE_DEFAULT, "Couldn't create raw sdb iterator", buf, 2u);
  }
  uint64_t v35 = 0;
  *__error() = v203;
LABEL_207:
  *(double *)(*((void *)v8 + 1) + 408) = *(double *)(*((void *)v8 + 1) + 408)
                                           + CFAbsoluteTimeGetCurrent()
                                           - v126;
LABEL_208:
  uint64_t v193 = *(void *)&threadData[18 * v236 + 2];
  unsigned int v194 = v235;
  uint64_t v195 = v193 + 320 * v235;
  *(_DWORD *)(v195 + 312) = v230;
  BOOL v196 = *(void (**)(void))(v195 + 232);
  if (v196) {
    v196(*(void *)(v193 + 320 * v194 + 288));
  }
  dropThreadId(v236, 0, v231);
  if (v38)
  {
    ContentIndexDocSetContextRelease(v38);
    int v8 = v237;
  }
LABEL_212:
  kdebug_trace();
  BOOL v197 = _MDPerf_QueryLog();
  os_signpost_id_t v198 = *((void *)v8 + 1);
  if (v198 + 1 >= 2)
  {
    BOOL v199 = v197;
    if (os_signpost_enabled(v197))
    {
      uint64_t v200 = *(void *)(v198 + 608);
      qos_class_t v201 = qos_class_self();
      *(_DWORD *)long long buf = 134218240;
      *(void *)&uint8_t buf[4] = v200;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v201;
      _os_signpost_emit_with_name_impl(&dword_1BD672000, v199, OS_SIGNPOST_INTERVAL_END, v198, "QueryGatherIndexInfo", "QueryId=%{signpost.description:attribute}lld CurrentQoS=%{signpost.description:attribute}x", buf, 0x12u);
    }
  }
  return v35;
}

uint64_t _SILogForLogForCategory(int a1)
{
  if (_SILogForLogForCategory_onceToken != -1) {
    dispatch_once(&_SILogForLogForCategory_onceToken, &__block_literal_global_1905);
  }
  return gSILogArray[a1];
}

void cleanupDocSets(void *a1)
{
  uint64_t v1 = *(unsigned int *)(*a1 + 832);
  if (v1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 8 * v1;
    do
    {
      uint64_t v5 = *(void *)(a1[1] + v3);
      if (v5)
      {
        ContentIndexDocSetCleanupBorrowedChildren(v5);
        ContentIndexDocSetDispose(*(void *)(a1[1] + v3));
        *(void *)(a1[1] + v3) = 0;
      }
      v3 += 8;
    }
    while (v4 != v3);
  }
}

uint64_t CICleanUpClearItem(uint64_t result, unint64_t a2)
{
  if (threadData[18 * result + 8] < a2)
  {
    uint64_t v3 = __si_assert_copy_extra_329();
    uint64_t v4 = v3;
    uint64_t v5 = "";
    if (v3) {
      uint64_t v5 = v3;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "ContentIndexExceptionHandler.c", 1600, "td->cleanUpCount >= position", v5);
    free(v4);
    if (__valid_fs(-1)) {
      uint64_t v6 = 2989;
    }
    else {
      uint64_t v6 = 3072;
    }
    *(_DWORD *)uint64_t v6 = -559038737;
    abort();
  }
  unsigned int v2 = (void *)(*(void *)&threadData[18 * result + 12] + 16 * a2);
  void *v2 = 0;
  v2[1] = 0;
  return result;
}

void ContentIndexDocSetCleanupBorrowedChildren(uint64_t a1)
{
  CFSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
  _ContentIndexDocSetCleanupBorrowedChildren(a1, Mutable);
  CFRelease(Mutable);
}

void _ContentIndexDocSetCleanupBorrowedChildren(uint64_t a1, const __CFSet *a2)
{
  if (CFSetContainsValue(a2, (const void *)a1)) {
    return;
  }
  CFSetAddValue(a2, (const void *)a1);
  unsigned int v4 = *(_DWORD *)(a1 + 48);
  if (v4 > 9) {
    return;
  }
  if (((1 << v4) & 0xF6) != 0)
  {
    if (*(_DWORD *)(a1 + 96)) {
      goto LABEL_5;
    }
LABEL_17:
    if (!*(unsigned char *)(a1 + 64)) {
      return;
    }
    goto LABEL_18;
  }
  if (v4 != 9) {
    return;
  }
  int v8 = *(_DWORD *)(a1 + 128);
  if ((v8 & 0x7FFFFFFF) != 0)
  {
    unint64_t v9 = 0;
    do
    {
      _ContentIndexDocSetCleanupBorrowedChildren(*(void *)(*(void *)(a1 + 120) + 8 * v9), a2);
      ContentIndexDocSetDispose(*(void *)(*(void *)(a1 + 120) + 8 * v9));
      *(void *)(*(void *)(a1 + 120) + 8 * v9++) = 0;
      int v8 = *(_DWORD *)(a1 + 128);
    }
    while (v9 < (v8 & 0x7FFFFFFFu));
  }
  *(_DWORD *)(a1 + 128) = v8 & 0x80000000;
  if (!*(_DWORD *)(a1 + 96)) {
    goto LABEL_17;
  }
LABEL_5:
  unint64_t v5 = 0;
  do
  {
    _ContentIndexDocSetCleanupBorrowedChildren(*(void *)(*(void *)(a1 + 72) + 8 * v5++), a2);
    unint64_t v6 = *(unsigned int *)(a1 + 96);
  }
  while (v5 < v6);
  if (*(unsigned char *)(a1 + 64))
  {
    if (v6)
    {
      unint64_t v7 = 0;
      do
        ContentIndexDocSetDispose(*(void *)(*(void *)(a1 + 72) + 8 * v7++));
      while (v7 < *(unsigned int *)(a1 + 96));
    }
LABEL_18:
    *(unsigned char *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 96) = 0;
  }
}

void evaluateFuzzyQuery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v38 = 0;
  int v5 = *__error();
  unint64_t v6 = _SILogForLogForCategory(1);
  os_log_type_t v7 = 2 * (dword_1E9FC90A8 < 4);
  if (os_log_type_enabled(v6, v7))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = a2;
    _os_log_impl(&dword_1BD672000, v6, v7, "evaluateFuzzyQuery for %p", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v5;
  if (*(_DWORD *)(a1 + 832))
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v35 = MEMORY[0x1E4F143A8];
    uint64_t v36 = *(void *)(a1 + 24);
    uint64_t v10 = *(void *)(a1 + 840);
    do
    {
      char v40 = 0;
      uint64_t v11 = (uint64_t *)(v10 + v8);
      char v40 = *((unsigned char *)v11 + 40);
      uint64_t v12 = *v11;
      v39[0] = v35;
      v39[1] = 0x40000000;
      v39[2] = ___ZL19_evaluateFuzzyQueryP20SISearchCtx_METADATAP14__ContentIndexPP19_ContentIndexDocSetPm_block_invoke;
      v39[3] = &__block_descriptor_tmp_173;
      v39[4] = a1;
      if (v12 && (*(_WORD *)(v12 + 56) & 1) != 0)
      {
        uint64_t v14 = *(void **)(v12 + 24);
        if (!v14)
        {
          uint64_t v14 = malloc_type_calloc(0x20uLL, 1uLL, 0x901C1E50uLL);
          *(void *)(v12 + 24) = v14;
        }
        v14[3] = 0;
        v14[1] = 0;
        char v13 = 1;
      }
      else
      {
        char v13 = 0;
        uint64_t v14 = 0;
      }
      *(void *)&long long buf = MEMORY[0x1E4F143A8];
      *((void *)&buf + 1) = 0x40000000;
      uint64_t v44 = __evaluateFuzzyQueryForIndex_block_invoke;
      os_log_type_t v45 = &unk_1E63463F0;
      BOOL v54 = v8 == 0;
      uint64_t v48 = a2;
      uint64_t v49 = a3;
      uint64_t v50 = &v38;
      uint64_t v51 = v12;
      os_log_type_t v47 = &v40;
      uint64_t v46 = v39;
      char v55 = v13;
      uint64_t v52 = v14;
      uint64_t v53 = v36;
      v41[0] = MEMORY[0x1E4F143A8];
      v41[1] = 0x40000000;
      v41[2] = __evaluateFuzzyQueryForIndex_block_invoke_175;
      v41[3] = &__block_descriptor_tmp_178;
      v41[4] = a2;
      v42[0] = MEMORY[0x1E4F143A8];
      v42[1] = 0x40000000;
      v42[2] = __db_query_tree_apply_block_block_invoke;
      v42[3] = &unk_1E6348598;
      v42[4] = &buf;
      uint64_t tree_apply_block_with_meta = db_query_tree_apply_block_with_meta((void *)v12, (uint64_t)v42, (uint64_t)v41);
      if (!tree_apply_block_with_meta) {
        uint64_t tree_apply_block_with_meta = (uint64_t)ContentIndexDocSetCreateEmpty(a2);
      }
      uint64_t v10 = *(void *)(a1 + 840);
      uint64_t v16 = v10 + v8;
      *(void *)(v10 + v8 + 32) = tree_apply_block_with_meta;
      if (v40)
      {
        *(unsigned char *)(a1 + 641) = 1;
        if (!*(unsigned char *)(v16 + 40))
        {
          *(unsigned char *)(a1 + 642) = 0;
          *(unsigned char *)(v16 + 40) = 1;
        }
      }
      ++v9;
      v8 += 48;
    }
    while (v9 < *(unsigned int *)(a1 + 832));
  }
  CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &kCIDocSetSetCallbacks);
  if (*(_DWORD *)(a1 + 832))
  {
    unint64_t v19 = 0;
    uint64_t v20 = *(void *)(a1 + 840);
    uint64_t v21 = 32;
    do
    {
      _ContentIndexDocSetIteratorMarkNegation(*(void *)(v20 + v21), 0);
      uint64_t v22 = *(void *)(*(void *)(a1 + 840) + v21);
      unint64_t v23 = CFArrayCreateMutable(v17, 2, 0);
      unsigned int v24 = _ContentIndexMemoizeDocSet(v22, Mutable, v23);
      CFRelease(v23);
      uint64_t v20 = *(void *)(a1 + 840);
      *(void *)(v20 + v21) = v24;
      ++v19;
      unint64_t v25 = *(unsigned int *)(a1 + 832);
      v21 += 48;
    }
    while (v19 < v25);
    if (v25)
    {
      unint64_t v26 = 0;
      uint64_t v27 = 32;
      do
      {
        uint64_t v28 = *(void *)(*(void *)(a1 + 840) + v27);
        ContentIndexFlattenDocSet(v28, Mutable);
        _ContentIndexOptimizeDocSet(v28, 0, 0, Mutable);
        ++v26;
        v27 += 48;
      }
      while (v26 < *(unsigned int *)(a1 + 832));
    }
  }
  CFRelease(Mutable);
  unsigned int v29 = *(_DWORD *)(a1 + 848);
  if (v29)
  {
    ContentIndexOrganizeWeightedTree(*(void *)(*(void *)(a1 + 840) + 48 * v29 + 32));
    uint64_t v30 = *(void *)(*(void *)(a1 + 840) + 48 * *(unsigned int *)(a1 + 848) + 32);
    ContentIndexAnnotateWeightedTreeInner(v30, 0.0);
    *(_DWORD *)(v30 + 28) = *(_DWORD *)(v30 + 24);
  }
  if (v38 != *(void *)(a1 + 376))
  {
    int v31 = __si_assert_copy_extra_329();
    uint64_t v32 = v31;
    long long v33 = "";
    if (v31) {
      long long v33 = v31;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SISearchCtx_METADATA.cpp", 5616, "idx==ctx->cinodeCount", v33);
    free(v32);
    if (__valid_fs(-1)) {
      uint64_t v34 = 2989;
    }
    else {
      uint64_t v34 = 3072;
    }
    *(_DWORD *)uint64_t v34 = -559038737;
    abort();
  }
}

atomic_uint *_ContentIndexMemoizeDocSet(uint64_t a1, const __CFSet *a2, __CFArray *a3)
{
  uint64_t v3 = a1;
  if (a1 && (*(_DWORD *)(a1 + 48) & 0xFFFFFFFC) == 4)
  {
    if (*(_DWORD *)(a1 + 96))
    {
      unint64_t v6 = 0;
      do
      {
        *(void *)(*(void *)(v3 + 72) + 8 * v6) = _ContentIndexMemoizeDocSet(*(void *)(*(void *)(v3 + 72) + 8 * v6), a2, a3);
        ++v6;
      }
      while (v6 < *(unsigned int *)(v3 + 96));
    }
    CFStringRef Value = (atomic_uint *)CFSetGetValue(a2, (const void *)v3);
    if (Value)
    {
      uint64_t v8 = Value;
      if (Value != (atomic_uint *)v3)
      {
        atomic_fetch_add(Value, 1u);
        ContentIndexDocSetDispose(v3);
        CFArrayRemoveAllValues(a3);
        CFArrayAppendValue(a3, v8);
        return v8;
      }
    }
    else
    {
      CFSetAddValue(a2, (const void *)v3);
      v10.length = CFArrayGetCount(a3);
      v10.location = 0;
      CFArrayApplyFunction(a3, v10, (CFArrayApplierFunction)setShared, 0);
      CFArrayRemoveAllValues(a3);
    }
  }
  return (atomic_uint *)v3;
}

uint64_t ContentIndexFlattenDocSet(uint64_t result, const __CFSet *a2)
{
  if (*(float *)(result + 12) == 0.0)
  {
    uint64_t v2 = result;
    if (*(float *)(result + 16) == 0.0 && *(float *)(result + 20) == 0.0)
    {
      switch(*(_DWORD *)(result + 48))
      {
        case 4:
          if (!*(_DWORD *)(result + 96)) {
            return result;
          }
          unsigned int v4 = 0;
          break;
        case 5:
          if (*(_DWORD *)(result + 96))
          {
            unsigned int v5 = 0;
            do
            {
              uint64_t v6 = 8 * v5;
              double result = ContentIndexFlattenDocSet(*(void *)(*(void *)(v2 + 72) + v6), a2);
              uint64_t v7 = *(void *)(*(void *)(v2 + 72) + v6);
              if (*(float *)(v7 + 16) == 0.0
                && *(float *)(v7 + 12) == 0.0
                && *(_DWORD *)(v7 + 48) == *(_DWORD *)(v2 + 48)
                && !*(_DWORD *)(v7 + 8))
              {
                *(_DWORD *)(v2 + 52) |= *(_DWORD *)(v7 + 52);
                double result = flattenChildrenAtIndex((void *)v2, v5, a2);
                v5 += result;
              }
              ++v5;
            }
            while (v5 < *(_DWORD *)(v2 + 96));
          }
          return result;
        case 6:
          if (*(_DWORD *)(result + 96))
          {
            unsigned int v8 = 0;
            do
            {
              uint64_t v9 = 8 * v8;
              double result = ContentIndexFlattenDocSet(*(void *)(*(void *)(v2 + 72) + v9), a2);
              uint64_t v10 = *(void *)(*(void *)(v2 + 72) + v9);
              if (*(float *)(v10 + 16) == 0.0
                && *(float *)(v10 + 12) == 0.0
                && *(_DWORD *)(v10 + 48) == 4
                && !*(_DWORD *)(v10 + 8))
              {
                *(_DWORD *)(v2 + 52) |= *(_DWORD *)(v10 + 52);
                double result = flattenChildrenAtIndex((void *)v2, v8, a2);
                v8 += result;
              }
              ++v8;
            }
            while (v8 < *(_DWORD *)(v2 + 96));
          }
          return result;
        case 7:
          double result = ContentIndexFlattenDocSet(**(void **)(result + 72), a2);
          if (*(_DWORD *)(v2 + 96) >= 2u)
          {
            unsigned int v11 = 1;
            do
            {
              uint64_t v12 = 8 * v11;
              double result = ContentIndexFlattenDocSet(*(void *)(*(void *)(v2 + 72) + v12), a2);
              uint64_t v13 = *(void *)(*(void *)(v2 + 72) + v12);
              if (*(float *)(v13 + 16) == 0.0
                && *(float *)(v13 + 12) == 0.0
                && *(_DWORD *)(v13 + 48) == 4
                && !*(_DWORD *)(v13 + 8))
              {
                *(_DWORD *)(v2 + 52) |= *(_DWORD *)(v13 + 52);
                double result = flattenChildrenAtIndex((void *)v2, v11, a2);
                v11 += result;
              }
              ++v11;
            }
            while (v11 < *(_DWORD *)(v2 + 96));
          }
          return result;
        default:
          return result;
      }
      while (1)
      {
        uint64_t v15 = 8 * v4;
        double result = ContentIndexFlattenDocSet(*(void *)(*(void *)(v2 + 72) + v15), a2);
        uint64_t v16 = *(void *)(*(void *)(v2 + 72) + v15);
        if (*(float *)(v16 + 16) != 0.0
          || *(float *)(v16 + 12) != 0.0
          || *(_DWORD *)(v16 + 48) != *(_DWORD *)(v2 + 48)
          || *(_DWORD *)(v16 + 8))
        {
          goto LABEL_35;
        }
        int v17 = *(_DWORD *)(v16 + 52);
        int v18 = *(_DWORD *)(v2 + 52);
        if (v17 != v18) {
          break;
        }
LABEL_34:
        double result = flattenChildrenAtIndex((void *)v2, v4, a2);
        v4 += result;
LABEL_35:
        if (++v4 >= *(_DWORD *)(v2 + 96)) {
          return result;
        }
      }
      if (v17 != 1 || v18 == 1)
      {
        if (v18 == 1) {
          goto LABEL_34;
        }
        if (v17 == 3)
        {
          if (v4) {
            int v14 = 1;
          }
          else {
            int v14 = 3;
          }
          goto LABEL_33;
        }
        if (v17) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v18 == 3;
        }
        if (!v20) {
          goto LABEL_34;
        }
      }
      int v14 = 1;
LABEL_33:
      *(_DWORD *)(v2 + 52) = v14;
      goto LABEL_34;
    }
  }
  return result;
}

uint64_t _ContentIndexDocSetIteratorMarkNegation(uint64_t result, unsigned int a2)
{
  uint64_t v2 = result;
  *(unsigned char *)(result + 34) = a2;
  unsigned int v3 = *(_DWORD *)(result + 48);
  if (v3 > 9) {
    assert_invalid_doc_type((_DWORD *)result);
  }
  int v4 = 1 << v3;
  if ((v4 & 0x10F) == 0)
  {
    if ((v4 & 0xF0) != 0)
    {
      if (*(unsigned char *)(result + 64)) {
        return result;
      }
    }
    else
    {
      *(_DWORD *)(result + 128) ^= 0x80000000;
      if (*(unsigned char *)(result + 64)) {
        return result;
      }
    }
    if (*(_DWORD *)(result + 96))
    {
      unint64_t v6 = 0;
      int v7 = a2 ^ 1;
      do
      {
        int v8 = *(_DWORD *)(v2 + 48);
        if (v8 == 6) {
          unsigned int v9 = v7;
        }
        else {
          unsigned int v9 = 0;
        }
        if ((v8 - 4) < 2 || v8 == 7) {
          uint64_t v11 = a2;
        }
        else {
          uint64_t v11 = v9;
        }
        double result = _ContentIndexDocSetIteratorMarkNegation(*(void *)(*(void *)(v2 + 72) + 8 * v6++), v11);
      }
      while (v6 < *(unsigned int *)(v2 + 96));
    }
  }
  return result;
}

void _ContentIndexOptimizeDocSet(uint64_t a1, uint64_t *a2, uint64_t a3, const __CFSet *a4)
{
  uint64_t v20 = a1;
  if (a1)
  {
    switch(*(_DWORD *)(a1 + 48))
    {
      case 4:
      case 6:
        if (*(_DWORD *)(a1 + 96))
        {
          unint64_t v8 = 0;
          do
            _ContentIndexOptimizeDocSet(*(void *)(*(void *)(a1 + 72) + 8 * v8++), a2, a3, a4);
          while (v8 < *(unsigned int *)(a1 + 96));
        }
        return;
      case 5:
      case 7:
        if (*(_DWORD *)(a1 + 96))
        {
          unint64_t v9 = 0;
          uint64_t v10 = (a3 + 1);
          do
          {
            v18[0] = a1;
            v18[2] = a2;
            v18[1] = v9;
            _ContentIndexOptimizeDocSet(*(void *)(*(void *)(a1 + 72) + 8 * v9++), v18, v10, a4);
          }
          while (v9 < *(unsigned int *)(a1 + 96));
        }
        return;
      case 9:
        if ((*(_DWORD *)(a1 + 128) & 0x7FFFFFFF) != 0)
        {
          LODWORD(v18[0]) = 0;
          unsigned __int8 v19 = 0;
          uint64_t v11 = extractConstrainingDocSets(a3, a2, a4, (unsigned int *)v18, &v19);
          if (LODWORD(v18[0]))
          {
            int v12 = *(_DWORD *)(a1 + 128);
            if (v19)
            {
              if ((v12 & 0x80000000) == 0)
              {
                int v13 = 5;
                int v14 = 7;
                char v15 = 1;
LABEL_29:
                recomputeConstraints((atomic_uint **)v11, v18[0], &v20, v13, 4, v14, v15, 1);
                return;
              }
              int v13 = 4;
              int v14 = 5;
            }
            else
            {
              if ((v12 & 0x80000000) == 0)
              {
                recomputeConstraints((atomic_uint **)v11, v18[0], &v20, 5, 5, 4, 0, 0);
                return;
              }
              int v13 = 4;
              int v14 = 7;
            }
            char v15 = 0;
            goto LABEL_29;
          }
          if ((*(_DWORD *)(a1 + 128) & 0x7FFFFFFF) != 0)
          {
            unint64_t v17 = 0;
            do
              ContentIndexDocSetDispose(*(void *)(*(void *)(a1 + 120) + 8 * v17++));
            while (v17 < (*(_DWORD *)(a1 + 128) & 0x7FFFFFFFu));
          }
          free(*(void **)(a1 + 120));
          *(void *)(a1 + 120) = -1;
          *(_DWORD *)(a1 + 128) &= 0x80000000;
        }
        else if (*(void *)(a1 + 120) != -1)
        {
          LODWORD(v18[0]) = 0;
          unsigned __int8 v19 = 0;
          uint64_t v16 = extractConstrainingDocSets(a3, a2, a4, (unsigned int *)v18, &v19);
          if (LODWORD(v18[0]))
          {
            *(_DWORD *)(a1 + 128) = v18[0] & 0x7FFFFFFF | (v19 << 31);
            *(void *)(a1 + 120) = v16;
          }
          else
          {
            *(void *)(a1 + 120) = -1;
          }
        }
        break;
      default:
        return;
    }
  }
}

void *processNodes(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void *a5, unint64_t a6)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *(const void ***)(a1 + 368);
  CFSetRef v12 = *(const __CFSet **)(*(void *)(a1 + 24) + 6632);
  if (v12 && CFSetContainsValue(v12, (const void *)*(int *)(a2 + 56))) {
    uint64_t v55 = *(void *)(*(void *)(a1 + 24) + 6624);
  }
  else {
    uint64_t v55 = 0;
  }
  if (((a6 >> 14) & 0x7FFFFFFFFFFFLL) == 0 && 8 * a6 > *MEMORY[0x1E4F14B00]) {
    ++sTotal;
  }
  uint64_t v56 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 8 * a6, 0x31F9A007uLL);
  if (!v56) {
    _log_fault_for_malloc_failure();
  }
  CFDictionaryKeyCallBacks keyCallBacks = *(CFDictionaryKeyCallBacks *)byte_1F18138D8;
  CFDictionaryRef v13 = CFDictionaryCreateMutable((CFAllocatorRef)kCIQueryZoneAllocator, a6, &keyCallBacks, 0);
  unint64_t v14 = 0;
  if (a6)
  {
    char v15 = a4;
    unint64_t v16 = a6;
    do
    {
      int v17 = CFDictionaryContainsKey(v13, *v11);
      int v18 = *v11;
      if (v17)
      {
        void *v15 = CFDictionaryGetValue(v13, v18);
      }
      else
      {
        CFDictionaryAddValue(v13, v18, (const void *)v14);
        void *v15 = v14;
        v56[v14++] = *v11;
      }
      ++v15;
      ++v11;
      --v16;
    }
    while (v16);
  }
  CFRelease(v13);
  unsigned __int8 v19 = 0;
  size_t v20 = 8 * a6;
  do
  {
    uint64_t v21 = *(void *)(a1 + 104);
    if (*(unsigned char *)(v21 + 96)) {
      break;
    }
    do
    {
      uint64_t v22 = v21;
      uint64_t v21 = *(void *)(v21 + 80);
    }
    while (v21);
    if (*(unsigned char *)(*(void *)(v22 + 8) + 12)) {
      break;
    }
    if (v19 && dword_1E9FC90D8 >= 5)
    {
      int v27 = *__error();
      uint64_t v28 = _SILogForLogForCategory(13);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        uint64_t v59 = v19;
        _os_log_impl(&dword_1BD672000, v28, OS_LOG_TYPE_DEFAULT, "Looping %ld", buf, 0xCu);
      }
      *__error() = v27;
    }
    bzero(a5, v20);
    int v23 = *(unsigned __int8 *)(a2 + 8);
    NodesLazy = (void *)__CIMatchQueryNodesLazy(a2, v55, v14, (uint64_t)v56, a5, 0, (*(_DWORD *)(*(void *)(a1 + 24) + 6576) >> 18) & 1, 0, (unsigned char *)(*(void *)(a1 + 104) + 96));
    if (v23 && !*(unsigned char *)(a2 + 8))
    {
      int v25 = *__error();
      unint64_t v26 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315394;
        uint64_t v59 = "processNodes";
        __int16 v60 = 1024;
        int v61 = 317;
        _os_log_error_impl(&dword_1BD672000, v26, OS_LOG_TYPE_ERROR, "%s:%d: Index became unavailable", buf, 0x12u);
      }
      *__error() = v25;
      *(unsigned char *)(a1 + 1193) = 1;
      size_t v20 = 8 * a6;
    }
    if (NodesLazy) {
      goto LABEL_34;
    }
    ++v19;
  }
  while (v19 != (const char *)5);
  NodesLazy = 0;
LABEL_34:
  free(v56);
  uint64_t v29 = *(void *)(a1 + 104);
  if (*(unsigned char *)(v29 + 96))
  {
    BOOL v32 = NodesLazy != 0;
    uint64_t v30 = a3;
LABEL_42:
    unint64_t v34 = *(unsigned int *)(a1 + 832);
    if (v34)
    {
      for (unint64_t i = 0; i < v34; ++i)
      {
        uint64_t v36 = *(void *)(v30 + 8 * i);
        if (v36)
        {
          ContentIndexDocSetCleanupBorrowedChildren(v36);
          ContentIndexDocSetDispose(*(void *)(v30 + 8 * i));
          unint64_t v34 = *(unsigned int *)(a1 + 832);
        }
        *(void *)(v30 + 8 * i) = 0;
      }
    }
    if (v32)
    {
      ContentIndexDocSetContextRelease(NodesLazy);
      for (; v14; --v14)
      {
        if (*a5)
        {
          ContentIndexDocSetCleanupBorrowedChildren(*a5);
          ContentIndexDocSetDispose(*a5);
        }
        ++a5;
      }
    }
    if (a6) {
      bzero(a4, v20);
    }
    return 0;
  }
  uint64_t v30 = a3;
  do
  {
    uint64_t v31 = v29;
    uint64_t v29 = *(void *)(v29 + 80);
  }
  while (v29);
  BOOL v32 = NodesLazy != 0;
  if (*(unsigned char *)(*(void *)(v31 + 8) + 12)) {
    BOOL v33 = 1;
  }
  else {
    BOOL v33 = NodesLazy == 0;
  }
  if (v33) {
    goto LABEL_42;
  }
  if (a6)
  {
    while (v14 > *a4)
    {
      int v37 = (atomic_uint *)a5[*a4];
      if (!v37)
      {
        uint64_t v51 = __si_assert_copy_extra_329();
        uint64_t v49 = v51;
        uint64_t v52 = "";
        if (v51) {
          uint64_t v52 = v51;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "SISearchCtx_METADATA.cpp", 351, "cidocs[(size_t)docs[i]]", v52);
        goto LABEL_83;
      }
      atomic_fetch_add(v37, 1u);
      *a4++ = (unint64_t)v37;
      if (!--a6) {
        goto LABEL_61;
      }
    }
    uint64_t v48 = __si_assert_copy_extra_329();
    uint64_t v49 = v48;
    uint64_t v50 = "";
    if (v48) {
      uint64_t v50 = v48;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SISearchCtx_METADATA.cpp", 350, "(size_t)docs[i]<j", v50);
LABEL_83:
    free(v49);
    if (__valid_fs(-1)) {
      uint64_t v53 = 2989;
    }
    else {
      uint64_t v53 = 3072;
    }
    *(_DWORD *)uint64_t v53 = -559038737;
    abort();
  }
  for (; v14; --v14)
  {
LABEL_61:
    ContentIndexDocSetDispose(*a5);
    *a5++ = 0;
  }
  unint64_t v38 = *(unsigned int *)(a1 + 832);
  if (v38)
  {
    uint64_t v39 = 0;
    for (unint64_t j = 0; j < v38; ++j)
    {
      uint64_t v41 = *(void *)(a3 + 8 * j);
      if (!v41 || !*(_DWORD *)(v41 + 48))
      {
        uint64_t v42 = *(void *)(a1 + 840);
        int v43 = *(void **)(v42 + v39);
        if (v43)
        {
          clear_node_field_caches(v43);
          uint64_t v42 = *(void *)(a1 + 840);
        }
        uint64_t v44 = *(void **)(v42 + v39 + 8);
        if (v44)
        {
          clear_node_field_caches(v44);
          uint64_t v42 = *(void *)(a1 + 840);
        }
        os_log_type_t v45 = *(void **)(v42 + v39 + 16);
        if (v45)
        {
          clear_node_field_caches(v45);
          uint64_t v42 = *(void *)(a1 + 840);
        }
        uint64_t v46 = *(void **)(v42 + v39 + 24);
        if (v46) {
          clear_node_field_caches(v46);
        }
        *(unsigned char *)(a1 + 643) = 0;
        unint64_t v38 = *(unsigned int *)(a1 + 832);
      }
      v39 += 48;
    }
  }
  return NodesLazy;
}

void clear_node_field_caches(void *a1)
{
  if (*a1) {
    clear_node_field_caches();
  }
  if (a1[1]) {
    clear_node_field_caches();
  }
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 120);
    if (v3 != -1)
    {
      if (!v3)
      {
LABEL_11:
        uint64_t v5 = a1[4];
        if (v5 && v2 && (*(unsigned char *)(v2 + 33) & 8) == 0)
        {
          if (v5 != -1) {
            ContentIndexDocSetDispose(v5);
          }
          a1[4] = 0;
        }
        return;
      }
      int v4 = *(void (**)(void))(v2 + 128);
      if (v4)
      {
        v4();
        uint64_t v2 = a1[2];
      }
    }
    *(void *)(v2 + 120) = 0;
    *(void *)(v2 + 128) = 0;
    goto LABEL_11;
  }
}

unsigned int *__evaluateFuzzyQueryForIndex_block_invoke_175(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  int v7 = *(_WORD *)(a2 + 48) & 0xFFF7;
  if (v7 == 2)
  {
    if (dword_1E9FC90A8 >= 5)
    {
      int v39 = *__error();
      char v40 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1BD672000, v40, OS_LOG_TYPE_DEFAULT, "And.", buf, 2u);
      }
      *__error() = v39;
      if (!a3) {
        goto LABEL_77;
      }
    }
    else if (!a3)
    {
      goto LABEL_77;
    }
    if (a4)
    {
      uint64_t v11 = *(void *)(a2 + 8);
      unsigned int v12 = *(unsigned __int16 *)(v11 + 48);
      if (v12 == 4 && (uint64_t v13 = *(void *)(v11 + 16)) != 0) {
        unsigned int v14 = (*(_DWORD *)(v13 + 24) < 0xFu) & (0x5060u >> *(_DWORD *)(v13 + 24));
      }
      else {
        unsigned int v14 = 0;
      }
      int v15 = (v12 >> 3) & 1;
      if (v14 != v15)
      {
        unsigned int v16 = *(unsigned __int16 *)(*(void *)a2 + 48);
        if (v16 == 4)
        {
          uint64_t v17 = *(void *)(*(void *)a2 + 16);
          if (v17) {
            LODWORD(v17) = (*(_DWORD *)(v17 + 24) < 0xFu) & (0x5060u >> *(_DWORD *)(v17 + 24));
          }
        }
        else
        {
          LODWORD(v17) = 0;
        }
        if (v17 != ((v16 >> 3) & 1))
        {
          unint64_t v34 = ContentIndexDocSetNotLazy(a3, *(float *)(a2 + 72));
          uint64_t v35 = ContentIndexDocSetNotLazy(a4, *(float *)(a2 + 72));
          *(void *)long long buf = v34;
          uint64_t v50 = (uint64_t)v35;
          int v18 = ContentIndexDocSetIntersectionLazy(2, (atomic_uint **)buf, *(float *)(a2 + 72));
          ContentIndexDocSetDispose(a3);
          ContentIndexDocSetDispose(a4);
          ContentIndexDocSetDispose((uint64_t)v34);
          uint64_t v36 = (uint64_t)v35;
          goto LABEL_66;
        }
      }
      if (v12 == 4)
      {
        uint64_t v26 = *(void *)(v11 + 16);
        if (v26) {
          LODWORD(v26) = (*(_DWORD *)(v26 + 24) < 0xFu) & (0x5060u >> *(_DWORD *)(v26 + 24));
        }
      }
      else
      {
        LODWORD(v26) = 0;
      }
      unsigned int v27 = *(unsigned __int16 *)(*(void *)a2 + 48);
      if (v27 == 4)
      {
        uint64_t v28 = *(void *)(*(void *)a2 + 16);
        if (v28) {
          LODWORD(v28) = (*(_DWORD *)(v28 + 24) < 0xFu) & (0x5060u >> *(_DWORD *)(v28 + 24));
        }
      }
      else
      {
        LODWORD(v28) = 0;
      }
      int v29 = (v27 >> 3) & 1;
      if (v26 == v15)
      {
        if (v28 == v29)
        {
          *(void *)long long buf = a3;
          uint64_t v50 = a4;
          uint64_t v30 = ContentIndexDocSetIntersectionLazy(2, (atomic_uint **)buf, *(float *)(a2 + 72));
LABEL_65:
          int v18 = v30;
          ContentIndexDocSetDispose(a3);
          uint64_t v36 = a4;
          goto LABEL_66;
        }
        float v31 = *(float *)(a2 + 72);
        uint64_t v32 = a4;
        BOOL v33 = (atomic_uint *)a3;
      }
      else
      {
        if (v28 != v29)
        {
          uint64_t v42 = __si_assert_copy_extra_625(-1);
          int v43 = v42;
          uint64_t v44 = "";
          if (v42) {
            uint64_t v44 = v42;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "SIQueryC.c", 5897, "!isNegativeQuery(node->lchild)", v44);
          free(v43);
          if (__valid_fs(-1)) {
            uint64_t v45 = 2989;
          }
          else {
            uint64_t v45 = 3072;
          }
          *(_DWORD *)uint64_t v45 = -559038737;
          abort();
        }
        float v31 = *(float *)(a2 + 72);
        uint64_t v32 = a3;
        BOOL v33 = (atomic_uint *)a4;
      }
      uint64_t v30 = ContentIndexDocSetExceptLazy(v32, v33, v31);
      goto LABEL_65;
    }
LABEL_77:
    ContentIndexDocSetDispose(a3);
    ContentIndexDocSetDispose(a4);
    if ((*(_WORD *)(a2 + 48) & 8) != 0) {
      return ContentIndexDocSetCreateAllWithPrototype(*(void *)(a1 + 32), a2);
    }
    else {
      return 0;
    }
  }
  if (v7 != 1)
  {
    uint64_t v46 = __si_assert_copy_extra_625(-1);
    os_log_type_t v47 = v46;
    if (v46) {
      uint64_t v48 = v46;
    }
    else {
      uint64_t v48 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "SIQueryC.c", 5922, v48);
    free(v47);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  if (dword_1E9FC90A8 >= 5)
  {
    int v37 = *__error();
    unint64_t v38 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1BD672000, v38, OS_LOG_TYPE_DEFAULT, "OR.", buf, 2u);
    }
    *__error() = v37;
    if (!a3) {
      goto LABEL_71;
    }
  }
  else if (!a3)
  {
    goto LABEL_71;
  }
  if (!a4)
  {
LABEL_71:
    if (a4) {
      return (unsigned int *)a4;
    }
    else {
      return (unsigned int *)a3;
    }
  }
  unsigned int v8 = *(unsigned __int16 *)(*(void *)a2 + 48);
  if (v8 == 4)
  {
    uint64_t v9 = *(void *)(*(void *)a2 + 16);
    if (v9) {
      LODWORD(v9) = (*(_DWORD *)(v9 + 24) < 0xFu) & (0x5060u >> *(_DWORD *)(v9 + 24));
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  int v18 = (_DWORD *)a3;
  if (v9 != ((v8 >> 3) & 1)) {
    int v18 = ContentIndexDocSetNotLazy(a3, *(float *)(a2 + 72));
  }
  uint64_t v19 = *(void *)(a2 + 8);
  unsigned int v20 = *(unsigned __int16 *)(v19 + 48);
  if (v20 == 4)
  {
    uint64_t v21 = *(void *)(v19 + 16);
    if (v21) {
      LODWORD(v21) = (*(_DWORD *)(v21 + 24) < 0xFu) & (0x5060u >> *(_DWORD *)(v21 + 24));
    }
  }
  else
  {
    LODWORD(v21) = 0;
  }
  uint64_t v22 = (unsigned int *)a4;
  if (v21 != ((v20 >> 3) & 1)) {
    uint64_t v22 = ContentIndexDocSetNotLazy(a4, *(float *)(a2 + 72));
  }
  if (v18 != (_DWORD *)a3) {
    ContentIndexDocSetDispose(a3);
  }
  if (v22 != (unsigned int *)a4) {
    ContentIndexDocSetDispose(a4);
  }
  if (v18)
  {
    if (v18[12] == 1 && (*(_WORD *)(a2 + 48) & 8) != 0)
    {
      uint64_t v23 = *(void *)(*(void *)a2 + 16);
      if (v23)
      {
        if ((*(unsigned char *)(v23 + 33) & 8) != 0)
        {
          ContentIndexDocSetDispose((uint64_t)v18);
          int v18 = 0;
        }
      }
    }
  }
  if (v22)
  {
    if (v22[12] != 1
      || (*(_WORD *)(a2 + 48) & 8) == 0
      || (uint64_t v24 = *(void *)(*(void *)(a2 + 8) + 16)) == 0
      || (*(unsigned char *)(v24 + 33) & 8) == 0)
    {
      if (!v18) {
        return v22;
      }
      *(void *)long long buf = v18;
      uint64_t v50 = (uint64_t)v22;
      int v25 = ContentIndexDocSetUnionLazy(2, (uint64_t *)buf, *(float *)(a2 + 72));
      ContentIndexDocSetDispose((uint64_t)v18);
      ContentIndexDocSetDispose((uint64_t)v22);
      return (unsigned int *)v25;
    }
    uint64_t v36 = (uint64_t)v22;
LABEL_66:
    ContentIndexDocSetDispose(v36);
  }
  return v18;
}

void ContentIndexDocSetDispose(uint64_t a1)
{
  if (a1 && atomic_fetch_add((atomic_uint *volatile)a1, 0xFFFFFFFF) == 1)
  {
    switch(*(_DWORD *)(a1 + 48))
    {
      case 1:
      case 2:
      case 4:
      case 5:
      case 6:
      case 7:
        goto LABEL_4;
      case 3:
        uint64_t v8 = *(void *)(a1 + 64);
        if (!v8) {
          goto LABEL_17;
        }
        free(*(void **)(v8 + 240));
        free(*(void **)(v8 + 176));
        uint64_t v9 = *(void **)(v8 + 128);
        if (v9) {
          free(v9);
        }
        uint64_t v10 = *(const void **)(v8 + 88);
        if (v10) {
          CFRelease(v10);
        }
        uint64_t v11 = *(const void **)(v8 + 96);
        if (v11) {
          CFRelease(v11);
        }
        uint64_t v12 = *(void *)(v8 + 72);
        if (v12)
        {
          ReleaseEmbeddingDistances(v12);
          *(void *)(v8 + 72) = 0;
        }
        int v7 = *(void **)(a1 + 64);
LABEL_16:
        free(v7);
LABEL_17:
        free((void *)a1);
        break;
      case 8:
        uint64_t v13 = *(void *)(a1 + 64);
        if (v13)
        {
          unsigned int v14 = *(const void **)(v13 + 96);
          if (v14) {
            instr_release(v14);
          }
          uint64_t v15 = *(void *)(v13 + 216);
          if (*(unsigned char *)(v13 + 192))
          {
            if (v15 >= 2)
            {
              uint64_t v16 = 1;
              uint64_t v17 = 32;
              do
              {
                CFRelease(*(CFTypeRef *)(*(void *)(v13 + 200) + v17));
                ++v16;
                v17 += 24;
              }
              while (*(void *)(v13 + 216) > v16);
            }
          }
          else if (v15 >= 2)
          {
            uint64_t v32 = 1;
            uint64_t v33 = 24;
            do
            {
              CFRelease(*(CFTypeRef *)(*(void *)(v13 + 200) + v33));
              ++v32;
              v33 += 16;
            }
            while (*(void *)(v13 + 216) > v32);
          }
          free(*(void **)(v13 + 200));
          uint64_t v34 = v13 + 128;
          if (*(unsigned char *)(v13 + 120)) {
            oqdispose_PositionOffsetWithMeta_t(v34);
          }
          else {
            oqdispose_JustPositionOffset_t(v34);
          }
          unint64_t v38 = *(const void **)(v13 + 88);
          if (v38) {
            CFRelease(v38);
          }
          int v39 = *(void **)(v13 + 224);
          *(void *)(v13 + 224) = 0;
          if (v39)
          {
            if (*(uint64_t *)v39 >= 1)
            {
              uint64_t v40 = 0;
              uint64_t v41 = 32;
              do
              {
                CFRelease(*(CFTypeRef *)(*((void *)v39 + 2) + v41));
                ++v40;
                v41 += 40;
              }
              while (*(void *)v39 > v40);
            }
            free(*((void **)v39 + 2));
            free(v39);
          }
          uint64_t v42 = *(void **)(v13 + 232);
          *(void *)(v13 + 232) = 0;
          if (v42)
          {
            if (*(uint64_t *)v42 >= 1)
            {
              uint64_t v43 = 0;
              uint64_t v44 = 32;
              do
              {
                CFRelease(*(CFTypeRef *)(*((void *)v42 + 2) + v44));
                ++v43;
                v44 += 40;
              }
              while (*(void *)v42 > v43);
            }
            free(*((void **)v42 + 2));
            free(v42);
          }
          uint64_t v45 = *(void ***)(v13 + 72);
          if (v45 && *(unsigned char *)(v13 + 65))
          {
            free(*v45);
            free(*(void **)(v13 + 72));
            *(void *)(v13 + 72) = 0;
          }
          free(*(void **)(a1 + 64));
        }
        uint64_t v46 = *(void *)(a1 + 72);
        if (v46)
        {
          os_log_type_t v47 = *(const void **)(v46 + 24);
          if (v47) {
            instr_release(v47);
          }
          if (*(uint64_t *)(v46 + 136) > 1)
          {
            uint64_t v48 = 1;
            uint64_t v49 = 64;
            do
            {
              CFRelease(*(CFTypeRef *)(*(void *)(v46 + 120) + v49));
              ++v48;
              v49 += 56;
            }
            while (*(void *)(v46 + 136) > v48);
          }
          free(*(void **)(v46 + 120));
          if (*(uint64_t *)(v46 + 80) >= 1)
          {
            uint64_t v50 = 0;
            uint64_t v51 = 8;
            do
            {
              CFRelease(*(CFTypeRef *)(*(void *)(v46 + 64) + v51));
              ++v50;
              v51 += 56;
            }
            while (v50 < *(void *)(v46 + 80));
          }
          if (*(_DWORD *)(v46 + 104))
          {
            uint64_t v52 = *(void *)(v46 + 88);
            if (v52 < *(void *)(v46 + 96))
            {
              uint64_t v53 = 56 * v52 + 8;
              do
              {
                CFRelease(*(CFTypeRef *)(*(void *)(v46 + 64) + v53));
                ++v52;
                v53 += 56;
              }
              while (v52 < *(void *)(v46 + 96));
            }
          }
          free(*(void **)(v46 + 64));
          BOOL v54 = *(void **)(v46 + 176);
          if (v54 && *(int *)(v46 + 188) >= 1)
          {
            uint64_t v55 = 0;
            uint64_t v56 = 8;
            do
            {
              CFRelease(*(CFTypeRef *)(*(void *)(v46 + 176) + v56));
              ++v55;
              v56 += 56;
            }
            while (v55 < *(int *)(v46 + 188));
            BOOL v54 = *(void **)(v46 + 176);
          }
          free(v54);
          unint64_t v57 = *(void **)(v46 + 160);
          if (v57)
          {
            unint64_t v58 = *(unsigned int *)(v46 + 168);
            if (v58)
            {
              for (unint64_t i = 0; i < v58; ++i)
              {
                __int16 v60 = *(const void **)(*(void *)(v46 + 160) + 8 * i);
                if (v60)
                {
                  CFRelease(v60);
                  unint64_t v58 = *(unsigned int *)(v46 + 168);
                }
              }
              unint64_t v57 = *(void **)(v46 + 160);
            }
          }
          free(v57);
          free(*(void **)(a1 + 72));
        }
        if (*(void *)(a1 + 80)) {
          (*(void (**)(void))(a1 + 96))();
        }
        if (*(void *)(a1 + 88)) {
          (*(void (**)(void))(a1 + 96))();
        }
        goto LABEL_17;
      case 9:
        uint64_t v18 = *(void *)(a1 + 112);
        if (v18)
        {
          unint64_t v19 = *(unsigned int *)(v18 + 3348);
          if (v19)
          {
            unint64_t v20 = 0;
            uint64_t v21 = *(void *)(a1 + 112);
            uint64_t v64 = v21;
            do
            {
              uint64_t v22 = v18 + 392 * v20;
              uint64_t v23 = *(void *)(v22 + 408);
              if (*(_DWORD *)(v23 + 20))
              {
                unint64_t v24 = 0;
                int v25 = (uint64_t *)(v22 + 408);
                do
                {
                  uint64_t v26 = v21 + 4 * v24;
                  int v27 = *(_DWORD *)(v26 + 344);
                  if (v27)
                  {
                    uint64_t v28 = *(NSObject **)(v23 + 8 * v24 + 32);
                    uint64_t v29 = v21 + 8 * v24;
                    uint64_t v30 = *(void *)(v29 + 216);
                    char v31 = *(unsigned char *)(v23 + 19) ^ 1;
                    block[0] = MEMORY[0x1E4F143A8];
                    block[1] = 0x40000000;
                    block[2] = ___innerIssueBuffer_block_invoke;
                    block[3] = &__block_descriptor_tmp_63_10839;
                    int v66 = v27;
                    block[4] = 0;
                    block[5] = v30;
                    char v67 = v31;
                    block[6] = 0;
                    dispatch_async(v28, block);
                    *(_DWORD *)(v26 + 344) = 0;
                    *(void *)(v29 + 216) = 0;
                    uint64_t v23 = *v25;
                  }
                  ++v24;
                }
                while (v24 < *(unsigned int *)(v23 + 20));
                uint64_t v18 = v64;
                unint64_t v19 = *(unsigned int *)(v64 + 3348);
              }
              ++v20;
              v21 += 392;
            }
            while (v20 < v19);
          }
          else
          {
            syncFileState1(v18 + 24, 0);
          }
          if (*(_DWORD *)(v18 + 3180))
          {
            unint64_t v35 = 0;
            do
              dispatch_barrier_sync(*(dispatch_queue_t *)(v18 + 3192 + 8 * v35++), &__block_literal_global_66);
            while (v35 < *(unsigned int *)(v18 + 3180));
          }
          dispatch_barrier_sync(*(dispatch_queue_t *)(v18 + 3184), &__block_literal_global_69_10835);
          free(*(void **)v18);
          if (*(_DWORD *)(v18 + 3348))
          {
            unint64_t v36 = 0;
            int v37 = (void **)(v18 + 24);
            do
            {
              free(*v37);
              ++v36;
              v37 += 49;
            }
            while (v36 < *(unsigned int *)(v18 + 3348));
          }
          else
          {
            free(*(void **)(v18 + 24));
          }
          if (*(_DWORD *)(v18 + 3180))
          {
            unint64_t v61 = 0;
            do
              dispatch_release(*(dispatch_object_t *)(v18 + 3192 + 8 * v61++));
            while (v61 < *(unsigned int *)(v18 + 3180));
          }
          dispatch_release(*(dispatch_object_t *)(v18 + 3184));
          dispatch_release(*(dispatch_object_t *)(v18 + 3320));
          free((void *)v18);
        }
        if ((*(_DWORD *)(a1 + 128) & 0x7FFFFFFF) != 0)
        {
          unint64_t v62 = 0;
          do
            ContentIndexDocSetDispose(*(void *)(*(void *)(a1 + 120) + 8 * v62++));
          while (v62 < (*(_DWORD *)(a1 + 128) & 0x7FFFFFFFu));
        }
        uint64_t v63 = *(void **)(a1 + 120);
        if (v63 != (void *)-1) {
          free(v63);
        }
LABEL_4:
        uint64_t v2 = *(const void **)(a1 + 80);
        if (v2) {
          CFRelease(v2);
        }
        uint64_t v3 = *(const void **)(a1 + 104);
        if (v3) {
          CFRelease(v3);
        }
        int v4 = *(const void **)(a1 + 88);
        if (v4) {
          CFRelease(v4);
        }
        uint64_t v5 = *(void **)(a1 + 136);
        if (v5) {
          free(v5);
        }
        if (*(_DWORD *)(a1 + 96))
        {
          unint64_t v6 = 0;
          do
            ContentIndexDocSetDispose(*(void *)(*(void *)(a1 + 72) + 8 * v6++));
          while (v6 < *(unsigned int *)(a1 + 96));
        }
        int v7 = *(void **)(a1 + 72);
        goto LABEL_16;
      default:
        goto LABEL_17;
    }
  }
}

atomic_uint *ContentIndexDocSetIntersectionLazy(uint64_t a1, atomic_uint **a2, float a3)
{
  int v4 = a2;
  uint64_t v5 = a1;
  if (a1 < 1)
  {
    uint64_t v9 = 0;
    char v8 = 0;
    uint64_t v7 = 0;
    unsigned int v6 = 0;
  }
  else
  {
    unsigned int v6 = 0;
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = a2;
    uint64_t v11 = a1;
    do
    {
      uint64_t v12 = *v10;
      atomic_uint v13 = (*v10)[12];
      if ((v13 | 2) == 2)
      {
        if (!v13) {
          ++v7;
        }
        float v14 = *((float *)v12 + 5);
        if (v14 == 1.0)
        {
          float v14 = *((float *)v12 + 4);
          if (v14 == 0.0) {
            float v14 = 1.0;
          }
        }
        a3 = v14 + a3;
        char v8 = 1;
      }
      if (v13 == 1)
      {
        float v15 = *((float *)v12 + 5);
        if (v15 == 1.0)
        {
          float v15 = *((float *)v12 + 3);
          if (v15 == 0.0) {
            float v15 = 1.0;
          }
        }
        ++v9;
        a3 = v15 + a3;
      }
      v6 |= v12[13];
      ++v10;
      --v11;
    }
    while (v11);
  }
  if (v9 == a1)
  {
    uint64_t v16 = *a2;
LABEL_21:
    unsigned __int32 v17 = v16[13];
    if (v17 <= v6) {
      unsigned __int32 v17 = v6;
    }
    v16[13] = v17;
    *((float *)v16 + 5) = a3;
    atomic_fetch_add(v16, 1u);
    return v16;
  }
  uint64_t v16 = *a2;
  if (v7 == a1) {
    goto LABEL_21;
  }
  if (v8) {
    int v18 = 2;
  }
  else {
    int v18 = 5;
  }
  unint64_t v19 = (size_t *)MEMORY[0x1E4F14B00];
  if (*MEMORY[0x1E4F14B00] <= 0x97uLL) {
    ++sTotal_5091;
  }
  uint64_t v20 = *((void *)v16 + 7);
  uint64_t v21 = (unsigned int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x98uLL, 0x31F9A007uLL);
  if (!v21 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    v31[0] = 0;
    _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)v31, 2u);
  }
  atomic_store(1u, v21);
  v21[1] = -1073627135;
  *((void *)v21 + 7) = v20;
  *((void *)v21 + 5) = -1;
  v21[12] = v18;
  v21[13] = v6;
  size_t v22 = 8 * v5;
  if (!((unint64_t)v5 >> 14) && *v19 < v22) {
    ++sTotal_5091;
  }
  uint64_t v23 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v22, 0x31F9A007uLL);
  if (!v23 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
  }
  *((void *)v21 + 9) = v23;
  if (v5 >= 1)
  {
    unint64_t v24 = 0;
    do
    {
      int v25 = *v4;
      if (v24 != *v4)
      {
        if (v25)
        {
          if (v25[12] >= 2)
          {
            atomic_fetch_add(v25, 1u);
            uint64_t v26 = *((void *)v21 + 9);
            uint64_t v27 = v21[24];
            v21[24] = v27 + 1;
            *(void *)(v26 + 8 * v27) = v25;
          }
          unint64_t v24 = *v4;
        }
        else
        {
          unint64_t v24 = 0;
        }
      }
      ++v4;
      --v5;
    }
    while (v5);
  }
  if (v21[24] == 1)
  {
    uint64_t v28 = **((void **)v21 + 9);
    unsigned int v29 = *(_DWORD *)(v28 + 52);
    if (v29 <= v6) {
      unsigned int v29 = v6;
    }
    *(_DWORD *)(v28 + 52) = v29;
    uint64_t v16 = (atomic_uint *)**((void **)v21 + 9);
    if (v16) {
      atomic_fetch_add(v16, 1u);
    }
    ContentIndexDocSetDispose((uint64_t)v21);
  }
  else
  {
    uint64_t v16 = (atomic_uint *)v21;
  }
  *((float *)v16 + 5) = a3;
  return v16;
}

void ContentIndexDocSetContextRelease(void *a1)
{
  if (atomic_fetch_add((atomic_uint *volatile)a1, 0xFFFFFFFF) == 1)
  {
    uint64_t v2 = (atomic_uint **)a1[2];
    if (v2)
    {
      fd_release(v2[561]);
      free(v2);
    }
    uint64_t v3 = (atomic_uint **)a1[1];
    if (v3)
    {
      fd_release(v3[561]);
      free(v3);
    }
    int v4 = (pthread_rwlock_t *)a1[3];
    if (v4) {
      posreadunlock(v4);
    }
    free(a1);
  }
}

void fd_release(atomic_uint *a1)
{
  if (a1 && atomic_fetch_add_explicit(a1 + 8, 0xFFFFFFFF, memory_order_relaxed) == 1)
  {
    if (*a1 != -50529037)
    {
      uint64_t v3 = __si_assert_copy_extra_625(-1);
      int v4 = v3;
      uint64_t v5 = "";
      if (v3) {
        uint64_t v5 = v3;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 483, "obj->_magic==(0xFCFCFCF3)", v5);
      free(v4);
      if (__valid_fs(-1)) {
        uint64_t v6 = 2989;
      }
      else {
        uint64_t v6 = 3072;
      }
      *(_DWORD *)uint64_t v6 = -559038737;
      abort();
    }
    uint64_t v7 = 0;
    pthread_mutex_lock(&g_fd_lock);
    int v2 = _fd_remove_locked((uint64_t)a1, &v7);
    pthread_mutex_unlock(&g_fd_lock);
    if (v2 != -1) {
      guarded_close_np();
    }
    *a1 = 0;
    free(*((void **)a1 + 9));
    if (*((void *)a1 + 10)) {
      fd_release();
    }
    free(a1);
  }
}

unsigned int *ContentIndexDocSetExceptLazy(uint64_t a1, atomic_uint *a2, float a3)
{
  int v4 = *(_DWORD *)(a1 + 48);
  if (!v4) {
    goto LABEL_6;
  }
  atomic_uint v6 = a2[12];
  if (!v6) {
    goto LABEL_6;
  }
  atomic_uint v7 = a2[13];
  int v8 = v7 | *(_DWORD *)(a1 + 52);
  if (v6 == 1)
  {
    if (v7)
    {
      *(_DWORD *)(a1 + 52) = v8;
LABEL_6:
      atomic_fetch_add((atomic_uint *volatile)a1, 1u);
      return (unsigned int *)a1;
    }
    if (*MEMORY[0x1E4F14B00] <= 0x97uLL) {
      ++sTotal_5091;
    }
    uint64_t v18 = *(void *)(a1 + 56);
    unsigned int v19 = *(_DWORD *)(a1 + 16);
    uint64_t v9 = (unsigned int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x98uLL, 0x31F9A007uLL);
    if (!v9 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      v20[0] = 0;
      _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)v20, 2u);
    }
    atomic_store(1u, v9);
    v9[1] = -1073627135;
    *((void *)v9 + 7) = v18;
    v9[12] = 0;
    *((void *)v9 + 5) = -1;
    void v9[5] = v19;
  }
  else if (v4 == 1)
  {
    uint64_t v9 = ContentIndexDocSetNotLazy((uint64_t)a2, a3);
    v9[13] = v8;
  }
  else
  {
    uint64_t v11 = (void *)MEMORY[0x1E4F14B00];
    if (*MEMORY[0x1E4F14B00] <= 0x97uLL) {
      ++sTotal_5091;
    }
    uint64_t v12 = *(void *)(a1 + 56);
    uint64_t v9 = (unsigned int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x98uLL, 0x31F9A007uLL);
    if (!v9 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
    }
    atomic_store(1u, v9);
    v9[1] = -1073627135;
    *((void *)v9 + 7) = v12;
    *((void *)v9 + 5) = -1;
    v9[12] = 7;
    v9[13] = v8;
    if (*v11 <= 0xFuLL) {
      ++sTotal_5091;
    }
    atomic_uint v13 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x10uLL, 0x31F9A007uLL);
    if (!v13 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)size_t v22 = 0;
      _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", v22, 2u);
    }
    *((void *)v9 + 9) = v13;
    atomic_fetch_add((atomic_uint *volatile)a1, 1u);
    uint64_t v14 = *((void *)v9 + 9);
    uint64_t v15 = v9[24];
    v9[24] = v15 + 1;
    *(void *)(v14 + 8 * v15) = a1;
    atomic_fetch_add(a2, 1u);
    uint64_t v16 = *((void *)v9 + 9);
    uint64_t v17 = v9[24];
    v9[24] = v17 + 1;
    *(void *)(v16 + 8 * v17) = a2;
  }
  return v9;
}

uint64_t db_string_table_rdlock(_DWORD *a1)
{
  if (*a1 != 1685287992)
  {
    int v2 = __si_assert_copy_extra_329();
    uint64_t v3 = v2;
    if (v2) {
      int v4 = v2;
    }
    else {
      int v4 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 478, v4);
    free(v3);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  return db2_string_table_rdlock((uint64_t)a1);
}

unsigned int *ContentIndexDocSetNotLazy(uint64_t a1, float a2)
{
  if (a2 == 0.0) {
    a2 = 1.0;
  }
  if (!a1) {
    goto LABEL_6;
  }
  int v3 = *(_DWORD *)(a1 + 48);
  if (v3 == 1)
  {
    if (*MEMORY[0x1E4F14B00] <= 0x97uLL) {
      ++sTotal_5091;
    }
    uint64_t v8 = *(void *)(a1 + 56);
    float v6 = *(float *)(a1 + 16);
    atomic_uint v7 = (unsigned int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x98uLL, 0x31F9A007uLL);
    if (!v7 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
    }
    atomic_store(1u, v7);
    v7[1] = -1073627135;
    *((void *)v7 + 7) = v8;
    v7[12] = 0;
    goto LABEL_18;
  }
  if (!v3)
  {
LABEL_6:
    float v4 = *(float *)(a1 + 20) * *(float *)(a1 + 12);
    if (*MEMORY[0x1E4F14B00] <= 0x97uLL) {
      ++sTotal_5091;
    }
    uint64_t v5 = *(void *)(a1 + 56);
    float v6 = v4 * a2;
    atomic_uint v7 = (unsigned int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x98uLL, 0x31F9A007uLL);
    if (!v7 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)atomic_uint v13 = 0;
      _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", v13, 2u);
    }
    atomic_store(1u, v7);
    v7[1] = -1073627135;
    *((void *)v7 + 7) = v5;
    v7[12] = 1;
LABEL_18:
    *((void *)v7 + 5) = -1;
    *((float *)v7 + 5) = v6;
    return v7;
  }
  uint64_t v9 = (void *)MEMORY[0x1E4F14B00];
  if (*MEMORY[0x1E4F14B00] <= 0x97uLL) {
    ++sTotal_5091;
  }
  uint64_t v10 = *(void *)(a1 + 56);
  atomic_uint v7 = (unsigned int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x98uLL, 0x31F9A007uLL);
  if (!v7 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t v15 = 0;
    _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", v15, 2u);
  }
  atomic_store(1u, v7);
  v7[1] = -1073627135;
  *((void *)v7 + 7) = v10;
  v7[12] = 6;
  *((void *)v7 + 5) = -1;
  v7[13] = *(_DWORD *)(a1 + 52);
  v7[24] = 1;
  if (*v9 <= 7uLL) {
    ++sTotal_5091;
  }
  uint64_t v11 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 8uLL, 0x31F9A007uLL);
  if (!v11 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t v16 = 0;
    _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", v16, 2u);
  }
  *((void *)v7 + 9) = v11;
  atomic_fetch_add((atomic_uint *volatile)a1, 1u);
  **((void **)v7 + 9) = a1;
  return v7;
}

_DWORD *data_map_id_insert(_DWORD *result, char *a2, unint64_t a3)
{
  if (result)
  {
    int v5 = result[54];
    switch(v5)
    {
      case -270471200:
        int v6 = result[55];
        return (_DWORD *)_data_map_ext_get_data_id((uint64_t)result, v6, a2, a3, 1);
      case 1684300900:
        unsigned int v7 = result[55];
        return (_DWORD *)_data_map64_get_data_id((uint64_t)result, v7, a2, a3, 1);
      case 842150450:
        return (_DWORD *)_data_map32_get_data_id((uint64_t)result, result[311], a2, a3, 1);
      default:
        return 0;
    }
  }
  return result;
}

uint64_t getUniquedDBFValue(unint64_t a1, int a2, _DWORD *a3, int a4)
{
  v24[1] = *MEMORY[0x1E4F143B8];
  size_t v8 = a3[2];
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0x1FFFFFFF0);
  bzero(v10, v9);
  if (a2 == 4)
  {
    unsigned int v11 = a3[1];
    if (v11 >> 28) {
      int v12 = 5;
    }
    else {
      int v12 = 4;
    }
    if (v11 >= 0x200000) {
      int v13 = v12;
    }
    else {
      int v13 = 3;
    }
    if (v11 >= 0x4000) {
      int v14 = v13;
    }
    else {
      int v14 = 2;
    }
    if (v11 >= 0x80) {
      int v15 = v14;
    }
    else {
      int v15 = 1;
    }
    unsigned int v16 = v15 + v8;
    if (v16 >> 28)
    {
      unsigned char *v10 = -16;
      *(_DWORD *)(v10 + 1) = v16;
      uint64_t v17 = 5;
    }
    else if ((v16 & 0xFE00000) != 0)
    {
      unsigned char *v10 = HIBYTE(v16) | 0xE0;
      v10[1] = BYTE2(v16);
      v10[2] = BYTE1(v16);
      v10[3] = v16;
      uint64_t v17 = 4;
    }
    else if ((v16 & 0x1FC000) != 0)
    {
      unsigned char *v10 = BYTE2(v16) | 0xC0;
      v10[1] = BYTE1(v16);
      v10[2] = v16;
      uint64_t v17 = 3;
    }
    else if ((v16 & 0x3F80) != 0)
    {
      unsigned char *v10 = BYTE1(v16) | 0x80;
      v10[1] = v16;
      uint64_t v17 = 2;
    }
    else
    {
      unsigned char *v10 = v16;
      uint64_t v17 = 1;
    }
    if (v11 >> 28)
    {
      uint64_t v20 = &v10[v17];
      *uint64_t v20 = -16;
      *(_DWORD *)(v20 + 1) = v11;
      uint64_t v18 = v17 + 5;
    }
    else if ((v11 & 0xFE00000) != 0)
    {
      unsigned int v19 = &v10[v17];
      *unsigned int v19 = HIBYTE(v11) | 0xE0;
      v19[1] = BYTE2(v11);
      v19[2] = BYTE1(v11);
      uint64_t v18 = v17 + 4;
      v19[3] = v11;
    }
    else if ((v11 & 0x1FC000) != 0)
    {
      size_t v22 = &v10[v17];
      *size_t v22 = BYTE2(v11) | 0xC0;
      v22[1] = BYTE1(v11);
      uint64_t v18 = v17 + 3;
      v22[2] = v11;
    }
    else if ((v11 & 0x3F80) != 0)
    {
      uint64_t v23 = &v10[v17];
      *uint64_t v23 = BYTE1(v11) | 0x80;
      uint64_t v18 = v17 + 2;
      v23[1] = v11;
    }
    else
    {
      uint64_t v18 = v17 + 1;
      v10[v17] = v11;
    }
  }
  else if (v8 >> 28)
  {
    unsigned char *v10 = -16;
    *(_DWORD *)(v10 + 1) = v8;
    uint64_t v18 = 5;
  }
  else if ((v8 & 0xFE00000) != 0)
  {
    unsigned char *v10 = BYTE3(v8) | 0xE0;
    v10[1] = BYTE2(v8);
    v10[2] = BYTE1(v8);
    v10[3] = v8;
    uint64_t v18 = 4;
  }
  else if ((v8 & 0x1FC000) != 0)
  {
    unsigned char *v10 = BYTE2(v8) | 0xC0;
    v10[1] = BYTE1(v8);
    v10[2] = v8;
    uint64_t v18 = 3;
  }
  else if ((v8 & 0x3F80) != 0)
  {
    unsigned char *v10 = BYTE1(v8) | 0x80;
    v10[1] = v8;
    uint64_t v18 = 2;
  }
  else
  {
    unsigned char *v10 = v8;
    uint64_t v18 = 1;
  }
  memcpy(&v10[v18], (char *)a3 + 13, v8);
  return _get_id_for_string(a1, a2, v10, (int)v8 + (int)v18, a4, 0);
}

uint64_t db_add_field(int *a1, char **a2, unsigned int a3, char *a4, uint64_t a5, unsigned int a6, int a7, unsigned __int8 *a8, __n128 a9, int a10)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*a1 != 1685287992)
  {
    int v12 = *__error();
    int v13 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v14 = *a1;
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "db_add_field";
      __int16 v19 = 1024;
      int v20 = 341;
      __int16 v21 = 1024;
      int v22 = v14;
      _os_log_error_impl(&dword_1BD672000, v13, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v12;
    int v15 = __si_assert_copy_extra_329();
    unsigned int v16 = v15;
    if (v15) {
      uint64_t v17 = v15;
    }
    else {
      uint64_t v17 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 341, v17);
    free(v16);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  *(void *)long long buf = 0;
  return db2_add_field_with_cache((unint64_t)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, buf);
}

uint64_t db2_add_field_with_cache(unint64_t a1, char **a2, unsigned int a3, char *__s, uint64_t a5, unsigned int a6, int a7, unsigned __int8 *a8, __n128 a9, int a10, void *a11)
{
  v177[3] = *MEMORY[0x1E4F143B8];
  int v166 = 0;
  unsigned int v11 = *a2;
  uint64_t v165 = 0;
  unsigned int v12 = *(_DWORD *)(a1 + 804);
  if ((v12 & 8) != 0) {
    return 13;
  }
  unint64_t v167 = 0;
  if ((a7 - 15) <= 0xFFFFFFF1)
  {
    int v14 = *__error();
    int v15 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      *(void *)uint64_t v172 = "db2_add_field_with_cache";
      *(_WORD *)&v172[8] = 1024;
      LODWORD(v173) = 13537;
      WORD2(v173) = 1024;
      *(_DWORD *)((char *)&v173 + 6) = a7;
      _os_log_error_impl(&dword_1BD672000, v15, OS_LOG_TYPE_ERROR, "%s:%d: Field type %d out of bounds", buf, 0x18u);
    }
    *__error() = v14;
    return 22;
  }
  unsigned int v18 = a6;
  int v19 = a5;
  if ((a5 + 1) > 1 || __s && *__s)
  {
    BOOL v24 = (~a6 & 0x5020) == 0 && a7 == 14;
    if ((a6 & 0x10) == 0 && v24) {
      return 22;
    }
    os_log_type_t v163 = v11;
    if (v24)
    {
      uint64_t v16 = 0;
      int v25 = *(unsigned __int8 *)(a1 + 989);
      if (*(unsigned char *)(a1 + 989)) {
        return v16;
      }
      unsigned int v11 = v163;
    }
    else
    {
      int v25 = a7 == 11;
      if (a7 != 11 && (a6 & 0x10) != 0) {
        return 22;
      }
    }
    if ((a6 & 0x80) != 0)
    {
      if (a10 <= 60000)
      {
LABEL_32:
        if ((*((_DWORD *)v11 + 3) + a10) > 0xFFDE) {
          return 7;
        }
        LODWORD(v161) = 0;
        unint64_t v149 = a1 + 324;
        uint64_t v153 = a11;
        int v156 = (16 * a3) & 0x20;
        unsigned int v155 = (a3 >> 3) & 2 | 1;
        if ((a3 & 4) != 0) {
          int v25 = 0;
        }
        int v158 = v25;
        int v154 = (v12 >> 2) & 1;
        a9.n128_u64[0] = 136316930;
        __n128 v148 = a9;
        a9.n128_u64[0] = 136315906;
        __n128 v150 = a9;
        uint64_t v151 = a10;
        unint64_t v160 = a10;
        uint64_t v28 = a8;
        uint64_t v164 = a5;
        unsigned int v157 = a3;
        uint64_t v152 = a8;
        while (1)
        {
          uint64_t v170 = v164;
          v169[0] = 0;
          v169[1] = 0;
          if (v19) {
            break;
          }
          if (!__s) {
            return 28;
          }
          unint64_t v35 = (uint64_t *)internal_copy_field_ids(a1, __s, (uint64_t)v169, 4uLL, 0);
          v18 |= v156;
          *(_WORD *)long long buf = ldbFlagsForTypeAndFieldFlags((unsigned __int16)a7, (unsigned __int16)v18, v154);
          int v36 = strlen(__s);
          uint64_t id_for_string = _get_id_for_string(a1, 0, __s, v36, v155, buf);
          if (id_for_string == -1)
          {
            if (v35 != v169) {
              free(v35);
            }
            return 28;
          }
          uint64_t v38 = id_for_string;
          if (v35) {
            goto LABEL_77;
          }
          LODWORD(v170) = id_for_string;
LABEL_76:
          unint64_t v35 = &v170;
LABEL_77:
          unsigned int v47 = v18;
LABEL_78:
          if ((v47 & 0xA0) == 0x80)
          {
            uint64_t v132 = __si_assert_copy_extra_2445(0, -1);
            unint64_t v125 = v132;
            uint64_t v133 = "";
            if (v132) {
              uint64_t v133 = v132;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 13617, "field_flags & DB_FIELD_ARRAY_VAL", v133);
            goto LABEL_218;
          }
          if (v38 >= 0xFFFFFFFE)
          {
            CFAbsoluteTime v124 = __si_assert_copy_extra_2445(0, -1);
            unint64_t v125 = v124;
            double v126 = "";
            if (v124) {
              double v126 = v124;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 13622, "(db_uint32_t)name_id!=((db_uint32_t)~0) && (db_uint32_t)name_id!=((db_uint32_t)-2)", v126);
LABEL_218:
            free(v125);
            if (__valid_fs(-1)) {
              goto LABEL_219;
            }
            uint64_t v136 = 3072;
LABEL_221:
            *(_DWORD *)uint64_t v136 = -559038737;
            abort();
          }
          unsigned int v159 = v35;
          uint64_t v164 = v38;
          LODWORD(v162) = v47;
          if (!v158)
          {
            int v65 = 0;
            if ((v157 & 4) != 0)
            {
              uint64_t v51 = v152;
              size_t v56 = (size_t)v163;
            }
            else
            {
              size_t v56 = (size_t)v163;
              if (a7 == 14 && (v47 & 0x5030) == 0x5030)
              {
                uint64_t v66 = _os_feature_enabled_impl();
                if (v66)
                {
                  unsigned int v67 = *v152;
                  unsigned int v68 = v152[1];
                  if (v67 > 2
                    || v68 > 2
                    || (uint64_t v69 = (vector_dimension_vec_sizes_12485[v152[1]]
                                           * vector_size_elem_sizes_12484[*v152]),
                        v69 == -1))
                  {
                    int v97 = *__error();
                    double v98 = _SILogForLogForCategory(7);
                    if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)long long buf = v150.n128_u32[0];
                      *(void *)uint64_t v172 = "db2_add_field_with_cache";
                      *(_WORD *)&v172[8] = 1024;
                      LODWORD(v173) = 13683;
                      WORD2(v173) = 1024;
                      *(_DWORD *)((char *)&v173 + 6) = v67;
                      WORD5(v173) = 1024;
                      HIDWORD(v173) = v68;
                      _os_log_error_impl(&dword_1BD672000, v98, OS_LOG_TYPE_ERROR, "%s:%d: Invalid data type and dimensions. data_type: %hhu dim: %hhu ", buf, 0x1Eu);
                    }
                    *__error() = v97;
                  }
                  else
                  {
                    int v70 = v151;
                    uint64_t v71 = ((int)v151 - 2) / v69;
                    size_t v72 = 8 * v71;
                    if (v71 >= 0x801)
                    {
                      int v73 = *__error();
                      uint64_t v74 = _SILogForLogForCategory(7);
                      if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)long long buf = 136315650;
                        *(void *)uint64_t v172 = "db2_add_field_with_cache";
                        *(_WORD *)&v172[8] = 1024;
                        LODWORD(v173) = 13691;
                        WORD2(v173) = 2048;
                        *(void *)((char *)&v173 + 6) = 8 * v71;
                        _os_log_error_impl(&dword_1BD672000, v74, OS_LOG_TYPE_ERROR, "%s:%d: Stack allocation of size %zu exceeds limit", buf, 0x1Cu);
                      }
                      *__error() = v73;
                      uint64_t v16 = 7;
                      goto LABEL_163;
                    }
                    MEMORY[0x1F4188790](v66);
                    int v115 = (char *)&v146 - ((v72 + 15) & 0xFFFFFFFF0);
                    bzero(v115, v72);
                    unint64_t v116 = v152;
                    if (v70 < 5)
                    {
LABEL_196:
                      int v65 = 0;
                      int v75 = 8 * v71;
                      size_t v56 = (size_t)v163;
                      uint64_t v51 = (unsigned __int8 *)v115;
                      goto LABEL_131;
                    }
                    uint64_t v117 = 0;
                    unint64_t v118 = (char *)(v152 + 4);
                    os_log_t v161 = (os_log_t)(8 * v71);
                    unint64_t v160 = (unint64_t)&v152[(int)v151];
                    while (1)
                    {
                      uint64_t v119 = _get_id_for_string(a1, 5, v118, v69, -2147483647, v116);
                      uint64_t v120 = v119;
                      if ((unint64_t)(v119 - 4294967294) < 2 || v119 == 0) {
                        break;
                      }
                      *(Class *)((char *)&v117->isa + (void)v115) = (Class)v119;
                      if (v161 == v117)
                      {
                        uint64_t v51 = (unsigned __int8 *)v115;
                        int v65 = 0;
                        int v75 = 8 * v71;
                        size_t v56 = (size_t)v163;
LABEL_131:
                        unsigned int v76 = v75;
                        size_t v77 = v75;
                        unint64_t v78 = v75 + 13;
                        char v79 = (char *)v56;
                        LODWORD(v56) = *(_DWORD *)(v56 + 8);
                        unsigned int v80 = *((_DWORD *)v79 + 3);
                        if (v78 > v56 - v80)
                        {
                          unsigned int v81 = v51;
                          unsigned int v82 = v56 + 2 * v78;
                          if (v82 >= 0x10000) {
                            size_t v56 = 0x10000;
                          }
                          else {
                            size_t v56 = v82;
                          }
                          char v79 = (char *)malloc_type_realloc(v79, v56, 0xA9D319B3uLL);
                          if (v79)
                          {
                            *((_DWORD *)v79 + 2) = v56;
                            *a2 = v79;
                            unsigned int v80 = *((_DWORD *)v79 + 3);
                            uint64_t v51 = v81;
                            goto LABEL_137;
                          }
                          uint64_t v16 = 12;
LABEL_157:
                          unint64_t v35 = v159;
                          if (!v65)
                          {
LABEL_173:
                            if (v35 != &v170 && v35 != v169) {
                              free(v35);
                            }
                            return v16;
                          }
LABEL_172:
                          free(v165);
                          goto LABEL_173;
                        }
LABEL_137:
                        size_t v83 = v79 + 48;
                        size_t v84 = (unsigned __int16 *)&v79[*v153 + 48];
                        uint64_t v85 = v80;
                        uint64_t v86 = v79;
                        uint64_t v87 = (unsigned __int16 *)&v79[v80];
                        if (v84 >= v87) {
                          goto LABEL_145;
                        }
                        if (*(_DWORD *)v159)
                        {
LABEL_139:
                          uint64_t v88 = (int *)v159 + 1;
                          int v89 = *(_DWORD *)v159;
                          while (*((_DWORD *)v84 + 1) != v89)
                          {
                            int v90 = *v88++;
                            int v89 = v90;
                            if (!v90)
                            {
                              size_t v84 = (unsigned __int16 *)((char *)v84 + *((unsigned int *)v84 + 2) + 13);
                              if (v84 >= v87) {
                                goto LABEL_145;
                              }
                              goto LABEL_139;
                            }
                          }
                          *uint64_t v153 = (char *)v84 - v83;
                          if ((v157 & 8) != 0
                            || (v157 & 1) != 0 && ((*(unsigned char *)(a1 + 804) & 4) != 0 || (v84[1] & 0xA00) != 0x200))
                          {
                            *size_t v84 = a7;
                            v84[1] = (unsigned __int16)v162;
                            uint64_t v99 = *((unsigned int *)v84 + 2);
                            int v100 = (char *)v84 + 13;
                            if (v76 <= v99)
                            {
                              memcpy((char *)v84 + 13, v51, v77);
                              int v104 = v76 - v99;
                              *((_DWORD *)v84 + 2) = v76;
                              memmove(&v100[v76], &v100[v99], (char *)v86 + v86[3] - &v100[v99]);
                              int v103 = v86[3];
                            }
                            else
                            {
                              uint64_t v101 = v51;
                              uint64_t v102 = &v100[v99];
                              int v103 = v76 - v99;
                              memmove(&v102[v103], v102, (char *)v87 - v102);
                              memcpy((char *)v84 + 13, v101, v77);
                              *((_DWORD *)v84 + 2) = v76;
                              int v104 = v86[3];
                            }
                            v86[3] = v104 + v103;
                            goto LABEL_170;
                          }
                          if ((v157 & 2) == 0)
                          {
                            uint64_t v16 = 17;
                            goto LABEL_157;
                          }
                          unsigned __int16 v105 = v84[1];
                          uint64_t v106 = *((unsigned int *)v84 + 2);
                          unsigned int v107 = v106 + v76;
                          unint64_t v35 = v159;
                          if ((v105 & 0x80) == 0)
                          {
                            if (v107 <= 0x4000) {
                              goto LABEL_178;
                            }
LABEL_186:
                            uint64_t v16 = 7;
                            if (!v65) {
                              goto LABEL_173;
                            }
                            goto LABEL_172;
                          }
                          if (v107 > 0xEA60) {
                            goto LABEL_186;
                          }
LABEL_178:
                          if ((v162 | 0x20) == v162)
                          {
                            uint64_t v108 = (char *)v84 + 13;
                            if (*v84 != a7)
                            {
                              int v122 = *__error();
                              os_log_type_t v123 = _SILogForLogForCategory(7);
                              if (os_log_type_enabled(v123, OS_LOG_TYPE_ERROR))
                              {
                                int v137 = v84[1];
                                int v138 = *v84;
                                *(_DWORD *)long long buf = 136316418;
                                *(void *)uint64_t v172 = "db2_add_field_with_cache";
                                *(_WORD *)&v172[8] = 1024;
                                LODWORD(v173) = 13837;
                                WORD2(v173) = 1024;
                                *(_DWORD *)((char *)&v173 + 6) = v137;
                                WORD5(v173) = 1024;
                                HIDWORD(v173) = v138;
                                LOWORD(v174) = 1024;
                                *(_DWORD *)((char *)&v174 + 2) = v162;
                                HIWORD(v174) = 1024;
                                LODWORD(v175) = a7;
                                _os_log_error_impl(&dword_1BD672000, v123, OS_LOG_TYPE_ERROR, "%s:%d: types don't match dbf_flags:%x dfb_type:%d flags:%x type:%d", buf, 0x2Au);
                              }
                              *__error() = v122;
                              uint64_t v16 = 22;
                              goto LABEL_157;
                            }
                            int v109 = v51;
                            uint64_t v110 = &v108[v106];
                            if ((v105 & 0x20) == 0)
                            {
                              LODWORD(v163) = *__error();
                              int v111 = _SILogForLogForCategory(7);
                              os_log_type_t v112 = 2 * (dword_1E9FC90C0 < 4);
                              os_log_t v161 = v111;
                              if (os_log_type_enabled(v111, v112))
                              {
                                int v113 = v84[1];
                                int v114 = *v84;
                                *(_DWORD *)long long buf = 67109888;
                                *(_DWORD *)uint64_t v172 = v113;
                                *(_WORD *)&v172[4] = 1024;
                                *(_DWORD *)&v172[6] = v114;
                                LOWORD(v173) = 1024;
                                *(_DWORD *)((char *)&v173 + 2) = v162;
                                WORD3(v173) = 1024;
                                DWORD2(v173) = a7;
                                _os_log_impl(&dword_1BD672000, v161, v112, "original field not an array, dbf_flags:%x dfb_type:%d flags:%x type:%d", buf, 0x1Au);
                              }
                              *__error() = (int)v163;
                              uint64_t v85 = v86[3];
                            }
                            memmove(&v110[v77], v110, (char *)v86 + v85 - v110);
                            memcpy(&v108[*((unsigned int *)v84 + 2)], v109, v77);
                            *((_DWORD *)v84 + 2) += v76;
                            v86[3] += v76;
                            v84[1] |= (unsigned __int16)v162 | 0x20;
LABEL_170:
                            unint64_t v35 = v159;
                            int v92 = v164;
LABEL_171:
                            uint64_t v16 = 0;
                            *((_DWORD *)v84 + 1) = v92;
                            if (!v65) {
                              goto LABEL_173;
                            }
                            goto LABEL_172;
                          }
                          uint64_t v142 = __si_assert_copy_extra_2445(0, -1);
                          unsigned int v143 = v142;
                          if (v142) {
                            uint64_t v144 = v142;
                          }
                          else {
                            uint64_t v144 = "";
                          }
                          __message_assert("%s:%u: Unexpected code path %s ", "sdb2.c", 13831, v144);
                          free(v143);
LABEL_219:
                          uint64_t v136 = 2989;
                          goto LABEL_221;
                        }
                        do
                          size_t v84 = (unsigned __int16 *)((char *)v84 + *((unsigned int *)v84 + 2) + 13);
                        while (v84 < v87);
LABEL_145:
                        if (v84 >= (unsigned __int16 *)&v79[v56])
                        {
                          int v93 = *__error();
                          CFAllocatorRef v94 = _SILogForLogForCategory(7);
                          os_log_type_t v95 = 2 * (dword_1E9FC90C0 < 4);
                          if (os_log_type_enabled(v94, v95))
                          {
                            int v96 = v86[2];
                            *(_DWORD *)long long buf = 134218496;
                            *(void *)uint64_t v172 = v84;
                            *(_WORD *)&v172[8] = 2048;
                            *(void *)&long long v173 = v86;
                            WORD4(v173) = 1024;
                            *(_DWORD *)((char *)&v173 + 10) = v96;
                            _os_log_impl(&dword_1BD672000, v94, v95, "db_add_field: ERR: dbf is not valid! (dbf %p dbo %p size 0x%x)\n", buf, 0x1Cu);
                          }
                          *__error() = v93;
                          uint64_t v16 = 22;
                          goto LABEL_157;
                        }
                        *uint64_t v153 = (char *)v84 - v83;
                        *size_t v84 = a7;
                        char v91 = (char)v162;
                        v84[1] = (unsigned __int16)v162;
                        if ((v157 & 2) == 0 || (v91 & 0x20) != 0)
                        {
                          int v92 = v164;
                          *((_DWORD *)v84 + 1) = v164;
                          *((_DWORD *)v84 + 2) = v76;
                          memcpy((char *)v84 + 13, v51, v77);
                          v86[3] += v78;
                          unint64_t v35 = v159;
                          goto LABEL_171;
                        }
                        uint64_t v140 = __si_assert_copy_extra_2445(0, -1);
                        int v128 = v140;
                        uint64_t v141 = "";
                        if (v140) {
                          uint64_t v141 = v140;
                        }
                        __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 13884, "dbf->flags & DB_FIELD_ARRAY_VAL", v141);
LABEL_206:
                        free(v128);
                        if (__valid_fs(-1))
                        {
                          MEMORY[0xBAD] = -559038737;
                          abort();
                        }
                        MEMORY[0xC00] = -559038737;
                        abort();
                      }
                      v118 += v69;
                      ++v117;
                      unint64_t v116 = v152;
                      if ((unint64_t)v118 >= v160) {
                        goto LABEL_196;
                      }
                    }
                    int v130 = *__error();
                    BOOL v131 = _SILogForLogForCategory(7);
                    if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
                    {
                      uint64_t v139 = *(void *)v163;
                      *(_DWORD *)long long buf = 136316674;
                      *(void *)uint64_t v172 = "db2_add_field_with_cache";
                      *(_WORD *)&v172[8] = 1024;
                      LODWORD(v173) = 13701;
                      WORD2(v173) = 2048;
                      *(void *)((char *)&v173 + 6) = a1;
                      HIWORD(v173) = 2048;
                      unint64_t v174 = v120;
                      LOWORD(v175) = 2048;
                      *(void *)((char *)&v175 + 2) = v139;
                      WORD5(v175) = 1024;
                      HIDWORD(v175) = v164;
                      __int16 v176 = 2080;
                      v177[0] = __s;
                      _os_log_error_impl(&dword_1BD672000, v131, OS_LOG_TYPE_ERROR, "%s:%d: %p unexpected vec id: %llu oid: 0x%llx name id: %d name: %s", buf, 0x40u);
                    }
                    *__error() = v130;
                  }
                  uint64_t v16 = 22;
LABEL_163:
                  unint64_t v35 = v159;
                  goto LABEL_173;
                }
                int v65 = 0;
              }
              uint64_t v51 = v152;
            }
            int v75 = v151;
            goto LABEL_131;
          }
          uint64_t v50 = check_and_decompose_string(v28, (int)v160, &v165, &v167);
          if (v50)
          {
            uint64_t v16 = v50;
            goto LABEL_173;
          }
          uint64_t v51 = v165;
          int v52 = (int)v161;
          if (v165 != v28) {
            int v52 = 1;
          }
          LODWORD(v161) = v52;
          if (v165 == v28) {
            unint64_t v53 = v160;
          }
          else {
            unint64_t v53 = v167;
          }
          if ((v162 & 0x10) == 0)
          {
            int v75 = v53;
            size_t v56 = (size_t)v163;
LABEL_123:
            int v65 = (int)v161;
            goto LABEL_131;
          }
          unint64_t v160 = v53;
          int v54 = v53 - 1;
          uint64_t v55 = v165;
          size_t v56 = (size_t)v163;
          if (v54 != strlen((const char *)v165))
          {
            uint64_t v127 = __si_assert_copy_extra_2445(0, -1);
            int v128 = v127;
            CFArrayRef v129 = "";
            if (v127) {
              CFArrayRef v129 = v127;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 13644, "size-1 == (db_int32_t)strlen(data)", v129);
            goto LABEL_206;
          }
          uint64_t v28 = v165;
          int v57 = _get_id_for_string(a1, 1, (char *)v165, v54, -2147483647, 0);
          int v166 = v57;
          if (v57 != -1 && (v57 != -2 || !*v55))
          {
            uint64_t v51 = (unsigned __int8 *)&v166;
            int v75 = 4;
            goto LABEL_123;
          }
          if (v159 != &v170 && v159 != v169) {
            free(v159);
          }
          unsigned int v18 = v162 & 0xFFFFFFEF;
          uint64_t v16 = 7;
          if ((v162 & 0x20) != 0) {
            return v16;
          }
        }
        unint64_t v29 = v164 & 0x7FFFFFFF;
        if (v29 <= 0x7FFFFFFD)
        {
          uint64_t v30 = *(void *)(a1 + 880);
          if ((*(unsigned char *)(a1 + 804) & 0x14) != 0)
          {
            uint64_t v168 = 0;
            uint64_t data = data_map_get_data(v30, v29, &v168);
            if (!data)
            {
              int v162 = v28;
              unint64_t v32 = data_map_count(v30);
              if (v32 < v29)
              {
                unint64_t v59 = v32;
                LODWORD(v159) = *__error();
                os_log_t v147 = (os_log_t)_SILogForLogForCategory(7);
                if (os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
                {
                  HIDWORD(v146) = *(_DWORD *)(a1 + 4);
                  int v62 = data_map_valid((_DWORD *)v30);
                  *(_DWORD *)long long buf = v148.n128_u32[0];
                  uint64_t v63 = "n";
                  if (v62) {
                    uint64_t v63 = "y";
                  }
                  *(void *)uint64_t v172 = "_get_string_and_length_for_id";
                  *(_WORD *)&v172[8] = 1024;
                  LODWORD(v173) = 571;
                  WORD2(v173) = 2048;
                  *(void *)((char *)&v173 + 6) = v164 & 0x7FFFFFFF;
                  HIWORD(v173) = 2048;
                  unint64_t v174 = v59;
                  LOWORD(v175) = 1024;
                  *(_DWORD *)((char *)&v175 + 2) = 0;
                  WORD3(v175) = 2080;
                  *((void *)&v175 + 1) = v149;
                  __int16 v176 = 1024;
                  LODWORD(v177[0]) = HIDWORD(v146);
                  WORD2(v177[0]) = 2080;
                  *(void *)((char *)v177 + 6) = v63;
                  _os_log_error_impl(&dword_1BD672000, v147, OS_LOG_TYPE_ERROR, "%s:%d: Invalid string_id:%lu, map_count:%lu, index:%d, dst->name:%s, dst->flags:0x%x valid:%s", buf, 0x46u);
                }
                *__error() = (int)v159;
                if ((*(unsigned char *)(a1 + 4) & 0x20) != 0)
                {
                  int v60 = *__error();
                  unint64_t v61 = _SILogForLogForCategory(7);
                  if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
                  {
                    int v64 = *(_DWORD *)(a1 + 4);
                    *(_DWORD *)long long buf = v150.n128_u32[0];
                    *(void *)uint64_t v172 = "_get_string_and_length_for_id";
                    *(_WORD *)&v172[8] = 1024;
                    LODWORD(v173) = 573;
                    WORD2(v173) = 2080;
                    *(void *)((char *)&v173 + 6) = v149;
                    HIWORD(v173) = 1024;
                    LODWORD(v174) = v64;
                    _os_log_error_impl(&dword_1BD672000, v61, OS_LOG_TYPE_ERROR, "%s:%d: marking invalid %s flags:0x%x", buf, 0x22u);
                  }
                  *__error() = v60;
                  *(_DWORD *)(a1 + 4) |= 0x40u;
                }
              }
              int v33 = 0;
              uint64_t v34 = 0;
              uint64_t v28 = v162;
              goto LABEL_52;
            }
            goto LABEL_51;
          }
          if (*(_DWORD *)(v30 + 56) > v29)
          {
            uint64_t v39 = *(void *)(*(void *)(v30 + 32) + 8 * v29);
            if (v39)
            {
              uint64_t data = v39 + 6;
LABEL_51:
              int v33 = *(unsigned __int8 *)(data - 2);
              uint64_t v34 = (unsigned __int8 *)*(unsigned __int8 *)(data - 1);
LABEL_52:
              if ((v18 & 0x400) != 0) {
                __int16 v40 = 0;
              }
              else {
                __int16 v40 = a7;
              }
              int v41 = (v18 >> 1) & 4 | (v18 >> 7) & 1 | (v18 >> 4) & 2 | (v18 >> 5) & 8 | (v18 >> 3) & 0x40;
              if ((v12 & 4) != 0)
              {
                int v42 = (v18 >> 8) & 0x20 | (v18 >> 14 << 7) | v41;
              }
              else
              {
                int v42 = (v18 >> 6) & 0x20 | (v18 >> 12 << 7) | v41;
                if (v40 == 14 && (v18 & 0x4000) != 0) {
                  LOBYTE(v42) = v42 | 0x80;
                }
              }
              if ((v18 & 0x10) != 0) {
                char v44 = 15;
              }
              else {
                char v44 = v40;
              }
              if (v40 == 11) {
                unsigned __int8 v45 = v44;
              }
              else {
                unsigned __int8 v45 = v40;
              }
              if ((v157 & 2) != 0 && (v18 & 0x20) == 0)
              {
                uint64_t v134 = __si_assert_copy_extra_2445(0, -1);
                unint64_t v125 = v134;
                unint64_t v135 = "";
                if (v134) {
                  unint64_t v135 = v134;
                }
                __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 13583, "field_flags & DB_FIELD_ARRAY_VAL", v135);
                goto LABEL_218;
              }
              int v46 = v42;
              if (v42 == v34 && v33 == v45)
              {
                unint64_t v35 = &v170;
                unsigned int v47 = v18;
                uint64_t v38 = v164;
                goto LABEL_78;
              }
              int v162 = v34;
              LODWORD(v159) = v33;
              uint64_t string_and_length_for_id_12082 = get_string_and_length_for_id_12082(a1, 0, v164, 0, 0);
              uint64_t v49 = "";
              if (string_and_length_for_id_12082) {
                uint64_t v49 = (const char *)string_and_length_for_id_12082;
              }
              int v145 = v46;
              uint64_t v38 = v164;
              si_analytics_log_2842("field:%d extras:%d expected:%d type:%d expected:%d  %s", v164, v162, v145, v159, v45, v49);
              if (!__s) {
                return 28;
              }
              goto LABEL_76;
            }
          }
          int v58 = *(_DWORD *)(a1 + 4);
          if ((v58 & 0x20) != 0)
          {
            int v33 = 0;
            uint64_t v34 = 0;
            *(_DWORD *)(a1 + 4) = v58 | 0x40;
            goto LABEL_52;
          }
          if (SIIsAppleInternal_onceToken == -1)
          {
            int v33 = 0;
            uint64_t v34 = 0;
            goto LABEL_52;
          }
          dispatch_once(&SIIsAppleInternal_onceToken, &__block_literal_global_5267);
        }
        int v33 = 0;
        uint64_t v34 = 0;
        goto LABEL_52;
      }
    }
    else if (a10 <= 0x4000)
    {
      goto LABEL_32;
    }
    return 7;
  }
  int v26 = *__error();
  uint64_t v27 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 136315650;
    *(void *)uint64_t v172 = "db2_add_field_with_cache";
    *(_WORD *)&v172[8] = 1024;
    LODWORD(v173) = 13544;
    WORD2(v173) = 2080;
    *(void *)((char *)&v173 + 6) = __s;
    _os_log_error_impl(&dword_1BD672000, v27, OS_LOG_TYPE_ERROR, "%s:%d: Field name %s out of bounds", buf, 0x1Cu);
  }
  *__error() = v26;
  return 93;
}

uint64_t _get_id_for_string(unint64_t data_id, int a2, char *__s, int a4, int a5, void *a6)
{
  char v7 = a5;
  char v8 = a4;
  uint64_t v11 = data_id;
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a2;
  uint64_t v13 = *(void *)(data_id + 8 * a2 + 880);
  if (a2 > 4 || (*(_DWORD *)(data_id + 804) & 0x14) != 0)
  {
    size_t v22 = table_extra_bytes_11691[a2];
    if (!a2 && a5 < 0)
    {
      int v58 = __si_assert_copy_extra_2445(0, -1);
      unint64_t v53 = v58;
      unint64_t v59 = "";
      if (v58) {
        unint64_t v59 = v58;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 11203, "!(flags& 0x80000000)", v59);
      goto LABEL_127;
    }
    if (a2 <= 1 && !*__s) {
      return 4294967294;
    }
    if (a2 == 1)
    {
      if (!*__s)
      {
        int v26 = 1;
        goto LABEL_44;
      }
      uint64_t v23 = __s + 1;
      int v24 = -1;
      do
      {
        int v25 = *v23++;
        ++v24;
      }
      while (v25);
      int v26 = v24 + 2;
    }
    else
    {
      if (a2) {
        int v26 = a4;
      }
      else {
        int v26 = a4 + 1;
      }
      if (a2 == 5)
      {
LABEL_38:
        if (!v13) {
          goto LABEL_55;
        }
        int v29 = *(_DWORD *)(v13 + 216);
        switch(v29)
        {
          case -270471200:
            data_id = data_map_ext_id_get_with_key(*(void *)(data_id + 8 * a2 + 880), (uint64_t)__s, v26, a6);
            break;
          case 1684300900:
            data_id = data_map64_id_get_with_key(*(void *)(data_id + 8 * a2 + 880), (uint64_t)__s, v26, a6);
            break;
          case 842150450:
            data_id = data_map32_id_get_with_key(*(void *)(data_id + 8 * a2 + 880), (unsigned __int16 *)__s, v26, a6);
            unint64_t v21 = data_id;
            goto LABEL_54;
          default:
            goto LABEL_55;
        }
        goto LABEL_53;
      }
    }
    if (!a2) {
      goto LABEL_38;
    }
LABEL_44:
    if (!v13) {
      goto LABEL_55;
    }
    int v30 = *(_DWORD *)(v13 + 216);
    switch(v30)
    {
      case -270471200:
        data_id = _data_map_ext_get_data_id(v13, *(_DWORD *)(v13 + 220), __s, v26, 0);
        break;
      case 1684300900:
        data_id = _data_map64_get_data_id(v13, *(_DWORD *)(v13 + 220), __s, v26, 0);
        break;
      case 842150450:
        data_id = _data_map32_get_data_id(v13, *(_DWORD *)(v13 + 1244), __s, v26, 0);
        unint64_t v21 = data_id;
LABEL_54:
        if (v21) {
          return v21;
        }
LABEL_55:
        if (v7)
        {
          unint64_t v32 = (v26 + v22);
          if (a2)
          {
            if ((int)v32 > 32775) {
              return 0xFFFFFFFFLL;
            }
          }
          else if ((int)v32 > 16391)
          {
            return 0xFFFFFFFFLL;
          }
          if ((v7 & 2) != 0)
          {
            data_id = _dirty_datastore_locked(v11, 0);
          }
          else if (*(unsigned char *)(v11 + 4))
          {
            data_id = db2_dirty_datastore(v11);
          }
          if (a2 != 5 && a2)
          {
            unint64_t v21 = (unint64_t)data_map_id_insert((_DWORD *)v13, __s, v26);
            if (!v21) {
              return 0xFFFFFFFFLL;
            }
          }
          else
          {
            size_t v75 = (size_t)&v70;
            MEMORY[0x1F4188790](data_id);
            int v33 = (char *)&v70 - ((v32 + 15) & 0x1FFFFFFF0);
            if (v32 >= v22) {
              size_t v34 = v32 - v22;
            }
            else {
              size_t v34 = 0;
            }
            bzero(&v33[v22], v34);
            memcpy((char *)&v70 - ((v32 + 15) & 0x1FFFFFFF0), a6, v22);
            memcpy(&v33[v22], __s, v26);
            unint64_t v21 = (unint64_t)data_map_id_insert((_DWORD *)v13, (char *)&v70 - ((v32 + 15) & 0x1FFFFFFF0), (int)v32);
            if (!v21) {
              return 0xFFFFFFFFLL;
            }
          }
          if (a2 == 4)
          {
            uint64_t v35 = *(void *)(v11 + 968);
            if (v35) {
              (*(void (**)(uint64_t, unint64_t))(v35 + 16))(v35, v21);
            }
          }
          return v21;
        }
        return 4294967294;
      default:
        goto LABEL_55;
    }
LABEL_53:
    unint64_t v21 = data_id;
    goto LABEL_54;
  }
  uint64_t v14 = *(void *)(v13 + 24);
  if (!a2 && a5 < 0)
  {
    size_t v56 = __si_assert_copy_extra_2445(0, -1);
    unint64_t v53 = v56;
    int v57 = "";
    if (v56) {
      int v57 = v56;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 11276, "!(flags& 0x80000000)", v57);
    goto LABEL_127;
  }
  int v15 = *__s;
  if (a2 <= 1 && !*__s) {
    return 4294967294;
  }
  LODWORD(v16) = a4;
  if (a2 != 1) {
    goto LABEL_16;
  }
  uint64_t v16 = 0;
  char v17 = 0;
  char v18 = 0;
  while (1)
  {
    if (v15 == 22)
    {
      char v18 = 1;
      char v17 = v16;
      goto LABEL_10;
    }
    if (!v15) {
      break;
    }
LABEL_10:
    int v15 = __s[++v16];
  }
  if (v18) {
    char v8 = v17;
  }
  else {
    char v8 = v16;
  }
LABEL_16:
  size_t v75 = table_extra_bytes_11691[a2];
  int v19 = *(pthread_rwlock_t **)(v13 + 16);
  if (a2 > 1)
  {
    int v20 = (unsigned int *)hash_field_lookup(v19, (unsigned __int8 *)__s);
    if (!v20) {
      goto LABEL_29;
    }
    return *v20;
  }
  int v20 = (unsigned int *)hash_lookup_extended((uint64_t)v19, __s, a6, 0);
  if (v20) {
    return *v20;
  }
LABEL_29:
  if ((v7 & 1) == 0) {
    return 4294967294;
  }
  if ((int)v16 >= 0x2000) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v74 = (os_unfair_lock *)(v13 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)(v13 + 64));
  uint64_t v27 = *(pthread_rwlock_t **)(v13 + 16);
  if (a2 > 1) {
    uint64_t v28 = hash_field_lookup(v27, (unsigned __int8 *)__s);
  }
  else {
    uint64_t v28 = hash_lookup_extended((uint64_t)v27, __s, a6, 0);
  }
  if (v28)
  {
    int v36 = (unsigned int *)v28;
    os_unfair_lock_unlock(v74);
    return *v36;
  }
  uint64_t v73 = *(unsigned int *)(v13 + 56);
  LODWORD(v72) = *(_DWORD *)v13;
  if (v72 == -1)
  {
    uint64_t v71 = (os_unfair_lock_s *)(v13 + 68);
    os_unfair_lock_lock((os_unfair_lock_t)(v13 + 68));
    uint64_t v38 = v11 + 4 * v12 + 48;
    do
    {
      uint64_t v39 = (_DWORD *)v38;
      uint64_t v37 = v14;
      uint64_t v14 = *(void *)(v14 + 24);
      uint64_t v38 = v37 + 20;
    }
    while (v14);
    LODWORD(v72) = *v39;
    os_unfair_lock_unlock(v71);
  }
  else
  {
    uint64_t v37 = *(void *)(v13 + 8);
  }
  if ((v7 & 2) != 0)
  {
    _dirty_datastore_locked(v11, 0);
  }
  else if (*(unsigned char *)(v11 + 4))
  {
    db2_dirty_datastore(v11);
  }
  uint64_t v40 = *(int *)(v37 + 8);
  uint64_t v41 = 4;
  if (a2 < 2) {
    uint64_t v41 = 5;
  }
  size_t v42 = v75;
  size_t v43 = v41 + v75 + (int)v16;
  if (v43 <= *(int *)(v37 + 4) - v40)
  {
    uint64_t v46 = *(void *)(v13 + 8);
    if (v46 && v46 != v37)
    {
      int v64 = __si_assert_copy_extra_2445(0, -1);
      int v65 = v64;
      uint64_t v66 = "";
      if (v64) {
        uint64_t v66 = v64;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 11356, "string_table->dirty_page == 0 ||string_table->dirty_page==dnt", v66);
      free(v65);
      if (__valid_fs(-1)) {
        uint64_t v67 = 2989;
      }
      else {
        uint64_t v67 = 3072;
      }
      *(_DWORD *)uint64_t v67 = -559038737;
      abort();
    }
    if (*(_DWORD *)v13 == -1)
    {
      *(void *)(v13 + 8) = v37;
      *(_DWORD *)uint64_t v13 = v72;
    }
    size_t v72 = v43;
    unsigned int v47 = (char *)(v37 + v40);
    uint64_t v48 = (void *)(v37 + v40 + v42 + 4);
    if (a2 > 1) {
      memcpy(v48, __s, (int)v16);
    }
    else {
      strlcpy((char *)v48, __s, (int)v16 + 1);
    }
    memcpy(v47 + 4, a6, v75);
    int v50 = v73;
    *(_DWORD *)unsigned int v47 = v73;
    if (grow_string_table_ptrs(v11, a2))
    {
      os_unfair_lock_unlock(v74);
      return -1;
    }
    uint64_t v71 = (os_unfair_lock_s *)(v47 + 4);
    *(_DWORD *)(v37 + 8) += v72;
    ++*(_DWORD *)(v13 + 56);
    *(void *)(*(void *)(v13 + 32) + 8 * (v50 & 0x7FFFFFFF)) = v47;
    char v44 = v74;
    os_unfair_lock_assert_owner(v74);
    if (a2 <= 1)
    {
      *(unsigned char *)(*(void *)(v13 + 40) + (v50 & 0x7FFFFFFF)) = v8;
      if (a6) {
        uint64_t v51 = v71;
      }
      else {
        uint64_t v51 = 0;
      }
      if (hash_insert_extended(*(void *)(v13 + 16), (char *)v71 + v75, v51, v47) == 17)
      {
        int v52 = __si_assert_copy_extra_2445(0, -1);
        unint64_t v53 = v52;
        int v54 = "";
        if (v52) {
          int v54 = v52;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 11400, "this_ret!=17", v54);
        goto LABEL_127;
      }
LABEL_115:
      uint64_t v49 = *(unsigned int *)v47;
      goto LABEL_116;
    }
    if (hash_field_insert(*(pthread_rwlock_t **)(v13 + 16), (unsigned __int8 *)v71, (unsigned __int8 *)v47) != 17)goto LABEL_115; {
    unsigned int v68 = __si_assert_copy_extra_2445(0, -1);
    }
    unint64_t v53 = v68;
    uint64_t v69 = "";
    if (v68) {
      uint64_t v69 = v68;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 11403, "this_ret!=17", v69);
LABEL_127:
    free(v53);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (dword_1E9FC90C0 >= 5)
  {
    int v62 = *__error();
    uint64_t v63 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134218240;
      size_t v77 = (char *)v37;
      __int16 v78 = 1024;
      int v79 = a2;
      _os_log_impl(&dword_1BD672000, v63, OS_LOG_TYPE_DEFAULT, "Grow string table %p (%d)", buf, 0x12u);
    }
    *__error() = v62;
  }
  char v44 = v74;
  if ((v7 & 2) != 0) {
    uint64_t v45 = grow_string_table_locked(v11, a2, __s, v16, (uint64_t)a6, v73);
  }
  else {
    uint64_t v45 = grow_string_table(v11, a2, __s, v16, (uint64_t)a6, v73);
  }
  uint64_t v49 = v45;
LABEL_116:
  os_unfair_lock_unlock(v44);
  if (a2 == 4)
  {
    uint64_t v55 = *(void *)(v11 + 968);
    if (v55) {
      (*(void (**)(uint64_t, uint64_t))(v55 + 16))(v55, v49);
    }
  }
  if (dword_1E9FC90C0 >= 5)
  {
    int v60 = *__error();
    unint64_t v61 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      size_t v77 = __s;
      __int16 v78 = 1024;
      int v79 = v49;
      __int16 v80 = 1024;
      int v81 = a2;
      _os_log_impl(&dword_1BD672000, v61, OS_LOG_TYPE_DEFAULT, "Inserted field name %s with id %d for %d", buf, 0x18u);
    }
    *__error() = v60;
  }
  return v49;
}

uint64_t data_map32_id_get_with_key(uint64_t a1, unsigned __int16 *a2, size_t a3, void *a4)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = dm_hash_13954(*(unsigned char *)(a1 + 1460), a2, a3);
  if (_data_map32_rdlock(a1))
  {
    uint64_t v9 = 0;
    goto LABEL_47;
  }
  char v65 = 0;
  makeThreadId();
  int v10 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v11 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_13821, a1, 0, v10);
  unsigned int v63 = HIDWORD(v11);
  unsigned int v64 = v11;
  unint64_t v62 = __PAIR64__(v12, v13);
  uint64_t v14 = *(void *)&threadData[18 * v11 + 2];
  uint64_t v15 = v14 + 320 * HIDWORD(v11);
  int v54 = *(_DWORD *)(v15 + 312);
  uint64_t v16 = *(void (**)(void))(v15 + 224);
  if (v16) {
    v16(*(void *)(v14 + 320 * HIDWORD(v11) + 288));
  }
  unsigned int v61 = v64;
  unsigned int v60 = v63;
  unint64_t v59 = v62;
  if (_setjmp((int *)v15))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", (uint8_t *)&buf, 2u);
    }
    *(_DWORD *)(v15 + 312) = v54;
    CIOnThreadCleanUpReset(v59);
    dropThreadId(v61, 1, v10);
    CICleanUpReset(v61, HIDWORD(v59));
    uint64_t v9 = 0;
    goto LABEL_45;
  }
  __s2 = a4;
  int v56 = v10;
  unsigned int v17 = *(_DWORD *)(a1 + 1384);
  unsigned int v18 = v8 % v17;
  size_t __n = *(unsigned int *)(a1 + 1244);
  uint64_t lock = (os_unfair_lock_s *)(a1 + 1444);
  while (1)
  {
    uint64_t v19 = *(void *)(a1 + 1376);
    CFIndex v20 = *(unsigned int *)(v19 + 4 * v18);
    if (!v20) {
      break;
    }
    uint64_t v21 = v18;
    if (*(void *)(a1 + 1448))
    {
      os_unfair_lock_lock(lock);
      char v44 = *(void **)(a1 + 1448);
      if (v44) {
        bit_vector_set_10635(v44, v20);
      }
      os_unfair_lock_unlock(lock);
      unint64_t v22 = *(unsigned int *)(v19 + 4 * v21);
    }
    else
    {
      unint64_t v22 = *(unsigned int *)(v19 + 4 * v18);
    }
    if (*(unsigned int *)(a1 + 1388) <= v22)
    {
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long buf = 0u;
      long long v82 = 0u;
      int v28 = *__error();
      int v36 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
LABEL_24:
        *__error() = v28;
        goto LABEL_25;
      }
      os_log_t log = v36;
      int v41 = *(_DWORD *)(a1 + 1388);
      size_t v42 = fd_name(*(void *)(a1 + 1264), (char *)&buf, 0x100uLL);
      LODWORD(v97[0]) = 136316418;
      *(void *)((char *)v97 + 4) = "_data_map32_get_offset_entry";
      WORD2(v97[1]) = 1024;
      *(_DWORD *)((char *)&v97[1] + 6) = 424;
      WORD1(v97[2]) = 1024;
      HIDWORD(v97[2]) = v22;
      LOWORD(v97[3]) = 1024;
      *(_DWORD *)((char *)&v97[3] + 2) = v41;
      HIWORD(v97[3]) = 2048;
      v97[4] = a1;
      LOWORD(v97[5]) = 2080;
      *(void *)((char *)&v97[5] + 2) = v42;
      unint64_t v32 = log;
      int v33 = "%s:%d: invalid data id %d max %d %p %s";
      size_t v34 = (uint8_t *)v97;
      uint32_t v35 = 50;
LABEL_33:
      _os_log_error_impl(&dword_1BD672000, v32, OS_LOG_TYPE_ERROR, v33, v34, v35);
      goto LABEL_24;
    }
    uint64_t v23 = *(void *)(a1 + 1344);
    if (v23)
    {
      uint64_t v24 = *(unsigned int *)(v23 + 4 * v22);
      if (v24 != 1)
      {
        uint64_t v57 = 0;
        int v58 = 0;
        char v66 = 0;
        unsigned int v25 = *(_DWORD *)(a1 + 1320);
        if (v25 <= v24)
        {
          long long v95 = 0u;
          long long v96 = 0u;
          long long v93 = 0u;
          long long v94 = 0u;
          long long v91 = 0u;
          long long v92 = 0u;
          long long v89 = 0u;
          long long v90 = 0u;
          long long v87 = 0u;
          long long v88 = 0u;
          long long v85 = 0u;
          long long v86 = 0u;
          long long v83 = 0u;
          long long v84 = 0u;
          long long buf = 0u;
          long long v82 = 0u;
          int v28 = *__error();
          uint64_t v38 = _SILogForLogForCategory(0);
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
            goto LABEL_24;
          }
          int v50 = v38;
          uint64_t v39 = *(unsigned int *)(a1 + 1320);
          uint64_t v40 = fd_name(*(void *)(a1 + 1264), (char *)&buf, 0x100uLL);
          LODWORD(v97[0]) = 136316418;
          *(void *)((char *)v97 + 4) = "_data_map32_get_data_entry";
          WORD2(v97[1]) = 1024;
          *(_DWORD *)((char *)&v97[1] + 6) = 448;
          WORD1(v97[2]) = 2048;
          *(void *)((char *)&v97[2] + 4) = v24;
          WORD2(v97[3]) = 2048;
          *(void *)((char *)&v97[3] + 6) = v39;
          HIWORD(v97[4]) = 2048;
          v97[5] = a1;
          LOWORD(v97[6]) = 2080;
          *(void *)((char *)&v97[6] + 2) = v40;
          unint64_t v32 = v50;
          int v33 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
          size_t v34 = (uint8_t *)v97;
          uint32_t v35 = 58;
          goto LABEL_33;
        }
        data_entry_restore_32(*(void *)(a1 + 1312), v24, v25, (uint64_t)&v57, &v66);
        if (v66)
        {
          uint64_t v106 = 0;
          long long v104 = 0u;
          long long v105 = 0u;
          long long v102 = 0u;
          long long v103 = 0u;
          long long v100 = 0u;
          long long v101 = 0u;
          long long v98 = 0u;
          long long v99 = 0u;
          uint64_t v26 = 0;
          memset(v97, 0, sizeof(v97));
          do
          {
            if (v24 + v26 >= (unint64_t)*(unsigned int *)(a1 + 1320)) {
              break;
            }
            size_t v27 = strlen((const char *)v97);
            sprintf((char *)v97 + v27, "%d ", *(unsigned __int8 *)(*(void *)(a1 + 1312) + v24 + v26++));
          }
          while (v26 != 5);
          long long v95 = 0u;
          long long v96 = 0u;
          long long v93 = 0u;
          long long v94 = 0u;
          long long v91 = 0u;
          long long v92 = 0u;
          long long v89 = 0u;
          long long v90 = 0u;
          long long v87 = 0u;
          long long v88 = 0u;
          long long v85 = 0u;
          long long v86 = 0u;
          long long v83 = 0u;
          long long v84 = 0u;
          long long buf = 0u;
          long long v82 = 0u;
          int v28 = *__error();
          int v29 = _SILogForLogForCategory(0);
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
            goto LABEL_24;
          }
          int v30 = fd_name(*(void *)(a1 + 1264), (char *)&buf, 0x100uLL);
          uint64_t v31 = *(unsigned int *)(a1 + 1320);
          int v67 = 136316674;
          unsigned int v68 = "_data_map32_get_data_entry";
          __int16 v69 = 1024;
          int v70 = 444;
          __int16 v71 = 2080;
          size_t v72 = v30;
          __int16 v73 = 2048;
          uint64_t v74 = v24;
          __int16 v75 = 2048;
          uint64_t v76 = v31;
          __int16 v77 = 2048;
          uint64_t v78 = v57;
          __int16 v79 = 2080;
          __int16 v80 = v97;
          unint64_t v32 = v29;
          int v33 = "%s:%d: data_entry_restore_32 failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
          size_t v34 = (uint8_t *)&v67;
          uint32_t v35 = 68;
          goto LABEL_33;
        }
        if (__n + a3 == v57)
        {
          size_t v43 = v58;
          if (!memcmp(a2, &v58[__n], a3) && !memcmp(v43, __s2, __n))
          {
            uint64_t v9 = *(unsigned int *)(v19 + 4 * v21);
            goto LABEL_42;
          }
        }
      }
    }
LABEL_25:
    if (v21 + 1 == v17) {
      unsigned int v37 = 0;
    }
    else {
      unsigned int v37 = v21 + 1;
    }
    unsigned int v18 = v37;
    if (v37 == v8 % v17)
    {
      uint64_t v9 = 0;
      goto LABEL_42;
    }
  }
  uint64_t v9 = 0;
LABEL_42:
  char v65 = 1;
  uint64_t v45 = *(void *)&threadData[18 * v61 + 2];
  unsigned int v46 = v60;
  uint64_t v47 = v45 + 320 * v60;
  *(_DWORD *)(v47 + 312) = v54;
  uint64_t v48 = *(void (**)(void))(v47 + 232);
  if (v48) {
    v48(*(void *)(v45 + 320 * v46 + 288));
  }
  dropThreadId(v61, 0, v56);
LABEL_45:
  if (!v65)
  {
    uint64_t v9 = 0;
    *(_DWORD *)(a1 + 1464) = 22;
  }
LABEL_47:
  _data_map32_unlock(a1);
  return v9;
}

uint64_t ldbFlagsForTypeAndFieldFlags(int a1, unsigned int a2, char a3)
{
  if ((a2 & 0x400) != 0) {
    a1 = 0;
  }
  int v4 = (a2 >> 1) & 4 | (a2 >> 7) & 1 | (a2 >> 4) & 2 | (a2 >> 5) & 8 | (a2 >> 3) & 0x40;
  int v5 = (a2 >> 8) & 0x20 | (a2 >> 7) & 0x180 | v4;
  int v6 = (a2 >> 5) & 0x780 | (a2 >> 6) & 0x20 | v4;
  if (a1 == 14 && (a2 & 0x4000) != 0) {
    v6 |= 0xFFFFFF80;
  }
  if (a3) {
    int v6 = v5;
  }
  if ((a2 & 0x10) != 0) {
    char v8 = 15;
  }
  else {
    char v8 = a1;
  }
  if (a1 == 11) {
    unsigned __int8 v9 = v8;
  }
  else {
    unsigned __int8 v9 = a1;
  }
  return v9 | (v6 << 8);
}

uint64_t _data_map32_get_data_id(uint64_t a1, unsigned int a2, char *a3, size_t a4, int a5)
{
  unsigned int v9 = dm_hash_13954(*(unsigned char *)(a1 + 1460), (unsigned __int16 *)&a3[a2], a4 - a2);
  if (_data_map32_rdlock(a1)) {
    return 0;
  }
  makeThreadId();
  int v11 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v12 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_13821, a1, 0, v11);
  unsigned int v47 = HIDWORD(v12);
  unsigned int v48 = v12;
  unint64_t v46 = __PAIR64__(v13, v14);
  uint64_t v15 = *(void *)&threadData[18 * v12 + 2];
  uint64_t v16 = v15 + 320 * HIDWORD(v12);
  int v17 = *(_DWORD *)(v16 + 312);
  unsigned int v18 = *(void (**)(void))(v16 + 224);
  if (v18) {
    v18(*(void *)(v15 + 320 * HIDWORD(v12) + 288));
  }
  unsigned int v45 = v48;
  unsigned int v44 = v47;
  unint64_t v43 = v46;
  if (!_setjmp((int *)v16))
  {
    bucket_entry = (unsigned int *)_data_map32_get_bucket_entry(a1, v9, 0, a3, a4);
    if (!bucket_entry) {
      goto LABEL_40;
    }
    unsigned int v21 = *bucket_entry;
    if (*bucket_entry)
    {
      if (v21 >= *(_DWORD *)(a1 + 1388)) {
        uint64_t v22 = 0;
      }
      else {
        uint64_t v22 = v21;
      }
      goto LABEL_41;
    }
    if (!a5) {
      goto LABEL_21;
    }
    uint64_t v23 = bucket_entry;
    v42[1] = a3;
    v42[0] = a4;
    if (a4 >> 28)
    {
      int v24 = 5;
    }
    else if ((a4 & 0xFE00000) != 0)
    {
      int v24 = 4;
    }
    else
    {
      if ((a4 & 0x1FC000) == 0)
      {
        if ((a4 & 0x3F80) != 0) {
          int v25 = 2;
        }
        else {
          int v25 = 1;
        }
        goto LABEL_20;
      }
      int v24 = 3;
    }
    int v25 = v24;
LABEL_20:
    int v39 = v25;
    uint64_t v26 = *(unsigned int *)(a1 + 1388);
    _data_map32_unlock(a1);
    if (_data_map32_wrlock(a1))
    {
LABEL_21:
      uint64_t v22 = 0;
LABEL_41:
      uint64_t v19 = v22;
      uint64_t v34 = *(void *)&threadData[18 * v45 + 2];
      unsigned int v35 = v44;
      uint64_t v36 = v34 + 320 * v44;
      *(_DWORD *)(v36 + 312) = v17;
      unsigned int v37 = *(void (**)(void))(v36 + 232);
      if (v37) {
        v37(*(void *)(v34 + 320 * v35 + 288));
      }
      dropThreadId(v45, 0, v11);
      goto LABEL_44;
    }
    uint64_t v27 = v26;
    if (v26 == *(_DWORD *)(a1 + 1388)) {
      goto LABEL_23;
    }
    int v33 = (unsigned int *)_data_map32_get_bucket_entry(a1, v9, 0, a3, a4);
    if (v33)
    {
      uint64_t v28 = *v33;
      uint64_t v27 = *(unsigned int *)(a1 + 1388);
      if (v28 >= v27) {
        goto LABEL_21;
      }
      if (v28)
      {
        _data_map32_set_seen_id(a1, v28);
        goto LABEL_39;
      }
      uint64_t v23 = v33;
LABEL_23:
      uint64_t v28 = v27;
      int v41 = 0;
      int v29 = _data_map32_grow(a1, (v39 + a4), &v41);
      uint64_t v22 = 0;
      if (!v29) {
        goto LABEL_41;
      }
      if (!*(unsigned char *)(a1 + 1459))
      {
        _data_map32_dirty(a1);
        *(unsigned char *)(a1 + 1459) = 1;
      }
      uint64_t v30 = *(void *)(a1 + 1344);
      unsigned int v31 = *(_DWORD *)(a1 + 1320);
      *(_DWORD *)(v30 + 4 * v28) = v31;
      unsigned int v32 = v31;
      if (!*(unsigned char *)(a1 + 1457))
      {
        uint64_t v38 = v30;
        _data_map32_dirty(a1);
        *(unsigned char *)(a1 + 1457) = 1;
        unsigned int v32 = *(_DWORD *)(v38 + 4 * v28);
      }
      *(_DWORD *)(a1 + 1320) = data_entry_store_13873(*(void *)(a1 + 1312), v32, (unsigned int *)v42);
      ++*(_DWORD *)(a1 + 1388);
      if (!*(unsigned char *)(a1 + 1458))
      {
        _data_map32_dirty(a1);
        *(unsigned char *)(a1 + 1458) = 1;
      }
      if ((v41 & 4) != 0) {
        uint64_t v23 = (_DWORD *)_data_map32_get_bucket_entry(a1, v9, v28, 0, 0);
      }
      *uint64_t v23 = v28;
      SIActivityJournalDMAdd(*(os_unfair_lock_s **)(a1 + 1432), *(_DWORD *)(a1 + 1440), *(_DWORD *)(a1 + 1244), v28, v9, a4);
LABEL_39:
      uint64_t v22 = v28;
      goto LABEL_41;
    }
LABEL_40:
    uint64_t v22 = 0;
    goto LABEL_41;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
  }
  *(_DWORD *)(v16 + 312) = v17;
  CIOnThreadCleanUpReset(v43);
  dropThreadId(v45, 1, v11);
  CICleanUpReset(v45, HIDWORD(v43));
  uint64_t v19 = 0;
LABEL_44:
  _data_map32_unlock(a1);
  return v19;
}

uint64_t _data_map32_get_bucket_entry(uint64_t a1, unsigned int a2, unsigned int a3, const void *a4, size_t a5)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 1388) > a3)
  {
    char v7 = 0;
    unint64_t v8 = *(unsigned int *)(a1 + 1384);
    unint64_t v9 = a2 - a2 / *(_DWORD *)(a1 + 1384) * v8;
    unint64_t v10 = v8;
    unint64_t v47 = v8;
    while (1)
    {
      unint64_t v11 = v9;
      if (v9 < v10) {
        break;
      }
      BOOL v30 = 0;
      unint64_t v32 = v11;
LABEL_33:
      BOOL v33 = v32 != v8;
      if (v30) {
        return 0;
      }
      unint64_t v9 = 0;
      uint64_t result = 0;
      char v35 = v7 | v33;
      char v7 = 1;
      unint64_t v10 = v11;
      if (v35) {
        return result;
      }
    }
    char v50 = v7;
    unint64_t v49 = v9;
    while (1)
    {
      uint64_t v12 = *(void *)(a1 + 1376);
      uint64_t v13 = *(unsigned int *)(v12 + 4 * v11);
      if (v13) {
        BOOL v14 = v13 == a3;
      }
      else {
        BOOL v14 = 1;
      }
      if (v14) {
        return v12 + 4 * v11;
      }
      if (a3) {
        goto LABEL_10;
      }
      if (*(_DWORD *)(a1 + 1388) <= v13)
      {
        long long v83 = 0u;
        long long v84 = 0u;
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        long long v77 = 0u;
        long long v78 = 0u;
        long long v75 = 0u;
        long long v76 = 0u;
        long long v73 = 0u;
        long long v74 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
        long long v69 = 0u;
        long long v70 = 0u;
        int v39 = *__error();
        uint64_t v40 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
        {
          int v44 = *(_DWORD *)(a1 + 1388);
          unsigned int v45 = fd_name(*(void *)(a1 + 1264), (char *)&v69, 0x100uLL);
          *(_DWORD *)__s = 136316418;
          *(void *)&char __s[4] = "_data_map32_get_offset_entry";
          *(_WORD *)&__s[12] = 1024;
          *(_DWORD *)&__s[14] = 424;
          *(_WORD *)&__s[18] = 1024;
          *(_DWORD *)&__s[20] = v13;
          *(_WORD *)&__s[24] = 1024;
          *(_DWORD *)&__s[26] = v44;
          *(_WORD *)&__s[30] = 2048;
          *(void *)&__s[32] = a1;
          *(_WORD *)&__s[40] = 2080;
          *(void *)&__s[42] = v45;
          _os_log_error_impl(&dword_1BD672000, v40, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %d max %d %p %s", (uint8_t *)__s, 0x32u);
        }
        int v41 = __error();
        uint64_t result = 0;
        *int v41 = v39;
        return result;
      }
      uint64_t v16 = *(void *)(a1 + 1344);
      if (!v16) {
        return 0;
      }
      uint64_t v17 = *(unsigned int *)(v16 + 4 * v13);
      if (v17 == 1) {
        return 0;
      }
      uint64_t v52 = 0;
      __s2 = 0;
      char v54 = 0;
      unsigned int v18 = *(_DWORD *)(a1 + 1320);
      if (v18 <= v17)
      {
        long long v83 = 0u;
        long long v84 = 0u;
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        long long v77 = 0u;
        long long v78 = 0u;
        long long v75 = 0u;
        long long v76 = 0u;
        long long v73 = 0u;
        long long v74 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
        long long v69 = 0u;
        long long v70 = 0u;
        int v21 = *__error();
        int v29 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          uint64_t v46 = *(unsigned int *)(a1 + 1320);
          unsigned int v31 = fd_name(*(void *)(a1 + 1264), (char *)&v69, 0x100uLL);
          *(_DWORD *)__s = 136316418;
          *(void *)&char __s[4] = "_data_map32_get_data_entry";
          *(_WORD *)&__s[12] = 1024;
          *(_DWORD *)&__s[14] = 448;
          *(_WORD *)&__s[18] = 2048;
          *(void *)&__s[20] = v17;
          *(_WORD *)&__s[28] = 2048;
          *(void *)&__s[30] = v46;
          *(_WORD *)&__s[38] = 2048;
          *(void *)&__s[40] = a1;
          *(_WORD *)&__s[48] = 2080;
          *(void *)&__s[50] = v31;
          int v25 = __s;
          uint64_t v26 = v29;
          uint64_t v27 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
          uint32_t v28 = 58;
          goto LABEL_30;
        }
      }
      else
      {
        data_entry_restore_32(*(void *)(a1 + 1312), v17, v18, (uint64_t)&v52, &v54);
        if (!v54)
        {
          if (v52 == a5 && !memcmp(a4, __s2, a5)) {
            return v12 + 4 * v11;
          }
LABEL_10:
          int v15 = 0;
          goto LABEL_23;
        }
        uint64_t v19 = 0;
        uint64_t v94 = 0;
        long long v92 = 0u;
        long long v93 = 0u;
        long long v90 = 0u;
        long long v91 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        long long v86 = 0u;
        long long v87 = 0u;
        memset(__s, 0, sizeof(__s));
        do
        {
          if (v17 + v19 >= (unint64_t)*(unsigned int *)(a1 + 1320)) {
            break;
          }
          size_t v20 = strlen(__s);
          sprintf(&__s[v20], "%d ", *(unsigned __int8 *)(*(void *)(a1 + 1312) + v17 + v19++));
        }
        while (v19 != 5);
        long long v83 = 0u;
        long long v84 = 0u;
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        long long v77 = 0u;
        long long v78 = 0u;
        long long v75 = 0u;
        long long v76 = 0u;
        long long v73 = 0u;
        long long v74 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
        long long v69 = 0u;
        long long v70 = 0u;
        int v21 = *__error();
        uint64_t v22 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          uint64_t v23 = fd_name(*(void *)(a1 + 1264), (char *)&v69, 0x100uLL);
          uint64_t v24 = *(unsigned int *)(a1 + 1320);
          int v55 = 136316674;
          int v56 = "_data_map32_get_data_entry";
          __int16 v57 = 1024;
          int v58 = 444;
          __int16 v59 = 2080;
          unsigned int v60 = v23;
          __int16 v61 = 2048;
          uint64_t v62 = v17;
          __int16 v63 = 2048;
          uint64_t v64 = v24;
          __int16 v65 = 2048;
          uint64_t v66 = v52;
          __int16 v67 = 2080;
          unsigned int v68 = __s;
          int v25 = (char *)&v55;
          uint64_t v26 = v22;
          uint64_t v27 = "%s:%d: data_entry_restore_32 failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
          uint32_t v28 = 68;
LABEL_30:
          _os_log_error_impl(&dword_1BD672000, v26, OS_LOG_TYPE_ERROR, v27, (uint8_t *)v25, v28);
        }
      }
      *__error() = v21;
      int v15 = 1;
LABEL_23:
      ++v11;
      BOOL v30 = v15 != 0;
      if (v15 || v11 >= v10)
      {
        unint64_t v32 = v11;
        char v7 = v50;
        unint64_t v8 = v47;
        unint64_t v11 = v49;
        goto LABEL_33;
      }
    }
  }
  if (!a3) {
    return 0;
  }
  long long v83 = 0u;
  long long v84 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  int v36 = *__error();
  unsigned int v37 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
  {
    int v42 = *(_DWORD *)(a1 + 1388);
    unint64_t v43 = fd_name(*(void *)(a1 + 1264), (char *)&v69, 0x100uLL);
    *(_DWORD *)__s = 136316418;
    *(void *)&char __s[4] = "_data_map32_get_bucket_entry";
    *(_WORD *)&__s[12] = 1024;
    *(_DWORD *)&__s[14] = 518;
    *(_WORD *)&__s[18] = 1024;
    *(_DWORD *)&__s[20] = a3;
    *(_WORD *)&__s[24] = 1024;
    *(_DWORD *)&__s[26] = v42;
    *(_WORD *)&__s[30] = 2048;
    *(void *)&__s[32] = a1;
    *(_WORD *)&__s[40] = 2080;
    *(void *)&__s[42] = v43;
    _os_log_error_impl(&dword_1BD672000, v37, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %d max %d %p %s", (uint8_t *)__s, 0x32u);
  }
  uint64_t v38 = __error();
  uint64_t result = 0;
  *uint64_t v38 = v36;
  return result;
}

uint64_t check_and_decompose_string(unsigned __int8 *a1, unint64_t a2, unsigned __int8 **a3, unint64_t *a4)
{
  unint64_t v27 = 0;
  *a3 = a1;
  *a4 = a2;
  if (!a2) {
    return 0;
  }
  unint64_t v8 = 0;
  int v28 = 0;
  unint64_t v9 = a1;
  do
  {
    if (((char)*v9 & 0x80000000) == 0) {
      goto LABEL_4;
    }
    int v26 = 0;
    unint64_t v10 = utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*v9 >> 4];
    if (utf8_decodestr(v9, v10, &v26, &v27, 4, &v28, 0)) {
      return 22;
    }
    if ((unsigned __int16)v26 >= 0xC0u)
    {
      int v11 = __CFUniCharDecomposableBitmap[(unint64_t)(unsigned __int16)v26 >> 8];
      if (__CFUniCharDecomposableBitmap[(unint64_t)(unsigned __int16)v26 >> 8])
      {
        if (v11 == 255
          || ((__CFUniCharDecomposableBitmap[(v26 >> 3) + 256 + 32 * v11 - 32] >> (v26 & 7)) & 1) != 0)
        {
          break;
        }
      }
    }
    v8 += v10 - 1;
    v9 += v10 - 1;
LABEL_4:
    ++v8;
    ++v9;
  }
  while (v8 < a2);
  if (v8 >= a2)
  {
    if (v8 <= a2) {
      return 0;
    }
    return 22;
  }
  for (uint64_t i = 2 * a2 + 2 * (a2 >> 2) + 2; ; i += 64)
  {
    uint64_t v13 = malloc_type_malloc(i, 0xBDF9019uLL);
    if (!v13) {
      break;
    }
    int v14 = utf8_decodestr(a1, a2, v13, &v27, i, &v28, 4);
    if (!v14) {
      break;
    }
    if (v14 == 22)
    {
      free(v13);
      return 22;
    }
    free(v13);
  }
  unint64_t v16 = v27;
  if (v27 >= 2)
  {
    uint64_t v17 = 0;
    unint64_t v20 = v27 >> 1;
    int v21 = v13;
    do
    {
      unsigned int v24 = *v21++;
      unsigned int v23 = v24;
      if (!v24) {
        unsigned int v23 = 9216;
      }
      if (v23 < 0x80)
      {
        uint64_t v22 = 1;
      }
      else if (v23 >= 0x800)
      {
        if ((v23 & 0xF800) == 0xD800) {
          uint64_t v22 = 2;
        }
        else {
          uint64_t v22 = 3;
        }
      }
      else
      {
        uint64_t v22 = 2;
      }
      v17 += v22;
      --v20;
    }
    while (v20);
  }
  else
  {
    uint64_t v17 = 0;
  }
  unsigned int v18 = malloc_type_malloc(v17 + 1, 0xB67BE8AFuLL);
  uint64_t v19 = utf8_encodestr(v13, v16, v18, &v27, v17 + 1);
  if (v19)
  {
    uint64_t v15 = v19;
    free(v13);
    free(v18);
    return v15;
  }
  v18[v17] = 0;
  *a3 = v18;
  *a4 = v17 + 1;
  free(v13);
  return 0;
}

uint64_t utf8_decodestr(unsigned __int8 *a1, unint64_t a2, _WORD *a3, void *a4, uint64_t a5, _DWORD *a6, char a7)
{
  v40[2] = *MEMORY[0x1E4F143B8];
  *a6 = 0;
  if (!a2)
  {
    uint64_t result = 0;
    uint64_t v12 = a3;
    goto LABEL_62;
  }
  unint64_t v10 = a2;
  unint64_t v11 = (unint64_t)a3 + a5;
  uint64_t v12 = a3;
  uint64_t v13 = a1;
  while (1)
  {
    unsigned int v15 = *v13++;
    unint64_t v14 = v15;
    if (!v15)
    {
LABEL_57:
      uint64_t result = 0;
      goto LABEL_62;
    }
    --v10;
    if ((v14 & 0x80) == 0)
    {
      if ((unint64_t)v12 >= v11) {
        goto LABEL_59;
      }
LABEL_6:
      unsigned int v16 = bswap32(v14) >> 16;
      if (a7) {
        LOWORD(v14) = v16;
      }
      *v12++ = v14;
      goto LABEL_9;
    }
    unint64_t v17 = utf_extrabytes[v14 >> 3];
    BOOL v18 = v10 >= v17;
    v10 -= v17;
    if (!v18) {
      goto LABEL_58;
    }
    if (v17 != 3) {
      break;
    }
    int v20 = *v13;
    if ((v20 & 0xC0) != 0x80
      || (int v21 = a1[2], (v21 & 0xC0) != 0x80)
      || (int v22 = a1[3], (v22 & 0xC0) != 0x80)
      || (unsigned int v23 = v22 + (((v20 << 6) + (v14 << 12) + v21) << 6) - 63512704, v23 >> 20))
    {
LABEL_58:
      uint64_t result = 22;
      goto LABEL_62;
    }
    unsigned int v24 = (v23 >> 10) - 10240;
    if (a7)
    {
      *uint64_t v12 = bswap32(v24) >> 16;
      int v25 = v12 + 1;
      if ((unint64_t)(v12 + 1) >= v11)
      {
LABEL_61:
        uint64_t result = 63;
        uint64_t v12 = v25;
        goto LABEL_62;
      }
      __int16 v26 = __rev16(v23 & 0x3FF | 0xDC00);
    }
    else
    {
      *uint64_t v12 = v24;
      int v25 = v12 + 1;
      if ((unint64_t)(v12 + 1) >= v11) {
        goto LABEL_61;
      }
      __int16 v26 = v23 & 0x3FF | 0xDC00;
    }
    uint64_t v13 = a1 + 4;
    v12[1] = v26;
    v12 += 2;
LABEL_9:
    a1 = v13;
    if (!v10) {
      goto LABEL_57;
    }
  }
  if (v17 == 2)
  {
    int v27 = *v13;
    if ((v27 & 0xC0) != 0x80) {
      goto LABEL_58;
    }
    int v28 = a1[2];
    if ((v28 & 0xC0) != 0x80) {
      goto LABEL_58;
    }
    int v29 = (v27 << 6) + (v14 << 12) + v28;
    LODWORD(v14) = v29 - 925824;
    if ((v29 - 925824) < 0x800) {
      goto LABEL_58;
    }
    uint64_t v13 = a1 + 3;
    if (v14 >> 11 >= 0x1B)
    {
      uint64_t result = 22;
      if (v14 < 0xE000 || (v29 & 0x3FFFFE) == 0xF207E) {
        goto LABEL_62;
      }
    }
  }
  else
  {
    if (v17 != 1) {
      goto LABEL_58;
    }
    int v19 = *v13;
    if ((v19 & 0xC0) != 0x80) {
      goto LABEL_58;
    }
    LODWORD(v14) = v19 + (v14 << 6) - 12416;
    if (v14 < 0x80) {
      goto LABEL_58;
    }
    uint64_t v13 = a1 + 2;
  }
  if ((a7 & 4) == 0
    || (unsigned __int16)v14 < 0xC0u
    || (int v31 = __CFUniCharDecomposableBitmap[BYTE1(v14)]) == 0
    || v31 != 255
    && ((__CFUniCharDecomposableBitmap[(v14 >> 3) + 256 + 32 * v31 - 32] >> (v14 & 7)) & 1) == 0)
  {
    if (v14 == 9216) {
      LODWORD(v14) = 0;
    }
    if ((unint64_t)v12 >= v11)
    {
LABEL_59:
      uint64_t result = 63;
      goto LABEL_62;
    }
    goto LABEL_6;
  }
  v40[0] = 0;
  v40[1] = 0;
  unsigned __int16 v32 = v14 + 21504;
  if ((unsigned __int16)(v14 + 21504) > 0x2BA4u)
  {
    int v34 = unicode_recursive_decompose((unsigned __int16)v14, v40);
    if (v34 >= 1) {
      goto LABEL_50;
    }
    goto LABEL_9;
  }
  __int16 v33 = (unsigned __int16)(v14 + 21504) % 0x1Cu;
  LOWORD(v40[0]) = ((28533 * v32) >> 24) | 0x1100;
  WORD1(v40[0]) = v32 % 0x24Cu / 0x1C + 4449;
  if (v32 % 0x1Cu)
  {
    WORD2(v40[0]) = v33 + 4519;
    int v34 = 3;
  }
  else
  {
    int v34 = 2;
  }
LABEL_50:
  uint64_t v35 = 0;
  while (1)
  {
    int v36 = &v12[v35];
    unsigned int v37 = *(unsigned __int16 *)((char *)v40 + v35 * 2);
    unsigned int v38 = bswap32(v37) >> 16;
    if (a7) {
      LOWORD(v37) = v38;
    }
    *int v36 = v37;
    int v39 = v36 + 1;
    if ((unint64_t)v39 >= v11) {
      break;
    }
    if (v34 == ++v35)
    {
      uint64_t v12 = (_WORD *)((char *)v12 + v35 * 2);
      goto LABEL_9;
    }
  }
  uint64_t result = 63;
  uint64_t v12 = v39;
LABEL_62:
  *a4 = (char *)v12 - (char *)a3;
  return result;
}

uint64_t unicode_recursive_decompose(unsigned int a1, _WORD *a2)
{
  int v2 = a2;
  if ((unsigned __int16)(a1 + 1201) < 0x571u)
  {
LABEL_7:
    unsigned int v8 = 0;
  }
  else
  {
    int v3 = (unsigned __int16 *)&__CFUniCharDecompositionTable;
    int v4 = (unsigned __int16 *)&unk_1BDA85EF4;
    while (1)
    {
      while (1)
      {
        uint64_t v5 = ((char *)v4 - (char *)v3) >> 3;
        int v6 = &v3[2 * v5];
        unsigned int v7 = *v6;
        if (v7 <= a1) {
          break;
        }
        int v4 = v6 - 2;
        if (v3 > v6 - 2) {
          goto LABEL_7;
        }
      }
      if (v7 >= a1) {
        break;
      }
      int v3 = v6 + 2;
      if (v6 + 2 > v4) {
        goto LABEL_7;
      }
    }
    unsigned int v8 = v3[2 * v5 + 1];
  }
  unsigned int v9 = (v8 >> 12) & 7;
  __int16 v21 = v8 & 0xFFF;
  unsigned int v10 = v9 - 1;
  if (v9 == 1) {
    unint64_t v11 = (unsigned __int16 *)&v21;
  }
  else {
    unint64_t v11 = (unsigned __int16 *)((char *)&__CFUniCharMultipleDecompositionTable + 2 * (v8 & 0xFFF));
  }
  if ((v8 & 0x8000) != 0)
  {
    uint64_t result = unicode_recursive_decompose(*v11, a2);
    if (!result) {
      return result;
    }
    ++v11;
    v2 += result;
    unsigned int v9 = v10;
    uint64_t result = result + v10;
    if (!v10) {
      return result;
    }
  }
  else
  {
    uint64_t result = v9;
    if (!v9) {
      return result;
    }
  }
  if (v9 < 0x10) {
    goto LABEL_24;
  }
  if ((unint64_t)((char *)v2 - (char *)v11) < 0x20)
  {
    unsigned int v9 = -1;
    goto LABEL_24;
  }
  uint64_t v13 = v9;
  uint64_t v14 = v9 & 0xFFFFFFF0;
  uint64_t v15 = 2 * v14;
  unsigned int v9 = ~v14;
  unsigned int v16 = v2 + 8;
  unint64_t v17 = (long long *)(v11 + 8);
  uint64_t v18 = v14;
  do
  {
    long long v19 = *v17;
    *(v16 - 1) = *(v17 - 1);
    *unsigned int v16 = v19;
    v16 += 2;
    v17 += 2;
    v18 -= 16;
  }
  while (v18);
  if (v14 != v13)
  {
    unint64_t v11 = (unsigned __int16 *)((char *)v11 + v15);
    int v2 = (_WORD *)((char *)v2 + v15);
    do
    {
LABEL_24:
      __int16 v20 = *v11++;
      *v2++ = v20;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t _data_map32_grow(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (*(_DWORD *)(a1 + 1464)) {
    return 0;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 1388);
  if (v7 >= *(_DWORD *)(a1 + 1352))
  {
    unint64_t v8 = (*MEMORY[0x1E4F14B00] + 4 * (v7 + 1) - 1) & -*MEMORY[0x1E4F14B00];
    if (fd_truncate(*(void *)(a1 + 1328), v8) == -1) {
      goto LABEL_23;
    }
    *(_DWORD *)(a1 + 1340) = v8;
    size_t v9 = *(unsigned int *)(a1 + 1336);
    if (v8 > v9)
    {
      int v10 = 2 * v9;
      munmap(*(void **)(a1 + 1344), v9);
      *(_DWORD *)(a1 + 1336) = 0;
      uint64_t v11 = fd_mmap(*(void *)(a1 + 1328));
      *(void *)(a1 + 1344) = v11;
      if (v11 == -1) {
        goto LABEL_23;
      }
      *(_DWORD *)(a1 + 1336) = v10;
    }
    *(_DWORD *)(a1 + 1352) = v8 >> 2;
    *a3 |= 2u;
    unsigned int v7 = *(_DWORD *)(a1 + 1388);
  }
  unsigned int v12 = v7 - *(_DWORD *)(a1 + 1392);
  if (v12 >= 2 * *(_DWORD *)(a1 + 1384) / 3u || v12 < 2 * *(_DWORD *)(a1 + 1396))
  {
    if (!_data_map32_rehash(a1)) {
      goto LABEL_23;
    }
    *a3 |= 4u;
  }
  unint64_t v13 = a2 + *(unsigned int *)(a1 + 1320) + 8;
  if (v13 < *(unsigned int *)(a1 + 1308)) {
    return 1;
  }
  unint64_t v14 = (v13 + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
  if (fd_truncate(*(void *)(a1 + 1296), v14) != -1)
  {
    *(_DWORD *)(a1 + 1308) = v14;
    unint64_t v15 = *(unsigned int *)(a1 + 1304);
    if (v14 <= v15)
    {
LABEL_21:
      *a3 |= 1u;
      return 1;
    }
    int v16 = 2 * v15;
    unint64_t v17 = *(void (**)(void, void))(a1 + 1408);
    if (v17) {
      v17(*(void *)(a1 + 1424), *(void *)(a1 + 1312));
    }
    else {
      munmap(*(void **)(a1 + 1312), *(unsigned int *)(a1 + 1304));
    }
    *(_DWORD *)(a1 + 1304) = 0;
    uint64_t v18 = fd_mmap(*(void *)(a1 + 1296));
    *(void *)(a1 + 1312) = v18;
    if (v18 != -1)
    {
      *(_DWORD *)(a1 + 1304) = v16;
      goto LABEL_21;
    }
  }
LABEL_23:
  if (*(_DWORD *)(a1 + 1464)) {
    return 0;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 1464) = 1;
  return result;
}

uint64_t _data_map32_dirty(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 1288);
  if (*(_DWORD *)(v1 + 16))
  {
    uint64_t v2 = result;
    *(_DWORD *)(v1 + 16) = 0;
    fd_pwrite(*(void *)(result + 1264), v1, 0x38uLL, 0);
    uint64_t v3 = *(void *)(v2 + 1264);
    return fd_sync(v3, 0);
  }
  return result;
}

void __query_once_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 200);
  if ((v3 & 0x600000) == 0 || (v3 & 0x600000) == 0x600000) {
    goto LABEL_8;
  }
  if ((v3 & 0x400000) != 0)
  {
    int v4 = "kMDItemContentType!='com.apple.ical.ics.todo' || _kMDItemFinderExcluded!=1";
  }
  else
  {
    if ((v3 & 0x200000) == 0) {
      goto LABEL_8;
    }
    int v4 = "_kMDItemGroupId!=6 || (kMDItemContentType=='com.apple.ical.ics.todo' || _kMDItemFinderExcluded!=1)";
  }
  uint64_t v5 = *(void *)(v2 + 72);
  query_node_with_ann = db_make_query_node_with_ann(v4, 0);
  *(void *)(*(void *)(a1 + 32) + 72) = makeAndNode(v5, (uint64_t)query_node_with_ann, 1, 1);
  uint64_t v2 = *(void *)(a1 + 32);
LABEL_8:
  uint64_t v7 = *(void *)(v2 + 72);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 0x40000000;
  v14[2] = __db_query_tree_apply_block_block_invoke;
  v14[3] = &unk_1E6348598;
  v14[4] = &__block_literal_global_33_4086;
  uint64_t tree_apply_block_with_meta = db_query_tree_apply_block_with_meta((void *)v7, (uint64_t)v14, (uint64_t)&__block_literal_global_37);
  size_t v9 = (int *)tree_apply_block_with_meta;
  if (v7) {
    BOOL v10 = tree_apply_block_with_meta == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10) {
    *(unsigned char *)(tree_apply_block_with_meta + 16) = *(unsigned char *)(v7 + 56) & 1;
  }
  uint64_t v11 = *(void *)(a1 + 32);
  CFArrayRef v12 = *(const __CFArray **)(v11 + 176);
  if (v12) {
    BOOL v13 = CFArrayGetCount(v12) != 0;
  }
  else {
    BOOL v13 = 0;
  }
  *(void *)(*(void *)(a1 + 32) + 136) = rewriteForSources((uint64_t)v9, (uint64_t **)(v11 + 128), v13);
  siquerynode_release(v9);
}

uint64_t rewriteForSources(uint64_t a1, uint64_t **a2, int a3)
{
  int v6 = _splitAndGroupBySource(a1);
  *a2 = 0;
  if (!v6)
  {
    char v54 = __si_assert_copy_extra_329();
    int v55 = v54;
    int v56 = "";
    if (v54) {
      int v56 = v54;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "siquerynode.c", 787, "s!=NONE", v56);
    free(v55);
    if (__valid_fs(-1)) {
      uint64_t v57 = 2989;
    }
    else {
      uint64_t v57 = 3072;
    }
    *(_DWORD *)uint64_t v57 = -559038737;
    abort();
  }
  calculateCost(a1);
  int v58 = 0;
  __int16 v59 = 0;
  int v7 = rewriteForFSSearching(a1, &v58, (void **)&v59);
  unint64_t v8 = (uint64_t *)malloc_type_malloc(16 * v7, 0x20040A4A59CD2uLL);
  BOOL v10 = v58;
  size_t v9 = v59;
  if (v7 < 1)
  {
    size_t v20 = 0;
  }
  else
  {
    int v11 = a3;
    unint64_t v12 = 0;
    uint64_t v13 = v7;
    uint64_t v14 = 8 * v7;
    do
    {
      if (v10)
      {
        unint64_t v15 = (_DWORD *)v9[v12 / 8];
        if (v15)
        {
          uint64_t v16 = v10[v12 / 8];
          if (v16)
          {
            int v17 = v15[1];
            if ((v17 & 3) != 0 && (*(unsigned char *)(v16 + 4) & 3) != 0 && !*(unsigned char *)(v16 + 15))
            {
              if (*MEMORY[0x1E4F14B00] <= 0x27uLL) {
                ++sTotal_4070;
              }
              unint64_t v15 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x28uLL, 0x31F9A007uLL);
              if (!v15) {
                _log_fault_for_malloc_failure();
              }
              _DWORD *v15 = 1;
              v15[1] = *(_DWORD *)(v10[v12 / 8] + 4) | *(_DWORD *)(v9[v12 / 8] + 4);
              *((void *)v15 + 3) = 2;
              uint64_t v18 = malloc_type_malloc(0x10uLL, 0x2004093837F09uLL);
              *((void *)v15 + 4) = v18;
              *uint64_t v18 = v9[v12 / 8];
              *(void *)(*((void *)v15 + 4) + 8) = v10[v12 / 8];
              v10[v12 / 8] = 0;
              v9[v12 / 8] = (uint64_t)v15;
              int v17 = v15[1];
            }
            if ((v17 & 3) == 0)
            {
              uint64_t v19 = v10[v12 / 8];
              if (v19)
              {
                if ((*(unsigned char *)(v19 + 4) & 3) != 0 && !*((unsigned char *)v15 + 15))
                {
                  v10[v12 / 8] = (uint64_t)v15;
                  v9[v12 / 8] = v19;
                }
              }
            }
          }
        }
      }
      v12 += 8;
    }
    while (v14 != v12);
    size_t v20 = 0;
    __int16 v21 = v9;
    int v22 = v10;
    a3 = v11;
    do
    {
      if (v9) {
        uint64_t v23 = *v21;
      }
      else {
        uint64_t v23 = 0;
      }
      v8[2 * v20] = v23;
      if (v10) {
        uint64_t v24 = *v22;
      }
      else {
        uint64_t v24 = 0;
      }
      v8[2 * v20 + 1] = v24;
      if (v23) {
        ++v20;
      }
      ++v22;
      ++v21;
      --v13;
    }
    while (v13);
  }
  free(v10);
  free(v9);
  qsort_b(v8, v20, 0x10uLL, &__block_literal_global_4071);
  if (v20 >= 2)
  {
    size_t v25 = v20 - 1;
    __int16 v26 = v8 + 3;
    uint64_t v27 = 1;
    do
    {
      uint64_t v28 = *(v26 - 3);
      if (*(_DWORD *)(v28 + 4) != 4) {
        goto LABEL_45;
      }
      uint64_t v29 = *(v26 - 1);
      if (*(_DWORD *)(v29 + 4) != 4 || siquerynode_compare(v28, v29)) {
        goto LABEL_45;
      }
      BOOL v30 = (int *)*(v26 - 2);
      if (v30)
      {
        uint64_t v31 = *v26;
        if (*v26)
        {
          unsigned __int16 v32 = &v8[2 * v27 - 1];
          if (siquerynode_compare(*(v26 - 2), *v26)) {
            *__int16 v26 = (uint64_t)si_querynode_add((uint64_t)v30, v31);
          }
          else {
            siquerynode_release(v30);
          }
          goto LABEL_44;
        }
        siquerynode_release((int *)*(v26 - 2));
      }
      siquerynode_release((int *)*v26);
      *(v26 - 2) = 0;
      unsigned __int16 v32 = v26;
LABEL_44:
      *unsigned __int16 v32 = 0;
      siquerynode_release((int *)*(v26 - 3));
      *(v26 - 3) = 0;
LABEL_45:
      ++v27;
      v26 += 2;
      --v25;
    }
    while (v25);
  }
  if (!v20) {
    goto LABEL_79;
  }
  int v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = (int **)v8;
  do
  {
    if (*v35)
    {
      LOBYTE(v59) = 0;
      *(_OWORD *)&v8[2 * v34] = *(_OWORD *)v35;
      v33 |= catSearchSupportsOneAttribute(*v35, &v59) ^ 1;
      ++v34;
    }
    v35 += 2;
    --v20;
  }
  while (v20);
  if ((v34 > 6) | (v33 | a3) & 1)
  {
    uint64_t v36 = v34 - 1;
    if (v34 > 1)
    {
      unsigned int v37 = v8 + 2;
      while (1)
      {
        uint64_t v38 = *(v37 - 2);
        if (*(_DWORD *)(v38 + 4) != 4) {
          goto LABEL_72;
        }
        uint64_t v39 = *v37;
        if (*(_DWORD *)(*v37 + 4) != 4) {
          goto LABEL_72;
        }
        uint64_t v40 = (int *)*(v37 - 1);
        uint64_t v41 = v37[1];
        if (v40) {
          break;
        }
        if (v41)
        {
          Node = cloneQueryNode(*v37, 0);
          unint64_t v47 = si_querynode_join((uint64_t)Node, v37[1]);
          uint64_t v48 = *(v37 - 2);
          if (!v48) {
            goto LABEL_66;
          }
LABEL_68:
          unint64_t v49 = cloneQueryNode(v48, 0);
LABEL_69:
          v37[1] = (uint64_t)si_querynode_add((uint64_t)v47, (uint64_t)v49);
        }
LABEL_71:
        uint64_t v51 = si_querynode_add(*v37, *(v37 - 2));
        uint64_t *v37 = (uint64_t)v51;
        *((_DWORD *)v51 + 1) = 4;
        *(v37 - 2) = 0;
        *(v37 - 1) = 0;
LABEL_72:
        v37 += 2;
        if (!--v36) {
          goto LABEL_73;
        }
      }
      if (v41)
      {
        if (siquerynode_compare(*(v37 - 1), v41))
        {
          int v42 = cloneQueryNode(v39, 0);
          unint64_t v43 = si_querynode_join((uint64_t)v42, v37[1]);
          int v44 = (_OWORD *)*(v37 - 2);
          if (v44) {
            int v44 = cloneQueryNode((uint64_t)v44, 0);
          }
          unsigned int v45 = si_querynode_join((uint64_t)v44, *(v37 - 1));
          si_querynode_add((uint64_t)v43, (uint64_t)v45);
        }
        else
        {
          siquerynode_release(v40);
        }
        goto LABEL_71;
      }
      char v50 = cloneQueryNode(v38, 0);
      unint64_t v47 = si_querynode_join((uint64_t)v50, *(v37 - 1));
      uint64_t v48 = *v37;
      if (*v37) {
        goto LABEL_68;
      }
LABEL_66:
      unint64_t v49 = 0;
      goto LABEL_69;
    }
  }
LABEL_73:
  if (v34 >= 1)
  {
    uint64_t result = 0;
    unint64_t v53 = v8;
    do
    {
      if (*v53) {
        *(_OWORD *)&v8[2 * result++] = *(_OWORD *)v53;
      }
      v53 += 2;
      --v34;
    }
    while (v34);
  }
  else
  {
LABEL_79:
    uint64_t result = 0;
  }
  *a2 = v8;
  return result;
}

uint64_t catSearchSupportsOneAttribute(int *a1, unsigned char *a2)
{
  int v4 = *a1;
  if (!*a1)
  {
    if (*((uint64_t *)a1 + 3) >= 1)
    {
      uint64_t v6 = 0;
      do
        catSearchSupportsOneAttribute(*(void *)(*((void *)a1 + 4) + 8 * v6++), a2);
      while (*((void *)a1 + 3) > v6);
    }
    return 0;
  }
  if (v4 == 3)
  {
    uint64_t v7 = *(void *)(*((void *)a1 + 3) + 16);
    if (!v7) {
      return 0;
    }
    uint64_t v8 = *(void *)(v7 + 32);
    if ((v8 & 0x800) == 0) {
      return 0;
    }
    BOOL v10 = *(const char **)v7;
    uint64_t result = strcmp(*(const char **)v7, "kMDItemFSInvisible");
    if (result)
    {
      if (strcmp(v10, "kMDItemFSName"))
      {
        uint64_t result = strcmp(v10, "_kMDItemFSContentType");
        if (result)
        {
          uint64_t result = strcmp(v10, "_kMDItemFSContentTypeTree");
          if (result)
          {
            uint64_t result = strcmp(v10, "_kMDItemFSDisplayKind");
            if (result) {
              return strcmp(v10, "_kMDItemFSGroupId") != 0;
            }
          }
        }
        return result;
      }
      unint64_t v12 = *(unsigned char **)(v7 + 72);
      if (!v12 || *v12 != 46) {
        return 0;
      }
      uint64_t result = 0;
      if ((v8 & 0x40) != 0) {
        return result;
      }
      int v11 = *(_DWORD *)(v7 + 24);
      if (v11 != 1) {
        return result;
      }
      uint64_t result = 0;
    }
    else
    {
      LOBYTE(v11) = 1;
    }
    *a2 = v11;
    return result;
  }
  if (v4 != 1 || *((uint64_t *)a1 + 3) < 1) {
    return 0;
  }
  uint64_t v5 = 0;
  while (!catSearchSupportsOneAttribute(*(void *)(*((void *)a1 + 4) + 8 * v5), a2) || *a2)
  {
    if (*((void *)a1 + 3) <= ++v5) {
      return 0;
    }
  }
  return 1;
}

uint64_t calculateCost(uint64_t a1)
{
  switch(*(_DWORD *)a1)
  {
    case 0:
      *(_DWORD *)(a1 + 8) = 0;
      int64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 1)
      {
        for (int64_t i = 0; i < v2; ++i)
        {
          *(_DWORD *)(a1 + 8) += calculateCost(*(void *)(*(void *)(a1 + 32) + 8 * i));
          int64_t v2 = *(void *)(a1 + 24);
        }
      }
      goto LABEL_16;
    case 1:
      *(_DWORD *)(a1 + 8) = 0x7FFFFFFF;
      int64_t v2 = *(void *)(a1 + 24);
      if (v2 <= 0)
      {
LABEL_16:
        uint64_t v5 = *(void **)(a1 + 32);
      }
      else
      {
        int64_t v4 = 0;
        uint64_t v5 = *(void **)(a1 + 32);
        do
        {
          int v6 = calculateCost(v5[v4]);
          uint64_t v5 = *(void **)(a1 + 32);
          if (*(_DWORD *)(a1 + 8) <= v6)
          {
            uint64_t v7 = v5[v4];
          }
          else
          {
            *(_DWORD *)(a1 + 8) = v6;
            uint64_t v7 = v5[v4];
            if (*(unsigned char *)(v7 + 14)) {
              BOOL v8 = 1;
            }
            else {
              BOOL v8 = *(_DWORD *)(v7 + 4) == 4;
            }
            *(unsigned char *)(a1 + 14) = v8;
          }
          *(unsigned char *)(a1 + 15) |= *(unsigned char *)(v7 + 15);
          ++v4;
          int64_t v2 = *(void *)(a1 + 24);
        }
        while (v4 < v2);
      }
      qsort(v5, v2, 8uLL, (int (__cdecl *)(const void *, const void *))compare_node_cost);
      break;
    case 2:
      *(_DWORD *)(a1 + 8) = calculateCost(*(void *)(a1 + 24));
      break;
    case 3:
      uint64_t v9 = *(void *)(*(void *)(a1 + 24) + 16);
      if (v9) {
        LODWORD(v9) = *(_DWORD *)(v9 + 48);
      }
      *(_DWORD *)(a1 + 8) = v9;
      break;
    default:
      return *(unsigned int *)(a1 + 8);
  }
  return *(unsigned int *)(a1 + 8);
}

uint64_t _splitAndGroupBySource(uint64_t a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  long long v53 = 0u;
  long long v54 = 0u;
  if (!a1) {
    return 0;
  }
  *(unsigned char *)(a1 + 12) = 0;
  int v2 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 < 2u)
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v7, v6);
    if (*(uint64_t *)(a1 + 24) < 1)
    {
      uint64_t v3 = 0;
LABEL_18:
      if ((0xE8uLL >> v3))
      {
        uint64_t v52 = &v50;
        int v17 = DWORD1(v53);
        if (DWORD1(v53)) {
          uint64_t v18 = clone_node_copyingkind(a1, 1, (int *)v7, DWORD1(v53));
        }
        else {
          uint64_t v18 = 0;
        }
        int v50 = DWORD2(v53);
        if (DWORD2(v53)) {
          uint64_t v19 = clone_node_copyingkind(a1, 2, (int *)v7, DWORD2(v53));
        }
        else {
          uint64_t v19 = 0;
        }
        int v20 = HIDWORD(v53);
        if (HIDWORD(v53)) {
          __int16 v21 = clone_node_copyingkind(a1, 3, (int *)v7, HIDWORD(v53));
        }
        else {
          __int16 v21 = 0;
        }
        int v22 = v54;
        int v51 = v17;
        if (v54)
        {
          uint64_t v23 = clone_node_copyingkind(a1, 4, (int *)v7, v54);
          uint64_t v24 = v23;
          int v25 = *(_DWORD *)a1;
          if (*(_DWORD *)a1)
          {
            *(unsigned char *)(a1 + 13) |= *((unsigned char *)v23 + 13);
            if (v25 == 1)
            {
              if (*((unsigned char *)v23 + 15)) {
                char v26 = 1;
              }
              else {
                char v26 = *(unsigned char *)(a1 + 15);
              }
              *(unsigned char *)(a1 + 15) = v26;
            }
          }
          else
          {
            *(unsigned char *)(a1 + 12) = 1;
            *(unsigned char *)(a1 + 13) |= *((unsigned char *)v23 + 13);
          }
        }
        else
        {
          uint64_t v24 = 0;
        }
        int v28 = HIDWORD(v54);
        if (HIDWORD(v54))
        {
          uint64_t v29 = clone_node_copyingkind(a1, 7, (int *)v7, HIDWORD(v54));
          int v30 = *(_DWORD *)a1;
          if (*(_DWORD *)a1)
          {
            *(unsigned char *)(a1 + 13) |= *((unsigned char *)v29 + 13);
            if (v30 == 1)
            {
              if (*((unsigned char *)v29 + 15)) {
                char v31 = 1;
              }
              else {
                char v31 = *(unsigned char *)(a1 + 15);
              }
              *(unsigned char *)(a1 + 15) = v31;
            }
          }
          else
          {
            *(unsigned char *)(a1 + 12) = 1;
            *(unsigned char *)(a1 + 13) |= *((unsigned char *)v29 + 13);
          }
        }
        else
        {
          uint64_t v29 = 0;
        }
        *(void *)(a1 + 24) = 0;
        if (v18)
        {
          unsigned __int16 v32 = *(void **)(a1 + 32);
          *(void *)(a1 + 24) = 1;
          *unsigned __int16 v32 = v18;
          uint64_t v33 = *(void *)(a1 + 24);
        }
        else
        {
          uint64_t v33 = 0;
        }
        if (v19)
        {
          uint64_t v34 = *(void *)(a1 + 32);
          *(void *)(a1 + 24) = v33 + 1;
          *(void *)(v34 + 8 * v33) = v19;
          uint64_t v33 = *(void *)(a1 + 24);
        }
        if (v21)
        {
          uint64_t v35 = *(void *)(a1 + 32);
          *(void *)(a1 + 24) = v33 + 1;
          *(void *)(v35 + 8 * v33) = v21;
          uint64_t v33 = *(void *)(a1 + 24);
        }
        if (v24)
        {
          uint64_t v36 = *(void *)(a1 + 32);
          *(void *)(a1 + 24) = v33 + 1;
          *(void *)(v36 + 8 * v33) = v24;
          uint64_t v33 = *(void *)(a1 + 24);
        }
        if (v29)
        {
          uint64_t v37 = *(void *)(a1 + 32);
          *(void *)(a1 + 24) = v33 + 1;
          *(void *)(v37 + 8 * v33) = v29;
          uint64_t v33 = *(void *)(a1 + 24);
        }
        if (v33 == 1)
        {
          uint64_t v38 = *(_OWORD ***)(a1 + 32);
          uint64_t v39 = *v38;
          uint64_t v40 = *((void *)*v38 + 4);
          long long v41 = (*v38)[1];
          *(_OWORD *)a1 = **v38;
          *(_OWORD *)(a1 + 16) = v41;
          *(void *)(a1 + 32) = v40;
          free(v39);
          free(v38);
        }
        else
        {
          if (!*(_DWORD *)a1) {
            goto LABEL_89;
          }
          if (v33 >= 1)
          {
            uint64_t v42 = *(void *)(a1 + 32);
            do
            {
              if (*(unsigned char *)(*(void *)v42 + 15)) {
                *(unsigned char *)(a1 + 15) = 1;
              }
              v42 += 8;
              --v33;
            }
            while (v33);
          }
          if (!(v50 | v51 | v20))
          {
LABEL_89:
            if (v28 | v22) {
              *(unsigned char *)(a1 + 12) = 1;
            }
          }
        }
      }
      *(_DWORD *)(a1 + 4) = v3;
      return v3;
    }
    uint64_t v8 = 0;
    LODWORD(v3) = 0;
    uint64_t v9 = *(void *)(a1 + 32);
    BOOL v10 = v7;
    while (1)
    {
      int v11 = _splitAndGroupBySource(*(void *)(v9 + 8 * v8));
      if (!v11) {
        break;
      }
      uint64_t v12 = bucket[v11];
      ++*((_DWORD *)&v53 + v12);
      uint64_t v3 = v11 | v3;
      uint64_t v13 = *(void *)(a1 + 24);
      uint64_t v9 = *(void *)(a1 + 32);
      char v14 = *(unsigned char *)(a1 + 13) | *(unsigned char *)(*(void *)(v9 + 8 * v8) + 13);
      _DWORD *v10 = v12;
      v10[1] = v8;
      v10 += 2;
      *(unsigned char *)(a1 + 13) = v14;
      if (v13 <= ++v8) {
        goto LABEL_18;
      }
    }
    int v44 = __si_assert_copy_extra_329();
    unsigned int v45 = v44;
    uint64_t v46 = "";
    if (v44) {
      uint64_t v46 = v44;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "siquerynode.c", 365, "s!=NONE", v46);
LABEL_80:
    free(v45);
    if (__valid_fs(-1)) {
      uint64_t v47 = 2989;
    }
    else {
      uint64_t v47 = 3072;
    }
    *(_DWORD *)uint64_t v47 = -559038737;
    abort();
  }
  if (v2 == 2)
  {
    uint64_t v15 = _splitAndGroupBySource(*(void *)(a1 + 24));
    if (v15)
    {
      uint64_t v3 = v15;
      *(_DWORD *)(a1 + 4) = v15;
      uint64_t v16 = *(void *)(a1 + 24);
      *(unsigned char *)(a1 + 13) = *(unsigned char *)(v16 + 13);
      *(unsigned char *)(a1 + 15) = *(unsigned char *)(v16 + 15);
      return v3;
    }
    uint64_t v48 = __si_assert_copy_extra_329();
    unsigned int v45 = v48;
    unint64_t v49 = "";
    if (v48) {
      unint64_t v49 = v48;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "siquerynode.c", 410, "source!=NONE", v49);
    goto LABEL_80;
  }
  uint64_t v3 = 0;
  if (v2 == 3)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 24) + 16);
    if (!v4) {
      goto LABEL_8;
    }
    uint64_t v5 = *(void *)(v4 + 32);
    if ((v5 & 0x400) != 0)
    {
      uint64_t v3 = 1;
      goto LABEL_35;
    }
    if ((v5 & 0x800) == 0)
    {
LABEL_8:
      uint64_t v3 = 2;
LABEL_35:
      *(_DWORD *)(a1 + 4) = v3;
      return v3;
    }
    uint64_t v3 = 4;
    *(_DWORD *)(a1 + 4) = 4;
    if (!strcmp(*(const char **)v4, "kMDItemFSInvisible"))
    {
      uint64_t v27 = *(const char **)(v4 + 72);
      if (strcmp(v27, "*") && (strcmp(v27, "0") != 0) != (*(_DWORD *)(v4 + 24) == 5))
      {
        *(unsigned char *)(a1 + 13) = 1;
        *(unsigned char *)(a1 + 15) = 1;
      }
      return 4;
    }
  }
  return v3;
}

uint64_t rewriteForFSSearching(uint64_t a1, uint64_t **a2, void **a3)
{
  int v6 = *(_DWORD *)(a1 + 4);
  if ((v6 & 4) == 0 && !*(unsigned char *)(a1 + 13)) {
    goto LABEL_69;
  }
  if (!*(unsigned char *)(a1 + 12) && !*(unsigned char *)(a1 + 13))
  {
    if ((v6 & 4) != 0 && !*(_DWORD *)a1)
    {
LABEL_43:
      unint64_t v31 = *(void *)(a1 + 24);
      size_t v32 = 8 * v31;
      uint64_t v33 = (size_t *)MEMORY[0x1E4F14B00];
      if (((v31 >> 14) & 0x7FFFFFFFFFFFLL) == 0 && v32 > *MEMORY[0x1E4F14B00]) {
        ++sTotal_4070;
      }
      uint64_t v35 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v32, 0x31F9A007uLL);
      if (!v35) {
        _log_fault_for_malloc_failure();
      }
      unint64_t v36 = *(void *)(a1 + 24);
      size_t v37 = 8 * v36;
      if (((v36 >> 14) & 0x7FFFFFFFFFFFLL) == 0 && v37 > *v33) {
        ++sTotal_4070;
      }
      uint64_t v38 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v37, 0x31F9A007uLL);
      if (!v38) {
        _log_fault_for_malloc_failure();
      }
      int v51 = a2;
      size_t v39 = malloc_size(v35);
      if (*(uint64_t *)(a1 + 24) < 1)
      {
        uint64_t v23 = 0;
      }
      else
      {
        uint64_t v23 = 0;
        uint64_t v40 = 0;
        uint64_t v41 = v39 >> 3;
        do
        {
          uint64_t v52 = 0;
          long long v53 = 0;
          int v42 = rewriteForFSSearching(*(void *)(*(void *)(a1 + 32) + 8 * v40), &v53, &v52);
          if (v41 <= v42 + (int)v23)
          {
            uint64_t v43 = v41;
            do
            {
              uint64_t v41 = 2 * v43;
              size_t v44 = 16 * v43;
              uint64_t v35 = malloc_type_realloc(v35, 16 * v43, 0x2004093837F09uLL);
              uint64_t v38 = malloc_type_realloc(v38, v44, 0x2004093837F09uLL);
              uint64_t v43 = v41;
            }
            while (v41 <= v42 + (int)v23);
          }
          if (v42 >= 1)
          {
            for (uint64_t i = 0; i != v42; *((void *)v38 + (int)v23 + i++) = v46)
            {
              *((void *)v35 + (int)v23 + i) = *((void *)v52 + i);
              uint64_t v46 = v53;
              if (v53) {
                uint64_t v46 = (void *)*((void *)v53 + i);
              }
            }
            uint64_t v23 = (int)v23 + i;
          }
          free(v53);
          free(v52);
          ++v40;
        }
        while (v40 < *(void *)(a1 + 24));
      }
      *int v51 = (uint64_t *)v38;
      *a3 = v35;
      return v23;
    }
LABEL_69:
    *a2 = 0;
    *a3 = malloc_type_malloc(8uLL, 0x2004093837F09uLL);
    *(void *)*a3 = cloneQueryNode(a1, 0);
    return 1;
  }
  switch(*(_DWORD *)a1)
  {
    case 0:
      goto LABEL_43;
    case 1:
      uint64_t v7 = *(void *)(a1 + 24);
      uint64_t v8 = *(uint64_t **)(a1 + 32);
      uint64_t v9 = *v8;
      if (v7 >= 2)
      {
        uint64_t v10 = v7 - 1;
        int v11 = v8 + 1;
        do
        {
          if (*(_DWORD *)(*v11 + 8) < *(_DWORD *)(v9 + 8) || *(unsigned char *)(*v11 + 13)) {
            uint64_t v9 = *v11;
          }
          ++v11;
          --v10;
        }
        while (v10);
      }
      uint64_t v52 = 0;
      long long v53 = 0;
      uint64_t v12 = rewriteForFSSearching(v9, &v53, &v52);
      uint64_t v13 = v12;
      char v14 = (uint64_t *)v53;
      if (!v53)
      {
        size_t v15 = 8 * (int)v12;
        if ((((unint64_t)(int)v12 >> 14) & 0x7FFFFFFFFFFFLL) == 0 && v15 > *MEMORY[0x1E4F14B00]) {
          ++sTotal_4070;
        }
        char v14 = (uint64_t *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v15, 0x31F9A007uLL);
        if (!v14) {
          _log_fault_for_malloc_failure();
        }
      }
      if ((int)v13 >= 1)
      {
        uint64_t v16 = v13;
        int v17 = v14;
        do
        {
          Node = cloneQueryNode(a1, v9);
          if (v14)
          {
            uint64_t v19 = Node;
            if (*v17)
            {
              if (*(_DWORD *)Node == 3)
              {
                uint64_t v19 = si_querynode_join((uint64_t)Node, *v17);
              }
              else
              {
                int v20 = malloc_type_realloc(*((void **)Node + 4), (8 * *((void *)Node + 3)) | 1, 0xB1030DEuLL);
                v19[4] = v20;
                uint64_t v21 = *v17;
                uint64_t v22 = v19[3];
                v19[3] = v22 + 1;
                v20[v22] = v21;
              }
            }
            *int v17 = (uint64_t)v19;
          }
          ++v17;
          --v16;
        }
        while (v16);
      }
      *a2 = v14;
      *a3 = v52;
      uint64_t v23 = v13;
      break;
    case 2:
      uint64_t v52 = 0;
      long long v53 = 0;
      uint64_t v24 = rewriteForFSSearching(*(void *)(a1 + 24), &v53, &v52);
      uint64_t v23 = v24;
      uint64_t v48 = (uint64_t *)v53;
      unint64_t v49 = v52;
      if ((int)v24 >= 1)
      {
        int v25 = (void *)MEMORY[0x1E4F14B00];
        uint64_t v27 = v53;
        char v26 = v52;
        uint64_t v28 = v24;
        do
        {
          if (*v25 <= 0x27uLL) {
            ++sTotal_4070;
          }
          uint64_t v29 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x28uLL, 0x31F9A007uLL);
          if (!v29) {
            _log_fault_for_malloc_failure();
          }
          *(_DWORD *)uint64_t v29 = 2;
          v29[3] = *v26;
          *char v26 = v29;
          if (*v25 <= 0x27uLL) {
            ++sTotal_4070;
          }
          int v30 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x28uLL, 0x31F9A007uLL);
          if (!v30) {
            _log_fault_for_malloc_failure();
          }
          *(_DWORD *)int v30 = 2;
          v30[3] = *v27;
          *v27++ = v30;
          ++v26;
          --v28;
        }
        while (v28);
      }
      *a3 = v49;
      *a2 = v48;
      break;
    case 3:
      goto LABEL_69;
    default:
      uint64_t v23 = 0;
      MEMORY[0xBAD] = -559038737;
      break;
  }
  return v23;
}

_DWORD *clone_node_copyingkind(uint64_t a1, int a2, int *a3, unsigned int a4)
{
  uint64_t v4 = a3;
  if (a4 > 1)
  {
    uint64_t v8 = malloc_type_malloc(0x28uLL, 0x10A2040E651BF2BuLL);
    if (*(_DWORD *)a1 >= 4u)
    {
      int v20 = __si_assert_copy_extra_329();
      uint64_t v21 = v20;
      uint64_t v22 = "";
      if (v20) {
        uint64_t v22 = v20;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "siquerynode.c", 228, "node->kind<=QN_FACTOR", v22);
    }
    else
    {
      uint64_t v9 = v8;
      _DWORD *v8 = *(_DWORD *)a1;
      v8[1] = 0;
      *((_WORD *)v8 + 7) = *(_WORD *)(a1 + 14);
      size_t v10 = 8 * a4;
      if (!(a4 >> 14) && v10 > *MEMORY[0x1E4F14B00]) {
        ++sTotal_4070;
      }
      int v11 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v10, 0x31F9A007uLL);
      if (!v11) {
        _log_fault_for_malloc_failure();
      }
      *((void *)v9 + 3) = a4;
      *((void *)v9 + 4) = v11;
      *((unsigned char *)v9 + 13) = 0;
      uint64_t v12 = *(void *)(a1 + 24);
      if (v12 < 1)
      {
        unsigned int v15 = 0;
      }
      else
      {
        int v13 = 0;
        uint64_t v14 = 0;
        unsigned int v15 = 0;
        do
        {
          int v16 = *v4;
          v4 += 2;
          if (v16 == a2)
          {
            *(void *)(*((void *)v9 + 4) + 8 * v15) = *(void *)(*(void *)(a1 + 32) + 8 * v14);
            v9[1] |= *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8 * v14) + 4);
            ++v15;
            v13 |= *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8 * v14) + 13);
            *((unsigned char *)v9 + 13) = v13;
            uint64_t v12 = *(void *)(a1 + 24);
          }
          ++v14;
        }
        while (v14 < v12);
      }
      if (v15 == a4) {
        return v9;
      }
      uint64_t v23 = __si_assert_copy_extra_329();
      uint64_t v21 = v23;
      uint64_t v24 = "";
      if (v23) {
        uint64_t v24 = v23;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "siquerynode.c", 244, "count==scount", v24);
    }
    free(v21);
    if (__valid_fs(-1)) {
      uint64_t v25 = 2989;
    }
    else {
      uint64_t v25 = 3072;
    }
    *(_DWORD *)uint64_t v25 = -559038737;
    abort();
  }
  uint64_t v17 = *(void *)(a1 + 24);
  if (v17 < 1) {
    return 0;
  }
  uint64_t v18 = 0;
  uint64_t v9 = 0;
  do
  {
    if (a3[v18] == a2) {
      uint64_t v9 = *(_DWORD **)(*(void *)(a1 + 32) + v18 * 4);
    }
    v18 += 2;
    --v17;
  }
  while (v17);
  return v9;
}

uint64_t flatPageSearchBucketCompare(unsigned int **a1, unsigned int **a2)
{
  unint64_t v2 = (unint64_t)**a1 >> 3;
  unint64_t v3 = (unint64_t)**a2 >> 3;
  if (v2 > v3) {
    return 1;
  }
  if (v2 >= v3)
  {
    unint64_t v5 = (unint64_t)**a1 >> 3;
    unint64_t v6 = (unint64_t)**a2 >> 3;
    uint64_t v7 = __si_assert_copy_extra(0);
    uint64_t v8 = v7;
    uint64_t v9 = "";
    if (v7) {
      uint64_t v9 = v7;
    }
    __message_assert("%s:%u: failed assertion '%s' %s duplicate pages %ld %ld", "FindTermIDs.c", 617, "false", v9, v5, v6);
    free(v8);
    if (__valid_fs(-1)) {
      uint64_t v10 = 2989;
    }
    else {
      uint64_t v10 = 3072;
    }
    *(_DWORD *)uint64_t v10 = -559038737;
    abort();
  }
  return 0xFFFFFFFFLL;
}

uint64_t db_rwlock_wait(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v6 = db_rwlock_alloc_waiter(a1);
  LODWORD(v6[1].__sig) = a3;
  if ((a3 & 0xFFFFFFFE) == 2) {
    *(void *)v6[1].__opaque = pthread_self();
  }
  ++*(_DWORD *)(a1 + 208);
  db_rwlock_waiter_list_enqueue_inner((void *)(a1 + 16 * a2 + 64), (uint64_t)v6);
  do
  {
    uint64_t v7 = *(_opaque_pthread_t **)(a1 + 184);
    if (v7)
    {
      if (!*(unsigned char *)(a1 + 212) && *(_DWORD *)(a1 + 204) < (signed int)a2)
      {
        *(_DWORD *)(a1 + 204) = a2;
        uint64_t v8 = *(pthread_override_s **)(a1 + 176);
        qos_class_t v9 = qos_class_self();
        *(void *)(a1 + 176) = pthread_override_qos_class_start_np(v7, v9, 0);
        if (v8) {
          pthread_override_qos_class_end_np(v8);
        }
      }
    }
    uint64_t result = pthread_cond_wait(v6, (pthread_mutex_t *)a1);
  }
  while (!BYTE4(v6[1].__sig));
  *(void *)&v6[1].__opaque[8] = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = v6;
  return result;
}

void *db_rwlock_waiter_list_enqueue_inner(void *result, uint64_t a2)
{
  *(void *)(a2 + 64) = 0;
  uint64_t v2 = result[1];
  if (v2)
  {
    unint64_t v3 = (void *)(v2 + 64);
  }
  else
  {
    unint64_t v3 = result;
    if (*result)
    {
      uint64_t v4 = __si_assert_copy_extra_329();
      unint64_t v5 = v4;
      unint64_t v6 = "";
      if (v4) {
        unint64_t v6 = v4;
      }
      __message_assert(v4, "sdb2_rwlock.c", 269, "list->head==0", v6);
      free(v5);
      if (__valid_fs(-1)) {
        uint64_t v7 = 2989;
      }
      else {
        uint64_t v7 = 3072;
      }
      *(_DWORD *)uint64_t v7 = -559038737;
      abort();
    }
  }
  void *v3 = a2;
  result[1] = a2;
  return result;
}

pthread_cond_t *db_rwlock_alloc_waiter(uint64_t a1)
{
  uint64_t v1 = *(pthread_cond_t **)(a1 + 168);
  if (v1)
  {
    *(void *)(a1 + 168) = *(void *)&v1[1].__opaque[8];
  }
  else
  {
    uint64_t v1 = (pthread_cond_t *)malloc_type_malloc(0x48uLL, 0x10200407DFAD57DuLL);
    pthread_cond_init(v1, 0);
  }
  LODWORD(v1[1].__sig) = 0;
  BYTE4(v1[1].__sig) = 0;
  *(void *)v1[1].__opaque = 0;
  *(void *)&v1[1].__opaque[8] = 0;
  return v1;
}

uint64_t ContentIndexDocSetResolveOIDsAndGroups_Step(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, unsigned int a7, uint64_t a8, unint64_t a9, unint64_t *a10, unsigned char *a11, void *a12, int a13, int64_t a14, unint64_t a15, unint64_t a16, unsigned __int8 a17)
{
  uint64_t v740 = *MEMORY[0x1E4F143B8];
  if (!result)
  {
    *a10 = 0;
    return result;
  }
  uint64_t v17 = result;
  uint64_t v693 = a2;
  uint64_t v694 = a3;
  uint64_t v695 = a4;
  uint64_t v696 = a5;
  v697 = a6;
  unsigned int v698 = a7;
  uint64_t v699 = a8;
  uint64_t v18 = *(void *)(result + 80);
  v650 = (_DWORD *)v18;
  uint64_t v19 = *(void *)(v18 + 56);
  uint64_t v691 = *(void *)(v19 + 80);
  char v726 = 0;
  int v634 = *(_DWORD *)(v18 + 52);
  BOOL v20 = v634 == 3;
  if (a11) {
    *a11 = v20;
  }
  BOOL v690 = v20;
  v692 = a11;
  v702 = &v605;
  v704 = a10;
  unint64_t v633 = *a10;
  v703 = a12;
  uint64_t v21 = *a12;
  MEMORY[0x1F4188790](result);
  uint64_t v23 = (char *)&v605 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v23, v22);
  uint64_t v24 = *(void *)(v17 + 72);
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (char *)&v605 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v27, v26);
  MEMORY[0x1F4188790](v28);
  unint64_t v29 = (4 * v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  v689 = (char *)&v605 - v29;
  bzero((char *)&v605 - v29, 4 * v24);
  MEMORY[0x1F4188790](v30);
  v688 = (char *)&v605 - v29;
  bzero((char *)&v605 - v29, 4 * v24);
  uint64_t v31 = *((unsigned int *)v697 + 57);
  MEMORY[0x1F4188790](v32);
  uint64_t v34 = (char *)&v605 - ((v33 + 15) & 0xFFFFFFFF0);
  bzero(v34, v33);
  MEMORY[0x1F4188790](v35);
  v687 = (char *)&v605 - ((v36 + 15) & 0x7FFFFFFF0);
  bzero(v687, v36);
  int v37 = *(unsigned __int8 *)(v17 + 56);
  unsigned int v38 = v650[12];
  if (*(unsigned char *)(v17 + 56))
  {
    uint64_t v34 = 0;
    uint64_t v27 = 0;
    uint64_t v23 = 0;
    size_t v39 = 0;
    goto LABEL_6;
  }
  size_t v39 = 0;
  switch(v38)
  {
    case 0u:
    case 1u:
    case 2u:
      goto LABEL_19;
    case 3u:
    case 8u:
      uint64_t v63 = *((void *)v650 + 8);
      if (v63)
      {
        uint64_t v47 = (void *)(v63 + 88);
LABEL_18:
        size_t v39 = (_DWORD *)*v47;
LABEL_19:
        if (v24 >= 2) {
          goto LABEL_20;
        }
      }
      else
      {
        size_t v39 = 0;
        if (v24 >= 2)
        {
LABEL_20:
          uint64_t v48 = v689;
          unint64_t v49 = v688;
          uint64_t v50 = 1;
          uint64_t v51 = 0;
          while (1)
          {
            uint64_t v55 = *(void *)(v17 + 88 + 8 * v51);
            int v56 = (_DWORD *)v55;
            unsigned int v57 = *(_DWORD *)(v55 + 48);
            uint64_t v58 = 0;
            switch(v57)
            {
              case 0u:
              case 1u:
              case 2u:
                goto LABEL_29;
              case 3u:
              case 8u:
                uint64_t v60 = *(void *)(v55 + 64);
                if (!v60)
                {
                  uint64_t v52 = v50 - 1;
                  *(void *)&v23[8 * v51] = 0;
                  goto LABEL_22;
                }
                __int16 v59 = (uint64_t *)(v60 + 88);
LABEL_28:
                uint64_t v58 = *v59;
LABEL_29:
                *(void *)&v23[8 * v51] = v58;
                if (v57 > 9) {
LABEL_670:
                }
                  assert_invalid_doc_type(v56);
                if (((1 << v57) & 0x307) != 0)
                {
LABEL_21:
                  uint64_t v52 = v51;
LABEL_22:
                  uint64_t v53 = 0;
                  goto LABEL_23;
                }
                if (((1 << v57) & 0xF0) != 0)
                {
                  __int16 v61 = (uint64_t *)(v55 + 88);
                }
                else
                {
                  uint64_t v62 = *(void *)(v55 + 64);
                  if (!v62) {
                    goto LABEL_21;
                  }
                  __int16 v61 = (uint64_t *)(v62 + 96);
                }
                uint64_t v53 = *v61;
                uint64_t v52 = v51;
LABEL_23:
                *(void *)&v27[8 * v52] = v53;
                uint64_t v54 = 4 * v52;
                *(_DWORD *)&v48[v54] = -1;
                *(_DWORD *)&v49[v54] = -1;
                ++v50;
                if (v24 - 1 == ++v51) {
                  goto LABEL_72;
                }
                break;
              case 4u:
              case 5u:
              case 6u:
              case 7u:
              case 9u:
                __int16 v59 = (uint64_t *)(v55 + 80);
                goto LABEL_28;
              default:
                goto LABEL_670;
            }
          }
        }
      }
LABEL_72:
      if (v31)
      {
        int v112 = *((_DWORD *)v697 + 56);
        uint64_t v113 = 0;
        int v114 = v687;
        while (2)
        {
          uint64_t v117 = *(void *)(v17 + 8 * (v112 + v113) + 80);
          int v56 = (_DWORD *)v117;
          uint64_t v116 = 0;
          switch(*(_DWORD *)(v117 + 48))
          {
            case 0:
            case 1:
            case 2:
              goto LABEL_76;
            case 3:
            case 8:
              uint64_t v118 = *(void *)(v117 + 64);
              if (v118)
              {
                int v115 = (uint64_t *)(v118 + 88);
LABEL_75:
                uint64_t v116 = *v115;
              }
              else
              {
                uint64_t v116 = 0;
              }
LABEL_76:
              *(void *)&v34[8 * v113] = v116;
              *(_DWORD *)&v114[4 * v113++] = -1;
              if (v31 != v113) {
                continue;
              }
              goto LABEL_6;
            case 4:
            case 5:
            case 6:
            case 7:
            case 9:
              int v115 = (uint64_t *)(v117 + 80);
              goto LABEL_75;
            default:
              goto LABEL_670;
          }
        }
      }
LABEL_6:
      v681 = v34;
      if (v38 > 9) {
LABEL_671:
      }
        assert_invalid_doc_type(v650);
      uint64_t v40 = v39;
      int v41 = 1 << v38;
      if ((v41 & 0x307) != 0)
      {
        uint64_t v42 = 0;
        unint64_t v43 = v633;
        if (v37) {
          goto LABEL_42;
        }
        goto LABEL_14;
      }
      if ((v41 & 0xF0) != 0)
      {
        size_t v44 = (uint64_t *)(v18 + 88);
      }
      else
      {
        uint64_t v42 = *((void *)v650 + 8);
        if (!v42)
        {
          unint64_t v43 = v633;
          if (v37) {
            goto LABEL_42;
          }
          goto LABEL_14;
        }
        size_t v44 = (uint64_t *)(v42 + 96);
      }
      uint64_t v42 = *v44;
      unint64_t v43 = v633;
      if (v37) {
        goto LABEL_42;
      }
LABEL_14:
      if (!v39)
      {
        uint64_t result = 0;
        uint64_t v45 = v21;
        unint64_t v46 = v43;
        goto LABEL_652;
      }
LABEL_42:
      uint64_t v680 = v42;
      v683 = v23;
      uint64_t v64 = v19;
      __int16 v65 = (pthread_mutex_t *)(v19 + 14504);
      db_read_lock(v19 + 14504);
      if (!*(unsigned char *)(v19 + 8))
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
        {
          uint64_t v82 = 0;
          LOWORD(v727[0]) = 0;
          _os_log_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "Skipping because index is shut down", (uint8_t *)v727, 2u);
          uint64_t v45 = v21;
        }
        else
        {
          uint64_t v45 = v21;
          uint64_t v82 = 0;
        }
        goto LABEL_649;
      }
      v648 = v40;
      uint64_t v649 = v21;
      v700 = (pthread_mutex_t *)(v19 + 14504);
      int v678 = *(unsigned __int8 *)(v19 + 45);
      unsigned int add_explicit = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed);
      unsigned int v725 = 0;
      uint64_t v67 = add_explicit + 1;
      memset(v724, 0, sizeof(v724));
      unint64_t v68 = setThreadIdAndInfo(-1, (long long *)sIndexExceptionCallbacks, v19, 0, add_explicit + 1);
      *(_DWORD *)&v724[8] = HIDWORD(v68);
      unsigned int v725 = v68;
      *(_DWORD *)&v724[4] = v69;
      *(_DWORD *)v724 = v70;
      uint64_t v71 = *(void *)&threadData[18 * v68 + 2];
      uint64_t v72 = v71 + 320 * HIDWORD(v68);
      *(unsigned char *)(v72 + 216) = 0;
      int v685 = *(_DWORD *)(v72 + 312);
      long long v73 = *(void (**)(void))(v72 + 224);
      if (v73) {
        v73(*(void *)(v71 + 320 * HIDWORD(v68) + 288));
      }
      uint64_t v74 = v67;
      unsigned int v723 = v725;
      unsigned int v722 = *(_DWORD *)&v724[8];
      uint64_t v721 = *(void *)v724;
      if (_setjmp((int *)v72))
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          LOWORD(v727[0]) = 0;
          _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", (uint8_t *)v727, 2u);
        }
        *(_DWORD *)(v72 + 312) = v685;
        unsigned int v75 = v721;
        if (__THREAD_SLOT_KEY)
        {
          long long v76 = pthread_getspecific(__THREAD_SLOT_KEY);
          if (!v76) {
            goto LABEL_657;
          }
        }
        else
        {
          makeThreadId();
          long long v76 = pthread_getspecific(__THREAD_SLOT_KEY);
          if (!v76) {
            goto LABEL_657;
          }
        }
        long long v77 = v76;
        if ((unint64_t)v76 < 0x801)
        {
LABEL_51:
          uint64_t v78 = (uint64_t)v77 - 1;
          long long v79 = &threadData[18 * ((uint64_t)v77 - 1)];
          unsigned int v81 = v79[14];
          long long v80 = v79 + 14;
          if (v81 > v75)
          {
            do
              CIOnThreadCleanUpPop(v78);
            while (*v80 > v75);
          }
          dropThreadId(v723, 1, v74);
          CICleanUpReset(v723, HIDWORD(v721));
          uint64_t v45 = v649;
          uint64_t v82 = 0;
          goto LABEL_648;
        }
LABEL_657:
        makeThreadId();
        long long v77 = pthread_getspecific(__THREAD_SLOT_KEY);
        goto LABEL_51;
      }
      unsigned int v83 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed);
      unsigned int v720 = 0;
      int v84 = v83 + 1;
      memset(v719, 0, sizeof(v719));
      unint64_t v85 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v83 + 1);
      *(_DWORD *)&v719[8] = HIDWORD(v85);
      unsigned int v720 = v85;
      *(_DWORD *)&v719[4] = v86;
      *(_DWORD *)v719 = v87;
      uint64_t v88 = *(void *)&threadData[18 * v85 + 2];
      uint64_t v89 = v88 + 320 * HIDWORD(v85);
      int v90 = *(_DWORD *)(v89 + 312);
      long long v91 = *(void (**)(void))(v89 + 224);
      if (v91) {
        v91(*(void *)(v88 + 320 * HIDWORD(v85) + 288));
      }
      int v684 = v84;
      unsigned int v718 = v720;
      unsigned int v717 = *(_DWORD *)&v719[8];
      uint64_t v716 = *(void *)v719;
      if (_setjmp((int *)v89))
      {
        long long v92 = (_DWORD *)(v89 + 312);
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          LOWORD(v727[0]) = 0;
          _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", (uint8_t *)v727, 2u);
        }
        _DWORD *v92 = v90;
        unsigned int v93 = v716;
        if (__THREAD_SLOT_KEY)
        {
          uint64_t v94 = pthread_getspecific(__THREAD_SLOT_KEY);
          if (!v94) {
            goto LABEL_659;
          }
        }
        else
        {
          makeThreadId();
          uint64_t v94 = pthread_getspecific(__THREAD_SLOT_KEY);
          if (!v94) {
            goto LABEL_659;
          }
        }
        uint64_t v95 = v94;
        if ((unint64_t)v94 < 0x801)
        {
LABEL_64:
          uint64_t v96 = (uint64_t)v95 - 1;
          int v97 = &threadData[18 * ((uint64_t)v95 - 1)];
          unsigned int v99 = v97[14];
          long long v98 = v97 + 14;
          if (v99 > v93)
          {
            do
              CIOnThreadCleanUpPop(v96);
            while (*v98 > v93);
          }
          dropThreadId(v718, 1, v684);
          CICleanUpReset(v718, HIDWORD(v716));
          uint64_t v100 = v649;
          uint64_t v82 = 0;
          goto LABEL_645;
        }
LABEL_659:
        makeThreadId();
        uint64_t v95 = pthread_getspecific(__THREAD_SLOT_KEY);
        goto LABEL_64;
      }
      int v679 = v90;
      v682 = v27;
      int v663 = a13;
      char v726 = 1;
      int v101 = *(_DWORD *)(v17 + 40);
      uint64_t v102 = *(void *)(v19 + 14408);
      uint64_t v103 = *(void *)(v19 + 14432);
      uint64_t v104 = *(void *)(v19 + 14416);
      uint64_t v701 = v19;
      uint64_t v677 = *(void *)(v19 + 14424);
      int v715 = -1;
      int v714 = -1;
      long long v105 = v697;
      unint64_t v106 = v697[3];
      if (v106)
      {
        uint64_t v107 = (int64x2_t *)v697[4];
        uint64_t v108 = (int64x2_t *)v697[5];
        if (v106 > 3)
        {
          unint64_t v111 = v106 & 0xFFFFFFFFFFFFFFFCLL;
          int v121 = v108 + 1;
          int v122 = v107 + 1;
          int64x2_t v123 = 0uLL;
          unint64_t v124 = v106 & 0xFFFFFFFFFFFFFFFCLL;
          int64x2_t v125 = 0u;
          int64x2_t v126 = 0u;
          int64x2_t v127 = 0u;
          do
          {
            int64x2_t v128 = vaddq_s64(v122[-1], v126);
            int64x2_t v129 = vaddq_s64(*v122, v127);
            int64x2_t v130 = vaddq_s64(v121[-1], v123);
            int64x2_t v131 = vaddq_s64(*v121, v125);
            v121 += 2;
            v122 += 2;
            int64x2_t v123 = v130;
            int64x2_t v125 = v131;
            int64x2_t v126 = v128;
            int64x2_t v127 = v129;
            v124 -= 4;
          }
          while (v124);
          uint64_t v110 = vaddvq_s64(vaddq_s64(v129, v128));
          uint64_t v109 = vaddvq_s64(vaddq_s64(v131, v130));
          uint64_t v120 = v109;
          uint64_t v119 = v110;
          if (v106 == (v106 & 0xFFFFFFFFFFFFFFFCLL)) {
            goto LABEL_87;
          }
        }
        else
        {
          uint64_t v109 = 0;
          uint64_t v110 = 0;
          unint64_t v111 = 0;
        }
        unint64_t v132 = v106 - v111;
        uint64_t v133 = &v107->i64[v111];
        uint64_t v134 = &v108->i64[v111];
        uint64_t v135 = v109;
        uint64_t v136 = v110;
        do
        {
          uint64_t v137 = *v133++;
          uint64_t v119 = v137 + v136;
          uint64_t v138 = *v134++;
          uint64_t v120 = v138 + v135;
          uint64_t v136 = v119;
          v135 += v138;
          --v132;
        }
        while (v132);
      }
      else
      {
        uint64_t v119 = 0;
        uint64_t v120 = 0;
      }
LABEL_87:
      uint64_t v675 = v119;
      uint64_t v676 = v120;
      LODWORD(v139) = v101 - 1;
      int v674 = v663;
      int HasWeights = ContentIndexDocSetHasWeights(*(void *)(v17 + 8 * *(void *)(v17 + 64) + 80));
      BOOL v142 = (HasWeights & 1) != 0 && *(void *)(v17 + 72) == *((_DWORD *)v105 + 57) + 2;
      BOOL v673 = v142;
      uint64_t v671 = v102;
      unint64_t v672 = a16;
      uint64_t v670 = v103;
      unint64_t v669 = a15;
      uint64_t v667 = v104;
      int64_t v668 = a14;
      uint64_t v666 = v677;
      int v665 = v663 << 25;
      unint64_t v664 = a9;
      uint64_t v705 = v17;
      unsigned int v686 = v74;
      if ((v674 & 4) != 0)
      {
        uint64_t v64 = v701;
        v438 = v682;
        if (*(unsigned char *)(v17 + 56))
        {
          unsigned int v439 = v139;
LABEL_456:
          uint64_t v100 = v649;
          uint64_t v82 = 0;
          goto LABEL_639;
        }
        if (*(_DWORD *)(v17 + 40) <= *(_DWORD *)(v17 + 44) || v633 >= v664)
        {
          unsigned int v439 = v139;
          uint64_t v100 = v649;
          uint64_t v82 = 0;
          goto LABEL_639;
        }
        int v442 = *(_DWORD *)(v17 + 40);
        int v647 = v673 | HasWeights ^ 1;
        BOOL v444 = v634 == 1 && v680 != 0;
        BOOL v646 = v444;
        uint64_t v644 = 80;
        uint64_t v645 = v17 + 88;
        unsigned int v445 = 0;
        int v446 = 0;
        unint64_t v447 = v43;
        v448 = v648;
        while (1)
        {
          unint64_t v43 = v447;
          unsigned int v635 = v445;
          uint64_t v452 = (v442 - 1);
          int v640 = v446;
          unsigned int v641 = v442 - 1;
          if (v650[13] == 3
            || !CIIndexSetHasIndexWithHint((BOOL)v448, v442 - 1, &v715)
            || v680 && CIIndexSetHasIndexWithHint(v680, v452, &v714))
          {
            if (v678)
            {
              int v453 = *(unsigned __int8 *)(v670 + v452);
              if (!*(unsigned char *)(v670 + v452)) {
                goto LABEL_488;
              }
              goto LABEL_478;
            }
            int v458 = *(_DWORD *)(v670 + 4 * (v641 / 5uLL)) >> (6 * (v641 % 5));
            if ((v458 & 0x3F) != 0
              && ((v674 & 1) == 0 || ((*(_DWORD *)(v670 + 4 * (v641 / 5uLL)) >> (6 * (v641 % 5))) & 0x1F) != 0x11))
            {
              break;
            }
          }
          unsigned int v449 = v635;
          int v450 = v640;
LABEL_468:
          unsigned int v445 = v449;
          BOOL v451 = v641 <= *(_DWORD *)(v17 + 44) || v43 >= v664;
          int v446 = v450;
          unint64_t v447 = v43;
          int v442 = v452;
          if (v451)
          {
            unsigned int v439 = v452;
            goto LABEL_456;
          }
        }
        if ((v674 & 2) != 0)
        {
          int v453 = (*(_DWORD *)(v670 + 4 * (v641 / 5uLL)) >> (6 * (v641 % 5))) & 0x3F;
          if ((v458 & 0x20) != 0)
          {
LABEL_488:
            unsigned int v449 = v635;
            int v450 = v640;
LABEL_627:
            v448 = v648;
            goto LABEL_468;
          }
        }
        else
        {
          int v453 = (*(_DWORD *)(v670 + 4 * (v641 / 5uLL)) >> (6 * (v641 % 5))) & 0x3F;
        }
LABEL_478:
        unint64_t v639 = v43;
        uint64_t v454 = *((unsigned int *)v105 + 57);
        unsigned int v642 = v452;
        if (v454)
        {
          v455 = v687;
          uint64_t v456 = 0;
          while (!CIIndexSetHasIndexWithHint(*(void *)&v681[8 * v456], v642, v455))
          {
            ++v456;
            ++v455;
            if (v454 == v456)
            {
              int v457 = v453;
              goto LABEL_491;
            }
          }
          int v457 = *((_DWORD *)v105 + 58) + v456;
LABEL_491:
          uint64_t v452 = v642;
        }
        else
        {
          int v457 = v453;
        }
        unint64_t v43 = v639;
        *(_WORD *)(v696 + 2 * v639) = v457;
        LODWORD(v706) = 0;
        if (v667) {
          unsigned int v459 = *(_DWORD *)(v667 + 4 * v452);
        }
        else {
          unsigned int v459 = 0;
        }
        unsigned int v460 = v698 - v459;
        BOOL v451 = v459 >= v698;
        unsigned int v461 = v459 - v698;
        if (v461 != 0 && v451) {
          unsigned int v462 = v461;
        }
        else {
          unsigned int v462 = v460;
        }
        int v463 = v666;
        if (v666)
        {
          v464 = (int *)(v677 + 8 * v641);
          int v465 = *v464;
          int v463 = v464[1];
        }
        else
        {
          int v465 = 0;
        }
        int v626 = v463;
        unsigned int v627 = v462;
        if (v647)
        {
          LOBYTE(v712) = 0;
          v713[0] = 0;
          if (!v673)
          {
LABEL_503:
            int v466 = 0;
            float v467 = 0.0;
            goto LABEL_513;
          }
        }
        else
        {
          unint64_t v468 = v105[(v457 >> 6) + 24];
          LOBYTE(v712) = 0;
          v713[0] = 0;
          if (((v468 >> (v457 & 0x1F)) & 1) == 0) {
            goto LABEL_503;
          }
        }
        float v467 = 0.0;
        int v466 = 1;
        if (v699 && !*(unsigned char *)(v17 + 55))
        {
          v469 = **(uint64_t ***)(v699 + 32 * (v457 & 0xDF & (v665 >> 31)) + 40);
          if (v469 && v469[2] > v668)
          {
            uint64_t v470 = *v469;
            v471 = (long long *)(v470 + 80);
            BOOL v146 = v470 == 0;
            v472 = &ZERO_RANKING_WRAPPED_BITS;
            if (!v146) {
              v472 = v471;
            }
            float v467 = *((float *)v472 + 16);
          }
          int v466 = 1;
        }
LABEL_513:
        uint64_t v473 = *(void *)(v17 + 8 * *(void *)(v17 + 64) + 80);
        unsigned int v632 = v457 & 0xFFFFFFDF;
        long long v474 = *((_OWORD *)v105 + 13);
        long long v737 = *((_OWORD *)v105 + 12);
        long long v738 = v474;
        long long v739 = *((_OWORD *)v105 + 14);
        long long v475 = *((_OWORD *)v105 + 9);
        long long v733 = *((_OWORD *)v105 + 8);
        long long v734 = v475;
        long long v476 = *((_OWORD *)v105 + 10);
        long long v736 = *((_OWORD *)v105 + 11);
        long long v735 = v476;
        long long v477 = *((_OWORD *)v105 + 5);
        long long v729 = *((_OWORD *)v105 + 4);
        long long v730 = v477;
        long long v478 = *((_OWORD *)v105 + 7);
        long long v731 = *((_OWORD *)v105 + 6);
        long long v732 = v478;
        long long v479 = *((_OWORD *)v105 + 1);
        v727[0] = *(_OWORD *)v105;
        v727[1] = v479;
        long long v480 = *((_OWORD *)v105 + 3);
        v727[2] = *((_OWORD *)v105 + 2);
        long long v728 = v480;
        int v625 = v466;
        float v481 = hybridScoringL1(v452, v727, v64, v466, v473, 1, (float *)&v706, (uint8_t *)&v712, v467, (int *)v713);
        if (v699)
        {
          if (v673) {
            goto LABEL_542;
          }
          if (v632 >= *(_DWORD *)(v699 + 4))
          {
            v602 = __si_assert_copy_extra_329();
            v600 = v602;
            v603 = "";
            if (v602) {
              v603 = v602;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "ContentIndexQuery.c", 4482, "!groupDone || (uint32_t)group<groupDone->groupCount", v603);
LABEL_666:
            free(v600);
            if (__valid_fs(-1)) {
              uint64_t v604 = 2989;
            }
            else {
              uint64_t v604 = 3072;
            }
            *(_DWORD *)uint64_t v604 = -559038737;
            abort();
          }
        }
        else if (v673)
        {
          goto LABEL_542;
        }
        unint64_t v482 = *v105;
        if (!*v105)
        {
LABEL_543:
          uint64_t v521 = 0;
          unint64_t v522 = 0;
          uint64_t v520 = 0;
LABEL_544:
          unint64_t v535 = v482;
          uint64_t v536 = v520;
          unint64_t v537 = v641;
          uint64_t v538 = 8 * v43;
          *(void *)(v694 + v538) = v691 + v641;
          uint64_t v539 = *(void *)(v671 + 8 * v642);
          *(void *)(v693 + v538) = v539;
          if (v539)
          {
            if (*v105)
            {
              int v540 = v706;
              char v541 = LOBYTE(v712);
              uint64_t v542 = *v105 + v43 * v644;
              *(void *)uint64_t v542 = v521;
              *(void *)(v542 + 8) = v522;
              *(void *)(v542 + 16) = v521;
              *(void *)(v542 + 24) = v522;
              *(void *)(v542 + 32) = v536;
              *(void *)(v542 + 40) = v535;
              *(_DWORD *)(v542 + 48) = v627;
              *(_DWORD *)(v542 + 52) = v465;
              *(_DWORD *)(v542 + 56) = v626;
              *(float *)(v542 + 60) = v481;
              *(_DWORD *)(v542 + 64) = v540;
              *(unsigned char *)(v542 + 68) = v541;
              *(unsigned char *)(v542 + 69) = v625;
            }
            uint64_t v543 = v105[7];
            if (v543) {
              *(unsigned char *)(v105[1] + 5 * v43) = countInUpdates(v543, v537);
            }
            uint64_t v544 = v105[8];
            uint64_t v64 = v701;
            if (v544) {
              *(unsigned char *)(v105[1] + 5 * v43 + 1) = countInUpdates(v544, v537);
            }
            uint64_t v545 = v105[9];
            if (v545) {
              *(unsigned char *)(v105[1] + 5 * v43 + 2) = countInUpdates(v545, v537);
            }
            uint64_t v546 = v105[10];
            if (v546) {
              *(unsigned char *)(v105[1] + 5 * v43 + 3) = countInUpdates(v546, v537);
            }
            uint64_t v547 = v105[11];
            if (v547) {
              *(unsigned char *)(v105[1] + 5 * v43 + 4) = countInUpdates(v547, v537);
            }
            if (!v105[15] || !v105[21]) {
              goto LABEL_574;
            }
            uint64_t v548 = 0;
            uint64_t v549 = v105[21];
            unint64_t v550 = v105[15];
            uint64_t v551 = 0;
            float v552 = 3.4028e38;
LABEL_561:
            uint64_t v553 = *(void *)(v549 + 8 * v551);
            if (v553)
            {
              LOBYTE(v727[0]) = 0;
              float v554 = fminf(v552, distanceHolderGetMinDistance(v553, *(void *)(v64 + 80) + v537, v727));
              if (v548) {
                LODWORD(v555) = v548;
              }
              else {
                LODWORD(v555) = 1;
              }
              if (LOBYTE(v727[0])) {
                uint64_t v555 = v555;
              }
              else {
                uint64_t v555 = v548;
              }
              if (!LOBYTE(v727[0])) {
                float v554 = v552;
              }
              unint64_t v556 = v105[15];
              goto LABEL_572;
            }
            while (1)
            {
              unint64_t v556 = v550;
              uint64_t v555 = v548;
              float v554 = v552;
LABEL_572:
              unint64_t v550 = v556;
              if (v551 + 1 >= v556) {
                break;
              }
              ++v551;
              uint64_t v549 = v105[21];
              float v552 = v554;
              uint64_t v548 = v555;
              if (v549) {
                goto LABEL_561;
              }
            }
            unint64_t v43 = v639;
            if (v555)
            {
              char v557 = 1;
            }
            else
            {
LABEL_574:
              float v554 = 3.4028e38;
              char v557 = 0;
            }
            uint64_t v558 = v105[2] + 16 * v43;
            *(float *)(v558 + 4) = v554;
            *(unsigned char *)uint64_t v558 = v557;
            if (!v105[16] || !v105[22]) {
              goto LABEL_592;
            }
            uint64_t v559 = 0;
            uint64_t v560 = v105[22];
            unint64_t v561 = v105[16];
            uint64_t v562 = 0;
            float v563 = 3.4028e38;
LABEL_579:
            uint64_t v564 = *(void *)(v560 + 8 * v562);
            if (v564)
            {
              LOBYTE(v727[0]) = 0;
              float v565 = fminf(v563, distanceHolderGetMinDistance(v564, *(void *)(v64 + 80) + v537, v727));
              if (v559) {
                LODWORD(v566) = v559;
              }
              else {
                LODWORD(v566) = 1;
              }
              if (LOBYTE(v727[0])) {
                uint64_t v566 = v566;
              }
              else {
                uint64_t v566 = v559;
              }
              if (!LOBYTE(v727[0])) {
                float v565 = v563;
              }
              unint64_t v567 = v105[16];
              goto LABEL_590;
            }
            while (1)
            {
              unint64_t v567 = v561;
              uint64_t v566 = v559;
              float v565 = v563;
LABEL_590:
              unint64_t v561 = v567;
              if (v562 + 1 >= v567) {
                break;
              }
              ++v562;
              uint64_t v560 = v105[22];
              float v563 = v565;
              uint64_t v559 = v566;
              if (v560) {
                goto LABEL_579;
              }
            }
            unint64_t v43 = v639;
            if (v566)
            {
              char v568 = 1;
            }
            else
            {
LABEL_592:
              float v565 = 3.4028e38;
              char v568 = 0;
            }
            uint64_t v569 = v105[2] + 16 * v43;
            *(float *)(v569 + 8) = v565;
            *(unsigned char *)(v569 + 1) = v568;
            if (!v105[17] || !v105[23]) {
              goto LABEL_610;
            }
            uint64_t v570 = 0;
            uint64_t v571 = v105[23];
            unint64_t v572 = v105[17];
            uint64_t v573 = 0;
            float v574 = 3.4028e38;
LABEL_597:
            uint64_t v575 = *(void *)(v571 + 8 * v573);
            if (v575)
            {
              LOBYTE(v727[0]) = 0;
              float v576 = fminf(v574, distanceHolderGetMinDistance(v575, *(void *)(v64 + 80) + v537, v727));
              if (v570) {
                LODWORD(v577) = v570;
              }
              else {
                LODWORD(v577) = 1;
              }
              if (LOBYTE(v727[0])) {
                uint64_t v577 = v577;
              }
              else {
                uint64_t v577 = v570;
              }
              if (!LOBYTE(v727[0])) {
                float v576 = v574;
              }
              unint64_t v578 = v105[17];
              goto LABEL_608;
            }
            while (1)
            {
              unint64_t v578 = v572;
              uint64_t v577 = v570;
              float v576 = v574;
LABEL_608:
              unint64_t v572 = v578;
              if (v573 + 1 >= v578) {
                break;
              }
              ++v573;
              uint64_t v571 = v105[23];
              float v574 = v576;
              uint64_t v570 = v577;
              if (v571) {
                goto LABEL_597;
              }
            }
            unint64_t v43 = v639;
            if (v577)
            {
              char v579 = 1;
            }
            else
            {
LABEL_610:
              float v576 = 3.4028e38;
              char v579 = 0;
            }
            uint64_t v580 = v105[2] + 16 * v43;
            *(unsigned char *)(v580 + 2) = v579;
            char v581 = v632;
            *(float *)(v580 + 12) = v576;
            uint64_t v582 = 1 << v581;
            if ((v582 & v640) != 0) {
              unint64_t v583 = v635;
            }
            else {
              unint64_t v583 = v635 + 1;
            }
            unint64_t v584 = v43;
            if ((v582 & v640) != 0) {
              int v585 = 0;
            }
            else {
              int v585 = v582;
            }
            uint64_t v586 = v695;
            LODWORD(v452) = v642;
            if (v695)
            {
              *(unsigned char *)(v695 + v584) = v690;
              if (v646)
              {
                int HasIndex = CIIndexSetHasIndex(v680, v452);
                uint64_t v586 = v695;
                if (HasIndex) {
                  *(unsigned char *)(v695 + v639) = 1;
                }
              }
              unint64_t v584 = v639;
              if (v692 && *(unsigned char *)(v586 + v639)) {
                unsigned char *v692 = 1;
              }
            }
            unsigned int v588 = v583;
            int v589 = v585 | v640;
            unint64_t v43 = v584 + 1;
            if (v584 + 1 > v672 && v583 < v669)
            {
              uint64_t v82 = 1;
              unsigned int v439 = v452;
              uint64_t v100 = v649;
              goto LABEL_639;
            }
          }
          else
          {
            unsigned int v588 = v635;
            int v589 = v640;
            uint64_t v64 = v701;
            LODWORD(v452) = v642;
          }
          int v450 = v589;
          unsigned int v449 = v588;
          goto LABEL_627;
        }
        uint64_t v483 = v105[3];
        if (v483 >= 1)
        {
          uint64_t v484 = v105[4];
          uint64_t v485 = v105[5];
          uint64_t v486 = 0;
          uint64_t v487 = v675;
          uint64_t v488 = v676;
          unint64_t v489 = 0;
          uint64_t v490 = 0;
          unint64_t v491 = 0;
          do
          {
            unint64_t v495 = v491;
            uint64_t v497 = v490;
            unint64_t v498 = v489;
            uint64_t v499 = v486;
            uint64_t v500 = v488;
            uint64_t v501 = v487;
            uint64_t v496 = v483--;
            uint64_t v523 = *(void *)(v484 + 8 * v483);
            uint64_t v502 = *(void *)(v485 + 8 * v483);
            uint64_t v606 = v523;
            if (v523)
            {
              uint64_t v607 = v502;
              uint64_t v609 = v487;
              uint64_t v610 = v488;
              uint64_t v616 = v486;
              unint64_t v617 = v498;
              uint64_t v619 = v490;
              unint64_t v620 = v491;
              uint64_t v621 = v496;
              uint64_t v524 = 0;
              unint64_t v525 = 0;
              uint64_t v526 = 4 * v487 - 4 * v523;
              uint64_t v527 = 8 * v487 - 8 * v523;
              v528 = &v688[v526];
              v529 = &v438[v527];
              uint64_t v530 = v645 + v527;
              v531 = &v689[v526];
              v532 = &v683[v527];
              uint64_t v533 = 0;
              do
              {
                if (CIIndexSetHasIndexWithHint(*(void *)&v532[8 * v525], v642, v531)
                  && ((uint64_t v533 = (v533 + 1), *(_DWORD *)(*(void *)(v530 + 8 * v525) + 52) == 3)
                   || (uint64_t v534 = *(void *)&v529[8 * v525]) != 0 && CIIndexSetHasIndexWithHint(v534, v642, v528)))
                {
                  uint64_t v484 = (v524 + 1);
                  uint64_t v485 = v533;
                }
                else
                {
                  uint64_t v485 = v533;
                  uint64_t v484 = v524;
                }
                ++v525;
                v528 += 4;
                v531 += 4;
                uint64_t v524 = v484;
                uint64_t v533 = v485;
              }
              while (v525 < *(void *)(v697[4] + 8 * v483));
              long long v105 = v697;
              uint64_t v492 = *(void *)(v697[5] + 8 * v483);
              uint64_t v493 = v697[5];
              uint64_t v494 = v697[4];
              uint64_t v17 = v705;
              LODWORD(v74) = v686;
              v438 = v682;
              unint64_t v43 = v639;
              unint64_t v495 = v620;
              uint64_t v496 = v621;
              uint64_t v497 = v619;
              uint64_t v499 = v616;
              unint64_t v498 = v617;
              uint64_t v501 = v609;
              uint64_t v500 = v610;
              uint64_t v502 = v607;
            }
            else
            {
              LOBYTE(v492) = v502;
              uint64_t v493 = v485;
              uint64_t v494 = v484;
              LODWORD(v484) = 0;
              LODWORD(v485) = 0;
            }
            uint64_t v503 = 0;
            int v504 = v484;
            int v505 = v485;
            uint64_t v484 = v494;
            uint64_t v485 = v493;
            char v506 = v492;
            uint64_t v487 = v501 - v606;
            uint64_t v507 = v500 - v502;
            if (v504 >= 1 << v506) {
              int v504 = (1 << v506) - 1;
            }
            uint64_t v508 = (uint64_t)v504 >> 63 << v507;
            uint64_t v509 = (uint64_t)v504 << v507;
            if (v505 >= 1 << v506) {
              int v505 = (1 << v506) - 1;
            }
            BOOL v510 = (v507 & 0x40) == 0;
            uint64_t v511 = (uint64_t)v505 >> 63 << v507;
            uint64_t v512 = (uint64_t)v505 << v507;
            unint64_t v513 = (unint64_t)v504 >> 1;
            uint64_t v488 = v507;
            char v514 = ~(_BYTE)v507;
            unint64_t v515 = v508 | (v513 >> v514);
            if (!v510)
            {
              unint64_t v515 = v509;
              uint64_t v509 = 0;
            }
            unint64_t v516 = v515 | v498;
            uint64_t v517 = v509 | v499;
            unint64_t v518 = v511 | ((unint64_t)v505 >> 1 >> v514);
            if (v510) {
              uint64_t v503 = v512;
            }
            else {
              unint64_t v518 = v512;
            }
            unint64_t v491 = v518 | v495;
            uint64_t v519 = v503 | v497;
            uint64_t v520 = v517;
            uint64_t v486 = v517;
            unint64_t v482 = v516;
            unint64_t v489 = v516;
            uint64_t v521 = v519;
            uint64_t v490 = v519;
            unint64_t v522 = v491;
          }
          while (v496 > 1);
          goto LABEL_544;
        }
LABEL_542:
        unint64_t v482 = 0;
        goto LABEL_543;
      }
      memset(v713, 0, 24);
      uint64_t v143 = (*(_DWORD *)(v17 + 40) - 1);
      uint64_t v64 = v701;
      uint64_t v144 = v682;
      if (!*(unsigned char *)(v17 + 56)) {
        _CIIndexSetInitializeEnumeratorForRange(v648, (uint64_t)v713, *(_DWORD *)(v17 + 44), *(_DWORD *)(v17 + 40) - 1);
      }
      if (v633 >= v664)
      {
        uint64_t v440 = 0;
        uint64_t v441 = v649;
        goto LABEL_638;
      }
      int v145 = a17;
      int v662 = HasWeights;
      if (!v668) {
        int v145 = 1;
      }
      int v661 = v145;
      v660 = &v727[1];
      BOOL v146 = v634 != 1 || v680 == 0;
      int v147 = !v146;
      int v659 = v147;
      uint64_t v657 = 80;
      uint64_t v658 = v17 + 88;
      *(void *)&long long v141 = 136316162;
      long long v656 = v141;
      uint64_t v148 = 0;
      uint64_t v149 = 0;
      uint64_t v139 = v143;
      unint64_t v150 = v43;
      uint64_t v151 = v649;
      uint64_t v152 = v697;
      while (1)
      {
        uint64_t v643 = v151;
        unint64_t v653 = v150;
        uint64_t v159 = v148;
        uint64_t v160 = v149;
        if (*(unsigned char *)(v17 + 56))
        {
          uint64_t v161 = (v139 - 1);
        }
        else
        {
          int v162 = _CIIndexSetEnumeratorNext(v713);
          uint64_t v161 = v139;
          LODWORD(v139) = v162;
        }
        uint64_t v163 = v667;
        unsigned int v655 = v139;
        if (!v139)
        {
          uint64_t v440 = 0;
          uint64_t v441 = v643;
          unint64_t v43 = v653;
          goto LABEL_638;
        }
        uint64_t v157 = v161;
        if (v678)
        {
          unsigned int v651 = v159;
          int v164 = *(unsigned __int8 *)(v670 + v655);
          if (!*(unsigned char *)(v670 + v655)) {
            goto LABEL_147;
          }
        }
        else
        {
          int v172 = *(_DWORD *)(v670 + 4 * (v655 / 5uLL)) >> (6 * (v655 % 5));
          if ((v172 & 0x3F) == 0)
          {
            uint64_t v156 = v159;
            uint64_t v173 = v643;
            unint64_t v155 = v653;
            goto LABEL_148;
          }
          if ((v674 & 1) != 0 && ((*(_DWORD *)(v670 + 4 * (v655 / 5uLL)) >> (6 * (v655 % 5))) & 0x1F) == 0x11)
          {
            uint64_t v156 = v159;
            uint64_t v173 = v643;
            unint64_t v155 = v653;
LABEL_148:
            uint64_t v192 = v160;
            goto LABEL_105;
          }
          unsigned int v651 = v159;
          int v164 = v172 & 0x3F;
          if ((v674 & 2) != 0)
          {
            uint64_t v163 = v667;
            if ((v172 & 0x20) != 0)
            {
LABEL_147:
              uint64_t v173 = v643;
              unint64_t v155 = v653;
              uint64_t v156 = v651;
              goto LABEL_148;
            }
          }
          else
          {
            uint64_t v163 = v667;
          }
        }
        uint64_t v165 = *((unsigned int *)v152 + 57);
        unsigned int v652 = v160;
        if (v165)
        {
          int v166 = v144;
          uint64_t v167 = v74;
          int v168 = v161;
          os_log_type_t v169 = v687;
          uint64_t v170 = 0;
          while (!CIIndexSetHasIndexWithHint(*(void *)&v681[8 * v170], v655, v169))
          {
            ++v170;
            ++v169;
            if (v165 == v170)
            {
              int v171 = v164;
              goto LABEL_123;
            }
          }
          int v171 = *((_DWORD *)v152 + 58) + v170;
LABEL_123:
          uint64_t v163 = v667;
          LODWORD(v157) = v168;
          uint64_t v74 = v167;
          uint64_t v144 = v166;
          uint64_t v64 = v701;
        }
        else
        {
          int v171 = v164;
        }
        if (v163) {
          LODWORD(v163) = *(_DWORD *)(v163 + 4 * v655);
        }
        unsigned int v174 = v698 - v163;
        BOOL v451 = v163 >= v698;
        unsigned int v175 = v163 - v698;
        if (v175 != 0 && v451) {
          unsigned int v176 = v175;
        }
        else {
          unsigned int v176 = v174;
        }
        int v177 = v666;
        if (v666)
        {
          uint64_t v178 = v677 + 8 * v655;
          float v179 = *(float *)v178;
          int v177 = *(_DWORD *)(v178 + 4);
        }
        else
        {
          float v179 = 0.0;
        }
        uint64_t v180 = v699;
        if (v696)
        {
          *(_WORD *)(v696 + 2 * v653) = v171;
          unsigned int v181 = v171 & 0xFFFFFFDF;
        }
        else
        {
          unsigned int v181 = 0;
        }
        int v182 = v181;
        unsigned int v636 = v176;
        int v637 = v177;
        int v183 = v181 & (v665 >> 31);
        unsigned __int8 v184 = v183;
        unsigned int v654 = v157;
        if (v180)
        {
          if (*(_DWORD *)(v180 + 4) <= v183) {
            unsigned __int8 v184 = 0;
          }
          unsigned __int8 v185 = v184;
          if (v661)
          {
            BOOL v186 = 1;
          }
          else
          {
            int v190 = *(uint64_t **)(v699 + 32 * v184 + 40);
            uint64_t v191 = v190[2];
            if (v191) {
              uint64_t v191 = *(void *)(v191 + 16) - 1;
            }
            uint64_t v193 = v190[1];
            if (v193) {
              uint64_t v193 = *(void *)(v193 + 16) - 1;
            }
            uint64_t v194 = *v190;
            if (v194) {
              uint64_t v194 = *(void *)(v194 + 16) - 1;
            }
            BOOL v186 = v193 + v191 + v194 < (unint64_t)v668;
          }
          if (v673)
          {
            uint64_t v195 = **(uint64_t ***)(v699 + 32 * v185 + 40);
            float v187 = 0.0;
            if (v195 && !*(unsigned char *)(v17 + 55) && v195[2] > v668)
            {
              uint64_t v196 = *v195;
              BOOL v197 = (long long *)(v196 + 80);
              BOOL v146 = v196 == 0;
              os_signpost_id_t v198 = &ZERO_RANKING_WRAPPED_BITS;
              if (!v146) {
                os_signpost_id_t v198 = v197;
              }
              float v187 = *((float *)v198 + 16);
            }
            char v188 = v186;
            unsigned __int8 v189 = v185;
LABEL_162:
            unsigned int v629 = v176;
            char v199 = v182;
            LOBYTE(v710) = 0;
            LODWORD(v706) = 0;
            float v712 = 0.0;
            uint64_t v200 = *(void *)(v17 + 8 * *(void *)(v17 + 64) + 80);
            long long v201 = *((_OWORD *)v152 + 13);
            long long v737 = *((_OWORD *)v152 + 12);
            long long v738 = v201;
            long long v739 = *((_OWORD *)v152 + 14);
            long long v202 = *((_OWORD *)v152 + 9);
            long long v733 = *((_OWORD *)v152 + 8);
            long long v734 = v202;
            long long v203 = *((_OWORD *)v152 + 10);
            long long v736 = *((_OWORD *)v152 + 11);
            long long v735 = v203;
            long long v204 = *((_OWORD *)v152 + 5);
            long long v729 = *((_OWORD *)v152 + 4);
            long long v730 = v204;
            long long v205 = *((_OWORD *)v152 + 7);
            long long v731 = *((_OWORD *)v152 + 6);
            long long v732 = v205;
            long long v206 = *((_OWORD *)v152 + 1);
            v727[0] = *(_OWORD *)v152;
            v727[1] = v206;
            long long v207 = *((_OWORD *)v152 + 3);
            v727[2] = *((_OWORD *)v152 + 2);
            long long v728 = v207;
            float v208 = hybridScoringL1(v655, v727, v64, 1, v200, 0, &v712, (uint8_t *)&v710, v187, (int *)&v706);
            if (v699)
            {
              uint64_t v209 = *(uint64_t ***)(v699 + 32 * v189 + 40);
              unsigned int v210 = v209 + 2;
              if (v706 == 2) {
                ++v209;
              }
              if (v706 == 3) {
                uint64_t v209 = v210;
              }
              unint64_t v211 = *v209;
            }
            else
            {
              unint64_t v211 = 0;
            }
            if (v188)
            {
              int v221 = 1;
              uint64_t v173 = v643;
              unint64_t v222 = v653;
LABEL_214:
              uint64_t v192 = v652;
              int v253 = v221;
              unint64_t v254 = v655;
              uint64_t v255 = *(void *)(v671 + 8 * v655);
              uint64_t v256 = 8 * v222;
              *(void *)(v693 + v256) = v255;
              *(void *)(v694 + v256) = v691 + v254;
              if (!v255)
              {
                unint64_t v153 = v222;
                uint64_t v311 = v651;
                uint64_t v144 = v682;
                goto LABEL_104;
              }
              int v630 = v253;
              if (*v152)
              {
                float v257 = v712;
                char v258 = v710;
                uint64_t v259 = *v152 + v222 * v657;
                *(_OWORD *)uint64_t v259 = 0u;
                *(_OWORD *)(v259 + 16) = 0u;
                *(_OWORD *)(v259 + 32) = 0u;
                *(_DWORD *)(v259 + 48) = v636;
                *(float *)(v259 + 52) = v179;
                *(_DWORD *)(v259 + 56) = v637;
                *(float *)(v259 + 60) = v208;
                *(float *)(v259 + 64) = v257;
                *(unsigned char *)(v259 + 68) = v258;
                *(unsigned char *)(v259 + 69) = 1;
              }
              char v260 = 0;
              BOOL v261 = ((1 << v199) & v192) == 0;
              if (((1 << v199) & v192) != 0) {
                int v262 = 0;
              }
              else {
                int v262 = 1 << v199;
              }
              uint64_t v263 = v152[7];
              if (v263) {
                char v260 = countInUpdates(v263, v254);
              }
              uint64_t v264 = 5 * v222;
              *(unsigned char *)(v152[1] + v264) = v260;
              uint64_t v265 = v152[8];
              if (v265) {
                char v266 = countInUpdates(v265, v254);
              }
              else {
                char v266 = 0;
              }
              *(unsigned char *)(v152[1] + v264 + 1) = v266;
              uint64_t v267 = v152[9];
              if (v267) {
                char v268 = countInUpdates(v267, v254);
              }
              else {
                char v268 = 0;
              }
              uint64_t v269 = 5 * v653;
              *(unsigned char *)(v152[1] + 5 * v653 + 2) = v268;
              uint64_t v270 = v152[10];
              if (v270) {
                char v271 = countInUpdates(v270, v254);
              }
              else {
                char v271 = 0;
              }
              *(unsigned char *)(v152[1] + v269 + 3) = v271;
              uint64_t v272 = v152[11];
              if (v272) {
                char v273 = countInUpdates(v272, v254);
              }
              else {
                char v273 = 0;
              }
              unint64_t v274 = v653;
              *(unsigned char *)(v152[1] + 5 * v653 + 4) = v273;
              if (!v152[15] || !v152[21]) {
                goto LABEL_251;
              }
              uint64_t v275 = 0;
              uint64_t v276 = v152[21];
              unint64_t v277 = v152[15];
              uint64_t v278 = 0;
              float v279 = 3.4028e38;
LABEL_238:
              uint64_t v280 = *(void *)(v276 + 8 * v278);
              if (v280)
              {
                LOBYTE(v727[0]) = 0;
                float v281 = fminf(v279, distanceHolderGetMinDistance(v280, *(void *)(v64 + 80) + v254, v727));
                if (v275) {
                  LODWORD(v282) = v275;
                }
                else {
                  LODWORD(v282) = 1;
                }
                if (LOBYTE(v727[0])) {
                  uint64_t v282 = v282;
                }
                else {
                  uint64_t v282 = v275;
                }
                if (!LOBYTE(v727[0])) {
                  float v281 = v279;
                }
                unint64_t v283 = v152[15];
                goto LABEL_249;
              }
              while (1)
              {
                unint64_t v283 = v277;
                uint64_t v282 = v275;
                float v281 = v279;
LABEL_249:
                unint64_t v277 = v283;
                if (v278 + 1 >= v283) {
                  break;
                }
                ++v278;
                uint64_t v276 = v152[21];
                float v279 = v281;
                uint64_t v275 = v282;
                if (v276) {
                  goto LABEL_238;
                }
              }
              uint64_t v17 = v705;
              unint64_t v274 = v653;
              if (v282)
              {
                char v284 = 1;
              }
              else
              {
LABEL_251:
                float v281 = 3.4028e38;
                char v284 = 0;
              }
              uint64_t v285 = v152[2] + 16 * v274;
              *(float *)(v285 + 4) = v281;
              *(unsigned char *)uint64_t v285 = v284;
              if (!v152[16] || !v152[22]) {
                goto LABEL_269;
              }
              uint64_t v286 = 0;
              uint64_t v287 = v152[22];
              unint64_t v288 = v152[16];
              uint64_t v289 = 0;
              float v290 = 3.4028e38;
LABEL_256:
              uint64_t v291 = *(void *)(v287 + 8 * v289);
              if (v291)
              {
                LOBYTE(v727[0]) = 0;
                float v292 = fminf(v290, distanceHolderGetMinDistance(v291, *(void *)(v64 + 80) + v254, v727));
                if (v286) {
                  LODWORD(v293) = v286;
                }
                else {
                  LODWORD(v293) = 1;
                }
                if (LOBYTE(v727[0])) {
                  uint64_t v293 = v293;
                }
                else {
                  uint64_t v293 = v286;
                }
                if (!LOBYTE(v727[0])) {
                  float v292 = v290;
                }
                unint64_t v294 = v152[16];
                goto LABEL_267;
              }
              while (1)
              {
                unint64_t v294 = v288;
                uint64_t v293 = v286;
                float v292 = v290;
LABEL_267:
                unint64_t v288 = v294;
                if (v289 + 1 >= v294) {
                  break;
                }
                ++v289;
                uint64_t v287 = v152[22];
                float v290 = v292;
                uint64_t v286 = v293;
                if (v287) {
                  goto LABEL_256;
                }
              }
              uint64_t v17 = v705;
              unint64_t v274 = v653;
              if (v293)
              {
                char v295 = 1;
              }
              else
              {
LABEL_269:
                float v292 = 3.4028e38;
                char v295 = 0;
              }
              uint64_t v296 = v152[2] + 16 * v274;
              *(float *)(v296 + 8) = v292;
              *(unsigned char *)(v296 + 1) = v295;
              if (!v152[17] || !v152[23]) {
                goto LABEL_287;
              }
              uint64_t v297 = 0;
              uint64_t v298 = v152[23];
              unint64_t v299 = v152[17];
              uint64_t v300 = 0;
              float v301 = 3.4028e38;
LABEL_274:
              uint64_t v302 = *(void *)(v298 + 8 * v300);
              if (v302)
              {
                LOBYTE(v727[0]) = 0;
                float v303 = fminf(v301, distanceHolderGetMinDistance(v302, *(void *)(v64 + 80) + v254, v727));
                if (v297) {
                  LODWORD(v304) = v297;
                }
                else {
                  LODWORD(v304) = 1;
                }
                if (LOBYTE(v727[0])) {
                  uint64_t v304 = v304;
                }
                else {
                  uint64_t v304 = v297;
                }
                if (!LOBYTE(v727[0])) {
                  float v303 = v301;
                }
                unint64_t v305 = v152[17];
                goto LABEL_285;
              }
              while (1)
              {
                unint64_t v305 = v299;
                uint64_t v304 = v297;
                float v303 = v301;
LABEL_285:
                unint64_t v299 = v305;
                if (v300 + 1 >= v305) {
                  break;
                }
                ++v300;
                uint64_t v298 = v152[23];
                float v301 = v303;
                uint64_t v297 = v304;
                if (v298) {
                  goto LABEL_274;
                }
              }
              uint64_t v17 = v705;
              unint64_t v274 = v653;
              if (v304)
              {
                char v306 = 1;
              }
              else
              {
LABEL_287:
                float v303 = 3.4028e38;
                char v306 = 0;
              }
              uint64_t v307 = v152[2] + 16 * v274;
              *(float *)(v307 + 12) = v303;
              *(unsigned char *)(v307 + 2) = v306;
              uint64_t v308 = v695;
              uint64_t v144 = v682;
              if (v695)
              {
                *(unsigned char *)(v695 + v274) = v690;
                if (v659)
                {
                  int v309 = CIIndexSetHasIndex(v680, v655);
                  uint64_t v308 = v695;
                  if (v309) {
                    *(unsigned char *)(v695 + v274) = 1;
                  }
                }
                if (v692 && *(unsigned char *)(v308 + v274)) {
                  unsigned char *v692 = 1;
                }
                if ((v630 & 1) == 0) {
                  *(unsigned char *)(v308 + v274) |= 2u;
                }
              }
              unint64_t v310 = v651 + v261;
              uint64_t v311 = v310;
              uint64_t v192 = v262 | v652;
              goto LABEL_439;
            }
            uint64_t v223 = *v211;
            long long v224 = (long long *)(v223 + 80);
            if (!v223) {
              long long v224 = &ZERO_RANKING_WRAPPED_BITS;
            }
            float v225 = *((float *)v224 + 13);
            if (*((unsigned char *)v224 + 69))
            {
              float v226 = *((float *)v224 + 15);
              unint64_t v222 = v653;
              if (v226 < v208) {
                goto LABEL_213;
              }
              if (v226 != v208) {
                goto LABEL_206;
              }
            }
            else
            {
              unint64_t v222 = v653;
              if (*v224 != 0)
              {
LABEL_206:
                uint64_t v173 = v643 + 1;
                if ((v674 & 8) == 0)
                {
                  unint64_t v153 = v222;
                  uint64_t v311 = v651;
                  uint64_t v192 = v652;
                  goto LABEL_104;
                }
                int v221 = 0;
                goto LABEL_214;
              }
            }
            if (v225 >= v179 && (v225 != v179 || *((_DWORD *)v224 + 12) < v629)) {
              goto LABEL_206;
            }
LABEL_213:
            int v221 = 1;
            uint64_t v173 = v643;
            goto LABEL_214;
          }
          unsigned __int8 v184 = v185;
        }
        else
        {
          float v187 = 0.0;
          BOOL v186 = 1;
          char v188 = 1;
          unsigned __int8 v189 = v183;
          if (v673) {
            goto LABEL_162;
          }
        }
        unsigned __int8 v212 = v184;
        BOOL v213 = v186;
        float v712 = 0.0;
        uint8_t v711 = 0;
        int v638 = v182;
        if (v662)
        {
          unint64_t v214 = v152[(v182 >> 6) + 24];
          int v710 = 0;
          float v215 = 0.0;
          if ((v214 >> (v182 & 0x1F)))
          {
            int v216 = 1;
            if (v699 && !*(unsigned char *)(v17 + 55))
            {
              long long v217 = **(uint64_t ***)(v699 + 32 * v212 + 40);
              if (v217 && v217[2] > v668)
              {
                uint64_t v218 = *v217;
                size_t v219 = (long long *)(v218 + 80);
                BOOL v146 = v218 == 0;
                uint64_t v220 = &ZERO_RANKING_WRAPPED_BITS;
                if (!v146) {
                  uint64_t v220 = v219;
                }
                float v215 = *((float *)v220 + 16);
              }
              int v216 = 1;
            }
          }
          else
          {
            int v216 = 0;
          }
        }
        else
        {
          int v216 = 0;
          int v710 = 0;
          float v215 = 0.0;
        }
        uint64_t v227 = *(void *)(v17 + 8 * *(void *)(v17 + 64) + 80);
        long long v228 = *((_OWORD *)v152 + 13);
        long long v737 = *((_OWORD *)v152 + 12);
        long long v738 = v228;
        long long v739 = *((_OWORD *)v152 + 14);
        long long v229 = *((_OWORD *)v152 + 9);
        long long v733 = *((_OWORD *)v152 + 8);
        long long v734 = v229;
        long long v230 = *((_OWORD *)v152 + 10);
        long long v736 = *((_OWORD *)v152 + 11);
        long long v735 = v230;
        long long v231 = *((_OWORD *)v152 + 5);
        long long v729 = *((_OWORD *)v152 + 4);
        long long v730 = v231;
        long long v232 = *((_OWORD *)v152 + 7);
        long long v731 = *((_OWORD *)v152 + 6);
        long long v732 = v232;
        long long v233 = *((_OWORD *)v152 + 1);
        v727[0] = *(_OWORD *)v152;
        v727[1] = v233;
        long long v234 = *((_OWORD *)v152 + 3);
        v727[2] = *((_OWORD *)v152 + 2);
        long long v728 = v234;
        int v631 = v216;
        float v235 = hybridScoringL1(v655, v727, v64, v216, v227, 0, &v712, &v711, v215, &v710);
        if (v699)
        {
          unsigned int v236 = *(uint64_t ***)(v699 + 32 * v212 + 40);
          char v237 = v236 + 2;
          if (v710 == 2) {
            ++v236;
          }
          if (v710 == 3) {
            unsigned int v236 = v237;
          }
          char v238 = *v236;
        }
        else
        {
          char v238 = 0;
        }
        float v239 = v235;
        if (!v213)
        {
          uint64_t v240 = *v238;
          if (v240) {
            uint64_t v241 = (long long *)(v240 + 80);
          }
          else {
            uint64_t v241 = &ZERO_RANKING_WRAPPED_BITS;
          }
          uint64_t v243 = *(void *)v241;
          uint64_t v242 = *((void *)v241 + 1);
          float v244 = *((float *)v241 + 13);
          if (*((unsigned char *)v241 + 69))
          {
            float v245 = *((float *)v241 + 15);
            if (v245 < v235) {
              goto LABEL_304;
            }
            if (v245 != v235) {
              goto LABEL_209;
            }
          }
          else if (v243 | v242)
          {
            goto LABEL_209;
          }
          if (v244 >= v179 && (v244 != v179 || *((_DWORD *)v241 + 12) < v176))
          {
LABEL_209:
            long long v247 = v241[1];
            long long v248 = v241[2];
            uint64_t v246 = v241 + 1;
            long long v706 = v247;
            long long v707 = v248;
            long long v249 = v246[2];
            long long v250 = v246[3];
            uint64_t v251 = v242;
            long long v708 = v249;
            long long v709 = v250;
            int v252 = 0;
            goto LABEL_306;
          }
        }
LABEL_304:
        if (*v152)
        {
          long long v708 = 0u;
          long long v709 = 0u;
          long long v706 = 0u;
          long long v707 = 0u;
          int v252 = 1;
          uint64_t v251 = 0;
          uint64_t v243 = 0;
LABEL_306:
          *(void *)&long long v624 = v243;
          *((void *)&v624 + 1) = v251;
          int v623 = v252;
          uint64_t v312 = v152[3];
          if (v312 < 1)
          {
            unint64_t v355 = 0;
            uint64_t v359 = 0;
            unint64_t v358 = 0;
            unint64_t v354 = 0;
LABEL_346:
            unint64_t v365 = v355;
            unint64_t v364 = v354;
            if (v623)
            {
              BOOL v371 = 1;
              uint64_t v372 = v359;
LABEL_349:
              int v366 = v371;
              unint64_t v370 = v364;
              unint64_t v367 = v365;
              uint64_t v368 = v372;
              unint64_t v369 = v358;
              uint64_t v144 = v682;
              goto LABEL_350;
            }
          }
          else
          {
            uint64_t v313 = v152[4];
            uint64_t v314 = v152[5];
            uint64_t v315 = 0;
            uint64_t v317 = v675;
            uint64_t v316 = v676;
            unint64_t v318 = 0;
            unint64_t v319 = 0;
            unint64_t v320 = 0;
            while (1)
            {
              unint64_t v321 = v320;
              unint64_t v322 = v319;
              unint64_t v323 = v318;
              uint64_t v324 = v315;
              uint64_t v325 = v316;
              uint64_t v326 = v317;
              uint64_t v327 = v312--;
              uint64_t v328 = *(void *)(v313 + 8 * v312);
              uint64_t v329 = *(void *)(v314 + 8 * v312);
              if (v328)
              {
                uint64_t v605 = *(void *)(v314 + 8 * v312);
                uint64_t v608 = v325;
                unint64_t v611 = v320;
                unint64_t v612 = v319;
                unint64_t v613 = v318;
                uint64_t v614 = v315;
                uint64_t v622 = v327;
                uint64_t v330 = 0;
                uint64_t v331 = 4 * v317 - 4 * v328;
                uint64_t v618 = v317;
                uint64_t v615 = v328;
                uint64_t v332 = 8 * v317 - 8 * v328;
                __int16 v333 = &v144[v332];
                uint64_t v334 = v658 + v332;
                __int16 v335 = &v689[v331];
                unint64_t v336 = &v683[v332];
                __int16 v337 = &v688[v331];
                unint64_t v338 = 0;
                uint64_t v339 = 0;
                do
                {
                  if (CIIndexSetHasIndexWithHint(*(void *)&v336[8 * v338], v655, v335)
                    && ((uint64_t v339 = (v339 + 1), *(_DWORD *)(*(void *)(v334 + 8 * v338) + 52) == 3)
                     || (uint64_t v342 = *(void *)&v333[8 * v338]) != 0 && CIIndexSetHasIndexWithHint(v342, v655, v337)))
                  {
                    uint64_t v341 = (v330 + 1);
                    uint64_t v340 = v339;
                  }
                  else
                  {
                    uint64_t v340 = v339;
                    uint64_t v341 = v330;
                  }
                  ++v338;
                  v337 += 4;
                  v335 += 4;
                  uint64_t v330 = v341;
                  uint64_t v339 = v340;
                }
                while (v338 < *(void *)(v697[4] + 8 * v312));
                uint64_t v343 = *(void *)(v697[5] + 8 * v312);
                uint64_t v314 = v697[5];
                uint64_t v313 = v697[4];
                uint64_t v17 = v705;
                uint64_t v144 = v682;
                uint64_t v327 = v622;
                uint64_t v326 = v618;
                uint64_t v324 = v614;
                uint64_t v328 = v615;
                unint64_t v322 = v612;
                unint64_t v323 = v613;
                unint64_t v321 = v611;
                uint64_t v325 = v608;
                uint64_t v329 = v605;
              }
              else
              {
                uint64_t v343 = *(void *)(v314 + 8 * v312);
                LODWORD(v340) = 0;
                LODWORD(v341) = 0;
              }
              uint64_t v344 = 0;
              char v345 = v325 - v329;
              uint64_t v316 = v325 - v329;
              int v346 = (int)v340 >= 1 << v343 ? (1 << v343) - 1 : v340;
              unint64_t v347 = ((uint64_t)v346 >> 63 << v345) | ((unint64_t)v346 >> 1 >> ~(_BYTE)v316);
              uint64_t v348 = (uint64_t)v346 << v345;
              int v349 = (int)v341 >= 1 << v343 ? (1 << v343) - 1 : v341;
              unint64_t v350 = (v345 & 0x40) != 0 ? v348 : v347;
              uint64_t v351 = (v345 & 0x40) != 0 ? 0 : v348;
              unint64_t v352 = v350 | v321;
              uint64_t v353 = v351 | v322;
              unint64_t v354 = v351 | v322;
              unint64_t v355 = v350 | v321;
              unint64_t v356 = ((uint64_t)v349 >> 63 << v345) | ((unint64_t)v349 >> 1 >> ~(_BYTE)v316);
              uint64_t v357 = (uint64_t)v349 << v345;
              if ((v345 & 0x40) != 0) {
                unint64_t v356 = v357;
              }
              else {
                uint64_t v344 = v357;
              }
              unint64_t v358 = v356 | v323;
              uint64_t v359 = v344 | v324;
              if ((v623 & 1) == 0)
              {
                uint64_t v360 = 0;
                uint64_t v361 = -1 << v345;
                BOOL v362 = (v345 & 0x40) == 0;
                if ((v345 & 0x40) != 0) {
                  unint64_t v363 = -1 << v345;
                }
                else {
                  unint64_t v363 = (-1 << v345) | (0x7FFFFFFFFFFFFFFFuLL >> ~(_BYTE)v316);
                }
                if (v362) {
                  uint64_t v360 = v361;
                }
                if (__PAIR128__(v352, v353) < __PAIR128__(v363 & *((void *)&v624 + 1), v360 & (unint64_t)v624)) {
                  break;
                }
              }
              uint64_t v317 = v326 - v328;
              uint64_t v315 = v359;
              unint64_t v318 = v356 | v323;
              unint64_t v319 = v354;
              unint64_t v320 = v355;
              if (v327 <= 1) {
                goto LABEL_346;
              }
            }
            unint64_t v364 = v354;
            unint64_t v365 = v355;
          }
          unint64_t v373 = v358;
          uint64_t v374 = v359;
          v727[0] = v624;
          long long v375 = v707;
          v376 = v660;
          long long *v660 = v706;
          v376[1] = v375;
          long long v377 = v709;
          v376[2] = v708;
          v376[3] = v377;
          BOOL v371 = ci_lt_l1_score((uint64_t)v727, v364, v365, v636, v239, v179);
          uint64_t v372 = v374;
          unint64_t v358 = v373;
          goto LABEL_349;
        }
        int v366 = 1;
        unint64_t v367 = 0;
        uint64_t v368 = 0;
        unint64_t v369 = 0;
        unint64_t v370 = 0;
LABEL_350:
        if (dword_1E9FC90A8 >= 5)
        {
          int v435 = *__error();
          v436 = _SILogForLogForCategory(1);
          if (os_log_type_enabled(v436, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v727[0]) = v656;
            v437 = "dropping";
            if (v366) {
              v437 = "collecting";
            }
            *(void *)((char *)v727 + 4) = v437;
            WORD6(v727[0]) = 1024;
            *(_DWORD *)((char *)v727 + 14) = v638;
            WORD1(v727[1]) = 2048;
            *(void *)((char *)&v727[1] + 4) = v367;
            WORD6(v727[1]) = 2048;
            *(void *)((char *)&v727[1] + 14) = v370;
            WORD3(v727[2]) = 1024;
            DWORD2(v727[2]) = v636;
            _os_log_impl(&dword_1BD672000, v436, OS_LOG_TYPE_DEFAULT, "%s %d %llx%016llx %d", (uint8_t *)v727, 0x2Cu);
          }
          *__error() = v435;
          uint64_t v17 = v705;
          uint64_t v144 = v682;
        }
        char v378 = v366 ^ 1;
        uint64_t v173 = v643 + (v366 ^ 1u);
        if ((v663 & 8) != 0) {
          char v378 = 0;
        }
        if (v378)
        {
          unint64_t v153 = v653;
          uint64_t v311 = v651;
          uint64_t v192 = v652;
          uint64_t v64 = v701;
          uint64_t v152 = v697;
          uint64_t v74 = v686;
          goto LABEL_104;
        }
        unint64_t v379 = v655;
        uint64_t v380 = *(void *)(v671 + 8 * v655);
        uint64_t v381 = 8 * v653;
        *(void *)(v693 + v381) = v380;
        *(void *)(v694 + v381) = v691 + v379;
        if (!v380)
        {
          unint64_t v153 = v653;
          uint64_t v311 = v651;
          uint64_t v192 = v652;
          uint64_t v64 = v701;
          uint64_t v152 = v697;
          uint64_t v74 = v686;
          uint64_t v144 = v682;
          goto LABEL_104;
        }
        char v382 = v638;
        if (*v697)
        {
          float v383 = v712;
          uint64_t v384 = *v697 + 80 * v653;
          uint8_t v385 = v711;
          *(void *)uint64_t v384 = v370;
          *(void *)(v384 + 8) = v367;
          *(void *)(v384 + 16) = v370;
          *(void *)(v384 + 24) = v367;
          *(void *)(v384 + 32) = v368;
          *(void *)(v384 + 40) = v369;
          *(_DWORD *)(v384 + 48) = v636;
          *(float *)(v384 + 52) = v179;
          *(_DWORD *)(v384 + 56) = v637;
          *(float *)(v384 + 60) = v239;
          *(float *)(v384 + 64) = v383;
          *(unsigned char *)(v384 + 68) = v385;
          *(unsigned char *)(v384 + 69) = v631;
        }
        char v386 = 0;
        BOOL v628 = ((1 << v382) & v652) == 0;
        if (((1 << v382) & v652) != 0) {
          int v387 = 0;
        }
        else {
          int v387 = 1 << v382;
        }
        uint64_t v152 = v697;
        uint64_t v388 = v697[7];
        if (v388) {
          char v386 = countInUpdates(v388, v379);
        }
        uint64_t v64 = v701;
        uint64_t v74 = v686;
        uint64_t v389 = 5 * v653;
        *(unsigned char *)(v152[1] + 5 * v653) = v386;
        uint64_t v390 = v152[8];
        char v391 = v390 ? countInUpdates(v390, v379) : 0;
        *(unsigned char *)(v152[1] + v389 + 1) = v391;
        uint64_t v392 = v152[9];
        char v393 = v392 ? countInUpdates(v392, v379) : 0;
        uint64_t v394 = 5 * v653;
        *(unsigned char *)(v152[1] + 5 * v653 + 2) = v393;
        uint64_t v395 = v152[10];
        char v396 = v395 ? countInUpdates(v395, v379) : 0;
        *(unsigned char *)(v152[1] + v394 + 3) = v396;
        uint64_t v397 = v152[11];
        char v398 = v397 ? countInUpdates(v397, v379) : 0;
        unint64_t v274 = v653;
        *(unsigned char *)(v152[1] + 5 * v653 + 4) = v398;
        if (!v152[15] || !v152[21]) {
          goto LABEL_392;
        }
        uint64_t v399 = 0;
        uint64_t v400 = v152[21];
        unint64_t v401 = v152[15];
        uint64_t v402 = 0;
        float v403 = 3.4028e38;
LABEL_379:
        uint64_t v404 = *(void *)(v400 + 8 * v402);
        if (v404)
        {
          LOBYTE(v727[0]) = 0;
          float v405 = fminf(v403, distanceHolderGetMinDistance(v404, *(void *)(v64 + 80) + v379, v727));
          if (v399) {
            LODWORD(v406) = v399;
          }
          else {
            LODWORD(v406) = 1;
          }
          if (LOBYTE(v727[0])) {
            uint64_t v406 = v406;
          }
          else {
            uint64_t v406 = v399;
          }
          if (!LOBYTE(v727[0])) {
            float v405 = v403;
          }
          unint64_t v407 = v152[15];
          goto LABEL_390;
        }
        while (1)
        {
          unint64_t v407 = v401;
          uint64_t v406 = v399;
          float v405 = v403;
LABEL_390:
          unint64_t v401 = v407;
          if (v402 + 1 >= v407) {
            break;
          }
          ++v402;
          uint64_t v400 = v152[21];
          float v403 = v405;
          uint64_t v399 = v406;
          if (v400) {
            goto LABEL_379;
          }
        }
        uint64_t v17 = v705;
        unint64_t v274 = v653;
        if (v406)
        {
          char v408 = 1;
        }
        else
        {
LABEL_392:
          float v405 = 3.4028e38;
          char v408 = 0;
        }
        uint64_t v409 = v152[2] + 16 * v274;
        *(float *)(v409 + 4) = v405;
        *(unsigned char *)uint64_t v409 = v408;
        if (!v152[16] || !v152[22]) {
          goto LABEL_410;
        }
        uint64_t v410 = 0;
        uint64_t v411 = v152[22];
        unint64_t v412 = v152[16];
        uint64_t v413 = 0;
        float v414 = 3.4028e38;
LABEL_397:
        uint64_t v415 = *(void *)(v411 + 8 * v413);
        if (v415)
        {
          LOBYTE(v727[0]) = 0;
          float v416 = fminf(v414, distanceHolderGetMinDistance(v415, *(void *)(v64 + 80) + v379, v727));
          if (v410) {
            LODWORD(v417) = v410;
          }
          else {
            LODWORD(v417) = 1;
          }
          if (LOBYTE(v727[0])) {
            uint64_t v417 = v417;
          }
          else {
            uint64_t v417 = v410;
          }
          if (!LOBYTE(v727[0])) {
            float v416 = v414;
          }
          unint64_t v418 = v152[16];
          goto LABEL_408;
        }
        while (1)
        {
          unint64_t v418 = v412;
          uint64_t v417 = v410;
          float v416 = v414;
LABEL_408:
          unint64_t v412 = v418;
          if (v413 + 1 >= v418) {
            break;
          }
          ++v413;
          uint64_t v411 = v152[22];
          float v414 = v416;
          uint64_t v410 = v417;
          if (v411) {
            goto LABEL_397;
          }
        }
        uint64_t v17 = v705;
        unint64_t v274 = v653;
        if (v417)
        {
          char v419 = 1;
        }
        else
        {
LABEL_410:
          float v416 = 3.4028e38;
          char v419 = 0;
        }
        uint64_t v420 = v152[2] + 16 * v274;
        *(float *)(v420 + 8) = v416;
        *(unsigned char *)(v420 + 1) = v419;
        if (!v152[17] || !v152[23]) {
          goto LABEL_428;
        }
        uint64_t v421 = 0;
        uint64_t v422 = v152[23];
        unint64_t v423 = v152[17];
        uint64_t v424 = 0;
        float v425 = 3.4028e38;
LABEL_415:
        uint64_t v426 = *(void *)(v422 + 8 * v424);
        if (v426)
        {
          LOBYTE(v727[0]) = 0;
          float v427 = fminf(v425, distanceHolderGetMinDistance(v426, *(void *)(v64 + 80) + v379, v727));
          if (v421) {
            LODWORD(v428) = v421;
          }
          else {
            LODWORD(v428) = 1;
          }
          if (LOBYTE(v727[0])) {
            uint64_t v428 = v428;
          }
          else {
            uint64_t v428 = v421;
          }
          if (!LOBYTE(v727[0])) {
            float v427 = v425;
          }
          unint64_t v429 = v152[17];
          goto LABEL_426;
        }
        while (1)
        {
          unint64_t v429 = v423;
          uint64_t v428 = v421;
          float v427 = v425;
LABEL_426:
          unint64_t v423 = v429;
          if (v424 + 1 >= v429) {
            break;
          }
          ++v424;
          uint64_t v422 = v152[23];
          float v425 = v427;
          uint64_t v421 = v428;
          if (v422) {
            goto LABEL_415;
          }
        }
        uint64_t v17 = v705;
        unint64_t v274 = v653;
        if (v428)
        {
          char v430 = 1;
        }
        else
        {
LABEL_428:
          float v427 = 3.4028e38;
          char v430 = 0;
        }
        uint64_t v431 = v152[2] + 16 * v274;
        *(float *)(v431 + 12) = v427;
        *(unsigned char *)(v431 + 2) = v430;
        uint64_t v432 = v695;
        uint64_t v144 = v682;
        if (v695)
        {
          *(unsigned char *)(v695 + v274) = v690;
          if (v659)
          {
            int v433 = CIIndexSetHasIndex(v680, v655);
            uint64_t v432 = v695;
            if (v433) {
              *(unsigned char *)(v695 + v274) = 1;
            }
          }
          if (v692 && *(unsigned char *)(v432 + v274)) {
            unsigned char *v692 = 1;
          }
          if ((v366 & 1) == 0) {
            *(unsigned char *)(v432 + v274) |= 2u;
          }
        }
        unint64_t v310 = v651 + v628;
        uint64_t v311 = v310;
        uint64_t v192 = v387 | v652;
LABEL_439:
        unint64_t v434 = v274 + 1;
        if (v274 + 1 > v672) {
          break;
        }
        unint64_t v153 = v274 + 1;
LABEL_104:
        uint64_t v154 = v311;
        unint64_t v155 = v153;
        uint64_t v156 = v154;
        uint64_t v157 = v654;
LABEL_105:
        uint64_t v148 = v156;
        unint64_t v158 = v155;
        uint64_t v149 = v192;
        uint64_t v139 = v157;
        unint64_t v150 = v158;
        uint64_t v151 = v173;
        if (v158 >= v664)
        {
          uint64_t v440 = 0;
          LODWORD(v139) = v655;
          uint64_t v441 = v173;
          unint64_t v43 = v158;
          goto LABEL_638;
        }
      }
      if (v310 >= v669)
      {
        unint64_t v153 = v274 + 1;
        goto LABEL_104;
      }
      uint64_t v440 = 1;
      LODWORD(v139) = v655;
      uint64_t v441 = v173;
      unint64_t v43 = v434;
LABEL_638:
      unsigned int v439 = v139;
      uint64_t v100 = v441;
      uint64_t v82 = v440;
LABEL_639:
      if (v439 <= *(_DWORD *)(v17 + 44)) {
        unsigned int v439 = *(_DWORD *)(v17 + 44);
      }
      *(_DWORD *)(v17 + 40) = v439;
      if (!v726)
      {
        v599 = __si_assert_copy_extra_329();
        v600 = v599;
        v601 = "";
        if (v599) {
          v601 = v599;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "ContentIndexQuery.c", 4950, "asserted", v601);
        goto LABEL_666;
      }
      char v726 = 0;
      uint64_t v590 = *(void *)&threadData[18 * v718 + 2];
      unsigned int v591 = v717;
      uint64_t v592 = v590 + 320 * v717;
      *(_DWORD *)(v592 + 312) = v679;
      v593 = *(void (**)(void))(v592 + 232);
      if (v593) {
        v593(*(void *)(v590 + 320 * v591 + 288));
      }
      dropThreadId(v718, 0, v684);
LABEL_645:
      uint64_t v594 = *(void *)&threadData[18 * v723 + 2];
      unsigned int v595 = v722;
      uint64_t v596 = v594 + 320 * v722;
      *(_DWORD *)(v596 + 312) = v685;
      v597 = *(void (**)(void))(v596 + 232);
      if (v597) {
        v597(*(void *)(v594 + 320 * v595 + 288));
      }
      dropThreadId(v723, 0, v74);
      uint64_t v45 = v100;
LABEL_648:
      __int16 v65 = v700;
LABEL_649:
      pthread_mutex_lock(v65);
      int v598 = *(_DWORD *)(v64 + 14700) - 1;
      *(_DWORD *)(v64 + 14700) = v598;
      if (!v598) {
        db_rwlock_wakeup((uint64_t)v65, 0, 0);
      }
      pthread_mutex_unlock(v65);
      unint64_t v46 = v43;
      uint64_t result = v82;
LABEL_652:
      if (v726)
      {
        *(unsigned char *)(v17 + 58) = 1;
      }
      else
      {
        unint64_t *v704 = v46;
        void *v703 = v45;
      }
      return result;
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 9u:
      uint64_t v47 = (void *)(v18 + 80);
      goto LABEL_18;
    default:
      goto LABEL_671;
  }
}

void CIIndexSetAddRange(unsigned int *cf, _DWORD *a2, unsigned int a3, unsigned int a4, int8x8_t a5)
{
  uint64_t v129 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = cf[5];
  unsigned int v5 = cf[6];
  unsigned int v7 = a2[5];
  unsigned int v8 = a2[6];
  if (v5 >= v8) {
    unsigned int v9 = a2[6];
  }
  else {
    unsigned int v9 = cf[6];
  }
  BOOL v10 = v8 >= a4 && v5 >= a4;
  if (v10) {
    unsigned int v11 = a4;
  }
  else {
    unsigned int v11 = v9;
  }
  if (v6 <= v7) {
    unsigned int v12 = a2[5];
  }
  else {
    unsigned int v12 = cf[5];
  }
  BOOL v13 = v7 > a3 || v6 > a3;
  if (v13) {
    unsigned int v14 = v12;
  }
  else {
    unsigned int v14 = a3;
  }
  if (v14 > v11)
  {
    if (dword_1E9FC90A8 >= 5)
    {
      int v102 = *__error();
      uint64_t v103 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109376;
        unsigned int v126 = v14;
        LOWORD(v127) = 1024;
        *(_DWORD *)((char *)&v127 + 2) = v11;
        _os_log_impl(&dword_1BD672000, v103, OS_LOG_TYPE_DEFAULT, "%d start, end:%d", buf, 0xEu);
      }
      *__error() = v102;
    }
    return;
  }
  if (v14 != v11)
  {
    if ((int)cf[4] >= -9)
    {
      if ((int)a2[4] > -10)
      {
        if (CFGetTypeID(cf) != __kCIIndexSetInvertedTypeID)
        {
          int locked = lockedCountItemsInRange(a2, v14, v11, a5);
          int v25 = cf[4];
          if (v25 > -10
            || ((int v26 = cf[6] - cf[5], v27 = locked - v25 - 10, v26 + 1 < v27) ? (v28 = v26 + 1) : (v28 = v27),
                int v25 = -10 - v28,
                cf[4] = -10 - v28,
                (v28 & 0x80000000) != 0))
          {
            if (v25 >= -1) {
              unsigned int v29 = cf[8];
            }
            else {
              unsigned int v29 = 4;
            }
            if (v25 < -1) {
              int v25 = -2 - v25;
            }
            if (v29 < v25 + locked) {
              _CIIndexSetMakeSpace(cf, locked, 0, 0, 0);
            }
          }
        }
      }
      else
      {
        _CIIndexSetForceBitmap((uint64_t)cf, 0, 0);
      }
    }
    if ((int)a2[4] <= -10)
    {
      unsigned int v30 = cf[6];
      uint64_t v31 = (v30 - v11) >> 5;
      int v32 = (v30 - v11) & 0x1F;
      uint64_t v33 = (v30 - v14) >> 5;
      int v34 = (v30 - v14) & 0x1F;
      unsigned int v35 = a2[6];
      unsigned int v36 = v30 - v35;
      if (v36)
      {
        if ((v36 & 0x1F) != 0)
        {
          if (v35 >= v11) {
            unsigned int v104 = v11;
          }
          else {
            unsigned int v104 = a2[6];
          }
          unsigned int v105 = a2[5];
          if (v105 <= v14) {
            unsigned int v105 = v14;
          }
          *(_DWORD *)long long buf = v104;
          unsigned int v126 = v105;
          uint64_t v127 = 0;
          int64x2_t v128 = a2;
          while (1)
          {
            unsigned int v106 = _CIIndexSetEnumeratorNext((unsigned int *)buf);
            if (!v106) {
              break;
            }
            int v124 = -1;
            _CIIndexSetAddIndex(cf, v106, 0, &v124, a5);
          }
          goto LABEL_83;
        }
        unsigned int v107 = (v35 - v11) >> 5;
        int v108 = *(_DWORD *)(*((void *)a2 + 5) + 4 * v107);
        unsigned int v109 = v33 - v31;
        if (v33 == v31)
        {
          int v110 = v34 + 1;
          int v111 = masks[v32];
          if (v32 != v110) {
            int v111 = masks[v110] & ~v111;
          }
          int v40 = v111 & v108;
          uint64_t v41 = *((void *)cf + 5);
          uint64_t v42 = 4 * v31;
          goto LABEL_60;
        }
        *(_DWORD *)(*((void *)cf + 5) + 4 * v31) |= v108 & ~masks[v32];
        if (v109 >= 2)
        {
          uint64_t v112 = 1 - v109;
          unsigned int v113 = v31 + 1;
          unsigned int v114 = v107 + 1;
          do
          {
            *(_DWORD *)(*((void *)cf + 5) + 4 * v113++) |= *(_DWORD *)(*((void *)a2 + 5) + 4 * v114++);
            BOOL v10 = __CFADD__(v112++, 1);
          }
          while (!v10);
        }
        int v53 = masks[v34 + 1] & *(_DWORD *)(*((void *)a2 + 5) + 4 * ((v35 - v14) >> 5));
        uint64_t v54 = *((void *)cf + 5);
        uint64_t v52 = 4 * v33;
      }
      else
      {
        int v37 = *(_DWORD *)(*((void *)a2 + 5) + 4 * v31);
        if (v33 == v31)
        {
          int v38 = v34 + 1;
          int v39 = masks[v32];
          if (v32 != v38) {
            int v39 = masks[v38] & ~v39;
          }
          int v40 = v39 & v37;
          uint64_t v41 = *((void *)cf + 5);
          uint64_t v42 = 4 * v31;
LABEL_60:
          *(_DWORD *)(v41 + v42) |= v40;
          goto LABEL_83;
        }
        *(_DWORD *)(*((void *)cf + 5) + 4 * v31) |= v37 & ~masks[v32];
        uint64_t v51 = (v31 + 1);
        if (v51 < v33)
        {
          do
          {
            *(_DWORD *)(*((void *)cf + 5) + 4 * v51) |= *(_DWORD *)(*((void *)a2 + 5) + 4 * v51);
            ++v51;
          }
          while (v33 != v51);
        }
        uint64_t v52 = 4 * v33;
        int v53 = masks[v34 + 1] & *(_DWORD *)(*((void *)a2 + 5) + v52);
        uint64_t v54 = *((void *)cf + 5);
      }
      *(_DWORD *)(v54 + v52) |= v53;
LABEL_83:
      int v55 = cf[4];
      if (v55 <= -10)
      {
        int v56 = cf[6] - cf[5];
        unsigned int v57 = -20 - (v55 + a2[4]);
        if (v56 + 1 < v57) {
          unsigned int v57 = v56 + 1;
        }
        cf[4] = -10 - v57;
        _CIIndexSetConvertIfInvertedArrayIsMoreEfficient(cf, 0, a5);
      }
      return;
    }
    CFTypeID v43 = CFGetTypeID(a2);
    unsigned int v45 = a2[4];
    if (v43 == __kCIIndexSetInvertedTypeID)
    {
      if (v45 == a2[6] - a2[5] + 1) {
        return;
      }
    }
    else if (v45 == -2 || !v45)
    {
      return;
    }
    int v46 = cf[4];
    if (v46 <= -10)
    {
      if ((v45 & 0x80000000) != 0)
      {
        uint64_t v68 = -2 - v45;
        int v69 = (char *)(a2 + 8);
        if (v45 > 0xFFFFFFFD)
        {
          LODWORD(v70) = 0;
        }
        else
        {
          uint64_t v70 = 0;
          while (*(_DWORD *)&v69[4 * v70] > v11)
          {
            if (v68 == ++v70)
            {
              LODWORD(v70) = -2 - v45;
              break;
            }
          }
        }
        if ((int)v70 >= (int)v68) {
          int v80 = -2 - v45;
        }
        else {
          int v80 = v70;
        }
        int v81 = cf[6] - cf[5];
        unsigned int v82 = -12 - (v45 + v46);
        if (v81 + 1 < v82) {
          unsigned int v82 = v81 + 1;
        }
        cf[4] = -10 - v82;
        if ((int)v68 > (int)v70 && *(_DWORD *)&v69[4 * v80] > v11) {
          ++v80;
        }
        if (v80 < (int)v68)
        {
          int v83 = v80 + v45 + 2;
          int v84 = &a2[v80 + 8];
          do
          {
            unsigned int v86 = *v84++;
            unsigned int v85 = v86;
            if (v86 < v14) {
              break;
            }
            *(_DWORD *)(*((void *)cf + 5) + 4 * ((cf[6] - v85) >> 5)) |= 1 << (*((unsigned char *)cf + 24) - v85);
            BOOL v10 = __CFADD__(v83++, 1);
          }
          while (!v10);
        }
      }
      else
      {
        if (a2[6] >= v11) {
          unsigned int v47 = v11;
        }
        else {
          unsigned int v47 = a2[6];
        }
        if (a2[5] <= v14) {
          unsigned int v48 = v14;
        }
        else {
          unsigned int v48 = a2[5];
        }
        *(_DWORD *)long long buf = v47;
        unsigned int v126 = v48;
        uint64_t v127 = 0;
        int64x2_t v128 = a2;
        if (v45)
        {
          int v49 = binarySearchMap((uint64_t)a2, v47);
          LODWORD(v127) = v49;
          if (v49 == a2[9]) {
            LODWORD(v127) = a2[8] + v49 - a2[4];
          }
        }
        while (1)
        {
          int v50 = _CIIndexSetEnumeratorNext((unsigned int *)buf);
          if (!v50) {
            break;
          }
          *(_DWORD *)(*((void *)cf + 5) + 4 * ((cf[6] - v50) >> 5)) |= 1 << (*((unsigned char *)cf + 24) - v50);
        }
        if (CFGetTypeID(a2) == __kCIIndexSetInvertedTypeID) {
          int v67 = a2[6] - (a2[5] + a2[4]) + 1;
        }
        else {
          int v67 = a2[4];
        }
        int v75 = cf[6] - cf[5];
        unsigned int v76 = v67 - cf[4] - 10;
        if (v75 + 1 < v76) {
          unsigned int v76 = v75 + 1;
        }
        cf[4] = -10 - v76;
      }
      _CIIndexSetConvertIfInvertedArrayIsMoreEfficient(cf, 0, v44);
      return;
    }
    if ((v45 & 0x80000000) != 0)
    {
      uint64_t v71 = -2 - v45;
      uint64_t v72 = (char *)(a2 + 8);
      if (v45 > 0xFFFFFFFD)
      {
        LODWORD(v73) = 0;
      }
      else
      {
        uint64_t v73 = 0;
        while (*(_DWORD *)&v72[4 * v73] > v11)
        {
          if (v71 == ++v73)
          {
            int v74 = -2 - v45;
LABEL_160:
            LODWORD(v88) = v71;
            goto LABEL_169;
          }
        }
      }
      if ((int)v73 >= (int)v71) {
        int v74 = -2 - v45;
      }
      else {
        int v74 = v73;
      }
      unsigned int v87 = v14 - 1;
      if (!v14) {
        unsigned int v87 = 0;
      }
      if ((int)v71 <= (int)v73)
      {
        LODWORD(v88) = v74;
      }
      else
      {
        uint64_t v88 = v74;
        while (*(_DWORD *)&v72[4 * v88] > v87)
        {
          if (v71 == ++v88) {
            goto LABEL_160;
          }
        }
      }
LABEL_169:
      if ((int)v88 < (int)v71) {
        LODWORD(v71) = v88;
      }
      unsigned int v79 = v71 - v74;
      if ((int)v71 >= v74)
      {
        long long v77 = (unsigned int *)&v72[4 * v74];
        goto LABEL_173;
      }
    }
    else
    {
      if (v14) {
        unsigned int v58 = v14 - 1;
      }
      else {
        unsigned int v58 = 0;
      }
      signed int v59 = binarySearchMap((uint64_t)a2, v58);
      int v60 = binarySearchMap((uint64_t)a2, v11);
      unsigned int v61 = v59 - v60;
      if (v59 >= v60)
      {
        int v62 = v60;
        int v63 = a2[9];
        if (v60 >= v63 && v59 >= v63 || v60 <= v63 && v59 <= v63)
        {
          if (CFGetTypeID(a2) == __kCIIndexSetInvertedTypeID)
          {
            *(_DWORD *)long long buf = -1;
            if (v59 > v62)
            {
              uint64_t v64 = *((void *)a2 + 5);
              uint64_t v65 = v59 - 1;
              do
              {
                unsigned int v66 = *(_DWORD *)(v64 + 4 * v65);
                if (v66 > v14)
                {
                  *(_DWORD *)long long buf = -1;
                  _CIIndexSetAddIndexesInRange(cf, v14, *(_DWORD *)(v64 + 4 * v65) - 1, (int *)buf, v44);
                  uint64_t v64 = *((void *)a2 + 5);
                  unsigned int v66 = *(_DWORD *)(v64 + 4 * v65);
                }
                unsigned int v14 = v66 + 1;
                BOOL v13 = v65-- <= v62;
              }
              while (!v13);
              if (*(_DWORD *)(v64 + 4 * v62) == v11) {
                return;
              }
            }
            goto LABEL_192;
          }
          long long v77 = (unsigned int *)(*((void *)a2 + 5) + 4 * v62);
          uint64_t v78 = (int *)cf;
          unsigned int v79 = v61;
LABEL_174:
          _CIIndexSetAddSortedIndexes(v78, v77, v79, 1, 0, 0, v44);
          return;
        }
        if (CFGetTypeID(a2) == __kCIIndexSetInvertedTypeID)
        {
          *(_DWORD *)long long buf = -1;
          int v89 = a2[4];
          int v91 = a2[8];
          int v90 = a2[9];
          unsigned int v92 = v91 - v89 + v90;
          if (v59 <= v92)
          {
            BOOL v97 = 0;
          }
          else
          {
            if (v59 <= (int)v92)
            {
              uint64_t v93 = *((void *)a2 + 5);
            }
            else
            {
              uint64_t v93 = *((void *)a2 + 5);
              uint64_t v94 = v59 - 1;
              do
              {
                unsigned int v95 = *(_DWORD *)(v93 + 4 * v94);
                if (v95 > v14)
                {
                  *(_DWORD *)long long buf = -1;
                  _CIIndexSetAddIndexesInRange(cf, v14, *(_DWORD *)(v93 + 4 * v94) - 1, (int *)buf, v44);
                  uint64_t v93 = *((void *)a2 + 5);
                  int v89 = a2[4];
                  int v91 = a2[8];
                  int v90 = a2[9];
                  unsigned int v95 = *(_DWORD *)(v93 + 4 * v94);
                }
                unsigned int v14 = v95 + 1;
                unsigned int v92 = v91 - v89 + v90;
                BOOL v13 = v94-- <= (int)v92;
              }
              while (!v13);
            }
            BOOL v97 = *(_DWORD *)(v93 + 4 * v92) == v11;
          }
          if (v90 > v62)
          {
            uint64_t v98 = v90;
            uint64_t v99 = *((void *)a2 + 5);
            uint64_t v100 = v98 - 1;
            do
            {
              unsigned int v101 = *(_DWORD *)(v99 + 4 * v100);
              if (v101 > v14)
              {
                *(_DWORD *)long long buf = -1;
                _CIIndexSetAddIndexesInRange(cf, v14, *(_DWORD *)(v99 + 4 * v100) - 1, (int *)buf, v44);
                uint64_t v99 = *((void *)a2 + 5);
                unsigned int v101 = *(_DWORD *)(v99 + 4 * v100);
              }
              unsigned int v14 = v101 + 1;
              BOOL v13 = v100-- <= v62;
            }
            while (!v13);
            if (*(_DWORD *)(v99 + 4 * v62) == v11) {
              BOOL v97 = 1;
            }
          }
          if (v97) {
            return;
          }
LABEL_192:
          if (v11 >= v14)
          {
            *(_DWORD *)long long buf = -1;
            _CIIndexSetAddIndexesInRange(cf, v14, v11, (int *)buf, v44);
          }
          return;
        }
        unsigned int v96 = a2[8] - a2[4] + a2[9];
        _CIIndexSetAddSortedIndexes((int *)cf, (unsigned int *)(*((void *)a2 + 5) + 4 * v96), v59 - v96, 1, 0, 0, v44);
        long long v77 = (unsigned int *)(*((void *)a2 + 5) + 4 * v62);
        unsigned int v79 = a2[9] - v62;
LABEL_173:
        uint64_t v78 = (int *)cf;
        goto LABEL_174;
      }
    }
    int v115 = __si_assert_copy_extra_329();
    __message_assert_333((uint64_t)v115, v116, v117, v118, v119, v120, v121, v122, (char)"CIIndexSet.c");
    free(v115);
    if (__valid_fs(-1)) {
      uint64_t v123 = 2989;
    }
    else {
      uint64_t v123 = 3072;
    }
    *(_DWORD *)uint64_t v123 = -559038737;
    abort();
  }
  if (v7 <= v11)
  {
    int v17 = a2[4];
    if (v17 <= -10)
    {
      if (((*(_DWORD *)(*((void *)a2 + 5) + 4 * ((v8 - v11) >> 5)) >> (v8 - v11)) & 1) == 0) {
        return;
      }
LABEL_48:
      *(_DWORD *)long long buf = -1;
      _CIIndexSetAddIndex(cf, v11, 0, buf, a5);
      return;
    }
    if (v17 < 0)
    {
      if (v17 < 0xFFFFFFFE
        && (a2[8] == v11
         || v17 != -3
         && (a2[9] == v11
          || v17 != -4
          && (a2[10] == v11
           || v17 != -5
           && (a2[11] == v11
            || v17 != -6 && (a2[12] == v11 || v17 != -7 && (a2[13] == v11 || v17 != -8 && a2[14] == v11)))))))
      {
        goto LABEL_48;
      }
    }
    else
    {
      unsigned int v18 = binarySearchMap((uint64_t)a2, v11);
      unsigned int v19 = a2[9];
      v23 = (v18 < v19 || ((unsigned int v20 = a2[8], v21 = v20 + v19 - a2[4], v18 < v20) ? (v22 = v18 >= v21) : (v22 = 0), v22))
         && *(_DWORD *)(*((void *)a2 + 5) + 4 * v18) == v11;
      if (v23 != (CFGetTypeID(a2) == __kCIIndexSetInvertedTypeID)) {
        goto LABEL_48;
      }
    }
  }
}

uint64_t _CIIndexSetEnumeratorNext(unsigned int *a1)
{
  uint64_t v1 = *((void *)a1 + 2);
  if (!v1) {
    return 0;
  }
  unsigned int v3 = a1[1];
  int v4 = *(_DWORD *)(v1 + 16);
  if (v4 > -10)
  {
    if (v4 < 0)
    {
      int v19 = -2 - v4;
      uint64_t v20 = (int)a1[2];
      if ((int)v20 >= v19) {
        return 0;
      }
      a1[2] = v20 + 1;
      uint64_t result = *(unsigned int *)(v1 + 4 * v20 + 32);
      if (result < v3) {
        return 0;
      }
    }
    else if (CFGetTypeID(*((CFTypeRef *)a1 + 2)) == __kCIIndexSetInvertedTypeID)
    {
      uint64_t result = *a1;
      unsigned int v12 = a1[1];
      if (result < v12) {
        return 0;
      }
      int v13 = *(_DWORD *)(v1 + 16);
      if (!v13) {
        goto LABEL_9;
      }
      int v14 = *(_DWORD *)(v1 + 36);
      LODWORD(v15) = a1[2];
      if ((int)v15 >= v14)
      {
LABEL_47:
        if (v14 < v13)
        {
          uint64_t v40 = 4 * (int)v15;
          while (*(_DWORD *)(v1 + 32) > v15)
          {
            unsigned int v41 = *(_DWORD *)(*(void *)(v1 + 40) + v40);
            uint64_t v42 = (result - 1);
            *a1 = v42;
            if (result > v41) {
              return result;
            }
            if (v42 < v12) {
              return 0;
            }
            LODWORD(v15) = v15 + 1;
            a1[2] = v15;
            v40 += 4;
            uint64_t result = (result - 1);
            if (*(_DWORD *)(v1 + 36) >= v13) {
              goto LABEL_57;
            }
          }
        }
        uint64_t v42 = result;
LABEL_57:
        *a1 = v42 - 1;
        return v42;
      }
      else
      {
        uint64_t v16 = v14;
        uint64_t v15 = (int)v15;
        uint64_t v17 = *a1;
        while (1)
        {
          uint64_t result = v17;
          unsigned int v18 = *(_DWORD *)(*(void *)(v1 + 40) + 4 * v15);
          uint64_t v17 = (v17 - 1);
          *a1 = v17;
          if (result > v18) {
            break;
          }
          if (v17 < v12) {
            return 0;
          }
          a1[2] = v15 + 1;
          int v14 = *(_DWORD *)(v1 + 36);
          if (v15 + 1 == v14)
          {
            LODWORD(v15) = v15 + 1 - v13 + *(_DWORD *)(v1 + 32);
            a1[2] = v15;
            int v14 = *(_DWORD *)(v1 + 36);
            uint64_t result = v17;
            goto LABEL_47;
          }
          if (v16 == ++v15)
          {
            uint64_t result = v17;
            goto LABEL_47;
          }
        }
      }
    }
    else
    {
      int v21 = *(_DWORD *)(v1 + 36);
      uint64_t v22 = (int)a1[2];
      if ((int)v22 >= v21)
      {
        if (v21 >= *(_DWORD *)(v1 + 16)) {
          return 0;
        }
        if (v22 >= *(_DWORD *)(v1 + 32)) {
          return 0;
        }
        uint64_t v32 = *(void *)(v1 + 40);
        a1[2] = v22 + 1;
        uint64_t result = *(unsigned int *)(v32 + 4 * v22);
        if (result < a1[1]) {
          return 0;
        }
      }
      else
      {
        uint64_t v23 = *(void *)(v1 + 40);
        int v24 = v22 + 1;
        a1[2] = v22 + 1;
        uint64_t result = *(unsigned int *)(v23 + 4 * v22);
        if (result < a1[1]) {
          return 0;
        }
        if (v24 == *(_DWORD *)(v1 + 36)) {
          a1[2] = *(_DWORD *)(v1 + 32) + v24 - *(_DWORD *)(v1 + 16);
        }
      }
    }
  }
  else
  {
    uint64_t result = *a1;
    unsigned int v6 = *(_DWORD *)(v1 + 24);
    unsigned int v7 = v6 - result;
    if (v6 < result || result < v3) {
      return 0;
    }
    uint64_t v9 = *(void *)(v1 + 40);
    uint64_t v10 = v7 >> 5;
    unsigned int v11 = *(_DWORD *)(v9 + 4 * v10);
    if ((v11 >> v7))
    {
LABEL_9:
      *a1 = result - 1;
      return result;
    }
    unsigned int v25 = v6 - v3;
    unint64_t v26 = v25 >> 5;
    int v27 = v25 & 0x1F;
    if (v10 == v26)
    {
      int v28 = masks[v7 & 0x1F];
      if ((v7 & 0x1F) != v27 + 1) {
        int v28 = masks[v27 + 1] & ~v28;
      }
      unsigned int v29 = v28 & v11;
      if (v29)
      {
        unsigned int v30 = v6 - (v7 & 0xFFFFFFE0);
        unsigned int v31 = __rbit32(v29);
LABEL_42:
        unsigned int v36 = __clz(v31);
        uint64_t result = v30 - v36;
        *a1 = v30 + ~v36;
        return result;
      }
      return 0;
    }
    unsigned int v33 = v11 & ~masks[v7 & 0x1F];
    if (v33)
    {
      unsigned int v30 = v6 - (v7 & 0xFFFFFFE0);
      unsigned int v31 = __rbit32(v33);
      goto LABEL_42;
    }
    while (1)
    {
      int v34 = v10 + 1;
      if (v10 + 1 >= v26) {
        break;
      }
      unsigned int v35 = *(_DWORD *)(v9 + 4 + 4 * v10++);
      if (v35)
      {
        unsigned int v30 = v6 - 32 * v34;
        unsigned int v31 = __rbit32(v35);
        goto LABEL_42;
      }
    }
    unsigned int v37 = masks[v27 + 1] & *(_DWORD *)(v9 + 4 * v26);
    if (!v37) {
      return 0;
    }
    unsigned int v38 = v6 - (v25 & 0xFFFFFFE0);
    unsigned int v39 = __clz(__rbit32(v37));
    uint64_t result = v38 - v39;
    *a1 = result;
    if (v38 != v39) {
      *a1 = v38 + ~v39;
    }
  }
  return result;
}

float hybridScoringL1(uint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, float *a7, uint8_t *a8, float a9, int *a10)
{
  uint64_t v17 = a1;
  unint64_t v18 = a2[15];
  uint64_t v19 = a1;
  if (v18 && (uint64_t v20 = a2[21]) != 0)
  {
    int v21 = 0;
    uint64_t v22 = 0;
    float v23 = 3.4028e38;
LABEL_4:
    uint64_t v24 = *(void *)(v20 + 8 * v22);
    if (v24)
    {
      unsigned __int8 v51 = 0;
      float MinDistance = distanceHolderGetMinDistance(v24, *(void *)(a3 + 80) + v19, &v51);
      int v21 = v51;
      float v26 = fminf(v23, MinDistance);
      if (v51) {
        float v23 = v26;
      }
      unint64_t v18 = a2[15];
    }
    while (++v22 < v18)
    {
      uint64_t v20 = a2[21];
      if (v20) {
        goto LABEL_4;
      }
    }
  }
  else
  {
    int v21 = 0;
    float v23 = 3.4028e38;
  }
  unint64_t v27 = a2[16];
  if (v27)
  {
    uint64_t v28 = a2[22];
    if (v28)
    {
      uint64_t v29 = 0;
LABEL_15:
      uint64_t v30 = *(void *)(v28 + 8 * v29);
      if (v30)
      {
        unsigned __int8 v51 = 0;
        float v31 = distanceHolderGetMinDistance(v30, *(void *)(a3 + 80) + v19, &v51);
        int v21 = v51;
        float v32 = fminf(v23, v31);
        if (v51) {
          float v23 = v32;
        }
        unint64_t v27 = a2[16];
      }
      while (++v29 < v27)
      {
        uint64_t v28 = a2[22];
        if (v28) {
          goto LABEL_15;
        }
      }
    }
  }
  unint64_t v33 = a2[17];
  if (v33)
  {
    uint64_t v34 = a2[23];
    if (v34)
    {
      unsigned int v49 = v17;
      uint64_t v35 = a5;
      unsigned int v36 = a7;
      unsigned int v37 = a8;
      uint64_t v38 = a6;
      uint64_t v39 = 0;
LABEL_25:
      uint64_t v40 = *(void *)(v34 + 8 * v39);
      if (v40)
      {
        unsigned __int8 v51 = 0;
        float v41 = distanceHolderGetMinDistance(v40, *(void *)(a3 + 80) + v19, &v51);
        int v21 = v51;
        float v42 = fminf(v23, v41);
        if (v51) {
          float v23 = v42;
        }
        unint64_t v33 = a2[17];
      }
      while (++v39 < v33)
      {
        uint64_t v34 = a2[23];
        if (v34) {
          goto LABEL_25;
        }
      }
      a6 = v38;
      a8 = v37;
      a7 = v36;
      a5 = v35;
      uint64_t v17 = v49;
    }
  }
  float v43 = 0.0;
  if (a5 && a4 && a7 && a8)
  {
    float v44 = 0.0;
    if (!v21) {
      float v44 = a9;
    }
    float v43 = ContentIndexDocSetComputeScore(a5, v17, a6, a8, v44);
    *a7 = v43;
  }
  *a10 = v43 != 0.0;
  if (v21)
  {
    float v45 = v23 * -0.5 + 1.0;
    if (v45 > -1.0 && v45 <= 1.0)
    {
      if (computeHybridScore_onceToken != -1) {
        dispatch_once(&computeHybridScore_onceToken, &__block_literal_global_32_5228);
      }
      if (computeHybridScore_isCleanSlateEnabled) {
        float v43 = v43 + v45 * 9.9889;
      }
      else {
        float v43 = v43 + v45;
      }
    }
    if (*a10 == 1) {
      int v47 = 3;
    }
    else {
      int v47 = 2;
    }
    goto LABEL_55;
  }
  if (v43 == 0.0)
  {
    int v47 = 1;
LABEL_55:
    *a10 = v47;
  }
  return v43;
}

uint64_t __CIIndexSetAddIntersectionInRange_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, int8x8_t a4)
{
  if (*(unsigned __int8 *)(a2 + 13) == *(unsigned __int8 *)(a3 + 13))
  {
    if (*(unsigned char *)(a2 + 13)) {
      return 0;
    }
    if (*(unsigned char *)(a2 + 12))
    {
      if (*(unsigned char *)(a3 + 12))
      {
LABEL_9:
        int locked = *(_DWORD *)(a3 + 8);
        return (*(_DWORD *)(a2 + 8) - locked);
      }
    }
    else
    {
      *(unsigned char *)(a2 + 12) = 1;
      *(_DWORD *)(a2 + 8) = lockedCountItemsInRange(*(_DWORD **)a2, *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36), a4);
      if (*(unsigned char *)(a3 + 12)) {
        goto LABEL_9;
      }
    }
    *(unsigned char *)(a3 + 12) = 1;
    int locked = lockedCountItemsInRange(*(_DWORD **)a3, *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36), a4);
    *(_DWORD *)(a3 + 8) = locked;
    return (*(_DWORD *)(a2 + 8) - locked);
  }
  if (*(unsigned char *)(a2 + 13)) {
    return 1;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t lockedCountItemsInRange(_DWORD *cf, unsigned int a2, unsigned int a3, int8x8_t a4)
{
  if (a2 <= 1) {
    unsigned int v6 = 1;
  }
  else {
    unsigned int v6 = a2;
  }
  if (v6 == a3)
  {
    if (cf)
    {
      if (cf[5] <= a3)
      {
        unsigned int v7 = cf[6];
        unsigned int v8 = v7 - a3;
        if (v7 >= a3)
        {
          int v9 = cf[4];
          if (v9 <= -10) {
            return (*(_DWORD *)(*((void *)cf + 5) + 4 * (v8 >> 5)) >> v8) & 1;
          }
          if ((v9 & 0x80000000) == 0)
          {
            unsigned int v29 = binarySearchMap((uint64_t)cf, a3);
            unsigned int v30 = cf[9];
            if (v29 < v30 || (BOOL v31 = 0, v32 = cf[8], v29 < v32) && v29 >= v32 + v30 - cf[4]) {
              BOOL v31 = *(_DWORD *)(*((void *)cf + 5) + 4 * v29) == a3;
            }
            return v31 ^ (CFGetTypeID(cf) == __kCIIndexSetInvertedTypeID);
          }
          if (v9 <= 0xFFFFFFFD)
          {
            int v42 = cf[8];
            uint64_t result = v42 == a3;
            if (v42 != a3 && v9 != -3)
            {
              int v43 = cf[9];
              uint64_t result = v43 == a3;
              if (v43 != a3 && v9 != -4)
              {
                int v44 = cf[10];
                uint64_t result = v44 == a3;
                if (v44 != a3 && v9 != -5)
                {
                  int v45 = cf[11];
                  uint64_t result = v45 == a3;
                  if (v45 != a3 && v9 != -6)
                  {
                    int v46 = cf[12];
                    uint64_t result = v46 == a3;
                    if (v46 != a3 && v9 != -7)
                    {
                      int v47 = cf[13];
                      uint64_t result = v47 == a3;
                      if (v47 != a3 && v9 != -8) {
                        return cf[14] == a3;
                      }
                    }
                  }
                }
              }
            }
            return result;
          }
        }
      }
    }
    return 0;
  }
  unsigned int v12 = cf[5];
  unsigned int v11 = cf[6];
  if (v6 <= v12) {
    unsigned int v13 = cf[5];
  }
  else {
    unsigned int v13 = v6;
  }
  if (v12 > a3 || v11 < v13) {
    return 0;
  }
  unsigned int v15 = v11 >= a3 ? a3 : cf[6];
  if (v13 > v15) {
    return 0;
  }
  int v16 = cf[4];
  if (v16 <= -10)
  {
    char v17 = v11 - v15;
    unsigned int v18 = (v11 - v15) >> 5;
    unsigned int v19 = v11 - v13;
    unsigned int v20 = v19 >> 5;
    if (v18 > v19 >> 5) {
      return 0;
    }
    int v21 = v17 & 0x1F;
    int v22 = v19 & 0x1F;
    uint64_t v23 = *((void *)cf + 5);
    int v24 = *(_DWORD *)(v23 + 4 * v18);
    if (v18 == v20)
    {
      int v25 = masks[v21];
      if (v21 != v22 + 1) {
        int v25 = masks[v22 + 1] & ~v25;
      }
      a4.i32[0] = v25 & v24;
      uint8x8_t v26 = (uint8x8_t)vcnt_s8(a4);
      v26.i16[0] = vaddlv_u8(v26);
      unsigned __int32 v27 = v26.i32[0];
      goto LABEL_79;
    }
    a4.i32[0] = v24 & ~masks[v21];
    uint8x8_t v37 = (uint8x8_t)vcnt_s8(a4);
    v37.i16[0] = vaddlv_u8(v37);
    int v38 = v37.i32[0] + array_popcount((const char *)(v23 + 4 * (v18 + 1)), v20 + ~v18);
    v39.i32[0] = masks[v22 + 1] & *(_DWORD *)(v23 + 4 * v20);
    uint8x8_t v40 = (uint8x8_t)vcnt_s8(v39);
    v40.i16[0] = vaddlv_u8(v40);
    __int32 v41 = v40.i32[0];
LABEL_78:
    unsigned __int32 v27 = v38 + v41;
LABEL_79:
    if (CFGetTypeID(cf) == __kCIIndexSetInvertedTypeID) {
      uint64_t result = v15 - v13 - v27 + 1;
    }
    else {
      uint64_t result = v27;
    }
    if ((result & 0x80000000) != 0)
    {
      uint64_t result = countItemsInRangeByEnumeration(cf, v13, v15);
      if ((result & 0x80000000) != 0)
      {
        unsigned int v49 = __si_assert_copy_extra_329();
        __message_assert_333((uint64_t)v49, v50, v51, v52, v53, v54, v55, v56, (char)"CIIndexSet.c");
        free(v49);
        if (__valid_fs(-1)) {
          uint64_t v57 = 2986;
        }
        else {
          uint64_t v57 = 3072;
        }
        *(_DWORD *)uint64_t v57 = -559038737;
        abort();
      }
    }
    return result;
  }
  if (v16 < 0)
  {
    if (v16 > 0xFFFFFFFD) {
      return 0;
    }
    if (cf[8] <= v15)
    {
      uint64_t v33 = 0;
    }
    else
    {
      if (v16 == -3) {
        return 0;
      }
      if (cf[9] <= v15)
      {
        uint64_t v33 = 1;
      }
      else
      {
        if (v16 == -4) {
          return 0;
        }
        if (cf[10] <= v15)
        {
          uint64_t v33 = 2;
        }
        else
        {
          if (v16 == -5) {
            return 0;
          }
          if (cf[11] <= v15)
          {
            uint64_t v33 = 3;
          }
          else
          {
            if (v16 == -6) {
              return 0;
            }
            if (cf[12] <= v15)
            {
              uint64_t v33 = 4;
            }
            else
            {
              if (v16 == -7) {
                return 0;
              }
              if (cf[13] <= v15)
              {
                uint64_t v33 = 5;
              }
              else
              {
                if (v16 == -8 || cf[14] > v15) {
                  return 0;
                }
                uint64_t v33 = 6;
              }
            }
          }
        }
      }
    }
    unint64_t v58 = (-2 - v16);
    LODWORD(v59) = v33;
    if ((int)v58 > (int)v33)
    {
      uint64_t v59 = v33;
      while (cf[v59 + 8] >= v13)
      {
        if (++v59 >= v58)
        {
          LODWORD(v59) = -2 - v16;
          return (v59 - v33);
        }
      }
    }
    return (v59 - v33);
  }
  else
  {
    if (v12 < v6 || v11 > a3)
    {
      int v34 = cf[9];
      int v35 = binarySearchMap((uint64_t)cf, v13 - 1);
      int v36 = binarySearchMap((uint64_t)cf, v15);
      if (v34 == v16)
      {
        unsigned __int32 v27 = v35 - v36;
        if (v35 >= v36) {
          goto LABEL_79;
        }
      }
      else
      {
        unsigned __int32 v27 = v35 - v36;
        if (v35 >= v36)
        {
          int v48 = cf[9];
          if (v35 <= v48 || v36 > v48) {
            goto LABEL_79;
          }
          __int32 v41 = cf[4];
          int v38 = v35 - (v36 + cf[8]);
          goto LABEL_78;
        }
      }
      int v60 = __si_assert_copy_extra_329();
      __message_assert_333((uint64_t)v60, v61, v62, v63, v64, v65, v66, v67, (char)"CIIndexSet.c");
      free(v60);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAA] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    CFTypeID v28 = CFGetTypeID(cf);
    uint64_t result = cf[4];
    if (v28 == __kCIIndexSetInvertedTypeID) {
      return v15 - (v13 + result) + 1;
    }
  }
  return result;
}

uint64_t array_popcount(const char *a1, int a2)
{
  unint64_t v2 = (4 * a2);
  int64x2_t v3 = 0uLL;
  if (v2 >= 0x40)
  {
    do
    {
      uint64_t v4 = v2 >> 6;
      if (v2 >= 0x7C0) {
        uint64_t v4 = 31;
      }
      uint64_t v5 = v4;
      int8x16_t v6 = 0uLL;
      int8x16_t v7 = 0uLL;
      int8x16_t v8 = 0uLL;
      int8x16_t v9 = 0uLL;
      uint64_t v10 = a1;
      do
      {
        int8x16x4_t v19 = vld4q_s8(v10);
        v10 += 64;
        int8x16_t v9 = vaddq_s8(vcntq_s8(v19.val[0]), v9);
        int8x16_t v8 = vaddq_s8(vcntq_s8(v19.val[1]), v8);
        int8x16_t v7 = vaddq_s8(vcntq_s8(v19.val[2]), v7);
        int8x16_t v6 = vaddq_s8(vcntq_s8(v19.val[3]), v6);
        --v5;
      }
      while (v5);
      int64x2_t v3 = (int64x2_t)vpadalq_u32((uint64x2_t)v3, vpaddlq_u16(vpadalq_u8(vpadalq_u8(vpadalq_u8(vpaddlq_u8((uint8x16_t)v8), (uint8x16_t)v9), (uint8x16_t)v7), (uint8x16_t)v6)));
      uint64_t v11 = v4 << 6;
      v2 -= v11;
      a1 += v11;
    }
    while (v2 > 0x3F);
  }
  if (v2 > 0xF)
  {
    unint64_t v12 = 0;
    unint64_t v13 = v2 & 0xFFFFFFF3;
    int8x16_t v14 = 0uLL;
    do
    {
      int8x16_t v14 = vaddq_s8(vcntq_s8(*(int8x16_t *)&a1[v12]), v14);
      v12 += 16;
    }
    while (v12 < v13);
    v2 &= 0xCu;
    int64x2_t v3 = (int64x2_t)vpadalq_u32((uint64x2_t)v3, vpaddlq_u16(vpaddlq_u8((uint8x16_t)v14)));
    a1 += v13;
  }
  for (uint64_t i = vaddvq_s64(v3); v2; v2 -= 4)
  {
    unsigned int v16 = *(_DWORD *)a1;
    a1 += 4;
    uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v17.i16[0] = vaddlv_u8(v17);
    i += v17.u32[0];
  }
  return i;
}

_DWORD *_CIIndexSetInitializeEnumeratorForRange(_DWORD *result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v5 = result;
  unsigned int v6 = result[5];
  if (result[6] >= a4) {
    unsigned int v7 = a4;
  }
  else {
    unsigned int v7 = result[6];
  }
  int v8 = result[4];
  if (v6 <= a3) {
    unsigned int v6 = a3;
  }
  *(_DWORD *)a2 = v7;
  *(_DWORD *)(a2 + 4) = v6;
  *(void *)(a2 + 16) = result;
  if (v8 < 1)
  {
    if ((v8 & 0x80000000) == 0 || v8 <= 0xFFFFFFF6) {
      goto LABEL_11;
    }
    if (v8 <= 0xFFFFFFFD)
    {
      if (v7 >= result[8])
      {
LABEL_11:
        *(_DWORD *)(a2 + 8) = 0;
        return result;
      }
      if (v8 != -3)
      {
        if (v7 >= result[9])
        {
          *(_DWORD *)(a2 + 8) = 1;
          return result;
        }
        if (v8 != -4)
        {
          if (v7 >= result[10])
          {
            *(_DWORD *)(a2 + 8) = 2;
            return result;
          }
          if (v8 != -5)
          {
            if (v7 >= result[11])
            {
              *(_DWORD *)(a2 + 8) = 3;
              return result;
            }
            if (v8 != -6)
            {
              if (v7 >= result[12])
              {
                *(_DWORD *)(a2 + 8) = 4;
                return result;
              }
              if (v8 != -7)
              {
                if (v7 >= result[13])
                {
                  *(_DWORD *)(a2 + 8) = 5;
                  return result;
                }
                if (v8 != -8 && v7 >= result[14])
                {
                  *(_DWORD *)(a2 + 8) = 6;
                  return result;
                }
              }
            }
          }
        }
      }
    }
    *(_DWORD *)(a2 + 8) = -2 - v8;
    return result;
  }
  uint64_t result = (_DWORD *)binarySearchMap((uint64_t)result, v7);
  *(_DWORD *)(a2 + 8) = result;
  if (result == v5[9]) {
    *(_DWORD *)(a2 + 8) = v5[8] + result - v5[4];
  }
  return result;
}

uint64_t _CIUpdateContent(uint64_t a1, uint64_t a2, const void *a3, int a4, const void *a5, uint64_t a6, int a7, CFTypeRef a8, float a9, CFTypeRef cf, unint64_t a11, uint64_t *a12, unsigned int a13, uint64_t a14, unsigned int a15, uint64_t (*a16)(uint64_t), uint64_t a17, int a18, int a19, int a20,char a21,uint64_t a22)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 8))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "Skipping because index is shut down", buf, 2u);
    }
    return 0xFFFFFFFFLL;
  }
  int v29 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v30 = setThreadIdAndInfo(-1, (long long *)sIndexExceptionCallbacks, a1, 0, v29);
  unsigned int v52 = HIDWORD(v30);
  unsigned int v53 = v30;
  unsigned int v50 = v32;
  unsigned int v51 = v31;
  uint64_t v33 = *(void *)&threadData[18 * v30 + 2];
  uint64_t v34 = v33 + 320 * HIDWORD(v30);
  *(unsigned char *)(v34 + 216) = 0;
  int v35 = *(_DWORD *)(v34 + 312);
  int v36 = *(void (**)(void))(v34 + 224);
  if (v36) {
    v36(*(void *)(v33 + 320 * HIDWORD(v30) + 288));
  }
  int v49 = v29;
  if (_setjmp((int *)v34))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
    }
    *(_DWORD *)(v34 + 312) = v35;
    CIOnThreadCleanUpReset(v50);
    dropThreadId(v53, 1, v29);
    CICleanUpReset(v53, v51);
    return 0xFFFFFFFFLL;
  }
  if (dword_1E9FC90CC >= 5)
  {
    int v45 = *__error();
    int v46 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v55 = a6;
      _os_log_impl(&dword_1BD672000, v46, OS_LOG_TYPE_DEFAULT, "_CIUpdateContent oid: %lld", buf, 0xCu);
    }
    *__error() = v45;
  }
  CFTypeRef v38 = cf;
  if (a8) {
    a8 = CFRetain(a8);
  }
  if (cf) {
    CFTypeRef v38 = CFRetain(cf);
  }
  if (a12)
  {
    *a12 = 0;
    uint64_t v39 = setDocumentAttributes(a1, a2, a3, a4, a5, a6, a7, (const __CFDictionary *)a8, a9, v38, a11, a12, a13, a14, a16, a17, a15, a18, a19,
            a20,
            a21,
            a22);
  }
  else
  {
    uint64_t v39 = setDocumentAttributes(a1, a2, a3, a4, a5, a6, a7, (const __CFDictionary *)a8, a9, v38, a11, 0, a13, a14, a16, a17, a15, a18, a19,
            a20,
            a21,
            a22);
  }
  uint64_t v40 = v39;
  if (v38) {
    CFRelease(v38);
  }
  if (a8) {
    CFRelease(a8);
  }
  if (*(unsigned char *)(a1 + 15664) && *(void *)(a1 + 14400))
  {
    __int32 v41 = (pthread_mutex_t *)(a1 + 15120);
    pthread_mutex_lock(v41);
    pthread_mutex_unlock(v41);
  }
  uint64_t v42 = *(void *)&threadData[18 * v53 + 2];
  uint64_t v43 = v42 + 320 * v52;
  *(_DWORD *)(v43 + 312) = v35;
  int v44 = *(void (**)(void))(v43 + 232);
  if (v44) {
    v44(*(void *)(v42 + 320 * v52 + 288));
  }
  dropThreadId(v53, 0, v49);
  return v40;
}

uint64_t _CIGetOIDForDocId(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v3 = a2 - *(void *)(a1 + 80);
  if (v3 >= *(unsigned int *)(a1 + 68)) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 8))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "Skipping because index is shut down", buf, 2u);
    }
    return 0;
  }
  int v6 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v7 = setThreadIdAndInfo(-1, (long long *)sIndexExceptionCallbacks, a1, 0, v6);
  unsigned int v28 = HIDWORD(v7);
  *(_DWORD *)long long buf = v7;
  unint64_t v27 = __PAIR64__(v8, v9);
  uint64_t v10 = *(void *)&threadData[18 * v7 + 2];
  uint64_t v11 = v10 + 320 * HIDWORD(v7);
  *(unsigned char *)(v11 + 216) = 0;
  int v12 = *(_DWORD *)(v11 + 312);
  unint64_t v13 = *(void (**)(void))(v11 + 224);
  if (v13) {
    v13(*(void *)(v10 + 320 * HIDWORD(v7) + 288));
  }
  unsigned int v26 = *(_DWORD *)buf;
  unsigned int v25 = v28;
  unint64_t v24 = v27;
  if (_setjmp((int *)v11))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v23 = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v23, 2u);
    }
    *(_DWORD *)(v11 + 312) = v12;
    CIOnThreadCleanUpReset(v24);
    dropThreadId(v26, 1, v6);
    CICleanUpReset(v26, HIDWORD(v24));
    return 0;
  }
  if (a3)
  {
    unsigned int v15 = CICleanUpThreadLoc();
    db_read_lock(a1 + 14504);
    CIOnThreadCleanUpPush((uint64_t)v15, (uint64_t)si_rwlock_rdunlock, a1 + 14504);
    uint64_t v16 = (uint64_t)v15;
  }
  else
  {
    uint64_t v16 = 0;
  }
  if (*(unsigned char *)(a1 + 45)) {
    int v17 = *(unsigned __int8 *)(*(void *)(a1 + 14432) + v3);
  }
  else {
    int v17 = (*(_DWORD *)(*(void *)(a1 + 14432) + 4 * (v3 / 5uLL)) >> (6 * (v3 % 5))) & 0x3F;
  }
  if ((v17 & 0xFFFFFFDF) == 0)
  {
    uint64_t v18 = 0;
    if (!a3) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  uint64_t v18 = *(void *)(*(void *)(a1 + 14408) + 8 * v3);
  if (a3) {
LABEL_20:
  }
    CIOnThreadCleanUpPop(v16);
LABEL_21:
  uint64_t v19 = *(void *)&threadData[18 * v26 + 2];
  unsigned int v20 = v25;
  uint64_t v21 = v19 + 320 * v25;
  *(_DWORD *)(v21 + 312) = v12;
  int v22 = *(void (**)(void))(v21 + 232);
  if (v22) {
    v22(*(void *)(v19 + 320 * v20 + 288));
  }
  dropThreadId(v26, 0, v6);
  return v18;
}

uint64_t _CIDelete(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 8))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "Skipping because index is shut down", buf, 2u);
    }
    return 0;
  }
  int v8 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v9 = setThreadIdAndInfo(-1, (long long *)sIndexExceptionCallbacks, a1, 0, v8);
  unsigned int v114 = HIDWORD(v9);
  unsigned int v115 = v9;
  unsigned int v112 = v11;
  unsigned int v113 = v10;
  uint64_t v12 = *(void *)&threadData[18 * v9 + 2];
  uint64_t v13 = v12 + 320 * HIDWORD(v9);
  *(unsigned char *)(v13 + 216) = 0;
  int v14 = *(_DWORD *)(v13 + 312);
  unsigned int v15 = *(void (**)(void))(v13 + 224);
  if (v15) {
    v15(*(void *)(v12 + 320 * HIDWORD(v9) + 288));
  }
  if (_setjmp((int *)v13))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
    }
    *(_DWORD *)(v13 + 312) = v14;
    CIOnThreadCleanUpReset(v112);
    dropThreadId(v115, 1, v8);
    CICleanUpReset(v115, v113);
    return 0;
  }
  if (dword_1E9FC90CC >= 5)
  {
    int v90 = *__error();
    int v91 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)int64x2_t v125 = a2;
      *(_WORD *)&v125[4] = 2048;
      *(void *)&v125[6] = a3;
      _os_log_impl(&dword_1BD672000, v91, OS_LOG_TYPE_DEFAULT, "delete docId: %d oid: %lld", buf, 0x12u);
    }
    *__error() = v90;
  }
  if (*(unsigned char *)(a1 + 8))
  {
    if (*(unsigned char *)(a1 + 15203))
    {
      bzero(buf, 0x400uLL);
      if ((deleteDocument__COUNT__52 & 1) == 0)
      {
        deleteDocument__COUNT__52 = 1;
        int v17 = *__error();
        uint64_t v18 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          int v19 = fcntl(*(_DWORD *)(a1 + 64), 50, buf);
          if (buf[0]) {
            BOOL v20 = v19 < 0;
          }
          else {
            BOOL v20 = 1;
          }
          *(_DWORD *)uint64_t v116 = 136315906;
          uint64_t v117 = "deleteDocument";
          uint64_t v21 = (uint8_t *)"";
          if (!v20) {
            uint64_t v21 = buf;
          }
          __int16 v118 = 1024;
          int v119 = 4865;
          __int16 v120 = 2080;
          uint64_t v121 = v21;
          __int16 v122 = 2080;
          uint64_t v123 = a1 + 15208;
          int v22 = "%s:%d: trying to modify read only index %s/%s";
LABEL_78:
          _os_log_error_impl(&dword_1BD672000, v18, OS_LOG_TYPE_ERROR, v22, v116, 0x26u);
          goto LABEL_24;
        }
        goto LABEL_24;
      }
      goto LABEL_25;
    }
    pthread_key_t v23 = __THREAD_SLOT_KEY;
    if (!__THREAD_SLOT_KEY)
    {
      makeThreadId();
      pthread_key_t v23 = __THREAD_SLOT_KEY;
    }
    unint64_t v24 = pthread_getspecific(v23);
    if (!v24 || (unsigned int v25 = v24, (unint64_t)v24 >= 0x801))
    {
      makeThreadId();
      unsigned int v25 = pthread_getspecific(__THREAD_SLOT_KEY);
    }
    uint64_t v26 = (uint64_t)v25 - 1;
    HIDWORD(v28) = qos_class_self() - 9;
    LODWORD(v28) = HIDWORD(v28);
    unsigned int v27 = v28 >> 2;
    if (v27 > 6) {
      signed int v29 = 0;
    }
    else {
      signed int v29 = dword_1BDA87810[v27];
    }
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 14504));
    if (*(void *)(a1 + 14688) || *(_DWORD *)(a1 + 14700) || *(unsigned char *)(a1 + 14716)) {
      goto LABEL_36;
    }
    if (v29 <= 5)
    {
      if (*(void *)(a1 + 16 * v29 + 14568))
      {
LABEL_36:
        db_rwlock_wait(a1 + 14504, v29, 2);
LABEL_37:
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 14504));
        CIOnThreadCleanUpPush(v26, (uint64_t)si_rwlock_wrunlock_2795, a1 + 14504);
        uint64_t v30 = *(void *)(a1 + 80);
        unint64_t v31 = a2 - v30;
        uint64_t v32 = a2 - v30;
        if (a2 != v30 && v31 >= *(unsigned int *)(a1 + 68))
        {
          uint64_t v110 = v26;
          uint64_t v33 = a2 - v30;
          int v34 = *__error();
          int v35 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          {
            int v63 = *(_DWORD *)(a1 + 68);
            *(_DWORD *)long long buf = 136315906;
            *(void *)int64x2_t v125 = "deleteDocument";
            *(_WORD *)&v125[8] = 1024;
            *(_DWORD *)&v125[10] = 4879;
            *(_WORD *)&v125[14] = 2048;
            *(void *)&v125[16] = v33;
            *(_WORD *)&v125[24] = 1024;
            *(_DWORD *)&v125[26] = v63;
            _os_log_error_impl(&dword_1BD672000, v35, OS_LOG_TYPE_ERROR, "%s:%d: deleteDocument error - docId (%lld) >= max (%d) ", buf, 0x22u);
          }
          *__error() = v34;
          uint64_t v32 = v33;
          uint64_t v26 = v110;
        }
        if (!v32) {
          goto LABEL_47;
        }
        unsigned int v36 = v32;
        if (*(_DWORD *)(a1 + 68) <= v32) {
          goto LABEL_47;
        }
        uint64_t v37 = *(void *)(*(void *)(a1 + 14408) + 8 * v32);
        if (v37 != a3)
        {
          if (v37)
          {
            uint64_t v43 = *(void *)(*(void *)(a1 + 14408) + 8 * v32);
            uint64_t v44 = v32;
            uint64_t v45 = v26;
            int v46 = *__error();
            int v47 = _SILogForLogForCategory(0);
            os_log_type_t v48 = gSILogLevels[0] < 3;
            if (os_log_type_enabled(v47, (os_log_type_t)(gSILogLevels[0] < 3)))
            {
              *(_DWORD *)long long buf = 134218496;
              *(void *)int64x2_t v125 = a3;
              *(_WORD *)&v125[8] = 2048;
              *(void *)&v125[10] = v44;
              *(_WORD *)&v125[18] = 2048;
              *(void *)&v125[20] = v43;
              _os_log_impl(&dword_1BD672000, v47, v48, "*warn* deleteDocument error: mismatch oid: %ld docId: %ld idxOid: %ld", buf, 0x20u);
            }
            *__error() = v46;
            LOBYTE(v37) = 0;
            uint64_t v26 = v45;
          }
          goto LABEL_48;
        }
        uint64_t v38 = a1 + 14716;
        if (*(unsigned char *)(a1 + 15203))
        {
          if ((indexMarkDirtyForce__COUNT_ & 1) == 0)
          {
            uint64_t v57 = v26;
            indexMarkDirtyForce__COUNT_ = 1;
            int v58 = *__error();
            uint64_t v59 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 136315650;
              *(void *)int64x2_t v125 = "indexMarkDirtyForce";
              *(_WORD *)&v125[8] = 1024;
              *(_DWORD *)&v125[10] = 2617;
              *(_WORD *)&v125[14] = 2080;
              *(void *)&v125[16] = a1 + 15208;
              _os_log_error_impl(&dword_1BD672000, v59, OS_LOG_TYPE_ERROR, "%s:%d: trying to modify read only index %s", buf, 0x1Cu);
            }
            *__error() = v58;
            LOBYTE(v37) = 0;
            uint64_t v26 = v57;
            goto LABEL_48;
          }
LABEL_47:
          LOBYTE(v37) = 0;
LABEL_48:
          char v16 = v37;
          CIOnThreadCleanUpPop(v26);
          goto LABEL_49;
        }
        if (!*(unsigned char *)(a1 + 8) || (unsigned int v49 = atomic_load((unsigned int *)(a1 + 32))) == 0)
        {
LABEL_95:
          int v73 = *(unsigned __int8 *)(a1 + 45);
          if (*(unsigned char *)(a1 + 45)) {
            int v74 = *(unsigned __int8 *)(*(void *)(a1 + 14432) + v32);
          }
          else {
            int v74 = (*(_DWORD *)(*(void *)(a1 + 14432) + 4 * (v36 / 5uLL)) >> (6 * (v36 % 5))) & 0x3F;
          }
          LODWORD(v37) = v74 & 0xFFFFFFDF;
          if (v37)
          {
            atomic_fetch_add((atomic_uint *volatile)(a1 + 16), 1u);
            int v73 = *(unsigned __int8 *)(a1 + 45);
          }
          if (v73)
          {
            *(unsigned char *)(*(void *)(a1 + 14432) + v32) = 0;
            uint64_t v75 = *(void *)(a1 + 14440);
            if (v75) {
              *(unsigned char *)(v75 + v31 / (unint64_t)(32 * *MEMORY[0x1E4F14B00])) |= 1 << ((v31 / (unint64_t)(4 * *MEMORY[0x1E4F14B00])) & 7);
            }
LABEL_112:
            if (!*(unsigned char *)(v38 + 487) && (*(unsigned char *)(v38 + 484) & 6) == 0 && *(_DWORD *)(a1 + 68) >= 0x2711u)
            {
              unsigned int v88 = atomic_load((unsigned int *)(a1 + 16));
              if (*(_DWORD *)(a1 + 68) < 4 * v88) {
                *(unsigned char *)(v38 + 484) |= 2u;
              }
            }
            goto LABEL_48;
          }
          unint64_t v76 = v36 / 5uLL;
          uint64_t v77 = *(void *)(a1 + 14432);
          unint64_t v78 = v76;
          unsigned int v79 = *(_DWORD *)(v77 + 4 * v76) & ~(63 << (6 * (v36 % 5)));
          if (*(void *)(a1 + 14440))
          {
            int v80 = (uint64_t *)MEMORY[0x1E4F14B00];
            unint64_t v81 = v76 / (8 * *MEMORY[0x1E4F14B00]);
            uint64_t v82 = (v76 / *MEMORY[0x1E4F14B00]) & 7;
            *(unsigned char *)(*(void *)(a1 + 14440) + v81) |= 1 << v82;
            if (*(unsigned char *)(*(void *)(a1 + 14440) + v81))
            {
              uint64_t v83 = *v80;
              uint64_t v84 = v82 | (8 * v81);
              if (v83 * v84 > v76)
              {
                unsigned int v105 = __si_assert_copy_extra_2445(0, -1);
                int v102 = v105;
                uint64_t v103 = "";
                if (v105) {
                  uint64_t v103 = v105;
                }
                unsigned int v104 = "vm_page_size*(gslot*8+bslot) <=slot";
              }
              else
              {
                if (v83 * (unint64_t)(v84 + 1) > v76)
                {
                  uint64_t v85 = *(void *)(a1 + 14432);
                  int v86 = *(unsigned __int8 *)(a1 + 45);
                  *(_DWORD *)(v85 + 4 * v78) = v79;
                  if (v86)
                  {
                    int v87 = *(unsigned __int8 *)(v85 + v32);
                    goto LABEL_111;
                  }
LABEL_110:
                  int v87 = (v79 >> (6 * (v36 % 5))) & 0x3F;
LABEL_111:
                  if (v87)
                  {
                    BOOL v97 = __si_assert_copy_extra_2445(0, -1);
                    uint64_t v98 = v97;
                    uint64_t v99 = "";
                    if (v97) {
                      uint64_t v99 = v97;
                    }
                    __message_assert("%s:%u: failed assertion '%s' %s ", "JHContentIndex.c", 4896, "((cindex)->coreSpotlight?({ ((uint8_t *)(cindex)->groups)[(payloadIndex)]; }):({ uint32_t __where="
                      "(uint32_t)(payloadIndex); uint32_t __slot = __where/5; uint32_t __shift= (__where-(__slot*5))*6; u"
                      "int32_t __word = ((uint32_t)((cindex)->groups[__slot])); (__word >> __shift) & 0x3F ; }))==(inval&0x3F)",
                      v99);
                    free(v98);
                    if (__valid_fs(-1)) {
                      uint64_t v100 = 2989;
                    }
                    else {
                      uint64_t v100 = 3072;
                    }
                    *(_DWORD *)uint64_t v100 = -559038737;
                    abort();
                  }
                  goto LABEL_112;
                }
                unsigned int v106 = __si_assert_copy_extra_2445(0, -1);
                int v102 = v106;
                uint64_t v103 = "";
                if (v106) {
                  uint64_t v103 = v106;
                }
                unsigned int v104 = "vm_page_size*(gslot*8+bslot+1) >slot";
              }
            }
            else
            {
              unsigned int v101 = __si_assert_copy_extra_2445(0, -1);
              int v102 = v101;
              uint64_t v103 = "";
              if (v101) {
                uint64_t v103 = v101;
              }
              unsigned int v104 = "(cindex)->groupMap[gslot]";
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "JHContentIndex.c", 4896, v104, v103);
            free(v102);
            if (__valid_fs(-1)) {
              uint64_t v107 = 2989;
            }
            else {
              uint64_t v107 = 3072;
            }
            *(_DWORD *)uint64_t v107 = -559038737;
            abort();
          }
          *(_DWORD *)(v77 + 4 * v76) = v79;
          goto LABEL_110;
        }
        int v111 = v32;
        HIDWORD(v51) = qos_class_self() - 9;
        LODWORD(v51) = HIDWORD(v51);
        unsigned int v50 = v51 >> 2;
        unsigned int v109 = (pthread_mutex_t *)(a1 + 14720);
        if (v50 > 6) {
          int v52 = 0;
        }
        else {
          int v52 = dword_1BDA87810[v50];
        }
        pthread_mutex_lock(v109);
        unsigned int v64 = v52;
        if (*(void *)(a1 + 14904) || *(_DWORD *)(a1 + 14916) || *(unsigned char *)(a1 + 14932)) {
          goto LABEL_83;
        }
        if (v52 <= 5)
        {
          if (*(void *)(a1 + 16 * v52 + 14784))
          {
LABEL_83:
            uint64_t v65 = (pthread_mutex_t *)(a1 + 14720);
            db_rwlock_wait((uint64_t)v109, v64, 2);
LABEL_84:
            pthread_mutex_unlock(v65);
            unsigned int v66 = atomic_load((unsigned int *)(a1 + 32));
            if (v66 == -804450864 || (unsigned int v67 = atomic_load((unsigned int *)(a1 + 15192))) != 0 && (a4 & 1) == 0)
            {
              int v108 = *__error();
              uint64_t v68 = _SILogForLogForCategory(10);
              if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
              {
                unsigned int v96 = atomic_load((unsigned int *)(a1 + 15192));
                *(_DWORD *)long long buf = 136315906;
                *(void *)int64x2_t v125 = "indexMarkDirtyForce";
                *(_WORD *)&v125[8] = 1024;
                *(_DWORD *)&v125[10] = 2630;
                *(_WORD *)&v125[14] = 1024;
                *(_DWORD *)&v125[16] = v66;
                *(_WORD *)&v125[20] = 1024;
                *(_DWORD *)&v125[22] = v96;
                _os_log_error_impl(&dword_1BD672000, v68, OS_LOG_TYPE_ERROR, "%s:%d: indexMarkDirty failed - state:%x closing:%d", buf, 0x1Eu);
              }
              uint64_t v69 = v26;
              *__error() = v108;
            }
            else
            {
              uint64_t v89 = *(void *)(a1 + 15184);
              if (!v89 || !(*(unsigned int (**)(void))(v89 + 16))())
              {
                uint64_t v69 = v26;
                indexWriteShutdowState(a1);
                int v70 = 1;
LABEL_91:
                pthread_mutex_lock(v65);
                *(_DWORD *)(a1 + 14924) = 0;
                uint64_t v71 = *(pthread_override_s **)(a1 + 14896);
                *(void *)(a1 + 14904) = 0;
                *(void *)(a1 + 14896) = 0;
                char v72 = *(_DWORD *)(a1 + 14916) != 0;
                *(unsigned char *)(a1 + 14932) = 0;
                db_rwlock_wakeup((uint64_t)v65, v72, 0);
                pthread_mutex_unlock(v65);
                if (v71)
                {
                  pthread_override_qos_class_end_np(v71);
                  uint64_t v26 = v69;
                  LODWORD(v32) = v111;
                  uint64_t v38 = a1 + 14716;
                  if ((v70 & 1) == 0) {
                    goto LABEL_47;
                  }
                }
                else
                {
                  uint64_t v26 = v69;
                  LODWORD(v32) = v111;
                  uint64_t v38 = a1 + 14716;
                  if (!v70) {
                    goto LABEL_47;
                  }
                }
                goto LABEL_95;
              }
              uint64_t v69 = v26;
            }
            int v70 = 0;
            goto LABEL_91;
          }
          uint64_t v92 = v52 - 1;
          uint64_t v93 = (uint64_t *)(a1 + 16 * v52 + 14800);
          while (v92 != 4)
          {
            uint64_t v94 = *v93;
            v93 += 2;
            uint64_t v95 = ++v92;
            if (v94)
            {
              if (v95 <= 4) {
                goto LABEL_83;
              }
              break;
            }
          }
        }
        *(void *)(a1 + 14904) = pthread_self();
        uint64_t v65 = (pthread_mutex_t *)(a1 + 14720);
        goto LABEL_84;
      }
      uint64_t v53 = v29 - 1;
      uint64_t v54 = (uint64_t *)(a1 + 16 * v29 + 14584);
      while (v53 != 4)
      {
        uint64_t v55 = *v54;
        v54 += 2;
        uint64_t v56 = ++v53;
        if (v55)
        {
          if (v56 <= 4) {
            goto LABEL_36;
          }
          break;
        }
      }
    }
    *(void *)(a1 + 14688) = pthread_self();
    goto LABEL_37;
  }
  bzero(buf, 0x400uLL);
  if ((deleteDocument__COUNT_ & 1) == 0)
  {
    deleteDocument__COUNT_ = 1;
    int v17 = *__error();
    uint64_t v18 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      int v60 = fcntl(*(_DWORD *)(a1 + 64), 50, buf);
      if (buf[0]) {
        BOOL v61 = v60 < 0;
      }
      else {
        BOOL v61 = 1;
      }
      *(_DWORD *)uint64_t v116 = 136315906;
      uint64_t v117 = "deleteDocument";
      uint64_t v62 = (uint8_t *)"";
      if (!v61) {
        uint64_t v62 = buf;
      }
      __int16 v118 = 1024;
      int v119 = 4859;
      __int16 v120 = 2080;
      uint64_t v121 = v62;
      __int16 v122 = 2080;
      uint64_t v123 = a1 + 15208;
      int v22 = "%s:%d: trying to delete from invalid index %s/%s";
      goto LABEL_78;
    }
LABEL_24:
    *__error() = v17;
  }
LABEL_25:
  char v16 = 0;
LABEL_49:
  uint64_t v39 = *(void *)&threadData[18 * v115 + 2];
  uint64_t v40 = v39 + 320 * v114;
  *(_DWORD *)(v40 + 312) = v14;
  __int32 v41 = *(void (**)(void))(v40 + 232);
  if (v41) {
    v41(*(void *)(v39 + 320 * v114 + 288));
  }
  dropThreadId(v115, 0, v8);
  return v16;
}

uint64_t CIOnThreadCleanUpPop(uint64_t result)
{
  uint64_t v1 = &threadData[18 * result];
  int v4 = v1[14];
  unint64_t v3 = v1 + 14;
  int v2 = v4;
  if (!v4)
  {
    uint64_t v12 = __si_assert_copy_extra_329();
    uint64_t v13 = v12;
    int v14 = "";
    if (v12) {
      int v14 = v12;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "ContentIndexExceptionHandler.c", 1675, "td->onThreadCleanUpCount", v14);
    free(v13);
    if (__valid_fs(-1)) {
      uint64_t v15 = 2989;
    }
    else {
      uint64_t v15 = 3072;
    }
    *(_DWORD *)uint64_t v15 = -559038737;
    abort();
  }
  uint64_t v5 = (v2 - 1);
  _DWORD *v3 = v5;
  int v6 = &threadData[18 * result];
  uint64_t v9 = *((void *)v6 + 8);
  int v8 = (uint64_t *)(v6 + 16);
  uint64_t v7 = v9;
  unsigned int v10 = (uint64_t (**)(void))(v9 + 16 * v5);
  unsigned int v11 = *v10;
  if (*v10)
  {
    const char *v10 = 0;
    uint64_t result = v11(*(void *)(v7 + 16 * v5 + 8));
    uint64_t v7 = *v8;
    uint64_t v5 = *v3;
  }
  *(void *)(v7 + 16 * v5) = 0;
  return result;
}

void __processNodes_block_invoke(uint64_t a1, uint64_t a2)
{
  makeThreadId();
  char v62 = 0;
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v58 = *(void *)(a1 + 32);
  long long v59 = 0u;
  long long v60 = 0u;
  uint64_t v61 = 0;
  uint64_t v5 = *(void *)(*(void *)(v4 + 8 * a2) + 56);
  if (*(unsigned char *)(v5 + 8))
  {
    int v6 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
    unint64_t v7 = setThreadIdAndInfo(-1, (long long *)sIndexExceptionCallbacks, v5, 0, v6);
    unsigned int v56 = HIDWORD(v7);
    *(_DWORD *)long long buf = v7;
    unint64_t v55 = __PAIR64__(v8, v9);
    uint64_t v10 = *(void *)&threadData[18 * v7 + 2];
    uint64_t v11 = v10 + 320 * HIDWORD(v7);
    *(unsigned char *)(v11 + 216) = 0;
    int v12 = *(_DWORD *)(v11 + 312);
    uint64_t v13 = *(void (**)(void))(v11 + 224);
    if (v13) {
      v13(*(void *)(v10 + 320 * HIDWORD(v7) + 288));
    }
    unsigned int v54 = *(_DWORD *)buf;
    unsigned int v53 = v56;
    unint64_t v52 = v55;
    if (_setjmp((int *)v11))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)unint64_t v51 = 0;
        _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v51, 2u);
      }
      *(_DWORD *)(v11 + 312) = v12;
      unsigned int v14 = v52;
      if (__THREAD_SLOT_KEY)
      {
        uint64_t v15 = pthread_getspecific(__THREAD_SLOT_KEY);
        if (!v15) {
          goto LABEL_36;
        }
      }
      else
      {
        makeThreadId();
        uint64_t v15 = pthread_getspecific(__THREAD_SLOT_KEY);
        if (!v15) {
          goto LABEL_36;
        }
      }
      char v16 = v15;
      if ((unint64_t)v15 < 0x801)
      {
LABEL_10:
        uint64_t v17 = (uint64_t)v16 - 1;
        uint64_t v18 = &threadData[18 * ((uint64_t)v16 - 1)];
        unsigned int v20 = v18[14];
        int v19 = v18 + 14;
        if (v20 > v14)
        {
          do
            CIOnThreadCleanUpPop(v17);
          while (*v19 > v14);
        }
        dropThreadId(v54, 1, v6);
        CICleanUpReset(v54, HIDWORD(v52));
        goto LABEL_32;
      }
LABEL_36:
      makeThreadId();
      char v16 = pthread_getspecific(__THREAD_SLOT_KEY);
      goto LABEL_10;
    }
    int v21 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
    unint64_t v22 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v21);
    unsigned int v50 = HIDWORD(v22);
    *(_DWORD *)unint64_t v51 = v22;
    unint64_t v49 = __PAIR64__(v23, v24);
    uint64_t v25 = *(void *)&threadData[18 * v22 + 2];
    uint64_t v26 = v25 + 320 * HIDWORD(v22);
    int v27 = *(_DWORD *)(v26 + 312);
    unint64_t v28 = *(void (**)(void))(v26 + 224);
    if (v28) {
      v28(*(void *)(v25 + 320 * HIDWORD(v22) + 288));
    }
    unsigned int v48 = *(_DWORD *)v51;
    unsigned int v47 = v50;
    unint64_t v46 = v49;
    if (!_setjmp((int *)v26))
    {
      char v62 = 1;
      uint64_t v36 = *(void *)(*(void *)(a1 + 40) + 8 * a2);
      _ContentIndexDocSetIteratorProcessIterHits(v36, *(unsigned __int8 *)(a1 + 68), *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60), *(_DWORD *)(a1 + 64), *(unsigned __int8 *)(v36 + 34), &v58);
      char v62 = 0;
      uint64_t v37 = *(void *)&threadData[18 * v48 + 2];
      unsigned int v38 = v47;
      uint64_t v39 = v37 + 320 * v47;
      *(_DWORD *)(v39 + 312) = v27;
      uint64_t v40 = *(void (**)(void))(v39 + 232);
      if (v40) {
        v40(*(void *)(v37 + 320 * v38 + 288));
      }
      dropThreadId(v48, 0, v21);
      goto LABEL_29;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v45 = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v45, 2u);
    }
    *(_DWORD *)(v26 + 312) = v27;
    unsigned int v29 = v46;
    if (__THREAD_SLOT_KEY)
    {
      uint64_t v30 = pthread_getspecific(__THREAD_SLOT_KEY);
      if (!v30) {
        goto LABEL_38;
      }
    }
    else
    {
      makeThreadId();
      uint64_t v30 = pthread_getspecific(__THREAD_SLOT_KEY);
      if (!v30) {
        goto LABEL_38;
      }
    }
    unint64_t v31 = v30;
    if ((unint64_t)v30 < 0x801)
    {
LABEL_23:
      uint64_t v32 = (uint64_t)v31 - 1;
      uint64_t v33 = &threadData[18 * ((uint64_t)v31 - 1)];
      unsigned int v35 = v33[14];
      int v34 = v33 + 14;
      if (v35 > v29)
      {
        do
          CIOnThreadCleanUpPop(v32);
        while (*v34 > v29);
      }
      dropThreadId(v48, 1, v21);
      CICleanUpReset(v48, HIDWORD(v46));
LABEL_29:
      uint64_t v41 = *(void *)&threadData[18 * v54 + 2];
      unsigned int v42 = v53;
      uint64_t v43 = v41 + 320 * v53;
      *(_DWORD *)(v43 + 312) = v12;
      uint64_t v44 = *(void (**)(void))(v43 + 232);
      if (v44) {
        v44(*(void *)(v41 + 320 * v42 + 288));
      }
      dropThreadId(v54, 0, v6);
      goto LABEL_32;
    }
LABEL_38:
    makeThreadId();
    unint64_t v31 = pthread_getspecific(__THREAD_SLOT_KEY);
    goto LABEL_23;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "Skipping because index is shut down", buf, 2u);
  }
LABEL_32:
  CIIndexSetDisposePerThreadCache(&v58);
  if (v62) {
    **(unsigned char **)(a1 + 48) = 1;
  }
}

void __processLeaves_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  if (dword_1E9FC90A8 >= 5)
  {
    int v50 = *__error();
    unint64_t v51 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)unsigned int v66 = 134217984;
      *(void *)&v66[4] = a2;
      _os_log_impl(&dword_1BD672000, v51, OS_LOG_TYPE_DEFAULT, "Processing leaf %ld", v66, 0xCu);
    }
    *__error() = v50;
  }
  makeThreadId();
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8 * a2);
  char v65 = 0;
  *(void *)unsigned int v66 = v4;
  *(_OWORD *)&v66[8] = 0u;
  long long v67 = 0u;
  uint64_t v68 = 0;
  uint64_t v6 = *(void *)(v5 + 56);
  if (*(unsigned char *)(v6 + 8))
  {
    int v7 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
    unint64_t v8 = setThreadIdAndInfo(-1, (long long *)sIndexExceptionCallbacks, v6, 0, v7);
    unsigned int v63 = HIDWORD(v8);
    *(_DWORD *)long long buf = v8;
    unint64_t v62 = __PAIR64__(v9, v10);
    uint64_t v11 = *(void *)&threadData[18 * v8 + 2];
    uint64_t v12 = v11 + 320 * HIDWORD(v8);
    *(unsigned char *)(v12 + 216) = 0;
    int v13 = *(_DWORD *)(v12 + 312);
    unsigned int v14 = *(void (**)(void))(v12 + 224);
    if (v14) {
      v14(*(void *)(v11 + 320 * HIDWORD(v8) + 288));
    }
    unsigned int v61 = *(_DWORD *)buf;
    unsigned int v60 = v63;
    unint64_t v59 = v62;
    if (_setjmp((int *)v12))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v58 = 0;
        _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v58, 2u);
      }
      *(_DWORD *)(v12 + 312) = v13;
      unsigned int v15 = v59;
      if (__THREAD_SLOT_KEY)
      {
        char v16 = pthread_getspecific(__THREAD_SLOT_KEY);
        if (!v16) {
          goto LABEL_47;
        }
      }
      else
      {
        makeThreadId();
        char v16 = pthread_getspecific(__THREAD_SLOT_KEY);
        if (!v16) {
          goto LABEL_47;
        }
      }
      uint64_t v17 = v16;
      if ((unint64_t)v16 < 0x801)
      {
LABEL_11:
        uint64_t v18 = (uint64_t)v17 - 1;
        int v19 = &threadData[18 * ((uint64_t)v17 - 1)];
        unsigned int v21 = v19[14];
        unsigned int v20 = v19 + 14;
        if (v21 > v15)
        {
          do
            CIOnThreadCleanUpPop(v18);
          while (*v20 > v15);
        }
        dropThreadId(v61, 1, v7);
        CICleanUpReset(v61, HIDWORD(v59));
        goto LABEL_40;
      }
LABEL_47:
      makeThreadId();
      uint64_t v17 = pthread_getspecific(__THREAD_SLOT_KEY);
      goto LABEL_11;
    }
    int v22 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
    unint64_t v23 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v22);
    unsigned int v57 = HIDWORD(v23);
    *(_DWORD *)uint64_t v58 = v23;
    unint64_t v56 = __PAIR64__(v24, v25);
    uint64_t v26 = *(void *)&threadData[18 * v23 + 2];
    uint64_t v27 = v26 + 320 * HIDWORD(v23);
    int v28 = *(_DWORD *)(v27 + 312);
    unsigned int v29 = *(void (**)(void))(v27 + 224);
    if (v29) {
      v29(*(void *)(v26 + 320 * HIDWORD(v23) + 288));
    }
    unsigned int v55 = *(_DWORD *)v58;
    unsigned int v54 = v57;
    unint64_t v53 = v56;
    if (!_setjmp((int *)v27))
    {
      char v65 = 1;
      *(unsigned char *)(v5 + 32) = 0;
      _ContentIndexDocSetIteratorProcessIterHits(v5, *(unsigned __int8 *)(a1 + 68), *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60), *(_DWORD *)(a1 + 64), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8 * a2) + 34), v66);
      if (*(_DWORD *)(a1 + 56) == 1)
      {
        int v38 = *(_DWORD *)(v5 + 48);
        if (v38 == 3 || v38 == 8)
        {
          CIIndexSetShrink(*(_DWORD **)(*(void *)(v5 + 64) + 88), v37);
          uint64_t v40 = *(void *)(*(void *)(v5 + 64) + 96);
          if (v40)
          {
            if (*(int *)(v40 + 16) <= -10)
            {
              _CIIndexSetConvertIfArrayIsMuchMoreEfficient((int *)v40, *(_DWORD *)(v40 + 20), *(_DWORD *)(v40 + 24), 0, 0, v39);
              if (*(int *)(v40 + 16) <= -10) {
                _CIIndexSetConvertIfInvertedArrayIsMoreEfficient((_DWORD *)v40, 0, v41);
              }
            }
          }
        }
      }
      char v65 = 0;
      uint64_t v42 = *(void *)&threadData[18 * v55 + 2];
      unsigned int v43 = v54;
      uint64_t v44 = v42 + 320 * v54;
      *(_DWORD *)(v44 + 312) = v28;
      uint64_t v45 = *(void (**)(void))(v44 + 232);
      if (v45) {
        v45(*(void *)(v42 + 320 * v43 + 288));
      }
      dropThreadId(v55, 0, v22);
      goto LABEL_37;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unint64_t v52 = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v52, 2u);
    }
    *(_DWORD *)(v27 + 312) = v28;
    unsigned int v30 = v53;
    if (__THREAD_SLOT_KEY)
    {
      unint64_t v31 = pthread_getspecific(__THREAD_SLOT_KEY);
      if (!v31) {
        goto LABEL_49;
      }
    }
    else
    {
      makeThreadId();
      unint64_t v31 = pthread_getspecific(__THREAD_SLOT_KEY);
      if (!v31) {
        goto LABEL_49;
      }
    }
    uint64_t v32 = v31;
    if ((unint64_t)v31 < 0x801)
    {
LABEL_24:
      uint64_t v33 = (uint64_t)v32 - 1;
      int v34 = &threadData[18 * ((uint64_t)v32 - 1)];
      unsigned int v36 = v34[14];
      unsigned int v35 = v34 + 14;
      if (v36 > v30)
      {
        do
          CIOnThreadCleanUpPop(v33);
        while (*v35 > v30);
      }
      dropThreadId(v55, 1, v22);
      CICleanUpReset(v55, HIDWORD(v53));
LABEL_37:
      uint64_t v46 = *(void *)&threadData[18 * v61 + 2];
      unsigned int v47 = v60;
      uint64_t v48 = v46 + 320 * v60;
      *(_DWORD *)(v48 + 312) = v13;
      unint64_t v49 = *(void (**)(void))(v48 + 232);
      if (v49) {
        v49(*(void *)(v46 + 320 * v47 + 288));
      }
      dropThreadId(v61, 0, v7);
      goto LABEL_40;
    }
LABEL_49:
    makeThreadId();
    uint64_t v32 = pthread_getspecific(__THREAD_SLOT_KEY);
    goto LABEL_24;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "Skipping because index is shut down", buf, 2u);
  }
LABEL_40:
  CIIndexSetDisposePerThreadCache(v66);
  if (v65) {
    **(unsigned char **)(a1 + 48) = 1;
  }
}

void _ContentIndexDocSetIteratorProcessIterHits(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6, void *a7)
{
  uint64_t v178 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 32))
  {
    makeThreadId();
    uint64_t v14 = *(void *)(a1 + 56);
    if (!*(unsigned char *)(v14 + 8))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "Skipping because index is shut down", buf, 2u);
      }
      goto LABEL_56;
    }
    unsigned int v166 = a4;
    unsigned int v167 = a3;
    int v15 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
    unint64_t v16 = setThreadIdAndInfo(-1, (long long *)sIndexExceptionCallbacks, v14, 0, v15);
    unint64_t v176 = __PAIR64__(v16, HIDWORD(v16));
    unint64_t v175 = __PAIR64__(v17, v18);
    uint64_t v19 = *(void *)&threadData[18 * v16 + 2];
    uint64_t v20 = v19 + 320 * HIDWORD(v16);
    *(unsigned char *)(v20 + 216) = 0;
    int v21 = *(_DWORD *)(v20 + 312);
    int v22 = *(void (**)(void))(v20 + 224);
    if (v22) {
      v22(*(void *)(v19 + 320 * HIDWORD(v16) + 288));
    }
    unint64_t v174 = v176;
    unint64_t v173 = v175;
    if (_setjmp((int *)v20))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
      }
      *(_DWORD *)(v20 + 312) = v21;
      if (__THREAD_SLOT_KEY)
      {
        unint64_t v23 = pthread_getspecific(__THREAD_SLOT_KEY);
        if (!v23) {
          goto LABEL_236;
        }
      }
      else
      {
        makeThreadId();
        unint64_t v23 = pthread_getspecific(__THREAD_SLOT_KEY);
        if (!v23) {
          goto LABEL_236;
        }
      }
      unsigned int v24 = v23;
      if ((unint64_t)v23 < 0x801)
      {
LABEL_11:
        uint64_t v25 = (uint64_t)v24 - 1;
        uint64_t v26 = &threadData[18 * ((uint64_t)v24 - 1)];
        unsigned int v28 = v26[14];
        uint64_t v27 = v26 + 14;
        if (v28 > v173)
        {
          do
            CIOnThreadCleanUpPop(v25);
          while (*v27 > v173);
        }
        dropThreadId(HIDWORD(v174), 1, v15);
        CICleanUpReset(HIDWORD(v174), HIDWORD(v173));
LABEL_56:
        *(unsigned char *)(a1 + 32) = 1;
        return;
      }
LABEL_236:
      makeThreadId();
      unsigned int v24 = pthread_getspecific(__THREAD_SLOT_KEY);
      goto LABEL_11;
    }
    int v168 = v21;
    int v29 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
    unint64_t v30 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v29);
    unint64_t v172 = __PAIR64__(v30, HIDWORD(v30));
    unint64_t v171 = __PAIR64__(v31, v32);
    uint64_t v33 = *(void *)&threadData[18 * v30 + 2];
    uint64_t v34 = v33 + 320 * HIDWORD(v30);
    int v35 = *(_DWORD *)(v34 + 312);
    unsigned int v36 = *(void (**)(void))(v34 + 224);
    if (v36) {
      v36(*(void *)(v33 + 320 * HIDWORD(v30) + 288));
    }
    unint64_t v170 = v172;
    unint64_t v169 = v171;
    uint64_t v37 = _setjmp((int *)v34);
    if (v37)
    {
      int8x8_t v39 = (_DWORD *)(v34 + 312);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
      }
      *int8x8_t v39 = v35;
      int v40 = v168;
      if (__THREAD_SLOT_KEY)
      {
        int8x8_t v41 = pthread_getspecific(__THREAD_SLOT_KEY);
        if (!v41) {
          goto LABEL_238;
        }
      }
      else
      {
        makeThreadId();
        int8x8_t v41 = pthread_getspecific(__THREAD_SLOT_KEY);
        if (!v41) {
          goto LABEL_238;
        }
      }
      uint64_t v42 = v41;
      if ((unint64_t)v41 < 0x801)
      {
LABEL_24:
        uint64_t v43 = (uint64_t)v42 - 1;
        uint64_t v44 = &threadData[18 * ((uint64_t)v42 - 1)];
        unsigned int v46 = v44[14];
        uint64_t v45 = v44 + 14;
        if (v46 > v169)
        {
          do
            CIOnThreadCleanUpPop(v43);
          while (*v45 > v169);
        }
        dropThreadId(HIDWORD(v170), 1, v29);
        CICleanUpReset(HIDWORD(v170), HIDWORD(v169));
LABEL_53:
        uint64_t v60 = *(void *)&threadData[18 * HIDWORD(v174) + 2];
        unsigned int v61 = v174;
        uint64_t v62 = v60 + 320 * v174;
        *(_DWORD *)(v62 + 312) = v40;
        unsigned int v63 = *(void (**)(void))(v62 + 232);
        if (v63) {
          v63(*(void *)(v60 + 320 * v61 + 288));
        }
        dropThreadId(HIDWORD(v174), 0, v15);
        goto LABEL_56;
      }
LABEL_238:
      makeThreadId();
      uint64_t v42 = pthread_getspecific(__THREAD_SLOT_KEY);
      goto LABEL_24;
    }
    int v47 = a6;
    int v48 = *(_DWORD *)(a1 + 48);
    int v165 = v35;
    if ((v48 - 4) >= 4)
    {
      int v49 = v48;
      if (v48 != 3) {
        goto LABEL_34;
      }
      if (!a2) {
        goto LABEL_35;
      }
      uint64_t v37 = ContentIndexDocSetSquashUpdate(a1, v167);
    }
    else if (!*(void *)(a1 + 80))
    {
      uint64_t v37 = (uint64_t)NormalResolvedDocSet(a5);
      *(void *)(a1 + 80) = v37;
    }
    int v49 = *(_DWORD *)(a1 + 48);
LABEL_34:
    switch(v49)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 8:
      case 9:
        break;
      case 4:
        *(_DWORD *)(a1 + 52) = 0;
        uint64_t v37 = *(unsigned int *)(a1 + 96);
        if (!v37) {
          break;
        }
        uint64_t v84 = *(uint64_t **)(a1 + 72);
        int v85 = 0;
        int v86 = v84;
        uint64_t v87 = *(unsigned int *)(a1 + 96);
        do
        {
          uint64_t v88 = *v86++;
          int v89 = v85 | *(_DWORD *)(v88 + 52);
          *(_DWORD *)(a1 + 52) = v89;
          int v85 = v89;
          --v87;
        }
        while (v87);
        int v90 = v84;
        uint64_t v91 = v37;
        while (1)
        {
          int v92 = *(_DWORD *)(*v90 + 52);
          if (a6 && v92 == 1)
          {
            int v89 = 3;
            goto LABEL_159;
          }
          if (v89)
          {
            if (v92 != 3 && a6 == 0) {
              break;
            }
          }
          ++v90;
          if (!--v91) {
            goto LABEL_160;
          }
        }
        int v89 = 1;
LABEL_159:
        *(_DWORD *)(a1 + 52) = v89;
LABEL_160:
        int v98 = v89;
        goto LABEL_161;
      case 5:
        *(_DWORD *)(a1 + 52) = 0;
        uint64_t v37 = *(unsigned int *)(a1 + 96);
        if (!v37) {
          break;
        }
        uint64_t v94 = *(uint64_t **)(a1 + 72);
        uint64_t v95 = *(unsigned int *)(a1 + 96);
        int v96 = 0;
        do
        {
          uint64_t v97 = *v94++;
          int v98 = v96 | *(_DWORD *)(v97 + 52);
          *(_DWORD *)(a1 + 52) = v98;
          int v96 = v98;
          --v95;
        }
        while (v95);
        goto LABEL_161;
      case 6:
        *(_DWORD *)(a1 + 52) = 0;
        uint64_t v37 = *(unsigned int *)(a1 + 96);
        if (!v37) {
          break;
        }
        uint64_t v99 = *(uint64_t **)(a1 + 72);
        uint64_t v100 = *(unsigned int *)(a1 + 96);
        int v101 = 0;
        do
        {
          uint64_t v102 = *v99++;
          int v103 = *(_DWORD *)(v102 + 52);
          if (v103 == 1) {
            int v104 = a6;
          }
          else {
            int v104 = 1;
          }
          if (!v104) {
            int v101 = 3;
          }
          int v105 = v101 | v103;
          *(_DWORD *)(a1 + 52) = v101 | v103;
          v101 |= v103;
          --v100;
        }
        while (v100);
        int v98 = v105;
        goto LABEL_161;
      case 7:
        if (a6)
        {
          uint64_t v37 = *(unsigned int *)(a1 + 96);
          if (v37)
          {
            unsigned int v106 = *(uint64_t **)(a1 + 72);
            int v107 = *(_DWORD *)(a1 + 52);
            uint64_t v108 = *(unsigned int *)(a1 + 96);
            do
            {
              uint64_t v109 = *v106++;
              int v98 = v107 | *(_DWORD *)(v109 + 52);
              *(_DWORD *)(a1 + 52) = v98;
              int v107 = v98;
              --v108;
            }
            while (v108);
            goto LABEL_161;
          }
          uint64_t v37 = 0;
          int v132 = *(_DWORD *)(a1 + 52);
          uint64_t v125 = 0;
        }
        else
        {
          int v124 = *(uint64_t **)(a1 + 72);
          uint64_t v37 = *(unsigned int *)(*v124 + 52);
          *(_DWORD *)(a1 + 52) = v37;
          if (v37 > 2) {
            break;
          }
          uint64_t v125 = *(unsigned int *)(a1 + 96);
          if (v125 >= 2)
          {
            uint64_t v126 = v125 - 1;
            uint64_t v127 = v124 + 1;
            int v128 = v37;
            do
            {
              uint64_t v129 = *v127++;
              int v130 = *(_DWORD *)(v129 + 52);
              if (v130 == 3) {
                int v130 = 1;
              }
              int v131 = v128 | v130;
              *(_DWORD *)(a1 + 52) = v128 | v130;
              v128 |= v130;
              --v126;
            }
            while (v126);
            int v98 = v131;
            uint64_t v37 = v125;
LABEL_161:
            uint64_t v125 = v37;
            int v132 = v98;
            switch(v98)
            {
              case 0:
              case 1:
              case 2:
              case 3:
              case 8:
              case 9:
                goto LABEL_35;
              case 4:
                if (v98 != 1) {
                  goto LABEL_35;
                }
                if (!*(void *)(a1 + 88))
                {
                  *(void *)(a1 + 88) = NormalResolvedDocSet(a5);
                  uint64_t v37 = *(unsigned int *)(a1 + 96);
                }
                if (!v37) {
                  goto LABEL_35;
                }
                unint64_t v141 = 0;
                do
                {
                  uint64_t v37 = *(void *)(*(void *)(a1 + 72) + 8 * v141);
                  if (*(_DWORD *)(v37 + 52) == 3)
                  {
                    if (*(_DWORD *)(v37 + 48) == 1)
                    {
                      BOOL v142 = *(unsigned int **)(a1 + 88);
                      *(_DWORD *)long long buf = -1;
                      uint64_t v37 = (uint64_t)_CIIndexSetAddIndexesInRange(v142, v167, v166, (int *)buf, v38);
                    }
                    else
                    {
                      uint64_t v37 = ContentIndexDocSetGrabBitVector(v37);
                      if (v37) {
                        CIIndexSetAddRange(*(unsigned int **)(a1 + 88), (_DWORD *)v37, v167, v166, v38);
                      }
                    }
                  }
                  ++v141;
                  unint64_t v143 = *(unsigned int *)(a1 + 96);
                }
                while (v141 < v143);
                if (!v143) {
                  goto LABEL_35;
                }
                for (unint64_t i = 0; i < v154; ++i)
                {
                  uint64_t v155 = *(void *)(*(void *)(a1 + 72) + 8 * i);
                  if (*(_DWORD *)(v155 + 52) == 1)
                  {
                    uint64_t v37 = *(void *)(*(void *)(a1 + 72) + 8 * i);
                    unsigned int v156 = *(_DWORD *)(v155 + 48);
                    if (v156 > 9) {
                      goto LABEL_239;
                    }
                    if (((1 << v156) & 0x307) != 0)
                    {
                      uint64_t v157 = 0;
LABEL_219:
                      switch(v156)
                      {
                        case 0u:
                        case 1u:
                        case 2u:
                          goto LABEL_222;
                        case 3u:
                        case 8u:
                          uint64_t v160 = *(void *)(v155 + 64);
                          if (!v160) {
                            goto LABEL_222;
                          }
                          uint64_t v159 = *(void *)(v160 + 88);
                          if (!v159) {
                            goto LABEL_222;
                          }
                          goto LABEL_221;
                        case 4u:
                        case 5u:
                        case 6u:
                        case 7u:
                        case 9u:
                          uint64_t v159 = *(void *)(v155 + 80);
                          if (v159) {
LABEL_221:
                          }
                            CIIndexSetRemoveRange(*(unsigned int **)(a1 + 88), v159, v167, v166);
LABEL_222:
                          if (v157) {
                            CIIndexSetAddRange(*(unsigned int **)(a1 + 88), v157, v167, v166, v38);
                          }
                          goto LABEL_211;
                        default:
                          goto LABEL_239;
                      }
                    }
                    if (((1 << v156) & 0xF0) != 0)
                    {
                      unint64_t v158 = (_DWORD **)(v155 + 88);
LABEL_218:
                      uint64_t v157 = *v158;
                      goto LABEL_219;
                    }
                    uint64_t v161 = *(void *)(v155 + 64);
                    if (v161)
                    {
                      unint64_t v158 = (_DWORD **)(v161 + 96);
                      goto LABEL_218;
                    }
                  }
LABEL_211:
                  unint64_t v154 = *(unsigned int *)(a1 + 96);
                }
                if (v154)
                {
                  unint64_t v162 = 0;
                  do
                  {
                    uint64_t v37 = *(void *)(*(void *)(a1 + 72) + 8 * v162);
                    if (!*(_DWORD *)(v37 + 52))
                    {
                      uint64_t v37 = ContentIndexDocSetGrabBitVector(v37);
                      if (v37) {
                        CIIndexSetRemoveRange(*(unsigned int **)(a1 + 88), v37, v167, v166);
                      }
                    }
                    ++v162;
                  }
                  while (v162 < *(unsigned int *)(a1 + 96));
                }
                goto LABEL_35;
              case 5:
              case 6:
                if (v98 != 1) {
                  goto LABEL_35;
                }
                if (!*(void *)(a1 + 88))
                {
                  *(void *)(a1 + 88) = NormalResolvedDocSet(a5);
                  uint64_t v37 = *(unsigned int *)(a1 + 96);
                }
                if (!v37) {
                  goto LABEL_35;
                }
                uint64_t v133 = v37;
                uint64_t v37 = 0;
                unint64_t v134 = v133;
                uint64_t v135 = 0;
                break;
              case 7:
                goto LABEL_191;
              default:
                goto LABEL_240;
            }
            while (1)
            {
              uint64_t v136 = *(void *)(*(void *)(a1 + 72) + 8 * v135);
              if (*(_DWORD *)(v136 + 52) == 1)
              {
                uint64_t v37 = *(void *)(*(void *)(a1 + 72) + 8 * v135);
                unsigned int v137 = *(_DWORD *)(v136 + 48);
                if (v137 > 9) {
                  goto LABEL_239;
                }
                int v138 = 1 << v137;
                if ((v138 & 0x307) == 0)
                {
                  if ((v138 & 0xF0) != 0)
                  {
                    uint64_t v139 = *(_DWORD **)(v136 + 88);
                    if (!v139) {
                      goto LABEL_168;
                    }
                  }
                  else
                  {
                    uint64_t v140 = *(void *)(v136 + 64);
                    if (!v140) {
                      goto LABEL_168;
                    }
                    uint64_t v139 = *(_DWORD **)(v140 + 96);
                    if (!v139) {
                      goto LABEL_168;
                    }
                  }
                  CIIndexSetAddRange(*(unsigned int **)(a1 + 88), v139, v167, v166, v38);
                  unint64_t v134 = *(unsigned int *)(a1 + 96);
                }
              }
LABEL_168:
              if (++v135 >= v134) {
                goto LABEL_35;
              }
            }
          }
          int v132 = v37;
        }
LABEL_191:
        if (v132 == 1)
        {
          if (!*(void *)(a1 + 88))
          {
            uint64_t v37 = (uint64_t)NormalResolvedDocSet(a5);
            *(void *)(a1 + 88) = v37;
            uint64_t v125 = *(unsigned int *)(a1 + 96);
          }
          if (v125)
          {
            uint64_t v144 = 0;
            while (1)
            {
              uint64_t v147 = *(void *)(*(void *)(a1 + 72) + 8 * v144);
              uint64_t v37 = v147;
              int v148 = *(_DWORD *)(v147 + 52);
              if (v148 != 3) {
                break;
              }
              uint64_t v37 = ContentIndexDocSetGrabBitVector(v147);
              int v145 = (_DWORD *)v37;
              unsigned int v146 = v167;
              if (v37) {
                goto LABEL_197;
              }
LABEL_198:
              if (++v144 >= (unint64_t)*(unsigned int *)(a1 + 96)) {
                goto LABEL_35;
              }
            }
            unsigned int v146 = v167;
            if (v148 != 1) {
              goto LABEL_198;
            }
            unsigned int v149 = *(_DWORD *)(v147 + 48);
            if (v149 > 9) {
LABEL_239:
            }
              assert_invalid_doc_type((_DWORD *)v37);
            int v150 = 1 << v149;
            if ((v150 & 0x307) != 0) {
              goto LABEL_198;
            }
            if ((v150 & 0xF0) != 0)
            {
              uint64_t v151 = (_DWORD **)(v147 + 88);
            }
            else
            {
              uint64_t v152 = *(void *)(v147 + 64);
              if (!v152) {
                goto LABEL_198;
              }
              uint64_t v151 = (_DWORD **)(v152 + 96);
            }
            int v145 = *v151;
            if (!*v151) {
              goto LABEL_198;
            }
LABEL_197:
            CIIndexSetAddRange(*(unsigned int **)(a1 + 88), v145, v146, v166, v38);
            goto LABEL_198;
          }
        }
        break;
      default:
LABEL_240:
        assert_invalid_doc_type((_DWORD *)a1);
    }
LABEL_35:
    int v50 = *(_DWORD *)(a1 + 48);
    int v51 = v50;
    unsigned int v52 = v167;
    if (v167 == 1 && (v50 == 9 || (v50 & 0xFFFFFFFC) == 4))
    {
      uint64_t v37 = (uint64_t)CIIndexSetShrink(*(_DWORD **)(a1 + 88), v38);
      int v51 = *(_DWORD *)(a1 + 48);
    }
    switch(v51)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 8:
      case 9:
        goto LABEL_43;
      case 4:
        unint64_t v64 = *(unsigned int *)(a1 + 96);
        if (v64)
        {
          unint64_t v65 = 0;
          do
          {
            uint64_t v37 = *(void *)(*(void *)(a1 + 72) + 8 * v65);
            if (v47 && *(_DWORD *)(v37 + 52))
            {
LABEL_61:
              unint64_t v66 = v64;
            }
            else
            {
              unint64_t v66 = v64;
              switch(*(_DWORD *)(v37 + 48))
              {
                case 0:
                case 1:
                case 2:
                  break;
                case 3:
                case 8:
                  uint64_t v68 = *(void *)(v37 + 64);
                  if (!v68) {
                    goto LABEL_61;
                  }
                  long long v67 = (_DWORD **)(v68 + 88);
LABEL_68:
                  uint64_t v69 = *v67;
                  unint64_t v66 = v64;
                  if (v69)
                  {
                    CIIndexSetAddRange(*(unsigned int **)(a1 + 80), v69, v167, v166, v38);
                    unint64_t v66 = *(unsigned int *)(a1 + 96);
                  }
                  break;
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                  long long v67 = (_DWORD **)(*(void *)(*(void *)(a1 + 72) + 8 * v65) + 80);
                  goto LABEL_68;
                default:
                  goto LABEL_239;
              }
            }
            ++v65;
            unint64_t v64 = v66;
          }
          while (v65 < v66);
        }
        goto LABEL_43;
      case 5:
        if (!v47 || *(_DWORD *)(a1 + 52) != 3)
        {
          uint64_t v70 = *(unsigned int *)(a1 + 96);
          if (!*(void *)(a1 + 80))
          {
            uint64_t v37 = (uint64_t)NormalResolvedDocSet(a5);
            *(void *)(a1 + 80) = v37;
          }
          if (v70)
          {
            uint64_t v71 = 8 * v70;
            MEMORY[0x1F4188790](v37);
            bzero((char *)&v163 - ((8 * v70 + 15) & 0xFFFFFFFF0), 8 * v70);
            uint64_t v72 = *(void *)(a1 + 72);
            uint64_t v73 = 0;
            unsigned int v74 = v166;
            while (2)
            {
              uint64_t v75 = *(void *)(v72 + v73);
              uint64_t v37 = v75;
              switch(*(_DWORD *)(v75 + 48))
              {
                case 0:
                case 1:
                case 2:
                  goto LABEL_43;
                case 3:
                case 8:
                  uint64_t v77 = *(void *)(v75 + 64);
                  if (!v77) {
                    goto LABEL_43;
                  }
                  unint64_t v76 = (uint64_t *)(v77 + 88);
LABEL_80:
                  uint64_t v78 = *v76;
                  *(uint64_t *)((char *)&v163 + v73 - ((v71 + 15) & 0xFFFFFFFF0)) = v78;
                  if (!v78) {
                    goto LABEL_43;
                  }
                  v73 += 8;
                  if (v71 != v73) {
                    continue;
                  }
                  CIIndexSetAddIntersectionInRange(*(unsigned int **)(a1 + 80), (uint64_t *)((char *)&v163 - ((v71 + 15) & 0xFFFFFFFF0)), v70, v52, v74);
                  break;
                case 4:
                case 5:
                case 6:
                case 7:
                case 9:
                  unint64_t v76 = (uint64_t *)(v75 + 80);
                  goto LABEL_80;
                default:
                  goto LABEL_239;
              }
              break;
            }
          }
        }
        goto LABEL_43;
      case 6:
        if (!v47 || !*(_DWORD *)(a1 + 52))
        {
          _CIIndexSetClearRange(*(int **)(a1 + 80), v167, v166);
          uint64_t v79 = **(void **)(a1 + 72);
          if (!*(_DWORD *)(v79 + 52) || *(_DWORD *)(v79 + 48) >= 4u)
          {
            int v80 = (_DWORD *)ContentIndexDocSetGrabBitVector(v79);
            if (v80) {
              CIIndexSetAddRange(*(unsigned int **)(a1 + 80), v80, v167, v166, v81);
            }
          }
          CIIndexSetInvertRange(*(void *)(a1 + 80), v167, v166);
        }
        goto LABEL_43;
      case 7:
        if (v47 && *(_DWORD *)(a1 + 52)) {
          goto LABEL_43;
        }
        uint64_t v82 = (_DWORD *)ContentIndexDocSetGrabBitVector(**(void **)(a1 + 72));
        if (!v82) {
          goto LABEL_43;
        }
        CIIndexSetAddRange(*(unsigned int **)(a1 + 80), v82, v167, v166, v38);
        if (*(_DWORD *)(a1 + 96) < 2u) {
          goto LABEL_43;
        }
        int v164 = v166 + 32;
        unint64_t v83 = 1;
        break;
      default:
        goto LABEL_240;
    }
    do
    {
      uint64_t v110 = *(void *)(*(void *)(a1 + 72) + 8 * v83);
      uint64_t v37 = v110;
      int v111 = *(_DWORD *)(v110 + 52);
      if (v111)
      {
        int v112 = *(_DWORD *)(v110 + 48);
        switch(v112)
        {
          case 0:
          case 1:
          case 2:
            break;
          case 3:
          case 8:
            uint64_t v122 = *(void *)(v110 + 64);
            if (!v122) {
              break;
            }
            unsigned int v113 = *(_DWORD **)(v122 + 88);
            if (!v113) {
              break;
            }
            goto LABEL_133;
          case 4:
          case 5:
          case 6:
          case 7:
          case 9:
            unsigned int v113 = *(_DWORD **)(v110 + 80);
            if (!v113) {
              break;
            }
LABEL_133:
            if ((v112 - 4) < 4)
            {
              unsigned int v114 = (uint64_t *)(v110 + 88);
              goto LABEL_135;
            }
            if ((v112 - 8) >= 2)
            {
              if (v112 != 3) {
                goto LABEL_239;
              }
              uint64_t v123 = *(void *)(v110 + 64);
              if (v123)
              {
                unsigned int v114 = (uint64_t *)(v123 + 96);
LABEL_135:
                uint64_t v115 = *v114;
                if (v111 == 1 && v115 != 0)
                {
                  int v117 = *(_DWORD *)(*(void *)(v37 + 56) + 68);
                  if (v166 == v117) {
                    unsigned int v118 = *(_DWORD *)(*(void *)(v37 + 56) + 68);
                  }
                  else {
                    unsigned int v118 = v164 - (((_BYTE)v166 - (_BYTE)v117) & 0x1F);
                  }
                  int v119 = CIIndexSetCreateWithRangeWithCache(v167, v118, (uint64_t)a7);
                  CIIndexSetAddRange(v119, v113, v167, v166, v120);
                  CIIndexSetRemoveRange(v119, v115, v167, v166);
                  CIIndexSetRemoveRange(*(unsigned int **)(a1 + 80), (uint64_t)v119, v167, v166);
                  CIIndexSetReleaseToPerThreadCache((uint64_t)v119, a7);
                }
                break;
              }
            }
            break;
          default:
            goto LABEL_239;
        }
      }
      else
      {
        uint64_t v121 = ContentIndexDocSetGrabBitVector(v110);
        if (v121) {
          CIIndexSetRemoveRange(*(unsigned int **)(a1 + 80), v121, v167, v166);
        }
      }
      ++v83;
    }
    while (v83 < *(unsigned int *)(a1 + 96));
LABEL_43:
    if (v52 == 1)
    {
      int v54 = *(_DWORD *)(a1 + 48);
      if (v54 == 9 || (v54 & 0xFFFFFFFC) == 4) {
        CIIndexSetShrink(*(_DWORD **)(a1 + 80), v38);
      }
    }
    uint64_t v56 = *(void *)&threadData[18 * HIDWORD(v170) + 2];
    unsigned int v57 = v170;
    uint64_t v58 = v56 + 320 * v170;
    *(_DWORD *)(v58 + 312) = v165;
    unint64_t v59 = *(void (**)(void))(v58 + 232);
    int v40 = v168;
    if (v59) {
      v59(*(void *)(v56 + 320 * v57 + 288));
    }
    dropThreadId(HIDWORD(v170), 0, v29);
    goto LABEL_53;
  }
}

char *_indexEnter(char *result)
{
  if (result)
  {
    uint64_t v1 = result;
    int v2 = (char *)pthread_getspecific(__THREAD_STR_DATA_KEY);
    if (!v2)
    {
      uint64_t result = (char *)malloc_type_malloc(0x80uLL, 0x2AA5B6DCuLL);
      if (!result) {
        return result;
      }
      int v2 = result;
      atomic_uint *result = 0;
      pthread_setspecific(__THREAD_STR_DATA_KEY, result);
    }
    return (char *)strlcpy(v2, v1 + 15495, 0x80uLL);
  }
  return result;
}

_DWORD *CIIndexSetShrink(_DWORD *result, int8x8_t a2)
{
  if (result)
  {
    int v2 = result;
    if ((int)result[4] <= -10)
    {
      uint64_t result = (_DWORD *)_CIIndexSetConvertIfArrayIsMuchMoreEfficient(result, result[5], result[6], 0, 0, a2);
      if ((int)v2[4] <= -10)
      {
        return _CIIndexSetConvertIfInvertedArrayIsMoreEfficient(v2, 0, v3);
      }
    }
  }
  return result;
}

void CIIndexSetDisposePerThreadCache(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    cicachelistenqueue(*a1 + 8, v2, 20);
    a1[1] = 0;
  }
  uint64_t v3 = a1[2];
  if (v3)
  {
    cicachelistenqueue(*a1 + 32, v3, 0);
    a1[2] = 0;
  }
  uint64_t v4 = a1[3];
  if (v4)
  {
    cicachelistenqueue(*a1 + 56, v4, 0);
    a1[3] = 0;
  }
  uint64_t v5 = a1[4];
  if (v5)
  {
    cicachelistenqueue(*a1 + 80, v5, 0);
    a1[4] = 0;
  }
  uint64_t v6 = a1[5];
  if (v6)
  {
    cicachelistenqueue(*a1 + 104, v6, 0);
    a1[5] = 0;
  }
}

uint64_t ContentIndexDocSetSquashUpdate(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 48);
  if ((v4 - 4) < 4)
  {
    if (*(_DWORD *)(a1 + 96))
    {
      unint64_t v5 = 0;
      uint64_t v6 = 0;
      do
      {
        if (ContentIndexDocSetSquashUpdate(*(void *)(*(void *)(a1 + 72) + 8 * v5), a2) > v6) {
          uint64_t v6 = ContentIndexDocSetSquashUpdate(*(void *)(*(void *)(a1 + 72) + 8 * v5), a2);
        }
        ++v5;
      }
      while (v5 < *(unsigned int *)(a1 + 96));
      return v6;
    }
    return 0;
  }
  if (v4 != 3) {
    return 0;
  }
  int v7 = *(void **)(a1 + 64);
  if (!v7) {
    return 0;
  }
  return PayloadIterator_ConsumeUpdates(v7, a2);
}

uint64_t PayloadIterator_ConsumeUpdates(void *a1, uint64_t a2)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[19];
  uint64_t v3 = a1[17];
  uint64_t v4 = v2 - v3;
  if (v2 > v3)
  {
    uint64_t v44 = __si_assert_copy_extra(0);
    uint64_t v37 = v44;
    uint64_t v45 = "";
    if (v44) {
      uint64_t v45 = v44;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 262, "changes->hole <= changes->count", v45);
LABEL_49:
    free(v37);
    if (__valid_fs(-1)) {
      uint64_t v46 = 2989;
    }
    else {
      uint64_t v46 = 3072;
    }
    *(_DWORD *)uint64_t v46 = -559038737;
    abort();
  }
  uint64_t v5 = a2;
  unint64_t v7 = a1[14] + a2;
  unint64_t v8 = (void **)(a1 + 16);
  if (v2 == v3)
  {
    uint64_t v9 = a2;
  }
  else
  {
    uint64_t v10 = a1[18];
    uint64_t v11 = (unint64_t *)a1[16];
    if (v2 < 1)
    {
      uint64_t v21 = a1[18];
      uint64_t v9 = a2;
    }
    else
    {
      unint64_t v12 = *v11;
      if (v7 >= *v11)
      {
        uint64_t v14 = 0;
LABEL_41:
        uint64_t v39 = v2 - v14;
        if (v2 - v14 >= 1)
        {
          uint64_t v40 = 0;
          uint64_t v41 = 0;
          do
          {
            *(_OWORD *)(a1[16] + v40) = *(_OWORD *)(a1[16] + v40 + 16 * v14);
            ++v41;
            uint64_t v2 = a1[19];
            uint64_t v39 = v2 - v14;
            v40 += 16;
          }
          while (v2 - v14 > v41);
        }
        a1[19] = v39;
        uint64_t v42 = a1[17];
        a1[17] = v42 - v14;
        if (v2 > v42)
        {
          int v47 = __si_assert_copy_extra(0);
          int v48 = v47;
          int v49 = "";
          if (v47) {
            int v49 = v47;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 272, "changes->hole <= changes->count", v49);
          free(v48);
          if (__valid_fs(-1)) {
            uint64_t v50 = 2989;
          }
          else {
            uint64_t v50 = 3072;
          }
          *(_DWORD *)uint64_t v50 = -559038737;
          abort();
        }
        return v5;
      }
      uint64_t v55 = a1[18];
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      int8x8_t v15 = (int8x8_t)67109632;
      uint64_t v9 = a2;
      while (1)
      {
        if ((v11[v13 + 1] & 0x80000000) == 0)
        {
          unint64_t v16 = (unsigned int *)a1[11];
          unsigned int v17 = v12 - *((_DWORD *)a1 + 28);
          *(_DWORD *)long long buf = -1;
          _CIIndexSetAddIndex(v16, v17, 0, buf, v15);
          unsigned int v18 = *(_DWORD *)(a1[16] + v13 * 8) - *((_DWORD *)a1 + 28);
          uint64_t v9 = v18 <= v5 ? v5 : v18;
          if (dword_1E9FC90CC >= 5)
          {
            int v52 = *__error();
            os_log_t log = _SILogForLogForCategory(10);
            if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v19 = *(void *)(a1[16] + v13 * 8);
              int v20 = v19 - *((_DWORD *)a1 + 28);
              *(_DWORD *)long long buf = 67109632;
              int v57 = v20;
              __int16 v58 = 2048;
              uint64_t v59 = v19;
              __int16 v60 = 2048;
              unsigned int v61 = v8;
              _os_log_impl(&dword_1BD672000, log, OS_LOG_TYPE_DEFAULT, "Squashed update %u (%llu) from %p\n", buf, 0x1Cu);
            }
            *__error() = v52;
          }
        }
        ++v14;
        uint64_t v2 = a1[19];
        if (v14 >= v2) {
          break;
        }
        uint64_t v11 = *v8;
        unint64_t v12 = (*v8)[v13 + 2];
        v13 += 2;
        if (v7 >= v12)
        {
          uint64_t v5 = v9;
          goto LABEL_41;
        }
      }
      uint64_t v21 = a1[18];
      uint64_t v11 = (unint64_t *)a1[16];
      uint64_t v10 = v55;
    }
    uint64_t v22 = v21 - (v10 + v4);
    a1[17] = v22;
    memmove(v11, &v11[2 * v10 + 2 * v4], 16 * v22);
    uint64_t v2 = a1[17];
    a1[19] = v2;
  }
  unint64_t v23 = *v8;
  if (v2 < 1 || (unint64_t v24 = *v23, v7 >= *v23))
  {
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v25 = 0;
    uint64_t v26 = 1;
    int8x8_t v27 = (int8x8_t)67109632;
    do
    {
      uint64_t v28 = v26;
      if ((v23[v25 + 1] & 0x80000000) == 0)
      {
        int v29 = (unsigned int *)a1[11];
        unsigned int v30 = v24 - *((_DWORD *)a1 + 28);
        *(_DWORD *)long long buf = -1;
        _CIIndexSetAddIndex(v29, v30, 0, buf, v27);
        unint64_t v23 = (unint64_t *)a1[16];
        unsigned int v31 = LODWORD(v23[v25]) - *((_DWORD *)a1 + 28);
        uint64_t v9 = v31 <= v5 ? v5 : v31;
        if (dword_1E9FC90CC >= 5)
        {
          int v54 = *__error();
          unint64_t v53 = _SILogForLogForCategory(10);
          if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v32 = *(void *)(a1[16] + v25 * 8);
            int v33 = v32 - *((_DWORD *)a1 + 28);
            *(_DWORD *)long long buf = 67109632;
            int v57 = v33;
            __int16 v58 = 2048;
            uint64_t v59 = v32;
            __int16 v60 = 2048;
            unsigned int v61 = v8;
            _os_log_impl(&dword_1BD672000, v53, OS_LOG_TYPE_DEFAULT, "Squashed update %u (%llu) from %p\n", buf, 0x1Cu);
          }
          *__error() = v54;
          unint64_t v23 = *v8;
        }
      }
      uint64_t v2 = a1[17];
      if (v28 >= v2) {
        break;
      }
      unint64_t v24 = v23[v25 + 2];
      uint64_t v26 = v28 + 1;
      v25 += 2;
    }
    while (v7 < v24);
  }
  memmove(v23, &v23[2 * v28], 16 * (v2 - v28));
  uint64_t v34 = a1[17];
  a1[17] = v34 - v28;
  uint64_t v35 = a1[19];
  a1[19] = v35 - v28;
  uint64_t v5 = v9;
  if (v35 > v34)
  {
    unsigned int v36 = __si_assert_copy_extra(0);
    uint64_t v37 = v36;
    int8x8_t v38 = "";
    if (v36) {
      int8x8_t v38 = v36;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 317, "changes->hole <= changes->count", v38);
    goto LABEL_49;
  }
  return v5;
}

uint64_t db_read_unlock(uint64_t a1)
{
  uint64_t v2 = pthread_mutex_lock((pthread_mutex_t *)a1);
  int v3 = *(_DWORD *)(a1 + 196) - 1;
  *(_DWORD *)(a1 + 196) = v3;
  if (!v3) {
    db_rwlock_wakeup(a1, 0, 0);
  }
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v2;
}

_DWORD *NormalResolvedDocSet(unsigned int a1)
{
  return CIIndexSetCreateWithRange(0, a1, 1);
}

void CIIndexSetRemoveRange(unsigned int *cf, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = cf[5];
  unsigned int v4 = cf[6];
  unsigned int v7 = *(_DWORD *)(a2 + 20);
  unsigned int v6 = *(_DWORD *)(a2 + 24);
  if (v4 >= v6) {
    unsigned int v8 = *(_DWORD *)(a2 + 24);
  }
  else {
    unsigned int v8 = cf[6];
  }
  BOOL v9 = v6 >= a4 && v4 >= a4;
  if (v9) {
    unsigned int v10 = a4;
  }
  else {
    unsigned int v10 = v8;
  }
  if (v5 <= v7) {
    unsigned int v11 = *(_DWORD *)(a2 + 20);
  }
  else {
    unsigned int v11 = cf[5];
  }
  BOOL v12 = v7 > a3 || v5 > a3;
  if (v12) {
    unsigned int v13 = v11;
  }
  else {
    unsigned int v13 = a3;
  }
  if (v13 > v10)
  {
    if (dword_1E9FC90A8 >= 5)
    {
      int v133 = *__error();
      unint64_t v134 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v134, OS_LOG_TYPE_DEFAULT))
      {
        v135[0] = 67109376;
        v135[1] = v13;
        __int16 v136 = 1024;
        unsigned int v137 = v10;
        _os_log_impl(&dword_1BD672000, v134, OS_LOG_TYPE_DEFAULT, "%d start, end:%d", (uint8_t *)v135, 0xEu);
      }
      *__error() = v133;
    }
  }
  else
  {
    int v16 = *(_DWORD *)(a2 + 16);
    if (v16 <= -10)
    {
      if (CFGetTypeID(cf) == __kCIIndexSetInvertedTypeID) {
        _CIIndexSetForceBitmap((uint64_t)cf, 0, 0);
      }
      int v16 = *(_DWORD *)(a2 + 16);
    }
    int v17 = cf[4];
    if (v17 <= -10)
    {
      if (v16 <= -10)
      {
        int v18 = cf[6];
        uint64_t v19 = (v18 - v10) >> 5;
        int v20 = (v18 - v10) & 0x1F;
        uint64_t v21 = (v18 - v13) >> 5;
        int v22 = (v18 - v13) & 0x1F;
        int v23 = *(_DWORD *)(a2 + 24);
        int v24 = v18 - v23;
        if (!v24)
        {
          int v25 = *(_DWORD *)(*(void *)(a2 + 40) + 4 * v19);
          if (v21 == v19)
          {
            int v26 = v22 + 1;
            int v27 = masks[v20];
            if (v20 != v26) {
              int v27 = masks[v26] & ~v27;
            }
            *(_DWORD *)(*((void *)cf + 5) + 4 * v19) &= ~(v27 & v25);
            return;
          }
          *(_DWORD *)(*((void *)cf + 5) + 4 * v19) &= masks[v20] | ~v25;
          uint64_t v104 = (v19 + 1);
          if (v104 < v21)
          {
            do
            {
              *(_DWORD *)(*((void *)cf + 5) + 4 * v104) &= ~*(_DWORD *)(*(void *)(a2 + 40) + 4 * v104);
              ++v104;
            }
            while (v21 != v104);
          }
          uint64_t v105 = 4 * v21;
          int v106 = masks[v22 + 1] & *(_DWORD *)(*(void *)(a2 + 40) + v105);
          uint64_t v107 = *((void *)cf + 5);
LABEL_240:
          *(_DWORD *)(v107 + v105) &= ~v106;
          return;
        }
        unsigned int v60 = (v23 - v10) >> 5;
        unsigned int v61 = (v23 - v13) >> 5;
        char v62 = v24 & 0x1F;
        if ((v24 & 0x1F) != 0)
        {
          char v63 = 32 - v62;
          uint64_t v64 = *(void *)(a2 + 40);
          unsigned int v65 = *(_DWORD *)(v64 + 4 * v60);
          unsigned int v66 = v60 + 1;
          unsigned int v67 = *(_DWORD *)(a2 + 32);
          unsigned int v68 = v21 - v19;
          if (v21 == v19)
          {
            int v69 = v65 << v62;
            if (v66 < v67) {
              v69 |= *(_DWORD *)(v64 + 4 * v66) >> v63;
            }
            int v70 = ~v69;
            goto LABEL_212;
          }
          unsigned int v114 = v65 >> v63;
          if (v66 >= v67) {
            int v115 = 0;
          }
          else {
            int v115 = *(_DWORD *)(v64 + 4 * v66) << v62;
          }
          *(_DWORD *)(*((void *)cf + 5) + 4 * v19) &= masks[v20] | ~(v115 | v114);
          if (v68 >= 2)
          {
            uint64_t v121 = 1 - v68;
            unsigned int v122 = v19 + 1;
            unsigned int v123 = v60 + 2;
            do
            {
              uint64_t v125 = *(void *)(a2 + 40);
              if (v123 < *(_DWORD *)(a2 + 32)) {
                int v124 = *(_DWORD *)(v125 + 4 * v123) << v62;
              }
              else {
                int v124 = 0;
              }
              *(_DWORD *)(*((void *)cf + 5) + 4 * v122++) &= ~(v124 | (*(_DWORD *)(v125 + 4 * (v123++ - 1)) >> v63));
              BOOL v9 = __CFADD__(v121++, 1);
            }
            while (!v9);
          }
          int v106 = (*(_DWORD *)(*(void *)(a2 + 40) + 4 * v61) >> v63) & masks[v22 + 1];
        }
        else
        {
          int v108 = *(_DWORD *)(*(void *)(a2 + 40) + 4 * v60);
          unsigned int v109 = v21 - v19;
          if (v21 == v19)
          {
            int v70 = ~v108;
LABEL_212:
            int v110 = v22 + 1;
            int v111 = masks[v20];
            int v112 = v111;
            int v113 = v111;
            if (v20 != v110)
            {
              int v112 = masks[v110];
              int v113 = v112 & ~v111;
            }
            *(_DWORD *)(*((void *)cf + 5) + 4 * v19) &= v113 & v70 | ~v112 | v111;
            return;
          }
          *(_DWORD *)(*((void *)cf + 5) + 4 * v19) &= masks[v20] | ~v108;
          if (v109 >= 2)
          {
            uint64_t v116 = 1 - v109;
            unsigned int v117 = v19 + 1;
            unsigned int v118 = v60 + 1;
            do
            {
              *(_DWORD *)(*((void *)cf + 5) + 4 * v117++) &= ~*(_DWORD *)(*(void *)(a2 + 40) + 4 * v118++);
              BOOL v9 = __CFADD__(v116++, 1);
            }
            while (!v9);
          }
          int v106 = masks[v22 + 1] & *(_DWORD *)(*(void *)(a2 + 40) + 4 * v61);
        }
        uint64_t v107 = *((void *)cf + 5);
        uint64_t v105 = 4 * v21;
        goto LABEL_240;
      }
      if ((v16 & 0x80000000) == 0)
      {
        if (v13) {
          unsigned int v34 = v13 - 1;
        }
        else {
          unsigned int v34 = 0;
        }
        int v35 = binarySearchMap(a2, v34);
        LODWORD(v36) = binarySearchMap(a2, v10);
        int v37 = *(_DWORD *)(a2 + 36);
        BOOL v38 = v35 > v37 && (int)v36 > v37;
        BOOL v39 = v35 > v37 || (int)v36 >= v37;
        CFTypeID v40 = CFGetTypeID((CFTypeRef)a2);
        if (!v38 && v39)
        {
          if (v40 == __kCIIndexSetInvertedTypeID)
          {
            int v41 = *(_DWORD *)(a2 + 16);
            int v43 = *(_DWORD *)(a2 + 32);
            int v42 = *(_DWORD *)(a2 + 36);
            int v44 = v43 - v41 + v42;
            if (v35 <= v44)
            {
              BOOL v119 = 0;
            }
            else
            {
              if (v35 <= v44)
              {
                uint64_t v45 = *(void *)(a2 + 40);
              }
              else
              {
                uint64_t v45 = *(void *)(a2 + 40);
                uint64_t v46 = v35 - 1;
                do
                {
                  unsigned int v47 = *(_DWORD *)(v45 + 4 * v46);
                  if (v47 > v13)
                  {
                    _CIIndexSetClearRange((int *)cf, v13, v47 - 1);
                    uint64_t v45 = *(void *)(a2 + 40);
                    int v41 = *(_DWORD *)(a2 + 16);
                    int v43 = *(_DWORD *)(a2 + 32);
                    int v42 = *(_DWORD *)(a2 + 36);
                    unsigned int v47 = *(_DWORD *)(v45 + 4 * v46);
                  }
                  unsigned int v13 = v47 + 1;
                  int v44 = v43 - v41 + v42;
                  BOOL v12 = v46-- <= v44;
                }
                while (!v12);
              }
              BOOL v119 = *(_DWORD *)(v45 + 4 * v44) == v10;
            }
            if (v42 > (int)v36)
            {
              uint64_t v126 = v42;
              uint64_t v36 = (int)v36;
              uint64_t v127 = *(void *)(a2 + 40);
              uint64_t v128 = v126 - 1;
              do
              {
                unsigned int v129 = *(_DWORD *)(v127 + 4 * v128);
                if (v129 > v13)
                {
                  _CIIndexSetClearRange((int *)cf, v13, v129 - 1);
                  uint64_t v127 = *(void *)(a2 + 40);
                  unsigned int v129 = *(_DWORD *)(v127 + 4 * v128);
                }
                unsigned int v13 = v129 + 1;
                BOOL v12 = v128-- <= (int)v36;
              }
              while (!v12);
LABEL_267:
              if (*(_DWORD *)(v127 + 4 * v36) == v10) {
                BOOL v119 = 1;
              }
              goto LABEL_269;
            }
            goto LABEL_269;
          }
LABEL_138:
          unsigned int v85 = *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 36);
          CIIndexSetRemoveSortedIndexes((uint64_t)cf, (unsigned int *)(*(void *)(a2 + 40) + 4 * v85), v35 - v85);
          int v86 = (unsigned int *)(*(void *)(a2 + 40) + 4 * (int)v36);
          int v87 = *(_DWORD *)(a2 + 36) - v36;
LABEL_204:
          CIIndexSetRemoveSortedIndexes((uint64_t)cf, v86, v87);
          return;
        }
        if (v40 == __kCIIndexSetInvertedTypeID)
        {
          if (v35 <= (int)v36)
          {
            BOOL v120 = 0;
          }
          else
          {
            uint64_t v79 = *(void *)(a2 + 40);
            uint64_t v80 = v35 - 1;
            do
            {
              unsigned int v81 = *(_DWORD *)(v79 + 4 * v80);
              if (v81 > v13)
              {
                _CIIndexSetClearRange((int *)cf, v13, v81 - 1);
                uint64_t v79 = *(void *)(a2 + 40);
                unsigned int v81 = *(_DWORD *)(v79 + 4 * v80);
              }
              unsigned int v13 = v81 + 1;
              BOOL v12 = v80-- <= (int)v36;
            }
            while (!v12);
            BOOL v120 = *(_DWORD *)(v79 + 4 * (int)v36) == v10;
          }
          if (v120) {
            return;
          }
LABEL_270:
          if (v10 >= v13)
          {
            _CIIndexSetClearRange((int *)cf, v13, v10);
          }
          return;
        }
LABEL_139:
        int v86 = (unsigned int *)(*(void *)(a2 + 40) + 4 * (int)v36);
        int v87 = v35 - v36;
        goto LABEL_204;
      }
      int v73 = -2 - v16;
      unsigned int v74 = (unsigned int *)(a2 + 32);
      if (v16 > 0xFFFFFFFD || *v74 <= v10)
      {
        int v75 = 0;
      }
      else
      {
        if (v16 == -3) {
          goto LABEL_122;
        }
        if (*(_DWORD *)(a2 + 36) <= v10)
        {
          int v75 = 1;
        }
        else
        {
          if (v16 == -4) {
            goto LABEL_122;
          }
          if (*(_DWORD *)(a2 + 40) <= v10)
          {
            int v75 = 2;
          }
          else
          {
            if (v16 == -5) {
              goto LABEL_122;
            }
            if (*(_DWORD *)(a2 + 44) <= v10)
            {
              int v75 = 3;
            }
            else
            {
              if (v16 == -6) {
                goto LABEL_122;
              }
              if (*(_DWORD *)(a2 + 48) <= v10)
              {
                int v75 = 4;
              }
              else
              {
                if (v16 == -7) {
                  goto LABEL_122;
                }
                if (*(_DWORD *)(a2 + 52) > v10)
                {
                  if (v16 != -8 && *(_DWORD *)(a2 + 56) <= v10)
                  {
                    int v75 = 6;
                    goto LABEL_177;
                  }
LABEL_122:
                  int v76 = v73;
                  goto LABEL_200;
                }
                int v75 = 5;
              }
            }
          }
        }
      }
LABEL_177:
      if (v75 >= v73) {
        int v76 = -2 - v16;
      }
      else {
        int v76 = v75;
      }
      if (v13) {
        unsigned int v99 = v13 - 1;
      }
      else {
        unsigned int v99 = 0;
      }
      if (v73 > v75)
      {
        uint64_t v100 = v76;
        uint64_t v101 = v76;
        while (v74[v101] > v99)
        {
          if (v73 == ++v101) {
            goto LABEL_199;
          }
        }
        goto LABEL_201;
      }
LABEL_200:
      uint64_t v100 = v76;
      LODWORD(v101) = v76;
LABEL_201:
      if ((int)v101 < v73) {
        int v73 = v101;
      }
      int v86 = &v74[v100];
      int v87 = v73 - v76;
      goto LABEL_204;
    }
    if (v16 <= -10)
    {
      if ((v17 & 0x80000000) == 0)
      {
        uint64_t v28 = (int)cf[9];
        if (v28 != v17)
        {
          memmove((void *)(*((void *)cf + 5) + 4 * v28), (const void *)(*((void *)cf + 5) + 4 * (v28 - v17 + cf[8])), 4 * (v17 - (int)v28));
          cf[9] = cf[4];
        }
        int v29 = binarySearchMap((uint64_t)cf, v10);
        int v30 = cf[4];
        if (v29 < v30 && *(_DWORD *)(*((void *)cf + 5) + 4 * v29) > v10) {
          ++v29;
        }
        if (v29 >= v30)
        {
          int v77 = v29;
        }
        else
        {
          uint64_t v31 = v29;
          do
          {
            uint64_t v32 = *((void *)cf + 5);
            unsigned int v33 = *(_DWORD *)(v32 + 4 * v31);
            if (v33 > v10) {
              break;
            }
            if (v33 < v13
              || ((*(_DWORD *)(*(void *)(a2 + 40) + 4 * ((*(_DWORD *)(a2 + 24) - v33) >> 5)) >> (*(unsigned char *)(a2 + 24) - v33)) & 1) == 0)
            {
              *(_DWORD *)(v32 + 4 * v29) = v33;
              int v30 = cf[4];
              ++v29;
            }
            ++v31;
          }
          while (v31 < v30);
          int v77 = v29;
          int v29 = v31;
        }
        int v78 = v77 - v29 + v30;
        cf[4] = v78;
        cf[9] = v78;
        return;
      }
      uint64_t v71 = cf + 8;
      if (v17 > 0xFFFFFFFD || *v71 <= v10)
      {
        int v72 = 0;
      }
      else
      {
        if (v17 == -3) {
          return;
        }
        if (cf[9] <= v10)
        {
          int v72 = 1;
        }
        else
        {
          if (v17 == -4) {
            return;
          }
          if (cf[10] <= v10)
          {
            int v72 = 2;
          }
          else
          {
            if (v17 == -5) {
              return;
            }
            if (cf[11] <= v10)
            {
              int v72 = 3;
            }
            else
            {
              if (v17 == -6) {
                return;
              }
              if (cf[12] <= v10)
              {
                int v72 = 4;
              }
              else
              {
                if (v17 == -7) {
                  return;
                }
                if (cf[13] <= v10)
                {
                  int v72 = 5;
                }
                else
                {
                  if (v17 == -8 || cf[14] > v10) {
                    return;
                  }
                  int v72 = 6;
                }
              }
            }
          }
        }
      }
      uint64_t v88 = (-2 - v17);
      if (v72 >= (int)v88) {
        return;
      }
      uint64_t v89 = v88 - v72;
      for (unint64_t i = &cf[v72 + 8]; ; ++i)
      {
        unsigned int v91 = *i;
        if (*i < v13) {
          return;
        }
        if (a2)
        {
          if (*(_DWORD *)(a2 + 20) <= v91)
          {
            unsigned int v92 = *(_DWORD *)(a2 + 24);
            unsigned int v93 = v92 - v91;
            if (v92 >= v91)
            {
              int v94 = *(_DWORD *)(a2 + 16);
              if (v94 > -10)
              {
                if (v94 < 0)
                {
                  if (v94 < 0xFFFFFFFE
                    && (*(_DWORD *)(a2 + 32) == v91
                     || v94 != -3
                     && (*(_DWORD *)(a2 + 36) == v91
                      || v94 != -4
                      && (*(_DWORD *)(a2 + 40) == v91
                       || v94 != -5
                       && (*(_DWORD *)(a2 + 44) == v91
                        || v94 != -6
                        && (*(_DWORD *)(a2 + 48) == v91
                         || v94 != -7 && (*(_DWORD *)(a2 + 52) == v91 || v94 != -8 && *(_DWORD *)(a2 + 56) == v91)))))))
                  {
                    goto LABEL_162;
                  }
                }
                else
                {
                  unsigned int v95 = binarySearchMap(a2, *i);
                  unsigned int v96 = *(_DWORD *)(a2 + 36);
                  if (v95 < v96
                    || (BOOL v97 = 0, v98 = *(_DWORD *)(a2 + 32), v95 < v98) && v95 >= v98 + v96 - *(_DWORD *)(a2 + 16))
                  {
                    BOOL v97 = *(_DWORD *)(*(void *)(a2 + 40) + 4 * v95) == v91;
                  }
                  if ((v97 ^ (CFGetTypeID((CFTypeRef)a2) == __kCIIndexSetInvertedTypeID)))
                  {
LABEL_162:
                    ++cf[4];
                    goto LABEL_148;
                  }
                  unsigned int v91 = *i;
                }
              }
              else if ((*(_DWORD *)(*(void *)(a2 + 40) + 4 * (v93 >> 5)) >> v93))
              {
                goto LABEL_162;
              }
            }
          }
        }
        v71[v72++] = v91;
LABEL_148:
        if (!--v89) {
          return;
        }
      }
    }
    if (v16 < 0)
    {
      int v73 = -2 - v16;
      unsigned int v74 = (unsigned int *)(a2 + 32);
      if (v16 > 0xFFFFFFFD || *v74 <= v10)
      {
        int v102 = 0;
      }
      else
      {
        if (v16 == -3) {
          goto LABEL_122;
        }
        if (*(_DWORD *)(a2 + 36) <= v10)
        {
          int v102 = 1;
        }
        else
        {
          if (v16 == -4) {
            goto LABEL_122;
          }
          if (*(_DWORD *)(a2 + 40) <= v10)
          {
            int v102 = 2;
          }
          else
          {
            if (v16 == -5) {
              goto LABEL_122;
            }
            if (*(_DWORD *)(a2 + 44) <= v10)
            {
              int v102 = 3;
            }
            else
            {
              if (v16 == -6) {
                goto LABEL_122;
              }
              if (*(_DWORD *)(a2 + 48) <= v10)
              {
                int v102 = 4;
              }
              else
              {
                if (v16 == -7) {
                  goto LABEL_122;
                }
                if (*(_DWORD *)(a2 + 52) <= v10)
                {
                  int v102 = 5;
                }
                else
                {
                  if (v16 == -8 || *(_DWORD *)(a2 + 56) > v10) {
                    goto LABEL_122;
                  }
                  int v102 = 6;
                }
              }
            }
          }
        }
      }
      if (v102 >= v73) {
        int v76 = -2 - v16;
      }
      else {
        int v76 = v102;
      }
      if (v13) {
        unsigned int v103 = v13 - 1;
      }
      else {
        unsigned int v103 = 0;
      }
      if (v73 > v102)
      {
        uint64_t v100 = v76;
        uint64_t v101 = v76;
        while (v74[v101] > v103)
        {
          if (v73 == ++v101)
          {
LABEL_199:
            LODWORD(v101) = v73;
            goto LABEL_201;
          }
        }
        goto LABEL_201;
      }
      goto LABEL_200;
    }
    if (v13) {
      unsigned int v48 = v13 - 1;
    }
    else {
      unsigned int v48 = 0;
    }
    int v35 = binarySearchMap(a2, v48);
    LODWORD(v36) = binarySearchMap(a2, v10);
    int v49 = *(_DWORD *)(a2 + 36);
    BOOL v50 = v35 > v49 && (int)v36 > v49;
    BOOL v51 = v35 > v49 || (int)v36 >= v49;
    CFTypeID v52 = CFGetTypeID((CFTypeRef)a2);
    if (!v50 && v51)
    {
      if (v52 == __kCIIndexSetInvertedTypeID)
      {
        int v53 = *(_DWORD *)(a2 + 16);
        int v55 = *(_DWORD *)(a2 + 32);
        int v54 = *(_DWORD *)(a2 + 36);
        int v56 = v55 - v53 + v54;
        if (v35 <= v56)
        {
          BOOL v119 = 0;
        }
        else
        {
          if (v35 <= v56)
          {
            uint64_t v57 = *(void *)(a2 + 40);
          }
          else
          {
            uint64_t v57 = *(void *)(a2 + 40);
            uint64_t v58 = v35 - 1;
            do
            {
              unsigned int v59 = *(_DWORD *)(v57 + 4 * v58);
              if (v59 > v13)
              {
                _CIIndexSetClearRange((int *)cf, v13, v59 - 1);
                uint64_t v57 = *(void *)(a2 + 40);
                int v53 = *(_DWORD *)(a2 + 16);
                int v55 = *(_DWORD *)(a2 + 32);
                int v54 = *(_DWORD *)(a2 + 36);
                unsigned int v59 = *(_DWORD *)(v57 + 4 * v58);
              }
              unsigned int v13 = v59 + 1;
              int v56 = v55 - v53 + v54;
              BOOL v12 = v58-- <= v56;
            }
            while (!v12);
          }
          BOOL v119 = *(_DWORD *)(v57 + 4 * v56) == v10;
        }
        if (v54 > (int)v36)
        {
          uint64_t v130 = v54;
          uint64_t v36 = (int)v36;
          uint64_t v127 = *(void *)(a2 + 40);
          uint64_t v131 = v130 - 1;
          do
          {
            unsigned int v132 = *(_DWORD *)(v127 + 4 * v131);
            if (v132 > v13)
            {
              _CIIndexSetClearRange((int *)cf, v13, v132 - 1);
              uint64_t v127 = *(void *)(a2 + 40);
              unsigned int v132 = *(_DWORD *)(v127 + 4 * v131);
            }
            unsigned int v13 = v132 + 1;
            BOOL v12 = v131-- <= (int)v36;
          }
          while (!v12);
          goto LABEL_267;
        }
LABEL_269:
        if (v119) {
          return;
        }
        goto LABEL_270;
      }
      goto LABEL_138;
    }
    if (v52 != __kCIIndexSetInvertedTypeID) {
      goto LABEL_139;
    }
    if (v35 <= (int)v36) {
      goto LABEL_270;
    }
    uint64_t v82 = *(void *)(a2 + 40);
    uint64_t v83 = v35 - 1;
    do
    {
      unsigned int v84 = *(_DWORD *)(v82 + 4 * v83);
      if (v84 > v13)
      {
        _CIIndexSetClearRange((int *)cf, v13, v84 - 1);
        uint64_t v82 = *(void *)(a2 + 40);
        unsigned int v84 = *(_DWORD *)(v82 + 4 * v83);
      }
      unsigned int v13 = v84 + 1;
      BOOL v12 = v83-- <= (int)v36;
    }
    while (!v12);
    if (*(_DWORD *)(v82 + 4 * (int)v36) != v10) {
      goto LABEL_270;
    }
  }
}

void CIIndexSetRemoveSortedIndexes(uint64_t a1, unsigned int *a2, int a3)
{
  if (a3 < 1) {
    return;
  }
  if (CFGetTypeID((CFTypeRef)a1) == __kCIIndexSetInvertedTypeID)
  {
    int v6 = *(_DWORD *)(a1 + 16);
    if (v6 > -10
      || ((int v7 = *(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 20), v8 = a3 - v6 - 10, v7 + 1 < v8) ? (v9 = v7 + 1) : (v9 = v8),
          int v6 = -10 - v9,
          *(_DWORD *)(a1 + 16) = -10 - v9,
          (v9 & 0x80000000) != 0))
    {
      if (v6 >= -1) {
        unsigned int v10 = *(_DWORD *)(a1 + 32);
      }
      else {
        unsigned int v10 = 4;
      }
      if (v6 < -1) {
        int v6 = -2 - v6;
      }
      if (v10 < v6 + a3) {
        _CIIndexSetMakeSpace((unsigned int *)a1, a3, 0, 0, 0);
      }
    }
  }
  uint64_t v11 = *(int *)(a1 + 16);
  if ((int)v11 <= -10)
  {
    uint64_t v12 = a3;
    while (1)
    {
      unsigned int v14 = *a2++;
      unsigned int v13 = v14;
      if (v14 >= *(_DWORD *)(a1 + 20))
      {
        unsigned int v15 = *(_DWORD *)(a1 + 24);
        BOOL v16 = v15 >= v13;
        unsigned int v17 = v15 - v13;
        if (!v16) {
          return;
        }
        *(_DWORD *)(*(void *)(a1 + 40) + 4 * (v17 >> 5)) &= ~(1 << v17);
      }
      if (!--v12) {
        return;
      }
    }
  }
  if ((v11 & 0x80000000) == 0)
  {
    if (CFGetTypeID((CFTypeRef)a1) == __kCIIndexSetInvertedTypeID)
    {
      if (a3 == 1)
      {
        int v85 = -1;
        unsigned int v18 = *a2;
        unsigned int v19 = *(_DWORD *)(a1 + 16);
        if (v19) {
          int v20 = searchMapWithHint(a1, v18, &v85, 1);
        }
        else {
          int v20 = 0;
        }
        unsigned int v73 = *(_DWORD *)(a1 + 32);
        uint64_t v74 = *(int *)(a1 + 36);
        if (v74 == v20)
        {
          if (v73 <= v19) {
            return;
          }
          uint64_t v75 = *(void *)(a1 + 40);
        }
        else
        {
          if (v20 == v73)
          {
            if (v19 >= v20) {
              return;
            }
            uint64_t v75 = *(void *)(a1 + 40);
          }
          else
          {
            uint64_t v75 = *(void *)(a1 + 40);
            if (*(_DWORD *)(v75 + 4 * v20) == v18 || v73 <= v19) {
              return;
            }
          }
          if ((int)v74 >= v20)
          {
            memmove((void *)(v75 + 4 * (v20 - v19 + v73)), (const void *)(v75 + 4 * v20), 4 * ((int)v74 - v20));
          }
          else
          {
            memmove((void *)(v75 + 4 * v74), (const void *)(v75 + 4 * (v73 - v19 + v74)), 4 * (v20 - (v73 - v19 + v74)));
            int v20 = v20 + v19 - v73;
          }
        }
        if (!v20 || *(_DWORD *)(v75 + 4 * v20 - 4) > v18)
        {
          *(_DWORD *)(v75 + 4 * v20) = v18;
          *(_DWORD *)(a1 + 36) = v20 + 1;
          *(_DWORD *)(a1 + 16) = v19 + 1;
          return;
        }
        int v76 = __si_assert_copy_extra_329();
        unsigned int v84 = v76;
LABEL_117:
        __message_assert_333((uint64_t)v76, v77, v78, v79, v80, v81, v82, v83, (char)"CIIndexSet.c");
        free(v84);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      CIIndexSetAddSortedIndexes_ArrayBackwards(a1, a2, a3);
      return;
    }
    uint64_t v28 = *(int *)(a1 + 36);
    int v29 = *(_DWORD *)(a1 + 16);
    if ((int)v28 > v29)
    {
      int v76 = __si_assert_copy_extra_329();
      unsigned int v84 = v76;
      goto LABEL_117;
    }
    LODWORD(v30) = *(_DWORD *)(a1 + 32) - v29;
    memmove((void *)(*(void *)(a1 + 40) + 4 * v30), *(const void **)(a1 + 40), 4 * v28);
    signed int v31 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 36) = v31;
    if (v31 < 1 || v31 + a3 <= (int)((__clz(v31) ^ 0x1F) * a3))
    {
      uint64_t v34 = 0;
      LODWORD(v35) = 0;
      do
      {
        unsigned int v36 = a2[v34];
        if (v36 > *(_DWORD *)(a1 + 24) || v36 < *(_DWORD *)(a1 + 20)) {
          break;
        }
        if (v30 < *(_DWORD *)(a1 + 32))
        {
          uint64_t v35 = (int)v35;
          unint64_t v30 = v30;
          while (1)
          {
            uint64_t v37 = *(void *)(a1 + 40);
            unsigned int v38 = *(_DWORD *)(v37 + 4 * v30);
            if (v38 <= v36) {
              break;
            }
            ++v30;
            int v39 = v35 + 1;
            *(_DWORD *)(v37 + 4 * v35++) = v38;
            if (v30 >= *(unsigned int *)(a1 + 32))
            {
              LODWORD(v35) = v39;
              goto LABEL_42;
            }
          }
          if (*(_DWORD *)(v37 + 4 * v30) == v36)
          {
            --*(_DWORD *)(a1 + 16);
            LODWORD(v30) = v30 + 1;
          }
        }
LABEL_42:
        ++v34;
      }
      while (v34 != a3);
      int v40 = *(_DWORD *)(a1 + 16);
      if ((int)v35 <= v40) {
        *(_DWORD *)(a1 + 36) = v35;
      }
      else {
        *(_DWORD *)(a1 + 36) = v40;
      }
      return;
    }
    uint64_t v32 = 0;
    int v33 = 0;
    while (1)
    {
      unsigned int v54 = a2[v32];
      if (v54 >= *(_DWORD *)(a1 + 20))
      {
        if (v54 > *(_DWORD *)(a1 + 24))
        {
LABEL_97:
          int v72 = *(_DWORD *)(a1 + 16);
          if (v33 <= v72) {
            *(_DWORD *)(a1 + 36) = v33;
          }
          else {
            *(_DWORD *)(a1 + 36) = v72;
          }
          return;
        }
        uint64_t v55 = *(void *)(a1 + 40);
        unsigned int v56 = *(_DWORD *)(a1 + 32);
        int v57 = v56 - 1;
        LODWORD(v58) = v30;
        if ((int)(v56 - 33) < (int)v30)
        {
LABEL_82:
          uint64_t v58 = (int)v58;
          unsigned int v60 = v57 + 1 > (int)v58 ? v57 + 1 : v58;
          while (v58 <= v57)
          {
            unsigned int v62 = *(_DWORD *)(v55 + 4 * v58++);
            if (v62 <= v54)
            {
              unsigned int v60 = v58 - 1;
              break;
            }
          }
        }
        else
        {
          while (1)
          {
            int v59 = v57 - v58;
            if (v57 < (int)v58) {
              ++v59;
            }
            unsigned int v60 = v58 + (v59 >> 1);
            unsigned int v61 = *(_DWORD *)(v55 + 4 * (int)v60);
            if (v61 == v54) {
              break;
            }
            if (v61 <= v54) {
              int v57 = v60 - 1;
            }
            else {
              LODWORD(v58) = v60 + 1;
            }
            if ((int)v58 > v57 - 32) {
              goto LABEL_82;
            }
          }
        }
        if (v60 < v56)
        {
          if (v60 == v30)
          {
            if (*(_DWORD *)(v55 + 4 * v30) != v54) {
              goto LABEL_71;
            }
          }
          else
          {
            memmove((void *)(v55 + 4 * v33), (const void *)(v55 + 4 * v30), 4 * (v60 - v30));
            v33 += v60 - v30;
            if (*(_DWORD *)(*(void *)(a1 + 40) + 4 * v60) != v54)
            {
              LODWORD(v30) = v60;
              if (v33 >= *(_DWORD *)(a1 + 32))
              {
                char v63 = __si_assert_copy_extra_329();
                __message_assert_333((uint64_t)v63, v64, v65, v66, v67, v68, v69, v70, (char)"CIIndexSet.c");
                free(v63);
                if (__valid_fs(-1)) {
                  uint64_t v71 = 2989;
                }
                else {
                  uint64_t v71 = 3072;
                }
                *(_DWORD *)uint64_t v71 = -559038737;
                abort();
              }
              goto LABEL_71;
            }
            LODWORD(v30) = v60;
          }
          --*(_DWORD *)(a1 + 16);
          LODWORD(v30) = v30 + 1;
        }
      }
LABEL_71:
      if (++v32 == a3) {
        goto LABEL_97;
      }
    }
  }
  int v21 = -2 - v11;
  if (v11 > 0xFFFFFFFD)
  {
    LODWORD(v24) = 0;
    int v22 = 0;
  }
  else
  {
    int v22 = 0;
    int v23 = 0;
    LODWORD(v24) = 0;
    uint64_t v25 = a1 + 32;
    do
    {
      unsigned int v26 = a2[v23];
      unsigned int v27 = *(_DWORD *)(v25 + 4 * (int)v24);
      if (v27 == v26)
      {
        LODWORD(v24) = v24 + 1;
        ++v23;
        ++*(_DWORD *)(a1 + 16);
      }
      else if (v27 > v26)
      {
        LODWORD(v24) = v24 + 1;
        *(_DWORD *)(v25 + 4 * v22++) = v27;
      }
      else
      {
        ++v23;
      }
    }
    while ((int)v24 < v21 && v23 < a3);
  }
  if ((int)v24 < v21)
  {
    uint64_t v41 = v22;
    unint64_t v24 = (int)v24;
    unint64_t v42 = -2 - ((int)v24 + v11);
    if (v42 > 0xB)
    {
      uint64_t v43 = 4 * v41 + a1;
      uint64_t v44 = 4 * (int)v24 + a1;
      if ((unint64_t)(v43 - v44) >= 0x20)
      {
        unint64_t v45 = v42 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v24 = (v42 & 0xFFFFFFFFFFFFFFF8) + (int)v24;
        uint64_t v46 = (_OWORD *)(v43 + 48);
        unsigned int v47 = (long long *)(v44 + 48);
        unint64_t v48 = v42 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          long long v49 = *v47;
          *(v46 - 1) = *(v47 - 1);
          *uint64_t v46 = v49;
          v46 += 2;
          v47 += 2;
          v48 -= 8;
        }
        while (v48);
        if (v42 == v45) {
          return;
        }
        v41 += v45;
      }
    }
    BOOL v50 = (int *)(a1 + 4 * v24 + 32);
    uint64_t v51 = v24 + v11 + 2;
    CFTypeID v52 = (_DWORD *)(a1 + 4 * v41 + 32);
    do
    {
      int v53 = *v50++;
      *v52++ = v53;
      BOOL v16 = __CFADD__(v51++, 1);
    }
    while (!v16);
  }
}

uint64_t _TermUpdateSetReadUnlock(uint64_t a1)
{
  uint64_t v2 = (pthread_mutex_t *)(a1 + 304);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 304));
  int v3 = *(_DWORD *)(a1 + 500) - 1;
  *(_DWORD *)(a1 + 500) = v3;
  if (!v3) {
    db_rwlock_wakeup((uint64_t)v2, 0, 0);
  }
  return pthread_mutex_unlock(v2);
}

void CIIndexSetAddIntersectionInRange(unsigned int *a1, uint64_t *a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a4 <= a5)
  {
    unsigned int v5 = a5;
    v28[1] = v28;
    size_t v10 = a3;
    MEMORY[0x1F4188790](a1);
    uint64_t v12 = (_DWORD **)((char *)v28 - v11);
    bzero((char *)v28 - v11, v11);
    unsigned int v13 = (BOOL *)v12 + 13;
    size_t v14 = v10;
    do
    {
      uint64_t v15 = *a2;
      if (!*a2) {
        return;
      }
      *(void *)(v13 - 13) = v15;
      *unsigned int v13 = *(_DWORD *)(v15 + 16) < -9;
      *(v13 - 1) = 0;
      v13 += 16;
      ++a2;
      --v14;
    }
    while (v14);
    __compar[0] = MEMORY[0x1E4F143A8];
    __compar[1] = 0x40000000;
    __compar[2] = __CIIndexSetAddIntersectionInRange_block_invoke;
    __compar[3] = &__block_descriptor_tmp_12_4995;
    unsigned int v30 = a4;
    unsigned int v31 = v5;
    qsort_b(v12, v10, 0x10uLL, __compar);
    if (*((unsigned char *)v12 + 13))
    {
      if (a3 <= 1)
      {
        unsigned int v17 = *((_DWORD *)v12 + 2);
        goto LABEL_20;
      }
    }
    else
    {
      unsigned int v17 = *((_DWORD *)v12 + 2);
      if (a3 < 2 || v17 < 0x400)
      {
LABEL_20:
        if (v17 || !*((unsigned char *)v12 + 12))
        {
          CIIndexSetAddRange(a1, *v12, a4, v5, v16);
          if (a3 >= 2)
          {
            size_t v25 = v10 - 1;
            unsigned int v26 = v12 + 2;
            do
            {
              unsigned int v27 = *v26;
              v26 += 2;
              CIIndexSetIntersectRanges(a1, v27, a4, v5);
              --v25;
            }
            while (v25);
          }
        }
        return;
      }
    }
    if (a4 + 0x2000 >= v5) {
      unsigned int v18 = a4;
    }
    else {
      unsigned int v18 = v5 - 0x2000;
    }
    size_t v19 = v10 - 1;
    do
    {
      CIIndexSetAddRange(a1, *v12, v18, v5, v16);
      int v20 = v12 + 2;
      size_t v21 = v19;
      do
      {
        int v22 = *v20;
        v20 += 2;
        CIIndexSetIntersectRanges(a1, v22, v18, v5);
        --v21;
      }
      while (v21);
      unsigned int v23 = v18 - 0x2000;
      if (v18 <= a4 + 0x2000) {
        unsigned int v23 = a4;
      }
      unsigned int v5 = v18;
      BOOL v24 = v18 > a4;
      unsigned int v18 = v23;
    }
    while (v24);
  }
}

uint64_t si_dglock_rdunlock(uint64_t a1)
{
  uint64_t v2 = pthread_mutex_lock((pthread_mutex_t *)a1);
  int v3 = *(_DWORD *)(a1 + 196) - 1;
  *(_DWORD *)(a1 + 196) = v3;
  if (!v3) {
    db_rwlock_wakeup(a1, 0, 0);
  }
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v2;
}

BOOL _CIIndexSetConvertIfArrayIsMuchMoreEfficient(int *a1, unsigned int a2, unsigned int a3, int a4, void *a5, int8x8_t a6)
{
  unsigned int v8 = a3;
  unsigned int v9 = a2;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (a1[6] < a3) {
    a3 = a1[6];
  }
  if (a1[5] > a2) {
    a2 = a1[5];
  }
  uint64_t locked = lockedCountItemsInRange(a1, a2, a3, a6);
  unsigned int v12 = locked + a4;
  unsigned int v13 = (v8 - v9 + 63) >> 6;
  if ((int)locked + a4 < v13)
  {
    if (!a4 || ((unsigned int v14 = a1[8], v14 >= v12) ? (v15 = v14 >= 2 * v12) : (v15 = 1), v15))
    {
      unsigned int v16 = (v12 - 1) | ((v12 - 1) >> 1) | (((v12 - 1) | ((v12 - 1) >> 1)) >> 2);
      unsigned int v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
      unsigned int v18 = (v17 | HIWORD(v17)) + 1;
      size_t v19 = (unsigned int *)blob_malloc(v18, a5);
      int v20 = v19;
      char v21 = 0;
    }
    else
    {
      unsigned int v18 = locked;
      if (locked <= 0x1FF)
      {
        MEMORY[0x1F4188790](locked);
        int v20 = (unsigned int *)((char *)&v35 - v28);
        bzero((char *)&v35 - v28, v29);
        int v22 = 0;
        char v21 = 1;
LABEL_14:
        unsigned int v36 = v22;
        unsigned int v24 = a1[5];
        unsigned int v23 = a1[6];
        int v25 = a1[4];
        v37[0] = v23;
        v37[1] = v24;
        uint64_t v38 = 0;
        int v39 = a1;
        if (v25 >= 1)
        {
          int v26 = binarySearchMap((uint64_t)a1, v23);
          LODWORD(v38) = v26;
          if (v26 != a1[9]) {
            goto LABEL_44;
          }
          int v27 = a1[8] + v26 - a1[4];
          goto LABEL_43;
        }
        if (v25 < 0xFFFFFFF7) {
          goto LABEL_44;
        }
        if (v25 <= 0xFFFFFFFD)
        {
          if (v23 >= a1[8])
          {
            int v27 = 0;
            goto LABEL_43;
          }
          if (v25 != -3)
          {
            if (v23 >= a1[9])
            {
              int v27 = 1;
              goto LABEL_43;
            }
            if (v25 != -4)
            {
              if (v23 >= a1[10])
              {
                int v27 = 2;
                goto LABEL_43;
              }
              if (v25 != -5)
              {
                if (v23 >= a1[11])
                {
                  int v27 = 3;
                  goto LABEL_43;
                }
                if (v25 != -6)
                {
                  if (v23 >= a1[12])
                  {
                    int v27 = 4;
                    goto LABEL_43;
                  }
                  if (v25 != -7)
                  {
                    if (v23 >= a1[13])
                    {
                      int v27 = 5;
                      goto LABEL_43;
                    }
                    if (v25 != -8 && v23 >= a1[14])
                    {
                      int v27 = 6;
                      goto LABEL_43;
                    }
                  }
                }
              }
            }
          }
        }
        int v27 = -2 - v25;
LABEL_43:
        LODWORD(v38) = v27;
LABEL_44:
        unsigned int v30 = _CIIndexSetEnumeratorNext(v37);
        if (v30)
        {
          unsigned int v32 = 0;
          do
          {
            unsigned int v33 = v32 + 1;
            v20[v32] = v30;
            unsigned int v30 = _CIIndexSetEnumeratorNext(v37);
            unsigned int v32 = v33;
          }
          while (v30);
          a1[5] = v9;
          a1[6] = v8;
          if (v21)
          {
LABEL_48:
            a1[4] = 0;
            a1[9] = 0;
            _CIIndexSetAddSortedIndexes(a1, v20, v33, 1, a5, 1, v31);
            if (v36) {
              blob_free(v36, v18, a5);
            }
            return v12 < v13;
          }
        }
        else
        {
          unsigned int v33 = 0;
          a1[5] = v9;
          a1[6] = v8;
          if (v21) {
            goto LABEL_48;
          }
        }
        blob_free(*((void **)a1 + 5), a1[8], a5);
        *((void *)a1 + 5) = v20;
        a1[4] = v33;
        a1[8] = v18;
        a1[9] = v33;
        return v12 < v13;
      }
      size_t v19 = (unsigned int *)blob_malloc(locked, a5);
      int v20 = v19;
      char v21 = 1;
    }
    int v22 = v19;
    goto LABEL_14;
  }
  return v12 < v13;
}

void _CIIndexSetClearRange(int *cf, unsigned int a2, unsigned int a3)
{
  if (cf[6] >= a3) {
    unsigned int v4 = a3;
  }
  else {
    unsigned int v4 = cf[6];
  }
  if (cf[5] <= a2) {
    unsigned int v5 = a2;
  }
  else {
    unsigned int v5 = cf[5];
  }
  unsigned int v6 = v4 - v5;
  if (v4 == v5)
  {
    _CIIndexSetRemoveIndex(cf, v4);
    return;
  }
  if (v4 < v5) {
    return;
  }
  if (CFGetTypeID(cf) == __kCIIndexSetInvertedTypeID)
  {
    int v7 = cf[4];
    if (v7 > -10
      || ((int v8 = cf[6] - cf[5], v9 = v6 - v7 - 9, v8 + 1 < v9) ? (v10 = v8 + 1) : (v10 = v9),
          int v7 = -10 - v10,
          cf[4] = -10 - v10,
          (v10 & 0x80000000) != 0))
    {
      int v11 = v6 + 1;
      if (v7 >= -1) {
        unsigned int v12 = cf[8];
      }
      else {
        unsigned int v12 = 4;
      }
      if (v7 < -1) {
        int v7 = -2 - v7;
      }
      if (v12 < v7 + v11) {
        _CIIndexSetMakeSpace((unsigned int *)cf, v11, 0, 0, 0);
      }
    }
  }
  int v13 = cf[4];
  if (v13 <= -10)
  {
    int v14 = cf[6];
    unsigned int v15 = v14 - v4;
    unsigned int v16 = (v14 - v4) >> 5;
    unsigned int v17 = v14 - v5;
    unsigned int v18 = v17 >> 5;
    int v19 = v17 & 0x1F;
    int v20 = masks[v15 & 0x1F];
    if (v16 == v18)
    {
      int v21 = v20 | ~masks[v19 + 1];
      uint64_t v22 = *((void *)cf + 5);
      unsigned int v18 = v16;
    }
    else
    {
      uint64_t v22 = *((void *)cf + 5);
      *(_DWORD *)(v22 + 4 * v16) &= v20;
      if (v16 + 1 < v18) {
        bzero((void *)(v22 + ((v15 >> 3) & 0x1FFFFFFC) + 4), 4 * (v18 - v16 - 2) + 4);
      }
      int v21 = ~masks[v19 + 1];
    }
    *(_DWORD *)(v22 + 4 * v18) &= v21;
    return;
  }
  if ((v13 & 0x80000000) == 0)
  {
    if (CFGetTypeID(cf) != __kCIIndexSetInvertedTypeID)
    {
      CIIndexSetClearRange_Array((uint64_t)cf, v5, v4);
      return;
    }
    int v55 = -1;
    if (v5) {
      unsigned int v23 = v5 - 1;
    }
    else {
      unsigned int v23 = 0;
    }
    int v24 = searchMapWithHint((uint64_t)cf, v23, &v55, 1);
    int v25 = v24;
    int v26 = cf[4];
    int v27 = cf[8];
    if (v27 != v26)
    {
      uint64_t v28 = cf[9];
      if (v28 == v24)
      {
LABEL_79:
        uint64_t v47 = *((void *)cf + 5);
        int v48 = v25 - 1;
        if (v25 >= 33)
        {
          LODWORD(v49) = 0;
          while (1)
          {
            int v50 = v48 - v49;
            if (v48 < (int)v49) {
              ++v50;
            }
            int v51 = v49 + (v50 >> 1);
            unsigned int v52 = *(_DWORD *)(v47 + 4 * v51);
            if (v52 == v4) {
              break;
            }
            if (v52 <= v4) {
              int v48 = v51 - 1;
            }
            else {
              LODWORD(v49) = v51 + 1;
            }
            if ((int)v49 > v48 - 32)
            {
              uint64_t v49 = (int)v49;
              goto LABEL_90;
            }
          }
        }
        else
        {
          uint64_t v49 = 0;
LABEL_90:
          if (v48 + 1 > v49) {
            int v51 = v48 + 1;
          }
          else {
            int v51 = v49;
          }
          while (v49 <= v48)
          {
            unsigned int v53 = *(_DWORD *)(v47 + 4 * v49++);
            if (v53 <= v4)
            {
              int v51 = v49 - 1;
              break;
            }
          }
        }
        if (v6 + 1 > v25 - v51)
        {
          cf[4] -= v25 - v51;
          cf[9] = v51;
          uint64_t v54 = 4 * v51;
          do
          {
            *(_DWORD *)(*((void *)cf + 5) + v54) = v4;
            ++cf[4];
            ++cf[9];
            --v4;
            v54 += 4;
          }
          while (v4 >= v5);
        }
        return;
      }
      uint64_t v29 = *((void *)cf + 5);
      if ((int)v28 >= v24)
      {
        memmove((void *)(v29 + 4 * (v27 - v26 + v24)), (const void *)(v29 + 4 * v24), 4 * ((int)v28 - v24));
      }
      else
      {
        memmove((void *)(v29 + 4 * v28), (const void *)(v29 + 4 * (v28 + v27 - v26)), 4 * (v24 - (v28 + v27 - v26)));
        int v25 = v25 - cf[8] + cf[4];
      }
    }
    cf[9] = v25;
    goto LABEL_79;
  }
  uint64_t v30 = (-2 - v13);
  int8x8_t v31 = (unsigned int *)(cf + 8);
  if (v13 > 0xFFFFFFFD || *v31 <= v4)
  {
    LODWORD(v32) = 0;
  }
  else
  {
    if (v13 == -3)
    {
LABEL_45:
      LODWORD(v32) = -2 - v13;
LABEL_54:
      cf[4] = -(int)v32 - 2;
      return;
    }
    if (cf[9] <= v4)
    {
      LODWORD(v32) = 1;
    }
    else
    {
      if (v13 == -4) {
        goto LABEL_45;
      }
      if (cf[10] <= v4)
      {
        LODWORD(v32) = 2;
      }
      else
      {
        if (v13 == -5) {
          goto LABEL_45;
        }
        if (cf[11] <= v4)
        {
          LODWORD(v32) = 3;
        }
        else
        {
          if (v13 == -6) {
            goto LABEL_45;
          }
          if (cf[12] <= v4)
          {
            LODWORD(v32) = 4;
          }
          else
          {
            if (v13 == -7) {
              goto LABEL_45;
            }
            if (cf[13] <= v4)
            {
              LODWORD(v32) = 5;
            }
            else
            {
              if (v13 == -8) {
                goto LABEL_45;
              }
              LODWORD(v32) = -2 - v13;
              if (cf[14] > v4) {
                goto LABEL_54;
              }
              LODWORD(v32) = 6;
            }
          }
        }
      }
    }
  }
  LODWORD(v33) = v32;
  if ((int)v32 < (int)v30)
  {
    uint64_t v33 = v32;
    while (v31[v33] >= v5)
    {
      if (v30 == ++v33) {
        goto LABEL_54;
      }
    }
  }
  cf[4] = v13 - v32 + v33;
  if ((int)v33 < (int)v30)
  {
    uint64_t v32 = v32;
    uint64_t v34 = v33;
    uint64_t v35 = (-3 - (v33 + v13));
    if (v35 >= 0xB)
    {
      unsigned int v36 = &cf[v32];
      uint64_t v37 = &cf[v33];
      if ((unint64_t)((char *)v36 - (char *)v37) >= 0x20)
      {
        uint64_t v38 = v35 + 1;
        uint64_t v39 = (v35 + 1) & 0x1FFFFFFF8;
        v34 += v39;
        uint64_t v40 = (long long *)(v37 + 12);
        uint64_t v41 = v36 + 12;
        uint64_t v42 = v39;
        do
        {
          long long v43 = *v40;
          *(v41 - 1) = *(v40 - 1);
          *uint64_t v41 = v43;
          v40 += 2;
          v41 += 2;
          v42 -= 8;
        }
        while (v42);
        if (v38 == v39) {
          return;
        }
        uint64_t v32 = v39 | v32;
      }
    }
    uint64_t v44 = &cf[v34 + 8];
    unint64_t v45 = &cf[v32 + 8];
    do
    {
      int v46 = *v44++;
      *v45++ = v46;
      LODWORD(v34) = v34 + 1;
    }
    while ((int)v30 > (int)v34);
  }
}

void CIIndexSetInvertRange(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (CFGetTypeID((CFTypeRef)a1) == __kCIIndexSetInvertedTypeID) {
    _CIIndexSetForceBitmap(a1, 0, 0);
  }
  unsigned int v7 = *(_DWORD *)(a1 + 20);
  unsigned int v6 = *(_DWORD *)(a1 + 24);
  if (v6 >= a3)
  {
    if (v7 > a2)
    {
      unsigned int v8 = a2 <= 1 ? 1 : a2;
      if (v8 <= v6)
      {
        unsigned int v9 = (const void **)a1;
LABEL_21:
        _CIIndexSetSetIndexRangeWithCache(v9, v8, v6, 0, 0);
      }
    }
  }
  else
  {
    if (v7 > a2)
    {
      if (a2 <= 1) {
        unsigned int v8 = 1;
      }
      else {
        unsigned int v8 = a2;
      }
      if (v8 > a3) {
        goto LABEL_22;
      }
      goto LABEL_20;
    }
    if (v7 <= 1) {
      unsigned int v8 = 1;
    }
    else {
      unsigned int v8 = *(_DWORD *)(a1 + 20);
    }
    if (v8 <= a3)
    {
LABEL_20:
      unsigned int v9 = (const void **)a1;
      unsigned int v6 = a3;
      goto LABEL_21;
    }
  }
LABEL_22:
  if (*(int *)(a1 + 16) >= -9) {
    _CIIndexSetForceBitmap(a1, 0, 0);
  }
  int v10 = *(_DWORD *)(a1 + 24);
  uint64_t v11 = (v10 - a3) >> 5;
  int v12 = (v10 - a3) & 0x1F;
  char v13 = v10 - a2;
  uint64_t v14 = (v10 - a2) >> 5;
  int v15 = v13 & 0x1F;
  unsigned int v16 = (int *)(*(void *)(a1 + 40) + 4 * v11);
  int v17 = *v16;
  if (v11 == v14)
  {
    int v18 = v15 + 1;
    int v19 = masks[v12];
    if (v12 != v18) {
      int v19 = masks[v18] & ~v19;
    }
  }
  else
  {
    int v20 = masks[v12];
    *unsigned int v16 = v20 & v17;
    *(_DWORD *)(*(void *)(a1 + 40) + 4 * v11) |= ~(v20 | v17);
    uint64_t v21 = (v11 + 1);
    if (v21 < v14)
    {
      do
      {
        *(_DWORD *)(*(void *)(a1 + 40) + 4 * v21) = ~*(_DWORD *)(*(void *)(a1 + 40) + 4 * v21);
        ++v21;
      }
      while (v14 != v21);
    }
    unsigned int v16 = (int *)(*(void *)(a1 + 40) + 4 * v14);
    int v17 = *v16;
    int v19 = masks[v15 + 1];
    uint64_t v11 = v14;
  }
  *unsigned int v16 = v17 & ~v19;
  *(_DWORD *)(*(void *)(a1 + 40) + 4 * v11) |= v19 & ~v17;
}

void cicachelistenqueue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a1 != 4292677391)
  {
    unsigned int v7 = __si_assert_copy_extra_329();
    __message_assert_333((uint64_t)v7, v8, v9, v10, v11, v12, v13, v14, (char)"CIIndexSet.c");
    free(v7);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAA] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  unsigned int v6 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  *(void *)(a2 + a3) = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2;
  os_unfair_lock_unlock(v6);
}

void CIIndexSetReleaseToPerThreadCache(uint64_t a1, void *a2)
{
  if (*(_DWORD *)(a1 + 16) <= 0xFFFFFFF6) {
    blob_free(*(void **)(a1 + 40), *(_DWORD *)(a1 + 32), a2);
  }
  *(void *)(a1 + 40) = a2[1];
  *(_DWORD *)(a1 + 32) = -2;
  a2[1] = a1;
}

_DWORD *CIIndexSetCreateWithRangeWithCache(unsigned int a1, unsigned int a2, uint64_t a3)
{
  if (a1 <= 1) {
    unsigned int v3 = 1;
  }
  else {
    unsigned int v3 = a1;
  }
  if (v3 > a2)
  {
    uint64_t v9 = __si_assert_copy_extra_329();
    __message_assert_333((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, (char)"CIIndexSet.c");
    free(v9);
    if (__valid_fs(-1)) {
      uint64_t v17 = 2989;
    }
    else {
      uint64_t v17 = 3072;
    }
    *(_DWORD *)uint64_t v17 = -559038737;
    abort();
  }
  if (a3)
  {
    unsigned int v6 = *(void **)a3;
    if (*(void *)a3)
    {
      if (*v6 != 2882339105)
      {
        int v18 = __si_assert_copy_extra_329();
        __message_assert_333((uint64_t)v18, v19, v20, v21, v22, v23, v24, v25, (char)"CIIndexSet.c");
        free(v18);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAA] = -559038737;
          abort();
        }
        goto LABEL_25;
      }
      uint64_t v7 = *(void *)(a3 + 8);
      if (v7 || (uint64_t v7 = cicachelistdequeue((uint64_t)(v6 + 1), 20)) != 0)
      {
        *(void *)(a3 + 8) = *(void *)(v7 + 40);
        *(_DWORD *)(v7 + 16) = -2;
        *(_DWORD *)(v7 + 20) = v3;
        *(_DWORD *)(v7 + 24) = a2;
        *(void *)(v7 + 32) = 0;
        *(void *)(v7 + 40) = 0;
        if (CIIndexSetGetTypeID_onceToken != -1) {
          dispatch_once(&CIIndexSetGetTypeID_onceToken, &__block_literal_global_4944);
        }
        _CFRuntimeSetInstanceTypeID();
        if (*(_DWORD *)(v7 + 20) <= *(_DWORD *)(v7 + 24)) {
          return (_DWORD *)v7;
        }
        int v26 = __si_assert_copy_extra_329();
        __message_assert_333((uint64_t)v26, v27, v28, v29, v30, v31, v32, v33, (char)"CIIndexSet.c");
        free(v26);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
LABEL_25:
        MEMORY[0xC00] = -559038737;
        abort();
      }
    }
  }
  return CIIndexSetCreateWithRange(v3, a2, 1);
}

void CIIndexSetIntersectRanges(_DWORD *cf, unsigned int *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v161 = *MEMORY[0x1E4F143B8];
  if (cf[6] >= a2[6]) {
    unsigned int v7 = a2[6];
  }
  else {
    unsigned int v7 = cf[6];
  }
  if (v7 >= a4) {
    unsigned int v8 = a4;
  }
  else {
    unsigned int v8 = v7;
  }
  if (cf[5] <= a2[5]) {
    unsigned int v9 = a2[5];
  }
  else {
    unsigned int v9 = cf[5];
  }
  if (v9 >= a3)
  {
    if (v9 <= a3)
    {
      if (v7 < a4) {
        goto LABEL_30;
      }
    }
    else
    {
      _CIIndexSetClearRange(cf, a3, v9 - 1);
      if (v7 < a4) {
        goto LABEL_30;
      }
    }
LABEL_12:
    if (v9 <= v8) {
      goto LABEL_13;
    }
LABEL_31:
    if (dword_1E9FC90A8 >= 5)
    {
      int v29 = *__error();
      uint64_t v30 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v9;
        LOWORD(v159) = 1024;
        *(_DWORD *)((char *)&v159 + 2) = v8;
        _os_log_impl(&dword_1BD672000, v30, OS_LOG_TYPE_DEFAULT, "%d start, end:%d", buf, 0xEu);
      }
      *__error() = v29;
    }
    return;
  }
  unsigned int v9 = a3;
  if (v7 >= a4) {
    goto LABEL_12;
  }
LABEL_30:
  _CIIndexSetClearRange(cf, v8, a4);
  if (v9 > v8) {
    goto LABEL_31;
  }
LABEL_13:
  int v10 = cf[4];
  if (v10)
  {
    if (v10 == -2) {
      return;
    }
  }
  else if (CFGetTypeID(cf) != __kCIIndexSetInvertedTypeID || cf[4] == -2)
  {
    return;
  }
  unsigned int v11 = a2[4];
  if (!v11)
  {
    if (CFGetTypeID(a2) == __kCIIndexSetInvertedTypeID && a2[4] != -2) {
      goto LABEL_17;
    }
LABEL_40:
    _CIIndexSetClearRange(cf, v9, v8);
    return;
  }
  if (v11 == -2) {
    goto LABEL_40;
  }
LABEL_17:
  uint64_t v12 = &unk_1E9FE3000;
  if (CFGetTypeID(cf) == __kCIIndexSetInvertedTypeID) {
    _CIIndexSetForceBitmap((uint64_t)cf, 0, 0);
  }
  uint64_t v13 = a2[4];
  int v14 = cf[4];
  if ((int)v13 <= -10)
  {
    if (v14 <= -10)
    {
      int v15 = cf[6];
      unsigned int v16 = (v15 - v8) >> 5;
      int v17 = (v15 - v8) & 0x1F;
      uint64_t v18 = (v15 - v9) >> 5;
      int v19 = (v15 - v9) & 0x1F;
      unsigned int v20 = a2[6];
      int v21 = v15 - v20;
      if (!v21)
      {
        if (v18 == v16)
        {
          int v22 = v19 + 1;
          int v23 = masks[v17];
          int v24 = v23;
          int v25 = v23;
          if (v17 != v22)
          {
            int v24 = masks[v22];
            int v25 = v24 & ~v23;
          }
          uint64_t v26 = 4 * v16;
          int v27 = *(_DWORD *)(*((void *)a2 + 5) + v26) & v25 | ~v24 | v23;
          uint64_t v28 = *((void *)cf + 5);
          goto LABEL_228;
        }
        *(_DWORD *)(*((void *)cf + 5) + 4 * v16) &= masks[v17] | *(_DWORD *)(*((void *)a2 + 5) + 4 * v16);
        uint64_t v78 = v16 + 1;
        if (v78 < v18)
        {
          do
          {
            *(_DWORD *)(*((void *)cf + 5) + 4 * v78) &= *(_DWORD *)(*((void *)a2 + 5) + 4 * v78);
            ++v78;
          }
          while (v18 != v78);
        }
        uint64_t v79 = 4 * v18;
        int v80 = *(_DWORD *)(*((void *)a2 + 5) + v79) | ~masks[v19 + 1];
        uint64_t v81 = *((void *)cf + 5);
LABEL_238:
        *(_DWORD *)(v81 + v79) &= v80;
        return;
      }
      unsigned int v44 = (v20 - v8) >> 5;
      unsigned int v45 = (v20 - v9) >> 5;
      char v46 = v21 & 0x1F;
      if ((v21 & 0x1F) != 0)
      {
        char v47 = 32 - v46;
        uint64_t v48 = *((void *)a2 + 5);
        unsigned int v49 = *(_DWORD *)(v48 + 4 * v44);
        unsigned int v50 = v44 + 1;
        unsigned int v51 = a2[8];
        unsigned int v52 = v18 - v16;
        if (v18 == v16)
        {
          if (v50 >= v51) {
            int v53 = 0;
          }
          else {
            int v53 = *(_DWORD *)(v48 + 4 * v50) >> v47;
          }
          int v128 = v53 | (v49 << v46);
          int v129 = v19 + 1;
          int v93 = masks[v17];
          int v130 = v93;
          int v131 = v93;
          if (v17 != v129)
          {
            int v130 = masks[v129];
            int v131 = v130 & ~v93;
          }
          int v96 = v131 & v128 | ~v130;
LABEL_227:
          int v27 = v96 | v93;
          uint64_t v28 = *((void *)cf + 5);
          uint64_t v26 = 4 * v16;
LABEL_228:
          *(_DWORD *)(v28 + v26) &= v27;
          return;
        }
        unsigned int v104 = v49 >> v47;
        if (v50 >= v51) {
          int v105 = 0;
        }
        else {
          int v105 = *(_DWORD *)(v48 + 4 * v50) << v46;
        }
        *(_DWORD *)(*((void *)cf + 5) + 4 * v16) &= v105 | masks[v17] | v104;
        if (v52 >= 2)
        {
          uint64_t v132 = 1 - v52;
          unsigned int v133 = v16 + 1;
          unsigned int v134 = v44 + 2;
          do
          {
            uint64_t v136 = *((void *)a2 + 5);
            if (v134 < a2[8]) {
              int v135 = *(_DWORD *)(v136 + 4 * v134) << v46;
            }
            else {
              int v135 = 0;
            }
            *(_DWORD *)(*((void *)cf + 5) + 4 * v133++) &= v135 | (*(_DWORD *)(v136 + 4 * (v134++ - 1)) >> v47);
            BOOL v153 = __CFADD__(v132++, 1);
          }
          while (!v153);
        }
        int v126 = *(_DWORD *)(*((void *)a2 + 5) + 4 * v45) >> v47;
        int v127 = masks[v19 + 1];
      }
      else
      {
        int v90 = *(_DWORD *)(*((void *)a2 + 5) + 4 * v44);
        unsigned int v91 = v18 - v16;
        if (v18 == v16)
        {
          int v92 = v19 + 1;
          int v93 = masks[v17];
          int v94 = v93;
          int v95 = v93;
          if (v17 != v92)
          {
            int v94 = masks[v92];
            int v95 = v94 & ~v93;
          }
          int v96 = v95 & v90 | ~v94;
          goto LABEL_227;
        }
        *(_DWORD *)(*((void *)cf + 5) + 4 * v16) &= masks[v17] | v90;
        if (v91 >= 2)
        {
          uint64_t v123 = 1 - v91;
          unsigned int v124 = v16 + 1;
          unsigned int v125 = v44 + 1;
          do
          {
            *(_DWORD *)(*((void *)cf + 5) + 4 * v124++) &= *(_DWORD *)(*((void *)a2 + 5) + 4 * v125++);
            BOOL v153 = __CFADD__(v123++, 1);
          }
          while (!v153);
        }
        int v126 = *(_DWORD *)(*((void *)a2 + 5) + 4 * v45);
        int v127 = masks[v19 + 1];
      }
      int v80 = v126 | ~v127;
      uint64_t v81 = *((void *)cf + 5);
      uint64_t v79 = 4 * v18;
      goto LABEL_238;
    }
    if (v14 <= -2)
    {
      int v34 = -2 - v14;
      uint64_t v35 = (char *)(cf + 8);
      if (v14 == -2)
      {
        int v36 = 0;
LABEL_125:
        if (v36 >= v34) {
          LODWORD(v83) = v34;
        }
        else {
          LODWORD(v83) = v36;
        }
        int v84 = v83;
      }
      else
      {
        uint64_t v82 = 0;
        while (*(_DWORD *)&v35[4 * v82] > v8)
        {
          if (v34 == ++v82)
          {
            int v36 = -2 - v14;
            goto LABEL_125;
          }
        }
        if ((int)v82 >= v34) {
          int v84 = -2 - v14;
        }
        else {
          int v84 = v82;
        }
        if (v34 <= (int)v82)
        {
          LODWORD(v83) = v84;
        }
        else
        {
          uint64_t v83 = (int)v82;
          int v112 = -2 - (v14 + v82);
          while (1)
          {
            unsigned int v113 = *(_DWORD *)&v35[4 * v83];
            if (v113 < v9) {
              break;
            }
            if ((*(_DWORD *)(*((void *)a2 + 5) + 4 * ((a2[6] - v113) >> 5)) >> (*((unsigned char *)a2 + 24) - v113))) {
              *(_DWORD *)&v35[4 * v84++] = v113;
            }
            ++v83;
            if (!--v112)
            {
              LODWORD(v83) = v34;
              break;
            }
          }
        }
      }
      memmove(&v35[4 * v84], &v35[4 * (int)v83], 4 * (v34 - (int)v83));
      cf[4] += v83 - v84;
      return;
    }
    if ((v14 & 0x80000000) == 0)
    {
      uint64_t v68 = (int)cf[9];
      if (v68 != v14)
      {
        memmove((void *)(*((void *)cf + 5) + 4 * v68), (const void *)(*((void *)cf + 5) + 4 * (v68 - v14 + cf[8])), 4 * (v14 - (int)v68));
        cf[9] = cf[4];
      }
    }
    int v69 = binarySearchMap((uint64_t)cf, v8);
    int v70 = v69;
    int v71 = cf[4];
    if (v69 >= v71)
    {
      int v85 = v69;
    }
    else
    {
      uint64_t v72 = v69;
      do
      {
        uint64_t v73 = *((void *)cf + 5);
        unsigned int v74 = *(_DWORD *)(v73 + 4 * v72);
        if (v74 < v9) {
          break;
        }
        if ((*(_DWORD *)(*((void *)a2 + 5) + 4 * ((a2[6] - v74) >> 5)) >> (*((unsigned char *)a2 + 24) - v74)))
        {
          *(_DWORD *)(v73 + 4 * v70++) = v74;
          int v71 = cf[4];
        }
        ++v72;
      }
      while (v72 < v71);
      int v85 = v70;
      int v70 = v72;
    }
    memmove((void *)(*((void *)cf + 5) + 4 * v85), (const void *)(*((void *)cf + 5) + 4 * v70), 4 * (v71 - v70));
    int v86 = v85 - v70;
LABEL_281:
    int v150 = cf[4] + v86;
    cf[4] = v150;
    cf[9] = v150;
    return;
  }
  if (v14 <= -10)
  {
    if ((int)v13 <= -2)
    {
      *(void *)long long buf = 0;
      uint64_t v159 = 0;
      if (v13 != -2)
      {
        unsigned int v31 = 0;
        uint64_t v32 = 4294967294 - v13;
        uint64_t v33 = a2 + 8;
        while (1)
        {
          unsigned int v59 = *v33;
          if (*v33 < v9 || v59 > v8) {
            goto LABEL_77;
          }
          if (cf[5] > v59) {
            goto LABEL_77;
          }
          unsigned int v61 = cf[6];
          unsigned int v62 = v61 - v59;
          if (v61 < v59) {
            goto LABEL_77;
          }
          int v63 = cf[4];
          if (v63 > -10) {
            break;
          }
          if ((*(_DWORD *)(*((void *)cf + 5) + 4 * (v62 >> 5)) >> v62)) {
            goto LABEL_76;
          }
LABEL_77:
          ++v33;
          if (!--v32) {
            goto LABEL_136;
          }
        }
        if (v63 < 0)
        {
          if (v63 >= 0xFFFFFFFE
            || cf[8] != v59
            && (v63 == -3
             || cf[9] != v59
             && (v63 == -4
              || cf[10] != v59
              && (v63 == -5
               || cf[11] != v59
               && (v63 == -6 || cf[12] != v59 && (v63 == -7 || cf[13] != v59 && (v63 == -8 || cf[14] != v59)))))))
          {
            goto LABEL_77;
          }
        }
        else
        {
          unsigned int v64 = binarySearchMap((uint64_t)cf, *v33);
          unsigned int v65 = cf[9];
          if (v64 < v65 || (BOOL v66 = 0, v67 = cf[8], v64 < v67) && v64 >= v67 + v65 - cf[4]) {
            BOOL v66 = *(_DWORD *)(*((void *)cf + 5) + 4 * v64) == v59;
          }
          if (v66 == (CFGetTypeID(cf) == __kCIIndexSetInvertedTypeID)) {
            goto LABEL_77;
          }
          unsigned int v59 = *v33;
        }
LABEL_76:
        *(_DWORD *)&buf[4 * v31++] = v59;
        goto LABEL_77;
      }
LABEL_135:
      unsigned int v31 = 0;
LABEL_136:
      _CIIndexSetClearRange(cf, v9, v8);
      _CIIndexSetAddSortedIndexes(cf, (unsigned int *)buf, v31, 1, 0, 0, v89);
      return;
    }
    int v54 = cf[6];
    if (a2[6] >= v8) {
      unsigned int v55 = v8;
    }
    else {
      unsigned int v55 = a2[6];
    }
    if (a2[5] <= v9) {
      unsigned int v56 = v9;
    }
    else {
      unsigned int v56 = a2[5];
    }
    *(_DWORD *)long long buf = v55;
    *(_DWORD *)&uint8_t buf[4] = v56;
    uint64_t v159 = 0;
    uint64_t v160 = a2;
    if ((int)v13 < 1)
    {
      if ((v13 & 0x80000000) == 0) {
        goto LABEL_144;
      }
      int v58 = -1;
    }
    else
    {
      int v57 = binarySearchMap((uint64_t)a2, v55);
      LODWORD(v159) = v57;
      if (v57 != a2[9]) {
        goto LABEL_144;
      }
      int v58 = a2[8] + v57 - a2[4];
    }
    LODWORD(v159) = v58;
LABEL_144:
    unsigned int v97 = _CIIndexSetEnumeratorNext((unsigned int *)buf);
    if (v97)
    {
      unsigned int v98 = v97;
      int v99 = (v54 - v8) & 0x1F;
      unsigned int v100 = (v54 - v8) >> 5;
      unsigned int v101 = cf[6] - v97;
      unsigned int v102 = v101 >> 5;
      if (v101 >> 5 == v100) {
        int v103 = masks[v99];
      }
      else {
        int v103 = 0;
      }
      int v106 = 1 << v101;
      unsigned int v155 = (v54 - v8) >> 5;
      unsigned int v157 = (v54 - v9) >> 5;
      int v154 = ((_BYTE)v54 - (_BYTE)v9) & 0x1F;
      if (v100 == v157)
      {
        int v103 = masks[v99] | ~masks[(((_BYTE)v54 - (_BYTE)v9) & 0x1F) + 1];
      }
      else if (v97 + 1 <= v8)
      {
        _CIIndexSetClearRange(cf, v97 + 1, v8);
      }
LABEL_155:
      unsigned int v107 = v98;
      int v108 = v106;
      while (1)
      {
        unsigned int v109 = _CIIndexSetEnumeratorNext((unsigned int *)buf);
        if (!v109) {
          break;
        }
        unsigned int v98 = v109;
        unsigned int v110 = (cf[6] - v109) >> 5;
        int v106 = 1 << (*((unsigned char *)cf + 24) - v109);
        if (v110 != v102)
        {
          *(_DWORD *)(*((void *)cf + 5) + 4 * v102) &= v103 | v108;
          unsigned int v102 = v110;
          int v103 = 0;
          if (v107 - 1 >= v109 + 1)
          {
            _CIIndexSetClearRange(cf, v109 + 1, v107 - 1);
            int v103 = 0;
            unsigned int v102 = v110;
          }
          goto LABEL_155;
        }
        v108 |= v106;
        unsigned int v107 = v109;
      }
      if (v155 == v157 || v102 != v157)
      {
        int v111 = v103 | v108;
      }
      else
      {
        int v111 = v108 | ~masks[v154 + 1];
        unsigned int v102 = v157;
      }
      *(_DWORD *)(*((void *)cf + 5) + 4 * v102) &= v111;
      if (v107 <= v9) {
        return;
      }
      unsigned int v8 = v107 - 1;
    }
    _CIIndexSetClearRange(cf, v9, v8);
    return;
  }
  if ((v14 & 0x80000000) == 0)
  {
    if ((v13 & 0x80000000) == 0)
    {
      uint64_t v37 = (int)cf[9];
      if (v37 != v14)
      {
        memmove((void *)(*((void *)cf + 5) + 4 * v37), (const void *)(*((void *)cf + 5) + 4 * (v37 - v14 + cf[8])), 4 * (v14 - (int)v37));
        cf[9] = cf[4];
      }
      int v38 = binarySearchMap((uint64_t)cf, v8);
      unsigned int v39 = a2[5];
      if (a2[6] >= v8) {
        unsigned int v40 = v8;
      }
      else {
        unsigned int v40 = a2[6];
      }
      int v41 = a2[4];
      if (v39 <= v9) {
        unsigned int v39 = v9;
      }
      *(_DWORD *)long long buf = v40;
      *(_DWORD *)&uint8_t buf[4] = v39;
      uint64_t v159 = 0;
      uint64_t v160 = a2;
      if (v41 >= 1)
      {
        int v42 = binarySearchMap((uint64_t)a2, v40);
        LODWORD(v159) = v42;
        if (v42 != a2[9]) {
          goto LABEL_277;
        }
        int v43 = a2[8] + v42 - a2[4];
        goto LABEL_276;
      }
      if (v41 < 0xFFFFFFF7) {
        goto LABEL_277;
      }
      if (v41 <= 0xFFFFFFFD)
      {
        if (v40 >= a2[8])
        {
          int v43 = 0;
          goto LABEL_276;
        }
        if (v41 != -3)
        {
          if (v40 >= a2[9])
          {
            int v43 = 1;
            goto LABEL_276;
          }
          if (v41 != -4)
          {
            if (v40 >= a2[10])
            {
              int v43 = 2;
              goto LABEL_276;
            }
            if (v41 != -5)
            {
              if (v40 >= a2[11])
              {
                int v43 = 3;
                goto LABEL_276;
              }
              if (v41 != -6)
              {
                if (v40 >= a2[12])
                {
                  int v43 = 4;
                  goto LABEL_276;
                }
                if (v41 != -7)
                {
                  if (v40 >= a2[13])
                  {
                    int v43 = 5;
                    goto LABEL_276;
                  }
                  if (v41 != -8 && v40 >= a2[14])
                  {
                    int v43 = 6;
                    goto LABEL_276;
                  }
                }
              }
            }
          }
        }
      }
      int v43 = -2 - v41;
LABEL_276:
      LODWORD(v159) = v43;
LABEL_277:
      LODWORD(v147) = cf[4];
      if (v38 < (int)v147 && (unsigned int v148 = *(_DWORD *)(*((void *)cf + 5) + 4 * v38), v148 >= v9))
      {
        uint64_t v149 = v38;
        unsigned int v151 = -1;
        while (1)
        {
          if (v148 < v151)
          {
            unsigned int v151 = _CIIndexSetEnumeratorNext((unsigned int *)buf);
            if (!v151) {
              break;
            }
          }
          if (v148 < v151)
          {
            do
              unsigned int v151 = _CIIndexSetEnumeratorNext((unsigned int *)buf);
            while (v148 < v151);
            if (!v151) {
              break;
            }
          }
          if (v148 == v151) {
            *(_DWORD *)(*((void *)cf + 5) + 4 * v38++) = *(_DWORD *)(*((void *)cf + 5) + 4 * v149);
          }
          ++v149;
          uint64_t v147 = (int)cf[4];
          if (v149 < v147)
          {
            unsigned int v148 = *(_DWORD *)(*((void *)cf + 5) + 4 * v149);
            if (v148 >= v9) {
              continue;
            }
          }
          goto LABEL_280;
        }
        LODWORD(v147) = cf[4];
        if ((int)v147 > (int)v149)
        {
          while (1)
          {
            unsigned int v152 = *(_DWORD *)(*((void *)cf + 5) + 4 * v149);
            BOOL v153 = v8 >= v152 && v152 >= v9;
            if (!v153) {
              break;
            }
            if (++v149 >= (int)v147)
            {
              LODWORD(v149) = cf[4];
              break;
            }
          }
        }
      }
      else
      {
        LODWORD(v149) = v38;
      }
LABEL_280:
      memmove((void *)(*((void *)cf + 5) + 4 * v38), (const void *)(*((void *)cf + 5) + 4 * (int)v149), 4 * ((int)v147 - (int)v149));
      int v86 = v38 - v149;
      goto LABEL_281;
    }
    *(void *)long long buf = 0;
    uint64_t v159 = 0;
    if (v13 > 0xFFFFFFFD) {
      goto LABEL_135;
    }
    unsigned int v31 = 0;
    uint64_t v87 = (-2 - v13);
    uint64_t v88 = a2 + 8;
    while (1)
    {
      unsigned int v137 = *v88;
      if (*v88 < v9 || v137 > v8) {
        goto LABEL_241;
      }
      if (cf[5] > v137) {
        goto LABEL_241;
      }
      unsigned int v139 = cf[6];
      unsigned int v140 = v139 - v137;
      if (v139 < v137) {
        goto LABEL_241;
      }
      int v141 = cf[4];
      if (v141 > -10)
      {
        if (v141 < 0)
        {
          if (v141 >= 0xFFFFFFFE
            || cf[8] != v137
            && (v141 == -3
             || cf[9] != v137
             && (v141 == -4
              || cf[10] != v137
              && (v141 == -5
               || cf[11] != v137
               && (v141 == -6 || cf[12] != v137 && (v141 == -7 || cf[13] != v137 && (v141 == -8 || cf[14] != v137)))))))
          {
            goto LABEL_241;
          }
        }
        else
        {
          BOOL v142 = v12;
          unsigned int v143 = binarySearchMap((uint64_t)cf, *v88);
          unsigned int v144 = cf[9];
          if (v143 < v144 || (BOOL v145 = 0, v146 = cf[8], v143 < v146) && v143 >= v146 + v144 - cf[4]) {
            BOOL v145 = *(_DWORD *)(*((void *)cf + 5) + 4 * v143) == v137;
          }
          if (v145 == (CFGetTypeID(cf) == v142[116]))
          {
            uint64_t v12 = v142;
            goto LABEL_241;
          }
          unsigned int v137 = *v88;
          uint64_t v12 = v142;
        }
      }
      else if (((*(_DWORD *)(*((void *)cf + 5) + 4 * (v140 >> 5)) >> v140) & 1) == 0)
      {
        goto LABEL_241;
      }
      *(_DWORD *)&buf[4 * v31++] = v137;
LABEL_241:
      ++v88;
      if (!--v87) {
        goto LABEL_136;
      }
    }
  }
  uint64_t v75 = (-2 - v14);
  if (v14 > 0xFFFFFFFD)
  {
    int v76 = 0;
    goto LABEL_217;
  }
  int v76 = 0;
  uint64_t v77 = cf + 8;
  int v156 = -2 - v14;
  do
  {
    unsigned int v114 = *v77;
    if (*v77 < v9 || v114 > v8) {
      goto LABEL_183;
    }
    if (a2[5] <= v114)
    {
      unsigned int v116 = a2[6];
      unsigned int v117 = v116 - v114;
      if (v116 >= v114)
      {
        int v118 = a2[4];
        if (v118 > -10)
        {
          if (v118 < 0)
          {
            if (v118 < 0xFFFFFFFE
              && (a2[8] == v114
               || v118 != -3
               && (a2[9] == v114
                || v118 != -4
                && (a2[10] == v114
                 || v118 != -5
                 && (a2[11] == v114
                  || v118 != -6 && (a2[12] == v114 || v118 != -7 && (a2[13] == v114 || v118 != -8 && a2[14] == v114)))))))
            {
              goto LABEL_183;
            }
          }
          else
          {
            unsigned int v119 = binarySearchMap((uint64_t)a2, *v77);
            unsigned int v120 = a2[9];
            if (v119 < v120 || (BOOL v121 = 0, v122 = a2[8], v119 < v122) && v119 >= v122 + v120 - a2[4]) {
              BOOL v121 = *(_DWORD *)(*((void *)a2 + 5) + 4 * v119) == v114;
            }
            if (v121 != (CFGetTypeID(a2) == __kCIIndexSetInvertedTypeID))
            {
              unsigned int v114 = *v77;
LABEL_183:
              cf[v76++ + 8] = v114;
            }
          }
        }
        else if ((*(_DWORD *)(*((void *)a2 + 5) + 4 * (v117 >> 5)) >> v117))
        {
          goto LABEL_183;
        }
      }
    }
    ++v77;
    --v75;
  }
  while (v75);
  int v14 = cf[4];
  LODWORD(v75) = v156;
LABEL_217:
  cf[4] = v14 + v75 - v76;
}

uint64_t db_string_table_unlock(_DWORD *a1)
{
  if (*a1 != 1685287992)
  {
    uint64_t v2 = __si_assert_copy_extra_329();
    unsigned int v3 = v2;
    if (v2) {
      unsigned int v4 = v2;
    }
    else {
      unsigned int v4 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 486, v4);
    free(v3);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  return db2_string_table_unlock((uint64_t)a1);
}

uint64_t setDocumentAttributes(uint64_t a1, uint64_t a2, const void *a3, int a4, const void *a5, uint64_t a6, int a7, const __CFDictionary *a8, float a9, const void *a10, unint64_t a11, uint64_t *a12, unsigned int a13, uint64_t a14, uint64_t (*a15)(uint64_t), uint64_t a16, unsigned int a17, int a18, int a19, int a20,unsigned __int8 a21,uint64_t a22)
{
  uint64_t v240 = *MEMORY[0x1E4F143B8];
  uint64_t v212 = 0;
  long long v239 = 0u;
  long long v238 = 0u;
  long long v237 = 0u;
  long long v236 = 0u;
  long long v235 = 0u;
  long long v234 = 0u;
  long long v233 = 0u;
  long long v232 = 0u;
  long long v231 = 0u;
  long long v230 = 0u;
  long long v229 = 0u;
  long long v228 = 0u;
  uint64_t v227 = 766030772;
  if (!*(unsigned char *)(a1 + 8))
  {
    bzero(v224, 0x400uLL);
    if ((setDocumentAttributes__COUNT_ & 1) == 0)
    {
      setDocumentAttributes__COUNT_ = 1;
      int v27 = *__error();
      uint64_t v28 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        int v63 = fcntl(*(_DWORD *)(a1 + 64), 50, v224);
        if (LOBYTE(v224[0])) {
          BOOL v64 = v63 < 0;
        }
        else {
          BOOL v64 = 1;
        }
        *(_DWORD *)BOOL v213 = 136315906;
        *(void *)&v213[4] = "setDocumentAttributes";
        unsigned int v65 = "";
        if (!v64) {
          unsigned int v65 = (const char *)v224;
        }
        __int16 v214 = 1024;
        int v215 = 4418;
        __int16 v216 = 2080;
        long long v217 = v65;
        __int16 v218 = 2080;
        uint64_t v219 = a1 + 15208;
        _os_log_error_impl(&dword_1BD672000, v28, OS_LOG_TYPE_ERROR, "%s:%d: trying to set to invalid index %s/%s", v213, 0x26u);
      }
      *__error() = v27;
    }
    return 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a1 + 15203))
  {
    bzero(v224, 0x400uLL);
    if ((setDocumentAttributes__COUNT__43 & 1) == 0)
    {
      setDocumentAttributes__COUNT__43 = 1;
      int v24 = *__error();
      int v25 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        int v60 = fcntl(*(_DWORD *)(a1 + 64), 50, v224);
        if (LOBYTE(v224[0])) {
          BOOL v61 = v60 < 0;
        }
        else {
          BOOL v61 = 1;
        }
        *(_DWORD *)BOOL v213 = 136315906;
        *(void *)&v213[4] = "setDocumentAttributes";
        unsigned int v62 = "";
        if (!v61) {
          unsigned int v62 = (const char *)v224;
        }
        __int16 v214 = 1024;
        int v215 = 4424;
        __int16 v216 = 2080;
        long long v217 = v62;
        __int16 v218 = 2080;
        uint64_t v219 = a1 + 15208;
        _os_log_error_impl(&dword_1BD672000, v25, OS_LOG_TYPE_ERROR, "%s:%d: trying to modify read only index %s/%s", v213, 0x26u);
      }
      *__error() = v24;
    }
    return 1;
  }
  if (_indexProgress(a1))
  {
    if (gSILogLevels[0] < 5) {
      return 89;
    }
    int v166 = *__error();
    unsigned int v167 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v167, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v224[0]) = 0;
      _os_log_impl(&dword_1BD672000, v167, OS_LOG_TYPE_DEFAULT, "setDocumentAttributes canceled", (uint8_t *)v224, 2u);
    }
    *__error() = v166;
    return 89;
  }
  int v206 = a7;
  int v209 = a4;
  char v36 = atomic_load((unsigned int *)(a1 + 36));
  if ((v36 & 3) != 0)
  {
    int v182 = *__error();
    int v183 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v183, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v224[0]) = 136315394;
      *(void *)((char *)v224 + 4) = "setDocumentAttributes";
      WORD6(v224[0]) = 1024;
      *(_DWORD *)((char *)v224 + 14) = 4437;
      _os_log_error_impl(&dword_1BD672000, v183, OS_LOG_TYPE_ERROR, "%s:%d: trying to add to read only index", (uint8_t *)v224, 0x12u);
    }
    *__error() = v182;
    unsigned __int8 v184 = __si_assert_copy_extra_2445(0, -1);
    unsigned __int8 v185 = v184;
    BOOL v186 = "";
    if (v184) {
      BOOL v186 = v184;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "JHContentIndex.c", 4438, "0", v186);
    free(v185);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  unsigned int v210 = a10;
  int v207 = a21;
  if ((!a21 || !a2 && !v210) && !*(void *)(a1 + 14392))
  {
    uint64_t v37 = a5;
    uint64_t v38 = a1 + 14720;
    HIDWORD(v40) = qos_class_self() - 9;
    LODWORD(v40) = HIDWORD(v40);
    unsigned int v39 = v40 >> 2;
    if (v39 > 6) {
      signed int v41 = 0;
    }
    else {
      signed int v41 = dword_1BDA87810[v39];
    }
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 14720));
    if (*(void *)(a1 + 14904) || *(_DWORD *)(a1 + 14916) || *(unsigned char *)(a1 + 14932)) {
      goto LABEL_25;
    }
    if (v41 <= 5)
    {
      if (*(void *)(a1 + 16 * v41 + 14784))
      {
LABEL_25:
        db_rwlock_wait(a1 + 14720, v41, 2);
LABEL_26:
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 14720));
        if (!*(void *)(a1 + 14392))
        {
          int v42 = TermUpdateSetCreate((uint64_t (*)())_indexProgress, a1, *(void *)(a1 + 80), *(_DWORD *)(a1 + 68), 32 * *(unsigned __int8 *)(a1 + 46), *(void *)(a1 + 14384), *(unsigned int *)(a1 + 56), *(const void **)(a1 + 4936));
          if (!v42)
          {
            int v71 = *__error();
            uint64_t v72 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
            {
              LODWORD(v224[0]) = 136315394;
              *(void *)((char *)v224 + 4) = "setDocumentAttributes";
              WORD6(v224[0]) = 1024;
              *(_DWORD *)((char *)v224 + 14) = 4450;
              _os_log_error_impl(&dword_1BD672000, v72, OS_LOG_TYPE_ERROR, "%s:%d: TermUpdateSetCreate failed", (uint8_t *)v224, 0x12u);
            }
            *__error() = v71;
            db_write_unlock(v38);
            return 12;
          }
          if (*(unsigned char *)(a1 + 15202)) {
            *((void *)v42 + 76) = getPropertyStringCallback;
          }
          *((void *)v42 + 35) = a1 + 14184;
          __dmb(0xBu);
          *(void *)(a1 + 14392) = v42;
        }
        pthread_mutex_lock((pthread_mutex_t *)(a1 + 14720));
        *(_DWORD *)(a1 + 14924) = 0;
        int v43 = *(pthread_override_s **)(a1 + 14896);
        *(void *)(a1 + 14904) = 0;
        *(void *)(a1 + 14896) = 0;
        char v44 = *(_DWORD *)(a1 + 14916) != 0;
        *(unsigned char *)(a1 + 14932) = 0;
        db_rwlock_wakeup(a1 + 14720, v44, 0);
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 14720));
        a5 = v37;
        if (v43) {
          pthread_override_qos_class_end_np(v43);
        }
        goto LABEL_33;
      }
      uint64_t v105 = v41 - 1;
      int v106 = (uint64_t *)(a1 + 16 * v41 + 14800);
      while (v105 != 4)
      {
        uint64_t v107 = *v106;
        v106 += 2;
        ++v105;
        if (v107)
        {
          if (v105 <= 4) {
            goto LABEL_25;
          }
          break;
        }
      }
    }
    *(void *)(a1 + 14904) = pthread_self();
    goto LABEL_26;
  }
LABEL_33:
  if (__THREAD_SLOT_KEY)
  {
    unsigned int v45 = pthread_getspecific(__THREAD_SLOT_KEY);
    if (v45) {
      goto LABEL_35;
    }
  }
  else
  {
    makeThreadId();
    unsigned int v45 = pthread_getspecific(__THREAD_SLOT_KEY);
    if (v45)
    {
LABEL_35:
      if ((unint64_t)v45 < 0x801) {
        goto LABEL_36;
      }
    }
  }
  makeThreadId();
  unsigned int v45 = pthread_getspecific(__THREAD_SLOT_KEY);
LABEL_36:
  long long v205 = (unsigned char *)(a1 + 14716);
  uint64_t v46 = (uint64_t)v45 - 1;
  HIDWORD(v48) = qos_class_self() - 9;
  LODWORD(v48) = HIDWORD(v48);
  unsigned int v47 = v48 >> 2;
  if (v47 > 6) {
    signed int v49 = 0;
  }
  else {
    signed int v49 = dword_1BDA87810[v47];
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 14504));
  if (*(void *)(a1 + 14688) || *(_DWORD *)(a1 + 14700) || *v205) {
    goto LABEL_42;
  }
  if (v49 <= 5)
  {
    if (*(void *)(a1 + 16 * v49 + 14568))
    {
LABEL_42:
      db_rwlock_wait(a1 + 14504, v49, 2);
      goto LABEL_43;
    }
    uint64_t v68 = v49 - 1;
    int v69 = (uint64_t *)(a1 + 16 * v49 + 14584);
    while (v68 != 4)
    {
      uint64_t v70 = *v69;
      v69 += 2;
      ++v68;
      if (v70)
      {
        if (v68 <= 4) {
          goto LABEL_42;
        }
        break;
      }
    }
  }
  *(void *)(a1 + 14688) = pthread_self();
LABEL_43:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 14504));
  uint64_t v50 = v46;
  CIOnThreadCleanUpPush(v46, (uint64_t)si_rwlock_wrunlock_2795, a1 + 14504);
  if ((indexMarkDirty(a1) & 1) == 0)
  {
    int v54 = *__error();
    unsigned int v55 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v224[0]) = 136315394;
      *(void *)((char *)v224 + 4) = "setDocumentAttributes";
      WORD6(v224[0]) = 1024;
      *(_DWORD *)((char *)v224 + 14) = 4477;
      _os_log_error_impl(&dword_1BD672000, v55, OS_LOG_TYPE_ERROR, "%s:%d: indexMarkDirty failed", (uint8_t *)v224, 0x12u);
    }
    *__error() = v54;
    CIOnThreadCleanUpPop(v50);
    return 22;
  }
  unsigned int v51 = a13;
  if (!a2 && !v210)
  {
    CIOnThreadCleanUpPop(v50);
    unsigned int v52 = *(void **)(a1 + 14392);
    switch(a13)
    {
      case 0u:
        int v53 = v52 + 16;
        goto LABEL_92;
      case 1u:
        int v53 = v52 + 21;
        goto LABEL_92;
      case 2u:
        int v53 = v52 + 18;
        goto LABEL_92;
      case 3u:
        int v53 = v52 + 15;
        goto LABEL_92;
      case 6u:
        int v53 = v52 + 17;
        goto LABEL_92;
      case 7u:
        int v53 = v52 + 24;
        goto LABEL_92;
      case 9u:
        int v53 = v52 + 25;
        goto LABEL_92;
      case 0xAu:
        int v53 = v52 + 26;
        goto LABEL_92;
      case 0xBu:
        int v53 = v52 + 27;
LABEL_92:
        ++*v53;
        break;
      default:
        break;
    }
    uint64_t v26 = 0;
    if (a12) {
      *a12 = 0;
    }
    return v26;
  }
  uint64_t v198 = a22;
  int v195 = a19;
  int v194 = a18;
  unsigned int v199 = a17;
  uint64_t v56 = a11;
  CFDictionaryRef v208 = a8;
  long long v203 = a5;
  unint64_t v204 = a11;
  uint64_t v196 = a6;
  uint64_t v200 = a12;
  int v193 = a20;
  uint64_t v202 = a13;
  if (a11)
  {
    unint64_t v57 = *(void *)(a1 + 80);
    if (a11 <= v57 || v57 + *(unsigned int *)(a1 + 68) <= a11)
    {
      LODWORD(v201) = 0;
    }
    else
    {
      uint64_t v58 = *(void *)(*(void *)(a1 + 14408) + 8 * (a11 - v57));
      if (v58) {
        BOOL v59 = v58 == a6;
      }
      else {
        BOOL v59 = 1;
      }
      if (v59)
      {
        LODWORD(v201) = 0;
      }
      else
      {
        uint64_t v201 = *(void *)(*(void *)(a1 + 14408) + 8 * (a11 - v57));
        bzero(v224, 0x400uLL);
        uint64_t v56 = a11;
        if (setDocumentAttributes__COUNT__45 >= 1)
        {
          --setDocumentAttributes__COUNT__45;
          int v73 = *__error();
          unsigned int v74 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
          {
            int v168 = fcntl(*(_DWORD *)(a1 + 64), 50, v224);
            if (LOBYTE(v224[0])) {
              BOOL v169 = v168 < 0;
            }
            else {
              BOOL v169 = 1;
            }
            int v170 = *(_DWORD *)(a1 + 80);
            unint64_t v171 = "";
            if (!v169) {
              unint64_t v171 = (const char *)v224;
            }
            *(_DWORD *)BOOL v213 = 136316418;
            *(void *)&v213[4] = "setDocumentAttributes";
            __int16 v214 = 1024;
            int v215 = 4499;
            __int16 v216 = 2080;
            long long v217 = v171;
            __int16 v218 = 2048;
            uint64_t v219 = a6;
            __int16 v220 = 1024;
            int v221 = v204 - v170;
            __int16 v222 = 2048;
            uint64_t v223 = v201;
            _os_log_error_impl(&dword_1BD672000, v74, OS_LOG_TYPE_ERROR, "%s:%d: %s setDocumentAttributes error - bad oid/docid mapping oid: %lld, docId: %d, old oid: %lld ", v213, 0x36u);
          }
          *__error() = v73;
          a8 = v208;
          uint64_t v56 = v204;
        }
        LODWORD(v201) = -3;
      }
      unsigned int v51 = v202;
    }
    unsigned int v67 = v210;
    if (v51 == 8)
    {
      uint64_t v212 = v56;
      char v66 = 1;
    }
    else
    {
      char v66 = 0;
    }
  }
  else
  {
    LODWORD(v201) = 0;
    char v66 = 0;
    unsigned int v67 = v210;
  }
  uint64_t v191 = a16;
  uint64_t v192 = a15;
  uint64_t v197 = a14;
  if (v67)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    CFTypeID v76 = CFGetTypeID(v67);
    if (a8)
    {
      if (TypeID == v76)
      {
        CFTypeID v77 = CFDictionaryGetTypeID();
        if (v77 == CFGetTypeID(a8)) {
          goto LABEL_111;
        }
      }
    }
  }
  if (v209 && (v209 != a2 || memcmp(v203, a3, 8 * a2)))
  {
    if (!v67)
    {
LABEL_113:
      uint64_t v212 = v204;
      if (v204)
      {
        *(void *)BOOL v213 = 0;
        goto LABEL_117;
      }
      goto LABEL_115;
    }
LABEL_111:
    if (CFDictionaryGetValue((CFDictionaryRef)v67, 0))
    {
      int v78 = 1;
      goto LABEL_116;
    }
    goto LABEL_113;
  }
LABEL_115:
  int v78 = 0;
LABEL_116:
  *(void *)BOOL v213 = 0;
  if (v66)
  {
LABEL_117:
    uint64_t Count = CIOnThreadCleanUpPop(v50);
    if (v67)
    {
      uint64_t Count = CFDictionaryGetCount((CFDictionaryRef)v67);
      uint64_t v80 = Count;
    }
    else
    {
      uint64_t v80 = 0;
    }
    CFDictionaryRef v87 = v208;
    int v190 = &v187;
    MEMORY[0x1F4188790](Count);
    int8x8_t v89 = (const void **)((char *)&v187 - v88);
    bzero((char *)&v187 - v88, v90);
    if (v67) {
      CFDictionaryGetKeysAndValues((CFDictionaryRef)v67, v89, 0);
    }
    if (v80 < 1)
    {
      BOOL v92 = 0;
      unsigned __int8 v99 = 0;
      goto LABEL_161;
    }
    if (v87)
    {
      char v188 = a3;
      uint64_t v189 = a2;
      uint64_t v91 = 0;
      BOOL v92 = 1;
      while (1)
      {
        int v93 = v89[v91];
        if ((v93 & 0x80000000) == 0)
        {
          CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)v67, v93);
          CFTypeID v95 = CFGetTypeID(Value);
          CFTypeID v96 = CFNullGetTypeID();
          unsigned int v97 = CFDictionaryGetValue(v87, v89[v91]);
          if (v95 == v96)
          {
            CFDictionaryRef v87 = v208;
            unsigned int v67 = v210;
            if (v97) {
              goto LABEL_141;
            }
          }
          else
          {
            if (!v97)
            {
              unsigned __int8 v99 = 1;
              a3 = v188;
              LODWORD(a2) = v189;
              CFDictionaryRef v87 = v208;
              unsigned int v67 = v210;
              goto LABEL_161;
            }
            int v98 = CFEqual(Value, v97);
            CFDictionaryRef v87 = v208;
            unsigned int v67 = v210;
            if (!v98)
            {
LABEL_141:
              unsigned __int8 v99 = 1;
LABEL_150:
              a3 = v188;
              LODWORD(a2) = v189;
              goto LABEL_161;
            }
          }
        }
        BOOL v92 = ++v91 < v80;
        if (v80 == v91)
        {
          unsigned __int8 v99 = 0;
          goto LABEL_150;
        }
      }
    }
    uint64_t v101 = 0;
    BOOL v92 = 1;
    do
    {
      unsigned int v102 = v89[v101];
      if ((v102 & 0x80000000) == 0)
      {
        int v103 = CFDictionaryGetValue((CFDictionaryRef)v67, v102);
        CFTypeID v104 = CFGetTypeID(v103);
        BOOL v59 = v104 == CFNullGetTypeID();
        CFDictionaryRef v87 = v208;
        if (!v59)
        {
          unsigned __int8 v99 = 1;
          goto LABEL_161;
        }
      }
      BOOL v92 = ++v101 < v80;
    }
    while (v80 != v101);
    unsigned __int8 v99 = 0;
LABEL_161:
    *(void *)&v224[0] = v87;
    *((void *)&v224[0] + 1) = v67;
    v224[1] = 0uLL;
    uint64_t v225 = v197;
    uint64_t v226 = v99;
    int v108 = v206;
    uint64_t v109 = v204;
    if (v67)
    {
      if (v87)
      {
        CFDictionaryApplyFunction((CFDictionaryRef)v67, (CFDictionaryApplierFunction)attributeMergeInfoApplier, v224);
        CFDictionaryApplyFunction(v87, (CFDictionaryApplierFunction)attributeMergeInfoRemoveApplier, v224);
        if (v92)
        {
          unsigned int v110 = (void (__cdecl *)(const void *, const void *, void *))attributeMergeInfoWildcardApplier;
LABEL_167:
          CFDictionaryApplyFunction(v87, v110, v224);
        }
      }
      else if (v202 == 8)
      {
        *((void *)&v224[1] + 1) = CFRetain(v67);
      }
    }
    else if (v87)
    {
      unsigned int v110 = (void (__cdecl *)(const void *, const void *, void *))attributeMergeInfoRemoveApplier;
      goto LABEL_167;
    }
    int v111 = v209;
    uint64_t v26 = v201;
    if (v224[1] != 0 || v209 | a2 && (v209 != a2 || memcmp(v203, a3, 8 * a2)))
    {
      if (v111 == a2)
      {
        if (!memcmp(v203, a3, 8 * a2)) {
          int v111 = 0;
        }
        else {
          int v111 = a2;
        }
        LODWORD(a2) = v111;
      }
      if (v207)
      {
        create_termupdateset(a1, (char **)v213, (uint64_t)&v227);
        uint64_t v113 = v212;
        uint64_t v112 = *(void *)v213;
        long long v114 = v224[1];
        char v115 = atomic_load((unsigned int *)(a1 + 36));
        TermUpdateSetUpdateDocumentInfo(v112, v199, v113, *((const __CFDictionary **)&v114 + 1), (const __CFDictionary *)v114, v202, 0, 0, 0, 0, (v115 & 8) != 0);
        unsigned int updated = mergeIntoUpdateSet(a1, v194, v195, &v212, v108, v109, v193, 0, a9, a2, (uint64_t)a3, v196, v111, (uint64_t)v203, v200, *(uint64_t *)v213, 0, v192, v191,
                    v198);
        if (updated) {
          uint64_t v26 = updated;
        }
        else {
          uint64_t v26 = v26;
        }
      }
      else
      {
        uint64_t v117 = v212;
        if (!v212)
        {
          uint64_t v117 = _getAndSetDocId(a1, v196, v108, v194, v195, &v211, 0, a9);
          uint64_t v212 = v117;
        }
        db_read_lock(a1 + 14720);
        uint64_t v118 = *(void *)(a1 + 14392);
        *(void *)BOOL v213 = v118;
        long long v119 = v224[1];
        char v120 = atomic_load((unsigned int *)(a1 + 36));
        TermUpdateSetUpdateDocumentInfo(v118, v199, v117, *((const __CFDictionary **)&v119 + 1), (const __CFDictionary *)v119, v202, (uint64_t)a3, a2, (uint64_t)v203, v111, (v120 & 8) != 0);
        BOOL v121 = v205;
        if (v205[948]) {
          BOOL v122 = 1;
        }
        else {
          BOOL v122 = index_termUpdateSetShouldFlush(a1, *(void *)(a1 + 14392), v193) != 0;
        }
        uint64_t v123 = v198;
        unint64_t v124 = v204;
        v121[948] = v122;
        if (v123) {
          (*(void (**)(uint64_t, unint64_t))(v123 + 16))(v123, v124);
        }
        db_read_unlock(a1 + 14720);
        *uint64_t v200 = 0;
      }
      if (*(void *)&v224[1]) {
        CFRelease(*(CFTypeRef *)&v224[1]);
      }
      if (*((void *)&v224[1] + 1)) {
        CFRelease(*((CFTypeRef *)&v224[1] + 1));
      }
    }
    if (!v26) {
      return v26;
    }
LABEL_254:
    int v163 = *__error();
    int v164 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v164, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v224[0]) = 136315650;
      *(void *)((char *)v224 + 4) = "setDocumentAttributes";
      WORD6(v224[0]) = 1024;
      *(_DWORD *)((char *)v224 + 14) = 4710;
      WORD1(v224[1]) = 1024;
      DWORD1(v224[1]) = v26;
      _os_log_error_impl(&dword_1BD672000, v164, OS_LOG_TYPE_ERROR, "%s:%d: Got error %d", (uint8_t *)v224, 0x18u);
    }
    *__error() = v163;
    return v26;
  }
  if ((v207 & 1) == 0 && (*(_DWORD *)(a1 + 68) + 1) >= *(_DWORD *)(a1 + 72))
  {
    uint64_t v81 = indexGrowDocumentPayloads(a1, v192, v191);
    if (v81)
    {
      uint64_t v82 = v81;
      CIOnThreadCleanUpPop(v50);
      return v82;
    }
  }
  unint64_t v83 = v204;
  if (v204)
  {
    unint64_t v84 = *(void *)(a1 + 80);
    int v85 = v209;
    LOBYTE(v86) = v206;
    if (v204 > v84 && v84 + *(unsigned int *)(a1 + 68) > v204)
    {
      if (!v206)
      {
        if (*(unsigned char *)(a1 + 45)) {
          LOBYTE(v86) = *(unsigned char *)(*(void *)(a1 + 14432) + (v204 - v84));
        }
        else {
          LODWORD(v86) = (*(_DWORD *)(*(void *)(a1 + 14432) + 4 * ((v204 - v84) / 5uLL)) >> (6 * (((int)v204 - (int)v84) % 5u))) & 0x3F;
        }
      }
      if (*(unsigned char *)(a1 + 45))
      {
        *(unsigned char *)(*(void *)(a1 + 14432) + (v204 - v84)) = 0;
        uint64_t v125 = *(void *)(a1 + 14440);
        if (v125) {
          *(unsigned char *)(v125 + (v83 - *(_DWORD *)(a1 + 80)) / (unint64_t)(32 * *MEMORY[0x1E4F14B00])) |= 1 << (((v83 - *(_DWORD *)(a1 + 80)) / (unint64_t)(4 * *MEMORY[0x1E4F14B00])) & 7);
        }
LABEL_212:
        atomic_fetch_add((atomic_uint *volatile)(a1 + 16), 1u);
        unsigned int v100 = v83 - *(_DWORD *)(a1 + 80);
        goto LABEL_213;
      }
      unsigned int v126 = v204 - v84;
      unint64_t v127 = (v204 - v84) / 5uLL;
      unsigned int v128 = 6 * (v126 % 5);
      uint64_t v129 = *(void *)(a1 + 14432);
      int v130 = *(_DWORD *)(v129 + 4 * v127) & ~(63 << (6 * (v126 % 5)));
      uint64_t v131 = *(void *)(a1 + 14440);
      if (v131)
      {
        uint64_t v132 = (uint64_t *)MEMORY[0x1E4F14B00];
        unint64_t v133 = v127 / (8 * *MEMORY[0x1E4F14B00]);
        uint64_t v134 = (v127 / *MEMORY[0x1E4F14B00]) & 7;
        *(unsigned char *)(v131 + v133) |= 1 << v134;
        if (*(unsigned char *)(*(void *)(a1 + 14440) + v133))
        {
          uint64_t v135 = *v132;
          uint64_t v136 = v134 | (8 * v133);
          if (v135 * v136 > v127)
          {
            uint64_t v180 = __si_assert_copy_extra_2445(0, -1);
            int v177 = v180;
            uint64_t v178 = "";
            if (v180) {
              uint64_t v178 = v180;
            }
            float v179 = "vm_page_size*(gslot*8+bslot) <=slot";
          }
          else
          {
            if (v135 * (unint64_t)(v136 + 1) > v127)
            {
              uint64_t v129 = *(void *)(a1 + 14432);
              int v137 = *(unsigned __int8 *)(a1 + 45);
              *(_DWORD *)(v129 + 4 * v127) = v130;
              unint64_t v138 = v83 - *(void *)(a1 + 80);
              if (v137)
              {
                int v139 = *(unsigned __int8 *)(v129 + v138);
                goto LABEL_211;
              }
              unint64_t v127 = v138 / 5uLL;
              unsigned int v128 = 6 * (v138 % 5);
LABEL_210:
              int v139 = (*(_DWORD *)(v129 + 4 * v127) >> v128) & 0x3F;
LABEL_211:
              if (v139)
              {
                unint64_t v172 = __si_assert_copy_extra_2445(0, -1);
                unint64_t v173 = v172;
                unint64_t v174 = "";
                if (v172) {
                  unint64_t v174 = v172;
                }
                __message_assert("%s:%u: failed assertion '%s' %s ", "JHContentIndex.c", 4544, "((cindex)->coreSpotlight?({ ((uint8_t *)(cindex)->groups)[((uint32_t)(oldDocID-cindex->base))]; }):({ "
                  "uint32_t __where=(uint32_t)((uint32_t)(oldDocID-cindex->base)); uint32_t __slot = __where/5; uint32_t "
                  "__shift= (__where-(__slot*5))*6; uint32_t __word = ((uint32_t)((cindex)->groups[__slot])); (__word >> "
                  "__shift) & 0x3F ; }))==(inval&0x3F)",
                  v174);
                free(v173);
                if (__valid_fs(-1)) {
                  uint64_t v175 = 2989;
                }
                else {
                  uint64_t v175 = 3072;
                }
                *(_DWORD *)uint64_t v175 = -559038737;
                abort();
              }
              goto LABEL_212;
            }
            unsigned int v181 = __si_assert_copy_extra_2445(0, -1);
            int v177 = v181;
            uint64_t v178 = "";
            if (v181) {
              uint64_t v178 = v181;
            }
            float v179 = "vm_page_size*(gslot*8+bslot+1) >slot";
          }
        }
        else
        {
          unint64_t v176 = __si_assert_copy_extra_2445(0, -1);
          int v177 = v176;
          uint64_t v178 = "";
          if (v176) {
            uint64_t v178 = v176;
          }
          float v179 = "(cindex)->groupMap[gslot]";
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "JHContentIndex.c", 4544, v179, v178);
        free(v177);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      *(_DWORD *)(v129 + 4 * v127) = v130;
      goto LABEL_210;
    }
    unsigned int v100 = 0;
  }
  else
  {
    unsigned int v100 = 0;
    int v85 = v209;
    LOBYTE(v86) = v206;
  }
LABEL_213:
  CIOnThreadCleanUpPop(v50);
  uint64_t v140 = v204;
  if (v208
    && v67
    && (v141 = v86, CFTypeID v86 = CFDictionaryGetTypeID(), v59 = v86 == CFGetTypeID(v67), LOBYTE(v86) = v141, v140 = v204, v59))
  {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v208);
    *(void *)&v224[0] = v208;
    CFMutableDictionaryRef v143 = MutableCopy;
    *((void *)&v224[0] + 1) = v197;
    *(void *)&v224[1] = MutableCopy;
    CFDictionaryApplyFunction((CFDictionaryRef)v67, (CFDictionaryApplierFunction)mergeAttributesForNewEntryApplier, v224);
    if (v207)
    {
      create_termupdateset(a1, (char **)v213, (uint64_t)&v227);
      if (v212 <= 1) {
        uint64_t v144 = 1;
      }
      else {
        uint64_t v144 = v212;
      }
      char v145 = atomic_load((unsigned int *)(a1 + 36));
      TermUpdateSetAddDocumentInfo(*(uint64_t *)v213, v199, v144, v100, v143, 0, 0, v202, (v145 & 8) != 0);
      unsigned int v146 = mergeIntoUpdateSet(a1, v194, v195, &v212, (char)v86, v204, v193, 1, a9, a2, (uint64_t)a3, v196, v85, (uint64_t)v203, v200, *(uint64_t *)v213, v100, v192, v191,
               v198);
      if (v146) {
        uint64_t v26 = v146;
      }
      else {
        uint64_t v26 = v201;
      }
    }
    else
    {
      int v156 = v143;
      uint64_t v157 = v212;
      if (!v212)
      {
        uint64_t v157 = _getAndSetDocId(a1, v196, (char)v86, v194, v195, &v211, 0, a9);
        uint64_t v212 = v157;
      }
      db_read_lock(a1 + 14720);
      uint64_t v158 = *(void *)(a1 + 14392);
      *(void *)BOOL v213 = v158;
      uint64_t v159 = v157;
      if (!v78) {
        uint64_t v159 = 1;
      }
      if (v157) {
        uint64_t v160 = v159;
      }
      else {
        uint64_t v160 = 1;
      }
      char v161 = atomic_load((unsigned int *)(a1 + 36));
      CFMutableDictionaryRef v143 = v156;
      TermUpdateSetAddDocumentInfo(v158, v199, v160, v100, v156, (uint64_t)a3, a2, v202, (v161 & 8) != 0);
      if (v205[948]) {
        BOOL v162 = 1;
      }
      else {
        BOOL v162 = index_termUpdateSetShouldFlush(a1, *(void *)(a1 + 14392), v193) != 0;
      }
      v205[948] = v162;
      db_read_unlock(a1 + 14720);
      if (v200 && v212 && ((v78 ^ 1) & 1) == 0) {
        *uint64_t v200 = *(void *)(a1 + 80) + v212;
      }
      uint64_t v26 = v201;
    }
    CFRelease(v143);
    if (v26) {
      goto LABEL_254;
    }
  }
  else
  {
    if (v207)
    {
      create_termupdateset(a1, (char **)v213, (uint64_t)&v227);
      uint64_t v212 = 1;
      uint64_t v147 = *(void *)v213;
      char v148 = atomic_load((unsigned int *)(a1 + 36));
      TermUpdateSetAddDocumentInfo(v147, v199, 1, v100, v67, 0, 0, v202, (v148 & 8) != 0);
      unsigned int v149 = mergeIntoUpdateSet(a1, v194, v195, &v212, (char)v86, v140, v193, 1, a9, a2, (uint64_t)a3, v196, v85, (uint64_t)v203, v200, *(uint64_t *)v213, v100, v192, v191,
               v198);
      if (v149) {
        uint64_t v26 = v149;
      }
      else {
        uint64_t v26 = v201;
      }
    }
    else
    {
      LOBYTE(v224[0]) = 0;
      uint64_t v212 = _getAndSetDocId(a1, v196, (char)v86, v194, v195, v224, 0, a9);
      db_read_lock(a1 + 14720);
      uint64_t v150 = *(void *)(a1 + 14392);
      *(void *)BOOL v213 = v150;
      char v151 = atomic_load((unsigned int *)(a1 + 36));
      TermUpdateSetAddDocumentInfo(v150, v199, v212, v100, v67, (uint64_t)a3, a2, v202, (v151 & 8) != 0);
      uint64_t v26 = v201;
      if (v205[948]) {
        BOOL v152 = 1;
      }
      else {
        BOOL v152 = index_termUpdateSetShouldFlush(a1, *(void *)(a1 + 14392), v193) != 0;
      }
      uint64_t v153 = v198;
      v205[948] = v152;
      if (v153) {
        (*(void (**)(uint64_t, uint64_t))(v153 + 16))(v153, *(void *)(a1 + 80) + v212);
      }
      db_read_unlock(a1 + 14720);
      *uint64_t v200 = *(void *)(a1 + 80) + v212;
    }
    if (v26)
    {
      int v154 = *__error();
      unsigned int v155 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v155, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v224[0]) = 136315650;
        *(void *)((char *)v224 + 4) = "setDocumentAttributes";
        WORD6(v224[0]) = 1024;
        *(_DWORD *)((char *)v224 + 14) = 4618;
        WORD1(v224[1]) = 1024;
        DWORD1(v224[1]) = v26;
        _os_log_error_impl(&dword_1BD672000, v155, OS_LOG_TYPE_ERROR, "%s:%d: Got error %d", (uint8_t *)v224, 0x18u);
      }
      *__error() = v154;
      goto LABEL_254;
    }
  }
  return v26;
}

uint64_t poswriteunlock(pthread_rwlock_t *a1)
{
  uint64_t result = pthread_rwlock_unlock(a1);
  if (result)
  {
    uint64_t v2 = __si_assert_copy_extra_329();
    unsigned int v3 = v2;
    unsigned int v4 = "";
    if (v2) {
      unsigned int v4 = v2;
    }
    __message_assert(v2, "poslock.c", 28, "result==0", v4);
    free(v3);
    if (__valid_fs(-1)) {
      uint64_t v5 = 2989;
    }
    else {
      uint64_t v5 = 3072;
    }
    *(_DWORD *)uint64_t v5 = -559038737;
    abort();
  }
  return result;
}

uint64_t indexMarkDirty(uint64_t a1)
{
  *(void *)&v27[5] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned char *)(a1 + 14932);
  if (*(unsigned char *)(a1 + 15203))
  {
    if (indexMarkDirty__COUNT_) {
      return 0;
    }
    indexMarkDirty__COUNT_ = 1;
    int v8 = *__error();
    unsigned int v9 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v22 = 136315650;
      int v23 = "indexMarkDirty";
      __int16 v24 = 1024;
      int v25 = 2651;
      __int16 v26 = 2080;
      *(void *)int v27 = a1 + 15208;
      _os_log_error_impl(&dword_1BD672000, v9, OS_LOG_TYPE_ERROR, "%s:%d: trying to modify read only index %s", (uint8_t *)&v22, 0x1Cu);
    }
    uint64_t v3 = 0;
    *__error() = v8;
    return v3;
  }
  if (!*(unsigned char *)(a1 + 8)) {
    return 1;
  }
  if (!atomic_load((unsigned int *)(a1 + 32))) {
    return 1;
  }
  HIDWORD(v6) = qos_class_self() - 9;
  LODWORD(v6) = HIDWORD(v6);
  unsigned int v5 = v6 >> 2;
  if (v5 > 6) {
    signed int v7 = 0;
  }
  else {
    signed int v7 = dword_1BDA87810[v5];
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 14720));
  if (*(void *)(a1 + 14904) || *(_DWORD *)(a1 + 14916) || *v2) {
    goto LABEL_16;
  }
  if (v7 <= 5)
  {
    if (*(void *)(a1 + 16 * v7 + 14784))
    {
LABEL_16:
      db_rwlock_wait(a1 + 14720, v7, 2);
      goto LABEL_17;
    }
    uint64_t v18 = v7 - 1;
    int v19 = (uint64_t *)(a1 + 16 * v7 + 14800);
    while (v18 != 4)
    {
      uint64_t v20 = *v19;
      v19 += 2;
      ++v18;
      if (v20)
      {
        if (v18 <= 4) {
          goto LABEL_16;
        }
        break;
      }
    }
  }
  *(void *)(a1 + 14904) = pthread_self();
LABEL_17:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 14720));
  unsigned int v10 = atomic_load((unsigned int *)(a1 + 32));
  if (v10 == -804450864 || (unsigned int v11 = atomic_load((unsigned int *)(a1 + 15192))) != 0)
  {
    int v12 = *__error();
    uint64_t v13 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      unsigned int v21 = atomic_load((unsigned int *)(a1 + 15192));
      int v22 = 136315906;
      int v23 = "indexMarkDirty";
      __int16 v24 = 1024;
      int v25 = 2663;
      __int16 v26 = 1024;
      v27[0] = v10;
      LOWORD(v27[1]) = 1024;
      *(_DWORD *)((char *)&v27[1] + 2) = v21;
      _os_log_error_impl(&dword_1BD672000, v13, OS_LOG_TYPE_ERROR, "%s:%d: indexMarkDirty failed - state:%x closing:%d", (uint8_t *)&v22, 0x1Eu);
    }
    uint64_t v3 = 0;
    *__error() = v12;
  }
  else
  {
    uint64_t v17 = *(void *)(a1 + 15184);
    if (v17 && (*(unsigned int (**)(void))(v17 + 16))())
    {
      uint64_t v3 = 0;
    }
    else
    {
      indexWriteShutdowState(a1);
      uint64_t v3 = 1;
    }
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 14720));
  *(_DWORD *)(a1 + 14924) = 0;
  int v14 = *(pthread_override_s **)(a1 + 14896);
  *(void *)(a1 + 14904) = 0;
  *(void *)(a1 + 14896) = 0;
  char v15 = *(_DWORD *)(a1 + 14916) != 0;
  unsigned char *v2 = 0;
  db_rwlock_wakeup(a1 + 14720, v15, 0);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 14720));
  if (v14) {
    pthread_override_qos_class_end_np(v14);
  }
  return v3;
}

uint64_t _indexProgress(uint64_t a1)
{
  if (!atomic_load((unsigned int *)(a1 + 15192))) {
    return 0;
  }
  double v2 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 15048);
  if (v2 <= 10.0) {
    return 0;
  }
  if (v2 <= 20.0)
  {
    if (gSILogLevels[0] < 5) {
      return 1;
    }
    int v5 = *__error();
    signed int v7 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v8 = 0;
      _os_log_impl(&dword_1BD672000, v7, OS_LOG_TYPE_DEFAULT, "should cancel\n", v8, 2u);
    }
    uint64_t v3 = 1;
LABEL_16:
    *__error() = v5;
    return v3;
  }
  if (gSILogLevels[0] >= 5)
  {
    int v5 = *__error();
    unint64_t v6 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1BD672000, v6, OS_LOG_TYPE_DEFAULT, "should exit\n", buf, 2u);
    }
    uint64_t v3 = 0xFFFFFFFFLL;
    goto LABEL_16;
  }
  return 0xFFFFFFFFLL;
}

char *create_termupdateset(uint64_t a1, char **a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 46)) {
    int v6 = 48;
  }
  else {
    int v6 = 16;
  }
  uint64_t result = TermUpdateSetCreate(0, 0, *(void *)(a1 + 80), *(_DWORD *)(a1 + 68), v6, *(void *)(a1 + 14384), *(unsigned int *)(a1 + 56), *(const void **)(a1 + 4936));
  *a2 = result;
  if (*(unsigned char *)(a1 + 15202))
  {
    *((void *)result + 76) = getPropertyStringCallback;
    uint64_t result = *a2;
  }
  *((void *)result + 35) = a3;
  return result;
}

uint64_t ContentIndexQueryNodeEquals(float *a1, uint64_t a2)
{
  if (a1 == (float *)a2) {
    return 1;
  }
  if (*((_DWORD *)a1 + 2) != *(_DWORD *)(a2 + 8)) {
    return 0;
  }
  unint64_t v4 = *(unsigned int *)a1;
  if (v4 != *(_DWORD *)a2
    || a1[3] != *(float *)(a2 + 12)
    || a1[4] != *(float *)(a2 + 16)
    || *((_DWORD *)a1 + 1) != *(_DWORD *)(a2 + 4))
  {
    return 0;
  }
  if ((int)v4 < 1)
  {
    return 1;
  }
  else
  {
    uint64_t v5 = 0;
    BOOL v6 = 0;
    do
    {
      uint64_t v7 = LODWORD(a1[4 * v5 + 6]);
      if (v7 != *(_DWORD *)(a2 + 16 * v5 + 24)) {
        break;
      }
      if ((int)v7 >= 1)
      {
        uint64_t v8 = *(void *)&a1[4 * v5 + 8];
        uint64_t v9 = *(void *)(a2 + 16 * v5 + 32);
        while (*(_DWORD *)(v8 + 24) == *(_DWORD *)(v9 + 24))
        {
          uint64_t v10 = *(int *)(v8 + 20);
          if (v10 != *(_DWORD *)(v9 + 20)) {
            break;
          }
          int v11 = *(_DWORD *)(v8 + 16);
          if (v11 != *(_DWORD *)(v9 + 16)) {
            break;
          }
          unint64_t v12 = *(unsigned int *)(v8 + 60);
          if (v12 != *(_DWORD *)(v9 + 60)) {
            break;
          }
          if ((v11 & 0x10) != 0)
          {
            int v13 = *(_DWORD *)(v8 + 60) & 3;
            size_t v14 = -1;
            if (v13 != 3)
            {
              uint64_t v15 = (v12 >> 2) & 3;
              if (v15 != 3) {
                size_t v14 = (vector_dimension_vec_sizes_12485[v13] * vector_size_elem_sizes_12484[v15]);
              }
            }
            if (memcmp(*(const void **)v8, *(const void **)v9, v14)) {
              break;
            }
          }
          if ((v11 & 0x600) != 0 && memcmp(*(const void **)v8, *(const void **)v9, 8 * v10)) {
            break;
          }
          if ((v11 & 0x610) == 0 && strcmp(*(const char **)v8, *(const char **)v9)) {
            break;
          }
          unsigned int v16 = *(const char **)(v8 + 8);
          uint64_t v17 = *(const char **)(v9 + 8);
          if (v16 != v17 && (!v16 || !v17 || strcmp(v16, v17))) {
            break;
          }
          v8 += 64;
          v9 += 64;
          if (!--v7) {
            goto LABEL_30;
          }
        }
        return v6;
      }
LABEL_30:
      BOOL v6 = ++v5 >= v4;
    }
    while (v5 != v4);
  }
  return v6;
}

void CITokenizerGetQueryTokensWithOptions(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = v6;
  if (v2)
  {
    int v8 = v4;
    CFStringRef v9 = v3;
    uint64_t v10 = (uint64_t)v2;
    uint64_t v11 = v1;
    unint64_t v12 = v5;
    if (CFStringGetLength(v2))
    {
      v15[0] = v12;
      v15[1] = v7;
      long long v16 = 0u;
      long long v17 = 0u;
      uint64_t v18 = 0;
      bzero(&cf, 0x1810uLL);
      CITokenizerSetLocale(v11, v9, 0);
      _CITokenizerGetTokens(v11, *(void *)(v11 + 8), v10, (uint64_t)&cf, v8 | 0x46u, (uint64_t)_CITokenizerGetQueryTokensStart, (uint64_t)_CITokenizerGetQueryTokens, 0, 0, (void (*)(void, uint64_t, uint64_t))_CITokenizerGetQueryTokensEnd, (uint64_t)v15);
      if (cf) {
        CFRelease(cf);
      }
      if (v14) {
        free(v14);
      }
    }
    else
    {
      v12();
    }
  }
  else
  {
    ((void (*)(void))v5)(0);
  }
}

uint64_t _getPropertySubTokenCallback(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return 0;
}

uint64_t getPropertyStringCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)&v10[1042] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a3 + 74))
  {
    uint64_t v5 = (unsigned __int16 *)result;
    bzero(v10, 0x412uLL);
    __int16 v9 = 513;
    uint64_t v6 = (*(_DWORD *)(a3 + 32) - 1);
    __memcpy_chk();
    uint64_t v8 = 0;
    uint64_t result = utf8_encodestr(v5, 2 * a2, &v10[v6], &v8, 1028);
    if (!result)
    {
      unint64_t v7 = v8 + v6 + 2;
      if (*(unsigned char *)(a3 + 75)) {
        v10[v7++ - 2] = 1;
      }
      if (*(void *)(a3 + 64))
      {
        *(_WORD *)&v10[v7 - 2] = 769;
        v7 += 2;
      }
      return pushPropertyTerm(*(void *)a3, v7, (unsigned __int8 *)&v9, *(void *)(a3 + 8), *(_DWORD *)(a3 + 16), *(_DWORD *)(a3 + 20), 1);
    }
  }
  return result;
}

void _CITokenizerGetTokens(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(void, void *, uint64_t *), void (*a10)(void, uint64_t, uint64_t), uint64_t a11)
{
  uint64_t v11 = MEMORY[0x1F4188790](a1);
  int v221 = v12;
  __int16 v218 = v13;
  uint64_t v15 = v14;
  unsigned int v17 = v16;
  uint64_t v213 = v18;
  CFStringRef v20 = v19;
  uint64_t v22 = v21;
  uint64_t v23 = v11;
  uint64_t v255 = *MEMORY[0x1E4F143B8];
  bzero(v228, 0xC30uLL);
  uint64_t v230 = -1;
  uint64_t v24 = *(void *)(v23 + 8);
  uint64_t v223 = v22;
  uint64_t v224 = v23;
  unsigned int v225 = v17;
  if (v24 != v22) {
    goto LABEL_2;
  }
  if ((v17 & 4) != 0)
  {
    LODWORD(v25) = 1;
  }
  else
  {
    unsigned int v26 = *(_DWORD *)(v23 + 72);
    if (v26 > 0x36)
    {
LABEL_2:
      LODWORD(v25) = 0;
      goto LABEL_7;
    }
    unint64_t v25 = (0x40000000300030uLL >> v26) & 1;
  }
LABEL_7:
  __int16 v214 = a10;
  unsigned int v27 = *(_DWORD *)(v224 + 40);
  uint64_t v240 = 0;
  long long v239 = 0u;
  long long v238 = 0u;
  long long v237 = 0u;
  long long v236 = 0u;
  memset(v235, 0, sizeof(v235));
  long long v234 = 0u;
  long long v233 = 0u;
  bzero(v254, 0x1010uLL);
  bzero(v253, 0x808uLL);
  bzero(&v249, 0x1010uLL);
  bzero(v245, 0x808uLL);
  bzero(v243, 0x808uLL);
  bzero(v242, 0x808uLL);
  int v28 = v25;
  uint64_t v29 = v224;
  CITokenizerStateInit((uint64_t)&v233, v20, v28, (v225 >> 6) & 1);
  if (*(void *)(v224 + 16) == v223) {
    LOBYTE(v240) = 1;
  }
  uint64_t v227 = a11;
  uint64_t v30 = *((void *)&v239 + 1);
  if (!*((void *)&v239 + 1))
  {
    uint64_t v187 = v214;
    if (v225)
    {
      if (v15) {
        v15(0, 0, v227);
      }
      if (v218) {
        v218(0, 0, 0, v227);
      }
    }
    goto LABEL_356;
  }
  __int16 v220 = a9;
  _NLStringTokenizerSetStringWithOptionsAndLanguageID();
  if (v15) {
    v15(v238, v30, v227);
  }
  uint64_t v216 = v30;
  uint64_t v219 = 0;
  unsigned int v31 = &v236;
  __int16 v222 = &v235[1];
  CFAllocatorRef v32 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
  unsigned int v205 = v225 & 0xFFFFFFFE;
  uint64_t v203 = v213 + 4112;
  uint64_t v204 = v213 + 16;
  long long v217 = &v229;
  uint64_t v33 = v245;
  CFAllocatorRef v206 = v32;
  int v207 = &v246;
  uint64_t v202 = (void *)(v213 + 24);
  int v215 = &v250;
  char v211 = &v244;
  uint64_t v212 = &v248;
  unsigned int v210 = &v252;
  CFDictionaryRef v208 = &v251;
  int v209 = &v247;
  uint64_t v34 = 1;
  uint64_t v35 = 4294959088;
  uint64_t v36 = 65293;
  uint64_t v226 = &v236;
LABEL_13:
  while (2)
  {
    while (2)
    {
      while (2)
      {
        uint64_t v37 = *((void *)&v234 + 1);
        while (1)
        {
          uint64_t v38 = v234;
          if (v37 >= (uint64_t)v234)
          {
            uint64_t v67 = *((void *)&v233 + 1);
            uint64_t v68 = v233;
            if (*((uint64_t *)&v233 + 1) >= (uint64_t)v233)
            {
              *((void *)&v233 + 1) = 0;
              if ((v225 & 2) != 0) {
                uint64_t v68 = _NLStringTokenizerTokenize();
              }
              else {
                uint64_t v68 = _NLStringTokenizerTokenizeWithTranscriptions();
              }
              *(void *)&long long v233 = v68;
              uint64_t v34 = 1;
              uint64_t v35 = 4294959088;
              uint64_t v36 = 65293;
              if (!v68)
              {
                if (v219 < v216 && *(void *)(v29 + 8) == v223) {
                  handle_missing_punctuation(v238, v219, v216, v218, v227, 0);
                }
                goto LABEL_334;
              }
              uint64_t v219 = *((void *)&v254[v68 - 1] + 1) + *(void *)&v254[v68 - 1];
              uint64_t v67 = *((void *)&v233 + 1);
              uint64_t v33 = v245;
            }
            uint64_t v69 = v67 + 1;
            uint64_t v70 = v253[v67];
            *((void *)&v233 + 1) = v67 + 1;
            v235[3] = v70;
            _OWORD *v222 = v254[v67];
            if (v235[2] == 1)
            {
              if (*(_WORD *)(v238 + 2 * v235[1]) == 8204) {
                goto LABEL_13;
              }
              if ((_BYTE)v240) {
                goto LABEL_123;
              }
            }
            else if ((_BYTE)v240)
            {
              if (v235[2] > 256) {
                goto LABEL_13;
              }
              goto LABEL_123;
            }
            if (v70 & 1) != 0 || v69 < v68 && (v253[v69])
            {
              if ((v70 & 0x40001000) != 0
                || (unsigned int v71 = *(unsigned __int16 *)(v238 + 2 * v235[1]), v71 >> 8 >= 0x11)
                && ((v71 & 0xFF00) == 0x1100 || (v71 - 11904) >> 7 < 0x197 || v71 - 65376 <= 0x4F))
              {
                v241[0] = 0;
                unorm2_getNFCInstance();
                uint64_t v187 = v214;
                uint64_t v30 = v216;
                if (v241[0] <= 0)
                {
                  uint64_t v191 = v235[1];
                  uint64_t v192 = v216 - v235[1];
                  int v193 = (UniChar *)malloc_type_malloc(2 * (v216 - v235[1]), 0x4AF24339uLL);
                  if (v193)
                  {
                    int v194 = v193;
                    int v195 = unorm2_normalize();
                    if (v241[0] <= 0)
                    {
                      CFIndex v196 = v192 >= v195 ? v195 : v30 - v191;
                      CFStringRef v197 = CFStringCreateWithCharactersNoCopy(0, v194, v196, v206);
                      if (v197)
                      {
                        CFStringRef v198 = v197;
                        uint64_t v199 = v224;
                        if (!*(void *)(v224 + 16)) {
                          *(void *)(v199 + 16) = NLStringTokenizerCreate();
                        }
                        _NLStringTokenizerSetLocale();
                        _CITokenizerGetTokens(v199, *(void *)(v199 + 16), v198, v213, v205, 0, v218, v221, 0, 0, v227);
                        CFRelease(v198);
                      }
                    }
                    free(v194);
                  }
                }
                goto LABEL_356;
              }
            }
            if (v235[2] > 256) {
              goto LABEL_13;
            }
            if ((~(_WORD)v70 & 0x401) == 0)
            {
              v241[0] = 0;
              uint64_t NFCInstance = unorm2_getNFCInstance();
              if (v241[0] <= 0)
              {
                int v73 = v235[2];
                int v74 = v235[2];
                MEMORY[0x1F4188790](NFCInstance);
                CFTypeID v76 = (char *)&v200 - ((v75 + 15) & 0x3FFFFFFF0);
                bzero(v76, v75);
                int v77 = unorm2_normalize();
                if (v241[0] <= 0)
                {
                  int v78 = v77;
                  if (v77 <= v73 && (v77 != v73 || !memcmp(v76, (const void *)(v238 + 2 * v235[1]), 2 * v74)))
                  {
                    CFStringRef v79 = CFStringCreateWithCharactersNoCopy(0, (const UniChar *)v76, v78, v206);
                    if (v79)
                    {
                      CFStringRef v80 = v79;
                      unsigned int v31 = v226;
                      if (!*(void *)(v29 + 16)) {
                        *(void *)(v29 + 16) = NLStringTokenizerCreate();
                      }
                      _NLStringTokenizerSetLocale();
                      _CITokenizerGetTokens(v29, *(void *)(v29 + 16), v80, v213, v205, 0, v218, v221, 0, 0, v227);
                      CFRelease(v80);
                      uint64_t v33 = v245;
                      uint64_t v34 = 1;
                      uint64_t v35 = 4294959088;
                      uint64_t v36 = 65293;
                      goto LABEL_13;
                    }
                  }
                }
                unsigned int v31 = v226;
              }
              uint64_t v33 = v245;
              uint64_t v34 = 1;
              uint64_t v35 = 4294959088;
              uint64_t v36 = 65293;
            }
LABEL_123:
            char v94 = v225;
            if ((v225 & 2) == 0)
            {
              if (v243[v67])
              {
                *(_OWORD *)(v29 + 88) = *(_OWORD *)&v235[1];
                *(void *)(v29 + 104) = v67;
                if (v221)
                {
                  v221(v242[v67]);
                  uint64_t v36 = 65293;
                  uint64_t v35 = 4294959088;
                  uint64_t v34 = 1;
                  uint64_t v33 = v245;
                }
              }
            }
            *((void *)&v234 + 1) = 0;
            DWORD2(v237) = 0;
            if ((v235[3] & 0xFFFFFFFFFFFFFFFDLL) == 0)
            {
              *(void *)&long long v234 = 1;
              uint64_t v249 = 0;
              uint64_t v250 = v235[2];
              v245[0] = 0;
              goto LABEL_140;
            }
            if ((v235[3] & 0x400) == 0) {
              goto LABEL_129;
            }
            uint64_t v180 = *(__CFString **)v213;
            if (*(void *)v213)
            {
              v256.length = CFStringGetLength(*(CFStringRef *)v213);
              v256.location = 0;
              CFStringDelete(v180, v256);
              uint64_t v29 = v224;
              unsigned int v31 = v226;
            }
            else
            {
              unsigned int v181 = *(UniChar **)(v213 + 8);
              uint64_t v29 = v224;
              unsigned int v31 = v226;
              if (!v181)
              {
                unsigned int v181 = (UniChar *)malloc_type_malloc(0x400uLL, 0x1000040BDFB0063uLL);
                *(void *)(v213 + 8) = v181;
                if (!v181) {
                  goto LABEL_334;
                }
              }
              CFMutableStringRef MutableWithExternalCharactersNoCopy = CFStringCreateMutableWithExternalCharactersNoCopy(0, v181, 0, 512, v206);
              *(void *)uint64_t v213 = MutableWithExternalCharactersNoCopy;
              if (!MutableWithExternalCharactersNoCopy) {
                goto LABEL_334;
              }
            }
            *(void *)&long long v234 = 0;
            uint64_t DerivedTokens = _NLStringTokenizerGetDerivedTokens();
            *(void *)&long long v234 = DerivedTokens;
            if (DerivedTokens == 1)
            {
              uint64_t v95 = v235[2];
              char v94 = v225;
              uint64_t v33 = v245;
              uint64_t v35 = 4294959088;
              uint64_t v36 = 65293;
              if (v235[2] == v250)
              {
                *(void *)&long long v234 = 0;
                uint64_t v34 = 1;
                goto LABEL_130;
              }
              uint64_t DerivedTokens = 1;
              uint64_t v34 = 1;
            }
            else
            {
              char v94 = v225;
              uint64_t v33 = v245;
              uint64_t v34 = 1;
              uint64_t v35 = 4294959088;
              uint64_t v36 = 65293;
              if (DerivedTokens < 1)
              {
LABEL_129:
                uint64_t v95 = v235[2];
                uint64_t v29 = v224;
                unsigned int v31 = v226;
LABEL_130:
                if (v95 >= 2 && ((v94 & 0x20) == 0 || (v235[3] & 0x200) != 0))
                {
                  uint64_t SubTokensOfCompound = _NLStringTokenizerGetSubTokensOfCompound();
                  *(void *)&long long v234 = SubTokensOfCompound;
                  if (SubTokensOfCompound)
                  {
                    uint64_t v33 = v245;
                    uint64_t v34 = 1;
                    uint64_t v35 = 4294959088;
                    uint64_t v36 = 65293;
                    if (SubTokensOfCompound >= 2)
                    {
                      if ((v235[3] & 0x20) == 0) {
                        goto LABEL_143;
                      }
                      if ((v94 & 8) != 0 && (v235[3] & 0x40001000) == 0)
                      {
                        uint64_t v97 = v235[2];
                        int v98 = &v249 + 2 * *((void *)&v234 + 1);
                        *int v98 = 0;
                        v98[1] = v97;
                        *(void *)&long long v234 = 1;
LABEL_140:
                        uint64_t SubTokensOfCompound = 1;
                        goto LABEL_143;
                      }
                      uint64_t v168 = 0;
                      uint64_t v169 = 0;
                      int v170 = 0;
                      BOOL v171 = 0;
                      uint64_t v172 = v238;
                      uint64_t v173 = v235[1];
                      unint64_t v174 = v215;
                      uint64_t v117 = SubTokensOfCompound;
                      while (1)
                      {
                        uint64_t v175 = v245[v169];
                        if ((v175 & 0x20) != 0) {
                          break;
                        }
                        BOOL v176 = (v175 & 0xFFFFFFFFFFFFFFF1) == 0;
                        if ((v176 & v170) != 1) {
                          goto LABEL_305;
                        }
                        if (*v174 > 2)
                        {
                          BOOL v176 = 1;
LABEL_305:
                          uint64_t v179 = v168 + (v170 & 1);
                          *((_OWORD *)&v249 + v179) = *(_OWORD *)(v174 - 1);
                          uint64_t v168 = v179 + 1;
                          v245[v179] = v175;
                          int v170 = 0;
                          goto LABEL_306;
                        }
                        int v170 = 0;
                        BOOL v176 = 0;
                        *(&v249 + 2 * v168 + 1) += *v174;
                        v245[v168++] |= v175;
                        *(void *)&long long v234 = --v117;
LABEL_306:
                        BOOL v171 = v176;
                        ++v169;
                        v174 += 2;
                        if (SubTokensOfCompound == v169) {
                          goto LABEL_173;
                        }
                      }
                      if (*v174 == 1)
                      {
                        int v177 = *(unsigned __int16 *)(v172 + 2 * (*(v174 - 1) + v173));
                        if (v177 == 8217 || v177 == 39)
                        {
                          if (!v169) {
                            goto LABEL_173;
                          }
                          if (v171)
                          {
                            --v168;
                            ++*(&v249 + 2 * v168 + 1);
                            uint64_t v178 = v245[v168];
                            if ((v178 & 0x20) == 0) {
                              v245[v168] = v178 | 0x10000020;
                            }
                            BOOL v176 = 0;
                            *(void *)&long long v234 = --v117;
                            int v170 = 1;
                            goto LABEL_306;
                          }
                        }
                      }
                      BOOL v176 = 0;
                      goto LABEL_305;
                    }
                    uint64_t v117 = SubTokensOfCompound;
LABEL_173:
                    uint64_t SubTokensOfCompound = v117;
                    if (!v117) {
                      goto LABEL_13;
                    }
LABEL_143:
                    uint64_t v99 = *((void *)&v234 + 1);
                    unsigned int v100 = &v249 + 2 * *((void *)&v234 + 1);
                    *unsigned int v31 = *(_OWORD *)v100;
                    uint64_t v101 = v245[v99];
                    *(void *)&long long v237 = v101;
                    if ((v101 & 0x20) == 0)
                    {
                      uint64_t v102 = *v100;
                      uint64_t v103 = *(&v249 + 2 * SubTokensOfCompound - 1) + *(&v249 + 2 * SubTokensOfCompound - 2);
                      v235[0] = v103;
                      if (v99 >= SubTokensOfCompound)
                      {
                        uint64_t v112 = v101;
                        uint64_t v61 = v103;
                        goto LABEL_196;
                      }
                      uint64_t v104 = 0;
                      uint64_t v105 = 0;
                      uint64_t v106 = v238 + 2 * v235[1];
                      if (BYTE1(v240)) {
                        BOOL v107 = v235[2] + v235[1] == *((void *)&v239 + 1);
                      }
                      else {
                        BOOL v107 = 0;
                      }
                      int v108 = v107;
                      uint64_t v109 = &v215[2 * v99];
                      BOOL v110 = 1;
                      uint64_t v111 = v99;
                      uint64_t v112 = v101;
                      while (1)
                      {
                        if ((v245[v111] & 0x10000020) == 0x20)
                        {
                          uint64_t v61 = *(v109 - 1);
                          if (v27 < 2) {
                            goto LABEL_190;
                          }
                          uint64_t v113 = *v109;
                          if (*v109 != 1)
                          {
                            int v114 = v113 == 2 ? v108 : 0;
                            if (v114 != 1 || *(_WORD *)(v106 + 2 * v61 + 2) != 42) {
                              goto LABEL_190;
                            }
                          }
                          int v115 = *(unsigned __int16 *)(v106 + 2 * v61);
                          if ((v115 - 8208) >= 2 && v115 != 45 && v115 != 65293)
                          {
                            uint64_t v29 = v224;
LABEL_190:
                            v235[0] = *(v109 - 1);
                            unsigned int v31 = v226;
LABEL_191:
                            uint64_t v33 = v245;
                            uint64_t v35 = 4294959088;
                            uint64_t v36 = 65293;
                            if (v105 >= 9)
                            {
                              if (v104 - v102 <= 63 && (v104 - v102) / v105 > 2)
                              {
                                if (v110) {
                                  uint64_t v152 = v111;
                                }
                                else {
                                  uint64_t v152 = SubTokensOfCompound - 1;
                                }
                                if ((v245[v152] & 0x20) != 0)
                                {
                                  uint64_t v34 = 1;
                                  if (v27 < 2
                                    || (uint64_t v159 = &v249 + 2 * v152, v159[1] != 1)
                                    || (int v160 = *(unsigned __int16 *)(v238 + 2 * v235[1] + 2 * *v159),
                                        (v160 - 8208) >= 2)
                                    && (v160 != 45 ? (BOOL v161 = v160 == 65293) : (BOOL v161 = 1), !v161))
                                  {
                                    --v152;
                                  }
                                }
                                else
                                {
                                  uint64_t v34 = 1;
                                }
                                uint64_t v162 = 0;
                                int v163 = &v212[2 * v152];
                                uint64_t v37 = v152 - 7;
                                int v164 = &v211[v152];
                                int v165 = &v210[2 * v99];
                                int v166 = &v209[v99];
                                do
                                {
                                  uint64_t v167 = *v166--;
                                  *v164-- = v167;
                                  *(_OWORD *)&v163[v162] = *(_OWORD *)&v165[v162];
                                  v162 -= 2;
                                }
                                while (v162 != -10);
                              }
                              else
                              {
                                *(void *)&long long v236 = v102;
                                *((void *)&v236 + 1) = v104 - v102;
                                uint64_t v37 = v105 + v99;
                                uint64_t v34 = 1;
                              }
                              goto LABEL_198;
                            }
                            uint64_t v34 = 1;
LABEL_196:
                            *(void *)&long long v237 = v112 | v101;
LABEL_197:
                            uint64_t v37 = v99 + 1;
LABEL_198:
                            *((void *)&v234 + 1) = v37;
                            uint64_t v60 = v236;
                            goto LABEL_199;
                          }
                          v112 |= 0x10uLL;
                          uint64_t v29 = v224;
                          unsigned int v31 = v226;
                        }
                        else
                        {
                          ++v105;
                          uint64_t v61 = *(v109 - 1);
                          uint64_t v113 = *v109;
                        }
                        uint64_t v104 = v113 + v61;
                        BOOL v110 = ++v111 < SubTokensOfCompound;
                        v109 += 2;
                        if (SubTokensOfCompound == v111)
                        {
                          uint64_t v61 = v103;
                          uint64_t v111 = SubTokensOfCompound;
                          goto LABEL_191;
                        }
                      }
                    }
                    uint64_t v61 = *((void *)&v236 + 1) + v236;
                    v235[0] = *((void *)&v236 + 1) + v236;
                    goto LABEL_197;
                  }
                  uint64_t v95 = v235[2];
                  uint64_t v33 = v245;
                  uint64_t v34 = 1;
                  uint64_t v35 = 4294959088;
                  uint64_t v36 = 65293;
                }
                *(void *)&long long v234 = 1;
                uint64_t v249 = 0;
                uint64_t v250 = v95;
                uint64_t SubTokensOfCompound = 1;
                v245[0] = 0;
                goto LABEL_143;
              }
            }
            uint64_t v184 = 0;
            unsigned __int8 v185 = v202;
            do
            {
              if (*v185)
              {
                uint64_t v186 = v224;
                *(_OWORD *)(v224 + 88) = *(_OWORD *)&v235[1];
                *(void *)(v186 + 104) = v67;
                if (v221)
                {
                  ((void (*)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t))v221)(*(void *)(v213 + 8) + 2 * *(v185 - 1), *v185, 2, v227, 1, 4294959088, v245, 65293);
                  uint64_t v36 = 65293;
                  uint64_t v35 = 4294959088;
                  uint64_t v34 = 1;
                  uint64_t v33 = v245;
                  uint64_t DerivedTokens = v234;
                }
              }
              ++v184;
              v185 += 2;
            }
            while (v184 < DerivedTokens);
            goto LABEL_129;
          }
          unsigned int v39 = &v249 + 2 * v37;
          *unsigned int v31 = *(_OWORD *)v39;
          uint64_t v40 = v245[v37];
          *(void *)&long long v237 = v40;
          if (v37)
          {
            uint64_t v41 = v37 + 2;
            if (v37 + 2 < v38)
            {
              uint64_t v42 = v37 - 1;
              uint64_t v43 = v37 - 2;
              if (v37 < 2
                || (v245[v43] & 0x20) == 0
                || *(&v249 + 2 * v43 + 1) + *(&v249 + 2 * v43) != *(&v249 + 2 * v42))
              {
                uint64_t v44 = v40 & 0x20;
                if ((v245[v42] & 0x30) == 0 && v44 != 0 && v39[1] == 1)
                {
                  uint64_t v46 = v235[1];
                  uint64_t v47 = v238 + 2 * v235[1];
                  if (*(_WORD *)(v47 + 2 * *v39) == 46)
                  {
                    uint64_t v48 = v37 + 1;
                    if ((v245[v37 + 1] & 0x30) == 0 && (v245[v41] & 0x20) != 0)
                    {
                      signed int v49 = &v249 + 2 * v41;
                      if (v49[1] == 1 && *(_WORD *)(v47 + 2 * *v49) == 46)
                      {
                        memset(v241, 0, 512);
                        uint64_t v50 = &v249 + 2 * v42;
                        uint64_t v51 = v50[1];
                        uint64_t v201 = v50;
                        if (v51 > 255)
                        {
                          uint64_t v53 = 0;
                        }
                        else
                        {
                          uint64_t v52 = v51;
                          __memcpy_chk();
                          uint64_t v53 = v52;
                        }
                        int v54 = &v208[2 * v37];
                        unsigned int v55 = &v207[v37];
                        while ((*(unsigned char *)(v55 - 1) & 0x30) == 0)
                        {
                          if ((*(unsigned char *)v55 & 0x20) == 0) {
                            goto LABEL_42;
                          }
                          if (*v54 != 1) {
                            goto LABEL_42;
                          }
                          if (*(_WORD *)(v47 + 2 * *(v54 - 1)) != 46) {
                            goto LABEL_42;
                          }
                          uint64_t v56 = *(v54 - 2);
                          uint64_t v57 = v56 + v53;
                          if (v56 + v53 > 255) {
                            goto LABEL_42;
                          }
                          memcpy((char *)v241 + 2 * v53, (const void *)(v47 + 2 * *(v54 - 3)), 2 * v56);
                          v48 += 2;
                          v41 += 2;
                          v54 += 4;
                          v55 += 2;
                          uint64_t v53 = v57;
                          if (v41 >= v38)
                          {
                            uint64_t v48 = v41 - 1;
                            goto LABEL_43;
                          }
                        }
                        uint64_t v48 = v41 - 1;
LABEL_42:
                        uint64_t v57 = v53;
LABEL_43:
                        uint64_t v58 = *v201 + v46;
                        uint64_t v59 = *(&v249 + 2 * v48 - 2) - v58 + *(&v249 + 2 * v48 - 1);
                        uint64_t v29 = v224;
                        *(void *)(v224 + 88) = v58;
                        *(void *)(v29 + 96) = v59;
                        *(void *)(v29 + 104) = *((void *)&v233 + 1) - 1;
                        unsigned int v31 = v226;
                        if (v221) {
                          ((void (*)(_DWORD *, uint64_t, void, uint64_t))v221)(v241, v57, 0, v227);
                        }
                        uint64_t v33 = v245;
                        uint64_t v34 = 1;
                        uint64_t v35 = 4294959088;
                        uint64_t v36 = 65293;
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v60 = v236;
          uint64_t v61 = v235[0];
          if (*((void *)&v236 + 1) + (void)v236 > v235[0]) {
            break;
          }
          DWORD2(v237) = 1;
          uint64_t v62 = *((void *)&v234 + 1);
          uint64_t v37 = ++*((void *)&v234 + 1);
          if (v62 < 1) {
            goto LABEL_199;
          }
          uint64_t v63 = v235[1];
          if (v27 >= 2 && *((void *)&v236 + 1) == 1)
          {
            int v64 = *(unsigned __int16 *)(v238 + 2 * v235[1] + 2 * v236);
            BOOL v65 = (v64 - 8208) < 2 || v64 == 65293;
            if (v65 || v64 == 45) {
              continue;
            }
          }
          uint64_t v66 = v235[2];
          goto LABEL_200;
        }
        if ((v237 & 0x20) != 0)
        {
          if (v27 < 2
            || *((void *)&v236 + 1) != 1
            || (int v92 = *(unsigned __int16 *)(v238 + 2 * v235[1] + 2 * v236), (v92 - 8208) >= 2)
            && (v92 != 45 ? (BOOL v93 = v92 == 65293) : (BOOL v93 = 1), !v93))
          {
            v235[0] = *((void *)&v236 + 1) + v236;
            uint64_t v37 = *((void *)&v234 + 1) + 1;
            uint64_t v61 = *((void *)&v236 + 1) + v236;
            goto LABEL_120;
          }
        }
        uint64_t v81 = *(&v249 + 2 * *((void *)&v234 + 1));
        uint64_t v82 = *(&v249 + 2 * (void)v234 - 1) + *(&v249 + 2 * (void)v234 - 2);
        v235[0] = v82;
        if ((uint64_t)v234 <= *((uint64_t *)&v234 + 1))
        {
          uint64_t v61 = v82;
LABEL_119:
          uint64_t v37 = *((void *)&v234 + 1) + 1;
          goto LABEL_120;
        }
        uint64_t v83 = 0;
        uint64_t v84 = 0;
        uint64_t v85 = v238 + 2 * v235[1];
        CFTypeID v86 = &v215[2 * *((void *)&v234 + 1)];
        BOOL v87 = 1;
        uint64_t v88 = *((void *)&v234 + 1);
        while (2)
        {
          uint64_t v61 = *(v86 - 1);
          if ((v245[v88] & 0x10000020) != 0x20)
          {
            uint64_t v91 = *v86;
            goto LABEL_102;
          }
          if (v27 < 2 || *v86 != 1) {
            break;
          }
          int v89 = *(unsigned __int16 *)(v85 + 2 * v61);
          if ((v89 - 8208) < 2)
          {
            uint64_t v91 = 1;
            uint64_t v33 = v245;
            goto LABEL_102;
          }
          BOOL v90 = v89 == 45 || v89 == 65293;
          uint64_t v91 = 1;
          uint64_t v33 = v245;
          if (v90)
          {
LABEL_102:
            ++v84;
            uint64_t v83 = v91 + v61;
            BOOL v87 = ++v88 < (uint64_t)v234;
            v86 += 2;
            if ((void)v234 == v88)
            {
              uint64_t v61 = v82;
              uint64_t v84 = v234 - *((void *)&v234 + 1);
              uint64_t v88 = v234;
              goto LABEL_114;
            }
            continue;
          }
          break;
        }
        v235[0] = *(v86 - 1);
LABEL_114:
        uint64_t v34 = 1;
        uint64_t v36 = 65293;
        if ((unint64_t)v84 < 9)
        {
          uint64_t v35 = 4294959088;
          goto LABEL_119;
        }
        uint64_t v35 = 4294959088;
        if (v83 - v81 <= 63 && (v83 - v81) / v84 > 2)
        {
          if (v87) {
            uint64_t v118 = v88;
          }
          else {
            uint64_t v118 = v234 - 1;
          }
          if ((v245[v118] & 0x20) != 0)
          {
            if (v27 < 2
              || (long long v119 = &v249 + 2 * v118, v119[1] != 1)
              || (int v120 = *(unsigned __int16 *)(v85 + 2 * *v119), (v120 - 8208) >= 2)
              && (v120 != 45 ? (BOOL v121 = v120 == 65293) : (BOOL v121 = 1), !v121))
            {
              --v118;
            }
          }
          uint64_t v122 = 0;
          uint64_t v123 = &v212[2 * v118];
          uint64_t v37 = v118 - 7;
          unint64_t v124 = &v211[v118];
          uint64_t v125 = &v210[2 * *((void *)&v234 + 1)];
          unsigned int v126 = &v209[*((void *)&v234 + 1)];
          do
          {
            uint64_t v127 = *v126--;
            *v124-- = v127;
            *(_OWORD *)&v123[v122] = *(_OWORD *)&v125[v122];
            v122 -= 2;
          }
          while (v122 != -10);
        }
        else
        {
          *(void *)&long long v236 = v81;
          *((void *)&v236 + 1) = v83 - v81;
          uint64_t v37 = v84 + *((void *)&v234 + 1);
          uint64_t v60 = v81;
        }
LABEL_120:
        *((void *)&v234 + 1) = v37;
        DWORD2(v237) = 0;
LABEL_199:
        uint64_t v63 = v235[1];
        uint64_t v66 = v235[2];
        uint64_t v128 = v235[2];
        uint64_t v129 = v235[1];
        if (v37)
        {
LABEL_200:
          uint64_t v129 = v63;
          uint64_t v128 = v66;
          v63 += v60;
          v66 -= v60;
        }
        *(void *)(v29 + 88) = v63;
        *(void *)(v29 + 96) = v66;
        uint64_t v130 = v238;
        *(void *)(v29 + 104) = *((void *)&v233 + 1) - 1;
        uint64_t v131 = (unsigned __int16 *)(v130 + 2 * v129 + 2 * v60);
        uint64_t v132 = v61 - v60;
        int v133 = *v131;
        if ((v133 - 12441) > 1)
        {
          if (v128 != 1 || (v133 & 0xF800 | 0x400) != 0xDC00) {
            goto LABEL_204;
          }
          continue;
        }
        break;
      }
      if (!v132) {
        continue;
      }
      break;
    }
    while (*v131 - 12441 <= 1)
    {
      ++v131;
      if (!--v132) {
        goto LABEL_13;
      }
    }
LABEL_204:
    if (DWORD2(v237))
    {
      if (v221)
      {
        char v134 = ((uint64_t (*)(unsigned __int16 *, uint64_t, void, uint64_t, uint64_t, uint64_t, void *, uint64_t))v221)(v131, v132, 0, v227, 1, 4294959088, v245, 65293);
        uint64_t v36 = 65293;
        uint64_t v35 = 4294959088;
        uint64_t v34 = 1;
        uint64_t v33 = v245;
        char v135 = v134;
        if (v134) {
          goto LABEL_257;
        }
      }
      else
      {
        char v135 = 0;
      }
LABEL_252:
      if (*(void *)(v29 + 8) == v223
        && (void)v234 == *((void *)&v234 + 1)
        && *((uint64_t *)&v233 + 1) < (uint64_t)v233)
      {
        unsigned int v149 = (uint64_t *)&v254[*((void *)&v233 + 1)];
        uint64_t v150 = *(v149 - 1) + *(v149 - 2);
        if (v150 < *v149)
        {
          char v151 = handle_missing_punctuation(v238, v150, *v149, v218, v227, 0);
          uint64_t v36 = 65293;
          uint64_t v35 = 4294959088;
          uint64_t v34 = 1;
          uint64_t v33 = v245;
          char v135 = v151;
        }
      }
      goto LABEL_257;
    }
    if ((v225 & 0x10) != 0 && (v235[3] & 0x40001000) != 0 && v132 >= 2)
    {
      uint64_t v138 = 0;
      char v139 = 0;
      uint64_t v140 = v218;
      while (1)
      {
        char v141 = &v131[v138];
        if ((*v141 & 0xFC00) == 0xD800)
        {
          if (++v138 >= v132 || (v131[v138] & 0xFC00) != 0xDC00)
          {
LABEL_229:
            if (v139) {
              char v135 = v139;
            }
            else {
              char v135 = 0;
            }
            if (v139)
            {
              unsigned int v31 = v226;
            }
            else
            {
              unsigned int v31 = v226;
              if (v221)
              {
                char v137 = ((uint64_t (*)(unsigned __int16 *, uint64_t, uint64_t, uint64_t))v221)(v131, v132, 3, v227);
LABEL_235:
                char v135 = v137;
              }
            }
            goto LABEL_236;
          }
          if (v140)
          {
            uint64_t v142 = 2;
LABEL_225:
            char v139 = ((uint64_t (*)(unsigned __int16 *, uint64_t, void, uint64_t, uint64_t, uint64_t, void *, uint64_t))v140)(v141, v142, v237, v227, v34, v35, v33, v36);
            goto LABEL_227;
          }
        }
        else if (v140)
        {
          uint64_t v142 = 1;
          goto LABEL_225;
        }
        char v139 = 0;
LABEL_227:
        if (++v138 >= v132 || (v139 & 1) != 0) {
          goto LABEL_229;
        }
      }
    }
    if (v218)
    {
      char v137 = ((uint64_t (*)(unsigned __int16 *, uint64_t, void, uint64_t, uint64_t, uint64_t, void *, uint64_t))v218)(v131, v132, v237, v227, 1, 4294959088, v245, 65293);
      goto LABEL_235;
    }
    char v135 = 0;
LABEL_236:
    if (v220)
    {
      if (v232 < 128)
      {
        uint64_t v143 = (uint64_t)((uint64_t)v131 - v238) >> 1;
        if (v232)
        {
          uint64_t v144 = v228[2 * v232 - 1] + v228[2 * v232 - 2];
          if (v144 < v143) {
            handle_missing_punctuation(v238, v144, (uint64_t)((uint64_t)v131 - v238) >> 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sentenceTokenizerMissingPunctuation, (uint64_t)v228, 1);
          }
        }
      }
      else
      {
        v220(v238, v228, v217);
        uint64_t v232 = 0;
        uint64_t v143 = (uint64_t)((uint64_t)v131 - v238) >> 1;
      }
      if (v132)
      {
        uint64_t v230 = v143;
        uint64_t v231 = v132;
        char v145 = &v228[2 * v232];
        *char v145 = v143;
        v145[1] = v132;
        v228[v232++ + 258] = v237;
      }
      unsigned int v146 = &v131[v132];
      if ((unint64_t)v146 >= (uint64_t)v238 + 2 * v216) {
        goto LABEL_249;
      }
      int v147 = *v146;
      switch(v147)
      {
        case 9:
          goto LABEL_249;
        case 8200:
          goto LABEL_249;
        case 12288:
          goto LABEL_249;
      }
      CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetNewline);
      if (CFCharacterSetIsCharacterMember(Predefined, v147)) {
        goto LABEL_249;
      }
      if (*((void *)&v234 + 1) == (void)v234)
      {
        uint64_t v29 = v224;
        uint64_t v33 = v245;
        uint64_t v34 = 1;
        uint64_t v35 = 4294959088;
        uint64_t v36 = 65293;
        if (*((uint64_t *)&v233 + 1) >= (uint64_t)v233
          || (unint64_t v153 = v238 + 2 * *(void *)&v254[*((void *)&v233 + 1)], (unint64_t)v146 >= v153))
        {
          unsigned int v31 = v226;
          if (v135) {
            goto LABEL_257;
          }
          goto LABEL_252;
        }
        uint64_t v154 = *((void *)&v254[*((void *)&v233 + 1) - 1] + 1) + *(void *)&v254[*((void *)&v233 + 1) - 1];
        uint64_t v155 = 2 * v154 + 2;
        while (1)
        {
          int v156 = *v146;
          if (v156 == 9 || v156 == 8200) {
            break;
          }
          if (v156 == 12288) {
            break;
          }
          CFCharacterSetRef v158 = CFCharacterSetGetPredefined(kCFCharacterSetNewline);
          if (CFCharacterSetIsCharacterMember(v158, v156)) {
            break;
          }
          ++v154;
          unsigned int v146 = (unsigned __int16 *)(v238 + v155);
          v155 += 2;
          if ((uint64_t)v238 + 2 * v154 >= v153) {
            goto LABEL_250;
          }
        }
LABEL_249:
        ((void (*)(void, void *, uint64_t *, uint64_t, uint64_t))v220)(v238, v228, v217, v232, v227);
        uint64_t v232 = 0;
      }
LABEL_250:
      uint64_t v29 = v224;
      unsigned int v31 = v226;
    }
    uint64_t v33 = v245;
    uint64_t v34 = 1;
    uint64_t v35 = 4294959088;
    uint64_t v36 = 65293;
    if ((v135 & 1) == 0) {
      goto LABEL_252;
    }
LABEL_257:
    if ((v135 & 1) == 0)
    {
      if ((v135 & 2) != 0 && !DWORD2(v237)) {
        v235[3] &= ~0x400uLL;
      }
      continue;
    }
    break;
  }
LABEL_334:
  uint64_t v187 = v214;
  uint64_t v30 = v216;
  if (v220)
  {
    uint64_t v188 = v232;
    if (v232)
    {
      if (v232 <= 127)
      {
        uint64_t v189 = v228[2 * v232 - 1] + v228[2 * v232 - 2];
        uint64_t v190 = v238;
        if (v189 < v216)
        {
          handle_missing_punctuation(v238, v189, v216, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sentenceTokenizerMissingPunctuation, (uint64_t)v228, 1);
          uint64_t v190 = v238;
          uint64_t v188 = v232;
        }
        ((void (*)(uint64_t, void *, uint64_t *, uint64_t, uint64_t))v220)(v190, v228, v217, v188, v227);
        uint64_t v232 = 0;
      }
    }
  }
LABEL_356:
  if (v187) {
    v187(v238, v30, v227);
  }
  if ((void)v239) {
    CFRelease((CFTypeRef)v239);
  }
  if (*((void *)&v238 + 1)) {
    free(*((void **)&v238 + 1));
  }
}

uint64_t _getPropertyTokenCallback(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return 0;
}

void getPropertyTokenCallback(unsigned __int16 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return;
  }
  bzero(__dst, 0x414uLL);
  size_t v6 = *(unsigned int *)(a3 + 32);
  memcpy(__dst, *(const void **)(a3 + 24), v6);
  *(void *)unsigned int v26 = 0;
  if (utf8_encodestr(a1, 2 * a2, &__dst[v6], v26, 1028)) {
    return;
  }
  uint64_t v7 = *(void *)v26;
  if (!*(void *)(a3 + 64))
  {
    uint64_t v8 = 0;
    if (*(unsigned char *)(a3 + 74)) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  *(_WORD *)&__dst[*(void *)v26 + *(unsigned int *)(a3 + 32)] = 769;
  uint64_t v8 = 2;
  if (!*(unsigned char *)(a3 + 74)) {
LABEL_6:
  }
    pushPropertyTerm(*(void *)a3, v8 + v7 + *(unsigned int *)(a3 + 32), __dst, *(void *)(a3 + 8), *(_DWORD *)(a3 + 16), *(_DWORD *)(a3 + 20), 1);
LABEL_7:
  uint64_t v9 = *(unsigned int *)(a3 + 48);
  if (v9)
  {
    uint64_t v10 = *(unsigned int *)(a3 + 32);
    uint64_t v11 = &__dst[v10];
    memcpy(&__dst[v10 + v7], *(const void **)(a3 + 40), *(unsigned int *)(a3 + 48));
    if (*(void *)(a3 + 64))
    {
      __dst[v7 + v9 + v10] = 3;
      uint64_t v8 = 1;
    }
    unint64_t v12 = *(void ***)(a3 + 56);
    if (v12)
    {
      if (!*(unsigned char *)(a3 + 74)) {
        pushPropertyTermForWildCard(v12, v7 + v9 + v8, v11, *(_DWORD *)(a3 + 20));
      }
      if (*(unsigned char *)(a3 + 73))
      {
        int v13 = *(void ***)(a3 + 56);
        size_t v14 = (char *)&__dst[*(unsigned int *)(a3 + 32)];
        int v15 = *(_DWORD *)(a3 + 20);
        if (*(void *)(a3 + 64)) {
          pushPrefixTermsForWildCard(v13, v7, v14, 3u, "\x01\x04\x03", v15);
        }
        else {
          pushPrefixTermsForWildCard(v13, v7, v14, 2u, "\x01\x04", v15);
        }
      }
    }
    else if ((*(unsigned char *)(a3 + 74) {
            || pushPropertyTerm(*(void *)a3, (v7 + v9 + v8), v11, *(void *)(a3 + 8), *(_DWORD *)(a3 + 16), *(_DWORD *)(a3 + 20), 1))&& *(unsigned char *)(a3 + 73))
    }
    {
      unsigned int v16 = (char *)&__dst[*(unsigned int *)(a3 + 32)];
      uint64_t v17 = *(void *)a3;
      uint64_t v18 = *(void *)(a3 + 8);
      int v19 = *(_DWORD *)(a3 + 16);
      int v20 = *(_DWORD *)(a3 + 20);
      if (*(void *)(a3 + 64)) {
        pushPrefixTerms(v17, v7, v16, 3u, "\x01\x04\x03", v18, v19, v20, 0);
      }
      else {
        pushPrefixTerms(v17, v7, v16, 2u, "\x01\x04", v18, v19, v20, 0);
      }
    }
  }
  if (*(unsigned char *)(a3 + 72) && *(unsigned char *)(a3 + 73) && !*(void *)(a3 + 56))
  {
    uint64_t v21 = (char *)&__dst[*(unsigned int *)(a3 + 32)];
    uint64_t v22 = *(void *)a3;
    uint64_t v23 = *(void *)(a3 + 8);
    int v24 = *(_DWORD *)(a3 + 16);
    int v25 = *(_DWORD *)(a3 + 20);
    if (*(void *)(a3 + 64)) {
      pushPrefixTerms(v22, v7, v21, 3u, "\x01\x05\x03", v23, v24, v25, 0);
    }
    else {
      pushPrefixTerms(v22, v7, v21, 2u, "\x01\x05", v23, v24, v25, 0);
    }
  }
}

uint64_t utf8_encodestr(unsigned __int16 *a1, unint64_t a2, unsigned char *a3, void *a4, uint64_t a5)
{
  int v26[2] = *MEMORY[0x1E4F143B8];
  v26[0] = 0;
  v26[1] = 0;
  if (a2 >= 2)
  {
    int v10 = 0;
    uint64_t v11 = 0;
    unint64_t v12 = (unint64_t)&a3[a5 - 1];
    unint64_t v13 = a2 >> 1;
    uint64_t v8 = a3;
    while (1)
    {
      --v13;
      if (v10 < 1)
      {
        unsigned int v17 = *a1++;
        unsigned int v15 = v17;
        unint64_t v18 = (unsigned __int16)v17;
        if ((unsigned __int16)v17 >= 0xC0u)
        {
          int v19 = __CFUniCharDecomposableBitmap[v18 >> 8];
          if (!__CFUniCharDecomposableBitmap[v18 >> 8]
            || v19 != 255
            && ((__CFUniCharDecomposableBitmap[(v18 >> 3) + 256 + 32 * v19 - 32] >> (v18 & 7)) & 1) == 0)
          {
            goto LABEL_28;
          }
          unsigned __int16 v20 = v15 + 21504;
          if ((unsigned __int16)(v15 + 21504) > 0x2BA4u)
          {
            int v22 = unicode_recursive_decompose((unsigned __int16)v15, v26);
            unsigned int v15 = LOWORD(v26[0]);
          }
          else
          {
            __int16 v21 = (unsigned __int16)(v15 + 21504) % 0x1Cu;
            unsigned int v15 = ((28533 * (unsigned __int16)(v15 + 21504)) >> 24) | 0x1100;
            LOWORD(v26[0]) = ((28533 * v20) >> 24) | 0x1100;
            WORD1(v26[0]) = v20 % 0x24Cu / 0x1C + 4449;
            if (v20 % 0x1Cu)
            {
              WORD2(v26[0]) = v21 + 4519;
              int v22 = 3;
            }
            else
            {
              int v22 = 2;
            }
          }
          int v10 = v22 - 1;
          v13 += v22 - 1;
          uint64_t v11 = (unsigned __int16 *)v26 + 1;
        }
      }
      else
      {
        unsigned int v16 = *v11++;
        unsigned int v15 = v16;
        --v10;
      }
      if (!(_WORD)v15)
      {
        LOBYTE(v15) = 0;
        LOBYTE(v23) = 2;
        LOBYTE(v24) = -112;
LABEL_23:
        if ((unint64_t)(v8 + 2) >= v12) {
          goto LABEL_35;
        }
        unsigned char *v8 = v23 | 0xE0;
        v8[1] = v24 & 0x3F | 0x80;
        _OWORD v8[2] = v15 & 0x3F | 0x80;
        v8 += 3;
        goto LABEL_6;
      }
      if ((unsigned __int16)v15 == 47)
      {
        LOBYTE(v15) = 47;
LABEL_26:
        if ((unint64_t)v8 >= v12) {
          goto LABEL_35;
        }
        *v8++ = v15;
        goto LABEL_6;
      }
      LODWORD(v18) = (unsigned __int16)v15;
      if ((unsigned __int16)v15 < 0x80u) {
        goto LABEL_26;
      }
LABEL_28:
      if ((unsigned __int16)v15 <= 0x7FFu)
      {
        if ((unint64_t)(v8 + 1) >= v12)
        {
LABEL_35:
          uint64_t result = 63;
          goto LABEL_37;
        }
        unsigned char *v8 = (v15 >> 6) | 0xC0;
        v8[1] = v15 & 0x3F | 0x80;
        v8 += 2;
        goto LABEL_6;
      }
      __int16 v24 = (unsigned __int16)v15 >> 6;
      __int16 v23 = (unsigned __int16)v15 >> 12;
      if ((unsigned __int16)v15 >> 10 != 54) {
        goto LABEL_23;
      }
      if (!v13) {
        goto LABEL_23;
      }
      int v25 = *a1;
      if ((v25 & 0xFC00) != 0xDC00) {
        goto LABEL_23;
      }
      if ((unint64_t)(v8 + 3) >= v12) {
        goto LABEL_35;
      }
      unsigned int v14 = v25 + (v18 << 10) - 56613888;
      --v13;
      ++a1;
      unsigned char *v8 = (v14 >> 18) | 0xF0;
      v8[1] = (v14 >> 12) & 0x3F | 0x80;
      _OWORD v8[2] = (v14 >> 6) & 0x3F | 0x80;
      v8[3] = v25 & 0x3F | 0x80;
      v8 += 4;
LABEL_6:
      if (!v13)
      {
        uint64_t result = 0;
        goto LABEL_37;
      }
    }
  }
  uint64_t result = 0;
  uint64_t v8 = a3;
LABEL_37:
  *a4 = v8 - a3;
  unsigned char *v8 = 0;
  return result;
}

uint64_t handle_missing_punctuation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a5, int a6)
{
  if (a2 >= a3) {
    return 0;
  }
  uint64_t v9 = a2;
  unsigned int v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  do
  {
    UChar32 v15 = *(unsigned __int16 *)(a1 + 2 * v9);
    if (u_isUWhiteSpace(v15))
    {
      if (v13)
      {
        if (a4)
        {
          unsigned int v11 = a4(a1 + 2 * v14, v13, v12, a5);
          uint64_t v14 = 0;
          uint64_t v13 = 0;
          uint64_t v12 = 0;
          goto LABEL_19;
        }
        uint64_t v14 = 0;
        uint64_t v13 = 0;
        uint64_t v12 = 0;
      }
      else
      {
        if (!a6) {
          goto LABEL_8;
        }
        if (a4)
        {
          unsigned int v11 = a4(a1 + 2 * v14, 1, 2048, a5);
LABEL_8:
          uint64_t v13 = 0;
          goto LABEL_19;
        }
        uint64_t v13 = 0;
      }
      unsigned int v11 = 0;
    }
    else
    {
      if (((1 << u_charType(v15)) & 0x30F80000) != 0) {
        v12 |= 0x20uLL;
      }
      if (!v13) {
        uint64_t v14 = v9;
      }
      ++v13;
    }
LABEL_19:
    ++v9;
  }
  while (a3 != v9);
  if (v13) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = v11;
  }
  if (v13 && a4)
  {
    return a4(a1 + 2 * v14, v13, v12, a5);
  }
  return result;
}

uint64_t getContentTokensCallback(char *a1, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = a3;
  uint64_t v7 = a1;
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  if (a3) {
    int v8 = 2;
  }
  else {
    int v8 = 0;
  }
  size_t v9 = 2 * a2;
  if ((a2 & 0x40000000) != 0) {
    int v10 = 2 * a2 + 3;
  }
  else {
    int v10 = 2 * a2;
  }
  unsigned int v11 = v8 ^ 0x971E137B;
  uint64_t v12 = &a1[v10 & 0xFFFFFFFC];
  if ((2 * a2 + 3) < 7)
  {
    int v13 = 1107688271;
    int v14 = 1713515327;
    if ((v9 & 2) == 0) {
      goto LABEL_15;
    }
LABEL_14:
    HIDWORD(v20) = *(unsigned __int16 *)v12 * v14;
    LODWORD(v20) = HIDWORD(v20);
    int v21 = (v20 >> 21) * v13;
    HIDWORD(v20) = v11;
    LODWORD(v20) = v11;
    unsigned int v11 = v21 ^ (5 * (v20 >> 19) + 1390208809);
    goto LABEL_15;
  }
  uint64_t v15 = -(v10 >> 2);
  int v16 = -1789642873;
  int v17 = 718793509;
  do
  {
    int v16 = 5 * v16 + 2071795100;
    int v17 = 5 * v17 + 1808688022;
    HIDWORD(v18) = v16 * *(_DWORD *)&v12[4 * v15];
    LODWORD(v18) = HIDWORD(v18);
    int v19 = (v18 >> 21) * v17;
    HIDWORD(v18) = v11;
    LODWORD(v18) = v11;
    unsigned int v11 = v19 ^ (5 * (v18 >> 19) + 1390208809);
    BOOL v34 = __CFADD__(v15++, 1);
  }
  while (!v34);
  int v14 = 5 * v16 + 2071795100;
  int v13 = 5 * v17 + 1808688022;
  if ((v9 & 2) != 0) {
    goto LABEL_14;
  }
LABEL_15:
  bzero(v79, 0x414uLL);
  unsigned int v22 = -1028477387 * ((-2048144789 * (v11 ^ v9)) ^ ((-2048144789 * (v11 ^ v9)) >> 13));
  unint64_t v76 = v8 ^ HIWORD(v22) ^ v22;
  if (a2 > 16)
  {
    uint64_t v26 = 0;
    int v32 = 0;
  }
  else
  {
    int v23 = v5;
    __int16 v24 = *(int **)(a4 + 8);
    int v25 = *v24 + 1;
    *__int16 v24 = v25;
    uint64_t v26 = (v8 ^ BYTE2(v22) ^ v22);
    if (v24[v26 + 3586] == (v8 ^ HIWORD(v22) ^ v22))
    {
      unsigned int v27 = &v24[14 * v26];
      if ((v27[11] & 0xFFFFFF) == v8 && LOBYTE(v24[14 * v26 + 10]) == a2 && !memcmp(v7, v27 + 2, v9))
      {
        v24[14 * v26 + 12] = v25;
        if (v23)
        {
          pushTermData(*(void *)a4, *(int **)&v24[14 * v26 + 14], *(unsigned int *)(a4 + 16), *(_DWORD *)(a4 + 20), 0, 0, 1u);
          return 0;
        }
        unsigned int v54 = *(_DWORD *)(a4 + 16);
        if (!v54)
        {
          uint64_t v63 = __si_assert_copy_extra_329();
          int v64 = v63;
          BOOL v65 = "";
          if (v63) {
            BOOL v65 = v63;
          }
          __message_assert("%s:%u: failed assertion '%s' %s expected non-zero docID for term %s", "TermUpdateSet.c", 1686, "ctx->docID", v65, (const char *)(*(void *)(*(void *)(a4 + 8) + 56 * v26 + 56) + 18));
          free(v64);
          if (__valid_fs(-1)) {
            uint64_t v66 = 2989;
          }
          else {
            uint64_t v66 = 3072;
          }
          *(_DWORD *)uint64_t v66 = -559038737;
          abort();
        }
        uint64_t v55 = *(void *)a4;
        uint64_t v56 = *(unsigned int **)&v24[14 * v26 + 14];
        int v57 = *(_DWORD *)(a4 + 20);
        unsigned int v58 = *(_DWORD *)(a4 + 24) + 1;
        *(_DWORD *)(a4 + 24) = v58;
        if (pushContentTermData(v55, v56, v54, v57, v58, 0))
        {
          memset(v78, 0, 32);
          uint64_t v59 = *(void *)(*(void *)(a4 + 8) + 56 * v26 + 56);
          int v60 = decode_prefix((unsigned __int8 *)(v59 + 18), *(unsigned __int16 *)(v59 + 16), (unsigned __int8 *)v78);
          pushPrefixTerms(*(void *)a4, v60, (char *)v78, 1u, "\x01", *(unsigned int *)(a4 + 16), *(_DWORD *)(a4 + 20), 0, *(_DWORD *)(a4 + 32));
          return 0;
        }
        return 2;
      }
    }
    uint64_t v28 = &v24[14 * v26];
    unsigned int v31 = v28[12];
    uint64_t v29 = (unsigned int *)(v28 + 12);
    unsigned int v30 = v31;
    int v32 = 1;
    if (v31 && v25 - v30 <= 0x400)
    {
      unsigned int v33 = ((3 * (v25 - v30)) >> 2) + 1;
      BOOL v34 = v30 >= v33;
      unsigned int v35 = v30 - v33;
      int v32 = v35 == 0 || !v34;
      if (!v34) {
        unsigned int v35 = 0;
      }
      *uint64_t v29 = v35;
    }
    int v5 = v23;
  }
  v78[0] = 0;
  uint64_t v36 = utf8_encodestr((unsigned __int16 *)v7, v9, v79, v78, 1028);
  if (v36) {
    return 0;
  }
  int v75 = v32;
  size_t v37 = (size_t)v78[0];
  v78[0] = 0;
  unsigned int v38 = *(_DWORD *)(a4 + 16);
  if ((v5 & 1) == 0)
  {
    if (!v38)
    {
      int v74 = v7;
      MEMORY[0x1F4188790](v36);
      uint64_t v62 = (char *)&v72 - ((v37 + 16) & 0xFFFFFFFFFFFFFFF0);
      bzero(&v62[v37], v37 != -1);
      memcpy(v62, v79, v37);
      v62[v37] = 0;
      if (!*(_DWORD *)(a4 + 16))
      {
        uint64_t v70 = __si_assert_copy_extra_329();
        uint64_t v68 = v70;
        unsigned int v71 = "";
        if (v70) {
          unsigned int v71 = v70;
        }
        __message_assert("%s:%u: failed assertion '%s' %s expected non-zero docID for term %s", "TermUpdateSet.c", 1729, "ctx->docID", v71, (const char *)&v72 - ((v37 + 16) & 0xFFFFFFFFFFFFFFF0));
LABEL_79:
        free(v68);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      unsigned int v38 = *(_DWORD *)(a4 + 16);
      uint64_t v7 = v74;
    }
    uint64_t v45 = *(void *)a4;
    int v46 = *(_DWORD *)(a4 + 20);
    unsigned int v47 = *(_DWORD *)(a4 + 24) + 1;
    *(_DWORD *)(a4 + 24) = v47;
    int v48 = pushTerm(v45, v76, v37, (char *)v79, v38, v46, v47, v78);
    *(_DWORD *)(a4 + 28) += v48;
    if (!v75) {
      goto LABEL_41;
    }
    goto LABEL_40;
  }
  LODWORD(v74) = v5;
  if (v38) {
    goto LABEL_33;
  }
  int v73 = &v72;
  MEMORY[0x1F4188790](v36);
  uint64_t v61 = (char *)&v72 - ((v37 + 16) & 0xFFFFFFFFFFFFFFF0);
  bzero(&v61[v37], v37 != -1);
  uint64_t v72 = (uint64_t)v61;
  memcpy(v61, v79, v37);
  v61[v37] = 0;
  if (!*(_DWORD *)(a4 + 16))
  {
    uint64_t v67 = __si_assert_copy_extra_329();
    uint64_t v68 = v67;
    uint64_t v69 = "";
    if (v67) {
      uint64_t v69 = v67;
    }
    __message_assert("%s:%u: failed assertion '%s' %s expected non-zero docID for term %s", "TermUpdateSet.c", 1739, "ctx->docID", v69, (const char *)v72);
    goto LABEL_79;
  }
  unsigned int v38 = *(_DWORD *)(a4 + 16);
LABEL_33:
  uint64_t v39 = *(void *)a4;
  uint64_t v72 = v38;
  LODWORD(v73) = *(_DWORD *)(a4 + 20);
  v79[v37] = 1;
  v79[v37 + 1] = 2;
  v79[v37 + 2] = 0;
  char v77 = 0;
  uint64_t v40 = v39;
  uint64_t v41 = (unsigned int *)pushTermTable(*(void *)(v39 + 24) + 16, **(void **)(v39 + 24), v76, v37 + 2, v79, 1, &v77);
  if (v77)
  {
    v41[2] = v38;
    v41[3] = 0;
    v41[1] = 1;
    LOBYTE(v5) = (_BYTE)v74;
LABEL_35:
    uint64_t v42 = v40;
    goto LABEL_36;
  }
  if ((*(unsigned char *)v41 & 1) == 0)
  {
    unsigned int v53 = v41[2];
    LOBYTE(v5) = (_BYTE)v74;
    if (v53 == v38) {
      goto LABEL_50;
    }
    if (v53 == v73)
    {
      v41[1] = 1;
      v41[2] = v38;
      goto LABEL_35;
    }
LABEL_66:
    uint64_t v42 = v40;
    addToExistingTermUpdateList(v40, v41, v72, 0, 1u);
LABEL_36:
    int v43 = v75;
    if (v79[v37 - 1] == 5) {
      char v44 = v79[v37 - 2];
    }
    else {
      char v44 = 0;
    }
    pushPrefixTerms(v42, v37, (char *)v79, 1u, "\x01", v72, (int)v73, 0, v44);
    int v48 = 0;
    if (v43) {
      goto LABEL_40;
    }
    goto LABEL_41;
  }
  LOBYTE(v5) = (_BYTE)v74;
  if (*((void *)v41 + 1) != v72) {
    goto LABEL_66;
  }
LABEL_50:
  int v48 = 0;
  if (v75)
  {
LABEL_40:
    uint64_t v49 = *(void *)(a4 + 8) + 56 * v26;
    *(unsigned char *)(v49 + 40) = a2;
    memcpy((void *)(v49 + 8), v7, v9);
    uint64_t v50 = *(_DWORD **)(a4 + 8);
    uint64_t v51 = (unsigned int **)&v50[14 * v26];
    *((_DWORD *)v51 + 12) = *v50;
    v51[7] = v78[0];
    v50[v26 + 3586] = v76;
  }
LABEL_41:
  if (v5) {
    return 0;
  }
  if (!v48) {
    return 2;
  }
  return *(_DWORD *)(a4 + 28) > 0x20000u;
}

uint64_t _getContentTokensCallback(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a2 < 1)
  {
LABEL_5:
    return getContentTokensCallback(a1, a2, 0, a4);
  }
  else
  {
    uint64_t v5 = 0;
    while (*(unsigned __int16 *)&a1[2 * v5] > 5u)
    {
      if (a2 == ++v5) {
        goto LABEL_5;
      }
    }
    if (_getContentTokensCallback_logCount <= 49)
    {
      ++_getContentTokensCallback_logCount;
      int v7 = *__error();
      int v8 = _SILogForLogForCategory(10);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        int v9 = *(unsigned __int16 *)&a1[2 * v5];
        int v10 = (const char *)__si_error_str_key;
        if (__si_error_str_key) {
          int v10 = (const char *)pthread_getspecific(__si_error_str_key);
        }
        unsigned int v11 = "";
        int v12 = 136315906;
        int v13 = "_getContentTokensCallback";
        __int16 v14 = 1024;
        if (v10) {
          unsigned int v11 = v10;
        }
        int v15 = 1819;
        __int16 v16 = 1024;
        int v17 = v9;
        __int16 v18 = 2080;
        int v19 = v11;
        _os_log_error_impl(&dword_1BD672000, v8, OS_LOG_TYPE_ERROR, "%s:%d: invalid content token (%d) for %s", (uint8_t *)&v12, 0x22u);
      }
      *__error() = v7;
    }
    return 1;
  }
}

uint64_t pushTerm(uint64_t a1, unint64_t a2, size_t a3, char *a4, unsigned int a5, int a6, unsigned int a7, unsigned int **a8)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!a5)
  {
    MEMORY[0x1F4188790](a1);
    int v19 = (char *)&v23 - ((a3 + 16) & 0xFFFFFFFFFFFFFFF0);
    v19[a3] = 0;
    memcpy(v19, a4, a3);
    v19[a3] = 0;
    uint64_t v20 = __si_assert_copy_extra_329();
    int v21 = v20;
    unsigned int v22 = "";
    if (v20) {
      unsigned int v22 = v20;
    }
    __message_assert("%s:%u: failed assertion '%s' %s expected non-zero docID for term %s", "TermUpdateSet.c", 3481, "docID", v22, v19);
    free(v21);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  HIBYTE(v23) = 0;
  int v15 = (unsigned int *)pushTermTable(*(void *)(a1 + 24) + 16, **(void **)(a1 + 24), a2, a3, (unsigned __int8 *)a4, 1, (unsigned char *)&v23 + 7);
  uint64_t v16 = pushContentTermData(a1, v15, a5, a6, a7, SHIBYTE(v23));
  if (v16)
  {
    if (a4[a3 - 1] == 5) {
      char v17 = a4[a3 - 2];
    }
    else {
      char v17 = 0;
    }
    pushPrefixTerms(a1, a3, a4, 1u, "\x01", a5, a6, 0, v17);
  }
  *a8 = v15;
  return v16;
}

uint64_t pushContentTermData(uint64_t a1, unsigned int *__src, unsigned int a3, int a4, unsigned int a5, char a6)
{
  int v10 = (uint64_t *)(a1 + 240);
  if (a6)
  {
    uint64_t v23 = (atomic_uint *)(a1 + 248);
    unsigned int v24 = atomic_load((unsigned int *)(a1 + 248));
    uint64_t v25 = *(unsigned int *)(a1 + 252);
    if (v24 >= v25)
    {
      unsigned int v26 = 2 * v25;
      if (!v25) {
        unsigned int v26 = 0x10000;
      }
      *(_DWORD *)(a1 + 252) = v26;
      if (my_vm_reallocate((void **)(a1 + 240), 32 * v25, 32 * v26, 246, *(void *)(a1 + 104)))
      {
        uint64_t v59 = __si_assert_copy_extra_329();
        int v60 = v59;
        uint64_t v61 = "";
        if (v59) {
          uint64_t v61 = v59;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "TermUpdateSet.c", 3233, "0 == kr", v61);
        goto LABEL_47;
      }
    }
    uint64_t result = 1;
    uint64_t add = atomic_fetch_add(v23, 1u);
    uint64_t v28 = *(void *)(a1 + 240) + 32 * add;
    *(_DWORD *)uint64_t v28 = a5;
    *(void *)(v28 + 16) = 0;
    *(void *)(v28 + 4) = 0x100000000;
    *(_DWORD *)(v28 + 24) = a3;
    __src[2] = a3;
    __src[3] = add;
    __src[1] = 1;
    LODWORD(v28) = atomic_load((unsigned int *)v23);
    if (add >= v28)
    {
      uint64_t v29 = __si_assert_copy_extra_329();
      unsigned int v30 = v29;
      unsigned int v31 = "";
      if (v29) {
        unsigned int v31 = v29;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "TermUpdateSet.c", 3246, "termUpdateList->termId < positions->next_term_id", v31);
      int v32 = v30;
      goto LABEL_36;
    }
  }
  else
  {
    uint64_t v11 = *v10;
    unsigned int v12 = __src[2];
    uint64_t v13 = __src[3];
    __int16 v14 = (int *)(*v10 + 32 * v13);
    if (v12 == a3)
    {
      ++__src[1];
      int v15 = (unsigned int *)(a1 + 264);
      if (atomic_load((unsigned int *)(a1 + 264)))
      {
        unsigned int v17 = atomic_load(v15);
        atomic_load(v15);
        uint64_t v18 = *(void *)(a1 + 256);
        unsigned int v19 = atomic_load(v15);
        atomic_store(*(_DWORD *)(v18 + 8 * v19 + 4), v15);
        if (v17)
        {
LABEL_5:
          uint64_t v20 = (int *)(*(void *)(a1 + 256) + 8 * v17);
LABEL_8:
          if (*v14 < a5)
          {
            uint64_t result = 0;
            int v22 = v14[1];
            *uint64_t v20 = *v14;
            v20[1] = v22;
            *__int16 v14 = a5;
            v14[1] = v17;
            ++*(_DWORD *)(v11 + 32 * v13 + 8);
            return result;
          }
          int v43 = __si_assert_copy_extra_329();
          char v44 = v43;
          if (v43) {
            uint64_t v45 = v43;
          }
          else {
            uint64_t v45 = "";
          }
          int v46 = *(_DWORD *)(a1 + 272);
          unsigned int v47 = atomic_load((unsigned int *)(a1 + 268));
          int v48 = *v14;
          uint64_t v49 = v11 + 32 * v13;
          int v50 = *(_DWORD *)(v49 + 8);
          int v51 = *(_DWORD *)(v49 + 24);
          uint64_t v52 = *(void *)(v49 + 16);
          unsigned int v53 = (const char *)__si_error_str_key;
          if (__si_error_str_key) {
            unsigned int v53 = (const char *)pthread_getspecific(__si_error_str_key);
          }
          if (v53) {
            unsigned int v54 = v53;
          }
          else {
            unsigned int v54 = "";
          }
          __message_assert("%s:%u: failed assertion '%s' %s ref:%d sz:%d cnt:%d pos:%d pos_prev:%d freq:%d doc:%d off:%llx %s", "CIPositions.h", 207, "position > node->info.position", v45, v17, v46, v47, a5, v48, v50, v51, v52, v54);
          int v32 = v44;
LABEL_36:
          free(v32);
          if (__valid_fs(-1)) {
            uint64_t v55 = 2989;
          }
          else {
            uint64_t v55 = 3072;
          }
          *(_DWORD *)uint64_t v55 = -559038737;
          abort();
        }
      }
      else
      {
        unsigned int v17 = positionInfoAlloc(a1 + 240, 8uLL);
        if (v17) {
          goto LABEL_5;
        }
      }
      uint64_t v20 = 0;
      goto LABEL_8;
    }
    if (v12 == a4)
    {
      uint64_t v33 = v11 + 32 * v13;
      int v35 = *(_DWORD *)(v33 + 8);
      BOOL v34 = (unsigned int *)(v33 + 8);
      if (v35)
      {
        __src[1] = 1;
        __src[2] = a3;
        unsigned int v36 = *v34;
        if (*v34 < 2) {
          goto LABEL_43;
        }
        uint64_t v37 = 0;
        unsigned int v38 = 1;
        uint64_t v39 = v14;
        while (1)
        {
          uint64_t v40 = v39[1];
          if (!v40) {
            break;
          }
          uint64_t v41 = *(void *)(a1 + 256);
          uint64_t v39 = (int *)(v41 + 8 * v40);
          v14[1] = v39[1];
          if (v37)
          {
            unsigned int v42 = atomic_load((unsigned int *)(a1 + 264));
            *(_DWORD *)(v41 + 8 * v37 + 4) = v42;
            atomic_store(v37, (unsigned int *)(a1 + 264));
            unsigned int v36 = *v34;
          }
          ++v38;
          uint64_t v37 = v40;
          if (v38 >= v36)
          {
            uint64_t v56 = *(void *)(a1 + 256);
            unsigned int v57 = atomic_load((unsigned int *)(a1 + 264));
            *(_DWORD *)(v56 + 8 * v40 + 4) = v57;
            atomic_store(v40, (unsigned int *)(a1 + 264));
            goto LABEL_43;
          }
        }
        uint64_t v62 = __si_assert_copy_extra_329();
        int v60 = v62;
        uint64_t v63 = "";
        if (v62) {
          uint64_t v63 = v62;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "TermUpdateSet.c", 3191, "info", v63);
LABEL_47:
        free(v60);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
    }
    addToExistingTermUpdateList(a1, __src, a3, 0, 1u);
    if (*(_DWORD *)(v11 + 32 * v13 + 8)) {
      CIPositionNodeFinalizeDocument((uint64_t)v10);
    }
LABEL_43:
    *__int16 v14 = a5;
    uint64_t v58 = v11 + 32 * v13;
    uint64_t result = 1;
    *(_DWORD *)(v58 + 8) = 1;
    *(_DWORD *)(v58 + 24) = a3;
  }
  return result;
}

uint64_t pushPrefixTerms(uint64_t result, uint64_t a2, char *__src, unsigned int a4, const void *a5, uint64_t a6, int a7, int a8, char a9)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return result;
  }
  uint64_t v68 = result;
  memset(__dst, 0, sizeof(__dst));
  unint64_t v14 = *__src;
  uint64_t v15 = utf8_byte_length(unsigned char)::utf8_len_table[v14 >> 4];
  uint64_t v16 = (unsigned __int8 *)&__src[v15];
  if (v15 >= a2)
  {
    if (v15 != a2)
    {
      int v64 = __si_assert_copy_extra_329();
      unsigned int v47 = v64;
      BOOL v65 = "";
      if (v64) {
        BOOL v65 = v64;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "TermUpdateSet.c", 3029, "ptr==end", v65);
      goto LABEL_91;
    }
  }
  else
  {
    if (((char)*v16 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    unint64_t v17 = *v16;
    unint64_t v18 = v17 >> 4;
    uint64_t v19 = utf8_byte_length(unsigned char)::utf8_len_table[v17 >> 4];
    int v20 = v17 & utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v19];
    if ((~(_BYTE)v18 & 0xC) != 0) {
      goto LABEL_11;
    }
    uint64_t v21 = v19 <= 2 ? 2 : v19;
    uint64_t v22 = v21 - 1;
    uint64_t v23 = &__src[v15 + 1];
    do
    {
      char v24 = *v23++;
      int v20 = v24 & 0x3F | (v20 << 6);
      --v22;
    }
    while (v22);
    if (v20 < 0x10000)
    {
LABEL_11:
      BOOL v25 = (v20 - 12441) >= 4 && (v20 - 65438) >= 2;
      if (v25 && !unicode_combinable((unsigned __int16)v20)) {
        goto LABEL_18;
      }
LABEL_15:
      v16 += v19;
      goto LABEL_18;
    }
    unsigned int v34 = v20 - 917760;
    unsigned int v35 = v20 - 127995;
    if (v34 < 0xF0 || v35 <= 4) {
      goto LABEL_15;
    }
  }
LABEL_18:
  unsigned int v26 = &__src[a2];
  size_t v27 = v16 - (unsigned __int8 *)__src;
  if (v16 >= (unsigned __int8 *)v26) {
    goto LABEL_44;
  }
  int v28 = *v16;
  if (v28 != 45)
  {
    if (v28 == 239)
    {
      if (v16[1] != 188 || v16[2] != 189) {
        goto LABEL_44;
      }
    }
    else if (v28 != 226 || v16[1] != 128 || (v16[2] & 0xFE) != 0x90)
    {
      goto LABEL_44;
    }
  }
  if ((v14 & 0x80) != 0)
  {
    int v29 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v15] & v14;
    if ((~(v14 >> 4) & 0xC) != 0)
    {
      LODWORD(v14) = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v15] & v14;
    }
    else
    {
      if (v15 <= 2) {
        uint64_t v30 = 2;
      }
      else {
        uint64_t v30 = v15;
      }
      uint64_t v31 = v30 - 1;
      int v32 = __src + 1;
      do
      {
        char v33 = *v32++;
        LODWORD(v14) = v33 & 0x3F | (v29 << 6);
        int v29 = v14;
        --v31;
      }
      while (v31);
    }
  }
  if (((1 << u_charType(v14)) & 0xE3E) != 0) {
    v16 += utf8_byte_length(unsigned char)::utf8_len_table[(unint64_t)*v16 >> 4];
  }
LABEL_44:
  if (v16 >= (unsigned __int8 *)v26 || (unint64_t v37 = *v16, v37 < 2))
  {
    memcpy(__dst, __src, v27);
    if (a9)
    {
      unsigned int v42 = (char *)__dst + v27;
      char *v42 = 1;
      v42[1] = a9;
      v27 += 3;
      void v42[2] = 5;
    }
    memcpy((char *)__dst + v27, a5, a4);
    unint64_t v43 = v27 + a4;
    int v44 = a7;
    uint64_t v45 = a6;
    uint64_t v41 = v68;
    return pushPropertyTerm(v41, v43, (unsigned __int8 *)__dst, v45, v44, a8, 0);
  }
  uint64_t v38 = utf8_byte_length(unsigned char)::utf8_len_table[v37 >> 4];
  uint64_t v39 = &v16[v38];
  BOOL v40 = &v16[v38] == (unsigned __int8 *)v26;
  if (&v16[v38] >= (unsigned __int8 *)v26)
  {
    uint64_t v39 = (unsigned __int8 *)v26;
    uint64_t v41 = v68;
    if (v40) {
      goto LABEL_77;
    }
    int v46 = __si_assert_copy_extra_329();
    unsigned int v47 = v46;
    int v48 = "";
    if (v46) {
      int v48 = v46;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "TermUpdateSet.c", 3047, "ptr==end", v48);
LABEL_91:
    free(v47);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (((char)*v39 & 0x80000000) == 0)
  {
    uint64_t v41 = v68;
    goto LABEL_77;
  }
  unint64_t v49 = *v39;
  unint64_t v50 = v49 >> 4;
  uint64_t v51 = utf8_byte_length(unsigned char)::utf8_len_table[v49 >> 4];
  int v52 = v49 & utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v51];
  if ((~(_BYTE)v50 & 0xC) != 0)
  {
    uint64_t v41 = v68;
    goto LABEL_72;
  }
  if (v51 <= 2) {
    uint64_t v53 = 2;
  }
  else {
    uint64_t v53 = v51;
  }
  uint64_t v54 = v53 - 1;
  uint64_t v55 = (char *)&v16[v38 + 1];
  do
  {
    char v56 = *v55++;
    int v52 = v56 & 0x3F | (v52 << 6);
    --v54;
  }
  while (v54);
  uint64_t v41 = v68;
  if (v52 < 0x10000)
  {
LABEL_72:
    BOOL v60 = (v52 - 12441) >= 4 && (v52 - 65438) >= 2;
    if (!v60 || unicode_combinable((unsigned __int16)v52)) {
      goto LABEL_76;
    }
    goto LABEL_77;
  }
  unsigned int v57 = v52 - 917760;
  unsigned int v58 = v52 - 127995;
  if (v57 < 0xF0 || v58 <= 4) {
LABEL_76:
  }
    v39 += v51;
LABEL_77:
  int64_t v61 = v39 - (unsigned __int8 *)__src;
  memcpy(__dst, __src, v39 - (unsigned __int8 *)__src);
  if (a9)
  {
    uint64_t v62 = (char *)__dst + v61;
    char *v62 = 1;
    v62[1] = a9;
    v61 += 3;
    v62[2] = 5;
  }
  int v44 = a7;
  memcpy((char *)__dst + v61, a5, a4);
  uint64_t v45 = a6;
  uint64_t result = pushPropertyTerm(v41, v61 + a4, (unsigned __int8 *)__dst, a6, a7, a8, 0);
  if (a8 || result)
  {
    if (a9)
    {
      uint64_t v63 = (char *)__dst + v27;
      *uint64_t v63 = 1;
      v63[1] = a9;
      v27 += 3;
      v63[2] = 5;
    }
    memcpy((char *)__dst + v27, a5, a4);
    unint64_t v43 = v27 + a4;
    return pushPropertyTerm(v41, v43, (unsigned __int8 *)__dst, v45, v44, a8, 0);
  }
  return result;
}

void CITokenizerStateInit(uint64_t a1, CFStringRef theString, int a3, int a4)
{
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (theString) {
    CFIndex Length = CFStringGetLength(theString);
  }
  else {
    CFIndex Length = 0;
  }
  CharactersPtr = CFStringGetCharactersPtr(theString);
  *(void *)(a1 + 96) = CharactersPtr;
  if (!CharactersPtr)
  {
    int v10 = (UniChar *)malloc_type_malloc(2 * Length + 32, 0xBD203FB0uLL);
    *(void *)(a1 + 104) = v10;
    if (!v10)
    {
      uint64_t v19 = __si_assert_copy_extra_329();
      int v20 = v19;
      if (v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = "";
      }
      uint64_t v22 = __error();
      __message_assert("%s:%u: failed assertion '%s' %s alloc err:%d (%x)", "CITokenizer.c", 78, "state->uniChars", v21, *v22, Length);
      free(v20);
      if (__valid_fs(-1)) {
        uint64_t v23 = 2989;
      }
      else {
        uint64_t v23 = 3072;
      }
      *(_DWORD *)uint64_t v23 = -559038737;
      abort();
    }
    v24.location = 0;
    v24.length = Length;
    CFStringGetCharacters(theString, v24, v10);
    *(void *)(a1 + 96) = *(void *)(a1 + 104);
  }
  *(void *)(a1 + 120) = Length;
  if (!a3 || (int)Length < 1) {
    goto LABEL_15;
  }
  unorm2_getNFCInstance();
  if (unorm2_quickCheck() == 1)
  {
    *(unsigned char *)(a1 + 128) = 1;
    if (!a4) {
      return;
    }
    goto LABEL_16;
  }
  uint64_t v11 = malloc_type_malloc(2 * Length, 0x1000040BDFB0063uLL);
  if (!v11)
  {
LABEL_15:
    if (!a4) {
      return;
    }
    goto LABEL_16;
  }
  unsigned int v12 = v11;
  int v13 = unorm2_normalize();
  int v17 = v13;
  *(unsigned char *)(a1 + 128) = 1;
  if (v13 == Length && !memcmp(*(const void **)(a1 + 96), v12, Length))
  {
    free(v12);
    goto LABEL_15;
  }
  if (v17 < (int)Length) {
    LODWORD(Length) = v17;
  }
  unint64_t v18 = *(void **)(a1 + 104);
  if (v18) {
    free(v18);
  }
  *(void *)(a1 + 96) = v12;
  *(void *)(a1 + 104) = v12;
  *(void *)(a1 + 112) = CFStringCreateWithCharactersNoCopy(0, (const UniChar *)v12, (int)Length, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  *(void *)(a1 + 120) = (int)Length;
  if (a4)
  {
LABEL_16:
    uint64_t v14 = *(void *)(a1 + 120);
    if (v14 >= 2)
    {
      uint64_t v15 = *(void *)(a1 + 96);
      uint64_t v16 = v15 + 2 * v14;
      if (*(_WORD *)(v16 - 2) == 42
        && (*(_WORD *)(v16 - 4) != 92 || (unint64_t)v14 >= 3 && *(_WORD *)(v15 + 2 * v14 - 6) != 92))
      {
        *(unsigned char *)(a1 + 129) = 1;
      }
    }
  }
}

uint64_t positionInfoAlloc(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = a2 >> 3;
  if ((a2 & 7) != 0) {
    LODWORD(v3) = v3 + 1;
  }
  uint64_t v4 = atomic_load((unsigned int *)(a1 + 28));
  atomic_fetch_add((atomic_uint *volatile)(a1 + 28), v3);
  if (v4 + a2 > *(void *)(a1 + 48) + 0x8000)
  {
    *(void *)(a1 + 48) = ((v4 + a2) & 0xFFFFFFFFFFFC0000) + 0x40000;
    madvise((void *)((*(void *)(a1 + 16) + 8 * v4 + 8 * a2) & 0xFFFFFFFFFFFC0000), 0x40000uLL, 3);
  }
  while (1)
  {
    unsigned int v5 = atomic_load((unsigned int *)(a1 + 28));
    uint64_t v6 = *(unsigned int *)(a1 + 32);
    if (v5 < v6) {
      break;
    }
    unsigned int v7 = 2 * v6;
    if (!v6) {
      unsigned int v7 = 0x20000;
    }
    *(_DWORD *)(a1 + 32) = v7;
    if (my_vm_reallocate((void **)(a1 + 16), 8 * v6, 8 * v7, 247, *(void *)(a1 + 56)))
    {
      int v8 = __si_assert_copy_extra_329();
      int v9 = v8;
      int v10 = "";
      if (v8) {
        int v10 = v8;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "CIPositions.h", 130, "0 == kr", v10);
      free(v9);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
  }
  return v4;
}

uint64_t _getContentSubTokensCallback(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return getContentTokensCallback(a1, a2, 1, a4);
}

uint64_t my_vm_reallocate(void **a1, size_t a2, size_t a3, int a4, uint64_t a5)
{
  int v9 = *a1;
  uint64_t result = my_vm_allocate(a1, a3, (a4 << 24) | 1u);
  if (a2 && v9)
  {
    if (result)
    {
      *a1 = v9;
      return result;
    }
    if (a2 <= 4 * *MEMORY[0x1E4F14B00])
    {
      memcpy(*a1, v9, a2);
      if (a5) {
        goto LABEL_7;
      }
    }
    else
    {
      vm_copy(*MEMORY[0x1E4F14960], (vm_address_t)v9, a2, (vm_address_t)*a1);
      if (a5)
      {
LABEL_7:
        v11[0] = MEMORY[0x1E4F143A8];
        v11[1] = 0x40000000;
        v11[2] = __my_vm_reallocate_block_invoke;
        v11[3] = &__block_descriptor_tmp_6289;
        v11[4] = v9;
        v11[5] = a2;
        char v12 = a4;
        (*(void (**)(uint64_t, void *))(a5 + 16))(a5, v11);
        return 0;
      }
    }
    atomic_fetch_add_explicit(&tag_sizes[a4 - 240], -(uint64_t)a2, memory_order_relaxed);
    munmap(v9, a2);
    return 0;
  }
  return result;
}

void *copyQueryTokensCallback(unsigned __int16 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  bzero(__s, 0x414uLL);
  uint64_t result = (void *)utf8_encodestr(a1, 2 * a2, __s, v12, 1043);
  if (!result)
  {
    size_t v7 = strlen(__s);
    int v8 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v7 + 1, 0x6085D6BuLL);
    if (!v8 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)char v12 = 0;
      _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", v12, 2u);
    }
    memcpy(v8, __s, v7);
    *((unsigned char *)v8 + v7) = 0;
    int v10 = *(_DWORD *)(a3 + 8);
    int v9 = *(_DWORD *)(a3 + 12);
    uint64_t result = *(void **)a3;
    if (v9 >= v10)
    {
      int v11 = 2 * v10;
      if (!v10) {
        int v11 = 16;
      }
      *(_DWORD *)(a3 + 8) = v11;
      uint64_t result = malloc_type_realloc(result, 8 * v11, 0x80040B8603338uLL);
      *(void *)a3 = result;
      int v9 = *(_DWORD *)(a3 + 12);
    }
    *(_DWORD *)(a3 + 12) = v9 + 1;
    *((void *)result + v9) = v8;
  }
  return result;
}

uint64_t _CITokenizerGetQueryTokensStart(uint64_t result, uint64_t a2, void *a3)
{
  a3[5] = result;
  a3[2] = result;
  a3[3] = result + 2 * a2;
  return result;
}

uint64_t _CITokenizerGetQueryTokensEnd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 48);
  if (v3) {
    return (*(uint64_t (**)(void, uint64_t, void))a3)(*(void *)(a3 + 32), v3, *(void *)(a3 + 8));
  }
  return result;
}

uint64_t _CITokenizerGetQueryTokens(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    unsigned int v5 = (_WORD *)a1;
    if (*(void *)(a4 + 16) <= a1)
    {
      uint64_t v6 = a2;
      unint64_t v7 = *(void *)(a4 + 24);
      if (v7 > a1 && a1 + 2 * a2 <= v7)
      {
        int v9 = (_WORD *)(a1 - 2);
        unint64_t v10 = *(void *)(a4 + 40);
        if (a1 - 2 >= v10)
        {
          int v11 = (_WORD *)(a1 - 2);
          while (1)
          {
            int v12 = (unsigned __int16)*v11--;
            if (v12 != 42) {
              break;
            }
            if ((unint64_t)v11 > v10 && *v11 == 92) {
              goto LABEL_15;
            }
            --v5;
            ++v6;
            int v9 = v11;
            if ((unint64_t)v11 < v10)
            {
              unsigned int v5 = v11 + 1;
              goto LABEL_15;
            }
          }
          unsigned int v5 = v9 + 1;
        }
LABEL_15:
        uint64_t v13 = *(void *)(a4 + 48);
        if (v13)
        {
          uint64_t v14 = *(void *)(a4 + 32);
          for (unint64_t i = (_WORD *)(v14 + 2 * v13); i < v5 && *i == 42; ++i)
            *(void *)(a4 + 48) = ++v13;
          uint64_t v16 = (_WORD *)(v14 + 2 * v13);
          if (v16 == v5)
          {
            if (*(v16 - 1) == 42 && (v13 < 2 || *(_WORD *)(v14 + 2 * v13 - 4) != 92))
            {
              *(void *)(a4 + 48) = v13 + v6;
              return 0;
            }
          }
          else
          {
            (*(void (**)(void))a4)();
            uint64_t v13 = 0;
            uint64_t v17 = *(void *)(a4 + 32) + 2 * *(void *)(a4 + 48);
            *(void *)(a4 + 32) = 0;
            *(void *)(a4 + 40) = v17;
            *(void *)(a4 + 48) = 0;
          }
        }
        unint64_t v18 = &v5[v6];
        if (*(v18 - 1) == 42 && (v6 < 2 || v5[v6 - 2] != 92)
          || (unint64_t)v18 < *(void *)(a4 + 24) && *v18 == 42)
        {
          uint64_t v19 = *(_WORD **)(a4 + 32);
          if (!v19)
          {
            *(void *)(a4 + 32) = v5;
            uint64_t v19 = v5;
          }
          *(void *)(a4 + 40) = &v19[v13 + v6];
          *(void *)(a4 + 48) = v13 + v6;
        }
        else
        {
          if (v13)
          {
            (*(void (**)(void, uint64_t, void))a4)(*(void *)(a4 + 32), v13, *(void *)(a4 + 8));
            uint64_t v20 = *(void *)(a4 + 32) + 2 * *(void *)(a4 + 48);
            *(void *)(a4 + 32) = 0;
            *(void *)(a4 + 40) = v20;
            *(void *)(a4 + 48) = 0;
          }
          (*(void (**)(_WORD *, uint64_t, void))a4)(v5, v6, *(void *)(a4 + 8));
          *(void *)(a4 + 40) = v18;
        }
      }
    }
  }
  return 0;
}

uint64_t sdb_key_hash(_DWORD *a1)
{
  HIDWORD(v1) = 1713515327 * *a1;
  LODWORD(v1) = HIDWORD(v1);
  int v2 = (1107688271 * (v1 >> 21)) ^ 0x1F0A2598;
  HIDWORD(v1) = 2049437143 * a1[1];
  LODWORD(v1) = HIDWORD(v1);
  int v3 = -1242805215 * (v1 >> 21);
  HIDWORD(v1) = v2;
  LODWORD(v1) = v2;
  int v4 = (5 * (v1 >> 19) + 1390208809) ^ v3;
  HIDWORD(v1) = -565921073 * a1[2];
  LODWORD(v1) = HIDWORD(v1);
  int v5 = -110370757 * (v1 >> 21);
  HIDWORD(v1) = v4;
  LODWORD(v1) = v4;
  int v6 = (5 * (v1 >> 19) + 1390208809) ^ v5;
  HIDWORD(v1) = -757810265 * a1[3];
  LODWORD(v1) = HIDWORD(v1);
  int v7 = v1 >> 21;
  HIDWORD(v1) = v6;
  LODWORD(v1) = v6;
  unsigned int v8 = -2048144789 * ((1256834237 * v7) ^ (5 * (v1 >> 19) + 1390208809) ^ 0x10);
  return (-1028477387 * (v8 ^ (v8 >> 13))) ^ ((-1028477387 * (v8 ^ (v8 >> 13))) >> 16);
}

uint64_t si_resultqueue_count(uint64_t a1)
{
  int v2 = (pthread_mutex_t *)(a1 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 8));
  uint64_t v3 = si_simplequeue_count_locked(a1);
  pthread_mutex_unlock(v2);
  return v3;
}

int *SIResultQueueDequeue(CFAbsoluteTime *a1, float a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(*(void *)a1 + 8));
  a1[8] = CFAbsoluteTimeGetCurrent();
  if (*((unsigned char *)a1 + 12))
  {
    uint64_t v4 = *(void *)a1;
LABEL_4:
    pthread_mutex_unlock((pthread_mutex_t *)(v4 + 8));
    int v5 = 0;
    int v6 = 0;
    int v7 = 0;
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)a1;
  if (*((_DWORD *)a1 + 21)) {
    goto LABEL_4;
  }
  uint64_t v9 = *(void *)(v4 + 136);
  uint64_t v10 = *(unsigned int *)(v4 + 124);
  int v5 = *(int **)(v9 + 8 * v10);
  if (v5)
  {
    *(void *)(v9 + 8 * v10) = 0;
    *(_DWORD *)(v4 + 124) = (*(_DWORD *)(v4 + 120) - 1) & (v10 + 1);
    if (si_simplequeue_count_locked(*(void *)a1) >= *((_DWORD *)a1 + 4))
    {
      unsigned int v11 = 0;
      int v7 = 0;
      int v6 = 0;
    }
    else
    {
      int v6 = (char *)*((void *)a1 + 3);
      int v7 = (char *)*((void *)a1 + 4);
      unsigned int v11 = *((_DWORD *)a1 + 10);
      a1[4] = 0.0;
      a1[5] = 0.0;
      a1[3] = 0.0;
    }
LABEL_18:
    *((void *)a1 + 9) -= countForBatch(v5);
    goto LABEL_19;
  }
  if (a2 == 0.0) {
    goto LABEL_4;
  }
  if (si_simplequeue_count_locked(v4) >= *((_DWORD *)a1 + 4))
  {
    int v6 = 0;
    int v7 = 0;
    unsigned int v11 = 0;
  }
  else
  {
    int v6 = (char *)*((void *)a1 + 3);
    int v7 = (char *)*((void *)a1 + 4);
    unsigned int v11 = *((_DWORD *)a1 + 10);
    a1[4] = 0.0;
    a1[5] = 0.0;
    a1[3] = 0.0;
  }
  int v5 = (int *)si_dequeue_wait_locked(*(void *)a1, a2);
  if (si_simplequeue_count_locked(*(void *)a1) < *((_DWORD *)a1 + 4) && !v6)
  {
    int v6 = (char *)*((void *)a1 + 3);
    int v7 = (char *)*((void *)a1 + 4);
    unsigned int v11 = *((_DWORD *)a1 + 10);
    a1[4] = 0.0;
    a1[5] = 0.0;
    a1[3] = 0.0;
  }
  if (v5) {
    goto LABEL_18;
  }
LABEL_19:
  pthread_mutex_unlock((pthread_mutex_t *)(*(void *)a1 + 8));
  if (v11)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 8 * v11;
    do
    {
      (*(void (**)(void, void))&v6[v12])(*(void *)&v7[v12], 0);
      v12 += 8;
    }
    while (v13 != v12);
  }
LABEL_5:
  free(v7);
  free(v6);
  return v5;
}

uint64_t countForBatch(int *a1)
{
  if (a1 == (int *)-1) {
    return 0;
  }
  int v2 = *a1;
  uint64_t result = 1;
  switch(v2)
  {
    case 0:
      uint64_t result = 80 * *((void *)a1 + 5);
      break;
    case 1:
    case 7:
    case 9:
      if (*((void *)a1 + 5)) {
        ByteVectoruint64_t Count = _MDPlistBytesGetByteVectorCount();
      }
      else {
        ByteVectoruint64_t Count = 0;
      }
      uint64_t result = ByteVectorCount + 8 * _MDStoreOIDArrayGetVectorCount();
      break;
    case 2:
    case 3:
    case 11:
      uint64_t result = _MDPlistBytesGetByteVectorCount();
      break;
    case 4:
    case 5:
    case 6:
    case 8:
      return result;
    case 10:
      uint64_t result = _MDPlistContainerGetLength();
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t si_simplequeue_count_locked(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 128);
  unsigned int v2 = *(_DWORD *)(a1 + 120);
  if ((-v2 & v1) != 0 || (unsigned int v3 = *(_DWORD *)(a1 + 124), (v3 & ~(v2 - 1)) != 0))
  {
    int v7 = __si_assert_copy_extra_329();
    __message_assert_333((uint64_t)v7, v8, v9, v10, v11, v12, v13, v14, (char)"SISimpleQueue.c");
    free(v7);
    if (__valid_fs(-1)) {
      uint64_t v15 = 2989;
    }
    else {
      uint64_t v15 = 3072;
    }
    *(_DWORD *)uint64_t v15 = -559038737;
    abort();
  }
  if (v3 <= v1) {
    int v4 = 0;
  }
  else {
    int v4 = *(_DWORD *)(a1 + 120);
  }
  uint64_t v5 = v4 - v3 + v1;
  if (!v5)
  {
    if (*(void *)(*(void *)(a1 + 136) + 8 * v1)) {
      return v2;
    }
    else {
      return 0;
    }
  }
  return v5;
}

uint64_t __preIterateQueryForIndex_block_invoke_163(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  uint64_t v176 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(_WORD *)(a2 + 48) & 0xFFF7;
  if (v4 > 0x20) {
    goto LABEL_200;
  }
  if (((1 << (*(_WORD *)(a2 + 48) & 0xF7)) & 0x100010006) != 0) {
    return v2;
  }
  if (v4 != 4)
  {
LABEL_200:
    int v147 = __si_assert_copy_extra_625(*(_DWORD *)(*(void *)(a1 + 64) + 32));
    char v148 = v147;
    unsigned int v149 = "";
    if (v147) {
      unsigned int v149 = v147;
    }
    __message_assert("%s:%u: failed assertion '%s' %s Bad query node; unexpected type %d",
      "SIQueryC.c",
      5570,
      "0",
      v149,
      *(unsigned __int16 *)(v2 + 48));
    free(v148);
    if (__valid_fs(*(_DWORD *)(*(void *)(v3 + 64) + 32))) {
      uint64_t v150 = 2989;
    }
    else {
      uint64_t v150 = 3072;
    }
    *(_DWORD *)uint64_t v150 = -559038737;
    abort();
  }
  if (dword_1E9FC90A8 >= 5)
  {
    int v124 = *__error();
    uint64_t v125 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1BD672000, v125, OS_LOG_TYPE_DEFAULT, "Factor.", buf, 2u);
    }
    *__error() = v124;
  }
  int v6 = *(uint64_t **)(v3 + 48);
  uint64_t v7 = *v6;
  if (**(void **)(v3 + 40) + 1 >= (unint64_t)*v6)
  {
    *int v6 = 2 * v7;
    *(void *)(*(void *)(*(void *)(v3 + 32) + 8) + 24) = malloc_type_realloc(*(void **)(*(void *)(*(void *)(v3 + 32) + 8)+ 24), 16 * v7, 0x2004093837F09uLL);
  }
  uint64_t v8 = *(void *)(v2 + 16);
  if ((*(unsigned char *)(v8 + 33) & 8) != 0) {
    goto LABEL_12;
  }
  if (dword_1E9FC90A8 >= 5)
  {
    int v129 = *__error();
    uint64_t v130 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1BD672000, v130, OS_LOG_TYPE_DEFAULT, "Metadata or Content.", buf, 2u);
    }
    *__error() = v129;
    uint64_t v8 = *(void *)(v2 + 16);
  }
  if (!*(unsigned char *)(v3 + 88) && expensiveNodeCheck(v8))
  {
LABEL_12:
    **(unsigned char **)(v3 + 56) = 1;
    return v2;
  }
  uint64_t v9 = *(void *)(v8 + 32);
  if ((v9 & 0x6000000) != 0) {
    **(unsigned char **)(v3 + 56) = 1;
  }
  int v10 = *(_DWORD *)(v8 + 24);
  if ((v10 - 11) < 2)
  {
    unint64_t v37 = *(char **)v8;
    if (dword_1E9FC90A8 >= 5)
    {
      int v131 = *__error();
      uint64_t v132 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1BD672000, v132, OS_LOG_TYPE_DEFAULT, "Range query.", buf, 2u);
      }
      *__error() = v131;
      uint64_t v8 = *(void *)(v2 + 16);
    }
    if (*(_DWORD *)(v8 + 40) != 2) {
      return v2;
    }
    if (**(unsigned char **)v8 == 42 && !*(unsigned char *)(*(void *)v8 + 1))
    {
      int v39 = 1;
    }
    else
    {
      int id_for_field_locked = db_get_id_for_field_locked(*(int **)(*(void *)(v3 + 64) + 1184), v37);
      uint64_t v8 = *(void *)(v2 + 16);
      if (id_for_field_locked == -2)
      {
        if (*(float *)(v8 + 52) == 0.0 && *(float *)(v8 + 56) == 0.0)
        {
LABEL_67:
          int v42 = *(_DWORD *)(v8 + 24);
LABEL_105:
          unsigned int v81 = v42 - 5;
          if (v81 > 7) {
            __int16 v82 = 16;
          }
          else {
            __int16 v82 = word_1BDA82990[v81];
          }
          *(_WORD *)(v2 + 48) = v82;
          return v2;
        }
        int v39 = -2;
      }
      else
      {
        int v39 = id_for_field_locked;
      }
    }
    if (*(unsigned char *)(v8 + 34))
    {
      uint64_t v55 = *(CFAbsoluteTime **)(v8 + 272);
      if (!v55)
      {
        *(void *)(*(void *)(v2 + 16) + 272) = malloc_type_calloc(1uLL, 8 * *(int *)(v8 + 40), 0x100004000313F17uLL);
        *(void *)long long buf = 0;
        double v56 = strtod(**(const char ***)(*(void *)(v2 + 16) + 168), (char **)buf);
        uint64_t v57 = *(void *)(v2 + 16);
        **(double **)(v57 + 272) = v56;
        double v58 = strtod(*(const char **)(*(void *)(v57 + 168) + 8), (char **)buf);
        uint64_t v59 = *(void *)(v2 + 16);
        *(double *)(*(void *)(v59 + 272) + 8) = v58;
        uint64_t v55 = *(CFAbsoluteTime **)(v59 + 272);
      }
      uint64_t v53 = CFDateCreate((CFAllocatorRef)kCIQueryZoneAllocator, *v55);
      CFStringRef v54 = (const __CFString *)CFDateCreate((CFAllocatorRef)kCIQueryZoneAllocator, *(CFAbsoluteTime *)(*(void *)(*(void *)(v2 + 16) + 272) + 8));
    }
    else
    {
      uint64_t v53 = copyName(**(const char ***)(v8 + 168));
      CFStringRef v54 = copyName(*(const char **)(*(void *)(*(void *)(v2 + 16) + 168) + 8));
    }
    CFStringRef v60 = v54;
    if (dword_1E9FC90A8 >= 5)
    {
      uint64_t v135 = v3;
      int v136 = *__error();
      char v137 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412802;
        *(void *)&uint8_t buf[4] = v53;
        __int16 v172 = 2080;
        uint64_t v173 = v37;
        __int16 v174 = 2112;
        double v175 = *(double *)&v60;
        _os_log_impl(&dword_1BD672000, v137, OS_LOG_TYPE_DEFAULT, "Range query: %@ < %s < %@", buf, 0x20u);
      }
      *__error() = v136;
      uint64_t v3 = v135;
    }
    *(void *)(*(void *)(*(void *)(*(void *)(v3 + 32) + 8) + 24) + 8 * **(void **)(v3 + 40)) = ContentIndexQueryNodeForRange(v53, v60, v39, 1, 1);
    int64_t v61 = *(uint64_t **)(v3 + 40);
    uint64_t v62 = *v61;
    *(void *)(*(void *)(*(void *)(*(void *)(*(void *)(v3 + 32) + 8) + 24) + 8 * *v61) + 12) = *(void *)(*(void *)(v2 + 16) + 52);
    *int64_t v61 = v62 + 1;
    CFRelease(v53);
    CFStringRef v63 = v60;
LABEL_175:
    CFRelease(v63);
    return v2;
  }
  if ((v10 - 13) < 2)
  {
    unsigned int v11 = db_get_id_for_field_locked(*(int **)(*(void *)(v3 + 64) + 1184), *(char **)v8);
    uint64_t v12 = *(void *)(v2 + 16);
    unint64_t v13 = *(unsigned int *)(v12 + 40);
    size_t v14 = (v13 << 6) | 0x28;
    if (((v13 >> 11) & 0x7FFFFFFFFFFFLL) == 0 && v14 > *MEMORY[0x1E4F14B00]) {
      ++sTotal_11167;
    }
    uint64_t v158 = v3;
    uint64_t v159 = v2;
    uint64_t v15 = *(const char ***)(v12 + 168);
    uint64_t v16 = (malloc_zone_t **)&unk_1EC037000;
    uint64_t v17 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v14, 0x31F9A007uLL);
    if (!v17) {
      _log_fault_for_malloc_failure();
    }
    *(void *)((char *)v17 + 4) = 0x400000;
    if (v13)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 1;
      *(_DWORD *)uint64_t v17 = 1;
      v17[4] = v17 + 5;
      if ((v11 & 0x3F80) != 0) {
        uint64_t v19 = 2;
      }
      uint64_t v20 = 4;
      if (v11 >> 28) {
        uint64_t v20 = 5;
      }
      if ((v11 & 0x1FC000) != 0) {
        uint64_t v19 = 3;
      }
      if (v11 >= 0x200000) {
        uint64_t v19 = v20;
      }
      uint64_t v162 = v19;
      uint64_t v21 = v13 << 6;
      while (1)
      {
        uint64_t v22 = v17[4];
        uint64_t v23 = *v15;
        size_t v24 = strlen(*v15);
        BOOL v25 = malloc_type_zone_malloc(v16[98], v24 + v162 + 4, 0x6085D6BuLL);
        if (!v25) {
          _log_fault_for_malloc_failure();
        }
        if ((int)v11 >= 2) {
          break;
        }
        memcpy(v25, v23, v24);
        int v35 = v11;
LABEL_44:
        v25[v24] = 0;
        uint64_t v36 = v22 + v18;
        *(void *)uint64_t v36 = v25;
        *(void *)(v36 + 8) = 0;
        *(_DWORD *)(v36 + 16) = 256;
        *(_DWORD *)(v36 + 20) = v35;
        *(void *)(v36 + 24) = 8;
        *(_OWORD *)(v36 + 32) = 0u;
        *(_OWORD *)(v36 + 48) = 0u;
        ++*((_DWORD *)v17 + 6);
        v18 += 64;
        ++v15;
        if (v21 == v18) {
          goto LABEL_68;
        }
      }
      *(_WORD *)BOOL v25 = 513;
      char v26 = v11 >> 28;
      if (v11 >> 28)
      {
        uint64_t v27 = 3;
        char v28 = (v11 >> 7) | 0x80;
        v25[2] = v11 | 0x80;
        uint64_t v29 = 4;
        char v30 = (v11 >> 21) | 0x80;
        char v31 = (v11 >> 14) | 0x80;
        uint64_t v32 = 5;
        uint64_t v33 = 6;
        uint64_t v34 = 7;
      }
      else
      {
        if ((v11 & 0xFE00000) == 0)
        {
          if ((v11 & 0x1FC000) == 0)
          {
            if ((v11 & 0x3F80) == 0)
            {
              uint64_t v33 = 2;
              char v26 = v11;
              uint64_t v34 = 3;
              goto LABEL_43;
            }
            uint64_t v32 = 2;
            char v30 = v11 | 0x80;
            uint64_t v33 = 3;
            char v26 = (unsigned __int16)(v11 & 0x3F80) >> 7;
            uint64_t v34 = 4;
LABEL_42:
            v25[v32] = v30;
LABEL_43:
            v25[v33] = v26;
            memcpy(&v25[v34], v23, v24);
            v24 += v34;
            int v35 = -1;
            uint64_t v16 = (malloc_zone_t **)&unk_1EC037000;
            goto LABEL_44;
          }
          uint64_t v29 = 2;
          char v30 = (v11 >> 7) | 0x80;
          char v31 = v11 | 0x80;
          uint64_t v32 = 3;
          uint64_t v33 = 4;
          char v26 = (v11 & 0x1FC000) >> 14;
          uint64_t v34 = 5;
LABEL_41:
          v25[v29] = v31;
          goto LABEL_42;
        }
        uint64_t v27 = 2;
        char v31 = (v11 >> 7) | 0x80;
        char v28 = v11 | 0x80;
        uint64_t v29 = 3;
        uint64_t v32 = 4;
        char v30 = (v11 >> 14) | 0x80;
        uint64_t v33 = 5;
        char v26 = (v11 >> 21) & 0x7F;
        uint64_t v34 = 6;
      }
      v25[v27] = v28;
      goto LABEL_41;
    }
LABEL_68:
    uint64_t v2 = v159;
    *(void *)(*(void *)(*(void *)(*(void *)(v158 + 32) + 8) + 24) + 8 * **(void **)(v158 + 40)) = v17;
    uint64_t v43 = *(void *)(v158 + 32);
    int v44 = *(uint64_t **)(v158 + 40);
LABEL_69:
    uint64_t v45 = *v44;
    *(void *)(*(void *)(*(void *)(*(void *)(v43 + 8) + 24) + 8 * *v44) + 12) = *(void *)(*(void *)(v2 + 16) + 52);
    *int v44 = v45 + 1;
    return v2;
  }
  if (v10 != 15)
  {
    if (everythingQuery(v8))
    {
      int v46 = *__error();
      unsigned int v47 = _SILogForLogForCategory(1);
      os_log_type_t v48 = 2 * (dword_1E9FC90A8 < 4);
      if (os_log_type_enabled(v47, v48))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1BD672000, v47, v48, "Found *=* query", buf, 2u);
      }
      *__error() = v46;
      return v2;
    }
    unint64_t v49 = *(char **)v8;
    if (**(unsigned char **)v8 == 42 && !v49[1])
    {
      uint64_t v50 = 1;
    }
    else if ((v9 & 0x400) != 0)
    {
      uint64_t v50 = 0;
    }
    else
    {
      if ((v9 & 0x40000) != 0)
      {
        NodeForOidPath = ContentIndexQueryNodeForOidPath(*(const void **)(v8 + 288), *(int *)(v8 + 40), (v9 & 0x80000) == 0);
        BOOL v65 = *(void **)(v3 + 40);
        uint64_t v66 = *(void *)(*(void *)(*(void *)(v3 + 32) + 8) + 24);
        uint64_t v67 = (*v65)++;
        *(void *)(v66 + 8 * v67) = NodeForOidPath;
        *(void *)(*(void *)(*(void *)(*(void *)(*(void *)(v3 + 32) + 8) + 24)
                              + 8 * **(void **)(v3 + 40)
                              - 8)
                  + 12) = *(void *)(*(void *)(v2 + 16) + 52);
        return v2;
      }
      uint64_t v50 = db_get_id_for_field_locked(*(int **)(*(void *)(v3 + 64) + 1184), v49);
      if (v50 == -2) {
        goto LABEL_104;
      }
    }
    CFStringRef String = copyQueryString(v2);
    if (!String)
    {
      if (dword_1E9FC90A8 >= 5)
      {
        int v142 = *__error();
        uint64_t v143 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v144 = *(uint64_t **)(v2 + 16);
          uint64_t v145 = *v144;
          unsigned int v146 = (void *)v144[9];
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = v145;
          __int16 v172 = 2080;
          uint64_t v173 = v146;
          _os_log_impl(&dword_1BD672000, v143, OS_LOG_TYPE_DEFAULT, "No string for %s = %s", buf, 0x16u);
        }
        *__error() = v142;
      }
LABEL_104:
      int v42 = *(_DWORD *)(*(void *)(v2 + 16) + 24);
      goto LABEL_105;
    }
    CFStringRef v69 = String;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v71 = *(void *)(v2 + 16);
    double v72 = Current;
    switch(*(_DWORD *)(v71 + 24))
    {
      case 1:
      case 5:
        goto LABEL_96;
      case 2:
      case 6:
        **(unsigned char **)(v3 + 56) = 1;
LABEL_96:
        uint64_t v73 = *(void *)(v71 + 32);
        unsigned int v74 = (v73 >> 4) & 1;
        if ((v73 & 0x800000) != 0) {
          unsigned int v74 = (v73 >> 4) & 1 | ((*(unsigned char *)(v71 + 28) & 0x7F) << 18) | 0x10000;
        }
        if (v50 <= 1)
        {
          if (CFEqual(v69, @"*"))
          {
            int v75 = db_get_id_for_field_locked(*(int **)(*(void *)(v3 + 64) + 1184), "_kMDItemTextContentIndexExists");
            if (v75 != -2)
            {
              int v94 = v75;
              *(_DWORD *)long long buf = 1;
              CFNumberRef v95 = CFNumberCreate((CFAllocatorRef)kCIQueryZoneAllocator, kCFNumberSInt32Type, buf);
              if (v95)
              {
                CFNumberRef v96 = v95;
                NodeForRange = ContentIndexQueryNodeForRange(v95, v95, v94, 1, 1);
                int v98 = *(void **)(v3 + 40);
                uint64_t v99 = *(void *)(*(void *)(*(void *)(v3 + 32) + 8) + 24);
                uint64_t v100 = (*v98)++;
                *(void *)(v99 + 8 * v100) = NodeForRange;
                *(void *)(*(void *)(*(void *)(*(void *)(*(void *)(v3 + 32) + 8) + 24)
                                      + 8 * **(void **)(v3 + 40)
                                      - 8)
                          + 12) = *(void *)(*(void *)(v2 + 16) + 52);
                CFRelease(v96);
              }
LABEL_173:
              if (dword_1E9FC90A8 >= 5)
              {
                int v138 = *__error();
                char v139 = _SILogForLogForCategory(1);
                if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v140 = **(void **)(v2 + 16);
                  CFAbsoluteTime v141 = CFAbsoluteTimeGetCurrent();
                  *(_DWORD *)long long buf = 136315650;
                  *(void *)&uint8_t buf[4] = v140;
                  __int16 v172 = 2112;
                  uint64_t v173 = (void *)v69;
                  __int16 v174 = 2048;
                  double v175 = v141 - v72;
                  _os_log_impl(&dword_1BD672000, v139, OS_LOG_TYPE_DEFAULT, "Matched factor %s = %@ in %f seconds", buf, 0x20u);
                }
                *__error() = v138;
              }
              CFStringRef v63 = v69;
              goto LABEL_175;
            }
          }
        }
        uint64_t v76 = *(void *)(v3 + 64);
        if (v50 == *(_DWORD *)(v76 + 2000))
        {
          CFStringRef v77 = v69;
          CFStringRef v78 = v69;
          int v79 = v50;
          int v80 = 1;
LABEL_121:
          int v89 = 1;
LABEL_127:
          BOOL v90 = ContentIndexQueryNodeForRange(v77, v78, v79, v80, v89);
          uint64_t v91 = *(void **)(v3 + 40);
          uint64_t v92 = *(void *)(*(void *)(*(void *)(v3 + 32) + 8) + 24);
          uint64_t v93 = (*v91)++;
          *(void *)(v92 + 8 * v93) = v90;
          *(void *)(*(void *)(*(void *)(*(void *)(*(void *)(v3 + 32) + 8) + 24)
                                + 8 * **(void **)(v3 + 40)
                                - 8)
                    + 12) = *(void *)(*(void *)(v2 + 16) + 52);
          goto LABEL_173;
        }
        unsigned int v83 = (v73 >> 1) & 0x20 | (v73 >> 4) & 2 | (((v73 >> 1) & 1) << 15) & 0xFDFFFFFF | (((v73 >> 15) & 1) << 25) | (v73 >> 1) & 0x4000000 | (v73 >> 11) & 8 | v74;
        uint64_t v84 = *(void *)(v2 + 16);
        if (v84 && !v50 && (uint64_t v85 = *(void *)(v84 + 32) & 0x6000000000) != 0)
        {
          if (v85 == 0x4000000000) {
            int v86 = 4096;
          }
          else {
            int v86 = 0x2000;
          }
          uint64_t v167 = 0;
          uint64_t v168 = &v167;
          if (v85 == 0x6000000000) {
            int v86 = 12288;
          }
          v83 |= v86;
          uint64_t v169 = 0x2000000000;
          char v170 = 0;
        }
        else
        {
          uint64_t v167 = 0;
          uint64_t v168 = &v167;
          uint64_t v169 = 0x2000000000;
          char v170 = 0;
          if ((int)v50 >= 6)
          {
            uint64_t v87 = *(void *)(v76 + 1184);
            uint64_t v88 = *(char **)v84;
            __nel_4[0] = MEMORY[0x1E4F143A8];
            __nel_4[1] = 0x40000000;
            __nel_4[2] = __preIterateQueryForIndex_block_invoke_164;
            __nel_4[3] = &unk_1E6346380;
            __nel_4[4] = &v167;
            __nel_4[5] = v76;
            char v166 = *(unsigned char *)(v3 + 89);
            db_apply_for_field_ids_matching_name_locked(v87, v88, (uint64_t)__nel_4);
            goto LABEL_132;
          }
          if (v50)
          {
LABEL_132:
            uint64_t v102 = *(void *)(v3 + 80);
            if (v102) {
              uint64_t v103 = *(void *)(v102 + 144);
            }
            else {
              uint64_t v103 = 0;
            }
            uint64_t v104 = _CIQueryNodeForString(*(void *)(v3 + 72), v69, v50, v83, v103, (*(_DWORD *)(*(void *)(v3 + 64) + 6576) >> 19) & 3, *((unsigned __int8 *)v168 + 24), *(_DWORD *)(*(void *)(v2 + 16) + 60));
            *(void *)(v104 + 3) = *(void *)(*(void *)(v2 + 16) + 52);
            uint64_t v105 = *(void **)(v3 + 40);
            uint64_t v106 = *(void *)(*(void *)(*(void *)(v3 + 32) + 8) + 24);
            uint64_t v107 = (*v105)++;
            *(void *)(v106 + 8 * v107) = v104;
            if (!v50 || !v104 || *(int *)(*(void *)(v3 + 72) + 4) < 84) {
              goto LABEL_172;
            }
            if ((*(unsigned char *)(*(void *)(v2 + 16) + 35) & 6) != 0) {
              v104[2] = 3;
            }
            unsigned int __nel = 0;
            uint64_t v161 = (uint64_t)v104;
            matched = (void *)ContentIndexMatchLocalizedFields(v104, *(void *)(*(void *)(v3 + 64) + 6640), &__nel);
            size_t v109 = __nel;
            qsort_b(matched, __nel, 4uLL, &__block_literal_global_171);
            if (v109)
            {
              uint64_t node = db_clone_query_node((void *)v2);
              uint64_t v111 = (unsigned int *)malloc_type_calloc(4uLL, v109, 0xCF11B334uLL);
              int v163 = (void *)node;
              if (!convert_value_to_type(0xBu, *(void *)(node + 16)))
              {
                uint64_t v160 = v2;
                unint64_t v112 = 0;
                unsigned int v113 = 0;
                do
                {
                  int v114 = *((_DWORD *)matched + v112);
                  if (v112 >= (v109 - 1) || (size_t v115 = v112 + 1, v114 != *((_DWORD *)matched + v112 + 1)))
                  {
                    bzero(buf, 0x400uLL);
                    RawLocalizedUniquedField = getRawLocalizedUniquedField(*(void *)(*(void *)(v3 + 64) + 1184), v114, buf, 1);
                    if (RawLocalizedUniquedField)
                    {
                      uint64_t v117 = RawLocalizedUniquedField;
                      if (do_compare(*(void *)(*(void *)(v3 + 64) + 1184)))
                      {
                        field_name_for_id_uint64_t locked = (char *)db_get_field_name_for_id_locked(*(int **)(*(void *)(v3 + 64) + 1184), v117[1]);
                        if (field_name_for_id_locked)
                        {
                          v111[v113] = db_get_id_for_field_locked(*(int **)(*(void *)(v3 + 64) + 1184), field_name_for_id_locked) | ((*((_WORD *)v117 + 1) & 0x100) << 23);
                          *((_DWORD *)matched + v113++) = *((_DWORD *)matched + v112);
                        }
                      }
                      if (v117 != (_DWORD *)buf) {
                        free(v117);
                      }
                    }
                    size_t v115 = v112 + 1;
                  }
                  unint64_t v112 = v115;
                }
                while (v115 < v109);
                db_free_query_node(v163);
                if (v113)
                {
                  NodeForLocalizedFields = ContentIndexQueryNodeForLocalizedFields(v161, v111, (char *)matched, v113);
                  if (NodeForLocalizedFields)
                  {
                    uint64_t v120 = *(void *)(v160 + 16);
                    if (*(_DWORD *)(v120 + 24) == 5) {
                      *((_DWORD *)NodeForLocalizedFields + 2) = 3;
                    }
                    *(void *)(v120 + 32) |= 0x400000uLL;
                    BOOL v121 = *(void **)(v3 + 40);
                    uint64_t v122 = *(void *)(*(void *)(*(void *)(v3 + 32) + 8) + 24);
                    uint64_t v123 = (*v121)++;
                    *(void *)(v122 + 8 * v123) = NodeForLocalizedFields;
                  }
                }
                uint64_t v2 = v160;
                goto LABEL_171;
              }
            }
            else
            {
              uint64_t v111 = 0;
              int v163 = 0;
            }
            db_free_query_node(v163);
LABEL_171:
            free(v111);
            free(matched);
LABEL_172:
            _Block_object_dispose(&v167, 8);
            goto LABEL_173;
          }
        }
        uint64_t v101 = *(char **)v84;
        if (!strncmp(*(const char **)v84, "_kMDItemOCRContent", 0x12uLL))
        {
          unsigned int v126 = v101 + 18;
          if (!strncmp(v126, "Title", 5uLL))
          {
            v83 |= 0x8000000u;
          }
          else if (!strncmp(v126, "Level1", 6uLL))
          {
            v83 |= 0x10000000u;
          }
          else if (!strncmp(v126, "Level2", 6uLL))
          {
            v83 |= 0x20000000u;
          }
          else
          {
            if (strncmp(v126, "Level3", 6uLL))
            {
              if (dword_1E9FC90A8 >= 5)
              {
                int v151 = *__error();
                uint64_t v152 = _SILogForLogForCategory(1);
                if (os_log_type_enabled(v152, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v153 = **(void **)(v2 + 16);
                  *(_DWORD *)long long buf = 136315138;
                  *(void *)&uint8_t buf[4] = v153;
                  _os_log_impl(&dword_1BD672000, v152, OS_LOG_TYPE_DEFAULT, "Invalid property name %s", buf, 0xCu);
                }
                *__error() = v151;
                uint64_t v84 = *(void *)(v2 + 16);
              }
              unsigned int v127 = *(_DWORD *)(v84 + 24) - 5;
              if (v127 > 7) {
                __int16 v128 = 16;
              }
              else {
                __int16 v128 = word_1BDA82990[v127];
              }
              *(_WORD *)(v2 + 48) = v128;
              goto LABEL_172;
            }
            v83 |= 0x40000000u;
          }
        }
        goto LABEL_132;
      case 3:
        CFStringRef v77 = 0;
        CFStringRef v78 = v69;
        int v79 = v50;
        int v80 = 0;
        goto LABEL_121;
      case 4:
        CFStringRef v77 = v69;
        CFStringRef v78 = 0;
        int v79 = v50;
        int v80 = 1;
        goto LABEL_126;
      case 7:
        CFStringRef v77 = 0;
        CFStringRef v78 = v69;
        goto LABEL_125;
      case 8:
        CFStringRef v77 = v69;
        CFStringRef v78 = 0;
LABEL_125:
        int v79 = v50;
        int v80 = 0;
LABEL_126:
        int v89 = 0;
        goto LABEL_127;
      case 0xF:
        goto LABEL_173;
      default:
        uint64_t v154 = __si_assert_copy_extra_625(*(_DWORD *)(*(void *)(v3 + 64) + 32));
        uint64_t v155 = v154;
        int v156 = "";
        if (v154) {
          int v156 = v154;
        }
        __message_assert("%s:%u: failed assertion '%s' %s Bad query node; unexpected op %d",
          "SIQueryC.c",
          5550,
          "0",
          v156,
          *(_DWORD *)(*(void *)(v2 + 16) + 24));
        free(v155);
        if (__valid_fs(*(_DWORD *)(*(void *)(v3 + 64) + 32))) {
          uint64_t v157 = 2989;
        }
        else {
          uint64_t v157 = 3072;
        }
        *(_DWORD *)uint64_t v157 = -559038737;
        abort();
    }
  }
  BOOL v40 = *(char **)v8;
  if (dword_1E9FC90A8 >= 5)
  {
    int v133 = *__error();
    char v134 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v134, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1BD672000, v134, OS_LOG_TYPE_DEFAULT, "ANN query.", buf, 2u);
    }
    *__error() = v133;
    uint64_t v8 = *(void *)(v2 + 16);
  }
  if (*(_DWORD *)(v8 + 40) == 5)
  {
    if (**(unsigned char **)v8 == 42 && !*(unsigned char *)(*(void *)v8 + 1)
      || (int v41 = db_get_id_for_field_locked(*(int **)(*(void *)(v3 + 64) + 1184), v40),
          uint64_t v8 = *(void *)(v2 + 16),
          v41 != -2)
      || *(float *)(v8 + 52) != 0.0
      || *(float *)(v8 + 56) != 0.0)
    {
      int v51 = db_get_id_for_field_locked(*(int **)(*(void *)(v3 + 64) + 1184), *(char **)v8);
      uint64_t v52 = *(void *)(v2 + 16);
      *(void *)(*(void *)(*(void *)(*(void *)(v3 + 32) + 8) + 24) + 8 * **(void **)(v3 + 40)) = ContentIndexQueryNodeForVector(v51, *(const void **)(v52 + 296), *(_DWORD *)(v52 + 60) & 3, (*(_DWORD *)(v52 + 60) >> 2) & 3, *(_DWORD *)(v52 + 60) >> 25, (*(_DWORD *)(v52 + 60) >> 4) & 0xFFFFF, HIBYTE(*(_DWORD *)(v52 + 60)) & 1, *(float *)(v52 + 64));
      uint64_t v43 = *(void *)(v3 + 32);
      int v44 = *(uint64_t **)(v3 + 40);
      goto LABEL_69;
    }
    goto LABEL_67;
  }
  return v2;
}

uint64_t db_get_id_for_field_locked(int *a1, char *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*a1 != 1685287992)
  {
    int v6 = *__error();
    uint64_t v7 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = *a1;
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "db_get_id_for_field_locked";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 289;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v8;
      _os_log_error_impl(&dword_1BD672000, v7, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v6;
    uint64_t v9 = __si_assert_copy_extra_329();
    int v10 = v9;
    if (v9) {
      unsigned int v11 = v9;
    }
    else {
      unsigned int v11 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 289, v11);
    free(v10);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  memset(buf, 0, 32);
  uint64_t v2 = (uint8_t *)internal_copy_field_ids((uint64_t)a1, a2, (uint64_t)buf, 8uLL, 1);
  if (v2) {
    uint64_t v3 = *(unsigned int *)v2;
  }
  else {
    uint64_t v3 = 4294967294;
  }
  if (v2 != buf) {
    free(v2);
  }
  return v3;
}

BOOL everythingQuery(uint64_t a1)
{
  if (**(unsigned char **)a1 == 42
    && !*(unsigned char *)(*(void *)a1 + 1)
    && *(_DWORD *)(a1 + 24) == 1
    && (uint64_t v1 = *(unsigned char **)(a1 + 72), *v1 == 42))
  {
    return v1[1] == 0;
  }
  else
  {
    return 0;
  }
}

CFStringRef copyQueryString(uint64_t a1)
{
  if ((*(_WORD *)(a1 + 48) & 0xFFF7) != 4) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(const UInt8 **)(v1 + 72);
  if (v2) {
    size_t v3 = strlen(*(const char **)(v1 + 72));
  }
  else {
    size_t v3 = 0;
  }
  CFStringRef v5 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2, v3, 0x8000100u, 0);
  CFStringRef v4 = v5;
  if (v5)
  {
    CFRetain(v5);
    CFRelease(v4);
  }
  return v4;
}

uint64_t db_get_field_name_for_id_locked(int *a1, int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*a1 != 1685287992)
  {
    int v4 = *__error();
    CFStringRef v5 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = *a1;
      *(_DWORD *)long long buf = 136315650;
      unsigned int v11 = "db_get_field_name_for_id_locked";
      __int16 v12 = 1024;
      int v13 = 388;
      __int16 v14 = 1024;
      int v15 = v6;
      _os_log_error_impl(&dword_1BD672000, v5, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v4;
    uint64_t v7 = __si_assert_copy_extra_329();
    int v8 = v7;
    if (v7) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 388, v9);
    free(v8);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  return get_string_and_length_for_id_12082((uint64_t)a1, 0, a2, 0, 1);
}

uint64_t db_eval_obj_with_options(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  int v89 = v2;
  uint64_t v86 = v3;
  uint64_t v87 = v4;
  int v6 = v5;
  int v8 = v7;
  uint64_t v88 = v1;
  v97[6143] = *MEMORY[0x1E4F143B8];
  memset(v91, 0, sizeof(v91));
  long long v90 = 0u;
  DWORD1(v90) = 4;
  if (v9) {
    LODWORD(v90) = 4;
  }
  bzero(v97, 0xBFF8uLL);
  int v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  CFNumberRef v96 = v6;
  int v13 = "<>";
  if (!v88) {
    int v13 = "<<anon store>>";
  }
  uint64_t v85 = v13;
  while (v10 != 1)
  {
    uint64_t v16 = &v97[3 * v12 - 1];
    uint64_t v17 = (int *)(v16 + 2);
    if (!v10)
    {
      uint64_t v18 = v6[8];
      if (v18)
      {
        if (v18 == v8[2])
        {
          uint64_t v19 = (*((unsigned __int16 *)v6 + 28) >> 10) & 1;
          LODWORD(v97[3 * v12]) = v19;
          *uint64_t v17 = 1;
          if (!v12) {
            goto LABEL_126;
          }
          goto LABEL_31;
        }
      }
    }
    switch(v6[6] & 0xFFF7)
    {
      case 1:
        if ((v10 - 2) >= 2)
        {
          if (v10)
          {
            if (*((_DWORD *)v16 + 10) != 1) {
              goto LABEL_139;
            }
            int v48 = *((_DWORD *)v16 + 8);
            int v49 = v89 ^ 1;
            if ((v48 & 0x80000001) == 0) {
              int v49 = 1;
            }
            uint64_t v50 = (int *)&v97[3 * v12];
            int v51 = v48;
            if (v49 == 1)
            {
              int v52 = *v50;
              if (*v50) {
                BOOL v53 = (*v50 & 0x80000001) == 0;
              }
              else {
                BOOL v53 = 0;
              }
              if (v53)
              {
                if (v48) {
                  BOOL v60 = (v48 & 0x80000001) == 0;
                }
                else {
                  BOOL v60 = 0;
                }
                if (v60)
                {
                  int v51 = v52 ^ v48;
                  unsigned int v67 = v52 & v48;
                  if ((v52 & v48) >= 2)
                  {
                    unsigned int v68 = 0;
                    do
                    {
                      if ((v67 & 2) != 0)
                      {
                        BOOL v69 = db_eval_obj_qp_array_union_for_value((uint64_t)&v90, v68);
                        int v70 = 2 << v68;
                        if (v68 >= 0x1E) {
                          int v70 = 0;
                        }
                        int v71 = v70 | v51;
                        if (v69) {
                          int v51 = v71;
                        }
                      }
                      ++v68;
                      BOOL v63 = v67 > 3;
                      v67 >>= 1;
                    }
                    while (v63);
                  }
                }
                else if (v48)
                {
                  int v51 = v48;
                }
                else
                {
                  int v51 = *v50;
                }
              }
              else if (v52)
              {
                int v51 = *v50;
              }
              else
              {
                int v51 = v48;
              }
            }
LABEL_117:
            *uint64_t v50 = v51;
LABEL_8:
            int v14 = 1;
            goto LABEL_9;
          }
          uint64_t v35 = *v6;
          uint64_t v36 = v6[1];
          if (v12 >= v11)
          {
            uint64_t v11 = v12 + 1;
            if (v12 >= 2047)
            {
LABEL_139:
              CFStringRef v77 = __si_assert_copy_extra_329();
              __message_assert_333((uint64_t)v77, v78, v79, v80, v81, v82, v83, v84, (char)"core-query.c");
              free(v77);
              if (__valid_fs(-1))
              {
                MEMORY[0xBAD] = -559038737;
                abort();
              }
              MEMORY[0xC00] = -559038737;
              abort();
            }
          }
          unint64_t v37 = v97 + 3 * v12 + 2;
          *((_DWORD *)v37 + 2) = 0;
          *((_DWORD *)v37 + 4) = 0;
          if ((*(_DWORD *)(v35 + 52) <= *(_DWORD *)(v36 + 52) || (uint64_t v38 = *(void *)(v35 + 64)) != 0 && v38 == v8[2])
            && ((uint64_t v39 = *(void *)(v36 + 64)) == 0 || v39 != v8[2]))
          {
            int v14 = 2;
          }
          else
          {
            int v14 = 3;
            uint64_t v35 = v36;
          }
          void *v37 = v35;
          ++v12;
        }
        else
        {
          if (*((_DWORD *)v16 + 10) != 1) {
            goto LABEL_139;
          }
          int v20 = *((_DWORD *)v16 + 8);
          LODWORD(v97[3 * v12]) = v20;
          if (v89 && (v20 & 0x80000001) != 0) {
            goto LABEL_8;
          }
          if (v12 >= v11)
          {
            uint64_t v11 = v12 + 1;
            if (v12 >= 2047) {
              goto LABEL_139;
            }
          }
          if (v10 == 2) {
            uint64_t v21 = v6 + 1;
          }
          else {
            uint64_t v21 = v6;
          }
          uint64_t v22 = v97 + 3 * v12 + 2;
          *uint64_t v22 = *v21;
          *((_DWORD *)v22 + 2) = 0;
          *((_DWORD *)v22 + 4) = 0;
          int v14 = 4;
          ++v12;
        }
LABEL_9:
        *uint64_t v17 = v14;
        break;
      case 2:
        if ((v10 - 2) < 2)
        {
          if (*((_DWORD *)v16 + 10) != 1) {
            goto LABEL_139;
          }
          int v26 = *((_DWORD *)v16 + 8);
          LODWORD(v97[3 * v12]) = v26;
          if (!v89 || v26)
          {
            if (v12 >= v11) {
              uint64_t v11 = v12 + 1;
            }
            ++v12;
            if (v10 == 2) {
              uint64_t v27 = v6 + 1;
            }
            else {
              uint64_t v27 = v6;
            }
            char v28 = &v97[3 * v12 - 1];
            *char v28 = *v27;
            *((_DWORD *)v28 + 2) = 0;
            *((_DWORD *)v28 + 4) = 0;
            int v14 = 4;
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (!v10)
        {
          uint64_t v40 = *v6;
          uint64_t v41 = v6[1];
          if (v12 >= v11) {
            uint64_t v11 = v12 + 1;
          }
          int v42 = v97 + 3 * v12 + 2;
          *((_DWORD *)v42 + 2) = 0;
          *((_DWORD *)v42 + 4) = 0;
          if ((*(_DWORD *)(v40 + 52) <= *(_DWORD *)(v41 + 52) || (uint64_t v43 = *(void *)(v40 + 64)) != 0 && v43 == v8[2])
            && ((uint64_t v44 = *(void *)(v41 + 64)) == 0 || v44 != v8[2]))
          {
            int v14 = 2;
          }
          else
          {
            int v14 = 3;
            uint64_t v40 = v41;
          }
          void *v42 = v40;
          ++v12;
          goto LABEL_9;
        }
        if (*((_DWORD *)v16 + 10) != 1) {
          goto LABEL_139;
        }
        int v54 = *((_DWORD *)v16 + 8);
        uint64_t v55 = &v97[3 * v12 - 1];
        int v57 = *((_DWORD *)v55 + 2);
        uint64_t v50 = (int *)(v55 + 1);
        int v56 = v57;
        if (v54) {
          BOOL v58 = v56 == 0;
        }
        else {
          BOOL v58 = 1;
        }
        if (v58)
        {
          int v51 = 0;
        }
        else
        {
          unsigned int v59 = v56 & 0x80000001;
          if ((v54 & 0x80000001) != 0)
          {
            if (v59) {
              int v51 = 1;
            }
            else {
              int v51 = v56;
            }
          }
          else
          {
            int v51 = v54;
            if (!v59)
            {
              int v51 = v56 ^ v54;
              unsigned int v61 = v56 & v54;
              if ((v56 & v54) >= 2)
              {
                unsigned int v62 = 0;
                do
                {
                  if ((v61 & 2) != 0)
                  {
                    BOOL v64 = db_eval_obj_qp_array_intersect_for_value((uint64_t)&v90, v62);
                    int v65 = 2 << v62;
                    if (v62 >= 0x1E) {
                      int v65 = 0;
                    }
                    int v66 = v65 | v51;
                    if (v64) {
                      int v51 = v66;
                    }
                  }
                  ++v62;
                  BOOL v63 = v61 > 3;
                  v61 >>= 1;
                }
                while (v63);
              }
            }
          }
        }
        goto LABEL_117;
      case 4:
        uint64_t v32 = v6[2];
        uint64_t v33 = (uint64_t)(v6 + 4);
        if ((*(void *)(v32 + 32) & 0x406000000) != 0)
        {
          int v34 = 0;
        }
        else
        {
          uint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, long long *))(v32 + 16);
          int v34 = v89;
          if (v45) {
            BOOL v46 = v89 == 0;
          }
          else {
            BOOL v46 = 1;
          }
          if (!v46)
          {
            unsigned int v47 = v45(v88, v8, v32, v33, v87, &v90);
            if (v47 < 2) {
              goto LABEL_72;
            }
            int v34 = 1;
          }
        }
        unsigned int v47 = compare_file_by_dbo(v88, v8, v32, v33, v86, v87, v34, (uint64_t)&v90, 0);
LABEL_72:
        LODWORD(v97[3 * v12]) = v47;
        goto LABEL_8;
      case 0x10:
        goto LABEL_7;
      case 0x20:
        int v14 = 1;
        LODWORD(v97[3 * v12]) = 1;
        goto LABEL_9;
      default:
        int v29 = *__error();
        char v30 = _SILogForLogForCategory(1);
        os_log_type_t v31 = 2 * (dword_1E9FC90A8 < 4);
        if (os_log_type_enabled(v30, v31))
        {
          *(_DWORD *)long long buf = 136315394;
          uint64_t v93 = v85;
          __int16 v94 = 2048;
          CFNumberRef v95 = v6;
          _os_log_impl(&dword_1BD672000, v30, v31, "%s : node @ 0x%p looks trashed", buf, 0x16u);
        }
        *__error() = v29;
LABEL_7:
        LODWORD(v97[3 * v12]) = 0;
        goto LABEL_8;
    }
LABEL_10:
    int v15 = &v97[3 * v12 - 1];
    int v6 = (uint64_t *)*v15;
    int v10 = *((_DWORD *)v15 + 4);
  }
  uint64_t v23 = &v97[3 * v12 - 1];
  unsigned int v25 = *((_DWORD *)v23 + 2);
  size_t v24 = v23 + 1;
  uint64_t v19 = v25;
  if ((v6[6] & 8) != 0)
  {
    uint64_t v19 = v19 == 0;
    *size_t v24 = v19;
  }
  _OWORD v6[8] = v8[2];
  *((_WORD *)v6 + 28) = v6[7] & 0xFBFF | ((v19 & 1) << 10);
  if (v12)
  {
LABEL_31:
    --v12;
    goto LABEL_10;
  }
LABEL_126:
  unsigned int v72 = DWORD1(v90);
  if (DWORD1(v90) >= 5) {
    uint64_t v73 = *(void ***)&v91[0];
  }
  else {
    uint64_t v73 = (void **)v91;
  }
  if (v90)
  {
    uint64_t v74 = DWORD2(v90);
    if (DWORD2(v90))
    {
      int v75 = v73 + 2;
      do
      {
        if (*((_DWORD *)v75 - 2) >= 0x41u)
        {
          free(*v75);
          *((_DWORD *)v75 - 1) = 0;
          *int v75 = 0;
        }
        v75 += 3;
        --v74;
      }
      while (v74);
      unsigned int v72 = DWORD1(v90);
    }
  }
  if (v72 >= 5) {
    free(v73);
  }
  return v19;
}

uint64_t QueryFunctionCallbackContext_METADATA::postCheck(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a4;
  if (*a4 == -1 || !v4) {
    return 2;
  }
  unint64_t v6 = *(void *)(a2 + 32);
  unint64_t v7 = *(void *)(v4 + 56);
  if (v7 <= *MEMORY[0x1E4F14B00])
  {
    int v12 = *__error();
    int v13 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315906;
      int v15 = "ContentIndexDocSetInRangeDocId";
      __int16 v16 = 1024;
      int v17 = 346;
      __int16 v18 = 2048;
      unint64_t v19 = v7;
      __int16 v20 = 2048;
      unint64_t v21 = v6;
      _os_log_error_impl(&dword_1BD672000, v13, OS_LOG_TYPE_ERROR, "%s:%d: Invalid ContentIndexDocSetRef:%p docId:%lld", (uint8_t *)&v14, 0x26u);
    }
    *__error() = v12;
    return 2;
  }
  unint64_t v8 = *(void *)(v7 + 80);
  if (v8 > v6) {
    return 2;
  }
  if (v8 + *(unsigned int *)(v7 + 68) <= v6) {
    return 2;
  }
  unsigned int v9 = *(_DWORD *)(a3 + 24);
  if (ContentIndexDocSetNeedsPostcheckForDocId(*a4, *(void *)(a2 + 32))) {
    return 2;
  }
  LODWORD(result) = ContentIndexDocSetContainsDocId(v4, *(void *)(a2 + 32));
  unsigned int v11 = result ^ 1;
  if (((1 << v9) & 0x5060) == 0) {
    unsigned int v11 = result;
  }
  if (v9 <= 0xE) {
    return v11;
  }
  else {
    return result;
  }
}

uint64_t CIIndexSetHasIndex(uint64_t result, unsigned int a2)
{
  if (result)
  {
    uint64_t v3 = (_DWORD *)result;
    if (*(_DWORD *)(result + 20) > a2) {
      return 0;
    }
    unsigned int v4 = *(_DWORD *)(result + 24);
    unsigned int v5 = v4 - a2;
    if (v4 < a2) {
      return 0;
    }
    int v6 = *(_DWORD *)(result + 16);
    if (v6 <= -10) {
      return (*(_DWORD *)(*(void *)(result + 40) + 4 * (v5 >> 5)) >> v5) & 1;
    }
    if (v6 < 0)
    {
      if (v6 > 0xFFFFFFFD) {
        return 0;
      }
      int v11 = *(_DWORD *)(result + 32);
      uint64_t result = v11 == a2;
      if (v11 != a2 && v6 != -3)
      {
        int v12 = v3[9];
        uint64_t result = v12 == a2;
        if (v12 != a2 && v6 != -4)
        {
          int v13 = v3[10];
          uint64_t result = v13 == a2;
          if (v13 != a2 && v6 != -5)
          {
            int v14 = v3[11];
            uint64_t result = v14 == a2;
            if (v14 != a2 && v6 != -6)
            {
              int v15 = v3[12];
              uint64_t result = v15 == a2;
              if (v15 != a2 && v6 != -7)
              {
                int v16 = v3[13];
                uint64_t result = v16 == a2;
                if (v16 != a2 && v6 != -8) {
                  return v3[14] == a2;
                }
              }
            }
          }
        }
      }
    }
    else
    {
      unsigned int v7 = binarySearchMap(result, a2);
      unsigned int v8 = v3[9];
      if (v7 < v8 || (BOOL v9 = 0, v10 = v3[8], v7 < v10) && v7 >= v10 + v8 - v3[4]) {
        BOOL v9 = *(_DWORD *)(*((void *)v3 + 5) + 4 * v7) == a2;
      }
      return v9 ^ (CFGetTypeID(v3) == __kCIIndexSetInvertedTypeID);
    }
  }
  return result;
}

uint64_t _qpPostcheckMatch(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (***a5)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = *a2;
  if (!v9)
  {
    ((void (*)(uint64_t, uint64_t *))a2[1])(a1, a2);
    uint64_t v9 = *a2;
  }
  unsigned int v10 = **a5;
  return v10(a5, v9, a3, a4);
}

uint64_t ContentIndexDocSetContainsDocId(uint64_t a1, int a2)
{
  if (a1)
  {
    uint64_t v2 = 0;
    switch(*(_DWORD *)(a1 + 48))
    {
      case 0:
      case 2:
        return v2;
      case 1:
        return 1;
      case 3:
      case 8:
        uint64_t v4 = *(void *)(a1 + 64);
        if (!v4) {
          goto LABEL_5;
        }
        uint64_t v3 = (uint64_t *)(v4 + 88);
LABEL_4:
        uint64_t v4 = *v3;
LABEL_5:
        unsigned int v5 = a2 - *(_DWORD *)(*(void *)(a1 + 56) + 80);
        uint64_t result = CIIndexSetHasIndex(v4, v5);
        break;
      case 4:
      case 5:
      case 6:
      case 7:
      case 9:
        uint64_t v3 = (uint64_t *)(a1 + 80);
        goto LABEL_4;
      default:
        assert_invalid_doc_type((_DWORD *)a1);
    }
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t ContentIndexDocSetNeedsPostcheckForDocId(uint64_t a1, int a2)
{
  if (!a1) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 + 52);
  if (v2 == 3) {
    return 1;
  }
  if (!v2) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v3 = 0;
  switch(*(_DWORD *)(a1 + 48))
  {
    case 0:
    case 1:
    case 2:
      return v3;
    case 3:
      uint64_t v4 = *(void *)(a1 + 64);
      if (!v4) {
        goto LABEL_9;
      }
      unsigned int v5 = (uint64_t *)(v4 + 96);
LABEL_8:
      uint64_t v4 = *v5;
LABEL_9:
      unsigned int v6 = a2 - *(_DWORD *)(*(void *)(a1 + 56) + 80);
      uint64_t result = CIIndexSetHasIndex(v4, v6);
      break;
    case 4:
    case 5:
    case 6:
    case 7:
      unsigned int v5 = (uint64_t *)(a1 + 88);
      goto LABEL_8;
    case 8:
    case 9:
      goto LABEL_9;
    default:
      assert_invalid_doc_type((_DWORD *)a1);
  }
  return result;
}

uint64_t compare_file_by_dbo(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  int v70 = 0;
  unint64_t v71 = 0;
  *(void *)CFStringRef v77 = 0;
  *(void *)&v77[8] = 0;
  *(void *)&v77[13] = 0;
  if (a8)
  {
    if (!a1) {
      goto LABEL_10;
    }
  }
  else if (!a1)
  {
    goto LABEL_10;
  }
  unsigned int v15 = *(_DWORD *)(a3 + 24);
  unsigned int v16 = v15 - 11;
  if (v15 >= 0xB && v15 != 15)
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 1;
    switch(v16)
    {
      case 0u:
        uint64_t v26 = 0;
        goto LABEL_26;
      case 1u:
LABEL_26:
        if (*(_DWORD *)(a3 + 40) != 2) {
          return v26;
        }
        int v69 = 0;
        LODWORD(v25) = v26;
        goto LABEL_55;
      case 2u:
        goto LABEL_53;
      case 3u:
        uint64_t v24 = 1;
        uint64_t v25 = 1;
LABEL_53:
        if (*(int *)(a3 + 40) <= 0) {
          return v25;
        }
        int v69 = 1;
        uint64_t v26 = v24;
LABEL_55:
        uint64_t v35 = *(char **)a3;
        uint64_t v36 = (unint64_t *)*a2;
        if (!*a2)
        {
          ((void (*)(uint64_t, uint64_t *))a2[1])(a1, a2);
          uint64_t v36 = (unint64_t *)*a2;
          if (!*a2) {
            return 0;
          }
        }
        unsigned int v72 = 0;
        uint64_t v73 = 0;
        if (*v35 == 42 && !v35[1])
        {
          if (*((_DWORD *)v36 + 3) < 0x31u) {
            return 0;
          }
          int v51 = (unsigned __int16 *)(v36 + 6);
          if (v69)
          {
            if (a7)
            {
              while (1)
              {
                if ((v51[1] & 0x100) == 0)
                {
                  if (db_fieldMatchCompare(a1, (uint64_t)v51, a3, a5, a8, v25)) {
                    return 1;
                  }
                  uint64_t v36 = (unint64_t *)*a2;
                }
                uint64_t v26 = 0;
                int v51 = (unsigned __int16 *)((char *)v51 + *((unsigned int *)v51 + 2) + 13);
                if (v51 >= (unsigned __int16 *)((char *)v36 + *((unsigned int *)v36 + 3))) {
                  return v26;
                }
              }
            }
            uint64_t v26 = 0;
            do
            {
              if ((v51[1] & 0x100) == 0)
              {
                if (db_fieldMatchCompare(a1, (uint64_t)v51, a3, a5, a8, v25))
                {
                  int v68 = *((unsigned __int8 *)v51 + 12);
                  if (v68 != 7) {
                    *((unsigned char *)v51 + 12) = v68 + 1;
                  }
                  uint64_t v26 = 1;
                }
                else
                {
                  uint64_t v26 = 0;
                }
              }
              int v51 = (unsigned __int16 *)((char *)v51 + *((unsigned int *)v51 + 2) + 13);
            }
            while ((unint64_t)v51 < *a2 + (unint64_t)*(unsigned int *)(*a2 + 12));
          }
          else
          {
            if (a7)
            {
              while (1)
              {
                if ((v51[1] & 0x100) == 0)
                {
                  if (_db_rangeCompare(*v51, a3, *((unsigned int *)v51 + 2), (unsigned int *)((char *)v51 + 13), a8, v25, a9))return 1; {
                  uint64_t v36 = (unint64_t *)*a2;
                  }
                }
                uint64_t v26 = 0;
                int v51 = (unsigned __int16 *)((char *)v51 + *((unsigned int *)v51 + 2) + 13);
                if (v51 >= (unsigned __int16 *)((char *)v36 + *((unsigned int *)v36 + 3))) {
                  return v26;
                }
              }
            }
            uint64_t v26 = 0;
            do
            {
              if ((v51[1] & 0x100) == 0)
              {
                if (_db_rangeCompare(*v51, a3, *((unsigned int *)v51 + 2), (unsigned int *)((char *)v51 + 13), a8, v25, a9))
                {
                  int v67 = *((unsigned __int8 *)v51 + 12);
                  if (v67 != 7) {
                    *((unsigned char *)v51 + 12) = v67 + 1;
                  }
                  uint64_t v26 = 1;
                }
                else
                {
                  uint64_t v26 = 0;
                }
              }
              int v51 = (unsigned __int16 *)((char *)v51 + *((unsigned int *)v51 + 2) + 13);
            }
            while ((unint64_t)v51 < *a2 + (unint64_t)*(unsigned int *)(*a2 + 12));
          }
        }
        else
        {
          unsigned int v37 = v25;
          if (*(void *)a3)
          {
            uint64_t v39 = (unsigned int *)(a3 + 144);
            unsigned int v38 = *(_DWORD *)(a3 + 144);
            if (!v38 || v38 < db_get_fields_generation((int *)a1))
            {
              os_unfair_lock_lock((os_unfair_lock_t)&range_or_field_compare_lock);
              if (!*v39 || (unsigned int v40 = *v39, v40 < db_get_fields_generation((int *)a1)))
              {
                (*(void (**)(void))(*(void *)(a1 + 808) + 16))();
                uint64_t v41 = db_copy_field_ids_with_buffer_locked(a1, *(char **)a3, 0, 0, (_DWORD *)(a3 + 144));
                __dmb(0xBu);
                *(void *)(a3 + 136) = v41;
              }
              os_unfair_lock_unlock((os_unfair_lock_t)&range_or_field_compare_lock);
            }
          }
          memset(buf, 0, 20);
          if (db_get_field_by_id((int *)a1, *a2, *(int **)(a3 + 136), (unint64_t *)&v73, (unint64_t *)&v72))
          {
            if (!*(void *)a3 || strcmp(*(const char **)a3, "kMDItemAttributeChangeDate")) {
              return v26;
            }
            *(_DWORD *)long long buf = 12;
            int v42 = *(_DWORD **)(a3 + 136);
            if (v42) {
              LODWORD(v42) = *v42;
            }
            *(_DWORD *)&uint8_t buf[4] = v42;
            *(_DWORD *)&uint8_t buf[8] = 8;
            *(double *)&unsigned char buf[12] = -(*MEMORY[0x1E4F1CF78] + (double)*(unint64_t *)(*a2 + 16) * -0.000001);
            unsigned int v72 = (unsigned int *)&buf[12];
            uint64_t v73 = (unsigned __int16 *)buf;
          }
          if (v69) {
            uint64_t matched = db_fieldMatchCompare(a1, (uint64_t)v73, a3, a5, a8, v37);
          }
          else {
            uint64_t matched = _db_rangeCompare(*v73, a3, *((unsigned int *)v73 + 2), v72, a8, v37, a9);
          }
          uint64_t v26 = matched;
          if (!a7 && matched)
          {
            unint64_t v49 = (unint64_t)v73;
            goto LABEL_93;
          }
        }
        break;
      default:
        return 0;
    }
    return v26;
  }
LABEL_10:
  if ((*(unsigned char *)(a3 + 32) & 0x80) == 0)
  {
    __int16 v18 = *(char **)(a3 + 72);
    unint64_t v19 = *(char **)a3;
    if (v18)
    {
      if (!v19) {
        goto LABEL_30;
      }
      if (*v19 == 42 && !v19[1])
      {
        uint64_t v20 = *a2;
        if (*a2) {
          goto LABEL_16;
        }
        ((void (*)(uint64_t, uint64_t *))a2[1])(a1, a2);
        uint64_t v20 = *a2;
        if (*a2)
        {
          __int16 v18 = *(char **)(a3 + 72);
          if (!v18)
          {
LABEL_111:
            unsigned int v54 = *(_DWORD *)(a3 + 24);
            if (v54 <= 0xA)
            {
              int v55 = *(_DWORD *)(a3 + 160);
              if ((v55 & 0x800) == 0)
              {
                *(void *)(a3 + 256) = v18;
                while (1)
                {
                  int v56 = *v18;
                  if (!*v18) {
                    break;
                  }
                  ++v18;
                  unsigned int v57 = v56 - 42;
                  BOOL v58 = v57 > 0x32;
                  uint64_t v59 = (1 << v57) & 0x6000000200001;
                  if (!v58 && v59 != 0)
                  {
                    *(void *)(a3 + 32) |= 1uLL;
                    break;
                  }
                }
                *(_DWORD *)(a3 + 160) = v55 | 0x800;
                uint64_t v20 = *a2;
              }
              uint64_t v26 = v54 == 5;
              if (*(_DWORD *)(v20 + 12) >= 0x31u)
              {
                unsigned int v61 = (unsigned __int16 *)(v20 + 48);
                while (1)
                {
                  if ((v61[1] & 0x100) == 0)
                  {
                    unsigned int v62 = *v61;
                    if (v62 == 11
                      || (BOOL v63 = *(char **)(a3 + 256)) == 0
                      || (*v63 - 48) > 9
                      || !convert_value_to_type(v62, a3))
                    {
                      BOOL v64 = do_compare(a1);
                      int v65 = *(_DWORD *)(a3 + 24);
                      if (v64)
                      {
                        if (v65 != 5)
                        {
                          if (a7) {
                            return 1;
                          }
                          int v66 = *((unsigned __int8 *)v61 + 12);
                          if (v66 != 7) {
                            *((unsigned char *)v61 + 12) = v66 + 1;
                          }
                          uint64_t v26 = 1;
                        }
                      }
                      else
                      {
                        if (v65 == 5) {
                          uint64_t v26 = 0;
                        }
                        else {
                          uint64_t v26 = v26;
                        }
                        if (v65 == 5 && a7) {
                          return 0;
                        }
                      }
                    }
                  }
                  unsigned int v61 = (unsigned __int16 *)((char *)v61 + *((unsigned int *)v61 + 2) + 13);
                  if ((unint64_t)v61 >= *a2 + (unint64_t)*(unsigned int *)(*a2 + 12)) {
                    return v26;
                  }
                }
              }
              return v26;
            }
            return 0;
          }
LABEL_16:
          if (*v18 == 42 && !v18[1] && (*(unsigned char *)(v20 + 40) & 5) == 0)
          {
            if (!a7)
            {
              unint64_t v21 = v20 + 48;
              uint64_t v26 = 1;
              do
              {
                int v53 = *(unsigned __int8 *)(v21 + 12);
                if (v53 != 7)
                {
                  *(unsigned char *)(v21 + 12) = v53 + 1;
                  uint64_t v20 = *a2;
                }
                v21 += *(unsigned int *)(v21 + 8) + 13;
              }
              while (v21 < v20 + (unint64_t)*(unsigned int *)(v20 + 12));
              return v26;
            }
            return 1;
          }
          goto LABEL_111;
        }
        return 0;
      }
    }
    else if (!v19)
    {
      goto LABEL_30;
    }
    if (!strncmp(*(const char **)a3, "SYS:mod", 7uLL))
    {
      uint64_t v32 = *a2;
      if (!*a2)
      {
        ((void (*)(uint64_t, uint64_t *))a2[1])(a1, a2);
        uint64_t v32 = *a2;
        if (!*a2) {
          return 0;
        }
      }
      int v70 = (unsigned __int16 *)v77;
      *(_DWORD *)CFStringRef v77 = 8;
      *(void *)&v77[4] = 0x80000FFFFLL;
      *(void *)&v77[13] = *(void *)(v32 + 16);
      goto LABEL_47;
    }
LABEL_30:
    if (!a1) {
      return 0;
    }
    if (!*a2)
    {
      ((void (*)(uint64_t, uint64_t *))a2[1])(a1, a2);
      if (!*a2) {
        return 0;
      }
      unint64_t v19 = *(char **)a3;
    }
    if (v19)
    {
      uint64_t v27 = (unsigned int *)(a3 + 144);
      unsigned int v28 = *(_DWORD *)(a3 + 144);
      if (!v28 || v28 < db_get_fields_generation((int *)a1))
      {
        os_unfair_lock_lock((os_unfair_lock_t)&compare_file_by_dbo_lock);
        if (!*v27 || (unsigned int v29 = *v27, v29 < db_get_fields_generation((int *)a1)))
        {
          (*(void (**)(void))(*(void *)(a1 + 808) + 16))();
          char v30 = db_copy_field_ids_with_buffer_locked(a1, *(char **)a3, 0, 0, (_DWORD *)(a3 + 144));
          __dmb(0xBu);
          *(void *)(a3 + 136) = v30;
        }
        os_unfair_lock_unlock((os_unfair_lock_t)&compare_file_by_dbo_lock);
      }
    }
    os_log_type_t v31 = *(int **)(a3 + 136);
    if (!v31 || db_get_field_by_id((int *)a1, *a2, v31, (unint64_t *)&v70, &v71)) {
      return (*(_DWORD *)(a3 + 24) - 5) < 2;
    }
LABEL_47:
    int v33 = *(_DWORD *)(a3 + 24);
    if ((v33 - 1) > 1)
    {
      if ((v33 - 5) <= 1)
      {
        uint64_t v44 = *(unsigned char **)(a3 + 72);
        if (v44)
        {
          if (*v44 == 42 && !v44[1]) {
            return 0;
          }
        }
      }
    }
    else
    {
      int v34 = *(unsigned char **)(a3 + 72);
      if (v34 && *v34 == 42 && !v34[1]) {
        return 1;
      }
    }
    if (v70)
    {
      if (convert_value_to_type(*v70, a3))
      {
        uint64_t v26 = 0;
        if (v70 && dword_1E9FC90A8 >= 5)
        {
          int v45 = *__error();
          BOOL v46 = _SILogForLogForCategory(1);
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v47 = "<>";
            int v48 = *v70;
            if (!a1) {
              unsigned int v47 = "<<anon store>>";
            }
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = v47;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = a3;
            __int16 v75 = 1024;
            int v76 = v48;
            _os_log_impl(&dword_1BD672000, v46, OS_LOG_TYPE_DEFAULT, "%s : failed to convert qp @ 0x%p to type 0x%x", buf, 0x1Cu);
          }
          uint64_t v26 = 0;
          *__error() = v45;
        }
      }
      else
      {
        BOOL v52 = do_compare(a1);
        if (a7)
        {
          return v52;
        }
        else
        {
          if ((*(unsigned char *)(a3 + 35) & 6) != 0) {
            uint64_t v26 = v52;
          }
          else {
            uint64_t v26 = v52;
          }
          if (v26 && (v26 == 1 || (v26 & 0x80000001) == 0))
          {
            unint64_t v49 = (unint64_t)v70;
LABEL_93:
            int v50 = *(unsigned __int8 *)(v49 + 12);
            if (v50 != 7) {
              *(unsigned char *)(v49 + 12) = v50 + 1;
            }
          }
        }
      }
      return v26;
    }
    return 0;
  }
  uint64_t v22 = *(uint64_t (**)(void))(a3 + 8);
  return v22();
}

uint64_t db_get_fields_generation(int *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*a1 != 1685287992)
  {
    int v6 = *__error();
    unsigned int v7 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = *a1;
      *(_DWORD *)long long buf = 136315650;
      int v13 = "db_get_fields_generation";
      __int16 v14 = 1024;
      int v15 = 291;
      __int16 v16 = 1024;
      int v17 = v8;
      _os_log_error_impl(&dword_1BD672000, v7, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v6;
    uint64_t v9 = __si_assert_copy_extra_329();
    unsigned int v10 = v9;
    if (v9) {
      int v11 = v9;
    }
    else {
      int v11 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 291, v11);
    free(v10);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  uint64_t v1 = *((void *)a1 + 110);
  if ((a1[201] & 0x14) == 0) {
    return *(unsigned int *)(v1 + 56);
  }
  if (!v1) {
    return 0;
  }
  int v2 = *(_DWORD *)(v1 + 216);
  switch(v2)
  {
    case -270471200:
      uint64_t v4 = *(void *)(v1 + 376);
      break;
    case 1684300900:
      uint64_t v4 = *(void *)(v1 + 4504);
      break;
    case 842150450:
      return (*(_DWORD *)(v1 + 1388) - 1);
    default:
      return 0;
  }
  return v4 - 1;
}

BOOL do_compare(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = v6;
  int v8 = v5;
  uint64_t v10 = v9;
  int v11 = (char **)v4;
  uint64_t v12 = v3;
  int v13 = v2;
  __int16 v14 = (int *)v1;
  v84[128] = *MEMORY[0x1E4F143B8];
  unsigned __int16 v15 = v2[1];
  if ((v15 & 0x20) == 0)
  {
    if ((v15 & 0x80) != 0)
    {
      uint64_t v73 = 0;
      bzero(v84, 0x400uLL);
      int v16 = *v13;
      goto LABEL_8;
    }
LABEL_6:
    *(void *)uint64_t v80 = *((unsigned int *)v2 + 2);
    return _db_compare_val(v1, v2, v3, (unsigned int *)((char *)v2 + 13), v80, v4, v5);
  }
  int v16 = *v2;
  if ((v15 & 0x80) == 0 && v16 == 14) {
    goto LABEL_6;
  }
  uint64_t v73 = 0;
  bzero(v84, 0x400uLL);
  if ((v15 & 0x80) != 0)
  {
LABEL_8:
    if (v16 == 11)
    {
      __s = (char *)v13 + 13;
      if (db_get_localized_string(v14, (uint64_t)v13, v11, (uint64_t)&__s, (uint64_t)&v73, v8)) {
        return 0;
      }
      if (v73)
      {
        uint64_t v39 = __s;
        unsigned int v40 = v73 - __s;
        if ((int)v73 - (int)__s > 1022)
        {
          size_t v42 = strlen(__s);
          uint64_t v41 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v42 + 1, 0x6085D6BuLL);
          if (!v41 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)uint64_t v80 = 0;
            _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", v80, 2u);
          }
          memcpy(v41, v39, v42);
          *((unsigned char *)v41 + v42) = 0;
          *((unsigned char *)v41 + v40) = 0;
        }
        else
        {
          uint64_t v41 = v84;
          __strlcpy_chk();
        }
        __s = (char *)v41;
      }
      uint64_t v43 = *(void *)(v12 + 32);
      if ((v43 & 0x800073) == 0)
      {
        int v47 = strcmp(__s, *(const char **)(v12 + 256));
        int v48 = *(_DWORD *)(v12 + 24);
        if (v47)
        {
          if (v48 == 5)
          {
            uint64_t v17 = 1;
          }
          else
          {
            BOOL v51 = ((v48 - 4) & 0xFFFFFFFB) == 0;
            BOOL v52 = ((v48 - 3) & 0xFFFFFFFB) == 0;
            if (v47 < 0) {
              uint64_t v17 = v52;
            }
            else {
              uint64_t v17 = v51;
            }
          }
        }
        else
        {
          uint64_t v17 = (v48 - 1) < 4;
        }
LABEL_105:
        if (v73 && __s != (char *)v84) {
          free(__s);
        }
        return v17;
      }
      unsigned int v44 = (v43 >> 4) & 3;
      if ((v43 & 0x800000) != 0) {
        LOBYTE(v44) = v44 | 0x10;
      }
      int v45 = *(unsigned __int8 **)(v12 + 256);
      if ((v43 & 2) != 0)
      {
        os_unfair_lock_lock((os_unfair_lock_t)&s_search_reg_ex_unfair_lock);
        if (!*(void *)(v12 + 104))
        {
          uint64_t v49 = icu_regex_create();
          __dmb(0xBu);
          *(void *)(v12 + 104) = v49;
        }
        os_unfair_lock_unlock((os_unfair_lock_t)&s_search_reg_ex_unfair_lock);
        if (!*(void *)(v12 + 104)) {
          goto LABEL_102;
        }
        uint64_t v50 = icu_regex_find();
      }
      else
      {
        uint64_t v46 = *(void *)(v12 + 104);
        if (v11 && !v46)
        {
          os_unfair_lock_lock((os_unfair_lock_t)&s_search_ctx_unfair_lock);
          if (!*(void *)(v12 + 104))
          {
            uint64_t v53 = icu_search_context_create_with_wildcard_limit();
            __dmb(0xBu);
            *(void *)(v12 + 104) = v53;
          }
          os_unfair_lock_unlock((os_unfair_lock_t)&s_search_ctx_unfair_lock);
          uint64_t v46 = *(void *)(v12 + 104);
        }
        if (v46)
        {
          *(void *)uint64_t v80 = 0;
          *(void *)long long buf = 0;
          if (icu_search_match())
          {
            uint64_t v17 = 1;
            goto LABEL_103;
          }
          if (checkTranscriptions(v45, __s))
          {
            bzero(v80, 0x1000uLL);
            if (CIStringTokenizerResolveTranscriptions((uint64_t)__s))
            {
              uint64_t v50 = icu_search_match();
              goto LABEL_101;
            }
          }
LABEL_102:
          uint64_t v17 = 0;
LABEL_103:
          if ((*(_DWORD *)(v12 + 24) - 5) <= 1) {
            uint64_t v17 = v17 == 0;
          }
          goto LABEL_105;
        }
        uint64_t v50 = matche(v45, (unsigned __int8 *)__s, v44 | (v43 >> 4) & 4, 0, 0);
      }
LABEL_101:
      uint64_t v17 = v50;
      goto LABEL_103;
    }
  }
  __s = (char *)v13 + 13;
  if (v10)
  {
    unint64_t v18 = *(void *)(v12 + 32);
    uint64_t v19 = (v18 >> 25) & 1;
    uint64_t v20 = (v18 >> 34) & 1;
  }
  else
  {
    LODWORD(v19) = 0;
    LODWORD(v20) = 0;
  }
  int v70 = *(_DWORD *)(v12 + 24);
  uint64_t v68 = v7;
  if (dword_1E9FC90A8 >= 5)
  {
    int v54 = v20;
    int v55 = v19;
    int v56 = *__error();
    unsigned int v57 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t v80 = 67109376;
      *(_DWORD *)&v80[4] = v55;
      *(_WORD *)&v80[8] = 1024;
      *(_DWORD *)&v80[10] = v54;
      _os_log_impl(&dword_1BD672000, v57, OS_LOG_TYPE_DEFAULT, "====== do_compare check_all:%d save_indexes:%d", v80, 0xEu);
    }
    *__error() = v56;
    int v16 = *v13;
    LODWORD(v19) = v55;
    LOBYTE(v20) = v54;
  }
  long long v82 = 0u;
  long long v83 = 0u;
  *(_OWORD *)uint64_t v80 = 0u;
  long long v81 = 0u;
  if (v16 != 11 || (~v13[1] & 0x8010) != 0)
  {
    BOOL v66 = 0;
    unint64_t v21 = (int *)(v13 + 4);
    BOOL v63 = v80;
  }
  else
  {
    unsigned int v72 = 64;
    unint64_t v21 = (int *)&v72;
    int v22 = v19;
    char v23 = v20;
    uint64_t v24 = (char *)copyDataForUniquedValue((uint64_t)v14, *(_DWORD *)__s, v80, &v72);
    LOBYTE(v20) = v23;
    LODWORD(v19) = v22;
    __s = v24;
    BOOL v63 = (uint8_t *)v24;
    BOOL v66 = v24 != (char *)v80;
  }
  int v25 = *v21;
  unsigned __int8 v64 = v20;
  int v65 = v19;
  if (*v21 < 1)
  {
    unsigned int v69 = 0;
    unsigned int v32 = 0;
LABEL_53:
    if (v66) {
      free(v63);
    }
    if (v65) {
      uint64_t v17 = v69;
    }
    else {
      uint64_t v17 = v32;
    }
    if (((v65 | v64 ^ 1) & 1) == 0) {
      uint64_t v17 = *(_DWORD *)(v68 + 8) != 0;
    }
    if (dword_1E9FC90A8 >= 5)
    {
      int v58 = *__error();
      uint64_t v59 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v60 = *(void *)v12;
        *(_DWORD *)long long buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v17;
        __int16 v76 = 2080;
        uint64_t v77 = v60;
        __int16 v78 = 2048;
        uint64_t v79 = v12;
        _os_log_impl(&dword_1BD672000, v59, OS_LOG_TYPE_DEFAULT, "====== do_compare ret:%d %s qp:%p", buf, 0x1Cu);
      }
      *__error() = v58;
    }
    return v17;
  }
  uint64_t v67 = v10;
  uint64_t v26 = (uint64_t)v11;
  int v27 = 0;
  unsigned int v28 = 0;
  unsigned int v69 = 0;
  char v29 = v19 | v20;
  char v30 = (unsigned int *)__s;
  while (1)
  {
    uint64_t v71 = -1;
    if (!v30)
    {
      if (v29)
      {
        unsigned int v32 = 0;
        BOOL v33 = 1;
        goto LABEL_28;
      }
      int v36 = *(_DWORD *)(v12 + 24);
      goto LABEL_43;
    }
    BOOL v31 = _db_compare_val((uint64_t)v14, v13, v12, v30, &v71, v26, v8);
    unsigned int v32 = v31;
    BOOL v33 = !v31;
    if (v29)
    {
      if (v31 && v70 != 5)
      {
        unsigned int v32 = 1;
LABEL_30:
        unsigned int v69 = db_eval_obj_qp_array_set_match_at_index(v67, v12, v28);
        db_eval_obj_qp_array_set_match_at_index(v68, v12, v28);
        if (dword_1E9FC90A8 >= 5)
        {
          int v62 = *__error();
          unsigned int v61 = _SILogForLogForCategory(1);
          if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = v28;
            __int16 v76 = 2048;
            uint64_t v77 = v12;
            _os_log_impl(&dword_1BD672000, v61, OS_LOG_TYPE_DEFAULT, "====== do_compare setting match bit:%d qp:%p", buf, 0x12u);
          }
          *__error() = v62;
        }
LABEL_31:
        ++v28;
        if ((v13[1] & 0x10) != 0) {
          goto LABEL_32;
        }
        goto LABEL_38;
      }
LABEL_28:
      if (!v33 || v70 != 5) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }
    int v36 = *(_DWORD *)(v12 + 24);
    if (v31) {
      break;
    }
LABEL_43:
    if (v36 == 5 || v36 == 2)
    {
      uint64_t v17 = 0;
      if (!v66) {
        return v17;
      }
      goto LABEL_66;
    }
    unsigned int v32 = 0;
    if ((v13[1] & 0x10) != 0)
    {
LABEL_32:
      uint64_t v34 = 4;
      uint64_t v35 = __s;
      if (!__s) {
        goto LABEL_53;
      }
      goto LABEL_40;
    }
LABEL_38:
    uint64_t v34 = v71;
    if (v71 == -1) {
      goto LABEL_53;
    }
    uint64_t v35 = __s;
    if (!__s) {
      goto LABEL_53;
    }
LABEL_40:
    char v30 = (unsigned int *)&v35[v34];
    __s = &v35[v34];
    v27 += v34;
    if (v27 >= v25) {
      goto LABEL_53;
    }
  }
  unsigned int v32 = 1;
  if (v36 == 2 || v36 == 5)
  {
    if ((v13[1] & 0x10) != 0) {
      goto LABEL_32;
    }
    goto LABEL_38;
  }
  uint64_t v17 = 1;
  if (v66) {
LABEL_66:
  }
    free(v63);
  return v17;
}

BOOL _db_compare_val(uint64_t a1, unsigned __int16 *a2, uint64_t a3, unsigned int *a4, void *a5, uint64_t a6, int a7)
{
  uint64_t v12 = *a2;
  if (v12 != 14)
  {
    if (v12 == 11 && (a2[1] & 0x10) != 0)
    {
      if (a4)
      {
        unint64_t v13 = *a4;
        __int16 v14 = *(void **)(a3 + 112);
        if (!v14)
        {
          __int16 v14 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x180uLL, 0x6085D6BuLL);
          if (!v14) {
            _log_fault_for_malloc_failure();
          }
          uint64_t v15 = 0;
          *(_DWORD *)__int16 v14 = 0;
          v14[1] = 0;
          v14[2] = 0;
          *((_DWORD *)v14 + 6) = 0;
          v14[4] = 0;
          void v14[5] = 0;
          *((_DWORD *)v14 + 12) = 0;
          v14[7] = 0;
          v14[8] = 0;
          *((_DWORD *)v14 + 18) = 0;
          v14[10] = 0;
          v14[11] = 0;
          *((_DWORD *)v14 + 24) = 0;
          v14[13] = 0;
          v14[14] = 0;
          *((_DWORD *)v14 + 30) = 0;
          *((_DWORD *)v14 + 36) = 0;
          v14[16] = 0;
          v14[17] = 0;
          v14[19] = 0;
          v14[20] = 0;
          *((_DWORD *)v14 + 42) = 0;
          v14[22] = 0;
          v14[23] = 0;
          *((_DWORD *)v14 + 48) = 0;
          v14[25] = 0;
          v14[26] = 0;
          *((_DWORD *)v14 + 54) = 0;
          v14[28] = 0;
          v14[29] = 0;
          *((_DWORD *)v14 + 60) = 0;
          *((_DWORD *)v14 + 66) = 0;
          v14[31] = 0;
          v14[32] = 0;
          *((_DWORD *)v14 + 72) = 0;
          v14[34] = 0;
          v14[35] = 0;
          v14[37] = 0;
          v14[38] = 0;
          *((_DWORD *)v14 + 78) = 0;
          *((_DWORD *)v14 + 84) = 0;
          v14[40] = 0;
          v14[41] = 0;
          *((_DWORD *)v14 + 90) = 0;
          v14[43] = 0;
          v14[44] = 0;
          v14[46] = 0;
          v14[47] = 0;
          __dmb(0xBu);
          atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a3 + 112), (unint64_t *)&v15, (unint64_t)v14, memory_order_relaxed, memory_order_relaxed);
          if (v15)
          {
            qp_string_id_cache_free(v14);
            __int16 v14 = *(void **)(a3 + 112);
          }
        }
        uint64_t v16 = (v13 >> 8) & 0xF;
        uint64_t v17 = (char *)&v14[3 * v16];
        os_unfair_lock_lock((os_unfair_lock_t)v17);
        uint64_t v18 = *((void *)v17 + 1);
        long long v83 = (uint64_t *)(v17 + 8);
        if (v18)
        {
          if (!*(unsigned char *)(v18 + 176))
          {
            int v30 = *(_DWORD *)(v18 + 20);
            if (!v30 || !((*(_DWORD *)(v18 + 16) ^ v13) >> (-4 * v30)))
            {
              char v31 = 28 - 4 * v30;
              uint64_t v32 = *(void *)(v18 + 8 * ((v13 >> v31) & 0xF) + 48);
              if (v32)
              {
                int v33 = v30 + 2;
                do
                {
                  char v31 = 32 - 4 * v33;
                  uint64_t v32 = *(void *)((v32 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((v13 >> v31) & 0xF));
                  ++v33;
                }
                while ((v32 & 1) != 0);
              }
              if (v32
                && ((*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v32 + 16))(v32, v13, ~(-1 << v31)) & 1) != 0)
              {
                BOOL v25 = 1;
LABEL_52:
                os_unfair_lock_unlock((os_unfair_lock_t)v17);
LABEL_53:
                *a5 = 4;
                return v25;
              }
            }
          }
        }
        uint64_t v19 = (char *)&v14[3 * v16];
        uint64_t v22 = *((void *)v19 + 2);
        unint64_t v21 = (uint64_t *)(v19 + 16);
        uint64_t v20 = v22;
        if (v22)
        {
          if (!*(unsigned char *)(v20 + 176))
          {
            int v34 = *(_DWORD *)(v20 + 20);
            if (!v34 || !((*(_DWORD *)(v20 + 16) ^ v13) >> (-4 * v34)))
            {
              char v35 = 28 - 4 * v34;
              uint64_t v36 = *(void *)(v20 + 8 * ((v13 >> v35) & 0xF) + 48);
              if (v36)
              {
                int v37 = v34 + 2;
                do
                {
                  char v35 = 32 - 4 * v37;
                  uint64_t v36 = *(void *)((v36 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((v13 >> v35) & 0xF));
                  ++v37;
                }
                while ((v36 & 1) != 0);
              }
              if (v36
                && ((*(uint64_t (**)(uint64_t, unint64_t, void))(*(void *)v36 + 16))(v36, v13, ~(-1 << v35)) & 1) != 0)
              {
                BOOL v25 = 0;
                goto LABEL_52;
              }
            }
          }
        }
        os_unfair_lock_unlock((os_unfair_lock_t)v17);
        if (a7)
        {
          if (db_get_string_for_id_locked((int *)a1, v13)) {
            goto LABEL_16;
          }
        }
        else if (db_get_string_for_id((int *)a1, v13))
        {
LABEL_16:
          BOOL v23 = db_compare_val(*a2);
          os_unfair_lock_lock((os_unfair_lock_t)v17);
          if (v23)
          {
            uint64_t v24 = *v83;
            if (!*v83)
            {
              uint64_t v24 = SIUINT32SetCreate();
              *long long v83 = v24;
            }
            BOOL v25 = 1;
            goto LABEL_51;
          }
LABEL_32:
          uint64_t v24 = *v21;
          if (*v21)
          {
            BOOL v25 = 0;
          }
          else
          {
            uint64_t v24 = SIUINT32SetCreate();
            BOOL v25 = 0;
            *unint64_t v21 = v24;
          }
LABEL_51:
          SIValueSet<unsigned int>::SIValueSetInsert((unsigned int *)(v24 + 16), v13);
          goto LABEL_52;
        }
        os_unfair_lock_lock((os_unfair_lock_t)v17);
        goto LABEL_32;
      }
      return 0;
    }
    goto LABEL_28;
  }
  if ((~a2[1] & 0x5020) != 0)
  {
LABEL_28:
    BOOL v25 = db_compare_val(v12);
    if ((a2[1] & 0x10) != 0) {
      goto LABEL_53;
    }
    return v25;
  }
  if (*(_DWORD *)(a3 + 24) != 15) {
    return 0;
  }
  BOOL v25 = 0;
  if (a4 && *(float *)(a3 + 64) > 0.0)
  {
    unint64_t v26 = *a4;
    int v27 = *(_DWORD *)a1;
    if (a7)
    {
      if (v27 != 1685287992)
      {
        __int16 v78 = __si_assert_copy_extra_329();
        uint64_t v79 = v78;
        uint64_t v80 = "";
        if (v78) {
          uint64_t v80 = v78;
        }
        __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 398, v80);
        goto LABEL_94;
      }
      LOBYTE(__C[0]) = 0;
      memset(__dst, 0, 24);
      uint64_t v28 = *(void *)(a1 + 920);
      int v29 = 1;
    }
    else
    {
      if (v27 != 1685287992)
      {
        long long v81 = __si_assert_copy_extra_329();
        uint64_t v79 = v81;
        long long v82 = "";
        if (v81) {
          long long v82 = v81;
        }
        __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 397, v82);
LABEL_94:
        free(v79);
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      LOBYTE(__C[0]) = 0;
      memset(__dst, 0, 24);
      uint64_t v28 = *(void *)(a1 + 920);
      int v29 = 0;
    }
    data_map_get_data_entry((uint64_t)__dst, v28, v26, __C, v29);
    int v38 = LOBYTE(__C[0]);
    if (LOBYTE(__C[0]))
    {
      int v38 = LOBYTE(__dst[2]);
      int v39 = BYTE1(__dst[2]);
      int v40 = HIWORD(LODWORD(__dst[2]));
      int v41 = HIBYTE(LODWORD(__dst[2]));
      size_t v42 = (float16x8_t *)__dst[0];
    }
    else
    {
      int v41 = 0;
      LOBYTE(v40) = 0;
      int v39 = 0;
      size_t v42 = 0;
    }
    BOOL v25 = 0;
    if (!v42) {
      return v25;
    }
    unsigned int v43 = *(_DWORD *)(a3 + 60);
    if ((v43 & 3) != v39 || ((v43 >> 2) & 3) != v38) {
      return v25;
    }
    unsigned int v44 = *(float16x8_t **)(a3 + 296);
    float v45 = *(float *)(a3 + 64);
    unsigned int v46 = v43 >> 25;
    if (v46 && (v40 | (v41 << 8)) != v46) {
      return 0;
    }
    if (v39 == 2)
    {
      if (v38)
      {
        if (v38 != 1) {
          return 0;
        }
        float16x8_t v49 = 0uLL;
        unint64_t v50 = -8;
        do
        {
          float16x8_t v51 = *v44++;
          float16x8_t v52 = v51;
          float16x8_t v53 = *v42++;
          float16x8_t v54 = vsubq_f16(v52, v53);
          float16x8_t v49 = vaddq_f16(v49, vmulq_f16(v54, v54));
          v50 += 8;
        }
        while (v50 < 0x2F8);
        goto LABEL_80;
      }
      memcpy(__dst, v42, sizeof(__dst));
      __C[0] = 3.4028e38;
      int v47 = (const float *)v44;
      vDSP_Length v48 = 768;
    }
    else
    {
      if (v39 != 1)
      {
        if (v39) {
          return 0;
        }
        if (v38 != 1)
        {
          if (v38) {
            return 0;
          }
          memcpy(__dst, v42, 0x400uLL);
          __C[0] = 3.4028e38;
          int v47 = (const float *)v44;
          vDSP_Length v48 = 256;
          goto LABEL_86;
        }
        float v76 = _ZNK10CIVector_sIDF16_Li256EE8distanceERKS0_(*(float16x8_t **)(a3 + 296), v42);
        return v76 <= v45;
      }
      if (v38)
      {
        if (v38 != 1) {
          return 0;
        }
        float16x8_t v49 = 0uLL;
        unint64_t v55 = -8;
        do
        {
          float16x8_t v56 = *v44++;
          float16x8_t v57 = v56;
          float16x8_t v58 = *v42++;
          float16x8_t v59 = vsubq_f16(v57, v58);
          float16x8_t v49 = vaddq_f16(v49, vmulq_f16(v59, v59));
          v55 += 8;
        }
        while (v55 < 0x1F8);
LABEL_80:
        _H2 = v49.i16[2];
        __asm { FCVT            S2, H2 }
        float v66 = vaddv_f32((float32x2_t)*(_OWORD *)&vcvtq_f32_f16(*(float16x4_t *)v49.i8)) + _S2;
        LOWORD(_S2) = v49.i16[3];
        __asm { FCVT            S2, H2 }
        float v68 = v66 + _S2;
        LOWORD(_S2) = v49.i16[4];
        __asm { FCVT            S2, H2 }
        float v70 = v68 + _S2;
        LOWORD(_S2) = v49.i16[5];
        __asm { FCVT            S2, H2 }
        float v72 = v70 + _S2;
        LOWORD(_S2) = v49.i16[6];
        __asm { FCVT            S2, H2 }
        _H0 = v49.i16[7];
        __asm { FCVT            S0, H0 }
        float v76 = (float)(v72 + _S2) + _S0;
        return v76 <= v45;
      }
      memcpy(__dst, v42, 0x800uLL);
      __C[0] = 3.4028e38;
      int v47 = (const float *)v44;
      vDSP_Length v48 = 512;
    }
LABEL_86:
    vDSP_distancesq(v47, 1, (const float *)__dst, 1, __C, v48);
    float v76 = __C[0];
    return v76 <= v45;
  }
  return v25;
}

uint64_t convert_value_to_type(unsigned int a1, uint64_t a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(char **)(a2 + 72);
  __enduint64_t ptr = v3;
  unsigned int v4 = *(_DWORD *)(a2 + 24);
  if (a1 != 14)
  {
    if (v4 > 0xA) {
      return 22;
    }
    int v7 = 1 << a1;
    if ((*(_DWORD *)(a2 + 160) & (1 << a1)) != 0) {
      return 0;
    }
    int v8 = (double *)(a2 + 8 * a1 + 168);
    if (a1 == 11)
    {
      *(void *)int v8 = v3;
      while (1)
      {
        int v9 = *v3;
        if (!*v3) {
          break;
        }
        ++v3;
        unsigned int v10 = v9 - 42;
        BOOL v11 = v10 > 0x32;
        uint64_t v12 = (1 << v10) & 0x6000000200001;
        if (!v11 && v12 != 0)
        {
          *(void *)(a2 + 32) |= 1uLL;
          break;
        }
      }
    }
    else
    {
      if (a1 - 1 > 1)
      {
        if (a1 - 3 > 1)
        {
          if (a1 - 5 > 1)
          {
            if (a1 - 7 > 1)
            {
              if (a1 == 12 || a1 == 10)
              {
                if (*v3 == 48 && v3[1] == 120) {
                  double v24 = COERCE_DOUBLE(strtoull(v3, &__endptr, 0));
                }
                else {
                  double v24 = strtod(v3, &__endptr);
                }
                uint64_t v15 = __endptr;
                if (__endptr == *(char **)(a2 + 72)) {
                  return 22;
                }
                double *v8 = v24;
              }
              else
              {
                if (a1 != 9)
                {
                  int v27 = *__error();
                  uint64_t v28 = _SILogForLogForCategory(1);
                  os_log_type_t v29 = 2 * (dword_1E9FC90A8 < 4);
                  if (os_log_type_enabled(v28, v29))
                  {
                    *(_DWORD *)long long buf = 67109376;
                    *(_DWORD *)&uint8_t buf[4] = a1;
                    __int16 v36 = 2048;
                    int v37 = v8;
                    _os_log_impl(&dword_1BD672000, v28, v29, "convert_value_to_type: unknown data type 0x%x (val 0x%p)", buf, 0x12u);
                  }
                  *__error() = v27;
                  return 22;
                }
                if (*v3 == 48 && v3[1] == 120) {
                  LODWORD(v21) = strtoul(v3, &__endptr, 0);
                }
                else {
                  float v21 = strtof(v3, &__endptr);
                }
                uint64_t v15 = __endptr;
                if (__endptr == *(char **)(a2 + 72)) {
                  return 22;
                }
                *(float *)int v8 = v21;
              }
            }
            else
            {
              unint64_t v19 = strtoull(v3, &__endptr, 0);
              uint64_t v15 = __endptr;
              if (__endptr == *(char **)(a2 + 72))
              {
                if (strlen(__endptr) != 4) {
                  return 22;
                }
                uint64_t v15 = __endptr + 4;
                unint64_t v20 = bswap32(*(_DWORD *)__endptr);
                __endptr += 4;
              }
              else
              {
                unint64_t v20 = v19;
              }
              int v25 = *v15;
              if (*v15
                && v25 != 42
                && !((char)v25 < 0
                   ? __maskrune((char)v25, 0x4000uLL)
                   : *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * (char)v25 + 60) & 0x4000))
              {
                *(void *)long long buf = *(void *)(a2 + 72);
                double v31 = strtod(*(const char **)buf, (char **)buf);
                if (*(void *)buf > (unint64_t)v15 && v31 == trunc(v31))
                {
                  unint64_t v20 = (unint64_t)v31;
                  __enduint64_t ptr = *(char **)buf;
                  uint64_t v15 = *(char **)buf;
                }
              }
              *(void *)int v8 = v20;
            }
          }
          else
          {
            int v17 = strtoul(v3, &__endptr, 0);
            uint64_t v15 = __endptr;
            if (__endptr == *(char **)(a2 + 72))
            {
              if (strlen(__endptr) != 4) {
                return 22;
              }
              uint64_t v15 = __endptr + 4;
              int v18 = bswap32(*(_DWORD *)__endptr);
              __endptr += 4;
            }
            else
            {
              int v18 = v17;
            }
            int v22 = *v15;
            if (*v15
              && v22 != 42
              && !((char)v22 < 0
                 ? __maskrune((char)v22, 0x4000uLL)
                 : *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * (char)v22 + 60) & 0x4000))
            {
              *(void *)long long buf = *(void *)(a2 + 72);
              double v30 = strtod(*(const char **)buf, (char **)buf);
              if (*(void *)buf > (unint64_t)v15 && v30 == trunc(v30))
              {
                int v18 = (int)v30;
                __enduint64_t ptr = *(char **)buf;
                uint64_t v15 = *(char **)buf;
              }
            }
            *(_DWORD *)int v8 = v18;
          }
        }
        else
        {
          __int16 v16 = strtoul(v3, &__endptr, 0);
          uint64_t v15 = __endptr;
          if (__endptr == *(char **)(a2 + 72)) {
            return 22;
          }
          *(_WORD *)int v8 = v16;
        }
      }
      else
      {
        char v14 = strtol(v3, &__endptr, 0);
        uint64_t v15 = __endptr;
        if (__endptr == *(char **)(a2 + 72)) {
          return 22;
        }
        *(unsigned char *)int v8 = v14;
      }
      int v32 = *v15;
      if (*v15
        && v32 != 42
        && !((char)v32 < 0
           ? __maskrune((char)v32, 0x4000uLL)
           : *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * (char)v32 + 60) & 0x4000))
      {
        return 22;
      }
    }
    uint64_t result = 0;
    *(_DWORD *)(a2 + 160) |= v7;
    return result;
  }
  if (v4 == 15) {
    return 0;
  }
  else {
    return 22;
  }
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::ContainsKey(uint64_t a1, int a2, int a3)
{
  return (*(void *)(a1 + 8 * ((a3 & a2) << 16 >> 22) + 8) >> (a3 & a2)) & 1;
}

uint64_t db_get_localized_string(int *a1, uint64_t a2, char **a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  if (*a1 != 1685287992)
  {
    int v45 = *__error();
    unsigned int v46 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      int v47 = *a1;
      *(_DWORD *)long long buf = 136315650;
      uint64_t v87 = "db_get_localized_string";
      __int16 v88 = 1024;
      int v89 = 407;
      __int16 v90 = 1024;
      int v91 = v47;
      _os_log_error_impl(&dword_1BD672000, v46, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v45;
    vDSP_Length v48 = __si_assert_copy_extra_329();
    float16x8_t v49 = v48;
    if (v48) {
      unint64_t v50 = v48;
    }
    else {
      unint64_t v50 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 407, v50);
    free(v49);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  uint64_t v82 = 0;
  long long v83 = &v82;
  int v85 = 2;
  uint64_t v84 = 0x2000000000;
  if ((*(unsigned char *)(a2 + 2) & 0x80) != 0 && *(_WORD *)a2 == 11)
  {
    BOOL v11 = a3;
    if (!a3 || (uint64_t v12 = *a3) == 0)
    {
      BOOL v11 = &localized_language_defaults;
      uint64_t v12 = localized_language_defaults;
    }
    bzero(buf, 0x400uLL);
    uint64_t v78 = 0;
    uint64_t v79 = &v78;
    uint64_t v80 = 0x2000000000;
    long long v81 = buf;
    uint64_t v74 = 0;
    __int16 v75 = &v74;
    int v77 = 0;
    uint64_t v76 = 0x2000000000;
    v72[0] = 0;
    v72[1] = v72;
    int v73 = 128;
    v72[2] = 0x2000000000;
    uint64_t v68 = 0;
    unsigned int v69 = &v68;
    uint64_t v70 = 0x2000000000;
    char v71 = 0;
    v67[0] = MEMORY[0x1E4F143A8];
    v67[1] = 0x40000000;
    v67[2] = __db2_get_localized_string_block_invoke;
    v67[3] = &unk_1E63482D0;
    v67[10] = a4;
    v67[11] = a5;
    v67[4] = &v68;
    v67[5] = &v82;
    v67[6] = &v74;
    v67[7] = v72;
    v67[8] = &v78;
    v67[9] = v12;
    db_iterate_localized_field((uint64_t)a1, a2, a6, (uint64_t)v67);
    if (!*((unsigned char *)v69 + 24))
    {
      int v13 = *((_DWORD *)v75 + 6);
      if (v13)
      {
        char v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v79[3];
        if (sBestLanguageOnceDictionaryToken != -1) {
          dispatch_once(&sBestLanguageOnceDictionaryToken, &__block_literal_global_9260);
        }
        uint64_t key = 0;
        uint64_t v59 = (uint64_t)v11;
        WORD1(key) = v13;
        uint64_t v60 = v14;
        uint64_t v15 = *v11;
        if (*v11)
        {
          uint64_t v15 = 0;
          while (v11[(void)v15++ + 1])
            ;
        }
        LOWORD(key) = (_WORD)v15;
        pthread_rwlock_rdlock(&sBestLanguageDictionaryLock);
        CFStringRef Value = (void *)CFDictionaryGetValue((CFDictionaryRef)sBestLanguageDictionary, &key);
        pthread_rwlock_unlock(&sBestLanguageDictionaryLock);
        if (Value) {
          goto LABEL_50;
        }
        CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFSetRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], WORD1(key), MEMORY[0x1E4F1D510]);
        if (WORD1(key))
        {
          unint64_t v20 = 0;
          do
          {
            CFStringRef v21 = CFStringCreateWithCString(v18, *((const char **)v60 + v20), 0x8000100u);
            if (v21)
            {
              CFStringRef v22 = v21;
              CFArrayAppendValue(Mutable, v21);
              CFRelease(v22);
            }
            ++v20;
          }
          while (v20 < WORD1(key));
        }
        BOOL v23 = CFArrayCreateMutable(v18, (unsigned __int16)key, MEMORY[0x1E4F1D510]);
        if ((_WORD)key)
        {
          unint64_t v24 = 0;
          do
          {
            CFStringRef v25 = CFStringCreateWithCString(v18, *(const char **)(v59 + 8 * v24), 0x8000100u);
            if (v25)
            {
              CFStringRef v26 = v25;
              CFArrayAppendValue(v23, v25);
              CFRelease(v26);
            }
            ++v24;
          }
          while (v24 < (unsigned __int16)key);
        }
        CFArrayRef v27 = CFBundleCopyLocalizationsForPreferences(Mutable, v23);
        if (v27)
        {
          CFArrayRef v28 = v27;
          uint64_t v29 = (unsigned __int16)key;
          uint64_t v56 = WORD1(key);
          double v30 = v60;
          uint64_t v57 = v59;
          if (CFArrayGetCount(v27))
          {
            uint64_t v52 = v29;
            CFArrayRef v53 = v28;
            CFStringRef theStringa = (const __CFString *)CFArrayGetValueAtIndex(v28, 0);
            CFIndex Length = CFStringGetLength(theStringa);
            CFIndex v32 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
            CFStringRef Value = malloc_type_malloc(v32, 0xBCB3F94uLL);
            if (CFStringGetCString(theStringa, (char *)Value, v32, 0x8000100u))
            {
              float16x8_t v51 = v23;
              theCFStringRef String = (CFStringRef)Mutable;
              int v33 = (unsigned __int16 *)malloc_type_malloc(0x18uLL, 0x1080040C4643742uLL);
              v33[1] = v56;
              *((void *)v33 + 2) = malloc_type_malloc(8 * v56, 0x10040436913F5uLL);
              if (v33[1])
              {
                uint64_t v34 = 0;
                uint64_t v35 = 8 * v33[1];
                do
                {
                  *(void *)(*((void *)v33 + 2) + v34) = strdup(*(const char **)((char *)v30 + v34));
                  v34 += 8;
                }
                while (v35 != v34);
              }
              *int v33 = v52;
              *((void *)v33 + 1) = malloc_type_malloc(8 * v52, 0x10040436913F5uLL);
              if (*v33)
              {
                uint64_t v36 = 0;
                uint64_t v37 = 8 * *v33;
                do
                {
                  *(void *)(*((void *)v33 + 1) + v36) = strdup(*(const char **)(v57 + v36));
                  v36 += 8;
                }
                while (v37 != v36);
              }
              pthread_rwlock_wrlock(&sBestLanguageDictionaryLock);
              uint64_t v38 = (void *)CFDictionaryGetValue((CFDictionaryRef)sBestLanguageDictionary, v33);
              if (v38)
              {
                int v39 = v38;
                free(Value);
                pthread_rwlock_unlock(&sBestLanguageDictionaryLock);
                BOOL v23 = v51;
                if (v33[1])
                {
                  unint64_t v40 = 0;
                  do
                    free(*(void **)(*((void *)v33 + 2) + 8 * v40++));
                  while (v40 < v33[1]);
                }
                free(*((void **)v33 + 2));
                if (*v33)
                {
                  unint64_t v41 = 0;
                  do
                    free(*(void **)(*((void *)v33 + 1) + 8 * v41++));
                  while (v41 < *v33);
                }
                free(*((void **)v33 + 1));
                free(v33);
                CFStringRef Value = v39;
                CFSetRef Mutable = (__CFArray *)theString;
              }
              else
              {
                CFDictionarySetValue((CFMutableDictionaryRef)sBestLanguageDictionary, v33, Value);
                pthread_rwlock_unlock(&sBestLanguageDictionaryLock);
                CFSetRef Mutable = (__CFArray *)theString;
                BOOL v23 = v51;
              }
            }
            else
            {
              free(Value);
              CFStringRef Value = 0;
            }
            CFArrayRef v28 = v53;
          }
          else
          {
            CFStringRef Value = 0;
          }
          CFRelease(v28);
        }
        else
        {
          CFStringRef Value = 0;
        }
        CFRelease(v23);
        CFRelease(Mutable);
        if (Value)
        {
LABEL_50:
          uint64_t key = MEMORY[0x1E4F143A8];
          uint64_t v59 = 0x40000000;
          uint64_t v60 = __db2_get_localized_string_block_invoke_2;
          unsigned int v61 = &unk_1E63482F8;
          unsigned __int8 v64 = Value;
          uint64_t v65 = a4;
          uint64_t v66 = a5;
          int v62 = &v68;
          BOOL v63 = &v82;
          db_iterate_localized_field((uint64_t)a1, a2, a6, (uint64_t)&key);
        }
      }
    }
    unsigned int v43 = (uint8_t *)v79[3];
    if (v43 && v43 != buf) {
      free(v43);
    }
    uint64_t v42 = *((unsigned int *)v83 + 6);
    _Block_object_dispose(&v68, 8);
    _Block_object_dispose(v72, 8);
    _Block_object_dispose(&v74, 8);
    _Block_object_dispose(&v78, 8);
  }
  else
  {
    uint64_t v42 = 22;
  }
  _Block_object_dispose(&v82, 8);
  return v42;
}

int *_CIQueryNodeForString(uint64_t a1, const __CFString *a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6, int a7, int a8)
{
  uint64_t v213 = *MEMORY[0x1E4F143B8];
  icu_locale_create();
  if ((a4 & 0x820) == 0x20) {
    int v15 = a4 & 0x7FFDB00F;
  }
  else {
    int v15 = a4 & 0x7FFDB00F | 0x100;
  }
  if ((a4 & 4) != 0) {
    int v16 = a4 & 0x7FFDB00F;
  }
  else {
    int v16 = v15;
  }
  int v196 = a4;
  if (a1 && *(unsigned char *)(a1 + 45))
  {
    BOOL v17 = (a7 & 0x84) == 4 && (int)a3 > 1;
    if (a3 == 1 && (a4 & 4) == 0)
    {
      if (CFStringGetLength(a2) && CFStringGetCharacterAtIndex(a2, 0) == 42)
      {
        bzero(&__s1[3], 0x411uLL);
        *(_WORD *)__s1 = 513;
        LOBYTE(v18) = 1;
        size_t v19 = 3;
        uint64_t v20 = 2;
        goto LABEL_76;
      }
      int v198 = 0;
      int v29 = a4;
      if ((a4 & 0x800) == 0) {
        goto LABEL_47;
      }
LABEL_54:
      double v31 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 8uLL, 0x6085D6BuLL);
      if (!v31) {
        _log_fault_for_malloc_failure();
      }
      int v197 = v16;
      uint64_t v35 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x400uLL, 0x6085D6BuLL);
      if (!v35) {
        _log_fault_for_malloc_failure();
      }
      *double v31 = v35;
      CFStringGetFileSystemRepresentation(a2, v35, 1024);
      char v189 = 0;
      BOOL v194 = 0;
      int v36 = 1;
      int v198 = 1;
      uint64_t v34 = a3;
      goto LABEL_134;
    }
  }
  else
  {
    BOOL v17 = (~a7 & 0xC) == 0;
  }
  if ((int)a3 >= 2 && !a4 && CFEqual(a2, @"*"))
  {
    if (v17) {
      size_t v21 = 296;
    }
    else {
      size_t v21 = 360;
    }
    if (v21 > *MEMORY[0x1E4F14B00]) {
      ++sTotal_11167;
    }
    uint64_t v22 = 1;
    BOOL v23 = (int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v21, 0x31F9A007uLL);
    unsigned int v24 = a3;
    if (!v23) {
      _log_fault_for_malloc_failure();
    }
    *((void *)v23 + 4) = v23 + 10;
    *BOOL v23 = 1;
    v23[1] = v16;
    v23[2] = 0;
    memset(v212, 0, sizeof(v212));
    long long v211 = 0u;
    long long v210 = 0u;
    long long v209 = 0u;
    long long v208 = 0u;
    long long v207 = 0u;
    long long v206 = 0u;
    long long v205 = 0u;
    long long v204 = 0u;
    long long v203 = 0u;
    long long v202 = 0u;
    long long v201 = 0u;
    long long v200 = 0u;
    memset(&__s1[1], 0, 32);
    __s1[0] = 1;
    if ((a7 & 4) == 0)
    {
      uint64_t v22 = 2;
      __s1[1] = 2;
    }
    unsigned int v25 = a3 >> 28;
    if (a3 >> 28)
    {
      uint64_t v37 = &__s1[v22];
      char *v37 = a3 | 0x80;
      v37[1] = (a3 >> 7) | 0x80;
      unsigned int v37[2] = (a3 >> 14) | 0x80;
      v22 |= 4uLL;
      v37[3] = (a3 >> 21) | 0x80;
      unsigned int v27 = a3 >> 28;
    }
    else if ((a3 & 0xFE00000) != 0)
    {
      CFStringRef v26 = &__s1[v22];
      *CFStringRef v26 = a3 | 0x80;
      v26[1] = (a3 >> 7) | 0x80;
      v22 += 3;
      int v26[2] = (a3 >> 14) | 0x80;
      unsigned int v27 = (a3 & 0xFE00000) >> 21;
    }
    else if ((a3 & 0x1FC000) != 0)
    {
      uint64_t v187 = &__s1[v22];
      *uint64_t v187 = a3 | 0x80;
      v22 += 2;
      v187[1] = (a3 >> 7) | 0x80;
      unsigned int v27 = (a3 & 0x1FC000) >> 14;
    }
    else if ((a3 & 0x3F80) != 0)
    {
      __s1[v22++] = a3 | 0x80;
      unsigned int v27 = (unsigned __int16)(a3 & 0x3F80) >> 7;
    }
    else
    {
      LOBYTE(v27) = a3;
    }
    uint64_t v38 = &__s1[v22];
    *uint64_t v38 = v27;
    *(_WORD *)(v38 + 1) = 42;
    uint64_t v39 = *((void *)v23 + 4);
    unint64_t v40 = strdup(__s1);
    if ((v16 & 0x8000) != 0) {
      unsigned int v41 = v16 & 0x7FFCB108;
    }
    else {
      unsigned int v41 = v16;
    }
    if ((v41 & 0x3100) != 0) {
      int v42 = 8;
    }
    else {
      int v42 = 12;
    }
    unsigned int v43 = v42 & 0xFFFFFFFE | v41 & 1;
    if ((v41 & 0x10000) != 0) {
      v43 |= (v41 >> 8) & 0x7C00 | 0x10;
    }
    uint64_t v44 = v43 | v41 & 2;
    *(void *)uint64_t v39 = v40;
    *(void *)(v39 + 8) = 0;
    *(_DWORD *)(v39 + 16) = v41;
    *(_DWORD *)(v39 + 20) = -1;
    *(void *)(v39 + 24) = v44;
    *(_OWORD *)(v39 + 32) = 0u;
    *(_OWORD *)(v39 + 48) = 0u;
    if (v17)
    {
      unsigned int v45 = 1;
    }
    else
    {
      *(_WORD *)__s1 = 513;
      if (v25)
      {
        __s1[2] = a3 | 0x80;
        __s1[3] = (a3 >> 7) | 0x80;
        __s1[4] = (a3 >> 14) | 0x80;
        __s1[5] = (a3 >> 21) | 0x80;
        uint64_t v47 = 7;
        uint64_t v48 = 6;
        unsigned int v46 = a3 >> 28;
      }
      else if ((a3 & 0xFE00000) != 0)
      {
        __s1[2] = a3 | 0x80;
        __s1[3] = (a3 >> 7) | 0x80;
        __s1[4] = (a3 >> 14) | 0x80;
        unsigned int v46 = (a3 & 0xFE00000) >> 21;
        uint64_t v47 = 6;
        uint64_t v48 = 5;
      }
      else if ((a3 & 0x1FC000) != 0)
      {
        __s1[2] = a3 | 0x80;
        __s1[3] = (a3 >> 7) | 0x80;
        unsigned int v46 = (a3 & 0x1FC000) >> 14;
        uint64_t v47 = 5;
        uint64_t v48 = 4;
      }
      else if ((a3 & 0x3F80) != 0)
      {
        __s1[2] = a3 | 0x80;
        unsigned int v46 = (unsigned __int16)(a3 & 0x3F80) >> 7;
        uint64_t v47 = 4;
        uint64_t v48 = 3;
      }
      else
      {
        uint64_t v47 = 3;
        uint64_t v48 = 2;
        LOBYTE(v46) = a3;
      }
      __s1[v48] = v46;
      unsigned __int8 v64 = &__s1[v47];
      *unsigned __int8 v64 = 42;
      v64[1] = 0;
      uint64_t v65 = *((void *)v23 + 4);
      *(void *)(v65 + 64) = strdup(__s1);
      *(void *)(v65 + 72) = 0;
      *(_DWORD *)(v65 + 80) = v41;
      *(_DWORD *)(v65 + 84) = -1;
      *(void *)(v65 + 88) = v44;
      unsigned int v45 = 2;
      *(_OWORD *)(v65 + 96) = 0u;
      *(_OWORD *)(v65 + 112) = 0u;
      unsigned int v24 = a3;
    }
    __s1[0] = 4;
    if (v25)
    {
      __s1[1] = v24 | 0x80;
      __s1[2] = (v24 >> 7) | 0x80;
      __s1[3] = (v24 >> 14) | 0x80;
      __s1[4] = (v24 >> 21) | 0x80;
      uint64_t v67 = 6;
      uint64_t v68 = 5;
      LOBYTE(v66) = a3 >> 28;
    }
    else if ((v24 & 0xFE00000) != 0)
    {
      __s1[1] = v24 | 0x80;
      __s1[2] = (v24 >> 7) | 0x80;
      __s1[3] = (v24 >> 14) | 0x80;
      unsigned int v66 = (v24 & 0xFE00000) >> 21;
      uint64_t v67 = 5;
      uint64_t v68 = 4;
    }
    else if ((v24 & 0x1FC000) != 0)
    {
      __s1[1] = v24 | 0x80;
      __s1[2] = (v24 >> 7) | 0x80;
      unsigned int v66 = (v24 & 0x1FC000) >> 14;
      uint64_t v67 = 4;
      uint64_t v68 = 3;
    }
    else if ((v24 & 0x3F80) != 0)
    {
      __s1[1] = v24 | 0x80;
      unsigned int v66 = (unsigned __int16)(v24 & 0x3F80) >> 7;
      uint64_t v67 = 3;
      uint64_t v68 = 2;
    }
    else
    {
      uint64_t v67 = 2;
      uint64_t v68 = 1;
      LOBYTE(v66) = v24;
    }
    __s1[v68] = v66;
    unsigned int v69 = &__s1[v67];
    *unsigned int v69 = 42;
    v69[1] = 0;
    unint64_t v70 = *((void *)v23 + 4) + ((unint64_t)v45 << 6);
    *(void *)unint64_t v70 = strdup(__s1);
    *(void *)(v70 + 8) = 0;
    *(_DWORD *)(v70 + 16) = v41;
    *(_DWORD *)(v70 + 20) = -1;
    *(void *)(v70 + 24) = v44;
    *(_OWORD *)(v70 + 32) = 0u;
    *(_OWORD *)(v70 + 48) = 0u;
    __s1[0] = 2;
    if (v25)
    {
      __s1[1] = a3 | 0x80;
      __s1[2] = (a3 >> 7) | 0x80;
      __s1[3] = (a3 >> 14) | 0x80;
      __s1[4] = (a3 >> 21) | 0x80;
      uint64_t v72 = 6;
      uint64_t v73 = 5;
      LOBYTE(v71) = a3 >> 28;
    }
    else if ((a3 & 0xFE00000) != 0)
    {
      __s1[1] = a3 | 0x80;
      __s1[2] = (a3 >> 7) | 0x80;
      __s1[3] = (a3 >> 14) | 0x80;
      unsigned int v71 = (a3 & 0xFE00000) >> 21;
      uint64_t v72 = 5;
      uint64_t v73 = 4;
    }
    else if ((a3 & 0x1FC000) != 0)
    {
      __s1[1] = a3 | 0x80;
      __s1[2] = (a3 >> 7) | 0x80;
      unsigned int v71 = (a3 & 0x1FC000) >> 14;
      uint64_t v72 = 4;
      uint64_t v73 = 3;
    }
    else if ((a3 & 0x3F80) != 0)
    {
      __s1[1] = a3 | 0x80;
      unsigned int v71 = (unsigned __int16)(a3 & 0x3F80) >> 7;
      uint64_t v72 = 3;
      uint64_t v73 = 2;
    }
    else
    {
      uint64_t v72 = 2;
      uint64_t v73 = 1;
      LOBYTE(v71) = a3;
    }
    __s1[v73] = v71;
    uint64_t v74 = &__s1[v72];
    *uint64_t v74 = 42;
    v74[1] = 0;
    unint64_t v75 = *((void *)v23 + 4) + ((unint64_t)(v45 + 1) << 6);
    *(void *)unint64_t v75 = strdup(__s1);
    *(void *)(v75 + 8) = 0;
    *(_DWORD *)(v75 + 16) = v41;
    *(_DWORD *)(v75 + 20) = -1;
    *(void *)(v75 + 24) = v44;
    *(_OWORD *)(v75 + 32) = 0u;
    *(_OWORD *)(v75 + 48) = 0u;
    __s1[0] = 3;
    if (v25)
    {
      __s1[1] = a3 | 0x80;
      __s1[2] = (a3 >> 7) | 0x80;
      __s1[3] = (a3 >> 14) | 0x80;
      __s1[4] = (a3 >> 21) | 0x80;
      uint64_t v76 = 6;
      uint64_t v77 = 5;
    }
    else if ((a3 & 0xFE00000) != 0)
    {
      __s1[1] = a3 | 0x80;
      __s1[2] = (a3 >> 7) | 0x80;
      __s1[3] = (a3 >> 14) | 0x80;
      unsigned int v25 = (a3 & 0xFE00000) >> 21;
      uint64_t v76 = 5;
      uint64_t v77 = 4;
    }
    else if ((a3 & 0x1FC000) != 0)
    {
      __s1[1] = a3 | 0x80;
      __s1[2] = (a3 >> 7) | 0x80;
      unsigned int v25 = (a3 & 0x1FC000) >> 14;
      uint64_t v76 = 4;
      uint64_t v77 = 3;
    }
    else if ((a3 & 0x3F80) != 0)
    {
      __s1[1] = a3 | 0x80;
      unsigned int v25 = (unsigned __int16)(a3 & 0x3F80) >> 7;
      uint64_t v76 = 3;
      uint64_t v77 = 2;
    }
    else
    {
      uint64_t v76 = 2;
      uint64_t v77 = 1;
      LOBYTE(v25) = a3;
    }
    __s1[v77] = v25;
    uint64_t v78 = &__s1[v76];
    *uint64_t v78 = 42;
    v78[1] = 0;
    unint64_t v79 = *((void *)v23 + 4) + ((unint64_t)(v45 + 2) << 6);
    *(void *)unint64_t v79 = strdup(__s1);
    *(void *)(v79 + 8) = 0;
    *(_DWORD *)(v79 + 16) = v41;
    *(_DWORD *)(v79 + 20) = -1;
    *(void *)(v79 + 24) = v44;
    *(_OWORD *)(v79 + 32) = 0u;
    *(_OWORD *)(v79 + 48) = 0u;
    v23[6] = v45 + 3;
    goto LABEL_312;
  }
  char v28 = (int)a3 < 2 || v17;
  int v29 = a4;
  if ((v28 & 1) == 0 && (a4 & 0x824) == 0 && *(unsigned char *)(a1 + 15202))
  {
    bzero(&__s1[2], 0x412uLL);
    *(_WORD *)__s1 = 513;
    unsigned int v18 = a3 >> 28;
    if (a3 >> 28)
    {
      __s1[2] = a3 | 0x80;
      __s1[3] = (a3 >> 7) | 0x80;
      __s1[4] = (a3 >> 14) | 0x80;
      __s1[5] = (a3 >> 21) | 0x80;
      size_t v19 = 7;
      uint64_t v20 = 6;
    }
    else if ((a3 & 0xFE00000) != 0)
    {
      __s1[2] = a3 | 0x80;
      __s1[3] = (a3 >> 7) | 0x80;
      __s1[4] = (a3 >> 14) | 0x80;
      unsigned int v18 = (a3 & 0xFE00000) >> 21;
      size_t v19 = 6;
      uint64_t v20 = 5;
    }
    else if ((a3 & 0x1FC000) != 0)
    {
      __s1[2] = a3 | 0x80;
      __s1[3] = (a3 >> 7) | 0x80;
      unsigned int v18 = (a3 & 0x1FC000) >> 14;
      size_t v19 = 5;
      uint64_t v20 = 4;
    }
    else if ((a3 & 0x3F80) != 0)
    {
      __s1[2] = a3 | 0x80;
      unsigned int v18 = (unsigned __int16)(a3 & 0x3F80) >> 7;
      size_t v19 = 4;
      uint64_t v20 = 3;
    }
    else
    {
      size_t v19 = 3;
      uint64_t v20 = 2;
      LOBYTE(v18) = a3;
    }
LABEL_76:
    __s1[v20] = v18;
    float16x8_t v49 = CIDecomposeCFString(a2, __s1, v19);
    unint64_t v50 = *MEMORY[0x1E4F14B00];
    if (v49)
    {
      float16x8_t v51 = v49;
      if (v50 <= 0xE7) {
        ++sTotal_11167;
      }
      BOOL v23 = (int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0xE8uLL, 0x31F9A007uLL);
      if (!v23) {
        _log_fault_for_malloc_failure();
      }
      *((void *)v23 + 4) = v23 + 10;
      *BOOL v23 = 1;
      v23[1] = v16;
      v23[2] = 1;
      if ((a4 & 0x8000) != 0)
      {
        uint64_t v80 = (char *)&v51[v19];
        __int16 v81 = *(_WORD *)&v51[v19];
        *(_WORD *)&v51[v19] = 42;
        uint64_t v82 = *((void *)v23 + 4);
        long long v83 = strdup(v51);
        unsigned int v84 = v16 & 0x7FFCB108;
        if ((v16 & 0x8000) == 0) {
          unsigned int v84 = v16;
        }
        if ((v84 & 0x3100) != 0) {
          int v85 = 8;
        }
        else {
          int v85 = 12;
        }
        unsigned int v86 = v85 & 0xFFFFFFFE | v84 & 1;
        *(void *)uint64_t v82 = v83;
        *(void *)(v82 + 8) = 0;
        if ((v84 & 0x10000) != 0) {
          v86 |= (v84 >> 8) & 0x7C00 | 0x10;
        }
        uint64_t v87 = v86 | v84 & 2;
        if (a3 > 1) {
          int v88 = -1;
        }
        else {
          int v88 = a3;
        }
        *(_DWORD *)(v82 + 16) = v84;
        *(_DWORD *)(v82 + 20) = v88;
        *(void *)(v82 + 24) = v87;
        *(_OWORD *)(v82 + 32) = 0u;
        *(_OWORD *)(v82 + 48) = 0u;
        *(_WORD *)uint64_t v80 = v81;
        *(void *)(*((void *)v23 + 4) + 8) = strdup(v80);
        uint64_t v89 = icu_regex_create();
        uint64_t v63 = *((void *)v23 + 4);
        *(void *)(v63 + 40) = v89;
        int v62 = 1;
      }
      else
      {
        uint64_t v52 = strdup(v51);
        unsigned int v53 = v16 & 0x7FFCB108;
        if ((v16 & 0x8000) == 0) {
          unsigned int v53 = v16;
        }
        if ((v53 & 0x3100) != 0) {
          int v54 = 8;
        }
        else {
          int v54 = 12;
        }
        unsigned int v55 = v54 & 0xFFFFFFFE | v53 & 1;
        *((void *)v23 + 10) = 0;
        *((void *)v23 + 11) = 0;
        if ((v53 & 0x10000) != 0) {
          v55 |= (v53 >> 8) & 0x7C00 | 0x10;
        }
        uint64_t v56 = v55 | v53 & 2;
        if (a3 > 1) {
          int v57 = -1;
        }
        else {
          int v57 = a3;
        }
        *((void *)v23 + 5) = v52;
        *((void *)v23 + 6) = 0;
        v23[14] = v53;
        v23[15] = v57;
        *((void *)v23 + 8) = v56;
        *((void *)v23 + 9) = 0;
        v23[24] = 0;
        v23[25] = a8;
        icu_local_id();
        *(void *)(*((void *)v23 + 4) + 32) = icu_search_context_create_with_wildcard_limit();
        int is_fuzzy = icu_search_context_is_fuzzy();
        uint64_t v59 = *((void *)v23 + 4);
        if (is_fuzzy)
        {
          uint64_t v60 = *(void *)(v59 + 32);
          icu_search_context_is_prefix();
          la_init(v60);
        }
        *(void *)(v59 + 64) = 0;
        *(void *)(v59 + 72) = 0;
        *(_DWORD *)(v59 + 80) = 100;
        *(_DWORD *)(v59 + 84) = a3;
        *(_DWORD *)(v59 + 88) = 8;
        *(_OWORD *)(v59 + 92) = 0u;
        *(_OWORD *)(v59 + 108) = 0u;
        *(_DWORD *)(v59 + 124) = 0;
        uint64_t v61 = *((void *)v23 + 4);
        *(void *)(v61 + 128) = 0;
        *(void *)(v61 + 136) = 0;
        *(_DWORD *)(v61 + 144) = 100;
        *(_DWORD *)(v61 + 148) = a3;
        *(_DWORD *)(v61 + 152) = 8;
        *(_OWORD *)(v61 + 156) = 0u;
        *(_OWORD *)(v61 + 172) = 0u;
        *(_DWORD *)(v61 + 188) = 0;
        int v62 = FillQueryNodeRangePatternsCopy(*((void *)v23 + 4) + 64, a2, a2) + 1;
        uint64_t v63 = *((void *)v23 + 4);
      }
      int v90 = *(_DWORD *)(v63 + 20);
      *(_DWORD *)(v63 + 16) |= 8u;
      if (v90 == -1) {
        *(_DWORD *)(v63 + 20) = a3;
      }
      v23[6] = v62;
      if (v51 != __s1)
      {
        int v91 = (char *)v51;
LABEL_311:
        free(v91);
        goto LABEL_312;
      }
    }
    else
    {
      if (v50 <= 0x27) {
        ++sTotal_11167;
      }
      BOOL v23 = (int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x28uLL, 0x31F9A007uLL);
      if (!v23) {
        _log_fault_for_malloc_failure();
      }
      v23[2] = 0;
    }
    goto LABEL_312;
  }
  int v198 = 0;
  if ((a4 & 0x800) != 0) {
    goto LABEL_54;
  }
  if (!a3)
  {
    char v30 = atomic_load((unsigned int *)(a1 + 36));
    if ((v30 & 0x10) != 0)
    {
      int v197 = v16;
      double v31 = 0;
LABEL_74:
      BOOL v194 = 1;
      goto LABEL_131;
    }
  }
LABEL_47:
  int v197 = v16;
  if ((v29 & 0x6008000) == 0)
  {
    double v31 = (void *)ContentIndexCopyQueryTerms((uint64_t)a2, a6, a5, 16 * *(unsigned __int8 *)(a1 + 46), &v198);
    goto LABEL_74;
  }
  bzero(__s1, 0x414uLL);
  CFIndex v32 = CIDecomposeCFString(a2, __s1, 0);
  BOOL v194 = v32 == 0;
  if (v32)
  {
    int v33 = v32;
    double v31 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 8uLL, 0x6085D6BuLL);
    uint64_t v34 = a3;
    if (!v31) {
      _log_fault_for_malloc_failure();
    }
    if (v33 == __s1) {
      int v33 = strdup(__s1);
    }
    *double v31 = v33;
    int v198 = 1;
    goto LABEL_132;
  }
  double v31 = 0;
LABEL_131:
  uint64_t v34 = a3;
LABEL_132:
  int v36 = v198;
  if (!v198)
  {
    if (*MEMORY[0x1E4F14B00] <= 0x27uLL) {
      ++sTotal_11167;
    }
    BOOL v23 = (int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x28uLL, 0x31F9A007uLL);
    if (!v23) {
      _log_fault_for_malloc_failure();
    }
LABEL_308:
    int v185 = 0;
    goto LABEL_309;
  }
  char v189 = 1;
LABEL_134:
  uint64_t v193 = (v36 - 1);
  size_t v92 = ((uint64_t)v36 << 6) + 16 * (int)v193 + 40;
  if (!(v92 >> 17) && v92 > *MEMORY[0x1E4F14B00]) {
    ++sTotal_11167;
  }
  BOOL v23 = (int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v92, 0x31F9A007uLL);
  if (!v23) {
    _log_fault_for_malloc_failure();
  }
  *BOOL v23 = 0;
  v23[1] = v197;
  BOOL v93 = v34 == 0;
  if (v36 <= 1) {
    BOOL v93 = 0;
  }
  BOOL v192 = v93;
  if (v36 >= 1)
  {
    uint64_t v94 = 0;
    uint64_t v95 = (uint64_t)&v23[4 * (int)v193 + 10];
    int v195 = v23;
    uint64_t v191 = v31;
    while (1)
    {
      CFNumberRef v96 = (unsigned __int8 *)v31[v94];
      BOOL v97 = v192;
      if (v94 != v193) {
        BOOL v97 = 0;
      }
      if (v97 && v194)
      {
        int v98 = strlen((const char *)v31[v94]);
        int v99 = v98;
        if (v98 >= 2)
        {
          uint64_t v100 = &v96[v98];
          if (*(v100 - 1) == 42)
          {
            unint64_t v101 = (unint64_t)(v100 - 2);
            if (*(v100 - 2) != 92 || v101 <= (unint64_t)v96)
            {
              unint64_t v103 = *v96;
              UChar32 v104 = v103;
              if ((char)*v96 < 0)
              {
                unint64_t v105 = v103 >> 4;
                uint64_t v106 = utf8_byte_length(unsigned char)::utf8_len_table[v103 >> 4];
                UChar32 v104 = v103 & utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v106];
                if ((~(v103 >> 4) & 0xC) == 0)
                {
                  if (v106 <= 2) {
                    uint64_t v107 = 2;
                  }
                  else {
                    uint64_t v107 = utf8_byte_length(unsigned char)::utf8_len_table[v103 >> 4];
                  }
                  uint64_t v108 = v107 - 1;
                  size_t v109 = (char *)(v96 + 1);
                  do
                  {
                    char v110 = *v109++;
                    UChar32 v104 = v110 & 0x3F | (v104 << 6);
                    --v108;
                  }
                  while (v108);
                }
              }
              else
              {
                unint64_t v105 = v103 >> 4;
              }
              uint64_t v111 = utf8_byte_length_noerror(unsigned char)::utf8_len_table[v105];
              unint64_t v112 = (char *)&v96[v111];
              unint64_t v188 = v101;
              if (v104 == 92)
              {
                unint64_t v113 = *v112;
                UChar32 v104 = v113;
                if (*v112 < 0)
                {
                  unint64_t v114 = v113 >> 4;
                  uint64_t v115 = utf8_byte_length(unsigned char)::utf8_len_table[v113 >> 4];
                  UChar32 v104 = v113 & utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v115];
                  if ((~(v113 >> 4) & 0xC) == 0)
                  {
                    if (v115 <= 2) {
                      uint64_t v116 = 2;
                    }
                    else {
                      uint64_t v116 = utf8_byte_length(unsigned char)::utf8_len_table[v113 >> 4];
                    }
                    uint64_t v117 = v116 - 1;
                    uint64_t v118 = &v96[v111 + 1];
                    do
                    {
                      char v119 = *v118++;
                      UChar32 v104 = v119 & 0x3F | (v104 << 6);
                      --v117;
                    }
                    while (v117);
                  }
                }
                else
                {
                  unint64_t v114 = v113 >> 4;
                }
                v112 += utf8_byte_length_noerror(unsigned char)::utf8_len_table[v114];
              }
              if (u_ispunct(v104))
              {
                if ((unint64_t)v112 > v188) {
                  goto LABEL_183;
                }
                unint64_t v120 = *v112;
                int v121 = v120;
                if (*v112 < 0)
                {
                  unint64_t v122 = v120 >> 4;
                  uint64_t v123 = utf8_byte_length(unsigned char)::utf8_len_table[v120 >> 4];
                  int v121 = v120 & utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v123];
                  if ((~(v120 >> 4) & 0xC) == 0)
                  {
                    if (v123 <= 2) {
                      uint64_t v124 = 2;
                    }
                    else {
                      uint64_t v124 = utf8_byte_length(unsigned char)::utf8_len_table[v120 >> 4];
                    }
                    uint64_t v125 = v124 - 1;
                    unsigned int v126 = v112 + 1;
                    do
                    {
                      char v127 = *v126++;
                      int v121 = v127 & 0x3F | (v121 << 6);
                      --v125;
                    }
                    while (v125);
                  }
                }
                else
                {
                  unint64_t v122 = v120 >> 4;
                }
                __int16 v128 = (unsigned __int8 *)&v112[utf8_byte_length_noerror(unsigned char)::utf8_len_table[v122]];
                if (v121 == 92) {
                  v128 += utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*v128 >> 4];
                }
                if ((unint64_t)v128 > v188) {
LABEL_183:
                }
                  v96[v99 - 1] = 0;
              }
            }
          }
        }
      }
      if (!v94 && *v96 == 46 && !v96[1] && v34 != 0) {
        goto LABEL_296;
      }
      BOOL v130 = !v34 && v36 == 1;
      BOOL v131 = v130 || (v34 & 0xFFFFFFFD) == 1;
      BOOL v132 = v131;
      if ((v196 & 0x20) != 0) {
        break;
      }
      unsigned int v135 = v34;
      unsigned int v133 = v197;
LABEL_205:
      *(void *)&v23[4 * *v23 + 8] = v95;
      unsigned int v136 = v133;
      if ((v133 & 0x8000) != 0) {
        unsigned int v137 = v133 & 0xFFFEFFF8;
      }
      else {
        unsigned int v137 = v133;
      }
      if ((v137 & 0x3180) != 0) {
        int v138 = 8;
      }
      else {
        int v138 = 12;
      }
      unsigned int v139 = v138 & 0xFFFFFFFE | v137 & 1;
      if ((v137 & 0x10000) != 0) {
        v139 |= (v137 >> 8) & 0x7C00 | 0x10;
      }
      uint64_t v140 = v139 | v137 & 2;
      uint64_t v141 = v95;
      uint64_t v142 = v34;
      if ((int)v34 > 1) {
        int v143 = -1;
      }
      else {
        int v143 = v34;
      }
      uint64_t v144 = (_OWORD *)(v141 + 32);
      if ((v196 & 0x8000) != 0)
      {
        Term = copyQueryTerm("*", v135);
        memset(__s1, 0, 28);
        *(void *)uint64_t v141 = Term;
        *(void *)(v141 + 8) = 0;
        *(_DWORD *)(v141 + 16) = v137;
        *(_DWORD *)(v141 + 20) = v143;
        *(void *)(v141 + 24) = v140;
        *uint64_t v144 = *(_OWORD *)__s1;
        *(_OWORD *)(v141 + 44) = *(_OWORD *)&__s1[12];
        uint64_t v146 = v141;
        *(_DWORD *)(v141 + 60) = 0;
        *(void *)(*(void *)&v23[4 * *v23 + 8] + 8) = strdup((const char *)v96);
        uint64_t v153 = icu_regex_create();
        int v148 = *v23;
        uint64_t v151 = *v23;
        uint64_t v149 = *(void *)&v23[4 * v151 + 8];
        *(void *)(v149 + 40) = v153;
      }
      else
      {
        uint64_t v145 = copyQueryTerm((const char *)v96, v135);
        memset(__s1, 0, 28);
        *(void *)uint64_t v141 = v145;
        *(void *)(v141 + 8) = 0;
        *(_DWORD *)(v141 + 16) = v137;
        *(_DWORD *)(v141 + 20) = v143;
        *(void *)(v141 + 24) = v140;
        *uint64_t v144 = *(_OWORD *)__s1;
        *(_OWORD *)(v141 + 44) = *(_OWORD *)&__s1[12];
        uint64_t v146 = v141;
        *(_DWORD *)(v141 + 60) = a8;
        if (v189)
        {
          icu_local_id();
          uint64_t v147 = icu_search_context_create_with_wildcard_limit();
          int v148 = *v195;
          uint64_t v149 = *(void *)&v195[4 * *v195 + 8];
          *(void *)(v149 + 32) = v147;
          int v150 = v136;
          uint64_t v34 = v142;
          if ((v196 & 0x10000) != 0)
          {
            uint64_t v180 = v147;
            icu_search_context_is_prefix();
            la_init(v180);
          }
          uint64_t v151 = v148;
          double v31 = v191;
          goto LABEL_283;
        }
        uint64_t raw = icu_search_context_create_raw();
        int v148 = *v195;
        uint64_t v151 = *v195;
        uint64_t v149 = *(void *)&v195[4 * v151 + 8];
        *(void *)(v149 + 32) = raw;
      }
      int v150 = v136;
      double v31 = v191;
      uint64_t v34 = v142;
LABEL_283:
      int v197 = v150;
      if (*(_DWORD *)(v149 + 20) == -1)
      {
        if (v34 == -1) {
          int v181 = 1;
        }
        else {
          int v181 = v34;
        }
        *(_DWORD *)(v149 + 20) = v181;
      }
      BOOL v23 = v195;
      v195[4 * v151 + 6] = 1;
      int v36 = v198;
      if (!v34)
      {
        if (v198 == 1)
        {
          int v182 = (*v96 == 42) << 8;
          int v183 = v195[1];
        }
        else
        {
          int v183 = v195[1];
          if ((v183 & 0x3000) != 0) {
            int v182 = 256;
          }
          else {
            int v182 = 384;
          }
        }
        v195[1] = v183 | v182;
        *(_DWORD *)(v149 + 16) |= v182;
      }
      uint64_t v95 = v146 + 64;
      *int v195 = v148 + 1;
LABEL_296:
      free((void *)v31[v94]);
      v31[v94++] = 0;
      if (v94 >= v36) {
        goto LABEL_297;
      }
    }
    unsigned int v133 = v197;
    if (!v132 || (LODWORD(v134) = *v96, v134 == 42))
    {
      unsigned int v135 = v34;
      goto LABEL_205;
    }
    char v155 = 1;
    unsigned int v135 = v34;
    int v156 = v96;
    while (1)
    {
      char v157 = v155;
      uint64_t v158 = utf8_byte_length(unsigned char)::utf8_len_table[(unint64_t)v134 >> 4];
      uint64_t v159 = &v156[v158];
      unint64_t v134 = v156[v158];
      if (!v156[v158]) {
        goto LABEL_205;
      }
      if ((v134 & 0x80) != 0)
      {
        uint64_t v160 = utf8_byte_length(unsigned char)::utf8_len_table[v134 >> 4];
        int v161 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v160] & v134;
        if ((~(v134 >> 4) & 0xC) != 0) {
          goto LABEL_233;
        }
        uint64_t v162 = v160 <= 2 ? 2 : utf8_byte_length(unsigned char)::utf8_len_table[v134 >> 4];
        uint64_t v163 = v162 - 1;
        int v164 = &v156[v158 + 1];
        do
        {
          char v165 = *v164++;
          int v161 = v165 & 0x3F | (v161 << 6);
          --v163;
        }
        while (v163);
        if (v161 < 0x10000)
        {
LABEL_233:
          if ((v161 - 12441) >= 4 && (v161 - 65438) >= 2)
          {
            if ((unsigned __int16)v161 < 0x300u) {
              goto LABEL_251;
            }
            int v177 = __CFUniCharCombiningBitmap[BYTE1(v161)];
            if (!__CFUniCharCombiningBitmap[BYTE1(v161)]
              || v177 != 255
              && ((__CFUniCharCombiningBitmap[(v161 >> 3) + 256 + 32 * v177 - 32] >> (v161 & 7)) & 1) == 0)
            {
              goto LABEL_251;
            }
          }
        }
        else
        {
          unsigned int v174 = v161 - 917760;
          unsigned int v175 = v161 - 127995;
          if (v174 >= 0xF0 && v175 > 4) {
            goto LABEL_251;
          }
        }
        v159 += v160;
        unint64_t v134 = *v159;
        if (v157)
        {
          if (v134 == 42) {
            goto LABEL_252;
          }
          if ((v134 & 0x80) == 0) {
            goto LABEL_205;
          }
          uint64_t v167 = utf8_byte_length(unsigned char)::utf8_len_table[v134 >> 4];
          int v168 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v167] & v134;
          if ((~(v134 >> 4) & 0xC) != 0) {
            goto LABEL_247;
          }
          uint64_t v169 = v167 <= 2 ? 2 : utf8_byte_length(unsigned char)::utf8_len_table[v134 >> 4];
          uint64_t v170 = v169 - 1;
          BOOL v171 = &v156[v160 + 1 + v158];
          do
          {
            char v172 = *v171++;
            int v168 = v172 & 0x3F | (v168 << 6);
            --v170;
          }
          while (v170);
          if (v168 < 0x10000)
          {
LABEL_247:
            if ((v168 - 12441) >= 4 && (v168 - 65438) >= 2)
            {
              if ((unsigned __int16)v168 < 0x300u) {
                goto LABEL_205;
              }
              int v179 = __CFUniCharCombiningBitmap[BYTE1(v168)];
              if (v179 != 255
                && (!__CFUniCharCombiningBitmap[BYTE1(v168)]
                 || ((__CFUniCharCombiningBitmap[(v168 >> 3) + 256 + 32 * v179 - 32] >> (v168 & 7)) & 1) == 0))
              {
                goto LABEL_205;
              }
            }
          }
          else if ((v168 - 917760) >= 0xF0 && (v168 - 127995) > 4)
          {
            goto LABEL_205;
          }
        }
      }
LABEL_251:
      if (v134 == 42)
      {
LABEL_252:
        if (v159[1] || *(v159 - 1) == 92)
        {
          LODWORD(v134) = 42;
        }
        else
        {
          LODWORD(v134) = 0;
          *uint64_t v159 = 0;
          v133 |= 0x800u;
          if (v34 == 3)
          {
            unsigned int v135 = 0;
            uint64_t v34 = 5;
          }
          else
          {
            uint64_t v34 = v34;
          }
        }
      }
      char v155 = 0;
      int v156 = v159;
      if ((v157 & 1) == 0) {
        goto LABEL_205;
      }
    }
  }
LABEL_297:
  if (!v34) {
    goto LABEL_308;
  }
  if ((v196 & 0x20) != 0 && v36 == 1) {
    int v185 = 1;
  }
  else {
    int v185 = 3;
  }
LABEL_309:
  v23[2] = v185;
  if (v31)
  {
    int v91 = (char *)v31;
    goto LABEL_311;
  }
LABEL_312:
  icu_locale_release();
  return v23;
}

uint64_t ContentIndexMatchLocalizedFields(int *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v42 = 0;
  unsigned int v43 = &v42;
  uint64_t v44 = 0x2000000000;
  uint64_t v45 = 0;
  v40[0] = 0;
  v40[1] = v40;
  v40[2] = 0x2000000000;
  int v41 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = &v36;
  uint64_t v38 = 0x2000000000;
  int v39 = 0;
  int v6 = *a1;
  if (*a1 < 1)
  {
    int v7 = 0;
  }
  else
  {
    int v7 = 0;
    int v8 = a1 + 6;
    uint64_t v9 = *a1;
    do
    {
      int v10 = *v8;
      v8 += 4;
      int v11 = v10 - 1;
      if (v10 <= 1) {
        int v11 = 0;
      }
      v7 += v11;
      --v9;
    }
    while (v9);
  }
  int v12 = v7 + v6;
  int v13 = (unsigned char **)malloc_type_zone_malloc((malloc_zone_t *)queryZone, (uint64_t)(v7 + v6) << 6, 0x6085D6BuLL);
  if (!v13) {
    _log_fault_for_malloc_failure();
  }
  int v14 = *a1;
  if (*a1 < 1)
  {
    LODWORD(v16) = 0;
    if (!a2) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  uint64_t v15 = 0;
  LODWORD(v16) = 0;
  do
  {
    BOOL v17 = (unsigned int *)&a1[4 * v15];
    int v19 = v17[6];
    unsigned int v18 = (int *)(v17 + 6);
    if (v19 >= 1)
    {
      uint64_t v20 = 0;
      uint64_t v21 = (int)v16;
      if ((int)v16 <= v12) {
        int v22 = v12;
      }
      else {
        int v22 = v16;
      }
      uint64_t v23 = (v22 - v16);
      do
      {
        if (v20 == v23)
        {
          double v31 = __si_assert_copy_extra_329();
          CFIndex v32 = v31;
          int v33 = "";
          if (v31) {
            int v33 = v31;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "CIQuery.c", 1224, "pos<(secondaryCount+nodeCount)", v33);
          free(v32);
          if (__valid_fs(-1)) {
            uint64_t v34 = 2989;
          }
          else {
            uint64_t v34 = 3072;
          }
          *(_DWORD *)uint64_t v34 = -559038737;
          abort();
        }
        uint64_t v16 = v21 + 1;
        unsigned int v24 = &v13[8 * v21];
        unsigned int v25 = (long long *)(*(void *)&a1[4 * v15 + 8] + (v20 << 6));
        long long v26 = *v25;
        long long v27 = v25[1];
        long long v28 = v25[3];
        void v24[2] = v25[2];
        v24[3] = v28;
        *unsigned int v24 = v26;
        v24[1] = v27;
        ++v20;
        uint64_t v21 = v16;
      }
      while (v20 < *v18);
      int v14 = *a1;
    }
    ++v15;
  }
  while (v15 < v14);
  if (a2)
  {
LABEL_22:
    v35[0] = MEMORY[0x1E4F143A8];
    v35[1] = 0x40000000;
    v35[2] = ___CIMatchLocalizedFields_block_invoke;
    v35[3] = &unk_1E6347E90;
    v35[4] = &v36;
    v35[5] = v40;
    v35[6] = &v42;
    termUpdateSetResolveQueryInfo(a2, v16, v13, 0, 0, 0, (uint64_t)v35);
  }
LABEL_23:
  free(v13);
  *a3 = *((_DWORD *)v37 + 6);
  uint64_t v29 = v43[3];
  _Block_object_dispose(&v36, 8);
  _Block_object_dispose(v40, 8);
  _Block_object_dispose(&v42, 8);
  return v29;
}

BOOL db_compare_val(uint64_t a1)
{
  unsigned int v1 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = v2;
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (((*(_DWORD *)(v2 + 160) >> v1) & 1) == 0) {
    return (*(_DWORD *)(v2 + 24) - 5) < 2;
  }
  int v8 = v4;
  uint64_t v9 = (unsigned __int8 *)v3;
  int v10 = (const char **)(v2 + 8 * v1 + 168);
  switch(v1)
  {
    case 1u:
      int v20 = *v3;
      int v21 = *(char *)v10;
      goto LABEL_25;
    case 2u:
      int v20 = *(unsigned __int8 *)v3;
      int v21 = *(unsigned __int8 *)v10;
LABEL_25:
      int v11 = v20 - v21;
      uint64_t v12 = 1;
      goto LABEL_65;
    case 3u:
      int v22 = *(__int16 *)v3;
      int v23 = *(__int16 *)v10;
      goto LABEL_28;
    case 4u:
      int v22 = *(unsigned __int16 *)v3;
      int v23 = *(unsigned __int16 *)v10;
LABEL_28:
      int v11 = v22 - v23;
      uint64_t v12 = 2;
      goto LABEL_65;
    case 5u:
    case 6u:
      int v11 = *(_DWORD *)v3 - *(_DWORD *)v10;
      uint64_t v12 = 4;
      goto LABEL_65;
    case 7u:
    case 8u:
      if ((uint64_t)(*(void *)v3 - (void)*v10) < 0) {
        int v14 = -1;
      }
      else {
        int v14 = 1;
      }
      if (*(const char **)v3 == *v10) {
        int v11 = 0;
      }
      else {
        int v11 = v14;
      }
      uint64_t v12 = 8;
      goto LABEL_65;
    case 9u:
      float v24 = *(float *)v3 - *(float *)v10;
      if (v24 >= 0.0) {
        int v25 = 1;
      }
      else {
        int v25 = -1;
      }
      if (v24 == 0.0) {
        int v11 = 0;
      }
      else {
        int v11 = v25;
      }
      uint64_t v12 = 4;
      goto LABEL_65;
    case 0xAu:
    case 0xCu:
      double v15 = *(double *)v3 - *(double *)v10;
      if (v15 >= 0.0) {
        int v16 = 1;
      }
      else {
        int v16 = -1;
      }
      if (v15 == 0.0) {
        int v11 = 0;
      }
      else {
        int v11 = v16;
      }
      uint64_t v12 = 8;
      goto LABEL_65;
    case 0xBu:
      long long v26 = v6;
      long long v27 = v5;
      int v28 = strlen(v3);
      uint64_t v29 = (unsigned __int8 *)*v10;
      if (v29)
      {
        uint64_t v30 = *(void *)(v7 + 32);
        unsigned int v31 = (v30 >> 4) & 3;
        if ((v30 & 0x800000) != 0) {
          LOBYTE(v31) = v31 | 0x10;
        }
        uint64_t v32 = *(void *)(v7 + 104);
        if ((v30 & 2) != 0)
        {
          if (v32) {
            goto LABEL_49;
          }
          os_unfair_lock_lock((os_unfair_lock_t)&s_search_reg_ex_unfair_lock);
          if (!*(void *)(v7 + 104))
          {
            uint64_t v36 = icu_regex_create();
            __dmb(0xBu);
            *(void *)(v7 + 104) = v36;
          }
          os_unfair_lock_unlock((os_unfair_lock_t)&s_search_reg_ex_unfair_lock);
          if (*(void *)(v7 + 104))
          {
LABEL_49:
            icu_regex_find();
            int v37 = 0;
LABEL_63:
            int v11 = v37 != 1;
            goto LABEL_64;
          }
        }
        else
        {
          if (v32) {
            goto LABEL_56;
          }
          os_unfair_lock_lock((os_unfair_lock_t)&s_search_ctx_unfair_lock);
          if (!*(void *)(v7 + 104))
          {
            uint64_t v41 = icu_search_context_create_with_wildcard_limit();
            __dmb(0xBu);
            *(void *)(v7 + 104) = v41;
          }
          os_unfair_lock_unlock((os_unfair_lock_t)&s_search_ctx_unfair_lock);
          if (*(void *)(v7 + 104))
          {
LABEL_56:
            if (icu_search_match())
            {
              int v37 = 1;
            }
            else
            {
              int v37 = checkTranscriptions(v29, v9);
              if (v37)
              {
                bzero(&v44, 0x1000uLL);
                int v37 = CIStringTokenizerResolveTranscriptions((uint64_t)v9);
                if (v37) {
                  int v37 = icu_search_match();
                }
              }
            }
            goto LABEL_63;
          }
        }
        int v37 = matche(v29, v9, v31 | (v30 >> 4) & 4, v27, v26);
        goto LABEL_63;
      }
      int v33 = *__error();
      uint64_t v34 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        int v38 = *(_DWORD *)(v7 + 160);
        int v39 = *(const char **)v7;
        unint64_t v40 = "<NULL>";
        if (!*(void *)v7) {
          int v39 = "<NULL>";
        }
        if (*(void *)(v7 + 72)) {
          unint64_t v40 = *(const char **)(v7 + 72);
        }
        int v44 = 136316162;
        uint64_t v45 = "db_compare_val";
        __int16 v46 = 1024;
        int v47 = 3361;
        __int16 v48 = 1024;
        int v49 = v38;
        __int16 v50 = 2080;
        float16x8_t v51 = v39;
        __int16 v52 = 2080;
        unsigned int v53 = v40;
        _os_log_error_impl(&dword_1BD672000, v34, OS_LOG_TYPE_ERROR, "%s:%d: nil str_val converted_bits: 0x%x field: %s string: %s", (uint8_t *)&v44, 0x2Cu);
      }
      uint64_t v35 = __error();
      int v11 = 0;
      *uint64_t v35 = v33;
LABEL_64:
      uint64_t v12 = v28 + 1;
LABEL_65:
      int v42 = *(_DWORD *)(v7 + 24);
      if (v42 == 1)
      {
        if (v11) {
          goto LABEL_67;
        }
LABEL_83:
        BOOL result = 1;
        goto LABEL_84;
      }
      if (v42 == 2 && !v11
        || (v42 - 5) <= 1 && v11
        || v42 == 7 && v11 < 0
        || v42 == 3 && v11 < 1
        || v42 == 8 && v11 > 0)
      {
        goto LABEL_83;
      }
LABEL_67:
      BOOL result = v42 == 4 && v11 >= 0;
LABEL_84:
      if (*v8 == -1) {
        uint64_t *v8 = v12;
      }
      return result;
    default:
      size_t v17 = *v4;
      size_t v18 = strlen(*v10);
      if (v17 >= v18) {
        size_t v19 = v18;
      }
      else {
        size_t v19 = v17;
      }
      int v11 = memcmp(v9, v10, v19);
      uint64_t v12 = 0;
      goto LABEL_65;
  }
}

uint64_t checkTranscriptions(unsigned char *a1, unsigned char *a2)
{
  uint64_t result = 0;
  if (!a1) {
    return result;
  }
  unsigned int v4 = a2;
  if (!a2) {
    return result;
  }
  uint64_t result = *a1;
  if (!*a1) {
    return result;
  }
  uint64_t v5 = MEMORY[0x1E4F14390];
  int v6 = a1;
  while (1)
  {
    if ((result & 0x80) == 0)
    {
LABEL_13:
      if ((*(_DWORD *)(v5 + 4 * result + 60) & 0x100) != 0) {
        break;
      }
      goto LABEL_14;
    }
    unint64_t v7 = (unint64_t)result >> 4;
    char v8 = ~(_BYTE)v7;
    uint64_t v9 = utf8_byte_length(unsigned char)::utf8_len_table[v7];
    unsigned int v10 = (utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v9] & result);
    if ((v8 & 0xC) != 0)
    {
      LODWORD(result) = (utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v9] & result);
      if (v10 <= 0x7F) {
        goto LABEL_13;
      }
    }
    else
    {
      if (v9 <= 2) {
        uint64_t v9 = 2;
      }
      else {
        uint64_t v9 = v9;
      }
      uint64_t v11 = v9 - 1;
      uint64_t v12 = v6 + 1;
      do
      {
        char v13 = *v12++;
        LODWORD(result) = v13 & 0x3F | (v10 << 6);
        unsigned int v10 = result;
        --v11;
      }
      while (v11);
      if (result <= 0x7F) {
        goto LABEL_13;
      }
    }
    if (__maskrune(result, 0x100uLL)) {
      break;
    }
LABEL_14:
    v6 += utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*v6 >> 4];
    LODWORD(result) = *v6;
    if (!*v6) {
      goto LABEL_33;
    }
  }
  unsigned int v14 = *v4;
  if (!*v4)
  {
LABEL_33:
    unsigned int v24 = *a1;
    if (!*a1) {
      return 0;
    }
    while (1)
    {
      int v25 = v24;
      if ((v24 & 0x80) != 0)
      {
        unint64_t v26 = (unint64_t)v24 >> 4;
        char v27 = ~(_BYTE)v26;
        uint64_t v28 = utf8_byte_length(unsigned char)::utf8_len_table[v26];
        int v29 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v28] & v24;
        if ((v27 & 0xC) != 0)
        {
          int v25 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v28] & v24;
        }
        else
        {
          if (v28 <= 2) {
            uint64_t v28 = 2;
          }
          else {
            uint64_t v28 = v28;
          }
          uint64_t v30 = v28 - 1;
          unsigned int v31 = a1 + 1;
          do
          {
            char v32 = *v31++;
            int v25 = v32 & 0x3F | (v29 << 6);
            int v29 = v25;
            --v30;
          }
          while (v30);
        }
      }
      if ((v25 - 12352) <= 0x5F) {
        break;
      }
      a1 += utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)v24 >> 4];
      unsigned int v24 = *a1;
      if (!*a1) {
        return 0;
      }
    }
    unsigned int v33 = *v4;
    if (!*v4) {
      return 0;
    }
    uint64_t result = 1;
    while (1)
    {
      unint64_t v34 = (unint64_t)v33 >> 4;
      if ((v33 & 0x80) != 0 && (((unint64_t)v33 >> 4) & 0xC) == 0xC)
      {
        uint64_t v35 = utf8_byte_length(unsigned char)::utf8_len_table[v34];
        unsigned int v36 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v35] & v33;
        uint64_t v37 = v35 <= 2 ? 2 : utf8_byte_length(unsigned char)::utf8_len_table[v34];
        uint64_t v38 = v37 - 1;
        int v39 = v4 + 1;
        do
        {
          unsigned int v40 = v36;
          char v41 = *v39++;
          unsigned int v36 = v41 & 0x3F | (v36 << 6);
          --v38;
        }
        while (v38);
        if (v36 >> 8 >= 0x11 && ((v40 & 0x3FFFFFC) == 0x44 || ((v40 << 6) - 11904) >> 7 < 0x197 || v36 - 65376 < 0x50)) {
          break;
        }
      }
      v4 += utf8_byte_length_noerror(unsigned char)::utf8_len_table[v34];
      unsigned int v33 = *v4;
      if (!*v4) {
        return 0;
      }
    }
    return result;
  }
  double v15 = v4;
  uint64_t result = 1;
  while (1)
  {
    unint64_t v16 = (unint64_t)v14 >> 4;
    if ((v14 & 0x80) != 0 && (((unint64_t)v14 >> 4) & 0xC) == 0xC)
    {
      uint64_t v17 = utf8_byte_length(unsigned char)::utf8_len_table[v16];
      unsigned int v18 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v17] & v14;
      uint64_t v19 = v17 <= 2 ? 2 : utf8_byte_length(unsigned char)::utf8_len_table[v16];
      uint64_t v20 = v19 - 1;
      int v21 = v15 + 1;
      do
      {
        unsigned int v22 = v18;
        char v23 = *v21++;
        unsigned int v18 = v23 & 0x3F | (v18 << 6);
        --v20;
      }
      while (v20);
      if (v18 >> 8 >= 0x11 && ((v22 & 0x3FFFFFC) == 0x44 || ((v22 << 6) - 11904) >> 7 < 0x197 || v18 - 65376 < 0x50)) {
        return result;
      }
    }
    v15 += utf8_byte_length_noerror(unsigned char)::utf8_len_table[v16];
    unsigned int v14 = *v15;
    if (!*v15) {
      goto LABEL_33;
    }
  }
}

uint64_t SIValueSet<unsigned int>::_SIValueSetInnerInsert(unint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = a3;
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  unsigned __int16 v7 = 28 - 4 * a3;
  char v8 = 28 - 4 * a3;
  uint64_t v9 = (a2 >> v8) & 0xF;
  unint64_t v10 = *(void *)(a1 + 8 * v9);
  if (v10)
  {
    do
    {
      unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      unsigned __int16 v7 = 24 - 4 * v5;
      char v8 = 24 - 4 * v5;
      uint64_t v9 = (a2 >> v8) & 0xF;
      unint64_t v10 = *(void *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 8 * v9);
      ++v5;
    }
    while ((v10 & 1) != 0);
  }
  else
  {
    unint64_t v11 = a1;
  }
  if ((__int16)v7 < 13)
  {
    if (!v10)
    {
      unint64_t v10 = (unint64_t)CFAllocatorAllocate(*(CFAllocatorRef *)(a4 + 16), 520, 0);
      *(void *)unint64_t v10 = &unk_1F1810CF0;
      *(_OWORD *)(v10 + 24) = 0u;
      *(_OWORD *)(v10 + 40) = 0u;
      *(_OWORD *)(v10 + 56) = 0u;
      *(_OWORD *)(v10 + 72) = 0u;
      *(_OWORD *)(v10 + 88) = 0u;
      *(_OWORD *)(v10 + 104) = 0u;
      *(_OWORD *)(v10 + 120) = 0u;
      *(_OWORD *)(v10 + 136) = 0u;
      *(_OWORD *)(v10 + 152) = 0u;
      *(_OWORD *)(v10 + 168) = 0u;
      *(_OWORD *)(v10 + 184) = 0u;
      *(_OWORD *)(v10 + 200) = 0u;
      *(_OWORD *)(v10 + 216) = 0u;
      *(_OWORD *)(v10 + 232) = 0u;
      *(_OWORD *)(v10 + 248) = 0u;
      *(_OWORD *)(v10 + 8) = 0u;
      *(_OWORD *)(v10 + 264) = 0u;
      *(_OWORD *)(v10 + 280) = 0u;
      *(_OWORD *)(v10 + 296) = 0u;
      *(_OWORD *)(v10 + 312) = 0u;
      *(_OWORD *)(v10 + 328) = 0u;
      *(_OWORD *)(v10 + 344) = 0u;
      *(_OWORD *)(v10 + 360) = 0u;
      *(_OWORD *)(v10 + 376) = 0u;
      *(_OWORD *)(v10 + 392) = 0u;
      *(_OWORD *)(v10 + 408) = 0u;
      *(_OWORD *)(v10 + 424) = 0u;
      *(_OWORD *)(v10 + 440) = 0u;
      *(_OWORD *)(v10 + 456) = 0u;
      *(_OWORD *)(v10 + 472) = 0u;
      *(_OWORD *)(v10 + 488) = 0u;
      *(_OWORD *)(v10 + 504) = 0u;
      *(void *)(v11 + 8 * v9) = v10;
    }
    int v13 = a2 & ~(-1 << v8);
    int v14 = (__int16)v13 >> 6;
    uint64_t v15 = 1 << v13;
    unint64_t v16 = (char *)(v10 + 8 * (__int16)v14);
    uint64_t v19 = *((void *)v16 + 1);
    uint64_t v17 = (uint64_t *)(v16 + 8);
    uint64_t v18 = v19;
    if ((v19 & v15) != 0) {
      return 0;
    }
    *uint64_t v17 = v18 | v15;
    return 1;
  }
  if (v10)
  {
    uint64_t v12 = *(uint64_t (***)(unint64_t, uint64_t, void))v10;
  }
  else
  {
    if (v7 < 0x20u)
    {
      CFAllocatorRef v21 = *(const __CFAllocator **)(a4 + 16);
      if (v7 < 0x10u)
      {
        unint64_t v10 = (unint64_t)CFAllocatorAllocate(v21, 136, 0);
        uint64_t v12 = (uint64_t (**)(unint64_t, uint64_t, void))&unk_1F1810E30;
        *(void *)unint64_t v10 = &unk_1F1810E30;
        *(_OWORD *)(v10 + 8) = 0u;
        *(_OWORD *)(v10 + 24) = 0u;
        *(_OWORD *)(v10 + 40) = 0u;
        *(_OWORD *)(v10 + 56) = 0u;
        *(_OWORD *)(v10 + 72) = 0u;
        *(_OWORD *)(v10 + 88) = 0u;
        *(_OWORD *)(v10 + 104) = 0u;
        *(_OWORD *)(v10 + 120) = 0u;
      }
      else
      {
        unint64_t v10 = (unint64_t)CFAllocatorAllocate(v21, 264, 0);
        uint64_t v12 = (uint64_t (**)(unint64_t, uint64_t, void))&unk_1F1810D90;
        *(void *)unint64_t v10 = &unk_1F1810D90;
        *(_OWORD *)(v10 + 8) = 0u;
        *(_OWORD *)(v10 + 24) = 0u;
        *(_OWORD *)(v10 + 40) = 0u;
        *(_OWORD *)(v10 + 56) = 0u;
        *(_OWORD *)(v10 + 72) = 0u;
        *(_OWORD *)(v10 + 88) = 0u;
        *(_OWORD *)(v10 + 104) = 0u;
        *(_OWORD *)(v10 + 120) = 0u;
        *(_OWORD *)(v10 + 136) = 0u;
        *(_OWORD *)(v10 + 152) = 0u;
        *(_OWORD *)(v10 + 168) = 0u;
        *(_OWORD *)(v10 + 184) = 0u;
        *(_OWORD *)(v10 + 200) = 0u;
        *(_OWORD *)(v10 + 216) = 0u;
        *(_OWORD *)(v10 + 232) = 0u;
        *(_OWORD *)(v10 + 248) = 0u;
      }
    }
    else
    {
      unint64_t v10 = (unint64_t)CFAllocatorAllocate(*(CFAllocatorRef *)(a4 + 16), 520, 0);
      uint64_t v12 = (uint64_t (**)(unint64_t, uint64_t, void))&unk_1F1810ED0;
      *(void *)unint64_t v10 = &unk_1F1810ED0;
      *(_OWORD *)(v10 + 24) = 0u;
      *(_OWORD *)(v10 + 40) = 0u;
      *(_OWORD *)(v10 + 56) = 0u;
      *(_OWORD *)(v10 + 72) = 0u;
      *(_OWORD *)(v10 + 88) = 0u;
      *(_OWORD *)(v10 + 104) = 0u;
      *(_OWORD *)(v10 + 120) = 0u;
      *(_OWORD *)(v10 + 136) = 0u;
      *(_OWORD *)(v10 + 152) = 0u;
      *(_OWORD *)(v10 + 168) = 0u;
      *(_OWORD *)(v10 + 184) = 0u;
      *(_OWORD *)(v10 + 200) = 0u;
      *(_OWORD *)(v10 + 216) = 0u;
      *(_OWORD *)(v10 + 232) = 0u;
      *(_OWORD *)(v10 + 248) = 0u;
      *(_OWORD *)(v10 + 8) = 0u;
      *(_OWORD *)(v10 + 264) = 0u;
      *(_OWORD *)(v10 + 280) = 0u;
      *(_OWORD *)(v10 + 296) = 0u;
      *(_OWORD *)(v10 + 312) = 0u;
      *(_OWORD *)(v10 + 328) = 0u;
      *(_OWORD *)(v10 + 344) = 0u;
      *(_OWORD *)(v10 + 360) = 0u;
      *(_OWORD *)(v10 + 376) = 0u;
      *(_OWORD *)(v10 + 392) = 0u;
      *(_OWORD *)(v10 + 408) = 0u;
      *(_OWORD *)(v10 + 424) = 0u;
      *(_OWORD *)(v10 + 440) = 0u;
      *(_OWORD *)(v10 + 456) = 0u;
      *(_OWORD *)(v10 + 472) = 0u;
      *(_OWORD *)(v10 + 488) = 0u;
      *(_OWORD *)(v10 + 504) = 0u;
    }
    *(void *)(v11 + 8 * v9) = v10;
  }
  uint64_t v20 = (*v12)(v10, a2, ~(-1 << v8));
  if ((unint64_t)(*(uint64_t (**)(unint64_t))(*(void *)v10 + 56))(v10) < 0x3E) {
    return v20;
  }
  uint64_t v22 = *(void *)(a4 + 8);
  if (v22 == 63 || (char v23 = *(void **)a4) == 0)
  {
    char v23 = CFAllocatorAllocate(*(CFAllocatorRef *)(a4 + 16), 8072, 0);
    *char v23 = *(void *)a4;
    bzero(v23 + 1, 0x1F80uLL);
    uint64_t v22 = 0;
    *(void *)a4 = v23;
  }
  *(void *)(a4 + 8) = v22 + 1;
  unsigned int v24 = &v23[16 * v22];
  *(_OWORD *)(v24 + 1) = 0u;
  unint64_t v25 = (unint64_t)(v24 + 1);
  *(_OWORD *)(v25 + 96) = 0u;
  *(_OWORD *)(v25 + 112) = 0u;
  *(_OWORD *)(v25 + 64) = 0u;
  *(_OWORD *)(v25 + 80) = 0u;
  *(_OWORD *)(v25 + 32) = 0u;
  *(_OWORD *)(v25 + 48) = 0u;
  uint64_t v26 = (v5 + 1);
  int v27 = 32 - 4 * v26;
  *(_OWORD *)(v25 + 16) = 0u;
  if (v27 >= 32)
  {
    unint64_t v28 = *(void *)(v10 + 8);
    if (v28 > 0x3F) {
      goto LABEL_85;
    }
    uint64_t v58 = (uint64_t)&v58;
    unsigned int v59 = v20;
    LODWORD(v29) = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    long long v92 = 0uLL;
    long long v93 = 0uLL;
    unint64_t v60 = v10 + 16 + 8 * v28;
    uint64_t v61 = (void *)(v10 + 16);
    long long v90 = 0uLL;
    long long v91 = 0uLL;
    long long v88 = 0uLL;
    long long v89 = 0uLL;
    long long v86 = 0uLL;
    long long v87 = 0uLL;
    long long v84 = 0uLL;
    long long v85 = 0uLL;
    long long v82 = 0uLL;
    long long v83 = 0uLL;
    long long v80 = 0uLL;
    long long v81 = 0uLL;
    long long v78 = 0uLL;
    long long v79 = 0uLL;
    long long v76 = 0uLL;
    long long v77 = 0uLL;
    long long v74 = 0uLL;
    long long v75 = 0uLL;
    long long v72 = 0uLL;
    long long v73 = 0uLL;
    long long v70 = 0uLL;
    long long v71 = 0uLL;
    long long v68 = 0uLL;
    long long v69 = 0uLL;
    long long v66 = 0uLL;
    long long v67 = 0uLL;
    long long v64 = 0uLL;
    long long v65 = 0uLL;
    long long v62 = 0uLL;
    long long v63 = 0uLL;
    while (1)
    {
      if (v30)
      {
        --v30;
        LODWORD(v29) = v29 + 1;
      }
      else
      {
        if ((unint64_t)v61 >= v60)
        {
          uint64_t v20 = v59;
          if (v31)
          {
            int v44 = (unsigned int *)&v62;
            do
            {
              unsigned int v45 = *v44++;
              SIValueSet<unsigned int>::_SIValueSetInnerInsert(v25, v45, v26, a4);
              --v31;
            }
            while (v31);
          }
          goto LABEL_85;
        }
        char v32 = v61 + 1;
        uint64_t v29 = *v61;
        if ((unint64_t)(v61 + 1) >= v60)
        {
          uint64_t v30 = 0;
          ++v61;
        }
        else
        {
          uint64_t v33 = *v32 & 0x7FFFFFFFFFFFFFFFLL;
          BOOL v34 = *v32 >= 0;
          if ((uint64_t)*v32 < 0) {
            char v32 = v61 + 2;
          }
          uint64_t v61 = v32;
          if (v34) {
            uint64_t v30 = 0;
          }
          else {
            uint64_t v30 = v33;
          }
        }
      }
      *((_DWORD *)&v62 + v31++) = v29;
      if (v31 == 128)
      {
        for (uint64_t i = 0; i != 512; i += 4)
          SIValueSet<unsigned int>::_SIValueSetInnerInsert(v25, *(unsigned int *)((char *)&v62 + i), v26, a4);
        uint64_t v31 = 0;
      }
    }
  }
  if (v27 >= 16)
  {
    uint64_t v36 = *(unsigned int *)(v10 + 8);
    if (v36 > 0x3F) {
      goto LABEL_85;
    }
    uint64_t v58 = (uint64_t)&v58;
    unsigned int v59 = v20;
    int v37 = 0;
    int v38 = 0;
    uint64_t v39 = 0;
    long long v92 = 0uLL;
    long long v93 = 0uLL;
    unint64_t v60 = v10 + 12 + 4 * v36;
    uint64_t v61 = (void *)(v10 + 12);
    long long v90 = 0uLL;
    long long v91 = 0uLL;
    long long v88 = 0uLL;
    long long v89 = 0uLL;
    long long v86 = 0uLL;
    long long v87 = 0uLL;
    long long v84 = 0uLL;
    long long v85 = 0uLL;
    long long v82 = 0uLL;
    long long v83 = 0uLL;
    long long v80 = 0uLL;
    long long v81 = 0uLL;
    long long v78 = 0uLL;
    long long v79 = 0uLL;
    long long v76 = 0uLL;
    long long v77 = 0uLL;
    long long v74 = 0uLL;
    long long v75 = 0uLL;
    long long v72 = 0uLL;
    long long v73 = 0uLL;
    long long v70 = 0uLL;
    long long v71 = 0uLL;
    long long v68 = 0uLL;
    long long v69 = 0uLL;
    long long v66 = 0uLL;
    long long v67 = 0uLL;
    long long v64 = 0uLL;
    long long v65 = 0uLL;
    long long v62 = 0uLL;
    long long v63 = 0uLL;
    while (1)
    {
      if (v38)
      {
        --v38;
        ++v37;
      }
      else
      {
        if ((unint64_t)v61 >= v60)
        {
          uint64_t v20 = v59;
          if (v39)
          {
            unsigned int v53 = (unsigned int *)&v62;
            do
            {
              unsigned int v54 = *v53++;
              SIValueSet<unsigned int>::_SIValueSetInnerInsert(v25, v54, v26, a4);
              --v39;
            }
            while (v39);
          }
          goto LABEL_85;
        }
        unsigned int v40 = (int *)v61 + 1;
        int v37 = *(_DWORD *)v61;
        if ((unint64_t)v61 + 4 >= v60)
        {
          int v38 = 0;
          uint64_t v61 = (void *)((char *)v61 + 4);
        }
        else
        {
          int v41 = *v40;
          int v42 = *v40 & 0x7FFFFFFF;
          if (*v40 < 0) {
            unsigned int v40 = (int *)(v61 + 1);
          }
          uint64_t v61 = v40;
          if (v41 < 0) {
            int v38 = v42;
          }
          else {
            int v38 = 0;
          }
        }
      }
      *((_DWORD *)&v62 + v39++) = v37;
      if (v39 == 128)
      {
        for (uint64_t j = 0; j != 512; j += 4)
          SIValueSet<unsigned int>::_SIValueSetInnerInsert(v25, *(unsigned int *)((char *)&v62 + j), v26, a4);
        uint64_t v39 = 0;
      }
    }
  }
  unint64_t v46 = *(unsigned __int16 *)(v10 + 8);
  if (v46 > 0x3F) {
    goto LABEL_85;
  }
  uint64_t v58 = (uint64_t)&v58;
  unsigned int v59 = v20;
  unsigned __int16 v47 = 0;
  __int16 v48 = 0;
  uint64_t v49 = 0;
  long long v92 = 0uLL;
  long long v93 = 0uLL;
  unint64_t v60 = v10 + 10 + 2 * v46;
  uint64_t v61 = (void *)(v10 + 10);
  long long v90 = 0uLL;
  long long v91 = 0uLL;
  long long v88 = 0uLL;
  long long v89 = 0uLL;
  long long v86 = 0uLL;
  long long v87 = 0uLL;
  long long v84 = 0uLL;
  long long v85 = 0uLL;
  long long v82 = 0uLL;
  long long v83 = 0uLL;
  long long v80 = 0uLL;
  long long v81 = 0uLL;
  long long v78 = 0uLL;
  long long v79 = 0uLL;
  long long v76 = 0uLL;
  long long v77 = 0uLL;
  long long v74 = 0uLL;
  long long v75 = 0uLL;
  long long v72 = 0uLL;
  long long v73 = 0uLL;
  long long v70 = 0uLL;
  long long v71 = 0uLL;
  long long v68 = 0uLL;
  long long v69 = 0uLL;
  long long v66 = 0uLL;
  long long v67 = 0uLL;
  long long v64 = 0uLL;
  long long v65 = 0uLL;
  long long v62 = 0uLL;
  long long v63 = 0uLL;
  while (1)
  {
    if (v48)
    {
      --v48;
      ++v47;
      goto LABEL_74;
    }
    if ((unint64_t)v61 >= v60) {
      break;
    }
    __int16 v50 = (__int16 *)v61 + 1;
    unsigned __int16 v47 = *(_WORD *)v61;
    if ((unint64_t)v61 + 2 >= v60)
    {
      __int16 v48 = 0;
    }
    else
    {
      int v51 = *v50;
      if (v51 < 0) {
        __int16 v48 = v51 & 0x7FFF;
      }
      else {
        __int16 v48 = 0;
      }
      if (v51 < 0) {
        __int16 v50 = (__int16 *)v61 + 2;
      }
    }
    uint64_t v61 = v50;
LABEL_74:
    *((_DWORD *)&v62 + v49++) = v47;
    if (v49 == 128)
    {
      for (uint64_t k = 0; k != 512; k += 4)
        SIValueSet<unsigned int>::_SIValueSetInnerInsert(v25, *(unsigned int *)((char *)&v62 + k), v26, a4);
      uint64_t v49 = 0;
    }
  }
  uint64_t v20 = v59;
  if (v49)
  {
    unsigned int v55 = (unsigned int *)&v62;
    do
    {
      unsigned int v56 = *v55++;
      SIValueSet<unsigned int>::_SIValueSetInnerInsert(v25, v56, v26, a4);
      --v49;
    }
    while (v49);
  }
LABEL_85:
  (*(void (**)(unint64_t))(*(void *)v10 + 72))(v10);
  CFAllocatorDeallocate(*(CFAllocatorRef *)(a4 + 16), (void *)v10);
  *(void *)(v11 + 8 * v9) = v25 | 1;
  return v20;
}

uint64_t SIValueSet<unsigned int>::SIValueSetInsert(unsigned int *a1, uint64_t a2)
{
  int v4 = a1[1];
  if (v4)
  {
    int v5 = 4 * v4;
    unsigned int v6 = *a1;
    if ((*a1 ^ a2) >> (-4 * v4))
    {
      unsigned __int16 v7 = a1 + 8;
      do
      {
        int v17 = a1[1];
        a1[1] = v17 - 1;
        if (v17 <= 0)
        {
          char v23 = __si_assert_copy_extra_329();
          unsigned int v24 = v23;
          unint64_t v25 = "";
          if (v23) {
            unint64_t v25 = v23;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 1650, "s->sharedDepth>=0", v25);
          free(v24);
          if (__valid_fs(-1)) {
            uint64_t v26 = 2989;
          }
          else {
            uint64_t v26 = 3072;
          }
          *(_DWORD *)uint64_t v26 = -559038737;
          abort();
        }
        if (v17 == 1) {
          int v18 = 0;
        }
        else {
          int v18 = -1 << (-4 * (v17 - 1));
        }
        *a1 = v6 & v18;
        uint64_t v9 = *((void *)a1 + 2);
        if (v9 == 63 || (char v8 = (void *)*((void *)a1 + 1)) == 0)
        {
          char v8 = CFAllocatorAllocate(*((CFAllocatorRef *)a1 + 3), 8072, 0);
          void *v8 = *((void *)a1 + 1);
          bzero(v8 + 1, 0x1F80uLL);
          uint64_t v9 = 0;
          *((void *)a1 + 1) = v8;
        }
        *((void *)a1 + 2) = v9 + 1;
        long long v10 = *v7;
        long long v11 = *((_OWORD *)a1 + 3);
        long long v12 = *((_OWORD *)a1 + 4);
        int v13 = &v8[16 * v9];
        *(_OWORD *)(v13 + 7) = *((_OWORD *)a1 + 5);
        *(_OWORD *)(v13 + 5) = v12;
        *(_OWORD *)(v13 + 3) = v11;
        *(_OWORD *)(v13 + 1) = v10;
        long long v14 = *((_OWORD *)a1 + 6);
        long long v15 = *((_OWORD *)a1 + 7);
        long long v16 = *((_OWORD *)a1 + 8);
        *(_OWORD *)(v13 + 15) = *((_OWORD *)a1 + 9);
        *(_OWORD *)(v13 + 13) = v16;
        *(_OWORD *)(v13 + 11) = v15;
        *(_OWORD *)(v13 + 9) = v14;
        *((_OWORD *)a1 + 4) = 0u;
        *((_OWORD *)a1 + 5) = 0u;
        *((_OWORD *)a1 + 6) = 0u;
        *((_OWORD *)a1 + 7) = 0u;
        *((_OWORD *)a1 + 8) = 0u;
        *((_OWORD *)a1 + 9) = 0u;
        _OWORD *v7 = 0u;
        *((_OWORD *)a1 + 3) = 0u;
        *((void *)v7 + ((v6 >> ((32 - 4 * v17) & 0xFC)) & 0xF)) = (unint64_t)(v13 + 1) | 1;
        unsigned int v6 = *a1;
      }
      while (*a1 != (v18 & a2));
      int v4 = a1[1];
      int v5 = 4 * v4;
    }
    if ((v5 - 29) <= 0xFFFFFFDE)
    {
      uint64_t v19 = __si_assert_copy_extra_329();
      uint64_t v20 = v19;
      CFAllocatorRef v21 = "";
      if (v19) {
        CFAllocatorRef v21 = v19;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 1670, "((sizeof(ValueType) * 8) -4*(1+(s->sharedDepth))) <= sizeof(ValueType)*8", v21);
      free(v20);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
  }
  else if (*((unsigned char *)a1 + 160))
  {
    int v4 = 4;
    *a1 = a2 & 0xFFFF0000;
    a1[1] = 4;
  }
  else
  {
    int v4 = 0;
  }
  *((unsigned char *)a1 + 160) = 0;
  return SIValueSet<unsigned int>::_SIValueSetInnerInsert((unint64_t)(a1 + 8), a2, v4, (uint64_t)(a1 + 2));
}

uint64_t SIUINT32SetCreate()
{
  if (!__kSIUINT32SetTypeID) {
    __kSIUINT32SetCFTypeID TypeID = _CFRuntimeRegisterClass();
  }
  return _CFRuntimeCreateInstance();
}

uint64_t db_clone_query_node(void *a1)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = __db_query_tree_apply_block_block_invoke;
  v2[3] = &unk_1E6348598;
  v2[4] = &__block_literal_global_21_12478;
  return db_query_tree_apply_block_with_meta(a1, (uint64_t)v2, (uint64_t)&__block_literal_global_25);
}

unsigned char *copyQueryTerm(const char *a1, unsigned int a2)
{
  size_t v4 = strlen(a1);
  size_t v5 = v4;
  uint64_t v6 = 5;
  unsigned int v7 = a2 >> 28;
  uint64_t v8 = 1;
  if ((a2 & 0x3F80) != 0) {
    uint64_t v8 = 2;
  }
  if ((a2 & 0x1FC000) != 0) {
    uint64_t v8 = 3;
  }
  if ((a2 & 0xFE00000) != 0) {
    uint64_t v8 = 4;
  }
  if (!v7) {
    uint64_t v6 = v8;
  }
  uint64_t v9 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v4 + v6 + 3, 0x6085D6BuLL);
  if (!v9) {
    _log_fault_for_malloc_failure();
  }
  if ((int)a2 < 2)
  {
    memcpy(v9, a1, v5);
  }
  else
  {
    unsigned char *v9 = 1;
    if (v7)
    {
      v9[1] = a2 | 0x80;
      int v9[2] = (a2 >> 7) | 0x80;
      v9[3] = (a2 >> 14) | 0x80;
      v9[4] = (a2 >> 21) | 0x80;
      uint64_t v10 = 6;
      uint64_t v11 = 5;
    }
    else if ((a2 & 0xFE00000) != 0)
    {
      v9[1] = a2 | 0x80;
      int v9[2] = (a2 >> 7) | 0x80;
      v9[3] = (a2 >> 14) | 0x80;
      unsigned int v7 = (a2 & 0xFE00000) >> 21;
      uint64_t v10 = 5;
      uint64_t v11 = 4;
    }
    else if ((a2 & 0x1FC000) != 0)
    {
      v9[1] = a2 | 0x80;
      int v9[2] = (a2 >> 7) | 0x80;
      unsigned int v7 = (a2 & 0x1FC000) >> 14;
      uint64_t v10 = 4;
      uint64_t v11 = 3;
    }
    else if ((a2 & 0x3F80) != 0)
    {
      v9[1] = a2 | 0x80;
      unsigned int v7 = (unsigned __int16)(a2 & 0x3F80) >> 7;
      uint64_t v10 = 3;
      uint64_t v11 = 2;
    }
    else
    {
      uint64_t v10 = 2;
      uint64_t v11 = 1;
      LOBYTE(v7) = a2;
    }
    v9[v11] = v7;
    memcpy(&v9[v10], a1, v5);
    v5 += v10;
  }
  v9[v5] = 0;
  return v9;
}

BOOL SIResultQueueSetWakeupTrigger(uint64_t *a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  pthread_mutex_lock((pthread_mutex_t *)(*a1 + 8));
  uint64_t v6 = a1[6];
  uint64_t v7 = *a1;
  if (!v6)
  {
    uint64_t v8 = *((unsigned __int8 *)a1 + 12);
    if (*((unsigned char *)a1 + 12)) {
      goto LABEL_4;
    }
    int v10 = *(_DWORD *)(v7 + 120);
    if ((-v10 & *(_DWORD *)(v7 + 128)) != 0
      || (int v11 = v10 - 1, v12 = *(unsigned int *)(v7 + 124), (v12 & ~v11) != 0))
    {
      int v13 = __si_assert_copy_extra_329();
      __message_assert_333((uint64_t)v13, v14, v15, v16, v17, v18, v19, v20, (char)"SISimpleQueue.c");
      free(v13);
      if (__valid_fs(-1)) {
        uint64_t v21 = 2989;
      }
      else {
        uint64_t v21 = 3072;
      }
      *(_DWORD *)uint64_t v21 = -559038737;
      abort();
    }
    if (*(void *)(*(void *)(v7 + 136) + 8 * v12) && !*((_DWORD *)a1 + 21))
    {
LABEL_4:
      pthread_mutex_unlock((pthread_mutex_t *)(v7 + 8));
      a2(a3, v8);
      return v6 == 0;
    }
    a1[6] = (uint64_t)a2;
    a1[7] = a3;
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v7 + 8));
  return v6 == 0;
}

uint64_t SIQueryCreateWithItems(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11)
{
  long long v23 = 0u;
  memset(v24, 0, sizeof(v24));
  long long v22 = 0u;
  long long v20 = 0u;
  memset(v21, 0, sizeof(v21));
  long long v19 = 0u;
  v12[0] = 1;
  v12[1] = a1;
  v12[2] = 0;
  v12[3] = 0;
  v12[5] = 0;
  long long v13 = 0uLL;
  v12[4] = a2;
  long long v14 = 0uLL;
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  uint64_t v17 = a5;
  uint64_t v18 = a6;
  *((void *)&v19 + 1) = atomic_fetch_add(&gInternalQueryID, 1uLL);
  long long v20 = a7;
  *(void *)&v21[0] = a8;
  *(_OWORD *)((char *)v21 + 8) = a9;
  *((void *)&v21[1] + 1) = a10;
  *(void *)&v21[2] = a11;
  memset((char *)&v21[2] + 8, 0, 48);
  long long v22 = 0u;
  long long v23 = 0u;
  LOBYTE(v24[0]) = 0;
  memset((char *)v24 + 8, 0, 48);
  *(_OWORD *)((char *)&v24[3] + 2) = 0u;
  return SIQueryCreateWithParameters(v12);
}

uint64_t SIQueryCreateWithParameters(uint64_t *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (query_zone_init_onceToken == -1)
  {
    if (!a1) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&query_zone_init_onceToken, &__block_literal_global_4396);
    if (!a1) {
      return 0;
    }
  }
  if (*a1 == 1)
  {
    uint64_t v2 = malloc_type_calloc(1uLL, 0x300uLL, 0x10F00407059888BuLL);
    uint64_t v3 = (uint64_t)v2;
    if (v2)
    {
      if (initQuery((uint64_t)v2, (uint64_t)a1))
      {
        atomic_store(1u, (unsigned int *)(v3 + 584));
        return v3;
      }
      si_query_free(v3);
      return 0;
    }
  }
  else
  {
    int v4 = *__error();
    size_t v5 = _SILogForLogForCategory(1);
    os_log_type_t v6 = dword_1E9FC90A8 < 3;
    if (os_log_type_enabled(v5, (os_log_type_t)(dword_1E9FC90A8 < 3)))
    {
      uint64_t v7 = *a1;
      v9[0] = 67109120;
      v9[1] = v7;
      _os_log_impl(&dword_1BD672000, v5, v6, "*warn* Invalid query parameter version %d", (uint8_t *)v9, 8u);
    }
    uint64_t v3 = 0;
    *__error() = v4;
  }
  return v3;
}

uint64_t initQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v183 = *MEMORY[0x1E4F143B8];
  long long v178 = 0u;
  long long v179 = 0u;
  pushSkipCrashState();
  uint64_t v4 = *(void *)(a2 + 320);
  if (v4) {
    CFRetain(*(CFTypeRef *)(a2 + 320));
  }
  *(void *)(a1 + 656) = v4;
  *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 112);
  uint64_t v172 = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 208) = (v172 & 0x40) != 0;
  double v5 = *(double *)(a2 + 184);
  if (v5 < 0.0 || v5 > 0.0) {
    *(double *)(a1 + 360) = v5;
  }
  else {
    *(CFAbsoluteTime *)(a2 + 184) = CFAbsoluteTimeGetCurrent();
  }
  *(CFAbsoluteTime *)(a1 + 368) = CFAbsoluteTimeGetCurrent();
  *(void *)(a1 + 384) = 0;
  CFStringRef v6 = *(const __CFString **)(a2 + 8);
  uint64_t v7 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  if (v6) {
    CFStringRef Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6);
  }
  else {
    CFStringRef Copy = 0;
  }
  *(void *)(a1 + 8) = Copy;
  uint64_t v9 = *(void *)(a2 + 176);
  if (v9) {
    CFRetain(*(CFTypeRef *)(a2 + 176));
  }
  *(void *)(a1 + 240) = v9;
  uint64_t v10 = *(void *)(a2 + 104);
  if (v10) {
    CFRetain(*(CFTypeRef *)(a2 + 104));
  }
  *(void *)a1 = v10;
  uint64_t v11 = *(void *)(a2 + 192);
  if (v11) {
    CFRetain(*(CFTypeRef *)(a2 + 192));
  }
  *(void *)(a1 + 32) = v11;
  uint64_t v12 = *(void *)(a2 + 32);
  if (v12) {
    uint64_t MutableCopy = RLEOIDArrayCreateMutableCopy(*v7, (uint64_t)v6, v12);
  }
  else {
    uint64_t MutableCopy = 0;
  }
  *(void *)(a1 + 576) = MutableCopy;
  if (*(void *)a1)
  {
    CFDictionaryRef v14 = *(const __CFDictionary **)(*(void *)a1 + 168);
    int v177 = 0;
    if (v14)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v14, @"_showAllExtensions");
      if (Value)
      {
        CFNumberRef v16 = Value;
        CFTypeID v17 = CFGetTypeID(Value);
        if (v17 == CFNumberGetTypeID()) {
          CFNumberGetValue(v16, kCFNumberIntType, &v177);
        }
      }
    }
    if (*(void *)a1) {
      int v18 = *(_DWORD *)(*(void *)a1 + 176);
    }
    else {
      int v18 = 0;
    }
  }
  else
  {
    int v18 = 0;
    int v177 = 0;
  }
  if (*(void *)(a2 + 96))
  {
    CFSetRef Mutable = CFArrayCreateMutable(*v7, 0, MEMORY[0x1E4F1D510]);
    for (CFIndex i = 0; CFArrayGetCount(*(CFArrayRef *)(a2 + 96)) > i; ++i)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 96), i);
      CFStringRef v22 = ValueAtIndex;
      if (v177 && CFEqual(ValueAtIndex, @"kMDItemDisplayName")) {
        CFStringRef v22 = @"_kMDItemDisplayNameWithExtensionsSynth";
      }
      bzero(v180, 0x400uLL);
      CFStringGetCString(v22, (char *)v180, 1024, 0x8000100u);
      if (isEntitledForAttribute(v18, v180)) {
        long long v23 = (__CFString *)v22;
      }
      else {
        long long v23 = @"__DENIED__";
      }
      CFArrayAppendValue(Mutable, v23);
    }
    *(void *)(a1 + 16) = Mutable;
    uint64_t v7 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  }
  uint64_t v24 = *(void *)(a2 + 224);
  if (v24) {
    CFRetain(*(CFTypeRef *)(a2 + 224));
  }
  *(void *)(a1 + 24) = v24;
  uint64_t v25 = *(void *)(a2 + 64);
  if (v25) {
    CFRetain(*(CFTypeRef *)(a2 + 64));
  }
  *(void *)(a1 + 40) = v25;
  uint64_t v26 = *(void *)(a2 + 328);
  if (v26) {
    CFRetain(*(CFTypeRef *)(a2 + 328));
  }
  *(void *)(a1 + 744) = v26;
  if (query_needsWhatFieldsMatched_once != -1) {
    dispatch_once(&query_needsWhatFieldsMatched_once, &__block_literal_global_465_8314);
  }
  CFArrayRef v27 = *(const __CFArray **)(a1 + 16);
  if (v27 && (CFIndex Count = CFArrayGetCount(v27), Count >= 1))
  {
    CFIndex v29 = Count;
    CFIndex v30 = 0;
    BOOL v31 = 1;
    do
    {
      char v32 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v30);
      if (CFSetContainsValue((CFSetRef)query_needsWhatFieldsMatched_dict, v32)) {
        break;
      }
      BOOL v31 = ++v30 < v29;
    }
    while (v29 != v30);
  }
  else
  {
    BOOL v31 = 0;
  }
  *(unsigned char *)(a1 + 60) = v31;
  CFArrayRef v33 = *(const __CFArray **)(a2 + 80);
  if (v33) {
    CFArrayRef v34 = CFArrayCreateCopy(*v7, v33);
  }
  else {
    CFArrayRef v34 = 0;
  }
  *(void *)(a1 + 176) = v34;
  CFArrayRef v35 = *(const __CFArray **)(a2 + 88);
  if (v35) {
    CFArrayRef v36 = CFArrayCreateCopy(*v7, v35);
  }
  else {
    CFArrayRef v36 = 0;
  }
  *(void *)(a1 + 184) = v36;
  int v37 = &unk_1E9FC9000;
  if (dword_1E9FC90A8 >= 5)
  {
    int v156 = *__error();
    char v157 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v157, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v158 = *(void *)(a1 + 8);
      uint64_t v159 = *(void *)(a2 + 96);
      uint64_t v160 = *(void **)(a2 + 80);
      LODWORD(v180[0]) = 138412802;
      *(void *)((char *)v180 + 4) = v158;
      WORD2(v180[1]) = 2112;
      *(void *)((char *)&v180[1] + 6) = v159;
      HIWORD(v180[2]) = 2112;
      int v181 = v160;
      _os_log_impl(&dword_1BD672000, v157, OS_LOG_TYPE_DEFAULT, "initWithQuery %@ for fields:%@ and scopes:%@", (uint8_t *)v180, 0x20u);
    }
    *__error() = v156;
  }
  uint64_t v38 = v172 & 0x40;
  CFArrayRef v39 = *(const __CFArray **)(a2 + 80);
  uint64_t v40 = *(void *)(a2 + 88);
  if (v39)
  {
    if (v40)
    {
      CFAllocatorRef v41 = *v7;
      CFIndex v42 = CFArrayGetCount(v39);
      CFIndex v43 = CFArrayGetCount(*(CFArrayRef *)(a2 + 88));
      int v44 = CFArrayCreateMutableCopy(v41, v43 + v42, *(CFArrayRef *)(a1 + 176));
      *(void *)(a1 + 192) = v44;
      CFArrayRef v45 = *(const __CFArray **)(a2 + 88);
      v185.length = CFArrayGetCount(v45);
      v185.location = 0;
      CFArrayAppendArray(v44, v45, v185);
      goto LABEL_69;
    }
    unint64_t v46 = *(const void **)(a1 + 176);
    goto LABEL_67;
  }
  if (v40)
  {
    unint64_t v46 = *(const void **)(a1 + 184);
LABEL_67:
    *(void *)(a1 + 192) = CFRetain(v46);
    goto LABEL_69;
  }
  *(void *)(a1 + 192) = 0;
LABEL_69:
  char v176 = 0;
  CFStringRef v47 = queryFromCFString(*(void *)(a1 + 8));
  *(void *)(a1 + 64) = v47;
  if (!v47)
  {
    int v49 = *__error();
    __int16 v50 = _SILogForLogForCategory(1);
    os_log_type_t v51 = dword_1E9FC90A8 < 3;
    if (!os_log_type_enabled(v50, (os_log_type_t)(dword_1E9FC90A8 < 3))) {
      goto LABEL_159;
    }
    uint64_t v52 = *(void *)(a1 + 8);
    LODWORD(v180[0]) = 138412290;
    *(void *)((char *)v180 + 4) = v52;
    unsigned int v53 = "*warn* queryFromCFString failed for %@";
    unsigned int v54 = v50;
    goto LABEL_157;
  }
  if (v176 == 35)
  {
    if ((v172 & 0x800) != 0) {
      int v48 = 6;
    }
    else {
      int v48 = 5;
    }
    goto LABEL_78;
  }
  if (v176 != 64)
  {
    unint64_t v105 = *(const void **)(a2 + 40);
    if (v105)
    {
      CFTypeID v106 = CFGetTypeID(v105);
      if (v106 != CFStringGetTypeID())
      {
        uint64_t v163 = __si_assert_copy_extra_625(-1);
        int v164 = v163;
        char v165 = "";
        if (v163) {
          char v165 = v163;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIQueryC.c", 4694, "CFGetTypeID(parameters->completionQuery) == CFStringGetTypeID()", v165);
        free(v164);
        if (__valid_fs(-1)) {
          uint64_t v166 = 2989;
        }
        else {
          uint64_t v166 = 3072;
        }
        *(_DWORD *)uint64_t v166 = -559038737;
        abort();
      }
      *(_DWORD *)(a1 + 152) = 3;
      *(void *)(a1 + 48) = CFRetain(*(CFTypeRef *)(a2 + 40));
      *(void *)(a1 + 168) = *(void *)(a2 + 48);
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
      uint64_t v107 = *(void *)(a2 + 72);
      if (v107) {
        SISetCompletionRankingWeights(v107);
      }
      uint64_t v55 = *(void *)(a2 + 144);
      if (v55 && v55 != 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_79;
      }
    }
    else
    {
      uint64_t v55 = *(void *)(a2 + 144);
      if (v55 && v55 != 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v137 = *(void *)(a2 + 136);
        if (!v137 || v137 >= v55)
        {
          if ((v172 & 0x800) != 0) {
            int v140 = 1;
          }
          else {
            int v140 = 2;
          }
          *(_DWORD *)(a1 + 152) = v140;
          goto LABEL_79;
        }
        *(_DWORD *)(a1 + 152) = 0;
        *(void *)(a1 + 160) = v137;
LABEL_178:
        *(void *)(a1 + 216) = v55;
        goto LABEL_80;
      }
      *(_DWORD *)(a1 + 152) = 0;
    }
    uint64_t v126 = *(void *)(a2 + 136);
    if (!v126) {
      goto LABEL_80;
    }
    *(void *)(a1 + 160) = v126;
    uint64_t v55 = -1;
    goto LABEL_178;
  }
  int v48 = 4;
LABEL_78:
  *(_DWORD *)(a1 + 152) = v48;
  uint64_t v55 = *(void *)(a2 + 144);
LABEL_79:
  *(void *)(a1 + 160) = v55;
LABEL_80:
  CFArrayRef v56 = *(const __CFArray **)(a2 + 152);
  if (v56)
  {
    int64_t v57 = CFArrayGetCount(v56);
    *(void *)(a1 + 248) = malloc_type_calloc(v57, 8uLL, 0x2004093837F09uLL);
    if (v57 >= 1)
    {
      CFIndex v58 = 0;
      while (1)
      {
        LOBYTE(v174) = 0;
        unsigned int v59 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 152), v58);
        CFStringRef v60 = queryFromCFString((uint64_t)v59);
        if (!v60) {
          break;
        }
        uint64_t v61 = *(void *)(a1 + 248);
        uint64_t v62 = *(void *)(a1 + 256);
        *(void *)(a1 + 256) = v62 + 1;
        *(void *)(v61 + 8 * v62) = v60;
        if (v57 == ++v58) {
          goto LABEL_85;
        }
      }
      int v49 = *__error();
      unint64_t v112 = _SILogForLogForCategory(1);
      BOOL v113 = dword_1E9FC90A8 < 3;
      if (os_log_type_enabled(v112, (os_log_type_t)(dword_1E9FC90A8 < 3)))
      {
        LODWORD(v180[0]) = 138412290;
        *(void *)((char *)v180 + 4) = v59;
        unsigned int v53 = "*warn* grouping queryFromCFString failed for %@";
        unsigned int v54 = v112;
        os_log_type_t v114 = v113;
LABEL_158:
        _os_log_impl(&dword_1BD672000, v54, v114, v53, (uint8_t *)v180, 0xCu);
      }
LABEL_159:
      *__error() = v49;
      goto LABEL_184;
    }
  }
LABEL_85:
  CFArrayRef v63 = *(const __CFArray **)(a2 + 160);
  if (v63)
  {
    int64_t v64 = CFArrayGetCount(v63);
    *(void *)(a1 + 264) = malloc_type_calloc(v64, 0x18uLL, 0x1080040468F112EuLL);
    int64_t v171 = v64;
    if (v64 >= 1)
    {
      CFIndex v66 = 0;
      v167[1] = &v180[2];
      *(void *)&long long v65 = 138412290;
      long long v168 = v65;
      uint64_t v173 = v38;
      do
      {
        char v175 = 0;
        CFDictionaryRef v67 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 160), v66);
        CFTypeID TypeID = CFStringGetTypeID();
        if (TypeID == CFGetTypeID(v67))
        {
          long long v69 = (__CFString *)queryFromCFString((uint64_t)v67);
          long long v70 = v69;
          if (v69 && v175 == 36)
          {
            LOWORD(v69[1].length) |= 1u;
          }
          else
          {
            if (v69) {
              BOOL v85 = v175 == 0;
            }
            else {
              BOOL v85 = 0;
            }
            if (!v85)
            {
              if (v69)
              {
                v180[0] = MEMORY[0x1E4F143A8];
                v180[1] = 0x40000000;
                v180[2] = __db_query_tree_apply_block_block_invoke;
                int v181 = &unk_1E6348598;
                int v182 = &__block_literal_global_161;
                db_query_tree_apply_block_with_meta(v69, (uint64_t)v180, 0);
              }
              int v86 = *__error();
              long long v87 = _SILogForLogForCategory(1);
              os_log_type_t v88 = v37[42] < 3;
              if (os_log_type_enabled(v87, v88))
              {
                LODWORD(v180[0]) = v168;
                *(void *)((char *)v180 + 4) = v67;
                _os_log_impl(&dword_1BD672000, v87, v88, "*warn* Error creating ranking query for %@", (uint8_t *)v180, 0xCu);
              }
              *__error() = v86;
              long long v70 = (__CFString *)queryFromCFString(@"false");
              if (!v70) {
                goto LABEL_184;
              }
            }
          }
          decorateExpandingFunctions(v70, *(void *)a1, *(const void **)(a1 + 656), *(double *)(a1 + 360));
          *(int64x2_t *)(*(void *)(a1 + 264) + 24 * *(void *)(a1 + 288) + 8) = vdupq_n_s64(1uLL);
          long long v89 = malloc_type_malloc(0x18uLL, 0x1080040468F112EuLL);
          uint64_t v90 = *(void *)(a1 + 288);
          *(void *)(*(void *)(a1 + 264) + 24 * v90) = v89;
          *long long v89 = v70;
          *(void *)(a1 + 288) = v90 + 1;
        }
        else
        {
          CFTypeID v71 = CFDictionaryGetTypeID();
          if (v71 == CFGetTypeID(v67))
          {
            CFArrayRef v72 = (const __CFArray *)CFDictionaryGetValue(v67, @"kCIMatchArray");
            CFNumberRef v73 = (const __CFNumber *)CFDictionaryGetValue(v67, @"kCIBitCount");
            uint64_t v174 = 0;
            CFNumberGetValue(v73, kCFNumberLongType, &v174);
            CFIndex v74 = CFArrayGetCount(v72);
            uint64_t v75 = v74;
            if (v74 > 64 || v174 >= 7)
            {
              int v109 = *__error();
              int v138 = _SILogForLogForCategory(1);
              os_log_type_t v139 = v37[42] < 3;
              if (!os_log_type_enabled(v138, v139)) {
                goto LABEL_183;
              }
              LODWORD(v180[0]) = 134218240;
              *(void *)((char *)v180 + 4) = v75;
              WORD2(v180[1]) = 2048;
              *(void *)((char *)&v180[1] + 6) = v174;
              uint64_t v125 = "*warn* rulecount %ld bitCount: %ld error";
              char v127 = v138;
              os_log_type_t v128 = v139;
              uint32_t v129 = 22;
LABEL_182:
              _os_log_impl(&dword_1BD672000, v127, v128, v125, (uint8_t *)v180, v129);
LABEL_183:
              *__error() = v109;
LABEL_184:
              if ((int)v37[42] >= 5)
              {
                int v161 = *__error();
                uint64_t v162 = _SILogForLogForCategory(1);
                if (os_log_type_enabled(v162, OS_LOG_TYPE_DEFAULT))
                {
                  LOWORD(v180[0]) = 0;
                  _os_log_impl(&dword_1BD672000, v162, OS_LOG_TYPE_DEFAULT, "Failed creating query", (uint8_t *)v180, 2u);
                }
                uint64_t v130 = 0;
                *__error() = v161;
              }
              else
              {
                uint64_t v130 = 0;
              }
              goto LABEL_186;
            }
            uint64_t v170 = v167;
            MEMORY[0x1F4188790](v74);
            long long v77 = (char *)v167 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
            size_t v169 = v76;
            bzero(v77, v76);
            if (v75 >= 1)
            {
              CFIndex v78 = 0;
              while (1)
              {
                long long v79 = CFArrayGetValueAtIndex(v72, v78);
                long long v80 = (__CFString *)queryFromCFString((uint64_t)v79);
                long long v81 = v80;
                if (!v80 || v175 != 0) {
                  break;
                }
                *(void *)&v77[8 * v78] = v80;
                decorateExpandingFunctions(v80, *(void *)a1, *(const void **)(a1 + 656), *(double *)(a1 + 360));
                if (v75 == ++v78) {
                  goto LABEL_103;
                }
              }
              if (v78)
              {
                for (uint64_t j = 0; j != v78; ++j)
                  db_free_query_node(*(void **)&v77[8 * j]);
              }
              if (v81)
              {
                v180[0] = MEMORY[0x1E4F143A8];
                v180[1] = 0x40000000;
                v180[2] = __db_query_tree_apply_block_block_invoke;
                int v181 = &unk_1E6348598;
                int v182 = &__block_literal_global_161;
                db_query_tree_apply_block_with_meta(v81, (uint64_t)v180, 0);
              }
              int v109 = *__error();
              char v110 = _SILogForLogForCategory(1);
              int v37 = &unk_1E9FC9000;
              os_log_type_t v111 = dword_1E9FC90A8 < 3;
              if (os_log_type_enabled(v110, (os_log_type_t)(dword_1E9FC90A8 < 3)))
              {
                LODWORD(v180[0]) = v168;
                *(void *)((char *)v180 + 4) = v79;
                _os_log_impl(&dword_1BD672000, v110, v111, "*warn* lifting queryFromCFString failed for %@", (uint8_t *)v180, 0xCu);
              }
              goto LABEL_183;
            }
LABEL_103:
            uint64_t v83 = *(void *)(a1 + 264) + 24 * *(void *)(a1 + 288);
            *(void *)(v83 + 8) = v75;
            *(void *)(v83 + 16) = v174;
            long long v84 = malloc_type_malloc(24 * v75, 0x1080040468F112EuLL);
            *(void *)(*(void *)(a1 + 264) + 24 * *(void *)(a1 + 288)) = v84;
            memcpy(v84, v77, v169);
            ++*(void *)(a1 + 288);
            int v37 = (_DWORD *)&unk_1E9FC9000;
            uint64_t v7 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
          }
        }
        ++v66;
      }
      while (v66 != v171);
    }
    if (!*(void *)(a1 + 96) && !*(unsigned char *)(a1 + 672) && !*(void *)(a1 + 680) && *(void *)(a1 + 288) == 1)
    {
      uint64_t v91 = *(void *)(a1 + 264);
      if (*(void *)(v91 + 8) == 1)
      {
        if (db_node_has_ranking_weights(**(void ***)v91))
        {
          *(void *)(a1 + 272) = db_clone_query_node(***(void ****)(a1 + 264));
          clear_lifting_rules(a1);
        }
      }
    }
  }
  uint64_t v92 = *(void *)(a2 + 168);
  if (v92)
  {
    LOBYTE(v174) = 0;
    long long v93 = (__CFString *)queryFromCFString(v92);
    if (v93 && !(_BYTE)v174)
    {
      *(void *)(a1 + 280) = v93;
      goto LABEL_126;
    }
    if (v93)
    {
      v180[0] = MEMORY[0x1E4F143A8];
      v180[1] = 0x40000000;
      v180[2] = __db_query_tree_apply_block_block_invoke;
      int v181 = &unk_1E6348598;
      int v182 = &__block_literal_global_161;
      db_query_tree_apply_block_with_meta(v93, (uint64_t)v180, 0);
    }
    int v49 = *__error();
    uint64_t v115 = _SILogForLogForCategory(1);
    os_log_type_t v51 = v37[42] < 3;
    if (!os_log_type_enabled(v115, v51)) {
      goto LABEL_159;
    }
    uint64_t v116 = *(void *)(a2 + 168);
    LODWORD(v180[0]) = 138412290;
    *(void *)((char *)v180 + 4) = v116;
    unsigned int v53 = "*warn* dboFilter queryFromCFString failed for %@";
    unsigned int v54 = v115;
LABEL_157:
    os_log_type_t v114 = v51;
    goto LABEL_158;
  }
LABEL_126:
  *(void *)(a1 + 200) = v172;
  if (*(_DWORD *)(a1 + 152) == 4)
  {
    CFArrayRef v94 = *(const __CFArray **)(a2 + 96);
    if (!v94 || !CFArrayGetCount(v94))
    {
      int v109 = *__error();
      uint64_t v123 = _SILogForLogForCategory(1);
      os_log_type_t v124 = v37[42] < 3;
      if (!os_log_type_enabled(v123, v124)) {
        goto LABEL_183;
      }
      LOWORD(v180[0]) = 0;
      uint64_t v125 = "*warn* no fields for CoalescingCollectingQuery";
LABEL_181:
      char v127 = v123;
      os_log_type_t v128 = v124;
      uint32_t v129 = 2;
      goto LABEL_182;
    }
  }
  uint64_t v95 = *(void **)(a1 + 64);
  v180[0] = MEMORY[0x1E4F143A8];
  v180[1] = 0x40000000;
  v180[2] = __db_query_tree_apply_block_block_invoke;
  int v181 = &unk_1E6348598;
  int v182 = &__block_literal_global_21_12478;
  *(void *)(a1 + 72) = db_query_tree_apply_block_with_meta(v95, (uint64_t)v180, (uint64_t)&__block_literal_global_25);
  CFNumberRef v96 = (uint64_t *)(a1 + 72);
  if (*(_DWORD *)(a1 + 152) == 4)
  {
    CFArrayRef v97 = *(const __CFArray **)(a1 + 16);
    if (v97)
    {
      CFIndex v98 = CFArrayGetCount(v97);
      if (v98)
      {
        uint64_t v99 = v98;
        CFStringRef v100 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), 0);
        uint64_t NodeForAttribute = (uint64_t)makeNodeForAttribute(v100);
        if (v99 >= 2)
        {
          for (CFIndex k = 1; k != v99; ++k)
          {
            CFStringRef v103 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), k);
            UChar32 v104 = makeNodeForAttribute(v103);
            uint64_t NodeForAttribute = makeORNode(NodeForAttribute, (uint64_t)v104, 1);
          }
        }
        *CFNumberRef v96 = makeAndNode(*v96, NodeForAttribute, 1, 1);
      }
    }
  }
  else if ((v172 & 0x800) != 0)
  {
    if (initQuery_once != -1) {
      dispatch_once(&initQuery_once, &__block_literal_global_453);
    }
    uint64_t v117 = (void *)*v96;
    v180[0] = MEMORY[0x1E4F143A8];
    v180[1] = 0x40000000;
    v180[2] = __db_query_tree_apply_block_block_invoke;
    int v181 = &unk_1E6348598;
    int v182 = &__block_literal_global_456;
    if (db_query_tree_apply_block_with_meta(v117, (uint64_t)v180, (uint64_t)&__block_literal_global_462))
    {
      v172 &= ~0x800uLL;
      int v118 = *__error();
      char v119 = _SILogForLogForCategory(1);
      os_log_type_t v120 = 2 * (v37[42] < 4);
      if (os_log_type_enabled(v119, v120))
      {
        LOWORD(v180[0]) = 0;
        _os_log_impl(&dword_1BD672000, v119, v120, "Query is limited to one group; turn off server side grouping",
          (uint8_t *)v180,
          2u);
      }
      *__error() = v118;
      *(void *)(a1 + 200) = v172;
    }
  }
  decorateExpandingFunctions(*(void **)(a1 + 72), *(void *)a1, *(const void **)(a1 + 656), *(double *)(a1 + 360));
  db_optimize_query_tree((void **)(a1 + 72));
  uint64_t v121 = *(void *)(a1 + 72);
  if (!v121 || (uint64_t v122 = *(void *)(v121 + 16)) != 0 && *(_DWORD *)(v122 + 24) == 9 || *(_WORD *)(v121 + 48) == 16)
  {
    int v109 = *__error();
    uint64_t v123 = _SILogForLogForCategory(1);
    os_log_type_t v124 = v37[42] < 3;
    if (!os_log_type_enabled(v123, v124)) {
      goto LABEL_183;
    }
    LOWORD(v180[0]) = 0;
    uint64_t v125 = "*warn* no or false _completeQuery";
    goto LABEL_181;
  }
  *(void *)(a1 + 300) = 0xBB83F000000;
  *(void *)(a1 + 308) = 0xBB83F800000;
  *(void *)(a1 + 316) = 0xBB83F800000;
  long long v132 = v179;
  *(_OWORD *)(a1 + 324) = v178;
  *(_OWORD *)(a1 + 340) = v132;
  *(unsigned char *)(a1 + 357) = (v172 & 0x20000000) != 0;
  CFArrayRef v133 = *(const __CFArray **)(a1 + 16);
  if (v133)
  {
    v184.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
    v184.location = 0;
    if (CFArrayContainsValue(v133, v184, @"_kMDItemSDBInfo"))
    {
      *(_DWORD *)(a1 + 312) = 100;
      *(_DWORD *)(a1 + 320) = 100;
      *(_DWORD *)(a1 + 304) = 100;
    }
  }
  *(void *)(a1 + 680) = 0;
  if (*(unsigned char *)(a2 + 272))
  {
    unint64_t v134 = (__CFString *)queryFromCFString(*(void *)(a1 + 8));
    *(void *)(a1 + 96) = v134;
    if (v134)
    {
      decorateExpandingFunctions(v134, *(void *)a1, *(const void **)(a1 + 656), *(double *)(a1 + 360));
      db_optimize_query_tree((void **)(a1 + 96));
      *(unsigned char *)(a1 + 672) = 1;
      CFArrayRef v135 = *(const __CFArray **)(a2 + 288);
      if (v135) {
        CFArrayRef v136 = CFArrayCreateCopy(*v7, v135);
      }
      else {
        CFArrayRef v136 = 0;
      }
      *(void *)(a1 + 696) = v136;
      CFDictionaryRef v141 = *(const __CFDictionary **)(a2 + 296);
      if (v141) {
        CFDictionaryRef v142 = CFDictionaryCreateCopy(*v7, v141);
      }
      else {
        CFDictionaryRef v142 = 0;
      }
      *(void *)(a1 + 704) = v142;
      CFDictionaryRef v143 = *(const __CFDictionary **)(a2 + 304);
      if (v143) {
        CFDictionaryRef v144 = CFDictionaryCreateCopy(*v7, v143);
      }
      else {
        CFDictionaryRef v144 = 0;
      }
      *(void *)(a1 + 712) = v144;
      CFAttributedStringRef v145 = *(const __CFAttributedString **)(a2 + 312);
      if (v145) {
        CFAttributedStringRef v146 = CFAttributedStringCreateCopy(*v7, v145);
      }
      else {
        CFAttributedStringRef v146 = 0;
      }
      *(void *)(a1 + 736) = v146;
      *(unsigned char *)(a1 + 752) = *(unsigned char *)(a2 + 336);
    }
    CFArrayRef v147 = *(const __CFArray **)(a2 + 280);
    if (v147) {
      *(void *)(a1 + 680) = CFArrayCreateCopy(*v7, v147);
    }
  }
  *(unsigned char *)(a1 + 753) = *(unsigned char *)(a2 + 337);
  CFArrayRef v148 = *(const __CFArray **)(a2 + 200);
  if (v148)
  {
    CFIndex v149 = CFArrayGetCount(v148);
    if (v149 >= 1)
    {
      CFIndex v150 = v149;
      CFIndex v151 = 0;
      do
      {
        uint64_t v152 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 200), v151);
        if (!SIQueryAddResultFilter(a1, v152)) {
          goto LABEL_184;
        }
      }
      while (v150 != ++v151);
    }
  }
  uint64_t v153 = *(void *)(a2 + 16);
  if (v153) {
    SIQueryAddResultGenerator(a1, v153);
  }
  uint64_t v154 = *(void *)(a2 + 24);
  if (v154) {
    SIQueryAddResultGenerator(a1, v154);
  }
  *(_DWORD *)(a1 + 324) = *(__int16 *)(a2 + 208);
  *(int32x4_t *)(a1 + 332) = vmovl_s16(*(int16x4_t *)(a2 + 212));
  *(_DWORD *)(a1 + 348) = *(__int16 *)(a2 + 220);
  *(_DWORD *)(a1 + 352) = *(__int16 *)(a2 + 222);
  *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 240);
  uint64_t v155 = *(void *)(a2 + 256);
  *(void *)(a1 + 648) = *(void *)(a2 + 264);
  *(void *)(a1 + 640) = v155;
  uint64_t v130 = 1;
LABEL_186:
  popSkipCrashState();
  return v130;
}

uint64_t isEntitledForAttribute(int a1, void *key)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (isEntitledForAttribute_onceToken != -1) {
    dispatch_once(&isEntitledForAttribute_onceToken, &__block_literal_global_555);
  }
  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)isEntitledForAttribute_attributeEntitlementMapping, key);
  BOOL v5 = (Value & a1) != 0 || Value == 0;
  uint64_t v6 = v5;
  if (!v5 && ++isEntitledForAttribute__COUNT_ == 997)
  {
    isEntitledForAttribute__COUNT_ = 0;
    int v7 = *__error();
    uint64_t v8 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315138;
      uint64_t v11 = key;
      _os_log_impl(&dword_1BD672000, v8, OS_LOG_TYPE_DEFAULT, "##### entitlements failure request for %s", (uint8_t *)&v10, 0xCu);
    }
    *__error() = v7;
  }
  return v6;
}

uint64_t db_optimize_query_tree(void **a1)
{
  uint64_t v2 = *a1;
  uint64_t v8 = MEMORY[0x1E4F143A8];
  uint64_t v9 = 0x40000000;
  int v10 = __db_query_tree_apply_block_block_invoke;
  uint64_t v11 = &unk_1E6348598;
  uint64_t v12 = &__block_literal_global_33_12559;
  uint64_t result = db_query_tree_apply_block_with_meta(v2, (uint64_t)&v8, (uint64_t)&__block_literal_global_36_12560);
  uint64_t v4 = (void *)result;
  if (result)
  {
    int v5 = *(unsigned __int16 *)(result + 48);
    if (v5 == 32 || v5 == 16)
    {
      int v7 = *(void **)result;
      if (*v4)
      {
        uint64_t v8 = MEMORY[0x1E4F143A8];
        uint64_t v9 = 0x40000000;
        int v10 = __db_query_tree_apply_block_block_invoke;
        uint64_t v11 = &unk_1E6348598;
        uint64_t v12 = &__block_literal_global_161;
        db_query_tree_apply_block_with_meta(v7, (uint64_t)&v8, 0);
        *uint64_t v4 = 0;
      }
      uint64_t result = v4[1];
      if (result)
      {
        uint64_t v8 = MEMORY[0x1E4F143A8];
        uint64_t v9 = 0x40000000;
        int v10 = __db_query_tree_apply_block_block_invoke;
        uint64_t v11 = &unk_1E6348598;
        uint64_t v12 = &__block_literal_global_161;
        uint64_t result = db_query_tree_apply_block_with_meta((void *)result, (uint64_t)&v8, 0);
        v4[1] = 0;
      }
    }
  }
  *a1 = v4;
  return result;
}

uint64_t SIFetchCSClientState(uint64_t a1, void *a2, const void *a3, int a4, void (**a5)(void, void, void))
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  values = a2;
  int v10 = (pthread_rwlock_t *)(a1 + 80);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 80));
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), @"clientStates");
  if (Value)
  {
    CFDictionaryRef v12 = (const __CFDictionary *)CFDictionaryGetValue(Value, a2);
    if (v12)
    {
      CFArrayRef v13 = (const __CFArray *)CFDictionaryGetValue(v12, a3);
      if (v13)
      {
        CFArrayRef v14 = v13;
        CFRetain(v13);
        pthread_rwlock_unlock(v10);
        int v15 = *__error();
        CFNumberRef v16 = _SILogForLogForCategory(10);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412802;
          CFArrayRef v27 = a2;
          __int16 v28 = 2112;
          CFIndex v29 = a3;
          __int16 v30 = 2112;
          CFArrayRef v31 = v14;
          _os_log_impl(&dword_1BD672000, v16, OS_LOG_TYPE_DEFAULT, "Found cached client state %@ %@ %@", buf, 0x20u);
        }
        *__error() = v15;
        ((void (**)(void, const __CFArray *, void))a5)[2](a5, v14, 0);
        CFArrayRef v17 = v14;
LABEL_18:
        CFRelease(v17);
        return 0;
      }
    }
  }
  pthread_rwlock_unlock(v10);
  if (!a4)
  {
    int v18 = malloc_type_calloc(1uLL, 0x20uLL, 0xE0040B6E8BBF2uLL);
    v18[2] = CFRetain(a2);
    void v18[3] = CFRetain(a3);
    long long v19 = _Block_copy(a5);
    *int v18 = a1;
    v18[1] = v19;
    CFArrayRef v20 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 1, MEMORY[0x1E4F1D510]);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 1312));
    uint64_t v21 = *(void *)(a1 + 1144);
    if (v21 && si_peek_queue_for_tags(v21, (uint64_t)v20))
    {
      si_enqueue_work(*(void *)(a1 + 1144), (uint64_t)si_fetchClientState, (uint64_t)v18);
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1312));
    }
    else
    {
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1312));
      uint64_t v22 = *(void *)(a1 + 1048);
      if (v22 && si_peek_queue_for_tags(v22, (uint64_t)v20)) {
        uint64_t v23 = *(void *)(a1 + 1048);
      }
      else {
        uint64_t v23 = *(void *)(a1 + 1080);
      }
      si_enqueue_work(v23, (uint64_t)si_fetchClientState, (uint64_t)v18);
    }
    CFArrayRef v17 = v20;
    goto LABEL_18;
  }
  a5[2](a5, 0, 1);
  return 0;
}

void si_enqueue_work(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 32)) {
    si_enqueue_work_with_qos(a1, *(unsigned __int8 *)(a1 + 24), a2, a3);
  }
  else {
    si_enqueue_work_for_job(a1, a2, a3, 0);
  }
}

void SIResultBatchFree(void **a1)
{
  if (a1)
  {
    switch(*(_DWORD *)a1)
    {
      case 0:
        free(a1[4]);
        break;
      case 1:
      case 7:
      case 9:
        CFRelease(a1[4]);
        goto LABEL_4;
      case 2:
      case 3:
        CFRelease(a1[4]);
        break;
      case 4:
      case 5:
      case 0xB:
LABEL_4:
        uint64_t v2 = a1[5];
        if (v2) {
          CFRelease(v2);
        }
        a1[5] = 0;
        break;
      case 6:
      case 8:
        break;
      case 0xA:
        uint64_t v3 = a1[4];
        if (v3) {
          CFRelease(v3);
        }
        a1[4] = 0;
        break;
      default:
        uint64_t v4 = __si_assert_copy_extra_329();
        int v5 = v4;
        uint64_t v6 = "";
        if (v4) {
          uint64_t v6 = v4;
        }
        __message_assert("%s:%u: failed assertion '%s' %s Expected valid queue entry type. Got %d", "SIResultQueue.c", 167, "0", v6, *(_DWORD *)a1);
        free(v5);
        if (__valid_fs(-1)) {
          uint64_t v7 = 2989;
        }
        else {
          uint64_t v7 = 3072;
        }
        *(_DWORD *)uint64_t v7 = -559038737;
        abort();
    }
    if (a1[1]) {
      si_release_qid();
    }
    free(a1);
  }
}

uint64_t SICancel(uint64_t a1, os_signpost_id_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  atomic_fetch_add((atomic_uint *volatile)a2, 1u);
  uint64_t v4 = (pthread_mutex_t *)(a2 + 48);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 48));
  if (*(_DWORD *)(a2 + 32)) {
    kdebug_trace();
  }
  Log = _MDPerf_QueryLog();
  if (a2 + 1 >= 2)
  {
    uint64_t v11 = Log;
    if (os_signpost_enabled(Log))
    {
      qos_class_t v12 = qos_class_self();
      int v13 = *(_DWORD *)(a2 + 32);
      int v17 = 134218496;
      *(void *)int v18 = 0;
      *(_WORD *)&v18[8] = 1024;
      *(_DWORD *)&v18[10] = v12;
      __int16 v19 = 1024;
      int v20 = v13;
      _os_signpost_emit_with_name_impl(&dword_1BD672000, v11, OS_SIGNPOST_INTERVAL_END, a2, "Job", "QueryId=%{signpost.description:attribute}lld CurrentQoS=%{signpost.description:attribute}x JobType=%{signpost.description:attribute}d", (uint8_t *)&v17, 0x18u);
    }
  }
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    if (dword_1E9FC90D8 >= 5)
    {
      int v14 = *__error();
      int v15 = _SILogForLogForCategory(13);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        qos_class_t v16 = qos_class_self();
        int v17 = 67109376;
        *(_DWORD *)int v18 = v16;
        *(_WORD *)&v18[4] = 2048;
        *(void *)&v18[6] = a2;
        _os_log_impl(&dword_1BD672000, v15, OS_LOG_TYPE_DEFAULT, "Canceling query in SICancel at QoS: %d for job id:%p", (uint8_t *)&v17, 0x12u);
      }
      *__error() = v14;
      uint64_t v6 = *(void *)(a2 + 24);
    }
    *(unsigned char *)(v6 + 96) = 1;
    uint64_t v7 = *(void *)(a2 + 24);
    pthread_mutex_lock(&jobsLock);
    uint64_t v8 = *(void *)(v7 + 32);
    *(void *)(v7 + 32) = 0;
    pthread_mutex_unlock(&jobsLock);
    if (v8) {
      si_release_qid(v8);
    }
    si_querypipe_release(*(void *)(a2 + 24));
    *(void *)(a2 + 24) = 0;
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v9 = *(void *)(a2 + 8);
    if (v9)
    {
      if (!a1 || v9 == a1)
      {
        pthread_mutex_lock(&schlock);
        if (CFSetContainsValue((CFSetRef)gAllIndexes, *(const void **)(a2 + 8))) {
          si_remove_livequery(*(void *)(a2 + 8), *(const void **)(a2 + 16));
        }
        pthread_mutex_unlock(&schlock);
        si_livequery_release(*(void **)(a2 + 16));
      }
    }
  }
  *(_DWORD *)(a2 + 36) = 1;
  pthread_mutex_unlock(v4);
  si_release_qid(a2);
  si_release_qid(a2);
  return 1;
}

void si_release_qid(uint64_t a1)
{
  if (atomic_fetch_add((atomic_uint *volatile)a1, 0xFFFFFFFF) == 1)
  {
    pthread_mutex_destroy((pthread_mutex_t *)(a1 + 48));
    uint64_t v2 = *(void *)(a1 + 24);
    if (v2) {
      si_querypipe_release(v2);
    }
    free((void *)a1);
  }
}

void userinitiated_query_runLoop(uint64_t a1, void (*a2)(uint64_t, void), uint64_t a3)
{
  pthread_t v6 = pthread_self();
  uint64_t v7 = *(NSObject **)(a1 + 32);
  uint64_t v9 = MEMORY[0x1E4F143A8];
  uint64_t v10 = 0x40000000;
  uint64_t v11 = __si_scheduler_set_thread_block_invoke;
  qos_class_t v12 = &__block_descriptor_tmp_29_1150;
  uint64_t v13 = a1;
  pthread_t v14 = v6;
  dispatch_sync(v7, &v9);
  a2(a3, 0);
  uint64_t v8 = *(NSObject **)(a1 + 32);
  uint64_t v9 = MEMORY[0x1E4F143A8];
  uint64_t v10 = 0x40000000;
  uint64_t v11 = __si_scheduler_set_thread_block_invoke;
  qos_class_t v12 = &__block_descriptor_tmp_29_1150;
  uint64_t v13 = a1;
  pthread_t v14 = 0;
  dispatch_sync(v8, &v9);
}

void queryGo(uint64_t *a1, int a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    uint64_t v4 = a1[2];
    if (!*(unsigned char *)(v4 + 96))
    {
      uint64_t v5 = a1[2];
      do
      {
        uint64_t v6 = v5;
        uint64_t v5 = *(void *)(v5 + 80);
      }
      while (v5);
      if (!*(unsigned char *)(*(void *)(v6 + 8) + 12) && !*(unsigned char *)(v4 + 97))
      {
        uint64_t v7 = *a1;
        uint64_t v8 = *(NSObject **)(v7 + 8 * query_priority((void *)a1[1]) + 832);
        if (*(NSObject **)(a1[2] + 16) == v8)
        {
          int v9 = *__error();
          uint64_t v10 = _SILogForLogForCategory(1);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            int v14 = 136315394;
            int v15 = "queryGo";
            __int16 v16 = 1024;
            int v17 = 4111;
            _os_log_error_impl(&dword_1BD672000, v10, OS_LOG_TYPE_ERROR, "%s:%d: queryGo attempted to wait on already held semaphore", (uint8_t *)&v14, 0x12u);
          }
          *__error() = v9;
        }
        else
        {
          dispatch_semaphore_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
          si_querypipe_set_semaphore(a1[2], v8);
        }
        _queryGoCracked(a1[1], *a1, 0, a1[2]);
      }
    }
  }
  si_querypipe_remove_process(a1[2], a1[1], 0, a2 != 0);
  uint64_t v11 = a1[1];
  if ((*(unsigned char *)(v11 + 202) & 4) == 0) {
    si_querypipe_remove_process(a1[2], v11, 0, a2 != 0);
  }
  qos_class_t v12 = (const void *)a1[4];
  if (v12) {
    CFRelease(v12);
  }
  a1[4] = 0;
  uint64_t v13 = a1[1];
  if (atomic_fetch_add((atomic_uint *volatile)(v13 + 584), 0xFFFFFFFF) == 1) {
    si_query_free(v13);
  }
  si_querypipe_release(a1[2]);
  free(a1);
}

void si_querypipe_release(uint64_t a1)
{
  if (atomic_fetch_add((atomic_uint *volatile)a1, 0xFFFFFFFF) == 1)
  {
    if (*(void *)(a1 + 80))
    {
      si_querypipe_release();
    }
    else
    {
      SIResultQueueRelease(*(atomic_uint **)(a1 + 8));
      CFRelease(*(CFTypeRef *)(a1 + 40));
    }
    uint64_t v2 = *(const void **)(a1 + 24);
    if (v2) {
      _Block_release(v2);
    }
    uint64_t v3 = *(NSObject **)(a1 + 16);
    if (v3)
    {
      dispatch_semaphore_signal(v3);
      dispatch_release(*(dispatch_object_t *)(a1 + 16));
      *(void *)(a1 + 16) = 0;
    }
    if (*(void *)(a1 + 32)) {
      si_release_qid();
    }
    uint64_t v4 = *(const void **)(a1 + 88);
    if (v4) {
      CFRelease(v4);
    }
    free((void *)a1);
  }
}

void si_querypipe_remove_process(uint64_t a1, uint64_t a2, void **a3, BOOL a4)
{
  uint64_t v6 = a1;
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  unsigned int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 64), 0xFFFFFFFF, memory_order_relaxed);
  if (add_explicit == 1 || add_explicit == 2 && *(unsigned char *)(a1 + 100))
  {
    if ((*(unsigned char *)(a2 + 201) & 0x20) != 0)
    {
      CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFNumberRef v73 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, (const void *)(a2 + 416));
      CFNumberRef v72 = CFNumberCreate(v10, kCFNumberDoubleType, (const void *)(a2 + 400));
      CFNumberRef v71 = CFNumberCreate(v10, kCFNumberDoubleType, (const void *)(a2 + 392));
      CFNumberRef v70 = CFNumberCreate(v10, kCFNumberDoubleType, (const void *)(a2 + 408));
      CFNumberRef v69 = CFNumberCreate(v10, kCFNumberDoubleType, (const void *)(a2 + 552));
      CFNumberRef v68 = CFNumberCreate(v10, kCFNumberDoubleType, (const void *)(a2 + 536));
      CFNumberRef v67 = CFNumberCreate(v10, kCFNumberDoubleType, (const void *)(a2 + 528));
      CFNumberRef v66 = CFNumberCreate(v10, kCFNumberDoubleType, (const void *)(a2 + 544));
      CFNumberRef v65 = CFNumberCreate(v10, kCFNumberDoubleType, (const void *)(a2 + 368));
      double valuePtr = CFAbsoluteTimeGetCurrent();
      CFNumberRef v64 = CFNumberCreate(v10, kCFNumberDoubleType, &valuePtr);
      CFNumberRef v63 = CFNumberCreate(v10, kCFNumberDoubleType, (const void *)(a2 + 376));
      CFNumberRef v62 = CFNumberCreate(v10, kCFNumberLongType, (const void *)(a2 + 464));
      CFNumberRef v61 = CFNumberCreate(v10, kCFNumberLongType, (const void *)(a2 + 472));
      CFNumberRef v60 = CFNumberCreate(v10, kCFNumberLongType, (const void *)(a2 + 480));
      CFNumberRef v59 = CFNumberCreate(v10, kCFNumberLongType, (const void *)(a2 + 488));
      CFNumberRef v58 = CFNumberCreate(v10, kCFNumberLongType, (const void *)(a2 + 496));
      CFNumberRef v57 = CFNumberCreate(v10, kCFNumberLongType, (const void *)(a2 + 504));
      CFNumberRef v56 = CFNumberCreate(v10, kCFNumberLongType, (const void *)(a2 + 512));
      CFNumberRef v55 = CFNumberCreate(v10, kCFNumberLongType, (const void *)(a2 + 520));
      CFNumberRef v54 = CFNumberCreate(v10, kCFNumberLongLongType, (const void *)(a2 + 608));
      CFNumberRef v53 = CFNumberCreate(v10, kCFNumberLongType, (const void *)(a2 + 152));
      CFNumberRef v52 = CFNumberCreate(v10, kCFNumberIntType, (const void *)(a2 + 156));
      uint64_t v75 = qos_class_self();
      CFNumberRef v51 = CFNumberCreate(v10, kCFNumberLongType, &v75);
      CFNumberRef v50 = CFNumberCreate(v10, kCFNumberDoubleType, (const void *)(a2 + 448));
      CFNumberRef v49 = CFNumberCreate(v10, kCFNumberDoubleType, (const void *)(a2 + 456));
      CFNumberRef v48 = CFNumberCreate(v10, kCFNumberDoubleType, (const void *)(a2 + 384));
      CFStringRef v11 = *(const __CFString **)(a2 + 656);
      uint64_t v12 = v75;
      uint64_t v13 = *(unsigned int *)(a2 + 152);
      uint64_t v14 = *(int *)(a2 + 156);
      double v15 = valuePtr - *(double *)(a2 + 368);
      double v16 = *(double *)(a2 + 392);
      double v17 = valuePtr - *(double *)(a2 + 384);
      double v18 = *(double *)(a2 + 448);
      double v19 = *(double *)(a2 + 456);
      double v20 = *(double *)(a2 + 408);
      double v21 = *(double *)(a2 + 416);
      double v22 = *(double *)(a2 + 400);
      uint64_t v23 = *(void *)(a2 + 504);
      uint64_t value = *(void *)(a2 + 496);
      uint64_t v42 = *(void *)(a2 + 512);
      uint64_t v43 = *(void *)(a2 + 480);
      uint64_t v44 = *(void *)(a2 + 488);
      uint64_t v45 = *(void *)(a2 + 464);
      uint64_t v46 = *(void *)(a2 + 472);
      uint64_t v47 = *(void *)(a2 + 520);
      xpc_object_t empty = xpc_dictionary_create_empty();
      if (v11)
      {
        CStringPtr = CFStringGetCStringPtr(v11, 0x8000100u);
        xpc_dictionary_set_string(empty, "client", CStringPtr);
      }
      xpc_dictionary_set_uint64(empty, "kind", v13);
      xpc_dictionary_set_uint64(empty, "qosLevel", v12);
      xpc_dictionary_set_uint64(empty, "protectionClass", v14);
      xpc_dictionary_set_double(empty, "totalTime", v15);
      xpc_dictionary_set_double(empty, "totalExecutionTime", v17);
      xpc_dictionary_set_double(empty, "activeTime", v19);
      xpc_dictionary_set_double(empty, "waitTime", v18);
      xpc_dictionary_set_double(empty, "setupTime", v16);
      xpc_dictionary_set_double(empty, "attributeTime", v21);
      xpc_dictionary_set_double(empty, "termTime", v22);
      xpc_dictionary_set_double(empty, "postTime", v20);
      xpc_dictionary_set_uint64(empty, "matchesCollected", v23);
      xpc_dictionary_set_uint64(empty, "matchesDiscarded", value);
      xpc_dictionary_set_uint64(empty, "matchesChecked", v42);
      xpc_dictionary_set_uint64(empty, "sdbIteratorCount", v43);
      xpc_dictionary_set_uint64(empty, "sdbObjectCount", v44);
      xpc_dictionary_set_uint64(empty, "sdbPageCount", v45);
      xpc_dictionary_set_uint64(empty, "sdbCacheHits", v46);
      xpc_dictionary_set_uint64(empty, "plistObjects", v47);
      xpc_dictionary_set_BOOL(empty, "canceled", a4);
      analytics_send_event();
      xpc_release(empty);
      long long v88 = xmmword_1E63461D8;
      long long v89 = *(_OWORD *)&off_1E63461E8;
      long long v90 = xmmword_1E63461F8;
      uint64_t v91 = @"kSICanceled";
      long long v84 = xmmword_1E6346198;
      long long v85 = *(_OWORD *)&off_1E63461A8;
      long long v86 = xmmword_1E63461B8;
      long long v87 = *(_OWORD *)&off_1E63461C8;
      long long v80 = xmmword_1E6346158;
      long long v81 = *(_OWORD *)&off_1E6346168;
      long long v82 = xmmword_1E6346178;
      long long v83 = *(_OWORD *)&off_1E6346188;
      *(_OWORD *)keys = xmmword_1E6346138;
      long long v79 = *(_OWORD *)&off_1E6346148;
      values[0] = v71;
      values[1] = v72;
      values[2] = v70;
      values[3] = v73;
      values[4] = v67;
      values[5] = v68;
      values[6] = v66;
      values[7] = v54;
      values[8] = v53;
      values[9] = v52;
      values[10] = v69;
      values[11] = v65;
      values[12] = v64;
      values[13] = v63;
      values[14] = v62;
      values[15] = v60;
      values[16] = v59;
      values[17] = v61;
      values[18] = v51;
      values[19] = v50;
      values[20] = v49;
      values[21] = v57;
      values[22] = v56;
      values[23] = v58;
      values[24] = v55;
      values[25] = v48;
      uint64_t v26 = (void **)MEMORY[0x1E4F1CFD0];
      if (!a4) {
        uint64_t v26 = (void **)MEMORY[0x1E4F1CFC8];
      }
      values[26] = *v26;
      CFDictionaryRef v8 = CFDictionaryCreate(v10, (const void **)keys, (const void **)values, 27, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      for (uint64_t i = 0; i != 27; ++i)
        CFRelease(values[i]);
    }
    else
    {
      CFDictionaryRef v8 = 0;
    }
    if (*(void *)(v6 + 80))
    {
      if (a3)
      {
        uint64_t v28 = v6;
        do
        {
          uint64_t v29 = v28;
          uint64_t v28 = *(void *)(v28 + 80);
        }
        while (v28);
        if (!si_resultqueue_enqueue(*(void *)(v29 + 8), (int *)a3)) {
          SIResultBatchFree(a3);
        }
      }
      if (v8) {
        CFRelease(v8);
      }
      goto LABEL_41;
    }
    *(_OWORD *)keys = *(_OWORD *)(v6 + 48);
    __int16 v30 = *(uint64_t **)(v6 + 8);
    CFArrayRef v31 = malloc_type_calloc(1uLL, 0x40uLL, 0x10720403C4CCC75uLL);
    int v32 = *__error();
    CFArrayRef v33 = _SILogForLogForCategory(1);
    os_log_type_t v34 = 2 * (dword_1E9FC90A8 < 4);
    if (os_log_type_enabled(v33, v34))
    {
      LOWORD(values[0]) = 0;
      _os_log_impl(&dword_1BD672000, v33, v34, "Passing up out of results", (uint8_t *)values, 2u);
    }
    *__error() = v32;
    v31[1] = *(_OWORD *)keys;
    int v35 = 4;
    if (add_explicit == 2)
    {
      if (*(unsigned char *)(v6 + 100)) {
        int v35 = 5;
      }
      else {
        int v35 = 4;
      }
    }
    *(_DWORD *)CFArrayRef v31 = v35;
    *((void *)v31 + 1) = si_querypipe_copy_jobid(v6);
    *((void *)v31 + 5) = v8;
    if (a3)
    {
      uint64_t v36 = countForBatch((int *)a3);
      uint64_t v37 = countForBatch((int *)v31);
      pthread_mutex_lock((pthread_mutex_t *)(*v30 + 8));
      if (!*((unsigned char *)v30 + 12))
      {
        v30[9] += v37 + v36;
        si_enqueue_locked(*v30, (uint64_t)a3);
        si_enqueue_locked(*v30, (uint64_t)v31);
        uint64_t v38 = (void (*)(uint64_t, void))v30[6];
        if (v38 && !*((_DWORD *)v30 + 21))
        {
          uint64_t v39 = v30[7];
          v30[6] = 0;
          v30[7] = 0;
          pthread_mutex_unlock((pthread_mutex_t *)(*v30 + 8));
          v38(v39, 0);
        }
        else
        {
          pthread_mutex_unlock((pthread_mutex_t *)(*v30 + 8));
        }
        goto LABEL_41;
      }
      pthread_mutex_unlock((pthread_mutex_t *)(*v30 + 8));
      SIResultBatchFree((void **)v31);
      CFArrayRef v31 = a3;
    }
    else if (si_resultqueue_enqueue((uint64_t)v30, (int *)v31))
    {
LABEL_41:
      uint64_t v40 = *(NSObject **)(v6 + 16);
      if (v40)
      {
        dispatch_semaphore_signal(v40);
        dispatch_release(*(dispatch_object_t *)(v6 + 16));
        *(void *)(v6 + 16) = 0;
      }
      *(unsigned char *)(v6 + 97) = 1;
      return;
    }
    SIResultBatchFree((void **)v31);
    goto LABEL_41;
  }
  if (a3)
  {
    do
    {
      uint64_t v9 = v6;
      uint64_t v6 = *(void *)(v6 + 80);
    }
    while (v6);
    if (!si_resultqueue_enqueue(*(void *)(v9 + 8), (int *)a3))
    {
      SIResultBatchFree(a3);
    }
  }
}

void SIResultQueueRelease(atomic_uint *a1)
{
  if (atomic_fetch_add(a1 + 2, 0xFFFFFFFF) == 1)
  {
    if (a1[10])
    {
      unint64_t v2 = 0;
      do
      {
        (*(void (**)(void, uint64_t))(*((void *)a1 + 3) + 8 * v2))(*(void *)(*((void *)a1 + 4) + 8 * v2), 1);
        ++v2;
      }
      while (v2 < a1[10]);
    }
    free(*((void **)a1 + 3));
    free(*((void **)a1 + 4));
    uint64_t v3 = (void (*)(void, uint64_t))*((void *)a1 + 6);
    if (v3) {
      v3(*((void *)a1 + 7), 1);
    }
    uint64_t v4 = *(char **)a1;
    if (*(void *)a1)
    {
      *(void *)uint64_t v4 = "destroyed simple queue";
      pthread_mutex_destroy((pthread_mutex_t *)(v4 + 8));
      pthread_cond_destroy((pthread_cond_t *)(v4 + 72));
      uint64_t v5 = (char *)*((void *)v4 + 17);
      uint64_t v6 = *((unsigned int *)v4 + 31);
      uint64_t v7 = (void ***)&v5[8 * v6];
      for (uint64_t i = *v7; *v7; uint64_t i = *v7)
      {
        NSObject *v7 = 0;
        *((_DWORD *)v4 + 31) = (*((_DWORD *)v4 + 30) - 1) & (v6 + 1);
        SIResultBatchFree(i);
        uint64_t v5 = (char *)*((void *)v4 + 17);
        uint64_t v6 = *((unsigned int *)v4 + 31);
        uint64_t v7 = (void ***)&v5[8 * v6];
      }
      free(v5);
      free(v4);
    }
    free(a1);
  }
}

void si_querypipe_set_semaphore(uint64_t a1, dispatch_object_t object)
{
  if (object) {
    dispatch_retain(object);
  }
  uint64_t v4 = *(NSObject **)(a1 + 16);
  if (v4)
  {
    dispatch_semaphore_signal(v4);
    dispatch_release(*(dispatch_object_t *)(a1 + 16));
  }
  *(void *)(a1 + 16) = object;
}

void _queryGoCracked(uint64_t a1, uint64_t a2, CFArrayRef cf, uint64_t a4)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (dword_1E9FC90A8 >= 5)
  {
    int v35 = *__error();
    uint64_t v36 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v37 = *(void *)(a1 + 608);
      uint64_t v38 = *(void *)(a1 + 616);
      int v39 = *(_DWORD *)(a2 + 60) & 1;
      CFStringRef Length = *(const __CFString **)(a1 + 32);
      if (Length) {
        CFStringRef Length = (const __CFString *)CFStringGetLength(Length);
      }
      *(_DWORD *)buint64_t lock = 134218752;
      *(void *)&block[4] = v37;
      *(_WORD *)&block[12] = 2048;
      *(void *)&block[14] = v38;
      *(_WORD *)&block[22] = 1024;
      LODWORD(v52) = v39;
      WORD2(v52) = 2048;
      *(void *)((char *)&v52 + 6) = Length;
      _os_log_impl(&dword_1BD672000, v36, OS_LOG_TYPE_DEFAULT, "Start execution: qid=(%lld,%lld), pc=%d, uql=%ld", block, 0x26u);
    }
    *__error() = v35;
    if (a1) {
      goto LABEL_3;
    }
  }
  else if (a1)
  {
LABEL_3:
    *(CFAbsoluteTime *)(a1 + 384) = CFAbsoluteTimeGetCurrent();
  }
  if (*(unsigned char *)(a4 + 96)) {
    return;
  }
  uint64_t v8 = a4;
  do
  {
    uint64_t v9 = v8;
    uint64_t v8 = *(void *)(v8 + 80);
  }
  while (v8);
  if (*(unsigned char *)(*(void *)(v9 + 8) + 12) || *(unsigned char *)(a4 + 97)) {
    return;
  }
  if (cf || (CFTypeRef cf = *(CFArrayRef *)(a1 + 176)) != 0 || (CFTypeRef cf = *(CFArrayRef *)(a1 + 184)) != 0)
  {
    CFRetain(cf);
    char v10 = 0;
  }
  else
  {
    char v10 = 1;
  }
  uint64_t v50 = 0;
  memset(v49, 0, sizeof(v49));
  si_opt_cache_init((CFMutableSetRef *)v49, *(void *)(a4 + 88));
  if (!*(unsigned char *)(a1 + 688)) {
    si_query_prepare_lifting(a2, a1, (uint64_t)v49);
  }
  si_opt_cache_destroy((uint64_t)v49);
  if ((*(unsigned char *)(a1 + 201) & 2) != 0)
  {
    if ((v10 & 1) == 0)
    {
      if (CFArrayGetCount(cf)) {
        goto LABEL_28;
      }
      CFRelease(cf);
    }
    bzero(block, 0x400uLL);
    int v11 = *(_DWORD *)(a2 + 48);
    if (v11 == -1)
    {
      uint64_t v14 = "/";
    }
    else
    {
      int v12 = fcntl(v11, 50, block);
      if (block[0]) {
        BOOL v13 = v12 < 0;
      }
      else {
        BOOL v13 = 1;
      }
      if (v13) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = block;
      }
    }
    CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    values[0] = (void *)CFStringCreateWithFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v14);
    CFTypeRef cf = CFArrayCreate(v15, (const void **)values, 1, MEMORY[0x1E4F1D510]);
    CFRelease(values[0]);
  }
LABEL_28:
  uint64_t v16 = *(void *)(a1 + 200);
  if ((v16 & 0x1000000) == 0 && (*(unsigned char *)(a2 + 828) & 0x28) != 0) {
    *(void *)(a1 + 200) = v16 | 0x1000000;
  }
  double v17 = *(void **)(a1 + 72);
  if (v17)
  {
    if (!cf) {
      goto LABEL_35;
    }
    if (CFArrayGetCount(cf))
    {
      double v17 = *(void **)(a1 + 72);
LABEL_35:
      values[0] = 0;
      values[1] = values;
      values[2] = (void *)0x2000000000;
      char v48 = 0;
      v46[0] = MEMORY[0x1E4F143A8];
      v46[1] = 0x40000000;
      v46[2] = ___queryGoCracked_block_invoke;
      v46[3] = &unk_1E63465E8;
      v46[4] = values;
      v46[5] = a2;
      *(void *)buint64_t lock = MEMORY[0x1E4F143A8];
      *(void *)&block[8] = 0x40000000;
      *(void *)&block[16] = __db_query_tree_apply_block_block_invoke;
      *(void *)&long long v52 = &unk_1E6348598;
      *((void *)&v52 + 1) = v46;
      *(void *)(a1 + 72) = db_query_tree_apply_block_with_meta(v17, (uint64_t)block, (uint64_t)&__block_literal_global_431);
      uint64_t v18 = *(void *)(a1 + 144);
      *(void *)buint64_t lock = MEMORY[0x1E4F143A8];
      *(void *)&block[8] = 0x40000000;
      *(void *)&block[16] = __query_once_block_invoke;
      *(void *)&long long v52 = &__block_descriptor_tmp_518;
      *((void *)&v52 + 1) = a1;
      if (v18 != -1) {
        dispatch_once((dispatch_once_t *)(a1 + 144), block);
      }
      uint64_t v19 = *(void *)(a1 + 200);
      if (*(_DWORD *)(a1 + 152) == 1 && (v19 & 0x80) != 0)
      {
        if ((_getByGroupGroupingQueries_initialized & 1) == 0)
        {
          for (uint64_t i = 0; i != 17; ++i)
          {
            if (!grouping_queryByGroupNodes[i])
            {
              query_node_with_ann = db_make_query_node_with_ann(grouping_queryByGroupStrings[i], 0);
              uint64_t v22 = 0;
              atomic_compare_exchange_strong_explicit(&grouping_queryByGroupNodes[i], (unint64_t *)&v22, (unint64_t)query_node_with_ann, memory_order_relaxed, memory_order_relaxed);
              if (v22) {
                db_free_query_node(query_node_with_ann);
              }
            }
          }
          __dmb(0xBu);
          _getByGroupGroupingQueries_initialized = 1;
        }
        for (uint64_t j = 0; j != 17; ++j)
        {
          uint64_t v24 = (void *)makeAndNode(grouping_queryByGroupNodes[j], *(void *)(a1 + 72), 0, 0);
          uint64_t v25 = (int *)translateSDBQuery((uint64_t)v24);
          *(void *)buint64_t lock = 0;
          if (cf) {
            BOOL v26 = CFArrayGetCount(cf) != 0;
          }
          else {
            BOOL v26 = 0;
          }
          uint64_t v27 = rewriteForSources((uint64_t)v25, (uint64_t **)block, v26);
          siquerynode_release(v25);
          uint64_t v28 = a2;
          int v29 = doExecuteCracked(a1, a2, cf, *(void *)(a1 + 200) & 0xFFFFFFFFFFFFBFFFLL, *(uint64_t *)block, v27, *(void *)(a1 + 16), a4);
          if (dword_1E9FC90A8 >= 5)
          {
            int v33 = *__error();
            os_log_type_t v34 = _SILogForLogForCategory(1);
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_1BD672000, v34, OS_LOG_TYPE_DEFAULT, "Started normal (grouping) query threadlet.", buf, 2u);
            }
            *__error() = v33;
          }
          __int16 v30 = *(void **)block;
          if (v27 >= 1)
          {
            CFArrayRef v31 = (int **)(*(void *)block + 8);
            do
            {
              int v32 = *(v31 - 1);
              if (v32) {
                siquerynode_release(v32);
              }
              if (*v31) {
                siquerynode_release(*v31);
              }
              v31 += 2;
              --v27;
            }
            while (v27);
          }
          free(v30);
          db_free_query_node(v24);
          a2 = v28;
        }
      }
      else
      {
        int v29 = doExecuteCracked(a1, a2, cf, v19, *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 16), a4);
        if (dword_1E9FC90A8 >= 5)
        {
          int v43 = *__error();
          uint64_t v44 = _SILogForLogForCategory(1);
          if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buint64_t lock = 0;
            _os_log_impl(&dword_1BD672000, v44, OS_LOG_TYPE_DEFAULT, "Started normal query threadlet.", block, 2u);
          }
          *__error() = v43;
        }
      }
      _Block_object_dispose(values, 8);
      if (v29 == 1)
      {
LABEL_67:
        if (!cf) {
          return;
        }
        goto LABEL_68;
      }
    }
  }
  if (dword_1E9FC90A8 < 5) {
    goto LABEL_67;
  }
  int v41 = *__error();
  uint64_t v42 = _SILogForLogForCategory(1);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buint64_t lock = 134217984;
    *(void *)&block[4] = a2;
    _os_log_impl(&dword_1BD672000, v42, OS_LOG_TYPE_DEFAULT, "Could not execute query for %p (!)", block, 0xCu);
  }
  *__error() = v41;
  if (cf) {
LABEL_68:
  }
    CFRelease(cf);
}

const void *si_opt_cache_init(CFMutableSetRef *a1, uint64_t a2)
{
  a1[2] = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  *a1 = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, (const CFSetCallBacks *)&kCStringSetCallBacks);
  a1[1] = CFSetCreateMutable(v4, 0, (const CFSetCallBacks *)&kCStringSetCallBacks);
  if (a2 && (CFArrayRef v5 = *(const __CFArray **)(a2 + 112)) != 0)
  {
    uint64_t result = (const void *)CFArrayGetCount(v5);
    if (result)
    {
      uint64_t result = CFArrayGetValueAtIndex(v5, 0);
      if (result) {
        uint64_t result = CFRetain(result);
      }
    }
  }
  else
  {
    uint64_t result = 0;
  }
  a1[4] = (CFMutableSetRef)result;
  return result;
}

void si_opt_cache_destroy(uint64_t a1)
{
  if (*(void *)(a1 + 16)) {
    SILocalizationRelease();
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  *(void *)a1 = 0;
  unint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = *(const void **)(a1 + 32);
  if (v3) {
    CFRelease(v3);
  }
  *(void *)(a1 + 32) = 0;
}

uint64_t doExecuteCracked(uint64_t a1, uint64_t a2, CFArrayRef theArray, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (theArray && CFArrayGetCount(theArray) == 1)
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, 0);
    CFTypeID v17 = CFGetTypeID(ValueAtIndex);
    if (v17 == CFStringGetTypeID()
      && (bzero(buffer, 0x400uLL), CFStringGetFileSystemRepresentation(ValueAtIndex, buffer, 1024))
      && (v36[1] = 0x200000000,
          v36[2] = 0,
          int v35 = 0,
          *(void *)long long buf = 0,
          v36[0] = 0x800000005,
          !getattrlist(buffer, v36, buf, 0xCuLL, 0x200u)))
    {
      if (v35) {
        BOOL v29 = 0;
      }
      else {
        BOOL v29 = *(_DWORD *)&buf[4] == 2;
      }
      int v18 = v29;
      BOOL v19 = v29 || *(_DWORD *)&buf[4] == 1;
    }
    else
    {
      int v18 = 0;
      BOOL v19 = 0;
    }
    LOBYTE(v20) = 0;
    if (v18) {
      BOOL v21 = v19;
    }
    else {
      BOOL v21 = 0;
    }
    if (!a6 || v21) {
      return v20 & 1;
    }
  }
  else if (!a6)
  {
    LOBYTE(v20) = 0;
    return v20 & 1;
  }
  if (a6 < 2)
  {
    uint64_t v22 = 0;
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v23 = (uint64_t *)(a5 + 16);
    uint64_t v24 = 1;
    do
    {
      uint64_t v25 = *v23;
      v23 += 2;
      if (*(_DWORD *)(*(void *)(a5 + 16 * v22) + 8) > *(_DWORD *)(v25 + 8)) {
        uint64_t v22 = v24;
      }
      ++v24;
    }
    while (a6 != v24);
  }
  BOOL v26 = (int *)&unk_1E9FC9000;
  if (!*(void *)(a5 + 16 * v22))
  {
    int v20 = 0;
    if (a6 < 2) {
      return v20 & 1;
    }
    goto LABEL_27;
  }
  *(void *)buffer = 0;
  v36[0] = 0;
  si_query_copy_grouping(a1, buffer, v36);
  if (dword_1E9FC90A8 >= 5)
  {
    int log = *__error();
    __int16 v30 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1BD672000, v30, OS_LOG_TYPE_DEFAULT, "We do have a primary query", buf, 2u);
    }
    *__error() = log;
  }
  int v20 = executeOneCracked(a1, *(void *)(a5 + 16 * v22), *(void *)(a5 + 16 * v22 + 8), a2, (uint64_t)theArray, a4, a7, a8, *(void **)buffer, v36[0]);
  BOOL v26 = (_DWORD *)&unk_1E9FC9000;
  if (a6 >= 2)
  {
LABEL_27:
    if (v26[42] >= 5)
    {
      int v33 = *__error();
      loga = _SILogForLogForCategory(1);
      if (os_log_type_enabled(loga, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buffer = 67109120;
        *(_DWORD *)&buffer[4] = 0;
        _os_log_impl(&dword_1BD672000, loga, OS_LOG_TYPE_DEFAULT, "We do have %d secondary queries", (uint8_t *)buffer, 8u);
      }
      *__error() = v33;
    }
    uint64_t v27 = (uint64_t *)(a5 + 8);
    do
    {
      *(void *)buffer = 0;
      v36[0] = 0;
      if (v22)
      {
        si_query_copy_grouping(a1, buffer, v36);
        v20 |= executeOneCracked(a1, *(v27 - 1), *v27, a2, (uint64_t)theArray, a4, a7, a8, *(void **)buffer, v36[0]);
      }
      v27 += 2;
      --v22;
      --a6;
    }
    while (a6);
  }
  return v20 & 1;
}

void si_query_copy_grouping(uint64_t a1, void *a2, void *a3)
{
  *a3 = *(void *)(a1 + 256);
  *a2 = 0;
  if (*(void *)(a1 + 248))
  {
    size_t v5 = *(void *)(a1 + 256);
    if (((v5 >> 14) & 0x7FFFFFFFFFFFLL) == 0 && 8 * v5 > *MEMORY[0x1E4F14B00]) {
      ++sTotal_8270;
    }
    uint64_t v7 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, v5, 8uLL, 0x31F9A007uLL);
    if (!v7) {
      _log_fault_for_malloc_failure();
    }
    *a2 = v7;
    if (*(uint64_t *)(a1 + 256) >= 1)
    {
      uint64_t v8 = 0;
      uint64_t v9 = MEMORY[0x1E4F143A8];
      do
      {
        char v10 = *(void **)(*(void *)(a1 + 248) + 8 * v8);
        v11[0] = v9;
        v11[1] = 0x40000000;
        v11[2] = __db_query_tree_apply_block_block_invoke;
        v11[3] = &unk_1E6348598;
        v11[4] = &__block_literal_global_21_12478;
        *(void *)(*a2 + 8 * v8++) = db_query_tree_apply_block_with_meta(v10, (uint64_t)v11, (uint64_t)&__block_literal_global_25);
      }
      while (v8 < *(void *)(a1 + 256));
    }
  }
}

uint64_t executeOneCracked(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10)
{
  if (*(unsigned char *)(a8 + 96)) {
    goto LABEL_5;
  }
  uint64_t v10 = a8;
  do
  {
    uint64_t v11 = v10;
    uint64_t v10 = *(void *)(v10 + 80);
  }
  while (v10);
  if (*(unsigned char *)(*(void *)(v11 + 8) + 12)) {
    goto LABEL_5;
  }
  int v14 = *(_DWORD *)(a2 + 4);
  uint64_t v15 = *(void *)(a1 + 576);
  if ((v14 & 4) == 0)
  {
    if (v14 == 2 && v15 != 0) {
LABEL_19:
    }
      operator new();
    if (*(void *)(a4 + 1184)) {
      operator new();
    }
  }
  if (v15) {
    goto LABEL_19;
  }
  if ((v14 & 3) != 0 && *(void *)(a4 + 1184) && !*(unsigned char *)(a2 + 14) && !*(unsigned char *)(a2 + 15)) {
    operator new();
  }
LABEL_5:
  if (a10 >= 1)
  {
    for (uint64_t i = 0; i != a10; ++i)
    {
      BOOL v13 = (void *)a9[i];
      if (v13)
      {
        v18[0] = MEMORY[0x1E4F143A8];
        v18[1] = 0x40000000;
        v18[2] = __db_query_tree_apply_block_block_invoke;
        void v18[3] = &unk_1E6348598;
        v18[4] = &__block_literal_global_161;
        db_query_tree_apply_block_with_meta(v13, (uint64_t)v18, 0);
      }
    }
  }
  free(a9);
  return 0;
}

uint64_t SISearchCtx_METADATA::vinitContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFArray *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, uint64_t a12, uint64_t a13, char a14)
{
  SISearchCtx::initContext(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13);
  int v20 = *(_DWORD *)(a2 + 152);
  if ((v20 - 1) < 3 || v20 == 4 && *(void *)(a1 + 176))
  {
    unsigned int v21 = currentCategoryCount(a3);
    *(_DWORD *)(a1 + 652) = v21;
    uint64_t v22 = malloc_type_malloc(32 * v21 + 40, 0xCD4D7C3EuLL);
    *(void *)(a1 + 928) = v22;
    int v23 = *(_DWORD *)(a1 + 652);
    *uint64_t v22 = 0u;
    v22[1] = 0u;
    *((void *)v22 + 4) = 0;
    *((_DWORD *)v22 + 1) = v23;
    if (v23) {
      L1ComboQueueInit();
    }
  }
  if (!*(void *)(a3 + 1184))
  {
    uint64_t v37 = __si_assert_copy_extra_329();
    uint64_t v38 = v37;
    int v39 = "";
    if (v37) {
      int v39 = v37;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SISearchCtx_METADATA.cpp", 5211, "db->store", v39);
    free(v38);
    if (__valid_fs(-1)) {
      uint64_t v40 = 2989;
    }
    else {
      uint64_t v40 = 3072;
    }
    *(_DWORD *)uint64_t v40 = -559038737;
    abort();
  }
  *(unsigned char *)(a1 + 644) = 1;
  *(_DWORD *)(a1 + 832) = 1;
  if (*MEMORY[0x1E4F14B00] <= 0x2FuLL) {
    ++sTotal;
  }
  uint64_t v24 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x30uLL, 0x31F9A007uLL);
  if (!v24) {
    _log_fault_for_malloc_failure();
  }
  *(void *)(a1 + 840) = v24;
  if (a5)
  {
    uint64_t v25 = compileToSDBTree(a5, (uint64_t (*)(void))factorRewrite);
    setupCannedFields(v25);
    *(void *)(*(void *)(a1 + 840) + 16) = v25;
    uint64_t v26 = 255;
    if (!*(unsigned char *)(a1 + 650)) {
      uint64_t v26 = 21;
    }
    *(void *)(a1 + 192) = v26;
    if ((*(_DWORD *)(a1 + 304) & 0x80000000) == 0) {
      *(_DWORD *)(a1 + 304) = 0;
    }
  }
  else
  {
    uint64_t v27 = 255;
    if (!*(unsigned char *)(a1 + 650)) {
      uint64_t v27 = 21;
    }
    *(void *)(a1 + 192) = v27;
    if ((*(_DWORD *)(a1 + 304) & 0x80000000) == 0) {
      *(_DWORD *)(a1 + 304) = 1;
    }
  }
  **(void **)(a1 + 840) = compileToIndexQuery(a4, *(double *)(a2 + 360));
  if (a6 && (*(void *)(a3 + 6616) || (*(unsigned char *)(a3 + 6576) & 0x10) != 0))
  {
    scope_uint64_t node = si_query_get_scope_node(a3, (void *)a2, a6);
    if (scope_node)
    {
      BOOL v29 = scope_node;
      uint64_t v41 = MEMORY[0x1E4F143A8];
      uint64_t v42 = 0x40000000;
      int v43 = __db_query_tree_apply_block_block_invoke;
      uint64_t v44 = &unk_1E6348598;
      uint64_t v45 = &__block_literal_global_21_12478;
      uint64_t tree_apply_block_with_meta = (void *)db_query_tree_apply_block_with_meta(scope_node, (uint64_t)&v41, (uint64_t)&__block_literal_global_25);
      if (*(void **)(a2 + 224) != v29) {
        db_free_query_node(v29);
      }
      _rewriteQuery(tree_apply_block_with_meta, *(double *)(a2 + 360));
      **(void **)(a1 + 840) = makeAndNode(**(void **)(a1 + 840), (uint64_t)tree_apply_block_with_meta, 1, 1);
      CFRelease(*(CFTypeRef *)(a1 + 32));
      *(void *)(a1 + 32) = 0;
    }
  }
  if (!*(void *)(*(void *)(a1 + 840) + 16))
  {
    CFArrayRef v31 = *(void **)(a2 + 280);
    if (v31)
    {
      uint64_t v41 = MEMORY[0x1E4F143A8];
      uint64_t v42 = 0x40000000;
      int v43 = __db_query_tree_apply_block_block_invoke;
      uint64_t v44 = &unk_1E6348598;
      uint64_t v45 = &__block_literal_global_21_12478;
      *(void *)(*(void *)(a1 + 840) + 16) = db_query_tree_apply_block_with_meta(v31, (uint64_t)&v41, (uint64_t)&__block_literal_global_25);
    }
  }
  uint64_t v32 = *(void *)(a3 + 1376);
  *(void *)(a1 + 584) = v32;
  if (v32)
  {
    uint64_t v33 = *(unsigned int *)(v32 + 8);
    *(void *)(a1 + 560) = v33;
    *(void *)(a1 + 552) = *(int *)(a3 + 1392);
    if (v33) {
      goto LABEL_37;
    }
  }
  else
  {
    *(void *)(a1 + 560) = 0;
    *(void *)(a1 + 552) = *(int *)(a3 + 1392);
  }
  uint64_t v34 = *(void *)(a3 + 1384);
  *(void *)(a1 + 576) = v34;
  if (v34) {
    uint64_t v34 = *(unsigned int *)(v34 + 8);
  }
  *(void *)(a1 + 568) = v34;
LABEL_37:
  if ((*(unsigned char *)(a1 + 42) & 2) != 0)
  {
    *(unsigned char *)(a1 + 649) = 1;
    CFStringRef v35 = *(const __CFString **)(a2 + 8);
    if (v35)
    {
      if (CFEqual(v35, @"*=*")) {
        *(_WORD *)(a1 + 648) = 1;
      }
    }
  }
  *(unsigned char *)(a1 + 1248) = a14;
  *(_OWORD *)(a1 + 688) = xmmword_1BDA82450;
  *(void *)(a1 + 704) = 0;
  *(_DWORD *)(a1 + 712) = 0;
  *(void *)(a1 + 720) = 4292677391;
  *(void *)(a1 + 728) = 0;
  *(_DWORD *)(a1 + 736) = 0;
  *(void *)(a1 + 744) = 4292677391;
  *(void *)(a1 + 752) = 0;
  *(_DWORD *)(a1 + 760) = 0;
  *(void *)(a1 + 768) = 4292677391;
  *(void *)(a1 + 776) = 0;
  *(_DWORD *)(a1 + 784) = 0;
  *(void *)(a1 + 792) = 4292677391;
  *(void *)(a1 + 800) = 0;
  *(_DWORD *)(a1 + 808) = 0;
  return 1;
}

void SISearchCtx::executeSearchContext(SISearchCtx *this, SISearchCtx *a2)
{
  char v2 = (char)a2;
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (dword_1E9FC90D8 >= 5)
  {
    int v7 = *__error();
    uint64_t v8 = _SILogForLogForCategory(13);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 67109120;
      v9[1] = qos_class_self();
      _os_log_impl(&dword_1BD672000, v8, OS_LOG_TYPE_DEFAULT, "QOS executeSearchCtx: %d", (uint8_t *)v9, 8u);
    }
    *__error() = v7;
  }
  if (*MEMORY[0x1E4F14B00] <= 0x2FuLL) {
    ++sTotal;
  }
  CFAllocatorRef v4 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x30uLL, 0x31F9A007uLL);
  if (!v4) {
    _log_fault_for_malloc_failure();
  }
  *CFAllocatorRef v4 = this;
  v4[3] = *((void *)this + 1);
  *((unsigned char *)v4 + 32) = v2;
  v4[5] = _Block_copy(&__block_literal_global_13251);
  if (v2)
  {
    suspendOthers(this);
    *((CFAbsoluteTime *)v4 + 1) = CFAbsoluteTimeGetCurrent();
    executeSearchCtx_Start((uint64_t)v4, 0);
  }
  else
  {
    size_t v5 = si_querypipe_copy_jobid(*((void *)this + 13));
    if (v5)
    {
      uint64_t v6 = (uint64_t)v5;
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)this + 13) + 64), 1u, memory_order_relaxed);
      *((CFAbsoluteTime *)v4 + 1) = CFAbsoluteTimeGetCurrent();
      v4[2] = "executeSearchContextCracked";
      suspendOthers(this);
      (*(void (**)(SISearchCtx *, void (*)(uint64_t, uint64_t), void *, uint64_t))(*(void *)this + 24))(this, executeSearchCtx_Start, v4, v6);
      si_release_qid(v6);
    }
    else
    {
      search_ctx_destroy(v4, 1);
    }
  }
}

atomic_uint *si_querypipe_copy_jobid(uint64_t a1)
{
  do
  {
    uint64_t v1 = a1;
    a1 = *(void *)(a1 + 80);
  }
  while (a1);
  pthread_mutex_lock(&jobsLock);
  char v2 = *(atomic_uint **)(v1 + 32);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  pthread_mutex_unlock(&jobsLock);
  return v2;
}

uint64_t SISearchCtx_METADATA::enqueue(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (dword_1E9FC90D8 >= 5)
  {
    int v9 = *__error();
    uint64_t v10 = _SILogForLogForCategory(13);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11[0] = 67109120;
      v11[1] = qos_class_self();
      _os_log_impl(&dword_1BD672000, v10, OS_LOG_TYPE_DEFAULT, "enqueue at qos 0x%x", (uint8_t *)v11, 8u);
    }
    *__error() = v9;
  }
  return si_sdb_enqueue(*(void *)(a1 + 24), a4, a2, a3, *(_DWORD *)(a1 + 304));
}

uint64_t si_sdb_enqueue(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, int a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (dword_1E9FC90D8 >= 5)
  {
    int v13 = *__error();
    int v14 = _SILogForLogForCategory(13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109376;
      qos_class_t v20 = qos_class_self();
      __int16 v21 = 1024;
      int v22 = a5;
      _os_log_impl(&dword_1BD672000, v14, OS_LOG_TYPE_DEFAULT, "QOS si_sdb_enqueue: %d priority: %d", buf, 0xEu);
    }
    *__error() = v13;
  }
  if (a5 <= -2) {
    int v10 = -2;
  }
  else {
    int v10 = a5;
  }
  if (v10 >= 1) {
    int v11 = 1;
  }
  else {
    int v11 = v10;
  }
  if (!*(void *)(a1 + 8 * (v11 + 2) + 1008))
  {
    uint64_t v15 = __si_assert_copy_extra_625(*(_DWORD *)(a1 + 32));
    uint64_t v16 = v15;
    CFTypeID v17 = "";
    if (v15) {
      CFTypeID v17 = v15;
    }
    __message_assert("%s:%u: failed assertion '%s' %s No query work queue for priority %d", "SIJob.c", 106, "ref->workqueues.queues[SI_QUERY_QUEUE_IDX+priority]!=0", v17, v11);
    free(v16);
    if (__valid_fs(*(_DWORD *)(a1 + 32))) {
      uint64_t v18 = 2989;
    }
    else {
      uint64_t v18 = 3072;
    }
    *(_DWORD *)uint64_t v18 = -559038737;
    abort();
  }
  return si_enqueue_routine(a1, a2, a3, a4, v11 + 2);
}

uint64_t si_enqueue_routine(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, unsigned int a5)
{
  int v9 = (pthread_mutex_t *)(a2 + 48);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 48));
  if (*(_DWORD *)(a2 + 36))
  {
    pthread_mutex_unlock(v9);
    return a3(a4, 1);
  }
  else
  {
    si_enqueue_work_for_job(*(void *)(a1 + 8 * a5 + 1008), (uint64_t)a3, a4, a2);
    return pthread_mutex_unlock(v9);
  }
}

void si_enqueue_work_for_job(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFAllocatorRef v4 = *(void **)a1;
  if (*(void *)a1)
  {
    do
    {
      size_t v5 = v4;
      CFAllocatorRef v4 = (void *)*v4;
    }
    while (v4);
  }
  else
  {
    size_t v5 = 0;
  }
  uint64_t v6 = *(NSObject **)(a1 + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __si_enqueue_work_for_job_block_invoke;
  block[3] = &__block_descriptor_tmp_3;
  block[4] = v5;
  block[5] = a1;
  block[6] = a2;
  void block[7] = a3;
  block[8] = a4;
  dispatch_sync(v6, block);
}

void SISearchCtx::initContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFArray *a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v48 = a3;
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  atomic_fetch_add((atomic_uint *volatile)(a2 + 584), 1u);
  *(void *)(a1 + 8) = a2;
  if (a2)
  {
    uint64_t v19 = *(void *)(a2 + 576);
    if (v19)
    {
      CFRetain(*(CFTypeRef *)(a2 + 576));
      uint64_t v20 = *(void *)(a1 + 8);
      *(void *)(a1 + 88) = v19;
      if (!v20) {
        goto LABEL_13;
      }
    }
    else
    {
      *(void *)(a1 + 88) = 0;
      uint64_t v20 = a2;
    }
    CFStringRef v21 = *(const __CFString **)(v20 + 48);
    if (v21)
    {
      CFIndex Length = CFStringGetLength(v21);
      CFIndex v23 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
      uint64_t v47 = a5;
      uint64_t v24 = a8;
      uint64_t v25 = (char *)malloc_type_malloc(v23, 0xE8B1CA25uLL);
      CFStringGetCString(*(CFStringRef *)(v20 + 48), v25, v23, 0x8000100u);
      uint64_t v20 = *(void *)(a1 + 8);
      *(void *)(a1 + 264) = v25;
      a8 = v24;
      a5 = v47;
      if (!v20) {
        goto LABEL_13;
      }
    }
    else
    {
      *(void *)(a1 + 264) = 0;
    }
    CFTypeRef v26 = *(CFTypeRef *)(v20 + 40);
    if (v26) {
      CFTypeRef v26 = CFRetain(v26);
    }
    *(void *)(a1 + 72) = v26;
  }
LABEL_13:
  uint64_t v27 = *(void *)(a9 + 88);
  if (v27) {
    CFRetain(*(CFTypeRef *)(a9 + 88));
  }
  *(void *)(a1 + 16) = v27;
  atomic_fetch_add((atomic_uint *volatile)a9, 1u);
  *(void *)(a1 + 104) = a9;
  *(void *)(a1 + 24) = v48;
  *(void *)(a1 + 152) = a8;
  if (a4) {
    Node = cloneQueryNode(a4, 0);
  }
  else {
    Node = 0;
  }
  *(void *)(a1 + 112) = Node;
  if (a5) {
    BOOL v29 = cloneQueryNode(a5, 0);
  }
  else {
    BOOL v29 = 0;
  }
  *(void *)(a1 + 120) = v29;
  if (a10) {
    CFRetain(a10);
  }
  *(void *)(a1 + 56) = a10;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 40) = a7;
  *(void *)(a1 + 48) = a7;
  int v30 = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 160) = v30;
  int v31 = (a7 & 0xF) - 2;
  if ((a7 & 0xC) != 0) {
    int v31 = 1;
  }
  *(_DWORD *)(a1 + 304) = v31;
  if (v30 == 4 && !*(unsigned char *)(a2 + 357)) {
    *(void *)(a1 + 208) = CFDictionaryCreateMutable((CFAllocatorRef)kCIQueryZoneAllocator, 0, 0, MEMORY[0x1E4F1D540]);
  }
  uint64_t v33 = a11;
  uint64_t v32 = a12;
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 56);
  uint64_t v34 = *(void *)(a2 + 160);
  *(void *)(a1 + 176) = v34;
  *(void *)(a1 + 184) = v34;
  if (a6)
  {
    CFIndex Count = CFArrayGetCount(a6);
    if (Count >= 1)
    {
      CFIndex v36 = Count;
      uint64_t v47 = a11;
      uint64_t v48 = a12;
      v46[1] = v46;
      MEMORY[0x1F4188790](Count);
      uint64_t v38 = (const void **)((char *)v46 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
      bzero(v38, v37);
      for (CFIndex i = 0; i != v36; ++i)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a6, i);
        CFTypeID v41 = CFGetTypeID(ValueAtIndex);
        if (v41 == CFStringGetTypeID() && !CFStringHasSuffix(ValueAtIndex, @"/"))
        {
          CFStringRef ValueAtIndex = CFStringCreateWithFormat((CFAllocatorRef)kCIQueryZoneAllocator, 0, @"%@/", ValueAtIndex);
        }
        else if (ValueAtIndex)
        {
          CFRetain(ValueAtIndex);
        }
        v38[i] = ValueAtIndex;
      }
      *(void *)(a1 + 32) = CFArrayCreate((CFAllocatorRef)kCIQueryZoneAllocator, v38, v36, MEMORY[0x1E4F1D510]);
      do
      {
        uint64_t v42 = *v38++;
        CFRelease(v42);
        --v36;
      }
      while (v36);
      uint64_t v33 = v47;
      uint64_t v32 = v48;
      if (dword_1E9FC90A8 > 4)
      {
        int v43 = *__error();
        uint64_t v44 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v45 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138412290;
          uint64_t v50 = v45;
          _os_log_impl(&dword_1BD672000, v44, OS_LOG_TYPE_DEFAULT, "Scopes: %@", buf, 0xCu);
        }
        *__error() = v43;
      }
    }
  }
  *(void *)(a1 + 224) = v33;
  *(void *)(a1 + 232) = v32;
}

_OWORD *cloneQueryNode(uint64_t a1, uint64_t a2)
{
  CFAllocatorRef v4 = malloc_type_calloc(1uLL, 0x28uLL, 0x10A2040E651BF2BuLL);
  uint64_t v5 = *(void *)(a1 + 32);
  long long v6 = *(_OWORD *)(a1 + 16);
  *CFAllocatorRef v4 = *(_OWORD *)a1;
  v4[1] = v6;
  *((void *)v4 + 4) = v5;
  int v7 = *(_DWORD *)v4;
  if (*(_DWORD *)v4 < 2u)
  {
    int v10 = malloc_type_calloc(1uLL, 8 * *(void *)(a1 + 24), 0x2004093837F09uLL);
    *((void *)v4 + 3) = 0;
    *((void *)v4 + 4) = v10;
    uint64_t v11 = *(void *)(a1 + 24);
    if (v11 >= 1)
    {
      uint64_t v12 = 0;
      for (uint64_t i = 0; i < v11; ++i)
      {
        uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 8 * i);
        if (v14 != a2)
        {
          *(void *)(*((void *)v4 + 4) + 8 * *((void *)v4 + 3)) = cloneQueryNode(v14, 0);
          uint64_t v12 = *((void *)v4 + 3) + 1;
          *((void *)v4 + 3) = v12;
          uint64_t v11 = *(void *)(a1 + 24);
        }
      }
      if (v12 == 1)
      {
        uint64_t v15 = (void **)*((void *)v4 + 4);
        uint64_t v16 = *v15;
        free(v15);
        free(v4);
        CFAllocatorRef v4 = v16;
      }
    }
  }
  else
  {
    if (v7 == 2)
    {
      uint64_t Node = cloneQueryNode(*(void *)(a1 + 24), 0);
      goto LABEL_13;
    }
    if (v7 == 3)
    {
      uint64_t v8 = *(void **)(a1 + 24);
      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = 0x40000000;
      v18[2] = __db_query_tree_apply_block_block_invoke;
      void v18[3] = &unk_1E6348598;
      v18[4] = &__block_literal_global_21_12478;
      uint64_t Node = db_query_tree_apply_block_with_meta(v8, (uint64_t)v18, (uint64_t)&__block_literal_global_25);
LABEL_13:
      *((void *)v4 + 3) = Node;
    }
  }
  *((unsigned char *)v4 + 15) = *(unsigned char *)(a1 + 15);
  return v4;
}

uint64_t suspendOthers(SISearchCtx *a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(SISearchCtx *))(*(void *)a1 + 16))(a1);
  if ((result & 1) == 0)
  {
    if (*((int *)a1 + 76) < -1)
    {
      LODWORD(v3) = 0;
    }
    else
    {
      uint64_t v3 = 0;
      uint64_t v4 = -2;
      do
      {
        if (*(void *)(*((void *)a1 + 3) + 8 * (v4 + 2) + 1008))
        {
          int v5 = *__error();
          long long v6 = _SILogForLogForCategory(1);
          os_log_type_t v7 = 2 * (dword_1E9FC90A8 < 4);
          if (os_log_type_enabled(v6, v7))
          {
            *(_DWORD *)long long buf = 67109120;
            int v34 = v4 + 2;
            _os_log_impl(&dword_1BD672000, v6, v7, "Suspending root query scheduler(%d)", buf, 8u);
          }
          uint64_t result = (uint64_t)__error();
          *(_DWORD *)uint64_t result = v5;
          uint64_t v8 = **(void ***)(*((void *)a1 + 3) + 8 * (v4 + 2) + 1008);
          while (v8)
          {
            uint64_t result = (uint64_t)v8;
            uint64_t v8 = (void *)*v8;
            if (!v8)
            {
              int v9 = (char *)a1 + 8 * v3;
              if (*((void *)v9 + 39))
              {
                uint64_t v15 = __si_assert_copy_extra_329();
                __message_assert_333((uint64_t)v15, v16, v17, v18, v19, v20, v21, v22, (char)"SISearchCtx.cpp");
                free(v15);
                if (__valid_fs(-1)) {
                  uint64_t v23 = 2989;
                }
                else {
                  uint64_t v23 = 3072;
                }
                *(_DWORD *)uint64_t v23 = -559038737;
                abort();
              }
              int v10 = v9 + 312;
              uint64_t result = (uint64_t)si_scheduler_suspend_async(result);
              void *v10 = result;
              break;
            }
          }
        }
        ++v4;
        ++v3;
      }
      while (v4 < *((int *)a1 + 76));
    }
    uint64_t v11 = *(void ***)(*((void *)a1 + 3) + 1072);
    if (v11)
    {
      uint64_t v12 = *v11;
      while (v12)
      {
        uint64_t result = (uint64_t)v12;
        uint64_t v12 = (void *)*v12;
        if (!v12)
        {
          int v13 = (char *)a1 + 8 * v3;
          if (*((void *)v13 + 39) || v3 >= 5)
          {
            uint64_t v24 = __si_assert_copy_extra_329();
            __message_assert_333((uint64_t)v24, v25, v26, v27, v28, v29, v30, v31, (char)"SISearchCtx.cpp");
            free(v24);
            if (__valid_fs(-1)) {
              uint64_t v32 = 2989;
            }
            else {
              uint64_t v32 = 3072;
            }
            *(_DWORD *)uint64_t v32 = -559038737;
            abort();
          }
          uint64_t v14 = v13 + 312;
          uint64_t result = (uint64_t)si_scheduler_suspend_async(result);
          *uint64_t v14 = result;
          return result;
        }
      }
    }
  }
  return result;
}

unsigned int *si_scheduler_suspend_async(uint64_t a1)
{
  if (!a1 || *(_DWORD *)(a1 + 96)) {
    return 0;
  }
  char v2 = (unsigned int *)malloc_type_calloc(1uLL, 0x30uLL, 0x10A0040B618E767uLL);
  atomic_store(1u, v2);
  *((void *)v2 + 1) = a1;
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  int v3 = *(_DWORD *)(a1 + 108);
  if (v3)
  {
    *(_DWORD *)(a1 + 108) = v3 + 1;
    *((unsigned char *)v2 + 4) = 1;
  }
  else
  {
    *((void *)v2 + 2) = *(void *)(a1 + 136);
    *(void *)(a1 + 136) = v2;
    atomic_fetch_add((atomic_uint *volatile)v2, 1u);
    if (!*((void *)v2 + 2) && !*(_DWORD *)(a1 + 112)) {
      _scheduler_suspension_locked(a1);
    }
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v2;
}

void _scheduler_suspension_locked(uint64_t a1)
{
  atomic_fetch_add((atomic_uint *volatile)(a1 + 88), 1u);
  uint64_t v1 = *(NSObject **)(a1 + 152);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___scheduler_suspension_locked_block_invoke;
  block[3] = &__block_descriptor_tmp_69;
  block[4] = a1;
  dispatch_barrier_async(v1, block);
}

uint64_t SISearchCtx::fsContext(SISearchCtx *this)
{
  return 0;
}

void L1ComboQueueInit()
{
}

uint64_t si_resultqueue_enqueue(uint64_t a1, int *a2)
{
  uint64_t v4 = countForBatch(a2);
  pthread_mutex_lock((pthread_mutex_t *)(*(void *)a1 + 8));
  int v5 = *(unsigned __int8 *)(a1 + 12);
  if (*(unsigned char *)(a1 + 12)
    || (*(void *)(a1 + 72) += v4,
        si_enqueue_locked(*(void *)a1, (uint64_t)a2),
        (os_log_type_t v7 = *(void (**)(uint64_t, void))(a1 + 48)) == 0)
    || *(_DWORD *)(a1 + 84))
  {
    pthread_mutex_unlock((pthread_mutex_t *)(*(void *)a1 + 8));
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 56);
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    pthread_mutex_unlock((pthread_mutex_t *)(*(void *)a1 + 8));
    v7(v8, 0);
  }
  return v5 ^ 1u;
}

int *si_enqueue_locked(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unsigned int *)(a1 + 128);
  uint64_t v3 = *(unsigned int *)(a1 + 120);
  if ((-(int)v3 & v2) != 0 || (*(_DWORD *)(a1 + 124) & ~(v3 - 1)) != 0)
  {
    uint64_t v12 = __si_assert_copy_extra_329();
    uint64_t v20 = v12;
    goto LABEL_17;
  }
  uint64_t result = *(int **)(a1 + 136);
  if (*(void *)&result[2 * v2])
  {
    *(_DWORD *)(a1 + 120) = 2 * v3;
    os_log_type_t v7 = (char *)malloc_type_realloc(result, 8 * (2 * v3), 0x80040B8603338uLL);
    *(void *)(a1 + 136) = v7;
    memcpy(&v7[8 * v3], v7, 8 * *(unsigned int *)(a1 + 124));
    uint64_t v8 = *(unsigned int *)(a1 + 124);
    *(_DWORD *)(a1 + 128) = (*(_DWORD *)(a1 + 120) - 1) & (v8 + v3);
    bzero(*(void **)(a1 + 136), 8 * v8);
    bzero((void *)(*(void *)(a1 + 136) + 8 * *(unsigned int *)(a1 + 128)), 8 * (*(_DWORD *)(a1 + 120) - *(_DWORD *)(a1 + 128)));
    uint64_t result = *(int **)(a1 + 136);
    uint64_t v2 = *(unsigned int *)(a1 + 128);
  }
  *(void *)&result[2 * v2] = a2;
  int v9 = v2 + 1;
  *(_DWORD *)(a1 + 128) = v2 + 1;
  if (gSILogLevels[0] >= 5)
  {
    int v21 = *__error();
    uint64_t v22 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = *(_DWORD *)(a1 + 124);
      int v24 = *(_DWORD *)(a1 + 128);
      *(_DWORD *)long long buf = 67109376;
      int v27 = v23;
      __int16 v28 = 1024;
      int v29 = v24;
      _os_log_impl(&dword_1BD672000, v22, OS_LOG_TYPE_DEFAULT, "Enqueueing result: %d %d\n", buf, 0xEu);
    }
    uint64_t result = __error();
    int *result = v21;
    int v9 = *(_DWORD *)(a1 + 128);
  }
  int v10 = *(_DWORD *)(a1 + 120) - 1;
  int v11 = v9 & v10;
  *(_DWORD *)(a1 + 128) = v11;
  if (*(_DWORD *)(a1 + 132))
  {
    uint64_t result = (int *)pthread_cond_broadcast((pthread_cond_t *)(a1 + 72));
    int v11 = *(_DWORD *)(a1 + 128);
    int v10 = *(_DWORD *)(a1 + 120) - 1;
  }
  if ((v11 & ~v10) != 0 || (*(_DWORD *)(a1 + 124) & ~v10) != 0)
  {
    uint64_t v12 = __si_assert_copy_extra_329();
    uint64_t v20 = v12;
LABEL_17:
    __message_assert_333((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19, (char)"SISimpleQueue.c");
    free(v20);
    if (__valid_fs(-1)) {
      uint64_t v25 = 2989;
    }
    else {
      uint64_t v25 = 3072;
    }
    *(_DWORD *)uint64_t v25 = -559038737;
    abort();
  }
  return result;
}

uint64_t currentCategoryCount(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 2064)) {
    return 22;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&group_assignment_lock);
  v4.location = 0;
  v4.length = 256;
  CFIndex LastIndexOfBit = CFBitVectorGetLastIndexOfBit(*(CFBitVectorRef *)(a1 + 2088), v4, 1u);
  os_unfair_lock_unlock((os_unfair_lock_t)&group_assignment_lock);
  if (LastIndexOfBit == -1) {
    return 1;
  }
  else {
    return (LastIndexOfBit + 1);
  }
}

uint64_t _page_delete_obj_by_oid_and_type(uint64_t a1, int64_t a2, unsigned int a3, unsigned int a4, size_t __nbyte, __int16 a6)
{
  int v6 = __nbyte;
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  __dst = 0;
  value_out = 0;
  CFNumberRef v69 = 0;
  uint64_t v70 = 0;
  int v11 = a6 & 0x4000;
  uint64_t v12 = _page_fetch_with_fd(a1, &value_out, a4, __nbyte, v11, buf, 0xFFFFFFFFLL, 0);
  if (!v12)
  {
    int v13 = *((_DWORD *)value_out + 3);
    if ((v13 & 0xF0) != 0)
    {
      int v60 = *__error();
      CFNumberRef v61 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "_page_delete_obj_by_oid_and_type";
        __int16 v74 = 1024;
        int v75 = 5704;
        __int16 v76 = 1024;
        LODWORD(v77) = a4;
        _os_log_error_impl(&dword_1BD672000, v61, OS_LOG_TYPE_ERROR, "%s:%d: page_delete_obj: ERR: tried to read attr name table data! pgnum 0x%x\n", buf, 0x18u);
      }
      *__error() = v60;
      CFNumberRef v62 = __si_assert_copy_extra_2445(0, -1);
      CFNumberRef v63 = v62;
      CFNumberRef v64 = "";
      if (v62) {
        CFNumberRef v64 = v62;
      }
      __message_assert("%s:%u: Unexpected code path %s ", "sdb2.c", 5705, v64);
    }
    else
    {
      if ((v13 & 8) == 0)
      {
        int slot_for_oid_and_type = find_slot_for_oid_and_type(a1, (uint64_t)value_out, a2, a3, (unint64_t *)&__dst, &v70, 1);
        uint64_t v15 = *((int *)value_out + 2);
        uint64_t v16 = (char *)value_out + v15;
        CFNumberRef v69 = (char *)value_out + v15;
        if (slot_for_oid_and_type == 2) {
          return 2;
        }
        uint64_t v17 = __dst;
        uint64_t v18 = (char *)__dst + 4;
        unint64_t v19 = *((unsigned __int8 *)__dst + 4);
        if (*((char *)__dst + 4) < 0)
        {
          unsigned int v21 = *((unsigned __int8 *)__dst + 4);
          if (v21 > 0xBF)
          {
            if (v21 > 0xDF)
            {
              if (v21 > 0xEF)
              {
                if (v21 > 0xF7)
                {
                  if (v21 > 0xFB)
                  {
                    if (v21 > 0xFD)
                    {
                      if (v21 == 255)
                      {
                        unint64_t v19 = *(void *)((char *)__dst + 5);
                        uint64_t v20 = 9;
                      }
                      else
                      {
                        unint64_t v19 = ((unint64_t)*((unsigned __int8 *)__dst + 5) << 48) | ((unint64_t)*((unsigned __int8 *)__dst + 6) << 40) | ((unint64_t)*((unsigned __int8 *)__dst + 7) << 32) | ((unint64_t)*((unsigned __int8 *)__dst + 8) << 24) | ((unint64_t)*((unsigned __int8 *)__dst + 9) << 16) | ((unint64_t)*((unsigned __int8 *)__dst + 10) << 8) | *((unsigned __int8 *)__dst + 11);
                        uint64_t v20 = 8;
                      }
                    }
                    else
                    {
                      unint64_t v19 = ((v19 & 1) << 48) | ((unint64_t)*((unsigned __int8 *)__dst + 5) << 40) | ((unint64_t)*((unsigned __int8 *)__dst + 6) << 32) | ((unint64_t)*((unsigned __int8 *)__dst + 7) << 24) | ((unint64_t)*((unsigned __int8 *)__dst + 8) << 16) | ((unint64_t)*((unsigned __int8 *)__dst + 9) << 8) | *((unsigned __int8 *)__dst + 10);
                      uint64_t v20 = 7;
                    }
                  }
                  else
                  {
                    unint64_t v19 = ((v19 & 3) << 40) | ((unint64_t)*((unsigned __int8 *)__dst + 5) << 32) | ((unint64_t)*((unsigned __int8 *)__dst + 6) << 24) | ((unint64_t)*((unsigned __int8 *)__dst + 7) << 16) | ((unint64_t)*((unsigned __int8 *)__dst + 8) << 8) | *((unsigned __int8 *)__dst + 9);
                    uint64_t v20 = 6;
                  }
                }
                else
                {
                  unint64_t v19 = ((v19 & 7) << 32) | ((unint64_t)*((unsigned __int8 *)__dst + 5) << 24) | ((unint64_t)*((unsigned __int8 *)__dst + 6) << 16) | ((unint64_t)*((unsigned __int8 *)__dst + 7) << 8) | *((unsigned __int8 *)__dst + 8);
                  uint64_t v20 = 5;
                }
              }
              else
              {
                unint64_t v19 = ((v19 & 0xF) << 24) | ((unint64_t)*((unsigned __int8 *)__dst + 5) << 16) | ((unint64_t)*((unsigned __int8 *)__dst + 6) << 8) | *((unsigned __int8 *)__dst + 7);
                uint64_t v20 = 4;
              }
            }
            else
            {
              unint64_t v19 = ((v19 & 0x1F) << 16) | ((unint64_t)*((unsigned __int8 *)__dst + 5) << 8) | *((unsigned __int8 *)__dst + 6);
              uint64_t v20 = 3;
            }
          }
          else
          {
            unint64_t v19 = *((unsigned __int8 *)__dst + 5) | ((v19 & 0x3F) << 8);
            uint64_t v20 = 2;
          }
        }
        else
        {
          uint64_t v20 = 1;
        }
        unsigned int v22 = v18[v20];
        if (v18[v20] < 0)
        {
          if (v22 >= 0xC0)
          {
            if (v22 >= 0xE0)
            {
              CFNumberRef v54 = __si_assert_copy_extra_2445(0, -1);
              CFNumberRef v55 = v54;
              CFNumberRef v56 = "";
              if (v54) {
                CFNumberRef v56 = v54;
              }
              __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v56);
              goto LABEL_91;
            }
            uint64_t v23 = v20 + 2;
          }
          else
          {
            uint64_t v23 = v20 + 1;
          }
          unsigned int v22 = v18[v23];
        }
        if (__dst >= v16 || (*(unsigned char *)(a1 + 804) & (v22 >> 5) & 1) != a3 || v19 != a2)
        {
          page_release(a1, value_out, a4, 0, 0);
          return 2;
        }
        uint64_t v26 = (*(_DWORD *)__dst + 4);
        int v27 = (char *)__dst + v26;
        int v28 = *((_DWORD *)value_out + 1);
        *((_DWORD *)value_out + 2) = v15 - v26;
        memmove(v17, (char *)v17 + (*v17 + 4), v16 - ((char *)v17 + (*v17 + 4)));
        set_offset_hint(a1, (uint64_t)value_out, v70);
        uint64_t v32 = (int *)value_out;
        if (v27 == v16)
        {
          uint64_t v33 = *(void *)(a1 + 928);
          if (!value_out)
          {
            LODWORD(v35) = 4;
LABEL_45:
            *(_DWORD *)(v33 + 224) = v35;
            goto LABEL_46;
          }
          uint64_t v34 = *(unsigned int *)(v33 + 220);
          if ((int)v34 >= 1)
          {
            uint64_t v35 = 0;
            CFIndex v36 = (void **)(v33 + 272);
            while (*v36 != value_out)
            {
              ++v35;
              v36 += 6;
              if (v34 == v35) {
                goto LABEL_46;
              }
            }
            goto LABEL_45;
          }
        }
LABEL_46:
        if ((v32[3] & 0xC) != 0)
        {
          page_resize(a1, &value_out, 0, v28 - v26, (unint64_t *)&__dst, v29, v30, v31, (uint64_t)&v69);
          uint64_t v32 = (int *)value_out;
        }
        uint64_t v37 = v32[2];
        if (v27 != v16)
        {
          if (v37 == 20)
          {
            CFNumberRef v49 = __si_assert_copy_extra_2445(*(_DWORD **)(a1 + 848), -1);
            uint64_t v50 = v49;
            uint64_t v51 = "";
            if (v49) {
              uint64_t v51 = v49;
            }
            __message_assert("%s:%u: failed assertion '%s' %s Unexpected", "sdb2.c", 5850, "dbp->used_bytes != sizeof(db_page)", v51);
            free(v50);
            if (__valid_fsp(*(_DWORD **)(a1 + 848)))
            {
              MEMORY[0xBAD] = -559038737;
              abort();
            }
            MEMORY[0xC00] = -559038737;
            abort();
          }
          if (dword_1E9FC90C0 >= 5)
          {
            int v52 = *__error();
            uint64_t v53 = _SILogForLogForCategory(7);
            if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 136315650;
              *(void *)&uint8_t buf[4] = a1 + 324;
              __int16 v74 = 1024;
              int v75 = a4;
              __int16 v76 = 2048;
              int64_t v77 = a2;
              _os_log_impl(&dword_1BD672000, v53, OS_LOG_TYPE_DEFAULT, "%s : no map update for deleting at pgnum %d (%.16llx)\n", buf, 0x1Cu);
            }
            *__error() = v52;
          }
LABEL_51:
          unsigned int v38 = 1;
LABEL_54:
          *(_DWORD *)(*(void *)(a1 + 928) + 224) = 4;
          page_release(a1, value_out, a4, v38, 0);
          uint64_t v12 = 0;
          --*(void *)(a1 + 20);
          return v12;
        }
        if (v37 == 20)
        {
          *(_DWORD *)long long buf = 0;
          map_delete((void *)a1, a2, a3);
          page_free(a1, a4, buf, v11);
          unsigned int v38 = *(_DWORD *)buf == 0;
          goto LABEL_54;
        }
        uint64_t v40 = v70;
        if (v70) {
          goto LABEL_62;
        }
        CFTypeID v41 = v32 + 5;
        __dst = v32 + 5;
        CFNumberRef v69 = (char *)v32 + v37;
        if ((int)v37 < 21)
        {
          uint64_t v42 = 0;
        }
        else
        {
          do
          {
            uint64_t v42 = (uint64_t)v41;
            CFTypeID v41 = (_DWORD *)((char *)v41 + (*v41 + 4));
          }
          while (v41 < (int *)((char *)v32 + v37));
          uint64_t v70 = v42;
          __dst = v41;
        }
        set_offset_hint(a1, (uint64_t)v32, v42);
        uint64_t v40 = v70;
        if (v70)
        {
LABEL_62:
          uint64_t v43 = v40 + 4;
          unint64_t v44 = *(unsigned __int8 *)(v40 + 4);
          if (*(char *)(v40 + 4) < 0)
          {
            unsigned int v46 = *(unsigned __int8 *)(v40 + 4);
            if (v46 > 0xBF)
            {
              if (v46 > 0xDF)
              {
                if (v46 > 0xEF)
                {
                  if (v46 > 0xF7)
                  {
                    if (v46 > 0xFB)
                    {
                      if (v46 > 0xFD)
                      {
                        if (v46 == 255)
                        {
                          unint64_t v44 = *(void *)(v40 + 5);
                          uint64_t v45 = 9;
                        }
                        else
                        {
                          unint64_t v44 = ((unint64_t)*(unsigned __int8 *)(v40 + 5) << 48) | ((unint64_t)*(unsigned __int8 *)(v40 + 6) << 40) | ((unint64_t)*(unsigned __int8 *)(v40 + 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v40 + 8) << 24) | ((unint64_t)*(unsigned __int8 *)(v40 + 9) << 16) | ((unint64_t)*(unsigned __int8 *)(v40 + 10) << 8) | *(unsigned __int8 *)(v40 + 11);
                          uint64_t v45 = 8;
                        }
                      }
                      else
                      {
                        unint64_t v44 = ((v44 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(v40 + 5) << 40) | ((unint64_t)*(unsigned __int8 *)(v40 + 6) << 32) | ((unint64_t)*(unsigned __int8 *)(v40 + 7) << 24) | ((unint64_t)*(unsigned __int8 *)(v40 + 8) << 16) | ((unint64_t)*(unsigned __int8 *)(v40 + 9) << 8) | *(unsigned __int8 *)(v40 + 10);
                        uint64_t v45 = 7;
                      }
                    }
                    else
                    {
                      unint64_t v44 = ((v44 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(v40 + 5) << 32) | ((unint64_t)*(unsigned __int8 *)(v40 + 6) << 24) | ((unint64_t)*(unsigned __int8 *)(v40 + 7) << 16) | ((unint64_t)*(unsigned __int8 *)(v40 + 8) << 8) | *(unsigned __int8 *)(v40 + 9);
                      uint64_t v45 = 6;
                    }
                  }
                  else
                  {
                    unint64_t v44 = ((v44 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v40 + 5) << 24) | ((unint64_t)*(unsigned __int8 *)(v40 + 6) << 16) | ((unint64_t)*(unsigned __int8 *)(v40 + 7) << 8) | *(unsigned __int8 *)(v40 + 8);
                    uint64_t v45 = 5;
                  }
                }
                else
                {
                  unint64_t v44 = ((v44 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(v40 + 5) << 16) | ((unint64_t)*(unsigned __int8 *)(v40 + 6) << 8) | *(unsigned __int8 *)(v40 + 7);
                  uint64_t v45 = 4;
                }
              }
              else
              {
                unint64_t v44 = ((v44 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(v40 + 5) << 8) | *(unsigned __int8 *)(v40 + 6);
                uint64_t v45 = 3;
              }
            }
            else
            {
              unint64_t v44 = *(unsigned __int8 *)(v40 + 5) | ((v44 & 0x3F) << 8);
              uint64_t v45 = 2;
            }
          }
          else
          {
            uint64_t v45 = 1;
          }
          *(void *)long long buf = v45;
          unsigned int VInt16 = ldb_readVInt16(v43, (uint64_t *)buf);
          uint64_t v48 = map_update(a1, a4, v6, a2, v44, a3, *(_DWORD *)(a1 + 804) & (VInt16 >> 5) & 1, 0);
          if (v48)
          {
            uint64_t v12 = v48;
            page_release(a1, value_out, a4, 1u, 0);
            return v12;
          }
          goto LABEL_51;
        }
        CFNumberRef v58 = __si_assert_copy_extra_2445(0, -1);
        CFNumberRef v55 = v58;
        CFNumberRef v59 = "";
        if (v58) {
          CFNumberRef v59 = v58;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 5823, "prev", v59);
LABEL_91:
        free(v55);
        if (!__valid_fs(-1))
        {
          uint64_t v57 = 3072;
LABEL_95:
          *(_DWORD *)uint64_t v57 = -559038737;
          abort();
        }
LABEL_92:
        uint64_t v57 = 2989;
        goto LABEL_95;
      }
      int v65 = *__error();
      CFNumberRef v66 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "_page_delete_obj_by_oid_and_type";
        __int16 v74 = 1024;
        int v75 = 5710;
        __int16 v76 = 1024;
        LODWORD(v77) = a4;
        _os_log_error_impl(&dword_1BD672000, v66, OS_LOG_TYPE_ERROR, "%s:%d: page_delete_obj: ERR: page is still compressed! pgnum 0x%x\n", buf, 0x18u);
      }
      *__error() = v65;
      CFNumberRef v67 = __si_assert_copy_extra_2445(0, -1);
      CFNumberRef v63 = v67;
      CFNumberRef v68 = "";
      if (v67) {
        CFNumberRef v68 = v67;
      }
      __message_assert("%s:%u: Unexpected code path %s ", "sdb2.c", 5711, v68);
    }
    free(v63);
    goto LABEL_92;
  }
  return v12;
}

uint64_t find_slot_for_oid_and_type(uint64_t a1, uint64_t a2, int64_t a3, unsigned int a4, unint64_t *a5, void *a6, int a7)
{
  uint64_t v13 = *(void *)(a1 + 928);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(v13 + 8));
  uint64_t v14 = *(unsigned int *)(v13 + 220);
  CFNumberRef v71 = a6;
  if ((int)v14 < 1)
  {
LABEL_9:
    uint64_t v18 = 0;
    ++*(_DWORD *)(v13 + 244);
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = 272;
    while (*(void *)(v13 + v16) != a2 || !*(_DWORD *)(v13 + 4 * v15 + 252))
    {
      ++v15;
      v16 += 48;
      if (v14 == v15) {
        goto LABEL_9;
      }
    }
    int v17 = *(_DWORD *)(v13 + 48 * v15 + 304) - a4;
    if (v17)
    {
      if (v17 > 0) {
        goto LABEL_8;
      }
    }
    else if (*(void *)(v13 + 48 * v15 + 296) - a3 > 0)
    {
LABEL_8:
      uint64_t v18 = 0;
      ++*(_DWORD *)(v13 + 240);
      goto LABEL_10;
    }
    ++*(_DWORD *)(v13 + 236);
    uint64_t v18 = *(void *)(v13 + 48 * v15 + 312);
  }
LABEL_10:
  pthread_rwlock_unlock((pthread_rwlock_t *)(v13 + 8));
  uint64_t v19 = a2 + 20;
  unint64_t v20 = a2 + 20 + v18;
  uint64_t v21 = *(int *)(a2 + 8);
  unint64_t v22 = v20 + 4;
  int64_t v23 = *(unsigned __int8 *)(v20 + 4);
  if ((*(unsigned char *)(v20 + 4) & 0x80) != 0)
  {
    if (v23 > 0xBF)
    {
      if (v23 > 0xDF)
      {
        if (v23 > 0xEF)
        {
          if (v23 > 0xF7)
          {
            if (v23 > 0xFB)
            {
              if (v23 > 0xFD)
              {
                if (v23 == 255)
                {
                  int64_t v23 = *(void *)(v20 + 5);
                  uint64_t v24 = 9;
                }
                else
                {
                  int64_t v23 = ((unint64_t)*(unsigned __int8 *)(v20 + 5) << 48) | ((unint64_t)*(unsigned __int8 *)(v20 + 6) << 40) | ((unint64_t)*(unsigned __int8 *)(v20 + 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v20 + 8) << 24) | ((unint64_t)*(unsigned __int8 *)(v20 + 9) << 16) | ((unint64_t)*(unsigned __int8 *)(v20 + 10) << 8) | *(unsigned __int8 *)(v20 + 11);
                  uint64_t v24 = 8;
                }
              }
              else
              {
                int64_t v23 = ((unint64_t)(v23 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(v20 + 5) << 40) | ((unint64_t)*(unsigned __int8 *)(v20 + 6) << 32) | ((unint64_t)*(unsigned __int8 *)(v20 + 7) << 24) | ((unint64_t)*(unsigned __int8 *)(v20 + 8) << 16) | ((unint64_t)*(unsigned __int8 *)(v20 + 9) << 8) | *(unsigned __int8 *)(v20 + 10);
                uint64_t v24 = 7;
              }
            }
            else
            {
              int64_t v23 = ((unint64_t)(v23 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(v20 + 5) << 32) | ((unint64_t)*(unsigned __int8 *)(v20 + 6) << 24) | ((unint64_t)*(unsigned __int8 *)(v20 + 7) << 16) | ((unint64_t)*(unsigned __int8 *)(v20 + 8) << 8) | *(unsigned __int8 *)(v20 + 9);
              uint64_t v24 = 6;
            }
          }
          else
          {
            int64_t v23 = ((unint64_t)(v23 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v20 + 5) << 24) | ((unint64_t)*(unsigned __int8 *)(v20 + 6) << 16) | ((unint64_t)*(unsigned __int8 *)(v20 + 7) << 8) | *(unsigned __int8 *)(v20 + 8);
            uint64_t v24 = 5;
          }
        }
        else
        {
          int64_t v23 = ((unint64_t)(v23 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(v20 + 5) << 16) | ((unint64_t)*(unsigned __int8 *)(v20 + 6) << 8) | *(unsigned __int8 *)(v20 + 7);
          uint64_t v24 = 4;
        }
      }
      else
      {
        int64_t v23 = ((unint64_t)(v23 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(v20 + 5) << 8) | *(unsigned __int8 *)(v20 + 6);
        uint64_t v24 = 3;
      }
    }
    else
    {
      int64_t v23 = *(unsigned __int8 *)(v20 + 5) | ((unint64_t)(v23 & 0x3F) << 8);
      uint64_t v24 = 2;
    }
  }
  else
  {
    uint64_t v24 = 1;
  }
  unsigned int v25 = *(unsigned __int8 *)(v22 + v24);
  if (*(char *)(v22 + v24) < 0)
  {
    if (v25 >= 0xC0)
    {
      if (v25 >= 0xE0) {
        goto LABEL_182;
      }
      uint64_t v26 = v24 + 2;
    }
    else
    {
      uint64_t v26 = v24 + 1;
    }
    unsigned int v25 = *(unsigned __int8 *)(v22 + v26);
  }
  int v27 = *(_DWORD *)(a1 + 804);
  unsigned int v28 = v27 & (v25 >> 5) & 1;
  if (v18 && v28 > a4)
  {
    uint64_t v29 = a2 + 24;
    int64_t v23 = *(unsigned __int8 *)(a2 + 24);
    if (*(char *)(a2 + 24) < 0)
    {
      unsigned int v31 = *(unsigned __int8 *)(a2 + 24);
      if (v31 > 0xBF)
      {
        if (v31 > 0xDF)
        {
          if (v31 > 0xEF)
          {
            if (v31 > 0xF7)
            {
              if (v31 > 0xFB)
              {
                if (v31 > 0xFD)
                {
                  if (v31 == 255)
                  {
                    int64_t v23 = *(void *)(a2 + 25);
                    uint64_t v30 = 9;
                  }
                  else
                  {
                    int64_t v23 = ((unint64_t)*(unsigned __int8 *)(a2 + 25) << 48) | ((unint64_t)*(unsigned __int8 *)(a2 + 26) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 27) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 28) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 29) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 30) << 8) | *(unsigned __int8 *)(a2 + 31);
                    uint64_t v30 = 8;
                  }
                }
                else
                {
                  int64_t v23 = ((unint64_t)(v23 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(a2 + 25) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 26) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 27) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 28) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 29) << 8) | *(unsigned __int8 *)(a2 + 30);
                  uint64_t v30 = 7;
                }
              }
              else
              {
                int64_t v23 = ((unint64_t)(v23 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 25) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 26) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 27) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 28) << 8) | *(unsigned __int8 *)(a2 + 29);
                uint64_t v30 = 6;
              }
            }
            else
            {
              int64_t v23 = ((unint64_t)(v23 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 25) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 26) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 27) << 8) | *(unsigned __int8 *)(a2 + 28);
              uint64_t v30 = 5;
            }
          }
          else
          {
            int64_t v23 = ((unint64_t)(v23 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 25) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 26) << 8) | *(unsigned __int8 *)(a2 + 27);
            uint64_t v30 = 4;
          }
        }
        else
        {
          int64_t v23 = ((unint64_t)(v23 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 25) << 8) | *(unsigned __int8 *)(a2 + 26);
          uint64_t v30 = 3;
        }
      }
      else
      {
        int64_t v23 = *(unsigned __int8 *)(a2 + 25) | ((unint64_t)(v23 & 0x3F) << 8);
        uint64_t v30 = 2;
      }
    }
    else
    {
      uint64_t v30 = 1;
    }
    unsigned int v32 = *(unsigned __int8 *)(v29 + v30);
    if (*(char *)(v29 + v30) < 0)
    {
      if (v32 >= 0xC0)
      {
        if (v32 >= 0xE0)
        {
LABEL_129:
          CFNumberRef v55 = __si_assert_copy_extra_2445(0, -1);
          CFNumberRef v56 = v55;
          uint64_t v57 = "";
          if (v55) {
            uint64_t v57 = v55;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v57);
          free(v56);
          if (__valid_fs(-1))
          {
            uint64_t v53 = 2989;
            goto LABEL_136;
          }
          goto LABEL_135;
        }
        uint64_t v33 = v30 + 2;
      }
      else
      {
        uint64_t v33 = v30 + 1;
      }
      unsigned int v32 = *(unsigned __int8 *)(v29 + v33);
    }
    unsigned int v28 = v27 & (v32 >> 5) & 1;
    unint64_t v20 = a2 + 20;
  }
  uint64_t v34 = (const void *)(a2 + v21);
  if (v20 >= a2 + v21)
  {
    uint64_t i = 0;
    *a5 = v20;
  }
  else
  {
    for (uint64_t i = 0; ; uint64_t i = v38)
    {
      unsigned int v38 = (const void *)v20;
      if (v28 >= a4 && (v28 != a4 || v23 >= a3)) {
        break;
      }
      v20 += (*(_DWORD *)v20 + 4);
      if (v20 >= (unint64_t)v34)
      {
        uint64_t i = v38;
        if (v20 <= (unint64_t)v34) {
          goto LABEL_93;
        }
LABEL_115:
        if (__valid_fs(-1))
        {
          uint64_t v50 = __si_assert_copy_extra_2445(0, -1);
          uint64_t v51 = v50;
          int v52 = "";
          if (v50) {
            int v52 = v50;
          }
          si_analytics_log_2842("%s:%u: failed assertion '%s' %s dbo ends past end of page ([%p, %p] > [%p, %p])", "sdb2.c", 4985, "dbo<=end", v52, i, (const void *)v20, (const void *)(a2 + 20), v34);
          free(v51);
          uint64_t v53 = 2816;
LABEL_136:
          *(_DWORD *)uint64_t v53 = -559038737;
          abort();
        }
LABEL_135:
        uint64_t v53 = 3072;
        goto LABEL_136;
      }
      unint64_t v39 = v20 + 4;
      int64_t v23 = *(unsigned __int8 *)(v20 + 4);
      if (*(char *)(v20 + 4) < 0)
      {
        unsigned int v41 = *(unsigned __int8 *)(v20 + 4);
        if (v41 > 0xBF)
        {
          if (v41 > 0xDF)
          {
            if (v41 > 0xEF)
            {
              if (v41 > 0xF7)
              {
                if (v41 > 0xFB)
                {
                  if (v41 > 0xFD)
                  {
                    if (v41 == 255)
                    {
                      int64_t v23 = *(void *)(v20 + 5);
                      uint64_t v40 = 9;
                    }
                    else
                    {
                      int64_t v23 = ((unint64_t)*(unsigned __int8 *)(v20 + 5) << 48) | ((unint64_t)*(unsigned __int8 *)(v20 + 6) << 40) | ((unint64_t)*(unsigned __int8 *)(v20 + 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v20 + 8) << 24) | ((unint64_t)*(unsigned __int8 *)(v20 + 9) << 16) | ((unint64_t)*(unsigned __int8 *)(v20 + 10) << 8) | *(unsigned __int8 *)(v20 + 11);
                      uint64_t v40 = 8;
                    }
                  }
                  else
                  {
                    int64_t v23 = ((unint64_t)(v23 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(v20 + 5) << 40) | ((unint64_t)*(unsigned __int8 *)(v20 + 6) << 32) | ((unint64_t)*(unsigned __int8 *)(v20 + 7) << 24) | ((unint64_t)*(unsigned __int8 *)(v20 + 8) << 16) | ((unint64_t)*(unsigned __int8 *)(v20 + 9) << 8) | *(unsigned __int8 *)(v20 + 10);
                    uint64_t v40 = 7;
                  }
                }
                else
                {
                  int64_t v23 = ((unint64_t)(v23 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(v20 + 5) << 32) | ((unint64_t)*(unsigned __int8 *)(v20 + 6) << 24) | ((unint64_t)*(unsigned __int8 *)(v20 + 7) << 16) | ((unint64_t)*(unsigned __int8 *)(v20 + 8) << 8) | *(unsigned __int8 *)(v20 + 9);
                  uint64_t v40 = 6;
                }
              }
              else
              {
                int64_t v23 = ((unint64_t)(v23 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v20 + 5) << 24) | ((unint64_t)*(unsigned __int8 *)(v20 + 6) << 16) | ((unint64_t)*(unsigned __int8 *)(v20 + 7) << 8) | *(unsigned __int8 *)(v20 + 8);
                uint64_t v40 = 5;
              }
            }
            else
            {
              int64_t v23 = ((unint64_t)(v23 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(v20 + 5) << 16) | ((unint64_t)*(unsigned __int8 *)(v20 + 6) << 8) | *(unsigned __int8 *)(v20 + 7);
              uint64_t v40 = 4;
            }
          }
          else
          {
            int64_t v23 = ((unint64_t)(v23 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(v20 + 5) << 8) | *(unsigned __int8 *)(v20 + 6);
            uint64_t v40 = 3;
          }
        }
        else
        {
          int64_t v23 = *(unsigned __int8 *)(v20 + 5) | ((unint64_t)(v23 & 0x3F) << 8);
          uint64_t v40 = 2;
        }
      }
      else
      {
        uint64_t v40 = 1;
      }
      unsigned int v37 = *(unsigned __int8 *)(v39 + v40);
      if (*(char *)(v39 + v40) < 0)
      {
        if (v37 < 0xC0)
        {
          uint64_t v36 = v40 + 1;
        }
        else
        {
          if (v37 >= 0xE0) {
            goto LABEL_129;
          }
          uint64_t v36 = v40 + 2;
        }
        unsigned int v37 = *(unsigned __int8 *)(v39 + v36);
      }
      unsigned int v28 = v27 & (v37 >> 5) & 1;
    }
    if (v20 > (unint64_t)v34) {
      goto LABEL_115;
    }
LABEL_93:
    *a5 = v20;
    if (i)
    {
      set_offset_hint(a1, a2, (uint64_t)i);
      int v42 = 0;
      if (a7 != 2) {
        goto LABEL_100;
      }
      goto LABEL_97;
    }
  }
  int v42 = 1;
  if (a7 != 2) {
    goto LABEL_100;
  }
LABEL_97:
  if (v20 < (unint64_t)v34 && v23 == a3) {
    return 17;
  }
LABEL_100:
  BOOL v45 = v20 < (unint64_t)v34 && v23 == a3;
  if (a7 == 1 && !v45) {
    return 2;
  }
  if (!v71) {
    return 0;
  }
  if (v42)
  {
    uint64_t v46 = *(int *)(a2 + 8);
    if ((int)v46 >= 21)
    {
      uint64_t v47 = a2 + 24;
      int64_t v48 = *(unsigned __int8 *)(a2 + 24);
      if (*(char *)(a2 + 24) < 0)
      {
        unsigned int v54 = *(unsigned __int8 *)(a2 + 24);
        if (v54 > 0xBF)
        {
          if (v54 > 0xDF)
          {
            if (v54 > 0xEF)
            {
              if (v54 > 0xF7)
              {
                if (v54 > 0xFB)
                {
                  if (v54 > 0xFD)
                  {
                    if (v54 == 255)
                    {
                      int64_t v48 = *(void *)(a2 + 25);
                      uint64_t v49 = 9;
                    }
                    else
                    {
                      int64_t v48 = ((unint64_t)*(unsigned __int8 *)(a2 + 25) << 48) | ((unint64_t)*(unsigned __int8 *)(a2 + 26) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 27) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 28) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 29) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 30) << 8) | *(unsigned __int8 *)(a2 + 31);
                      uint64_t v49 = 8;
                    }
                  }
                  else
                  {
                    int64_t v48 = ((unint64_t)(v48 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(a2 + 25) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 26) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 27) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 28) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 29) << 8) | *(unsigned __int8 *)(a2 + 30);
                    uint64_t v49 = 7;
                  }
                }
                else
                {
                  int64_t v48 = ((unint64_t)(v48 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 25) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 26) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 27) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 28) << 8) | *(unsigned __int8 *)(a2 + 29);
                  uint64_t v49 = 6;
                }
              }
              else
              {
                int64_t v48 = ((unint64_t)(v48 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 25) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 26) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 27) << 8) | *(unsigned __int8 *)(a2 + 28);
                uint64_t v49 = 5;
              }
            }
            else
            {
              int64_t v48 = ((unint64_t)(v48 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 25) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 26) << 8) | *(unsigned __int8 *)(a2 + 27);
              uint64_t v49 = 4;
            }
          }
          else
          {
            int64_t v48 = ((unint64_t)(v48 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 25) << 8) | *(unsigned __int8 *)(a2 + 26);
            uint64_t v49 = 3;
          }
        }
        else
        {
          int64_t v48 = *(unsigned __int8 *)(a2 + 25) | ((unint64_t)(v48 & 0x3F) << 8);
          uint64_t v49 = 2;
        }
      }
      else
      {
        uint64_t v49 = 1;
      }
      unsigned int v58 = *(unsigned __int8 *)(v47 + v49);
      if ((*(char *)(v47 + v49) & 0x80000000) == 0)
      {
LABEL_148:
        int v60 = 0;
        unint64_t v61 = a2 + v46;
        while (1)
        {
          uint64_t i = v60;
          int v60 = (const void *)v19;
          unsigned int v62 = *(_DWORD *)(a1 + 804) & (v58 >> 5) & 1;
          if (v62 >= a4 && (v62 != a4 || v48 >= a3)) {
            break;
          }
          uint64_t v64 = (*(_DWORD *)v19 + 4);
          v19 += v64;
          if ((unint64_t)v60 + v64 >= v61)
          {
            uint64_t i = v60;
            goto LABEL_180;
          }
          uint64_t v65 = v19 + 4;
          int64_t v48 = *(unsigned __int8 *)(v19 + 4);
          if (*(char *)(v19 + 4) < 0)
          {
            unsigned int v67 = *(unsigned __int8 *)(v19 + 4);
            if (v67 > 0xBF)
            {
              if (v67 > 0xDF)
              {
                if (v67 > 0xEF)
                {
                  if (v67 > 0xF7)
                  {
                    if (v67 > 0xFB)
                    {
                      if (v67 > 0xFD)
                      {
                        if (v67 == 255)
                        {
                          int64_t v48 = *(void *)(v19 + 5);
                          uint64_t v66 = 9;
                        }
                        else
                        {
                          int64_t v48 = ((unint64_t)*(unsigned __int8 *)(v19 + 5) << 48) | ((unint64_t)*(unsigned __int8 *)(v19 + 6) << 40) | ((unint64_t)*(unsigned __int8 *)(v19 + 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v19 + 8) << 24) | ((unint64_t)*(unsigned __int8 *)(v19 + 9) << 16) | ((unint64_t)*(unsigned __int8 *)(v19 + 10) << 8) | *(unsigned __int8 *)(v19 + 11);
                          uint64_t v66 = 8;
                        }
                      }
                      else
                      {
                        int64_t v48 = ((unint64_t)(v48 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(v19 + 5) << 40) | ((unint64_t)*(unsigned __int8 *)(v19 + 6) << 32) | ((unint64_t)*(unsigned __int8 *)(v19 + 7) << 24) | ((unint64_t)*(unsigned __int8 *)(v19 + 8) << 16) | ((unint64_t)*(unsigned __int8 *)(v19 + 9) << 8) | *(unsigned __int8 *)(v19 + 10);
                        uint64_t v66 = 7;
                      }
                    }
                    else
                    {
                      int64_t v48 = ((unint64_t)(v48 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(v19 + 5) << 32) | ((unint64_t)*(unsigned __int8 *)(v19 + 6) << 24) | ((unint64_t)*(unsigned __int8 *)(v19 + 7) << 16) | ((unint64_t)*(unsigned __int8 *)(v19 + 8) << 8) | *(unsigned __int8 *)(v19 + 9);
                      uint64_t v66 = 6;
                    }
                  }
                  else
                  {
                    int64_t v48 = ((unint64_t)(v48 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v19 + 5) << 24) | ((unint64_t)*(unsigned __int8 *)(v19 + 6) << 16) | ((unint64_t)*(unsigned __int8 *)(v19 + 7) << 8) | *(unsigned __int8 *)(v19 + 8);
                    uint64_t v66 = 5;
                  }
                }
                else
                {
                  int64_t v48 = ((unint64_t)(v48 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(v19 + 5) << 16) | ((unint64_t)*(unsigned __int8 *)(v19 + 6) << 8) | *(unsigned __int8 *)(v19 + 7);
                  uint64_t v66 = 4;
                }
              }
              else
              {
                int64_t v48 = ((unint64_t)(v48 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(v19 + 5) << 8) | *(unsigned __int8 *)(v19 + 6);
                uint64_t v66 = 3;
              }
            }
            else
            {
              int64_t v48 = *(unsigned __int8 *)(v19 + 5) | ((unint64_t)(v48 & 0x3F) << 8);
              uint64_t v66 = 2;
            }
          }
          else
          {
            uint64_t v66 = 1;
          }
          unsigned int v58 = *(unsigned __int8 *)(v65 + v66);
          if (*(char *)(v65 + v66) < 0)
          {
            if (v58 < 0xC0)
            {
              unsigned int v58 = *(unsigned __int8 *)(v65 + v66 + 1);
            }
            else
            {
              if (v58 >= 0xE0) {
                goto LABEL_182;
              }
              unsigned int v58 = *(unsigned __int8 *)(v65 + v66 + 2);
            }
          }
        }
        if (!i) {
          goto LABEL_181;
        }
LABEL_180:
        set_offset_hint(a1, a2, (uint64_t)i);
        goto LABEL_181;
      }
      if (v58 < 0xC0)
      {
        uint64_t v59 = v49 + 1;
LABEL_147:
        unsigned int v58 = *(unsigned __int8 *)(v47 + v59);
        goto LABEL_148;
      }
      if (v58 < 0xE0)
      {
        uint64_t v59 = v49 + 2;
        goto LABEL_147;
      }
LABEL_182:
      CFNumberRef v68 = __si_assert_copy_extra_2445(0, -1);
      CFNumberRef v69 = v68;
      uint64_t v70 = "";
      if (v68) {
        uint64_t v70 = v68;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v70);
      free(v69);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    uint64_t i = 0;
  }
LABEL_181:
  uint64_t result = 0;
  *CFNumberRef v71 = i;
  return result;
}

uint64_t set_offset_hint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v5 = a3 + 4;
    unint64_t v6 = *(unsigned __int8 *)(a3 + 4);
    if (*(char *)(a3 + 4) < 0)
    {
      unsigned int v13 = *(unsigned __int8 *)(a3 + 4);
      if (v13 > 0xBF)
      {
        if (v13 > 0xDF)
        {
          if (v13 > 0xEF)
          {
            if (v13 > 0xF7)
            {
              if (v13 > 0xFB)
              {
                if (v13 > 0xFD)
                {
                  if (v13 == 255)
                  {
                    unint64_t v6 = *(void *)(a3 + 5);
                    uint64_t v7 = 9;
                  }
                  else
                  {
                    unint64_t v6 = ((unint64_t)*(unsigned __int8 *)(a3 + 5) << 48) | ((unint64_t)*(unsigned __int8 *)(a3 + 6) << 40) | ((unint64_t)*(unsigned __int8 *)(a3 + 7) << 32) | ((unint64_t)*(unsigned __int8 *)(a3 + 8) << 24) | ((unint64_t)*(unsigned __int8 *)(a3 + 9) << 16) | ((unint64_t)*(unsigned __int8 *)(a3 + 10) << 8) | *(unsigned __int8 *)(a3 + 11);
                    uint64_t v7 = 8;
                  }
                }
                else
                {
                  unint64_t v6 = ((v6 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(a3 + 5) << 40) | ((unint64_t)*(unsigned __int8 *)(a3 + 6) << 32) | ((unint64_t)*(unsigned __int8 *)(a3 + 7) << 24) | ((unint64_t)*(unsigned __int8 *)(a3 + 8) << 16) | ((unint64_t)*(unsigned __int8 *)(a3 + 9) << 8) | *(unsigned __int8 *)(a3 + 10);
                  uint64_t v7 = 7;
                }
              }
              else
              {
                unint64_t v6 = ((v6 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(a3 + 5) << 32) | ((unint64_t)*(unsigned __int8 *)(a3 + 6) << 24) | ((unint64_t)*(unsigned __int8 *)(a3 + 7) << 16) | ((unint64_t)*(unsigned __int8 *)(a3 + 8) << 8) | *(unsigned __int8 *)(a3 + 9);
                uint64_t v7 = 6;
              }
            }
            else
            {
              unint64_t v6 = ((v6 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(a3 + 5) << 24) | ((unint64_t)*(unsigned __int8 *)(a3 + 6) << 16) | ((unint64_t)*(unsigned __int8 *)(a3 + 7) << 8) | *(unsigned __int8 *)(a3 + 8);
              uint64_t v7 = 5;
            }
          }
          else
          {
            unint64_t v6 = ((v6 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(a3 + 5) << 16) | ((unint64_t)*(unsigned __int8 *)(a3 + 6) << 8) | *(unsigned __int8 *)(a3 + 7);
            uint64_t v7 = 4;
          }
        }
        else
        {
          unint64_t v6 = ((v6 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(a3 + 5) << 8) | *(unsigned __int8 *)(a3 + 6);
          uint64_t v7 = 3;
        }
      }
      else
      {
        unint64_t v6 = *(unsigned __int8 *)(a3 + 5) | ((v6 & 0x3F) << 8);
        uint64_t v7 = 2;
      }
    }
    else
    {
      uint64_t v7 = 1;
    }
    unsigned int v15 = *(unsigned __int8 *)(v5 + v7);
    if (*(char *)(v5 + v7) < 0)
    {
      if (v15 >= 0xC0)
      {
        if (v15 >= 0xE0)
        {
          int v27 = __si_assert_copy_extra_2445(0, -1);
          unsigned int v28 = v27;
          uint64_t v29 = "";
          if (v27) {
            uint64_t v29 = v27;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v29);
          free(v28);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        uint64_t v16 = v7 + 2;
      }
      else
      {
        uint64_t v16 = v7 + 1;
      }
      unsigned int v15 = *(unsigned __int8 *)(v5 + v16);
    }
    uint64_t v17 = *(void *)(a1 + 928);
    int v18 = *(_DWORD *)(a1 + 804);
    int v9 = (pthread_rwlock_t *)(v17 + 8);
    pthread_rwlock_wrlock((pthread_rwlock_t *)(v17 + 8));
    uint64_t v19 = *(unsigned int *)(v17 + 220);
    if ((int)v19 >= 1)
    {
      uint64_t v20 = 0;
      int v21 = v18 & (v15 >> 5) & 1;
      uint64_t v22 = a3 - a2 - 20;
      int64_t v23 = (void *)(v17 + 272);
      while (*v23 != a2)
      {
        ++v20;
        v23 += 6;
        if (v19 == v20) {
          goto LABEL_42;
        }
      }
      uint64_t v24 = v17 + 48 * v20;
      if (v22 <= 0) {
        unint64_t v25 = 0;
      }
      else {
        unint64_t v25 = v6;
      }
      if (v22 <= 0) {
        int v21 = 0;
      }
      *(void *)(v24 + 296) = v25;
      *(_DWORD *)(v24 + 304) = v21;
      *(void *)(v24 + 312) = v22 & ~(v22 >> 63);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 928);
    int v9 = (pthread_rwlock_t *)(v8 + 8);
    pthread_rwlock_wrlock((pthread_rwlock_t *)(v8 + 8));
    uint64_t v10 = *(unsigned int *)(v8 + 220);
    if ((int)v10 >= 1)
    {
      uint64_t v11 = 0;
      uint64_t v12 = (void *)(v8 + 272);
      while (*v12 != a2)
      {
        ++v11;
        v12 += 6;
        if (v10 == v11) {
          goto LABEL_42;
        }
      }
      uint64_t v14 = v8 + 48 * v11;
      *(void *)(v14 + 296) = 0;
      *(_DWORD *)(v14 + 304) = 0;
      *(void *)(v14 + 312) = 0;
    }
  }
LABEL_42:
  return pthread_rwlock_unlock(v9);
}

uint64_t page_find_oid_with_flags(uint64_t a1, unsigned int a2, size_t __nbyte, unint64_t a4, unsigned int a5, void *a6, int a7, uint64_t a8)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (a7) {
    unsigned int v14 = 16;
  }
  else {
    unsigned int v14 = 0;
  }
  unsigned int v15 = *(void **)(a1 + 992);
  int8x8_t v16 = (int8x8_t)v15[1];
  if (!*(void *)&v16) {
    goto LABEL_20;
  }
  uint8x8_t v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    unint64_t v18 = a4;
    if (*(void *)&v16 <= a4) {
      unint64_t v18 = a4 % *(void *)&v16;
    }
  }
  else
  {
    unint64_t v18 = (*(void *)&v16 - 1) & a4;
  }
  uint64_t v19 = *(uint64_t ***)(*v15 + 8 * v18);
  if (!v19 || (uint64_t v20 = *v19) == 0)
  {
LABEL_20:
    value_out = 0;
    uint64_t v22 = _page_fetch_with_fd(a1, &value_out, a2, __nbyte, a7, buf, 0xFFFFFFFFLL, 0);
    if (v22) {
      return v22;
    }
    int v23 = *((_DWORD *)value_out + 3);
    if ((v23 & 0xF0) != 0)
    {
      int v27 = *__error();
      unsigned int v28 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "page_find_oid_with_flags";
        __int16 v38 = 1024;
        int v39 = 5906;
        __int16 v40 = 1024;
        unsigned int v41 = a2;
        _os_log_error_impl(&dword_1BD672000, v28, OS_LOG_TYPE_ERROR, "%s:%d: page_find_oid: ERR: tried to read attr name table data! pgnum 0x%x\n", buf, 0x18u);
      }
      *__error() = v27;
      uint64_t v29 = __si_assert_copy_extra_2445(0, -1);
      uint64_t v30 = v29;
      unsigned int v31 = "";
      if (v29) {
        unsigned int v31 = v29;
      }
      __message_assert("%s:%u: Unexpected code path %s ", "sdb2.c", 5907, v31);
    }
    else
    {
      if ((v23 & 8) == 0)
      {
        *(void *)long long buf = 0;
        uint64_t slot_for_oid_and_type = find_slot_for_oid_and_type(a1, (uint64_t)value_out, a4, a5, (unint64_t *)buf, 0, 1);
        unint64_t v25 = value_out;
        if (slot_for_oid_and_type)
        {
          uint64_t v22 = slot_for_oid_and_type;
          page_release(a1, value_out, a2, v14, 0);
        }
        else
        {
          *a6 = *(void *)buf;
          if (a8)
          {
            uint64_t v22 = 0;
            *(_DWORD *)(a8 + 8) = v14;
            *(_DWORD *)(a8 + 12) = a2;
            *(void *)a8 = v25;
          }
          else
          {
            page_release(a1, v25, a2, v14, 0);
            return 0;
          }
        }
        return v22;
      }
      int v32 = *__error();
      uint64_t v33 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "page_find_oid_with_flags";
        __int16 v38 = 1024;
        int v39 = 5912;
        __int16 v40 = 1024;
        unsigned int v41 = a2;
        _os_log_error_impl(&dword_1BD672000, v33, OS_LOG_TYPE_ERROR, "%s:%d: page_find_oid: ERR: page is still compressed! pgnum 0x%x\n", buf, 0x18u);
      }
      *__error() = v32;
      uint64_t v34 = __si_assert_copy_extra_2445(0, -1);
      uint64_t v30 = v34;
      uint64_t v35 = "";
      if (v34) {
        uint64_t v35 = v34;
      }
      __message_assert("%s:%u: Unexpected code path %s ", "sdb2.c", 5913, v35);
    }
    free(v30);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  while (1)
  {
    unint64_t v21 = v20[1];
    if (v21 == a4) {
      break;
    }
    if (v17.u32[0] > 1uLL)
    {
      if (v21 >= *(void *)&v16) {
        v21 %= *(void *)&v16;
      }
    }
    else
    {
      v21 &= *(void *)&v16 - 1;
    }
    if (v21 != v18) {
      goto LABEL_20;
    }
LABEL_13:
    uint64_t v20 = (uint64_t *)*v20;
    if (!v20) {
      goto LABEL_20;
    }
  }
  if (v20[2] != a4) {
    goto LABEL_13;
  }
  if (*((_DWORD *)v20 + 6) == 3)
  {
    uint64_t v22 = 2;
  }
  else
  {
    uint64_t v22 = 0;
    *a6 = v20[4];
  }
  if (a8)
  {
    *(void *)a8 = 0;
    *(void *)(a8 + 8) = 0;
  }
  return v22;
}

uint64_t _page_fetch_with_fd(uint64_t a1, void **value_out, unsigned int a3, size_t __nbyte, int a5, _DWORD *a6, uint64_t __fd, int *a8)
{
  unsigned int v12 = __nbyte;
  uint64_t v15 = a1;
  v150[3] = *MEMORY[0x1E4F143B8];
  uint64_t ptr = 0;
  if (a8)
  {
    __long long buf = (void *)*((void *)a8 + 9);
    if ((a5 & 0x2000) != 0) {
      goto LABEL_29;
    }
  }
  else
  {
    __long long buf = 0;
    if ((a5 & 0x2000) != 0) {
      goto LABEL_29;
    }
  }
  uint64_t v16 = *(void *)(a1 + 928);
  if (a3 && (a5 & 0x10) != 0)
  {
    uint8x8_t v17 = (pthread_rwlock_t *)(v16 + 8);
    int size_4 = a5 & 3;
    if ((a5 & 3) != 0) {
      pthread_rwlock_rdlock(v17);
    }
    else {
      pthread_rwlock_wrlock(v17);
    }
    uint64_t v19 = *(unsigned int *)(v16 + 220);
    if ((int)v19 >= 1)
    {
      uint64_t v20 = 0;
      while (*(_DWORD *)(v16 + 252 + 4 * v20) != a3)
      {
        if (v19 == ++v20) {
          goto LABEL_27;
        }
      }
      atomic_fetch_add((atomic_uint *volatile)(v16 + 216), 1u);
      uint64_t v21 = v16 + 48 * v20;
      uint64_t v22 = malloc_type_malloc(*(int *)(*(void *)(v21 + 272) + 8), 0x71D6761EuLL);
      memcpy(v22, *(const void **)(v21 + 272), *(int *)(*(void *)(v21 + 272) + 8));
      v22[1] = *(_DWORD *)(*(void *)(v21 + 272) + 8);
      void *value_out = v22;
      if (size_4) {
        goto LABEL_21;
      }
      goto LABEL_20;
    }
LABEL_27:
    pthread_rwlock_unlock((pthread_rwlock_t *)(v16 + 8));
    goto LABEL_28;
  }
  if (a3 && (a5 & 4) == 0)
  {
    unint64_t v18 = (pthread_rwlock_t *)(v16 + 8);
    int size_4a = a5 & 3;
    if ((a5 & 3) != 0) {
      pthread_rwlock_rdlock(v18);
    }
    else {
      pthread_rwlock_wrlock(v18);
    }
    uint64_t v24 = *(unsigned int *)(v16 + 220);
    if ((int)v24 >= 1)
    {
      uint64_t v20 = 0;
      while (*(_DWORD *)(v16 + 252 + 4 * v20) != a3)
      {
        if (v24 == ++v20) {
          goto LABEL_27;
        }
      }
      atomic_fetch_add((atomic_uint *volatile)(v16 + 216), 1u);
      void *value_out = *(void **)(v16 + 48 * v20 + 272);
      if (size_4a) {
        goto LABEL_21;
      }
LABEL_20:
      db_cache_mru((__n128 *)v16, v20);
LABEL_21:
      pthread_rwlock_unlock((pthread_rwlock_t *)(v16 + 8));
      uint64_t v23 = 0;
      *a6 = 1;
      return v23;
    }
    goto LABEL_27;
  }
LABEL_28:
  atomic_fetch_add((atomic_uint *volatile)(v16 + 228), 1u);
  if ((a5 & 0x2002) != 0) {
    goto LABEL_29;
  }
  if ((a5 & 8) != 0)
  {
    if (page_cache_fetch(*(unsigned int **)(v15 + 928), value_out, a3)) {
      goto LABEL_29;
    }
    *a6 = 2;
    if ((*((unsigned char *)*value_out + 12) & 0xF0) == 0) {
      return 0;
    }
    os_log_type_t v128 = __si_assert_copy_extra_2445(0, -1);
    CFNumberRef v73 = v128;
    uint32_t v129 = "";
    if (v128) {
      uint32_t v129 = v128;
    }
    __message_assert("%s:%u: failed assertion '%s' %s obj_iter_fetch_page: ERR: tried to read attr name table data! pgnum 0x%x, flags 0x%x\n", "sdb2.c", 2393, "((*dbpp)->flags & DB_PAGE_STRING_DATA)==0", v129, a3, *((_DWORD *)*value_out + 3));
    goto LABEL_208;
  }
  unsigned int v41 = *(__n128 **)(v15 + 928);
  if (a5)
  {
    if (page_cache_copy_page(*(unsigned int **)(v15 + 928), (const void **)value_out, a3, a5)) {
      goto LABEL_29;
    }
    if ((*((unsigned char *)*value_out + 12) & 0xF0) == 0)
    {
LABEL_204:
      uint64_t v23 = 0;
      *a6 = 2;
      return v23;
    }
    CFNumberRef v72 = __si_assert_copy_extra_2445(0, -1);
    CFNumberRef v73 = v72;
    __int16 v74 = "";
    if (v72) {
      __int16 v74 = v72;
    }
    __message_assert("%s:%u: failed assertion '%s' %s obj_iter_fetch_page: ERR: tried to read attr name table data! pgnum 0x%x, flags 0x%x\n", "sdb2.c", 2401, "((*dbpp)->flags & DB_PAGE_STRING_DATA)==0", v74, a3, *((_DWORD *)*value_out + 3));
LABEL_208:
    free(v73);
    if (__valid_fs(-1)) {
      uint64_t v130 = 2989;
    }
    else {
      uint64_t v130 = 3072;
    }
    *(_DWORD *)uint64_t v130 = -559038737;
    abort();
  }
  v144[0] = MEMORY[0x1E4F143A8];
  v144[1] = 0x40000000;
  v144[2] = ___page_fetch_with_fd_block_invoke;
  v144[3] = &__block_descriptor_tmp_193;
  v144[4] = v15;
  int v145 = a5;
  *(void *)long long buf = 0;
  if (!page_cache_copy_page((unsigned int *)v41, (const void **)buf, a3, 4))
  {
    if (v41[13].n128_u32[3])
    {
      unsigned int v42 = atomic_load(&v41[14].n128_u32[1]);
      int v43 = 100 * v42;
      signed int v44 = atomic_load(&v41[13].n128_u32[2]);
      int v45 = v41[13].n128_i32[3];
      if (v43 > v44 && v45 <= 3)
      {
        if (v41[15].n128_u32[v45 + 2])
        {
          int v47 = atomic_load(&v41[14].n128_u32[1]);
          int v45 = v41[13].n128_i32[3];
          if (v47 > 10 * v45 && MEMORY[0xFFFFFC030] <= 0x32u)
          {
            v41[13].n128_u32[3] = ++v45;
            atomic_store(0, &v41[14].n128_u32[1]);
            atomic_store(0, &v41[13].n128_u32[2]);
          }
        }
      }
    }
    else
    {
      int v45 = 2;
      v41[13].n128_u32[3] = 2;
    }
    uint64_t v108 = v45 - 1;
    if (!db_cache_flush_entry((unsigned int *)v41, v45 - 1, (uint64_t)v144))
    {
      int v109 = &v41[3 * v108];
      free((void *)v109[17].n128_u64[1]);
      v109[17].n128_u64[1] = 0;
      char v110 = *(void **)buf;
      free((void *)v109[17].n128_u64[0]);
      v109[17].n128_u64[0] = (unint64_t)v110;
      v41[15].n128_u32[v108 + 3] = a3;
      v109[18].n128_u32[0] = 0;
      void *value_out = v110;
      db_cache_mru(v41, v108);
      v41[18].n128_u64[1] = 0;
      v41[19].n128_u32[0] = 0;
      v41[19].n128_u64[1] = 0;
      if ((*((unsigned char *)*value_out + 12) & 0xF0) == 0) {
        goto LABEL_204;
      }
      CFArrayRef v133 = __si_assert_copy_extra_2445(0, -1);
      CFNumberRef v73 = v133;
      unint64_t v134 = "";
      if (v133) {
        unint64_t v134 = v133;
      }
      __message_assert("%s:%u: failed assertion '%s' %s obj_iter_fetch_page: ERR: tried to read attr name table data! pgnum 0x%x, flags 0x%x\n", "sdb2.c", 2408, "((*dbpp)->flags & DB_PAGE_STRING_DATA)==0", v134, a3, *((_DWORD *)*value_out + 3));
      goto LABEL_208;
    }
  }
LABEL_29:
  *a6 = 0;
  BOOL v25 = (a5 & 4) == 0;
  if ((a5 & 4) != 0)
  {
    __int16 v40 = *value_out;
    uint64_t ptr = *value_out;
    goto LABEL_82;
  }
  if (a5)
  {
    __int16 v40 = __buf;
    if (__buf)
    {
      BOOL v25 = 0;
      uint64_t ptr = __buf;
      goto LABEL_83;
    }
    size_t v48 = v12;
    malloc_type_id_t v49 = 1617227969;
    goto LABEL_81;
  }
  if (a3 && (db_cache_contains(*(void *)(v15 + 928), a3, 0) & 1) == 0)
  {
    unsigned int size = v12;
    *(void *)long long buf = (unint64_t)a3 << *(_DWORD *)(v15 + 12);
    *(void *)&uint8_t buf[8] = v12;
    uint64_t v26 = *(_DWORD **)(v15 + 848);
    CFArrayRef v147 = 0;
    int v27 = _fd_acquire_fd((uint64_t)v26, &v147);
    do
    {
      int v28 = fcntl(v27, 44, buf);
      uint64_t v29 = g_prot_error_callback;
      if (v28 != -1 || g_prot_error_callback == 0) {
        break;
      }
      uint64_t v31 = v26[10];
      int v32 = __error();
    }
    while (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v29 + 16))(v29, v31, *v32, 12) & 1) != 0);
    _fd_release_fd(v26, v27, 0, (uint64_t)v147);
    unsigned int v12 = size;
    BOOL v25 = (a5 & 4) == 0;
  }
  uint64_t ptr = 0;
  if ((*(unsigned char *)(v15 + 804) & 8) != 0) {
    goto LABEL_79;
  }
  uint64_t v33 = *(unsigned int **)(v15 + 928);
  *(void *)long long buf = MEMORY[0x1E4F143A8];
  *(void *)&uint8_t buf[8] = 0x40000000;
  *(void *)&uint8_t buf[16] = __db_flush_cache_lru_block_invoke;
  *(void *)&unsigned char buf[24] = &__block_descriptor_tmp_215;
  *(void *)&uint8_t buf[32] = v15;
  *(void *)&uint8_t buf[40] = &ptr;
  *(_DWORD *)&uint8_t buf[48] = a5 & 0x4000;
  if (v33[55])
  {
    unsigned int v34 = atomic_load(v33 + 57);
    int v35 = 100 * v34;
    signed int v36 = atomic_load(v33 + 54);
    int v37 = v33[55];
    if (v35 > v36 && v37 <= 3)
    {
      if (v33[v37 + 62])
      {
        int v39 = atomic_load(v33 + 57);
        int v37 = v33[55];
        if (v39 > 10 * v37 && MEMORY[0xFFFFFC030] <= 0x32u)
        {
          v33[55] = ++v37;
          atomic_store(0, v33 + 57);
          atomic_store(0, v33 + 54);
        }
      }
    }
  }
  else
  {
    int v37 = 2;
    v33[55] = 2;
  }
  uint64_t v23 = db_cache_flush_entry(v33, v37 - 1, (uint64_t)buf);
  if (v23)
  {
    free(ptr);
    return v23;
  }
  if (!ptr)
  {
LABEL_79:
    __int16 v40 = 0;
    size_t v50 = v12;
    goto LABEL_80;
  }
  size_t v50 = v12;
  size_t v51 = malloc_size(ptr);
  __int16 v40 = ptr;
  if (v51 < v12)
  {
LABEL_80:
    free(v40);
    size_t v48 = v50;
    malloc_type_id_t v49 = 383769594;
LABEL_81:
    __int16 v40 = malloc_type_valloc(v48, v49);
    uint64_t ptr = v40;
  }
LABEL_82:
  if (!v40) {
    return 12;
  }
LABEL_83:
  if (!a8)
  {
LABEL_90:
    if (__fd == -1)
    {
      uint64_t v61 = v12;
      uint64_t v62 = fd_pread(*(_DWORD **)(v15 + 848), v40, v12, (unint64_t)a3 << *(_DWORD *)(v15 + 12));
      if (v62 == v12)
      {
        unsigned int sizea = v12;
        int v63 = 0;
        goto LABEL_124;
      }
      uint64_t v67 = v62;
      *(_DWORD *)(v15 + 4) |= 4u;
      int v68 = *__error();
      int v69 = *__error();
      uint64_t v70 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136316674;
        *(void *)&uint8_t buf[4] = "_page_fetch_with_fd";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2478;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = a3;
        *(_WORD *)&unsigned char buf[24] = 1024;
        *(_DWORD *)&buf[26] = v68;
        *(_WORD *)&buf[30] = 2080;
        *(void *)&uint8_t buf[32] = v15 + 324;
        *(_WORD *)&uint8_t buf[40] = 2048;
        *(void *)&buf[42] = v67;
        *(_WORD *)&buf[50] = 2048;
        *(void *)&buf[52] = v61;
        _os_log_error_impl(&dword_1BD672000, v70, OS_LOG_TYPE_ERROR, "%s:%d: Failed reading pgnum %d error:%d (%s) %zd != %zd", buf, 0x3Cu);
      }
      *__error() = v69;
      *__error() = v68;
      if (*__error())
      {
        if (!v25) {
          return *__error();
        }
      }
      else
      {
        *__error() = 22;
        if (!v25) {
          return *__error();
        }
      }
    }
    else
    {
      unsigned int sizea = v12;
      BOOL size_4b = v25;
      size_t v55 = v12;
      off_t v56 = (unint64_t)a3 << *(_DWORD *)(v15 + 12);
      while (1)
      {
        ssize_t v57 = pread(__fd, v40, v55, v56);
        uint64_t v58 = v57;
        if (v57 != -1) {
          break;
        }
        uint64_t v59 = g_prot_error_callback;
        if (!g_prot_error_callback) {
          break;
        }
        int v60 = __error();
        if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v59 + 16))(v59, __fd, *v60, 4) & 1) == 0)
        {
          uint64_t v58 = -1;
          goto LABEL_101;
        }
      }
      if (v57 == v55)
      {
        int v63 = 0;
        BOOL v25 = size_4b;
        goto LABEL_124;
      }
LABEL_101:
      *(_DWORD *)(v15 + 4) |= 4u;
      int v64 = *__error();
      int v65 = *__error();
      uint64_t v66 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136316674;
        *(void *)&uint8_t buf[4] = "_page_fetch_with_fd";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2492;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = a3;
        *(_WORD *)&unsigned char buf[24] = 1024;
        *(_DWORD *)&buf[26] = v64;
        *(_WORD *)&buf[30] = 2080;
        *(void *)&uint8_t buf[32] = v15 + 324;
        *(_WORD *)&uint8_t buf[40] = 2048;
        *(void *)&buf[42] = v58;
        *(_WORD *)&buf[50] = 2048;
        *(void *)&buf[52] = v55;
        _os_log_error_impl(&dword_1BD672000, v66, OS_LOG_TYPE_ERROR, "%s:%d: Failed reading pgnum %d error:%d (%s) %zd != %zd", buf, 0x3Cu);
      }
      *__error() = v65;
      *__error() = v64;
      if (!*__error()) {
        *__error() = 22;
      }
      if (!size_4b) {
        return *__error();
      }
    }
    free(ptr);
    return *__error();
  }
  unsigned int v53 = *a8;
  unsigned int v52 = a8[1];
  while (1)
  {
    while (1)
    {
      if (v52 >= v53) {
        goto LABEL_90;
      }
      unsigned int v54 = a8[v52 + 10];
      if (v54 >= a3) {
        break;
      }
      a8[1] = ++v52;
    }
    if (v54 == a3) {
      break;
    }
    a8[1] = ++v52;
    if (v54 > a3) {
      goto LABEL_90;
    }
  }
  unsigned int sizea = v12;
  if (v25)
  {
    free(v40);
    uint64_t v71 = a8[1];
    unsigned int v52 = a8[1];
  }
  else
  {
    uint64_t v71 = v52;
  }
  BOOL v25 = 0;
  a8[1] = v52 + 1;
  uint64_t ptr = *(void **)&a8[2 * v71 + 2];
  int v63 = 1;
LABEL_124:
  CFArrayRef v147 = 0;
  if (a5)
  {
    uint64_t v81 = db2_page_uncompress_swap(v15, (int8x16_t *)ptr, &v147, 0);
    if (v81)
    {
      uint64_t v77 = v81;
      int v82 = *__error();
      long long v83 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
      {
        unint64_t v121 = (unint64_t)a3 << *(_DWORD *)(v15 + 12);
        int v122 = *(_DWORD *)ptr;
        int v123 = *((_DWORD *)ptr + 1);
        int v125 = *((_DWORD *)ptr + 2);
        int v124 = *((_DWORD *)ptr + 3);
        *(_DWORD *)long long buf = 136317442;
        *(void *)&uint8_t buf[4] = "_page_fetch_with_fd";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2513;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v77;
        *(_WORD *)&unsigned char buf[24] = 2048;
        *(void *)&buf[26] = a3;
        *(_WORD *)&buf[34] = 2048;
        *(void *)&buf[36] = v121;
        *(_WORD *)&buf[44] = 1024;
        *(_DWORD *)&buf[46] = v122;
        *(_WORD *)&buf[50] = 1024;
        *(_DWORD *)&buf[52] = v123;
        *(_WORD *)&buf[56] = 1024;
        *(_DWORD *)&buf[58] = v125;
        __int16 v149 = 1024;
        LODWORD(v150[0]) = v124;
        WORD2(v150[0]) = 2080;
        *(void *)((char *)v150 + 6) = v15 + 324;
        _os_log_error_impl(&dword_1BD672000, v83, OS_LOG_TYPE_ERROR, "%s:%d: db2_page_uncompress_swap failed, error:%d, pgnum:%lu, pgoff:0x%llx, signature:0x%x, size:%d, used_bytes:%d, flags:0x%x, name:%s", buf, 0x4Eu);
      }
      *__error() = v82;
      if (SIIsAppleInternal_onceToken != -1) {
        dispatch_once(&SIIsAppleInternal_onceToken, &__block_literal_global_5267);
      }
      if (SIIsAppleInternal_internal)
      {
        long long v80 = (atomic_uint *)&_page_fetch_with_fd__crashCount;
        goto LABEL_142;
      }
LABEL_175:
      if ((a5 & 0x1000) == 0 && (*(unsigned char *)(v15 + 4) & 0x40) == 0) {
        analytics_send_event_lazy();
      }
      if ((a5 & 4) != 0) {
        goto LABEL_191;
      }
      if (a5)
      {
        if (!v25) {
          goto LABEL_191;
        }
        CFIndex v98 = ptr;
      }
      else
      {
        uint64_t v94 = *(void *)(v15 + 928);
        uint64_t v95 = *(unsigned int *)(v94 + 220);
        if ((int)v95 < 1) {
          goto LABEL_191;
        }
        uint64_t v96 = 0;
        CFArrayRef v97 = (void **)(v94 + 272);
        while (*v97 != ptr)
        {
          ++v96;
          v97 += 6;
          if (v95 == v96) {
            goto LABEL_191;
          }
        }
        uint64_t v99 = v15;
        *(_DWORD *)(v94 + 4 * v96 + 252) = 0;
        uint64_t v100 = v94 + 272;
        uint64_t v101 = v100 + 48 * v96;
        CFStringRef v103 = *(void **)(v101 + 8);
        uint64_t v102 = v101 + 8;
        CFIndex v98 = v103;
        *(_DWORD *)(v102 + 8) = 0;
        uint64_t v104 = v100 + 48 * v96;
        *(void *)(v104 + 24) = 0;
        *(_DWORD *)(v104 + 32) = 0;
        *(void *)(v104 + 40) = 0;
        *CFArrayRef v97 = 0;
        if (v103)
        {
          free(v98);
          *(void *)uint64_t v102 = 0;
          CFIndex v98 = *v97;
        }
        uint64_t v15 = v99;
      }
      free(v98);
LABEL_191:
      if ((a5 & 0x1000) == 0 && (*(unsigned char *)(v15 + 4) & 0x40) == 0)
      {
        int v105 = *__error();
        CFTypeID v106 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
        {
          int v126 = *(_DWORD *)(v15 + 4);
          unint64_t v127 = (unint64_t)a3 << *(_DWORD *)(v15 + 12);
          *(_DWORD *)long long buf = 136316418;
          *(void *)&uint8_t buf[4] = "_page_fetch_with_fd";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2637;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(void *)&buf[20] = a3;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = v127;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&uint8_t buf[40] = v126;
          *(_WORD *)&buf[44] = 2080;
          *(void *)&buf[46] = v15 + 324;
          _os_log_error_impl(&dword_1BD672000, v106, OS_LOG_TYPE_ERROR, "%s:%d: page_fetch marking the dst as corrupted, pgnum:%lu, pgoff:0x%llx, flags:0x%x, name:%s", buf, 0x36u);
        }
        *__error() = v105;
        *(_DWORD *)(v15 + 4) |= 0x40u;
      }
      return 22;
    }
  }
  else
  {
    if ((*((_DWORD *)ptr + 3) & 0x1000) != 0) {
      int v75 = dst_malloc;
    }
    else {
      int v75 = 0;
    }
    uint64_t v76 = db2_page_uncompress_swap(v15, (int8x16_t *)ptr, &v147, v75);
    if (v76)
    {
      uint64_t v77 = v76;
      int v78 = *__error();
      long long v79 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
      {
        unint64_t v116 = (unint64_t)a3 << *(_DWORD *)(v15 + 12);
        int v117 = *(_DWORD *)ptr;
        int v118 = *((_DWORD *)ptr + 1);
        int v120 = *((_DWORD *)ptr + 2);
        int v119 = *((_DWORD *)ptr + 3);
        *(_DWORD *)long long buf = 136317442;
        *(void *)&uint8_t buf[4] = "_page_fetch_with_fd";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2531;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v77;
        *(_WORD *)&unsigned char buf[24] = 2048;
        *(void *)&buf[26] = a3;
        *(_WORD *)&buf[34] = 2048;
        *(void *)&buf[36] = v116;
        *(_WORD *)&buf[44] = 1024;
        *(_DWORD *)&buf[46] = v117;
        *(_WORD *)&buf[50] = 1024;
        *(_DWORD *)&buf[52] = v118;
        *(_WORD *)&buf[56] = 1024;
        *(_DWORD *)&buf[58] = v120;
        __int16 v149 = 1024;
        LODWORD(v150[0]) = v119;
        WORD2(v150[0]) = 2080;
        *(void *)((char *)v150 + 6) = v15 + 324;
        _os_log_error_impl(&dword_1BD672000, v79, OS_LOG_TYPE_ERROR, "%s:%d: db2_page_uncompress_swap failed, error:%d, pgnum:%lu, pgoff:0x%llx, signature:0x%x, size:%d, used_bytes:%d, flags:0x%x, name:%s", buf, 0x4Eu);
      }
      *__error() = v78;
      if (SIIsAppleInternal_onceToken != -1) {
        dispatch_once(&SIIsAppleInternal_onceToken, &__block_literal_global_5267);
      }
      if (SIIsAppleInternal_internal)
      {
        long long v80 = (atomic_uint *)&_page_fetch_with_fd__crashCount_197;
LABEL_142:
        if (atomic_fetch_add_explicit(v80, 1u, memory_order_relaxed)) {
          goto LABEL_175;
        }
        CFStringRef v84 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"db2_page_uncompress_swap failed, error:%d, pgnum:%lu, pgoff:0x%llx, signature:0x%x, size:%d, used_bytes:%d, flags:0x%x, name:%s", v77, a3, (unint64_t)a3 << *(_DWORD *)(v15 + 12), *(unsigned int *)ptr, *((unsigned int *)ptr + 1), *((unsigned int *)ptr + 2), *((unsigned int *)ptr + 3), v15 + 324);
        goto LABEL_173;
      }
      goto LABEL_175;
    }
  }
  long long v85 = v147;
  if (v147)
  {
    if (v25)
    {
      free(ptr);
      long long v85 = v147;
    }
    uint64_t ptr = v85;
    goto LABEL_151;
  }
  if (((ptr != __buf) & ~v63) != 0)
  {
    int v87 = malloc_size(ptr);
    long long v85 = ptr;
    *((_DWORD *)ptr + 1) = v87;
LABEL_151:
    unsigned int v86 = sizea;
    goto LABEL_152;
  }
  CFArrayRef v147 = malloc_type_valloc(sizea, 0x8317399uLL);
  unsigned int v86 = sizea;
  memcpy(v147, ptr, sizea);
  long long v85 = v147;
  uint64_t ptr = v147;
  v147[1] = sizea;
LABEL_152:
  if (*v85 != 1684172850) {
    goto LABEL_166;
  }
  int v88 = v85[3];
  uint64_t v89 = 4;
  if ((v88 & 4) == 0) {
    uint64_t v89 = 1;
  }
  if (v85[v89] != v86 || (v88 & 1) == 0 || v85[2] > v85[1])
  {
LABEL_166:
    int v91 = *__error();
    uint64_t v92 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
    {
      unint64_t v111 = (unint64_t)a3 << *(_DWORD *)(v15 + 12);
      int v112 = *(_DWORD *)ptr;
      int v113 = *((_DWORD *)ptr + 1);
      int v115 = *((_DWORD *)ptr + 2);
      int v114 = *((_DWORD *)ptr + 3);
      *(_DWORD *)long long buf = 136317186;
      *(void *)&uint8_t buf[4] = "_page_fetch_with_fd";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2571;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = a3;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = v111;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&uint8_t buf[40] = v112;
      *(_WORD *)&buf[44] = 1024;
      *(_DWORD *)&buf[46] = v113;
      *(_WORD *)&buf[50] = 1024;
      *(_DWORD *)&buf[52] = v115;
      *(_WORD *)&buf[56] = 1024;
      *(_DWORD *)&buf[58] = v114;
      __int16 v149 = 2080;
      v150[0] = v15 + 324;
      _os_log_error_impl(&dword_1BD672000, v92, OS_LOG_TYPE_ERROR, "%s:%d: page_fetch found an invalid page, pgnum:%lu, pgoff:0x%llx, signature:0x%x, size:%d, used_bytes:%d, flags:0x%x, name:%s", buf, 0x48u);
    }
    *__error() = v91;
    if (SIIsAppleInternal_onceToken != -1) {
      dispatch_once(&SIIsAppleInternal_onceToken, &__block_literal_global_5267);
    }
    if (SIIsAppleInternal_internal
      && !atomic_fetch_add_explicit(&_page_fetch_with_fd__crashCount_198, 1u, memory_order_relaxed))
    {
      CFStringRef v84 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"page_fetch found an invalid page, pgnum:%lu, pgoff:0x%llx, signature:0x%x, size:%d, used_bytes:%d, flags:0x%x, name:%s", a3, (unint64_t)a3 << *(_DWORD *)(v15 + 12), *(unsigned int *)ptr, *((unsigned int *)ptr + 1), *((unsigned int *)ptr + 2), *((unsigned int *)ptr + 3), v15 + 324);
LABEL_173:
      CFStringRef v93 = v84;
      getpid();
      SISimulateCrashForPid(0, (uint64_t)v93);
      if (v93) {
        CFRelease(v93);
      }
      goto LABEL_175;
    }
    goto LABEL_175;
  }
  BOOL v90 = (a5 & 3) != 0;
  if ((v88 & 0xC) != 0) {
    BOOL v90 = 0;
  }
  if ((v88 & 0xF0) != 0 && !v90)
  {
    BOOL v131 = __si_assert_copy_extra_2445(0, -1);
    CFNumberRef v73 = v131;
    long long v132 = "";
    if (v131) {
      long long v132 = v131;
    }
    __message_assert("%s:%u: failed assertion '%s' %s obj_iter_fetch_page: ERR: tried to read attr name table data! pgnum 0x%x, flags 0x%x\n", "sdb2.c", 2581, "(dbp->flags & 0x000000f0)==0", v132, a3, *((_DWORD *)ptr + 3));
    goto LABEL_208;
  }
  if ((a5 & 4) == 0)
  {
    void *value_out = v85;
    if ((a5 & 1) == 0)
    {
      if ((v88 & 0xC) != 0)
      {
        db_cache_add_page(*(__n128 **)(v15 + 928), v85, v85, a3);
        return 0;
      }
      return 0;
    }
  }
  if ((a5 & 0x23) != 1) {
    return 0;
  }
  if ((*((unsigned char *)*value_out + 12) & 0xF0) != 0)
  {
    CFArrayRef v135 = __si_assert_copy_extra_2445(0, -1);
    CFArrayRef v136 = v135;
    uint64_t v137 = "";
    if (v135) {
      uint64_t v137 = v135;
    }
    __message_assert("%s:%u: failed assertion '%s' %s obj_iter_fetch_page: ERR: tried to read attr name table data! pgnum 0x%x, flags 0x%x\n", "sdb2.c", 2599, "((*dbpp)->flags & 0x000000f0)==0", v137, a3, *((_DWORD *)ptr + 3));
    free(v136);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  page_cache_add(*(unsigned int **)(v15 + 928), (_DWORD **)value_out, a3, (a5 & 8) != 0);
  return 0;
}

uint64_t page_release(uint64_t a1, _DWORD *value, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  int v91 = value;
  if (!value) {
    return 22;
  }
  LODWORD(v5) = a5;
  uint64_t v8 = value;
  if (!a5)
  {
    uint64_t v10 = 4;
    if ((value[3] & 4) == 0) {
      uint64_t v10 = 1;
    }
    LODWORD(v5) = value[v10];
  }
  BOOL v90 = 0;
  uint64_t v11 = *(void *)(a1 + 928);
  if ((a4 & 0x10) != 0)
  {
    pthread_rwlock_rdlock((pthread_rwlock_t *)(v11 + 8));
    uint64_t v18 = *(unsigned int *)(v11 + 220);
    if ((int)v18 >= 1)
    {
      uint64_t v19 = (_DWORD *)(v11 + 252);
      uint64_t v20 = (void *)(v11 + 272);
      while ((_DWORD *)*v20 != v8 || *v19 != a3)
      {
        ++v19;
        v20 += 6;
        if (!--v18) {
          goto LABEL_30;
        }
      }
      uint64_t v21 = (pthread_rwlock_t *)(v11 + 8);
      goto LABEL_84;
    }
LABEL_30:
    pthread_rwlock_unlock((pthread_rwlock_t *)(v11 + 8));
    if ((a4 & 1) == 0)
    {
LABEL_12:
      unsigned int v15 = atomic_load((unsigned int *)(*(void *)(a1 + 928) + 248));
      if (v15 > a3)
      {
        if (sdb_init_cache_onceToken != -1) {
          dispatch_once(&sdb_init_cache_onceToken, &__block_literal_global_30);
        }
        if (sdb_init_cache_status != 1 || !cache_release_value((cache_t *)sdbLargeCacheArray, v8)) {
          return 0;
        }
      }
      if ((a4 & 8) != 0)
      {
        if ((*((unsigned char *)v8 + 13) & 0x10) != 0) {
          goto LABEL_21;
        }
        uint64_t v16 = *(void *)(a1 + 928);
        pthread_rwlock_wrlock((pthread_rwlock_t *)(v16 + 8));
        if (*(unsigned char *)(v16 + 232))
        {
LABEL_20:
          pthread_rwlock_unlock((pthread_rwlock_t *)(v16 + 8));
LABEL_21:
          if ((a4 & 4) != 0) {
            return 0;
          }
LABEL_66:
          uint64_t v38 = *(void *)(a1 + 928);
          pthread_rwlock_rdlock((pthread_rwlock_t *)(v38 + 8));
          uint64_t v39 = *(unsigned int *)(v38 + 220);
          if ((int)v39 >= 1)
          {
            __int16 v40 = (_DWORD *)(v38 + 252);
            unsigned int v41 = (void *)(v38 + 272);
            while ((_DWORD *)*v41 != v8 || *v40 != a3)
            {
              ++v40;
              v41 += 6;
              if (!--v39) {
                goto LABEL_72;
              }
            }
            uint64_t v21 = (pthread_rwlock_t *)(v38 + 8);
            goto LABEL_84;
          }
LABEL_72:
          pthread_rwlock_unlock((pthread_rwlock_t *)(v38 + 8));
          uint64_t v42 = *(void *)(a1 + 928);
          int v43 = v91;
          pthread_rwlock_rdlock((pthread_rwlock_t *)(v42 + 8));
          uint64_t v44 = *(unsigned int *)(v42 + 220);
          if ((int)v44 >= 1)
          {
            int v45 = (void *)(v42 + 272);
            while ((_DWORD *)*v45 != v43)
            {
              v45 += 6;
              if (!--v44) {
                goto LABEL_76;
              }
            }
            uint64_t v21 = (pthread_rwlock_t *)(v42 + 8);
LABEL_84:
            pthread_rwlock_unlock(v21);
            return 0;
          }
LABEL_76:
          pthread_rwlock_unlock((pthread_rwlock_t *)(v42 + 8));
          uint64_t v46 = v43;
LABEL_77:
          free(v46);
          return 0;
        }
        int v50 = *(_DWORD *)(v16 + 220);
        if (v50 >= 1)
        {
          size_t v51 = (void *)(v16 + 272);
          unsigned int v52 = (int *)(v16 + 252);
          uint64_t v53 = *(unsigned int *)(v16 + 220);
          do
          {
            int v54 = *v52++;
            if (v54 == a3) {
              goto LABEL_20;
            }
            if ((_DWORD *)*v51 == v8)
            {
              CFNumberRef v72 = __si_assert_copy_extra_329();
              CFNumberRef v73 = v72;
              __int16 v74 = "";
              if (v72) {
                __int16 v74 = v72;
              }
              __message_assert("%s:%u: failed assertion '%s' %s ", "page-cache.c", 1251, "dbp != cache->cache_entries[i].cache_dbps", v74);
              free(v73);
              if (__valid_fs(-1))
              {
                MEMORY[0xBAD] = -559038737;
                abort();
              }
              MEMORY[0xC00] = -559038737;
              abort();
            }
            v51 += 6;
          }
          while (--v53);
        }
        if (v50)
        {
          unsigned int v55 = atomic_load((unsigned int *)(v16 + 228));
          int v56 = 100 * v55;
          signed int v57 = atomic_load((unsigned int *)(v16 + 216));
          int v58 = *(_DWORD *)(v16 + 220);
          BOOL v59 = v56 > v57 && v58 <= 3;
          if (v59)
          {
            if (*(_DWORD *)(v16 + 4 * (v58 - 1) + 252))
            {
              int v60 = atomic_load((unsigned int *)(v16 + 228));
              int v58 = *(_DWORD *)(v16 + 220);
              if (v60 > 10 * v58 && MEMORY[0xFFFFFC030] <= 0x32u)
              {
                *(_DWORD *)(v16 + 220) = ++v58;
                atomic_store(0, (unsigned int *)(v16 + 228));
                atomic_store(0, (unsigned int *)(v16 + 216));
              }
            }
          }
          uint64_t v61 = v58 - 1;
          if (!*(_DWORD *)(v16 + 48 * v61 + 288))
          {
LABEL_107:
            int v58 = v61;
            goto LABEL_111;
          }
          if (v58 >= 4)
          {
            uint64_t v61 = v58;
            uint64_t v62 = (int *)(v16 + 48 * v58 + 240);
            while (1)
            {
              BOOL v59 = v61-- < 1;
              if (v59) {
                goto LABEL_20;
              }
              int v63 = *v62;
              v62 -= 12;
              if (!v63) {
                goto LABEL_107;
              }
            }
          }
        }
        else
        {
          int v58 = 2;
          *(_DWORD *)(v16 + 220) = 2;
          if (!*(_DWORD *)(v16 + 336))
          {
            int v58 = 1;
LABEL_111:
            uint64_t v65 = v16 + 48 * v58;
            uint64_t v66 = v65 + 272;
            int v68 = *(void **)(v65 + 272);
            uint64_t v67 = *(void **)(v65 + 280);
            int v69 = *(_DWORD *)(v65 + 288);
            *(_OWORD *)&unsigned char buf[12] = *(_OWORD *)(v65 + 304);
            *(_OWORD *)long long buf = *(_OWORD *)(v65 + 292);
            if (!v69)
            {
              uint64_t v70 = v58;
              if (v67) {
                free(v67);
              }
              *(_DWORD *)(v16 + 4 * v70 + 252) = a3;
              *(void *)uint64_t v66 = v8;
              *(void *)(v66 + 8) = 0;
              *(_DWORD *)(v66 + 16) = 0;
              *(_OWORD *)(v66 + 32) = *(_OWORD *)&buf[12];
              *(_OWORD *)(v66 + 20) = *(_OWORD *)buf;
              uint64_t v71 = v16 + 48 * (int)v70;
              *(void *)(v71 + 296) = 0;
              *(_DWORD *)(v71 + 304) = 0;
              *(void *)(v71 + 312) = 0;
              db_cache_mru((__n128 *)v16, v70);
              pthread_rwlock_unlock((pthread_rwlock_t *)(v16 + 8));
              uint64_t v46 = v68;
              goto LABEL_77;
            }
            goto LABEL_20;
          }
        }
        *(_DWORD *)(v16 + 220) = v58 + 1;
        atomic_store(0, (unsigned int *)(v16 + 228));
        atomic_store(0, (unsigned int *)(v16 + 216));
        goto LABEL_111;
      }
LABEL_64:
      if ((a4 & 4) != 0) {
        return 0;
      }
      uint64_t v8 = v91;
      goto LABEL_66;
    }
  }
  else
  {
    v86[0] = MEMORY[0x1E4F143A8];
    v86[1] = 0x40000000;
    int v87 = __page_release_block_invoke;
    int v88 = &__block_descriptor_tmp_161_11863;
    uint64_t v89 = a1;
    uint64_t v12 = *(unsigned int *)(v11 + 220);
    if ((int)v12 >= 1)
    {
      uint64_t v13 = 0;
      unsigned int v14 = (const void **)(v11 + 272);
      while (*v14 != value)
      {
        ++v13;
        v14 += 6;
        if (v12 == v13) {
          goto LABEL_11;
        }
      }
      uint64_t v30 = v11 + 4 * v13;
      int v32 = *(_DWORD *)(v30 + 252);
      uint64_t v31 = (_DWORD *)(v30 + 252);
      int v33 = v32 | a4 & 1;
      if (v32 != a3 && v33 != 0)
      {
        int v75 = __si_assert_copy_extra_329();
        uint64_t v76 = v75;
        uint64_t v77 = "";
        if (v75) {
          uint64_t v77 = v75;
        }
        __message_assert("%s:%u: failed assertion '%s' %s Pgnum: %u dbp:%p cached_pgnum::%u cached_dbp:%p index:%d size:%d", "page-cache.c", 949, "cache->cache_pgnum[i]==pgnum || (cache->cache_pgnum[i]==0 && (flags & PAGE_DIRTY)==0)", v77, a3, v8, *v31, *v14, v13, *(_DWORD *)(v11 + 220));
        free(v76);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      if (a4)
      {
        uint64_t v35 = v11 + 48 * v13;
        *(_DWORD *)(v35 + 288) = 1;
        free(*(void **)(v35 + 280));
        *(void *)(v35 + 280) = 0;
      }
      if ((a4 & 2) != 0)
      {
        *(_OWORD *)&uint8_t buf[16] = 0u;
        long long v93 = 0u;
        *(_OWORD *)long long buf = 0u;
        *(_DWORD *)long long buf = a3;
        *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)v14;
        uint64_t v36 = v11 + 48 * v13;
        *(_DWORD *)&unsigned char buf[24] = *(_DWORD *)(v36 + 288);
        *(void *)&long long v93 = *(void *)(v36 + 296);
        DWORD2(v93) = *(_DWORD *)(v36 + 304);
        uint64_t v94 = *(void *)(v36 + 312);
        v87((uint64_t)v86, (uint64_t)buf);
        uint64_t v17 = 0;
        *(_OWORD *)unsigned int v14 = *(_OWORD *)&buf[8];
        *(_DWORD *)(v36 + 288) = *(_DWORD *)&buf[24];
        *(void *)(v36 + 296) = v93;
        *(_DWORD *)(v36 + 304) = DWORD2(v93);
        *(void *)(v36 + 312) = v94;
        *uint64_t v31 = *(_DWORD *)buf;
        return v17;
      }
      return 0;
    }
LABEL_11:
    if ((a4 & 1) == 0) {
      goto LABEL_12;
    }
  }
  _add_dirty_chunk(a1, a3, v5, (a4 >> 14) & 1);
  uint64_t v22 = *(void *)(a1 + 928);
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  unsigned int v23 = atomic_load((unsigned int *)(v22 + 248));
  if (v23 > a3)
  {
    *(void *)&uint8_t buf[8] = 0;
    *(void *)long long buf = *(void *)v22;
    *(_DWORD *)&uint8_t buf[8] = a3;
    _cache_remove((uint64_t *)buf);
  }
  int v24 = v8[3];
  if ((v24 & 0xF0) == 0)
  {
    uint64_t v25 = 4;
    if ((v24 & 4) == 0) {
      uint64_t v25 = 1;
    }
    if (v5 == v8[v25])
    {
      page_cache_add(*(unsigned int **)(a1 + 928), &v91, a3, 0);
      uint64_t v8 = v91;
      int v24 = v91[3];
    }
  }
  if ((v24 & 0xC) == 0) {
    goto LABEL_59;
  }
  if ((*(_DWORD *)(a1 + 804) & 2) != 0) {
    char v26 = 3;
  }
  else {
    char v26 = 2;
  }
  uint64_t v27 = page_compress(a1, (size_t)v8, (int8x16_t **)&v90, 0, v26);
  if (v27)
  {
    uint64_t v17 = v27;
    if (v27 == 7)
    {
      int v78 = *__error();
      long long v79 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = "page_release";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2819;
        _os_log_error_impl(&dword_1BD672000, v79, OS_LOG_TYPE_ERROR, "%s:%d: page_release: ERROR: page_fetch caller responsible for making sure compressed page fits after changes.\n", buf, 0x12u);
      }
      *__error() = v78;
      int v80 = *__error();
      uint64_t v81 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
      {
        int v82 = v91[2];
        *(_DWORD *)long long buf = 136316162;
        *(void *)&uint8_t buf[4] = "page_release";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2820;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = a3;
        *(_WORD *)&unsigned char buf[24] = 1024;
        *(_DWORD *)&buf[26] = v82;
        *(_WORD *)&buf[30] = 1024;
        LODWORD(v93) = v5;
        _os_log_error_impl(&dword_1BD672000, v81, OS_LOG_TYPE_ERROR, "%s:%d: page_release: page %d used_bytes %d disk page size %d\n", buf, 0x24u);
      }
      *__error() = v80;
      long long v83 = __si_assert_copy_extra_2445(0, -1);
      CFStringRef v84 = v83;
      if (v83) {
        long long v85 = v83;
      }
      else {
        long long v85 = "";
      }
      __message_assert("%s:%u: Unexpected code path %s ", "sdb2.c", 2821, v85);
      free(v84);
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    int v28 = *__error();
    uint64_t v29 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      int v64 = v91[2];
      *(_DWORD *)long long buf = 136316418;
      *(void *)&uint8_t buf[4] = "page_release";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2826;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v17;
      *(_WORD *)&unsigned char buf[24] = 1024;
      *(_DWORD *)&buf[26] = a3;
      *(_WORD *)&buf[30] = 1024;
      LODWORD(v93) = v64;
      WORD2(v93) = 1024;
      *(_DWORD *)((char *)&v93 + 6) = v5;
      _os_log_error_impl(&dword_1BD672000, v29, OS_LOG_TYPE_ERROR, "%s:%d: page_release: ERR: compress error %d with page %d used_bytes %d disk page size %d\n", buf, 0x2Au);
    }
    *__error() = v28;
    *(_DWORD *)(a1 + 4) |= 2u;
    *(_DWORD *)(a1 + 800) = v17;
    return v17;
  }
  if (!v90)
  {
    uint64_t v8 = v91;
LABEL_59:
    if ((*(unsigned char *)(a1 + 4) & 0x80) != 0)
    {
      db2_swap_page((size_t)v8);
      uint64_t v8 = v91;
    }
    uint64_t v5 = (int)v5;
    uint64_t v37 = sdb_pwrite(*(void *)(a1 + 848), (uint64_t)v8, (int)v5, (unint64_t)a3 << *(_DWORD *)(a1 + 12));
    if ((*(unsigned char *)(a1 + 4) & 0x80) != 0) {
      db2_swap_page((size_t)v91);
    }
    goto LABEL_63;
  }
  uint64_t v5 = (int)v5;
  uint64_t v37 = sdb_pwrite(*(void *)(a1 + 848), (uint64_t)v90, (int)v5, (unint64_t)a3 << *(_DWORD *)(a1 + 12));
  free(v90);
LABEL_63:
  if (v37 == v5) {
    goto LABEL_64;
  }
  *(_DWORD *)(a1 + 4) |= 2u;
  int v47 = *__error();
  size_t v48 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = "page_release";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2863;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = a3;
    _os_log_error_impl(&dword_1BD672000, v48, OS_LOG_TYPE_ERROR, "%s:%d: Failed writing pgnum %d", buf, 0x18u);
  }
  *__error() = v47;
  if (!*__error()) {
    *__error() = 22;
  }
  *(_DWORD *)(a1 + 800) = *__error();
  return *__error();
}

__n128 db_cache_mru(__n128 *a1, int a2)
{
  uint64_t v3 = &a1[3 * a2];
  __n128 v19 = v3[17];
  __n128 v20 = v3[18];
  __n128 v21 = v3[19];
  int v4 = a1[15].n128_i32[a2 + 3];
  if (a2 >= 1)
  {
    uint64_t v6 = a2;
    uint64_t v7 = a1 + 17;
    uint64_t v8 = 3 * a2;
    do
    {
      uint64_t v9 = v6 - 1;
      uint64_t v10 = &v7[v8];
      uint64_t v11 = &a1[3 * (v6 - 1)];
      __n128 v12 = v11[17];
      __n128 v13 = v11[19];
      v10[1] = v11[18];
      v10[2] = v13;
      __n128 *v10 = v12;
      *((_DWORD *)&v7[-1] + v6 - 1) = a1[15].n128_u32[(v6 - 1) + 3];
      uint64_t v14 = v7[v8].n128_i64[0];
      if (v14 && (*(unsigned char *)(v14 + 12) & 0xC) == 0)
      {
        unsigned int v15 = __si_assert_copy_extra_329();
        uint64_t v16 = v15;
        uint64_t v17 = "";
        if (v15) {
          uint64_t v17 = v15;
        }
        __message_assert("%s:%u: failed assertion '%s' %s Bad cache page at index %d; max %d, start %d",
          "page-cache.c",
          679,
          "cache->cache_entries[i].cache_dbps->flags & DB_PAGE_COMPRESSION_ENABLED",
          v17,
          v6,
          a1[13].n128_u32[3],
          a2);
        free(v16);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      v8 -= 3;
      --v6;
    }
    while ((unint64_t)(v9 + 1) > 1);
  }
  a1[17] = v19;
  a1[18] = v20;
  __n128 result = v21;
  a1[19] = v21;
  a1[15].n128_u32[3] = v4;
  return result;
}

uint64_t page_resize(uint64_t a1, void **a2, char a3, int a4, unint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a2) {
    return 22;
  }
  uint64_t v10 = *a2;
  if (!*a2) {
    return 22;
  }
  char v13 = a3 ^ 1;
  uint64_t result = 22;
  if (a4 <= 0x1000000) {
    char v13 = 0;
  }
  if ((v13 & 1) == 0 && v10[2] <= a4)
  {
    int v16 = malloc_size(v10);
    int v17 = v16;
    uint64_t v18 = *a2;
    if (v16 >= a4)
    {
      uint64_t result = 0;
      v18[1] = v17;
    }
    else
    {
      uint64_t v19 = 4;
      if ((v18[3] & 4) == 0) {
        uint64_t v19 = 1;
      }
      int v20 = v18[v19];
      if (v20 <= v16) {
        int v21 = v16;
      }
      else {
        int v21 = v20;
      }
      do
        v21 *= 2;
      while (v21 < a4);
      uint64_t v22 = (int)v18[1];
      size_t v23 = v21;
      int v24 = malloc_type_realloc(*a2, v21, 0xDFE7BFBFuLL);
      *a2 = v24;
      if (v24)
      {
        uint64_t v25 = v24;
        v24[1] = v21;
        if (v24 != v18)
        {
          uint64_t v26 = *(void *)(a1 + 928);
          if (*(int *)(v26 + 220) < 1) {
            goto LABEL_29;
          }
          uint64_t v27 = 0;
          uint64_t v28 = v26 + 272;
          while (1)
          {
            if (*(void **)v28 == v25)
            {
              *(void *)uint64_t v28 = 0;
              *(_DWORD *)(v26 + 252 + 4 * v27) = 0;
              free(*(void **)(v28 + 8));
              *(void *)(v28 + 8) = 0;
              *(void *)(v28 + 24) = 0;
              *(_DWORD *)(v28 + 32) = 0;
              *(void *)(v28 + 40) = 0;
              if (*(_DWORD **)v28 == v18) {
                goto LABEL_24;
              }
            }
            else if (*(_DWORD **)v28 == v18)
            {
LABEL_24:
              *(void *)uint64_t v28 = v25;
              free(*(void **)(v28 + 8));
              *(void *)(v28 + 8) = 0;
              *(void *)(v28 + 24) = 0;
              *(_DWORD *)(v28 + 32) = 0;
              *(void *)(v28 + 40) = 0;
            }
            ++v27;
            v28 += 48;
            if (v27 >= *(int *)(v26 + 220))
            {
              uint64_t v25 = *a2;
              size_t v23 = *((int *)*a2 + 1);
              goto LABEL_29;
            }
          }
        }
        uint64_t v25 = v18;
LABEL_29:
        if (malloc_size(v25) < v23)
        {
          int v33 = __si_assert_copy_extra_2445(0, -1);
          unsigned int v34 = v33;
          uint64_t v35 = "";
          if (v33) {
            uint64_t v35 = v33;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 2721, "(size_t)(*dbpp)->size <= malloc_size(*dbpp)", v35);
          free(v34);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        uint64_t v36 = (unint64_t **)&a9;
        if (a5)
        {
          do
          {
            unint64_t v30 = *a5;
            if (*a5) {
              BOOL v31 = v30 >= (unint64_t)v18;
            }
            else {
              BOOL v31 = 0;
            }
            if (v31 && v30 <= (unint64_t)v18 + v22) {
              *a5 = (unint64_t)*a2 + v30 - (void)v18;
            }
            uint64_t v29 = v36++;
            a5 = *v29;
          }
          while (*v29);
        }
        return 0;
      }
      else
      {
        *a2 = v18;
        return 12;
      }
    }
  }
  return result;
}

uint64_t db_cache_contains(uint64_t a1, unsigned int a2, int a3)
{
  char v3 = a3;
  if (a3) {
    pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 8));
  }
  unint64_t v6 = *(unsigned int *)(a1 + 220);
  if ((int)v6 < 1)
  {
    BOOL v9 = 0;
    if (v3) {
LABEL_8:
    }
      pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 8));
  }
  else
  {
    uint64_t v7 = 63;
    do
    {
      int v8 = *(_DWORD *)(a1 + 4 * v7);
      BOOL v9 = v8 == a2;
      if (v7 - 62 >= v6) {
        break;
      }
      ++v7;
    }
    while (v8 != a2);
    if (v3) {
      goto LABEL_8;
    }
  }
  if (v9) {
    return 1;
  }
  uint64_t v10 = *(unsigned int *)(a1 + 220);
  if ((int)v10 < 1)
  {
LABEL_14:
    unsigned int v13 = atomic_load((unsigned int *)(a1 + 248));
    if (v13 > a2)
    {
      if (sdb_init_cache_onceToken != -1) {
        dispatch_once(&sdb_init_cache_onceToken, &__block_literal_global_30);
      }
      if (sdb_init_cache_status == 1)
      {
        cache_get_info_for_key();
        return 1;
      }
    }
    return 1;
  }
  uint64_t v11 = (int *)(a1 + 252);
  while (1)
  {
    int v12 = *v11++;
    if (v12 == a2) {
      return 0;
    }
    if (!--v10) {
      goto LABEL_14;
    }
  }
}

double db_cache_add_page(__n128 *a1, unsigned char *a2, unsigned char *a3, unsigned __int32 a4)
{
  if (!a1[13].n128_u32[3])
  {
    LODWORD(v11) = 2;
    a1[13].n128_u32[3] = 2;
    int v14 = 1;
LABEL_14:
    uint64_t v11 = v11;
    unsigned int v15 = a1 + 17;
    int v16 = &a1[15].n128_u32[3];
    while (1)
    {
      int v17 = *v16++;
      if (v17 == a4) {
        break;
      }
      if ((unsigned char *)v15->n128_u64[0] == a2)
      {
        unint64_t v30 = __si_assert_copy_extra_329();
        uint64_t v28 = v30;
        BOOL v31 = "";
        if (v30) {
          BOOL v31 = v30;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "page-cache.c", 1320, "dbp != cache->cache_entries[i].cache_dbps", v31);
        goto LABEL_38;
      }
      v15 += 3;
      if (!--v11) {
        goto LABEL_18;
      }
    }
    uint64_t v27 = __si_assert_copy_extra_329();
    uint64_t v28 = v27;
    uint64_t v29 = "";
    if (v27) {
      uint64_t v29 = v27;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "page-cache.c", 1319, "pgnum != cache->cache_pgnum[i]", v29);
LABEL_38:
    free(v28);
    if (__valid_fs(-1)) {
      uint64_t v32 = 2989;
    }
    else {
      uint64_t v32 = 3072;
    }
    *(_DWORD *)uint64_t v32 = -559038737;
    abort();
  }
  unsigned int v8 = atomic_load(&a1[14].n128_u32[1]);
  int v9 = 100 * v8;
  signed int v10 = atomic_load(&a1[13].n128_u32[2]);
  LODWORD(v11) = a1[13].n128_u32[3];
  if (v9 > v10 && (int)v11 <= 3)
  {
    if (a1[15].n128_u32[(int)v11 + 2])
    {
      int v13 = atomic_load(&a1[14].n128_u32[1]);
      LODWORD(v11) = a1[13].n128_u32[3];
      if (v13 > 10 * (int)v11 && MEMORY[0xFFFFFC030] <= 0x32u)
      {
        LODWORD(v11) = v11 + 1;
        a1[13].n128_u32[3] = v11;
        atomic_store(0, &a1[14].n128_u32[1]);
        atomic_store(0, &a1[13].n128_u32[2]);
      }
    }
  }
  int v14 = v11 - 1;
  if ((int)v11 >= 1) {
    goto LABEL_14;
  }
LABEL_18:
  if ((a2[12] & 0xC) == 0)
  {
    int v33 = __si_assert_copy_extra_329();
    uint64_t v28 = v33;
    unsigned int v34 = "";
    if (v33) {
      unsigned int v34 = v33;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "page-cache.c", 1322, "dbp->flags & 0x0000000C", v34);
    goto LABEL_38;
  }
  uint64_t v18 = &a1[3 * v14];
  uint64_t v19 = v18 + 17;
  int v21 = (unsigned char *)v18[17].n128_u64[0];
  int v20 = (void *)v18[17].n128_u64[1];
  *(__n128 *)&v37[12] = v18[19];
  *(__n128 *)uint64_t v37 = *(__n128 *)((char *)v18 + 292);
  if (v18[18].n128_u32[0])
  {
    uint64_t v35 = __si_assert_copy_extra_329();
    uint64_t v28 = v35;
    uint64_t v36 = "";
    if (v35) {
      uint64_t v36 = v35;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "page-cache.c", 1328, "entry.cache_dirty==0", v36);
    goto LABEL_38;
  }
  if (v20) {
    free(v20);
  }
  if (a2 == a3)
  {
    free(v21);
  }
  else if (v21 != a2)
  {
    uint64_t v22 = __si_assert_copy_extra_329();
    size_t v23 = v22;
    int v24 = "";
    if (v22) {
      int v24 = v22;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "page-cache.c", 1350, "entry.cache_dbps == dbp", v24);
    free(v23);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  a1[15].n128_u32[v14 + 3] = a4;
  v19->n128_u64[0] = (unint64_t)a2;
  v19->n128_u64[1] = 0;
  v19[1].n128_u32[0] = 0;
  v19[2] = *(__n128 *)&v37[12];
  *(__n128 *)((char *)v19 + 20) = *(__n128 *)v37;
  uint64_t v25 = &a1[3 * v14];
  v25[18].n128_u64[1] = 0;
  v25[19].n128_u32[0] = 0;
  v25[19].n128_u64[1] = 0;
  *(void *)&double result = db_cache_mru(a1, v14).n128_u64[0];
  return result;
}

intptr_t ___ZN20SISearchCtx_METADATA7cleanUpEb_block_invoke_3(uint64_t a1)
{
  ContentIndexDocSetIteratorDispose(*(void **)(a1 + 32));
  uint64_t v1 = freeSemaphore;
  return dispatch_semaphore_signal(v1);
}

void ContentIndexDocSetIteratorDispose(void *a1)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    free(*(void **)(v2 + 8));
    char v3 = *(void **)(v2 + 32);
    if (*(unsigned char *)(v2 + 40)) {
      munmap(v3, *(void *)(v2 + 88));
    }
    else {
      free(v3);
    }
    free(*(void **)(v2 + 120));
    free((void *)v2);
  }
  uint64_t v4 = a1[9];
  if (v4 >= 1)
  {
    for (uint64_t i = 0; i < v4; ++i)
    {
      uint64_t v6 = a1[i + 10];
      if (v6)
      {
        ContentIndexDocSetDispose(v6);
        uint64_t v4 = a1[9];
      }
    }
  }
  uint64_t v7 = (void *)*a1;
  if (*a1 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    unsigned int v8 = (atomic_uint **)v7[2];
    if (v8)
    {
      fd_release(v8[561]);
      free(v8);
    }
    int v9 = (atomic_uint **)v7[1];
    if (v9)
    {
      fd_release(v9[561]);
      free(v9);
    }
    signed int v10 = (pthread_rwlock_t *)v7[3];
    if (v10) {
      posreadunlock(v10);
    }
    free(v7);
  }
  free(a1);
}

void si_enqueue_work_inner_with_qos(uint64_t a1, uint64_t *a2, qos_class_t a3, unint64_t a4, uint64_t a5)
{
  if (!a2)
  {
    int v17 = __si_assert_copy_extra_625(-1);
    uint64_t v18 = v17;
    uint64_t v19 = "";
    if (v17) {
      uint64_t v19 = v17;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIScheduler.c", 584, "queue", v19);
    free(v18);
    if (__valid_fs(-1)) {
      uint64_t v20 = 2989;
    }
    else {
      uint64_t v20 = 3072;
    }
    *(_DWORD *)uint64_t v20 = -559038737;
    abort();
  }
  if (!a1 || (uint64_t v9 = *a2) != 0 && (*(_DWORD *)(v9 + 96) || *(unsigned char *)(v9 + 56)))
  {
    ((void (*)(uint64_t, uint64_t))a4)(a5, 1);
  }
  else
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 124), 1u, memory_order_relaxed);
    signed int v10 = a2[2];
    *(int64x2_t *)(a2 + 7) = vaddq_s64(*(int64x2_t *)(a2 + 7), vdupq_n_s64(1uLL));
    uint64_t v11 = malloc_type_malloc(0x48uLL, 0x10A0040047F2C8DuLL);
    v11[4] = a5;
    void v11[5] = 0;
    void v11[6] = 0;
    v11[7] = a5 ^ a4;
    *uint64_t v11 = a1;
    v11[1] = v9;
    _DWORD v11[2] = a2;
    v11[3] = a4;
    BOOL v12 = *(_DWORD *)(a1 + 128) == 1 && (a2[7] & 0xF) == 0;
    *((unsigned char *)v11 + 64) = v12;
    if (a3 <= QOS_CLASS_USER_INITIATED) {
      int v13 = 25;
    }
    else {
      int v13 = a3;
    }
    if (gTurboMode) {
      a3 = v13;
    }
    if (*(void *)(v9 + 184) && *(_DWORD *)(v9 + 208) < a3)
    {
      pthread_mutex_lock(*(pthread_mutex_t **)(v9 + 8));
      int v14 = *(_opaque_pthread_t **)(v9 + 184);
      if (v14)
      {
        if (*(_DWORD *)(v9 + 208) < a3)
        {
          unsigned int v15 = *(pthread_override_s **)(v9 + 200);
          *(void *)(v9 + 200) = pthread_override_qos_class_start_np(v14, a3, 0);
          *(_DWORD *)(v9 + 208) = a3;
          if (v15) {
            pthread_override_qos_class_end_np(v15);
          }
        }
      }
      pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 8));
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __enqueue_work_with_qos_block_invoke;
    block[3] = &__block_descriptor_tmp_58;
    block[4] = v11;
    dispatch_block_t v16 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, a3, 0, block);
    dispatch_async(v10, v16);
    _Block_release(v16);
  }
}

BOOL SIQueryAddResultFilter(uint64_t a1, const void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = queryFromCFString((uint64_t)a2);
  if (dword_1E9FC90A8 >= 5)
  {
    int v15 = *__error();
    dispatch_block_t v16 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(a1 + 8);
      *(_DWORD *)long long buf = 138412546;
      *(void *)&uint8_t buf[4] = a2;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v17;
      _os_log_impl(&dword_1BD672000, v16, OS_LOG_TYPE_DEFAULT, "Adding filter %@ to query %@", buf, 0x16u);
    }
    *__error() = v15;
  }
  BOOL v5 = v4 != 0;
  if (v4)
  {
    if (*(unsigned char *)(a1 + 672))
    {
      *(void *)long long buf = MEMORY[0x1E4F143A8];
      *(void *)&uint8_t buf[8] = 0x40000000;
      *(void *)&uint8_t buf[16] = __db_query_tree_apply_block_block_invoke;
      *(void *)&unsigned char buf[24] = &unk_1E6348598;
      uint64_t v19 = &__block_literal_global_21_12478;
      uint64_t tree_apply_block_with_meta = (void *)db_query_tree_apply_block_with_meta(v4, (uint64_t)buf, (uint64_t)&__block_literal_global_25);
      *(void *)long long buf = tree_apply_block_with_meta;
      if (tree_apply_block_with_meta)
      {
        decorateExpandingFunctions(tree_apply_block_with_meta, *(void *)a1, *(const void **)(a1 + 656), *(double *)(a1 + 360));
        db_optimize_query_tree((void **)buf);
        CFSetRef Mutable = *(__CFArray **)(a1 + 720);
        if (!Mutable)
        {
          CFSetRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
          *(void *)(a1 + 720) = Mutable;
        }
        CFArrayAppendValue(Mutable, a2);
        CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 720));
        uint64_t v9 = malloc_type_realloc(*(void **)(a1 + 728), 8 * Count, 0x80040B8603338uLL);
        *(void *)(a1 + 728) = v9;
        v9[Count - 1] = *(void *)buf;
      }
    }
    uint64_t v10 = *(void *)(a1 + 80);
    if (v10) {
      uint64_t v4 = (void *)makeAndNode(v10, (uint64_t)v4, 1, 1);
    }
    *(void *)(a1 + 80) = v4;
  }
  else
  {
    int v11 = *__error();
    BOOL v12 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "SIQueryAddResultFilter";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 974;
      *(_WORD *)&unsigned char buf[18] = 2112;
      *(void *)&buf[20] = a2;
      _os_log_error_impl(&dword_1BD672000, v12, OS_LOG_TYPE_ERROR, "%s:%d: Failed adding filter: %@", buf, 0x1Cu);
    }
    *__error() = v11;
  }
  return v5;
}

CFStringRef queryFromCFString(uint64_t a1)
{
  CFStringRef result = (const __CFString *)MEMORY[0x1F4188790](a1);
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  char v28 = 0;
  if (!result) {
    return result;
  }
  int v7 = v5;
  char v8 = v4;
  double v9 = v6;
  uint64_t v10 = v3;
  CFDictionaryRef v11 = v2;
  CFStringRef v12 = result;
  CFTypeID TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(v12)) {
    return 0;
  }
  bzero(v32, 0x1000uLL);
  int v14 = fasterUTF8String(v12, &v29, v32, 4096, &v28);
  if (v14)
  {
    int v15 = v14;
    int v16 = *v14;
    if ((v16 - 35) > 0x1D || ((1 << (v16 - 35)) & 0x20000003) == 0)
    {
      unsigned char *v10 = 0;
    }
    else
    {
      unsigned char *v10 = v16;
      ++v14;
    }
    query_node_with_ann = db_make_query_node_with_ann(v14, v11);
    if (query_node_with_ann && v7)
    {
      BOOL tree = db_sanitize_query_tree((uint64_t *)&query_node_with_ann, 1, v8, v9);
      BOOL v19 = tree;
      if (tree && dword_1E9FC90A8 >= 4)
      {
        cStr = (char *)malloc_type_malloc(0x400uLL, 0xABC43933uLL);
        if (_db_render_query_tree((uint64_t)&query_node_with_ann))
        {
          CFStringRef v20 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr, 0x8000100u);
          if (v20)
          {
            CFStringRef v21 = v20;
            int v22 = *__error();
            size_t v23 = _SILogForLogForCategory(1);
            os_log_type_t v24 = 2 * (dword_1E9FC90A8 < 4);
            if (os_log_type_enabled(v23, v24))
            {
              int buf = 138412290;
              CFStringRef v34 = v21;
              _os_log_impl(&dword_1BD672000, v23, v24, "Sanitized to %@", (uint8_t *)&buf, 0xCu);
            }
            *__error() = v22;
            CFRelease(v21);
          }
        }
        free(cStr);
      }
      if (!v19)
      {
        db_free_query_node(query_node_with_ann);
        query_node_with_ann = 0;
      }
    }
    if (v28) {
      free(v15);
    }
    return (const __CFString *)query_node_with_ann;
  }
  if (dword_1E9FC90A8 < 5) {
    return 0;
  }
  int v25 = *__error();
  uint64_t v26 = _SILogForLogForCategory(1);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1BD672000, v26, OS_LOG_TYPE_DEFAULT, "Couldn't make query string", (uint8_t *)&buf, 2u);
  }
  uint64_t v27 = __error();
  CFStringRef result = 0;
  *uint64_t v27 = v25;
  return result;
}

void *db_make_query_node_with_ann(char *a1, const __CFDictionary *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (!*a1) {
    return 0;
  }
  unint64_t v28 = 0;
  uint64_t v29 = 0;
  int v4 = strlen(a1);
  int v5 = check_and_decompose_string((unsigned __int8 *)a1, v4 + 1, &v29, &v28);
  if (v5)
  {
    int v6 = v5;
    int v7 = *__error();
    char v8 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315906;
      *(void *)&uint8_t buf[4] = "db_make_query_node_with_ann";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 6015;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v6;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = a1;
      _os_log_error_impl(&dword_1BD672000, v8, OS_LOG_TYPE_ERROR, "%s:%d: invalid query (%d) - %s", buf, 0x22u);
    }
    double v9 = 0;
    *__error() = v7;
  }
  else
  {
    uint64_t v10 = v29;
    int v26 = 3;
    int valuePtr = 3;
    int v25 = 0;
    if (a2 && CFDictionaryContainsKey(a2, @"vectors"))
    {
      CFDictionaryGetValue(a2, @"vectors");
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"vec_data_format");
      if (Value) {
        CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      }
      CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(a2, @"vec_dimensions");
      if (v12) {
        CFNumberGetValue(v12, kCFNumberIntType, &v26);
      }
      CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(a2, @"vec_version");
      if (v13) {
        CFNumberGetValue(v13, kCFNumberSInt32Type, &v25);
      }
    }
    int v24 = 0;
    size_t v23 = v10;
    unint64_t v14 = v28;
    double v9 = or_expr(&v23, 1, &v24);
    if (v9)
    {
      int v15 = (unsigned __int8 *)(v23 - v10);
      if (v23 - v10 != v14 - 1)
      {
        int v16 = *__error();
        uint64_t v17 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136316162;
          *(void *)&uint8_t buf[4] = "db_make_query_node_with_ann";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 6125;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(void *)&buf[20] = v15;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = v14;
          *(_WORD *)&buf[38] = 2080;
          uint64_t v36 = v10;
          _os_log_error_impl(&dword_1BD672000, v17, OS_LOG_TYPE_ERROR, "%s:%d: query used %ld of %ld - %s", buf, 0x30u);
        }
        *__error() = v16;
      }
      uint64_t v31 = 0;
      uint64_t v32 = &v31;
      uint64_t v33 = 0x2000000000;
      uint64_t v34 = 0;
      v30[0] = MEMORY[0x1E4F143A8];
      v30[1] = 0x40000000;
      v30[2] = __db_count_query_tree_block_invoke;
      v30[3] = &unk_1E63486C8;
      v30[4] = &v31;
      *(void *)int buf = MEMORY[0x1E4F143A8];
      *(void *)&uint8_t buf[8] = 0x40000000;
      *(void *)&uint8_t buf[16] = __db_query_tree_apply_block_block_invoke;
      *(void *)&unsigned char buf[24] = &unk_1E6348598;
      *(void *)&unsigned char buf[32] = v30;
      db_query_tree_apply_block_with_meta(v9, (uint64_t)buf, 0);
      unint64_t v18 = v32[3];
      _Block_object_dispose(&v31, 8);
      if (v18 >= 0x801)
      {
        int v19 = *__error();
        CFStringRef v20 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          int tree = db_count_query_tree(v9);
          *(_DWORD *)int buf = 136316162;
          *(void *)&uint8_t buf[4] = "db_make_query_node_with_ann";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 6136;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = tree;
          *(_WORD *)&unsigned char buf[24] = 1024;
          *(_DWORD *)&buf[26] = 2048;
          *(_WORD *)&buf[30] = 2080;
          *(void *)&unsigned char buf[32] = a1;
          _os_log_error_impl(&dword_1BD672000, v20, OS_LOG_TYPE_ERROR, "%s:%d: query node count %d exceeded %d - %s", buf, 0x28u);
        }
        *__error() = v19;
        *(void *)int buf = MEMORY[0x1E4F143A8];
        *(void *)&uint8_t buf[8] = 0x40000000;
        *(void *)&uint8_t buf[16] = __db_query_tree_apply_block_block_invoke;
        *(void *)&unsigned char buf[24] = &unk_1E6348598;
        *(void *)&unsigned char buf[32] = &__block_literal_global_161;
        db_query_tree_apply_block_with_meta(v9, (uint64_t)buf, 0);
        double v9 = 0;
      }
    }
    if (v10 != (unsigned __int8 *)a1) {
      free(v10);
    }
  }
  return v9;
}

void *or_expr(unsigned __int8 **a1, int a2, _DWORD *a3)
{
  int v6 = *a1;
  if (*a1)
  {
    while (1)
    {
      unsigned int v7 = *v6;
      BOOL v8 = v7 > 0x20;
      uint64_t v9 = (1 << v7) & 0x100001600;
      if (v8 || v9 == 0) {
        break;
      }
      ++v6;
    }
  }
  *a1 = v6;
  CFStringRef result = and_expr(a1, a2, a3);
  if (!result) {
    return result;
  }
  CFNumberRef v12 = result;
  CFNumberRef v13 = *a1;
  if (*a1)
  {
    while (1)
    {
      unsigned int v14 = *v13;
      BOOL v8 = v14 > 0x20;
      uint64_t v15 = (1 << v14) & 0x100001600;
      if (v8 || v15 == 0) {
        break;
      }
      ++v13;
    }
  }
  *a1 = v13;
  if (*v13 != 124)
  {
    uint64_t v33 = 0;
LABEL_42:
    if (v33) {
      return v33;
    }
    else {
      return v12;
    }
  }
  uint64_t v33 = 0;
  uint64_t v17 = 0;
  while (1)
  {
    *a1 = v13 + 1;
    if (v13[1] != 124) {
      goto LABEL_47;
    }
    for (uint64_t i = v13 + 2; ; ++i)
    {
      unsigned int v19 = *i;
      BOOL v8 = v19 > 0x20;
      uint64_t v20 = (1 << v19) & 0x100001600;
      if (v8 || v20 == 0) {
        break;
      }
    }
    *a1 = i;
    int v22 = and_expr(a1, a2, a3);
    size_t v23 = v22;
    int v24 = *a1;
    if (*a1)
    {
      while (1)
      {
        unsigned int v25 = *v24;
        BOOL v8 = v25 > 0x20;
        uint64_t v26 = (1 << v25) & 0x100001600;
        if (v8 || v26 == 0) {
          break;
        }
        ++v24;
      }
    }
    *a1 = v24;
    if (!v22)
    {
      uint64_t v32 = v33;
      if (v33)
      {
        *(void *)int buf = MEMORY[0x1E4F143A8];
        uint64_t v35 = 0x40000000;
        uint64_t v36 = __db_query_tree_apply_block_block_invoke;
        uint64_t v37 = &unk_1E6348598;
        uint64_t v38 = &__block_literal_global_161;
        goto LABEL_55;
      }
LABEL_47:
      *(void *)int buf = MEMORY[0x1E4F143A8];
      uint64_t v35 = 0x40000000;
      uint64_t v36 = __db_query_tree_apply_block_block_invoke;
      uint64_t v37 = &unk_1E6348598;
      uint64_t v38 = &__block_literal_global_161;
      uint64_t v32 = v12;
      goto LABEL_55;
    }
    int v28 = (*a3)++;
    if (v28 > 2048) {
      return 0;
    }
    if (!v17) {
      break;
    }
    if (*MEMORY[0x1E4F14B00] <= 0x4FuLL) {
      ++sTotal_12395;
    }
    uint64_t v29 = v17[1];
    unint64_t v30 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x50uLL, 0x31F9A007uLL);
    if (!v30)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
      }
      v17[1] = 0;
      *(void *)int buf = MEMORY[0x1E4F143A8];
      uint64_t v35 = 0x40000000;
      uint64_t v36 = __db_query_tree_apply_block_block_invoke;
      uint64_t v37 = &unk_1E6348598;
      uint64_t v38 = &__block_literal_global_161;
      db_query_tree_apply_block_with_meta(v33, (uint64_t)buf, 0);
      *(void *)int buf = MEMORY[0x1E4F143A8];
      uint64_t v35 = 0x40000000;
      uint64_t v36 = __db_query_tree_apply_block_block_invoke;
      uint64_t v37 = &unk_1E6348598;
      uint64_t v38 = &__block_literal_global_161;
      goto LABEL_54;
    }
    v17[1] = v30;
    *unint64_t v30 = v29;
    uint64_t v17 = v30;
LABEL_16:
    *((_WORD *)v17 + 24) = 1;
    v17[1] = v23;
    CFNumberRef v13 = *a1;
    if (**a1 != 124) {
      goto LABEL_42;
    }
  }
  if (*MEMORY[0x1E4F14B00] <= 0x4FuLL) {
    ++sTotal_12395;
  }
  uint64_t v31 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x50uLL, 0x31F9A007uLL);
  if (v31)
  {
    uint64_t v17 = v31;
    *uint64_t v31 = v12;
    uint64_t v33 = v31;
    goto LABEL_16;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
  }
  *(void *)int buf = MEMORY[0x1E4F143A8];
  uint64_t v35 = 0x40000000;
  uint64_t v36 = __db_query_tree_apply_block_block_invoke;
  uint64_t v37 = &unk_1E6348598;
  uint64_t v38 = &__block_literal_global_161;
  db_query_tree_apply_block_with_meta(v12, (uint64_t)buf, 0);
  *(void *)int buf = MEMORY[0x1E4F143A8];
  uint64_t v35 = 0x40000000;
  uint64_t v36 = __db_query_tree_apply_block_block_invoke;
  uint64_t v37 = &unk_1E6348598;
  uint64_t v38 = &__block_literal_global_161;
LABEL_54:
  uint64_t v32 = v23;
LABEL_55:
  db_query_tree_apply_block_with_meta(v32, (uint64_t)buf, 0);
  return 0;
}

void *and_expr(unsigned __int8 **a1, int a2, _DWORD *a3)
{
  CFStringRef result = factor(a1, a2, a3);
  if (!result) {
    return result;
  }
  unsigned int v7 = result;
  BOOL v8 = *a1;
  if (*a1)
  {
    while (1)
    {
      unsigned int v9 = *v8;
      BOOL v10 = v9 > 0x20;
      uint64_t v11 = (1 << v9) & 0x100001600;
      if (v10 || v11 == 0) {
        break;
      }
      ++v8;
    }
  }
  *a1 = v8;
  if (*v8 != 38)
  {
    uint64_t v29 = 0;
LABEL_36:
    if (v29) {
      return v29;
    }
    else {
      return v7;
    }
  }
  uint64_t v29 = 0;
  CFNumberRef v13 = 0;
  while (1)
  {
    *a1 = v8 + 1;
    if (v8[1] != 38) {
      goto LABEL_41;
    }
    for (uint64_t i = v8 + 2; ; ++i)
    {
      unsigned int v15 = *i;
      BOOL v10 = v15 > 0x20;
      uint64_t v16 = (1 << v15) & 0x100001600;
      if (v10 || v16 == 0) {
        break;
      }
    }
    *a1 = i;
    unint64_t v18 = factor(a1, a2, a3);
    unsigned int v19 = v18;
    uint64_t v20 = *a1;
    if (*a1)
    {
      while (1)
      {
        unsigned int v21 = *v20;
        BOOL v10 = v21 > 0x20;
        uint64_t v22 = (1 << v21) & 0x100001600;
        if (v10 || v22 == 0) {
          break;
        }
        ++v20;
      }
    }
    *a1 = v20;
    if (!v18)
    {
      int v28 = v29;
      if (v29)
      {
        *(void *)int buf = MEMORY[0x1E4F143A8];
        uint64_t v31 = 0x40000000;
        uint64_t v32 = __db_query_tree_apply_block_block_invoke;
        uint64_t v33 = &unk_1E6348598;
        uint64_t v34 = &__block_literal_global_161;
        goto LABEL_49;
      }
LABEL_41:
      *(void *)int buf = MEMORY[0x1E4F143A8];
      uint64_t v31 = 0x40000000;
      uint64_t v32 = __db_query_tree_apply_block_block_invoke;
      uint64_t v33 = &unk_1E6348598;
      uint64_t v34 = &__block_literal_global_161;
      int v28 = v7;
      goto LABEL_49;
    }
    int v24 = (*a3)++;
    if (v24 > 2048) {
      return 0;
    }
    if (!v13) {
      break;
    }
    if (*MEMORY[0x1E4F14B00] <= 0x4FuLL) {
      ++sTotal_12395;
    }
    uint64_t v25 = v13[1];
    uint64_t v26 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x50uLL, 0x31F9A007uLL);
    if (!v26)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
      }
      v13[1] = 0;
      *(void *)int buf = MEMORY[0x1E4F143A8];
      uint64_t v31 = 0x40000000;
      uint64_t v32 = __db_query_tree_apply_block_block_invoke;
      uint64_t v33 = &unk_1E6348598;
      uint64_t v34 = &__block_literal_global_161;
      db_query_tree_apply_block_with_meta(v29, (uint64_t)buf, 0);
      *(void *)int buf = MEMORY[0x1E4F143A8];
      uint64_t v31 = 0x40000000;
      uint64_t v32 = __db_query_tree_apply_block_block_invoke;
      uint64_t v33 = &unk_1E6348598;
      uint64_t v34 = &__block_literal_global_161;
      goto LABEL_48;
    }
    v13[1] = v26;
    *uint64_t v26 = v25;
    CFNumberRef v13 = v26;
LABEL_10:
    *((_WORD *)v13 + 24) = 2;
    v13[1] = v19;
    BOOL v8 = *a1;
    if (**a1 != 38) {
      goto LABEL_36;
    }
  }
  if (*MEMORY[0x1E4F14B00] <= 0x4FuLL) {
    ++sTotal_12395;
  }
  uint64_t v27 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x50uLL, 0x31F9A007uLL);
  if (v27)
  {
    CFNumberRef v13 = v27;
    *uint64_t v27 = v7;
    uint64_t v29 = v27;
    goto LABEL_10;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
  }
  *(void *)int buf = MEMORY[0x1E4F143A8];
  uint64_t v31 = 0x40000000;
  uint64_t v32 = __db_query_tree_apply_block_block_invoke;
  uint64_t v33 = &unk_1E6348598;
  uint64_t v34 = &__block_literal_global_161;
  db_query_tree_apply_block_with_meta(v7, (uint64_t)buf, 0);
  *(void *)int buf = MEMORY[0x1E4F143A8];
  uint64_t v31 = 0x40000000;
  uint64_t v32 = __db_query_tree_apply_block_block_invoke;
  uint64_t v33 = &unk_1E6348598;
  uint64_t v34 = &__block_literal_global_161;
LABEL_48:
  int v28 = v19;
LABEL_49:
  db_query_tree_apply_block_with_meta(v28, (uint64_t)buf, 0);
  return 0;
}

void *factor(unsigned __int8 **a1, int a2, _DWORD *a3)
{
  int v5 = *a1;
  int v6 = *v5;
  if (v6 == 33)
  {
    ++v5;
    while (1)
    {
      unsigned int v7 = *v5;
      BOOL v8 = v7 > 0x20;
      uint64_t v9 = (1 << v7) & 0x100001600;
      if (v8 || v9 == 0) {
        break;
      }
      ++v5;
    }
    *a1 = v5;
    if (*v5 == 40) {
      goto LABEL_17;
    }
LABEL_9:
    query_uint64_t piece = get_query_piece((uint64_t)v5);
    if (!query_piece) {
      return 0;
    }
    uint64_t v12 = query_piece;
    CFNumberRef v13 = *a1;
    if (*a1)
    {
      while (1)
      {
        unsigned int v14 = *v13;
        BOOL v8 = v14 > 0x20;
        uint64_t v15 = (1 << v14) & 0x100001600;
        if (v8 || v15 == 0) {
          break;
        }
        ++v13;
      }
    }
    *a1 = v13;
    int v22 = (*a3)++;
    if (v22 < 2049)
    {
      if (*MEMORY[0x1E4F14B00] <= 0x4FuLL) {
        ++sTotal_12395;
      }
      size_t v23 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x50uLL, 0x31F9A007uLL);
      if (v23)
      {
        unsigned int v21 = v23;
        uint64_t v24 = *(unsigned int *)(v12 + 24);
        if (v24 == 9)
        {
          free_qp(v12);
          BOOL v25 = v6 == 33;
          __int16 v26 = 16;
          __int16 v27 = 32;
        }
        else
        {
          if (v24 != 10)
          {
            v23[24] = 4;
            *((void *)v23 + 2) = v12;
            if (v6 == 33)
            {
              if ((v24 - 16) >= 0xFFFFFFF1) {
                int v30 = dword_1BDA88360[v24];
              }
              else {
                int v30 = 0;
              }
              *(_DWORD *)(v12 + 24) = v30;
            }
            return v21;
          }
          free_qp(v12);
          BOOL v25 = v6 == 33;
          __int16 v26 = 32;
          __int16 v27 = 16;
        }
        if (v25) {
          __int16 v26 = v27;
        }
        *((_WORD *)v21 + 24) = v26;
        return v21;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
      {
        LOWORD(v31) = 0;
        _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)&v31, 2u);
      }
    }
    free_qp(v12);
    return 0;
  }
  if (v6 != 40) {
    goto LABEL_9;
  }
LABEL_17:
  for (uint64_t i = v5 + 1; ; ++i)
  {
    unsigned int v18 = *i;
    BOOL v8 = v18 > 0x20;
    uint64_t v19 = (1 << v18) & 0x100001600;
    if (v8 || v19 == 0) {
      break;
    }
  }
  *a1 = i;
  if (a2 > 99) {
    return 0;
  }
  int v28 = (void *)or_expr(a1, (a2 + 1), a3);
  unsigned int v21 = v28;
  if (v28)
  {
    if (v6 == 33)
    {
      uint64_t v31 = MEMORY[0x1E4F143A8];
      uint64_t v32 = 0x40000000;
      uint64_t v33 = __db_query_tree_apply_block_block_invoke;
      uint64_t v34 = &unk_1E6348598;
      uint64_t v35 = &__block_literal_global_12437;
      db_query_tree_apply_block_with_meta(v28, (uint64_t)&v31, 0);
    }
    if (**a1 == 41)
    {
      ++*a1;
    }
    else
    {
      uint64_t v31 = MEMORY[0x1E4F143A8];
      uint64_t v32 = 0x40000000;
      uint64_t v33 = __db_query_tree_apply_block_block_invoke;
      uint64_t v34 = &unk_1E6348598;
      uint64_t v35 = &__block_literal_global_161;
      db_query_tree_apply_block_with_meta(v21, (uint64_t)&v31, 0);
      return 0;
    }
  }
  return v21;
}

uint64_t get_query_piece(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v3 = v2;
  int v5 = v4;
  int v6 = (char *)v1;
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  if (*MEMORY[0x1E4F14B00] <= 0x12FuLL) {
    ++sTotal_12395;
  }
  unsigned int v7 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x130uLL, 0x31F9A007uLL);
  if (!v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
    }
    return 0;
  }
  uint64_t v8 = (uint64_t)v7;
  char v9 = *v6;
  if (*v6)
  {
    uint64_t v10 = MEMORY[0x1E4F14390];
    do
    {
      if (v9 < 0)
      {
        if (!__maskrune(v9, 0x4000uLL)) {
          break;
        }
      }
      else if ((*(_DWORD *)(v10 + 4 * v9 + 60) & 0x4000) == 0)
      {
        break;
      }
      int v11 = *++v6;
      char v9 = v11;
    }
    while (v11);
  }
  int v125 = 0;
  bzero(__src, 0x420uLL);
  __str = v6;
  if (!*v6) {
    goto LABEL_273;
  }
  __str = parse_string_piece(v6, __src, 1056, &v125);
  uint64_t v12 = process_qp_field_name(v8, __src, v125);
  if (!v12) {
    goto LABEL_273;
  }
  CFNumberRef v13 = v12;
  *(void *)uint64_t v8 = v12;
  char v14 = *__str;
  if (*__str)
  {
    uint64_t v15 = __str + 1;
    uint64_t v16 = MEMORY[0x1E4F14390];
    while (1)
    {
      if (v14 < 0)
      {
        if (!__maskrune(v14, 0x4000uLL)) {
          goto LABEL_18;
        }
      }
      else if ((*(_DWORD *)(v16 + 4 * v14 + 60) & 0x4000) == 0)
      {
LABEL_18:
        CFNumberRef v13 = *(char **)v8;
        break;
      }
      __str = v15;
      int v17 = *v15++;
      char v14 = v17;
      if (!v17) {
        goto LABEL_18;
      }
    }
  }
  if (!strcasecmp(v13, "true"))
  {
    *(_DWORD *)(v8 + 24) = 10;
    if (!v13)
    {
LABEL_37:
      *(void *)uint64_t v8 = 0;
      *int v5 = __str;
      return v8;
    }
LABEL_36:
    free(v13);
    goto LABEL_37;
  }
  if (!strcasecmp(v13, "false"))
  {
    *(_DWORD *)(v8 + 24) = 9;
    if (!v13) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  unsigned int v18 = __str;
  int v19 = *__str;
  if (v19 != 40) {
    goto LABEL_30;
  }
  if (_os_feature_enabled_impl() && !strcmp("aNN.data", *(const char **)v8))
  {
    *(_DWORD *)(v8 + 24) = 15;
    __int16 v27 = __str + 1;
    uint64_t v28 = MEMORY[0x1E4F14390];
    while (1)
    {
      __str = v27;
      unsigned int v30 = *v27++;
      unsigned int v29 = v30;
      if (!v30) {
        break;
      }
      if ((v29 & 0x80000000) != 0)
      {
        if (!__maskrune(v29, 0x4000uLL)) {
          break;
        }
      }
      else if ((*(_DWORD *)(v28 + 4 * v29 + 60) & 0x4000) == 0)
      {
        break;
      }
    }
    free(*(void **)v8);
    __str = parse_string_piece(__str, __src, 1056, &v125);
    *(void *)uint64_t v8 = process_qp_field_name(v8, __src, v125);
    if (!parse_comma(__str, &__str)) {
      goto LABEL_273;
    }
    *(void *)int buf = 0;
    uint64_t v31 = strtol(__str, (char **)buf, 0);
    uint64_t v32 = *(char **)buf;
    if (!*(void *)buf) {
      goto LABEL_273;
    }
    if (*(char **)buf == __str) {
      goto LABEL_273;
    }
    __str = *(char **)buf;
    *(void *)int buf = 0;
    if (!parse_comma(v32, &__str)) {
      goto LABEL_273;
    }
    unsigned int v33 = strtol(__str, (char **)buf, 0);
    uint64_t v34 = *(char **)buf;
    if (!*(void *)buf || *(char **)buf == __str) {
      goto LABEL_273;
    }
    int v35 = *(_DWORD *)(v8 + 60);
    unsigned int v36 = v33 < 0x100000 ? v35 & 0xFF00000F | (16 * (v33 & 0xFFFFF)) : v35 | 0xFFFFF0;
    *(_DWORD *)(v8 + 60) = v36;
    __str = v34;
    ++*(_DWORD *)(v8 + 40);
    *(void *)int buf = 0;
    if (!parse_comma(v34, &__str)) {
      goto LABEL_273;
    }
    float v96 = strtof(__str, (char **)buf);
    CFArrayRef v97 = *(char **)buf;
    if (!*(void *)buf) {
      goto LABEL_273;
    }
    if (*(char **)buf == __str) {
      goto LABEL_273;
    }
    *(float *)(v8 + 64) = v96;
    ++*(_DWORD *)(v8 + 40);
    __str = v97;
    if (!parse_comma(v97, &__str)) {
      goto LABEL_273;
    }
    *(_DWORD *)(v8 + 160) |= 0x10000u;
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v3, v8, v31) & 1) == 0) {
      *(_DWORD *)(v8 + 60) &= 0xFF00000F;
    }
    *(_DWORD *)(v8 + 40) += 3;
    CFIndex v98 = __str;
    int v99 = *__str;
    if (v99 == 49)
    {
      unint64_t v116 = __str + 1;
      goto LABEL_259;
    }
    if (v99 == 48)
    {
      unint64_t v116 = __str + 1;
LABEL_261:
      __str = v116;
      unsigned int v117 = *(_DWORD *)(v8 + 60) & 0xFEFFFFFF;
LABEL_262:
      *(_DWORD *)(v8 + 60) = v117;
      CFIndex v98 = parse_whitespace(v116);
      __str = v98;
      if (*v98 != 41) {
        goto LABEL_273;
      }
      goto LABEL_263;
    }
    if (v99 != 41) {
      goto LABEL_273;
    }
LABEL_229:
    *(_DWORD *)(v8 + 60) &= ~0x1000000u;
LABEL_263:
    uint64_t v46 = v98 + 1;
    goto LABEL_120;
  }
  int v20 = _os_feature_enabled_impl();
  unsigned int v21 = *(const char **)v8;
  if (v20 && !strcmp("aNN", *(const char **)v8))
  {
    *(_DWORD *)(v8 + 24) = 15;
    uint64_t v61 = __str + 1;
    uint64_t v62 = MEMORY[0x1E4F14390];
    while (1)
    {
      __str = v61;
      unsigned int v64 = *v61++;
      unsigned int v63 = v64;
      if (!v64) {
        break;
      }
      if ((v63 & 0x80000000) != 0)
      {
        if (!__maskrune(v63, 0x4000uLL)) {
          break;
        }
      }
      else if ((*(_DWORD *)(v62 + 4 * v63 + 60) & 0x4000) == 0)
      {
        break;
      }
    }
    free(*(void **)v8);
    __str = parse_string_piece(__str, __src, 1056, &v125);
    *(void *)uint64_t v8 = process_qp_field_name(v8, __src, v125);
    if (parse_comma(__str, &__str))
    {
      uint64_t v65 = __str;
      int v66 = *__str;
      if (v66 == 52)
      {
        int v67 = 0;
        uint64_t v65 = ++__str;
        *(_DWORD *)(v8 + 60) &= 0xFFFFFFF3;
        int v68 = 1;
        unsigned int v69 = 4;
      }
      else if (v66 == 50)
      {
        int v68 = 0;
        uint64_t v65 = ++__str;
        *(_DWORD *)(v8 + 60) = *(_DWORD *)(v8 + 60) & 0xFFFFFFF3 | 4;
        int v67 = 1;
        unsigned int v69 = 2;
      }
      else
      {
        int v67 = 0;
        int v68 = 0;
        if (v66 == 49)
        {
          uint64_t v65 = ++__str;
          *(_DWORD *)(v8 + 60) = *(_DWORD *)(v8 + 60) & 0xFFFFFFF3 | 8;
          unsigned int v69 = 1;
        }
        else
        {
          unsigned int v69 = 0;
        }
      }
      ++*(_DWORD *)(v8 + 40);
      if (parse_comma(v65, &__str))
      {
        *(void *)int buf = 0;
        unsigned int v93 = strtol(__str, (char **)buf, 0);
        uint64_t v94 = *(char **)buf;
        if (*(void *)buf)
        {
          if (*(char **)buf != __str)
          {
            switch(v93)
            {
              case 0x100u:
                unsigned int v95 = *(_DWORD *)(v8 + 60) & 0xFFFFFFFC;
                break;
              case 0x200u:
                unsigned int v95 = *(_DWORD *)(v8 + 60) & 0xFFFFFFFC | 1;
                break;
              case 0x300u:
                unsigned int v95 = *(_DWORD *)(v8 + 60) & 0xFFFFFFFC | 2;
                break;
              default:
                goto LABEL_273;
            }
            *(_DWORD *)(v8 + 60) = v95;
            ++*(_DWORD *)(v8 + 40);
            __str = v94;
            if (parse_comma(v94, &__str))
            {
              uint64_t v100 = __str;
              if (*__str == 118)
              {
                *(_DWORD *)(v8 + 60) = *(_DWORD *)(v8 + 60) & 0x1FFFFFF | (strtoul(++__str, (char **)buf, 0) << 25);
                __str = *(char **)buf;
                if (!parse_comma(*(char **)buf, &__str)) {
                  goto LABEL_273;
                }
                uint64_t v100 = __str;
              }
              else
              {
                *(_DWORD *)(v8 + 60) &= 0x1FFFFFFu;
              }
              if (*v100 == 105)
              {
                __str = v100 + 1;
                if (v100[1] == 120)
                {
                  uint64_t v101 = v100 + 2;
                  int v102 = -1;
                }
                else
                {
                  unsigned int v103 = strtol(v100 + 1, (char **)buf, 0);
                  if (v103 > 2) {
                    int v102 = -1;
                  }
                  else {
                    int v102 = v103;
                  }
                  uint64_t v101 = *(char **)buf;
                }
                *(_DWORD *)(v8 + 80) = v102;
                __str = v101;
                if ((parse_comma(v101, &__str) & 1) == 0) {
                  goto LABEL_273;
                }
              }
              else
              {
                *(_DWORD *)(v8 + 80) = 0;
              }
              uint64_t v104 = malloc_type_malloc(v93 * (unint64_t)v69, 0x86104BD8uLL);
              uint64_t v105 = 0;
              *(void *)(v8 + 296) = v104;
              *(_DWORD *)(v8 + 160) |= 0x10000u;
              CFTypeID v106 = __str;
              do
              {
                *(void *)int buf = 0;
                _S0 = strtof(v106, (char **)buf);
                if (v67)
                {
                  __asm { FCVT            H0, S0 }
                  *(_WORD *)(*(void *)(v8 + 296) + 2 * v105) = _H0;
                }
                else
                {
                  if (!v68) {
                    goto LABEL_273;
                  }
                  *(float *)(*(void *)(v8 + 296) + 4 * v105) = _S0;
                }
                if (!*(void *)buf) {
                  goto LABEL_273;
                }
                __str = *(char **)buf;
                CFTypeID v106 = parse_whitespace(*(unsigned char **)buf);
                __str = v106;
                ++v105;
              }
              while (v93 != v105);
              ++*(_DWORD *)(v8 + 40);
              if (!parse_comma(v106, &__str)) {
                goto LABEL_273;
              }
              *(void *)int buf = 0;
              unsigned int v112 = strtol(__str, (char **)buf, 0);
              int v113 = *(char **)buf;
              if (!*(void *)buf || *(char **)buf == __str) {
                goto LABEL_273;
              }
              int v114 = *(_DWORD *)(v8 + 60);
              unsigned int v115 = v112 < 0x100000 ? v114 & 0xFF00000F | (16 * (v112 & 0xFFFFF)) : v114 | 0xFFFFF0;
              *(_DWORD *)(v8 + 60) = v115;
              __str = v113;
              ++*(_DWORD *)(v8 + 40);
              if (!parse_comma(v113, &__str)) {
                goto LABEL_273;
              }
              float v118 = strtof(__str, (char **)buf);
              int v119 = *(char **)buf;
              if (!*(void *)buf || *(char **)buf == __str) {
                goto LABEL_273;
              }
              *(float *)(v8 + 64) = v118;
              ++*(_DWORD *)(v8 + 40);
              __str = v119;
              CFIndex v98 = parse_whitespace(v119);
              __str = v98;
              if (*v98 != 41)
              {
                if (!parse_comma(v98, &__str)) {
                  goto LABEL_273;
                }
                int v120 = *__str;
                if (v120 != 49)
                {
                  if (v120 != 48) {
                    goto LABEL_273;
                  }
                  unint64_t v116 = __str + 1;
                  goto LABEL_261;
                }
                unint64_t v116 = __str + 1;
LABEL_259:
                __str = v116;
                unsigned int v117 = *(_DWORD *)(v8 + 60) | 0x1000000;
                goto LABEL_262;
              }
              goto LABEL_229;
            }
          }
        }
      }
    }
LABEL_273:
    if (*(void *)v8)
    {
      free(*(void **)v8);
      *(void *)uint64_t v8 = 0;
    }
    unint64_t v121 = *(void **)(v8 + 72);
    if (v121) {
      free(v121);
    }
    free((void *)v8);
    return 0;
  }
  if (!strcmp("InRange", v21))
  {
    int v23 = 11;
  }
  else
  {
    if (strcmp("FieldMatch", v21))
    {
      unsigned int v18 = __str;
      if (!*(_DWORD *)(v8 + 24))
      {
        int v19 = *__str;
LABEL_30:
        switch(v19)
        {
          case '!':
            if (v18[1] != 61) {
              goto LABEL_273;
            }
            int v22 = 5;
            goto LABEL_48;
          case '<':
            uint64_t v24 = (unsigned __int8 *)(v18 + 1);
            __str = v18 + 1;
            if (v18[1] == 61)
            {
              int v22 = 3;
              goto LABEL_48;
            }
            int v26 = 7;
            goto LABEL_133;
          case '=':
            *(_DWORD *)(v8 + 24) = 1;
            uint64_t v24 = (unsigned __int8 *)(v18 + 1);
            __str = v18 + 1;
            int v25 = v18[1];
            if (v25 != 61) {
              goto LABEL_135;
            }
            uint64_t v24 = (unsigned __int8 *)(v18 + 2);
            __str = v18 + 2;
            int v25 = v18[2];
            if (v25 != 61) {
              goto LABEL_135;
            }
            uint64_t v24 = (unsigned __int8 *)(v18 + 3);
            __str = v18 + 3;
            int v26 = 2;
            goto LABEL_133;
          case '>':
            uint64_t v24 = (unsigned __int8 *)(v18 + 1);
            __str = v18 + 1;
            if (v18[1] == 61)
            {
              int v22 = 4;
LABEL_48:
              *(_DWORD *)(v8 + 24) = v22;
              uint64_t v24 = (unsigned __int8 *)(v18 + 2);
              __str = v18 + 2;
            }
            else
            {
              int v26 = 8;
LABEL_133:
              *(_DWORD *)(v8 + 24) = v26;
            }
            int v25 = *v24;
LABEL_135:
            if (!v25) {
              goto LABEL_273;
            }
            uint64_t v70 = (char *)(v24 + 1);
            uint64_t v71 = MEMORY[0x1E4F14390];
            break;
          default:
            goto LABEL_273;
        }
        while (1)
        {
          if ((v25 & 0x80) != 0)
          {
            if (!__maskrune((char)v25, 0x4000uLL)) {
              goto LABEL_141;
            }
          }
          else if ((*(_DWORD *)(v71 + 4 * (char)v25 + 60) & 0x4000) == 0)
          {
LABEL_141:
            if (*__str)
            {
              __str = parse_string_piece(__str, __src, 1056, &v125);
              size_t v73 = strlen(__src);
              __int16 v74 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v73 + 1, 0x6085D6BuLL);
              if (!v74) {
                _log_fault_for_malloc_failure();
              }
              memcpy(v74, __src, v73);
              *((unsigned char *)v74 + v73) = 0;
              *(void *)(v8 + 72) = v74;
              while (1)
              {
                uint64_t v46 = __str;
                switch(*__str)
                {
                  case 'L':
                    uint64_t v76 = ++__str;
                    if (v46[1] != 40) {
                      continue;
                    }
                    *(void *)__s = 0;
                    uint32_t v129 = __s;
                    uint64_t v130 = 0x2000000000;
                    uint64_t v131 = 0;
                    *(void *)int buf = MEMORY[0x1E4F143A8];
                    uint64_t v133 = 0x40000000;
                    unint64_t v134 = (void (*)(uint8_t *, float))__get_wildcard_limit_block_invoke;
                    CFArrayRef v135 = &unk_1E6348980;
                    CFArrayRef v136 = __s;
                    uint64_t v137 = v8;
                    __str = _process_proximities(v76, (uint64_t)buf);
                    goto LABEL_202;
                  case 'W':
                    uint64_t v77 = ++__str;
                    if (v46[1] != 40) {
                      continue;
                    }
                    *(void *)__s = 0;
                    uint32_t v129 = __s;
                    uint64_t v130 = 0x2000000000;
                    uint64_t v131 = 0;
                    *(void *)int buf = MEMORY[0x1E4F143A8];
                    uint64_t v133 = 0x40000000;
                    unint64_t v134 = (void (*)(uint8_t *, float))__get_weights_block_invoke;
                    CFArrayRef v135 = &unk_1E6348958;
                    CFArrayRef v136 = __s;
                    uint64_t v137 = v8;
                    if (*v77 != 40) {
                      goto LABEL_201;
                    }
                    int v78 = v46 + 2;
                    break;
                  case 'a':
                    uint64_t v88 = *(void *)(v8 + 32) | 0x6000000000;
                    goto LABEL_191;
                  case 'b':
                    uint64_t v75 = *(void *)(v8 + 32) | 0x20000000;
                    goto LABEL_146;
                  case 'c':
                    uint64_t v75 = *(void *)(v8 + 32) | 0x10;
                    goto LABEL_146;
                  case 'd':
                    uint64_t v75 = *(void *)(v8 + 32) | 0x20;
                    goto LABEL_146;
                  case 'f':
                    *(void *)(v8 + 32) |= 0x800000uLL;
                    __str = v46 + 2;
                    int v89 = 100 * __maskrune(v46[1], 0xFuLL);
                    BOOL v90 = __str++;
                    LOBYTE(v89) = v89 + 10 * __maskrune(*v90, 0xFuLL);
                    int v91 = __str++;
                    *(unsigned char *)(v8 + 28) = (v89 + __maskrune(*v91, 0xFuLL)) & 0x7F;
                    continue;
                  case 'i':
                    uint64_t v75 = *(void *)(v8 + 32) | 0x200000000;
                    goto LABEL_146;
                  case 'j':
                    uint64_t v75 = *(void *)(v8 + 32) | 8;
                    goto LABEL_146;
                  case 'n':
                    uint64_t v88 = *(void *)(v8 + 32) | 0x2000000000;
                    goto LABEL_191;
                  case 'o':
                    uint64_t v88 = *(void *)(v8 + 32) | 0x4000000000;
LABEL_191:
                    *(void *)(v8 + 32) = v88;
                    __str = v46 + 1;
                    if (v46[1] == 40) {
                      get_proximities(v8, v46 + 1, &__str);
                    }
                    continue;
                  case 'p':
                    uint64_t v75 = *(void *)(v8 + 32) | 0x40000000;
                    goto LABEL_146;
                  case 'r':
                    uint64_t v75 = *(void *)(v8 + 32) | 2;
                    goto LABEL_146;
                  case 's':
                    uint64_t v75 = *(void *)(v8 + 32) | 0x1000000;
                    goto LABEL_146;
                  case 't':
                    uint64_t v75 = *(void *)(v8 + 32) | 4;
                    goto LABEL_146;
                  case 'w':
                    uint64_t v75 = *(void *)(v8 + 32) | 0x40;
                    goto LABEL_146;
                  case 'x':
                    uint64_t v75 = *(void *)(v8 + 32) | 0x100000000;
                    goto LABEL_146;
                  case 'z':
                    uint64_t v75 = *(void *)(v8 + 32) | 0x80000000;
LABEL_146:
                    *(void *)(v8 + 32) = v75;
                    __str = v46 + 1;
                    continue;
                  default:
                    goto LABEL_120;
                }
                do
                {
                  while (1)
                  {
                    uint64_t v77 = v78;
                    unsigned int v80 = *v78;
                    if (!*v78) {
                      goto LABEL_159;
                    }
                    if ((v80 & 0x80000000) == 0) {
                      break;
                    }
                    int v79 = __maskrune(v80, 0x4000uLL);
                    int v78 = v77 + 1;
                    if (!v79) {
                      goto LABEL_159;
                    }
                  }
                  ++v78;
                }
                while ((*(_DWORD *)(v71 + 4 * v80 + 60) & 0x4000) != 0);
LABEL_159:
                *(void *)int v126 = v77;
LABEL_160:
                int v81 = *v77;
                if (!*v77) {
                  goto LABEL_201;
                }
                if (v81 != 41) {
                  break;
                }
                ++v77;
LABEL_201:
                __str = v77;
LABEL_202:
                _Block_object_dispose(__s, 8);
              }
              int v82 = (unsigned __int8 *)(v77 + 1);
              do
              {
                if ((v81 & 0x80) != 0)
                {
                  if (!__maskrune((char)v81, 0x4000uLL)) {
                    goto LABEL_167;
                  }
                }
                else if ((*(_DWORD *)(v71 + 4 * (char)v81 + 60) & 0x4000) == 0)
                {
LABEL_167:
                  uint64_t v77 = *(char **)v126;
                  int v81 = **(unsigned char **)v126;
                  goto LABEL_169;
                }
                *(void *)int v126 = v82;
                int v83 = *v82++;
                int v81 = v83;
              }
              while (v83);
              uint64_t v77 = (char *)(v82 - 1);
LABEL_169:
              if (v81 == 46 || ((char)v81 - 48) <= 9)
              {
                float v85 = strtof(v77, (char **)v126);
                v134(buf, v85);
                uint64_t v77 = *(char **)v126;
                int v81 = **(unsigned char **)v126;
              }
              if (!v81)
              {
LABEL_158:
                ++v77;
                goto LABEL_159;
              }
              unsigned int v86 = v77 + 1;
              while (1)
              {
                if ((v81 & 0x80) != 0)
                {
                  if (!__maskrune((char)v81, 0x4000uLL)) {
                    goto LABEL_180;
                  }
                }
                else if ((*(_DWORD *)(v71 + 4 * (char)v81 + 60) & 0x4000) == 0)
                {
LABEL_180:
                  uint64_t v77 = *(char **)v126;
                  if (**(unsigned char **)v126 != 41) {
                    goto LABEL_158;
                  }
                  goto LABEL_160;
                }
                *(void *)int v126 = v86;
                int v87 = *v86++;
                LOBYTE(v81) = v87;
                if (!v87)
                {
                  uint64_t v77 = v86;
                  goto LABEL_159;
                }
              }
            }
            goto LABEL_273;
          }
          __str = v70;
          int v72 = *v70++;
          LOBYTE(v25) = v72;
          if (!v72) {
            goto LABEL_273;
          }
        }
      }
      goto LABEL_64;
    }
    int v23 = 13;
  }
  *(_DWORD *)(v8 + 24) = v23;
  unsigned int v18 = __str;
LABEL_64:
  uint64_t v37 = v18 + 1;
  uint64_t v38 = MEMORY[0x1E4F14390];
  while (1)
  {
    __str = v37;
    unsigned int v40 = *v37++;
    unsigned int v39 = v40;
    if (!v40) {
      break;
    }
    if ((v39 & 0x80000000) != 0)
    {
      if (!__maskrune(v39, 0x4000uLL)) {
        break;
      }
    }
    else if ((*(_DWORD *)(v38 + 4 * v39 + 60) & 0x4000) == 0)
    {
      break;
    }
  }
  free(*(void **)v8);
  __str = parse_string_piece(__str, __src, 1056, &v125);
  *(void *)uint64_t v8 = process_qp_field_name(v8, __src, v125);
  char v41 = *__str;
  if (!*__str) {
    goto LABEL_82;
  }
  uint64_t v42 = __str + 1;
  while (v41 < 0)
  {
    if (!__maskrune(v41, 0x4000uLL)) {
      goto LABEL_75;
    }
LABEL_72:
    int v43 = *v42++;
    char v41 = v43;
    if (!v43) {
      goto LABEL_82;
    }
  }
  if ((*(_DWORD *)(v38 + 4 * v41 + 60) & 0x4000) != 0) {
    goto LABEL_72;
  }
LABEL_75:
  if (*(v42 - 1) == 44)
  {
    while (1)
    {
      uint64_t v44 = v42;
      unsigned int v45 = *v42;
      if (!*v42) {
        break;
      }
      if ((v45 & 0x80000000) != 0)
      {
        ++v42;
        if (!__maskrune(v45, 0x4000uLL)) {
          break;
        }
      }
      else
      {
        ++v42;
        if ((*(_DWORD *)(v38 + 4 * v45 + 60) & 0x4000) == 0) {
          break;
        }
      }
    }
    __str = v44;
  }
LABEL_82:
  uint64_t v46 = __str;
  size_t v47 = strlen(__str);
  char v48 = *__str;
  if (!*__str)
  {
LABEL_114:
    *(_DWORD *)(v8 + 40) = 0;
    goto LABEL_115;
  }
  int v123 = &__str[v47];
  while (2)
  {
    if (v48 < 0)
    {
      if (!__maskrune(v48, 0x4000uLL)) {
        goto LABEL_88;
      }
LABEL_85:
      int v49 = *++v46;
      char v48 = v49;
      if (!v49) {
        goto LABEL_114;
      }
      continue;
    }
    break;
  }
  if ((*(_DWORD *)(v38 + 4 * v48 + 60) & 0x4000) != 0) {
    goto LABEL_85;
  }
LABEL_88:
  int v50 = *v46;
  if (!*v46) {
    goto LABEL_114;
  }
  bzero(buf, 0x2000uLL);
  uint64_t v51 = 0;
  unsigned int v52 = 0;
  while (v50 != 41)
  {
    bzero(__s, 0x400uLL);
    uint64_t v46 = parse_string_piece(v46, __s, 1024, 0);
    size_t v53 = strlen(__s);
    int v54 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v53 + 1, 0x6085D6BuLL);
    if (!v54 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int v126 = 0;
      _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", v126, 2u);
    }
    memcpy(v54, __s, v53);
    *((unsigned char *)v54 + v53) = 0;
    *(void *)&buf[8 * v51] = v54;
    char v55 = *v46;
    if (!*v46) {
      goto LABEL_110;
    }
    int v56 = v46 + 1;
    while (v55 < 0)
    {
      if (!__maskrune(v55, 0x4000uLL)) {
        goto LABEL_100;
      }
LABEL_97:
      int v57 = *++v46;
      char v55 = v57;
      ++v56;
      if (!v57) {
        goto LABEL_110;
      }
    }
    if ((*(_DWORD *)(v38 + 4 * v55 + 60) & 0x4000) != 0) {
      goto LABEL_97;
    }
LABEL_100:
    _CF = *v46 != 44 || v46 >= v123;
    if (!_CF)
    {
      while (1)
      {
        uint64_t v46 = v56;
        unsigned int v59 = *v56;
        if (!*v56) {
          break;
        }
        if ((v59 & 0x80000000) != 0)
        {
          ++v56;
          if (!__maskrune(v59, 0x4000uLL)) {
            break;
          }
        }
        else
        {
          ++v56;
          if ((*(_DWORD *)(v38 + 4 * v59 + 60) & 0x4000) == 0) {
            break;
          }
        }
      }
    }
LABEL_110:
    ++v51;
    int v50 = *v46;
    if (*v46)
    {
      _CF = v52++ >= 0x3FF;
      if (!_CF) {
        continue;
      }
    }
    goto LABEL_204;
  }
  ++v46;
LABEL_204:
  *(_DWORD *)(v8 + 40) = v51;
  if (v51)
  {
    uint64_t v92 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 8 * v51, 0x6085D6BuLL);
    if (!v92 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)__s = 0;
      _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)__s, 2u);
    }
    *(void *)(v8 + 168) = v92;
    memcpy(v92, buf, 8 * v51);
  }
LABEL_115:
  __str = v46;
  int v60 = *(_DWORD *)(v8 + 24);
  if (v60 == 13)
  {
    if (*(int *)(v8 + 40) < 1) {
      goto LABEL_273;
    }
  }
  else if (v60 == 11 && *(_DWORD *)(v8 + 40) != 2)
  {
    goto LABEL_273;
  }
LABEL_120:
  *int v5 = v46;
  return v8;
}

unsigned char *parse_string_piece(unsigned char *__src, unsigned char *a2, int a3, _DWORD *a4)
{
  int v5 = (int)a2;
  unint64_t v7 = (unint64_t)&a2[a3 - 1];
  while (2)
  {
    int v8 = *__src;
    switch(*__src)
    {
      case 0:
        goto LABEL_24;
      case 9:
      case 0xA:
      case 0x20:
        ++__src;
        continue;
      case 0x22:
      case 0x27:
        int v10 = *++__src;
        LOBYTE(v9) = v10;
        if (v10)
        {
          int v11 = a2;
          while (1)
          {
            if (v8 == v9)
            {
              ++__src;
              goto LABEL_64;
            }
            if (v9 == 92)
            {
              int v9 = __src[1];
              if (v9 != 34 && v9 != 39)
              {
                if (v9 == 92)
                {
                  if ((unint64_t)v11 < v7) {
                    *v11++ = 92;
                  }
                  uint64_t v12 = 5;
                  ++__src;
                }
                else
                {
                  uint64_t v12 = 5u;
                }
LABEL_20:
                uint64_t v13 = utf8_byte_length(unsigned char)::utf8_len_table[v12];
                char v14 = &v11[v13];
                if ((unint64_t)&v11[v13] >= v7)
                {
                  unint64_t v7 = (unint64_t)v11;
                }
                else
                {
                  memcpy(v11, __src, utf8_byte_length(unsigned char)::utf8_len_table[v12]);
                  int v11 = v14;
                }
                __src += v13;
                goto LABEL_7;
              }
              ++__src;
            }
            uint64_t v12 = v9 >> 4;
            if ((v12 & 0xC) != 8) {
              goto LABEL_20;
            }
            ++__src;
LABEL_7:
            LOBYTE(v9) = *__src;
            if (!*__src) {
              goto LABEL_64;
            }
          }
        }
LABEL_24:
        LODWORD(v11) = a2;
        *a2 = 0;
        if (a4) {
          goto LABEL_65;
        }
        return __src;
      case 0x24:
        int v19 = *++__src;
        LOBYTE(v18) = v19;
        *a2 = 36;
        int v11 = a2 + 1;
        if (!v19) {
          goto LABEL_64;
        }
        int v20 = 0;
        uint64_t v21 = 1;
        while (1)
        {
          int v22 = __src++;
          switch((char)v18)
          {
            case 9:
            case 10:
            case 32:
            case 33:
            case 38:
            case 44:
            case 60:
            case 61:
            case 62:
            case 124:
              if (!v20) {
                goto LABEL_70;
              }
              goto LABEL_46;
            case 40:
              ++v20;
              goto LABEL_46;
            case 41:
              if (!v20) {
                goto LABEL_70;
              }
              if (!--v20)
              {
                if ((unint64_t)v11 < v7) {
                  *v11++ = v18;
                }
                uint64_t v21 = 2;
LABEL_70:
                stat __src = &v22[v21 - 1];
                *int v11 = 0;
                if (!a4) {
                  return __src;
                }
LABEL_65:
                *a4 = v11 - v5;
                return __src;
              }
LABEL_46:
              if ((_BYTE)v18 && (unint64_t)v11 < v7) {
                *v11++ = v18;
              }
              LOBYTE(v18) = *__src;
              if (!*__src)
              {
LABEL_64:
                *int v11 = 0;
                if (!a4) {
                  return __src;
                }
                goto LABEL_65;
              }
              break;
            case 92:
              if (v18 == 92)
              {
                int v18 = *__src;
                if (v18 == 39 || v18 == 34)
                {
                  stat __src = v22 + 2;
                }
                else
                {
                  int v24 = v22[2];
                  int v23 = v22 + 2;
                  if (v24 == 92)
                  {
                    if ((unint64_t)v11 < v7)
                    {
                      *v11++ = 92;
                      LOBYTE(v18) = *__src;
                    }
                    stat __src = v23;
                  }
                  else
                  {
                    LOBYTE(v18) = 92;
                  }
                }
              }
              goto LABEL_46;
            default:
              goto LABEL_46;
          }
        }
      default:
        int v11 = a2;
        while (2)
        {
          uint64_t v15 = __src + 1;
          switch((char)v8)
          {
            case 9:
            case 10:
            case 32:
            case 33:
            case 38:
            case 40:
            case 41:
            case 44:
            case 60:
            case 61:
            case 62:
            case 124:
              goto LABEL_64;
            case 92:
              if (v8 == 92)
              {
                int v8 = *v15;
                if (v8 == 39 || v8 == 34)
                {
                  uint64_t v15 = __src + 2;
                }
                else
                {
                  int v17 = __src[2];
                  uint64_t v16 = __src + 2;
                  if (v17 == 92)
                  {
                    if ((unint64_t)v11 < v7)
                    {
                      *v11++ = 92;
                      LOBYTE(v8) = *v15;
                    }
                    uint64_t v15 = v16;
                  }
                  else
                  {
                    LOBYTE(v8) = 92;
                  }
                }
              }
              goto LABEL_33;
            default:
LABEL_33:
              if ((_BYTE)v8 && (unint64_t)v11 < v7) {
                *v11++ = v8;
              }
              LOBYTE(v8) = *v15;
              stat __src = v15;
              if (*v15) {
                continue;
              }
              goto LABEL_64;
          }
        }
    }
  }
}

char *process_qp_field_name(uint64_t a1, char *__s1, int a3)
{
  unsigned int v4 = a3 - 2;
  if (a3 < 2 || __s1[a3 - 1] != 93)
  {
LABEL_37:
    if (!*__s1) {
      return 0;
    }
    switch(*__s1)
    {
      case 'c':
        if (strncmp(__s1, "created.", 8uLL)) {
          goto LABEL_64;
        }
        if (!strcmp(__s1 + 9, "date"))
        {
          int v19 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x1DuLL, 0x6085D6BuLL);
          if (!v19) {
            _log_fault_for_malloc_failure();
          }
          strcpy(v19, "kMDItemUserCreatedUserHandle");
          return v19;
        }
        if (strcmp(__s1 + 9, "user")) {
          goto LABEL_64;
        }
        int v17 = "kMDItemUserCreatedDate";
        goto LABEL_104;
      case 'd':
        if (strncmp(__s1, "downloaded.", 0xBuLL)) {
          goto LABEL_64;
        }
        if (!strcmp(__s1 + 12, "date"))
        {
          int v19 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x20uLL, 0x6085D6BuLL);
          if (!v19) {
            _log_fault_for_malloc_failure();
          }
          strcpy(v19, "kMDItemUserDownloadedUserHandle");
          return v19;
        }
        if (strcmp(__s1 + 12, "user")) {
          goto LABEL_64;
        }
        int v17 = "kMDItemUserDownloadedDate";
        goto LABEL_104;
      case 'm':
        if (strncmp(__s1, "modified.", 9uLL)) {
          goto LABEL_64;
        }
        if (!strcmp(__s1 + 10, "date"))
        {
          int v19 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x18uLL, 0x6085D6BuLL);
          if (!v19) {
            _log_fault_for_malloc_failure();
          }
          strcpy(v19, "kMDItemUserModifiedDate");
          return v19;
        }
        if (strcmp(__s1 + 10, "user")) {
          goto LABEL_64;
        }
        int v17 = "kMDItemUserModifiedUserHandle";
        goto LABEL_104;
      case 'p':
        if (strncmp(__s1, "printed.", 8uLL)) {
          goto LABEL_64;
        }
        if (!strcmp(__s1 + 9, "date"))
        {
          int v19 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x17uLL, 0x6085D6BuLL);
          if (!v19) {
            _log_fault_for_malloc_failure();
          }
          strcpy(v19, "kMDItemUserPrintedDate");
          return v19;
        }
        if (strcmp(__s1 + 9, "user")) {
          goto LABEL_64;
        }
        int v17 = "kMDItemUserPrintedUserHandle";
        goto LABEL_104;
      case 'r':
        if (strncmp(__s1, "received.", 9uLL)) {
          goto LABEL_64;
        }
        if (!strcmp(__s1 + 10, "date"))
        {
          int v19 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x1EuLL, 0x6085D6BuLL);
          if (!v19) {
            _log_fault_for_malloc_failure();
          }
          strcpy(v19, "kMDItemUserSharedReceivedDate");
          return v19;
        }
        if (!strcmp(__s1 + 10, "sender"))
        {
          int v17 = "kMDItemUserSharedReceivedSender";
        }
        else if (!strcmp(__s1 + 10, "receivers"))
        {
          int v17 = "kMDItemUserSharedReceivedRecipient";
        }
        else if (!strcmp(__s1 + 10, "transport"))
        {
          int v17 = "kMDItemUserSharedReceivedTransport";
        }
        else if (!strcmp(__s1 + 10, "senderHandle"))
        {
          int v17 = "kMDItemUserSharedReceivedSenderHandle";
        }
        else
        {
          if (strcmp(__s1 + 10, "receiverHandles")) {
            goto LABEL_64;
          }
          int v17 = "kMDItemUserSharedReceivedRecipientHandle";
        }
        goto LABEL_104;
      case 's':
        if (strncmp(__s1, "sent.", 5uLL)) {
          goto LABEL_64;
        }
        if (!strcmp(__s1 + 6, "date"))
        {
          int v19 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x1AuLL, 0x6085D6BuLL);
          if (!v19) {
            _log_fault_for_malloc_failure();
          }
          strcpy(v19, "kMDItemUserSharedSentDate");
          return v19;
        }
        if (!strcmp(__s1 + 6, "sender"))
        {
          int v17 = "kMDItemUserSharedSentSender";
        }
        else if (!strcmp(__s1 + 6, "recipients"))
        {
          int v17 = "kMDItemUserSharedSentRecipient";
        }
        else if (!strcmp(__s1 + 6, "transport"))
        {
          int v17 = "kMDItemUserSharedSentTransport";
        }
        else if (!strcmp(__s1 + 6, "senderHandle"))
        {
          int v17 = "kMDItemUserSharedSentSenderHandle";
        }
        else
        {
          if (strcmp(__s1 + 6, "recipientHandles"))
          {
LABEL_64:
            size_t v18 = strlen(__s1);
            int v19 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, v18 + 1, 0x6085D6BuLL);
            if (!v19 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)uint64_t v21 = 0;
              _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", v21, 2u);
            }
            memcpy(v19, __s1, v18);
            v19[v18] = 0;
            return v19;
          }
          int v17 = "kMDItemUserSharedSentRecipientHandle";
        }
LABEL_104:
        return (char *)query_strdup(v17);
      default:
        goto LABEL_64;
    }
  }
  if (a3 <= 3)
  {
    *(void *)(a1 + 32) |= 0x2000000uLL;
    *(_DWORD *)(a1 + 44) = 0;
    goto LABEL_37;
  }
  char v6 = 0;
  unint64_t v7 = 0;
  int v8 = &__s1[a3 - 2];
  BOOL v9 = 1;
  uint64_t v10 = MEMORY[0x1E4F14390];
  while (1)
  {
    int v11 = &__s1[v4];
    unsigned int v12 = *v11;
    if (v12 == 36)
    {
      if (v6) {
        BOOL v9 = 0;
      }
      char v6 = 1;
      goto LABEL_26;
    }
    if (v12 == 91) {
      break;
    }
    if ((v12 & 0x80000000) != 0)
    {
      if (!__maskrune(*v11, 0x400uLL))
      {
        int v13 = __maskrune(v12, 0x4000uLL);
        goto LABEL_25;
      }
    }
    else if ((*(_DWORD *)(v10 + 4 * v12 + 60) & 0x400) == 0)
    {
      int v13 = *(_DWORD *)(v10 + 4 * v12 + 60) & 0x4000;
LABEL_25:
      BOOL v9 = v13 != 0;
      goto LABEL_26;
    }
    if (v6)
    {
      int v15 = 0;
      uint64_t v16 = *(void *)(a1 + 32);
      goto LABEL_35;
    }
    char v6 = 0;
    if (v7) {
      BOOL v14 = v7 == v11 + 1;
    }
    else {
      BOOL v14 = 1;
    }
    BOOL v9 = v14;
    if (v14) {
      unint64_t v7 = v8;
    }
LABEL_26:
    int v15 = v9;
    if (v4 >= 3)
    {
      --v4;
      if (v9) {
        continue;
      }
    }
    goto LABEL_31;
  }
  *int v11 = 0;
  int v15 = v9;
LABEL_31:
  uint64_t v16 = *(void *)(a1 + 32);
  if ((v6 & 1) == 0 && v7)
  {
    *(void *)(a1 + 32) = v16 | 0x4000000;
    *(_DWORD *)(a1 + 44) = 0;
    goto LABEL_36;
  }
LABEL_35:
  *(void *)(a1 + 32) = v16 | 0x2000000;
  *(_DWORD *)(a1 + 44) = 0;
  if (!v7)
  {
    if (!v15) {
      return 0;
    }
    goto LABEL_37;
  }
LABEL_36:
  *(_DWORD *)(a1 + 44) = atoi(v7);
  if (v15) {
    goto LABEL_37;
  }
  return 0;
}

BOOL db_sanitize_query_tree(uint64_t *a1, char a2, char a3, double a4)
{
  int v5 = (void *)*a1;
  uint64_t v17 = 0;
  size_t v18 = &v17;
  int v20 = 0;
  uint64_t v19 = 0x2000000000;
  uint64_t v13 = 0;
  BOOL v14 = &v13;
  uint64_t v15 = 0x2000000000;
  uint64_t v16 = 0;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  _DWORD v11[2] = __db_sanitize_query_tree_block_invoke;
  v11[3] = &unk_1E6348730;
  v11[4] = &v13;
  char v12 = a2;
  *(double *)&void v11[5] = a4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  _DWORD v9[2] = __db_sanitize_query_tree_block_invoke_2;
  v9[3] = &unk_1E6348758;
  v9[4] = v11;
  void v9[5] = &v17;
  char v10 = a3;
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 0x40000000;
  v21[2] = __db_query_tree_apply_block_block_invoke;
  v21[3] = &unk_1E6348598;
  v21[4] = v9;
  *a1 = db_query_tree_apply_block_with_meta(v5, (uint64_t)v21, (uint64_t)&__block_literal_global_45);
  char v6 = (void *)v14[3];
  if (v6) {
    OSAtomicEnqueue(&s_si_calendar_head, v6, 0);
  }
  BOOL v7 = *((_DWORD *)v18 + 6) < 2049;
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
  return v7;
}

uint64_t __setCSAttributes2_block_invoke_4(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  makeThreadId();
  int v5 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v6 = setThreadIdAndInfo(*(_DWORD *)(v4 + 152), sFdExceptionCallbacks, 0, 1, v5);
  unsigned int v74 = HIDWORD(v6);
  unsigned int v75 = v6;
  unint64_t v73 = __PAIR64__(v7, v8);
  uint64_t v9 = *(void *)&threadData[18 * v6 + 2];
  uint64_t v10 = v9 + 320 * HIDWORD(v6);
  *(unsigned char *)(v10 + 216) = 0;
  int v11 = *(_DWORD *)(v10 + 312);
  char v12 = *(void (**)(void))(v10 + 224);
  if (v12) {
    v12(*(void *)(v9 + 320 * HIDWORD(v6) + 288));
  }
  unsigned int v72 = v75;
  unsigned int v71 = v74;
  unint64_t v70 = v73;
  if (_setjmp((int *)v10))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
    }
    *(_DWORD *)(v10 + 312) = v11;
    CIOnThreadCleanUpReset(v70);
    dropThreadId(v72, 1, v5);
    return CICleanUpReset(v72, HIDWORD(v70));
  }
  else
  {
    int v14 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
    unint64_t v15 = setThreadIdAndInfo(-1, (long long *)sJournalCtxExceptionCallbacks, *(void *)(v4 + 40), 0x40000000, v14);
    unsigned int v68 = HIDWORD(v15);
    unsigned int v69 = v15;
    unint64_t v67 = __PAIR64__(v16, v17);
    uint64_t v18 = *(void *)&threadData[18 * v15 + 2];
    uint64_t v19 = v18 + 320 * HIDWORD(v15);
    *(unsigned char *)(v19 + 216) = 0;
    int v20 = *(_DWORD *)(v19 + 312);
    uint64_t v21 = *(void (**)(void))(v19 + 224);
    if (v21) {
      v21(*(void *)(v18 + 320 * HIDWORD(v15) + 288));
    }
    unsigned int v66 = v69;
    unsigned int v65 = v68;
    unint64_t v64 = v67;
    if (_setjmp((int *)v19))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
      }
      *(_DWORD *)(v19 + 312) = v20;
      CIOnThreadCleanUpReset(v64);
      dropThreadId(v66, 1, v14);
      CICleanUpReset(v66, HIDWORD(v64));
    }
    else
    {
      int v53 = v14;
      bzero(buf, 0x1000uLL);
      CFAllocatorRef v22 = _SIStackAllocatorCreate((unint64_t *)buf, 4096, indexingZone);
      if (atomic_fetch_add_explicit(*(atomic_ullong *volatile *)(v4 + 48), 1uLL, memory_order_relaxed) < *(unsigned int *)(v4 + 156))
      {
        CFAllocatorRef v52 = v22;
        CFAllocatorRef v51 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        do
        {
          long long v62 = 0uLL;
          uint64_t v63 = 0;
          long long v76 = *(_OWORD *)(v4 + 56);
          uint64_t v77 = *(void *)(v4 + 72);
          _MDPlistArrayGetPlistObjectAtIndex();
          if (!v80) {
            unint64_t v79 = (*(void *)buf + 55) & 0xFFFFFFFFFFFFFFF0;
          }
          long long v76 = v62;
          uint64_t v77 = v63;
          if (_MDPlistGetPlistObjectType() == 246)
          {
            *(void *)&long long v60 = 0;
            long long v76 = v62;
            uint64_t v77 = v63;
            _MDPlistDataGetBytePtr();
            _MDPlistGetRootPlistObjectFromBytes();
            long long v62 = v76;
            uint64_t v63 = v77;
          }
          long long v76 = v62;
          uint64_t v77 = v63;
          if (_MDPlistGetPlistObjectType() == 240)
          {
            long long v76 = v62;
            uint64_t v77 = v63;
            int Count = _MDPlistArrayGetCount();
            if ((Count - 3) <= 1)
            {
              int v24 = Count;
              long long v76 = v62;
              uint64_t v77 = v63;
              _MDPlistArrayGetPlistObjectAtIndex();
              IntCFNumberRef Value = _MDPlistNumberGetIntValue();
              if ((IntValue & 2) == 0)
              {
                int v26 = IntValue;
                unsigned int v50 = *(_DWORD *)(*(void *)(v4 + 40) + 80);
                long long v60 = 0uLL;
                uint64_t v61 = 0;
                long long v76 = v62;
                uint64_t v77 = v63;
                _MDPlistArrayGetPlistObjectAtIndex();
                long long v58 = 0uLL;
                uint64_t v59 = 0;
                long long v76 = v60;
                uint64_t v77 = v61;
                if (_MDPlistDictionaryGetPlistObjectForKey())
                {
                  long long v76 = v62;
                  uint64_t v77 = v63;
                  uint64_t PlistObjectSize = _MDPlistGetPlistObjectSize();
                  long long v76 = v58;
                  uint64_t v77 = v59;
                  CFStringRef v28 = _copyMDPlistObject(v52);
                  if (v28)
                  {
                    uint64_t v49 = PlistObjectSize;
                    CFStringRef v29 = v28;
                    if (CFStringGetLength(v28))
                    {
                      long long v56 = 0uLL;
                      uint64_t v57 = 0;
                      if (v24 == 4)
                      {
                        long long v76 = v62;
                        uint64_t v77 = v63;
                        _MDPlistArrayGetPlistObjectAtIndex();
                      }
                      if (*(unsigned char *)(v4 + 160))
                      {
                        bzero(&v76, 0x400uLL);
                        CFStringRef v30 = 0;
                        if (CFStringGetCString(v29, (char *)&v76, 1024, 0x8000100u))
                        {
                          long long v54 = 0uLL;
                          uint64_t v55 = 0;
                          if (_MDPlistDictionaryGetPlistObjectForKey()) {
                            CFStringRef v30 = _copyMDPlistObject(v51);
                          }
                        }
                      }
                      else
                      {
                        CFStringRef v30 = 0;
                      }
                      uint64_t v31 = *(void *)(v4 + 104);
                      uint64_t v32 = *(void *)(v4 + 112);
                      uint64_t v33 = *(void *)(v4 + 120);
                      uint64_t v34 = *(void *)(v4 + 128);
                      uint64_t v35 = *(void *)(*(void *)(v4 + 32) + 8) + 24;
                      uint64_t v36 = *(void *)(v4 + 136);
                      uint64_t v37 = *(void *)(v4 + 144);
                      long long v76 = v60;
                      uint64_t v77 = v61;
                      long long v54 = v56;
                      uint64_t v55 = v57;
                      LOBYTE(v48) = 1;
                      char v38 = processOneCS(v31, v32, v33, v34, (v26 << 16) & 0x100000 | ((v26 & 1) << 17) | v50, &v76, &v54, v30, v49, v52, v48, v36, v35, v37);
                      CFRelease(v29);
                      if (v30) {
                        CFRelease(v30);
                      }
                      if (v3) {
                        char v39 = v38;
                      }
                      else {
                        char v39 = 0;
                      }
                      if (v39) {
                        break;
                      }
                    }
                    else
                    {
                      CFRelease(v29);
                    }
                  }
                }
              }
            }
          }
        }
        while (atomic_fetch_add_explicit(*(atomic_ullong *volatile *)(v4 + 48), 1uLL, memory_order_relaxed) < *(unsigned int *)(v4 + 156));
      }
      uint64_t v40 = *(void *)&threadData[18 * v66 + 2];
      unsigned int v41 = v65;
      uint64_t v42 = v40 + 320 * v65;
      *(_DWORD *)(v42 + 312) = v20;
      int v43 = *(void (**)(void))(v42 + 232);
      if (v43) {
        v43(*(void *)(v40 + 320 * v41 + 288));
      }
      dropThreadId(v66, 0, v53);
    }
    uint64_t v44 = *(void *)&threadData[18 * v72 + 2];
    unsigned int v45 = v71;
    uint64_t v46 = v44 + 320 * v71;
    *(_DWORD *)(v46 + 312) = v11;
    size_t v47 = *(void (**)(void))(v46 + 232);
    if (v47) {
      v47(*(void *)(v44 + 320 * v45 + 288));
    }
    return dropThreadId(v72, 0, v5);
  }
}

void __processOneCS_block_invoke_2(uint64_t a1, const char *a2)
{
  CFStringRef v3 = CFStringCreateWithCString(*(CFAllocatorRef *)(a1 + 40), a2, 0x8000100u);
  if (v3)
  {
    CFStringRef v4 = v3;
    if (!CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 48), v3)
      && _MDPlistGetPlistObjectType() == 240
      && _MDPlistArrayGetCount() == 2)
    {
      _MDPlistArrayGetPlistObjectAtIndex();
      IntCFNumberRef Value = _MDPlistNumberGetIntValue();
      CFAllocatorRef v6 = *(const __CFAllocator **)(a1 + 40);
      _MDPlistArrayGetPlistObjectAtIndex();
      CFStringRef v7 = _copyMDPlistObject(v6);
      if (v7)
      {
        CFStringRef v8 = v7;
        CFTypeID v9 = CFGetTypeID(v7);
        BOOL v10 = (IntValue & 3) == 0;
        unint64_t v11 = IntValue >> 3;
        uint64_t v12 = (IntValue << 7) & 0x100;
        char v13 = 4 * IntValue;
        unint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFDFLL | (32 * (v11 & 1)) | (8 * v10)) ^ 0x100;
        if (*(void *)(a1 + 56) == v9)
        {
          unint64_t v15 = (const void *)(v14 | v13 & 0x10);
          *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += CFStringGetLength(v8);
        }
        else if (v9 == CFDictionaryGetTypeID())
        {
          unint64_t v15 = (const void *)(v14 | v13 & 0x10);
        }
        else
        {
          unint64_t v15 = (const void *)v14;
        }
        CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 64), v4, v15);
        CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 48), v4, v8);
        CFRelease(v8);
      }
    }
    CFRelease(v4);
  }
}

void ___copyMDPlistObject_block_invoke(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  long long v7 = *a2;
  uint64_t v8 = *((void *)a2 + 2);
  int v5 = (const void *)_copyMDPlistObject(v3, &v7, v4);
  if (v5)
  {
    CFAllocatorRef v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 48), v5);
    CFRelease(v6);
  }
}

void __processOneCS_block_invoke(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    BOOL v5 = *(_DWORD *)a2 == 1229213035 && *(_DWORD *)(a2 + 3) == 1835365449;
    BOOL v6 = !v5;
    if (a3 >= 0xE && !v6)
    {
      if (*(_DWORD *)(a3 + a2 - 7) == 1936876880 && *(_DWORD *)(a3 + a2 - 4) == 1936617331) {
        return;
      }
      if (a3 >= 0x11)
      {
        if (*(void *)(a3 + a2 - 10) == 0x616E6F6974636944 && *(_WORD *)(a3 + a2 - 2) == 31090) {
          return;
        }
        if (*(void *)(a3 + a2 - 10) == 0x69747265706F7250 && *(_WORD *)(a3 + a2 - 2) == 29541) {
          return;
        }
        if (a3 >= 0x12)
        {
          if (*(void *)(a3 + a2 - 11) == 0x746E6F434C4D5448 && *(void *)(a3 + a2 - 8) == 0x746E65746E6F434CLL) {
            return;
          }
          if (a3 >= 0x16
            && *(void *)(a3 + a2 - 15) == 0x746E6F434C4D5448
            && *(void *)(a3 + a2 - 8) == 0x61746144746E6574)
          {
            return;
          }
        }
      }
    }
  }
  if (_MDPlistGetPlistObjectType() == 247)
  {
    CFURLRef v12 = (const __CFURL *)_MDPlistContainerCopyObject();
    if (!v12) {
      return;
    }
    CFURLRef v13 = v12;
    CFURLRef v14 = CFURLCopyAbsoluteURL(v12);
    if (v14)
    {
      CFURLRef v15 = v14;
      CFStringRef v16 = CFURLGetString(v14);
      CFStringRef v17 = v16 ? (const __CFString *)CFRetain(v16) : 0;
      CFRelease(v15);
    }
    else
    {
      CFStringRef v17 = 0;
    }
    CFRelease(v13);
    if (!v17) {
      return;
    }
  }
  else
  {
    CFStringRef v17 = _copyMDPlistObject(*(const __CFAllocator **)(a1 + 40));
    if (!v17) {
      return;
    }
  }
  CFStringRef v18 = CFStringCreateWithCStringNoCopy(*(CFAllocatorRef *)(a1 + 40), (const char *)a2, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  if (v18)
  {
    CFStringRef v19 = v18;
    uint64_t v20 = *(void *)(a1 + 48);
    if (v20 == CFGetTypeID(v17)) {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += CFStringGetLength(v17);
    }
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 56), v19, v17);
    CFRelease(v19);
  }
  CFRelease(v17);
}

CFStringRef _copyMDPlistObject(const __CFAllocator *a1)
{
  switch(_MDPlistGetPlistObjectType())
  {
    case 0xF0u:
      if (_MDPlistArrayGetCount() == 2)
      {
        _MDPlistArrayGetPlistObjectAtIndex();
        if (_MDPlistGetPlistObjectType() == 244) {
          _MDPlistStringGetValue();
        }
      }
      CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
      if (Mutable) {
        _MDPlistArrayIterate();
      }
      return (CFStringRef)Mutable;
    case 0xF1u:
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      _MDPlistDictionaryIterate();
      return (CFStringRef)Mutable;
    case 0xF4u:
      CFNumberRef Value = (const UInt8 *)_MDPlistStringGetValue();
      return CFStringCreateWithBytesNoCopy(a1, Value, 0, 0, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    case 0xF5u:
      BOOL v5 = (const UniChar *)_MDPlistStringGetValue();
      return CFStringCreateWithCharactersNoCopy(a1, v5, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    case 0xF6u:
      BytePtr = (const UInt8 *)_MDPlistDataGetBytePtr();
      return (CFStringRef)CFDataCreateWithBytesNoCopy(a1, BytePtr, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    default:
      return (CFStringRef)_MDPlistContainerCopyObject();
  }
}

void __si_set_error_str(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  v10[0] = 0;
  v10[1] = &a9;
  vasprintf((char **)v10, a2, &a9);
  _si_set_error_str((const char *)v10[0], a1);
  free(v10[0]);
}

void _si_set_rebuild_reason(const char *a1, int a2, int a3)
{
  int v5 = a3 | a2;
  if (!a1 && !v5) {
    return;
  }
  if (!__si_index_rebuild_reason_key)
  {
    if (!a1) {
      return;
    }
    pthread_key_create((pthread_key_t *)&__si_index_rebuild_reason_key, MEMORY[0x1E4F14838]);
    long long v7 = 0;
LABEL_10:
    size_t v9 = strlen(a1);
    if (a2)
    {
      uint64_t v8 = (char *)malloc_type_malloc(v9 + 15, 0x4E2026D3uLL);
      strcpy(v8, "Intentional: ");
    }
    else
    {
      uint64_t v8 = (char *)malloc_type_malloc(v9 + 9, 0x252BDA4CuLL);
      *(void *)uint64_t v8 = 0x203A726F727245;
    }
    strcat(v8, a1);
    goto LABEL_14;
  }
  BOOL v6 = (char *)pthread_getspecific(__si_index_rebuild_reason_key);
  long long v7 = v6;
  if (!v5 && v6) {
    return;
  }
  if (a1) {
    goto LABEL_10;
  }
  uint64_t v8 = 0;
LABEL_14:
  if (pthread_setspecific(__si_index_rebuild_reason_key, v8) == -1)
  {
    if (!v8) {
      return;
    }
    BOOL v10 = v8;
  }
  else
  {
    BOOL v10 = v7;
  }
  free(v10);
}

void _si_set_error_str(const char *a1, int a2)
{
  if (!a1 && !a2) {
    return;
  }
  if (!__si_error_str_key)
  {
    if (!a1) {
      return;
    }
    pthread_key_create((pthread_key_t *)&__si_error_str_key, MEMORY[0x1E4F14838]);
    int v5 = 0;
    pthread_key_t v6 = __si_error_str_key;
LABEL_10:
    long long v7 = strdup(a1);
    goto LABEL_11;
  }
  uint64_t v4 = pthread_getspecific(__si_error_str_key);
  int v5 = v4;
  if (!a2 && v4) {
    return;
  }
  pthread_key_t v6 = __si_error_str_key;
  if (a1) {
    goto LABEL_10;
  }
  long long v7 = 0;
LABEL_11:
  if (pthread_setspecific(v6, v7) != -1) {
    free(v5);
  }
  _si_set_rebuild_reason(a1, 0, a2);
}

void __si_writeBackAndIndexWithLiveQueryToggle_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 80) && (*(unsigned char *)(a1 + 73) & 0x20) != 0)
  {
    uint64_t v4 = **(void **)(a1 + 40);
    if (!(*(unsigned __int8 *)(a1 + 81) | *(unsigned __int8 *)(a1 + 82))) {
      objectHasContent(*(int **)(*(void *)(a1 + 64) + 1184), v4);
    }
    *(void *)(v4 + 32) = a2;
    si_perform_livequeries_updates(*(void *)(a1 + 64));
  }
}

BOOL setDatastoreAttributes(uint64_t a1, uint64_t a2, const __CFDictionary *a3, unsigned int a4, uint64_t a5, uint64_t a6, unsigned __int8 a7, char a8)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    if (db_corespotlight_store(a1) | ((unsigned __int16)(a4 & 0x200) >> 9)) {
      int v16 = 512;
    }
    else {
      int v16 = 0;
    }
    if (a5) {
      uint64_t v17 = a5;
    }
    else {
      uint64_t v17 = gDefaultSchema;
    }
    if (v17)
    {
      long long context = xmmword_1E6341350;
      unint64_t v20 = 0;
      _MDPlistContainerGetPlistObjectAtKeyArray();
    }
    uint64_t v23 = a6;
    *(void *)&long long context = a1;
    *((void *)&context + 1) = a2;
    unint64_t v20 = __PAIR64__(v16, a4);
    long long v21 = 0uLL;
    uint64_t v22 = 0;
    uint64_t v24 = a7;
    BYTE1(v24) = a8;
    CFDictionaryApplyFunction(a3, (CFDictionaryApplierFunction)setAttributeApplier, &context);
  }
  return a3 != 0;
}

uint64_t si_get_object_for_identifier_createParentDBO(uint64_t a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, int a5, unint64_t *a6, void *a7, unsigned __int8 a8)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  bzero(v50, 0x400uLL);
  char v47 = 0;
  *(void *)uint64_t v46 = 0;
  if (a3) {
    CFURLRef v13 = fasterUTF8String(a3, v46, v50, 1024, &v47);
  }
  else {
    CFURLRef v13 = "";
  }
  long long v14 = 0uLL;
  memset(v49, 0, sizeof(v49));
  char v45 = 0;
  *(void *)uint64_t v44 = 0;
  if (a2)
  {
    CFURLRef v15 = fasterUTF8String(a2, v44, (char *)v49, 128, &v45);
    long long v14 = 0uLL;
    int v16 = v15;
  }
  else
  {
    int v16 = "";
  }
  v48[6] = v14;
  v48[7] = v14;
  v48[4] = v14;
  v48[5] = v14;
  int v48[2] = v14;
  v48[3] = v14;
  v48[0] = v14;
  v48[1] = v14;
  *(void *)uint64_t v42 = 0;
  if (a4) {
    uint64_t v17 = fasterUTF8String(a4, v42, (char *)v48, 128, &v43);
  }
  else {
    uint64_t v17 = 0;
  }
  int v18 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v19 = setThreadIdAndInfo(-1, (long long *)sSDBExceptionCallbacks, *(void *)(a1 + 1184), 0x40000000, v18);
  unsigned int v40 = HIDWORD(v19);
  unsigned int v41 = v19;
  unint64_t v39 = __PAIR64__(v20, v21);
  uint64_t v22 = *(void *)&threadData[18 * v19 + 2];
  uint64_t v23 = v22 + 320 * HIDWORD(v19);
  *(unsigned char *)(v23 + 216) = 0;
  int v24 = *(_DWORD *)(v23 + 312);
  uint64_t v25 = *(void (**)(void))(v23 + 224);
  if (v25) {
    v25(*(void *)(v22 + 320 * HIDWORD(v19) + 288));
  }
  unsigned int v38 = v41;
  unsigned int v37 = v40;
  unint64_t v36 = v39;
  if (_setjmp((int *)v23))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
    }
    *(_DWORD *)(v23 + 312) = v24;
    CIOnThreadCleanUpReset(v36);
    dropThreadId(v38, 1, v18);
    CICleanUpReset(v38, HIDWORD(v36));
    uint64_t ParentDBO = 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t ParentDBO = _si_get_object_for_identifier_createParentDBO(a1, v46[0], v13, v44[0], (uint64_t)v16, v42[0], v17, a7, a6, a5, a8);
    uint64_t v27 = *(void *)&threadData[18 * v38 + 2];
    unsigned int v28 = v37;
    uint64_t v29 = v27 + 320 * v37;
    *(_DWORD *)(v29 + 312) = v24;
    CFStringRef v30 = *(void (**)(void))(v29 + 232);
    if (v30) {
      v30(*(void *)(v27 + 320 * v28 + 288));
    }
    dropThreadId(v38, 0, v18);
  }
  if (v47) {
    free(v13);
  }
  if (v45) {
    free(v16);
  }
  return ParentDBO;
}

BOOL objectCanHaveTextCache(int *a1, uint64_t a2, char a3)
{
  if (db_corespotlight_store((uint64_t)a1))
  {
    BOOL result = objectHasContent(a1, a2);
    if (!result) {
      return result;
    }
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    int id_for_string = db_get_id_for_string(a1, "public.image");
    int v8 = db_get_id_for_string(a1, "com.adobe.pdf");
    int v9 = db_get_id_for_string(a1, "com.apple.localized-pdf-bundle");
    if (db_get_field(a1, a2, "kMDItemContentTypeTree", &v18, &v17) != 2
      && (*(_WORD *)(v18 + 2) & 0x10) != 0)
    {
      unsigned int v10 = *(_DWORD *)(v18 + 8);
      if (v10 >= 4)
      {
        if ((a3 & 1) == 0)
        {
          LODWORD(v11) = v10 >> 2;
          CFURLRef v12 = v17;
          if (v11 <= 1) {
            uint64_t v11 = 1;
          }
          else {
            uint64_t v11 = v11;
          }
          while (1)
          {
            int v13 = *v12++;
            int v14 = v13 & 0x7FFFFFFF;
            BOOL v15 = (v13 & 0x7FFFFFFF) == id_for_string || v14 == v8;
            if (v15 || v14 == v9) {
              break;
            }
            if (!--v11) {
              return 0;
            }
          }
        }
        return 1;
      }
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 0x20) == 0 {
         && objectHasContent(a1, a2)
  }
         && db_get_field(a1, a2, "_kMDItemTextEncodingHint", 0, 0) == 2)
  {
    return 1;
  }
  return 0;
}

void setAttributeApplier(CFStringRef theString, void *a2, uint64_t a3)
{
  values = a2;
  pthread_key_t v6 = (long long *)(a3 + 24);
  unsigned int v7 = *(_DWORD *)(a3 + 20);
  if (!*(void *)(a3 + 24)) {
    goto LABEL_10;
  }
  int HasPrefix = CFStringHasPrefix(theString, @":EA:");
  int v9 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (HasPrefix || CFStringHasPrefix(theString, @":PR:"))
  {
    CFAllocatorRef v10 = *v9;
    v20.length = CFStringGetLength(theString) - 4;
    v20.location = 4;
    CFStringRef v11 = CFStringCreateWithSubstring(v10, theString, v20);
    if (*(void *)v6)
    {
      long long v17 = *v6;
      uint64_t v18 = *((void *)v6 + 2);
      int FlagsFromAttributes = getFlagsFromAttributes((uint64_t)&v17);
    }
    else
    {
      int FlagsFromAttributes = 0;
    }
    CFRelease(v11);
  }
  else
  {
    uint64_t value = 0;
    CFDictionaryRef v15 = *(const __CFDictionary **)(a3 + 48);
    if (v15 && CFDictionaryGetValueIfPresent(v15, theString, (const void **)&value))
    {
      int FlagsFromAttributes = (int)value;
    }
    else if (*(void *)v6)
    {
      long long v17 = *v6;
      uint64_t v18 = *((void *)v6 + 2);
      int FlagsFromAttributes = getFlagsFromAttributes((uint64_t)&v17);
    }
    else
    {
      int FlagsFromAttributes = 0;
    }
  }
  v7 |= FlagsFromAttributes;
  if ((v7 & 0x20) != 0 && (CFTypeID v13 = CFGetTypeID(a2), v13 != CFArrayGetTypeID()))
  {
    CFArrayRef v14 = CFArrayCreate(*v9, (const void **)&values, 1, 0);
    setOneFieldLocked(theString, 0, v14, *(int **)a3, *(uint64_t **)(a3 + 8), v7, *(unsigned __int8 *)(a3 + 56), *(unsigned __int8 *)(a3 + 57));
    CFRelease(v14);
  }
  else
  {
LABEL_10:
    setOneFieldLocked(theString, 0, (const __CFArray *)a2, *(int **)a3, *(uint64_t **)(a3 + 8), v7, *(unsigned __int8 *)(a3 + 56), *(unsigned __int8 *)(a3 + 57));
  }
}

void setOneFieldLocked(const __CFString *a1, char *a2, const __CFArray *a3, int *a4, uint64_t *a5, unsigned int a6, int a7, int a8)
{
  LODWORD(v129) = a8;
  LODWORD(v128) = a7;
  unsigned int v8 = a6;
  uint64_t v130 = a5;
  uint64_t v151 = *MEMORY[0x1E4F143B8];
  unsigned int v139 = a6;
  if (dword_1E9FC90B4 >= 5)
  {
    int v90 = *__error();
    int v91 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)CFDictionaryRef v141 = 138412546;
      *(void *)&v141[4] = a1;
      *(_WORD *)&v141[12] = 2112;
      *(void *)&v141[14] = a3;
      _os_log_impl(&dword_1BD672000, v91, OS_LOG_TYPE_DEFAULT, "Trying to store %@ = %@", v141, 0x16u);
    }
    *__error() = v90;
  }
  char v138 = 0;
  uint64_t v13 = db_corespotlight_store((uint64_t)a4);
  int v14 = v13;
  if ((v8 & 0x800) != 0 && v13)
  {
    uint64_t v92 = __si_assert_copy_extra_329();
    uint64_t v100 = v92;
    uint64_t v101 = "";
    if (v92) {
      uint64_t v101 = v92;
    }
    *(void *)&long long v120 = "((flags & DB_FIELD_EXTENDED_ATTR) && isCoreSpotlight) == 0";
    *((void *)&v120 + 1) = v101;
LABEL_207:
    __message_assert_333((uint64_t)v92, v93, v94, v95, v96, v97, v98, v99, (char)"SIIndexInternals.cpp");
    free(v100);
    if (__valid_fs(-1)) {
      uint64_t v111 = 2989;
    }
    else {
      uint64_t v111 = 3072;
    }
    *(_DWORD *)uint64_t v111 = -559038737;
    abort();
  }
  CFDictionaryRef v15 = &v121;
  uint64_t v137 = 0;
  MEMORY[0x1F4188790](v13);
  long long v120 = 0u;
  memset(v119, 0, sizeof(v119));
  if (!a2) {
    a2 = fasterUTF8String(a1, &v137, v119, 256, &v138);
  }
  int v16 = *a2;
  int v126 = a2;
  if (v16 == 58)
  {
    CFArrayRef v127 = a3;
    int v125 = &v121;
    LODWORD(v131) = 0;
    LODWORD(v132) = 0;
    while (!strncmp(a2, ":EA:", 4uLL))
    {
      a2 += 4;
      if (v14) {
        goto LABEL_16;
      }
      v8 |= 0x800u;
LABEL_19:
      unsigned int v139 = v8;
LABEL_20:
      if (*a2 != 58)
      {
LABEL_21:
        int v17 = v8 & 0x800;
        CFDictionaryRef v15 = v125;
        a3 = v127;
        goto LABEL_23;
      }
    }
    if (strncmp(a2, ":PR:", 4uLL))
    {
      if (!strncmp(a2, ":A:", 3uLL))
      {
        a2 += 3;
        LODWORD(v131) = 1;
      }
      else
      {
        if (strncmp(a2, ":INC:", 5uLL)) {
          goto LABEL_21;
        }
        a2 += 5;
        LODWORD(v132) = 1;
      }
      goto LABEL_20;
    }
    a2 += 4;
    if (!v14)
    {
      v8 |= 0x804u;
      goto LABEL_19;
    }
LABEL_16:
    v8 &= ~0x200u;
    goto LABEL_19;
  }
  LODWORD(v132) = 0;
  LODWORD(v131) = 0;
  int v17 = v8 & 0x800;
LABEL_23:
  BOOL v80 = v17 == 0;
  char v18 = v14 ^ 1;
  if (v80) {
    char v18 = 1;
  }
  if ((v18 & 1) == 0) {
    goto LABEL_202;
  }
  if (strncmp(a2, "_kMD", 4uLL)) {
    goto LABEL_28;
  }
  if (!strcmp(a2, "_kMDItemExternalID"))
  {
    unsigned int v8 = 8968;
LABEL_63:
    unsigned int v139 = v8;
    goto LABEL_64;
  }
  if (!strcmp(a2, "_kMDItemBundleID"))
  {
    unsigned int v8 = 17176;
    goto LABEL_63;
  }
  if (!strcmp(a2, "_kMDItemOwnerUserID"))
  {
    unsigned int v8 = 776;
    goto LABEL_63;
  }
  if (!strcmp(a2, "_kMDItemRelatedObjects") || !strcmp(a2, "_kMDItemRelatedObjectsWithBundle"))
  {
    int v20 = 0;
    unsigned int v8 = 8480;
LABEL_138:
    unsigned int v139 = v8;
    goto LABEL_89;
  }
  if (!strcmp(a2, "_kMDItemRankingLaunchStrings")
    || !strcmp(a2, "_kMDItemActivityLaunchDates")
    || !strcmp(a2, "_kMDItemRankingLaunchDates"))
  {
    int v20 = 0;
    unsigned int v8 = 32;
    goto LABEL_138;
  }
  if (!strcmp(a2, "_kMDItemOutgoingCounts")
    || !strcmp(a2, "_kMDItemIncomingCounts")
    || !strcmp(a2, "_kMDItemOutgoingMailCounts")
    || !strcmp(a2, "_kMDItemIncomingMailCounts")
    || !strcmp(a2, "_kMDItemOutgoingSMSCounts")
    || !strcmp(a2, "_kMDItemIncomingSMSCounts")
    || !strcmp(a2, "_kMDItemOutgoingCalendarCounts")
    || !strcmp(a2, "_kMDItemIncomingCalendarCounts")
    || !strcmp(a2, "_kMDItemOutgoingFileProviderCounts")
    || !strcmp(a2, "_kMDItemIncomingFileProviderCounts")
    || !strcmp(a2, "_kMDItemIncomingVideoCallDates")
    || !strcmp(a2, "_kMDItemOutgoingVideoCallDates")
    || !strcmp(a2, "_kMDItemIncomingAudioCallDates")
    || !strcmp(a2, "_kMDItemOutgoingAudioCallDates"))
  {
    int v20 = 0;
    unsigned int v8 = 288;
    goto LABEL_138;
  }
  if (!strcmp(a2, "_kMDItemLaunchString"))
  {
    int v20 = 0;
    unsigned int v8 = 256;
    goto LABEL_138;
  }
  if (strcmp(a2, "_kMDItemPrimaryTextEmbedding")
    && strcmp(a2, "_kMDItemSecondaryTextEmbedding")
    && strcmp(a2, "_kMDItemPhotoEmbedding"))
  {
    v8 |= 0x108u;
    unsigned int v139 = v8;
  }
LABEL_28:
  char v19 = v14 ^ 1;
  if ((v8 & 0x800) == 0) {
    char v19 = 1;
  }
  if ((v19 & 1) == 0) {
    goto LABEL_202;
  }
LABEL_64:
  if ((v8 & 0x200) != 0) {
    char v21 = v14 ^ 1;
  }
  else {
    char v21 = 1;
  }
  if ((v21 & 1) == 0
    && (!strncmp(a2, "kMDItemLastUsedDate", 0x13uLL)
     || !strcmp(a2, "kMDItemLastUsedDate_Ranking")
     || !strcmp(a2, "_kMDItemShortcutLastUsedDate")
     || !strcmp(a2, "kMDItemUsedDates")
     || !strcmp(a2, "_kMDItemRecentSpotlightEngagementDates")
     || !strcmp(a2, "_kMDItemRecentSpotlightEngagementQueries")
     || !strcmp(a2, "_kMDItemRecentSpotlightEngagementRenderPositions")
     || !strcmp(a2, "_kMDItemRecentSpotlightEngagementDatesNonUnique")
     || !strcmp(a2, "_kMDItemRecentSpotlightEngagementQueriesNonUnique")
     || !strcmp(a2, "_kMDItemRecentSpotlightEngagementRenderPositionsNonUnique")
     || !strcmp(a2, "_kMDItemRecentAppSearchEngagementDates")
     || !strcmp(a2, "_kMDItemRecentAppSearchEngagementQueries")
     || !strcmp(a2, "_kMDItemRecentAppSearchEngagementRenderPositions")
     || !strcmp(a2, "_kMDItemRecentOutOfSpotlightEngagementDates")
     || !strcmp(a2, "_kMDItemEmbeddingsError")
     || !strcmp(a2, "_kMDItemKeyphrasesError")))
  {
    v8 &= ~0x200u;
    unsigned int v139 = v8;
  }
  int v20 = v8 & 0x800;
  if ((v8 & 0x800) != 0) {
    char v22 = v14 ^ 1;
  }
  else {
    char v22 = 1;
  }
  if ((v22 & 1) == 0)
  {
    uint64_t v92 = __si_assert_copy_extra_329();
    uint64_t v100 = v92;
    goto LABEL_207;
  }
LABEL_89:
  int v23 = v128 | v129 | v14;
  if (!a3 || CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F1D260]))
  {
    db_delete_field_weak(a4, v130, a2, v23);
    goto LABEL_92;
  }
  CFArrayRef v127 = a3;
  CFTypeID v24 = CFGetTypeID(a3);
  if (v24 != CFArrayGetTypeID())
  {
    if (v132)
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      CFNumberRef v37 = v127;
      if (TypeID == CFGetTypeID(v127))
      {
        *(void *)CFDictionaryRef v141 = 0;
        v145[0] = 0;
        *(void *)int valuePtr = 0;
        CFNumberGetValue(v127, kCFNumberLongLongType, valuePtr);
        if (!db_get_field(a4, *v130, a2, (unint64_t *)v145, v141) && *(_WORD *)v145[0] == 7) {
          *(void *)valuePtr += **(void **)v141;
        }
        CFNumberRef v37 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberLongLongType, valuePtr);
        int v20 = v139 & 0x800;
      }
    }
    else
    {
      CFNumberRef v37 = v127;
    }
    char v47 = v14 ^ 1;
    if (!v20) {
      char v47 = 1;
    }
    if (v47)
    {
      bzero(&v141[8], 0x418uLL);
      *(void *)CFDictionaryRef v141 = &unk_1F1810A00;
      *(void *)&v141[8] = fastFieldFromCFType((const __CFString *)v37, 0, &v143, v144, (CFIndex *)&v141[16], v142);
      CFArrayRef v48 = v127;
      if (*(void *)&v141[8])
      {
        unsigned int v49 = computeFlags(a2, (int *)&v139, v14, (char)v128, (char)v129);
        db_add_field(a4, (char **)v130, v49, a2, 0, v139 | v144[0], v143, *(unsigned __int8 **)&v141[8], v50, *(int *)&v141[16]);
      }
      if (v37 != v48) {
        CFRelease(v37);
      }
      *(void *)CFDictionaryRef v141 = &unk_1F1810CA0;
      if (*(char **)&v141[8] != v142) {
        free(*(void **)&v141[8]);
      }
      goto LABEL_92;
    }
LABEL_202:
    int v102 = __si_assert_copy_extra_329();
    __message_assert_333((uint64_t)v102, v103, v104, v105, v106, v107, v108, v109, (char)"SIIndexInternals.cpp");
    free(v102);
    if (__valid_fs(-1)) {
      goto LABEL_203;
    }
    uint64_t v110 = 3072;
    goto LABEL_205;
  }
  int v25 = _os_feature_enabled_impl();
  if ((~v8 & 0x5020) == 0 && v25)
  {
    CFArrayRef v26 = v127;
    CFIndex Count = CFArrayGetCount(v127);
    if (Count)
    {
      uint64_t v28 = Count;
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v26, 0);
      *(void *)CFDictionaryRef v141 = 0;
      v145[0] = (const void *)4096;
      CFStringRef v30 = malloc_type_malloc(0x1000uLL, 0x93323CFBuLL);
      *(void *)int valuePtr = v30;
      uint64_t v136 = 0;
      CFDataRef v140 = 0;
      __int16 v135 = 0;
      if (isVectorDictionary(ValueAtIndex, (_DWORD *)&v136 + 1, &v136, &v135, (const void **)&v140))
      {
        char v31 = BYTE4(v136);
        size_t v32 = -1;
        if (SHIDWORD(v136) <= 2 && (int)v136 <= 2) {
          size_t v32 = (vector_dimension_vec_sizes_12485[HIDWORD(v136)]
        }
                             * vector_size_elem_sizes_12484[v136]);
        *(void *)CFDictionaryRef v141 = 4;
        *CFStringRef v30 = v136;
        v30[1] = v31;
        *((_WORD *)v30 + 1) = v135;
        appendVector(v32, (unint64_t *)v141, (char **)valuePtr, (unint64_t *)v145, v140);
        int v133 = 0;
        int v134 = 0;
        unsigned int v139 = v8 | 0x5030;
        if (v28 >= 2)
        {
          for (CFIndex i = 1; i != v28; ++i)
          {
            uint64_t v34 = CFArrayGetValueAtIndex(v127, i);
            if (isVectorDictionary(v34, &v134, &v133, &v135, (const void **)&v140)) {
              appendVector(v32, (unint64_t *)v141, (char **)valuePtr, (unint64_t *)v145, v140);
            }
          }
        }
        CFStringRef v30 = *(unsigned char **)valuePtr;
        int v35 = *(_DWORD *)v141;
      }
      else
      {
        int v35 = 0;
      }
      unsigned int v58 = computeFlags(a2, (int *)&v139, v14, (char)v128, (char)v129);
      db_add_field(a4, (char **)v130, v58, a2, 0, v139, 14, v30, v59, v35);
      free(*(void **)valuePtr);
    }
    goto LABEL_92;
  }
  if (v131)
  {
    *(void *)CFDictionaryRef v141 = 0;
    v145[0] = 0;
    int field = db_get_field(a4, *v130, a2, (unint64_t *)v145, v141);
    uint64_t MutableCopy = v127;
    if (!field)
    {
      unsigned int v40 = v15;
      CFAllocatorRef v41 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v42 = a4;
      CFDictionaryRef v43 = _decodeSDBField((unint64_t)a4, (unsigned __int16 *)v145[0], *(unsigned __int8 **)v141, 0, 0, 0, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
      CFTypeID v44 = CFGetTypeID(v43);
      CFTypeID v45 = CFArrayGetTypeID();
      CFIndex v46 = CFArrayGetCount(v127);
      if (v44 == v45)
      {
        uint64_t MutableCopy = CFArrayCreateMutableCopy(v41, v46, v43);
      }
      else
      {
        uint64_t MutableCopy = CFArrayCreateMutable(v41, v46 + 1, MEMORY[0x1E4F1D510]);
        CFArrayAppendValue(MutableCopy, v43);
      }
      CFArrayRef v60 = v127;
      v154.length = CFArrayGetCount(v127);
      v154.location = 0;
      CFArrayAppendArray(MutableCopy, v60, v154);
      CFRelease(v43);
      a4 = v42;
      CFDictionaryRef v15 = v40;
    }
  }
  else
  {
    uint64_t MutableCopy = v127;
    if (v132)
    {
      *(void *)CFDictionaryRef v141 = 0;
      v145[0] = 0;
      int v51 = db_get_field(a4, *v130, a2, (unint64_t *)v145, v141);
      uint64_t MutableCopy = v127;
      if (!v51)
      {
        int v125 = v15;
        CFAllocatorRef v52 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFDictionaryRef v53 = _decodeSDBField((unint64_t)a4, (unsigned __int16 *)v145[0], *(unsigned __int8 **)v141, 0, 0, 0, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
        CFTypeID v54 = CFGetTypeID(v53);
        CFTypeID v55 = CFArrayGetTypeID();
        CFIndex v56 = CFArrayGetCount(v127);
        CFAllocatorRef v132 = v52;
        if (v54 == v55) {
          CFMutableArrayRef Mutable = CFArrayCreateMutableCopy(v52, v56, v53);
        }
        else {
          CFMutableArrayRef Mutable = CFArrayCreateMutable(v52, v56, MEMORY[0x1E4F1D510]);
        }
        uint64_t MutableCopy = Mutable;
        CFTypeRef v131 = v53;
        for (CFIndex j = 0; ; ++j)
        {
          CFDictionaryRef v15 = v125;
          CFIndex v62 = CFArrayGetCount(MutableCopy);
          CFArrayRef v63 = v127;
          if (j >= v62 || j >= CFArrayGetCount(v127)) {
            break;
          }
          unint64_t v64 = a4;
          unsigned int v65 = CFArrayGetValueAtIndex(MutableCopy, j);
          unsigned int v66 = CFArrayGetValueAtIndex(v63, j);
          CFTypeID v67 = CFGetTypeID(v65);
          if (v67 == CFNumberGetTypeID())
          {
            CFTypeID v68 = CFGetTypeID(v66);
            if (v68 == CFNumberGetTypeID())
            {
              *(void *)int valuePtr = 0;
              CFDataRef v140 = 0;
              CFNumberGetValue((CFNumberRef)v65, kCFNumberSInt64Type, valuePtr);
              CFNumberGetValue((CFNumberRef)v66, kCFNumberSInt64Type, &v140);
              *(void *)valuePtr += v140;
              CFNumberRef v69 = CFNumberCreate(v132, kCFNumberSInt64Type, valuePtr);
              CFArraySetValueAtIndex(MutableCopy, j, v69);
              CFRelease(v69);
            }
          }
          a4 = v64;
        }
        for (CFIndex k = CFArrayGetCount(MutableCopy); k < CFArrayGetCount(v63); ++k)
        {
          unsigned int v71 = CFArrayGetValueAtIndex(v63, k);
          CFArraySetValueAtIndex(MutableCopy, k, v71);
        }
        CFRelease(v131);
      }
    }
  }
  if (db_delete_field_weak(a4, v130, a2, v23) != 1)
  {
    unsigned int v72 = v139;
    CFIndex v73 = CFArrayGetCount(MutableCopy);
    if (v73 >= 1)
    {
      unint64_t v74 = v73;
      bzero(v145, 0x400uLL);
      int v124 = a4;
      int v125 = v15;
      int v122 = MutableCopy;
      CFTypeRef v131 = (CFTypeRef)v74;
      if (v74 < 0x81)
      {
        unsigned int v75 = v145;
        v153.location = 0;
        v153.length = v74;
        CFArrayGetValues(MutableCopy, v153, v145);
        if (v74 < 2)
        {
          CFAllocatorRef v132 = (const __CFAllocator *)v145;
          int v76 = 0;
LABEL_174:
          uint64_t v83 = 0;
          CFDataRef v140 = 0;
          os_log_type_t v128 = &v143;
          uint32_t v129 = &unk_1F1810A00;
          while (1)
          {
            bzero(v141, 0x420uLL);
            CFStringRef v84 = (const __CFString *)*((void *)v132 + v83);
            *(void *)&v141[8] = 0;
            *(void *)&v141[16] = 0;
            *(void *)CFDictionaryRef v141 = v129;
            float v85 = fastFieldFromCFType(v84, v76, v128, v144, (CFIndex *)&v141[16], v142);
            *(void *)&v141[8] = v85;
            if (v85)
            {
              int v87 = (unsigned __int8 *)v85;
              v72 |= v144[0];
              if ((v72 & 0x100) == 0 && (*(unsigned char *)(*v130 + 40) & 2) != 0 && !strcmp(a2, "kMDItemAlternateNames")) {
                v72 |= 0x100u;
              }
              if (*v124 != 1685287992)
              {
                unsigned int v112 = v124;
                int v113 = *__error();
                int v114 = _SILogForLogForCategory(4);
                if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
                {
                  int v115 = *v112;
                  *(_DWORD *)int valuePtr = 136315650;
                  *(void *)&valuePtr[4] = "db_add_field_with_cache";
                  __int16 v147 = 1024;
                  int v148 = 345;
                  __int16 v149 = 1024;
                  int v150 = v115;
                  _os_log_error_impl(&dword_1BD672000, v114, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", valuePtr, 0x18u);
                }
                *__error() = v113;
                unint64_t v116 = __si_assert_copy_extra_329();
                unsigned int v117 = v116;
                if (v116) {
                  float v118 = v116;
                }
                else {
                  float v118 = "";
                }
                __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 345, v118);
                free(v117);
LABEL_203:
                uint64_t v110 = 2989;
LABEL_205:
                *(_DWORD *)uint64_t v110 = -559038737;
                abort();
              }
              if (v83) {
                unsigned int v88 = v72;
              }
              else {
                unsigned int v88 = v72 | 0x20;
              }
              if (v83) {
                unsigned int v89 = 2;
              }
              else {
                unsigned int v89 = 1;
              }
              db2_add_field_with_cache((unint64_t)v124, (char **)v130, v89, a2, 0, v88, v143, v87, v86, *(int *)&v141[16], &v140);
              float v85 = *(char **)&v141[8];
              *(void *)CFDictionaryRef v141 = &unk_1F1810CA0;
              if (*(char **)&v141[8] == v142) {
                goto LABEL_191;
              }
            }
            else
            {
              *(void *)CFDictionaryRef v141 = &unk_1F1810CA0;
            }
            free(v85);
LABEL_191:
            if (v131 == (CFTypeRef)++v83)
            {
              uint64_t MutableCopy = v122;
              if (v132 != (const __CFAllocator *)v145) {
                free(v132);
              }
              goto LABEL_194;
            }
          }
        }
      }
      else
      {
        unsigned int v75 = (const void **)malloc_type_malloc(8 * v74, 0xC0040B8AA526DuLL);
        v152.location = 0;
        v152.length = v74;
        CFArrayGetValues(MutableCopy, v152, v75);
      }
      int v76 = 0;
      uint64_t v77 = 0;
      os_log_type_t v128 = &v143;
      uint32_t v129 = &unk_1F1810A00;
      int v123 = v144;
      CFAllocatorRef v132 = (const __CFAllocator *)v75;
      do
      {
        bzero(v142, 0x408uLL);
        CFStringRef v78 = (const __CFString *)v75[(void)v77];
        *(void *)&v141[8] = 0;
        *(void *)&v141[16] = 0;
        *(void *)CFDictionaryRef v141 = v129;
        unint64_t v79 = fastFieldFromCFType(v78, 0, v128, v123, (CFIndex *)&v141[16], v142);
        BOOL v80 = v143 <= 10 || (v143 & 0xFFFFFFFD) == 12;
        int v81 = !v80;
        if (v76 <= v143) {
          int v82 = v143;
        }
        else {
          int v82 = v76;
        }
        *(void *)CFDictionaryRef v141 = &unk_1F1810CA0;
        *(void *)&v141[8] = v79;
        if (v79 != v142) {
          free(v79);
        }
        if (v81) {
          goto LABEL_174;
        }
        uint64_t v77 = (char *)v77 + 1;
        int v76 = v82;
        unsigned int v75 = (const void **)v132;
      }
      while (v131 != v77);
      int v76 = v82;
      goto LABEL_174;
    }
  }
LABEL_194:
  if (MutableCopy != v127) {
    CFRelease(MutableCopy);
  }
LABEL_92:
  if (v138) {
    free(v126);
  }
}

uint64_t db_corespotlight_store(uint64_t a1)
{
  if (*(_DWORD *)a1 != 1685287992)
  {
    uint64_t v2 = __si_assert_copy_extra_329();
    uint64_t v3 = v2;
    if (v2) {
      uint64_t v4 = v2;
    }
    else {
      uint64_t v4 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 464, v4);
    free(v3);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  return (*(unsigned __int8 *)(a1 + 804) >> 2) & 1;
}

char *fasterUTF8String(const __CFString *a1, void *a2, char *a3, CFIndex a4, unsigned char *a5)
{
  CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
  if (CStringPtr)
  {
    CFStringRef v11 = CStringPtr;
    *a5 = 0;
    *a2 = CFStringGetLength(a1) + 1;
    return (char *)v11;
  }
  else if (CFStringGetCString(a1, a3, a4, 0x8000100u))
  {
    *a2 = strlen(a3) + 1;
    *a5 = 0;
  }
  else
  {
    CFIndex Length = CFStringGetLength(a1);
    CFIndex v13 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    a3 = (char *)malloc_type_malloc(v13, 0x9057F75EuLL);
    CFStringGetCString(a1, a3, v13, 0x8000100u);
    *a2 = strlen(a3) + 1;
    *a5 = 1;
  }
  return a3;
}

uint64_t getFlagsFromAttributes(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  CFStringRef v2 = v1;
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = buffer;
  bzero(buffer, 0x1000uLL);
  CCFStringRef String = CFStringGetCString(v2, buffer, 4096, 0x8000100u);
  if (!CString) {
    uint64_t v3 = 0;
  }
  if (_os_feature_enabled_impl())
  {
    int v5 = strcmp(v3, "kMDItemTextVector");
    if (v5) {
      uint64_t result = 0;
    }
    else {
      uint64_t result = 20528;
    }
    if (!v5 || !CString) {
      return result;
    }
  }
  else if (!CString)
  {
    return 0;
  }
  uint64_t result = _MDPlistDictionaryGetPlistObjectForKey();
  if (result)
  {
    if (_MDPlistDictionaryGetPlistObjectForKey())
    {
      int PlistObjectType = _MDPlistGetPlistObjectType();
      if (PlistObjectType == 225)
      {
        BOOL v8 = _MDPlistBooleanGetValue() != 0;
      }
      else
      {
        int v9 = PlistObjectType;
        int v10 = *__error();
        CFStringRef v11 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315906;
          unsigned int v40 = "getFlagsFromAttributes";
          __int16 v41 = 1024;
          int v42 = 134;
          __int16 v43 = 1024;
          int v44 = v9;
          __int16 v45 = 2080;
          CFIndex v46 = "uniqued";
          _os_log_error_impl(&dword_1BD672000, v11, OS_LOG_TYPE_ERROR, "%s:%d: Invalid type:%d for schema field:\"%s\"", buf, 0x22u);
        }
        BOOL v8 = 0;
        *__error() = v10;
      }
    }
    else
    {
      BOOL v8 = 0;
    }
    if (_MDPlistDictionaryGetPlistObjectForKey())
    {
      int v12 = _MDPlistGetPlistObjectType();
      if (v12 == 225)
      {
        BOOL v13 = _MDPlistBooleanGetValue() != 0;
      }
      else
      {
        int v14 = v12;
        int v15 = *__error();
        int v16 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315906;
          unsigned int v40 = "getFlagsFromAttributes";
          __int16 v41 = 1024;
          int v42 = 142;
          __int16 v43 = 1024;
          int v44 = v14;
          __int16 v45 = 2080;
          CFIndex v46 = "multivalued";
          _os_log_error_impl(&dword_1BD672000, v16, OS_LOG_TYPE_ERROR, "%s:%d: Invalid type:%d for schema field:\"%s\"", buf, 0x22u);
        }
        BOOL v13 = 0;
        *__error() = v15;
      }
    }
    else
    {
      BOOL v13 = 0;
    }
    if (_MDPlistDictionaryGetPlistObjectForKey())
    {
      int v17 = _MDPlistGetPlistObjectType();
      if (v17 == 225)
      {
        BOOL v18 = _MDPlistBooleanGetValue() != 0;
      }
      else
      {
        int v19 = v17;
        int v20 = *__error();
        char v21 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315906;
          unsigned int v40 = "getFlagsFromAttributes";
          __int16 v41 = 1024;
          int v42 = 150;
          __int16 v43 = 1024;
          int v44 = v19;
          __int16 v45 = 2080;
          CFIndex v46 = "nosearch";
          _os_log_error_impl(&dword_1BD672000, v21, OS_LOG_TYPE_ERROR, "%s:%d: Invalid type:%d for schema field:\"%s\"", buf, 0x22u);
        }
        BOOL v18 = 0;
        *__error() = v20;
      }
    }
    else
    {
      BOOL v18 = 0;
    }
    if (_os_feature_enabled_impl() && _MDPlistDictionaryGetPlistObjectForKey())
    {
      int v22 = _MDPlistGetPlistObjectType();
      if (v22 == 225)
      {
        BOOL v23 = _MDPlistBooleanGetValue() != 0;
      }
      else
      {
        int v36 = v22;
        int v37 = *__error();
        unsigned int v38 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136316162;
          unsigned int v40 = "getFlagsFromAttributes";
          __int16 v41 = 1024;
          int v42 = 159;
          __int16 v43 = 1024;
          int v44 = v36;
          __int16 v45 = 2080;
          CFIndex v46 = "vector";
          __int16 v47 = 2112;
          CFStringRef v48 = v2;
          _os_log_error_impl(&dword_1BD672000, v38, OS_LOG_TYPE_ERROR, "%s:%d: Invalid type:%d for schema field:\"%s\" %@", buf, 0x2Cu);
        }
        BOOL v23 = 0;
        *__error() = v37;
      }
    }
    else
    {
      BOOL v23 = 0;
    }
    if (_MDPlistDictionaryGetPlistObjectForKey())
    {
      int v24 = _MDPlistGetPlistObjectType();
      if (v24 == 225)
      {
        BOOL v25 = _MDPlistBooleanGetValue() != 0;
      }
      else
      {
        int v26 = v24;
        int v27 = *__error();
        uint64_t v28 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315906;
          unsigned int v40 = "getFlagsFromAttributes";
          __int16 v41 = 1024;
          int v42 = 168;
          __int16 v43 = 1024;
          int v44 = v26;
          __int16 v45 = 2080;
          CFIndex v46 = "noindex";
          _os_log_error_impl(&dword_1BD672000, v28, OS_LOG_TYPE_ERROR, "%s:%d: Invalid type:%d for schema field:\"%s\"", buf, 0x22u);
        }
        BOOL v25 = 0;
        *__error() = v27;
      }
    }
    else
    {
      BOOL v25 = 0;
    }
    if (_MDPlistDictionaryGetPlistObjectForKey())
    {
      int v29 = _MDPlistGetPlistObjectType();
      if (v29 == 225)
      {
        BOOL v30 = _MDPlistBooleanGetValue() != 0;
      }
      else
      {
        int v31 = v29;
        int v32 = *__error();
        uint64_t v33 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315906;
          unsigned int v40 = "getFlagsFromAttributes";
          __int16 v41 = 1024;
          int v42 = 175;
          __int16 v43 = 1024;
          int v44 = v31;
          __int16 v45 = 2080;
          CFIndex v46 = "notokenize";
          _os_log_error_impl(&dword_1BD672000, v33, OS_LOG_TYPE_ERROR, "%s:%d: Invalid type:%d for schema field:\"%s\"", buf, 0x22u);
        }
        uint64_t v34 = __error();
        BOOL v30 = 0;
        *uint64_t v34 = v32;
      }
    }
    else
    {
      BOOL v30 = 0;
    }
    if (v8) {
      unsigned int v35 = 16;
    }
    else {
      unsigned int v35 = 0;
    }
    if (v13) {
      v35 |= 0x20u;
    }
    if (v18) {
      v35 |= 0x100u;
    }
    if (v23) {
      v35 |= 0x5030u;
    }
    if (v25) {
      v35 |= 0x2000u;
    }
    if (v30) {
      return v35 | 0x4000;
    }
    else {
      return v35;
    }
  }
  return result;
}

char *fastFieldFromCFType(const __CFString *cf, int a2, int *a3, _WORD *a4, CFIndex *a5, char *a6)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (fastFieldFromCFType_onceToken[0] != -1) {
    dispatch_once(fastFieldFromCFType_onceToken, &__block_literal_global_8059);
  }
  *a4 = 0;
  CFTypeID v12 = CFGetTypeID(cf);
  if (v12 != fastFieldFromCFType_sStringTypeID)
  {
    if (v12 == fastFieldFromCFType_sDictionaryTypeID)
    {
      uint64_t value = 0;
      if (_os_feature_enabled_impl())
      {
        if (CFDictionaryGetValueIfPresent((CFDictionaryRef)cf, @"vec_data", (const void **)&value))
        {
          CFTypeID v14 = CFGetTypeID(value);
          if (v14 == CFDataGetTypeID())
          {
            __int16 valuePtr = 0;
            __int16 v37 = 0;
            *(void *)cfa = 0;
            if (CFDictionaryGetValueIfPresent((CFDictionaryRef)cf, @"vec_dim", (const void **)cfa))
            {
              CFTypeID v15 = CFGetTypeID(*(CFTypeRef *)cfa);
              if (v15 == CFNumberGetTypeID()) {
                CFNumberGetValue(*(CFNumberRef *)cfa, kCFNumberSInt8Type, &valuePtr);
              }
            }
            if (CFDictionaryGetValueIfPresent((CFDictionaryRef)cf, @"vec_format", (const void **)cfa))
            {
              CFTypeID v16 = CFGetTypeID(*(CFTypeRef *)cfa);
              if (v16 == CFNumberGetTypeID()) {
                CFNumberGetValue(*(CFNumberRef *)cfa, kCFNumberSInt8Type, (char *)&valuePtr + 1);
              }
            }
            if (CFDictionaryGetValueIfPresent((CFDictionaryRef)cf, @"vec_version", (const void **)cfa))
            {
              CFTypeID v17 = CFGetTypeID(*(CFTypeRef *)cfa);
              if (v17 == CFNumberGetTypeID()) {
                CFNumberGetValue(*(CFNumberRef *)cfa, kCFNumberSInt16Type, &v37);
              }
            }
            *a4 |= 0x5038u;
            unint64_t Length = CFDataGetLength((CFDataRef)value);
            uint64_t v19 = Length;
            char v20 = HIBYTE(valuePtr);
            unint64_t v21 = -1;
            if (valuePtr <= 2uLL && HIBYTE(valuePtr) <= 2u) {
              unint64_t v21 = (vector_dimension_vec_sizes_12485[valuePtr]
            }
                                 * vector_size_elem_sizes_12484[HIBYTE(valuePtr)]);
            if (v21 <= Length)
            {
              *a3 = 14;
              size_t v22 = Length + 4;
              *a5 = v19 + 4;
              if (v19 >= 1021)
              {
                a6 = (char *)malloc_type_malloc(v22, 0xAF8E7574uLL);
                char v20 = HIBYTE(valuePtr);
              }
              *a6 = v20;
              a6[1] = valuePtr;
              *((_WORD *)a6 + 1) = v37;
              BytePtr = CFDataGetBytePtr((CFDataRef)value);
              int v24 = a6 + 4;
              size_t v25 = v19;
LABEL_31:
              memcpy(v24, BytePtr, v25);
              return a6;
            }
            return 0;
          }
        }
      }
      *a5 = 0;
      int v29 = *__error();
      BOOL v30 = _SILogForLogForCategory(7);
      os_log_type_t v31 = 2 * (dword_1E9FC90C0 < 4);
      if (os_log_type_enabled(v30, v31))
      {
        *(_DWORD *)cfa = 138412290;
        *(void *)&cfa[4] = cf;
LABEL_34:
        _os_log_impl(&dword_1BD672000, v30, v31, "no type conversion for %@", cfa, 0xCu);
      }
    }
    else
    {
      if (v12 == fastFieldFromCFType_sDataTypeID)
      {
        *a3 = 14;
        *a5 = CFDataGetLength((CFDataRef)cf);
        int v26 = CFDataGetBytePtr((CFDataRef)cf);
        int64_t v27 = CFDataGetLength((CFDataRef)cf);
        size_t v28 = v27;
        if (v27 >= 1025) {
          a6 = (char *)malloc_type_malloc(v27, 0xF0385B8BuLL);
        }
        int v24 = a6;
        BytePtr = v26;
        size_t v25 = v28;
        goto LABEL_31;
      }
      if (v12 == fastFieldFromCFType_sNumberTypeID)
      {
        if ((a2 - 1) >= 8)
        {
          if (a2 == 9)
          {
LABEL_50:
            *(_DWORD *)cfa = 0;
            if (CFNumberGetValue((CFNumberRef)cf, kCFNumberFloatType, cfa))
            {
              *a3 = 9;
              *a5 = 4;
              *(_DWORD *)a6 = *(_DWORD *)cfa;
              return a6;
            }
            return 0;
          }
          if (a2 != 10)
          {
            switch(CFNumberGetType((CFNumberRef)cf))
            {
              case kCFNumberFloat32Type:
              case kCFNumberFloatType:
                goto LABEL_50;
              case kCFNumberFloat64Type:
              case kCFNumberDoubleType:
                break;
              default:
                goto LABEL_39;
            }
          }
          *(void *)cfa = 0;
          if (!CFNumberGetValue((CFNumberRef)cf, kCFNumberDoubleType, cfa)) {
            return 0;
          }
          int v32 = 10;
        }
        else
        {
LABEL_39:
          *(void *)cfa = 0;
          if (!CFNumberGetValue((CFNumberRef)cf, kCFNumberLongLongType, cfa)) {
            return 0;
          }
          int v32 = 7;
        }
        *a3 = v32;
        *a5 = 8;
        *(void *)a6 = *(void *)cfa;
        return a6;
      }
      if (v12 == fastFieldFromCFType_sDateTypeID)
      {
        double v33 = MEMORY[0x1C187FB10](cf);
        *a3 = 12;
        *a5 = 8;
        *(double *)a6 = v33;
        return a6;
      }
      if (v12 == fastFieldFromCFType_sBoolTypeID)
      {
        if (cf) {
          BOOL v34 = CFBooleanGetValue((CFBooleanRef)cf) != 0;
        }
        else {
          BOOL v34 = 0;
        }
        *a3 = 1;
        *a4 = 1024;
        *a5 = 1;
        *a6 = v34;
        return a6;
      }
      if (v12 == fastFieldFromCFType_sNullTypeID)
      {
        if (dword_1E9FC90C0 >= 5)
        {
          int v35 = *__error();
          int v36 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)cfa = 0;
            _os_log_impl(&dword_1BD672000, v36, OS_LOG_TYPE_DEFAULT, "skipping CFNull", cfa, 2u);
          }
          a6 = 0;
          *__error() = v35;
          return a6;
        }
        return 0;
      }
      int v29 = *__error();
      BOOL v30 = _SILogForLogForCategory(7);
      os_log_type_t v31 = 2 * (dword_1E9FC90C0 < 4);
      if (os_log_type_enabled(v30, v31))
      {
        *(_DWORD *)cfa = 138412290;
        *(void *)&cfa[4] = cf;
        goto LABEL_34;
      }
    }
    a6 = 0;
    *__error() = v29;
    return a6;
  }
  *a3 = 11;
  return fastUTF8String(cf, a5, a6);
}

BOOL objectHasContent(int *a1, uint64_t a2)
{
  unint64_t v3 = 0;
  uint64_t v4 = 0;
  return !db_get_field(a1, a2, "_kMDItemTextContentIndexExists", &v3, &v4) && *v4 != 0;
}

uint64_t computeFlags(const char *__s1, int *a2, int a3, char a4, char a5)
{
  int v7 = *a2;
  int v8 = *a2 & 0x800;
  uint64_t result = 8;
  if (a4 & 1) != 0 || (a5) {
    goto LABEL_19;
  }
  if (v8) {
    BOOL v10 = a3 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
LABEL_7:
    CFTypeID v14 = __si_assert_copy_extra_329();
    size_t v22 = v14;
    __message_assert_333((uint64_t)v14, v15, v16, v17, v18, v19, v20, v21, (char)"SIIndexInternals.cpp");
    free(v22);
    if (__valid_fs(-1)) {
      uint64_t v23 = 2989;
    }
    else {
      uint64_t v23 = 3072;
    }
    *(_DWORD *)uint64_t v23 = -559038737;
    abort();
  }
  if (strcmp(__s1, "kMDItemUserTags"))
  {
    if (!strcmp(__s1, "kMDItemFinderComment"))
    {
      int v12 = v7 | 0x800;
      if (a3) {
        int v12 = v7;
      }
      *a2 = v12 | 0x200;
      int v8 = v12 & 0x800;
    }
    else if (strcmp(__s1, "_kMDItemFinderLabel") {
           && strcmp(__s1, "_kMDItemSizingIsNeeded")
    }
           && strcmp(__s1, "kMDItemSubject"))
    {
      uint64_t result = 1;
      goto LABEL_19;
    }
  }
  uint64_t result = 8;
  if (v8 && a3)
  {
    int v24 = __si_assert_copy_extra_329();
    __message_assert_333((uint64_t)v24, v25, v26, v27, v28, v29, v30, v31, (char)"SIIndexInternals.cpp");
    free(v24);
    if (__valid_fs(-1)) {
      uint64_t v32 = 2989;
    }
    else {
      uint64_t v32 = 3072;
    }
    *(_DWORD *)uint64_t v32 = -559038737;
    abort();
  }
LABEL_19:
  if (v8) {
    BOOL v13 = a3 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13) {
    goto LABEL_7;
  }
  return result;
}

uint64_t db_delete_field_weak(_DWORD *a1, uint64_t *a2, char *a3, int a4)
{
  if (*a1 != 1685287992)
  {
    int v7 = __si_assert_copy_extra_329();
    int v8 = v7;
    if (v7) {
      int v9 = v7;
    }
    else {
      int v9 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 366, v9);
    free(v8);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  int v4 = a4 ^ 1;
  uint64_t v5 = *a2;
  return _delete_field((uint64_t)a1, v5, a3, v4);
}

uint64_t _delete_field(uint64_t a1, uint64_t a2, char *__s, int a4)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(a1 + 804) & 8) != 0) {
    return 13;
  }
  v17[0] = 0;
  v17[1] = 0;
  pthread_key_t v6 = (int *)internal_copy_field_ids(a1, __s, (uint64_t)v17, 4uLL, 0);
  if (!v6) {
    return 2;
  }
  int v7 = v6;
  uint64_t v8 = *(unsigned int *)(a2 + 12);
  if (v8 < 0x31)
  {
LABEL_13:
    if (v7 != (int *)v17) {
      free(v7);
    }
    return 2;
  }
  unint64_t v9 = a2 + v8;
  unint64_t v10 = a2 + 48;
  while (1)
  {
    uint64_t v12 = *(unsigned int *)(v10 + 8);
    if (v10 + v12 > v9)
    {
      *(_DWORD *)(a2 + 12) = v10 - a2;
      return 2;
    }
    int v13 = *v7;
    if (*v7) {
      break;
    }
LABEL_6:
    v10 += v12 + 13;
    if (v10 >= v9) {
      goto LABEL_13;
    }
  }
  uint64_t v14 = 1;
  while (*(_DWORD *)(v10 + 4) != v13)
  {
    int v13 = v7[v14++];
    if (!v13) {
      goto LABEL_6;
    }
  }
  if (a4 && (*(_WORD *)(v10 + 2) & 0x200) != 0)
  {
    if (v17 != (void *)v7) {
      free(v7);
    }
    return 1;
  }
  else
  {
    uint64_t v15 = v10 + v12;
    int v16 = v10 - (v15 + 13);
    memmove((void *)v10, (const void *)(v15 + 13), v9 - (v15 + 13));
    *(_DWORD *)(a2 + 12) += v16;
    if (v17 != (void *)v7) {
      free(v7);
    }
    return 0;
  }
}

uint64_t _si_get_object_for_identifier_createParentDBO(uint64_t a1, int a2, char *__str, int a4, uint64_t a5, int a6, char *a7, void *a8, unint64_t *a9, int a10, unsigned __int8 a11)
{
  BOOL v80 = a8;
  int v13 = (char *)a5;
  uint64_t v14 = __str;
  int v82 = a10;
  unint64_t v79 = a9;
  v104[1] = *MEMORY[0x1E4F143B8];
  unsigned int v89 = 0;
  uint64_t v17 = *(int **)(a1 + 1184);
  uint64_t v18 = si_compute_oid_for_identifier_bundle_id(__str, a2, a5, a4);
  unint64_t v19 = v18;
  int v20 = a6 + a2;
  int v21 = a11;
  unsigned int v22 = *(_DWORD *)(a1 + 2052);
  uint64_t v83 = (v20 + 250);
  v104[0] = v22;
  v103[0] = *(_DWORD *)(a1 + 2056);
  v103[1] = 0;
  *(void *)&long long v23 = 136316418;
  long long v78 = v23;
  int v81 = a11;
  while (1)
  {
    unsigned int v88 = 0;
    MEMORY[0x1F4188790](v18);
    uint64_t v25 = (char *)&v78 - ((v24 + 15) & 0x1FFFFFFF0);
    bzero(v25, v24);
    if (v21)
    {
      if (*v17 != 1685287992)
      {
        int v72 = *__error();
        CFIndex v73 = _SILogForLogForCategory(4);
        if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
        {
          int v74 = *v17;
          *(_DWORD *)int buf = 136315650;
          int v91 = "db_create_obj_with_buffer";
          __int16 v92 = 1024;
          int v93 = 313;
          __int16 v94 = 1024;
          LODWORD(v95) = v74;
          _os_log_error_impl(&dword_1BD672000, v73, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
        }
        *__error() = v72;
        unsigned int v75 = __si_assert_copy_extra_329();
        int v76 = v75;
        if (v75) {
          uint64_t v77 = v75;
        }
        else {
          uint64_t v77 = "";
        }
        __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 313, v77);
        free(v76);
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      uint64_t v26 = 0;
      if (v83 >= 0x30 && (v17[201] & 8) == 0)
      {
        *((_DWORD *)v25 + 2) = v83;
        *((_DWORD *)v25 + 3) = 48;
        *((void *)v25 + 3) = 0;
        *((void *)v25 + 4) = 0;
        uint64_t v26 = v25;
        *((void *)v25 + 5) = 520;
      }
      unsigned int v88 = v26;
      *(void *)uint64_t v26 = v19;
      int v27 = strlen(v14);
      db_add_field(v17, &v88, 0, "_kMDItemExternalID", *(unsigned int *)(a1 + 2052), 0x2308u, 11, (unsigned __int8 *)v14, v28, v27 + 1);
      int v29 = strlen(v13);
      db_add_field(v17, &v88, 0x10u, "_kMDItemBundleID", *(unsigned int *)(a1 + 2056), 0x4318u, 11, (unsigned __int8 *)v13, v30, v29 + 1);
      if (a7)
      {
        int v31 = strlen(a7);
        db_add_field(v17, &v88, 0x10u, "_kMDItemDomainIdentifier", *(unsigned int *)(a1 + 2060), 0x4300u, 11, (unsigned __int8 *)a7, v32, v31 + 1);
      }
    }
    obj_callbacCFIndex k = db_get_obj_callback(v17, v19, (void **)&v89, 1, (void (*)(void *, uint64_t))si_docIdRewriteCallback, *(void *)(a1 + 2360), v88);
    if (obj_callback && obj_callback != 3) {
      break;
    }
    __n128 v86 = 0;
    int v87 = 0;
    int field_by_id = db_get_field_by_id(v17, (uint64_t)v89, (int *)v104, (unint64_t *)&v87, (unint64_t *)&v86);
    CFStringRef v84 = 0;
    float v85 = 0;
    int v36 = db_get_field_by_id(v17, (uint64_t)v89, v103, (unint64_t *)&v85, (unint64_t *)&v84);
    if (field_by_id | v36)
    {
      int v61 = v36;
      int v62 = *__error();
      CFArrayRef v63 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = v78;
        int v91 = "_si_get_object_for_identifier_createParentDBO";
        __int16 v92 = 1024;
        int v93 = 24985;
        __int16 v94 = 2048;
        unint64_t v95 = v19;
        __int16 v96 = 2048;
        unint64_t v97 = v19;
        __int16 v98 = 1024;
        *(_DWORD *)uint64_t v99 = field_by_id;
        *(_WORD *)&v99[4] = 1024;
        *(_DWORD *)&v99[6] = v61;
        _os_log_error_impl(&dword_1BD672000, v63, OS_LOG_TYPE_ERROR, "%s:%d: Failed to fetch the bundleId/identifier field, oid:0x%llx(%lld), rc1:%d, rc2:%d", buf, 0x32u);
      }
      *__error() = v62;
LABEL_47:
      uint64_t v67 = 22;
LABEL_48:
      unint64_t v64 = v80;
      unsigned int v65 = v79;
LABEL_49:
      if (!v65) {
        goto LABEL_51;
      }
LABEL_50:
      *unsigned int v65 = v19;
      goto LABEL_51;
    }
    if (*v87 != 11 || (__int16 v37 = v85, *v85 != 11))
    {
      int v59 = *__error();
      CFArrayRef v60 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
      {
        int v68 = *v87;
        int v69 = v87[1];
        int v70 = *v85;
        int v71 = v85[1];
        *(_DWORD *)int buf = 136316930;
        int v91 = "_si_get_object_for_identifier_createParentDBO";
        __int16 v92 = 1024;
        int v93 = 24990;
        __int16 v94 = 2048;
        unint64_t v95 = v19;
        __int16 v96 = 2048;
        unint64_t v97 = v19;
        __int16 v98 = 1024;
        *(_DWORD *)uint64_t v99 = v68;
        *(_WORD *)&v99[4] = 1024;
        *(_DWORD *)&v99[6] = v69;
        *(_WORD *)uint64_t v100 = 1024;
        *(_DWORD *)&v100[2] = v70;
        __int16 v101 = 1024;
        int v102 = v71;
        _os_log_error_impl(&dword_1BD672000, v60, OS_LOG_TYPE_ERROR, "%s:%d: Invalid type for bundleId/identifier field, oid:0x%llx(%lld), type1:%d, flags1:0x%x, type2:%d, flags2:0x%x", buf, 0x3Eu);
      }
      *__error() = v59;
      goto LABEL_47;
    }
    string_for_id = (const char *)v86;
    if ((v87[1] & 0x10) != 0)
    {
      string_for_id = (const char *)db_get_string_for_id(v17, *v86);
      __int16 v37 = v85;
    }
    unint64_t v39 = (const char *)v84;
    if ((v37[1] & 0x10) != 0) {
      unint64_t v39 = (const char *)db_get_string_for_id(v17, *v84);
    }
    if (!string_for_id || !v39)
    {
      if (string_for_id)
      {
        if (v39) {
          goto LABEL_32;
        }
        int v40 = *__error();
        uint64_t v41 = _SILogForLogForCategory(4);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
        {
          int v42 = *v85;
          int v43 = v85[1];
          *(_DWORD *)int buf = v78;
          int v91 = "_si_get_object_for_identifier_createParentDBO";
          __int16 v92 = 1024;
          int v93 = 25005;
          __int16 v94 = 2048;
          unint64_t v95 = v19;
          __int16 v96 = 2048;
          unint64_t v97 = v19;
          __int16 v98 = 1024;
          *(_DWORD *)uint64_t v99 = v42;
          *(_WORD *)&v99[4] = 1024;
          *(_DWORD *)&v99[6] = v43;
          int v44 = v41;
          __int16 v45 = "%s:%d: Missing bundleId field, oid:0x%llx(%lld), type:%d, flags:0x%x";
          goto LABEL_40;
        }
      }
      else
      {
        int v40 = *__error();
        CFIndex v46 = _SILogForLogForCategory(4);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          int v57 = *v87;
          int v58 = v87[1];
          *(_DWORD *)int buf = v78;
          int v91 = "_si_get_object_for_identifier_createParentDBO";
          __int16 v92 = 1024;
          int v93 = 25003;
          __int16 v94 = 2048;
          unint64_t v95 = v19;
          __int16 v96 = 2048;
          unint64_t v97 = v19;
          __int16 v98 = 1024;
          *(_DWORD *)uint64_t v99 = v57;
          *(_WORD *)&v99[4] = 1024;
          *(_DWORD *)&v99[6] = v58;
          int v44 = v46;
          __int16 v45 = "%s:%d: Missing identifier field, oid:0x%llx(%lld), type:%d, flags:0x%x";
LABEL_40:
          _os_log_error_impl(&dword_1BD672000, v44, OS_LOG_TYPE_ERROR, v45, buf, 0x32u);
        }
      }
      *__error() = v40;
      goto LABEL_32;
    }
    if (!strcmp(string_for_id, v14) && !strcmp(v39, v13))
    {
      uint64_t v67 = 0;
      goto LABEL_48;
    }
LABEL_32:
    __int16 v47 = v89;
    int v48 = v89[10];
    if (v82)
    {
      v89[10] = v48 | 0x10;
      int updated = db_update_obj(v17, (uint64_t)v47, 11);
      if (updated)
      {
        int v50 = updated;
        int v51 = v14;
        CFAllocatorRef v52 = v13;
        CFDictionaryRef v53 = a7;
        int v54 = *__error();
        CFTypeID v55 = _SILogForLogForCategory(4);
        if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
        {
          uint64_t v56 = v89[10];
          *(_DWORD *)int buf = v78;
          int v91 = "_si_get_object_for_identifier_createParentDBO";
          __int16 v92 = 1024;
          int v93 = 25016;
          __int16 v94 = 2048;
          unint64_t v95 = v19;
          __int16 v96 = 2048;
          unint64_t v97 = v19;
          __int16 v98 = 2048;
          *(void *)uint64_t v99 = v56;
          *(_WORD *)&v99[8] = 1024;
          *(_DWORD *)uint64_t v100 = v50;
          _os_log_error_impl(&dword_1BD672000, v55, OS_LOG_TYPE_ERROR, "%s:%d: Failed to update the dbo for oid:0x%llx(%lld), flags:0x%lx, rc:%d", buf, 0x36u);
        }
        *__error() = v54;
        a7 = v53;
        int v13 = v52;
        uint64_t v14 = v51;
        int v21 = v81;
      }
    }
    else if ((v48 & 0x10) == 0)
    {
      unsigned int v65 = v79;
      if (v79) {
        *unint64_t v79 = 0;
      }
      unint64_t v64 = v80;
      if (v80) {
        *BOOL v80 = 0;
      }
      free(v47);
      unsigned int v89 = 0;
      uint64_t v67 = 2;
      goto LABEL_49;
    }
    free(v89);
    unsigned int v89 = 0;
    ++v19;
  }
  uint64_t v67 = obj_callback;
  unsigned int v89 = 0;
  unint64_t v64 = v80;
  unsigned int v65 = v79;
  if (v79) {
    goto LABEL_50;
  }
LABEL_51:
  if (v64)
  {
    *unint64_t v64 = v89;
  }
  else if (v89)
  {
    free(v89);
  }
  return v67;
}

uint64_t si_compute_oid_for_identifier_bundle_id(char *__str, int a2, uint64_t a3, int a4)
{
  if (a2 > 8 || ((__endptr = 0, unsigned int v8 = strtol(__str, &__endptr, 10), !*__endptr) ? (v9 = v8 == 0) : (v9 = 1), v9)) {
    unsigned int v8 = MurmurHash3_x86_32((uint64_t)__str, a2);
  }
  return v8 | ((MurmurHash3_x86_32(a3, a4) & 0x7FFFFFFF) << 32);
}

uint64_t MurmurHash3_x86_32(uint64_t a1, int a2)
{
  int v2 = -1759636613;
  if (a2 >= 0) {
    int v3 = a2;
  }
  else {
    int v3 = a2 + 3;
  }
  int v4 = (unsigned __int8 *)(a1 + (int)(v3 & 0xFFFFFFFC));
  if ((a2 + 3) >= 7)
  {
    uint64_t v7 = -(v3 >> 2);
    int v8 = -1789642873;
    int v9 = 718793509;
    do
    {
      int v8 = 5 * v8 + 2071795100;
      int v9 = 5 * v9 + 1808688022;
      HIDWORD(v10) = *(_DWORD *)&v4[4 * v7] * v8;
      LODWORD(v10) = HIDWORD(v10);
      int v11 = (v10 >> 21) * v9;
      HIDWORD(v10) = v2;
      LODWORD(v10) = v2;
      int v2 = v11 ^ (5 * (v10 >> 19) + 1390208809);
    }
    while (!__CFADD__(v7++, 1));
    int v6 = 5 * v8 + 2071795100;
    int v5 = 5 * v9 + 1808688022;
  }
  else
  {
    int v5 = 1107688271;
    int v6 = 1713515327;
  }
  int v13 = 0;
  int v14 = a2 & 3;
  switch(v14)
  {
    case 1:
      goto LABEL_15;
    case 2:
LABEL_14:
      v13 |= v4[1] << 8;
LABEL_15:
      HIDWORD(v15) = (v13 ^ *v4) * v6;
      LODWORD(v15) = HIDWORD(v15);
      int v16 = (v15 >> 21) * v5;
      HIDWORD(v15) = v2;
      LODWORD(v15) = v2;
      int v2 = v16 ^ (5 * (v15 >> 19) + 1390208809);
      break;
    case 3:
      int v13 = v4[2] << 16;
      goto LABEL_14;
  }
  unsigned int v17 = -1028477387 * ((-2048144789 * (v2 ^ a2)) ^ ((-2048144789 * (v2 ^ a2)) >> 13));
  return v17 ^ HIWORD(v17);
}

void si_perform_livequeries_updates(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  char v173 = v2;
  uint64_t v4 = v3;
  uint64_t v167 = v5;
  uint64_t v6 = v1;
  uint64_t v227 = *MEMORY[0x1E4F143B8];
  bzero(values, 0x2000uLL);
  pthread_mutex_lock((pthread_mutex_t *)(v6 + 1704));
  CFIndex Count = CFSetGetCount(*(CFSetRef *)(v6 + 1768));
  uint64_t v8 = Count;
  uint64_t v172 = v4;
  if (Count >= 1024)
  {
    int v9 = (const void **)malloc_type_malloc(8 * Count, 0x2004093837F09uLL);
    CFSetGetValues(*(CFSetRef *)(v6 + 1768), v9);
  }
  else
  {
    if (!Count)
    {
      uint64_t v10 = 0;
      int v9 = (const void **)values;
      goto LABEL_14;
    }
    int v9 = (const void **)values;
    CFSetGetValues(*(CFSetRef *)(v6 + 1768), (const void **)values);
    if (v8 < 1)
    {
      uint64_t v10 = 0;
      goto LABEL_14;
    }
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  do
  {
    uint64_t v12 = *((void *)v9[v11] + 5);
    do
    {
      uint64_t v13 = v12;
      uint64_t v12 = *(void *)(v12 + 80);
    }
    while (v12);
    if (si_resultqueue_count(**(void **)(v13 + 8)) <= 0x400)
    {
      int v14 = (atomic_uint *)v9[v11];
      atomic_fetch_add(v14, 1u);
      v9[v10++] = v14;
    }
    ++v11;
  }
  while (v11 != v8);
  uint64_t v4 = v172;
LABEL_14:
  uint64_t v158 = *(void *)(v6 + 1784) + 1;
  *(void *)(v6 + 1784) = v158;
  pthread_mutex_unlock((pthread_mutex_t *)(v6 + 1704));
  uint64_t v176 = v6;
  unsigned int fields_generation = db_get_fields_generation(*(int **)(v6 + 1184));
  if (v10 >= 1)
  {
    uint64_t v15 = 0;
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    char v165 = v9;
    uint64_t v166 = v10;
    while (1)
    {
      int v16 = (char *)v9[v15];
      char v17 = v173;
      if (!*(void *)(v4 + 24)) {
        break;
      }
      uint64_t v168 = v15;
      uint64_t v18 = (os_unfair_lock_s *)(v16 + 48);
      os_unfair_lock_lock((os_unfair_lock_t)v16 + 12);
      if (*((_DWORD *)v16 + 8) < fields_generation)
      {
        unint64_t v19 = (const void *)*((void *)v16 + 2);
        if (v19) {
          CFRelease(v19);
        }
        int v20 = (const void *)*((void *)v16 + 3);
        if (v20) {
          CFRelease(v20);
        }
        CFMutableSetRef Mutable = CFSetCreateMutable(allocator, 0, 0);
        *((void *)v16 + 2) = CFArrayCreateMutable(allocator, 0, 0);
        *((void *)v16 + 3) = CFArrayCreateMutable(allocator, 0, 0);
        v183[0] = MEMORY[0x1E4F143A8];
        v183[1] = 0x40000000;
        v183[2] = __si_perform_livequeries_updates_block_invoke;
        v183[3] = &__block_descriptor_tmp_6_4029;
        v183[4] = v176;
        v183[5] = Mutable;
        v183[6] = v16;
        unsigned int v22 = *(void **)(*((void *)v16 + 1) + 104);
        *(void *)uint64_t v219 = MEMORY[0x1E4F143A8];
        *(void *)&v219[8] = 0x40000000;
        *(void *)&v219[16] = __db_query_tree_apply_block_block_invoke;
        __int16 v220 = &unk_1E6348598;
        int v221 = v183;
        db_query_tree_apply_block_with_meta(v22, (uint64_t)v219, 0);
        CFRelease(Mutable);
        CFMutableSetRef v23 = CFSetCreateMutable(allocator, 0, 0);
        size_t v24 = v16;
        uint64_t v25 = *((void *)v16 + 1);
        CFArrayRef v26 = *(const __CFArray **)(v25 + 16);
        if (v26)
        {
          CFIndex v27 = CFArrayGetCount(*(CFArrayRef *)(v25 + 16));
          if (v27 >= 1)
          {
            CFIndex v28 = v27;
            for (CFIndex i = 0; i != v28; ++i)
            {
              bzero(v219, 0x400uLL);
              CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v26, i);
              if (CFStringGetCString(ValueAtIndex, v219, 1024, 0x8000100u)
                && (!*(unsigned char *)(v176 + 2064)
                 || *(void *)v219 ^ 0x6D657449444D6B5FLL | *(void *)&v219[8] ^ 0x4449656C646E7542 | v219[16]))
              {
                int v31 = *(int **)(v176 + 1184);
                v177[0] = MEMORY[0x1E4F143A8];
                v177[1] = 0x40000000;
                long long v178 = __si_perform_livequeries_updates_block_invoke_3;
                long long v179 = &__block_descriptor_tmp_7_4031;
                uint64_t v180 = v176;
                CFMutableSetRef v181 = v23;
                int v182 = v24;
                long long v214 = 0u;
                long long v213 = 0u;
                __n128 v32 = db_copy_field_ids_with_buffer(v31, v219, (uint64_t)&v213, 8uLL);
                if (v32)
                {
                  double v33 = (long long *)v32;
                  if (*v32)
                  {
                    BOOL v34 = v32 + 1;
                    do
                      ((void (*)(void *))v178)(v177);
                    while (*v34++);
                  }
                  uint64_t v4 = v172;
                  if (v33 != &v213) {
                    free(v33);
                  }
                }
              }
            }
          }
        }
        CFRelease(v23);
        int v16 = (char *)v24;
        _OWORD v24[8] = fields_generation;
        int v9 = v165;
      }
      CFArrayRef v36 = (const __CFArray *)CFRetain(*((CFTypeRef *)v16 + 2));
      CFArrayRef v37 = (const __CFArray *)CFRetain(*((CFTypeRef *)v16 + 3));
      os_unfair_lock_unlock(v18);
      CFIndex v38 = CFArrayGetCount(v36);
      char v17 = v173;
      if (v38)
      {
        uint64_t v39 = v38;
        char v17 = CFArrayGetValueAtIndex(v36, 0) ? v173 : v173 | 8;
        if (v39 >= 1)
        {
          CFIndex v40 = 0;
          while (1)
          {
            CFSetRef v41 = *(const __CFSet **)(v4 + 24);
            int v42 = CFArrayGetValueAtIndex(v36, v40);
            if (CFSetContainsValue(v41, v42)) {
              break;
            }
            if (v39 == ++v40) {
              goto LABEL_46;
            }
          }
          v17 |= 2u;
LABEL_46:
          int v9 = v165;
        }
      }
      CFRelease(v36);
      CFIndex v43 = CFArrayGetCount(v37);
      if (v43 >= 1)
      {
        CFIndex v44 = v43;
        CFIndex v45 = 0;
        while (1)
        {
          CFSetRef v46 = *(const __CFSet **)(v4 + 24);
          __int16 v47 = CFArrayGetValueAtIndex(v37, v45);
          if (CFSetContainsValue(v46, v47)) {
            break;
          }
          if (v44 == ++v45) {
            goto LABEL_53;
          }
        }
        v17 |= 4u;
      }
LABEL_53:
      CFRelease(v37);
      uint64_t v15 = v168;
      if ((v17 & 6) == 0 && dword_1E9FC90AC >= 5)
      {
        int v128 = *__error();
        uint32_t v129 = _SILogForLogForCategory(2);
        if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v130 = *v167;
          uint64_t v131 = *((void *)v16 + 1);
          *(_DWORD *)uint64_t v219 = 134218240;
          *(void *)&v219[4] = v130;
          *(_WORD *)&v219[12] = 2048;
          *(void *)&v219[14] = v131;
          _os_log_impl(&dword_1BD672000, v129, OS_LOG_TYPE_DEFAULT, "skip dbo:%lld %p", v219, 0x16u);
        }
        *__error() = v128;
        uint64_t v4 = v172;
        goto LABEL_197;
      }
      if ((v17 & 6) != 0) {
        break;
      }
LABEL_197:
      si_livequery_release(v16);
      if (++v15 == v166) {
        goto LABEL_220;
      }
    }
    uint64_t v48 = *((void *)v16 + 1);
    int64_t v171 = v16;
    uint64_t v49 = *((void *)v16 + 5);
    uint64_t v50 = *(void *)(v48 + 144);
    *(void *)uint64_t v219 = MEMORY[0x1E4F143A8];
    *(void *)&v219[8] = 0x40000000;
    *(void *)&v219[16] = __query_once_block_invoke;
    __int16 v220 = &__block_descriptor_tmp_518;
    int v221 = (void *)v48;
    if (v50 != -1) {
      dispatch_once((dispatch_once_t *)(v48 + 144), v219);
    }
    uint64_t v51 = *(void *)(v49 + 88);
    if (*(unsigned char *)v4)
    {
      uint64_t v52 = *(void *)(v48 + 136);
      if (v52 < 1)
      {
        uint64_t v53 = 0;
      }
      else
      {
        uint64_t v53 = 0;
        uint64_t v54 = *(void *)(v48 + 128);
        uint64_t v55 = *(void *)(v48 + 136);
        do
        {
          if (*(unsigned char *)(*(void *)v54 + 4))
          {
            *(unsigned char *)(v4 + 16) = 0;
            ++v53;
          }
          v54 += 16;
          --v55;
        }
        while (v55);
      }
      if (v53 == v52)
      {
LABEL_196:
        int v16 = v171;
        goto LABEL_197;
      }
    }
    uint64_t v206 = 0;
    uint64_t v202 = v176;
    uint64_t v203 = 0;
    uint64_t v204 = v51;
    uint64_t v205 = v17 & 1;
    long long v201 = &unk_1F1810BD0;
    BYTE1(v205) = *(unsigned char *)(v4 + 16);
    HIDWORD(v205) = *(_DWORD *)(v4 + 4);
    uint64_t v207 = *(void *)(v4 + 8);
    int v198 = v167;
    uint64_t v199 = 0;
    uint64_t v200 = v158;
    if (v51) {
      uint64_t v174 = *(char ***)(v51 + 120);
    }
    else {
      uint64_t v174 = 0;
    }
    int v56 = *(_DWORD *)(v4 + 20);
    if ((v56 & 1) != 0 && (*(unsigned char *)(v48 + 200) & 0x80) == 0)
    {
      double Current = CFAbsoluteTimeGetCurrent();
      goto LABEL_114;
    }
    if ((v56 & 2) != 0)
    {
      uint64_t v58 = *(void *)(v48 + 200);
      double Current = CFAbsoluteTimeGetCurrent();
      if ((v58 & 0x100) != 0) {
        goto LABEL_114;
      }
    }
    else
    {
      double Current = CFAbsoluteTimeGetCurrent();
    }
    char v156 = v56;
    if (*(void *)(v176 + 6616) && (HIDWORD(v205) || *(unsigned char *)(v176 + 2064)))
    {
      uint64_t v59 = *(void *)(v48 + 232);
      *(void *)uint64_t v219 = MEMORY[0x1E4F143A8];
      *(void *)&v219[8] = 0x40000000;
      *(void *)&v219[16] = __si_query_get_scope_node_block_invoke;
      __int16 v220 = &__block_descriptor_tmp_182;
      int v221 = (void *)v48;
      uint64_t v222 = v176;
      if (v59 != -1) {
        dispatch_once((dispatch_once_t *)(v48 + 232), v219);
      }
      CFArrayRef v60 = *(void **)(v48 + 224);
      if (v60)
      {
        int v61 = db_eval_obj_with_options(*(void *)(v176 + 1184));
        if (*(void **)(v48 + 224) != v60)
        {
          *(void *)uint64_t v219 = MEMORY[0x1E4F143A8];
          *(void *)&v219[8] = 0x40000000;
          *(void *)&v219[16] = __db_query_tree_apply_block_block_invoke;
          __int16 v220 = &unk_1E6348598;
          int v221 = &__block_literal_global_161;
          db_query_tree_apply_block_with_meta(v60, (uint64_t)v219, 0);
        }
        if (!v61) {
          goto LABEL_114;
        }
      }
    }
    uint64_t v154 = *(void *)(v48 + 256);
    uint64_t v155 = *(void *)(v48 + 248);
    int v62 = *(unsigned __int8 *)(v48 + 61);
    if ((v17 & 2) != 0)
    {
      if ((v17 & 8) != 0 && *(unsigned char *)(v4 + 16) && dword_1E9FC90AC >= 5)
      {
        int v145 = *__error();
        CFAttributedStringRef v146 = _SILogForLogForCategory(2);
        if (os_log_type_enabled(v146, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v147 = *v167;
          *(_DWORD *)uint64_t v219 = 134218240;
          *(void *)&v219[4] = v147;
          *(_WORD *)&v219[12] = 2048;
          *(void *)&v219[14] = v48;
          _os_log_impl(&dword_1BD672000, v146, OS_LOG_TYPE_DEFAULT, "slow path dbo:%lld %p", v219, 0x16u);
        }
        *__error() = v145;
        uint64_t v4 = v172;
      }
    }
    else if ((v17 & 4) != 0)
    {
      uint64_t v63 = v49;
      do
      {
        uint64_t v64 = v63;
        uint64_t v63 = *(void *)(v63 + 80);
      }
      while (v63);
      uint64_t v65 = *(void *)(v64 + 40);
      uint64_t v66 = v176;
      if (!v65 || !RLEOIDArrayContainsOid(v65, *v167))
      {
        if (dword_1E9FC90AC >= 5)
        {
          int v142 = *__error();
          int v143 = _SILogForLogForCategory(2);
          if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
          {
            unint64_t v144 = *v167;
            *(_DWORD *)uint64_t v219 = 134218240;
            *(void *)&v219[4] = v144;
            *(_WORD *)&v219[12] = 2048;
            *(void *)&v219[14] = v48;
            _os_log_impl(&dword_1BD672000, v143, OS_LOG_TYPE_DEFAULT, "no match dbo:%lld %p", v219, 0x16u);
          }
          *__error() = v142;
          uint64_t v4 = v172;
        }
        goto LABEL_114;
      }
      if (dword_1E9FC90AC > 4)
      {
        int v67 = *__error();
        int v68 = _SILogForLogForCategory(2);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v69 = *v167;
          *(_DWORD *)uint64_t v219 = 134218240;
          *(void *)&v219[4] = v69;
          *(_WORD *)&v219[12] = 2048;
          *(void *)&v219[14] = v48;
          _os_log_impl(&dword_1BD672000, v68, OS_LOG_TYPE_DEFAULT, "update dbo:%lld %p", v219, 0x16u);
        }
        *__error() = v67;
        uint64_t v4 = v172;
        uint64_t v66 = v176;
      }
      goto LABEL_101;
    }
    uint64_t v66 = v176;
    if (*(void *)(v48 + 112) && !db_eval_obj_with_options(*(void *)(v176 + 1184))
      || !db_eval_obj_with_options(*(void *)(v176 + 1184)))
    {
LABEL_114:
      unint64_t v78 = *v167;
      uint64_t v79 = v49;
      do
      {
        uint64_t v80 = v79;
        uint64_t v79 = *(void *)(v79 + 80);
      }
      while (v79);
      uint64_t v81 = *(void *)(v80 + 40);
      if (RLEOIDArrayContainsOid(v81, *v167))
      {
        uint64_t v82 = v48;
        uint64_t v83 = v49;
        do
        {
          uint64_t v84 = v83;
          uint64_t v83 = *(void *)(v83 + 80);
        }
        while (v83);
        uint64_t v175 = *(void *)(v84 + 8);
        float v85 = malloc_type_calloc(1uLL, 0x40uLL, 0x10720403C4CCC75uLL);
        if (dword_1E9FC90A8 >= 5)
        {
          int v132 = *__error();
          int v133 = _SILogForLogForCategory(1);
          if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v219 = 0;
            _os_log_impl(&dword_1BD672000, v133, OS_LOG_TYPE_DEFAULT, "Passing up change to not match", v219, 2u);
          }
          *__error() = v132;
          uint64_t v4 = v172;
        }
        v85[1] = *(_OWORD *)(v49 + 48);
        uint64_t v86 = v49;
        do
        {
          uint64_t v87 = v86;
          uint64_t v86 = *(void *)(v86 + 80);
        }
        while (v86);
        pthread_mutex_lock(&jobsLock);
        unsigned int v88 = *(atomic_uint **)(v87 + 32);
        if (v88) {
          atomic_fetch_add(v88, 1u);
        }
        pthread_mutex_unlock(&jobsLock);
        *((void *)v85 + 1) = v88;
        *((void *)v85 + 5) = 0;
        *(_DWORD *)float v85 = 7;
        unsigned int v89 = malloc_type_malloc(0x10uLL, 0x100004000313F17uLL);
        pthread_rwlock_wrlock((pthread_rwlock_t *)(v81 + 16));
        if (!*(unsigned char *)(v81 + 384))
        {
          int v90 = *(_DWORD *)(v81 + 224);
          if (!v90 || *(void *)(v81 + 216) == ((-1 << (-4 * v90)) & v78)) {
            SIValueSet<unsigned long long>::_SIValueSetInnerRemove(v81 + 256, v78, v90, v81 + 232);
          }
        }
        pthread_rwlock_unlock((pthread_rwlock_t *)(v81 + 16));
        *unsigned int v89 = 0;
        uint64_t v91 = v49;
        do
        {
          uint64_t v92 = v91;
          uint64_t v91 = *(void *)(v91 + 80);
        }
        while (v91);
        *unsigned int v89 = ((unint64_t)*(unsigned int *)(*(void *)(v92 + 8) + 80) << 32) | 0xDE10001;
        v89[1] = v78;
        *((void *)v85 + 4) = _MDStoreOIDArrayCreateMutableWithOids();
        _MDStoreOIDArraySetShouldUseMalloc();
        *((_DWORD *)v85 + 14) = 3;
        if (si_resultqueue_enqueue(v175, (int *)v85))
        {
          int v9 = v165;
        }
        else
        {
          int v9 = v165;
          if (dword_1E9FC90A8 >= 5)
          {
            int v136 = *__error();
            uint64_t v137 = _SILogForLogForCategory(1);
            if (os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint64_t v219 = 0;
              _os_log_impl(&dword_1BD672000, v137, OS_LOG_TYPE_DEFAULT, "Attempt to append to queue failed. Releasing result batch", v219, 2u);
            }
            *__error() = v136;
            uint64_t v4 = v172;
          }
          SIResultBatchFree((void **)v85);
        }
        uint64_t v48 = v82;
      }
      else
      {
        int v9 = v165;
      }
LABEL_182:
      double v116 = *(double *)(v48 + 440) + CFAbsoluteTimeGetCurrent() - Current;
      *(double *)(v48 + 440) = v116;
      if (v116 > 1.0)
      {
        *(void *)(v48 + 440) = 0;
        int v117 = *__error();
        float v118 = _SILogForLogForCategory(2);
        uint64_t v119 = v48;
        os_log_type_t v120 = 2 * (dword_1E9FC90AC < 4);
        if (os_log_type_enabled(v118, v120))
        {
          uint64_t v121 = *(void **)(v119 + 8);
          *(_DWORD *)uint64_t v219 = 134218498;
          *(void *)&v219[4] = v119;
          *(_WORD *)&v219[12] = 2048;
          *(double *)&v219[14] = v116;
          *(_WORD *)&v219[22] = 2112;
          __int16 v220 = v121;
          _os_log_impl(&dword_1BD672000, v118, v120, "live query:%p time:%f query:%@", v219, 0x20u);
        }
        *__error() = v117;
        uint64_t v122 = v49;
        do
        {
          uint64_t v123 = v122;
          uint64_t v122 = *(void *)(v122 + 80);
        }
        while (v122);
        uint64_t v124 = *(void *)(v123 + 8);
        int v125 = malloc_type_calloc(1uLL, 0x40uLL, 0x10720403C4CCC75uLL);
        v125[1] = *(_OWORD *)(v49 + 48);
        do
        {
          uint64_t v126 = v49;
          uint64_t v49 = *(void *)(v49 + 80);
        }
        while (v49);
        pthread_mutex_lock(&jobsLock);
        CFArrayRef v127 = *(atomic_uint **)(v126 + 32);
        if (v127) {
          atomic_fetch_add(v127, 1u);
        }
        pthread_mutex_unlock(&jobsLock);
        *((void *)v125 + 1) = v127;
        *((double *)v125 + 4) = v116;
        *(_DWORD *)int v125 = 8;
        uint64_t v4 = v172;
        if (!si_resultqueue_enqueue(v124, (int *)v125))
        {
          if (dword_1E9FC90A8 >= 5)
          {
            int v134 = *__error();
            __int16 v135 = _SILogForLogForCategory(1);
            if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint64_t v219 = 0;
              _os_log_impl(&dword_1BD672000, v135, OS_LOG_TYPE_DEFAULT, "Attempt to append to queue failed. Releasing result batch", v219, 2u);
            }
            *__error() = v134;
            uint64_t v4 = v172;
          }
          SIResultBatchFree((void **)v125);
        }
      }
      long long v201 = &unk_1F1810BD0;
      if (v206) {
        (*(void (**)(uint64_t))(*(void *)v206 + 8))(v206);
      }
      goto LABEL_196;
    }
LABEL_101:
    int v169 = v62;
    CFMutableDictionaryRef v70 = CFDictionaryCreateMutable(allocator, 0, 0, MEMORY[0x1E4F1D540]);
    bzero(v219, 0x11E0uLL);
    CFMutableDictionaryRef v152 = v70;
    PartialQueryResults::PartialQueryResults((uint64_t)v219, *(CFArrayRef *)(v48 + 16), *(const void **)(v48 + 24), 0, 0, v70, *(_DWORD *)(v48 + 152), 0, *(double *)(v48 + 360), 0, 0, 0, 0, 1);
    if (*(int *)(v48 + 152) >= 4)
    {
      if (v223)
      {
        PartialQueryResults::attributeVector((PartialQueryResults *)v219);
        uint64_t v77 = v223;
      }
      else
      {
        uint64_t v77 = 0;
      }
      CFMutableDictionaryRef v111 = v70;
      collectAttributesFromDBO(v66, v167, v77, (uint64_t)v219, v174);
      si_querypipe_addcoalescedresults(v49, (PartialQueryResults *)v219, *(int **)(v66 + 1184), 1);
    }
    else
    {
      uint64_t v71 = v49;
      do
      {
        uint64_t v72 = v71;
        uint64_t v71 = *(void *)(v71 + 80);
      }
      while (v71);
      int v73 = RLEOIDArrayContainsOid(*(void *)(v72 + 40), *v167);
      uint64_t v218 = 0;
      LOBYTE(v74) = 1;
      memset(&v217[1], 0, 32);
      if (v73) {
        int v75 = 2;
      }
      else {
        int v75 = 1;
      }
      int v149 = v73;
      int v150 = v75;
      uint64_t v215 = 0;
      uint64_t v216 = 0;
      *((void *)&v213 + 1) = 0;
      *(void *)&long long v214 = v66;
      *((void *)&v214 + 1) = v51;
      memset(v217, 0, sizeof(v217));
      if (v66) {
        int v74 = (*(unsigned __int8 *)(v66 + 6578) >> 1) & 1;
      }
      LOBYTE(v218) = v74;
      *(void *)&long long v213 = &unk_1F1810A60;
      uint64_t v216 = v167;
      DWORD2(v213) = 4;
      uint64_t v151 = v48;
      if (v169)
      {
        uint64_t v159 = 0;
        uint64_t v161 = 0;
        unsigned int v76 = -1;
      }
      else
      {
        uint64_t v148 = v51;
        uint64_t v170 = v15;
        uint64_t v157 = *(void *)(v48 + 288);
        if (v157 < 1)
        {
          uint64_t v96 = 0;
          uint64_t v97 = 0;
        }
        else
        {
          uint64_t v93 = v48;
          uint64_t v94 = 0;
          char v95 = 0;
          uint64_t v96 = 0;
          uint64_t v97 = 0;
          uint64_t v98 = *(void *)(v93 + 264);
          uint64_t v153 = v98;
          do
          {
            uint64_t v99 = v98 + 24 * v94;
            uint64_t v102 = *(void *)(v99 + 8);
            __int16 v101 = (uint64_t *)(v99 + 8);
            LOBYTE(v100) = v102;
            if (v102 < 1)
            {
              unint64_t v104 = 0;
              uint64_t v105 = 0;
            }
            else
            {
              uint64_t v160 = v97;
              uint64_t v162 = v96;
              uint64_t v103 = 0;
              unint64_t v104 = 0;
              uint64_t v105 = 0;
              uint64_t v106 = (void *)(v98 + 24 * v94);
              do
              {
                if (*(void *)(*v106 + 8 * v103))
                {
                  uint64_t v107 = db_eval_obj_with_options(*(void *)(v176 + 1184)) != 0;
                  BOOL v108 = __CFADD__(v104, v107);
                  v104 += v107;
                  if (v108) {
                    ++v105;
                  }
                }
                ++v103;
                uint64_t v100 = *v101;
              }
              while (*v101 > v103);
              uint64_t v66 = v176;
              uint64_t v97 = v160;
              uint64_t v96 = v162;
              uint64_t v98 = v153;
            }
            unint64_t v109 = (v105 << v95) | (v104 >> 1 >> ~v95);
            if ((v95 & 0x40) != 0)
            {
              unint64_t v109 = v104 << v95;
              uint64_t v110 = 0;
            }
            else
            {
              uint64_t v110 = v104 << v95;
            }
            v97 |= v109;
            v96 |= v110;
            v95 += v100;
            ++v94;
          }
          while (v157 > v94);
        }
        uint64_t v159 = v97;
        uint64_t v161 = v96;
        unsigned int v76 = *(double *)(v151 + 360);
        uint64_t v4 = v172;
        int v9 = v165;
        uint64_t v15 = v170;
        uint64_t v51 = v148;
      }
      uint64_t v112 = v49;
      do
      {
        uint64_t v113 = v112;
        uint64_t v112 = *(void *)(v112 + 80);
      }
      while (v112);
      if (v149) {
        unsigned __int16 v114 = 3213;
      }
      else {
        unsigned __int16 v114 = 2781;
      }
      uint64_t v115 = PartialQueryResults::start((PartialQueryResults *)v219, *(_DWORD *)(*(void *)(v113 + 8) + 80), v114, 2uLL, 0);
      DWORD2(v213) |= 8u;
      v191[1] = v159;
      v191[0] = v161;
      long long v192 = 0u;
      long long v193 = 0u;
      unsigned int v194 = v76;
      uint64_t v195 = 0;
      long long v196 = 0u;
      int v197 = 0;
      writeDBOToPlistBytes(v66, v115, (uint64_t)v219, v174, &v213, v51, v155, v154, 0, v191, 0, 0, 0, 0, 0, 0, 0, (void *)v151, 0);
      if ((v156 & 4) != 0 && v149)
      {
        v184[0] = v161;
        v184[1] = v159;
        long long v185 = 0u;
        long long v186 = 0u;
        unsigned int v187 = v76;
        uint64_t v188 = 0;
        long long v189 = 0u;
        int v190 = 0;
        writeDBOToPlistBytes(v66, v115, (uint64_t)v219, v174, &v213, v51, v155, v154, 0, v184, 0, 0, 0, 0, 0, 0, 0, (void *)v151, 0);
      }
      if (v225)
      {
        _MDPlistBytesEndArray();
        _MDPlistBytesEndPlist();
      }
      uint64_t v48 = v151;
      CFMutableDictionaryRef v111 = v152;
      if (v224)
      {
        _MDStoreOIDArrayEndBulkAdd();
        _MDStoreOIDArrayEndSequence();
        uint64_t v226 = 0;
      }
      if (v216 == v167) {
        uint64_t v216 = 0;
      }
      si_querypipe_addresults(v49, (uint64_t)v219, v150, 0, v151);
      if (dword_1E9FC90AC >= 5)
      {
        int v138 = *__error();
        unsigned int v139 = _SILogForLogForCategory(2);
        if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v140 = *v167;
          uint64_t v141 = *(void *)(v151 + 8);
          int v209 = 134218242;
          unint64_t v210 = v140;
          __int16 v211 = 2112;
          uint64_t v212 = v141;
          _os_log_impl(&dword_1BD672000, v139, OS_LOG_TYPE_DEFAULT, "True live query: (%lld) %@", (uint8_t *)&v209, 0x16u);
        }
        *__error() = v138;
        uint64_t v4 = v172;
      }
      *(void *)&long long v213 = &unk_1F1810A60;
      if (BYTE2(v218) && v216) {
        free(v216);
      }
      *(void *)&long long v213 = &unk_1F18109C0;
      if (v217[2])
      {
        CFRelease(v217[2]);
        v217[2] = 0;
      }
      if (v217[4])
      {
        free(v217[4]);
        v217[4] = 0;
      }
      if (v217[3])
      {
        CFRelease(v217[3]);
        v217[3] = 0;
      }
      if (BYTE1(v218)) {
        free(v217[0]);
      }
    }
    CFRelease(v111);
    PartialQueryResults::~PartialQueryResults((PartialQueryResults *)v219);
    goto LABEL_182;
  }
LABEL_220:
  if (v9 != (const void **)values) {
    free(v9);
  }
}

void si_livequery_release(void *a1)
{
  if (atomic_fetch_add((atomic_uint *volatile)a1, 0xFFFFFFFF) == 1)
  {
    uint64_t v2 = a1[1];
    si_querypipe_release(a1[5]);
    uint64_t v3 = (const void *)a1[2];
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = (const void *)a1[3];
    if (v4) {
      CFRelease(v4);
    }
    free(a1);
    if (atomic_fetch_add((atomic_uint *volatile)(v2 + 584), 0xFFFFFFFF) == 1)
    {
      si_query_free(v2);
    }
  }
}

uint64_t ContentIndexCopyQueryTerms(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v6 = CIRetainIndexingTokenizer(a2);
  CITokenizerGetQueryTokensWithOptions((uint64_t)v6);
  CIReleaseIndexingTokenizer((uint64_t)v6);
  *a5 = 0;
  icu_locale_release();
  return 0;
}

uint64_t TermUpdateSetAddDocumentInfo(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, const void *a5, uint64_t a6, int a7, int a8, unsigned __int8 a9)
{
  if (!a3)
  {
    CFIndex v28 = __si_assert_copy_extra_329();
    int v29 = v28;
    __n128 v30 = "";
    if (v28) {
      __n128 v30 = v28;
    }
    __message_assert("%s:%u: failed assertion '%s' %s expected non-zero docID for term", "TermUpdateSet.c", 2327, "docID", v30);
    free(v29);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  uint64_t v15 = *(pthread_rwlock_t **)(a1 + 280);
  poslock(v15);
  HIDWORD(v17) = qos_class_self() - 9;
  LODWORD(v17) = HIDWORD(v17);
  unsigned int v16 = v17 >> 2;
  if (v16 > 6) {
    signed int v18 = 0;
  }
  else {
    signed int v18 = dword_1BDA87810[v16];
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 304));
  if (*(void *)(a1 + 488) || *(_DWORD *)(a1 + 500) || *(unsigned char *)(a1 + 516)) {
    goto LABEL_8;
  }
  if (v18 <= 5)
  {
    if (*(void *)(a1 + 16 * v18 + 368))
    {
LABEL_8:
      db_rwlock_wait(a1 + 304, v18, 2);
      goto LABEL_9;
    }
    uint64_t v25 = v18 - 1;
    CFArrayRef v26 = (uint64_t *)(a1 + 16 * v18 + 384);
    while (v25 != 4)
    {
      uint64_t v27 = *v26;
      v26 += 2;
      ++v25;
      if (v27)
      {
        if (v25 <= 4) {
          goto LABEL_8;
        }
        break;
      }
    }
  }
  *(void *)(a1 + 488) = pthread_self();
LABEL_9:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 304));
  ++*(_DWORD *)(a1 + 112);
  switch(a8)
  {
    case 0:
      unint64_t v19 = (void *)(a1 + 128);
      goto LABEL_19;
    case 1:
      unint64_t v19 = (void *)(a1 + 168);
      goto LABEL_19;
    case 2:
      unint64_t v19 = (void *)(a1 + 144);
      goto LABEL_19;
    case 3:
      unint64_t v19 = (void *)(a1 + 120);
      goto LABEL_19;
    case 6:
      unint64_t v19 = (void *)(a1 + 136);
      goto LABEL_19;
    case 7:
      unint64_t v19 = (void *)(a1 + 192);
      goto LABEL_19;
    case 9:
      unint64_t v19 = (void *)(a1 + 200);
      goto LABEL_19;
    case 10:
      unint64_t v19 = (void *)(a1 + 208);
      goto LABEL_19;
    case 11:
      unint64_t v19 = (void *)(a1 + 216);
LABEL_19:
      ++*v19;
      break;
    default:
      break;
  }
  int v20 = CIRetainIndexingTokenizer(a2);
  if (a5)
  {
    CFTypeID v21 = CFGetTypeID(a5);
    if (v21 == CFDictionaryGetTypeID()) {
      termUpdateSetProcessFields(a1, 0, (uint64_t)v20, a3, a4, (CFDictionaryRef)a5, 0, a9);
    }
    else {
      invertValueToUpdateSet(a1, 0, (uint64_t)v20, 0, a3, a4, (uint64_t)a5, 0, 0, 0, 0, 0, 0, a9);
    }
  }
  CIReleaseIndexingTokenizer((uint64_t)v20);
  if (a7) {
    doChildFile(a1 + 88, (void *)(a1 + 48), a7, a6, a3, 0);
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 304));
  *(_DWORD *)(a1 + 508) = 0;
  unsigned int v22 = *(pthread_override_s **)(a1 + 480);
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  char v23 = *(_DWORD *)(a1 + 500) != 0;
  *(unsigned char *)(a1 + 516) = 0;
  db_rwlock_wakeup(a1 + 304, v23, 0);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 304));
  if (v22) {
    pthread_override_qos_class_end_np(v22);
  }
  return poswriteunlock(v15);
}

void *CIRetainIndexingTokenizer(unsigned int a1)
{
  if (a1 >= 4)
  {
    int v5 = __si_assert_copy_extra_329();
    uint64_t v6 = v5;
    uint64_t v7 = "";
    if (v5) {
      uint64_t v7 = v5;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "CITokenizer.c", 254, "version>=0 && version<=kCITokenizerVersionCurrent", v7);
    free(v6);
    if (__valid_fs(-1)) {
      uint64_t v8 = 2989;
    }
    else {
      uint64_t v8 = 3072;
    }
    *(_DWORD *)uint64_t v8 = -559038737;
    abort();
  }
  uint64_t v2 = OSAtomicDequeue((OSQueueHead *)&gIndexingTokenizerStack + a1, 0);
  if (v2)
  {
    uint64_t v3 = v2[1];
    v2[1] = 0;
    OSAtomicEnqueue(&gIndexingTokenizerHeap, v2, 0);
    return (void *)v3;
  }
  else
  {
    return CITokenizerCreate(a1);
  }
}

void CIReleaseIndexingTokenizer(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 40);
  if (v1 >= 4)
  {
    uint64_t v4 = __si_assert_copy_extra_329();
    int v5 = v4;
    uint64_t v6 = "";
    if (v4) {
      uint64_t v6 = v4;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "CITokenizer.c", 288, "version>=0 && version<=kCITokenizerVersionCurrent", v6);
    free(v5);
    if (__valid_fs(-1)) {
      uint64_t v7 = 2989;
    }
    else {
      uint64_t v7 = 3072;
    }
    *(_DWORD *)uint64_t v7 = -559038737;
    abort();
  }
  if (*(void *)(a1 + 8)) {
    _NLStringTokenizerSetStringWithOptionsAndLanguageID();
  }
  if (*(void *)(a1 + 16)) {
    _NLStringTokenizerSetStringWithOptionsAndLanguageID();
  }
  uint64_t v3 = OSAtomicDequeue(&gIndexingTokenizerHeap, 0);
  if (!v3) {
    uint64_t v3 = malloc_type_malloc(0x10uLL, 0xA0040BD48D6D6uLL);
  }
  v3[1] = a1;
  OSAtomicEnqueue((OSQueueHead *)&gIndexingTokenizerStack + v1, v3, 0);
}

uint64_t poslock(pthread_rwlock_t *a1)
{
  uint64_t result = pthread_rwlock_wrlock(a1);
  if (result)
  {
    uint64_t v2 = __si_assert_copy_extra_329();
    uint64_t v3 = v2;
    uint64_t v4 = "";
    if (v2) {
      uint64_t v4 = v2;
    }
    __message_assert(v2, "poslock.c", 8, "result==0", v4);
    free(v3);
    if (__valid_fs(-1)) {
      uint64_t v5 = 2989;
    }
    else {
      uint64_t v5 = 3072;
    }
    *(_DWORD *)uint64_t v5 = -559038737;
    abort();
  }
  return result;
}

uint64_t doChildFile(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  int v10 = a3 - 1;
  uint64_t v11 = *(void *)(a4 + 8 * (a3 - 1));
  if (v11 == 2 || v11 == *a2)
  {
    --a3;
    if (!v10)
    {
      LODWORD(v14) = -1;
      goto LABEL_16;
    }
  }
  uint64_t v13 = 0;
  do
  {
    if (*(uint64_t *)(a4 + 8 * v13) <= 0)
    {
      uint64_t v27 = __si_assert_copy_extra_329();
      __message_assert("%s:%u: failed assertion '%s' %s Got parent[%d] with id %lld depth: %d");
      goto LABEL_30;
    }
    ++v13;
  }
  while (a3 != v13);
  uint64_t v14 = (a3 - 1);
  if (a3 >= 3)
  {
    uint64_t v15 = 0;
    do
    {
      if (*(void *)(a4 + 8 * v15) <= 2uLL)
      {
        int v29 = __si_assert_copy_extra_329();
        __n128 v30 = v29;
        int v31 = "";
        if (v29) {
          int v31 = v29;
        }
        __message_assert("%s:%u: failed assertion '%s' %s Got parent with id %lld", "FileTree_UpdateSet.c", 217, "(uint64_t)parents[i-1] > 2", v31, *(void *)(a4 + 8 * v15));
        free(v30);
        if (__valid_fs(-1)) {
          uint64_t v32 = 2989;
        }
        else {
          uint64_t v32 = 3072;
        }
        *(_DWORD *)uint64_t v32 = -559038737;
        abort();
      }
      ++v15;
    }
    while (v14 - 1 != v15);
  }
LABEL_16:
  uint64_t result = getDirectory_352(a2, v14, a4, 1);
  uint64_t v17 = result;
  signed int v18 = (const void *)(result + 16);
  int v19 = *(_DWORD *)(result + 16) & 1;
  if (*(_DWORD *)(result + 24))
  {
    if (v19) {
      unsigned int v20 = 2;
    }
    else {
      unsigned int v20 = 1;
    }
    unsigned int v21 = atomic_load((unsigned int *)(a1 + 12));
    unsigned int v22 = v21 + v20;
    uint64_t v23 = *(unsigned int *)(a1 + 8);
    if (v22 >= v23)
    {
      unsigned int v33 = 2 * v23;
      if (!v23) {
        unsigned int v33 = 0x4000;
      }
      *(_DWORD *)(a1 + 8) = v33;
      if (my_vm_reallocate((void **)a1, 12 * v23, 12 * v33, 243, *(void *)(a1 + 16)))
      {
        uint64_t v27 = __si_assert_copy_extra_329();
        __message_assert("%s:%u: failed assertion '%s' %s ");
LABEL_30:
        free(v27);
        if (__valid_fs(-1)) {
          uint64_t v28 = 2989;
        }
        else {
          uint64_t v28 = 3072;
        }
        *(_DWORD *)uint64_t v28 = -559038737;
        abort();
      }
    }
    unsigned int add = atomic_fetch_add((atomic_uint *volatile)(a1 + 12), v20);
    if (v19) {
      size_t v25 = 16;
    }
    else {
      size_t v25 = 12;
    }
    uint64_t result = (uint64_t)memcpy((void *)(*(void *)a1 + 12 * add), v18, v25);
    int v19 = 2 * add;
  }
  if (a6)
  {
    *(void *)(v17 + 24) = a5;
    *(_DWORD *)(v17 + 16) = v19 | 1;
    int v26 = 2 * (a6 != 2);
  }
  else
  {
    *(_DWORD *)(v17 + 24) = a5;
    *(_DWORD *)(v17 + 16) = v19 & 0xFFFFFFFE;
    int v26 = 1;
  }
  *(_DWORD *)(v17 + 20) = v26;
  return result;
}

uint64_t findChild(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v3 = HIDWORD(a2) - a2 - 8;
  unsigned int v4 = (a2 - (HIDWORD(a2) - a2) - 1640531527) ^ (v3 << 8);
  unsigned int v5 = (16 - (HIDWORD(a2) - a2) - v4) ^ (v4 >> 13);
  int v6 = (v3 - v4 - v5) ^ (v5 >> 12);
  unsigned int v7 = (v4 - v5 - v6) ^ (v6 << 16);
  unsigned int v8 = (v5 - v6 - v7) ^ (v7 >> 5);
  int v9 = (v6 - v7 - v8) ^ (v8 >> 3);
  unsigned int v10 = (v8 - v9 - ((v7 - v8 - v9) ^ (v9 << 10))) ^ (((v7 - v8 - v9) ^ (v9 << 10)) >> 15);
  uint64_t v11 = *(void *)(a1 + 8);
  unsigned int v12 = (v11 - 1) & v10;
  if (v12 <= 1) {
    unsigned int v12 = 1;
  }
  uint64_t v13 = v12 - 1;
  uint64_t v14 = a1 + 32 * v13;
  uint64_t v17 = *(void *)(v14 + 16);
  uint64_t v15 = v14 + 16;
  uint64_t v16 = v17;
  if (!v17 || ((unint64_t v18 = v11 - 1, v19 = v11 != 0, v16 != a2) ? (v20 = !v19) : (v20 = 1), v20))
  {
    int v22 = -1;
  }
  else
  {
    int v22 = -1;
    unint64_t v23 = v18;
    do
    {
      if (v22 == -1 && v16 == 1) {
        int v22 = v13;
      }
      if (v18 > (v13 + 1)) {
        uint64_t v13 = (v13 + 1);
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v25 = a1 + 32 * v13;
      uint64_t v26 = *(void *)(v25 + 16);
      uint64_t v15 = v25 + 16;
      uint64_t v16 = v26;
      if (!v26) {
        break;
      }
      BOOL v27 = v23-- != 0;
      BOOL v28 = v27;
    }
    while (v16 != a2 && v28);
  }
  if (v16 == a2)
  {
    if (!a3) {
      return v15;
    }
    goto LABEL_16;
  }
  uint64_t v15 = 0;
  if (a3)
  {
    if (v22 != -1) {
      LODWORD(v13) = v22;
    }
LABEL_16:
    *a3 = v13;
  }
  return v15;
}

char *ContentIndexQueryNodeForRange(const void *a1, const void *a2, int a3, int a4, int a5)
{
  if (*MEMORY[0x1E4F14B00] <= 0xA7uLL) {
    ++sTotal_11167;
  }
  unsigned int v10 = (char *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0xA8uLL, 0x31F9A007uLL);
  if (v10)
  {
    if (!a3) {
      return v10;
    }
  }
  else
  {
    _log_fault_for_malloc_failure();
    if (!a3) {
      return v10;
    }
  }
  *(_DWORD *)unsigned int v10 = 1;
  *((void *)v10 + 5) = 0;
  *((void *)v10 + 4) = v10 + 40;
  if (a4) {
    int v11 = 36;
  }
  else {
    int v11 = 4;
  }
  *((void *)v10 + 6) = 0;
  *(_OWORD *)(v10 + 72) = 0u;
  if (a5) {
    v11 |= 0x40u;
  }
  *(_OWORD *)(v10 + 88) = 0uLL;
  *((_DWORD *)v10 + 14) = v11;
  *((_DWORD *)v10 + 15) = a3;
  *((void *)v10 + 8) = 8;
  *((void *)v10 + 13) = 0;
  *((void *)v10 + 14) = 0;
  *(_OWORD *)(v10 + 136) = 0uLL;
  *(_OWORD *)(v10 + 152) = 0uLL;
  *((_DWORD *)v10 + 30) = v11;
  *((_DWORD *)v10 + 31) = a3;
  *((void *)v10 + 16) = 8;
  NodeRangePatternsCFStringRef Copy = FillQueryNodeRangePatternsCopy((uint64_t)(v10 + 40), a1, a2);
  *((_DWORD *)v10 + 6) = NodeRangePatternsCopy;
  if (!NodeRangePatternsCopy) {
    *(_DWORD *)unsigned int v10 = 0;
  }
  return v10;
}

uint64_t FillQueryNodeRangePatternsCopy(uint64_t a1, CFTypeRef cf, CFTypeRef a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (!((unint64_t)cf | (unint64_t)a3)) {
    goto LABEL_45;
  }
  if (cf)
  {
    CFTypeID v6 = CFGetTypeID(cf);
    if (a3 && v6 != CFGetTypeID(a3)) {
      goto LABEL_45;
    }
    if (v6 == CFNumberGetTypeID())
    {
      unsigned int v7 = copyNumberTermFromNumber(cf, *(_DWORD *)(a1 + 20));
LABEL_9:
      *(void *)a1 = v7;
      unsigned int v8 = *(_DWORD *)(a1 + 20);
      if (a3)
      {
        int v9 = copyNumberTermFromNumber(a3, v8);
LABEL_30:
        *(void *)(a1 + 8) = v9;
        *(_DWORD *)(a1 + 20) = -1;
        return 1;
      }
      int v18 = 1;
      goto LABEL_29;
    }
    if (v6 == CFDateGetTypeID())
    {
      unsigned int v10 = copyDateTermFromDate(cf, *(_DWORD *)(a1 + 20));
LABEL_15:
      *(void *)a1 = v10;
      unsigned int v8 = *(_DWORD *)(a1 + 20);
      if (a3)
      {
        int v9 = copyDateTermFromDate(a3, v8);
        goto LABEL_30;
      }
      int v18 = 0;
LABEL_29:
      int v9 = copyMaximumTerm(v18, v8);
      goto LABEL_30;
    }
  }
  else
  {
    CFTypeID v6 = CFGetTypeID(a3);
    if (v6 == CFNumberGetTypeID())
    {
      unsigned int v7 = copyMinimumTerm(1, *(_DWORD *)(a1 + 20));
      goto LABEL_9;
    }
    if (v6 == CFDateGetTypeID())
    {
      unsigned int v10 = copyMinimumTerm(0, *(_DWORD *)(a1 + 20));
      goto LABEL_15;
    }
  }
  if (v6 == CFStringGetTypeID())
  {
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    *(_OWORD *)buffer = 0u;
    long long v31 = 0u;
    double valuePtr = 0.0;
    if (cf)
    {
      CFStringGetCString((CFStringRef)cf, buffer, 256, 0x8000100u);
      CFNumberRef v11 = copyCFNumberTermFromString(buffer);
      if (!v11) {
        goto LABEL_45;
      }
      CFNumberRef v12 = v11;
      CFNumberGetValue(v11, kCFNumberDoubleType, &valuePtr);
      CFDateRef v13 = CFDateCreate(0, valuePtr);
      if (!v13)
      {
LABEL_44:
        CFRelease(v12);
        goto LABEL_45;
      }
      CFDateRef v14 = v13;
      if (CFNumberIsFloatType(v12))
      {
        float v28 = 0.0;
        CFNumberRef v15 = copyCFNumberFloatTermFromString(buffer);
        if (v15)
        {
          CFNumberRef v16 = v15;
          CFNumberGetValue(v15, kCFNumberFloatType, &v28);
          if (fabsf(v28) == INFINITY || v28 == 0.0 || valuePtr <= v28)
          {
            CFNumberRef v17 = v16;
          }
          else
          {
            CFNumberRef v17 = v12;
            CFNumberRef v12 = v16;
          }
          CFRelease(v17);
        }
      }
      *(void *)a1 = copyDateTermFromDate(v14, *(_DWORD *)(a1 + 20));
      *(void *)(a1 + 64) = copyNumberTermFromNumber(v12, *(_DWORD *)(a1 + 84));
      CFRelease(v12);
      CFRelease(v14);
    }
    else
    {
      *(void *)a1 = copyMinimumTerm(0, *(_DWORD *)(a1 + 20));
      *(void *)(a1 + 64) = copyMinimumTerm(1, *(_DWORD *)(a1 + 84));
    }
    if (!a3)
    {
      *(void *)(a1 + 8) = copyMaximumTerm(0, *(_DWORD *)(a1 + 20));
      *(void *)(a1 + 72) = copyMaximumTerm(1, *(_DWORD *)(a1 + 20));
LABEL_58:
      *(_DWORD *)(a1 + 20) = -1;
      *(_DWORD *)(a1 + 84) = -1;
      return 2;
    }
    CFStringGetCString((CFStringRef)a3, buffer, 256, 0x8000100u);
    CFNumberRef v20 = copyCFNumberTermFromString(buffer);
    if (v20)
    {
      CFNumberRef v12 = v20;
      CFNumberGetValue(v20, kCFNumberDoubleType, &valuePtr);
      CFDateRef v21 = CFDateCreate(0, valuePtr);
      if (v21)
      {
        CFDateRef v22 = v21;
        if (CFNumberIsFloatType(v12))
        {
          float v28 = 0.0;
          CFNumberRef v23 = copyCFNumberFloatTermFromString(buffer);
          if (v23)
          {
            CFNumberRef v24 = v23;
            CFNumberGetValue(v23, kCFNumberFloatType, &v28);
            if (fabsf(v28) == INFINITY || v28 == 0.0 || valuePtr >= v28)
            {
              CFNumberRef v25 = v24;
            }
            else
            {
              CFNumberRef v25 = v12;
              CFNumberRef v12 = v24;
            }
            CFRelease(v25);
          }
        }
        *(void *)(a1 + 8) = copyDateTermFromDate(v22, *(_DWORD *)(a1 + 20));
        *(void *)(a1 + 72) = copyNumberTermFromNumber(v12, *(_DWORD *)(a1 + 84));
        CFRelease(v12);
        CFRelease(v22);
        goto LABEL_58;
      }
      goto LABEL_44;
    }
  }
LABEL_45:
  if (*(void *)a1) {
    free(*(void **)a1);
  }
  uint64_t v26 = *(void **)(a1 + 8);
  if (v26) {
    free(v26);
  }
  BOOL v27 = *(void **)(a1 + 64);
  if (v27) {
    free(v27);
  }
  uint64_t result = *(void *)(a1 + 72);
  if (result)
  {
    free((void *)result);
    return 0;
  }
  return result;
}

CFNumberRef copyCFNumberTermFromString(char *__str)
{
  uint64_t v1 = __str;
  if (*__str == 1)
  {
    if (__str[1] < 0)
    {
      if (__str[2] < 0)
      {
        if (__str[3] < 0)
        {
          if (__str[4] < 0)
          {
            if (__str[5] < 0)
            {
              unsigned int v10 = __si_assert_copy_extra_329();
              CFNumberRef v11 = v10;
              CFNumberRef v12 = "";
              if (v10) {
                CFNumberRef v12 = v10;
              }
              __message_assert("%s:%u: failed assertion '%s' %s readVInt32: exceeds max size for uint32_t", "VIntUtils.h", 341, "(b4 & 0x80) == 0", v12);
              free(v11);
              if (__valid_fs(-1)) {
                uint64_t v13 = 2989;
              }
              else {
                uint64_t v13 = 3072;
              }
              *(_DWORD *)uint64_t v13 = -559038737;
              abort();
            }
            uint64_t v2 = 5;
          }
          else
          {
            uint64_t v2 = 4;
          }
        }
        else
        {
          uint64_t v2 = 3;
        }
      }
      else
      {
        uint64_t v2 = 2;
      }
    }
    else
    {
      uint64_t v2 = 1;
    }
    uint64_t v1 = &__str[v2 + 1];
  }
  __enduint64_t ptr = 0;
  uint64_t v15 = strtoll(v1, &__endptr, 0);
  int v3 = __endptr;
  if (__endptr != v1)
  {
    unsigned int v4 = *__endptr;
    if (v4 == 42)
    {
      ++__endptr;
      unsigned int v4 = v3[1];
    }
    if (v4 <= 1)
    {
      p_double valuePtr = &v15;
      CFNumberType v6 = kCFNumberLongLongType;
      return CFNumberCreate(0, v6, p_valuePtr);
    }
    double valuePtr = strtod(v1, &__endptr);
    unsigned int v7 = __endptr;
    if (__endptr != v1)
    {
      unsigned int v8 = *__endptr;
      if (v8 == 42)
      {
        ++__endptr;
        unsigned int v8 = v7[1];
      }
      if (v8 <= 1)
      {
        p_double valuePtr = (uint64_t *)&valuePtr;
        CFNumberType v6 = kCFNumberDoubleType;
        return CFNumberCreate(0, v6, p_valuePtr);
      }
    }
  }
  return 0;
}

char *copyNumberTermFromNumber(const void *a1, unsigned int a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if ((int)a2 <= 0)
  {
    CFNumberType v6 = __si_assert_copy_extra_329();
    unsigned int v7 = v6;
    unsigned int v8 = "";
    if (v6) {
      unsigned int v8 = v6;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "CIQuery.c", 146, "field >= 1", v8);
    free(v7);
    if (__valid_fs(-1)) {
      uint64_t v9 = 2989;
    }
    else {
      uint64_t v9 = 3072;
    }
    *(_DWORD *)uint64_t v9 = -559038737;
    abort();
  }
  memset(v25, 0, sizeof(v25));
  long long v24 = 0u;
  long long v23 = 0u;
  long long v22 = 0u;
  long long v21 = 0u;
  long long v20 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  char __s1 = 2;
  unsigned int v2 = a2 >> 28;
  long long v11 = 0u;
  if (a2 >> 28)
  {
    LOBYTE(v11) = a2 | 0x80;
    BYTE1(v11) = (a2 >> 7) | 0x80;
    BYTE2(v11) = (a2 >> 14) | 0x80;
    BYTE3(v11) = (a2 >> 21) | 0x80;
    uint64_t v3 = 6;
    uint64_t v4 = 5;
  }
  else if ((a2 & 0xFE00000) != 0)
  {
    LOBYTE(v11) = a2 | 0x80;
    BYTE1(v11) = (a2 >> 7) | 0x80;
    BYTE2(v11) = (a2 >> 14) | 0x80;
    unsigned int v2 = (a2 & 0xFE00000) >> 21;
    uint64_t v3 = 5;
    uint64_t v4 = 4;
  }
  else if ((a2 & 0x1FC000) != 0)
  {
    LOBYTE(v11) = a2 | 0x80;
    BYTE1(v11) = (a2 >> 7) | 0x80;
    unsigned int v2 = (a2 & 0x1FC000) >> 14;
    uint64_t v3 = 4;
    uint64_t v4 = 3;
  }
  else if ((a2 & 0x3F80) != 0)
  {
    LOBYTE(v11) = a2 | 0x80;
    unsigned int v2 = (unsigned __int16)(a2 & 0x3F80) >> 7;
    uint64_t v3 = 3;
    uint64_t v4 = 2;
  }
  else
  {
    uint64_t v3 = 2;
    uint64_t v4 = 1;
    LOBYTE(v2) = a2;
  }
  *(&__s1 + v4) = v2;
  FlattenCFTypeToBuffer(a1, &__s1 + v3);
  return strdup(&__s1);
}

char *copyDateTermFromDate(const void *a1, unsigned int a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if ((int)a2 <= 0)
  {
    CFNumberType v6 = __si_assert_copy_extra_329();
    unsigned int v7 = v6;
    unsigned int v8 = "";
    if (v6) {
      unsigned int v8 = v6;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "CIQuery.c", 158, "field >= 1", v8);
    free(v7);
    if (__valid_fs(-1)) {
      uint64_t v9 = 2989;
    }
    else {
      uint64_t v9 = 3072;
    }
    *(_DWORD *)uint64_t v9 = -559038737;
    abort();
  }
  memset(v25, 0, sizeof(v25));
  long long v24 = 0u;
  long long v23 = 0u;
  long long v22 = 0u;
  long long v21 = 0u;
  long long v20 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  char __s1 = 3;
  unsigned int v2 = a2 >> 28;
  long long v11 = 0u;
  if (a2 >> 28)
  {
    LOBYTE(v11) = a2 | 0x80;
    BYTE1(v11) = (a2 >> 7) | 0x80;
    BYTE2(v11) = (a2 >> 14) | 0x80;
    BYTE3(v11) = (a2 >> 21) | 0x80;
    uint64_t v3 = 6;
    uint64_t v4 = 5;
  }
  else if ((a2 & 0xFE00000) != 0)
  {
    LOBYTE(v11) = a2 | 0x80;
    BYTE1(v11) = (a2 >> 7) | 0x80;
    BYTE2(v11) = (a2 >> 14) | 0x80;
    unsigned int v2 = (a2 & 0xFE00000) >> 21;
    uint64_t v3 = 5;
    uint64_t v4 = 4;
  }
  else if ((a2 & 0x1FC000) != 0)
  {
    LOBYTE(v11) = a2 | 0x80;
    BYTE1(v11) = (a2 >> 7) | 0x80;
    unsigned int v2 = (a2 & 0x1FC000) >> 14;
    uint64_t v3 = 4;
    uint64_t v4 = 3;
  }
  else if ((a2 & 0x3F80) != 0)
  {
    LOBYTE(v11) = a2 | 0x80;
    unsigned int v2 = (unsigned __int16)(a2 & 0x3F80) >> 7;
    uint64_t v3 = 3;
    uint64_t v4 = 2;
  }
  else
  {
    uint64_t v3 = 2;
    uint64_t v4 = 1;
    LOBYTE(v2) = a2;
  }
  *(&__s1 + v4) = v2;
  FlattenCFTypeToBuffer(a1, &__s1 + v3);
  return strdup(&__s1);
}

char *copyMinimumTerm(int a1, unsigned int a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if ((int)a2 <= 0)
  {
    unsigned int v7 = __si_assert_copy_extra_329();
    unsigned int v8 = v7;
    uint64_t v9 = "";
    if (v7) {
      uint64_t v9 = v7;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "CIQuery.c", 169, "field >= 1", v9);
    free(v8);
    if (__valid_fs(-1)) {
      uint64_t v10 = 2989;
    }
    else {
      uint64_t v10 = 3072;
    }
    *(_DWORD *)uint64_t v10 = -559038737;
    abort();
  }
  memset(v26, 0, sizeof(v26));
  long long v25 = 0u;
  long long v24 = 0u;
  long long v23 = 0u;
  long long v22 = 0u;
  long long v21 = 0u;
  long long v20 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  if (a1) {
    char v2 = 2;
  }
  else {
    char v2 = 3;
  }
  unsigned int v3 = a2 >> 28;
  char __s1 = v2;
  if (a2 >> 28)
  {
    LOBYTE(v12) = a2 | 0x80;
    BYTE1(v12) = (a2 >> 7) | 0x80;
    BYTE2(v12) = (a2 >> 14) | 0x80;
    BYTE3(v12) = (a2 >> 21) | 0x80;
    uint64_t v4 = 6;
    uint64_t v5 = 5;
  }
  else if ((a2 & 0xFE00000) != 0)
  {
    LOBYTE(v12) = a2 | 0x80;
    BYTE1(v12) = (a2 >> 7) | 0x80;
    BYTE2(v12) = (a2 >> 14) | 0x80;
    unsigned int v3 = (a2 & 0xFE00000) >> 21;
    uint64_t v4 = 5;
    uint64_t v5 = 4;
  }
  else if ((a2 & 0x1FC000) != 0)
  {
    LOBYTE(v12) = a2 | 0x80;
    BYTE1(v12) = (a2 >> 7) | 0x80;
    unsigned int v3 = (a2 & 0x1FC000) >> 14;
    uint64_t v4 = 4;
    uint64_t v5 = 3;
  }
  else if ((a2 & 0x3F80) != 0)
  {
    LOBYTE(v12) = a2 | 0x80;
    unsigned int v3 = (unsigned __int16)(a2 & 0x3F80) >> 7;
    uint64_t v4 = 3;
    uint64_t v5 = 2;
  }
  else
  {
    uint64_t v4 = 2;
    uint64_t v5 = 1;
    LOBYTE(v3) = a2;
  }
  *(&__s1 + v5) = v3;
  *(&__s1 + v4) = 0;
  __strlcat_chk();
  return strdup(&__s1);
}

char *copyMaximumTerm(int a1, unsigned int a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if ((int)a2 <= 0)
  {
    unsigned int v7 = __si_assert_copy_extra_329();
    unsigned int v8 = v7;
    uint64_t v9 = "";
    if (v7) {
      uint64_t v9 = v7;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "CIQuery.c", 179, "field >= 1", v9);
    free(v8);
    if (__valid_fs(-1)) {
      uint64_t v10 = 2989;
    }
    else {
      uint64_t v10 = 3072;
    }
    *(_DWORD *)uint64_t v10 = -559038737;
    abort();
  }
  memset(v26, 0, sizeof(v26));
  long long v25 = 0u;
  long long v24 = 0u;
  long long v23 = 0u;
  long long v22 = 0u;
  long long v21 = 0u;
  long long v20 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  if (a1) {
    char v2 = 2;
  }
  else {
    char v2 = 3;
  }
  unsigned int v3 = a2 >> 28;
  char __s1 = v2;
  if (a2 >> 28)
  {
    LOBYTE(v12) = a2 | 0x80;
    BYTE1(v12) = (a2 >> 7) | 0x80;
    BYTE2(v12) = (a2 >> 14) | 0x80;
    BYTE3(v12) = (a2 >> 21) | 0x80;
    uint64_t v4 = 6;
    uint64_t v5 = 5;
  }
  else if ((a2 & 0xFE00000) != 0)
  {
    LOBYTE(v12) = a2 | 0x80;
    BYTE1(v12) = (a2 >> 7) | 0x80;
    BYTE2(v12) = (a2 >> 14) | 0x80;
    unsigned int v3 = (a2 & 0xFE00000) >> 21;
    uint64_t v4 = 5;
    uint64_t v5 = 4;
  }
  else if ((a2 & 0x1FC000) != 0)
  {
    LOBYTE(v12) = a2 | 0x80;
    BYTE1(v12) = (a2 >> 7) | 0x80;
    unsigned int v3 = (a2 & 0x1FC000) >> 14;
    uint64_t v4 = 4;
    uint64_t v5 = 3;
  }
  else if ((a2 & 0x3F80) != 0)
  {
    LOBYTE(v12) = a2 | 0x80;
    unsigned int v3 = (unsigned __int16)(a2 & 0x3F80) >> 7;
    uint64_t v4 = 3;
    uint64_t v5 = 2;
  }
  else
  {
    uint64_t v4 = 2;
    uint64_t v5 = 1;
    LOBYTE(v3) = a2;
  }
  *(&__s1 + v5) = v3;
  *(&__s1 + v4) = 0;
  __strlcat_chk();
  return strdup(&__s1);
}

char *ContentIndexQueryNodeForLocalizedFields(uint64_t a1, unsigned int *a2, char *a3, unsigned int a4)
{
  uint64_t v7 = a4;
  size_t v8 = ((unint64_t)a4 << 6) | 0x28;
  if ((((unint64_t)a4 >> 11) & 0x7FFFFFFFFFFFLL) == 0 && v8 > *MEMORY[0x1E4F14B00]) {
    ++sTotal_11167;
  }
  uint64_t v10 = (char *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v8, 0x31F9A007uLL);
  if (!v10) {
    _log_fault_for_malloc_failure();
  }
  uint64_t v11 = 0;
  *((_DWORD *)v10 + 2) = 0;
  int v12 = *(_DWORD *)(a1 + 4) | 0x400000;
  *(void *)(v10 + 12) = *(void *)(a1 + 12);
  *(_DWORD *)uint64_t v10 = 1;
  *((_DWORD *)v10 + 1) = v12;
  *((void *)v10 + 4) = v10 + 40;
  do
  {
    uint64_t v13 = *((void *)v10 + 4) + v11;
    unsigned int v14 = *a2;
    *(void *)uint64_t v13 = 0;
    *(void *)(v13 + 8) = 0;
    *(_DWORD *)(v13 + 16) = 100;
    *(_DWORD *)(v13 + 20) = v14;
    *(_DWORD *)(v13 + 24) = 8;
    *(_OWORD *)(v13 + 28) = 0u;
    *(_OWORD *)(v13 + 44) = 0u;
    *(_DWORD *)(v13 + 60) = 0;
    CFNumberRef v15 = CFNumberCreate((CFAllocatorRef)kCIQueryZoneAllocator, kCFNumberSInt32Type, a3);
    *(void *)(*((void *)v10 + 4) + v11) = copyLocTermFromNumber(v15, *a2);
    unsigned int v16 = *a2++;
    long long v17 = copyLocTermFromNumber(v15, v16);
    uint64_t v18 = *((void *)v10 + 4) + v11;
    *(void *)(v18 + 8) = v17;
    *(_DWORD *)(v18 + 20) = -1;
    ++*((_DWORD *)v10 + 6);
    CFRelease(v15);
    v11 += 64;
    a3 += 4;
    --v7;
  }
  while (v7);
  return v10;
}

char *copyLocTermFromNumber(const void *a1, unsigned int a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if ((int)a2 <= 0)
  {
    CFNumberType v6 = __si_assert_copy_extra_329();
    uint64_t v7 = v6;
    size_t v8 = "";
    if (v6) {
      size_t v8 = v6;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "CIQuery.c", 134, "field >= 1", v8);
    free(v7);
    if (__valid_fs(-1)) {
      uint64_t v9 = 2989;
    }
    else {
      uint64_t v9 = 3072;
    }
    *(_DWORD *)uint64_t v9 = -559038737;
    abort();
  }
  memset(v25, 0, sizeof(v25));
  long long v24 = 0u;
  long long v23 = 0u;
  long long v22 = 0u;
  long long v21 = 0u;
  long long v20 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  char __s1 = 4;
  unsigned int v2 = a2 >> 28;
  long long v11 = 0u;
  if (a2 >> 28)
  {
    LOBYTE(v11) = a2 | 0x80;
    BYTE1(v11) = (a2 >> 7) | 0x80;
    BYTE2(v11) = (a2 >> 14) | 0x80;
    BYTE3(v11) = (a2 >> 21) | 0x80;
    uint64_t v3 = 6;
    uint64_t v4 = 5;
  }
  else if ((a2 & 0xFE00000) != 0)
  {
    LOBYTE(v11) = a2 | 0x80;
    BYTE1(v11) = (a2 >> 7) | 0x80;
    BYTE2(v11) = (a2 >> 14) | 0x80;
    unsigned int v2 = (a2 & 0xFE00000) >> 21;
    uint64_t v3 = 5;
    uint64_t v4 = 4;
  }
  else if ((a2 & 0x1FC000) != 0)
  {
    LOBYTE(v11) = a2 | 0x80;
    BYTE1(v11) = (a2 >> 7) | 0x80;
    unsigned int v2 = (a2 & 0x1FC000) >> 14;
    uint64_t v3 = 4;
    uint64_t v4 = 3;
  }
  else if ((a2 & 0x3F80) != 0)
  {
    LOBYTE(v11) = a2 | 0x80;
    unsigned int v2 = (unsigned __int16)(a2 & 0x3F80) >> 7;
    uint64_t v3 = 3;
    uint64_t v4 = 2;
  }
  else
  {
    uint64_t v3 = 2;
    uint64_t v4 = 1;
    LOBYTE(v2) = a2;
  }
  *(&__s1 + v4) = v2;
  FlattenCFTypeToBuffer(a1, &__s1 + v3);
  return strdup(&__s1);
}

void termUpdateSetProcessFields(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, CFDictionaryRef theDict, unsigned int a7, int a8)
{
  unsigned int v64 = a5;
  int v65 = a8;
  unsigned int v68 = a7;
  uint64_t v66 = a1;
  uint64_t v67 = a4;
  uint64_t v62 = a2;
  uint64_t v63 = a3;
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  CFIndex Count = CFDictionaryGetCount(theDict);
  MEMORY[0x1F4188790](Count);
  uint64_t v10 = (char *)&v55 - ((8 * Count + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v10, 8 * Count);
  MEMORY[0x1F4188790](v11);
  bzero(v10, 8 * Count);
  CFDictionaryRef v56 = theDict;
  int v57 = v10;
  uint64_t v58 = v10;
  CFDictionaryGetKeysAndValues(theDict, (const void **)v10, (const void **)v10);
  CFIndex v59 = Count;
  if (Count >= 1)
  {
    uint64_t v13 = 0;
    *(void *)&long long v12 = 67109378;
    long long v55 = v12;
    while (1)
    {
      uint64_t v14 = *(void *)&v58[8 * v13];
      uint64_t v15 = v14 & 0x3FFFFFF;
      long long v16 = *(const void **)&v57[8 * v13];
      CFTypeID v17 = CFGetTypeID(v16);
      uint64_t v60 = v13;
      if ((v14 & 0x4000000) != 0 && _os_feature_enabled_impl())
      {
        if (termUpdateSetProcessVector_onceToken != -1) {
          dispatch_once(&termUpdateSetProcessVector_onceToken, &__block_literal_global_35_3577);
        }
        CFTypeID v18 = CFGetTypeID(v16);
        if (v18 == termUpdateSetProcessVector_sDictionaryTypeID)
        {
          termUpdateSetProcessSingleVector(v66, (CFDictionaryRef)v16, v68, v67, v15);
        }
        else if (v18 == termUpdateSetProcessVector_sArrayTypeID)
        {
          CFIndex v48 = CFArrayGetCount((CFArrayRef)v16);
          if (v48 >= 1)
          {
            CFIndex v49 = v48;
            for (CFIndex i = 0; i != v49; ++i)
            {
              CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v16, i);
              if (CFGetTypeID(ValueAtIndex) == termUpdateSetProcessVector_sDictionaryTypeID) {
                termUpdateSetProcessSingleVector(v66, ValueAtIndex, v68, v67, v15);
              }
            }
          }
        }
        goto LABEL_4;
      }
      unsigned __int8 v19 = (int)v14 >= 0;
      uint64_t v20 = (v14 >> 30) & 1;
      uint64_t v21 = (v14 >> 28) & 1;
      uint64_t v22 = (v14 >> 27) & 1;
      if (v17 == CFArrayGetTypeID()) {
        break;
      }
      if (v17 == CFDictionaryGetTypeID())
      {
        if (!v15)
        {
          int v45 = *__error();
          uint64_t v46 = _SILogForLogForCategory(10);
          os_log_type_t v47 = 2 * (dword_1E9FC90CC < 4);
          if (os_log_type_enabled(v46, v47)) {
            goto LABEL_42;
          }
          goto LABEL_43;
        }
        uint64_t v39 = v14 & 0x3FFFFFF;
        CFIndex v40 = CFDictionaryGetCount((CFDictionaryRef)v16);
        int v61 = &v55;
        MEMORY[0x1F4188790](v40);
        long long v41 = (CFTypeRef *)((char *)&v55 - ((8 * v40 + 15) & 0xFFFFFFFFFFFFFFF0));
        bzero(v41, 8 * v40);
        MEMORY[0x1F4188790](v42);
        long long v43 = (const __CFString **)v41;
        bzero(v41, 8 * v40);
        CFDictionaryGetKeysAndValues((CFDictionaryRef)v16, v41, v41);
        if (v40 == 1)
        {
          CFTypeID TypeID = CFNumberGetTypeID();
          if (TypeID != CFGetTypeID(*v41)) {
            goto LABEL_45;
          }
          invertValueToUpdateSet(v66, 0, v63, v39, v67, v64, (uint64_t)*v41, v68, 0, 0, &stru_1F18198E8, v21, v22, v65);
        }
        else if (v40 >= 1)
        {
LABEL_45:
          CFIndex v52 = v40;
          do
          {
            if (v40 >= 2) {
              CFStringRef v53 = *v43;
            }
            else {
              CFStringRef v53 = 0;
            }
            uint64_t v54 = (uint64_t)*v41++;
            invertValueToUpdateSet(v66, v62, v63, v39, v67, v64, v54, v68, v19, v20, v53, v21, v22, v65);
            ++v43;
            --v52;
          }
          while (v52);
        }
      }
      else
      {
        invertValueToUpdateSet(v66, v62, v63, v15, v67, v64, (uint64_t)v16, v68, v19, (v14 & 0x40000000) != 0, 0, (v14 & 0x10000000) != 0, (v14 & 0x8000000) != 0, v65);
      }
LABEL_4:
      uint64_t v13 = v60 + 1;
      if (v60 + 1 == v59) {
        return;
      }
    }
    if (v15)
    {
      CFIndex v23 = CFArrayGetCount((CFArrayRef)v16);
      if (v23 >= 1)
      {
        CFIndex v24 = v23;
        CFIndex v25 = 0;
        BOOL v26 = (v14 & 0xA0000000) == 0x20000000 && v20 == 0;
        int v27 = v26;
        LODWORD(v61) = v27;
        do
        {
          CFStringRef v28 = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v16, v25);
          CFStringRef v29 = v28;
          unsigned __int8 v30 = v19;
          if (v27)
          {
            CFIndex v31 = v24;
            long long v32 = v16;
            uint64_t v33 = v20;
            uint64_t v34 = v22;
            uint64_t v35 = v21;
            uint64_t v36 = v15;
            CFTypeID v37 = CFGetTypeID(v28);
            CFTypeID v38 = CFStringGetTypeID();
            unsigned __int8 v30 = v19;
            BOOL v26 = v37 == v38;
            uint64_t v15 = v36;
            uint64_t v21 = v35;
            uint64_t v22 = v34;
            uint64_t v20 = v33;
            long long v16 = v32;
            CFIndex v24 = v31;
            int v27 = (int)v61;
            if (v26)
            {
              if (CFStringHasPrefix(v29, @"message:%3C")) {
                unsigned __int8 v30 = 0;
              }
              else {
                unsigned __int8 v30 = v19;
              }
            }
          }
          invertValueToUpdateSet(v66, v62, v63, v15, v67, v64, (uint64_t)v29, v68, v30, v20, 0, v21, v22, v65);
          ++v25;
        }
        while (v24 != v25);
      }
      goto LABEL_4;
    }
    int v45 = *__error();
    uint64_t v46 = _SILogForLogForCategory(10);
    os_log_type_t v47 = 2 * (dword_1E9FC90CC < 4);
    if (os_log_type_enabled(v46, v47))
    {
LABEL_42:
      uint64_t buf = v55;
      __int16 v70 = 2112;
      CFDictionaryRef v71 = v56;
      _os_log_impl(&dword_1BD672000, v46, v47, "invalid type for %d %@", (uint8_t *)&buf, 0x12u);
    }
LABEL_43:
    *__error() = v45;
    goto LABEL_4;
  }
}

unint64_t invertValueToUpdateSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, char a10, const __CFString *a11, char a12, char a13, char a14)
{
  uint64_t v14 = MEMORY[0x1F4188790](a1);
  int v16 = v15;
  CFStringRef v18 = v17;
  int v70 = v19;
  uint64_t v21 = v20;
  unsigned int v23 = v22;
  uint64_t v25 = v24;
  int v27 = v26;
  uint64_t v28 = v14;
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  if (__THREAD_SLOT_KEY)
  {
    unint64_t v29 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v29) {
      goto LABEL_105;
    }
  }
  else
  {
    makeThreadId();
    unint64_t v29 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v29)
    {
LABEL_105:
      makeThreadId();
      unint64_t v29 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
      int v30 = a9;
      if (!v29) {
        goto LABEL_7;
      }
      goto LABEL_5;
    }
  }
  if (v29 >= 0x801) {
    goto LABEL_105;
  }
  int v30 = a9;
LABEL_5:
  if (v29 <= 0x800) {
    ++threadData[18 * v29 - 12];
  }
LABEL_7:
  CFTypeID v31 = CFGetTypeID(v18);
  bzero(&v87, 0x414uLL);
  if (v31 == CFStringGetTypeID())
  {
    if (!a12)
    {
      if (v23 < 6)
      {
        int v75 = 0;
        uint64_t v76 = 0;
        uint64_t v38 = *(void *)(v28 + 40);
        uint64_t v71 = v28;
        uint64_t v72 = v38;
        int v73 = v21;
        int v74 = v70;
        LODWORD(v76) = v23;
        BYTE4(v76) = a14;
        uint64_t v39 = *(void *)(v28 + 8) + v21;
        uint64_t v40 = (*(_DWORD *)(v28 + 616) >> 1) & 0x10;
        *(void *)(v28 + 584) = v39;
        if (v23)
        {
          bzero(&cf, 0x1810uLL);
          long long v41 = *(void **)(v25 + 64);
          if (v41)
          {
            free(v41);
            *(void *)(v25 + 64) = 0;
            uint64_t v42 = *(const void **)(v25 + 56);
            if (v42) {
              CFRelease(v42);
            }
            *(void *)(v25 + 56) = 0;
            *(_DWORD *)(v25 + 72) = MEMORY[0x1C1880AD0](0);
          }
          uint64_t v43 = *(void *)(v25 + 8);
          long long v44 = _getContentRankedTokensCallback;
          int v45 = (uint64_t (*)(unsigned __int16 *, uint64_t, uint64_t, uint64_t))_getContentRankedSubTokensCallback;
        }
        else
        {
          bzero(&cf, 0x1810uLL);
          CFIndex v48 = *(void **)(v25 + 64);
          if (v48)
          {
            free(v48);
            *(void *)(v25 + 64) = 0;
            CFIndex v49 = *(const void **)(v25 + 56);
            if (v49) {
              CFRelease(v49);
            }
            *(void *)(v25 + 56) = 0;
            *(_DWORD *)(v25 + 72) = MEMORY[0x1C1880AD0](0);
          }
          uint64_t v43 = *(void *)(v25 + 8);
          long long v44 = _getContentTokensCallback;
          int v45 = (uint64_t (*)(unsigned __int16 *, uint64_t, uint64_t, uint64_t))_getContentSubTokensCallback;
        }
        uint64_t v50 = v45;
        uint64_t v51 = v25;
        uint64_t v52 = (uint64_t)v18;
        uint64_t v53 = v40;
        uint64_t v54 = 0;
      }
      else
      {
        memset(v86, 0, sizeof(v86));
        if (v30)
        {
          LOWORD(v86[0]) = 257;
          unsigned int v37 = 2;
        }
        else
        {
          unsigned int v37 = 0;
        }
        uint64_t v84 = 0;
        uint64_t v83 = 0;
        memset(v85, 0, sizeof(v85));
        char v82 = 1;
        if ((v23 & 0xFE00000) != 0)
        {
          LOBYTE(v83) = v23 | 0x80;
          BYTE1(v83) = (v23 >> 7) | 0x80;
          BYTE2(v83) = (v23 >> 14) | 0x80;
          unsigned int v23 = (v23 & 0xFE00000) >> 21;
          uint64_t v46 = 5;
          uint64_t v47 = 4;
        }
        else if ((v23 & 0x1FC000) != 0)
        {
          LOBYTE(v83) = v23 | 0x80;
          BYTE1(v83) = (v23 >> 7) | 0x80;
          unsigned int v23 = (v23 & 0x1FC000) >> 14;
          uint64_t v46 = 4;
          uint64_t v47 = 3;
        }
        else if ((v23 & 0x3F80) != 0)
        {
          LOBYTE(v83) = v23 | 0x80;
          unsigned int v23 = (unsigned __int16)(v23 & 0x3F80) >> 7;
          uint64_t v46 = 3;
          uint64_t v47 = 2;
        }
        else
        {
          uint64_t v46 = 2;
          uint64_t v47 = 1;
        }
        *(&v82 + v47) = v23;
        *(&v82 + v46) = 0;
        uint64_t v81 = 256;
        uint64_t v71 = v28;
        uint64_t v72 = v21;
        int v73 = v70;
        int v74 = v16;
        int v75 = &v82;
        uint64_t v76 = v46;
        uint64_t v77 = v86;
        uint64_t v78 = v37;
        uint64_t v79 = v27;
        CFStringRef v80 = a11;
        if ((*(unsigned char *)(v28 + 616) & 0x20) != 0) {
          uint64_t v63 = 17;
        }
        else {
          uint64_t v63 = 1;
        }
        BYTE3(v81) = v30 != 0;
        if (a13) {
          uint64_t v64 = 0;
        }
        else {
          uint64_t v64 = *(void *)(v28 + 608);
        }
        bzero(&cf, 0x1810uLL);
        CITokenizerSetLocale(v25, a11, 0);
        uint64_t v43 = *(void *)(v25 + 8);
        long long v44 = _getPropertyTokenCallback;
        uint64_t v50 = _getPropertySubTokenCallback;
        uint64_t v51 = v25;
        uint64_t v52 = (uint64_t)v18;
        uint64_t v53 = v63;
        uint64_t v54 = v64;
      }
      _CITokenizerGetTokens(v51, v43, v52, (uint64_t)&cf, v53, v54, (uint64_t)v44, (uint64_t)v50, 0, 0, (uint64_t)&v71);
      if (cf) {
        CFRelease(cf);
      }
      uint64_t v62 = v92;
      if (v92) {
        goto LABEL_98;
      }
      goto LABEL_99;
    }
    bzero(&cf, 0x414uLL);
    if (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 608) == getPropertyStringCallback)
    {
      if (v23)
      {
        LOWORD(cf) = 513;
        if ((v23 & 0xFE00000) != 0)
        {
          BYTE2(cf) = v23 | 0x80;
          BYTE3(cf) = (v23 >> 7) | 0x80;
          BYTE4(cf) = (v23 >> 14) | 0x80;
          unsigned int v23 = (v23 & 0xFE00000) >> 21;
          size_t v32 = 6;
          uint64_t v33 = 5;
          goto LABEL_71;
        }
        if ((v23 & 0x1FC000) != 0)
        {
          BYTE2(cf) = v23 | 0x80;
          BYTE3(cf) = (v23 >> 7) | 0x80;
          unsigned int v23 = (v23 & 0x1FC000) >> 14;
          goto LABEL_13;
        }
        if ((v23 & 0x3F80) != 0)
        {
          BYTE2(cf) = v23 | 0x80;
          unsigned int v23 = (unsigned __int16)(v23 & 0x3F80) >> 7;
          goto LABEL_42;
        }
LABEL_69:
        size_t v32 = 3;
        uint64_t v33 = 2;
        goto LABEL_71;
      }
    }
    else if (v23)
    {
      LOBYTE(cf) = 1;
      if ((v23 & 0xFE00000) != 0)
      {
        BYTE1(cf) = v23 | 0x80;
        BYTE2(cf) = (v23 >> 7) | 0x80;
        BYTE3(cf) = (v23 >> 14) | 0x80;
        unsigned int v23 = (v23 & 0xFE00000) >> 21;
LABEL_13:
        size_t v32 = 5;
        uint64_t v33 = 4;
LABEL_71:
        *((unsigned char *)&cf + v33) = v23;
        *((unsigned char *)&cf + v32) = 0;
LABEL_72:
        CFIndex v59 = CIDecomposeCFString(v18, &cf, v32);
        uint64_t v60 = v59;
        if (v59)
        {
          unint64_t v61 = strlen((const char *)&v59[v32]) + v32;
          if (v61 >= 0x414)
          {
            if ((v60[1043] & 0xC0) == 0x80)
            {
              unint64_t v61 = 1043;
            }
            else if ((v60[1042] & 0xC0) == 0x80)
            {
              unint64_t v61 = 1042;
            }
            else if ((v60[1041] & 0xC0) == 0x80)
            {
              unint64_t v61 = 1041;
            }
            else if ((v60[1040] & 0xC0) == 0x80)
            {
              unint64_t v61 = 1040;
            }
            else
            {
              unint64_t v61 = 1039;
            }
            v60[v61] = 0;
          }
          pushPropertyTerm(v28, v61, v60, v21, v70, v16, 1);
        }
        if (v60 != (unsigned __int8 *)&cf)
        {
          uint64_t v62 = v60;
LABEL_98:
          free(v62);
          goto LABEL_99;
        }
        goto LABEL_99;
      }
      if ((v23 & 0x1FC000) != 0)
      {
        BYTE1(cf) = v23 | 0x80;
        BYTE2(cf) = (v23 >> 7) | 0x80;
        unsigned int v23 = (v23 & 0x1FC000) >> 14;
LABEL_42:
        size_t v32 = 4;
        uint64_t v33 = 3;
        goto LABEL_71;
      }
      if ((v23 & 0x3F80) == 0)
      {
        size_t v32 = 2;
        uint64_t v33 = 1;
        goto LABEL_71;
      }
      BYTE1(cf) = v23 | 0x80;
      unsigned int v23 = (unsigned __int16)(v23 & 0x3F80) >> 7;
      goto LABEL_69;
    }
    size_t v32 = 0;
    goto LABEL_72;
  }
  if (v31 == CFNumberGetTypeID() || v31 == CFBooleanGetTypeID())
  {
    if (a11) {
      unsigned __int8 v34 = 4;
    }
    else {
      unsigned __int8 v34 = 2;
    }
  }
  else
  {
    if (v31 != CFDateGetTypeID()) {
      goto LABEL_99;
    }
    unsigned __int8 v34 = 3;
  }
  unsigned __int8 v87 = v34;
  if ((v23 & 0xFE00000) != 0)
  {
    char v88 = v23 | 0x80;
    char v89 = (v23 >> 7) | 0x80;
    char v90 = (v23 >> 14) | 0x80;
    unsigned int v23 = (v23 & 0xFE00000) >> 21;
    uint64_t v35 = 5;
    uint64_t v36 = 4;
  }
  else if ((v23 & 0x1FC000) != 0)
  {
    char v88 = v23 | 0x80;
    char v89 = (v23 >> 7) | 0x80;
    unsigned int v23 = (v23 & 0x1FC000) >> 14;
    uint64_t v35 = 4;
    uint64_t v36 = 3;
  }
  else if ((v23 & 0x3F80) != 0)
  {
    char v88 = v23 | 0x80;
    unsigned int v23 = (unsigned __int16)(v23 & 0x3F80) >> 7;
    uint64_t v35 = 3;
    uint64_t v36 = 2;
  }
  else
  {
    uint64_t v35 = 2;
    uint64_t v36 = 1;
  }
  *(&v87 + v36) = v23;
  long long v55 = &v87 + v35;
  unint64_t v56 = FlattenCFTypeToBuffer(v18, &v87 + v35) + v35;
  if (!a10) {
    pushPropertyTerm(v28, v56, &v87, v21, v70, v16, 1);
  }
  if (v30)
  {
    *(v55 - 2) = v34;
    int v57 = v55 - 2;
    v57[1] = 1;
    size_t v58 = v56 + &v87 - v57;
    if (v27) {
      pushPropertyTermForWildCard(v27, v58, v57, v16);
    }
    else {
      pushPropertyTerm(v28, v58, v57, v21, v70, v16, 1);
    }
  }
LABEL_99:
  unint64_t result = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
  if (result && result <= 0x800)
  {
    uint64_t v66 = &threadData[18 * result];
    int v69 = *(v66 - 12);
    uint64_t v67 = v66 - 12;
    int v68 = v69;
    if (v69) {
      *uint64_t v67 = v68 - 1;
    }
  }
  return result;
}

uint64_t FlattenCFTypeToBuffer(const void *a1, unsigned char *a2)
{
  CFTypeID v4 = CFGetTypeID(a1);
  if (v4 == CFDateGetTypeID())
  {
    MEMORY[0x1C187FB10](a1);
LABEL_18:
    double v14 = Value;
    goto LABEL_19;
  }
  if (v4 == CFNumberGetTypeID())
  {
    CFNumberType Type = CFNumberGetType((CFNumberRef)a1);
    uint64_t v7 = a2;
    if ((unint64_t)Type <= kCFNumberCGFloatType)
    {
      if (((1 << Type) & 0xCF9E) != 0)
      {
        uint64_t valuePtr = 0;
        if (!CFNumberGetValue((CFNumberRef)a1, kCFNumberLongLongType, &valuePtr))
        {
          int v16 = __si_assert_copy_extra_329();
          CFStringRef v17 = v16;
          CFStringRef v18 = "";
          if (v16) {
            CFStringRef v18 = v16;
          }
          __message_assert(v16, "n2s.c", 184, "conversionSucceeded", v18);
          free(v17);
          if (__valid_fs(-1)) {
            uint64_t v19 = 2989;
          }
          else {
            uint64_t v19 = 3072;
          }
          *(_DWORD *)uint64_t v19 = -559038737;
          abort();
        }
        if (valuePtr >= 0) {
          unint64_t v8 = valuePtr;
        }
        else {
          unint64_t v8 = -valuePtr;
        }
        unint64_t v9 = __clz(v8);
        unint64_t v10 = (unint64_t)valuePtr >> 63;
        if (valuePtr) {
          unint64_t v11 = 2 * (v8 << v9);
        }
        else {
          unint64_t v11 = 0;
        }
        if (valuePtr) {
          unint64_t v12 = 1086 - v9;
        }
        else {
          unint64_t v12 = 0;
        }
        goto LABEL_20;
      }
      uint64_t v7 = a2;
      if (((1 << Type) & 0x13060) == 0) {
        goto LABEL_21;
      }
      uint64_t valuePtr = 0;
      if (!CFNumberGetValue((CFNumberRef)a1, kCFNumberFloat64Type, &valuePtr))
      {
        uint64_t v20 = __si_assert_copy_extra_329();
        uint64_t v21 = v20;
        unsigned int v22 = "";
        if (v20) {
          unsigned int v22 = v20;
        }
        __message_assert(v20, "n2s.c", 165, "conversionSucceeded", v22);
        free(v21);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      double v14 = *(double *)&valuePtr;
LABEL_19:
      unint64_t v11 = *(void *)&v14 << 12;
      unint64_t v10 = *(void *)&v14 >> 63;
      unint64_t v12 = (*(void *)&v14 >> 52) & 0x7FFLL;
LABEL_20:
      uint64_t v7 = WriteCharactersFromSignBiasedExponentStrippedMantissa(a2, v10, v12, v11);
    }
  }
  else
  {
    CFTypeID TypeID = CFBooleanGetTypeID();
    uint64_t v7 = a2;
    if (v4 == TypeID)
    {
      double Value = (double)CFBooleanGetValue((CFBooleanRef)a1);
      goto LABEL_18;
    }
  }
LABEL_21:
  unsigned char *v7 = 0;
  return (v7 - a2);
}

unsigned char *WriteCharactersFromSignBiasedExponentStrippedMantissa(unsigned char *a1, int a2, unint64_t a3, unint64_t a4)
{
  if (a2)
  {
    BOOL v4 = a4 == 0;
    a4 = -(uint64_t)a4;
    if (v4) {
      a3 = (a3 ^ 0x7FF) + 1;
    }
    else {
      a3 ^= 0x7FFuLL;
    }
    *a1++ = 45;
  }
  *a1 = kHexDigits[(a3 >> 8) & 0xF];
  a1[1] = kHexDigits[a3 >> 4];
  a1[2] = kHexDigits[a3 & 0xF];
  a1[3] = 95;
  if (!a4) {
    return a1 + 4;
  }
  a1[4] = kHexDigits[a4 >> 60];
  if ((a4 & 0xFFFFFFFFFFFFFFFLL) == 0) {
    return a1 + 5;
  }
  a1[5] = kHexDigits[HIBYTE(a4) & 0xF];
  if ((a4 & 0xFFFFFFFFFFFFFFLL) == 0) {
    return a1 + 6;
  }
  a1[6] = kHexDigits[(a4 >> 52) & 0xF];
  if ((a4 & 0xFFFFFFFFFFFFFLL) == 0) {
    return a1 + 7;
  }
  a1[7] = kHexDigits[HIWORD(a4) & 0xF];
  if ((a4 & 0xFFFFFFFFFFFFLL) == 0) {
    return a1 + 8;
  }
  a1[8] = kHexDigits[(a4 >> 44) & 0xF];
  if ((a4 & 0xFFFFFFFFFFFLL) == 0) {
    return a1 + 9;
  }
  a1[9] = kHexDigits[(a4 >> 40) & 0xF];
  if ((a4 & 0xFFFFFFFFFFLL) == 0) {
    return a1 + 10;
  }
  a1[10] = kHexDigits[(a4 >> 36) & 0xF];
  if ((a4 & 0xFFFFFFFFFLL) == 0) {
    return a1 + 11;
  }
  a1[11] = kHexDigits[HIDWORD(a4) & 0xF];
  if (!a4) {
    return a1 + 12;
  }
  a1[12] = kHexDigits[a4 >> 28];
  if ((a4 & 0xFFFFFFF) == 0) {
    return a1 + 13;
  }
  a1[13] = kHexDigits[(a4 >> 24) & 0xF];
  if ((a4 & 0xFFFFFF) == 0) {
    return a1 + 14;
  }
  a1[14] = kHexDigits[(a4 >> 20) & 0xF];
  if ((a4 & 0xFFFFF) == 0) {
    return a1 + 15;
  }
  a1[15] = kHexDigits[(a4 >> 16) & 0xF];
  if (!(_WORD)a4) {
    return a1 + 16;
  }
  a1[16] = kHexDigits[(unsigned __int16)a4 >> 12];
  if ((a4 & 0xFFF) == 0) {
    return a1 + 17;
  }
  a1[17] = kHexDigits[(a4 >> 8) & 0xF];
  if (!(_BYTE)a4) {
    return a1 + 18;
  }
  a1[18] = kHexDigits[a4 >> 4];
  if ((a4 & 0xF) == 0) {
    return a1 + 19;
  }
  a1[19] = kHexDigits[a4 & 0xF];
  return a1 + 20;
}

unsigned char *CIDecomposeCFString(const __CFString *a1, unsigned char *a2, size_t a3)
{
  uint64_t v19 = 0;
  if (!a1) {
    return 0;
  }
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID()) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(a1);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  CharactersPtr = CFStringGetCharactersPtr(a1);
  if (CharactersPtr)
  {
    unint64_t v10 = (unsigned __int16 *)CharactersPtr;
    unint64_t v11 = 0;
    goto LABEL_7;
  }
  unint64_t v12 = (UniChar *)malloc_type_malloc(2 * Length, 0x1000040BDFB0063uLL);
  if (!v12) {
    return 0;
  }
  unint64_t v10 = v12;
  v20.location = 0;
  v20.length = Length;
  CFStringGetCharacters(a1, v20, v12);
  unint64_t v11 = v10;
LABEL_7:
  uint64_t v13 = a2;
  if (MaximumSizeForEncoding >= (uint64_t)(1044 - a3))
  {
    double v14 = malloc_type_malloc(MaximumSizeForEncoding + 1 + a3, 0xD7682243uLL);
    uint64_t v13 = v14;
    if (a2)
    {
      if (a3) {
        memcpy(v14, a2, a3);
      }
    }
  }
  if (v13)
  {
    int v15 = utf8_encodestr(v10, 2 * Length, &v13[a3], &v19, MaximumSizeForEncoding + 1);
    if (v15) {
      int v16 = v13;
    }
    else {
      int v16 = 0;
    }
    if (v15) {
      CFStringRef v17 = 0;
    }
    else {
      CFStringRef v17 = v13;
    }
  }
  else
  {
    int v16 = 0;
    CFStringRef v17 = 0;
  }
  free(v11);
  if (v16 && v16 != a2) {
    free(v16);
  }
  return v17;
}

void CITokenizerSetLocale(uint64_t a1, const __CFString *a2, const char *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  bzero(buffer, 0x400uLL);
  if (a2 && (CFTypeID v6 = buffer, CFStringGetCString(a2, buffer, 1024, 0x8000100u)) || (CFTypeID v6 = (char *)a3) != 0)
  {
    if (*v6) {
      a3 = v6;
    }
    else {
      a3 = 0;
    }
    if (*v6) {
      CFStringRef v7 = a2;
    }
    else {
      CFStringRef v7 = 0;
    }
  }
  else
  {
    CFStringRef v7 = a2;
  }
  unint64_t v8 = *(char **)(a1 + 64);
  if (a3 == v8) {
    return;
  }
  if (a3 && v8)
  {
    if (!strcmp(a3, *(const char **)(a1 + 64))) {
      return;
    }
    goto LABEL_17;
  }
  if (v8) {
LABEL_17:
  }
    free(v8);
  *(void *)(a1 + 64) = 0;
  unint64_t v9 = *(const void **)(a1 + 56);
  if (v9) {
    CFRelease(v9);
  }
  *(void *)(a1 + 56) = 0;
  unint64_t v10 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (a3 && !v7) {
    CFStringRef v7 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a3, 0x8000100u);
  }
  if (v7)
  {
    CFLocaleRef v11 = CFLocaleCreate(*v10, v7);
    *(void *)(a1 + 56) = v11;
    if (v11) {
      *(void *)(a1 + 64) = strdup(a3);
    }
    if (v7 != a2) {
      CFRelease(v7);
    }
  }
  *(_DWORD *)(a1 + 72) = MEMORY[0x1C1880AD0](*(void *)(a1 + 56));
}

uint64_t termUpdateSetResolveQueryInfo(uint64_t a1, unsigned int a2, unsigned char **a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v325 = *MEMORY[0x1E4F143B8];
  db_read_lock(a1 + 304);
  if (a6 && *(void *)(a1 + 584) != a6)
  {
    _TermUpdateSetReadUnlock(a1);
    return 1;
  }
  memset(&v299[56], 0, 32);
  *(_OWORD *)&v299[40] = 0u;
  *(_OWORD *)&v299[24] = 0u;
  *(_OWORD *)&v299[8] = 0u;
  uint64_t v14 = (uint64_t)CICleanUpThreadLoc();
  CIOnThreadCleanUpPush(v14, (uint64_t)_TermUpdateSetReadUnlock, a1);
  unint64_t v241 = threadData[18 * v14 + 8];
  *(void *)unint64_t v299 = *(void *)(a1 + 88);
  *(_DWORD *)&v299[8] = a2;
  *(void *)&v299[16] = a3;
  *(void *)&v299[24] = a4;
  *(void *)&v299[64] = a7;
  *(_DWORD *)&v299[56] = a5;
  uint64_t v15 = *(void *)(a1 + 256);
  *(void *)&v299[40] = *(void *)(a1 + 240);
  *(void *)&v299[48] = v15;
  size_t count = a2;
  if (a2 <= 0xFFF && 32 * (unint64_t)a2 > *MEMORY[0x1E4F14B00]) {
    ++sTotal_11167;
  }
  int v16 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, a2, 0x20uLL, 0x31F9A007uLL);
  if (v16)
  {
    uint64_t v17 = MEMORY[0x1E4F14838];
    uint64_t v18 = v14;
    uint64_t v19 = (uint64_t)v16;
  }
  else
  {
    _log_fault_for_malloc_failure();
    uint64_t v17 = MEMORY[0x1E4F14838];
    uint64_t v18 = v14;
    uint64_t v19 = 0;
  }
  CICleanUpPush(v18, v17, v19);
  *(void *)&v299[32] = v16;
  v299[80] = (*(unsigned char *)(a1 + 616) & 0x40) != 0;
  uint64_t v243 = a4;
  uint64_t v244 = a1;
  float v245 = a3;
  if (a2)
  {
    uint64_t v21 = a2;
    unsigned int v22 = a3;
    while (**v22 != 42)
    {
      v22 += 8;
      if (!--v21) {
        goto LABEL_14;
      }
    }
    __p[0] = resolveQueryInfoCallback;
    __p[1] = v299;
    uint64_t v31 = *(void *)(a1 + 24);
    *(void *)&long long v300 = 0;
    *((void *)&v300 + 1) = &v300;
    LODWORD(v302) = 0;
    uint64_t v301 = 0x2000000000;
    buf[0] = (int8x8_t)MEMORY[0x1E4F143A8];
    buf[1] = (int8x8_t)0x40000000;
    buf[2] = (int8x8_t)___hashTableIterate_block_invoke_2;
    buf[3] = (int8x8_t)&unk_1E6343AC8;
    buf[6] = (int8x8_t)__p;
    buf[5] = (int8x8_t)termUpdateSetApplier;
    uint8_t buf[4] = (int8x8_t)&v300;
    _TermTrieWalkFatWithOptions(v31 + 32, 0, 0, 0, (uint64_t)buf, 0, 0);
    _Block_object_dispose(&v300, 8);
    if (a4) {
      goto LABEL_301;
    }
    goto LABEL_401;
  }
LABEL_14:
  CFMutableSetRef Mutable = CFSetCreateMutable(0, 0, 0);
  __p[0] = (void *)128;
  uint64_t v24 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0xC00uLL, 0x6085D6BuLL);
  if (!v24) {
    _log_fault_for_malloc_failure();
  }
  __p[1] = v24;
  *(void *)unint64_t v322 = 128;
  uint64_t v25 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0xC00uLL, 0x6085D6BuLL);
  if (!v25) {
    _log_fault_for_malloc_failure();
  }
  *(void *)&v322[8] = v25;
  BOOL v26 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x10uLL, 0x6085D6BuLL);
  int v27 = v26;
  uint64_t v240 = a6;
  if (v26)
  {
    *(void *)&v299[72] = v26;
    uint64_t v28 = MEMORY[0x1E4F14838];
    uint64_t v29 = v14;
    uint64_t v30 = (uint64_t)v27;
  }
  else
  {
    _log_fault_for_malloc_failure();
    *(void *)&v299[72] = 0;
    uint64_t v28 = MEMORY[0x1E4F14838];
    uint64_t v29 = v14;
    uint64_t v30 = 0;
  }
  CICleanUpPush(v29, v28, v30);
  *int v27 = 0;
  v27[1] = 0;
  unsigned int v239 = a2;
  if (!a2) {
    goto LABEL_298;
  }
  uint64_t v32 = 0;
  do
  {
    HIDWORD(__p[0]) = 0;
    *(_DWORD *)&v322[4] = 0;
    uint64_t v249 = v32;
    uint64_t v33 = &a3[8 * v32];
    int v34 = *((_DWORD *)v33 + 4);
    unint64_t v254 = v33 + 2;
    if ((v34 & 0x10) != 0) {
      goto LABEL_286;
    }
    uint64_t v35 = a3[8 * v32];
    size_t v36 = strlen(v35);
    uint64_t v37 = (*(void *)(a1 + 24) + 32) | 1;
    if ((v34 & 4) != 0)
    {
      uint64_t v42 = a3[8 * v249 + 1];
      int v43 = strcmp(v35, v42);
      int v44 = *(unsigned __int8 *)v35;
      if (v44 != *(unsigned __int8 *)v42 || (v44 - 2) > 2) {
        goto LABEL_286;
      }
      int v46 = *((unsigned __int8 *)v35 + 1);
      if (v35[1] < 0)
      {
        int v49 = *((unsigned __int8 *)v35 + 2);
        if (v35[2] < 0)
        {
          int v63 = *((unsigned __int8 *)v35 + 3);
          if (v35[3] < 0)
          {
            int v65 = *((unsigned __int8 *)v35 + 4);
            if (v35[4] < 0)
            {
              int v69 = v35[5];
              if (v69 < 0) {
                goto LABEL_411;
              }
              int v47 = 6;
              int v46 = ((v65 & 0x7F) << 21) | (v69 << 28) | ((v63 & 0x7F) << 14) | ((v49 & 0x7F) << 7) | v46 & 0x7F;
              if (!v43) {
                goto LABEL_263;
              }
            }
            else
            {
              int v47 = 5;
              int v46 = ((v63 & 0x7F) << 14) | (v65 << 21) | ((v49 & 0x7F) << 7) | v46 & 0x7F;
              if (!v43) {
                goto LABEL_263;
              }
            }
          }
          else
          {
            int v47 = 4;
            int v46 = ((v49 & 0x7F) << 7) | (v63 << 14) | v46 & 0x7F;
            if (!v43) {
              goto LABEL_263;
            }
          }
        }
        else
        {
          int v46 = v46 & 0x7F | (v49 << 7);
          int v47 = 3;
          if (!v43) {
            goto LABEL_263;
          }
        }
      }
      else
      {
        int v47 = 2;
        if (!v43)
        {
LABEL_263:
          uint64_t v154 = 0;
          while (1)
          {
            uint64_t v155 = (int8x8_t *)(v37 & 0xFFFFFFFFFFFFFFFCLL);
            int v156 = v37 & 3;
            if (v156 != 1) {
              break;
            }
            uint64_t v37 = (uint64_t)v155[*((unsigned __int8 *)&tcm + v35[v154]) + 1];
            if (!v37) {
              goto LABEL_286;
            }
LABEL_276:
            if (v47 == ++v154) {
              goto LABEL_280;
            }
          }
          if (v156 != 2)
          {
            if (v156 != 3) {
              goto LABEL_286;
            }
            v37 |= 3uLL;
            int v47 = v154;
LABEL_280:
            if ((~(_BYTE)v37 & 3) != 0)
            {
              bzero(buf, 0x400uLL);
              TermTrieMatchRangeChars(v37, (uint64_t)&v35[v47], (uint64_t)&v42[v47], Mutable, (uint64_t)buf, 0);
              goto LABEL_286;
            }
            uint64_t v62 = (const void *)(v37 & 0xFFFFFFFFFFFFFFFCLL);
            goto LABEL_282;
          }
          unint64_t v157 = *((unsigned __int8 *)&tcm + v35[v154]);
          if (((*(unsigned __int32 *)((char *)v155[1].i32 + ((v157 >> 3) & 0x1C)) >> v157) & 1) == 0) {
            goto LABEL_286;
          }
          uint64_t v158 = 0;
          uint64_t v159 = v155 + 1;
          unint64_t v160 = v157 >> 6;
          if ((v157 >> 6) != 1)
          {
            if (v160 != 2)
            {
              if (v160 != 3) {
                goto LABEL_273;
              }
              uint8x8_t v161 = (uint8x8_t)vcnt_s8(v155[3]);
              v161.i16[0] = vaddlv_u8(v161);
              uint64_t v158 = v161.u32[0];
            }
            uint8x8_t v162 = (uint8x8_t)vcnt_s8(v155[2]);
            v162.i16[0] = vaddlv_u8(v162);
            v158 += v162.u32[0];
          }
          uint8x8_t v163 = (uint8x8_t)vcnt_s8(*v159);
          v163.i16[0] = vaddlv_u8(v163);
          v158 += v163.u32[0];
LABEL_273:
          uint8x8_t v164 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)&v159[v160] & ~(-1 << v157)));
          v164.i16[0] = vaddlv_u8(v164);
          uint64_t v37 = (uint64_t)v155[v164.u32[0] + 6 + v158];
          if (!v37) {
            goto LABEL_286;
          }
          goto LABEL_276;
        }
      }
      int v70 = *((unsigned __int8 *)v42 + 1);
      if (v42[1] < 0)
      {
        int v71 = *((unsigned __int8 *)v42 + 2);
        if (v42[2] < 0)
        {
          int v72 = *((unsigned __int8 *)v42 + 3);
          if (v42[3] < 0)
          {
            int v73 = *((unsigned __int8 *)v42 + 4);
            if (v42[4] < 0)
            {
              int v152 = v42[5];
              if (v152 < 0) {
                goto LABEL_412;
              }
              int v70 = ((v73 & 0x7F) << 21) | (v152 << 28) | ((v72 & 0x7F) << 14) | ((v71 & 0x7F) << 7) | v70 & 0x7F;
            }
            else
            {
              int v70 = ((v72 & 0x7F) << 14) | (v73 << 21) | ((v71 & 0x7F) << 7) | v70 & 0x7F;
            }
          }
          else
          {
            int v70 = ((v71 & 0x7F) << 7) | (v72 << 14) | v70 & 0x7F;
          }
        }
        else
        {
          int v70 = v70 & 0x7F | (v71 << 7);
        }
      }
      if (v46) {
        BOOL v153 = v46 == v70;
      }
      else {
        BOOL v153 = 0;
      }
      if (!v153) {
        goto LABEL_286;
      }
      goto LABEL_263;
    }
    uint64_t v38 = &a3[8 * v249];
    uint64_t v39 = (uint64_t *)(v38 + 4);
    if (v38[4])
    {
      uint64_t v242 = (int *)v38 + 5;
      if (*((int *)v38 + 5) < 7) {
        goto LABEL_124;
      }
      if (*v35 != 1) {
        goto LABEL_133;
      }
      int v40 = *((unsigned __int8 *)v35 + 1);
      if ((v35[1] & 0x80000000) == 0)
      {
        unint64_t v41 = 2;
LABEL_97:
        if (v40 != 2)
        {
LABEL_102:
          if (v41 > v36) {
            goto LABEL_133;
          }
          uint64_t v77 = 0;
          while (1)
          {
            uint64_t v78 = (int8x8_t *)(v37 & 0xFFFFFFFFFFFFFFFCLL);
            int v79 = v37 & 3;
            if (v79 == 1)
            {
              uint64_t v37 = (uint64_t)v78[*((unsigned __int8 *)&tcm + v35[v77]) + 1];
              if (!v37) {
                goto LABEL_133;
              }
              goto LABEL_116;
            }
            if (v79 != 2)
            {
              if (v79 == 3 && v77)
              {
                v37 |= 3uLL;
LABEL_121:
                if ((~(_BYTE)v37 & 3) == 0)
                {
                  CFSetAddValue(Mutable, (const void *)(v37 & 0xFFFFFFFFFFFFFFFCLL));
                  goto LABEL_133;
                }
                if (v41 == (int)v77)
                {
LABEL_124:
                  int v88 = (int)__p[0];
                  if (SLODWORD(__p[0]) < 1)
                  {
                    LODWORD(__p[0]) *= 2;
                    size_t v91 = 48 * v88;
                    if (__p[1]) {
                      uint64_t v92 = (char *)malloc_type_zone_realloc((malloc_zone_t *)queryZone, __p[1], v91, 0xECA6AA46uLL);
                    }
                    else {
                      uint64_t v92 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, v91, 0x8DDAA030uLL);
                    }
                    char v90 = v92;
                    if (!v92) {
                      _log_fault_for_malloc_failure();
                    }
                    __p[1] = v90;
                    int v89 = HIDWORD(__p[0]);
                  }
                  else
                  {
                    int v89 = 0;
                    char v90 = (char *)__p[1];
                  }
                  uint64_t v93 = &v90[24 * v89];
                  *(void *)uint64_t v93 = v37;
                  *(_OWORD *)(v93 + 8) = xmmword_1BDA82440;
                  ++HIDWORD(__p[0]);
                }
              }
LABEL_133:
              uint64_t v308 = 0;
              int v297 = 0;
              __s = 0;
              if (icu_search_context_is_fuzzy())
              {
                uint64_t v94 = *(void *)&v299[72];
                if (!**(void **)&v299[72]) {
                  **(void **)&v299[72] = Mutable;
                }
                if (!*(void *)(v94 + 8)) {
                  la_init(*v39);
                }
                while (HIDWORD(__p[0]))
                {
                  if (SHIDWORD(__p[0]) >= 1)
                  {
                    uint64_t v95 = 0;
                    uint64_t v96 = 0;
                    do
                    {
                      uint64_t v97 = *(void *)((char *)__p[1] + v95 + 8);
                      unsigned __int32 v98 = *(_DWORD *)((char *)__p[1] + v95 + 16);
                      uint64_t v99 = *(void *)(*(void *)&v299[72] + 8);
                      if (*(unsigned char *)(v99 + 48)) {
                        BOOL v100 = v97 == 0;
                      }
                      else {
                        BOOL v100 = 1;
                      }
                      if (v100) {
                        goto LABEL_153;
                      }
                      unsigned int v101 = *(_DWORD *)(v99 + 16) - *(unsigned __int8 *)(v99 + 32);
                      char v102 = 5 * (v98 - v101);
                      BOOL v103 = v101 >= v98;
                      char v104 = 5 * (v101 - v98);
                      if (v103) {
                        char v102 = 0;
                      }
                      if (!v103) {
                        char v104 = 0;
                      }
                      if ((((unint64_t)(v97 << v102) >> v104) & 0x1F79C61) == 0)
                      {
LABEL_153:
                        unsigned int v107 = (2 * *(unsigned __int8 *)(v99 + 32)) | 1;
                        if (v107 >= *(_DWORD *)(v99 + 16) - v98) {
                          LOBYTE(v107) = *(unsigned char *)(v99 + 16) - v98;
                        }
                        LOBYTE(v300) = 0;
                        buf[0] = 0;
                        tt_transition_for_state(**(void ***)v99, v97, v107 << 8, buf, &v300);
                        int8x8_t v108 = buf[0];
                        uint64_t v109 = *(void *)(v99 + 40) + 24 * v98;
                        *(int8x8_t *)(v109 + 8) = buf[0];
                        *(_DWORD *)(v109 + 16) = v300 + v98;
                        uint64_t v110 = *(void *)v109;
                        int8x8_t v111 = *(int8x8_t *)(v109 + 16);
                        if (dword_1E9FC90A8 >= 5)
                        {
                          int v246 = *__error();
                          int log = _SILogForLogForCategory(1);
                          if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
                          {
                            buf[0].i32[0] = 134218752;
                            *(int8x8_t *)((char *)buf + 4) = (int8x8_t)v97;
                            buf[1].i16[2] = 1024;
                            *(__int32 *)((char *)&buf[1].i32[1] + 2) = v98;
                            buf[2].i16[1] = 2048;
                            *(int8x8_t *)((char *)&buf[2] + 4) = v108;
                            buf[3].i16[2] = 1024;
                            *(__int32 *)((char *)&buf[3].i32[1] + 2) = v111.i32[0];
                            _os_log_impl(&dword_1BD672000, log, OS_LOG_TYPE_DEFAULT, "la_transition_context_for_state, current_state: %llu %d: transition_ctx.default_state: %llu %d", (uint8_t *)buf, 0x22u);
                          }
                          *__error() = v246;
                        }
                        uint64_t v112 = *(void *)((char *)__p[1] + v95);
                        *(_OWORD *)uint64_t v324 = *(_OWORD *)((char *)__p[1] + v95 + 8);
                        *(void *)&long long v300 = MEMORY[0x1E4F143A8];
                        *((void *)&v300 + 1) = 0x40000000;
                        uint64_t v301 = (uint64_t)__term_trie_resolve_fuzzy_transition_block_invoke;
                        uint64_t v302 = &__block_descriptor_tmp_55_11219;
                        uint64_t v303 = *(void *)&v299[72];
                        buf[0] = (int8x8_t)MEMORY[0x1E4F143A8];
                        buf[1] = (int8x8_t)0x40000000;
                        buf[2] = (int8x8_t)__term_trie_resolve_fuzzy_transition_block_invoke_2;
                        buf[3] = (int8x8_t)&__block_descriptor_tmp_57_11220;
                        uint8_t buf[4] = v108;
                        buf[5] = v111;
                        *(_OWORD *)buf[7].i8 = *(_OWORD *)v324;
                        buf[6] = (int8x8_t)v112;
                        buf[9] = *(int8x8_t *)&v299[72];
                        *(void *)&long long v311 = v322;
                        _term_trie_resolve_sub_trie(v112, v110, *(void *)&v108 != 0, (uint64_t)&v300, (uint64_t)buf);
                      }
                      else
                      {
                        uint64_t v105 = *(void *)((unsigned char *)__p[1] + v95) & 3;
                        unint64_t v106 = *(void *)((unsigned char *)__p[1] + v95) & 0xFFFFFFFFFFFFFFFCLL;
                        if (v105 == 2)
                        {
                          v283[0] = MEMORY[0x1E4F143A8];
                          v283[1] = 0x40000000;
                          v283[2] = __termUpdateSetResolveQueryInfo_block_invoke_3;
                          v283[3] = &__block_descriptor_tmp_34_11217;
                          long long v286 = *(_OWORD *)&v299[32];
                          long long v287 = *(_OWORD *)&v299[48];
                          long long v288 = *(_OWORD *)&v299[64];
                          uint64_t v289 = *(void *)&v299[80];
                          long long v284 = *(_OWORD *)v299;
                          long long v285 = *(_OWORD *)&v299[16];
                          _TermTrieWalkCompactWithOptions(v106, 0, 0, 1, (uint64_t)v283, 0, 0);
                        }
                        else if (v105 == 1)
                        {
                          v290[0] = MEMORY[0x1E4F143A8];
                          v290[1] = 0x40000000;
                          v290[2] = __termUpdateSetResolveQueryInfo_block_invoke_2;
                          v290[3] = &__block_descriptor_tmp_33_11216;
                          long long v293 = *(_OWORD *)&v299[32];
                          long long v294 = *(_OWORD *)&v299[48];
                          long long v295 = *(_OWORD *)&v299[64];
                          uint64_t v296 = *(void *)&v299[80];
                          long long v291 = *(_OWORD *)v299;
                          long long v292 = *(_OWORD *)&v299[16];
                          _TermTrieWalkFatWithOptions(v106, 0, 0, 1, (uint64_t)v290, 0, 0);
                        }
                      }
                      ++v96;
                      v95 += 24;
                    }
                    while (v96 < SHIDWORD(__p[0]));
                  }
                  if ((*v254 & 2) != 0 && *(int *)&v322[4] >= 1)
                  {
                    uint64_t v113 = 0;
                    uint64_t v114 = 0;
                    do
                    {
                      uint64_t v115 = **(__CFSet ***)&v299[72];
                      *(_OWORD *)buf[0].i8 = *(_OWORD *)(*(void *)&v322[8] + v113);
                      buf[2] = *(int8x8_t *)(*(void *)&v322[8] + v113 + 16);
                      term_trie_resolve_combining(buf, v115, (int *)v322);
                      ++v114;
                      v113 += 24;
                    }
                    while (v114 < *(int *)&v322[4]);
                  }
                  long long v116 = *(_OWORD *)v322;
                  *(_OWORD *)unint64_t v322 = *(_OWORD *)__p;
                  *(_DWORD *)&v322[4] = 0;
                  *(_OWORD *)__p = v116;
                }
                a3 = v245;
                if (!icu_search_context_is_fuzzy()) {
                  goto LABEL_286;
                }
                goto LABEL_215;
              }
              int item_count = icu_search_context_item_get_item_count();
              if (item_count < 1 || HIDWORD(__p[0]) == 0)
              {
                if ((icu_search_context_is_fuzzy() & 1) == 0) {
                  goto LABEL_286;
                }
LABEL_215:
                if (!*(unsigned char *)(*(void *)(*(void *)&v299[72] + 8) + 48)) {
                  goto LABEL_216;
                }
                goto LABEL_286;
              }
              int v118 = 0;
              while (1)
              {
                int info = icu_search_context_item_get_info();
                if (!info) {
                  break;
                }
                int v120 = info;
                int v121 = HIDWORD(__p[0]);
                if (SHIDWORD(__p[0]) < 1) {
                  goto LABEL_210;
                }
                uint64_t v122 = 0;
                unsigned int v123 = info & 0xFFFFFFFE;
                while (2)
                {
                  switch(v120)
                  {
                    case 1:
                      uint64_t v124 = *((void *)__p[1] + 3 * v122) & 3;
                      unint64_t v125 = *((void *)__p[1] + 3 * v122) & 0xFFFFFFFFFFFFFFFCLL;
                      if (v124 == 2)
                      {
                        v281[0] = MEMORY[0x1E4F143A8];
                        v281[1] = 0x40000000;
                        v281[2] = __termUpdateSetResolveQueryInfo_block_invoke_2_38;
                        v281[3] = &__block_descriptor_tmp_39_11222;
                        v281[4] = Mutable;
                        _TermTrieWalkCompactWithOptions(v125, 0, 0, 1, (uint64_t)v281, 0, 0);
                      }
                      else if (v124 == 1)
                      {
                        v282[0] = MEMORY[0x1E4F143A8];
                        v282[1] = 0x40000000;
                        v282[2] = __termUpdateSetResolveQueryInfo_block_invoke_36;
                        v282[3] = &__block_descriptor_tmp_37;
                        v282[4] = Mutable;
                        _TermTrieWalkFatWithOptions(v125, 0, 0, 1, (uint64_t)v282, 0, 0);
                      }
                      goto LABEL_207;
                    case 2:
                      uint64_t v126 = (char *)__p[1] + 24 * v122;
                      *(_OWORD *)buf[0].i8 = *(_OWORD *)v126;
                      buf[2] = *(int8x8_t *)(v126 + 16);
                      term_trie_resolve_combining(buf, Mutable, (int *)__p);
                      goto LABEL_207;
                    case 3:
                      CFArrayRef v127 = (char *)__p[1] + 24 * v122;
                      int v128 = __s;
                      goto LABEL_206;
                    case 4:
                      if ((*v254 & 2) != 0)
                      {
                        if (v297 >= 1)
                        {
                          for (uint64_t i = 0; i < v297; ++i)
                          {
                            int v132 = *(unsigned __int8 **)(v308 + 8 * i);
                            int v133 = *v132;
                            unsigned int v135 = v132[1];
                            int v134 = v132 + 1;
                            int v136 = (char *)__p[1] + 24 * v122;
                            if (utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)v135 >> 4] == v133)
                            {
                              term_trie_resolve_sub_string(*(void *)v136, (uint64_t)v134, v133, (int *)v322, Mutable, *(__n128 *)(v136 + 8));
                            }
                            else
                            {
                              long long v300 = *(_OWORD *)v136;
                              uint64_t v301 = *((void *)v136 + 2);
                              long long v320 = 0u;
                              long long v321 = 0u;
                              long long v318 = 0u;
                              long long v319 = 0u;
                              long long v316 = 0u;
                              long long v317 = 0u;
                              long long v314 = 0u;
                              long long v315 = 0u;
                              long long v312 = 0u;
                              long long v313 = 0u;
                              long long v311 = 0u;
                              memset(buf, 0, sizeof(buf));
                              _term_trie_resolve_sub_string_ignore_diacritics((int8x8_t *)&v300, v134, v133, (int *)v322, Mutable, (uint64_t)buf, 0);
                            }
                          }
                        }
                      }
                      else if (v297 >= 1)
                      {
                        for (uint64_t j = 0; j < v297; ++j)
                          term_trie_resolve_sub_string(*((void *)__p[1] + 3 * v122), *(void *)(v308 + 8 * j) + 1, **(unsigned __int8 **)(v308 + 8 * j), (int *)v322, Mutable, *(__n128 *)((char *)__p[1] + 24 * v122 + 8));
                      }
                      goto LABEL_204;
                    case 5:
                      if (v297 >= 1)
                      {
                        for (uint64_t k = 0; k < v297; ++k)
                          term_trie_resolve_sub_string(*((void *)__p[1] + 3 * v122), *(void *)(v308 + 8 * k) + 1, **(unsigned __int8 **)(v308 + 8 * k), (int *)v322, Mutable, *(__n128 *)((char *)__p[1] + 24 * v122 + 8));
                      }
LABEL_204:
                      int v128 = __s;
                      if (__s)
                      {
                        CFArrayRef v127 = (char *)__p[1] + 24 * v122;
LABEL_206:
                        int v137 = strlen(v128);
                        term_trie_resolve_sub_string(*(void *)v127, (uint64_t)v128, v137, (int *)v322, Mutable, *(__n128 *)(v127 + 8));
                      }
                      goto LABEL_207;
                    default:
                      if (v123 != 6)
                      {
                        long long v236 = __si_assert_copy_extra_329();
                        __message_assert("%s:%u: failed assertion '%s' %s ");
                        goto LABEL_407;
                      }
LABEL_207:
                      ++v122;
                      int v121 = HIDWORD(__p[0]);
                      if (v122 < SHIDWORD(__p[0])) {
                        continue;
                      }
                      a3 = v245;
LABEL_210:
                      if (v120 != 2)
                      {
                        long long v138 = *(_OWORD *)v322;
                        *(_OWORD *)unint64_t v322 = *(_OWORD *)__p;
                        *(_DWORD *)&v322[4] = 0;
                        *(_OWORD *)__p = v138;
                        int v121 = DWORD1(v138);
                      }
                      if (++v118 >= item_count || !v121)
                      {
                        if (icu_search_context_is_fuzzy()) {
                          goto LABEL_215;
                        }
                        if (v118 == item_count
                          && HIDWORD(__p[0])
                          && icu_search_context_item_get_info() != 1)
                        {
LABEL_216:
                          int v139 = *v242;
                          if ((*(_DWORD *)v254 & 0x800) == 0)
                          {
                            if (v139)
                            {
                              if (v139 == 1)
                              {
                                if (SHIDWORD(__p[0]) >= 1)
                                {
                                  uint64_t v140 = 0;
                                  uint64_t v141 = 0;
                                  do
                                  {
                                    term_trie_resolve_sub_string(*(void *)((char *)__p[1] + v140), (uint64_t)"\x01\x01", 2, (int *)v322, Mutable, *(__n128 *)((char *)__p[1] + v140 + 8));
                                    term_trie_resolve_sub_string(*(void *)((char *)__p[1] + v140), (uint64_t)"\x01\x01\x03", 3, (int *)v322, Mutable, *(__n128 *)((char *)__p[1] + v140 + 8));
                                    ++v141;
                                    v140 += 24;
                                  }
                                  while (v141 < SHIDWORD(__p[0]));
                                }
                              }
                              else if (v139 >= 7 && SHIDWORD(__p[0]) >= 1)
                              {
                                uint64_t v146 = 0;
                                uint64_t v147 = 0;
                                do
                                {
                                  term_trie_resolve_sub_string(*(void *)((char *)__p[1] + v146), (uint64_t)"\x01\x03", 2, (int *)v322, Mutable, *(__n128 *)((char *)__p[1] + v146 + 8));
                                  ++v147;
                                  v146 += 24;
                                }
                                while (v147 < SHIDWORD(__p[0]));
                              }
                            }
                            else if ((*(_DWORD *)v254 & 0x3080) == 0 && SHIDWORD(__p[0]) >= 1)
                            {
                              uint64_t v144 = 0;
                              uint64_t v145 = 0;
                              do
                              {
                                term_trie_resolve_sub_string(*(void *)((char *)__p[1] + v144), (uint64_t)"\x01\x02", 2, (int *)v322, Mutable, *(__n128 *)((char *)__p[1] + v144 + 8));
                                ++v145;
                                v144 += 24;
                              }
                              while (v145 < SHIDWORD(__p[0]));
                            }
                            goto LABEL_289;
                          }
                          if (v139)
                          {
                            if (v139 == 1)
                            {
                              if (SHIDWORD(__p[0]) >= 1)
                              {
                                uint64_t v150 = 0;
                                uint64_t v151 = 0;
                                do
                                {
                                  term_trie_resolve_sub_string(*(void *)((char *)__p[1] + v150), (uint64_t)"\x01\x04", 2, (int *)v322, Mutable, *(__n128 *)((char *)__p[1] + v150 + 8));
                                  term_trie_resolve_sub_string(*(void *)((char *)__p[1] + v150), (uint64_t)"\x01\x04\x03", 2, (int *)v322, Mutable, *(__n128 *)((char *)__p[1] + v150 + 8));
                                  ++v151;
                                  v150 += 24;
                                }
                                while (v151 < SHIDWORD(__p[0]));
                              }
                            }
                            else if (v139 == 5 && SHIDWORD(__p[0]) >= 1)
                            {
                              uint64_t v142 = 0;
                              uint64_t v143 = 0;
                              do
                              {
                                term_trie_resolve_sub_string(*(void *)((char *)__p[1] + v142), (uint64_t)"\x01\x05", 2, (int *)v322, Mutable, *(__n128 *)((char *)__p[1] + v142 + 8));
                                term_trie_resolve_sub_string(*(void *)((char *)__p[1] + v142), (uint64_t)"\x01\x05\x03", 2, (int *)v322, Mutable, *(__n128 *)((char *)__p[1] + v142 + 8));
                                ++v143;
                                v142 += 24;
                              }
                              while (v143 < SHIDWORD(__p[0]));
                            }
                          }
                          else if (SHIDWORD(__p[0]) >= 1)
                          {
                            uint64_t v148 = 0;
                            uint64_t v149 = 0;
                            do
                            {
                              term_trie_resolve_sub_string(*(void *)((char *)__p[1] + v148), (uint64_t)"\x01", 1, (int *)v322, Mutable, *(__n128 *)((char *)__p[1] + v148 + 8));
                              ++v149;
                              v148 += 24;
                            }
                            while (v149 < SHIDWORD(__p[0]));
                          }
                          do
                          {
                            long long v167 = *(_OWORD *)v322;
                            *(_OWORD *)unint64_t v322 = *(_OWORD *)__p;
                            *(_DWORD *)&v322[4] = 0;
                            *(_OWORD *)__p = v167;
LABEL_289:
                            int v168 = HIDWORD(__p[0]);
                            if (SHIDWORD(__p[0]) >= 1)
                            {
                              uint64_t v169 = 0;
                              uint64_t v170 = 0;
                              do
                              {
                                uint64_t v171 = *(void *)((unsigned char *)__p[1] + v169) & 3;
                                if (v171 == 1 || v171 == 2)
                                {
                                  uint64_t v172 = *(const void **)(*(void *)((unsigned char *)__p[1] + v169) & 0xFFFFFFFFFFFFFFFCLL);
                                  if (v172)
                                  {
                                    CFSetAddValue(Mutable, v172);
                                    int v168 = HIDWORD(__p[0]);
                                  }
                                }
                                ++v170;
                                v169 += 24;
                              }
                              while (v170 < v168);
                            }
                          }
                          while (*(_DWORD *)&v322[4]);
                        }
                        goto LABEL_286;
                      }
                      break;
                  }
                  break;
                }
              }
              long long v234 = __si_assert_copy_extra_329();
              __message_assert("%s:%u: failed assertion '%s' %s ");
LABEL_403:
              free(v234);
              if (__valid_fs(-1)) {
                uint64_t v235 = 2989;
              }
              else {
                uint64_t v235 = 3072;
              }
              *(_DWORD *)uint64_t v235 = -559038737;
              abort();
            }
            unint64_t v80 = *((unsigned __int8 *)&tcm + v35[v77]);
            if (((*(unsigned __int32 *)((char *)v78[1].i32 + ((v80 >> 3) & 0x1C)) >> v80) & 1) == 0) {
              goto LABEL_133;
            }
            uint64_t v81 = 0;
            char v82 = v78 + 1;
            unint64_t v83 = v80 >> 6;
            if ((v80 >> 6) != 1)
            {
              if (v83 != 2)
              {
                if (v83 != 3) {
                  goto LABEL_113;
                }
                uint8x8_t v84 = (uint8x8_t)vcnt_s8(v78[3]);
                v84.i16[0] = vaddlv_u8(v84);
                uint64_t v81 = v84.u32[0];
              }
              uint8x8_t v85 = (uint8x8_t)vcnt_s8(v78[2]);
              v85.i16[0] = vaddlv_u8(v85);
              v81 += v85.u32[0];
            }
            uint8x8_t v86 = (uint8x8_t)vcnt_s8(*v82);
            v86.i16[0] = vaddlv_u8(v86);
            v81 += v86.u32[0];
LABEL_113:
            uint8x8_t v87 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)&v82[v83] & ~(-1 << v80)));
            v87.i16[0] = vaddlv_u8(v87);
            uint64_t v37 = (uint64_t)v78[v87.u32[0] + 6 + v81];
            if (!v37) {
              goto LABEL_133;
            }
LABEL_116:
            if (v41 == ++v77)
            {
              LODWORD(v77) = v41;
              goto LABEL_121;
            }
          }
        }
        unint64_t v75 = v41 + 1;
        if ((v35[v41] & 0x80000000) == 0)
        {
LABEL_99:
          unint64_t v41 = v75;
          goto LABEL_102;
        }
        unint64_t v76 = v41 + 2;
        if ((v35[v75] & 0x80000000) == 0) {
          goto LABEL_101;
        }
        unint64_t v75 = v41 + 3;
        if ((v35[v76] & 0x80000000) == 0) {
          goto LABEL_99;
        }
        unint64_t v76 = v41 + 4;
        if ((v35[v75] & 0x80000000) == 0)
        {
LABEL_101:
          unint64_t v41 = v76;
          goto LABEL_102;
        }
        if ((v35[v76] & 0x80000000) == 0)
        {
          v41 += 5;
          goto LABEL_102;
        }
LABEL_412:
        long long v236 = __si_assert_copy_extra_329();
        __message_assert("%s:%u: failed assertion '%s' %s readVInt32: exceeds max size for uint32_t");
LABEL_407:
        free(v236);
        if (__valid_fs(-1)) {
          uint64_t v237 = 2989;
        }
        else {
          uint64_t v237 = 3072;
        }
        *(_DWORD *)uint64_t v237 = -559038737;
        abort();
      }
      int v64 = *((unsigned __int8 *)v35 + 2);
      if ((v35[2] & 0x80000000) == 0)
      {
        int v40 = v40 & 0x7F | (v64 << 7);
        unint64_t v41 = 3;
        goto LABEL_97;
      }
      int v66 = *((unsigned __int8 *)v35 + 3);
      if ((v35[3] & 0x80000000) == 0)
      {
        int v67 = ((v64 & 0x7F) << 7) | (v66 << 14) | v40 & 0x7F;
        unint64_t v41 = 4;
LABEL_96:
        int v40 = v67;
        goto LABEL_97;
      }
      int v74 = *((unsigned __int8 *)v35 + 4);
      if ((v35[4] & 0x80000000) == 0)
      {
        int v67 = ((v66 & 0x7F) << 14) | (v74 << 21) | ((v64 & 0x7F) << 7) | v40 & 0x7F;
        unint64_t v41 = 5;
        goto LABEL_96;
      }
      int v165 = v35[5];
      if ((v165 & 0x80000000) == 0)
      {
        int v166 = ((v74 & 0x7F) << 21) | (v165 << 28) | ((v66 & 0x7F) << 14) | ((v64 & 0x7F) << 7) | v40 & 0x7F;
        unint64_t v41 = 6;
        int v40 = v166;
        goto LABEL_97;
      }
LABEL_411:
      long long v234 = __si_assert_copy_extra_329();
      __message_assert("%s:%u: failed assertion '%s' %s readVInt32: exceeds max size for uint32_t");
      goto LABEL_403;
    }
    BOOL v48 = v36 >= 2 && v35[v36 - 1] == 42;
    if ((int)v36 - v48 < 1)
    {
LABEL_60:
      LODWORD(v50) = v36 - v48;
      goto LABEL_61;
    }
    uint64_t v50 = 0;
    while (1)
    {
      uint64_t v51 = (int8x8_t *)(v37 & 0xFFFFFFFFFFFFFFFCLL);
      int v52 = v37 & 3;
      if (v52 != 1) {
        break;
      }
      uint64_t v37 = (uint64_t)v51[*((unsigned __int8 *)&tcm + v35[v50]) + 1];
      if (!v37) {
        goto LABEL_286;
      }
LABEL_59:
      if (v36 - v48 == ++v50) {
        goto LABEL_60;
      }
    }
    if (v52 == 2)
    {
      unint64_t v53 = *((unsigned __int8 *)&tcm + v35[v50]);
      if (((*(unsigned __int32 *)((char *)v51[1].i32 + ((v53 >> 3) & 0x1C)) >> v53) & 1) == 0) {
        goto LABEL_286;
      }
      uint64_t v54 = 0;
      long long v55 = v51 + 1;
      unint64_t v56 = v53 >> 6;
      if ((v53 >> 6) == 1) {
        goto LABEL_55;
      }
      if (v56 == 2) {
        goto LABEL_54;
      }
      if (v56 == 3)
      {
        uint8x8_t v57 = (uint8x8_t)vcnt_s8(v51[3]);
        v57.i16[0] = vaddlv_u8(v57);
        uint64_t v54 = v57.u32[0];
LABEL_54:
        uint8x8_t v58 = (uint8x8_t)vcnt_s8(v51[2]);
        v58.i16[0] = vaddlv_u8(v58);
        v54 += v58.u32[0];
LABEL_55:
        uint8x8_t v59 = (uint8x8_t)vcnt_s8(*v55);
        v59.i16[0] = vaddlv_u8(v59);
        v54 += v59.u32[0];
      }
      uint8x8_t v60 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)&v55[v56] & ~(-1 << v53)));
      v60.i16[0] = vaddlv_u8(v60);
      uint64_t v37 = (uint64_t)v51[v60.u32[0] + 6 + v54];
      if (!v37) {
        goto LABEL_286;
      }
      goto LABEL_59;
    }
    if (v52 != 3) {
      goto LABEL_286;
    }
    v37 |= 3uLL;
LABEL_61:
    v298[0] = MEMORY[0x1E4F143A8];
    v298[1] = 0x40000000;
    v298[2] = __termUpdateSetResolveQueryInfo_block_invoke;
    v298[3] = &__block_descriptor_tmp_31_11215;
    v298[4] = Mutable;
    int v61 = v37 & 3;
    if (v61 == 3)
    {
      uint64_t v62 = (const void *)(v37 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v37 & 0xFFFFFFFFFFFFFFFCLL) == 0) {
        goto LABEL_286;
      }
      goto LABEL_282;
    }
    if (v50 != v36 - v48) {
      goto LABEL_286;
    }
    if (v61 != 1)
    {
      if (v61 == 2 && v48) {
        _TermTrieWalkCompactWithOptions(v37 & 0xFFFFFFFFFFFFFFFCLL, 0, 0, 1, 0, (uint64_t)v298, 0);
      }
      goto LABEL_286;
    }
    int v68 = (const void **)(v37 & 0xFFFFFFFFFFFFFFFCLL);
    if (v48)
    {
      _TermTrieWalkFatWithOptions((uint64_t)v68, 0, 0, 1, 0, (uint64_t)v298, 0);
      goto LABEL_286;
    }
    uint64_t v62 = *v68;
    if (*v68) {
LABEL_282:
    }
      CFSetAddValue(Mutable, v62);
LABEL_286:
    uint64_t v32 = v249 + 1;
  }
  while (v249 + 1 != count);
LABEL_298:
  uint64_t v278 = 0;
  long long context = resolveQueryInfoCallback;
  float v279 = v299;
  uint64_t v280 = Mutable;
  char v173 = (void (__cdecl *)(const void *, void *))flat_levels_cf_set_applier1;
  if (v240)
  {
    LODWORD(v278) = v240 - *(_DWORD *)(a1 + 8);
    char v173 = (void (__cdecl *)(const void *, void *))flat_levels_cf_set_applier2;
  }
  a4 = v243;
  a2 = v239;
  CFSetApplyFunction(Mutable, v173, &context);
  CFRelease(Mutable);
  free(__p[1]);
  free(*(void **)&v322[8]);
  if (v243)
  {
LABEL_301:
    if (a2)
    {
      uint64_t v174 = 0;
      char v258 = (void *)(a1 + 48);
      do
      {
        uint64_t v175 = *(void *)(a4 + 8 * v174);
        uint64_t v176 = &a3[8 * v174];
        int v177 = *((_DWORD *)v176 + 4);
        if ((v177 & 0x600) != 0)
        {
          int v178 = *((_DWORD *)v176 + 5);
          uint64_t v179 = (uint64_t)*v176;
          v267[0] = MEMORY[0x1E4F143A8];
          v267[1] = 0x40000000;
          char v268 = __termUpdateSetResolveQueryInfo_block_invoke_3_49;
          uint64_t v269 = &__block_descriptor_tmp_51_11233;
          uint64_t v270 = v175;
          long long v273 = *(_OWORD *)&v299[32];
          long long v274 = *(_OWORD *)&v299[48];
          long long v275 = *(_OWORD *)&v299[64];
          uint64_t v276 = *(void *)&v299[80];
          long long v271 = *(_OWORD *)v299;
          long long v272 = *(_OWORD *)&v299[16];
          if (v178)
          {
            uint64_t v180 = *(void *)(v179 + 8 * (v178 - 1));
            CFMutableSetRef v181 = v258;
            if (v180 == *v258 || v180 == 2) {
              --v178;
            }
            unsigned int v183 = v178 - 1;
          }
          else
          {
            unsigned int v183 = -1;
            CFMutableSetRef v181 = v258;
          }
          uint64_t Directory_352 = getDirectory_352(v181, v183, v179, 0);
          if (Directory_352)
          {
            if ((v177 & 0x400) != 0)
            {
              if (*(_DWORD *)(Directory_352 + 24)) {
                v268((uint64_t)v267, Directory_352 + 16);
              }
            }
            else
            {
              getAllPostings(Directory_352, (uint64_t)v267);
            }
          }
        }
        else if ((v177 & 0x10) != 0)
        {
          *(void *)&long long v300 = 0;
          *((void *)&v300 + 1) = &v300;
          uint64_t v301 = 0x2000000000;
          uint64_t v302 = 0;
          uint64_t v184 = 0;
          if (_os_feature_enabled_impl()) {
            uint64_t v184 = *(void *)(v244 + 80);
          }
          long long v185 = (float *)&a3[8 * v174];
          unsigned int v186 = *((_DWORD *)v185 + 15);
          unsigned int v187 = *((_DWORD *)v185 + 5);
          if (v186 >> 25)
          {
            unsigned int v259 = v186 >> 25;
          }
          else
          {
            if (current_vector_version::onceToken != -1) {
              dispatch_once(&current_vector_version::onceToken, &__block_literal_global_6663);
            }
            unsigned int v259 = (unsigned __int16)current_vector_version::vecVersion;
            unsigned int v186 = *((_DWORD *)v185 + 15);
          }
          uint64_t v189 = (uint64_t)*v176;
          float v190 = v185[14];
          v260[0] = MEMORY[0x1E4F143A8];
          v260[1] = 0x40000000;
          v260[2] = __termUpdateSetResolveQueryInfo_block_invoke_4;
          v260[3] = &unk_1E6347F98;
          long long v263 = *(_OWORD *)&v299[32];
          long long v264 = *(_OWORD *)&v299[48];
          long long v265 = *(_OWORD *)&v299[64];
          uint64_t v266 = *(void *)&v299[80];
          long long v261 = *(_OWORD *)v299;
          long long v262 = *(_OWORD *)&v299[16];
          v260[4] = &v300;
          v260[5] = v175;
          pthread_key_t v191 = __THREAD_SLOT_KEY;
          if (!__THREAD_SLOT_KEY)
          {
            makeThreadId();
            pthread_key_t v191 = __THREAD_SLOT_KEY;
          }
          unint64_t v192 = (unint64_t)pthread_getspecific(v191);
          if (!v192 || v192 >= 0x801)
          {
            makeThreadId();
            unint64_t v192 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
          }
          int v193 = 0;
          uint64_t v253 = v189;
          if (v192)
          {
            uint64_t v194 = v259;
            if (v192 <= 0x800)
            {
              uint64_t v195 = &threadData[18 * v192];
              int v193 = *(v195 - 11);
              *(v195 - 11) = 1;
            }
          }
          else
          {
            uint64_t v194 = v259;
          }
          uint64_t v196 = v186 & 3;
          uint64_t v197 = (v186 >> 2) & 3;
          int v309 = 0;
          uint64_t v308 = 0;
          IVFVectorIndexUpdateSet::getVectorIndex(&v308, v184, v187, v194, v186 & 3, (v186 >> 2) & 3, 0);
          uint64_t v198 = v308;
          unsigned int v257 = v187;
          int v251 = v193;
          unsigned int v252 = v186;
          if (v308)
          {
            int v199 = *__error();
            uint64_t v200 = _SILogForLogForCategory(16);
            if (os_log_type_enabled(v200, OS_LOG_TYPE_DEFAULT))
            {
              char v323 = 3;
              strcpy((char *)v322, "<U>");
              (*(void (**)(void **__return_ptr, uint64_t, uint8_t *))(*(void *)v198 + 312))(__p, v198, v322);
              long long v201 = __p;
              if (v307 < 0) {
                long long v201 = (void **)__p[0];
              }
              *(_DWORD *)uint64_t v324 = 134218242;
              *(void *)&v324[4] = v184;
              *(_WORD *)&v324[12] = 2080;
              *(void *)&v324[14] = v201;
              _os_log_impl(&dword_1BD672000, v200, OS_LOG_TYPE_DEFAULT, "aNN search on <UpdateSet> %p %s", v324, 0x16u);
              if (v307 < 0) {
                operator delete(__p[0]);
              }
              if (v323 < 0) {
                operator delete(*(void **)v322);
              }
            }
            *__error() = v199;
            uint64_t v202 = (char *)operator new(8uLL);
            *(void *)uint64_t v202 = v198;
            uint64_t v203 = v202 + 8;
            unsigned int v187 = v257;
          }
          else
          {
            uint64_t v203 = 0;
            uint64_t v202 = 0;
          }
          unint64_t v305 = 0;
          __s = 0;
          uint64_t v204 = v184;
          IVFVectorIndexUpdateSet::getVectorIndex(&__s, v184, v187, v259, v196, v197, 1u);
          if (__s)
          {
            uint64_t v255 = __s;
            int v205 = *__error();
            uint64_t v206 = _SILogForLogForCategory(16);
            if (os_log_type_enabled(v206, OS_LOG_TYPE_DEFAULT))
            {
              char v323 = 3;
              strcpy((char *)v322, "<U>");
              (*(void (**)(void **__return_ptr))(*(void *)v255 + 312))(__p);
              uint64_t v207 = __p;
              if (v307 < 0) {
                uint64_t v207 = (void **)__p[0];
              }
              *(_DWORD *)uint64_t v324 = 134218242;
              *(void *)&v324[4] = v204;
              *(_WORD *)&v324[12] = 2080;
              *(void *)&v324[14] = v207;
              _os_log_impl(&dword_1BD672000, v206, OS_LOG_TYPE_DEFAULT, "aNN search on <UpdateSet> %p %s", v324, 0x16u);
              if (v307 < 0) {
                operator delete(__p[0]);
              }
              if (v323 < 0) {
                operator delete(*(void **)v322);
              }
            }
            *__error() = v205;
            uint64_t v208 = v203 - v202;
            uint64_t v209 = (v203 - v202) >> 3;
            unint64_t v210 = v209 + 1;
            if ((unint64_t)(v209 + 1) >> 61) {
              abort();
            }
            if (v208 >> 2 > v210) {
              unint64_t v210 = v208 >> 2;
            }
            if ((unint64_t)v208 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v210 = 0x1FFFFFFFFFFFFFFFLL;
            }
            if (v210)
            {
              if (v210 >> 61) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              __int16 v211 = (char *)operator new(8 * v210);
              uint64_t v212 = v203;
            }
            else
            {
              uint64_t v212 = v203;
              __int16 v211 = 0;
            }
            uint64_t v215 = (char **)&v211[8 * v209];
            *uint64_t v215 = v255;
            long long v213 = (char *)(v215 + 1);
            if (v212 == v202)
            {
              long long v214 = v215;
              if (v212) {
LABEL_363:
              }
                operator delete(v212);
            }
            else
            {
              unint64_t v216 = (v212 - v202 - 8) & 0xFFFFFFFFFFFFFFF8;
              long long v214 = (char **)&v211[v208 - v216 - 8];
              memcpy(v214, &v212[-v216 - 8], v216 + 8);
              uint64_t v212 = v202;
              if (v202) {
                goto LABEL_363;
              }
            }
          }
          else
          {
            long long v213 = v203;
            long long v214 = (char **)v202;
          }
          CFRange v256 = v214;
          if (v213 == (char *)v214)
          {
            int v225 = *__error();
            uint64_t v226 = _SILogForLogForCategory(16);
            os_log_type_t v227 = dword_1E9FC90E4 < 3;
            a4 = v243;
            if (os_log_type_enabled(v226, (os_log_type_t)(dword_1E9FC90E4 < 3)))
            {
              IVFIndexName((uint64_t)__p, v257, v259, v196, v197);
              long long v228 = __p;
              if (v307 < 0) {
                long long v228 = (void **)__p[0];
              }
              *(_DWORD *)unint64_t v322 = 134218242;
              *(void *)&v322[4] = v204;
              *(_WORD *)&v322[12] = 2080;
              *(void *)&v322[14] = v228;
              _os_log_impl(&dword_1BD672000, v226, v227, "*warn* aNN search on <UpdateSet> %p %s not found", v322, 0x16u);
              if (v307 < 0) {
                operator delete(__p[0]);
              }
            }
            *__error() = v225;
          }
          else
          {
            uint64_t v250 = v213;
            unint64_t v217 = (v213 - (char *)v214) >> 3;
            uint64_t v218 = (*(uint64_t (**)(char *, void))(*(void *)*v214 + 240))(*v214, (v252 >> 4) & 0xFFFFF);
            uint64_t v219 = v214;
            uint64_t v220 = v218;
            if (v217 <= 1) {
              uint64_t v221 = 1;
            }
            else {
              uint64_t v221 = v217;
            }
            uint64_t v222 = (uint64_t *)v219;
            do
            {
              uint64_t v223 = *v222++;
              (*(void (**)(uint64_t, void, void, uint64_t, uint64_t, uint64_t, void, uint64_t, float))(*(void *)v223 + 248))(v223, v257, v259, v253, v196, v197, HIBYTE(v252) & 1, v220, v190);
              --v221;
            }
            while (v221);
            uint64_t v224 = *((void *)v250 - 1);
            buf[0] = (int8x8_t)MEMORY[0x1E4F143A8];
            buf[1] = (int8x8_t)0x40000000;
            buf[2] = (int8x8_t)___ZNK23IVFVectorIndexUpdateSet3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPN18vi_memory_postings12storage_formEfE_block_invoke;
            buf[3] = (int8x8_t)&unk_1E6344CC8;
            uint8_t buf[4] = (int8x8_t)v260;
            (*(void (**)(void))(*(void *)v224 + 256))();
            a4 = v243;
          }
          uint64_t v229 = v305;
          a3 = v245;
          if (v305 && !atomic_fetch_add(&v305->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
            std::__shared_weak_count::__release_weak(v229);
          }
          uint64_t v230 = v309;
          if (v309 && !atomic_fetch_add(&v309->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
            std::__shared_weak_count::__release_weak(v230);
          }
          if (v256) {
            operator delete(v256);
          }
          pthread_key_t v231 = __THREAD_SLOT_KEY;
          if (!__THREAD_SLOT_KEY)
          {
            makeThreadId();
            pthread_key_t v231 = __THREAD_SLOT_KEY;
          }
          unint64_t v232 = (unint64_t)pthread_getspecific(v231);
          if (v232 && v232 < 0x801
            || (makeThreadId(), (unint64_t v232 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY)) != 0))
          {
            if (v232 <= 0x800) {
              threadData[18 * v232 - 11] = v251;
            }
          }
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            int8x8_t v233 = *(int8x8_t *)(*((void *)&v300 + 1) + 24);
            buf[0].i32[0] = 134217984;
            *(int8x8_t *)((char *)buf + 4) = v233;
            _os_log_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "update set ANN found %zu", (uint8_t *)buf, 0xCu);
          }
          _Block_object_dispose(&v300, 8);
        }
        ++v174;
      }
      while (v174 != count);
    }
  }
LABEL_401:
  CIOnThreadCleanUpPop(v14);
  CICleanUpReset(v14, v241);
  return 0;
}

uint64_t db2_delete_obj_with_flags(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(a1 + 804) & 8) != 0) {
    return 13;
  }
  pthread_key_t v6 = __THREAD_SLOT_KEY;
  if (!__THREAD_SLOT_KEY)
  {
    makeThreadId();
    pthread_key_t v6 = __THREAD_SLOT_KEY;
  }
  CFStringRef v7 = (char *)pthread_getspecific(v6);
  HIDWORD(v9) = qos_class_self() - 9;
  LODWORD(v9) = HIDWORD(v9);
  unsigned int v8 = v9 >> 2;
  if (v8 > 6) {
    signed int v10 = 0;
  }
  else {
    signed int v10 = dword_1BDA87810[v8];
  }
  int v12 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  if (*(void *)(a1 + 768) || *(_DWORD *)(a1 + 780) || *(unsigned char *)(a1 + 796)) {
    goto LABEL_11;
  }
  if (v10 <= 5)
  {
    if (*(void *)(a1 + 16 * v10 + 648))
    {
LABEL_11:
      db_rwlock_wait(a1 + 584, v10, 2);
      goto LABEL_12;
    }
    uint64_t v55 = v10 - 1;
    unint64_t v56 = (uint64_t *)(a1 + 16 * v10 + 664);
    while (v55 != 4)
    {
      uint64_t v57 = *v56;
      v56 += 2;
      ++v55;
      if (v57)
      {
        if (v55 <= 4) {
          goto LABEL_11;
        }
        break;
      }
    }
  }
  *(void *)(a1 + 768) = pthread_self();
LABEL_12:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  if (v12)
  {
    int v88 = *__error();
    int v89 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 136315650;
      *(void *)&uint8_t buf[4] = "db2_delete_obj_with_flags";
      *(_WORD *)&uint8_t buf[12] = 1024;
      *(_DWORD *)&buf[14] = 11786;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v12;
      _os_log_error_impl(&dword_1BD672000, v89, OS_LOG_TYPE_ERROR, "%s:%d: Lock failed with error %d", buf, 0x18u);
    }
    *__error() = v88;
    sdb2_die(a1, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 11786);
  }
  uint64_t v13 = (uint64_t)(v7 - 1);
  if (v7) {
    unint64_t v14 = CIOnThreadCleanUpPush((uint64_t)(v7 - 1), (uint64_t)db_write_unlock, a1 + 584);
  }
  else {
    unint64_t v14 = -1;
  }
  unint64_t v15 = *(void *)a2;
  if (*(_DWORD *)(a1 + 804)) {
    unsigned int v16 = (*(_DWORD *)(a2 + 40) >> 5) & 1;
  }
  else {
    unsigned int v16 = 0;
  }
  uint64_t v17 = *(void **)(a1 + 992);
  int8x8_t v18 = (int8x8_t)v17[1];
  if (!*(void *)&v18) {
    goto LABEL_35;
  }
  uint8x8_t v19 = (uint8x8_t)vcnt_s8(v18);
  v19.i16[0] = vaddlv_u8(v19);
  if (v19.u32[0] > 1uLL)
  {
    unint64_t v20 = *(void *)a2;
    if (v15 >= *(void *)&v18) {
      unint64_t v20 = v15 % *(void *)&v18;
    }
  }
  else
  {
    unint64_t v20 = (*(void *)&v18 - 1) & v15;
  }
  uint64_t v21 = *(uint64_t ***)(*v17 + 8 * v20);
  if (!v21 || (unsigned int v22 = *v21) == 0)
  {
LABEL_35:
    if ((a3 & 1) == 0) {
      goto LABEL_36;
    }
LABEL_98:
    uint64_t v58 = *(void *)(a1 + 856);
    uint64_t v59 = *(unsigned int *)(v58 + 8);
    if (!v59)
    {
      uint64_t v11 = 2;
      goto LABEL_129;
    }
    uint64_t v60 = *(int *)(v58 + 16);
    char v90 = v7;
    if ((int)v60 < (int)v59)
    {
      uint64_t v61 = v58 + 16 * v60;
      if (*(void *)(v61 + 20) == v15)
      {
        unsigned int v62 = *(_DWORD *)(v61 + 32);
        if (v16 == v62 >> 28)
        {
          int v63 = v7 - 1;
          unint64_t v64 = v14;
LABEL_124:
          uint64_t v75 = v58 + 16 * v60;
          uint64_t v76 = *(unsigned int *)(v75 + 28);
          uint64_t v11 = _page_delete_obj_by_oid_and_type(a1, v15, v16, *(_DWORD *)(v75 + 28), v62 & 0xFFFFFFF, 0);
          if ((v11 & 0xFFFFFFFD) != 0)
          {
            int v77 = *__error();
            uint64_t v78 = _SILogForLogForCategory(7);
            if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t buf = 136316674;
              *(void *)&uint8_t buf[4] = "db2_delete_obj_with_flags";
              *(_WORD *)&uint8_t buf[12] = 1024;
              *(_DWORD *)&buf[14] = 11804;
              *(_WORD *)&unsigned char buf[18] = 2048;
              *(void *)&buf[20] = v15;
              *(_WORD *)&buf[28] = 2048;
              *(void *)&buf[30] = v15;
              *(_WORD *)&buf[38] = 2048;
              uint64_t v99 = (void *)v16;
              LOWORD(v100) = 2048;
              *(void *)((char *)&v100 + 2) = v76;
              WORD5(v100) = 1024;
              HIDWORD(v100) = v11;
              _os_log_error_impl(&dword_1BD672000, v78, OS_LOG_TYPE_ERROR, "%s:%d: Failed delete, oid:0x%llx(%lld), type:%ld, pgnum:%ld, rc:%d", buf, 0x40u);
            }
            *__error() = v77;
          }
          unint64_t v14 = v64;
          uint64_t v13 = (uint64_t)v63;
          CFStringRef v7 = v90;
          goto LABEL_129;
        }
      }
    }
    uint64_t v65 = (int)v59;
    if ((int)v59 < 1)
    {
      int v63 = v7 - 1;
      LODWORD(v68) = 0;
LABEL_119:
      BOOL v72 = 0;
LABEL_120:
      unint64_t v64 = v14;
      BOOL v73 = v65 - 1 > (int)v68 && v72;
      int v74 = v68 + v73;
      uint64_t v60 = (int)v68 + v73;
      *(_DWORD *)(v58 + 16) = v74;
      unsigned int v62 = *(_DWORD *)(v58 + 16 * v74 + 32);
      goto LABEL_124;
    }
    int v66 = 0;
    while (1)
    {
      if ((int)v59 + v66 < 0 != __OFADD__(v59, v66)) {
        int v67 = v59 + v66 + 1;
      }
      else {
        int v67 = v59 + v66;
      }
      uint64_t v68 = (v67 >> 1);
      signed int v69 = v16 - (*(_DWORD *)(v58 + 16 * (int)v68 + 32) >> 28);
      if (v69)
      {
        int64_t v70 = v69;
        uint64_t v71 = v68;
        if (v70 < 0) {
          goto LABEL_105;
        }
      }
      else
      {
        int64_t v70 = v15 - *(void *)(v58 + 16 * ((uint64_t)v67 >> 1) + 20);
        uint64_t v71 = v68;
        if (v70 < 0) {
          goto LABEL_105;
        }
      }
      if (!v70)
      {
        int v63 = v7 - 1;
        goto LABEL_119;
      }
      int v66 = v68 + 1;
      uint64_t v71 = v59;
LABEL_105:
      uint64_t v59 = v71;
      if (v66 >= (int)v71)
      {
        int v63 = v7 - 1;
        BOOL v72 = v70 > 0;
        goto LABEL_120;
      }
    }
  }
  int v23 = *(_DWORD *)(a1 + 804) & 1;
  while (1)
  {
    unint64_t v24 = v22[1];
    if (v24 == v15) {
      break;
    }
    if (v19.u32[0] > 1uLL)
    {
      if (v24 >= *(void *)&v18) {
        v24 %= *(void *)&v18;
      }
    }
    else
    {
      v24 &= *(void *)&v18 - 1;
    }
    if (v24 != v20) {
      goto LABEL_35;
    }
LABEL_28:
    unsigned int v22 = (uint64_t *)*v22;
    if (!v22) {
      goto LABEL_35;
    }
  }
  if (v22[2] != v15) {
    goto LABEL_28;
  }
  int v53 = *((_DWORD *)v22 + 6);
  if (a3)
  {
    if (v53 && v53 != 3)
    {
      if (v23) {
        int v87 = (*(_DWORD *)(a2 + 40) >> 5) & 1;
      }
      else {
        int v87 = 0;
      }
      uint64_t v11 = db_updateset_delete_object(v17, *(void *)a2, v87);
      goto LABEL_129;
    }
    goto LABEL_98;
  }
  if (v53 != 3 && v53 != 0) {
    goto LABEL_65;
  }
LABEL_36:
  uint64_t v25 = *(void *)(a1 + 856);
  uint64_t v26 = *(unsigned int *)(v25 + 8);
  if (!v26)
  {
    int v37 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
    *(_DWORD *)(a1 + 788) = 0;
    uint64_t v38 = *(pthread_override_s **)(a1 + 760);
    *(void *)(a1 + 768) = 0;
    *(void *)(a1 + 760) = 0;
    char v39 = *(_DWORD *)(a1 + 780) != 0;
    *(unsigned char *)(a1 + 796) = 0;
    db_rwlock_wakeup(a1 + 584, v39, 0);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
    if (v38) {
      pthread_override_qos_class_end_np(v38);
    }
    if (v37) {
      sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 11821);
    }
LABEL_70:
    uint64_t v11 = 2;
    if (!v7) {
      return v11;
    }
    goto LABEL_133;
  }
  uint64_t v27 = *(int *)(v25 + 16);
  if ((int)v27 >= (int)v26
    || (uint64_t v28 = v25 + 16 * v27, *(void *)(v28 + 20) != v15)
    || (unsigned int v29 = *(_DWORD *)(v28 + 32), v16 != v29 >> 28))
  {
    uint64_t v30 = (int)v26;
    if ((int)v26 >= 1)
    {
      int v31 = 0;
      while (1)
      {
        if ((int)v26 + v31 < 0 != __OFADD__(v26, v31)) {
          int v32 = v26 + v31 + 1;
        }
        else {
          int v32 = v26 + v31;
        }
        uint64_t v33 = (v32 >> 1);
        signed int v34 = v16 - (*(_DWORD *)(v25 + 16 * (int)v33 + 32) >> 28);
        if (v34)
        {
          int64_t v35 = v34;
          uint64_t v36 = v33;
          if ((v35 & 0x8000000000000000) == 0)
          {
LABEL_50:
            if (!v35) {
              goto LABEL_58;
            }
            int v31 = v33 + 1;
            uint64_t v36 = v26;
          }
        }
        else
        {
          int64_t v35 = v15 - *(void *)(v25 + 16 * ((uint64_t)v32 >> 1) + 20);
          uint64_t v36 = v33;
          if ((v35 & 0x8000000000000000) == 0) {
            goto LABEL_50;
          }
        }
        uint64_t v26 = v36;
        if (v31 >= (int)v36)
        {
          BOOL v40 = v35 > 0;
          goto LABEL_59;
        }
      }
    }
    LODWORD(v33) = 0;
LABEL_58:
    BOOL v40 = 0;
LABEL_59:
    BOOL v41 = v30 - 1 > (int)v33 && v40;
    int v42 = v33 + v41;
    uint64_t v27 = (int)v33 + v41;
    *(_DWORD *)(v25 + 16) = v42;
    unsigned int v29 = *(_DWORD *)(v25 + 16 * v42 + 32);
  }
  if (!_page_obj_exists_by_oid_and_type(a1, v15, v16, *(_DWORD *)(v25 + 16 * v27 + 28), v29 & 0xFFFFFFF))
  {
    int v44 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
    *(_DWORD *)(a1 + 788) = 0;
    int v45 = *(pthread_override_s **)(a1 + 760);
    *(void *)(a1 + 768) = 0;
    *(void *)(a1 + 760) = 0;
    char v46 = *(_DWORD *)(a1 + 780) != 0;
    *(unsigned char *)(a1 + 796) = 0;
    db_rwlock_wakeup(a1 + 584, v46, 0);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
    if (v45) {
      pthread_override_qos_class_end_np(v45);
    }
    if (v44) {
      sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 11816);
    }
    goto LABEL_70;
  }
  uint64_t v17 = *(void **)(a1 + 992);
  unint64_t v15 = *(void *)a2;
  int v23 = *(_DWORD *)(a1 + 804) & 1;
LABEL_65:
  if (v23) {
    int v43 = (*(_DWORD *)(a2 + 40) >> 5) & 1;
  }
  else {
    int v43 = 0;
  }
  if (db_updateset_delete_object(v17, v15, v43))
  {
    int v47 = *__error();
    BOOL v48 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 136315394;
      *(void *)&uint8_t buf[4] = "db2_delete_obj_with_flags";
      *(_WORD *)&uint8_t buf[12] = 1024;
      *(_DWORD *)&buf[14] = 11837;
      _os_log_error_impl(&dword_1BD672000, v48, OS_LOG_TYPE_ERROR, "%s:%d: Delete failed", buf, 0x12u);
    }
    *__error() = v47;
    uint64_t v11 = 22;
  }
  else
  {
    int v49 = *(void **)(a1 + 992);
    if ((unint64_t)(v49[7] + 16 * v49[6]) < 0x80000) {
      goto LABEL_95;
    }
    v96[0] = 0;
    v96[1] = v96;
    int v97 = 0;
    v96[2] = 0x2000000000;
    v94[0] = 0;
    v94[1] = v94;
    int v95 = 0;
    v94[2] = 0x2000000000;
    v92[0] = 0;
    v92[1] = v92;
    int v93 = 0;
    v92[2] = 0x2000000000;
    *(void *)uint64_t buf = MEMORY[0x1E4F143A8];
    *(void *)&uint8_t buf[8] = 0x40000000;
    *(void *)&uint8_t buf[16] = __flush_updateset_locked_block_invoke;
    *(void *)&unsigned char buf[24] = &unk_1E63483C8;
    uint64_t v101 = 2;
    *(void *)&unsigned char buf[32] = v96;
    uint64_t v99 = v92;
    *(void *)&long long v100 = v94;
    *((void *)&v100 + 1) = a1;
    v91[0] = MEMORY[0x1E4F143A8];
    v91[1] = 0x40000000;
    v91[2] = __flush_updateset_locked_block_invoke_144;
    v91[3] = &unk_1E63483F0;
    v91[4] = v96;
    v91[5] = v92;
    _OWORD v91[6] = v94;
    v91[7] = a1;
    v91[8] = 2;
    int v50 = db_updateset_iterate(v49, (uint64_t)buf, (uint64_t)v91);
    _Block_object_dispose(v92, 8);
    _Block_object_dispose(v94, 8);
    _Block_object_dispose(v96, 8);
    if (v50)
    {
      int v51 = *__error();
      int v52 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 136315650;
        *(void *)&uint8_t buf[4] = "db2_delete_obj_with_flags";
        *(_WORD *)&uint8_t buf[12] = 1024;
        *(_DWORD *)&buf[14] = 11831;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v50;
        _os_log_error_impl(&dword_1BD672000, v52, OS_LOG_TYPE_ERROR, "%s:%d: Error %d from flush_updateset_locked", buf, 0x18u);
      }
      uint64_t v11 = 0;
      *__error() = v51;
    }
    else
    {
LABEL_95:
      uint64_t v11 = 0;
    }
  }
LABEL_129:
  int v79 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  *(_DWORD *)(a1 + 788) = 0;
  unint64_t v80 = *(pthread_override_s **)(a1 + 760);
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 760) = 0;
  char v81 = *(_DWORD *)(a1 + 780) != 0;
  *(unsigned char *)(a1 + 796) = 0;
  db_rwlock_wakeup(a1 + 584, v81, 0);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  if (v80) {
    pthread_override_qos_class_end_np(v80);
  }
  if (v79) {
    sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 11840);
  }
  if (v7)
  {
LABEL_133:
    CIOnThreadCleanUpClearItem(v13, v14);
    char v82 = &threadData[18 * v13];
    int v85 = v82[14];
    unint64_t v83 = v82 + 14;
    int v84 = v85;
    if (v14 + 1 == v85) {
      *unint64_t v83 = v84 - 1;
    }
  }
  return v11;
}