uint64_t _page_alloc_fetch(uint64_t a1, int8x16_t **a2, int a3, unsigned int *a4, signed int *a5, unsigned int a6)
{
  signed int v9;
  uint64_t v12;
  off_t v13;
  int v14;
  NSObject *v15;
  os_log_type_t v16;
  int8x16_t *v17;
  int8x16_t *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  int v28;
  NSObject *v29;
  int v30;
  NSObject *v31;
  uint64_t v32;
  unsigned char v34[18];
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  signed int v38;
  __int16 v39;
  off_t v40;
  __int16 v41;
  int v42;
  uint64_t v43;

  v9 = a3;
  v43 = *MEMORY[0x1E4F143B8];
  if (a3 <= 4095) {
    v9 = *(_DWORD *)(a1 + 44);
  }
  v12 = fd_lseek(*(_DWORD **)(a1 + 848), 0, 2);
  if (v12 == -1) {
    return *__error();
  }
  v13 = v12;
  if ((v12 & 0xFFF) != 0)
  {
    v14 = *__error();
    v15 = _SILogForLogForCategory(7);
    v16 = dword_1E9FC90C0 < 3;
    if (os_log_type_enabled(v15, (os_log_type_t)(dword_1E9FC90C0 < 3)))
    {
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_1BD672000, v15, v16, "*warn* sdb not page-size aligned. Extending.", v34, 2u);
    }
    *__error() = v14;
    v13 = (v13 & 0xFFFFFFFFFFFFF000) + 4096;
    fd_truncate(*(void *)(a1 + 848), v13);
  }
  v17 = (int8x16_t *)malloc_type_calloc(v9, 1uLL, 0x632AE6DDuLL);
  if (!v17)
  {
    *__error() = 12;
    return *__error();
  }
  v18 = v17;
  v17->i32[0] = 1684172850;
  v17->i32[1] = v9;
  v17->i32[2] = 20;
  v17->i32[3] = a6 | 1;
  if ((a6 & 4) != 0) {
    v17[1].i32[0] = v9;
  }
  _add_dirty_chunk(a1, v13 >> *(_DWORD *)(a1 + 12), v9, (a6 >> 14) & 1);
  if ((*(unsigned char *)(a1 + 4) & 0x80) != 0)
  {
    *v18 = vrev32q_s8(*v18);
    v18[1].i32[0] = bswap32(v18[1].u32[0]);
  }
  v19 = sdb_pwrite(*(void *)(a1 + 848), (uint64_t)v18, v9, v13);
  if (v19 != v9)
  {
    v20 = *__error();
    if ((*(unsigned char *)(a1 + 4) & 0x80) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  v20 = 0;
  if ((*(unsigned char *)(a1 + 4) & 0x80) != 0)
  {
LABEL_19:
    *v18 = vrev32q_s8(*v18);
    v18[1].i32[0] = bswap32(v18[1].u32[0]);
  }
LABEL_20:
  if (v19 == v9)
  {
    *a4 = v13 >> *(_DWORD *)(a1 + 12);
    *a5 = v9;
    v22 = *(void *)(a1 + 928);
    v23 = *a4;
    *(void *)v34 = 0;
    *(void *)&v34[8] = 0;
    v24 = atomic_load((unsigned int *)(v22 + 248));
    if (v24 > v23)
    {
      *(void *)&v34[8] = 0;
      *(void *)v34 = *(void *)v22;
      *(_DWORD *)&v34[8] = v23;
      _cache_remove((uint64_t *)v34);
    }
    v25 = *(unsigned int *)(v22 + 220);
    if ((int)v25 >= 1)
    {
      v26 = 0;
      v27 = (_DWORD *)(v22 + 252);
      while (*v27 != v23)
      {
        ++v26;
        ++v27;
        if (v25 == v26) {
          goto LABEL_37;
        }
      }
      v32 = v22 + 48 * v26;
      free(*(void **)(v32 + 280));
      free(*(void **)(v32 + 272));
      *(_OWORD *)(v32 + 288) = 0u;
      *(_OWORD *)(v32 + 304) = 0u;
      *(_OWORD *)(v32 + 272) = 0u;
      *v27 = 0;
    }
LABEL_37:
    v21 = 0;
    *a2 = v18;
  }
  else
  {
    *(_DWORD *)(a1 + 4) |= 2u;
    v28 = *__error();
    v29 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v34 = 136315394;
      *(void *)&v34[4] = "_page_alloc_fetch";
      *(_WORD *)&v34[12] = 1024;
      *(_DWORD *)&v34[14] = 2131;
      _os_log_error_impl(&dword_1BD672000, v29, OS_LOG_TYPE_ERROR, "%s:%d: Failed allocating page", v34, 0x12u);
    }
    *__error() = v28;
    *a4 = -1;
    free(v18);
    if (v20) {
      v21 = v20;
    }
    else {
      v21 = 22;
    }
    *(_DWORD *)(a1 + 800) = v21;
    v30 = *__error();
    v31 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v34 = 136316418;
      *(void *)&v34[4] = "_page_alloc_fetch";
      *(_WORD *)&v34[12] = 1024;
      *(_DWORD *)&v34[14] = 2139;
      v35 = 2080;
      v36 = a1 + 324;
      v37 = 1024;
      v38 = v9;
      v39 = 2048;
      v40 = v13;
      v41 = 1024;
      v42 = v21;
      _os_log_error_impl(&dword_1BD672000, v31, OS_LOG_TYPE_ERROR, "%s:%d: pwrite(%s, %d, %lld) error: %d", v34, 0x32u);
    }
    *__error() = v30;
  }
  return v21;
}

void page_free(uint64_t a1, unsigned int a2, _DWORD *a3, unsigned int a4)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  memset(v74, 0, 20);
  memset(&v73, 0, sizeof(v73));
  uint64_t v8 = *(void *)(a1 + 928);
  *(void *)buf = 0;
  *(void *)&buf[8] = 0;
  unsigned int v9 = atomic_load((unsigned int *)(v8 + 248));
  if (v9 > a2)
  {
    *(void *)&buf[8] = 0;
    *(void *)buf = *(void *)v8;
    *(_DWORD *)&buf[8] = a2;
    _cache_remove((uint64_t *)buf);
  }
  uint64_t v10 = *(void *)(a1 + 928);
  *(void *)buf = 0;
  *(void *)&buf[8] = 0;
  unsigned int v11 = atomic_load((unsigned int *)(v10 + 248));
  if (v11 > a2)
  {
    *(void *)&buf[8] = 0;
    *(void *)buf = *(void *)v10;
    *(_DWORD *)&buf[8] = a2;
    _cache_remove((uint64_t *)buf);
  }
  uint64_t v12 = *(unsigned int *)(v10 + 220);
  if ((int)v12 < 1)
  {
LABEL_9:
    uint64_t v15 = fd_pread(*(_DWORD **)(a1 + 848), v74, 0x14uLL, (unint64_t)a2 << *(_DWORD *)(a1 + 12));
    if (v15 != 20)
    {
      uint64_t v17 = v15;
      int v18 = *__error();
      int v19 = *__error();
      v20 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316674;
        *(void *)&buf[4] = "page_free";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2188;
        __int16 v76 = 1024;
        *(_DWORD *)v77 = a2;
        *(_WORD *)&v77[4] = 1024;
        *(_DWORD *)&v77[6] = v18;
        *(_WORD *)v78 = 2080;
        *(void *)&v78[2] = a1 + 324;
        *(_WORD *)&v78[10] = 2048;
        *(void *)&v78[12] = v17;
        *(_WORD *)&v78[20] = 2048;
        *(void *)&v78[22] = 20;
        _os_log_error_impl(&dword_1BD672000, v20, OS_LOG_TYPE_ERROR, "%s:%d: Failed reading pgnum %d error:%d (%s) %zd != %zd", buf, 0x3Cu);
      }
      *__error() = v19;
      *__error() = v18;
      *(_DWORD *)(a1 + 4) |= 4u;
      if (!*__error()) {
        *__error() = 22;
      }
      __error();
      return;
    }
    int v16 = v74[0];
    if ((*(unsigned char *)(a1 + 4) & 0x80) != 0 && LODWORD(v74[0]) == 846226020)
    {
      LODWORD(v74[0]) = 1684172850;
      *(int8x16_t *)((char *)v74 + 4) = vrev32q_s8(*(int8x16_t *)((char *)v74 + 4));
      if ((BYTE12(v74[0]) & 1) == 0) {
        goto LABEL_24;
      }
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v13 = 0;
    v14 = (_DWORD *)(v10 + 252);
    while (*v14 != a2)
    {
      ++v13;
      ++v14;
      if (v12 == v13) {
        goto LABEL_9;
      }
    }
    uint64_t v21 = v10 + 272;
    uint64_t v22 = v10 + 272 + 48 * v13;
    long long v23 = *(_OWORD *)*(void *)v22;
    LODWORD(v74[1]) = *(_DWORD *)(*(void *)v22 + 16);
    v74[0] = v23;
    _DWORD *v14 = 0;
    *(_DWORD *)(v22 + 16) = 0;
    *(void *)uint64_t v22 = 0;
    uint64_t v24 = v21 + 48 * v13;
    *(void *)(v24 + 24) = 0;
    *(_DWORD *)(v24 + 32) = 0;
    *(void *)(v24 + 40) = 0;
    v27 = *(void **)(v22 + 8);
    v26 = (void *)(v22 + 8);
    v25 = v27;
    if (v27)
    {
      free(v25);
      void *v26 = 0;
    }
    int v16 = v74[0];
  }
  if (v16 != 1684172850 || (BYTE12(v74[0]) & 1) == 0)
  {
LABEL_24:
    int v28 = *__error();
    v29 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316674;
      *(void *)&buf[4] = "page_free";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2205;
      __int16 v76 = 2080;
      *(void *)v77 = a1 + 324;
      *(_WORD *)&v77[8] = 1024;
      *(_DWORD *)v78 = a2;
      *(_WORD *)&v78[4] = 1024;
      *(_DWORD *)&v78[6] = v74[0];
      *(_WORD *)&v78[10] = 1024;
      strcpy(&v78[12], "2pbd");
      v78[17] = 4;
      *(_DWORD *)&v78[18] = HIDWORD(v74[0]);
      _os_log_error_impl(&dword_1BD672000, v29, OS_LOG_TYPE_ERROR, "%s:%d: %s : free: ERR: Danger! page num 0x%x looks bad (signature 0x%x expected 0x%x flags 0x%x)\n", buf, 0x34u);
    }
    goto LABEL_26;
  }
LABEL_28:
  uint64_t v30 = *(void *)(a1 + 848);
  if (!v30) {
    return;
  }
  while (1)
  {
    int v31 = fstatat(*(_DWORD *)(v30 + 44), *(const char **)(v30 + 72), &v73, 2048);
    uint64_t v32 = g_prot_error_callback;
    if (v31 != -1 || g_prot_error_callback == 0) {
      break;
    }
    uint64_t v34 = *(unsigned int *)(v30 + 40);
    v35 = __error();
    if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v32 + 16))(v32, v34, *v35, 8) & 1) == 0) {
      return;
    }
  }
  if (v31) {
    return;
  }
  uint64_t v36 = a2;
  int64_t v37 = (unint64_t)a2 << *(_DWORD *)(a1 + 12);
  v38 = (int *)v74 + 1;
  if ((BYTE12(v74[0]) & 4) != 0) {
    v38 = (int *)&v74[1];
  }
  int64_t v39 = v37 + *v38;
  int64_t v40 = (*(_DWORD *)(a1 + 40) + *(_DWORD *)(a1 + 36));
  if (v39 == v73.st_size && v37 >= v40)
  {
    *a3 = 1;
    if ((((unint64_t)a2 << *(_DWORD *)(a1 + 12)) & 0xFFF) != 0)
    {
      v68 = __si_assert_copy_extra_2445(0, -1);
      v69 = v68;
      v70 = "";
      if (v68) {
        v70 = v68;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 2220, "(((off_t)(pgnum) << (dst->pg_shift)) & ((1 << 12)-1))==0", v70);
      free(v69);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
    *(unsigned char *)(a1 + 796) = 1;
    db_rwlock_wakeup(a1 + 584, 1, 1);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
    int v44 = fd_truncate(*(void *)(a1 + 848), (unint64_t)a2 << *(_DWORD *)(a1 + 12));
    int v45 = *__error();
    db_upgrade_lock(a1 + 584);
    if (v44)
    {
      int v46 = *__error();
      v47 = _SILogForLogForCategory(7);
      if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
LABEL_49:
        *__error() = v46;
        return;
      }
      uint64_t v59 = v36 << *(_DWORD *)(a1 + 12);
      *(_DWORD *)buf = 136316162;
      *(void *)&buf[4] = "page_free";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2231;
      __int16 v76 = 2080;
      *(void *)v77 = a1 + 324;
      *(_WORD *)&v77[8] = 2048;
      *(void *)v78 = v59;
      *(_WORD *)&v78[8] = 1024;
      *(_DWORD *)&v78[10] = v45;
LABEL_69:
      _os_log_error_impl(&dword_1BD672000, v47, OS_LOG_TYPE_ERROR, "%s:%d: ftruncate(%s, %lld) error: %d", buf, 0x2Cu);
      goto LABEL_49;
    }
    return;
  }
  if (v37 < v40)
  {
    int v28 = *__error();
    v42 = _SILogForLogForCategory(7);
    os_log_type_t v43 = 2 * (dword_1E9FC90C0 < 4);
    if (os_log_type_enabled(v42, v43))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl(&dword_1BD672000, v42, v43, "page_free: ERR: tried to free the first & only page of the file (pgnum 0x%x).\n", buf, 8u);
    }
LABEL_26:
    *__error() = v28;
    return;
  }
  *a3 = 1;
  v48 = (unsigned int *)malloc_type_valloc(0x4000uLL, 0x44ED490uLL);
  uint64_t v49 = fd_pread(*(_DWORD **)(a1 + 848), v48, 0x4000uLL, v73.st_size - 0x4000);
  if (v49 != 0x4000)
  {
    uint64_t v51 = v49;
    int v52 = *__error();
    int v53 = *__error();
    v54 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316674;
      *(void *)&buf[4] = "page_free";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2340;
      __int16 v76 = 2048;
      *(void *)v77 = v73.st_size - 0x4000;
      *(_WORD *)&v77[8] = 1024;
      *(_DWORD *)v78 = v52;
      *(_WORD *)&v78[4] = 2080;
      *(void *)&v78[6] = a1 + 324;
      *(_WORD *)&v78[14] = 2048;
      *(void *)&v78[16] = v51;
      *(_WORD *)&v78[24] = 2048;
      *(void *)&v78[26] = 0x4000;
      _os_log_error_impl(&dword_1BD672000, v54, OS_LOG_TYPE_ERROR, "%s:%d: Failed reading pgnum %lld error:%d (%s) %zd != %zd", buf, 0x40u);
    }
    *__error() = v53;
    goto LABEL_60;
  }
  if (sdb_pwrite(*(void *)(a1 + 848), (uint64_t)v48, 0x4000uLL, (unint64_t)a2 << *(_DWORD *)(a1 + 12)) != 0x4000)
  {
    int v52 = *__error();
    v55 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      off_t v65 = v73.st_size - 0x4000;
      v66 = __error();
      v67 = strerror(*v66);
      *(_DWORD *)buf = 136316162;
      *(void *)&buf[4] = "page_free";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2276;
      __int16 v76 = 2048;
      *(void *)v77 = v65;
      *(_WORD *)&v77[8] = 1024;
      *(_DWORD *)v78 = a2;
      *(_WORD *)&v78[4] = 2080;
      *(void *)&v78[6] = v67;
      _os_log_error_impl(&dword_1BD672000, v55, OS_LOG_TYPE_ERROR, "%s:%d: page_free: ERR: error moving page from %lld to %d (%s)\n", buf, 0x2Cu);
    }
LABEL_60:
    *__error() = v52;
    free(v48);
    return;
  }
  uint64_t v50 = v48[3];
  if ((*(unsigned char *)(a1 + 4) & 0x80) != 0 && v50 >> 28)
  {
    uint64_t v50 = bswap32(v50);
    free(v48);
    goto LABEL_62;
  }
  free(v48);
  if ((v50 & 0xF0) != 0)
  {
LABEL_62:
    off_t v56 = (v73.st_size - 0x4000) >> *(_DWORD *)(a1 + 12);
    if ((*(unsigned char *)(a1 + 804) & 0x14) != 0)
    {
      if (dword_1E9FC90C0 >= 5)
      {
        int v57 = *__error();
        v58 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = v56;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = a2;
          _os_log_impl(&dword_1BD672000, v58, OS_LOG_TYPE_DEFAULT, "Skipping string page move from %d to %d -- no string table!", buf, 0xEu);
        }
        *__error() = v57;
      }
    }
    else
    {
      update_string_table(a1, (v73.st_size - 0x4000) >> *(_DWORD *)(a1 + 12), a2, v50);
    }
    goto LABEL_76;
  }
  off_t v60 = (v73.st_size - 0x4000) >> *(_DWORD *)(a1 + 12);
  if (dword_1E9FC90C0 >= 5)
  {
    int v71 = *__error();
    v72 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v60;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = a2;
      _os_log_impl(&dword_1BD672000, v72, OS_LOG_TYPE_DEFAULT, "Object page move from %d to %d", buf, 0xEu);
    }
    *__error() = v71;
  }
  db_cache_move_page(*(void *)(a1 + 928), v60, a2);
  if (map_change_pgnum(a1, v60, a2))
  {
    int v61 = *__error();
    v62 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(void *)&buf[4] = "page_free";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2317;
      __int16 v76 = 2048;
      *(void *)v77 = v73.st_size - 0x4000;
      *(_WORD *)&v77[8] = 1024;
      *(_DWORD *)v78 = a2;
      _os_log_error_impl(&dword_1BD672000, v62, OS_LOG_TYPE_ERROR, "%s:%d: page_free: ERR: failed to change the map page offset from %lld to %d\n", buf, 0x22u);
    }
    *__error() = v61;
  }
  page_cache_move(*(void *)(a1 + 928), a2, (v73.st_size - 0x4000) >> *(_DWORD *)(a1 + 12));
LABEL_76:
  _add_dirty_chunk(a1, a2, 0x4000u, (a4 >> 14) & 1);
  db_downgrade_lock((pthread_mutex_t *)(a1 + 584));
  int v63 = fd_truncate(*(void *)(a1 + 848), v73.st_size - 0x4000);
  int v64 = *__error();
  db_upgrade_lock(a1 + 584);
  if (v63)
  {
    int v46 = *__error();
    v47 = _SILogForLogForCategory(7);
    if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
      goto LABEL_49;
    }
    *(_DWORD *)buf = 136316162;
    *(void *)&buf[4] = "page_free";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2335;
    __int16 v76 = 2080;
    *(void *)v77 = a1 + 324;
    *(_WORD *)&v77[8] = 2048;
    *(void *)v78 = v73.st_size - 0x4000;
    *(_WORD *)&v78[8] = 1024;
    *(_DWORD *)&v78[10] = v64;
    goto LABEL_69;
  }
}

uint64_t db2_sync_datastore(uint64_t result, int a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(result + 804) & 8) != 0) {
    return result;
  }
  uint64_t v3 = result;
  pthread_key_t v4 = __THREAD_SLOT_KEY;
  if (!__THREAD_SLOT_KEY)
  {
    makeThreadId();
    pthread_key_t v4 = __THREAD_SLOT_KEY;
  }
  v5 = (char *)pthread_getspecific(v4);
  HIDWORD(v7) = qos_class_self() - 9;
  LODWORD(v7) = HIDWORD(v7);
  unsigned int v6 = v7 >> 2;
  if (v6 > 6) {
    signed int v8 = 0;
  }
  else {
    signed int v8 = dword_1BDA87810[v6];
  }
  int v9 = pthread_mutex_lock((pthread_mutex_t *)(v3 + 584));
  if (*(void *)(v3 + 768) || *(_DWORD *)(v3 + 780) || *(unsigned char *)(v3 + 796)) {
    goto LABEL_10;
  }
  if (v8 <= 5)
  {
    if (*(void *)(v3 + 16 * v8 + 648))
    {
LABEL_10:
      db_rwlock_wait(v3 + 584, v8, 2);
      goto LABEL_11;
    }
    uint64_t v37 = v8 - 1;
    v38 = (uint64_t *)(v3 + 16 * v8 + 664);
    while (v37 != 4)
    {
      uint64_t v39 = *v38;
      v38 += 2;
      ++v37;
      if (v39)
      {
        if (v37 <= 4) {
          goto LABEL_10;
        }
        break;
      }
    }
  }
  *(void *)(v3 + 768) = pthread_self();
LABEL_11:
  pthread_mutex_unlock((pthread_mutex_t *)(v3 + 584));
  if (v9)
  {
    int v50 = *__error();
    uint64_t v51 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)v58 = "db2_sync_datastore";
      *(_WORD *)&v58[8] = 1024;
      int v59 = 9004;
      __int16 v60 = 1024;
      LODWORD(v61) = v9;
      _os_log_error_impl(&dword_1BD672000, v51, OS_LOG_TYPE_ERROR, "%s:%d: Lock failed with error %d", buf, 0x18u);
    }
    *__error() = v50;
    sdb2_die(v3, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 9004);
  }
  uint64_t v10 = (uint64_t)(v5 - 1);
  if (v5)
  {
    unint64_t v11 = CIOnThreadCleanUpPush((uint64_t)(v5 - 1), (uint64_t)db_write_unlock, v3 + 584);
    if ((*(unsigned char *)(v3 + 4) & 2) == 0) {
      goto LABEL_14;
    }
LABEL_39:
    int v24 = *__error();
    v25 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)v58 = "db2_sync_datastore";
      *(_WORD *)&v58[8] = 1024;
      int v59 = 9007;
      __int16 v60 = 2080;
      uint64_t v61 = v3 + 324;
      _os_log_error_impl(&dword_1BD672000, v25, OS_LOG_TYPE_ERROR, "%s:%d: %s : db2_sync_datastore: !WARNING! prior write-errors invalidate sync.\n", buf, 0x1Cu);
    }
    *__error() = v24;
    int v26 = pthread_mutex_lock((pthread_mutex_t *)(v3 + 584));
    *(_DWORD *)(v3 + 788) = 0;
    v27 = *(pthread_override_s **)(v3 + 760);
    *(void *)(v3 + 768) = 0;
    *(void *)(v3 + 760) = 0;
    char v28 = *(_DWORD *)(v3 + 780) != 0;
    *(unsigned char *)(v3 + 796) = 0;
    db_rwlock_wakeup(v3 + 584, v28, 0);
    result = pthread_mutex_unlock((pthread_mutex_t *)(v3 + 584));
    if (v27) {
      result = pthread_override_qos_class_end_np(v27);
    }
    if (v26) {
      sdb2_die(v3, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 9008);
    }
    goto LABEL_44;
  }
  unint64_t v11 = -1;
  if ((*(unsigned char *)(v3 + 4) & 2) != 0) {
    goto LABEL_39;
  }
LABEL_14:
  int v54 = a2;
  v55 = v5;
  unint64_t v56 = v11;
  uint64_t v12 = v5 - 1;
  for (uint64_t i = 0; i != 6; ++i)
  {
    uint64_t v14 = v3 + 8 * i;
    uint64_t v15 = *(void *)(v14 + 880);
    if (i == 5 || (*(_DWORD *)(v3 + 804) & 0x14) != 0)
    {
      if (v15)
      {
        int v18 = *(_DWORD *)(v15 + 216);
        switch(v18)
        {
          case -270471200:
            _data_map_ext_sync_data(v15);
            break;
          case 1684300900:
            _data_map64_sync_data(v15);
            break;
          case 842150450:
            _data_map32_sync_data(v15, 1);
            break;
        }
      }
    }
    else
    {
      int v16 = *(_DWORD **)(v15 + 8);
      if (v16)
      {
        page_release(v3, v16, *(_DWORD *)v15, 5u, 0);
        if (dword_1E9FC90C0 >= 5)
        {
          int v53 = *__error();
          log = _SILogForLogForCategory(7);
          if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
          {
            int v17 = **(_DWORD **)(v14 + 880);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)v58 = v17;
            *(_WORD *)&v58[4] = 1024;
            *(_DWORD *)&v58[6] = i;
            _os_log_impl(&dword_1BD672000, log, OS_LOG_TYPE_DEFAULT, "Push dirty string page %d to disk (%d)", buf, 0xEu);
          }
          *__error() = v53;
        }
      }
    }
  }
  if (db2_flush_all_cache((void *)v3) || map_write(v3))
  {
    int v19 = *__error();
    v20 = _SILogForLogForCategory(7);
    uint64_t v10 = (uint64_t)v12;
    unint64_t v11 = v56;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)v58 = "db2_sync_datastore";
      *(_WORD *)&v58[8] = 1024;
      int v59 = 9026;
      __int16 v60 = 2080;
      uint64_t v61 = v3 + 324;
      _os_log_error_impl(&dword_1BD672000, v20, OS_LOG_TYPE_ERROR, "%s:%d: %s : db2_sync_datastore: !WARNING! write-errors flushing cache/writing map.\n", buf, 0x1Cu);
    }
    *__error() = v19;
    int v21 = pthread_mutex_lock((pthread_mutex_t *)(v3 + 584));
    *(_DWORD *)(v3 + 788) = 0;
    uint64_t v22 = *(pthread_override_s **)(v3 + 760);
    *(void *)(v3 + 768) = 0;
    *(void *)(v3 + 760) = 0;
    char v23 = *(_DWORD *)(v3 + 780) != 0;
    *(unsigned char *)(v3 + 796) = 0;
    db_rwlock_wakeup(v3 + 584, v23, 0);
    result = pthread_mutex_unlock((pthread_mutex_t *)(v3 + 584));
    v5 = v55;
    if (v22) {
      result = pthread_override_qos_class_end_np(v22);
    }
    if (v21) {
      sdb2_die(v3, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 9027);
    }
    goto LABEL_44;
  }
  int v33 = *(_DWORD *)(v3 + 4);
  uint64_t v10 = (uint64_t)v12;
  unint64_t v11 = v56;
  if ((v33 & 1) == 0)
  {
    v5 = v55;
    if ((v33 & 2) == 0) {
      *(_DWORD *)(v3 + 4) = v33 | 1;
    }
    fd_sync(*(void *)(v3 + 848), v54);
    if ((*(unsigned char *)(v3 + 4) & 0x80) != 0)
    {
      *(int8x16_t *)uint64_t v3 = vrev32q_s8(*(int8x16_t *)v3);
      *(_DWORD *)(v3 + 16) = bswap32(*(_DWORD *)(v3 + 16));
      *(int8x16_t *)(v3 + 20) = vrev64q_s8(*(int8x16_t *)(v3 + 20));
      *(int8x16_t *)(v3 + 36) = vrev32q_s8(*(int8x16_t *)(v3 + 36));
      *(int8x16_t *)(v3 + 52) = vrev32q_s8(*(int8x16_t *)(v3 + 52));
    }
    if (fd_pwrite(*(void *)(v3 + 848), v3, 0x1000uLL, 0) == 4096)
    {
      if ((*(unsigned char *)(v3 + 804) & 0x14) != 0)
      {
        _data_map_sync_header(*(void *)(v3 + 880));
        if ((*(unsigned char *)(v3 + 804) & 0x14) != 0)
        {
          _data_map_sync_header(*(void *)(v3 + 888));
          if ((*(unsigned char *)(v3 + 804) & 0x14) != 0)
          {
            _data_map_sync_header(*(void *)(v3 + 896));
            if ((*(unsigned char *)(v3 + 804) & 0x14) != 0)
            {
              _data_map_sync_header(*(void *)(v3 + 904));
              if ((*(unsigned char *)(v3 + 804) & 0x14) != 0) {
                _data_map_sync_header(*(void *)(v3 + 912));
              }
            }
          }
        }
      }
      _data_map_sync_header(*(void *)(v3 + 920));
      int v34 = fd_sync(*(void *)(v3 + 848), v54);
      if (v34 || (int v34 = sync_dirty_chunks(v3)) != 0)
      {
        if ((*(_DWORD *)(v3 + 4) & 0x80000000) != 0)
        {
          *(int8x16_t *)uint64_t v3 = vrev32q_s8(*(int8x16_t *)v3);
          *(_DWORD *)(v3 + 16) = bswap32(*(_DWORD *)(v3 + 16));
          *(int8x16_t *)(v3 + 20) = vrev64q_s8(*(int8x16_t *)(v3 + 20));
          *(int8x16_t *)(v3 + 36) = vrev32q_s8(*(int8x16_t *)(v3 + 36));
          *(int8x16_t *)(v3 + 52) = vrev32q_s8(*(int8x16_t *)(v3 + 52));
        }
        if (v34 == 28) {
          goto LABEL_67;
        }
        int v35 = *__error();
        uint64_t v36 = _SILogForLogForCategory(7);
        if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
        {
LABEL_66:
          *__error() = v35;
          *(_DWORD *)(v3 + 4) |= 2u;
          *(_DWORD *)(v3 + 800) = v34;
LABEL_67:
          result = db_write_unlock(v3 + 584);
          if (result) {
            sdb2_die(v3, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 9115);
          }
          goto LABEL_44;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)v58 = "db2_sync_datastore";
        *(_WORD *)&v58[8] = 1024;
        int v59 = 9109;
      }
      else
      {
        int v43 = fd_sync(*(void *)(v3 + 840), v54);
        if (!v43)
        {
          uint64_t v45 = fd_pwrite(*(void *)(v3 + 840), v3, 0x1000uLL, 0);
          int v46 = *__error();
          if ((*(_DWORD *)(v3 + 4) & 0x80000000) != 0)
          {
            *(int8x16_t *)uint64_t v3 = vrev32q_s8(*(int8x16_t *)v3);
            *(_DWORD *)(v3 + 16) = bswap32(*(_DWORD *)(v3 + 16));
            *(int8x16_t *)(v3 + 20) = vrev64q_s8(*(int8x16_t *)(v3 + 20));
            *(int8x16_t *)(v3 + 36) = vrev32q_s8(*(int8x16_t *)(v3 + 36));
            *(int8x16_t *)(v3 + 52) = vrev32q_s8(*(int8x16_t *)(v3 + 52));
          }
          if (v45 != 4096)
          {
            int v47 = *__error();
            v48 = _SILogForLogForCategory(7);
            if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
            {
              uint64_t v49 = strerror(v46);
              *(_DWORD *)buf = 136315906;
              *(void *)v58 = "db2_sync_datastore";
              *(_WORD *)&v58[8] = 1024;
              int v59 = 9092;
              __int16 v60 = 2080;
              uint64_t v61 = v3 + 324;
              __int16 v62 = 2080;
              int v63 = v49;
              _os_log_error_impl(&dword_1BD672000, v48, OS_LOG_TYPE_ERROR, "%s:%d: %s : ERR: Can't write DST header (2: %s)\n", buf, 0x26u);
            }
            *__error() = v47;
            *(_DWORD *)(v3 + 4) |= 2u;
            *(_DWORD *)(v3 + 800) = v46;
          }
          fd_sync(*(void *)(v3 + 840), v54);
          goto LABEL_67;
        }
        int v34 = v43;
        int v35 = *__error();
        uint64_t v36 = _SILogForLogForCategory(7);
        if (!os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
          goto LABEL_66;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)v58 = "db2_sync_datastore";
        *(_WORD *)&v58[8] = 1024;
        int v59 = 9099;
      }
      _os_log_error_impl(&dword_1BD672000, v36, OS_LOG_TYPE_ERROR, "%s:%d: Failed syncing db", buf, 0x12u);
      goto LABEL_66;
    }
    int v40 = *__error();
    if ((*(_DWORD *)(v3 + 4) & 0x80000000) != 0)
    {
      *(int8x16_t *)uint64_t v3 = vrev32q_s8(*(int8x16_t *)v3);
      *(_DWORD *)(v3 + 16) = bswap32(*(_DWORD *)(v3 + 16));
      *(int8x16_t *)(v3 + 20) = vrev64q_s8(*(int8x16_t *)(v3 + 20));
      *(int8x16_t *)(v3 + 36) = vrev32q_s8(*(int8x16_t *)(v3 + 36));
      *(int8x16_t *)(v3 + 52) = vrev32q_s8(*(int8x16_t *)(v3 + 52));
    }
    int v41 = *__error();
    v42 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      int v44 = strerror(v40);
      *(_DWORD *)buf = 136315906;
      *(void *)v58 = "db2_sync_datastore";
      *(_WORD *)&v58[8] = 1024;
      int v59 = 9062;
      __int16 v60 = 2080;
      uint64_t v61 = v3 + 324;
      __int16 v62 = 2080;
      int v63 = v44;
      _os_log_error_impl(&dword_1BD672000, v42, OS_LOG_TYPE_ERROR, "%s:%d: %s : db2_sync_datastore: ERR: Can't write DST header (%s)\n", buf, 0x26u);
    }
    *__error() = v41;
    *(_DWORD *)(v3 + 4) |= 2u;
    *(_DWORD *)(v3 + 800) = v40;
    result = db_write_unlock(v3 + 584);
    if (result) {
      sdb2_die(v3, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 9065);
    }
LABEL_44:
    if (!v5) {
      return result;
    }
    goto LABEL_45;
  }
  result = db_write_unlock(v3 + 584);
  if (result) {
    sdb2_die(v3, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 9035);
  }
  if (v55)
  {
LABEL_45:
    result = CIOnThreadCleanUpClearItem(v10, v11);
    v29 = &threadData[18 * v10];
    int v32 = v29[14];
    uint64_t v30 = v29 + 14;
    int v31 = v32;
    if (v11 + 1 == v32) {
      *uint64_t v30 = v31 - 1;
    }
  }
  return result;
}

void db2_set_garbage_collector(void *a1, void *aBlock, void *a3, void *a4)
{
  v5 = a3;
  if (aBlock)
  {
    unint64_t v7 = _Block_copy(aBlock);
    if (!v5) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  unint64_t v7 = 0;
  if (a3) {
LABEL_3:
  }
    v5 = _Block_copy(v5);
LABEL_4:
  if (a4) {
    a4 = _Block_copy(a4);
  }
  signed int v8 = (const void *)a1[101];
  if (v8) {
    _Block_release(v8);
  }
  int v9 = (const void *)a1[102];
  if (v9) {
    _Block_release(v9);
  }
  uint64_t v10 = (const void *)a1[103];
  if (v10) {
    _Block_release(v10);
  }
  a1[101] = v7;
  a1[102] = v5;
  a1[103] = a4;
}

void cleanup_string_tables(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 804) & 0x14) != 0)
  {
    uint64_t v2 = *(void *)(a1 + 880);
    if (v2)
    {
      data_map_destroy(v2);
      *(void *)(a1 + 880) = 0;
    }
  }
  else
  {
    destroy_string_table(a1, 0);
  }
  if ((*(unsigned char *)(a1 + 804) & 0x14) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 888);
    if (v3)
    {
      data_map_destroy(v3);
      *(void *)(a1 + 888) = 0;
    }
  }
  else
  {
    destroy_string_table(a1, 1u);
  }
  if ((*(unsigned char *)(a1 + 804) & 0x14) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 896);
    if (v4)
    {
      data_map_destroy(v4);
      *(void *)(a1 + 896) = 0;
    }
  }
  else
  {
    destroy_string_table(a1, 2u);
  }
  if ((*(unsigned char *)(a1 + 804) & 0x14) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 904);
    if (v5)
    {
      data_map_destroy(v5);
      *(void *)(a1 + 904) = 0;
    }
  }
  else
  {
    destroy_string_table(a1, 3u);
  }
  if ((*(unsigned char *)(a1 + 804) & 0x14) == 0)
  {
    destroy_string_table(a1, 4u);
    uint64_t v7 = *(void *)(a1 + 920);
    if (!v7) {
      return;
    }
    goto LABEL_21;
  }
  uint64_t v6 = *(void *)(a1 + 912);
  if (v6)
  {
    data_map_destroy(v6);
    *(void *)(a1 + 912) = 0;
  }
  uint64_t v7 = *(void *)(a1 + 920);
  if (v7)
  {
LABEL_21:
    data_map_destroy(v7);
    *(void *)(a1 + 920) = 0;
  }
}

void destroy_string_table(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = a1 + 880;
  uint64_t v3 = *(void *)(a1 + 880 + 8 * a2);
  if (v3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = *(void *)(v3 + 24);
    if (v5)
    {
      while (*(_DWORD *)(v5 + 20))
      {
        uint64_t v6 = *(void *)(v5 + 24);
        free((void *)v5);
        uint64_t v5 = v6;
        if (!v6) {
          goto LABEL_7;
        }
      }
      free((void *)v5);
LABEL_7:
      uint64_t v3 = *(void *)(v2 + 8 * v4);
    }
    uint64_t v7 = *(void ***)(v3 + 16);
    uint64_t v8 = 8 * v4;
    if (v7)
    {
      pthread_rwlock_destroy(*(pthread_rwlock_t **)(v3 + 16));
      free(v7[283]);
      free(v7);
      *(void *)(*(void *)(v2 + v8) + 16) = 0;
      uint64_t v3 = *(void *)(v2 + v8);
    }
    int v9 = *(void **)(v3 + 32);
    if (v9)
    {
      free(v9);
      *(void *)(*(void *)(v2 + v8) + 32) = 0;
      uint64_t v3 = *(void *)(v2 + v8);
    }
    uint64_t v10 = *(void **)(v3 + 40);
    if (v10)
    {
      free(v10);
      *(void *)(*(void *)(v2 + v8) + 32) = 0;
      uint64_t v3 = *(void *)(v2 + v8);
    }
    *(void *)(v3 + 24) = 0;
    *(_DWORD *)(*(void *)(v2 + v8) + 60) = 0;
    *(_DWORD *)(*(void *)(v2 + v8) + 56) = 0;
    free(*(void **)(v2 + v8));
    *(void *)(v2 + v8) = 0;
  }
}

uint64_t __db2_create_datastore_with_ctx_block_invoke_3(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t __db2_create_datastore_with_ctx_block_invoke_2(int a1, void *a2, size_t a3)
{
  return munmap(a2, a3);
}

void __db2_create_datastore_with_ctx_block_invoke(int a1, void *a2)
{
}

uint64_t db2_flush_all_cache(void *a1)
{
  v20[0] = 0;
  v20[1] = v20;
  int v21 = 0;
  v20[2] = 0x2000000000;
  v18[0] = 0;
  v18[1] = v18;
  int v19 = 0;
  v18[2] = 0x2000000000;
  v16[0] = 0;
  v16[1] = v16;
  int v17 = 0;
  v16[2] = 0x2000000000;
  uint64_t v2 = (void *)a1[124];
  uint64_t v7 = MEMORY[0x1E4F143A8];
  uint64_t v8 = 0x40000000;
  int v9 = __flush_updateset_locked_block_invoke;
  uint64_t v10 = &unk_1E63483C8;
  uint64_t v15 = 2;
  unint64_t v11 = v20;
  uint64_t v12 = v16;
  uint64_t v13 = v18;
  uint64_t v14 = a1;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __flush_updateset_locked_block_invoke_144;
  v6[3] = &unk_1E63483F0;
  v6[4] = v20;
  v6[5] = v16;
  v6[6] = v18;
  v6[7] = a1;
  v6[8] = 2;
  uint64_t v3 = db_updateset_iterate(v2, (uint64_t)&v7, (uint64_t)v6);
  _Block_object_dispose(v16, 8);
  _Block_object_dispose(v18, 8);
  _Block_object_dispose(v20, 8);
  if (!v3)
  {
    uint64_t v4 = a1[116];
    uint64_t v7 = MEMORY[0x1E4F143A8];
    uint64_t v8 = 0x40000000;
    int v9 = ___db2_flush_all_cache_block_invoke;
    uint64_t v10 = &__block_descriptor_tmp_160;
    unint64_t v11 = a1;
    LODWORD(v12) = 0;
    db_cache_flush(v4, (uint64_t)&v7);
  }
  return v3;
}

uint64_t sync_dirty_chunks(uint64_t a1)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)(a1 + 4) & 0x80000000) != 0) {
    *(_DWORD *)(a1 + 12) = bswap32(*(_DWORD *)(a1 + 12));
  }
  off_t st_size = fd_lseek(*(_DWORD **)(a1 + 848), 0, 2);
  if ((st_size & 0x8000000000000000) == 0)
  {
LABEL_4:
    uint64_t v3 = fd_lseek(*(_DWORD **)(a1 + 840), 0, 2);
    if (v3 != -1)
    {
      uint64_t v4 = *(unsigned int *)(a1 + 872);
      memset(v101, 0, sizeof(v101));
      uint64_t v99 = 0;
      v100 = v101;
      if (!v4)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
        {
          dev_t v21 = 0;
          LOWORD(buf.st_dev) = 0;
          _os_log_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "Skipping because index is shut down", (uint8_t *)&buf, 2u);
          size_t v22 = 0;
          uint64_t v23 = -1;
          uint64_t v24 = -1;
        }
        else
        {
          size_t v22 = 0;
          dev_t v21 = 0;
          uint64_t v24 = -1;
          uint64_t v23 = -1;
        }
        goto LABEL_57;
      }
      uint64_t v5 = v3;
      uint64_t v6 = fd_mmap(*(void *)(a1 + 848));
      if (v6 != -1)
      {
        uint64_t v7 = v6;
        uint64_t v8 = (void *)v6;
        uint64_t v9 = fd_mmap(*(void *)(a1 + 840));
        if (v9 == -1)
        {
          int v11 = *__error();
          int v47 = _SILogForLogForCategory(7);
          os_log_type_t v48 = 2 * (dword_1E9FC90C0 < 4);
          if (os_log_type_enabled(v47, v48))
          {
            LOWORD(buf.st_dev) = 0;
            _os_log_impl(&dword_1BD672000, v47, v48, "sync_dirty_chunks: ERR: Failed to map master", (uint8_t *)&buf, 2u);
          }
          uint64_t v14 = -1;
          goto LABEL_45;
        }
        uint64_t v10 = v9;
        uint64_t v92 = v9;
        if (v5 != st_size && fd_truncate(*(void *)(a1 + 840), st_size))
        {
          int v11 = *__error();
          uint64_t v12 = _SILogForLogForCategory(7);
          os_log_type_t v13 = 2 * (dword_1E9FC90C0 < 4);
          if (os_log_type_enabled(v12, v13))
          {
            buf.unsigned int st_dev = 134217984;
            *(void *)&buf.st_mode = st_size;
            _os_log_impl(&dword_1BD672000, v12, v13, "sync_dirty_chunks: ERR: Failed to truncate master fd to %lld\n", (uint8_t *)&buf, 0xCu);
          }
          uint64_t v14 = v92;
LABEL_45:
          uint64_t v49 = v14;
          *__error() = v11;
          uint64_t v50 = *__error();
          size_t v51 = st_size;
          int v52 = (void *)v49;
          int v53 = v8;
          goto LABEL_88;
        }
        int v31 = v100;
        uint64_t v93 = (uint64_t)v8;
        void *v100 = v8;
        v31[1] = st_size;
        v31[2] = *(void *)(a1 + 840);
        v31[3] = v92;
        v31[4] = st_size;
        v31[5] = *(void *)(a1 + 848);
        uint64_t v99 = 2;
        int v32 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
        buf.unsigned int st_dev = 0;
        *(_DWORD *)v102 = 0;
        unint64_t v33 = setThreadIdAndInfo(-1, (long long *)sMappingExceptionCallbacks, (uint64_t)&v99, 0x40000000, v32);
        *(_DWORD *)v102 = HIDWORD(v33);
        buf.unsigned int st_dev = v33;
        unint64_t v98 = __PAIR64__(v34, v35);
        uint64_t v36 = *(void *)&threadData[18 * v33 + 2];
        uint64_t v37 = v36 + 320 * HIDWORD(v33);
        *(unsigned char *)(v37 + 216) = 0;
        int v38 = *(_DWORD *)(v37 + 312);
        uint64_t v39 = *(void (**)(void))(v37 + 224);
        if (v39) {
          v39(*(void *)(v36 + 320 * HIDWORD(v33) + 288));
        }
        unsigned int st_dev = buf.st_dev;
        unsigned int v96 = *(_DWORD *)v102;
        unint64_t v95 = v98;
        if (!_setjmp((int *)v37))
        {
          uint64_t v54 = v4;
          uint64_t v55 = 0;
          do
          {
            uint64_t v56 = *(void *)(a1 + 864);
            int64_t v57 = (unint64_t)*(unsigned int *)(v56 + v55) << *(_DWORD *)(a1 + 12);
            if (st_size > v57)
            {
              size_t v58 = *(unsigned int *)(v56 + v55 + 4);
              if ((uint64_t)(v57 + v58) <= st_size) {
                size_t v58 = v58;
              }
              else {
                size_t v58 = (st_size - v57);
              }
              memcpy((void *)(v10 + v57), (const void *)(v7 + v57), v58);
            }
            v55 += 8;
            --v54;
          }
          while (v54);
          uint64_t v59 = *(void *)&threadData[18 * st_dev + 2];
          unsigned int v60 = v96;
          uint64_t v61 = v59 + 320 * v96;
          *(_DWORD *)(v61 + 312) = v38;
          __int16 v62 = *(void (**)(void))(v61 + 232);
          if (v62) {
            v62(*(void *)(v59 + 320 * v60 + 288));
          }
          dropThreadId(st_dev, 0, v32);
          dev_t v21 = v4;
          size_t v22 = st_size;
          uint64_t v24 = v92;
          uint64_t v23 = v93;
LABEL_57:
          int v63 = (void *)v23;
          if (v4 != *(_DWORD *)(a1 + 872))
          {
            v88 = __si_assert_copy_extra_2445(0, -1);
            v89 = v88;
            v90 = "";
            if (v88) {
              v90 = v88;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 873, "num_chunks == dst->num_chunks", v90);
            free(v89);
            if (__valid_fs(-1)) {
              uint64_t v91 = 2989;
            }
            else {
              uint64_t v91 = 3072;
            }
            *(_DWORD *)uint64_t v91 = -559038737;
            abort();
          }
          uint64_t v64 = (void *)v24;
          uint64_t v65 = fd_lseek(*(_DWORD **)(a1 + 840), 0, 2);
          if (v65 == -1) {
            goto LABEL_67;
          }
          if (v4 && v21 != *(_DWORD *)(a1 + 872))
          {
            v70 = v64;
            unsigned int v71 = *__error();
            if (v71) {
              uint64_t v69 = v71;
            }
            else {
              uint64_t v69 = 22;
            }
            int v72 = *__error();
            stat v73 = _SILogForLogForCategory(7);
            if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
            {
              int v87 = *(_DWORD *)(a1 + 872);
              buf.unsigned int st_dev = 136316418;
              *(void *)&buf.st_mode = "sync_dirty_chunks";
              WORD2(buf.st_ino) = 1024;
              *(_DWORD *)((char *)&buf.st_ino + 6) = 899;
              HIWORD(buf.st_uid) = 1024;
              buf.st_gid = v69;
              LOWORD(buf.st_rdev) = 1024;
              *(dev_t *)((char *)&buf.st_rdev + 2) = v21;
              *((_WORD *)&buf.st_rdev + 3) = 1024;
              LODWORD(buf.st_atimespec.tv_sec) = v87;
              WORD2(buf.st_atimespec.tv_sec) = 2080;
              *(__darwin_time_t *)((char *)&buf.st_atimespec.tv_sec + 6) = a1 + 324;
              _os_log_error_impl(&dword_1BD672000, v73, OS_LOG_TYPE_ERROR, "%s:%d: sync_dirty_chunks: ERR:%d count:%d expected %d! (%s)\n", (uint8_t *)&buf, 0x2Eu);
            }
            *__error() = v72;
            uint64_t v64 = v70;
          }
          else
          {
            *(_DWORD *)(a1 + 872) = 0;
            if ((v65 & 0x8000000000000000) == 0)
            {
              if (v65 > st_size) {
                goto LABEL_63;
              }
              goto LABEL_86;
            }
            memset(&buf, 0, sizeof(buf));
            uint64_t v74 = *(void *)(a1 + 840);
            if (v74)
            {
              while (1)
              {
                int v75 = fstatat(*(_DWORD *)(v74 + 44), *(const char **)(v74 + 72), &buf, 2048);
                uint64_t v76 = g_prot_error_callback;
                if (v75 != -1 || g_prot_error_callback == 0) {
                  break;
                }
                uint64_t v78 = *(unsigned int *)(v74 + 40);
                uint64_t v79 = __error();
                if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v76 + 16))(v76, v78, *v79, 8) & 1) == 0)goto LABEL_82; {
              }
                }
              if (!v75)
              {
                if (buf.st_size > st_size)
                {
LABEL_63:
                  if (fd_truncate(*(void *)(a1 + 840), st_size))
                  {
                    int v66 = *__error();
                    v67 = _SILogForLogForCategory(7);
                    os_log_type_t v68 = 2 * (dword_1E9FC90C0 < 4);
                    if (os_log_type_enabled(v67, v68))
                    {
                      buf.unsigned int st_dev = 134217984;
                      *(void *)&buf.st_mode = st_size;
                      _os_log_impl(&dword_1BD672000, v67, v68, "sync_dirty_chunks: ERR: Failed to truncate master fd to %lld\n", (uint8_t *)&buf, 0xCu);
                    }
                    *__error() = v66;
LABEL_67:
                    uint64_t v69 = *__error();
                    goto LABEL_87;
                  }
                }
LABEL_86:
                uint64_t v69 = 0;
                goto LABEL_87;
              }
            }
LABEL_82:
            int v80 = *__error();
            v81 = _SILogForLogForCategory(7);
            if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v102 = 136315650;
              v103 = "sync_dirty_chunks";
              __int16 v104 = 1024;
              int v105 = 908;
              __int16 v106 = 2080;
              uint64_t v107 = a1 + 324;
              _os_log_error_impl(&dword_1BD672000, v81, OS_LOG_TYPE_ERROR, "%s:%d: sync_dirty_chunks: ERR: Can't determine the master file size! (%s)\n", v102, 0x1Cu);
            }
            *__error() = v80;
            uint64_t v69 = 22;
          }
LABEL_87:
          uint64_t v82 = v69;
          uint64_t v50 = v69;
          size_t v51 = v22;
          int v52 = v64;
          int v53 = v63;
          v83 = v64;
          if (v63 == (void *)-1)
          {
LABEL_89:
            uint64_t v86 = v82;
            if (v83 != (void *)-1) {
              munmap(v83, v22);
            }
            return v86;
          }
LABEL_88:
          v84 = v52;
          size_t v22 = v51;
          uint64_t v85 = v50;
          munmap(v53, v51);
          uint64_t v82 = v85;
          v83 = v84;
          goto LABEL_89;
        }
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v94 = 0;
          _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v94, 2u);
        }
        *(_DWORD *)(v37 + 312) = v38;
        unsigned int v40 = v95;
        if (__THREAD_SLOT_KEY)
        {
          int v41 = pthread_getspecific(__THREAD_SLOT_KEY);
          if (!v41) {
            goto LABEL_99;
          }
        }
        else
        {
          makeThreadId();
          int v41 = pthread_getspecific(__THREAD_SLOT_KEY);
          if (!v41) {
            goto LABEL_99;
          }
        }
        v42 = v41;
        if ((unint64_t)v41 < 0x801)
        {
LABEL_39:
          uint64_t v43 = (uint64_t)v42 - 1;
          int v44 = &threadData[18 * ((uint64_t)v42 - 1)];
          unsigned int v46 = v44[14];
          uint64_t v45 = v44 + 14;
          if (v46 > v40)
          {
            do
              CIOnThreadCleanUpPop(v43);
            while (*v45 > v40);
          }
          dropThreadId(st_dev, 1, v32);
          CICleanUpReset(st_dev, HIDWORD(v95));
          dev_t v21 = 0;
          size_t v22 = st_size;
          uint64_t v24 = v92;
          uint64_t v23 = (uint64_t)v8;
          goto LABEL_57;
        }
LABEL_99:
        makeThreadId();
        v42 = pthread_getspecific(__THREAD_SLOT_KEY);
        goto LABEL_39;
      }
      int v28 = *__error();
      v29 = _SILogForLogForCategory(7);
      os_log_type_t v30 = 2 * (dword_1E9FC90C0 < 4);
      if (os_log_type_enabled(v29, v30))
      {
        LOWORD(buf.st_dev) = 0;
        _os_log_impl(&dword_1BD672000, v29, v30, "sync_dirty_chunks: ERR: Failed to map shadow", (uint8_t *)&buf, 2u);
      }
      *__error() = v28;
    }
    return *__error();
  }
  memset(&buf, 0, sizeof(buf));
  uint64_t v15 = *(void *)(a1 + 848);
  if (v15)
  {
    while (1)
    {
      int v16 = fstatat(*(_DWORD *)(v15 + 44), *(const char **)(v15 + 72), &buf, 2048);
      uint64_t v17 = g_prot_error_callback;
      if (v16 != -1 || g_prot_error_callback == 0) {
        break;
      }
      uint64_t v19 = *(unsigned int *)(v15 + 40);
      v20 = __error();
      if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v17 + 16))(v17, v19, *v20, 8) & 1) == 0) {
        goto LABEL_23;
      }
    }
    if (!v16)
    {
      off_t st_size = buf.st_size;
      goto LABEL_4;
    }
  }
LABEL_23:
  int v25 = *__error();
  int v26 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v102 = 136315650;
    v103 = "sync_dirty_chunks";
    __int16 v104 = 1024;
    int v105 = 736;
    __int16 v106 = 2080;
    uint64_t v107 = a1 + 324;
    _os_log_error_impl(&dword_1BD672000, v26, OS_LOG_TYPE_ERROR, "%s:%d: sync_dirty_chunks: ERR: Can't determine the shadow file size! (%s)\n", v102, 0x1Cu);
  }
  *__error() = v25;
  return 22;
}

uint64_t __flush_updateset_locked_block_invoke_144(uint64_t a1, int64_t a2, unsigned int a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 56);
  if ((*(unsigned char *)(v4 + 4) & 2) != 0)
  {
    int v20 = *__error();
    dev_t v21 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      int v30 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      int v31 = 136315650;
      int v32 = "flush_updateset_locked_block_invoke";
      __int16 v33 = 1024;
      int v34 = 8123;
      __int16 v35 = 1024;
      LODWORD(v36) = v30;
      _os_log_error_impl(&dword_1BD672000, v21, OS_LOG_TYPE_ERROR, "%s:%d: Bad sdb in db_updateset_iterate (delete) at page %d", (uint8_t *)&v31, 0x18u);
    }
    uint64_t v22 = 22;
    goto LABEL_35;
  }
  db_writer_yield_lock(v4 + 584);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(v7 + 856);
  uint64_t v9 = *(unsigned int *)(v8 + 8);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = *(int *)(v8 + 16);
  if ((int)v10 >= (int)v9
    || (uint64_t v11 = v8 + 16 * v10, *(void *)(v11 + 20) != a2)
    || (unsigned int v12 = *(_DWORD *)(v11 + 32), a3 != v12 >> 28))
  {
    uint64_t v13 = (int)v9;
    if ((int)v9 >= 1)
    {
      int v14 = 0;
      while (1)
      {
        if ((int)v9 + v14 < 0 != __OFADD__(v9, v14)) {
          int v17 = v9 + v14 + 1;
        }
        else {
          int v17 = v9 + v14;
        }
        uint64_t v18 = (v17 >> 1);
        signed int v19 = a3 - (*(_DWORD *)(v8 + 16 * (int)v18 + 32) >> 28);
        if (v19)
        {
          int64_t v15 = v19;
          uint64_t v16 = v18;
          if ((v15 & 0x8000000000000000) == 0) {
            goto LABEL_9;
          }
        }
        else
        {
          int64_t v15 = a2 - *(void *)(v8 + 16 * ((uint64_t)v17 >> 1) + 20);
          uint64_t v16 = v18;
          if ((v15 & 0x8000000000000000) == 0)
          {
LABEL_9:
            if (!v15) {
              goto LABEL_23;
            }
            int v14 = v18 + 1;
            uint64_t v16 = v9;
          }
        }
        uint64_t v9 = v16;
        if (v14 >= (int)v16)
        {
          BOOL v23 = v15 > 0;
          goto LABEL_24;
        }
      }
    }
    LODWORD(v18) = 0;
LABEL_23:
    BOOL v23 = 0;
LABEL_24:
    BOOL v24 = v13 - 1 > (int)v18 && v23;
    int v25 = v18 + v24;
    uint64_t v10 = v25;
    *(_DWORD *)(v8 + 16) = v25;
    unsigned int v12 = *(_DWORD *)(v8 + 16 * v25 + 32);
  }
  uint64_t v26 = *(unsigned int *)(v8 + 16 * v10 + 28);
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) == v26
    || (++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24),
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) < *(_DWORD *)(a1 + 64))
    || *(int *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) <= 256)
  {
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v26;
    uint64_t v27 = _page_delete_obj_by_oid_and_type(v7, a2, a3, v26, v12 & 0xFFFFFFF, *(_DWORD *)(a1 + 68) & 0x4000);
    if ((v27 & 0xFFFFFFFD) != 0)
    {
      uint64_t v22 = v27;
      int v20 = *__error();
      int v28 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        int v31 = 136316674;
        int v32 = "flush_updateset_locked_block_invoke";
        __int16 v33 = 1024;
        int v34 = 8145;
        __int16 v35 = 2048;
        int64_t v36 = a2;
        __int16 v37 = 2048;
        int64_t v38 = a2;
        __int16 v39 = 2048;
        uint64_t v40 = a3;
        __int16 v41 = 2048;
        uint64_t v42 = v26;
        __int16 v43 = 1024;
        int v44 = v22;
        _os_log_error_impl(&dword_1BD672000, v28, OS_LOG_TYPE_ERROR, "%s:%d: Failed delete, oid:0x%llx(%lld), type:%ld, pgnum:%ld, rc:%d", (uint8_t *)&v31, 0x40u);
      }
LABEL_35:
      *__error() = v20;
      return v22;
    }
    return 0;
  }
  return 0xFFFFFFFFLL;
}

double map_split(uint64_t a1, int *a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, __int32 a6)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (map_check_size(a1)) {
    return result;
  }
  uint64_t v13 = *(int32x2_t **)(a1 + 856);
  int v14 = *a2;
  uint64_t v15 = v13[2].i32[0];
  uint64_t v16 = v13[1].i32[0];
  if ((int)v16 <= (int)v15 || (int)v15 <= -1) {
    uint64_t v15 = 0;
  }
  if (v15 >= v16)
  {
LABEL_12:
    if (v15 < 1)
    {
LABEL_16:
      int v23 = *__error();
      BOOL v24 = _SILogForLogForCategory(7);
      os_log_type_t v25 = 2 * (dword_1E9FC90C0 < 4);
      if (os_log_type_enabled(v24, v25))
      {
        int v26 = *a2;
        int v31 = 136315394;
        uint64_t v32 = a1 + 324;
        __int16 v33 = 1024;
        int v34 = v26;
        _os_log_impl(&dword_1BD672000, v24, v25, "%s : ERR: map_split_page: BAD NEWS! pgnum 0x%x not found\n", (uint8_t *)&v31, 0x12u);
      }
      *__error() = v23;
      return result;
    }
    uint64_t v19 = 0;
    dev_t v21 = (int *)&v13[3] + 1;
    while (1)
    {
      int v22 = *v21;
      v21 += 4;
      if (v22 == v14) {
        break;
      }
      if (v15 == ++v19) {
        goto LABEL_16;
      }
    }
  }
  else
  {
    uint64_t v18 = (int *)&v13[2 * v15 + 3] + 1;
    uint64_t v19 = v15;
    while (1)
    {
      int v20 = *v18;
      v18 += 4;
      if (v20 == v14) {
        break;
      }
      if (v16 == ++v19) {
        goto LABEL_12;
      }
    }
  }
  v13[2].i32[0] = v19;
  uint64_t v27 = &v13[2 * v19];
  memmove((char *)&v27[4] + 4, (char *)&v27[2] + 4, 16 * (v16 - v19));
  *(int32x2_t *)((char *)&v27[2] + 4) = (int32x2_t)a3;
  v27[4].i32[0] = v27[4].i32[0] & 0xFFFFFFF | (a4 << 28);
  v27[5].i32[1] = a6;
  uint64_t v28 = 16;
  if ((*(_DWORD *)(a5 + 12) & 4) == 0) {
    uint64_t v28 = 4;
  }
  v27[6].i32[0] = v27[6].i32[0] & 0xF0000000 | *(_DWORD *)(a5 + v28) & 0xFFFFFFF;
  int32x2_t v29 = v13[1];
  v30.i32[0] = vadd_s32(v29, (int32x2_t)0x100000001).u32[0];
  *(void *)&double result = *(void *)&v29 | 0x100000001;
  v30.i32[1] = HIDWORD(result);
  v13[1] = v30;
  return result;
}

uint64_t map_check_size(uint64_t a1)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  v1 = *(int **)(a1 + 856);
  uint64_t v2 = v1[2];
  if (v2 + 1 <= (uint64_t)((unint64_t)(v1[1] - 36) >> 4)) {
    return 0;
  }
  if ((int)v2 < 1)
  {
    LODWORD(v4) = 0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = (unsigned int *)(v1 + 7);
    while (1)
    {
      unsigned int v6 = *v5;
      v5 += 4;
      if ((unint64_t)v6 << *(_DWORD *)(a1 + 12) == *(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 40)) {
        break;
      }
      if (v1[2] == ++v4)
      {
        unsigned int v7 = 0x4000;
        int v8 = 1;
        goto LABEL_12;
      }
    }
  }
  if ((int)v4 >= (int)v2)
  {
    unsigned int v7 = 0x4000;
    int v8 = 1;
  }
  else
  {
    int v8 = 0;
    unsigned int v7 = v1[4 * v4 + 8] & 0xFFFFFFF;
  }
  LODWORD(v2) = v4;
LABEL_12:
  unsigned int v48 = 0;
  uint64_t v9 = (*(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 40)) >> *(_DWORD *)(a1 + 12);
  size_t v10 = v7;
  uint64_t v11 = malloc_type_malloc(v7, 0xBC0410BFuLL);
  unsigned int v47 = v9;
  uint64_t v12 = fd_pread(*(_DWORD **)(a1 + 848), v11, v10, v9 << *(_DWORD *)(a1 + 12));
  if (v12 == v10)
  {
    unsigned int v13 = v11[3];
    if ((v13 & 0xF0) != 0) {
      char v14 = v8;
    }
    else {
      char v14 = 1;
    }
    if ((v14 & 1) == 0)
    {
      uint64_t v40 = __si_assert_copy_extra_2445(0, -1);
      __int16 v41 = v40;
      uint64_t v42 = "";
      if (v40) {
        uint64_t v42 = v40;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 1232, "do_string_update || (flags & 0x000000f0)==0", v42);
      free(v41);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    *(void *)stat buf = 0;
    if (_page_alloc_fetch(a1, (int8x16_t **)buf, v10, &v48, &v49, 0))
    {
      int updated = 28;
      goto LABEL_45;
    }
    unsigned int v43 = v13;
    uint64_t v44 = (uint64_t)v11;
    unint64_t v45 = v10;
    free(*(void **)buf);
    uint64_t v20 = v48;
    int v46 = v8;
    if ((v8 & 1) != 0 || (uint64_t v21 = *(void *)(a1 + 928), v22 = *(_DWORD *)(v21 + 220), v22 < 1))
    {
LABEL_35:
      uint64_t v11 = (_DWORD *)v44;
      LODWORD(v10) = v45;
      uint64_t v31 = fd_pwrite(*(void *)(a1 + 848), v44, v45, v20 << *(_DWORD *)(a1 + 12));
      LOBYTE(v8) = v46;
      if (v31 == v45) {
        int v32 = v46;
      }
      else {
        int v32 = 0;
      }
      if (v31 == v45) {
        int updated = 0;
      }
      else {
        int updated = 28;
      }
      if (v32 == 1)
      {
        if ((*(unsigned char *)(a1 + 804) & 0x14) != 0) {
          int updated = 0;
        }
        else {
          int updated = update_string_table(a1, v47, v20, v43);
        }
      }
LABEL_45:
      free(v11);
      if (updated) {
        return 28;
      }
      goto LABEL_46;
    }
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 63;
    while (1)
    {
      int v30 = *(_DWORD *)(v21 + 4 * v25);
      if (v30 == v20)
      {
        *(_DWORD *)(v21 + 4 * v25) = 0;
        uint64_t v26 = v21 + v23;
        *(void *)(v26 + 296) = 0;
        *(_DWORD *)(v26 + 304) = 0;
        *(void *)(v26 + 312) = 0;
        uint64_t v27 = (void **)(v21 + v23 + 272);
        free(*(void **)(v21 + v23 + 280));
        *(void *)(v26 + 280) = 0;
        uint64_t v28 = *v27;
      }
      else
      {
        if (v30 != v47) {
          goto LABEL_30;
        }
        *(_DWORD *)(v21 + 4 * v25) = v20;
        uint64_t v28 = *(void **)(v21 + v23 + 280);
        if (!v28) {
          goto LABEL_30;
        }
        uint64_t v27 = (void **)(v21 + 48 * v24 + 280);
      }
      free(v28);
      int32x2_t *v27 = 0;
      int v22 = *(_DWORD *)(v21 + 220);
LABEL_30:
      ++v24;
      uint64_t v29 = v25 - 62;
      ++v25;
      v23 += 48;
      if (v29 >= v22) {
        goto LABEL_35;
      }
    }
  }
  uint64_t v16 = v12;
  *(_DWORD *)(a1 + 4) |= 4u;
  int v17 = *__error();
  int v18 = *__error();
  uint64_t v19 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)stat buf = 136316674;
    *(void *)&uint8_t buf[4] = "db_shove_page";
    __int16 v51 = 1024;
    int v52 = 1221;
    __int16 v53 = 1024;
    *(_DWORD *)uint64_t v54 = v47;
    *(_WORD *)&v54[4] = 1024;
    *(_DWORD *)&v54[6] = v17;
    *(_WORD *)uint64_t v55 = 2080;
    *(void *)&v55[2] = a1 + 324;
    *(_WORD *)&v55[10] = 2048;
    *(void *)&v55[12] = v16;
    __int16 v56 = 2048;
    size_t v57 = v10;
    _os_log_error_impl(&dword_1BD672000, v19, OS_LOG_TYPE_ERROR, "%s:%d: Failed reading pgnum %d error:%d (%s) %zd != %zd", buf, 0x3Cu);
  }
  *__error() = v18;
  *__error() = v17;
  if (!*__error()) {
    *__error() = 22;
  }
  free(v11);
  if (*__error()) {
    return 28;
  }
LABEL_46:
  __int16 v33 = malloc_type_zone_malloc((malloc_zone_t *)sdb_map_zone, (*(_DWORD *)(a1 + 40) + v10), 0x1C12B017uLL);
  if (v33)
  {
    int v34 = v33;
    memcpy(v33, v1, *(unsigned int *)(a1 + 40));
    if ((v8 & 1) == 0) {
      v34[4 * v2 + 7] = v48;
    }
    *(_DWORD *)(a1 + 40) += v10;
    v34[1] += v10;
    free(v1);
    v34[3] |= 1u;
    *(void *)(a1 + 856) = v34;
    uint64_t v35 = (((uint64_t)(int)v34[1] << 28) - 0x140000000) >> 32;
    if (v35 > (int)v34[2] + 1) {
      return 0;
    }
    int v37 = *__error();
    int64_t v38 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      int v39 = v34[2] + 1;
      *(_DWORD *)stat buf = 136316162;
      *(void *)&uint8_t buf[4] = "map_check_size";
      __int16 v51 = 1024;
      int v52 = 1411;
      __int16 v53 = 2080;
      *(void *)uint64_t v54 = a1 + 324;
      *(_WORD *)&v54[8] = 1024;
      *(_DWORD *)uint64_t v55 = v39;
      *(_WORD *)&v55[4] = 2048;
      *(void *)&v55[6] = v35;
      _os_log_error_impl(&dword_1BD672000, v38, OS_LOG_TYPE_ERROR, "%s:%d: %s : map_check_size: ERR FATAL: too many entries! %d / %ld\n", buf, 0x2Cu);
    }
    *__error() = v37;
  }
  return 28;
}

uint64_t update_string_table(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  int v8 = *__error();
  uint64_t v9 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 67109376;
    unsigned int v37 = a2;
    __int16 v38 = 1024;
    int v39 = a3;
    _os_log_impl(&dword_1BD672000, v9, OS_LOG_TYPE_DEFAULT, "Moving string page from %d to %d", buf, 0xEu);
  }
  int v34 = a3;
  uint64_t v10 = 0;
  *__error() = v8;
  uint64_t v11 = a1 + 880;
  do
  {
    if ((db_string_page_flags[v10] & a4) != 0)
    {
      uint64_t v12 = a4;
      lock = (os_unfair_lock_s *)(*(void *)(v11 + 8 * v10) + 68);
      os_unfair_lock_lock(lock);
      unsigned int v13 = *(int **)(v11 + 8 * v10);
      uint64_t v14 = *((void *)v13 + 3);
      uint64_t v15 = a1;
      uint64_t v16 = a1 + 4 * v10;
      unsigned int v19 = *(_DWORD *)(v16 + 48);
      int v18 = (_DWORD *)(v16 + 48);
      unsigned int v17 = v19;
      int v20 = *v13;
      if (*v13 == a2)
      {
        *unsigned int v13 = v34;
        if (dword_1E9FC90C0 >= 5)
        {
          int v33 = *__error();
          log = _SILogForLogForCategory(7);
          if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)stat buf = 67109632;
            unsigned int v37 = a2;
            __int16 v38 = 1024;
            int v39 = v34;
            __int16 v40 = 1024;
            int v41 = v10;
            _os_log_impl(&dword_1BD672000, log, OS_LOG_TYPE_DEFAULT, "Change dirty string page %d to %d (%d)", buf, 0x14u);
          }
          *__error() = v33;
        }
      }
      if (*v18 == a2)
      {
        *int v18 = v34;
        if (dword_1E9FC90C0 >= 5)
        {
          int v30 = *__error();
          uint64_t v31 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)stat buf = 67109632;
            unsigned int v37 = a2;
            __int16 v38 = 1024;
            int v39 = v34;
            __int16 v40 = 1024;
            int v41 = v10;
            _os_log_impl(&dword_1BD672000, v31, OS_LOG_TYPE_DEFAULT, "Change first string page %d to %d (%d)", buf, 0x14u);
          }
          uint64_t v23 = 0;
          *__error() = v30;
        }
        else
        {
          uint64_t v23 = 0;
        }
        goto LABEL_24;
      }
      if (v14)
      {
        while (1)
        {
          unsigned int v21 = *(_DWORD *)(v14 + 20);
          if (v21 == a2) {
            break;
          }
          uint64_t v14 = *(void *)(v14 + 24);
          if (!v14) {
            goto LABEL_4;
          }
          unsigned int v17 = v21;
        }
        *(_DWORD *)(v14 + 20) = v34;
        int v22 = *(_DWORD *)(v14 + 4);
        if (v22 == 0x4000) {
          int v22 = 0;
        }
        else {
          *(_DWORD *)(v14 + 4) = 0x4000;
        }
        uint64_t v23 = page_release(v15, (_DWORD *)v14, v17, 5u, v22);
        if (dword_1E9FC90C0 >= 5)
        {
          int v28 = *__error();
          uint64_t v29 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)stat buf = 67109376;
            unsigned int v37 = v17;
            __int16 v38 = 1024;
            int v39 = v10;
            _os_log_impl(&dword_1BD672000, v29, OS_LOG_TYPE_DEFAULT, "Push chain string page %d to disk (%d)", buf, 0xEu);
          }
          *__error() = v28;
          if (v22) {
LABEL_23:
          }
            *(_DWORD *)(v14 + 4) = v22;
        }
        else if (v22)
        {
          goto LABEL_23;
        }
LABEL_24:
        os_unfair_lock_unlock(lock);
        return v23;
      }
LABEL_4:
      if (v20 == a2)
      {
        uint64_t v25 = __si_assert_copy_extra_2445(0, -1);
        uint64_t v26 = v25;
        uint64_t v27 = "";
        if (v25) {
          uint64_t v27 = v25;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 11070, "!updatedDirty", v27);
        free(v26);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      os_unfair_lock_unlock(lock);
      a1 = v15;
      a4 = v12;
    }
    ++v10;
  }
  while (v10 != 5);
  return 2;
}

uint64_t ___page_fetch_with_fd_block_invoke(uint64_t a1, unsigned int *a2)
{
  return _flush_cache_entry(*(void *)(a1 + 32), 0, a2, *(_DWORD *)(a1 + 40) & 0x4000);
}

xpc_object_t ___page_fetch_with_fd_block_invoke_204(uint64_t a1)
{
  xpc_object_t empty = xpc_dictionary_create_empty();
  uint64_t v3 = strstr((char *)(*(void *)(a1 + 32) + 324), "Library/Spotlight/CoreSpotlight");
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = "invalid";
  }
  xpc_dictionary_set_string(empty, "name", v4);
  xpc_dictionary_set_uint64(empty, "pgoff", (unint64_t)*(unsigned int *)(a1 + 48) << *(_DWORD *)(*(void *)(a1 + 32) + 12));
  xpc_dictionary_set_uint64(empty, "pgsize", *(unsigned int *)(*(void *)(a1 + 32) + 44));
  xpc_dictionary_set_int64(empty, "signature", **(int **)(a1 + 40));
  xpc_dictionary_set_uint64(empty, "size", *(int *)(*(void *)(a1 + 40) + 4));
  xpc_dictionary_set_int64(empty, "used_bytes", *(int *)(*(void *)(a1 + 40) + 8));
  xpc_dictionary_set_int64(empty, "flags", *(int *)(*(void *)(a1 + 40) + 12));
  return empty;
}

uint64_t map_update(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7, char a8)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  int v8 = *(unsigned int **)(a1 + 856);
  uint64_t v9 = v8[2];
  if (!v9) {
    return 2;
  }
  int v16 = v8[4];
  if (v16 >= (int)v9
    || (unsigned int v17 = &v8[4 * v16], v19 = *(void *)(v17 + 5), v18 = (uint64_t)(v17 + 5), v19 != a4)
    || a6 != v8[4 * v16 + 8] >> 28)
  {
    uint64_t v20 = (int)v9;
    if ((int)v9 >= 1)
    {
      int v21 = 0;
      while (1)
      {
        if ((int)v9 + v21 < 0 != __OFADD__(v9, v21)) {
          int v22 = v9 + v21 + 1;
        }
        else {
          int v22 = v9 + v21;
        }
        uint64_t v23 = (v22 >> 1);
        int v24 = a6 - (v8[4 * (int)v23 + 8] >> 28);
        if (v24)
        {
          uint64_t v25 = v24;
          uint64_t v26 = v23;
          if ((v25 & 0x8000000000000000) == 0)
          {
LABEL_15:
            if (!v25) {
              goto LABEL_20;
            }
            int v21 = v23 + 1;
            uint64_t v26 = v9;
          }
        }
        else
        {
          uint64_t v25 = a4 - *(void *)&v8[4 * ((uint64_t)v22 >> 1) + 5];
          uint64_t v26 = v23;
          if ((v25 & 0x8000000000000000) == 0) {
            goto LABEL_15;
          }
        }
        uint64_t v9 = v26;
        if (v21 >= (int)v26)
        {
          BOOL v28 = v25 > 0;
          goto LABEL_21;
        }
      }
    }
    LODWORD(v23) = 0;
LABEL_20:
    BOOL v28 = 0;
LABEL_21:
    BOOL v29 = v20 - 1 > (int)v23 && v28;
    int v16 = v23 + v29;
    v8[4] = v23 + v29;
    uint64_t v18 = (uint64_t)&v8[4 * (int)v23 + 5 + 4 * v29];
  }
  if (*(_DWORD *)(v18 + 8) == a2)
  {
    if (*(void *)v18 == a4)
    {
LABEL_31:
      if (dword_1E9FC90C0 >= 5)
      {
        int v45 = *__error();
        int v46 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
        {
          int v47 = 136315906;
          unsigned int v48 = (const char *)(a1 + 324);
          __int16 v49 = 1024;
          *(_DWORD *)uint64_t v50 = a2;
          *(_WORD *)&v50[4] = 2048;
          *(void *)&v50[6] = a4;
          *(_WORD *)&v50[14] = 2048;
          *(void *)&v50[16] = a5;
          _os_log_impl(&dword_1BD672000, v46, OS_LOG_TYPE_DEFAULT, "%s : map_update: update pgnum %d oid (%.16llx) to(%.16llx)\n", (uint8_t *)&v47, 0x26u);
        }
        *__error() = v45;
      }
      uint64_t result = 0;
      *(void *)uint64_t v18 = a5;
      *(_DWORD *)(v18 + 12) = *(_DWORD *)(v18 + 12) & 0xFFFFFFF | (a7 << 28);
      v8[3] |= 1u;
      return result;
    }
    if (a8)
    {
      int v30 = *__error();
      uint64_t v31 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v32 = *(void *)v18;
        int v47 = 136315906;
        unsigned int v48 = (const char *)(a1 + 324);
        __int16 v49 = 2048;
        *(void *)uint64_t v50 = a4;
        *(_WORD *)&v50[8] = 2048;
        *(void *)&v50[10] = v32;
        *(_WORD *)&v50[18] = 2048;
        *(void *)&v50[20] = a5;
        _os_log_impl(&dword_1BD672000, v31, OS_LOG_TYPE_DEFAULT, "%s : map_update: update end old oid %.16llx (%.16llx) to (%.16llx)\n", (uint8_t *)&v47, 0x2Au);
      }
      *__error() = v30;
      goto LABEL_31;
    }
    int v35 = *__error();
    int64_t v36 = _SILogForLogForCategory(7);
    BOOL v37 = os_log_type_enabled(v36, OS_LOG_TYPE_ERROR);
    if (v16 < 1)
    {
      if (v37)
      {
        uint64_t v44 = *(void *)v18;
        int v47 = 136316674;
        unsigned int v48 = "map_update";
        __int16 v49 = 1024;
        *(_DWORD *)uint64_t v50 = 1754;
        *(_WORD *)&v50[4] = 2080;
        *(void *)&v50[6] = a1 + 324;
        *(_WORD *)&v50[14] = 2048;
        *(void *)&v50[16] = a4;
        *(_WORD *)&v50[24] = 2048;
        *(void *)&v50[26] = v44;
        __int16 v51 = 2048;
        uint64_t v52 = a5;
        __int16 v53 = 1024;
        int v54 = a2;
        __int16 v40 = "%s:%d: %s : ERR: map_update: did not find old oid %.16llx (%.16llx) dropping update to (%.16llx), pgnum: 0x%x\n";
        int v41 = v36;
        uint32_t v42 = 64;
        goto LABEL_42;
      }
    }
    else if (v37)
    {
      uint64_t v38 = *(void *)v18;
      uint64_t v39 = *(void *)(*(void *)(a1 + 856) + 16 * (v16 - 1) + 20);
      int v47 = 136316930;
      unsigned int v48 = "map_update";
      __int16 v49 = 1024;
      *(_DWORD *)uint64_t v50 = 1752;
      *(_WORD *)&v50[4] = 2080;
      *(void *)&v50[6] = a1 + 324;
      *(_WORD *)&v50[14] = 2048;
      *(void *)&v50[16] = a4;
      *(_WORD *)&v50[24] = 2048;
      *(void *)&v50[26] = v38;
      __int16 v51 = 2048;
      uint64_t v52 = a5;
      __int16 v53 = 1024;
      int v54 = a2;
      __int16 v55 = 2048;
      uint64_t v56 = v39;
      __int16 v40 = "%s:%d: %s : ERR: map_update: did not find old oid %.16llx (%.16llx) dropping update to (%.16llx), pgnum: 0x%"
            "x\n"
            ", prev key %.16llx";
      int v41 = v36;
      uint32_t v42 = 74;
LABEL_42:
      _os_log_error_impl(&dword_1BD672000, v41, OS_LOG_TYPE_ERROR, v40, (uint8_t *)&v47, v42);
    }
    *__error() = v35;
    return 2;
  }
  int v33 = *__error();
  int v34 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    int v43 = *(_DWORD *)(v18 + 8);
    int v47 = 136316162;
    unsigned int v48 = "map_update";
    __int16 v49 = 1024;
    *(_DWORD *)uint64_t v50 = 1739;
    *(_WORD *)&v50[4] = 2080;
    *(void *)&v50[6] = a1 + 324;
    *(_WORD *)&v50[14] = 1024;
    *(_DWORD *)&v50[16] = v43;
    *(_WORD *)&v50[20] = 1024;
    *(_DWORD *)&v50[22] = a2;
    _os_log_error_impl(&dword_1BD672000, v34, OS_LOG_TYPE_ERROR, "%s:%d: %s : ERR: map_update: page offset doesn't match! 0x%x != 0x%x\n", (uint8_t *)&v47, 0x28u);
  }
  *__error() = v33;
  rebuild_map_locked(a1);
  return map_force(a1, a2, a3, a5, a7);
}

void *map_delete(void *result, uint64_t a2, int a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (int32x2_t *)result[107];
  int v4 = v3[1].i32[0];
  if (v4)
  {
    unsigned int v7 = result;
    int v8 = v3[2].i32[0];
    if (v8 >= v4
      || (uint64_t v9 = &v3[2 * v8], v11 = *(uint64_t *)((char *)&v9[2] + 4), v10 = (uint64_t *)((char *)&v9[2] + 4), v11 != a2)
      || a3 != (unsigned __int32)v3[2 * v8 + 4].i32[0] >> 28)
    {
      if (v4 >= 1)
      {
        int v12 = 0;
        uint64_t v13 = v3[1].u32[0];
        while (1)
        {
          if ((int)v13 + v12 < 0 != __OFADD__(v13, v12)) {
            int v14 = v13 + v12 + 1;
          }
          else {
            int v14 = v13 + v12;
          }
          uint64_t v15 = (v14 >> 1);
          int v16 = a3 - ((unsigned __int32)v3[2 * (int)v15 + 4].i32[0] >> 28);
          if (v16)
          {
            uint64_t v17 = v16;
            uint64_t v18 = v15;
            if ((v17 & 0x8000000000000000) == 0)
            {
LABEL_15:
              if (!v17) {
                goto LABEL_19;
              }
              int v12 = v15 + 1;
              uint64_t v18 = v13;
            }
          }
          else
          {
            uint64_t v17 = a2 - *(void *)((char *)&v3[2 * ((uint64_t)v14 >> 1) + 2] + 4);
            uint64_t v18 = v15;
            if ((v17 & 0x8000000000000000) == 0) {
              goto LABEL_15;
            }
          }
          uint64_t v13 = v18;
          if (v12 >= (int)v18)
          {
            BOOL v19 = v17 > 0;
            goto LABEL_20;
          }
        }
      }
      LODWORD(v15) = 0;
LABEL_19:
      BOOL v19 = 0;
LABEL_20:
      BOOL v20 = v4 - 1 > (int)v15 && v19;
      int v8 = v15 + v20;
      v3[2].i32[0] = v8;
      int v21 = &v3[2 * v8];
      uint64_t v22 = *(uint64_t *)((char *)&v21[2] + 4);
      uint64_t v10 = (uint64_t *)((char *)&v21[2] + 4);
      if (v22 != a2) {
        goto LABEL_26;
      }
    }
    if (a3 == *((_DWORD *)v10 + 3) >> 28)
    {
      uint64_t result = memmove((char *)&v3[2 * v8 + 2] + 4, (char *)&v3[2 * v8 + 4] + 4, 16 * (v4 + ~v8));
      int32x2_t v23 = v3[1];
      v24.i32[0] = vadd_s32(v23, (int32x2_t)-1).u32[0];
      v24.i32[1] = (*(void *)&v23 | 0x100000001uLL) >> 32;
      v3[1] = v24;
    }
    else
    {
LABEL_26:
      int v25 = *__error();
      uint64_t v26 = _SILogForLogForCategory(7);
      os_log_type_t v27 = 2 * (dword_1E9FC90C0 < 4);
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = *v10;
        int v29 = *((_DWORD *)v10 + 3) >> 28;
        int v30 = 136316162;
        uint64_t v31 = (char *)v7 + 324;
        __int16 v32 = 2048;
        uint64_t v33 = a2;
        __int16 v34 = 2048;
        uint64_t v35 = v28;
        __int16 v36 = 1024;
        int v37 = a3;
        __int16 v38 = 1024;
        int v39 = v29;
        _os_log_impl(&dword_1BD672000, v26, v27, "%s : ERR: map_delete: trying to delete non-existent oid %.16llx (%.16llx), (%d, %d)\n", (uint8_t *)&v30, 0x2Cu);
      }
      uint64_t result = __error();
      *(_DWORD *)uint64_t result = v25;
    }
  }
  return result;
}

void rebuild_map_locked(uint64_t a1)
{
  __int16 v51 = 0;
  uint64_t v2 = *(void *)(a1 + 856);
  *(_DWORD *)(v2 + 8) = 0;
  *(_DWORD *)(v2 + 16) = 0;
  uint64_t v3 = *(unsigned int *)(a1 + 36);
  uint64_t v4 = *(unsigned int *)(a1 + 40);
  uint64_t v5 = (int8x16_t *)malloc_type_valloc(*(unsigned int *)(a1 + 44), 0xC38BB2D0uLL);
  if (!v5) {
    return;
  }
  unsigned int v6 = v5;
  int v7 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v8 = setThreadIdAndInfo(-1, (long long *)sSDBExceptionCallbacks, a1, 0x40000000, v7);
  unsigned int v49 = HIDWORD(v8);
  unsigned int v50 = v8;
  unint64_t v48 = __PAIR64__(v9, v10);
  uint64_t v11 = *(void *)&threadData[18 * v8 + 2];
  uint64_t v12 = v11 + 320 * HIDWORD(v8);
  *(unsigned char *)(v12 + 216) = 0;
  int v13 = *(_DWORD *)(v12 + 312);
  int v14 = *(void (**)(void))(v12 + 224);
  if (v14) {
    v14(*(void *)(v11 + 320 * HIDWORD(v8) + 288));
  }
  unsigned int v47 = v50;
  unsigned int v46 = v49;
  unint64_t v45 = v48;
  if (_setjmp((int *)v12))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)stat buf = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
    }
    *(_DWORD *)(v12 + 312) = v13;
    if (__THREAD_SLOT_KEY)
    {
      uint64_t v15 = pthread_getspecific(__THREAD_SLOT_KEY);
      if (!v15) {
        goto LABEL_52;
      }
    }
    else
    {
      makeThreadId();
      uint64_t v15 = pthread_getspecific(__THREAD_SLOT_KEY);
      if (!v15) {
        goto LABEL_52;
      }
    }
    int v16 = v15;
    if ((unint64_t)v15 < 0x801)
    {
LABEL_10:
      uint64_t v17 = (uint64_t)v16 - 1;
      uint64_t v18 = &threadData[18 * ((uint64_t)v16 - 1)];
      unsigned int v20 = v18[14];
      BOOL v19 = v18 + 14;
      if (v20 > v45)
      {
        do
          CIOnThreadCleanUpPop(v17);
        while (*v19 > v45);
      }
      dropThreadId(v47, 1, v7);
      CICleanUpReset(v47, HIDWORD(v45));
      goto LABEL_49;
    }
LABEL_52:
    makeThreadId();
    int v16 = pthread_getspecific(__THREAD_SLOT_KEY);
    goto LABEL_10;
  }
  off_t v21 = v4 + v3;
  for (uint64_t i = v6; ; v21 += i->i32[1])
  {
    while (1)
    {
      uint64_t v23 = *(void *)(a1 + 928);
      unint64_t v24 = *(unsigned int *)(v23 + 220);
      if ((int)v24 < 1) {
        break;
      }
      uint64_t v25 = v21 >> *(_DWORD *)(a1 + 12);
      uint64_t v26 = 63;
      do
      {
        int v27 = *(_DWORD *)(v23 + 4 * v26);
        if (v26 - 62 >= v24) {
          break;
        }
        ++v26;
      }
      while (v27 != v25);
      if (v27 != v25) {
        break;
      }
LABEL_14:
      v21 += 0x4000;
    }
    uint64_t v28 = fd_pread(*(_DWORD **)(a1 + 848), i, *(unsigned int *)(a1 + 44), v21);
    if (v28 <= 0) {
      break;
    }
    if (i->i32[0] != 846226020 && i->i32[0] != 1684172850) {
      goto LABEL_14;
    }
    if (db2_page_uncompress_swap(a1, i, &v51, 0)) {
      goto LABEL_37;
    }
    if (v51) {
      int v30 = (int8x16_t *)v51;
    }
    else {
      int v30 = i;
    }
    uint64_t i = v30;
    *(void *)stat buf = 0;
    int v44 = 0;
    get_max_oid(a1, (uint64_t)v30, (unint64_t *)buf, &v44);
    if (*(void *)buf) {
      map_force(a1, v21 >> *(_DWORD *)(a1 + 12), i[1].i32[0], *(uint64_t *)buf, v44);
    }
    if (v51)
    {
      free(v51);
      __int16 v51 = 0;
      uint64_t i = v6;
    }
  }
  if (v28 < 0) {
    *(_DWORD *)(a1 + 4) |= 4u;
  }
LABEL_37:
  uint64_t v31 = 0;
  uint64_t v32 = *(void *)(a1 + 928);
  v39[0] = MEMORY[0x1E4F143A8];
  v39[1] = 0x40000000;
  uint64_t v40 = __rebuild_map_locked_block_invoke;
  int v41 = &__block_descriptor_tmp_155_11816;
  uint64_t v42 = a1;
  int v43 = i;
  uint64_t v33 = (void *)(v32 + 312);
  do
  {
    if (v31 >= *(int *)(v32 + 220)) {
      break;
    }
    if (v31 == *(_DWORD *)(v32 + 224))
    {
      int v34 = 0;
    }
    else
    {
      int v34 = *(_DWORD *)(v32 + 4 * v31 + 252);
      if (v34)
      {
        *(_OWORD *)&buf[16] = 0u;
        long long v53 = 0u;
        *(_OWORD *)stat buf = 0u;
        *(_DWORD *)stat buf = v34;
        *(_OWORD *)&buf[8] = *(_OWORD *)(v33 - 5);
        *(_DWORD *)&buf[24] = *((_DWORD *)v33 - 6);
        *(void *)&long long v53 = *(v33 - 2);
        DWORD2(v53) = *((_DWORD *)v33 - 2);
        uint64_t v54 = *v33;
        int v34 = v40((uint64_t)v39, (uint64_t)buf);
      }
    }
    ++v31;
    v33 += 6;
  }
  while (!v34);
  uint64_t v35 = *(void *)&threadData[18 * v47 + 2];
  unsigned int v36 = v46;
  uint64_t v37 = v35 + 320 * v46;
  *(_DWORD *)(v37 + 312) = v13;
  __int16 v38 = *(void (**)(void))(v37 + 232);
  if (v38) {
    v38(*(void *)(v35 + 320 * v36 + 288));
  }
  dropThreadId(v47, 0, v7);
  if (v51) {
    free(v51);
  }
LABEL_49:
  free(v6);
}

uint64_t map_force(uint64_t a1, int a2, int a3, uint64_t a4, int a5)
{
  uint64_t result = map_check_size(a1);
  if (!result)
  {
    uint64_t v11 = *(_DWORD **)(a1 + 856);
    int v12 = v11[2];
    if (!v12)
    {
      int v13 = 0;
      v11[4] = 0;
      goto LABEL_19;
    }
    int v13 = v11[4];
    if (v13 >= v12
      || (v14 = &v11[4 * v13], v16 = *(void *)(v14 + 5), uint64_t v15 = (uint64_t)(v14 + 5), v16 != a4)
      || a5 != v11[4 * v13 + 8] >> 28)
    {
      if (v12 >= 1)
      {
        int v17 = 0;
        uint64_t v18 = v11[2];
        while (1)
        {
          if ((int)v18 + v17 < 0 != __OFADD__(v18, v17)) {
            int v19 = v18 + v17 + 1;
          }
          else {
            int v19 = v18 + v17;
          }
          uint64_t v20 = (v19 >> 1);
          int v21 = a5 - (v11[4 * (int)v20 + 8] >> 28);
          if (v21)
          {
            uint64_t v22 = v21;
            uint64_t v23 = v20;
            if ((v22 & 0x8000000000000000) == 0)
            {
LABEL_16:
              if (!v22) {
                goto LABEL_22;
              }
              int v17 = v20 + 1;
              uint64_t v23 = v18;
            }
          }
          else
          {
            uint64_t v22 = a4 - *(void *)&v11[4 * ((uint64_t)v19 >> 1) + 5];
            uint64_t v23 = v20;
            if ((v22 & 0x8000000000000000) == 0) {
              goto LABEL_16;
            }
          }
          uint64_t v18 = v23;
          if (v17 >= (int)v23)
          {
            BOOL v25 = v22 > 0;
            goto LABEL_23;
          }
        }
      }
      LODWORD(v20) = 0;
LABEL_22:
      BOOL v25 = 0;
LABEL_23:
      if (v12 - 1 <= (int)v20) {
        BOOL v25 = 0;
      }
      int v13 = v20 + v25;
      v11[4] = v20 + v25;
      uint64_t v15 = (uint64_t)&v11[4 * (int)v20 + 5 + 4 * v25];
    }
    LODWORD(v26) = a5 - (*(_DWORD *)(v15 + 12) >> 28);
    if (v26)
    {
      uint64_t v26 = (int)v26;
      if (v12 < 1)
      {
LABEL_32:
        if (*(_DWORD *)(v15 + 8) == a2)
        {
          v11[4 * v13 + 8] = v11[4 * v13 + 8] & 0xFFFFFFF | (a5 << 28);
          *(void *)uint64_t v15 = a4;
          goto LABEL_34;
        }
        uint64_t v27 = v13 + 1;
        if (v12 - 1 != v13 || v26 < 1)
        {
          memmove(&v11[4 * v27 + 5], &v11[4 * v13 + 5], 16 * (v12 - v13));
          int v12 = v11[2];
        }
        else
        {
          v11[4] = v27;
          ++v13;
        }
LABEL_19:
        unint64_t v24 = &v11[4 * v13];
        *(void *)(v24 + 5) = a4;
        v24[7] = a2;
        v24[8] = a3 & 0xFFFFFFF | (a5 << 28);
        v11[2] = v12 + 1;
LABEL_34:
        uint64_t result = 0;
        v11[3] |= 1u;
        return result;
      }
    }
    else
    {
      uint64_t v26 = a4 - *(void *)v15;
      if (v12 < 1) {
        goto LABEL_32;
      }
    }
    if (!v26) {
      return 0;
    }
    goto LABEL_32;
  }
  return result;
}

uint64_t get_max_oid(uint64_t result, uint64_t a2, unint64_t *a3, int *a4)
{
  if (*(_DWORD *)a2 != 1684172850 || (*(unsigned char *)(a2 + 12) & 0xF0) != 0 || (uint64_t v4 = *(int *)(a2 + 8), (int)v4 < 21))
  {
    unsigned int v7 = 0;
  }
  else
  {
    unint64_t v5 = a2 + v4;
    unint64_t v6 = a2 + 20;
    do
    {
      unint64_t v11 = v6 + 4;
      unint64_t v12 = *(unsigned __int8 *)(v6 + 4);
      if (*(char *)(v6 + 4) < 0)
      {
        unsigned int v14 = *(unsigned __int8 *)(v6 + 4);
        if (v14 > 0xBF)
        {
          if (v14 > 0xDF)
          {
            if (v14 > 0xEF)
            {
              if (v14 > 0xF7)
              {
                if (v14 > 0xFB)
                {
                  if (v14 > 0xFD)
                  {
                    if (v14 == 255)
                    {
                      unint64_t v12 = *(void *)(v6 + 5);
                      uint64_t v13 = 9;
                    }
                    else
                    {
                      unint64_t v12 = ((unint64_t)*(unsigned __int8 *)(v6 + 5) << 48) | ((unint64_t)*(unsigned __int8 *)(v6 + 6) << 40) | ((unint64_t)*(unsigned __int8 *)(v6 + 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v6 + 8) << 24) | ((unint64_t)*(unsigned __int8 *)(v6 + 9) << 16) | ((unint64_t)*(unsigned __int8 *)(v6 + 10) << 8) | *(unsigned __int8 *)(v6 + 11);
                      uint64_t v13 = 8;
                    }
                  }
                  else
                  {
                    unint64_t v12 = ((v12 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(v6 + 5) << 40) | ((unint64_t)*(unsigned __int8 *)(v6 + 6) << 32) | ((unint64_t)*(unsigned __int8 *)(v6 + 7) << 24) | ((unint64_t)*(unsigned __int8 *)(v6 + 8) << 16) | ((unint64_t)*(unsigned __int8 *)(v6 + 9) << 8) | *(unsigned __int8 *)(v6 + 10);
                    uint64_t v13 = 7;
                  }
                }
                else
                {
                  unint64_t v12 = ((v12 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(v6 + 5) << 32) | ((unint64_t)*(unsigned __int8 *)(v6 + 6) << 24) | ((unint64_t)*(unsigned __int8 *)(v6 + 7) << 16) | ((unint64_t)*(unsigned __int8 *)(v6 + 8) << 8) | *(unsigned __int8 *)(v6 + 9);
                  uint64_t v13 = 6;
                }
              }
              else
              {
                unint64_t v12 = ((v12 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v6 + 5) << 24) | ((unint64_t)*(unsigned __int8 *)(v6 + 6) << 16) | ((unint64_t)*(unsigned __int8 *)(v6 + 7) << 8) | *(unsigned __int8 *)(v6 + 8);
                uint64_t v13 = 5;
              }
            }
            else
            {
              unint64_t v12 = ((v12 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(v6 + 5) << 16) | ((unint64_t)*(unsigned __int8 *)(v6 + 6) << 8) | *(unsigned __int8 *)(v6 + 7);
              uint64_t v13 = 4;
            }
          }
          else
          {
            unint64_t v12 = ((v12 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(v6 + 5) << 8) | *(unsigned __int8 *)(v6 + 6);
            uint64_t v13 = 3;
          }
        }
        else
        {
          unint64_t v12 = *(unsigned __int8 *)(v6 + 5) | ((v12 & 0x3F) << 8);
          uint64_t v13 = 2;
        }
      }
      else
      {
        uint64_t v13 = 1;
      }
      *a3 = v12;
      unsigned int v7 = *(unsigned __int8 *)(v11 + v13);
      if (*(char *)(v11 + v13) < 0)
      {
        if (v7 < 0xC0)
        {
          uint64_t v8 = v13 + 1;
        }
        else
        {
          if (v7 >= 0xE0)
          {
            uint64_t v15 = __si_assert_copy_extra_2445(0, -1);
            uint64_t v16 = v15;
            int v17 = "";
            if (v15) {
              int v17 = v15;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v17);
            free(v16);
            if (__valid_fs(-1))
            {
              MEMORY[0xBAD] = -559038737;
              abort();
            }
            MEMORY[0xC00] = -559038737;
            abort();
          }
          uint64_t v8 = v13 + 2;
        }
        unsigned int v7 = *(unsigned __int8 *)(v11 + v8);
      }
      uint64_t v9 = (*(_DWORD *)v6 + 4);
      v6 += v9;
      if (v9) {
        BOOL v10 = v6 >= v5;
      }
      else {
        BOOL v10 = 1;
      }
    }
    while (!v10);
  }
  *a4 = *(_DWORD *)(result + 804) & (v7 >> 5) & 1;
  return result;
}

uint64_t __rebuild_map_locked_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  int v5 = 0;
  get_max_oid(*(void *)(a1 + 32), *(void *)(a2 + 8), (unint64_t *)&v6, &v5);
  if (v6) {
    map_force(*(void *)(a1 + 32), *(_DWORD *)a2, *(_DWORD *)(*(void *)(a1 + 40) + 16), v6, v5);
  }
  return 0;
}

uint64_t test_compress_obj(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = 0;
  int v6 = *a3 + 24;
  unsigned int v7 = malloc_type_malloc(v6, 0xCCCE0BEuLL);
  *unsigned int v7 = 1684172850;
  v7[1] = v6;
  v7[2] = v6;
  v7[3] = 4;
  v7[4] = a2;
  memcpy(v7 + 5, a3, (*a3 + 4));
  if (!page_compress(a1, (size_t)v7, (int8x16_t **)&v18, 0, (*(_DWORD *)(a1 + 804) & 2) != 0)
    || (uint64_t v8 = page_compress(a1, (size_t)v7, (int8x16_t **)&v18, 0, 2), !v8))
  {
    free(v7);
    free(v18);
    return 0;
  }
  uint64_t v9 = v8;
  if (dword_1E9FC90C0 >= 5)
  {
    int v11 = *__error();
    unint64_t v12 = _SILogForLogForCategory(7);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
LABEL_26:
      *__error() = v11;
      goto LABEL_4;
    }
    unint64_t v13 = *((unsigned __int8 *)a3 + 4);
    if ((char)a3[1] < 0)
    {
      unsigned int v14 = *((unsigned __int8 *)a3 + 4);
      if (v14 > 0xBF)
      {
        if (v14 > 0xDF)
        {
          if (v14 > 0xEF)
          {
            if (v14 > 0xF7)
            {
              if (v14 > 0xFB)
              {
                if (v14 > 0xFD)
                {
                  if (v14 == 255)
                  {
                    unint64_t v13 = *(void *)((char *)a3 + 5);
                    goto LABEL_25;
                  }
                  unint64_t v15 = ((unint64_t)*((unsigned __int8 *)a3 + 5) << 48) | ((unint64_t)*((unsigned __int8 *)a3 + 6) << 40) | ((unint64_t)*((unsigned __int8 *)a3 + 7) << 32) | ((unint64_t)*((unsigned __int8 *)a3 + 8) << 24) | ((unint64_t)*((unsigned __int8 *)a3 + 9) << 16) | ((unint64_t)*((unsigned __int8 *)a3 + 10) << 8);
                  uint64_t v16 = *((unsigned __int8 *)a3 + 11);
                }
                else
                {
                  unint64_t v15 = ((v13 & 1) << 48) | ((unint64_t)*((unsigned __int8 *)a3 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)a3 + 6) << 32) | ((unint64_t)*((unsigned __int8 *)a3 + 7) << 24) | ((unint64_t)*((unsigned __int8 *)a3 + 8) << 16) | ((unint64_t)*((unsigned __int8 *)a3 + 9) << 8);
                  uint64_t v16 = *((unsigned __int8 *)a3 + 10);
                }
              }
              else
              {
                unint64_t v15 = ((v13 & 3) << 40) | ((unint64_t)*((unsigned __int8 *)a3 + 5) << 32) | ((unint64_t)*((unsigned __int8 *)a3 + 6) << 24) | ((unint64_t)*((unsigned __int8 *)a3 + 7) << 16) | ((unint64_t)*((unsigned __int8 *)a3 + 8) << 8);
                uint64_t v16 = *((unsigned __int8 *)a3 + 9);
              }
            }
            else
            {
              unint64_t v15 = ((v13 & 7) << 32) | ((unint64_t)*((unsigned __int8 *)a3 + 5) << 24) | ((unint64_t)*((unsigned __int8 *)a3 + 6) << 16) | ((unint64_t)*((unsigned __int8 *)a3 + 7) << 8);
              uint64_t v16 = *((unsigned __int8 *)a3 + 8);
            }
          }
          else
          {
            unint64_t v15 = ((v13 & 0xF) << 24) | ((unint64_t)*((unsigned __int8 *)a3 + 5) << 16) | ((unint64_t)*((unsigned __int8 *)a3 + 6) << 8);
            uint64_t v16 = *((unsigned __int8 *)a3 + 7);
          }
        }
        else
        {
          unint64_t v15 = ((v13 & 0x1F) << 16) | ((unint64_t)*((unsigned __int8 *)a3 + 5) << 8);
          uint64_t v16 = *((unsigned __int8 *)a3 + 6);
        }
        unint64_t v13 = v15 | v16;
        goto LABEL_25;
      }
      unint64_t v13 = *((unsigned __int8 *)a3 + 5) | ((v13 & 0x3F) << 8);
    }
LABEL_25:
    int v17 = *a3 + 4;
    *(_DWORD *)stat buf = 67109888;
    int v20 = v9;
    __int16 v21 = 1024;
    int v22 = 2;
    __int16 v23 = 2048;
    unint64_t v24 = v13;
    __int16 v25 = 1024;
    int v26 = v17;
    _os_log_impl(&dword_1BD672000, v12, OS_LOG_TYPE_DEFAULT, "test_compress_obj: ERR %d: compressing %d dbo with oid 0x%llx (%d bytes)", buf, 0x1Eu);
    goto LABEL_26;
  }
LABEL_4:
  free(v7);
  return v9;
}

uint64_t map_insert(uint64_t a1, int a2, int a3, uint64_t a4, int a5)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t result = map_check_size(a1);
  if (!result)
  {
    int v11 = *(_DWORD **)(a1 + 856);
    int v12 = v11[4];
    int v13 = v11[2];
    if (v12 >= v13
      || (v14 = &v11[4 * v12], v16 = *(void *)(v14 + 5), uint64_t v15 = (uint64_t)(v14 + 5), v16 != a4)
      || a5 != v11[4 * v12 + 8] >> 28)
    {
      if (v13 >= 1)
      {
        int v17 = 0;
        uint64_t v18 = v11[2];
        while (1)
        {
          if ((int)v18 + v17 < 0 != __OFADD__(v18, v17)) {
            int v19 = v18 + v17 + 1;
          }
          else {
            int v19 = v18 + v17;
          }
          uint64_t v20 = (v19 >> 1);
          int v21 = a5 - (v11[4 * (int)v20 + 8] >> 28);
          if (v21)
          {
            uint64_t v22 = v21;
            uint64_t v23 = v20;
            if ((v22 & 0x8000000000000000) == 0)
            {
LABEL_15:
              if (!v22) {
                goto LABEL_19;
              }
              int v17 = v20 + 1;
              uint64_t v23 = v18;
            }
          }
          else
          {
            uint64_t v22 = a4 - *(void *)&v11[4 * ((uint64_t)v19 >> 1) + 5];
            uint64_t v23 = v20;
            if ((v22 & 0x8000000000000000) == 0) {
              goto LABEL_15;
            }
          }
          uint64_t v18 = v23;
          if (v17 >= (int)v23)
          {
            BOOL v24 = v22 > 0;
            goto LABEL_20;
          }
        }
      }
      LODWORD(v20) = 0;
LABEL_19:
      BOOL v24 = 0;
LABEL_20:
      if (v13 - 1 <= (int)v20) {
        BOOL v24 = 0;
      }
      int v12 = v20 + v24;
      v11[4] = v20 + v24;
      uint64_t v15 = (uint64_t)&v11[4 * (int)v20 + 5 + 4 * v24];
    }
    int v25 = a5 - (*(_DWORD *)(v15 + 12) >> 28);
    if (v25)
    {
      uint64_t v26 = v25;
LABEL_25:
      uint64_t v27 = v12;
      if (v26 >= 1 && v13 - 1 == v12)
      {
        v11[4] = v12 + 1;
        uint64_t v27 = v12 + 1;
LABEL_38:
        uint64_t result = 0;
        uint64_t v32 = &v11[4 * v27];
        *(void *)(v32 + 5) = a4;
        v32[7] = a2;
        v32[8] = a3 & 0xFFFFFFF | (a5 << 28);
        LODWORD(v32) = v11[3] | 1;
        v11[2] = v13 + 1;
        v11[3] = v32;
        return result;
      }
LABEL_37:
      memmove(&v11[4 * v12 + 9], &v11[4 * v27 + 5], 16 * (v13 - v12));
      int v13 = v11[2];
      goto LABEL_38;
    }
    uint64_t v26 = a4 - *(void *)v15;
    if (v26) {
      goto LABEL_25;
    }
    if (v13 <= 0)
    {
      uint64_t v27 = v12;
      goto LABEL_37;
    }
    int v29 = *__error();
    int v30 = _SILogForLogForCategory(7);
    os_log_type_t v31 = 2 * (dword_1E9FC90C0 < 4);
    if (os_log_type_enabled(v30, v31))
    {
      int v33 = 136315650;
      uint64_t v34 = a1 + 324;
      __int16 v35 = 1024;
      int v36 = v12;
      __int16 v37 = 2048;
      uint64_t v38 = a4;
      _os_log_impl(&dword_1BD672000, v30, v31, "%s : ERR: map_insert: key already present! idx %d %.16llx\n", (uint8_t *)&v33, 0x1Cu);
    }
    *__error() = v29;
    return 22;
  }
  return result;
}

uint64_t page_split(uint64_t a1, char *a2, unsigned int a3, size_t a4, __int16 a5)
{
  int v6 = a4;
  unsigned int v7 = a3;
  uint64_t v9 = a1;
  uint64_t v129 = *MEMORY[0x1E4F143B8];
  unsigned int v116 = a4;
  int v117 = a3;
  v114 = 0;
  __src = 0;
  value_out = 0;
  uint64_t v10 = _page_fetch_with_fd(a1, &value_out, a3, a4, 0, buf, 0xFFFFFFFFLL, 0);
  if (v10) {
    return v10;
  }
  int v12 = (char *)value_out;
  if ((*((unsigned char *)value_out + 12) & 0xF0) != 0)
  {
    int v103 = *__error();
    __int16 v104 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 136315650;
      *(void *)&uint8_t buf[4] = "page_split";
      __int16 v119 = 1024;
      *(_DWORD *)v120 = 4538;
      *(_WORD *)&v120[4] = 1024;
      *(_DWORD *)&v120[6] = v7;
      _os_log_error_impl(&dword_1BD672000, v104, OS_LOG_TYPE_ERROR, "%s:%d: page_split: ERR: tried to read attr name table data! pgnum 0x%x\n", buf, 0x18u);
    }
    *__error() = v103;
    int v105 = __si_assert_copy_extra_2445(0, -1);
    __int16 v106 = v105;
    if (v105) {
      uint64_t v107 = v105;
    }
    else {
      uint64_t v107 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "sdb2.c", 4539, v107);
    free(v106);
    goto LABEL_226;
  }
  uint64_t v13 = *((int *)value_out + 2);
  unsigned int v14 = (char *)value_out + v13;
  v114 = (char *)value_out + v13;
  uint64_t v16 = a2 + 4;
  int64_t v15 = a2[4];
  if ((v15 & 0x80) != 0)
  {
    if (v15 > 0xBF)
    {
      if (v15 > 0xDF)
      {
        if (v15 > 0xEF)
        {
          if (v15 > 0xF7)
          {
            if (v15 > 0xFB)
            {
              if (v15 > 0xFD)
              {
                if (v15 == 255)
                {
                  int64_t v15 = *(void *)(a2 + 5);
                  uint64_t v17 = 9;
                }
                else
                {
                  int64_t v15 = ((unint64_t)a2[5] << 48) | ((unint64_t)a2[6] << 40) | ((unint64_t)a2[7] << 32) | ((unint64_t)a2[8] << 24) | ((unint64_t)a2[9] << 16) | ((unint64_t)a2[10] << 8) | a2[11];
                  uint64_t v17 = 8;
                }
              }
              else
              {
                int64_t v15 = ((unint64_t)(v15 & 1) << 48) | ((unint64_t)a2[5] << 40) | ((unint64_t)a2[6] << 32) | ((unint64_t)a2[7] << 24) | ((unint64_t)a2[8] << 16) | ((unint64_t)a2[9] << 8) | a2[10];
                uint64_t v17 = 7;
              }
            }
            else
            {
              int64_t v15 = ((unint64_t)(v15 & 3) << 40) | ((unint64_t)a2[5] << 32) | ((unint64_t)a2[6] << 24) | ((unint64_t)a2[7] << 16) | ((unint64_t)a2[8] << 8) | a2[9];
              uint64_t v17 = 6;
            }
          }
          else
          {
            int64_t v15 = ((unint64_t)(v15 & 7) << 32) | ((unint64_t)a2[5] << 24) | ((unint64_t)a2[6] << 16) | ((unint64_t)a2[7] << 8) | a2[8];
            uint64_t v17 = 5;
          }
        }
        else
        {
          int64_t v15 = ((unint64_t)(v15 & 0xF) << 24) | ((unint64_t)a2[5] << 16) | ((unint64_t)a2[6] << 8) | a2[7];
          uint64_t v17 = 4;
        }
      }
      else
      {
        int64_t v15 = ((unint64_t)(v15 & 0x1F) << 16) | ((unint64_t)a2[5] << 8) | a2[6];
        uint64_t v17 = 3;
      }
    }
    else
    {
      int64_t v15 = a2[5] | ((unint64_t)(v15 & 0x3F) << 8);
      uint64_t v17 = 2;
    }
  }
  else
  {
    uint64_t v17 = 1;
  }
  unsigned int v18 = v16[v17];
  if (v16[v17] < 0)
  {
    if (v18 >= 0xC0)
    {
      if (v18 >= 0xE0) {
        goto LABEL_215;
      }
      uint64_t v19 = v17 + 2;
    }
    else
    {
      uint64_t v19 = v17 + 1;
    }
    unsigned int v18 = v16[v19];
  }
  uint64_t v20 = (char *)value_out + 20;
  v112 = a2;
  __int16 v111 = a5;
  if ((int)v13 < 21)
  {
    unint64_t v25 = 0;
    int v26 = 0;
    uint64_t v27 = (char *)value_out + v13;
    uint64_t v28 = (char *)value_out;
  }
  else
  {
    int v21 = *(_DWORD *)(v9 + 804);
    uint64_t v22 = (char *)value_out + 24;
    int64_t v23 = *((unsigned __int8 *)value_out + 24);
    if (*((char *)value_out + 24) < 0)
    {
      unsigned int v29 = *((unsigned __int8 *)value_out + 24);
      if (v29 > 0xBF)
      {
        if (v29 > 0xDF)
        {
          if (v29 > 0xEF)
          {
            if (v29 > 0xF7)
            {
              if (v29 > 0xFB)
              {
                if (v29 > 0xFD)
                {
                  if (v29 == 255)
                  {
                    int64_t v23 = *(void *)((char *)value_out + 25);
                    uint64_t v24 = 9;
                  }
                  else
                  {
                    int64_t v23 = ((unint64_t)*((unsigned __int8 *)value_out + 25) << 48) | ((unint64_t)*((unsigned __int8 *)value_out + 26) << 40) | ((unint64_t)*((unsigned __int8 *)value_out + 27) << 32) | ((unint64_t)*((unsigned __int8 *)value_out + 28) << 24) | ((unint64_t)*((unsigned __int8 *)value_out + 29) << 16) | ((unint64_t)*((unsigned __int8 *)value_out + 30) << 8) | *((unsigned __int8 *)value_out + 31);
                    uint64_t v24 = 8;
                  }
                }
                else
                {
                  int64_t v23 = ((unint64_t)(v23 & 1) << 48) | ((unint64_t)*((unsigned __int8 *)value_out + 25) << 40) | ((unint64_t)*((unsigned __int8 *)value_out + 26) << 32) | ((unint64_t)*((unsigned __int8 *)value_out + 27) << 24) | ((unint64_t)*((unsigned __int8 *)value_out + 28) << 16) | ((unint64_t)*((unsigned __int8 *)value_out + 29) << 8) | *((unsigned __int8 *)value_out + 30);
                  uint64_t v24 = 7;
                }
              }
              else
              {
                int64_t v23 = ((unint64_t)(v23 & 3) << 40) | ((unint64_t)*((unsigned __int8 *)value_out + 25) << 32) | ((unint64_t)*((unsigned __int8 *)value_out + 26) << 24) | ((unint64_t)*((unsigned __int8 *)value_out + 27) << 16) | ((unint64_t)*((unsigned __int8 *)value_out + 28) << 8) | *((unsigned __int8 *)value_out + 29);
                uint64_t v24 = 6;
              }
            }
            else
            {
              int64_t v23 = ((unint64_t)(v23 & 7) << 32) | ((unint64_t)*((unsigned __int8 *)value_out + 25) << 24) | ((unint64_t)*((unsigned __int8 *)value_out + 26) << 16) | ((unint64_t)*((unsigned __int8 *)value_out + 27) << 8) | *((unsigned __int8 *)value_out + 28);
              uint64_t v24 = 5;
            }
          }
          else
          {
            int64_t v23 = ((unint64_t)(v23 & 0xF) << 24) | ((unint64_t)*((unsigned __int8 *)value_out + 25) << 16) | ((unint64_t)*((unsigned __int8 *)value_out + 26) << 8) | *((unsigned __int8 *)value_out + 27);
            uint64_t v24 = 4;
          }
        }
        else
        {
          int64_t v23 = ((unint64_t)(v23 & 0x1F) << 16) | ((unint64_t)*((unsigned __int8 *)value_out + 25) << 8) | *((unsigned __int8 *)value_out + 26);
          uint64_t v24 = 3;
        }
      }
      else
      {
        int64_t v23 = *((unsigned __int8 *)value_out + 25) | ((unint64_t)(v23 & 0x3F) << 8);
        uint64_t v24 = 2;
      }
    }
    else
    {
      uint64_t v24 = 1;
    }
    unsigned int v30 = v22[v24];
    if (v22[v24] < 0)
    {
      if (v30 >= 0xC0)
      {
        if (v30 >= 0xE0) {
          goto LABEL_215;
        }
        uint64_t v31 = v24 + 2;
      }
      else
      {
        uint64_t v31 = v24 + 1;
      }
      unsigned int v30 = v22[v31];
    }
    unsigned int v109 = v7;
    unint64_t v25 = 0;
    int v26 = 0;
    unsigned int v32 = v21 & (v18 >> 5) & 1;
    unsigned int v33 = v21 & (v30 >> 5) & 1;
    uint64_t v34 = (char *)value_out + 20;
    while (v33 < v32 || v33 == v32 && v23 < v15)
    {
      v34 += (*(_DWORD *)v34 + 4);
      if (v34 >= v14) {
        break;
      }
      __int16 v37 = v34 + 4;
      unint64_t v25 = v34[4];
      if (v34[4] < 0)
      {
        unsigned int v39 = v34[4];
        if (v39 > 0xBF)
        {
          if (v39 > 0xDF)
          {
            if (v39 > 0xEF)
            {
              if (v39 > 0xF7)
              {
                if (v39 > 0xFB)
                {
                  if (v39 > 0xFD)
                  {
                    if (v39 == 255)
                    {
                      unint64_t v25 = *(void *)(v34 + 5);
                      uint64_t v38 = 9;
                    }
                    else
                    {
                      unint64_t v25 = ((unint64_t)v34[5] << 48) | ((unint64_t)v34[6] << 40) | ((unint64_t)v34[7] << 32) | ((unint64_t)v34[8] << 24) | ((unint64_t)v34[9] << 16) | ((unint64_t)v34[10] << 8) | v34[11];
                      uint64_t v38 = 8;
                    }
                  }
                  else
                  {
                    unint64_t v25 = ((v25 & 1) << 48) | ((unint64_t)v34[5] << 40) | ((unint64_t)v34[6] << 32) | ((unint64_t)v34[7] << 24) | ((unint64_t)v34[8] << 16) | ((unint64_t)v34[9] << 8) | v34[10];
                    uint64_t v38 = 7;
                  }
                }
                else
                {
                  unint64_t v25 = ((v25 & 3) << 40) | ((unint64_t)v34[5] << 32) | ((unint64_t)v34[6] << 24) | ((unint64_t)v34[7] << 16) | ((unint64_t)v34[8] << 8) | v34[9];
                  uint64_t v38 = 6;
                }
              }
              else
              {
                unint64_t v25 = ((v25 & 7) << 32) | ((unint64_t)v34[5] << 24) | ((unint64_t)v34[6] << 16) | ((unint64_t)v34[7] << 8) | v34[8];
                uint64_t v38 = 5;
              }
            }
            else
            {
              unint64_t v25 = ((v25 & 0xF) << 24) | ((unint64_t)v34[5] << 16) | ((unint64_t)v34[6] << 8) | v34[7];
              uint64_t v38 = 4;
            }
          }
          else
          {
            unint64_t v25 = ((v25 & 0x1F) << 16) | ((unint64_t)v34[5] << 8) | v34[6];
            uint64_t v38 = 3;
          }
        }
        else
        {
          unint64_t v25 = v34[5] | ((v25 & 0x3F) << 8);
          uint64_t v38 = 2;
        }
      }
      else
      {
        uint64_t v38 = 1;
      }
      unsigned int v36 = v37[v38];
      if (v37[v38] < 0)
      {
        if (v36 < 0xC0)
        {
          uint64_t v35 = v38 + 1;
        }
        else
        {
          if (v36 >= 0xE0) {
            goto LABEL_215;
          }
          uint64_t v35 = v38 + 2;
        }
        unsigned int v36 = v37[v35];
      }
      int v26 = v21 & (v36 >> 5) & 1;
      int64_t v23 = v25;
      unsigned int v33 = v26;
    }
    if (v34 <= v14)
    {
      uint64_t v27 = (char *)value_out + v13;
      uint64_t v28 = (char *)value_out;
      uint64_t v20 = v34;
      unsigned int v7 = v109;
    }
    else
    {
      int v108 = v6;
      uint64_t v40 = v9;
      int v41 = v13;
      uint64_t v42 = a2 + 4;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)stat buf = 134218496;
        *(void *)&uint8_t buf[4] = v34;
        __int16 v119 = 2048;
        *(void *)v120 = v14;
        *(_WORD *)&v120[8] = 2048;
        *(void *)&v120[10] = v12 + 20;
        _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "dbo %p beyond end of page at %p. Resetting to last at %p", buf, 0x20u);
        uint64_t v28 = (char *)value_out;
        uint64_t v27 = v114;
      }
      else
      {
        uint64_t v27 = v14;
        uint64_t v28 = v12;
      }
      unsigned int v7 = v109;
      uint64_t v16 = v42;
      a2 = v112;
      LODWORD(v13) = v41;
      uint64_t v9 = v40;
      int v6 = v108;
    }
  }
  int v43 = v20 - v12;
  if (v20 >= v14) {
    int v43 = v13;
  }
  uint64_t v44 = v43;
  uint64_t v45 = v27 - v28;
  if (*(_DWORD *)(*(void *)(v9 + 856) + 16) == *(_DWORD *)(*(void *)(v9 + 856) + 8) - 1 && v45 <= v43)
  {
    unsigned int v50 = 4 * ((*((_DWORD *)v28 + 3) & 0xC) != 0);
    page_release(v9, v28, v7, 0, 0);
    *(void *)stat buf = 0;
    uint64_t v51 = _page_alloc_fetch(v9, (int8x16_t **)buf, 0, (unsigned int *)&v117, (signed int *)&v116, v50);
    if (v51) {
      return v51;
    }
    free(*(void **)buf);
    return _real_page_insert_obj(v9, (int)a2, v111 & 0x4000, v117, v116);
  }
  unsigned int v47 = (unsigned __int8 *)&v28[v43];
  __src = &v28[v44];
  if (v45 <= v44)
  {
    BOOL v52 = 0;
    BOOL v53 = 1;
    goto LABEL_133;
  }
  unint64_t v48 = v47[4];
  if ((char)v47[4] < 0)
  {
    unsigned int v49 = v47[4];
    if (v49 <= 0xBF)
    {
      unint64_t v48 = v47[5] | ((v48 & 0x3F) << 8);
      goto LABEL_115;
    }
    if (v49 > 0xDF)
    {
      if (v49 > 0xEF)
      {
        if (v49 > 0xF7)
        {
          if (v49 > 0xFB)
          {
            if (v49 > 0xFD)
            {
              if (v49 == 255)
              {
                unint64_t v48 = *(void *)(v47 + 5);
                goto LABEL_115;
              }
              unint64_t v54 = ((unint64_t)v47[5] << 48) | ((unint64_t)v47[6] << 40) | ((unint64_t)v47[7] << 32) | ((unint64_t)v47[8] << 24) | ((unint64_t)v47[9] << 16) | ((unint64_t)v47[10] << 8);
              uint64_t v55 = v47[11];
            }
            else
            {
              unint64_t v54 = ((v48 & 1) << 48) | ((unint64_t)v47[5] << 40) | ((unint64_t)v47[6] << 32) | ((unint64_t)v47[7] << 24) | ((unint64_t)v47[8] << 16) | ((unint64_t)v47[9] << 8);
              uint64_t v55 = v47[10];
            }
          }
          else
          {
            unint64_t v54 = ((v48 & 3) << 40) | ((unint64_t)v47[5] << 32) | ((unint64_t)v47[6] << 24) | ((unint64_t)v47[7] << 16) | ((unint64_t)v47[8] << 8);
            uint64_t v55 = v47[9];
          }
        }
        else
        {
          unint64_t v54 = ((v48 & 7) << 32) | ((unint64_t)v47[5] << 24) | ((unint64_t)v47[6] << 16) | ((unint64_t)v47[7] << 8);
          uint64_t v55 = v47[8];
        }
      }
      else
      {
        unint64_t v54 = ((v48 & 0xF) << 24) | ((unint64_t)v47[5] << 16) | ((unint64_t)v47[6] << 8);
        uint64_t v55 = v47[7];
      }
    }
    else
    {
      unint64_t v54 = ((v48 & 0x1F) << 16) | ((unint64_t)v47[5] << 8);
      uint64_t v55 = v47[6];
    }
    unint64_t v48 = v54 | v55;
  }
LABEL_115:
  unint64_t v56 = *v16;
  if (*v16 < 0)
  {
    unsigned int v57 = *v16;
    if (v57 > 0xBF)
    {
      if (v57 > 0xDF)
      {
        if (v57 > 0xEF)
        {
          if (v57 > 0xF7)
          {
            if (v57 > 0xFB)
            {
              if (v57 > 0xFD)
              {
                if (v57 == 255)
                {
                  unint64_t v56 = *(void *)(a2 + 5);
                  goto LABEL_132;
                }
                unint64_t v58 = ((unint64_t)a2[5] << 48) | ((unint64_t)a2[6] << 40) | ((unint64_t)a2[7] << 32) | ((unint64_t)a2[8] << 24) | ((unint64_t)a2[9] << 16) | ((unint64_t)a2[10] << 8);
                uint64_t v59 = a2[11];
              }
              else
              {
                unint64_t v58 = ((v56 & 1) << 48) | ((unint64_t)a2[5] << 40) | ((unint64_t)a2[6] << 32) | ((unint64_t)a2[7] << 24) | ((unint64_t)a2[8] << 16) | ((unint64_t)a2[9] << 8);
                uint64_t v59 = a2[10];
              }
            }
            else
            {
              unint64_t v58 = ((v56 & 3) << 40) | ((unint64_t)a2[5] << 32) | ((unint64_t)a2[6] << 24) | ((unint64_t)a2[7] << 16) | ((unint64_t)a2[8] << 8);
              uint64_t v59 = a2[9];
            }
          }
          else
          {
            unint64_t v58 = ((v56 & 7) << 32) | ((unint64_t)a2[5] << 24) | ((unint64_t)a2[6] << 16) | ((unint64_t)a2[7] << 8);
            uint64_t v59 = a2[8];
          }
        }
        else
        {
          unint64_t v58 = ((v56 & 0xF) << 24) | ((unint64_t)a2[5] << 16) | ((unint64_t)a2[6] << 8);
          uint64_t v59 = a2[7];
        }
      }
      else
      {
        unint64_t v58 = ((v56 & 0x1F) << 16) | ((unint64_t)a2[5] << 8);
        uint64_t v59 = a2[6];
      }
      unint64_t v56 = v58 | v59;
      goto LABEL_132;
    }
    unint64_t v56 = a2[5] | ((v56 & 0x3F) << 8);
  }
LABEL_132:
  BOOL v52 = v48 == v56;
  BOOL v53 = v48 != v56;
LABEL_133:
  BOOL v110 = v53;
  unsigned int v60 = v16;
  if (v6 - 20 <= (unint64_t)(*(_DWORD *)v112 + 4))
  {
    unsigned int v61 = v7;
  }
  else
  {
    if (!try_push_insert_obj(v9, v28, v7, (unsigned __int8 *)v112, v44, v111 & 0x4000)) {
      return 0;
    }
    unsigned int v61 = v7;
    uint64_t v28 = (char *)value_out;
  }
  uint64_t v62 = *(void *)(v9 + 928);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(v62 + 8));
  uint64_t v63 = *(unsigned int *)(v62 + 220);
  if ((int)v63 >= 1)
  {
    uint64_t v64 = 0;
    uint64_t v65 = (char **)(v62 + 272);
    while (*v65 != v28)
    {
      ++v64;
      v65 += 6;
      if (v63 == v64) {
        goto LABEL_143;
      }
    }
    uint64_t v66 = v62 + 48 * v64;
    *(void *)(v66 + 296) = 0;
    *(_DWORD *)(v66 + 304) = 0;
    *(void *)(v66 + 312) = 0;
  }
LABEL_143:
  pthread_rwlock_unlock((pthread_rwlock_t *)(v62 + 8));
  unsigned int v70 = *(_DWORD *)v112 + 4;
  if (v52)
  {
    unsigned int v71 = __src;
    unsigned int v72 = *(_DWORD *)__src + 4;
    unsigned int v73 = v61;
    if (v70 <= v72) {
      goto LABEL_148;
    }
    int v74 = *((_DWORD *)value_out + 2);
    if (v70 - v72 <= *((_DWORD *)value_out + 1) - v74) {
      goto LABEL_148;
    }
    uint64_t v75 = page_resize(v9, &value_out, 1, *(_DWORD *)v112 - *(_DWORD *)__src + v74, (unint64_t *)&__src, v67, v68, v69, (uint64_t)&v114);
    if (!v75)
    {
      unsigned int v71 = __src;
      unsigned int v70 = *(_DWORD *)v112 + 4;
      unsigned int v72 = *(_DWORD *)__src + 4;
LABEL_148:
      memmove(&v71[v70], &v71[v72], v114 - &v71[v72]);
      uint64_t v76 = (unsigned __int8 *)v112;
      v77 = __src;
      *((_DWORD *)value_out + 2) += *(_DWORD *)v112 - *(_DWORD *)__src;
      goto LABEL_155;
    }
LABEL_151:
    uint64_t v10 = v75;
    uint64_t v79 = value_out;
    uint64_t v80 = v9;
    unsigned int v81 = v73;
    unsigned int v82 = 0;
LABEL_214:
    page_release(v80, v79, v81, v82, 0);
    return v10;
  }
  int v78 = *((_DWORD *)value_out + 2);
  unsigned int v73 = v61;
  if (v70 > *((_DWORD *)value_out + 1) - v78)
  {
    uint64_t v75 = page_resize(v9, &value_out, 1, v78 + v70, (unint64_t *)&__src, v67, v68, v69, (uint64_t)&v114);
    if (v75) {
      goto LABEL_151;
    }
    unsigned int v70 = *(_DWORD *)v112 + 4;
  }
  memmove((char *)__src + v70, __src, v114 - (unsigned char *)__src);
  uint64_t v76 = (unsigned __int8 *)v112;
  *((_DWORD *)value_out + 2) += *(_DWORD *)v112 + 4;
  v77 = __src;
LABEL_155:
  memcpy(v77, v76, (*(_DWORD *)v76 + 4));
  char v83 = __src < v114 || v52;
  unint64_t v84 = v76[4];
  if (v83)
  {
    if ((v84 & 0x80) != 0)
    {
      if (v84 > 0xBF)
      {
        if (v84 > 0xDF)
        {
          if (v84 > 0xEF)
          {
            if (v84 > 0xF7)
            {
              if (v84 > 0xFB)
              {
                if (v84 > 0xFD)
                {
                  if (v84 == 255)
                  {
                    unint64_t v84 = *(void *)(v112 + 5);
                    uint64_t v85 = 9;
                  }
                  else
                  {
                    unint64_t v84 = ((unint64_t)v112[5] << 48) | ((unint64_t)v112[6] << 40) | ((unint64_t)v112[7] << 32) | ((unint64_t)v112[8] << 24) | ((unint64_t)v112[9] << 16) | ((unint64_t)v112[10] << 8) | v112[11];
                    uint64_t v85 = 8;
                  }
                }
                else
                {
                  unint64_t v84 = ((v84 & 1) << 48) | ((unint64_t)v112[5] << 40) | ((unint64_t)v112[6] << 32) | ((unint64_t)v112[7] << 24) | ((unint64_t)v112[8] << 16) | ((unint64_t)v112[9] << 8) | v112[10];
                  uint64_t v85 = 7;
                }
              }
              else
              {
                unint64_t v84 = ((v84 & 3) << 40) | ((unint64_t)v112[5] << 32) | ((unint64_t)v112[6] << 24) | ((unint64_t)v112[7] << 16) | ((unint64_t)v112[8] << 8) | v112[9];
                uint64_t v85 = 6;
              }
            }
            else
            {
              unint64_t v84 = ((v84 & 7) << 32) | ((unint64_t)v112[5] << 24) | ((unint64_t)v112[6] << 16) | ((unint64_t)v112[7] << 8) | v112[8];
              uint64_t v85 = 5;
            }
          }
          else
          {
            unint64_t v84 = ((v84 & 0xF) << 24) | ((unint64_t)v112[5] << 16) | ((unint64_t)v112[6] << 8) | v112[7];
            uint64_t v85 = 4;
          }
        }
        else
        {
          unint64_t v84 = ((v84 & 0x1F) << 16) | ((unint64_t)v112[5] << 8) | v112[6];
          uint64_t v85 = 3;
        }
      }
      else
      {
        unint64_t v84 = v112[5] | ((v84 & 0x3F) << 8);
        uint64_t v85 = 2;
      }
    }
    else
    {
      uint64_t v85 = 1;
    }
    if (v60[v85] < 0xE0u)
    {
      if (dword_1E9FC90C0 >= 5)
      {
        unsigned int v95 = v73;
        int v96 = *__error();
        v97 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v98 = (char *)__src + *(unsigned int *)__src;
          *(_DWORD *)stat buf = 136316930;
          *(void *)&uint8_t buf[4] = v9 + 324;
          __int16 v119 = 1024;
          *(_DWORD *)v120 = v95;
          *(_WORD *)&v120[4] = 2048;
          *(void *)&v120[6] = v25;
          *(_WORD *)&v120[14] = 2048;
          *(void *)&v120[16] = v84;
          __int16 v121 = 2048;
          v122 = __src;
          __int16 v123 = 2048;
          v124 = v114;
          __int16 v125 = 2048;
          v126 = v98;
          __int16 v127 = 2048;
          v128 = value_out;
          _os_log_impl(&dword_1BD672000, v97, OS_LOG_TYPE_DEFAULT, "%s : no map update for split at pgnum %d oid (%.16llx) to(%.16llx) dbo:%p end:%p next:%p dbp:%p\n", buf, 0x4Eu);
        }
        *__error() = v96;
        unsigned int v73 = v95;
      }
      goto LABEL_194;
    }
    uint64_t v99 = __si_assert_copy_extra_2445(0, -1);
    v100 = v99;
    v101 = "";
    if (v99) {
      v101 = v99;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v101);
    free(v100);
    if (!__valid_fs(-1))
    {
      uint64_t v102 = 3072;
LABEL_228:
      *(_DWORD *)uint64_t v102 = -559038737;
      abort();
    }
LABEL_226:
    uint64_t v102 = 2989;
    goto LABEL_228;
  }
  if ((v84 & 0x80) != 0)
  {
    if (v84 > 0xBF)
    {
      if (v84 > 0xDF)
      {
        if (v84 > 0xEF)
        {
          if (v84 > 0xF7)
          {
            if (v84 > 0xFB)
            {
              if (v84 > 0xFD)
              {
                if (v84 == 255)
                {
                  unint64_t v84 = *(void *)(v112 + 5);
                  uint64_t v86 = 9;
                }
                else
                {
                  unint64_t v84 = ((unint64_t)v112[5] << 48) | ((unint64_t)v112[6] << 40) | ((unint64_t)v112[7] << 32) | ((unint64_t)v112[8] << 24) | ((unint64_t)v112[9] << 16) | ((unint64_t)v112[10] << 8) | v112[11];
                  uint64_t v86 = 8;
                }
              }
              else
              {
                unint64_t v84 = ((v84 & 1) << 48) | ((unint64_t)v112[5] << 40) | ((unint64_t)v112[6] << 32) | ((unint64_t)v112[7] << 24) | ((unint64_t)v112[8] << 16) | ((unint64_t)v112[9] << 8) | v112[10];
                uint64_t v86 = 7;
              }
            }
            else
            {
              unint64_t v84 = ((v84 & 3) << 40) | ((unint64_t)v112[5] << 32) | ((unint64_t)v112[6] << 24) | ((unint64_t)v112[7] << 16) | ((unint64_t)v112[8] << 8) | v112[9];
              uint64_t v86 = 6;
            }
          }
          else
          {
            unint64_t v84 = ((v84 & 7) << 32) | ((unint64_t)v112[5] << 24) | ((unint64_t)v112[6] << 16) | ((unint64_t)v112[7] << 8) | v112[8];
            uint64_t v86 = 5;
          }
        }
        else
        {
          unint64_t v84 = ((v84 & 0xF) << 24) | ((unint64_t)v112[5] << 16) | ((unint64_t)v112[6] << 8) | v112[7];
          uint64_t v86 = 4;
        }
      }
      else
      {
        unint64_t v84 = ((v84 & 0x1F) << 16) | ((unint64_t)v112[5] << 8) | v112[6];
        uint64_t v86 = 3;
      }
    }
    else
    {
      unint64_t v84 = v112[5] | ((v84 & 0x3F) << 8);
      uint64_t v86 = 2;
    }
  }
  else
  {
    uint64_t v86 = 1;
  }
  unsigned int v89 = v60[v86];
  if (v60[v86] < 0)
  {
    if (v89 < 0xC0)
    {
      uint64_t v90 = v86 + 1;
LABEL_208:
      unsigned int v89 = v60[v90];
      goto LABEL_209;
    }
    if (v89 < 0xE0)
    {
      uint64_t v90 = v86 + 2;
      goto LABEL_208;
    }
LABEL_215:
    uint64_t v92 = __si_assert_copy_extra_2445(0, -1);
    uint64_t v93 = v92;
    v94 = "";
    if (v92) {
      v94 = v92;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v94);
    free(v93);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
LABEL_209:
  int v91 = *(unsigned __int8 *)(v9 + 804) & (v89 >> 5);
  if (!v25)
  {
    uint64_t v10 = map_force(v9, v73, v6, v84, v91 & 1);
    if (!v10) {
      goto LABEL_194;
    }
    goto LABEL_213;
  }
  uint64_t v10 = map_update(v9, v73, v6, v25, v84, v26, v91 & 1, 1);
  if (v10)
  {
LABEL_213:
    uint64_t v79 = value_out;
    unsigned int v82 = v111 & 0x4000;
    uint64_t v80 = v9;
    unsigned int v81 = v73;
    goto LABEL_214;
  }
LABEL_194:
  if ((*(_DWORD *)(v9 + 804) & 2) != 0) {
    int v87 = 114688;
  }
  else {
    int v87 = 196608;
  }
  if (*((_DWORD *)value_out + 2) <= v87) {
    int v88 = 1;
  }
  else {
    int v88 = 3;
  }
  page_release(v9, value_out, v73, v111 & 0x4000 | v88, 0);
  uint64_t v10 = 0;
  if (v110)
  {
    uint64_t v10 = 0;
    ++*(void *)(v9 + 20);
  }
  return v10;
}

uint64_t try_push_insert_obj(uint64_t a1, _DWORD *a2, unsigned int a3, unsigned __int8 *a4, int a5, __int16 a6)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  int v12 = *(int **)(a1 + 856);
  int v13 = v12[4];
  uint64_t v14 = v12[2];
  if ((int)v14 <= v13 || v13 <= -1) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v12[4];
  }
  if (v16 >= v14)
  {
LABEL_11:
    if (v16 < 1)
    {
LABEL_15:
      int v22 = *__error();
      int64_t v23 = _SILogForLogForCategory(7);
      os_log_type_t v24 = 2 * (dword_1E9FC90C0 < 4);
      if (os_log_type_enabled(v23, v24))
      {
        int v32 = 136315394;
        uint64_t v33 = a1 + 324;
        __int16 v34 = 1024;
        unsigned int v35 = a3;
        _os_log_impl(&dword_1BD672000, v23, v24, "%s : ERR: try_push_insert_obj: BAD NEWS! pgnum 0x%x not found\n", (uint8_t *)&v32, 0x12u);
      }
      *__error() = v22;
      return 22;
    }
    uint64_t v18 = 0;
    uint64_t v20 = v12 + 7;
    while (1)
    {
      int v21 = *v20;
      v20 += 4;
      if (v21 == a3) {
        break;
      }
      if (v16 == ++v18) {
        goto LABEL_15;
      }
    }
  }
  else
  {
    uint64_t v17 = &v12[4 * v16 + 7];
    uint64_t v18 = v16;
    while (1)
    {
      int v19 = *v17;
      v17 += 4;
      if (v19 == a3) {
        break;
      }
      if (v14 == ++v18) {
        goto LABEL_11;
      }
    }
  }
  v12[4] = v18;
  if (v18 + 1 < v14)
  {
    int v26 = &v12[4 * v18 + 4];
    unsigned int v27 = v26[7];
    size_t v28 = v26[8] & 0xFFFFFFF;
    if (v18 < 1) {
      goto LABEL_21;
    }
LABEL_24:
    uint64_t v31 = &v12[4 * v18];
    unsigned int v29 = v31[3];
    size_t v30 = v31[4] & 0xFFFFFFF;
    if (!v27) {
      goto LABEL_22;
    }
LABEL_25:
    uint64_t result = try_push_right(a1, a2, a3, a4, a5, v27, v28, a6 & 0x4000);
    if (!result) {
      return result;
    }
    goto LABEL_26;
  }
  unsigned int v27 = 0;
  size_t v28 = 0;
  if (v18 >= 1) {
    goto LABEL_24;
  }
LABEL_21:
  unsigned int v29 = 0;
  size_t v30 = 0;
  if (v27) {
    goto LABEL_25;
  }
LABEL_22:
  uint64_t result = 28;
LABEL_26:
  if (v29)
  {
    return try_push_left(a1, a2, a3, a4, a5, v29, v30, a6 & 0x4000);
  }
  return result;
}

uint64_t try_push_right(uint64_t a1, _DWORD *a2, unsigned int a3, unsigned __int8 *a4, int a5, unsigned int a6, size_t __nbyte, unsigned int a8)
{
  int v9 = __nbyte;
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  v77 = 0;
  value_out = 0;
  uint64_t result = _page_fetch_with_fd(a1, &value_out, a6, __nbyte, 1, buf, 0xFFFFFFFFLL, 0);
  if (result) {
    return result;
  }
  unsigned int v76 = a8;
  if ((*((unsigned char *)value_out + 12) & 0xF0) != 0) {
    goto LABEL_79;
  }
  int v17 = *((_DWORD *)value_out + 1);
  uint64_t v18 = *((int *)value_out + 2);
  int v19 = v17 - v18;
  if (v9 < 4 * (v17 - (int)v18)) {
    goto LABEL_79;
  }
  uint64_t v20 = (int)a2[2];
  if ((int)v20 <= a5) {
    goto LABEL_79;
  }
  int v21 = (char *)a2 + a5;
  unint64_t v22 = v21[4];
  if (v21[4] < 0)
  {
    unsigned int v23 = v21[4];
    if (v23 <= 0xBF)
    {
      unint64_t v22 = v21[5] | ((v22 & 0x3F) << 8);
      goto LABEL_22;
    }
    if (v23 > 0xDF)
    {
      if (v23 > 0xEF)
      {
        if (v23 > 0xF7)
        {
          if (v23 > 0xFB)
          {
            if (v23 > 0xFD)
            {
              if (v23 == 255)
              {
                unint64_t v22 = *(void *)(v21 + 5);
                goto LABEL_22;
              }
              unint64_t v24 = ((unint64_t)v21[5] << 48) | ((unint64_t)v21[6] << 40) | ((unint64_t)v21[7] << 32) | ((unint64_t)v21[8] << 24) | ((unint64_t)v21[9] << 16) | ((unint64_t)v21[10] << 8);
              uint64_t v25 = v21[11];
            }
            else
            {
              unint64_t v24 = ((v22 & 1) << 48) | ((unint64_t)v21[5] << 40) | ((unint64_t)v21[6] << 32) | ((unint64_t)v21[7] << 24) | ((unint64_t)v21[8] << 16) | ((unint64_t)v21[9] << 8);
              uint64_t v25 = v21[10];
            }
          }
          else
          {
            unint64_t v24 = ((v22 & 3) << 40) | ((unint64_t)v21[5] << 32) | ((unint64_t)v21[6] << 24) | ((unint64_t)v21[7] << 16) | ((unint64_t)v21[8] << 8);
            uint64_t v25 = v21[9];
          }
        }
        else
        {
          unint64_t v24 = ((v22 & 7) << 32) | ((unint64_t)v21[5] << 24) | ((unint64_t)v21[6] << 16) | ((unint64_t)v21[7] << 8);
          uint64_t v25 = v21[8];
        }
      }
      else
      {
        unint64_t v24 = ((v22 & 0xF) << 24) | ((unint64_t)v21[5] << 16) | ((unint64_t)v21[6] << 8);
        uint64_t v25 = v21[7];
      }
    }
    else
    {
      unint64_t v24 = ((v22 & 0x1F) << 16) | ((unint64_t)v21[5] << 8);
      uint64_t v25 = v21[6];
    }
    unint64_t v22 = v24 | v25;
  }
LABEL_22:
  unint64_t v26 = a4[4];
  if ((char)a4[4] < 0)
  {
    unsigned int v27 = a4[4];
    if (v27 > 0xBF)
    {
      if (v27 > 0xDF)
      {
        if (v27 > 0xEF)
        {
          if (v27 > 0xF7)
          {
            if (v27 > 0xFB)
            {
              if (v27 > 0xFD)
              {
                if (v27 == 255)
                {
                  unint64_t v26 = *(void *)(a4 + 5);
                  goto LABEL_39;
                }
                unint64_t v28 = ((unint64_t)a4[5] << 48) | ((unint64_t)a4[6] << 40) | ((unint64_t)a4[7] << 32) | ((unint64_t)a4[8] << 24) | ((unint64_t)a4[9] << 16) | ((unint64_t)a4[10] << 8);
                uint64_t v29 = a4[11];
              }
              else
              {
                unint64_t v28 = ((v26 & 1) << 48) | ((unint64_t)a4[5] << 40) | ((unint64_t)a4[6] << 32) | ((unint64_t)a4[7] << 24) | ((unint64_t)a4[8] << 16) | ((unint64_t)a4[9] << 8);
                uint64_t v29 = a4[10];
              }
            }
            else
            {
              unint64_t v28 = ((v26 & 3) << 40) | ((unint64_t)a4[5] << 32) | ((unint64_t)a4[6] << 24) | ((unint64_t)a4[7] << 16) | ((unint64_t)a4[8] << 8);
              uint64_t v29 = a4[9];
            }
          }
          else
          {
            unint64_t v28 = ((v26 & 7) << 32) | ((unint64_t)a4[5] << 24) | ((unint64_t)a4[6] << 16) | ((unint64_t)a4[7] << 8);
            uint64_t v29 = a4[8];
          }
        }
        else
        {
          unint64_t v28 = ((v26 & 0xF) << 24) | ((unint64_t)a4[5] << 16) | ((unint64_t)a4[6] << 8);
          uint64_t v29 = a4[7];
        }
      }
      else
      {
        unint64_t v28 = ((v26 & 0x1F) << 16) | ((unint64_t)a4[5] << 8);
        uint64_t v29 = a4[6];
      }
      unint64_t v26 = v28 | v29;
      goto LABEL_39;
    }
    unint64_t v26 = a4[5] | ((v26 & 0x3F) << 8);
  }
LABEL_39:
  int v30 = *(_DWORD *)a4;
  if (v22 == v26) {
    int v31 = v30 - *(_DWORD *)v21;
  }
  else {
    int v31 = v30 + 4;
  }
  if (!v31 || v31 >= v19) {
    goto LABEL_79;
  }
  int v32 = 0;
  uint64_t v33 = (char *)a2 + v20;
  int v34 = a2[1];
  int v35 = v34 / 10 >= v19 ? v17 - v18 : v34 / 10;
  int v36 = v31 >= v34 / 10 ? v31 : v35;
  __int16 v37 = (char *)a2 + a5;
  uint64_t v38 = v37;
  do
  {
    unsigned int v39 = v37;
    uint64_t v40 = (*(_DWORD *)v37 + 4);
    v32 += v40;
    __int16 v37 = &v39[v40];
    BOOL v41 = v37 < v33;
    if (v32 > v36 && v37 < v33 && v38 < v37)
    {
      do
      {
        uint64_t v42 = (*(_DWORD *)v38 + 4);
        v32 -= v42;
        v38 += v42;
      }
      while (v32 > v36 && v38 < v37);
      BOOL v41 = 1;
    }
  }
  while (v41);
  if (v38 == v21)
  {
    uint64_t v44 = (*(_DWORD *)v21 + 4);
    v32 -= v44;
    uint64_t v38 = &v21[v44];
  }
  BOOL v45 = v32 < v36 && v32 < v31;
  if (v45) {
    goto LABEL_79;
  }
  if (v32 >= v19)
  {
    uint64_t v46 = (*(_DWORD *)v38 + 4);
    v32 -= v46;
    if (v32 >= v19 || v32 < v31) {
      goto LABEL_79;
    }
    v38 += v46;
  }
  if (v33 - v38 != v32)
  {
    int v52 = *__error();
    BOOL v53 = _SILogForLogForCategory(7);
    os_log_type_t v54 = 2 * (dword_1E9FC90C0 < 4);
    if (os_log_type_enabled(v53, v54))
    {
      *(_DWORD *)stat buf = 134218496;
      *(void *)&uint8_t buf[4] = v33;
      __int16 v80 = 2048;
      unsigned int v81 = v38;
      __int16 v82 = 1024;
      int v83 = v32;
      _os_log_impl(&dword_1BD672000, v53, v54, "try_push_right: weird! end %p first %p but num_bytes %d\n", buf, 0x1Cu);
    }
    *__error() = v52;
    goto LABEL_79;
  }
  if (v32 + (int)v18 >= v17 || v31 + (int)v20 - v32 >= v34)
  {
LABEL_79:
    if (v77) {
      free(v77);
    }
    page_release(a1, value_out, a6, 0, 0);
    return 28;
  }
  int v71 = v31;
  unint64_t v72 = v26;
  __src = (_DWORD *)((char *)a2 + a5);
  unint64_t v74 = v22;
  size_t __n = v33 - v38;
  memmove((char *)value_out + v33 - v38 + 20, (char *)value_out + 20, v18 - 20);
  unsigned int v47 = value_out;
  memcpy((char *)value_out + 20, v38, __n);
  v47[2] += v32;
  a2[2] -= v32;
  int v48 = page_compress(a1, (size_t)v47, (int8x16_t **)&v77, 0, (*(_DWORD *)(a1 + 804) & 2) != 0);
  uint64_t v49 = (int)a2[2];
  if (v48)
  {
    a2[2] = v49 + v32;
    unsigned int v50 = (char *)value_out;
    uint64_t v51 = *((int *)value_out + 2) - (uint64_t)v32;
    *((_DWORD *)value_out + 2) = v51;
    memmove(v50 + 20, &v50[__n + 20], v51 - 20);
    goto LABEL_79;
  }
  uint64_t v55 = (char *)a2 + v49;
  if (v74 == v72)
  {
    memmove((char *)__src + (*__src + 4) + v71, (char *)__src + (*__src + 4), v55 - ((char *)__src + (*__src + 4)));
    memcpy(__src, a4, (*(_DWORD *)a4 + 4));
    int v56 = v71;
    int v57 = a2[2];
  }
  else
  {
    memmove((char *)__src + (*(_DWORD *)a4 + 4), __src, v55 - (char *)__src);
    memcpy(__src, a4, (*(_DWORD *)a4 + 4));
    int v57 = *(_DWORD *)a4 + 4;
    int v56 = a2[2];
  }
  int v58 = v57 + v56;
  a2[2] = v58;
  uint64_t v59 = (char *)a2 + v58;
  if (v58 <= a5 && v39 >= v59)
  {
    uint64_t v68 = __si_assert_copy_extra_2445(0, -1);
    uint64_t v69 = v68;
    unsigned int v70 = "";
    if (v68) {
      unsigned int v70 = v68;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 4049, "dbo<end || prev_dbo<end", v70);
    free(v69);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  BOOL v45 = v58 <= a5;
  unsigned int v60 = (char *)a2 + a5;
  if (!v45)
  {
    do
    {
      unsigned int v39 = v60;
      v60 += (*(_DWORD *)v60 + 4);
    }
    while (v60 < v59);
  }
  *(void *)stat buf = 0;
  unint64_t v61 = v39[4];
  if (v39[4] < 0)
  {
    unsigned int v63 = v39[4];
    if (v63 > 0xBF)
    {
      if (v63 > 0xDF)
      {
        if (v63 > 0xEF)
        {
          if (v63 > 0xF7)
          {
            if (v63 > 0xFB)
            {
              if (v63 > 0xFD)
              {
                if (v63 == 255)
                {
                  unint64_t v61 = *(void *)(v39 + 5);
                  uint64_t v62 = 9;
                }
                else
                {
                  unint64_t v61 = ((unint64_t)v39[5] << 48) | ((unint64_t)v39[6] << 40) | ((unint64_t)v39[7] << 32) | ((unint64_t)v39[8] << 24) | ((unint64_t)v39[9] << 16) | ((unint64_t)v39[10] << 8) | v39[11];
                  uint64_t v62 = 8;
                }
              }
              else
              {
                unint64_t v61 = ((v61 & 1) << 48) | ((unint64_t)v39[5] << 40) | ((unint64_t)v39[6] << 32) | ((unint64_t)v39[7] << 24) | ((unint64_t)v39[8] << 16) | ((unint64_t)v39[9] << 8) | v39[10];
                uint64_t v62 = 7;
              }
            }
            else
            {
              unint64_t v61 = ((v61 & 3) << 40) | ((unint64_t)v39[5] << 32) | ((unint64_t)v39[6] << 24) | ((unint64_t)v39[7] << 16) | ((unint64_t)v39[8] << 8) | v39[9];
              uint64_t v62 = 6;
            }
          }
          else
          {
            unint64_t v61 = ((v61 & 7) << 32) | ((unint64_t)v39[5] << 24) | ((unint64_t)v39[6] << 16) | ((unint64_t)v39[7] << 8) | v39[8];
            uint64_t v62 = 5;
          }
        }
        else
        {
          unint64_t v61 = ((v61 & 0xF) << 24) | ((unint64_t)v39[5] << 16) | ((unint64_t)v39[6] << 8) | v39[7];
          uint64_t v62 = 4;
        }
      }
      else
      {
        unint64_t v61 = ((v61 & 0x1F) << 16) | ((unint64_t)v39[5] << 8) | v39[6];
        uint64_t v62 = 3;
      }
    }
    else
    {
      unint64_t v61 = v39[5] | ((v61 & 0x3F) << 8);
      uint64_t v62 = 2;
    }
  }
  else
  {
    uint64_t v62 = 1;
  }
  *(void *)stat buf = v62;
  char v64 = *(_DWORD *)(a1 + 804) & (ldb_readVInt16((uint64_t)(v39 + 4), (uint64_t *)buf) >> 5);
  uint64_t v65 = *(void *)(a1 + 856);
  int v66 = *(_DWORD *)(v65 + 12);
  uint64_t v67 = v65 + 16 * *(int *)(v65 + 16);
  *(void *)(v67 + 20) = v61;
  *(_DWORD *)(v67 + 32) = *(_DWORD *)(v67 + 32) & 0xFFFFFFF | ((v64 & 1) << 28);
  *(_DWORD *)(v65 + 12) = v66 | 1;
  if (v74 != v72) {
    ++*(void *)(a1 + 20);
  }
  db_cache_set_offset_hint(*(void *)(a1 + 928), (uint64_t)value_out, 0, 0, 0);
  db_cache_set_offset_hint(*(void *)(a1 + 928), (uint64_t)a2, 0, 0, 0);
  page_release(a1, a2, a3, 1u, 0);
  page_release_dirty_compressed(a1, (char *)value_out, v77, a6, v76);
  return 0;
}

uint64_t try_push_left(uint64_t a1, _DWORD *a2, unsigned int a3, unsigned __int8 *a4, int a5, unsigned int a6, size_t __nbyte, unsigned int a8)
{
  int v9 = __nbyte;
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  __int16 v127 = 0;
  value_out = 0;
  uint64_t result = _page_fetch_with_fd(a1, &value_out, a6, __nbyte, 1, buf, 0xFFFFFFFFLL, 0);
  if (result) {
    return result;
  }
  int v17 = value_out;
  if ((*((unsigned char *)value_out + 12) & 0xF0) != 0) {
    goto LABEL_4;
  }
  int v18 = *((_DWORD *)value_out + 1);
  uint64_t v19 = *((int *)value_out + 2);
  int v20 = v18 - v19;
  if (v9 < 4 * (v18 - (int)v19)) {
    goto LABEL_4;
  }
  int v21 = (char *)a2 + a5;
  uint64_t v22 = (int)a2[2];
  if ((int)v22 <= a5) {
    goto LABEL_43;
  }
  unint64_t v23 = v21[4];
  if (v21[4] < 0)
  {
    unsigned int v24 = v21[4];
    if (v24 <= 0xBF)
    {
      unint64_t v23 = v21[5] | ((v23 & 0x3F) << 8);
      goto LABEL_24;
    }
    if (v24 > 0xDF)
    {
      if (v24 > 0xEF)
      {
        if (v24 > 0xF7)
        {
          if (v24 > 0xFB)
          {
            if (v24 > 0xFD)
            {
              if (v24 == 255)
              {
                unint64_t v23 = *(void *)(v21 + 5);
                goto LABEL_24;
              }
              unint64_t v25 = ((unint64_t)v21[5] << 48) | ((unint64_t)v21[6] << 40) | ((unint64_t)v21[7] << 32) | ((unint64_t)v21[8] << 24) | ((unint64_t)v21[9] << 16) | ((unint64_t)v21[10] << 8);
              uint64_t v26 = v21[11];
            }
            else
            {
              unint64_t v25 = ((v23 & 1) << 48) | ((unint64_t)v21[5] << 40) | ((unint64_t)v21[6] << 32) | ((unint64_t)v21[7] << 24) | ((unint64_t)v21[8] << 16) | ((unint64_t)v21[9] << 8);
              uint64_t v26 = v21[10];
            }
          }
          else
          {
            unint64_t v25 = ((v23 & 3) << 40) | ((unint64_t)v21[5] << 32) | ((unint64_t)v21[6] << 24) | ((unint64_t)v21[7] << 16) | ((unint64_t)v21[8] << 8);
            uint64_t v26 = v21[9];
          }
        }
        else
        {
          unint64_t v25 = ((v23 & 7) << 32) | ((unint64_t)v21[5] << 24) | ((unint64_t)v21[6] << 16) | ((unint64_t)v21[7] << 8);
          uint64_t v26 = v21[8];
        }
      }
      else
      {
        unint64_t v25 = ((v23 & 0xF) << 24) | ((unint64_t)v21[5] << 16) | ((unint64_t)v21[6] << 8);
        uint64_t v26 = v21[7];
      }
    }
    else
    {
      unint64_t v25 = ((v23 & 0x1F) << 16) | ((unint64_t)v21[5] << 8);
      uint64_t v26 = v21[6];
    }
    unint64_t v23 = v25 | v26;
  }
LABEL_24:
  unint64_t v27 = a4[4];
  if (((char)a4[4] & 0x80000000) == 0) {
    goto LABEL_41;
  }
  unsigned int v28 = a4[4];
  if (v28 <= 0xBF)
  {
    unint64_t v27 = a4[5] | ((v27 & 0x3F) << 8);
    goto LABEL_41;
  }
  if (v28 > 0xDF)
  {
    if (v28 > 0xEF)
    {
      if (v28 > 0xF7)
      {
        if (v28 > 0xFB)
        {
          if (v28 > 0xFD)
          {
            if (v28 == 255)
            {
              unint64_t v27 = *(void *)(a4 + 5);
              goto LABEL_41;
            }
            unint64_t v29 = ((unint64_t)a4[5] << 48) | ((unint64_t)a4[6] << 40) | ((unint64_t)a4[7] << 32) | ((unint64_t)a4[8] << 24) | ((unint64_t)a4[9] << 16) | ((unint64_t)a4[10] << 8);
            uint64_t v30 = a4[11];
          }
          else
          {
            unint64_t v29 = ((v27 & 1) << 48) | ((unint64_t)a4[5] << 40) | ((unint64_t)a4[6] << 32) | ((unint64_t)a4[7] << 24) | ((unint64_t)a4[8] << 16) | ((unint64_t)a4[9] << 8);
            uint64_t v30 = a4[10];
          }
        }
        else
        {
          unint64_t v29 = ((v27 & 3) << 40) | ((unint64_t)a4[5] << 32) | ((unint64_t)a4[6] << 24) | ((unint64_t)a4[7] << 16) | ((unint64_t)a4[8] << 8);
          uint64_t v30 = a4[9];
        }
      }
      else
      {
        unint64_t v29 = ((v27 & 7) << 32) | ((unint64_t)a4[5] << 24) | ((unint64_t)a4[6] << 16) | ((unint64_t)a4[7] << 8);
        uint64_t v30 = a4[8];
      }
    }
    else
    {
      unint64_t v29 = ((v27 & 0xF) << 24) | ((unint64_t)a4[5] << 16) | ((unint64_t)a4[6] << 8);
      uint64_t v30 = a4[7];
    }
  }
  else
  {
    unint64_t v29 = ((v27 & 0x1F) << 16) | ((unint64_t)a4[5] << 8);
    uint64_t v30 = a4[6];
  }
  unint64_t v27 = v29 | v30;
LABEL_41:
  if (v23 == v27)
  {
    int v31 = 0;
    int v32 = *(_DWORD *)a4 - *(_DWORD *)v21;
    char v33 = 1;
    goto LABEL_44;
  }
LABEL_43:
  char v33 = 0;
  int v32 = *(_DWORD *)a4 + 4;
  int v31 = 1;
LABEL_44:
  if (!v32 || v32 >= v20) {
    goto LABEL_4;
  }
  if ((int)v19 >= v18 / 4 || (v20 >= 0 ? (int v34 = v18 - v19) : (int v34 = v20 + 1), v35 = (v34 >> 1) - v32, v32 >= v35))
  {
    int v36 = a2[1] / 10;
    if (v36 >= v20) {
      int v37 = v18 - v19;
    }
    else {
      int v37 = a2[1] / 10;
    }
    if (v32 >= v36) {
      int v35 = v32;
    }
    else {
      int v35 = v37;
    }
  }
  if ((int)v22 < 21)
  {
    unint64_t v74 = __si_assert_copy_extra_2445(0, -1);
    uint64_t v75 = v74;
    unsigned int v76 = "";
    if (v74) {
      unsigned int v76 = v74;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 4189, "copy_end < end", v76);
    free(v75);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  int v38 = 0;
  unsigned int v39 = (char *)a2 + v22;
  uint64_t v40 = (a2[5] + 4);
  BOOL v41 = (char *)a2 + v40 + 20;
  uint64_t v42 = (unsigned __int8 *)(a2 + 5);
  int v43 = (char *)(a2 + 5);
  if (v41 < (char *)a2 + v22 && v35 >= 1)
  {
    if (v33)
    {
      if (v41 < v21)
      {
        int v38 = a2[5] + 4;
        uint64_t v42 = (unsigned __int8 *)(a2 + 5);
        int v43 = (char *)a2 + v40 + 20;
        goto LABEL_71;
      }
      int v38 = a2[5] + 4;
      uint64_t v42 = (unsigned __int8 *)(a2 + 5);
      int v43 = (char *)a2 + v40 + 20;
      if ((int)v40 + v32 < v20)
      {
LABEL_71:
        while (1)
        {
          BOOL v45 = (unsigned __int8 *)v43;
          uint64_t v46 = (*(_DWORD *)v43 + 4);
          v43 += v46;
          if (v43 >= v39 || v38 >= v35) {
            break;
          }
          v38 += v46;
          BOOL v48 = v43 < v21 || v38 + v32 < v20;
          uint64_t v42 = v45;
          if (!v48) {
            goto LABEL_80;
          }
        }
        int v43 = (char *)v45;
      }
    }
    else
    {
      int v38 = 0;
      int v43 = (char *)(a2 + 5);
      do
      {
        uint64_t v42 = (unsigned __int8 *)v43;
        int v43 = v41;
        v38 += v40;
        uint64_t v40 = (*(_DWORD *)v41 + 4);
        v41 += v40;
      }
      while (v41 < v39 && v38 < v35);
    }
  }
LABEL_80:
  if (v38 < v35 && v38 < v32 && v43 <= v21) {
    goto LABEL_4;
  }
  if (v38 >= v20)
  {
    int v38 = v38 - *(_DWORD *)v42 - 4;
    if (v38 >= v20) {
      goto LABEL_4;
    }
    if (v38 < v32 && v42 <= (unsigned __int8 *)v21) {
      goto LABEL_4;
    }
    unsigned int v126 = a8;
    uint64_t v55 = (unsigned __int8 *)(a2 + 5);
    do
    {
      uint64_t v49 = v55;
      v55 += (*(_DWORD *)v55 + 4);
    }
    while (v55 < v42);
    if (v49 == v42) {
      goto LABEL_4;
    }
  }
  else
  {
    unsigned int v126 = a8;
    uint64_t v49 = v42;
    uint64_t v42 = (unsigned __int8 *)v43;
  }
  if (v38 + (int)v19 >= v18) {
    goto LABEL_4;
  }
  if (v42 > (unsigned __int8 *)v21)
  {
    if (v38 + v32 <= v20)
    {
      int v117 = v38 + v32;
      int v119 = a2 + v22;
      __int16 v123 = (_DWORD *)((char *)a2 + a5);
      int v50 = a5 - 20;
      int v122 = v31;
      memcpy((char *)value_out + v19, a2 + 5, a5 - 20);
      uint64_t v51 = (char *)value_out;
      uint64_t v52 = *((int *)value_out + 2) + (uint64_t)(a5 - 20);
      *((_DWORD *)value_out + 2) = v52;
      memcpy(&v51[v52], a4, (*(_DWORD *)a4 + 4));
      *((_DWORD *)value_out + 2) += *(_DWORD *)a4 + 4;
      if (v122)
      {
        BOOL v53 = (unsigned __int8 *)a2 + a5;
      }
      else
      {
        uint64_t v57 = (*v123 + 4);
        v50 += v57;
        BOOL v53 = (unsigned __int8 *)v123 + v57;
      }
      __int16 v125 = v53;
      int v113 = v50;
      if (v53 == v42)
      {
        uint64_t v58 = (uint64_t)(a4 + 4);
        unint64_t v59 = a4[4];
        if ((char)a4[4] < 0)
        {
          unsigned int v65 = a4[4];
          if (v65 <= 0xBF)
          {
            unsigned __int8 v61 = a4[4];
            uint64_t v62 = a4[5];
            goto LABEL_116;
          }
          if (v65 <= 0xDF)
          {
            unint64_t v66 = ((v59 & 0x1F) << 16) | ((unint64_t)a4[5] << 8);
            uint64_t v67 = a4[6];
            goto LABEL_123;
          }
          if (v65 <= 0xEF)
          {
            unint64_t v68 = ((v59 & 0xF) << 24) | ((unint64_t)a4[5] << 16) | ((unint64_t)a4[6] << 8);
            uint64_t v69 = a4[7];
            goto LABEL_130;
          }
          if (v65 <= 0xF7)
          {
            unint64_t v70 = ((v59 & 7) << 32) | ((unint64_t)a4[5] << 24) | ((unint64_t)a4[6] << 16) | ((unint64_t)a4[7] << 8);
            uint64_t v71 = a4[8];
            goto LABEL_137;
          }
          if (v65 <= 0xFB)
          {
            unint64_t v72 = ((v59 & 3) << 40) | ((unint64_t)a4[5] << 32) | ((unint64_t)a4[6] << 24) | ((unint64_t)a4[7] << 16) | ((unint64_t)a4[8] << 8);
            uint64_t v73 = a4[9];
            goto LABEL_148;
          }
          if (v65 <= 0xFD)
          {
            unint64_t v77 = ((v59 & 1) << 48) | ((unint64_t)a4[5] << 40) | ((unint64_t)a4[6] << 32) | ((unint64_t)a4[7] << 24) | ((unint64_t)a4[8] << 16) | ((unint64_t)a4[9] << 8);
            uint64_t v78 = a4[10];
            goto LABEL_156;
          }
          if (v65 == 255)
          {
            unint64_t v59 = *(void *)(a4 + 5);
            goto LABEL_181;
          }
          unint64_t v94 = ((unint64_t)a4[5] << 48) | ((unint64_t)a4[6] << 40) | ((unint64_t)a4[7] << 32) | ((unint64_t)a4[8] << 24) | ((unint64_t)a4[9] << 16) | ((unint64_t)a4[10] << 8);
          uint64_t v95 = a4[11];
LABEL_186:
          unint64_t v59 = v94 | v95;
          uint64_t v64 = 8;
          goto LABEL_187;
        }
      }
      else
      {
        *(void *)stat buf = 0;
        uint64_t v58 = (uint64_t)(v49 + 4);
        unint64_t v59 = v49[4];
        if ((char)v49[4] < 0)
        {
          unsigned int v60 = v49[4];
          if (v60 <= 0xBF)
          {
            unsigned __int8 v61 = v49[4];
            uint64_t v62 = v49[5];
LABEL_116:
            unint64_t v59 = v62 & 0xFFFFFFFFFFFFC0FFLL | ((unint64_t)(v61 & 0x3F) << 8);
            uint64_t v64 = 2;
            goto LABEL_187;
          }
          if (v60 <= 0xDF)
          {
            unint64_t v66 = ((v59 & 0x1F) << 16) | ((unint64_t)v49[5] << 8);
            uint64_t v67 = v49[6];
LABEL_123:
            unint64_t v59 = v66 | v67;
            uint64_t v64 = 3;
            goto LABEL_187;
          }
          if (v60 <= 0xEF)
          {
            unint64_t v68 = ((v59 & 0xF) << 24) | ((unint64_t)v49[5] << 16) | ((unint64_t)v49[6] << 8);
            uint64_t v69 = v49[7];
LABEL_130:
            unint64_t v59 = v68 | v69;
            uint64_t v64 = 4;
            goto LABEL_187;
          }
          if (v60 <= 0xF7)
          {
            unint64_t v70 = ((v59 & 7) << 32) | ((unint64_t)v49[5] << 24) | ((unint64_t)v49[6] << 16) | ((unint64_t)v49[7] << 8);
            uint64_t v71 = v49[8];
LABEL_137:
            unint64_t v59 = v70 | v71;
            uint64_t v64 = 5;
            goto LABEL_187;
          }
          if (v60 <= 0xFB)
          {
            unint64_t v72 = ((v59 & 3) << 40) | ((unint64_t)v49[5] << 32) | ((unint64_t)v49[6] << 24) | ((unint64_t)v49[7] << 16) | ((unint64_t)v49[8] << 8);
            uint64_t v73 = v49[9];
LABEL_148:
            unint64_t v59 = v72 | v73;
            uint64_t v64 = 6;
            goto LABEL_187;
          }
          if (v60 <= 0xFD)
          {
            unint64_t v77 = ((v59 & 1) << 48) | ((unint64_t)v49[5] << 40) | ((unint64_t)v49[6] << 32) | ((unint64_t)v49[7] << 24) | ((unint64_t)v49[8] << 16) | ((unint64_t)v49[9] << 8);
            uint64_t v78 = v49[10];
LABEL_156:
            unint64_t v59 = v77 | v78;
            uint64_t v64 = 7;
            goto LABEL_187;
          }
          if (v60 == 255)
          {
            unint64_t v59 = *(void *)(v49 + 5);
LABEL_181:
            uint64_t v64 = 9;
            goto LABEL_187;
          }
          unint64_t v94 = ((unint64_t)v49[5] << 48) | ((unint64_t)v49[6] << 40) | ((unint64_t)v49[7] << 32) | ((unint64_t)v49[8] << 24) | ((unint64_t)v49[9] << 16) | ((unint64_t)v49[10] << 8);
          uint64_t v95 = v49[11];
          goto LABEL_186;
        }
      }
      uint64_t v64 = 1;
LABEL_187:
      *(void *)stat buf = v64;
      unsigned int VInt16 = ldb_readVInt16(v58, (uint64_t *)buf);
      int v97 = *(_DWORD *)(a1 + 804);
      memcpy((char *)value_out + *((int *)value_out + 2), v125, (int)v42 - (int)v125);
      unint64_t v98 = value_out;
      *((_DWORD *)value_out + 2) += v42 - v125;
      int v99 = page_compress(a1, (size_t)v98, &v127, 0, (*(_DWORD *)(a1 + 804) & 2) != 0);
      int v81 = v117;
      if (v99)
      {
LABEL_188:
        v100 = v127;
        int v17 = value_out;
        *((_DWORD *)value_out + 2) -= v81;
        if (v100)
        {
          free(v100);
          int v17 = value_out;
        }
        goto LABEL_4;
      }
      int v89 = v97 & (VInt16 >> 5) & 1;
      int v101 = v113 + v42 - v125;
      memmove(a2 + 5, v42, v119 - (int)v42);
      a2[2] -= v101;
      if (v101 != v38)
      {
        int v116 = v89;
        unint64_t v102 = v59;
        int v103 = *__error();
        __int16 v104 = _SILogForLogForCategory(7);
        os_log_type_t v105 = 2 * (dword_1E9FC90C0 < 4);
        if (os_log_type_enabled(v104, v105))
        {
          *(_DWORD *)stat buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v101;
          __int16 v130 = 1024;
          int v131 = v38;
          _os_log_impl(&dword_1BD672000, v104, v105, "try_push_left: issshhhn't dat strange? decrease %d num_bytes %d\n", buf, 0xEu);
        }
        *__error() = v103;
        unsigned int v87 = v126;
        int v90 = v122;
        unint64_t v59 = v102;
        int v89 = v116;
        goto LABEL_201;
      }
      unsigned int v87 = v126;
      goto LABEL_200;
    }
LABEL_4:
    page_release(a1, v17, a6, 0, 0);
    return 28;
  }
  if (v32 + (int)v22 - v38 >= a2[1]) {
    goto LABEL_4;
  }
  *(void *)stat buf = 0;
  unint64_t v118 = v49[4];
  v120 = (char *)a2 + v22;
  int v122 = v31;
  v124 = (char *)a2 + a5;
  __src = (char *)(a2 + 5);
  if ((char)v49[4] < 0)
  {
    unsigned int v63 = v49[4];
    if (v63 > 0xBF)
    {
      if (v63 > 0xDF)
      {
        if (v63 > 0xEF)
        {
          if (v63 > 0xF7)
          {
            if (v63 > 0xFB)
            {
              if (v63 > 0xFD)
              {
                if (v63 == 255)
                {
                  unint64_t v118 = *(void *)(v49 + 5);
                  uint64_t v56 = 9;
                }
                else
                {
                  unint64_t v118 = ((unint64_t)v49[5] << 48) | ((unint64_t)v49[6] << 40) | ((unint64_t)v49[7] << 32) | ((unint64_t)v49[8] << 24) | ((unint64_t)v49[9] << 16) | ((unint64_t)v49[10] << 8) | v49[11];
                  uint64_t v56 = 8;
                }
              }
              else
              {
                unint64_t v118 = ((v118 & 1) << 48) | ((unint64_t)v49[5] << 40) | ((unint64_t)v49[6] << 32) | ((unint64_t)v49[7] << 24) | ((unint64_t)v49[8] << 16) | ((unint64_t)v49[9] << 8) | v49[10];
                uint64_t v56 = 7;
              }
            }
            else
            {
              unint64_t v118 = ((v118 & 3) << 40) | ((unint64_t)v49[5] << 32) | ((unint64_t)v49[6] << 24) | ((unint64_t)v49[7] << 16) | ((unint64_t)v49[8] << 8) | v49[9];
              uint64_t v56 = 6;
            }
          }
          else
          {
            unint64_t v118 = ((v118 & 7) << 32) | ((unint64_t)v49[5] << 24) | ((unint64_t)v49[6] << 16) | ((unint64_t)v49[7] << 8) | v49[8];
            uint64_t v56 = 5;
          }
        }
        else
        {
          unint64_t v118 = ((v118 & 0xF) << 24) | ((unint64_t)v49[5] << 16) | ((unint64_t)v49[6] << 8) | v49[7];
          uint64_t v56 = 4;
        }
      }
      else
      {
        unint64_t v118 = ((v118 & 0x1F) << 16) | ((unint64_t)v49[5] << 8) | v49[6];
        uint64_t v56 = 3;
      }
    }
    else
    {
      unint64_t v118 = v49[5] | ((v118 & 0x3F) << 8);
      uint64_t v56 = 2;
    }
  }
  else
  {
    uint64_t v56 = 1;
  }
  *(void *)stat buf = v56;
  unsigned int v114 = ldb_readVInt16((uint64_t)(v49 + 4), (uint64_t *)buf);
  int v79 = *(_DWORD *)(a1 + 804);
  memcpy((char *)value_out + *((int *)value_out + 2), __src, v38);
  __int16 v80 = value_out;
  *((_DWORD *)value_out + 2) += v38;
  if (page_compress(a1, (size_t)v80, &v127, 0, (*(_DWORD *)(a1 + 804) & 2) != 0))
  {
    int v81 = v38;
    goto LABEL_188;
  }
  int v115 = v79 & (v114 >> 5) & 1;
  memmove(__src, v42, v124 - (char *)v42);
  __int16 v82 = &__src[v124 - (char *)v42];
  int v83 = *(_DWORD *)v124;
  memcpy(v82, a4, (*(_DWORD *)a4 + 4));
  if (v122)
  {
    uint64_t v84 = &v82[*(_DWORD *)v82 + 4];
    size_t v85 = v120 - v124;
    uint64_t v86 = v124;
  }
  else
  {
    uint64_t v86 = &v124[v83 + 4];
    uint64_t v84 = &v82[*(_DWORD *)v82 + 4];
    size_t v85 = v120 - v86;
  }
  memmove(v84, v86, v85);
  unsigned int v87 = v126;
  int v88 = a2[2] - v38 + v32;
  a2[2] = v88;
  int v89 = v115;
  if (&v82[*(_DWORD *)v82 + 4] >= (char *)a2 + v88)
  {
    unint64_t v91 = v82[4];
    unint64_t v59 = v118;
    if (v82[4] < 0)
    {
      unsigned int v93 = v82[4];
      if (v93 > 0xBF)
      {
        if (v93 > 0xDF)
        {
          if (v93 > 0xEF)
          {
            if (v93 > 0xF7)
            {
              if (v93 > 0xFB)
              {
                if (v93 > 0xFD)
                {
                  if (v93 == 255)
                  {
                    unint64_t v91 = *(void *)(v82 + 5);
                    uint64_t v92 = 9;
                  }
                  else
                  {
                    unint64_t v91 = ((unint64_t)v82[5] << 48) | ((unint64_t)v82[6] << 40) | ((unint64_t)v82[7] << 32) | ((unint64_t)v82[8] << 24) | ((unint64_t)v82[9] << 16) | ((unint64_t)v82[10] << 8) | v82[11];
                    uint64_t v92 = 8;
                  }
                }
                else
                {
                  unint64_t v91 = ((v91 & 1) << 48) | ((unint64_t)v82[5] << 40) | ((unint64_t)v82[6] << 32) | ((unint64_t)v82[7] << 24) | ((unint64_t)v82[8] << 16) | ((unint64_t)v82[9] << 8) | v82[10];
                  uint64_t v92 = 7;
                }
              }
              else
              {
                unint64_t v91 = ((v91 & 3) << 40) | ((unint64_t)v82[5] << 32) | ((unint64_t)v82[6] << 24) | ((unint64_t)v82[7] << 16) | ((unint64_t)v82[8] << 8) | v82[9];
                uint64_t v92 = 6;
              }
            }
            else
            {
              unint64_t v91 = ((v91 & 7) << 32) | ((unint64_t)v82[5] << 24) | ((unint64_t)v82[6] << 16) | ((unint64_t)v82[7] << 8) | v82[8];
              uint64_t v92 = 5;
            }
          }
          else
          {
            unint64_t v91 = ((v91 & 0xF) << 24) | ((unint64_t)v82[5] << 16) | ((unint64_t)v82[6] << 8) | v82[7];
            uint64_t v92 = 4;
          }
        }
        else
        {
          unint64_t v91 = ((v91 & 0x1F) << 16) | ((unint64_t)v82[5] << 8) | v82[6];
          uint64_t v92 = 3;
        }
        unint64_t v59 = v118;
        int v89 = v115;
      }
      else
      {
        unint64_t v91 = v82[5] | ((v91 & 0x3F) << 8);
        uint64_t v92 = 2;
      }
    }
    else
    {
      uint64_t v92 = 1;
    }
    *(void *)stat buf = v92;
    char v106 = *(_DWORD *)(a1 + 804) & (ldb_readVInt16((uint64_t)(v82 + 4), (uint64_t *)buf) >> 5);
    uint64_t v107 = *(void *)(a1 + 856);
    int v108 = *(_DWORD *)(v107 + 12);
    uint64_t v109 = v107 + 16 * *(int *)(v107 + 16);
    *(void *)(v109 + 20) = v91;
    *(_DWORD *)(v109 + 32) = *(_DWORD *)(v109 + 32) & 0xFFFFFFF | ((v106 & 1) << 28);
    *(_DWORD *)(v107 + 12) = v108 | 1;
    unsigned int v87 = v126;
LABEL_200:
    int v90 = v122;
    goto LABEL_201;
  }
  int v90 = v122;
  unint64_t v59 = v118;
LABEL_201:
  uint64_t v110 = *(void *)(a1 + 856);
  int v111 = *(_DWORD *)(v110 + 12);
  uint64_t v112 = v110 + 16 * *(int *)(v110 + 16);
  *(void *)(v112 + 4) = v59;
  *(_DWORD *)(v112 + 16) = *(_DWORD *)(v112 + 16) & 0xFFFFFFF | (v89 << 28);
  *(_DWORD *)(v110 + 12) = v111 | 1;
  if (v90) {
    ++*(void *)(a1 + 20);
  }
  db_cache_set_offset_hint(*(void *)(a1 + 928), (uint64_t)value_out, 0, 0, 0);
  db_cache_set_offset_hint(*(void *)(a1 + 928), (uint64_t)a2, 0, 0, 0);
  page_release(a1, a2, a3, 1u, 0);
  page_release_dirty_compressed(a1, (char *)value_out, v127, a6, v87);
  return 0;
}

uint64_t map_change_pgnum(uint64_t a1, int a2, int a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v5 = *(int **)(a1 + 856);
  uint64_t v6 = v5[4];
  uint64_t v7 = v5[2];
  if ((int)v6 >= (int)v7 || v5[4 * v6 + 7] != a2)
  {
    if ((int)v7 < 1)
    {
      uint64_t v6 = 0;
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v8 = v5 + 7;
      while (1)
      {
        int v9 = *v8;
        v8 += 4;
        if (v9 == a2) {
          break;
        }
        if (v7 == ++v6) {
          goto LABEL_11;
        }
      }
    }
  }
  if (v6 >= v7)
  {
LABEL_11:
    int v11 = *__error();
    int v12 = _SILogForLogForCategory(7);
    os_log_type_t v13 = 2 * (dword_1E9FC90C0 < 4);
    if (os_log_type_enabled(v12, v13))
    {
      int v14 = 136315394;
      uint64_t v15 = a1 + 324;
      __int16 v16 = 1024;
      int v17 = a2;
      _os_log_impl(&dword_1BD672000, v12, v13, "%s : ERR: map_change_pgnum: BAD NEWS! pgnum 0x%x not found\n", (uint8_t *)&v14, 0x12u);
    }
    *__error() = v11;
    return 22;
  }
  else
  {
    uint64_t result = 0;
    v5[4 * v6 + 7] = a3;
    v5[3] |= 1u;
  }
  return result;
}

uint64_t __page_release_block_invoke(uint64_t a1, uint64_t a2)
{
  return _flush_cache_entry(*(void *)(a1 + 32), 0, a2, 0);
}

void __sdb_string_zone_once_f_block_invoke()
{
  zone = malloc_create_zone(0x10000uLL, 0);
  string_table_zone = (uint64_t)zone;
  malloc_set_zone_name(zone, "sdb_string_table_zone");
}

malloc_zone_t *__sdb_map_zone_once_f_block_invoke()
{
  uint64_t result = malloc_default_zone();
  sdb_map_zone = (uint64_t)result;
  return result;
}

uint64_t update_db_header(uint64_t a1)
{
  int v1 = MEMORY[0x1F4188790](a1);
  uint64_t v3 = v2;
  int v5 = v4;
  int v6 = v1;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  bzero(&v39, 0x1000uLL);
  uint64_t v7 = (atomic_uint *)fd_create_protected(v6, v5, 2, 0);
  uint64_t v8 = v7;
  if (v7)
  {
    uint64_t v9 = fd_pread(v7, &v39, 0x1000uLL, 0);
    if (v9 == 4096)
    {
      if (v39 == 947155812)
      {
        unsigned int v39 = 1685287992;
        *(int8x8_t *)v10.i8 = v41;
        v10.i32[2] = v42;
        int8x16_t v11 = vrev32q_s8(v10);
        unsigned int v42 = v11.u32[2];
        int8x8_t v41 = *(int8x8_t *)v11.i8;
        int8x16_t v43 = vrev64q_s8(v43);
        int8x16_t v44 = vrev32q_s8(v44);
        int8x16_t v45 = vrev32q_s8(v45);
        int v12 = bswap32(v40 & 0x7FFFFF7F | 0x80000000);
      }
      else
      {
        int v12 = v40 & 0x7FFFFF7F;
      }
      unsigned int v40 = v12;
      unsigned int v22 = (*(uint64_t (**)(uint64_t))(v3 + 16))(v3);
      if ((v22 & 0x42) != 0)
      {
        if (v46) {
          uint64_t v14 = v46;
        }
        else {
          uint64_t v14 = 22;
        }
        int v23 = *__error();
        unsigned int v24 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          int v31 = 136315650;
          int v32 = "update_db_header";
          __int16 v33 = 1024;
          int v34 = 6722;
          __int16 v35 = 2080;
          *(void *)int v36 = v5;
          _os_log_error_impl(&dword_1BD672000, v24, OS_LOG_TYPE_ERROR, "%s:%d: update_db_header (%s) flags check failed", (uint8_t *)&v31, 0x1Cu);
        }
        *__error() = v23;
        int v17 = 6719;
      }
      else
      {
        if (v22 == v40) {
          goto LABEL_33;
        }
        unsigned int v40 = v22;
        if ((v22 & 0x80) != 0)
        {
          unsigned int v39 = bswap32(v39);
          unsigned int v40 = bswap32(v22);
          int8x8_t v41 = vrev32_s8(v41);
          unsigned int v42 = bswap32(v42);
          int8x16_t v43 = vrev64q_s8(v43);
          int8x16_t v44 = vrev32q_s8(v44);
          int8x16_t v45 = vrev32q_s8(v45);
        }
        if (fd_pwrite((uint64_t)v8, (uint64_t)&v39, 0x1000uLL, 0) == 4096)
        {
LABEL_33:
          fd_release(v8);
          return 0;
        }
        int v28 = *__error();
        unint64_t v29 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          int v31 = 136315650;
          int v32 = "update_db_header";
          __int16 v33 = 1024;
          int v34 = 6733;
          __int16 v35 = 2080;
          *(void *)int v36 = v5;
          _os_log_error_impl(&dword_1BD672000, v29, OS_LOG_TYPE_ERROR, "%s:%d: update_db_header (%s) write failed", (uint8_t *)&v31, 0x1Cu);
        }
        *__error() = v28;
        unsigned int v30 = *__error();
        if (v30) {
          uint64_t v14 = v30;
        }
        else {
          uint64_t v14 = 0xFFFFFFFFLL;
        }
        int v17 = 6735;
      }
    }
    else
    {
      uint64_t v18 = v9;
      unsigned int v19 = *__error();
      if (v19) {
        uint64_t v14 = v19;
      }
      else {
        uint64_t v14 = 0xFFFFFFFFLL;
      }
      int v20 = *__error();
      int v21 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        int v31 = 136316162;
        int v32 = "update_db_header";
        __int16 v33 = 1024;
        int v34 = 6699;
        __int16 v35 = 2080;
        *(void *)int v36 = v5;
        *(_WORD *)&v36[8] = 2048;
        *(void *)int v37 = v18;
        *(_WORD *)&v37[8] = 2048;
        uint64_t v38 = 4096;
        _os_log_error_impl(&dword_1BD672000, v21, OS_LOG_TYPE_ERROR, "%s:%d: update_db_header (%s) fd_pread %zd != %zd", (uint8_t *)&v31, 0x30u);
      }
      *__error() = v20;
      int v17 = 6697;
    }
  }
  else
  {
    unsigned int v13 = *__error();
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0xFFFFFFFFLL;
    }
    int v15 = *__error();
    __int16 v16 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      int v31 = 136315650;
      int v32 = "update_db_header";
      __int16 v33 = 1024;
      int v34 = 6691;
      __int16 v35 = 2080;
      *(void *)int v36 = v5;
      _os_log_error_impl(&dword_1BD672000, v16, OS_LOG_TYPE_ERROR, "%s:%d: update_db_header (%s) fd_create failed", (uint8_t *)&v31, 0x1Cu);
    }
    *__error() = v15;
    int v17 = 6689;
  }
  fd_release(v8);
  int v25 = *__error();
  uint64_t v26 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    int v31 = 136316162;
    int v32 = "update_db_header";
    __int16 v33 = 1024;
    int v34 = 6744;
    __int16 v35 = 1024;
    *(_DWORD *)int v36 = v14;
    *(_WORD *)&v36[4] = 1024;
    *(_DWORD *)&v36[6] = v17;
    *(_WORD *)int v37 = 2080;
    *(void *)&v37[2] = v5;
    _os_log_error_impl(&dword_1BD672000, v26, OS_LOG_TYPE_ERROR, "%s:%d: update_db_header failed err:%d at %d for %s", (uint8_t *)&v31, 0x28u);
  }
  *__error() = v25;
  return v14;
}

uint64_t __db2_update_datastore_state_block_invoke_5(uint64_t a1, int a2)
{
  return a2 & 0xFFFFF9FE | 1;
}

uint64_t __db2_update_datastore_state_block_invoke_4(uint64_t a1, int a2)
{
  return a2 & 0xFFFFF9FE | 1;
}

uint64_t __db2_update_datastore_state_block_invoke_3(uint64_t a1, int a2)
{
  return a2 & 0xFFFFF9FE | 0x201;
}

uint64_t __db2_update_datastore_state_block_invoke_2(uint64_t a1, int a2)
{
  return a2 & 0xFFFFF9FE | 0x401;
}

uint64_t __db2_update_datastore_state_block_invoke_29(uint64_t a1, int a2)
{
  return a2 & 0xFFFFF9FE | 1;
}

uint64_t __db2_update_datastore_state_block_invoke(uint64_t a1, int a2)
{
  return a2 & 0xFFFFF9BC;
}

uint64_t db2_get_datastore_with_ctx(unsigned int *a1)
{
  uint64_t v184 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v3 = (char *)*((void *)a1 + 1);
  unsigned int v4 = a1[4];
  __base = 0;
  if (sdb_map_zone_once != -1) {
    dispatch_once(&sdb_map_zone_once, &__block_literal_global_131_11680);
  }
  bzero(__s1, 0x400uLL);
  bzero(__dst, 0x400uLL);
  int v5 = (char *)malloc_type_zone_calloc((malloc_zone_t *)sdb_map_zone, 1uLL, 0x1000uLL, 0x2F51556CuLL);
  int v6 = (int8x16_t *)malloc_type_zone_calloc((malloc_zone_t *)sdb_map_zone, 1uLL, 0x1000uLL, 0x28DDC4ADuLL);
  uint64_t v7 = v6;
  if (!v5 || !v6)
  {
    uint64_t v18 = 0;
    int v12 = 0;
    if (v5) {
      goto LABEL_58;
    }
    if (!v6) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  int v8 = ~(v4 >> 2) & 2;
  unsigned int v9 = a1[5];
  *((_DWORD *)v5 + 246) = v9;
  v6[61].i32[2] = v9;
  unsigned __int8 v10 = ((int)(a1[4] << 13) >> 31) & 3;
  int8x16_t v11 = (atomic_uint *)fd_create_protected(v2, v3, v8, v10);
  int v12 = v11;
  if (!v11) {
    goto LABEL_21;
  }
  *(void *)stat buf = 0;
  int v13 = _fd_acquire_fd((uint64_t)v11, buf);
  if ((v13 & 0x80000000) == 0)
  {
    int v14 = v13;
    goto LABEL_8;
  }
  if ((v4 & 0x10000) == 0 || !v8 || (fd_make_readonly((uint64_t)v12), int v21 = _fd_acquire_fd((uint64_t)v12, buf), v21 < 0))
  {
LABEL_21:
    uint64_t v18 = 0;
    goto LABEL_58;
  }
  int v14 = v21;
  v4 |= 8u;
LABEL_8:
  _fd_release_fd(v12, v14, 0, *(uint64_t *)buf);
  int v15 = strrchr(v3, 47);
  if (v15)
  {
    __int16 v16 = v15;
    strlcpy(__dst, v3, v15 - v3 + 2);
    strlcat(__dst, ".", 0x400uLL);
    int v17 = v16 + 1;
  }
  else
  {
    strcpy(__dst, ".");
    int v17 = v3;
  }
  strlcat(__dst, v17, 0x400uLL);
  if ((v4 & 0x28) == 0x20) {
    int v22 = v8 | 0x200;
  }
  else {
    int v22 = v8;
  }
  uint64_t v18 = (atomic_uint *)fd_create_protected(v2, __dst, v22, v10);
  if (!v18) {
    goto LABEL_58;
  }
  uint64_t v23 = *((void *)v5 + 106);
  if (v23) {
    *(_WORD *)(v23 + 56) |= 4u;
  }
  *(void *)stat buf = 0;
  *__error() = 0;
  int v24 = _fd_acquire_fd((uint64_t)v18, buf);
  if (v24 < 0)
  {
    if (*__error() != 2) {
      goto LABEL_58;
    }
    fd_release(v18);
    uint64_t v18 = v12;
    if ((v4 & 8) == 0)
    {
      uint64_t v18 = (atomic_uint *)fd_create_protected(v2, __dst, 2562, v10);
      if (!v18) {
        goto LABEL_58;
      }
    }
  }
  else
  {
    _fd_release_fd(v18, v24, 0, *(uint64_t *)buf);
  }
  uint64_t v25 = fd_pread(v12, v5, 0x1000uLL, 0);
  if (v25 != 4096)
  {
    uint64_t v28 = v25;
    *(void *)stat buf = 0;
    int v29 = _fd_acquire_fd((uint64_t)v12, buf);
    if (v29 != -1)
    {
      int v30 = v29;
      fcntl(v29, 50, __s1);
      _fd_release_fd(v12, v30, 0, *(uint64_t *)buf);
    }
    if (strstr(__s1, "130162031.fixed"))
    {
      v144 = __si_assert_copy_extra_2445(v12, -1);
      v145 = v144;
      v146 = "";
      if (v144) {
        v146 = v144;
      }
      __message_assert("%s:%u: failed assertion '%s' %s should not try to read %s", "sdb2.c", 7236, "strstr(full_path, \"130162031.fixed\") == NULL", v146, __s1);
      free(v145);
      if (__valid_fsp(v12)) {
        uint64_t v147 = 2989;
      }
      else {
        uint64_t v147 = 3072;
      }
      *(_DWORD *)uint64_t v147 = -559038737;
      abort();
    }
    int v31 = *__error();
    int v32 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 136316162;
      *(void *)&uint8_t buf[4] = "db2_get_datastore_with_ctx";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7237;
      __int16 v177 = 2080;
      *(void *)v178 = __s1;
      *(_WORD *)&v178[8] = 1024;
      int v179 = 4096;
      __int16 v180 = 2048;
      uint64_t v181 = v28;
      _os_log_error_impl(&dword_1BD672000, v32, OS_LOG_TYPE_ERROR, "%s:%d: %s : db2_get_datastore: ERR: could not read %d bytes (read %zd bytes)\n", buf, 0x2Cu);
    }
    *__error() = v31;
    bzero(v5, 0x1000uLL);
    goto LABEL_58;
  }
  *(_OWORD *)(v5 + 968) = 0u;
  *(_OWORD *)(v5 + 984) = 0u;
  *(_OWORD *)(v5 + 936) = 0u;
  *(_OWORD *)(v5 + 952) = 0u;
  *(_OWORD *)(v5 + 904) = 0u;
  *(_OWORD *)(v5 + 920) = 0u;
  *(_OWORD *)(v5 + 872) = 0u;
  *(_OWORD *)(v5 + 888) = 0u;
  *(_OWORD *)(v5 + 840) = 0u;
  *(_OWORD *)(v5 + 856) = 0u;
  *(_OWORD *)(v5 + 808) = 0u;
  *(_OWORD *)(v5 + 824) = 0u;
  *(_OWORD *)(v5 + 776) = 0u;
  *(_OWORD *)(v5 + 792) = 0u;
  *(_OWORD *)(v5 + 744) = 0u;
  *(_OWORD *)(v5 + 760) = 0u;
  *(_OWORD *)(v5 + 712) = 0u;
  *(_OWORD *)(v5 + 728) = 0u;
  *(_OWORD *)(v5 + 680) = 0u;
  *(_OWORD *)(v5 + 696) = 0u;
  *(_OWORD *)(v5 + 648) = 0u;
  *(_OWORD *)(v5 + 664) = 0u;
  *(_OWORD *)(v5 + 616) = 0u;
  *(_OWORD *)(v5 + 632) = 0u;
  *(_OWORD *)(v5 + 584) = 0u;
  *(_OWORD *)(v5 + 600) = 0u;
  if (fd_pread(v18, v7, 0x1000uLL, 0) != 4096) {
    bzero(v7, 0x1000uLL);
  }
  *(int8x16_t *)((char *)&v7[60] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[61] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[58] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[59] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[56] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[57] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[54] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[55] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[52] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[53] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[50] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[51] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[48] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[49] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[46] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[47] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[44] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[45] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[42] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[43] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[40] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[41] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[38] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[39] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[36] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[37] + 8) = 0u;
  *((void *)v5 + 105) = v12;
  *((void *)v5 + 106) = v18;
  *((void *)v5 + 107) = 0;
  v7[53].i64[1] = 0;
  if (*(_DWORD *)v5 == 947155812)
  {
    int8x16_t v26 = vrev32q_s8(*(int8x16_t *)v5);
    *(int8x16_t *)int v5 = v26;
    *((_DWORD *)v5 + 4) = bswap32(*((_DWORD *)v5 + 4));
    *(int8x16_t *)(v5 + 20) = vrev64q_s8(*(int8x16_t *)(v5 + 20));
    *(int8x16_t *)(v5 + 36) = vrev32q_s8(*(int8x16_t *)(v5 + 36));
    *(int8x16_t *)(v5 + 52) = vrev32q_s8(*(int8x16_t *)(v5 + 52));
    int v27 = v26.i32[1] & 0x7FFFFF7F | 0x80;
  }
  else
  {
    int v27 = *((_DWORD *)v5 + 1) & 0x7FFFFF7F;
  }
  *((_DWORD *)v5 + 1) = v27;
  if (v7->i32[0] == 947155812)
  {
    int8x16_t v33 = vrev32q_s8(*v7);
    *uint64_t v7 = v33;
    v7[1].i32[0] = bswap32(v7[1].u32[0]);
    *(int8x16_t *)((char *)v7 + 20) = vrev64q_s8(*(int8x16_t *)((char *)v7 + 20));
    *(int8x16_t *)((char *)v7 + 36) = vrev32q_s8(*(int8x16_t *)((char *)v7 + 36));
    *(int8x16_t *)((char *)v7 + 52) = vrev32q_s8(*(int8x16_t *)((char *)v7 + 52));
    int v34 = v33.i32[1] & 0x7FFFFF7F | 0x80;
  }
  else
  {
    int v34 = v7->i32[1] & 0x7FFFFF7F;
  }
  v7->i32[1] = v34;
  if (*(_DWORD *)v5 != 1685287992)
  {
    *(void *)stat buf = 0;
    int v41 = _fd_acquire_fd((uint64_t)v12, buf);
    if (v41 != -1)
    {
      int v42 = v41;
      fcntl(v41, 50, __s1);
      _fd_release_fd(v12, v42, 0, *(uint64_t *)buf);
    }
    int v35 = *__error();
    int8x16_t v43 = _SILogForLogForCategory(7);
    if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
      goto LABEL_57;
    }
    int v77 = *(_DWORD *)v5;
    *(_DWORD *)stat buf = 136316162;
    *(void *)&uint8_t buf[4] = "db2_get_datastore_with_ctx";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 7290;
    __int16 v177 = 2080;
    *(void *)v178 = __s1;
    *(_WORD *)&v178[8] = 1024;
    int v179 = v77;
    __int16 v180 = 1024;
    LODWORD(v181) = 1685287992;
    uint64_t v38 = "%s:%d: %s : db2_get_datastore: ERR: signature 0x%x != 0x%x. bailing out.\n";
    unsigned int v39 = v43;
    uint32_t v40 = 40;
    goto LABEL_116;
  }
  if (*((_DWORD *)v5 + 11) <= 0x13u)
  {
    fd_realpath(v12, __s1);
    int v35 = *__error();
    int v36 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      int v37 = *((_DWORD *)v5 + 11);
      *(_DWORD *)stat buf = 136315906;
      *(void *)&uint8_t buf[4] = "db2_get_datastore_with_ctx";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7297;
      __int16 v177 = 2080;
      *(void *)v178 = __s1;
      *(_WORD *)&v178[8] = 1024;
      int v179 = v37;
      uint64_t v38 = "%s:%d: %s : db2_get_datastore: ERR: bad page size %d bailing out.\n";
      unsigned int v39 = v36;
      uint32_t v40 = 34;
LABEL_116:
      _os_log_error_impl(&dword_1BD672000, v39, OS_LOG_TYPE_ERROR, v38, buf, v40);
    }
LABEL_57:
    *__error() = v35;
    goto LABEL_58;
  }
  if (v7->i32[0] != 1685287992 || v7[2].i32[3] <= 0x13u)
  {
    int v67 = *__error();
    unint64_t v68 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 136315394;
      *(void *)&uint8_t buf[4] = "db2_get_datastore_with_ctx";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7303;
      _os_log_error_impl(&dword_1BD672000, v68, OS_LOG_TYPE_ERROR, "%s:%d: bad shadow. recover.", buf, 0x12u);
    }
    *__error() = v67;
    bzero(v7, 0x1000uLL);
    int v34 = 0;
  }
  if (((*((_DWORD *)v5 + 1) | v34) & 0x30) != 0) {
    goto LABEL_58;
  }
  *((_OWORD *)v5 + 54) = 0u;
  sdb_zone_init(*((_DWORD *)v5 + 201));
  int v69 = v7->i32[1];
  int v158 = (v4 & 8) >> 2;
  if ((v69 & 0x200) == 0)
  {
    if ((v69 & 0x400) != 0)
    {
      *(int8x16_t *)((char *)v7 + 840) = *(int8x16_t *)(v5 + 840);
      *((void *)v5 + 105) = 0;
      *((void *)v5 + 106) = 0;
      *((void *)v5 + 108) = 0;
      *((void *)v5 + 109) = 0;
      uint64_t v19 = (uint64_t)v7;
      uint64_t v7 = (int8x16_t *)v5;
LABEL_133:
      int v81 = v4 & 8;
      goto LABEL_134;
    }
    if (v69)
    {
LABEL_132:
      uint64_t v19 = (uint64_t)v5;
      goto LABEL_133;
    }
    if ((*((_WORD *)v5 + 2) & 0x201) != 0)
    {
      if (isRegisteredForCloning(v2)) {
        int v70 = fd_copyfile((uint64_t)v12, (uint64_t)v18, 1);
      }
      else {
        int v70 = copy_datastore((uint64_t)v5, v12, (uint64_t)v18, 0);
      }
      int v157 = v70;
      int v82 = *__error();
      int v83 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)stat buf = 0;
        _os_log_impl(&dword_1BD672000, v83, OS_LOG_TYPE_DEFAULT, "Open sdb, recover from shadow", buf, 2u);
      }
      *__error() = v82;
      if (v157) {
        goto LABEL_58;
      }
      v158 |= 0x84u;
      goto LABEL_132;
    }
    fd_realpath(v12, __s1);
    int v35 = *__error();
    unsigned int v76 = _SILogForLogForCategory(7);
    if (!os_log_type_enabled(v76, OS_LOG_TYPE_ERROR)) {
      goto LABEL_57;
    }
    *(_DWORD *)stat buf = 136315650;
    *(void *)&uint8_t buf[4] = "db2_get_datastore_with_ctx";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 7398;
    __int16 v177 = 2080;
    *(void *)v178 = __s1;
    uint64_t v38 = "%s:%d: %s : db2_get_datastore: ERR: both shadow and master are dirty!  no recovery possible.\n";
LABEL_114:
    unsigned int v39 = v76;
    uint32_t v40 = 28;
    goto LABEL_116;
  }
  int v155 = *__error();
  uint64_t v71 = _SILogForLogForCategory(7);
  os_log_type_t v72 = 2 * (dword_1E9FC90C0 < 4);
  if (os_log_type_enabled(v71, v72))
  {
    *(_DWORD *)stat buf = 136315138;
    *(void *)&uint8_t buf[4] = v5 + 324;
    _os_log_impl(&dword_1BD672000, v71, v72, "%s : db2_get_datastore opening - clean needs shadow\n", buf, 0xCu);
  }
  *__error() = v155;
  if ((v4 & 0x20) != 0)
  {
    fd_realpath(v12, __s1);
    *__error() = 22;
    int v35 = *__error();
    unsigned int v76 = _SILogForLogForCategory(7);
    if (!os_log_type_enabled(v76, OS_LOG_TYPE_ERROR)) {
      goto LABEL_57;
    }
    *(_DWORD *)stat buf = 136315650;
    *(void *)&uint8_t buf[4] = "db2_get_datastore_with_ctx";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 7330;
    __int16 v177 = 2080;
    *(void *)v178 = __s1;
    uint64_t v38 = "%s:%d: %s : db2_get_datastore: ERR: requested recovery from dirty master.\n";
    goto LABEL_114;
  }
  int v156 = *__error();
  uint64_t v73 = _SILogForLogForCategory(7);
  os_log_type_t v74 = 2 * (dword_1E9FC90C0 < 4);
  if (os_log_type_enabled(v73, v74))
  {
    *(_DWORD *)stat buf = 136315138;
    *(void *)&uint8_t buf[4] = v5 + 324;
    _os_log_impl(&dword_1BD672000, v73, v74, "%s : db2_get_datastore open - shadow to master\n", buf, 0xCu);
  }
  *__error() = v156;
  if (isRegisteredForCloning(v2)) {
    int v75 = fd_copyfile((uint64_t)v18, (uint64_t)v12, 1);
  }
  else {
    int v75 = copy_datastore((uint64_t)v5, v18, (uint64_t)v12, 1);
  }
  int v78 = v75;
  if (v75)
  {
    int v79 = *__error();
    __int16 v80 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 136315906;
      *(void *)&uint8_t buf[4] = "db2_get_datastore_with_ctx";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7343;
      __int16 v177 = 2080;
      *(void *)v178 = v5 + 324;
      *(_WORD *)&v178[8] = 1024;
      int v179 = v78;
      _os_log_error_impl(&dword_1BD672000, v80, OS_LOG_TYPE_ERROR, "%s:%d: %s : db2_get_datastore copyFile or copy_datastore err:%d\n", buf, 0x22u);
    }
    *__error() = v79;
    goto LABEL_58;
  }
  int v81 = v4 & 8;
  if ((v4 & 8) == 0)
  {
    db_store_dirty_chunk_info((uint64_t)v5, v2, 1, 0);
    int v158 = 0;
  }
  uint64_t v19 = (uint64_t)v5;
LABEL_134:
  unsigned int v84 = *(_DWORD *)(v19 + 4);
  *(_DWORD *)(v19 + 4) = v84 & 0xFFFFFFF7 | v81;
  *(_DWORD *)(v19 + 804) = (v84 >> 14) & 4 | (v84 >> 10) & 2 | (v84 >> 8) & 1 | (v84 >> 13) & 0x10 | v81;
  *(_OWORD *)(v19 + 864) = 0u;
  *(_OWORD *)(v19 + 880) = 0u;
  *(_OWORD *)(v19 + 896) = 0u;
  *(_OWORD *)(v19 + 912) = 0u;
  free(v7);
  *(void *)(v19 + 792) = 0;
  *(_OWORD *)(v19 + 760) = 0u;
  *(_OWORD *)(v19 + 776) = 0u;
  *(_OWORD *)(v19 + 728) = 0u;
  *(_OWORD *)(v19 + 744) = 0u;
  *(_OWORD *)(v19 + 696) = 0u;
  *(_OWORD *)(v19 + 712) = 0u;
  *(_OWORD *)(v19 + 664) = 0u;
  *(_OWORD *)(v19 + 680) = 0u;
  *(_OWORD *)(v19 + 632) = 0u;
  *(_OWORD *)(v19 + 648) = 0u;
  *(_OWORD *)(v19 + 600) = 0u;
  *(_OWORD *)(v19 + 616) = 0u;
  *(_OWORD *)(v19 + 584) = 0u;
  pthread_mutex_init((pthread_mutex_t *)(v19 + 584), 0);
  if (load_map(v19))
  {
LABEL_135:
    uint64_t v7 = 0;
    int v5 = (char *)v19;
    goto LABEL_58;
  }
  *(void *)(v19 + 928) = db_cache_alloc(v19);
  size_t v85 = malloc_type_malloc(0x48uLL, 0x10A004087A21FEBuLL);
  *size_t v85 = 0u;
  v85[1] = 0u;
  *((_DWORD *)v85 + 8) = 1065353216;
  *(_OWORD *)((char *)v85 + 40) = 0u;
  *(_OWORD *)((char *)v85 + 56) = 0u;
  *(void *)(v19 + 992) = v85;
  *(_OWORD *)(v19 + 808) = 0u;
  db2_set_garbage_collector((void *)v19, &__block_literal_global_50_11938, &__block_literal_global_53_11939, &__block_literal_global_56);
  *(void *)(v19 + 832) = 0;
  *(void *)(v19 + 976) = *((void *)a1 + 3);
  if ((*(unsigned char *)(v19 + 6) & 3) != 0)
  {
    bzero(buf, 0x400uLL);
    int v86 = strcmp(v3, "store.db");
    unsigned int v87 = "db";
    if (v86) {
      unsigned int v87 = v3;
    }
    snprintf(buf, 0x400uLL, "%sStr-%d.map", v87, 1);
    long long v166 = 0u;
    uint64_t v161 = v2;
    v162 = buf;
    LODWORD(v163) = 2;
    DWORD1(v163) = v158;
    *((void *)&v163 + 1) = _db2_synced_block_callback;
    v164 = _db2_unmap_callback;
    uint64_t v165 = v19;
    *(void *)&long long v166 = *(void *)(v19 + 976);
    uint64_t v88 = data_map_init_with_ctx((uint64_t)&v161);
    *(void *)(v19 + 880) = v88;
    if (v88)
    {
      bzero(buf, 0x400uLL);
      int v89 = strcmp(v3, "store.db");
      int v90 = "db";
      if (v89) {
        int v90 = v3;
      }
      snprintf(buf, 0x400uLL, "%sStr-%d.map", v90, 2);
      LODWORD(v163) = 0;
      long long v166 = 0u;
      uint64_t v161 = v2;
      v162 = buf;
      DWORD1(v163) = v158;
      *((void *)&v163 + 1) = _db2_synced_block_callback;
      v164 = _db2_unmap_callback;
      uint64_t v165 = v19;
      *(void *)&long long v166 = *(void *)(v19 + 976);
      DWORD2(v166) = 1;
      uint64_t v91 = data_map_init_with_ctx((uint64_t)&v161);
      *(void *)(v19 + 888) = v91;
      if (v91)
      {
        bzero(buf, 0x400uLL);
        int v92 = strcmp(v3, "store.db");
        unsigned int v93 = "db";
        if (v92) {
          unsigned int v93 = v3;
        }
        snprintf(buf, 0x400uLL, "%sStr-%d.map", v93, 3);
        LODWORD(v163) = 0;
        long long v166 = 0u;
        uint64_t v161 = v2;
        v162 = buf;
        DWORD1(v163) = v158;
        *((void *)&v163 + 1) = _db2_synced_block_callback;
        v164 = _db2_unmap_callback;
        uint64_t v165 = v19;
        *(void *)&long long v166 = *(void *)(v19 + 976);
        DWORD2(v166) = 2;
        uint64_t v94 = data_map_init_with_ctx((uint64_t)&v161);
        *(void *)(v19 + 896) = v94;
        if (v94)
        {
          bzero(buf, 0x400uLL);
          int v95 = strcmp(v3, "store.db");
          int v96 = "db";
          if (v95) {
            int v96 = v3;
          }
          snprintf(buf, 0x400uLL, "%sStr-%d.map", v96, 4);
          LODWORD(v163) = 0;
          long long v166 = 0u;
          uint64_t v161 = v2;
          v162 = buf;
          DWORD1(v163) = v158;
          *((void *)&v163 + 1) = _db2_synced_block_callback;
          v164 = _db2_unmap_callback;
          uint64_t v165 = v19;
          *(void *)&long long v166 = *(void *)(v19 + 976);
          DWORD2(v166) = 3;
          uint64_t v97 = data_map_init_with_ctx((uint64_t)&v161);
          *(void *)(v19 + 904) = v97;
          if (v97)
          {
            bzero(buf, 0x400uLL);
            int v98 = strcmp(v3, "store.db");
            int v99 = "db";
            if (v98) {
              int v99 = v3;
            }
            snprintf(buf, 0x400uLL, "%sStr-%d.map", v99, 5);
            LODWORD(v163) = 0;
            long long v166 = 0u;
            uint64_t v161 = v2;
            v162 = buf;
            DWORD1(v163) = v158;
            *((void *)&v163 + 1) = _db2_synced_block_callback;
            v164 = _db2_unmap_callback;
            uint64_t v165 = v19;
            *(void *)&long long v166 = *(void *)(v19 + 976);
            DWORD2(v166) = 4;
            uint64_t v100 = data_map_init_with_ctx((uint64_t)&v161);
            *(void *)(v19 + 912) = v100;
            if (v100)
            {
              bzero(buf, 0x400uLL);
              int v101 = strcmp(v3, "store.db");
              unint64_t v102 = "db";
              if (v101) {
                unint64_t v102 = v3;
              }
              snprintf(buf, 0x400uLL, "%sStr-%d.map", v102, 6);
              long long v166 = 0u;
              uint64_t v161 = v2;
              v162 = buf;
              LODWORD(v163) = 4;
              DWORD1(v163) = v158 | 0x40;
              *((void *)&v163 + 1) = _db2_synced_block_callback;
              v164 = _db2_unmap_callback;
              uint64_t v165 = v19;
              *(void *)&long long v166 = *(void *)(v19 + 976);
              DWORD2(v166) = 5;
              uint64_t v103 = data_map_init_with_ctx((uint64_t)&v161);
              *(void *)(v19 + 920) = v103;
              if (v103) {
                goto LABEL_189;
              }
              if (v81) {
                goto LABEL_189;
              }
              DWORD1(v163) = v158 | 0x41;
              uint64_t v104 = data_map_init_with_ctx((uint64_t)&v161);
              *(void *)(v19 + 920) = v104;
              if (v104) {
                goto LABEL_189;
              }
            }
          }
        }
      }
    }
    int v105 = *__error();
    char v106 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
    {
      v133 = __error();
      v134 = strerror(*v133);
      *(_DWORD *)v168 = 136315906;
      v169 = "db2_get_datastore_with_ctx";
      __int16 v170 = 1024;
      int v171 = 7493;
      __int16 v172 = 2080;
      v173 = buf;
      __int16 v174 = 2080;
      v175 = v134;
      __int16 v127 = "%s:%d: %s : ERR: can't init the string table! (%s)\n";
      v128 = v168;
      uint64_t v129 = v106;
      uint32_t v130 = 38;
LABEL_198:
      _os_log_error_impl(&dword_1BD672000, v129, OS_LOG_TYPE_ERROR, v127, v128, v130);
    }
    goto LABEL_158;
  }
  if (sdb_string_zone_once != -1) {
    dispatch_once(&sdb_string_zone_once, &__block_literal_global_136);
  }
  unsigned int v159 = 16;
  unsigned int v160 = 0;
  for (int i = 1; i != 6; ++i)
  {
    if (load_string_table(v19, i - 1, v4, &__base, &v160, &v159))
    {
      if (v160)
      {
        destroy_string_table(v19, 0);
        if (i != 1)
        {
          destroy_string_table(v19, 1u);
          if (i != 2)
          {
            destroy_string_table(v19, 2u);
            if (i != 3)
            {
              destroy_string_table(v19, 3u);
              if (i != 4) {
                destroy_string_table(v19, 4u);
              }
            }
          }
        }
      }
      *(_OWORD *)(v19 + 896) = 0u;
      *(_OWORD *)(v19 + 912) = 0u;
      *(_OWORD *)(v19 + 880) = 0u;
      goto LABEL_135;
    }
  }
  bzero(buf, 0x400uLL);
  int v108 = strcmp(v3, "store.db");
  uint64_t v109 = "db";
  if (v108) {
    uint64_t v109 = v3;
  }
  snprintf(buf, 0x400uLL, "%sStr-%d.map", v109, 6);
  long long v166 = 0u;
  uint64_t v161 = v2;
  v162 = buf;
  long long v163 = 0x4100000004uLL;
  v164 = _db2_unmap_callback;
  uint64_t v165 = v19;
  *(void *)&long long v166 = *(void *)(v19 + 976);
  DWORD2(v166) = 5;
  uint64_t v110 = data_map_init_with_ctx((uint64_t)&v161);
  *(void *)(v19 + 920) = v110;
  if (!v110 && !v81)
  {
    DWORD1(v163) = 65;
    uint64_t v111 = data_map_init_with_ctx((uint64_t)&v161);
    *(void *)(v19 + 920) = v111;
    if (!v111)
    {
      int v131 = *__error();
      uint64_t v132 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v132, OS_LOG_TYPE_ERROR))
      {
        v148 = __error();
        v149 = strerror(*v148);
        *(_DWORD *)v168 = 136315906;
        v169 = "db2_get_datastore_with_ctx";
        __int16 v170 = 1024;
        int v171 = 7535;
        __int16 v172 = 2080;
        v173 = buf;
        __int16 v174 = 2080;
        v175 = v149;
        _os_log_error_impl(&dword_1BD672000, v132, OS_LOG_TYPE_ERROR, "%s:%d: %s : ERR: can't init the string table! (%s)\n", v168, 0x26u);
      }
      *__error() = v131;
      goto LABEL_135;
    }
  }
  size_t v112 = v160;
  if (v160)
  {
    *(_DWORD *)(v19 + 4) |= 0x20000u;
    *(_DWORD *)(v19 + 804) |= 0x10u;
    db2_dirty_datastore(v19);
    qsort_b(__base, v112, 4uLL, &__block_literal_global_61);
    uint64_t v161 = 0;
    BOOL v113 = CICleanUpThreadLocGet(&v161);
    int v114 = _db_write_lock(v19 + 584);
    if (v114)
    {
      int v152 = v114;
      int v153 = *__error();
      v154 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)stat buf = 136315650;
        *(void *)&uint8_t buf[4] = "db2_get_datastore_with_ctx";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7565;
        __int16 v177 = 1024;
        *(_DWORD *)v178 = v152;
        _os_log_error_impl(&dword_1BD672000, v154, OS_LOG_TYPE_ERROR, "%s:%d: Lock failed with error %d", buf, 0x18u);
      }
      *__error() = v153;
      sdb2_die(v19, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 7565);
    }
    if (v113) {
      unint64_t v115 = CIOnThreadCleanUpPush(v161, (uint64_t)db_write_unlock, v19 + 584);
    }
    else {
      unint64_t v115 = -1;
    }
    _dirty_datastore_locked(v19, 0);
    uint64_t v116 = v160;
    if (v160)
    {
      int v117 = (unsigned int *)__base;
      do
      {
        unsigned int v118 = *v117++;
        page_free(v19, v118, buf, 0);
        --v116;
      }
      while (v116);
    }
    if (db_write_unlock(v19 + 584)) {
      sdb2_die(v19, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 7572);
    }
    if (v113)
    {
      uint64_t v119 = v161;
      CIOnThreadCleanUpClearItem(v161, v115);
      v120 = &threadData[18 * v119];
      int v123 = v120[14];
      __int16 v121 = v120 + 14;
      int v122 = v123;
      if (v115 + 1 == v123) {
        *__int16 v121 = v122 - 1;
      }
    }
  }
  free(__base);
LABEL_189:
  if (!v81 && (*(unsigned char *)(v19 + 804) & 0x14) != 0)
  {
    uint64_t v124 = *(void *)(v19 + 880);
    int v125 = _data_map_version(v124);
    if (_data_map_version(*(void *)(v19 + 888)) == 8)
    {
      int v105 = *__error();
      unsigned int v126 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v126, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)stat buf = 136315906;
        *(void *)&uint8_t buf[4] = "db2_get_datastore_with_ctx";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7587;
        __int16 v177 = 1024;
        *(_DWORD *)v178 = v125;
        *(_WORD *)&v178[4] = 1024;
        *(_DWORD *)&v178[6] = 8;
        __int16 v127 = "%s:%d: Invalid string table version (%d %d)";
        v128 = buf;
        uint64_t v129 = v126;
        uint32_t v130 = 30;
        goto LABEL_198;
      }
LABEL_158:
      uint64_t v7 = 0;
      *__error() = v105;
      int v5 = (char *)v19;
LABEL_58:
      int8x16_t v44 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(*((_DWORD *)v5 + 1)), (uint32x4_t)xmmword_1BDA82760), (int8x16_t)xmmword_1BDA82770);
      *(int8x8_t *)v44.i8 = vorr_s8(*(int8x8_t *)v44.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL));
      *((_DWORD *)v5 + 201) = v44.i32[0] | *((_DWORD *)v5 + 1) & 8 | v44.i32[1];
      int8x16_t v45 = (void *)*((void *)v5 + 107);
      if (v45)
      {
        free(v45);
        *((void *)v5 + 107) = 0;
      }
      if (*((void *)v5 + 116))
      {
        pthread_key_t v46 = __THREAD_SLOT_KEY;
        if (!__THREAD_SLOT_KEY)
        {
          makeThreadId();
          pthread_key_t v46 = __THREAD_SLOT_KEY;
        }
        uint64_t v47 = pthread_getspecific(v46);
        HIDWORD(v49) = qos_class_self() - 9;
        LODWORD(v49) = HIDWORD(v49);
        unsigned int v48 = v49 >> 2;
        if (v48 > 6) {
          signed int v50 = 0;
        }
        else {
          signed int v50 = dword_1BDA87810[v48];
        }
        int v51 = pthread_mutex_lock((pthread_mutex_t *)(v5 + 584));
        if (*((void *)v5 + 96) || *((_DWORD *)v5 + 195) || v5[796])
        {
LABEL_69:
          db_rwlock_wait((uint64_t)(v5 + 584), v50, 2);
        }
        else
        {
          if (v50 <= 5)
          {
            if (*(void *)&v5[16 * v50 + 648]) {
              goto LABEL_69;
            }
            uint64_t v64 = v50 - 1;
            unsigned int v65 = &v5[16 * v50 + 664];
            while (v64 != 4)
            {
              uint64_t v66 = *(void *)v65;
              v65 += 16;
              ++v64;
              if (v66)
              {
                if (v64 <= 4) {
                  goto LABEL_69;
                }
                break;
              }
            }
          }
          *((void *)v5 + 96) = pthread_self();
        }
        pthread_mutex_unlock((pthread_mutex_t *)(v5 + 584));
        if (v51)
        {
          int v150 = *__error();
          v151 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)stat buf = 136315650;
            *(void *)&uint8_t buf[4] = "db2_get_datastore_with_ctx";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 7702;
            __int16 v177 = 1024;
            *(_DWORD *)v178 = v51;
            _os_log_error_impl(&dword_1BD672000, v151, OS_LOG_TYPE_ERROR, "%s:%d: Lock failed with error %d", buf, 0x18u);
          }
          *__error() = v150;
          sdb2_die((uint64_t)v5, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 7702);
        }
        if (v47) {
          unint64_t v52 = CIOnThreadCleanUpPush((uint64_t)v47 - 1, (uint64_t)db_write_unlock, (uint64_t)(v5 + 584));
        }
        else {
          unint64_t v52 = -1;
        }
        uint64_t v53 = *((void *)v5 + 116);
        db_cache_clear((unint64_t *)v53, (uint64_t)&__block_literal_global_12_13050);
        *(void *)&uint8_t buf[8] = 0;
        *(void *)stat buf = *(void *)v53;
        if (atomic_load((unsigned int *)(v53 + 248)))
        {
          for (unsigned int j = 0; j < v56; ++j)
          {
            *(_DWORD *)&uint8_t buf[8] = j;
            _cache_remove((uint64_t *)buf);
            unsigned int v56 = atomic_load((unsigned int *)(v53 + 248));
          }
        }
        atomic_store(0, (unsigned int *)(v53 + 248));
        free((void *)v53);
        int v57 = pthread_mutex_lock((pthread_mutex_t *)(v5 + 584));
        *((_DWORD *)v5 + 197) = 0;
        uint64_t v58 = (pthread_override_s *)*((void *)v5 + 95);
        *((void *)v5 + 96) = 0;
        *((void *)v5 + 95) = 0;
        char v59 = *((_DWORD *)v5 + 195) != 0;
        v5[796] = 0;
        db_rwlock_wakeup((uint64_t)(v5 + 584), v59, 0);
        pthread_mutex_unlock((pthread_mutex_t *)(v5 + 584));
        if (v58) {
          pthread_override_qos_class_end_np(v58);
        }
        if (v57) {
          sdb2_die((uint64_t)v5, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 7704);
        }
        if (v47)
        {
          CIOnThreadCleanUpClearItem((uint64_t)v47 - 1, v52);
          unsigned int v60 = &threadData[18 * ((uint64_t)v47 - 1)];
          int v63 = v60[14];
          unsigned __int8 v61 = v60 + 14;
          int v62 = v63;
          if (v52 + 1 == v63) {
            *unsigned __int8 v61 = v62 - 1;
          }
        }
      }
      cleanup_string_tables((uint64_t)v5);
      free(v5);
      if (!v7)
      {
LABEL_13:
        if (v12 != v18) {
          fd_release(v18);
        }
        fd_release(v12);
        free(__base);
        return 0;
      }
LABEL_12:
      free(v7);
      goto LABEL_13;
    }
    if (_data_map_version_is_current(v124)) {
      return v19;
    }
    int v135 = *__error();
    v136 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v136, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 136315394;
      *(void *)&uint8_t buf[4] = "db2_get_datastore_with_ctx";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7592;
      _os_log_error_impl(&dword_1BD672000, v136, OS_LOG_TYPE_ERROR, "%s:%d: Upgrading string flag data", buf, 0x12u);
    }
    *__error() = v135;
    uint64_t v137 = data_map_count(v124);
    if (!v137)
    {
LABEL_231:
      _data_map_version_update(v124);
      return v19;
    }
    unint64_t v138 = v137;
    while (2)
    {
      data = (const char *)data_map_get_data(v124, v138, 0);
      size_t v140 = strlen(data);
      if (data)
      {
        unint64_t v141 = v140;
        if (v140 < 0xF
          || strcmp(data, "_kMDItemRelatedObjects")
          && strcmp(data, "_kMDItemRelatedObjectsWithBundleID")
          && strcmp(data, "_kMDItemLaunchString")
          && strcmp(data, "_kMDItemActivityLaunchDates")
          && strcmp(data, "_kMDItemRankingLaunchStrings")
          && strcmp(data, "_kMDItemRankingLaunchDates")
          && strcmp(data, "_kMDItemGroupId")
          && strcmp(data, "_kMDItemShortcutLastUsedDate")
          && (v141 < 0x10
           || strcmp(data, "kMDItemAttributeChangeDate")
           && strcmp(data, "kMDItemLastUsedDate")
           && strcmp(data, "kMDItemLastUsedDate_Ranking")
           && strcmp(data, "kMDItemUsedDates")))
        {
          char v142 = *(data - 1);
          if (!strcmp(data, "_kStoreMetadataVersion") || !strncmp(data, "kMDStore", 8uLL))
          {
            if ((v142 & 0x40) != 0)
            {
              char v143 = v142 & 0xBF;
LABEL_204:
              *((unsigned char *)data - 1) = v143;
            }
          }
          else if ((v142 & 0x40) == 0)
          {
            char v143 = v142 | 0x40;
            goto LABEL_204;
          }
        }
      }
      if (!--v138) {
        goto LABEL_231;
      }
      continue;
    }
  }
  return v19;
}

void sdb_zone_init(char a1)
{
  if ((a1 & 0x14) == 0 && sdb_string_zone_once != -1) {
    dispatch_once(&sdb_string_zone_once, &__block_literal_global_136);
  }
  if (sdb_map_zone_once != -1)
  {
    dispatch_once(&sdb_map_zone_once, &__block_literal_global_131_11680);
  }
}

uint64_t copy_datastore(uint64_t a1, _DWORD *a2, uint64_t a3, char a4)
{
  int v6 = a2;
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  int v8 = *(_DWORD **)(a1 + 840);
  if (v8 != a2 && *(_DWORD **)(a1 + 848) != a2)
  {
    int v9 = *__error();
    unsigned __int8 v10 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 136315394;
      *(void *)&uint8_t buf[4] = "copy_datastore";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 6520;
      int8x16_t v11 = "%s:%d: sdb: ERR: copy_datastore: source is not a valid fd";
LABEL_69:
      _os_log_error_impl(&dword_1BD672000, v10, OS_LOG_TYPE_ERROR, v11, buf, 0x12u);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  if (v8 != (_DWORD *)a3 && *(void *)(a1 + 848) != a3)
  {
    int v9 = *__error();
    unsigned __int8 v10 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 136315394;
      *(void *)&uint8_t buf[4] = "copy_datastore";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 6525;
      int8x16_t v11 = "%s:%d: sdb: ERR: copy_datastore: destination is not a valid fd";
      goto LABEL_69;
    }
LABEL_8:
    *__error() = v9;
    return 22;
  }
  int v12 = (char *)malloc_type_malloc(0x4000uLL, 0x446DE5DEuLL);
  if (!v12)
  {
LABEL_19:
    int v28 = *__error();
    int v29 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 136315650;
      *(void *)&uint8_t buf[4] = "copy_datastore";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 6530;
      __int16 v80 = 2080;
      *(void *)int v81 = a1 + 324;
      _os_log_error_impl(&dword_1BD672000, v29, OS_LOG_TYPE_ERROR, "%s:%d: sdb: ERR: invalid master datastore! (%s)\n", buf, 0x1Cu);
    }
    *__error() = v28;
    return 22;
  }
  int v13 = v12;
  uint64_t v14 = fd_pread(v6, v12, 0x1000uLL, 0);
  if (v14 != 4096)
  {
    uint64_t v21 = v14;
    int v22 = *__error();
    int v23 = *__error();
    int v24 = _SILogForLogForCategory(7);
    os_log_type_t v25 = 2 * (dword_1E9FC90C0 < 4);
    if (os_log_type_enabled(v24, v25))
    {
      int v26 = *__error();
      *(_DWORD *)stat buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v26;
      *(_WORD *)&uint8_t buf[8] = 2048;
      *(void *)&buf[10] = v21;
      __int16 v80 = 2048;
      *(void *)int v81 = 4096;
      _os_log_impl(&dword_1BD672000, v24, v25, "sdb: validate_datastore: ERR: invalid datastore header size (%d) %zd != %zd", buf, 0x1Cu);
    }
    *__error() = v23;
    goto LABEL_16;
  }
  int v16 = *(_DWORD *)v13;
  if (*(_DWORD *)v13 == 947155812)
  {
    v15.i64[0] = *((void *)v13 + 1);
    v15.i32[2] = *((_DWORD *)v13 + 4);
    int8x16_t v17 = vrev32q_s8(v15);
    *((_DWORD *)v13 + 4) = v17.i32[2];
    int v18 = *((_DWORD *)v13 + 1);
    *((void *)v13 + 1) = v17.i64[0];
    *(int8x16_t *)(v13 + 20) = vrev64q_s8(*(int8x16_t *)(v13 + 20));
    int8x16_t v19 = vrev32q_s8(*(int8x16_t *)(v13 + 36));
    *(int8x16_t *)(v13 + 36) = v19;
    *(int8x16_t *)(v13 + 52) = vrev32q_s8(*(int8x16_t *)(v13 + 52));
    *(_DWORD *)int v13 = 1685287992;
    *((_DWORD *)v13 + 1) = bswap32(v18 & 0x7FFFFF7F | 0x80000000);
    unsigned int v20 = v19.u32[2];
    goto LABEL_25;
  }
  *((_DWORD *)v13 + 1) &= 0x7FFFFF7Fu;
  if (v16 != 1685287992)
  {
    int v22 = *__error();
    unsigned int v48 = _SILogForLogForCategory(7);
    os_log_type_t v49 = 2 * (dword_1E9FC90C0 < 4);
    if (os_log_type_enabled(v48, v49))
    {
      int v50 = *(_DWORD *)v13;
      *(_DWORD *)stat buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v50;
      _os_log_impl(&dword_1BD672000, v48, v49, "sdb: validate_datastore: ERR: invalid datastore signature: 0x%x\n", buf, 8u);
    }
LABEL_16:
    *__error() = v22;
LABEL_17:
    int v27 = (int *)v13;
LABEL_18:
    free(v27);
    goto LABEL_19;
  }
  unsigned int v20 = *((_DWORD *)v13 + 11);
LABEL_25:
  if (v20 <= 0x14) {
    size_t v31 = 20;
  }
  else {
    size_t v31 = v20;
  }
  int v32 = (int *)malloc_type_valloc(v31, 0x5D03481FuLL);
  if (!v32) {
    goto LABEL_17;
  }
  int v27 = v32;
  char v78 = a4;
  for (off_t i = *((unsigned int *)v13 + 10) + (unint64_t)*((unsigned int *)v13 + 9); ; i += v27[v36])
  {
    int v37 = fd_pread(v6, v27, 0x14uLL, i);
    if (v37 < 1) {
      break;
    }
    if (*v27 == 846226020)
    {
      int *v27 = 1684172850;
      int8x16_t v34 = vrev32q_s8(*(int8x16_t *)(v27 + 1));
      *(int8x16_t *)(v27 + 1) = v34;
      LOBYTE(v35) = v34.i8[8];
    }
    else
    {
      if (*v27 != 1684172850)
      {
        int v51 = *__error();
        unint64_t v52 = _SILogForLogForCategory(7);
        os_log_type_t v53 = 2 * (dword_1E9FC90C0 < 4);
        if (os_log_type_enabled(v52, v53))
        {
          int v54 = *v27;
          *(_DWORD *)stat buf = 134218240;
          *(void *)&uint8_t buf[4] = i;
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v54;
          uint64_t v55 = "sdb: validate_datastore: ERR: invalid page @ 0x%llx (sig: 0x%x)\n";
          goto LABEL_72;
        }
        goto LABEL_73;
      }
      int v35 = v27[3];
    }
    if ((v35 & 4) != 0) {
      uint64_t v36 = 4;
    }
    else {
      uint64_t v36 = 1;
    }
  }
  if (v37 < 0)
  {
    int v51 = *__error();
    unint64_t v52 = _SILogForLogForCategory(7);
    os_log_type_t v53 = 2 * (dword_1E9FC90C0 < 4);
    if (os_log_type_enabled(v52, v53))
    {
      int v56 = *((_DWORD *)v13 + 11);
      *(_DWORD *)stat buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v56;
      *(_WORD *)&uint8_t buf[8] = 2048;
      *(void *)&buf[10] = i;
      uint64_t v55 = "sdb: validate_datastore: ERR: failed to read %d bytes at offset 0x%llx\n";
LABEL_72:
      _os_log_impl(&dword_1BD672000, v52, v53, v55, buf, 0x12u);
    }
LABEL_73:
    *__error() = v51;
    free(v13);
    goto LABEL_18;
  }
  free(v13);
  free(v27);
  uint64_t v38 = (int8x16_t *)malloc_type_malloc(0x10000uLL, 0xAFA252ADuLL);
  if (!v38) {
    return 12;
  }
  unsigned int v39 = v38;
  for (off_t j = 0; ; j += v41)
  {
    unsigned int v42 = fd_pread(v6, v39, 0x10000uLL, j);
    unsigned int v43 = v42;
    if (!v42)
    {
      fd_truncate(a3, j);
      *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 4) & 0xFFFFFDDE | 1;
      memcpy(v39, (const void *)a1, 0x1000uLL);
      if ((*(unsigned char *)(a1 + 4) & 0x80) != 0)
      {
        *unsigned int v39 = vrev32q_s8(*v39);
        v39[1].i32[0] = bswap32(v39[1].u32[0]);
        *(int8x16_t *)((char *)v39 + 20) = vrev64q_s8(*(int8x16_t *)((char *)v39 + 20));
        *(int8x16_t *)((char *)v39 + 36) = vrev32q_s8(*(int8x16_t *)((char *)v39 + 36));
        *(int8x16_t *)((char *)v39 + 52) = vrev32q_s8(*(int8x16_t *)((char *)v39 + 52));
      }
      if (fd_pwrite(a3, (uint64_t)v39, 0x1000uLL, 0) != 4096)
      {
        int v65 = *__error();
        uint64_t v66 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
        {
          uint64_t v71 = __error();
          os_log_type_t v72 = strerror(*v71);
          *(_DWORD *)stat buf = 136315906;
          *(void *)&uint8_t buf[4] = "copy_datastore";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 6624;
          __int16 v80 = 2080;
          *(void *)int v81 = a1 + 324;
          *(_WORD *)&v81[8] = 2080;
          *(void *)&v81[10] = v72;
          _os_log_error_impl(&dword_1BD672000, v66, OS_LOG_TYPE_ERROR, "%s:%d: %s : copy_datastore: ERR: failed to update the header! (%s)\n", buf, 0x26u);
        }
        *__error() = v65;
        fd_sync(a3, 1);
        free(v39);
        goto LABEL_98;
      }
      fd_sync(a3, 1);
      if ((v78 & 1) == 0) {
        goto LABEL_102;
      }
      if (fd_pwrite((uint64_t)v6, (uint64_t)v39, 0x1000uLL, 0) == 4096)
      {
        unsigned int v43 = 0;
        goto LABEL_93;
      }
      int v63 = *__error();
      int v67 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
      {
        uint64_t v73 = __error();
        os_log_type_t v74 = strerror(*v73);
        *(_DWORD *)stat buf = 136315906;
        *(void *)&uint8_t buf[4] = "copy_datastore";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 6630;
        __int16 v80 = 2080;
        *(void *)int v81 = a1 + 324;
        *(_WORD *)&v81[8] = 2080;
        *(void *)&v81[10] = v74;
        _os_log_error_impl(&dword_1BD672000, v67, OS_LOG_TYPE_ERROR, "%s:%d: %s : copy_datastore: ERR: failed to update the header 2! (%s)\n", buf, 0x26u);
      }
      unsigned int v43 = -1;
      goto LABEL_92;
    }
    if ((v42 & 0x80000000) != 0) {
      goto LABEL_84;
    }
    if (j) {
      break;
    }
    int v44 = *(_DWORD *)(a1 + 4);
    if (*(void *)(a1 + 840) == a3)
    {
      if ((v44 & 0x80) != 0)
      {
        *unsigned int v39 = vrev32q_s8(*v39);
        v39[1].i32[0] = bswap32(v39[1].u32[0]);
        *(int8x16_t *)((char *)v39 + 20) = vrev64q_s8(*(int8x16_t *)((char *)v39 + 20));
        *(int8x16_t *)((char *)v39 + 36) = vrev32q_s8(*(int8x16_t *)((char *)v39 + 36));
        *(int8x16_t *)((char *)v39 + 52) = vrev32q_s8(*(int8x16_t *)((char *)v39 + 52));
        memcpy((void *)a1, v39, 0x248uLL);
        int v44 = *(_DWORD *)(a1 + 4) | 0x80;
      }
      else
      {
        memcpy((void *)a1, v39, 0x248uLL);
        int v44 = *(_DWORD *)(a1 + 4);
      }
    }
    *(_DWORD *)(a1 + 4) = v44 | 0x20;
    memcpy(v39, (const void *)a1, 0x3E8uLL);
    if ((*(unsigned char *)(a1 + 4) & 0x80) != 0)
    {
      *unsigned int v39 = vrev32q_s8(*v39);
      v39[1].i32[0] = bswap32(v39[1].u32[0]);
      *(int8x16_t *)((char *)v39 + 20) = vrev64q_s8(*(int8x16_t *)((char *)v39 + 20));
      *(int8x16_t *)((char *)v39 + 36) = vrev32q_s8(*(int8x16_t *)((char *)v39 + 36));
      *(int8x16_t *)((char *)v39 + 52) = vrev32q_s8(*(int8x16_t *)((char *)v39 + 52));
    }
    if (!a3 || (*(unsigned char *)(a3 + 48) & 3) == 0)
    {
      int v45 = *(_DWORD *)(a1 + 4);
      if (v45)
      {
        *(_DWORD *)(a1 + 4) = v45 & 0xFFFFFFDF;
        *(void *)(a1 + 848) = v6;
        *(void *)(a1 + 840) = a3;
LABEL_102:
        free(v39);
        return 0;
      }
    }
    if ((v43 & 0xFFF) != 0)
    {
      int v75 = __si_assert_copy_extra_2445(0, -1);
      unsigned int v76 = v75;
      int v77 = "";
      if (v75) {
        int v77 = v75;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 98, "(write_size & ((1 << 12)-1)) == 0", v77);
      free(v76);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    uint64_t v41 = v43;
    if (fd_pwrite(a3, (uint64_t)v39, v43, 0) != v43) {
      goto LABEL_84;
    }
    if (_gSystemStatusBool)
    {
      pthread_mutex_lock(&_gSystemStatusLock);
      while (_gSystemStatusBool)
        pthread_cond_wait(&_gSystemStatusCond, &_gSystemStatusLock);
      pthread_mutex_unlock(&_gSystemStatusLock);
    }
    *(void *)stat buf = 0;
    uint64_t v46 = _fd_acquire_fd(a3, buf);
    if (v46 != -1)
    {
      int v47 = v46;
      prot_fsync(v46, (*(_WORD *)(a3 + 56) & 8) == 0);
      _fd_release_fd((_DWORD *)a3, v47, 0, *(uint64_t *)buf);
    }
LABEL_43:
    ;
  }
  uint64_t v41 = v42;
  if (sdb_pwrite(a3, (uint64_t)v39, v42, j) == v42) {
    goto LABEL_43;
  }
  int v57 = *__error();
  uint64_t v58 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)stat buf = 136316162;
    *(void *)&uint8_t buf[4] = "copy_datastore";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 6603;
    __int16 v80 = 2080;
    *(void *)int v81 = a1 + 324;
    *(_WORD *)&v81[8] = 1024;
    *(_DWORD *)&v81[10] = v43;
    *(_WORD *)&v81[14] = 2048;
    *(void *)&v81[16] = j;
    _os_log_error_impl(&dword_1BD672000, v58, OS_LOG_TYPE_ERROR, "%s:%d: %s : ERR: 2: failed to write %d bytes at %lld to to_fdp\n", buf, 0x2Cu);
  }
  *__error() = v57;
LABEL_84:
  char v59 = v39;
  int v60 = *__error();
  int v61 = *__error();
  int v62 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)stat buf = 136315906;
    *(void *)&uint8_t buf[4] = "copy_datastore";
    if (v60) {
      int v68 = v60;
    }
    else {
      int v68 = 22;
    }
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 6642;
    __int16 v80 = 1024;
    *(_DWORD *)int v81 = v68;
    *(_WORD *)&v81[4] = 2080;
    *(void *)&v81[6] = a1 + 324;
    _os_log_error_impl(&dword_1BD672000, v62, OS_LOG_TYPE_ERROR, "%s:%d: sdb: copy_datastore: ERR: %d %s: error restoring from master datastore.\n", buf, 0x22u);
  }
  *__error() = v61;
  *(_DWORD *)(a1 + 4) &= 0xFFFFFDDE;
  unsigned int v39 = v59;
  memcpy(v59, (const void *)a1, 0x1000uLL);
  if ((*(unsigned char *)(a1 + 4) & 0x80) != 0)
  {
    *char v59 = vrev32q_s8(*v59);
    v59[1].i32[0] = bswap32(v59[1].u32[0]);
    *(int8x16_t *)((char *)v59 + 20) = vrev64q_s8(*(int8x16_t *)((char *)v59 + 20));
    *(int8x16_t *)((char *)v59 + 36) = vrev32q_s8(*(int8x16_t *)((char *)v59 + 36));
    *(int8x16_t *)((char *)v59 + 52) = vrev32q_s8(*(int8x16_t *)((char *)v59 + 52));
  }
  if (fd_pwrite(a3, (uint64_t)v59, 0x1000uLL, 0) == 4096)
  {
    int v6 = (_DWORD *)a3;
    goto LABEL_93;
  }
  int v63 = *__error();
  uint64_t v64 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
  {
    int v69 = __error();
    int v70 = strerror(*v69);
    *(_DWORD *)stat buf = 136315906;
    *(void *)&uint8_t buf[4] = "copy_datastore";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 6655;
    __int16 v80 = 2080;
    *(void *)int v81 = a1 + 324;
    *(_WORD *)&v81[8] = 2080;
    *(void *)&v81[10] = v70;
    _os_log_error_impl(&dword_1BD672000, v64, OS_LOG_TYPE_ERROR, "%s:%d: %s : copy_datastore:2: ERR: failed to update the header! (%s)\n", buf, 0x26u);
  }
  int v6 = (_DWORD *)a3;
LABEL_92:
  *__error() = v63;
LABEL_93:
  fd_sync((uint64_t)v6, 1);
  free(v39);
  if ((v43 & 0x80000000) == 0) {
    return 0;
  }
LABEL_98:
  if (!*__error()) {
    *__error() = 22;
  }
  return *__error();
}

uint64_t load_map(uint64_t a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = fd_lseek(*(_DWORD **)(a1 + 848), 0, 2);
  uint64_t v3 = v2;
  size_t v4 = *(unsigned int *)(a1 + 40);
  if (v4 < 0x24
    || ((v5 = *(_DWORD *)(a1 + 36), v5 >= 0x3E8) ? (BOOL v6 = v2 < v5 + v4) : (BOOL v6 = 1), v6))
  {
    int v7 = *__error();
    int v8 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v30 = *(_DWORD *)(a1 + 36);
      int v29 = *(_DWORD *)(a1 + 40);
      int v40 = 136316162;
      uint64_t v41 = "load_map";
      __int16 v42 = 1024;
      int v43 = 1137;
      __int16 v44 = 1024;
      *(_DWORD *)int v45 = v29;
      *(_WORD *)&v45[4] = 1024;
      *(_DWORD *)&v45[6] = v30;
      *(_WORD *)&v45[10] = 2048;
      *(void *)&v45[12] = v3;
      _os_log_error_impl(&dword_1BD672000, v8, OS_LOG_TYPE_ERROR, "%s:%d: Invalid header ms: %u hs: %u fs: %lld", (uint8_t *)&v40, 0x28u);
    }
    *__error() = v7;
    return 22;
  }
  unsigned __int8 v10 = (int *)malloc_type_zone_malloc((malloc_zone_t *)sdb_map_zone, v4, 0x73A8F564uLL);
  if (!v10) {
    return 12;
  }
  int8x16_t v11 = v10;
  uint64_t v12 = fd_pread(*(_DWORD **)(a1 + 848), v10, *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 36));
  uint64_t v13 = v12;
  if (v12 != *(_DWORD *)(a1 + 40))
  {
    *(_DWORD *)(a1 + 4) |= 4u;
    free(v11);
    if (!*__error()) {
      *__error() = 22;
    }
    int v26 = *__error();
    int v27 = *__error();
    int v28 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      int v31 = *(_DWORD *)(a1 + 40);
      int v40 = 136316418;
      uint64_t v41 = "load_map";
      __int16 v42 = 1024;
      int v43 = 1155;
      __int16 v44 = 1024;
      *(_DWORD *)int v45 = v26;
      *(_WORD *)&v45[4] = 2080;
      *(void *)&v45[6] = a1 + 324;
      *(_WORD *)&v45[14] = 2048;
      *(void *)&v45[16] = v13;
      *(_WORD *)&v45[24] = 1024;
      *(_DWORD *)&v45[26] = v31;
      _os_log_error_impl(&dword_1BD672000, v28, OS_LOG_TYPE_ERROR, "%s:%d: load_map error:%d (%s) %zu != %u", (uint8_t *)&v40, 0x32u);
    }
    *__error() = v27;
    *__error() = v26;
    return *__error();
  }
  unsigned int v14 = v11[2];
  unint64_t v15 = (unint64_t)v11 + v12;
  int v16 = *v11;
  if ((*(unsigned char *)(a1 + 4) & 0x80) != 0 && (v16 == 846029412 || v16 == 829252196))
  {
    unsigned int v14 = bswap32(v14);
    if ((v14 & 0x80000000) != 0 || (unint64_t)&v11[4 * v14 + 5] > v15) {
      goto LABEL_42;
    }
    *(void *)(a1 + 856) = v11;
    swap_map((unsigned int *)v11);
    *(void *)(a1 + 856) = 0;
    int v16 = *v11;
  }
  if ((v16 - 1684172081) >= 2 || (v14 & 0x80000000) != 0 || (unint64_t)&v11[4 * v14 + 5] > v15)
  {
LABEL_42:
    free(v11);
    return 22;
  }
  uint64_t v18 = v11[2];
  if ((int)v18 >= 2)
  {
    uint64_t v19 = 1;
    uint64_t v20 = 12;
    uint64_t v21 = 9;
    uint64_t v22 = 5;
    uint64_t v23 = 8;
    while (1)
    {
      int v24 = &v11[v22];
      LODWORD(v25) = (v11[v23] >> 28) - (v11[v23 + 4] >> 28);
      uint64_t v25 = v25 ? (int)v25 : *(void *)v24 - *(void *)&v11[v21];
      if (v25 >= 1) {
        break;
      }
      ++v19;
      v20 += 4;
      v21 += 4;
      v22 += 4;
      v23 += 4;
      if (v18 == v19) {
        goto LABEL_32;
      }
    }
    int v32 = *__error();
    int8x16_t v33 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      uint64_t v34 = *(void *)v24;
      uint64_t v35 = *(void *)&v11[v21];
      uint64_t v36 = v24[2];
      unint64_t v37 = (unint64_t)v24[3] >> 28;
      uint64_t v38 = v11[4 * v19 + 7];
      unint64_t v39 = (unint64_t)v11[v20] >> 28;
      int v40 = 136317442;
      uint64_t v41 = "load_map";
      __int16 v42 = 1024;
      int v43 = 1194;
      __int16 v44 = 2080;
      *(void *)int v45 = a1 + 324;
      *(_WORD *)&v45[8] = 2048;
      *(void *)&v45[10] = v19;
      *(_WORD *)&v45[18] = 2048;
      *(void *)&v45[20] = v34;
      *(_WORD *)&v45[28] = 2048;
      uint64_t v46 = v35;
      __int16 v47 = 2048;
      unint64_t v48 = v37;
      __int16 v49 = 2048;
      unint64_t v50 = v39;
      __int16 v51 = 2048;
      uint64_t v52 = v36;
      __int16 v53 = 2048;
      uint64_t v54 = v38;
      _os_log_error_impl(&dword_1BD672000, v33, OS_LOG_TYPE_ERROR, "%s:%d: %s : load_map, invalid entry at %ld, oid:0x%.16llx/0x%.16llx, type:0x%lx/0x%lx, pgnum:%ld/%ld\n", (uint8_t *)&v40, 0x62u);
    }
    *__error() = v32;
    goto LABEL_42;
  }
LABEL_32:
  uint64_t result = 0;
  *(void *)(a1 + 856) = v11;
  return result;
}

uint64_t load_string_table(uint64_t a1, int a2, int a3, void **a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v182 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a2;
  uint64_t v169 = table_extra_bytes_11691[a2];
  if ((a3 & 0x20000) == 0 || (*(_DWORD *)(a1 + 4) & 8) != 0)
  {
    uint64_t v20 = malloc_type_calloc(1uLL, 0x48uLL, 0x10B00402199480CuLL);
    *(void *)(a1 + 8 * v8 + 880) = v20;
    *(void *)stat buf = 0;
    *(_DWORD *)uint64_t v20 = -1;
    *((void *)v20 + 6) = 64;
    if (a2 > 1)
    {
      if (sdb_uniquing_zone_once != -1) {
        dispatch_once(&sdb_uniquing_zone_once, &__block_literal_global_13_12778);
      }
      uint64_t v21 = (pthread_rwlock_t *)malloc_type_zone_calloc((malloc_zone_t *)sdb_uniquing_zone, 1uLL, 0x8E8uLL, 0x107004098C11689uLL);
      if (!v21) {
        goto LABEL_27;
      }
      uint64_t v22 = 0;
    }
    else
    {
      if (sdb_uniquing_zone_once != -1) {
        dispatch_once(&sdb_uniquing_zone_once, &__block_literal_global_12746);
      }
      uint64_t v21 = (pthread_rwlock_t *)malloc_type_zone_calloc((malloc_zone_t *)sdb_uniquing_zone, 1uLL, 0x8E8uLL, 0x107004098C11689uLL);
      uint64_t v22 = v169;
      if (!v21) {
        goto LABEL_27;
      }
    }
    pthread_rwlock_init(v21, 0);
    v21[1].__sig = v22;
    *(_DWORD *)&v21[11].__opaque[64] = 1024;
    *(void *)&v21[11].__opaque[56] = malloc_type_zone_calloc((malloc_zone_t *)sdb_uniquing_zone, 1uLL, 0x4000uLL, 0x1050040DB1D6C16uLL);
LABEL_27:
    *((void *)v20 + 2) = v21;
    *((void *)v20 + 4) = malloc_type_zone_malloc((malloc_zone_t *)string_table_zone, 8 * *((void *)v20 + 6), 0x2004093837F09uLL);
    if (a2 <= 1) {
      *((void *)v20 + 5) = malloc_type_zone_malloc((malloc_zone_t *)string_table_zone, *((void *)v20 + 6), 0xEC745272uLL);
    }
    uint64_t v25 = malloc_type_malloc(0x40uLL, 0x100004052888210uLL);
    if (!*((void *)v20 + 2)
      || !*((void *)v20 + 4)
      || (!*((void *)v20 + 5) ? (BOOL v26 = a2 < 2) : (BOOL v26 = 0), v26 || !v25))
    {
      free(v25);
      free(*((void **)v20 + 5));
      free(*((void **)v20 + 4));
      free(*((void **)v20 + 2));
      return 12;
    }
    unsigned int v27 = *(_DWORD *)(a1 + 4 * v8 + 48);
    if (!v27)
    {
      uint64_t v117 = 0;
      unsigned int v30 = 0;
      LODWORD(v31) = 1;
LABEL_193:
      *((void *)v20 + 3) = v117;
      *((_DWORD *)v20 + 14) = v31;
      *((_DWORD *)v20 + 15) = v30;
      if (dword_1E9FC90C0 >= 5)
      {
        uint64_t v147 = v25;
        int v148 = *__error();
        v149 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v149, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__str = 67109376;
          *(_DWORD *)__int16 v172 = v31;
          *(_WORD *)&v172[4] = 1024;
          *(_DWORD *)&v172[6] = a2;
          _os_log_impl(&dword_1BD672000, v149, OS_LOG_TYPE_DEFAULT, "Loaded %d strings for %d", (uint8_t *)__str, 0xEu);
        }
        *__error() = v148;
        uint64_t v25 = v147;
      }
      *((_DWORD *)v20 + 16) = 0;
      free(v25);
      return 0;
    }
    __ptr = (int *)v25;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    unsigned int v30 = 0;
    unsigned int v160 = 16;
    unint64_t v31 = 1;
    while (1)
    {
      uint64_t v32 = v30;
      uint64_t v165 = v30;
      int8x16_t v33 = __ptr;
      if (v30)
      {
        while (1)
        {
          int v34 = *v33++;
          if (v27 == v34) {
            break;
          }
          if (!--v32) {
            goto LABEL_41;
          }
        }
        int v118 = *__error();
        uint64_t v119 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__str = 136315650;
          *(void *)__int16 v172 = "load_string_table";
          *(_WORD *)&v172[8] = 1024;
          int v173 = 10521;
          __int16 v174 = 1024;
          *(_DWORD *)v175 = v27;
          v139 = "%s:%d: load_string_table: circular string table (pgnum %d)\n";
          size_t v140 = v119;
          uint32_t v141 = 24;
          goto LABEL_238;
        }
        goto LABEL_196;
      }
LABEL_41:
      *(void *)stat buf = malloc_type_zone_valloc((malloc_zone_t *)string_table_zone, 0x4000uLL, 0x7457B6A5uLL);
      if (!*(void *)buf)
      {
        uint64_t v50 = 12;
        goto LABEL_230;
      }
      uint64_t v35 = _page_fetch_with_fd(a1, (void **)buf, v27, 0x4000uLL, 7, __str, 0xFFFFFFFFLL, 0);
      if (v35)
      {
        uint64_t v50 = v35;
        int v118 = *__error();
        int v135 = _SILogForLogForCategory(7);
        os_log_type_t v136 = 2 * (dword_1E9FC90C0 < 4);
        if (os_log_type_enabled(v135, v136))
        {
          *(_DWORD *)__str = 67109120;
          *(_DWORD *)__int16 v172 = v27;
          _os_log_impl(&dword_1BD672000, v135, v136, "sdb: load_string_table: ERR: failed to load page @ 0x%x\n", (uint8_t *)__str, 8u);
        }
        goto LABEL_229;
      }
      uint64_t v36 = *(void *)buf;
      int v37 = db_string_page_flags[v8];
      if ((v37 & ~*(_DWORD *)(*(void *)buf + 12)) != 0)
      {
        int v118 = *__error();
        uint64_t v137 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v137, OS_LOG_TYPE_ERROR))
        {
          int v138 = *(_DWORD *)(*(void *)buf + 12);
          *(_DWORD *)__str = 136315906;
          *(void *)__int16 v172 = "load_string_table";
          *(_WORD *)&v172[8] = 1024;
          int v173 = 10541;
          __int16 v174 = 1024;
          *(_DWORD *)v175 = v138;
          *(_WORD *)&v175[4] = 1024;
          *(_DWORD *)&v175[6] = v37;
          v139 = "%s:%d: load_string_table: unexpected page flags (%x %x)\n";
          size_t v140 = v137;
          uint32_t v141 = 30;
LABEL_238:
          _os_log_error_impl(&dword_1BD672000, v140, OS_LOG_TYPE_ERROR, v139, (uint8_t *)__str, v141);
          uint64_t v50 = 22;
          goto LABEL_229;
        }
LABEL_196:
        uint64_t v50 = 22;
        goto LABEL_229;
      }
      *(void *)(*(void *)buf + 24) = 0;
      if (v165 >= v160)
      {
        v160 *= 2;
        uint64_t v66 = (int *)reallocf(__ptr, 4 * v160);
        if (!v66)
        {
          __ptr = 0;
          uint64_t v50 = 12;
          goto LABEL_230;
        }
        uint64_t v38 = v66;
        uint64_t v36 = *(void *)buf;
      }
      else
      {
        uint64_t v38 = __ptr;
      }
      __ptr = v38;
      v38[v165] = v27;
      uint64_t v39 = v36;
      if (v29)
      {
        *(void *)(v29 + 24) = v36;
        uint64_t v39 = v28;
      }
      uint64_t v162 = v39;
      uint64_t v40 = *(unsigned int *)(v36 + 8);
      if ((int)v40 < 33)
      {
        uint64_t v29 = v36;
        goto LABEL_101;
      }
      uint64_t v164 = v36 + v40;
      uint64_t v41 = (int *)(v36 + 32);
      int v42 = 32;
      do
      {
        unint64_t v46 = *((void *)v20 + 6);
        if (v46 <= v31)
        {
          *((void *)v20 + 6) = 2 * v46;
          uint64_t v64 = malloc_type_zone_realloc((malloc_zone_t *)string_table_zone, *((void **)v20 + 4), 16 * v46, 0x2004093837F09uLL);
          *((void *)v20 + 4) = v64;
          if (a2 <= 1)
          {
            int v65 = malloc_type_zone_realloc((malloc_zone_t *)string_table_zone, *((void **)v20 + 5), *((void *)v20 + 6), 0x5C2C3CF7uLL);
            *((void *)v20 + 5) = v65;
            if (!v65) {
              goto LABEL_255;
            }
            uint64_t v64 = (void *)*((void *)v20 + 4);
          }
          if (!v64)
          {
LABEL_255:
            uint64_t v50 = 12;
            uint64_t v28 = v162;
            goto LABEL_230;
          }
        }
        if (v31 != (*v41 & 0x7FFFFFFF))
        {
          int v118 = *__error();
          int v131 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
          {
            int v132 = *v41 & 0x7FFFFFFF;
            *(_DWORD *)__str = 136316162;
            *(void *)__int16 v172 = "load_string_table";
            *(_WORD *)&v172[8] = 1024;
            int v173 = 10593;
            __int16 v174 = 2048;
            *(void *)v175 = v41;
            *(_WORD *)&v175[8] = 1024;
            int v176 = v132;
            __int16 v177 = 1024;
            LODWORD(v178) = v31;
            _os_log_error_impl(&dword_1BD672000, v131, OS_LOG_TYPE_ERROR, "%s:%d: load_string_table: string id mismatch: dstr (%tx) str_id (%d) str_index (%d)\n", (uint8_t *)__str, 0x28u);
          }
LABEL_228:
          uint64_t v50 = 22;
          uint64_t v28 = v162;
LABEL_229:
          *__error() = v118;
LABEL_230:
          *((void *)v20 + 3) = v28;
          cleanup_string_tables(a1);
          free(__ptr);
          return v50;
        }
        *(void *)(*((void *)v20 + 4) + 8 * v31) = v41;
        if (a2 <= 1)
        {
          __int16 v47 = (char *)v41 + v169 + 4;
          if (strnlen(v47, v164 - (void)v47) == v164 - (void)v47)
          {
            int v118 = *__error();
            v133 = _SILogForLogForCategory(7);
            if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__str = 136315906;
              *(void *)__int16 v172 = "load_string_table";
              *(_WORD *)&v172[8] = 1024;
              int v173 = 10605;
              __int16 v174 = 2048;
              *(void *)v175 = v41;
              *(_WORD *)&v175[8] = 1024;
              int v176 = v31;
              _os_log_error_impl(&dword_1BD672000, v133, OS_LOG_TYPE_ERROR, "%s:%d: load_string_table: read past bound: dstr (%tx) str_index (%d)\n", (uint8_t *)__str, 0x22u);
            }
            goto LABEL_228;
          }
          if (a2) {
            unint64_t v48 = 0;
          }
          else {
            unint64_t v48 = v41 + 1;
          }
          uint64_t inserted = hash_insert_extended(*((void *)v20 + 2), v47, v48, (char *)v41);
          if (inserted == 17)
          {
            int v56 = *__error();
            int v57 = _SILogForLogForCategory(7);
            if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
            {
              int v157 = *v41;
              if (a2) {
                int v62 = 0;
              }
              else {
                int v62 = (char *)v41 + v169 + 4;
              }
              uint64_t v63 = hash_lookup_extended(*((void *)v20 + 2), v47, v62, 1);
              *(_DWORD *)__str = 136316162;
              *(void *)__int16 v172 = "load_string_table";
              *(_WORD *)&v172[8] = 1024;
              int v173 = 10611;
              __int16 v174 = 2080;
              *(void *)v175 = (char *)v41 + v169 + 4;
              *(_WORD *)&v175[8] = 1024;
              int v176 = v157;
              __int16 v177 = 2048;
              uint64_t v178 = v63;
              _os_log_error_impl(&dword_1BD672000, v57, OS_LOG_TYPE_ERROR, "%s:%d: load_string_table: hash_insert: string %s (id %d) already exists (id %p)!\n", (uint8_t *)__str, 0x2Cu);
            }
            LODWORD(v50) = 0;
            *__error() = v56;
          }
          else
          {
            uint64_t v50 = inserted;
            if (inserted)
            {
LABEL_231:
              uint64_t v28 = v162;
              goto LABEL_230;
            }
          }
          char v58 = 0;
          for (unsigned int i = v50; ; ++i)
          {
            if (*v47 == 22)
            {
              char v58 = 1;
              LODWORD(v50) = i;
            }
            else if (!*v47)
            {
              if (v58) {
                unsigned int v60 = v50;
              }
              else {
                unsigned int v60 = i;
              }
              int v45 = v169 + 5 + i;
              if (v60 >= 0xFF) {
                char v61 = -1;
              }
              else {
                char v61 = v60;
              }
              *(unsigned char *)(*((void *)v20 + 5) + v31) = v61;
              goto LABEL_54;
            }
            ++v47;
          }
        }
        __int16 v51 = (char *)(v41 + 1);
        uint64_t v52 = hash_field_insert(*((pthread_rwlock_t **)v20 + 2), (unsigned __int8 *)v41 + 4, (unsigned __int8 *)v41);
        if (v52)
        {
          uint64_t v50 = v52;
          if (v52 != 17) {
            goto LABEL_231;
          }
          int v53 = *__error();
          uint64_t v54 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
          {
            int v156 = *v41;
            uint64_t v55 = hash_field_lookup(*((pthread_rwlock_t **)v20 + 2), (unsigned __int8 *)v41 + 4);
            *(_DWORD *)__str = 136316162;
            *(void *)__int16 v172 = "load_string_table";
            *(_WORD *)&v172[8] = 1024;
            int v173 = 10620;
            __int16 v174 = 2080;
            *(void *)v175 = &v51[v169];
            *(_WORD *)&v175[8] = 1024;
            int v176 = v156;
            __int16 v177 = 2048;
            uint64_t v178 = v55;
            _os_log_error_impl(&dword_1BD672000, v54, OS_LOG_TYPE_ERROR, "%s:%d: load_string_table: hash_insert: string %s (id %d) already exists (id %p)!\n", (uint8_t *)__str, 0x2Cu);
          }
          *__error() = v53;
        }
        unsigned int v43 = *v51;
        if (*v51 < 0)
        {
          if (v43 > 0xBF)
          {
            if (v43 > 0xDF)
            {
              if (v43 > 0xEF)
              {
                unsigned int v43 = *(int *)((char *)v41 + 5);
                int v44 = 5;
              }
              else
              {
                unsigned int v43 = ((v43 & 0xF) << 24) | (*((unsigned __int8 *)v41 + 5) << 16) | (*((unsigned __int8 *)v41 + 6) << 8) | *((unsigned __int8 *)v41 + 7);
                int v44 = 4;
              }
            }
            else
            {
              unsigned int v43 = ((v43 & 0x1F) << 16) | (*((unsigned __int8 *)v41 + 5) << 8) | *((unsigned __int8 *)v41 + 6);
              int v44 = 3;
            }
          }
          else
          {
            int v44 = 2;
            unsigned int v43 = *((unsigned __int8 *)v41 + 5) | ((v43 & 0x3F) << 8);
          }
        }
        else
        {
          int v44 = 1;
        }
        int v45 = v44 + v43 + 4;
LABEL_54:
        uint64_t v41 = (int *)((char *)v41 + v45);
        ++v31;
        v42 += v45;
        uint64_t v29 = *(void *)buf;
        LODWORD(v40) = *(_DWORD *)(*(void *)buf + 8);
      }
      while ((int)v40 > v42);
      unint64_t v31 = v31;
LABEL_101:
      unsigned int v30 = v165 + 1;
      unsigned int v27 = *(_DWORD *)(v29 + 20);
      uint64_t v28 = v162;
      if (!v27)
      {
        if (!*(void *)(v29 + 24))
        {
          if ((int)v40 <= 31) {
            *(_DWORD *)(v29 + 8) = 32;
          }
          uint64_t v25 = __ptr;
          uint64_t v117 = v162;
          goto LABEL_193;
        }
        int v150 = __si_assert_copy_extra_2445(0, -1);
        char v143 = v150;
        v151 = "";
        if (v150) {
          v151 = v150;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 10647, "prev_dnt->_next_ptr==0", v151);
LABEL_242:
        free(v143);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
    }
  }
  bzero(__str, 0x400uLL);
  uint64_t v12 = fd_name(*(void *)(a1 + 840), __str, 0x400uLL);
  int v13 = strcmp(v12, "store.db");
  unsigned int v14 = "db";
  if (v13) {
    unsigned int v14 = v12;
  }
  snprintf(__str, 0x400uLL, "%sStr-%d.map", v14, a2 + 1);
  pthread_key_t v15 = __THREAD_SLOT_KEY;
  if (!__THREAD_SLOT_KEY)
  {
    makeThreadId();
    pthread_key_t v15 = __THREAD_SLOT_KEY;
  }
  int v16 = (char *)pthread_getspecific(v15);
  HIDWORD(v18) = qos_class_self() - 9;
  LODWORD(v18) = HIDWORD(v18);
  unsigned int v17 = v18 >> 2;
  if (v17 > 6) {
    signed int v19 = 0;
  }
  else {
    signed int v19 = dword_1BDA87810[v17];
  }
  int v23 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  if (*(void *)(a1 + 768) || *(_DWORD *)(a1 + 780) || *(unsigned char *)(a1 + 796)) {
    goto LABEL_18;
  }
  if (v19 > 5)
  {
LABEL_203:
    *(void *)(a1 + 768) = pthread_self();
    goto LABEL_19;
  }
  if (!*(void *)(a1 + 16 * v19 + 648))
  {
    uint64_t v120 = v19 - 1;
    __int16 v121 = (uint64_t *)(a1 + 16 * v19 + 664);
    while (v120 != 4)
    {
      uint64_t v122 = *v121;
      v121 += 2;
      ++v120;
      if (v122)
      {
        if (v120 <= 4) {
          goto LABEL_18;
        }
        goto LABEL_203;
      }
    }
    goto LABEL_203;
  }
LABEL_18:
  db_rwlock_wait(a1 + 584, v19, 2);
LABEL_19:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  if (v23)
  {
    int v152 = *__error();
    int v153 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 136315650;
      *(void *)&uint8_t buf[4] = "load_string_table";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 10675;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)__int16 v180 = v23;
      _os_log_error_impl(&dword_1BD672000, v153, OS_LOG_TYPE_ERROR, "%s:%d: Lock failed with error %d", buf, 0x18u);
    }
    *__error() = v152;
    sdb2_die(a1, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 10675);
  }
  int v24 = v16 - 1;
  if (v16) {
    unint64_t v155 = CIOnThreadCleanUpPush((uint64_t)(v16 - 1), (uint64_t)db_write_unlock, a1 + 584);
  }
  else {
    unint64_t v155 = -1;
  }
  uint64_t v67 = *(void *)(a1 + 848);
  long long v163 = v16;
  if (v67) {
    int v68 = *(_DWORD *)(v67 + 44);
  }
  else {
    int v68 = -1;
  }
  *(_DWORD *)&uint8_t buf[4] = 0;
  *(_DWORD *)stat buf = v68;
  *(void *)&uint8_t buf[8] = __str;
  *(_DWORD *)&buf[16] = v169;
  *(_DWORD *)__int16 v180 = 1;
  *(_OWORD *)&v180[4] = 0u;
  memset(v181, 0, sizeof(v181));
  uint64_t v69 = a1 + 880;
  *(void *)(a1 + 880 + 8 * v8) = data_map32_init_with_ctx((uint64_t)buf);
  value_out = 0;
  v154 = a5;
  unsigned int v70 = *a5;
  uint64_t v71 = *a6;
  __ptra = (int *)*a4;
  if (!*a4)
  {
    if (v70)
    {
      v145 = __si_assert_copy_extra_2445(0, -1);
      char v143 = v145;
      v146 = "";
      if (v145) {
        v146 = v145;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 10686, "num_string_pages == 0", v146);
      goto LABEL_242;
    }
    __ptra = (int *)malloc_type_malloc(4 * v71, 0x100004052888210uLL);
  }
  uint64_t v158 = (uint64_t)v24;
  unsigned int v159 = a4;
  uint64_t v161 = a6;
  unsigned int v72 = *(_DWORD *)(a1 + 4 * v8 + 48);
  if (!v72)
  {
    unsigned int v166 = v71;
    goto LABEL_170;
  }
  uint64_t v73 = v169 + 5;
  uint64_t v74 = 1;
  unsigned int v166 = v71;
  do
  {
    uint64_t v75 = v70;
    uint64_t v76 = v70;
    int v77 = __ptra;
    if (v70)
    {
      while (1)
      {
        int v78 = *v77++;
        if (v72 == v78) {
          break;
        }
        if (!--v76) {
          goto LABEL_118;
        }
      }
      int v104 = *__error();
      int v105 = _SILogForLogForCategory(7);
      if (!os_log_type_enabled(v105, OS_LOG_TYPE_ERROR)) {
        goto LABEL_177;
      }
      *(_DWORD *)stat buf = 136315650;
      *(void *)&uint8_t buf[4] = "load_string_table";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 10695;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)__int16 v180 = v72;
      v128 = "%s:%d: load_string_table: circular string table (pgnum %d)\n";
      uint64_t v129 = v105;
      uint32_t v130 = 24;
      goto LABEL_225;
    }
LABEL_118:
    value_out = malloc_type_valloc(0x4000uLL, 0x348FAE97uLL);
    if (!value_out)
    {
      uint64_t v50 = 12;
      goto LABEL_182;
    }
    uint64_t v79 = _page_fetch_with_fd(a1, &value_out, v72, 0x4000uLL, 7, buf, 0xFFFFFFFFLL, 0);
    if (v79)
    {
      uint64_t v50 = v79;
      int v123 = *__error();
      uint64_t v124 = _SILogForLogForCategory(7);
      os_log_type_t v125 = 2 * (dword_1E9FC90C0 < 4);
      int v101 = v161;
      int v108 = (pthread_mutex_t *)(a1 + 584);
      if (os_log_type_enabled(v124, v125))
      {
        *(_DWORD *)stat buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v72;
        _os_log_impl(&dword_1BD672000, v124, v125, "sdb: load_string_table: ERR: failed to load page @ 0x%x\n", buf, 8u);
      }
      *__error() = v123;
      unint64_t v102 = v159;
      goto LABEL_184;
    }
    __int16 v80 = (int *)value_out;
    int v81 = db_string_page_flags[v8];
    if ((v81 & ~*((_DWORD *)value_out + 3)) != 0)
    {
      int v104 = *__error();
      unsigned int v126 = _SILogForLogForCategory(7);
      if (!os_log_type_enabled(v126, OS_LOG_TYPE_ERROR))
      {
LABEL_177:
        *__error() = v104;
        uint64_t v50 = 22;
LABEL_182:
        int v101 = v161;
        unint64_t v102 = v159;
LABEL_183:
        int v108 = (pthread_mutex_t *)(a1 + 584);
        goto LABEL_184;
      }
      int v127 = *((_DWORD *)value_out + 3);
      *(_DWORD *)stat buf = 136315906;
      *(void *)&uint8_t buf[4] = "load_string_table";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 10715;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)__int16 v180 = v127;
      *(_WORD *)&v180[4] = 1024;
      *(_DWORD *)&v180[6] = v81;
      v128 = "%s:%d: load_string_table: unexpected page flags (%x %x)\n";
      uint64_t v129 = v126;
      uint32_t v130 = 30;
LABEL_225:
      _os_log_error_impl(&dword_1BD672000, v129, OS_LOG_TYPE_ERROR, v128, buf, v130);
      goto LABEL_177;
    }
    if (v75 >= v166)
    {
      v166 *= 2;
      __ptra = (int *)reallocf(__ptra, 4 * v166);
      if (!__ptra)
      {
        __ptra = 0;
        uint64_t v50 = 12;
        goto LABEL_182;
      }
      __int16 v80 = (int *)value_out;
    }
    __ptra[v75] = v72;
    if (v80[2] < 33) {
      goto LABEL_165;
    }
    uint64_t v82 = v80 + 8;
    uint64_t v83 = 32;
    if (a2 < 2)
    {
      while (1)
      {
        if (v74 != (*v82 & 0x7FFFFFFF)) {
          goto LABEL_178;
        }
        unsigned int v84 = (char *)(v82 + 1);
        if (*((unsigned char *)v82 + v169 + 4)) {
          break;
        }
        uint64_t v87 = 0;
        unint64_t data_id = *(void *)(v69 + 8 * v8);
        if (data_id) {
          goto LABEL_131;
        }
LABEL_138:
        if (data_id != v74) {
          goto LABEL_239;
        }
        uint64_t v91 = (int)v73 + (int)v87;
        uint64_t v82 = (int *)((char *)v82 + v91);
        ++v74;
        v83 += v91;
        __int16 v80 = (int *)value_out;
        if (*((_DWORD *)value_out + 2) <= (int)v83) {
          goto LABEL_164;
        }
      }
      uint64_t v85 = 0;
      while (*((unsigned __int8 *)v82 + v73 + v85++))
        ;
      uint64_t v87 = v85;
      unint64_t data_id = *(void *)(v69 + 8 * v8);
      if (!data_id) {
        goto LABEL_138;
      }
LABEL_131:
      unint64_t v89 = v169 + 1 + v87;
      int v90 = *(_DWORD *)(data_id + 216);
      switch(v90)
      {
        case -270471200:
          unint64_t data_id = _data_map_ext_get_data_id(data_id, *(_DWORD *)(data_id + 220), v84, v89, 1);
          break;
        case 1684300900:
          unint64_t data_id = _data_map64_get_data_id(data_id, *(_DWORD *)(data_id + 220), v84, v89, 1);
          break;
        case 842150450:
          unint64_t data_id = _data_map32_get_data_id(data_id, *(_DWORD *)(data_id + 1244), v84, v89, 1);
          break;
        default:
          unint64_t data_id = 0;
          break;
      }
      goto LABEL_138;
    }
    do
    {
      if (v74 != (*v82 & 0x7FFFFFFF))
      {
LABEL_178:
        int v106 = *__error();
        uint64_t v107 = _SILogForLogForCategory(7);
        int v101 = v161;
        int v108 = (pthread_mutex_t *)(a1 + 584);
        if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
        {
          int v134 = *v82 & 0x7FFFFFFF;
          *(_DWORD *)stat buf = 136316162;
          *(void *)&uint8_t buf[4] = "load_string_table";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 10739;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(void *)__int16 v180 = v82;
          *(_WORD *)&v180[8] = 1024;
          *(_DWORD *)&v180[10] = v134;
          *(_WORD *)&v180[14] = 1024;
          *(_DWORD *)&v180[16] = v74;
          _os_log_error_impl(&dword_1BD672000, v107, OS_LOG_TYPE_ERROR, "%s:%d: load_string_table: string id mismatch: dstr (%tx) str_id (%d) str_index (%d)\n", buf, 0x28u);
        }
        *__error() = v106;
        uint64_t v50 = 22;
        unint64_t v102 = v159;
        goto LABEL_184;
      }
      int v92 = (char *)(v82 + 1);
      unsigned int v93 = *((unsigned __int8 *)v82 + 4);
      if ((char)v82[1] < 0)
      {
        if (v93 >= 0xC0)
        {
          if (v93 >= 0xE0)
          {
            if (v93 >= 0xF0)
            {
              unsigned int v93 = *(int *)((char *)v82 + 5);
              int v94 = v93 + 5;
              unint64_t v95 = *(void *)(v69 + 8 * v8);
              uint64_t v96 = 5;
              if (!v95) {
                goto LABEL_162;
              }
            }
            else
            {
              unsigned int v93 = ((v93 & 0xF) << 24) | (*((unsigned __int8 *)v82 + 5) << 16) | (*((unsigned __int8 *)v82 + 6) << 8) | *((unsigned __int8 *)v82 + 7);
              int v94 = v93 + 4;
              unint64_t v95 = *(void *)(v69 + 8 * v8);
              uint64_t v96 = 4;
              if (!v95) {
                goto LABEL_162;
              }
            }
          }
          else
          {
            unsigned int v93 = ((v93 & 0x1F) << 16) | (*((unsigned __int8 *)v82 + 5) << 8) | *((unsigned __int8 *)v82 + 6);
            int v94 = v93 + 3;
            unint64_t v95 = *(void *)(v69 + 8 * v8);
            uint64_t v96 = 3;
            if (!v95) {
              goto LABEL_162;
            }
          }
        }
        else
        {
          int v94 = (*((unsigned __int8 *)v82 + 5) | ((v93 & 0x3F) << 8)) + 2;
          unint64_t v95 = *(void *)(v69 + 8 * v8);
          unsigned int v93 = *((unsigned __int8 *)v82 + 5) | ((v93 & 0x3F) << 8);
          uint64_t v96 = 2;
          if (!v95) {
            goto LABEL_162;
          }
        }
      }
      else
      {
        int v94 = *((unsigned __int8 *)v82 + 4) + 1;
        unint64_t v95 = *(void *)(v69 + 8 * v8);
        uint64_t v96 = 1;
        if (!v95) {
          goto LABEL_162;
        }
      }
      unint64_t v97 = v96 + v93;
      int v98 = *(_DWORD *)(v95 + 216);
      switch(v98)
      {
        case -270471200:
          unint64_t v95 = _data_map_ext_get_data_id(v95, *(_DWORD *)(v95 + 220), v92, v97, 1);
          break;
        case 1684300900:
          unint64_t v95 = _data_map64_get_data_id(v95, *(_DWORD *)(v95 + 220), v92, v97, 1);
          break;
        case 842150450:
          unint64_t v95 = _data_map32_get_data_id(v95, *(_DWORD *)(v95 + 1244), v92, v97, 1);
          break;
        default:
          unint64_t v95 = 0;
          break;
      }
LABEL_162:
      if (v74 != v95)
      {
LABEL_239:
        char v142 = __si_assert_copy_extra_2445(0, -1);
        char v143 = v142;
        v144 = "";
        if (v142) {
          v144 = v142;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 10754, "string_id == str_index", v144);
        goto LABEL_242;
      }
      uint64_t v99 = v94 + 4;
      uint64_t v82 = (int *)((char *)v82 + v99);
      ++v74;
      v83 += v99;
      __int16 v80 = (int *)value_out;
    }
    while (*((_DWORD *)value_out + 2) > (int)v83);
LABEL_164:
    uint64_t v74 = v74;
LABEL_165:
    unsigned int v70 = v75 + 1;
    unsigned int v72 = v80[5];
    free(v80);
  }
  while (v72);
LABEL_170:
  unsigned int *v154 = v70;
  if ((*(unsigned char *)(a1 + 804) & 0x14) == 0)
  {
    uint64_t v50 = 0;
    goto LABEL_182;
  }
  uint64_t v100 = *(void *)(v69 + 8 * v8);
  int v101 = v161;
  unint64_t v102 = v159;
  if (!v100)
  {
LABEL_212:
    uint64_t v50 = 0;
    goto LABEL_183;
  }
  int v103 = *(_DWORD *)(v100 + 216);
  switch(v103)
  {
    case -270471200:
      data_map_ext_flush(v100);
      goto LABEL_206;
    case 1684300900:
      data_map64_flush(v100);
LABEL_206:
      uint64_t v100 = *(void *)(v69 + 8 * v8);
      if (v100)
      {
        int v103 = *(_DWORD *)(v100 + 216);
        break;
      }
      goto LABEL_212;
    case 842150450:
      data_map32_flush(v100);
      goto LABEL_206;
  }
  int v108 = (pthread_mutex_t *)(a1 + 584);
  switch(v103)
  {
    case -270471200:
      _data_map_ext_commit(v100);
      break;
    case 1684300900:
      _data_map64_commit(v100);
      break;
    case 842150450:
      _data_map32_commit(v100, 1);
      break;
  }
  uint64_t v50 = 0;
LABEL_184:
  int v109 = pthread_mutex_lock(v108);
  *(_DWORD *)(a1 + 788) = 0;
  uint64_t v110 = *(pthread_override_s **)(a1 + 760);
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 760) = 0;
  char v111 = *(_DWORD *)(a1 + 780) != 0;
  *(unsigned char *)(a1 + 796) = 0;
  db_rwlock_wakeup((uint64_t)v108, v111, 0);
  pthread_mutex_unlock(v108);
  if (v110) {
    pthread_override_qos_class_end_np(v110);
  }
  if (v109) {
    sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 10772);
  }
  if (v163)
  {
    CIOnThreadCleanUpClearItem(v158, v155);
    size_t v112 = &threadData[18 * v158];
    int v115 = v112[14];
    BOOL v113 = v112 + 14;
    int v114 = v115;
    if (v155 + 1 == v115) {
      *BOOL v113 = v114 - 1;
    }
  }
  *unint64_t v102 = __ptra;
  unsigned int *v101 = v166;
  return v50;
}

uint64_t __db2_get_datastore_with_ctx_block_invoke_57(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return (*a3 - *a2);
}

uint64_t __db2_get_datastore_with_ctx_block_invoke_3(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t __db2_get_datastore_with_ctx_block_invoke_2(int a1, void *a2, size_t a3)
{
  return munmap(a2, a3);
}

void __db2_get_datastore_with_ctx_block_invoke(int a1, void *a2)
{
}

unsigned int *swap_map(unsigned int *result)
{
  unsigned int v1 = result[2];
  unsigned int v2 = *result;
  BOOL v3 = *result == 846029412 || v2 == 829252196;
  uint64_t v4 = bswap32(v1);
  if (!v3) {
    uint64_t v4 = (int)result[2];
  }
  if (v4 >= 1)
  {
    unsigned int v5 = (int8x8_t *)(result + 7);
    do
    {
      v5[-1] = (int8x8_t)bswap64(*(void *)&v5[-1]);
      int8x8_t *v5 = vrev32_s8(*v5);
      v5 += 2;
      --v4;
    }
    while (v4);
  }
  unsigned int v6 = bswap32(result[1]);
  *uint64_t result = bswap32(v2);
  result[1] = v6;
  result[2] = bswap32(v1);
  result[4] = bswap32(result[4]);
  return result;
}

uint64_t __db2_shrink_cache_block_invoke(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = _flush_cache_entry(*(void *)(a1 + 32), 0, a2, 0);
  db_writer_yield_lock(*(void *)(a1 + 32) + 584);
  return v3;
}

void _db2_clear_cache_locked(uint64_t a1)
{
  v13[0] = 0;
  v13[1] = v13;
  int v14 = 0;
  v13[2] = 0x2000000000;
  v11[0] = 0;
  v11[1] = v11;
  int v12 = 0;
  v11[2] = 0x2000000000;
  v9[0] = 0;
  v9[1] = v9;
  int v10 = 0;
  v9[2] = 0x2000000000;
  unsigned int v2 = *(void **)(a1 + 992);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  v8[2] = __flush_updateset_locked_block_invoke;
  v8[3] = &unk_1E63483C8;
  v8[8] = 0x17FFFFFFFLL;
  v8[4] = v13;
  v8[5] = v9;
  v8[6] = v11;
  v8[7] = a1;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = __flush_updateset_locked_block_invoke_144;
  v7[3] = &unk_1E63483F0;
  v7[4] = v13;
  v7[5] = v9;
  v7[6] = v11;
  v7[7] = a1;
  v7[8] = 0x17FFFFFFFLL;
  int v3 = db_updateset_iterate(v2, (uint64_t)v8, (uint64_t)v7);
  _Block_object_dispose(v9, 8);
  _Block_object_dispose(v11, 8);
  _Block_object_dispose(v13, 8);
  if (!v3)
  {
    uint64_t v4 = *(unint64_t **)(a1 + 928);
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 0x40000000;
    v5[2] = ___db2_clear_cache_locked_block_invoke;
    v5[3] = &__block_descriptor_tmp_159_12013;
    v5[4] = a1;
    char v6 = 0;
    db_cache_clear(v4, (uint64_t)v5);
  }
}

uint64_t ___db2_clear_cache_locked_block_invoke(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = _flush_cache_entry(*(void *)(a1 + 32), 0, a2, 0);
  if (*(unsigned char *)(a1 + 40)) {
    db_writer_yield_lock(*(void *)(a1 + 32) + 584);
  }
  return v3;
}

void db2_release_datastore_no_sync(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  pthread_key_t v2 = __THREAD_SLOT_KEY;
  if (!__THREAD_SLOT_KEY)
  {
    makeThreadId();
    pthread_key_t v2 = __THREAD_SLOT_KEY;
  }
  uint64_t v3 = pthread_getspecific(v2);
  HIDWORD(v5) = qos_class_self() - 9;
  LODWORD(v5) = HIDWORD(v5);
  unsigned int v4 = v5 >> 2;
  if (v4 > 6) {
    signed int v6 = 0;
  }
  else {
    signed int v6 = dword_1BDA87810[v4];
  }
  int v7 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  if (*(void *)(a1 + 768) || *(_DWORD *)(a1 + 780) || *(unsigned char *)(a1 + 796)) {
    goto LABEL_9;
  }
  if (v6 <= 5)
  {
    if (*(void *)(a1 + 16 * v6 + 648))
    {
LABEL_9:
      db_rwlock_wait(a1 + 584, v6, 2);
      goto LABEL_10;
    }
    uint64_t v29 = v6 - 1;
    unsigned int v30 = (uint64_t *)(a1 + 16 * v6 + 664);
    while (v29 != 4)
    {
      uint64_t v31 = *v30;
      v30 += 2;
      ++v29;
      if (v31)
      {
        if (v29 <= 4) {
          goto LABEL_9;
        }
        break;
      }
    }
  }
  *(void *)(a1 + 768) = pthread_self();
LABEL_10:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  if (v7)
  {
    int v32 = *__error();
    int8x16_t v33 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v34 = 136315650;
      *(void *)&v34[4] = "db2_release_datastore_no_sync";
      *(_WORD *)&v34[12] = 1024;
      *(_DWORD *)&v34[14] = 8859;
      __int16 v35 = 1024;
      int v36 = v7;
      _os_log_error_impl(&dword_1BD672000, v33, OS_LOG_TYPE_ERROR, "%s:%d: Lock failed with error %d", v34, 0x18u);
    }
    *__error() = v32;
    sdb2_die(a1, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 8859);
  }
  if (v3) {
    CIOnThreadCleanUpPush((uint64_t)v3 - 1, (uint64_t)db_write_unlock, a1 + 584);
  }
  uint64_t v8 = *(void *)(a1 + 928);
  db_cache_clear((unint64_t *)v8, (uint64_t)&__block_literal_global_12_13050);
  *(void *)&v34[8] = 0;
  *(void *)int v34 = *(void *)v8;
  if (atomic_load((unsigned int *)(v8 + 248)))
  {
    for (unsigned int i = 0; i < v11; ++i)
    {
      *(_DWORD *)&v34[8] = i;
      _cache_remove((uint64_t *)v34);
      unsigned int v11 = atomic_load((unsigned int *)(v8 + 248));
    }
  }
  atomic_store(0, (unsigned int *)(v8 + 248));
  free((void *)v8);
  int v12 = *(void **)(a1 + 856);
  if (v12)
  {
    free(v12);
    *(void *)(a1 + 856) = 0;
  }
  cleanup_string_tables(a1);
  int v13 = *(void **)(a1 + 864);
  if (v13)
  {
    free(v13);
    *(void *)(a1 + 864) = 0;
  }
  int v14 = *(_DWORD **)(a1 + 848);
  if (v14 != *(_DWORD **)(a1 + 840))
  {
    fd_invalidate(v14);
    fd_release(*(atomic_uint **)(a1 + 848));
    *(void *)(a1 + 848) = 0;
    int v14 = *(_DWORD **)(a1 + 840);
  }
  fd_invalidate(v14);
  fd_release(*(atomic_uint **)(a1 + 840));
  *(void *)(a1 + 840) = 0;
  pthread_key_t v15 = *(const void **)(a1 + 808);
  if (v15) {
    _Block_release(v15);
  }
  int v16 = *(const void **)(a1 + 816);
  if (v16) {
    _Block_release(v16);
  }
  unsigned int v17 = *(const void **)(a1 + 824);
  if (v17) {
    _Block_release(v17);
  }
  *(void *)(a1 + 808) = 0;
  *(void *)(a1 + 816) = 0;
  *(void *)(a1 + 824) = 0;
  unint64_t v18 = *(const void **)(a1 + 832);
  if (v18) {
    _Block_release(v18);
  }
  *(void *)(a1 + 832) = 0;
  signed int v19 = *(const void **)(a1 + 968);
  if (v19) {
    _Block_release(v19);
  }
  uint64_t v20 = *(void *)(a1 + 992);
  uint64_t v21 = *(uint64_t **)(v20 + 16);
  if (!v21) {
    goto LABEL_43;
  }
  do
  {
    int v22 = *((_DWORD *)v21 + 6);
    if (v22) {
      BOOL v23 = v22 == 3;
    }
    else {
      BOOL v23 = 1;
    }
    if (!v23) {
      free((void *)v21[4]);
    }
    uint64_t v21 = (uint64_t *)*v21;
  }
  while (v21);
  if (v20)
  {
    int v24 = *(void **)(v20 + 16);
    if (v24)
    {
      do
      {
        uint64_t v25 = (void *)*v24;
        operator delete(v24);
        int v24 = v25;
      }
      while (v25);
    }
LABEL_43:
    BOOL v26 = *(void **)v20;
    *(void *)uint64_t v20 = 0;
    if (v26) {
      operator delete(v26);
    }
    MEMORY[0x1C1881000](v20, 0x10A0C4087A21FEBLL);
  }
  *(void *)(a1 + 992) = 0;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  *(_DWORD *)(a1 + 788) = 0;
  unsigned int v27 = *(pthread_override_s **)(a1 + 760);
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 760) = 0;
  char v28 = *(_DWORD *)(a1 + 780) != 0;
  *(unsigned char *)(a1 + 796) = 0;
  db_rwlock_wakeup(a1 + 584, v28, 0);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  if (v27) {
    pthread_override_qos_class_end_np(v27);
  }
  db_rwlock_destroy((pthread_mutex_t *)(a1 + 584));
  free((void *)a1);
}

uint64_t db2_clear_vector_fields(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v6 = a1;
  v183[2] = *MEMORY[0x1E4F143B8];
  v175 = 0;
  int v7 = (pthread_mutex_t *)(a1 + 584);
  HIDWORD(v9) = qos_class_self() - 9;
  LODWORD(v9) = HIDWORD(v9);
  unsigned int v8 = v9 >> 2;
  if (v8 > 6) {
    signed int v10 = 0;
  }
  else {
    signed int v10 = dword_1BDA87810[v8];
  }
  pthread_mutex_lock(v7);
  if (*(void *)(v6 + 768) || *(_DWORD *)(v6 + 780) || *(unsigned char *)(v6 + 796)) {
    goto LABEL_7;
  }
  if (v10 > 5)
  {
LABEL_227:
    *(void *)(v6 + 768) = pthread_self();
    goto LABEL_8;
  }
  if (!*(void *)(v6 + 16 * v10 + 648))
  {
    uint64_t v130 = v10 - 1;
    int v131 = (uint64_t *)(v6 + 16 * v10 + 664);
    while (v130 != 4)
    {
      uint64_t v132 = *v131;
      v131 += 2;
      ++v130;
      if (v132)
      {
        if (v130 <= 4) {
          goto LABEL_7;
        }
        goto LABEL_227;
      }
    }
    goto LABEL_227;
  }
LABEL_7:
  db_rwlock_wait((uint64_t)v7, v10, 2);
LABEL_8:
  pthread_mutex_unlock(v7);
  if (a2) {
    *a2 = 1;
  }
  db2_flush_all_cache((void *)v6);
  uint64_t v11 = *(unsigned int *)(v6 + 36);
  uint64_t v12 = *(unsigned int *)(v6 + 40);
  int v13 = (int8x16_t *)malloc_type_valloc(*(unsigned int *)(v6 + 44), 0x21080B1DuLL);
  if (!v13)
  {
    pthread_mutex_lock(v7);
    *(_DWORD *)(v6 + 788) = 0;
    BOOL v26 = *(pthread_override_s **)(v6 + 760);
    *(void *)(v6 + 768) = 0;
    *(void *)(v6 + 760) = 0;
    char v27 = *(_DWORD *)(v6 + 780) != 0;
    *(unsigned char *)(v6 + 796) = 0;
    db_rwlock_wakeup((uint64_t)v7, v27, 0);
    pthread_mutex_unlock(v7);
    if (v26) {
      pthread_override_qos_class_end_np(v26);
    }
    if (a2) {
      *a2 = 0;
    }
    return 12;
  }
  int v14 = v13;
  unsigned int v159 = a2;
  int v15 = *__error();
  int v16 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl(&dword_1BD672000, v16, OS_LOG_TYPE_DEFAULT, "clear_vector_fields for lost vectors.", buf, 2u);
  }
  *__error() = v15;
  if (!__kSIUINT32SetTypeID) {
    __kSIUINT32SetTypeID = _CFRuntimeRegisterClass();
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  v183[0] = 0;
  v183[1] = 0;
  unsigned int v17 = (unsigned int *)internal_copy_field_ids(v6, "_kMDItemMediaEmbeddingVersion", (uint64_t)v183, 4uLL, 0);
  if (v17)
  {
    unint64_t v18 = v17;
    signed int v19 = v14;
    uint64_t v20 = *v17;
    if (v20)
    {
      uint64_t v21 = v17 + 1;
      do
      {
        SIValueSet<unsigned int>::SIValueSetInsert((unsigned int *)(Instance + 16), v20);
        unsigned int v22 = *v21++;
        uint64_t v20 = v22;
      }
      while (v22);
    }
    int v14 = v19;
    if (v18 != v183) {
      free(v18);
    }
  }
  CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(@"IVFLogClearVectorFields", @"com.apple.Spotlight", 0);
  int v171 = 0;
  uint64_t v24 = a4;
  if (a4 && AppIntegerValue)
  {
    SIValueSet<unsigned long long>::_SIValueSetInnerIterate(a4 + 56, *(void *)(a4 + 16), *(_DWORD *)(a4 + 24), (uint64_t)logLostIds, a4, 100);
    uint64_t v25 = (int *)internal_copy_field_ids(v6, "kMDItemIdentifier", (uint64_t)v183, 4uLL, 0);
    if (v25)
    {
      int v171 = *v25;
      if (v25 != (int *)v183) {
        free(v25);
      }
    }
    else
    {
      int v171 = 0;
    }
    uint64_t v24 = a4;
  }
  if (*a3)
  {
    uint64_t v160 = 0;
    int v29 = 0;
    int v30 = 0;
    uint64_t v28 = 89;
    goto LABEL_236;
  }
  v146 = v7;
  int v152 = 0;
  int v153 = 0;
  uint64_t v160 = 0;
  uint64_t v149 = 0;
  off_t v31 = v12 + v11;
  uint64_t v170 = v24 + 56;
  uint64_t v32 = Instance;
  uint64_t v169 = Instance + 48;
  int8x16_t v33 = v14;
  uint64_t v157 = v6;
  uint64_t v161 = a3;
  while (1)
  {
    uint64_t v35 = fd_pread(*(_DWORD **)(v6 + 848), v33, *(unsigned int *)(v6 + 44), v31);
    if (v35 <= 0)
    {
      uint64_t v28 = v35;
      int v7 = v146;
      if (v35 < 0) {
        *(_DWORD *)(v6 + 4) |= 4u;
      }
      goto LABEL_235;
    }
    if (v33->i32[0] != 846226020 && v33->i32[0] != 1684172850)
    {
      int v34 = 1 << *(_DWORD *)(v6 + 12);
      goto LABEL_36;
    }
    if (db2_page_uncompress_swap(v6, v33, &v175, 0))
    {
      uint64_t v28 = 0;
      goto LABEL_234;
    }
    if (v175) {
      int8x16_t v33 = v175;
    }
    int v37 = *__error();
    uint64_t v38 = _SILogForLogForCategory(7);
    os_log_type_t v39 = 2 * (dword_1E9FC90C0 < 4);
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = v31 >> *(_DWORD *)(v6 + 12);
      __int32 v41 = v33->i32[0];
      __int32 v42 = v33->i32[1];
      __int32 v43 = v33->i32[2];
      __int32 v44 = v33->i32[3];
      *(_DWORD *)stat buf = 67110144;
      *(_DWORD *)&uint8_t buf[4] = v40;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v41;
      *(_WORD *)__int16 v177 = 1024;
      *(_DWORD *)&v177[2] = v42;
      *(_WORD *)&v177[6] = 1024;
      *(_DWORD *)&v177[8] = v43;
      *(_WORD *)&v177[12] = 1024;
      *(_DWORD *)uint64_t v178 = v44;
      _os_log_impl(&dword_1BD672000, v38, v39, "Read page:%d sig:0x%4.4x sz:0x%4.4x used:0x%4.4x flags:0x%4.4x", buf, 0x20u);
    }
    *__error() = v37;
    if (v33->i32[0] != 1684172850)
    {
      if (v14->i32[0] != 1684172850) {
        v14->i32[1] = *(_DWORD *)(v6 + 44);
      }
      goto LABEL_214;
    }
    if ((v33->i8[12] & 0xF0) == 0) {
      break;
    }
LABEL_214:
    if (v175)
    {
      free(v175);
      v175 = 0;
      int8x16_t v33 = v14;
    }
    if ((~*(_DWORD *)(v6 + 4) & 0x60) == 0)
    {
      uint64_t v28 = 22;
LABEL_234:
      int v7 = v146;
LABEL_235:
      int v30 = v152;
      int v29 = v153;
      goto LABEL_236;
    }
    int v34 = v33->i32[1];
LABEL_36:
    v31 += v34;
    if (*a3)
    {
      uint64_t v28 = 89;
      goto LABEL_234;
    }
  }
  uint64_t v45 = v31 >> *(_DWORD *)(v6 + 12);
  uint64_t v46 = *(void *)(v6 + 856);
  uint64_t v47 = *(int *)(v46 + 8);
  uint64_t v48 = v149;
  if (v149 >= v47 || v149 <= -1) {
    uint64_t v48 = 0;
  }
  if (v48 >= v47)
  {
LABEL_60:
    if (v48 < 1) {
      goto LABEL_68;
    }
    uint64_t v51 = 0;
    int v53 = (int *)(v46 + 28);
    while (1)
    {
      int v54 = *v53;
      v53 += 4;
      if (v54 == v45) {
        break;
      }
      if (v48 == ++v51) {
        goto LABEL_68;
      }
    }
  }
  else
  {
    uint64_t v50 = (int *)(v46 + 16 * v48 + 28);
    uint64_t v51 = v48;
    while (1)
    {
      int v52 = *v50;
      v50 += 4;
      if (v52 == v45) {
        break;
      }
      if (v47 == ++v51) {
        goto LABEL_60;
      }
    }
  }
  uint64_t v149 = v51 + 1;
LABEL_68:
  uint64_t v55 = &v33[1].i8[4];
  uint64_t v56 = v33->i32[2];
  uint64_t v162 = &v33->i8[v56];
  if ((char *)v33[1].i64 + v33[1].u32[1] + 4 > &v33->i8[v56] || (int)v56 < 21) {
    goto LABEL_214;
  }
  int v154 = 0;
  uint64_t v164 = 0;
  char v166 = 0;
  char v58 = &v33[1].u32[1];
  off_t v148 = v31;
  int v156 = v14;
  while (1)
  {
    if (*v58 == -4)
    {
LABEL_189:
      if (v166)
      {
        v33->i32[2] = v55 - v33;
        uint64_t v116 = *(void *)(v6 + 856);
        int v117 = *(_DWORD *)(v116 + 8);
        if (v117)
        {
          uint64_t v118 = *(int *)(v116 + 16);
          if ((int)v118 >= v117
            || (uint64_t v119 = v116 + 16 * v118, *(void *)(v119 + 20) != v164)
            || v154 != *(_DWORD *)(v119 + 32) >> 28)
          {
            if (v117 >= 1)
            {
              int v120 = 0;
              uint64_t v121 = *(unsigned int *)(v116 + 8);
              while (1)
              {
                if ((int)v121 + v120 < 0 != __OFADD__(v121, v120)) {
                  int v124 = v121 + v120 + 1;
                }
                else {
                  int v124 = v121 + v120;
                }
                uint64_t v125 = (v124 >> 1);
                int v126 = v154 - (*(_DWORD *)(v116 + 16 * (int)v125 + 32) >> 28);
                if (v126)
                {
                  uint64_t v122 = v126;
                  uint64_t v123 = v125;
                  if ((v122 & 0x8000000000000000) == 0) {
                    goto LABEL_197;
                  }
                }
                else
                {
                  uint64_t v122 = v164 - *(void *)(v116 + 16 * ((uint64_t)v124 >> 1) + 20);
                  uint64_t v123 = v125;
                  if ((v122 & 0x8000000000000000) == 0)
                  {
LABEL_197:
                    if (!v122) {
                      goto LABEL_208;
                    }
                    int v120 = v125 + 1;
                    uint64_t v123 = v121;
                  }
                }
                uint64_t v121 = v123;
                if (v120 >= (int)v123)
                {
                  BOOL v127 = v122 > 0;
                  goto LABEL_209;
                }
              }
            }
            LODWORD(v125) = 0;
LABEL_208:
            BOOL v127 = 0;
LABEL_209:
            BOOL v128 = v117 - 1 > (int)v125 && v127;
            int v129 = v125 + v128;
            uint64_t v118 = v129;
            *(_DWORD *)(v116 + 16) = v129;
          }
          page_release(v6, v33, *(_DWORD *)(v116 + 16 * v118 + 28), 5u, 0);
        }
      }
      goto LABEL_214;
    }
    __dst = v55;
    __int16 v174 = 0;
    __src = v58;
    uint64_t v59 = _inflateDBO(v6, v58, (void **)&v174, 0, 0x10000, 0);
    if (v59) {
      break;
    }
    unsigned int v60 = v174;
    unsigned int v61 = v174[3];
    if (v61 <= 0x2F)
    {
      char v143 = __si_assert_copy_extra_2445(0, -1);
      v144 = v143;
      v145 = "";
      if (v143) {
        v145 = v143;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 13455, "dbo->used_bytes >= sizeof(external_db_obj)", v145);
      free(v144);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    uint64_t v62 = a4;
    if (!v164)
    {
      uint64_t v164 = *(void *)v174;
      if (*(unsigned char *)(v6 + 804)) {
        int v154 = (v174[10] >> 5) & 1;
      }
      else {
        int v154 = 0;
      }
    }
    if ((v174[10] & 5) != 0)
    {
      uint64_t v63 = __src;
      size_t v64 = *__src + 4;
      int v65 = (char *)__src + v64;
LABEL_174:
      if ((v166 & 1) != 0 && __dst != (__int8 *)v63) {
        memmove(__dst, v63, v64);
      }
      uint64_t v55 = &__dst[v64];
      a3 = v161;
      goto LABEL_74;
    }
    uint64_t v63 = __src;
    if (!a4) {
      goto LABEL_138;
    }
    if (v61 < 0x31)
    {
      uint64_t v62 = 0;
      char v67 = 1;
      goto LABEL_137;
    }
    int v150 = v33;
    uint64_t v155 = 0;
    unsigned int v147 = 0;
    uint64_t v66 = (char *)(v174 + 12);
    char v67 = 1;
    __int16 v172 = "<unknown>";
    int v68 = v174 + 12;
    do
    {
      uint64_t v71 = (char *)v68 + 13;
      uint64_t v72 = v68[2];
      if ((~*((unsigned __int16 *)v68 + 1) & 0x5030) != 0 || *(_WORD *)v68 != 14)
      {
        if (v66 != (char *)v68)
        {
          memmove(v66, v68, v72 + 13);
          uint64_t v62 = a4;
        }
        uint64_t v69 = v172;
        if (*((_DWORD *)v66 + 1) == v171) {
          uint64_t v69 = v66 + 13;
        }
        __int16 v172 = v69;
        v66 += *((unsigned int *)v66 + 2) + 13;
      }
      else
      {
        if (v72 < 8) {
          goto LABEL_113;
        }
        uint64_t v73 = 0;
        int v74 = 0;
        unsigned int v158 = v72 >> 3;
        do
        {
          unint64_t v75 = *(void *)&v71[8 * v73];
          if (*(unsigned char *)(v62 + 184)) {
            goto LABEL_96;
          }
          int v76 = *(_DWORD *)(v62 + 24);
          if (v76)
          {
            if ((*(void *)(v62 + 16) ^ v75) >> (-4 * v76)) {
              goto LABEL_96;
            }
          }
          char v77 = (60 - 4 * v76) & 0xFC;
          uint64_t v78 = *(void *)(v170 + 8 * ((v75 >> v77) & 0xF));
          if (v78)
          {
            int v79 = v76 + 2;
            do
            {
              char v77 = (64 - 4 * v79) & 0xFC;
              uint64_t v78 = *(void *)((v78 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((v75 >> v77) & 0xF));
              ++v79;
            }
            while ((v78 & 1) != 0);
          }
          if (!v78
            || (v80 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v78 + 16))(v78, *(void *)&v71[8 * v73], ~(-1 << v77)), uint64_t v62 = a4, (v80 & 1) == 0))
          {
LABEL_96:
            if (v73 != v74) {
              *(void *)&v71[8 * v74] = v75;
            }
            char v67 = 0;
            ++v74;
          }
          ++v73;
        }
        while (v73 != v158);
        if (v158 == v74)
        {
          int v14 = v156;
          uint64_t v6 = v157;
          uint64_t v32 = Instance;
LABEL_113:
          if (v66 != (char *)v68)
          {
            memmove(v66, v68, v68[2] + 13);
            uint64_t v62 = a4;
          }
          v66 += *((unsigned int *)v66 + 2) + 13;
          goto LABEL_90;
        }
        uint64_t v6 = v157;
        if (v171)
        {
          uint64_t string_and_length_for_id_12082 = get_string_and_length_for_id_12082(v157, 0, v68[1], 0, 0);
          int v81 = *__error();
          uint64_t v82 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)stat buf = 67109634;
            *(_DWORD *)&uint8_t buf[4] = v158 - v74;
            *(_WORD *)&uint8_t buf[8] = 1024;
            *(_DWORD *)&buf[10] = v72 >> 3;
            *(_WORD *)__int16 v177 = 2080;
            *(void *)&v177[2] = string_and_length_for_id_12082;
            _os_log_impl(&dword_1BD672000, v82, OS_LOG_TYPE_DEFAULT, "clear_vector_fields remove %u of %u vec_ids in %s", buf, 0x18u);
          }
          *__error() = v81;
          uint64_t v6 = v157;
          uint64_t v62 = a4;
        }
        if (v74)
        {
          uint64_t v83 = (8 * v74);
          v68[2] = v83;
          if (v66 != (char *)v68)
          {
            memmove(v66, v68, v83 + 13);
            uint64_t v62 = a4;
          }
          LODWORD(v160) = v160 + 1;
          v155 += 8 * (v158 - v74);
          v66 += *((unsigned int *)v66 + 2) + 13;
        }
        else
        {
          ++v153;
          v155 += v68[2] + 13;
        }
        char v166 = 1;
        unsigned int v147 = 1;
        int v14 = v156;
        uint64_t v32 = Instance;
      }
LABEL_90:
      int v68 = (int *)&v71[v72];
      unsigned int v60 = v174;
      uint64_t v70 = v174[3];
    }
    while (&v71[v72] < (char *)v174 + v70);
    if (!v155)
    {
      int8x16_t v33 = v150;
      uint64_t v63 = __src;
      uint64_t v62 = v147;
LABEL_137:
      int v88 = v67 & 1;
      off_t v31 = v148;
      if (!v88) {
        goto LABEL_173;
      }
LABEL_138:
      LODWORD(v89) = v60[3];
      if (v89 < 0x31) {
        goto LABEL_173;
      }
      v151 = v33;
      uint64_t v90 = 0;
      uint64_t v91 = v60 + 12;
      int v92 = v60 + 12;
      while ((~*((unsigned __int16 *)v92 + 1) & 0x5020) != 0 || *(_WORD *)v92 != 14)
      {
        if (!*(unsigned char *)(v32 + 176))
        {
          unsigned int v99 = v92[1];
          int v100 = *(_DWORD *)(v32 + 20);
          if (!v100 || !((*(_DWORD *)(v32 + 16) ^ v99) >> (-4 * v100)))
          {
            uint64_t v101 = *(void *)(v169 + 8 * ((v99 >> (28 - 4 * v100)) & 0xF));
            if (v101)
            {
              int v102 = v100 + 2;
              do
                uint64_t v101 = *(void *)((v101 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((v99 >> (32 - 4 * v102++)) & 0xF));
              while ((v101 & 1) != 0);
            }
            uint64_t v103 = v62;
            if (v101 && (*(unsigned int (**)(uint64_t))(*(void *)v101 + 16))(v101))
            {
              LODWORD(v89) = v60[3];
              break;
            }
            uint64_t v62 = v103;
          }
        }
LABEL_167:
        uint64_t v104 = v92[2];
        if (v91 != v92)
        {
          memmove(v91, v92, v104 + 13);
          char v166 = 1;
          unsigned int v60 = v174;
          uint64_t v62 = 1;
        }
        int v92 = (unsigned int *)((char *)v92 + v104 + 13);
        uint64_t v91 = (unsigned int *)((char *)v91 + v91[2] + 13);
        uint64_t v89 = v60[3];
        if (v92 >= (_DWORD *)((char *)v60 + v89)) {
          goto LABEL_170;
        }
      }
      uint64_t v93 = v92[2];
      v90 += v93 + 13;
      int v92 = (unsigned int *)((char *)v92 + v93 + 13);
      if (v92 < (_DWORD *)((char *)v60 + v89))
      {
        do
        {
          if ((~*((unsigned __int16 *)v92 + 1) & 0x5020) != 0 || *(_WORD *)v92 != 14)
          {
            if (*(unsigned char *)(v32 + 176)) {
              goto LABEL_156;
            }
            unsigned int v95 = v92[1];
            int v96 = *(_DWORD *)(v32 + 20);
            if (v96)
            {
              if ((*(_DWORD *)(v32 + 16) ^ v95) >> (-4 * v96)) {
                goto LABEL_156;
              }
            }
            uint64_t v97 = *(void *)(v169 + 8 * ((v95 >> (28 - 4 * v96)) & 0xF));
            if (v97)
            {
              int v98 = v96 + 2;
              do
                uint64_t v97 = *(void *)((v97 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((v95 >> (32 - 4 * v98++)) & 0xF));
              while ((v97 & 1) != 0);
            }
            if (!v97 || !(*(unsigned int (**)(uint64_t))(*(void *)v97 + 16))(v97))
            {
LABEL_156:
              uint64_t v62 = 1;
              char v166 = 1;
              goto LABEL_167;
            }
          }
          uint64_t v94 = v92[2];
          v90 += v94 + 13;
          int v92 = (unsigned int *)((char *)v92 + v94 + 13);
          uint64_t v89 = v60[3];
        }
        while (v92 < (_DWORD *)((char *)v60 + v89));
        char v166 = 1;
        LOBYTE(v62) = 1;
LABEL_170:
        int8x16_t v33 = v151;
        if (!v90) {
          goto LABEL_172;
        }
      }
      else
      {
        char v166 = 1;
        LOBYTE(v62) = 1;
        int8x16_t v33 = v151;
        if (!v90)
        {
LABEL_172:
          off_t v31 = v148;
          uint64_t v63 = __src;
          goto LABEL_173;
        }
      }
      v60[3] = v89 - v90;
      goto LABEL_172;
    }
    v174[3] = v70 - v155;
    int v84 = v67 & 1;
    v152 += v84;
    if (v171)
    {
      int v85 = *__error();
      int v86 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)stat buf = 136315394;
        uint64_t v87 = "all vector fields removed";
        if (!v84) {
          uint64_t v87 = "vector field updated";
        }
        *(void *)&uint8_t buf[4] = v172;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)__int16 v177 = v87;
        _os_log_impl(&dword_1BD672000, v86, OS_LOG_TYPE_DEFAULT, "clear_vector_fields item %s %s", buf, 0x16u);
      }
      *__error() = v85;
    }
    int8x16_t v33 = v150;
    uint64_t v63 = __src;
    uint64_t v62 = v147;
    off_t v31 = v148;
    if (v84) {
      goto LABEL_138;
    }
LABEL_173:
    size_t v64 = *v63 + 4;
    int v65 = (char *)v63 + v64;
    if ((v62 & 1) == 0) {
      goto LABEL_174;
    }
    *(void *)stat buf = 0;
    serializeDBO(v6);
    int v105 = *(const void **)buf;
    size_t v106 = (**(_DWORD **)buf + 4);
    if (v106 <= v64
      || (unsigned int v107 = v106 - v64, (int)v106 - (int)v64 <= (__src - __dst)))
    {
      a3 = v161;
    }
    else
    {
      __int32 v108 = v33->i32[2];
      unint64_t v109 = v33->i32[1];
      uint64_t v110 = v33;
      a3 = v161;
      if (v109 < v108 + v107)
      {
        if (v107 <= 0x1000) {
          int v111 = 4096;
        }
        else {
          int v111 = v107;
        }
        __int32 v112 = v109 + v111;
        v33->i32[1] = v112;
        uint64_t v110 = (int8x16_t *)malloc_type_realloc(v33, v112, 0xFF4FF935uLL);
        v175 = v110;
        __int32 v108 = v110->i32[2];
      }
      int64_t v113 = v65 - (char *)v33;
      int v114 = &v110->i8[v65 - (char *)v33];
      __dst = &v110->i8[__dst - (__int8 *)v33];
      int v65 = &v114[v107];
      memmove(v65, v114, v108 - v113 + 20);
      signed int v115 = v110->i32[2] + v107;
      v110->i32[2] = v115;
      uint64_t v162 = &v110->i8[v115];
      int v105 = *(const void **)buf;
      int8x16_t v33 = v110;
      uint64_t v6 = v157;
    }
    ++HIDWORD(v160);
    memmove(__dst, v105, v106);
    uint64_t v55 = &__dst[v106];
    free(*(void **)buf);
    int v14 = v156;
LABEL_74:
    free(v174);
    char v58 = (unsigned int *)v65;
    if (v65 >= v162) {
      goto LABEL_189;
    }
  }
  uint64_t v28 = v59;
  int v133 = *__error();
  int v134 = _SILogForLogForCategory(7);
  BOOL v135 = os_log_type_enabled(v134, OS_LOG_TYPE_ERROR);
  os_log_type_t v136 = v174;
  if (v135)
  {
    int v142 = *__src + 4;
    *(_DWORD *)stat buf = 136316418;
    *(void *)&uint8_t buf[4] = "db2_clear_vector_fields";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)__int16 v177 = 9371;
    *(_WORD *)&v177[4] = 2080;
    *(void *)&v177[6] = __dst;
    *(_WORD *)uint64_t v178 = 1024;
    *(_DWORD *)&v178[2] = v142;
    __int16 v179 = 2048;
    __int16 v180 = v174;
    __int16 v181 = 1024;
    int v182 = v28;
    _os_log_error_impl(&dword_1BD672000, v134, OS_LOG_TYPE_ERROR, "%s:%d: failed to inflate DBO: mark:%s size:%d mdbo:%p err:%d", buf, 0x32u);
  }
  *__error() = v133;
  int v7 = v146;
  int v30 = v152;
  int v29 = v153;
  if (v136) {
    free(v136);
  }
LABEL_236:
  if (v175) {
    free(v175);
  }
  free(v14);
  pthread_mutex_lock(v7);
  *(_DWORD *)(v6 + 788) = 0;
  uint64_t v137 = *(pthread_override_s **)(v6 + 760);
  *(void *)(v6 + 768) = 0;
  *(void *)(v6 + 760) = 0;
  char v138 = *(_DWORD *)(v6 + 780) != 0;
  *(unsigned char *)(v6 + 796) = 0;
  db_rwlock_wakeup((uint64_t)v7, v138, 0);
  pthread_mutex_unlock(v7);
  if (v137) {
    pthread_override_qos_class_end_np(v137);
  }
  if (v159) {
    *unsigned int v159 = 0;
  }
  int v139 = *__error();
  size_t v140 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v140, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 67109888;
    *(_DWORD *)&uint8_t buf[4] = HIDWORD(v160);
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v160;
    *(_WORD *)__int16 v177 = 1024;
    *(_DWORD *)&v177[2] = v29;
    *(_WORD *)&v177[6] = 1024;
    *(_DWORD *)&v177[8] = v30;
    _os_log_impl(&dword_1BD672000, v140, OS_LOG_TYPE_DEFAULT, "clear_vector_fields in %u items: %u vec_id removed, %u field removed, %u all vector fields cleared", buf, 0x1Au);
  }
  *__error() = v139;
  return v28;
}

uint64_t get_string_and_length_for_id_12082(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, int a5)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a3 & 0x7FFFFFFF;
  if ((a3 & 0x7FFFFFFFu) > 0x7FFFFFFD) {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 804) & 0x14) != 0)
  {
    unint64_t v9 = *(_DWORD **)(a1 + 8 * a2 + 880);
    uint64_t v30 = 0;
    unint64_t v10 = v5;
    if (a5) {
      unint64_t data_locked = data_map_get_data_locked((uint64_t)v9, v5, &v30);
    }
    else {
      unint64_t data_locked = data_map_get_data((uint64_t)v9, v5, &v30);
    }
    unint64_t v15 = data_locked;
    if (data_locked)
    {
      if (a4)
      {
        uint64_t v16 = v30;
        if (data_locked + v30 - 1 <= data_locked)
        {
          int v17 = v30;
        }
        else
        {
          int v17 = v30;
          do
          {
            if (*(unsigned char *)(data_locked + v16 - 1) == 22 && *(unsigned char *)(data_locked + v16) == 2)
            {
              int v17 = v16 - 1;
              uint64_t v30 = v16 - 1;
            }
            --v16;
          }
          while (data_locked + v16 - 1 > data_locked);
        }
        *a4 = v17;
      }
      return v15;
    }
    unint64_t v19 = data_map_count((uint64_t)v9);
    if (v19 < v10)
    {
      unint64_t v29 = v19;
      int v20 = *__error();
      uint64_t v21 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        int v25 = *(_DWORD *)(a1 + 4);
        int v26 = data_map_valid(v9);
        *(_DWORD *)stat buf = 136316930;
        uint64_t v32 = "_get_string_and_length_for_id";
        __int16 v33 = 1024;
        int v34 = 571;
        char v27 = "y";
        if (!v26) {
          char v27 = "n";
        }
        __int16 v35 = 2048;
        unint64_t v36 = v10;
        __int16 v37 = 2048;
        unint64_t v38 = v29;
        __int16 v39 = 1024;
        unsigned int v40 = a2;
        __int16 v41 = 2080;
        uint64_t v42 = a1 + 324;
        __int16 v43 = 1024;
        int v44 = v25;
        __int16 v45 = 2080;
        uint64_t v46 = v27;
        _os_log_error_impl(&dword_1BD672000, v21, OS_LOG_TYPE_ERROR, "%s:%d: Invalid string_id:%lu, map_count:%lu, index:%d, dst->name:%s, dst->flags:0x%x valid:%s", buf, 0x46u);
      }
      *__error() = v20;
      if ((*(unsigned char *)(a1 + 4) & 0x20) != 0)
      {
        int v22 = *__error();
        BOOL v23 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          int v28 = *(_DWORD *)(a1 + 4);
          *(_DWORD *)stat buf = 136315906;
          uint64_t v32 = "_get_string_and_length_for_id";
          __int16 v33 = 1024;
          int v34 = 573;
          __int16 v35 = 2080;
          unint64_t v36 = a1 + 324;
          __int16 v37 = 1024;
          LODWORD(v38) = v28;
          _os_log_error_impl(&dword_1BD672000, v23, OS_LOG_TYPE_ERROR, "%s:%d: marking invalid %s flags:0x%x", buf, 0x22u);
        }
        *__error() = v22;
        int v24 = *(_DWORD *)(a1 + 4);
        goto LABEL_34;
      }
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 880 + 8 * a2);
    if (*(_DWORD *)(v12 + 56) > v5 && (uint64_t v13 = *(void *)(*(void *)(v12 + 32) + 8 * v5)) != 0)
    {
      uint64_t v14 = table_extra_bytes_11691[a2];
      if (a4)
      {
        *a4 = *(unsigned __int8 *)(*(void *)(v12 + 40) + v5);
        uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 880 + 8 * a2) + 32) + 8 * v5);
      }
      return v13 + v14 + 4;
    }
    else
    {
      int v24 = *(_DWORD *)(a1 + 4);
      if ((v24 & 0x20) != 0)
      {
        unint64_t v15 = 0;
LABEL_34:
        *(_DWORD *)(a1 + 4) = v24 | 0x40;
        return v15;
      }
      if (SIIsAppleInternal_onceToken != -1) {
        dispatch_once(&SIIsAppleInternal_onceToken, &__block_literal_global_5267);
      }
      return 0;
    }
  }
  return v15;
}

uint64_t logLostIds(uint64_t *a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  bzero(v13, 0x400uLL);
  if (a2)
  {
    unint64_t v4 = 0;
    uint64_t v5 = a2 - 1;
    do
    {
      uint64_t v6 = *a1++;
      v4 += snprintf(&v13[v4], 1024 - v4, "%llu,", v6);
    }
    while (v4 <= 0x3FF && v5-- != 0);
  }
  int v8 = *__error();
  unint64_t v9 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 136315138;
    uint64_t v12 = v13;
    _os_log_impl(&dword_1BD672000, v9, OS_LOG_TYPE_DEFAULT, "lostIds: %s", buf, 0xCu);
  }
  *__error() = v8;
  return 0;
}

uint64_t db2_clear_docids(uint64_t a1, _DWORD *a2, _DWORD *a3, int a4, unsigned int (*a5)(_DWORD *, uint64_t), uint64_t a6)
{
  uint64_t v135 = *MEMORY[0x1E4F143B8];
  int v120 = 0;
  uint64_t v12 = (pthread_mutex_t *)(a1 + 584);
  HIDWORD(v14) = qos_class_self() - 9;
  LODWORD(v14) = HIDWORD(v14);
  unsigned int v13 = v14 >> 2;
  if (v13 > 6) {
    signed int v15 = 0;
  }
  else {
    signed int v15 = dword_1BDA87810[v13];
  }
  pthread_mutex_lock(v12);
  if (*(void *)(a1 + 768) || *(_DWORD *)(a1 + 780) || *(unsigned char *)(a1 + 796)) {
    goto LABEL_7;
  }
  if (v15 <= 5)
  {
    if (*(void *)(a1 + 16 * v15 + 648))
    {
LABEL_7:
      db_rwlock_wait((uint64_t)v12, v15, 2);
      goto LABEL_8;
    }
    uint64_t v97 = v15 - 1;
    int v98 = (uint64_t *)(a1 + 16 * v15 + 664);
    while (v97 != 4)
    {
      uint64_t v99 = *v98;
      v98 += 2;
      ++v97;
      if (v99)
      {
        if (v97 <= 4) {
          goto LABEL_7;
        }
        break;
      }
    }
  }
  *(void *)(a1 + 768) = pthread_self();
LABEL_8:
  pthread_mutex_unlock(v12);
  if (a2) {
    *a2 = 1;
  }
  if (a4) {
    int v16 = 32;
  }
  else {
    int v16 = 0;
  }
  *(_DWORD *)(a1 + 4) |= v16;
  db2_flush_all_cache((void *)a1);
  uint64_t v17 = *(unsigned int *)(a1 + 36);
  uint64_t v18 = *(unsigned int *)(a1 + 40);
  unint64_t v19 = (int8x16_t *)malloc_type_valloc(*(unsigned int *)(a1 + 44), 0x8C437CFAuLL);
  if (v19)
  {
    uint64_t v118 = v19;
    if (*a3)
    {
LABEL_15:
      uint64_t v20 = 89;
      goto LABEL_16;
    }
    int v117 = a3;
    __int32 v112 = a5;
    uint64_t v110 = 0;
    off_t v26 = v18 + v17;
    char v27 = v19;
    uint64_t v113 = a6;
    while (1)
    {
      uint64_t v29 = fd_pread(*(_DWORD **)(a1 + 848), v27, *(unsigned int *)(a1 + 44), v26);
      if (v29 <= 0) {
        break;
      }
      if (v27->i32[0] == 846226020 || v27->i32[0] == 1684172850)
      {
        if (db2_page_uncompress_swap(a1, v27, &v120, 0))
        {
          uint64_t v20 = 0;
          goto LABEL_16;
        }
        if (v120) {
          char v27 = (int8x16_t *)v120;
        }
        int v31 = *__error();
        uint64_t v32 = _SILogForLogForCategory(7);
        os_log_type_t v33 = 2 * (dword_1E9FC90C0 < 4);
        if (os_log_type_enabled(v32, v33))
        {
          uint64_t v34 = v26 >> *(_DWORD *)(a1 + 12);
          __int32 v35 = v27->i32[0];
          __int32 v36 = v27->i32[1];
          __int32 v37 = v27->i32[2];
          __int32 v38 = v27->i32[3];
          *(_DWORD *)stat buf = 67110144;
          *(_DWORD *)&uint8_t buf[4] = v34;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v35;
          *(_WORD *)uint64_t v122 = 1024;
          *(_DWORD *)&v122[2] = v36;
          LOWORD(v123) = 1024;
          *(_DWORD *)((char *)&v123 + 2) = v37;
          HIWORD(v123) = 1024;
          *(_DWORD *)int v124 = v38;
          _os_log_impl(&dword_1BD672000, v32, v33, "Read page:%d sig:0x%4.4x sz:0x%4.4x used:0x%4.4x flags:0x%4.4x", buf, 0x20u);
        }
        *__error() = v31;
        if (v27->i32[0] == 1684172850)
        {
          if ((v27->i8[12] & 0xF0) != 0) {
            goto LABEL_128;
          }
          uint64_t v39 = v26 >> *(_DWORD *)(a1 + 12);
          uint64_t v40 = *(void *)(a1 + 856);
          uint64_t v41 = *(int *)(v40 + 8);
          uint64_t v42 = v110;
          if (v110 >= v41 || v110 <= -1) {
            uint64_t v42 = 0;
          }
          if (v42 >= v41)
          {
LABEL_52:
            if (v42 >= 1)
            {
              uint64_t v45 = 0;
              uint64_t v47 = (int *)(v40 + 28);
              do
              {
                int v48 = *v47;
                v47 += 4;
                if (v48 == v39) {
                  goto LABEL_59;
                }
              }
              while (v42 != ++v45);
            }
          }
          else
          {
            int v44 = (int *)(v40 + 16 * v42 + 28);
            uint64_t v45 = v42;
            while (1)
            {
              int v46 = *v44;
              v44 += 4;
              if (v46 == v39) {
                break;
              }
              if (v41 == ++v45) {
                goto LABEL_52;
              }
            }
LABEL_59:
            uint64_t v110 = v45 + 1;
            uint64_t v41 = v45;
          }
          __int16 v49 = &v27[1].i8[4];
          uint64_t v50 = v27->i32[2];
          signed int v115 = &v27->i8[v50];
          if ((char *)v27[1].i64 + v27[1].u32[1] + 4 <= &v27->i8[v50] && (int)v50 >= 21)
          {
            unint64_t v109 = a2;
            int v111 = 0;
            uint64_t v116 = 0;
            char v114 = 0;
            uint64_t v52 = v41 - 1;
            int v108 = v16;
            int v53 = &v27[1].u32[1];
            while (*v53 != -4)
            {
              uint64_t v119 = 0;
              uint64_t v56 = _inflateDBO(a1, v53, &v119, 0, 0x10000, 0);
              if (v56)
              {
                uint64_t v20 = v56;
                int v100 = *__error();
                uint64_t v101 = _SILogForLogForCategory(7);
                BOOL v102 = os_log_type_enabled(v101, OS_LOG_TYPE_ERROR);
                uint64_t v103 = v119;
                if (v102)
                {
                  int v104 = *v53 + 4;
                  *(_DWORD *)stat buf = 136316418;
                  *(void *)&uint8_t buf[4] = "db2_clear_docids";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)uint64_t v122 = 9725;
                  *(_WORD *)&v122[4] = 2080;
                  uint64_t v123 = v49;
                  *(_WORD *)int v124 = 1024;
                  *(_DWORD *)&v124[2] = v104;
                  __int16 v125 = 2048;
                  *(void *)int v126 = v119;
                  *(_WORD *)&v126[8] = 1024;
                  *(_DWORD *)&v126[10] = v20;
                  _os_log_error_impl(&dword_1BD672000, v101, OS_LOG_TYPE_ERROR, "%s:%d: failed to inflate DBO: mark:%s size:%d mdbo:%p err:%d", buf, 0x32u);
                }
                *__error() = v100;
                if (v103) {
                  free(v103);
                }
                a2 = v109;
                int v16 = v108;
                goto LABEL_16;
              }
              int v57 = v119;
              if (*((_DWORD *)v119 + 3) <= 0x2Fu)
              {
                int v105 = __si_assert_copy_extra_2445(0, -1);
                size_t v106 = v105;
                unsigned int v107 = "";
                if (v105) {
                  unsigned int v107 = v105;
                }
                __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 13455, "dbo->used_bytes >= sizeof(external_db_obj)", v107);
                free(v106);
                if (__valid_fs(-1))
                {
                  MEMORY[0xBAD] = -559038737;
                  abort();
                }
                MEMORY[0xC00] = -559038737;
                abort();
              }
              if (v41 < 1) {
                goto LABEL_76;
              }
              if (*(unsigned char *)(a1 + 804))
              {
                int v60 = (*((_DWORD *)v119 + 10) >> 5) & 1;
                uint64_t v58 = *(void *)(a1 + 856);
                int v59 = *(_DWORD *)(v58 + 16 * v52 + 32) >> 28;
                if (v60 == v59)
                {
LABEL_75:
                  if ((uint64_t)(*(void *)v119 - *(void *)(v58 + 16 * v52 + 20)) <= 0) {
                    goto LABEL_80;
                  }
                  goto LABEL_76;
                }
              }
              else
              {
                uint64_t v58 = *(void *)(a1 + 856);
                int v59 = *(_DWORD *)(v58 + 16 * v52 + 32) >> 28;
                if (!v59) {
                  goto LABEL_75;
                }
                int v60 = 0;
              }
              if (v60 - v59 <= 0)
              {
LABEL_80:
                int v61 = *__error();
                uint64_t v62 = _SILogForLogForCategory(7);
                if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
                {
                  if (*(unsigned char *)(a1 + 804)) {
                    int v76 = (v57[10] >> 5) & 1;
                  }
                  else {
                    int v76 = 0;
                  }
                  char v77 = *(char **)v57;
                  uint64_t v78 = *(void *)(a1 + 856) + 20;
                  uint64_t v79 = v78 + 16 * (v41 - 1);
                  uint64_t v80 = *(void *)v79;
                  uint64_t v81 = v78 + 16 * v41;
                  uint64_t v82 = *(void *)v81;
                  LODWORD(v79) = *(_DWORD *)(v79 + 12) >> 28;
                  LODWORD(v81) = *(_DWORD *)(v81 + 12) >> 28;
                  *(_DWORD *)stat buf = 136317442;
                  *(void *)&uint8_t buf[4] = "db2_clear_docids";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)uint64_t v122 = 9744;
                  *(_WORD *)&v122[4] = 2048;
                  uint64_t v123 = v77;
                  *(_WORD *)int v124 = 1024;
                  *(_DWORD *)&v124[2] = v76;
                  __int16 v125 = 1024;
                  *(_DWORD *)int v126 = v41 - 1;
                  *(_WORD *)&v126[4] = 2048;
                  *(void *)&v126[6] = v80;
                  __int16 v127 = 1024;
                  int v128 = v79;
                  __int16 v129 = 1024;
                  int v130 = v41;
                  __int16 v131 = 2048;
                  uint64_t v132 = v82;
                  __int16 v133 = 1024;
                  int v134 = v81;
                  _os_log_error_impl(&dword_1BD672000, v62, OS_LOG_TYPE_ERROR, "%s:%d: invalid entry oid: 0x%llx type:%d, map[%d] oid:0x%llx type:%d, map[%d] oid:0x%llx type:%d", buf, 0x4Eu);
                }
                *__error() = v61;
                a6 = v113;
                if (v116) {
                  goto LABEL_84;
                }
LABEL_77:
                uint64_t v116 = *(void *)v57;
                if (*(unsigned char *)(a1 + 804)) {
                  int v111 = (v57[10] >> 5) & 1;
                }
                else {
                  int v111 = 0;
                }
                goto LABEL_84;
              }
LABEL_76:
              if (!v116) {
                goto LABEL_77;
              }
LABEL_84:
              if ((v57[10] & 5) != 0 || !v112(v57, a6))
              {
                uint64_t v63 = *v53 + 4;
                if (v114) {
                  memmove(v49, v53, *v53 + 4);
                }
                int v54 = (char *)v53 + v63;
                v49 += v63;
              }
              else
              {
                *((void *)v57 + 4) = 0;
                uint64_t v64 = *v53 + 4;
                int v54 = (char *)v53 + v64;
                *(void *)stat buf = 0;
                serializeDBO(a1);
                int v65 = *(const void **)buf;
                size_t v66 = (**(_DWORD **)buf + 4);
                BOOL v55 = v66 >= v64;
                unsigned int v67 = v66 - v64;
                if (v67 != 0 && v55 && v67 > (int)v53 - (int)v49)
                {
                  __int32 v68 = v27->i32[2];
                  unint64_t v69 = v27->i32[1];
                  uint64_t v70 = v27;
                  if (v69 < v68 + v67)
                  {
                    if (v67 <= 0x1000) {
                      int v71 = 4096;
                    }
                    else {
                      int v71 = v67;
                    }
                    __int32 v72 = v69 + v71;
                    v27->i32[1] = v72;
                    uint64_t v70 = (int8x16_t *)malloc_type_realloc(v27, v72, 0x636057DFuLL);
                    int v120 = v70;
                    __int32 v68 = v70->i32[2];
                  }
                  int64_t v73 = v54 - (char *)v27;
                  int v74 = &v70->i8[v54 - (char *)v27];
                  __int16 v49 = &v70->i8[v49 - (__int8 *)v27];
                  int v54 = &v74[v67];
                  memmove(v54, v74, v68 - v73 + 20);
                  signed int v75 = v70->i32[2] + v67;
                  v70->i32[2] = v75;
                  signed int v115 = &v70->i8[v75];
                  int v65 = *(const void **)buf;
                  char v27 = v70;
                }
                memmove(v49, v65, v66);
                v49 += v66;
                free(*(void **)buf);
                char v114 = 1;
                a6 = v113;
              }
              free(v119);
              int v53 = (unsigned int *)v54;
              BOOL v55 = v54 >= v115;
              uint64_t v52 = v41 - 1;
              if (v55) {
                break;
              }
            }
            if ((v114 & 1) == 0)
            {
              a2 = v109;
              int v16 = v108;
              goto LABEL_128;
            }
            v27->i32[2] = v49 - v27;
            uint64_t v83 = *(void *)(a1 + 856);
            int v84 = *(_DWORD *)(v83 + 8);
            a2 = v109;
            int v16 = v108;
            if (v84)
            {
              uint64_t v85 = *(int *)(v83 + 16);
              if ((int)v85 >= v84
                || (uint64_t v86 = v83 + 16 * v85, *(void *)(v86 + 20) != v116)
                || v111 != *(_DWORD *)(v86 + 32) >> 28)
              {
                if (v84 >= 1)
                {
                  int v87 = 0;
                  uint64_t v88 = *(unsigned int *)(v83 + 8);
                  while (1)
                  {
                    if ((int)v88 + v87 < 0 != __OFADD__(v88, v87)) {
                      int v91 = v88 + v87 + 1;
                    }
                    else {
                      int v91 = v88 + v87;
                    }
                    uint64_t v92 = (v91 >> 1);
                    int v93 = v111 - (*(_DWORD *)(v83 + 16 * (int)v92 + 32) >> 28);
                    if (v93)
                    {
                      uint64_t v89 = v93;
                      uint64_t v90 = v92;
                      if ((v89 & 0x8000000000000000) == 0) {
                        goto LABEL_111;
                      }
                    }
                    else
                    {
                      uint64_t v89 = v116 - *(void *)(v83 + 16 * ((uint64_t)v91 >> 1) + 20);
                      uint64_t v90 = v92;
                      if ((v89 & 0x8000000000000000) == 0)
                      {
LABEL_111:
                        if (!v89) {
                          goto LABEL_122;
                        }
                        int v87 = v92 + 1;
                        uint64_t v90 = v88;
                      }
                    }
                    uint64_t v88 = v90;
                    if (v87 >= (int)v90)
                    {
                      BOOL v94 = v89 > 0;
                      goto LABEL_123;
                    }
                  }
                }
                LODWORD(v92) = 0;
LABEL_122:
                BOOL v94 = 0;
LABEL_123:
                BOOL v95 = v84 - 1 > (int)v92 && v94;
                int v96 = v92 + v95;
                uint64_t v85 = v96;
                *(_DWORD *)(v83 + 16) = v96;
              }
              page_release(a1, v27, *(_DWORD *)(v83 + 16 * v85 + 28), 5u, 0);
            }
          }
        }
        else if (v118->i32[0] != 1684172850)
        {
          v118->i32[1] = *(_DWORD *)(a1 + 44);
        }
LABEL_128:
        if (v120)
        {
          free(v120);
          int v120 = 0;
          char v27 = v118;
        }
        if ((~*(_DWORD *)(a1 + 4) & 0x60) == 0)
        {
          uint64_t v20 = 22;
          goto LABEL_16;
        }
        int v28 = v27->i32[1];
        goto LABEL_28;
      }
      int v28 = 1 << *(_DWORD *)(a1 + 12);
LABEL_28:
      v26 += v28;
      if (*v117) {
        goto LABEL_15;
      }
    }
    uint64_t v20 = v29;
    if (v29 < 0) {
      *(_DWORD *)(a1 + 4) |= 4u;
    }
LABEL_16:
    if (v120) {
      free(v120);
    }
    free(v118);
    *(_DWORD *)(a1 + 4) &= ~v16;
    pthread_mutex_lock(v12);
    *(_DWORD *)(a1 + 788) = 0;
    uint64_t v21 = *(pthread_override_s **)(a1 + 760);
    *(void *)(a1 + 768) = 0;
    *(void *)(a1 + 760) = 0;
    char v22 = *(_DWORD *)(a1 + 780) != 0;
    *(unsigned char *)(a1 + 796) = 0;
    db_rwlock_wakeup((uint64_t)v12, v22, 0);
    pthread_mutex_unlock(v12);
    if (v21) {
      pthread_override_qos_class_end_np(v21);
    }
    if (a2) {
      goto LABEL_21;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 4) &= ~v16;
    pthread_mutex_lock(v12);
    *(_DWORD *)(a1 + 788) = 0;
    int v24 = *(pthread_override_s **)(a1 + 760);
    *(void *)(a1 + 768) = 0;
    *(void *)(a1 + 760) = 0;
    char v25 = *(_DWORD *)(a1 + 780) != 0;
    *(unsigned char *)(a1 + 796) = 0;
    db_rwlock_wakeup((uint64_t)v12, v25, 0);
    pthread_mutex_unlock(v12);
    if (v24) {
      pthread_override_qos_class_end_np(v24);
    }
    uint64_t v20 = 12;
    if (a2) {
LABEL_21:
    }
      *a2 = 0;
  }
  return v20;
}

uint64_t _db_page_info_cmp(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 > *a2;
  }
}

uint64_t db2_apply(uint64_t a1, uint64_t (*a2)(uint64_t, void, uint64_t), uint64_t a3)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  uint64_t v88 = 0;
  pthread_key_t v4 = __THREAD_SLOT_KEY;
  if (!__THREAD_SLOT_KEY)
  {
    makeThreadId();
    pthread_key_t v4 = __THREAD_SLOT_KEY;
  }
  uint64_t v5 = (char *)pthread_getspecific(v4);
  HIDWORD(v7) = qos_class_self() - 9;
  LODWORD(v7) = HIDWORD(v7);
  unsigned int v6 = v7 >> 2;
  if (v6 > 6) {
    signed int v8 = 0;
  }
  else {
    signed int v8 = dword_1BDA87810[v6];
  }
  int v9 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  if (*(void *)(a1 + 768) || *(_DWORD *)(a1 + 780) || *(unsigned char *)(a1 + 796)) {
    goto LABEL_9;
  }
  if (v8 <= 5)
  {
    if (*(void *)(a1 + 16 * v8 + 648))
    {
LABEL_9:
      db_rwlock_wait(a1 + 584, v8, 2);
      goto LABEL_10;
    }
    uint64_t v63 = v8 - 1;
    uint64_t v64 = (uint64_t *)(a1 + 16 * v8 + 664);
    while (v63 != 4)
    {
      uint64_t v65 = *v64;
      v64 += 2;
      uint64_t v66 = ++v63;
      if (v65)
      {
        if (v66 <= 4) {
          goto LABEL_9;
        }
        break;
      }
    }
  }
  *(void *)(a1 + 768) = pthread_self();
LABEL_10:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  if (v9)
  {
    int v74 = *__error();
    signed int v75 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 136315650;
      *(void *)&uint8_t buf[4] = "db2_apply";
      __int16 v90 = 1024;
      int v91 = 10302;
      __int16 v92 = 1024;
      int v93 = v9;
      _os_log_error_impl(&dword_1BD672000, v75, OS_LOG_TYPE_ERROR, "%s:%d: Lock failed with error %d", buf, 0x18u);
    }
    *__error() = v74;
    sdb2_die(a1, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 10302);
  }
  unint64_t v10 = v5 - 1;
  uint64_t v81 = v5;
  uint64_t v82 = (uint64_t)(v5 - 1);
  if (v5) {
    uint64_t v11 = CIOnThreadCleanUpPush((uint64_t)(v5 - 1), (uint64_t)db_write_unlock, a1 + 584);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v80 = v11;
  db2_flush_all_cache((void *)a1);
  uint64_t v12 = *(unsigned int *)(a1 + 36);
  uint64_t v13 = *(unsigned int *)(a1 + 40);
  unint64_t v14 = (int8x16_t *)malloc_type_valloc(*(unsigned int *)(a1 + 44), 0x961D2273uLL);
  if (v14)
  {
    signed int v15 = v14;
    uint64_t v83 = v5 - 1;
    int v16 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
    unint64_t v17 = setThreadIdAndInfo(-1, (long long *)sSDBExceptionCallbacks, a1, 0x40000000, v16);
    unsigned int v86 = HIDWORD(v17);
    unsigned int v87 = v17;
    unsigned int v84 = v19;
    unsigned int v85 = v18;
    uint64_t v20 = *(void *)&threadData[18 * v17 + 2];
    uint64_t v21 = v20 + 320 * HIDWORD(v17);
    *(unsigned char *)(v21 + 216) = 0;
    int v76 = *(_DWORD *)(v21 + 312);
    char v22 = *(void (**)(void))(v21 + 224);
    if (v22) {
      v22(*(void *)(v20 + 320 * HIDWORD(v17) + 288));
    }
    if (_setjmp((int *)v21))
    {
      int v23 = v16;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)stat buf = 0;
        _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
      }
      *(_DWORD *)(v21 + 312) = v76;
      unint64_t v10 = v5 - 1;
      if (__THREAD_SLOT_KEY)
      {
        int v24 = pthread_getspecific(__THREAD_SLOT_KEY);
        if (v24) {
          goto LABEL_22;
        }
      }
      else
      {
        makeThreadId();
        int v24 = pthread_getspecific(__THREAD_SLOT_KEY);
        if (v24)
        {
LABEL_22:
          char v25 = v24;
          if ((unint64_t)v24 < 0x801) {
            goto LABEL_23;
          }
        }
      }
      makeThreadId();
      char v25 = pthread_getspecific(__THREAD_SLOT_KEY);
LABEL_23:
      uint64_t v26 = (uint64_t)v25 - 1;
      char v27 = &threadData[18 * ((uint64_t)v25 - 1)];
      unsigned int v29 = v27[14];
      int v28 = v27 + 14;
      if (v29 > v84)
      {
        do
          CIOnThreadCleanUpPop(v26);
        while (*v28 > v84);
      }
      dropThreadId(v87, 1, v23);
      CICleanUpReset(v87, v85);
      uint64_t v30 = 0;
      int v31 = v88;
      if (!v88) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }
    int v77 = v16;
    off_t v44 = v13 + v12;
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
    *(unsigned char *)(a1 + 796) = 1;
    db_rwlock_wakeup(a1 + 584, 1, 1);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
    uint64_t v45 = 0;
    for (unsigned int i = v15; ; unsigned int i = v49)
    {
      uint64_t v47 = fd_pread(*(_DWORD **)(a1 + 848), i, *(unsigned int *)(a1 + 44), v44);
      if (v47 <= 0)
      {
        unint64_t v10 = v83;
        int v62 = v76;
        if (v47 < 0) {
          *(_DWORD *)(a1 + 4) |= 4u;
        }
        uint64_t v30 = v47;
        goto LABEL_77;
      }
      if (db2_page_uncompress_swap(a1, i, &v88, 0))
      {
        uint64_t v30 = v45;
LABEL_76:
        unint64_t v10 = v83;
        int v62 = v76;
LABEL_77:
        uint64_t v67 = *(void *)&threadData[18 * v87 + 2];
        uint64_t v68 = v67 + 320 * v86;
        *(_DWORD *)(v68 + 312) = v62;
        unint64_t v69 = *(void (**)(void))(v68 + 232);
        if (v69) {
          v69(*(void *)(v67 + 320 * v86 + 288));
        }
        dropThreadId(v87, 0, v77);
        int v31 = v88;
        if (!v88)
        {
LABEL_27:
          free(v15);
          int v32 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
          *(_DWORD *)(a1 + 788) = 0;
          os_log_type_t v33 = *(pthread_override_s **)(a1 + 760);
          *(void *)(a1 + 768) = 0;
          *(void *)(a1 + 760) = 0;
          char v34 = *(_DWORD *)(a1 + 780) != 0;
          *(unsigned char *)(a1 + 796) = 0;
          db_rwlock_wakeup(a1 + 584, v34, 0);
          pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
          if (v33) {
            pthread_override_qos_class_end_np(v33);
          }
          if (v32) {
            sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 10406);
          }
          uint64_t v35 = v30;
          uint64_t result = v30;
          if (!v81) {
            return result;
          }
LABEL_36:
          CIOnThreadCleanUpClearItem(v82, v80);
          uint64_t v40 = &threadData[18 * (void)v10];
          int v43 = v40[14];
          uint64_t v41 = v40 + 14;
          int v42 = v43;
          if (v80 + 1 == v43) {
            *uint64_t v41 = v42 - 1;
          }
          return v35;
        }
LABEL_26:
        free(v31);
        goto LABEL_27;
      }
      int v48 = (int8x16_t *)v88;
      if (!v88) {
        int v48 = i;
      }
      __int16 v49 = v48;
      if (v48->i32[0] != 1684172850) {
        break;
      }
      if ((v48->i8[12] & 0xF0) != 0) {
        goto LABEL_59;
      }
      uint64_t v50 = v48->i32[2];
      if ((int)v50 < 21) {
        goto LABEL_59;
      }
      uint64_t v51 = (unsigned __int32 *)((char *)v48->u32 + v50);
      uint64_t v52 = &v48[1].u32[1];
      uint64_t v53 = v45;
      while (1)
      {
        int v54 = v52;
        *(void *)stat buf = 0;
        _inflateDBO(a1, v52, (void **)buf, 0, 0, 0);
        BOOL v55 = *(void **)buf;
        if (*(_DWORD *)(*(void *)buf + 12) <= 0x2Fu)
        {
          uint64_t v70 = __si_assert_copy_extra_2445(0, -1);
          int v71 = v70;
          __int32 v72 = "";
          if (v70) {
            __int32 v72 = v70;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 13455, "dbo->used_bytes >= sizeof(external_db_obj)", v72);
          free(v71);
          if (__valid_fs(-1)) {
            uint64_t v73 = 2989;
          }
          else {
            uint64_t v73 = 3072;
          }
          *(_DWORD *)uint64_t v73 = -559038737;
          abort();
        }
        if ((*(unsigned char *)(*(void *)buf + 40) & 5) != 0)
        {
          free(*(void **)buf);
          uint64_t v56 = v53;
        }
        else
        {
          uint64_t v57 = a2(a1, *(void *)buf, a3);
          int v58 = v57;
          uint64_t v59 = v57;
          free(v55);
          uint64_t v56 = v59;
          if (!v58)
          {
            uint64_t v30 = 0xFFFFFFFFLL;
            goto LABEL_76;
          }
        }
        if (*v54 == -4) {
          break;
        }
        uint64_t v52 = (unsigned int *)((char *)v54 + *v54 + 4);
        uint64_t v53 = v56;
        uint64_t v60 = v56;
        if (v52 >= v51) {
          goto LABEL_60;
        }
      }
      uint64_t v60 = v56;
      int v61 = v88;
      if (v88) {
        goto LABEL_61;
      }
LABEL_41:
      v44 += v49->i32[1];
      uint64_t v45 = v60;
    }
    if (v15->i32[0] != 1684172850) {
      v15->i32[1] = *(_DWORD *)(a1 + 44);
    }
LABEL_59:
    uint64_t v60 = v45;
LABEL_60:
    int v61 = v88;
    if (v88)
    {
LABEL_61:
      free(v61);
      uint64_t v88 = 0;
      __int16 v49 = v15;
    }
    goto LABEL_41;
  }
  int v37 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  *(_DWORD *)(a1 + 788) = 0;
  __int32 v38 = *(pthread_override_s **)(a1 + 760);
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 760) = 0;
  char v39 = *(_DWORD *)(a1 + 780) != 0;
  *(unsigned char *)(a1 + 796) = 0;
  db_rwlock_wakeup(a1 + 584, v39, 0);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  if (v38) {
    pthread_override_qos_class_end_np(v38);
  }
  if (v37) {
    sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 10318);
  }
  uint64_t result = 12;
  uint64_t v35 = 12;
  if (v81) {
    goto LABEL_36;
  }
  return result;
}

uint64_t db2_get_vector_for_id(uint64_t a1, unint64_t a2, _DWORD *a3, _DWORD *a4)
{
  char v10 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  data_map_get_data_entry((uint64_t)&v7, a1, a2, &v10, 0);
  if (!v10) {
    return 0;
  }
  uint64_t result = v7;
  *a3 = v8;
  *a4 = v9;
  return result;
}

uint64_t db2_get_vector_for_id_locked(uint64_t a1, unint64_t a2, _DWORD *a3, _DWORD *a4)
{
  char v10 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  data_map_get_data_entry((uint64_t)&v7, a1, a2, &v10, 1);
  if (!v10) {
    return 0;
  }
  uint64_t result = v7;
  *a3 = v8;
  *a4 = v9;
  return result;
}

uint64_t grow_string_table_locked(uint64_t a1, int a2, const void *a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = a1 + 880;
  uint64_t v12 = *(void *)(a1 + 880 + 8 * a2);
  uint64_t v13 = a2;
  uint64_t v14 = table_extra_bytes_11691[v13];
  signed int v15 = *(_DWORD **)(v12 + 24);
  uint64_t v61 = 0;
  value_out = 0;
  unsigned int v16 = db_string_page_flags[v13];
  *(void *)stat buf = 0;
  if (_page_alloc_fetch(a1, (int8x16_t **)buf, 0x4000, (unsigned int *)&v61 + 1, (signed int *)&v61, v16)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v59 = a1;
  uint64_t v57 = v14;
  value = v15;
  uint64_t v56 = v11;
  uint64_t v58 = v12;
  free(*(void **)buf);
  unint64_t v17 = (char *)malloc_type_zone_valloc((malloc_zone_t *)string_table_zone, 0x4000uLL, 0xDBF475D4uLL);
  if (!v17)
  {
    unsigned int v22 = HIDWORD(v61);
    uint64_t v21 = a1;
    goto LABEL_6;
  }
  unsigned int v18 = v17;
  uint64_t v54 = a5;
  value_out = v17;
  unsigned int v19 = HIDWORD(v61);
  uint64_t v20 = v59;
  if (_page_fetch_with_fd(v59, &value_out, HIDWORD(v61), v61, 7, buf, 0xFFFFFFFFLL, 0))
  {
    free(v18);
    uint64_t v21 = v59;
    unsigned int v22 = v19;
LABEL_6:
    page_free(v21, v22, buf, 0);
    return 0xFFFFFFFFLL;
  }
  uint64_t v23 = a6;
  *((_DWORD *)v18 + 8) = a6;
  *((_DWORD *)v18 + 3) |= v16;
  *(void *)(v18 + 4) = 0x2000004000;
  *((_DWORD *)v18 + 5) = 0;
  __memcpy_chk();
  uint64_t v52 = (unsigned __int8 *)(v18 + 36);
  uint64_t v53 = (unsigned __int8 *)(v18 + 32);
  int v24 = &v18[v57 + 36];
  if (a2 > 1) {
    memcpy(v24, a3, a4);
  }
  else {
    strlcpy(v24, (const char *)a3, (0x2000 - v57));
  }
  char v25 = (const os_unfair_lock *)v58;
  if (a2 >= 2) {
    int v26 = a4;
  }
  else {
    int v26 = a4 + 1;
  }
  *((_DWORD *)v18 + 2) += v26 + v57 + 4;
  unsigned int v27 = v19;
  int v28 = page_release(v59, v18, v19, 5u, 0);
  if (dword_1E9FC90C0 >= 5)
  {
    int v43 = *__error();
    off_t v44 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v19;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = a2;
      _os_log_impl(&dword_1BD672000, v44, OS_LOG_TYPE_DEFAULT, "Push empty string page %d to disk (%d)", buf, 0xEu);
    }
    *__error() = v43;
    unsigned int v27 = v19;
    char v25 = (const os_unfair_lock *)v58;
    uint64_t v20 = v59;
    uint64_t v23 = a6;
  }
  os_unfair_lock_assert_owner(v25 + 16);
  if (v28 || grow_string_table_ptrs(v20, a2))
  {
LABEL_30:
    page_free(v20, v27, buf, 0);
    free(v18);
    return 0xFFFFFFFFLL;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(v56 + 8 * a2) + 68));
  unsigned int v29 = value;
  unsigned int v30 = value[5];
  if (v30)
  {
    do
    {
      unsigned int v31 = v30;
      unsigned int v29 = (_DWORD *)*((void *)v29 + 3);
      unsigned int v30 = v29[5];
    }
    while (v30);
  }
  else
  {
    unsigned int v31 = *(_DWORD *)(v20 + 4 * a2 + 48);
  }
  v29[5] = v27;
  *((void *)v29 + 3) = v18;
  int v32 = v29;
  int v33 = page_release(v20, v29, v31, 5u, 0);
  if (dword_1E9FC90C0 >= 5)
  {
    int v45 = *__error();
    int v46 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134218496;
      *(void *)&uint8_t buf[4] = v32;
      *(_WORD *)&unsigned char buf[12] = 1024;
      unsigned int v64 = v31;
      __int16 v65 = 1024;
      int v66 = a2;
      _os_log_impl(&dword_1BD672000, v46, OS_LOG_TYPE_DEFAULT, "Push old dirty string page %p %d to disk (%d)", buf, 0x18u);
    }
    *__error() = v45;
    uint64_t v20 = v59;
    uint64_t v23 = a6;
  }
  if (*(_DWORD *)v58 != v31 && *(_DWORD *)v58 != -1)
  {
    uint64_t v47 = __si_assert_copy_extra_2445(0, -1);
    int v48 = v47;
    __int16 v49 = "";
    if (v47) {
      __int16 v49 = v47;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 10967, "string_table->dirty_pgnum==cur_pgnum || (int)string_table->dirty_pgnum==-1", v49);
    goto LABEL_64;
  }
  uint64_t v35 = *(_DWORD **)(v58 + 8);
  if (v35 != v32 && v35)
  {
    uint64_t v50 = __si_assert_copy_extra_2445(0, -1);
    int v48 = v50;
    uint64_t v51 = "";
    if (v50) {
      uint64_t v51 = v50;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 10968, "string_table->dirty_page==cur_dnt || string_table->dirty_page==0", v51);
LABEL_64:
    free(v48);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  *(_DWORD *)uint64_t v58 = v19;
  *(void *)(v58 + 8) = v18;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(v56 + 8 * a2) + 68));
  if (v33)
  {
    v32[5] = 0;
    *((void *)v32 + 3) = 0;
    unsigned int v27 = v19;
    goto LABEL_30;
  }
  *(int32x2_t *)(v58 + 56) = vadd_s32(*(int32x2_t *)(v58 + 56), (int32x2_t)0x100000001);
  *(void *)(*(void *)(v58 + 32) + 8 * (v23 & 0x7FFFFFFF)) = v53;
  if (a2 > 1)
  {
    hash_field_insert(*(pthread_rwlock_t **)(v58 + 16), v52, v53);
    goto LABEL_48;
  }
  uint64_t v37 = 0;
  int v38 = 0;
  char v39 = 0;
  while (1)
  {
    if (v52[v37] == 22)
    {
      char v39 = 1;
      int v38 = v37;
      goto LABEL_36;
    }
    if (!v52[v37]) {
      break;
    }
LABEL_36:
    ++v37;
  }
  if (v39) {
    LODWORD(v37) = v38;
  }
  if (v37 >= 0xFF) {
    LOBYTE(v37) = -1;
  }
  *(unsigned char *)(*(void *)(v58 + 40) + (v23 & 0x7FFFFFFF)) = v37;
  if (v54) {
    uint64_t v40 = v18 + 36;
  }
  else {
    uint64_t v40 = 0;
  }
  hash_insert_extended(*(void *)(v58 + 16), &v18[v57 + 36], v40, (char *)v53);
LABEL_48:
  if (dword_1E9FC90C0 >= 5)
  {
    int v41 = *__error();
    int v42 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v19;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = a2;
      _os_log_impl(&dword_1BD672000, v42, OS_LOG_TYPE_DEFAULT, "New string table page %d (%d)", buf, 0xEu);
    }
    *__error() = v41;
    return a6;
  }
  return v23;
}

uint64_t grow_string_table(uint64_t a1, int a2, const void *a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  pthread_key_t v12 = __THREAD_SLOT_KEY;
  if (!__THREAD_SLOT_KEY)
  {
    makeThreadId();
    pthread_key_t v12 = __THREAD_SLOT_KEY;
  }
  uint64_t v13 = pthread_getspecific(v12);
  HIDWORD(v15) = qos_class_self() - 9;
  LODWORD(v15) = HIDWORD(v15);
  unsigned int v14 = v15 >> 2;
  if (v14 > 6) {
    signed int v16 = 0;
  }
  else {
    signed int v16 = dword_1BDA87810[v14];
  }
  int v17 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  if (*(void *)(a1 + 768) || *(_DWORD *)(a1 + 780) || *(unsigned char *)(a1 + 796)) {
    goto LABEL_9;
  }
  if (v16 <= 5)
  {
    if (*(void *)(a1 + 16 * v16 + 648))
    {
LABEL_9:
      db_rwlock_wait(a1 + 584, v16, 2);
      goto LABEL_10;
    }
    uint64_t v28 = v16 - 1;
    unsigned int v29 = (uint64_t *)(a1 + 16 * v16 + 664);
    while (v28 != 4)
    {
      uint64_t v30 = *v29;
      v29 += 2;
      ++v28;
      if (v30)
      {
        if (v28 <= 4) {
          goto LABEL_9;
        }
        break;
      }
    }
  }
  *(void *)(a1 + 768) = pthread_self();
LABEL_10:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  if (v17)
  {
    int v31 = *__error();
    int v32 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      int v33 = 136315650;
      char v34 = "grow_string_table";
      __int16 v35 = 1024;
      int v36 = 11012;
      __int16 v37 = 1024;
      int v38 = v17;
      _os_log_error_impl(&dword_1BD672000, v32, OS_LOG_TYPE_ERROR, "%s:%d: Lock failed with error %d", (uint8_t *)&v33, 0x18u);
    }
    *__error() = v31;
    sdb2_die(a1, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 11012);
  }
  if (v13) {
    unint64_t v18 = CIOnThreadCleanUpPush((uint64_t)v13 - 1, (uint64_t)db_write_unlock, a1 + 584);
  }
  else {
    unint64_t v18 = -1;
  }
  uint64_t v19 = grow_string_table_locked(a1, a2, a3, a4, a5, a6);
  int v20 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  *(_DWORD *)(a1 + 788) = 0;
  uint64_t v21 = *(pthread_override_s **)(a1 + 760);
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 760) = 0;
  char v22 = *(_DWORD *)(a1 + 780) != 0;
  *(unsigned char *)(a1 + 796) = 0;
  db_rwlock_wakeup(a1 + 584, v22, 0);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  if (v21) {
    pthread_override_qos_class_end_np(v21);
  }
  if (v20) {
    sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 11014);
  }
  if (v13)
  {
    CIOnThreadCleanUpClearItem((uint64_t)v13 - 1, v18);
    uint64_t v23 = &threadData[18 * ((uint64_t)v13 - 1)];
    int v26 = v23[14];
    int v24 = v23 + 14;
    int v25 = v26;
    if (v18 + 1 == v26) {
      *int v24 = v25 - 1;
    }
  }
  return v19;
}

uint64_t grow_string_table_ptrs(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 8 * a2 + 880);
  unint64_t v3 = *(void *)(v2 + 48);
  if (v3 > (*(_DWORD *)(v2 + 56) + 1)) {
    return 0;
  }
  uint64_t v7 = malloc_type_zone_malloc((malloc_zone_t *)string_table_zone, 16 * v3, 0x10040436913F5uLL);
  if (v7)
  {
    uint64_t v8 = v7;
    size_t v9 = 2 * v3;
    if (a2 > 1)
    {
LABEL_7:
      memcpy(v8, *(const void **)(v2 + 32), 8 * *(void *)(v2 + 48));
      *(void *)(v2 + 32) = v8;
      (*(void (**)(void))(*(void *)(a1 + 808) + 16))();
      uint64_t result = 0;
      *(void *)(v2 + 48) = v9;
      return result;
    }
    char v10 = malloc_type_zone_malloc((malloc_zone_t *)string_table_zone, v9, 0xC66B135FuLL);
    if (v10)
    {
      uint64_t v11 = v10;
      memcpy(v10, *(const void **)(v2 + 40), *(void *)(v2 + 48));
      *(void *)(v2 + 40) = v11;
      (*(void (**)(void))(*(void *)(a1 + 808) + 16))();
      goto LABEL_7;
    }
    free(v8);
    *(void *)(v2 + 32) = 0;
  }
  return 0xFFFFFFFFLL;
}

BOOL _page_obj_exists_by_oid_and_type(uint64_t a1, int64_t a2, unsigned int a3, unsigned int a4, size_t __nbyte)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v33 = 0;
  value_out = 0;
  BOOL v9 = 0;
  if (_page_fetch_with_fd(a1, &value_out, a4, __nbyte, 0, buf, 0xFFFFFFFFLL, 0)) {
    return v9;
  }
  int v10 = *((_DWORD *)value_out + 3);
  if ((v10 & 0xF0) != 0)
  {
    int v24 = *__error();
    int v25 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 136315650;
      *(void *)&uint8_t buf[4] = "_page_obj_exists_by_oid_and_type";
      __int16 v36 = 1024;
      int v37 = 5596;
      __int16 v38 = 1024;
      unsigned int v39 = a4;
      _os_log_error_impl(&dword_1BD672000, v25, OS_LOG_TYPE_ERROR, "%s:%d: page_delete_obj: ERR: tried to read attr name table data! pgnum 0x%x\n", buf, 0x18u);
    }
    *__error() = v24;
    int v26 = __si_assert_copy_extra_2445(0, -1);
    unsigned int v27 = v26;
    uint64_t v28 = "";
    if (v26) {
      uint64_t v28 = v26;
    }
    __message_assert("%s:%u: Unexpected code path %s ", "sdb2.c", 5597, v28);
    goto LABEL_56;
  }
  if ((v10 & 8) != 0)
  {
    int v29 = *__error();
    uint64_t v30 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 136315650;
      *(void *)&uint8_t buf[4] = "_page_obj_exists_by_oid_and_type";
      __int16 v36 = 1024;
      int v37 = 5602;
      __int16 v38 = 1024;
      unsigned int v39 = a4;
      _os_log_error_impl(&dword_1BD672000, v30, OS_LOG_TYPE_ERROR, "%s:%d: page_delete_obj: ERR: page is still compressed! pgnum 0x%x\n", buf, 0x18u);
    }
    *__error() = v29;
    int v31 = __si_assert_copy_extra_2445(0, -1);
    unsigned int v27 = v31;
    int v32 = "";
    if (v31) {
      int v32 = v31;
    }
    __message_assert("%s:%u: Unexpected code path %s ", "sdb2.c", 5603, v32);
LABEL_56:
    free(v27);
    goto LABEL_43;
  }
  *(void *)stat buf = 0;
  if (find_slot_for_oid_and_type(a1, (uint64_t)value_out, a2, a3, (unint64_t *)buf, &v33, 1) == 2)
  {
    page_release(a1, value_out, a4, 0, 0);
    return 0;
  }
  uint64_t v11 = *(void *)buf + 4;
  unint64_t v12 = *(unsigned __int8 *)(*(void *)buf + 4);
  if (*(char *)(*(void *)buf + 4) < 0)
  {
    unsigned int v14 = *(unsigned __int8 *)(*(void *)buf + 4);
    if (v14 > 0xBF)
    {
      if (v14 > 0xDF)
      {
        if (v14 > 0xEF)
        {
          if (v14 > 0xF7)
          {
            if (v14 > 0xFB)
            {
              if (v14 > 0xFD)
              {
                if (v14 == 255)
                {
                  unint64_t v12 = *(void *)(*(void *)buf + 5);
                  uint64_t v13 = 9;
                }
                else
                {
                  unint64_t v12 = ((unint64_t)*(unsigned __int8 *)(*(void *)buf + 5) << 48) | ((unint64_t)*(unsigned __int8 *)(*(void *)buf + 6) << 40) | ((unint64_t)*(unsigned __int8 *)(*(void *)buf + 7) << 32) | ((unint64_t)*(unsigned __int8 *)(*(void *)buf + 8) << 24) | ((unint64_t)*(unsigned __int8 *)(*(void *)buf + 9) << 16) | ((unint64_t)*(unsigned __int8 *)(*(void *)buf + 10) << 8) | *(unsigned __int8 *)(*(void *)buf + 11);
                  uint64_t v13 = 8;
                }
              }
              else
              {
                unint64_t v12 = ((v12 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(*(void *)buf + 5) << 40) | ((unint64_t)*(unsigned __int8 *)(*(void *)buf + 6) << 32) | ((unint64_t)*(unsigned __int8 *)(*(void *)buf + 7) << 24) | ((unint64_t)*(unsigned __int8 *)(*(void *)buf + 8) << 16) | ((unint64_t)*(unsigned __int8 *)(*(void *)buf + 9) << 8) | *(unsigned __int8 *)(*(void *)buf + 10);
                uint64_t v13 = 7;
              }
            }
            else
            {
              unint64_t v12 = ((v12 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(*(void *)buf + 5) << 32) | ((unint64_t)*(unsigned __int8 *)(*(void *)buf + 6) << 24) | ((unint64_t)*(unsigned __int8 *)(*(void *)buf + 7) << 16) | ((unint64_t)*(unsigned __int8 *)(*(void *)buf + 8) << 8) | *(unsigned __int8 *)(*(void *)buf + 9);
              uint64_t v13 = 6;
            }
          }
          else
          {
            unint64_t v12 = ((v12 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(*(void *)buf + 5) << 24) | ((unint64_t)*(unsigned __int8 *)(*(void *)buf + 6) << 16) | ((unint64_t)*(unsigned __int8 *)(*(void *)buf + 7) << 8) | *(unsigned __int8 *)(*(void *)buf + 8);
            uint64_t v13 = 5;
          }
        }
        else
        {
          unint64_t v12 = ((v12 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(*(void *)buf + 5) << 16) | ((unint64_t)*(unsigned __int8 *)(*(void *)buf + 6) << 8) | *(unsigned __int8 *)(*(void *)buf + 7);
          uint64_t v13 = 4;
        }
      }
      else
      {
        unint64_t v12 = ((v12 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(*(void *)buf + 5) << 8) | *(unsigned __int8 *)(*(void *)buf + 6);
        uint64_t v13 = 3;
      }
    }
    else
    {
      unint64_t v12 = *(unsigned __int8 *)(*(void *)buf + 5) | ((v12 & 0x3F) << 8);
      uint64_t v13 = 2;
    }
  }
  else
  {
    uint64_t v13 = 1;
  }
  unsigned int v15 = *(unsigned __int8 *)(v11 + v13);
  if ((*(char *)(v11 + v13) & 0x80000000) == 0) {
    goto LABEL_29;
  }
  if (v15 >= 0xC0)
  {
    if (v15 < 0xE0)
    {
      uint64_t v16 = v13 + 2;
      goto LABEL_28;
    }
    int v20 = __si_assert_copy_extra_2445(0, -1);
    uint64_t v21 = v20;
    char v22 = "";
    if (v20) {
      char v22 = v20;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v22);
    free(v21);
    if (!__valid_fs(-1))
    {
      uint64_t v23 = 3072;
LABEL_45:
      *(_DWORD *)uint64_t v23 = -559038737;
      abort();
    }
LABEL_43:
    uint64_t v23 = 2989;
    goto LABEL_45;
  }
  uint64_t v16 = v13 + 1;
LABEL_28:
  unsigned int v15 = *(unsigned __int8 *)(v11 + v16);
LABEL_29:
  BOOL v9 = *(void *)buf < (unint64_t)value_out + *((int *)value_out + 2)
    && (*(_DWORD *)(a1 + 804) & (v15 >> 5) & 1) == a3
    && v12 == a2;
  page_release(a1, value_out, a4, 0, 0);
  return v9;
}

void subiter_fetch_next_page(uint64_t a1, int a2, int a3, char a4)
{
  if (a2 != -1)
  {
    uint64_t v11 = v4;
    uint64_t v12 = v5;
    unsigned int v6 = *(NSObject **)(a1 + 88);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __subiter_fetch_next_page_block_invoke;
    block[3] = &__block_descriptor_tmp_219_12227;
    block[4] = a1;
    int v8 = a2;
    int v9 = a3;
    char v10 = a4;
    dispatch_async(v6, block);
  }
}

uint64_t obj_iter_prefetch_page(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int v6 = *__error();
  uint64_t v7 = _SILogForLogForCategory(1);
  os_log_type_t v8 = 2 * (dword_1E9FC90A8 < 4);
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = *(void *)(a1 + 24);
    *(_DWORD *)stat buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = a2;
    LOWORD(v22) = 1024;
    *(_DWORD *)((char *)&v22 + 2) = a3;
    HIWORD(v22) = 2048;
    uint64_t v23 = v9;
    _os_log_impl(&dword_1BD672000, v7, v8, "Prefetch page %d(%d) for db %p", buf, 0x18u);
  }
  uint64_t result = (uint64_t)__error();
  *(_DWORD *)uint64_t result = v6;
  if (a2)
  {
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t result = db_cache_contains(*(void *)(v11 + 928), a2, 1);
    if ((result & 1) == 0)
    {
      uint64_t v22 = 0;
      unint64_t v12 = (unint64_t)a2 << *(_DWORD *)(v11 + 12);
      uint64_t v20 = 0;
      *(void *)stat buf = v12;
      uint64_t v22 = (a3 << 12);
      uint64_t v13 = *(_DWORD **)(v11 + 848);
      int v14 = _fd_acquire_fd((uint64_t)v13, &v20);
      do
      {
        int v15 = fcntl(v14, 44, buf);
        uint64_t v16 = g_prot_error_callback;
        if (v15 != -1 || g_prot_error_callback == 0) {
          break;
        }
        uint64_t v18 = v13[10];
        uint64_t v19 = __error();
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v16 + 16))(v16, v18, *v19, 12) & 1) != 0);
      return (uint64_t)_fd_release_fd(v13, v14, 0, v20);
    }
  }
  return result;
}

uint64_t __subiter_fetch_next_page_block_invoke(uint64_t a1)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  makeThreadId();
  int v2 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v3 = setThreadIdAndInfo(*(_DWORD *)(**(void **)(a1 + 32) + 4), sFdExceptionCallbacks, 0, 1, v2);
  unsigned int v81 = HIDWORD(v3);
  unsigned int v82 = v3;
  unsigned int v79 = v5;
  unsigned int v80 = v4;
  uint64_t v6 = *(void *)&threadData[18 * v3 + 2];
  uint64_t v7 = v6 + 320 * HIDWORD(v3);
  *(unsigned char *)(v7 + 216) = 0;
  int v8 = *(_DWORD *)(v7 + 312);
  uint64_t v9 = *(void (**)(void))(v7 + 224);
  if (v9) {
    v9(*(void *)(v6 + 320 * HIDWORD(v3) + 288));
  }
  unsigned int v78 = v82;
  unsigned int v77 = v81;
  unsigned int v76 = v80;
  unsigned int v75 = v79;
  if (_setjmp((int *)v7))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)stat buf = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
    }
    *(_DWORD *)(v7 + 312) = v8;
    unsigned int v10 = v75;
    if (__THREAD_SLOT_KEY)
    {
      uint64_t v11 = pthread_getspecific(__THREAD_SLOT_KEY);
      if (!v11) {
        goto LABEL_43;
      }
    }
    else
    {
      makeThreadId();
      uint64_t v11 = pthread_getspecific(__THREAD_SLOT_KEY);
      if (!v11) {
        goto LABEL_43;
      }
    }
    unint64_t v12 = v11;
    if ((unint64_t)v11 < 0x801)
    {
LABEL_9:
      uint64_t v13 = (uint64_t)v12 - 1;
      int v14 = &threadData[18 * ((uint64_t)v12 - 1)];
      unsigned int v16 = v14[14];
      int v15 = v14 + 14;
      if (v16 > v10)
      {
        do
          CIOnThreadCleanUpPop(v13);
        while (*v15 > v10);
      }
      dropThreadId(v78, 1, v2);
      return CICleanUpReset(v78, v76);
    }
LABEL_43:
    makeThreadId();
    unint64_t v12 = pthread_getspecific(__THREAD_SLOT_KEY);
    goto LABEL_9;
  }
  int v18 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v19 = setThreadIdAndInfo(-1, (long long *)sSDBExceptionCallbacks, *(void *)(**(void **)(a1 + 32) + 24), 0x40000000, v18);
  unsigned int v73 = HIDWORD(v19);
  unsigned int v74 = v19;
  unsigned int v71 = v21;
  unsigned int v72 = v20;
  uint64_t v22 = *(void *)&threadData[18 * v19 + 2];
  uint64_t v23 = v22 + 320 * HIDWORD(v19);
  *(unsigned char *)(v23 + 216) = 0;
  int v24 = *(_DWORD *)(v23 + 312);
  int v25 = *(void (**)(void))(v23 + 224);
  if (v25) {
    v25(*(void *)(v22 + 320 * HIDWORD(v19) + 288));
  }
  unsigned int v70 = v74;
  unsigned int v69 = v73;
  unsigned int v68 = v72;
  unsigned int v67 = v71;
  uint64_t v26 = _setjmp((int *)v23);
  if (!v26)
  {
    uint64_t v34 = *(void *)(a1 + 32);
    __int16 v35 = *(_DWORD **)(v34 + 32);
    if (v35)
    {
      unsigned int v36 = *(_DWORD *)(v34 + 44);
      if (v36 == *(_DWORD *)(a1 + 40)) {
        goto LABEL_36;
      }
      uint64_t v26 = page_release(*(void *)(*(void *)v34 + 24), v35, v36, 0x18u, 0);
      *(_DWORD *)(v34 + 44) = -1;
      *(void *)(v34 + 32) = 0;
      if (*(void *)(*(void *)(a1 + 32) + 32))
      {
        uint64_t v54 = __si_assert_copy_extra_2445(0, -1);
        BOOL v55 = v54;
        uint64_t v56 = "";
        if (v54) {
          uint64_t v56 = v54;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 12472, "iter->next_dbp == 0", v56);
        free(v55);
        int v57 = -1;
        goto LABEL_56;
      }
    }
    *(void *)stat buf = 0;
    int v65 = 0;
    MEMORY[0x1F4188790](v26);
    __int16 v38 = &v64[-v37];
    bzero(&v64[-v37], v37);
    uint64_t v39 = *(void *)(a1 + 32);
    uint64_t v40 = (int *)(v39 + 120);
    *(void *)(v39 + 192) = v38;
    subiter_attempt_prefetch(*(void *)(a1 + 32), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44));
    uint64_t v41 = **(void **)(a1 + 32);
    if (*(unsigned char *)(v41 + 77)) {
      int v42 = 57;
    }
    else {
      int v42 = 25;
    }
    if (!_page_fetch_with_fd(*(void *)(v41 + 24), (void **)buf, *(_DWORD *)(a1 + 40), (*(_DWORD *)(a1 + 44) << 12), v42 | (*(unsigned __int8 *)(a1 + 48) << 13), &v65, *(unsigned int *)(v41 + 4), v40))
    {
      uint64_t v43 = *(void *)buf;
      if (*(void *)buf)
      {
        int v44 = *(_DWORD *)(*(void *)buf + 12);
        if ((v44 & 8) != 0)
        {
          uint64_t v58 = __si_assert_copy_extra_2445(0, -1);
          uint64_t v59 = v58;
          uint64_t v60 = "";
          if (v58) {
            uint64_t v60 = v58;
          }
          __message_assert("%s:%u: failed assertion '%s' %s obj_iter_fetch_page: ERR: page came back compressed! pgnum 0x%x\n", "sdb2.c", 12491, "(dbp->flags & 0x00000008)==0", v60, *(_DWORD *)(a1 + 40));
          free(v59);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        if ((v44 & 0xF0) == 0)
        {
          uint64_t v45 = *(void *)(a1 + 32);
          if (v65) {
            ++*(void *)(v45 + 104);
          }
          *(_DWORD *)(v45 + 44) = *(_DWORD *)(a1 + 40);
          *(void *)(v45 + 32) = v43;
          goto LABEL_36;
        }
        uint64_t v61 = __si_assert_copy_extra_2445(0, *(_DWORD *)(**(void **)(a1 + 32) + 4));
        int v62 = v61;
        uint64_t v63 = "";
        if (v61) {
          uint64_t v63 = v61;
        }
        __message_assert("%s:%u: failed assertion '%s' %s obj_iter_fetch_page: ERR: tried to read attr name table data! pgnum 0x%x, flags 0x%x\n", "sdb2.c", 12494, "(dbp->flags & 0x000000f0)==0", v63, *(_DWORD *)(a1 + 40), *(_DWORD *)(*(void *)buf + 12));
        free(v62);
        int v57 = *(_DWORD *)(**(void **)(a1 + 32) + 4);
LABEL_56:
        if (__valid_fs(v57))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
    }
LABEL_36:
    uint64_t v46 = *(void *)&threadData[18 * v70 + 2];
    unsigned int v47 = v69;
    uint64_t v48 = v46 + 320 * v69;
    *(_DWORD *)(v48 + 312) = v24;
    __int16 v49 = *(void (**)(void))(v48 + 232);
    if (v49) {
      v49(*(void *)(v46 + 320 * v47 + 288));
    }
    dropThreadId(v70, 0, v18);
    goto LABEL_39;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)stat buf = 0;
    _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
  }
  *(_DWORD *)(v23 + 312) = v24;
  unsigned int v27 = v67;
  if (__THREAD_SLOT_KEY)
  {
    uint64_t v28 = pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v28)
    {
LABEL_45:
      makeThreadId();
      int v29 = pthread_getspecific(__THREAD_SLOT_KEY);
      goto LABEL_20;
    }
  }
  else
  {
    makeThreadId();
    uint64_t v28 = pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v28) {
      goto LABEL_45;
    }
  }
  int v29 = v28;
  if ((unint64_t)v28 >= 0x801) {
    goto LABEL_45;
  }
LABEL_20:
  uint64_t v30 = (uint64_t)v29 - 1;
  int v31 = &threadData[18 * ((uint64_t)v29 - 1)];
  unsigned int v33 = v31[14];
  int v32 = v31 + 14;
  if (v33 > v27)
  {
    do
      CIOnThreadCleanUpPop(v30);
    while (*v32 > v27);
  }
  dropThreadId(v70, 1, v18);
  CICleanUpReset(v70, v68);
LABEL_39:
  uint64_t v50 = *(void *)&threadData[18 * v78 + 2];
  unsigned int v51 = v77;
  uint64_t v52 = v50 + 320 * v77;
  *(_DWORD *)(v52 + 312) = v8;
  uint64_t v53 = *(void (**)(void))(v52 + 232);
  if (v53) {
    v53(*(void *)(v50 + 320 * v51 + 288));
  }
  return dropThreadId(v78, 0, v2);
}

uint64_t db2_obj_insert_from_prototype(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t result = db2_store_obj_preamble(*(_DWORD *)(a1 + 804), (uint64_t)a3, 0);
  if (!result)
  {
    uint64_t result = db2_store_obj_inner(a1, (uint64_t)a3, 0);
    if (!result)
    {
      uint64_t v7 = malloc_type_malloc((a3[3] + 512), 0xCB63F5D4uLL);
      int v8 = v7;
      if (v7)
      {
        memcpy(v7, a3, a3[3]);
        v8[2] = a3[3] + 512;
      }
      uint64_t result = 0;
      *a2 = v8;
    }
  }
  return result;
}

uint64_t __db2_get_offsets_for_fields_block_invoke(uint64_t a1, int a2, _DWORD *a3)
{
  return (a2 - *a3);
}

int *db2_garbage_collect_strings(uint64_t a1, char a2, _DWORD *a3)
{
  if ((*(_DWORD *)(a1 + 804) & 0x14) == 0 || (*(_DWORD *)(a1 + 804) & 8) != 0) {
    return 0;
  }
  *(void *)stat buf = 0;
  unsigned int v77 = buf;
  uint64_t v78 = 0x2000000000;
  int v79 = 0;
  uint64_t v71 = MEMORY[0x1E4F143A8];
  uint64_t v72 = 0x40000000;
  uint64_t v73 = (uint64_t)__data_maps_garbage_collect_setup_block_invoke;
  unsigned int v74 = &unk_1E6345D48;
  unsigned int v75 = buf;
  if (!__data_maps_garbage_collect_setup_block_invoke((uint64_t)&v71, *(void *)(a1 + 880))
    && !((unsigned int (*)(uint64_t *, void, uint64_t))v73)(&v71, *(void *)(a1 + 888), 1)
    && !((unsigned int (*)(uint64_t *, void, uint64_t))v73)(&v71, *(void *)(a1 + 896), 2))
  {
    ((void (*)(uint64_t *, void, uint64_t))v73)(&v71, *(void *)(a1 + 904), 3);
  }
  uint64_t v7 = *((unsigned int *)v77 + 6);
  int v8 = v7 == 4 ? 0 : 22;
  uint64_t v66 = MEMORY[0x1E4F143A8];
  uint64_t v67 = 0x40000000;
  uint64_t v68 = (uint64_t)__data_maps_garbage_collect_setup_block_invoke_2;
  unsigned int v69 = &__block_descriptor_tmp_11_7644;
  int v70 = v8;
  uint64_t v9 = v7;
  do
  {
    if ((int)v9 < 1) {
      break;
    }
    uint64_t v10 = v9 - 1;
    int v11 = ((uint64_t (*)(uint64_t *, void, uint64_t))v68)(&v66, *(void *)(a1 + 880 + 8 * (v9 - 1)), v9 - 1);
    uint64_t v9 = v10;
  }
  while (!v11);
  _Block_object_dispose(buf, 8);
  if (v7 != 4) {
    return 0;
  }
  unint64_t v12 = malloc_type_malloc(4uLL, 0x100004052888210uLL);
  *unint64_t v12 = 0;
  char v63 = 0;
  uint64_t v13 = (int *)malloc_type_calloc(1uLL, 0x41E8uLL, 0x10B2040BCF30452uLL);
  uint64_t v71 = 0;
  uint64_t v72 = (uint64_t)&v71;
  uint64_t v73 = 0x2000000000;
  LOBYTE(v74) = 0;
  uint64_t v66 = 0;
  uint64_t v67 = (uint64_t)&v66;
  LODWORD(v69) = 0;
  uint64_t v68 = 0x2000000000;
  int v14 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v15 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v14);
  unsigned int v61 = HIDWORD(v15);
  unsigned int v62 = v15;
  unint64_t v60 = __PAIR64__(v16, v17);
  uint64_t v18 = *(void *)&threadData[18 * v15 + 2];
  uint64_t v19 = v18 + 320 * HIDWORD(v15);
  int v44 = *(_DWORD *)(v19 + 312);
  unsigned int v20 = *(void (**)(void))(v19 + 224);
  if (v20) {
    v20(*(void *)(v18 + 320 * HIDWORD(v15) + 288));
  }
  unsigned int v59 = v62;
  unsigned int v58 = v61;
  unint64_t v57 = v60;
  if (!_setjmp((int *)v19))
  {
    uint64_t v56 = 1;
    uint64_t v28 = db_obj_iter_create_with_filter((int *)a1, 1uLL, (uint64_t)&v56, 0, 0, 0, 0, 0, 0);
    int v32 = db_obj_iter_next((uint64_t)v28, &v55, 1, v29, v30, v31);
    if (v32)
    {
      uint64_t v45 = v13;
      uint64_t v46 = v12;
      int v65 = 0;
      uint64_t v33 = (uint64_t)v32;
      *(void *)stat buf = 0;
      uint64_t v64 = 0;
      while (db_next_field((_DWORD *)a1, v33, 0, &v65, (uint64_t *)buf, &v64) == 35)
      {
        if (*(_WORD *)v64 == 11 && (*(_WORD *)(v64 + 2) & 0x10) != 0)
        {
          unint64_t v34 = *(unsigned int *)(v64 + 8);
          if (v34 >= 4)
          {
            unint64_t v35 = v34 >> 2;
            unsigned int v36 = (int *)(v64 + 13);
            do
            {
              int v37 = *v36++;
              db_get_string_for_id((int *)a1, v37);
              --v35;
            }
            while (v35);
          }
        }
      }
      uint64_t v13 = v45;
      unint64_t v12 = v46;
    }
    db_obj_iter_release(v28);
    if (!db2_clear_docids(a1, v12, a3, 0, (unsigned int (*)(_DWORD *, uint64_t))_db2_validate_strings_for_dbo, a1))
    {
      v47[0] = MEMORY[0x1E4F143A8];
      v47[1] = 0x40000000;
      uint64_t v48 = __db2_garbage_collect_strings_block_invoke;
      __int16 v49 = &unk_1E6348320;
      char v54 = a2;
      uint64_t v50 = &v66;
      unsigned int v51 = &v71;
      uint64_t v52 = v13;
      uint64_t v53 = a1;
      if (!__db2_garbage_collect_strings_block_invoke((uint64_t)v47, *(void *)(a1 + 880), 0)
        && !v48((uint64_t)v47, *(void *)(a1 + 888), 1)
        && !v48((uint64_t)v47, *(void *)(a1 + 896), 2))
      {
        v48((uint64_t)v47, *(void *)(a1 + 904), 3);
      }
    }
    char v63 = 1;
    uint64_t v38 = *(void *)&threadData[18 * v59 + 2];
    unsigned int v39 = v58;
    uint64_t v40 = v38 + 320 * v58;
    *(_DWORD *)(v40 + 312) = v44;
    uint64_t v41 = *(void (**)(void))(v40 + 232);
    if (v41) {
      v41(*(void *)(v38 + 320 * v39 + 288));
    }
    dropThreadId(v59, 0, v14);
    if (!v63) {
      goto LABEL_50;
    }
    goto LABEL_48;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)stat buf = 0;
    _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
  }
  *(_DWORD *)(v19 + 312) = v44;
  if (__THREAD_SLOT_KEY)
  {
    unsigned int v21 = pthread_getspecific(__THREAD_SLOT_KEY);
    if (v21) {
      goto LABEL_24;
    }
  }
  else
  {
    makeThreadId();
    unsigned int v21 = pthread_getspecific(__THREAD_SLOT_KEY);
    if (v21)
    {
LABEL_24:
      uint64_t v22 = v21;
      if ((unint64_t)v21 < 0x801) {
        goto LABEL_25;
      }
    }
  }
  makeThreadId();
  uint64_t v22 = pthread_getspecific(__THREAD_SLOT_KEY);
LABEL_25:
  uint64_t v23 = (uint64_t)v22 - 1;
  int v24 = &threadData[18 * ((uint64_t)v22 - 1)];
  unsigned int v26 = v24[14];
  int v25 = v24 + 14;
  if (v26 > v57)
  {
    do
      CIOnThreadCleanUpPop(v23);
    while (*v25 > v57);
  }
  dropThreadId(v59, 1, v14);
  CICleanUpReset(v59, HIDWORD(v57));
  if (!v63) {
    goto LABEL_50;
  }
LABEL_48:
  if (*(_DWORD *)(v67 + 24) == 4 && *(unsigned char *)(v72 + 24)) {
    goto LABEL_54;
  }
LABEL_50:
  if (v13)
  {
    if ((*(unsigned char *)(a1 + 804) & 0x14) != 0) {
      data_maps_garbage_compact_collect_commit(a1 + 880, v13, 1);
    }
    free(v13);
    uint64_t v13 = 0;
LABEL_54:
    if (!*v12) {
      goto LABEL_59;
    }
LABEL_57:
    *(_DWORD *)(a1 + 4) &= ~0x20u;
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
    *(_DWORD *)(a1 + 788) = 0;
    int v42 = *(pthread_override_s **)(a1 + 760);
    *(void *)(a1 + 768) = 0;
    *(void *)(a1 + 760) = 0;
    char v43 = *(_DWORD *)(a1 + 780) != 0;
    *(unsigned char *)(a1 + 796) = 0;
    db_rwlock_wakeup(a1 + 584, v43, 0);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
    if (v42) {
      pthread_override_qos_class_end_np(v42);
    }
    goto LABEL_59;
  }
  if (*v12) {
    goto LABEL_57;
  }
LABEL_59:
  free(v12);
  _Block_object_dispose(&v66, 8);
  _Block_object_dispose(&v71, 8);
  return v13;
}

uint64_t __db2_garbage_collect_strings_block_invoke(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v181 = *MEMORY[0x1E4F143B8];
  if (a3) {
    unint64_t v5 = 1;
  }
  else {
    unint64_t v5 = 30;
  }
  if (*(unsigned char *)(a1 + 64)) {
    char v6 = (8 * (a3 < 2)) | 6;
  }
  else {
    char v6 = 8 * (a3 < 2);
  }
  if (!a2) {
    goto LABEL_84;
  }
  int v8 = *(_DWORD *)(a2 + 216);
  if (v8 == -270471200)
  {
    if (*(void *)(a2 + 448))
    {
      _data_map_ext_wrlock(a2);
      _data_map_ext_unlock(a2);
    }
    goto LABEL_84;
  }
  uint64_t v9 = *(void *)(a1 + 48);
  if (v8 == 1684300900)
  {
    if (!*(void *)(a2 + 4560)) {
      goto LABEL_84;
    }
    _data_map64_wrlock(a2);
    uint64_t v16 = *(void *)(a2 + 4504);
    if (v16 - 1 <= v5) {
      goto LABEL_76;
    }
    char v140 = v6;
    v183.length = v16 - v5;
    uint64_t v142 = *(void *)(a2 + 4560);
    v183.location = v5;
    unint64_t FirstIndexOfBit = CFBitVectorGetFirstIndexOfBit(*(CFBitVectorRef *)(v142 + 16), v183, 0);
    uint64_t v14 = 0;
    if (FirstIndexOfBit < v5
      || (unint64_t v18 = FirstIndexOfBit, v14 = 0, FirstIndexOfBit > v16 - 1)
      || FirstIndexOfBit >= *(void *)(a2 + 4504))
    {
LABEL_77:
      _data_map64_unlock(a2);
      if (!v14) {
        goto LABEL_84;
      }
      return v14;
    }
    int v130 = (unsigned char *)(a2 + 4569);
    uint64_t v132 = a2 + 272;
    uint64_t v19 = 16 * FirstIndexOfBit;
    uint64_t v20 = v142;
    while (1)
    {
      if ((v18 & 0x8000000000000000) != 0)
      {
        unsigned int v61 = __si_assert_copy_extra_329();
        unsigned int v62 = v61;
        char v63 = "";
        if (v61) {
          char v63 = v61;
        }
        __message_assert(v61, "bit_vector.h", 96, "bitIndex >= 0", v63);
        free(v62);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      if (*(void *)v20 > (int64_t)v18 && CFBitVectorGetBitAtIndex(*(CFBitVectorRef *)(v20 + 16), v18)) {
        goto LABEL_26;
      }
      if (*(void *)(a2 + 4504) <= v18)
      {
        long long v179 = 0u;
        long long v180 = 0u;
        long long v177 = 0u;
        long long v178 = 0u;
        long long v175 = 0u;
        long long v176 = 0u;
        long long v173 = 0u;
        long long v174 = 0u;
        long long v171 = 0u;
        long long v172 = 0u;
        long long v169 = 0u;
        long long v170 = 0u;
        long long v168 = 0u;
        memset(v167, 0, sizeof(v167));
        int v29 = *__error();
        double v30 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          uint64_t v134 = *(void *)(a2 + 4504);
          int v32 = fd_name(*(void *)(a2 + 240), (char *)v167, 0x100uLL);
          *(_DWORD *)stat buf = 136316418;
          *(void *)&uint8_t buf[4] = "_data_map64_get_offset_entry";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&unsigned char buf[14] = 362;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(void *)&unsigned char buf[20] = v18;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = v134;
          *(_WORD *)&buf[38] = 2048;
          *(void *)&buf[40] = a2;
          *(_WORD *)&buf[48] = 2080;
          *(void *)&buf[50] = v32;
          _os_log_error_impl(&dword_1BD672000, v30, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %lld max %lld %p %s", buf, 0x3Au);
        }
        *__error() = v29;
        goto LABEL_41;
      }
      uint64_t v21 = *(void *)(a2 + 4448);
      if (!v21) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v21 + v19);
      if (v22 < 2) {
        goto LABEL_26;
      }
      *(void *)v146 = 0;
      *(void *)&v146[8] = 0;
      LOBYTE(v143) = 0;
      unint64_t v23 = *(void *)(a2 + 288);
      if (v23 > v22) {
        break;
      }
      long long v179 = 0u;
      long long v180 = 0u;
      long long v177 = 0u;
      long long v178 = 0u;
      long long v175 = 0u;
      long long v176 = 0u;
      long long v173 = 0u;
      long long v174 = 0u;
      long long v171 = 0u;
      long long v172 = 0u;
      long long v169 = 0u;
      long long v170 = 0u;
      long long v168 = 0u;
      memset(v167, 0, sizeof(v167));
      int v133 = *__error();
      __n128 v31 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        uint64_t v127 = *(void *)(a2 + 288);
        uint64_t v33 = fd_name(*(void *)(a2 + 240), (char *)v167, 0x100uLL);
        *(_DWORD *)stat buf = 136316418;
        *(void *)&uint8_t buf[4] = "_data_map64_get_data_entry";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = 379;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(void *)&unsigned char buf[20] = v22;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = v127;
        *(_WORD *)&buf[38] = 2048;
        *(void *)&buf[40] = a2;
        *(_WORD *)&buf[48] = 2080;
        *(void *)&buf[50] = v33;
        unsigned int v27 = v31;
        uint64_t v28 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
LABEL_43:
        _os_log_error_impl(&dword_1BD672000, v27, OS_LOG_TYPE_ERROR, v28, buf, 0x3Au);
      }
LABEL_40:
      *__error() = v133;
LABEL_41:
      uint64_t v20 = v142;
LABEL_26:
      ++v18;
      v19 += 16;
      if (v16 == v18) {
        goto LABEL_76;
      }
    }
    data_entry_restore_64(v132, v22, v23, (unsigned int *)v146, &v143);
    if (!(_BYTE)v143)
    {
      if ((v140 & 4) == 0 && v9)
      {
        uint64_t v14 = _data_map64_garbage_compact_collect(a2);
        goto LABEL_77;
      }
      uint64_t v55 = *(void *)(a2 + 4504);
      if (v55 - 1 < v18)
      {
        LODWORD(v56) = 0;
LABEL_75:
        if ((v140 & 2) != 0)
        {
          int v87 = *__error();
          uint64_t v88 = _SILogForLogForCategory(0);
          os_log_type_t v89 = 2 * (gSILogLevels[0] < 4);
          if (os_log_type_enabled(v88, v89))
          {
            *(_DWORD *)v167 = 67109376;
            *(_DWORD *)&v167[4] = v56;
            *(_WORD *)&v167[8] = 2048;
            *(void *)&v167[10] = a2;
            _os_log_impl(&dword_1BD672000, v88, v89, "Found %d deleted strings from %p", v167, 0x12u);
          }
          uint64_t v14 = 0;
          *__error() = v87;
        }
        else
        {
LABEL_76:
          uint64_t v14 = 0;
        }
        goto LABEL_77;
      }
      uint64_t v56 = 0;
      int v135 = *(_DWORD *)(a2 + 220);
      while (2)
      {
        if ((v18 & 0x8000000000000000) != 0)
        {
          uint64_t v122 = __si_assert_copy_extra_329();
          uint64_t v123 = v122;
          int v124 = "";
          if (v122) {
            int v124 = v122;
          }
          __message_assert(v122, "bit_vector.h", 96, "bitIndex >= 0", v124);
          free(v123);
          if (__valid_fs(-1)) {
            uint64_t v125 = 2989;
          }
          else {
            uint64_t v125 = 3072;
          }
          *(_DWORD *)uint64_t v125 = -559038737;
          abort();
        }
        if (*(void *)v20 > (int64_t)v18 && CFBitVectorGetBitAtIndex(*(CFBitVectorRef *)(v20 + 16), v18))
        {
LABEL_96:
          ++v18;
          v19 += 16;
          if (v55 == v18) {
            goto LABEL_75;
          }
          continue;
        }
        break;
      }
      if (*(void *)(a2 + 4504) <= v18)
      {
        long long v179 = 0u;
        long long v180 = 0u;
        long long v177 = 0u;
        long long v178 = 0u;
        long long v175 = 0u;
        long long v176 = 0u;
        long long v173 = 0u;
        long long v174 = 0u;
        long long v171 = 0u;
        long long v172 = 0u;
        long long v169 = 0u;
        long long v170 = 0u;
        long long v168 = 0u;
        memset(v167, 0, sizeof(v167));
        int v73 = *__error();
        unsigned int v74 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
        {
          uint64_t v137 = v56;
          uint64_t v77 = *(void *)(a2 + 4504);
          uint64_t v78 = fd_name(*(void *)(a2 + 240), (char *)v167, 0x100uLL);
          *(_DWORD *)stat buf = 136316418;
          *(void *)&uint8_t buf[4] = "_data_map64_get_offset_entry";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&unsigned char buf[14] = 362;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(void *)&unsigned char buf[20] = v18;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = v77;
          uint64_t v56 = v137;
          *(_WORD *)&buf[38] = 2048;
          *(void *)&buf[40] = a2;
          *(_WORD *)&buf[48] = 2080;
          *(void *)&buf[50] = v78;
          _os_log_error_impl(&dword_1BD672000, v74, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %lld max %lld %p %s", buf, 0x3Au);
        }
        *__error() = v73;
      }
      else
      {
        uint64_t v64 = *(void *)(a2 + 4448);
        if (!v64) {
          goto LABEL_96;
        }
        uint64_t v136 = v56;
        unint64_t v65 = *(void *)(v64 + v19);
        if (v65 < 2)
        {
          uint64_t v56 = v136;
          goto LABEL_96;
        }
        *(void *)v146 = 0;
        *(void *)&v146[8] = 0;
        LOBYTE(v143) = 0;
        unint64_t v66 = *(void *)(a2 + 288);
        if (v66 <= v65)
        {
          long long v179 = 0u;
          long long v180 = 0u;
          long long v177 = 0u;
          long long v178 = 0u;
          long long v175 = 0u;
          long long v176 = 0u;
          long long v173 = 0u;
          long long v174 = 0u;
          long long v171 = 0u;
          long long v172 = 0u;
          long long v169 = 0u;
          long long v170 = 0u;
          long long v168 = 0u;
          memset(v167, 0, sizeof(v167));
          int v67 = *__error();
          unsigned int v75 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
          {
            uint64_t v126 = *(void *)(a2 + 288);
            unsigned int v84 = fd_name(*(void *)(a2 + 240), (char *)v167, 0x100uLL);
            *(_DWORD *)stat buf = 136316418;
            *(void *)&uint8_t buf[4] = "_data_map64_get_data_entry";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&unsigned char buf[14] = 379;
            *(_WORD *)&unsigned char buf[18] = 2048;
            *(void *)&unsigned char buf[20] = v65;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = v126;
            *(_WORD *)&buf[38] = 2048;
            *(void *)&buf[40] = a2;
            *(_WORD *)&buf[48] = 2080;
            *(void *)&buf[50] = v84;
            uint64_t v71 = v75;
            uint64_t v72 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
LABEL_128:
            _os_log_error_impl(&dword_1BD672000, v71, OS_LOG_TYPE_ERROR, v72, buf, 0x3Au);
          }
LABEL_111:
          *__error() = v67;
          uint64_t v76 = v136;
        }
        else
        {
          data_entry_restore_64(v132, v65, v66, (unsigned int *)v146, &v143);
          if ((_BYTE)v143)
          {
            long long v179 = 0u;
            long long v180 = 0u;
            long long v177 = 0u;
            long long v178 = 0u;
            long long v175 = 0u;
            long long v176 = 0u;
            long long v173 = 0u;
            long long v174 = 0u;
            long long v171 = 0u;
            long long v172 = 0u;
            long long v169 = 0u;
            long long v170 = 0u;
            long long v168 = 0u;
            memset(v167, 0, sizeof(v167));
            int v67 = *__error();
            uint64_t v68 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
            {
              unsigned int v69 = fd_name(*(void *)(a2 + 240), (char *)v167, 0x100uLL);
              uint64_t v70 = *(void *)(a2 + 288);
              *(_DWORD *)stat buf = 136316418;
              *(void *)&uint8_t buf[4] = "_data_map64_get_data_entry";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&unsigned char buf[14] = 375;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&unsigned char buf[20] = v69;
              *(_WORD *)&buf[28] = 2048;
              *(void *)&buf[30] = v65;
              *(_WORD *)&buf[38] = 2048;
              *(void *)&buf[40] = v70;
              *(_WORD *)&buf[48] = 2048;
              *(void *)&buf[50] = *(unsigned int *)v146;
              uint64_t v71 = v68;
              uint64_t v72 = "%s:%d: data_entry_restore_64 failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx";
              goto LABEL_128;
            }
            goto LABEL_111;
          }
          if ((v140 & 2) != 0)
          {
            if (a3 <= 1)
            {
              if (gSILogLevels[0] >= 5)
              {
                int v79 = *__error();
                unsigned int v85 = _SILogForLogForCategory(0);
                if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v86 = *(void *)&v146[8] + *(unsigned int *)(a2 + 220);
                  *(_DWORD *)v167 = 67109890;
                  *(_DWORD *)&v167[4] = v18;
                  *(_WORD *)&v167[8] = 1024;
                  *(_DWORD *)&v167[10] = *(_DWORD *)v146;
                  *(_WORD *)&v167[14] = 2080;
                  *(void *)&v167[16] = v86;
                  *(_WORD *)&v167[24] = 2048;
                  *(void *)&v167[26] = a2;
                  unsigned int v81 = v85;
                  unsigned int v82 = "Delete data for id:%d size:%d %s from %p";
                  uint32_t v83 = 34;
LABEL_131:
                  _os_log_impl(&dword_1BD672000, v81, OS_LOG_TYPE_DEFAULT, v82, v167, v83);
                }
LABEL_132:
                *__error() = v79;
              }
            }
            else if (gSILogLevels[0] >= 5)
            {
              int v79 = *__error();
              unsigned int v80 = _SILogForLogForCategory(0);
              if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v167 = 67109632;
                *(_DWORD *)&v167[4] = v18;
                *(_WORD *)&v167[8] = 1024;
                *(_DWORD *)&v167[10] = *(_DWORD *)v146;
                *(_WORD *)&v167[14] = 2048;
                *(void *)&v167[16] = a2;
                unsigned int v81 = v80;
                unsigned int v82 = "Delete data for id:%d size:%d from %p";
                uint32_t v83 = 24;
                goto LABEL_131;
              }
              goto LABEL_132;
            }
          }
          uint64_t v76 = v136 + 1;
          if ((v140 & 4) == 0)
          {
            if (!v136)
            {
              if (!*v130)
              {
                _data_map64_dirty(a2);
                *int v130 = 1;
              }
              if (!*(unsigned char *)(a2 + 4571))
              {
                _data_map64_dirty(a2);
                *(unsigned char *)(a2 + 4571) = 1;
              }
            }
            *(_OWORD *)(v64 + v19) = xmmword_1BDA82440;
            bzero(*(void **)&v146[8], (*(_DWORD *)v146 + v135));
          }
        }
        uint64_t v56 = v76;
      }
      uint64_t v20 = v142;
      goto LABEL_96;
    }
    long long v179 = 0u;
    long long v180 = 0u;
    long long v177 = 0u;
    long long v178 = 0u;
    long long v175 = 0u;
    long long v176 = 0u;
    long long v173 = 0u;
    long long v174 = 0u;
    long long v171 = 0u;
    long long v172 = 0u;
    long long v169 = 0u;
    long long v170 = 0u;
    long long v168 = 0u;
    memset(v167, 0, sizeof(v167));
    int v133 = *__error();
    int v24 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      goto LABEL_40;
    }
    int v25 = fd_name(*(void *)(a2 + 240), (char *)v167, 0x100uLL);
    uint64_t v26 = *(void *)(a2 + 288);
    *(_DWORD *)stat buf = 136316418;
    *(void *)&uint8_t buf[4] = "_data_map64_get_data_entry";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = 375;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&unsigned char buf[20] = v25;
    *(_WORD *)&buf[28] = 2048;
    *(void *)&buf[30] = v22;
    *(_WORD *)&buf[38] = 2048;
    *(void *)&buf[40] = v26;
    *(_WORD *)&buf[48] = 2048;
    *(void *)&buf[50] = *(unsigned int *)v146;
    unsigned int v27 = v24;
    uint64_t v28 = "%s:%d: data_entry_restore_64 failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx";
    goto LABEL_43;
  }
  if (v8 != 842150450 || !*(void *)(a2 + 1448)) {
    goto LABEL_84;
  }
  _data_map32_wrlock(a2);
  int v10 = *(_DWORD *)(a2 + 1388);
  unsigned int v11 = v10 - 1;
  if (v10 - 1 <= v5) {
    goto LABEL_82;
  }
  char v139 = v6;
  v182.length = (v10 - v5);
  uint64_t v141 = *(void *)(a2 + 1448);
  v182.location = v5;
  unsigned int v12 = CFBitVectorGetFirstIndexOfBit(*(CFBitVectorRef *)(v141 + 16), v182, 0);
  unsigned int v13 = v12;
  uint64_t v14 = 0;
  if (v12 < v5) {
    goto LABEL_83;
  }
  uint64_t v14 = 0;
  if (v11 < v12 || *(_DWORD *)(a2 + 1388) <= v12) {
    goto LABEL_83;
  }
  uint64_t v15 = v141;
  while (1)
  {
    if (*(void *)v15 > (uint64_t)v13 && CFBitVectorGetBitAtIndex(*(CFBitVectorRef *)(v15 + 16), v13)) {
      goto LABEL_46;
    }
    if (*(_DWORD *)(a2 + 1388) > v13) {
      break;
    }
    long long v179 = 0u;
    long long v180 = 0u;
    long long v177 = 0u;
    long long v178 = 0u;
    long long v175 = 0u;
    long long v176 = 0u;
    long long v173 = 0u;
    long long v174 = 0u;
    long long v171 = 0u;
    long long v172 = 0u;
    long long v169 = 0u;
    long long v170 = 0u;
    long long v168 = 0u;
    memset(v167, 0, sizeof(v167));
    int v34 = *__error();
    unint64_t v35 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      int v53 = *(_DWORD *)(a2 + 1388);
      char v54 = fd_name(*(void *)(a2 + 1264), (char *)v167, 0x100uLL);
      *(_DWORD *)stat buf = 136316418;
      *(void *)&uint8_t buf[4] = "_data_map32_get_offset_entry";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = 424;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = v13;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v53;
      *(_WORD *)&buf[30] = 2048;
      *(void *)&unsigned char buf[32] = a2;
      *(_WORD *)&buf[40] = 2080;
      *(void *)&buf[42] = v54;
      unsigned int v47 = buf;
      uint64_t v48 = v35;
      __int16 v49 = "%s:%d: invalid data id %d max %d %p %s";
      uint32_t v50 = 50;
      goto LABEL_65;
    }
LABEL_45:
    *__error() = v34;
    uint64_t v15 = v141;
LABEL_46:
    if (++v13 > v11) {
      goto LABEL_82;
    }
  }
  uint64_t v36 = *(void *)(a2 + 1344);
  if (!v36) {
    goto LABEL_46;
  }
  uint64_t v37 = *(unsigned int *)(v36 + 4 * v13);
  if (v37 < 2) {
    goto LABEL_46;
  }
  uint64_t v143 = 0;
  v144 = 0;
  char v145 = 0;
  unsigned int v38 = *(_DWORD *)(a2 + 1320);
  if (v38 <= v37)
  {
    long long v179 = 0u;
    long long v180 = 0u;
    long long v177 = 0u;
    long long v178 = 0u;
    long long v175 = 0u;
    long long v176 = 0u;
    long long v173 = 0u;
    long long v174 = 0u;
    long long v171 = 0u;
    long long v172 = 0u;
    long long v169 = 0u;
    long long v170 = 0u;
    long long v168 = 0u;
    memset(v167, 0, sizeof(v167));
    int v34 = *__error();
    unsigned int v51 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      uint64_t v131 = *(unsigned int *)(a2 + 1320);
      uint64_t v52 = fd_name(*(void *)(a2 + 1264), (char *)v167, 0x100uLL);
      *(_DWORD *)stat buf = 136316418;
      *(void *)&uint8_t buf[4] = "_data_map32_get_data_entry";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = 448;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&unsigned char buf[20] = v37;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = v131;
      *(_WORD *)&buf[38] = 2048;
      *(void *)&buf[40] = a2;
      *(_WORD *)&buf[48] = 2080;
      *(void *)&buf[50] = v52;
      unsigned int v47 = buf;
      uint64_t v48 = v51;
      __int16 v49 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
      uint32_t v50 = 58;
LABEL_65:
      _os_log_error_impl(&dword_1BD672000, v48, OS_LOG_TYPE_ERROR, v49, v47, v50);
      goto LABEL_45;
    }
    goto LABEL_45;
  }
  data_entry_restore_32(*(void *)(a2 + 1312), v37, v38, (uint64_t)&v143, &v145);
  if (v145)
  {
    uint64_t v166 = 0;
    long long v164 = 0u;
    long long v165 = 0u;
    long long v162 = 0u;
    long long v163 = 0u;
    long long v160 = 0u;
    long long v161 = 0u;
    long long v158 = 0u;
    long long v159 = 0u;
    memset(buf, 0, sizeof(buf));
    if (v37 < *(_DWORD *)(a2 + 1320))
    {
      size_t v39 = strlen((const char *)buf);
      sprintf((char *)&buf[v39], "%d ", *(unsigned __int8 *)(*(void *)(a2 + 1312) + v37));
      if (v37 + 1 < (unint64_t)*(unsigned int *)(a2 + 1320))
      {
        size_t v40 = strlen((const char *)buf);
        sprintf((char *)&buf[v40], "%d ", *(unsigned __int8 *)(*(void *)(a2 + 1312) + v37 + 1));
        if (v37 + 2 < (unint64_t)*(unsigned int *)(a2 + 1320))
        {
          size_t v41 = strlen((const char *)buf);
          sprintf((char *)&buf[v41], "%d ", *(unsigned __int8 *)(*(void *)(a2 + 1312) + v37 + 2));
          if (v37 + 3 < (unint64_t)*(unsigned int *)(a2 + 1320))
          {
            size_t v42 = strlen((const char *)buf);
            sprintf((char *)&buf[v42], "%d ", *(unsigned __int8 *)(*(void *)(a2 + 1312) + v37 + 3));
            if (v37 + 4 < (unint64_t)*(unsigned int *)(a2 + 1320))
            {
              size_t v43 = strlen((const char *)buf);
              sprintf((char *)&buf[v43], "%d ", *(unsigned __int8 *)(*(void *)(a2 + 1312) + v37 + 4));
            }
          }
        }
      }
    }
    long long v179 = 0u;
    long long v180 = 0u;
    long long v177 = 0u;
    long long v178 = 0u;
    long long v175 = 0u;
    long long v176 = 0u;
    long long v173 = 0u;
    long long v174 = 0u;
    long long v171 = 0u;
    long long v172 = 0u;
    long long v169 = 0u;
    long long v170 = 0u;
    long long v168 = 0u;
    memset(v167, 0, sizeof(v167));
    int v34 = *__error();
    int v44 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
      goto LABEL_45;
    }
    uint64_t v45 = fd_name(*(void *)(a2 + 1264), (char *)v167, 0x100uLL);
    uint64_t v46 = *(unsigned int *)(a2 + 1320);
    *(_DWORD *)v146 = 136316674;
    *(void *)&v146[4] = "_data_map32_get_data_entry";
    *(_WORD *)&v146[12] = 1024;
    *(_DWORD *)&v146[14] = 444;
    __int16 v147 = 2080;
    off_t v148 = v45;
    __int16 v149 = 2048;
    uint64_t v150 = v37;
    __int16 v151 = 2048;
    uint64_t v152 = v46;
    __int16 v153 = 2048;
    uint64_t v154 = v143;
    __int16 v155 = 2080;
    int v156 = buf;
    unsigned int v47 = v146;
    uint64_t v48 = v44;
    __int16 v49 = "%s:%d: data_entry_restore_32 failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
    uint32_t v50 = 68;
    goto LABEL_65;
  }
  if (!v13) {
    goto LABEL_82;
  }
  if ((v139 & 4) == 0 && v9)
  {
    uint64_t v14 = _data_map32_garbage_compact_collect(a2, v15, v13, v139, v9 + 4216 * a3);
    goto LABEL_83;
  }
  unsigned int v57 = *(_DWORD *)(a2 + 1388) - 1;
  if (v57 >= v13)
  {
    uint64_t v58 = 0;
    int v138 = *(_DWORD *)(a2 + 1244);
    while (1)
    {
      if (*(void *)v141 <= (uint64_t)v13 || !CFBitVectorGetBitAtIndex(*(CFBitVectorRef *)(v141 + 16), v13))
      {
        if (*(_DWORD *)(a2 + 1388) <= v13)
        {
          long long v179 = 0u;
          long long v180 = 0u;
          long long v177 = 0u;
          long long v178 = 0u;
          long long v175 = 0u;
          long long v176 = 0u;
          long long v173 = 0u;
          long long v174 = 0u;
          long long v171 = 0u;
          long long v172 = 0u;
          long long v169 = 0u;
          long long v170 = 0u;
          long long v168 = 0u;
          memset(v167, 0, sizeof(v167));
          int v106 = *__error();
          unsigned int v107 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
          {
            int v110 = *(_DWORD *)(a2 + 1388);
            int v111 = fd_name(*(void *)(a2 + 1264), (char *)v167, 0x100uLL);
            *(_DWORD *)stat buf = 136316418;
            *(void *)&uint8_t buf[4] = "_data_map32_get_offset_entry";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&unsigned char buf[14] = 424;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&unsigned char buf[20] = v13;
            *(_WORD *)&buf[24] = 1024;
            *(_DWORD *)&buf[26] = v110;
            *(_WORD *)&buf[30] = 2048;
            *(void *)&unsigned char buf[32] = a2;
            *(_WORD *)&buf[40] = 2080;
            *(void *)&buf[42] = v111;
            _os_log_error_impl(&dword_1BD672000, v107, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %d max %d %p %s", buf, 0x32u);
          }
          *__error() = v106;
          goto LABEL_138;
        }
        uint64_t v90 = *(void *)(a2 + 1344);
        if (v90)
        {
          uint64_t v91 = *(unsigned int *)(v90 + 4 * v13);
          if (v91 >= 2) {
            break;
          }
        }
      }
LABEL_138:
      if (++v13 > v57) {
        goto LABEL_81;
      }
    }
    uint64_t v143 = 0;
    v144 = 0;
    char v145 = 0;
    unsigned int v92 = *(_DWORD *)(a2 + 1320);
    if (v92 <= v91)
    {
      long long v179 = 0u;
      long long v180 = 0u;
      long long v177 = 0u;
      long long v178 = 0u;
      long long v175 = 0u;
      long long v176 = 0u;
      long long v173 = 0u;
      long long v174 = 0u;
      long long v171 = 0u;
      long long v172 = 0u;
      long long v169 = 0u;
      long long v170 = 0u;
      long long v168 = 0u;
      memset(v167, 0, sizeof(v167));
      int v98 = *__error();
      int v108 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
      {
LABEL_157:
        *__error() = v98;
        uint64_t v109 = v58;
LABEL_158:
        uint64_t v58 = v109;
        goto LABEL_138;
      }
      uint64_t v129 = *(unsigned int *)(a2 + 1320);
      uint64_t v116 = fd_name(*(void *)(a2 + 1264), (char *)v167, 0x100uLL);
      *(_DWORD *)stat buf = 136316418;
      *(void *)&uint8_t buf[4] = "_data_map32_get_data_entry";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = 448;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&unsigned char buf[20] = v91;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = v129;
      *(_WORD *)&buf[38] = 2048;
      *(void *)&buf[40] = a2;
      *(_WORD *)&buf[48] = 2080;
      *(void *)&buf[50] = v116;
      BOOL v102 = buf;
      uint64_t v103 = v108;
      int v104 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
      uint32_t v105 = 58;
LABEL_173:
      _os_log_error_impl(&dword_1BD672000, v103, OS_LOG_TYPE_ERROR, v104, v102, v105);
      goto LABEL_157;
    }
    data_entry_restore_32(*(void *)(a2 + 1312), v91, v92, (uint64_t)&v143, &v145);
    if (v145)
    {
      uint64_t v166 = 0;
      long long v164 = 0u;
      long long v165 = 0u;
      long long v162 = 0u;
      long long v163 = 0u;
      long long v160 = 0u;
      long long v161 = 0u;
      long long v158 = 0u;
      long long v159 = 0u;
      memset(buf, 0, sizeof(buf));
      if (v91 < *(_DWORD *)(a2 + 1320))
      {
        size_t v93 = strlen((const char *)buf);
        sprintf((char *)&buf[v93], "%d ", *(unsigned __int8 *)(*(void *)(a2 + 1312) + v91));
        if (v91 + 1 < (unint64_t)*(unsigned int *)(a2 + 1320))
        {
          size_t v94 = strlen((const char *)buf);
          sprintf((char *)&buf[v94], "%d ", *(unsigned __int8 *)(*(void *)(a2 + 1312) + v91 + 1));
          if (v91 + 2 < (unint64_t)*(unsigned int *)(a2 + 1320))
          {
            size_t v95 = strlen((const char *)buf);
            sprintf((char *)&buf[v95], "%d ", *(unsigned __int8 *)(*(void *)(a2 + 1312) + v91 + 2));
            if (v91 + 3 < (unint64_t)*(unsigned int *)(a2 + 1320))
            {
              size_t v96 = strlen((const char *)buf);
              sprintf((char *)&buf[v96], "%d ", *(unsigned __int8 *)(*(void *)(a2 + 1312) + v91 + 3));
              if (v91 + 4 < (unint64_t)*(unsigned int *)(a2 + 1320))
              {
                size_t v97 = strlen((const char *)buf);
                sprintf((char *)&buf[v97], "%d ", *(unsigned __int8 *)(*(void *)(a2 + 1312) + v91 + 4));
              }
            }
          }
        }
      }
      long long v179 = 0u;
      long long v180 = 0u;
      long long v177 = 0u;
      long long v178 = 0u;
      long long v175 = 0u;
      long long v176 = 0u;
      long long v173 = 0u;
      long long v174 = 0u;
      long long v171 = 0u;
      long long v172 = 0u;
      long long v169 = 0u;
      long long v170 = 0u;
      long long v168 = 0u;
      memset(v167, 0, sizeof(v167));
      int v98 = *__error();
      uint64_t v99 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v99, OS_LOG_TYPE_ERROR)) {
        goto LABEL_157;
      }
      int v100 = fd_name(*(void *)(a2 + 1264), (char *)v167, 0x100uLL);
      uint64_t v101 = *(unsigned int *)(a2 + 1320);
      *(_DWORD *)v146 = 136316674;
      *(void *)&v146[4] = "_data_map32_get_data_entry";
      *(_WORD *)&v146[12] = 1024;
      *(_DWORD *)&v146[14] = 444;
      __int16 v147 = 2080;
      off_t v148 = v100;
      __int16 v149 = 2048;
      uint64_t v150 = v91;
      __int16 v151 = 2048;
      uint64_t v152 = v101;
      __int16 v153 = 2048;
      uint64_t v154 = v143;
      __int16 v155 = 2080;
      int v156 = buf;
      BOOL v102 = v146;
      uint64_t v103 = v99;
      int v104 = "%s:%d: data_entry_restore_32 failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
      uint32_t v105 = 68;
      goto LABEL_173;
    }
    if ((v139 & 2) == 0)
    {
LABEL_165:
      uint64_t v109 = v58 + 1;
      if ((v139 & 4) == 0)
      {
        if (!v58)
        {
          if (!*(unsigned char *)(a2 + 1457))
          {
            _data_map32_dirty(a2);
            *(unsigned char *)(a2 + 1457) = 1;
          }
          if (!*(unsigned char *)(a2 + 1459))
          {
            _data_map32_dirty(a2);
            *(unsigned char *)(a2 + 1459) = 1;
          }
        }
        *(_DWORD *)(v90 + 4 * v13) = 1;
        bzero(v144, (v143 + v138));
      }
      goto LABEL_158;
    }
    if (a3 <= 1)
    {
      if (gSILogLevels[0] < 5) {
        goto LABEL_165;
      }
      int v128 = *__error();
      int v117 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_177;
      }
      uint64_t v118 = (char *)v144 + *(unsigned int *)(a2 + 1244);
      *(_DWORD *)v167 = 67109890;
      *(_DWORD *)&v167[4] = v13;
      *(_WORD *)&v167[8] = 1024;
      *(_DWORD *)&v167[10] = v143;
      *(_WORD *)&v167[14] = 2080;
      *(void *)&v167[16] = v118;
      *(_WORD *)&v167[24] = 2048;
      *(void *)&v167[26] = a2;
      uint64_t v113 = v117;
      char v114 = "Delete data for id:%d size:%d %s from %p";
      uint32_t v115 = 34;
    }
    else
    {
      if (gSILogLevels[0] < 5) {
        goto LABEL_165;
      }
      int v128 = *__error();
      __int32 v112 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_177;
      }
      *(_DWORD *)v167 = 67109632;
      *(_DWORD *)&v167[4] = v13;
      *(_WORD *)&v167[8] = 1024;
      *(_DWORD *)&v167[10] = v143;
      *(_WORD *)&v167[14] = 2048;
      *(void *)&v167[16] = a2;
      uint64_t v113 = v112;
      char v114 = "Delete data for id:%d size:%d from %p";
      uint32_t v115 = 24;
    }
    _os_log_impl(&dword_1BD672000, v113, OS_LOG_TYPE_DEFAULT, v114, v167, v115);
LABEL_177:
    *__error() = v128;
    goto LABEL_165;
  }
  LODWORD(v58) = 0;
LABEL_81:
  if ((v139 & 2) != 0)
  {
    int v119 = *__error();
    int v120 = _SILogForLogForCategory(0);
    os_log_type_t v121 = 2 * (gSILogLevels[0] < 4);
    if (os_log_type_enabled(v120, v121))
    {
      *(_DWORD *)v167 = 67109376;
      *(_DWORD *)&v167[4] = v58;
      *(_WORD *)&v167[8] = 2048;
      *(void *)&v167[10] = a2;
      _os_log_impl(&dword_1BD672000, v120, v121, "Found %d deleted strings from %p", v167, 0x12u);
    }
    uint64_t v14 = 0;
    *__error() = v119;
  }
  else
  {
LABEL_82:
    uint64_t v14 = 0;
  }
LABEL_83:
  _data_map32_unlock(a2);
  if (!v14)
  {
LABEL_84:
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    uint64_t v59 = *(void *)(a1 + 48);
    if (*(void *)(v59 + 4216 * a3 + 8)
      && (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1, a3 == 4)
      && *(void *)(*(void *)(a1 + 56) + 968))
    {
      uint64_t v14 = 0;
      *(unsigned char *)(v59 + 16864) = 1;
    }
    else
    {
      return 0;
    }
  }
  return v14;
}

uint64_t _db2_validate_strings_for_dbo(uint64_t a1, int *a2)
{
  int v11 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  while (db_next_field(a2, a1, 0, &v11, &v10, &v9) == 35)
  {
    if (*(_WORD *)v9 == 11 && (*(_WORD *)(v9 + 2) & 0x10) != 0)
    {
      unint64_t v4 = *(unsigned int *)(v9 + 8);
      if (v4 >= 4)
      {
        unint64_t v5 = v4 >> 2;
        char v6 = (int *)(v9 + 13);
        do
        {
          int v7 = *v6++;
          db_get_string_for_id(a2, v7);
          --v5;
        }
        while (v5);
      }
    }
  }
  return 0;
}

void __db2_deserialize_cache_block_invoke(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  CFMutableSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
  if (!Mutable) {
    return;
  }
  int v7 = Mutable;
  uint64_t v8 = *(void *)(a1 + 32);
  int v9 = pthread_mutex_lock((pthread_mutex_t *)(v8 + 584));
  HIDWORD(v11) = qos_class_self() - 9;
  LODWORD(v11) = HIDWORD(v11);
  unsigned int v10 = v11 >> 2;
  if (v10 > 6)
  {
    signed int v12 = 0;
    if (*(void *)(v8 + 768)) {
      goto LABEL_14;
    }
  }
  else
  {
    signed int v12 = dword_1BDA87810[v10];
    if (*(void *)(v8 + 768)) {
      goto LABEL_14;
    }
  }
  if (!*(_DWORD *)(v8 + 780) && !*(unsigned char *)(v8 + 796)) {
    goto LABEL_35;
  }
  uint64_t v13 = v12 <= 5 ? 5 : v12;
  uint64_t v14 = (uint64_t *)(v8 + 16 * v12 + 664);
  uint64_t v15 = v13 - v12 + 1;
  do
  {
    if (!--v15) {
      break;
    }
    uint64_t v16 = *v14;
    v14 += 2;
  }
  while (!v16);
  if (!*(void *)(v8 + 16 * v12 + 648) || *(_DWORD *)(v8 + 784))
  {
LABEL_35:
    *(int32x2_t *)(v8 + 780) = vadd_s32(*(int32x2_t *)(v8 + 780), (int32x2_t)0x100000001);
    goto LABEL_15;
  }
LABEL_14:
  db_rwlock_wait(v8 + 584, v12, 5);
LABEL_15:
  pthread_mutex_unlock((pthread_mutex_t *)(v8 + 584));
  uint64_t v17 = *(void *)(a1 + 32);
  if (v9) {
    sdb2_die(v17, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 15398);
  }
  uint64_t v18 = *(void *)(v17 + 856);
  if (*(int *)(v18 + 8) >= 1)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 28;
    do
    {
      CFSetAddValue(v7, (const void *)*(unsigned int *)(v18 + v20));
      ++v19;
      uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 856);
      v20 += 16;
    }
    while (v19 < *(int *)(v18 + 8));
  }
  if (a3)
  {
    while (1)
    {
      value_out = 0;
      if (!CFSetContainsValue(v7, (const void *)*a2)) {
        break;
      }
      if (!_page_fetch_with_fd(*(void *)(a1 + 32), &value_out, *a2, 0x4000uLL, 4105, buf, 0xFFFFFFFFLL, 0))page_release(*(void *)(a1 + 32), value_out, *a2, 0x10u, 0); {
      ++a2;
      }
      if (!--a3) {
        goto LABEL_28;
      }
    }
    int v21 = *__error();
    unint64_t v22 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      unsigned int v26 = *a2;
      *(_DWORD *)stat buf = 136315650;
      int v29 = "db2_deserialize_cache_block_invoke";
      __int16 v30 = 1024;
      int v31 = 15411;
      __int16 v32 = 1024;
      unsigned int v33 = v26;
      _os_log_error_impl(&dword_1BD672000, v22, OS_LOG_TYPE_ERROR, "%s:%d: invalid sdb page in cache %d", buf, 0x18u);
    }
    *__error() = v21;
  }
LABEL_28:
  uint64_t v23 = *(void *)(a1 + 32) + 584;
  int v24 = pthread_mutex_lock((pthread_mutex_t *)v23);
  int32x2_t v25 = vadd_s32(*(int32x2_t *)(v23 + 196), (int32x2_t)-1);
  *(int32x2_t *)(v23 + 196) = v25;
  if (!v25.i32[0]) {
    db_rwlock_wakeup(v23, 0, 0);
  }
  pthread_mutex_unlock((pthread_mutex_t *)v23);
  if (v24) {
    sdb2_die(*(void *)(a1 + 32), "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 15415);
  }
  CFRelease(v7);
}

void db2_scan_lost_ids(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v160 = *MEMORY[0x1E4F143B8];
  if (!_os_feature_enabled_impl()) {
    return;
  }
  if (a2 == 2)
  {
    if (!a3)
    {
      int v108 = __si_assert_copy_extra_2445(0, -1);
      uint64_t v109 = v108;
      int v110 = "";
      if (v108) {
        int v110 = v108;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 15533, "host != ((void *)0)", v110);
      free(v109);
      if (__valid_fs(-1)) {
        uint64_t v111 = 2989;
      }
      else {
        uint64_t v111 = 3072;
      }
      *(_DWORD *)uint64_t v111 = -559038737;
      abort();
    }
    db_lock_datastore((int *)a1);
    data_map_destroy(*(void *)(a1 + 920));
    *(void *)(a1 + 920) = 0;
    db_set_host((int *)a1, a3);
    db_unlock_datastore((int *)a1);
    char v6 = 0;
    goto LABEL_5;
  }
  uint64_t v22 = *(void *)(a1 + 920);
  if (!v22) {
    return;
  }
  uint64_t v23 = *(uint64_t **)(a1 + 920);
  if (*(_DWORD *)(v22 + 216) != -270471200) {
    return;
  }
  CFTypeRef v130 = 0;
  *(_OWORD *)int v128 = 0u;
  *(_OWORD *)uint64_t v129 = 0u;
  *(_OWORD *)uint64_t v126 = 0u;
  *(_OWORD *)uint64_t v127 = 0u;
  uint64_t v118 = v23;
  uint64_t v24 = v23[59];
  if (!__kSIUINT32SetTypeID) {
    __kSIUINT32SetTypeID = _CFRuntimeRegisterClass();
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (*(_DWORD *)(*(void *)(v24 + 1376) + 8))
  {
    uint64_t v26 = *(void *)(v24 + 1376);
    uint64_t v27 = 0;
    do
    {
      uint64_t v28 = v27;
      SIValueSet<unsigned int>::SIValueSetInsert((unsigned int *)(Instance + 16), *(unsigned int *)(*(void *)(*(void *)v26 + 8 * v27) + 56));
      uint64_t v27 = v28 + 1;
      uint64_t v26 = *(void *)(v24 + 1376);
    }
    while (v28 + 1 < (unint64_t)*(unsigned int *)(v26 + 8));
  }
  cf = (unsigned char *)Instance;
  if (*(_DWORD *)(*(void *)(v24 + 1384) + 8))
  {
    uint64_t v29 = *(void *)(v24 + 1384);
    uint64_t v30 = 0;
    do
    {
      uint64_t v31 = v30;
      SIValueSet<unsigned int>::SIValueSetInsert((unsigned int *)(Instance + 16), *(unsigned int *)(*(void *)(*(void *)v29 + 8 * v30) + 56));
      uint64_t v30 = v31 + 1;
      uint64_t v29 = *(void *)(v24 + 1384);
    }
    while (v31 + 1 < (unint64_t)*(unsigned int *)(v29 + 8));
  }
  __int16 v32 = v118;
  _data_map_ext_rdlock((uint64_t)v118);
  unsigned int v33 = (unsigned char *)Instance;
  if (!Instance)
  {
    _data_map_ext_unlock((uint64_t)v118);
    goto LABEL_72;
  }
  uint64_t v119 = a1;
  if ((unint64_t)v118[47] >= 2)
  {
    uint64_t v34 = 0;
    unint64_t v35 = 1;
    uint64_t v116 = Instance + 48;
    int v36 = 0;
    while (1)
    {
      uint64_t v41 = v32[36];
      if ((unint64_t)(v41 + 1) >= 2)
      {
        unint64_t v44 = v41 + 24 * v35;
        if (a2 != 1) {
          goto LABEL_41;
        }
      }
      else
      {
        long long v158 = 0u;
        long long v159 = 0u;
        long long v156 = 0u;
        long long v157 = 0u;
        long long v154 = 0u;
        long long v155 = 0u;
        long long v152 = 0u;
        long long v153 = 0u;
        long long v150 = 0u;
        long long v151 = 0u;
        long long v148 = 0u;
        long long v149 = 0u;
        long long v146 = 0u;
        long long v147 = 0u;
        memset(buf, 0, sizeof(buf));
        int v42 = *__error();
        size_t v43 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
        {
          uint64_t v63 = v32[47];
          uint64_t v64 = v32[36];
          unint64_t v65 = fd_name(v32[30], (char *)buf, 0x100uLL);
          *(_DWORD *)uint64_t v131 = 136316674;
          uint64_t v132 = "_data_map_ext_get_offset_entry";
          __int16 v133 = 1024;
          int v134 = 416;
          __int16 v135 = 2048;
          unint64_t v136 = v35;
          __int16 v137 = 2048;
          uint64_t v138 = v63;
          unsigned int v33 = cf;
          __int16 v139 = 2048;
          char v140 = v32;
          __int16 v141 = 2048;
          uint64_t v142 = v64;
          __int16 v143 = 2080;
          v144 = v65;
          _os_log_error_impl(&dword_1BD672000, v43, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %lld max %lld %p map: %p %s", v131, 0x44u);
        }
        unint64_t v44 = 0;
        *__error() = v42;
        if (a2 != 1) {
          goto LABEL_41;
        }
      }
      if ((*(_DWORD *)(v44 + 12) & 0x80000000) != 0)
      {
        uint64_t v46 = (_DWORD *)(v44 + 8);
        if (*(_DWORD *)(v44 + 8))
        {
          uint64_t v34 = (v34 + 1);
          goto LABEL_46;
        }
        uint64_t v53 = (v34 + 1);
LABEL_48:
        if (*(void *)v44 == -1)
        {
          uint64_t v34 = v53;
        }
        else
        {
          char v54 = &v126[3 * (*(void *)v44 & 3)] + ((*(void *)v44 >> 2) & 3);
          uint64_t v38 = (uint64_t)*v54;
          if (!*v54)
          {
            if (!__kSIUINT64SetTypeID) {
              __kSIUINT64SetTypeID = _CFRuntimeRegisterClass();
            }
            uint64_t v37 = _CFRuntimeCreateInstance();
            CFTypeRef *v54 = (CFTypeRef)v37;
            uint64_t v38 = v37;
          }
          ++v36;
          SIValueSet<unsigned long long>::SIValueSetInsert((unint64_t *)(v38 + 16), v35);
          uint64_t v34 = v53;
          unsigned int v33 = cf;
        }
        goto LABEL_33;
      }
LABEL_41:
      uint64_t v46 = (_DWORD *)(v44 + 8);
      unsigned int v45 = *(_DWORD *)(v44 + 8);
      uint64_t v47 = v45;
      if (v33[176]) {
        goto LABEL_42;
      }
      int v55 = *((_DWORD *)v33 + 5);
      if (v55)
      {
        if ((*((_DWORD *)v33 + 4) ^ v45) >> (-4 * v55)) {
          goto LABEL_42;
        }
      }
      uint64_t v56 = *(void *)(v116 + 8 * ((v45 >> (28 - 4 * v55)) & 0xF));
      uint64_t v57 = v56;
      if (v56)
      {
        int v60 = v55 + 2;
        uint64_t v61 = v57;
        do
        {
          char v62 = 32 - 4 * v60;
          uint64_t v59 = *(void *)((v61 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((v45 >> v62) & 0xF));
          ++v60;
          uint64_t v61 = v59;
        }
        while ((v59 & 1) != 0);
        char v58 = v62;
        if (!v59) {
          goto LABEL_42;
        }
      }
      else
      {
        char v58 = 28 - 4 * v55;
        uint64_t v59 = v56;
        if (!v56) {
          goto LABEL_42;
        }
      }
      if (((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v59 + 16))(v59, v47, ~(-1 << v58)) & 1) == 0)
      {
        LODWORD(v47) = *v46;
LABEL_42:
        if (v47)
        {
          uint64_t v48 = a2;
          int v49 = *__error();
          uint32_t v50 = _SILogForLogForCategory(16);
          os_log_type_t v51 = dword_1E9FC90E4 < 3;
          if (os_log_type_enabled(v50, (os_log_type_t)(dword_1E9FC90E4 < 3)))
          {
            int v52 = *v46;
            *(_DWORD *)stat buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = v52;
            *(_WORD *)&uint8_t buf[8] = 2048;
            *(void *)&buf[10] = v35;
            _os_log_impl(&dword_1BD672000, v50, v51, "*warn* Invalid indexId %u for vid: %llu", buf, 0x12u);
          }
          *__error() = v49;
          a2 = v48;
          __int16 v32 = v118;
          unsigned int v33 = cf;
LABEL_46:
          *uint64_t v46 = 0;
        }
        uint64_t v53 = v34;
        goto LABEL_48;
      }
LABEL_33:
      ++v35;
      int v39 = v34;
      int v40 = v36;
      if (v35 >= v32[47]) {
        goto LABEL_75;
      }
    }
  }
  int v39 = 0;
  int v40 = 0;
LABEL_75:
  CFRelease(v33);
  _data_map_ext_unlock((uint64_t)v32);
  if (!v40)
  {
LABEL_117:
    uint64_t v72 = 0;
    a1 = v119;
    CFTypeRef v73 = v126[0];
    if (!v126[0]) {
      goto LABEL_119;
    }
    goto LABEL_118;
  }
  int v74 = *__error();
  unsigned int v75 = _SILogForLogForCategory(16);
  if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v40 - v39;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v39;
    _os_log_impl(&dword_1BD672000, v75, OS_LOG_TYPE_DEFAULT, "recoverIds for %u lost vectors %u purged vectors", buf, 0xEu);
  }
  *__error() = v74;
  uint64_t v76 = v118[59];
  uint64_t v77 = *(void *)(v76 + 1376);
  if (*(_DWORD *)(v77 + 8))
  {
    unint64_t v78 = 0;
    while ((ContentIndexRecoverVectorIds(*(void *)(*(void *)v77 + 8 * v78), 1, (uint64_t)v126) & 1) != 0)
    {
      ++v78;
      uint64_t v77 = *(void *)(v76 + 1376);
      if (v78 >= *(unsigned int *)(v77 + 8)) {
        goto LABEL_82;
      }
    }
    goto LABEL_114;
  }
LABEL_82:
  uint64_t v79 = *(void *)(v76 + 1384);
  if (*(_DWORD *)(v79 + 8))
  {
    unint64_t v80 = 0;
    while ((ContentIndexRecoverVectorIds(*(void *)(*(void *)v79 + 8 * v80), 1, (uint64_t)v126) & 1) != 0)
    {
      ++v80;
      uint64_t v79 = *(void *)(v76 + 1384);
      if (v80 >= *(unsigned int *)(v79 + 8)) {
        goto LABEL_86;
      }
    }
    goto LABEL_114;
  }
LABEL_86:
  uint64_t v81 = *(void *)(v76 + 1376);
  if (*(_DWORD *)(v81 + 8))
  {
    unint64_t v82 = 0;
    while (ContentIndexRecoverVectorIds(*(void *)(*(void *)v81 + 8 * v82), 0, (uint64_t)v126))
    {
      ++v82;
      uint64_t v81 = *(void *)(v76 + 1376);
      if (v82 >= *(unsigned int *)(v81 + 8)) {
        goto LABEL_90;
      }
    }
    goto LABEL_114;
  }
LABEL_90:
  uint64_t v83 = *(void *)(v76 + 1384);
  if (*(_DWORD *)(v83 + 8))
  {
    unint64_t v84 = 0;
    while (ContentIndexRecoverVectorIds(*(void *)(*(void *)v83 + 8 * v84), 0, (uint64_t)v126))
    {
      ++v84;
      uint64_t v83 = *(void *)(v76 + 1384);
      if (v84 >= *(unsigned int *)(v83 + 8)) {
        goto LABEL_94;
      }
    }
LABEL_114:
    int v92 = *__error();
    size_t v93 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 136315394;
      *(void *)&uint8_t buf[4] = "data_map_ext_scan_lost_ids";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = 2578;
      _os_log_error_impl(&dword_1BD672000, v93, OS_LOG_TYPE_ERROR, "%s:%d: recoverIds failed", buf, 0x12u);
    }
    *__error() = v92;
    goto LABEL_117;
  }
LABEL_94:
  uint64_t v85 = SIUINT64SetCreate();
  uint64_t v86 = v85;
  if (v126[0]) {
    SIValueSet<unsigned long long>::_SIValueSetInnerIterate((uint64_t)v126[0] + 56, *((void *)v126[0] + 2), *((_DWORD *)v126[0] + 6), (uint64_t)unionUINT64Set, v85, 512);
  }
  if (v126[1]) {
    SIValueSet<unsigned long long>::_SIValueSetInnerIterate((uint64_t)v126[1] + 56, *((void *)v126[1] + 2), *((_DWORD *)v126[1] + 6), (uint64_t)unionUINT64Set, v85, 512);
  }
  if (v127[0]) {
    SIValueSet<unsigned long long>::_SIValueSetInnerIterate((uint64_t)v127[0] + 56, *((void *)v127[0] + 2), *((_DWORD *)v127[0] + 6), (uint64_t)unionUINT64Set, v85, 512);
  }
  if (v127[1]) {
    SIValueSet<unsigned long long>::_SIValueSetInnerIterate((uint64_t)v127[1] + 56, *((void *)v127[1] + 2), *((_DWORD *)v127[1] + 6), (uint64_t)unionUINT64Set, v85, 512);
  }
  if (v128[0]) {
    SIValueSet<unsigned long long>::_SIValueSetInnerIterate((uint64_t)v128[0] + 56, *((void *)v128[0] + 2), *((_DWORD *)v128[0] + 6), (uint64_t)unionUINT64Set, v85, 512);
  }
  if (v128[1]) {
    SIValueSet<unsigned long long>::_SIValueSetInnerIterate((uint64_t)v128[1] + 56, *((void *)v128[1] + 2), *((_DWORD *)v128[1] + 6), (uint64_t)unionUINT64Set, v85, 512);
  }
  if (v129[0]) {
    SIValueSet<unsigned long long>::_SIValueSetInnerIterate((uint64_t)v129[0] + 56, *((void *)v129[0] + 2), *((_DWORD *)v129[0] + 6), (uint64_t)unionUINT64Set, v85, 512);
  }
  if (v129[1]) {
    SIValueSet<unsigned long long>::_SIValueSetInnerIterate((uint64_t)v129[1] + 56, *((void *)v129[1] + 2), *((_DWORD *)v129[1] + 6), (uint64_t)unionUINT64Set, v85, 512);
  }
  if (v130) {
    SIValueSet<unsigned long long>::_SIValueSetInnerIterate((uint64_t)v130 + 56, *((void *)v130 + 2), *((_DWORD *)v130 + 6), (uint64_t)unionUINT64Set, v85, 512);
  }
  _data_map_ext_rdlock((uint64_t)v118);
  if ((unint64_t)v118[47] <= 1)
  {
LABEL_158:
    int v105 = v40;
    _data_map_ext_unlock((uint64_t)v118);
    int v106 = *__error();
    unsigned int v107 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v40;
      _os_log_impl(&dword_1BD672000, v107, OS_LOG_TYPE_DEFAULT, "recoverIds completed %u vectorIds no data", buf, 8u);
    }
    *__error() = v106;
    a1 = v119;
    if (v105)
    {
      uint64_t v72 = (const void *)v86;
      CFTypeRef v73 = v126[0];
      if (!v126[0])
      {
LABEL_119:
        if (v126[1]) {
          CFRelease(v126[1]);
        }
        if (v127[0]) {
          CFRelease(v127[0]);
        }
        if (v127[1]) {
          CFRelease(v127[1]);
        }
        if (v128[0]) {
          CFRelease(v128[0]);
        }
        if (v128[1]) {
          CFRelease(v128[1]);
        }
        if (v129[0]) {
          CFRelease(v129[0]);
        }
        if (v129[1]) {
          CFRelease(v129[1]);
        }
        if (v130) {
          CFRelease(v130);
        }
        char v6 = v72;
        if (!v72) {
          return;
        }
LABEL_5:
        *(_DWORD *)stat buf = 0;
        LODWORD(v126[0]) = 0;
        int v7 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
        unint64_t v8 = setThreadIdAndInfo(-1, (long long *)sSDBExceptionCallbacks, a1, 0x40000000, v7);
        unsigned int v125 = HIDWORD(v8);
        *(_DWORD *)uint64_t v131 = v8;
        unint64_t v124 = __PAIR64__(v9, v10);
        uint64_t v11 = *(void *)&threadData[18 * v8 + 2];
        uint64_t v12 = v11 + 320 * HIDWORD(v8);
        *(unsigned char *)(v12 + 216) = 0;
        int v13 = *(_DWORD *)(v12 + 312);
        uint64_t v14 = *(void (**)(void))(v12 + 224);
        if (v14) {
          v14(*(void *)(v11 + 320 * HIDWORD(v8) + 288));
        }
        unsigned int v123 = *(_DWORD *)v131;
        unsigned int v122 = v125;
        unint64_t v121 = v124;
        if (!_setjmp((int *)v12))
        {
          db2_clear_vector_fields(a1, buf, v126, (uint64_t)v6);
          uint64_t v66 = *(void *)&threadData[18 * v123 + 2];
          unsigned int v67 = v122;
          uint64_t v68 = v66 + 320 * v122;
          *(_DWORD *)(v68 + 312) = v13;
          unsigned int v69 = *(void (**)(void))(v68 + 232);
          if (v69) {
            v69(*(void *)(v66 + 320 * v67 + 288));
          }
          dropThreadId(v123, 0, v7);
          if (*(_DWORD *)buf)
          {
            pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
            *(_DWORD *)(a1 + 788) = 0;
            uint64_t v70 = *(pthread_override_s **)(a1 + 760);
            *(void *)(a1 + 768) = 0;
            *(void *)(a1 + 760) = 0;
            char v71 = *(_DWORD *)(a1 + 780) != 0;
            *(unsigned char *)(a1 + 796) = 0;
            db_rwlock_wakeup(a1 + 584, v71, 0);
            pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
            if (v70) {
              pthread_override_qos_class_end_np(v70);
            }
          }
          goto LABEL_16;
        }
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int v120 = 0;
          _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v120, 2u);
        }
        *(_DWORD *)(v12 + 312) = v13;
        unsigned int v15 = v121;
        if (__THREAD_SLOT_KEY)
        {
          uint64_t v16 = pthread_getspecific(__THREAD_SLOT_KEY);
          if (!v16) {
            goto LABEL_169;
          }
        }
        else
        {
          makeThreadId();
          uint64_t v16 = pthread_getspecific(__THREAD_SLOT_KEY);
          if (!v16) {
            goto LABEL_169;
          }
        }
        uint64_t v17 = v16;
        if ((unint64_t)v16 < 0x801)
        {
LABEL_13:
          uint64_t v18 = (uint64_t)v17 - 1;
          uint64_t v19 = &threadData[18 * ((uint64_t)v17 - 1)];
          unsigned int v21 = v19[14];
          uint64_t v20 = v19 + 14;
          if (v21 > v15)
          {
            do
              CIOnThreadCleanUpPop(v18);
            while (*v20 > v15);
          }
          dropThreadId(v123, 1, v7);
          CICleanUpReset(v123, HIDWORD(v121));
LABEL_16:
          if (a2 != 2) {
            CFRelease(v6);
          }
          return;
        }
LABEL_169:
        makeThreadId();
        uint64_t v17 = pthread_getspecific(__THREAD_SLOT_KEY);
        goto LABEL_13;
      }
LABEL_118:
      CFRelease(v73);
      goto LABEL_119;
    }
    CFRelease((CFTypeRef)v86);
LABEL_72:
    uint64_t v72 = 0;
    CFTypeRef v73 = v126[0];
    if (!v126[0]) {
      goto LABEL_119;
    }
    goto LABEL_118;
  }
  unint64_t v87 = v85 + 56;
  uint64_t v88 = v85 + 32;
  unint64_t v89 = 1;
  unint64_t v90 = v118[47];
  int v91 = v40;
  while (1)
  {
    if (*(unsigned char *)(v86 + 184)) {
      goto LABEL_140;
    }
    int v95 = *(_DWORD *)(v86 + 24);
    if (v95)
    {
      if ((*(void *)(v86 + 16) ^ v89) >> (-4 * v95)) {
        goto LABEL_140;
      }
    }
    uint64_t v96 = *(void *)(v87 + 8 * ((v89 >> ((60 - 4 * v95) & 0xFC)) & 0xF));
    if (v96)
    {
      int v99 = v95 + 2;
      uint64_t v100 = *(void *)(v87 + 8 * ((v89 >> ((60 - 4 * v95) & 0xFC)) & 0xF));
      do
      {
        char v97 = (64 - 4 * v99) & 0xFC;
        uint64_t v101 = *(void *)((v100 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((v89 >> v97) & 0xF));
        ++v99;
        uint64_t v100 = v101;
      }
      while ((v101 & 1) != 0);
      uint64_t v98 = v101;
    }
    else
    {
      char v97 = (60 - 4 * v95) & 0xFC;
      uint64_t v98 = v96;
    }
    if (!v98) {
      goto LABEL_140;
    }
    int v102 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(void *)v98 + 16))(v98, v89, ~(-1 << v97));
    unint64_t v90 = v118[47];
    if (!v102) {
      goto LABEL_140;
    }
    if (v118[47] <= v89) {
      break;
    }
    uint64_t v103 = v118[36];
    if ((unint64_t)(v103 + 1) < 2) {
      break;
    }
    if (!*(_DWORD *)(v103 + 24 * v89 + 8)) {
      goto LABEL_140;
    }
    if (!*(unsigned char *)(v86 + 184))
    {
      int v104 = *(_DWORD *)(v86 + 24);
      if (v104)
      {
        int v94 = *(_DWORD *)(v86 + 24);
        if (*(void *)(v86 + 16) != ((-1 << (-4 * v104)) & v89)) {
          goto LABEL_139;
        }
      }
      else
      {
        int v94 = 0;
      }
      SIValueSet<unsigned long long>::_SIValueSetInnerRemove(v87, v89, v94, v88);
    }
LABEL_139:
    --v91;
    unint64_t v90 = v118[47];
LABEL_140:
    int v40 = v91;
    if (++v89 >= v90) {
      goto LABEL_158;
    }
  }
  long long v158 = 0u;
  long long v159 = 0u;
  long long v156 = 0u;
  long long v157 = 0u;
  long long v154 = 0u;
  long long v155 = 0u;
  long long v152 = 0u;
  long long v153 = 0u;
  long long v150 = 0u;
  long long v151 = 0u;
  long long v148 = 0u;
  long long v149 = 0u;
  long long v146 = 0u;
  long long v147 = 0u;
  memset(buf, 0, sizeof(buf));
  __error();
  __int32 v112 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
  {
    uint64_t v113 = v118[47];
    uint64_t v114 = v118[36];
    uint32_t v115 = fd_name(v118[30], (char *)buf, 0x100uLL);
    *(_DWORD *)uint64_t v131 = 136316674;
    uint64_t v132 = "_data_map_ext_get_offset_entry";
    __int16 v133 = 1024;
    int v134 = 416;
    __int16 v135 = 2048;
    unint64_t v136 = v89;
    __int16 v137 = 2048;
    uint64_t v138 = v113;
    __int16 v139 = 2048;
    char v140 = v118;
    __int16 v141 = 2048;
    uint64_t v142 = v114;
    __int16 v143 = 2080;
    v144 = v115;
    _os_log_error_impl(&dword_1BD672000, v112, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %lld max %lld %p map: %p %s", v131, 0x44u);
  }
  __error();
  __break(1u);
}

uint64_t qp_array_match_indexes(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(result + 8);
  char v6 = (void *)(result + 16);
  if (*(_DWORD *)(result + 4) >= 5u) {
    char v6 = (void *)*v6;
  }
  if ((int)v5 >= 1)
  {
    do
    {
      unsigned int v8 = v5 - 1;
      uint64_t v9 = v6[3 * (v5 - 1)];
      if (v9) {
        BOOL v10 = v9 == a2;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10)
      {
        uint64_t v11 = &v6[3 * v8];
        uint64_t v12 = v11 + 2;
        if (*((_DWORD *)v11 + 2) >= 0x41u) {
          uint64_t v12 = (void *)*v12;
        }
        int v13 = &v6[3 * v8];
        unsigned int v16 = *((_DWORD *)v13 + 3);
        unsigned int v15 = (unsigned int *)v13 + 3;
        unsigned int v14 = v16;
        if (v16)
        {
          uint64_t v17 = 0;
          do
          {
            if ((*((unsigned __int8 *)v12 + ((unint64_t)v17 >> 3)) >> (v17 & 7)))
            {
              uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v17);
              unsigned int v14 = *v15;
            }
            uint64_t v17 = (v17 + 1);
          }
          while (v17 < v14);
        }
      }
    }
    while (v5-- > 1);
  }
  return result;
}

uint64_t db_eval_obj_qp_array_set_match_at_index(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!a1) {
    return 0;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 4);
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v8 = (void *)(a1 + 16);
  if (v7 >= 5) {
    unsigned int v8 = (void *)*v8;
  }
  if (v6 < 1) {
    goto LABEL_21;
  }
  unsigned int v9 = -1;
  uint64_t v10 = *(unsigned int *)(a1 + 8);
  do
  {
    uint64_t v12 = v10 - 1;
    int v13 = (char *)&v8[3 * (v10 - 1)];
    if (*(void *)v13)
    {
      if (*(void *)v13 == a2)
      {
        int v14 = *(_DWORD *)(a2 + 44);
        if (v14 <= 29)
        {
          uint64_t v15 = (2 << v14);
          goto LABEL_33;
        }
      }
    }
    else
    {
      unsigned int v11 = v10 - 1;
      if (v9 == -1) {
        unsigned int v9 = v11;
      }
    }
    uint64_t v10 = v12;
  }
  while ((unint64_t)(v12 + 1) > 1);
  if ((v9 & 0x80000000) != 0 || (int)v9 >= v6)
  {
LABEL_21:
    int v18 = *(_DWORD *)(a1 + 8);
    if (v6 >= v7)
    {
      unsigned int v20 = 2 * v7;
      uint64_t v19 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 48 * v7, 0x6085D6BuLL);
      if (!v19 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
      {
        v27[0] = 0;
        _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)v27, 2u);
      }
      memcpy(v19, v8, 24 * v20);
      if (*(_DWORD *)(a1 + 4) >= 5u) {
        free(v8);
      }
      *(void *)(a1 + 16) = v19;
      *(_DWORD *)(a1 + 4) = v20;
      int v6 = *(_DWORD *)(a1 + 8);
    }
    else
    {
      uint64_t v19 = (char *)v8;
    }
    int v13 = &v19[24 * v18];
    *(void *)int v13 = a2;
    *((void *)v13 + 1) = 64;
    *((void *)v13 + 2) = 0;
    int v21 = *(_DWORD *)(a2 + 44);
    if (v21 >= 30) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = (2 << v21);
    }
    *(_DWORD *)(a1 + 8) = v6 + 1;
  }
  else
  {
    unsigned int v16 = v9;
    int v13 = (char *)&v8[3 * v9];
    if (*((_DWORD *)v13 + 2) >= 0x41u) {
      free((void *)v8[3 * v9 + 2]);
    }
    *(void *)int v13 = a2;
    *((void *)v13 + 1) = 64;
    v8[3 * v16 + 2] = 0;
    int v17 = *(_DWORD *)(a2 + 44);
    if (v17 >= 30) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = (2 << v17);
    }
  }
LABEL_33:
  unsigned int v22 = *((_DWORD *)v13 + 2);
  uint64_t v23 = v13 + 16;
  if (v22 >= 0x41) {
    uint64_t v23 = (void *)*v23;
  }
  if (v22 <= a3)
  {
    LODWORD(v25) = *((_DWORD *)v13 + 2);
    do
      size_t v25 = (2 * v25);
    while (v25 <= a3);
    if (!(v25 >> 17) && *MEMORY[0x1E4F14B00] < v25) {
      ++sTotal_12395;
    }
    uint64_t v24 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v25, 0x31F9A007uLL);
    if (!v24 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
    }
    memcpy(v24, v23, *((unsigned int *)v13 + 3));
    if (*((_DWORD *)v13 + 2) >= 0x41u) {
      free(v23);
    }
    *((void *)v13 + 2) = v24;
    *((_DWORD *)v13 + 2) = v25;
  }
  else
  {
    uint64_t v24 = v23;
  }
  *((unsigned char *)v24 + ((unint64_t)a3 >> 3)) |= 1 << (a3 & 7);
  if (*((_DWORD *)v13 + 3) <= a3) {
    *((_DWORD *)v13 + 3) = a3 + 1;
  }
  if (v22 <= a3) {
    *(_DWORD *)a1 |= 1u;
  }
  return v15;
}

BOOL db_eval_obj_qp_array_union_for_value(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  unint64_t v3 = (void *)(a1 + 16);
  if (*(_DWORD *)(a1 + 4) >= 5u) {
    unint64_t v3 = (void *)*v3;
  }
  if ((int)v2 < 1) {
    return 0;
  }
  unint64_t v4 = 0;
  BOOL v5 = 0;
  unsigned int v6 = *(_DWORD *)(a1 + 8);
  while (2)
  {
    unsigned int v8 = &v3[3 * --v6];
    if (!*v8 || *(_DWORD *)(*v8 + 44) != a2) {
      goto LABEL_6;
    }
    if (!v4)
    {
      unint64_t v4 = &v3[3 * v6];
      goto LABEL_6;
    }
    unsigned int v9 = *((_DWORD *)v4 + 3);
    unsigned int v10 = HIDWORD(v3[3 * v6 + 1]);
    if (v9 >= v10) {
      unsigned int v11 = &v3[3 * v6];
    }
    else {
      unsigned int v11 = v4;
    }
    if (v9 >= v10) {
      uint64_t v12 = v4;
    }
    else {
      uint64_t v12 = &v3[3 * v6];
    }
    int v13 = v12 + 2;
    if (*((_DWORD *)v12 + 2) >= 0x41u) {
      int v13 = (void *)*v13;
    }
    int v14 = v11 + 2;
    if (*((_DWORD *)v11 + 2) >= 0x41u) {
      int v14 = (void *)*v14;
    }
    unsigned int v15 = *((_DWORD *)v11 + 3);
    if (!v15) {
      goto LABEL_28;
    }
    unsigned int v16 = 0;
    char v17 = 0;
    do
    {
      unint64_t v18 = (unint64_t)v16 >> 3;
      int v19 = *((unsigned __int8 *)v13 + v18);
      int v20 = 1 << (v16 & 7);
      if ((v20 & v19) != 0) {
        goto LABEL_22;
      }
      if ((v20 & *((unsigned char *)v14 + v18)) != 0)
      {
        *((unsigned char *)v13 + v18) = v19 | v20;
        unsigned int v15 = *((_DWORD *)v11 + 3);
LABEL_22:
        char v17 = 1;
      }
      ++v16;
    }
    while (v16 < v15);
    if (v17)
    {
LABEL_33:
      BOOL v5 = 1;
    }
    else
    {
LABEL_28:
      if (v15 <= *((_DWORD *)v12 + 3)) {
        unsigned int v21 = *((_DWORD *)v12 + 3);
      }
      else {
        unsigned int v21 = v15;
      }
      while (1)
      {
        BOOL v5 = v21 != v15;
        if (v21 == v15) {
          break;
        }
        unsigned int v22 = *((unsigned __int8 *)v13 + ((unint64_t)v15 >> 3));
        char v23 = v15++ & 7;
        if ((v22 >> v23)) {
          goto LABEL_33;
        }
      }
    }
    if (v12 == v4 || (v24 = v12 == v8, unsigned int v8 = v4, v24)) {
      *unsigned int v8 = 0;
    }
LABEL_6:
    if (v2-- > 1) {
      continue;
    }
    return v5;
  }
}

BOOL db_eval_obj_qp_array_intersect_for_value(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  unint64_t v3 = (void *)(a1 + 16);
  if (*(_DWORD *)(a1 + 4) >= 5u) {
    unint64_t v3 = (void *)*v3;
  }
  if ((int)v2 >= 1)
  {
    int v4 = 0;
    BOOL v5 = 0;
    unsigned int v6 = 0;
    char v7 = 0;
    unsigned int v8 = *(_DWORD *)(a1 + 8);
    while (1)
    {
      unsigned int v10 = &v3[3 * --v8];
      if (!*v10 || *(_DWORD *)(*v10 + 44) != a2) {
        goto LABEL_6;
      }
      ++v4;
      if (v5)
      {
        if (!v6 || v7)
        {
          unsigned int v12 = *((_DWORD *)v5 + 3);
          unsigned int v13 = HIDWORD(v3[3 * v8 + 1]);
          if (v12 <= v13) {
            int v14 = &v3[3 * v8];
          }
          else {
            int v14 = v5;
          }
          if (v12 <= v13) {
            unsigned int v6 = v5;
          }
          else {
            unsigned int v6 = &v3[3 * v8];
          }
          unsigned int v15 = v6 + 2;
          if (*((_DWORD *)v6 + 2) >= 0x41u) {
            unsigned int v15 = (void *)*v15;
          }
          unsigned int v16 = *((_DWORD *)v14 + 2);
          char v17 = v14 + 2;
          if (v16 >= 0x41) {
            char v17 = (void *)*v17;
          }
          unsigned int v18 = *((_DWORD *)v6 + 3);
          if (v18)
          {
            unsigned int v19 = 0;
            char v20 = 0;
            do
            {
              unint64_t v21 = (unint64_t)v19 >> 3;
              int v22 = *((unsigned __int8 *)v15 + v21);
              int v23 = 1 << (v19 & 7);
              if ((v23 & v22) != 0)
              {
                if ((v23 & *((unsigned char *)v17 + v21)) != 0)
                {
                  char v20 = 1;
                }
                else
                {
                  *((unsigned char *)v15 + v21) = v22 & ~(_BYTE)v23;
                  unsigned int v18 = *((_DWORD *)v6 + 3);
                }
              }
              ++v19;
            }
            while (v19 < v18);
          }
          else
          {
            char v20 = 0;
          }
          char v7 = v20;
          if (v6 == v5)
          {
LABEL_34:
            unsigned int v11 = &v3[3 * v8];
            unsigned int v10 = v5;
LABEL_35:
            *unsigned int v11 = 0;
            unsigned int v6 = v10;
            goto LABEL_6;
          }
        }
        else
        {
          char v7 = 0;
          if (v6 == v5) {
            goto LABEL_34;
          }
        }
        unsigned int v11 = v5;
        if (v6 == v10) {
          goto LABEL_35;
        }
      }
      else
      {
        BOOL v5 = &v3[3 * v8];
      }
LABEL_6:
      if (v2-- <= 1) {
        return v7 || v4 == 1;
      }
    }
  }
  char v7 = 0;
  int v4 = 0;
  return v7 || v4 == 1;
}

uint64_t db_query_tree_apply_block(void *a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    unint64_t v3 = a2;
    a2 = v5;
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 0x40000000;
    v5[2] = __db_query_tree_apply_block_block_invoke;
    v5[3] = &unk_1E6348598;
    v5[4] = v3;
  }
  return db_query_tree_apply_block_with_meta(a1, (uint64_t)a2, a3);
}

uint64_t db_query_ann_subindexes(void *a1, _DWORD *a2)
{
  uint64_t v10 = 0;
  unsigned int v11 = &v10;
  int v13 = 0;
  uint64_t v12 = 0x2000000000;
  uint64_t v6 = 0;
  char v7 = &v6;
  uint64_t v8 = 0x2000000000;
  uint64_t v9 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = __db_query_ann_subindexes_block_invoke;
  v5[3] = &unk_1E63485C0;
  v5[4] = &v10;
  void v5[5] = &v6;
  db_query_tree_apply_block_with_meta(a1, (uint64_t)v5, 0);
  *a2 = *((_DWORD *)v11 + 6);
  uint64_t v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  _Block_object_dispose(&v10, 8);
  return v3;
}

uint64_t __db_query_ann_subindexes_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3 && *(_DWORD *)(v3 + 24) == 15)
  {
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    BOOL v5 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    if (v5) {
      uint64_t v6 = malloc_type_realloc(v5, 4 * *(int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), 0x100004052888210uLL);
    }
    else {
      uint64_t v6 = malloc_type_malloc(4uLL, 0x100004052888210uLL);
    }
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v6;
    *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)
              + 4 * *(int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)
              - 4) = *(_DWORD *)(*(void *)(a2 + 16) + 80);
  }
  return a2;
}

void db_node_set_vector_distance_cache(uint64_t a1, uint64_t a2)
{
  int v4 = *(void *****)(a1 + 24);
  if (!v4)
  {
    *(void *)(a1 + 24) = malloc_type_calloc(1uLL, 8uLL, 0x80040B8603338uLL);
    uint64_t v8 = malloc_type_calloc(2uLL, 1uLL, 0x100004077774924uLL);
    *(void *)(a1 + 40) = v8;
    *uint64_t v8 = 1;
    BOOL v5 = **(void *****)(a1 + 24);
    if (v5) {
      goto LABEL_3;
    }
LABEL_7:
    **(void **)(a1 + 24) = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = *(char *)(v10 + 1);
    *(unsigned char *)(v10 + 1) = v11 + 1;
    char v7 = (void **)(v9 + 8 * v11);
    goto LABEL_8;
  }
  BOOL v5 = *v4;
  if (!v5) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v6 = *v5;
  if (atomic_fetch_add((atomic_uint *volatile)*v5 + 8, 0xFFFFFFFF) == 1)
  {
    free(*v6);
    free(v6);
  }
  char v7 = *(void ***)(a1 + 24);
LABEL_8:
  **char v7 = a2;
}

void *db_query_set_vector_distance_cache(void *result, unsigned int a2, uint64_t a3)
{
  if (a2 <= 2)
  {
    BOOL v5 = result;
    uint64_t v6 = result[3];
    if (!v6)
    {
      result[3] = malloc_type_calloc(3uLL, 8uLL, 0x80040B8603338uLL);
      char v7 = malloc_type_calloc(4uLL, 1uLL, 0x100004077774924uLL);
      void v5[5] = v7;
      *char v7 = 3;
      uint64_t v6 = v5[3];
    }
    uint64_t v8 = a2 + 1;
    uint64_t v9 = *(void **)(v6 + 8 * a2);
    if (v9) {
      uint64_t result = malloc_type_realloc(v9, 8 * *(char *)(v5[5] + v8) + 8, 0x80040B8603338uLL);
    }
    else {
      uint64_t result = malloc_type_malloc(8uLL, 0x80040B8603338uLL);
    }
    *(void *)(v5[3] + 8 * a2) = result;
    uint64_t v10 = *(void *)(v5[3] + 8 * a2);
    uint64_t v11 = v5[5];
    uint64_t v12 = *(char *)(v11 + v8);
    *(unsigned char *)(v11 + v8) = v12 + 1;
    *(void *)(v10 + 8 * v12) = a3;
  }
  return result;
}

BOOL db_query_has_vector_distance_cache(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(char **)(a1 + 40);
  uint64_t v4 = *v3;
  if (v4 < 1) {
    return 0;
  }
  int v5 = v3[a2 + 1];
  if (v5 < 1) {
    return 0;
  }
  uint64_t v6 = 0;
  unint64_t v7 = v4;
  uint64_t v8 = v4;
  BOOL v9 = 1;
  while (1)
  {
    uint64_t v10 = *(void **)(*(void *)(a1 + 24) + 8 * v6);
    if (v10) {
      break;
    }
LABEL_4:
    BOOL v9 = ++v6 < v7;
    if (v6 == v8) {
      return v9;
    }
  }
  uint64_t v11 = v5;
  while (*v10 != a3)
  {
    ++v10;
    if (!--v11) {
      goto LABEL_4;
    }
  }
  return v9;
}

uint64_t db_query_vector_distance_cache_has_room(char *a1)
{
  if (!a1 || *a1 < 1) {
    return 1;
  }
  uint64_t v1 = *a1;
  if (v1 > 0xF)
  {
    uint64_t v2 = v1 & 0x70;
    int16x8_t v5 = vmovl_s8(*(int8x8_t *)(a1 + 1));
    int32x4_t v6 = vmovl_high_s16(v5);
    int32x4_t v7 = vmovl_s16(*(int16x4_t *)v5.i8);
    int16x8_t v8 = vmovl_s8(*(int8x8_t *)(a1 + 9));
    int32x4_t v9 = vmovl_high_s16(v8);
    int32x4_t v10 = vmovl_s16(*(int16x4_t *)v8.i8);
    if ((v1 & 0xF0) != 0x10)
    {
      int16x8_t v11 = vmovl_s8(*(int8x8_t *)(a1 + 17));
      int16x8_t v12 = vmovl_s8(*(int8x8_t *)(a1 + 25));
      int32x4_t v6 = vaddw_high_s16(v6, v11);
      int32x4_t v7 = vaddw_s16(v7, *(int16x4_t *)v11.i8);
      int32x4_t v9 = vaddw_high_s16(v9, v12);
      int32x4_t v10 = vaddw_s16(v10, *(int16x4_t *)v12.i8);
      if (v2 != 32)
      {
        int16x8_t v13 = vmovl_s8(*(int8x8_t *)(a1 + 33));
        int16x8_t v14 = vmovl_s8(*(int8x8_t *)(a1 + 41));
        int32x4_t v6 = vaddw_high_s16(v6, v13);
        int32x4_t v7 = vaddw_s16(v7, *(int16x4_t *)v13.i8);
        int32x4_t v9 = vaddw_high_s16(v9, v14);
        int32x4_t v10 = vaddw_s16(v10, *(int16x4_t *)v14.i8);
        if (v2 != 48)
        {
          int16x8_t v15 = vmovl_s8(*(int8x8_t *)(a1 + 49));
          int16x8_t v16 = vmovl_s8(*(int8x8_t *)(a1 + 57));
          int32x4_t v6 = vaddw_high_s16(v6, v15);
          int32x4_t v7 = vaddw_s16(v7, *(int16x4_t *)v15.i8);
          int32x4_t v9 = vaddw_high_s16(v9, v16);
          int32x4_t v10 = vaddw_s16(v10, *(int16x4_t *)v16.i8);
          if (v2 != 64)
          {
            int16x8_t v17 = vmovl_s8(*(int8x8_t *)(a1 + 65));
            int16x8_t v18 = vmovl_s8(*(int8x8_t *)(a1 + 73));
            int32x4_t v6 = vaddw_high_s16(v6, v17);
            int32x4_t v7 = vaddw_s16(v7, *(int16x4_t *)v17.i8);
            int32x4_t v9 = vaddw_high_s16(v9, v18);
            int32x4_t v10 = vaddw_s16(v10, *(int16x4_t *)v18.i8);
            if (v2 != 80)
            {
              int16x8_t v19 = vmovl_s8(*(int8x8_t *)(a1 + 81));
              int16x8_t v20 = vmovl_s8(*(int8x8_t *)(a1 + 89));
              int32x4_t v6 = vaddw_high_s16(v6, v19);
              int32x4_t v7 = vaddw_s16(v7, *(int16x4_t *)v19.i8);
              int32x4_t v9 = vaddw_high_s16(v9, v20);
              int32x4_t v10 = vaddw_s16(v10, *(int16x4_t *)v20.i8);
              if (v2 != 96)
              {
                int16x8_t v21 = vmovl_s8(*(int8x8_t *)(a1 + 97));
                int16x8_t v22 = vmovl_s8(*(int8x8_t *)(a1 + 105));
                int32x4_t v6 = vaddw_high_s16(v6, v21);
                int32x4_t v7 = vaddw_s16(v7, *(int16x4_t *)v21.i8);
                int32x4_t v9 = vaddw_high_s16(v9, v22);
                int32x4_t v10 = vaddw_s16(v10, *(int16x4_t *)v22.i8);
              }
            }
          }
        }
      }
    }
    int v3 = vaddvq_s32(vaddq_s32(vaddq_s32(v10, v7), vaddq_s32(v9, v6)));
    if (v2 == v1) {
      return v3 < 3;
    }
  }
  else
  {
    uint64_t v2 = 0;
    int v3 = 0;
  }
  uint64_t v23 = v1 - v2;
  BOOL v24 = &a1[v2 + 1];
  do
  {
    int v25 = *v24++;
    v3 += v25;
    --v23;
  }
  while (v23);
  return v3 < 3;
}

uint64_t apply_demorgans_law(void *a1)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = __db_query_tree_apply_block_block_invoke;
  v2[3] = &unk_1E6348598;
  v2[4] = &__block_literal_global_12437;
  return db_query_tree_apply_block_with_meta(a1, (uint64_t)v2, 0);
}

CFStringRef si_lqn_copy_description(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    int v3 = *(const char **)(v2 + 72);
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (v3)
    {
      CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3, 0x8000100u);
      uint64_t v2 = a1[2];
    }
    else
    {
      CFStringRef v5 = @"<null>";
    }
    uint64_t v14 = *a1;
    uint64_t v15 = a1[1];
    uint64_t v16 = v15 + v14 + db_hash_qps(v2);
    int v17 = HIDWORD(v16) - v16;
    int v18 = HIDWORD(v16) - v16 - 8;
    LODWORD(v16) = (v16 - (HIDWORD(v16) - v16) - 1640531527) ^ (v18 << 8);
    unsigned int v19 = (16 - v17 - v16) ^ (v16 >> 13);
    int v20 = (v18 - v16 - v19) ^ (v19 >> 12);
    LODWORD(v16) = (v16 - v19 - v20) ^ (v20 << 16);
    unsigned int v21 = (v19 - v20 - v16) ^ (v16 >> 5);
    int v22 = (v20 - v16 - v21) ^ (v21 >> 3);
    CFStringRef v23 = CFStringCreateWithFormat(v4, 0, @"node:%p hash:%llx type:%d qp:%p op:%d fn:%s s:%@ lc:%p rc:%p", a1, (v21 - v22 - ((v16 - v21 - v22) ^ (v22 << 10))) ^ (((v16 - v21 - v22) ^ (v22 << 10)) >> 15), *((unsigned __int16 *)a1 + 24), v2, *(unsigned int *)(v2 + 24), *(void *)v2, v5, v14, v15);
    CFRelease(v5);
    return v23;
  }
  else
  {
    uint64_t v6 = a1[1] + *a1;
    int v7 = HIDWORD(v6) - v6;
    int v8 = HIDWORD(v6) - v6 - 8;
    LODWORD(v6) = (v6 - (HIDWORD(v6) - v6) - 1640531527) ^ (v8 << 8);
    unsigned int v9 = (16 - v7 - v6) ^ (v6 >> 13);
    int v10 = (v8 - v6 - v9) ^ (v9 >> 12);
    LODWORD(v6) = (v6 - v9 - v10) ^ (v10 << 16);
    unsigned int v11 = (v9 - v10 - v6) ^ (v6 >> 5);
    int v12 = (v10 - v6 - v11) ^ (v11 >> 3);
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"node:%p hash:%llx type:%d lc:%p rc:%p", a1, (v11 - v12 - ((v6 - v11 - v12) ^ (v12 << 10))) ^ (((v6 - v11 - v12) ^ (v12 << 10)) >> 15), *((unsigned __int16 *)a1 + 24), *a1, a1[1]);
  }
}

uint64_t si_lqn_release(uint64_t a1, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = __db_query_tree_apply_block_block_invoke;
  v3[3] = &unk_1E6348598;
  v3[4] = &__block_literal_global_161;
  return db_query_tree_apply_block_with_meta(a2, (uint64_t)v3, 0);
}

void query_node_unique_set_release(uint64_t a1)
{
  if (atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 72), 0xFFFFFFFF, memory_order_relaxed) == 1)
  {
    CFRelease(*(CFTypeRef *)(a1 + 64));
    pthread_mutex_destroy((pthread_mutex_t *)a1);
    free((void *)a1);
  }
}

CFStringRef _query_node_unique_set_copy_description(pthread_mutex_t *a1)
{
  pthread_mutex_lock(a1);
  sig = (const void *)a1[1].__sig;
  if (sig) {
    CFStringRef v3 = CFCopyDescription(sig);
  }
  else {
    CFStringRef v3 = 0;
  }
  pthread_mutex_unlock(a1);
  return v3;
}

uint64_t query_node_unique_release(pthread_mutex_t *a1, void *a2)
{
  pthread_mutex_lock(a1);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = __query_node_unique_release_block_invoke;
  v5[3] = &__block_descriptor_tmp_26_12513;
  v5[4] = a1;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __db_query_tree_apply_block_block_invoke;
  v6[3] = &unk_1E6348598;
  v6[4] = v5;
  db_query_tree_apply_block_with_meta(a2, (uint64_t)v6, 0);
  return pthread_mutex_unlock(a1);
}

uint64_t __query_node_unique_release_block_invoke(uint64_t a1, const void *a2)
{
  return 0;
}

void *query_strdup(const char *a1)
{
  size_t v2 = strlen(a1);
  CFStringRef v3 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v2 + 1, 0x6085D6BuLL);
  if (!v3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)CFStringRef v5 = 0;
    _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", v5, 2u);
  }
  memcpy(v3, a1, v2);
  *((unsigned char *)v3 + v2) = 0;
  return v3;
}

uint64_t _db_rangeCompare(int a1, uint64_t a2, unint64_t a3, unsigned int *a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  int v8 = a1 - 1;
  uint64_t v13 = 4;
  uint64_t v14 = 1;
  switch(a1)
  {
    case 1:
    case 2:
      goto LABEL_3;
    case 3:
    case 4:
      uint64_t v14 = 2;
LABEL_3:
      if ((*(unsigned char *)(a2 + 160) & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_6;
    case 5:
    case 6:
      uint64_t v14 = 4;
      if ((*(unsigned char *)(a2 + 160) & 0x20) != 0)
      {
LABEL_6:
        unint64_t v45 = 0;
        unint64_t v46 = 0;
        unsigned int v48 = *(_DWORD *)(a2 + 208);
        unsigned int v47 = *(_DWORD *)(a2 + 216);
      }
      else
      {
LABEL_4:
        unsigned int v15 = strtoul(**(const char ***)(a2 + 168), 0, 0);
        unint64_t v45 = 0;
        unint64_t v46 = 0;
        unsigned int v47 = strtoul(*(const char **)(*(void *)(a2 + 168) + 8), 0, 0);
        unsigned int v48 = v15;
        *(_DWORD *)(a2 + 208) = v15;
        *(_DWORD *)(a2 + 216) = v47;
        *(_DWORD *)(a2 + 160) |= 0x60u;
      }
      double v16 = 0.0;
      goto LABEL_31;
    case 7:
    case 8:
      if ((*(unsigned char *)(a2 + 160) & 0x80) != 0)
      {
        unsigned int v47 = 0;
        unsigned int v48 = 0;
        unint64_t v45 = *(void *)(a2 + 232);
        unint64_t v46 = *(void *)(a2 + 224);
      }
      else
      {
        unint64_t v17 = strtoull(**(const char ***)(a2 + 168), 0, 0);
        unsigned int v47 = 0;
        unsigned int v48 = 0;
        unint64_t v45 = strtoull(*(const char **)(*(void *)(a2 + 168) + 8), 0, 0);
        unint64_t v46 = v17;
        *(void *)(a2 + 224) = v17;
        *(void *)(a2 + 232) = v45;
        *(_DWORD *)(a2 + 160) |= 0x180u;
      }
      double v16 = 0.0;
      uint64_t v14 = 8;
LABEL_31:
      double v18 = 0.0;
      if (a5) {
        goto LABEL_32;
      }
      goto LABEL_15;
    case 9:
      goto LABEL_11;
    case 10:
    case 12:
      uint64_t v13 = 8;
LABEL_11:
      if ((*(unsigned char *)(a2 + 161) & 4) != 0)
      {
        unsigned int v47 = 0;
        unsigned int v48 = 0;
        unint64_t v45 = 0;
        unint64_t v46 = 0;
        double v16 = *(double *)(a2 + 248);
        double v18 = *(double *)(a2 + 264);
      }
      else
      {
        double v16 = strtod(**(const char ***)(a2 + 168), 0);
        double v18 = strtod(*(const char **)(*(void *)(a2 + 168) + 8), 0);
        unsigned int v47 = 0;
        unsigned int v48 = 0;
        unint64_t v45 = 0;
        unint64_t v46 = 0;
        *(double *)(a2 + 248) = v16;
        *(double *)(a2 + 264) = v18;
        *(_DWORD *)(a2 + 160) |= 0x1400u;
      }
      uint64_t v14 = v13;
      if (a5)
      {
LABEL_32:
        unint64_t v24 = *(void *)(a2 + 32);
        uint64_t v19 = (v24 >> 25) & 1;
        uint64_t v20 = (v24 >> 34) & 1;
        if (!a3)
        {
LABEL_16:
          int v43 = v20;
          int v44 = v19;
          unsigned int v21 = 0;
LABEL_17:
          if (a3) {
            int v22 = v44;
          }
          else {
            int v22 = 0;
          }
          if (v22 & 1) != 0 || ((v43 ^ 1))
          {
            if (v22) {
              return v21;
            }
            else {
              return a6 ^ 1;
            }
          }
          else
          {
            return a7 && *(_DWORD *)(a7 + 8) != 0;
          }
        }
      }
      else
      {
LABEL_15:
        LODWORD(v19) = 0;
        LODWORD(v20) = 0;
        if (!a3) {
          goto LABEL_16;
        }
      }
      if ((v19 | v20) == 1)
      {
        int v43 = v20;
        int v44 = v19;
        unsigned int v21 = 0;
        unsigned int v25 = 0;
        unint64_t v26 = 0;
        while (2)
        {
          switch(v8)
          {
            case 0:
            case 1:
              unsigned int v29 = *((unsigned __int8 *)a4 + v26);
              int v31 = v48 <= v29 && v47 >= v29;
              if (v31 != a6) {
                goto LABEL_35;
              }
              goto LABEL_36;
            case 2:
            case 3:
            case 4:
            case 5:
              unsigned int v27 = *(unsigned int *)((char *)a4 + v26);
              BOOL v28 = v27 < v48 || v27 > v47;
              goto LABEL_52;
            case 6:
            case 7:
              unint64_t v32 = *(void *)((char *)a4 + v26);
              BOOL v28 = v32 < v46 || v32 > v45;
LABEL_52:
              int v33 = !v28;
              if (v33 == a6) {
                goto LABEL_36;
              }
              goto LABEL_35;
            case 8:
              double v36 = *(float *)((char *)a4 + v26);
              int v37 = v16 <= v36;
              if (v18 < v36) {
                int v37 = 0;
              }
              if (v37 == a6) {
                goto LABEL_36;
              }
              goto LABEL_35;
            case 9:
            case 11:
              double v34 = *(double *)((char *)a4 + v26);
              int v35 = v34 >= v16;
              if (v34 > v18) {
                int v35 = 0;
              }
              if (v35 == a6) {
                goto LABEL_36;
              }
              goto LABEL_35;
            default:
              if ((a6 & 1) == 0) {
                goto LABEL_36;
              }
LABEL_35:
              unsigned int v21 = db_eval_obj_qp_array_set_match_at_index(a5, a2, v25);
              db_eval_obj_qp_array_set_match_at_index(a7, a2, v25);
LABEL_36:
              v26 += v14;
              ++v25;
              if (v26 < a3) {
                continue;
              }
              goto LABEL_17;
          }
        }
      }
      BOOL v38 = 0;
      switch(v8)
      {
        case 0:
        case 1:
          unsigned int v40 = *(unsigned __int8 *)a4;
          BOOL v38 = v48 <= v40 && v47 >= v40;
          break;
        case 2:
        case 3:
        case 4:
        case 5:
          BOOL v39 = *a4 < v48 || *a4 > v47;
          goto LABEL_80;
        case 6:
        case 7:
          BOOL v39 = *(void *)a4 < v46 || *(void *)a4 > v45;
LABEL_80:
          BOOL v38 = !v39;
          break;
        case 8:
          double v42 = *(float *)a4;
          BOOL v38 = v16 <= v42;
          if (v18 < v42) {
            BOOL v38 = 0;
          }
          break;
        case 9:
        case 11:
          BOOL v38 = *(double *)a4 >= v16;
          if (*(double *)a4 > v18) {
            BOOL v38 = 0;
          }
          break;
        default:
          return v38 ^ a6;
      }
      return v38 ^ a6;
    default:
      return a6 ^ 1;
  }
}

BOOL db_fieldMatchCompare(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  if (*(_WORD *)a2 == 11)
  {
    if ((*(unsigned char *)(a2 + 2) & 0x10) != 0 && !*(void *)(a3 + 112))
    {
      unsigned int v9 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x180uLL, 0x6085D6BuLL);
      if (!v9 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)stat buf = 0;
        _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
      }
      uint64_t v10 = 0;
      *(_DWORD *)unsigned int v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      *((_DWORD *)v9 + 6) = 0;
      v9[4] = 0;
      v9[5] = 0;
      *((_DWORD *)v9 + 12) = 0;
      v9[7] = 0;
      v9[8] = 0;
      *((_DWORD *)v9 + 18) = 0;
      v9[10] = 0;
      v9[11] = 0;
      *((_DWORD *)v9 + 24) = 0;
      v9[13] = 0;
      v9[14] = 0;
      *((_DWORD *)v9 + 30) = 0;
      *((_DWORD *)v9 + 36) = 0;
      v9[16] = 0;
      v9[17] = 0;
      v9[19] = 0;
      v9[20] = 0;
      *((_DWORD *)v9 + 42) = 0;
      v9[22] = 0;
      v9[23] = 0;
      *((_DWORD *)v9 + 48) = 0;
      v9[25] = 0;
      v9[26] = 0;
      *((_DWORD *)v9 + 54) = 0;
      v9[28] = 0;
      v9[29] = 0;
      *((_DWORD *)v9 + 60) = 0;
      *((_DWORD *)v9 + 66) = 0;
      v9[31] = 0;
      v9[32] = 0;
      *((_DWORD *)v9 + 72) = 0;
      v9[34] = 0;
      v9[35] = 0;
      v9[37] = 0;
      v9[38] = 0;
      *((_DWORD *)v9 + 78) = 0;
      *((_DWORD *)v9 + 84) = 0;
      v9[40] = 0;
      v9[41] = 0;
      *((_DWORD *)v9 + 90) = 0;
      v9[43] = 0;
      v9[44] = 0;
      v9[46] = 0;
      v9[47] = 0;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a3 + 112), (unint64_t *)&v10, (unint64_t)v9, memory_order_relaxed, memory_order_relaxed);
      if (v10) {
        qp_string_id_cache_free(v9);
      }
    }
    if (!*(void *)(a3 + 104))
    {
      size_t v11 = *(int *)(a3 + 40);
      if (((v11 >> 14) & 0x7FFFFFFFFFFFLL) == 0 && 8 * v11 > *MEMORY[0x1E4F14B00]) {
        ++sTotal_12395;
      }
      int v12 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 8uLL, v11, 0x31F9A007uLL);
      if (!v12 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)stat buf = 0;
        _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
      }
      uint64_t v13 = 0;
      atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a3 + 104), (unint64_t *)&v13, (unint64_t)v12, memory_order_relaxed, memory_order_relaxed);
      if (v13) {
        free(v12);
      }
    }
    if (*(int *)(a3 + 40) < 1)
    {
      BOOL v14 = 0;
    }
    else
    {
      uint64_t v15 = 0;
      do
      {
        BOOL v14 = do_compare(a1);
        if (v14 >= 1) {
          break;
        }
        ++v15;
      }
      while (v15 < *(int *)(a3 + 40));
    }
  }
  else
  {
    BOOL v14 = 0;
  }
  if (a6) {
    return !v14;
  }
  else {
    return v14;
  }
}

uint64_t db_count_query_tree(void *a1)
{
  uint64_t v4 = 0;
  CFStringRef v5 = &v4;
  uint64_t v6 = 0x2000000000;
  uint64_t v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = __db_count_query_tree_block_invoke;
  v3[3] = &unk_1E63486C8;
  v3[4] = &v4;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  v8[2] = __db_query_tree_apply_block_block_invoke;
  v8[3] = &unk_1E6348598;
  v8[4] = v3;
  db_query_tree_apply_block_with_meta(a1, (uint64_t)v8, 0);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

uint64_t query_node_is_double_star(uint64_t result)
{
  if (result)
  {
    if (*(_WORD *)(result + 48) == 4 && (uint64_t v1 = *(uint64_t **)(result + 16)) != 0)
    {
      uint64_t result = *v1;
      if (*v1) {
        return strcmp((const char *)result, "**") == 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _query_node_copy_factor_node_expanding_queryTerm(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, _DWORD *a6)
{
  if (*(int *)(a2 + 8) >= 1)
  {
    int v8 = a4;
    int v9 = a3;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v27 = MEMORY[0x1E4F143A8];
    while (1)
    {
      *(void *)stat buf = v27;
      uint64_t v29 = 0x40000000;
      uint64_t v30 = __db_query_tree_apply_block_block_invoke;
      int v31 = &unk_1E6348598;
      unint64_t v32 = &__block_literal_global_21_12478;
      uint64_t tree_apply_block_with_meta = db_query_tree_apply_block_with_meta((void *)a1, (uint64_t)buf, (uint64_t)&__block_literal_global_25);
      uint64_t v16 = *(void *)(tree_apply_block_with_meta + 16);
      *(void *)(v16 + 32) |= 0x8000uLL;
      if (v12 || !v8)
      {
        if (v12 != *(_DWORD *)(a2 + 8) - 1 || a5 == 0)
        {
          uint64_t v18 = a5;
          uint64_t v19 = *(const char **)(*(void *)a2 + 8 * v12);
          size_t v20 = strlen(v19);
          unsigned int v21 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v20 + 1, 0x6085D6BuLL);
          if (!v21 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)stat buf = 0;
            _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
          }
          memcpy(v21, v19, v20);
          *((unsigned char *)v21 + v20) = 0;
          *(void *)(*(void *)(tree_apply_block_with_meta + 16) + 72) = v21;
          a5 = v18;
          int v9 = a3;
          int v8 = a4;
          if (!a3) {
            goto LABEL_28;
          }
LABEL_21:
          if ((*(_WORD *)(a1 + 48) & 8) != 0) {
            int v22 = -1;
          }
          else {
            int v22 = -5;
          }
          if ((v22 + *(_DWORD *)(*(void *)(a1 + 16) + 24)) >= 2) {
            __int16 v23 = 1;
          }
          else {
            __int16 v23 = 2;
          }
          query_node_expand_double_star_in_place(tree_apply_block_with_meta, v23);
          *a6 += 2;
          goto LABEL_28;
        }
        asprintf((char **)(v16 + 72), "%s*", *(const char **)(*(void *)a2 + 8 * v12));
        if (v9) {
          goto LABEL_21;
        }
      }
      else
      {
        asprintf((char **)(v16 + 72), "*%s", **(const char ***)a2);
        if (v9) {
          goto LABEL_21;
        }
      }
LABEL_28:
      if (v13)
      {
        if (*MEMORY[0x1E4F14B00] <= 0x4FuLL) {
          ++sTotal_12395;
        }
        BOOL v14 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x50uLL, 0x31F9A007uLL);
        if (!v14 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)stat buf = 0;
          _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
        }
        v14[24] = 2;
        *(void *)BOOL v14 = v13;
        *((void *)v14 + 1) = tree_apply_block_with_meta;
        ++*a6;
        uint64_t tree_apply_block_with_meta = (uint64_t)v14;
      }
      ++v12;
      uint64_t v13 = tree_apply_block_with_meta;
      if (v12 >= *(int *)(a2 + 8)) {
        return tree_apply_block_with_meta;
      }
    }
  }
  return 0;
}

void query_node_expand_double_star_in_place(uint64_t a1, __int16 a2)
{
  uint64_t v4 = **(void ***)(a1 + 16);
  if (v4)
  {
    free(v4);
    **(void **)(a1 + 16) = 0;
  }
  uint64_t v9 = MEMORY[0x1E4F143A8];
  uint64_t v10 = 0x40000000;
  size_t v11 = __db_query_tree_apply_block_block_invoke;
  uint64_t v12 = &unk_1E6348598;
  uint64_t v13 = &__block_literal_global_21_12478;
  uint64_t tree_apply_block_with_meta = db_query_tree_apply_block_with_meta((void *)a1, (uint64_t)&v9, (uint64_t)&__block_literal_global_25);
  uint64_t v9 = MEMORY[0x1E4F143A8];
  uint64_t v10 = 0x40000000;
  size_t v11 = __db_query_tree_apply_block_block_invoke;
  uint64_t v12 = &unk_1E6348598;
  uint64_t v13 = &__block_literal_global_21_12478;
  uint64_t v6 = db_query_tree_apply_block_with_meta((void *)a1, (uint64_t)&v9, (uint64_t)&__block_literal_global_25);
  uint64_t v7 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 2uLL, 0x6085D6BuLL);
  if (!v7 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    LOWORD(v9) = 0;
    _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)&v9, 2u);
  }
  *uint64_t v7 = 42;
  **(void **)(tree_apply_block_with_meta + 16) = v7;
  int v8 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x13uLL, 0x6085D6BuLL);
  if (!v8 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    LOWORD(v9) = 0;
    _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)&v9, 2u);
  }
  strcpy(v8, "kMDItemTextContent");
  **(void **)(v6 + 16) = v8;
  free_qp(*(void *)(a1 + 16));
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 48) = a2;
  *(void *)a1 = tree_apply_block_with_meta;
  *(_WORD *)(a1 + 56) = *(unsigned __int8 *)(a1 + 57) << 8;
}

void *__query_node_expand_block_invoke_4(int a1, void *a2, void *a3, void *a4)
{
  CFStringRef v5 = a2;
  if (a2 && a3 && a4)
  {
    *a2 = a3;
    a2[1] = a4;
  }
  else
  {
    if (a3)
    {
      uint64_t v7 = MEMORY[0x1E4F143A8];
      uint64_t v8 = 0x40000000;
      uint64_t v9 = __db_query_tree_apply_block_block_invoke;
      uint64_t v10 = &unk_1E6348598;
      size_t v11 = &__block_literal_global_161;
      db_query_tree_apply_block_with_meta(a3, (uint64_t)&v7, 0);
    }
    if (a4)
    {
      uint64_t v7 = MEMORY[0x1E4F143A8];
      uint64_t v8 = 0x40000000;
      uint64_t v9 = __db_query_tree_apply_block_block_invoke;
      uint64_t v10 = &unk_1E6348598;
      size_t v11 = &__block_literal_global_161;
      db_query_tree_apply_block_with_meta(a4, (uint64_t)&v7, 0);
    }
    free(v5);
    return 0;
  }
  return v5;
}

uint64_t __query_node_expand_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(_WORD *)(a2 + 48) != 4) {
    return a2;
  }
  uint64_t v3 = *(void *)(a2 + 16);
  if (*(_DWORD *)(v3 + 24) > 0xBu) {
    return a2;
  }
  unint64_t v4 = *(void *)(v3 + 72);
  if (!v4) {
    return a2;
  }
  uint64_t v5 = *(void *)(v3 + 32);
  if ((v5 & 0x1000008) == 0) {
    return a2;
  }
  uint64_t v6 = (char *)(v4 + strlen(*(const char **)(v3 + 72)));
  uint64_t v7 = v6 - 1;
  if ((unint64_t)(v6 - 1) < v4)
  {
    char v8 = 0;
    unint64_t v9 = 0;
    if ((v5 & 8) == 0) {
      goto LABEL_30;
    }
LABEL_7:
    *(void *)(v3 + 32) = v5 & 0xFFFFFFFFFFFFFFF7;
    if (v9 - 1 > 1) {
      return a2;
    }
    char v72 = 0;
    *(_WORD *)__s = 0;
    char v10 = __tolower(*v6);
    char v11 = 0;
    if (v9 != 1)
    {
      char v11 = __tolower(v6[1]);
      char v72 = 0;
    }
    __s[0] = v10;
    __s[1] = v11;
    uint64_t v67 = 0;
    uint64_t v68 = &v67;
    uint64_t v69 = 0x2000000000;
    uint64_t tree_apply_block_with_meta = 0;
    __dst = (void *)MEMORY[0x1E4F143A8];
    uint64_t v74 = 0x40000000;
    uint64_t v75 = (uint64_t)__db_query_tree_apply_block_block_invoke;
    uint64_t v76 = &unk_1E6348598;
    uint64_t v77 = &__block_literal_global_21_12478;
    uint64_t tree_apply_block_with_meta = db_query_tree_apply_block_with_meta((void *)a2, (uint64_t)&__dst, (uint64_t)&__block_literal_global_25);
    uint64_t v63 = 0;
    uint64_t v64 = &v63;
    uint64_t v65 = 0x2000000000;
    uint64_t v66 = 0;
    v54[0] = MEMORY[0x1E4F143A8];
    v54[1] = 0x40000000;
    int v55 = __query_node_expand_block_invoke_2;
    uint64_t v56 = &unk_1E63488A0;
    unint64_t v59 = v4;
    int v60 = v7;
    uint64_t v61 = a2;
    char v62 = v8 & 1;
    uint64_t v57 = &v63;
    char v58 = &v67;
    unint64_t v12 = strlen(__s);
    if (v12 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    size_t v13 = v12;
    if (v12 >= 0x17)
    {
      uint64_t v20 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17) {
        uint64_t v20 = v12 | 7;
      }
      uint64_t v21 = v20 + 1;
      p_dst = operator new(v20 + 1);
      uint64_t v74 = v13;
      uint64_t v75 = v21 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v75) = v12;
      p_dst = &__dst;
      if (!v12) {
        goto LABEL_40;
      }
    }
    unint64_t v12 = (unint64_t)memcpy(p_dst, __s, v13);
LABEL_40:
    *((unsigned char *)p_dst + v13) = 0;
    incompleteRomajiKanaData(v12);
    int v22 = SHIBYTE(v75);
    __int16 v23 = __dst;
    if (v75 >= 0) {
      unint64_t v24 = (uint64_t *)&__dst;
    }
    else {
      unint64_t v24 = __dst;
    }
    if (v75 >= 0) {
      unint64_t v25 = HIBYTE(v75);
    }
    else {
      unint64_t v25 = v74;
    }
    unint64_t v26 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v24, v25);
    unint64_t v27 = *((void *)&incompleteRomajiKanaData(void)::data + 1);
    if (*((void *)&incompleteRomajiKanaData(void)::data + 1))
    {
      unint64_t v28 = v26;
      uint64_t v53 = v23;
      uint8x8_t v29 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&incompleteRomajiKanaData(void)::data + 8));
      v29.i16[0] = vaddlv_u8(v29);
      unint64_t v30 = v29.u32[0];
      if (v29.u32[0] > 1uLL)
      {
        unint64_t v31 = v26;
        if (v26 >= *((void *)&incompleteRomajiKanaData(void)::data + 1)) {
          unint64_t v31 = v26 % *((void *)&incompleteRomajiKanaData(void)::data + 1);
        }
      }
      else
      {
        unint64_t v31 = (*((void *)&incompleteRomajiKanaData(void)::data + 1) - 1) & v26;
      }
      int v33 = *(uint64_t ***)(incompleteRomajiKanaData(void)::data + 8 * v31);
      if (v33)
      {
        unint64_t v32 = *v33;
        if (*v33)
        {
          uint64_t v34 = *((void *)&incompleteRomajiKanaData(void)::data + 1) - 1;
          unint64_t v52 = v25;
          do
          {
            unint64_t v35 = v32[1];
            if (v28 == v35)
            {
              uint64_t v36 = *((unsigned __int8 *)v32 + 39);
              if ((v36 & 0x80u) == 0) {
                uint64_t v37 = *((unsigned __int8 *)v32 + 39);
              }
              else {
                uint64_t v37 = v32[3];
              }
              if (v37 == v25)
              {
                if ((v36 & 0x80) != 0)
                {
                  uint64_t v43 = v34;
                  unint64_t v44 = v30;
                  int v45 = memcmp((const void *)v32[2], v24, v32[3]);
                  unint64_t v30 = v44;
                  unint64_t v25 = v52;
                  uint64_t v34 = v43;
                  if (!v45) {
                    break;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v32 + 39)) {
                    break;
                  }
                  uint64_t v38 = 0;
                  uint64_t v39 = v36 - 1;
                  do
                  {
                    int v40 = *((unsigned __int8 *)v32 + v38 + 16);
                    int v41 = *((unsigned __int8 *)v24 + v38);
                  }
                  while (v40 == v41 && v39 != v38++);
                  if (v40 == v41) {
                    break;
                  }
                }
              }
            }
            else
            {
              if (v30 <= 1)
              {
                v35 &= v34;
              }
              else if (v35 >= v27)
              {
                v35 %= v27;
              }
              if (v35 != v31) {
                goto LABEL_78;
              }
            }
            unint64_t v32 = (uint64_t *)*v32;
          }
          while (v32);
        }
      }
      else
      {
LABEL_78:
        unint64_t v32 = 0;
      }
      __int16 v23 = v53;
    }
    else
    {
      unint64_t v32 = 0;
    }
    if (v22 < 0) {
      operator delete(v23);
    }
    if (v32)
    {
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      uint64_t v80 = 0;
      std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>(&v78, (long long *)v32[5], (long long *)v32[6], 0xAAAAAAAAAAAAAAABLL * ((v32[6] - v32[5]) >> 3));
      uint64_t v46 = v78;
      if (v79 != v78)
      {
        uint64_t v47 = 0;
        unint64_t v48 = (v79 - v78) / 24;
        if (v48 <= 1) {
          uint64_t v49 = 1;
        }
        else {
          uint64_t v49 = (v79 - v78) / 24;
        }
        do
        {
          ((void (*)(void *, unint64_t, uint64_t))v55)(v54, v48, v47++);
          v46 += 24;
        }
        while (v49 != v47);
      }
      uint64_t v81 = (void **)&v78;
      std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v81);
    }
    free((void *)v64[3]);
    __dst = (void *)MEMORY[0x1E4F143A8];
    uint64_t v74 = 0x40000000;
    uint64_t v75 = (uint64_t)__db_query_tree_apply_block_block_invoke;
    uint64_t v76 = &unk_1E6348598;
    uint64_t v77 = &__block_literal_global_161;
    db_query_tree_apply_block_with_meta((void *)a2, (uint64_t)&__dst, 0);
    uint64_t v50 = v68[3];
    _Block_object_dispose(&v63, 8);
    _Block_object_dispose(&v67, 8);
    return v50;
  }
  unint64_t v9 = 0;
  char v8 = 0;
  uint64_t v15 = MEMORY[0x1E4F14390];
  while (1)
  {
    uint64_t v16 = v7;
    unsigned int v17 = *v7;
    if (v17 == 42)
    {
      if ((v8 & 1) == 0)
      {
        char v8 = 1;
        goto LABEL_25;
      }
      int v18 = *(_DWORD *)(v15 + 228);
      goto LABEL_20;
    }
    if ((v17 & 0x80000000) == 0)
    {
      int v18 = *(_DWORD *)(v15 + 4 * v17 + 60);
LABEL_20:
      if ((v18 & 0x100) == 0) {
        break;
      }
      goto LABEL_24;
    }
    if (!__maskrune(v17, 0x100uLL)) {
      break;
    }
LABEL_24:
    ++v9;
LABEL_25:
    --v7;
    uint64_t v6 = v16;
    if ((unint64_t)(v16 - 1) < v4 || v9 >= 3) {
      goto LABEL_29;
    }
  }
  uint64_t v6 = v7 + 1;
LABEL_29:
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v3 + 32);
  if ((v5 & 8) != 0) {
    goto LABEL_7;
  }
LABEL_30:
  if ((v5 & 0x1000000) == 0) {
    return a2;
  }
  *(void *)(v3 + 32) = v5 & 0xFFFFFFFFFEFFFFFFLL;
  if ((v5 & 0x400) == 0)
  {
    uint64_t v19 = *(const char **)v3;
    if (*(void *)v3)
    {
      if (strcmp(*(const char **)v3, "kMDItemTextContent")) {
        strncmp(v19, "_kMDItemOCRContent", 0x12uLL);
      }
    }
  }
  __dst = 0;
  uint64_t v74 = (uint64_t)&__dst;
  uint64_t v75 = 0x2000000000;
  uint64_t v76 = 0;
  CITokenizerGatherSegments(v4);
  uint64_t v50 = *(void *)(v74 + 24);
  _Block_object_dispose(&__dst, 8);
  if (!v50) {
    return a2;
  }
  return v50;
}

void __query_node_expand_block_invoke_2(uint64_t a1, uint64_t a2, unint64_t a3, const char *a4)
{
  if (a3 <= 0x13)
  {
    uint64_t v21 = v4;
    uint64_t v22 = v5;
    if (!a3)
    {
      char v8 = *(const char **)(a1 + 48);
      size_t v9 = strlen(v8);
      char v10 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v9 + 1, 0x6085D6BuLL);
      if (!v10 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)stat buf = 0;
        _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
      }
      memcpy(v10, v8, v9);
      *((unsigned char *)v10 + v9) = 0;
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v10;
      *(unsigned char *)(*(void *)(a1 + 56)
               - *(void *)(a1 + 48)
               + *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)
               + 1) = 0;
    }
    char v11 = *(void **)(a1 + 64);
    *(void *)stat buf = MEMORY[0x1E4F143A8];
    uint64_t v16 = 0x40000000;
    unsigned int v17 = __db_query_tree_apply_block_block_invoke;
    int v18 = &unk_1E6348598;
    uint64_t v19 = &__block_literal_global_21_12478;
    uint64_t tree_apply_block_with_meta = db_query_tree_apply_block_with_meta(v11, (uint64_t)buf, (uint64_t)&__block_literal_global_25);
    *(void *)stat buf = 0;
    if (*(unsigned char *)(a1 + 72)) {
      size_t v13 = "*";
    }
    else {
      size_t v13 = "";
    }
    asprintf((char **)buf, "%s%s%s", *(const char **)(*(void *)(*(void *)(a1 + 32) + 8) + 24), a4, v13);
    free(*(void **)(*(void *)(tree_apply_block_with_meta + 16) + 72));
    *(void *)(*(void *)(tree_apply_block_with_meta + 16) + 72) = *(void *)buf;
    if (*MEMORY[0x1E4F14B00] <= 0x4FuLL) {
      ++sTotal_12395;
    }
    BOOL v14 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x50uLL, 0x31F9A007uLL);
    if (!v14 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t v20 = 0;
      _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", v20, 2u);
    }
    v14[24] = 1;
    *(void *)BOOL v14 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    *((void *)v14 + 1) = tree_apply_block_with_meta;
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v14;
  }
}

void __query_node_expand_block_invoke_3(uint64_t a1, const char *a2, uint64_t a3, size_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v32 = v7;
    uint64_t v33 = v6;
    uint64_t v34 = v4;
    uint64_t v35 = v5;
    if (*(unsigned char *)(a1 + 56))
    {
      uint64_t v10 = a3;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = MEMORY[0x1E4F143A8];
      do
      {
        uint64_t v16 = *(void **)(a1 + 40);
        uint64_t v27 = v13;
        uint64_t v28 = 0x40000000;
        uint8x8_t v29 = __db_query_tree_apply_block_block_invoke;
        unint64_t v30 = &unk_1E6348598;
        unint64_t v31 = &__block_literal_global_21_12478;
        uint64_t tree_apply_block_with_meta = db_query_tree_apply_block_with_meta(v16, (uint64_t)&v27, (uint64_t)&__block_literal_global_25);
        free(*(void **)(*(void *)(tree_apply_block_with_meta + 16) + 72));
        size_t v18 = *a4++;
        size_t v17 = v18;
        uint64_t v19 = *(void *)(a1 + 48);
        uint64_t v20 = v18 + v12;
        if (*(unsigned char *)(a1 + 57) && v10 == 1 && *(unsigned char *)(v19 + v20) == 42) {
          ++v17;
        }
        *(void *)(*(void *)(tree_apply_block_with_meta + 16) + 72) = strndup((const char *)(v19 + v12), v17);
        if (v11)
        {
          if (*MEMORY[0x1E4F14B00] <= 0x4FuLL) {
            ++sTotal_12395;
          }
          BOOL v14 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x50uLL, 0x31F9A007uLL);
          if (!v14 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
          {
            LOWORD(v27) = 0;
            _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)&v27, 2u);
          }
          void *v14 = v11;
          v14[1] = tree_apply_block_with_meta;
          uint64_t tree_apply_block_with_meta = (uint64_t)v14;
          *((_WORD *)v14 + 24) = 2;
        }
        uint64_t v11 = tree_apply_block_with_meta;
        uint64_t v12 = v20;
        --v10;
      }
      while (v10);
    }
    else
    {
      uint64_t v22 = *(void **)(a1 + 40);
      uint64_t v27 = MEMORY[0x1E4F143A8];
      uint64_t v28 = 0x40000000;
      uint8x8_t v29 = __db_query_tree_apply_block_block_invoke;
      unint64_t v30 = &unk_1E6348598;
      unint64_t v31 = &__block_literal_global_21_12478;
      uint64_t tree_apply_block_with_meta = db_query_tree_apply_block_with_meta(v22, (uint64_t)&v27, (uint64_t)&__block_literal_global_25);
      free(*(void **)(*(void *)(tree_apply_block_with_meta + 16) + 72));
      size_t v23 = strlen(a2);
      unint64_t v24 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v23 + 1, 0x6085D6BuLL);
      if (!v24 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
      {
        LOWORD(v27) = 0;
        _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)&v27, 2u);
      }
      memcpy(v24, a2, v23);
      *((unsigned char *)v24 + v23) = 0;
      *(void *)(*(void *)(tree_apply_block_with_meta + 16) + 72) = v24;
    }
    if (*MEMORY[0x1E4F14B00] <= 0x4FuLL) {
      ++sTotal_12395;
    }
    unint64_t v25 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x50uLL, 0x31F9A007uLL);
    if (!v25 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      LOWORD(v27) = 0;
      _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)&v27, 2u);
    }
    v25[24] = 1;
    uint64_t v26 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (!v26) {
      uint64_t v26 = *(void *)(a1 + 40);
    }
    *(void *)unint64_t v25 = v26;
    *((void *)v25 + 1) = tree_apply_block_with_meta;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v25;
  }
}

CFArrayRef __db_make_query_node_with_ann_block_invoke(uint64_t a1, uint64_t a2, unsigned int a3)
{
  CFArrayRef result = *(const __CFArray **)(a1 + 32);
  if (result)
  {
    if (CFArrayGetCount(result) <= a3) {
      return 0;
    }
    CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), a3);
    BytePtr = CFDataGetBytePtr(ValueAtIndex);
    unsigned int v9 = *(_DWORD *)(a2 + 60) & 0xFFFFFFF3 | (4 * (*(_DWORD *)(a1 + 48) & 3));
    *(_DWORD *)(a2 + 60) = v9;
    unsigned int v10 = v9 & 0xFFFFFFFC | *(_DWORD *)(a1 + 52) & 3;
    *(_DWORD *)(a2 + 60) = v10;
    *(_DWORD *)(a2 + 60) = v10 & 0x1FFFFFF | (*(_WORD *)(a1 + 56) << 25);
    uint64_t v11 = *(unsigned int *)(a1 + 52);
    size_t v12 = -1;
    if (v11 <= 2)
    {
      uint64_t v13 = *(unsigned int *)(a1 + 48);
      if (v13 <= 2) {
        size_t v12 = (vector_dimension_vec_sizes_12485[v11] * vector_size_elem_sizes_12484[v13]);
      }
    }
    if (*(void *)(a1 + 40) == -1)
    {
      return 0;
    }
    else
    {
      BOOL v14 = malloc_type_malloc(v12, 0xDB0F5D7EuLL);
      *(void *)(a2 + 296) = v14;
      *(_DWORD *)(a2 + 160) |= 0x10000u;
      memcpy(v14, BytePtr, v12);
      return (const __CFArray *)1;
    }
  }
  return result;
}

uint64_t parse_comma(char *a1, void *a2)
{
  char v2 = *a1;
  if (!*a1) {
    return 0;
  }
  uint64_t v4 = a1 + 1;
  uint64_t v5 = MEMORY[0x1E4F14390];
  while (v2 < 0)
  {
    if (!__maskrune(v2, 0x4000uLL)) {
      goto LABEL_7;
    }
LABEL_4:
    int v6 = *v4++;
    char v2 = v6;
    if (!v6) {
      return 0;
    }
  }
  if ((*(_DWORD *)(v5 + 4 * v2 + 60) & 0x4000) != 0) {
    goto LABEL_4;
  }
LABEL_7:
  if (*(v4 - 1) != 44) {
    return 0;
  }
  while (1)
  {
    char v8 = v4;
    unsigned int v9 = (char)*v4;
    if (!*v4) {
      break;
    }
    if ((v9 & 0x80000000) != 0)
    {
      ++v4;
      if (!__maskrune(v9, 0x4000uLL)) {
        break;
      }
    }
    else
    {
      ++v4;
      if ((*(_DWORD *)(v5 + 4 * v9 + 60) & 0x4000) == 0) {
        break;
      }
    }
  }
  *a2 = v8;
  return 1;
}

unsigned char *parse_whitespace(unsigned char *a1)
{
  uint64_t v1 = a1;
  char v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = MEMORY[0x1E4F14390];
    do
    {
      if (v2 < 0)
      {
        if (!__maskrune(v2, 0x4000uLL)) {
          return v1;
        }
      }
      else if ((*(_DWORD *)(v3 + 4 * v2 + 60) & 0x4000) == 0)
      {
        return v1;
      }
      int v4 = *++v1;
      char v2 = v4;
    }
    while (v4);
  }
  return v1;
}

void get_proximities(uint64_t a1, char *a2, char **a3)
{
  uint64_t v11 = 0;
  size_t v12 = &v11;
  uint64_t v13 = 0x2000000000;
  uint64_t v14 = 0;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 0x40000000;
  v10[2] = __get_proximities_block_invoke;
  v10[3] = &unk_1E6348910;
  v10[4] = &v11;
  int v6 = _process_proximities(a2, (uint64_t)v10);
  *(_DWORD *)(a1 + 96) = 0;
  uint64_t v7 = v12[3];
  if (v7)
  {
    char v8 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 4 * v7, 0x6085D6BuLL);
    if (v8)
    {
      *(void *)(a1 + 88) = v8;
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 0x40000000;
      v9[2] = __get_proximities_block_invoke_2;
      void v9[3] = &__block_descriptor_tmp_155_12612;
      v9[4] = a1;
      _process_proximities(a2, (uint64_t)v9);
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)stat buf = 0;
        _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
      }
      *(void *)(a1 + 88) = 0;
    }
  }
  *a3 = v6;
  _Block_object_dispose(&v11, 8);
}

uint64_t __get_wildcard_limit_block_invoke(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(*(void *)(result + 32) + 8);
  uint64_t v3 = *(void *)(v2 + 24);
  *(void *)(v2 + 24) = v3 + 1;
  if (!v3) {
    *(_DWORD *)(*(void *)(result + 40) + 60) = a2;
  }
  return result;
}

char *_process_proximities(char *a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (*a1 == 40)
  {
    int v4 = a1 + 1;
    uint64_t v5 = MEMORY[0x1E4F14390];
    while (1)
    {
      uint64_t v2 = v4;
      unsigned int v6 = *v4;
      if (!*v4) {
        break;
      }
      if ((v6 & 0x80000000) != 0)
      {
        int v7 = __maskrune(v6, 0x4000uLL);
        int v4 = v2 + 1;
        if (!v7) {
          break;
        }
      }
      else
      {
        ++v4;
        if ((*(_DWORD *)(v5 + 4 * v6 + 60) & 0x4000) == 0) {
          break;
        }
      }
    }
    __endptr = v2;
LABEL_10:
    while (2)
    {
      int v8 = *v2;
      if (!*v2) {
        return v2;
      }
      if (v8 == 41) {
        return ++v2;
      }
      do
      {
        if ((v8 & 0x80) != 0)
        {
          if (!__maskrune((char)v8, 0x4000uLL)) {
            break;
          }
        }
        else if ((*(_DWORD *)(v5 + 4 * (char)v8 + 60) & 0x4000) == 0)
        {
          break;
        }
        int v9 = *++v2;
        LOBYTE(v8) = v9;
      }
      while (v9);
      __endptr = v2;
      if ((*v2 - 48) > 9)
      {
        char v11 = *v2;
        if (*v2)
        {
          do
          {
LABEL_21:
            if (v11 < 0)
            {
              if (!__maskrune(v11, 0x4000uLL))
              {
LABEL_8:
                __endptr = v2;
                if (*v2 != 41) {
                  break;
                }
                goto LABEL_10;
              }
            }
            else if ((*(_DWORD *)(v5 + 4 * v11 + 60) & 0x4000) == 0)
            {
              goto LABEL_8;
            }
            int v12 = *++v2;
            char v11 = v12;
          }
          while (v12);
        }
      }
      else
      {
        uint64_t v10 = strtol(v2, &__endptr, 0);
        (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a2, v10);
        uint64_t v2 = __endptr;
        char v11 = *__endptr;
        if (*__endptr) {
          goto LABEL_21;
        }
      }
      __endptr = ++v2;
      continue;
    }
  }
  return v2;
}

uint64_t __get_weights_block_invoke(uint64_t result, float a2)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24);
  if (v2 == 1)
  {
    *(float *)(*(void *)(result + 40) + 56) = a2;
  }
  else if (!v2)
  {
    *(float *)(*(void *)(result + 40) + 52) = a2;
  }
  ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24);
  return result;
}

uint64_t __get_proximities_block_invoke(uint64_t result)
{
  return result;
}

uint64_t __get_proximities_block_invoke_2(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 32);
  uint64_t v3 = *(void *)(v2 + 88);
  uint64_t v4 = *(unsigned int *)(v2 + 96);
  *(_DWORD *)(v2 + 96) = v4 + 1;
  *(_DWORD *)(v3 + 4 * v4) = a2;
  return result;
}

void db_dump_query_node_with_prefix(uint64_t a1, uint64_t a2, int a3, void *a4, uint64_t a5)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  long long v45 = 0u;
  long long v44 = 0u;
  long long v43 = 0u;
  long long v42 = 0u;
  long long v41 = 0u;
  long long v40 = 0u;
  long long v39 = 0u;
  long long v38 = 0u;
  long long v37 = 0u;
  long long v36 = 0u;
  long long v35 = 0u;
  long long v34 = 0u;
  long long v33 = 0u;
  long long v32 = 0u;
  long long v31 = 0u;
  long long v30 = 0u;
  long long v29 = 0u;
  long long v28 = 0u;
  long long v27 = 0u;
  long long v26 = 0u;
  long long v25 = 0u;
  long long v24 = 0u;
  long long v23 = 0u;
  long long v22 = 0u;
  long long v21 = 0u;
  long long v20 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  *(_OWORD *)__str = 0u;
  if (a2)
  {
    if (a3 < 0) {
      snprintf(__str, 0x200uLL, "%s[%p][%p]%s");
    }
    else {
      snprintf(__str, 0x200uLL, "%s[%p{%d}][%p]%s");
    }
  }
  else if (a5)
  {
    snprintf(__str, 0x200uLL, "%s[%p]%s");
  }
  else
  {
    snprintf(__str, 0x200uLL, "[%p]%s");
  }
  os_unfair_lock_lock(&db_dump_query_node_with_prefix_s_dump_node_lock);
  int v6 = *__error();
  int v7 = _SILogForLogForCategory(1);
  os_log_type_t v8 = 2 * (dword_1E9FC90A8 < 4);
  if (os_log_type_enabled(v7, v8))
  {
    *(_DWORD *)stat buf = 136315138;
    uint64_t v13 = __str;
    _os_log_impl(&dword_1BD672000, v7, v8, "%s[begin]-------------------------------------------------------------------------------------------", buf, 0xCu);
  }
  *__error() = v6;
  if (a4)
  {
    bzero(buf, 0x800uLL);
    dump_tree_with_prefix(a4, 0, (char *)buf, __str);
  }
  int v9 = *__error();
  uint64_t v10 = _SILogForLogForCategory(1);
  os_log_type_t v11 = 2 * (dword_1E9FC90A8 < 4);
  if (os_log_type_enabled(v10, v11))
  {
    *(_DWORD *)stat buf = 136315138;
    uint64_t v13 = __str;
    _os_log_impl(&dword_1BD672000, v10, v11, "%s[end]-------------------------------------------------------------------------------------------", buf, 0xCu);
  }
  *__error() = v9;
  os_unfair_lock_unlock(&db_dump_query_node_with_prefix_s_dump_node_lock);
}

int *dump_tree_with_prefix(void *a1, int a2, char *a3, const char *a4)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  int v7 = a3 + 2048;
  int64_t v8 = a2;
  do
  {
    if (*a1) {
      dump_tree_with_prefix(*a1, (v8 + 1), a3, a4);
    }
    *a3 = 0;
    int v10 = snprintf(a3, 0x800uLL, "%s", a4);
    os_log_type_t v11 = &a3[v10];
    if (v8 > 32)
    {
      *(void *)&long long v13 = 0x2020202020202020;
      *((void *)&v13 + 1) = 0x2020202020202020;
      *(_OWORD *)os_log_type_t v11 = v13;
      *((_OWORD *)v11 + 1) = v13;
      int v12 = &v11[snprintf(v11 + 32, v7 - (v11 + 32), "(%d) ", v8) + 32];
    }
    else
    {
      memset(&a3[v10], 32, v8);
      int v12 = &v11[v8];
    }
    *int v12 = 0;
    __int16 v14 = *((_WORD *)a1 + 24);
    switch(v14)
    {
      case 1:
        snprintf(v12, v7 - v12, "OR node     @ 0x%p");
        break;
      case 2:
        snprintf(v12, v7 - v12, "AND node    @ 0x%p");
        break;
      case 4:
      case 12:
        uint64_t v15 = a1[2];
        int v16 = *(_DWORD *)(v15 + 24);
        if ((v16 - 11) < 2)
        {
          int v21 = snprintf(v12, v7 - v12, "factor node @ 0x%p flags 0x%llx value <%s%s(%s,%s,%s)>", a1, *(void *)(v15 + 32));
        }
        else if ((v16 - 13) >= 2)
        {
          if (v16 == 15)
          {
            long long v22 = "!";
            if ((v14 & 8) == 0) {
              long long v22 = "";
            }
            int v21 = snprintf(v12, v7 - v12, "factor node @ 0x%p flags 0x%llx value <%s%s(%s,%s,%u,%d,%.3f,%s)>", a1, *(void *)(v15 + 32), v22);
          }
          else
          {
            uint64_t v23 = *(void *)(v15 + 32);
            if ((v23 & 0x6000000) != 0)
            {
              if ((v23 & 0x2000000) != 0 && *(int *)(v15 + 44) <= 0)
              {
                int v21 = snprintf(v12, v7 - v12, "factor node @ 0x%p flags 0x%llx value <%s%s[] %s %s>", a1);
              }
              else
              {
                BOOL v29 = (v14 & 8) == 0;
                long long v24 = "!";
                if (v29) {
                  long long v24 = "";
                }
                int v21 = snprintf(v12, v7 - v12, "factor node @ 0x%p flags 0x%llx value <%s%s[%s%d] %s %s>", a1, v23, v24);
              }
            }
            else
            {
              int v21 = snprintf(v12, v7 - v12, "factor node @ 0x%p flags 0x%llx value <%s%s %s %s>", a1);
            }
          }
        }
        else
        {
          BOOL v29 = (v14 & 8) == 0;
          long long v17 = "!";
          if (v29) {
            long long v17 = "";
          }
          BOOL v29 = v16 == 13;
          long long v18 = "OUT_FIELD_MATCH";
          if (v29) {
            long long v18 = "FIELD_MATCH";
          }
          v12 += snprintf(v12, v7 - v12, "factor node @ 0x%p flags 0x%llx value <%s%s(%s", a1, *(void *)(v15 + 32), v17, v18, *(const char **)v15);
          uint64_t v19 = a1[2];
          if (*(int *)(v19 + 40) >= 1)
          {
            uint64_t v20 = 0;
            do
            {
              v12 += snprintf(v12, v7 - v12, ",%s", *(const char **)(*(void *)(v19 + 168) + 8 * v20++));
              uint64_t v19 = a1[2];
            }
            while (v20 < *(int *)(v19 + 40));
          }
          int v21 = snprintf(v12, v7 - v12, ")>", v37, v38, v39, v40, v41, v42, v43, v44, v45, v46);
        }
        long long v25 = &v12[v21];
        uint64_t v26 = a1[2];
        float v28 = *(float *)(v26 + 52);
        float v27 = *(float *)(v26 + 56);
        BOOL v29 = v27 == 0.0 && v28 == 0.0;
        if (!v29)
        {
          BOOL v30 = v28 > 1.1755e-38 || v28 <= 0.0;
          double v31 = v28;
          if (!v30) {
            double v31 = -1.0;
          }
          BOOL v32 = v27 > 1.1755e-38 || v27 <= 0.0;
          double v33 = v27;
          if (!v32) {
            double v33 = -1.0;
          }
          v25 += snprintf(v25, v7 - v25, " W(%0.10f),fW(%0.10f)", v31, v33);
          uint64_t v26 = a1[2];
        }
        if (*(_DWORD *)(v26 + 60)) {
          snprintf(v25, v7 - v25, " D(%u)");
        }
        break;
      case 9:
        snprintf(v12, v7 - v12, "NOR node     @ 0x%p");
        break;
      case 10:
        snprintf(v12, v7 - v12, "NAND node    @ 0x%p");
        break;
      case 16:
        snprintf(v12, v7 - v12, "ALWAYS FALSE node        @0x%p");
        break;
      case 32:
        snprintf(v12, v7 - v12, "ALWAYS TRUE node        @0x%p");
        break;
      default:
        snprintf(v12, v7 - v12, "we got garbage for node @ 0x%p (type %d qp 0x%p)");
        break;
    }
    int v34 = *__error();
    long long v35 = _SILogForLogForCategory(1);
    os_log_type_t v36 = 2 * (dword_1E9FC90A8 < 4);
    if (os_log_type_enabled(v35, v36))
    {
      *(_DWORD *)stat buf = 136315138;
      unint64_t v48 = a3;
      _os_log_impl(&dword_1BD672000, v35, v36, "%s", buf, 0xCu);
    }
    CFArrayRef result = __error();
    *CFArrayRef result = v34;
    a1 = (void *)a1[1];
    ++v8;
  }
  while (a1);
  return result;
}

size_t render_field_name(uint64_t a1, void **a2, uint64_t a3, size_t *a4, _DWORD *a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  int v10 = *(const char **)a1;
  size_t v11 = strlen(*(const char **)a1);
  size_t v12 = v11 + a3;
  size_t v13 = *a4;
  if (v11 + a3 <= *a4)
  {
    __int16 v14 = (char *)*a2;
  }
  else
  {
    do
      v13 *= 2;
    while (v12 > v13);
    *a4 = v13;
    __int16 v14 = (char *)malloc_type_realloc(*a2, v13, 0x6D1E66BFuLL);
    *a2 = v14;
  }
  memcpy(&v14[a3], v10, v11);
  uint64_t v15 = *(void *)(a1 + 32);
  if ((v15 & 0x800000) == 0 && (v15 & 0x6000000) != 0)
  {
    size_t v16 = v12 + 1;
    size_t v17 = *a4;
    if (v12 + 1 <= *a4)
    {
      long long v18 = *a2;
    }
    else
    {
      do
        v17 *= 2;
      while (v16 > v17);
      *a4 = v17;
      long long v18 = malloc_type_realloc(*a2, v17, 0x6D1E66BFuLL);
      *a2 = v18;
    }
    *((unsigned char *)v18 + v12) = 91;
    if ((*(unsigned char *)(a1 + 35) & 2) != 0)
    {
      size_t v20 = v12 + 2;
      size_t v21 = *a4;
      if (v20 <= *a4)
      {
        long long v22 = *a2;
      }
      else
      {
        do
          v21 *= 2;
        while (v20 > v21);
        *a4 = v21;
        long long v22 = malloc_type_realloc(*a2, v21, 0x6D1E66BFuLL);
        *a2 = v22;
      }
      *((unsigned char *)v22 + v16) = 36;
      uint64_t v23 = *(void *)(a1 + 32);
      *(_OWORD *)__str = 0u;
      long long v34 = 0u;
      int v19 = *(_DWORD *)(a1 + 44);
      if (a5 && (v23 & 0x2000000) != 0)
      {
        uint64_t v24 = *a5;
        if ((int)v24 >= 1)
        {
          for (uint64_t i = 0; i != v24; ++i)
          {
            if (a5[i + 1] == v19)
            {
              int v19 = i;
              goto LABEL_26;
            }
          }
          if ((int)v24 > 29) {
            goto LABEL_26;
          }
        }
        a5[(int)v24 + 1] = v19;
        int v19 = (*a5)++;
      }
    }
    else
    {
      *(_OWORD *)__str = 0u;
      long long v34 = 0u;
      int v19 = *(_DWORD *)(a1 + 44);
      size_t v20 = v12 + 1;
    }
LABEL_26:
    snprintf(__str, 0x20uLL, "%d", v19);
    size_t v26 = strlen(__str);
    size_t v27 = v26 + v20;
    size_t v28 = *a4;
    if (v26 + v20 <= *a4)
    {
      BOOL v29 = (char *)*a2;
    }
    else
    {
      do
        v28 *= 2;
      while (v27 > v28);
      *a4 = v28;
      BOOL v29 = (char *)malloc_type_realloc(*a2, v28, 0x6D1E66BFuLL);
      *a2 = v29;
    }
    memcpy(&v29[v20], __str, v26);
    size_t v12 = v27 + 1;
    size_t v30 = *a4;
    if (v27 + 1 <= *a4)
    {
      double v31 = *a2;
    }
    else
    {
      do
        v30 *= 2;
      while (v12 > v30);
      *a4 = v30;
      double v31 = malloc_type_realloc(*a2, v30, 0x6D1E66BFuLL);
      *a2 = v31;
    }
    *((unsigned char *)v31 + v27) = 93;
  }
  return v12;
}

size_t render_string_protecting_char(const char *a1, void **a2, uint64_t a3, size_t *a4)
{
  int v7 = (char *)a1;
  size_t v8 = strlen(a1);
  uint64_t v9 = 0;
  for (uint64_t i = v7; ; uint64_t i = v11 + 1)
  {
    size_t v11 = strchr(i, 34);
    if (!v11) {
      break;
    }
    ++v9;
  }
  size_t v12 = v8 + a3;
  size_t v13 = v8 + a3 + v9;
  size_t v14 = *a4;
  if (v13 > *a4)
  {
    do
      v14 *= 2;
    while (v13 > v14);
    *a4 = v14;
    *a2 = malloc_type_realloc(*a2, v14, 0x3E98BC13uLL);
  }
  if (v9)
  {
    while (1)
    {
      uint64_t v15 = strchr(v7, 34);
      if (!v15) {
        break;
      }
      size_t v16 = v15;
      int64_t v17 = v15 - v7;
      memcpy((char *)*a2 + a3, v7, v15 - v7);
      *((unsigned char *)*a2 + v17 + a3) = 92;
      long long v18 = (char *)*a2 + v17 + a3;
      a3 += v17 + 2;
      v18[1] = 34;
      v8 += ~v17;
      int v7 = v16 + 1;
    }
    size_t v12 = v8 + a3;
  }
  memcpy((char *)*a2 + a3, v7, v8);
  return v12;
}

size_t _db_render_query_tree(uint64_t a1)
{
  uint64_t v1 = (void **)MEMORY[0x1F4188790](a1);
  v202 = v5;
  uint64_t v215 = *MEMORY[0x1E4F143B8];
  size_t size = v2;
  if (!v1) {
    return 0;
  }
  int v6 = v1;
  int v7 = *v1;
  if (!*v1) {
    return 0;
  }
  size_t v8 = v3;
  size_t v9 = v2;
  if (v4)
  {
    db_optimize_query_tree(v1);
    int v7 = (void *)*v6;
  }
  if (v8)
  {
    size_t v10 = strlen(v8);
    size_t v11 = v10;
    size_t v12 = v202;
    if (v10 <= v9)
    {
      size_t v13 = *v202;
    }
    else
    {
      do
        v9 *= 2;
      while (v10 > v9);
      size_t size = v9;
      size_t v13 = malloc_type_realloc(*v202, v9, 0x6D1E66BFuLL);
      *v202 = v13;
    }
    memcpy(v13, v8, v11);
  }
  else
  {
    size_t v11 = 0;
    size_t v12 = v202;
  }
  memset(v203, 0, 124);
  bzero(&v206, 0x3FF8uLL);
  unint64_t v201 = 1024;
  uint64_t v15 = 1;
  __ptr = v7;
  p_ptr = &__ptr;
  do
  {
    unint64_t v18 = size;
    uint64_t v19 = v15 - 1;
    size_t v20 = &p_ptr[2 * v15 - 2];
    __int16 v21 = *((_WORD *)v20 + 5);
    if ((v21 & 2) != 0)
    {
      size_t v25 = v11 + 1;
      if (v11 + 1 <= size)
      {
        int64_t v17 = *v12;
      }
      else
      {
        do
          v18 *= 2;
        while (v25 > v18);
        size_t size = v18;
        size_t v26 = p_ptr;
        int64_t v17 = malloc_type_realloc(*v12, v18, 0x6D1E66BFuLL);
        p_ptr = v26;
        *size_t v12 = v17;
      }
      *((unsigned char *)v17 + v11) = 40;
      goto LABEL_16;
    }
    if ((v21 & 4) != 0)
    {
      size_t v25 = v11 + 1;
      if (v11 + 1 <= size)
      {
        size_t v28 = *v12;
      }
      else
      {
        do
          v18 *= 2;
        while (v25 > v18);
        size_t size = v18;
        size_t v27 = p_ptr;
        size_t v28 = malloc_type_realloc(*v12, v18, 0x6D1E66BFuLL);
        p_ptr = v27;
        *size_t v12 = v28;
      }
      *((unsigned char *)v28 + v11) = 41;
LABEL_16:
      size_t v11 = v25;
      goto LABEL_17;
    }
    long long v22 = (void *)*v20;
    uint64_t v23 = *(unsigned __int16 *)(*v20 + 48);
    if ((v23 & 0xFFFFFFF7) > 7)
    {
      unsigned int v24 = 0;
      if (v21) {
        goto LABEL_41;
      }
    }
    else
    {
      unsigned int v24 = binding_str[v23 & 0xFFFFFFFFFFFFFFF7];
      if (v21) {
        goto LABEL_41;
      }
    }
    unsigned int v29 = *((unsigned __int16 *)v20 + 4);
    int v30 = *((_DWORD *)v20 + 3);
    if (v22[1] || *v22)
    {
      uint64_t v31 = 3;
      if (v24 < v29) {
        uint64_t v31 = 5;
      }
      uint64_t v32 = v201;
      if (v31 + v19 <= v201)
      {
        if (v24 < v29) {
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t v32 = 2 * v201;
        if (p_ptr != &__ptr)
        {
          p_ptr = reallocf(p_ptr, 32 * v201);
          if (v24 >= v29) {
            goto LABEL_37;
          }
LABEL_48:
          uint64_t v39 = &p_ptr[2 * v19];
          *uint64_t v39 = 0;
          *((_DWORD *)v39 + 2) = 0x40000;
          uint64_t v19 = v15;
          uint64_t v33 = v22[1];
          if (!v33) {
            goto LABEL_39;
          }
          goto LABEL_38;
        }
        uint64_t v50 = malloc_type_malloc(32 * v201, 0x10200403A5D3213uLL);
        memcpy(v50, &__ptr, 16 * v19);
        p_ptr = v50;
        if (v24 < v29) {
          goto LABEL_48;
        }
      }
LABEL_37:
      uint64_t v33 = v22[1];
      if (!v33)
      {
LABEL_39:
        uint64_t v35 = &p_ptr[2 * v19];
        void *v35 = v22;
        *((_WORD *)v35 + 4) = v29;
        *((_WORD *)v35 + 5) = v21 | 1;
        *((_DWORD *)v35 + 3) = v30;
        if (*v22)
        {
          os_log_type_t v36 = &p_ptr[2 * v19 + 2];
          *os_log_type_t v36 = *v22;
          *((_WORD *)v36 + 4) = v24;
          *((_WORD *)v36 + 5) = 0;
          v19 += 2;
        }
        else
        {
          ++v19;
        }
        if (v24 < v29)
        {
          uint64_t v40 = &p_ptr[2 * v19];
          *uint64_t v40 = 0;
          *((_DWORD *)v40 + 2) = 0x20000;
          ++v19;
        }
        unint64_t v201 = v32;
        size_t v12 = v202;
        goto LABEL_17;
      }
LABEL_38:
      long long v34 = &p_ptr[2 * v19];
      *long long v34 = v33;
      *((_WORD *)v34 + 4) = v24;
      *((_WORD *)v34 + 5) = 0;
      ++v19;
      goto LABEL_39;
    }
LABEL_41:
    switch(*(_WORD *)(*v20 + 48))
    {
      case 1:
        size_t v25 = v11 + 2;
        size_t v12 = v202;
        if (v11 + 2 <= size)
        {
          uint64_t v38 = (char *)*v202;
        }
        else
        {
          do
            v18 *= 2;
          while (v25 > v18);
          size_t size = v18;
          uint64_t v37 = p_ptr;
          uint64_t v38 = (char *)malloc_type_realloc(*v202, v18, 0x6D1E66BFuLL);
          p_ptr = v37;
          *v202 = v38;
        }
        *(_WORD *)&v38[v11] = 31868;
        goto LABEL_16;
      case 2:
        size_t v25 = v11 + 2;
        size_t v12 = v202;
        if (v11 + 2 <= size)
        {
          uint64_t v42 = (char *)*v202;
        }
        else
        {
          do
            v18 *= 2;
          while (v25 > v18);
          size_t size = v18;
          uint64_t v41 = p_ptr;
          uint64_t v42 = (char *)malloc_type_realloc(*v202, v18, 0x6D1E66BFuLL);
          p_ptr = v41;
          *v202 = v42;
        }
        *(_WORD *)&v42[v11] = 9766;
        goto LABEL_16;
      case 4:
        uint64_t v43 = v22[2];
        size_t v12 = v202;
        switch(*(_DWORD *)(v43 + 24))
        {
          case 0xB:
            goto LABEL_90;
          case 0xC:
            if (v11 + 1 <= size)
            {
              uint64_t v45 = *v202;
            }
            else
            {
              do
                v18 *= 2;
              while (v11 + 1 > v18);
              size_t size = v18;
              uint64_t v44 = p_ptr;
              uint64_t v45 = malloc_type_realloc(*v202, v18, 0x6D1E66BFuLL);
              p_ptr = v44;
              *v202 = v45;
            }
            *((unsigned char *)v45 + v11) = 33;
            unint64_t v18 = size;
            ++v11;
LABEL_90:
            if (v11 + 8 <= v18)
            {
              uint64_t v64 = p_ptr;
              uint64_t v65 = (char *)*v202;
            }
            else
            {
              do
                v18 *= 2;
              while (v11 + 8 > v18);
              uint64_t v64 = p_ptr;
              size_t size = v18;
              uint64_t v65 = (char *)malloc_type_realloc(*v202, v18, 0x6D1E66BFuLL);
              *v202 = v65;
            }
            *(void *)&v65[v11] = 0x2865676E61526E49;
            size_t v66 = render_field_name(v43, v202, v11 + 8, &size, v203);
            size_t v67 = v66 + 1;
            size_t v68 = size;
            if (v66 + 1 <= size)
            {
              uint64_t v69 = *v202;
            }
            else
            {
              do
                v68 *= 2;
              while (v67 > v68);
              size_t size = v68;
              uint64_t v69 = malloc_type_realloc(*v202, v68, 0x6D1E66BFuLL);
              *v202 = v69;
            }
            *((unsigned char *)v69 + v66) = 44;
            uint64_t v70 = **(const char ***)(v43 + 168);
            size_t v71 = strlen(v70);
            size_t v72 = v71 + v67;
            size_t v73 = size;
            if (v71 + v67 <= size)
            {
              uint64_t v74 = (char *)*v202;
            }
            else
            {
              do
                v73 *= 2;
              while (v72 > v73);
              size_t size = v73;
              uint64_t v74 = (char *)malloc_type_realloc(*v202, v73, 0x6D1E66BFuLL);
              *v202 = v74;
            }
            memcpy(&v74[v67], v70, v71);
            size_t v75 = v72 + 1;
            size_t v76 = size;
            if (v72 + 1 <= size)
            {
              uint64_t v77 = *v202;
            }
            else
            {
              do
                v76 *= 2;
              while (v75 > v76);
              size_t size = v76;
              uint64_t v77 = malloc_type_realloc(*v202, v76, 0x6D1E66BFuLL);
              *v202 = v77;
            }
            *((unsigned char *)v77 + v72) = 44;
            uint64_t v78 = *(const char **)(*(void *)(v43 + 168) + 8);
            size_t v79 = strlen(v78);
            size_t v80 = v79 + v75;
            size_t v81 = size;
            if (v79 + v75 <= size)
            {
              size_t v12 = v202;
              unint64_t v82 = (char *)*v202;
            }
            else
            {
              do
                v81 *= 2;
              while (v80 > v81);
              size_t size = v81;
              size_t v12 = v202;
              unint64_t v82 = (char *)malloc_type_realloc(*v202, v81, 0x6D1E66BFuLL);
              *v202 = v82;
            }
            memcpy(&v82[v75], v78, v79);
            size_t v11 = v80 + 1;
            size_t v83 = size;
            if (v80 + 1 <= size)
            {
              unint64_t v84 = *v12;
            }
            else
            {
              do
                v83 *= 2;
              while (v11 > v83);
              size_t size = v83;
              unint64_t v84 = malloc_type_realloc(*v12, v83, 0x6D1E66BFuLL);
              *size_t v12 = v84;
            }
            p_ptr = v64;
            *((unsigned char *)v84 + v80) = 41;
            goto LABEL_17;
          case 0xD:
            goto LABEL_121;
          case 0xE:
            if (v11 + 1 <= size)
            {
              uint64_t v61 = *v202;
            }
            else
            {
              do
                v18 *= 2;
              while (v11 + 1 > v18);
              size_t size = v18;
              int v60 = p_ptr;
              uint64_t v61 = malloc_type_realloc(*v202, v18, 0x6D1E66BFuLL);
              p_ptr = v60;
              *v202 = v61;
            }
            *((unsigned char *)v61 + v11) = 33;
            unint64_t v18 = size;
            ++v11;
LABEL_121:
            if (v11 + 11 <= v18)
            {
              unint64_t v52 = p_ptr;
              unint64_t v87 = (char *)*v202;
            }
            else
            {
              do
                v18 *= 2;
              while (v11 + 11 > v18);
              unint64_t v52 = p_ptr;
              size_t size = v18;
              unint64_t v87 = (char *)malloc_type_realloc(*v202, v18, 0x6D1E66BFuLL);
              *v202 = v87;
            }
            uint64_t v88 = &v87[v11];
            *(void *)uint64_t v88 = *(void *)"FieldMatch(";
            *(_DWORD *)(v88 + 7) = 677929844;
            size_t v89 = render_field_name(v43, v202, v11 + 11, &size, v203);
            size_t v90 = v89 + 1;
            size_t v91 = size;
            if (v89 + 1 <= size)
            {
              int v92 = *v202;
            }
            else
            {
              do
                v91 *= 2;
              while (v90 > v91);
              size_t size = v91;
              int v92 = malloc_type_realloc(*v202, v91, 0x6D1E66BFuLL);
              *v202 = v92;
            }
            *((unsigned char *)v92 + v89) = 44;
            if (*(int *)(v43 + 40) >= 1)
            {
              uint64_t v93 = 0;
              do
              {
                if (v93)
                {
                  unint64_t v95 = size;
                  if (v90 + 1 <= size)
                  {
                    uint64_t v96 = *v202;
                  }
                  else
                  {
                    do
                      v95 *= 2;
                    while (v90 + 1 > v95);
                    size_t size = v95;
                    uint64_t v96 = malloc_type_realloc(*v202, v95, 0x6D1E66BFuLL);
                    *v202 = v96;
                  }
                  *((unsigned char *)v96 + v90++) = 44;
                }
                unint64_t v97 = size;
                if (v90 + 1 <= size)
                {
                  uint64_t v98 = *v202;
                }
                else
                {
                  do
                    v97 *= 2;
                  while (v90 + 1 > v97);
                  size_t size = v97;
                  uint64_t v98 = malloc_type_realloc(*v202, v97, 0x6D1E66BFuLL);
                  *v202 = v98;
                }
                *((unsigned char *)v98 + v90) = 34;
                size_t v99 = render_string_protecting_char(*(const char **)(*(void *)(v43 + 168) + 8 * v93), v202, v90 + 1, &size);
                size_t v90 = v99 + 1;
                size_t v100 = size;
                if (v99 + 1 <= size)
                {
                  int v94 = *v202;
                }
                else
                {
                  do
                    v100 *= 2;
                  while (v90 > v100);
                  size_t size = v100;
                  int v94 = malloc_type_realloc(*v202, v100, 0x6D1E66BFuLL);
                  *v202 = v94;
                }
                *((unsigned char *)v94 + v99) = 34;
                ++v93;
              }
              while (v93 < *(int *)(v43 + 40));
            }
            size_t v11 = v90 + 1;
            size_t v101 = size;
            if (v90 + 1 <= size)
            {
              int v102 = *v202;
              goto LABEL_150;
            }
            do
              v101 *= 2;
            while (v11 > v101);
            goto LABEL_148;
          case 0xF:
            if (v11 + 9 <= size)
            {
              char v62 = p_ptr;
              uint64_t v63 = (char *)*v202;
            }
            else
            {
              do
                v18 *= 2;
              while (v11 + 9 > v18);
              char v62 = p_ptr;
              size_t size = v18;
              uint64_t v63 = (char *)malloc_type_realloc(*v202, v18, 0x6D1E66BFuLL);
              *v202 = v63;
            }
            uint64_t v103 = &v63[v11];
            *(void *)uint64_t v103 = *(void *)"aNN.data(";
            v103[8] = 40;
            size_t v104 = render_field_name(v43, v202, v11 + 9, &size, v203);
            size_t v105 = v104 + 3;
            size_t v106 = size;
            if (v104 + 3 <= size)
            {
              unsigned int v107 = (char *)*v202;
            }
            else
            {
              do
                v106 *= 2;
              while (v105 > v106);
              size_t size = v106;
              unsigned int v107 = (char *)malloc_type_realloc(*v202, v106, 0x6D1E66BFuLL);
              *v202 = v107;
            }
            uint64_t v111 = &v107[v104];
            v111[2] = 44;
            *(_WORD *)uint64_t v111 = 12332;
            long long v213 = 0u;
            long long v214 = 0u;
            long long v211 = 0u;
            long long v212 = 0u;
            long long v209 = 0u;
            long long v210 = 0u;
            *(_OWORD *)__str = 0u;
            long long v208 = 0u;
            snprintf(__str, 0x80uLL, "%u", (*(_DWORD *)(v43 + 60) >> 4) & 0xFFFFF);
            size_t v112 = strlen(__str);
            size_t v113 = v112 + v105;
            size_t v114 = size;
            if (v112 + v105 <= size)
            {
              uint32_t v115 = (char *)*v202;
            }
            else
            {
              do
                v114 *= 2;
              while (v113 > v114);
              size_t size = v114;
              uint32_t v115 = (char *)malloc_type_realloc(*v202, v114, 0x6D1E66BFuLL);
              *v202 = v115;
            }
            memcpy(&v115[v105], __str, v112);
            size_t v117 = v113 + 1;
            size_t v118 = size;
            if (v113 + 1 <= size)
            {
              uint64_t v119 = *v202;
            }
            else
            {
              do
                v118 *= 2;
              while (v117 > v118);
              size_t size = v118;
              uint64_t v119 = malloc_type_realloc(*v202, v118, 0x6D1E66BFuLL);
              *v202 = v119;
            }
            *((unsigned char *)v119 + v113) = 44;
            snprintf(__str, 0x80uLL, "%g", *(float *)(v43 + 64));
            size_t v122 = strlen(__str);
            size_t v123 = v122 + v117;
            size_t v124 = size;
            if (v122 + v117 <= size)
            {
              unsigned int v125 = (char *)*v202;
            }
            else
            {
              do
                v124 *= 2;
              while (v123 > v124);
              size_t size = v124;
              unsigned int v125 = (char *)malloc_type_realloc(*v202, v124, 0x6D1E66BFuLL);
              *v202 = v125;
            }
            memcpy(&v125[v117], __str, v122);
            size_t v126 = v123 + 1;
            size_t v127 = size;
            if (v123 + 1 <= size)
            {
              int v128 = *v202;
            }
            else
            {
              do
                v127 *= 2;
              while (v126 > v127);
              size_t size = v127;
              int v128 = malloc_type_realloc(*v202, v127, 0x6D1E66BFuLL);
              *v202 = v128;
            }
            *((unsigned char *)v128 + v123) = 44;
            size_t v129 = v123 + 2;
            size_t v130 = size;
            if (*(unsigned char *)(v43 + 63))
            {
              if (v129 <= size)
              {
                uint64_t v131 = *v202;
              }
              else
              {
                do
                  v130 *= 2;
                while (v129 > v130);
                size_t size = v130;
                uint64_t v131 = malloc_type_realloc(*v202, v130, 0x6D1E66BFuLL);
                *v202 = v131;
              }
              char v135 = 49;
            }
            else
            {
              if (v129 <= size)
              {
                uint64_t v131 = *v202;
              }
              else
              {
                do
                  v130 *= 2;
                while (v129 > v130);
                size_t size = v130;
                uint64_t v131 = malloc_type_realloc(*v202, v130, 0x6D1E66BFuLL);
                *v202 = v131;
              }
              char v135 = 48;
            }
            *((unsigned char *)v131 + v126) = v135;
            size_t v11 = v123 + 3;
            size_t v136 = size;
            if (v123 + 3 <= size)
            {
              __int16 v137 = *v202;
            }
            else
            {
              do
                v136 *= 2;
              while (v11 > v136);
              size_t size = v136;
              __int16 v137 = malloc_type_realloc(*v202, v136, 0x6D1E66BFuLL);
              *v202 = v137;
            }
            p_ptr = v62;
            *((unsigned char *)v137 + v129) = 41;
            goto LABEL_17;
          default:
            unint64_t v52 = p_ptr;
            size_t v53 = render_field_name(v22[2], v202, v11, &size, v203);
            uint64_t v54 = *(unsigned int *)(v43 + 24);
            int v55 = "bad op";
            if ((v54 - 9) >= 0xFFFFFFF8) {
              int v55 = off_1E6348830[v54];
            }
            size_t v56 = strlen(v55);
            size_t v57 = v56 + v53;
            size_t v58 = size;
            if (v56 + v53 <= size)
            {
              unint64_t v59 = (char *)*v202;
            }
            else
            {
              do
                v58 *= 2;
              while (v57 > v58);
              size_t size = v58;
              unint64_t v59 = (char *)malloc_type_realloc(*v202, v58, 0x6D1E66BFuLL);
              *v202 = v59;
            }
            memcpy(&v59[v53], v55, v56);
            unint64_t v85 = size;
            if (v57 + 1 <= size)
            {
              uint64_t v86 = *v202;
            }
            else
            {
              do
                v85 *= 2;
              while (v57 + 1 > v85);
              size_t size = v85;
              uint64_t v86 = malloc_type_realloc(*v202, v85, 0x6D1E66BFuLL);
              *v202 = v86;
            }
            *((unsigned char *)v86 + v57) = 34;
            size_t v108 = render_string_protecting_char(*(const char **)(v43 + 72), v202, v57 + 1, &size);
            size_t v11 = v108 + 1;
            size_t v109 = size;
            if (v108 + 1 <= size)
            {
              int v110 = *v202;
            }
            else
            {
              do
                v109 *= 2;
              while (v11 > v109);
              size_t size = v109;
              int v110 = malloc_type_realloc(*v202, v109, 0x6D1E66BFuLL);
              *v202 = v110;
            }
            p_ptr = v52;
            *((unsigned char *)v110 + v108) = 34;
            uint64_t v116 = *(void *)(v43 + 32);
            if ((v116 & 0x10) != 0)
            {
              unint64_t v120 = size;
              if (v108 + 2 <= size)
              {
                unint64_t v121 = *v202;
              }
              else
              {
                do
                  v120 *= 2;
                while (v108 + 2 > v120);
                size_t size = v120;
                unint64_t v121 = malloc_type_realloc(*v202, v120, 0x6D1E66BFuLL);
                p_ptr = v52;
                *v202 = v121;
              }
              *((unsigned char *)v121 + v11) = 99;
              uint64_t v116 = *(void *)(v43 + 32);
              size_t v11 = v108 + 2;
              if ((v116 & 0x800000) == 0)
              {
LABEL_166:
                if ((v116 & 0x20) == 0) {
                  goto LABEL_167;
                }
                goto LABEL_216;
              }
            }
            else if ((v116 & 0x800000) == 0)
            {
              goto LABEL_166;
            }
            size_t v132 = v11 + 1;
            size_t v133 = size;
            if (v11 + 1 <= size)
            {
              int v134 = *v202;
            }
            else
            {
              do
                v133 *= 2;
              while (v132 > v133);
              size_t size = v133;
              int v134 = malloc_type_realloc(*v202, v133, 0x6D1E66BFuLL);
              *v202 = v134;
            }
            *((unsigned char *)v134 + v11) = 102;
            unsigned __int8 v138 = *(unsigned char *)(v43 + 28);
            __str[0] = (v138 / 0x64u) | 0x30;
            __str[1] = (v138 / 0xAu - 10 * ((unsigned __int16)(26 * (v138 / 0xAu)) >> 8)) | 0x30;
            *(_WORD *)&__str[2] = (v138 % 0xAu) | 0x30;
            size_t v139 = strlen(__str);
            size_t v11 = v139 + v132;
            size_t v140 = size;
            if (v139 + v132 <= size)
            {
              __int16 v141 = (char *)*v202;
            }
            else
            {
              do
                v140 *= 2;
              while (v11 > v140);
              size_t size = v140;
              __int16 v141 = (char *)malloc_type_realloc(*v202, v140, 0x6D1E66BFuLL);
              *v202 = v141;
            }
            memcpy(&v141[v132], __str, v139);
            uint64_t v116 = *(void *)(v43 + 32);
            p_ptr = v52;
            if ((v116 & 0x20) == 0)
            {
LABEL_167:
              if ((v116 & 0x40) == 0) {
                goto LABEL_168;
              }
              goto LABEL_221;
            }
LABEL_216:
            unint64_t v142 = size;
            if (v11 + 1 <= size)
            {
              __int16 v143 = *v202;
            }
            else
            {
              do
                v142 *= 2;
              while (v11 + 1 > v142);
              size_t size = v142;
              __int16 v143 = malloc_type_realloc(*v202, v142, 0x6D1E66BFuLL);
              p_ptr = v52;
              *v202 = v143;
            }
            *((unsigned char *)v143 + v11) = 100;
            uint64_t v116 = *(void *)(v43 + 32);
            ++v11;
            if ((v116 & 0x40) == 0)
            {
LABEL_168:
              if ((v116 & 2) == 0) {
                goto LABEL_169;
              }
              goto LABEL_226;
            }
LABEL_221:
            unint64_t v144 = size;
            if (v11 + 1 <= size)
            {
              char v145 = *v202;
            }
            else
            {
              do
                v144 *= 2;
              while (v11 + 1 > v144);
              size_t size = v144;
              char v145 = malloc_type_realloc(*v202, v144, 0x6D1E66BFuLL);
              p_ptr = v52;
              *v202 = v145;
            }
            *((unsigned char *)v145 + v11) = 119;
            uint64_t v116 = *(void *)(v43 + 32);
            ++v11;
            if ((v116 & 2) == 0)
            {
LABEL_169:
              if ((v116 & 4) == 0) {
                goto LABEL_170;
              }
              goto LABEL_231;
            }
LABEL_226:
            unint64_t v146 = size;
            if (v11 + 1 <= size)
            {
              long long v147 = *v202;
            }
            else
            {
              do
                v146 *= 2;
              while (v11 + 1 > v146);
              size_t size = v146;
              long long v147 = malloc_type_realloc(*v202, v146, 0x6D1E66BFuLL);
              p_ptr = v52;
              *v202 = v147;
            }
            *((unsigned char *)v147 + v11) = 114;
            uint64_t v116 = *(void *)(v43 + 32);
            ++v11;
            if ((v116 & 4) == 0)
            {
LABEL_170:
              if ((v116 & 8) == 0) {
                goto LABEL_171;
              }
              goto LABEL_236;
            }
LABEL_231:
            unint64_t v148 = size;
            if (v11 + 1 <= size)
            {
              long long v149 = *v202;
            }
            else
            {
              do
                v148 *= 2;
              while (v11 + 1 > v148);
              size_t size = v148;
              long long v149 = malloc_type_realloc(*v202, v148, 0x6D1E66BFuLL);
              p_ptr = v52;
              *v202 = v149;
            }
            *((unsigned char *)v149 + v11) = 116;
            uint64_t v116 = *(void *)(v43 + 32);
            ++v11;
            if ((v116 & 8) == 0)
            {
LABEL_171:
              if ((v116 & 0x1000000) == 0) {
                goto LABEL_246;
              }
LABEL_241:
              unint64_t v152 = size;
              if (v11 + 1 <= size)
              {
                long long v153 = *v202;
              }
              else
              {
                do
                  v152 *= 2;
                while (v11 + 1 > v152);
                size_t size = v152;
                long long v153 = malloc_type_realloc(*v202, v152, 0x6D1E66BFuLL);
                p_ptr = v52;
                *v202 = v153;
              }
              *((unsigned char *)v153 + v11++) = 115;
              goto LABEL_246;
            }
LABEL_236:
            unint64_t v150 = size;
            if (v11 + 1 <= size)
            {
              long long v151 = *v202;
            }
            else
            {
              do
                v150 *= 2;
              while (v11 + 1 > v150);
              size_t size = v150;
              long long v151 = malloc_type_realloc(*v202, v150, 0x6D1E66BFuLL);
              p_ptr = v52;
              *v202 = v151;
            }
            *((unsigned char *)v151 + v11++) = 106;
            if ((*(void *)(v43 + 32) & 0x1000000) != 0) {
              goto LABEL_241;
            }
LABEL_246:
            if (*(float *)(v43 + 52) != 0.0 || *(float *)(v43 + 56) != 0.0)
            {
              long long v213 = 0u;
              long long v214 = 0u;
              long long v211 = 0u;
              long long v212 = 0u;
              long long v209 = 0u;
              long long v210 = 0u;
              *(_OWORD *)__str = 0u;
              long long v208 = 0u;
              size_t v154 = v11 + 2;
              size_t v155 = size;
              if (v11 + 2 <= size)
              {
                long long v156 = (char *)*v202;
              }
              else
              {
                do
                  v155 *= 2;
                while (v154 > v155);
                size_t size = v155;
                long long v156 = (char *)malloc_type_realloc(*v202, v155, 0x6D1E66BFuLL);
                *v202 = v156;
              }
              *(_WORD *)&v156[v11] = 10327;
              snprintf(__str, 0x80uLL, "%.6g", *(float *)(v43 + 52));
              size_t v157 = strlen(__str);
              size_t v158 = v157 + v154;
              size_t v159 = size;
              if (v157 + v154 <= size)
              {
                uint64_t v160 = (char *)*v202;
              }
              else
              {
                do
                  v159 *= 2;
                while (v158 > v159);
                size_t size = v159;
                uint64_t v160 = (char *)malloc_type_realloc(*v202, v159, 0x6D1E66BFuLL);
                *v202 = v160;
              }
              memcpy(&v160[v154], __str, v157);
              if (*(float *)(v43 + 56) != 0.0)
              {
                size_t v161 = v158 + 1;
                size_t v162 = size;
                if (v158 + 1 <= size)
                {
                  long long v163 = *v202;
                }
                else
                {
                  do
                    v162 *= 2;
                  while (v161 > v162);
                  size_t size = v162;
                  long long v163 = malloc_type_realloc(*v202, v162, 0x6D1E66BFuLL);
                  *v202 = v163;
                }
                *((unsigned char *)v163 + v158) = 44;
                snprintf(__str, 0x80uLL, "%.6g", *(float *)(v43 + 56));
                size_t v164 = strlen(__str);
                size_t v158 = v164 + v161;
                size_t v165 = size;
                if (v164 + v161 <= size)
                {
                  uint64_t v166 = (char *)*v202;
                }
                else
                {
                  do
                    v165 *= 2;
                  while (v158 > v165);
                  size_t size = v165;
                  uint64_t v166 = (char *)malloc_type_realloc(*v202, v165, 0x6D1E66BFuLL);
                  *v202 = v166;
                }
                memcpy(&v166[v161], __str, v164);
              }
              size_t v11 = v158 + 1;
              size_t v167 = size;
              if (v158 + 1 <= size)
              {
                long long v168 = *v202;
              }
              else
              {
                do
                  v167 *= 2;
                while (v11 > v167);
                size_t size = v167;
                long long v168 = malloc_type_realloc(*v202, v167, 0x6D1E66BFuLL);
                *v202 = v168;
              }
              p_ptr = v52;
              *((unsigned char *)v168 + v158) = 41;
            }
            if (*(_DWORD *)(v43 + 60))
            {
              long long v213 = 0u;
              long long v214 = 0u;
              long long v211 = 0u;
              long long v212 = 0u;
              long long v209 = 0u;
              long long v210 = 0u;
              *(_OWORD *)__str = 0u;
              long long v208 = 0u;
              size_t v169 = v11 + 2;
              size_t v170 = size;
              if (v11 + 2 <= size)
              {
                long long v171 = (char *)*v202;
              }
              else
              {
                do
                  v170 *= 2;
                while (v169 > v170);
                size_t size = v170;
                long long v171 = (char *)malloc_type_realloc(*v202, v170, 0x6D1E66BFuLL);
                *v202 = v171;
              }
              *(_WORD *)&v171[v11] = 10316;
              snprintf(__str, 0x80uLL, "%u", *(_DWORD *)(v43 + 60));
              size_t v172 = strlen(__str);
              size_t v173 = v172 + v169;
              size_t v174 = size;
              if (v172 + v169 <= size)
              {
                long long v175 = (char *)*v202;
              }
              else
              {
                do
                  v174 *= 2;
                while (v173 > v174);
                size_t size = v174;
                long long v175 = (char *)malloc_type_realloc(*v202, v174, 0x6D1E66BFuLL);
                *v202 = v175;
              }
              memcpy(&v175[v169], __str, v172);
              size_t v11 = v173 + 1;
              size_t v176 = size;
              if (v173 + 1 <= size)
              {
                long long v177 = *v202;
              }
              else
              {
                do
                  v176 *= 2;
                while (v11 > v176);
                size_t size = v176;
                long long v177 = malloc_type_realloc(*v202, v176, 0x6D1E66BFuLL);
                *v202 = v177;
              }
              p_ptr = v52;
              *((unsigned char *)v177 + v173) = 41;
            }
            uint64_t v178 = *(void *)(v43 + 32) & 0x6000000000;
            if (v178)
            {
              if (v178 == 0x2000000000)
              {
                size_t v179 = v11 + 1;
                size_t v183 = size;
                if (v11 + 1 <= size)
                {
                  uint64_t v181 = *v202;
                  char v182 = 110;
                }
                else
                {
                  do
                    v183 *= 2;
                  while (v179 > v183);
                  size_t size = v183;
                  uint64_t v181 = malloc_type_realloc(*v202, v183, 0x6D1E66BFuLL);
                  p_ptr = v52;
                  *v202 = v181;
                  char v182 = 110;
                }
              }
              else
              {
                size_t v179 = v11 + 1;
                if (v178 == 0x6000000000)
                {
                  size_t v180 = size;
                  if (v179 <= size)
                  {
                    uint64_t v181 = *v202;
                    char v182 = 97;
                  }
                  else
                  {
                    do
                      v180 *= 2;
                    while (v179 > v180);
                    size_t size = v180;
                    uint64_t v181 = malloc_type_realloc(*v202, v180, 0x6D1E66BFuLL);
                    p_ptr = v52;
                    *v202 = v181;
                    char v182 = 97;
                  }
                }
                else
                {
                  size_t v184 = size;
                  if (v179 <= size)
                  {
                    uint64_t v181 = *v202;
                  }
                  else
                  {
                    do
                      v184 *= 2;
                    while (v179 > v184);
                    size_t size = v184;
                    uint64_t v181 = malloc_type_realloc(*v202, v184, 0x6D1E66BFuLL);
                    p_ptr = v52;
                    *v202 = v181;
                  }
                  char v182 = 111;
                }
              }
              *((unsigned char *)v181 + v11) = v182;
              if (*(_DWORD *)(v43 + 96))
              {
                long long v209 = 0u;
                long long v210 = 0u;
                *(_OWORD *)__str = 0u;
                long long v208 = 0u;
                size_t v185 = v179 + 1;
                size_t v186 = size;
                if (v179 + 1 <= size)
                {
                  v187 = *v202;
                }
                else
                {
                  do
                    v186 *= 2;
                  while (v185 > v186);
                  size_t size = v186;
                  v187 = malloc_type_realloc(*v202, v186, 0x6D1E66BFuLL);
                  *v202 = v187;
                }
                *((unsigned char *)v187 + v179) = 40;
                snprintf(__str, 0x40uLL, "%d", **(_DWORD **)(v43 + 88));
                size_t v188 = strlen(__str);
                size_t v90 = v188 + v185;
                size_t v189 = size;
                if (v188 + v185 <= size)
                {
                  v190 = (char *)*v202;
                }
                else
                {
                  do
                    v189 *= 2;
                  while (v90 > v189);
                  size_t size = v189;
                  v190 = (char *)malloc_type_realloc(*v202, v189, 0x6D1E66BFuLL);
                  *v202 = v190;
                }
                memcpy(&v190[v185], __str, v188);
                if (*(_DWORD *)(v43 + 96) >= 2u)
                {
                  unint64_t v191 = 1;
                  do
                  {
                    size_t v193 = v90 + 1;
                    size_t v194 = size;
                    if (v90 + 1 <= size)
                    {
                      v195 = *v202;
                    }
                    else
                    {
                      do
                        v194 *= 2;
                      while (v193 > v194);
                      size_t size = v194;
                      v195 = malloc_type_realloc(*v202, v194, 0x6D1E66BFuLL);
                      *v202 = v195;
                    }
                    *((unsigned char *)v195 + v90) = 44;
                    snprintf(__str, 0x40uLL, "%d", *(_DWORD *)(*(void *)(v43 + 88) + 4 * v191));
                    size_t v196 = strlen(__str);
                    size_t v90 = v196 + v193;
                    size_t v197 = size;
                    if (v196 + v193 <= size)
                    {
                      v192 = (char *)*v202;
                    }
                    else
                    {
                      do
                        v197 *= 2;
                      while (v90 > v197);
                      size_t size = v197;
                      v192 = (char *)malloc_type_realloc(*v202, v197, 0x6D1E66BFuLL);
                      *v202 = v192;
                    }
                    memcpy(&v192[v193], __str, v196);
                    ++v191;
                  }
                  while (v191 < *(unsigned int *)(v43 + 96));
                }
                size_t v11 = v90 + 1;
                size_t v101 = size;
                if (v90 + 1 <= size)
                {
                  int v102 = *v202;
                }
                else
                {
                  do
                    v101 *= 2;
                  while (v11 > v101);
LABEL_148:
                  size_t size = v101;
                  int v102 = malloc_type_realloc(*v202, v101, 0x6D1E66BFuLL);
                  *v202 = v102;
                }
LABEL_150:
                p_ptr = v52;
                *((unsigned char *)v102 + v90) = 41;
              }
              else
              {
                size_t v11 = v179;
              }
            }
            break;
        }
        break;
      case 0x20:
        size_t v25 = v11 + 4;
        size_t v12 = v202;
        if (v11 + 4 <= size)
        {
          uint64_t v49 = (char *)*v202;
        }
        else
        {
          do
            v18 *= 2;
          while (v25 > v18);
          size_t size = v18;
          unint64_t v48 = p_ptr;
          uint64_t v49 = (char *)malloc_type_realloc(*v202, v18, 0x6D1E66BFuLL);
          p_ptr = v48;
          *v202 = v49;
        }
        *(_DWORD *)&v49[v11] = 1702195828;
        goto LABEL_16;
      default:
        size_t v25 = v11 + 5;
        size_t v12 = v202;
        if (v11 + 5 <= size)
        {
          uint64_t v47 = (char *)*v202;
        }
        else
        {
          do
            v18 *= 2;
          while (v25 > v18);
          size_t size = v18;
          uint64_t v46 = p_ptr;
          uint64_t v47 = (char *)malloc_type_realloc(*v202, v18, 0x6D1E66BFuLL);
          p_ptr = v46;
          *v202 = v47;
        }
        os_log_type_t v51 = &v47[v11];
        v51[4] = 101;
        *(_DWORD *)os_log_type_t v51 = 1936482662;
        goto LABEL_16;
    }
LABEL_17:
    uint64_t v15 = v19;
  }
  while (v19);
  if (p_ptr != &__ptr) {
    free(p_ptr);
  }
  size_t v14 = v11 + 1;
  size_t v198 = size;
  if (v11 + 1 <= size)
  {
    v199 = *v12;
  }
  else
  {
    do
      v198 *= 2;
    while (v14 > v198);
    size_t size = v198;
    v199 = malloc_type_realloc(*v12, v198, 0x3D1E281BuLL);
    *size_t v12 = v199;
  }
  *((unsigned char *)v199 + v11) = 0;
  return v14;
}

uint64_t db_node_has_ranking_weights(void *a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2000000000;
  char v7 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = __db_node_has_ranking_weights_block_invoke;
  v3[3] = &unk_1E63487C0;
  v3[4] = &v4;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  v8[2] = __db_query_tree_apply_block_block_invoke;
  v8[3] = &unk_1E6348598;
  v8[4] = v3;
  db_query_tree_apply_block_with_meta(a1, (uint64_t)v8, 0);
  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

uint64_t __db_node_has_ranking_weights_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(unsigned char *)(v2 + 24)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4 && (*(float *)(v4 + 52) != 0.0 || *(float *)(v4 + 56) != 0.0))
  {
    a2 = 0;
    *(unsigned char *)(v2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return a2;
}

uint64_t __db_query_enumerate_matched_qps_for_dbo_block_invoke(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    int v4 = (*(uint64_t (**)(void))(a1[4] + 16))();
    uint64_t v5 = *(void *)(a2 + 16);
    if ((*(unsigned char *)(v5 + 36) & 4) != 0) {
      int v6 = 2;
    }
    else {
      int v6 = v4;
    }
    if (v6 == 2)
    {
      v13[1] = 0;
      v13[2] = 0;
      uint64_t v7 = a1[21];
      uint64_t v8 = a1[22];
      uint64_t v9 = a1[23];
      uint64_t v10 = a1[24];
      uint64_t v12 = a1[25];
      v13[0] = a1[20];
      if (compare_file_by_dbo(v7, v13, v5, 0, v8, v9, 1, v10, v12) == 1) {
        (*(void (**)(void))(a1[5] + 16))();
      }
    }
    else if (v6 == 1)
    {
      (*(void (**)(void))(a1[5] + 16))();
    }
  }
  return a2;
}

void db_query_enumerate_matched_qps_for_dbf(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  memset(&v12[1], 0, 104);
  v12[0] = 0x400000004;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  v11[2] = __db_query_enumerate_matched_qps_for_dbf_block_invoke;
  void v11[3] = &unk_1E6348810;
  v11[6] = a3;
  v11[7] = a4;
  v11[8] = a5;
  v11[9] = a6;
  v11[4] = a7;
  v11[5] = a1;
  v11[10] = v12;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 0x40000000;
  v13[2] = __db_query_tree_apply_block_block_invoke;
  uint64_t v13[3] = &unk_1E6348598;
  v13[4] = v11;
  db_query_tree_apply_block_with_meta(a2, (uint64_t)v13, 0);
  unsigned int v7 = HIDWORD(v12[0]);
  if (HIDWORD(v12[0]) >= 5) {
    uint64_t v8 = (void **)v12[2];
  }
  else {
    uint64_t v8 = (void **)&v12[2];
  }
  if (v12[0])
  {
    uint64_t v9 = LODWORD(v12[1]);
    if (LODWORD(v12[1]))
    {
      uint64_t v10 = v8 + 2;
      do
      {
        if (*((_DWORD *)v10 - 2) >= 0x41u)
        {
          free(*v10);
          *((_DWORD *)v10 - 1) = 0;
          *uint64_t v10 = 0;
        }
        v10 += 3;
        --v9;
      }
      while (v9);
      unsigned int v7 = HIDWORD(v12[0]);
    }
  }
  if (v7 >= 5) {
    free(v8);
  }
}

uint64_t __db_query_enumerate_matched_qps_for_dbf_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3
    && _db_compare_val(*(void *)(a1 + 40), *(unsigned __int16 **)(a1 + 48), v3, *(unsigned int **)(a1 + 56), *(void **)(a1 + 64), *(void *)(a1 + 72), 1))
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  return a2;
}

void _qsort_big_oid_lookups(void *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v37 = a1[6];
  uint64_t v38 = *a1;
  signed int v6 = *((_DWORD *)a1 + 14);
  int v36 = *((_DWORD *)a1 + 15);
  OSAtomicEnqueue(&qsort_cached_allocations, a1, 0);
  if (v2 > v1)
  {
    for (unint64_t i = v4 + 1; ; ++i)
    {
      uint64_t v8 = v2 - v1;
      if (v2 - v1 <= v5 || i > 9) {
        break;
      }
      if (v6 <= 1) {
        signed int v6 = 1;
      }
      uint64_t v10 = getSize(void)::memSize;
      if (!getSize(void)::memSize)
      {
        long long v43 = 0u;
        long long v44 = 0u;
        *(_OWORD *)host_info_out = 0u;
        host_t v11 = MEMORY[0x1C1881C90]();
        mach_msg_type_number_t host_info_outCnt = 12;
        mach_error_t v12 = host_info(v11, 1, host_info_out, &host_info_outCnt);
        if (v12)
        {
          mach_error("flushsize", v12);
          exit(1);
        }
        uint64_t v10 = *((void *)&v44 + 1);
        getSize(void)::memSize = *((void *)&v44 + 1);
      }
      unint64_t v13 = 3 * v10;
      unint64_t v14 = (v13 * (unsigned __int128)0xCCCCCCCCCCCCCCCDLL) >> 64;
      uint64_t v15 = v3;
      if (32 * v8 > v13 / 5) {
        uint64_t v15 = dispatch_group_create();
      }
      if (v8 <= v37 || 32 * v8 >= v14 >> 2)
      {
        uint64_t v18 = _partition_oid_lookups(v38, v1, v2);
      }
      else
      {
        qos_class_t v16 = qos_class_self();
        global_queue = dispatch_get_global_queue(v16, 2uLL);
        uint64_t v18 = _big_partition_oid_lookups(v38, v1, v2, global_queue, v6);
      }
      uint64_t v19 = v18;
      uint64_t v20 = v18 - v1;
      if (v18 < v1)
      {
        uint64_t v32 = __si_assert_copy_extra_329();
        uint64_t v33 = v32;
        long long v34 = "";
        if (v32) {
          long long v34 = v32;
        }
        __message_assert(v32, "sdb2_qsort.cpp", 17, "q>=left", v34, v40);
        free(v33);
        if (__valid_fs(-1)) {
          uint64_t v35 = 2989;
        }
        else {
          uint64_t v35 = 3072;
        }
        *(_DWORD *)uint64_t v35 = -559038737;
        abort();
      }
      __int16 v21 = OSAtomicDequeue(&qsort_cached_allocations, 0);
      if (!v21) {
        __int16 v21 = malloc_type_malloc(0x40uLL, 0x102004053A8A26AuLL);
      }
      *((void *)v21 + 4) = i;
      *((void *)v21 + 5) = v5;
      *((void *)v21 + 6) = v37;
      uint64_t v22 = v2 - v19;
      if (v20 <= v2 - v19)
      {
        uint64_t v23 = v19 - 1;
      }
      else
      {
        uint64_t v22 = v19 - 1 - v1;
        uint64_t v23 = v2;
      }
      if (v20 > v2 - v19) {
        uint64_t v24 = v19;
      }
      else {
        uint64_t v24 = v1;
      }
      if (v20 > v2 - v19) {
        uint64_t v2 = v19 - 1;
      }
      else {
        uint64_t v1 = v19;
      }
      *(void *)__int16 v21 = v38;
      *((void *)v21 + 1) = v24;
      int v25 = (int)(float)((float)((float)(v22 + 1) / (float)(v23 - v24 + 1)) * (float)v6);
      if (v25 <= 1) {
        int v26 = 1;
      }
      else {
        int v26 = v25;
      }
      if (v6 >= v25) {
        int v27 = v26;
      }
      else {
        int v27 = 0;
      }
      v21[14] = v6 - v27;
      v21[15] = v36;
      *((void *)v21 + 2) = v23;
      *((void *)v21 + 3) = v15;
      if (v15 == v3)
      {
        if (v6 >= v25) {
          signed int v6 = v26;
        }
        qos_class_t v30 = qos_class_self();
        uint64_t v31 = dispatch_get_global_queue(v30, 2uLL);
        dispatch_group_async_f(v3, v31, v21, (dispatch_function_t)_qsort_big_oid_lookups);
      }
      else
      {
        v21[14] = v6;
        _qsort_big_oid_lookups(v21);
        dispatch_group_wait(v15, 0xFFFFFFFFFFFFFFFFLL);
        dispatch_release(v15);
        qos_class_t v28 = qos_class_self();
        unsigned int v29 = dispatch_get_global_queue(v28, 2uLL);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 0x40000000;
        v40[0] = ___ZL22_qsort_big_oid_lookupsPv_block_invoke;
        v40[1] = &__block_descriptor_tmp_8_12728;
        v40[2] = v21;
        dispatch_async(v29, block);
      }
      if (v2 <= v1) {
        return;
      }
    }
    _qsort_oid_lookups(v38, v1, v2);
  }
}

uint64_t _big_partition_oid_lookups(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4, unsigned int a5)
{
  uint64_t v7 = a3 - a2;
  BOOL v8 = __OFADD__(a3 - a2, 1);
  unint64_t v9 = a3 - a2 + 1;
  uint64_t v10 = (void *)(a1 + 32 * a2);
  unint64_t v11 = v7 + 2;
  if (((v9 & 0x8000000000000000) != 0) == v8) {
    unint64_t v11 = v7 + 1;
  }
  mach_error_t v12 = &v10[4 * (v11 >> 1)];
  unint64_t v13 = (void *)(a1 + 32 * a3);
  if (v7 < 64)
  {
    qos_class_t v28 = (void *)(a1 + 32 * a3);
    uint64_t v18 = v10;
    goto LABEL_91;
  }
  unint64_t v14 = v9 >> 3;
  uint64_t v15 = &v10[4 * (v9 >> 3)];
  uint64_t v16 = *v10;
  uint64_t v17 = *v15;
  uint64_t v18 = v10;
  if (*v10 == *v15) {
    goto LABEL_34;
  }
  uint64_t v19 = &v10[8 * v14];
  uint64_t v20 = *v19;
  if (*v19 == v16 || v20 == v17)
  {
    uint64_t v18 = &v10[8 * v14];
  }
  else
  {
    unint64_t v22 = v10[2];
    unint64_t v23 = v15[2];
    unint64_t v24 = v19[2];
    BOOL v25 = v16 < v17;
    if (v22 != v23) {
      BOOL v25 = 0;
    }
    if (v22 >= v23 && !v25)
    {
      BOOL v29 = v17 > v20;
      if (v23 != v24) {
        BOOL v29 = 0;
      }
      if (v23 <= v24)
      {
        uint64_t v18 = &v10[4 * (v9 >> 3)];
        if (!v29)
        {
          if (v16 < v20 && v22 == v24 || (uint64_t v18 = &v10[8 * v14], v22 < v24)) {
            uint64_t v18 = v10;
          }
        }
        goto LABEL_34;
      }
    }
    else
    {
      BOOL v27 = v17 < v20;
      if (v23 != v24) {
        BOOL v27 = 0;
      }
      if (v23 >= v24)
      {
        uint64_t v18 = &v10[4 * (v9 >> 3)];
        if (!v27)
        {
          if (v16 >= v20 || (uint64_t v18 = &v10[8 * v14], v22 != v24))
          {
            if (v22 < v24) {
              uint64_t v18 = &v10[8 * v14];
            }
            else {
              uint64_t v18 = v10;
            }
          }
        }
        goto LABEL_34;
      }
    }
    uint64_t v18 = &v10[4 * (v9 >> 3)];
  }
LABEL_34:
  uint64_t v30 = 2 * v14;
  uint64_t v31 = -(uint64_t)v14;
  uint64_t v32 = &v12[-4 * v14];
  uint64_t v33 = *v32;
  uint64_t v34 = *v12;
  if (*v32 == *v12) {
    goto LABEL_65;
  }
  uint64_t v35 = &v12[4 * v14];
  uint64_t v36 = *v35;
  if (*v35 == v33 || v36 == v34)
  {
    mach_error_t v12 = v35;
    goto LABEL_66;
  }
  unint64_t v38 = v32[2];
  unint64_t v39 = v12[2];
  unint64_t v40 = v35[2];
  BOOL v41 = v33 < v34;
  if (v38 != v39) {
    BOOL v41 = 0;
  }
  if (v38 < v39 || v41)
  {
    BOOL v43 = v34 < v36;
    if (v39 != v40) {
      BOOL v43 = 0;
    }
    if (v39 >= v40 && !v43)
    {
      mach_error_t v12 = v38 < v40 ? v35 : v32;
      if (v33 < v36 && v38 == v40) {
        mach_error_t v12 = v35;
      }
    }
    goto LABEL_66;
  }
  BOOL v45 = v34 > v36;
  if (v39 != v40) {
    BOOL v45 = 0;
  }
  if (v39 <= v40 && !v45)
  {
    if (v33 < v36 && v38 == v40 || (mach_error_t v12 = v35, v38 < v40)) {
LABEL_65:
    }
      mach_error_t v12 = v32;
  }
LABEL_66:
  qos_class_t v28 = &v13[-4 * v30];
  uint64_t v46 = &v13[4 * v31];
  uint64_t v47 = *v28;
  uint64_t v48 = *v46;
  if (*v28 == *v46) {
    goto LABEL_91;
  }
  uint64_t v49 = *v13;
  if (*v13 == v47 || v49 == v48) {
    goto LABEL_87;
  }
  unint64_t v50 = v28[2];
  unint64_t v51 = v46[2];
  unint64_t v52 = v13[2];
  BOOL v53 = v47 < v48;
  if (v50 != v51) {
    BOOL v53 = 0;
  }
  if (v50 >= v51 && !v53)
  {
    BOOL v54 = v48 > v49;
    if (v51 != v52) {
      BOOL v54 = 0;
    }
    if (v51 <= v52 && !v54)
    {
      if (v47 < v49 && v50 == v52 || v50 < v52) {
        goto LABEL_91;
      }
LABEL_87:
      qos_class_t v28 = v13;
      goto LABEL_91;
    }
LABEL_88:
    qos_class_t v28 = v46;
    goto LABEL_91;
  }
  BOOL v55 = v48 < v49;
  if (v51 != v52) {
    BOOL v55 = 0;
  }
  if (v51 < v52 || v55) {
    goto LABEL_88;
  }
  if (v47 < v49 && v50 == v52) {
    goto LABEL_87;
  }
  if (v50 < v52) {
    qos_class_t v28 = v13;
  }
LABEL_91:
  uint64_t v56 = *v18;
  uint64_t v57 = *v12;
  if (*v18 == *v12) {
    goto LABEL_116;
  }
  uint64_t v58 = *v28;
  if (*v28 == v56 || v58 == v57) {
    goto LABEL_108;
  }
  unint64_t v60 = v18[2];
  unint64_t v61 = v12[2];
  unint64_t v62 = v28[2];
  BOOL v63 = v56 < v57;
  if (v60 != v61) {
    BOOL v63 = 0;
  }
  if (v60 >= v61 && !v63)
  {
    BOOL v66 = v57 > v58;
    if (v61 != v62) {
      BOOL v66 = 0;
    }
    if (v61 > v62 || v66) {
      goto LABEL_120;
    }
    if (v56 >= v58 || v60 != v62)
    {
      mach_error_t v12 = v28;
      if (v60 >= v62) {
        goto LABEL_120;
      }
    }
LABEL_116:
    mach_error_t v12 = v18;
    goto LABEL_120;
  }
  BOOL v65 = v57 < v58;
  if (v61 != v62) {
    BOOL v65 = 0;
  }
  if (v61 >= v62 && !v65)
  {
    if (v56 < v58 && v60 == v62)
    {
LABEL_108:
      mach_error_t v12 = v28;
      goto LABEL_120;
    }
    if (v60 < v62) {
      mach_error_t v12 = v28;
    }
    else {
      mach_error_t v12 = v18;
    }
  }
LABEL_120:
  long long v68 = *((_OWORD *)v12 + 1);
  v69[0] = *(_OWORD *)v12;
  v69[1] = v68;
  return parallel_partition_oid_lookups(v10, v9, v69, a4, a5) + a2;
}

void ___ZL22_qsort_big_oid_lookupsPv_block_invoke(uint64_t a1)
{
  madvise((void *)(**(void **)(a1 + 32) + 32 * *(void *)(*(void *)(a1 + 32) + 8)), 32 * (*(void *)(*(void *)(a1 + 32) + 16) - *(void *)(*(void *)(a1 + 32) + 8)), 4);
  uint64_t v2 = *(void **)(a1 + 32);
  OSAtomicEnqueue(&qsort_cached_allocations, v2, 0);
}

uint64_t parallel_partition_oid_lookups(void *a1, uint64_t a2, long long *a3, NSObject *a4, unsigned int a5)
{
  int v5 = a5;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  context[6] = a1;
  size_t v10 = 8 * a5;
  MEMORY[0x1F4188790](a1);
  mach_error_t v12 = (char *)&context[-1] - v11;
  bzero((char *)&context[-1] - v11, v10);
  long long v13 = a3[1];
  long long v20 = *a3;
  long long v21 = v13;
  unint64_t v22 = v12;
  uint64_t v14 = (a2 / 0x4000) << 13;
  uint64_t v15 = a2 - v14;
  context[1] = v14;
  context[2] = a2;
  context[4] = 0;
  context[5] = 0;
  if (v5 >= 1) {
    memset(v12, 255, v10);
  }
  uint64_t v16 = v14 + 0x2000;
  if (v15 > v14 + 0x2000) {
    uint64_t v16 = a2 - ((a2 / 0x4000) << 13);
  }
  context[3] = v15 + ((v16 - v15 + 0x1FFF) & 0xFFFFFFFFFFFFE000);
  context[0] = 0;
  if (32 * a2 >= (unint64_t)(4 * *MEMORY[0x1E4F14B00])) {
    madvise(a1, 32 * a2, 3);
  }
  if (a2 / 0x4000 < v5) {
    int v5 = a2 / 0x4000;
  }
  dispatch_apply_f(v5, a4, context, (void (__cdecl *)(void *, size_t))partition_phase_oid_lookups);
  return sequential_fixup_oid_lookups((uint64_t)context, a2, v5);
}

uint64_t sequential_fixup_oid_lookups(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = a3;
  qsort(*(void **)(a1 + 88), a3, 8uLL, (int (__cdecl *)(const void *, const void *))index_comp);
  uint64_t v61 = 0;
  uint64_t v60 = 0;
  uint64_t v7 = *(void *)(a1 + 88);
  uint64_t v8 = a3 - 1;
  uint64_t v9 = 0;
  if (a3 < 1) {
    goto LABEL_99;
  }
  while (*(void *)(v7 + 8 * v9) == -1)
  {
    if (v6 == ++v9)
    {
      uint64_t v9 = v6;
      break;
    }
  }
  if (a3 == 1)
  {
    uint64_t v8 = 0;
  }
  else
  {
LABEL_99:
    do
    {
      if (*(void *)(v7 + 8 * v8) != -1) {
        break;
      }
      --v8;
    }
    while (v8);
  }
  while (v9 < v8)
  {
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(v7 + 8 * v9);
    long long v12 = *(_OWORD *)(a1 + 72);
    uint64_t v13 = v10 + 32 * *(void *)(v7 + 8 * v8);
    v59[0] = *(_OWORD *)(a1 + 56);
    v59[1] = v12;
    int v14 = neutralize_oid_lookups(v10 + 32 * v11, v13, v59, &v60, &v61);
    uint64_t v7 = *(void *)(a1 + 88);
    if ((v14 & 1) == 0)
    {
      uint64_t v15 = *(void *)(v7 + 8 * v9);
      if ((v15 & 0x8000000000000000) == 0 && v15 < *(void *)(a1 + 32))
      {
        *(void *)(v7 + 8 * v9) = -1;
        *(void *)(a1 + 32) += 0x2000;
      }
      ++v9;
      uint64_t v60 = 0;
      if ((v14 - 1) > 1) {
        continue;
      }
    }
    uint64_t v16 = *(void *)(v7 + 8 * v8);
    BOOL v17 = v16 >= a2 || v16 < a2 - *(void *)(a1 + 40);
    if (!v17)
    {
      *(void *)(v7 + 8 * v8) = -1;
      *(void *)(a1 + 40) += 0x2000;
    }
    --v8;
    uint64_t v61 = 0;
  }
  unint64_t v19 = *(void *)(a1 + 32);
  uint64_t v18 = *(void *)(a1 + 40);
  long long v20 = malloc_type_malloc(0x40000uLL, 0x9C7ED328uLL);
  if (a3 < 1)
  {
    uint64_t v35 = *(void *)a1;
    uint64_t v36 = *(void *)(a1 + 16) - 1;
  }
  else
  {
    uint64_t v21 = 0;
    unint64_t v22 = ~v18 + a2;
    uint64_t v23 = a3;
    unint64_t v24 = *(uint64_t **)(a1 + 88);
    uint64_t v25 = 8 * a3;
    do
    {
      unint64_t v26 = v24[v21];
      if (v26 != -1 && v22 <= v26) {
        break;
      }
      if (v26 != -1)
      {
        if (v19 <= v26) {
          break;
        }
        unint64_t v28 = *(void *)(a1 + 32);
        if (v28 > v26)
        {
          unint64_t v29 = 0;
          do
          {
            if (v24[v29 / 8] == v28)
            {
              v28 += 0x2000;
              *(void *)(a1 + 32) = v28;
            }
            v29 += 8;
          }
          while (v25 != v29);
          if ((int64_t)v28 >= *(void *)a1) {
            break;
          }
          memcpy(v20, (const void *)(*(void *)(a1 + 48) + 32 * v24[v21]), 0x40000uLL);
          memcpy((void *)(*(void *)(a1 + 48) + 32 * *(void *)(*(void *)(a1 + 88) + 8 * v21)), (const void *)(*(void *)(a1 + 48) + 32 * *(void *)(a1 + 32)), 0x40000uLL);
          memcpy((void *)(*(void *)(a1 + 48) + 32 * *(void *)(a1 + 32)), v20, 0x40000uLL);
          unint64_t v24 = *(uint64_t **)(a1 + 88);
          v24[v21] = *(void *)(a1 + 32);
          *(void *)(a1 + 32) += 0x2000;
        }
      }
      ++v21;
    }
    while (v21 != v23);
    uint64_t v30 = v23;
    do
    {
      unint64_t v31 = v24[(v30 - 1)];
      if (v19 > v31) {
        break;
      }
      if (v31 != -1)
      {
        if (v22 > v31) {
          break;
        }
        uint64_t v32 = (v30 - 1);
        uint64_t v33 = *(void *)(a1 + 40) + 0x2000;
        *(void *)(a1 + 40) = v33;
        uint64_t v34 = v23 + 1;
        do
        {
          if (v24[(v34 - 2)] == a2 - v33)
          {
            v33 += 0x2000;
            *(void *)(a1 + 40) = v33;
          }
          --v34;
        }
        while (v34 > 1);
        if ((unint64_t)(a2 - v33) < *(void *)(a1 + 16)) {
          break;
        }
        memcpy(v20, (const void *)(*(void *)(a1 + 48) + 32 * v24[v32]), 0x40000uLL);
        memcpy((void *)(*(void *)(a1 + 48) + 32 * *(void *)(*(void *)(a1 + 88) + 8 * v32)), (const void *)(*(void *)(a1 + 48) + 32 * (a2 - *(void *)(a1 + 40))), 0x40000uLL);
        memcpy((void *)(*(void *)(a1 + 48) + 32 * (a2 - *(void *)(a1 + 40))), v20, 0x40000uLL);
        unint64_t v24 = *(uint64_t **)(a1 + 88);
        v24[v32] = a2 - *(void *)(a1 + 40);
      }
      BOOL v17 = v30-- <= 1;
    }
    while (!v17);
    uint64_t v35 = *(void *)a1;
    uint64_t v36 = *(void *)(a1 + 16) - 1;
    do
    {
      uint64_t v38 = *v24++;
      uint64_t v37 = v38;
      if (v38 != -1)
      {
        if (v37 < v35) {
          uint64_t v35 = v37;
        }
        uint64_t v39 = v37 + 0x2000;
        uint64_t v40 = v37 + 0x1FFF;
        if (v39 > v36) {
          uint64_t v36 = v40;
        }
        if (v36 >= a2)
        {
          BOOL v55 = __si_assert_copy_extra_329();
          uint64_t v56 = v55;
          uint64_t v57 = "";
          if (v55) {
            uint64_t v57 = v55;
          }
          __message_assert(v55, "sdb2_qsort.cpp", 17, "right < count", v57);
          free(v56);
          if (__valid_fs(-1)) {
            uint64_t v58 = 2989;
          }
          else {
            uint64_t v58 = 3072;
          }
          *(_DWORD *)uint64_t v58 = -559038737;
          abort();
        }
      }
      --v23;
    }
    while (v23);
  }
  free(v20);
  if (v35 >= v36)
  {
    uint64_t result = v35;
    goto LABEL_86;
  }
  uint64_t result = v35;
  do
  {
    uint64_t v42 = *(void *)(a1 + 48);
    unint64_t v43 = *(void *)(a1 + 72);
    long long v44 = (void *)(v42 + 32 * v35);
    while (1)
    {
      unint64_t v45 = v44[2];
      if (v45 != v43) {
        break;
      }
      if (*v44 >= *(void *)(a1 + 56)) {
        goto LABEL_71;
      }
LABEL_69:
      ++result;
      v44 += 4;
      if (result >= v36)
      {
        if (v36 <= v35 + 1) {
          uint64_t result = v35 + 1;
        }
        else {
          uint64_t result = v36;
        }
        goto LABEL_86;
      }
    }
    if (v45 < v43) {
      goto LABEL_69;
    }
LABEL_71:
    if (result >= v36) {
      goto LABEL_80;
    }
    uint64_t v46 = (void *)(v42 + 32 * v36);
LABEL_73:
    unint64_t v47 = v46[2];
    if (v47 == v43)
    {
      if (*v46 <= *(void *)(a1 + 56)) {
        goto LABEL_79;
      }
      goto LABEL_77;
    }
    if (v47 > v43)
    {
LABEL_77:
      --v36;
      v46 -= 4;
      if (result >= v36) {
        break;
      }
      goto LABEL_73;
    }
LABEL_79:
    long long v49 = *(_OWORD *)v46;
    long long v48 = *((_OWORD *)v46 + 1);
    long long v50 = *((_OWORD *)v44 + 1);
    *(_OWORD *)uint64_t v46 = *(_OWORD *)v44;
    *((_OWORD *)v46 + 1) = v50;
    unint64_t v51 = (_OWORD *)(*(void *)(a1 + 48) + 32 * result);
    *unint64_t v51 = v49;
    v51[1] = v48;
    ++result;
    --v36;
LABEL_80:
    uint64_t v35 = result;
  }
  while (result < v36);
LABEL_86:
  unint64_t v52 = (void *)(*(void *)(a1 + 48) + 32 * result);
  unint64_t v53 = v52[2];
  unint64_t v54 = *(void *)(a1 + 72);
  if (v53 == v54 && *v52 < *(void *)(a1 + 56) || v53 < v54) {
    ++result;
  }
  return result;
}

uint64_t neutralize_oid_lookups(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5 = *a4;
  uint64_t v6 = *a5;
  while (1)
  {
    if (v5 >= 0x2000)
    {
LABEL_10:
      uint64_t v9 = v5;
    }
    else
    {
      unint64_t v7 = a3[2];
      uint64_t v8 = (unint64_t *)(a1 + 16 + 32 * v5);
      do
      {
        if (*v8 == v7)
        {
          if ((int64_t)*(v8 - 2) > *a3) {
            goto LABEL_10;
          }
        }
        else if (*v8 > v7)
        {
          goto LABEL_10;
        }
        ++v5;
        v8 += 4;
      }
      while (v5 != 0x2000);
      uint64_t v9 = 0x2000;
    }
    if (v6 < 0x2000) {
      break;
    }
LABEL_19:
    uint64_t v12 = v6;
    if (v9 == 0x2000 || v6 == 0x2000)
    {
      uint64_t v5 = v9;
      goto LABEL_23;
    }
    uint64_t v13 = (long long *)(a2 + 32 * v6);
    long long v15 = *v13;
    long long v14 = v13[1];
    uint64_t v16 = (long long *)(a1 + 32 * v9);
    long long v17 = v16[1];
    *uint64_t v13 = *v16;
    v13[1] = v17;
    *uint64_t v16 = v15;
    v16[1] = v14;
    uint64_t v5 = v9 + 1;
    uint64_t v6 = v12 + 1;
    if (v9 > 8190 || v12 >= 0x1FFF) {
      goto LABEL_23;
    }
  }
  unint64_t v10 = a3[2];
  uint64_t v11 = (unint64_t *)(a2 + 16 + 32 * v6);
  do
  {
    if (*v11 == v10)
    {
      if ((int64_t)*(v11 - 2) < *a3) {
        goto LABEL_19;
      }
    }
    else if (*v11 < v10)
    {
      goto LABEL_19;
    }
    ++v6;
    v11 += 4;
  }
  while (v6 != 0x2000);
  uint64_t v5 = v9;
LABEL_23:
  *a4 = v5;
  *a5 = v6;
  if (v6 == 0x2000 && v5 == 0x2000) {
    return 2;
  }
  else {
    return v5 != 0x2000;
  }
}

atomic_ullong *partition_phase_oid_lookups(atomic_ullong *result, uint64_t a2)
{
  uint64_t v3 = result;
  atomic_ullong v4 = result[6];
  int64_t v5 = result[1];
  if (*result < v5)
  {
    unint64_t add_explicit = atomic_fetch_add_explicit(result, 0x2000uLL, memory_order_relaxed);
    if ((uint64_t)(add_explicit + 0x2000) <= v5) {
      goto LABEL_5;
    }
    atomic_fetch_add_explicit(result, 0xFFFFFFFFFFFFE000, memory_order_relaxed);
  }
  unint64_t add_explicit = -1;
LABEL_5:
  int64_t v7 = result[3];
  if (result[2] <= v7)
  {
LABEL_8:
    uint64_t v10 = 0;
    if (add_explicit != -1)
    {
      uint64_t v11 = 0;
      goto LABEL_32;
    }
    int64_t v9 = -1;
    uint64_t v11 = 0;
LABEL_31:
    unint64_t add_explicit = v9;
    goto LABEL_32;
  }
  unint64_t v8 = atomic_fetch_add_explicit(result + 2, 0xFFFFFFFFFFFFE000, memory_order_relaxed);
  int64_t v9 = v8 - 0x2000;
  if ((uint64_t)(v8 - 0x2000) < v7)
  {
    atomic_fetch_add_explicit(result + 2, 0x2000uLL, memory_order_relaxed);
    goto LABEL_8;
  }
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  BOOL v12 = add_explicit != -1;
  if (v8 != 0x1FFF && add_explicit != -1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    long long v14 = result + 7;
    while (1)
    {
      long long v15 = *(_OWORD *)(v3 + 9);
      v18[0] = *v14;
      v18[1] = v15;
      uint64_t result = (atomic_ullong *)neutralize_oid_lookups(v4 + 32 * add_explicit, v4 + 32 * v9, v18, &v20, &v19);
      if (result) {
        goto LABEL_23;
      }
      atomic_ullong v16 = v3[1];
      if (*v3 < v16)
      {
        unint64_t add_explicit = atomic_fetch_add_explicit(v3, 0x2000uLL, memory_order_relaxed);
        if ((uint64_t)(add_explicit + 0x2000) <= v16) {
          goto LABEL_22;
        }
        atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFE000, memory_order_relaxed);
      }
      unint64_t add_explicit = -1;
LABEL_22:
      uint64_t v20 = 0;
      ++v11;
      if ((result - 1) > 1) {
        goto LABEL_28;
      }
LABEL_23:
      int64_t v17 = v3[3];
      if (v3[2] <= v17) {
        goto LABEL_26;
      }
      int64_t v9 = atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFFFFFFE000, memory_order_relaxed) - 0x2000;
      if (v9 < v17)
      {
        atomic_fetch_add_explicit(v3 + 2, 0x2000uLL, memory_order_relaxed);
LABEL_26:
        int64_t v9 = -1;
      }
      uint64_t v19 = 0;
      ++v10;
LABEL_28:
      BOOL v12 = add_explicit != -1;
      if (v9 == -1 || add_explicit == -1) {
        goto LABEL_30;
      }
    }
  }
  uint64_t v11 = 0;
  uint64_t v10 = 0;
LABEL_30:
  if (!v12) {
    goto LABEL_31;
  }
LABEL_32:
  *(void *)(v3[11] + 8 * a2) = add_explicit;
  atomic_fetch_add_explicit(v3 + 4, v11 << 13, memory_order_relaxed);
  atomic_fetch_add_explicit(v3 + 5, v10 << 13, memory_order_relaxed);
  return result;
}

uint64_t ___ZL18_qsort_oid_lookupsP17oid_lookup_structll_block_invoke(uint64_t a1, void *a2, void *a3)
{
  if (*a2 == *a3) {
    unsigned int v3 = 0;
  }
  else {
    unsigned int v3 = -1;
  }
  unint64_t v4 = a2[2];
  unint64_t v5 = a3[2];
  if (*a2 > *a3 && v4 == v5 || v4 > v5) {
    return 1;
  }
  else {
    return v3;
  }
}

uint64_t fieldCmp(const char *a1, const char *a2)
{
  unsigned int v2 = *(unsigned __int8 *)a1;
  if (*a1 < 0)
  {
    if (v2 > 0xBF)
    {
      if (v2 > 0xDF)
      {
        if (v2 > 0xEF)
        {
          unsigned int v2 = *(_DWORD *)(a1 + 1);
          uint64_t v3 = 5;
        }
        else
        {
          unsigned int v2 = ((v2 & 0xF) << 24) | (*((unsigned __int8 *)a1 + 1) << 16) | (*((unsigned __int8 *)a1 + 2) << 8) | *((unsigned __int8 *)a1 + 3);
          uint64_t v3 = 4;
        }
      }
      else
      {
        unsigned int v2 = ((v2 & 0x1F) << 16) | (*((unsigned __int8 *)a1 + 1) << 8) | *((unsigned __int8 *)a1 + 2);
        uint64_t v3 = 3;
      }
    }
    else
    {
      uint64_t v3 = 2;
      unsigned int v2 = *((unsigned __int8 *)a1 + 1) | ((v2 & 0x3F) << 8);
    }
  }
  else
  {
    uint64_t v3 = 1;
  }
  unsigned int v4 = *(unsigned __int8 *)a2;
  if ((*a2 & 0x80000000) == 0)
  {
    uint64_t v5 = 1;
    uint64_t v6 = v4 - v2;
    if (!v6) {
      return memcmp(&a1[v3], &a2[v5], v2);
    }
    return v6;
  }
  if (v4 <= 0xBF)
  {
    uint64_t v5 = 2;
    uint64_t v6 = (*((unsigned __int8 *)a2 + 1) | ((v4 & 0x3F) << 8)) - v2;
    if (!v6) {
      return memcmp(&a1[v3], &a2[v5], v2);
    }
    return v6;
  }
  if (v4 <= 0xDF)
  {
    uint64_t v5 = 3;
    uint64_t v6 = (((v4 & 0x1F) << 16) | (*((unsigned __int8 *)a2 + 1) << 8) | *((unsigned __int8 *)a2 + 2)) - v2;
    if (!v6) {
      return memcmp(&a1[v3], &a2[v5], v2);
    }
    return v6;
  }
  if (v4 > 0xEF)
  {
    uint64_t v5 = 5;
    uint64_t v6 = *(_DWORD *)(a2 + 1) - v2;
    if (v6) {
      return v6;
    }
  }
  else
  {
    uint64_t v5 = 4;
    uint64_t v6 = (((v4 & 0xF) << 24) | (*((unsigned __int8 *)a2 + 1) << 16) | (*((unsigned __int8 *)a2 + 2) << 8) | *((unsigned __int8 *)a2 + 3))
       - v2;
    if (v6) {
      return v6;
    }
  }
  return memcmp(&a1[v3], &a2[v5], v2);
}

void ___ZN20GenericUniquingTableIXadL_Z6strlenEEXadL_Z6strcmpEEE9initTableEmj_block_invoke()
{
  zone = malloc_create_zone(0x10000uLL, 0);
  sdb_uniquing_zone = (uint64_t)zone;
  malloc_set_zone_name(zone, "sdb_uniquing_zone");
}

uint64_t GenericUniquingTable<&(strlen),&(strcmp)>::buckFind(uint64_t *a1, unsigned int a2, int a3, char *__s1, size_t a5, const void *a6, unsigned int *a7)
{
  uint64_t v9 = *a1;
  uint64_t v10 = *a1 + 16 * a2;
  if ((*(_DWORD *)(v10 + 8) & 0x80000000) != 0)
  {
    if (a6)
    {
      uint64_t v21 = -(uint64_t)a5;
      unsigned int v11 = a2;
      while (1)
      {
        if ((*(_DWORD *)(v10 + 8) & 0x7FFFFFFF) == a3)
        {
          uint64_t v18 = *(const char **)v10;
          if (!strcmp(__s1, *(const char **)v10) && !memcmp(&v18[v21], a6, a5)) {
            break;
          }
        }
        uint64_t result = 0;
        unsigned int v19 = *((_DWORD *)a1 + 2);
        if (v11 + 1 < v19) {
          ++v11;
        }
        else {
          unsigned int v11 = v11 + 1 - v19;
        }
        if (v11 != a2)
        {
          uint64_t v10 = v9 + 16 * v11;
          if ((*(_DWORD *)(v10 + 8) & 0x80000000) != 0) {
            continue;
          }
        }
        goto LABEL_4;
      }
    }
    else
    {
      unsigned int v11 = a2;
      while ((*(_DWORD *)(v10 + 8) & 0x7FFFFFFF) != a3 || strcmp(__s1, *(const char **)v10))
      {
        uint64_t result = 0;
        unsigned int v20 = *((_DWORD *)a1 + 2);
        if (v11 + 1 < v20) {
          ++v11;
        }
        else {
          unsigned int v11 = v11 + 1 - v20;
        }
        if (v11 != a2)
        {
          uint64_t v10 = v9 + 16 * v11;
          if ((*(_DWORD *)(v10 + 8) & 0x80000000) != 0) {
            continue;
          }
        }
        goto LABEL_4;
      }
    }
  }
  else
  {
    unsigned int v11 = a2;
  }
  uint64_t result = v10;
LABEL_4:
  *a7 = v11;
  return result;
}

uint64_t hash_insert_extended(uint64_t a1, char *__s, const void *a3, char *a4)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  int v8 = -1759636613;
  int v9 = strlen(__s);
  pthread_rwlock_wrlock((pthread_rwlock_t *)a1);
  if (v9 >= 0) {
    int v10 = v9;
  }
  else {
    int v10 = v9 + 3;
  }
  unsigned int v11 = &__s[v10 & 0xFFFFFFFC];
  if ((v9 + 3) >= 7)
  {
    uint64_t v14 = -(v10 >> 2);
    int v15 = -1789642873;
    int v16 = 718793509;
    do
    {
      int v15 = 5 * v15 + 2071795100;
      int v16 = 5 * v16 + 1808688022;
      HIDWORD(v17) = v15 * *(_DWORD *)&v11[4 * v14];
      LODWORD(v17) = HIDWORD(v17);
      int v18 = (v17 >> 21) * v16;
      HIDWORD(v17) = v8;
      LODWORD(v17) = v8;
      int v8 = v18 ^ (5 * (v17 >> 19) + 1390208809);
    }
    while (!__CFADD__(v14++, 1));
    int v13 = 5 * v15 + 2071795100;
    int v12 = 5 * v16 + 1808688022;
  }
  else
  {
    int v12 = 1107688271;
    int v13 = 1713515327;
  }
  int v20 = 0;
  int v21 = v9 & 3;
  if (v21 != 1)
  {
    if (v21 != 2)
    {
      if (v21 != 3) {
        goto LABEL_16;
      }
      int v20 = v11[2] << 16;
    }
    v20 |= v11[1] << 8;
  }
  HIDWORD(v22) = (v20 ^ *v11) * v13;
  LODWORD(v22) = HIDWORD(v22);
  int v23 = (v22 >> 21) * v12;
  HIDWORD(v22) = v8;
  LODWORD(v22) = v8;
  int v8 = v23 ^ (5 * (v22 >> 19) + 1390208809);
LABEL_16:
  size_t v24 = *(void *)(a1 + 200);
  if (&__s[-v24 - 4] != a4)
  {
    uint64_t v60 = __si_assert_copy_extra_329();
    uint64_t v61 = v60;
    unint64_t v62 = "";
    if (v60) {
      unint64_t v62 = v60;
    }
    __message_assert(v60, "db-common.c", 364, "data == name - ht->extra_bytes - sizeof(db_uint32_t)", v62);
    free(v61);
    if (__valid_fs(-1)) {
      uint64_t v63 = 2989;
    }
    else {
      uint64_t v63 = 3072;
    }
    *(_DWORD *)uint64_t v63 = -559038737;
    abort();
  }
  unsigned int v25 = -1028477387 * ((-2048144789 * (v8 ^ v9)) ^ ((-2048144789 * (v8 ^ v9)) >> 13));
  int v26 = v25 ^ HIWORD(v25);
  uint64_t v27 = a1 + 16 * ((v25 ^ BYTE2(v25)) & 0x7F);
  int v30 = *(_DWORD *)(v27 + 216);
  unint64_t v28 = (unsigned int *)(v27 + 216);
  int v29 = v30;
  unint64_t v31 = v28 - 2;
  if (v30 < 0)
  {
    if ((v29 & 0x7FFFFFFF) == (v26 & 0x7FFFFFFF)
      && (uint64_t v33 = *(const char **)v31, !memcmp((const void *)(*(void *)v31 - v24), a3, *(void *)(a1 + 200)))
      && !strcmp(__s, v33))
    {
      pthread_rwlock_unlock((pthread_rwlock_t *)a1);
      return 17;
    }
    else
    {
      unsigned int v34 = *(_DWORD *)(a1 + 2272);
      unsigned int v70 = 0;
      while (1)
      {
        uint64_t v35 = GenericUniquingTable<&(strlen),&(strcmp)>::buckFind((uint64_t *)(a1 + 2264), (v26 & 0x7FFFFFFFu) % v34, v26 & 0x7FFFFFFF, __s, v24, a3, &v70);
        if (v70 >= v34)
        {
          uint64_t v64 = __si_assert_copy_extra_329();
          uint64_t v57 = v64;
          BOOL v65 = "";
          if (v64) {
            BOOL v65 = v64;
          }
          __message_assert(v64, "db-common.c", 398, "slot<table->size", v65);
          goto LABEL_67;
        }
        if (v35) {
          break;
        }
        if (3 * v34 >= 4 * *(_DWORD *)(a1 + 2276))
        {
          uint64_t v32 = 0;
          uint64_t v51 = *(void *)(a1 + 2264) + 16 * v70;
          *(_DWORD *)(v51 + 8) = v26 | 0x80000000;
          ++*(_DWORD *)(a1 + 2276);
          *(void *)uint64_t v51 = __s;
          goto LABEL_46;
        }
        if (dword_1E9FC90C0 >= 5)
        {
          int v47 = *__error();
          long long v48 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
          {
            int v49 = *(_DWORD *)(a1 + 2272);
            int v50 = *(_DWORD *)(a1 + 2276);
            *(_DWORD *)stat buf = 67109376;
            int v72 = v49;
            __int16 v73 = 1024;
            int v74 = v50;
            _os_log_impl(&dword_1BD672000, v48, OS_LOG_TYPE_DEFAULT, "Growing hash table %d %d", buf, 0xEu);
          }
          *__error() = v47;
          unsigned int v34 = *(_DWORD *)(a1 + 2272);
        }
        uint64_t v36 = *(char **)(a1 + 2264);
        *(_DWORD *)(a1 + 2272) = 2 * v34;
        *(void *)(a1 + 2264) = malloc_type_zone_calloc((malloc_zone_t *)sdb_uniquing_zone, 1uLL, 32 * v34, 0x1050040DB1D6C16uLL);
        if (v34)
        {
          for (uint64_t i = 0; i != v34; ++i)
          {
            uint64_t v40 = &v36[16 * i];
            int v41 = *((_DWORD *)v40 + 2);
            if (v41 < 0)
            {
              unsigned int v42 = *(_DWORD *)(a1 + 2272);
              unsigned int v43 = (v41 & 0x7FFFFFFFu) % v42;
              uint64_t v44 = *(void *)(a1 + 2264);
              if ((*(_DWORD *)(v44 + 16 * v43 + 8) & 0x80000000) != 0)
              {
                LODWORD(v38) = (v41 & 0x7FFFFFFFu) % v42;
                while (1)
                {
                  unsigned int v45 = v38 + 1;
                  int v46 = v45 >= v42 ? *(_DWORD *)(a1 + 2272) : 0;
                  uint64_t v38 = v45 - v46;
                  if (v38 == v43) {
                    break;
                  }
                  if ((*(_DWORD *)(v44 + 16 * v38 + 8) & 0x80000000) == 0) {
                    goto LABEL_30;
                  }
                }
                long long v68 = __si_assert_copy_extra_329();
                uint64_t v57 = v68;
                uint64_t v69 = "";
                if (v68) {
                  uint64_t v69 = v68;
                }
                __message_assert(v68, "db-common.c", 129, "probe!=start", v69);
LABEL_67:
                free(v57);
                if (__valid_fs(-1))
                {
                  MEMORY[0xBAD] = -559038737;
                  abort();
                }
                MEMORY[0xC00] = -559038737;
                abort();
              }
              uint64_t v38 = (v41 & 0x7FFFFFFFu) % v42;
LABEL_30:
              uint64_t v39 = v44 + 16 * v38;
              *(_DWORD *)(v39 + 8) = v41 | 0x80000000;
              *(void *)uint64_t v39 = *(void *)v40;
            }
          }
        }
        free(v36);
        unsigned int v34 = *(_DWORD *)(a1 + 2272);
        size_t v24 = *(void *)(a1 + 200);
      }
      if ((*(_DWORD *)(v35 + 8) & 0x80000000) != 0)
      {
        unint64_t v53 = *(char **)v31;
        unint64_t v54 = (char *)*((void *)v31 + 1);
        *(_OWORD *)unint64_t v31 = *(_OWORD *)v35;
        *(_DWORD *)stat buf = 0;
        BOOL v55 = (void *)GenericUniquingTable<&(strlen),&(strcmp)>::buckFind((uint64_t *)(a1 + 2264), (v54 & 0x7FFFFFFF) % v34, v54 & 0x7FFFFFFF, v53, v24, &v53[-v24], (unsigned int *)buf);
        if (v55)
        {
          void *v55 = v53;
          v55[1] = v54;
          if ((v54 & 0x80000000) == 0)
          {
            uint64_t v56 = __si_assert_copy_extra_329();
            uint64_t v57 = v56;
            uint64_t v58 = "";
            if (v56) {
              uint64_t v58 = v56;
            }
            __message_assert(v56, "db-common.c", 337, "bucket.used", v58);
            goto LABEL_67;
          }
        }
        else
        {
          unint64_t v59 = (char **)(*(void *)(a1 + 2264) + 16 * *(unsigned int *)buf);
          *unint64_t v59 = v53;
          v59[1] = v54;
          if ((v54 & 0x80000000) == 0)
          {
            BOOL v66 = __si_assert_copy_extra_329();
            uint64_t v57 = v66;
            size_t v67 = "";
            if (v66) {
              size_t v67 = v66;
            }
            __message_assert(v66, "db-common.c", 341, "bucket.used", v67);
            goto LABEL_67;
          }
        }
        uint64_t v32 = 17;
      }
      else
      {
        uint64_t v32 = 0;
        *(_DWORD *)(v35 + 8) = v26 | 0x80000000;
        *(void *)uint64_t v35 = __s;
        ++*(_DWORD *)(a1 + 2276);
      }
LABEL_46:
      pthread_rwlock_unlock((pthread_rwlock_t *)a1);
    }
  }
  else
  {
    *unint64_t v28 = v26 | 0x80000000;
    ++*(_DWORD *)(a1 + 2276);
    *(void *)unint64_t v31 = __s;
    pthread_rwlock_unlock((pthread_rwlock_t *)a1);
    return 0;
  }
  return v32;
}

uint64_t hash_lookup_extended(uint64_t a1, char *__s, const void *a3, char a4)
{
  int v8 = -1759636613;
  int v9 = strlen(__s);
  if (v9 >= 0) {
    int v10 = v9;
  }
  else {
    int v10 = v9 + 3;
  }
  unsigned int v11 = &__s[v10 & 0xFFFFFFFC];
  if ((v9 + 3) >= 7)
  {
    uint64_t v14 = -(v10 >> 2);
    int v15 = -1789642873;
    int v16 = 718793509;
    do
    {
      int v15 = 5 * v15 + 2071795100;
      int v16 = 5 * v16 + 1808688022;
      HIDWORD(v17) = v15 * *(_DWORD *)&v11[4 * v14];
      LODWORD(v17) = HIDWORD(v17);
      int v18 = (v17 >> 21) * v16;
      HIDWORD(v17) = v8;
      LODWORD(v17) = v8;
      int v8 = v18 ^ (5 * (v17 >> 19) + 1390208809);
    }
    while (!__CFADD__(v14++, 1));
    int v13 = 5 * v15 + 2071795100;
    int v12 = 5 * v16 + 1808688022;
  }
  else
  {
    int v12 = 1107688271;
    int v13 = 1713515327;
  }
  int v20 = 0;
  int v21 = v9 & 3;
  if (v21 != 1)
  {
    if (v21 != 2)
    {
      if (v21 != 3) {
        goto LABEL_16;
      }
      int v20 = v11[2] << 16;
    }
    v20 |= v11[1] << 8;
  }
  HIDWORD(v22) = (v20 ^ *v11) * v13;
  LODWORD(v22) = HIDWORD(v22);
  int v23 = (v22 >> 21) * v12;
  HIDWORD(v22) = v8;
  LODWORD(v22) = v8;
  int v8 = v23 ^ (5 * (v22 >> 19) + 1390208809);
LABEL_16:
  unsigned int v24 = -1028477387 * ((-2048144789 * (v8 ^ v9)) ^ ((-2048144789 * (v8 ^ v9)) >> 13));
  int v25 = v24 ^ HIWORD(v24);
  pthread_rwlock_rdlock((pthread_rwlock_t *)a1);
  uint64_t v26 = a1 + 208 + 16 * (v25 & 0x7F);
  int v27 = *(_DWORD *)(v26 + 8);
  if (v27 < 0)
  {
    unsigned int v30 = v25 & 0x7FFFFFFF;
    if ((v27 & 0x7FFFFFFF) == v30
      && (unint64_t v31 = *(const char **)v26, !strcmp(__s, *(const char **)v26))
      && (size_t v32 = *(void *)(a1 + 200), v33 = &v31[-v32], !memcmp(v33, a3, v32)))
    {
      uint64_t v28 = (uint64_t)(v33 - 4);
      if (a4) {
        return v28;
      }
    }
    else
    {
      unsigned int v34 = *(_DWORD *)(a1 + 2272);
      unsigned int v40 = 0;
      size_t v35 = *(void *)(a1 + 200);
      uint64_t v36 = GenericUniquingTable<&(strlen),&(strcmp)>::buckFind((uint64_t *)(a1 + 2264), v30 % v34, v30, __s, v35, a3, &v40);
      if (v40 >= v34)
      {
        uint64_t v37 = __si_assert_copy_extra_329();
        uint64_t v38 = v37;
        uint64_t v39 = "";
        if (v37) {
          uint64_t v39 = v37;
        }
        __message_assert(v37, "db-common.c", 304, "slot < table->size", v39);
        free(v38);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      if (!v36 || (*(_DWORD *)(v36 + 8) & 0x80000000) == 0) {
        goto LABEL_17;
      }
      uint64_t v28 = *(void *)v36 - v35 - 4;
      if (a4) {
        return v28;
      }
    }
    pthread_rwlock_unlock((pthread_rwlock_t *)a1);
    return v28;
  }
LABEL_17:
  if ((a4 & 1) == 0) {
    pthread_rwlock_unlock((pthread_rwlock_t *)a1);
  }
  return 0;
}

void ___ZN20GenericUniquingTableIXadL_Z8fieldLenEEXadL_Z8fieldCmpPKcS1_EEE9initTableEmj_block_invoke()
{
  zone = malloc_create_zone(0x10000uLL, 0);
  sdb_uniquing_zone = (uint64_t)zone;
  malloc_set_zone_name(zone, "sdb_uniquing_zone");
}

uint64_t hash_field_insert(pthread_rwlock_t *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = *a2;
  if ((char)*a2 < 0)
  {
    if (v6 > 0xBF)
    {
      if (v6 > 0xDF)
      {
        if (v6 > 0xEF)
        {
          unsigned int v6 = *(_DWORD *)(a2 + 1);
          int v7 = 5;
        }
        else
        {
          unsigned int v6 = ((v6 & 0xF) << 24) | (a2[1] << 16) | (a2[2] << 8) | a2[3];
          int v7 = 4;
        }
      }
      else
      {
        unsigned int v6 = ((v6 & 0x1F) << 16) | (a2[1] << 8) | a2[2];
        int v7 = 3;
      }
    }
    else
    {
      int v7 = 2;
      unsigned int v6 = a2[1] | ((v6 & 0x3F) << 8);
    }
  }
  else
  {
    int v7 = 1;
  }
  int v8 = -1759636613;
  int v9 = v7 + v6;
  pthread_rwlock_wrlock(a1);
  if (v9 >= 0) {
    int v11 = v9;
  }
  else {
    int v11 = v9 + 3;
  }
  int v12 = &a2[v11 & 0xFFFFFFFC];
  if ((v9 + 3) >= 7)
  {
    uint64_t v15 = -(v11 >> 2);
    int v16 = -1789642873;
    int v17 = 718793509;
    do
    {
      int v16 = 5 * v16 + 2071795100;
      int v17 = 5 * v17 + 1808688022;
      HIDWORD(v18) = v16 * *(_DWORD *)&v12[4 * v15];
      LODWORD(v18) = HIDWORD(v18);
      int v19 = (v18 >> 21) * v17;
      HIDWORD(v18) = v8;
      LODWORD(v18) = v8;
      int v8 = v19 ^ (5 * (v18 >> 19) + 1390208809);
    }
    while (!__CFADD__(v15++, 1));
    int v14 = 5 * v16 + 2071795100;
    int v13 = 5 * v17 + 1808688022;
  }
  else
  {
    int v13 = 1107688271;
    int v14 = 1713515327;
  }
  int v21 = 0;
  int v22 = v9 & 3;
  if (v22 != 1)
  {
    if (v22 != 2)
    {
      if (v22 != 3) {
        goto LABEL_25;
      }
      int v21 = v12[2] << 16;
    }
    v21 |= v12[1] << 8;
  }
  HIDWORD(v23) = (v21 ^ *v12) * v14;
  LODWORD(v23) = HIDWORD(v23);
  int v24 = (v23 >> 21) * v13;
  HIDWORD(v23) = v8;
  LODWORD(v23) = v8;
  int v8 = v24 ^ (5 * (v23 >> 19) + 1390208809);
LABEL_25:
  size_t sig = a1[1].__sig;
  if (&a2[-sig - 4] != a3)
  {
    BOOL v65 = __si_assert_copy_extra_329();
    uint64_t v63 = v65;
    BOOL v66 = "";
    if (v65) {
      BOOL v66 = v65;
    }
    __message_assert(v65, "db-common.c", 364, "data == name - ht->extra_bytes - sizeof(db_uint32_t)", v66);
    goto LABEL_87;
  }
  unsigned int v26 = -1028477387 * ((-2048144789 * (v8 ^ v9)) ^ ((-2048144789 * (v8 ^ v9)) >> 13));
  int v27 = v26 ^ HIWORD(v26);
  uint64_t v28 = (char *)a1 + 16 * ((v26 ^ BYTE2(v26)) & 0x7F);
  int v31 = *((_DWORD *)v28 + 54);
  int v29 = (unsigned int *)(v28 + 216);
  int v30 = v31;
  size_t v32 = v29 - 2;
  if (v31 < 0)
  {
    unsigned int v34 = v27 & 0x7FFFFFFF;
    if ((v30 & 0x7FFFFFFF) == (v27 & 0x7FFFFFFF)
      && (size_t v35 = *(const char **)v32, !memcmp((const void *)(*(void *)v32 - sig), 0, sig))
      && !fieldCmp((const char *)a2, v35))
    {
      pthread_rwlock_unlock(a1);
      return 17;
    }
    else
    {
      *(void *)&long long v10 = 67109376;
      while (1)
      {
        unsigned int v36 = *(_DWORD *)&a1[11].__opaque[64];
        uint64_t v37 = *(char **)&a1[11].__opaque[56];
        uint64_t v38 = &v37[16 * (v34 % v36)];
        if ((*((_DWORD *)v38 + 2) & 0x80000000) == 0) {
          break;
        }
        long long v76 = v10;
        unsigned int v39 = v34 % v36;
        do
        {
          if ((*((_DWORD *)v38 + 2) & 0x7FFFFFFF) == v34
            && !fieldCmp((const char *)a2, *(const char **)v38))
          {
            if (v39 >= v36)
            {
LABEL_89:
              long long v68 = __si_assert_copy_extra_329();
              uint64_t v69 = v68;
              unsigned int v70 = "";
              if (v68) {
                unsigned int v70 = v68;
              }
              __message_assert(v68, "db-common.c", 398, "slot<table->size", v70);
              free(v69);
              if (__valid_fs(-1))
              {
                MEMORY[0xBAD] = -559038737;
                abort();
              }
              MEMORY[0xC00] = -559038737;
              abort();
            }
            goto LABEL_63;
          }
          if (v39 + 1 < v36) {
            ++v39;
          }
          else {
            unsigned int v39 = v39 + 1 - v36;
          }
          uint64_t v38 = &v37[16 * v39];
        }
        while (v39 != v34 % v36 && (*((_DWORD *)v38 + 2) & 0x80000000) != 0);
        if (v39 >= v36) {
          goto LABEL_89;
        }
        if (3 * v36 >= 4 * *(_DWORD *)&a1[11].__opaque[68])
        {
          uint64_t v33 = 0;
          *((_DWORD *)v38 + 2) = v27 | 0x80000000;
          ++*(_DWORD *)&a1[11].__opaque[68];
          *(void *)uint64_t v38 = a2;
          goto LABEL_68;
        }
        if (dword_1E9FC90C0 >= 5)
        {
          int v50 = *__error();
          uint64_t v51 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
          {
            int v52 = *(_DWORD *)&a1[11].__opaque[64];
            int v53 = *(_DWORD *)&a1[11].__opaque[68];
            *(_DWORD *)stat buf = v76;
            int v78 = v52;
            __int16 v79 = 1024;
            int v80 = v53;
            _os_log_impl(&dword_1BD672000, v51, OS_LOG_TYPE_DEFAULT, "Growing hash table %d %d", buf, 0xEu);
          }
          *__error() = v50;
          unsigned int v36 = *(_DWORD *)&a1[11].__opaque[64];
          uint64_t v37 = *(char **)&a1[11].__opaque[56];
        }
        *(_DWORD *)&a1[11].__opaque[64] = 2 * v36;
        *(void *)&a1[11].__opaque[56] = malloc_type_zone_calloc((malloc_zone_t *)sdb_uniquing_zone, 1uLL, 32 * v36, 0x1050040DB1D6C16uLL);
        if (v36)
        {
          for (uint64_t i = 0; i != v36; ++i)
          {
            unsigned int v43 = &v37[16 * i];
            int v44 = *((_DWORD *)v43 + 2);
            if (v44 < 0)
            {
              unsigned int v45 = *(_DWORD *)&a1[11].__opaque[64];
              unsigned int v46 = (v44 & 0x7FFFFFFFu) % v45;
              uint64_t v47 = *(void *)&a1[11].__opaque[56];
              if ((*(_DWORD *)(v47 + 16 * v46 + 8) & 0x80000000) != 0)
              {
                LODWORD(v41) = (v44 & 0x7FFFFFFFu) % v45;
                while (1)
                {
                  unsigned int v48 = v41 + 1;
                  int v49 = v48 >= v45 ? *(_DWORD *)&a1[11].__opaque[64] : 0;
                  uint64_t v41 = v48 - v49;
                  if (v41 == v46) {
                    break;
                  }
                  if ((*(_DWORD *)(v47 + 16 * v41 + 8) & 0x80000000) == 0) {
                    goto LABEL_47;
                  }
                }
                __int16 v73 = __si_assert_copy_extra_329();
                uint64_t v63 = v73;
                int v74 = "";
                if (v73) {
                  int v74 = v73;
                }
                __message_assert(v73, "db-common.c", 129, "probe!=start", v74);
LABEL_87:
                free(v63);
                if (__valid_fs(-1)) {
                  uint64_t v67 = 2989;
                }
                else {
                  uint64_t v67 = 3072;
                }
                *(_DWORD *)uint64_t v67 = -559038737;
                abort();
              }
              uint64_t v41 = (v44 & 0x7FFFFFFFu) % v45;
LABEL_47:
              uint64_t v42 = v47 + 16 * v41;
              *(_DWORD *)(v42 + 8) = v44 | 0x80000000;
              *(void *)uint64_t v42 = *(void *)v43;
            }
          }
        }
        free(v37);
        long long v10 = v76;
      }
LABEL_63:
      if ((*((_DWORD *)v38 + 2) & 0x80000000) != 0)
      {
        unint64_t v54 = *(const char **)v32;
        uint64_t v55 = *((void *)v32 + 1);
        *(_OWORD *)size_t v32 = *(_OWORD *)v38;
        unsigned int v56 = (v55 & 0x7FFFFFFF) % v36;
        uint64_t v57 = &v37[16 * v56];
        if ((*((_DWORD *)v57 + 2) & 0x80000000) != 0)
        {
          size_t v59 = a1[1].__sig;
          unsigned int v75 = (v55 & 0x7FFFFFFF) % v36;
          while (1)
          {
            if ((*((_DWORD *)v57 + 2) & 0x7FFFFFFF) == (v55 & 0x7FFFFFFF))
            {
              uint64_t v60 = *(const char **)v57;
              if (!fieldCmp(v54, *(const char **)v57) && !memcmp(&v60[-v59], &v54[-v59], v59)) {
                break;
              }
            }
            if (v75 + 1 < v36) {
              unsigned int v61 = v75 + 1;
            }
            else {
              unsigned int v61 = v75 + 1 - v36;
            }
            uint64_t v57 = &v37[16 * v61];
            unsigned int v75 = v61;
            if (v61 == v56 || (*((_DWORD *)v57 + 2) & 0x80000000) == 0)
            {
              *(void *)uint64_t v57 = v54;
              *((void *)v57 + 1) = v55;
              if ((v55 & 0x80000000) == 0)
              {
                unint64_t v62 = __si_assert_copy_extra_329();
                uint64_t v63 = v62;
                uint64_t v64 = "";
                if (v62) {
                  uint64_t v64 = v62;
                }
                __message_assert(v62, "db-common.c", 341, "bucket.used", v64);
                goto LABEL_87;
              }
              goto LABEL_67;
            }
          }
        }
        *(void *)uint64_t v57 = v54;
        *((void *)v57 + 1) = v55;
        if ((v55 & 0x80000000) == 0)
        {
          size_t v71 = __si_assert_copy_extra_329();
          uint64_t v63 = v71;
          int v72 = "";
          if (v71) {
            int v72 = v71;
          }
          __message_assert(v71, "db-common.c", 337, "bucket.used", v72);
          goto LABEL_87;
        }
LABEL_67:
        uint64_t v33 = 17;
      }
      else
      {
        uint64_t v33 = 0;
        *((_DWORD *)v38 + 2) = v27 | 0x80000000;
        *(void *)uint64_t v38 = a2;
        ++*(_DWORD *)&a1[11].__opaque[68];
      }
LABEL_68:
      pthread_rwlock_unlock(a1);
    }
  }
  else
  {
    unsigned int *v29 = v27 | 0x80000000;
    ++*(_DWORD *)&a1[11].__opaque[68];
    *(void *)size_t v32 = a2;
    pthread_rwlock_unlock(a1);
    return 0;
  }
  return v33;
}

uint64_t hash_field_lookup(pthread_rwlock_t *a1, unsigned __int8 *a2)
{
  unsigned int v4 = *a2;
  if ((char)*a2 < 0)
  {
    if (v4 > 0xBF)
    {
      if (v4 > 0xDF)
      {
        if (v4 > 0xEF)
        {
          unsigned int v4 = *(_DWORD *)(a2 + 1);
          int v5 = 5;
        }
        else
        {
          unsigned int v4 = ((v4 & 0xF) << 24) | (a2[1] << 16) | (a2[2] << 8) | a2[3];
          int v5 = 4;
        }
      }
      else
      {
        unsigned int v4 = ((v4 & 0x1F) << 16) | (a2[1] << 8) | a2[2];
        int v5 = 3;
      }
    }
    else
    {
      int v5 = 2;
      unsigned int v4 = a2[1] | ((v4 & 0x3F) << 8);
    }
  }
  else
  {
    int v5 = 1;
  }
  int v6 = -1759636613;
  int v7 = v5 + v4;
  if (v7 >= 0) {
    int v8 = v7;
  }
  else {
    int v8 = v7 + 3;
  }
  int v9 = &a2[v8 & 0xFFFFFFFC];
  if ((v7 + 3) >= 7)
  {
    uint64_t v12 = -(v8 >> 2);
    int v13 = -1789642873;
    int v14 = 718793509;
    do
    {
      int v13 = 5 * v13 + 2071795100;
      int v14 = 5 * v14 + 1808688022;
      HIDWORD(v15) = v13 * *(_DWORD *)&v9[4 * v12];
      LODWORD(v15) = HIDWORD(v15);
      int v16 = (v15 >> 21) * v14;
      HIDWORD(v15) = v6;
      LODWORD(v15) = v6;
      int v6 = v16 ^ (5 * (v15 >> 19) + 1390208809);
    }
    while (!__CFADD__(v12++, 1));
    int v11 = 5 * v13 + 2071795100;
    int v10 = 5 * v14 + 1808688022;
  }
  else
  {
    int v10 = 1107688271;
    int v11 = 1713515327;
  }
  int v18 = 0;
  int v19 = v7 & 3;
  if (v19 != 1)
  {
    if (v19 != 2)
    {
      if (v19 != 3) {
        goto LABEL_25;
      }
      int v18 = v9[2] << 16;
    }
    v18 |= v9[1] << 8;
  }
  HIDWORD(v20) = (v18 ^ *v9) * v11;
  LODWORD(v20) = HIDWORD(v20);
  int v21 = (v20 >> 21) * v10;
  HIDWORD(v20) = v6;
  LODWORD(v20) = v6;
  int v6 = v21 ^ (5 * (v20 >> 19) + 1390208809);
LABEL_25:
  unsigned int v22 = -1028477387 * ((-2048144789 * (v6 ^ v7)) ^ ((-2048144789 * (v6 ^ v7)) >> 13));
  int v23 = v22 ^ HIWORD(v22);
  pthread_rwlock_rdlock(a1);
  int v24 = &a1[1].__opaque[16 * (v23 & 0x7F)];
  int v25 = *((_DWORD *)v24 + 2);
  if (v25 < 0)
  {
    unsigned int v26 = v23 & 0x7FFFFFFF;
    if ((v25 & 0x7FFFFFFF) == v26)
    {
      int v27 = *(const char **)v24;
      if (!fieldCmp((const char *)a2, *(const char **)v24))
      {
        size_t sig = a1[1].__sig;
        int v29 = &v27[-sig];
        if (!memcmp(v29, 0, sig))
        {
          uint64_t v34 = (uint64_t)(v29 - 4);
          goto LABEL_43;
        }
      }
    }
    unsigned int v30 = *(_DWORD *)&a1[11].__opaque[64];
    uint64_t v31 = *(void *)&a1[11].__opaque[56];
    uint64_t v32 = v31 + 16 * (v26 % v30);
    if ((*(_DWORD *)(v32 + 8) & 0x80000000) != 0)
    {
      unsigned int v33 = v26 % v30;
      do
      {
        if ((*(_DWORD *)(v32 + 8) & 0x7FFFFFFF) == v26
          && !fieldCmp((const char *)a2, *(const char **)v32))
        {
          if (v33 >= v30) {
            goto LABEL_46;
          }
          goto LABEL_41;
        }
        if (v33 + 1 < v30) {
          ++v33;
        }
        else {
          unsigned int v33 = v33 + 1 - v30;
        }
        if (v33 == v26 % v30) {
          break;
        }
        uint64_t v32 = v31 + 16 * v33;
      }
      while ((*(_DWORD *)(v32 + 8) & 0x80000000) != 0);
      if (v33 >= v30)
      {
LABEL_46:
        unsigned int v36 = __si_assert_copy_extra_329();
        uint64_t v37 = v36;
        uint64_t v38 = "";
        if (v36) {
          uint64_t v38 = v36;
        }
        __message_assert(v36, "db-common.c", 304, "slot < table->size", v38);
        free(v37);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
    }
    else
    {
LABEL_41:
      if ((*(_DWORD *)(v32 + 8) & 0x80000000) != 0)
      {
        uint64_t v34 = *(void *)v32 - a1[1].__sig - 4;
        goto LABEL_43;
      }
    }
  }
  uint64_t v34 = 0;
LABEL_43:
  pthread_rwlock_unlock(a1);
  return v34;
}

uint64_t _data_map_ext_wrlock(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 461)) {
    return 0;
  }
  uint64_t v1 = _db_write_lock(a1);
  if (v1)
  {
    int v3 = *__error();
    unsigned int v4 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = v1;
      if (v1 == -1) {
        int v5 = *__error();
      }
      int v6 = 136315650;
      int v7 = "_data_map_ext_wrlock";
      __int16 v8 = 1024;
      int v9 = 287;
      __int16 v10 = 1024;
      int v11 = v5;
      _os_log_error_impl(&dword_1BD672000, v4, OS_LOG_TYPE_ERROR, "%s:%d: _data_map_ext_wrlock error %d", (uint8_t *)&v6, 0x18u);
    }
    *__error() = v3;
  }
  return v1;
}

uint64_t data_map_ext_init_with_ctx(uint64_t a1)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)a1;
  int v3 = *(const char **)(a1 + 8);
  unsigned int v4 = *(_DWORD *)(a1 + 20);
  int v93 = *(_DWORD *)(a1 + 16);
  bzero(__str, 0x400uLL);
  int v5 = malloc_type_calloc(1uLL, 0x1F0uLL, 0x10A0040793B1F91uLL);
  uint64_t v6 = (uint64_t)v5;
  v5[461] = (v4 & 8) != 0;
  *((_DWORD *)v5 + 54) = -270471200;
  if ((v4 & 8) == 0)
  {
    *((void *)v5 + 26) = 0;
    *((_OWORD *)v5 + 11) = 0u;
    *((_OWORD *)v5 + 12) = 0u;
    *((_OWORD *)v5 + 9) = 0u;
    *((_OWORD *)v5 + 10) = 0u;
    *((_OWORD *)v5 + 7) = 0u;
    *((_OWORD *)v5 + 8) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 6) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 1) = 0u;
    *((_OWORD *)v5 + 2) = 0u;
    *(_OWORD *)int v5 = 0u;
    pthread_mutex_init((pthread_mutex_t *)v5, 0);
  }
  *(void *)(v6 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = -1;
  *(void *)(v6 + 264) = 0;
  *(void *)(v6 + 288) = -1;
  *(void *)(v6 + 296) = 0;
  *(void *)(v6 + 304) = 0;
  *(void *)(v6 + 312) = -1;
  *(void *)(v6 + 360) = -1;
  *(_DWORD *)(v6 + 440) = 0;
  *(void *)(v6 + 4++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a1 + 24);
  *(void *)(v6 + 432) = *(void *)(a1 + 40);
  *(unsigned char *)(v6 + 460) = BYTE1(v4) & 1;
  *(void *)(v6 + 408) = *(void *)(a1 + 48);
  *(_DWORD *)(v6 + 416) = *(_DWORD *)(a1 + 56);
  makeThreadId();
  int v7 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v8 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_12813, v6, 0, v7);
  unsigned int v97 = HIDWORD(v8);
  *(_DWORD *)stat buf = v8;
  unsigned int v95 = v10;
  unsigned int v96 = v9;
  uint64_t v11 = *(void *)&threadData[18 * v8 + 2];
  uint64_t v12 = v11 + 320 * HIDWORD(v8);
  int v13 = *(_DWORD *)(v12 + 312);
  int v14 = *(void (**)(void))(v12 + 224);
  if (v14) {
    v14(*(void *)(v11 + 320 * HIDWORD(v8) + 288));
  }
  unsigned int v94 = *(_DWORD *)buf;
  if (_setjmp((int *)v12))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v102 = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v102, 2u);
    }
    *(_DWORD *)(v12 + 312) = v13;
    CIOnThreadCleanUpReset(v95);
    dropThreadId(v94, 1, v7);
    CICleanUpReset(v94, v96);
    int v37 = *__error();
    uint64_t v38 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      unsigned int v56 = fd_realpath(*(_DWORD **)(v6 + 240), __str);
      *(void *)&uint8_t v102[4] = "data_map_ext_init_with_ctx";
      uint64_t v57 = "";
      *(_DWORD *)int v102 = 136315650;
      if (v56) {
        uint64_t v57 = v56;
      }
      *(_WORD *)&v102[12] = 1024;
      *(_DWORD *)&v102[14] = 1306;
      *(_WORD *)&v102[18] = 2080;
      *(void *)&v102[20] = v57;
      _os_log_error_impl(&dword_1BD672000, v38, OS_LOG_TYPE_ERROR, "%s:%d: exception processing %s", v102, 0x1Cu);
    }
    *__error() = v37;
LABEL_34:
    data_map_ext_destroy(v6);
    return 0;
  }
  if (!v3 || (size_t v15 = strlen(v3), v2 == -1) || !v15 || v15 >= 0xF1)
  {
    int v20 = *__error();
    int v21 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    *(_DWORD *)int v102 = 136315394;
    *(void *)&uint8_t v102[4] = "data_map_ext_init_with_ctx";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 1014;
    int v23 = "%s:%d: param error";
    goto LABEL_57;
  }
  char v92 = v4;
  int v91 = v4 & 2;
  if ((v4 & 2) != 0) {
    int v16 = 0;
  }
  else {
    int v16 = ((v4 & 1) << 10) | 0x20000202;
  }
  snprintf(__str, 0x400uLL, "%s.header", v3);
  int v17 = fd_create_protected(v2, __str, v16, 3u);
  *(void *)(v6 + 240) = v17;
  *(void *)(v6 + 256) = fd_lseek(v17, 0, 2);
  snprintf(__str, 0x400uLL, "%s.offsets", v3);
  int v18 = fd_create_protected(v2, __str, v16, 3u);
  *(void *)(v6 + 272) = v18;
  *(void *)(v6 + 320) = fd_lseek(v18, 0, 2);
  snprintf(__str, 0x400uLL, "%s.buckets", v3);
  int v19 = fd_create_protected(v2, __str, 514, 3u);
  *(void *)(v6 + 336) = v19;
  *(void *)(v6 + 344) = fd_lseek(v19, 0, 2);
  if ((v4 & 1) == 0)
  {
    if (*(void *)(v6 + 256) <= 0x53uLL)
    {
      int v20 = *__error();
      int v21 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = *(void *)(v6 + 256);
        *(_DWORD *)int v102 = 136315650;
        *(void *)&uint8_t v102[4] = "data_map_ext_init_with_ctx";
        *(_WORD *)&v102[12] = 1024;
        *(_DWORD *)&v102[14] = 1160;
        *(_WORD *)&v102[18] = 2048;
        *(void *)&v102[20] = v22;
        int v23 = "%s:%d: invalid header size %ld";
        uint32_t v24 = 28;
LABEL_58:
        uint64_t v58 = v21;
LABEL_59:
        _os_log_error_impl(&dword_1BD672000, v58, OS_LOG_TYPE_ERROR, v23, v102, v24);
        goto LABEL_21;
      }
      goto LABEL_21;
    }
    *(void *)(v6 + 264) = malloc_type_calloc(1uLL, 0x54uLL, 0x10000405C84B8F7uLL);
    char v52 = v4;
    if ((v4 & 0x80) != 0)
    {
      int v59 = (v4 >> 2) & 1;
      sibling_with_suffix_protected = (atomic_uint *)fd_create_sibling_with_suffix_protected(*(void *)(v6 + 240), ".shadow", v16);
      if (sibling_with_suffix_protected)
      {
        unsigned int v61 = sibling_with_suffix_protected;
        if (fd_copyfile((uint64_t)sibling_with_suffix_protected, *(void *)(v6 + 240), 0)) {
          int v55 = v59;
        }
        else {
          int v55 = 0;
        }
        fd_release(v61);
      }
      else
      {
        int v55 = v59;
      }
    }
    else
    {
      int v55 = v4 & 4;
    }
    uint64_t v62 = fd_pread(*(_DWORD **)(v6 + 240), *(void **)(v6 + 264), 0x54uLL, 0);
    int v20 = *__error();
    uint64_t v63 = _SILogForLogForCategory(0);
    uint64_t v64 = v63;
    if (v62 != 84)
    {
      if (!os_log_type_enabled(v63, OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      *(_DWORD *)int v102 = 136315394;
      *(void *)&uint8_t v102[4] = "data_map_ext_init_with_ctx";
      *(_WORD *)&v102[12] = 1024;
      *(_DWORD *)&v102[14] = 1180;
      int v23 = "%s:%d: header pread error";
      uint32_t v24 = 18;
      uint64_t v58 = v64;
      goto LABEL_59;
    }
    BOOL v65 = os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT);
    if (v92 < 0)
    {
      if (v65)
      {
        uint64_t v68 = *(void *)(*(void *)(v6 + 264) + 28);
        *(_DWORD *)int v102 = 134217984;
        *(void *)&uint8_t v102[4] = v68;
        uint64_t v67 = "recovered next_id: %llu";
        goto LABEL_78;
      }
    }
    else if (v65)
    {
      uint64_t v66 = *(void *)(*(void *)(v6 + 264) + 28);
      *(_DWORD *)int v102 = 134217984;
      *(void *)&uint8_t v102[4] = v66;
      uint64_t v67 = "opened next_id: %llu";
LABEL_78:
      _os_log_impl(&dword_1BD672000, v64, OS_LOG_TYPE_DEFAULT, v67, v102, 0xCu);
    }
    *__error() = v20;
    uint64_t v69 = *(void *)(v6 + 264);
    if (*(void *)v69 != 0x4461746150EELL) {
      goto LABEL_22;
    }
    uint64_t v70 = *(void *)(v69 + 28);
    *(void *)(v6 + 376) = v70;
    unsigned int v71 = *(_DWORD *)(v69 + 16);
    if (v71 < 3) {
      unsigned int v72 = v71 + 1;
    }
    else {
      unsigned int v72 = 0;
    }
    SIActivityJournalEvent(*(os_unfair_lock_s **)(v6 + 408), *(_DWORD *)(v6 + 416), 1u, v72, v70);
    *(void *)(v6 + 328) = *(void *)(v6 + 320) / 0x18uLL;
    uint64_t v73 = *(void *)(v6 + 264);
    *(void *)(v6 + 368) = *(void *)(v73 + 20);
    *(_OWORD *)(v6 + 384) = *(_OWORD *)(v73 + 60);
    *(void *)(v6 + 400) = *(void *)(v73 + 76);
    if (v55)
    {
      int v74 = *__error();
      unsigned int v75 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v76 = *(void *)(*(void *)(v6 + 264) + 52);
        *(_DWORD *)int v102 = 134217984;
        *(void *)&uint8_t v102[4] = v76;
        _os_log_impl(&dword_1BD672000, v75, OS_LOG_TYPE_DEFAULT, "use_shadow next_id: %llu", v102, 0xCu);
      }
      *__error() = v74;
      unint64_t v77 = *(void *)(v6 + 376);
      uint64_t v78 = *(void *)(v6 + 264);
      unint64_t v79 = *(void *)(v78 + 52);
      if (v77 < v79) {
        goto LABEL_22;
      }
      if (v77 != v79)
      {
        if (!v91)
        {
          *(void *)(v78 + 28) = v79;
          *(void *)(v78 + 20) = 0;
        }
        *(void *)(v6 + 368) = 0;
        *(void *)(v6 + 376) = v79;
      }
    }
    unint64_t v82 = (void *)MEMORY[0x1E4F14B00];
    if (((unint64_t)(*(void *)(v6 + 320) + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00]) <= 0x100000) {
      uint64_t v83 = 0x100000;
    }
    else {
      uint64_t v83 = (*(void *)(v6 + 320) + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
    }
    uint64_t v84 = fd_mmap(*(void *)(v6 + 272));
    *(void *)(v6 + 288) = v84;
    if (v84 == -1)
    {
      int v20 = *__error();
      int v21 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      *(_DWORD *)int v102 = 136315394;
      *(void *)&uint8_t v102[4] = "data_map_ext_init_with_ctx";
      *(_WORD *)&v102[12] = 1024;
      *(_DWORD *)&v102[14] = 1227;
      int v23 = "%s:%d: offset fd_mmap error";
      goto LABEL_57;
    }
    *(void *)(v6 + 280) = v83;
    if (((unint64_t)(*(void *)(v6 + 344) + *v82 - 1) & -*v82) <= 0x100000) {
      uint64_t v85 = 0x100000;
    }
    else {
      uint64_t v85 = (*(void *)(v6 + 344) + *v82 - 1) & -*v82;
    }
    uint64_t v86 = fd_mmap(*(void *)(v6 + 336));
    *(void *)(v6 + 360) = v86;
    if (v86 == -1)
    {
      int v20 = *__error();
      int v21 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        goto LABEL_21;
      }
      *(_DWORD *)int v102 = 136315394;
      *(void *)&uint8_t v102[4] = "data_map_ext_init_with_ctx";
      *(_WORD *)&v102[12] = 1024;
      *(_DWORD *)&v102[14] = 1236;
      int v23 = "%s:%d: offset fd_mmap error";
      goto LABEL_57;
    }
    *(void *)(v6 + 352) = v85;
    uint64_t v87 = *(void *)(v6 + 264);
    if (!*(void *)(v87 + 28))
    {
      *(void *)(v87 + 28) = 1;
      *(void *)(v6 + 376) = 1;
    }
    goto LABEL_44;
  }
  if (fd_truncate(*(void *)(v6 + 240), 84) == -1)
  {
    int v20 = *__error();
    int v21 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    *(_DWORD *)int v102 = 136315394;
    *(void *)&uint8_t v102[4] = "data_map_ext_init_with_ctx";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 1101;
    int v23 = "%s:%d: fd_truncate error";
    goto LABEL_57;
  }
  unsigned int v40 = malloc_type_calloc(1uLL, 0x54uLL, 0x10000405C84B8F7uLL);
  *(void *)(v6 + 256) = 84;
  *(void *)(v6 + 264) = v40;
  *(void *)unsigned int v40 = 0x4461746150EELL;
  v40[2] = 14;
  void v40[3] = v93;
  v40[4] = 0;
  uint64_t v41 = (uint64_t *)MEMORY[0x1E4F14B00];
  if (fd_truncate(*(void *)(v6 + 272), 24 * (*MEMORY[0x1E4F14B00] / 0x18uLL)) == -1)
  {
    int v20 = *__error();
    int v21 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    *(_DWORD *)int v102 = 136315394;
    *(void *)&uint8_t v102[4] = "data_map_ext_init_with_ctx";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 1116;
    int v23 = "%s:%d: fd_truncate error";
    goto LABEL_57;
  }
  uint64_t v42 = fd_mmap(*(void *)(v6 + 272));
  *(void *)(v6 + 288) = v42;
  if (v42 == -1)
  {
    int v20 = *__error();
    int v21 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    *(_DWORD *)int v102 = 136315394;
    *(void *)&uint8_t v102[4] = "data_map_ext_init_with_ctx";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 1121;
    int v23 = "%s:%d: offsets fd_mmap error";
    goto LABEL_57;
  }
  *(void *)(v6 + 280) = 0x100000;
  uint64_t v43 = *v41;
  unint64_t v44 = *v41 / 0x18uLL;
  *(void *)(v6 + 320) = 24 * v44;
  *(void *)(v6 + 328) = v44;
  unint64_t v45 = v43 & 0xFFFFFFFFFFFFFFF8;
  if (fd_truncate(*(void *)(v6 + 336), v43 & 0xFFFFFFFFFFFFFFF8) == -1)
  {
    int v20 = *__error();
    int v21 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    *(_DWORD *)int v102 = 136315394;
    *(void *)&uint8_t v102[4] = "data_map_ext_init_with_ctx";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 1131;
    int v23 = "%s:%d: fd_truncate error";
    goto LABEL_57;
  }
  uint64_t v46 = fd_mmap(*(void *)(v6 + 336));
  *(void *)(v6 + 360) = v46;
  if (v46 == -1)
  {
    int v20 = *__error();
    int v21 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    *(_DWORD *)int v102 = 136315394;
    *(void *)&uint8_t v102[4] = "data_map_ext_init_with_ctx";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 1137;
    int v23 = "%s:%d: hash fd_mmap error";
    goto LABEL_57;
  }
  *(void *)(v6 + 344) = v45;
  *(void *)(v6 + 352) = 0x100000;
  unint64_t v47 = (unint64_t)*v41 >> 3;
  uint64_t v48 = *(void *)(v6 + 264);
  *(void *)(v48 + 20) = v47;
  *(void *)(v6 + 368) = v47;
  int v49 = *(void **)(v6 + 288);
  *int v49 = 0;
  v49[1] = 0;
  v49[2] = 0;
  *(void *)(v48 + 28) = 1;
  *(void *)(v6 + 376) = 1;
  unsigned int v50 = *(_DWORD *)(v48 + 16);
  if (v50 < 3) {
    unsigned int v51 = v50 + 1;
  }
  else {
    unsigned int v51 = 0;
  }
  SIActivityJournalEvent(*(os_unfair_lock_s **)(v6 + 408), *(_DWORD *)(v6 + 416), 0, v51, 1u);
  char v52 = v4;
LABEL_44:
  if (*(void *)(v6 + 328) < *(void *)(v6 + 376))
  {
    int v20 = *__error();
    int v21 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v53 = *(void *)(v6 + 328);
      uint64_t v54 = *(void *)(v6 + 376);
      *(_DWORD *)int v102 = 136315906;
      *(void *)&uint8_t v102[4] = "data_map_ext_init_with_ctx";
      *(_WORD *)&v102[12] = 1024;
      *(_DWORD *)&v102[14] = 1257;
      *(_WORD *)&v102[18] = 2048;
      *(void *)&v102[20] = v53;
      *(_WORD *)&v102[28] = 2048;
      *(void *)&v102[30] = v54;
      int v23 = "%s:%d: invalid offset size 1 - %lld %lld";
      uint32_t v24 = 38;
      goto LABEL_58;
    }
LABEL_21:
    *__error() = v20;
LABEL_22:
    char v25 = 0;
    goto LABEL_23;
  }
  uint64_t v80 = *(void *)(v6 + 264);
  if (*(void *)v80 != 0x4461746150EELL)
  {
    int v20 = *__error();
    int v21 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    *(_DWORD *)int v102 = 136315394;
    *(void *)&uint8_t v102[4] = "data_map_ext_init_with_ctx";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 1261;
    int v23 = "%s:%d: invalid offset signature";
    goto LABEL_57;
  }
  unsigned int v81 = *(_DWORD *)(v80 + 8);
  if (v81 <= 0xD)
  {
    int v20 = *__error();
    int v21 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    *(_DWORD *)int v102 = 136315650;
    *(void *)&uint8_t v102[4] = "data_map_ext_init_with_ctx";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 1267;
    *(_WORD *)&v102[18] = 1024;
    *(_DWORD *)&v102[20] = v81;
    int v23 = "%s:%d: invalid version %d";
    uint32_t v24 = 24;
    goto LABEL_58;
  }
  if (*(_DWORD *)(v80 + 12) != v93)
  {
    int v20 = *__error();
    int v21 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    int v88 = *(_DWORD *)(*(void *)(v6 + 264) + 12);
    *(_DWORD *)int v102 = 136315906;
    *(void *)&uint8_t v102[4] = "data_map_ext_init_with_ctx";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 1271;
    *(_WORD *)&v102[18] = 1024;
    *(_DWORD *)&v102[20] = v88;
    *(_WORD *)&v102[24] = 1024;
    *(_DWORD *)&v102[26] = v93;
    int v23 = "%s:%d: invalid extra_size %d %d";
    uint32_t v24 = 30;
    goto LABEL_58;
  }
  *(_DWORD *)(v6 + 220) = v93;
  if (*(void *)(v6 + 256) <= 0x53uLL)
  {
    int v20 = *__error();
    int v21 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    *(_DWORD *)int v102 = 136315394;
    *(void *)&uint8_t v102[4] = "data_map_ext_init_with_ctx";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 1279;
    int v23 = "%s:%d: invalid header size";
    goto LABEL_57;
  }
  if (v52 < 0
    || !*(_DWORD *)(v80 + 16)
    || (uint64_t v89 = *(void *)(v6 + 368)) == 0
    || (unint64_t v90 = *(void *)(v6 + 344), v90 < 8 * v89))
  {
    if (_data_map_ext_rehash(v6))
    {
      unint64_t v90 = *(void *)(v6 + 344);
      uint64_t v89 = *(void *)(v6 + 368);
      goto LABEL_128;
    }
    int v20 = *__error();
    int v21 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    *(_DWORD *)int v102 = 136315394;
    *(void *)&uint8_t v102[4] = "data_map_ext_init_with_ctx";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 1285;
    int v23 = "%s:%d: re-build hash error";
LABEL_57:
    uint32_t v24 = 18;
    goto LABEL_58;
  }
LABEL_128:
  if (v90 < 8 * v89)
  {
    int v20 = *__error();
    int v21 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
      goto LABEL_21;
    }
    *(_DWORD *)int v102 = 136315394;
    *(void *)&uint8_t v102[4] = "data_map_ext_init_with_ctx";
    *(_WORD *)&v102[12] = 1024;
    *(_DWORD *)&v102[14] = 1292;
    int v23 = "%s:%d: invalid hash size 1";
    goto LABEL_57;
  }
  char v25 = 1;
LABEL_23:
  uint64_t v26 = *(void *)&threadData[18 * v94 + 2];
  uint64_t v27 = v26 + 320 * v97;
  *(_DWORD *)(v27 + 312) = v13;
  uint64_t v28 = *(void (**)(void))(v27 + 232);
  if (v28) {
    v28(*(void *)(v26 + 320 * v97 + 288));
  }
  dropThreadId(v94, 0, v7);
  if ((v25 & 1) == 0) {
    goto LABEL_34;
  }
  long long v114 = 0u;
  long long v115 = 0u;
  long long v112 = 0u;
  long long v113 = 0u;
  long long v110 = 0u;
  long long v111 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  long long v103 = 0u;
  memset(v102, 0, sizeof(v102));
  int v29 = *__error();
  unsigned int v30 = _SILogForLogForCategory(7);
  os_log_type_t v31 = 2 * (dword_1E9FC90C0 < 4);
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = fd_name(*(void *)(v6 + 240), (char *)v102, 0x100uLL);
    uint64_t v33 = *(void *)(v6 + 376) - 1;
    *(_DWORD *)stat buf = 136315394;
    size_t v99 = v32;
    __int16 v100 = 2048;
    uint64_t v101 = v33;
    _os_log_impl(&dword_1BD672000, v30, v31, "Opened map %s with counts: %lld", buf, 0x16u);
  }
  *__error() = v29;
  uint64_t v34 = *(void *)(v6 + 264);
  if (v34)
  {
    unsigned int v35 = *(_DWORD *)(v34 + 16);
    if (v35 < 3) {
      unsigned int v36 = v35 + 1;
    }
    else {
      unsigned int v36 = 0;
    }
  }
  else
  {
    unsigned int v36 = 0;
  }
  SIActivityJournalEvent(*(os_unfair_lock_s **)(v6 + 408), *(_DWORD *)(v6 + 416), 1u, v36, *(_DWORD *)(v6 + 376));
  return v6;
}

uint64_t _data_map_ext_rehash(uint64_t a1)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 392) = 0;
  uint64_t v2 = *(void *)(a1 + 376) - *(void *)(a1 + 384);
  int v3 = *__error();
  unsigned int v4 = _SILogForLogForCategory(0);
  os_log_type_t v5 = 2 * (gSILogLevels[0] < 4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v7 = *(void *)(a1 + 376);
    uint64_t v6 = *(void *)(a1 + 384);
    uint64_t v8 = *(void *)(a1 + 368);
    *(_DWORD *)stat buf = 134219008;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&unsigned char buf[14] = v7;
    *(_WORD *)&buf[22] = 2048;
    *(void *)&buf[24] = v6;
    *(_WORD *)&uint8_t buf[32] = 2048;
    *(void *)&buf[34] = v2;
    *(_WORD *)&buf[42] = 2048;
    *(void *)&buf[44] = v8;
    _os_log_impl(&dword_1BD672000, v4, v5, "rehash %p max id: %lld deletes: %lld count: %lld hash_size: %lld", buf, 0x34u);
  }
  *__error() = v3;
  uint64_t v9 = *(void *)(a1 + 264);
  if (v9)
  {
    unsigned int v10 = *(_DWORD *)(v9 + 16);
    if (v10 < 3) {
      unsigned int v11 = v10 + 1;
    }
    else {
      unsigned int v11 = 0;
    }
  }
  else
  {
    unsigned int v11 = 0;
  }
  SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 408), *(_DWORD *)(a1 + 416), 3u, v11, *(_DWORD *)(a1 + 376));
  uint64_t v12 = *(void **)(a1 + 360);
  size_t v13 = 8 * *(void *)(a1 + 368);
  fd_system_status_stall_if_busy();
  msync(v12, v13, 4);
  if (fd_truncate(*(void *)(a1 + 336), 0) == -1) {
    goto LABEL_31;
  }
  uint64_t v14 = 2 * v2;
  if ((unint64_t)(2 * v2) <= *MEMORY[0x1E4F14B00] >> 3) {
    uint64_t v14 = *MEMORY[0x1E4F14B00] >> 3;
  }
  *(void *)(a1 + 368) = v14;
  unint64_t v15 = 8 * v14;
  if (fd_truncate(*(void *)(a1 + 336), 8 * v14) == -1) {
    goto LABEL_31;
  }
  if (!*(unsigned char *)(a1 + 458))
  {
    _data_map_ext_dirty(a1);
    *(unsigned char *)(a1 + 458) = 1;
  }
  *(void *)(a1 + 344) = v15;
  size_t v16 = *(void *)(a1 + 352);
  if (v15 > v16)
  {
    unint64_t v17 = *(void *)(a1 + 352);
    do
    {
      unint64_t v18 = v17;
      v17 *= 2;
    }
    while (v18 < v15);
    munmap(*(void **)(a1 + 360), v16);
    *(void *)(a1 + 352) = 0;
    *(void *)(a1 + 360) = -1;
    uint64_t v19 = fd_mmap(*(void *)(a1 + 336));
    *(void *)(a1 + 360) = v19;
    if (v19 == -1) {
      goto LABEL_31;
    }
    *(void *)(a1 + 352) = v18;
  }
  unint64_t v20 = *(void *)(a1 + 376);
  if (v20 < 2) {
    return 1;
  }
  uint64_t v21 = 0;
  unint64_t v22 = 1;
  while (1)
  {
    uint64_t v23 = *(void *)(a1 + 288);
    if ((unint64_t)(v23 + 1) <= 1) {
      break;
    }
    uint64_t v24 = v23 + v21;
    if (*(void *)(v24 + 24) != -2)
    {
      bucket_entry = (void *)_data_map_ext_get_bucket_entry(a1, *(void *)(v24 + 40), v22, 0, 0);
      if (!bucket_entry || *bucket_entry) {
        goto LABEL_31;
      }
      void *bucket_entry = v22;
      unint64_t v20 = *(void *)(a1 + 376);
    }
    ++v22;
    v21 += 24;
    if (v22 >= v20) {
      return 1;
    }
  }
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  memset(buf, 0, sizeof(buf));
  int v27 = *__error();
  uint64_t v28 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    uint64_t v32 = *(void *)(a1 + 376);
    uint64_t v33 = *(void *)(a1 + 288);
    uint64_t v34 = fd_name(*(void *)(a1 + 240), (char *)buf, 0x100uLL);
    int v35 = 136316674;
    unsigned int v36 = "_data_map_ext_get_offset_entry";
    __int16 v37 = 1024;
    int v38 = 416;
    __int16 v39 = 2048;
    unint64_t v40 = v22;
    __int16 v41 = 2048;
    uint64_t v42 = v32;
    __int16 v43 = 2048;
    uint64_t v44 = a1;
    __int16 v45 = 2048;
    uint64_t v46 = v33;
    __int16 v47 = 2080;
    uint64_t v48 = v34;
    _os_log_error_impl(&dword_1BD672000, v28, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %lld max %lld %p map: %p %s", (uint8_t *)&v35, 0x44u);
  }
  *__error() = v27;
LABEL_31:
  int v29 = *__error();
  unsigned int v30 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)stat buf = 136315650;
    *(void *)&uint8_t buf[4] = "_data_map_ext_rehash";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = 644;
    *(_WORD *)&unsigned char buf[18] = 2048;
    *(void *)&unsigned char buf[20] = a1;
    _os_log_error_impl(&dword_1BD672000, v30, OS_LOG_TYPE_ERROR, "%s:%d: re-build hash error %p", buf, 0x1Cu);
  }
  os_log_type_t v31 = __error();
  uint64_t result = 0;
  *os_log_type_t v31 = v29;
  return result;
}

void data_map_ext_destroy(uint64_t a1)
{
  if (a1)
  {
    makeThreadId();
    if ((unint64_t)(*(void *)(a1 + 224) + 1) >= 2)
    {
      char v55 = 0;
      int v10 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
      unint64_t v11 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_12813, a1, 0, v10);
      unsigned int v53 = HIDWORD(v11);
      unsigned int v54 = v11;
      unsigned int v51 = v13;
      unsigned int v52 = v12;
      uint64_t v14 = *(void *)&threadData[18 * v11 + 2];
      uint64_t v15 = v14 + 320 * HIDWORD(v11);
      int v16 = *(_DWORD *)(v15 + 312);
      unint64_t v17 = *(void (**)(void))(v15 + 224);
      if (v17) {
        v17(*(void *)(v14 + 320 * HIDWORD(v11) + 288));
      }
      unsigned int v50 = v54;
      unsigned int v49 = v53;
      unint64_t v48 = __PAIR64__(v52, v51);
      if (_setjmp((int *)v15))
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__int16 v47 = 0;
          _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v47, 2u);
        }
        *(_DWORD *)(v15 + 312) = v16;
        CIOnThreadCleanUpReset(v48);
        dropThreadId(v50, 1, v10);
        CICleanUpReset(v50, HIDWORD(v48));
        size_t v18 = 0;
      }
      else
      {
        size_t v22 = *(void *)(*(void *)(a1 + 224) + 88);
        char v55 = 1;
        uint64_t v23 = *(void *)&threadData[18 * v50 + 2];
        unsigned int v24 = v49;
        uint64_t v25 = v23 + 320 * v49;
        *(_DWORD *)(v25 + 312) = v16;
        uint64_t v26 = *(void (**)(void))(v25 + 232);
        if (v26) {
          v26(*(void *)(v23 + 320 * v24 + 288));
        }
        dropThreadId(v50, 0, v10);
        size_t v18 = v22;
      }
      size_t v27 = v18;
      if (!v55) {
        size_t v27 = *(void *)(a1 + 232);
      }
      munmap(*(void **)(a1 + 224), v27);
      *(void *)(a1 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = -1;
      fd_release(*(atomic_uint **)(a1 + 240));
      *(void *)(a1 + 240) = 0;
      uint64_t v28 = *(atomic_uint **)(a1 + 248);
      if (v28)
      {
        fd_release(v28);
        *(void *)(a1 + 248) = 0;
      }
    }
    else
    {
      int v2 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
      unint64_t v3 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_12813, a1, 0, v2);
      unsigned int v53 = HIDWORD(v3);
      unsigned int v54 = v3;
      unsigned int v51 = v5;
      unsigned int v52 = v4;
      uint64_t v6 = *(void *)&threadData[18 * v3 + 2];
      uint64_t v7 = v6 + 320 * HIDWORD(v3);
      int v8 = *(_DWORD *)(v7 + 312);
      uint64_t v9 = *(void (**)(void))(v7 + 224);
      if (v9) {
        v9(*(void *)(v6 + 320 * HIDWORD(v3) + 288));
      }
      unsigned int v50 = v54;
      unsigned int v49 = v53;
      unint64_t v48 = __PAIR64__(v52, v51);
      if (_setjmp((int *)v7))
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__int16 v47 = 0;
          _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v47, 2u);
        }
        *(_DWORD *)(v7 + 312) = v8;
        CIOnThreadCleanUpReset(v48);
        dropThreadId(v50, 1, v2);
        CICleanUpReset(v50, HIDWORD(v48));
      }
      else
      {
        uint64_t v19 = *(void *)(a1 + 264);
        if (v19)
        {
          unsigned int v20 = *(_DWORD *)(v19 + 16);
          if (v20 < 3) {
            unsigned int v21 = v20 + 1;
          }
          else {
            unsigned int v21 = 0;
          }
        }
        else
        {
          unsigned int v21 = 0;
        }
        SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 408), *(_DWORD *)(a1 + 416), 2u, v21, *(_DWORD *)(a1 + 376));
        uint64_t v29 = *(void *)(a1 + 264);
        if (v29 && !*(_DWORD *)(v29 + 16))
        {
          if (*(unsigned char *)(a1 + 458))
          {
            unsigned int v30 = *(void **)(a1 + 360);
            size_t v31 = 8 * *(void *)(a1 + 368);
            fd_system_status_stall_if_busy();
            msync(v30, v31, 4);
            _fd_unlink_with_origin(*(void *)(a1 + 336), 0);
            munmap(*(void **)(a1 + 360), *(void *)(a1 + 352));
            *(void *)(a1 + 360) = -1;
          }
          if (*(unsigned char *)(a1 + 459))
          {
            uint64_t v32 = *(void **)(a1 + 288);
            size_t v33 = 24 * *(void *)(a1 + 376);
            fd_system_status_stall_if_busy();
            msync(v32, v33, 4);
            munmap(*(void **)(a1 + 288), *(void *)(a1 + 280));
            *(void *)(a1 + 288) = -1;
            fd_truncate(*(void *)(a1 + 272), 24 * *(void *)(a1 + 376));
          }
        }
        uint64_t v34 = *(void *)&threadData[18 * v50 + 2];
        unsigned int v35 = v49;
        uint64_t v36 = v34 + 320 * v49;
        *(_DWORD *)(v36 + 312) = v8;
        __int16 v37 = *(void (**)(void))(v36 + 232);
        if (v37) {
          v37(*(void *)(v34 + 320 * v35 + 288));
        }
        dropThreadId(v50, 0, v2);
      }
      int v38 = *(void **)(a1 + 264);
      if (v38)
      {
        free(v38);
        *(void *)(a1 + 264) = 0;
      }
      fd_release(*(atomic_uint **)(a1 + 240));
      *(void *)(a1 + 240) = 0;
      __int16 v39 = *(void **)(a1 + 288);
      if (v39 != (void *)-1)
      {
        munmap(v39, *(void *)(a1 + 280));
        *(void *)(a1 + 280) = 0;
        *(void *)(a1 + 288) = -1;
      }
      fd_release(*(atomic_uint **)(a1 + 272));
      *(void *)(a1 + 272) = 0;
      if (*(void *)(a1 + 296))
      {
        unint64_t v40 = *(void **)(a1 + 312);
        uint64_t v41 = *(void *)(a1 + 296);
        if ((unint64_t)v40 + 1 >= 2)
        {
          size_t v42 = 24 * *(void *)(a1 + 376);
          fd_system_status_stall_if_busy();
          msync(v40, v42, 4);
          munmap(*(void **)(a1 + 312), *(void *)(a1 + 280));
          *(void *)(a1 + 312) = -1;
          uint64_t v41 = *(void *)(a1 + 296);
        }
        fd_truncate(v41, 0);
        _fd_unlink_with_origin(*(void *)(a1 + 296), 0);
        fd_release(*(atomic_uint **)(a1 + 296));
        *(void *)(a1 + 296) = 0;
      }
      __int16 v43 = *(void **)(a1 + 360);
      if (v43 != (void *)-1)
      {
        munmap(v43, *(void *)(a1 + 352));
        *(void *)(a1 + 352) = 0;
        *(void *)(a1 + 360) = -1;
      }
      fd_release(*(atomic_uint **)(a1 + 336));
      *(void *)(a1 + 336) = 0;
    }
    uint64_t v44 = *(void **)(a1 + 448);
    if (v44)
    {
      __int16 v45 = (const void *)v44[2];
      if (v45) {
        CFRelease(v45);
      }
      free(v44);
      *(void *)(a1 + 448) = 0;
    }
    uint64_t v46 = *(const void **)(a1 + 480);
    if (v46) {
      CFRelease(v46);
    }
    if (!*(unsigned char *)(a1 + 461)) {
      db_rwlock_destroy((pthread_mutex_t *)a1);
    }
    free((void *)a1);
  }
}

uint64_t _data_map_ext_dirty(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 264);
  if (*(_DWORD *)(v1 + 16))
  {
    uint64_t v2 = result;
    *(_DWORD *)(v1 + 16) = 0;
    fd_pwrite(*(void *)(result + 240), v1, 0x54uLL, 0);
    uint64_t v3 = *(void *)(v2 + 240);
    return fd_sync(v3, 0);
  }
  return result;
}

uint64_t _data_map_ext_get_bucket_entry(uint64_t a1, unint64_t a2, unint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 376) > a3)
  {
    unint64_t v7 = a2;
    char v8 = 0;
    unint64_t v9 = *(void *)(a1 + 368);
    unint64_t v10 = a2 % v9;
    unint64_t v11 = v9;
    unint64_t v51 = v9;
    while (1)
    {
      unint64_t v12 = v10;
      unint64_t v13 = v10;
      if (v10 < v11) {
        break;
      }
LABEL_41:
      unint64_t v10 = 0;
      char v38 = v8 | (v13 != v9);
      char v8 = 1;
      unint64_t v11 = v12;
      if (v38) {
        return 0;
      }
    }
    char v53 = v8;
    unint64_t v14 = v10;
    while (1)
    {
      uint64_t v15 = *(void *)(a1 + 360);
      unint64_t v16 = *(void *)(v15 + 8 * v14);
      if (v16) {
        BOOL v17 = v16 == a3;
      }
      else {
        BOOL v17 = 1;
      }
      if (v17) {
        return v15 + 8 * v14;
      }
      if (!a3)
      {
        if (*(void *)(a1 + 376) <= v16 || (uint64_t v18 = *(void *)(a1 + 288), (unint64_t)(v18 + 1) <= 1))
        {
          long long v85 = 0u;
          long long v86 = 0u;
          long long v83 = 0u;
          long long v84 = 0u;
          long long v81 = 0u;
          long long v82 = 0u;
          long long v79 = 0u;
          long long v80 = 0u;
          long long v77 = 0u;
          long long v78 = 0u;
          long long v75 = 0u;
          long long v76 = 0u;
          memset(v74, 0, sizeof(v74));
          int v43 = *__error();
          uint64_t v44 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
          {
            uint64_t v48 = *(void *)(a1 + 376);
            unsigned int v49 = *(char **)(a1 + 288);
            unsigned int v50 = fd_name(*(void *)(a1 + 240), (char *)v74, 0x100uLL);
            *(_DWORD *)stat buf = 136316674;
            long long v61 = "_data_map_ext_get_offset_entry";
            __int16 v62 = 1024;
            int v63 = 416;
            __int16 v64 = 2048;
            uint64_t v65 = v16;
            __int16 v66 = 2048;
            uint64_t v67 = v48;
            __int16 v68 = 2048;
            uint64_t v69 = (char *)a1;
            __int16 v70 = 2048;
            unsigned int v71 = v49;
            __int16 v72 = 2080;
            uint64_t v73 = v50;
            _os_log_error_impl(&dword_1BD672000, v44, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %lld max %lld %p map: %p %s", buf, 0x44u);
          }
          __int16 v45 = __error();
          uint64_t result = 0;
          *__int16 v45 = v43;
          return result;
        }
        uint64_t v19 = v18 + 24 * v16;
        unint64_t v20 = *(void *)v19;
        if (*(void *)v19 == -2) {
          return 0;
        }
        if (*(void *)(v18 + 24 * v16 + 16) == v7)
        {
          size_t v21 = *(unsigned int *)(a1 + 220);
          HIDWORD(v57) = 0;
          __s2 = 0;
          if (v20 == -1)
          {
            CFDictionaryRef v27 = *(const __CFDictionary **)(a1 + 480);
            if (!v27)
            {
              long long v85 = 0u;
              long long v86 = 0u;
              long long v83 = 0u;
              long long v84 = 0u;
              long long v81 = 0u;
              long long v82 = 0u;
              long long v79 = 0u;
              long long v80 = 0u;
              long long v77 = 0u;
              long long v78 = 0u;
              long long v75 = 0u;
              long long v76 = 0u;
              memset(v74, 0, sizeof(v74));
              int v30 = *__error();
              size_t v31 = _SILogForLogForCategory(0);
              if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
              {
                uint64_t v34 = fd_name(*(void *)(a1 + 240), (char *)v74, 0x100uLL);
                *(_DWORD *)stat buf = 136316162;
                long long v61 = "_data_map_ext_get_data_entry";
                __int16 v62 = 1024;
                int v63 = 456;
                __int16 v64 = 2048;
                uint64_t v65 = -1;
                __int16 v66 = 2048;
                uint64_t v67 = a1;
                __int16 v68 = 2080;
                uint64_t v69 = v34;
                _os_log_error_impl(&dword_1BD672000, v31, OS_LOG_TYPE_ERROR, "%s:%d: invalid data offset 0x%lx %p %s", buf, 0x30u);
              }
              *__error() = v30;
              fd_name(*(void *)(a1 + 240), (char *)v74, 0x100uLL);
              si_analytics_log_2351("(2)invalid data offset 0x%lx %p %s");
              goto LABEL_31;
            }
            CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v27, (const void *)v16);
            if (!Value)
            {
              long long v85 = 0u;
              long long v86 = 0u;
              long long v83 = 0u;
              long long v84 = 0u;
              long long v81 = 0u;
              long long v82 = 0u;
              long long v79 = 0u;
              long long v80 = 0u;
              long long v77 = 0u;
              long long v78 = 0u;
              long long v75 = 0u;
              long long v76 = 0u;
              memset(v74, 0, sizeof(v74));
              int v32 = *__error();
              size_t v33 = _SILogForLogForCategory(0);
              if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
              {
                unsigned int v35 = fd_name(*(void *)(a1 + 240), (char *)v74, 0x100uLL);
                *(_DWORD *)stat buf = 136316162;
                long long v61 = "_data_map_ext_get_data_entry";
                __int16 v62 = 1024;
                int v63 = 450;
                __int16 v64 = 2048;
                uint64_t v65 = -1;
                __int16 v66 = 2048;
                uint64_t v67 = a1;
                __int16 v68 = 2080;
                uint64_t v69 = v35;
                _os_log_error_impl(&dword_1BD672000, v33, OS_LOG_TYPE_ERROR, "%s:%d: invalid data offset 0x%lx %p %s", buf, 0x30u);
              }
              *__error() = v32;
              fd_name(*(void *)(a1 + 240), (char *)v74, 0x100uLL);
              si_analytics_log_2351("(1)invalid data offset 0x%lx %p %s");
              goto LABEL_31;
            }
            CFDataRef v29 = Value;
            unsigned int v26 = CFDataGetLength(Value) - *(_DWORD *)(a1 + 220);
            __s2 = (void *)&CFDataGetBytePtr(v29)[*(unsigned int *)(a1 + 220)];
            CFDataGetBytePtr(v29);
            __memcpy_chk();
          }
          else
          {
            int v23 = *(_DWORD *)(v19 + 8);
            unsigned int v22 = *(_DWORD *)(v19 + 12);
            uint64_t v24 = *(void *)(a1 + 472);
            *(_DWORD *)stat buf = 0;
            if (!v24) {
              goto LABEL_31;
            }
            unsigned int v52 = v22;
            uint64_t contentindex_for_id = si_get_contentindex_for_id(v24, v23);
            int v59 = 0;
            if (!contentindex_for_id)
            {
              if (data_entry_restore_ext__COUNT_ >= 1)
              {
                --data_entry_restore_ext__COUNT_;
                goto LABEL_38;
              }
              if (++data_entry_restore_ext__COUNT2_ == 100)
              {
                data_entry_restore_ext__COUNT2_ = 0;
LABEL_38:
                int v36 = *__error();
                __int16 v37 = _SILogForLogForCategory(16);
                if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)int v74 = 136316418;
                  *(void *)&v74[4] = "data_entry_restore_ext";
                  *(_WORD *)&v74[12] = 1024;
                  *(_DWORD *)&v74[14] = 395;
                  *(_WORD *)&v74[18] = 2048;
                  *(void *)&v74[20] = v16;
                  *(_WORD *)&v74[28] = 1024;
                  *(_DWORD *)&v74[30] = v23;
                  *(_WORD *)&v74[34] = 2048;
                  *(void *)&v74[36] = v20;
                  *(_WORD *)&v74[44] = 1024;
                  *(_DWORD *)&v74[46] = v52;
                  _os_log_error_impl(&dword_1BD672000, v37, OS_LOG_TYPE_ERROR, "%s:%d: data id %lld invalid indexId %u offset 0x%llx meta 0x%x", v74, 0x32u);
                }
                *__error() = v36;
              }
LABEL_31:
              unint64_t v7 = a2;
              goto LABEL_32;
            }
            __s2 = (void *)ContentIndexGetDataForId(*(void *)(contentindex_for_id + 4912), v20, v52, (uint64_t)&v59, (uint64_t)buf);
            unsigned int v26 = *(_DWORD *)buf;
            HIDWORD(v57) = v59;
          }
          unint64_t v7 = a2;
          if (v26 + v21 == a5
            && !memcmp(&a4[*(unsigned int *)(a1 + 220)], __s2, v26)
            && !memcmp(a4, (char *)&v57 + 4, v21))
          {
            return v15 + 8 * v14;
          }
        }
      }
LABEL_32:
      if (v11 == ++v14)
      {
        unint64_t v13 = v11;
        unint64_t v9 = v51;
        char v8 = v53;
        goto LABEL_41;
      }
    }
  }
  if (!a3) {
    return 0;
  }
  long long v85 = 0u;
  long long v86 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  memset(v74, 0, sizeof(v74));
  int v39 = *__error();
  unint64_t v40 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
  {
    uint64_t v46 = *(void *)(a1 + 376);
    __int16 v47 = fd_name(*(void *)(a1 + 240), (char *)v74, 0x100uLL);
    *(_DWORD *)stat buf = 136316418;
    long long v61 = "_data_map_ext_get_bucket_entry";
    __int16 v62 = 1024;
    int v63 = 530;
    __int16 v64 = 2048;
    uint64_t v65 = a3;
    __int16 v66 = 2048;
    uint64_t v67 = v46;
    __int16 v68 = 2048;
    uint64_t v69 = (char *)a1;
    __int16 v70 = 2080;
    unsigned int v71 = v47;
    _os_log_error_impl(&dword_1BD672000, v40, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %lld max %lld %p %s", buf, 0x3Au);
  }
  uint64_t v41 = __error();
  uint64_t result = 0;
  *uint64_t v41 = v39;
  return result;
}

uint64_t _data_map_ext_match_address(uint64_t result, unint64_t a2)
{
  if (result)
  {
    uint64_t v3 = (void *)result;
    unint64_t v4 = *(void *)(result + 224);
    if (v4 != -1)
    {
      if (v4)
      {
        if (v4 <= a2)
        {
          uint64_t v5 = *(void *)(result + 232);
          if (v4 + v5 > a2)
          {
            uint64_t v6 = *(void *)(result + 240);
            unint64_t v7 = "data ro header";
            uint64_t v8 = a2;
            uint64_t v9 = v3[29];
LABEL_29:
            log_map_access_error_5877(v8, v4, v5, v9, (uint64_t)v7, v6);
            return 1;
          }
        }
      }
      return 0;
    }
    uint64_t v10 = *(void *)(result + 472);
    if (v10)
    {
      uint64_t v11 = *(void *)(v10 + 1376);
      if (*(_DWORD *)(v11 + 8))
      {
        unint64_t v12 = 0;
        while ((_indexMatchAddress(*(void *)(*(void *)v11 + 8 * v12), a2) & 1) == 0)
        {
          ++v12;
          uint64_t v11 = *(void *)(v10 + 1376);
          if (v12 >= *(unsigned int *)(v11 + 8)) {
            goto LABEL_12;
          }
        }
        return 1;
      }
LABEL_12:
      uint64_t v13 = *(void *)(v10 + 1384);
      if (*(_DWORD *)(v13 + 8))
      {
        unint64_t v14 = 0;
        while ((_indexMatchAddress(*(void *)(*(void *)v13 + 8 * v14), a2) & 1) == 0)
        {
          ++v14;
          uint64_t v13 = *(void *)(v10 + 1384);
          if (v14 >= *(unsigned int *)(v13 + 8)) {
            goto LABEL_16;
          }
        }
        return 1;
      }
    }
LABEL_16:
    unint64_t v4 = v3[36];
    BOOL v15 = v4 + 1 < 2 || v4 > a2;
    if (v15 || (uint64_t v5 = v3[35], v4 + v5 <= a2))
    {
      unint64_t v4 = v3[45];
      if (v4 + 1 < 2) {
        return 0;
      }
      if (v4 > a2) {
        return 0;
      }
      uint64_t v5 = v3[44];
      if (v4 + v5 <= a2) {
        return 0;
      }
      uint64_t v6 = v3[42];
      uint64_t v9 = v3[43];
      unint64_t v7 = "data buckets";
    }
    else
    {
      uint64_t v9 = v3[40];
      uint64_t v6 = v3[34];
      unint64_t v7 = "data offsets";
    }
    uint64_t v8 = a2;
    goto LABEL_29;
  }
  return result;
}

uint64_t _data_map_ext_sync_data(uint64_t a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  char v32 = 0;
  makeThreadId();
  int v2 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v3 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_12813, a1, 0, v2);
  unsigned int v30 = HIDWORD(v3);
  unsigned int v31 = v3;
  unsigned int v28 = v5;
  unsigned int v29 = v4;
  uint64_t v6 = *(void *)&threadData[18 * v3 + 2];
  uint64_t v7 = v6 + 320 * HIDWORD(v3);
  int v8 = *(_DWORD *)(v7 + 312);
  uint64_t v9 = *(void (**)(void))(v7 + 224);
  if (v9) {
    v9(*(void *)(v6 + 320 * HIDWORD(v3) + 288));
  }
  if (_setjmp((int *)v7))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)stat buf = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
    }
    *(_DWORD *)(v7 + 312) = v8;
    CIOnThreadCleanUpReset(v28);
    dropThreadId(v31, 1, v2);
    CICleanUpReset(v31, v29);
  }
  else
  {
    if (!*(_DWORD *)(a1 + 464) && !*(_DWORD *)(*(void *)(a1 + 264) + 16))
    {
      SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 408), *(_DWORD *)(a1 + 416), 7u, 1u, *(_DWORD *)(a1 + 376));
      if (*(unsigned char *)(a1 + 457)) {
        *(unsigned char *)(a1 + 457) = 0;
      }
      if (*(unsigned char *)(a1 + 459))
      {
        uint64_t v10 = *(void *)(*(void *)(a1 + 264) + 52);
        uint64_t v11 = (void *)((*(void *)(a1 + 288) + 24 * v10) & -*MEMORY[0x1E4F14B00]);
        size_t v12 = 24 * (*(void *)(a1 + 376) - v10);
        fd_system_status_stall_if_busy();
        msync(v11, v12, 16);
        *(unsigned char *)(a1 + 459) = 0;
      }
      if (*(unsigned char *)(a1 + 458))
      {
        uint64_t v13 = *(void **)(a1 + 360);
        size_t v14 = 8 * *(void *)(a1 + 368);
        fd_system_status_stall_if_busy();
        msync(v13, v14, 16);
        *(unsigned char *)(a1 + 458) = 0;
      }
      int v15 = *__error();
      unint64_t v16 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *(void *)(a1 + 376);
        *(_DWORD *)stat buf = 134217984;
        *(void *)&uint8_t buf[4] = v17;
        _os_log_impl(&dword_1BD672000, v16, OS_LOG_TYPE_DEFAULT, "sd update next_id = %lld", buf, 0xCu);
      }
      *__error() = v15;
      uint64_t v18 = *(void *)(a1 + 264);
      *(_OWORD *)(v18 + 20) = *(_OWORD *)(a1 + 368);
      *(_OWORD *)(v18 + 60) = *(_OWORD *)(a1 + 384);
      *(void *)(v18 + 76) = *(void *)(a1 + 400);
      *(_DWORD *)(v18 + 16) = 0;
      fd_pwrite(*(void *)(a1 + 240), v18, 0x54uLL, 0);
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      *(_OWORD *)stat buf = 0u;
      long long v40 = 0u;
      int v19 = *__error();
      unint64_t v20 = _SILogForLogForCategory(7);
      os_log_type_t v21 = 2 * (dword_1E9FC90C0 < 4);
      if (os_log_type_enabled(v20, v21))
      {
        unsigned int v22 = fd_name(*(void *)(a1 + 240), (char *)buf, 0x100uLL);
        uint64_t v23 = *(void *)(a1 + 376) - 1;
        *(_DWORD *)size_t v33 = 136315650;
        uint64_t v34 = v22;
        __int16 v35 = 2080;
        int v36 = "sync";
        __int16 v37 = 2048;
        uint64_t v38 = v23;
        _os_log_impl(&dword_1BD672000, v20, v21, "%s complete %s map with count: %lld", v33, 0x20u);
      }
      *__error() = v19;
    }
    char v32 = 1;
    uint64_t v24 = *(void *)&threadData[18 * v31 + 2];
    uint64_t v25 = v24 + 320 * v30;
    *(_DWORD *)(v25 + 312) = v8;
    unsigned int v26 = *(void (**)(void))(v25 + 232);
    if (v26) {
      v26(*(void *)(v24 + 320 * v30 + 288));
    }
    dropThreadId(v31, 0, v2);
  }
  if (v32) {
    return *(unsigned int *)(a1 + 464);
  }
  *(_DWORD *)(a1 + 464) = 22;
  return 22;
}

uint64_t _data_map_ext_sync_header(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  char v27 = 0;
  makeThreadId();
  int v2 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v3 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_12813, a1, 0, v2);
  unsigned int v25 = HIDWORD(v3);
  unsigned int v26 = v3;
  unsigned int v23 = v5;
  unsigned int v24 = v4;
  uint64_t v6 = *(void *)&threadData[18 * v3 + 2];
  uint64_t v7 = v6 + 320 * HIDWORD(v3);
  int v8 = *(_DWORD *)(v7 + 312);
  uint64_t v9 = *(void (**)(void))(v7 + 224);
  if (v9) {
    v9(*(void *)(v6 + 320 * HIDWORD(v3) + 288));
  }
  if (_setjmp((int *)v7))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v34 = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v34, 2u);
    }
    *(_DWORD *)(v7 + 312) = v8;
    CIOnThreadCleanUpReset(v23);
    dropThreadId(v26, 1, v2);
    CICleanUpReset(v26, v24);
  }
  else
  {
    if (!*(_DWORD *)(a1 + 464))
    {
      int v10 = *(_DWORD *)(*(void *)(a1 + 264) + 16);
      if (v10 != 1)
      {
        if (v10 == 2) {
          int v11 = 3;
        }
        else {
          int v11 = 0;
        }
        if (v10) {
          unsigned int v12 = v11;
        }
        else {
          unsigned int v12 = 1;
        }
        SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 408), *(_DWORD *)(a1 + 416), 0xAu, v12, *(_DWORD *)(a1 + 376));
        uint64_t v13 = *(void *)(a1 + 264);
        *(_OWORD *)(v13 + 44) = *(_OWORD *)(v13 + 20);
        *(_OWORD *)(v13 + 20) = *(_OWORD *)(a1 + 368);
        *(_DWORD *)(v13 + 16) = 0;
        fd_pwrite(*(void *)(a1 + 240), v13, 0x54uLL, 0);
        fd_sync(*(void *)(a1 + 240), 0);
        *(_DWORD *)(*(void *)(a1 + 264) + 16) = 2;
        SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 408), *(_DWORD *)(a1 + 416), 0xBu, 3u, *(_DWORD *)(a1 + 376));
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        *(_OWORD *)uint64_t v34 = 0u;
        long long v35 = 0u;
        int v14 = *__error();
        int v15 = _SILogForLogForCategory(7);
        os_log_type_t v16 = 2 * (dword_1E9FC90C0 < 4);
        if (os_log_type_enabled(v15, v16))
        {
          uint64_t v17 = fd_name(*(void *)(a1 + 240), (char *)v34, 0x100uLL);
          uint64_t v18 = *(void *)(a1 + 376) - 1;
          *(_DWORD *)stat buf = 136315650;
          unsigned int v29 = v17;
          __int16 v30 = 2080;
          unsigned int v31 = "sync";
          __int16 v32 = 2048;
          uint64_t v33 = v18;
          _os_log_impl(&dword_1BD672000, v15, v16, "%s complete %s header with count: %llu", buf, 0x20u);
        }
        *__error() = v14;
      }
    }
    char v27 = 1;
    uint64_t v19 = *(void *)&threadData[18 * v26 + 2];
    uint64_t v20 = v19 + 320 * v25;
    *(_DWORD *)(v20 + 312) = v8;
    os_log_type_t v21 = *(void (**)(void))(v20 + 232);
    if (v21) {
      v21(*(void *)(v19 + 320 * v25 + 288));
    }
    dropThreadId(v26, 0, v2);
  }
  if (v27) {
    return *(unsigned int *)(a1 + 464);
  }
  *(_DWORD *)(a1 + 464) = 22;
  return 22;
}

uint64_t _data_map_ext_commit(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (_data_map_ext_rdlock(a1)) {
    return 0xFFFFFFFFLL;
  }
  char v38 = 0;
  makeThreadId();
  int v3 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v4 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_12813, a1, 0, v3);
  *(_DWORD *)stat buf = HIDWORD(v4);
  LODWORD(v45[0]) = v4;
  unint64_t v37 = __PAIR64__(v5, v6);
  uint64_t v7 = *(void *)&threadData[18 * v4 + 2];
  uint64_t v8 = v7 + 320 * HIDWORD(v4);
  int v9 = *(_DWORD *)(v8 + 312);
  int v10 = *(void (**)(void))(v8 + 224);
  if (v10) {
    v10(*(void *)(v7 + 320 * HIDWORD(v4) + 288));
  }
  unsigned int v36 = v45[0];
  unsigned int v35 = *(_DWORD *)buf;
  unint64_t v34 = v37;
  if (!_setjmp((int *)v8))
  {
    uint64_t v12 = *(void *)(a1 + 264);
    if (v12)
    {
      unsigned int v13 = *(_DWORD *)(v12 + 16);
      if (v13 < 3) {
        unsigned int v14 = v13 + 1;
      }
      else {
        unsigned int v14 = 0;
      }
    }
    else
    {
      unsigned int v14 = 0;
    }
    SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 408), *(_DWORD *)(a1 + 416), 5u, v14, *(_DWORD *)(a1 + 376));
    int v15 = *(_DWORD *)(*(void *)(a1 + 264) + 16);
    if (v15)
    {
      if (v15 != 1)
      {
        uint64_t v19 = *(os_unfair_lock_s **)(a1 + 408);
        unsigned int v20 = *(_DWORD *)(a1 + 416);
        uint64_t v17 = 0xFFFFFFFFLL;
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v16 = _data_map_ext_sync_data(a1);
      if (v16 || (uint64_t v16 = _data_map_ext_sync_header(a1), v16))
      {
LABEL_21:
        uint64_t v17 = v16;
        uint64_t v18 = *(void *)(a1 + 264);
        uint64_t v19 = *(os_unfair_lock_s **)(a1 + 408);
        unsigned int v20 = *(_DWORD *)(a1 + 416);
        if (!v18)
        {
          unsigned int v22 = 0;
LABEL_33:
          uint64_t v23 = v17;
          SIActivityJournalEvent(v19, v20, 6u, v22, *(_DWORD *)(a1 + 376));
          char v38 = 1;
          uint64_t v24 = *(void *)&threadData[18 * v36 + 2];
          unsigned int v25 = v35;
          uint64_t v26 = v24 + 320 * v35;
          *(_DWORD *)(v26 + 312) = v9;
          char v27 = *(void (**)(void))(v26 + 232);
          if (v27) {
            v27(*(void *)(v24 + 320 * v25 + 288));
          }
          dropThreadId(v36, 0, v3);
          uint64_t v11 = v23;
          goto LABEL_36;
        }
        int v15 = *(_DWORD *)(v18 + 16);
LABEL_24:
        if (v15 == 1) {
          int v21 = 2;
        }
        else {
          int v21 = 0;
        }
        if (v15 == 2) {
          int v21 = 3;
        }
        if (v15) {
          unsigned int v22 = v21;
        }
        else {
          unsigned int v22 = 1;
        }
        goto LABEL_33;
      }
    }
    uint64_t v16 = data_map_ext_shadow(a1);
    if (!v16)
    {
      uint64_t v16 = data_map_ext_commit_shadow(a1);
      if (!v16) {
        uint64_t v16 = data_map_ext_commit_shadow_complete(a1);
      }
    }
    goto LABEL_21;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v33 = 0;
    _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v33, 2u);
  }
  *(_DWORD *)(v8 + 312) = v9;
  CIOnThreadCleanUpReset(v34);
  dropThreadId(v36, 1, v3);
  CICleanUpReset(v36, HIDWORD(v34));
  uint64_t v11 = 0xFFFFFFFFLL;
LABEL_36:
  if (!v38) {
    *(_DWORD *)(a1 + 464) = 22;
  }
  memset(v45, 0, sizeof(v45));
  int v28 = *__error();
  unsigned int v29 = _SILogForLogForCategory(7);
  os_log_type_t v30 = 2 * (dword_1E9FC90C0 < 4);
  if (os_log_type_enabled(v29, v30))
  {
    unsigned int v31 = fd_name(*(void *)(a1 + 240), (char *)v45, 0x100uLL);
    uint64_t v32 = *(void *)(a1 + 376) - 1;
    *(_DWORD *)stat buf = 136315650;
    long long v40 = v31;
    __int16 v41 = 2080;
    long long v42 = "commit";
    __int16 v43 = 2048;
    uint64_t v44 = v32;
    _os_log_impl(&dword_1BD672000, v29, v30, "%s complete %s with count: %lld", buf, 0x20u);
  }
  *__error() = v28;
  _data_map_ext_unlock(a1);
  return v11;
}

uint64_t data_map_ext_shadow(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 464) || *(_DWORD *)(*(void *)(a1 + 264) + 16) != 2)
  {
    int v8 = *__error();
    int v9 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 264) + 28);
      int v16 = 134217984;
      uint64_t v17 = v10;
      _os_log_impl(&dword_1BD672000, v9, OS_LOG_TYPE_DEFAULT, "Already shadowed; don't shadow next_id = %lld",
        (uint8_t *)&v16,
        0xCu);
    }
    *__error() = v8;
  }
  else
  {
    int v2 = *__error();
    int v3 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 264) + 28);
      int v16 = 134217984;
      uint64_t v17 = v4;
      _os_log_impl(&dword_1BD672000, v3, OS_LOG_TYPE_DEFAULT, "shadow update next_id = %lld", (uint8_t *)&v16, 0xCu);
    }
    *__error() = v2;
    uint64_t v5 = *(void *)(a1 + 264);
    if (v5)
    {
      unsigned int v6 = *(_DWORD *)(v5 + 16);
      if (v6 < 3) {
        unsigned int v7 = v6 + 1;
      }
      else {
        unsigned int v7 = 0;
      }
    }
    else
    {
      unsigned int v7 = 0;
    }
    SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 408), *(_DWORD *)(a1 + 416), 0xCu, v7, *(_DWORD *)(a1 + 376));
    *(_DWORD *)(*(void *)(a1 + 264) + 16) = 2;
    sibling_with_suffix_protected = fd_create_sibling_with_suffix_protected(*(void *)(a1 + 240), ".shadow", 514);
    *(void *)(a1 + 248) = sibling_with_suffix_protected;
    fd_pwrite((uint64_t)sibling_with_suffix_protected, *(void *)(a1 + 264), 0x54uLL, 0);
    uint64_t v13 = *(void *)(a1 + 264);
    if (v13)
    {
      unsigned int v14 = *(_DWORD *)(v13 + 16);
      if (v14 < 3) {
        unsigned int v15 = v14 + 1;
      }
      else {
        unsigned int v15 = 0;
      }
    }
    else
    {
      unsigned int v15 = 0;
    }
    SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 408), *(_DWORD *)(a1 + 416), 0xDu, v15, *(_DWORD *)(a1 + 376));
  }
  return *(unsigned int *)(a1 + 464);
}

uint64_t data_map_ext_commit_shadow(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 464) || *(_DWORD *)(*(void *)(a1 + 264) + 16) != 2)
  {
    int v5 = *__error();
    unsigned int v6 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 376);
      int v9 = 134217984;
      uint64_t v10 = v7;
      _os_log_impl(&dword_1BD672000, v6, OS_LOG_TYPE_DEFAULT, "Already shadowed cs; don't shadow next_id = %lld",
        (uint8_t *)&v9,
        0xCu);
    }
    *__error() = v5;
  }
  else
  {
    SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 408), *(_DWORD *)(a1 + 416), 0xEu, 3u, *(_DWORD *)(a1 + 376));
    int v2 = *__error();
    int v3 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 376);
      int v9 = 134217984;
      uint64_t v10 = v4;
      _os_log_impl(&dword_1BD672000, v3, OS_LOG_TYPE_DEFAULT, "commit shadow update next_id = %lld", (uint8_t *)&v9, 0xCu);
    }
    *__error() = v2;
    fd_sync(*(void *)(a1 + 248), 0);
  }
  fd_release(*(atomic_uint **)(a1 + 248));
  *(void *)(a1 + 248) = 0;
  return *(unsigned int *)(a1 + 464);
}

uint64_t data_map_ext_commit_shadow_complete(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 464) || *(_DWORD *)(*(void *)(a1 + 264) + 16) != 2)
  {
    int v9 = *__error();
    uint64_t v10 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 376);
      int v13 = 134217984;
      uint64_t v14 = v11;
      _os_log_impl(&dword_1BD672000, v10, OS_LOG_TYPE_DEFAULT, "Already shadowed csc; don't shadow next_id = %lld",
        (uint8_t *)&v13,
        0xCu);
    }
    *__error() = v9;
  }
  else
  {
    SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 408), *(_DWORD *)(a1 + 416), 0xFu, 3u, *(_DWORD *)(a1 + 376));
    int v2 = *__error();
    int v3 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 376);
      int v13 = 134217984;
      uint64_t v14 = v4;
      _os_log_impl(&dword_1BD672000, v3, OS_LOG_TYPE_DEFAULT, "commit shadow complete update next_id = %lld", (uint8_t *)&v13, 0xCu);
    }
    *__error() = v2;
    uint64_t v5 = *(void *)(a1 + 264);
    *(_DWORD *)(v5 + 16) = 1;
    fd_pwrite(*(void *)(a1 + 240), v5, 0x54uLL, 0);
    fd_sync(*(void *)(a1 + 240), 0);
    uint64_t v6 = *(void *)(a1 + 264);
    if (v6)
    {
      unsigned int v7 = *(_DWORD *)(v6 + 16);
      if (v7 < 3) {
        unsigned int v8 = v7 + 1;
      }
      else {
        unsigned int v8 = 0;
      }
    }
    else
    {
      unsigned int v8 = 0;
    }
    SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 408), *(_DWORD *)(a1 + 416), 0x10u, v8, *(_DWORD *)(a1 + 376));
  }
  return *(unsigned int *)(a1 + 464);
}

uint64_t dm_hash(uint64_t a1, int a2)
{
  int v2 = -1759636613;
  if (a2 >= 0) {
    int v3 = a2;
  }
  else {
    int v3 = a2 + 3;
  }
  uint64_t v4 = (unsigned __int8 *)(a1 + (int)(v3 & 0xFFFFFFFC));
  if ((a2 + 3) >= 7)
  {
    uint64_t v7 = -(v3 >> 2);
    int v8 = -1789642873;
    int v9 = 718793509;
    do
    {
      int v8 = 5 * v8 + 2071795100;
      int v9 = 5 * v9 + 1808688022;
      HIDWORD(v10) = v8 * *(_DWORD *)&v4[4 * v7];
      LODWORD(v10) = HIDWORD(v10);
      int v11 = (v10 >> 21) * v9;
      HIDWORD(v10) = v2;
      LODWORD(v10) = v2;
      int v2 = v11 ^ (5 * (v10 >> 19) + 1390208809);
    }
    while (!__CFADD__(v7++, 1));
    int v6 = 5 * v8 + 2071795100;
    int v5 = 5 * v9 + 1808688022;
  }
  else
  {
    int v5 = 1107688271;
    int v6 = 1713515327;
  }
  int v13 = 0;
  int v14 = a2 & 3;
  switch(v14)
  {
    case 1:
      goto LABEL_15;
    case 2:
LABEL_14:
      v13 |= v4[1] << 8;
LABEL_15:
      HIDWORD(v15) = (v13 ^ *v4) * v6;
      LODWORD(v15) = HIDWORD(v15);
      int v16 = (v15 >> 21) * v5;
      HIDWORD(v15) = v2;
      LODWORD(v15) = v2;
      int v2 = v16 ^ (5 * (v15 >> 19) + 1390208809);
      break;
    case 3:
      int v13 = v4[2] << 16;
      goto LABEL_14;
  }
  unsigned int v17 = -1028477387 * ((-2048144789 * (v2 ^ a2)) ^ ((-2048144789 * (v2 ^ a2)) >> 13));
  return v17 ^ HIWORD(v17);
}

CFIndex data_map_ext_id_get_with_key(uint64_t a1, uint64_t a2, size_t a3, void *a4)
{
  size_t v5 = a3;
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = dm_hash(a2, a3);
  if (_data_map_ext_rdlock(a1))
  {
    CFIndex v9 = 0;
    goto LABEL_58;
  }
  char v81 = 0;
  makeThreadId();
  int v10 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v11 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_12813, a1, 0, v10);
  unsigned int v79 = HIDWORD(v11);
  unsigned int v80 = v11;
  unint64_t v78 = __PAIR64__(v12, v13);
  uint64_t v14 = *(void *)&threadData[18 * v11 + 2];
  uint64_t v15 = v14 + 320 * HIDWORD(v11);
  uint64_t v16 = *(unsigned int *)(v15 + 312);
  unsigned int v17 = *(void (**)(void))(v15 + 224);
  if (v17) {
    v17(*(void *)(v14 + 320 * HIDWORD(v11) + 288));
  }
  unsigned int v77 = v80;
  unsigned int v76 = v79;
  unint64_t v75 = v78;
  if (_setjmp((int *)v15))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unsigned int v97 = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v97, 2u);
    }
    *(_DWORD *)(v15 + 312) = v16;
    CIOnThreadCleanUpReset(v75);
    dropThreadId(v77, 1, v10);
    CICleanUpReset(v77, HIDWORD(v75));
    CFIndex v9 = 0;
    goto LABEL_56;
  }
  __s1 = (void *)a2;
  __int16 v72 = a4;
  unint64_t v18 = *(void *)(a1 + 368);
  unint64_t v70 = v8;
  unint64_t v19 = v8 % v18;
  unint64_t v20 = v8 % v18;
  size_t __n = *(unsigned int *)(a1 + 220);
  while (1)
  {
    uint64_t v21 = *(void *)(a1 + 360);
    unint64_t v22 = *(void *)(v21 + 8 * v20);
    if (!v22) {
      break;
    }
    if (*(void *)(a1 + 376) > v22 && (uint64_t v23 = *(void *)(a1 + 288), (unint64_t)(v23 + 1) > 1))
    {
      uint64_t v27 = v23 + 24 * v22;
      if (*(void *)v27 != -2 && *(void *)(v23 + 24 * v22 + 16) == v70)
      {
        uint64_t v28 = *(void *)(a1 + 360);
        unint64_t v73 = 0;
        __s2 = 0;
        unsigned int v29 = *(const void **)(v21 + 8 * v20);
        unint64_t v30 = *(void *)v27;
        if (*(void *)v27 == -1)
        {
          CFDictionaryRef v42 = *(const __CFDictionary **)(a1 + 480);
          if (!v42)
          {
            long long v108 = 0u;
            long long v109 = 0u;
            long long v106 = 0u;
            long long v107 = 0u;
            long long v104 = 0u;
            long long v105 = 0u;
            long long v102 = 0u;
            long long v103 = 0u;
            long long v100 = 0u;
            long long v101 = 0u;
            long long v98 = 0u;
            long long v99 = 0u;
            memset(v97, 0, sizeof(v97));
            int v46 = *__error();
            long long v47 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
            {
              uint64_t v50 = fd_name(*(void *)(a1 + 240), (char *)v97, 0x100uLL);
              *(_DWORD *)stat buf = 136316162;
              long long v84 = "_data_map_ext_get_data_entry";
              __int16 v85 = 1024;
              int v86 = 456;
              __int16 v87 = 2048;
              uint64_t v88 = -1;
              __int16 v89 = 2048;
              uint64_t v90 = a1;
              __int16 v91 = 2080;
              uint64_t v92 = (uint64_t)v50;
              _os_log_error_impl(&dword_1BD672000, v47, OS_LOG_TYPE_ERROR, "%s:%d: invalid data offset 0x%lx %p %s", buf, 0x30u);
            }
            *__error() = v46;
            fd_name(*(void *)(a1 + 240), (char *)v97, 0x100uLL);
            si_analytics_log_2351("(2)invalid data offset 0x%lx %p %s");
            goto LABEL_16;
          }
          CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v42, v29);
          if (!Value)
          {
            long long v108 = 0u;
            long long v109 = 0u;
            long long v106 = 0u;
            long long v107 = 0u;
            long long v104 = 0u;
            long long v105 = 0u;
            long long v102 = 0u;
            long long v103 = 0u;
            long long v100 = 0u;
            long long v101 = 0u;
            long long v98 = 0u;
            long long v99 = 0u;
            memset(v97, 0, sizeof(v97));
            int v48 = *__error();
            long long v49 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
            {
              long long v51 = fd_name(*(void *)(a1 + 240), (char *)v97, 0x100uLL);
              *(_DWORD *)stat buf = 136316162;
              long long v84 = "_data_map_ext_get_data_entry";
              __int16 v85 = 1024;
              int v86 = 450;
              __int16 v87 = 2048;
              uint64_t v88 = -1;
              __int16 v89 = 2048;
              uint64_t v90 = a1;
              __int16 v91 = 2080;
              uint64_t v92 = (uint64_t)v51;
              _os_log_error_impl(&dword_1BD672000, v49, OS_LOG_TYPE_ERROR, "%s:%d: invalid data offset 0x%lx %p %s", buf, 0x30u);
            }
            *__error() = v48;
            fd_name(*(void *)(a1 + 240), (char *)v97, 0x100uLL);
            si_analytics_log_2351("(1)invalid data offset 0x%lx %p %s");
            goto LABEL_16;
          }
          CFDataRef v44 = Value;
          LODWORD(v73) = CFDataGetLength(Value) - *(_DWORD *)(a1 + 220);
          __s2 = (void *)&CFDataGetBytePtr(v44)[*(unsigned int *)(a1 + 220)];
          CFDataGetBytePtr(v44);
          __memcpy_chk();
          int v45 = 1;
        }
        else
        {
          int v32 = *(_DWORD *)(v27 + 8);
          unsigned int v31 = *(_DWORD *)(v27 + 12);
          uint64_t v33 = *(void *)(a1 + 472);
          *(_DWORD *)stat buf = 0;
          if (v33)
          {
            uint64_t v65 = v29;
            unsigned int v66 = v31;
            int v64 = v32;
            uint64_t contentindex_for_id = si_get_contentindex_for_id(v33, v32);
            unsigned int v82 = 0;
            if (contentindex_for_id)
            {
              __s2 = (void *)ContentIndexGetDataForId(*(void *)(contentindex_for_id + 4912), v30, v66, (uint64_t)&v82, (uint64_t)buf);
              unint64_t v73 = __PAIR64__(v82, *(unsigned int *)buf);
              int v35 = 1;
            }
            else
            {
              unint64_t v61 = v30;
              unint64_t v68 = v18;
              if (data_entry_restore_ext__COUNT_ < 1)
              {
                if (++data_entry_restore_ext__COUNT2_ == 100)
                {
                  data_entry_restore_ext__COUNT2_ = 0;
                  int v62 = *__error();
                  long long v54 = _SILogForLogForCategory(16);
                  if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)unsigned int v97 = 136316418;
                    *(void *)&v97[4] = "data_entry_restore_ext";
                    *(_WORD *)&v97[12] = 1024;
                    *(_DWORD *)&v97[14] = 395;
                    *(_WORD *)&v97[18] = 2048;
                    *(void *)&v97[20] = v65;
                    *(_WORD *)&v97[28] = 1024;
                    *(_DWORD *)&v97[30] = v64;
                    *(_WORD *)&v97[34] = 2048;
                    *(void *)&v97[36] = v30;
                    *(_WORD *)&v97[44] = 1024;
                    *(_DWORD *)&v97[46] = v66;
                    _os_log_error_impl(&dword_1BD672000, v54, OS_LOG_TYPE_ERROR, "%s:%d: data id %lld invalid indexId %u offset 0x%llx meta 0x%x", v97, 0x32u);
                  }
                  *__error() = v62;
                }
              }
              else
              {
                --data_entry_restore_ext__COUNT_;
                int v52 = *__error();
                long long v53 = _SILogForLogForCategory(16);
                if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)unsigned int v97 = 136316418;
                  *(void *)&v97[4] = "data_entry_restore_ext";
                  *(_WORD *)&v97[12] = 1024;
                  *(_DWORD *)&v97[14] = 395;
                  *(_WORD *)&v97[18] = 2048;
                  *(void *)&v97[20] = v65;
                  *(_WORD *)&v97[28] = 1024;
                  *(_DWORD *)&v97[30] = v64;
                  *(_WORD *)&v97[34] = 2048;
                  *(void *)&v97[36] = v61;
                  *(_WORD *)&v97[44] = 1024;
                  *(_DWORD *)&v97[46] = v66;
                  _os_log_error_impl(&dword_1BD672000, v53, OS_LOG_TYPE_ERROR, "%s:%d: data id %lld invalid indexId %u offset 0x%llx meta 0x%x", v97, 0x32u);
                }
                *__error() = v52;
              }
              int v35 = 0;
              unint64_t v18 = v68;
            }
          }
          else
          {
            int v35 = 0;
          }
          int v45 = v35;
        }
        if (v45 && v73 == v5 && !memcmp(__s1, __s2, v5) && !memcmp((char *)&v73 + 4, v72, __n))
        {
          CFIndex v9 = *(void *)(v28 + 8 * v20);
          goto LABEL_53;
        }
      }
    }
    else
    {
      long long v108 = 0u;
      long long v109 = 0u;
      long long v106 = 0u;
      long long v107 = 0u;
      long long v104 = 0u;
      long long v105 = 0u;
      long long v102 = 0u;
      long long v103 = 0u;
      long long v100 = 0u;
      long long v101 = 0u;
      long long v98 = 0u;
      long long v99 = 0u;
      memset(v97, 0, sizeof(v97));
      int v24 = *__error();
      unsigned int v25 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        log = v25;
        unint64_t v36 = v18;
        uint64_t v37 = v16;
        size_t v38 = v5;
        uint64_t v39 = *(void *)(a1 + 376);
        int v69 = v10;
        uint64_t v40 = *(void *)(a1 + 288);
        __int16 v41 = fd_name(*(void *)(a1 + 240), (char *)v97, 0x100uLL);
        *(_DWORD *)stat buf = 136316674;
        long long v84 = "_data_map_ext_get_offset_entry";
        __int16 v85 = 1024;
        int v86 = 416;
        __int16 v87 = 2048;
        uint64_t v88 = v22;
        __int16 v89 = 2048;
        uint64_t v90 = v39;
        size_t v5 = v38;
        uint64_t v16 = v37;
        unint64_t v18 = v36;
        __int16 v91 = 2048;
        uint64_t v92 = a1;
        __int16 v93 = 2048;
        uint64_t v94 = v40;
        int v10 = v69;
        __int16 v95 = 2080;
        unsigned int v96 = v41;
        _os_log_error_impl(&dword_1BD672000, log, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %lld max %lld %p map: %p %s", buf, 0x44u);
      }
      *__error() = v24;
    }
LABEL_16:
    if (v20 + 1 == v18) {
      unint64_t v26 = 0;
    }
    else {
      unint64_t v26 = v20 + 1;
    }
    unint64_t v20 = v26;
    if (v26 == v19)
    {
      CFIndex v9 = 0;
      goto LABEL_53;
    }
  }
  CFIndex v9 = 0;
LABEL_53:
  char v81 = 1;
  uint64_t v55 = *(void *)&threadData[18 * v77 + 2];
  unsigned int v56 = v76;
  uint64_t v57 = v55 + 320 * v76;
  *(_DWORD *)(v57 + 312) = v16;
  long long v58 = *(void (**)(void))(v57 + 232);
  if (v58) {
    v58(*(void *)(v55 + 320 * v56 + 288));
  }
  dropThreadId(v77, 0, v10);
LABEL_56:
  if (!v81)
  {
    CFIndex v9 = 0;
    *(_DWORD *)(a1 + 464) = 22;
  }
LABEL_58:
  if (*(void *)(a1 + 448))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 440));
    long long v60 = *(void **)(a1 + 448);
    if (v60) {
      bit_vector_set_5929(v60, v9);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 440));
  }
  _data_map_ext_unlock(a1);
  return v9;
}

uint64_t data_map_ext_get_extra_with_key(uint64_t a1, uint64_t a2, size_t a3, unsigned char *a4)
{
  uint64_t v4 = a4;
  size_t v5 = a3;
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  *a4 = 0;
  uint64_t v79 = 0;
  unint64_t v8 = dm_hash(a2, a3);
  if (_data_map_ext_rdlock(a1)) {
    goto LABEL_55;
  }
  char v78 = 0;
  makeThreadId();
  unsigned int add_explicit = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed);
  uint64_t v10 = add_explicit + 1;
  unint64_t v11 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_12813, a1, 0, add_explicit + 1);
  unint64_t v12 = v11;
  unsigned int v77 = v13;
  unsigned int v76 = v14;
  uint64_t v15 = *(void *)&threadData[18 * v11 + 2];
  uint64_t v16 = v15 + 320 * HIDWORD(v11);
  int v17 = *(_DWORD *)(v16 + 312);
  unint64_t v18 = *(void (**)(void))(v16 + 224);
  if (v18) {
    v18(*(void *)(v15 + 320 * HIDWORD(v11) + 288));
  }
  if (_setjmp((int *)v16))
  {
    unint64_t v19 = (_DWORD *)(v16 + 312);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int16 v95 = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v95, 2u);
    }
    *unint64_t v19 = v17;
    CIOnThreadCleanUpReset(v76);
    dropThreadId(v12, 1, v10);
    CICleanUpReset(v12, v77);
    goto LABEL_53;
  }
  unint64_t v71 = v8;
  __int16 v72 = (const void *)a2;
  int v73 = v17;
  unint64_t v20 = v8 % *(void *)(a1 + 368);
  lock = (os_unfair_lock_s *)(a1 + 440);
  unint64_t v69 = v20;
  uint64_t v70 = *(void *)(a1 + 368);
  size_t v67 = *(unsigned int *)(a1 + 220) + v5;
  do
  {
    uint64_t v21 = *(void *)(a1 + 360);
    CFIndex v22 = *(void *)(v21 + 8 * v20);
    if (!v22) {
      break;
    }
    if (*(void *)(a1 + 448))
    {
      os_unfair_lock_lock(lock);
      uint64_t v50 = *(void **)(a1 + 448);
      if (v50) {
        bit_vector_set_5929(v50, v22);
      }
      os_unfair_lock_unlock(lock);
      unint64_t v23 = *(void *)(v21 + 8 * v20);
    }
    else
    {
      unint64_t v23 = *(void *)(v21 + 8 * v20);
    }
    if (*(void *)(a1 + 376) <= v23 || (uint64_t v24 = *(void *)(a1 + 288), (unint64_t)(v24 + 1) <= 1))
    {
      long long v106 = 0u;
      long long v107 = 0u;
      long long v104 = 0u;
      long long v105 = 0u;
      long long v102 = 0u;
      long long v103 = 0u;
      long long v100 = 0u;
      long long v101 = 0u;
      long long v98 = 0u;
      long long v99 = 0u;
      long long v96 = 0u;
      long long v97 = 0u;
      memset(v95, 0, sizeof(v95));
      int v25 = *__error();
      unint64_t v26 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        log = v26;
        uint64_t v37 = *(void *)(a1 + 376);
        size_t v38 = v5;
        uint64_t v39 = v10;
        uint64_t v40 = v4;
        uint64_t v41 = *(void *)(a1 + 288);
        CFDictionaryRef v42 = fd_name(*(void *)(a1 + 240), (char *)v95, 0x100uLL);
        *(_DWORD *)stat buf = 136316674;
        unsigned int v82 = "_data_map_ext_get_offset_entry";
        __int16 v83 = 1024;
        int v84 = 416;
        __int16 v85 = 2048;
        uint64_t v86 = v23;
        __int16 v87 = 2048;
        uint64_t v88 = v37;
        __int16 v89 = 2048;
        uint64_t v90 = a1;
        __int16 v91 = 2048;
        uint64_t v92 = v41;
        uint64_t v4 = v40;
        uint64_t v10 = v39;
        size_t v5 = v38;
        __int16 v93 = 2080;
        uint64_t v94 = v42;
        _os_log_error_impl(&dword_1BD672000, log, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %lld max %lld %p map: %p %s", buf, 0x44u);
      }
      *__error() = v25;
      goto LABEL_17;
    }
    uint64_t v28 = v24 + 24 * v23;
    if (*(void *)v28 != -2 && *(void *)(v24 + 24 * v23 + 16) == v71)
    {
      uint64_t v29 = *(void *)(v21 + 8 * v20);
      unint64_t v30 = *(void *)v28;
      if (*(void *)v28 == -1)
      {
        CFDictionaryRef v43 = *(const __CFDictionary **)(a1 + 480);
        if (!v43)
        {
          long long v106 = 0u;
          long long v107 = 0u;
          long long v104 = 0u;
          long long v105 = 0u;
          long long v102 = 0u;
          long long v103 = 0u;
          long long v100 = 0u;
          long long v101 = 0u;
          long long v98 = 0u;
          long long v99 = 0u;
          long long v96 = 0u;
          long long v97 = 0u;
          memset(v95, 0, sizeof(v95));
          int v46 = *__error();
          long long v47 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
          {
            long long v51 = fd_name(*(void *)(a1 + 240), (char *)v95, 0x100uLL);
            *(_DWORD *)stat buf = 136316162;
            unsigned int v82 = "_data_map_ext_get_data_entry";
            __int16 v83 = 1024;
            int v84 = 456;
            __int16 v85 = 2048;
            uint64_t v86 = -1;
            __int16 v87 = 2048;
            uint64_t v88 = a1;
            __int16 v89 = 2080;
            uint64_t v90 = (uint64_t)v51;
            _os_log_error_impl(&dword_1BD672000, v47, OS_LOG_TYPE_ERROR, "%s:%d: invalid data offset 0x%lx %p %s", buf, 0x30u);
          }
          *__error() = v46;
          fd_name(*(void *)(a1 + 240), (char *)v95, 0x100uLL);
          si_analytics_log_2351("(2)invalid data offset 0x%lx %p %s");
          goto LABEL_17;
        }
        CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v43, *(const void **)(v21 + 8 * v20));
        int v35 = v72;
        if (!Value)
        {
          long long v106 = 0u;
          long long v107 = 0u;
          long long v104 = 0u;
          long long v105 = 0u;
          long long v102 = 0u;
          long long v103 = 0u;
          long long v100 = 0u;
          long long v101 = 0u;
          long long v98 = 0u;
          long long v99 = 0u;
          long long v96 = 0u;
          long long v97 = 0u;
          memset(v95, 0, sizeof(v95));
          int v48 = *__error();
          long long v49 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
          {
            int v52 = fd_name(*(void *)(a1 + 240), (char *)v95, 0x100uLL);
            *(_DWORD *)stat buf = 136316162;
            unsigned int v82 = "_data_map_ext_get_data_entry";
            __int16 v83 = 1024;
            int v84 = 450;
            __int16 v85 = 2048;
            uint64_t v86 = -1;
            __int16 v87 = 2048;
            uint64_t v88 = a1;
            __int16 v89 = 2080;
            uint64_t v90 = (uint64_t)v52;
            _os_log_error_impl(&dword_1BD672000, v49, OS_LOG_TYPE_ERROR, "%s:%d: invalid data offset 0x%lx %p %s", buf, 0x30u);
          }
          *__error() = v48;
          fd_name(*(void *)(a1 + 240), (char *)v95, 0x100uLL);
          si_analytics_log_2351("(1)invalid data offset 0x%lx %p %s");
          goto LABEL_17;
        }
        CFDataRef v45 = Value;
        unsigned int v74 = CFDataGetLength(Value) - *(_DWORD *)(a1 + 220);
        __s2 = &CFDataGetBytePtr(v45)[*(unsigned int *)(a1 + 220)];
        CFDataGetBytePtr(v45);
        __memcpy_chk();
        uint64_t v36 = v74;
        goto LABEL_30;
      }
      int v32 = *(_DWORD *)(v28 + 8);
      unsigned int v31 = *(_DWORD *)(v28 + 12);
      uint64_t v33 = *(void *)(a1 + 472);
      *(_DWORD *)stat buf = 0;
      if (!v33) {
        goto LABEL_17;
      }
      unsigned int v66 = v31;
      uint64_t contentindex_for_id = si_get_contentindex_for_id(v33, v32);
      int v80 = 0;
      int v35 = v72;
      if (contentindex_for_id)
      {
        __s2 = (const UInt8 *)ContentIndexGetDataForId(*(void *)(contentindex_for_id + 4912), v30, v66, (uint64_t)&v80, (uint64_t)buf);
        uint64_t v36 = *(unsigned int *)buf;
LABEL_30:
        if (v67 == v36 && !memcmp(v35, __s2, v5))
        {
          unsigned int v56 = v4;
          int v57 = *(_DWORD *)(a1 + 220);
          __memcpy_chk();
          int v58 = v57;
          uint64_t v4 = v56;
          HIDWORD(v79) = v58;
          *unsigned int v56 = 1;
          break;
        }
        goto LABEL_17;
      }
      int v63 = v32;
      if (data_entry_restore_ext__COUNT_ >= 1)
      {
        --data_entry_restore_ext__COUNT_;
        int v53 = *__error();
        long long v54 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int16 v95 = 136316418;
          *(void *)&v95[4] = "data_entry_restore_ext";
          *(_WORD *)&v95[12] = 1024;
          *(_DWORD *)&v95[14] = 395;
          *(_WORD *)&v95[18] = 2048;
          *(void *)&v95[20] = v29;
          *(_WORD *)&v95[28] = 1024;
          *(_DWORD *)&v95[30] = v63;
          *(_WORD *)&v95[34] = 2048;
          *(void *)&v95[36] = v30;
          *(_WORD *)&v95[44] = 1024;
          *(_DWORD *)&v95[46] = v66;
          uint64_t v55 = v54;
          goto LABEL_48;
        }
        goto LABEL_49;
      }
      if (++data_entry_restore_ext__COUNT2_ == 100)
      {
        data_entry_restore_ext__COUNT2_ = 0;
        int v53 = *__error();
        int v64 = _SILogForLogForCategory(16);
        if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int16 v95 = 136316418;
          uint64_t v55 = v64;
          *(void *)&v95[4] = "data_entry_restore_ext";
          *(_WORD *)&v95[12] = 1024;
          *(_DWORD *)&v95[14] = 395;
          *(_WORD *)&v95[18] = 2048;
          *(void *)&v95[20] = v29;
          *(_WORD *)&v95[28] = 1024;
          *(_DWORD *)&v95[30] = v32;
          *(_WORD *)&v95[34] = 2048;
          *(void *)&v95[36] = v30;
          *(_WORD *)&v95[44] = 1024;
          *(_DWORD *)&v95[46] = v66;
LABEL_48:
          _os_log_error_impl(&dword_1BD672000, v55, OS_LOG_TYPE_ERROR, "%s:%d: data id %lld invalid indexId %u offset 0x%llx meta 0x%x", v95, 0x32u);
        }
LABEL_49:
        *__error() = v53;
      }
    }
LABEL_17:
    unint64_t v27 = 0;
    if (v20 + 1 != v70) {
      unint64_t v27 = v20 + 1;
    }
    unint64_t v20 = v27;
  }
  while (v27 != v69);
  char v78 = 1;
  uint64_t v59 = *(void *)&threadData[18 * v12 + 2];
  uint64_t v60 = v59 + 320 * HIDWORD(v12);
  *(_DWORD *)(v60 + 312) = v73;
  unint64_t v61 = *(void (**)(void))(v60 + 232);
  if (v61) {
    v61(*(void *)(v59 + 320 * HIDWORD(v12) + 288));
  }
  dropThreadId(v12, 0, v10);
LABEL_53:
  if (!v78)
  {
    *uint64_t v4 = 0;
    *(_DWORD *)(a1 + 464) = 22;
  }
LABEL_55:
  _data_map_ext_unlock(a1);
  return v79;
}

unint64_t _data_map_ext_get_data_id(uint64_t a1, int a2, char *a3, unint64_t a4, int a5)
{
  unint64_t v9 = dm_hash((uint64_t)&a3[a2], (int)a4 - a2);
  if (_data_map_ext_rdlock(a1)) {
    return 0;
  }
  makeThreadId();
  int v11 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v12 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_12813, a1, 0, v11);
  unsigned int v36 = HIDWORD(v12);
  unsigned int v37 = v12;
  unint64_t v35 = __PAIR64__(v13, v14);
  uint64_t v15 = *(void *)&threadData[18 * v12 + 2];
  uint64_t v16 = v15 + 320 * HIDWORD(v12);
  int v17 = *(_DWORD *)(v16 + 312);
  unint64_t v18 = *(void (**)(void))(v16 + 224);
  if (v18) {
    v18(*(void *)(v15 + 320 * HIDWORD(v12) + 288));
  }
  unsigned int v34 = v37;
  unsigned int v33 = v36;
  unint64_t v32 = v35;
  if (!_setjmp((int *)v16))
  {
    bucket_entry = (unint64_t *)_data_map_ext_get_bucket_entry(a1, v9, 0, a3, a4);
    if (!bucket_entry)
    {
      unint64_t updated = 0;
LABEL_18:
      uint64_t v23 = *(void *)&threadData[18 * v34 + 2];
      unsigned int v24 = v33;
      uint64_t v25 = v23 + 320 * v33;
      *(_DWORD *)(v25 + 312) = v17;
      unint64_t v26 = *(void (**)(void))(v25 + 232);
      if (v26) {
        v26(*(void *)(v23 + 320 * v24 + 288));
      }
      dropThreadId(v34, 0, v11);
      goto LABEL_21;
    }
    if (*bucket_entry)
    {
      if (*bucket_entry >= *(void *)(a1 + 376)) {
        unint64_t updated = 0;
      }
      else {
        unint64_t updated = *bucket_entry;
      }
      goto LABEL_18;
    }
    if (!a5
      || (uint64_t v21 = (CFIndex *)bucket_entry,
          unint64_t v22 = *(void *)(a1 + 376),
          _data_map_ext_unlock(a1),
          _data_map_ext_wrlock(a1)))
    {
LABEL_17:
      unint64_t updated = 0;
      goto LABEL_18;
    }
    unint64_t v27 = v22;
    if (v22 == *(void *)(a1 + 376))
    {
LABEL_23:
      unint64_t updated = _data_map_ext_push_to_update_set(a1, v27, v9, (UInt8 *)a3, a4, v21);
      goto LABEL_18;
    }
    CFIndex v28 = 0;
    uint64_t v29 = (CFIndex *)_data_map_ext_get_bucket_entry(a1, v9, 0, a3, a4);
    if (v29)
    {
      CFIndex v28 = *v29;
      if ((unint64_t)*v29 >= *(void *)(a1 + 376)) {
        goto LABEL_17;
      }
      if (!v28)
      {
        uint64_t v21 = v29;
        unint64_t v30 = *(void *)(a1 + 376);
        SIActivityJournalDMAdd(*(os_unfair_lock_s **)(a1 + 408), *(_DWORD *)(a1 + 416), *(_DWORD *)(a1 + 220), v30, v9, a4);
        unint64_t v27 = v30;
        goto LABEL_23;
      }
      _data_map_ext_set_seen_id(a1, v28);
    }
    unint64_t updated = v28;
    goto LABEL_18;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)unsigned int v31 = 0;
    _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v31, 2u);
  }
  *(_DWORD *)(v16 + 312) = v17;
  CIOnThreadCleanUpReset(v32);
  dropThreadId(v34, 1, v11);
  CICleanUpReset(v34, HIDWORD(v32));
  unint64_t updated = 0;
LABEL_21:
  _data_map_ext_unlock(a1);
  return updated;
}

void _data_map_ext_set_seen_id(uint64_t a1, CFIndex a2)
{
  if (*(void *)(a1 + 448))
  {
    uint64_t v4 = (os_unfair_lock_s *)(a1 + 440);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 440));
    size_t v5 = *(void **)(a1 + 448);
    if (v5) {
      bit_vector_set_5929(v5, a2);
    }
    os_unfair_lock_unlock(v4);
  }
}

unint64_t _data_map_ext_push_to_update_set(uint64_t a1, unint64_t a2, unint64_t a3, UInt8 *a4, CFIndex a5, void *bucket_entry)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 464)) {
    return 0;
  }
  unint64_t v6 = a2;
  unint64_t v13 = *(void *)(a1 + 376);
  if (v13 >= *(void *)(a1 + 328))
  {
    unint64_t v14 = (*MEMORY[0x1E4F14B00] + 24 * v13 + 23) & -*MEMORY[0x1E4F14B00];
    if (!grow_offsets(a1, a1 + 272, v14) || !grow_offsets(a1, a1 + 296, v14)) {
      goto LABEL_12;
    }
    *(void *)(a1 + 328) = v14 / 0x18;
    unint64_t v13 = *(void *)(a1 + 376);
  }
  unint64_t v15 = v13 - *(void *)(a1 + 384);
  if (v15 >= 2 * *(void *)(a1 + 368) / 3uLL || v15 < 2 * *(void *)(a1 + 392))
  {
    if (_data_map_ext_rehash(a1))
    {
      char v16 = 0;
      goto LABEL_15;
    }
LABEL_12:
    if (!*(_DWORD *)(a1 + 464))
    {
      unint64_t v6 = 0;
      *(_DWORD *)(a1 + 464) = 1;
      return v6;
    }
    return 0;
  }
  char v16 = 1;
LABEL_15:
  if (!*(void *)(a1 + 272) || (unint64_t)(*(void *)(a1 + 288) + 1) <= 1)
  {
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    memset(buf, 0, sizeof(buf));
    int v17 = *__error();
    unint64_t v18 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)(a1 + 376);
      uint64_t v27 = *(void *)(a1 + 288);
      unint64_t v26 = fd_name(*(void *)(a1 + 240), (char *)buf, 0x100uLL);
      *(_DWORD *)CFIndex v28 = 136316674;
      uint64_t v29 = "_data_map_ext_push_to_update_set";
      __int16 v30 = 1024;
      int v31 = 1891;
      __int16 v32 = 2048;
      unint64_t v33 = v6;
      __int16 v34 = 2048;
      uint64_t v35 = v25;
      __int16 v36 = 2048;
      uint64_t v37 = a1;
      __int16 v38 = 2048;
      uint64_t v39 = v27;
      __int16 v40 = 2080;
      uint64_t v41 = v26;
      _os_log_error_impl(&dword_1BD672000, v18, OS_LOG_TYPE_ERROR, "%s:%d: insert data id error %lld max %lld %p map: %p %s", v28, 0x44u);
    }
    *__error() = v17;
  }
  if (!*(unsigned char *)(a1 + 459))
  {
    _data_map_ext_dirty(a1);
    *(unsigned char *)(a1 + 459) = 1;
  }
  uint64_t v19 = *(void *)(a1 + 288) + 24 * v6;
  *(void *)(v19 + 16) = a3;
  *(_OWORD *)uint64_t v19 = xmmword_1BDA82320;
  if (*(void *)(a1 + 296))
  {
    uint64_t v20 = *(void *)(a1 + 312);
    if ((unint64_t)(v20 + 1) >= 2)
    {
      uint64_t v21 = v20 + 24 * v6;
      *(void *)(v21 + 16) = a3;
      *(_OWORD *)uint64_t v21 = xmmword_1BDA82320;
    }
  }
  if (!*(unsigned char *)(a1 + 457))
  {
    _data_map_ext_dirty(a1);
    *(unsigned char *)(a1 + 457) = 1;
  }
  data_map_ext_store_as_update(a1, (const void *)v6, a4, a5);
  ++*(void *)(a1 + 376);
  if (!*(unsigned char *)(a1 + 458))
  {
    _data_map_ext_dirty(a1);
    *(unsigned char *)(a1 + 458) = 1;
  }
  if (bucket_entry) {
    char v22 = v16;
  }
  else {
    char v22 = 0;
  }
  if ((v22 & 1) == 0) {
    bucket_entry = (void *)_data_map_ext_get_bucket_entry(a1, a3, v6, (char *)a4, a5);
  }
  unint64_t *bucket_entry = v6;
  if (gSILogLevels[0] >= 5)
  {
    int v23 = *__error();
    unsigned int v24 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134218240;
      *(void *)&uint8_t buf[4] = v6;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&unsigned char buf[14] = a1;
      _os_log_impl(&dword_1BD672000, v24, OS_LOG_TYPE_DEFAULT, "added %lld to %p", buf, 0x16u);
    }
    *__error() = v23;
  }
  return v6;
}

uint64_t grow_offsets(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (!*(void *)a2) {
    return 1;
  }
  if (fd_truncate(*(void *)a2, a3) != -1)
  {
    *(void *)(a1 + 320) = a3;
    size_t v6 = *(void *)(a2 + 8);
    if (v6 >= a3) {
      return 1;
    }
    uint64_t v7 = 2 * v6;
    munmap(*(void **)(a2 + 16), v6);
    *(void *)(a2 + 8) = 0;
    uint64_t v8 = fd_mmap(*(void *)a2);
    *(void *)(a2 + 16) = v8;
    if (v8 != -1)
    {
      *(void *)(a2 + 8) = v7;
      return 1;
    }
  }
  return 0;
}

void data_map_ext_store_as_update(uint64_t a1, const void *a2, UInt8 *bytes, CFIndex length)
{
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (!*(void *)(a1 + 480)) {
    *(void *)(a1 + 480) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D540]);
  }
  CFDataRef v9 = CFDataCreate(v8, bytes, length);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 480), a2, v9);
  CFRelease(v9);
}

uint64_t data_map_ext_get_data_entry(uint64_t a1, uint64_t a2, unint64_t a3, unsigned char *a4, char a5)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  *a4 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  if ((a5 & 1) == 0 && _data_map_ext_rdlock(a2)) {
    return _data_map_ext_unlock(a2);
  }
  char v65 = 0;
  makeThreadId();
  int v10 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v11 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_12813, a2, 0, v10);
  unsigned int v63 = HIDWORD(v11);
  unsigned int v64 = v11;
  unsigned int v61 = v13;
  unsigned int v62 = v12;
  uint64_t v14 = *(void *)&threadData[18 * v11 + 2];
  uint64_t v15 = v14 + 320 * HIDWORD(v11);
  int v16 = *(_DWORD *)(v15 + 312);
  int v17 = *(void (**)(void))(v15 + 224);
  if (v17) {
    v17(*(void *)(v14 + 320 * HIDWORD(v11) + 288));
  }
  if (_setjmp((int *)v15))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)stat buf = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
    }
    *(_DWORD *)(v15 + 312) = v16;
    CIOnThreadCleanUpReset(v61);
    dropThreadId(v64, 1, v10);
    uint64_t result = CICleanUpReset(v64, v62);
    goto LABEL_18;
  }
  if (*(void *)(a2 + 448))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a2 + 440));
    long long v49 = *(void **)(a2 + 448);
    if (v49) {
      bit_vector_set_5929(v49, a3);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 440));
  }
  if (*(void *)(a2 + 376) <= a3 || (uint64_t v19 = *(void *)(a2 + 288), (unint64_t)(v19 + 1) <= 1))
  {
    long long v92 = 0u;
    long long v93 = 0u;
    long long v90 = 0u;
    long long v91 = 0u;
    long long v88 = 0u;
    long long v89 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    memset(buf, 0, sizeof(buf));
    int v20 = *__error();
    uint64_t v21 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      log = v21;
      uint64_t v34 = *(void *)(a2 + 376);
      uint64_t v35 = *(void *)(a2 + 288);
      __int16 v36 = fd_name(*(void *)(a2 + 240), (char *)buf, 0x100uLL);
      *(_DWORD *)size_t v67 = 136316674;
      unint64_t v68 = "_data_map_ext_get_offset_entry";
      __int16 v69 = 1024;
      int v70 = 416;
      __int16 v71 = 2048;
      uint64_t v72 = a3;
      __int16 v73 = 2048;
      uint64_t v74 = v34;
      __int16 v75 = 2048;
      uint64_t v76 = a2;
      __int16 v77 = 2048;
      uint64_t v78 = v35;
      __int16 v79 = 2080;
      int v80 = v36;
      _os_log_error_impl(&dword_1BD672000, log, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %lld max %lld %p map: %p %s", v67, 0x44u);
    }
    *__error() = v20;
    goto LABEL_15;
  }
  uint64_t v25 = v19 + 24 * a3;
  unint64_t v26 = *(void *)v25;
  if (*(void *)v25 != -2)
  {
    if (v26 == -1)
    {
      CFDictionaryRef v37 = *(const __CFDictionary **)(a2 + 480);
      if (!v37)
      {
        long long v92 = 0u;
        long long v93 = 0u;
        long long v90 = 0u;
        long long v91 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        long long v82 = 0u;
        long long v83 = 0u;
        memset(buf, 0, sizeof(buf));
        int v44 = *__error();
        long long v45 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        {
          long long v48 = fd_name(*(void *)(a2 + 240), (char *)buf, 0x100uLL);
          *(_DWORD *)size_t v67 = 136316162;
          unint64_t v68 = "_data_map_ext_get_data_entry";
          __int16 v69 = 1024;
          int v70 = 456;
          __int16 v71 = 2048;
          uint64_t v72 = -1;
          __int16 v73 = 2048;
          uint64_t v74 = a2;
          __int16 v75 = 2080;
          uint64_t v76 = (uint64_t)v48;
          _os_log_error_impl(&dword_1BD672000, v45, OS_LOG_TYPE_ERROR, "%s:%d: invalid data offset 0x%lx %p %s", v67, 0x30u);
        }
        *__error() = v44;
        fd_name(*(void *)(a2 + 240), (char *)buf, 0x100uLL);
        si_analytics_log_2351("(2)invalid data offset 0x%lx %p %s");
        goto LABEL_15;
      }
      CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v37, (const void *)a3);
      if (!Value)
      {
        long long v92 = 0u;
        long long v93 = 0u;
        long long v90 = 0u;
        long long v91 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        long long v82 = 0u;
        long long v83 = 0u;
        memset(buf, 0, sizeof(buf));
        int v46 = *__error();
        long long v47 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        {
          long long v50 = fd_name(*(void *)(a2 + 240), (char *)buf, 0x100uLL);
          *(_DWORD *)size_t v67 = 136316162;
          unint64_t v68 = "_data_map_ext_get_data_entry";
          __int16 v69 = 1024;
          int v70 = 450;
          __int16 v71 = 2048;
          uint64_t v72 = -1;
          __int16 v73 = 2048;
          uint64_t v74 = a2;
          __int16 v75 = 2080;
          uint64_t v76 = (uint64_t)v50;
          _os_log_error_impl(&dword_1BD672000, v47, OS_LOG_TYPE_ERROR, "%s:%d: invalid data offset 0x%lx %p %s", v67, 0x30u);
        }
        *__error() = v46;
        fd_name(*(void *)(a2 + 240), (char *)buf, 0x100uLL);
        si_analytics_log_2351("(1)invalid data offset 0x%lx %p %s");
        goto LABEL_15;
      }
      CFDataRef v39 = Value;
      unsigned int v54 = CFDataGetLength(Value) - *(_DWORD *)(a2 + 220);
      uint64_t v60 = &CFDataGetBytePtr(v39)[*(unsigned int *)(a2 + 220)];
      CFDataGetBytePtr(v39);
      int v40 = *(_DWORD *)(a2 + 220);
      __memcpy_chk();
      uint64_t v33 = (uint64_t)v60;
      unsigned int v32 = v54;
      int v31 = v40;
LABEL_32:
      int v41 = v31;
      uint64_t v42 = v33;
      unsigned int v43 = v32;
      __memcpy_chk();
      *(_DWORD *)(a1 + 20) = v41;
      *(void *)a1 = v42;
      *(void *)(a1 + 8) = v43;
      *a4 = 1;
      goto LABEL_15;
    }
    int v28 = *(_DWORD *)(v25 + 8);
    unsigned int v27 = *(_DWORD *)(v25 + 12);
    uint64_t v29 = *(void *)(a2 + 472);
    *(_DWORD *)size_t v67 = 0;
    if (v29)
    {
      unsigned int v58 = v27;
      uint64_t contentindex_for_id = si_get_contentindex_for_id(v29, v28);
      int v66 = 0;
      if (!contentindex_for_id)
      {
        if (data_entry_restore_ext__COUNT_ < 1)
        {
          if (++data_entry_restore_ext__COUNT2_ != 100) {
            goto LABEL_15;
          }
          data_entry_restore_ext__COUNT2_ = 0;
          int v56 = *__error();
          long long v53 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)stat buf = 136316418;
            *(void *)&uint8_t buf[4] = "data_entry_restore_ext";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&unsigned char buf[14] = 395;
            *(_WORD *)&unsigned char buf[18] = 2048;
            *(void *)&unsigned char buf[20] = a3;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v28;
            *(_WORD *)&buf[34] = 2048;
            *(void *)&buf[36] = v26;
            *(_WORD *)&buf[44] = 1024;
            *(_DWORD *)&buf[46] = v58;
            _os_log_error_impl(&dword_1BD672000, v53, OS_LOG_TYPE_ERROR, "%s:%d: data id %lld invalid indexId %u offset 0x%llx meta 0x%x", buf, 0x32u);
          }
          int v52 = v56;
        }
        else
        {
          --data_entry_restore_ext__COUNT_;
          int v57 = *__error();
          long long v51 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)stat buf = 136316418;
            *(void *)&uint8_t buf[4] = "data_entry_restore_ext";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&unsigned char buf[14] = 395;
            *(_WORD *)&unsigned char buf[18] = 2048;
            *(void *)&unsigned char buf[20] = a3;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v28;
            *(_WORD *)&buf[34] = 2048;
            *(void *)&buf[36] = v26;
            *(_WORD *)&buf[44] = 1024;
            *(_DWORD *)&buf[46] = v58;
            _os_log_error_impl(&dword_1BD672000, v51, OS_LOG_TYPE_ERROR, "%s:%d: data id %lld invalid indexId %u offset 0x%llx meta 0x%x", buf, 0x32u);
          }
          int v52 = v57;
        }
        *__error() = v52;
        goto LABEL_15;
      }
      uint64_t DataForId = ContentIndexGetDataForId(*(void *)(contentindex_for_id + 4912), v26, v58, (uint64_t)&v66, (uint64_t)v67);
      int v31 = *(_DWORD *)(a2 + 220);
      unsigned int v32 = *(_DWORD *)v67;
      uint64_t v33 = DataForId;
      goto LABEL_32;
    }
  }
LABEL_15:
  char v65 = 1;
  uint64_t v22 = *(void *)&threadData[18 * v64 + 2];
  uint64_t v23 = v22 + 320 * v63;
  *(_DWORD *)(v23 + 312) = v16;
  unsigned int v24 = *(void (**)(void))(v23 + 232);
  if (v24) {
    v24(*(void *)(v22 + 320 * v63 + 288));
  }
  uint64_t result = dropThreadId(v64, 0, v10);
LABEL_18:
  if (v65)
  {
    if (a5) {
      return result;
    }
    return _data_map_ext_unlock(a2);
  }
  *a4 = 0;
  *(_DWORD *)(a2 + 464) = 22;
  if ((a5 & 1) == 0) {
    return _data_map_ext_unlock(a2);
  }
  return result;
}

uint64_t data_map_ext_get_data(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  if (_data_map_ext_rdlock(a1))
  {
LABEL_2:
    if (a3) {
      *a3 = 0;
    }
    return 0;
  }
  char v53 = 0;
  makeThreadId();
  int v7 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v8 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_12813, a1, 0, v7);
  unsigned int v51 = HIDWORD(v8);
  unsigned int v52 = v8;
  unsigned int v49 = v10;
  unsigned int v50 = v9;
  uint64_t v11 = *(void *)&threadData[18 * v8 + 2];
  uint64_t v12 = v11 + 320 * HIDWORD(v8);
  int v13 = *(_DWORD *)(v12 + 312);
  uint64_t v14 = *(void (**)(void))(v12 + 224);
  if (v14) {
    v14(*(void *)(v11 + 320 * HIDWORD(v8) + 288));
  }
  if (_setjmp((int *)v12))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)stat buf = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
    }
    *(_DWORD *)(v12 + 312) = v13;
    CIOnThreadCleanUpReset(v49);
    dropThreadId(v52, 1, v7);
    CICleanUpReset(v52, v50);
    uint64_t v15 = 0;
    goto LABEL_20;
  }
  if (*(void *)(a1 + 376) <= a2 || (uint64_t v16 = *(void *)(a1 + 288), (unint64_t)(v16 + 1) <= 1))
  {
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    memset(buf, 0, sizeof(buf));
    int v17 = *__error();
    unint64_t v18 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = *(void *)(a1 + 376);
      uint64_t v34 = *(void *)(a1 + 288);
      uint64_t v35 = fd_name(*(void *)(a1 + 240), (char *)buf, 0x100uLL);
      *(_DWORD *)int v57 = 136316674;
      unsigned int v58 = "_data_map_ext_get_offset_entry";
      __int16 v59 = 1024;
      int v60 = 416;
      __int16 v61 = 2048;
      uint64_t v62 = a2;
      __int16 v63 = 2048;
      uint64_t v64 = v33;
      __int16 v65 = 2048;
      uint64_t v66 = a1;
      __int16 v67 = 2048;
      uint64_t v68 = v34;
      __int16 v69 = 2080;
      int v70 = v35;
      _os_log_error_impl(&dword_1BD672000, v18, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %lld max %lld %p map: %p %s", v57, 0x44u);
    }
    *__error() = v17;
    goto LABEL_16;
  }
  uint64_t v23 = v16 + 24 * a2;
  unint64_t v24 = *(void *)v23;
  if (*(void *)v23 != -2)
  {
    if (v24 == -1)
    {
      CFDictionaryRef v30 = *(const __CFDictionary **)(a1 + 480);
      if (v30)
      {
        CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v30, (const void *)a2);
        if (Value)
        {
          CFDataRef v32 = Value;
          unsigned int v54 = CFDataGetLength(Value) - *(_DWORD *)(a1 + 220);
          uint64_t DataForId = &CFDataGetBytePtr(v32)[*(unsigned int *)(a1 + 220)];
          CFDataGetBytePtr(v32);
          __memcpy_chk();
          unsigned int v29 = v54;
          goto LABEL_32;
        }
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        memset(buf, 0, sizeof(buf));
        int v38 = *__error();
        CFDataRef v39 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          int v41 = fd_name(*(void *)(a1 + 240), (char *)buf, 0x100uLL);
          *(_DWORD *)int v57 = 136316162;
          unsigned int v58 = "_data_map_ext_get_data_entry";
          __int16 v59 = 1024;
          int v60 = 450;
          __int16 v61 = 2048;
          uint64_t v62 = -1;
          __int16 v63 = 2048;
          uint64_t v64 = a1;
          __int16 v65 = 2080;
          uint64_t v66 = (uint64_t)v41;
          _os_log_error_impl(&dword_1BD672000, v39, OS_LOG_TYPE_ERROR, "%s:%d: invalid data offset 0x%lx %p %s", v57, 0x30u);
        }
        *__error() = v38;
        fd_name(*(void *)(a1 + 240), (char *)buf, 0x100uLL);
        si_analytics_log_2351("(1)invalid data offset 0x%lx %p %s");
      }
      else
      {
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        memset(buf, 0, sizeof(buf));
        int v36 = *__error();
        CFDictionaryRef v37 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          int v40 = fd_name(*(void *)(a1 + 240), (char *)buf, 0x100uLL);
          *(_DWORD *)int v57 = 136316162;
          unsigned int v58 = "_data_map_ext_get_data_entry";
          __int16 v59 = 1024;
          int v60 = 456;
          __int16 v61 = 2048;
          uint64_t v62 = -1;
          __int16 v63 = 2048;
          uint64_t v64 = a1;
          __int16 v65 = 2080;
          uint64_t v66 = (uint64_t)v40;
          _os_log_error_impl(&dword_1BD672000, v37, OS_LOG_TYPE_ERROR, "%s:%d: invalid data offset 0x%lx %p %s", v57, 0x30u);
        }
        *__error() = v36;
        fd_name(*(void *)(a1 + 240), (char *)buf, 0x100uLL);
        si_analytics_log_2351("(2)invalid data offset 0x%lx %p %s");
      }
      uint64_t v27 = 0;
    }
    else
    {
      int v26 = *(_DWORD *)(v23 + 8);
      unsigned int v25 = *(_DWORD *)(v23 + 12);
      uint64_t v27 = *(void *)(a1 + 472);
      *(_DWORD *)int v57 = 0;
      if (v27)
      {
        uint64_t contentindex_for_id = si_get_contentindex_for_id(v27, v26);
        int v56 = 0;
        if (contentindex_for_id)
        {
          uint64_t DataForId = (const UInt8 *)ContentIndexGetDataForId(*(void *)(contentindex_for_id + 4912), v24, v25, (uint64_t)&v56, (uint64_t)v57);
          unsigned int v29 = *(_DWORD *)v57;
LABEL_32:
          if (a3) {
            *a3 = v29;
          }
          if (*(void *)(a1 + 448))
          {
            os_unfair_lock_lock((os_unfair_lock_t)(a1 + 440));
            uint64_t v42 = *(void **)(a1 + 448);
            if (v42) {
              bit_vector_set_5929(v42, a2);
            }
            os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 440));
          }
          uint64_t v27 = (uint64_t)DataForId;
          goto LABEL_43;
        }
        int v48 = v13;
        if (data_entry_restore_ext__COUNT_ < 1)
        {
          if (++data_entry_restore_ext__COUNT2_ != 100)
          {
LABEL_57:
            uint64_t v27 = 0;
            int v13 = v48;
            goto LABEL_43;
          }
          data_entry_restore_ext__COUNT2_ = 0;
          int v46 = *__error();
          long long v45 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)stat buf = 136316418;
            *(void *)&uint8_t buf[4] = "data_entry_restore_ext";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&unsigned char buf[14] = 395;
            *(_WORD *)&unsigned char buf[18] = 2048;
            *(void *)&unsigned char buf[20] = a2;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v26;
            *(_WORD *)&buf[34] = 2048;
            *(void *)&buf[36] = v24;
            *(_WORD *)&buf[44] = 1024;
            *(_DWORD *)&buf[46] = v25;
            _os_log_error_impl(&dword_1BD672000, v45, OS_LOG_TYPE_ERROR, "%s:%d: data id %lld invalid indexId %u offset 0x%llx meta 0x%x", buf, 0x32u);
          }
          int v44 = v46;
        }
        else
        {
          --data_entry_restore_ext__COUNT_;
          int v47 = *__error();
          unsigned int v43 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)stat buf = 136316418;
            *(void *)&uint8_t buf[4] = "data_entry_restore_ext";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&unsigned char buf[14] = 395;
            *(_WORD *)&unsigned char buf[18] = 2048;
            *(void *)&unsigned char buf[20] = a2;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v26;
            *(_WORD *)&buf[34] = 2048;
            *(void *)&buf[36] = v24;
            *(_WORD *)&buf[44] = 1024;
            *(_DWORD *)&buf[46] = v25;
            _os_log_error_impl(&dword_1BD672000, v43, OS_LOG_TYPE_ERROR, "%s:%d: data id %lld invalid indexId %u offset 0x%llx meta 0x%x", buf, 0x32u);
          }
          int v44 = v47;
        }
        *__error() = v44;
        goto LABEL_57;
      }
    }
LABEL_43:
    uint64_t v19 = v27;
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v19 = 0;
LABEL_17:
  char v53 = 1;
  uint64_t v20 = *(void *)&threadData[18 * v52 + 2];
  uint64_t v21 = v20 + 320 * v51;
  *(_DWORD *)(v21 + 312) = v13;
  uint64_t v22 = *(void (**)(void))(v21 + 232);
  if (v22) {
    v22(*(void *)(v20 + 320 * v51 + 288));
  }
  dropThreadId(v52, 0, v7);
  uint64_t v15 = v19;
LABEL_20:
  if (!v53) {
    *(_DWORD *)(a1 + 464) = 22;
  }
  _data_map_ext_unlock(a1);
  uint64_t result = v15;
  if (!v15) {
    goto LABEL_2;
  }
  return result;
}

uint64_t unionUINT64Set(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v3 = a2;
    size_t v5 = (unint64_t *)(a3 + 16);
    do
    {
      unint64_t v6 = *a1++;
      SIValueSet<unsigned long long>::SIValueSetInsert(v5, v6);
      --v3;
    }
    while (v3);
  }
  return 0;
}

uint64_t data_map_ext_restore_data(uint64_t a1, unint64_t a2, void *a3, size_t a4, const void *a5)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = _data_map_ext_wrlock(a1);
  if (*(void *)(a1 + 376) > a2 && (uint64_t v11 = *(void *)(a1 + 288), (unint64_t)(v11 + 1) > 1))
  {
    if (*(void *)(v11 + 24 * a2) == -1)
    {
      MEMORY[0x1F4188790](v10);
      int v17 = (char *)&v26 - v16;
      size_t v18 = *(unsigned int *)(a1 + 220);
      BOOL v20 = v19 >= v18;
      size_t v21 = v19 - v18;
      if (v20) {
        size_t v22 = v21;
      }
      else {
        size_t v22 = 0;
      }
      bzero(&v17[v18], v22);
      memcpy(v17, a5, v18);
      memcpy(&v17[v18], a3, a4);
      data_map_ext_store_as_update(a1, (const void *)a2, (UInt8 *)v17, v18 + a4);
    }
  }
  else
  {
    memset(v40, 0, sizeof(v40));
    int v12 = *__error();
    int v13 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = *(void *)(a1 + 376);
      uint64_t v24 = *(void *)(a1 + 288);
      unsigned int v25 = fd_name(*(void *)(a1 + 240), v40, 0x100uLL);
      int v26 = 136316674;
      uint64_t v27 = "_data_map_ext_get_offset_entry";
      __int16 v28 = 1024;
      int v29 = 416;
      __int16 v30 = 2048;
      unint64_t v31 = a2;
      __int16 v32 = 2048;
      uint64_t v33 = v23;
      __int16 v34 = 2048;
      uint64_t v35 = a1;
      __int16 v36 = 2048;
      uint64_t v37 = v24;
      __int16 v38 = 2080;
      CFDataRef v39 = v25;
      _os_log_error_impl(&dword_1BD672000, v13, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %lld max %lld %p map: %p %s", (uint8_t *)&v26, 0x44u);
    }
    *__error() = v12;
    unint64_t v14 = dm_hash((uint64_t)a3, a4);
    if (*(void *)(a1 + 376) <= a2) {
      *(void *)(a1 + 376) = a2 + 1;
    }
    _data_map_ext_push_to_update_set(a1, a2, v14, (UInt8 *)a3, a4, 0);
  }
  return _data_map_ext_unlock(a1);
}

void page_cache_init(uint64_t a1)
{
  if (page_cache_init_onceToken != -1) {
    dispatch_once(&page_cache_init_onceToken, &__block_literal_global_13006);
  }
  int v2 = dispatch_group_create();
  dispatch_group_async(v2, (dispatch_queue_t)purgeQueue, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F1C8, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F1D0, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F1D8, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F1E0, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F1E8, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F1F0, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F1F8, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F200, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F208, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F210, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F218, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F220, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F228, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F230, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F238, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F240, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F248, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F250, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F258, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F260, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F268, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F270, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F278, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F280, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F288, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F290, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F298, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F2A0, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F2A8, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F2B0, &__block_literal_global_4_13007);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EC02F2B8, &__block_literal_global_4_13007);
  dispatch_group_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(v2);
  atomic_store(0, (unsigned int *)(a1 + 248));
}

dispatch_queue_t __page_cache_init_block_invoke()
{
  purgeQueue = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F1C8 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F1D0 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F1D8 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F1E0 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F1E8 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F1F0 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F1F8 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F200 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F208 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F210 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F218 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F220 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F228 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F230 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F238 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F240 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F248 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F250 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F258 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F260 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F268 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F270 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F278 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F280 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F288 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F290 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F298 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F2A0 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F2A8 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F2B0 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  dispatch_queue_t result = dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EC02F2B8 = (uint64_t)result;
  return result;
}

uint64_t __sdb_init_cache_block_invoke()
{
  long long v5 = 0u;
  long long v6 = 0u;
  *(_OWORD *)host_info_out = 0u;
  mach_msg_type_number_t host_info_outCnt = 12;
  host_t v0 = MEMORY[0x1C1881C90]();
  host_info(v0, 1, host_info_out, &host_info_outCnt);
  uint64_t result = cache_create("com.apple.metadata.framework.sdb_page_cache", &sdbCacheAttributes, (cache_t **)&sdbLargeCacheArray);
  uint64_t v2 = sdbLargeCacheArray;
  if (sdbLargeCacheArray) {
    uint64_t result = cache_set_cost_hint();
  }
  sdb_init_cache_status = v2 != 0;
  return result;
}

uint64_t sdb_make_purgeable()
{
  return dispatch_async_enforce_qos_class_f();
}

uint64_t sdb_make_nonpurgeable(uint64_t a1)
{
  uint64_t v7 = 0;
  unint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000;
  char v10 = 0;
  HIDWORD(v1) = 1713515327 * a1;
  LODWORD(v1) = 1713515327 * a1;
  unsigned int v2 = -2048144789 * ((1107688271 * (v1 >> 21)) ^ 0x1F0A259C);
  uint64_t v3 = purgeQueue[((53 * (v2 ^ (v2 >> 13))) ^ ((-1028477387
                                                                                            * (v2 ^ (v2 >> 13))) >> 16)) & 0x1F];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __sdb_make_nonpurgeable_block_invoke;
  v6[3] = &unk_1E6348B30;
  v6[4] = &v7;
  void v6[5] = a1;
  dispatch_sync(v3, v6);
  uint64_t v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t __sdb_make_nonpurgeable_block_invoke(uint64_t a1)
{
  uint64_t result = malloc_make_nonpurgeable(*(void **)(a1 + 40));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result == 0;
  return result;
}

uint64_t sdb_value_release()
{
  return dispatch_async_enforce_qos_class_f();
}

void value_release(void *a1)
{
  unsigned int v2 = malloc_default_purgeable_zone();
  malloc_zone_free(v2, a1);
}

_OWORD *sdb_key_retain(_OWORD *a1, void *a2)
{
  uint64_t result = malloc_type_malloc(0x10uLL, 0x10200403A5D3213uLL);
  if (result) {
    *uint64_t result = *a1;
  }
  *a2 = result;
  return result;
}

void page_cache_move(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t key = 0;
  uint64_t v15 = 0;
  value_out = 0;
  unsigned int v3 = atomic_load((unsigned int *)(a1 + 248));
  if (v3 > a3)
  {
    uint64_t key = *(void *)a1;
    uint64_t v15 = a3;
    if (sdb_init_cache_onceToken != -1) {
      dispatch_once(&sdb_init_cache_onceToken, &__block_literal_global_30);
    }
    if (sdb_init_cache_status == 1 && !cache_get_and_retain((cache_t *)sdbLargeCacheArray, &key, &value_out))
    {
      _cache_remove(&key);
      if (value_out)
      {
        uint64_t key = *(void *)a1;
        uint64_t v15 = a2;
        unsigned int v6 = atomic_load((unsigned int *)(a1 + 248));
        if (v6 <= a2) {
          atomic_store(a2 + 1, (unsigned int *)(a1 + 248));
        }
        uint64_t v7 = value_out;
        uint64_t v8 = *((int *)value_out + 2);
        uint64_t v9 = *MEMORY[0x1E4F14B00];
        if (sdb_init_cache_onceToken != -1)
        {
          uint64_t v12 = *MEMORY[0x1E4F14B00];
          dispatch_once(&sdb_init_cache_onceToken, &__block_literal_global_30);
          uint64_t v9 = v12;
        }
        if (sdb_init_cache_status == 1)
        {
          if (cache_set_and_retain((cache_t *)sdbLargeCacheArray, &key, v7, (v8 + v9 - 1) & ~v9)) {
            goto LABEL_17;
          }
          char v10 = value_out;
          if (sdb_init_cache_onceToken != -1) {
            dispatch_once(&sdb_init_cache_onceToken, &__block_literal_global_30);
          }
          if (sdb_init_cache_status == 1)
          {
            cache_release_value((cache_t *)sdbLargeCacheArray, v10);
LABEL_17:
            uint64_t v11 = value_out;
            if (sdb_init_cache_onceToken != -1) {
              dispatch_once(&sdb_init_cache_onceToken, &__block_literal_global_30);
            }
            goto LABEL_19;
          }
        }
        uint64_t v11 = value_out;
LABEL_19:
        if (sdb_init_cache_status == 1) {
          cache_release_value((cache_t *)sdbLargeCacheArray, v11);
        }
      }
    }
  }
}

char *db_cache_alloc(uint64_t a1)
{
  unsigned int v2 = (char *)malloc_type_calloc(1uLL, 0x1D0uLL, 0x102004031B59A9BuLL);
  *(void *)unsigned int v2 = a1;
  *((void *)v2 + 26) = 20;
  *(void *)(v2 + 220) = 0x400000002;
  pthread_rwlock_init((pthread_rwlock_t *)(v2 + 8), 0);
  page_cache_init((uint64_t)v2);
  return v2;
}

void db_cache_clear(unint64_t *a1, uint64_t a2)
{
  *((unsigned char *)a1 + 232) = 1;
  if (*((int *)a1 + 55) >= 1)
  {
    uint64_t v4 = 0;
    long long v5 = a1 + 39;
    do
    {
      unsigned int v6 = (char *)a1 + 4 * v4;
      int v7 = *((_DWORD *)v6 + 63);
      memset(v15, 0, sizeof(v15));
      long long v16 = 0u;
      LODWORD(v15[0]) = v7;
      *(_OWORD *)((char *)v15 + 8) = *(_OWORD *)(v5 - 5);
      DWORD2(v15[1]) = *((_DWORD *)v5 - 6);
      *(void *)&long long v16 = *(v5 - 2);
      DWORD2(v16) = *((_DWORD *)v5 - 2);
      uint64_t v17 = *v5;
      (*(void (**)(uint64_t, _OWORD *))(a2 + 16))(a2, v15);
      *(_OWORD *)(v5 - 5) = *(_OWORD *)((char *)v15 + 8);
      *((_DWORD *)v5 - 6) = DWORD2(v15[1]);
      *(v5 - 2) = v16;
      *((_DWORD *)v5 - 2) = DWORD2(v16);
      void *v5 = v17;
      v5 += 6;
      *((_DWORD *)v6 + 63) = v15[0];
      ++v4;
    }
    while (v4 < *((int *)a1 + 55));
  }
  v15[0] = *a1;
  if (atomic_load((unsigned int *)a1 + 62))
  {
    for (unsigned int i = 0; i < v10; ++i)
    {
      DWORD2(v15[0]) = i;
      _cache_remove((uint64_t *)v15);
      unsigned int v10 = atomic_load((unsigned int *)a1 + 62);
    }
  }
  atomic_store(0, (unsigned int *)a1 + 62);
  page_cache_init((uint64_t)a1);
  int v11 = *((_DWORD *)a1 + 55);
  if (v11 >= 1)
  {
    uint64_t v12 = 0;
    int v13 = a1 + 34;
    do
    {
      unint64_t v14 = (char *)a1 + 4 * v12;
      if (*((_DWORD *)v14 + 63) && *v13 && !*((_DWORD *)v13 + 4))
      {
        free((void *)v13[1]);
        v13[1] = 0;
        free((void *)*v13);
        *int v13 = 0;
        *((_DWORD *)v14 + 63) = 0;
        uint64_t v13[3] = 0;
        *((_DWORD *)v13 + 8) = 0;
        void v13[5] = 0;
        int v11 = *((_DWORD *)a1 + 55);
      }
      ++v12;
      v13 += 6;
    }
    while (v12 < v11);
  }
  *((unsigned char *)a1 + 232) = 0;
}

uint64_t __db_cache_dealloc_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 24))
  {
    int v3 = *__error();
    uint64_t v4 = _SILogForLogForCategory(7);
    os_log_type_t v5 = 2 * (dword_1E9FC90C0 < 4);
    if (os_log_type_enabled(v4, v5))
    {
      *(_WORD *)int v7 = 0;
      _os_log_impl(&dword_1BD672000, v4, v5, "Forcing Cache Cleanup", v7, 2u);
    }
    *__error() = v3;
    *(_DWORD *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  }
  return 0;
}

void db_cache_move_page(uint64_t a1, int a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 220);
  if (v3 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = (void *)(a1 + 312);
    do
    {
      uint64_t v11 = a1 + 4 * v7;
      int v12 = *(_DWORD *)(v11 + 252);
      if (v12 == a3)
      {
        *(_DWORD *)(v11 + 252) = 0;
        *(v8 - 2) = 0;
        *((_DWORD *)v8 - 2) = 0;
        *uint64_t v8 = 0;
        uint64_t v9 = (void *)(a1 + 48 * v7 + 272);
        free((void *)*(v8 - 4));
        *(v8 - 4) = 0;
        unsigned int v10 = (void *)*(v8 - 5);
      }
      else
      {
        if (v12 != a2) {
          goto LABEL_5;
        }
        *(_DWORD *)(v11 + 252) = a3;
        uint64_t v9 = v8 - 4;
        unsigned int v10 = (void *)*(v8 - 4);
        if (!v10) {
          goto LABEL_5;
        }
      }
      free(v10);
      *uint64_t v9 = 0;
      int v3 = *(_DWORD *)(a1 + 220);
LABEL_5:
      ++v7;
      v8 += 6;
    }
    while (v7 < v3);
  }
}

uint64_t db_cache_set_offset_hint(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  unsigned int v10 = (pthread_rwlock_t *)(a1 + 8);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 8));
  uint64_t v11 = *(unsigned int *)(a1 + 220);
  if ((int)v11 >= 1)
  {
    uint64_t v12 = 0;
    int v13 = (void *)(a1 + 272);
    while (*v13 != a2)
    {
      ++v12;
      v13 += 6;
      if (v11 == v12) {
        goto LABEL_13;
      }
    }
    uint64_t v14 = a1 + 48 * v12;
    if (a5 <= 0) {
      uint64_t v15 = 0;
    }
    else {
      uint64_t v15 = a3;
    }
    if (a5 <= 0) {
      int v16 = 0;
    }
    else {
      int v16 = a4;
    }
    *(void *)(v14 + 296) = v15;
    *(_DWORD *)(v14 + 304) = v16;
    *(void *)(v14 + 312) = a5 & ~(a5 >> 63);
  }
LABEL_13:
  return pthread_rwlock_unlock(v10);
}

uint64_t db_cache_clear_offset_hints(uint64_t a1)
{
  unsigned int v2 = (pthread_rwlock_t *)(a1 + 8);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 8));
  uint64_t v3 = *(unsigned int *)(a1 + 220);
  if ((int)v3 >= 1)
  {
    if (v3 == 1)
    {
      uint64_t v4 = 0;
LABEL_7:
      uint64_t v7 = v3 - v4;
      uint64_t v8 = (void *)(a1 + 48 * v4 + 312);
      do
      {
        *(v8 - 2) = 0;
        *((_DWORD *)v8 - 2) = 0;
        *uint64_t v8 = 0;
        v8 += 6;
        --v7;
      }
      while (v7);
      goto LABEL_9;
    }
    uint64_t v4 = v3 & 0xFFFFFFFE;
    os_log_type_t v5 = (void *)(a1 + 360);
    uint64_t v6 = v4;
    do
    {
      *(v5 - 8) = 0;
      *(v5 - 2) = 0;
      *((_DWORD *)v5 - 14) = 0;
      *((_DWORD *)v5 - 2) = 0;
      *(v5 - 6) = 0;
      void *v5 = 0;
      v5 += 12;
      v6 -= 2;
    }
    while (v6);
    if (v4 != v3) {
      goto LABEL_7;
    }
  }
LABEL_9:
  return pthread_rwlock_unlock(v2);
}

void __page_cache_deserialize_entries_block_invoke(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  uint64_t v3 = *(void **)(a1 + 40);
  free(v3);
}

void __page_cache_deserialize_entries_block_invoke_2(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  uint64_t v3 = *(void **)(a1 + 40);
  free(v3);
}

uint64_t SISearchCtx::matchingArrayIndexNodes(SISearchCtx *this, uint64_t *a2)
{
  if (a2) {
    *a2 = 0;
  }
  return 0;
}

uint64_t SISearchCtx::matchingAttributeNodes(SISearchCtx *this, uint64_t *a2)
{
  if (a2) {
    *a2 = 0;
  }
  return 0;
}

uint64_t SISearchCtx::queryContext(SISearchCtx *this)
{
  return 0;
}

uint64_t SISearchCtx::preIterate(CFAbsoluteTime *this, SISearchCtx *a2)
{
  return 1;
}

uint64_t SISearchCtx_ItemScope::vinitContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFArray *a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, const void *a11, uint64_t a12, uint64_t a13)
{
  SISearchCtx::initContext(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13);
  if (a9) {
    CFRetain(a9);
  }
  *(void *)(a1 + 376) = a9;
  if (a5)
  {
    uint64_t v17 = compileToSDBTree(a5, (uint64_t (*)(void))factorRewrite);
    setupCannedFields(v17);
  }
  else
  {
    uint64_t v17 = 0;
  }
  size_t v18 = (uint64_t *)(a1 + 368);
  *(void *)(a1 + 368) = v17;
  size_t v19 = (uint64_t *)compileToSDBTree(a4, (uint64_t (*)(void))factorRewrite);
  setupCannedFields((uint64_t)v19);
  *(void *)(a1 + 360) = v19;
  if (queryApply(v19))
  {
    if ((*(unsigned char *)(a1 + 43) & 8) != 0) {
      *(void *)(a1 + 64) = 0;
    }
  }
  else
  {
    db_optimize_query_tree((void **)(a1 + 360));
    decorateExpandingFunctions(*(void **)(a1 + 360), *(void *)a2, *(const void **)(a2 + 656), *(double *)(a2 + 360));
    setupCannedFields(*(void *)(a1 + 360));
    *(void *)(a1 + 40) |= 0x4000000uLL;
    if (*(void *)(a1 + 368))
    {
      db_optimize_query_tree((void **)(a1 + 368));
      decorateExpandingFunctions((void *)*v18, *(void *)a2, *(const void **)(a2 + 656), *(double *)(a2 + 360));
      setupCannedFields(*v18);
      if ((*(_WORD *)(*v18 + 48) & 0x10) != 0) {
        return 0;
      }
    }
    *(void *)(a1 + 56) = 0;
    CFRelease(a11);
  }
  if (*v18) {
    rewriteForFSPostCheckInPlace(a1 + 368);
  }
  return 1;
}

uint64_t queryApply(uint64_t *a1)
{
  while (1)
  {
    int v2 = *((unsigned __int16 *)a1 + 24);
    if ((v2 - 1) >= 2) {
      break;
    }
    uint64_t v3 = (uint64_t *)*a1;
    if (*a1)
    {
      uint64_t result = queryApply(*a1);
      if (!result) {
        return result;
      }
      uint64_t v5 = a1[1];
      a1 = v3;
      if (v5) {
        continue;
      }
    }
    return 0;
  }
  if (v2 != 4) {
    return 1;
  }
  uint64_t v6 = a1[2];
  if (!v6) {
    return 1;
  }
  return qp_vis(v6);
}

BOOL qp_vis(uint64_t a1)
{
  int v2 = *(const char **)a1;
  if (strcmp(*(const char **)a1, "kMDItemFSInvisible"))
  {
    if (strcmp(v2, "kMDItemFSName")) {
      return 1;
    }
    uint64_t v3 = *(unsigned char **)(a1 + 72);
    return !v3 || *v3 != 46 || *(_DWORD *)(a1 + 24) != 1 || (*(unsigned char *)(a1 + 32) & 0x40) != 0;
  }
  uint64_t v4 = *(const char **)(a1 + 72);
  if (v4)
  {
    if (strcmp(*(const char **)(a1 + 72), "1"))
    {
      if (!strcmp(v4, "0")) {
        return *(_DWORD *)(a1 + 24) != 5;
      }
      if (strcmp(v4, "*")) {
        return 1;
      }
    }
    if (*(_DWORD *)(a1 + 24) == 1) {
      return 0;
    }
  }
  return 1;
}

BOOL SISearchCtx_ItemScope::preIterate(SISearchCtx_ItemScope *this, SISearchCtx *a2)
{
  if (dword_1E9FC90A8 >= 5)
  {
    int v5 = *__error();
    uint64_t v6 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_1BD672000, v6, OS_LOG_TYPE_DEFAULT, "Entering", v7, 2u);
    }
    *__error() = v5;
  }
  SISearchCtx::common_preIterate((CFAbsoluteTime *)this, a2);
  uint64_t v3 = *((void *)this + 11);
  if (v3) {
    RLEOIDArrayGetAllOids(*((void *)this + 11), (void *)this + 48, (void *)this + 49);
  }
  return v3 != 0;
}

BOOL SISearchCtx_ItemScope::performSearch(SISearchCtx_ItemScope *this, PartialQueryResults *a2)
{
  uint64_t v122 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)a2 + 432))
  {
    BOOL v4 = *((unsigned char *)a2 + 433) != 0;
  }
  else
  {
    BOOL v4 = PartialQueryResults::__needsWhatFieldsMatched(a2);
    *((unsigned char *)a2 + 433) = v4;
    *((unsigned char *)a2 + 432) = 1;
  }
  unint64_t v6 = *((void *)this + 49);
  unint64_t v5 = *((void *)this + 50);
  unint64_t v7 = v6 - v5;
  if (v6 <= v5) {
    return *((void *)this + 50) < *((void *)this + 49);
  }
  uint64_t v8 = *((void *)this + 3);
  if (*((int *)this + 40) > 4)
  {
    uint64_t v101 = 0;
  }
  else
  {
    uint64_t v9 = *((void *)this + 13);
    uint64_t v10 = v9;
    do
    {
      uint64_t v11 = v10;
      uint64_t v10 = *(void *)(v10 + 80);
    }
    while (v10);
    int v12 = *(_DWORD *)(*(void *)(v11 + 8) + 80);
    uint64_t v13 = *(void *)(v9 + 80);
    if (!v13) {
      goto LABEL_14;
    }
    char v14 = 0;
    do
    {
      v14 ^= *(_DWORD *)(v9 + 104) == 0;
      uint64_t v9 = v13;
      uint64_t v13 = *(void *)(v13 + 80);
    }
    while (v13);
    if (v14) {
      unsigned __int16 v15 = 3553;
    }
    else {
LABEL_14:
    }
      unsigned __int16 v15 = 2781;
    uint64_t v101 = PartialQueryResults::start(a2, v12, v15, v7, 0);
  }
  uint64_t v16 = *((void *)this + 5);
  if ((v16 & 0x7000000) != 0)
  {
    if (*MEMORY[0x1E4F14B00] <= 0x2FuLL) {
      ++sTotal;
    }
    uint64_t v17 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x30uLL, 0x31F9A007uLL);
    if (!v17) {
      _log_fault_for_malloc_failure();
    }
    uint64_t v18 = *((void *)this + 49);
    uint64_t v19 = *((void *)this + 50);
    uint64_t v20 = v18 - v19;
    if (v18 == v19)
    {
LABEL_68:
      free(v17);
      if (*((void *)a2 + 186))
      {
        _MDPlistBytesEndArray();
        _MDPlistBytesEndPlist();
      }
      if (*((void *)a2 + 58))
      {
        _MDStoreOIDArrayEndBulkAdd();
        _MDStoreOIDArrayEndSequence();
        *((void *)a2 + 443) = 0;
      }
      return *((void *)this + 50) < *((void *)this + 49);
    }
    uint64_t v21 = 0;
    __int16 v95 = (char **)((char *)a2 + 104);
    long long v98 = (CFIndex *)((char *)a2 + 232);
    long long v93 = (char **)((char *)a2 + 96);
    while (1)
    {
      uint64_t v22 = *((void *)this + 48);
      uint64_t v23 = *(void *)(v22 + 8 * v19);
      if (v23) {
        break;
      }
LABEL_67:
      ++v21;
      *((void *)this + 50) = ++v19;
      if (v21 == v20) {
        goto LABEL_68;
      }
    }
    if (*((void *)a2 + 314) >= 0xFFFDuLL)
    {
      uint64_t v24 = *((void *)this + 13);
      uint64_t v25 = v24;
      do
      {
        uint64_t v26 = v25;
        uint64_t v25 = *(void *)(v25 + 80);
      }
      while (v25);
      uint64_t v27 = *(void *)(v24 + 80);
      if (!v27) {
        goto LABEL_32;
      }
      char v28 = 0;
      do
      {
        v28 ^= *(_DWORD *)(v24 + 104) == 0;
        uint64_t v24 = v27;
        uint64_t v27 = *(void *)(v27 + 80);
      }
      while (v27);
      if (v28) {
        unsigned __int16 v29 = 3553;
      }
      else {
LABEL_32:
      }
        unsigned __int16 v29 = 2781;
      PartialQueryResults::prepare((uint64_t)a2, *(_DWORD *)(*(void *)(v26 + 8) + 80), v29, 0);
      uint64_t v22 = *((void *)this + 48);
      uint64_t v19 = *((void *)this + 50);
      uint64_t v23 = *(void *)(v22 + 8 * v19);
    }
    *uint64_t v17 = v23;
    bzero(v116, 0x478uLL);
    uint64_t v30 = *(void *)(v22 + 8 * v19);
    uint64_t v31 = *((void *)this + 2);
    *((void *)&v117 + 1) = v8;
    *(void *)&long long v118 = v31;
    memset(&v119[1], 0, 40);
    if (v8) {
      int v32 = (*(unsigned __int8 *)(v8 + 6578) >> 1) & 1;
    }
    else {
      LOBYTE(v32) = 1;
    }
    LOBYTE(v120) = v32;
    uint64_t v121 = v30;
    *(void *)uint64_t v116 = &unk_1F1810A20;
    v119[0] = v17;
    if (!*((void *)this + 45)) {
      goto LABEL_155;
    }
    uint64_t v110 = v8;
    long long v111 = this;
    uint64_t v112 = v31;
    uint64_t v113 = 0;
    uint64_t v108 = v116;
    size_t v109 = (size_t)&unk_1F1810B78;
    long long v114 = v116;
    CFIndex v105 = 0;
    long long v106 = LazyGottenObject::_faultInGottenObj;
    uint64_t v107 = 0;
    if (!db_eval_obj_with_options(*(void *)(v8 + 1184)))
    {
      if (dword_1E9FC90A8 >= 5)
      {
        int v37 = *__error();
        __int16 v38 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_52;
        }
        goto LABEL_53;
      }
    }
    else
    {
LABEL_155:
      if (!*((void *)this + 46)) {
        goto LABEL_41;
      }
      uint64_t v33 = *((void *)this + 2);
      uint64_t v110 = *((void *)&v117 + 1);
      long long v111 = this;
      uint64_t v112 = v33;
      uint64_t v113 = 0;
      uint64_t v108 = v116;
      size_t v109 = (size_t)&unk_1F1810B78;
      long long v114 = v116;
      CFIndex v105 = 0;
      long long v106 = LazyGottenObject::_faultInGottenObj;
      uint64_t v107 = 0;
      if (db_eval_obj_with_options(*(void *)(v8 + 1184)))
      {
LABEL_41:
        int v34 = *((_DWORD *)this + 40);
        if (v34 == 4)
        {
          if (*(void *)(v8 + 1184)) {
            CFDataRef v39 = CatInfoGotten_OID::dbo((CatInfoGotten_OID *)v116);
          }
          else {
            CFDataRef v39 = 0;
          }
          if (*v98)
          {
            if (*(unsigned char *)a2)
            {
              if (!*v95)
              {
                CFArrayRef v43 = (const __CFArray *)*((void *)a2 + 16);
                if (v43)
                {
                  size_t v109 = 0;
                  SIFlattenArrayToCStringVector(v43, v95, &v109, &v105);
                }
              }
            }
            else if (!*v93)
            {
              CFArrayRef v44 = (const __CFArray *)*((void *)a2 + 15);
              if (v44)
              {
                SIFlattenArrayToCStringVector(v44, v93, (size_t *)a2 + 30, v98);
                if (!*v93) {
                  goto LABEL_149;
                }
              }
            }
          }
          collectAttributesFromDBO(v8, v39, *((void *)a2 + 29), (uint64_t)a2, *((char ***)this + 19));
        }
        else if (v34 == 5)
        {
          uint64_t v35 = v121;
          ++*((void *)a2 + 314);
          __int16 v36 = (void *)*((void *)a2 + 443);
          *__int16 v36 = v35;
          *((void *)a2 + 443) = v36 + 1;
        }
        else
        {
          LODWORD(v117) = v117 | 8;
          int v40 = (char **)*((void *)this + 19);
          uint64_t v41 = *((void *)this + 28);
          uint64_t v42 = *((void *)this + 29);
          v102[3] = unk_1BDA88410;
          uint8_t v102[4] = xmmword_1BDA88420;
          memset(v102, 0, 48);
          ptr &= 0xFFFFFF0000000000;
          writeDBOToPlistBytes(v8, v101, (uint64_t)a2, v40, v116, *((void *)this + 2), v41, v42, 0, (uint64_t *)v102, ptr, SBYTE4(ptr), 0, 0, 0, 0, 0, *((void **)this + 1), 0);
        }
        goto LABEL_64;
      }
      if (dword_1E9FC90A8 >= 5)
      {
        int v37 = *__error();
        __int16 v38 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
LABEL_52:
          *(_WORD *)stat buf = 0;
          _os_log_impl(&dword_1BD672000, v38, OS_LOG_TYPE_DEFAULT, "File failed secondary query", buf, 2u);
        }
LABEL_53:
        *__error() = v37;
      }
    }
LABEL_64:
    if ((void *)v119[0] == v17) {
      v119[0] = 0;
    }
    CatInfoGotten_OID::~CatInfoGotten_OID((CatInfoGotten_OID *)v116);
    uint64_t v19 = *((void *)this + 50);
    goto LABEL_67;
  }
  if ((v16 & 0x4000) != 0)
  {
    if (*MEMORY[0x1E4F14B00] <= 0x2FuLL) {
      ++sTotal;
    }
    long long v96 = (unsigned int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x30uLL, 0x31F9A007uLL);
    if (v96) {
      goto LABEL_78;
    }
    _log_fault_for_malloc_failure();
  }
  long long v96 = 0;
LABEL_78:
  PartialQueryResults::attributeIdVector(a2, *(int **)(v8 + 1184));
  long long v45 = db_obj_iter_create_with_filter(*(int **)(v8 + 1184), v7, *((void *)this + 48) + 8 * *((void *)this + 50), 0, 0, 0, 0, 0, 0);
  ptra = 0;
  *((void *)this + 50) += v7;
  long long v92 = (CFIndex *)((char *)a2 + 232);
  LODWORD(v94) = 0;
  long long v89 = (char **)((char *)a2 + 96);
  long long v90 = (char **)((char *)a2 + 104);
  BOOL v91 = v4;
  while (1)
  {
    *(void *)stat buf = 0;
    unsigned int v49 = db_obj_iter_next((uint64_t)v45, (unint64_t *)buf, 1, v46, v47, v48);
    if (*(void *)buf >= v7) {
      break;
    }
    unsigned int v50 = v49;
    if ((*((unsigned char *)this + 41) & 0x40) != 0)
    {
      if (!v49)
      {
        unsigned int v50 = v96;
        *(void *)long long v96 = *(void *)(*((void *)this + 48) + 8 * *(void *)buf);
        goto LABEL_99;
      }
      if (dword_1E9FC90A8 >= 5)
      {
        int v53 = *__error();
        unsigned int v54 = _SILogForLogForCategory(1);
        if (!os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_95;
        }
        *(_WORD *)uint64_t v116 = 0;
        long long v55 = v54;
        int v56 = "File with dbo: ignored for search during initial indexing";
        goto LABEL_94;
      }
    }
    else if (v49)
    {
      if (v4 && (*((void *)this + 46) || *((void *)this + 45)))
      {
        unsigned int v51 = v49[3];
        if (v94 >= v51)
        {
          unsigned int v52 = ptra;
        }
        else
        {
          size_t v94 = (v51 + 4095) & 0xFFFFF000;
          unsigned int v52 = (unsigned int *)malloc_type_realloc(ptra, v94, 0xECB3D0EBuLL);
          unsigned int v51 = v50[3];
        }
        unsigned int v58 = v50;
        unsigned int v50 = v52;
        memcpy(v52, v58, v51);
        ptra = v50;
      }
LABEL_99:
      uint64_t v120 = 0;
      memset(&v119[2], 0, 32);
      long long v118 = 0u;
      memset(v119, 0, sizeof(v119));
      long long v117 = 0u;
      uint64_t v59 = *((void *)this + 2);
      *((void *)&v117 + 1) = v8;
      *(void *)&long long v118 = v59;
      if (v8) {
        int v60 = (*(unsigned __int8 *)(v8 + 6578) >> 1) & 1;
      }
      else {
        LOBYTE(v60) = 1;
      }
      LOBYTE(v120) = v60;
      *(void *)uint64_t v116 = &unk_1F1810A60;
      v119[0] = v50;
      if (*((void *)this + 45))
      {
        uint64_t v110 = v8;
        long long v111 = this;
        uint64_t v112 = v59;
        uint64_t v113 = 0;
        uint64_t v108 = v116;
        size_t v109 = (size_t)&unk_1F1810B78;
        long long v114 = v116;
        CFIndex v105 = 0;
        long long v106 = LazyGottenObject::_faultInGottenObj;
        uint64_t v107 = 0;
        if (!db_eval_obj_with_options(*(void *)(v8 + 1184)))
        {
          if (dword_1E9FC90A8 < 5) {
            goto LABEL_139;
          }
          int v88 = *__error();
          int v70 = _SILogForLogForCategory(1);
          if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long v104 = 0;
            __int16 v71 = v70;
            long long v72 = "File failed primary query";
            goto LABEL_129;
          }
LABEL_130:
          *__error() = v88;
LABEL_138:
          BOOL v4 = v91;
          goto LABEL_139;
        }
      }
      if (*((void *)this + 46))
      {
        uint64_t v61 = *((void *)this + 2);
        uint64_t v110 = *((void *)&v117 + 1);
        long long v111 = this;
        uint64_t v112 = v61;
        uint64_t v113 = 0;
        uint64_t v108 = v116;
        size_t v109 = (size_t)&unk_1F1810B78;
        long long v114 = v116;
        CFIndex v105 = 0;
        long long v106 = LazyGottenObject::_faultInGottenObj;
        uint64_t v107 = 0;
        if (!db_eval_obj_with_options(*(void *)(v8 + 1184)))
        {
          if (dword_1E9FC90A8 < 5) {
            goto LABEL_139;
          }
          int v88 = *__error();
          long long v73 = _SILogForLogForCategory(1);
          if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long v104 = 0;
            __int16 v71 = v73;
            long long v72 = "File failed secondary query";
LABEL_129:
            _os_log_impl(&dword_1BD672000, v71, OS_LOG_TYPE_DEFAULT, v72, v104, 2u);
          }
          goto LABEL_130;
        }
      }
      if (*((_DWORD *)this + 40) == 4)
      {
        if (*(void *)(v8 + 1184)) {
          uint64_t v62 = (void *)v119[0];
        }
        else {
          uint64_t v62 = 0;
        }
        if (*v92)
        {
          if (*(unsigned char *)a2)
          {
            if (!*v90)
            {
              CFArrayRef v63 = (const __CFArray *)*((void *)a2 + 16);
              if (v63)
              {
                size_t v109 = 0;
                SIFlattenArrayToCStringVector(v63, v90, &v109, &v105);
              }
            }
          }
          else if (!*v89)
          {
            CFArrayRef v77 = (const __CFArray *)*((void *)a2 + 15);
            if (v77)
            {
              SIFlattenArrayToCStringVector(v77, v89, (size_t *)a2 + 30, v92);
              if (!*v89)
              {
LABEL_149:
                long long v79 = __si_assert_copy_extra_329();
                __message_assert_333((uint64_t)v79, v80, v81, v82, v83, v84, v85, v86, (char)"SISearchCtx.h");
                free(v79);
                if (__valid_fs(-1)) {
                  uint64_t v87 = 2989;
                }
                else {
                  uint64_t v87 = 3072;
                }
                *(_DWORD *)uint64_t v87 = -559038737;
                abort();
              }
            }
          }
        }
        collectAttributesFromDBO(v8, v62, *((void *)a2 + 29), (uint64_t)a2, *((char ***)this + 19));
        goto LABEL_138;
      }
      if (*((void *)a2 + 314) >= 0xFFFDuLL)
      {
        uint64_t v64 = *((void *)this + 13);
        uint64_t v65 = v64;
        do
        {
          uint64_t v66 = v65;
          uint64_t v65 = *(void *)(v65 + 80);
        }
        while (v65);
        uint64_t v67 = *(void *)(v64 + 80);
        if (!v67) {
          goto LABEL_131;
        }
        char v68 = 0;
        do
        {
          v68 ^= *(_DWORD *)(v64 + 104) == 0;
          uint64_t v64 = v67;
          uint64_t v67 = *(void *)(v67 + 80);
        }
        while (v67);
        if (v68) {
          unsigned __int16 v69 = 3553;
        }
        else {
LABEL_131:
        }
          unsigned __int16 v69 = 2781;
        PartialQueryResults::prepare((uint64_t)a2, *(_DWORD *)(*(void *)(v66 + 8) + 80), v69, 0);
      }
      LODWORD(v117) = v117 | 8;
      long long v74 = (char **)*((void *)this + 19);
      uint64_t v75 = *((void *)this + 28);
      uint64_t v76 = *((void *)this + 29);
      v103[3] = unk_1BDA88410;
      v103[4] = xmmword_1BDA88420;
      memset(v103, 0, 48);
      v97 &= 0xFFFFFF0000000000;
      writeDBOToPlistBytes(v8, v101, (uint64_t)a2, v74, v116, *((void *)this + 2), v75, v76, 0, (uint64_t *)v103, v97, SBYTE4(v97), 0, 0, 0, 0, 0, *((void **)this + 1), 0);
LABEL_139:
      if ((unsigned int *)v119[0] == v50) {
        v119[0] = 0;
      }
      CatInfoGotten_SDB::~CatInfoGotten_SDB((CatInfoGotten_SDB *)v116);
    }
    else if (dword_1E9FC90A8 >= 5)
    {
      int v53 = *__error();
      int v57 = _SILogForLogForCategory(1);
      if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_95;
      }
      *(_WORD *)uint64_t v116 = 0;
      long long v55 = v57;
      int v56 = "File without dbo";
LABEL_94:
      _os_log_impl(&dword_1BD672000, v55, OS_LOG_TYPE_DEFAULT, v56, v116, 2u);
LABEL_95:
      *__error() = v53;
      BOOL v4 = v91;
    }
  }
  free(ptra);
  if (*((void *)a2 + 186))
  {
    _MDPlistBytesEndArray();
    _MDPlistBytesEndPlist();
  }
  if (*((void *)a2 + 58))
  {
    _MDStoreOIDArrayEndBulkAdd();
    _MDStoreOIDArrayEndSequence();
    *((void *)a2 + 443) = 0;
  }
  db_obj_iter_release(v45);
  if ((*((unsigned char *)this + 41) & 0x40) != 0) {
    free(v96);
  }
  return *((void *)this + 50) < *((void *)this + 49);
}

uint64_t LazyGottenObject::_faultInGottenObj(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24));
  *(void *)a2 = result;
  return result;
}

uint64_t QueryFunctionCallbackContext::findContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = si_indexForDocId(*(void *)(a1 + 8), *(void *)(a2 + 32));
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(const UInt8 **)(a3 + 72);
    if (v8) {
      size_t v9 = strlen(*(const char **)(a3 + 72));
    }
    else {
      size_t v9 = 0;
    }
    CFStringRef v11 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v8, v9, 0x8000100u, 0);
    uint64_t v12 = *(void *)(a3 + 32);
    unsigned int v13 = (v12 >> 4) & 1;
    if ((v12 & 0x800000) != 0) {
      unsigned int v13 = (v12 >> 4) & 1 | ((*(unsigned char *)(a3 + 28) & 0x7F) << 18) | 0x10000;
    }
    BOOL v10 = ContentIndexContainsContentByDocId(v7, *(void *)(a2 + 32), v11, v13 | (v12 >> 4) & 2, 0, (*(_DWORD *)(*(void *)(a1 + 8) + 6576) >> 19) & 3, *(unsigned char *)(a1 + 32)) != 0;
    if (v11) {
      CFRelease(v11);
    }
  }
  else
  {
    BOOL v10 = 0;
  }
  return v10 ^ ((*(_DWORD *)(a3 + 24) - 5) < 2);
}

uint64_t QueryFunctionCallbackContext_OO::gotten(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

{
  return *(void *)(a1 + 40);
}

void QueryFunctionCallbackContext_OO::~QueryFunctionCallbackContext_OO(QueryFunctionCallbackContext_OO *this)
{
}

void SISearchCtx_ItemScope::enqueue(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 24);
  int v7 = *(_DWORD *)(a1 + 304);
  if (*(void *)(v6 + 1184))
  {
    if (v7 >= 2) {
      int v8 = 2;
    }
    else {
      int v8 = *(_DWORD *)(a1 + 304);
    }
    uint64_t v9 = *(void *)(a1 + 24);
    si_sdb_enqueue(v9, a4, a2, a3, v8);
  }
  else
  {
    if (!*(void *)(v6 + 1072))
    {
      unsigned __int16 v15 = __si_assert_copy_extra_625(-1);
      uint64_t v16 = v15;
      uint64_t v17 = "";
      if (v15) {
        uint64_t v17 = v15;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "SIJob.c", 111, "ref->workqueues.queues[SI_FS_QUEUE_IDX]!=0", v17);
      free(v16);
      if (__valid_fs(-1)) {
        uint64_t v18 = 2989;
      }
      else {
        uint64_t v18 = 3072;
      }
      *(_DWORD *)uint64_t v18 = -559038737;
      abort();
    }
    if (qos_class_self() <= QOS_CLASS_USER_INITIATED) {
      qos_class_t v10 = qos_class_self();
    }
    else {
      qos_class_t v10 = QOS_CLASS_USER_INITIATED;
    }
    if (v7 == -1) {
      int v11 = 17;
    }
    else {
      int v11 = v10;
    }
    uint64_t v12 = 64;
    if (v7 >= -1)
    {
      int v13 = v11;
    }
    else
    {
      uint64_t v12 = 56;
      int v13 = 9;
    }
    uint64_t v14 = *(void *)(v6 + v12 + 1008);
    si_enqueue_work_with_qos(v14, v13, (uint64_t)a2, a3);
  }
}

BOOL SISearchCtx_ItemScope::fsContext(SISearchCtx_ItemScope *this)
{
  return *(void *)(*((void *)this + 3) + 1184) == 0;
}

void SISearchCtx_ItemScope::~SISearchCtx_ItemScope(SISearchCtx_ItemScope *this)
{
  SISearchCtx_ItemScope::~SISearchCtx_ItemScope(this);
  JUMPOUT(0x1C1881000);
}

{
  const void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  void *v9;
  void *v10;
  uint64_t vars8;

  *(void *)this = &unk_1F1810B10;
  int v2 = (const void *)*((void *)this + 47);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 47) = 0;
  uint64_t v3 = (void *)*((void *)this + 46);
  if (v3)
  {
    uint64_t v6 = MEMORY[0x1E4F143A8];
    int v7 = 0x40000000;
    int v8 = __db_query_tree_apply_block_block_invoke;
    uint64_t v9 = &unk_1E6348598;
    qos_class_t v10 = &__block_literal_global_161;
    db_query_tree_apply_block_with_meta(v3, (uint64_t)&v6, 0);
  }
  BOOL v4 = (void *)*((void *)this + 45);
  if (v4)
  {
    uint64_t v6 = MEMORY[0x1E4F143A8];
    int v7 = 0x40000000;
    int v8 = __db_query_tree_apply_block_block_invoke;
    uint64_t v9 = &unk_1E6348598;
    qos_class_t v10 = &__block_literal_global_161;
    db_query_tree_apply_block_with_meta(v4, (uint64_t)&v6, 0);
  }
  unint64_t v5 = (void *)*((void *)this + 48);
  if (v5) {
    free(v5);
  }
  SISearchCtx::~SISearchCtx(this);
}

void SISearchCtx::pushCompletions(SISearchCtx *this, PartialQueryResults *a2)
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 44))
  {
    int v2 = this;
    if (_SIPerf_QueryLog(void)::onceToken != -1) {
      dispatch_once(&_SIPerf_QueryLog(void)::onceToken, &__block_literal_global_61_13218);
    }
    uint64_t v3 = _SIPerf_QueryLog(void)::sQueryLog;
    os_signpost_id_t v4 = os_signpost_id_generate((os_log_t)_SIPerf_QueryLog(void)::sQueryLog);
    unint64_t v102 = v4 - 1;
    if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
    {
      *(_WORD *)stat buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1BD672000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "com_apple_spotlight_suggestions_latency", (const char *)&unk_1BDAB99BE, buf, 2u);
    }
    uint64_t v5 = *(unsigned __int16 *)(*((void *)v2 + 44) + 4);
    makeThreadId();
    long long v114 = 0;
    long long v115 = 0;
    uint64_t v116 = 0;
    __p = 0;
    uint64_t v112 = 0;
    uint64_t v113 = 0;
    uint64_t v100 = (uint64_t)v2;
    os_signpost_id_t v103 = v4;
    log = v3;
    if (v5)
    {
      uint64_t v6 = (uint64_t *)(*((void *)v2 + 44) + 24);
      uint64_t v7 = v5;
      unint64_t v8 = 0;
      do
      {
        uint64_t v9 = *v6;
        v6 += 3;
        unint64_t v10 = v8 + v9 - 1;
        unint64_t v8 = v10;
        --v7;
      }
      while (v7);
      std::vector<oid_and_rankinfo_t>::reserve((void **)&v114, v10);
      std::vector<long long>::reserve(&__p, v10);
      int v11 = 0;
      uint64_t v12 = *((void *)v2 + 44);
      uint64_t v99 = v5;
      int v13 = 0;
      unint64_t v14 = 0;
      for (uint64_t i = 0; i != v99; ++i)
      {
        if (*(void *)(v12 + 24 * i + 24) == 1)
        {
          uint64_t v16 = v11;
          uint64_t v17 = v13;
        }
        else
        {
          uint64_t v18 = v11;
          unint64_t v19 = v14;
          uint64_t v20 = v12;
          do
          {
            pqpop_oid_and_rankinfo_t((uint64_t)buf, (void *)(v20 + 24 * i + 8));
            uint64_t v21 = v115;
            uint64_t v22 = v115;
            if (v115 >= v116)
            {
              uint64_t v24 = v114;
              uint64_t v25 = 0x6DB6DB6DB6DB6DB7 * ((v115 - v114) >> 4);
              unint64_t v26 = v25 + 1;
              if ((unint64_t)(v25 + 1) > 0x249249249249249) {
                goto LABEL_97;
              }
              if (0xDB6DB6DB6DB6DB6ELL * ((v116 - v114) >> 4) > v26) {
                unint64_t v26 = 0xDB6DB6DB6DB6DB6ELL * ((v116 - v114) >> 4);
              }
              if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v116 - v114) >> 4)) >= 0x124924924924924) {
                unint64_t v27 = 0x249249249249249;
              }
              else {
                unint64_t v27 = v26;
              }
              if (v27)
              {
                char v28 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<oid_and_rankinfo_t>>(v27);
                uint64_t v30 = v29;
              }
              else
              {
                uint64_t v30 = 0;
                char v28 = 0;
              }
              uint64_t v31 = &v28[112 * v25];
              int v32 = v31;
              *((_OWORD *)v31 + 3) = v120;
              *((_OWORD *)v31 + 4) = v121;
              *((_OWORD *)v31 + 5) = v122;
              *((_OWORD *)v31 + 6) = v123;
              *(_OWORD *)uint64_t v31 = *(_OWORD *)buf;
              *((_OWORD *)v31 + 1) = v118;
              *((_OWORD *)v31 + 2) = v119;
              if (v21 != v24)
              {
                uint64_t v33 = &v28[112 * v25];
                do
                {
                  long long v34 = *((_OWORD *)v22 - 7);
                  long long v35 = *((_OWORD *)v22 - 5);
                  *((_OWORD *)v33 - 6) = *((_OWORD *)v22 - 6);
                  *((_OWORD *)v33 - 5) = v35;
                  *((_OWORD *)v33 - 7) = v34;
                  long long v36 = *((_OWORD *)v22 - 4);
                  long long v37 = *((_OWORD *)v22 - 3);
                  long long v38 = *((_OWORD *)v22 - 1);
                  *((_OWORD *)v33 - 2) = *((_OWORD *)v22 - 2);
                  *((_OWORD *)v33 - 1) = v38;
                  *((_OWORD *)v33 - 4) = v36;
                  *((_OWORD *)v33 - 3) = v37;
                  v22 -= 112;
                  int v32 = v33 - 112;
                  v33 -= 112;
                }
                while (v22 != v24);
              }
              uint64_t v23 = v31 + 112;
              long long v114 = v32;
              uint64_t v116 = &v28[112 * v30];
              if (v24) {
                operator delete(v24);
              }
            }
            else
            {
              *((_OWORD *)v115 + 3) = v120;
              *((_OWORD *)v21 + 4) = v121;
              *((_OWORD *)v21 + 5) = v122;
              *((_OWORD *)v21 + 6) = v123;
              *(_OWORD *)uint64_t v21 = *(_OWORD *)buf;
              *((_OWORD *)v21 + 1) = v118;
              *((_OWORD *)v21 + 2) = v119;
              uint64_t v23 = v21 + 112;
            }
            long long v115 = v23;
            uint64_t v39 = *((void *)v23 - 14);
            int v40 = v112;
            uint64_t v41 = v112;
            if (v112 >= v113)
            {
              CFArrayRef v43 = (char *)__p;
              uint64_t v44 = (v112 - (unsigned char *)__p) >> 3;
              unint64_t v45 = v44 + 1;
              if ((unint64_t)(v44 + 1) >> 61) {
                goto LABEL_97;
              }
              uint64_t v46 = v113 - (unsigned char *)__p;
              if ((v113 - (unsigned char *)__p) >> 2 > v45) {
                unint64_t v45 = v46 >> 2;
              }
              if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v47 = v45;
              }
              if (v47)
              {
                __n128 v48 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v47);
                uint64_t v50 = v49;
              }
              else
              {
                uint64_t v50 = 0;
                __n128 v48 = 0;
              }
              unsigned int v51 = &v48[8 * v44];
              *(void *)unsigned int v51 = v39;
              unsigned int v52 = v51 + 8;
              if (v40 == v43)
              {
                int v2 = (SISearchCtx *)v100;
              }
              else
              {
                int v53 = &v48[8 * v44];
                int v2 = (SISearchCtx *)v100;
                do
                {
                  *((void *)v53 - 1) = *((void *)v41 - 1);
                  v53 -= 8;
                  v41 -= 8;
                  unsigned int v51 = v53;
                }
                while (v41 != v43);
              }
              uint64_t v42 = v52;
              __p = v51;
              uint64_t v113 = &v48[8 * v50];
              if (v43) {
                operator delete(v43);
              }
            }
            else
            {
              *(void *)uint64_t v112 = v39;
              uint64_t v42 = v41 + 8;
            }
            uint64_t v112 = v42;
            if ((unint64_t)v13 >= v19)
            {
              uint64_t v54 = v13 - v18;
              if (v13 - v18 <= -3) {
LABEL_97:
              }
                abort();
              uint64_t v55 = v54 >> 1;
              if (v19 - (unint64_t)v18 <= (v54 >> 1) + 1) {
                uint64_t v56 = v55 + 1;
              }
              else {
                uint64_t v56 = v19 - (void)v18;
              }
              if (v19 - (unint64_t)v18 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v57 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v57 = v56;
              }
              if (v57)
              {
                unsigned int v58 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(v57);
                uint64_t v60 = v59;
              }
              else
              {
                uint64_t v60 = 0;
                unsigned int v58 = 0;
              }
              uint64_t v61 = &v58[2 * v55];
              *(_WORD *)uint64_t v61 = i;
              uint64_t v62 = v61 + 2;
              if (v13 == v18)
              {
                CFArrayRef v63 = &v58[2 * v55];
              }
              else
              {
                do
                {
                  *((_WORD *)v61 - 1) = *((_WORD *)v13 - 1);
                  v61 -= 2;
                  v13 -= 2;
                  CFArrayRef v63 = v61;
                }
                while (v13 != v18);
              }
              uint64_t v64 = &v58[2 * v60];
              int v13 = v62;
              if (v18) {
                operator delete(v18);
              }
              uint64_t v18 = v63;
              unint64_t v19 = (unint64_t)v64;
            }
            else
            {
              *(_WORD *)int v13 = i;
              v13 += 2;
            }
            uint64_t v12 = *((void *)v2 + 44);
            uint64_t v16 = v18;
            uint64_t v17 = v13;
            unint64_t v14 = v19;
            uint64_t v20 = v12;
          }
          while (*(void *)(v12 + 24 * i + 24) != 1);
        }
        int v13 = v17;
        int v11 = v16;
        uint64_t v65 = v16;
      }
    }
    else
    {
      uint64_t v65 = 0;
      std::vector<oid_and_rankinfo_t>::reserve((void **)&v114, 0);
      std::vector<long long>::reserve(&__p, 0);
    }
    uint64_t v66 = __p;
    uint64_t v67 = v112 - (unsigned char *)__p;
    if (v112 != __p)
    {
      long long v98 = __p;
      int v68 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
      unint64_t v69 = setThreadIdAndInfo(-1, (long long *)sSDBExceptionCallbacks, *(void *)(*((void *)v2 + 3) + 1184), 0x40000000, v68);
      unsigned int v71 = v70;
      unint64_t v72 = v69;
      unsigned int v74 = v73;
      uint64_t v75 = *(void *)&threadData[18 * v69 + 2];
      uint64_t v76 = v75 + 320 * HIDWORD(v69);
      *(unsigned char *)(v76 + 216) = 0;
      int v96 = *(_DWORD *)(v76 + 312);
      CFArrayRef v77 = *(void (**)(void))(v76 + 224);
      if (v77) {
        v77(*(void *)(v75 + 320 * HIDWORD(v69) + 288));
      }
      unsigned int v109 = HIDWORD(v72);
      unsigned int v110 = v72;
      unsigned int v107 = v71;
      unsigned int v108 = v74;
      if (_setjmp((int *)v76))
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)stat buf = 0;
          _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
        }
        *(_DWORD *)(v76 + 312) = v96;
        CIOnThreadCleanUpReset(v107);
        dropThreadId(v110, 1, v68);
        CICleanUpReset(v110, v108);
      }
      else
      {
        int v97 = v68;
        os_unfair_lock_lock((os_unfair_lock_t)&globalCompletionsMutex);
        long long v78 = db_obj_iter_create_with_filter(*(int **)(*((void *)v2 + 3) + 1184), v67 >> 3, (uint64_t)v98, 0, 0, 0, 0, 0, 0);
        uint64_t v81 = v114;
        unint64_t v82 = 0x6DB6DB6DB6DB6DB7 * ((v115 - v114) >> 4);
        uint64_t v83 = MEMORY[0x1E4F14500];
        uint64_t v84 = 134217984;
        while (1)
        {
          unint64_t v106 = 0;
          uint64_t v85 = (uint64_t *)db_obj_iter_next((uint64_t)v78, &v106, 0, *(double *)&v84, v79, v80);
          if (!v85) {
            break;
          }
          unint64_t v86 = v106;
          if (v106 >= v82)
          {
            if (os_log_type_enabled(v83, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)stat buf = 134217984;
              *(void *)&uint8_t buf[4] = v86;
              _os_log_fault_impl(&dword_1BD672000, v83, OS_LOG_TYPE_FAULT, "db_obj_iter returned an unreasonable index %ld", buf, 0xCu);
            }
          }
          else
          {
            uint64_t v87 = *(void *)(v100 + 24);
            int v88 = &v81[112 * v106];
            long long v89 = *((_OWORD *)v88 + 4);
            v105[2] = *((_OWORD *)v88 + 3);
            v105[3] = v89;
            v105[4] = *((_OWORD *)v88 + 5);
            long long v90 = *((_OWORD *)v88 + 2);
            v105[0] = *((_OWORD *)v88 + 1);
            v105[1] = v90;
            collectCompletionsFromDBO(v100, v87, v85, v105, v88[96], (uint64_t)a2, 0, *(const char ***)(v100 + 152));
          }
        }
        db_obj_iter_release(v78);
        uint64_t v91 = *(void *)&threadData[18 * v110 + 2];
        unsigned int v92 = v109;
        uint64_t v93 = v91 + 320 * v109;
        *(_DWORD *)(v93 + 312) = v96;
        size_t v94 = *(void (**)(void))(v93 + 232);
        if (v94) {
          v94(*(void *)(v91 + 320 * v92 + 288));
        }
        dropThreadId(v110, 0, v97);
        os_unfair_lock_unlock((os_unfair_lock_t)&globalCompletionsMutex);
      }
      uint64_t v66 = v98;
      if (v102 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(log))
      {
        *(_WORD *)stat buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1BD672000, log, OS_SIGNPOST_INTERVAL_END, v103, "com_apple_spotlight_suggestions_latency", " enableTelemetry=YES ", buf, 2u);
      }
    }
    __int16 v95 = v66;
    if (v65)
    {
      operator delete(v65);
      __int16 v95 = __p;
    }
    if (v95) {
      operator delete(v95);
    }
    if (v114) {
      operator delete(v114);
    }
  }
}

void SISearchCtx::pushCompletionsWithLanguage(SISearchCtx *this, PartialQueryResults *a2)
{
  uint64_t v216 = *MEMORY[0x1E4F143B8];
  if (!*((void *)this + 44)) {
    return;
  }
  uint64_t v3 = this;
  if (_SIPerf_QueryLog(void)::onceToken != -1) {
    dispatch_once(&_SIPerf_QueryLog(void)::onceToken, &__block_literal_global_61_13218);
  }
  os_signpost_id_t v4 = _SIPerf_QueryLog(void)::sQueryLog;
  os_signpost_id_t v5 = os_signpost_id_generate((os_log_t)_SIPerf_QueryLog(void)::sQueryLog);
  unint64_t v166 = v5 - 1;
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    *(_WORD *)stat buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1BD672000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v5, "com_apple_spotlight_suggestions_latency_with_language", (const char *)&unk_1BDAB99BE, buf, 2u);
  }
  log = v4;
  uint64_t v6 = *(unsigned __int16 *)(*((void *)v3 + 44) + 4);
  makeThreadId();
  v202 = 0;
  unint64_t v201 = 0;
  v203 = 0;
  v199 = 0;
  size_t v197 = 0;
  size_t v198 = 0;
  v200 = 0;
  v195 = 0;
  size_t v196 = 0;
  uint64_t v187 = 0;
  size_t v188 = &v187;
  uint64_t v189 = 0x4002000000;
  v190 = __Block_byref_object_copy__13221;
  unint64_t v191 = __Block_byref_object_dispose__13222;
  v192 = 0;
  size_t v193 = 0;
  uint64_t v194 = 0;
  uint64_t v184 = 0;
  uint64_t v185 = 0;
  uint64_t v186 = 0;
  int v183 = 0;
  char v182 = &v183;
  uint64_t v164 = (uint64_t)v3;
  size_t v165 = a2;
  os_signpost_id_t spid = v5;
  if (v6)
  {
    uint64_t v7 = (uint64_t *)(*((void *)v3 + 44) + 24);
    uint64_t v8 = v6;
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = *v7;
      v7 += 3;
      unint64_t v11 = v9 + v10 - 1;
      unint64_t v9 = v11;
      --v8;
    }
    while (v8);
    std::vector<oid_and_rankinfo_t>::reserve(&v201, v11);
    std::vector<long long>::reserve((void **)&v198, v11);
    std::vector<int>::reserve((std::vector<int> *)(v188 + 5), v11);
    std::vector<unsigned short>::reserve(&v195, v11);
    uint64_t v12 = 0;
    uint64_t v13 = *((void *)v3 + 44);
    uint64_t v161 = v6;
    do
    {
      if (*(void *)(v13 + 24 * v12 + 24) != 1)
      {
        uint64_t v14 = v13;
        do
        {
          pqpop_oid_and_rankinfo_t((uint64_t)buf, (void *)(v14 + 24 * v12 + 8));
          unsigned __int16 v15 = v202;
          uint64_t v16 = v202;
          if (v202 >= (_OWORD *)v203)
          {
            uint64_t v18 = v201;
            uint64_t v19 = 0x6DB6DB6DB6DB6DB7 * (((char *)v202 - (unsigned char *)v201) >> 4);
            unint64_t v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) > 0x249249249249249) {
              goto LABEL_174;
            }
            if (0xDB6DB6DB6DB6DB6ELL * ((v203 - (unsigned char *)v201) >> 4) > v20) {
              unint64_t v20 = 0xDB6DB6DB6DB6DB6ELL * ((v203 - (unsigned char *)v201) >> 4);
            }
            if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v203 - (unsigned char *)v201) >> 4)) >= 0x124924924924924) {
              unint64_t v21 = 0x249249249249249;
            }
            else {
              unint64_t v21 = v20;
            }
            if (v21)
            {
              uint64_t v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<oid_and_rankinfo_t>>(v21);
              uint64_t v24 = v23;
            }
            else
            {
              uint64_t v24 = 0;
              uint64_t v22 = 0;
            }
            uint64_t v25 = &v22[112 * v19];
            unint64_t v26 = v25;
            *((_OWORD *)v25 + 3) = v212;
            *((_OWORD *)v25 + 4) = v213;
            *((_OWORD *)v25 + 5) = v214;
            *((_OWORD *)v25 + 6) = v215;
            *(_OWORD *)uint64_t v25 = *(_OWORD *)buf;
            *((_OWORD *)v25 + 1) = v210;
            *((_OWORD *)v25 + 2) = v211;
            if (v15 != v18)
            {
              unint64_t v27 = &v22[112 * v19];
              do
              {
                long long v28 = *(v16 - 7);
                long long v29 = *(v16 - 5);
                *((_OWORD *)v27 - 6) = *(v16 - 6);
                *((_OWORD *)v27 - 5) = v29;
                *((_OWORD *)v27 - 7) = v28;
                long long v30 = *(v16 - 4);
                long long v31 = *(v16 - 3);
                long long v32 = *(v16 - 1);
                *((_OWORD *)v27 - 2) = *(v16 - 2);
                *((_OWORD *)v27 - 1) = v32;
                *((_OWORD *)v27 - 4) = v30;
                *((_OWORD *)v27 - 3) = v31;
                v16 -= 7;
                unint64_t v26 = v27 - 112;
                v27 -= 112;
              }
              while (v16 != v18);
            }
            uint64_t v33 = v26;
            long long v34 = v18;
            uint64_t v17 = v25 + 112;
            unint64_t v201 = v33;
            v203 = &v22[112 * v24];
            if (v34) {
              operator delete(v34);
            }
          }
          else
          {
            v202[3] = v212;
            v16[4] = v213;
            v16[5] = v214;
            v16[6] = v215;
            *uint64_t v16 = *(_OWORD *)buf;
            v16[1] = v210;
            v16[2] = v211;
            uint64_t v17 = v15 + 7;
          }
          v202 = v17;
          uint64_t v35 = *((void *)v17 - 14);
          long long v36 = v199;
          long long v37 = v199;
          if (v199 >= v200)
          {
            uint64_t v39 = v198;
            uint64_t v40 = (v199 - v198) >> 3;
            unint64_t v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 61) {
              goto LABEL_174;
            }
            uint64_t v42 = v200 - v198;
            if ((v200 - v198) >> 2 > v41) {
              unint64_t v41 = v42 >> 2;
            }
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v43 = v41;
            }
            if (v43)
            {
              uint64_t v44 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v43);
              uint64_t v46 = v45;
            }
            else
            {
              uint64_t v46 = 0;
              uint64_t v44 = 0;
            }
            unint64_t v47 = &v44[8 * v40];
            *(void *)unint64_t v47 = v35;
            __n128 v48 = v47 + 8;
            if (v36 == v39)
            {
              uint64_t v3 = (SISearchCtx *)v164;
            }
            else
            {
              uint64_t v49 = &v44[8 * v40];
              uint64_t v3 = (SISearchCtx *)v164;
              do
              {
                *((void *)v49 - 1) = *((void *)v37 - 1);
                v49 -= 8;
                v37 -= 8;
                unint64_t v47 = v49;
              }
              while (v37 != v39);
            }
            uint64_t v50 = v47;
            unsigned int v51 = v39;
            long long v38 = v48;
            size_t v198 = v50;
            v200 = &v44[8 * v46];
            if (v51) {
              operator delete(v51);
            }
          }
          else
          {
            *(void *)v199 = v35;
            long long v38 = v37 + 8;
          }
          v199 = v38;
          unsigned int v52 = v196;
          int v53 = v196;
          if (v196 >= v197)
          {
            uint64_t v55 = (char *)v195;
            uint64_t v56 = v196 - (unsigned char *)v195;
            if (v196 - (unsigned char *)v195 <= -3) {
              goto LABEL_174;
            }
            uint64_t v57 = v56 >> 1;
            if (v197 - (unsigned char *)v195 <= (unint64_t)((v56 >> 1) + 1)) {
              uint64_t v58 = v57 + 1;
            }
            else {
              uint64_t v58 = v197 - (unsigned char *)v195;
            }
            if ((unint64_t)(v197 - (unsigned char *)v195) >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v59 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v59 = v58;
            }
            if (v59)
            {
              uint64_t v60 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(v59);
              uint64_t v62 = v61;
            }
            else
            {
              uint64_t v62 = 0;
              uint64_t v60 = 0;
            }
            CFArrayRef v63 = &v60[2 * v57];
            *(_WORD *)CFArrayRef v63 = v12;
            uint64_t v64 = v63 + 2;
            if (v52 == v55)
            {
              uint64_t v3 = (SISearchCtx *)v164;
            }
            else
            {
              uint64_t v65 = &v60[2 * v57];
              uint64_t v3 = (SISearchCtx *)v164;
              do
              {
                *((_WORD *)v65 - 1) = *((_WORD *)v53 - 1);
                v65 -= 2;
                v53 -= 2;
                CFArrayRef v63 = v65;
              }
              while (v53 != v55);
            }
            uint64_t v66 = v63;
            uint64_t v67 = v55;
            uint64_t v54 = v64;
            v195 = v66;
            size_t v197 = &v60[2 * v62];
            if (v67) {
              operator delete(v67);
            }
          }
          else
          {
            *(_WORD *)size_t v196 = v12;
            uint64_t v54 = v53 + 2;
          }
          size_t v196 = v54;
          int v68 = v188;
          unsigned int v70 = (_DWORD *)v188[6];
          unint64_t v69 = v188[7];
          unsigned int v71 = (char *)v70;
          if ((unint64_t)v70 >= v69)
          {
            uint64_t v73 = v188[5];
            uint64_t v74 = ((uint64_t)v70 - v73) >> 2;
            unint64_t v75 = v74 + 1;
            if ((unint64_t)(v74 + 1) >> 62) {
              goto LABEL_174;
            }
            uint64_t v76 = v69 - v73;
            if (v76 >> 1 > v75) {
              unint64_t v75 = v76 >> 1;
            }
            if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v77 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v77 = v75;
            }
            if (v77)
            {
              long long v78 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(v77);
              double v79 = (char *)v68[5];
              __n128 v80 = (char *)v68[6];
              uint64_t v82 = v81;
            }
            else
            {
              double v79 = (char *)v188[5];
              __n128 v80 = v71;
              uint64_t v82 = 0;
              long long v78 = 0;
            }
            uint64_t v83 = v80;
            uint64_t v84 = &v78[4 * v74];
            *(_DWORD *)uint64_t v84 = -1;
            uint64_t v85 = v84 + 4;
            if (v83 != v79)
            {
              unint64_t v86 = &v78[4 * v74];
              do
              {
                *((_DWORD *)v86 - 1) = *((_DWORD *)v83 - 1);
                v86 -= 4;
                v83 -= 4;
                uint64_t v84 = v86;
              }
              while (v83 != v79);
            }
            unint64_t v72 = v85;
            v68[5] = (uint64_t)v84;
            v68[6] = (uint64_t)v85;
            v68[7] = (uint64_t)&v78[4 * v82];
            if (v79) {
              operator delete(v79);
            }
          }
          else
          {
            _DWORD *v70 = -1;
            unint64_t v72 = v70 + 1;
          }
          v68[6] = (uint64_t)v72;
          uint64_t v13 = *((void *)v3 + 44);
          uint64_t v14 = v13;
        }
        while (*(void *)(v13 + 24 * v12 + 24) != 1);
      }
      ++v12;
    }
    while (v12 != v161);
  }
  else
  {
    std::vector<oid_and_rankinfo_t>::reserve(&v201, 0);
    std::vector<long long>::reserve((void **)&v198, 0);
    std::vector<int>::reserve((std::vector<int> *)(v188 + 5), 0);
    std::vector<unsigned short>::reserve(&v195, 0);
  }
  uint64_t v87 = v198;
  uint64_t v88 = v199 - v198;
  if (v199 == v198) {
    goto LABEL_162;
  }
  int v89 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v90 = setThreadIdAndInfo(-1, (long long *)sSDBExceptionCallbacks, *(void *)(*((void *)v3 + 3) + 1184), 0x40000000, v89);
  unsigned int v92 = v91;
  unint64_t v93 = v90;
  unsigned int v95 = v94;
  uint64_t v96 = *(void *)&threadData[18 * v90 + 2];
  uint64_t v97 = v96 + 320 * HIDWORD(v90);
  *(unsigned char *)(v97 + 216) = 0;
  int v162 = *(_DWORD *)(v97 + 312);
  long long v98 = *(void (**)(void))(v97 + 224);
  if (v98) {
    v98(*(void *)(v96 + 320 * HIDWORD(v90) + 288));
  }
  int v163 = v89;
  unsigned int v180 = HIDWORD(v93);
  unsigned int v181 = v93;
  unsigned int v179 = v95;
  unsigned int v178 = v92;
  if (_setjmp((int *)v97))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)stat buf = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
    }
    *(_DWORD *)(v97 + 312) = v162;
    CIOnThreadCleanUpReset(v178);
    dropThreadId(v181, 1, v89);
    CICleanUpReset(v181, v179);
    goto LABEL_162;
  }
  uint64_t v99 = v164;
  unint64_t v100 = v88 >> 3;
  uint64_t v101 = db_obj_iter_create_with_filter(*(int **)(*(void *)(v164 + 24) + 1184), v88 >> 3, (uint64_t)v87, 0, 0, 0, 0, 0, 0);
  memset(buf, 0, sizeof(buf));
  *(void *)&long long v210 = 0;
  uint64_t v102 = *(void *)(v164 + 24);
  if ((unint64_t)v88 < 0xA1)
  {
    unint64_t v103 = 1;
  }
  else if ((*(unsigned char *)(v102 + 6578) & 4) != 0)
  {
    unint64_t v103 = 3;
  }
  else
  {
    unint64_t v103 = 1;
  }
  uint64_t v104 = (uint64_t)v165;
  PartialQueryResults::completionAttributeIdVector((uint64_t)v165, *(int **)(v102 + 1184));
  db_obj_iter_create_subiterators((uint64_t)v101, v103, buf, v105, v106, v107);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  void block[2] = ___ZN11SISearchCtx27pushCompletionsWithLanguageER19PartialQueryResults_block_invoke;
  block[3] = &unk_1F1817718;
  void block[5] = v164;
  block[6] = buf;
  size_t v173 = 0;
  size_t v174 = 0;
  __p = 0;
  uint64_t v160 = (char *)v201;
  int64_t v108 = (char *)v202 - (unsigned char *)v201;
  if (v202 != v201)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v108 >> 4)) > 0x249249249249249) {
      goto LABEL_174;
    }
    __p = std::__allocate_at_least[abi:nn180100]<std::allocator<oid_and_rankinfo_t>>(0x6DB6DB6DB6DB6DB7 * (v108 >> 4));
    size_t v174 = (char *)__p + 112 * v109;
    memmove(__p, v160, v108);
    size_t v173 = (char *)__p + 16 * (v108 >> 4);
    uint64_t v99 = v164;
    uint64_t v104 = (uint64_t)v165;
  }
  block[4] = &v187;
  uint64_t v175 = v104;
  size_t v176 = &v182;
  long long v177 = &v184;
  unsigned int v110 = 0;
  dispatch_apply(v103, 0, block);
  db_obj_iter_release(v101);
  SILanguageModelShrinkLanguageGuessers();
  if (v185 == v184)
  {
    uint64_t v112 = 0;
    goto LABEL_105;
  }
  unint64_t v111 = 0xAAAAAAAAAAAAAAABLL * ((v185 - v184) >> 3);
  if (v111 >> 62) {
LABEL_174:
  }
    abort();
  unsigned int v110 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(0xAAAAAAAAAAAAAAABLL * ((v185 - v184) >> 3));
  bzero(v110, 4 * v111);
  uint64_t v112 = &v110[4 * v111];
  uint64_t v104 = (uint64_t)v165;
LABEL_105:
  long long v114 = (unsigned int *)v188[5];
  for (uint64_t i = (unsigned int *)v188[6]; v114 != i; ++v114)
  {
    uint64_t v115 = *v114;
    if ((v115 & 0x80000000) == 0) {
      ++*(_DWORD *)&v110[4 * v115];
    }
  }
  unint64_t v116 = v112 - v110;
  if ((int)(v116 >> 2) < 1)
  {
    int v127 = -1;
    int v126 = -1;
    LODWORD(v125) = -1;
  }
  else
  {
    uint64_t v117 = (v116 >> 2);
    uint64_t v118 = 0xFFFFFFFFLL;
    uint64_t v119 = 0;
    uint64_t v120 = 0xFFFFFFFFLL;
    uint64_t v121 = 0xFFFFFFFFLL;
    do
    {
      uint64_t v122 = v118;
      if (v121 == -1 || (uint64_t v123 = v121, *(_DWORD *)&v110[4 * v119] > *(_DWORD *)&v110[4 * (int)v121])) {
        uint64_t v123 = v119;
      }
      if (v120 == -1 || *(_DWORD *)&v110[4 * (int)v123] > *(_DWORD *)&v110[4 * (int)v120])
      {
        uint64_t v121 = v120;
        uint64_t v120 = v123;
      }
      else
      {
        uint64_t v121 = v123;
      }
      if (v122 == -1 || *(_DWORD *)&v110[4 * (int)v120] > *(_DWORD *)&v110[4 * (int)v122])
      {
        uint64_t v124 = v122;
      }
      else
      {
        uint64_t v124 = v120;
        uint64_t v120 = v122;
      }
      uint64_t v125 = v120;
      int v126 = v124;
      ++v119;
      int v127 = v121;
      uint64_t v120 = v124;
      uint64_t v118 = v125;
    }
    while (v117 != v119);
  }
  int v158 = v126;
  int v159 = v125;
  int v128 = db_obj_iter_create_with_filter(*(int **)(*(void *)(v99 + 24) + 1184), v100, (uint64_t)v87, 0, 0, 0, 0, 0, 0);
  os_unfair_lock_lock((os_unfair_lock_t)&globalCompletionsMutex);
  unint64_t v130 = 0x6DB6DB6DB6DB6DB7 * (v108 >> 4);
  uint64_t v131 = 134217984;
  uint64_t v132 = 134218240;
  size_t v133 = MEMORY[0x1E4F14500];
  while (1)
  {
    unint64_t v170 = 0;
    v208[0] = 0;
    v208[1] = 0;
    int v134 = (uint64_t *)db_obj_iter_next((uint64_t)v128, &v170, 0, *(double *)&v132, *(double *)&v131, v129);
    if (!v134) {
      break;
    }
    unint64_t v135 = v170;
    if (v170 >= v130)
    {
      if (os_log_type_enabled(v133, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)v204 = 134217984;
        unint64_t v205 = v135;
        _os_log_fault_impl(&dword_1BD672000, v133, OS_LOG_TYPE_FAULT, "db_obj_iter returned an unreasonable index %ld", v204, 0xCu);
      }
    }
    else
    {
      int v136 = *(_DWORD *)(v188[5] + 4 * v170);
      if (v136 == -1)
      {
        uint64_t v139 = *(void *)(v164 + 152);
        if (v139)
        {
LABEL_142:
          size_t v140 = *(const char **)v139;
LABEL_143:
          v208[0] = v140;
          uint64_t v141 = *(void *)(v164 + 24);
          unint64_t v142 = &v160[112 * v170];
          long long v143 = *((_OWORD *)v142 + 4);
          v169[2] = *((_OWORD *)v142 + 3);
          v169[3] = v143;
          v169[4] = *((_OWORD *)v142 + 5);
          long long v144 = *((_OWORD *)v142 + 2);
          v169[0] = *((_OWORD *)v142 + 1);
          v169[1] = v144;
          collectCompletionsFromDBO(v164, v141, v134, v169, v142[96], v104, v208, *(const char ***)(v164 + 152));
        }
        else if (dword_1E9FC90A8 >= 5)
        {
          int v156 = *__error();
          unint64_t v150 = _SILogForLogForCategory(1);
          if (os_log_type_enabled(v150, OS_LOG_TYPE_DEFAULT))
          {
            unint64_t v151 = *(void *)&v87[8 * v135];
            *(_DWORD *)v204 = 134217984;
            unint64_t v205 = v151;
            _os_log_impl(&dword_1BD672000, v150, OS_LOG_TYPE_DEFAULT, "completions: language is -1 and _languages is null for oid %ld; skipping",
              v204,
              0xCu);
          }
          unint64_t v148 = __error();
          int v149 = v156;
LABEL_152:
          int *v148 = v149;
          uint64_t v104 = (uint64_t)v165;
        }
      }
      else
      {
        if (v136 == v159 || v136 == v158 || v136 == v127)
        {
          uint64_t v139 = v184 + 24 * v136;
          size_t v140 = (const char *)v139;
          if ((*(char *)(v139 + 23) & 0x80000000) == 0) {
            goto LABEL_143;
          }
          goto LABEL_142;
        }
        if (dword_1E9FC90A8 >= 5)
        {
          int v157 = *__error();
          char v145 = _SILogForLogForCategory(1);
          if (os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT))
          {
            unint64_t v146 = *(void *)&v87[8 * v135];
            int v147 = *(_DWORD *)(v188[5] + 4 * v135);
            *(_DWORD *)v204 = 134218240;
            unint64_t v205 = v146;
            __int16 v206 = 1024;
            int v207 = v147;
            _os_log_impl(&dword_1BD672000, v145, OS_LOG_TYPE_DEFAULT, "completions: ignoring oid %ld with bad language %d", v204, 0x12u);
          }
          unint64_t v148 = __error();
          int v149 = v157;
          goto LABEL_152;
        }
      }
    }
  }
  uint64_t v152 = *(void *)&threadData[18 * v181 + 2];
  unsigned int v153 = v180;
  uint64_t v154 = v152 + 320 * v180;
  *(_DWORD *)(v154 + 312) = v162;
  size_t v155 = *(void (**)(void))(v154 + 232);
  if (v155) {
    v155(*(void *)(v152 + 320 * v153 + 288));
  }
  dropThreadId(v181, 0, v163);
  if (v110) {
    operator delete(v110);
  }
  if (__p)
  {
    size_t v173 = (char *)__p;
    operator delete(__p);
  }
  if (v128) {
    db_obj_iter_release(v128);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&globalCompletionsMutex);
LABEL_162:
  if (v166 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(log))
  {
    *(_WORD *)stat buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1BD672000, log, OS_SIGNPOST_INTERVAL_END, spid, "com_apple_spotlight_suggestions_latency_with_language", " enableTelemetry=YES ", buf, 2u);
  }
  *(void *)stat buf = &v184;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
  _Block_object_dispose(&v187, 8);
  if (v192)
  {
    size_t v193 = v192;
    operator delete(v192);
  }
  if (v195) {
    operator delete(v195);
  }
  if (v87) {
    operator delete(v87);
  }
  if (v201) {
    operator delete(v201);
  }
}

void lowWaterRoutine(uint64_t a1, uint64_t a2)
{
  if (dword_1E9FC90A8 >= 5)
  {
    int v6 = *__error();
    uint64_t v7 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v11 = 0;
      _os_log_impl(&dword_1BD672000, v7, OS_LOG_TYPE_DEFAULT, "Low water routine triggered", v11, 2u);
    }
    *__error() = v6;
    if (a2) {
      goto LABEL_3;
    }
  }
  else if (a2)
  {
LABEL_3:
    si_querypipe_remove_process(*(void *)(*(void *)a1 + 104), *(void *)(*(void *)a1 + 8), 0, 1);
    os_signpost_id_t v4 = (void *)a1;
    uint64_t v5 = a2;
    goto LABEL_4;
  }
  *(CFAbsoluteTime *)(a1 + 8) = CFAbsoluteTimeGetCurrent();
  *(void *)(a1 + 16) = "lowWaterRoutine";
  if (si_querypipe_copy_jobid(*(void *)(*(void *)a1 + 104)))
  {
    int priority = query_priority(*(void **)(*(void *)a1 + 8));
    uint64_t v9 = *(void *)(*(void *)a1 + 24);
    if (v9)
    {
      uint64_t v10 = *(void *)(v9 + 8 * (priority + 13) + 1008);
      if (v10)
      {
        si_enqueue_work_with_qos(v10, 8 * priority + 9, (uint64_t)resumeQuery, a1);
        return;
      }
    }
    si_querypipe_remove_process(*(void *)(*(void *)a1 + 104), *(void *)(*(void *)a1 + 8), 0, 0);
    os_signpost_id_t v4 = (void *)a1;
    uint64_t v5 = 0;
  }
  else
  {
    os_signpost_id_t v4 = (void *)a1;
    uint64_t v5 = 1;
  }
LABEL_4:
  search_ctx_destroy(v4, v5);
}

void resumeQuery(void *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (dword_1E9FC90A8 >= 5)
  {
    int v6 = *__error();
    uint64_t v7 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v14) = 0;
      _os_log_impl(&dword_1BD672000, v7, OS_LOG_TYPE_DEFAULT, "resumeQuery triggered", (uint8_t *)&v14, 2u);
    }
    *__error() = v6;
    if (a2) {
      goto LABEL_3;
    }
  }
  else if (a2)
  {
LABEL_3:
    si_querypipe_remove_process(*(void *)(*a1 + 104), *(void *)(*a1 + 8), 0, 1);
    os_signpost_id_t v4 = a1;
    uint64_t v5 = a2;
LABEL_4:
    search_ctx_destroy(v4, v5);
    return;
  }
  *((CFAbsoluteTime *)a1 + 1) = CFAbsoluteTimeGetCurrent();
  a1[2] = "resumeQuery";
  uint64_t v8 = si_querypipe_copy_jobid(*(void *)(*a1 + 104));
  if (!v8)
  {
    os_signpost_id_t v4 = a1;
    uint64_t v5 = 1;
    goto LABEL_4;
  }
  uint64_t v9 = (uint64_t)v8;
  uint64_t v10 = *(void *)(*a1 + 24);
  unint64_t v11 = *(NSObject **)(v10 + 8 * query_priority(*(void **)(*a1 + 8)) + 832);
  if (*(NSObject **)(*(void *)(*a1 + 104) + 16) == v11)
  {
    int v12 = *__error();
    uint64_t v13 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      unsigned __int16 v15 = "resumeQuery";
      __int16 v16 = 1024;
      int v17 = 160;
      _os_log_error_impl(&dword_1BD672000, v13, OS_LOG_TYPE_ERROR, "%s:%d: resumeQuery attempted to wait on already held semaphore", (uint8_t *)&v14, 0x12u);
    }
    *__error() = v12;
  }
  else
  {
    dispatch_semaphore_wait(v11, 0xFFFFFFFFFFFFFFFFLL);
    si_querypipe_set_semaphore(*(void *)(*a1 + 104), v11);
  }
  (*(void (**)(void, void (*)(double *, uint64_t), void *, uint64_t))(*(void *)*a1 + 24))(*a1, executeSearchCtx2, a1, v9);
  si_release_qid(v9);
}

__n128 __Block_byref_object_copy__13221(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__13222(uint64_t a1)
{
  int v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void std::vector<oid_and_rankinfo_t>::reserve(void **a1, unint64_t a2)
{
  if (0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) < a2)
  {
    if (a2 >= 0x24924924924924ALL) {
      abort();
    }
    uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 112;
    os_signpost_id_t v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<oid_and_rankinfo_t>>(a2);
    uint64_t v5 = &v4[112 * v3];
    uint64_t v7 = &v4[112 * v6];
    uint64_t v9 = (char *)*a1;
    uint64_t v8 = (char *)a1[1];
    uint64_t v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        long long v11 = *((_OWORD *)v8 - 7);
        long long v12 = *((_OWORD *)v8 - 5);
        *((_OWORD *)v10 - 6) = *((_OWORD *)v8 - 6);
        *((_OWORD *)v10 - 5) = v12;
        *((_OWORD *)v10 - 7) = v11;
        long long v13 = *((_OWORD *)v8 - 4);
        long long v14 = *((_OWORD *)v8 - 3);
        long long v15 = *((_OWORD *)v8 - 1);
        *((_OWORD *)v10 - 2) = *((_OWORD *)v8 - 2);
        *((_OWORD *)v10 - 1) = v15;
        *((_OWORD *)v10 - 4) = v13;
        *((_OWORD *)v10 - 3) = v14;
        v10 -= 112;
        v8 -= 112;
      }
      while (v8 != v9);
      uint64_t v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void std::vector<int>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  if (__n > this->__end_cap_.__value_ - this->__begin_)
  {
    if (__n >> 62) {
      abort();
    }
    int64_t v3 = (char *)this->__end_ - (char *)this->__begin_;
    os_signpost_id_t v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(__n);
    uint64_t v5 = (int *)&v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v7 = (int *)&v4[4 * v6];
    std::vector<int>::pointer begin = this->__begin_;
    end = this->__end_;
    uint64_t v10 = v5;
    if (end != this->__begin_)
    {
      uint64_t v10 = v5;
      do
      {
        int v11 = *--end;
        *--uint64_t v10 = v11;
      }
      while (end != begin);
    }
    this->__begin_ = v10;
    this->__end_ = v5;
    this->__end_cap_.__value_ = v7;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void std::vector<unsigned short>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 1)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      abort();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    os_signpost_id_t v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(a2);
    uint64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFFELL];
    uint64_t v7 = &v4[2 * v6];
    uint64_t v8 = (char *)*a1;
    uint64_t v9 = (char *)a1[1];
    uint64_t v10 = v5;
    if (v9 != *a1)
    {
      uint64_t v10 = v5;
      do
      {
        __int16 v11 = *((_WORD *)v9 - 1);
        v9 -= 2;
        *((_WORD *)v10 - 1) = v11;
        v10 -= 2;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t pqpop_oid_and_rankinfo_t(uint64_t result, void *a2)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a2[2];
  if (v2 != 1)
  {
    uint64_t v3 = *a2;
    long long v4 = *(_OWORD *)(*a2 + 192);
    *(_OWORD *)(result + 64) = *(_OWORD *)(*a2 + 176);
    *(_OWORD *)(result + 80) = v4;
    *(_OWORD *)(result + 96) = *(_OWORD *)(v3 + 208);
    long long v5 = *(_OWORD *)(v3 + 128);
    *(_OWORD *)__n128 result = *(_OWORD *)(v3 + 112);
    *(_OWORD *)(result + 16) = v5;
    long long v6 = *(_OWORD *)(v3 + 160);
    *(_OWORD *)(result + 32) = *(_OWORD *)(v3 + 144);
    *(_OWORD *)(result + 48) = v6;
    uint64_t v7 = v3 + 112 * v2;
    uint64_t v8 = *(void *)(v7 - 96);
    uint64_t v9 = *(void *)(v7 - 88);
    long long v71 = *(_OWORD *)(v7 - 80);
    long long v72 = *(_OWORD *)(v7 - 64);
    unsigned int v10 = *(_DWORD *)(v7 - 48);
    float v11 = *(float *)(v7 - 44);
    int v12 = *(_DWORD *)(v7 - 40);
    float v13 = *(float *)(v7 - 36);
    int v14 = *(_DWORD *)(v7 - 32);
    char v15 = *(unsigned char *)(v7 - 28);
    char v16 = *(unsigned char *)(v7 - 27);
    uint64_t v17 = *(void *)(v7 - 26);
    __int16 v18 = *(_WORD *)(v7 - 18);
    long long v19 = *(_OWORD *)(v7 - 16);
    long long v80 = *(_OWORD *)(v7 - 112);
    long long v81 = v19;
    *(_OWORD *)(v3 + 112) = *(_OWORD *)(v7 - 112);
    *(_OWORD *)(v3 + 144) = v71;
    *(_OWORD *)(v3 + 160) = v72;
    long long v20 = v81;
    *(_OWORD *)(v3 + 208) = v81;
    char v70 = v15;
    __int16 v83 = v18;
    uint64_t v82 = v17;
    *(void *)(v3 + 128) = v8;
    *(void *)(v3 + 136) = v9;
    *(_DWORD *)(v3 + 176) = v10;
    *(float *)(v3 + 180) = v11;
    *(_DWORD *)(v3 + 184) = v12;
    *(float *)(v3 + 188) = v13;
    *(unsigned char *)(v3 + 196) = v15;
    *(_DWORD *)(v3 + 192) = v14;
    *(unsigned char *)(v3 + 197) = v16;
    *(_WORD *)(v3 + 206) = v18;
    uint64_t v21 = v17;
    *(void *)(v3 + 198) = v17;
    uint64_t v22 = a2[1];
    uint64_t v23 = a2[2];
    a2[2] = v23 - 1;
    uint64_t v78 = v21;
    __int16 v79 = v18;
    uint64_t v24 = v22 >> 1;
    uint64_t v25 = 3;
    long long v77 = v20;
    uint64_t v26 = 2;
    __n128 result = 1;
    long long v88 = v80;
    while (1)
    {
      uint64_t v27 = *a2;
      long long v28 = (long long *)(*a2 + 112 * v26);
      uint64_t v29 = *((void *)v28 + 2);
      uint64_t v30 = *((void *)v28 + 3);
      unsigned int v31 = *((_DWORD *)v28 + 16);
      float v32 = *((float *)v28 + 17);
      int v33 = *((_DWORD *)v28 + 18);
      float v34 = *((float *)v28 + 19);
      int v35 = *((unsigned __int8 *)v28 + 85);
      uint64_t v36 = *a2 + 112 * v25;
      long long v87 = *(_OWORD *)v36;
      uint64_t v37 = *(void *)(v36 + 16);
      uint64_t v38 = *(void *)(v36 + 24);
      long long v39 = *(_OWORD *)(v36 + 48);
      long long v75 = *(_OWORD *)(v36 + 32);
      long long v76 = v39;
      unsigned int v40 = *(_DWORD *)(v36 + 64);
      float v41 = *(float *)(v36 + 68);
      int v42 = *(_DWORD *)(v36 + 72);
      float v43 = *(float *)(v36 + 76);
      int v73 = *(_DWORD *)(v36 + 80);
      char v74 = *(unsigned char *)(v36 + 84);
      int v44 = *(unsigned __int8 *)(v36 + 85);
      uint64_t v45 = *(void *)(v36 + 86);
      __int16 v86 = *(_WORD *)(v36 + 94);
      uint64_t v85 = v45;
      long long v84 = *(_OWORD *)(v36 + 96);
      if (v25 >= v23)
      {
        long long v87 = MAX_OIDINFO;
        long long v75 = xmmword_1BDA884C0;
        long long v76 = unk_1BDA884D0;
        int v73 = 0;
        char v74 = 0;
        uint64_t v85 = 0;
        __int16 v86 = 0;
        long long v84 = 0uLL;
        if (v26 >= v23) {
          return result;
        }
        unsigned int v40 = 0;
        int v42 = 0;
        int v44 = 0;
        uint64_t v37 = -1;
        float v41 = 0.0;
        float v43 = 3.4028e38;
        uint64_t v38 = -1;
        if (!v35)
        {
LABEL_12:
          if (__PAIR128__(v30, v29) < __PAIR128__(v9, v8)) {
            goto LABEL_21;
          }
          if (v30 != v9 || v29 != v8)
          {
LABEL_44:
            if (!v44)
            {
              if (__PAIR128__(v38, v37) >= __PAIR128__(v9, v8))
              {
                BOOL v63 = v38 == v9 && v37 == v8;
                if (!v63 || v41 >= v11 && (v41 != v11 || v40 <= v10))
                {
LABEL_61:
                  _X8 = v27 + 224 * result;
                  __asm { PRFM            #1, [X8] }
                  return result;
                }
                LOBYTE(v35) = 0;
                uint64_t v50 = &v84;
                uint64_t v49 = &v85;
                __n128 v48 = &v73;
                unint64_t v47 = &v75;
                long long v28 = &v87;
                float v34 = v43;
                int v33 = v42;
                float v32 = v41;
                unsigned int v31 = v40;
                uint64_t v29 = v8;
                uint64_t v30 = v9;
                goto LABEL_31;
              }
              goto LABEL_29;
            }
            if (v43 >= v13 && (v43 != v13 || v41 >= v11 && (v41 != v11 || v40 <= v10))) {
              goto LABEL_61;
            }
            goto LABEL_27;
          }
          goto LABEL_18;
        }
      }
      else if (!v35)
      {
        goto LABEL_12;
      }
      if (v34 < v13) {
        goto LABEL_21;
      }
      if (v34 != v13) {
        goto LABEL_44;
      }
LABEL_18:
      if (v32 >= v11 && (v32 != v11 || v31 <= v10)) {
        goto LABEL_44;
      }
LABEL_21:
      unint64_t v47 = v28 + 2;
      __n128 v48 = (int *)(v28 + 5);
      uint64_t v49 = (uint64_t *)((char *)v28 + 86);
      uint64_t v50 = v28 + 6;
      if (!v44)
      {
        if (__PAIR128__(v38, v37) >= __PAIR128__(v30, v29))
        {
          BOOL v62 = v38 == v30 && v37 == v29;
          if (!v62 || v41 >= v32 && (v41 != v32 || v40 <= v31)) {
            goto LABEL_32;
          }
          LOBYTE(v35) = 0;
          uint64_t v50 = &v84;
          uint64_t v49 = &v85;
          __n128 v48 = &v73;
          unint64_t v47 = &v75;
          long long v28 = &v87;
          float v34 = v43;
          int v33 = v42;
          float v32 = v41;
          unsigned int v31 = v40;
          goto LABEL_31;
        }
LABEL_29:
        LOBYTE(v35) = 0;
        uint64_t v50 = &v84;
        uint64_t v49 = &v85;
        __n128 v48 = &v73;
        unint64_t v47 = &v75;
        long long v28 = &v87;
        goto LABEL_30;
      }
      if (v43 >= v34 && (v43 != v34 || v41 >= v32 && (v41 != v32 || v40 <= v31))) {
        goto LABEL_32;
      }
LABEL_27:
      uint64_t v50 = &v84;
      uint64_t v49 = &v85;
      __n128 v48 = &v73;
      unint64_t v47 = &v75;
      long long v28 = &v87;
      LOBYTE(v35) = v44;
LABEL_30:
      float v34 = v43;
      int v33 = v42;
      float v32 = v41;
      unsigned int v31 = v40;
      uint64_t v29 = v37;
      uint64_t v30 = v38;
LABEL_31:
      uint64_t v26 = v25;
LABEL_32:
      long long v80 = *v28;
      long long v68 = *v47;
      long long v69 = v47[1];
      int v66 = *v48;
      char v67 = *((unsigned char *)v48 + 4);
      uint64_t v78 = *v49;
      __int16 v79 = *((_WORD *)v49 + 4);
      long long v77 = *v50;
      _X3 = v27 + 224 * v26;
      __asm { PRFM            #1, [X3] }
      if (v26 != result)
      {
        long long v56 = v88;
        uint64_t v57 = v27 + 112 * v26;
        *(_OWORD *)uint64_t v57 = v88;
        *(void *)(v57 + 16) = v8;
        *(void *)(v57 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v9;
        *(_OWORD *)(v57 + 32) = v71;
        *(_OWORD *)(v57 + 48) = v72;
        *(_DWORD *)(v57 + 64) = v10;
        *(float *)(v57 + 68) = v11;
        *(_DWORD *)(v57 + 72) = v12;
        *(float *)(v57 + 76) = v13;
        *(_DWORD *)(v57 + 80) = v14;
        *(unsigned char *)(v57 + 84) = v70;
        *(unsigned char *)(v57 + 85) = v16;
        *(_WORD *)(v57 + 94) = v83;
        uint64_t v58 = v82;
        *(void *)(v57 + 86) = v82;
        *(_OWORD *)(v57 + 96) = v81;
        uint64_t v59 = *a2 + 112 * result;
        long long v60 = v81;
        *(_OWORD *)uint64_t v59 = v80;
        *(_OWORD *)(v59 + 32) = v68;
        *(_OWORD *)(v59 + 48) = v69;
        *(float *)(v59 + 68) = v32;
        *(float *)(v59 + 76) = v34;
        *(_OWORD *)(v59 + 96) = v77;
        long long v80 = v56;
        __n128 result = v26;
        uint64_t v25 = (2 * v26) | 1;
        *(void *)(v59 + 16) = v29;
        *(void *)(v59 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v30;
        *(_DWORD *)(v59 + 64) = v31;
        *(_DWORD *)(v59 + 72) = v33;
        *(unsigned char *)(v59 + 84) = v67;
        *(_DWORD *)(v59 + 80) = v66;
        *(unsigned char *)(v59 + 85) = v35;
        *(_WORD *)(v59 + 94) = v79;
        *(void *)(v59 + 86) = v78;
        __int16 v79 = v83;
        uint64_t v78 = v58;
        long long v77 = v60;
        BOOL v61 = v26 < v24;
        v26 *= 2;
        if (v61) {
          continue;
        }
      }
      return result;
    }
  }
  *(_OWORD *)(result + 64) = xmmword_1BDA88470;
  *(_OWORD *)(result + 80) = unk_1BDA88480;
  *(_OWORD *)(result + 96) = xmmword_1BDA88490;
  *(_OWORD *)__n128 result = ZERO_OIDINFO;
  *(_OWORD *)(result + 16) = unk_1BDA88440;
  *(_OWORD *)(result + 32) = xmmword_1BDA88450;
  *(_OWORD *)(result + 48) = unk_1BDA88460;
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<oid_and_rankinfo_t>>(unint64_t a1)
{
  if (a1 >= 0x24924924924924ALL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(112 * a1);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(uint64_t a1)
{
  if (a1 < 0) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(2 * a1);
}

uint64_t ___ZN11SISearchCtx27pushCompletionsWithLanguageER19PartialQueryResults_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v134 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 40);
  makeThreadId();
  int v4 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v5 = setThreadIdAndInfo(*(_DWORD *)(*(void *)(v3 + 24) + 32), sFdExceptionCallbacks, 0, 1, v4);
  unsigned int v7 = v6;
  unint64_t v8 = v5;
  unsigned int v10 = v9;
  uint64_t v11 = *(void *)&threadData[18 * v5 + 2];
  uint64_t v12 = v11 + 320 * HIDWORD(v5);
  *(unsigned char *)(v12 + 216) = 0;
  int v104 = *(_DWORD *)(v12 + 312);
  float v13 = *(void (**)(void))(v12 + 224);
  if (v13) {
    v13(*(void *)(v11 + 320 * HIDWORD(v5) + 288));
  }
  int v105 = v4;
  unsigned int v113 = HIDWORD(v8);
  unsigned int v114 = v8;
  unsigned int v111 = v7;
  unsigned int v112 = v10;
  if (_setjmp((int *)v12))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LOWORD(v122) = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", (uint8_t *)&v122, 2u);
    }
    *(_DWORD *)(v12 + 312) = v104;
    CIOnThreadCleanUpReset(v111);
    dropThreadId(v114, 1, v4);
    return CICleanUpReset(v114, v112);
  }
  int v15 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  uint64_t v100 = v3;
  unint64_t v16 = setThreadIdAndInfo(-1, (long long *)sSDBExceptionCallbacks, *(void *)(*(void *)(v3 + 24) + 1184), 0x40000000, v15);
  unsigned int v18 = v17;
  unint64_t v19 = v16;
  unsigned int v21 = v20;
  uint64_t v22 = *(void *)&threadData[18 * v16 + 2];
  uint64_t v23 = v22 + 320 * HIDWORD(v16);
  *(unsigned char *)(v23 + 216) = 0;
  int v101 = *(_DWORD *)(v23 + 312);
  uint64_t v24 = *(void (**)(void))(v23 + 224);
  if (v24) {
    v24(*(void *)(v22 + 320 * HIDWORD(v16) + 288));
  }
  int v102 = v15;
  unsigned int v109 = HIDWORD(v19);
  unsigned int v110 = v19;
  unsigned int v107 = v18;
  unsigned int v108 = v21;
  uint64_t v28 = a2;
  if (_setjmp((int *)v23))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LOWORD(v122) = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", (uint8_t *)&v122, 2u);
    }
    *(_DWORD *)(v23 + 312) = v101;
    CIOnThreadCleanUpReset(v107);
    dropThreadId(v110, 1, v15);
    CICleanUpReset(v110, v108);
    int v30 = v104;
    int v29 = v105;
    goto LABEL_80;
  }
  v25.n128_u64[0] = 134217984;
  uint64_t v31 = v100;
LABEL_14:
  while (2)
  {
    uint64_t v32 = *(void *)(v31 + 104);
    int v33 = *(unsigned __int8 *)(v32 + 96);
    uint64_t v34 = v32;
    if (*(unsigned char *)(v32 + 96))
    {
      __int16 v86 = *(unint64_t **)(*(void *)(a1 + 48) + 8 * v28);
      goto LABEL_84;
    }
    do
    {
      uint64_t v35 = v34;
      uint64_t v34 = *(void *)(v34 + 80);
    }
    while (v34);
    if (*(unsigned char *)(*(void *)(v35 + 8) + 12)) {
      goto LABEL_73;
    }
    unint64_t v106 = 0;
    uint64_t v36 = db_obj_subiter_next(*(unsigned int **)(*(void *)(a1 + 48) + 8 * v28), &v106, v25.n128_f64[0], v26, v27);
    if (v36)
    {
      unint64_t v37 = v106;
      if (v106 >= 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 4))
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
        {
          LODWORD(v122) = 134217984;
          *(void *)((char *)&v122 + 4) = v37;
          _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "db_obj_iter returned an unreasonable index %ld", (uint8_t *)&v122, 0xCu);
        }
        continue;
      }
      uint64_t v38 = (uint64_t)v36;
      unint64_t v99 = v106;
      long long v120 = 0u;
      long long v121 = 0u;
      *(_OWORD *)buffer = 0u;
      long long v119 = 0u;
      long long v39 = *(int **)(*(void *)(v31 + 24) + 1184);
      uint64_t v40 = PartialQueryResults::completionAttributeIdVector(*(void *)(a1 + 80), v39);
      uint64_t v41 = *(void *)(*(void *)(a1 + 80) + 360);
      buffer[0] = 0;
      if ((int)v41 < 1) {
        continue;
      }
      int v42 = (int **)v40;
      uint64_t v43 = v41;
      while (1)
      {
        int v44 = *v42;
        __p[0] = 0;
        __s = 0;
        if (!db_get_field_by_id(v39, v38, v44, (unint64_t *)__p, (unint64_t *)&__s)
          && *(_WORD *)__p[0] == 11)
        {
          if ((*((_WORD *)__p[0] + 1) & 0x10) != 0)
          {
            string_for_id_locked = (const char *)db_get_string_for_id_locked(v39, *(_DWORD *)__s);
            if (!string_for_id_locked) {
              goto LABEL_39;
            }
          }
          else
          {
            string_for_id_locked = __s;
            if (!__s) {
              goto LABEL_39;
            }
          }
          int v46 = strlen(string_for_id_locked);
          CFStringRef v47 = CFStringCreateWithBytes(0, (const UInt8 *)string_for_id_locked, v46, 0x8000100u, 0);
          if (v47)
          {
            CFStringRef v48 = v47;
            int Length = CFStringGetLength(v47);
            CFStringRef v50 = (const __CFString *)NLStringTokenizerCopyBestStringLanguage();
            if (v50)
            {
              CFStringRef v51 = v50;
              CFIndex v52 = CFStringGetLength(v50);
              if (v52)
              {
                v135.length = v52;
                v135.location = 0;
                buffer[(int)CFStringGetBytes(v51, v135, 0x8000100u, 0x3Fu, 0, buffer, 32, 0)] = 0;
                uint64_t v28 = a2;
              }
              CFRelease(v51);
            }
            if ((Length - 15) <= 0x54 && (!buffer[0] || (SIIsLanguagePreferred() & 1) == 0))
            {
              long long v132 = 0u;
              memset(v133, 0, sizeof(v133));
              long long v130 = 0u;
              long long v131 = 0u;
              long long v128 = 0u;
              long long v129 = 0u;
              long long v126 = 0u;
              long long v127 = 0u;
              long long v124 = 0u;
              long long v125 = 0u;
              long long v122 = 0u;
              long long v123 = 0u;
              v136.location = 0;
              v136.length = Length;
              CFStringGetCharacters(v48, v136, (UniChar *)&v122);
              CFStringRef LanguageGuessUsingMontreal = (const __CFString *)SILanguageModelGetLanguageGuessUsingMontreal();
              if (LanguageGuessUsingMontreal)
              {
                CFStringRef v54 = LanguageGuessUsingMontreal;
                v137.length = CFStringGetLength(LanguageGuessUsingMontreal);
                v137.location = 0;
                buffer[(int)CFStringGetBytes(v54, v137, 0x8000100u, 0x3Fu, 0, buffer, 32, 0)] = 0;
                CFRelease(v54);
              }
              uint64_t v28 = a2;
            }
            CFRelease(v48);
            uint64_t v31 = v100;
          }
        }
LABEL_39:
        if (!--v43)
        {
          if (!buffer[0]) {
            goto LABEL_14;
          }
LABEL_45:
          os_unfair_lock_lock(**(os_unfair_lock_t **)(a1 + 88));
          uint64_t v55 = *(char ***)(a1 + 96);
          if ((int)(-1431655765 * ((v55[1] - *v55) >> 3)) < 1)
          {
LABEL_51:
            std::string::basic_string[abi:nn180100]<0>(__p, (char *)buffer);
            unint64_t v60 = (unint64_t)v55[2];
            unint64_t v61 = (unint64_t)v55[1];
            if (v61 >= v60)
            {
              unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - (void)*v55) >> 3);
              unint64_t v65 = v64 + 1;
              unint64_t v63 = v99;
              if (v64 + 1 > 0xAAAAAAAAAAAAAAALL) {
                abort();
              }
              unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - (void)*v55) >> 3);
              if (2 * v66 > v65) {
                unint64_t v65 = 2 * v66;
              }
              if (v66 >= 0x555555555555555) {
                unint64_t v67 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v67 = v65;
              }
              *(void *)&long long v124 = v55 + 2;
              if (v67)
              {
                long long v68 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v67);
                uint64_t v70 = v69;
              }
              else
              {
                uint64_t v70 = 0;
                long long v68 = 0;
              }
              long long v72 = &v68[24 * v64];
              int v73 = v72;
              long long v74 = *(_OWORD *)__p;
              *((void *)v72 + 2) = v116;
              *(_OWORD *)long long v72 = v74;
              __p[1] = 0;
              uint64_t v116 = 0;
              __p[0] = 0;
              long long v75 = *v55;
              long long v76 = v55[1];
              if (v76 == *v55)
              {
                __int16 v79 = v55[1];
                long long v77 = &v68[24 * v64];
              }
              else
              {
                do
                {
                  long long v77 = v73 - 24;
                  long long v78 = *(_OWORD *)(v76 - 24);
                  *((void *)v73 - 1) = *((void *)v76 - 1);
                  *(_OWORD *)(v73 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v78;
                  *((void *)v76 - 2) = 0;
                  *((void *)v76 - 1) = 0;
                  *((void *)v76 - 3) = 0;
                  v76 -= 24;
                  v73 -= 24;
                }
                while (v76 != v75);
                long long v76 = *v55;
                __int16 v79 = v55[1];
              }
              long long v80 = v72 + 24;
              long long v81 = &v68[24 * v70];
              char *v55 = v77;
              *(void *)&long long v122 = v76;
              *((void *)&v122 + 1) = v76;
              v55[1] = v72 + 24;
              *(void *)&long long v123 = v79;
              uint64_t v82 = v55[2];
              v55[2] = v81;
              *((void *)&v123 + 1) = v82;
              std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&v122);
              int v83 = SHIBYTE(v116);
              v55[1] = v80;
              if (v83 < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v62 = *(_OWORD *)__p;
              *(void *)(v61 + 16) = v116;
              *(_OWORD *)unint64_t v61 = v62;
              v55[1] = (char *)(v61 + 24);
              unint64_t v63 = v99;
            }
            int v71 = -1 - 1431655765 * ((*(void *)(*(void *)(a1 + 96) + 8) - **(void **)(a1 + 96)) >> 3);
          }
          else
          {
            uint64_t v56 = -1431655765 * ((v55[1] - *v55) >> 3);
            uint64_t v57 = *v55;
            uint64_t v58 = 0;
            while (1)
            {
              uint64_t v59 = v57;
              if (v57[23] < 0) {
                uint64_t v59 = *(const char **)v57;
              }
              if (!strcmp((const char *)buffer, v59)) {
                break;
              }
              ++v58;
              v57 += 24;
              if (v56 == v58) {
                goto LABEL_51;
              }
            }
            int v71 = v58;
            unint64_t v63 = v99;
          }
          int v84 = v71;
          os_unfair_lock_unlock(**(os_unfair_lock_t **)(a1 + 88));
          *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) + 4 * v63) = v84;
          goto LABEL_14;
        }
        ++v42;
        if (buffer[0]) {
          goto LABEL_45;
        }
      }
    }
    break;
  }
  int v33 = *(unsigned __int8 *)(*(void *)(v31 + 104) + 96);
  uint64_t v32 = *(void *)(v31 + 104);
LABEL_73:
  uint64_t v85 = v32;
  __int16 v86 = *(unint64_t **)(*(void *)(a1 + 48) + 8 * v28);
  if (v33)
  {
LABEL_84:
    char v90 = 0;
    int v30 = v104;
    int v29 = v105;
    int v88 = v101;
    int v87 = v102;
    goto LABEL_77;
  }
  int v30 = v104;
  int v29 = v105;
  int v88 = v101;
  int v87 = v102;
  do
  {
    uint64_t v89 = v85;
    uint64_t v85 = *(void *)(v85 + 80);
  }
  while (v85);
  char v90 = *(unsigned char *)(*(void *)(v89 + 8) + 12) == 0;
LABEL_77:
  db_obj_subiter_release(v86, v90, v25);
  uint64_t v91 = *(void *)&threadData[18 * v110 + 2];
  unsigned int v92 = v109;
  uint64_t v93 = v91 + 320 * v109;
  *(_DWORD *)(v93 + 312) = v88;
  unsigned int v94 = *(void (**)(void))(v93 + 232);
  if (v94) {
    v94(*(void *)(v91 + 320 * v92 + 288));
  }
  dropThreadId(v110, 0, v87);
LABEL_80:
  uint64_t v95 = *(void *)&threadData[18 * v114 + 2];
  unsigned int v96 = v113;
  uint64_t v97 = v95 + 320 * v113;
  *(_DWORD *)(v97 + 312) = v30;
  long long v98 = *(void (**)(void))(v97 + 232);
  if (v98) {
    v98(*(void *)(v95 + 320 * v96 + 288));
  }
  return dropThreadId(v114, 0, v29);
}

char *std::vector<oid_and_rankinfo_t>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL) {
    abort();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<oid_and_rankinfo_t>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[112 * v4];
  return result;
}

void __destroy_helper_block_8_56c60_ZTSNSt3__16vectorI18oid_and_rankinfo_tNS_9allocatorIS1_EEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

void *__copy_helper_block_8_56c60_ZTSNSt3__16vectorI18oid_and_rankinfo_tNS_9allocatorIS1_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  __n128 result = (void *)(a1 + 56);
  result[2] = 0;
  unint64_t v5 = *(unsigned char **)(a2 + 56);
  uint64_t v4 = *(unsigned char **)(a2 + 64);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    std::vector<oid_and_rankinfo_t>::__vallocate[abi:nn180100](result, 0x6DB6DB6DB6DB6DB7 * (v6 >> 4));
    unsigned int v7 = *(char **)(a1 + 64);
    __n128 result = memmove(v7, v5, v6);
    *(void *)(a1 + 64) = &v7[v6];
  }
  return result;
}

os_log_t ___ZL16_SIPerf_QueryLogv_block_invoke()
{
  os_log_t result = os_log_create("com.apple.spotlight", "telemetry");
  _SIPerf_QueryLog(void)::sQueryLog = (uint64_t)result;
  return result;
}

void *___ZN11SISearchCtx24populateSuggestionsModelEP18md_deadline_once_s_block_invoke(void *result, int a2)
{
  if (!a2) {
    *(_DWORD *)(*(void *)(result[4] + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(result[6] + 248);
  }
  *(unsigned char *)(*(void *)(result[5] + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 != 0;
  return result;
}

void ___ZN11SISearchCtx24populateSuggestionsModelEP18md_deadline_once_s_block_invoke_2(uint64_t a1, int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32);
  double Current = CFAbsoluteTimeGetCurrent();
  int64_t v6 = *(void **)(a1 + 40);
  if (a2)
  {
    SIPommesSuggestionsModelRelease(v6);
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    double v7 = (Current - *(double *)(a1 + 48)) * 1000.0;
    int v11 = 134217984;
    double v12 = v7;
    unint64_t v8 = MEMORY[0x1E4F14500];
    unsigned int v9 = "releasing useless suggestions model after %f ms of init";
  }
  else
  {
    *(void *)(v4 + 280) = v6;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    double v10 = (Current - *(double *)(a1 + 48)) * 1000.0;
    int v11 = 134217984;
    double v12 = v10;
    unint64_t v8 = MEMORY[0x1E4F14500];
    unsigned int v9 = "populating suggestions model after %f ms of init";
  }
  _os_log_impl(&dword_1BD672000, v8, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v11, 0xCu);
}

uint64_t _qpCannedFieldQuery(uint64_t a1, uint64_t a2, const char **a3, uint64_t a4, void *a5)
{
  double v10 = (char *)*a3;
  int v11 = (const char *)strlen(*a3);
  double v12 = CannedFieldTable::in_word_set((CannedFieldTable *)v10, v11);
  uint64_t v13 = v12;
  if (*(void *)a2)
  {
    if (!v12) {
      return 0;
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
    if (!v13) {
      return 0;
    }
  }
  int v14 = v13[2];
  if (v14)
  {
    int v15 = *a3;
    uint64_t v16 = a5[3];
    unsigned int v17 = *(uint64_t **)a2;
    uint64_t v18 = *v17;
    uint64_t v19 = a5[1];
    uint64_t v20 = (*(uint64_t (**)(void *, uint64_t *))(*a5 + 32))(a5, v17);
    return ((uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t, uint64_t *, uint64_t, const char **, uint64_t))v14)(v19, v15, v16, v18, v17, v20, a3, a4);
  }
  return 0;
}

void si_cancel_activectx(void *a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)&sActiveCtxLock);
  if (activeCtxs) {
    CFSetApplyFunction((CFSetRef)activeCtxs, (CFSetApplierFunction)cancelCtxApplier, a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&sActiveCtxLock);
}

uint64_t cancelCtxApplier(uint64_t result, void *a2)
{
  if (*(void **)(result + 24) == a2) {
    *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  }
  return result;
}

_WORD *PhotosQueryTree(__CFString *a1, void *a2, const __CFDictionary *a3, uint64_t a4)
{
  uint64_t v328 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a4 + 14))
  {
    double v7 = @"SpotlightUI";
  }
  else if (*(unsigned char *)(a4 + 16))
  {
    double v7 = @"SearchTool";
  }
  else
  {
    double v7 = @"Photos";
  }
  CFDictionaryRef v8 = *(const __CFDictionary **)(a4 + 32);
  uint64_t v292 = *(void *)a4;
  int v9 = *(unsigned __int8 *)(a4 + 12);
  int v10 = *__error();
  CFDictionaryRef theDict = a3;
  if (v9)
  {
    int v11 = _SILogForLogForCategory(20);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v12 = [(__CFString *)a1 length];
      uint64_t v13 = (uint64_t)a1;
      if (v12 >= 4) {
        *(double *)&uint64_t v13 = COERCE_DOUBLE(objc_msgSend(NSString, "stringWithFormat:", @"%c%c...%c<%lu chars>", -[__CFString characterAtIndex:](a1, "characterAtIndex:", 0), -[__CFString characterAtIndex:](a1, "characterAtIndex:", 1), -[__CFString characterAtIndex:](a1, "characterAtIndex:", v12 - 1), v12));
      }
      *(_DWORD *)stat buf = 134218498;
      *(void *)&uint8_t buf[4] = v292;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&unsigned char buf[14] = v7;
      *(_WORD *)&buf[22] = 2112;
      double v324 = *(double *)&v13;
      _os_log_impl(&dword_1BD672000, v11, OS_LOG_TYPE_DEFAULT, "[qid=%llu]Processing query: %@, client: %@", buf, 0x20u);
    }
    *__error() = v10;
    if (v8)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v8, @"disableMetadataSearch");
      buf[0] = 0;
      if (Value)
      {
        CFNumberGetValue(Value, kCFNumberSInt8Type, buf);
        if (buf[0])
        {
          int v15 = *__error();
          uint64_t v16 = _SILogForLogForCategory(20);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)stat buf = 134217984;
            *(void *)&uint8_t buf[4] = v292;
            _os_log_impl(&dword_1BD672000, v16, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Skipping ranking nodes (Reason: metadata search is disabled)", buf, 0xCu);
          }
          *__error() = v15;
          return makeFalseNode();
        }
      }
    }
    uint64_t v285 = mach_absolute_time();
    uint64_t v18 = (void *)[MEMORY[0x1E4F1CA48] array];
    *(void *)&long long v313 = 0;
    if (a2 && CFAttributedStringGetLength((CFAttributedStringRef)a2) >= 1)
    {
      *(void *)stat buf = 0;
      PhPopulateFiltersFromQuery(a2, (uint64_t)buf, (uint64_t)&v313, (uint64_t)v18, [MEMORY[0x1E4F1CA48] array], 1, v292);
      db_free_query_node(*(void **)buf);
    }
    -[NSCharacterSet formUnionWithCharacterSet:](v296, "formUnionWithCharacterSet:", [MEMORY[0x1E4F28B88] whitespaceCharacterSet]);
    if (!theDict) {
      goto LABEL_34;
    }
    uint64_t v19 = (const void *)getkQPQUOutputTokenInfoKey();
    if (CFDictionaryContainsKey(theDict, v19) && CFDictionaryContainsKey(theDict, @"attributedParse"))
    {
      FalseNode = PhRankingTreeFromU2Parse(theDict, (void *)v313, v18, v296, v292);
LABEL_340:
      unsigned int v17 = FalseNode;
      if (!FalseNode)
      {
        int v237 = *__error();
        v238 = _SILogForLogForCategory(20);
        if (os_log_type_enabled(v238, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)stat buf = 134217984;
          *(void *)&uint8_t buf[4] = v292;
          _os_log_impl(&dword_1BD672000, v238, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Returning false tree (Reason: query tree is empty)", buf, 0xCu);
        }
        *__error() = v237;
        unsigned int v17 = PhRankingBoostTree();
      }
      int v239 = *__error();
      v240 = _SILogForLogForCategory(20);
      if (os_log_type_enabled(v240, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v241 = mach_absolute_time();
        if (NanoSecondsSinceAbsoluteTime(unsigned long long)::onceToken != -1) {
          dispatch_once(&NanoSecondsSinceAbsoluteTime(unsigned long long)::onceToken, &__block_literal_global_148);
        }
        *(_DWORD *)stat buf = 134218240;
        *(void *)&uint8_t buf[4] = v292;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(double *)&unsigned char buf[14] = (double)((v241 - v285)
                                     * NanoSecondsSinceAbsoluteTime(unsigned long long)::sTimebaseInfo
                                     / *(unsigned int *)algn_1EA0DABE4)
                            / 1000.0;
        _os_log_impl(&dword_1BD672000, v240, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Created ranking tree in %f micro seconds", buf, 0x16u);
      }
      *__error() = v239;
      return v17;
    }
    if (CFDictionaryContainsKey(theDict, @"attributedParses")
      && (__n128 v25 = (void *)CFDictionaryGetValue(theDict, @"attributedParses"), [v25 count]))
    {
      double v26 = (void *)[v25 objectAtIndexedSubscript:0];
    }
    else
    {
LABEL_34:
      double v26 = 0;
    }
    v281 = (void *)v313;
    int v27 = *__error();
    uint64_t v28 = _SILogForLogForCategory(20);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134217984;
      *(void *)&uint8_t buf[4] = v292;
      _os_log_impl(&dword_1BD672000, v28, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Processing rule-based query parse output to create ranking tree", buf, 0xCu);
    }
    *__error() = v27;
    oboff_t j = (id)[MEMORY[0x1E4F1CA48] array];
    int v29 = (void *)[MEMORY[0x1E4F1CA48] array];
    int v30 = (void *)[MEMORY[0x1E4F1CA48] array];
    v303 = (void *)[MEMORY[0x1E4F1CA48] array];
    uint64_t v31 = (void *)[MEMORY[0x1E4F1CA48] array];
    uint64_t v32 = [v26 length];
    *(void *)stat buf = MEMORY[0x1E4F143A8];
    *(void *)&uint8_t buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = ___ZL28PhPopulateAllFilterFromParseP18NSAttributedStringP14NSMutableArrayIP8NSStringEPS1_IP7NSValueES9_S9_S9__block_invoke_13342;
    double v324 = COERCE_DOUBLE(&unk_1E6348D60);
    *(void *)v325 = v30;
    *(void *)&v325[8] = v303;
    *(void *)&v325[16] = v31;
    id v326 = obj;
    v327 = v29;
    objc_msgSend(v26, "enumerateAttributesInRange:options:usingBlock:", 0, v32, 0, buf);
    if ([v29 count]
      || [v30 count]
      || [v31 count]
      || [v303 count])
    {
      int v33 = *__error();
      uint64_t v34 = _SILogForLogForCategory(20);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v35 = [v29 count];
        *(double *)&uint64_t v36 = COERCE_DOUBLE([v30 count]);
        uint64_t v37 = [v31 count];
        uint64_t v38 = [v303 count];
        *(_DWORD *)stat buf = 134219008;
        *(void *)&uint8_t buf[4] = v292;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&unsigned char buf[14] = v35;
        *(_WORD *)&buf[22] = 2048;
        double v324 = *(double *)&v36;
        *(_WORD *)v325 = 2048;
        *(void *)&v325[2] = v37;
        *(_WORD *)&v325[10] = 2048;
        *(void *)&v325[12] = v38;
        _os_log_impl(&dword_1BD672000, v34, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Populated filters: time = %lu, fav = %lu, person = %lu, mediatype = %lu", buf, 0x34u);
      }
      *__error() = v33;
    }
    CFDictionaryRef theDicta = (CFDictionaryRef)[MEMORY[0x1E4F1CA80] set];
    QueryTokens = (const __CFArray **)CreateQueryTokens(a1, 1);
    if (QueryTokens)
    {
      v283 = QueryTokens;
      CFArrayRef v40 = *QueryTokens;
      if (v40)
      {
        CFIndex Count = CFArrayGetCount(v40);
        if (Count)
        {
          CFArrayRef theArray = *v283;
          CFArrayRef v298 = v283[2];
          CFArrayRef v300 = v283[1];
          *(void *)&long long v317 = 0;
          CFArrayRef matched = (CFArrayRef)PhExactMatchTree(a1, v18, (uint64_t)v296, Count, &v317, v292);
          LODWORD(__p[0]) = 0;
          if (Count < 1)
          {
            v293 = 0;
LABEL_330:
            freeQueryTokensContext((CFTypeRef *)v283);
            int v229 = *__error();
            v230 = _SILogForLogForCategory(20);
            if (os_log_type_enabled(v230, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)stat buf = 134218240;
              *(void *)&uint8_t buf[4] = v292;
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&unsigned char buf[14] = __p[0];
              _os_log_impl(&dword_1BD672000, v230, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Added %d nodes", buf, 0x12u);
            }
            *__error() = v229;
            if (v281)
            {
              int v231 = *__error();
              v232 = _SILogForLogForCategory(20);
              if (os_log_type_enabled(v232, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)stat buf = 134218240;
                *(void *)&uint8_t buf[4] = v292;
                *(_WORD *)&unsigned char buf[12] = 2048;
                *(void *)&unsigned char buf[14] = 0x4024000000000000;
                _os_log_impl(&dword_1BD672000, v232, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Assigning weight: %f to metadata filter", buf, 0x16u);
              }
              *__error() = v231;
              v321[0] = MEMORY[0x1E4F143A8];
              v321[1] = 3221225472;
              v321[2] = ___ZL24PhRankingTreeFromQPParsePK10__CFStringP10query_nodeP18NSAttributedStringP7NSArrayIP7NSValueEP14NSCharacterSety_block_invoke;
              v321[3] = &__block_descriptor_36_e87__v16__0__query_node___query_node___query_node___query_piece_____v___v__v_SIb8b1b1b1Qf_8l;
              int v322 = 1092616192;
              *(void *)stat buf = MEMORY[0x1E4F143A8];
              *(void *)&uint8_t buf[8] = 0x40000000;
              *(void *)&uint8_t buf[16] = __db_query_tree_apply_block_block_invoke;
              double v324 = COERCE_DOUBLE(&unk_1E6348598);
              *(void *)v325 = v321;
              db_query_tree_apply_block_with_meta(v281, (uint64_t)buf, 0);
              v233 = makeAndNode((uint64_t)matched, (uint64_t)v281);
            }
            else
            {
              v233 = matched;
            }
            v234 = makeOrNode((uint64_t)v233, (uint64_t)v293);
            if (v234)
            {
              uint64_t v235 = (uint64_t)v234;
              v236 = PhRankingBoostTree();
              v234 = makeAndNode(v235, (uint64_t)v236);
            }
            FalseNode = makeOrNode((uint64_t)v234, v317);
            goto LABEL_340;
          }
          CFIndex v42 = 0;
          v293 = 0;
          while (1)
          {
            uint64_t RangeAtIndex = getRangeAtIndex(v300, v298, v42);
            NSUInteger v45 = v44;
            if (RangeAtIndex == -1)
            {
              int v54 = *__error();
              uint64_t v56 = _SILogForLogForCategory(20);
              if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)stat buf = 134218752;
                *(void *)&uint8_t buf[4] = v292;
                *(_WORD *)&unsigned char buf[12] = 2048;
                *(void *)&unsigned char buf[14] = v42;
                *(_WORD *)&buf[22] = 2048;
                double v324 = NAN;
                *(_WORD *)v325 = 2048;
                *(void *)&v325[2] = v45;
                _os_log_impl(&dword_1BD672000, v56, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Skipping token %lu (ERROR: invalid range: (%ld, %ld))", buf, 0x2Au);
              }
            }
            else
            {
              NSUInteger v46 = RangeAtIndex;
              if ([v18 count])
              {
                uint64_t v47 = 0;
                while (1)
                {
                  v340.location = objc_msgSend((id)objc_msgSend(v18, "objectAtIndexedSubscript:", v47), "rangeValue");
                  v340.length = v48;
                  v329.location = v46;
                  v329.length = v45;
                  if (NSIntersectionRange(v329, v340).length) {
                    break;
                  }
                  if (++v47 >= (unint64_t)[v18 count]) {
                    goto LABEL_54;
                  }
                }
                int v54 = *__error();
                uint64_t v57 = _SILogForLogForCategory(20);
                if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)stat buf = 134218240;
                  *(void *)&uint8_t buf[4] = v292;
                  *(_WORD *)&unsigned char buf[12] = 2048;
                  *(void *)&unsigned char buf[14] = v42;
                  _os_log_impl(&dword_1BD672000, v57, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Skipping token %lu (Reason: It is a suggestion token)", buf, 0x16u);
                }
              }
              else
              {
LABEL_54:
                if ([v29 count])
                {
                  double v49 = 0.0;
                  while (1)
                  {
                    v341.location = objc_msgSend((id)objc_msgSend(v29, "objectAtIndexedSubscript:", *(void *)&v49), "rangeValue");
                    v341.length = v50;
                    v330.location = v46;
                    v330.length = v45;
                    if (NSIntersectionRange(v330, v341).length) {
                      break;
                    }
                    if (++*(void *)&v49 >= (unint64_t)[v29 count]) {
                      goto LABEL_58;
                    }
                  }
                  int v58 = *__error();
                  uint64_t v59 = _SILogForLogForCategory(20);
                  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)stat buf = 134218496;
                    *(void *)&uint8_t buf[4] = v292;
                    *(_WORD *)&unsigned char buf[12] = 2048;
                    *(void *)&unsigned char buf[14] = v42;
                    *(_WORD *)&buf[22] = 2048;
                    double v324 = v49;
                    _os_log_impl(&dword_1BD672000, v59, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Token: %lu has a date parse (Date parse idx: %lu)", buf, 0x20u);
                  }
                  *__error() = v58;
                  if ((-[__CFDictionary containsObject:](theDicta, "containsObject:", [NSNumber numberWithLong:*(void *)&v49]) & 1) == 0)
                  {
                    -[__CFDictionary addObject:](theDicta, "addObject:", [NSNumber numberWithLong:*(void *)&v49]);
                    unint64_t v60 = PhRankingTreeFromStr((char *)objc_msgSend((id)objc_msgSend(obj, "objectAtIndexedSubscript:", *(void *)&v49), "UTF8String"), __p, 0.13);
                    v293 = makeAndNode((uint64_t)v293, (uint64_t)v60);
                  }
                  goto LABEL_72;
                }
LABEL_58:
                if ([v30 count])
                {
                  double v51 = 0.0;
                  while (1)
                  {
                    v342.location = objc_msgSend((id)objc_msgSend(v30, "objectAtIndexedSubscript:", *(void *)&v51), "rangeValue");
                    v342.length = v52;
                    v331.location = v46;
                    v331.length = v45;
                    if (NSIntersectionRange(v331, v342).length) {
                      break;
                    }
                    if (++*(void *)&v51 >= (unint64_t)[v30 count]) {
                      goto LABEL_62;
                    }
                  }
                  int v68 = *__error();
                  uint64_t v69 = _SILogForLogForCategory(20);
                  if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)stat buf = 134218496;
                    *(void *)&uint8_t buf[4] = v292;
                    *(_WORD *)&unsigned char buf[12] = 2048;
                    *(void *)&unsigned char buf[14] = v42;
                    *(_WORD *)&buf[22] = 2048;
                    double v324 = v51;
                    _os_log_impl(&dword_1BD672000, v69, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Token: %lu has a fav parse (Fav parse idx: %lu)", buf, 0x20u);
                  }
                  *__error() = v68;
                  uint64_t v70 = "kMDItemPhotosFavorited";
                  int v71 = "1";
                  uint64_t v72 = 0;
                  float v73 = 0.18;
LABEL_96:
                  QueryNode = createQueryNode(v70, v71, v72, 1, 0, v73, 0.0);
                  v293 = makeAndNode((uint64_t)v293, (uint64_t)QueryNode);
                  int v75 = LODWORD(__p[0]) + 1;
LABEL_97:
                  LODWORD(__p[0]) = v75;
                  goto LABEL_72;
                }
LABEL_62:
                CFDataRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, v42);
                if (_containsOnlyCharsInCharset((NSString *)ValueAtIndex, v296))
                {
                  int v54 = *__error();
                  uint64_t v55 = _SILogForLogForCategory(20);
                  if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)stat buf = 134218240;
                    *(void *)&uint8_t buf[4] = v292;
                    *(_WORD *)&unsigned char buf[12] = 2048;
                    *(void *)&unsigned char buf[14] = v42;
                    _os_log_impl(&dword_1BD672000, v55, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Token: %lu is skipped (Reason: It has only trimmable chars)", buf, 0x16u);
                  }
                }
                else
                {
                  unint64_t v61 = (char *)[ValueAtIndex UTF8String];
                  if (v61)
                  {
                    if ([v31 count])
                    {
                      double v62 = 0.0;
                      while (1)
                      {
                        v343.location = objc_msgSend((id)objc_msgSend(v31, "objectAtIndexedSubscript:", *(void *)&v62), "rangeValue");
                        v343.length = v63;
                        v332.location = v46;
                        v332.length = v45;
                        if (NSIntersectionRange(v332, v343).length) {
                          break;
                        }
                        if (++*(void *)&v62 >= (unint64_t)[v31 count]) {
                          goto LABEL_83;
                        }
                      }
                      int v77 = *__error();
                      long long v78 = _SILogForLogForCategory(20);
                      if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)stat buf = 134218496;
                        *(void *)&uint8_t buf[4] = v292;
                        *(_WORD *)&unsigned char buf[12] = 2048;
                        *(void *)&unsigned char buf[14] = v42;
                        *(_WORD *)&buf[22] = 2048;
                        double v324 = v62;
                        _os_log_impl(&dword_1BD672000, v78, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Token: %lu has a person parse (Person parse idx: %lu)", buf, 0x20u);
                      }
                      *__error() = v77;
                      __int16 v79 = createQueryNode("kMDItemPhotosPeopleNames", v61, 112, 1, 0, 0.17, 0.0);
                      long long v80 = createQueryNode("kMDItemPhotosPeopleNamesAlternatives", v61, 112, 1, 0, 0.17, 0.0);
                      long long v81 = makeOrNode((uint64_t)v79, (uint64_t)v80);
                      v293 = makeAndNode((uint64_t)v293, (uint64_t)v81);
                      int v75 = LODWORD(__p[0]) + 2;
                      goto LABEL_97;
                    }
LABEL_83:
                    if ([v303 count])
                    {
                      double v64 = 0.0;
                      while (1)
                      {
                        v344.location = objc_msgSend((id)objc_msgSend(v303, "objectAtIndexedSubscript:", *(void *)&v64), "rangeValue");
                        v344.length = v65;
                        v333.location = v46;
                        v333.length = v45;
                        if (NSIntersectionRange(v333, v344).length) {
                          break;
                        }
                        if (++*(void *)&v64 >= (unint64_t)[v303 count]) {
                          goto LABEL_87;
                        }
                      }
                      int v90 = *__error();
                      uint64_t v91 = _SILogForLogForCategory(20);
                      if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)stat buf = 134218496;
                        *(void *)&uint8_t buf[4] = v292;
                        *(_WORD *)&unsigned char buf[12] = 2048;
                        *(void *)&unsigned char buf[14] = v42;
                        *(_WORD *)&buf[22] = 2048;
                        double v324 = v64;
                        _os_log_impl(&dword_1BD672000, v91, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Token: %lu has a media parse (Media parse idx: %lu)", buf, 0x20u);
                      }
                      *__error() = v90;
                      uint64_t v70 = "kMDItemPhotosMediaTypes";
                      int v71 = v61;
                      uint64_t v72 = 112;
                      float v73 = 0.1;
                      goto LABEL_96;
                    }
LABEL_87:
                    std::string::basic_string[abi:nn180100]<0>(buf, v61);
                    BOOL v66 = isOptionalWord(buf);
                    if ((buf[23] & 0x80000000) != 0) {
                      operator delete(*(void **)buf);
                    }
                    if (!v66)
                    {
                      if (v42 == Count - 1)
                      {
                        v272 = createQueryNode("kMDItemPhotosPeopleNames", v61, 112, 1, -1, 0.17, 0.0);
                        uint64_t v82 = createQueryNode("kMDItemPhotosPeopleNamesAlternatives", v61, 112, 1, -1, 0.17, 0.0);
                        int v83 = createQueryNode("kMDItemPhotosSceneClassificationLabels", v61, 112, 1, -1, 0.16, 0.0);
                        int v84 = createQueryNode("kMDItemPhotosSceneClassificationSynonyms", v61, 112, 1, -1, 0.16, 0.0);
                        uint64_t v85 = createQueryNode("kMDItemPhotosLocationKeywords", v61, 112, 1, -1, 0.14, 0.0);
                        __int16 v86 = makeOrNode((uint64_t)v272, (uint64_t)v82);
                        int v87 = makeOrNode((uint64_t)v83, (uint64_t)v84);
                        int v88 = makeOrNode((uint64_t)v86, (uint64_t)v87);
                        uint64_t v89 = (uint64_t)v85;
                      }
                      else
                      {
                        unsigned int v92 = createQueryNode("kMDItemPhotosPeopleNames", v61, 112, 1, 0, 0.17, 0.0);
                        uint64_t v93 = createQueryNode("kMDItemPhotosPeopleNamesAlternatives", v61, 112, 1, 0, 0.17, 0.0);
                        unsigned int v94 = makeOrNode((uint64_t)v92, (uint64_t)v93);
                        uint64_t v95 = createQueryNode("kMDItemPhotosSceneClassificationLabels", v61, 112, 1, 0, 0.16, 0.0);
                        unsigned int v96 = createQueryNode("kMDItemPhotosSceneClassificationSynonyms", v61, 112, 1, 0, 0.16, 0.0);
                        uint64_t v97 = makeOrNode((uint64_t)v95, (uint64_t)v96);
                        long long v98 = createQueryNode("kMDItemPhotosLocationKeywords", v61, 112, 1, 0, 0.14, 0.0);
                        int v88 = makeOrNode((uint64_t)v97, (uint64_t)v98);
                        uint64_t v89 = (uint64_t)v94;
                      }
                      unint64_t v99 = makeOrNode(v89, (uint64_t)v88);
                      v293 = makeAndNode((uint64_t)v293, (uint64_t)v99);
                      int v75 = LODWORD(__p[0]) + 5;
                      goto LABEL_97;
                    }
                    int v54 = *__error();
                    unint64_t v67 = _SILogForLogForCategory(20);
                    if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)stat buf = 134218240;
                      *(void *)&uint8_t buf[4] = v292;
                      *(_WORD *)&unsigned char buf[12] = 2048;
                      *(void *)&unsigned char buf[14] = v42;
                      _os_log_impl(&dword_1BD672000, v67, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Token: %lu is skipped (Reason: It is optional as per optional dictionary)", buf, 0x16u);
                    }
                  }
                  else
                  {
                    int v54 = *__error();
                    long long v76 = _SILogForLogForCategory(20);
                    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)stat buf = 134218240;
                      *(void *)&uint8_t buf[4] = v292;
                      *(_WORD *)&unsigned char buf[12] = 2048;
                      *(void *)&unsigned char buf[14] = v42;
                      _os_log_impl(&dword_1BD672000, v76, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Token: %lu is skipped (ERROR: UTF8 encoding of token failed)", buf, 0x16u);
                    }
                  }
                }
              }
            }
            *__error() = v54;
LABEL_72:
            if (++v42 == Count) {
              goto LABEL_330;
            }
          }
        }
      }
      freeQueryTokensContext((CFTypeRef *)v283);
      int v101 = *__error();
      int v102 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)stat buf = 134217984;
        *(void *)&uint8_t buf[4] = v292;
        _os_log_impl(&dword_1BD672000, v102, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Return no results (ERROR: zero tokens found from the userQuery)", buf, 0xCu);
      }
    }
    else
    {
      int v101 = *__error();
      unint64_t v103 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)stat buf = 134217984;
        *(void *)&uint8_t buf[4] = v292;
        _os_log_impl(&dword_1BD672000, v103, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Return no results (ERROR: missing tokenization context on userQuery)", buf, 0xCu);
      }
    }
    *__error() = v101;
    FalseNode = makeFalseNode();
    goto LABEL_340;
  }
  unsigned int v21 = _SILogForLogForCategory(19);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v22 = [(__CFString *)a1 length];
    uint64_t v23 = (uint64_t)a1;
    if (v22 >= 4) {
      *(double *)&uint64_t v23 = COERCE_DOUBLE(objc_msgSend(NSString, "stringWithFormat:", @"%c%c...%c<%lu chars>", -[__CFString characterAtIndex:](a1, "characterAtIndex:", 0), -[__CFString characterAtIndex:](a1, "characterAtIndex:", 1), -[__CFString characterAtIndex:](a1, "characterAtIndex:", v22 - 1), v22));
    }
    *(_DWORD *)stat buf = 134218498;
    *(void *)&uint8_t buf[4] = v292;
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&unsigned char buf[14] = v7;
    *(_WORD *)&buf[22] = 2112;
    double v324 = *(double *)&v23;
    _os_log_impl(&dword_1BD672000, v21, OS_LOG_TYPE_DEFAULT, "[qid=%llu]Processing query: %@, client: %@", buf, 0x20u);
  }
  *__error() = v10;
  if (v8)
  {
    CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(v8, @"disableMetadataSearch");
    buf[0] = 0;
    if (v24)
    {
      CFNumberGetValue(v24, kCFNumberSInt8Type, buf);
      BOOL v286 = buf[0] != 0;
    }
    else
    {
      BOOL v286 = 0;
    }
    CFNumberRef v104 = (const __CFNumber *)CFDictionaryGetValue(v8, @"disableSemanticSearch");
    buf[0] = 0;
    if (v104)
    {
      CFNumberGetValue(v104, kCFNumberSInt8Type, buf);
      BOOL theArraya = buf[0] != 0;
    }
    else
    {
      BOOL theArraya = 0;
    }
    CFNumberRef v105 = (const __CFNumber *)CFDictionaryGetValue(v8, @"disableU2");
    buf[0] = 0;
    if (v105)
    {
      CFNumberGetValue(v105, kCFNumberSInt8Type, buf);
      BOOL v284 = buf[0] != 0;
    }
    else
    {
      BOOL v284 = 0;
    }
    CFNumberRef v106 = (const __CFNumber *)CFDictionaryGetValue(v8, @"maxANNResultCount");
    int v100 = 1000;
    *(_DWORD *)stat buf = 1000;
    if (v106)
    {
      CFNumberGetValue(v106, kCFNumberIntType, buf);
      int v100 = *(_DWORD *)buf;
    }
  }
  else
  {
    BOOL v284 = 0;
    BOOL theArraya = 0;
    BOOL v286 = 0;
    int v100 = 1000;
  }
  int v276 = v100;
  uint64_t v309 = 0;
  uint64_t v310 = 0;
  unsigned int v107 = (void *)[MEMORY[0x1E4F1CA48] array];
  unsigned int v108 = (void *)[MEMORY[0x1E4F1CA48] array];
  if (a2 && CFAttributedStringGetLength((CFAttributedStringRef)a2) >= 1) {
    PhPopulateFiltersFromQuery(a2, (uint64_t)&v310, (uint64_t)&v309, (uint64_t)v107, (uint64_t)v108, 0, v292);
  }
  v307 = 0;
  v308 = 0;
  uint64_t v306 = 0;
  if (v284 && v286)
  {
    int v109 = *__error();
    unsigned int v110 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134217984;
      *(void *)&uint8_t buf[4] = v292;
      _os_log_impl(&dword_1BD672000, v110, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Skipping aNN filters and metadata nodes (Reason: U2 and metadata search are disabled)", buf, 0xCu);
    }
    *__error() = v109;
    goto LABEL_248;
  }
  if (!theDict) {
    goto LABEL_141;
  }
  unsigned int v111 = (const void *)getkQPQUOutputTokenInfoKey();
  if (CFDictionaryContainsKey(theDict, v111) && CFDictionaryContainsKey(theDict, @"attributedParse"))
  {
    PhPopulateNodesFromU2Parse(theDict, v107, v108, theArraya, (uint64_t *)&v307, (uint64_t *)&v308, &v306, v292);
    goto LABEL_244;
  }
  if (CFDictionaryContainsKey(theDict, @"attributedParses")
    && (unsigned int v112 = (void *)CFDictionaryGetValue(theDict, @"attributedParses"), [v112 count]))
  {
    unsigned int v113 = (void *)[v112 objectAtIndexedSubscript:0];
  }
  else
  {
LABEL_141:
    unsigned int v113 = 0;
  }
  int v114 = *__error();
  uint64_t v115 = _SILogForLogForCategory(19);
  if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 134217984;
    *(void *)&uint8_t buf[4] = v292;
    _os_log_impl(&dword_1BD672000, v115, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Using rule-based parse for creating ann filter and unigram node (U2 parse missing)", buf, 0xCu);
  }
  *__error() = v114;
  v299 = (void *)[MEMORY[0x1E4F1CA48] array];
  v304 = (void *)[MEMORY[0x1E4F1CA48] array];
  v301 = (void *)[MEMORY[0x1E4F1CA48] array];
  id obja = (id)[MEMORY[0x1E4F1CA48] array];
  v294 = (void *)[MEMORY[0x1E4F1CA48] array];
  uint64_t v116 = [v113 length];
  *(void *)stat buf = MEMORY[0x1E4F143A8];
  *(void *)&uint8_t buf[8] = 3221225472;
  *(void *)&uint8_t buf[16] = ___ZL28PhPopulateAllFilterFromParseP18NSAttributedStringP14NSMutableArrayIP8NSStringEPS1_IP7NSValueES9_S9_S9__block_invoke_13342;
  double v324 = COERCE_DOUBLE(&unk_1E6348D60);
  *(void *)v325 = v301;
  *(void *)&v325[8] = obja;
  *(void *)&v325[16] = v294;
  id v326 = v299;
  v327 = v304;
  objc_msgSend(v113, "enumerateAttributesInRange:options:usingBlock:", 0, v116, 0, buf);
  if ([v304 count]
    || [v301 count]
    || [v294 count]
    || [obja count])
  {
    int v117 = *__error();
    uint64_t v118 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v119 = [v304 count];
      *(double *)&uint64_t v120 = COERCE_DOUBLE([v301 count]);
      uint64_t v121 = [v294 count];
      uint64_t v122 = [obja count];
      *(_DWORD *)stat buf = 134219008;
      *(void *)&uint8_t buf[4] = v292;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&unsigned char buf[14] = v119;
      *(_WORD *)&buf[22] = 2048;
      double v324 = *(double *)&v120;
      *(_WORD *)v325 = 2048;
      *(void *)&v325[2] = v121;
      *(_WORD *)&v325[10] = 2048;
      *(void *)&v325[12] = v122;
      _os_log_impl(&dword_1BD672000, v118, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Populated filters: time = %lu, fav = %lu, person = %lu, mediatype = %lu", buf, 0x34u);
    }
    *__error() = v117;
  }
  v297 = (NSCharacterSet *)[MEMORY[0x1E4F1CA60] dictionary];
  PhRetrievalAttribs();
  long long v123 = (const __CFArray **)CreateQueryTokens(a1, 1);
  if (v123)
  {
    v273 = v123;
    CFArrayRef v124 = *v123;
    if (v124)
    {
      CFIndex v125 = CFArrayGetCount(v124);
      CFIndex v282 = v125;
      if (v125)
      {
        CFArrayRef v275 = *v273;
        CFArrayRef v278 = v273[1];
        CFArrayRef v277 = v273[2];
        uint64_t v306 = v125;
        CFIndex v271 = v125 - 1;
        if (v125 >= 1)
        {
          CFIndex v126 = 0;
          while (1)
          {
            uint64_t v127 = getRangeAtIndex(v278, v277, v126);
            NSUInteger v129 = v128;
            if (v127 == -1) {
              break;
            }
            NSUInteger v130 = v127;
            if ([v107 count])
            {
              uint64_t v131 = 0;
              while (1)
              {
                v345.location = objc_msgSend((id)objc_msgSend(v107, "objectAtIndexedSubscript:", v131), "rangeValue");
                v345.length = v132;
                v334.location = v130;
                v334.length = v129;
                if (NSIntersectionRange(v334, v345).length) {
                  break;
                }
                if (++v131 >= (unint64_t)[v107 count]) {
                  goto LABEL_161;
                }
              }
              int v138 = *__error();
              uint64_t v139 = _SILogForLogForCategory(19);
              if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)stat buf = 134218240;
                *(void *)&uint8_t buf[4] = v292;
                *(_WORD *)&unsigned char buf[12] = 2048;
                *(void *)&unsigned char buf[14] = v126;
                _os_log_impl(&dword_1BD672000, v139, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Skipping token %lu (REASON: Its a filter token)", buf, 0x16u);
              }
              *__error() = v138;
              if ([v108 count])
              {
                uint64_t v140 = 0;
                do
                {
                  v346.location = objc_msgSend((id)objc_msgSend(v108, "objectAtIndexedSubscript:", v140), "rangeValue");
                  v346.length = v141;
                  v335.location = v130;
                  v335.length = v129;
                  if (NSIntersectionRange(v335, v346).length) {
                    goto LABEL_179;
                  }
                }
                while (++v140 < (unint64_t)[v108 count]);
              }
            }
            else
            {
LABEL_161:
              size_t v133 = (__CFString *)CFArrayGetValueAtIndex(v275, v126);
              if (!CFStringGetLength(v133))
              {
                int v136 = *__error();
                unint64_t v142 = _SILogForLogForCategory(19);
                if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)stat buf = 134218240;
                  *(void *)&uint8_t buf[4] = v292;
                  *(_WORD *)&unsigned char buf[12] = 2048;
                  *(void *)&unsigned char buf[14] = v126;
                  _os_log_impl(&dword_1BD672000, v142, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Skipping token %lu (Reason: Its zero-length)", buf, 0x16u);
                }
LABEL_178:
                *__error() = v136;
                goto LABEL_179;
              }
              if (!hasOnlySpecialChar(v133))
              {
                if (isOptionalToken(v133, v126 == v271) && (--v306, v126 != v271))
                {
                  int v136 = *__error();
                  unint64_t v150 = _SILogForLogForCategory(19);
                  if (os_log_type_enabled(v150, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)stat buf = 134218240;
                    *(void *)&uint8_t buf[4] = v292;
                    *(_WORD *)&unsigned char buf[12] = 2048;
                    *(void *)&unsigned char buf[14] = v126;
                    _os_log_impl(&dword_1BD672000, v150, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Skipping token %lu (Reason: It is optional)", buf, 0x16u);
                  }
                }
                else
                {
                  if ([v304 count])
                  {
                    uint64_t v143 = 0;
                    while (1)
                    {
                      v347.location = objc_msgSend((id)objc_msgSend(v304, "objectAtIndexedSubscript:", v143), "rangeValue");
                      v347.length = v144;
                      v336.location = v130;
                      v336.length = v129;
                      if (NSIntersectionRange(v336, v347).length) {
                        break;
                      }
                      if (++v143 >= (unint64_t)[v304 count]) {
                        goto LABEL_187;
                      }
                    }
                    int v151 = *__error();
                    uint64_t v152 = _SILogForLogForCategory(19);
                    if (os_log_type_enabled(v152, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)stat buf = 134218240;
                      *(void *)&uint8_t buf[4] = v292;
                      *(_WORD *)&unsigned char buf[12] = 2048;
                      *(void *)&unsigned char buf[14] = v126;
                      _os_log_impl(&dword_1BD672000, v152, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Token %lu has a date parse, will process it after all tokens are processed", buf, 0x16u);
                    }
                    *__error() = v151;
                    if (-[NSCharacterSet objectForKeyedSubscript:](v297, "objectForKeyedSubscript:", [NSNumber numberWithLong:v143]))
                    {
                      objc_msgSend((id)-[NSCharacterSet objectForKeyedSubscript:](v297, "objectForKeyedSubscript:", objc_msgSend(NSNumber, "numberWithLong:", v143)), "addObject:", v133);
                    }
                    else
                    {
                      uint64_t v167 = [MEMORY[0x1E4F1CA48] arrayWithObject:v133];
                      -[NSCharacterSet setObject:forKeyedSubscript:](v297, "setObject:forKeyedSubscript:", v167, [NSNumber numberWithLong:v143]);
                    }
                    goto LABEL_179;
                  }
LABEL_187:
                  char v145 = (char *)[(__CFString *)v133 UTF8String];
                  if (v145)
                  {
                    uint64_t v146 = qword_1EA0DAC00;
                    if (v126 == v271)
                    {
                      if (qword_1EA0DAC00)
                      {
                        int v147 = 0;
                        do
                        {
                          unint64_t v148 = (const char *)(v146 + 16);
                          if (*(char *)(v146 + 39) < 0) {
                            unint64_t v148 = *(const char **)v148;
                          }
                          int v149 = createQueryNode(v148, v145, 112, 1, -1, 0.0, 0.0);
                          int v147 = makeOrNode((uint64_t)v147, (uint64_t)v149);
                          uint64_t v146 = *(void *)v146;
                        }
                        while (v146);
                        goto LABEL_212;
                      }
                    }
                    else if (qword_1EA0DAC00)
                    {
                      int v147 = 0;
                      do
                      {
                        uint64_t v154 = (const char *)(v146 + 16);
                        if (*(char *)(v146 + 39) < 0) {
                          uint64_t v154 = *(const char **)v154;
                        }
                        size_t v155 = createQueryNode(v154, v145, 112, 1, 0, 0.0, 0.0);
                        int v147 = makeOrNode((uint64_t)v147, (uint64_t)v155);
                        uint64_t v146 = *(void *)v146;
                      }
                      while (v146);
                      goto LABEL_212;
                    }
                    int v147 = 0;
LABEL_212:
                    if ([v301 count])
                    {
                      uint64_t v156 = 0;
                      while (1)
                      {
                        v348.location = objc_msgSend((id)objc_msgSend(v301, "objectAtIndexedSubscript:", v156), "rangeValue");
                        v348.length = v157;
                        v337.location = v130;
                        v337.length = v129;
                        if (NSIntersectionRange(v337, v348).length) {
                          break;
                        }
                        if (++v156 >= (unint64_t)[v301 count]) {
                          goto LABEL_216;
                        }
                      }
                      v270 = createQueryNode("kMDItemPhotosFavorited", "1", 0, 1, 0, 0.0, 0.0);
                      int v158 = createQueryNode("kMDItemPhotosFavorited", "1", 0, 1, 0, 0.0, 0.0);
                      int v147 = makeOrNode((uint64_t)v147, (uint64_t)v158);
                    }
                    else
                    {
LABEL_216:
                      v270 = 0;
                    }
                    if ([obja count])
                    {
                      uint64_t v159 = 0;
                      while (1)
                      {
                        v349.location = objc_msgSend((id)objc_msgSend(obja, "objectAtIndexedSubscript:", v159), "rangeValue");
                        v349.length = v160;
                        v338.location = v130;
                        v338.length = v129;
                        if (NSIntersectionRange(v338, v349).length) {
                          break;
                        }
                        if (++v159 >= (unint64_t)[obja count]) {
                          goto LABEL_222;
                        }
                      }
                    }
                    else
                    {
LABEL_222:
                      uint64_t v159 = -1;
                    }
                    if ([v294 count])
                    {
                      uint64_t v161 = 0;
                      while (1)
                      {
                        v350.location = objc_msgSend((id)objc_msgSend(v294, "objectAtIndexedSubscript:", v161), "rangeValue");
                        v350.length = v162;
                        v339.location = v130;
                        v339.length = v129;
                        if (NSIntersectionRange(v339, v350).length) {
                          break;
                        }
                        if (++v161 >= (unint64_t)[v294 count]) {
                          goto LABEL_227;
                        }
                      }
                    }
                    else
                    {
LABEL_227:
                      uint64_t v161 = -1;
                    }
                    if (v159 == -1)
                    {
                      uint64_t v164 = v270;
                    }
                    else
                    {
                      int v163 = createQueryNode("kMDItemPhotosMediaTypes", v145, 112, 1, -1, 0.0, 0.0);
                      uint64_t v164 = makeOrNode((uint64_t)v270, (uint64_t)v163);
                    }
                    if (v161 != -1)
                    {
                      size_t v165 = createQueryNode("kMDItemPhotosPeopleNames", v145, 112, 1, -1, 0.0, 0.0);
                      uint64_t v164 = makeOrNode((uint64_t)v164, (uint64_t)v165);
                    }
                    if (v164)
                    {
                      --v306;
                      unint64_t v166 = makeAndNode((uint64_t)v307, (uint64_t)v164);
                    }
                    else
                    {
                      unint64_t v166 = v307;
                    }
                    v307 = v166;
                    v308 = makeAndNode((uint64_t)v308, (uint64_t)v147);
                    goto LABEL_179;
                  }
                  int v136 = *__error();
                  unsigned int v153 = _SILogForLogForCategory(19);
                  if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)stat buf = 134218240;
                    *(void *)&uint8_t buf[4] = v292;
                    *(_WORD *)&unsigned char buf[12] = 2048;
                    *(void *)&unsigned char buf[14] = v126;
                    _os_log_impl(&dword_1BD672000, v153, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Skipping token %lu (ERROR: UTF8 encoding of token failed)", buf, 0x16u);
                  }
                }
                goto LABEL_178;
              }
              int v134 = *__error();
              CFRange v135 = _SILogForLogForCategory(19);
              if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)stat buf = 134218240;
                *(void *)&uint8_t buf[4] = v292;
                *(_WORD *)&unsigned char buf[12] = 2048;
                *(void *)&unsigned char buf[14] = v126;
                _os_log_impl(&dword_1BD672000, v135, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Skipping token %lu (Reason: It has only special characters)", buf, 0x16u);
              }
              *__error() = v134;
            }
            --v306;
LABEL_179:
            if (++v126 == v282) {
              goto LABEL_287;
            }
          }
          int v136 = *__error();
          CFRange v137 = _SILogForLogForCategory(19);
          if (os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)stat buf = 134218752;
            *(void *)&uint8_t buf[4] = v292;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&unsigned char buf[14] = v126;
            *(_WORD *)&buf[22] = 2048;
            double v324 = NAN;
            *(_WORD *)v325 = 2048;
            *(void *)&v325[2] = v129;
            _os_log_impl(&dword_1BD672000, v137, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Skipping token %lu (ERROR: invalid range: (%ld, %ld))", buf, 0x2Au);
          }
          goto LABEL_178;
        }
LABEL_287:
        freeQueryTokensContext((CFTypeRef *)v273);
        if (![(NSCharacterSet *)v297 count]) {
          goto LABEL_244;
        }
        long long v319 = 0u;
        long long v320 = 0u;
        long long v317 = 0u;
        long long v318 = 0u;
        id objb = (id)[(NSCharacterSet *)v297 allKeys];
        uint64_t v302 = [objb countByEnumeratingWithState:&v317 objects:buf count:16];
        if (!v302) {
          goto LABEL_244;
        }
        uint64_t v295 = *(void *)v318;
LABEL_290:
        uint64_t v205 = 0;
        while (1)
        {
          if (*(void *)v318 != v295) {
            objc_enumerationMutation(objb);
          }
          __int16 v206 = *(void **)(*((void *)&v317 + 1) + 8 * v205);
          long long v313 = 0u;
          long long v314 = 0u;
          long long v315 = 0u;
          long long v316 = 0u;
          v305 = v206;
          int v207 = (void *)-[NSCharacterSet objectForKeyedSubscript:](v297, "objectForKeyedSubscript:");
          long long v208 = 0;
          uint64_t v209 = [v207 countByEnumeratingWithState:&v313 objects:v321 count:16];
          if (v209) {
            break;
          }
LABEL_313:
          v219 = (char *)objc_msgSend((id)objc_msgSend(v299, "objectAtIndexedSubscript:", (int)objc_msgSend(v305, "intValue")), "UTF8String");
          v220 = v219;
          if (v219)
          {
            query_node_with_ann = db_make_query_node_with_ann(v219, 0);
            v307 = makeAndNode((uint64_t)v307, (uint64_t)query_node_with_ann);
            v222 = db_make_query_node_with_ann(v220, 0);
          }
          else
          {
            v222 = 0;
          }
          v223 = makeOrNode((uint64_t)v208, (uint64_t)v222);
          v308 = makeAndNode((uint64_t)v308, (uint64_t)v223);
          if (++v205 == v302)
          {
            uint64_t v302 = [objb countByEnumeratingWithState:&v317 objects:buf count:16];
            if (!v302) {
              goto LABEL_244;
            }
            goto LABEL_290;
          }
        }
        uint64_t v210 = *(void *)v314;
LABEL_295:
        uint64_t v211 = 0;
        while (1)
        {
          if (*(void *)v314 != v210) {
            objc_enumerationMutation(v207);
          }
          long long v212 = (char *)[*(id *)(*((void *)&v313 + 1) + 8 * v211) UTF8String];
          if (!v212) {
            goto LABEL_311;
          }
          std::string::basic_string[abi:nn180100]<0>(__p, v212);
          BOOL v213 = isOptionalWord((char *)__p);
          BOOL v214 = v213;
          if (v312 < 0)
          {
            operator delete(__p[0]);
            if (!v214)
            {
LABEL_303:
              uint64_t v215 = qword_1EA0DAC00;
              if (qword_1EA0DAC00)
              {
                uint64_t v216 = 0;
                do
                {
                  v217 = (const char *)(v215 + 16);
                  if (*(char *)(v215 + 39) < 0) {
                    v217 = *(const char **)v217;
                  }
                  v218 = createQueryNode(v217, v212, 112, 1, 0, 0.0, 0.0);
                  uint64_t v216 = makeOrNode((uint64_t)v216, (uint64_t)v218);
                  uint64_t v215 = *(void *)v215;
                }
                while (v215);
              }
              else
              {
                uint64_t v216 = 0;
              }
              long long v208 = makeAndNode((uint64_t)v208, (uint64_t)v216);
            }
          }
          else if (!v213)
          {
            goto LABEL_303;
          }
LABEL_311:
          if (++v211 == v209)
          {
            uint64_t v209 = [v207 countByEnumeratingWithState:&v313 objects:v321 count:16];
            if (!v209) {
              goto LABEL_313;
            }
            goto LABEL_295;
          }
        }
      }
    }
    freeQueryTokensContext((CFTypeRef *)v273);
    int v168 = *__error();
    size_t v169 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v169, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134217984;
      *(void *)&uint8_t buf[4] = v292;
      _os_log_impl(&dword_1BD672000, v169, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Return no results (ERROR: zero tokens found from the userQuery)", buf, 0xCu);
    }
  }
  else
  {
    int v168 = *__error();
    unint64_t v170 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134217984;
      *(void *)&uint8_t buf[4] = v292;
      _os_log_impl(&dword_1BD672000, v170, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Return no results (ERROR: missing tokenization context on userQuery)", buf, 0xCu);
    }
  }
  *__error() = v168;
LABEL_244:
  if (v284)
  {
    int v171 = *__error();
    size_t v172 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v172, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134217984;
      *(void *)&uint8_t buf[4] = v292;
      _os_log_impl(&dword_1BD672000, v172, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Skipping aNN filters (U2 is disabled by client)", buf, 0xCu);
    }
    *__error() = v171;
    db_free_query_node(v307);
    v307 = 0;
  }
LABEL_248:
  size_t v173 = makeAndNode((uint64_t)v308, v309);
  size_t v174 = v173;
  if (v286)
  {
    int v175 = *__error();
    size_t v176 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v176, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134217984;
      *(void *)&uint8_t buf[4] = v292;
      _os_log_impl(&dword_1BD672000, v176, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Skipping metadata node (metadata search is disabled)", buf, 0xCu);
    }
    *__error() = v175;
    db_free_query_node(v174);
    size_t v174 = 0;
  }
  else if (!v173)
  {
    int v177 = *__error();
    unsigned int v178 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v178, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134217984;
      *(void *)&uint8_t buf[4] = v292;
      _os_log_impl(&dword_1BD672000, v178, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Skipping metadata node (query has no free tokens)", buf, 0xCu);
    }
    size_t v174 = 0;
    *__error() = v177;
  }
  if (theArraya)
  {
    int v179 = *__error();
    unsigned int v180 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v180, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134217984;
      *(void *)&uint8_t buf[4] = v292;
      _os_log_impl(&dword_1BD672000, v180, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Skipping ANN node (semantic search is disabled)", buf, 0xCu);
    }
LABEL_321:
    v225 = 0;
    *__error() = v179;
    goto LABEL_322;
  }
  char v181 = v286;
  if (v174) {
    char v181 = 1;
  }
  if ((v181 & 1) == 0)
  {
    int v179 = *__error();
    v203 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v203, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134217984;
      *(void *)&uint8_t buf[4] = v292;
      _os_log_impl(&dword_1BD672000, v203, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Skipping ANN node (query has only suggestions)", buf, 0xCu);
    }
    goto LABEL_321;
  }
  uint64_t v182 = v306;
  if (v306 <= 0)
  {
    int v179 = *__error();
    v224 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v224, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134217984;
      *(void *)&uint8_t buf[4] = v292;
      _os_log_impl(&dword_1BD672000, v224, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Skipping ANN node (no visual token in the query)", buf, 0xCu);
    }
    goto LABEL_321;
  }
  if (!theDict || !CFDictionaryContainsKey(theDict, @"kQPQueryPhotoEmbeddingEncodedData"))
  {
    int v179 = *__error();
    v204 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v204, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134217984;
      *(void *)&uint8_t buf[4] = v292;
      _os_log_impl(&dword_1BD672000, v204, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Skipping ANN node (ERROR: missing query embedding)", buf, 0xCu);
    }
    goto LABEL_321;
  }
  CFDataRef v183 = (const __CFData *)CFDictionaryGetValue(theDict, @"kQPQueryPhotoEmbeddingEncodedData");
  if (!v183)
  {
    int v179 = *__error();
    v243 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v243, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134217984;
      *(void *)&uint8_t buf[4] = v292;
      _os_log_impl(&dword_1BD672000, v243, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Skipping ANN node (ERROR: encoded query embedding in null)", buf, 0xCu);
    }
    goto LABEL_321;
  }
  CFDictionaryRef v184 = decodeEmbeddingData(v183);
  if (!v184)
  {
    int v179 = *__error();
    v244 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v244, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134217984;
      *(void *)&uint8_t buf[4] = v292;
      _os_log_impl(&dword_1BD672000, v244, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Skipping ANN node (ERROR: decoded query embedding in null)", buf, 0xCu);
    }
    goto LABEL_321;
  }
  CFDictionaryRef v185 = v184;
  int v186 = objc_msgSend((id)CFDictionaryGetValue(theDict, @"embeddingVersion"), "intValue");
  uint64_t v187 = (void *)CFDictionaryGetValue(theDict, @"embeddingRelevanceThreshold");
  if (v187
    && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
    && ([v187 floatValue], v188 >= 0.0))
  {
    v258 = (void *)CFDictionaryGetValue(theDict, @"embeddingScale");
    v259 = (void *)CFDictionaryGetValue(theDict, @"embeddingBias");
    [v187 floatValue];
    float v261 = logf(v260);
    [v187 floatValue];
    float v263 = logf(1.0 - v262);
    [v258 floatValue];
    float v265 = v264;
    [v259 floatValue];
    float v192 = _scaleBiasBasedAnnThresh(v261 - v263, v265, v266, v186);
    int v267 = *__error();
    v268 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v268, OS_LOG_TYPE_DEFAULT))
    {
      [v187 floatValue];
      *(_DWORD *)stat buf = 134218240;
      *(double *)&uint8_t buf[4] = v192;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&unsigned char buf[14] = v269;
      _os_log_impl(&dword_1BD672000, v268, OS_LOG_TYPE_DEFAULT, "Threshold based on client supplied values: %f, rel: %f", buf, 0x16u);
    }
    *__error() = v267;
  }
  else
  {
    uint64_t v189 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "valueForKey:", @"SpotlightL1PhotosThresh");
    if (!v189) {
      goto LABEL_276;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      goto LABEL_276;
    }
    [v189 floatValue];
    float v191 = v190;
    float v192 = (float)(1.0 - v191) + (float)(1.0 - v191);
    int v193 = *__error();
    uint64_t v194 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v194, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134218240;
      *(double *)&uint8_t buf[4] = v191;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&unsigned char buf[14] = v192;
      _os_log_impl(&dword_1BD672000, v194, OS_LOG_TYPE_DEFAULT, "Using user default threshold: %f, distance: %f", buf, 0x16u);
    }
    *__error() = v193;
    if (v192 == -1.0)
    {
LABEL_276:
      v195 = (void *)CFDictionaryGetValue(theDict, @"embeddingScale");
      size_t v196 = (void *)CFDictionaryGetValue(theDict, @"embeddingBias");
      [v195 floatValue];
      float v198 = v197;
      [v196 floatValue];
      float v192 = _scaleBiasBasedAnnThresh(-3.4028e38, v198, v199, v186);
    }
  }
  unint64_t v200 = [(__CFDictionary *)v185 length];
  if (v200 > 1)
  {
    uint64_t v245 = [(__CFDictionary *)v185 bytes];
    if (v245)
    {
      v246 = (void *)MEMORY[0x1E4F14B00];
      if (*MEMORY[0x1E4F14B00] <= 0x12FuLL) {
        ++sTotal;
      }
      v247 = (float *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x130uLL, 0x31F9A007uLL);
      unint64_t v248 = v200 >> 1;
      if (!v247) {
        _log_fault_for_malloc_failure();
      }
      *(void *)v247 = strdup("_kMDItemPhotoEmbedding");
      *((_DWORD *)v247 + 6) = 15;
      if (v248 == 512) {
        int v249 = 5;
      }
      else {
        int v249 = 6;
      }
      v247[16] = v192;
      *((_DWORD *)v247 + 15) = v249 | (16 * (v276 & 0xFFFFF)) | (v186 << 25);
      *((_DWORD *)v247 + 10) = 5;
      *((_DWORD *)v247 + 40) |= 0x10000u;
      v250 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v200 & 0xFFFFFFFFFFFFFFFELL, 0x6085D6BuLL);
      if (!v250) {
        _log_fault_for_malloc_failure();
      }
      uint64_t v251 = 0;
      *((void *)v247 + 37) = v250;
      if (v248 <= 1) {
        uint64_t v252 = 1;
      }
      else {
        uint64_t v252 = v200 >> 1;
      }
      do
      {
        *(_WORD *)(*((void *)v247 + 37) + 2 * v251) = *(_WORD *)(v245 + 2 * v251);
        ++v251;
      }
      while (v252 != v251);
      if (*v246 <= 0x4FuLL) {
        ++sTotal;
      }
      v253 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x50uLL, 0x31F9A007uLL);
      if (v253)
      {
        v253[24] = 4;
        *((void *)v253 + 2) = v247;
        v225 = makeAndNode((uint64_t)v253, (uint64_t)v307);
        unint64_t v254 = [(__CFDictionary *)v185 length];
        int v255 = *__error();
        v256 = _SILogForLogForCategory(19);
        if (os_log_type_enabled(v256, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)stat buf = 134219008;
          *(void *)&uint8_t buf[4] = v292;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v254 >> 1;
          *(_WORD *)&buf[22] = 2048;
          double v324 = v192;
          *(_WORD *)v325 = 1024;
          *(_DWORD *)&v325[2] = v276;
          *(_WORD *)&v325[6] = 2048;
          *(void *)&v325[8] = v182;
          _os_log_impl(&dword_1BD672000, v256, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Adding ANN node (dim: %lu, thresh: %f, num results: %d, visual tokens: %ld)", buf, 0x30u);
        }
        *__error() = v255;
      }
      else
      {
        _log_fault_for_malloc_failure();
        v225 = 0;
        MEMORY[0x30] = 4;
        MEMORY[0x10] = v247;
      }
      goto LABEL_379;
    }
    int v201 = *__error();
    v257 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v257, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl(&dword_1BD672000, v257, OS_LOG_TYPE_DEFAULT, "Skipping ANN node (ERROR: Failed to get byte from embedding)", buf, 2u);
    }
  }
  else
  {
    int v201 = *__error();
    v202 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v202, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl(&dword_1BD672000, v202, OS_LOG_TYPE_DEFAULT, "Skipping ANN node (ERROR: embedding has 0 dimensionality)", buf, 2u);
    }
  }
  v225 = 0;
  *__error() = v201;
LABEL_379:
  CFRelease(v185);
LABEL_322:
  if (!v225 && v307)
  {
    *(void *)stat buf = MEMORY[0x1E4F143A8];
    *(void *)&uint8_t buf[8] = 0x40000000;
    *(void *)&uint8_t buf[16] = __db_query_tree_apply_block_block_invoke;
    double v324 = COERCE_DOUBLE(&unk_1E6348598);
    *(void *)v325 = &__block_literal_global_161;
    db_query_tree_apply_block_with_meta(v307, (uint64_t)buf, 0);
  }
  v226 = makeOrNode((uint64_t)v225, (uint64_t)v174);
  unsigned int v17 = makeAndNode((uint64_t)v226, v310);
  if (!v17)
  {
    unsigned int v17 = makeFalseNode();
    int v227 = *__error();
    v228 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v228, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134217984;
      *(void *)&uint8_t buf[4] = v292;
      _os_log_impl(&dword_1BD672000, v228, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Return no results (missing all nodes)", buf, 0xCu);
    }
    *__error() = v227;
  }
  return v17;
}

void PhPopulateFiltersFromQuery(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int v14 = (void *)MEMORY[0x1C1881FD0]();
  int v15 = *__error();
  if (a6)
  {
    uint64_t v16 = _SILogForLogForCategory(20);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134217984;
      uint64_t v21 = a7;
LABEL_6:
      _os_log_impl(&dword_1BD672000, v16, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Processing attributed query", buf, 0xCu);
    }
  }
  else
  {
    uint64_t v16 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134217984;
      uint64_t v21 = a7;
      goto LABEL_6;
    }
  }
  *__error() = v15;
  uint64_t v17 = [a1 length];
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  _OWORD v18[2] = ___ZL26PhPopulateFiltersFromQueryPK20__CFAttributedStringPP10query_nodeS4_P14NSMutableArrayIP7NSValueES9_by_block_invoke;
  void v18[3] = &unk_1E6348C48;
  v18[4] = a4;
  v18[5] = a5;
  char v19 = a6;
  v18[6] = a7;
  v18[7] = a2;
  v18[8] = a3;
  objc_msgSend(a1, "enumerateAttributesInRange:options:usingBlock:", 0, v17, 0, v18);
}

uint64_t getkQPQUOutputTokenInfoKey()
{
  uint64_t v4 = 0;
  unint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v0 = getkQPQUOutputTokenInfoKeySymbolLoc(void)::ptr;
  uint64_t v7 = getkQPQUOutputTokenInfoKeySymbolLoc(void)::ptr;
  if (!getkQPQUOutputTokenInfoKeySymbolLoc(void)::ptr)
  {
    ParserLibrary = QueryParserLibrary();
    v5[3] = (uint64_t)dlsym(ParserLibrary, "kQPQUOutputTokenInfoKey");
    getkQPQUOutputTokenInfoKeySymbolLoc(void)::unint64_t ptr = v5[3];
    uint64_t v0 = v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (v0) {
    return *(void *)v0;
  }
  uint64_t v3 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
  uint64_t result = objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "CFStringRef  _Nullable getkQPQUOutputTokenInfoKey()"), @"PRQueryPhotosProcessor.mm", 28, @"%s", dlerror());
  __break(1u);
  return result;
}

void sub_1BDA634AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *PhRankingTreeFromU2Parse(const __CFDictionary *a1, void *a2, void *a3, NSCharacterSet *a4, uint64_t a5)
{
  uint64_t v303 = *MEMORY[0x1E4F143B8];
  int v6 = *__error();
  uint64_t v7 = _SILogForLogForCategory(20);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 134217984;
    *(void *)&uint8_t buf[4] = a5;
    _os_log_impl(&dword_1BD672000, v7, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Processing query understanding output to create ranking tree", buf, 0xCu);
  }
  *__error() = v6;
  CFDictionaryRef v8 = (const void *)getkQPQUOutputTokenInfoKey();
  CFArrayRef theArray = (const __CFArray *)CFDictionaryGetValue(a1, v8);
  CFNumberRef Value = (void *)CFDictionaryGetValue(a1, @"attributedParse");
  v274 = (void *)[MEMORY[0x1E4F1CA48] array];
  float v263 = (void *)[MEMORY[0x1E4F1CA48] array];
  uint64_t v9 = [Value length];
  *(void *)stat buf = MEMORY[0x1E4F143A8];
  *(void *)&uint8_t buf[8] = 3221225472;
  *(void *)&uint8_t buf[16] = ___ZL29PhPopulateDateFilterFromParseP18NSAttributedStringP14NSMutableArrayIP8NSStringEPS1_IP7NSValueE_block_invoke_13446;
  *(void *)uint64_t v302 = &unk_1E6348D10;
  *(void *)&v302[8] = v274;
  *(void *)&v302[16] = v263;
  objc_msgSend(Value, "enumerateAttributesInRange:options:usingBlock:", 0, v9, 0, buf);
  if ([v263 count])
  {
    int v10 = *__error();
    int v11 = _SILogForLogForCategory(20);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = [v263 count];
      *(_DWORD *)stat buf = 134218240;
      *(void *)&uint8_t buf[4] = a5;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&unsigned char buf[14] = v12;
      _os_log_impl(&dword_1BD672000, v11, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Populated %lu date filters from U2 parse", buf, 0x16u);
    }
    *__error() = v10;
  }
  if (![v274 count])
  {
    if (CFDictionaryContainsKey(a1, @"attributedParses"))
    {
      int v100 = (void *)CFDictionaryGetValue(a1, @"attributedParses");
      if ((unint64_t)[v100 count] >= 2)
      {
        int v101 = (void *)[v100 objectAtIndexedSubscript:1];
        uint64_t v102 = [v101 length];
        *(void *)stat buf = MEMORY[0x1E4F143A8];
        *(void *)&uint8_t buf[8] = 3221225472;
        *(void *)&uint8_t buf[16] = ___ZL29PhPopulateDateFilterFromParseP18NSAttributedStringP14NSMutableArrayIP8NSStringEPS1_IP7NSValueE_block_invoke_13446;
        *(void *)uint64_t v302 = &unk_1E6348D10;
        *(void *)&v302[8] = v274;
        *(void *)&v302[16] = v263;
        objc_msgSend(v101, "enumerateAttributesInRange:options:usingBlock:", 0, v102, 0, buf);
        if ([v263 count])
        {
          int v103 = *__error();
          CFNumberRef v104 = _SILogForLogForCategory(20);
          if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v105 = [v263 count];
            *(_DWORD *)stat buf = 134218240;
            *(void *)&uint8_t buf[4] = a5;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&unsigned char buf[14] = v105;
            _os_log_impl(&dword_1BD672000, v104, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Populated %lu date filters from QP parse", buf, 0x16u);
          }
          *__error() = v103;
        }
      }
    }
  }
  obunint64_t j = (void *)[MEMORY[0x1E4F1CA80] set];
  v257 = (void *)[MEMORY[0x1E4F1CA48] array];
  v258 = (void *)[MEMORY[0x1E4F1CA48] array];
  uint64_t v252 = (void *)[MEMORY[0x1E4F1CA48] array];
  uint64_t v251 = (void *)[MEMORY[0x1E4F1CA48] array];
  v259 = (void *)[MEMORY[0x1E4F1CA48] array];
  v253 = (void *)[MEMORY[0x1E4F1CA48] array];
  CFIndex Count = CFArrayGetCount(theArray);
  uint64_t v262 = Count;
  if (Count >= 1)
  {
    CFIndex v246 = Count - 1;
    char v260 = 0;
    CFIndex v15 = 0;
    char v250 = 1;
    int v248 = -1;
    uint64_t v249 = -1;
    *(void *)&long long v14 = 134218754;
    long long v245 = v14;
    uint64_t v247 = -1;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v15);
      uint64_t v17 = (const void *)getkQPQUOutputTokenRangeKey();
      if (!CFDictionaryContainsKey(ValueAtIndex, v17)
        || (uint64_t v18 = (const void *)getkQPQUOutputTokenArgIdsKey(), !CFDictionaryContainsKey(ValueAtIndex, v18))
        || (char v19 = (const void *)getkQPQUOutputTokenArgScoresKey(), !CFDictionaryContainsKey(ValueAtIndex, v19))
        || (uint64_t v20 = (const void *)getkQPQUOutputTokenKey(), !CFDictionaryContainsKey(ValueAtIndex, v20)))
      {
        int v24 = *__error();
        int v27 = _SILogForLogForCategory(20);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)stat buf = 134218240;
          *(void *)&uint8_t buf[4] = a5;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v15;
          _os_log_impl(&dword_1BD672000, v27, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Skipping token: %lu (ERROR: token info is missing essential keys)", buf, 0x16u);
        }
        goto LABEL_20;
      }
      uint64_t v21 = (const void *)getkQPQUOutputTokenRangeKey();
      uint64_t v22 = objc_msgSend((id)CFDictionaryGetValue(ValueAtIndex, v21), "rangeValue");
      NSUInteger v265 = v23;
      NSUInteger v267 = v22;
      if (v22 == 0x7FFFFFFFFFFFFFFFLL)
      {
        int v24 = *__error();
        __n128 v25 = _SILogForLogForCategory(20);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          v304.length = v265;
          v304.location = 0x7FFFFFFFFFFFFFFFLL;
          double v26 = NSStringFromRange(v304);
          *(_DWORD *)stat buf = 134218498;
          *(void *)&uint8_t buf[4] = a5;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v15;
          *(_WORD *)&buf[22] = 2112;
          *(void *)uint64_t v302 = v26;
          _os_log_impl(&dword_1BD672000, v25, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Skipping token: %lu (ERROR: invalid range: %@)", buf, 0x20u);
        }
        goto LABEL_20;
      }
      if ([a3 count])
      {
        uint64_t v28 = 0;
        while (1)
        {
          v325.location = objc_msgSend((id)objc_msgSend(a3, "objectAtIndexedSubscript:", v28, v245), "rangeValue");
          v325.length = v29;
          v305.length = v265;
          v305.location = v267;
          if (NSIntersectionRange(v305, v325).length) {
            break;
          }
          if (++v28 >= (unint64_t)[a3 count]) {
            goto LABEL_27;
          }
        }
        int v55 = *__error();
        uint64_t v56 = _SILogForLogForCategory(20);
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)stat buf = 134218240;
          *(void *)&uint8_t buf[4] = a5;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v15;
          _os_log_impl(&dword_1BD672000, v56, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Skipping token: %lu (Reason: It is a suggestion token)", buf, 0x16u);
        }
        *__error() = v55;
        goto LABEL_21;
      }
LABEL_27:
      if (objc_msgSend(v263, "count", v245))
      {
        uint64_t v30 = 0;
        while (1)
        {
          v326.location = objc_msgSend((id)objc_msgSend(v263, "objectAtIndexedSubscript:", v30), "rangeValue");
          v326.length = v31;
          v306.length = v265;
          v306.location = v267;
          if (NSIntersectionRange(v306, v326).length) {
            break;
          }
          if (++v30 >= (unint64_t)[v263 count]) {
            goto LABEL_31;
          }
        }
        int v57 = *__error();
        int v58 = _SILogForLogForCategory(20);
        if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)stat buf = 134218496;
          *(void *)&uint8_t buf[4] = a5;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v15;
          *(_WORD *)&buf[22] = 2048;
          *(void *)uint64_t v302 = v30;
          _os_log_impl(&dword_1BD672000, v58, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token: %lu has a date parse (Date parse idx: %lu)", buf, 0x20u);
        }
        *__error() = v57;
        if ((objc_msgSend(obj, "containsObject:", objc_msgSend(NSNumber, "numberWithLong:", v30)) & 1) == 0) {
          objc_msgSend(obj, "addObject:", objc_msgSend(NSNumber, "numberWithLong:", v30));
        }
        if ([v257 count] && v15 == v249 + 1)
        {
          uint64_t v59 = [v257 count] - 1;
          uint64_t v60 = objc_msgSend((id)objc_msgSend(v257, "objectAtIndexedSubscript:", v59), "rangeValue");
          NSUInteger v61 = v60;
          if (v60 == 0x7FFFFFFFFFFFFFFFLL) {
            NSUInteger v62 = 0;
          }
          else {
            NSUInteger v62 = v267 + v265 - v60;
          }
          objc_msgSend(v257, "setObject:atIndexedSubscript:", objc_msgSend(MEMORY[0x1E4F29238], "valueWithRange:", v60, v62), v59);
          int v63 = *__error();
          double v64 = _SILogForLogForCategory(20);
          if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
          {
            v307.location = v61;
            v307.length = v62;
            NSUInteger v65 = NSStringFromRange(v307);
            *(_DWORD *)stat buf = 134218498;
            *(void *)&uint8_t buf[4] = a5;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&unsigned char buf[14] = v15;
            *(_WORD *)&buf[22] = 2112;
            *(void *)uint64_t v302 = v65;
            _os_log_impl(&dword_1BD672000, v64, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token: %lu merged with previous time span (updated range: %@)", buf, 0x20u);
          }
          *__error() = v63;
        }
        else
        {
          objc_msgSend(v257, "addObject:", objc_msgSend(MEMORY[0x1E4F29238], "valueWithRange:", v267, v265));
          int v73 = *__error();
          long long v74 = _SILogForLogForCategory(20);
          if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
          {
            v308.length = v265;
            v308.location = v267;
            int v75 = NSStringFromRange(v308);
            *(_DWORD *)stat buf = 134218498;
            *(void *)&uint8_t buf[4] = a5;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&unsigned char buf[14] = v15;
            *(_WORD *)&buf[22] = 2112;
            *(void *)uint64_t v302 = v75;
            _os_log_impl(&dword_1BD672000, v74, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token: %lu is a new time span (added range: %@)", buf, 0x20u);
          }
          *__error() = v73;
        }
        uint64_t v249 = v15;
        goto LABEL_21;
      }
LABEL_31:
      uint64_t v32 = (const void *)getkQPQUOutputTokenArgIdsKey();
      int v33 = (void *)CFDictionaryGetValue(ValueAtIndex, v32);
      uint64_t v34 = (const void *)getkQPQUOutputTokenArgScoresKey();
      uint64_t v35 = (void *)CFDictionaryGetValue(ValueAtIndex, v34);
      uint64_t v36 = (const void *)getkQPQUOutputSpanTypesKey();
      uint64_t v37 = (void *)CFDictionaryGetValue(ValueAtIndex, v36);
      if ([v33 count])
      {
        uint64_t v38 = [v33 count];
        if (v38 != [v35 count])
        {
          int v53 = *__error();
          uint64_t v70 = _SILogForLogForCategory(20);
          float v41 = 0.0;
          if (!os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v52 = 2;
            goto LABEL_88;
          }
          uint64_t v71 = [v33 count];
          uint64_t v72 = [v35 count];
          *(_DWORD *)stat buf = 134219008;
          *(void *)&uint8_t buf[4] = a5;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v15;
          *(_WORD *)&buf[22] = 1024;
          uint64_t v52 = 2;
          *(_DWORD *)uint64_t v302 = 2;
          *(_WORD *)&v302[4] = 2048;
          *(void *)&v302[6] = v71;
          *(_WORD *)&v302[14] = 2048;
          *(void *)&v302[16] = v72;
          unint64_t v67 = v70;
          int v68 = "[qid=%llu] {U2} Token: %lu is using default label: %d (ERROR: tokIds.count(%lu) != tokIdsScore.count(%lu))";
          uint32_t v69 = 48;
          goto LABEL_82;
        }
        unsigned int v39 = objc_msgSend((id)objc_msgSend(v33, "objectAtIndexedSubscript:", 0), "intValue");
        objc_msgSend((id)objc_msgSend(v35, "objectAtIndexedSubscript:", 0), "floatValue");
        float v41 = v40;
        long long v283 = 0u;
        long long v284 = 0u;
        long long v281 = 0u;
        long long v282 = 0u;
        uint64_t v42 = [v37 countByEnumeratingWithState:&v281 objects:v290 count:16];
        if (v42)
        {
          uint64_t v43 = *(void *)v282;
          do
          {
            uint64_t v44 = 0;
            do
            {
              if (*(void *)v282 != v43) {
                objc_enumerationMutation(v37);
              }
              NSUInteger v45 = *(void **)(*((void *)&v281 + 1) + 8 * v44);
              if ([v45 isEqualToString:@"Person"])
              {
                int v46 = 2;
LABEL_42:
                int v47 = *__error();
                NSUInteger v48 = _SILogForLogForCategory(20);
                float v41 = 1.0;
                if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)stat buf = 134218752;
                  *(void *)&uint8_t buf[4] = a5;
                  *(_WORD *)&unsigned char buf[12] = 2048;
                  *(void *)&unsigned char buf[14] = v15;
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)uint64_t v302 = v39;
                  *(_WORD *)&v302[4] = 1024;
                  *(_DWORD *)&v302[6] = v46;
                  _os_log_impl(&dword_1BD672000, v48, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu type is updated from %d to span %d", buf, 0x22u);
                }
                unsigned int v39 = v46;
                goto LABEL_45;
              }
              if ([v45 isEqualToString:@"Location"])
              {
                int v46 = 10;
                goto LABEL_42;
              }
              int v47 = *__error();
              double v49 = _SILogForLogForCategory(20);
              if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)stat buf = 134218498;
                *(void *)&uint8_t buf[4] = a5;
                *(_WORD *)&unsigned char buf[12] = 2048;
                *(void *)&unsigned char buf[14] = v15;
                *(_WORD *)&buf[22] = 2112;
                *(void *)uint64_t v302 = v45;
                _os_log_impl(&dword_1BD672000, v49, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu has unsupported span: %@, skipping it", buf, 0x20u);
              }
LABEL_45:
              *__error() = v47;
              ++v44;
            }
            while (v42 != v44);
            uint64_t v50 = [v37 countByEnumeratingWithState:&v281 objects:v290 count:16];
            uint64_t v42 = v50;
          }
          while (v50);
        }
        if (v39 == 57 || v39 == 55) {
          uint64_t v52 = 10;
        }
        else {
          uint64_t v52 = v39;
        }
        if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32(vdupq_n_s32(v52), (int32x4_t)xmmword_1BDA82780))) & 1) != 0
          || (v52 & 0xFFFFFFFB) == 1
          || (v52 & 0xFFFFFFF5) == 0
          || (v52 - 3) < 2)
        {
          if (!v52 && v41 >= 0.5)
          {
            int v24 = *__error();
            int v84 = _SILogForLogForCategory(20);
            if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)stat buf = 134218240;
              *(void *)&uint8_t buf[4] = a5;
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&unsigned char buf[14] = v15;
              _os_log_impl(&dword_1BD672000, v84, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token: %lu is skipped (Reason: It is optional as per QU model)", buf, 0x16u);
            }
            goto LABEL_20;
          }
          goto LABEL_89;
        }
        int v53 = *__error();
        int v54 = _SILogForLogForCategory(20);
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)stat buf = 134218496;
          *(void *)&uint8_t buf[4] = a5;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v15;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)uint64_t v302 = v52;
          _os_log_impl(&dword_1BD672000, v54, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token: %lu is interpreted as ARG_NOUN (Reason: Its U2 id: %d is not supported)", buf, 0x1Cu);
        }
        uint64_t v52 = 5;
      }
      else
      {
        int v53 = *__error();
        BOOL v66 = _SILogForLogForCategory(20);
        float v41 = 0.0;
        uint64_t v52 = 2;
        if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)stat buf = 134218496;
          *(void *)&uint8_t buf[4] = a5;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v15;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)uint64_t v302 = 2;
          unint64_t v67 = v66;
          int v68 = "[qid=%llu] {U2} Token: %lu is using default label: %d (ERROR: no U2 labels found)";
          uint32_t v69 = 28;
LABEL_82:
          _os_log_impl(&dword_1BD672000, v67, OS_LOG_TYPE_DEFAULT, v68, buf, v69);
        }
      }
LABEL_88:
      *__error() = v53;
LABEL_89:
      long long v76 = (const void *)getkQPQUOutputTokenKey();
      int v77 = (void *)CFDictionaryGetValue(ValueAtIndex, v76);
      if (_containsOnlyCharsInCharset((NSString *)v77, a4))
      {
        int v24 = *__error();
        long long v78 = _SILogForLogForCategory(20);
        if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)stat buf = 134218240;
          *(void *)&uint8_t buf[4] = a5;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v15;
          _os_log_impl(&dword_1BD672000, v78, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token: %lu is skipped (Reason: It has only trimmable chars)", buf, 0x16u);
        }
      }
      else
      {
        __int16 v79 = (char *)[v77 UTF8String];
        if (v79)
        {
          std::string::basic_string[abi:nn180100]<0>(buf, v79);
          BOOL v80 = isOptionalWord(buf);
          BOOL v81 = v80;
          if ((buf[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)buf);
            if (!v81)
            {
LABEL_108:
              if ([v258 count] && v52 == v248 && v15 == v247 + 1)
              {
                uint64_t v85 = [v258 count] - 1;
                uint64_t v86 = objc_msgSend((id)objc_msgSend(v258, "objectAtIndexedSubscript:", v85), "rangeValue");
                NSUInteger v87 = v86;
                if (v86 == 0x7FFFFFFFFFFFFFFFLL) {
                  NSUInteger v88 = 0;
                }
                else {
                  NSUInteger v88 = v267 + v265 - v86;
                }
                objc_msgSend(v258, "setObject:atIndexedSubscript:", objc_msgSend(MEMORY[0x1E4F29238], "valueWithRange:", v86, v88), v85);
                uint64_t v89 = NSNumber;
                objc_msgSend((id)objc_msgSend(v251, "objectAtIndexedSubscript:", v85), "floatValue");
                if (*(float *)&v90 >= v41) {
                  *(float *)&double v90 = v41;
                }
                objc_msgSend(v251, "setObject:atIndexedSubscript:", objc_msgSend(v89, "numberWithFloat:", v90), v85);
                int v91 = *__error();
                unsigned int v92 = _SILogForLogForCategory(20);
                if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
                {
                  v309.location = v87;
                  v309.length = v88;
                  uint64_t v93 = NSStringFromRange(v309);
                  *(_DWORD *)stat buf = v245;
                  *(void *)&uint8_t buf[4] = a5;
                  *(_WORD *)&unsigned char buf[12] = 2048;
                  *(void *)&unsigned char buf[14] = v15;
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)uint64_t v302 = v248;
                  *(_WORD *)&v302[4] = 2112;
                  *(void *)&v302[6] = v93;
                  unsigned int v94 = v92;
                  uint64_t v95 = "[qid=%llu] {U2} Token: %lu merged with previous span with type %d (updated range: %@)";
                  uint32_t v96 = 38;
                  goto LABEL_120;
                }
              }
              else
              {
                objc_msgSend(v258, "addObject:", objc_msgSend(MEMORY[0x1E4F29238], "valueWithRange:", v267, v265));
                objc_msgSend(v252, "addObject:", objc_msgSend(NSNumber, "numberWithInt:", v52));
                *(float *)&double v97 = v41;
                objc_msgSend(v251, "addObject:", objc_msgSend(NSNumber, "numberWithFloat:", v97));
                int v91 = *__error();
                long long v98 = _SILogForLogForCategory(20);
                if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
                {
                  v310.length = v265;
                  v310.location = v267;
                  unint64_t v99 = NSStringFromRange(v310);
                  *(_DWORD *)stat buf = 134219010;
                  *(void *)&uint8_t buf[4] = a5;
                  *(_WORD *)&unsigned char buf[12] = 2048;
                  *(void *)&unsigned char buf[14] = v15;
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)uint64_t v302 = v52;
                  *(_WORD *)&v302[4] = 2048;
                  *(double *)&v302[6] = v41;
                  *(_WORD *)&v302[14] = 2112;
                  *(void *)&v302[16] = v99;
                  unsigned int v94 = v98;
                  uint64_t v95 = "[qid=%llu] {U2} Token: %lu is a new span with type: %d, conf: %f (added range: %@)";
                  uint32_t v96 = 48;
LABEL_120:
                  _os_log_impl(&dword_1BD672000, v94, OS_LOG_TYPE_DEFAULT, v95, buf, v96);
                }
              }
              *__error() = v91;
              objc_msgSend(v259, "addObject:", objc_msgSend(MEMORY[0x1E4F29238], "valueWithRange:", v267, v265));
              objc_msgSend(v253, "addObject:", objc_msgSend(NSNumber, "numberWithInt:", v52));
              v250 &= v15 != v246;
              uint64_t v247 = v15;
              int v248 = v52;
              goto LABEL_21;
            }
          }
          else if (!v80)
          {
            goto LABEL_108;
          }
          int v24 = *__error();
          uint64_t v82 = _SILogForLogForCategory(20);
          if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)stat buf = 134218240;
            *(void *)&uint8_t buf[4] = a5;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&unsigned char buf[14] = v15;
            _os_log_impl(&dword_1BD672000, v82, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token: %lu is skipped (Reason: It is optional as per optional dictionary)", buf, 0x16u);
          }
        }
        else
        {
          int v24 = *__error();
          int v83 = _SILogForLogForCategory(20);
          if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)stat buf = 134218240;
            *(void *)&uint8_t buf[4] = a5;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&unsigned char buf[14] = v15;
            _os_log_impl(&dword_1BD672000, v83, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token: %lu is skipped (ERROR: UTF8 encoding of token failed)", buf, 0x16u);
          }
        }
      }
LABEL_20:
      *__error() = v24;
      char v260 = 1;
LABEL_21:
      if (++v15 == v262) {
        goto LABEL_129;
      }
    }
  }
  char v260 = 0;
  char v250 = 1;
LABEL_129:
  v268 = objc_msgSend(Value, "string", v245);
  uint64_t v280 = 0;
  CFArrayRef matched = PhExactMatchTree(v268, a3, (uint64_t)a4, v262, &v280, a5);
  if (![v268 length])
  {
    int v139 = *__error();
    uint64_t v140 = _SILogForLogForCategory(20);
    if (os_log_type_enabled(v140, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134217984;
      *(void *)&uint8_t buf[4] = a5;
      _os_log_impl(&dword_1BD672000, v140, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Span Match} Skipping query (Reason: empty query)", buf, 0xCu);
    }
    goto LABEL_158;
  }
  if (![v258 count] && !objc_msgSend(obj, "count"))
  {
    int v139 = *__error();
    unint64_t v142 = _SILogForLogForCategory(20);
    if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134217984;
      *(void *)&uint8_t buf[4] = a5;
      _os_log_impl(&dword_1BD672000, v142, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Span Match} Skipping query (Reason: no spans and no time parses in the query)", buf, 0xCu);
    }
LABEL_158:
    NSUInteger v141 = __error();
    unsigned int v108 = 0;
LABEL_241:
    *NSUInteger v141 = v139;
    goto LABEL_242;
  }
  uint64_t v106 = [v258 count];
  if (v106 == [v252 count])
  {
    uint64_t v107 = [v258 count];
    if (v107 == [v251 count])
    {
      unint64_t v270 = [v268 length];
      int v289 = 0;
      if ([v258 count] && objc_msgSend(v257, "count"))
      {
        unsigned int v108 = 0;
        uint64_t v109 = 0;
        while (1)
        {
          uint64_t v110 = objc_msgSend((id)objc_msgSend(v257, "objectAtIndexedSubscript:", v109), "rangeValue");
          NSUInteger v112 = v110;
          NSUInteger v113 = v111;
          if (v110 == 0x7FFFFFFFFFFFFFFFLL || v110 + v111 > v270)
          {
            int v127 = *__error();
            NSUInteger v128 = _SILogForLogForCategory(20);
            if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
            {
              v311.location = v112;
              v311.length = v113;
              NSUInteger v129 = NSStringFromRange(v311);
              *(_DWORD *)stat buf = 134218498;
              *(void *)&uint8_t buf[4] = a5;
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&unsigned char buf[14] = v109;
              *(_WORD *)&buf[22] = 2112;
              *(void *)uint64_t v302 = v129;
              _os_log_impl(&dword_1BD672000, v128, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Span Match} Skipping time span: %lu (ERROR: out of bounds range %@)", buf, 0x20u);
            }
            goto LABEL_150;
          }
          int v114 = objc_msgSend(v268, "substringWithRange:", v110, v111);
          if (![v114 length]) {
            break;
          }
          uint64_t v115 = (char *)[v114 UTF8String];
          if (!v115)
          {
            int v127 = *__error();
            NSUInteger v132 = _SILogForLogForCategory(20);
            if (os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT))
            {
              v313.location = v112;
              v313.length = v113;
              size_t v133 = NSStringFromRange(v313);
              *(_DWORD *)stat buf = 134218498;
              *(void *)&uint8_t buf[4] = a5;
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&unsigned char buf[14] = v109;
              *(_WORD *)&buf[22] = 2112;
              *(void *)uint64_t v302 = v133;
              _os_log_impl(&dword_1BD672000, v132, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Span Match} Skipping time span: %lu (ERROR: UTF8 encoding failed for range %@)", buf, 0x20u);
            }
LABEL_150:
            *__error() = v127;
            goto LABEL_151;
          }
          QueryNode = createQueryNode("kMDItemPhotosHolidays", v115, 48, 1, 0, 10.0, 0.0);
          int v117 = createQueryNode("kMDItemPhotosSeasons", v115, 48, 1, 0, 10.0, 0.0);
          uint64_t v118 = createQueryNode("kMDItemPhotosContentCreationDateMonth", v115, 48, 1, 0, 10.0, 0.0);
          uint64_t v119 = createQueryNode("kMDItemPhotosContentCreationDateMonths", v115, 48, 1, 0, 10.0, 0.0);
          uint64_t v120 = createQueryNode("kMDItemPhotosContentCreationDateYear", v115, 48, 1, 0, 10.0, 0.0);
          uint64_t v121 = createQueryNode("kMDItemPhotosContentCreationDateYears", v115, 48, 1, 0, 10.0, 0.0);
          v289 += 4;
          uint64_t v122 = makeOrNode((uint64_t)QueryNode, (uint64_t)v117);
          long long v123 = makeOrNode((uint64_t)v119, (uint64_t)v121);
          CFArrayRef v124 = makeOrNode((uint64_t)v118, (uint64_t)v120);
          CFIndex v125 = makeOrNode((uint64_t)v123, (uint64_t)v124);
          CFIndex v126 = makeOrNode((uint64_t)v122, (uint64_t)v125);
          unsigned int v108 = makeOrNode((uint64_t)v108, (uint64_t)v126);
LABEL_151:
          if (++v109 >= (unint64_t)[v257 count]) {
            goto LABEL_163;
          }
        }
        int v127 = *__error();
        NSUInteger v130 = _SILogForLogForCategory(20);
        if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
        {
          v312.location = v112;
          v312.length = v113;
          uint64_t v131 = NSStringFromRange(v312);
          *(_DWORD *)stat buf = 134218498;
          *(void *)&uint8_t buf[4] = a5;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v109;
          *(_WORD *)&buf[22] = 2112;
          *(void *)uint64_t v302 = v131;
          _os_log_impl(&dword_1BD672000, v130, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Span Match} Skipping time span: %lu (ERROR: Empty sub-query for range %@)", buf, 0x20u);
        }
        goto LABEL_150;
      }
      unsigned int v108 = 0;
LABEL_163:
      long long v287 = 0u;
      long long v288 = 0u;
      long long v285 = 0u;
      long long v286 = 0u;
      uint64_t v143 = [obj countByEnumeratingWithState:&v285 objects:buf count:16];
      if (v143)
      {
        uint64_t v144 = *(void *)v286;
        do
        {
          for (uint64_t i = 0; i != v143; ++i)
          {
            if (*(void *)v286 != v144) {
              objc_enumerationMutation(obj);
            }
            uint64_t v146 = *(void **)(*((void *)&v285 + 1) + 8 * i);
            int v147 = objc_msgSend(v274, "objectAtIndexedSubscript:", objc_msgSend(v146, "unsignedIntValue"));
            if ([v147 length])
            {
              unint64_t v148 = (char *)[v147 UTF8String];
              if (v148)
              {
                int v149 = PhRankingTreeFromStr(v148, &v289, 10.0);
                unsigned int v108 = makeOrNode((uint64_t)v108, (uint64_t)v149);
                continue;
              }
              int v150 = *__error();
              unsigned int v153 = _SILogForLogForCategory(20);
              if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT))
              {
                int v154 = [v146 unsignedIntValue];
                *(_DWORD *)v291 = 134218240;
                uint64_t v292 = a5;
                __int16 v293 = 1024;
                LODWORD(v294) = v154;
                _os_log_impl(&dword_1BD672000, v153, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Span Match} Skipping time parse: %u (ERROR: UTF8 encoding failed)", v291, 0x12u);
              }
            }
            else
            {
              int v150 = *__error();
              int v151 = _SILogForLogForCategory(20);
              if (os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT))
              {
                int v152 = [v146 unsignedIntValue];
                *(_DWORD *)v291 = 134218240;
                uint64_t v292 = a5;
                __int16 v293 = 1024;
                LODWORD(v294) = v152;
                _os_log_impl(&dword_1BD672000, v151, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Span Match} Skipping time parse: %u (ERROR: its zero length)", v291, 0x12u);
              }
            }
            *__error() = v150;
          }
          uint64_t v143 = [obj countByEnumeratingWithState:&v285 objects:buf count:16];
        }
        while (v143);
      }
      if ([v258 count]
        && ([v258 count] != 1 || v260 & 1 | (objc_msgSend(obj, "count") != 0)))
      {
        char v275 = v108 == 0;
        {
          PhSpanMatchRankingAttribs(void)::_phSpanMatchAttribs = 0u;
          *(_OWORD *)&qword_1E9FDACE0 = 0u;
          dword_1E9FDACF0 = 1065353216;
        }
        if (PhSpanMatchRankingAttribs(void)::onceToken != -1) {
          dispatch_once(&PhSpanMatchRankingAttribs(void)::onceToken, &__block_literal_global_109_13622);
        }
        if ([v258 count])
        {
          for (unint64_t j = 0; j < [v258 count]; ++j)
          {
            uint64_t v156 = objc_msgSend((id)objc_msgSend(v258, "objectAtIndexedSubscript:", j), "rangeValue");
            NSUInteger v158 = v156;
            NSUInteger v159 = v157;
            if (v156 == 0x7FFFFFFFFFFFFFFFLL || v156 + v157 > v270)
            {
              int v166 = *__error();
              uint64_t v167 = _SILogForLogForCategory(20);
              if (os_log_type_enabled(v167, OS_LOG_TYPE_DEFAULT))
              {
                v314.location = v158;
                v314.length = v159;
                int v168 = NSStringFromRange(v314);
                *(_DWORD *)v291 = 134218498;
                uint64_t v292 = a5;
                __int16 v293 = 2048;
                unint64_t v294 = j;
                __int16 v295 = 2112;
                *(void *)v296 = v168;
                _os_log_impl(&dword_1BD672000, v167, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Span Match} Skipping span: %lu, range: %@ (ERROR: range is out of bounds)", v291, 0x20u);
              }
            }
            else
            {
              NSUInteger v160 = objc_msgSend(v268, "substringWithRange:", v156, v157);
              if ([v160 length]) {
                NSUInteger v160 = (void *)[v160 stringByTrimmingCharactersInSet:a4];
              }
              if ([v160 length])
              {
                uint64_t v161 = (char *)[v160 UTF8String];
                if (v161)
                {
                  int v162 = objc_msgSend((id)objc_msgSend(v252, "objectAtIndexedSubscript:", j), "intValue");
                  objc_msgSend((id)objc_msgSend(v251, "objectAtIndexedSubscript:", j), "floatValue");
                  float v164 = v163;
                  BOOL v165 = v163 >= 0.7
                      && std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::find<int>(PhSpanMatchRankingAttribs(void)::_phSpanMatchAttribs, *((unint64_t *)&PhSpanMatchRankingAttribs(void)::_phSpanMatchAttribs + 1), v162) != 0;
                  int v173 = *__error();
                  size_t v174 = _SILogForLogForCategory(20);
                  if (os_log_type_enabled(v174, OS_LOG_TYPE_DEFAULT))
                  {
                    v317.location = v158;
                    v317.length = v159;
                    int v175 = NSStringFromRange(v317);
                    *(_DWORD *)v291 = 134219266;
                    uint64_t v292 = a5;
                    __int16 v293 = 2048;
                    unint64_t v294 = j;
                    __int16 v295 = 1024;
                    *(_DWORD *)v296 = v162;
                    *(_WORD *)&v296[4] = 2048;
                    *(double *)&v296[6] = v164;
                    __int16 v297 = 1024;
                    BOOL v298 = v165;
                    __int16 v299 = 2112;
                    CFArrayRef v300 = v175;
                    _os_log_impl(&dword_1BD672000, v174, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Span Match} Adding span: %lu, type: %d, conf: %f, highConfMode: %d range:%@", v291, 0x36u);
                  }
                  *__error() = v173;
                  if (v165)
                  {
                    uint64_t v176 = qword_1E9FDACE0;
                    if (qword_1E9FDACE0)
                    {
                      int v177 = 0;
                      if (v275) {
                        float v178 = 10.0;
                      }
                      else {
                        float v178 = 0.0;
                      }
                      do
                      {
                        if (v162 == *(_DWORD *)(v176 + 16))
                        {
                          uint64_t v179 = *(void *)(v176 + 32);
                          uint64_t v180 = *(void *)(v176 + 40);
                          while (v179 != v180)
                          {
                            char v181 = (const char *)v179;
                            if (*(char *)(v179 + 23) < 0) {
                              char v181 = *(const char **)v179;
                            }
                            uint64_t v182 = createQueryNode(v181, v161, 48, 1, 0, v178 + *(float *)(v176 + 24), 0.0);
                            int v177 = makeOrNode((uint64_t)v177, (uint64_t)v182);
                            ++v289;
                            v179 += 24;
                          }
                        }
                        uint64_t v176 = *(void *)v176;
                      }
                      while (v176);
                    }
                    else
                    {
                      int v177 = 0;
                    }
                  }
                  else
                  {
                    PhExactMatchRankingAttribs();
                    int v183 = v289;
                    uint64_t v184 = qword_1EA0DAB98;
                    if (qword_1EA0DAB98)
                    {
                      int v177 = 0;
                      if (v275) {
                        float v185 = 10.0;
                      }
                      else {
                        float v185 = 0.0;
                      }
                      do
                      {
                        int v186 = (const char *)(v184 + 16);
                        if (*(char *)(v184 + 39) < 0) {
                          int v186 = *(const char **)v186;
                        }
                        uint64_t v187 = createQueryNode(v186, v161, 48, 1, 0, v185 + *(float *)(v184 + 40), 0.0);
                        int v177 = makeOrNode((uint64_t)v177, (uint64_t)v187);
                        ++v183;
                        uint64_t v184 = *(void *)v184;
                      }
                      while (v184);
                    }
                    else
                    {
                      int v177 = 0;
                    }
                    int v289 = v183;
                  }
                  v275 &= v177 == 0;
                  unsigned int v108 = makeAndNode((uint64_t)v108, (uint64_t)v177);
                  continue;
                }
                int v166 = *__error();
                int v171 = _SILogForLogForCategory(20);
                if (os_log_type_enabled(v171, OS_LOG_TYPE_DEFAULT))
                {
                  v316.location = v158;
                  v316.length = v159;
                  size_t v172 = NSStringFromRange(v316);
                  *(_DWORD *)v291 = 134218498;
                  uint64_t v292 = a5;
                  __int16 v293 = 2048;
                  unint64_t v294 = j;
                  __int16 v295 = 2112;
                  *(void *)v296 = v172;
                  _os_log_impl(&dword_1BD672000, v171, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Span Match} Skipping span: %lu, range: %@ (ERROR: UTF8 encoding failed)", v291, 0x20u);
                }
              }
              else
              {
                int v166 = *__error();
                size_t v169 = _SILogForLogForCategory(20);
                if (os_log_type_enabled(v169, OS_LOG_TYPE_DEFAULT))
                {
                  v315.location = v158;
                  v315.length = v159;
                  unint64_t v170 = NSStringFromRange(v315);
                  *(_DWORD *)v291 = 134218498;
                  uint64_t v292 = a5;
                  __int16 v293 = 2048;
                  unint64_t v294 = j;
                  __int16 v295 = 2112;
                  *(void *)v296 = v170;
                  _os_log_impl(&dword_1BD672000, v169, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Span Match} Skipping span: %lu, range: %@ (Reason: empty sub-query after trimming)", v291, 0x20u);
                }
              }
            }
            *__error() = v166;
          }
        }
        int v139 = *__error();
        float v190 = _SILogForLogForCategory(20);
        if (!os_log_type_enabled(v190, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_240;
        }
      }
      else
      {
        int v188 = *__error();
        uint64_t v189 = _SILogForLogForCategory(20);
        if (os_log_type_enabled(v189, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v291 = 134217984;
          uint64_t v292 = a5;
          _os_log_impl(&dword_1BD672000, v189, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Span Match} Skipping rest of span match nodes (Reason: exact match nodes should be sufficient)", v291, 0xCu);
        }
        *__error() = v188;
        int v139 = *__error();
        float v190 = _SILogForLogForCategory(20);
        if (!os_log_type_enabled(v190, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_240;
        }
      }
      *(_DWORD *)v291 = 134218240;
      uint64_t v292 = a5;
      __int16 v293 = 1024;
      LODWORD(v294) = v289;
      _os_log_impl(&dword_1BD672000, v190, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Span Match} Added %d nodes", v291, 0x12u);
LABEL_240:
      NSUInteger v141 = __error();
      goto LABEL_241;
    }
  }
  int v134 = *__error();
  CFRange v135 = _SILogForLogForCategory(20);
  if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v136 = [v258 count];
    uint64_t v137 = [v252 count];
    uint64_t v138 = [v251 count];
    *(_DWORD *)stat buf = 134218752;
    *(void *)&uint8_t buf[4] = a5;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&unsigned char buf[14] = v136;
    *(_WORD *)&buf[22] = 2048;
    *(void *)uint64_t v302 = v137;
    *(_WORD *)&v302[8] = 2048;
    *(void *)&v302[10] = v138;
    _os_log_impl(&dword_1BD672000, v135, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Span Match} Skipping query (ERROR: span count mismatch <#range=%lu, #types=%lu, #confidence=%lu>)", buf, 0x2Au);
  }
  unsigned int v108 = 0;
  *__error() = v134;
LABEL_242:
  if (![v268 length])
  {
    int v229 = *__error();
    v230 = _SILogForLogForCategory(20);
    if (!os_log_type_enabled(v230, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_306;
    }
    *(_DWORD *)stat buf = 134217984;
    *(void *)&uint8_t buf[4] = a5;
    int v231 = "[qid=%llu] {Prefix Match} Skipping query (Reason: empty query)";
LABEL_302:
    v232 = v230;
    uint32_t v233 = 12;
LABEL_305:
    _os_log_impl(&dword_1BD672000, v232, OS_LOG_TYPE_DEFAULT, v231, buf, v233);
    goto LABEL_306;
  }
  if (![v259 count])
  {
    int v229 = *__error();
    v230 = _SILogForLogForCategory(20);
    if (!os_log_type_enabled(v230, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_306;
    }
    *(_DWORD *)stat buf = 134217984;
    *(void *)&uint8_t buf[4] = a5;
    int v231 = "[qid=%llu] {Prefix Match} Skipping query (Reason: no useful tokens)";
    goto LABEL_302;
  }
  uint64_t v191 = [v259 count];
  if (v191 != [v253 count])
  {
    int v229 = *__error();
    v234 = _SILogForLogForCategory(20);
    if (os_log_type_enabled(v234, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v235 = [v259 count];
      uint64_t v236 = [v253 count];
      *(_DWORD *)stat buf = 134218496;
      *(void *)&uint8_t buf[4] = a5;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&unsigned char buf[14] = v235;
      *(_WORD *)&buf[22] = 2048;
      *(void *)uint64_t v302 = v236;
      int v231 = "[qid=%llu] {Prefix Match} Skipping query (ERROR: token count mismatch <%lu,%lu>)";
      v232 = v234;
      uint32_t v233 = 32;
      goto LABEL_305;
    }
LABEL_306:
    v273 = 0;
    goto LABEL_307;
  }
  {
    PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs = 0u;
    unk_1E9FDAD58 = 0u;
    dword_1E9FDAD68 = 1065353216;
  }
  if (PhPrefixMatchRankingAttribs(void)::onceToken[0] != -1) {
    dispatch_once(PhPrefixMatchRankingAttribs(void)::onceToken, &__block_literal_global_113);
  }
  unint64_t v276 = [v268 length];
  if ([v259 count])
  {
    v273 = 0;
    int v192 = 0;
    uint64_t v193 = 0;
    while (1)
    {
      uint64_t v194 = objc_msgSend((id)objc_msgSend(v259, "objectAtIndexedSubscript:", v193), "rangeValue");
      NSUInteger v196 = v194;
      NSUInteger v197 = v195;
      if (v194 == 0x7FFFFFFFFFFFFFFFLL || v194 + v195 > v276)
      {
        int v203 = *__error();
        v204 = _SILogForLogForCategory(20);
        if (os_log_type_enabled(v204, OS_LOG_TYPE_DEFAULT))
        {
          v318.location = v196;
          v318.length = v197;
          uint64_t v205 = NSStringFromRange(v318);
          *(_DWORD *)stat buf = 134218498;
          *(void *)&uint8_t buf[4] = a5;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v193;
          *(_WORD *)&buf[22] = 2112;
          *(void *)uint64_t v302 = v205;
          _os_log_impl(&dword_1BD672000, v204, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Prefix Match} Skipping token: %lu, range: :%@ (ERROR: range is out of bounds)", buf, 0x20u);
        }
      }
      else
      {
        float v198 = objc_msgSend(v268, "substringWithRange:", v194, v195);
        if ([v198 length]) {
          float v198 = (void *)[v198 stringByTrimmingCharactersInSet:a4];
        }
        if ([v198 length])
        {
          float v199 = (char *)[v198 UTF8String];
          if (v199)
          {
            int v200 = objc_msgSend((id)objc_msgSend(v253, "objectAtIndexedSubscript:", v193), "intValue");
            unint64_t v202 = *((void *)&PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs + 1);
            uint64_t v201 = PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs;
            if (std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::find<int>(PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs, *((unint64_t *)&PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs + 1), v200))
            {
              if (v250)
              {
                BOOL v264 = 0;
              }
              else
              {
                BOOL v264 = v193 == [v259 count] - 1;
                unint64_t v202 = *((void *)&PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs + 1);
                uint64_t v201 = PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs;
              }
              long long v212 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::find<int>(v201, v202, v200);
              if (!v212) {
                abort();
              }
              BOOL v213 = v212;
              float v214 = *((float *)v212 + 6);
              int v271 = *__error();
              uint64_t v215 = _SILogForLogForCategory(20);
              BOOL v216 = os_log_type_enabled(v215, OS_LOG_TYPE_DEFAULT);
              if (v214 <= 0.0)
              {
                if (v216)
                {
                  v323.location = v196;
                  v323.length = v197;
                  v223 = NSStringFromRange(v323);
                  *(_DWORD *)stat buf = 134218754;
                  *(void *)&uint8_t buf[4] = a5;
                  *(_WORD *)&unsigned char buf[12] = 2048;
                  *(void *)&unsigned char buf[14] = v193;
                  *(_WORD *)&buf[22] = 2112;
                  *(void *)uint64_t v302 = v223;
                  *(_WORD *)&v302[8] = 1024;
                  *(_DWORD *)&v302[10] = v200;
                  _os_log_impl(&dword_1BD672000, v215, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Prefix Match} Skipping token: %lu, range:%@ (ERROR: attribute score is 0 for type: %d)", buf, 0x26u);
                }
                *__error() = v271;
                goto LABEL_271;
              }
              if (v264)
              {
                if (v216)
                {
                  v322.location = v196;
                  v322.length = v197;
                  v217 = NSStringFromRange(v322);
                  *(_DWORD *)stat buf = 134218754;
                  *(void *)&uint8_t buf[4] = a5;
                  *(_WORD *)&unsigned char buf[12] = 2048;
                  *(void *)&unsigned char buf[14] = v193;
                  *(_WORD *)&buf[22] = 2112;
                  *(void *)uint64_t v302 = v217;
                  *(_WORD *)&v302[8] = 1024;
                  *(_DWORD *)&v302[10] = v200;
                  _os_log_impl(&dword_1BD672000, v215, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Prefix Match} Adding token: %lu, range:%@, type: %d, prefix: YES", buf, 0x26u);
                }
                *__error() = v271;
                uint64_t v218 = v213[4];
                uint64_t v219 = v213[5];
                if (v218 != v219)
                {
                  v220 = 0;
                  do
                  {
                    v221 = (const char *)v218;
                    if (*(char *)(v218 + 23) < 0) {
                      v221 = *(const char **)v218;
                    }
                    v222 = createQueryNode(v221, v199, 112, 1, -1, v214, 0.0);
                    v220 = makeOrNode((uint64_t)v220, (uint64_t)v222);
                    ++v192;
                    v218 += 24;
                  }
                  while (v218 != v219);
                  goto LABEL_297;
                }
              }
              else
              {
                if (v216)
                {
                  v324.location = v196;
                  v324.length = v197;
                  v224 = NSStringFromRange(v324);
                  *(_DWORD *)stat buf = 134218754;
                  *(void *)&uint8_t buf[4] = a5;
                  *(_WORD *)&unsigned char buf[12] = 2048;
                  *(void *)&unsigned char buf[14] = v193;
                  *(_WORD *)&buf[22] = 2112;
                  *(void *)uint64_t v302 = v224;
                  *(_WORD *)&v302[8] = 1024;
                  *(_DWORD *)&v302[10] = v200;
                  _os_log_impl(&dword_1BD672000, v215, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Prefix Match} Adding token: %lu, range:%@, type: %d, prefix: NO", buf, 0x26u);
                }
                *__error() = v271;
                uint64_t v225 = v213[4];
                uint64_t v226 = v213[5];
                if (v225 != v226)
                {
                  v220 = 0;
                  do
                  {
                    int v227 = (const char *)v225;
                    if (*(char *)(v225 + 23) < 0) {
                      int v227 = *(const char **)v225;
                    }
                    v228 = createQueryNode(v227, v199, 112, 1, 0, v214, 0.0);
                    v220 = makeOrNode((uint64_t)v220, (uint64_t)v228);
                    ++v192;
                    v225 += 24;
                  }
                  while (v225 != v226);
                  goto LABEL_297;
                }
              }
              v220 = 0;
LABEL_297:
              v273 = makeAndNode((uint64_t)v273, (uint64_t)v220);
              goto LABEL_271;
            }
            int v203 = *__error();
            uint64_t v210 = _SILogForLogForCategory(20);
            if (os_log_type_enabled(v210, OS_LOG_TYPE_DEFAULT))
            {
              v321.location = v196;
              v321.length = v197;
              uint64_t v211 = NSStringFromRange(v321);
              *(_DWORD *)stat buf = 134218754;
              *(void *)&uint8_t buf[4] = a5;
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&unsigned char buf[14] = v193;
              *(_WORD *)&buf[22] = 2112;
              *(void *)uint64_t v302 = v211;
              *(_WORD *)&v302[8] = 1024;
              *(_DWORD *)&v302[10] = v200;
              _os_log_impl(&dword_1BD672000, v210, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Prefix Match} Skipping token: %lu, range:%@ (Reason: not an important attribute type: %d)", buf, 0x26u);
            }
          }
          else
          {
            int v203 = *__error();
            long long v208 = _SILogForLogForCategory(20);
            if (os_log_type_enabled(v208, OS_LOG_TYPE_DEFAULT))
            {
              v320.location = v196;
              v320.length = v197;
              uint64_t v209 = NSStringFromRange(v320);
              *(_DWORD *)stat buf = 134218498;
              *(void *)&uint8_t buf[4] = a5;
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&unsigned char buf[14] = v193;
              *(_WORD *)&buf[22] = 2112;
              *(void *)uint64_t v302 = v209;
              _os_log_impl(&dword_1BD672000, v208, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Prefix Match} Skipping token: %lu, range: %@ (ERROR: UTF8 encoding failed)", buf, 0x20u);
            }
          }
        }
        else
        {
          int v203 = *__error();
          __int16 v206 = _SILogForLogForCategory(20);
          if (os_log_type_enabled(v206, OS_LOG_TYPE_DEFAULT))
          {
            v319.location = v196;
            v319.length = v197;
            int v207 = NSStringFromRange(v319);
            *(_DWORD *)stat buf = 134218498;
            *(void *)&uint8_t buf[4] = a5;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&unsigned char buf[14] = v193;
            *(_WORD *)&buf[22] = 2112;
            *(void *)uint64_t v302 = v207;
            _os_log_impl(&dword_1BD672000, v206, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Prefix Match} Skipping token: %lu, range: %@ (ERROR: empty sub-query after trimming)", buf, 0x20u);
          }
        }
      }
      *__error() = v203;
LABEL_271:
      if (++v193 >= (unint64_t)[v259 count]) {
        goto LABEL_315;
      }
    }
  }
  int v192 = 0;
  v273 = 0;
LABEL_315:
  int v229 = *__error();
  v244 = _SILogForLogForCategory(20);
  if (os_log_type_enabled(v244, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 134218240;
    *(void *)&uint8_t buf[4] = a5;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = v192;
    _os_log_impl(&dword_1BD672000, v244, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Prefix Match} Added %d nodes", buf, 0x12u);
  }
LABEL_307:
  *__error() = v229;
  int v237 = makeOrNode((uint64_t)matched, (uint64_t)v108);
  if (a2)
  {
    int v238 = *__error();
    int v239 = _SILogForLogForCategory(20);
    if (os_log_type_enabled(v239, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134218240;
      *(void *)&uint8_t buf[4] = a5;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&unsigned char buf[14] = 0x4024000000000000;
      _os_log_impl(&dword_1BD672000, v239, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Assigning weight: %f to metadata filter", buf, 0x16u);
    }
    *__error() = v238;
    v278[0] = MEMORY[0x1E4F143A8];
    v278[1] = 3221225472;
    v278[2] = ___ZL24PhRankingTreeFromU2ParsePK14__CFDictionaryP10query_nodeP7NSArrayIP7NSValueEP14NSCharacterSety_block_invoke;
    v278[3] = &__block_descriptor_36_e87__v16__0__query_node___query_node___query_node___query_piece_____v___v__v_SIb8b1b1b1Qf_8l;
    int v279 = 1092616192;
    *(void *)stat buf = MEMORY[0x1E4F143A8];
    *(void *)&uint8_t buf[8] = 0x40000000;
    *(void *)&uint8_t buf[16] = __db_query_tree_apply_block_block_invoke;
    *(void *)uint64_t v302 = &unk_1E6348598;
    *(void *)&v302[8] = v278;
    db_query_tree_apply_block_with_meta(a2, (uint64_t)buf, 0);
    int v237 = makeAndNode((uint64_t)v237, (uint64_t)a2);
  }
  v240 = makeOrNode((uint64_t)v237, (uint64_t)v273);
  if (v240)
  {
    uint64_t v241 = (uint64_t)v240;
    v242 = PhRankingBoostTree();
    v240 = makeAndNode(v241, (uint64_t)v242);
  }
  return makeOrNode((uint64_t)v240, v280);
}

uint64_t ___ZL28PhPopulateAllFilterFromParseP18NSAttributedStringP14NSMutableArrayIP8NSStringEPS1_IP7NSValueES9_S9_S9__block_invoke_13342(void **a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = [a2 count];
  if (result)
  {
    if ([a2 objectForKeyedSubscript:@"kQPFavoritedAction"])
    {
      uint64_t v9 = a1 + 4;
    }
    else if ([a2 objectForKeyedSubscript:@"kQPMedia"] {
           || [a2 objectForKeyedSubscript:@"kQPKind"])
    }
    {
      uint64_t v9 = a1 + 5;
    }
    else if ([a2 objectForKeyedSubscript:@"kQPTaggedPerson"] {
           || [a2 objectForKeyedSubscript:@"kQPGroundedPerson"])
    }
    {
      uint64_t v9 = a1 + 6;
    }
    else
    {
      uint64_t result = [a2 objectForKeyedSubscript:@"kQPDate"];
      if (!result) {
        return result;
      }
      uint64_t result = [a2 objectForKeyedSubscript:@"kQPDescription"];
      if (!result) {
        return result;
      }
      objc_msgSend(a1[7], "addObject:", objc_msgSend(a2, "objectForKeyedSubscript:", @"kQPDescription"));
      uint64_t v9 = a1 + 8;
    }
    int v10 = *v9;
    uint64_t v11 = objc_msgSend(MEMORY[0x1E4F29238], "valueWithRange:", a3, a4);
    return [v10 addObject:v11];
  }
  return result;
}

void *PhExactMatchTree(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v11 = a1;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (![a1 length])
  {
    int v21 = *__error();
    uint64_t v22 = _SILogForLogForCategory(20);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134217984;
      *(void *)&uint8_t buf[4] = a6;
      NSUInteger v23 = "[qid=%llu] {Exact Match} Skipping query (Reason: empty query)";
      goto LABEL_27;
    }
LABEL_28:
    int v24 = 0;
    goto LABEL_29;
  }
  if ([a2 count])
  {
    uint64_t v11 = (void *)[v11 mutableCopy];
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    uint64_t v12 = objc_msgSend(a2, "reverseObjectEnumerator", 0);
    uint64_t v13 = [v12 countByEnumeratingWithState:&v31 objects:v39 count:16];
    if (v13)
    {
      uint64_t v14 = *(void *)v32;
      do
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          if (*(void *)v32 != v14) {
            objc_enumerationMutation(v12);
          }
          uint64_t v16 = [*(id *)(*((void *)&v31 + 1) + 8 * i) rangeValue];
          objc_msgSend(v11, "replaceCharactersInRange:withString:", v16, v17, &stru_1F18198E8);
        }
        uint64_t v13 = [v12 countByEnumeratingWithState:&v31 objects:v39 count:16];
      }
      while (v13);
    }
    if (![v11 length])
    {
      int v21 = *__error();
      uint64_t v22 = _SILogForLogForCategory(20);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)stat buf = 134217984;
        *(void *)&uint8_t buf[4] = a6;
        NSUInteger v23 = "[qid=%llu] {Exact Match} Skipping query (Reason: empty query after suggestion filtering)";
        goto LABEL_27;
      }
      goto LABEL_28;
    }
  }
  if ([v11 length]) {
    uint64_t v11 = (void *)[v11 stringByTrimmingCharactersInSet:a3];
  }
  if (![v11 length])
  {
    int v21 = *__error();
    uint64_t v22 = _SILogForLogForCategory(20);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134217984;
      *(void *)&uint8_t buf[4] = a6;
      NSUInteger v23 = "[qid=%llu] {Exact Match} Skipping query (Reason: empty query after removing special chars)";
      goto LABEL_27;
    }
    goto LABEL_28;
  }
  uint64_t v18 = (char *)[v11 UTF8String];
  if (!v18)
  {
    int v21 = *__error();
    uint64_t v22 = _SILogForLogForCategory(20);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134217984;
      *(void *)&uint8_t buf[4] = a6;
      NSUInteger v23 = "[qid=%llu] {Exact Match} Skipping query (ERROR: UTF8 encoding of trimmed query failed)";
      goto LABEL_27;
    }
    goto LABEL_28;
  }
  std::string::basic_string[abi:nn180100]<0>(buf, v18);
  BOOL v19 = isOptionalWord(buf);
  BOOL v20 = v19;
  if (v38 < 0)
  {
    operator delete(*(void **)buf);
    if (v20)
    {
LABEL_17:
      int v21 = *__error();
      uint64_t v22 = _SILogForLogForCategory(20);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)stat buf = 134217984;
        *(void *)&uint8_t buf[4] = a6;
        NSUInteger v23 = "[qid=%llu] {Exact Match} Skipping query (Reason: query is optional word)";
LABEL_27:
        _os_log_impl(&dword_1BD672000, v22, OS_LOG_TYPE_DEFAULT, v23, buf, 0xCu);
        goto LABEL_28;
      }
      goto LABEL_28;
    }
  }
  else if (v19)
  {
    goto LABEL_17;
  }
  PhExactMatchRankingAttribs();
  uint64_t v26 = qword_1EA0DAB98;
  if (qword_1EA0DAB98)
  {
    int v27 = 0;
    int v24 = 0;
    do
    {
      uint64_t v28 = (const char *)(v26 + 16);
      if (*(char *)(v26 + 39) < 0) {
        uint64_t v28 = *(const char **)v28;
      }
      QueryNode = createQueryNode(v28, v18, 48, 1, 0, *(float *)(v26 + 40) + 100.0, 0.0);
      int v24 = makeOrNode((uint64_t)v24, (uint64_t)QueryNode);
      ++v27;
      uint64_t v26 = *(void *)v26;
    }
    while (v26);
  }
  else
  {
    int v24 = 0;
    int v27 = 0;
  }
  if (a4 == 1)
  {
    *a5 = createQueryNode("kMDItemTextContent", v18, 112, 1, 0, 100.0, 0.0);
    ++v27;
  }
  int v21 = *__error();
  uint64_t v30 = _SILogForLogForCategory(20);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 134218240;
    *(void *)&uint8_t buf[4] = a6;
    __int16 v36 = 1024;
    int v37 = v27;
    _os_log_impl(&dword_1BD672000, v30, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Exact Match} Added %d nodes", buf, 0x12u);
  }
LABEL_29:
  *__error() = v21;
  return v24;
}

void *PhRankingTreeFromStr(char *a1, _DWORD *a2, float a3)
{
  uint64_t v9 = 0;
  int v10 = &v9;
  uint64_t v11 = 0x2020000000;
  int v12 = 0;
  query_node_with_ann = db_make_query_node_with_ann(a1, 0);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = ___ZL20PhRankingTreeFromStrPKcfPi_block_invoke_13560;
  v7[3] = &unk_1E6348D38;
  float v8 = a3;
  v7[4] = &v9;
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 0x40000000;
  v13[2] = __db_query_tree_apply_block_block_invoke;
  uint64_t v13[3] = &unk_1E6348598;
  v13[4] = v7;
  db_query_tree_apply_block_with_meta(query_node_with_ann, (uint64_t)v13, 0);
  *a2 += *((_DWORD *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return query_node_with_ann;
}

uint64_t ___ZL24PhRankingTreeFromQPParsePK10__CFStringP10query_nodeP18NSAttributedStringP7NSArrayIP7NSValueEP14NSCharacterSety_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(a2 + 16);
    if (v2) {
      *(_DWORD *)(v2 + 52) = *(_DWORD *)(a1 + 32);
    }
  }
  return a2;
}

void *PhRankingBoostTree()
{
  QueryNode = createQueryNode("kMDItemPhotosFavorited", "1", 0, 4, 0, 1.13, 1.0);
  if (CurrentYear(void)::onceToken != -1) {
    dispatch_once(&CurrentYear(void)::onceToken, &__block_literal_global_141_13541);
  }
  unint64_t v1 = createQueryNode("_kMDItemContentCreationDateYear", (char *)CurrentYear(void)::currYear, 0, 4, 0, 1.1, 1.0);
  if (PhThreeYearAgo(void)::onceToken != -1) {
    dispatch_once(&PhThreeYearAgo(void)::onceToken, &__block_literal_global_146);
  }
  uint64_t v2 = createQueryNode("_kMDItemContentCreationDateYear", (char *)PhThreeYearAgo(void)::oldYear, 0, 4, 0, 1.05, 1.0);
  uint64_t v3 = makeOrNode((uint64_t)v1, (uint64_t)v2);
  uint64_t v4 = createQueryNode("kMDItemAestheticScore", "0.5", 0, 4, 0, 1.05, 1.0);
  unint64_t v5 = createQueryNode("kMDItemAestheticScore", "0.2", 0, 4, 0, 1.02, 1.0);
  int v6 = makeOrNode((uint64_t)v4, (uint64_t)v5);
  uint64_t v7 = createQueryNode("kMDItemCurationScore", "0.7", 0, 4, 0, 1.07, 1.0);
  float v8 = createQueryNode("kMDItemCurationScore", "0.4", 0, 4, 0, 1.04, 1.0);
  uint64_t v9 = makeOrNode((uint64_t)v7, (uint64_t)v8);
  int v10 = createQueryNode("kMDItemContentRating", "0", 0, 4, 0, 1.01, 1.0);
  uint64_t v11 = makeAndNode((uint64_t)QueryNode, (uint64_t)v3);
  int v12 = makeAndNode((uint64_t)v6, (uint64_t)v9);
  uint64_t v13 = makeAndNode((uint64_t)v11, (uint64_t)v12);
  return makeAndNode((uint64_t)v10, (uint64_t)v13);
}

void PhPopulateNodesFromU2Parse(const __CFDictionary *a1, void *a2, void *a3, char a4, uint64_t *a5, uint64_t *a6, void *a7, uint64_t a8)
{
  uint64_t v241 = *MEMORY[0x1E4F143B8];
  int v11 = *__error();
  int v12 = _SILogForLogForCategory(19);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 134217984;
    *(void *)&uint8_t buf[4] = a8;
    _os_log_impl(&dword_1BD672000, v12, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Using U2 output for creating ann filter and unigram node", buf, 0xCu);
  }
  *__error() = v11;
  uint64_t v13 = (const void *)getkQPQUOutputTokenInfoKey();
  CFArrayRef theArray = (const __CFArray *)CFDictionaryGetValue(a1, v13);
  CFNumberRef Value = (void *)CFDictionaryGetValue(a1, @"attributedParse");
  uint64_t v225 = (void *)[Value string];
  if (!v225 || ![v225 length])
  {
    int v114 = *__error();
    uint64_t v115 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134217984;
      *(void *)&uint8_t buf[4] = a8;
      _os_log_impl(&dword_1BD672000, v115, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Skipping adding nodes for the query (Reason: query is empty)", buf, 0xCu);
    }
    *__error() = v114;
    return;
  }
  uint64_t v215 = (void *)[MEMORY[0x1E4F1CA48] array];
  uint64_t v218 = (void *)[MEMORY[0x1E4F1CA48] array];
  float v214 = (void *)[MEMORY[0x1E4F1CA48] array];
  uint64_t v211 = (void *)[MEMORY[0x1E4F1CA48] array];
  uint64_t v15 = [Value length];
  *(void *)stat buf = MEMORY[0x1E4F143A8];
  *(void *)&uint8_t buf[8] = 3221225472;
  *(void *)&uint8_t buf[16] = ___ZL30PhPopulateSomeFiltersFromParseP18NSAttributedStringP14NSMutableArrayIP8NSStringEPS1_IP7NSValueES5_S9__block_invoke_13443;
  *(void *)&unsigned char buf[24] = &unk_1E6348D88;
  *(void *)&uint8_t buf[32] = v215;
  *(void *)&buf[40] = v218;
  *(void *)&buf[48] = v214;
  *(void *)v240 = v211;
  objc_msgSend(Value, "enumerateAttributesInRange:options:usingBlock:", 0, v15, 0, buf);
  if ([v218 count])
  {
    int v16 = *__error();
    uint64_t v17 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = [v218 count];
      *(_DWORD *)stat buf = 134218240;
      *(void *)&uint8_t buf[4] = a8;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&unsigned char buf[14] = v18;
      _os_log_impl(&dword_1BD672000, v17, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Populated %lu date filters from U2 parse", buf, 0x16u);
    }
    *__error() = v16;
  }
  if ([v211 count])
  {
    int v19 = *__error();
    BOOL v20 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = [v211 count];
      *(_DWORD *)stat buf = 134218240;
      *(void *)&uint8_t buf[4] = a8;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&unsigned char buf[14] = v21;
      _os_log_impl(&dword_1BD672000, v20, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Populated %lu people filters from U2 parse", buf, 0x16u);
    }
    *__error() = v19;
  }
  if (![v215 count])
  {
    if (CFDictionaryContainsKey(a1, @"attributedParses"))
    {
      uint64_t v119 = (void *)CFDictionaryGetValue(a1, @"attributedParses");
      if ((unint64_t)[v119 count] >= 2)
      {
        uint64_t v120 = (void *)[v119 objectAtIndexedSubscript:1];
        uint64_t v121 = [v120 length];
        *(void *)stat buf = MEMORY[0x1E4F143A8];
        *(void *)&uint8_t buf[8] = 3221225472;
        *(void *)&uint8_t buf[16] = ___ZL29PhPopulateDateFilterFromParseP18NSAttributedStringP14NSMutableArrayIP8NSStringEPS1_IP7NSValueE_block_invoke_13446;
        *(void *)&unsigned char buf[24] = &unk_1E6348D10;
        *(void *)&uint8_t buf[32] = v215;
        *(void *)&buf[40] = v218;
        objc_msgSend(v120, "enumerateAttributesInRange:options:usingBlock:", 0, v121, 0, buf);
        if ([v218 count])
        {
          int v122 = *__error();
          long long v123 = _SILogForLogForCategory(20);
          if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v124 = [v218 count];
            *(_DWORD *)stat buf = 134218240;
            *(void *)&uint8_t buf[4] = a8;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&unsigned char buf[14] = v124;
            _os_log_impl(&dword_1BD672000, v123, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Populated %lu date filters from QP parse", buf, 0x16u);
          }
          *__error() = v122;
        }
      }
    }
  }
  PhRetrievalAttribs();
  CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFCharacterSetRef theSet = CFCharacterSetCreateWithCharactersInString(v22, @"0123456789");
  unint64_t v232 = 0;
  int64x2_t v233 = 0uLL;
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count <= 0)
  {
    char v219 = 1;
    uint64_t v116 = v232;
    goto LABEL_176;
  }
  CFIndex v24 = 0;
  BOOL v206 = 0;
  CFIndex v221 = Count;
  CFIndex v207 = Count - 1;
  char v219 = 1;
  uint64_t v216 = -1;
  long long v208 = a3;
  do
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v24);
    uint64_t v26 = (const void *)getkQPQUOutputTokenRangeKey();
    if (!CFDictionaryContainsKey(ValueAtIndex, v26)
      || (int v27 = (const void *)getkQPQUOutputTokenArgIdsKey(), !CFDictionaryContainsKey(ValueAtIndex, v27))
      || (uint64_t v28 = (const void *)getkQPQUOutputTokenArgScoresKey(), !CFDictionaryContainsKey(ValueAtIndex, v28))
      || (NSUInteger v29 = (const void *)getkQPQUOutputTokenKey(), !CFDictionaryContainsKey(ValueAtIndex, v29)))
    {
      int v34 = *__error();
      int v37 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)stat buf = 134218240;
        *(void *)&uint8_t buf[4] = a8;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&unsigned char buf[14] = v24;
        _os_log_impl(&dword_1BD672000, v37, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu skipped (ERROR: token info is missing essential keys)", buf, 0x16u);
      }
      goto LABEL_26;
    }
    uint64_t v30 = (const void *)getkQPQUOutputTokenRangeKey();
    NSUInteger v31 = objc_msgSend((id)CFDictionaryGetValue(ValueAtIndex, v30), "rangeValue");
    NSUInteger v33 = v32;
    if (v31 == 0x7FFFFFFFFFFFFFFFLL)
    {
      int v34 = *__error();
      uint64_t v35 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        v242.location = 0x7FFFFFFFFFFFFFFFLL;
        v242.length = v33;
        __int16 v36 = NSStringFromRange(v242);
        *(_DWORD *)stat buf = 134218498;
        *(void *)&uint8_t buf[4] = a8;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&unsigned char buf[14] = v24;
        *(_WORD *)&buf[22] = 2112;
        *(void *)&unsigned char buf[24] = v36;
        _os_log_impl(&dword_1BD672000, v35, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu skipped (ERROR: invalid range: %@)", buf, 0x20u);
      }
      goto LABEL_26;
    }
    if ([a2 count])
    {
      uint64_t v38 = 0;
      while (1)
      {
        v247.location = objc_msgSend((id)objc_msgSend(a2, "objectAtIndexedSubscript:", v38), "rangeValue");
        v247.length = v39;
        v243.location = v31;
        v243.length = v33;
        if (NSIntersectionRange(v243, v247).length) {
          break;
        }
        if (++v38 >= (unint64_t)[a2 count]) {
          goto LABEL_33;
        }
      }
      if ([a3 count])
      {
        uint64_t v49 = 0;
        while (1)
        {
          v248.location = objc_msgSend((id)objc_msgSend(a3, "objectAtIndexedSubscript:", v49), "rangeValue");
          v248.length = v50;
          v244.location = v31;
          v244.length = v33;
          if (NSIntersectionRange(v244, v248).length) {
            break;
          }
          if (++v49 >= (unint64_t)[a3 count]) {
            goto LABEL_60;
          }
        }
        ++*a7;
      }
LABEL_60:
      int v34 = *__error();
      uint64_t v56 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)stat buf = 134218240;
        *(void *)&uint8_t buf[4] = a8;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&unsigned char buf[14] = v24;
        _os_log_impl(&dword_1BD672000, v56, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu skipped (Reason: Its a filter token)", buf, 0x16u);
      }
LABEL_26:
      *__error() = v34;
      goto LABEL_27;
    }
LABEL_33:
    uint64_t v40 = (const void *)getkQPQUOutputTokenKey();
    CFStringRef v41 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, v40);
    CFStringRef v231 = v41;
    if (!v41)
    {
      int v34 = *__error();
      int v55 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)stat buf = 134218240;
        *(void *)&uint8_t buf[4] = a8;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&unsigned char buf[14] = v24;
        _os_log_impl(&dword_1BD672000, v55, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu skipped (ERROR: Token is null)", buf, 0x16u);
      }
      goto LABEL_26;
    }
    CFIndex v42 = 0;
    int v43 = 1;
    int v44 = 1;
    while (v42 < CFStringGetLength(v41))
    {
      UniChar CharacterAtIndex = CFStringGetCharacterAtIndex(v41, v42);
      if (CFCharacterSetIsCharacterMember(theSet, CharacterAtIndex))
      {
        int v43 = 0;
      }
      else
      {
        int IsCharacterMember = CFCharacterSetIsCharacterMember(v210, CharacterAtIndex);
        int v44 = 0;
        int v47 = 0;
        int v48 = 0;
        if (!IsCharacterMember) {
          goto LABEL_46;
        }
      }
      ++v42;
    }
    int v47 = v43;
    int v48 = v44;
LABEL_46:
    if ((uint64_t)(v233.i64[0] - v232) < 1
      || (uint64_t v51 = -1 - 0x3333333333333333 * ((uint64_t)(v233.i64[0] - v232) >> 4), *(void *)(v232 + 80 * v51 + 8) != v31))
    {
      a3 = v208;
      if (v47)
      {
        int v34 = *__error();
        int v54 = _SILogForLogForCategory(19);
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)stat buf = 134218240;
          *(void *)&uint8_t buf[4] = a8;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v24;
          _os_log_impl(&dword_1BD672000, v54, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu skipped (Reason: It has only special chars)", buf, 0x16u);
        }
        goto LABEL_26;
      }
LABEL_67:
      int v60 = *__error();
      NSUInteger v61 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)stat buf = 134218240;
        *(void *)&uint8_t buf[4] = a8;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&unsigned char buf[14] = v24;
        _os_log_impl(&dword_1BD672000, v61, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu added as new token", buf, 0x16u);
      }
      *__error() = v60;
      *(_OWORD *)&v240[8] = 0u;
      *(void *)&uint8_t buf[16] = 0;
      *(void *)&unsigned char buf[24] = -1;
      *(void *)&uint8_t buf[32] = -1;
      *(_OWORD *)&buf[40] = 0u;
      *(_OWORD *)v240 = 0u;
      *(_DWORD *)&v240[16] = 1065353216;
      *(void *)stat buf = v31;
      *(void *)&uint8_t buf[8] = v31 + v33;
      NSUInteger v62 = (_OWORD *)v233.i64[0];
      if (v233.i64[0] >= (unint64_t)v233.i64[1])
      {
        unint64_t v66 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v233.i64[0] - v232) >> 4);
        unint64_t v67 = v66 + 1;
        if (v66 + 1 > 0x333333333333333) {
          abort();
        }
        if (0x999999999999999ALL * ((uint64_t)(v233.i64[1] - v232) >> 4) > v67) {
          unint64_t v67 = 0x999999999999999ALL * ((uint64_t)(v233.i64[1] - v232) >> 4);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v233.i64[1] - v232) >> 4) >= 0x199999999999999) {
          unint64_t v68 = 0x333333333333333;
        }
        else {
          unint64_t v68 = v67;
        }
        int v237 = &v233.i64[1];
        if (v68) {
          unint64_t v68 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<PhLLMTokenInfo>>(v68);
        }
        else {
          uint64_t v69 = 0;
        }
        unint64_t v70 = v68 + 80 * v66;
        v234[0] = v68;
        v234[1] = v70;
        unint64_t v235 = v70;
        unint64_t v236 = v68 + 80 * v69;
        long long v71 = *(_OWORD *)buf;
        long long v72 = *(_OWORD *)&buf[16];
        *(void *)(v70 + 32) = *(void *)&buf[32];
        *(_OWORD *)unint64_t v70 = v71;
        *(_OWORD *)(v70 + 16) = v72;
        std::unordered_set<int>::unordered_set(v70 + 40, (uint64_t)&buf[40]);
        v235 += 80;
        std::vector<PhTokenInfo>::__swap_out_circular_buffer((uint64_t *)&v232, v234);
        uint64_t v65 = v233.i64[0];
        std::__split_buffer<PhTokenInfo>::~__split_buffer((uint64_t)v234);
      }
      else
      {
        long long v63 = *(_OWORD *)buf;
        long long v64 = *(_OWORD *)&buf[16];
        *(void *)(v233.i64[0] + 32) = *(void *)&buf[32];
        _OWORD *v62 = v63;
        v62[1] = v64;
        std::unordered_set<int>::unordered_set((uint64_t)v62 + 40, (uint64_t)&buf[40]);
        uint64_t v65 = (uint64_t)(v62 + 5);
      }
      v233.i64[0] = v65;
      std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::~__hash_table((uint64_t)&buf[40]);
      goto LABEL_82;
    }
    a3 = v208;
    if (v47)
    {
      int v52 = *__error();
      int v53 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)stat buf = 134218240;
        *(void *)&uint8_t buf[4] = a8;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&unsigned char buf[14] = v24;
        _os_log_impl(&dword_1BD672000, v53, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Adjacent token %lu marks prev-token as prefix (Reason: It has only special chars)", buf, 0x16u);
      }
      *__error() = v52;
      *(unsigned char *)(v232 + 80 * v51 + 17) = 1;
      v219 &= v24 != v207;
      goto LABEL_27;
    }
    if (v48 == 0 && !v206) {
      goto LABEL_67;
    }
    int v57 = *__error();
    int v58 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134218240;
      *(void *)&uint8_t buf[4] = a8;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&unsigned char buf[14] = v24;
      _os_log_impl(&dword_1BD672000, v58, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Adjacent token %lu combined with prev-token", buf, 0x16u);
    }
    *__error() = v57;
    unint64_t v59 = v232 + 80 * v51;
    *(unsigned char *)(v59 + 16) = 1;
    *(void *)(v59 + 8) += v33;
LABEL_82:
    BOOL v206 = v48 != 0;
    if (v24 == v207)
    {
      char v219 = 0;
      *(unsigned char *)(v233.i64[0] - 63) = 1;
    }
    if ([v218 count])
    {
      uint64_t v73 = 0;
      while (1)
      {
        v249.location = objc_msgSend((id)objc_msgSend(v218, "objectAtIndexedSubscript:", v73), "rangeValue");
        v249.length = v74;
        v245.location = v31;
        v245.length = v33;
        if (NSIntersectionRange(v245, v249).length) {
          break;
        }
        if (++v73 >= (unint64_t)[v218 count]) {
          goto LABEL_92;
        }
      }
      int v75 = *__error();
      long long v76 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)stat buf = 134218496;
        *(void *)&uint8_t buf[4] = a8;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&unsigned char buf[14] = v24;
        *(_WORD *)&buf[22] = 2048;
        *(void *)&unsigned char buf[24] = v73;
        _os_log_impl(&dword_1BD672000, v76, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu has a date parse: %lu", buf, 0x20u);
      }
      *__error() = v75;
      *(void *)(v233.i64[0] - 56) = v73;
    }
LABEL_92:
    if ([v211 count])
    {
      uint64_t v77 = 0;
      while (1)
      {
        v250.location = objc_msgSend((id)objc_msgSend(v211, "objectAtIndexedSubscript:", v77), "rangeValue");
        v250.length = v78;
        v246.location = v31;
        v246.length = v33;
        if (NSIntersectionRange(v246, v250).length) {
          break;
        }
        if (++v77 >= (unint64_t)[v211 count]) {
          goto LABEL_100;
        }
      }
      int v79 = *__error();
      BOOL v80 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)stat buf = 134218496;
        *(void *)&uint8_t buf[4] = a8;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&unsigned char buf[14] = v24;
        *(_WORD *)&buf[22] = 2048;
        *(void *)&unsigned char buf[24] = v77;
        _os_log_impl(&dword_1BD672000, v80, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu has a person parse: %lu", buf, 0x20u);
      }
      *__error() = v79;
      *(void *)(v233.i64[0] - 48) = v77;
    }
LABEL_100:
    if (*(unsigned char *)(v233.i64[0] - 64))
    {
      int v34 = *__error();
      BOOL v81 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)stat buf = 134218240;
        *(void *)&uint8_t buf[4] = a8;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&unsigned char buf[14] = v24;
        _os_log_impl(&dword_1BD672000, v81, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu is concat token, skipping U2's predictions for it", buf, 0x16u);
      }
      goto LABEL_26;
    }
    uint64_t v82 = (const void *)getkQPQUOutputTokenArgIdsKey();
    int v83 = (void *)CFDictionaryGetValue(ValueAtIndex, v82);
    int v84 = (const void *)getkQPQUOutputTokenArgScoresKey();
    uint64_t v85 = (void *)CFDictionaryGetValue(ValueAtIndex, v84);
    if (![v83 count])
    {
      int v34 = *__error();
      uint64_t v95 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)stat buf = 134218240;
        *(void *)&uint8_t buf[4] = a8;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&unsigned char buf[14] = v24;
        _os_log_impl(&dword_1BD672000, v95, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu skipped (ERROR: No U2 parse for the token)", buf, 0x16u);
      }
      goto LABEL_26;
    }
    uint64_t v86 = [v83 count];
    if (v86 != [v85 count])
    {
      int v34 = *__error();
      uint32_t v96 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v97 = [v83 count];
        uint64_t v98 = [v85 count];
        *(_DWORD *)stat buf = 134218752;
        *(void *)&uint8_t buf[4] = a8;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&unsigned char buf[14] = v24;
        *(_WORD *)&buf[22] = 2048;
        *(void *)&unsigned char buf[24] = v97;
        *(_WORD *)&uint8_t buf[32] = 2048;
        *(void *)&buf[34] = v98;
        _os_log_impl(&dword_1BD672000, v96, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu skipped (ERROR: tokIds.count(%lu) != tokIdsScore.count(%lu))", buf, 0x2Au);
      }
      goto LABEL_26;
    }
    unint64_t v87 = 0;
    uint64_t v205 = v85;
    while (v87 < objc_msgSend(v83, "count", v205))
    {
      objc_msgSend((id)objc_msgSend(v85, "objectAtIndexedSubscript:", v87), "doubleValue");
      double v89 = v88;
      if (v88 < 0.200000003) {
        break;
      }
      int v90 = objc_msgSend((id)objc_msgSend(v83, "objectAtIndexedSubscript:", v87), "intValue");
      int v91 = v90;
      if (v90 > 7)
      {
        if (v90 == 8 || v90 == 21) {
          goto LABEL_127;
        }
      }
      else
      {
        if (!v90)
        {
          if (v89 >= 0.5) {
            goto LABEL_127;
          }
          goto LABEL_128;
        }
        if (v90 == 1) {
          goto LABEL_127;
        }
      }
      if (v90 == 10 && v89 >= 0.400000006)
      {
        int v92 = *__error();
        uint64_t v93 = _SILogForLogForCategory(19);
        if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)stat buf = 134218752;
          *(void *)&uint8_t buf[4] = a8;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v24;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = 10;
          *(_WORD *)&buf[28] = 2048;
          *(double *)&buf[30] = v89;
          _os_log_impl(&dword_1BD672000, v93, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Location token %lu added with tokId: %d (Reason: It has high conf: %f)", buf, 0x26u);
        }
LABEL_126:
        *__error() = v92;
        uint64_t v85 = v205;
LABEL_127:
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v233.i64[0] - 40, v91, v91);
        goto LABEL_128;
      }
      if (v90 == 2 && v89 >= 0.25)
      {
        int v92 = *__error();
        unsigned int v94 = _SILogForLogForCategory(19);
        if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)stat buf = 134218752;
          *(void *)&uint8_t buf[4] = a8;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v24;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&unsigned char buf[24] = 2;
          *(_WORD *)&buf[28] = 2048;
          *(double *)&buf[30] = v89;
          _os_log_impl(&dword_1BD672000, v94, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Person token %lu added with tokId: %d (Reason: It has high conf: %f)", buf, 0x26u);
        }
        goto LABEL_126;
      }
      if (((v90 - 3) < 2 || v90 == 36) && v216 == -1) {
        uint64_t v216 = -1 - 0x3333333333333333 * ((uint64_t)(v233.i64[0] - v232) >> 4);
      }
LABEL_128:
      ++v87;
    }
    utf8QueryString((const __CFString **)buf, (uint64_t)&v231, 1, 0);
    BOOL v99 = isRelationWord(buf);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v99)
    {
      int v100 = *__error();
      int v101 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)stat buf = 134218240;
        *(void *)&uint8_t buf[4] = a8;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&unsigned char buf[14] = v24;
        _os_log_impl(&dword_1BD672000, v101, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu is a relationship token as per vocab", buf, 0x16u);
      }
      *__error() = v100;
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v233.i64[0] - 40, 2, 2);
    }
    uint64_t v102 = (const void *)getkQPQUOutputSpanTypesKey();
    if (CFDictionaryContainsKey(ValueAtIndex, v102))
    {
      int v103 = (const void *)getkQPQUOutputSpanTypesKey();
      CFNumberRef v104 = (void *)CFDictionaryGetValue(ValueAtIndex, v103);
      long long v229 = 0u;
      long long v230 = 0u;
      long long v227 = 0u;
      long long v228 = 0u;
      uint64_t v105 = [v104 countByEnumeratingWithState:&v227 objects:v238 count:16];
      if (v105)
      {
        uint64_t v106 = *(void *)v228;
        while (1)
        {
          for (uint64_t i = 0; i != v105; ++i)
          {
            if (*(void *)v228 != v106) {
              objc_enumerationMutation(v104);
            }
            unsigned int v108 = *(void **)(*((void *)&v227 + 1) + 8 * i);
            if ([v108 isEqualToString:@"Person"])
            {
              int v109 = 2;
LABEL_155:
              int v110 = *__error();
              NSUInteger v111 = _SILogForLogForCategory(19);
              if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)stat buf = 134218754;
                *(void *)&uint8_t buf[4] = a8;
                *(_WORD *)&unsigned char buf[12] = 2048;
                *(void *)&unsigned char buf[14] = v24;
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)&unsigned char buf[24] = v109;
                *(_WORD *)&buf[28] = 2112;
                *(void *)&buf[30] = v108;
                _os_log_impl(&dword_1BD672000, v111, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu added with tokID: %d (Reason: It has %@ span)", buf, 0x26u);
              }
              *__error() = v110;
              std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v233.i64[0] - 40, v109, v109);
              continue;
            }
            if ([v108 isEqualToString:@"Location"])
            {
              int v109 = 10;
              goto LABEL_155;
            }
            int v112 = *__error();
            NSUInteger v113 = _SILogForLogForCategory(19);
            if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)stat buf = 134218498;
              *(void *)&uint8_t buf[4] = a8;
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&unsigned char buf[14] = v24;
              *(_WORD *)&buf[22] = 2112;
              *(void *)&unsigned char buf[24] = v108;
              _os_log_impl(&dword_1BD672000, v113, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu has unsupported span: %@, skipping it", buf, 0x20u);
            }
            *__error() = v112;
          }
          uint64_t v105 = [v104 countByEnumeratingWithState:&v227 objects:v238 count:16];
          if (!v105)
          {
            a3 = v208;
            break;
          }
        }
      }
    }
LABEL_27:
    ++v24;
  }
  while (v24 != v221);
  uint64_t v116 = v232;
  if (v216 == -1)
  {
LABEL_176:
    uint64_t v117 = v233.i64[0];
    unint64_t v118 = 0xCCCCCCCCCCCCCCCDLL * ((v233.i64[0] - v116) >> 4);
    uint64_t v216 = v118;
    goto LABEL_177;
  }
  uint64_t v117 = v233.i64[0];
  unint64_t v118 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v233.i64[0] - v232) >> 4);
LABEL_177:
  *a7 += v118;
  if (v116 == v117) {
    goto LABEL_292;
  }
  v222 = 0;
  uint64_t v125 = -1;
  uint64_t v126 = -1;
  CFArrayRef theArraya = (CFArrayRef)v117;
  do
  {
    uint64_t v127 = v126;
    NSUInteger v128 = (char *)objc_msgSend((id)objc_msgSend(v225, "substringWithRange:", *(void *)v116, *(void *)(v116 + 8) - *(void *)v116), "UTF8String");
    ++v126;
    if (!v128)
    {
      int v135 = *__error();
      uint64_t v136 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)stat buf = 134218240;
        *(void *)&uint8_t buf[4] = a8;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&unsigned char buf[14] = v126;
        _os_log_impl(&dword_1BD672000, v136, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Search token %ld skipped (ERROR: UTF8 encoding of token failed)", buf, 0x16u);
      }
      *__error() = v135;
      goto LABEL_282;
    }
    uint64_t v129 = -2 - 0x3333333333333333 * ((uint64_t)(v233.i64[0] - v232) >> 4);
    if ((v127 != v129) | v219 & 1)
    {
      if (!(*(unsigned __int8 *)(v116 + 16) | *(unsigned __int8 *)(v116 + 17))
        && std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::find<int>((void *)(v116 + 40), 0))
      {
LABEL_185:
        int v133 = *__error();
        int v134 = _SILogForLogForCategory(19);
        if (os_log_type_enabled(v134, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)stat buf = 134218240;
          *(void *)&uint8_t buf[4] = a8;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v126;
          _os_log_impl(&dword_1BD672000, v134, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Search token %ld skipped (Reason: It is optional)", buf, 0x16u);
        }
        *__error() = v133;
LABEL_188:
        --*a7;
        goto LABEL_282;
      }
      NSUInteger v130 = (char *)std::string::basic_string[abi:nn180100]<0>(buf, v128);
      BOOL v131 = isOptionalWord(v130);
      BOOL v132 = v131;
      if ((buf[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)buf);
        if (v132) {
          goto LABEL_185;
        }
      }
      else if (v131)
      {
        goto LABEL_185;
      }
    }
    uint64_t v137 = qword_1EA0DAC00;
    uint64_t v138 = 0;
    if (*(unsigned char *)(v116 + 17))
    {
      while (v137)
      {
        unint64_t v142 = (const char *)(v137 + 16);
        if (*(char *)(v137 + 39) < 0) {
          unint64_t v142 = *(const char **)v142;
        }
        QueryNode = createQueryNode(v142, v128, 112, 1, -1, 0.0, 0.0);
        uint64_t v138 = makeOrNode((uint64_t)v138, (uint64_t)QueryNode);
        uint64_t v137 = *(void *)v137;
      }
      if (v126 >= v216)
      {
        int v141 = -1;
        goto LABEL_206;
      }
    }
    else
    {
      if (qword_1EA0DAC00)
      {
        do
        {
          int v139 = (const char *)(v137 + 16);
          if (*(char *)(v137 + 39) < 0) {
            int v139 = *(const char **)v139;
          }
          uint64_t v140 = createQueryNode(v139, v128, 112, 1, 0, 0.0, 0.0);
          uint64_t v138 = makeOrNode((uint64_t)v138, (uint64_t)v140);
          uint64_t v137 = *(void *)v137;
        }
        while (v137);
      }
      if (v126 >= v216)
      {
        int v141 = 0;
LABEL_206:
        uint64_t v144 = createQueryNode("kMDItemPhotosSharedLibraryContributorsNames", v128, 112, 1, v141, 0.0, 0.0);
        char v145 = makeOrNode((uint64_t)v138, (uint64_t)v144);
        uint64_t v146 = createQueryNode("kMDItemPhotosSharedLibraryContributorsNamesAlternatives", v128, 112, 1, v141, 0.0, 0.0);
        uint64_t v138 = makeOrNode((uint64_t)v145, (uint64_t)v146);
      }
    }
    if (*(void *)(v116 + 32) != -1)
    {
      int v147 = objc_msgSend(v214, "objectAtIndexedSubscript:");
      if ([v147 length] && (unint64_t v148 = (char *)objc_msgSend(v147, "UTF8String")) != 0) {
        query_node_with_ann = db_make_query_node_with_ann(v148, 0);
      }
      else {
        query_node_with_ann = 0;
      }
      uint64_t v138 = makeOrNode((uint64_t)v138, (uint64_t)query_node_with_ann);
    }
    if (std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::find<int>((void *)(v116 + 40), 21))
    {
      int v150 = createQueryNode("kMDItemPhotosFavorited", "1", 0, 1, 0, 0.0, 0.0);
      uint64_t v138 = makeOrNode((uint64_t)v138, (uint64_t)v150);
    }
    if (v222)
    {
      if (v125 < 0 || (uint64_t v151 = *(void *)(v232 + 80 * v125 + 24), v151 == -1))
      {
        int v155 = *__error();
        uint64_t v156 = _SILogForLogForCategory(19);
        if (os_log_type_enabled(v156, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)stat buf = 134217984;
          *(void *)&uint8_t buf[4] = a8;
          _os_log_impl(&dword_1BD672000, v156, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} ERROR: Matching unexpected condition guard", buf, 0xCu);
        }
        *__error() = v155;
      }
      else
      {
        if (v151 == *(void *)(v116 + 24))
        {
          v222 = makeAndNode((uint64_t)v222, (uint64_t)v138);
          if (v127 != v129) {
            goto LABEL_235;
          }
          int v152 = (void *)[v215 objectAtIndexedSubscript:*(void *)(v116 + 24)];
          if ([v152 length] && (unsigned int v153 = (char *)objc_msgSend(v152, "UTF8String")) != 0) {
            int v154 = db_make_query_node_with_ann(v153, 0);
          }
          else {
            int v154 = 0;
          }
          uint64_t v138 = makeOrNode((uint64_t)v222, (uint64_t)v154);
          v222 = 0;
          uint64_t v125 = v127 + 1;
          goto LABEL_241;
        }
        NSUInteger v157 = objc_msgSend(v215, "objectAtIndexedSubscript:");
        if ([v157 length] && (NSUInteger v158 = (char *)objc_msgSend(v157, "UTF8String")) != 0) {
          NSUInteger v159 = db_make_query_node_with_ann(v158, 0);
        }
        else {
          NSUInteger v159 = 0;
        }
        NSUInteger v160 = makeOrNode((uint64_t)v222, (uint64_t)v159);
        v222 = 0;
        *a6 = (uint64_t)makeAndNode(*a6, (uint64_t)v160);
      }
    }
    else
    {
      v222 = 0;
    }
    if (*(void *)(v116 + 24) != -1)
    {
      if (v127 != v129)
      {
        v222 = v138;
LABEL_235:
        uint64_t v125 = v127 + 1;
        goto LABEL_242;
      }
      uint64_t v161 = objc_msgSend(v215, "objectAtIndexedSubscript:");
      if ([v161 length] && (int v162 = (char *)objc_msgSend(v161, "UTF8String")) != 0) {
        float v163 = db_make_query_node_with_ann(v162, 0);
      }
      else {
        float v163 = 0;
      }
      uint64_t v138 = makeOrNode((uint64_t)v138, (uint64_t)v163);
    }
LABEL_241:
    *a6 = (uint64_t)makeAndNode(*a6, (uint64_t)v138);
LABEL_242:
    if ((a4 & 1) == 0 && !*(unsigned char *)(v116 + 16))
    {
      if (*(void *)(v116 + 24) == -1) {
        goto LABEL_250;
      }
      int v164 = *__error();
      BOOL v165 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)stat buf = 134218240;
        *(void *)&uint8_t buf[4] = a8;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&unsigned char buf[14] = v126;
        _os_log_impl(&dword_1BD672000, v165, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {ANN} Added date filter for token %lu", buf, 0x16u);
      }
      *__error() = v164;
      int v166 = (void *)[v215 objectAtIndexedSubscript:*(void *)(v116 + 24)];
      if ([v166 length] && (uint64_t v167 = (char *)objc_msgSend(v166, "UTF8String")) != 0) {
        int v168 = db_make_query_node_with_ann(v167, 0);
      }
      else {
LABEL_250:
      }
        int v168 = 0;
      if (*(void *)(v116 + 32) != -1)
      {
        int v169 = *__error();
        unint64_t v170 = _SILogForLogForCategory(19);
        if (os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)stat buf = 134218240;
          *(void *)&uint8_t buf[4] = a8;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v126;
          _os_log_impl(&dword_1BD672000, v170, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {ANN} Added person identifier filter for token %lu", buf, 0x16u);
        }
        *__error() = v169;
        int v171 = (void *)[v214 objectAtIndexedSubscript:*(void *)(v116 + 32)];
        if ([v171 length] && (size_t v172 = (char *)objc_msgSend(v171, "UTF8String")) != 0) {
          int v173 = db_make_query_node_with_ann(v172, 0);
        }
        else {
          int v173 = 0;
        }
        int v168 = makeOrNode((uint64_t)v168, (uint64_t)v173);
      }
      if (std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::find<int>((void *)(v116 + 40), 8))
      {
        int v174 = *__error();
        int v175 = _SILogForLogForCategory(19);
        if (os_log_type_enabled(v175, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)stat buf = 134218240;
          *(void *)&uint8_t buf[4] = a8;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v126;
          _os_log_impl(&dword_1BD672000, v175, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {ANN} Added holiday/season filter for token %lu", buf, 0x16u);
        }
        *__error() = v174;
        uint64_t v176 = createQueryNode("kMDItemPhotosHolidays", v128, 112, 1, 0, 0.0, 0.0);
        int v177 = makeOrNode((uint64_t)v168, (uint64_t)v176);
        float v178 = createQueryNode("kMDItemPhotosSeasons", v128, 112, 1, 0, 0.0, 0.0);
        int v168 = makeOrNode((uint64_t)v177, (uint64_t)v178);
      }
      if (std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::find<int>((void *)(v116 + 40), 1))
      {
        int v179 = *__error();
        uint64_t v180 = _SILogForLogForCategory(19);
        if (os_log_type_enabled(v180, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)stat buf = 134218240;
          *(void *)&uint8_t buf[4] = a8;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v126;
          _os_log_impl(&dword_1BD672000, v180, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {ANN} Added media type filter for token %lu", buf, 0x16u);
        }
        *__error() = v179;
        char v181 = createQueryNode("kMDItemPhotosMediaTypes", v128, 112, 1, 0, 0.0, 0.0);
        int v168 = makeOrNode((uint64_t)v168, (uint64_t)v181);
      }
      if (std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::find<int>((void *)(v116 + 40), 10))
      {
        int v182 = *__error();
        int v183 = _SILogForLogForCategory(19);
        if (os_log_type_enabled(v183, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)stat buf = 134218240;
          *(void *)&uint8_t buf[4] = a8;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v126;
          _os_log_impl(&dword_1BD672000, v183, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {ANN} Added location filter for token %lu", buf, 0x16u);
        }
        *__error() = v182;
        uint64_t v184 = createQueryNode("kMDItemPhotosLocationKeywords", v128, 112, 1, 0, 0.0, 0.0);
        int v168 = makeOrNode((uint64_t)v168, (uint64_t)v184);
      }
      if (std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::find<int>((void *)(v116 + 40), 21))
      {
        int v185 = *__error();
        int v186 = _SILogForLogForCategory(19);
        if (os_log_type_enabled(v186, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)stat buf = 134218240;
          *(void *)&uint8_t buf[4] = a8;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v126;
          _os_log_impl(&dword_1BD672000, v186, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {ANN} Added favorited filter for token %lu", buf, 0x16u);
        }
        *__error() = v185;
        uint64_t v187 = createQueryNode("kMDItemPhotosFavorited", "1", 0, 1, 0, 0.0, 0.0);
        int v168 = makeOrNode((uint64_t)v168, (uint64_t)v187);
      }
      if (*(void *)(v116 + 32) == -1
        && std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::find<int>((void *)(v116 + 40), 2))
      {
        int v188 = *__error();
        uint64_t v189 = _SILogForLogForCategory(19);
        if (os_log_type_enabled(v189, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)stat buf = 134218240;
          *(void *)&uint8_t buf[4] = a8;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v126;
          _os_log_impl(&dword_1BD672000, v189, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {ANN} Added person name/alternative filter for token %lu", buf, 0x16u);
        }
        *__error() = v188;
        float v190 = createQueryNode("kMDItemPhotosPeopleNames", v128, 112, 1, 0, 0.0, 0.0);
        uint64_t v191 = makeOrNode((uint64_t)v168, (uint64_t)v190);
        int v192 = createQueryNode("kMDItemPhotosPeopleNamesAlternatives", v128, 112, 1, 0, 0.0, 0.0);
        int v168 = makeOrNode((uint64_t)v191, (uint64_t)v192);
      }
      if (v168)
      {
        *a5 = (uint64_t)makeAndNode(*a5, (uint64_t)v168);
        if (*(void *)(v116 + 24) == -1) {
          goto LABEL_188;
        }
      }
    }
LABEL_282:
    v116 += 80;
  }
  while ((CFArrayRef)v116 != theArraya);
  uint64_t v116 = v232;
  if (v222)
  {
    uint64_t v193 = (void *)[v215 objectAtIndexedSubscript:*(void *)(v232 + 80 * v125 + 24)];
    if ([v193 length] && (uint64_t v194 = (char *)objc_msgSend(v193, "UTF8String")) != 0) {
      NSUInteger v195 = db_make_query_node_with_ann(v194, 0);
    }
    else {
      NSUInteger v195 = 0;
    }
    NSUInteger v196 = makeOrNode((uint64_t)v222, (uint64_t)v195);
    *a6 = (uint64_t)makeAndNode(*a6, (uint64_t)v196);
    uint64_t v116 = v232;
  }
LABEL_292:
  uint64_t v197 = v233.i64[0];
  unint64_t v198 = v116;
  if (v233.i64[0] != v116)
  {
    do
    {
      uint64_t v199 = v197 - 80;
      std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::~__hash_table(v197 - 40);
      uint64_t v197 = v199;
    }
    while (v199 != v116);
    unint64_t v198 = v232;
  }
  v233.i64[0] = v116;
  int64x2_t v200 = vshrq_n_s64(vsubq_s64(v233, vdupq_n_s64(v198)), 4uLL);
  unint64_t v201 = 0xCCCCCCCCCCCCCCCDLL * v200.i64[0];
  unint64_t v202 = v201;
  if (0xCCCCCCCCCCCCCCCDLL * v200.i64[1] > v201)
  {
    *(void *)&uint8_t buf[32] = &v233.i64[1];
    if (v233.i64[0] == v198)
    {
      int v203 = 0;
      uint64_t v204 = 0;
    }
    else
    {
      int v203 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<PhLLMTokenInfo>>(v201);
    }
    *(void *)stat buf = v203;
    *(void *)&uint8_t buf[8] = &v203[80 * v202];
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&unsigned char buf[24] = &v203[80 * v204];
    std::vector<PhTokenInfo>::__swap_out_circular_buffer((uint64_t *)&v232, buf);
    std::__split_buffer<PhTokenInfo>::~__split_buffer((uint64_t)buf);
  }
  CFRelease(theSet);
  CFRelease(v210);
  *(void *)stat buf = &v232;
  std::vector<PhTokenInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
}

void sub_1BDA6896C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  *(void *)(v57 - 240) = &a57;
  std::vector<PhTokenInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)(v57 - 240));
  _Unwind_Resume(a1);
}

void PhRetrievalAttribs()
{
  {
    PhRetrievalAttribs(void)::_retrievalAttribs = 0u;
    *(_OWORD *)&qword_1EA0DAC00 = 0u;
    dword_1EA0DAC10 = 1065353216;
  }
  if (PhRetrievalAttribs(void)::onceToken != -1)
  {
    dispatch_once(&PhRetrievalAttribs(void)::onceToken, &__block_literal_global_170);
  }
}

float _scaleBiasBasedAnnThresh(float a1, float a2, float a3, int a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a2 == 0.0)
  {
    int v5 = *__error();
    int v6 = _SILogForLogForCategory(19);
    float v7 = 1.7;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v28 = 67109376;
      *(_DWORD *)NSUInteger v29 = a4;
      *(_WORD *)&v29[4] = 2048;
      *(void *)&v29[6] = 0x3FFB333340000000;
      float v8 = "MD%d: Using default similarity of 0.15 to get threshold = %f (ERROR: scale is 0)";
      uint64_t v9 = v6;
      uint32_t v10 = 18;
LABEL_23:
      _os_log_impl(&dword_1BD672000, v9, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v28, v10);
    }
  }
  else
  {
    float v13 = a1;
    if (a1 == -3.4028e38)
    {
      uint64_t v14 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "valueForKey:", @"SpotlightPhotosAnnCutoff");
      if (!v14) {
        goto LABEL_10;
      }
      uint64_t v15 = (void *)v14;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        goto LABEL_10;
      }
      [v15 floatValue];
      float v17 = v16;
      int v18 = *__error();
      int v19 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        int v28 = 134217984;
        *(double *)NSUInteger v29 = v17;
        _os_log_impl(&dword_1BD672000, v19, OS_LOG_TYPE_DEFAULT, "Using user default cutoff: %f", (uint8_t *)&v28, 0xCu);
      }
      *__error() = v18;
      float v20 = logf(v17);
      float v13 = v20 - logf(1.0 - v17);
      if (v13 == -1.0)
      {
LABEL_10:
        if (a4 == 5)
        {
          uint64_t v21 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "objectForKey:", @"SpotlightPhotosANNPrecision");
          float v13 = -0.9445;
          if (v21)
          {
            CFAllocatorRef v22 = (void *)v21;
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              int v23 = [v22 intValue];
              int v24 = *__error();
              __n128 v25 = _SILogForLogForCategory(19);
              if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
              {
                int v28 = 67109120;
                *(_DWORD *)NSUInteger v29 = v23;
                _os_log_impl(&dword_1BD672000, v25, OS_LOG_TYPE_DEFAULT, "Using user default precision: %d", (uint8_t *)&v28, 8u);
              }
              *__error() = v24;
              if (v23 > 84)
              {
                switch(v23)
                {
                  case 'U':
                    float v13 = -0.4055;
                    break;
                  case 'Z':
                    float v13 = 0.0;
                    break;
                  case '_':
                    float v13 = 0.7082;
                    break;
                }
              }
              else
              {
                switch(v23)
                {
                  case 'F':
                    float v13 = -1.3863;
                    break;
                  case 'K':
                    float v13 = -1.046;
                    break;
                  case 'P':
                    float v13 = -0.7538;
                    break;
                }
              }
            }
          }
        }
        else
        {
          float v13 = -1.0986;
        }
      }
    }
    float v7 = (float)(1.0 - (float)((float)(v13 - a3) / a2)) + (float)(1.0 - (float)((float)(v13 - a3) / a2));
    int v5 = *__error();
    uint64_t v26 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      int v28 = 67110144;
      *(_DWORD *)NSUInteger v29 = a4;
      *(_WORD *)&v29[4] = 2048;
      *(double *)&v29[6] = v7;
      __int16 v30 = 2048;
      double v31 = v13;
      __int16 v32 = 2048;
      double v33 = a2;
      __int16 v34 = 2048;
      double v35 = a3;
      float v8 = "MD%d calibrated threshold: %f, cutoffOffset: %f, scale: %f, bias: %f";
      uint64_t v9 = v26;
      uint32_t v10 = 48;
      goto LABEL_23;
    }
  }
  *__error() = v5;
  return v7;
}

void ___ZL18PhRetrievalAttribsv_block_invoke_13438()
{
  v3.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:nn180100]<0>(&__str, "*");
  std::string::basic_string[abi:nn180100]<0>(v2, "kMDItemTextContent");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>((uint64_t)&PhRetrievalAttribs(void)::_retrievalAttribs, &__str, &v3);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v2[i + 2]) < 0) {
      operator delete(*(void **)((char *)&__str + i * 8 + 24));
    }
  }
}

void sub_1BDA68FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZL30PhPopulateSomeFiltersFromParseP18NSAttributedStringP14NSMutableArrayIP8NSStringEPS1_IP7NSValueES5_S9__block_invoke_13443(id *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = [a2 count];
  if (result)
  {
    if ([a2 objectForKeyedSubscript:@"kQPDate"]
      && [a2 objectForKeyedSubscript:@"kQPDescription"])
    {
      objc_msgSend(a1[4], "addObject:", objc_msgSend(a2, "objectForKeyedSubscript:", @"kQPDescription"));
      uint64_t v9 = a1 + 5;
    }
    else
    {
      uint64_t result = [a2 objectForKeyedSubscript:@"kQPGroundedPerson"];
      if (!result) {
        return result;
      }
      uint64_t result = [a2 objectForKeyedSubscript:@"kQPDescription"];
      if (!result) {
        return result;
      }
      objc_msgSend(a1[6], "addObject:", objc_msgSend(a2, "objectForKeyedSubscript:", @"kQPDescription"));
      uint64_t v9 = a1 + 7;
    }
    uint32_t v10 = *v9;
    uint64_t v11 = objc_msgSend(MEMORY[0x1E4F29238], "valueWithRange:", a3, a4);
    return [v10 addObject:v11];
  }
  return result;
}

uint64_t ___ZL29PhPopulateDateFilterFromParseP18NSAttributedStringP14NSMutableArrayIP8NSStringEPS1_IP7NSValueE_block_invoke_13446(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = [a2 count];
  if (result)
  {
    uint64_t result = [a2 objectForKeyedSubscript:@"kQPDate"];
    if (result)
    {
      uint64_t result = [a2 objectForKeyedSubscript:@"kQPDescription"];
      if (result)
      {
        objc_msgSend(*(id *)(a1 + 32), "addObject:", objc_msgSend(a2, "objectForKeyedSubscript:", @"kQPDescription"));
        uint64_t v9 = *(void **)(a1 + 40);
        uint64_t v10 = objc_msgSend(MEMORY[0x1E4F29238], "valueWithRange:", a3, a4);
        return [v9 addObject:v10];
      }
    }
  }
  return result;
}

void sub_1BDA692D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BDA6941C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BDA69564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BDA696AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(uint64_t **)(a2 + 16); i; uint64_t i = (uint64_t *)*i)
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a1, *((_DWORD *)i + 4), *((_DWORD *)i + 4));
  return a1;
}

void sub_1BDA69724(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t getkQPQUOutputSpanTypesKey(void)
{
  uint64_t v4 = 0;
  int v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v0 = getkQPQUOutputSpanTypesKeySymbolLoc(void)::ptr;
  uint64_t v7 = getkQPQUOutputSpanTypesKeySymbolLoc(void)::ptr;
  if (!getkQPQUOutputSpanTypesKeySymbolLoc(void)::ptr)
  {
    ParserLibrary = QueryParserLibrary();
    v5[3] = (uint64_t)dlsym(ParserLibrary, "kQPQUOutputSpanTypesKey");
    getkQPQUOutputSpanTypesKeySymbolLoc(void)::unint64_t ptr = v5[3];
    uint64_t v0 = v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (v0) {
    return *(void *)v0;
  }
  std::string v3 = (void *)[MEMORY[0x1E4F28B00] currentHandler];
  uint64_t result = objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(NSString, "stringWithUTF8String:", "CFStringRef  _Nullable getkQPQUOutputSpanTypesKey()"), @"PRQueryPhotosProcessor.mm", 27, @"%s", dlerror());
  __break(1u);
  return result;
}

void sub_1BDA6986C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void std::vector<PhTokenInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 80;
        std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::~__hash_table((uint64_t)(v4 - 40));
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::vector<PhTokenInfo>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      long long v8 = *(_OWORD *)(v2 + v5 - 80);
      long long v9 = *(_OWORD *)(v2 + v5 - 64);
      *(void *)(v6 - 48) = *(void *)(v2 + v5 - 48);
      *(_OWORD *)(v6 - 80) = v8;
      *(_OWORD *)(v6 - 64) = v9;
      uint64_t v10 = *(void *)(v2 + v5 - 40);
      *(void *)(v7 - 40) = 0;
      *(void *)(v6 - 40) = v10;
      *(void *)(v6 - 32) = *(void *)(v2 + v5 - 32);
      *(void *)(v7 - 32) = 0;
      uint64_t v11 = *(void *)(v2 + v5 - 24);
      *(void *)(v4 + v5 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v11;
      uint64_t v12 = *(void *)(v2 + v5 - 16);
      *(void *)(v6 - 16) = v12;
      *(_DWORD *)(v6 - 8) = *(_DWORD *)(v2 + v5 - 8);
      if (v12)
      {
        unint64_t v13 = *(void *)(v11 + 8);
        unint64_t v14 = *(void *)(v6 - 32);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v13 >= v14) {
            v13 %= v14;
          }
        }
        else
        {
          v13 &= v14 - 1;
        }
        *(void *)(v10 + 8 * v13) = v4 + v5 - 24;
        *(void *)(v2 + v5 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
        *(void *)(v2 + v5 - 16) = 0;
      }
      v5 -= 80;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v15 = *result;
  *uint64_t result = v4;
  a2[1] = v15;
  uint64_t v16 = result[1];
  result[1] = a2[2];
  a2[2] = v16;
  uint64_t v17 = result[2];
  result[2] = a2[3];
  a2[3] = v17;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<PhTokenInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::~__hash_table(i - 40);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *___ZL35getkQPQUOutputSpanTypesKeySymbolLocv_block_invoke(uint64_t a1)
{
  ParserLibrary = QueryParserLibrary();
  uint64_t result = dlsym(ParserLibrary, "kQPQUOutputSpanTypesKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result;
  getkQPQUOutputSpanTypesKeySymbolLoc(void)::unint64_t ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t ___ZL22QueryParserLibraryCorePPc_block_invoke_13501()
{
  uint64_t result = _sl_dlopen();
  QueryParserLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

void *___ZL31getkQPQUOutputTokenKeySymbolLocv_block_invoke_13506(uint64_t a1)
{
  ParserLibrary = QueryParserLibrary();
  uint64_t result = dlsym(ParserLibrary, "kQPQUOutputTokenKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result;
  getkQPQUOutputTokenKeySymbolLoc(void)::unint64_t ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL40getkQPQUOutputTokenArgScoresKeySymbolLocv_block_invoke_13510(uint64_t a1)
{
  ParserLibrary = QueryParserLibrary();
  uint64_t result = dlsym(ParserLibrary, "kQPQUOutputTokenArgScoresKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result;
  getkQPQUOutputTokenArgScoresKeySymbolLoc(void)::unint64_t ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL37getkQPQUOutputTokenArgIdsKeySymbolLocv_block_invoke_13514(uint64_t a1)
{
  ParserLibrary = QueryParserLibrary();
  uint64_t result = dlsym(ParserLibrary, "kQPQUOutputTokenArgIdsKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result;
  getkQPQUOutputTokenArgIdsKeySymbolLoc(void)::unint64_t ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL36getkQPQUOutputTokenRangeKeySymbolLocv_block_invoke_13518(uint64_t a1)
{
  ParserLibrary = QueryParserLibrary();
  uint64_t result = dlsym(ParserLibrary, "kQPQUOutputTokenRangeKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result;
  getkQPQUOutputTokenRangeKeySymbolLoc(void)::unint64_t ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t ___ZL28NanoSecondsSinceAbsoluteTimey_block_invoke_13539()
{
  return mach_timebase_info((mach_timebase_info_t)&NanoSecondsSinceAbsoluteTime(unsigned long long)::sTimebaseInfo);
}

void ___ZL14PhThreeYearAgov_block_invoke_13555()
{
  uint64_t v0 = (void *)MEMORY[0x1C1881FD0]();
  uint64_t v1 = [MEMORY[0x1E4F1C9C8] date];
  asprintf((char **)&PhThreeYearAgo(void)::oldYear, "%lu", objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C9A8], "currentCalendar"), "component:fromDate:", 4, v1) - 3);
}

void ___ZL11CurrentYearv_block_invoke_13559()
{
  uint64_t v0 = (void *)MEMORY[0x1C1881FD0]();
  uint64_t v1 = [MEMORY[0x1E4F1C9C8] date];
  asprintf((char **)&CurrentYear(void)::currYear, "%lu", objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C9A8], "currentCalendar"), "component:fromDate:", 4, v1));
}

uint64_t ___ZL20PhRankingTreeFromStrPKcfPi_block_invoke_13560(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(a2 + 16);
    if (v2)
    {
      *(_DWORD *)(v2 + 52) = *(_DWORD *)(a1 + 40);
      *(_DWORD *)(v2 + 56) = 0;
      ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    }
  }
  return a2;
}

void PhExactMatchRankingAttribs()
{
  {
    PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs = 0u;
    *(_OWORD *)&qword_1EA0DAB98 = 0u;
    dword_1EA0DABA8 = 1065353216;
  }
  if (PhExactMatchRankingAttribs(void)::onceToken != -1)
  {
    dispatch_once(&PhExactMatchRankingAttribs(void)::onceToken, &__block_literal_global_101_13572);
  }
}

void ___ZL26PhExactMatchRankingAttribsv_block_invoke_13575()
{
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosFavorites");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1043878380;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosPeopleNames");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1043207291;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosPeopleNamesAlternatives");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1043207291;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosSceneClassificationLabels");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1042536202;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosSceneClassificationSynonyms");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1042536202;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosDescription");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1041865114;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosKeywords");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1041865114;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosLocationKeywords");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1041194025;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosHolidays");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1040522936;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosSeasons");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1040522936;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosContentCreationDateMonth");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1040522936;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosContentCreationDateMonths");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1040522936;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosContentCreationDateYear");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1040522936;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosContentCreationDateYears");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1040522936;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosBusinessCategories");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1039516303;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosBusinessNames");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1039516303;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosEventCategories");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1038174126;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosEventNames");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1038174126;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosEventPerformers");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1038174126;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosSharedLibraryContributorsNames");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosSharedLibraryContributorsNamesAlternatives");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosSavedFromAppName");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosUtilityTypes");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemAcquisitionModel");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosMeanings");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosMediaTypes");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosTitle");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1BDA6A648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZL24PhRankingTreeFromU2ParsePK14__CFDictionaryP10query_nodeP7NSArrayIP7NSValueEP14NSCharacterSety_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(a2 + 16);
    if (v2) {
      *(_DWORD *)(v2 + 52) = *(_DWORD *)(a1 + 32);
    }
  }
  return a2;
}

void ___ZL27PhPrefixMatchRankingAttribsv_block_invoke()
{
  *((void *)&v20 + 1) = *MEMORY[0x1E4F143B8];
  LODWORD(v14) = 1043878380;
  std::string::basic_string[abi:nn180100]<0>(&v18, "kMDItemPhotosFavorites");
  *(void *)&long long v15 = operator new(0x18uLL);
  v16[0] = v15 + 24;
  *((void *)&v15 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((long long *)&v18, &v20, (std::string *)v15);
  uint64_t v0 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs, 21, &ARG_FAVORITED_ID);
  *((_DWORD *)v0 + 6) = 1043878380;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v0 + 32));
  *((_OWORD *)v0 + 2) = v15;
  *((void *)v0 + 6) = v16[0];
  v16[0] = 0;
  long long v15 = 0uLL;
  unint64_t v13 = (void **)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v13);
  if (SHIBYTE(v19) < 0) {
    operator delete(v18);
  }
  LODWORD(v18) = 1043207291;
  std::string::basic_string[abi:nn180100]<0>(&v14, "kMDItemPhotosPeopleNames");
  std::string::basic_string[abi:nn180100]<0>(v16, "kMDItemPhotosPeopleNamesAlternatives");
  long long v19 = 0uLL;
  *(void *)&long long v20 = 0;
  *(void *)&long long v19 = operator new(0x30uLL);
  *((void *)&v19 + 1) = v19;
  *(void *)&long long v20 = v19 + 48;
  *((void *)&v19 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((long long *)&v14, (long long *)v17, (std::string *)v19);
  char v1 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs, 2, &ARG_PERSON_ID);
  *((_DWORD *)v1 + 6) = v18;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v1 + 32));
  *((_OWORD *)v1 + 2) = v19;
  *((void *)v1 + 6) = v20;
  *(void *)&long long v20 = 0;
  long long v19 = 0uLL;
  unint64_t v13 = (void **)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v13);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v16[i + 2]) < 0) {
      operator delete((void *)v16[i]);
    }
  }
  LODWORD(v18) = 1042536202;
  std::string::basic_string[abi:nn180100]<0>(&v14, "kMDItemPhotosSceneClassificationLabels");
  std::string::basic_string[abi:nn180100]<0>(v16, "kMDItemPhotosSceneClassificationSynonyms");
  long long v19 = 0uLL;
  *(void *)&long long v20 = 0;
  *(void *)&long long v19 = operator new(0x30uLL);
  *((void *)&v19 + 1) = v19;
  *(void *)&long long v20 = v19 + 48;
  *((void *)&v19 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((long long *)&v14, (long long *)v17, (std::string *)v19);
  uint64_t v3 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs, 5, &ARG_NOUN_ID);
  *((_DWORD *)v3 + 6) = v18;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v3 + 32));
  *((_OWORD *)v3 + 2) = v19;
  *((void *)v3 + 6) = v20;
  *(void *)&long long v20 = 0;
  long long v19 = 0uLL;
  unint64_t v13 = (void **)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v13);
  for (uint64_t j = 0; j != -6; j -= 3)
  {
    if (SHIBYTE(v16[j + 2]) < 0) {
      operator delete((void *)v16[j]);
    }
  }
  LODWORD(v14) = 1041194025;
  std::string::basic_string[abi:nn180100]<0>(&v18, "kMDItemPhotosLocationKeywords");
  long long v15 = 0uLL;
  v16[0] = 0;
  *(void *)&long long v15 = operator new(0x18uLL);
  *((void *)&v15 + 1) = v15;
  v16[0] = v15 + 24;
  *((void *)&v15 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((long long *)&v18, &v20, (std::string *)v15);
  uint64_t v5 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs, 10, &ARG_LOCATION_ID);
  *((_DWORD *)v5 + 6) = v14;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v5 + 32));
  *((_OWORD *)v5 + 2) = v15;
  *((void *)v5 + 6) = v16[0];
  v16[0] = 0;
  long long v15 = 0uLL;
  unint64_t v13 = (void **)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v13);
  if (SHIBYTE(v19) < 0) {
    operator delete(v18);
  }
  LODWORD(v18) = 1040522936;
  std::string::basic_string[abi:nn180100]<0>(&v14, "kMDItemPhotosHolidays");
  std::string::basic_string[abi:nn180100]<0>(v16, "kMDItemPhotosSeasons");
  long long v19 = 0uLL;
  *(void *)&long long v20 = 0;
  *(void *)&long long v19 = operator new(0x30uLL);
  *((void *)&v19 + 1) = v19;
  *(void *)&long long v20 = v19 + 48;
  *((void *)&v19 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((long long *)&v14, (long long *)v17, (std::string *)v19);
  uint64_t v6 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs, 8, &ARG_TIME_ID);
  *((_DWORD *)v6 + 6) = v18;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v6 + 32));
  *((_OWORD *)v6 + 2) = v19;
  *((void *)v6 + 6) = v20;
  *(void *)&long long v20 = 0;
  long long v19 = 0uLL;
  unint64_t v13 = (void **)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v13);
  for (uint64_t k = 0; k != -6; k -= 3)
  {
    if (SHIBYTE(v16[k + 2]) < 0) {
      operator delete((void *)v16[k]);
    }
  }
  LODWORD(v18) = 1038174126;
  std::string::basic_string[abi:nn180100]<0>(&v14, "kMDItemPhotosEventCategories");
  std::string::basic_string[abi:nn180100]<0>(v16, "kMDItemPhotosMeanings");
  std::string::basic_string[abi:nn180100]<0>(v17, "kMDItemPhotosSceneClassificationLabels");
  long long v19 = 0uLL;
  *(void *)&long long v20 = 0;
  *(void *)&long long v19 = operator new(0x48uLL);
  *((void *)&v19 + 1) = v19;
  *(void *)&long long v20 = v19 + 72;
  *((void *)&v19 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((long long *)&v14, (long long *)&v18, (std::string *)v19);
  long long v8 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs, 9, &ARG_EVENT_ID);
  *((_DWORD *)v8 + 6) = v18;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v8 + 32));
  *((_OWORD *)v8 + 2) = v19;
  *((void *)v8 + 6) = v20;
  *(void *)&long long v20 = 0;
  long long v19 = 0uLL;
  unint64_t v13 = (void **)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v13);
  for (uint64_t m = 0; m != -9; m -= 3)
  {
    if (SHIBYTE(v17[m + 2]) < 0) {
      operator delete((void *)v17[m]);
    }
  }
  LODWORD(v14) = 1036831949;
  std::string::basic_string[abi:nn180100]<0>(&v18, "kMDItemPhotosMediaTypes");
  long long v15 = 0uLL;
  v16[0] = 0;
  *(void *)&long long v15 = operator new(0x18uLL);
  v16[0] = v15 + 24;
  *((void *)&v15 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((long long *)&v18, &v20, (std::string *)v15);
  uint64_t v10 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs, 1, &ARG_MEDIA_TYPE_ID);
  *((_DWORD *)v10 + 6) = v14;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v10 + 32));
  *((_OWORD *)v10 + 2) = v15;
  *((void *)v10 + 6) = v16[0];
  v16[0] = 0;
  long long v15 = 0uLL;
  unint64_t v13 = (void **)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v13);
  if (SHIBYTE(v19) < 0) {
    operator delete(v18);
  }
  LODWORD(v18) = 1036831949;
  std::string::basic_string[abi:nn180100]<0>(&v14, "kMDItemPhotosSceneClassificationLabels");
  std::string::basic_string[abi:nn180100]<0>(v16, "kMDItemPhotosSceneClassificationSynonyms");
  long long v19 = 0uLL;
  *(void *)&long long v20 = 0;
  *(void *)&long long v19 = operator new(0x30uLL);
  *(void *)&long long v20 = v19 + 48;
  *((void *)&v19 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((long long *)&v14, (long long *)v17, (std::string *)v19);
  uint64_t v11 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs, 7, &ARG_VQ_ID);
  *((_DWORD *)v11 + 6) = v18;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v11 + 32));
  *((_OWORD *)v11 + 2) = v19;
  *((void *)v11 + 6) = v20;
  *(void *)&long long v20 = 0;
  long long v19 = 0uLL;
  unint64_t v13 = (void **)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v13);
  for (uint64_t n = 0; n != -6; n -= 3)
  {
    if (SHIBYTE(v16[n + 2]) < 0) {
      operator delete((void *)v16[n]);
    }
  }
}

void sub_1BDA6AE18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&a10);
  uint64_t v23 = 0;
  while (1)
  {
    if (*(&a22 + v23) < 0) {
      operator delete(*(void **)((char *)&a17 + v23));
    }
    v23 -= 24;
    if (v23 == -48) {
      _Unwind_Resume(a1);
    }
  }
}

void ___ZL25PhSpanMatchRankingAttribsv_block_invoke()
{
  *((void *)&v25 + 1) = *MEMORY[0x1E4F143B8];
  LODWORD(v12) = 1043878380;
  std::string::basic_string[abi:nn180100]<0>(&v23, "kMDItemPhotosFavorites");
  *(void *)&long long v13 = operator new(0x18uLL);
  v14[0] = v13 + 24;
  *((void *)&v13 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((long long *)&v23, &v25, (std::string *)v13);
  uint64_t v0 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhSpanMatchRankingAttribs(void)::_phSpanMatchAttribs, 21, &ARG_FAVORITED_ID);
  *((_DWORD *)v0 + 6) = 1043878380;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v0 + 32));
  *((_OWORD *)v0 + 2) = v13;
  *((void *)v0 + 6) = v14[0];
  v14[0] = 0;
  long long v13 = 0uLL;
  uint64_t v11 = (void **)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v11);
  if (SHIBYTE(v24) < 0) {
    operator delete(v23);
  }
  LODWORD(v23) = 1043207291;
  std::string::basic_string[abi:nn180100]<0>(&v12, "kMDItemPhotosPeopleNames");
  std::string::basic_string[abi:nn180100]<0>(v14, "kMDItemPhotosPeopleNamesAlternatives");
  long long v24 = 0uLL;
  *(void *)&long long v25 = 0;
  *(void *)&long long v24 = operator new(0x30uLL);
  *((void *)&v24 + 1) = v24;
  *(void *)&long long v25 = v24 + 48;
  *((void *)&v24 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((long long *)&v12, &v15, (std::string *)v24);
  char v1 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhSpanMatchRankingAttribs(void)::_phSpanMatchAttribs, 2, &ARG_PERSON_ID);
  *((_DWORD *)v1 + 6) = v23;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v1 + 32));
  *((_OWORD *)v1 + 2) = v24;
  *((void *)v1 + 6) = v25;
  *(void *)&long long v25 = 0;
  long long v24 = 0uLL;
  uint64_t v11 = (void **)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v11);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v14[i + 2]) < 0) {
      operator delete((void *)v14[i]);
    }
  }
  LODWORD(v23) = 1042536202;
  std::string::basic_string[abi:nn180100]<0>(&v12, "kMDItemPhotosDescription");
  std::string::basic_string[abi:nn180100]<0>(v14, "kMDItemPhotosKeywords");
  std::string::basic_string[abi:nn180100]<0>(&v15, "kMDItemPhotosMeanings");
  std::string::basic_string[abi:nn180100]<0>(v16, "kMDItemPhotosPeopleNamesAlternatives");
  std::string::basic_string[abi:nn180100]<0>(v17, "kMDItemPhotosSceneClassificationLabels");
  std::string::basic_string[abi:nn180100]<0>(v18, "kMDItemPhotosSceneClassificationSynonyms");
  std::string::basic_string[abi:nn180100]<0>(&v19, "kMDItemPhotosBusinessNames");
  std::string::basic_string[abi:nn180100]<0>(v20, "kMDItemPhotosBusinessCategories");
  std::string::basic_string[abi:nn180100]<0>(v21, "kMDItemPhotosEventNames");
  std::string::basic_string[abi:nn180100]<0>(v22, "kMDItemPhotosEventCategories");
  long long v24 = 0uLL;
  *(void *)&long long v25 = 0;
  *(void *)&long long v24 = operator new(0xF0uLL);
  *((void *)&v24 + 1) = v24;
  *(void *)&long long v25 = v24 + 240;
  *((void *)&v24 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((long long *)&v12, (long long *)&v23, (std::string *)v24);
  uint64_t v3 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhSpanMatchRankingAttribs(void)::_phSpanMatchAttribs, 5, &ARG_NOUN_ID);
  *((_DWORD *)v3 + 6) = v23;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v3 + 32));
  *((_OWORD *)v3 + 2) = v24;
  *((void *)v3 + 6) = v25;
  *(void *)&long long v25 = 0;
  long long v24 = 0uLL;
  uint64_t v11 = (void **)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v11);
  for (uint64_t j = 0; j != -30; j -= 3)
  {
    if (SHIBYTE(v22[j + 2]) < 0) {
      operator delete((void *)v22[j]);
    }
  }
  LODWORD(v12) = 1041194025;
  std::string::basic_string[abi:nn180100]<0>(&v23, "kMDItemPhotosLocationKeywords");
  long long v13 = 0uLL;
  v14[0] = 0;
  *(void *)&long long v13 = operator new(0x18uLL);
  *((void *)&v13 + 1) = v13;
  v14[0] = v13 + 24;
  *((void *)&v13 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((long long *)&v23, &v25, (std::string *)v13);
  uint64_t v5 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhSpanMatchRankingAttribs(void)::_phSpanMatchAttribs, 10, &ARG_LOCATION_ID);
  *((_DWORD *)v5 + 6) = v12;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v5 + 32));
  *((_OWORD *)v5 + 2) = v13;
  *((void *)v5 + 6) = v14[0];
  v14[0] = 0;
  long long v13 = 0uLL;
  uint64_t v11 = (void **)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v11);
  if (SHIBYTE(v24) < 0) {
    operator delete(v23);
  }
  LODWORD(v23) = 1040522936;
  std::string::basic_string[abi:nn180100]<0>(&v12, "kMDItemPhotosHolidays");
  std::string::basic_string[abi:nn180100]<0>(v14, "kMDItemPhotosSeasons");
  long long v24 = 0uLL;
  *(void *)&long long v25 = 0;
  *(void *)&long long v24 = operator new(0x30uLL);
  *((void *)&v24 + 1) = v24;
  *(void *)&long long v25 = v24 + 48;
  *((void *)&v24 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((long long *)&v12, &v15, (std::string *)v24);
  uint64_t v6 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhSpanMatchRankingAttribs(void)::_phSpanMatchAttribs, 8, &ARG_TIME_ID);
  *((_DWORD *)v6 + 6) = v23;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v6 + 32));
  *((_OWORD *)v6 + 2) = v24;
  *((void *)v6 + 6) = v25;
  *(void *)&long long v25 = 0;
  long long v24 = 0uLL;
  uint64_t v11 = (void **)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v11);
  for (uint64_t k = 0; k != -6; k -= 3)
  {
    if (SHIBYTE(v14[k + 2]) < 0) {
      operator delete((void *)v14[k]);
    }
  }
  LODWORD(v23) = 1038174126;
  std::string::basic_string[abi:nn180100]<0>(&v12, "kMDItemPhotosEventCategories");
  std::string::basic_string[abi:nn180100]<0>(v14, "kMDItemPhotosDescription");
  std::string::basic_string[abi:nn180100]<0>(&v15, "kMDItemPhotosKeywords");
  std::string::basic_string[abi:nn180100]<0>(v16, "kMDItemPhotosMeanings");
  std::string::basic_string[abi:nn180100]<0>(v17, "kMDItemPhotosSceneClassificationLabels");
  std::string::basic_string[abi:nn180100]<0>(v18, "kMDItemPhotosSceneClassificationSynonyms");
  long long v24 = 0uLL;
  *(void *)&long long v25 = 0;
  *(void *)&long long v24 = operator new(0x90uLL);
  *(void *)&long long v25 = v24 + 144;
  *((void *)&v24 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((long long *)&v12, &v19, (std::string *)v24);
  long long v8 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhSpanMatchRankingAttribs(void)::_phSpanMatchAttribs, 9, &ARG_EVENT_ID);
  *((_DWORD *)v8 + 6) = v23;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v8 + 32));
  *((_OWORD *)v8 + 2) = v24;
  *((void *)v8 + 6) = v25;
  *(void *)&long long v25 = 0;
  long long v24 = 0uLL;
  uint64_t v11 = (void **)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v11);
  for (uint64_t m = 0; m != -18; m -= 3)
  {
    if (SHIBYTE(v18[m + 2]) < 0) {
      operator delete((void *)v18[m]);
    }
  }
  LODWORD(v12) = 1036831949;
  std::string::basic_string[abi:nn180100]<0>(&v23, "kMDItemPhotosMediaTypes");
  long long v13 = 0uLL;
  v14[0] = 0;
  *(void *)&long long v13 = operator new(0x18uLL);
  v14[0] = v13 + 24;
  *((void *)&v13 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((long long *)&v23, &v25, (std::string *)v13);
  uint64_t v10 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhSpanMatchRankingAttribs(void)::_phSpanMatchAttribs, 1, &ARG_MEDIA_TYPE_ID);
  *((_DWORD *)v10 + 6) = v12;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v10 + 32));
  *((_OWORD *)v10 + 2) = v13;
  *((void *)v10 + 6) = v14[0];
  v14[0] = 0;
  long long v13 = 0uLL;
  uint64_t v11 = (void **)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v11);
  if (SHIBYTE(v24) < 0) {
    operator delete(v23);
  }
}

void sub_1BDA6B7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&a9);
  if (*(char *)(v9 - 65) < 0) {
    operator delete(*(void **)(v9 - 88));
  }
  _Unwind_Resume(a1);
}

void *___ZL35getkQPQUOutputTokenInfoKeySymbolLocv_block_invoke_13661(uint64_t a1)
{
  ParserLibrary = QueryParserLibrary();
  uint64_t result = dlsym(ParserLibrary, "kQPQUOutputTokenInfoKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = result;
  getkQPQUOutputTokenInfoKeySymbolLoc(void)::unint64_t ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void ___ZL26PhPopulateFiltersFromQueryPK20__CFAttributedStringPP10query_nodeS4_P14NSMutableArrayIP7NSValueES9_by_block_invoke(uint64_t a1, void *a2, NSUInteger a3, NSUInteger a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if ([a2 count]) {
    objc_msgSend(*(id *)(a1 + 32), "addObject:", objc_msgSend(MEMORY[0x1E4F29238], "valueWithRange:", a3, a4));
  }
  uint64_t v24 = 0;
  long long v25 = &v24;
  uint64_t v26 = 0x2020000000;
  uint64_t v27 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x2020000000;
  uint64_t v23 = 0;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  _OWORD v18[2] = ___ZL26PhPopulateFiltersFromQueryPK20__CFAttributedStringPP10query_nodeS4_P14NSMutableArrayIP7NSValueES9_by_block_invoke_2;
  void v18[3] = &unk_1E6348C20;
  uint64_t v8 = *(void *)(a1 + 48);
  v18[4] = *(void *)(a1 + 40);
  v18[5] = &v24;
  v18[8] = a4;
  void v18[9] = v8;
  char v19 = *(unsigned char *)(a1 + 72);
  v18[6] = &v20;
  v18[7] = a3;
  v18[10] = *(void *)(a1 + 56);
  [a2 enumerateKeysAndObjectsUsingBlock:v18];
  uint64_t v9 = v21[3];
  uint64_t v10 = v25[3];
  if (v9 && v10)
  {
    uint64_t v11 = makeOrNode(v9, v10);
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t v12 = makeAndNode(**(void **)(a1 + 64), (uint64_t)v11);
      long long v13 = *(void **)(a1 + 64);
LABEL_9:
      *long long v13 = v12;
      goto LABEL_13;
    }
    **(void **)(a1 + 56) = makeAndNode(**(void **)(a1 + 56), (uint64_t)v11);
    int v14 = *__error();
    long long v15 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 48);
      v33.locatiouint64_t n = a3;
      v33.length = a4;
      uint64_t v17 = NSStringFromRange(v33);
      *(_DWORD *)stat buf = 134218242;
      uint64_t v29 = v16;
      __int16 v30 = 2112;
      double v31 = v17;
      _os_log_impl(&dword_1BD672000, v15, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Token (range: %@) has generic and metdata filters (ORing them together)", buf, 0x16u);
    }
    *__error() = v14;
  }
  else
  {
    **(void **)(a1 + 64) = makeAndNode(**(void **)(a1 + 64), v10);
    if (!*(unsigned char *)(a1 + 72))
    {
      uint64_t v12 = makeAndNode(**(void **)(a1 + 56), v21[3]);
      long long v13 = *(void **)(a1 + 56);
      goto LABEL_9;
    }
  }
LABEL_13:
  _Block_object_dispose(&v20, 8);
  _Block_object_dispose(&v24, 8);
}

void sub_1BDA6BC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

int *___ZL26PhPopulateFiltersFromQueryPK20__CFAttributedStringPP10query_nodeS4_P14NSMutableArrayIP7NSValueES9_by_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = [a2 length];
  if (!a3) {
    goto LABEL_17;
  }
  if (!v6) {
    goto LABEL_17;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    goto LABEL_17;
  }
  if (![a3 length]) {
    goto LABEL_17;
  }
  uint64_t v7 = (char *)[a2 UTF8String];
  uint64_t v8 = [a3 UTF8String];
  if (!v7) {
    goto LABEL_17;
  }
  uint64_t v9 = (char *)v8;
  if (!v8) {
    goto LABEL_17;
  }
  std::string::basic_string[abi:nn180100]<0>(__p, v7);
  {
    MetadataKeys(void)::_metadataKeys = 0u;
    unk_1EA0DAAB8 = 0u;
    dword_1EA0DAAC8 = 1065353216;
  }
  if (MetadataKeys(void)::onceToken != -1) {
    dispatch_once(&MetadataKeys(void)::onceToken, &__block_literal_global_13673);
  }
  uint64_t v10 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(MetadataKeys(void)::_metadataKeys, *((unint64_t *)&MetadataKeys(void)::_metadataKeys + 1), (uint64_t)__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(*(void **)__p);
  }
  if (!v10)
  {
    if (!*(unsigned char *)(a1 + 88))
    {
      std::string::basic_string[abi:nn180100]<0>(__p, v7);
      BOOL v24 = isGenericFilterKey((uint64_t)__p);
      if (SHIBYTE(v37) < 0) {
        operator delete(*(void **)__p);
      }
      if (v24)
      {
        uint64_t v25 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
        query_node_with_anuint64_t n = db_make_query_node_with_ann(v9, 0);
        *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = makeOrNode(v25, (uint64_t)query_node_with_ann);
        int v13 = *__error();
        int v14 = _SILogForLogForCategory(19);
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_23;
        }
        uint64_t v27 = *(void *)(a1 + 72);
        int v28 = NSStringFromRange(*(NSRange *)(a1 + 56));
        *(_DWORD *)__p = 134218498;
        *(void *)&__p[4] = v27;
        __int16 v35 = 2112;
        uint64_t v36 = (NSString *)a3;
        __int16 v37 = 2112;
        uint64_t v38 = v28;
        uint64_t v17 = "[qid=%llu] Adding generic filter: %@, token range: %@";
        goto LABEL_15;
      }
      if (!*(unsigned char *)(a1 + 88))
      {
        std::string::basic_string[abi:nn180100]<0>(__p, v7);
        BOOL v29 = isGenericFilterTopLevelKey((uint64_t)__p);
        if (SHIBYTE(v37) < 0) {
          operator delete(*(void **)__p);
        }
        if (v29)
        {
          uint64_t v30 = **(void **)(a1 + 80);
          double v31 = db_make_query_node_with_ann(v9, 0);
          **(void **)(a1 + 80) = makeAndNode(v30, (uint64_t)v31);
          int v13 = *__error();
          int v14 = _SILogForLogForCategory(19);
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_23;
          }
          uint64_t v32 = *(void *)(a1 + 72);
          NSRange v33 = NSStringFromRange(*(NSRange *)(a1 + 56));
          *(_DWORD *)__p = 134218498;
          *(void *)&__p[4] = v32;
          __int16 v35 = 2112;
          uint64_t v36 = (NSString *)a3;
          __int16 v37 = 2112;
          uint64_t v38 = v33;
          uint64_t v17 = "[qid=%llu] Adding generic top level filter: %@, token range: %@";
          goto LABEL_15;
        }
      }
    }
LABEL_17:
    BOOL v19 = *(unsigned char *)(a1 + 88) == 0;
    int v13 = *__error();
    if (v19)
    {
      uint64_t v20 = _SILogForLogForCategory(19);
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v20 = _SILogForLogForCategory(20);
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_23;
      }
    }
    uint64_t v21 = *(void *)(a1 + 72);
    uint64_t v22 = NSStringFromRange(*(NSRange *)(a1 + 56));
    *(_DWORD *)__p = 134218498;
    *(void *)&__p[4] = v21;
    __int16 v35 = 2112;
    uint64_t v36 = v22;
    __int16 v37 = 2112;
    uint64_t v38 = (NSString *)a2;
    uint64_t v17 = "[qid=%llu] [WARN] Ignoring filter, token range: %@, key: %@";
    int v18 = v20;
    goto LABEL_22;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  uint64_t v12 = db_make_query_node_with_ann(v9, 0);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = makeOrNode(v11, (uint64_t)v12);
  objc_msgSend(*(id *)(a1 + 32), "addObject:", objc_msgSend(MEMORY[0x1E4F29238], "valueWithRange:", *(void *)(a1 + 56), *(void *)(a1 + 64)));
  int v13 = *__error();
  int v14 = _SILogForLogForCategory(19);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(a1 + 72);
    uint64_t v16 = NSStringFromRange(*(NSRange *)(a1 + 56));
    *(_DWORD *)__p = 134218498;
    *(void *)&__p[4] = v15;
    __int16 v35 = 2112;
    uint64_t v36 = (NSString *)a3;
    __int16 v37 = 2112;
    uint64_t v38 = v16;
    uint64_t v17 = "[qid=%llu] Adding metadata filter: %@, token range: %@";
LABEL_15:
    int v18 = v14;
LABEL_22:
    _os_log_impl(&dword_1BD672000, v18, OS_LOG_TYPE_DEFAULT, v17, __p, 0x20u);
  }
LABEL_23:
  uint64_t result = __error();
  *uint64_t result = v13;
  return result;
}

void sub_1BDA6C130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZL25GenericFilterTopLevelKeysv_block_invoke_13685()
{
  v1.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:nn180100]<0>(&__p, "kMDItemPhotosResultType");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>((uint64_t)&GenericFilterTopLevelKeys(void)::_genericFilterTopLevelKeys, &__p, &v1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void ___ZL17GenericFilterKeysv_block_invoke_13693()
{
  v31.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:nn180100]<0>(&__str, "kMDItemAcquisitionModel");
  std::string::basic_string[abi:nn180100]<0>(v2, "kMDItemContentCreationDate");
  std::string::basic_string[abi:nn180100]<0>(v3, "kMDItemContentType");
  std::string::basic_string[abi:nn180100]<0>(v4, "kMDItemFilename");
  std::string::basic_string[abi:nn180100]<0>(v5, "kMDItemPhotosBusinessCategories");
  std::string::basic_string[abi:nn180100]<0>(v6, "kMDItemPhotosBusinessNames");
  std::string::basic_string[abi:nn180100]<0>(v7, "kMDItemPhotosContentCreationDateMonth");
  std::string::basic_string[abi:nn180100]<0>(v8, "kMDItemPhotosContentCreationDateMonths");
  std::string::basic_string[abi:nn180100]<0>(v9, "kMDItemPhotosContentCreationDateYear");
  std::string::basic_string[abi:nn180100]<0>(v10, "kMDItemPhotosContentCreationDateYears");
  std::string::basic_string[abi:nn180100]<0>(v11, "kMDItemPhotosDescription");
  std::string::basic_string[abi:nn180100]<0>(v12, "kMDItemPhotosEventCategories");
  std::string::basic_string[abi:nn180100]<0>(v13, "kMDItemPhotosEventNames");
  std::string::basic_string[abi:nn180100]<0>(v14, "kMDItemPhotosEventPerformers");
  std::string::basic_string[abi:nn180100]<0>(v15, "kMDItemPhotosFavorited");
  std::string::basic_string[abi:nn180100]<0>(v16, "kMDItemPhotosHolidays");
  std::string::basic_string[abi:nn180100]<0>(v17, "kMDItemPhotosKeywords");
  std::string::basic_string[abi:nn180100]<0>(v18, "kMDItemPhotosLibraryName");
  std::string::basic_string[abi:nn180100]<0>(v19, "kMDItemPhotosLocationKeywords");
  std::string::basic_string[abi:nn180100]<0>(v20, "kMDItemPhotosMediaTypes");
  std::string::basic_string[abi:nn180100]<0>(v21, "kMDItemPhotosPartsOfDay");
  std::string::basic_string[abi:nn180100]<0>(v22, "kMDItemPhotosPartsOfWeek");
  std::string::basic_string[abi:nn180100]<0>(v23, "kMDItemPhotosPeopleNames");
  std::string::basic_string[abi:nn180100]<0>(v24, "kMDItemPhotosPeopleNamesAlternatives");
  std::string::basic_string[abi:nn180100]<0>(v25, "kMDItemPhotosPeoplePersonIdentifiers");
  std::string::basic_string[abi:nn180100]<0>(v26, "kMDItemPhotosSavedFromAppName");
  std::string::basic_string[abi:nn180100]<0>(v27, "kMDItemPhotosSeasons");
  std::string::basic_string[abi:nn180100]<0>(v28, "kMDItemPhotosSharedLibraryContributorsPersonIdentifiers");
  std::string::basic_string[abi:nn180100]<0>(v29, "kMDItemPhotosTitle");
  std::string::basic_string[abi:nn180100]<0>(v30, "kMDItemTextContent");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>((uint64_t)&GenericFilterKeys(void)::_genericFilterKeys, &__str, &v31);
  uint64_t v0 = 720;
  do
  {
    if (__str.__r_.__value_.__s.__data_[v0 - 1] < 0) {
      operator delete(*(void **)((char *)&__str.__r_.__value_.__l + v0 - 24));
    }
    v0 -= 24;
  }
  while (v0);
}

void sub_1BDA6C64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void ___ZL12MetadataKeysv_block_invoke_13704()
{
  v3.__r_.__value_.__r.__words[0] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:nn180100]<0>(&__str, "kMDItemPhotosMeanings");
  std::string::basic_string[abi:nn180100]<0>(v2, "kMDItemPhotosSceneClassificationLabels");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>((uint64_t)&MetadataKeys(void)::_metadataKeys, &__str, &v3);
  for (uint64_t i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v2[i + 2]) < 0) {
      operator delete(*(void **)((char *)&__str + i * 8 + 24));
    }
  }
}

void sub_1BDA6C730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *accurate_realpath(int *result, uint64_t a2)
{
  if (result)
  {
    std::string v3 = (char *)result;
    int v4 = open((const char *)result, 32772);
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_3;
    }
    uint64_t result = __error();
    if (*result == 13)
    {
      uint64_t result = (int *)geteuid();
      if (!result)
      {
        memset(&v6, 0, sizeof(v6));
        uint64_t result = (int *)md_stat_real(v3, &v6);
        if (!result)
        {
          if (v6.st_uid)
          {
            *(void *)uint64_t v5 = 0;
            uint64_t result = (int *)pthread_getugid_np(&v5[1], v5);
            if (!result)
            {
              uint64_t result = (int *)pthread_setugid_np(v6.st_uid, v6.st_gid);
              if (!result)
              {
                int v4 = open(v3, 32772);
                uint64_t result = (int *)pthread_setugid_np(v5[1], v5[0]);
                if (result) {
                  __assert_rtn("accurate_realpath", "MDFileUtil.c", 394, "rc == 0");
                }
                if ((v4 & 0x80000000) == 0)
                {
LABEL_3:
                  fcntl(v4, 50, a2);
                  return (int *)close(v4);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t md_stat_real(char *a1, stat *a2)
{
  uint64_t v4 = fstatat(-2, a1, a2, 512);
  if (!v4 || *__error() != 22) {
    return v4;
  }
  return fstatat(-2, a1, a2, 0);
}

uint64_t x_unlinkat(int a1, const char *a2, int a3)
{
  uint64_t v6 = unlinkat(a1, a2, a3);
  if (!v6) {
    return v6;
  }
  uint64_t v7 = __error();
  if ((a3 & 0x800) == 0 || *v7 != 22) {
    return v6;
  }
  return unlinkat(a1, a2, a3 & 0xFFFFF7FF);
}

uint64_t md_fstat_real(int a1, stat *a2)
{
  uint64_t v4 = fstatat(a1, 0, a2, 1536);
  if (!v4 || *__error() != 22) {
    return v4;
  }
  return fstat(a1, a2);
}

void state_reduce(unint64_t *a1)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  unint64_t v1 = *a1;
  if (*a1)
  {
    long long v53 = 0u;
    long long v54 = 0u;
    char v3 = __clz(__rbit64(v1));
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v40 = 0u;
    uint64_t v55 = 0;
    long long v39 = 0u;
    long long v38 = 0u;
    long long v37 = 0u;
    long long v36 = 0u;
    long long v35 = 0u;
    long long v34 = 0u;
    long long v33 = 0u;
    long long v32 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    uint64_t v23 = 1 << v3;
    uint64_t v4 = 1;
    unint64_t v5 = v1 & (-2 << v3);
    if (!v5) {
      goto LABEL_6;
    }
    uint64_t v6 = 1;
    do
    {
      char v7 = __clz(__rbit64(v5));
      unsigned int v8 = v6 + 1;
      *(&v23 + v6++) = 1 << v7;
      unint64_t v5 = v1 & (-2 << v7);
    }
    while (v5);
    uint64_t v4 = v8;
    if (v8)
    {
LABEL_6:
      MEMORY[0x1F4188790](a1);
      uint64_t v10 = (_DWORD *)((char *)&v22 - ((v9 + 15) & 0x7FFFFFFF0));
      bzero(v10, v9);
      uint64_t v11 = 0;
      do
      {
        if (!v10[v11])
        {
          uint64_t v12 = 0;
          do
          {
            if (v11 != v12)
            {
              int v13 = __clz(__rbit64(*(&v23 + v11)));
              unsigned int v14 = (103 * v13) >> 9;
              unsigned __int8 v15 = v13 - 5 * v14;
              int v16 = __clz(__rbit64(*(&v23 + v12)));
              unsigned int v17 = (103 * v16) >> 9;
              unsigned __int8 v18 = v16 - 5 * v17;
              if (v15 < v18)
              {
                int v19 = v17 - v14;
                if (v19 < 0) {
                  int v19 = -v19;
                }
                if (v19 <= v18 - v15) {
                  v10[v12] = 1;
                }
              }
            }
            ++v12;
          }
          while (v4 != v12);
        }
        ++v11;
      }
      while (v11 != v4);
      uint64_t v20 = &v23;
      do
      {
        if (*v10++) {
          *a1 &= ~*v20;
        }
        ++v20;
        --v4;
      }
      while (v4);
    }
  }
}

void CatInfoGotten::releaseFlush(int a1, void *a2)
{
  if (a2) {
    free(a2);
  }
}

uint64_t CatInfoGotten::oid(CatInfoGotten *this)
{
  uint64_t result = (*(uint64_t (**)(CatInfoGotten *))(*(void *)this + 16))(this);
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t CatInfoGotten_DB::forceDbo(CatInfoGotten_DB *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 16))();
}

uint64_t CatInfoGotten_OID::oid(CatInfoGotten_OID *this)
{
  return *((void *)this + 12);
}

int *CatInfoGotten_OID::dbo(CatInfoGotten_OID *this)
{
  uint64_t result = (int *)*((void *)this + 5);
  if (!result)
  {
    uint64_t v3 = *((void *)this + 2);
    unint64_t v4 = *((void *)this + 12);
    unint64_t v5 = 0;
    uint64_t result = *(int **)(v3 + 1184);
    if (result)
    {
      if (db_get_obj_callback(result, v4, (void **)&v5, 0, (void (*)(void *, uint64_t))si_docIdRewriteCallback, *(void *)(v3 + 2360), 0))
      {
        unint64_t v5 = 0;
        goto LABEL_6;
      }
      uint64_t result = v5;
      if (!v5)
      {
LABEL_6:
        uint64_t result = db_create_obj(*(void *)(v3 + 1184), 0, 0);
        if (result) {
          *(void *)uint64_t result = v4;
        }
      }
    }
    *((void *)this + 5) = result;
  }
  return result;
}

void CatInfoGotten_OID::~CatInfoGotten_OID(CatInfoGotten_OID *this)
{
  CatInfoGotten_OID::~CatInfoGotten_OID(this);
  JUMPOUT(0x1C1881000);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F1810A20;
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2) {
    free(v2);
  }
  CatInfoGotten::~CatInfoGotten(this);
}

void *CatInfoGotten::fastPath(void *this)
{
  if (!this[7])
  {
    unint64_t v1 = this;
    uint64_t v2 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x400uLL, 0x6085D6BuLL);
    if (!v2) {
      _log_fault_for_malloc_failure();
    }
    v1[10] = v2;
    uint64_t v3 = v1[2];
    (*(void (**)(void *))(*v1 + 32))(v1);
    this = (void *)(*(uint64_t (**)(void))(*(void *)(v3 + 1408) + 48))();
    unint64_t v4 = "";
    if (this) {
      unint64_t v4 = (const char *)this;
    }
    v1[7] = v4;
  }
  return this;
}

uint64_t _data_map32_commit(uint64_t a1, int a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (_data_map32_rdlock(a1)) {
    return 0xFFFFFFFFLL;
  }
  char v41 = 0;
  makeThreadId();
  int v5 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v6 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_13821, a1, 0, v5);
  *(_DWORD *)stat buf = HIDWORD(v6);
  LODWORD(v48[0]) = v6;
  unint64_t v40 = __PAIR64__(v7, v8);
  uint64_t v9 = *(void *)&threadData[18 * v6 + 2];
  uint64_t v10 = v9 + 320 * HIDWORD(v6);
  int v11 = *(_DWORD *)(v10 + 312);
  uint64_t v12 = *(void (**)(void))(v10 + 224);
  if (v12) {
    v12(*(void *)(v9 + 320 * HIDWORD(v6) + 288));
  }
  unsigned int v39 = v48[0];
  unsigned int v38 = *(_DWORD *)buf;
  unint64_t v37 = v40;
  if (!_setjmp((int *)v10))
  {
    uint64_t v14 = *(void *)(a1 + 1288);
    if (v14)
    {
      unsigned int v15 = *(_DWORD *)(v14 + 16);
      if (v15 < 3) {
        unsigned int v16 = v15 + 1;
      }
      else {
        unsigned int v16 = 0;
      }
    }
    else
    {
      unsigned int v16 = 0;
    }
    SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 1432), *(_DWORD *)(a1 + 1440), 5u, v16, *(_DWORD *)(a1 + 1388));
    int v17 = *(_DWORD *)(*(void *)(a1 + 1288) + 16);
    if (v17)
    {
      if (v17 != 1)
      {
        uint64_t v21 = *(os_unfair_lock_s **)(a1 + 1432);
        unsigned int v22 = *(_DWORD *)(a1 + 1440);
        uint64_t v19 = 0xFFFFFFFFLL;
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v18 = _data_map32_sync_data(a1, a2);
      if (v18 || (uint64_t v18 = _data_map32_sync_header(a1, a2), v18))
      {
LABEL_21:
        uint64_t v19 = v18;
        uint64_t v20 = *(void *)(a1 + 1288);
        uint64_t v21 = *(os_unfair_lock_s **)(a1 + 1432);
        unsigned int v22 = *(_DWORD *)(a1 + 1440);
        if (!v20)
        {
          unsigned int v24 = 0;
LABEL_33:
          uint64_t v25 = v19;
          SIActivityJournalEvent(v21, v22, 6u, v24, *(_DWORD *)(a1 + 1388));
          char v41 = 1;
          uint64_t v26 = *(void *)&threadData[18 * v39 + 2];
          unsigned int v27 = v38;
          uint64_t v28 = v26 + 320 * v38;
          *(_DWORD *)(v28 + 312) = v11;
          long long v29 = *(void (**)(void))(v28 + 232);
          if (v29) {
            v29(*(void *)(v26 + 320 * v27 + 288));
          }
          dropThreadId(v39, 0, v5);
          uint64_t v13 = v25;
          goto LABEL_36;
        }
        int v17 = *(_DWORD *)(v20 + 16);
LABEL_24:
        if (v17 == 1) {
          int v23 = 2;
        }
        else {
          int v23 = 0;
        }
        if (v17 == 2) {
          int v23 = 3;
        }
        if (v17) {
          unsigned int v24 = v23;
        }
        else {
          unsigned int v24 = 1;
        }
        goto LABEL_33;
      }
    }
    uint64_t v18 = data_map32_shadow(a1);
    if (!v18)
    {
      uint64_t v18 = data_map32_commit_shadow(a1);
      if (!v18) {
        uint64_t v18 = data_map32_commit_shadow_complete(a1);
      }
    }
    goto LABEL_21;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long v36 = 0;
    _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v36, 2u);
  }
  *(_DWORD *)(v10 + 312) = v11;
  CIOnThreadCleanUpReset(v37);
  dropThreadId(v39, 1, v5);
  CICleanUpReset(v39, HIDWORD(v37));
  uint64_t v13 = 0xFFFFFFFFLL;
LABEL_36:
  if (!v41) {
    *(_DWORD *)(a1 + 1464) = 22;
  }
  memset(v48, 0, sizeof(v48));
  int v30 = *__error();
  long long v31 = _SILogForLogForCategory(7);
  os_log_type_t v32 = 2 * (dword_1E9FC90C0 < 4);
  if (os_log_type_enabled(v31, v32))
  {
    long long v33 = fd_name(*(void *)(a1 + 1264), (char *)v48, 0x100uLL);
    long long v34 = "syncless commit";
    long long v43 = v33;
    int v35 = *(_DWORD *)(a1 + 1388);
    *(_DWORD *)stat buf = 136315650;
    if (a2) {
      long long v34 = "commit";
    }
    __int16 v44 = 2080;
    long long v45 = v34;
    __int16 v46 = 1024;
    int v47 = v35 - 1;
    _os_log_impl(&dword_1BD672000, v31, v32, "%s complete %s with count: %d", buf, 0x1Cu);
  }
  *__error() = v30;
  _data_map32_unlock(a1);
  return v13;
}

uint64_t _data_map32_sync_data(uint64_t a1, int a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  char v35 = 0;
  makeThreadId();
  int v4 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v5 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_13821, a1, 0, v4);
  unsigned int v33 = HIDWORD(v5);
  unsigned int v34 = v5;
  unsigned int v31 = v7;
  unsigned int v32 = v6;
  uint64_t v8 = *(void *)&threadData[18 * v5 + 2];
  uint64_t v9 = v8 + 320 * HIDWORD(v5);
  int v10 = *(_DWORD *)(v9 + 312);
  int v11 = *(void (**)(void))(v9 + 224);
  if (v11) {
    v11(*(void *)(v8 + 320 * HIDWORD(v5) + 288));
  }
  if (_setjmp((int *)v9))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long v42 = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v42, 2u);
    }
    *(_DWORD *)(v9 + 312) = v10;
    CIOnThreadCleanUpReset(v31);
    dropThreadId(v34, 1, v4);
    CICleanUpReset(v34, v32);
  }
  else
  {
    if (!*(_DWORD *)(a1 + 1464) && !*(_DWORD *)(*(void *)(a1 + 1288) + 16))
    {
      SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 1432), *(_DWORD *)(a1 + 1440), 7u, 1u, *(_DWORD *)(a1 + 1388));
      if (*(unsigned char *)(a1 + 1457))
      {
        if (a2)
        {
          uint64_t v12 = *(unsigned int *)(*(void *)(a1 + 1288) + 32);
          uint64_t v13 = (void *)((v12 + *(void *)(a1 + 1312)) & -*MEMORY[0x1E4F14B00]);
          size_t v14 = (*(_DWORD *)(a1 + 1320) - v12);
          fd_system_status_stall_if_busy();
          msync(v13, v14, 16);
        }
        *(unsigned char *)(a1 + 1457) = 0;
      }
      if (*(unsigned char *)(a1 + 1459))
      {
        if (a2)
        {
          uint64_t v15 = *(unsigned int *)(*(void *)(a1 + 1288) + 40);
          unsigned int v16 = (void *)((*(void *)(a1 + 1344) + 4 * v15) & -*MEMORY[0x1E4F14B00]);
          size_t v17 = 4 * (*(_DWORD *)(a1 + 1388) - v15);
          fd_system_status_stall_if_busy();
          msync(v16, v17, 16);
        }
        *(unsigned char *)(a1 + 1459) = 0;
      }
      if (*(unsigned char *)(a1 + 1458))
      {
        if (a2)
        {
          uint64_t v18 = *(void **)(a1 + 1376);
          size_t v19 = 4 * *(unsigned int *)(a1 + 1384);
          fd_system_status_stall_if_busy();
          msync(v18, v19, 16);
        }
        *(unsigned char *)(a1 + 1458) = 0;
      }
      uint64_t v20 = *(void *)(a1 + 1288);
      *(_DWORD *)(v20 + 20) = *(_DWORD *)(a1 + 1320);
      *(void *)(v20 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a1 + 1384);
      *(void *)(v20 + 44) = *(void *)(a1 + 1392);
      *(_DWORD *)(v20 + 52) = *(_DWORD *)(a1 + 1400);
      *(_DWORD *)(v20 + 16) = 0;
      fd_pwrite(*(void *)(a1 + 1264), v20, 0x38uLL, 0);
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      *(_OWORD *)long long v42 = 0u;
      long long v43 = 0u;
      int v21 = *__error();
      unsigned int v22 = _SILogForLogForCategory(7);
      os_log_type_t v23 = 2 * (dword_1E9FC90C0 < 4);
      if (os_log_type_enabled(v22, v23))
      {
        unsigned int v24 = fd_name(*(void *)(a1 + 1264), (char *)v42, 0x100uLL);
        uint64_t v25 = "update";
        unint64_t v37 = v24;
        int v26 = *(_DWORD *)(a1 + 1388);
        *(_DWORD *)stat buf = 136315650;
        if (a2) {
          uint64_t v25 = "sync";
        }
        __int16 v38 = 2080;
        unsigned int v39 = v25;
        __int16 v40 = 1024;
        int v41 = v26 - 1;
        _os_log_impl(&dword_1BD672000, v22, v23, "%s complete %s map with count: %d", buf, 0x1Cu);
      }
      *__error() = v21;
    }
    char v35 = 1;
    uint64_t v27 = *(void *)&threadData[18 * v34 + 2];
    uint64_t v28 = v27 + 320 * v33;
    *(_DWORD *)(v28 + 312) = v10;
    long long v29 = *(void (**)(void))(v28 + 232);
    if (v29) {
      v29(*(void *)(v27 + 320 * v33 + 288));
    }
    dropThreadId(v34, 0, v4);
  }
  if (v35) {
    return *(unsigned int *)(a1 + 1464);
  }
  *(_DWORD *)(a1 + 1464) = 22;
  return 22;
}

uint64_t _data_map32_sync_header(uint64_t a1, int a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  char v32 = 0;
  makeThreadId();
  int v4 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v5 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_13821, a1, 0, v4);
  unsigned int v30 = HIDWORD(v5);
  unsigned int v31 = v5;
  unsigned int v28 = v7;
  unsigned int v29 = v6;
  uint64_t v8 = *(void *)&threadData[18 * v5 + 2];
  uint64_t v9 = v8 + 320 * HIDWORD(v5);
  int v10 = *(_DWORD *)(v9 + 312);
  int v11 = *(void (**)(void))(v9 + 224);
  if (v11) {
    v11(*(void *)(v8 + 320 * HIDWORD(v5) + 288));
  }
  if (_setjmp((int *)v9))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unsigned int v39 = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v39, 2u);
    }
    *(_DWORD *)(v9 + 312) = v10;
    CIOnThreadCleanUpReset(v28);
    dropThreadId(v31, 1, v4);
    CICleanUpReset(v31, v29);
  }
  else
  {
    if (!*(_DWORD *)(a1 + 1464))
    {
      int v12 = *(_DWORD *)(*(void *)(a1 + 1288) + 16);
      if (v12 != 1)
      {
        if (v12 == 2) {
          int v13 = 3;
        }
        else {
          int v13 = 0;
        }
        if (v12) {
          unsigned int v14 = v13;
        }
        else {
          unsigned int v14 = 1;
        }
        SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 1432), *(_DWORD *)(a1 + 1440), 0xAu, v14, *(_DWORD *)(a1 + 1388));
        uint64_t v15 = *(void *)(a1 + 1288);
        uint64_t v16 = *(void *)(v15 + 20);
        *(_DWORD *)(v15 + 40) = *(_DWORD *)(v15 + 28);
        *(_DWORD *)(v15 + 20) = *(_DWORD *)(a1 + 1320);
        *(void *)&long long v17 = *(void *)(a1 + 1384);
        *((void *)&v17 + 1) = v16;
        *(_OWORD *)(v15 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v17;
        *(_DWORD *)(v15 + 16) = 0;
        fd_pwrite(*(void *)(a1 + 1264), v15, 0x38uLL, 0);
        if (a2) {
          fd_sync(*(void *)(a1 + 1264), 0);
        }
        *(_DWORD *)(*(void *)(a1 + 1288) + 16) = 2;
        SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 1432), *(_DWORD *)(a1 + 1440), 0xBu, 3u, *(_DWORD *)(a1 + 1388));
        long long v53 = 0u;
        long long v54 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        *(_OWORD *)unsigned int v39 = 0u;
        long long v40 = 0u;
        int v18 = *__error();
        size_t v19 = _SILogForLogForCategory(7);
        os_log_type_t v20 = 2 * (dword_1E9FC90C0 < 4);
        if (os_log_type_enabled(v19, v20))
        {
          int v21 = fd_name(*(void *)(a1 + 1264), (char *)v39, 0x100uLL);
          unsigned int v22 = "update";
          unsigned int v34 = v21;
          int v23 = *(_DWORD *)(a1 + 1388);
          *(_DWORD *)stat buf = 136315650;
          if (a2) {
            unsigned int v22 = "sync";
          }
          __int16 v35 = 2080;
          long long v36 = v22;
          __int16 v37 = 1024;
          int v38 = v23 - 1;
          _os_log_impl(&dword_1BD672000, v19, v20, "%s complete %s header with count: %d", buf, 0x1Cu);
        }
        *__error() = v18;
      }
    }
    char v32 = 1;
    uint64_t v24 = *(void *)&threadData[18 * v31 + 2];
    uint64_t v25 = v24 + 320 * v30;
    *(_DWORD *)(v25 + 312) = v10;
    int v26 = *(void (**)(void))(v25 + 232);
    if (v26) {
      v26(*(void *)(v24 + 320 * v30 + 288));
    }
    dropThreadId(v31, 0, v4);
  }
  if (v32) {
    return *(unsigned int *)(a1 + 1464);
  }
  *(_DWORD *)(a1 + 1464) = 22;
  return 22;
}

uint64_t data_map32_shadow(uint64_t a1)
{
  uint64_t result = *(unsigned int *)(a1 + 1464);
  if (!result)
  {
    if (*(_DWORD *)(*(void *)(a1 + 1288) + 16) == 2)
    {
      SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 1432), *(_DWORD *)(a1 + 1440), 0xCu, 3u, *(_DWORD *)(a1 + 1388));
      uint64_t v3 = *(void *)(a1 + 1288);
      *(_DWORD *)(v3 + 16) = 2;
      sibling_with_suffix_protected = *(void **)(a1 + 1272);
      if (!sibling_with_suffix_protected)
      {
        sibling_with_suffix_protected = fd_create_sibling_with_suffix_protected(*(void *)(a1 + 1264), ".shadow", 514);
        *(void *)(a1 + 1272) = sibling_with_suffix_protected;
        uint64_t v3 = *(void *)(a1 + 1288);
      }
      fd_pwrite((uint64_t)sibling_with_suffix_protected, v3, 0x38uLL, 0);
      uint64_t v5 = *(void *)(a1 + 1288);
      if (v5)
      {
        unsigned int v6 = *(_DWORD *)(v5 + 16);
        if (v6 < 3) {
          unsigned int v7 = v6 + 1;
        }
        else {
          unsigned int v7 = 0;
        }
      }
      else
      {
        unsigned int v7 = 0;
      }
      SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 1432), *(_DWORD *)(a1 + 1440), 0xDu, v7, *(_DWORD *)(a1 + 1388));
      return *(unsigned int *)(a1 + 1464);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t data_map32_commit_shadow(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 1464) && *(_DWORD *)(*(void *)(a1 + 1288) + 16) == 2)
  {
    SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 1432), *(_DWORD *)(a1 + 1440), 0xEu, 3u, *(_DWORD *)(a1 + 1388));
    fd_sync(*(void *)(a1 + 1272), 0);
  }
  fd_release(*(atomic_uint **)(a1 + 1272));
  *(void *)(a1 + 1272) = 0;
  return *(unsigned int *)(a1 + 1464);
}

uint64_t data_map32_commit_shadow_complete(uint64_t a1)
{
  uint64_t result = *(unsigned int *)(a1 + 1464);
  if (!result)
  {
    if (*(_DWORD *)(*(void *)(a1 + 1288) + 16) == 2)
    {
      SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 1432), *(_DWORD *)(a1 + 1440), 0xFu, 3u, *(_DWORD *)(a1 + 1388));
      uint64_t v3 = *(void *)(a1 + 1288);
      *(void *)(v3 + 32) = *(void *)(v3 + 20);
      *(_DWORD *)(v3 + 40) = *(_DWORD *)(v3 + 28);
      *(_DWORD *)(v3 + 16) = 1;
      fd_pwrite(*(void *)(a1 + 1264), v3, 0x38uLL, 0);
      fd_sync(*(void *)(a1 + 1264), 0);
      uint64_t v4 = *(void *)(a1 + 1288);
      if (v4)
      {
        unsigned int v5 = *(_DWORD *)(v4 + 16);
        if (v5 < 3) {
          unsigned int v6 = v5 + 1;
        }
        else {
          unsigned int v6 = 0;
        }
      }
      else
      {
        unsigned int v6 = 0;
      }
      SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 1432), *(_DWORD *)(a1 + 1440), 0x10u, v6, *(_DWORD *)(a1 + 1388));
      return *(unsigned int *)(a1 + 1464);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _data_map32_match_address(uint64_t result, unint64_t a2)
{
  if (result)
  {
    unint64_t v2 = *(void *)(result + 1248);
    if (v2 != -1)
    {
      if (v2)
      {
        if (v2 <= a2)
        {
          uint64_t v3 = *(unsigned int *)(result + 1256);
          if (v2 + v3 > a2)
          {
            uint64_t v4 = *(void *)(result + 1264);
            unsigned int v5 = "data ro header";
            uint64_t v6 = a2;
            uint64_t v7 = v2;
            int v8 = v3;
LABEL_28:
            log_map_access_error_5877(v6, v7, v3, v8, (uint64_t)v5, v4);
            return 1;
          }
        }
      }
      return 0;
    }
    unint64_t v9 = *(void *)(result + 1312);
    BOOL v10 = v9 + 1 < 2 || v9 > a2;
    if (v10 || (uint64_t v3 = *(unsigned int *)(result + 1304), v9 + v3 <= a2))
    {
      unint64_t v9 = *(void *)(result + 1344);
      BOOL v11 = v9 + 1 < 2 || v9 > a2;
      if (v11 || (uint64_t v3 = *(unsigned int *)(result + 1336), v9 + v3 <= a2))
      {
        unint64_t v9 = *(void *)(result + 1376);
        if (v9 + 1 < 2) {
          return 0;
        }
        if (v9 > a2) {
          return 0;
        }
        uint64_t v3 = *(unsigned int *)(result + 1372);
        if (v9 + v3 <= a2) {
          return 0;
        }
        int v8 = *(_DWORD *)(result + 1368);
        uint64_t v4 = *(void *)(result + 1360);
        unsigned int v5 = "data buckets";
      }
      else
      {
        int v8 = *(_DWORD *)(result + 1340);
        uint64_t v4 = *(void *)(result + 1328);
        unsigned int v5 = "data offsets";
      }
    }
    else
    {
      int v8 = *(_DWORD *)(result + 1308);
      uint64_t v4 = *(void *)(result + 1296);
      unsigned int v5 = "data storage";
    }
    uint64_t v6 = a2;
    uint64_t v7 = v9;
    goto LABEL_28;
  }
  return result;
}

uint64_t data_map32_init_with_ctx(uint64_t a1)
{
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)a1;
  uint64_t v3 = *(const char **)(a1 + 8);
  unsigned int v4 = *(_DWORD *)(a1 + 20);
  dev_t v117 = *(_DWORD *)(a1 + 16);
  bzero(v141, 0x400uLL);
  unsigned int v5 = malloc_type_calloc(1uLL, 0x5C0uLL, 0x10B0040BE5C7721uLL);
  uint64_t v6 = v5;
  uint64_t v7 = (uint64_t)v5;
  int v8 = *(_DWORD *)(a1 + 20) & 0x100;
  v5[54] = 842150450;
  *((void *)v5 + 177) = *(void *)(a1 + 24);
  *((void *)v5 + 176) = *(void *)(a1 + 32);
  *((_OWORD *)v5 + 89) = *(_OWORD *)(a1 + 40);
  v5[360] = *(_DWORD *)(a1 + 56);
  *((unsigned char *)v5 + 1461) = (v4 & 8) != 0;
  unsigned int v118 = v4;
  if ((v4 & 8) == 0)
  {
    *((void *)v5 + 26) = 0;
    *((_OWORD *)v5 + 11) = 0u;
    *((_OWORD *)v5 + 12) = 0u;
    *((_OWORD *)v5 + 9) = 0u;
    *((_OWORD *)v5 + 10) = 0u;
    *((_OWORD *)v5 + 7) = 0u;
    *((_OWORD *)v5 + 8) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 6) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 1) = 0u;
    *((_OWORD *)v5 + 2) = 0u;
    *(_OWORD *)unsigned int v5 = 0u;
    pthread_mutex_init((pthread_mutex_t *)v5, 0);
  }
  *(void *)(v7 + 1248) = -1;
  *(void *)(v7 + 1288) = 0;
  *(void *)(v7 + 1312) = -1;
  *(void *)(v7 + 1344) = -1;
  *(void *)(v7 + 1376) = -1;
  *(_DWORD *)(v7 + 1444) = 0;
  *(unsigned char *)(v7 + 1462) = BYTE1(v8);
  makeThreadId();
  int v9 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v10 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_13821, v7, 0, v9);
  unsigned int v123 = HIDWORD(v10);
  unsigned int v124 = v10;
  unsigned int v121 = v12;
  unsigned int v122 = v11;
  uint64_t v13 = *(void *)&threadData[18 * v10 + 2];
  uint64_t v14 = v13 + 320 * HIDWORD(v10);
  int v119 = *(_DWORD *)(v14 + 312);
  uint64_t v15 = *(void (**)(void))(v14 + 224);
  if (v15) {
    v15(*(void *)(v13 + 320 * HIDWORD(v10) + 288));
  }
  if (_setjmp((int *)v14))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LOWORD(v131.st_dev) = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", (uint8_t *)&v131, 2u);
    }
    *(_DWORD *)(v14 + 312) = v119;
    CIOnThreadCleanUpReset(v121);
    dropThreadId(v124, 1, v9);
    CICleanUpReset(v124, v122);
    int v46 = *__error();
    long long v47 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      int v79 = fd_realpath(*(_DWORD **)(v7 + 1264), v141);
      *(void *)&v131.st_mode = "data_map32_init_with_ctx";
      BOOL v80 = "";
      v131.unsigned int st_dev = 136315650;
      if (v79) {
        BOOL v80 = v79;
      }
      WORD2(v131.st_ino) = 1024;
      *(_DWORD *)((char *)&v131.st_ino + 6) = 1404;
      HIWORD(v131.st_uid) = 2080;
      *(void *)&v131.st_gid = v80;
      _os_log_error_impl(&dword_1BD672000, v47, OS_LOG_TYPE_ERROR, "%s:%d: exception processing %s", (uint8_t *)&v131, 0x1Cu);
    }
    *__error() = v46;
LABEL_44:
    data_map32_destroy(v7);
    return 0;
  }
  if (!v3 || (size_t v16 = strlen(v3), v2 == -1) || !v16 || v16 >= 0xF1)
  {
    int v30 = *__error();
    unsigned int v31 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      goto LABEL_31;
    }
    v131.unsigned int st_dev = 136315394;
    *(void *)&v131.st_mode = "data_map32_init_with_ctx";
    WORD2(v131.st_ino) = 1024;
    *(_DWORD *)((char *)&v131.st_ino + 6) = 1016;
    int v60 = "%s:%d: param error";
    goto LABEL_90;
  }
  int v120 = v9;
  __strlcpy_chk();
  bzero(__str, 0x400uLL);
  snprintf(__str, 0x400uLL, "tmp.%s.rehash", (const char *)v6 + 220);
  memset(&v131, 0, sizeof(v131));
  int v116 = fstatat(*(_DWORD *)a1, __str, &v131, 0);
  int v115 = v4 & 2;
  if ((v4 & 2) != 0) {
    int v17 = 0;
  }
  else {
    int v17 = ((v4 & 1) << 10) | 0x20000202;
  }
  if ((v4 & 3) != 2)
  {
    if (v8) {
      unsigned __int8 v49 = 3;
    }
    else {
      unsigned __int8 v49 = 0;
    }
    int v19 = v2;
LABEL_52:
    snprintf(v141, 0x400uLL, "%s.header", v3);
    long long v50 = fd_create_protected(v19, v141, v17, 3u);
    *(void *)(v7 + 1264) = v50;
    *(_DWORD *)(v7 + 1280) = fd_lseek(v50, 0, 2);
    snprintf(v141, 0x400uLL, "%s.data", v3);
    long long v51 = fd_create_protected(v19, v141, v17, v49);
    *(void *)(v7 + 1296) = v51;
    if ((v4 & 3) == 0)
    {
      memset(&buf, 0, sizeof(buf));
      if (!fd_stat((uint64_t)v51, &buf))
      {
        blkcnt_t v52 = buf.st_blocks << 9;
        if (buf.st_blocks << 9 > buf.st_size + 0x400000)
        {
          bzero(&v131, 0x400uLL);
          int v53 = *__error();
          long long v54 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t v125 = 134218498;
            blkcnt_t v126 = v52;
            __int16 v127 = 2048;
            off_t st_size = buf.st_size;
            __int16 v129 = 2080;
            NSUInteger v130 = v141;
            _os_log_impl(&dword_1BD672000, v54, OS_LOG_TYPE_DEFAULT, "found allocated size %lld for %lld %s", v125, 0x20u);
          }
          *__error() = v53;
          snprintf((char *)&v131, 0x400uLL, "tmp.%s.data.1", v3);
          uint64_t v55 = (atomic_uint *)fd_create_protected(v19, (const char *)&v131, 1538, v49);
          if (fd_copyfile(*(void *)(v7 + 1296), (uint64_t)v55, 0)
            || (snprintf((char *)&v131, 0x400uLL, "tmp.%s.data.2", v3),
                fd_rename(*(void *)(v7 + 1296), (const char *)&v131))
            || fd_rename((uint64_t)v55, v141))
          {
            long long v56 = v55;
          }
          else
          {
            _fd_unlink_with_origin(*(void *)(v7 + 1296), 0);
            fd_release(*(atomic_uint **)(v7 + 1296));
            long long v56 = 0;
            *(void *)(v7 + 1296) = v55;
          }
          _fd_unlink_with_origin((uint64_t)v56, 0);
          fd_release(v56);
        }
      }
      long long v51 = *(void **)(v7 + 1296);
    }
    *(_DWORD *)(v7 + 1308) = fd_lseek(v51, 0, 2);
    snprintf(v141, 0x400uLL, "%s.offsets", v3);
    long long v57 = fd_create_protected(v19, v141, v17, 3u);
    *(void *)(v7 + 1328) = v57;
    *(_DWORD *)(v7 + 1340) = fd_lseek(v57, 0, 2);
    snprintf(v141, 0x400uLL, "%s.buckets", v3);
    uint64_t v58 = fd_create_protected(v19, v141, 514, 3u);
    *(void *)(v7 + 1360) = v58;
    *(_DWORD *)(v7 + 1368) = fd_lseek(v58, 0, 2);
    if (v118)
    {
      int v9 = v120;
      if (fd_truncate(*(void *)(v7 + 1264), 56) == -1)
      {
        int v30 = *__error();
        unsigned int v31 = _SILogForLogForCategory(0);
        if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
          goto LABEL_31;
        }
        v131.unsigned int st_dev = 136315394;
        *(void *)&v131.st_mode = "data_map32_init_with_ctx";
        WORD2(v131.st_ino) = 1024;
        *(_DWORD *)((char *)&v131.st_ino + 6) = 1147;
        int v60 = "%s:%d: fd_truncate error";
      }
      else
      {
        NSUInteger v62 = malloc_type_calloc(1uLL, 0x38uLL, 0x100004021716A34uLL);
        *(void *)(v7 + 1288) = v62;
        *(_DWORD *)(v7 + 1280) = 56;
        *(void *)NSUInteger v62 = 0x446174615000;
        v62[2] = 13;
        v62[3] = v117;
        *((void *)v62 + 2) = 0;
        long long v63 = (void *)MEMORY[0x1E4F14B00];
        if (fd_truncate(*(void *)(v7 + 1296), *MEMORY[0x1E4F14B00]) == -1)
        {
          int v30 = *__error();
          unsigned int v31 = _SILogForLogForCategory(0);
          if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
            goto LABEL_31;
          }
          v131.unsigned int st_dev = 136315394;
          *(void *)&v131.st_mode = "data_map32_init_with_ctx";
          WORD2(v131.st_ino) = 1024;
          *(_DWORD *)((char *)&v131.st_ino + 6) = 1162;
          int v60 = "%s:%d: fd_truncate error";
        }
        else
        {
          uint64_t v64 = fd_mmap(*(void *)(v7 + 1296));
          *(void *)(v7 + 1312) = v64;
          if (v64 == -1)
          {
            int v30 = *__error();
            unsigned int v31 = _SILogForLogForCategory(0);
            if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
              goto LABEL_31;
            }
            v131.unsigned int st_dev = 136315394;
            *(void *)&v131.st_mode = "data_map32_init_with_ctx";
            WORD2(v131.st_ino) = 1024;
            *(_DWORD *)((char *)&v131.st_ino + 6) = 1167;
            int v60 = "%s:%d: storage fd_mmap error";
          }
          else
          {
            *(_DWORD *)(v7 + 1304) = 0x100000;
            off_t v65 = *v63 & 0xFFFFFFFFFFFFFFFCLL;
            *(_DWORD *)(v7 + 1308) = *v63;
            if (fd_truncate(*(void *)(v7 + 1328), v65) == -1)
            {
              int v30 = *__error();
              unsigned int v31 = _SILogForLogForCategory(0);
              if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
                goto LABEL_31;
              }
              v131.unsigned int st_dev = 136315394;
              *(void *)&v131.st_mode = "data_map32_init_with_ctx";
              WORD2(v131.st_ino) = 1024;
              *(_DWORD *)((char *)&v131.st_ino + 6) = 1175;
              int v60 = "%s:%d: fd_truncate error";
            }
            else
            {
              uint64_t v66 = fd_mmap(*(void *)(v7 + 1328));
              *(void *)(v7 + 1344) = v66;
              if (v66 == -1)
              {
                int v30 = *__error();
                unsigned int v31 = _SILogForLogForCategory(0);
                if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_31;
                }
                v131.unsigned int st_dev = 136315394;
                *(void *)&v131.st_mode = "data_map32_init_with_ctx";
                WORD2(v131.st_ino) = 1024;
                *(_DWORD *)((char *)&v131.st_ino + 6) = 1180;
                int v60 = "%s:%d: offsets fd_mmap error";
              }
              else
              {
                *(_DWORD *)(v7 + 1336) = 0x100000;
                unsigned int v67 = *v63 >> 2;
                off_t v68 = *v63 & 0xFFFFFFFFFFFFFFFCLL;
                *(_DWORD *)(v7 + 1340) = *(_DWORD *)v63 & 0xFFFFFFFC;
                *(_DWORD *)(v7 + 1352) = v67;
                if (fd_truncate(*(void *)(v7 + 1360), v68) == -1)
                {
                  int v30 = *__error();
                  unsigned int v31 = _SILogForLogForCategory(0);
                  if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_31;
                  }
                  v131.unsigned int st_dev = 136315394;
                  *(void *)&v131.st_mode = "data_map32_init_with_ctx";
                  WORD2(v131.st_ino) = 1024;
                  *(_DWORD *)((char *)&v131.st_ino + 6) = 1190;
                  int v60 = "%s:%d: fd_truncate error";
                }
                else
                {
                  uint64_t v69 = fd_mmap(*(void *)(v7 + 1360));
                  *(void *)(v7 + 1376) = v69;
                  if (v69 != -1)
                  {
                    *(_DWORD *)(v7 + 1372) = 0x100000;
                    *(_DWORD *)(v7 + 1368) = v68;
                    uint64_t v70 = *v63 >> 2;
                    *(_DWORD *)(*(void *)(v7 + 1288) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v70;
                    *(_DWORD *)(v7 + 1384) = v70;
                    int v71 = data_entry_store_13873(*(void *)(v7 + 1312), 0, dword_1E6348DA8);
                    long long v72 = *(_DWORD **)(v7 + 1288);
                    v72[5] = v71;
                    *(_DWORD *)(v7 + 1320) = v71;
                    **(_DWORD **)(v7 + 1344) = 0;
                    v72[7] = 1;
                    *(_DWORD *)(v7 + 1388) = 1;
                    unsigned int v73 = v72[4];
                    if (v73 < 3) {
                      unsigned int v74 = v73 + 1;
                    }
                    else {
                      unsigned int v74 = 0;
                    }
                    SIActivityJournalEvent(*(os_unfair_lock_s **)(v7 + 1432), *(_DWORD *)(v7 + 1440), 0, v74, 1u);
                    char v29 = 0;
LABEL_154:
                    if (*(_DWORD *)(v7 + 1352) < *(_DWORD *)(v7 + 1388))
                    {
                      int v30 = *__error();
                      unsigned int v31 = _SILogForLogForCategory(0);
                      if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
                        goto LABEL_31;
                      }
                      uint64_t v100 = *(unsigned int *)(v7 + 1352);
                      dev_t v101 = *(_DWORD *)(v7 + 1388);
                      v131.unsigned int st_dev = 136315906;
                      *(void *)&v131.st_mode = "data_map32_init_with_ctx";
                      WORD2(v131.st_ino) = 1024;
                      *(_DWORD *)((char *)&v131.st_ino + 6) = 1349;
                      HIWORD(v131.st_uid) = 2048;
                      *(void *)&v131.st_gid = v100;
                      *((_WORD *)&v131.st_rdev + 2) = 1024;
                      *(dev_t *)((char *)&v131.st_rdev + 6) = v101;
                      int v60 = "%s:%d: invalid offset size 1 - %ld %d";
                      goto LABEL_157;
                    }
                    uint64_t v102 = *(void *)(v7 + 1288);
                    if (*(void *)v102 == 0x446174615000)
                    {
                      gid_t v103 = *(_DWORD *)(v102 + 8);
                      if (v103 - 8 >= 6 && v103 != 1)
                      {
                        int v30 = *__error();
                        unsigned int v31 = _SILogForLogForCategory(0);
                        if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
                          goto LABEL_31;
                        }
                        v131.unsigned int st_dev = 136315650;
                        *(void *)&v131.st_mode = "data_map32_init_with_ctx";
                        WORD2(v131.st_ino) = 1024;
                        *(_DWORD *)((char *)&v131.st_ino + 6) = 1359;
                        HIWORD(v131.st_uid) = 1024;
                        v131.st_gid = v103;
                        int v60 = "%s:%d: invalid version %d";
                        uint32_t v61 = 24;
                        goto LABEL_91;
                      }
                      if (*(_DWORD *)(v102 + 12) != v117)
                      {
                        int v30 = *__error();
                        unsigned int v31 = _SILogForLogForCategory(0);
                        if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
                          goto LABEL_31;
                        }
                        gid_t v104 = *(_DWORD *)(*(void *)(v7 + 1288) + 12);
                        v131.unsigned int st_dev = 136315906;
                        *(void *)&v131.st_mode = "data_map32_init_with_ctx";
                        WORD2(v131.st_ino) = 1024;
                        *(_DWORD *)((char *)&v131.st_ino + 6) = 1363;
                        HIWORD(v131.st_uid) = 1024;
                        v131.st_gid = v104;
                        LOWORD(v131.st_rdev) = 1024;
                        *(dev_t *)((char *)&v131.st_rdev + 2) = v117;
                        int v60 = "%s:%d: invalid extra_size %d %d";
                        uint32_t v61 = 30;
                        goto LABEL_91;
                      }
                      *(_DWORD *)(v7 + 1244) = v117;
                      if (v29)
                      {
                        char v34 = 1;
                        goto LABEL_115;
                      }
                      if (*(_DWORD *)(v7 + 1280) <= 0x37u)
                      {
                        int v30 = *__error();
                        unsigned int v31 = _SILogForLogForCategory(0);
                        if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
                          goto LABEL_31;
                        }
                        gid_t v105 = *(_DWORD *)(v7 + 1280);
                        v131.unsigned int st_dev = 136315906;
                        *(void *)&v131.st_mode = "data_map32_init_with_ctx";
                        WORD2(v131.st_ino) = 1024;
                        *(_DWORD *)((char *)&v131.st_ino + 6) = 1371;
                        HIWORD(v131.st_uid) = 1024;
                        v131.st_gid = v105;
                        LOWORD(v131.st_rdev) = 2048;
                        *(void *)((char *)&v131.st_rdev + 2) = 56;
                        int v60 = "%s:%d: invalid header size %u < %lu";
LABEL_157:
                        uint32_t v61 = 34;
                        goto LABEL_91;
                      }
                      if (*(_DWORD *)(v7 + 1308) < *(_DWORD *)(v7 + 1320))
                      {
                        int v106 = *__error();
                        uint64_t v107 = _SILogForLogForCategory(0);
                        if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
                        {
                          gid_t v108 = *(_DWORD *)(v7 + 1308);
                          dev_t v109 = *(_DWORD *)(v7 + 1320);
                          v131.unsigned int st_dev = 136315906;
                          *(void *)&v131.st_mode = "data_map32_init_with_ctx";
                          WORD2(v131.st_ino) = 1024;
                          *(_DWORD *)((char *)&v131.st_ino + 6) = 1376;
                          HIWORD(v131.st_uid) = 1024;
                          v131.st_gid = v108;
                          LOWORD(v131.st_rdev) = 1024;
                          *(dev_t *)((char *)&v131.st_rdev + 2) = v109;
                          int v110 = "%s:%d: invalid storage size 1 (%u < %u)";
                          uint32_t v111 = 30;
LABEL_192:
                          _os_log_error_impl(&dword_1BD672000, v107, OS_LOG_TYPE_ERROR, v110, (uint8_t *)&v131, v111);
                        }
LABEL_188:
                        int v32 = v106;
                        int v33 = v119;
                        int v9 = v120;
                        goto LABEL_32;
                      }
                      if (!v116
                        || (v118 & 0x80) != 0
                        || !*(_DWORD *)(v102 + 16)
                        || (uint64_t v112 = *(unsigned int *)(v7 + 1384), !v112)
                        || (unint64_t v113 = 4 * v112, v114 = *(unsigned int *)(v7 + 1368), v113 > v114))
                      {
                        if ((_data_map32_rehash(v7) & 1) == 0)
                        {
                          int v106 = *__error();
                          uint64_t v107 = _SILogForLogForCategory(0);
                          if (!os_log_type_enabled(v107, OS_LOG_TYPE_ERROR)) {
                            goto LABEL_188;
                          }
                          v131.unsigned int st_dev = 136315394;
                          *(void *)&v131.st_mode = "data_map32_init_with_ctx";
                          WORD2(v131.st_ino) = 1024;
                          *(_DWORD *)((char *)&v131.st_ino + 6) = 1382;
                          int v110 = "%s:%d: re-build hash error";
                          goto LABEL_191;
                        }
                        unlinkat(*(_DWORD *)a1, __str, 2048);
                        unint64_t v114 = *(unsigned int *)(v7 + 1368);
                        unint64_t v113 = 4 * *(unsigned int *)(v7 + 1384);
                      }
                      if (v113 > v114)
                      {
                        int v106 = *__error();
                        uint64_t v107 = _SILogForLogForCategory(0);
                        if (!os_log_type_enabled(v107, OS_LOG_TYPE_ERROR)) {
                          goto LABEL_188;
                        }
                        v131.unsigned int st_dev = 136315394;
                        *(void *)&v131.st_mode = "data_map32_init_with_ctx";
                        WORD2(v131.st_ino) = 1024;
                        *(_DWORD *)((char *)&v131.st_ino + 6) = 1390;
                        int v110 = "%s:%d: invalid hash size 1";
LABEL_191:
                        uint32_t v111 = 18;
                        goto LABEL_192;
                      }
                      char v34 = 1;
LABEL_98:
                      int v33 = v119;
                      int v9 = v120;
                      goto LABEL_33;
                    }
                    int v30 = *__error();
                    unsigned int v31 = _SILogForLogForCategory(0);
                    if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_31;
                    }
                    v131.unsigned int st_dev = 136315394;
                    *(void *)&v131.st_mode = "data_map32_init_with_ctx";
                    WORD2(v131.st_ino) = 1024;
                    *(_DWORD *)((char *)&v131.st_ino + 6) = 1353;
                    int v60 = "%s:%d: invalid offset signature";
                    goto LABEL_90;
                  }
                  int v30 = *__error();
                  unsigned int v31 = _SILogForLogForCategory(0);
                  if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_31;
                  }
                  v131.unsigned int st_dev = 136315394;
                  *(void *)&v131.st_mode = "data_map32_init_with_ctx";
                  WORD2(v131.st_ino) = 1024;
                  *(_DWORD *)((char *)&v131.st_ino + 6) = 1196;
                  int v60 = "%s:%d: hash fd_mmap error";
                }
              }
            }
          }
        }
      }
    }
    else
    {
      int v9 = v120;
      if (*(_DWORD *)(v7 + 1280) <= 0x37u)
      {
        int v30 = *__error();
        unsigned int v31 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          uint64_t v59 = *(unsigned int *)(v7 + 1280);
          v131.unsigned int st_dev = 136315650;
          *(void *)&v131.st_mode = "data_map32_init_with_ctx";
          WORD2(v131.st_ino) = 1024;
          *(_DWORD *)((char *)&v131.st_ino + 6) = 1225;
          HIWORD(v131.st_uid) = 2048;
          *(void *)&v131.st_gid = v59;
          int v60 = "%s:%d: invalid header size %ld";
          uint32_t v61 = 28;
LABEL_91:
          _os_log_error_impl(&dword_1BD672000, v31, OS_LOG_TYPE_ERROR, v60, (uint8_t *)&v131, v61);
        }
LABEL_31:
        int v32 = v30;
        int v33 = v119;
LABEL_32:
        *__error() = v32;
        char v34 = 0;
        goto LABEL_33;
      }
      *(void *)(v7 + 1288) = malloc_type_calloc(1uLL, 0x38uLL, 0x100004021716A34uLL);
      if ((v118 & 0x80) != 0)
      {
        sibling_with_suffix_protected = (atomic_uint *)fd_create_sibling_with_suffix_protected(*(void *)(v7 + 1264), ".shadow", 0);
        if (sibling_with_suffix_protected)
        {
          long long v76 = sibling_with_suffix_protected;
          if (fd_copyfile((uint64_t)sibling_with_suffix_protected, *(void *)(v7 + 1264), 0)) {
            int v77 = (v118 >> 2) & 1;
          }
          else {
            int v77 = 0;
          }
          fd_release(v76);
          int v78 = v77;
        }
        else
        {
          int v78 = (v118 >> 2) & 1;
        }
      }
      else
      {
        int v78 = v118 & 4;
      }
      if (fd_pread(*(_DWORD **)(v7 + 1264), *(void **)(v7 + 1288), 0x38uLL, 0) != 56)
      {
        int v30 = *__error();
        unsigned int v31 = _SILogForLogForCategory(0);
        if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
          goto LABEL_31;
        }
        v131.unsigned int st_dev = 136315394;
        *(void *)&v131.st_mode = "data_map32_init_with_ctx";
        WORD2(v131.st_ino) = 1024;
        *(_DWORD *)((char *)&v131.st_ino + 6) = 1244;
        int v60 = "%s:%d: header pread error";
        goto LABEL_90;
      }
      BOOL v81 = *(_DWORD **)(v7 + 1288);
      if (v81[2] == 1)
      {
        if (fd_truncate(*(void *)(v7 + 1264), 56) == -1)
        {
          int v30 = *__error();
          unsigned int v31 = _SILogForLogForCategory(0);
          if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
            goto LABEL_31;
          }
          v131.unsigned int st_dev = 136315394;
          *(void *)&v131.st_mode = "data_map32_init_with_ctx";
          WORD2(v131.st_ino) = 1024;
          *(_DWORD *)((char *)&v131.st_ino + 6) = 1252;
          int v60 = "%s:%d: fd_truncate error";
          goto LABEL_90;
        }
        *(_DWORD *)(v7 + 1280) = 56;
        uint64_t v82 = *(void *)(v7 + 1288);
        *(void *)(v82 + 48) = 0;
        *(_DWORD *)(v82 + 44) = 0;
        *(_DWORD *)(v82 + 8) = 9;
        *(_DWORD *)(v82 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
        *(_DWORD *)(v7 + 1384) = 0;
        BOOL v81 = (_DWORD *)v82;
      }
      unsigned int v83 = v81[7];
      *(_DWORD *)(v7 + 1388) = v83;
      unsigned int v84 = v81[4];
      if (v84 < 3) {
        unsigned int v85 = v84 + 1;
      }
      else {
        unsigned int v85 = 0;
      }
      SIActivityJournalEvent(*(os_unfair_lock_s **)(v7 + 1432), *(_DWORD *)(v7 + 1440), 1u, v85, v83);
      uint64_t v86 = *(void *)(v7 + 1288);
      unsigned int v87 = *(_DWORD *)(v86 + 20);
      *(_DWORD *)(v7 + 1320) = v87;
      *(_DWORD *)(v7 + 1352) = *(_DWORD *)(v7 + 1340) >> 2;
      *(_DWORD *)(v7 + 1384) = *(_DWORD *)(v86 + 24);
      *(void *)(v7 + 1392) = *(void *)(v86 + 44);
      *(_DWORD *)(v7 + 1400) = *(_DWORD *)(v86 + 52);
      *(unsigned char *)(v7 + 1460) = *(_DWORD *)(v86 + 8) < 9u;
      if (v78)
      {
        unsigned int v88 = *(_DWORD *)(v86 + 32);
        if (v87 < v88) {
          goto LABEL_114;
        }
        int v89 = *(_DWORD *)(v86 + 32);
        if (v88 != v87)
        {
          if (!v115) {
            *(_DWORD *)(v86 + 20) = v88;
          }
          *(_DWORD *)(v7 + 1320) = v88;
        }
        unsigned int v90 = *(_DWORD *)(v7 + 1388);
        unsigned int v91 = *(_DWORD *)(v86 + 40);
        if (v90 < v91) {
          goto LABEL_114;
        }
        if (v90 != v91)
        {
          if (!v115)
          {
            *(_DWORD *)(v86 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
            *(_DWORD *)(v86 + 28) = v91;
            *(_DWORD *)(v86 + 20) = v89;
          }
          *(_DWORD *)(v7 + 1388) = v91;
          *(_DWORD *)(v7 + 1384) = 0;
        }
      }
      int v92 = (void *)MEMORY[0x1E4F14B00];
      if (((*MEMORY[0x1E4F14B00] + (unint64_t)*(unsigned int *)(v7 + 1308) - 1) & -*MEMORY[0x1E4F14B00]) <= 0x100000) {
        LODWORD(v93) = 0x100000;
      }
      else {
        uint64_t v93 = (*MEMORY[0x1E4F14B00] + *(unsigned int *)(v7 + 1308) - 1) & -*MEMORY[0x1E4F14B00];
      }
      uint64_t v94 = fd_mmap(*(void *)(v7 + 1296));
      *(void *)(v7 + 1312) = v94;
      if (v94 == -1)
      {
        int v30 = *__error();
        unsigned int v31 = _SILogForLogForCategory(0);
        if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
          goto LABEL_31;
        }
        v131.unsigned int st_dev = 136315394;
        *(void *)&v131.st_mode = "data_map32_init_with_ctx";
        WORD2(v131.st_ino) = 1024;
        *(_DWORD *)((char *)&v131.st_ino + 6) = 1312;
        int v60 = "%s:%d: storage fd_mmap error";
      }
      else
      {
        *(_DWORD *)(v7 + 1304) = v93;
        if (((*v92 + (unint64_t)*(unsigned int *)(v7 + 1340) - 1) & -*v92) <= 0x100000) {
          LODWORD(v95) = 0x100000;
        }
        else {
          uint64_t v95 = (*v92 + *(unsigned int *)(v7 + 1340) - 1) & -*v92;
        }
        uint64_t v96 = fd_mmap(*(void *)(v7 + 1328));
        *(void *)(v7 + 1344) = v96;
        if (v96 == -1)
        {
          int v30 = *__error();
          unsigned int v31 = _SILogForLogForCategory(0);
          if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
            goto LABEL_31;
          }
          v131.unsigned int st_dev = 136315394;
          *(void *)&v131.st_mode = "data_map32_init_with_ctx";
          WORD2(v131.st_ino) = 1024;
          *(_DWORD *)((char *)&v131.st_ino + 6) = 1320;
          int v60 = "%s:%d: offset fd_mmap error";
        }
        else
        {
          *(_DWORD *)(v7 + 1336) = v95;
          if (((*v92 + (unint64_t)*(unsigned int *)(v7 + 1368) - 1) & -*v92) <= 0x100000) {
            LODWORD(v97) = 0x100000;
          }
          else {
            uint64_t v97 = (*v92 + *(unsigned int *)(v7 + 1368) - 1) & -*v92;
          }
          uint64_t v98 = fd_mmap(*(void *)(v7 + 1360));
          *(void *)(v7 + 1376) = v98;
          if (v98 != -1)
          {
            *(_DWORD *)(v7 + 1372) = v97;
            uint64_t v99 = *(void *)(v7 + 1288);
            if (!*(_DWORD *)(v99 + 28))
            {
              *(_DWORD *)(v99 + 28) = 1;
              *(_DWORD *)(v7 + 1388) = 1;
            }
            char v29 = 0;
            goto LABEL_154;
          }
          int v30 = *__error();
          unsigned int v31 = _SILogForLogForCategory(0);
          if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
            goto LABEL_31;
          }
          v131.unsigned int st_dev = 136315394;
          *(void *)&v131.st_mode = "data_map32_init_with_ctx";
          WORD2(v131.st_ino) = 1024;
          *(_DWORD *)((char *)&v131.st_ino + 6) = 1329;
          int v60 = "%s:%d: offset fd_mmap error";
        }
      }
    }
LABEL_90:
    uint32_t v61 = 18;
    goto LABEL_91;
  }
  snprintf(v141, 0x400uLL, "%s.map", v3);
  if (v8) {
    unsigned __int8 v18 = 3;
  }
  else {
    unsigned __int8 v18 = 0;
  }
  int v19 = v2;
  os_log_type_t v20 = fd_create_protected(v2, v141, v17, v18);
  *(void *)(v7 + 1264) = v20;
  unsigned int v21 = fd_lseek(v20, 0, 2);
  *(_DWORD *)(v7 + 1280) = v21;
  if (v21 == -1 || v21 < 0x4DuLL)
  {
    fd_release(*(atomic_uint **)(v7 + 1264));
    *(_DWORD *)(v7 + 1280) = 0;
    unsigned __int8 v49 = v18;
    goto LABEL_52;
  }
  uint64_t v22 = fd_mmap(*(void *)(v7 + 1264));
  *(void *)(v7 + 1248) = v22;
  if (v22 == -1)
  {
    char v34 = 0;
    goto LABEL_98;
  }
  unsigned int v23 = *(_DWORD *)(v7 + 1280);
  *(_DWORD *)(v7 + 1256) = v23;
  int v9 = v120;
  if (*(_DWORD *)(v22 + 60) == v23)
  {
    *(void *)(v7 + 1288) = v22;
    uint64_t v24 = *(unsigned int *)(v22 + 64);
    if (v24 < v23)
    {
      uint64_t v25 = *(unsigned int *)(v22 + 68);
      if (v25 < v23)
      {
        uint64_t v26 = *(unsigned int *)(v22 + 72);
        if (v26 < v23)
        {
          *(void *)(v7 + 1376) = v22 + v24;
          *(void *)&long long v27 = *(void *)(v22 + 24);
          *(void *)(v7 + 1344) = v22 + v25;
          *(void *)(v7 + 1312) = v22 + v26;
          *(_DWORD *)(v7 + 1320) = *(_DWORD *)(v22 + 20);
          unsigned int v28 = (v26 - v25) >> 2;
          if (*(_DWORD *)(v7 + 1352) > DWORD1(v27)) {
            unsigned int v28 = DWORD1(v27);
          }
          *(_DWORD *)(v7 + 1352) = v28;
          *((void *)&v27 + 1) = *(void *)(v22 + 44);
          *(_OWORD *)(v6 + 346) = v27;
          *(_DWORD *)(v7 + 1400) = *(_DWORD *)(v22 + 52);
          *(unsigned char *)(v7 + 1460) = *(_DWORD *)(v22 + 8) < 9u;
          char v29 = 1;
          goto LABEL_154;
        }
      }
    }
  }
LABEL_114:
  char v34 = 0;
LABEL_115:
  int v33 = v119;
LABEL_33:
  uint64_t v35 = *(void *)&threadData[18 * v124 + 2];
  uint64_t v36 = v35 + 320 * v123;
  *(_DWORD *)(v36 + 312) = v33;
  __int16 v37 = *(void (**)(void))(v36 + 232);
  if (v37) {
    v37(*(void *)(v35 + 320 * v123 + 288));
  }
  dropThreadId(v124, 0, v9);
  if ((v34 & 1) == 0) {
    goto LABEL_44;
  }
  long long v137 = 0u;
  long long v138 = 0u;
  long long v135 = 0u;
  long long v136 = 0u;
  long long v133 = 0u;
  long long v134 = 0u;
  long long v132 = 0u;
  memset(&v131, 0, sizeof(v131));
  int v38 = *__error();
  unsigned int v39 = _SILogForLogForCategory(7);
  os_log_type_t v40 = 2 * (dword_1E9FC90C0 < 4);
  if (os_log_type_enabled(v39, v40))
  {
    long long v41 = fd_name(*(void *)(v7 + 1264), (char *)&v131, 0x100uLL);
    int v42 = *(_DWORD *)(v7 + 1388) - 1;
    buf.unsigned int st_dev = 136315394;
    *(void *)&buf.st_mode = v41;
    WORD2(buf.st_ino) = 1024;
    *(_DWORD *)((char *)&buf.st_ino + 6) = v42;
    _os_log_impl(&dword_1BD672000, v39, v40, "Opened map %s with counts: %d", (uint8_t *)&buf, 0x12u);
  }
  *__error() = v38;
  uint64_t v43 = *(void *)(v7 + 1288);
  if (v43)
  {
    unsigned int v44 = *(_DWORD *)(v43 + 16);
    if (v44 < 3) {
      unsigned int v45 = v44 + 1;
    }
    else {
      unsigned int v45 = 0;
    }
  }
  else
  {
    unsigned int v45 = 0;
  }
  SIActivityJournalEvent(*(os_unfair_lock_s **)(v7 + 1432), *(_DWORD *)(v7 + 1440), 1u, v45, *(_DWORD *)(v7 + 1388));
  return v7;
}

uint64_t data_entry_store_13873(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v4 = a2;
  unsigned int v5 = *a3;
  unsigned int v6 = *a3 >> 28;
  if (v6)
  {
    int v8 = (unsigned char *)(a1 + a2);
    *int v8 = v5 | 0x80;
    v8[1] = (v5 >> 7) | 0x80;
    v8[2] = (v5 >> 14) | 0x80;
    uint64_t v4 = a2 + 4;
    void v8[3] = (v5 >> 21) | 0x80;
  }
  else if ((v5 & 0xFE00000) != 0)
  {
    uint64_t v7 = (unsigned char *)(a1 + a2);
    *uint64_t v7 = v5 | 0x80;
    v7[1] = (v5 >> 7) | 0x80;
    uint64_t v4 = a2 + 3;
    v7[2] = (v5 >> 14) | 0x80;
    unsigned int v6 = (v5 & 0xFE00000) >> 21;
  }
  else if ((v5 & 0x1FC000) != 0)
  {
    unsigned int v11 = (unsigned char *)(a1 + a2);
    *unsigned int v11 = v5 | 0x80;
    uint64_t v4 = a2 + 2;
    v11[1] = (v5 >> 7) | 0x80;
    unsigned int v6 = (v5 & 0x1FC000) >> 14;
  }
  else if ((v5 & 0x3F80) != 0)
  {
    *(unsigned char *)(a1 + a2) = v5 | 0x80;
    uint64_t v4 = a2 + 1;
    unsigned int v6 = (unsigned __int16)(v5 & 0x3F80) >> 7;
  }
  else
  {
    unsigned int v6 = *a3;
  }
  *(unsigned char *)(a1 + v4) = v6;
  int v9 = v4 + 1;
  memcpy((void *)(a1 + (v4 + 1)), *((const void **)a3 + 1), *a3);
  return *a3 + v9;
}

uint64_t _data_map32_rehash(uint64_t a1)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 1396) = 0;
  int v2 = *(_DWORD *)(a1 + 1388) - *(_DWORD *)(a1 + 1392);
  int v3 = *__error();
  uint64_t v4 = _SILogForLogForCategory(0);
  os_log_type_t v5 = 2 * (gSILogLevels[0] < 4);
  if (os_log_type_enabled(v4, v5))
  {
    int v6 = *(_DWORD *)(a1 + 1388);
    int v7 = *(_DWORD *)(a1 + 1392);
    int v8 = *(_DWORD *)(a1 + 1384);
    *(_DWORD *)stat buf = 134219008;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = v6;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&unsigned char buf[20] = v7;
    *(_WORD *)&unsigned char buf[24] = 1024;
    *(_DWORD *)&buf[26] = v2;
    *(_WORD *)&buf[30] = 1024;
    LODWORD(v64) = v8;
    _os_log_impl(&dword_1BD672000, v4, v5, "rehash %p max id: %d deletes: %d count: %d hash_size: %d", buf, 0x24u);
  }
  *__error() = v3;
  uint64_t v9 = *(void *)(a1 + 1288);
  if (v9)
  {
    unsigned int v10 = *(_DWORD *)(v9 + 16);
    if (v10 < 3) {
      unsigned int v11 = v10 + 1;
    }
    else {
      unsigned int v11 = 0;
    }
  }
  else
  {
    unsigned int v11 = 0;
  }
  SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 1432), *(_DWORD *)(a1 + 1440), 3u, v11, *(_DWORD *)(a1 + 1388));
  unsigned int v12 = *(void **)(a1 + 1376);
  size_t v13 = 4 * *(unsigned int *)(a1 + 1384);
  fd_system_status_stall_if_busy();
  msync(v12, v13, 4);
  if (fd_truncate(*(void *)(a1 + 1360), 0) == -1) {
    goto LABEL_38;
  }
  unsigned int v14 = 2 * v2;
  if (2 * v2 <= (*MEMORY[0x1E4F14B00] >> 2)) {
    unsigned int v14 = *MEMORY[0x1E4F14B00] >> 2;
  }
  *(_DWORD *)(a1 + 1384) = v14;
  unint64_t v15 = 4 * v14;
  if (fd_truncate(*(void *)(a1 + 1360), v15) == -1) {
    goto LABEL_38;
  }
  if (!*(unsigned char *)(a1 + 1458))
  {
    _data_map32_dirty(a1);
    *(unsigned char *)(a1 + 1458) = 1;
  }
  *(_DWORD *)(a1 + 1368) = v15;
  size_t v16 = *(unsigned int *)(a1 + 1372);
  if (v15 <= v16) {
    goto LABEL_19;
  }
  unint64_t v17 = v15 & 0xFFFFFFFC;
  unint64_t v18 = *(unsigned int *)(a1 + 1372);
  do
  {
    unint64_t v19 = v18;
    v18 *= 2;
  }
  while (v19 < v17);
  munmap(*(void **)(a1 + 1376), v16);
  *(_DWORD *)(a1 + 1372) = 0;
  *(void *)(a1 + 1376) = -1;
  uint64_t v20 = fd_mmap(*(void *)(a1 + 1360));
  *(void *)(a1 + 1376) = v20;
  if (v20 == -1)
  {
LABEL_38:
    int v41 = *__error();
    int v42 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 136315650;
      *(void *)&uint8_t buf[4] = "_data_map32_rehash";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = 634;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&unsigned char buf[20] = a1;
      _os_log_error_impl(&dword_1BD672000, v42, OS_LOG_TYPE_ERROR, "%s:%d: re-build hash error %p", buf, 0x1Cu);
    }
    uint64_t v43 = __error();
    uint64_t result = 0;
    *uint64_t v43 = v41;
    return result;
  }
  *(_DWORD *)(a1 + 1372) = v19;
LABEL_19:
  unint64_t v21 = *(unsigned int *)(a1 + 1388);
  if (v21 >= 2)
  {
    for (unint64_t i = 1; i < v21; ++i)
    {
      uint64_t v23 = *(void *)(a1 + 1344);
      if (!v23) {
        goto LABEL_38;
      }
      uint64_t v24 = *(unsigned int *)(v23 + 4 * i);
      if (v24 != 1)
      {
        uint64_t v46 = 0;
        uint64_t v47 = 0;
        char v48 = 0;
        unsigned int v25 = *(_DWORD *)(a1 + 1320);
        if (v25 <= v24)
        {
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          long long v66 = 0u;
          long long v67 = 0u;
          long long v64 = 0u;
          long long v65 = 0u;
          memset(buf, 0, sizeof(buf));
          int v30 = *__error();
          unsigned int v31 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            uint64_t v32 = *(unsigned int *)(a1 + 1320);
            int v33 = fd_name(*(void *)(a1 + 1264), (char *)buf, 0x100uLL);
            *(_DWORD *)__s = 136316418;
            *(void *)&__s[4] = "_data_map32_get_data_entry";
            *(_WORD *)&__s[12] = 1024;
            *(_DWORD *)&__s[14] = 448;
            *(_WORD *)&__s[18] = 2048;
            *(void *)&__s[20] = v24;
            *(_WORD *)&__s[28] = 2048;
            *(void *)&__s[30] = v32;
            *(_WORD *)&__s[38] = 2048;
            *(void *)&__s[40] = a1;
            LOWORD(v79) = 2080;
            *(void *)((char *)&v79 + 2) = v33;
            char v34 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
            uint64_t v35 = (uint8_t *)__s;
            uint64_t v36 = v31;
            uint32_t v37 = 58;
            goto LABEL_42;
          }
LABEL_37:
          *__error() = v30;
          goto LABEL_38;
        }
        data_entry_restore_32(*(void *)(a1 + 1312), v24, v25, (uint64_t)&v46, &v48);
        if (v48)
        {
          uint64_t v38 = 0;
          uint64_t v88 = 0;
          long long v86 = 0u;
          long long v87 = 0u;
          long long v84 = 0u;
          long long v85 = 0u;
          long long v82 = 0u;
          long long v83 = 0u;
          long long v80 = 0u;
          long long v81 = 0u;
          long long v79 = 0u;
          memset(__s, 0, sizeof(__s));
          do
          {
            if (v24 + v38 >= (unint64_t)*(unsigned int *)(a1 + 1320)) {
              break;
            }
            size_t v39 = strlen(__s);
            sprintf(&__s[v39], "%d ", *(unsigned __int8 *)(*(void *)(a1 + 1312) + v24 + v38++));
          }
          while (v38 != 5);
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          long long v66 = 0u;
          long long v67 = 0u;
          long long v64 = 0u;
          long long v65 = 0u;
          memset(buf, 0, sizeof(buf));
          int v30 = *__error();
          os_log_type_t v40 = _SILogForLogForCategory(0);
          if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
            goto LABEL_37;
          }
          unsigned int v44 = fd_name(*(void *)(a1 + 1264), (char *)buf, 0x100uLL);
          uint64_t v45 = *(unsigned int *)(a1 + 1320);
          *(_DWORD *)unsigned __int8 v49 = 136316674;
          long long v50 = "_data_map32_get_data_entry";
          __int16 v51 = 1024;
          int v52 = 444;
          __int16 v53 = 2080;
          long long v54 = v44;
          __int16 v55 = 2048;
          uint64_t v56 = v24;
          __int16 v57 = 2048;
          uint64_t v58 = v45;
          __int16 v59 = 2048;
          uint64_t v60 = v46;
          __int16 v61 = 2080;
          NSUInteger v62 = __s;
          char v34 = "%s:%d: data_entry_restore_32 failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
          uint64_t v35 = v49;
          uint64_t v36 = v40;
          uint32_t v37 = 68;
LABEL_42:
          _os_log_error_impl(&dword_1BD672000, v36, OS_LOG_TYPE_ERROR, v34, v35, v37);
          goto LABEL_37;
        }
        unsigned int v26 = *(_DWORD *)(a1 + 1244);
        if (v46 < v26) {
          goto LABEL_38;
        }
        unsigned int v27 = data_entry_hash(v46, v47, v26, *(unsigned __int8 *)(a1 + 1460));
        bucket_entry = (_DWORD *)_data_map32_get_bucket_entry(a1, v27, i, 0, 0);
        if (!bucket_entry || *bucket_entry) {
          goto LABEL_38;
        }
        _DWORD *bucket_entry = i;
        unint64_t v21 = *(unsigned int *)(a1 + 1388);
      }
    }
  }
  return 1;
}

void data_map32_destroy(uint64_t a1)
{
  if (a1)
  {
    makeThreadId();
    if ((unint64_t)(*(void *)(a1 + 1248) + 1) >= 2)
    {
      char v54 = 0;
      int v10 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
      unint64_t v11 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_13821, a1, 0, v10);
      unsigned int v52 = HIDWORD(v11);
      unsigned int v53 = v11;
      unsigned int v50 = v13;
      unsigned int v51 = v12;
      uint64_t v14 = *(void *)&threadData[18 * v11 + 2];
      uint64_t v15 = v14 + 320 * HIDWORD(v11);
      int v16 = *(_DWORD *)(v15 + 312);
      unint64_t v17 = *(void (**)(void))(v15 + 224);
      if (v17) {
        v17(*(void *)(v14 + 320 * HIDWORD(v11) + 288));
      }
      unsigned int v49 = v53;
      unsigned int v48 = v52;
      unint64_t v47 = __PAIR64__(v51, v50);
      if (_setjmp((int *)v15))
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t v46 = 0;
          _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v46, 2u);
        }
        *(_DWORD *)(v15 + 312) = v16;
        CIOnThreadCleanUpReset(v47);
        dropThreadId(v49, 1, v10);
        CICleanUpReset(v49, HIDWORD(v47));
        size_t v18 = 0;
      }
      else
      {
        size_t v22 = *(unsigned int *)(*(void *)(a1 + 1248) + 60);
        char v54 = 1;
        uint64_t v23 = *(void *)&threadData[18 * v49 + 2];
        unsigned int v24 = v48;
        uint64_t v25 = v23 + 320 * v48;
        *(_DWORD *)(v25 + 312) = v16;
        unsigned int v26 = *(void (**)(void))(v25 + 232);
        if (v26) {
          v26(*(void *)(v23 + 320 * v24 + 288));
        }
        dropThreadId(v49, 0, v10);
        size_t v18 = v22;
      }
      size_t v27 = v18;
      if (!v54) {
        size_t v27 = *(unsigned int *)(a1 + 1256);
      }
      munmap(*(void **)(a1 + 1248), v27);
      *(void *)(a1 + 1248) = -1;
      fd_release(*(atomic_uint **)(a1 + 1264));
      *(void *)(a1 + 1264) = 0;
    }
    else
    {
      int v2 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
      unint64_t v3 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_13821, a1, 0, v2);
      unsigned int v52 = HIDWORD(v3);
      unsigned int v53 = v3;
      unsigned int v50 = v5;
      unsigned int v51 = v4;
      uint64_t v6 = *(void *)&threadData[18 * v3 + 2];
      uint64_t v7 = v6 + 320 * HIDWORD(v3);
      int v8 = *(_DWORD *)(v7 + 312);
      uint64_t v9 = *(void (**)(void))(v7 + 224);
      if (v9) {
        v9(*(void *)(v6 + 320 * HIDWORD(v3) + 288));
      }
      unsigned int v49 = v53;
      unsigned int v48 = v52;
      unint64_t v47 = __PAIR64__(v51, v50);
      if (_setjmp((int *)v7))
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t v46 = 0;
          _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v46, 2u);
        }
        *(_DWORD *)(v7 + 312) = v8;
        CIOnThreadCleanUpReset(v47);
        dropThreadId(v49, 1, v2);
        CICleanUpReset(v49, HIDWORD(v47));
      }
      else
      {
        uint64_t v19 = *(void *)(a1 + 1288);
        if (v19)
        {
          unsigned int v20 = *(_DWORD *)(v19 + 16);
          if (v20 < 3) {
            unsigned int v21 = v20 + 1;
          }
          else {
            unsigned int v21 = 0;
          }
        }
        else
        {
          unsigned int v21 = 0;
        }
        SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 1432), *(_DWORD *)(a1 + 1440), 2u, v21, *(_DWORD *)(a1 + 1388));
        uint64_t v28 = *(void *)(a1 + 1288);
        if (v28 && !*(_DWORD *)(v28 + 16))
        {
          if (*(unsigned char *)(a1 + 1458))
          {
            char v29 = *(void **)(a1 + 1376);
            size_t v30 = 4 * *(unsigned int *)(a1 + 1384);
            fd_system_status_stall_if_busy();
            msync(v29, v30, 4);
            _fd_unlink_with_origin(*(void *)(a1 + 1360), 0);
            munmap(*(void **)(a1 + 1376), *(unsigned int *)(a1 + 1372));
            *(void *)(a1 + 1376) = -1;
          }
          if (*(unsigned char *)(a1 + 1457))
          {
            unsigned int v31 = *(void **)(a1 + 1312);
            size_t v32 = *(unsigned int *)(a1 + 1320);
            fd_system_status_stall_if_busy();
            msync(v31, v32, 4);
            munmap(*(void **)(a1 + 1312), *(unsigned int *)(a1 + 1304));
            *(void *)(a1 + 1312) = -1;
            fd_truncate(*(void *)(a1 + 1296), *(unsigned int *)(*(void *)(a1 + 1288) + 20));
          }
          if (*(unsigned char *)(a1 + 1459))
          {
            int v33 = *(void **)(a1 + 1344);
            size_t v34 = 4 * *(unsigned int *)(a1 + 1388);
            fd_system_status_stall_if_busy();
            msync(v33, v34, 4);
            munmap(*(void **)(a1 + 1344), *(unsigned int *)(a1 + 1336));
            *(void *)(a1 + 1344) = -1;
            fd_truncate(*(void *)(a1 + 1328), 4 * *(unsigned int *)(a1 + 1388));
          }
        }
        uint64_t v35 = *(void *)&threadData[18 * v49 + 2];
        unsigned int v36 = v48;
        uint64_t v37 = v35 + 320 * v48;
        *(_DWORD *)(v37 + 312) = v8;
        uint64_t v38 = *(void (**)(void))(v37 + 232);
        if (v38) {
          v38(*(void *)(v35 + 320 * v36 + 288));
        }
        dropThreadId(v49, 0, v2);
      }
      size_t v39 = *(void **)(a1 + 1288);
      if (v39)
      {
        free(v39);
        *(void *)(a1 + 1288) = 0;
      }
      fd_release(*(atomic_uint **)(a1 + 1264));
      *(void *)(a1 + 1264) = 0;
      os_log_type_t v40 = *(void **)(a1 + 1312);
      if (v40 != (void *)-1)
      {
        munmap(v40, *(unsigned int *)(a1 + 1304));
        *(void *)(a1 + 1312) = -1;
        *(_DWORD *)(a1 + 1304) = 0;
      }
      fd_release(*(atomic_uint **)(a1 + 1296));
      *(void *)(a1 + 1296) = 0;
      int v41 = *(void **)(a1 + 1344);
      if (v41 != (void *)-1)
      {
        munmap(v41, *(unsigned int *)(a1 + 1336));
        *(void *)(a1 + 1344) = -1;
        *(_DWORD *)(a1 + 1336) = 0;
      }
      fd_release(*(atomic_uint **)(a1 + 1328));
      *(void *)(a1 + 1328) = 0;
      int v42 = *(void **)(a1 + 1376);
      if (v42 != (void *)-1)
      {
        munmap(v42, *(unsigned int *)(a1 + 1372));
        *(void *)(a1 + 1376) = -1;
        *(_DWORD *)(a1 + 1372) = 0;
      }
      fd_release(*(atomic_uint **)(a1 + 1360));
      *(void *)(a1 + 1360) = 0;
    }
    uint64_t v43 = *(atomic_uint **)(a1 + 1272);
    if (v43)
    {
      fd_release(v43);
      *(void *)(a1 + 1272) = 0;
    }
    unsigned int v44 = *(void **)(a1 + 1448);
    if (v44)
    {
      uint64_t v45 = (const void *)v44[2];
      if (v45) {
        CFRelease(v45);
      }
      free(v44);
      *(void *)(a1 + 1448) = 0;
    }
    if (!*(unsigned char *)(a1 + 1461)) {
      db_rwlock_destroy((pthread_mutex_t *)a1);
    }
    free((void *)a1);
  }
}

uint64_t data_entry_hash(int a1, uint64_t a2, unsigned int a3, int a4)
{
  if (a4) {
    return LegacyHash((unsigned __int16 *)(a2 + a3), a1 - a3);
  }
  else {
    return commonHash(a1 - a3, a2 + a3);
  }
}

uint64_t LegacyHash(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2 >= 1)
  {
    int v3 = a2 & 3;
    if ((unint64_t)a2 >= 4)
    {
      unint64_t v4 = ((unint64_t)a2 >> 2) + 1;
      do
      {
        unsigned int v5 = ((a2 + *a1) << 16) ^ (a1[1] << 11) ^ (a2 + *a1);
        a1 += 2;
        LODWORD(a2) = v5 + (v5 >> 11);
        --v4;
      }
      while (v4 > 1);
    }
    switch(v3)
    {
      case 1:
        unsigned int v7 = (a2 + *(unsigned __int8 *)a1) ^ ((a2 + *(unsigned __int8 *)a1) << 10);
        LODWORD(a2) = v7 + (v7 >> 1);
        break;
      case 2:
        unsigned int v8 = (a2 + *a1) ^ ((a2 + *a1) << 11);
        LODWORD(a2) = v8 + (v8 >> 17);
        break;
      case 3:
        unsigned int v6 = (*((unsigned __int8 *)a1 + 2) << 18) ^ ((a2 + *a1) << 16) ^ (a2 + *a1);
        LODWORD(a2) = v6 + (v6 >> 11);
        break;
    }
    int v9 = (a2 ^ (8 * a2)) + ((a2 ^ (8 * a2)) >> 5);
    unsigned int v10 = (v9 ^ (16 * v9)) + ((v9 ^ (16 * v9)) >> 17);
    return (v10 ^ (v10 << 25)) + ((v10 ^ (v10 << 25)) >> 6);
  }
  return v2;
}

uint64_t data_map32_commit_sync(uint64_t a1)
{
  uint64_t result = *(unsigned int *)(a1 + 1464);
  if (!result)
  {
    int v3 = *(_DWORD *)(*(void *)(a1 + 1288) + 16);
    if (v3 == 1)
    {
      return 0;
    }
    else
    {
      if (v3 == 2) {
        int v4 = 3;
      }
      else {
        int v4 = 0;
      }
      if (v3) {
        unsigned int v5 = v4;
      }
      else {
        unsigned int v5 = 1;
      }
      SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 1432), *(_DWORD *)(a1 + 1440), 8u, v5, *(_DWORD *)(a1 + 1388));
      uint64_t v6 = *(void *)(a1 + 1288);
      *(_DWORD *)(v6 + 16) = 2;
      fd_pwrite(*(void *)(a1 + 1264), v6, 0x38uLL, 0);
      fd_sync(*(void *)(a1 + 1264), 0);
      uint64_t v7 = *(void *)(a1 + 1288);
      if (v7)
      {
        unsigned int v8 = *(_DWORD *)(v7 + 16);
        if (v8 < 3) {
          unsigned int v9 = v8 + 1;
        }
        else {
          unsigned int v9 = 0;
        }
      }
      else
      {
        unsigned int v9 = 0;
      }
      SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 1432), *(_DWORD *)(a1 + 1440), 9u, v9, *(_DWORD *)(a1 + 1388));
      return *(unsigned int *)(a1 + 1464);
    }
  }
  return result;
}

uint64_t dm_hash_13954(char a1, unsigned __int16 *a2, uint64_t a3)
{
  if (a1) {
    return LegacyHash(a2, a3);
  }
  else {
    return commonHash(a3, (uint64_t)a2);
  }
}

uint64_t data_map32_id_get_with_key_noextra(uint64_t a1, unsigned __int16 *a2, size_t a3)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = dm_hash_13954(*(unsigned char *)(a1 + 1460), a2, a3);
  char v60 = 0;
  makeThreadId();
  int v7 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v8 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_13821, a1, 0, v7);
  unsigned int v58 = HIDWORD(v8);
  unsigned int v59 = v8;
  unint64_t v57 = __PAIR64__(v9, v10);
  uint64_t v11 = *(void *)&threadData[18 * v8 + 2];
  uint64_t v12 = v11 + 320 * HIDWORD(v8);
  int v13 = *(_DWORD *)(v12 + 312);
  uint64_t v14 = *(void (**)(void))(v12 + 224);
  if (v14) {
    v14(*(void *)(v11 + 320 * HIDWORD(v8) + 288));
  }
  unsigned int v56 = v59;
  unsigned int v55 = v58;
  unint64_t v54 = v57;
  if (_setjmp((int *)v12))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", (uint8_t *)&buf, 2u);
    }
    *(_DWORD *)(v12 + 312) = v13;
    CIOnThreadCleanUpReset(v54);
    dropThreadId(v56, 1, v7);
    CICleanUpReset(v56, HIDWORD(v54));
    uint64_t v15 = 0;
    goto LABEL_40;
  }
  if (_data_map32_rdlock(a1))
  {
    uint64_t v15 = 0;
    goto LABEL_36;
  }
  int v51 = v7;
  unsigned int v16 = *(_DWORD *)(a1 + 1384);
  int v17 = v6 % v16;
  unsigned int v18 = v17;
  uint64_t v49 = *(unsigned int *)(a1 + 1244);
  unsigned int v50 = a2;
  while (1)
  {
    uint64_t v19 = *(void *)(a1 + 1376);
    uint64_t v20 = *(unsigned int *)(v19 + 4 * v18);
    if (!v20) {
      break;
    }
    uint64_t v21 = v18;
    if (*(_DWORD *)(a1 + 1388) <= v20)
    {
      long long v90 = 0u;
      long long v91 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long buf = 0u;
      long long v77 = 0u;
      int v26 = *__error();
      size_t v34 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
        goto LABEL_25;
      }
      unint64_t v47 = v34;
      int v35 = *(_DWORD *)(a1 + 1388);
      unsigned int v36 = fd_name(*(void *)(a1 + 1264), (char *)&buf, 0x100uLL);
      LODWORD(v92[0]) = 136316418;
      *(void *)((char *)v92 + 4) = "_data_map32_get_offset_entry";
      WORD2(v92[1]) = 1024;
      *(_DWORD *)((char *)&v92[1] + 6) = 424;
      WORD1(v92[2]) = 1024;
      HIDWORD(v92[2]) = v20;
      LOWORD(v92[3]) = 1024;
      *(_DWORD *)((char *)&v92[3] + 2) = v35;
      HIWORD(v92[3]) = 2048;
      v92[4] = a1;
      LOWORD(v92[5]) = 2080;
      *(void *)((char *)&v92[5] + 2) = v36;
      size_t v30 = v47;
      unsigned int v31 = "%s:%d: invalid data id %d max %d %p %s";
      size_t v32 = (uint8_t *)v92;
      uint32_t v33 = 50;
LABEL_24:
      _os_log_error_impl(&dword_1BD672000, v30, OS_LOG_TYPE_ERROR, v31, v32, v33);
      goto LABEL_25;
    }
    uint64_t v22 = *(unsigned int *)(*(void *)(a1 + 1344) + 4 * v20);
    if (v22 != 1)
    {
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      char v61 = 0;
      unsigned int v23 = *(_DWORD *)(a1 + 1320);
      if (v23 <= v22)
      {
        long long v90 = 0u;
        long long v91 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long buf = 0u;
        long long v77 = 0u;
        int v26 = *__error();
        uint64_t v37 = _SILogForLogForCategory(0);
        if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
          goto LABEL_25;
        }
        os_log_t log = v37;
        uint64_t v38 = *(unsigned int *)(a1 + 1320);
        size_t v39 = fd_name(*(void *)(a1 + 1264), (char *)&buf, 0x100uLL);
        LODWORD(v92[0]) = 136316418;
        *(void *)((char *)v92 + 4) = "_data_map32_get_data_entry";
        WORD2(v92[1]) = 1024;
        *(_DWORD *)((char *)&v92[1] + 6) = 448;
        WORD1(v92[2]) = 2048;
        *(void *)((char *)&v92[2] + 4) = v22;
        WORD2(v92[3]) = 2048;
        *(void *)((char *)&v92[3] + 6) = v38;
        HIWORD(v92[4]) = 2048;
        v92[5] = a1;
        LOWORD(v92[6]) = 2080;
        *(void *)((char *)&v92[6] + 2) = v39;
        size_t v30 = log;
        unsigned int v31 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
        size_t v32 = (uint8_t *)v92;
        uint32_t v33 = 58;
        goto LABEL_24;
      }
      data_entry_restore_32(*(void *)(a1 + 1312), v22, v23, (uint64_t)&v52, &v61);
      if (v61)
      {
        uint64_t v101 = 0;
        long long v99 = 0u;
        long long v100 = 0u;
        long long v97 = 0u;
        long long v98 = 0u;
        long long v95 = 0u;
        long long v96 = 0u;
        long long v93 = 0u;
        long long v94 = 0u;
        uint64_t v24 = 0;
        memset(v92, 0, sizeof(v92));
        do
        {
          if (v22 + v24 >= (unint64_t)*(unsigned int *)(a1 + 1320)) {
            break;
          }
          size_t v25 = strlen((const char *)v92);
          sprintf((char *)v92 + v25, "%d ", *(unsigned __int8 *)(*(void *)(a1 + 1312) + v22 + v24++));
        }
        while (v24 != 5);
        long long v90 = 0u;
        long long v91 = 0u;
        long long v88 = 0u;
        long long v89 = 0u;
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long buf = 0u;
        long long v77 = 0u;
        int v26 = *__error();
        size_t v27 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          uint64_t v28 = fd_name(*(void *)(a1 + 1264), (char *)&buf, 0x100uLL);
          uint64_t v29 = *(unsigned int *)(a1 + 1320);
          int v62 = 136316674;
          long long v63 = "_data_map32_get_data_entry";
          __int16 v64 = 1024;
          int v65 = 444;
          __int16 v66 = 2080;
          long long v67 = v28;
          __int16 v68 = 2048;
          uint64_t v69 = v22;
          __int16 v70 = 2048;
          uint64_t v71 = v29;
          __int16 v72 = 2048;
          uint64_t v73 = v52;
          __int16 v74 = 2080;
          long long v75 = v92;
          size_t v30 = v27;
          unsigned int v31 = "%s:%d: data_entry_restore_32 failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
          size_t v32 = (uint8_t *)&v62;
          uint32_t v33 = 68;
          goto LABEL_24;
        }
LABEL_25:
        *__error() = v26;
        goto LABEL_26;
      }
      if (v49 + a3 == v52 && !memcmp(v50, (const void *)(v53 + v49), a3))
      {
        uint64_t v15 = *(unsigned int *)(v19 + 4 * v21);
        goto LABEL_35;
      }
    }
LABEL_26:
    if (v21 + 1 == v16) {
      unsigned int v40 = 0;
    }
    else {
      unsigned int v40 = v21 + 1;
    }
    unsigned int v18 = v40;
    if (v40 == v17)
    {
      uint64_t v15 = 0;
      goto LABEL_35;
    }
  }
  uint64_t v15 = 0;
LABEL_35:
  int v7 = v51;
LABEL_36:
  if (*(void *)(a1 + 1448))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1444));
    uint64_t v46 = *(void **)(a1 + 1448);
    if (v46) {
      bit_vector_set_10635(v46, v15);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1444));
  }
  char v60 = 1;
  uint64_t v41 = *(void *)&threadData[18 * v56 + 2];
  unsigned int v42 = v55;
  uint64_t v43 = v41 + 320 * v55;
  *(_DWORD *)(v43 + 312) = v13;
  unsigned int v44 = *(void (**)(void))(v43 + 232);
  if (v44) {
    v44(*(void *)(v41 + 320 * v42 + 288));
  }
  dropThreadId(v56, 0, v7);
LABEL_40:
  if (!v60)
  {
    uint64_t v15 = 0;
    *(_DWORD *)(a1 + 1464) = 22;
  }
  _data_map32_unlock(a1);
  return v15;
}

uint64_t data_map32_get_extra_with_key(uint64_t a1, unsigned __int16 *a2, size_t a3, unsigned char *a4)
{
  int v4 = a4;
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  *a4 = 0;
  uint64_t v68 = 0;
  unsigned int v8 = dm_hash_13954(*(unsigned char *)(a1 + 1460), a2, a3);
  if (_data_map32_rdlock(a1)) {
    goto LABEL_44;
  }
  char v67 = 0;
  makeThreadId();
  int v9 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v10 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_13821, a1, 0, v9);
  unsigned int v65 = HIDWORD(v10);
  unsigned int v66 = v10;
  unint64_t v64 = __PAIR64__(v11, v12);
  uint64_t v13 = *(void *)&threadData[18 * v10 + 2];
  uint64_t v14 = v13 + 320 * HIDWORD(v10);
  int v15 = *(_DWORD *)(v14 + 312);
  unsigned int v16 = *(void (**)(void))(v14 + 224);
  if (v16) {
    v16(*(void *)(v13 + 320 * HIDWORD(v10) + 288));
  }
  unsigned int v63 = v66;
  unsigned int v62 = v65;
  unint64_t v61 = v64;
  if (_setjmp((int *)v14))
  {
    int v17 = (_DWORD *)(v14 + 312);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", (uint8_t *)&buf, 2u);
    }
    *int v17 = v15;
    CIOnThreadCleanUpReset(v61);
    dropThreadId(v63, 1, v9);
    CICleanUpReset(v63, HIDWORD(v61));
    goto LABEL_42;
  }
  __s1 = a2;
  int v57 = v9;
  unsigned int v58 = v4;
  unsigned int v18 = *(_DWORD *)(a1 + 1384);
  int v19 = v8 % v18;
  unsigned int v20 = v19;
  uint64_t v54 = *(unsigned int *)(a1 + 1244);
  locuint64_t k = (os_unfair_lock_s *)(a1 + 1444);
  do
  {
    uint64_t v21 = *(void *)(a1 + 1376);
    CFIndex v22 = *(unsigned int *)(v21 + 4 * v20);
    if (!v22) {
      break;
    }
    uint64_t v23 = v20;
    if (*(void *)(a1 + 1448))
    {
      os_unfair_lock_lock(lock);
      uint64_t v45 = *(void **)(a1 + 1448);
      if (v45) {
        bit_vector_set_10635(v45, v22);
      }
      os_unfair_lock_unlock(lock);
      unint64_t v24 = *(unsigned int *)(v21 + 4 * v23);
    }
    else
    {
      unint64_t v24 = *(unsigned int *)(v21 + 4 * v20);
    }
    if (*(unsigned int *)(a1 + 1388) <= v24)
    {
      long long v98 = 0u;
      long long v99 = 0u;
      long long v96 = 0u;
      long long v97 = 0u;
      long long v94 = 0u;
      long long v95 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      long long v90 = 0u;
      long long v91 = 0u;
      long long v88 = 0u;
      long long v89 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      long long buf = 0u;
      long long v85 = 0u;
      int v30 = *__error();
      uint64_t v38 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
LABEL_23:
        *__error() = v30;
        goto LABEL_24;
      }
      os_log_t log = v38;
      int v43 = *(_DWORD *)(a1 + 1388);
      unsigned int v44 = fd_name(*(void *)(a1 + 1264), (char *)&buf, 0x100uLL);
      LODWORD(v100[0]) = 136316418;
      *(void *)((char *)v100 + 4) = "_data_map32_get_offset_entry";
      WORD2(v100[1]) = 1024;
      *(_DWORD *)((char *)&v100[1] + 6) = 424;
      WORD1(v100[2]) = 1024;
      HIDWORD(v100[2]) = v24;
      LOWORD(v100[3]) = 1024;
      *(_DWORD *)((char *)&v100[3] + 2) = v43;
      HIWORD(v100[3]) = 2048;
      v100[4] = a1;
      LOWORD(v100[5]) = 2080;
      *(void *)((char *)&v100[5] + 2) = v44;
      size_t v34 = log;
      int v35 = "%s:%d: invalid data id %d max %d %p %s";
      unsigned int v36 = (uint8_t *)v100;
      uint32_t v37 = 50;
LABEL_32:
      _os_log_error_impl(&dword_1BD672000, v34, OS_LOG_TYPE_ERROR, v35, v36, v37);
      goto LABEL_23;
    }
    uint64_t v25 = *(void *)(a1 + 1344);
    if (v25)
    {
      uint64_t v26 = *(unsigned int *)(v25 + 4 * v24);
      if (v26 != 1)
      {
        uint64_t v59 = 0;
        uint64_t v60 = 0;
        char v69 = 0;
        unsigned int v27 = *(_DWORD *)(a1 + 1320);
        if (v27 <= v26)
        {
          long long v98 = 0u;
          long long v99 = 0u;
          long long v96 = 0u;
          long long v97 = 0u;
          long long v94 = 0u;
          long long v95 = 0u;
          long long v92 = 0u;
          long long v93 = 0u;
          long long v90 = 0u;
          long long v91 = 0u;
          long long v88 = 0u;
          long long v89 = 0u;
          long long v86 = 0u;
          long long v87 = 0u;
          long long buf = 0u;
          long long v85 = 0u;
          int v30 = *__error();
          unsigned int v40 = _SILogForLogForCategory(0);
          if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
            goto LABEL_23;
          }
          uint64_t v52 = v40;
          uint64_t v41 = *(unsigned int *)(a1 + 1320);
          unsigned int v42 = fd_name(*(void *)(a1 + 1264), (char *)&buf, 0x100uLL);
          LODWORD(v100[0]) = 136316418;
          *(void *)((char *)v100 + 4) = "_data_map32_get_data_entry";
          WORD2(v100[1]) = 1024;
          *(_DWORD *)((char *)&v100[1] + 6) = 448;
          WORD1(v100[2]) = 2048;
          *(void *)((char *)&v100[2] + 4) = v26;
          WORD2(v100[3]) = 2048;
          *(void *)((char *)&v100[3] + 6) = v41;
          HIWORD(v100[4]) = 2048;
          v100[5] = a1;
          LOWORD(v100[6]) = 2080;
          *(void *)((char *)&v100[6] + 2) = v42;
          size_t v34 = v52;
          int v35 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
          unsigned int v36 = (uint8_t *)v100;
          uint32_t v37 = 58;
          goto LABEL_32;
        }
        data_entry_restore_32(*(void *)(a1 + 1312), v26, v27, (uint64_t)&v59, &v69);
        if (v69)
        {
          uint64_t v109 = 0;
          long long v107 = 0u;
          long long v108 = 0u;
          long long v105 = 0u;
          long long v106 = 0u;
          long long v103 = 0u;
          long long v104 = 0u;
          long long v101 = 0u;
          long long v102 = 0u;
          uint64_t v28 = 0;
          memset(v100, 0, sizeof(v100));
          do
          {
            if (v26 + v28 >= (unint64_t)*(unsigned int *)(a1 + 1320)) {
              break;
            }
            size_t v29 = strlen((const char *)v100);
            sprintf((char *)v100 + v29, "%d ", *(unsigned __int8 *)(*(void *)(a1 + 1312) + v26 + v28++));
          }
          while (v28 != 5);
          long long v98 = 0u;
          long long v99 = 0u;
          long long v96 = 0u;
          long long v97 = 0u;
          long long v94 = 0u;
          long long v95 = 0u;
          long long v92 = 0u;
          long long v93 = 0u;
          long long v90 = 0u;
          long long v91 = 0u;
          long long v88 = 0u;
          long long v89 = 0u;
          long long v86 = 0u;
          long long v87 = 0u;
          long long buf = 0u;
          long long v85 = 0u;
          int v30 = *__error();
          unsigned int v31 = _SILogForLogForCategory(0);
          if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
            goto LABEL_23;
          }
          size_t v32 = fd_name(*(void *)(a1 + 1264), (char *)&buf, 0x100uLL);
          uint64_t v33 = *(unsigned int *)(a1 + 1320);
          int v70 = 136316674;
          uint64_t v71 = "_data_map32_get_data_entry";
          __int16 v72 = 1024;
          int v73 = 444;
          __int16 v74 = 2080;
          long long v75 = v32;
          __int16 v76 = 2048;
          uint64_t v77 = v26;
          __int16 v78 = 2048;
          uint64_t v79 = v33;
          __int16 v80 = 2048;
          uint64_t v81 = v59;
          __int16 v82 = 2080;
          long long v83 = v100;
          size_t v34 = v31;
          int v35 = "%s:%d: data_entry_restore_32 failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
          unsigned int v36 = (uint8_t *)&v70;
          uint32_t v37 = 68;
          goto LABEL_32;
        }
        if (v54 + a3 == v59 && !memcmp(__s1, (const void *)(v60 + v54), a3))
        {
          int v46 = *(_DWORD *)(a1 + 1244);
          __memcpy_chk();
          HIDWORD(v68) = v46;
          unsigned char *v58 = 1;
          break;
        }
      }
    }
LABEL_24:
    if (v23 + 1 == v18) {
      unsigned int v39 = 0;
    }
    else {
      unsigned int v39 = v23 + 1;
    }
    unsigned int v20 = v39;
  }
  while (v39 != v19);
  char v67 = 1;
  uint64_t v47 = *(void *)&threadData[18 * v63 + 2];
  unsigned int v48 = v62;
  uint64_t v49 = v47 + 320 * v62;
  *(_DWORD *)(v49 + 312) = v15;
  unsigned int v50 = *(void (**)(void))(v49 + 232);
  if (v50) {
    v50(*(void *)(v47 + 320 * v48 + 288));
  }
  dropThreadId(v63, 0, v57);
  int v4 = v58;
LABEL_42:
  if (!v67)
  {
    *int v4 = 0;
    *(_DWORD *)(a1 + 1464) = 22;
  }
LABEL_44:
  _data_map32_unlock(a1);
  return v68;
}

void _data_map32_set_seen_id(uint64_t a1, unsigned int a2)
{
  if (*(void *)(a1 + 1448))
  {
    int v4 = (os_unfair_lock_s *)(a1 + 1444);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1444));
    unsigned int v5 = *(void **)(a1 + 1448);
    if (v5) {
      bit_vector_set_10635(v5, a2);
    }
    os_unfair_lock_unlock(v4);
  }
}

uint64_t _data_map32_sync_header_to_tmp(uint64_t a1)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  char v32 = 0;
  makeThreadId();
  int v2 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v3 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_13821, a1, 0, v2);
  unsigned int v30 = HIDWORD(v3);
  unsigned int v31 = v3;
  unsigned int v28 = v5;
  unsigned int v29 = v4;
  uint64_t v6 = *(void *)&threadData[18 * v3 + 2];
  uint64_t v7 = v6 + 320 * HIDWORD(v3);
  int v8 = *(_DWORD *)(v7 + 312);
  int v9 = *(void (**)(void))(v7 + 224);
  if (v9) {
    v9(*(void *)(v6 + 320 * HIDWORD(v3) + 288));
  }
  if (_setjmp((int *)v7))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
    }
    *(_DWORD *)(v7 + 312) = v8;
    CIOnThreadCleanUpReset(v28);
    dropThreadId(v31, 1, v2);
    uint64_t result = CICleanUpReset(v31, v29);
  }
  else
  {
    if (!*(_DWORD *)(a1 + 1464) && *(_DWORD *)(*(void *)(a1 + 1288) + 16) != 1)
    {
      unsigned int v11 = (char *)malloc_type_calloc(1uLL, 0x38uLL, 0x100004021716A34uLL);
      unsigned int v12 = *(long long **)(a1 + 1288);
      uint64_t v13 = *((void *)v12 + 6);
      long long v14 = v12[2];
      long long v15 = *v12;
      *((_OWORD *)v11 + 1) = v12[1];
      *((_OWORD *)v11 + 2) = v14;
      *((void *)v11 + 6) = v13;
      *(_OWORD *)unsigned int v11 = v15;
      *(void *)&long long v14 = *(void *)(v11 + 20);
      *((_DWORD *)v11 + 10) = *((_DWORD *)v11 + 7);
      *((_DWORD *)v11 + 5) = *(_DWORD *)(a1 + 1320);
      *(void *)&long long v15 = *(void *)(a1 + 1384);
      *((void *)&v15 + 1) = v14;
      *(_OWORD *)(v11 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v15;
      *((_DWORD *)v11 + 4) = 2;
      sibling_protected = *(atomic_uint **)(a1 + 1264);
      if (sibling_protected)
      {
        *(void *)long long buf = 0;
        asprintf((char **)buf, "%s%s", "tmp.", *((const char **)sibling_protected + 9));
        sibling_protected = (atomic_uint *)fd_create_sibling_protected((uint64_t)sibling_protected, *(const char **)buf, 1538, 0);
        free(*(void **)buf);
      }
      fd_pwrite((uint64_t)sibling_protected, *(void *)(a1 + 1288), 0x38uLL, 0);
      fd_sync((uint64_t)sibling_protected, 1);
      fd_release(sibling_protected);
      uint64_t v17 = *(void *)(a1 + 1288);
      if (v17)
      {
        unsigned int v18 = *(_DWORD *)(v17 + 16);
        if (v18 < 3) {
          unsigned int v19 = v18 + 1;
        }
        else {
          unsigned int v19 = 0;
        }
      }
      else
      {
        unsigned int v19 = 0;
      }
      SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 1432), *(_DWORD *)(a1 + 1440), 0xBu, v19, *(_DWORD *)(a1 + 1388));
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      *(_OWORD *)long long buf = 0u;
      long long v38 = 0u;
      int v20 = *__error();
      uint64_t v21 = _SILogForLogForCategory(7);
      os_log_type_t v22 = 2 * (dword_1E9FC90C0 < 4);
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = fd_name(*(void *)(a1 + 1264), (char *)buf, 0x100uLL);
        int v24 = *(_DWORD *)(a1 + 1388) - 1;
        *(_DWORD *)uint64_t v33 = 136315394;
        size_t v34 = v23;
        __int16 v35 = 1024;
        int v36 = v24;
        _os_log_impl(&dword_1BD672000, v21, v22, "%s complete write tmp header with count: %d", v33, 0x12u);
      }
      *__error() = v20;
    }
    char v32 = 1;
    uint64_t v25 = *(void *)&threadData[18 * v31 + 2];
    uint64_t v26 = v25 + 320 * v30;
    *(_DWORD *)(v26 + 312) = v8;
    unsigned int v27 = *(void (**)(void))(v26 + 232);
    if (v27) {
      v27(*(void *)(v25 + 320 * v30 + 288));
    }
    uint64_t result = dropThreadId(v31, 0, v2);
  }
  if (!v32) {
    *(_DWORD *)(a1 + 1464) = 22;
  }
  return result;
}

uint64_t _data_map32_garbage_compact_collect(uint64_t a1, uint64_t a2, unsigned int a3, char a4, uint64_t a5)
{
  uint64_t v169 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(unsigned int *)(a1 + 1388);
  bzero(v130, 0x400uLL);
  bzero(__str, 0x400uLL);
  v170.locatiouint64_t n = 0;
  int v9 = *(unsigned __int8 *)(a1 + 1462);
  *(_DWORD *)a5 = 842150450;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = v8;
  unsigned int v102 = v8 - 1;
  v170.length = (v8 - 1);
  uint64_t v106 = a2;
  *(void *)(a5 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = CFBitVectorGetCountOfBit(*(CFBitVectorRef *)(a2 + 16), v170, 1u);
  unint64_t v10 = fd_name(*(void *)(a1 + 1296), v130, 0x400uLL);
  snprintf(__str, 0x400uLL, "tmp.%s", v10);
  if (v9) {
    unsigned __int8 v11 = 3;
  }
  else {
    unsigned __int8 v11 = 0;
  }
  sibling_protected = (atomic_uint *)fd_create_sibling_protected(*(void *)(a1 + 1296), __str, 1538, v11);
  if (fd_truncate((uint64_t)sibling_protected, *(unsigned int *)(a1 + 1308)) == -1)
  {
    __int16 v35 = 0;
    unsigned int v36 = *__error();
    if (v36) {
      uint64_t v37 = v36;
    }
    else {
      uint64_t v37 = 0xFFFFFFFFLL;
    }
    uint64_t v38 = -1;
    uint64_t v39 = -1;
    size_t v40 = 0;
    size_t v41 = 0;
    goto LABEL_31;
  }
  size_t v13 = *MEMORY[0x1E4F14B00];
  uint64_t v14 = fd_mmap((uint64_t)sibling_protected);
  if (v14 == -1)
  {
    unsigned int v42 = *__error();
    if (v42) {
      uint64_t v37 = v42;
    }
    else {
      uint64_t v37 = 0xFFFFFFFFLL;
    }
    int v43 = *__error();
    long long v44 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)char v145 = 136315394;
      *(void *)&v145[4] = "_data_map32_garbage_compact_collect";
      *(_WORD *)&v145[12] = 1024;
      *(_DWORD *)&v145[14] = 2679;
      _os_log_error_impl(&dword_1BD672000, v44, OS_LOG_TYPE_ERROR, "%s:%d: storage fd_mmap error", v145, 0x12u);
    }
    __int16 v35 = 0;
    *__error() = v43;
    uint64_t v38 = -1;
    uint64_t v39 = -1;
    size_t v40 = 0;
    size_t v41 = 0;
    goto LABEL_31;
  }
  unsigned __int8 v15 = v11;
  uint64_t v16 = v14;
  size_t v17 = *(unsigned int *)(a1 + 1304);
  unsigned int v18 = fd_name(*(void *)(a1 + 1328), v130, 0x400uLL);
  snprintf(__str, 0x400uLL, "tmp.%s", v18);
  unsigned int v19 = (atomic_uint *)fd_create_sibling_protected(*(void *)(a1 + 1328), __str, 1538, v15);
  if (fd_truncate((uint64_t)v19, *(unsigned int *)(a1 + 1340)) == -1)
  {
LABEL_27:
    size_t v40 = 0;
    unsigned int v47 = *__error();
    if (v47) {
      uint64_t v37 = v47;
    }
    else {
      uint64_t v37 = 0xFFFFFFFFLL;
    }
    uint64_t v39 = v16;
    __int16 v35 = v19;
    uint64_t v38 = -1;
    size_t v41 = v17;
    goto LABEL_31;
  }
  unsigned int v20 = *(_DWORD *)(a1 + 1340);
  uint64_t v21 = fd_mmap((uint64_t)v19);
  if (v21 == -1)
  {
    int v45 = *__error();
    long long v46 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)char v145 = 136315394;
      *(void *)&v145[4] = "_data_map32_garbage_compact_collect";
      *(_WORD *)&v145[12] = 1024;
      *(_DWORD *)&v145[14] = 2694;
      _os_log_error_impl(&dword_1BD672000, v46, OS_LOG_TYPE_ERROR, "%s:%d: offsets fd_mmap error", v145, 0x12u);
    }
    *__error() = v45;
    goto LABEL_27;
  }
  unsigned int v104 = v20;
  uint64_t v112 = (uint64_t)sibling_protected;
  os_log_type_t v22 = (_DWORD *)v21;
  size_t v23 = *(unsigned int *)(a1 + 1336);
  unsigned int v100 = data_entry_store_13873(v16, 0, dword_1E6348DA8);
  *os_log_type_t v22 = 0;
  char v122 = 0;
  uint64_t v126 = 0;
  uint64_t v124 = v16;
  size_t v125 = v17;
  size_t v109 = v23;
  uint64_t v110 = v22;
  __int16 v127 = v22;
  long long v128 = v23;
  v121[0] = 2;
  v121[1] = &v124;
  int v24 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v25 = setThreadIdAndInfo(-1, (long long *)sMappingExceptionCallbacks, (uint64_t)v121, 0x40000000, v24);
  unsigned int v119 = HIDWORD(v25);
  unsigned int v120 = v25;
  unint64_t v118 = __PAIR64__(v26, v27);
  uint64_t v28 = *(void *)&threadData[18 * v25 + 2];
  uint64_t v29 = v28 + 320 * HIDWORD(v25);
  *(unsigned char *)(v29 + 216) = 0;
  int v30 = *(_DWORD *)(v29 + 312);
  unsigned int v31 = *(void (**)(void))(v29 + 224);
  if (v31) {
    v31(*(void *)(v28 + 320 * HIDWORD(v25) + 288));
  }
  unsigned int v117 = v120;
  unsigned int v116 = v119;
  unint64_t v115 = v118;
  if (_setjmp((int *)v29))
  {
    char v32 = (_DWORD *)(v29 + 312);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)char v145 = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v145, 2u);
    }
    *char v32 = v30;
    CIOnThreadCleanUpReset(v115);
    dropThreadId(v117, 1, v24);
    CICleanUpReset(v117, HIDWORD(v115));
    size_t v33 = v17;
    sibling_protected = (atomic_uint *)v112;
    size_t v34 = v23;
    goto LABEL_98;
  }
  int v103 = v30;
  int v105 = v24;
  uint32_t v111 = v19;
  uint64_t v50 = v100;
  if (!v102)
  {
    size_t v64 = v13;
    uint64_t v63 = v100;
    size_t v33 = v17;
    goto LABEL_94;
  }
  unsigned int v51 = 1;
  size_t v52 = v17;
  uint64_t v53 = v16;
  while (1)
  {
    uint64_t v16 = v53;
    if (*(_DWORD *)(a1 + 1388) <= v51)
    {
      long long v158 = 0u;
      long long v157 = 0u;
      long long v156 = 0u;
      long long v155 = 0u;
      long long v154 = 0u;
      long long v153 = 0u;
      long long v152 = 0u;
      long long v151 = 0u;
      long long v150 = 0u;
      long long v149 = 0u;
      long long v148 = 0u;
      long long v147 = 0u;
      long long v146 = 0u;
      memset(v145, 0, sizeof(v145));
      int v61 = *__error();
      unsigned int v62 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
      {
        os_log_t log = v62;
        int v66 = *(_DWORD *)(a1 + 1388);
        char v67 = fd_name(*(void *)(a1 + 1264), (char *)v145, 0x100uLL);
        *(_DWORD *)__s = 136316418;
        *(void *)&__s[4] = "_data_map32_get_offset_entry";
        *(_WORD *)&__s[12] = 1024;
        *(_DWORD *)&__s[14] = 424;
        *(_WORD *)&__s[18] = 1024;
        *(_DWORD *)&__s[20] = v51;
        *(_WORD *)&__s[24] = 1024;
        *(_DWORD *)&__s[26] = v66;
        *(_WORD *)&__s[30] = 2048;
        *(void *)&__s[32] = a1;
        *(_WORD *)&__s[40] = 2080;
        *(void *)&__s[42] = v67;
        _os_log_error_impl(&dword_1BD672000, log, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %d max %d %p %s", (uint8_t *)__s, 0x32u);
      }
      *__error() = v61;
      goto LABEL_58;
    }
    uint64_t v54 = *(void *)(a1 + 1344);
    if (v54)
    {
      uint64_t v55 = *(unsigned int *)(v54 + 4 * v51);
      if (v55 >= 2) {
        break;
      }
    }
LABEL_58:
    v110[v51] = 1;
LABEL_59:
    uint64_t v53 = v16;
    ++v51;
    uint64_t v63 = v50;
    size_t v64 = v13;
    size_t v33 = v52;
    if (v51 > v102) {
      goto LABEL_94;
    }
  }
  uint64_t v113 = 0;
  uint64_t v114 = 0;
  char v123 = 0;
  unsigned int v56 = *(_DWORD *)(a1 + 1320);
  if (v56 <= v55)
  {
    long long v158 = 0u;
    long long v157 = 0u;
    long long v156 = 0u;
    long long v155 = 0u;
    long long v154 = 0u;
    long long v153 = 0u;
    long long v152 = 0u;
    long long v151 = 0u;
    long long v150 = 0u;
    long long v149 = 0u;
    long long v148 = 0u;
    long long v147 = 0u;
    long long v146 = 0u;
    memset(v145, 0, sizeof(v145));
    int v99 = *__error();
    unsigned int v65 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
    {
      long long v98 = v65;
      uint64_t v80 = *(unsigned int *)(a1 + 1320);
      uint64_t v81 = fd_name(*(void *)(a1 + 1264), (char *)v145, 0x100uLL);
      *(_DWORD *)__s = 136316418;
      *(void *)&__s[4] = "_data_map32_get_data_entry";
      *(_WORD *)&__s[12] = 1024;
      *(_DWORD *)&__s[14] = 448;
      *(_WORD *)&__s[18] = 2048;
      *(void *)&__s[20] = v55;
      *(_WORD *)&__s[28] = 2048;
      *(void *)&__s[30] = v80;
      *(_WORD *)&__s[38] = 2048;
      *(void *)&__s[40] = a1;
      *(_WORD *)&char __s[48] = 2080;
      *(void *)&__s[50] = v81;
      _os_log_error_impl(&dword_1BD672000, v98, OS_LOG_TYPE_ERROR, "%s:%d: invalid data offset 0x%lx 0x%lx %p %s", (uint8_t *)__s, 0x3Au);
    }
    *__error() = v99;
    goto LABEL_58;
  }
  data_entry_restore_32(*(void *)(a1 + 1312), v55, v56, (uint64_t)&v113, &v123);
  if (v123)
  {
    size_t v101 = v52;
    uint64_t v168 = 0;
    long long v167 = 0u;
    long long v166 = 0u;
    long long v165 = 0u;
    long long v164 = 0u;
    long long v163 = 0u;
    long long v162 = 0u;
    long long v161 = 0u;
    long long v160 = 0u;
    uint64_t v57 = 0;
    memset(__s, 0, sizeof(__s));
    do
    {
      if (v55 + v57 >= (unint64_t)*(unsigned int *)(a1 + 1320)) {
        break;
      }
      size_t v58 = strlen(__s);
      sprintf(&__s[v58], "%d ", *(unsigned __int8 *)(*(void *)(a1 + 1312) + v55 + v57++));
    }
    while (v57 != 5);
    long long v158 = 0u;
    long long v157 = 0u;
    long long v156 = 0u;
    long long v155 = 0u;
    long long v154 = 0u;
    long long v153 = 0u;
    long long v152 = 0u;
    long long v151 = 0u;
    long long v150 = 0u;
    long long v149 = 0u;
    long long v148 = 0u;
    long long v147 = 0u;
    long long v146 = 0u;
    memset(v145, 0, sizeof(v145));
    int v59 = *__error();
    uint64_t v60 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    {
      __int16 v82 = fd_name(*(void *)(a1 + 1264), (char *)v145, 0x100uLL);
      uint64_t v83 = *(unsigned int *)(a1 + 1320);
      *(_DWORD *)long long buf = 136316674;
      long long v132 = "_data_map32_get_data_entry";
      __int16 v133 = 1024;
      int v134 = 444;
      __int16 v135 = 2080;
      long long v136 = v82;
      __int16 v137 = 2048;
      uint64_t v138 = v55;
      __int16 v139 = 2048;
      uint64_t v140 = v83;
      __int16 v141 = 2048;
      uint64_t v142 = v113;
      __int16 v143 = 2080;
      uint64_t v144 = __s;
      _os_log_error_impl(&dword_1BD672000, v60, OS_LOG_TYPE_ERROR, "%s:%d: data_entry_restore_32 failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s", buf, 0x44u);
    }
    goto LABEL_54;
  }
  if (v51 >= a3 && (*(void *)v106 <= (uint64_t)v51 || !CFBitVectorGetBitAtIndex(*(CFBitVectorRef *)(v106 + 16), v51)))
  {
    ++*(void *)(a5 + 8);
    if ((a4 & 2) == 0) {
      goto LABEL_58;
    }
    if ((a4 & 8) != 0)
    {
      if (gSILogLevels[0] < 5) {
        goto LABEL_58;
      }
      size_t v101 = v52;
      int v59 = *__error();
      long long v84 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_54;
      }
      uint64_t v85 = v114 + *(unsigned int *)(a1 + 1244);
      *(_DWORD *)char v145 = 67109890;
      *(_DWORD *)&v145[4] = v51;
      *(_WORD *)&v145[8] = 1024;
      *(_DWORD *)&v145[10] = v113;
      *(_WORD *)&v145[14] = 2080;
      *(void *)&v145[16] = v85;
      *(_WORD *)&v145[24] = 2048;
      *(void *)&v145[26] = a1;
      uint64_t v77 = v84;
      __int16 v78 = "Deleting id: %d size: %d %s from %p";
      uint32_t v79 = 34;
    }
    else
    {
      if (gSILogLevels[0] < 5) {
        goto LABEL_58;
      }
      size_t v101 = v52;
      int v59 = *__error();
      __int16 v76 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_54;
      }
      *(_DWORD *)char v145 = 67109632;
      *(_DWORD *)&v145[4] = v51;
      *(_WORD *)&v145[8] = 1024;
      *(_DWORD *)&v145[10] = v113;
      *(_WORD *)&v145[14] = 2048;
      *(void *)&v145[16] = a1;
      uint64_t v77 = v76;
      __int16 v78 = "Deleting id: %d size: %d from %p";
      uint32_t v79 = 24;
    }
    _os_log_impl(&dword_1BD672000, v77, OS_LOG_TYPE_DEFAULT, v78, v145, v79);
LABEL_54:
    *__error() = v59;
    size_t v52 = v101;
    goto LABEL_58;
  }
  unsigned int v68 = v50;
  v110[v51] = v50;
  if ((v113 & 0x3F80) != 0) {
    int v69 = 2;
  }
  else {
    int v69 = 1;
  }
  if ((v113 & 0x1FC000) != 0) {
    int v69 = 3;
  }
  if ((v113 & 0xFE00000) != 0) {
    int v69 = 4;
  }
  if (v113 >> 28) {
    int v70 = 5;
  }
  else {
    int v70 = v69;
  }
  unint64_t v71 = v50 + (v70 + v113) + 8;
  size_t v72 = v13;
  if (v71 >= v13)
  {
    off_t v73 = (v71 + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
    if (fd_truncate(v112, v73) == -1)
    {
      unsigned int v93 = *__error();
      if (v93) {
        uint64_t v91 = v93;
      }
      else {
        uint64_t v91 = 0xFFFFFFFFLL;
      }
      size_t v33 = v52;
      goto LABEL_101;
    }
    size_t v72 = v73;
    unsigned int v68 = v50;
  }
  size_t v13 = v72;
  if (v71 <= v52) {
    goto LABEL_83;
  }
  size_t v96 = v72;
  unsigned int v74 = v68;
  uint64_t v124 = -1;
  size_t v125 = 0;
  munmap((void *)v16, v52);
  uint64_t v75 = fd_mmap(v112);
  if (v75 != -1)
  {
    uint64_t v16 = v75;
    uint64_t v124 = v75;
    size_t v125 = (2 * v52);
    size_t v52 = v125;
    unsigned int v68 = v74;
    size_t v13 = v96;
LABEL_83:
    uint64_t v50 = data_entry_store_13873(v16, v68, (unsigned int *)&v113);
    goto LABEL_59;
  }
  int v94 = *__error();
  long long v95 = _SILogForLogForCategory(0);
  size_t v64 = v96;
  if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)char v145 = 136315394;
    *(void *)&v145[4] = "_data_map32_garbage_compact_collect";
    *(_WORD *)&v145[12] = 1024;
    *(_DWORD *)&v145[14] = 2751;
    _os_log_error_impl(&dword_1BD672000, v95, OS_LOG_TYPE_ERROR, "%s:%d: storage fd_mmap error", v145, 0x12u);
  }
  *__error() = v94;
  uint64_t v16 = -1;
  uint64_t v63 = v50;
  size_t v33 = v52;
LABEL_94:
  if (!*(void *)(a5 + 8))
  {
    uint64_t v91 = 0;
LABEL_101:
    uint64_t v92 = v91;
    uint64_t v39 = v16;
    __int16 v35 = v111;
    sibling_protected = (atomic_uint *)v112;
    size_t v40 = v109;
    uint64_t v38 = (uint64_t)v110;
    size_t v41 = v33;
    uint64_t v37 = v92;
    goto LABEL_31;
  }
  uint64_t v86 = v63;
  fd_system_status_stall_if_busy();
  msync((void *)v16, v64, 16);
  fd_system_status_stall_if_busy();
  msync(v110, v104, 16);
  sibling_protected = (atomic_uint *)v112;
  *(void *)(a5 + 32) = v112;
  *(void *)(a5 + 40) = v16;
  *(void *)(a5 + 48) = v111;
  *(void *)(a5 + 56) = v110;
  size_t v34 = v109;
  *(void *)(a5 + 64) = v109;
  *(void *)(a5 + 72) = v104;
  *(void *)(a5 + 80) = v33;
  *(void *)(a5 + 88) = v64;
  *(void *)(a5 + 96) = v86;
  *(_DWORD *)a5 = 842150450;
  char v122 = 1;
  uint64_t v87 = *(void *)&threadData[18 * v117 + 2];
  unsigned int v88 = v116;
  uint64_t v89 = v87 + 320 * v116;
  *(_DWORD *)(v89 + 312) = v103;
  long long v90 = *(void (**)(void))(v89 + 232);
  if (v90) {
    v90(*(void *)(v87 + 320 * v88 + 288));
  }
  dropThreadId(v117, 0, v105);
  unsigned int v19 = v111;
LABEL_98:
  uint64_t v39 = v16;
  __int16 v35 = v19;
  uint64_t v38 = (uint64_t)v110;
  size_t v40 = v34;
  size_t v41 = v33;
  uint64_t v48 = 0;
  uint64_t v37 = 0;
  if (!v122)
  {
LABEL_31:
    if ((unint64_t)(v39 + 1) >= 2)
    {
      munmap((void *)v39, v41);
      if (sibling_protected)
      {
LABEL_33:
        fd_release(sibling_protected);
        _fd_unlink_with_origin((uint64_t)sibling_protected, 0);
      }
    }
    else if (sibling_protected)
    {
      goto LABEL_33;
    }
    if (v38 != -1) {
      munmap((void *)v38, v40);
    }
    if (v35)
    {
      fd_release(v35);
      _fd_unlink_with_origin((uint64_t)v35, 0);
    }
    return v37;
  }
  return v48;
}

uint64_t _rename_prefix_suffix(int a1, const char *a2, const char *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  bzero(v8, 0x400uLL);
  bzero(__str, 0x400uLL);
  snprintf(__str, 0x400uLL, "%s%s%s", "", a2, a3);
  snprintf(v8, 0x400uLL, "%s%s%s", "tmp.", a2, a3);
  return renameat(a1, v8, a1, __str);
}

uint64_t _Xmach_exception_raise_identity_protected(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) != 0)
  {
    int v5 = *(_DWORD *)(a1 + 24);
    uint64_t result = 4294966992;
    if (v5 == 1)
    {
      unsigned int v6 = *(_DWORD *)(a1 + 4);
      if (v6 >= 0x40 && v6 <= 0x50)
      {
        if (*(unsigned __int16 *)(a1 + 38) << 16 == 1114112)
        {
          unsigned int v7 = *(_DWORD *)(a1 + 60);
          if (v7 <= 2 && v7 <= (v6 - 64) >> 3 && v6 == 8 * v7 + 64) {
            uint64_t result = ContentIndex_catch_mach_exception_raise_identity_protected(*(void *)(a1 + 48), *(_DWORD *)(a1 + 56), *(thread_act_t **)(a1 + 72));
          }
        }
        else
        {
          uint64_t result = 4294966996;
        }
      }
    }
  }
  else
  {
    uint64_t result = 4294966992;
  }
  *(_DWORD *)(a2 + 32) = result;
  *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *MEMORY[0x1E4F14068];
  return result;
}

void _Xmach_exception_raise_state_identity(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) == 0)
  {
LABEL_2:
    int v3 = -304;
    goto LABEL_3;
  }
  int v3 = -304;
  if (*(_DWORD *)(a1 + 24) == 2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 4);
    if (v4 >= 0x4C && v4 <= 0x149C)
    {
      if (*(unsigned __int16 *)(a1 + 38) << 16 != 1114112 || *(unsigned __int16 *)(a1 + 50) << 16 != 1114112)
      {
        int v3 = -300;
        goto LABEL_3;
      }
      unsigned int v6 = *(_DWORD *)(a1 + 64);
      if (v6 > 2) {
        goto LABEL_2;
      }
      int v3 = -304;
      if (v6 <= (v4 - 76) >> 3)
      {
        unsigned int v7 = 8 * v6;
        if (v4 >= 8 * v6 + 76)
        {
          unsigned int v8 = *(_DWORD *)(a1 + v7 + 72);
          if (v8 <= 0x510)
          {
            unsigned int v9 = v4 - v7;
            if (v8 <= (v9 - 76) >> 2 && v9 == 4 * v8 + 76)
            {
              *(_DWORD *)(a2 + 40) = 1296;
              ContentIndex_catch_mach_exception_raise_state_identity();
              int v3 = 46;
              goto LABEL_3;
            }
          }
          goto LABEL_2;
        }
      }
    }
  }
LABEL_3:
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *MEMORY[0x1E4F14068];
}

void _Xmach_exception_raise_state(_DWORD *a1, uint64_t a2)
{
  if ((*a1 & 0x80000000) != 0) {
    goto LABEL_17;
  }
  unsigned int v3 = a1[1];
  BOOL v4 = v3 < 0x30 || v3 > 0x1480;
  if (v4) {
    goto LABEL_17;
  }
  unsigned int v5 = a1[9];
  if (v5 > 2) {
    goto LABEL_17;
  }
  unsigned int v6 = 2 * v5;
  BOOL v7 = v5 <= (v3 - 48) >> 3 && v3 >= 8 * v5 + 48;
  if (v7
    && (unsigned int v8 = a1[v6 + 11], v8 <= 0x510)
    && ((unsigned int v9 = v3 - v6 * 4, v4 = v8 > (v9 - 48) >> 2, v10 = 4 * v8 + 48, !v4) ? (v11 = v9 == v10) : (v11 = 0), v11))
  {
    *(_DWORD *)(a2 + 40) = 1296;
    ContentIndex_catch_mach_exception_raise_state();
    int v12 = 46;
  }
  else
  {
LABEL_17:
    int v12 = -304;
  }
  *(_DWORD *)(a2 + 32) = v12;
  *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *MEMORY[0x1E4F14068];
}

void _Xmach_exception_raise(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)a1 & 0x80000000) == 0)
  {
LABEL_2:
    int v3 = -304;
    goto LABEL_3;
  }
  int v3 = -304;
  if (*(_DWORD *)(a1 + 24) == 2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 4);
    if (v4 >= 0x44 && v4 <= 0x54)
    {
      if (*(unsigned __int16 *)(a1 + 38) << 16 != 1114112 || *(unsigned __int16 *)(a1 + 50) << 16 != 1114112)
      {
        int v3 = -300;
        goto LABEL_3;
      }
      unsigned int v5 = *(_DWORD *)(a1 + 64);
      if (v5 <= 2 && v5 <= (v4 - 68) >> 3 && v4 == 8 * v5 + 68)
      {
        ContentIndex_catch_mach_exception_raise();
        int v3 = 46;
        goto LABEL_3;
      }
      goto LABEL_2;
    }
  }
LABEL_3:
  *(_DWORD *)(a2 + 32) = v3;
  *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *MEMORY[0x1E4F14068];
}

uint64_t (*mach_exc_server_routine(uint64_t a1))()
{
  int v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 2409) >= 0xFFFFFFFC) {
    return ContentIndex_catch_mach_exc_subsystem[5 * (v1 - 2405) + 5];
  }
  else {
    return 0;
  }
}

_DWORD *mach_exc_server(_DWORD *result, uint64_t a2)
{
  int v2 = result[2];
  *(_DWORD *)a2 = *result & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  int v3 = result[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  int v4 = result[5];
  if ((v4 - 2409) >= 0xFFFFFFFC)
  {
    unsigned int v5 = ContentIndex_catch_mach_exc_subsystem[5 * (v4 - 2405) + 5];
    if (v5) {
      return (_DWORD *)v5();
    }
  }
  *(void *)(a2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *MEMORY[0x1E4F14068];
  *(_DWORD *)(a2 + 32) = -303;
  return result;
}

uint64_t sqlite3BtreeOpen(uint64_t a1)
{
  int v1 = (uint64_t **)MEMORY[0x1F4188790](a1);
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  int v2 = (char *)malloc_type_malloc(0x38uLL, 0xD00A7D76uLL);
  int v3 = (uint64_t *)v2;
  if (v2)
  {
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
    *(_OWORD *)(v2 + 8) = 0u;
    *(void *)int v2 = 0;
    long long v44 = 0u;
    long long v45 = 0u;
    *(_OWORD *)long long v46 = 0u;
    if (sqlite3_malloc_failed)
    {
      uint64_t v4 = 7;
LABEL_27:
      free(v3);
      int v3 = 0;
      goto LABEL_28;
    }
    unsigned int v47 = 0;
    if (getcwd(v48, 0x1388uLL)
      && (unsigned int v5 = getcwd(v48, 0x1388uLL),
          sqlite3SetString((uint64_t)&v47, v5, v6, v7, v8, v9, v10, v11, "/", (uint64_t)"psid.db"),
          (size_t v17 = v47) != 0))
    {
      v46[2] = -1;
      int v18 = x_openat(-2, v47, 536871426, v12, v13, v14, v15, v16, 0x1A4u);
      v46[0] = v18;
      if (v18 < 0)
      {
        if (*__error() == 21 || (int v18 = x_openat(-2, v17, 0, v20, v21, v22, v23, v24, v43), v46[0] = v18, v18 < 0))
        {
          uint64_t v4 = 14;
          goto LABEL_24;
        }
        char v19 = 1;
      }
      else
      {
        char v19 = 0;
      }
      if (findLockInfo(v18, (void *)&v45 + 1, &v45))
      {
        close(v46[0]);
        uint64_t v4 = 7;
LABEL_24:
        sqlite3OsClose((uint64_t)&v44);
        free(v17);
LABEL_25:
        if (*v3) {
          sqlite3pager_close(*v3);
        }
        goto LABEL_27;
      }
      LOWORD(v46[1]) = 256;
      size_t v25 = strlen(v17);
      unsigned int v26 = (char *)sqlite3Malloc(3 * (int)v25 + 16830);
      if (v26)
      {
        unsigned int v27 = v26;
        uint64_t v28 = v26 + 282;
        uint64_t v29 = v26 + 16800;
        uint64_t v30 = (v25 << 32) + 0x100000000;
        unsigned int v31 = &v29[v30 >> 32];
        *(void *)unsigned int v27 = v29;
        *((void *)v27 + 1) = &v31[v30 >> 32];
        *((void *)v27 + 2) = v31;
        strcpy(v29, v17);
        strcpy(v31, v17);
        uint64_t v32 = v25;
        while ((int)v32 >= 1)
        {
          uint64_t v33 = *((void *)v27 + 2);
          uint64_t v34 = v32 - 1;
          int v35 = *(unsigned __int8 *)(v33 + v32-- - 1);
          if (v35 == 47)
          {
            *(unsigned char *)(v33 + v34) = 0;
            break;
          }
        }
        strcpy(*((char **)v27 + 1), v17);
        free(v17);
        strcpy((char *)(*((void *)v27 + 1) + (int)v25), "-journal");
        long long v36 = v45;
        *(_OWORD *)(v27 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v44;
        *(_OWORD *)(v27 + 56) = *(_OWORD *)v46;
        *(_OWORD *)(v27 + 40) = v36;
        *((void *)v27 + 3) = v27;
        v27[280] = 0;
        *uint64_t v28 = 0;
        *((_DWORD *)v27 + 42) = -1;
        *((_DWORD *)v27 + 44) = 0;
        *((void *)v27 + 23) = 0;
        *((_OWORD *)v27 + 14) = xmmword_1BDA82790;
        *((_DWORD *)v27 + 60) = 100;
        v27[291] = 0;
        v27[296] = 0;
        v27[292] = v19;
        v27[293] = 0;
        *(_DWORD *)((char *)v28 + 5) = 1;
        *((void *)v27 + 43) = 0;
        *((void *)v27 + 44) = 0;
        *((_DWORD *)v27 + 51) = 136;
        *((_DWORD *)v27 + 102) = 512;
        *((void *)v27 + 41) = 0;
        *((void *)v27 + 42) = 0;
        bzero(v27 + 416, 0x4000uLL);
        *int v3 = (uint64_t)v27;
        *((void *)v27 + 26) = pageDestructor;
        *((void *)v27 + 27) = pageReinit;
        v3[1] = 0;
        v3[2] = 0;
        *((unsigned char *)v3 + 26) = v27[292];
        *(_OWORD *)uint64_t v48 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        int v54 = 0;
        if (v27[296])
        {
          *((_WORD *)v3 + 16) = 0;
        }
        else
        {
          lseek(*((_DWORD *)v27 + 14), 0, 0);
          read(*((_DWORD *)v27 + 14), v48, 0x64uLL);
          unsigned int v38 = bswap32((unsigned __int16)v49);
          unsigned int v39 = __rev16((unsigned __int16)v49);
          *((_WORD *)v3 + 16) = v39;
          if (HIWORD(v38) - 8193 > 0xFFFFE1FE)
          {
            __int16 v41 = BYTE4(v49);
            *((unsigned char *)v3 + 27) = BYTE5(v49);
            *((_WORD *)v3 + 14) = WORD3(v49);
            *((unsigned char *)v3 + 30) = 1;
            BOOL v40 = bswap32(DWORD1(v51)) != 0;
            goto LABEL_32;
          }
        }
        BOOL v40 = 0;
        __int16 v41 = 0;
        unsigned int v39 = 1024;
        *((_WORD *)v3 + 16) = 1024;
        *(_WORD *)((char *)v3 + 27) = 8256;
        *((unsigned char *)v3 + 29) = 32;
LABEL_32:
        uint64_t v4 = 0;
        *((unsigned char *)v3 + 31) = v40;
        *((_WORD *)v3 + 18) = v39 - v41;
        *((_WORD *)v3 + 17) = (v39 + 7) & 0xFFF8;
        uint64_t v42 = *v3;
        *(_DWORD *)(v42 + 2++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v39;
        *(_DWORD *)(v42 + 228) = (v39 + 7) & 0x1FFF8;
        goto LABEL_28;
      }
      sqlite3OsClose((uint64_t)&v44);
      free(v17);
    }
    else
    {
      sqlite3OsClose((uint64_t)&v44);
    }
    uint64_t v4 = 7;
    goto LABEL_25;
  }
  ++sqlite3_malloc_failed;
  uint64_t v4 = 7;
LABEL_28:
  void *v1 = v3;
  return v4;
}

uint64_t pageReinit(uint64_t a1, int a2)
{
  uint64_t result = a1 + ((a2 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (*(unsigned char *)result)
  {
    *(unsigned char *)uint64_t result = 0;
    return initPage(result, *(void *)(result + 128));
  }
  return result;
}

uint64_t initPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 104);
  uint64_t v5 = *(void *)(a1 + 128);
  if (v5 == a2)
  {
    if (*(unsigned char *)a1) {
      return 0;
    }
  }
  else if (v5 || *(unsigned char *)a1)
  {
    return 11;
  }
  if (a2 && !v5)
  {
    *(void *)(a1 + 128) = a2;
    uint64_t v7 = *(void *)(a2 + 112);
    if (*(_WORD *)(v7 - 10)) {
      ++*(_WORD *)(v7 - 10);
    }
    else {
      _page_ref((uint64_t *)(v7 - 88));
    }
  }
  uint64_t v8 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 112);
  decodeFlags(a1, *(unsigned __int8 *)(v9 + v8));
  *(_WORD *)(a1 + 1) = 0;
  int v10 = *(unsigned __int16 *)(v4 + 36);
  int v11 = v8 - 4 * *(unsigned __int8 *)(a1 + 4) + 12;
  *(_WORD *)(a1 + 14) = v8 - 4 * *(unsigned __int8 *)(a1 + 4) + 12;
  unsigned int v12 = *(unsigned __int16 *)(v9 + v8 + 5);
  signed int v13 = __rev16(*(unsigned __int16 *)(v9 + v8 + 3));
  *(_WORD *)(a1 + 20) = v13;
  unint64_t v14 = 1431655766 * (*(unsigned __int16 *)(v4 + 32) - 8);
  if (v13 > (int)(HIDWORD(v14) + (v14 >> 63)) || a2 && !v13 && *(_DWORD *)(a2 + 120) != 1) {
    return 11;
  }
  unsigned int v15 = __rev16(v12);
  unsigned int v16 = __rev16(*(unsigned __int16 *)(v8 + v9 + 1));
  int v17 = v15 - (v11 + 2 * v13) + *(unsigned __int8 *)(v8 + v9 + 7);
  if (v16)
  {
    if ((int)v16 > v10 - 4) {
      return 11;
    }
    uint64_t result = 11;
    while (1)
    {
      int v18 = (unsigned __int16 *)(v9 + v16);
      unsigned int v19 = __rev16(*v18);
      unsigned int v20 = __rev16(v18[1]);
      if (!v19) {
        break;
      }
      v17 += v20;
      BOOL v21 = v19 > v16 + v20 + 3 && (int)v19 <= v10 - 4;
      unsigned int v16 = v19;
      if (!v21) {
        return result;
      }
    }
    v17 += v20;
  }
  *(_WORD *)(a1 + 18) = v17;
  if (v17 >= v10) {
    return 11;
  }
  uint64_t result = 0;
  *(unsigned char *)a1 = 1;
  return result;
}

uint64_t decodeFlags(uint64_t result, unsigned int a2)
{
  *(unsigned char *)(result + 3) = (a2 & 5) != 0;
  *(unsigned char *)(result + 5) = (a2 & 2) != 0;
  *(unsigned char *)(result + 4) = (a2 & 8) != 0;
  *(unsigned char *)(result + 9) = (4 * ((a2 & 8) != 0)) ^ 4;
  uint64_t v2 = *(void *)(result + 104);
  uint64_t v3 = 48;
  uint64_t v4 = 52;
  if ((a2 & 4) == 0) {
    uint64_t v4 = 44;
  }
  int v5 = *(_DWORD *)(v2 + v4);
  if ((a2 & 4) == 0) {
    uint64_t v3 = 40;
  }
  int v6 = *(_DWORD *)(v2 + v3);
  *(unsigned char *)(result + 6) = (a2 & 4) >> 2;
  *(_WORD *)(result + 10) = v6;
  *(_WORD *)(result + 12) = v5;
  BOOL v8 = (a2 & 4) == 0 || ((a2 >> 3) & 1) != 0;
  BOOL v9 = ((a2 >> 1) & 1) == 0 && v8;
  *(unsigned char *)(result + 7) = v9;
  return result;
}

uint64_t pageDestructor(uint64_t result, int a2)
{
  uint64_t v2 = result + (int)((a2 + 7) & 0xFFFFFFF8);
  uint64_t v3 = *(void *)(v2 + 128);
  if (v3)
  {
    *(void *)(v2 + 128) = 0;
    uint64_t result = sqlite3pager_unref(*(void *)(v3 + 112));
  }
  *(unsigned char *)uint64_t v2 = 0;
  return result;
}

void sqlite3BtreeClose(uint64_t *a1)
{
  for (unint64_t i = (uint64_t *)a1[1]; i; unint64_t i = (uint64_t *)a1[1])
    sqlite3BtreeCloseCursor(i);
  sqlite3pager_close(*a1);
  free(a1);
}

void sqlite3BtreeCloseCursor(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v4 = *a1;
  if (v2)
  {
    *(void *)(v2 + 8) = v3;
    uint64_t v3 = a1[1];
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  *(void *)(v4 + 8) = v3;
  if (v3) {
LABEL_3:
  }
    *(void *)(v3 + 16) = v2;
LABEL_4:
  uint64_t v5 = a1[6];
  if (v5) {
    sqlite3pager_unref(*(void *)(v5 + 112));
  }
  unlockBtreeIfUnused(v4);
  free(a1);
}

uint64_t unlockBtreeIfUnused(uint64_t result)
{
  if (!*(unsigned char *)(result + 24))
  {
    uint64_t v1 = result;
    if (!*(void *)(result + 8))
    {
      uint64_t v2 = *(void *)(result + 16);
      if (v2)
      {
        uint64_t v3 = *(void *)(v2 + 112);
        if (!v3)
        {
          uint64_t v3 = v2 - *(unsigned __int16 *)(v1 + 34);
          *(void *)(v2 + 104) = v1;
          *(void *)(v2 + 112) = v3;
          *(_DWORD *)(v2 + 120) = 1;
        }
        uint64_t result = sqlite3pager_unref(v3);
        *(void *)(v1 + 16) = 0;
        *(unsigned char *)(v1 + 25) = 0;
      }
    }
  }
  return result;
}

uint64_t sqlite3BtreeBeginTrans(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24) != 2)
  {
    if (*(unsigned char *)(a1 + 26)) {
      return 8;
    }
    uint64_t v3 = *(void *)(a1 + 16);
    if (!v3)
    {
      uint64_t v1 = lockBtree(a1);
      if (v1) {
        goto LABEL_12;
      }
      uint64_t v3 = *(void *)(a1 + 16);
    }
    uint64_t v1 = sqlite3pager_begin(*(void *)(*(void *)(v3 + 112) - 88));
    if (!v1)
    {
      if ((int)sqlite3pager_pagecount(*(void *)a1) > 0)
      {
LABEL_8:
        uint64_t v1 = 0;
        *(_WORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 2;
        return v1;
      }
      uint64_t v4 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(v4 + 112);
      uint64_t v1 = sqlite3pager_write((void *)v5);
      if (!v1)
      {
        strcpy((char *)v5, "SQLite format 3");
        __int16 v7 = *(_WORD *)(a1 + 32);
        *(unsigned char *)(v5 + 16) = HIBYTE(v7);
        *(unsigned char *)(v5 + 17) = v7;
        *(_WORD *)(v5 + 18) = 257;
        *(unsigned char *)(v5 + 20) = *(unsigned char *)(a1 + 32) - *(unsigned char *)(a1 + 36);
        *(unsigned char *)(v5 + 21) = *(unsigned char *)(a1 + 27);
        *(unsigned char *)(v5 + 22) = *(unsigned char *)(a1 + 28);
        *(unsigned char *)(v5 + 23) = *(unsigned char *)(a1 + 29);
        *(_OWORD *)(v5 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0u;
        *(_OWORD *)(v5 + 40) = 0u;
        *(_OWORD *)(v5 + 56) = 0u;
        *(_OWORD *)(v5 + 72) = 0u;
        *(_OWORD *)(v5 + 84) = 0u;
        zeroPage(v4, 0xDu);
        *(unsigned char *)(a1 + 30) = 1;
        if (*(unsigned char *)(a1 + 31)) {
          *(_DWORD *)(v5 + 52) = 0x1000000;
        }
        goto LABEL_8;
      }
    }
LABEL_12:
    unlockBtreeIfUnused(a1);
    return v1;
  }
  return 0;
}

uint64_t lockBtree(uint64_t a1)
{
  if (*(void *)(a1 + 16)) {
    return 0;
  }
  uint64_t v14 = 0;
  uint64_t result = getPage(a1, 1, &v14);
  if (!result)
  {
    if ((int)sqlite3pager_pagecount(*(void *)a1) <= 0)
    {
      unsigned __int16 v7 = *(_WORD *)(a1 + 36);
      int v8 = *(unsigned __int8 *)(a1 + 27);
      int v9 = *(unsigned __int8 *)(a1 + 28);
      int v10 = *(unsigned __int8 *)(a1 + 29);
      uint64_t v3 = v14;
    }
    else
    {
      uint64_t v3 = v14;
      uint64_t v4 = *(void *)(v14 + 112);
      if (*(void *)v4 != 0x66206574694C5153 || *(void *)(v4 + 8) != 0x332074616D726FLL) {
        goto LABEL_20;
      }
      if (*(unsigned __int8 *)(v4 + 18) > 1u) {
        goto LABEL_20;
      }
      if (*(unsigned __int8 *)(v4 + 19) > 1u) {
        goto LABEL_20;
      }
      __int16 v6 = __rev16(*(unsigned __int16 *)(v4 + 16));
      *(_WORD *)(a1 + 32) = v6;
      unsigned __int16 v7 = v6 - *(unsigned __int8 *)(v4 + 20);
      *(_WORD *)(a1 + 36) = v7;
      if ((v7 & 0xFFFCu) < 0x1F4) {
        goto LABEL_20;
      }
      *(_WORD *)(a1 + 34) = (v6 + 7) & 0xFFF8;
      int v8 = *(unsigned __int8 *)(v4 + 21);
      *(unsigned char *)(a1 + 27) = v8;
      int v9 = *(unsigned __int8 *)(v4 + 22);
      *(unsigned char *)(a1 + 28) = v9;
      int v10 = *(unsigned __int8 *)(v4 + 23);
      *(unsigned char *)(a1 + 29) = v10;
      *(unsigned char *)(a1 + 31) = bswap32(*(_DWORD *)(v4 + 52)) != 0;
    }
    int v11 = v7 - 12;
    int v12 = v11 * v8;
    int v13 = v11 * v9 / 255;
    *(_DWORD *)(a1 + 40) = v12 / 255 - 23;
    *(_DWORD *)(a1 + 44) = v13 - 23;
    *(_DWORD *)(a1 + 48) = v7 - 35;
    *(_DWORD *)(a1 + 52) = v11 * v10 / 255 - 23;
    if (v12 >= 5865 && v13 <= v12 / 255)
    {
      uint64_t result = 0;
LABEL_22:
      *(void *)(a1 + 16) = v3;
      return result;
    }
    if (!v3)
    {
LABEL_21:
      uint64_t result = 26;
      goto LABEL_22;
    }
    uint64_t v4 = *(void *)(v3 + 112);
LABEL_20:
    sqlite3pager_unref(v4);
    uint64_t v3 = 0;
    goto LABEL_21;
  }
  return result;
}

uint64_t zeroPage(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 104);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 8);
  __int16 v6 = (unsigned char *)(*(void *)(a1 + 112) + v5);
  bzero(v6, *(unsigned __int16 *)(v4 + 36) - v5);
  *__int16 v6 = a2;
  *(_DWORD *)(v6 + 1) = 0;
  v6[7] = 0;
  *(_WORD *)(v6 + 5) = bswap32(*(unsigned __int16 *)(v4 + 36)) >> 16;
  *(_WORD *)(a1 + 18) = *(_WORD *)(v4 + 36) - (((a2 >> 1) & 4 ^ 0xC) + v5);
  uint64_t result = decodeFlags(a1, a2);
  *(unsigned char *)(a1 + 8) = v5;
  *(_WORD *)(a1 + 14) = ((a2 >> 1) & 4 ^ 0xC) + v5;
  *(unsigned char *)(a1 + 2) = 0;
  *(_WORD *)(a1 + 20) = 0;
  *(_WORD *)a1 = 1;
  return result;
}

uint64_t getPage(uint64_t a1, int a2, void *a3)
{
  uint64_t v10 = 0;
  uint64_t result = sqlite3pager_get(*(void *)a1, a2, &v10);
  if (!result)
  {
    uint64_t v7 = v10;
    uint64_t v8 = v10 + *(unsigned __int16 *)(a1 + 34);
    *(void *)(v8 + 104) = a1;
    *(void *)(v8 + 112) = v7;
    *(_DWORD *)(v8 + 120) = a2;
    if (a2 == 1) {
      char v9 = 100;
    }
    else {
      char v9 = 0;
    }
    *(unsigned char *)(v8 + 8) = v9;
    *a3 = v8;
  }
  return result;
}

uint64_t sqlite3BtreeCommit(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24) == 2)
  {
    uint64_t v2 = *(void *)a1;
    int v3 = *(unsigned __int8 *)(*(void *)a1 + 290);
    if (*(unsigned char *)(*(void *)a1 + 290))
    {
      if (v3 == 1)
      {
        unsigned int v4 = sqlite3pager_rollback(*(void *)a1);
        if (v4) {
          uint64_t v5 = v4;
        }
        else {
          uint64_t v5 = 13;
        }
      }
      else
      {
        unsigned int v6 = (v3 << 29 >> 31) & 0xF;
        if ((v3 & 0x10) != 0) {
          unsigned int v6 = 10;
        }
        if (v3) {
          unsigned int v6 = 13;
        }
        if ((v3 & 2) != 0) {
          unsigned int v6 = 7;
        }
        if ((v3 & 8) != 0) {
          uint64_t v5 = 11;
        }
        else {
          uint64_t v5 = v6;
        }
      }
    }
    else if (*(unsigned __int8 *)(v2 + 289) >= 2u)
    {
      if (*(unsigned char *)(v2 + 296))
      {
        uint64_t v7 = *(void *)(v2 + 360);
        if (v7)
        {
          uint64_t v8 = 0;
          do
          {
            if (*(unsigned char *)(v7 + 74))
            {
              *(void *)(v7 + 80) = v8;
              uint64_t v8 = v7;
            }
            uint64_t v7 = *(void *)(v7 + 48);
          }
          while (v7);
          for (; v8; uint64_t v8 = *(void *)(v8 + 80))
          {
            uint64_t v9 = v8 + *(int *)(v2 + 204) + (uint64_t)*(int *)(v2 + 228) + 88;
            if (*(void *)v9) {
              free(*(void **)v9);
            }
            uint64_t v10 = *(void **)(v9 + 8);
            if (v10) {
              free(v10);
            }
            *(void *)uint64_t v9 = 0;
            *(void *)(v9 + 8) = 0;
            *(void *)(v8 + 56) = 0;
            *(void *)(v8 + 64) = 0;
            *(_DWORD *)(v8 + 71) = 0;
          }
        }
        uint64_t v5 = 0;
        *(void *)(v2 + 368) = 0;
        *(unsigned char *)(v2 + 289) = 1;
      }
      else if (*(unsigned char *)(v2 + 294) && (uint64_t v11 = sqlite3pager_sync(*(void *)a1, 0), v11))
      {
        uint64_t v5 = v11;
        sqlite3pager_rollback(v2);
      }
      else
      {
        uint64_t v5 = pager_unwritelock(v2);
        *(_DWORD *)(v2 + 168) = -1;
      }
    }
    else
    {
      uint64_t v5 = 1;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  *(_WORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  unlockBtreeIfUnused(a1);
  return v5;
}

uint64_t sqlite3BtreeCursor(uint64_t a1, int a2, int a3, uint64_t (*a4)(int a1, int a2, void *__s1, int a4, void *__s2), uint64_t **a5)
{
  char v7 = a3;
  int v8 = a2;
  *a5 = 0;
  if (a3)
  {
    if (*(unsigned char *)(a1 + 26)) {
      return 8;
    }
    if (checkReadLocks(*(void *)(a1 + 8), a2, 0)) {
      return 6;
    }
  }
  if (*(void *)(a1 + 16) || (uint64_t v10 = lockBtree(a1), !v10))
  {
    uint64_t v11 = (uint64_t *)malloc_type_malloc(0x68uLL, 0xA2076A49uLL);
    if (!v11)
    {
      ++sqlite3_malloc_failed;
      uint64_t v10 = 7;
LABEL_25:
      unlockBtreeIfUnused(a1);
      return v10;
    }
    int v12 = v11;
    *((_DWORD *)v11 + 10) = v8;
    if (v8 == 1)
    {
      if (!sqlite3pager_pagecount(*(void *)a1))
      {
        uint64_t v10 = 16;
LABEL_24:
        free(v12);
        goto LABEL_25;
      }
      int v8 = *((_DWORD *)v12 + 10);
    }
    v12[6] = 0;
    int v13 = v12 + 6;
    uint64_t inited = getAndInitPage(a1, v8, v12 + 6, 0);
    if (inited)
    {
      uint64_t v10 = inited;
      if (*v13) {
        sqlite3pager_unref(*(void *)(*v13 + 112));
      }
      goto LABEL_24;
    }
    if (a4) {
      unsigned int v15 = a4;
    }
    else {
      unsigned int v15 = dfltCompare;
    }
    void v12[3] = (uint64_t)v15;
    v12[4] = 0;
    *((unsigned char *)v12 + 96) = v7;
    *((_DWORD *)v12 + 14) = 0;
    *((_OWORD *)v12 + 4) = 0u;
    *((_OWORD *)v12 + 5) = 0u;
    uint64_t v16 = *(void *)(a1 + 8);
    *int v12 = a1;
    v12[1] = v16;
    if (v16) {
      *(void *)(v16 + 16) = v12;
    }
    uint64_t v10 = 0;
    v12[2] = 0;
    *(void *)(a1 + 8) = v12;
    *((unsigned char *)v12 + 97) = 0;
    *a5 = v12;
  }
  return v10;
}

uint64_t checkReadLocks(uint64_t result, int a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = result;
    while (1)
    {
      if (v5 != a3 && *(_DWORD *)(v5 + 40) == a2)
      {
        if (!*(unsigned char *)(v5 + 96)) {
          return 6;
        }
        if (*(_DWORD *)(*(void *)(v5 + 48) + 120) != a2) {
          moveToRoot(v5);
        }
      }
      uint64_t v5 = *(void *)(v5 + 8);
      if (!v5) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t getAndInitPage(uint64_t a1, int a2, uint64_t *a3, uint64_t a4)
{
  if (!a2) {
    return 11;
  }
  uint64_t result = getPage(a1, a2, a3);
  if (!result)
  {
    uint64_t v7 = *a3;
    if (*(unsigned char *)*a3)
    {
      return 0;
    }
    else
    {
      return initPage(v7, a4);
    }
  }
  return result;
}

uint64_t dfltCompare(int a1, int a2, void *__s1, int a4, void *__s2)
{
  unsigned int v5 = a2 - a4;
  if (a2 >= a4) {
    int v6 = a4;
  }
  else {
    int v6 = a2;
  }
  LODWORD(result) = memcmp(__s1, __s2, v6);
  if (result) {
    return result;
  }
  else {
    return v5;
  }
}

uint64_t moveToRoot(uint64_t a1)
{
  uint64_t v8 = 0;
  uint64_t result = getAndInitPage(*(void *)a1, *(_DWORD *)(a1 + 40), &v8, 0);
  if (!result)
  {
    uint64_t v4 = *(void *)(a1 + 48);
    if (v4) {
      sqlite3pager_unref(*(void *)(v4 + 112));
    }
    uint64_t v5 = v8;
    *(void *)(a1 + 48) = v8;
    *(_DWORD *)(a1 + 56) = 0;
    *(_WORD *)(a1 + 90) = 0;
    int v6 = *(unsigned __int16 *)(v5 + 20);
    if (!*(_WORD *)(v5 + 20))
    {
      if (!*(unsigned char *)(v5 + 4))
      {
        if (*(_DWORD *)(v5 + 120) == 1
          && (int v7 = bswap32(*(_DWORD *)(*(unsigned __int8 *)(v5 + 8) + *(void *)(v5 + 112) + 8))) != 0)
        {
          *(unsigned char *)(a1 + 97) = 1;
          uint64_t result = moveToChild(a1, v7);
          int v6 = *(unsigned __int16 *)(*(void *)(a1 + 48) + 20);
        }
        else
        {
          int v6 = 0;
          uint64_t result = 11;
        }
        goto LABEL_9;
      }
      int v6 = 0;
    }
    uint64_t result = 0;
LABEL_9:
    BOOL v3 = v6 != 0;
    goto LABEL_10;
  }
  BOOL v3 = 0;
LABEL_10:
  *(unsigned char *)(a1 + 97) = v3;
  return result;
}

uint64_t moveToChild(uint64_t a1, int a2)
{
  uint64_t v6 = 0;
  uint64_t result = getAndInitPage(*(void *)a1, a2, &v6, *(void *)(a1 + 48));
  if (!result)
  {
    uint64_t v4 = v6;
    *(_WORD *)(v6 + 16) = *(_DWORD *)(a1 + 56);
    uint64_t v5 = *(void *)(a1 + 48);
    *(unsigned char *)(v5 + 1) = 0;
    sqlite3pager_unref(*(void *)(v5 + 112));
    *(void *)(a1 + 48) = v4;
    *(_DWORD *)(a1 + 56) = 0;
    *(_WORD *)(a1 + 90) = 0;
    if (*(_WORD *)(v4 + 20)) {
      return 0;
    }
    else {
      return 11;
    }
  }
  return result;
}

uint64_t getCellInfo(uint64_t result)
{
  if (!*(_WORD *)(result + 90)) {
    return parseCellPtr(*(void *)(result + 48), *(void *)(*(void *)(result + 48) + 112)+ __rev16(*(unsigned __int16 *)(*(void *)(*(void *)(result + 48) + 112)+ *(unsigned __int16 *)(*(void *)(result + 48) + 14)+ 2 * *(int *)(result + 56))), result + 64);
  }
  return result;
}

uint64_t parseCellPtr(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = a2;
  int v3 = *(unsigned __int8 *)(result + 9);
  int v4 = *(unsigned __int8 *)(result + 7);
  if (*(unsigned char *)(result + 7))
  {
    uint64_t v5 = (char *)(a2 + *(unsigned __int8 *)(result + 9));
    int v4 = *v5;
    if (*v5 < 0)
    {
      int v7 = v4 & 0x7F;
      int v8 = v5[1];
      int v9 = v7 << 7;
      if (v5[1] < 0)
      {
        int v4 = v9 | v8 & 0x7F;
        uint64_t v6 = 2;
        do
        {
          unint64_t v10 = v6;
          int v11 = v5[v6++];
          int v4 = v11 & 0x7F | (v4 << 7);
        }
        while (v10 <= 7 && v11 < 0);
      }
      else
      {
        int v4 = v9 | v8;
        LODWORD(v6) = 2;
      }
    }
    else
    {
      LODWORD(v6) = 1;
    }
    v3 += v6;
  }
  int v12 = (unsigned __int8 *)(a2 + v3);
  uint64_t v13 = *v12;
  if ((char)*v12 < 0)
  {
    int v15 = v13 & 0x7F;
    unsigned int v16 = v12[1];
    int v17 = v15 << 7;
    if ((char)v12[1] < 0)
    {
      int v18 = v16 & 0x7F | v17;
      unsigned int v19 = v12[2];
      int v20 = v18 << 7;
      if ((char)v12[2] < 0)
      {
        int v21 = v19 & 0x7F | v20;
        unsigned int v22 = v12[3];
        int v23 = v21 << 7;
        if ((char)v12[3] < 0)
        {
          uint64_t v13 = v22 & 0x7F | v23;
          uint64_t v14 = 4;
          while (1)
          {
            uint64_t v24 = v12[v14];
            if (v14 == 8) {
              break;
            }
            uint64_t v13 = v24 & 0x7F | (v13 << 7);
            ++v14;
            if ((v24 & 0x80) == 0) {
              goto LABEL_23;
            }
          }
          uint64_t v13 = v24 | (v13 << 8);
          LODWORD(v14) = 9;
        }
        else
        {
          uint64_t v13 = v23 | v22;
          LODWORD(v14) = 4;
        }
      }
      else
      {
        uint64_t v13 = v20 | v19;
        LODWORD(v14) = 3;
      }
    }
    else
    {
      uint64_t v13 = v17 | v16;
      LODWORD(v14) = 2;
    }
  }
  else
  {
    LODWORD(v14) = 1;
  }
LABEL_23:
  *(void *)(a3 + 8) = v13;
  int v25 = v14 + v3;
  *(_WORD *)(a3 + 20) = v14 + v3;
  *(_DWORD *)(a3 + 16) = v4;
  if (*(unsigned char *)(result + 3)) {
    int v26 = 0;
  }
  else {
    int v26 = v13;
  }
  unsigned int v27 = v4 + v26;
  unsigned int v28 = *(unsigned __int16 *)(result + 10);
  if (v27 <= v28)
  {
    __int16 v29 = 0;
    __int16 v30 = v27 + v25;
    if ((int)(v27 + v25) <= 4) {
      __int16 v30 = 4;
    }
  }
  else
  {
    unsigned int v27 = (v27 - *(unsigned __int16 *)(result + 12))
        % (*(unsigned __int16 *)(*(void *)(result + 104) + 36) - 4)
        + *(unsigned __int16 *)(result + 12);
    if ((int)v27 > (int)v28) {
      LOWORD(v27) = *(_WORD *)(result + 12);
    }
    __int16 v29 = v27 + v25;
    __int16 v30 = v27 + v25 + 4;
  }
  *(_WORD *)(a3 + 22) = v27;
  *(_WORD *)(a3 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v29;
  *(_WORD *)(a3 + 26) = v30;
  return result;
}

uint64_t getPayload(uint64_t a1, int a2, char *a3, int a4)
{
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 48);
  getCellInfo(a1);
  unint64_t v10 = (unsigned int *)(*(void *)(a1 + 64) + *(unsigned __int16 *)(a1 + 84));
  int v23 = v10;
  if (*(unsigned char *)(v9 + 3)) {
    int v11 = 0;
  }
  else {
    int v11 = *(_DWORD *)(a1 + 72);
  }
  if (a4) {
    int v12 = v11;
  }
  else {
    int v12 = 0;
  }
  if (v12 + a2 > (*(_DWORD *)(a1 + 80) + v11)) {
    return 1;
  }
  int v14 = *(unsigned __int16 *)(a1 + 86);
  LODWORD(v13) = v12 - v14;
  if (v12 < v14)
  {
    if (v12 + a2 <= v14) {
      int v15 = a2;
    }
    else {
      int v15 = v14 - v12;
    }
    memcpy(a3, (char *)v10 + v12, v15);
    uint64_t v13 = 0;
    a2 -= v15;
    if (!a2) {
      return v13;
    }
    a3 += v15;
  }
  if (a2 >= 1 && (int v16 = bswap32(*(unsigned int *)((char *)v10 + *(unsigned __int16 *)(a1 + 86)))) != 0)
  {
    int v17 = *(unsigned __int16 *)(v8 + 36) - 4;
    while (1)
    {
      uint64_t v18 = sqlite3pager_get(*(void *)v8, v16, &v23);
      if (v18) {
        return v18;
      }
      uint64_t v19 = (uint64_t)v23;
      unsigned int v20 = *v23;
      if ((int)v13 >= v17)
      {
        LODWORD(v13) = v13 - v17;
      }
      else
      {
        if ((int)v13 + a2 <= v17) {
          int v21 = a2;
        }
        else {
          int v21 = v17 - v13;
        }
        memcpy(a3, (char *)v23 + (int)v13 + 4, v21);
        LODWORD(v13) = 0;
        a2 -= v21;
        a3 += v21;
      }
      sqlite3pager_unref(v19);
      if (a2 >= 1)
      {
        int v16 = bswap32(v20);
        if (v16) {
          continue;
        }
      }
      goto LABEL_27;
    }
  }
  else
  {
LABEL_27:
    if (a2 <= 0) {
      return 0;
    }
    else {
      return 11;
    }
  }
}

uint64_t moveToLeftmost(uint64_t a1)
{
  while (1)
  {
    uint64_t v2 = *(void *)(a1 + 48);
    if (*(unsigned char *)(v2 + 4)) {
      break;
    }
    uint64_t result = moveToChild(a1, bswap32(*(_DWORD *)(*(void *)(v2 + 112)+ __rev16(*(unsigned __int16 *)(*(void *)(v2 + 112)+ *(unsigned __int16 *)(v2 + 14)+ 2 * *(int *)(a1 + 56))))));
    if (result) {
      return result;
    }
  }
  return 0;
}

uint64_t sqlite3BtreeMoveto(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t Payload = moveToRoot(a1);
  if (Payload) {
    return Payload;
  }
  if (!*(unsigned char *)(a1 + 97))
  {
    int v14 = -1;
LABEL_48:
    uint64_t Payload = 0;
    *a4 = v14;
    return Payload;
  }
  while (1)
  {
    uint64_t v9 = *(void *)(a1 + 48);
    if (!a2 && !*(unsigned char *)(v9 + 3)) {
      return 11;
    }
    if (*(_WORD *)(v9 + 20)) {
      break;
    }
    int v10 = 0;
    int v14 = -1;
LABEL_40:
    if (*(unsigned char *)(v9 + 4)
      || ((uint64_t v19 = *(void *)(v9 + 112), v10 >= *(unsigned __int16 *)(v9 + 20))
        ? (uint64_t v20 = *(unsigned __int8 *)(v9 + 8) + 8)
        : (uint64_t v20 = __rev16(*(unsigned __int16 *)(v19 + *(unsigned __int16 *)(v9 + 14) + 2 * v10))),
          (int v21 = bswap32(*(_DWORD *)(v19 + v20))) == 0))
    {
      if (!a4) {
        return 0;
      }
      goto LABEL_48;
    }
    *(_DWORD *)(a1 + 56) = v10;
    *(_WORD *)(a1 + 90) = 0;
    uint64_t Payload = moveToChild(a1, v21);
    if (Payload) {
      return Payload;
    }
  }
  int v10 = 0;
  int v11 = *(unsigned __int16 *)(v9 + 20) - 1;
  while (1)
  {
    int v12 = v11 + v10;
    if (v11 + v10 < 0 != __OFADD__(v11, v10)) {
      ++v12;
    }
    *(_DWORD *)(a1 + 56) = v12 >> 1;
    *(_WORD *)(a1 + 90) = 0;
    if (*(unsigned char *)(a1 + 97))
    {
      getCellInfo(a1);
      uint64_t v13 = *(void *)(a1 + 72);
    }
    else
    {
      uint64_t v13 = 0;
    }
    if (!*(unsigned char *)(v9 + 3)) {
      break;
    }
    if (v13 < a3)
    {
      int v14 = -1;
LABEL_33:
      int v10 = *(_DWORD *)(a1 + 56) + 1;
      goto LABEL_34;
    }
    if (v13 <= a3) {
      goto LABEL_37;
    }
    int v14 = 1;
LABEL_32:
    int v11 = *(_DWORD *)(a1 + 56) - 1;
LABEL_34:
    if (v10 > v11) {
      goto LABEL_40;
    }
  }
  uint64_t v15 = *(void *)(a1 + 48);
  getCellInfo(a1);
  if (*(unsigned char *)(v15 + 3)) {
    LODWORD(v16) = 0;
  }
  else {
    LODWORD(v16) = *(_DWORD *)(a1 + 72);
  }
  if (v16 >= *(unsigned __int16 *)(a1 + 86)) {
    uint64_t v16 = *(unsigned __int16 *)(a1 + 86);
  }
  else {
    uint64_t v16 = v16;
  }
  if (v13 <= v16)
  {
    int v14 = (*(uint64_t (**)(void, uint64_t, void, uint64_t, uint64_t))(a1 + 24))(*(void *)(a1 + 32), v13, *(void *)(a1 + 64) + *(unsigned __int16 *)(a1 + 84), a3, a2);
    if (!v14) {
      goto LABEL_37;
    }
LABEL_31:
    if (v14 < 0) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  int v17 = (char *)malloc_type_malloc((int)v13, 0xA2076A49uLL);
  uint64_t v18 = v17;
  if ((int)v13 >= 1 && !v17)
  {
    ++sqlite3_malloc_failed;
    return 7;
  }
  if (!v17) {
    return 7;
  }
  uint64_t Payload = getPayload(a1, v13, v17, 0);
  int v14 = (*(uint64_t (**)(void, uint64_t, char *, uint64_t, uint64_t))(a1 + 24))(*(void *)(a1 + 32), v13, v18, a3, a2);
  free(v18);
  if (Payload) {
    return Payload;
  }
  if (v14) {
    goto LABEL_31;
  }
LABEL_37:
  if (*(unsigned char *)(v9 + 6) && !*(unsigned char *)(v9 + 4))
  {
    int v14 = 0;
    int v10 = *(_DWORD *)(a1 + 56);
    goto LABEL_40;
  }
  int v14 = 0;
  uint64_t Payload = 0;
  if (a4) {
    goto LABEL_48;
  }
  return Payload;
}

uint64_t sqlite3BtreeNext(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  while (2)
  {
    if (*(unsigned char *)(a1 + 97))
    {
      int v5 = *(_DWORD *)(a1 + 56) + 1;
      *(_DWORD *)(a1 + 56) = v5;
      *(_WORD *)(a1 + 90) = 0;
      if (v5 < *(unsigned __int16 *)(v4 + 20))
      {
        uint64_t result = 0;
        *a2 = 0;
        if (!*(unsigned char *)(v4 + 4))
        {
          return moveToLeftmost(a1);
        }
      }
      else if (*(unsigned char *)(v4 + 4))
      {
        uint64_t v6 = v4;
        do
        {
          uint64_t v4 = *(void *)(v6 + 128);
          if (!v4
            || (uint64_t v7 = *(void *)(v4 + 112), *(_DWORD *)(v4 + 120) <= 1u)
            && !__rev16(*(unsigned __int16 *)(*(unsigned __int8 *)(v4 + 8) + v7 + 3)))
          {
            uint64_t result = 0;
            *a2 = 1;
            *(unsigned char *)(a1 + 97) = 0;
            return result;
          }
          unsigned int v8 = *(unsigned __int16 *)(v6 + 16);
          if (*(_WORD *)(v7 - 10)) {
            ++*(_WORD *)(v7 - 10);
          }
          else {
            _page_ref((uint64_t *)(v7 - 88));
          }
          sqlite3pager_unref(*(void *)(v6 + 112));
          *(void *)(a1 + 48) = v4;
          *(_WORD *)(a1 + 90) = 0;
          *(_DWORD *)(a1 + 56) = v8;
          uint64_t v6 = v4;
        }
        while (v8 >= *(unsigned __int16 *)(v4 + 20));
        *a2 = 0;
        if (*(unsigned char *)(v4 + 6)) {
          continue;
        }
        return 0;
      }
      else
      {
        uint64_t result = moveToChild(a1, bswap32(*(_DWORD *)(*(unsigned __int8 *)(v4 + 8) + *(void *)(v4 + 112) + 8)));
        if (!result)
        {
          uint64_t result = moveToLeftmost(a1);
          *a2 = 0;
        }
      }
    }
    else
    {
      uint64_t result = 0;
      *a2 = 1;
    }
    break;
  }
  return result;
}

uint64_t sqlite3BtreeInsert(uint64_t a1, char *a2, unint64_t a3, char *a4, int a5)
{
  uint64_t v5 = *(void *)a1;
  if (*(unsigned char *)(*(void *)a1 + 24) == 2)
  {
    if (!*(unsigned char *)(a1 + 96)) {
      return 3;
    }
    if (checkReadLocks(*(void *)(v5 + 8), *(_DWORD *)(a1 + 40), a1)) {
      return 6;
    }
    int v19 = 0;
    uint64_t inserted = sqlite3BtreeMoveto(a1, (uint64_t)a2, a3, &v19);
    if (!inserted)
    {
      uint64_t v12 = *(void *)(a1 + 48);
      uint64_t inserted = sqlite3pager_write(*(void **)(v12 + 112));
      if (!inserted)
      {
        uint64_t v13 = sqlite3MallocRaw(*(unsigned __int16 *)(v5 + 32) - 8);
        if (!v13) {
          return 7;
        }
        int v14 = v13;
        int v18 = 0;
        uint64_t inserted = fillInCell(v12, (uint64_t)v13, a2, a3, a4, a5, &v18);
        if (!inserted)
        {
          if (v19)
          {
            if (v19 < 0 && *(_WORD *)(v12 + 20))
            {
              ++*(_DWORD *)(a1 + 56);
              *(_WORD *)(a1 + 90) = 0;
            }
          }
          else if (*(unsigned char *)(a1 + 97))
          {
            uint64_t v15 = (_DWORD *)(*(void *)(v12 + 112)
                           + __rev16(*(unsigned __int16 *)(*(void *)(v12 + 112)
                                                         + *(unsigned __int16 *)(v12 + 14)
                                                         + 2 * *(int *)(a1 + 56))));
            if (!*(unsigned char *)(v12 + 4)) {
              _DWORD *v14 = *v15;
            }
            long long v20 = 0u;
            long long v21 = 0u;
            parseCellPtr(v12, (uint64_t)v15, (uint64_t)&v20);
            int v16 = WORD5(v21);
            uint64_t inserted = clearCell(v12, (uint64_t)v15);
            if (inserted) {
              goto LABEL_26;
            }
            dropCell(v12, *(_DWORD *)(a1 + 56), v16);
          }
          uint64_t inserted = insertCell(v12, *(_DWORD *)(a1 + 56), (uint64_t)v14, v18, 0, 0);
          if (!inserted)
          {
            uint64_t inserted = balance(v12, 1);
            if (!inserted) {
              moveToRoot(a1);
            }
          }
        }
LABEL_26:
        free(v14);
      }
    }
  }
  else if (*(unsigned char *)(v5 + 26))
  {
    return 8;
  }
  else
  {
    return 1;
  }
  return inserted;
}

uint64_t fillInCell(uint64_t a1, uint64_t a2, char *a3, unint64_t a4, char *a5, int a6, _DWORD *a7)
{
  uint64_t v36 = 0;
  uint64_t v12 = *(void *)(a1 + 104);
  unsigned int v35 = 0;
  int v13 = 4 * (*(unsigned char *)(a1 + 4) == 0);
  if (*(unsigned char *)(a1 + 7))
  {
    int v14 = a6;
    v13 += sqlite3PutVarint((unsigned char *)(a2 + v13), a6);
  }
  else
  {
    int v14 = 0;
  }
  long long v33 = 0u;
  long long v34 = 0u;
  int v15 = sqlite3PutVarint((unsigned char *)(a2 + v13), a4);
  parseCellPtr(a1, a2, (uint64_t)&v33);
  if (*(unsigned char *)(a1 + 3)) {
    int v16 = 0;
  }
  else {
    int v16 = v14;
  }
  int v31 = v16;
  if (*(unsigned char *)(a1 + 3)) {
    int v17 = v14;
  }
  else {
    int v17 = v14 + a4;
  }
  if (*(unsigned char *)(a1 + 3)) {
    a3 = a5;
  }
  else {
    int v14 = a4;
  }
  *a7 = WORD5(v34);
  if (v17 < 1) {
    return 0;
  }
  uint64_t v18 = 0;
  uint64_t v19 = v15 + (uint64_t)v13;
  long long v20 = (_DWORD *)(a2 + WORD4(v34));
  long long v21 = (char *)(a2 + v19);
  int v22 = WORD3(v34);
  do
  {
    if (!v22)
    {
      int v23 = v35;
      uint64_t v24 = allocatePage(v12, &v36, (int *)&v35, v35, 0);
      uint64_t v25 = v24;
      if (v23) {
        BOOL v26 = *(unsigned char *)(v12 + 31) == 0;
      }
      else {
        BOOL v26 = 1;
      }
      if (!v26 && v24 == 0) {
        uint64_t v25 = ptrmapPut(v12, v35, 4, v23);
      }
      if (v25) {
        goto LABEL_43;
      }
      _DWORD *v20 = bswap32(v35);
      if (v18) {
        sqlite3pager_unref(*(void *)(v18 + 112));
      }
      uint64_t v18 = v36;
      long long v20 = *(_DWORD **)(v36 + 112);
      _DWORD *v20 = 0;
      long long v21 = (char *)(*(void *)(v18 + 112) + 4);
      int v22 = *(unsigned __int16 *)(v12 + 36) - 4;
    }
    if (v17 >= v22) {
      int v28 = v22;
    }
    else {
      int v28 = v17;
    }
    if (v28 >= v14) {
      int v29 = v14;
    }
    else {
      int v29 = v28;
    }
    memcpy(v21, a3, v29);
    v17 -= v29;
    v21 += v29;
    v22 -= v29;
    if (v14 <= v28) {
      a3 = a5;
    }
    else {
      a3 += v29;
    }
    if (v14 <= v28) {
      int v14 = v31;
    }
    else {
      v14 -= v29;
    }
  }
  while (v17 > 0);
  uint64_t v25 = 0;
LABEL_43:
  if (v18) {
    sqlite3pager_unref(*(void *)(v18 + 112));
  }
  return v25;
}

uint64_t clearCell(uint64_t a1, uint64_t a2)
{
  int v3 = *(uint64_t **)(a1 + 104);
  long long v13 = 0u;
  long long v14 = 0u;
  parseCellPtr(a1, a2, (uint64_t)&v13);
  if (!WORD4(v14)) {
    return 0;
  }
  unsigned int v4 = bswap32(*(_DWORD *)(a2 + WORD4(v14)));
  if (!v4) {
    return 0;
  }
  while (1)
  {
    uint64_t v12 = 0;
    if (v4 > sqlite3pager_pagecount(*v3)) {
      break;
    }
    uint64_t result = getPage((uint64_t)v3, v4, &v12);
    if (result) {
      return result;
    }
    uint64_t v6 = v12;
    uint64_t v7 = *(unsigned __int8 **)(v12 + 112);
    int v8 = *v7;
    int v9 = v7[1];
    int v10 = v7[2];
    int v11 = v7[3];
    uint64_t result = freePage(v12);
    if (result) {
      return result;
    }
    unsigned int v4 = (v8 << 24) | (v9 << 16) | (v10 << 8) | v11;
    sqlite3pager_unref(*(void *)(v6 + 112));
    if (!v4) {
      return 0;
    }
  }
  return 11;
}

uint64_t dropCell(uint64_t result, int a2, int a3)
{
  uint64_t v3 = *(void *)(result + 112);
  uint64_t v4 = *(unsigned __int16 *)(result + 14);
  uint64_t v5 = (unsigned __int8 *)(v3 + v4 + 2 * a2);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  unint64_t v8 = v7 | (v6 << 8);
  uint64_t v9 = *(unsigned __int8 *)(result + 8);
  uint64_t v10 = v9 + 1;
  unint64_t v11 = v9 + 1;
  do
  {
    uint64_t v12 = (unsigned char *)(v3 + v11);
    uint64_t v13 = *(unsigned __int8 *)(v3 + v11);
    uint64_t v14 = *(unsigned __int8 *)(v3 + v11 + 1);
    unint64_t v11 = v14 | (v13 << 8);
  }
  while (v11 < v8 && v11 != 0);
  if (a3 <= 4) {
    LOWORD(a3) = 4;
  }
  *uint64_t v12 = v6;
  v12[1] = v7;
  int v16 = (unsigned char *)(v3 + v8);
  *int v16 = v13;
  v16[1] = v14;
  v16[2] = BYTE1(a3);
  void v16[3] = a3;
  *(_WORD *)(result + 18) += a3;
  uint64_t v17 = *(unsigned __int8 *)(result + 8) + 1;
  for (uint64_t i = __rev16(*(unsigned __int16 *)(v3 + v17)); i; uint64_t i = v24 | v20)
  {
    uint64_t v19 = (unsigned __int8 *)(v3 + i);
    unsigned int v20 = v19[1];
    unint64_t v21 = v19[1] | ((unint64_t)*v19 << 8);
    int v22 = i + (bswap32(*((unsigned __int16 *)v19 + 1)) >> 16);
    if ((int)v21 - 1 >= (v22 + 3))
    {
      int v24 = *v19 << 8;
    }
    else
    {
      *(unsigned char *)(*(unsigned __int8 *)(result + 8) + v3 + 7) += v22 - v20;
      *(_WORD *)uint64_t v19 = *(_WORD *)(v3 + v21);
      *((_WORD *)v19 + 1) = bswap32((*(unsigned __int8 *)(v3 + v21 + 3) | (*(unsigned __int8 *)(v3 + v21 + 2) << 8))+ v21- i) >> 16;
      int v23 = (unsigned __int8 *)(v3 + v17);
      unsigned int v20 = v23[1];
      int v24 = *v23 << 8;
      uint64_t i = v17;
    }
    uint64_t v17 = i;
  }
  uint64_t v25 = *(unsigned __int8 *)(v3 + v10);
  uint64_t v26 = v9 + v3;
  uint64_t v27 = v9 + v3;
  int v29 = *(unsigned __int8 *)(v27 + 5);
  int v28 = (_WORD *)(v27 + 5);
  if (v25 == v29)
  {
    uint64_t v30 = *(unsigned __int8 *)(v26 + 2);
    if (v30 == *(unsigned __int8 *)(v26 + 6))
    {
      uint64_t v31 = v30 | (v25 << 8);
      *(_WORD *)(v3 + v10) = *(_WORD *)(v3 + v31);
      *int v28 = bswap32((*(unsigned __int8 *)(v3 + v31 + 3) | (*(unsigned __int8 *)(v3 + v31 + 2) << 8)) + v31) >> 16;
    }
  }
  int v32 = a2 + 1;
  int v33 = *(unsigned __int16 *)(result + 20);
  if (a2 + 1 < v33)
  {
    uint64_t v34 = v4 + 2 * a2 + v3 + 3;
    do
    {
      *(_WORD *)(v34 - 3) = *(_WORD *)(v34 - 1);
      ++v32;
      int v33 = *(unsigned __int16 *)(result + 20);
      v34 += 2;
    }
    while (v32 < v33);
  }
  *(_WORD *)(result + 20) = v33 - 1;
  *(_WORD *)(*(unsigned __int8 *)(result + 8) + v3 + 3) = bswap32(v33 - 1) >> 16;
  *(_WORD *)(result + 18) += 2;
  *(unsigned char *)(result + 1) = 1;
  return result;
}

uint64_t insertCell(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6)
{
  uint64_t v9 = a3;
  __int16 v10 = a2;
  unsigned int v12 = *(unsigned __int8 *)(a1 + 2);
  if (*(unsigned char *)(a1 + 2) || a4 + 2 > *(unsigned __int16 *)(a1 + 18))
  {
    if (a5)
    {
      memcpy((void *)(a5 + a6), (const void *)(a3 + a6), (int)(a4 - a6));
      unsigned int v12 = *(unsigned __int8 *)(a1 + 2);
      uint64_t v9 = a5;
    }
    uint64_t result = 0;
    *(unsigned char *)(a1 + 2) = v12 + 1;
    uint64_t v14 = a1 + 16 * v12;
    *(void *)(v14 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v9;
    *(_WORD *)(v14 + 32) = v10;
    *(_WORD *)(a1 + 18) = 0;
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 112);
    uint64_t v16 = *(unsigned __int8 *)(a1 + 8);
    uint64_t v17 = *(unsigned __int16 *)(a1 + 14);
    int v23 = 2 * *(unsigned __int16 *)(a1 + 20);
    uint64_t v18 = (v17 + v23);
    int v19 = 2 * a2;
    uint64_t v20 = v17 + 2 * a2;
    if ((int)v18 + 2 > (int)(__rev16(*(unsigned __int16 *)(v16 + v15 + 5)) - a4)) {
      defragmentPage(a1);
    }
    unsigned int Space = allocateSpace(a1, a4);
    ++*(_WORD *)(a1 + 20);
    *(_WORD *)(a1 + 18) -= 2;
    memcpy((void *)(v15 + (int)(Space + a6)), (const void *)(v9 + a6), (int)(a4 - a6));
    if (v23 > v19)
    {
      do
      {
        *(_WORD *)(v15 + v18) = *(_WORD *)(v15 + v18 - 2);
        v18 -= 2;
      }
      while ((int)v18 > (int)v20);
    }
    *(_WORD *)(v15 + v20) = bswap32(Space) >> 16;
    *(_WORD *)(v16 + v15 + 3) = bswap32(*(unsigned __int16 *)(a1 + 20)) >> 16;
    *(unsigned char *)(a1 + 1) = 1;
    if (!*(unsigned char *)(*(void *)(a1 + 104) + 31)) {
      return 0;
    }
    long long v24 = 0u;
    long long v25 = 0u;
    parseCellPtr(a1, v9, (uint64_t)&v24);
    uint64_t v22 = *(unsigned char *)(a1 + 3) ? 0 : *((void *)&v24 + 1);
    if (v22 + v25 <= WORD3(v25)) {
      return 0;
    }
    uint64_t result = ptrmapPut(*(void *)(a1 + 104), bswap32(*(_DWORD *)(v9 + WORD4(v25))), 3, *(_DWORD *)(a1 + 120));
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t balance(uint64_t a1, int a2)
{
  if (!*(void *)(a1 + 128))
  {
    if (!*(unsigned char *)(a1 + 2)) {
      goto LABEL_18;
    }
    *(void *)&long long v33 = 0;
    LODWORD(v32) = 0;
    uint64_t v4 = *(void *)(a1 + 104);
    uint64_t inited = allocatePage(v4, &v33, (int *)&v32, *(_DWORD *)(a1 + 120), 0);
    if (inited) {
      return inited;
    }
    uint64_t v6 = *(unsigned __int16 *)(v4 + 36);
    uint64_t v7 = *(void *)(a1 + 112);
    uint64_t v8 = *(unsigned __int8 *)(a1 + 8);
    uint64_t v9 = __rev16(*(unsigned __int16 *)(v7 + v8 + 5));
    uint64_t v10 = v33;
    unint64_t v11 = *(char **)(v33 + 112);
    memcpy(v11, (const void *)(v7 + v8), *(unsigned __int16 *)(a1 + 14) - v8 + 2 * *(unsigned __int16 *)(a1 + 20));
    memcpy(&v11[v9], (const void *)(v7 + v9), v6 - v9);
    uint64_t inited = initPage(v10, a1);
    if (inited) {
      return inited;
    }
    memcpy((void *)(v10 + 24), (const void *)(a1 + 24), 16 * *(unsigned __int8 *)(a1 + 2));
    int v12 = *(unsigned __int8 *)(a1 + 2);
    *(unsigned char *)(v10 + 2) = v12;
    if (v12) {
      *(_WORD *)(v10 + 18) = 0;
    }
    zeroPage(a1, **(unsigned char **)(v10 + 112) & 0xF7);
    *(_DWORD *)(*(unsigned __int8 *)(a1 + 8) + *(void *)(a1 + 112) + 8) = bswap32(v32);
    if (*(unsigned char *)(v4 + 31))
    {
      uint64_t inited = ptrmapPut(v4, *(_DWORD *)(v10 + 120), 5, *(_DWORD *)(a1 + 120));
      if (inited) {
        return inited;
      }
      if (*(_WORD *)(v10 + 20))
      {
        int v13 = 0;
        do
        {
          uint64_t OverflowCell = findOverflowCell(v10, v13);
          uint64_t v15 = ptrmapPutOvflPtr(v10, OverflowCell);
          if (v15) {
            return v15;
          }
        }
        while (++v13 < *(unsigned __int16 *)(v10 + 20));
      }
    }
    uint64_t inited = balance_nonroot(v10);
    sqlite3pager_unref(*(void *)(v10 + 112));
    if (!inited)
    {
LABEL_18:
      if (*(_WORD *)(a1 + 20)) {
        return 0;
      }
      uint64_t v16 = *(void *)(a1 + 104);
      unsigned int v17 = *(unsigned __int16 *)(v16 + 32);
      int v18 = (int)(v17 - 8) / 3;
      int v19 = (char *)malloc_type_malloc(12 * v18, 0xA2076A49uLL);
      if (v17 >= 0xB && v19 == 0)
      {
        ++sqlite3_malloc_failed;
      }
      else
      {
        unint64_t v21 = v19;
        if (v19)
        {
          if (*(unsigned char *)(a1 + 4))
          {
LABEL_25:
            uint64_t inited = 0;
LABEL_33:
            free(v21);
            return inited;
          }
          uint64_t v32 = 0;
          uint64_t inited = getPage(*(void *)(a1 + 104), bswap32(*(_DWORD *)(*(unsigned __int8 *)(a1 + 8) + *(void *)(a1 + 112) + 8)), &v32);
          if (inited) {
            goto LABEL_33;
          }
          if (*(_DWORD *)(a1 + 120) == 1)
          {
            uint64_t v22 = v32;
            uint64_t inited = initPage(v32, a1);
            if (inited) {
              goto LABEL_33;
            }
            if (*(unsigned __int16 *)(v22 + 18) < 0x64u) {
              goto LABEL_44;
            }
            int v23 = (int *)&v21[8 * v18];
            zeroPage(a1, **(unsigned __int8 **)(v22 + 112));
            if (*(_WORD *)(v22 + 20))
            {
              int v24 = 0;
              unint64_t v25 = 0;
              do
              {
                uint64_t v26 = *(void *)(v22 + 112)
                    + __rev16(*(unsigned __int16 *)(*(void *)(v22 + 112)
                                                  + v24
                                                  + *(unsigned __int16 *)(v22 + 14)));
                *(void *)&v21[8 * v25] = v26;
                long long v33 = 0u;
                long long v34 = 0u;
                parseCellPtr(v22, v26, (uint64_t)&v33);
                v23[v25++] = WORD5(v34);
                unint64_t v27 = *(unsigned __int16 *)(v22 + 20);
                v24 += 2;
              }
              while (v25 < v27);
            }
            else
            {
              LODWORD(v27) = 0;
            }
            assemblePage(a1, v27, (const void **)v21, v23);
            *(_DWORD *)(*(unsigned __int8 *)(a1 + 8) + *(void *)(a1 + 112) + 8) = *(_DWORD *)(*(unsigned __int8 *)(v22 + 8)
                                                                                                + *(void *)(v22 + 112)
                                                                                                + 8);
          }
          else
          {
            uint64_t v22 = v32;
            memcpy(*(void **)(a1 + 112), *(const void **)(v32 + 112), *(unsigned __int16 *)(*(void *)(a1 + 104) + 36));
            *(unsigned char *)a1 = 0;
            *(void *)(a1 + 128) = 0;
            initPage(a1, 0);
          }
          freePage(v22);
LABEL_44:
          uint64_t v28 = reparentChildPages(a1);
          uint64_t inited = v28;
          if (*(unsigned char *)(v16 + 31) && *(_WORD *)(a1 + 20))
          {
            unsigned int v29 = 0;
            do
            {
              uint64_t v30 = findOverflowCell(a1, v29);
              uint64_t v31 = ptrmapPutOvflPtr(a1, v30);
              if (v31)
              {
                uint64_t inited = v31;
                goto LABEL_33;
              }
              ++v29;
            }
            while (v29 < *(unsigned __int16 *)(a1 + 20));
            if (v22) {
              goto LABEL_52;
            }
          }
          else
          {
            if (v28) {
              goto LABEL_33;
            }
LABEL_52:
            sqlite3pager_unref(*(void *)(v22 + 112));
          }
          goto LABEL_25;
        }
      }
      return 7;
    }
    return inited;
  }
  if (!*(unsigned char *)(a1 + 2)
    && (a2
     || (1431655766 * (unint64_t)(2 * *(unsigned __int16 *)(*(void *)(a1 + 104) + 36))) >> 32 >= *(unsigned __int16 *)(a1 + 18)))
  {
    return 0;
  }
  return balance_nonroot(a1);
}

uint64_t allocatePage(uint64_t a1, void *a2, int *a3, int a4, int a5)
{
  uint64_t v62 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(v62 + 112);
  int v9 = bswap32(*(_DWORD *)(v8 + 36));
  unsigned int v10 = v9 - 1;
  if (v9 >= 1)
  {
    uint64_t v64 = 0;
    if (a5)
    {
      LOBYTE(v63) = 0;
      uint64_t v12 = ptrmapGet(a1, a4, &v63, 0);
      if (v12) {
        return v12;
      }
      BOOL v17 = v63 == 2;
      *a3 = a4;
      uint64_t v8 = *(void *)(v62 + 112);
    }
    else
    {
      BOOL v17 = 0;
    }
    uint64_t v13 = sqlite3pager_write((void *)v8);
    if (v13) {
      return v13;
    }
    uint64_t v60 = a2;
    int v61 = a3;
    uint64_t v18 = 0;
    *(_DWORD *)(*(void *)(v62 + 112) + 36) = bswap32(v10);
    while (1)
    {
      if (v18)
      {
        int v19 = bswap32(**(_DWORD **)(v18 + 112));
        uint64_t Page = getPage(a1, v19, &v64);
        if (Page)
        {
          uint64_t v13 = Page;
          goto LABEL_91;
        }
      }
      else
      {
        int v19 = bswap32(*(_DWORD *)(*(void *)(v62 + 112) + 32));
        uint64_t v12 = getPage(a1, v19, &v64);
        if (v12) {
          return v12;
        }
      }
      uint64_t v21 = v64;
      uint64_t v22 = sqlite3pager_write(*(void **)(v64 + 112));
      int v23 = *(_DWORD **)(v21 + 112);
      if (v22)
      {
        uint64_t v13 = v22;
        uint64_t v57 = *(void *)(v21 + 112);
        goto LABEL_90;
      }
      uint64_t v24 = bswap32(v23[1]);
      if (v17 || v24)
      {
        if ((int)v24 > (*(unsigned __int16 *)(a1 + 36) >> 2) - 8) {
          return 11;
        }
        if (v17 && v19 == a4)
        {
          *a2 = v21;
          if (v24)
          {
            uint64_t v63 = 0;
            uint64_t v26 = *(unsigned __int8 **)(v21 + 112);
            int v27 = v26[8];
            int v28 = v26[9];
            int v29 = v26[10];
            unsigned int v30 = v26[11];
            uint64_t v31 = getPage(a1, (v27 << 24) | (v28 << 16) | (v29 << 8) | v30, &v63);
            if (v31)
            {
              uint64_t v13 = v31;
              goto LABEL_89;
            }
            char v59 = v30;
            uint64_t v32 = v63;
            uint64_t v13 = sqlite3pager_write(*(void **)(v63 + 112));
            long long v33 = *(_DWORD **)(v32 + 112);
            if (v13)
            {
              sqlite3pager_unref((uint64_t)v33);
LABEL_89:
              uint64_t v57 = *(void *)(v21 + 112);
LABEL_90:
              sqlite3pager_unref(v57);
              if (!v18) {
                return v13;
              }
LABEL_91:
              uint64_t v16 = *(void *)(v18 + 112);
              goto LABEL_92;
            }
            *long long v33 = **(_DWORD **)(v21 + 112);
            *(_DWORD *)(*(void *)(v32 + 112) + 4) = bswap32(v24 - 1);
            memcpy((void *)(*(void *)(v32 + 112) + 8), (const void *)(*(void *)(v21 + 112) + 12), 4 * ((int)v24 - 1));
            if (v18)
            {
              long long v34 = *(unsigned char **)(v18 + 112);
              *long long v34 = v27;
              v34[1] = v28;
              v34[2] = v29;
              unsigned int v35 = v34 + 3;
            }
            else
            {
              unsigned int v47 = *(unsigned char **)(v62 + 112);
              v47[32] = v27;
              v47[33] = v28;
              v47[34] = v29;
              unsigned int v35 = v47 + 35;
            }
            unsigned char *v35 = v59;
            sqlite3pager_unref(*(void *)(v32 + 112));
            a2 = v60;
          }
          else
          {
            int v46 = **(_DWORD **)(v21 + 112);
            if (v18) {
              **(_DWORD **)(v18 + 112) = v46;
            }
            else {
              *(_DWORD *)(*(void *)(v62 + 112) + 32) = v46;
            }
          }
          uint64_t v21 = 0;
          uint64_t v13 = 0;
          uint64_t v64 = 0;
          goto LABEL_55;
        }
        int v36 = 0;
        if (a4 && (int)v24 >= 2)
        {
          int v36 = 0;
          int v37 = bswap32(v23[2]) - a4;
          if (v37 < 0) {
            int v37 = -v37;
          }
          unsigned int v38 = (char *)v23 + 15;
          for (uint64_t i = 1; i != v24; ++i)
          {
            int v40 = bswap32(*(_DWORD *)(v38 - 3)) - a4;
            if (v40 < 0) {
              int v40 = -v40;
            }
            if (v40 < v37)
            {
              int v36 = i;
              int v37 = v40;
            }
            v38 += 4;
          }
        }
        __int16 v41 = &v23[v36];
        unsigned int v43 = v41[2];
        uint64_t v42 = v41 + 2;
        unsigned int v44 = bswap32(v43);
        if (!v17 || v44 == a4)
        {
          *int v61 = v44;
          if (v44 > sqlite3pager_pagecount(*(void *)a1)) {
            return 11;
          }
          if (v36 < (int)v24 - 1) {
            _DWORD *v42 = v23[(int)v24 + 1];
          }
          v23[1] = bswap32(v24 - 1);
          a2 = v60;
          uint64_t v45 = getPage(a1, *v61, v60);
          if (v45)
          {
            uint64_t v13 = v45;
          }
          else
          {
            uint64_t v48 = *(void *)(*v60 + 112);
            uint64_t v49 = v48 - 88;
            uint64_t v50 = *(void *)(v48 - 88);
            if (*(unsigned char *)(v50 + 289) == 4
              && *(unsigned char *)(v50 + 280)
              && !*(unsigned char *)(v48 - 12)
              && !*(unsigned char *)(v50 + 295)
              && !*(unsigned char *)(v50 + 296))
            {
              if (!*(unsigned char *)(v48 - 16))
              {
                unint64_t v51 = *(unsigned int *)(v48 - 80);
                if ((int)v51 <= *(_DWORD *)(v50 + 172))
                {
                  *(unsigned char *)(*(void *)(v50 + 304) + (v51 >> 3)) |= 1 << (v51 & 7);
                  *(unsigned char *)(v48 - 16) = 1;
                  if (*(unsigned char *)(v50 + 285))
                  {
                    *(unsigned char *)(*(void *)(v50 + 312) + ((unint64_t)*(unsigned int *)(v48 - 80) >> 3)) |= 1 << (*(_DWORD *)(v48 - 80) & 7);
                    if (!*(unsigned char *)(v48 - 15))
                    {
                      uint64_t v52 = *(void *)(v48 - 88);
                      *(void *)(v48 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                      uint64_t v53 = *(void *)(v52 + 368);
                      if (v53) {
                        *(void *)(v53 + 64) = v49;
                      }
                      *(void *)(v48 - 32) = v53;
                      *(void *)(v52 + 368) = v49;
                      *(unsigned char *)(v48 - 15) = 1;
                      a2 = v60;
                    }
                  }
                }
              }
              if (*(unsigned char *)(v50 + 285))
              {
                if (!*(unsigned char *)(v48 - 15))
                {
                  unint64_t v54 = *(unsigned int *)(v48 - 80);
                  if ((int)v54 <= *(_DWORD *)(v50 + 176))
                  {
                    *(unsigned char *)(*(void *)(v50 + 312) + (v54 >> 3)) |= 1 << (v54 & 7);
                    if (!*(unsigned char *)(v48 - 15))
                    {
                      uint64_t v55 = *(void *)(v48 - 88);
                      *(void *)(v48 - ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
                      uint64_t v56 = *(void *)(v55 + 368);
                      if (v56) {
                        *(void *)(v56 + 64) = v49;
                      }
                      *(void *)(v48 - 32) = v56;
                      *(void *)(v55 + 368) = v49;
                      *(unsigned char *)(v48 - 15) = 1;
                      a2 = v60;
                    }
                  }
                }
              }
            }
            uint64_t v13 = sqlite3pager_write(*(void **)(*a2 + 112));
            if (v13 && *a2) {
              sqlite3pager_unref(*(void *)(*a2 + 112));
            }
          }
LABEL_55:
          int v25 = 1;
          goto LABEL_56;
        }
        uint64_t v13 = 0;
        int v25 = 0;
        a2 = v60;
      }
      else
      {
        uint64_t v13 = 0;
        *int v61 = v19;
        *(_DWORD *)(*(void *)(v62 + 112) + 32) = *v23;
        *a2 = v21;
        uint64_t v64 = 0;
        int v25 = 1;
        uint64_t v21 = 0;
      }
LABEL_56:
      if (v18) {
        sqlite3pager_unref(*(void *)(v18 + 112));
      }
      BOOL v17 = 1;
      uint64_t v18 = v21;
      if (v25)
      {
        if (!v21) {
          return v13;
        }
        uint64_t v16 = *(void *)(v21 + 112);
LABEL_92:
        sqlite3pager_unref(v16);
        return v13;
      }
    }
  }
  int v14 = sqlite3pager_pagecount(*(void *)a1);
  int v15 = v14 + 1;
  *a3 = v14 + 1;
  if (*(unsigned char *)(a1 + 31) && !((v14 - 1) % (*(unsigned __int16 *)(a1 + 36) / 5u + 1)))
  {
    int v15 = v14 + 2;
    *a3 = v14 + 2;
  }
  uint64_t v13 = getPage(a1, v15, a2);
  if (!v13)
  {
    uint64_t v13 = sqlite3pager_write(*(void **)(*a2 + 112));
    if (v13)
    {
      if (*a2)
      {
        uint64_t v16 = *(void *)(*a2 + 112);
        goto LABEL_92;
      }
    }
  }
  return v13;
}

uint64_t ptrmapPut(uint64_t a1, int a2, int a3, int a4)
{
  if (!a2) {
    return 11;
  }
  int v14 = 0;
  unsigned int v7 = a2 - 2;
  unsigned int v8 = *(unsigned __int16 *)(a1 + 36) / 5u + 1;
  uint64_t v9 = sqlite3pager_get(*(void *)a1, (a2 - 2) / v8 * v8 + 2, &v14);
  if (!v9)
  {
    uint64_t v10 = 5 * (v7 % (*(unsigned __int16 *)(a1 + 36) / 5u + 1));
    unint64_t v11 = v14;
    if (*((unsigned __int8 *)v14 + v10 - 5) == a3 && bswap32(*(_DWORD *)((char *)v14 + v10 - 4)) == a4)
    {
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v9 = sqlite3pager_write(v14);
      if (!v9)
      {
        *((unsigned char *)v11 + v10 - 5) = a3;
        uint64_t v12 = (char *)v11 + v10;
        *(v12 - 4) = HIBYTE(a4);
        *(v12 - 3) = BYTE2(a4);
        *(v12 - 2) = BYTE1(a4);
        *(v12 - 1) = a4;
      }
    }
    sqlite3pager_unref((uint64_t)v11);
  }
  return v9;
}

uint64_t findOverflowCell(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 2);
  if (!*(unsigned char *)(a1 + 2)) {
    return *(void *)(a1 + 112)
  }
         + __rev16(*(unsigned __int16 *)(*(void *)(a1 + 112) + *(unsigned __int16 *)(a1 + 14) + 2 * a2));
  uint64_t v3 = v2 + 1;
  uint64_t v4 = (unsigned __int16 *)(a1 + 16 * v2 + 16);
  while (1)
  {
    int v5 = *v4;
    v4 -= 8;
    BOOL v6 = a2 == v5;
    if (a2 >= v5) {
      break;
    }
LABEL_6:
    if ((unint64_t)--v3 <= 1) {
      return *(void *)(a1 + 112)
    }
           + __rev16(*(unsigned __int16 *)(*(void *)(a1 + 112) + *(unsigned __int16 *)(a1 + 14) + 2 * a2));
  }
  if (!v6)
  {
    --a2;
    goto LABEL_6;
  }
  return *(void *)(a1 + 16 * (v3 - 2) + 24);
}

uint64_t ptrmapPutOvflPtr(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  long long v9 = 0u;
  long long v10 = 0u;
  parseCellPtr(a1, a2, (uint64_t)&v9);
  uint64_t v4 = *(unsigned char *)(a1 + 3) ? 0 : *((void *)&v9 + 1);
  if (v4 + v10 <= WORD3(v10)) {
    return 0;
  }
  int v5 = bswap32(*(_DWORD *)(a2 + WORD4(v10)));
  uint64_t v6 = *(void *)(a1 + 104);
  int v7 = *(_DWORD *)(a1 + 120);
  return ptrmapPut(v6, v5, 3, v7);
}

uint64_t balance_nonroot(uint64_t a1)
{
  uint64_t v153 = *MEMORY[0x1E4F143B8];
  memset(v152, 0, sizeof(v152));
  memset(v151, 0, 24);
  memset(v150, 0, sizeof(v150));
  memset(v148, 0, sizeof(v148));
  uint64_t v2 = *(void *)(a1 + 104);
  uint64_t v3 = *(void *)(a1 + 128);
  sqlite3pager_write(*(void **)(v3 + 112));
  if (*(unsigned char *)(a1 + 4)
    && *(unsigned char *)(a1 + 3)
    && *(unsigned char *)(a1 + 6)
    && *(unsigned char *)(a1 + 2) == 1
    && *(unsigned __int16 *)(a1 + 32) == *(unsigned __int16 *)(a1 + 20)
    && *(_DWORD *)(*(void *)(a1 + 128) + 120) != 1
    && bswap32(*(_DWORD *)(*(unsigned __int8 *)(v3 + 8) + *(void *)(v3 + 112) + 8)) == *(_DWORD *)(a1 + 120))
  {
    return balance_quick(a1, v3);
  }
  unint64_t v5 = 1431655766 * (*(unsigned __int16 *)(v2 + 32) - 8);
  int v6 = HIDWORD(v5) + (v5 >> 63) + 2;
  if (*(unsigned char *)(v2 + 31)) {
    int v7 = 2 * v6;
  }
  else {
    int v7 = 0;
  }
  unsigned int v8 = (const void **)malloc_type_malloc(36 * v6 + 8 * *(unsigned __int16 *)(v2 + 34) + v7 + 408, 0xA2076A49uLL);
  if (!v8)
  {
    ++sqlite3_malloc_failed;
    return 7;
  }
  long long v9 = v8;
  long long v10 = (char *)&v8[3 * v6];
  uint64_t v11 = *(unsigned __int16 *)(v2 + 34);
  __int16 v143 = &v10[12 * v6];
  uint64_t v144 = &v143[v11 + 136];
  char v145 = &v144[v11 + 136];
  uint64_t v124 = &v145[v11 + 136];
  int v138 = *(unsigned __int8 *)(v2 + 31);
  if (*(unsigned char *)(v2 + 31)) {
    uint64_t v12 = (uint64_t)&v145[5 * v11 + 136 + v11];
  }
  else {
    uint64_t v12 = 0;
  }
  if (*(unsigned char *)(v3 + 1))
  {
    uint64_t v13 = *(unsigned __int16 *)(v3 + 20);
    uint64_t v14 = *(void *)(v3 + 112);
    if (*(_WORD *)(v3 + 20))
    {
      uint64_t v15 = 0;
      uint64_t v16 = *(unsigned __int16 *)(v3 + 14) + v14 + 1;
      while (bswap32(*(_DWORD *)(v14 + __rev16(*(unsigned __int16 *)(v16 - 1)))) != *(_DWORD *)(a1 + 120))
      {
        v16 += 2;
        if (v13 == ++v15) {
          goto LABEL_27;
        }
      }
      LODWORD(v13) = v15;
    }
  }
  else
  {
    LODWORD(v13) = *(unsigned __int16 *)(a1 + 16);
    uint64_t v14 = *(void *)(v3 + 112);
  }
LABEL_27:
  uint64_t v139 = v2;
  uint64_t v118 = v11;
  unsigned int v119 = 3 * v6;
  uint64_t v120 = a1;
  if (*(_WORD *)(v14 - 10)) {
    ++*(_WORD *)(v14 - 10);
  }
  else {
    _page_ref((uint64_t *)(v14 - 88));
  }
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  int v20 = v13 - 1;
  unsigned int v21 = *(unsigned __int16 *)(v3 + 20);
  if ((int)v13 + 2 > v21) {
    int v20 = v21 - 2;
  }
  uint64_t v22 = v20 & ~(v20 >> 31);
  uint64_t v23 = (2 * v22) | 1;
  int v136 = v20 & ~(v20 >> 31);
  uint64_t v137 = v3;
  while (1)
  {
    int v24 = v22 + v19;
    unsigned int v25 = *(unsigned __int16 *)(v3 + 20);
    if ((int)v22 + (int)v19 < v25)
    {
      uint64_t v26 = (unsigned int *)(*(void *)(v3 + 112)
                           + __rev16(*(unsigned __int16 *)(*(void *)(v3 + 112)
                                                         + *(unsigned __int16 *)(v3 + 14)
                                                         + v23
                                                         - 1)));
      v148[v19] = v26;
      goto LABEL_37;
    }
    if (v24 != v25) {
      break;
    }
    uint64_t v26 = (unsigned int *)(*(unsigned __int8 *)(v3 + 8) + *(void *)(v3 + 112) + 8);
LABEL_37:
    int v27 = bswap32(*v26);
    *((_DWORD *)&v151[3] + v19 + 1) = v27;
    uint64_t inited = getAndInitPage(v139, v27, &v152[v18], v3);
    if (inited)
    {
      uint64_t v17 = inited;
      unsigned int v133 = v19;
      unsigned int v29 = 0;
      goto LABEL_160;
    }
    *(_WORD *)(v152[v19] + 16) = v24;
    v151[v19++] = 0;
    ++v18;
    v23 += 2;
    LODWORD(v22) = v136;
    uint64_t v3 = v137;
    if (v19 == 3) {
      goto LABEL_42;
    }
  }
  if (v19)
  {
LABEL_42:
    uint64_t v30 = v139;
    uint64_t v31 = *(unsigned __int16 *)(v139 + 34);
    uint64_t v32 = v152;
    long long v33 = v151;
    long long v34 = (void **)&v143;
    unsigned int v35 = v19;
    uint64_t v36 = v19;
    do
    {
      unsigned int v38 = (char *)*v34++;
      int v37 = v38;
      unsigned int v39 = &v38[v31];
      *v33++ = &v38[v31];
      *(void *)&v38[v31 + 112] = v38;
      uint64_t v40 = *v32++;
      memcpy(v37, *(const void **)(v40 + 112), v31 + 136);
      uint64_t v31 = *(unsigned __int16 *)(v139 + 34);
      *((void *)v39 + 14) = &v39[-v31];
      --v36;
    }
    while (v36);
    int v41 = 0;
    unsigned int v42 = v35;
  }
  else
  {
    unsigned int v42 = 0;
    int v41 = 1;
    uint64_t v30 = v139;
  }
  uint64_t v43 = *(unsigned __int8 *)(v120 + 4);
  uint64_t v127 = 4 * v43;
  if (*(unsigned char *)(v120 + 6)) {
    BOOL v44 = v43 == 0;
  }
  else {
    BOOL v44 = 1;
  }
  int v45 = !v44;
  int v46 = v45 << 31 >> 31;
  unsigned int v133 = v42;
  unint64_t v134 = v42;
  if (v41)
  {
    LODWORD(v47) = 0;
    int v128 = 0;
    goto LABEL_101;
  }
  uint64_t v48 = 0;
  uint64_t v47 = 0;
  int v128 = 0;
  if (v138) {
    BOOL v49 = v30 == 0;
  }
  else {
    BOOL v49 = 1;
  }
  int v50 = !v49;
  int v122 = v50;
  uint64_t v129 = (int)(v42 - 1);
  do
  {
    uint64_t v51 = v151[v48];
    int v52 = *(unsigned __int8 *)(v51 + 2) + *(unsigned __int16 *)(v51 + 20);
    if (v52)
    {
      int v53 = 0;
      uint64_t v54 = (int)v47;
      do
      {
        uint64_t OverflowCell = findOverflowCell(v51, v53);
        v9[v54] = (const void *)OverflowCell;
        long long v141 = 0u;
        *(_OWORD *)size_t __n = 0u;
        parseCellPtr(v51, OverflowCell, (uint64_t)&v141);
        *(_DWORD *)&v10[4 * v54] = WORD1(__n[1]);
        if (*(unsigned char *)(v139 + 31)) {
          BOOL v56 = v138 == 0;
        }
        else {
          BOOL v56 = 1;
        }
        if (!v56)
        {
          *(unsigned char *)(v12 + v54) = v48;
          uint64_t v57 = *(unsigned __int8 *)(v51 + 2);
          if (*(unsigned char *)(v51 + 2))
          {
            size_t v58 = (const void **)(v51 + 24);
            while (*v58 != v9[v54])
            {
              v58 += 2;
              if (!--v57) {
                goto LABEL_72;
              }
            }
            *(unsigned char *)(v12 + v54) = -1;
          }
        }
LABEL_72:
        ++v54;
        ++v53;
      }
      while (v53 != v52);
      uint64_t v47 = v54;
      uint64_t v30 = v139;
      unsigned int v42 = v133;
    }
    if (v48 < v129)
    {
      uint64_t v131 = v47;
      char v59 = (const void *)v148[v48];
      long long v141 = 0u;
      *(_OWORD *)size_t __n = 0u;
      parseCellPtr(v137, (uint64_t)v59, (uint64_t)&v141);
      size_t v60 = WORD1(__n[1]);
      if (v46)
      {
        dropCell(v137, v136, WORD1(__n[1]));
        uint64_t v47 = v131;
        unsigned int v42 = v133;
      }
      else
      {
        *(_DWORD *)&v10[4 * (int)v131] = WORD1(__n[1]);
        memcpy(&v124[v128], v59, v60);
        uint64_t v30 = v139;
        v9[(int)v131] = &v124[v128 + v127];
        if (v122 && *(unsigned char *)(v139 + 31)) {
          *(unsigned char *)(v12 + (int)v131) = -1;
        }
        dropCell(v137, v136, v60);
        *(_DWORD *)&v10[4 * (int)v131] -= v127;
        if (!*(unsigned char *)(v51 + 4)) {
          *(_DWORD *)v9[(int)v131] = *(_DWORD *)(*(unsigned __int8 *)(v51 + 8) + *(void *)(v51 + 112) + 8);
        }
        v128 += v60;
        unsigned int v42 = v133;
        uint64_t v47 = (v131 + 1);
      }
    }
    ++v48;
  }
  while (v48 != v134);
  if ((int)v47 < 1)
  {
LABEL_101:
    int v62 = 0;
    BOOL v125 = 0;
    v146[0] = 0;
    int v132 = v47;
    v147[0] = v47;
    unsigned int v130 = **(unsigned __int8 **)(v120 + 112);
    goto LABEL_102;
  }
  int v61 = 0;
  int v62 = 0;
  int v63 = 0;
  int v64 = v127 + *(unsigned __int16 *)(v30 + 36) - 12;
  do
  {
    int v65 = v61 + 2;
    v61 += 2 + *(_DWORD *)&v10[4 * v63];
    if (v61 > v64)
    {
      int v61 = 0;
      v146[v62] = v65;
      v147[v62] = v63;
      v63 += v46;
      ++v62;
    }
    ++v63;
  }
  while (v63 < (int)v47);
  v146[v62] = v61;
  v147[v62] = v47;
  BOOL v66 = v62 > 0;
  if (v62 >= 1)
  {
    uint64_t v67 = v62;
    while (1)
    {
      int v68 = v146[v67];
      uint64_t v69 = (v67 - 1);
      int v70 = v146[v69];
      for (int i = v147[v69]; ; int i = v72)
      {
        int v72 = i - 1;
        int v73 = *(_DWORD *)&v10[4 * v46 + 4 * i];
        if (v68) {
          break;
        }
        int v68 = v73 + 2;
        int v70 = v70 - *(_DWORD *)&v10[4 * v72] - 2;
LABEL_96:
        v147[v69] = v72;
      }
      int v74 = v68 + v73 + 2;
      if (v74 <= v70 - *(_DWORD *)&v10[4 * v72] - 2) {
        break;
      }
      v146[v67] = v68;
      v146[v69] = v70;
      if (v67-- <= 1) {
        goto LABEL_99;
      }
    }
    int v70 = v70 - *(_DWORD *)&v10[4 * v72] - 2;
    int v68 = v74;
    goto LABEL_96;
  }
LABEL_99:
  unsigned int v130 = **(unsigned __int8 **)(v120 + 112);
  int v132 = v47;
  if ((v62 & 0x80000000) == 0)
  {
    BOOL v125 = v62 > 0;
LABEL_102:
    unint64_t v76 = 0;
    int v123 = v62;
    uint64_t v77 = (v62 + 1);
    __int16 v78 = v149;
    while (1)
    {
      *(void *)&long long v141 = 0;
      if (v76 >= v134)
      {
        uint64_t v80 = allocatePage(v139, &v141, v78, *(v78 - 1), 0);
        if (v80)
        {
LABEL_110:
          uint64_t v17 = v80;
          unsigned int v29 = v76;
          goto LABEL_160;
        }
        uint64_t v79 = v141;
        v150[v76] = v141;
      }
      else
      {
        uint64_t v79 = v152[v76];
        v150[v76] = v79;
        *__int16 v78 = *((_DWORD *)&v151[3] + v76 + 1);
        v152[v76] = 0;
        uint64_t v80 = sqlite3pager_write(*(void **)(v79 + 112));
        if (v80) {
          goto LABEL_110;
        }
      }
      ++v76;
      zeroPage(v79, v130);
      ++v78;
      if (v77 == v76)
      {
        unsigned int v42 = v133;
        unsigned int v29 = v77;
        BOOL v66 = v125;
        goto LABEL_113;
      }
    }
  }
  int v123 = v62;
  unsigned int v29 = 0;
LABEL_113:
  if (v29 < v42)
  {
    unint64_t v81 = v134 - v29;
    __int16 v82 = &v152[v29];
    while (1)
    {
      uint64_t v83 = *v82;
      uint64_t v84 = freePage(*v82);
      if (v84) {
        break;
      }
      if (v83) {
        sqlite3pager_unref(*(void *)(v83 + 112));
      }
      *v82++ = 0;
      if (!--v81) {
        goto LABEL_119;
      }
    }
    uint64_t v17 = v84;
LABEL_160:
    uint64_t v86 = v9;
    goto LABEL_161;
  }
LABEL_119:
  uint64_t v85 = v137;
  uint64_t v86 = v9;
  if (v66)
  {
    uint64_t v87 = 0;
    uint64_t v88 = 1;
    do
    {
      unsigned int v89 = v149[v87];
      uint64_t v90 = v88;
      int v91 = v87;
      unsigned int v92 = v89;
      do
      {
        if (v149[v90] < v92)
        {
          unsigned int v92 = v149[v90];
          int v91 = v90;
        }
        ++v90;
      }
      while (v123 + 1 != v90);
      if (v87 < v91)
      {
        uint64_t v93 = v150[v87];
        v149[v87] = v149[v91];
        v150[v87] = v150[v91];
        v149[v91] = v89;
        v150[v91] = v93;
      }
      ++v87;
      ++v88;
    }
    while (v87 != v123);
  }
  unsigned int v121 = v29;
  if (!v29)
  {
LABEL_153:
    unsigned int v29 = v121;
    if ((v130 & 8) == 0) {
      *(_DWORD *)(*(void *)(v150[(int)v121 - 1] + 112) + 8) = *(_DWORD *)(*(void *)(v151[(int)v133 - 1] + 112)
    }
                                                                              + 8);
    if (v136 == *(unsigned __int8 *)(v85 + 2) + *(unsigned __int16 *)(v85 + 20)) {
      uint64_t v110 = (_DWORD *)(*(unsigned __int8 *)(v85 + 8) + *(void *)(v85 + 112) + 8);
    }
    else {
      uint64_t v110 = (_DWORD *)findOverflowCell(v85, v136);
    }
    *uint64_t v110 = bswap32(v149[v121 - 1]);
    if (v121)
    {
      uint64_t v115 = v121;
      unsigned int v116 = v150;
      while (1)
      {
        uint64_t v117 = reparentChildPages(*v116);
        if (v117) {
          break;
        }
        ++v116;
        if (!--v115) {
          goto LABEL_179;
        }
      }
    }
    else
    {
LABEL_179:
      uint64_t v117 = reparentChildPages(v137);
      if (!v117) {
        uint64_t v117 = balance(v137, 0);
      }
    }
    uint64_t v17 = v117;
    goto LABEL_161;
  }
  uint64_t v94 = 0;
  int v95 = 0;
  uint64_t v135 = (int)(v29 - 1);
  uint64_t v126 = v29;
  while (1)
  {
    uint64_t v96 = v150[v94];
    int v97 = v147[v94];
    assemblePage(v96, v97 - v95, &v86[v95], (int *)&v10[4 * v95]);
    if (*(unsigned char *)(v139 + 31))
    {
      if (v97 > v95) {
        break;
      }
    }
LABEL_138:
    if (v94 >= v135)
    {
      uint64_t v85 = v137;
LABEL_144:
      uint64_t v86 = v9;
      goto LABEL_152;
    }
    uint64_t v85 = v137;
    if (v97 >= v132) {
      goto LABEL_144;
    }
    uint64_t v86 = v9;
    int v105 = v9[v97];
    int v106 = *(_DWORD *)&v10[4 * v97] + v127;
    int v140 = v106;
    if (*(unsigned char *)(v96 + 4))
    {
      uint64_t v107 = (uint64_t)&v124[v128];
      if (v46)
      {
        long long v141 = 0u;
        *(_OWORD *)size_t __n = 0u;
        parseCellPtr(v96, (uint64_t)v9[--v97], (uint64_t)&v141);
        fillInCell(v137, v107, 0, *((unint64_t *)&v141 + 1), 0, 0, &v140);
        int v106 = v140;
        v128 += v140;
        int v105 = (_DWORD *)v107;
        uint64_t v107 = 0;
      }
      else
      {
        --v105;
        v128 += v106;
      }
    }
    else
    {
      uint64_t v107 = 0;
      *(_DWORD *)(*(void *)(v96 + 112) + 8) = *v105;
    }
    uint64_t inserted = insertCell(v137, v136, (uint64_t)v105, v106, v107, 4u);
    if (inserted
      || (*(_DWORD *)findOverflowCell(v137, v136) = bswap32(*(_DWORD *)(v96 + 120)), *(unsigned char *)(v139 + 31))
      && (v46 & 1) == 0
      && (uint64_t v109 = findOverflowCell(v137, v136), inserted = ptrmapPutOvflPtr(v137, v109), inserted))
    {
      uint64_t v17 = inserted;
      goto LABEL_158;
    }
    ++v97;
    uint64_t v85 = v137;
    ++v136;
LABEL_152:
    ++v94;
    int v95 = v97;
    if (v94 == v126) {
      goto LABEL_153;
    }
  }
  uint64_t v98 = 0;
  uint64_t v99 = v95;
  int v100 = v97 - v95;
  size_t v101 = (char *)v9 + 12 * v119 + 8 * v118 + v99 + 408;
  while (1)
  {
    if (v138)
    {
      uint64_t v102 = v101[v98];
      if (v102 == 255 || *(_DWORD *)(v151[v102] + 120) != *(_DWORD *)(v96 + 120))
      {
        uint64_t v103 = findOverflowCell(v96, v98);
        uint64_t v104 = ptrmapPutOvflPtr(v96, v103);
        if (v104) {
          break;
        }
      }
    }
    if (v100 == ++v98) {
      goto LABEL_138;
    }
  }
  uint64_t v17 = v104;
  uint64_t v86 = v9;
LABEL_158:
  unsigned int v29 = v121;
LABEL_161:
  free(v86);
  if (v133)
  {
    uint64_t v111 = v133;
    uint64_t v112 = v152;
    do
    {
      if (*(void *)v112) {
        sqlite3pager_unref(*(void *)(*(void *)v112 + 112));
      }
      v112 += 8;
      --v111;
    }
    while (v111);
  }
  if (v29)
  {
    uint64_t v113 = v29;
    uint64_t v114 = v150;
    do
    {
      if (*v114) {
        sqlite3pager_unref(*(void *)(*v114 + 112));
      }
      ++v114;
      --v113;
    }
    while (v113);
  }
  if (v137) {
    sqlite3pager_unref(*(void *)(v137 + 112));
  }
  return v17;
}

uint64_t assemblePage(uint64_t a1, signed int a2, const void **a3, int *a4)
{
  uint64_t v4 = a4;
  uint64_t v8 = a2;
  if (a2 < 1)
  {
    int v9 = 0;
  }
  else
  {
    int v9 = 0;
    long long v10 = a4;
    uint64_t v11 = v8;
    do
    {
      int v12 = *v10++;
      v9 += v12;
      --v11;
    }
    while (v11);
  }
  uint64_t v13 = *(unsigned __int16 *)(a1 + 14);
  uint64_t v14 = *(void *)(a1 + 112);
  *(_WORD *)(*(unsigned __int8 *)(a1 + 8) + v14 + 3) = bswap32(a2) >> 16;
  uint64_t result = allocateSpace(a1, v9);
  *(_WORD *)(a1 + 18) -= 2 * a2;
  if (a2 >= 1)
  {
    signed int v16 = result;
    uint64_t v17 = v13 + v14 + 1;
    do
    {
      *(_WORD *)(v17 - 1) = bswap32(v16) >> 16;
      uint64_t v18 = *a3++;
      uint64_t result = (uint64_t)memcpy((void *)(v14 + v16), v18, *v4);
      LODWORD(v18) = *v4++;
      v16 += (int)v18;
      v17 += 2;
      --v8;
    }
    while (v8);
  }
  *(_WORD *)(a1 + 20) = a2;
  return result;
}

uint64_t freePage(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  uint64_t v3 = *(void *)(v2 + 16);
  *(unsigned char *)a1 = 0;
  uint64_t v4 = *(void *)(a1 + 128);
  if (v4) {
    sqlite3pager_unref(*(void *)(v4 + 112));
  }
  *(void *)(a1 + 128) = 0;
  uint64_t result = sqlite3pager_write(*(void **)(v3 + 112));
  if (!result)
  {
    uint64_t v6 = *(void *)(v3 + 112);
    unsigned int v7 = bswap32(*(_DWORD *)(v6 + 36));
    *(_DWORD *)(v6 + 36) = bswap32(v7 + 1);
    if (!*(unsigned char *)(v2 + 31) || (uint64_t result = ptrmapPut(v2, *(_DWORD *)(a1 + 120), 2, 0), !result))
    {
      if (v7)
      {
        uint64_t v11 = 0;
        uint64_t result = getPage(v2, bswap32(*(_DWORD *)(*(void *)(v3 + 112) + 32)), &v11);
        if (!result)
        {
          uint64_t v8 = v11;
          uint64_t v9 = *(void *)(v11 + 112);
          int v10 = bswap32(*(_DWORD *)(v9 + 4));
          if (v10 >= (*(unsigned __int16 *)(v2 + 36) >> 2) - 8)
          {
            uint64_t result = sqlite3pager_write(*(void **)(a1 + 112));
            if (!result)
            {
              **(_DWORD **)(a1 + 112) = bswap32(*(_DWORD *)(v8 + 120));
              *(_DWORD *)(*(void *)(a1 + 112) + 4) = 0;
              *(_DWORD *)(*(void *)(v3 + 112) + 32) = bswap32(*(_DWORD *)(a1 + 120));
              goto LABEL_16;
            }
          }
          else
          {
            uint64_t result = sqlite3pager_write((void *)v9);
            if (!result)
            {
              *(_DWORD *)(*(void *)(v8 + 112) + 4) = bswap32(v10 + 1);
              *(_DWORD *)(*(void *)(v8 + 112) + 4 * v10 + 8) = bswap32(*(_DWORD *)(a1 + 120));
              sqlite3pager_dont_write(*(void *)v2, *(_DWORD *)(a1 + 120));
LABEL_16:
              sqlite3pager_unref(*(void *)(v8 + 112));
              return 0;
            }
          }
        }
      }
      else
      {
        uint64_t result = sqlite3pager_write(*(void **)(a1 + 112));
        if (!result)
        {
          **(void **)(a1 + 112) = 0;
          *(_DWORD *)(*(void *)(v3 + 112) + 32) = bswap32(*(_DWORD *)(a1 + 120));
        }
      }
    }
  }
  return result;
}

uint64_t reparentChildPages(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 4)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 104);
  unsigned int v4 = *(unsigned __int16 *)(a1 + 20);
  if (*(_WORD *)(a1 + 20))
  {
    uint64_t v5 = 0;
    unsigned int v6 = 0;
    do
    {
      if (!*(unsigned char *)(a1 + 4))
      {
        uint64_t result = reparentPage(v3, bswap32(*(_DWORD *)(*(void *)(a1 + 112)+ __rev16(*(unsigned __int16 *)(*(void *)(a1 + 112)+ *(unsigned __int16 *)(a1 + 14)+ v5)))), a1, v6);
        if (result) {
          return result;
        }
        unsigned int v4 = *(unsigned __int16 *)(a1 + 20);
      }
      ++v6;
      v5 += 2;
    }
    while (v6 < v4);
    if (*(unsigned char *)(a1 + 4)) {
      return 0;
    }
  }
  else
  {
    LOWORD(v6) = 0;
  }
  uint64_t result = reparentPage(v3, bswap32(*(_DWORD *)(*(unsigned __int8 *)(a1 + 8) + *(void *)(a1 + 112) + 8)), a1, v6);
  *(unsigned char *)(a1 + 1) = 0;
  return result;
}

uint64_t reparentPage(uint64_t a1, int a2, uint64_t a3, __int16 a4)
{
  if (!a2) {
    return 0;
  }
  if (*(unsigned __int8 *)(*(void *)a1 + 290) <= 1u
    && (uint64_t v7 = *(void *)(*(void *)a1 + 8 * (a2 & 0x7FF) + 416)) != 0)
  {
    while (*(_DWORD *)(v7 + 8) != a2)
    {
      uint64_t v7 = *(void *)(v7 + 16);
      if (!v7) {
        goto LABEL_6;
      }
    }
    if (*(_WORD *)(v7 + 78)) {
      ++*(_WORD *)(v7 + 78);
    }
    else {
      _page_ref((uint64_t *)v7);
    }
    uint64_t v11 = v7 + 88;
    uint64_t v12 = v11 + *(unsigned __int16 *)(a1 + 34);
    if (*(unsigned char *)v12)
    {
      uint64_t v13 = *(void *)(v12 + 128);
      if (v13 != a3)
      {
        if (v13) {
          sqlite3pager_unref(*(void *)(v13 + 112));
        }
        *(void *)(v12 + 128) = a3;
        if (a3)
        {
          uint64_t v14 = *(void *)(a3 + 112);
          if (*(_WORD *)(v14 - 10)) {
            ++*(_WORD *)(v14 - 10);
          }
          else {
            _page_ref((uint64_t *)(v14 - 88));
          }
        }
      }
      *(_WORD *)(v12 + 16) = a4;
    }
    sqlite3pager_unref(v11);
    if (!a3) {
      return 0;
    }
  }
  else
  {
LABEL_6:
    if (!a3) {
      return 0;
    }
  }
  if (!*(unsigned char *)(a1 + 31)) {
    return 0;
  }
  int v9 = *(_DWORD *)(a3 + 120);
  return ptrmapPut(a1, a2, 5, v9);
}

uint64_t allocateSpace(uint64_t a1, int a2)
{
  if (a2 <= 4) {
    unsigned int v2 = 4;
  }
  else {
    unsigned int v2 = a2;
  }
  unsigned int v3 = *(unsigned __int16 *)(a1 + 18);
  if (v2 > v3 || *(unsigned char *)(a1 + 2)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 112);
  *(_WORD *)(a1 + 18) = v3 - v2;
  uint64_t v7 = *(unsigned __int8 *)(a1 + 8);
  unsigned int v8 = *(unsigned __int8 *)(v6 + v7 + 7);
  if (v8 >= 0x3C)
  {
    uint64_t v15 = (_WORD *)(v7 + v6 + 5);
    signed int v16 = (unsigned __int8 *)(v7 + v6 + 6);
  }
  else
  {
    LODWORD(v4) = v7 + 1;
    while (1)
    {
      int v9 = (_WORD *)(v6 + v4);
      uint64_t v4 = __rev16((unsigned __int16)*v9);
      if (!v4) {
        break;
      }
      uint64_t v10 = v6 + v4;
      int v12 = *(unsigned __int8 *)(v10 + 2);
      uint64_t v11 = v10 + 2;
      int v13 = *(unsigned __int8 *)(v11 + 1);
      unsigned int v14 = v13 | (v12 << 8);
      if (v14 >= v2)
      {
        if (v14 >= v2 + 4)
        {
          *(_WORD *)uint64_t v11 = bswap32(v14 - v2) >> 16;
          return v4 - v2 + v14;
        }
        else
        {
          *int v9 = *(_WORD *)(v6 + v4);
          *(unsigned char *)(v6 + v7 + 7) = v8 - v2 + v13;
        }
        return v4;
      }
    }
    uint64_t v15 = (_WORD *)(v7 + v6 + 5);
    uint64_t v4 = __rev16((unsigned __int16)*v15) - v2;
    if (((*(unsigned __int8 *)(v7 + v6 + 3) << 9) | (2 * *(unsigned __int8 *)(v7 + v6 + 4)))
       + *(unsigned __int16 *)(a1 + 14) <= (int)v4)
      goto LABEL_19;
    signed int v16 = (unsigned __int8 *)(v7 + v6 + 6);
  }
  if (defragmentPage(a1)) {
    return 0;
  }
  uint64_t v4 = (*v16 | (*(unsigned __int8 *)v15 << 8)) - v2;
LABEL_19:
  *uint64_t v15 = bswap32(v4) >> 16;
  return v4;
}

uint64_t defragmentPage(uint64_t a1)
{
  unsigned int v2 = (char *)sqlite3Malloc(*(unsigned __int16 *)(*(void *)(a1 + 104) + 32));
  if (!v2) {
    return 7;
  }
  unsigned int v3 = v2;
  uint64_t v4 = *(unsigned __int8 *)(a1 + 8);
  unsigned int v5 = *(unsigned __int16 *)(a1 + 14);
  uint64_t v6 = *(unsigned __int16 *)(a1 + 20);
  uint64_t v7 = *(void *)(a1 + 112);
  uint64_t v8 = *(unsigned __int16 *)(*(void *)(a1 + 104) + 36);
  uint64_t v9 = __rev16(*(unsigned __int16 *)(v4 + v7 + 5));
  memcpy(&v2[v9], (const void *)(v7 + v9), v8 - v9);
  if (v6)
  {
    unsigned int v17 = v5;
    uint64_t v10 = v7 + v5 + 1;
    uint64_t v11 = v6;
    LODWORD(v12) = v8;
    do
    {
      int v13 = &v3[__rev16(*(unsigned __int16 *)(v10 - 1))];
      long long v18 = 0u;
      *(_OWORD *)size_t __n = 0u;
      parseCellPtr(a1, (uint64_t)v13, (uint64_t)&v18);
      unint64_t v12 = (int)v12 - (unint64_t)WORD1(__n[1]);
      memcpy((void *)(v7 + v12), v13, WORD1(__n[1]));
      *(_WORD *)(v10 - 1) = bswap32(v12) >> 16;
      v10 += 2;
      --v11;
    }
    while (v11);
    unsigned int v14 = v12 >> 8;
    LODWORD(v8) = v12;
    unsigned int v5 = v17;
  }
  else
  {
    unsigned int v14 = v8 >> 8;
    LOBYTE(v12) = v8;
  }
  *(unsigned char *)(v4 + v7 + 5) = v14;
  *(unsigned char *)(v4 + v7 + 6) = v12;
  signed int v16 = (unsigned char *)(v4 + v7);
  v16[1] = 0;
  v16[2] = 0;
  v16[7] = 0;
  bzero((void *)(v7 + v5 + 2 * v6), (int)(v8 - (v5 + 2 * v6)));
  free(v3);
  return 0;
}

uint64_t balance_quick(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = 0;
  unsigned int v15 = 0;
  uint64_t v4 = *(void *)(a1 + 104);
  int v5 = *(unsigned __int16 *)(a2 + 20);
  uint64_t result = allocatePage(v4, &v16, (int *)&v15, 0, 0);
  if (!result)
  {
    int v11 = 0;
    uint64_t v14 = *(void *)(a1 + 24);
    long long v17 = 0u;
    long long v18 = 0u;
    parseCellPtr(a1, v14, (uint64_t)&v17);
    int v13 = WORD5(v18);
    uint64_t v7 = v16;
    zeroPage(v16, **(unsigned __int8 **)(a1 + 112));
    assemblePage(v7, 1, (const void **)&v14, &v13);
    *(unsigned char *)(a1 + 2) = 0;
    *(void *)(v7 + 128) = a2;
    uint64_t v8 = *(void *)(a2 + 112);
    if (*(_WORD *)(v8 - 10)) {
      ++*(_WORD *)(v8 - 10);
    }
    else {
      _page_ref((uint64_t *)(v8 - 88));
    }
    memset(v12, 0, sizeof(v12));
    parseCellPtr(a1, *(void *)(a1 + 112)+ __rev16(*(unsigned __int16 *)(*(unsigned __int16 *)(a1 + 14)+ 2 * *(unsigned __int16 *)(a1 + 20)+ *(void *)(a1 + 112)- 2)), (uint64_t)v12);
    uint64_t result = fillInCell(a2, (uint64_t)&v17, 0, *((unint64_t *)&v12[0] + 1), 0, 0, &v11);
    if (!result)
    {
      uint64_t result = insertCell(a2, v5, (uint64_t)&v17, v11, 0, 4u);
      if (!result)
      {
        *(_DWORD *)findOverflowCell(a2, v5) = bswap32(*(_DWORD *)(a1 + 120));
        int v9 = v15;
        *(_DWORD *)(*(unsigned __int8 *)(a2 + 8) + *(void *)(a2 + 112) + 8) = bswap32(v15);
        if (!*(unsigned char *)(v4 + 31)
          || (uint64_t result = ptrmapPut(v4, v9, 5, *(_DWORD *)(a2 + 120)), !result)
          && (OverflowCell = findOverflowCell(v7, 0), uint64_t result = ptrmapPutOvflPtr(v7, OverflowCell), !result))
        {
          sqlite3pager_unref(*(void *)(v7 + 112));
          return balance(a2, 0);
        }
      }
    }
  }
  return result;
}

uint64_t ptrmapGet(uint64_t a1, int a2, unsigned char *a3, _DWORD *a4)
{
  uint64_t v12 = 0;
  unsigned int v7 = a2 - 2;
  unsigned int v8 = *(unsigned __int16 *)(a1 + 36) / 5u + 1;
  uint64_t result = sqlite3pager_get(*(void *)a1, (a2 - 2) / v8 * v8 + 2, &v12);
  if (!result)
  {
    uint64_t v10 = 5 * (v7 % (*(unsigned __int16 *)(a1 + 36) / 5u + 1));
    uint64_t v11 = v12;
    if (a3) {
      *a3 = *(unsigned char *)(v12 + (int)v10 - 5);
    }
    if (a4) {
      *a4 = bswap32(*(_DWORD *)(v10 + v11 - 4));
    }
    sqlite3pager_unref(v11);
    if (a3 && *a3 - 6 < 0xFFFFFFFB) {
      return 11;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t *getTempCursor(uint64_t *result, uint64_t a2)
{
  long long v3 = *((_OWORD *)result + 1);
  long long v2 = *((_OWORD *)result + 2);
  *(_OWORD *)a2 = *(_OWORD *)result;
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v2;
  long long v4 = *((_OWORD *)result + 3);
  long long v5 = *((_OWORD *)result + 4);
  long long v6 = *((_OWORD *)result + 5);
  *(void *)(a2 + 96) = result[12];
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 48) = v4;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v7 = *(void *)(a2 + 48);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 112);
    if (*(_WORD *)(v8 - 10)) {
      ++*(_WORD *)(v8 - 10);
    }
    else {
      return _page_ref((uint64_t *)(v8 - 88));
    }
  }
  return result;
}

uint64_t sqlite3BtreeCreateTable(uint64_t a1, unsigned int *a2)
{
  if (*(unsigned char *)(a1 + 24) == 2)
  {
    if (*(void *)(a1 + 8)) {
      return 6;
    }
    uint64_t v21 = 0;
    unsigned int v20 = 0;
    if (!*(unsigned char *)(a1 + 31))
    {
      uint64_t Page = allocatePage(a1, &v21, (int *)&v20, 1, 0);
      if (Page) {
        return Page;
      }
      uint64_t v7 = v21;
      goto LABEL_13;
    }
    unsigned int v19 = 0;
    uint64_t v18 = 0;
    uint64_t v22 = 0;
    uint64_t v6 = sqlite3pager_get(*(void *)a1, 1, &v22);
    if (v6) {
      return v6;
    }
    unsigned int v8 = bswap32(*(_DWORD *)(v22 + 52));
    sqlite3pager_unref(v22);
    unsigned int v9 = v8 + 1;
    unsigned int v20 = v8 + 1;
    if (!((v8 - 1) % (*(unsigned __int16 *)(a1 + 36) / 5u + 1)) || v8 == 0x40000000u / *(unsigned __int16 *)(a1 + 32))
    {
      unsigned int v9 = v8 + 2;
      unsigned int v20 = v8 + 2;
    }
    uint64_t Page = allocatePage(a1, &v18, (int *)&v19, v9, 1);
    if (!Page)
    {
      unsigned int v10 = v19;
      if (v19 == v9)
      {
        uint64_t v7 = v18;
        uint64_t v21 = v18;
LABEL_20:
        uint64_t updated = ptrmapPut(a1, v9, 1, 0);
        if (updated || (uint64_t updated = sqlite3BtreeUpdateMeta(a1, v9), updated))
        {
          uint64_t Page = updated;
          if (!v7) {
            return Page;
          }
          uint64_t v12 = *(void *)(v7 + 112);
LABEL_31:
          sqlite3pager_unref(v12);
          return Page;
        }
LABEL_13:
        zeroPage(v7, 8u);
        sqlite3pager_unref(*(void *)(v7 + 112));
        uint64_t Page = 0;
        *a2 = v20;
        return Page;
      }
      unsigned __int8 v17 = 0;
      LODWORD(v22) = 0;
      if (v18) {
        sqlite3pager_unref(*(void *)(v18 + 112));
      }
      uint64_t Page = getPage(a1, v9, &v21);
      if (!Page)
      {
        uint64_t v13 = ptrmapGet(a1, v9, &v17, &v22);
        uint64_t v14 = v21;
        if (v13)
        {
          uint64_t Page = v13;
          if (!v21) {
            return Page;
          }
          unsigned int v15 = (uint64_t *)(v21 + 112);
          goto LABEL_30;
        }
        uint64_t Page = relocatePage((uint64_t *)a1, v21, v17, v22, v10);
        if (v14) {
          sqlite3pager_unref(*(void *)(v14 + 112));
        }
        if (!Page)
        {
          uint64_t Page = getPage(a1, v9, &v21);
          if (!Page)
          {
            uint64_t v7 = v21;
            unsigned int v15 = (uint64_t *)(v21 + 112);
            uint64_t v16 = sqlite3pager_write(*(void **)(v21 + 112));
            if (!v16) {
              goto LABEL_20;
            }
            uint64_t Page = v16;
LABEL_30:
            uint64_t v12 = *v15;
            goto LABEL_31;
          }
        }
      }
    }
  }
  else if (*(unsigned char *)(a1 + 26))
  {
    return 8;
  }
  else
  {
    return 1;
  }
  return Page;
}

uint64_t relocatePage(uint64_t *a1, uint64_t a2, int a3, int a4, unsigned int a5)
{
  int v10 = *(_DWORD *)(a2 + 120);
  uint64_t v11 = *a1;
  uint64_t v12 = *(void *)(a2 + 112);
  int v13 = *(_DWORD *)(v12 - 80);
  if (*(unsigned char *)(v12 - 13)) {
    int v14 = *(_DWORD *)(v12 - 80);
  }
  else {
    int v14 = 0;
  }
  if (v13)
  {
    uint64_t v15 = *(void *)(v12 - 72);
    if (v15) {
      *(void *)(v15 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v12 - 64);
    }
    uint64_t v16 = *(void *)(v12 - 64);
    unsigned __int8 v17 = (void *)(v11 + 8 * (v13 & 0x7FF) + 416);
    if (v16) {
      unsigned __int8 v17 = (void *)(v16 + 16);
    }
    *unsigned __int8 v17 = v15;
    *(_DWORD *)(v12 - 80) = 0;
    *(void *)(v12 - 72) = 0;
    *(void *)(v12 - 64) = 0;
  }
  uint64_t v18 = v12 - 88;
  unsigned int v19 = (uint64_t *)(v11 + 8 * (a5 & 0x7FF) + 416);
  uint64_t v20 = *v19;
  if (*v19)
  {
    while (*(_DWORD *)(v20 + 8) != a5)
    {
      uint64_t v20 = *(void *)(v20 + 16);
      if (!v20) {
        goto LABEL_24;
      }
    }
    if (a5)
    {
      uint64_t v21 = *(void *)(v20 + 16);
      if (v21) {
        *(void *)(v21 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(v20 + 24);
      }
      uint64_t v22 = *(void *)(v20 + 24);
      if (v22) {
        uint64_t v23 = (void *)(v22 + 16);
      }
      else {
        uint64_t v23 = (void *)(v11 + 8 * (a5 & 0x7FF) + 416);
      }
      *uint64_t v23 = v21;
      *(_DWORD *)(v20 + 8) = 0;
      *(void *)(v20 + 16) = 0;
      *(void *)(v20 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    }
    *(unsigned char *)(v20 + 74) = 0;
    if (*(unsigned char *)(v20 + 75))
    {
      *(unsigned char *)(v12 - 16) = 1;
      *(unsigned char *)(v12 - 13) = 1;
    }
LABEL_24:
    uint64_t v20 = *v19;
    *(_DWORD *)(v12 - 80) = a5;
    if (v20)
    {
      *(void *)(v20 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v18;
      uint64_t v20 = *v19;
    }
  }
  else
  {
    *(_DWORD *)(v12 - 80) = a5;
  }
  *(void *)(v12 - 72) = v20;
  *unsigned int v19 = v18;
  *(void *)(v12 - 64) = 0;
  *(unsigned char *)(v12 - 14) = 1;
  *(unsigned char *)(v11 + 294) = 1;
  if (v14)
  {
    uint64_t v39 = 0;
    uint64_t v24 = sqlite3pager_get(v11, v14, &v39);
    if (v24) {
      return v24;
    }
    *(unsigned char *)(v11 + 293) = 1;
    uint64_t v26 = v39;
    *(unsigned char *)(v39 - 16) = 1;
    *(_WORD *)(v26 - 14) = 257;
    sqlite3pager_unref(v26);
  }
  *(_DWORD *)(a2 + 120) = a5;
  if ((a3 & 0xFFFFFFFB) == 1)
  {
    int v37 = v10;
    int v38 = a4;
    uint64_t v27 = *(void *)(a2 + 104);
    char v28 = *(unsigned char *)a2;
    initPage(a2, 0);
    if (*(_WORD *)(a2 + 20))
    {
      uint64_t v29 = 0;
      int v30 = 2 * *(unsigned __int16 *)(a2 + 20);
      while (1)
      {
        uint64_t v31 = (unsigned int *)(*(void *)(a2 + 112)
                             + __rev16(*(unsigned __int16 *)(*(void *)(a2 + 112) + *(unsigned __int16 *)(a2 + 14) + v29)));
        uint64_t v32 = ptrmapPutOvflPtr(a2, (uint64_t)v31);
        if (v32) {
          break;
        }
        if (!*(unsigned char *)(a2 + 4))
        {
          uint64_t v32 = ptrmapPut(v27, bswap32(*v31), 5, a5);
          if (v32) {
            break;
          }
        }
        v29 += 2;
        if (v30 == v29) {
          goto LABEL_37;
        }
      }
      uint64_t Page = v32;
      *(unsigned char *)a2 = v28;
      return Page;
    }
LABEL_37:
    if (*(unsigned char *)(a2 + 4))
    {
      *(unsigned char *)a2 = v28;
      int v10 = v37;
      a4 = v38;
    }
    else
    {
      uint64_t Page = ptrmapPut(v27, bswap32(*(_DWORD *)(*(unsigned __int8 *)(a2 + 8) + *(void *)(a2 + 112) + 8)), 5, a5);
      *(unsigned char *)a2 = v28;
      int v10 = v37;
      a4 = v38;
      if (Page) {
        return Page;
      }
    }
  }
  else
  {
    int v33 = bswap32(**(_DWORD **)(a2 + 112));
    if (v33)
    {
      uint64_t Page = ptrmapPut((uint64_t)a1, v33, 4, a5);
      if (Page) {
        return Page;
      }
    }
  }
  if (a3 == 1) {
    return 0;
  }
  uint64_t v39 = 0;
  uint64_t Page = getPage((uint64_t)a1, a4, &v39);
  if (Page) {
    return Page;
  }
  uint64_t v34 = v39;
  uint64_t v35 = sqlite3pager_write(*(void **)(v39 + 112));
  if (v35)
  {
    uint64_t Page = v35;
    sqlite3pager_unref(*(void *)(v34 + 112));
    return Page;
  }
  uint64_t Page = modifyPagePointer(v34, v10, a5, a3);
  sqlite3pager_unref(*(void *)(v34 + 112));
  if (Page) {
    return Page;
  }
  return ptrmapPut((uint64_t)a1, a5, a3, a4);
}

uint64_t sqlite3BtreeUpdateMeta(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 24) == 2)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 112);
    uint64_t result = sqlite3pager_write((void *)v3);
    if (!result) {
      *(_DWORD *)(v3 + 52) = bswap32(a2);
    }
  }
  else if (*(unsigned char *)(a1 + 26))
  {
    return 8;
  }
  else
  {
    return 1;
  }
  return result;
}

uint64_t modifyPagePointer(uint64_t a1, int a2, unsigned int a3, int a4)
{
  if (a4 == 4)
  {
    uint64_t v7 = *(unsigned int **)(a1 + 112);
    if (bswap32(*v7) != a2) {
      return 11;
    }
    uint64_t result = 0;
    *uint64_t v7 = bswap32(a3);
    return result;
  }
  char v10 = *(unsigned char *)a1;
  initPage(a1, 0);
  int v11 = *(unsigned __int16 *)(a1 + 20);
  if (*(_WORD *)(a1 + 20))
  {
    uint64_t v12 = 0;
    int v13 = 0;
    while (1)
    {
      uint64_t v14 = *(void *)(a1 + 112);
      uint64_t v15 = __rev16(*(unsigned __int16 *)(v14 + *(unsigned __int16 *)(a1 + 14) + v12));
      uint64_t v16 = (unsigned int *)(v14 + v15);
      if (a4 == 3)
      {
        long long v21 = 0u;
        long long v22 = 0u;
        parseCellPtr(a1, v14 + v15, (uint64_t)&v21);
        if (WORD4(v22))
        {
          unsigned __int8 v17 = (unsigned int *)((char *)v16 + WORD4(v22));
          if (bswap32(*v17) == a2)
          {
            *unsigned __int8 v17 = bswap32(a3);
            if (v13 == v11) {
              return 11;
            }
LABEL_21:
            uint64_t result = 0;
            *(unsigned char *)a1 = v10;
            return result;
          }
        }
      }
      else if (bswap32(*v16) == a2)
      {
        *uint64_t v16 = bswap32(a3);
        goto LABEL_15;
      }
      ++v13;
      v12 += 2;
      if (v11 == v13) {
        goto LABEL_16;
      }
    }
  }
  int v13 = 0;
LABEL_15:
  if (v13 != v11) {
    goto LABEL_21;
  }
LABEL_16:
  if (a4 == 5)
  {
    uint64_t v18 = *(unsigned __int8 *)(a1 + 8) + *(void *)(a1 + 112);
    unsigned int v20 = *(_DWORD *)(v18 + 8);
    unsigned int v19 = (_DWORD *)(v18 + 8);
    if (bswap32(v20) == a2)
    {
      *unsigned int v19 = bswap32(a3);
      goto LABEL_21;
    }
  }
  return 11;
}

uint64_t sqlite3BtreeSync(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24) != 2) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 31)) {
    goto LABEL_16;
  }
  uint64_t v2 = *(void *)a1;
  int v3 = *(unsigned __int16 *)(a1 + 32);
  uint64_t v25 = 0;
  unsigned int v23 = 0;
  uint64_t v22 = 0;
  unsigned int v4 = (52429 * v3) >> 18;
  unsigned int v5 = v4 + 1;
  int v6 = (int)(sqlite3pager_pagecount(v2) - 2) / (int)v5 * v5 + 2;
  if (v6 == sqlite3pager_pagecount(v2)) {
    return 11;
  }
  unsigned int v8 = bswap32(*(_DWORD *)(*(void *)(*(void *)(a1 + 16) + 112) + 36));
  if (!v8)
  {
LABEL_16:
    unsigned int v11 = 0;
    return sqlite3pager_sync(*(void *)a1, v11);
  }
  unsigned int v9 = sqlite3pager_pagecount(v2);
  unsigned int v10 = v9;
  unsigned int v11 = v9 - ((v4 + v8 - (v9 - 2) % v5) / v4 + v8);
  unsigned int v12 = 0x40000000u / *(unsigned __int16 *)(a1 + 32) + 1;
  if (v9 > v12 && v11 <= v12)
  {
    if ((v11 - 3) % (*(unsigned __int16 *)(a1 + 36) / 5u + 1)) {
      int v13 = -1;
    }
    else {
      int v13 = -2;
    }
    v11 += v13;
  }
  unsigned __int8 v26 = 0;
  int v24 = 0;
  int v14 = v11 + 1;
  if (v11 + 1 > v9)
  {
LABEL_14:
    uint64_t v7 = sqlite3pager_write(*(void **)(*(void *)(a1 + 16) + 112));
    if (v7) {
      goto LABEL_38;
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 16) + 112) + 32) = 0;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 16) + 112) + 36) = 0;
    return sqlite3pager_sync(*(void *)a1, v11);
  }
  int v15 = v11;
  while (1)
  {
    int v16 = v15;
    int v15 = v14;
    if ((v16 - 1) % v5)
    {
      if (v16 != 0x40000000u / *(unsigned __int16 *)(a1 + 32))
      {
        uint64_t Page = ptrmapGet(a1, v14, &v26, &v24);
        if (Page) {
          goto LABEL_37;
        }
        if (v26 != 2) {
          break;
        }
      }
    }
LABEL_33:
    int v14 = v15 + 1;
    if (v15 + 1 > v10) {
      goto LABEL_14;
    }
  }
  uint64_t Page = getPage(a1, v15, &v25);
  if (!Page)
  {
    do
    {
      if (v22)
      {
        sqlite3pager_unref(*(void *)(v22 + 112));
        uint64_t v22 = 0;
      }
      uint64_t v18 = allocatePage(a1, &v22, (int *)&v23, 0, 0);
      if (v18)
      {
        uint64_t v7 = v18;
        if (v25) {
          sqlite3pager_unref(*(void *)(v25 + 112));
        }
        goto LABEL_38;
      }
      unsigned int v19 = v23;
    }
    while (v23 > v11);
    if (v22) {
      sqlite3pager_unref(*(void *)(v22 + 112));
    }
    uint64_t v22 = 0;
    uint64_t v20 = v25;
    uint64_t v7 = relocatePage((uint64_t *)a1, v25, v26, v24, v19);
    if (v20) {
      sqlite3pager_unref(*(void *)(v20 + 112));
    }
    if (v7) {
      goto LABEL_38;
    }
    goto LABEL_33;
  }
LABEL_37:
  uint64_t v7 = Page;
LABEL_38:
  sqlite3pager_rollback(v2);
  return v7;
}

uint64_t findLockInfo(int a1, void *a2, void *a3)
{
  memset(&v12, 0, sizeof(v12));
  if (md_fstat_real(a1, &v12)) {
    return 1;
  }
  *((void *)&v14 + 1) = v12.st_ino;
  *(void *)&long long v14 = v12.st_dev;
  *((void *)&v13 + 1) = v12.st_ino;
  *(void *)&long long v13 = v12.st_dev;
  int v6 = sqlite3HashFind(lockHash, (uint64_t)&v14);
  if (v6)
  {
    uint64_t v7 = v6;
    ++v6[6];
  }
  else
  {
    unsigned int v10 = malloc_type_malloc(0x20uLL, 0xA2076A49uLL);
    if (!v10)
    {
      ++sqlite3_malloc_failed;
      return 1;
    }
    uint64_t v7 = v10;
    *unsigned int v10 = v14;
    *((_DWORD *)v10 + 6) = 1;
    *((void *)v10 + 2) = 0;
    if (sqlite3HashInsert((uint64_t)lockHash, v7, (uint64_t)v7))
    {
      free(v7);
      return 1;
    }
  }
  *a2 = v7;
  unsigned int v8 = sqlite3HashFind(openHash, (uint64_t)&v13);
  if (v8)
  {
    unsigned int v9 = v8;
    ++v8[4];
LABEL_8:
    uint64_t result = 0;
    *a3 = v9;
    return result;
  }
  unsigned int v11 = malloc_type_malloc(0x28uLL, 0xA2076A49uLL);
  if (v11)
  {
    unsigned int v9 = v11;
    *unsigned int v11 = v13;
    *((void *)v11 + 2) = 1;
    *((_DWORD *)v11 + 6) = 0;
    *((void *)v11 + 4) = 0;
    if (!sqlite3HashInsert((uint64_t)openHash, v9, (uint64_t)v9)) {
      goto LABEL_8;
    }
    free(v9);
  }
  else
  {
    ++sqlite3_malloc_failed;
  }
  releaseLockInfo((uint64_t)v7);
  return 1;
}

void releaseLockInfo(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24) - 1;
  *(_DWORD *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v1;
  if (!v1)
  {
    sqlite3HashInsert((uint64_t)&lockHash, (_OWORD *)a1, 0);
    free((void *)a1);
  }
}

uint64_t sqlite3OsOpenExclusive(char *a1, uint64_t a2, int a3)
{
  if (!access(a1, 0)) {
    return 14;
  }
  *(_DWORD *)(a2 + 40) = -1;
  int v11 = x_openat(-2, a1, 536873730, v6, v7, v8, v9, v10, 0x180u);
  *(_DWORD *)(a2 + 32) = v11;
  if (v11 < 0) {
    return 14;
  }
  uint64_t result = findLockInfo(v11, (void *)(a2 + 24), (void *)(a2 + 16));
  if (result)
  {
    close(*(_DWORD *)(a2 + 32));
    uint64_t v13 = 7;
  }
  else
  {
    uint64_t v13 = 0;
    *(_WORD *)(a2 + 36) = 256;
    if (!a3) {
      return result;
    }
  }
  unlink(a1);
  return v13;
}

uint64_t sqlite3OsOpenReadOnly(char *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8)
{
  *(_DWORD *)(a2 + 40) = -1;
  int v9 = x_openat(-2, a1, 0, a4, a5, a6, a7, a8, v11);
  *(_DWORD *)(a2 + 32) = v9;
  if (v9 < 0) {
    return 14;
  }
  uint64_t result = findLockInfo(v9, (void *)(a2 + 24), (void *)(a2 + 16));
  if (result)
  {
    close(*(_DWORD *)(a2 + 32));
    return 7;
  }
  else
  {
    *(_WORD *)(a2 + 36) = 256;
  }
  return result;
}

uint64_t sqlite3OsWrite(uint64_t a1, char *__buf, size_t __nbyte)
{
  if ((int)__nbyte < 1) {
    return 0;
  }
  int v3 = __nbyte;
  while (1)
  {
    int v6 = write(*(_DWORD *)(a1 + 32), __buf, v3);
    if (v6 < 1) {
      break;
    }
    __buf += v6;
    BOOL v7 = __OFSUB__(v3, v6);
    v3 -= v6;
    if ((v3 < 0) ^ v7 | (v3 == 0)) {
      return 0;
    }
  }
  return 13;
}

uint64_t sqlite3OsSync(uint64_t a1)
{
  if (full_fsync(*(_DWORD *)(a1 + 32))) {
    return 10;
  }
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 < 0) {
    return 0;
  }
  full_fsync(v3);
  close(*(_DWORD *)(a1 + 40));
  uint64_t result = 0;
  *(_DWORD *)(a1 + 40) = -1;
  return result;
}

uint64_t full_fsync(int a1)
{
  uint64_t result = fcntl(a1, 51, 0);
  if (result)
  {
    return fsync(a1);
  }
  return result;
}

uint64_t sqlite3OsCheckReservedLock(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1 && (uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t))v1) != 0)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 32);
    uint64_t v4 = *(void *)(v1 + 24);
    return v2(v4, v3);
  }
  else if (*(int *)(*(void *)(a1 + 24) + 20) > 1)
  {
    return 1;
  }
  else
  {
    uint64_t v7 = 0x300000000;
    long long v6 = xmmword_1BDA827A0;
    fcntl(*(_DWORD *)(a1 + 32), 7, &v6);
    return WORD2(v7) != 2;
  }
}

uint64_t sqlite3OsLock(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  if (v5)
  {
    long long v6 = *(uint64_t (**)(void, void, uint64_t))(v5 + 8);
    if (v6)
    {
      uint64_t result = v6(*(void *)(v5 + 24), *(unsigned int *)(a1 + 32), a2);
      if (result)
      {
        if (v2 == 4) {
          *(unsigned char *)(a1 + 36) = 3;
        }
      }
      else
      {
        *(unsigned char *)(a1 + 36) = v2;
      }
      return result;
    }
  }
  int v8 = *(unsigned __int8 *)(a1 + 36);
  if (v8 >= (int)a2) {
    return 0;
  }
  int v9 = *(_DWORD *)(v4 + 20);
  if (v9 != v8)
  {
    uint64_t result = 5;
    if ((int)a2 > 1 || v9 > 2) {
      return result;
    }
  }
  if (a2 == 1)
  {
    if ((v9 - 1) < 2)
    {
      uint64_t result = 0;
      *(unsigned char *)(a1 + 36) = 1;
      ++*(_DWORD *)(v4 + 16);
      ++*(_DWORD *)(*(void *)(a1 + 16) + 20);
      return result;
    }
    __int16 v10 = 1;
    uint64_t v13 = 1;
  }
  else
  {
    uint64_t v13 = 1;
    if (a2 != 4) {
      goto LABEL_26;
    }
    if (v8 > 2)
    {
LABEL_27:
      if (*(int *)(v4 + 16) > 1)
      {
        uint64_t result = 5;
        goto LABEL_37;
      }
      WORD2(v14) = 3;
      uint64_t v12 = 1073741826;
      uint64_t v13 = 510;
      goto LABEL_32;
    }
    __int16 v10 = 3;
  }
  WORD2(v14) = v10;
  uint64_t v12 = 0x40000000;
  if (fcntl(*(_DWORD *)(a1 + 32), 8, &v12)) {
    goto LABEL_20;
  }
  if (v2 == 1)
  {
    uint64_t v12 = 1073741826;
    uint64_t v13 = 510;
    int v11 = fcntl(*(_DWORD *)(a1 + 32), 8, &v12);
    uint64_t v12 = 0x40000000;
    uint64_t v13 = 1;
    WORD2(v14) = 2;
    fcntl(*(_DWORD *)(a1 + 32), 8, &v12);
    if (v11)
    {
LABEL_20:
      if (*__error() == 22) {
        return 22;
      }
      else {
        return 5;
      }
    }
    ++*(_DWORD *)(*(void *)(a1 + 16) + 20);
    *(_DWORD *)(v4 + 16) = 1;
LABEL_38:
    uint64_t result = 0;
    *(unsigned char *)(a1 + 36) = v2;
    *(_DWORD *)(v4 + 20) = v2;
    return result;
  }
LABEL_26:
  if (v2 == 4) {
    goto LABEL_27;
  }
  WORD2(v14) = 3;
  if (v2 == 2) {
    uint64_t v12 = 1073741825;
  }
LABEL_32:
  if (!fcntl(*(_DWORD *)(a1 + 32), 8, &v12)) {
    goto LABEL_38;
  }
  if (*__error() == 22) {
    uint64_t result = 22;
  }
  else {
    uint64_t result = 5;
  }
  if (v2 == 4)
  {
LABEL_37:
    *(unsigned char *)(a1 + 36) = 3;
    *(_DWORD *)(v4 + 20) = 3;
  }
  return result;
}

uint64_t sqlite3OsUnlock(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v16 = 0;
  long long v15 = 0uLL;
  if (v4 && (uint64_t v5 = *(uint64_t (**)(void, void, uint64_t))(v4 + 16)) != 0)
  {
    uint64_t v6 = v5(*(void *)(v4 + 24), *(unsigned int *)(a1 + 32), a2);
    if (!v6) {
      goto LABEL_25;
    }
  }
  else
  {
    int v7 = *(unsigned __int8 *)(a1 + 36);
    if (v7 > (int)a2)
    {
      uint64_t v8 = *(void *)(a1 + 24);
      if (v7 < 2)
      {
        uint64_t v6 = 0;
        if (a2)
        {
LABEL_25:
          *(unsigned char *)(a1 + 36) = v2;
          return v6;
        }
      }
      else
      {
        if (a2 == 1)
        {
          WORD2(v16) = 1;
          long long v15 = xmmword_1BDA827B0;
          if (fcntl(*(_DWORD *)(a1 + 32), 8, &v15)) {
            uint64_t v6 = 10;
          }
          else {
            uint64_t v6 = 0;
          }
        }
        else
        {
          uint64_t v6 = 0;
        }
        HIDWORD(v16) = 2;
        long long v15 = xmmword_1BDA827C0;
        fcntl(*(_DWORD *)(a1 + 32), 8, &v15);
        *(_DWORD *)(v8 + 20) = 1;
        if (v2) {
          goto LABEL_25;
        }
      }
      int v9 = *(_DWORD *)(v8 + 16) - 1;
      *(_DWORD *)(v8 + 16) = v9;
      if (!v9)
      {
        HIDWORD(v16) = 2;
        long long v15 = 0uLL;
        fcntl(*(_DWORD *)(a1 + 32), 8, &v15);
        *(_DWORD *)(v8 + 20) = 0;
      }
      uint64_t v10 = *(void *)(a1 + 16);
      int v11 = *(_DWORD *)(v10 + 20) - 1;
      *(_DWORD *)(v10 + 20) = v11;
      if (!v11 && *(int *)(v10 + 24) >= 1)
      {
        uint64_t v12 = 0;
        do
          close(*(_DWORD *)(*(void *)(v10 + 32) + 4 * v12++));
        while (v12 < *(int *)(v10 + 24));
        uint64_t v13 = *(void **)(v10 + 32);
        if (v13) {
          free(v13);
        }
        *(_DWORD *)(v10 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
        *(void *)(v10 + 32) = 0;
      }
      goto LABEL_25;
    }
    return 0;
  }
  return v6;
}

void sqlite3OsClose(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 37)) {
    return;
  }
  sqlite3OsUnlock(a1, 0);
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void (**)(void))(v2 + 48);
    if (v3) {
      v3();
    }
  }
  int v4 = *(_DWORD *)(a1 + 40);
  if ((v4 & 0x80000000) == 0) {
    close(v4);
  }
  *(_DWORD *)(a1 + 40) = -1;
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(_DWORD *)(v5 + 20))
  {
    int v6 = *(_DWORD *)(v5 + 24) + 1;
    *(_DWORD *)(v5 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v6;
    int v7 = *(void **)(v5 + 32);
    int v8 = 4 * v6;
    if (!v7)
    {
      int v9 = sqlite3Malloc(4 * v6);
      goto LABEL_18;
    }
    if (v8)
    {
      int v9 = malloc_type_realloc(v7, v8, 0x19CE345uLL);
      if (v8 < 1 || v9 != 0)
      {
LABEL_18:
        if (v9)
        {
          *(void *)(v5 + 32) = v9;
          v9[*(int *)(v5 + 24) - 1] = *(_DWORD *)(a1 + 32);
        }
        goto LABEL_21;
      }
      ++sqlite3_malloc_failed;
    }
    else
    {
      free(v7);
    }
  }
  else
  {
    close(*(_DWORD *)(a1 + 32));
  }
LABEL_21:
  releaseLockInfo(*(void *)(a1 + 24));
  uint64_t v11 = *(void *)(a1 + 16);
  int v12 = *(_DWORD *)(v11 + 16) - 1;
  *(_DWORD *)(v11 + 16) = v12;
  if (!v12)
  {
    sqlite3HashInsert((uint64_t)&openHash, (_OWORD *)v11, 0);
    uint64_t v13 = *(void **)(v11 + 32);
    if (v13) {
      free(v13);
    }
    free((void *)v11);
  }
  *(unsigned char *)(a1 + 37) = 0;
}

off_t sqlite3pager_pagecount(uint64_t a1)
{
  off_t result = *(unsigned int *)(a1 + 168);
  if ((result & 0x80000000) != 0)
  {
    memset(&v6, 0, sizeof(v6));
    if (md_fstat_real(*(_DWORD *)(a1 + 56), &v6))
    {
      off_t result = 0;
      *(unsigned char *)(a1 + 290) |= 0x10u;
    }
    else
    {
      uint64_t v3 = *(int *)(a1 + 224);
      off_t v4 = v6.st_size / v3;
      if (v6.st_size / v3 == 0x40000000 / (int)v3) {
        off_t v5 = v4 + 1;
      }
      else {
        off_t v5 = v6.st_size / v3;
      }
      if (*(unsigned char *)(a1 + 296)) {
        off_t result = v4;
      }
      else {
        off_t result = v5;
      }
      if (*(unsigned char *)(a1 + 289)) {
        *(_DWORD *)(a1 + 168) = result;
      }
    }
  }
  return result;
}

void memoryTruncate(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 360);
  if (v1)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 168);
    off_t v4 = (uint64_t *)(a1 + 360);
    do
    {
      if (*(_DWORD *)(v1 + 8) > v3)
      {
        if (*(__int16 *)(v1 + 78) < 1)
        {
          *off_t v4 = *(void *)(v1 + 48);
          unlinkPage(v1);
          free((void *)v1);
          --*(_DWORD *)(a1 + 232);
          goto LABEL_7;
        }
        bzero((void *)(v1 + 88), *(int *)(a1 + 224));
      }
      off_t v4 = (uint64_t *)(v1 + 48);
LABEL_7:
      uint64_t v1 = *v4;
    }
    while (*v4);
  }
}

uint64_t syncJournal(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 293)) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 291))
  {
    if (*(unsigned char *)(a1 + 288))
    {
      uint64_t result = sqlite3OsSync(a1 + 72);
      if (result) {
        return result;
      }
    }
    lseek(*(_DWORD *)(a1 + 104), *(void *)(a1 + 384) + 8, 0);
    __long long buf = bswap32(*(_DWORD *)(a1 + 192));
    p_long long buf = &__buf;
    int v5 = 4;
    do
    {
      int v6 = write(*(_DWORD *)(a1 + 104), p_buf, v5);
      if (v6 < 1) {
        return 13;
      }
      p_long long buf = (unsigned int *)((char *)p_buf + v6);
      BOOL v7 = __OFSUB__(v5, v6);
      v5 -= v6;
    }
    while (!((v5 < 0) ^ v7 | (v5 == 0)));
    lseek(*(_DWORD *)(a1 + 104), *(void *)(a1 + 376), 0);
    uint64_t result = sqlite3OsSync(a1 + 72);
    if (result) {
      return result;
    }
    *(unsigned char *)(a1 + 281) = 1;
  }
  *(unsigned char *)(a1 + 293) = 0;
  for (uint64_t i = *(void *)(a1 + 360); i; uint64_t i = *(void *)(i + 48))
    *(unsigned char *)(i + 75) = 0;
  uint64_t result = 0;
  *(void *)(a1 + 352) = *(void *)(a1 + 336);
  return result;
}

uint64_t pager_wait_on_lock(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 289) >= (int)a2) {
    return 0;
  }
  uint64_t v4 = a1 + 24;
  uint64_t v5 = 1;
  while (1)
  {
    uint64_t result = sqlite3OsLock(v4, a2);
    if (result != 5) {
      break;
    }
    uint64_t v7 = *(void *)(a1 + 328);
    if (v7)
    {
      if (*(void *)v7)
      {
        int v8 = (*(uint64_t (**)(void, uint64_t))v7)(*(void *)(v7 + 8), v5);
        uint64_t v5 = (v5 + 1);
        if (v8) {
          continue;
        }
      }
    }
    return 5;
  }
  if (!result) {
    *(unsigned char *)(a1 + 289) = a2;
  }
  return result;
}

uint64_t unlinkPage(uint64_t result)
{
  uint64_t v1 = *(void **)result;
  if (*(void *)(*(void *)result + 352) == result)
  {
    uint64_t v2 = result;
    do
      uint64_t v2 = *(void *)(v2 + 32);
    while (v2 && *(unsigned char *)(v2 + 75));
    v1[44] = v2;
  }
  uint64_t v5 = *(void *)(result + 32);
  uint64_t v4 = *(void *)(result + 40);
  unsigned int v3 = (uint64_t *)(result + 32);
  if (v4)
  {
    *(void *)(v4 + 32) = v5;
    uint64_t v5 = *v3;
  }
  else
  {
    v1[42] = v5;
  }
  if (v5) {
    int v6 = (void *)(v5 + 40);
  }
  else {
    int v6 = v1 + 43;
  }
  *int v6 = v4;
  *unsigned int v3 = 0;
  *(void *)(result + 40) = 0;
  int v7 = *(_DWORD *)(result + 8);
  if (v7)
  {
    uint64_t v8 = *(void *)(result + 16);
    if (v8) {
      *(void *)(v8 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(result + 24);
    }
    uint64_t v9 = *(void *)(result + 24);
    uint64_t v10 = &v1[(v7 & 0x7FF) + 52];
    if (v9) {
      uint64_t v10 = (void *)(v9 + 16);
    }
    *uint64_t v10 = v8;
    *(_DWORD *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  }
  return result;
}

void sqlite3pager_close(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 289);
  if ((v2 - 4) >= 2)
  {
    if (v2 == 1) {
      goto LABEL_5;
    }
    if (v2 != 2) {
      goto LABEL_7;
    }
  }
  sqlite3pager_rollback(a1);
LABEL_5:
  if (!*(unsigned char *)(a1 + 296)) {
    sqlite3OsUnlock(a1 + 24, 0);
  }
LABEL_7:
  unsigned int v3 = *(void **)(a1 + 360);
  if (!v3)
  {
    sqlite3OsClose(a1 + 24);
LABEL_12:
    free((void *)a1);
    return;
  }
  do
  {
    uint64_t v4 = (void *)v3[6];
    free(v3);
    unsigned int v3 = v4;
  }
  while (v4);
  sqlite3OsClose(a1 + 24);
  if (a1) {
    goto LABEL_12;
  }
}

uint64_t sqlite3pager_rollback(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v2 = v1;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(v1 + 296))
  {
    for (uint64_t i = *(void *)(v1 + 360); i; uint64_t i = *(void *)(i + 48))
    {
      if (*(unsigned char *)(i + 74))
      {
        uint64_t v4 = i + 88 + *(int *)(v2 + 204) + (uint64_t)*(int *)(v2 + 228);
        if (*(void *)v4)
        {
          memcpy((void *)(i + 88), *(const void **)v4, *(int *)(v2 + 224));
          if (*(void *)v4) {
            free(*(void **)v4);
          }
        }
        uint64_t v5 = *(void **)(v4 + 8);
        if (v5) {
          free(v5);
        }
        *(void *)uint64_t v4 = 0;
        *(void *)(v4 + 8) = 0;
        *(void *)(i + 56) = 0;
        *(void *)(i + 64) = 0;
        *(_DWORD *)(i + 71) = 0;
        int v6 = *(void (**)(uint64_t, void))(v2 + 216);
        if (v6) {
          v6(i + 88, *(unsigned int *)(v2 + 224));
        }
      }
    }
    *(void *)(v2 + 368) = 0;
    *(_DWORD *)(v2 + 168) = *(_DWORD *)(v2 + 172);
    memoryTruncate(v2);
    uint64_t result = 0;
    *(unsigned char *)(v2 + 285) = 0;
    *(unsigned char *)(v2 + 289) = 1;
    return result;
  }
  if (!*(unsigned char *)(v1 + 294) || !*(unsigned char *)(v1 + 280))
  {
    uint64_t result = pager_unwritelock(v1);
    goto LABEL_34;
  }
  unsigned int v8 = *(unsigned __int8 *)(v1 + 290);
  unsigned int v9 = *(unsigned __int8 *)(v1 + 289);
  if (v8 >= 2)
  {
    if (v9 >= 4)
    {
      pager_playback(v1);
      unsigned int v8 = *(unsigned __int8 *)(v2 + 290);
    }
    unsigned int v15 = ((int)(v8 << 29) >> 31) & 0xF;
    if ((v8 & 0x10) != 0) {
      unsigned int v15 = 10;
    }
    if (v8) {
      unsigned int v15 = 13;
    }
    if ((v8 & 2) != 0) {
      unsigned int v15 = 7;
    }
    if ((v8 & 8) != 0) {
      return 11;
    }
    else {
      return v15;
    }
  }
  if (v9 != 2)
  {
    uint64_t result = pager_playback(v1);
LABEL_47:
    if (result) {
      goto LABEL_48;
    }
    goto LABEL_34;
  }
  uint64_t v10 = *(void *)(v1 + 360);
  if (!v10)
  {
LABEL_32:
    uint64_t result = pager_unwritelock(v2);
    goto LABEL_47;
  }
  while (!*(unsigned char *)(v10 + 74))
  {
LABEL_31:
    uint64_t v10 = *(void *)(v10 + 48);
    if (!v10) {
      goto LABEL_32;
    }
  }
  int v11 = *(_DWORD *)(v10 + 8);
  LODWORD(v12) = *(_DWORD *)(v2 + 224);
  if (v11 > *(_DWORD *)(v2 + 172))
  {
    __memset_chk();
    goto LABEL_23;
  }
  lseek(*(_DWORD *)(v2 + 56), (int)v12 * (unint64_t)(v11 - 1), 0);
  int v13 = *(_DWORD *)(v2 + 224);
  if (v13 == read(*(_DWORD *)(v2 + 56), __s1, v13))
  {
    LODWORD(v12) = *(_DWORD *)(v2 + 224);
LABEL_23:
    if (*(_WORD *)(v10 + 78))
    {
      size_t v12 = (int)v12;
      if (!memcmp(__s1, (const void *)(v10 + 88), (int)v12))
      {
LABEL_30:
        *(_WORD *)(v10 + 74) = 0;
        goto LABEL_31;
      }
    }
    else
    {
      size_t v12 = (int)v12;
    }
    memcpy((void *)(v10 + 88), __s1, v12);
    uint64_t v14 = *(void (**)(uint64_t, void))(v2 + 216);
    if (v14) {
      v14(v10 + 88, *(unsigned int *)(v2 + 224));
    }
    else {
      bzero((void *)(v10 + 88 + *(int *)(v2 + 228)), *(int *)(v2 + 204));
    }
    goto LABEL_30;
  }
  pager_unwritelock(v2);
LABEL_48:
  *(unsigned char *)(v2 + 290) |= 8u;
  uint64_t result = 11;
LABEL_34:
  *(_DWORD *)(v2 + 168) = -1;
  return result;
}

uint64_t pager_unwritelock(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 289) < 2u) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 285))
  {
    if (!*(unsigned char *)(a1 + 296))
    {
      lseek(*(_DWORD *)(a1 + 152), 0, 0);
      unsigned int v3 = *(void **)(a1 + 312);
      if (v3) {
        free(v3);
      }
      *(void *)(a1 + 312) = 0;
    }
    uint64_t v4 = *(void *)(a1 + 368);
    if (v4)
    {
      do
      {
        uint64_t v5 = *(void *)(v4 + 56);
        *(unsigned char *)(v4 + 73) = 0;
        *(void *)(v4 + 56) = 0;
        *(void *)(v4 + 64) = 0;
        if (*(unsigned char *)(a1 + 296))
        {
          uint64_t v6 = v4 + *(int *)(a1 + 204) + (uint64_t)*(int *)(a1 + 228);
          int v7 = *(void **)(v6 + 96);
          if (v7) {
            free(v7);
          }
          *(void *)(v6 + 96) = 0;
        }
        uint64_t v4 = v5;
      }
      while (v5);
    }
    *(_DWORD *)(a1 + 200) = 0;
    *(unsigned char *)(a1 + 285) = 0;
    *(void *)(a1 + 368) = 0;
  }
  *(unsigned char *)(a1 + 286) = 0;
  if (*(unsigned char *)(a1 + 284))
  {
    sqlite3OsClose(a1 + 120);
    *(unsigned char *)(a1 + 284) = 0;
  }
  if (*(unsigned char *)(a1 + 280))
  {
    sqlite3OsClose(a1 + 72);
    *(unsigned char *)(a1 + 280) = 0;
    unlink(*(const char **)(a1 + 8));
    unsigned int v8 = *(void **)(a1 + 304);
    if (v8) {
      free(v8);
    }
    *(void *)(a1 + 304) = 0;
    for (uint64_t i = *(void *)(a1 + 360); i; uint64_t i = *(void *)(i + 48))
    {
      *(unsigned char *)(i + 72) = 0;
      *(_WORD *)(i + 74) = 0;
    }
    *(unsigned char *)(a1 + 294) = 0;
    *(_DWORD *)(a1 + 192) = 0;
  }
  uint64_t result = sqlite3OsUnlock(a1 + 24, 1);
  *(unsigned char *)(a1 + 289) = 1;
  *(_DWORD *)(a1 + 172) = 0;
  *(unsigned char *)(a1 + 320) = 0;
  return result;
}

uint64_t pager_playback(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  int v45 = 0;
  BOOL v44 = 0;
  memset(__src, 0, 144);
  if (md_fstat_real(*(_DWORD *)(v1 + 104), __src))
  {
    uint64_t Only = 10;
    goto LABEL_3;
  }
  off_t st_size = __src[0].st_size;
  unsigned int v46 = 0;
  uint64_t MasterJournal = readMasterJournal(v1 + 72, (void **)&v44);
  uint64_t v6 = v44;
  if (MasterJournal)
  {
    uint64_t Only = MasterJournal;
    if (v44) {
      free(v44);
    }
    uint64_t v6 = 0;
    BOOL v44 = 0;
    if (Only != 101) {
      goto LABEL_3;
    }
    goto LABEL_12;
  }
  if (!v44 || !access(v44, 0))
  {
    lseek(*(_DWORD *)(v1 + 104), 0, 0);
    uint64_t v14 = (unsigned int *)(v1 + 196);
    for (*(void *)(v1 + 376) = 0; ; *(void *)(v1 + 376) = st_size)
    {
      do
      {
LABEL_19:
        seekJournalHdr(v1);
        if (*(void *)(v1 + 376) + *(int *)(v1 + 408) > st_size) {
          goto LABEL_12;
        }
        int v15 = read(*(_DWORD *)(v1 + 104), __src, 8uLL);
        if (v15 == 8) {
          uint64_t Only = 0;
        }
        else {
          uint64_t Only = 10;
        }
        if (v15 != 8) {
          goto LABEL_29;
        }
        if (*(void *)&__src[0].st_dev != 0xD763A120F905D5D9) {
          goto LABEL_12;
        }
        uint64_t Only = read32bits(*(_DWORD *)(v1 + 104), &v46);
        if (Only
          || (uint64_t Only = read32bits(*(_DWORD *)(v1 + 104), v14), Only)
          || (uint64_t Only = read32bits(*(_DWORD *)(v1 + 104), (unsigned int *)&v45), Only)
          || (uint64_t Only = read32bits(*(_DWORD *)(v1 + 104), (unsigned int *)(v1 + 408)), Only))
        {
LABEL_29:
          if (Only)
          {
            if (Only == 101) {
              goto LABEL_12;
            }
            goto LABEL_13;
          }
        }
        else
        {
          off_t v29 = *(void *)(v1 + 376) + *(int *)(v1 + 408);
          *(void *)(v1 + 376) = v29;
          lseek(*(_DWORD *)(v1 + 104), v29, 0);
        }
        LODWORD(v16) = v46;
        if (v46 == -1)
        {
          uint64_t v16 = (st_size - *(int *)(v1 + 408)) / (*(int *)(v1 + 224) + 8);
          unsigned int v46 = v16;
        }
        if (*(unsigned __int8 *)(v1 + 289) >= 4u && *(void *)(v1 + 376) == *(_DWORD *)(v1 + 408))
        {
          int v17 = v45;
          if (ftruncate(*(_DWORD *)(v1 + 56), *(int *)(v1 + 224) * (uint64_t)v45))
          {
            uint64_t Only = 10;
            if (v6) {
              goto LABEL_97;
            }
            goto LABEL_3;
          }
          *(_DWORD *)(v1 + 168) = v17;
        }
      }
      while (!v16);
      int v18 = 0;
      while (1)
      {
        LODWORD(v48[0]) = 0;
        uint64_t Only = read32bits(*(_DWORD *)(v1 + 104), (unsigned int *)v48);
        if (Only) {
          goto LABEL_64;
        }
        int v19 = *(_DWORD *)(v1 + 224);
        int v20 = read(*(_DWORD *)(v1 + 104), __src, v19);
        BOOL v21 = v19 == v20;
        uint64_t Only = v19 == v20 ? 0 : 10;
        if (!v21) {
          goto LABEL_64;
        }
        uint64_t v22 = *(int *)(v1 + 224);
        *(void *)(v1 + 376) += v22 + 4;
        int v23 = v48[0];
        if (!LODWORD(v48[0]) || LODWORD(v48[0]) == 0x40000000 / (int)v22 + 1) {
          goto LABEL_68;
        }
        if (LODWORD(v48[0]) <= *(_DWORD *)(v1 + 168)) {
          break;
        }
LABEL_65:
        if (++v18 == v16) {
          goto LABEL_19;
        }
      }
      LODWORD(__s1) = 0;
      uint64_t Only = read32bits(*(_DWORD *)(v1 + 104), (unsigned int *)&__s1);
      if (!Only)
      {
        *(void *)(v1 + 376) += 4;
        int v24 = *(_DWORD *)(v1 + 196);
        uint64_t v25 = *(unsigned int *)(v1 + 224);
        if ((int)v25 >= 201)
        {
          unint64_t v26 = v25 + 200;
          do
          {
            v24 += *((char *)&__src[0].st_dev + (v26 - 400));
            v26 -= 200;
          }
          while (v26 > 0x190);
        }
        if (v24 != __s1) {
          continue;
        }
        uint64_t v43 = v14;
        for (uint64_t i = *(void *)(v1 + 8 * (v23 & 0x7FF) + 416); i; uint64_t i = *(void *)(i + 16))
        {
          if (*(_DWORD *)(i + 8) == v23) {
            break;
          }
        }
        if (*(unsigned __int8 *)(v1 + 289) < 4u)
        {
          uint64_t Only = 0;
        }
        else
        {
          lseek(*(_DWORD *)(v1 + 56), (int)v25 * (unint64_t)(v23 - 1), 0);
          uint64_t Only = sqlite3OsWrite(v1 + 24, (char *)__src, *(unsigned int *)(v1 + 224));
        }
        if (i)
        {
          memcpy((void *)(i + 88), __src, *(int *)(v1 + 224));
          char v28 = *(void (**)(uint64_t, void))(v1 + 208);
          if (v28) {
            v28(i + 88, *(unsigned int *)(v1 + 224));
          }
          if (*(unsigned __int8 *)(v1 + 289) >= 4u) {
            *(_WORD *)(i + 74) = 0;
          }
        }
        uint64_t v14 = v43;
      }
LABEL_64:
      if (!Only) {
        goto LABEL_65;
      }
      if (Only != 101) {
        goto LABEL_13;
      }
LABEL_68:
      ;
    }
  }
  free(v6);
  uint64_t v6 = 0;
  BOOL v44 = 0;
LABEL_12:
  uint64_t Only = pager_unwritelock(v1);
LABEL_13:
  if (v6)
  {
    if (Only) {
      goto LABEL_97;
    }
    *(_OWORD *)BOOL v49 = 0u;
    memset(v48, 0, sizeof(v48));
    uint64_t Only = sqlite3OsOpenReadOnly(v6, (uint64_t)v48, v7, v8, v9, v10, v11, v12);
    if (!Only)
    {
      memset(__src, 0, 144);
      int v13 = v49[0];
      if (md_fstat_real(v49[0], __src))
      {
        uint64_t Only = 10;
      }
      else
      {
        off_t v30 = __src[0].st_size;
        if (__src[0].st_size < 1)
        {
          uint64_t v31 = 0;
LABEL_87:
          unlink(v6);
LABEL_88:
          uint64_t Only = 0;
          if (v31) {
LABEL_94:
          }
            free(v31);
        }
        else
        {
          __s1 = 0;
          uint64_t v31 = sqlite3Malloc(__src[0].st_size);
          if (v31)
          {
            int v32 = read(v13, v31, (int)v30);
            if (v32 == v30) {
              uint64_t Only = 0;
            }
            else {
              uint64_t Only = 10;
            }
            if (v32 == v30)
            {
              int v33 = (char *)v31;
              while (1)
              {
                if (!access(v33, 0))
                {
                  memset(__src, 0, 48);
                  uint64_t v40 = sqlite3OsOpenReadOnly(v33, (uint64_t)__src, v34, v35, v36, v37, v38, v39);
                  if (v40)
                  {
                    uint64_t Only = v40;
                    goto LABEL_94;
                  }
                  uint64_t Only = readMasterJournal((uint64_t)__src, (void **)&__s1);
                  sqlite3OsClose((uint64_t)__src);
                  if (Only) {
                    break;
                  }
                  int v41 = __s1;
                  if (__s1)
                  {
                    int v42 = strcmp(__s1, v6);
                    free(v41);
                    if (!v42) {
                      goto LABEL_88;
                    }
                  }
                }
                v33 += strlen(v33) + 1;
                if (v33 - (unsigned char *)v31 >= v30) {
                  goto LABEL_87;
                }
              }
            }
          }
          else
          {
            uint64_t Only = 7;
          }
          if (v31) {
            goto LABEL_94;
          }
        }
      }
      sqlite3OsClose((uint64_t)v48);
    }
    uint64_t v6 = v44;
    if (v44) {
LABEL_97:
    }
      free(v6);
  }
LABEL_3:
  *(_DWORD *)(v1 + 408) = 512;
  return Only;
}

uint64_t readMasterJournal(uint64_t a1, void **a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  memset(&v18, 0, sizeof(v18));
  if (md_fstat_real(*(_DWORD *)(a1 + 32), &v18)) {
    return 10;
  }
  off_t v5 = v18.st_size - 16;
  if (v18.st_size < 16) {
    return 0;
  }
  lseek(*(_DWORD *)(a1 + 32), v18.st_size - 16, 0);
  unsigned int v17 = 0;
  uint64_t v4 = read32bits(*(_DWORD *)(a1 + 32), &v17);
  if (!v4)
  {
    unsigned int v16 = 0;
    uint64_t v4 = read32bits(*(_DWORD *)(a1 + 32), &v16);
    if (!v4)
    {
      int v6 = read(*(_DWORD *)(a1 + 32), &v18, 8uLL);
      uint64_t v4 = v6 == 8 ? 0 : 10;
      if (v6 == 8)
      {
        if (*(void *)&v18.st_dev != 0xD763A120F905D5D9) {
          return 0;
        }
        uint64_t v7 = v17;
        lseek(*(_DWORD *)(a1 + 32), v5 - v17, 0);
        int v8 = sqlite3Malloc((int)v7 + 1);
        *a2 = v8;
        if (v8)
        {
          int v9 = read(*(_DWORD *)(a1 + 32), v8, (int)v7);
          if (v7 == v9) {
            uint64_t v4 = 0;
          }
          else {
            uint64_t v4 = 10;
          }
          if (v7 == v9)
          {
            unsigned int v10 = v16;
            int v11 = *a2;
            if (v7)
            {
              int v12 = (char *)*a2;
              uint64_t v13 = v7;
              do
              {
                int v14 = *v12++;
                v10 -= v14;
                --v13;
              }
              while (v13);
            }
            if (!v10)
            {
              uint64_t v4 = 0;
              v11[v7] = 0;
              return v4;
            }
            if (v11) {
              free(v11);
            }
            uint64_t v4 = 0;
          }
          else if (*a2)
          {
            free(*a2);
          }
          *a2 = 0;
        }
        else
        {
          return 7;
        }
      }
    }
  }
  return v4;
}

uint64_t read32bits(int a1, unsigned int *a2)
{
  unsigned int v5 = 0;
  if (read(a1, &v5, 4uLL) == 4)
  {
    uint64_t result = 0;
    unsigned int v4 = bswap32(v5);
  }
  else
  {
    uint64_t result = 10;
    unsigned int v4 = v5;
  }
  *a2 = v4;
  return result;
}

off_t seekJournalHdr(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 376);
  if (v1) {
    off_t v2 = *(int *)(a1 + 408) + *(int *)(a1 + 408) * ((v1 - 1) / *(int *)(a1 + 408));
  }
  else {
    off_t v2 = 0;
  }
  *(void *)(a1 + 376) = v2;
  return lseek(*(_DWORD *)(a1 + 104), v2, 0);
}

uint64_t *_page_ref(uint64_t *result)
{
  __int16 v1 = *((_WORD *)result + 39);
  if (!v1)
  {
    uint64_t v2 = *result;
    if (*(uint64_t **)(*result + 352) == result)
    {
      unsigned int v3 = result;
      do
        unsigned int v3 = (uint64_t *)v3[4];
      while (v3 && *((unsigned char *)v3 + 75));
      *(void *)(v2 + 352) = v3;
    }
    uint64_t v5 = result[4];
    uint64_t v4 = result[5];
    if (v4)
    {
      *(void *)(v4 + 32) = v5;
      uint64_t v5 = result[4];
    }
    else
    {
      *(void *)(v2 + 336) = v5;
    }
    if (v5) {
      int v6 = (void *)(v5 + 40);
    }
    else {
      int v6 = (void *)(v2 + 344);
    }
    *int v6 = v4;
    ++*(_DWORD *)(v2 + 236);
  }
  *((_WORD *)result + 39) = v1 + 1;
  return result;
}

uint64_t sqlite3pager_get(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = (a2 - 1);
  if (a2 < 1) {
    return 11;
  }
  *a3 = 0;
  unsigned int v6 = *(unsigned __int8 *)(a1 + 290);
  if (v6 >= 2) {
    goto LABEL_69;
  }
  if (*(_DWORD *)(a1 + 236) || *(unsigned char *)(a1 + 296))
  {
    for (uint64_t i = *(void *)(a1 + 8 * (a2 & 0x7FF) + 416); i; uint64_t i = *(void *)(i + 16))
    {
      if (*(_DWORD *)(i + 8) == a2) {
        break;
      }
    }
    if (*(unsigned char *)(a1 + 296) && !*(unsigned char *)(a1 + 289))
    {
      *(unsigned char *)(a1 + 289) = 1;
      if (i)
      {
LABEL_11:
        ++*(_DWORD *)(a1 + 244);
        if (*(_WORD *)(i + 78)) {
          ++*(_WORD *)(i + 78);
        }
        else {
          _page_ref((uint64_t *)i);
        }
        goto LABEL_17;
      }
    }
    else if (i)
    {
      goto LABEL_11;
    }
  }
  else
  {
    if (!*(unsigned char *)(a1 + 283))
    {
      uint64_t v9 = pager_wait_on_lock(a1, 1);
      if (v9) {
        return v9;
      }
    }
    if (*(unsigned char *)(a1 + 282)
      && !access(*(const char **)(a1 + 8), 0)
      && !sqlite3OsCheckReservedLock(a1 + 24))
    {
      uint64_t v33 = sqlite3OsLock(a1 + 24, 4);
      if (v33)
      {
        uint64_t v9 = v33;
        sqlite3OsUnlock(a1 + 24, 0);
        *(unsigned char *)(a1 + 289) = 0;
        return v9;
      }
      *(unsigned char *)(a1 + 289) = 4;
      if (sqlite3OsOpenReadOnly(*(char **)(a1 + 8), a1 + 72, v34, v35, v36, v37, v38, v39))
      {
        sqlite3OsUnlock(a1 + 24, 0);
        *(unsigned char *)(a1 + 289) = 0;
        return 5;
      }
      *(_WORD *)(a1 + 280) = 1;
      *(unsigned char *)(a1 + 320) = 0;
      *(void *)(a1 + 376) = 0;
      *(void *)(a1 + 384) = 0;
      uint64_t v9 = pager_playback(a1);
      if (v9) {
        return v9;
      }
    }
  }
  ++*(_DWORD *)(a1 + 248);
  if (*(_DWORD *)(a1 + 232) >= *(_DWORD *)(a1 + 240) && *(void *)(a1 + 336) && !*(unsigned char *)(a1 + 296))
  {
    uint64_t i = *(void *)(a1 + 352);
    if (!i)
    {
      if (syncJournal(a1)) {
        goto LABEL_89;
      }
      if (*(unsigned char *)(a1 + 288))
      {
        *(_DWORD *)(a1 + 192) = 0;
        if (writeJournalHdr(a1)) {
          goto LABEL_89;
        }
      }
      uint64_t i = *(void *)(a1 + 336);
    }
    if (!*(unsigned char *)(i + 74) || (*(void *)(i + 80) = 0, !pager_write_pagelist(i)))
    {
      if (*(unsigned char *)(i + 76)) {
        *(unsigned char *)(a1 + 295) = 1;
      }
      unlinkPage(i);
      ++*(_DWORD *)(a1 + 252);
LABEL_33:
      *(_DWORD *)(i + 8) = a2;
      uint64_t v14 = *(void *)(a1 + 304);
      if (v14)
      {
        if (*(_DWORD *)(a1 + 172) >= a2) {
          LODWORD(v14) = (*(unsigned __int8 *)(v14 + ((unint64_t)a2 >> 3)) >> (a2 & 7)) & 1;
        }
        else {
          LOBYTE(v14) = 0;
        }
      }
      *(unsigned char *)(i + 72) = v14;
      *(unsigned char *)(i + 75) = 0;
      uint64_t v15 = *(void *)(a1 + 312);
      if (v15
        && *(_DWORD *)(a1 + 176) >= a2
        && ((*(unsigned __int8 *)(v15 + ((unint64_t)a2 >> 3)) >> (a2 & 7)) & 1) != 0)
      {
        if (!*(unsigned char *)(i + 73))
        {
          uint64_t v16 = *(void *)i;
          *(void *)(i + 64) = 0;
          uint64_t v17 = *(void *)(v16 + 368);
          if (v17) {
            *(void *)(v17 + 64) = i;
          }
          *(void *)(i + 56) = v17;
          *(void *)(v16 + 368) = i;
          *(unsigned char *)(i + 73) = 1;
        }
      }
      else if (*(unsigned char *)(i + 73))
      {
        uint64_t v20 = *(void *)(i + 56);
        uint64_t v19 = *(void *)(i + 64);
        stat v18 = (uint64_t *)(i + 56);
        if (v19)
        {
          *(void *)(v19 + 56) = v20;
          uint64_t v20 = *v18;
        }
        else
        {
          *(void *)(*(void *)i + 368) = v20;
        }
        if (v20) {
          *(void *)(v20 + 64) = v19;
        }
        *(unsigned char *)(i + 73) = 0;
        *stat v18 = 0;
        *(void *)(i + 64) = 0;
      }
      *(unsigned char *)(i + 74) = 0;
      *(_WORD *)(i + 78) = 1;
      ++*(_DWORD *)(a1 + 236);
      uint64_t v21 = a1 + 8 * (a2 & 0x7FF);
      *(void *)(i + 16) = *(void *)(v21 + 416);
      *(void *)(v21 + 416) = i;
      uint64_t v22 = *(void *)(i + 16);
      if (v22) {
        *(void *)(v22 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = i;
      }
      size_t v23 = *(unsigned int *)(a1 + 204);
      if ((int)v23 >= 1) {
        bzero((void *)(i + *(int *)(a1 + 228) + 88), v23);
      }
      int v24 = sqlite3pager_pagecount(a1);
      if (*(unsigned char *)(a1 + 290))
      {
        sqlite3pager_unref(i + 88);
        unsigned int v6 = *(unsigned __int8 *)(a1 + 290);
LABEL_69:
        unsigned int v25 = ((int)(v6 << 29) >> 31) & 0xF;
        if ((v6 & 0x10) != 0) {
          unsigned int v25 = 10;
        }
        if (v6) {
          unsigned int v25 = 13;
        }
        if ((v6 & 2) != 0) {
          unsigned int v25 = 7;
        }
        if ((v6 & 8) != 0) {
          return 11;
        }
        else {
          return v25;
        }
      }
      if (v24 >= a2)
      {
        lseek(*(_DWORD *)(a1 + 56), *(int *)(a1 + 224) * v3, 0);
        int v29 = *(_DWORD *)(a1 + 224);
        int v30 = read(*(_DWORD *)(a1 + 56), (void *)(i + 88), v29);
        BOOL v31 = v29 == v30;
        if (v29 == v30) {
          uint64_t v9 = 0;
        }
        else {
          uint64_t v9 = 10;
        }
        if (v31)
        {
          ++*(_DWORD *)(a1 + 256);
          goto LABEL_17;
        }
        memset(&v40, 0, sizeof(v40));
        int v32 = md_fstat_real(*(_DWORD *)(a1 + 56), &v40);
        if (v32 || (size_t v28 = *(int *)(a1 + 224), v40.st_size >= (v28 * a2)))
        {
          sqlite3pager_unref(i + 88);
          return v9;
        }
        uint64_t v27 = (void *)(i + 88);
      }
      else
      {
        uint64_t v27 = (void *)(i + 88);
        size_t v28 = *(int *)(a1 + 224);
      }
      bzero(v27, v28);
LABEL_17:
      uint64_t v9 = 0;
      *a3 = i + 88;
      return v9;
    }
LABEL_89:
    sqlite3pager_rollback(a1);
    return 10;
  }
  int v10 = *(_DWORD *)(a1 + 228) + *(_DWORD *)(a1 + 204) + 16 * *(unsigned __int8 *)(a1 + 296) + 92;
  int v11 = malloc_type_malloc(v10, 0xA2076A49uLL);
  if (v10 >= 1 && v11 == 0)
  {
    ++sqlite3_malloc_failed;
  }
  else
  {
    uint64_t i = (uint64_t)v11;
    if (v11)
    {
      v11[10] = 0;
      *((_OWORD *)v11 + 3) = 0u;
      *((_OWORD *)v11 + 4) = 0u;
      *((_OWORD *)v11 + 1) = 0u;
      *((_OWORD *)v11 + 2) = 0u;
      *(_OWORD *)int v11 = 0u;
      if (*(unsigned char *)(a1 + 296))
      {
        uint64_t v13 = (char *)v11 + *(int *)(a1 + 204) + (uint64_t)*(int *)(a1 + 228);
        *((void *)v13 + 11) = 0;
        *((void *)v13 + 12) = 0;
      }
      *int v11 = a1;
      v11[6] = *(void *)(a1 + 360);
      *(void *)(a1 + 360) = v11;
      ++*(_DWORD *)(a1 + 232);
      goto LABEL_33;
    }
  }
  if (!*(unsigned char *)(a1 + 296)) {
    pager_unwritelock(a1);
  }
  *(unsigned char *)(a1 + 290) |= 2u;
  return 7;
}

uint64_t writeJournalHdr(uint64_t a1)
{
  seekJournalHdr(a1);
  uint64_t v2 = *(void *)(a1 + 376);
  *(void *)(a1 + 384) = v2;
  if (!*(void *)(a1 + 392)) {
    *(void *)(a1 + 392) = v2;
  }
  *(void *)(a1 + 376) = v2 + *(int *)(a1 + 408);
  uint64_t v3 = (char *)&aJournalMagic;
  int v4 = 8;
  while (1)
  {
    int v5 = write(*(_DWORD *)(a1 + 104), v3, v4);
    if (v5 < 1) {
      break;
    }
    v3 += v5;
    BOOL v6 = __OFSUB__(v4, v5);
    v4 -= v5;
    if ((v4 < 0) ^ v6 | (v4 == 0))
    {
      if (*(unsigned char *)(a1 + 287)) {
        int v7 = 255;
      }
      else {
        int v7 = 0;
      }
      __long long buf = 16843009 * v7;
      p_long long buf = &__buf;
      int v9 = 4;
      while (1)
      {
        int v10 = write(*(_DWORD *)(a1 + 104), p_buf, v9);
        if (v10 < 1) {
          break;
        }
        p_long long buf = (int *)((char *)p_buf + v10);
        BOOL v6 = __OFSUB__(v9, v10);
        v9 -= v10;
        if ((v9 < 0) ^ v6 | (v9 == 0))
        {
          int v11 = 4;
          sqlite3Randomness(4, (unsigned char *)(a1 + 196));
          __long long buf = bswap32(*(_DWORD *)(a1 + 196));
          int v12 = &__buf;
          while (1)
          {
            int v13 = write(*(_DWORD *)(a1 + 104), v12, v11);
            if (v13 < 1) {
              break;
            }
            int v12 = (int *)((char *)v12 + v13);
            BOOL v6 = __OFSUB__(v11, v13);
            v11 -= v13;
            if ((v11 < 0) ^ v6 | (v11 == 0))
            {
              __long long buf = bswap32(*(_DWORD *)(a1 + 168));
              uint64_t v14 = &__buf;
              int v15 = 4;
              while (1)
              {
                int v16 = write(*(_DWORD *)(a1 + 104), v14, v15);
                if (v16 < 1) {
                  break;
                }
                uint64_t v14 = (int *)((char *)v14 + v16);
                BOOL v6 = __OFSUB__(v15, v16);
                v15 -= v16;
                if ((v15 < 0) ^ v6 | (v15 == 0))
                {
                  __long long buf = bswap32(*(_DWORD *)(a1 + 408));
                  uint64_t v17 = &__buf;
                  int v18 = 4;
                  while (1)
                  {
                    int v19 = write(*(_DWORD *)(a1 + 104), v17, v18);
                    if (v19 < 1) {
                      break;
                    }
                    uint64_t v17 = (int *)((char *)v17 + v19);
                    BOOL v6 = __OFSUB__(v18, v19);
                    v18 -= v19;
                    if ((v18 < 0) ^ v6 | (v18 == 0))
                    {
                      lseek(*(_DWORD *)(a1 + 104), *(void *)(a1 + 376) - 1, 0);
                      uint64_t v20 = &byte_1BDA8857C;
                      int v21 = 1;
                      while (1)
                      {
                        int v22 = write(*(_DWORD *)(a1 + 104), v20, v21);
                        if (v22 < 1) {
                          break;
                        }
                        uint64_t result = 0;
                        v20 += v22;
                        BOOL v6 = __OFSUB__(v21, v22);
                        v21 -= v22;
                        if ((v21 < 0) ^ v6 | (v21 == 0)) {
                          return result;
                        }
                      }
                      return 13;
                    }
                  }
                  return 13;
                }
              }
              return 13;
            }
          }
          return 13;
        }
      }
      return 13;
    }
  }
  return 13;
}

uint64_t pager_write_pagelist(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v1 = result;
  uint64_t v2 = *(int **)result;
  uint64_t result = pager_wait_on_lock(*(void *)result, 4);
  if (result) {
    return result;
  }
  while (1)
  {
    lseek(v2[14], (*(_DWORD *)(v1 + 8) - 1) * (uint64_t)v2[56], 0);
    if (*(_DWORD *)(v1 + 8) <= v2[42]) {
      break;
    }
LABEL_10:
    *(unsigned char *)(v1 + 74) = 0;
    uint64_t v1 = *(void *)(v1 + 80);
    if (!v1) {
      return 0;
    }
  }
  int v3 = v2[56];
  if (v3 < 1)
  {
LABEL_9:
    ++v2[65];
    goto LABEL_10;
  }
  int v4 = (char *)(v1 + 88);
  while (1)
  {
    int v5 = write(v2[14], v4, v3);
    if (v5 < 1) {
      break;
    }
    v4 += v5;
    BOOL v6 = __OFSUB__(v3, v5);
    v3 -= v5;
    if ((v3 < 0) ^ v6 | (v3 == 0)) {
      goto LABEL_9;
    }
  }
  ++v2[65];
  return 13;
}

uint64_t sqlite3pager_unref(uint64_t result)
{
  __int16 v1 = *(_WORD *)(result - 10) - 1;
  *(_WORD *)(result - 10) = v1;
  if (!v1)
  {
    uint64_t v2 = result - 88;
    uint64_t v3 = *(void *)(result - 88);
    uint64_t v4 = *(void *)(v3 + 344);
    *(void *)(result - 56) = 0;
    *(void *)(result - 48) = v4;
    *(void *)(v3 + 344) = result - 88;
    if (v4) {
      int v5 = (uint64_t *)(v4 + 32);
    }
    else {
      int v5 = (uint64_t *)(v3 + 336);
    }
    uint64_t *v5 = v2;
    if (!*(unsigned char *)(result - 13) && !*(void *)(v3 + 352)) {
      *(void *)(v3 + 352) = v2;
    }
    BOOL v6 = *(uint64_t (**)(void))(v3 + 208);
    if (v6) {
      uint64_t result = v6();
    }
    int v7 = *(_DWORD *)(v3 + 236) - 1;
    *(_DWORD *)(v3 + 236) = v7;
    if (!v7 && !*(unsigned char *)(v3 + 296))
    {
      int v8 = *(void **)(v3 + 360);
      if (v8)
      {
        do
        {
          int v9 = (void *)v8[6];
          free(v8);
          int v8 = v9;
        }
        while (v9);
      }
      *(_OWORD *)(v3 + 336) = 0u;
      *(_OWORD *)(v3 + 352) = 0u;
      bzero((void *)(v3 + 416), 0x4000uLL);
      *(_DWORD *)(v3 + 232) = 0;
      if (*(unsigned __int8 *)(v3 + 289) >= 2u) {
        sqlite3pager_rollback(v3);
      }
      uint64_t result = sqlite3OsUnlock(v3 + 24, 0);
      *(unsigned char *)(v3 + 289) = 0;
      *(_DWORD *)(v3 + 168) = -1;
      *(_DWORD *)(v3 + 236) = 0;
    }
  }
  return result;
}

uint64_t sqlite3pager_begin(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 289) != 1) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 296))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 289) = 4;
    *(_DWORD *)(a1 + 172) = *(_DWORD *)(a1 + 168);
    return result;
  }
  uint64_t result = sqlite3OsLock(a1 + 24, 2);
  if (!result)
  {
    *(unsigned char *)(a1 + 289) = 2;
    *(unsigned char *)(a1 + 294) = 0;
    if (!*(unsigned char *)(a1 + 282) || *(unsigned char *)(a1 + 291)) {
      return 0;
    }
    return pager_open_journal(a1);
  }
  return result;
}

uint64_t pager_open_journal(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  sqlite3pager_pagecount(a1);
  uint64_t v2 = sqlite3Malloc(*(_DWORD *)(a1 + 168) / 8 + 1);
  *(void *)(a1 + 304) = v2;
  if (!v2)
  {
    uint64_t v4 = 7;
LABEL_6:
    *(void *)(a1 + 304) = 0;
    sqlite3OsUnlock(a1 + 24, 0);
    *(unsigned char *)(a1 + 289) = 0;
    return v4;
  }
  uint64_t v3 = sqlite3OsOpenExclusive(*(char **)(a1 + 8), a1 + 72, *(unsigned __int8 *)(a1 + 291));
  *(unsigned char *)(a1 + 320) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  if (v3)
  {
    uint64_t v4 = v3;
    int v5 = *(void **)(a1 + 304);
    if (v5) {
      free(v5);
    }
    goto LABEL_6;
  }
  *(_WORD *)(a1 + 280) = 1;
  *(unsigned char *)(a1 + 293) = 0;
  *(unsigned char *)(a1 + 295) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  int v7 = *(unsigned __int8 *)(a1 + 290);
  if (*(unsigned char *)(a1 + 290))
  {
    unsigned int v8 = (v7 << 29 >> 31) & 0xF;
    if ((v7 & 0x10) != 0) {
      unsigned int v8 = 10;
    }
    if (v7) {
      unsigned int v8 = 13;
    }
    if ((v7 & 2) != 0) {
      unsigned int v8 = 7;
    }
    if ((v7 & 8) != 0) {
      return 11;
    }
    else {
      return v8;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 172) = *(_DWORD *)(a1 + 168);
    int v9 = writeJournalHdr(a1);
    int v10 = v9;
    if (*(unsigned char *)(a1 + 286) && !v9)
    {
      if (*(unsigned char *)(a1 + 296))
      {
        int v10 = 0;
        *(unsigned char *)(a1 + 285) = 1;
        *(_DWORD *)(a1 + 176) = *(_DWORD *)(a1 + 168);
      }
      else if (*(unsigned char *)(a1 + 280))
      {
        int v12 = sqlite3Malloc(*(_DWORD *)(a1 + 168) / 8 + 1);
        *(void *)(a1 + 312) = v12;
        if (v12)
        {
          *(void *)(a1 + 184) = *(void *)(a1 + 376);
          *(_DWORD *)(a1 + 176) = *(_DWORD *)(a1 + 168);
          uint64_t v13 = *(unsigned int *)(a1 + 196);
          *(void *)(a1 + 392) = 0;
          *(void *)(a1 + 400) = v13;
          if (*(unsigned char *)(a1 + 284))
          {
LABEL_52:
            int v10 = 0;
            *(unsigned char *)(a1 + 285) = 1;
          }
          else
          {
            int v14 = 8;
            while (1)
            {
              uint64_t v15 = 0;
              memset(&v24, 0, sizeof(v24));
              sqlite3OsTempFileName_azDirs[0] = 0;
              unsigned int v23 = v14;
              while (1)
              {
                int v16 = (char *)sqlite3OsTempFileName_azDirs[v15];
                if (v16)
                {
                  if (!md_stat_real(v16, &v24)
                    && (v24.st_mode & 0xF000) == 0x4000
                    && !access((const char *)sqlite3OsTempFileName_azDirs[v15], 7))
                  {
                    break;
                  }
                }
                if (++v15 == 5)
                {
                  uint64_t v17 = ".";
                  goto LABEL_38;
                }
              }
              uint64_t v17 = (const char *)sqlite3OsTempFileName_azDirs[v15];
              do
              {
LABEL_38:
                sprintf(__s, "%s/sqlite_", v17);
                int v18 = strlen(__s);
                int v19 = &__s[v18];
                sqlite3Randomness(15, v19);
                uint64_t v20 = 0;
                do
                {
                  v19[v20] = sqlite3OsTempFileName_zChars[(v19[v20]
                                                                          - 62
                                                                          * ((133
                                                                                          * (v19[v20] >> 1)) >> 12))];
                  ++v20;
                }
                while (v20 != 15);
                __s[v18 + 15] = 0;
              }
              while (!access(__s, 0));
              int v21 = sqlite3OsOpenExclusive(__s, a1 + 120, 1);
              int v10 = v21;
              if (v23 < 2) {
                break;
              }
              if (!v21) {
                goto LABEL_51;
              }
              int v14 = v23 - 1;
              if (v21 == 7) {
                goto LABEL_49;
              }
            }
            if (!v21)
            {
LABEL_51:
              *(unsigned char *)(a1 + 284) = 1;
              *(_DWORD *)(a1 + 200) = 0;
              goto LABEL_52;
            }
LABEL_49:
            int v22 = *(void **)(a1 + 312);
            if (v22)
            {
              free(v22);
              *(void *)(a1 + 312) = 0;
            }
          }
        }
        else
        {
          sqlite3OsLock(a1 + 24, 1);
          int v10 = 7;
        }
      }
      else
      {
        int v10 = 0;
        *(unsigned char *)(a1 + 286) = 1;
      }
    }
    if (v10)
    {
      unsigned int v11 = pager_unwritelock(a1);
      if (v11) {
        return v11;
      }
      else {
        return 13;
      }
    }
    else
    {
      return 0;
    }
  }
}

uint64_t sqlite3pager_write(void *a1)
{
  uint64_t v2 = (char *)(a1 - 11);
  uint64_t v1 = *(a1 - 11);
  int v3 = *(unsigned __int8 *)(v1 + 290);
  if (!*(unsigned char *)(v1 + 290))
  {
    if (*(unsigned char *)(v1 + 292)) {
      return 3;
    }
    *((unsigned char *)a1 - 14) = 1;
    if (*((unsigned char *)a1 - 16) && (*((unsigned char *)a1 - 15) || !*(unsigned char *)(v1 + 285)))
    {
      *(unsigned char *)(v1 + 294) = 1;
    }
    else
    {
      uint64_t v5 = sqlite3pager_begin(v1);
      if (v5) {
        return v5;
      }
      if (!*(unsigned char *)(v1 + 280))
      {
        if (*(unsigned char *)(v1 + 282))
        {
          uint64_t v5 = pager_open_journal(v1);
          if (v5) {
            return v5;
          }
        }
      }
      *(unsigned char *)(v1 + 294) = 1;
      if (!*((unsigned char *)a1 - 16) && (*(unsigned char *)(v1 + 282) || *(unsigned char *)(v1 + 296)))
      {
        if (*((_DWORD *)a1 - 20) <= *(_DWORD *)(v1 + 172))
        {
          if (*(unsigned char *)(v1 + 296))
          {
            uint64_t v10 = *(int *)(v1 + 204) + (uint64_t)*(int *)(v1 + 228);
            unsigned int v11 = sqlite3MallocRaw(*(_DWORD *)(v1 + 224));
            *(void *)((char *)a1 + v10) = v11;
            if (v11) {
              memcpy(v11, a1, *(int *)(v1 + 224));
            }
          }
          else
          {
            unsigned int v15 = *(_DWORD *)(v1 + 196);
            uint64_t v16 = *(unsigned int *)(v1 + 224);
            if ((int)v16 >= 201)
            {
              unint64_t v17 = v16 + 200;
              do
              {
                v15 += *((char *)a1 + (v17 - 400));
                v17 -= 200;
              }
              while (v17 > 0x190);
            }
            int v18 = *(_DWORD *)((char *)a1 + *(int *)(v1 + 228));
            *(_DWORD *)((char *)a1 + (int)v16) = bswap32(v15);
            size_t v19 = *(int *)(v1 + 224) + 8;
            *((_DWORD *)a1 - 1) = bswap32(*((_DWORD *)a1 - 20));
            uint64_t v20 = sqlite3OsWrite(v1 + 72, (char *)a1 - 4, v19);
            *(void *)(v1 + 376) += v19;
            *(_DWORD *)((char *)a1 + *(int *)(v1 + 228)) = v18;
            if (v20) {
              goto LABEL_58;
            }
            ++*(_DWORD *)(v1 + 192);
            *(unsigned char *)(*(void *)(v1 + 304) + ((unint64_t)*((unsigned int *)a1 - 20) >> 3)) |= 1 << (*(_DWORD *)(a1 - 10) & 7);
            *((unsigned char *)a1 - 13) = *(unsigned char *)(v1 + 287) == 0;
            if (*(unsigned char *)(v1 + 285))
            {
              *(unsigned char *)(*(void *)(v1 + 312) + ((unint64_t)*((unsigned int *)a1 - 20) >> 3)) |= 1 << (*(_DWORD *)(a1 - 10) & 7);
              if (!*((unsigned char *)a1 - 15))
              {
                uint64_t v21 = *(a1 - 11);
                *(a1 - 3) = 0;
                uint64_t v22 = *(void *)(v21 + 368);
                if (v22) {
                  *(void *)(v22 + 64) = v2;
                }
                *(a1 - 4) = v22;
                *(void *)(v21 + 368) = v2;
                *((unsigned char *)a1 - 15) = 1;
              }
            }
          }
        }
        else
        {
          if (*(unsigned char *)(v1 + 281)) {
            BOOL v9 = 0;
          }
          else {
            BOOL v9 = *(unsigned char *)(v1 + 287) == 0;
          }
          *((unsigned char *)a1 - 13) = v9;
        }
        if (*((unsigned char *)a1 - 13)) {
          *(unsigned char *)(v1 + 293) = 1;
        }
        *((unsigned char *)a1 - 16) = 1;
      }
      if (*(unsigned char *)(v1 + 285))
      {
        if (!*((unsigned char *)a1 - 15))
        {
          signed int v12 = *((_DWORD *)a1 - 20);
          if (v12 <= *(_DWORD *)(v1 + 176))
          {
            if (*(unsigned char *)(v1 + 296))
            {
              uint64_t v13 = (char *)a1 + *(int *)(v1 + 204) + (uint64_t)*(int *)(v1 + 228);
              int v14 = sqlite3MallocRaw(*(_DWORD *)(v1 + 224));
              *((void *)v13 + 1) = v14;
              if (v14) {
                memcpy(v14, a1, *(int *)(v1 + 224));
              }
              goto LABEL_60;
            }
            *((_DWORD *)a1 - 1) = bswap32(v12);
            uint64_t v20 = sqlite3OsWrite(v1 + 120, (char *)a1 - 4, (*(_DWORD *)(v1 + 224) + 4));
            if (!v20)
            {
              ++*(_DWORD *)(v1 + 200);
              *(unsigned char *)(*(void *)(v1 + 312) + ((unint64_t)*((unsigned int *)a1 - 20) >> 3)) |= 1 << (*(_DWORD *)(a1 - 10) & 7);
LABEL_60:
              if (!*((unsigned char *)a1 - 15))
              {
                uint64_t v23 = *(a1 - 11);
                *(a1 - 3) = 0;
                uint64_t v24 = *(void *)(v23 + 368);
                if (v24) {
                  *(void *)(v24 + 64) = v2;
                }
                *(a1 - 4) = v24;
                *(void *)(v23 + 368) = v2;
                *((unsigned char *)a1 - 15) = 1;
              }
              goto LABEL_16;
            }
LABEL_58:
            uint64_t v5 = v20;
            sqlite3pager_rollback(v1);
            *(unsigned char *)(v1 + 290) |= 1u;
            return v5;
          }
        }
      }
    }
LABEL_16:
    int v7 = *((_DWORD *)a1 - 20);
    if (*(_DWORD *)(v1 + 168) >= v7) {
      return 0;
    }
    *(_DWORD *)(v1 + 168) = v7;
    if (*(unsigned char *)(v1 + 296) || v7 != 0x40000000 / *(_DWORD *)(v1 + 224)) {
      return 0;
    }
    uint64_t v5 = 0;
    *(_DWORD *)(v1 + 168) = v7 + 1;
    return v5;
  }
  unsigned int v4 = (v3 << 29 >> 31) & 0xF;
  if ((v3 & 0x10) != 0) {
    unsigned int v4 = 10;
  }
  if (v3) {
    unsigned int v4 = 13;
  }
  if ((v3 & 2) != 0) {
    unsigned int v4 = 7;
  }
  if ((v3 & 8) != 0) {
    return 11;
  }
  else {
    return v4;
  }
}

uint64_t sqlite3pager_dont_write(uint64_t result, int a2)
{
  if (!*(unsigned char *)(result + 296))
  {
    uint64_t v2 = result + 8 * (a2 & 0x7FF) + 416;
    do
    {
      uint64_t v3 = *(void *)v2;
      int v4 = *(_DWORD *)(*(void *)v2 + 8);
      uint64_t v2 = *(void *)v2 + 16;
    }
    while (v4 != a2);
    *(unsigned char *)(v3 + 76) = 1;
    if (*(unsigned char *)(v3 + 74))
    {
      if (*(_DWORD *)(result + 168) != a2 || *(_DWORD *)(result + 172) >= a2) {
        *(unsigned char *)(v3 + 74) = 0;
      }
    }
  }
  return result;
}

uint64_t sqlite3pager_sync(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 289) == 5 || *(unsigned char *)(a1 + 296) || !*(unsigned char *)(a1 + 294)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 320)) {
    goto LABEL_7;
  }
  uint64_t v16 = 0;
  uint64_t v3 = sqlite3pager_get(a1, 1, &v16);
  if (!v3)
  {
    unsigned int v8 = v16;
    uint64_t v3 = sqlite3pager_write(v16);
    if (!v3)
    {
      *((_DWORD *)v8 + 6) = bswap32(bswap32(*((_DWORD *)v8 + 6)) + 1);
      sqlite3pager_unref((uint64_t)v8);
      if (a2)
      {
        uint64_t v16 = 0;
        unsigned int v9 = a2 + 1;
        unsigned int v10 = *(_DWORD *)(a1 + 172);
        while (v9 <= v10)
        {
          if (((*(unsigned __int8 *)(*(void *)(a1 + 304) + ((unint64_t)v9 >> 3)) >> (v9 & 7)) & 1) == 0)
          {
            uint64_t v11 = sqlite3pager_get(a1, v9, &v16);
            if (v11) {
              return v11;
            }
            signed int v12 = v16;
            uint64_t v3 = sqlite3pager_write(v16);
            sqlite3pager_unref((uint64_t)v12);
            if (v3) {
              return v3;
            }
            unsigned int v10 = *(_DWORD *)(a1 + 172);
          }
          ++v9;
        }
      }
      uint64_t v3 = syncJournal(a1);
      if (!v3)
      {
LABEL_7:
        if (a2)
        {
          sqlite3pager_pagecount(a1);
          int v6 = *(unsigned __int8 *)(a1 + 290);
          if (*(unsigned char *)(a1 + 290))
          {
            unsigned int v7 = (v6 << 29 >> 31) & 0xF;
            if ((v6 & 0x10) != 0) {
              unsigned int v7 = 10;
            }
            if (v6) {
              unsigned int v7 = 13;
            }
            if ((v6 & 2) != 0) {
              uint64_t v3 = 7;
            }
            else {
              uint64_t v3 = v7;
            }
            if ((v6 & 8) != 0) {
              return 11;
            }
LABEL_17:
            if (v3) {
              return v3;
            }
            goto LABEL_32;
          }
          if (*(_DWORD *)(a1 + 168) > a2)
          {
            if (*(unsigned char *)(a1 + 296))
            {
              *(_DWORD *)(a1 + 168) = a2;
              memoryTruncate(a1);
            }
            else
            {
              uint64_t v3 = syncJournal(a1);
              if (v3) {
                return v3;
              }
              uint64_t v3 = pager_wait_on_lock(a1, 4);
              if (v3) {
                return v3;
              }
              int v15 = ftruncate(*(_DWORD *)(a1 + 56), *(int *)(a1 + 224) * (uint64_t)(int)a2);
              if (v15) {
                uint64_t v3 = 10;
              }
              else {
                uint64_t v3 = 0;
              }
              if (v15) {
                goto LABEL_17;
              }
              *(_DWORD *)(a1 + 168) = a2;
            }
          }
        }
LABEL_32:
        uint64_t v13 = *(void *)(a1 + 360);
        if (v13)
        {
          uint64_t v14 = 0;
          do
          {
            if (*(unsigned char *)(v13 + 74))
            {
              *(void *)(v13 + 80) = v14;
              uint64_t v14 = v13;
            }
            uint64_t v13 = *(void *)(v13 + 48);
          }
          while (v13);
        }
        else
        {
          uint64_t v14 = 0;
        }
        uint64_t v3 = pager_write_pagelist(v14);
        if (!v3)
        {
          if (*(unsigned char *)(a1 + 287)) {
            uint64_t v3 = 0;
          }
          else {
            uint64_t v3 = sqlite3OsSync(a1 + 24);
          }
          *(unsigned char *)(a1 + 289) = 5;
        }
      }
    }
  }
  return v3;
}

_DWORD *sqlite3HashFind(_DWORD *result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = (uint64_t)result;
    if (*((void *)result + 3))
    {
      int v4 = (uint64_t (*)(uint64_t, uint64_t))binHash;
      if (*(unsigned char *)result == 3) {
        int v4 = (uint64_t (*)(uint64_t, uint64_t))strHash;
      }
      unsigned int v5 = v4(a2, 16);
      uint64_t result = findElementGivenHash(v2, a2, (*(_DWORD *)(v2 + 16) - 1) & v5);
      if (result) {
        return (_DWORD *)*((void *)result + 2);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_DWORD *findElementGivenHash(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    return 0;
  }
  unsigned int v5 = (int *)(v3 + 16 * a3);
  int v8 = *v5;
  int v6 = v5 + 2;
  int v7 = v8;
  if (*(unsigned char *)a1 == 3) {
    unsigned int v9 = strCompare;
  }
  else {
    unsigned int v9 = binCompare;
  }
  do
  {
    uint64_t result = 0;
    if (!v7) {
      break;
    }
    int v6 = *(_DWORD **)v6;
    if (!v6) {
      break;
    }
    --v7;
    int v11 = ((uint64_t (*)(void, void, uint64_t, uint64_t))v9)(*((void *)v6 + 3), v6[8], a2, 16);
    uint64_t result = v6;
  }
  while (v11);
  return result;
}

uint64_t binCompare(const void *a1, int a2, void *__s2, int a4)
{
  if (a2 == a4) {
    return memcmp(a1, __s2, a2);
  }
  else {
    return 1;
  }
}

uint64_t strCompare(unsigned char *a1, int a2, unsigned __int8 *a3, int a4)
{
  if (a2 != a4) {
    return 1;
  }
  if (a2 < 1) {
    return 0;
  }
  int v4 = a2 + 1;
  while (1)
  {
    uint64_t v5 = *a1;
    if (!*a1) {
      break;
    }
    LODWORD(v5) = sqlite3UpperToLower[v5];
    int v6 = sqlite3UpperToLower[*a3];
    if (v5 != v6) {
      return (v5 - v6);
    }
    ++a1;
    ++a3;
    if (--v4 <= 1) {
      return 0;
    }
  }
  int v6 = sqlite3UpperToLower[*a3];
  return (v5 - v6);
}

uint64_t binHash(unsigned __int8 *a1, int a2)
{
  if (a2 < 1) {
    return 0;
  }
  int v2 = 0;
  unsigned int v3 = a2 + 1;
  do
  {
    int v4 = *a1++;
    v2 ^= v4 ^ (8 * v2);
    --v3;
  }
  while (v3 > 1);
  return v2 & 0x7FFFFFFF;
}

uint64_t strHash(char *__s, int a2)
{
  int v2 = __s;
  if (a2 <= 0)
  {
    a2 = strlen(__s);
    if (a2 < 1) {
      return 0;
    }
  }
  int v3 = 0;
  unsigned int v4 = a2 + 1;
  do
  {
    int v5 = *v2++;
    v3 ^= sqlite3UpperToLower[v5] ^ (8 * v3);
    --v4;
  }
  while (v4 > 1);
  return v3 & 0x7FFFFFFF;
}

uint64_t sqlite3HashInsert(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  int v6 = (uint64_t (*)(_OWORD *, uint64_t))binHash;
  if (*(unsigned char *)a1 == 3) {
    int v6 = (uint64_t (*)(_OWORD *, uint64_t))strHash;
  }
  int v7 = v6(a2, 16);
  int v8 = (*(_DWORD *)(a1 + 16) - 1) & v7;
  ElementGivenHash = findElementGivenHash(a1, (uint64_t)a2, v8);
  if (!ElementGivenHash)
  {
    if (!a3) {
      return 0;
    }
    int v18 = malloc_type_malloc(0x28uLL, 0xD00A7D76uLL);
    if (!v18)
    {
      ++sqlite3_malloc_failed;
      return a3;
    }
    unsigned int v10 = v18;
    v18[4] = 0;
    *(_OWORD *)int v18 = 0u;
    *((_OWORD *)v18 + 1) = 0u;
    if (a2 && *(unsigned char *)(a1 + 1))
    {
      size_t v19 = malloc_type_malloc(0x10uLL, 0xA2076A49uLL);
      if (!v19)
      {
        ++sqlite3_malloc_failed;
LABEL_37:
        free(v10);
        return a3;
      }
      void v10[3] = v19;
      *size_t v19 = *a2;
    }
    else
    {
      void v18[3] = a2;
    }
    *((_DWORD *)v10 + 8) = 16;
    int v20 = *(_DWORD *)(a1 + 4) + 1;
    *(_DWORD *)(a1 + 4) = v20;
    int v21 = *(_DWORD *)(a1 + 16);
    if (v21)
    {
LABEL_31:
      if (v20 > v21)
      {
        rehash(a1, 2 * v21);
        int v21 = *(_DWORD *)(a1 + 16);
      }
      insertElement(a1, *(void *)(a1 + 24) + 16 * ((v21 - 1) & v7), v10);
      uint64_t v11 = 0;
      goto LABEL_34;
    }
    rehash(a1, 8);
    int v21 = *(_DWORD *)(a1 + 16);
    if (v21)
    {
      int v20 = *(_DWORD *)(a1 + 4);
      goto LABEL_31;
    }
    *(_DWORD *)(a1 + 4) = 0;
    goto LABEL_37;
  }
  unsigned int v10 = ElementGivenHash;
  uint64_t v11 = ElementGivenHash[2];
  if (a3)
  {
LABEL_34:
    v10[2] = a3;
    return v11;
  }
  uint64_t v12 = *ElementGivenHash;
  uint64_t v13 = (void *)ElementGivenHash[1];
  if (!v13)
  {
    *(void *)(a1 + 8) = v12;
    if (!v12) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  *uint64_t v13 = v12;
  uint64_t v12 = *ElementGivenHash;
  if (*ElementGivenHash) {
LABEL_7:
  }
    *(void *)(v12 + 8) = v13;
LABEL_8:
  uint64_t v14 = *(void *)(a1 + 24) + 16 * v8;
  int v15 = (void *)(v14 + 8);
  if (*(void **)(v14 + 8) == ElementGivenHash) {
    *int v15 = v12;
  }
  if ((*(_DWORD *)v14)-- <= 1) {
    *int v15 = 0;
  }
  if (*(unsigned char *)(a1 + 1))
  {
    unint64_t v17 = (void *)ElementGivenHash[3];
    if (v17) {
      free(v17);
    }
  }
  free(v10);
  --*(_DWORD *)(a1 + 4);
  return v11;
}

void rehash(uint64_t a1, int a2)
{
  unsigned int v4 = sqlite3Malloc(16 * a2);
  if (v4)
  {
    int v5 = v4;
    int v6 = *(void **)(a1 + 24);
    if (v6) {
      free(v6);
    }
    *(void *)(a1 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v5;
    *(_DWORD *)(a1 + 16) = a2;
    if (*(unsigned char *)a1 == 3) {
      int v7 = (uint64_t (*)(uint64_t, void))strHash;
    }
    else {
      int v7 = (uint64_t (*)(uint64_t, void))binHash;
    }
    int v8 = *(uint64_t ***)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v8)
    {
      int v9 = a2 - 1;
      do
      {
        int v10 = v7((uint64_t)v8[3], *((unsigned int *)v8 + 8));
        uint64_t v11 = *v8;
        insertElement(a1, (uint64_t)v5 + 16 * (v10 & v9), v8);
        int v8 = (uint64_t **)v11;
      }
      while (v11);
    }
  }
}

void *insertElement(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    *a3 = v3;
    uint64_t v5 = *(void *)(v3 + 8);
    unsigned int v4 = (void **)(v3 + 8);
    a3[1] = v5;
    int v6 = *v4;
    if (!*v4) {
      int v6 = (void *)(a1 + 8);
    }
    *int v6 = a3;
    uint64_t result = v4;
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t result = (void *)(a1 + 8);
    uint64_t v8 = v9;
    *a3 = v9;
    if (v9) {
      *(void *)(v8 + 8) = a3;
    }
    a3[1] = 0;
  }
  *uint64_t result = a3;
  ++*(_DWORD *)a2;
  *(void *)(a2 + 8) = a3;
  return result;
}

void *sqlite3Malloc(int a1)
{
  size_t v2 = a1;
  uint64_t v3 = malloc_type_malloc(a1, 0xD00A7D76uLL);
  unsigned int v4 = v3;
  if (v3)
  {
    bzero(v3, v2);
  }
  else if (a1 >= 1)
  {
    ++sqlite3_malloc_failed;
  }
  return v4;
}

void *sqlite3MallocRaw(int a1)
{
  uint64_t result = malloc_type_malloc(a1, 0xA2076A49uLL);
  if (a1 >= 1 && !result) {
    ++sqlite3_malloc_failed;
  }
  return result;
}

uint64_t sqlite3SetString(uint64_t result, char *__s, int a3, int a4, int a5, int a6, int a7, int a8, char *__sa, uint64_t a10)
{
  if (result)
  {
    uint64_t v11 = (void **)result;
    int v12 = strlen(__s) + 1;
    int v21 = (const char **)&a10;
    uint64_t v13 = __sa;
    if (__sa)
    {
      uint64_t v14 = __sa;
      do
      {
        v12 += strlen(v14);
        int v15 = v21++;
        uint64_t v14 = *v15;
      }
      while (*v15);
    }
    if (*v11) {
      free(*v11);
    }
    uint64_t result = (uint64_t)malloc_type_malloc(v12, 0xA2076A49uLL);
    uint64_t v16 = result;
    if (v12 < 1 || result)
    {
      *uint64_t v11 = (void *)result;
      if (result)
      {
        unint64_t v17 = strcpy((char *)result, __s);
        uint64_t result = strlen(v17);
        uint64_t v22 = (const char **)&a10;
        if (__sa)
        {
          int v18 = (char *)(v16 + result);
          do
          {
            size_t v19 = strcpy(v18, v13);
            uint64_t result = strlen(v19);
            v18 += result;
            int v20 = v22++;
            uint64_t v13 = *v20;
          }
          while (*v20);
        }
      }
    }
    else
    {
      ++sqlite3_malloc_failed;
      *uint64_t v11 = 0;
    }
  }
  return result;
}

uint64_t sqlite3PutVarint(unsigned char *a1, unint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = HIBYTE(a2);
  if (HIBYTE(a2))
  {
    a1[8] = a2;
    unint64_t v7 = a2 >> 8;
    for (uint64_t i = 7; i != -1; --i)
    {
      a1[i] = v7 | 0x80;
      v7 >>= 7;
    }
    return 9;
  }
  else
  {
    do
    {
      unint64_t v3 = v2++;
      v11[v3] = a2 | 0x80;
      BOOL v4 = a2 >= 0x7F;
      BOOL v5 = a2 == 127;
      a2 >>= 7;
    }
    while (!v5 && v4);
    v11[0] &= ~0x80u;
    unint64_t v6 = v2;
    do
    {
      *a1++ = v11[v6 - 1];
      --v3;
      --v6;
    }
    while (v3 != -1);
  }
  return v2;
}

uint64_t sqlite3Randomness(uint64_t result, unsigned char *a2)
{
  int v3 = result;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  int v4 = randomByte_prng[0];
  do
  {
    if (v4)
    {
      unsigned __int8 v5 = byte_1EA0DAC32;
    }
    else
    {
      *(_WORD *)&byte_1EA0DAC31 = 0;
      *(_OWORD *)unint64_t v17 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      int v6 = open("/dev/urandom", 0);
      if (v6 < 0)
      {
        time(v17);
        uint64_t result = getpid();
        LODWORD(v17[1]) = result;
      }
      else
      {
        int v7 = v6;
        read(v6, v17, 0x100uLL);
        uint64_t result = close(v7);
      }
      uint64_t v8 = 0;
      int8x16_t v9 = (int8x16_t)xmmword_1BDA827D0;
      v10.i64[0] = 0x1010101010101010;
      v10.i64[1] = 0x1010101010101010;
      do
      {
        *(int8x16_t *)&randomByte_prng[v8 + 3] = v9;
        v8 += 16;
        int8x16_t v9 = vaddq_s8(v9, v10);
      }
      while (v8 != 256);
      uint64_t v11 = 0;
      unsigned __int8 v5 = byte_1EA0DAC32;
      do
      {
        char v12 = byte_1EA0DAC33[v11];
        v5 += v12 + *((unsigned char *)v17 + v11);
        char v13 = byte_1EA0DAC33[v5];
        byte_1EA0DAC33[v5] = v12;
        byte_1EA0DAC33[v11++] = v13;
      }
      while (v11 != 256);
      int v4 = 1;
      randomByte_prng[0] = 1;
    }
    uint64_t v14 = ++byte_1EA0DAC31;
    char v15 = byte_1EA0DAC33[byte_1EA0DAC31];
    unsigned __int8 v16 = v15 + v5;
    byte_1EA0DAC33[byte_1EA0DAC31] = byte_1EA0DAC33[v16];
    byte_1EA0DAC32 = v16;
    byte_1EA0DAC33[v16] = v15;
    *a2++ = byte_1EA0DAC33[(byte_1EA0DAC33[v14] + v15)];
    --v3;
  }
  while (v3);
  return result;
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

void *__cdecl CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return (void *)MEMORY[0x1F40D70E8](allocator, size, hint);
}

CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context)
{
  return (CFAllocatorRef)MEMORY[0x1F40D70F8](allocator, context);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1F40D7160](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1F40D7170](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1F40D7178](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7198](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1F40D71C8](theArray, range.location, range.length, value);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values)
{
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

CFAttributedStringRef CFAttributedStringCreateCopy(CFAllocatorRef alloc, CFAttributedStringRef aStr)
{
  return (CFAttributedStringRef)MEMORY[0x1F40D7248](alloc, aStr);
}

CFIndex CFAttributedStringGetLength(CFAttributedStringRef aStr)
{
  return MEMORY[0x1F40D7298](aStr);
}

void CFBagAddValue(CFMutableBagRef theBag, const void *value)
{
}

Boolean CFBagContainsValue(CFBagRef theBag, const void *value)
{
  return MEMORY[0x1F40D72F8](theBag, value);
}

CFBagRef CFBagCreateCopy(CFAllocatorRef allocator, CFBagRef theBag)
{
  return (CFBagRef)MEMORY[0x1F40D7300](allocator, theBag);
}

CFMutableBagRef CFBagCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFBagCallBacks *callBacks)
{
  return (CFMutableBagRef)MEMORY[0x1F40D7308](allocator, capacity, callBacks);
}

CFIndex CFBagGetCount(CFBagRef theBag)
{
  return MEMORY[0x1F40D7318](theBag);
}

CFIndex CFBagGetCountOfValue(CFBagRef theBag, const void *value)
{
  return MEMORY[0x1F40D7320](theBag, value);
}

const void *__cdecl CFBagGetValue(CFBagRef theBag, const void *value)
{
  return (const void *)MEMORY[0x1F40D7330](theBag, value);
}

void CFBagGetValues(CFBagRef theBag, const void **values)
{
}

void CFBagRemoveAllValues(CFMutableBagRef theBag)
{
}

void CFBagRemoveValue(CFMutableBagRef theBag, const void *value)
{
}

void CFBagSetValue(CFMutableBagRef theBag, const void *value)
{
}

CFBitVectorRef CFBitVectorCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex numBits)
{
  return (CFBitVectorRef)MEMORY[0x1F40D73A8](allocator, bytes, numBits);
}

CFMutableBitVectorRef CFBitVectorCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableBitVectorRef)MEMORY[0x1F40D73B8](allocator, capacity);
}

CFMutableBitVectorRef CFBitVectorCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFBitVectorRef bv)
{
  return (CFMutableBitVectorRef)MEMORY[0x1F40D73C0](allocator, capacity, bv);
}

CFBit CFBitVectorGetBitAtIndex(CFBitVectorRef bv, CFIndex idx)
{
  return MEMORY[0x1F40D73C8](bv, idx);
}

void CFBitVectorGetBits(CFBitVectorRef bv, CFRange range, UInt8 *bytes)
{
}

CFIndex CFBitVectorGetCount(CFBitVectorRef bv)
{
  return MEMORY[0x1F40D73D8](bv);
}

CFIndex CFBitVectorGetCountOfBit(CFBitVectorRef bv, CFRange range, CFBit value)
{
  return MEMORY[0x1F40D73E0](bv, range.location, range.length, *(void *)&value);
}

CFIndex CFBitVectorGetFirstIndexOfBit(CFBitVectorRef bv, CFRange range, CFBit value)
{
  return MEMORY[0x1F40D73E8](bv, range.location, range.length, *(void *)&value);
}

CFIndex CFBitVectorGetLastIndexOfBit(CFBitVectorRef bv, CFRange range, CFBit value)
{
  return MEMORY[0x1F40D73F0](bv, range.location, range.length, *(void *)&value);
}

void CFBitVectorSetAllBits(CFMutableBitVectorRef bv, CFBit value)
{
}

void CFBitVectorSetBitAtIndex(CFMutableBitVectorRef bv, CFIndex idx, CFBit value)
{
}

void CFBitVectorSetBits(CFMutableBitVectorRef bv, CFRange range, CFBit value)
{
}

void CFBitVectorSetCount(CFMutableBitVectorRef bv, CFIndex count)
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

uint64_t CFBundleCopyLocalizationForLocalizationInfo()
{
  return MEMORY[0x1F40D7488]();
}

CFArrayRef CFBundleCopyLocalizationsForPreferences(CFArrayRef locArray, CFArrayRef prefArray)
{
  return (CFArrayRef)MEMORY[0x1F40D7490](locArray, prefArray);
}

uint64_t CFBundleCopyLocalizedStringTableForLocalization()
{
  return MEMORY[0x1F40D74B8]();
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x1F40D7538](bundleID);
}

uint64_t CFBundleGetLocalizationInfoForLocalization()
{
  return MEMORY[0x1F40D7590]();
}

Boolean CFCalendarComposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime *at, const char *componentDesc, ...)
{
  return MEMORY[0x1F40D7678](calendar, at, componentDesc);
}

CFCalendarRef CFCalendarCopyCurrent(void)
{
  return (CFCalendarRef)MEMORY[0x1F40D7680]();
}

CFCalendarRef CFCalendarCreateWithIdentifier(CFAllocatorRef allocator, CFCalendarIdentifier identifier)
{
  return (CFCalendarRef)MEMORY[0x1F40D7690](allocator, identifier);
}

Boolean CFCalendarDecomposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime at, const char *componentDesc, ...)
{
  va_start(va, componentDesc);
  uint64_t v3 = va_arg(va, void);
  return MEMORY[0x1F40D7698](calendar, v3, at);
}

CFIndex CFCalendarGetOrdinalityOfUnit(CFCalendarRef calendar, CFCalendarUnit smallerUnit, CFCalendarUnit biggerUnit, CFAbsoluteTime at)
{
  return MEMORY[0x1F40D76B8](calendar, smallerUnit, biggerUnit, at);
}

void CFCalendarSetTimeZone(CFCalendarRef calendar, CFTimeZoneRef tz)
{
}

void CFCharacterSetAddCharactersInRange(CFMutableCharacterSetRef theSet, CFRange theRange)
{
}

CFCharacterSetRef CFCharacterSetCreateCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7708](alloc, theSet);
}

CFMutableCharacterSetRef CFCharacterSetCreateMutable(CFAllocatorRef alloc)
{
  return (CFMutableCharacterSetRef)MEMORY[0x1F40D7718](alloc);
}

CFMutableCharacterSetRef CFCharacterSetCreateMutableCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFMutableCharacterSetRef)MEMORY[0x1F40D7720](alloc, theSet);
}

CFCharacterSetRef CFCharacterSetCreateWithCharactersInString(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7738](alloc, theString);
}

CFCharacterSetRef CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7740](theSetIdentifier);
}

void CFCharacterSetInvert(CFMutableCharacterSetRef theSet)
{
}

Boolean CFCharacterSetIsCharacterMember(CFCharacterSetRef theSet, UniChar theChar)
{
  return MEMORY[0x1F40D7770](theSet, theChar);
}

Boolean CFCharacterSetIsLongCharacterMember(CFCharacterSetRef theSet, UTF32Char theChar)
{
  return MEMORY[0x1F40D7778](theSet, *(void *)&theChar);
}

void CFCharacterSetUnion(CFMutableCharacterSetRef theSet, CFCharacterSetRef theOtherSet)
{
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x1F40D77A8](cf);
}

uint64_t CFCopyHomeDirectoryURLForUser()
{
  return MEMORY[0x1F40D77B8]();
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1F40D7818](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1F40D7860]();
}

CFComparisonResult CFDateCompare(CFDateRef theDate, CFDateRef otherDate, void *context)
{
  return MEMORY[0x1F40D7888](theDate, otherDate, context);
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1F40D7898](allocator, at);
}

CFTypeRef CFDateFormatterCopyProperty(CFDateFormatterRef formatter, CFDateFormatterKey key)
{
  return (CFTypeRef)MEMORY[0x1F40D78A8](formatter, key);
}

CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle)
{
  return (CFDateFormatterRef)MEMORY[0x1F40D78B0](allocator, locale, dateStyle, timeStyle);
}

CFStringRef CFDateFormatterCreateStringWithDate(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFDateRef date)
{
  return (CFStringRef)MEMORY[0x1F40D78E0](allocator, formatter, date);
}

void CFDateFormatterSetFormat(CFDateFormatterRef formatter, CFStringRef formatString)
{
}

CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate)
{
  MEMORY[0x1F40D7928](theDate);
  return result;
}

CFTypeID CFDateGetTypeID(void)
{
  return MEMORY[0x1F40D7938]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7990](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D79A8](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1F40D7A18](theDict, key, value);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x1F40D7B60](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFHashCode CFHash(CFTypeRef cf)
{
  return MEMORY[0x1F40D7BA0](cf);
}

CFLocaleRef CFLocaleCopyCurrent(void)
{
  return (CFLocaleRef)MEMORY[0x1F40D7BB8]();
}

CFArrayRef CFLocaleCopyPreferredLanguages(void)
{
  return (CFArrayRef)MEMORY[0x1F40D7BD8]();
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x1F40D7BE0](allocator, localeIdentifier);
}

CFLocaleIdentifier CFLocaleCreateCanonicalLanguageIdentifierFromString(CFAllocatorRef allocator, CFStringRef localeIdentifier)
{
  return (CFLocaleIdentifier)MEMORY[0x1F40D7BE8](allocator, localeIdentifier);
}

CFLocaleIdentifier CFLocaleGetIdentifier(CFLocaleRef locale)
{
  return (CFLocaleIdentifier)MEMORY[0x1F40D7C20](locale);
}

uint64_t CFLog()
{
  return MEMORY[0x1F40D7C50]();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D20]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

CFTypeID CFNullGetTypeID(void)
{
  return MEMORY[0x1F40D7D68]();
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return MEMORY[0x1F40D7E08](number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x1F40D7E30](number);
}

void CFPreferencesAddSuitePreferencesToApp(CFStringRef applicationID, CFStringRef suiteID)
{
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7EA0](key, applicationID);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE0](key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE8](key, applicationID, keyExistsAndHasValidFormat);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40D7F18](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F50](allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void *context)
{
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1F40D81F8](theSet, value);
}

CFSetRef CFSetCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFSetCallBacks *callBacks)
{
  return (CFSetRef)MEMORY[0x1F40D8200](allocator, values, numValues, callBacks);
}

CFSetRef CFSetCreateCopy(CFAllocatorRef allocator, CFSetRef theSet)
{
  return (CFSetRef)MEMORY[0x1F40D8208](allocator, theSet);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1F40D8210](allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x1F40D8220](theSet);
}

const void *__cdecl CFSetGetValue(CFSetRef theSet, const void *value)
{
  return (const void *)MEMORY[0x1F40D8238](theSet, value);
}

void CFSetGetValues(CFSetRef theSet, const void **values)
{
}

void CFSetRemoveAllValues(CFMutableSetRef theSet)
{
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
}

void CFSetSetValue(CFMutableSetRef theSet, const void *value)
{
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
}

void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars)
{
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x1F40D83D0](alloc, theString, separatorString);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x1F40D83E0](alloc, theArray, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1F40D83F0](alloc, theString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8408](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8410](alloc, maxLength, theString);
}

CFMutableStringRef CFStringCreateMutableWithExternalCharactersNoCopy(CFAllocatorRef alloc, UniChar *chars, CFIndex numChars, CFIndex capacity, CFAllocatorRef externalCharactersAllocator)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8418](alloc, chars, numChars, capacity, externalCharactersAllocator);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1F40D8438](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8440](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation, contentsDeallocator);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8458](alloc, cStr, *(void *)&encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars)
{
  return (CFStringRef)MEMORY[0x1F40D8460](alloc, chars, numChars);
}

CFStringRef CFStringCreateWithCharactersNoCopy(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8470](alloc, chars, numChars, contentsDeallocator);
}

CFStringRef CFStringCreateWithFileSystemRepresentation(CFAllocatorRef alloc, const char *buffer)
{
  return (CFStringRef)MEMORY[0x1F40D8478](alloc, buffer);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1F40D8490](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1F40D84A8](alloc, str, range.location, range.length);
}

void CFStringDelete(CFMutableStringRef theString, CFRange range)
{
}

uint64_t CFStringEncodingBytesToUnicode()
{
  return MEMORY[0x1F40D84B8]();
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3 = MEMORY[0x1F40D84C8](theString, stringToFind, compareOptions);
  result.length = v4;
  result.locatiouint64_t n = v3;
  return result;
}

Boolean CFStringFindCharacterFromSet(CFStringRef theString, CFCharacterSetRef theSet, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1F40D84D8](theString, theSet, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1F40D84E0](theString, stringToFind, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1F40D8500](theString, range.location, range.length, *(void *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1F40D8528](theString, idx);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1F40D8540](theString);
}

Boolean CFStringGetFileSystemRepresentation(CFStringRef string, char *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1F40D8558](string, buffer, maxBufLen);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x1F40D8568](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8590](length, *(void *)&encoding);
}

uint64_t CFStringGetRangeOfCharacterClusterAtIndex()
{
  return MEMORY[0x1F40D85D0]();
}

CFRange CFStringGetRangeOfComposedCharactersAtIndex(CFStringRef theString, CFIndex theIndex)
{
  CFIndex v2 = MEMORY[0x1F40D85D8](theString, theIndex);
  result.length = v3;
  result.locatiouint64_t n = v2;
  return result;
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1F40D8600](theString, prefix);
}

Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix)
{
  return MEMORY[0x1F40D8608](theString, suffix);
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
}

void CFStringNormalize(CFMutableStringRef theString, CFStringNormalizationForm theForm)
{
}

void CFStringTrimWhitespace(CFMutableStringRef theString)
{
}

CFTimeZoneRef CFTimeZoneCopySystem(void)
{
  return (CFTimeZoneRef)MEMORY[0x1F40D86F8]();
}

CFTimeZoneRef CFTimeZoneCreateWithTimeIntervalFromGMT(CFAllocatorRef allocator, CFTimeInterval ti)
{
  return (CFTimeZoneRef)MEMORY[0x1F40D8708](allocator, ti);
}

CFURLRef CFURLCopyAbsoluteURL(CFURLRef relativeURL)
{
  return (CFURLRef)MEMORY[0x1F40D8740](relativeURL);
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x1F40D8758](anURL, pathStyle);
}

CFStringRef CFURLCopyLastPathComponent(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x1F40D8770](url);
}

CFURLRef CFURLCreateCopyDeletingLastPathComponent(CFAllocatorRef allocator, CFURLRef url)
{
  return (CFURLRef)MEMORY[0x1F40D8808](allocator, url);
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D8848](allocator, buffer, bufLen, isDirectory);
}

CFURLRef CFURLCreateWithBytes(CFAllocatorRef allocator, const UInt8 *URLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1F40D8888](allocator, URLBytes, length, *(void *)&encoding, baseURL);
}

CFStringRef CFURLGetString(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1F40D8918](anURL);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1F40D8988](alloc);
}

CFUUIDRef CFUUIDCreateFromString(CFAllocatorRef alloc, CFStringRef uuidStr)
{
  return (CFUUIDRef)MEMORY[0x1F40D8998](alloc, uuidStr);
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return (CFUUIDRef)MEMORY[0x1F40D89A0](alloc, *(void *)&bytes.byte0, *(void *)&bytes.byte8);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1F40D89B0](alloc, uuid);
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  uint64_t v1 = MEMORY[0x1F40D89E8](uuid);
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

uint64_t CloseStreamCompressor()
{
  return MEMORY[0x1F410A148]();
}

uint64_t CreateStreamCompressor()
{
  return MEMORY[0x1F410A160]();
}

uint64_t CreateStreamCompressorQueueWithOptions()
{
  return MEMORY[0x1F410A168]();
}

uint64_t CreateUTF8StringDecomposed()
{
  return MEMORY[0x1F412F020]();
}

uint64_t DRTailspinRequest()
{
  return MEMORY[0x1F4117570]();
}

uint64_t FinishStreamCompressorQueue()
{
  return MEMORY[0x1F410A170]();
}

CFMutableDictionaryRef IOBSDNameMatching(mach_port_t mainPort, uint32_t options, const char *bsdName)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40E8680](*(void *)&mainPort, *(void *)&options, bsdName);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x1F40E8ED8](*(void *)&iterator);
}

kern_return_t IOMasterPort(mach_port_t bootstrapPort, mach_port_t *mainPort)
{
  return MEMORY[0x1F40E8F00](*(void *)&bootstrapPort, mainPort);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x1F40E8F60](*(void *)&object);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1F40E9168](*(void *)&entry, key, allocator, *(void *)&options);
}

kern_return_t IORegistryEntryGetParentEntry(io_registry_entry_t entry, const io_name_t plane, io_registry_entry_t *parent)
{
  return MEMORY[0x1F40E91C8](*(void *)&entry, plane, parent);
}

kern_return_t IOServiceGetMatchingServices(mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return MEMORY[0x1F40E9258](*(void *)&mainPort, matching, existing);
}

uint64_t MDDictionaryUIntUIntCreate()
{
  return MEMORY[0x1F412F030]();
}

uint64_t MDDictionaryUIntUIntIncrementValue()
{
  return MEMORY[0x1F412F038]();
}

uint64_t MDDictionaryUIntUIntIterateValues()
{
  return MEMORY[0x1F412F040]();
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1F417CDE0]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1F417CE00]();
}

uint64_t NLStringTokenizerCopyBestStringLanguage()
{
  return MEMORY[0x1F41140C0]();
}

uint64_t NLStringTokenizerCreate()
{
  return MEMORY[0x1F41140C8]();
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2 = MEMORY[0x1F40E7140](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.locatiouint64_t n = v2;
  return result;
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return (NSString *)MEMORY[0x1F40E72A0](range.location, range.length);
}

int64_t OSAtomicAdd64(int64_t __theAmount, OSAtomic_int64_aligned64_t *__theValue)
{
  return MEMORY[0x1F40C99E0](__theAmount, __theValue);
}

void *__cdecl OSAtomicDequeue(OSQueueHead *__list, size_t a2)
{
  return (void *)MEMORY[0x1F40C99E8](__list, a2);
}

void OSAtomicEnqueue(OSQueueHead *__list, void *__new, size_t a3)
{
}

int32_t OSAtomicIncrement32(int32_t *__theValue)
{
  return MEMORY[0x1F40C99F8](__theValue);
}

uint64_t PLLogRegisteredEvent()
{
  return MEMORY[0x1F4145D90]();
}

uint64_t PLShouldLogRegisteredEvent()
{
  return MEMORY[0x1F4145DA8]();
}

uint64_t SIIsLanguagePreferred()
{
  return MEMORY[0x1F415BA10]();
}

uint64_t SILanguageModelCopyLocale()
{
  return MEMORY[0x1F415BA18]();
}

uint64_t SILanguageModelEnumerateKeyPhrases()
{
  return MEMORY[0x1F415BA28]();
}

uint64_t SILanguageModelGetDefaultModel()
{
  return MEMORY[0x1F415BA30]();
}

uint64_t SILanguageModelGetKeyPhraseAtIndex()
{
  return MEMORY[0x1F415BA38]();
}

uint64_t SILanguageModelGetLanguageGuessUsingMontreal()
{
  return MEMORY[0x1F415BA40]();
}

uint64_t SILanguageModelIsValidPhraseToken()
{
  return MEMORY[0x1F415BA50]();
}

uint64_t SILanguageModelPurge()
{
  return MEMORY[0x1F415BA58]();
}

uint64_t SILanguageModelRelease()
{
  return MEMORY[0x1F415BA60]();
}

uint64_t SILanguageModelReserve()
{
  return MEMORY[0x1F415BA68]();
}

uint64_t SILanguageModelShrinkLanguageGuessers()
{
  return MEMORY[0x1F415BA70]();
}

uint64_t SILanguageModelUnreserve()
{
  return MEMORY[0x1F415BA78]();
}

uint64_t SILanguagesIsCJK()
{
  return MEMORY[0x1F415BA80]();
}

uint64_t SILocalizationCreateWithOptions()
{
  return MEMORY[0x1F415BA88]();
}

uint64_t SILocalizationGetTokenType()
{
  return MEMORY[0x1F415BA90]();
}

uint64_t SILocalizationLoad()
{
  return MEMORY[0x1F415BA98]();
}

uint64_t SILocalizationRelease()
{
  return MEMORY[0x1F415BAA0]();
}

uint64_t SpotlightCacheBundleID()
{
  return MEMORY[0x1F412F0E0]();
}

uint64_t UTF16FromUTF8()
{
  return MEMORY[0x1F412F0E8]();
}

CFDictionaryRef UTTypeCopyDeclaration(CFStringRef inUTI)
{
  return (CFDictionaryRef)MEMORY[0x1F40DEE30](inUTI);
}

CFURLRef UTTypeCopyDeclaringBundleURL(CFStringRef inUTI)
{
  return (CFURLRef)MEMORY[0x1F40DEE38](inUTI);
}

uint64_t WriteToStreamCompressor()
{
  return MEMORY[0x1F410A180]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFCopySystemVersionDictionary()
{
  return MEMORY[0x1F40D8D10]();
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1F40D90D0]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1F40D90E8]();
}

uint64_t _CFRuntimeSetInstanceTypeID()
{
  return MEMORY[0x1F40D90F0]();
}

uint64_t _MDBundleUtilsClearCache()
{
  return MEMORY[0x1F412F0F0]();
}

uint64_t _MDBundleUtilsCopyCachedLocalizedDescriptionDictionary()
{
  return MEMORY[0x1F412F0F8]();
}

uint64_t _MDBundleUtilsCopyLocalizedDescriptionDictionary()
{
  return MEMORY[0x1F412F100]();
}

uint64_t _MDPerf_QueryLog()
{
  return MEMORY[0x1F412F118]();
}

uint64_t _MDPlistArrayGetCount()
{
  return MEMORY[0x1F412F120]();
}

uint64_t _MDPlistArrayGetPlistObjectAtIndex()
{
  return MEMORY[0x1F412F128]();
}

uint64_t _MDPlistArrayIterate()
{
  return MEMORY[0x1F412F130]();
}

uint64_t _MDPlistBooleanGetValue()
{
  return MEMORY[0x1F412F138]();
}

uint64_t _MDPlistBytesAddBoolean()
{
  return MEMORY[0x1F412F140]();
}

uint64_t _MDPlistBytesAddCString()
{
  return MEMORY[0x1F412F148]();
}

uint64_t _MDPlistBytesAddData()
{
  return MEMORY[0x1F412F150]();
}

uint64_t _MDPlistBytesAddDate()
{
  return MEMORY[0x1F412F158]();
}

uint64_t _MDPlistBytesAddInteger()
{
  return MEMORY[0x1F412F160]();
}

uint64_t _MDPlistBytesAddInternedCString()
{
  return MEMORY[0x1F412F168]();
}

uint64_t _MDPlistBytesAddNull()
{
  return MEMORY[0x1F412F170]();
}

uint64_t _MDPlistBytesAddRawInternedCStringKey()
{
  return MEMORY[0x1F412F178]();
}

uint64_t _MDPlistBytesAddRawInternedCStringKeyWithString()
{
  return MEMORY[0x1F412F180]();
}

uint64_t _MDPlistBytesAddReal()
{
  return MEMORY[0x1F412F188]();
}

uint64_t _MDPlistBytesAddString()
{
  return MEMORY[0x1F412F190]();
}

uint64_t _MDPlistBytesAppendMultiplePlistBytes()
{
  return MEMORY[0x1F412F198]();
}

uint64_t _MDPlistBytesAppendPlist()
{
  return MEMORY[0x1F412F1A0]();
}

uint64_t _MDPlistBytesAppendPlistBytes()
{
  return MEMORY[0x1F412F1A8]();
}

uint64_t _MDPlistBytesBeginArray()
{
  return MEMORY[0x1F412F1B0]();
}

uint64_t _MDPlistBytesBeginDictionary()
{
  return MEMORY[0x1F412F1B8]();
}

uint64_t _MDPlistBytesBeginPlist()
{
  return MEMORY[0x1F412F1C0]();
}

uint64_t _MDPlistBytesCopyPlistAtIndex()
{
  return MEMORY[0x1F412F1D8]();
}

uint64_t _MDPlistBytesCreate()
{
  return MEMORY[0x1F412F1E0]();
}

uint64_t _MDPlistBytesCreateMutable()
{
  return MEMORY[0x1F412F1E8]();
}

uint64_t _MDPlistBytesCreateMutableCopy()
{
  return MEMORY[0x1F412F1F0]();
}

uint64_t _MDPlistBytesCreateMutableUsingMalloc()
{
  return MEMORY[0x1F412F1F8]();
}

uint64_t _MDPlistBytesCreateMutableUsingMallocWithZone()
{
  return MEMORY[0x1F412F200]();
}

uint64_t _MDPlistBytesEndArray()
{
  return MEMORY[0x1F412F210]();
}

uint64_t _MDPlistBytesEndDictionary()
{
  return MEMORY[0x1F412F218]();
}

uint64_t _MDPlistBytesEndPlist()
{
  return MEMORY[0x1F412F220]();
}

uint64_t _MDPlistBytesGetByteVector()
{
  return MEMORY[0x1F412F228]();
}

uint64_t _MDPlistBytesGetByteVectorCount()
{
  return MEMORY[0x1F412F230]();
}

uint64_t _MDPlistContainerAddBooleanValue()
{
  return MEMORY[0x1F412F238]();
}

uint64_t _MDPlistContainerAddCString()
{
  return MEMORY[0x1F412F240]();
}

uint64_t _MDPlistContainerAddDataValue()
{
  return MEMORY[0x1F412F248]();
}

uint64_t _MDPlistContainerAddDateValue()
{
  return MEMORY[0x1F412F250]();
}

uint64_t _MDPlistContainerAddInt32Value()
{
  return MEMORY[0x1F412F260]();
}

uint64_t _MDPlistContainerAddInt64Value()
{
  return MEMORY[0x1F412F268]();
}

uint64_t _MDPlistContainerAddNullValue()
{
  return MEMORY[0x1F412F270]();
}

uint64_t _MDPlistContainerAddObject()
{
  return MEMORY[0x1F412F278]();
}

uint64_t _MDPlistContainerBeginArray()
{
  return MEMORY[0x1F412F280]();
}

uint64_t _MDPlistContainerBeginContainer()
{
  return MEMORY[0x1F412F288]();
}

uint64_t _MDPlistContainerBeginDictionary()
{
  return MEMORY[0x1F412F290]();
}

uint64_t _MDPlistContainerCopyObject()
{
  return MEMORY[0x1F412F2A0]();
}

uint64_t _MDPlistContainerCopyRootObject()
{
  return MEMORY[0x1F412F2A8]();
}

uint64_t _MDPlistContainerCreateMutable()
{
  return MEMORY[0x1F412F2B0]();
}

uint64_t _MDPlistContainerCreateWithBytes()
{
  return MEMORY[0x1F412F2B8]();
}

uint64_t _MDPlistContainerCreateWithCopiedBytes()
{
  return MEMORY[0x1F412F2C8]();
}

uint64_t _MDPlistContainerEndArray()
{
  return MEMORY[0x1F412F2D0]();
}

uint64_t _MDPlistContainerEndContainer()
{
  return MEMORY[0x1F412F2D8]();
}

uint64_t _MDPlistContainerEndDictionary()
{
  return MEMORY[0x1F412F2E0]();
}

uint64_t _MDPlistContainerGetBytes()
{
  return MEMORY[0x1F412F2E8]();
}

uint64_t _MDPlistContainerGetLength()
{
  return MEMORY[0x1F412F2F0]();
}

uint64_t _MDPlistContainerGetPlistObjectAtKeyArray()
{
  return MEMORY[0x1F412F2F8]();
}

uint64_t _MDPlistDataGetBytePtr()
{
  return MEMORY[0x1F412F300]();
}

uint64_t _MDPlistDictionaryGetPlistObjectForKey()
{
  return MEMORY[0x1F412F310]();
}

uint64_t _MDPlistDictionaryIterate()
{
  return MEMORY[0x1F412F318]();
}

uint64_t _MDPlistGetPlistObjectSize()
{
  return MEMORY[0x1F412F320]();
}

uint64_t _MDPlistGetPlistObjectType()
{
  return MEMORY[0x1F412F328]();
}

uint64_t _MDPlistGetRootPlistObjectFromBytes()
{
  return MEMORY[0x1F412F330]();
}

uint64_t _MDPlistGetRootPlistObjectFromBytesWithError()
{
  return MEMORY[0x1F412F338]();
}

uint64_t _MDPlistGetRootPlistObjectFromPlist()
{
  return MEMORY[0x1F412F340]();
}

uint64_t _MDPlistNumberGetIntValue()
{
  return MEMORY[0x1F412F350]();
}

uint64_t _MDPlistStringGetValue()
{
  return MEMORY[0x1F412F358]();
}

uint64_t _MDStoreOIDArrayAppendMultipleOIDArrays()
{
  return MEMORY[0x1F412F360]();
}

uint64_t _MDStoreOIDArrayApplyBlock()
{
  return MEMORY[0x1F412F368]();
}

uint64_t _MDStoreOIDArrayBeginBulkAdd()
{
  return MEMORY[0x1F412F378]();
}

uint64_t _MDStoreOIDArrayBeginSequence()
{
  return MEMORY[0x1F412F380]();
}

uint64_t _MDStoreOIDArrayCreate()
{
  return MEMORY[0x1F412F388]();
}

uint64_t _MDStoreOIDArrayCreateMutable()
{
  return MEMORY[0x1F412F390]();
}

uint64_t _MDStoreOIDArrayCreateMutableCopy()
{
  return MEMORY[0x1F412F398]();
}

uint64_t _MDStoreOIDArrayCreateMutableWithOids()
{
  return MEMORY[0x1F412F3A0]();
}

uint64_t _MDStoreOIDArrayEndBulkAdd()
{
  return MEMORY[0x1F412F3A8]();
}

uint64_t _MDStoreOIDArrayEndSequence()
{
  return MEMORY[0x1F412F3B0]();
}

uint64_t _MDStoreOIDArrayGetVector()
{
  return MEMORY[0x1F412F3B8]();
}

uint64_t _MDStoreOIDArrayGetVectorCount()
{
  return MEMORY[0x1F412F3C0]();
}

uint64_t _MDStoreOIDArraySetShouldUseMalloc()
{
  return MEMORY[0x1F412F3C8]();
}

uint64_t _NLStringTokenizerCopyPossibleStringLanguages()
{
  return MEMORY[0x1F4114190]();
}

uint64_t _NLStringTokenizerGetDerivedTokens()
{
  return MEMORY[0x1F4114198]();
}

uint64_t _NLStringTokenizerGetLanguageIDForLocale()
{
  return MEMORY[0x1F41141A0]();
}

uint64_t _NLStringTokenizerGetSubTokensOfCompound()
{
  return MEMORY[0x1F41141A8]();
}

uint64_t _NLStringTokenizerSetLocale()
{
  return MEMORY[0x1F41141B0]();
}

uint64_t _NLStringTokenizerSetStringWithOptionsAndLanguageID()
{
  return MEMORY[0x1F41141B8]();
}

uint64_t _NLStringTokenizerTokenize()
{
  return MEMORY[0x1F41141C0]();
}

uint64_t _NLStringTokenizerTokenizeWithTranscriptions()
{
  return MEMORY[0x1F41141C8]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

std::string *__cdecl std::error_code::message(std::string *__return_ptr retstr, const std::error_code *this)
{
  return (std::string *)MEMORY[0x1F417E360](retstr, this);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x1F417E3A8]();
}

{
  return MEMORY[0x1F417E998]();
}

const std::__fs::filesystem::directory_entry *__cdecl std::__fs::filesystem::directory_iterator::__dereference(const std::__fs::filesystem::directory_iterator *this)
{
  return (const std::__fs::filesystem::directory_entry *)MEMORY[0x1F417E3B0](this);
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__filename(const std::__fs::filesystem::path *this)
{
  uint64_t v1 = (const std::string_view::value_type *)MEMORY[0x1F417E3C0](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__root_directory(const std::__fs::filesystem::path *this)
{
  uint64_t v1 = (const std::string_view::value_type *)MEMORY[0x1F417E3D8](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5A0](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5B8](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5D8](this, __s);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5E0](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E600](this, __pos, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E608](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1F417E660](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1F417E670](this, __str);
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1F417E740]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1F417E748]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x1F417E768]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x1F417E778]();
}

{
  return MEMORY[0x1F417E780]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x1F417E788]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1F417E7A0]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x1F417E7C0]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1F417E830]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1F417E838]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x1F417E840]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1F417E848]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1F417E850]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1F417E860]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E890]();
}

{
  return MEMORY[0x1F417E898]();
}

{
  return MEMORY[0x1F417E8A0]();
}

{
  return MEMORY[0x1F417E8B0]();
}

{
  return MEMORY[0x1F417E8C0]();
}

std::random_device *__cdecl std::random_device::random_device(std::random_device *this, const std::string *__token)
{
  return (std::random_device *)MEMORY[0x1F417E908](this, __token);
}

void std::random_device::~random_device(std::random_device *this)
{
}

std::random_device::result_type std::random_device::operator()(std::random_device *this)
{
  return MEMORY[0x1F417E918](this);
}

uint64_t std::ifstream::open()
{
  return MEMORY[0x1F417E938]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1F417E940]();
}

uint64_t std::ofstream::open()
{
  return MEMORY[0x1F417E950]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

const std::error_category *std::system_category(void)
{
  return (const std::error_category *)MEMORY[0x1F417E9E0]();
}

const std::error_category *std::generic_category(void)
{
  return (const std::error_category *)MEMORY[0x1F417E9F0]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1F417EA90](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

void std::__libcpp_verbose_abort(const char *__format, ...)
{
}

std::__fs::filesystem::directory_iterator *__cdecl std::__fs::filesystem::directory_iterator::__increment(std::__fs::filesystem::directory_iterator *this, std::error_code *__ec)
{
  return (std::__fs::filesystem::directory_iterator *)MEMORY[0x1F417EB70](this, __ec);
}

std::__fs::filesystem::directory_iterator *__cdecl std::__fs::filesystem::directory_iterator::directory_iterator(std::__fs::filesystem::directory_iterator *this, const std::__fs::filesystem::path *a2, std::error_code *a3, std::__fs::filesystem::directory_options a4)
{
  return (std::__fs::filesystem::directory_iterator *)MEMORY[0x1F417EB78](this, a2, a3, a4);
}

BOOL std::__fs::filesystem::__remove(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return MEMORY[0x1F417EBB8](a1, __ec);
}

std::__fs::filesystem::file_status std::__fs::filesystem::__status(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return (std::__fs::filesystem::file_status)MEMORY[0x1F417EBC8](a1, __ec);
}

int std::stoi(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1F417EBE0](__str, __idx, *(void *)&__base);
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

uint64_t std::__sort<std::__less<long long,long long> &,long long *>()
{
  return MEMORY[0x1F417EC80]();
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x1F417EC90]();
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x1F417ECA0]();
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1F417EE70](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1F417EE78](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x1F417EE90](retstr, __val);
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

uint64_t __MDPlistBytesAddObject()
{
  return MEMORY[0x1F412F3D8]();
}

uint64_t __MDPlistBytesAddUInt64Array()
{
  return MEMORY[0x1F412F3E0]();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1F40C9C28]();
}

uint64_t __memset_chk()
{
  return MEMORY[0x1F40C9C38]();
}

uint64_t __mmap()
{
  return MEMORY[0x1F40C9C40]();
}

int __sprintf_chk(char *a1, int a2, size_t a3, const char *a4, ...)
{
  return MEMORY[0x1F40C9CA0](a1, *(void *)&a2, a3, a4);
}

uint64_t __strcat_chk()
{
  return MEMORY[0x1F40C9CC0]();
}

uint64_t __strcpy_chk()
{
  return MEMORY[0x1F40C9CC8]();
}

uint64_t __strlcat_chk()
{
  return MEMORY[0x1F40C9CD0]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1F40C9CD8]();
}

uint64_t __strncpy_chk()
{
  return MEMORY[0x1F40C9CE8]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9CF8](*(void *)&a1);
}

void _exit(int a1)
{
}

uint64_t _icu_locale_create()
{
  return MEMORY[0x1F412F428]();
}

void _longjmp(jmp_buf a1, int a2)
{
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

int _setjmp(jmp_buf a1)
{
  return MEMORY[0x1F40CA138](a1);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

void abort(void)
{
}

uint64_t abort_report_np()
{
  return MEMORY[0x1F40CA1E8]();
}

int access(const char *a1, int a2)
{
  return MEMORY[0x1F40CA210](a1, *(void *)&a2);
}

uLong adler32(uLong adler, const Bytef *buf, uInt len)
{
  return MEMORY[0x1F4182BA0](adler, buf, *(void *)&len);
}

uint64_t analytics_send_event()
{
  return MEMORY[0x1F41138D0]();
}

uint64_t analytics_send_event_lazy()
{
  return MEMORY[0x1F41138D8]();
}

uint32_t arc4random(void)
{
  return MEMORY[0x1F40CA3A8]();
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1F40CA440](a1, a2);
}

int atoi(const char *a1)
{
  return MEMORY[0x1F40CA4A8](a1);
}

uint64_t atol(const char *a1)
{
  return MEMORY[0x1F40CA4B8](a1);
}

uint64_t atoll(const char *a1)
{
  return MEMORY[0x1F40CA4C8](a1);
}

int bcmp(const void *a1, const void *a2, size_t a3)
{
  return MEMORY[0x1F40CA528](a1, a2, a3);
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x1F40CA570](__key, __base, __nel, __width, __compar);
}

void *__cdecl bsearch_b(const void *__key, const void *__base, size_t __nel, size_t __width, void *__compar)
{
  return (void *)MEMORY[0x1F40CA578](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
}

int cache_create(const char *name, const cache_attributes_t *attrs, cache_t **cache_out)
{
  return MEMORY[0x1F40CA5A8](name, attrs, cache_out);
}

int cache_get_and_retain(cache_t *cache, void *key, void **value_out)
{
  return MEMORY[0x1F40CA5C0](cache, key, value_out);
}

uint64_t cache_get_info_for_key()
{
  return MEMORY[0x1F40CA5D8]();
}

uint64_t cache_get_info_for_keys()
{
  return MEMORY[0x1F40CA5E0]();
}

int cache_release_value(cache_t *cache, void *value)
{
  return MEMORY[0x1F40CA610](cache, value);
}

int cache_remove(cache_t *cache, void *key)
{
  return MEMORY[0x1F40CA618](cache, key);
}

int cache_remove_all(cache_t *cache)
{
  return MEMORY[0x1F40CA620](cache);
}

int cache_set_and_retain(cache_t *cache, void *key, void *value, cache_cost_t cost)
{
  return MEMORY[0x1F40CA630](cache, key, value, cost);
}

uint64_t cache_set_cost_hint()
{
  return MEMORY[0x1F40CA638]();
}

uint64_t change_fdguard_np()
{
  return MEMORY[0x1F40CB388]();
}

clock_t clock(void)
{
  return MEMORY[0x1F40CB3B8]();
}

int clock_gettime(clockid_t __clock_id, timespec *__tp)
{
  return MEMORY[0x1F40CB3D0](*(void *)&__clock_id, __tp);
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x1F40CB3D8](*(void *)&__clock_id);
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x1F40CB400](a1);
}

int compress2(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen, int level)
{
  return MEMORY[0x1F4182BB0](dest, destLen, source, sourceLen, *(void *)&level);
}

size_t compression_decode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return MEMORY[0x1F417F0A0](dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, *(void *)&algorithm);
}

size_t compression_decode_scratch_buffer_size(compression_algorithm algorithm)
{
  return MEMORY[0x1F417F0A8](*(void *)&algorithm);
}

size_t compression_encode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return MEMORY[0x1F417F0B0](dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, *(void *)&algorithm);
}

size_t compression_encode_scratch_buffer_size(compression_algorithm algorithm)
{
  return MEMORY[0x1F417F0B8](*(void *)&algorithm);
}

compression_status compression_stream_destroy(compression_stream *stream)
{
  return MEMORY[0x1F417F0C0](stream);
}

compression_status compression_stream_init(compression_stream *stream, compression_stream_operation operation, compression_algorithm algorithm)
{
  return MEMORY[0x1F417F0D0](stream, *(void *)&operation, *(void *)&algorithm);
}

compression_status compression_stream_process(compression_stream *stream, int flags)
{
  return MEMORY[0x1F417F0E0](stream, *(void *)&flags);
}

size_t confstr(int a1, char *a2, size_t a3)
{
  return MEMORY[0x1F40CB438](*(void *)&a1, a2, a3);
}

int copyfile(const char *from, const char *to, copyfile_state_t state, copyfile_flags_t flags)
{
  return MEMORY[0x1F40CB880](from, to, state, *(void *)&flags);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
}

void dispatch_apply_f(size_t iterations, dispatch_queue_t queue, void *context, void (__cdecl *work)(void *, size_t))
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

uint64_t dispatch_async_enforce_qos_class_f()
{
  return MEMORY[0x1F40CB970]();
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C0](flags, block);
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C8](flags, *(void *)&qos_class, *(void *)&relative_priority, block);
}

dispatch_queue_t dispatch_get_current_queue(void)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBA58]();
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_group_async_f(dispatch_group_t group, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA0](attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

uint64_t dispatch_queue_attr_make_with_overcommit()
{
  return MEMORY[0x1F40CBBB0]();
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBD0](label, attr, target);
}

const char *__cdecl dispatch_queue_get_label(dispatch_queue_t queue)
{
  return (const char *)MEMORY[0x1F40CBBD8](queue);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
}

uint64_t dispatch_queue_set_width()
{
  return MEMORY[0x1F40CBC00]();
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

dispatch_workloop_t dispatch_workloop_create(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1F40CBD50](label);
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1F40CBD58](label);
}

void dispatch_workloop_set_autorelease_frequency(dispatch_workloop_t workloop, dispatch_autorelease_frequency_t frequency)
{
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

int dprintf(int a1, const char *a2, ...)
{
  return MEMORY[0x1F40CBDE0](*(void *)&a1, a2);
}

int dup(int a1)
{
  return MEMORY[0x1F40CBDF8](*(void *)&a1);
}

void exit(int a1)
{
}

int fchmodat(int a1, const char *a2, mode_t a3, int a4)
{
  return MEMORY[0x1F40CC030](*(void *)&a1, a2, a3, *(void *)&a4);
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1F40CC058](*(void *)&a1, *(void *)&a2);
}

DIR *__cdecl fdopendir(int a1)
{
  return (DIR *)MEMORY[0x1F40CC078](*(void *)&a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1F40CC0C8](a1);
}

int ffsctl(int a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x1F40CC0D8](*(void *)&a1, a2, a3, *(void *)&a4);
}

int fgetattrlist(int a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return MEMORY[0x1F40CC0E0](*(void *)&a1, a2, a3, a4, *(void *)&a5);
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  return (char *)MEMORY[0x1F40CC100](a1, *(void *)&a2, a3);
}

ssize_t fgetxattr(int fd, const char *name, void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1F40CC108](*(void *)&fd, name, value, size, *(void *)&position, *(void *)&options);
}

int flock(int a1, int a2)
{
  return MEMORY[0x1F40CC160](*(void *)&a1, *(void *)&a2);
}

const char *__cdecl fmtcheck(const char *a1, const char *a2)
{
  return (const char *)MEMORY[0x1F40CC1B0](a1, a2);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1F40CC1F0](a1, a2);
}

void free(void *a1)
{
}

int fscanf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC280](a1, a2);
}

int fsetxattr(int fd, const char *name, const void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1F40CC2A8](*(void *)&fd, name, value, size, *(void *)&position, *(void *)&options);
}

ssize_t fsgetpath(char *a1, size_t a2, fsid_t *a3, uint64_t a4)
{
  return MEMORY[0x1F40CC2B0](a1, a2, a3, a4);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1F40CC2B8](*(void *)&a1, a2);
}

int fstatat(int a1, const char *a2, stat *a3, int a4)
{
  return MEMORY[0x1F40CC2C8](*(void *)&a1, a2, a3, *(void *)&a4);
}

int fstatfs(int a1, statfs *a2)
{
  return MEMORY[0x1F40CC2D0](*(void *)&a1, a2);
}

int fsync(int a1)
{
  return MEMORY[0x1F40CC2D8](*(void *)&a1);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x1F40CC2F0](*(void *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

int getattrlist(const char *a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return MEMORY[0x1F40CC360](a1, a2, a3, a4, *(void *)&a5);
}

int getattrlistbulk(int a1, void *a2, void *a3, size_t a4, uint64_t a5)
{
  return MEMORY[0x1F40CC370](*(void *)&a1, a2, a3, a4, a5);
}

char *__cdecl getcwd(char *a1, size_t a2)
{
  return (char *)MEMORY[0x1F40CC398](a1, a2);
}

uid_t geteuid(void)
{
  return MEMORY[0x1F40CC3B8]();
}

int getiopolicy_np(int a1, int a2)
{
  return MEMORY[0x1F40CC418](*(void *)&a1, *(void *)&a2);
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

int getrlimit(int a1, rlimit *a2)
{
  return MEMORY[0x1F40CC500](*(void *)&a1, a2);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1F40CC568](a1, a2);
}

ssize_t getxattr(const char *path, const char *name, void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1F40CC590](path, name, value, size, *(void *)&position, *(void *)&options);
}

uint64_t guarded_close_np()
{
  return MEMORY[0x1F40CC5B8]();
}

uint64_t guarded_pwrite_np()
{
  return MEMORY[0x1F40CC5D0]();
}

uint64_t guarded_write_np()
{
  return MEMORY[0x1F40CC5D8]();
}

int heapsort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
  return MEMORY[0x1F40CC5E0](__base, __nel, __width, __compar);
}

kern_return_t host_info(host_t host, host_flavor_t flavor, host_info_t host_info_out, mach_msg_type_number_t *host_info_outCnt)
{
  return MEMORY[0x1F40CC608](*(void *)&host, *(void *)&flavor, host_info_out, host_info_outCnt);
}

uint64_t icu_ctx_release()
{
  return MEMORY[0x1F412F430]();
}

uint64_t icu_ctx_retain()
{
  return MEMORY[0x1F412F438]();
}

uint64_t icu_local_id()
{
  return MEMORY[0x1F412F440]();
}

uint64_t icu_locale_create()
{
  return MEMORY[0x1F412F448]();
}

uint64_t icu_locale_get_collation()
{
  return MEMORY[0x1F412F450]();
}

uint64_t icu_locale_get_rules()
{
  return MEMORY[0x1F412F458]();
}

uint64_t icu_locale_release()
{
  return MEMORY[0x1F412F460]();
}

uint64_t icu_locale_retain()
{
  return MEMORY[0x1F412F468]();
}

uint64_t icu_range_search_create()
{
  return MEMORY[0x1F412F470]();
}

uint64_t icu_range_search_next_match()
{
  return MEMORY[0x1F412F478]();
}

uint64_t icu_range_search_set_text()
{
  return MEMORY[0x1F412F480]();
}

uint64_t icu_range_search_set_uchar_text()
{
  return MEMORY[0x1F412F488]();
}

uint64_t icu_regex_copy()
{
  return MEMORY[0x1F412F490]();
}

uint64_t icu_regex_create()
{
  return MEMORY[0x1F412F498]();
}

uint64_t icu_regex_find()
{
  return MEMORY[0x1F412F4A0]();
}

uint64_t icu_rules_clear_cache()
{
  return MEMORY[0x1F412F4A8]();
}

uint64_t icu_search_context_create()
{
  return MEMORY[0x1F412F4B8]();
}

uint64_t icu_search_context_create_raw()
{
  return MEMORY[0x1F412F4C0]();
}

uint64_t icu_search_context_create_with_wildcard_limit()
{
  return MEMORY[0x1F412F4C8]();
}

uint64_t icu_search_context_is_fuzzy()
{
  return MEMORY[0x1F412F4D0]();
}

uint64_t icu_search_context_is_prefix()
{
  return MEMORY[0x1F412F4D8]();
}

uint64_t icu_search_context_item_get_info()
{
  return MEMORY[0x1F412F4E0]();
}

uint64_t icu_search_context_item_get_item_count()
{
  return MEMORY[0x1F412F4E8]();
}

uint64_t icu_search_match()
{
  return MEMORY[0x1F412F4F0]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1F40CC700]();
}

int link(const char *a1, const char *a2)
{
  return MEMORY[0x1F40CC830](a1, a2);
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x1F40CC868](a1);
}

long double log(long double __x)
{
  MEMORY[0x1F40CC878](__x);
  return result;
}

float logf(float a1)
{
  MEMORY[0x1F40CC8C0](a1);
  return result;
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x1F40CC8F8](*(void *)&a1, a2, *(void *)&a3);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1F40CC910]();
}

void mach_error(const char *str, mach_error_t error_value)
{
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x1F40CC940](*(void *)&error_value);
}

mach_port_t mach_host_self(void)
{
  return MEMORY[0x1F40CC950]();
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return MEMORY[0x1F40CC970](msg, *(void *)&option, *(void *)&send_size, *(void *)&rcv_size, *(void *)&rcv_name, *(void *)&timeout, *(void *)&notify);
}

kern_return_t mach_port_allocate(ipc_space_t task, mach_port_right_t right, mach_port_name_t *name)
{
  return MEMORY[0x1F40CC9A0](*(void *)&task, *(void *)&right, name);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1F40CC9B8](*(void *)&task, *(void *)&name);
}

kern_return_t mach_port_insert_right(ipc_space_t task, mach_port_name_t name, mach_port_t poly, mach_msg_type_name_t polyPoly)
{
  return MEMORY[0x1F40CCA08](*(void *)&task, *(void *)&name, *(void *)&poly, *(void *)&polyPoly);
}

mach_port_t mach_thread_self(void)
{
  return MEMORY[0x1F40CCA58]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1F40CCA60](info);
}

int madvise(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1F40CCB08](a1, a2, *(void *)&a3);
}

malloc_zone_t *__cdecl malloc_create_zone(vm_size_t start_size, unsigned int flags)
{
  return (malloc_zone_t *)MEMORY[0x1F40CCB20](start_size, *(void *)&flags);
}

malloc_zone_t *malloc_default_purgeable_zone(void)
{
  return (malloc_zone_t *)MEMORY[0x1F40CCB28]();
}

malloc_zone_t *malloc_default_zone(void)
{
  return (malloc_zone_t *)MEMORY[0x1F40CCB30]();
}

size_t malloc_good_size(size_t size)
{
  return MEMORY[0x1F40CCB58](size);
}

int malloc_make_nonpurgeable(void *ptr)
{
  return MEMORY[0x1F40CCB60](ptr);
}

void malloc_make_purgeable(void *ptr)
{
}

void malloc_set_zone_name(malloc_zone_t *zone, const char *name)
{
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

void *__cdecl malloc_type_valloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBB0](size, type_id);
}

void *__cdecl malloc_type_zone_calloc(malloc_zone_t *zone, size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBB8](zone, count, size, type_id);
}

void *__cdecl malloc_type_zone_malloc(malloc_zone_t *zone, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBC0](zone, size, type_id);
}

void *__cdecl malloc_type_zone_realloc(malloc_zone_t *zone, void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBD8](zone, ptr, size, type_id);
}

void *__cdecl malloc_type_zone_valloc(malloc_zone_t *zone, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBE0](zone, size, type_id);
}

void malloc_zone_free(malloc_zone_t *zone, void *ptr)
{
}

uint64_t md_deadline_once_cancel()
{
  return MEMORY[0x1F412F4F8]();
}

uint64_t md_deadline_once_create()
{
  return MEMORY[0x1F412F500]();
}

uint64_t md_deadline_once_release()
{
  return MEMORY[0x1F412F508]();
}

uint64_t md_deadline_once_run_block_with_lock()
{
  return MEMORY[0x1F412F510]();
}

uint64_t md_deadline_once_start()
{
  return MEMORY[0x1F412F518]();
}

uint64_t md_deadline_once_wait()
{
  return MEMORY[0x1F412F520]();
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

int mergesort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return MEMORY[0x1F40CCD48](__base, __nel, __width, __compar);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1F40CCDD0](a1, a2);
}

int mkstempsat_np(int dfd, char *path, int slen)
{
  return MEMORY[0x1F40CCE20](*(void *)&dfd, path, *(void *)&slen);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1F40CCE40](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int mprotect(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1F40CCE58](a1, a2, *(void *)&a3);
}

int msync(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1F40CCE78](a1, a2, *(void *)&a3);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE88](a1, a2);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1F40CD040](*(void *)&token, state64);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1F40CD050](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1F40CD058](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1F40CD060](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

void objc_enumerationMutation(id obj)
{
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return MEMORY[0x1F40CD0F0](a1, *(void *)&a2, *(void *)&a3, *(void *)&a4);
}

int openat(int a1, const char *a2, int a3, ...)
{
  return MEMORY[0x1F40CD100](*(void *)&a1, a2, *(void *)&a3);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x1F40CD120](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

void os_release(void *object)
{
}

void *__cdecl os_retain(void *object)
{
  return (void *)MEMORY[0x1F40CD548](object);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1F40CD558](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x1F40CD560](log, ptr);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1F40CD5A0]();
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

void perror(const char *a1)
{
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1F40CD830](*(void *)&__fd, __buf, __nbyte, a4);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1F40CD838](a1);
}

uint64_t proc_get_cpumon_params()
{
  return MEMORY[0x1F40CD858]();
}

uint64_t proc_set_cpumon_defaults()
{
  return MEMORY[0x1F40CD8D8]();
}

uint64_t proc_set_cpumon_params()
{
  return MEMORY[0x1F40CD8E0]();
}

void psort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

void psort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return MEMORY[0x1F40CD918](a1);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x1F40CD930](a1);
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD978](a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD980](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x1F40CD988](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD990](a1);
}

int pthread_cond_timedwait(pthread_cond_t *a1, pthread_mutex_t *a2, const timespec *a3)
{
  return MEMORY[0x1F40CD998](a1, a2, a3);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1F40CD9A8](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1F40CD9B8](a1, a2, a3, a4);
}

uint64_t pthread_fchdir_np()
{
  return MEMORY[0x1F40CD9F0]();
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1F40CDA20](a1);
}

int pthread_getugid_np(uid_t *a1, gid_t *a2)
{
  return MEMORY[0x1F40CDA28](a1, a2);
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x1F40CDA38](a1, a2);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1F40CDA40](a1, a2);
}

int pthread_key_delete(pthread_key_t a1)
{
  return MEMORY[0x1F40CDA48](a1);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA78](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_trylock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA90](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int pthread_mutexattr_destroy(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1F40CDAA0](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1F40CDAA8](a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x1F40CDAC8](a1, a2);
}

int pthread_override_qos_class_end_np(pthread_override_t __override)
{
  return MEMORY[0x1F40CDAD0](__override);
}

pthread_override_t pthread_override_qos_class_start_np(pthread_t __pthread, qos_class_t __qos_class, int __relative_priority)
{
  return (pthread_override_t)MEMORY[0x1F40CDAD8](__pthread, *(void *)&__qos_class, *(void *)&__relative_priority);
}

uint64_t pthread_qos_max_parallelism()
{
  return MEMORY[0x1F40CDAE0]();
}

int pthread_rwlock_destroy(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDAE8](a1);
}

int pthread_rwlock_init(pthread_rwlock_t *a1, const pthread_rwlockattr_t *a2)
{
  return MEMORY[0x1F40CDAF0](a1, a2);
}

int pthread_rwlock_rdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDAF8](a1);
}

int pthread_rwlock_unlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDB10](a1);
}

int pthread_rwlock_wrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDB18](a1);
}

int pthread_rwlockattr_destroy(pthread_rwlockattr_t *a1)
{
  return MEMORY[0x1F40CDB20](a1);
}

int pthread_rwlockattr_init(pthread_rwlockattr_t *a1)
{
  return MEMORY[0x1F40CDB28](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1F40CDB30]();
}

int pthread_set_qos_class_self_np(qos_class_t __qos_class, int __relative_priority)
{
  return MEMORY[0x1F40CDB48](*(void *)&__qos_class, *(void *)&__relative_priority);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1F40CDB70](a1, a2);
}

int pthread_setugid_np(uid_t a1, gid_t a2)
{
  return MEMORY[0x1F40CDB78](*(void *)&a1, *(void *)&a2);
}

int pthread_threadid_np(pthread_t a1, __uint64_t *a2)
{
  return MEMORY[0x1F40CDB90](a1, a2);
}

int puts(const char *a1)
{
  return MEMORY[0x1F40CDBB8](a1);
}

ssize_t pwrite(int __fd, const void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1F40CDBC0](*(void *)&__fd, __buf, __nbyte, a4);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1F40CDBD8]();
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

void qsort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
}

void qsort_r(void *__base, size_t __nel, size_t __width, void *a4, int (__cdecl *__compar)(void *, const void *, const void *))
{
}

uint64_t queryCompressionInfo()
{
  return MEMORY[0x1F410A188]();
}

int rand(void)
{
  return MEMORY[0x1F40CDC08]();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1F40CDC50](*(void *)&a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x1F40CDC60](a1);
}

int readdir_r(DIR *a1, dirent *a2, dirent **a3)
{
  return MEMORY[0x1F40CDC68](a1, a2, a3);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1F40CDC88](__ptr, __size);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
}

int renameat(int a1, const char *a2, int a3, const char *a4)
{
  return MEMORY[0x1F40CDD60](*(void *)&a1, a2, *(void *)&a3, a4);
}

int renameatx_np(int a1, const char *a2, int a3, const char *a4, unsigned int a5)
{
  return MEMORY[0x1F40CDD68](*(void *)&a1, a2, *(void *)&a3, a4, *(void *)&a5);
}

char *__cdecl rindex(const char *a1, int a2)
{
  return (char *)MEMORY[0x1F40CDD88](a1, *(void *)&a2);
}

int rmdir(const char *a1)
{
  return MEMORY[0x1F40CDD90](a1);
}

int searchfs(const char *a1, fssearchblock *a2, unint64_t *a3, unsigned int a4, unsigned int a5, searchstate *a6)
{
  return MEMORY[0x1F40CDED0](a1, a2, a3, *(void *)&a4, *(void *)&a5, a6);
}

int setiopolicy_np(int a1, int a2, int a3)
{
  return MEMORY[0x1F40CDF78](*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

int setxattr(const char *path, const char *name, const void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1F40CDFD8](path, name, value, size, *(void *)&position, *(void *)&options);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0A0](a1, a2);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0D0](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

int statfs(const char *a1, statfs *a2)
{
  return MEMORY[0x1F40CE118](a1, a2);
}

uint64_t strFromUTF8()
{
  return MEMORY[0x1F412F528]();
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x1F40CE138](a1, a2);
}

char *__cdecl strcasestr(const char *__big, const char *__little)
{
  return (char *)MEMORY[0x1F40CE140](__big, __little);
}

char *__cdecl strcat(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1F40CE148](__s1, __s2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE150](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x1F40CE168](__dst, __src);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1F40CE178](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x1F40CE198](a1, a2, a3, a4);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CE1A8](__dst, __source, __size);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CE1B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x1F40CE1D8](a1, a2, a3);
}

char *__cdecl strncat(char *__s1, const char *__s2, size_t __n)
{
  return (char *)MEMORY[0x1F40CE1E8](__s1, __s2, __n);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1F40CE1F8](__dst, __src, __n);
}

char *__cdecl strndup(const char *__s1, size_t __n)
{
  return (char *)MEMORY[0x1F40CE200](__s1, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1F40CE208](__s1, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE230](__s, *(void *)&__c);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1F40CE258](__s1, __s2);
}

double strtod(const char *a1, char **a2)
{
  MEMORY[0x1F40CE260](a1, a2);
  return result;
}

float strtof(const char *a1, char **a2)
{
  MEMORY[0x1F40CE270](a1, a2);
  return result;
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2A0](__str, __endptr, *(void *)&__base);
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2C0](__str, __endptr, *(void *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2E0](__str, __endptr, *(void *)&__base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2F0](__str, __endptr, *(void *)&__base);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1F40CE3C0](a1, *(void *)&a2, a3, a4, a5, a6);
}

kern_return_t task_threads(task_inspect_t target_task, thread_act_array_t *act_list, mach_msg_type_number_t *act_listCnt)
{
  return MEMORY[0x1F40CE4D8](*(void *)&target_task, act_list, act_listCnt);
}

kern_return_t thread_get_exception_ports(thread_act_t thread, exception_mask_t exception_mask, exception_mask_array_t masks, mach_msg_type_number_t *masksCnt, exception_handler_array_t old_handlers, exception_behavior_array_t old_behaviors, exception_flavor_array_t old_flavors)
{
  return MEMORY[0x1F40CE520](*(void *)&thread, *(void *)&exception_mask, masks, masksCnt, old_handlers, old_behaviors, old_flavors);
}

kern_return_t thread_get_state(thread_read_t target_act, thread_state_flavor_t flavor, thread_state_t old_state, mach_msg_type_number_t *old_stateCnt)
{
  return MEMORY[0x1F40CE528](*(void *)&target_act, *(void *)&flavor, old_state, old_stateCnt);
}

kern_return_t thread_info(thread_inspect_t target_act, thread_flavor_t flavor, thread_info_t thread_info_out, mach_msg_type_number_t *thread_info_outCnt)
{
  return MEMORY[0x1F40CE530](*(void *)&target_act, *(void *)&flavor, thread_info_out, thread_info_outCnt);
}

kern_return_t thread_resume(thread_read_t target_act)
{
  return MEMORY[0x1F40CE548](*(void *)&target_act);
}

kern_return_t thread_set_exception_ports(thread_act_t thread, exception_mask_t exception_mask, mach_port_t new_port, exception_behavior_t behavior, thread_state_flavor_t new_flavor)
{
  return MEMORY[0x1F40CE558](*(void *)&thread, *(void *)&exception_mask, *(void *)&new_port, *(void *)&behavior, *(void *)&new_flavor);
}

kern_return_t thread_set_state(thread_act_t target_act, thread_state_flavor_t flavor, thread_state_t new_state, mach_msg_type_number_t new_stateCnt)
{
  return MEMORY[0x1F40CE560](*(void *)&target_act, *(void *)&flavor, new_state, *(void *)&new_stateCnt);
}

kern_return_t thread_suspend(thread_read_t target_act)
{
  return MEMORY[0x1F40CE578](*(void *)&target_act);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1F40CE588](a1);
}

int8_t u_charType(UChar32 c)
{
  return MEMORY[0x1F417F718](*(void *)&c);
}

UBool u_isUWhiteSpace(UChar32 c)
{
  return MEMORY[0x1F417F7A0](*(void *)&c);
}

UBool u_ispunct(UChar32 c)
{
  return MEMORY[0x1F417F7E0](*(void *)&c);
}

UChar *__cdecl u_strFromUTF8(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const char *src, int32_t srcLength, UErrorCode *pErrorCode)
{
  return (UChar *)MEMORY[0x1F417F838](dest, *(void *)&destCapacity, pDestLength, src, *(void *)&srcLength, pErrorCode);
}

int32_t u_strToLower(UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, const char *locale, UErrorCode *pErrorCode)
{
  return MEMORY[0x1F417F848](dest, *(void *)&destCapacity, src, *(void *)&srcLength, locale, pErrorCode);
}

int uncompress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)
{
  return MEMORY[0x1F4182CF8](dest, destLen, source, sourceLen);
}

int unlink(const char *a1)
{
  return MEMORY[0x1F40CE5E0](a1);
}

int unlinkat(int a1, const char *a2, int a3)
{
  return MEMORY[0x1F40CE5E8](*(void *)&a1, a2, *(void *)&a3);
}

uint64_t unorm2_getNFCInstance()
{
  return MEMORY[0x1F4180230]();
}

uint64_t unorm2_normalize()
{
  return MEMORY[0x1F4180258]();
}

uint64_t unorm2_quickCheck()
{
  return MEMORY[0x1F4180268]();
}

uint64_t usearch_close()
{
  return MEMORY[0x1F4180610]();
}

uint64_t usearch_first()
{
  return MEMORY[0x1F4180618]();
}

uint64_t usearch_getMatchedLength()
{
  return MEMORY[0x1F4180628]();
}

uint64_t usearch_openFromCollator()
{
  return MEMORY[0x1F4180648]();
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1F40CE608](*(void *)&a1);
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  return MEMORY[0x1F40CE630](uu1, uu2);
}

void uuid_generate_random(uuid_t out)
{
}

void vDSP_distancesq(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Length __N)
{
}

void vDSP_vavlin(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  return MEMORY[0x1F40CE680](a1, a2, a3);
}

kern_return_t vm_copy(vm_map_t target_task, vm_address_t source_address, vm_size_t size, vm_address_t dest_address)
{
  return MEMORY[0x1F40CE6B8](*(void *)&target_task, source_address, size, dest_address);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x1F40CE6C0](*(void *)&target_task, address, size);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x1F40CE8B0](__s, *(void *)&__c, __n);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1F40CE928](*(void *)&__fd, __buf, __nbyte);
}

ssize_t writev(int a1, const iovec *a2, int a3)
{
  return MEMORY[0x1F40CE938](*(void *)&a1, a2, *(void *)&a3);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return MEMORY[0x1F40CE990](activity);
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return MEMORY[0x1F40CE9D0](activity, state);
}

BOOL xpc_activity_should_defer(xpc_activity_t activity)
{
  return MEMORY[0x1F40CE9E8](activity);
}

xpc_object_t xpc_BOOL_create(BOOL value)
{
  return (xpc_object_t)MEMORY[0x1F40CEB10](value);
}

void xpc_connection_activate(xpc_connection_t connection)
{
}

void xpc_connection_cancel(xpc_connection_t connection)
{
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBD0](name, targetq, flags);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEE20](keys, values, count);
}

xpc_object_t xpc_dictionary_create_empty(void)
{
  return (xpc_object_t)MEMORY[0x1F40CEE30]();
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return (xpc_object_t)MEMORY[0x1F40CEE40](original);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEEC8](xdict, key);
}

xpc_connection_t xpc_dictionary_get_remote_connection(xpc_object_t xdict)
{
  return (xpc_connection_t)MEMORY[0x1F40CEEE0](xdict);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1F40CEEF0](xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEEF8](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_double(xpc_object_t xdict, const char *key, double value)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
}

xpc_object_t xpc_double_create(double value)
{
  return (xpc_object_t)MEMORY[0x1F40CEFE8](value);
}

xpc_object_t xpc_fd_create(int fd)
{
  return (xpc_object_t)MEMORY[0x1F40CF0B8](*(void *)&fd);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1F40CF148](object);
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return (xpc_object_t)MEMORY[0x1F40CF188](value);
}

xpc_object_t xpc_null_create(void)
{
  return (xpc_object_t)MEMORY[0x1F40CF208]();
}

void xpc_release(xpc_object_t object)
{
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x1F40CF248](object);
}

xpc_object_t xpc_string_create(const char *string)
{
  return (xpc_object_t)MEMORY[0x1F40CF290](string);
}

const char *__cdecl xpc_type_get_name(xpc_type_t type)
{
  return (const char *)MEMORY[0x1F40CF310](type);
}

xpc_object_t xpc_uint64_create(uint64_t value)
{
  return (xpc_object_t)MEMORY[0x1F40CF320](value);
}