BOOL si_psid_check_perms(uint64_t a1, int64_t a2, uint64_t a3, void *a4, uint64_t a5, unsigned char *a6, uint64_t a7, int a8)
{
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  char v18;
  int v19;
  stat v21;
  uint64_t v22;
  unsigned char v23[1024];
  uint64_t v24;

  v24 = *MEMORY[0x1E4F143B8];
  bzero(v23, 0x400uLL);
  if (a2 >= 1)
  {
    v14 = 0;
    v15 = 0;
    v16 = *(void *)(a1 + 16);
    while (1)
    {
      if (!*((unsigned char *)a4 + v15))
      {
        if (a6 && *a6)
        {
          memset(a4, 1, a2);
          return v14;
        }
        v17 = (const char *)si_psid_oid_to_path(a1, *(void *)(a3 + 8 * v15), (uint64_t)v23);
        if (v17)
        {
          if (*(unsigned char *)(v16 + 1) && (a8 & 1) == 0)
          {
            v22 = 0;
            *(_OWORD *)&v21.st_dev = xmmword_1BDA82AC0;
            *(void *)&v21.st_uid = 0;
            if (getattrlist(v17, &v21, &v22, 8uLL, 0))
            {
LABEL_18:
              if (*__error() == 2) {
                v18 = 2;
              }
              else {
                v18 = 1;
              }
            }
            else
            {
              v18 = (v22 & 0x400000000) == 0;
            }
            *((unsigned char *)a4 + v15) = v18;
            goto LABEL_22;
          }
          if (a8)
          {
            memset(&v21, 0, sizeof(v21));
            if (stat(v17, &v21) < 0) {
              goto LABEL_18;
            }
          }
          else
          {
            v19 = open(v17, 0);
            if (v19 < 0) {
              goto LABEL_18;
            }
            close(v19);
          }
          *((unsigned char *)a4 + v15) = 0;
        }
        else
        {
          *((unsigned char *)a4 + v15) = 2;
        }
      }
LABEL_22:
      v14 = ++v15 >= a2;
      if (a2 == v15) {
        return v14;
      }
    }
  }
  return 1;
}

void *si_psid_oid_to_path(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v14 = 0;
  v6 = (pthread_mutex_t *)(v5 + 2080);
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 2080));
  if (*(unsigned char *)v5)
  {
    uint64_t v7 = *(void *)(v5 + 8);
    if (*(unsigned char *)(v5 + 2)) {
      int path_for_id_64 = get_path_for_id_64(v7, a2, &v14, a3 + *(unsigned int *)(v5 + 2064), 1024 - *(_DWORD *)(v5 + 2064));
    }
    else {
      int path_for_id_64 = get_path_for_id(v7, a2, &v14, a3 + *(unsigned int *)(v5 + 2064), 1024 - *(_DWORD *)(v5 + 2064));
    }
    if (path_for_id_64)
    {
      v9 = 0;
      *__error() = path_for_id_64;
    }
    else
    {
      uint64_t v10 = *(int *)(v5 + 2064);
      if (*(unsigned char *)(v5 + 16 + v10 - 1) == 47) {
        LODWORD(v10) = v10 - 1;
      }
      v9 = (void *)(v14 - (int)v10);
      memcpy(v9, (const void *)(v5 + 16), (int)v10);
    }
  }
  else
  {
    v9 = 0;
  }
  if (dword_1E9FC90BC >= 5)
  {
    int v12 = *__error();
    v13 = _SILogForLogForCategory(6);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v16 = v9;
      __int16 v17 = 2048;
      uint64_t v18 = a2;
      _os_log_impl(&dword_1BD672000, v13, OS_LOG_TYPE_DEFAULT, "found %s for %llx\n", buf, 0x16u);
    }
    *__error() = v12;
  }
  pthread_mutex_unlock(v6);
  return v9;
}

uint64_t si_psid_set_root_path(uint64_t a1, const char *a2)
{
  return si_psid_set_root_path2(a1, a2, a2);
}

uint64_t si_psid_path_to_oid_path(uint64_t a1, const char *a2, uint64_t a3, void *a4, char a5, uint64_t a6, char a7)
{
  uint64_t v11 = *(void *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(v11 + 2080));
  if ((a7 & 1) == 0)
  {
    if (*(unsigned char *)v11)
    {
      int v12 = (const char *)(v11 + 16);
      size_t v13 = *(unsigned int *)(v11 + 2064);
      if (!strncmp(a2, (const char *)(v11 + 16), v13))
      {
        uint64_t v14 = *(uint64_t **)(v11 + 8);
        uint64_t v15 = (uint64_t)&a2[v13];
        v16 = a4;
        char v17 = a5;
        int v18 = 0;
        if (*(unsigned char *)(v11 + 2))
        {
LABEL_5:
          uint64_t v19 = psid64_oidPathForPath(v14, v15, v16, v17, v18);
LABEL_13:
          uint64_t v21 = v19;
          goto LABEL_14;
        }
LABEL_12:
        uint64_t v19 = psid32_oidPathForPath((uint64_t)v14, v15, v16, v17, v18);
        goto LABEL_13;
      }
      goto LABEL_8;
    }
LABEL_10:
    uint64_t v21 = 0;
    goto LABEL_14;
  }
  if (!*(unsigned char *)v11) {
    goto LABEL_10;
  }
  int v12 = (const char *)(v11 + 16);
  size_t v13 = *(unsigned int *)(v11 + 2064);
  if (!strncmp(a2, (const char *)(v11 + 16), v13))
  {
    uint64_t v14 = *(uint64_t **)(v11 + 8);
    uint64_t v15 = (uint64_t)&a2[v13];
    v16 = a4;
    char v17 = a5;
    int v18 = 1;
    if (*(unsigned char *)(v11 + 2)) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_8:
  size_t v20 = strlen(a2);
  if (v20 != v13 - 1) {
    goto LABEL_10;
  }
  uint64_t v21 = 2 * (strncmp(a2, v12, v20) == 0);
LABEL_14:
  pthread_mutex_unlock((pthread_mutex_t *)(v11 + 2080));
  return v21;
}

uint64_t psid64_oidPathForPath(uint64_t *a1, uint64_t a2, void *a3, char a4, int a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  bzero(__s, 0x400uLL);
  __strlcpy_chk();
  uint64_t v18 = 0;
  if (a4)
  {
    for (size_t i = strlen(__s); i; __s[--i] = 0)
    {
      if (__s[i - 1] != 47) {
        break;
      }
    }
  }
  else
  {
    int id_for_path_64 = get_id_for_path_64(a1, __s, &v17, &v18, a5, 0);
    if (id_for_path_64)
    {
      *__error() = id_for_path_64;
      return 0xFFFFFFFFLL;
    }
    int v12 = strrchr(__s, 47);
    if (v12)
    {
      if (v12 == __s)
      {
        *a3 = v18;
        return 1;
      }
      *int v12 = 0;
    }
  }
  uint64_t v11 = 0;
  do
  {
    uint64_t v17 = 0;
    get_id_for_path_64(a1, __s, &v17, &v18, a5, 0);
    uint64_t v13 = v17;
    if (v17)
    {
      a3[(int)v11] = v17;
      uint64_t v11 = (v11 + 1);
    }
    uint64_t v14 = strrchr(__s, 47);
    if (!v14) {
      break;
    }
    if (v14 == __s) {
      break;
    }
    *uint64_t v14 = 0;
  }
  while (v13);
  if (v11 && a3[(int)v11 - 1] != 2)
  {
    uint64_t v15 = (int)v11;
    uint64_t v11 = (v11 + 1);
    a3[v15] = 2;
  }
  return v11;
}

uint64_t psid32_oidPathForPath(uint64_t a1, uint64_t a2, void *a3, char a4, char a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  bzero(__s, 0x400uLL);
  __strlcpy_chk();
  unsigned int v18 = 0;
  if (a4)
  {
    for (size_t i = strlen(__s); i; __s[--i] = 0)
    {
      if (__s[i - 1] != 47) {
        break;
      }
    }
  }
  else
  {
    int id_for_path = get_id_for_path(a1, __s, (int *)&v17, &v18, a5);
    if (id_for_path)
    {
      *__error() = id_for_path;
      return 0xFFFFFFFFLL;
    }
    int v12 = strrchr(__s, 47);
    if (v12)
    {
      if (v12 == __s)
      {
        *a3 = v18;
        return 1;
      }
      *int v12 = 0;
    }
  }
  uint64_t v11 = 0;
  do
  {
    unsigned int v17 = 0;
    get_id_for_path(a1, __s, (int *)&v17, &v18, a5);
    unsigned int v13 = v17;
    if (v17)
    {
      a3[(int)v11] = v17;
      uint64_t v11 = (v11 + 1);
    }
    uint64_t v14 = strrchr(__s, 47);
    if (!v14) {
      break;
    }
    if (v14 == __s) {
      break;
    }
    *uint64_t v14 = 0;
  }
  while (v13);
  if (v11 && a3[(int)v11 - 1] != 2)
  {
    uint64_t v15 = (int)v11;
    uint64_t v11 = (v11 + 1);
    a3[v15] = 2;
  }
  return v11;
}

uint64_t si_psid_path_to_oid(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  pthread_mutex_lock((pthread_mutex_t *)(v7 + 2080));
  if (a5)
  {
    if (!*(unsigned char *)v7) {
      goto LABEL_18;
    }
    v8 = (const char *)(v7 + 16);
    size_t v9 = *(unsigned int *)(v7 + 2064);
    if (!strncmp(a2, (const char *)(v7 + 16), v9))
    {
      if (*(unsigned char *)(v7 + 2))
      {
        if (!get_id_for_path_64(*(uint64_t **)(v7 + 8), &a2[v9], &v23, &v22, 1, *(void *)(v7 + 2144))) {
          goto LABEL_18;
        }
      }
      else
      {
        *(_DWORD *)buf = 0;
        unsigned int v21 = 0;
        int id_for_path = get_id_for_path(*(void *)(v7 + 8), &a2[v9], (int *)buf, &v21, 1);
        uint64_t v23 = *(unsigned int *)buf;
        uint64_t v22 = v21;
        if (!id_for_path) {
          goto LABEL_18;
        }
      }
      if (dword_1E9FC90BC >= 5)
      {
        int v19 = *__error();
        uint64_t v20 = _SILogForLogForCategory(6);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BD672000, v20, OS_LOG_TYPE_DEFAULT, "Got error\n", buf, 2u);
        }
        *__error() = v19;
      }
LABEL_17:
      uint64_t v23 = 0;
      goto LABEL_18;
    }
    goto LABEL_9;
  }
  if (!*(unsigned char *)v7) {
    goto LABEL_18;
  }
  v8 = (const char *)(v7 + 16);
  size_t v9 = *(unsigned int *)(v7 + 2064);
  if (strncmp(a2, (const char *)(v7 + 16), v9))
  {
LABEL_9:
    size_t v10 = strlen(a2);
    if (v10 == v9 - 1 && !strncmp(a2, v8, v10)) {
      uint64_t v23 = 2;
    }
    goto LABEL_18;
  }
  if (*(unsigned char *)(v7 + 2))
  {
    if (get_id_for_path_64(*(uint64_t **)(v7 + 8), &a2[v9], &v23, &v22, 0, *(void *)(v7 + 2144))) {
      goto LABEL_17;
    }
  }
  else
  {
    *(_DWORD *)buf = 0;
    unsigned int v21 = 0;
    int v13 = get_id_for_path(*(void *)(v7 + 8), &a2[v9], (int *)buf, &v21, 0);
    uint64_t v23 = *(unsigned int *)buf;
    uint64_t v22 = v21;
    if (v13) {
      goto LABEL_17;
    }
  }
LABEL_18:
  pthread_mutex_unlock((pthread_mutex_t *)(v7 + 2080));
  if (dword_1E9FC90BC >= 5)
  {
    int v14 = *__error();
    uint64_t v15 = _SILogForLogForCategory(6);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218242;
      uint64_t v25 = v23;
      __int16 v26 = 2080;
      v27 = a2;
      _os_log_impl(&dword_1BD672000, v15, OS_LOG_TYPE_DEFAULT, "found %llx for %s\n", buf, 0x16u);
    }
    *__error() = v14;
    if (dword_1E9FC90BC >= 5)
    {
      int v16 = *__error();
      unsigned int v17 = _SILogForLogForCategory(6);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v18 = &a2[*(unsigned int *)(v7 + 2064)];
        *(_DWORD *)buf = 134218242;
        uint64_t v25 = v23;
        __int16 v26 = 2080;
        v27 = v18;
        _os_log_impl(&dword_1BD672000, v17, OS_LOG_TYPE_DEFAULT, "found %llx for %s\n", buf, 0x16u);
      }
      *__error() = v16;
    }
  }
  return v23;
}

void si_psid_destruct(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  pthread_mutex_destroy((pthread_mutex_t *)(v1 + 2080));
  free(*(void **)(v1 + 2072));
  uint64_t v2 = *(void *)(v1 + 8);
  if (v2)
  {
    if (*(unsigned char *)(v1 + 2)) {
      release_persistent_id_64_store(v2);
    }
    else {
      release_persistent_id_store(v2);
    }
  }
  _Block_release(*(const void **)(v1 + 2144));
  free((void *)v1);
}

uint64_t si_init_posix_psid(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, const void *a5)
{
  uint64_t v133 = *MEMORY[0x1E4F143B8];
  size_t v10 = malloc_type_calloc(1uLL, 0x868uLL, 0x10A00403F30FE2CuLL);
  uint64_t v11 = v10;
  if ((a4 & 0x8000) != 0) {
    v10[2] = 1;
  }
  int v12 = malloc_type_malloc(0x28uLL, 0x100004090BE4F35uLL);
  *((void *)v11 + 259) = v12;
  uint64_t v13 = *(void *)(a2 + 32);
  long long v14 = *(_OWORD *)(a2 + 16);
  *int v12 = *(_OWORD *)a2;
  v12[1] = v14;
  *((void *)v12 + 4) = v13;
  long long v15 = *(_OWORD *)&off_1F18103A8;
  *(_OWORD *)(a1 + 64) = xmmword_1F1810398;
  *(_OWORD *)(a1 + 80) = v15;
  long long v16 = *(_OWORD *)&off_1F1810388;
  *(_OWORD *)(a1 + 32) = SI_PersistentIDStore_PSID_TEMPLATE;
  *(_OWORD *)(a1 + 48) = v16;
  long long v17 = unk_1F18103E8;
  *(_OWORD *)(a1 + 128) = xmmword_1F18103D8;
  *(_OWORD *)(a1 + 144) = v17;
  long long v18 = *(_OWORD *)&off_1F18103C8;
  *(_OWORD *)(a1 + 96) = xmmword_1F18103B8;
  *(_OWORD *)(a1 + 112) = v18;
  long long v19 = xmmword_1F1810438;
  long long v20 = xmmword_1F1810418;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)&off_1F1810428;
  *(_OWORD *)(a1 + 224) = v19;
  long long v21 = *(_OWORD *)&off_1F1810408;
  *(_OWORD *)(a1 + 160) = xmmword_1F18103F8;
  *(_OWORD *)(a1 + 176) = v21;
  *(_OWORD *)(a1 + 192) = v20;
  if (v11[2]) {
    *(void *)(a1 + 232) = si_psid_clone_and_reset;
  }
  unsigned int v126 = 0;
  if ((fd_setDir(a3, (int *)&v126) & 1) == 0)
  {
    uint64_t v27 = 0xFFFFFFFFLL;
LABEL_26:
    free(*((void **)v11 + 259));
    free(v11);
    return v27;
  }
  int v22 = (a4 >> 1) & 3 ^ 1;
  if (v11[2])
  {
    uint64_t v23 = malloc_type_calloc(0x28uLL, 1uLL, 0xEDC04C19uLL);
    if (v23)
    {
      uint64_t v24 = (uint64_t)v23;
      v23[3] = keycompare_4126;
      master_fid_rec_4110 = -1;
      word_1E9FE3B54 = 17;
      __strlcpy_chk();
      uint64_t v25 = (unsigned __int16)word_1E9FE3B54 + 16;
      master_fid_rec_size_4112 = v25;
      uint64_t v129 = 0;
      uint64_t v26 = sqlite3BtreeOpen(v24);
      if (v26)
      {
        uint64_t v27 = v26;
        int v28 = *__error();
        v29 = _SILogForLogForCategory(4);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v130 = 136315906;
          *(void *)&v130[4] = "get_persistent_id_64_store";
          *(_WORD *)&v130[12] = 1024;
          *(_DWORD *)&v130[14] = 164;
          *(_WORD *)&v130[18] = 2080;
          *(void *)&v130[20] = "psid.db";
          __int16 v131 = 1024;
          int v132 = v27;
LABEL_86:
          _os_log_error_impl(&dword_1BD672000, v29, OS_LOG_TYPE_ERROR, "%s:%d: sqlite3BtreeOpen failed; dbname:%s; rc = %d\n",
            v130,
            0x22u);
          goto LABEL_15;
        }
        goto LABEL_15;
      }
      v127 = 0;
      int v128 = 0;
      int v36 = sqlite3BtreeCursor(*(void *)v24, 2, 0, (uint64_t (*)(int, int, void *, int, void *))keycompare_4126, &v127);
      if (v36)
      {
        int v37 = v36;
        unint64_t v119 = v25;
        v121 = a5;
        int v38 = *__error();
        v39 = _SILogForLogForCategory(4);
        os_log_type_t v40 = 2 * (dword_1E9FC90B4 < 4);
        if (os_log_type_enabled(v39, v40))
        {
          *(_DWORD *)v130 = 67109120;
          *(_DWORD *)&v130[4] = v37;
          _os_log_impl(&dword_1BD672000, v39, v40, "sqlite3BtreeCursor failed; rc = %d\n", v130, 8u);
        }
        *__error() = v38;
        goto LABEL_43;
      }
      v46 = v127;
      int v47 = sqlite3BtreeMoveto((uint64_t)v127, (uint64_t)&master_fid_rec_4110, v25, &v128);
      if (v47 | v128)
      {
        int v48 = v47;
        unint64_t v119 = v25;
        v121 = a5;
        int v118 = *__error();
        v49 = _SILogForLogForCategory(4);
        os_log_type_t v50 = 2 * (dword_1E9FC90B4 < 4);
        if (os_log_type_enabled(v49, v50))
        {
          *(_DWORD *)v130 = 67109120;
          *(_DWORD *)&v130[4] = v48;
          _os_log_impl(&dword_1BD672000, v49, v50, "sqlite3BtreeMoveto failed at open (need to create table); rc = %d\n",
            v130,
            8u);
        }
        *__error() = v118;
        sqlite3BtreeCloseCursor(v46);
LABEL_43:
        a5 = v121;
        if ((v22 & 1) == 0)
        {
          int v51 = *__error();
          v52 = _SILogForLogForCategory(4);
          os_log_type_t v53 = 2 * (dword_1E9FC90B4 < 4);
          if (os_log_type_enabled(v52, v53))
          {
            *(_DWORD *)v130 = 136315138;
            *(void *)&v130[4] = "psid.db";
            _os_log_impl(&dword_1BD672000, v52, v53, "psid: creating db: %s\n", v130, 0xCu);
          }
          *__error() = v51;
          v54 = *(_WORD **)v24;
          if (*(unsigned char *)(*(void *)v24 + 30))
          {
            int v55 = 8;
          }
          else
          {
            int v55 = 0;
            __int16 v69 = v54[18] - v54[16];
            *((_DWORD *)v54 + 8) = 268439552;
            *(void *)(*(void *)v54 + 224) = 0x100000001000;
            v54[18] = v69 + 4096;
          }
          int v70 = *__error();
          v71 = _SILogForLogForCategory(4);
          os_log_type_t v72 = 2 * (dword_1E9FC90B4 < 4);
          if (os_log_type_enabled(v71, v72))
          {
            int v73 = *(unsigned __int16 *)(*(void *)v24 + 32);
            *(_DWORD *)v130 = 67109376;
            *(_DWORD *)&v130[4] = v55;
            *(_WORD *)&v130[8] = 1024;
            *(_DWORD *)&v130[10] = v73;
            _os_log_impl(&dword_1BD672000, v71, v72, "(%d), page size %d\n", v130, 0xEu);
          }
          *__error() = v70;
          uint64_t v74 = sqlite3BtreeBeginTrans(*(void *)v24);
          if (v74)
          {
            uint64_t v27 = v74;
            int v75 = *__error();
            v76 = _SILogForLogForCategory(4);
            os_log_type_t v77 = 2 * (dword_1E9FC90B4 < 4);
            if (os_log_type_enabled(v76, v77))
            {
              *(_DWORD *)v130 = 67109120;
              *(_DWORD *)&v130[4] = v27;
              v78 = "Couldn't begin transaction; rc = %d\n";
LABEL_117:
              _os_log_impl(&dword_1BD672000, v76, v77, v78, v130, 8u);
              goto LABEL_118;
            }
            goto LABEL_118;
          }
          v79 = (int *)(v24 + 8);
          uint64_t Table = sqlite3BtreeCreateTable(*(void *)v24, (unsigned int *)(v24 + 8));
          if (Table)
          {
            uint64_t v27 = Table;
            int v28 = *__error();
            v66 = _SILogForLogForCategory(4);
            os_log_type_t v67 = 2 * (dword_1E9FC90B4 < 4);
            if (!os_log_type_enabled(v66, v67)) {
              goto LABEL_15;
            }
            *(_DWORD *)v130 = 67109120;
            *(_DWORD *)&v130[4] = v27;
            v68 = "Couldn't create table; rc = %d\n";
            goto LABEL_107;
          }
          if (*v79 == 2)
          {
            int v99 = 2;
            unint64_t v100 = v119;
          }
          else
          {
            int v106 = *__error();
            v107 = _SILogForLogForCategory(4);
            unint64_t v100 = v119;
            if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
            {
              int v116 = *v79;
              *(_DWORD *)v130 = 136315906;
              *(void *)&v130[4] = "get_persistent_id_64_store";
              *(_WORD *)&v130[12] = 1024;
              *(_DWORD *)&v130[14] = 230;
              *(_WORD *)&v130[18] = 2080;
              *(void *)&v130[20] = "psid.db";
              __int16 v131 = 1024;
              int v132 = v116;
              _os_log_error_impl(&dword_1BD672000, v107, OS_LOG_TYPE_ERROR, "%s:%d: psid: %s : danger! ps store table id %d looks bad! resetting\n", v130, 0x22u);
            }
            *__error() = v106;
            int v99 = *v79;
          }
          uint64_t v108 = sqlite3BtreeCursor(*(void *)v24, v99, 1, (uint64_t (*)(int, int, void *, int, void *))keycompare_4126, (uint64_t **)(v24 + 16));
          if (v108)
          {
            uint64_t v27 = v108;
            int v28 = *__error();
            v66 = _SILogForLogForCategory(4);
            os_log_type_t v67 = 2 * (dword_1E9FC90B4 < 4);
            if (!os_log_type_enabled(v66, v67)) {
              goto LABEL_15;
            }
            *(_DWORD *)v130 = 67109120;
            *(_DWORD *)&v130[4] = v27;
            v68 = "Couldn't create cursor; rc = %d\n";
            goto LABEL_107;
          }
          *(void *)(v24 + 32) = 0x7FFFFFFFFFFFFFFFLL;
          uint64_t v129 = 0x7FFFFFFFFFFFFFFFLL;
          uint64_t v109 = sqlite3BtreeInsert(*(void *)(v24 + 16), (char *)&master_fid_rec_4110, v100, (char *)&v129, 8);
          if (v109)
          {
            uint64_t v27 = v109;
            int v28 = *__error();
            v66 = _SILogForLogForCategory(4);
            os_log_type_t v67 = 2 * (dword_1E9FC90B4 < 4);
            if (!os_log_type_enabled(v66, v67)) {
              goto LABEL_15;
            }
            *(_DWORD *)v130 = 67109120;
            *(_DWORD *)&v130[4] = v27;
            v68 = "Couldn't insert key; rc = %d\n";
            goto LABEL_107;
          }
          sqlite3BtreeCloseCursor(*(uint64_t **)(v24 + 16));
          *(void *)(v24 + 16) = 0;
          uint64_t v27 = sqlite3BtreeSync(*(void *)v24);
          if (v27) {
            goto LABEL_16;
          }
          uint64_t v114 = sqlite3BtreeCommit(*(void *)v24);
          if (v114)
          {
            uint64_t v27 = v114;
            int v28 = *__error();
            v66 = _SILogForLogForCategory(4);
            os_log_type_t v67 = 2 * (dword_1E9FC90B4 < 4);
            if (!os_log_type_enabled(v66, v67)) {
              goto LABEL_15;
            }
            *(_DWORD *)v130 = 67109120;
            *(_DWORD *)&v130[4] = v27;
            v68 = "Couldn't commit btree; rc = %d\n";
            goto LABEL_107;
          }
LABEL_95:
          uint64_t v27 = 0;
LABEL_21:
          *((void *)v11 + 1) = v24;
          goto LABEL_23;
        }
        goto LABEL_57;
      }
      *(_DWORD *)(v24 + 8) = 2;
      uint64_t Payload = getPayload((uint64_t)v46, 8, (char *)&v129, 1);
      if (Payload)
      {
        uint64_t v27 = Payload;
        int v28 = *__error();
        v66 = _SILogForLogForCategory(4);
        os_log_type_t v67 = 2 * (dword_1E9FC90B4 < 4);
        if (!os_log_type_enabled(v66, v67)) {
          goto LABEL_15;
        }
        *(_DWORD *)v130 = 67109120;
        *(_DWORD *)&v130[4] = v27;
        v68 = "psid: could not find master fid; rc = %d\n";
LABEL_107:
        _os_log_impl(&dword_1BD672000, v66, v67, v68, v130, 8u);
        goto LABEL_15;
      }
      unint64_t v90 = v129;
      *(void *)(v24 + 32) = v129;
      if (v90 > 0x7FFFFFFFFFFFFFFELL)
      {
LABEL_94:
        sqlite3BtreeCloseCursor(v46);
        goto LABEL_95;
      }
      int v91 = *__error();
      v92 = _SILogForLogForCategory(4);
      os_log_type_t v93 = 2 * (dword_1E9FC90B4 < 4);
      if (!os_log_type_enabled(v92, v93))
      {
LABEL_93:
        *__error() = v91;
        goto LABEL_94;
      }
      uint64_t v94 = *(void *)(v24 + 32);
      *(_DWORD *)v130 = 136315394;
      *(void *)&v130[4] = "psid.db";
      *(_WORD *)&v130[12] = 2048;
      *(void *)&v130[14] = v94;
      v95 = "psid: %s : danger! master fid %lld looks bad! resetting\n";
      v96 = v92;
      os_log_type_t v97 = v93;
      uint32_t v98 = 22;
LABEL_92:
      _os_log_impl(&dword_1BD672000, v96, v97, v95, v130, v98);
      goto LABEL_93;
    }
  }
  else
  {
    v30 = malloc_type_calloc(0x28uLL, 1uLL, 0xB74F51DAuLL);
    if (v30)
    {
      uint64_t v24 = (uint64_t)v30;
      v30[3] = keycompare;
      master_fid_rec = -1;
      word_1E9FE3468 = 17;
      __strlcpy_chk();
      uint64_t v31 = (unsigned __int16)word_1E9FE3468 + 12;
      master_fid_rec_size = v31;
      LODWORD(v127) = 0;
      uint64_t v32 = sqlite3BtreeOpen(v24);
      if (v32)
      {
        uint64_t v27 = v32;
        int v28 = *__error();
        v29 = _SILogForLogForCategory(4);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v130 = 136315906;
          *(void *)&v130[4] = "get_persistent_id_store";
          *(_WORD *)&v130[12] = 1024;
          *(_DWORD *)&v130[14] = 164;
          *(_WORD *)&v130[18] = 2080;
          *(void *)&v130[20] = "psid.db";
          __int16 v131 = 1024;
          int v132 = v27;
          goto LABEL_86;
        }
LABEL_15:
        *__error() = v28;
LABEL_16:
        v33 = *(uint64_t **)(v24 + 16);
        if (v33) {
          sqlite3BtreeCloseCursor(v33);
        }
        if (*(void *)v24) {
          sqlite3BtreeClose(*(uint64_t **)v24);
        }
        free((void *)v24);
        uint64_t v24 = 0;
        goto LABEL_21;
      }
      uint64_t v129 = 0;
      int v128 = 0;
      int v41 = sqlite3BtreeCursor(*(void *)v24, 2, 0, (uint64_t (*)(int, int, void *, int, void *))keycompare, (uint64_t **)&v129);
      if (v41)
      {
        int v42 = v41;
        v122 = a5;
        int v43 = *__error();
        v44 = _SILogForLogForCategory(4);
        os_log_type_t v45 = 2 * (dword_1E9FC90B4 < 4);
        if (os_log_type_enabled(v44, v45))
        {
          *(_DWORD *)v130 = 67109120;
          *(_DWORD *)&v130[4] = v42;
          _os_log_impl(&dword_1BD672000, v44, v45, "sqlite3BtreeCursor failed; rc = %d\n", v130, 8u);
        }
        *__error() = v43;
      }
      else
      {
        v46 = (uint64_t *)v129;
        int v56 = sqlite3BtreeMoveto(v129, (uint64_t)&master_fid_rec, v31, &v128);
        if (!(v56 | v128))
        {
          *(_DWORD *)(v24 + 8) = 2;
          uint64_t v81 = getPayload((uint64_t)v46, 4, (char *)&v127, 1);
          if (v81)
          {
            uint64_t v27 = v81;
            int v28 = *__error();
            v66 = _SILogForLogForCategory(4);
            os_log_type_t v67 = 2 * (dword_1E9FC90B4 < 4);
            if (!os_log_type_enabled(v66, v67)) {
              goto LABEL_15;
            }
            *(_DWORD *)v130 = 67109120;
            *(_DWORD *)&v130[4] = v27;
            v68 = "psid: could not find master fid; rc = %d\n";
            goto LABEL_107;
          }
          unsigned int v101 = v127;
          *(_DWORD *)(v24 + 32) = v127;
          if (v101 > 0x63) {
            goto LABEL_94;
          }
          int v91 = *__error();
          v102 = _SILogForLogForCategory(4);
          os_log_type_t v103 = 2 * (dword_1E9FC90B4 < 4);
          if (!os_log_type_enabled(v102, v103)) {
            goto LABEL_93;
          }
          int v104 = *(_DWORD *)(v24 + 32);
          *(_DWORD *)v130 = 136315394;
          *(void *)&v130[4] = "psid.db";
          *(_WORD *)&v130[12] = 1024;
          *(_DWORD *)&v130[14] = v104;
          v95 = "psid: %s : danger! master fid %d looks bad! resetting\n";
          v96 = v102;
          os_log_type_t v97 = v103;
          uint32_t v98 = 18;
          goto LABEL_92;
        }
        int v57 = v56;
        v122 = a5;
        int v120 = *__error();
        v58 = _SILogForLogForCategory(4);
        os_log_type_t v59 = 2 * (dword_1E9FC90B4 < 4);
        if (os_log_type_enabled(v58, v59))
        {
          *(_DWORD *)v130 = 67109120;
          *(_DWORD *)&v130[4] = v57;
          _os_log_impl(&dword_1BD672000, v58, v59, "sqlite3BtreeMoveto failed; rc = %d\n", v130, 8u);
        }
        *__error() = v120;
        sqlite3BtreeCloseCursor(v46);
      }
      a5 = v122;
      if ((v22 & 1) == 0)
      {
        int v60 = *__error();
        v61 = _SILogForLogForCategory(4);
        os_log_type_t v62 = 2 * (dword_1E9FC90B4 < 4);
        if (os_log_type_enabled(v61, v62))
        {
          *(_DWORD *)v130 = 136315138;
          *(void *)&v130[4] = "psid.db";
          _os_log_impl(&dword_1BD672000, v61, v62, "psid: creating db: %s\n", v130, 0xCu);
        }
        *__error() = v60;
        v63 = *(_WORD **)v24;
        if (*(unsigned char *)(*(void *)v24 + 30))
        {
          int v64 = 8;
        }
        else
        {
          int v64 = 0;
          __int16 v82 = v63[18] - v63[16];
          *((_DWORD *)v63 + 8) = 268439552;
          *(void *)(*(void *)v63 + 224) = 0x100000001000;
          v63[18] = v82 + 4096;
        }
        int v83 = *__error();
        v84 = _SILogForLogForCategory(4);
        os_log_type_t v85 = 2 * (dword_1E9FC90B4 < 4);
        if (os_log_type_enabled(v84, v85))
        {
          int v86 = *(unsigned __int16 *)(*(void *)v24 + 32);
          *(_DWORD *)v130 = 67109376;
          *(_DWORD *)&v130[4] = v64;
          *(_WORD *)&v130[8] = 1024;
          *(_DWORD *)&v130[10] = v86;
          _os_log_impl(&dword_1BD672000, v84, v85, "(%d), page size %d\n", v130, 0xEu);
        }
        *__error() = v83;
        uint64_t v87 = sqlite3BtreeBeginTrans(*(void *)v24);
        if (v87)
        {
          uint64_t v27 = v87;
          int v75 = *__error();
          v76 = _SILogForLogForCategory(4);
          os_log_type_t v77 = 2 * (dword_1E9FC90B4 < 4);
          a5 = v122;
          if (os_log_type_enabled(v76, v77))
          {
            *(_DWORD *)v130 = 67109120;
            *(_DWORD *)&v130[4] = v27;
            v78 = "Couldn't begin transaction; rc = %d\n";
            goto LABEL_117;
          }
LABEL_118:
          *__error() = v75;
          goto LABEL_16;
        }
        v88 = (int *)(v24 + 8);
        uint64_t v89 = sqlite3BtreeCreateTable(*(void *)v24, (unsigned int *)(v24 + 8));
        a5 = v122;
        if (v89)
        {
          uint64_t v27 = v89;
          int v75 = *__error();
          v76 = _SILogForLogForCategory(4);
          os_log_type_t v77 = 2 * (dword_1E9FC90B4 < 4);
          if (os_log_type_enabled(v76, v77))
          {
            *(_DWORD *)v130 = 67109120;
            *(_DWORD *)&v130[4] = v27;
            v78 = "Couldn't create table; rc = %d\n";
            goto LABEL_117;
          }
          goto LABEL_118;
        }
        if (*v88 == 2)
        {
          int v105 = 2;
        }
        else
        {
          int v110 = *__error();
          v111 = _SILogForLogForCategory(4);
          if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
          {
            int v117 = *v88;
            *(_DWORD *)v130 = 136315906;
            *(void *)&v130[4] = "get_persistent_id_store";
            *(_WORD *)&v130[12] = 1024;
            *(_DWORD *)&v130[14] = 230;
            *(_WORD *)&v130[18] = 2080;
            *(void *)&v130[20] = "psid.db";
            __int16 v131 = 1024;
            int v132 = v117;
            _os_log_error_impl(&dword_1BD672000, v111, OS_LOG_TYPE_ERROR, "%s:%d: psid: %s : danger! ps store table id %d looks bad! resetting\n", v130, 0x22u);
          }
          *__error() = v110;
          int v105 = *v88;
        }
        uint64_t v112 = sqlite3BtreeCursor(*(void *)v24, v105, 1, (uint64_t (*)(int, int, void *, int, void *))keycompare, (uint64_t **)(v24 + 16));
        if (v112)
        {
          uint64_t v27 = v112;
          int v75 = *__error();
          v76 = _SILogForLogForCategory(4);
          os_log_type_t v77 = 2 * (dword_1E9FC90B4 < 4);
          if (os_log_type_enabled(v76, v77))
          {
            *(_DWORD *)v130 = 67109120;
            *(_DWORD *)&v130[4] = v27;
            v78 = "Couldn't create cursor; rc = %d\n";
            goto LABEL_117;
          }
          goto LABEL_118;
        }
        *(_DWORD *)(v24 + 32) = 100;
        LODWORD(v127) = 100;
        uint64_t v113 = sqlite3BtreeInsert(*(void *)(v24 + 16), (char *)&master_fid_rec, v31, (char *)&v127, 4);
        if (v113)
        {
          uint64_t v27 = v113;
          int v75 = *__error();
          v76 = _SILogForLogForCategory(4);
          os_log_type_t v77 = 2 * (dword_1E9FC90B4 < 4);
          if (os_log_type_enabled(v76, v77))
          {
            *(_DWORD *)v130 = 67109120;
            *(_DWORD *)&v130[4] = v27;
            v78 = "Couldn't insert key; rc = %d\n";
            goto LABEL_117;
          }
          goto LABEL_118;
        }
        sqlite3BtreeCloseCursor(*(uint64_t **)(v24 + 16));
        *(void *)(v24 + 16) = 0;
        uint64_t v27 = sqlite3BtreeSync(*(void *)v24);
        if (v27) {
          goto LABEL_16;
        }
        uint64_t v115 = sqlite3BtreeCommit(*(void *)v24);
        if (v115)
        {
          uint64_t v27 = v115;
          int v75 = *__error();
          v76 = _SILogForLogForCategory(4);
          os_log_type_t v77 = 2 * (dword_1E9FC90B4 < 4);
          if (!os_log_type_enabled(v76, v77)) {
            goto LABEL_118;
          }
          *(_DWORD *)v130 = 67109120;
          *(_DWORD *)&v130[4] = v27;
          v78 = "Couldn't commit btree; rc = %d\n";
          goto LABEL_117;
        }
        goto LABEL_95;
      }
LABEL_57:
      uint64_t v27 = 2;
      goto LABEL_16;
    }
  }
  uint64_t v27 = 12;
LABEL_23:
  int v34 = v126;
  MEMORY[0x1C1882290](v126);
  if ((v34 & 0x80000000) == 0) {
    close(v34);
  }
  if (v27) {
    goto LABEL_26;
  }
  v11[1] = 0;
  uint64_t v125 = 0;
  long long v124 = xmmword_1BDA82AA8;
  memset(v123, 0, 44);
  if (!fgetattrlist(*(_DWORD *)(a2 + 4), &v124, v123, 0x2CuLL, 0)) {
    v11[1] = (DWORD1(v123[0]) & 0x200000) != 0;
  }
  *(void *)v130 = 0;
  *(void *)&v130[8] = 0;
  pthread_mutexattr_init((pthread_mutexattr_t *)v130);
  pthread_mutex_init((pthread_mutex_t *)(v11 + 2080), (const pthread_mutexattr_t *)v130);
  pthread_mutexattr_destroy((pthread_mutexattr_t *)v130);
  *uint64_t v11 = 1;
  uint64_t v27 = 0;
  *((void *)v11 + 268) = _Block_copy(a5);
  *(void *)(a1 + 16) = v11;
  return v27;
}

void *si_psid_clone_and_reset(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(unsigned char *)(v2 + 2))
  {
    if (!__kSI_PersistentIDStoreTypeID) {
      __kSI_PersistentIDStoreTypeID = _CFRuntimeRegisterClass();
    }
    Instance = (void *)_CFRuntimeCreateInstance();
    unlinkat(a2, "psid.db", 0);
    if (!si_init_posix_psid(Instance, *(void *)(v2 + 2072), a2, 32770, *(void *)(v2 + 2144)))
    {
      si_psid_set_root_path2((uint64_t)Instance, (const char *)(v2 + 16), (const char *)(v2 + 16));
      *(void *)(a1 + 16) = Instance[2];
      Instance[2] = v2;
      return Instance;
    }
    CFRelease(Instance);
  }
  return 0;
}

long long *getIndexAttributeScores(int a1)
{
  if (a1 == 2048)
  {
    {
      ContactsIndexAttributeScores(void)::_safariIndexAttributeScores = 0u;
      unk_1E9FE38C8 = 0u;
      dword_1E9FE38D8 = 1065353216;
    }
    if (ContactsIndexAttributeScores(void)::onceToken != -1) {
      dispatch_once(&ContactsIndexAttributeScores(void)::onceToken, &__block_literal_global_36);
    }
    return &ContactsIndexAttributeScores(void)::_safariIndexAttributeScores;
  }
  else if (a1 == 4)
  {
    {
      SafariIndexAttributeScores(void)::_safariIndexAttributeScores = 0u;
      *(_OWORD *)algn_1E9FE3890 = 0u;
      dword_1E9FE38A0 = 1065353216;
    }
    if (SafariIndexAttributeScores(void)::onceToken != -1) {
      dispatch_once(&SafariIndexAttributeScores(void)::onceToken, &__block_literal_global_33);
    }
    return &SafariIndexAttributeScores(void)::_safariIndexAttributeScores;
  }
  else
  {
    {
      DefaultIndexAttributeScores(void)::_indexAttributeScores = 0u;
      *(_OWORD *)algn_1E9FDB250 = 0u;
      dword_1E9FDB260 = 1065353216;
    }
    if (DefaultIndexAttributeScores(void)::onceToken != -1) {
      dispatch_once(&DefaultIndexAttributeScores(void)::onceToken, &__block_literal_global_39);
    }
    return &DefaultIndexAttributeScores(void)::_indexAttributeScores;
  }
}

void ___ZL27DefaultIndexAttributeScoresv_block_invoke()
{
  std::string::basic_string[abi:nn180100]<0>(__p, "*");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&DefaultIndexAttributeScores(void)::_indexAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 0;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemTextContent");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&DefaultIndexAttributeScores(void)::_indexAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 0;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1BD7A66A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (uint64_t *)a2;
  }
  else {
    uint64_t v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v9;
      if (v9 >= v11) {
        unint64_t v14 = v9 % v11;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v9;
    }
    long long v15 = *(void ***)(*(void *)a1 + 8 * v14);
    if (v15)
    {
      for (size_t i = *v15; i; size_t i = *(void **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  size_t i = operator new(0x30uLL);
  *(void *)size_t i = 0;
  *((void *)i + 1) = v10;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((void *)i + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *((_DWORD *)i + 10) = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    BOOL v20 = 1;
    if (v11 >= 3) {
      BOOL v20 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v11);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__rehash<true>(a1, v23);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v14 = v10 % v11;
      }
      else {
        unint64_t v14 = v10;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v10;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v14);
  if (v25)
  {
    *(void *)size_t i = *v25;
LABEL_44:
    *uint64_t v25 = i;
    goto LABEL_45;
  }
  *(void *)size_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v24 + 8 * v14) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v26 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v26 >= v11) {
        v26 %= v11;
      }
    }
    else
    {
      v26 &= v11 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1BD7A6908(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,int>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

void ___ZL28ContactsIndexAttributeScoresv_block_invoke()
{
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemDisplayName");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&ContactsIndexAttributeScores(void)::_safariIndexAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 0;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemAlternateNames");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&ContactsIndexAttributeScores(void)::_safariIndexAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 0;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemAppEntityTitle");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&ContactsIndexAttributeScores(void)::_safariIndexAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 0;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1BD7A69EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZL26SafariIndexAttributeScoresv_block_invoke()
{
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemContentURL");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&SafariIndexAttributeScores(void)::_safariIndexAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 0;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemTitle");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&SafariIndexAttributeScores(void)::_safariIndexAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 0;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "redirectSourceTitle");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&SafariIndexAttributeScores(void)::_safariIndexAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 0;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "redirectSourceURL");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&SafariIndexAttributeScores(void)::_safariIndexAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 0;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "bookmarkTitle");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&SafariIndexAttributeScores(void)::_safariIndexAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 0;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1BD7A6B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CalendarRankingAttributeScores(void)
{
  {
    CalendarRankingAttributeScores(void)::_calendarAttributeScores = 0u;
    *(_OWORD *)algn_1EC02E890 = 0u;
    dword_1EC02E8A0 = 1065353216;
  }
  if (CalendarRankingAttributeScores(void)::onceToken != -1)
  {
    dispatch_once(&CalendarRankingAttributeScores(void)::onceToken, &__block_literal_global_218);
  }
}

void ___Z30CalendarRankingAttributeScoresv_block_invoke()
{
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemAuthors");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&CalendarRankingAttributeScores(void)::_calendarAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1065353216;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemAuthorEmailAddresses");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&CalendarRankingAttributeScores(void)::_calendarAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1061997773;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemRecipients");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&CalendarRankingAttributeScores(void)::_calendarAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPrimaryRecipientEmailAddresses");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&CalendarRankingAttributeScores(void)::_calendarAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemTitle");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&CalendarRankingAttributeScores(void)::_calendarAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1061997773;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1BD7A6D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MessagesRankingAttributeScores(void)
{
  {
    MessagesRankingAttributeScores(void)::_messagesAttributeScores = 0u;
    unk_1EC02E908 = 0u;
    dword_1EC02E918 = 1065353216;
  }
  if (MessagesRankingAttributeScores(void)::onceToken[0] != -1)
  {
    dispatch_once(MessagesRankingAttributeScores(void)::onceToken, &__block_literal_global_7_224);
  }
}

void ___Z30MessagesRankingAttributeScoresv_block_invoke()
{
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemAuthors");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MessagesRankingAttributeScores(void)::_messagesAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1065353216;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemTextContent");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MessagesRankingAttributeScores(void)::_messagesAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1056964608;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemAuthorEmailAddresses");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MessagesRankingAttributeScores(void)::_messagesAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1061997773;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemRecipients");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MessagesRankingAttributeScores(void)::_messagesAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPrimaryRecipientEmailAddresses");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MessagesRankingAttributeScores(void)::_messagesAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1BD7A6F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void FilesRankingAttributeScores(void)
{
  {
    FilesRankingAttributeScores(void)::_filesAttributeScores = 0u;
    unk_1E9FDAB60 = 0u;
    dword_1E9FDAB70 = 1065353216;
  }
  if (FilesRankingAttributeScores(void)::onceToken != -1)
  {
    dispatch_once(&FilesRankingAttributeScores(void)::onceToken, &__block_literal_global_10);
  }
}

void ___Z27FilesRankingAttributeScoresv_block_invoke()
{
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemDisplayName");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&FilesRankingAttributeScores(void)::_filesAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1065353216;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemFilename");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&FilesRankingAttributeScores(void)::_filesAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1065353216;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "FPFilename");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&FilesRankingAttributeScores(void)::_filesAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1065353216;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemAlternateNames");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&FilesRankingAttributeScores(void)::_filesAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1065353216;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemLastEditorName");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&FilesRankingAttributeScores(void)::_filesAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1061997773;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1BD7A719C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MailRankingAttributeScores(void)
{
  {
    MailRankingAttributeScores(void)::_mailAttributeScores = 0u;
    unk_1EC02E858 = 0u;
    dword_1EC02E868 = 1065353216;
  }
  if (MailRankingAttributeScores(void)::onceToken != -1)
  {
    dispatch_once(&MailRankingAttributeScores(void)::onceToken, &__block_literal_global_17);
  }
}

void ___Z26MailRankingAttributeScoresv_block_invoke()
{
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemAuthors");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MailRankingAttributeScores(void)::_mailAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1065353216;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemAuthorEmailAddresses");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MailRankingAttributeScores(void)::_mailAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1061997773;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemSubject");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MailRankingAttributeScores(void)::_mailAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1063675494;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemTextContent");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MailRankingAttributeScores(void)::_mailAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1056964608;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemRecipients");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MailRankingAttributeScores(void)::_mailAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemRecipientEmailAddresses");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MailRankingAttributeScores(void)::_mailAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemEmailAddresses");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MailRankingAttributeScores(void)::_mailAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1053609165;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemAttachmentTypes");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MailRankingAttributeScores(void)::_mailAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1045220557;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemAttachmentNames");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MailRankingAttributeScores(void)::_mailAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1045220557;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1BD7A74B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___Z30MailRankingNameAttributeScoresv_block_invoke()
{
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemAuthors");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MailRankingNameAttributeScores(void)::_mailAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1065353216;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemRecipients");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MailRankingNameAttributeScores(void)::_mailAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1BD7A7594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SafariRankingAttributeScores(void)
{
  {
    SafariRankingAttributeScores(void)::_safariAttributeScores = 0u;
    unk_1E9FD2148 = 0u;
    dword_1E9FD2158 = 1065353216;
  }
  if (SafariRankingAttributeScores(void)::onceToken != -1)
  {
    dispatch_once(&SafariRankingAttributeScores(void)::onceToken, &__block_literal_global_26);
  }
}

void ___Z28SafariRankingAttributeScoresv_block_invoke()
{
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemComment");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&SafariRankingAttributeScores(void)::_safariAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1065353216;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemTitle");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&SafariRankingAttributeScores(void)::_safariAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1061997773;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "bookmarkTitle");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&SafariRankingAttributeScores(void)::_safariAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1063675494;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPath");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&SafariRankingAttributeScores(void)::_safariAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1053609165;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "redirectSourceTitle");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&SafariRankingAttributeScores(void)::_safariAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "redirectSourceURL");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&SafariRankingAttributeScores(void)::_safariAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1045220557;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1BD7A77E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t getRankingAttributeScores(uint64_t a1)
{
  if (a1) {
    unsigned int v1 = *(unsigned __int16 *)(a1 + 10);
  }
  else {
    unsigned int v1 = 0;
  }
  uint64_t v2 = v1;
  if (!getRankingAttributeScores(PRContext *)::ans[v1])
  {
    std::mutex::lock(&getRankingAttributeScores(PRContext *)::mu);
    if (!getRankingAttributeScores(PRContext *)::ans[v2]) {
      operator new();
    }
    std::mutex::unlock(&getRankingAttributeScores(PRContext *)::mu);
  }
  return getRankingAttributeScores(PRContext *)::ans[v2];
}

void sub_1BD7A7AFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  std::mutex::unlock(&getRankingAttributeScores(PRContext *)::mu);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,float>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (size_t i = *(void **)(a2 + 16); i; size_t i = (void *)*i)
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,float> const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_1BD7A7BC8(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__node_handle_merge_unique[abi:nn180100]<std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>>(void *result, void *a2)
{
  v3 = a2 + 2;
  uint64_t v2 = (uint64_t *)a2[2];
  if (v2)
  {
    uint64_t v5 = result;
    do
    {
      int v6 = *((char *)v2 + 39);
      if (v6 >= 0) {
        uint64_t v7 = v2 + 2;
      }
      else {
        uint64_t v7 = (uint64_t *)v2[2];
      }
      if (v6 >= 0) {
        unint64_t v8 = *((unsigned __int8 *)v2 + 39);
      }
      else {
        unint64_t v8 = v2[3];
      }
      unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
      result = std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__node_insert_unique_prepare[abi:nn180100]((uint64_t)v5, v9, (unsigned __int8 *)v2 + 16);
      unint64_t v10 = (uint64_t *)*v2;
      if (result) {
        goto LABEL_37;
      }
      int8x8_t v11 = (int8x8_t)a2[1];
      unint64_t v12 = v2[1];
      uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
      v13.i16[0] = vaddlv_u8(v13);
      if (v13.u32[0] > 1uLL)
      {
        if (v12 >= *(void *)&v11) {
          v12 %= *(void *)&v11;
        }
      }
      else
      {
        v12 &= *(void *)&v11 - 1;
      }
      unint64_t v14 = *(uint64_t **)(*a2 + 8 * v12);
      do
      {
        long long v15 = v14;
        unint64_t v14 = (uint64_t *)*v14;
      }
      while (v14 != v2);
      if (v15 == v3) {
        goto LABEL_40;
      }
      unint64_t v16 = v15[1];
      if (v13.u32[0] > 1uLL)
      {
        if (v16 >= *(void *)&v11) {
          v16 %= *(void *)&v11;
        }
      }
      else
      {
        v16 &= *(void *)&v11 - 1;
      }
      uint64_t v17 = *v2;
      if (v16 != v12)
      {
LABEL_40:
        if (v10)
        {
          unint64_t v18 = v10[1];
          if (v13.u32[0] > 1uLL)
          {
            if (v18 >= *(void *)&v11) {
              v18 %= *(void *)&v11;
            }
          }
          else
          {
            v18 &= *(void *)&v11 - 1;
          }
          uint64_t v17 = *v2;
          if (v18 == v12)
          {
LABEL_30:
            unint64_t v19 = *(void *)(v17 + 8);
            if (v13.u32[0] > 1uLL)
            {
              if (v19 >= *(void *)&v11) {
                v19 %= *(void *)&v11;
              }
            }
            else
            {
              v19 &= *(void *)&v11 - 1;
            }
            if (v19 != v12)
            {
              *(void *)(*a2 + 8 * v19) = v15;
              uint64_t v17 = *v2;
            }
            goto LABEL_36;
          }
        }
        *(void *)(*a2 + 8 * v12) = 0;
        uint64_t v17 = *v2;
      }
      if (v17) {
        goto LABEL_30;
      }
LABEL_36:
      *long long v15 = v17;
      --a2[3];
      *uint64_t v2 = 0;
      v2[1] = v9;
      result = std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__node_insert_unique_perform[abi:nn180100](v5, v2);
LABEL_37:
      uint64_t v2 = v10;
    }
    while (v10);
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__node_insert_unique_prepare[abi:nn180100](uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v7.i16[0] = vaddlv_u8(v7);
    unint64_t v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL) {
      uint64_t v9 = v4 <= a2 ? a2 % v4 : a2;
    }
    else {
      uint64_t v9 = (v4 - 1) & a2;
    }
    unint64_t v10 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v9);
    if (v10)
    {
      for (size_t i = *v10; i; size_t i = *(unsigned __int8 **)i)
      {
        unint64_t v12 = *((void *)i + 1);
        if (v12 == a2)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, a3)) {
            return i;
          }
        }
        else
        {
          if (v8 > 1)
          {
            if (v12 >= v4) {
              v12 %= v4;
            }
          }
          else
          {
            v12 &= v4 - 1;
          }
          if (v12 != v9) {
            break;
          }
        }
      }
    }
  }
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v4 || (float)(v14 * (float)v4) < v13)
  {
    BOOL v15 = 1;
    if (v4 >= 3) {
      BOOL v15 = (v4 & (v4 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v4);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__rehash<true>(a1, v18);
  }
  return 0;
}

void *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__node_insert_unique_perform[abi:nn180100](void *result, void *a2)
{
  int8x8_t v2 = (int8x8_t)result[1];
  unint64_t v3 = a2[1];
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(void *)&v2) {
      v3 %= *(void *)&v2;
    }
  }
  else
  {
    v3 &= *(void *)&v2 - 1;
  }
  uint64_t v5 = *(void **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    *uint64_t v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(void *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v2) {
        v6 %= *(void *)&v2;
      }
    }
    else
    {
      v6 &= *(void *)&v2 - 1;
    }
    uint64_t v5 = (void *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,float> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint8x8_t v7 = (uint64_t *)a2;
  }
  else {
    uint8x8_t v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v9;
      if (v9 >= v11) {
        unint64_t v14 = v9 % v11;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v9;
    }
    BOOL v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v14);
    if (v15)
    {
      for (size_t i = *v15; i; size_t i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2)) {
            return;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  size_t v18 = (char *)operator new(0x30uLL);
  *(void *)size_t v18 = 0;
  *((void *)v18 + 1) = v10;
  unint64_t v19 = (std::string *)(v18 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v18 + 4) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v18 + 10) = *(_DWORD *)(a3 + 24);
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v14 = v10 % v11;
      }
      else {
        unint64_t v14 = v10;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v14);
  if (v27)
  {
    *(void *)size_t v18 = *v27;
LABEL_47:
    void *v27 = v18;
    goto LABEL_48;
  }
  *(void *)size_t v18 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v18;
  *(void *)(v26 + 8 * v14) = a1 + 16;
  if (*(void *)v18)
  {
    unint64_t v28 = *(void *)(*(void *)v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    uint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_47;
  }
LABEL_48:
  ++*(void *)(a1 + 24);
}

void sub_1BD7A81EC(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,int>,void *>>>::operator()[abi:nn180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t getWildCardAllowedFields(unsigned int a1)
{
  uint64_t v1 = a1;
  if (!getWildCardAllowedFields(PRBundleIDType)::ans[a1])
  {
    std::mutex::lock(&getWildCardAllowedFields(PRBundleIDType)::mu);
    if (!getWildCardAllowedFields(PRBundleIDType)::ans[v1]) {
      operator new();
    }
    std::mutex::unlock(&getWildCardAllowedFields(PRBundleIDType)::mu);
  }
  return getWildCardAllowedFields(PRBundleIDType)::ans[v1];
}

void sub_1BD7A88D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::~__hash_table((uint64_t)va);
  std::mutex::unlock(&getWildCardAllowedFields(PRBundleIDType)::mu);
  _Unwind_Resume(a1);
}

void ___ZL25MailWildCardAllowedFieldsv_block_invoke()
{
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemSubject");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 10) = 0;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemTextContent");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 10) = 0;
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1BD7A89A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (unsigned __int8 *)a1;
  unint64_t v4 = *(void *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(void *)a1;
    unint64_t v5 = v4;
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v5);
  unint64_t v7 = v6;
  unint64_t v8 = qword_1EC02E990;
  if (qword_1EC02E990)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EC02E990);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v11 = v6;
      if (v6 >= qword_1EC02E990) {
        unint64_t v11 = v6 % qword_1EC02E990;
      }
    }
    else
    {
      unint64_t v11 = (qword_1EC02E990 - 1) & v6;
    }
    uint8x8_t v12 = *(void ***)(MailWildCardAllowedFields(void)::_mailWildCardAllowedFields + 8 * v11);
    if (v12)
    {
      for (size_t i = *v12; i; size_t i = *(void **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v7)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, v3)) {
            return i;
          }
        }
        else
        {
          if (v10 > 1)
          {
            if (v14 >= v8) {
              v14 %= v8;
            }
          }
          else
          {
            v14 &= v8 - 1;
          }
          if (v14 != v11) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v11 = 0;
  }
  size_t i = operator new(0x30uLL);
  *(void *)size_t i = 0;
  *((void *)i + 1) = v7;
  *((_OWORD *)i + 1) = *(_OWORD *)a2;
  *((void *)i + 4) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *((_DWORD *)i + 10) = 0;
  float v15 = (float)(unint64_t)(qword_1EC02E9A0 + 1);
  if (!v8 || (float)(*(float *)&dword_1EC02E9A8 * (float)v8) < v15)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v15 / *(float *)&dword_1EC02E9A8);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__rehash<true>((uint64_t)&MailWildCardAllowedFields(void)::_mailWildCardAllowedFields, v19);
    unint64_t v8 = qword_1EC02E990;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= qword_1EC02E990) {
        unint64_t v11 = v7 % qword_1EC02E990;
      }
      else {
        unint64_t v11 = v7;
      }
    }
    else
    {
      unint64_t v11 = (qword_1EC02E990 - 1) & v7;
    }
  }
  uint64_t v20 = MailWildCardAllowedFields(void)::_mailWildCardAllowedFields;
  float v21 = *(void **)(MailWildCardAllowedFields(void)::_mailWildCardAllowedFields + 8 * v11);
  if (v21)
  {
    *(void *)size_t i = *v21;
LABEL_41:
    *float v21 = i;
    goto LABEL_42;
  }
  *(void *)size_t i = qword_1EC02E998;
  qword_1EC02E998 = (uint64_t)i;
  *(void *)(v20 + 8 * v11) = &qword_1EC02E998;
  if (*(void *)i)
  {
    unint64_t v22 = *(void *)(*(void *)i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    float v21 = (void *)(MailWildCardAllowedFields(void)::_mailWildCardAllowedFields + 8 * v22);
    goto LABEL_41;
  }
LABEL_42:
  ++qword_1EC02E9A0;
  return i;
}

void sub_1BD7A8C28(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,int>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<_freeTextCandidate>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    std::default_delete<_freeTextCandidate>::operator()[abi:nn180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::default_delete<_freeTextCandidate>::operator()[abi:nn180100](uint64_t a1)
{
  std::__tree<long long>::destroy(*(void **)(a1 + 48));
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  JUMPOUT(0x1C1881000);
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string const&>(std::string **a1, long long *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  unint64_t v6 = (std::allocator<std::string> *)(a1 + 2);
  if (0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[2] - (char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v3;
  }
  v21.__end_cap_.__value_ = v6;
  if (v7)
  {
    unint64_t v8 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v7);
    uint64_t v10 = v9;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v10 = 0;
  }
  unint64_t v11 = (std::string *)&v8[24 * v2];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  unint64_t v14 = *a1;
  unint64_t v13 = (unint64_t)a1[1];
  if ((std::string *)v13 == *a1)
  {
    int64x2_t v17 = vdupq_n_s64(v13);
    float v15 = v11;
  }
  else
  {
    float v15 = v11;
    do
    {
      long long v16 = *(_OWORD *)(v13 - 24);
      v15[-1].__r_.__value_.__r.__words[2] = *(void *)(v13 - 8);
      *(_OWORD *)&v15[-1].__r_.__value_.__l.__data_ = v16;
      --v15;
      *(void *)(v13 - 16) = 0;
      *(void *)(v13 - 8) = 0;
      *(void *)(v13 - 24) = 0;
      v13 -= 24;
    }
    while ((std::string *)v13 != v14);
    int64x2_t v17 = *(int64x2_t *)a1;
  }
  unint64_t v18 = v11 + 1;
  *a1 = v15;
  a1[1] = v18;
  *(int64x2_t *)&v21.__begin_ = v17;
  size_t v19 = a1[2];
  a1[2] = (std::string *)&v8[24 * v10];
  v21.__end_cap_.__value_ = v19;
  v21.__first_ = (std::__split_buffer<std::string>::pointer)v17.i64[0];
  std::__split_buffer<std::string>::~__split_buffer(&v21);
  return v18;
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer begin = this->__begin_;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  if (end != begin)
  {
    do
    {
      std::__split_buffer<std::string>::pointer v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        std::__split_buffer<std::string>::pointer v4 = this->__end_;
      }
      std::__split_buffer<std::string>::pointer end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void _peopleMatchInfo::_peopleMatchInfo(_peopleMatchInfo *this, unint64_t a2)
{
  std::__split_buffer<std::string>::pointer v4 = (char *)this + 24;
  unint64_t v5 = (char **)((char *)this + 80);
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  unint64_t v6 = (char **)((char *)this + 56);
  MEMORY[0x1C1880BF0]();
  MEMORY[0x1C1880BF0](v4, "");
  *((void *)this + 6) = 0;
  std::vector<CFRange>::resize(v6, a2);
  std::vector<CFRange>::resize(v5, a2);
  unint64_t v7 = (char *)*((void *)this + 8);
  if (*v6 != v7) {
    bzero(*v6, ((v7 - *v6 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  unint64_t v8 = (unsigned char *)*((void *)this + 10);
  uint64_t v9 = (unsigned char *)*((void *)this + 11);
  if (v8 != v9) {
    bzero(v8, ((v9 - v8 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *(void *)((char *)this + 117) = 0;
}

void std::vector<CFRange>::resize(char **a1, unint64_t a2)
{
  unint64_t v3 = *a1;
  std::__split_buffer<std::string>::pointer v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 4;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    unint64_t v18 = &v3[16 * a2];
    goto LABEL_19;
  }
  unint64_t v6 = a2 - v5;
  unint64_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 4)
  {
    bzero(a1[1], 16 * v6);
    unint64_t v18 = &v4[16 * v6];
LABEL_19:
    a1[1] = v18;
    return;
  }
  if (a2 >> 60) {
    abort();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 3;
  if (v8 >> 3 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  unint64_t v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CFRange>>(v10);
  long long v12 = &v11[16 * v5];
  unint64_t v14 = &v11[16 * v13];
  bzero(v12, 16 * v6);
  float v15 = &v12[16 * v6];
  int64x2_t v17 = *a1;
  long long v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      *((_OWORD *)v12 - 1) = *((_OWORD *)v16 - 1);
      v12 -= 16;
      v16 -= 16;
    }
    while (v16 != v17);
    long long v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
  {
    operator delete(v16);
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<CFRange>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(16 * a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    unint64_t v7 = (uint64_t *)a2;
  }
  else {
    unint64_t v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v9;
      if (v9 >= v11) {
        unint64_t v14 = v9 % v11;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v9;
    }
    float v15 = *(void ***)(*(void *)a1 + 8 * v14);
    if (v15)
    {
      long long v16 = (char *)*v15;
      if (*v15)
      {
        do
        {
          unint64_t v17 = *((void *)v16 + 1);
          if (v17 == v10)
          {
            if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)v16 + 16, (unsigned __int8 *)a2))
            {
              return v16;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v17 >= v11) {
                v17 %= v11;
              }
            }
            else
            {
              v17 &= v11 - 1;
            }
            if (v17 != v14) {
              break;
            }
          }
          long long v16 = *(char **)v16;
        }
        while (v16);
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  long long v16 = (char *)operator new(0x30uLL);
  *(void *)long long v16 = 0;
  *((void *)v16 + 1) = v10;
  unint64_t v18 = (std::string *)(v16 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v16 + 4) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v16 + 10) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__rehash<true>(a1, v24);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v14 = v10 % v11;
      }
      else {
        unint64_t v14 = v10;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v10;
    }
  }
  uint64_t v25 = *(void *)a1;
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v14);
  if (v26)
  {
    *(void *)long long v16 = *v26;
LABEL_47:
    *uint64_t v26 = v16;
    goto LABEL_48;
  }
  *(void *)long long v16 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v16;
  *(void *)(v25 + 8 * v14) = a1 + 16;
  if (*(void *)v16)
  {
    unint64_t v27 = *(void *)(*(void *)v16 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11) {
        v27 %= v11;
      }
    }
    else
    {
      v27 &= v11 - 1;
    }
    uint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_47;
  }
LABEL_48:
  ++*(void *)(a1 + 24);
  return v16;
}

uint64_t *std::__tree<long long>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  unint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<_topicCandidate>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  std::__split_buffer<std::string>::pointer v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<_peopleCandidate>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    std::default_delete<_peopleCandidate>::operator()[abi:nn180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::default_delete<_peopleCandidate>::operator()[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 88);
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  JUMPOUT(0x1C1881000);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:nn180100]((uint64_t *)v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<_photosCandidate>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    MEMORY[0x1C1881000](v2, 0x1000C403E1C8BA9);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<_topicCandidate>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    std::default_delete<_topicCandidate>::operator()[abi:nn180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::default_delete<_topicCandidate>::operator()[abi:nn180100](uint64_t a1)
{
  std::__tree<std::string>::destroy(*(char **)(a1 + 176));
  std::__tree<long long>::destroy(*(void **)(a1 + 152));
  JUMPOUT(0x1C1881000);
}

void std::__tree<std::string>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::string>::destroy(*(void *)a1);
    std::__tree<std::string>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

uint64_t unigramsMatch(uint64_t a1, uint64_t a2, const char *a3, int a4, int a5, void *a6, const __CFDictionary *a7, const __CFLocale *a8, std::string::value_type **a9)
{
  int v68 = a5;
  v66 = a3;
  uint64_t v67 = a2;
  uint64_t v65 = 0;
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a1 + 32);
  unint64_t v10 = (void *)*a6;
  uint64_t v11 = a6[1] - *a6;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  if (v9 == v11 >> 4)
  {
    if (v9) {
      BOOL v12 = a4 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12)
    {
      if (v9)
      {
        CFLocaleRef v13 = a8;
        CFDictionaryRef v14 = a7;
        float v15 = a6;
        uint64_t v65 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)(a1 + 40);
        if (a7) {
          BOOL v18 = a9 == 0;
        }
        else {
          BOOL v18 = 1;
        }
        int v20 = !v18 && a8 != 0;
        int v60 = v20;
        CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        v61 = (std::allocator<std::string> *)(a9 + 2);
        os_log_type_t v62 = a6;
        CFDictionaryRef v63 = a7;
        uint64_t v64 = v9;
        CFLocaleRef v58 = a8;
        uint64_t v57 = v17;
        CFAllocatorRef v56 = v21;
        do
        {
          long long v69 = 0uLL;
          uint64_t v70 = 0;
          std::string::basic_string[abi:nn180100]<0>(&v69, *(char **)(v17 + 8 * v16));
          if (*(void *)(v17 + 8 * v16) && icu_search_context_create())
          {
            unint64_t v22 = (void *)(*v15 + 16 * v16);
            *unint64_t v22 = 0;
            v22[1] = 0;
            if (icu_search_match())
            {
              unint64_t v23 = (void *)(*v15 + 16 * v16);
              *unint64_t v23 = v72;
              v23[1] = v71;
              ++v65;
              goto LABEL_36;
            }
            if (v60)
            {
              size_t v24 = strlen(*(const char **)(v17 + 8 * v16));
              Mutable = CFStringCreateMutable(v21, v24);
              CFStringAppendCString(Mutable, *(const char **)(v17 + 8 * v16), 0x8000100u);
              CFStringLowercase(Mutable, v13);
              CFStringNormalize(Mutable, kCFStringNormalizationFormD);
              if (!CFDictionaryContainsKey(v14, Mutable))
              {
                v33 = Mutable;
                if (Mutable) {
                  goto LABEL_35;
                }
                goto LABEL_36;
              }
              os_log_type_t v59 = Mutable;
              CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v14, Mutable);
              for (CFIndex i = 0; ; ++i)
              {
                if (i >= CFArrayGetCount(Value))
                {
                  CFLocaleRef v13 = v58;
                  float v15 = v62;
                  CFDictionaryRef v14 = v63;
                  goto LABEL_34;
                }
                CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(Value, i);
                CFIndex Length = CFStringGetLength(ValueAtIndex);
                CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
                MEMORY[0x1F4188790](MaximumSizeForEncoding);
                uint64_t v32 = (char *)&v55 - v31;
                bzero((char *)&v55 - v31, MaximumSizeForEncoding + 1);
                CFStringGetCString(ValueAtIndex, v32, MaximumSizeForEncoding + 1, 0x8000100u);
                v32[MaximumSizeForEncoding] = 0;
                if (icu_search_context_create())
                {
                  if (icu_search_match())
                  {
                    float v15 = v62;
                    int v34 = (void *)(*v62 + 16 * v16);
                    *int v34 = v72;
                    v34[1] = v71;
                    ++v65;
                    MEMORY[0x1C1880BF0](&v69, v32);
                    icu_ctx_release();
                    CFLocaleRef v13 = v58;
                    CFDictionaryRef v14 = v63;
LABEL_34:
                    uint64_t v9 = v64;
                    uint64_t v17 = v57;
                    CFAllocatorRef v21 = v56;
                    v33 = v59;
                    if (v59) {
LABEL_35:
                    }
                      CFRelease(v33);
                    break;
                  }
                  icu_ctx_release();
                }
              }
            }
LABEL_36:
            icu_ctx_release();
          }
          if (a9)
          {
            unint64_t v36 = (unint64_t)a9[1];
            unint64_t v35 = (unint64_t)a9[2];
            if (v36 >= v35)
            {
              unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (void)*a9) >> 3);
              unint64_t v39 = v38 + 1;
              if (v38 + 1 > 0xAAAAAAAAAAAAAAALL) {
                abort();
              }
              unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (void)*a9) >> 3);
              if (2 * v40 > v39) {
                unint64_t v39 = 2 * v40;
              }
              if (v40 >= 0x555555555555555) {
                unint64_t v41 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v41 = v39;
              }
              v73.__end_cap_.__value_ = v61;
              if (v41)
              {
                int v42 = (std::string *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v41);
                uint64_t v44 = v43;
              }
              else
              {
                int v42 = 0;
                uint64_t v44 = 0;
              }
              v46 = &v42->__r_.__value_.__s.__data_[24 * v38];
              if (SHIBYTE(v70) < 0)
              {
                std::string::__init_copy_ctor_external(v42 + v38, (const std::string::value_type *)v69, *((std::string::size_type *)&v69 + 1));
              }
              else
              {
                long long v47 = v69;
                *((void *)v46 + 2) = v70;
                *(_OWORD *)v46 = v47;
              }
              v49 = *a9;
              unint64_t v48 = (unint64_t)a9[1];
              if ((std::string::value_type *)v48 == *a9)
              {
                int64x2_t v52 = vdupq_n_s64(v48);
                os_log_type_t v50 = &v42->__r_.__value_.__s.__data_[24 * v38];
              }
              else
              {
                os_log_type_t v50 = &v42->__r_.__value_.__s.__data_[24 * v38];
                do
                {
                  long long v51 = *(_OWORD *)(v48 - 24);
                  *((void *)v50 - 1) = *(void *)(v48 - 8);
                  *(_OWORD *)(v50 - 24) = v51;
                  v50 -= 24;
                  *(void *)(v48 - 16) = 0;
                  *(void *)(v48 - 8) = 0;
                  *(void *)(v48 - 24) = 0;
                  v48 -= 24;
                }
                while ((std::string::value_type *)v48 != v49);
                int64x2_t v52 = *(int64x2_t *)a9;
              }
              os_log_type_t v45 = v46 + 24;
              *a9 = v50;
              a9[1] = v46 + 24;
              *(int64x2_t *)&v73.__begin_ = v52;
              os_log_type_t v53 = (std::string *)a9[2];
              a9[2] = (std::string::value_type *)&v42[v44];
              v73.__end_cap_.__value_ = v53;
              v73.__first_ = (std::__split_buffer<std::string>::pointer)v52.i64[0];
              std::__split_buffer<std::string>::~__split_buffer(&v73);
              float v15 = v62;
              CFDictionaryRef v14 = v63;
            }
            else
            {
              if (SHIBYTE(v70) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)a9[1], (const std::string::value_type *)v69, *((std::string::size_type *)&v69 + 1));
              }
              else
              {
                long long v37 = v69;
                *(void *)(v36 + 16) = v70;
                *(_OWORD *)unint64_t v36 = v37;
              }
              os_log_type_t v45 = (char *)(v36 + 24);
            }
            a9[1] = v45;
            uint64_t v9 = v64;
          }
          if (SHIBYTE(v70) < 0) {
            operator delete((void *)v69);
          }
          ++v16;
        }
        while (v16 != v9);
      }
      else
      {
        return 0;
      }
    }
    else
    {
      *unint64_t v10 = 0;
      v10[1] = strlen(v66);
      return 1;
    }
  }
  return v65;
}

uint64_t tokenIsStopWord(uint64_t a1, uint64_t a2)
{
  SILocalizationLoad();
  SILanguagesIsCJK();
  int TokenType = SILocalizationGetTokenType();
  CFStringRef v4 = (const __CFString *)MEMORY[0x1C187FC90](a2);
  if (TokenType == 5) {
    return 1;
  }
  CFStringRef v6 = v4;
  if (CFStringHasPrefix(v4, @"fr") || (uint64_t result = CFStringHasPrefix(v6, @"es"), result))
  {
    CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"en");
    SILocalizationLoad();
    return SILocalizationGetTokenType() == 5;
  }
  return result;
}

int *___Z15tokenIsStopWordP13_LocalizationPK10__CFLocalePhi_block_invoke(int *result, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v2 = result;
    int v3 = *__error();
    CFStringRef v4 = _SILogForLogForCategory(14);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *((void *)v2 + 4);
      int v6 = 136315650;
      unint64_t v7 = "tokenIsStopWord_block_invoke";
      __int16 v8 = 1024;
      int v9 = 1143;
      __int16 v10 = 2112;
      uint64_t v11 = v5;
      _os_log_error_impl(&dword_1BD672000, v4, OS_LOG_TYPE_ERROR, "%s:%d: [Pommes_Suggestions] error loading localization for %@", (uint8_t *)&v6, 0x1Cu);
    }
    uint64_t result = __error();
    uint64_t *result = v3;
  }
  return result;
}

int *___Z15tokenIsStopWordP13_LocalizationPK10__CFLocalePhi_block_invoke_10(int *result, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v2 = result;
    int v3 = *__error();
    CFStringRef v4 = _SILogForLogForCategory(14);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *((void *)v2 + 4);
      int v6 = 136315650;
      unint64_t v7 = "tokenIsStopWord_block_invoke";
      __int16 v8 = 1024;
      int v9 = 1154;
      __int16 v10 = 2112;
      uint64_t v11 = v5;
      _os_log_error_impl(&dword_1BD672000, v4, OS_LOG_TYPE_ERROR, "%s:%d: [Pommes_Suggestions] error loading localization for %@", (uint8_t *)&v6, 0x1Cu);
    }
    uint64_t result = __error();
    uint64_t *result = v3;
  }
  return result;
}

BOOL tokenIsValid(char *src, int32_t srcLength, uint64_t a3, uint64_t a4, int a5, int a6)
{
  BOOL result = 0;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (src && (srcLength - 30) >= 0xFFFFFFE3)
  {
    if (_tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::onceToken[0] != -1) {
      dispatch_once(_tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::onceToken, &__block_literal_global_252);
    }
    long long v17 = 0u;
    memset(v18, 0, sizeof(v18));
    *(_OWORD *)dest = 0u;
    *(void *)pErrorCode = 0;
    u_strFromUTF8(dest, 30, (int32_t *)&pErrorCode[1], src, srcLength, pErrorCode);
    if (pErrorCode[1] && pErrorCode[0] != U_BUFFER_OVERFLOW_ERROR)
    {
      if (pErrorCode[1] >= U_ILLEGAL_ARGUMENT_ERROR)
      {
        uint64_t v13 = 0;
        char v14 = 1;
        while (!CFCharacterSetIsCharacterMember((CFCharacterSetRef)_tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::controlSet, dest[v13])&& !CFCharacterSetIsCharacterMember((CFCharacterSetRef)_tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::newlineSet, dest[v13])&& !CFCharacterSetIsCharacterMember((CFCharacterSetRef)_tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::whitespaceSet, dest[v13])&& !CFCharacterSetIsCharacterMember((CFCharacterSetRef)_tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::otherUnwantedSet, dest[v13])&& (!a6|| !CFCharacterSetIsCharacterMember((CFCharacterSetRef)_tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::decimalDigitSet, dest[v13]))&& (v13 && v13 != pErrorCode[1] - 1|| !CFCharacterSetIsCharacterMember((CFCharacterSetRef)_tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::punctuationSet, dest[v13])
              && !CFCharacterSetIsCharacterMember((CFCharacterSetRef)_tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::symbolSet, dest[v13])))
        {
          if (!CFCharacterSetIsCharacterMember((CFCharacterSetRef)_tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::punctuationSet, dest[v13]))v14 &= CFCharacterSetIsCharacterMember((CFCharacterSetRef)_tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::symbolSet, dest[v13]) != 0; {
          if (++v13 >= (int)pErrorCode[1])
          }
          {
            if (v14) {
              return 0;
            }
            return !a5 || (tokenIsStopWord(*(void *)(a3 + 16), a4) & 1) == 0;
          }
        }
      }
      return 0;
    }
    return !a5 || (tokenIsStopWord(*(void *)(a3 + 16), a4) & 1) == 0;
  }
  return result;
}

CFCharacterSetRef ___ZL39_tokenIsAllPunctuationOrHasUnwantedCharPhib_block_invoke()
{
  _tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::punctuationSet = (uint64_t)CFCharacterSetGetPredefined(kCFCharacterSetPunctuation);
  _tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::symbolSet = (uint64_t)CFCharacterSetGetPredefined(kCFCharacterSetSymbol);
  _tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::decimalDigitSet = (uint64_t)CFCharacterSetGetPredefined(kCFCharacterSetDecimalDigit);
  _tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::controlSet = (uint64_t)CFCharacterSetGetPredefined(kCFCharacterSetControl);
  _tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::newlineSet = (uint64_t)CFCharacterSetGetPredefined(kCFCharacterSetNewline);
  _tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::whitespaceSet = (uint64_t)CFCharacterSetGetPredefined(kCFCharacterSetWhitespace);
  CFCharacterSetRef result = CFCharacterSetCreateWithCharactersInString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"");
  _tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::otherUnwantedSet = (uint64_t)result;
  return result;
}

void postProcessCJKSuggestions(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v2 = (unsigned char *)a2;
  }
  else {
    uint64_t v2 = *(unsigned char **)a2;
  }
  unsigned int v3 = *v2;
  if (*v2)
  {
    std::string::size_type v6 = 0;
    char v7 = 0;
    BOOL v8 = 0;
    do
    {
      if ((v3 & 0x80) != 0)
      {
        unint64_t v9 = (unint64_t)v3 >> 4;
        char v10 = ~(_BYTE)v9;
        uint64_t v11 = utf8_byte_length(unsigned char)::utf8_len_table[v9];
        unsigned int v12 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v11] & v3;
        if ((v10 & 0xC) != 0)
        {
          v3 &= utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v11];
        }
        else
        {
          if (v11 <= 2) {
            uint64_t v11 = 2;
          }
          else {
            uint64_t v11 = v11;
          }
          uint64_t v13 = v11 - 1;
          char v14 = v2 + 1;
          do
          {
            char v15 = *v14++;
            unsigned int v3 = v15 & 0x3F | (v12 << 6);
            unsigned int v12 = v3;
            --v13;
          }
          while (v13);
        }
      }
      int isUWhiteSpace = u_isUWhiteSpace(v3);
      BOOL v17 = isUWhiteSpace != 0;
      if (!isUWhiteSpace)
      {
        if (v3 >> 8 < 0x11
          || (char v18 = 1, v3 - 65376 >= 0x50) && (v3 & 0xFFFFFF00) != 0x1100 && (v3 - 11904) >> 7 >= 0x197)
        {
          if (!(v7 & 1 | !v8)) {
            std::string::push_back(a1, 32);
          }
          char v18 = 0;
        }
        std::string::basic_string(&__p, (const std::string *)a2, v6, utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*v2 >> 4], (std::allocator<char> *)&v23);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        std::string::append(a1, (const std::string::value_type *)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        char v7 = v18;
      }
      uint64_t v21 = utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*v2 >> 4];
      v6 += v21;
      v2 += v21;
      unsigned int v3 = *v2;
      BOOL v8 = v17;
    }
    while (*v2);
  }
}

void _SIPommesSuggestionsProcessRawText(int a1, int a2, int a3, void *a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__s2, char a11, char a12, uint64_t a13, char a14, CFArrayRef theArray)
{
  if (a4 && a4[4] && *a4)
  {
    if (__s2)
    {
      strncmp("ja", __s2, 2uLL);
      strncmp("zh", __s2, 2uLL);
    }
    operator new();
  }
}

void sub_1BD7AC16C(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  if (v2) {
    CFRelease(v2);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<CFRange>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    abort();
  }
  CFCharacterSetRef result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CFRange>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>(void *a1, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    std::vector<std::string>::__vallocate[abi:nn180100](a1, a4);
    char v7 = (std::string *)a1[1];
    while (a2 != a3)
    {
      if (*((char *)a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *((void *)a2 + 1));
      }
      else
      {
        long long v8 = *a2;
        v7->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
      }
      a2 = (long long *)((char *)a2 + 24);
      ++v7;
    }
    a1[1] = v7;
  }
}

void *std::string::basic_string[abi:nn180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    std::string::size_type v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    std::string::size_type v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

uint64_t stringToLowerCase(uint64_t *a1, std::string *a2, int a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1C1880BF0](a2, "");
  if (*((char *)a1 + 23) < 0)
  {
    if ((unint64_t)(a1[1] - 513) >= 0xFFFFFFFFFFFFFE00)
    {
      bzero(dest, 0x400uLL);
      bzero(v37, 0x400uLL);
      *(void *)pErrorCode = 0;
      a1 = (uint64_t *)*a1;
      goto LABEL_7;
    }
    return 0;
  }
  if (!*((unsigned char *)a1 + 23)) {
    return 0;
  }
  bzero(dest, 0x400uLL);
  bzero(v37, 0x400uLL);
  *(void *)pErrorCode = 0;
LABEL_7:
  u_strFromUTF8(dest, 512, (int32_t *)&pErrorCode[1], (const char *)a1, -1, pErrorCode);
  uint64_t v6 = 0;
  if (pErrorCode[1])
  {
    if (pErrorCode[0] != U_BUFFER_OVERFLOW_ERROR)
    {
      pErrorCode[0] = U_ZERO_ERROR;
      UErrorCode v7 = u_strToLower(v37, 512, dest, pErrorCode[1], 0, pErrorCode);
      uint64_t v6 = 0;
      pErrorCode[1] = v7;
      if (v7)
      {
        if (pErrorCode[0] != U_BUFFER_OVERFLOW_ERROR)
        {
          int v8 = v7;
          if (a3) {
            normalizePunctuations((__int16 *)v37, v7);
          }
          bzero(__src, 0x400uLL);
          unint64_t v9 = &v37[v8];
          if ((unint64_t)(4 * v8) > 0x400)
          {
            if (v8 >= 1)
            {
              uint64_t v17 = 0;
              char v18 = v37;
              uint64_t v11 = __src;
              uint64_t v19 = v37;
              while (1)
              {
                unsigned int v21 = *v19++;
                unsigned int v20 = v21;
                if (v21 > 0x7F)
                {
                  if (v20 > 0x7FF)
                  {
                    if ((v20 & 0xF800) == 0xD800)
                    {
                      if ((v20 & 0x400) == 0 && v19 < v9)
                      {
                        int v23 = *v19;
                        if ((v23 & 0xFC00) == 0xDC00)
                        {
                          if (v17 > 1020) {
                            goto LABEL_47;
                          }
                          uint64_t v19 = v18 + 2;
                          unsigned int v24 = v23 + (v20 << 10) - 56613888;
                          *uint64_t v11 = (v24 >> 18) | 0xF0;
                          uint64_t v25 = &__src[v17];
                          v25[1] = (v24 >> 12) & 0x3F | 0x80;
                          v25[2] = (v24 >> 6) & 0x3F | 0x80;
                          v17 += 4;
                          v25[3] = v23 & 0x3F | 0x80;
                        }
                      }
                    }
                    else
                    {
                      if (v17 > 1021)
                      {
LABEL_47:
                        uint64_t v11 = &__src[v17];
                        goto LABEL_48;
                      }
                      *uint64_t v11 = (v20 >> 12) | 0xE0;
                      uint64_t v26 = &__src[v17];
                      v26[1] = (v20 >> 6) & 0x3F | 0x80;
                      v17 += 3;
                      v26[2] = v20 & 0x3F | 0x80;
                    }
                  }
                  else
                  {
                    if (v17 > 1022) {
                      goto LABEL_47;
                    }
                    unint64_t v22 = &__src[v17];
                    *uint64_t v11 = (v20 >> 6) | 0xC0;
                    v17 += 2;
                    v22[1] = v20 & 0x3F | 0x80;
                  }
                }
                else
                {
                  if (v17 > 1023) {
                    goto LABEL_47;
                  }
                  ++v17;
                  *uint64_t v11 = v20;
                }
                uint64_t v11 = &__src[v17];
                char v18 = v19;
                if (v19 >= v9) {
                  goto LABEL_48;
                }
              }
            }
          }
          else if (v8 >= 1)
          {
            char v10 = v37;
            uint64_t v11 = __src;
            unsigned int v12 = v37;
            do
            {
              unsigned int v14 = *v12++;
              unsigned int v13 = v14;
              if (v14 > 0x7F)
              {
                if (v13 > 0x7FF)
                {
                  if ((v13 & 0xF800) == 0xD800)
                  {
                    if ((v13 & 0x400) == 0 && v12 < v9)
                    {
                      int v15 = *v12;
                      if ((v15 & 0xFC00) == 0xDC00)
                      {
                        unsigned int v12 = v10 + 2;
                        unsigned int v16 = v15 + (v13 << 10) - 56613888;
                        *uint64_t v11 = (v16 >> 18) | 0xF0;
                        v11[1] = (v16 >> 12) & 0x3F | 0x80;
                        v11[2] = (v16 >> 6) & 0x3F | 0x80;
                        v11[3] = v15 & 0x3F | 0x80;
                        v11 += 4;
                      }
                    }
                  }
                  else
                  {
                    *uint64_t v11 = (v13 >> 12) | 0xE0;
                    v11[1] = (v13 >> 6) & 0x3F | 0x80;
                    v11[2] = v13 & 0x3F | 0x80;
                    v11 += 3;
                  }
                }
                else
                {
                  *uint64_t v11 = (v13 >> 6) | 0xC0;
                  v11[1] = v13 & 0x3F | 0x80;
                  v11 += 2;
                }
              }
              else
              {
                *v11++ = v13;
              }
              char v10 = v12;
            }
            while (v12 < v9);
            goto LABEL_48;
          }
          uint64_t v11 = __src;
LABEL_48:
          uint64_t v6 = v11 - __src;
          std::string::basic_string[abi:nn180100](&__dst, __src, v11 - __src);
          if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
            operator delete(a2->__r_.__value_.__l.__data_);
          }
          *(_OWORD *)&a2->__r_.__value_.__l.__data_ = __dst;
          a2->__r_.__value_.__r.__words[2] = v34;
          if (a3)
          {
            int v27 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
            if (v27 >= 0) {
              unint64_t v28 = a2;
            }
            else {
              unint64_t v28 = (std::string *)a2->__r_.__value_.__r.__words[0];
            }
            if (v27 >= 0) {
              std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = a2->__r_.__value_.__l.__size_;
            }
            while (size)
            {
              if (!memchr(" \n\r\t", v28->__r_.__value_.__s.__data_[--size], 4uLL))
              {
                std::string::size_type v31 = size + 1;
                goto LABEL_61;
              }
            }
            std::string::size_type v31 = 0;
LABEL_61:
            std::string::erase(a2, v31, 0xFFFFFFFFFFFFFFFFLL);
          }
        }
      }
    }
  }
  return v6;
}

uint64_t std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, const void **a2, const void **a3)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (*((char *)a3 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v6 = (size_t)a3[1];
  }
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  uint64_t result = std::string::basic_string[abi:nn180100]((uint64_t)a1, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    int v8 = (char *)result;
  }
  else {
    int v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v9 = a2;
    }
    else {
      unint64_t v9 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  char v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v11 = a3;
    }
    else {
      uint64_t v11 = *a3;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

void _AccumulatePhotosCandidates(uint64_t a1, os_unfair_lock_t lock, uint64_t a3, int a4, float a5)
{
  os_unfair_lock_lock(lock);
  char v8 = *(unsigned char *)(a3 + 23);
  int v45 = v8;
  std::string::size_type v43 = *(void *)(a3 + 8);
  uint64_t v44 = *(const std::string::value_type **)a3;
  if (v8 >= 0) {
    unint64_t v9 = (uint64_t *)a3;
  }
  else {
    unint64_t v9 = *(uint64_t **)a3;
  }
  if (v8 >= 0) {
    unint64_t v10 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    unint64_t v10 = *(void *)(a3 + 8);
  }
  unint64_t v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v9, v10);
  unint64_t v12 = *(void *)(a1 + 8);
  if (!v12) {
    goto LABEL_24;
  }
  unint64_t v13 = v11;
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
  v14.i16[0] = vaddlv_u8(v14);
  unint64_t v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v16 = v11;
    if (v11 >= v12) {
      unint64_t v16 = v11 % v12;
    }
  }
  else
  {
    unint64_t v16 = (v12 - 1) & v11;
  }
  uint64_t v17 = *(void *)a1;
  char v18 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v16);
  if (!v18 || (uint64_t v19 = *v18) == 0) {
LABEL_24:
  }
    operator new();
  unint64_t v46 = v12 - 1;
  while (1)
  {
    unint64_t v20 = *((void *)v19 + 1);
    if (v20 == v13) {
      break;
    }
    if (v15 > 1)
    {
      if (v20 >= v12) {
        v20 %= v12;
      }
    }
    else
    {
      v20 &= v46;
    }
    if (v20 != v16) {
      goto LABEL_24;
    }
LABEL_23:
    uint64_t v19 = *(unsigned __int8 **)v19;
    if (!v19) {
      goto LABEL_24;
    }
  }
  if (!std::equal_to<std::string>::operator()[abi:nn180100](v19 + 16, (unsigned __int8 *)a3)) {
    goto LABEL_23;
  }
  unint64_t v21 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v9, v10);
  unint64_t v22 = v21;
  if (v15 > 1)
  {
    unint64_t v24 = v21;
    int v23 = lock;
    if (v21 >= v12) {
      unint64_t v24 = v21 % v12;
    }
  }
  else
  {
    int v23 = lock;
    unint64_t v24 = v46 & v21;
  }
  uint64_t v25 = *(void ***)(v17 + 8 * v24);
  if (v25)
  {
    uint64_t v26 = (char *)*v25;
    if (*v25)
    {
      do
      {
        unint64_t v27 = *((void *)v26 + 1);
        if (v27 == v22)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)v26 + 16, (unsigned __int8 *)a3)) {
            goto LABEL_71;
          }
        }
        else
        {
          if (v15 > 1)
          {
            if (v27 >= v12) {
              v27 %= v12;
            }
          }
          else
          {
            v27 &= v46;
          }
          if (v27 != v24) {
            break;
          }
        }
        uint64_t v26 = *(char **)v26;
      }
      while (v26);
    }
  }
  unint64_t v28 = (void *)(a1 + 16);
  uint64_t v50 = 0;
  uint64_t v26 = (char *)operator new(0x30uLL);
  v49[0] = v26;
  v49[1] = a1 + 16;
  *(void *)uint64_t v26 = 0;
  *((void *)v26 + 1) = v22;
  v29 = (std::string *)(v26 + 16);
  if (v45 < 0)
  {
    std::string::__init_copy_ctor_external(v29, v44, v43);
  }
  else
  {
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v26 + 4) = *(void *)(a3 + 16);
  }
  *((void *)v26 + 5) = 0;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  LOBYTE(v50) = 1;
  float v31 = *(float *)(a1 + 32);
  if ((float)(v31 * (float)v12) < v30)
  {
    BOOL v33 = v12 < 3 || v15 > 1;
    unint64_t v34 = v33 | (2 * v12);
    unint64_t v35 = vcvtps_u32_f32(v30 / v31);
    if (v34 <= v35) {
      size_t v36 = v35;
    }
    else {
      size_t v36 = v34;
    }
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__rehash<true>(a1, v36);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v22 >= v12) {
        unint64_t v24 = v22 % v12;
      }
      else {
        unint64_t v24 = v22;
      }
    }
    else
    {
      unint64_t v24 = (v12 - 1) & v22;
    }
  }
  uint64_t v37 = *(void *)a1;
  unint64_t v38 = *(void **)(*(void *)a1 + 8 * v24);
  if (v38)
  {
    *(void *)uint64_t v26 = *v38;
    goto LABEL_69;
  }
  *(void *)uint64_t v26 = *v28;
  *unint64_t v28 = v26;
  *(void *)(v37 + 8 * v24) = v28;
  if (*(void *)v26)
  {
    unint64_t v39 = *(void *)(*(void *)v26 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v39 >= v12) {
        v39 %= v12;
      }
    }
    else
    {
      v39 &= v12 - 1;
    }
    unint64_t v38 = (void *)(*(void *)a1 + 8 * v39);
LABEL_69:
    *unint64_t v38 = v26;
  }
  v49[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_photosCandidate>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_photosCandidate>>,void *>>>>::reset[abi:nn180100]((uint64_t)v49);
LABEL_71:
  uint64_t v40 = *((void *)v26 + 5);
  int v41 = *(_DWORD *)(v40 + 8);
  ++*(_DWORD *)(v40 + 4);
  float v42 = *(float *)v40;
  if (*(float *)v40 < a5) {
    float v42 = a5;
  }
  *(float *)uint64_t v40 = v42;
  if (v41 != a4) {
    *(_DWORD *)(v40 + 8) = 9;
  }
  os_unfair_lock_unlock(v23);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_freeTextCandidate>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_freeTextCandidate>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  char v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<_freeTextCandidate>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

uint64_t *std::__tree<long long>::__emplace_hint_unique_key_args<long long,long long const&>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  size_t v5 = a2;
  UErrorCode v7 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2 || (uint64_t v8 = a2[4], v8 > a3))
  {
    uint64_t v9 = *a2;
    if (*a1 == a2)
    {
      unint64_t v11 = (uint64_t **)a2;
LABEL_16:
      if (v9) {
        uint8x8_t v14 = v11;
      }
      else {
        uint8x8_t v14 = (uint64_t **)a2;
      }
      if (v9) {
        unint64_t v12 = v11 + 1;
      }
      else {
        unint64_t v12 = (uint64_t **)a2;
      }
      goto LABEL_22;
    }
    if (v9)
    {
      unint64_t v10 = (uint64_t **)*a2;
      do
      {
        unint64_t v11 = v10;
        unint64_t v10 = (uint64_t **)v10[1];
      }
      while (v10);
    }
    else
    {
      unint64_t v16 = a2;
      do
      {
        unint64_t v11 = (uint64_t **)v16[2];
        BOOL v17 = *v11 == v16;
        unint64_t v16 = (uint64_t *)v11;
      }
      while (v17);
    }
    if ((uint64_t)v11[4] < a3) {
      goto LABEL_16;
    }
    char v18 = *v7;
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          uint8x8_t v14 = (uint64_t **)v18;
          uint64_t v19 = v18[4];
          if (v19 <= a3) {
            break;
          }
          char v18 = *v14;
          UErrorCode v7 = v14;
          if (!*v14) {
            goto LABEL_44;
          }
        }
        if (v19 >= a3) {
          break;
        }
        UErrorCode v7 = v14 + 1;
        char v18 = v14[1];
        if (!v18) {
          goto LABEL_44;
        }
      }
LABEL_46:
      unint64_t v12 = v7;
      goto LABEL_22;
    }
    goto LABEL_43;
  }
  if (v8 >= a3) {
    return v5;
  }
  unint64_t v12 = (uint64_t **)(a2 + 1);
  unint64_t v13 = (uint64_t *)a2[1];
  if (v13)
  {
    do
    {
      unint64_t v12 = (uint64_t **)v13;
      unint64_t v13 = (uint64_t *)*v13;
      uint8x8_t v14 = v12;
      unint64_t v15 = v12;
    }
    while (v13);
  }
  else
  {
    unint64_t v15 = (uint64_t **)a2;
    do
    {
      unint64_t v20 = v15;
      unint64_t v15 = (uint64_t **)v15[2];
    }
    while (*v15 != (uint64_t *)v20);
    uint8x8_t v14 = (uint64_t **)a2;
  }
  if (v15 != v7 && (uint64_t)v15[4] <= a3)
  {
    unint64_t v21 = *v7;
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          uint8x8_t v14 = (uint64_t **)v21;
          uint64_t v22 = v21[4];
          if (v22 <= a3) {
            break;
          }
          unint64_t v21 = *v14;
          UErrorCode v7 = v14;
          if (!*v14) {
            goto LABEL_44;
          }
        }
        if (v22 >= a3) {
          goto LABEL_46;
        }
        UErrorCode v7 = v14 + 1;
        unint64_t v21 = v14[1];
        if (!v21) {
          goto LABEL_44;
        }
      }
    }
LABEL_43:
    uint8x8_t v14 = a1 + 1;
LABEL_44:
    size_t v5 = (uint64_t *)operator new(0x28uLL);
    v5[4] = a4;
    std::__tree<long long>::__insert_node_at(a1, (uint64_t)v14, v7, v5);
    return v5;
  }
LABEL_22:
  size_t v5 = *v12;
  UErrorCode v7 = v12;
  if (!*v12) {
    goto LABEL_44;
  }
  return v5;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_photosCandidate>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_photosCandidate>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  char v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<_photosCandidate>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void SIPommesSuggestionsProcessDBO(const void *a1, int *a2, uint64_t *a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long *a11, int a12, char *__s1, const char **a14, uint64_t a15, char a16, uint64_t a17)
{
  uint64_t v197 = *MEMORY[0x1E4F143B8];
  if (!__s1) {
    return;
  }
  int v21 = strcmp(__s1, "com.apple.mobilemail");
  int v22 = strcmp(__s1, "com.apple.mobileslideshow");
  int v23 = *(_DWORD *)(a7 + 8);
  if ((v23 & 0x80) != 0)
  {
    if (!v22)
    {
      long long v39 = a11[3];
      v91[2] = a11[2];
      v91[3] = v39;
      v91[4] = a11[4];
      long long v40 = a11[1];
      v91[0] = *a11;
      v91[1] = v40;
      SIPommesSpotlightPhotosSuggestionsProcessDBO(a1, a2, a3, a7, a8, a4, a5, a9, a14, a12, v91, a17);
      return;
    }
    long long v29 = a11[3];
    long long v88 = a11[2];
    long long v89 = v29;
    long long v90 = a11[4];
    long long v30 = a11[1];
    long long v86 = *a11;
    long long v87 = v30;
    if (!a9) {
      return;
    }
    if (!a8) {
      return;
    }
    uint64_t v31 = *(void *)(a9 + 24);
    if (!v31) {
      return;
    }
    if (a14)
    {
      uint64_t v32 = *a14;
      if (*a14)
      {
        if (!strncmp("ja", *a14, 2uLL))
        {
          char v33 = 1;
        }
        else
        {
          if (strncmp("zh", v32, 2uLL))
          {
            char v33 = 0;
            BOOL v34 = strncmp("ko", v32, 2uLL) == 0;
LABEL_58:
            if (*(void *)(a9 + 16))
            {
              uint64_t v58 = icu_search_context_create();
              if (v58)
              {
                uint64_t v59 = v58;
                LODWORD(v144) = 0;
                LOBYTE(v142) = 0;
                LOBYTE(v138) = 0;
                double v60 = (*(double (**)(uint64_t, const char **, uint64_t *, uint64_t *))(a17 + 16))(a17, &v144, &v138, &v142);
                int v61 = *(_DWORD *)(a7 + 8);
                *(void *)&long long v113 = 0;
                *((void *)&v113 + 1) = &v113;
                uint64_t v114 = 0x2000000000;
                uint64_t v115 = -1;
                if ((v61 & 0x4000) != 0)
                {
                  *(_OWORD *)buf = xmmword_1BDA82910;
                  long long v92 = xmmword_1BDA82920;
                  long long v174 = xmmword_1BDA82930;
                  long long v173 = xmmword_1BDA82940;
                  v147 = (uint64_t *)MEMORY[0x1E4F143A8];
                  uint64_t v148 = 0x40000000;
                  v149 = ___ZL38SIPommesSpotlightSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke;
                  v150 = &unk_1E63411D0;
                  v156 = &v113;
                  uint64_t v157 = a7;
                  uint64_t v158 = a7 + 4;
                  uint64_t v159 = a8;
                  uint64_t v160 = a9;
                  uint64_t v161 = v59;
                  v162 = v32;
                  char v166 = v33;
                  long long v155 = v90;
                  long long v154 = v89;
                  long long v153 = v88;
                  long long v151 = v86;
                  long long v152 = v87;
                  int v164 = a12;
                  int v165 = (int)v144;
                  char v167 = v142;
                  char v168 = v138;
                  double v163 = v60;
                  SIPommesDBOScoredTopicFieldIterator(a2, a3, (int *)buf, (int *)&v92, (int *)&v174, (int *)&v173, a4, a5, (uint64_t)&v147);
                  long long v172 = xmmword_1BDA82950;
                  long long v171 = xmmword_1BDA82960;
                  long long v170 = xmmword_1BDA82970;
                  long long v169 = xmmword_1BDA82980;
                  *(void *)(*((void *)&v113 + 1) + 24) = -1;
                  *(void *)&long long v116 = MEMORY[0x1E4F143A8];
                  *((void *)&v116 + 1) = 0x40000000;
                  uint64_t v117 = (uint64_t)___ZL38SIPommesSpotlightSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke_2;
                  uint64_t v118 = (uint64_t)&unk_1E63411F8;
                  long long v124 = &v113;
                  uint64_t v125 = a7;
                  uint64_t v126 = a7 + 4;
                  uint64_t v127 = a8;
                  uint64_t v128 = a9;
                  uint64_t v129 = v59;
                  v130 = v32;
                  char v134 = v33;
                  long long v121 = v88;
                  long long v122 = v89;
                  long long v123 = v90;
                  long long v119 = v86;
                  long long v120 = v87;
                  int v132 = a12;
                  int v133 = (int)v144;
                  char v135 = v142;
                  char v136 = v138;
                  double v131 = v60;
                  SIPommesDBOScoredTopicFieldIterator(a2, a3, (int *)&v172, (int *)&v171, (int *)&v170, (int *)&v169, a4, a5, (uint64_t)&v116);
                }
                LODWORD(v171) = 0;
                long long v174 = xmmword_1BDA82820;
                SIPommesDBOGetIntValue(a2, a3, (int *)&v174, a4, a5, &v171);
                if ((int)v171 >= 8)
                {
                  *(_OWORD *)buf = xmmword_1BDA82830;
                  long long v173 = xmmword_1BDA82840;
                  *(void *)(*((void *)&v113 + 1) + 24) = -1;
                  *(void *)&long long v92 = MEMORY[0x1E4F143A8];
                  *((void *)&v92 + 1) = 0x40000000;
                  uint64_t v93 = (uint64_t)___ZL38SIPommesSpotlightSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke_3;
                  uint64_t v94 = (uint64_t)&unk_1E6341220;
                  unint64_t v100 = &v113;
                  uint64_t v101 = a7;
                  uint64_t v102 = a7 + 4;
                  uint64_t v103 = a8;
                  uint64_t v104 = a9;
                  uint64_t v105 = v59;
                  int v106 = v32;
                  char v110 = v33;
                  long long v97 = v88;
                  long long v98 = v89;
                  long long v99 = v90;
                  long long v95 = v86;
                  long long v96 = v87;
                  int v108 = a12;
                  int v109 = (int)v144;
                  char v111 = v142;
                  char v112 = v138;
                  double v107 = v60;
                  SIPommesDBOScoredTopicFieldIterator(a2, a3, (int *)buf, (int *)&v173, 0, 0, a4, a5, (uint64_t)&v92);
                }
                long long v173 = xmmword_1BDA82850;
                long long v172 = xmmword_1BDA82860;
                *(void *)(*((void *)&v113 + 1) + 24) = -1;
                *(void *)buf = MEMORY[0x1E4F143A8];
                *(void *)&buf[8] = 0x40000000;
                *(void *)&buf[16] = ___ZL38SIPommesSpotlightSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke_4;
                v176 = &unk_1E6341248;
                uint64_t v184 = a7;
                uint64_t v185 = a7 + 4;
                uint64_t v186 = a8;
                uint64_t v187 = a9;
                v188 = (const char *)v59;
                double v189 = *(double *)&v32;
                char v193 = v33;
                long long v179 = v88;
                long long v180 = v89;
                long long v181 = v90;
                long long v178 = v87;
                long long v177 = v86;
                int v191 = a12;
                int v192 = (int)v144;
                char v194 = v142;
                char v195 = v138;
                unint64_t v190 = *(void *)&v60;
                BOOL v196 = v34;
                uint64_t v183 = v31;
                v182 = &v113;
                SIPommesDBOScoredTopicFieldIterator(a2, a3, (int *)&v173, (int *)&v172, 0, 0, a4, a5, (uint64_t)buf);
                icu_ctx_release();
                long long v51 = &v113;
                goto LABEL_65;
              }
            }
            return;
          }
          char v33 = 0;
        }
        BOOL v34 = 1;
        goto LABEL_58;
      }
      char v33 = 0;
    }
    else
    {
      char v33 = 0;
      uint64_t v32 = 0;
    }
    BOOL v34 = 0;
    goto LABEL_58;
  }
  if ((v23 & 0x1000) == 0)
  {
    if (!v22)
    {
      long long v41 = a11[3];
      v79[2] = a11[2];
      v79[3] = v41;
      v79[4] = a11[4];
      long long v42 = a11[1];
      v79[0] = *a11;
      v79[1] = v42;
      v147 = a3;
      *(void *)&long long v116 = a6;
      *(void *)&long long v92 = a7;
      *(void *)&long long v113 = a8;
      *(void *)&long long v174 = a9;
      LODWORD(v170) = a12;
      if (a8 && a9)
      {
        *(void *)&long long v173 = 0;
        v44 = a14 && (std::string::size_type v43 = *a14, (*(void *)&v173 = v43) != 0) && strncmp("ja", v43, 2uLL) == 0;
        LOBYTE(v169) = v44;
        if (*(void *)(a9 + 16))
        {
          *(void *)&long long v172 = icu_search_context_create();
          if ((void)v172)
          {
            *(void *)&long long v171 = a7 + 4;
            int64x2_t v52 = operator new(0x60uLL);
            void *v52 = &unk_1F1811450;
            v52[1] = &v92;
            v52[2] = &v171;
            v52[3] = &v113;
            v52[4] = &v174;
            v52[5] = &v172;
            v52[6] = v79;
            v52[7] = &v147;
            v52[8] = &v170;
            v52[9] = &v116;
            v52[10] = &v173;
            v52[11] = &v169;
            v176 = v52;
            SIPommesDBOFieldIterator((uint64_t)&SIPommesPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,ci_rankingbits_s,unsigned int,char const*,char const**)::photosAttributes, 0x10u, a1, a2, a3, a4, a5, (uint64_t)buf);
            std::__function::__value_func<void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::~__value_func[abi:nn180100](buf);
            icu_ctx_release();
          }
        }
      }
      return;
    }
    if (v21) {
      return;
    }
    long long v24 = a11[3];
    v78[2] = a11[2];
    v78[3] = v24;
    v78[4] = a11[4];
    long long v25 = a11[1];
    v78[0] = *a11;
    v78[1] = v25;
    *(void *)&long long v113 = a3;
    *(void *)&long long v174 = a6;
    *(void *)&long long v173 = a7;
    *(void *)&long long v172 = a8;
    *(void *)&long long v171 = a9;
    *(void *)&long long v170 = a10;
    int v146 = a12;
    *(void *)&long long v169 = a15;
    char v145 = a16;
    if (a8 && a9)
    {
      int field = db_get_field(a2, (uint64_t)a3, "kMDItemContentURL", 0, 0);
      if (field == 2)
      {
        v144 = 0;
        BOOL v28 = a14 && (v27 = *a14, (v144 = v27) != 0) && strncmp("ja", v27, 2uLL) == 0;
        BOOL v143 = v28;
        if (*(void *)(a9 + 16))
        {
          uint64_t v142 = icu_search_context_create();
          if (v142)
          {
            BOOL v141 = strcmp(*(const char **)(a9 + 16), "*") == 0;
            uint64_t v148 = 0;
            v147 = 0;
            v149 = 0;
            long long v116 = 0uLL;
            uint64_t v117 = 0;
            int v140 = 0;
            __int16 v139 = 0;
            *(void *)&long long v92 = (*(double (**)(uint64_t, int *, __int16 *, char *))(a17 + 16))(a17, &v140, &v139, (char *)&v139 + 1);
            uint64_t v138 = a7 + 4;
            char v137 = 0;
            os_log_type_t v62 = operator new(0xA8uLL);
            *os_log_type_t v62 = &unk_1F1811408;
            v62[1] = &v147;
            v62[2] = &v171;
            v62[3] = &v173;
            v62[4] = &v138;
            v62[5] = &v172;
            v62[6] = &v170;
            v62[7] = &v142;
            v62[8] = v78;
            v62[9] = &v113;
            v62[10] = &v146;
            v62[11] = &v174;
            v62[12] = &v144;
            v62[13] = &v143;
            v62[14] = &v141;
            v62[15] = &v116;
            v62[16] = &v92;
            v62[17] = &v139;
            v62[18] = &v145;
            v62[19] = &v169;
            v62[20] = &v137;
            v176 = v62;
            SIPommesDBOFieldIterator((uint64_t)&SIPommesMailSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,unsigned long const*,ci_rankingbits_s,unsigned int,char const*,char const**,__CFArray const*,BOOL,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::mailAttributes, 6u, a1, a2, a3, a4, a5, (uint64_t)buf);
            std::__function::__value_func<void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::~__value_func[abi:nn180100](buf);
            icu_ctx_release();
            *(void *)&long long v92 = &v116;
            std::vector<_peopleMatchInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)&v92);
            *(void *)&long long v116 = &v147;
            std::vector<_peopleMatchInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)&v116);
          }
        }
      }
      else
      {
        int v53 = field;
        int v68 = *__error();
        v54 = _SILogForLogForCategory(14);
        os_log_type_t v55 = 2 * (dword_1E9FC90DC < 4);
        CFAllocatorRef v56 = v54;
        if (os_log_type_enabled(v54, v55))
        {
          uint64_t v57 = *a3;
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v53;
          *(_WORD *)&buf[8] = 2048;
          *(void *)&buf[10] = v57;
          _os_log_impl(&dword_1BD672000, v56, v55, "[Pommes_Suggestions]mail_debug: Skipping attachment. rc:%d for oid %lld.", buf, 0x12u);
        }
        *__error() = v68;
      }
    }
    if ((v23 & 0x4000) == 0) {
      return;
    }
    long long v75 = a11[2];
    long long v76 = a11[3];
    long long v77 = a11[4];
    long long v73 = *a11;
    long long v74 = a11[1];
    if (!a9 || !a8 || !*(void *)(a9 + 24)) {
      return;
    }
    if (a14)
    {
      CFDictionaryRef v63 = *a14;
      if (*a14)
      {
        BOOL v64 = strncmp("ja", *a14, 2uLL) == 0;
LABEL_79:
        if (*(void *)(a9 + 16))
        {
          uint64_t v65 = icu_search_context_create();
          if (v65)
          {
            uint64_t v66 = v65;
            LODWORD(v144) = 0;
            LOBYTE(v142) = 0;
            LOBYTE(v138) = 0;
            double v67 = (*(double (**)(uint64_t, const char **, uint64_t *, uint64_t *))(a17 + 16))(a17, &v144, &v138, &v142);
            *(void *)&long long v116 = 0;
            *((void *)&v116 + 1) = &v116;
            uint64_t v117 = 0x2000000000;
            uint64_t v118 = -1;
            long long v92 = xmmword_1BDA82910;
            long long v113 = xmmword_1BDA82920;
            long long v174 = xmmword_1BDA82930;
            long long v173 = xmmword_1BDA82940;
            *(void *)buf = MEMORY[0x1E4F143A8];
            *(void *)&buf[8] = 0x40000000;
            *(void *)&buf[16] = ___ZL42SIPommesSpotlightMailSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke;
            v176 = &unk_1E63412E8;
            v182 = &v116;
            uint64_t v183 = a7;
            uint64_t v184 = a7 + 4;
            uint64_t v185 = a8;
            uint64_t v186 = a9;
            uint64_t v187 = v66;
            v188 = v63;
            LOBYTE(v191) = v64;
            long long v181 = v77;
            long long v180 = v76;
            long long v179 = v75;
            long long v177 = v73;
            long long v178 = v74;
            unint64_t v190 = __PAIR64__(v144, a12);
            BYTE1(v191) = v142;
            BYTE2(v191) = v138;
            double v189 = v67;
            SIPommesDBOScoredTopicFieldIterator(a2, a3, (int *)&v92, (int *)&v113, (int *)&v174, (int *)&v173, a4, a5, (uint64_t)buf);
            long long v172 = xmmword_1BDA82950;
            long long v171 = xmmword_1BDA82960;
            long long v170 = xmmword_1BDA82970;
            long long v169 = xmmword_1BDA82980;
            *(void *)(*((void *)&v116 + 1) + 24) = -1;
            v147 = (uint64_t *)MEMORY[0x1E4F143A8];
            uint64_t v148 = 0x40000000;
            v149 = ___ZL42SIPommesSpotlightMailSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke_2;
            v150 = &unk_1E6341310;
            v156 = &v116;
            uint64_t v157 = a7;
            uint64_t v158 = a7 + 4;
            uint64_t v159 = a8;
            uint64_t v160 = a9;
            uint64_t v161 = v66;
            v162 = v63;
            char v166 = v64;
            long long v153 = v75;
            long long v154 = v76;
            long long v155 = v77;
            long long v152 = v74;
            long long v151 = v73;
            int v164 = a12;
            int v165 = (int)v144;
            char v167 = v142;
            char v168 = v138;
            double v163 = v67;
            SIPommesDBOScoredTopicFieldIterator(a2, a3, (int *)&v172, (int *)&v171, (int *)&v170, (int *)&v169, a4, a5, (uint64_t)&v147);
            icu_ctx_release();
            long long v51 = &v116;
LABEL_65:
            _Block_object_dispose(v51, 8);
            return;
          }
        }
        return;
      }
    }
    else
    {
      CFDictionaryRef v63 = 0;
    }
    BOOL v64 = 0;
    goto LABEL_79;
  }
  if (!v22)
  {
    long long v45 = a11[3];
    v85[2] = a11[2];
    v85[3] = v45;
    v85[4] = a11[4];
    long long v46 = a11[1];
    v85[0] = *a11;
    v85[1] = v46;
    SIPommesSpotlightPhotosSuggestionsProcessDBO(a1, a2, a3, a7, a8, a4, a5, a9, a14, a12, v85, a17);
    return;
  }
  long long v35 = a11[3];
  long long v82 = a11[2];
  long long v83 = v35;
  long long v84 = a11[4];
  long long v36 = a11[1];
  long long v80 = *a11;
  long long v81 = v36;
  if (a9 && a8 && *(void *)(a9 + 24))
  {
    if (a14)
    {
      uint64_t v37 = *a14;
      if (*a14)
      {
        BOOL v38 = strncmp("ja", *a14, 2uLL) == 0;
LABEL_41:
        if (*(void *)(a9 + 16))
        {
          uint64_t v47 = icu_search_context_create();
          if (v47)
          {
            uint64_t v48 = v47;
            LODWORD(v144) = 0;
            LOBYTE(v142) = 0;
            LOBYTE(v138) = 0;
            double v49 = (*(double (**)(uint64_t, const char **, uint64_t *, uint64_t *))(a17 + 16))(a17, &v144, &v138, &v142);
            int v50 = *(_DWORD *)(a7 + 8);
            *(void *)&long long v92 = 0;
            *((void *)&v92 + 1) = &v92;
            uint64_t v93 = 0x2000000000;
            uint64_t v94 = -1;
            if ((v50 & 0x4000) != 0)
            {
              long long v116 = xmmword_1BDA82870;
              long long v113 = xmmword_1BDA82880;
              long long v174 = xmmword_1BDA82890;
              long long v173 = xmmword_1BDA824C0;
              *(void *)buf = MEMORY[0x1E4F143A8];
              *(void *)&buf[8] = 0x40000000;
              *(void *)&buf[16] = ___ZL44SIPommesSpotlightSearchSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke;
              v176 = &unk_1E6341270;
              v182 = &v92;
              uint64_t v183 = a7;
              uint64_t v184 = a7 + 4;
              uint64_t v185 = a8;
              uint64_t v186 = a9;
              uint64_t v187 = v48;
              v188 = v37;
              LOBYTE(v191) = v38;
              long long v181 = v84;
              long long v180 = v83;
              long long v179 = v82;
              long long v177 = v80;
              long long v178 = v81;
              unint64_t v190 = __PAIR64__(v144, a12);
              BYTE1(v191) = v142;
              BYTE2(v191) = v138;
              double v189 = v49;
              SIPommesDBOScoredTopicFieldIterator(a2, a3, (int *)&v116, (int *)&v113, (int *)&v174, (int *)&v173, a4, a5, (uint64_t)buf);
              long long v172 = xmmword_1BDA828A0;
              long long v171 = xmmword_1BDA828B0;
              long long v170 = xmmword_1BDA828C0;
              long long v169 = xmmword_1BDA828D0;
              *(void *)(*((void *)&v92 + 1) + 24) = -1;
              v147 = (uint64_t *)MEMORY[0x1E4F143A8];
              uint64_t v148 = 0x40000000;
              v149 = ___ZL44SIPommesSpotlightSearchSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke_2;
              v150 = &unk_1E6341298;
              v156 = &v92;
              uint64_t v157 = a7;
              uint64_t v158 = a7 + 4;
              uint64_t v159 = a8;
              uint64_t v160 = a9;
              uint64_t v161 = v48;
              v162 = v37;
              char v166 = v38;
              long long v153 = v82;
              long long v154 = v83;
              long long v155 = v84;
              long long v152 = v81;
              long long v151 = v80;
              int v164 = a12;
              int v165 = (int)v144;
              char v167 = v142;
              char v168 = v138;
              double v163 = v49;
              SIPommesDBOScoredTopicFieldIterator(a2, a3, (int *)&v172, (int *)&v171, (int *)&v170, (int *)&v169, a4, a5, (uint64_t)&v147);
            }
            LODWORD(v172) = 0;
            long long v113 = xmmword_1BDA828E0;
            SIPommesDBOGetIntValue(a2, a3, (int *)&v113, a4, a5, &v172);
            if ((int)v172 >= 8)
            {
              long long v174 = xmmword_1BDA828F0;
              long long v173 = xmmword_1BDA82900;
              *(void *)(*((void *)&v92 + 1) + 24) = -1;
              *(void *)&long long v116 = MEMORY[0x1E4F143A8];
              *((void *)&v116 + 1) = 0x40000000;
              uint64_t v117 = (uint64_t)___ZL44SIPommesSpotlightSearchSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke_3;
              uint64_t v118 = (uint64_t)&unk_1E63412C0;
              long long v124 = &v92;
              uint64_t v125 = a7;
              uint64_t v126 = a7 + 4;
              uint64_t v127 = a8;
              uint64_t v128 = a9;
              uint64_t v129 = v48;
              v130 = v37;
              char v134 = v38;
              long long v121 = v82;
              long long v122 = v83;
              long long v123 = v84;
              long long v119 = v80;
              long long v120 = v81;
              int v132 = a12;
              int v133 = (int)v144;
              char v135 = v142;
              char v136 = v138;
              double v131 = v49;
              SIPommesDBOScoredTopicFieldIterator(a2, a3, (int *)&v174, (int *)&v173, 0, 0, a4, a5, (uint64_t)&v116);
            }
            icu_ctx_release();
            long long v51 = &v92;
            goto LABEL_65;
          }
        }
        return;
      }
    }
    else
    {
      uint64_t v37 = 0;
    }
    BOOL v38 = 0;
    goto LABEL_41;
  }
}

void SIPommesSpotlightPhotosSuggestionsProcessDBO(const void *a1, int *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, const char **a9, int a10, long long *a11, uint64_t a12)
{
  uint64_t v130 = *MEMORY[0x1E4F143B8];
  uint64_t v124 = a5;
  uint64_t v125 = a4;
  uint64_t v123 = a8;
  if (a8)
  {
    uint64_t v14 = *(void *)(a8 + 24);
    uint64_t v122 = v14;
    if (a5)
    {
      if (v14)
      {
        BOOL v21 = (char)a9;
        long long v121 = 0;
        int v60 = a10;
        if (a9)
        {
          long long v121 = *a9;
          int v22 = v121;
          BOOL v21 = v121 && strncmp("ja", v121, 2uLL) == 0;
        }
        else
        {
          int v22 = 0;
        }
        BOOL v59 = v21;
        BOOL v120 = v21;
        if (*(void *)(a8 + 16))
        {
          uint64_t v23 = icu_search_context_create();
          uint64_t v119 = v23;
          if (v23)
          {
            uint64_t v55 = v23;
            CFAllocatorRef v56 = a11;
            int v118 = 0;
            __int16 v117 = 0;
            double v24 = (*(double (**)(uint64_t, int *, __int16 *, char *))(a12 + 16))(a12, &v118, &v117, (char *)&v117 + 1);
            double v116 = v24;
            uint64_t v115 = a4 + 4;
            int v114 = 0;
            uint64_t v57 = a1;
            uint64_t v58 = a2;
            if (a7 <= 18)
            {
              int v51 = *__error();
              long long v25 = _SILogForLogForCategory(14);
              os_log_type_t v26 = 2 * (dword_1E9FC90DC < 4);
              if (os_log_type_enabled(v25, v26))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = 19;
                LOWORD(v128) = 1024;
                *(_DWORD *)((char *)&v128 + 2) = a7;
                _os_log_impl(&dword_1BD672000, v25, v26, "%d index greater than fetched attribute count %d", buf, 0xEu);
              }
              uint64_t v52 = a6;
              *__error() = v51;
              uint64_t v113 = 0;
              int v27 = 0;
              goto LABEL_25;
            }
            BOOL v28 = *(int **)(a6 + 152);
            if (v28)
            {
              v111[0] = 0;
              *(void *)&long long v110 = 0;
              if (db_get_field_by_id(a2, (uint64_t)a3, v28, (unint64_t *)&v110, v111)
                || *(_WORD *)v110 != 9)
              {
                int v53 = *__error();
                long long v29 = _SILogForLogForCategory(14);
                os_log_type_t v30 = 2 * (dword_1E9FC90DC < 4);
                uint64_t v31 = v29;
                if (os_log_type_enabled(v29, v30))
                {
                  uint64_t v32 = *a3;
                  *(_DWORD *)buf = 67109376;
                  *(_DWORD *)&uint8_t buf[4] = 19;
                  LOWORD(v128) = 2048;
                  *(void *)((char *)&v128 + 2) = v32;
                  _os_log_impl(&dword_1BD672000, v31, v30, "[Pommes_Suggestions]debug: Cannot get/process attribute %d for oid %lld.", buf, 0x12u);
                }
                *__error() = v53;
                int v27 = 0;
                a2 = v58;
              }
              else
              {
                int v27 = *(_DWORD *)v111[0];
                int v114 = *(_DWORD *)v111[0];
              }
            }
            else
            {
              int v27 = 0;
            }
            uint64_t v113 = 0;
            if (a7 <= 0x13)
            {
              uint64_t v52 = a6;
LABEL_25:
              int v33 = *__error();
              BOOL v34 = _SILogForLogForCategory(14);
              os_log_type_t v35 = 2 * (dword_1E9FC90DC < 4);
              if (os_log_type_enabled(v34, v35))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = 20;
                LOWORD(v128) = 1024;
                *(_DWORD *)((char *)&v128 + 2) = a7;
                _os_log_impl(&dword_1BD672000, v34, v35, "%d index greater than fetched attribute count %d", buf, 0xEu);
              }
              *__error() = v33;
              uint64_t v36 = 0;
              a6 = v52;
              goto LABEL_36;
            }
            uint64_t v37 = *(int **)(a6 + 160);
            if (v37)
            {
              v111[0] = 0;
              *(void *)&long long v110 = 0;
              if (!db_get_field_by_id(a2, (uint64_t)a3, v37, (unint64_t *)&v110, v111)
                && *(_WORD *)v110 == 10)
              {
                uint64_t v36 = *(void *)v111[0];
                uint64_t v113 = *(void *)v111[0];
LABEL_36:
                *(void *)buf = 0;
                *(void *)&long long v128 = buf;
                *((void *)&v128 + 1) = 0x2000000000;
                uint64_t v129 = -1;
                v111[0] = 0;
                v111[1] = (unint64_t)v111;
                v111[2] = 0x2000000000;
                char v112 = 0;
                long long v109 = xmmword_1BDA827F0;
                long long v110 = xmmword_1BDA827E0;
                long long v107 = xmmword_1BDA82810;
                long long v108 = xmmword_1BDA82800;
                v84[0] = MEMORY[0x1E4F143A8];
                v84[1] = 0x40000000;
                v84[2] = ___ZL44SIPommesSpotlightPhotosSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke;
                v84[3] = &unk_1E6341180;
                uint64_t v92 = v36;
                int v101 = v27;
                long long v90 = buf;
                int v91 = v111;
                uint64_t v93 = v14;
                uint64_t v94 = a4;
                uint64_t v95 = a4 + 4;
                uint64_t v96 = a5;
                uint64_t v97 = a8;
                uint64_t v98 = v55;
                long long v99 = v22;
                BOOL v104 = v59;
                long long v42 = *v56;
                long long v43 = v56[1];
                long long v44 = v56[4];
                long long v88 = v56[3];
                long long v89 = v44;
                long long v45 = v56[2];
                long long v86 = v43;
                long long v87 = v45;
                long long v85 = v42;
                int v102 = v60;
                int v103 = v118;
                char v105 = HIBYTE(v117);
                char v106 = v117;
                double v100 = v24;
                SIPommesDBOScoredTopicFieldIterator(v58, a3, (int *)&v110, (int *)&v109, (int *)&v108, (int *)&v107, a6, a7, (uint64_t)v84);
                long long v46 = operator new(0x88uLL);
                void *v46 = &unk_1F1811498;
                v46[1] = &v122;
                v46[2] = &v113;
                v46[3] = &v114;
                v46[4] = &v125;
                v46[5] = &v115;
                v46[6] = &v124;
                v46[7] = &v123;
                v46[8] = &v119;
                v46[9] = &v121;
                v46[10] = &v120;
                v46[11] = v56;
                v46[12] = &a10;
                v46[13] = &v118;
                v46[14] = (char *)&v117 + 1;
                v46[15] = &v117;
                v46[16] = &v116;
                v126[3] = v46;
                SIPommesDBOFieldIterator((uint64_t)"\n", 8u, v57, v58, a3, a6, a7, (uint64_t)v126);
                std::__function::__value_func<void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::~__value_func[abi:nn180100](v126);
                int v83 = 0;
                long long v82 = xmmword_1BDA82820;
                SIPommesDBOGetIntValue(v58, a3, (int *)&v82, a6, a7, &v83);
                if (v83 >= 8)
                {
                  long long v80 = xmmword_1BDA82840;
                  long long v81 = xmmword_1BDA82830;
                  *(void *)(v128 + 24) = -1;
                  v61[0] = MEMORY[0x1E4F143A8];
                  v61[1] = 0x40000000;
                  v61[2] = ___ZL44SIPommesSpotlightPhotosSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke_2;
                  v61[3] = &unk_1E63411A8;
                  double v67 = buf;
                  uint64_t v68 = v125;
                  uint64_t v69 = v115;
                  uint64_t v70 = v124;
                  uint64_t v71 = v123;
                  uint64_t v72 = v119;
                  long long v73 = v121;
                  BOOL v77 = v120;
                  long long v47 = *v56;
                  long long v48 = v56[1];
                  long long v49 = v56[4];
                  long long v65 = v56[3];
                  long long v66 = v49;
                  long long v50 = v56[2];
                  long long v63 = v48;
                  long long v64 = v50;
                  long long v62 = v47;
                  int v75 = a10;
                  int v76 = v118;
                  char v78 = HIBYTE(v117);
                  char v79 = v117;
                  double v74 = v116;
                  SIPommesDBOScoredTopicFieldIterator(v58, a3, (int *)&v81, (int *)&v80, 0, 0, a6, a7, (uint64_t)v61);
                }
                icu_ctx_release();
                _Block_object_dispose(v111, 8);
                _Block_object_dispose(buf, 8);
                return;
              }
              int v54 = *__error();
              BOOL v38 = _SILogForLogForCategory(14);
              os_log_type_t v39 = 2 * (dword_1E9FC90DC < 4);
              long long v40 = v38;
              if (os_log_type_enabled(v38, v39))
              {
                uint64_t v41 = *a3;
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = 20;
                LOWORD(v128) = 2048;
                *(void *)((char *)&v128 + 2) = v41;
                _os_log_impl(&dword_1BD672000, v40, v39, "[Pommes_Suggestions]debug: Cannot get/process attribute %d for oid %lld.", buf, 0x12u);
              }
              *__error() = v54;
            }
            uint64_t v36 = 0;
            goto LABEL_36;
          }
        }
      }
    }
  }
}

uint64_t ___ZL38SIPommesSpotlightSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6 = *(void *)(*(void *)(result + 112) + 8);
  unint64_t v7 = *(void *)(v6 + 24);
  if (v7 != -1 && v7 >= a6)
  {
    if (a5)
    {
      uint64_t v11 = *(void *)(result + 128);
      uint64_t v12 = *(void *)(result + 120) + 264;
      uint64_t v13 = *(void *)(result + 136);
      uint64_t v14 = *(void *)(result + 144);
      uint64_t v15 = *(void *)(result + 152);
      uint64_t v16 = *(void *)(result + 160);
      char v17 = *(unsigned char *)(result + 184);
      long long v18 = *(_OWORD *)(result + 80);
      v20[2] = *(_OWORD *)(result + 64);
      v20[3] = v18;
      v20[4] = *(_OWORD *)(result + 96);
      long long v19 = *(_OWORD *)(result + 48);
      v20[0] = *(_OWORD *)(result + 32);
      v20[1] = v19;
      return _SIPommesSuggestionsProcessTopicAttribute(v12, v11, v13, v14, v15, a4, a5, 0, 0, v16, v17, 0, 21, v20, *(_DWORD *)(result + 180), *(_WORD *)(result + 185), HIBYTE(*(_WORD *)(result + 185)));
    }
  }
  else
  {
    *(void *)(v6 + 24) = a6;
  }
  return result;
}

int *SIPommesDBOScoredTopicFieldIterator(int *result, uint64_t *a2, int *a3, int *a4, int *a5, int *a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    return result;
  }
  uint64_t v11 = *a3;
  if ((int)v11 > a8)
  {
    int v12 = *__error();
    uint64_t v13 = _SILogForLogForCategory(14);
    os_log_type_t v14 = 2 * (dword_1E9FC90DC < 4);
    if (os_log_type_enabled(v13, v14))
    {
      int v15 = *a3;
      *(_DWORD *)buf = 67109376;
      int v74 = v15;
      __int16 v75 = 1024;
      LODWORD(v76) = a8;
LABEL_10:
      _os_log_impl(&dword_1BD672000, v13, v14, "%d index greater than fetched attribute count %d", buf, 0xEu);
      goto LABEL_11;
    }
    goto LABEL_11;
  }
  if (!a4) {
    return result;
  }
  long long v18 = *(int **)(a7 + 8 * v11);
  if (!v18) {
    return result;
  }
  uint64_t v19 = *a4;
  if ((int)v19 > a8)
  {
    int v12 = *__error();
    uint64_t v13 = _SILogForLogForCategory(14);
    os_log_type_t v14 = 2 * (dword_1E9FC90DC < 4);
    if (os_log_type_enabled(v13, v14))
    {
      int v20 = *a4;
      *(_DWORD *)buf = 67109376;
      int v74 = v20;
      __int16 v75 = 1024;
      LODWORD(v76) = a8;
      goto LABEL_10;
    }
LABEL_11:
    uint64_t result = __error();
    char *result = v12;
    return result;
  }
  if (!*(void *)(a7 + 8 * v19)) {
    return result;
  }
  double v24 = result;
  if (a5)
  {
    uint64_t v25 = *a5;
    if ((int)v25 > a8)
    {
      int v12 = *__error();
      uint64_t v13 = _SILogForLogForCategory(14);
      os_log_type_t v14 = 2 * (dword_1E9FC90DC < 4);
      if (!os_log_type_enabled(v13, v14)) {
        goto LABEL_11;
      }
      int v26 = *a5;
      *(_DWORD *)buf = 67109376;
      int v74 = v26;
      __int16 v75 = 1024;
      LODWORD(v76) = a8;
      goto LABEL_10;
    }
    if (!*(void *)(a7 + 8 * v25)) {
      return result;
    }
  }
  if (a6)
  {
    uint64_t v27 = *a6;
    if ((int)v27 > a8)
    {
      int v28 = *__error();
      long long v29 = _SILogForLogForCategory(14);
      os_log_type_t v30 = 2 * (dword_1E9FC90DC < 4);
      if (!os_log_type_enabled(v29, v30))
      {
LABEL_24:
        uint64_t result = __error();
        char *result = v28;
        return result;
      }
      int v31 = *a6;
      *(_DWORD *)buf = 67109376;
      int v74 = v31;
      __int16 v75 = 1024;
      LODWORD(v76) = a8;
      uint64_t v32 = "%d index greater than fetched attribute count %d";
      int v33 = v29;
      os_log_type_t v34 = v30;
      uint32_t v35 = 14;
LABEL_23:
      _os_log_impl(&dword_1BD672000, v33, v34, v32, buf, v35);
      goto LABEL_24;
    }
    if (!*(void *)(a7 + 8 * v27)) {
      return result;
    }
  }
  uint64_t v71 = 0;
  __s = 0;
  uint64_t v69 = 0;
  unint64_t v70 = 0;
  double v67 = 0;
  uint64_t v68 = 0;
  long long v65 = 0;
  long long v66 = 0;
  if (db_get_field_by_id(result, (uint64_t)a2, v18, (unint64_t *)&v71, (unint64_t *)&__s)
    || a3[2] != *v71)
  {
    int v40 = *__error();
    uint64_t v41 = _SILogForLogForCategory(14);
    os_log_type_t v42 = 2 * (dword_1E9FC90DC < 4);
    if (!os_log_type_enabled(v41, v42))
    {
LABEL_52:
      uint64_t result = __error();
      char *result = v40;
      return result;
    }
    int v43 = *a3;
    uint64_t v44 = *a2;
    *(_DWORD *)buf = 67109376;
    int v74 = v43;
    __int16 v75 = 2048;
    uint64_t v76 = v44;
LABEL_51:
    _os_log_impl(&dword_1BD672000, v41, v42, "[Pommes_Suggestions]debug: Cannot get/process attribute %d for oid %lld.", buf, 0x12u);
    goto LABEL_52;
  }
  uint64_t result = (int *)db_get_field_by_id(v24, (uint64_t)a2, *(int **)(a7 + 8 * *a4), (unint64_t *)&v69, &v70);
  if (result || a4[2] != *v69)
  {
    int v40 = *__error();
    uint64_t v41 = _SILogForLogForCategory(14);
    os_log_type_t v42 = 2 * (dword_1E9FC90DC < 4);
    if (!os_log_type_enabled(v41, v42)) {
      goto LABEL_52;
    }
    int v45 = *a4;
    uint64_t v46 = *a2;
    *(_DWORD *)buf = 67109376;
    int v74 = v45;
    __int16 v75 = 2048;
    uint64_t v76 = v46;
    goto LABEL_51;
  }
  if (a5)
  {
    uint64_t result = (int *)db_get_field_by_id(v24, (uint64_t)a2, *(int **)(a7 + 8 * *a5), (unint64_t *)&v67, (unint64_t *)&v68);
    if (result || a5[2] != *v67)
    {
      int v40 = *__error();
      uint64_t v41 = _SILogForLogForCategory(14);
      os_log_type_t v42 = 2 * (dword_1E9FC90DC < 4);
      if (!os_log_type_enabled(v41, v42)) {
        goto LABEL_52;
      }
      int v47 = *a5;
      uint64_t v48 = *a2;
      *(_DWORD *)buf = 67109376;
      int v74 = v47;
      __int16 v75 = 2048;
      uint64_t v76 = v48;
      goto LABEL_51;
    }
  }
  if (a6)
  {
    uint64_t result = (int *)db_get_field_by_id(v24, (uint64_t)a2, *(int **)(a7 + 8 * *a6), (unint64_t *)&v65, (unint64_t *)&v66);
    if (result || a6[2] != *v65)
    {
      int v28 = *__error();
      long long v49 = _SILogForLogForCategory(14);
      os_log_type_t v50 = 2 * (dword_1E9FC90DC < 4);
      if (!os_log_type_enabled(v49, v50)) {
        goto LABEL_24;
      }
      int v51 = *a6;
      uint64_t v52 = *a2;
      *(_DWORD *)buf = 67109376;
      int v74 = v51;
      __int16 v75 = 2048;
      uint64_t v76 = v52;
      uint64_t v32 = "[Pommes_Suggestions]debug: Cannot get/process attribute %d for oid %lld.";
      int v33 = v49;
      os_log_type_t v34 = v50;
      uint32_t v35 = 18;
      goto LABEL_23;
    }
  }
  if (v71)
  {
    if ((v71[1] & 0x20) != 0)
    {
      if (v69)
      {
        if ((v69[1] & 0x20) != 0)
        {
          uint64_t v36 = v68;
          if (!v68 || (v67[1] & 0x20) != 0)
          {
            uint64_t v37 = v66;
            if (!v66 || (v65[1] & 0x20) != 0)
            {
              buf[0] = 0;
              uint64_t v38 = *((unsigned int *)v71 + 2);
              if (v38)
              {
                if (*v71 == 11 && *v69 == 10)
                {
                  os_log_type_t v39 = (int *)__s;
                  unint64_t v63 = v70;
                  if (v68) {
                    unint64_t v62 = (unint64_t)&v68[*((unsigned int *)v67 + 2)];
                  }
                  else {
                    unint64_t v62 = 0;
                  }
                  uint64_t v53 = 0;
                  long long v64 = &__s[v38];
                  while (1)
                  {
                    if (v39 >= (int *)v64) {
                      return result;
                    }
                    double v54 = *(double *)(v63 + 8 * v53);
                    if ((v71[1] & 0x10) != 0)
                    {
                      uint64_t result = (int *)db_get_string_for_id_locked(v24, *v39);
                      if (!result) {
                        return result;
                      }
                      uint64_t v57 = result;
                      size_t v55 = strlen((const char *)result);
                      uint64_t v56 = 4;
                    }
                    else
                    {
                      size_t v55 = strlen((const char *)v39);
                      uint64_t v56 = v55 + 1;
                      uint64_t v57 = v39;
                    }
                    uint64_t result = (int *)(*(uint64_t (**)(uint64_t, int *, size_t, void, void, uint64_t, uint8_t *, double))(a9 + 16))(a9, v57, v55, 0, 0, v53, buf, v54);
                    int v58 = buf[0];
                    if (buf[0]) {
                      return result;
                    }
                    if (v36 && v37 && (unint64_t)v36 < v62) {
                      break;
                    }
LABEL_77:
                    os_log_type_t v39 = (int *)((char *)v39 + v56);
                    ++v53;
                    if (v58) {
                      return result;
                    }
                  }
                  if (*v37 >= 1)
                  {
                    if ((v67[1] & 0x10) == 0)
                    {
                      size_t v59 = strlen(v36);
                      uint64_t v60 = v59 + 1;
                      int v61 = (void *)v36;
LABEL_75:
                      v36 += v60;
                      uint64_t result = (int *)(*(uint64_t (**)(uint64_t, int *, size_t, void *, size_t, uint64_t, uint8_t *, double))(a9 + 16))(a9, v57, v55, v61, v59, v53, buf, v54);
                      goto LABEL_76;
                    }
                    uint64_t result = (int *)db_get_string_for_id_locked(v24, *(_DWORD *)v36);
                    if (result)
                    {
                      int v61 = result;
                      size_t v59 = strlen((const char *)result);
                      uint64_t v60 = 4;
                      goto LABEL_75;
                    }
                  }
LABEL_76:
                  ++v37;
                  int v58 = buf[0];
                  goto LABEL_77;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ___ZL38SIPommesSpotlightSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke_2(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6 = *(void *)(*(void *)(result + 112) + 8);
  unint64_t v7 = *(void *)(v6 + 24);
  if (v7 != -1 && v7 >= a6)
  {
    if (a5)
    {
      uint64_t v11 = *(void *)(result + 128);
      uint64_t v12 = *(void *)(result + 120) + 264;
      uint64_t v13 = *(void *)(result + 136);
      uint64_t v14 = *(void *)(result + 144);
      uint64_t v15 = *(void *)(result + 152);
      uint64_t v16 = *(void *)(result + 160);
      char v17 = *(unsigned char *)(result + 184);
      long long v18 = *(_OWORD *)(result + 80);
      v20[2] = *(_OWORD *)(result + 64);
      v20[3] = v18;
      v20[4] = *(_OWORD *)(result + 96);
      long long v19 = *(_OWORD *)(result + 48);
      v20[0] = *(_OWORD *)(result + 32);
      v20[1] = v19;
      return _SIPommesSuggestionsProcessTopicAttribute(v12, v11, v13, v14, v15, a4, a5, 0, 0, v16, v17, 0, 22, v20, *(_DWORD *)(result + 180), *(_WORD *)(result + 185), HIBYTE(*(_WORD *)(result + 185)));
    }
  }
  else
  {
    *(void *)(v6 + 24) = a6;
  }
  return result;
}

int *SIPommesDBOGetIntValue(int *result, uint64_t *a2, int *a3, uint64_t a4, int a5, _DWORD *a6)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!a3 || (uint64_t v8 = *a3, (int)v8 > a5))
  {
    int v9 = *__error();
    unint64_t v10 = _SILogForLogForCategory(14);
    os_log_type_t v11 = 2 * (dword_1E9FC90DC < 4);
    if (!os_log_type_enabled(v10, v11))
    {
LABEL_6:
      uint64_t result = __error();
      char *result = v9;
      return result;
    }
    int v12 = *a3;
    *(_DWORD *)buf = 67109376;
    int v27 = v12;
    __int16 v28 = 1024;
    LODWORD(v29) = a5;
    uint64_t v13 = "%d index greater than fetched attribute count %d";
    uint64_t v14 = v10;
    os_log_type_t v15 = v11;
    uint32_t v16 = 14;
LABEL_5:
    _os_log_impl(&dword_1BD672000, v14, v15, v13, buf, v16);
    goto LABEL_6;
  }
  char v17 = *(int **)(a4 + 8 * v8);
  if (v17)
  {
    double v24 = 0;
    uint64_t v25 = 0;
    uint64_t result = (int *)db_get_field_by_id(result, (uint64_t)a2, v17, (unint64_t *)&v24, (unint64_t *)&v25);
    if (result || *v24 != 7)
    {
      int v9 = *__error();
      int v20 = _SILogForLogForCategory(14);
      os_log_type_t v21 = 2 * (dword_1E9FC90DC < 4);
      if (!os_log_type_enabled(v20, v21)) {
        goto LABEL_6;
      }
      int v22 = *a3;
      uint64_t v23 = *a2;
      *(_DWORD *)buf = 67109376;
      int v27 = v22;
      __int16 v28 = 2048;
      uint64_t v29 = v23;
      uint64_t v13 = "[Pommes_Suggestions]debug: Cannot get/process attribute %d for oid %lld.";
      uint64_t v14 = v20;
      os_log_type_t v15 = v21;
      uint32_t v16 = 18;
      goto LABEL_5;
    }
    if (a6) {
      *a6 = *v25;
    }
  }
  return result;
}

uint64_t ___ZL38SIPommesSpotlightSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke_3(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6 = *(void *)(*(void *)(result + 112) + 8);
  unint64_t v7 = *(void *)(v6 + 24);
  if (v7 == -1 || v7 < a6)
  {
    *(void *)(v6 + 24) = a6;
    uint64_t v12 = *(void *)(result + 128);
    uint64_t v13 = *(void *)(result + 120) + 304;
    uint64_t v14 = *(void *)(result + 136);
    uint64_t v15 = *(void *)(result + 144);
    uint64_t v16 = *(void *)(result + 152);
    uint64_t v17 = *(void *)(result + 160);
    char v18 = *(unsigned char *)(result + 184);
    long long v19 = *(_OWORD *)(result + 80);
    v21[2] = *(_OWORD *)(result + 64);
    v21[3] = v19;
    v21[4] = *(_OWORD *)(result + 96);
    long long v20 = *(_OWORD *)(result + 48);
    v21[0] = *(_OWORD *)(result + 32);
    v21[1] = v20;
    return _SIPommesSuggestionsProcessTopicAttribute(v13, v12, v14, v15, v16, a2, a3, a4, a5, v17, v18, 0, 23, v21, *(_DWORD *)(result + 180), *(_WORD *)(result + 185), HIBYTE(*(_WORD *)(result + 185)));
  }
  return result;
}

unint64_t *___ZL38SIPommesSpotlightSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke_4(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  if (!a4)
  {
    uint64_t v24 = v7;
    uint64_t v25 = v8;
    os_log_type_t v11 = result;
    if ((double)(int)a3 * 0.3 <= (double)result[15])
    {
      uint64_t v13 = result[17];
      uint64_t v14 = result[16] + 224;
      uint64_t v15 = v11[18];
      uint64_t v16 = v11[19];
      uint64_t v17 = v11[20];
      uint64_t v18 = v11[21];
      char v19 = *((unsigned char *)v11 + 192);
      long long v20 = *((_OWORD *)v11 + 5);
      v23[2] = *((_OWORD *)v11 + 4);
      v23[3] = v20;
      v23[4] = *((_OWORD *)v11 + 6);
      long long v21 = *((_OWORD *)v11 + 3);
      v23[0] = *((_OWORD *)v11 + 2);
      v23[1] = v21;
      uint64_t result = (unint64_t *)_SIPommesSuggestionsProcessTopicAttribute(v14, v13, v15, v16, v17, a2, a3, 0, a5, v18, v19, 0, 8, v23, *((_DWORD *)v11 + 47), *(_WORD *)((char *)v11 + 193), HIBYTE(*(_WORD *)((char *)v11 + 193)));
    }
    if (!*((unsigned char *)v11 + 195))
    {
      unint64_t v22 = v11[15];
      if (v22 <= 5 && v22 == *(void *)(*(void *)(v11[14] + 8) + 24) + 1) {
        *a7 = 1;
      }
    }
  }
  return result;
}

uint64_t ___ZL44SIPommesSpotlightSearchSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6 = *(void *)(*(void *)(result + 112) + 8);
  unint64_t v7 = *(void *)(v6 + 24);
  if (v7 != -1 && v7 >= a6)
  {
    if (a5)
    {
      uint64_t v11 = *(void *)(result + 128);
      uint64_t v12 = *(void *)(result + 120) + 264;
      uint64_t v13 = *(void *)(result + 136);
      uint64_t v14 = *(void *)(result + 144);
      uint64_t v15 = *(void *)(result + 152);
      uint64_t v16 = *(void *)(result + 160);
      char v17 = *(unsigned char *)(result + 184);
      long long v18 = *(_OWORD *)(result + 80);
      v20[2] = *(_OWORD *)(result + 64);
      v20[3] = v18;
      v20[4] = *(_OWORD *)(result + 96);
      long long v19 = *(_OWORD *)(result + 48);
      v20[0] = *(_OWORD *)(result + 32);
      v20[1] = v19;
      return _SIPommesSuggestionsProcessTopicAttribute(v12, v11, v13, v14, v15, a4, a5, 0, 0, v16, v17, 0, 21, v20, *(_DWORD *)(result + 180), *(_WORD *)(result + 185), HIBYTE(*(_WORD *)(result + 185)));
    }
  }
  else
  {
    *(void *)(v6 + 24) = a6;
  }
  return result;
}

uint64_t ___ZL44SIPommesSpotlightSearchSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke_2(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6 = *(void *)(*(void *)(result + 112) + 8);
  unint64_t v7 = *(void *)(v6 + 24);
  if (v7 != -1 && v7 >= a6)
  {
    if (a5)
    {
      uint64_t v11 = *(void *)(result + 128);
      uint64_t v12 = *(void *)(result + 120) + 264;
      uint64_t v13 = *(void *)(result + 136);
      uint64_t v14 = *(void *)(result + 144);
      uint64_t v15 = *(void *)(result + 152);
      uint64_t v16 = *(void *)(result + 160);
      char v17 = *(unsigned char *)(result + 184);
      long long v18 = *(_OWORD *)(result + 80);
      v20[2] = *(_OWORD *)(result + 64);
      v20[3] = v18;
      v20[4] = *(_OWORD *)(result + 96);
      long long v19 = *(_OWORD *)(result + 48);
      v20[0] = *(_OWORD *)(result + 32);
      v20[1] = v19;
      return _SIPommesSuggestionsProcessTopicAttribute(v12, v11, v13, v14, v15, a4, a5, 0, 0, v16, v17, 0, 22, v20, *(_DWORD *)(result + 180), *(_WORD *)(result + 185), HIBYTE(*(_WORD *)(result + 185)));
    }
  }
  else
  {
    *(void *)(v6 + 24) = a6;
  }
  return result;
}

uint64_t ___ZL44SIPommesSpotlightSearchSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke_3(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6 = *(void *)(*(void *)(result + 112) + 8);
  unint64_t v7 = *(void *)(v6 + 24);
  if (v7 == -1 || v7 < a6)
  {
    *(void *)(v6 + 24) = a6;
    uint64_t v12 = *(void *)(result + 128);
    uint64_t v13 = *(void *)(result + 120) + 304;
    uint64_t v14 = *(void *)(result + 136);
    uint64_t v15 = *(void *)(result + 144);
    uint64_t v16 = *(void *)(result + 152);
    uint64_t v17 = *(void *)(result + 160);
    char v18 = *(unsigned char *)(result + 184);
    long long v19 = *(_OWORD *)(result + 80);
    v21[2] = *(_OWORD *)(result + 64);
    v21[3] = v19;
    v21[4] = *(_OWORD *)(result + 96);
    long long v20 = *(_OWORD *)(result + 48);
    v21[0] = *(_OWORD *)(result + 32);
    v21[1] = v20;
    return _SIPommesSuggestionsProcessTopicAttribute(v13, v12, v14, v15, v16, a2, a3, a4, a5, v17, v18, 0, 23, v21, *(_DWORD *)(result + 180), *(_WORD *)(result + 185), HIBYTE(*(_WORD *)(result + 185)));
  }
  return result;
}

void SIPommesDBOFieldIterator(uint64_t a1, unsigned int a2, const void *a3, int *a4, uint64_t *a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v72 = a4;
  uint64_t v73 = a8;
  __int16 v75 = a5;
  uint64_t v77 = a1;
  v69[1] = v69;
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  __s = 0;
  long long v80 = 0;
  bzero(v81, 0x3E8uLL);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v76 = a2;
  *(void *)&long long v14 = 67109376;
  long long v74 = v14;
  *(void *)&long long v14 = 134217984;
  long long v70 = v14;
  int v71 = a7;
  do
  {
    uint64_t v15 = (int *)(v77 + 16 * v12);
    int v16 = *v15;
    if (*v15 > a7)
    {
      int v17 = *__error();
      char v18 = _SILogForLogForCategory(14);
      os_log_type_t v19 = 2 * (dword_1E9FC90DC < 4);
      if (os_log_type_enabled(v18, v19))
      {
        *(_DWORD *)buf = v74;
        *(_DWORD *)int v83 = v16;
        *(_WORD *)&v83[4] = 1024;
        *(_DWORD *)&v83[6] = a7;
        _os_log_impl(&dword_1BD672000, v18, v19, "%d index greater than fetched attribute count %d", buf, 0xEu);
      }
      *__error() = v17;
      goto LABEL_62;
    }
    uint64_t v20 = v16;
    long long v21 = *(int **)(a6 + 8 * v16);
    if (!v21) {
      goto LABEL_62;
    }
    int v22 = v15[2];
    char v23 = *((unsigned char *)v15 + 12);
    if (a3 && (v15[1] & 1) != 0)
    {
      size_t v78 = 0;
      __s = (char *)v81;
      if (!doc_store_get_document(a3, *v75, (uint64_t)v81, (uint64_t)&v78))
      {
        if (v78)
        {
          int v41 = (char)v81[v78 - 1];
          if (v41 < 0)
          {
            if ((v41 + 62) > 0x32u)
            {
              if (v81[v78 - 1] <= 0xBFu)
              {
                unint64_t v57 = v81[v78 - 2];
                if ((v57 + 32) > 0x14u)
                {
                  if ((char)v57 <= -65)
                  {
                    uint8_t v64 = v81[v78 - 3];
                    if (v64 + 16) <= 4u && ((byte_1BDA8712A[v57 >> 4] >> (v64 & 7))) {
                      v78 -= 3;
                    }
                  }
                }
                else
                {
                  BOOL v56 = v57 > 0xEF;
                  int v58 = (char *)&byte_1BDA8712A[(unint64_t)v81[v78 - 1] >> 4];
                  char v59 = v57 & 7;
                  uint64_t v60 = &a00000000000000[v57 & 0xF];
                  int v61 = v81[v78 - 1] >> 5;
                  if (v56) {
                    LOBYTE(v61) = v59;
                  }
                  else {
                    int v58 = v60;
                  }
                  if ((*v58 >> v61)) {
                    v78 -= 2;
                  }
                }
              }
            }
            else
            {
              --v78;
            }
          }
        }
        int v65 = *__error();
        long long v66 = _SILogForLogForCategory(8);
        os_log_type_t v67 = 2 * (dword_1E9FC90C4 < 4);
        if (os_log_type_enabled(v66, v67))
        {
          uint64_t v68 = *v75;
          *(_DWORD *)buf = v70;
          *(void *)int v83 = v68;
          _os_log_impl(&dword_1BD672000, v66, v67, "Get snippet from doc store for oid %lld", buf, 0xCu);
        }
        *__error() = v65;
        size_t v26 = v78;
        int v47 = __s;
        uint64_t v46 = *(void *)(v73 + 24);
        goto LABEL_61;
      }
      long long v21 = *(int **)(a6 + 8 * v16);
    }
    if (db_get_field_by_id(v72, (uint64_t)v75, v21, (unint64_t *)&v80, (unint64_t *)&__s)
      || (uint64_t v24 = v80, v22 != *v80))
    {
      uint64_t v32 = a3;
      uint64_t v33 = a6;
      int v34 = *__error();
      uint32_t v35 = _SILogForLogForCategory(14);
      os_log_type_t v36 = 2 * (dword_1E9FC90DC < 4);
      if (!os_log_type_enabled(v35, v36))
      {
LABEL_22:
        *__error() = v34;
        if (v23) {
          std::function<void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::operator()(*(void *)(v73 + 24), (uint64_t)v13, 0, v16, 0);
        }
        a6 = v33;
        a3 = v32;
        a7 = v71;
        goto LABEL_62;
      }
      uint64_t v37 = *v75;
      *(_DWORD *)buf = v74;
      *(_DWORD *)int v83 = v16;
      *(_WORD *)&v83[4] = 2048;
      *(void *)&v83[6] = v37;
      uint64_t v38 = v35;
      os_log_type_t v39 = v36;
      int v40 = "[Pommes_Suggestions]debug: Cannot get/process attribute %d for oid %lld.";
LABEL_21:
      _os_log_impl(&dword_1BD672000, v38, v39, v40, buf, 0x12u);
      goto LABEL_22;
    }
    size_t v25 = strlen(__s);
    if (!v25)
    {
      uint64_t v32 = a3;
      uint64_t v33 = a6;
      int v34 = *__error();
      os_log_type_t v42 = _SILogForLogForCategory(14);
      os_log_type_t v43 = 2 * (dword_1E9FC90DC < 4);
      if (!os_log_type_enabled(v42, v43)) {
        goto LABEL_22;
      }
      uint64_t v44 = *v75;
      *(_DWORD *)buf = v74;
      *(_DWORD *)int v83 = v16;
      *(_WORD *)&v83[4] = 2048;
      *(void *)&v83[6] = v44;
      uint64_t v38 = v42;
      os_log_type_t v39 = v43;
      int v40 = "[Pommes_Suggestions]debug: Cannot get attribute %d for oid %lld.";
      goto LABEL_21;
    }
    size_t v26 = v25;
    if (v16 == 5)
    {
      size_t v27 = v25;
      int v28 = *__error();
      uint64_t v29 = _SILogForLogForCategory(8);
      os_log_type_t v30 = 2 * (dword_1E9FC90C4 < 4);
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = *v75;
        *(_DWORD *)buf = v70;
        *(void *)int v83 = v31;
        _os_log_impl(&dword_1BD672000, v29, v30, "Get snippet from SDB for oid %lld", buf, 0xCu);
      }
      *__error() = v28;
      uint64_t v13 = (int *)__s;
      uint64_t v24 = v80;
      size_t v26 = v27;
      if (!v80) {
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v13 = (int *)__s;
    }
    unsigned __int16 v45 = v24[1];
    if ((v45 & 0x20) == 0)
    {
      if ((v45 & 0x10) != 0)
      {
        string_for_id_locked = (const char *)db_get_string_for_id_locked(v72, *(_DWORD *)((char *)v24 + 13));
        if (!string_for_id_locked) {
          goto LABEL_62;
        }
        unint64_t v63 = (char *)string_for_id_locked;
        size_t v26 = strlen(string_for_id_locked);
        uint64_t v46 = *(void *)(v73 + 24);
        int v47 = v63;
      }
      else
      {
LABEL_34:
        uint64_t v46 = *(void *)(v73 + 24);
        int v47 = (char *)v13;
      }
LABEL_61:
      std::function<void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::operator()(v46, (uint64_t)v47, v26, v20, 0);
      goto LABEL_62;
    }
    uint64_t v48 = *((unsigned int *)v24 + 2);
    if (v48)
    {
      unint64_t v49 = 0;
      os_log_type_t v50 = (int *)((char *)v13 + v48);
      do
      {
        if ((v80[1] & 0x10) != 0)
        {
          uint64_t v53 = (const char *)db_get_string_for_id_locked(v72, *v13);
          if (!v53) {
            break;
          }
          uint64_t v54 = (uint64_t)v53;
          size_t v55 = strlen(v53);
          std::function<void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::operator()(*(void *)(v73 + 24), v54, v55, v20, v49);
          uint64_t v52 = 4;
        }
        else
        {
          size_t v51 = strlen((const char *)v13);
          std::function<void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::operator()(*(void *)(v73 + 24), (uint64_t)v13, v51, v20, v49);
          uint64_t v52 = v51 + 1;
        }
        uint64_t v13 = (int *)((char *)v13 + v52);
        if (v13 >= v50) {
          break;
        }
        BOOL v56 = v49++ > 0x63;
      }
      while (!v56);
    }
LABEL_62:
    ++v12;
  }
  while (v12 != v76);
}

void *std::__function::__value_func<void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::vector<_peopleMatchInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  char v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    size_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::allocator<_peopleMatchInfo>::destroy[abi:nn180100](v4);
      }
      while ((void *)v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t ___ZL42SIPommesSpotlightMailSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6 = *(void *)(*(void *)(result + 112) + 8);
  unint64_t v7 = *(void *)(v6 + 24);
  if (v7 != -1 && v7 >= a6)
  {
    if (a5)
    {
      uint64_t v11 = *(void *)(result + 128);
      uint64_t v12 = *(void *)(result + 120) + 264;
      uint64_t v13 = *(void *)(result + 136);
      uint64_t v14 = *(void *)(result + 144);
      uint64_t v15 = *(void *)(result + 152);
      uint64_t v16 = *(void *)(result + 160);
      char v17 = *(unsigned char *)(result + 184);
      long long v18 = *(_OWORD *)(result + 80);
      v20[2] = *(_OWORD *)(result + 64);
      v20[3] = v18;
      v20[4] = *(_OWORD *)(result + 96);
      long long v19 = *(_OWORD *)(result + 48);
      v20[0] = *(_OWORD *)(result + 32);
      v20[1] = v19;
      return _SIPommesSuggestionsProcessTopicAttribute(v12, v11, v13, v14, v15, a4, a5, 0, 0, v16, v17, 0, 21, v20, *(_DWORD *)(result + 180), *(_WORD *)(result + 185), HIBYTE(*(_WORD *)(result + 185)));
    }
  }
  else
  {
    *(void *)(v6 + 24) = a6;
  }
  return result;
}

uint64_t ___ZL42SIPommesSpotlightMailSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke_2(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6 = *(void *)(*(void *)(result + 112) + 8);
  unint64_t v7 = *(void *)(v6 + 24);
  if (v7 != -1 && v7 >= a6)
  {
    if (a5)
    {
      uint64_t v11 = *(void *)(result + 128);
      uint64_t v12 = *(void *)(result + 120) + 264;
      uint64_t v13 = *(void *)(result + 136);
      uint64_t v14 = *(void *)(result + 144);
      uint64_t v15 = *(void *)(result + 152);
      uint64_t v16 = *(void *)(result + 160);
      char v17 = *(unsigned char *)(result + 184);
      long long v18 = *(_OWORD *)(result + 80);
      v20[2] = *(_OWORD *)(result + 64);
      v20[3] = v18;
      v20[4] = *(_OWORD *)(result + 96);
      long long v19 = *(_OWORD *)(result + 48);
      v20[0] = *(_OWORD *)(result + 32);
      v20[1] = v19;
      return _SIPommesSuggestionsProcessTopicAttribute(v12, v11, v13, v14, v15, a4, a5, 0, 0, v16, v17, 0, 22, v20, *(_DWORD *)(result + 180), *(_WORD *)(result + 185), HIBYTE(*(_WORD *)(result + 185)));
    }
  }
  else
  {
    *(void *)(v6 + 24) = a6;
  }
  return result;
}

uint64_t _SIPommesSuggestionsProcessTopicAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char a12, int a13, _OWORD *a14, unsigned int a15, char a16, char a17)
{
  uint64_t v17 = MEMORY[0x1F4188790](a1);
  int32_t v25 = v23;
  size_t v26 = v22;
  uint64_t v27 = v20;
  float64_t v29 = v28;
  float64_t v31 = v30;
  uint64_t v32 = v18;
  uint64_t v33 = v17;
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  if (a12)
  {
    if (v23 && a9)
    {
      int v34 = v24;
      std::string::basic_string[abi:nn180100]<0>(v59, v22);
      std::string::basic_string[abi:nn180100]<0>(__p, v34);
      long long v35 = a14[3];
      v56[2] = a14[2];
      v56[3] = v35;
      v56[4] = a14[4];
      long long v36 = a14[1];
      v56[0] = *a14;
      v56[1] = v36;
      _AccumulateTopicCandidates(v33, v32, (uint64_t)v59, (uint64_t)__p, a13, (uint64_t)v56, *(void *)(v27 + 24), a15, v31, v29, a16, a17, 1);
      if (v58 < 0) {
        operator delete(__p[0]);
      }
      if ((v60 & 0x80000000) == 0) {
        return 1;
      }
      uint64_t v37 = (void *)v59[0];
    }
    else
    {
      if (!v23) {
        return 1;
      }
      std::string::basic_string[abi:nn180100]<0>(v54, v22);
      std::string::basic_string[abi:nn180100]<0>(v52, "");
      long long v43 = a14[3];
      v51[2] = a14[2];
      v51[3] = v43;
      v51[4] = a14[4];
      long long v44 = a14[1];
      v51[0] = *a14;
      v51[1] = v44;
      _AccumulateTopicCandidates(v33, v32, (uint64_t)v54, (uint64_t)v52, a13, (uint64_t)v51, *(void *)(v27 + 24), a15, v31, v29, a16, a17, 1);
      if (v53 < 0) {
        operator delete(v52[0]);
      }
      if ((v55 & 0x80000000) == 0) {
        return 1;
      }
      uint64_t v37 = v54[0];
    }
LABEL_22:
    operator delete(v37);
    return 1;
  }
  if (*(void *)(v20 + 32))
  {
    uint64_t v38 = v21;
    uint64_t v39 = v19;
    uint64_t v48 = v24;
    uint64_t v49 = v17;
    os_log_type_t v50 = v18;
    v71[0] = 0;
    bzero(v74, 0xF278uLL);
    v73[0] = *(void *)(v27 + 88);
    v73[1] = a10;
    v73[2] = 0;
    v74[62064] = a11;
    pommesSuggestionsTokenizeString(v39, v26, v25, (unsigned __int16 *)v71 + 1, (unsigned __int16 *)v71, (uint64_t)v73, 1, 1, 0, (uint64_t)pommesSuggestionsGetTokenCallback, 0, 4u);
    if (HIWORD(v71[0]))
    {
      uint64_t v72 = 0;
      *(void *)&v71[1] = 0;
      if (v38 && icu_search_match())
      {
        std::string::basic_string[abi:nn180100]<0>(v69, v26);
        std::string::basic_string[abi:nn180100]<0>(v67, "");
        long long v40 = a14[3];
        v66[2] = a14[2];
        v66[3] = v40;
        v66[4] = a14[4];
        long long v41 = a14[1];
        v66[0] = *a14;
        v66[1] = v41;
        _AccumulateTopicCandidates(v49, v50, (uint64_t)v69, (uint64_t)v67, a13, (uint64_t)v66, *(void *)(v27 + 24), a15, v31, v29, a16, a17, HIWORD(v71[0]));
        if (v68 < 0) {
          operator delete(v67[0]);
        }
        if ((v70 & 0x80000000) == 0) {
          return 1;
        }
        os_log_type_t v42 = (void **)v69;
        goto LABEL_16;
      }
      if (v48)
      {
        if (a9)
        {
          pommesSuggestionsTokenizeString(v39, v48, a9, (unsigned __int16 *)v71 + 1, (unsigned __int16 *)v71, (uint64_t)v73, 1, 1, 0, (uint64_t)pommesSuggestionsGetTokenCallback, 0, 4u);
          if (HIWORD(v71[0]))
          {
            uint64_t v72 = 0;
            *(void *)&v71[1] = 0;
            if (v38)
            {
              if (icu_search_match())
              {
                std::string::basic_string[abi:nn180100]<0>(v64, v26);
                std::string::basic_string[abi:nn180100]<0>(v62, v48);
                long long v46 = a14[3];
                v61[2] = a14[2];
                v61[3] = v46;
                void v61[4] = a14[4];
                long long v47 = a14[1];
                v61[0] = *a14;
                v61[1] = v47;
                _AccumulateTopicCandidates(v49, v50, (uint64_t)v64, (uint64_t)v62, a13, (uint64_t)v61, *(void *)(v27 + 24), a15, v31, v29, a16, a17, HIWORD(v71[0]));
                if (v63 < 0) {
                  operator delete(v62[0]);
                }
                if ((v65 & 0x80000000) == 0) {
                  return 1;
                }
                os_log_type_t v42 = (void **)v64;
LABEL_16:
                uint64_t v37 = *v42;
                goto LABEL_22;
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

void _AccumulateTopicCandidates(uint64_t a1, os_unfair_lock_t lock, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, unsigned int a8, float64_t a9, float64_t a10, char a11, char a12, uint64_t a13)
{
  os_unfair_lock_lock(lock);
  char v16 = *(unsigned char *)(a3 + 23);
  int v59 = v16;
  std::string::size_type v57 = *(void *)(a3 + 8);
  char v58 = *(const std::string::value_type **)a3;
  if (v16 >= 0) {
    uint64_t v17 = (uint64_t *)a3;
  }
  else {
    uint64_t v17 = *(uint64_t **)a3;
  }
  if (v16 >= 0) {
    unint64_t v18 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    unint64_t v18 = *(void *)(a3 + 8);
  }
  unint64_t v19 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v17, v18);
  unint64_t v20 = *(void *)(a1 + 8);
  if (!v20) {
    goto LABEL_24;
  }
  unint64_t v21 = v19;
  uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
  v22.i16[0] = vaddlv_u8(v22);
  unint64_t v23 = v22.u32[0];
  if (v22.u32[0] > 1uLL)
  {
    unint64_t v24 = v19;
    if (v19 >= v20) {
      unint64_t v24 = v19 % v20;
    }
  }
  else
  {
    unint64_t v24 = (v20 - 1) & v19;
  }
  uint64_t v56 = *(void *)a1;
  int32_t v25 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v24);
  if (!v25 || (size_t v26 = *v25) == 0) {
LABEL_24:
  }
    operator new();
  unint64_t v60 = v20 - 1;
  while (1)
  {
    unint64_t v27 = *((void *)v26 + 1);
    if (v27 == v21) {
      break;
    }
    if (v23 > 1)
    {
      if (v27 >= v20) {
        v27 %= v20;
      }
    }
    else
    {
      v27 &= v60;
    }
    if (v27 != v24) {
      goto LABEL_24;
    }
LABEL_23:
    size_t v26 = *(unsigned __int8 **)v26;
    if (!v26) {
      goto LABEL_24;
    }
  }
  if (!std::equal_to<std::string>::operator()[abi:nn180100](v26 + 16, (unsigned __int8 *)a3)) {
    goto LABEL_23;
  }
  unint64_t v28 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v17, v18);
  unint64_t v29 = v28;
  if (v23 > 1)
  {
    unint64_t v30 = v28;
    float64_t v31 = lock;
    uint64_t v32 = v56;
    if (v28 >= v20) {
      unint64_t v30 = v28 % v20;
    }
  }
  else
  {
    unint64_t v30 = v60 & v28;
    float64_t v31 = lock;
    uint64_t v32 = v56;
  }
  uint64_t v33 = *(void ***)(v32 + 8 * v30);
  if (v33)
  {
    int v34 = (char *)*v33;
    if (*v33)
    {
      do
      {
        unint64_t v35 = *((void *)v34 + 1);
        if (v35 == v29)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)v34 + 16, (unsigned __int8 *)a3)) {
            goto LABEL_71;
          }
        }
        else
        {
          if (v23 > 1)
          {
            if (v35 >= v20) {
              v35 %= v20;
            }
          }
          else
          {
            v35 &= v60;
          }
          if (v35 != v30) {
            break;
          }
        }
        int v34 = *(char **)v34;
      }
      while (v34);
    }
  }
  long long v36 = (void *)(a1 + 16);
  uint64_t v68 = 0;
  int v34 = (char *)operator new(0x30uLL);
  v67[0] = v34;
  v67[1] = a1 + 16;
  *(void *)int v34 = 0;
  *((void *)v34 + 1) = v29;
  uint64_t v37 = (std::string *)(v34 + 16);
  if (v59 < 0)
  {
    std::string::__init_copy_ctor_external(v37, v58, v57);
  }
  else
  {
    *(_OWORD *)&v37->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v34 + 4) = *(void *)(a3 + 16);
  }
  *((void *)v34 + 5) = 0;
  float v38 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  LOBYTE(v68) = 1;
  float v39 = *(float *)(a1 + 32);
  if ((float)(v39 * (float)v20) < v38)
  {
    BOOL v41 = v20 < 3 || v23 > 1;
    unint64_t v42 = v41 | (2 * v20);
    unint64_t v43 = vcvtps_u32_f32(v38 / v39);
    if (v42 <= v43) {
      size_t v44 = v43;
    }
    else {
      size_t v44 = v42;
    }
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__rehash<true>(a1, v44);
    unint64_t v20 = *(void *)(a1 + 8);
    if ((v20 & (v20 - 1)) != 0)
    {
      if (v29 >= v20) {
        unint64_t v30 = v29 % v20;
      }
      else {
        unint64_t v30 = v29;
      }
    }
    else
    {
      unint64_t v30 = (v20 - 1) & v29;
    }
  }
  uint64_t v45 = *(void *)a1;
  long long v46 = *(void **)(*(void *)a1 + 8 * v30);
  if (v46)
  {
    *(void *)int v34 = *v46;
    goto LABEL_69;
  }
  *(void *)int v34 = *v36;
  *long long v36 = v34;
  *(void *)(v45 + 8 * v30) = v36;
  if (*(void *)v34)
  {
    unint64_t v47 = *(void *)(*(void *)v34 + 8);
    if ((v20 & (v20 - 1)) != 0)
    {
      if (v47 >= v20) {
        v47 %= v20;
      }
    }
    else
    {
      v47 &= v20 - 1;
    }
    long long v46 = (void *)(*(void *)a1 + 8 * v47);
LABEL_69:
    void *v46 = v34;
  }
  v67[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,void *>>>>::reset[abi:nn180100]((uint64_t)v67);
LABEL_71:
  uint64_t v48 = *((void *)v34 + 5);
  ++*(_DWORD *)(v48 + 112);
  v49.f64[0] = a9;
  v49.f64[1] = a10;
  *(int8x16_t *)(v48 + 88) = vbslq_s8((int8x16_t)vcgtq_f64(v49, *(float64x2_t *)(v48 + 88)), (int8x16_t)v49, *(int8x16_t *)(v48 + 88));
  if (a11) {
    *(unsigned char *)(v48 + 80) = a11;
  }
  if (a12) {
    *(unsigned char *)(v48 + 81) = a12;
  }
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)(v48 + 144), a8, a8);
  if (*(char *)(a4 + 23) < 0)
  {
    if (*(void *)(a4 + 8)) {
LABEL_77:
    }
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(v48 + 168), (void *)a4, a4);
  }
  else if (*(unsigned char *)(a4 + 23))
  {
    goto LABEL_77;
  }
  if (*(_DWORD *)(v48 + 136) != a5) {
    *(_DWORD *)(v48 + 136) = 1;
  }
  unint64_t v50 = (unint64_t)log((double)*(unint64_t *)(a6 + 8));
  unint64_t v51 = (unint64_t)log((double)*(unint64_t *)(v48 + 8));
  if (v51 + (unint64_t)log((double)*(unint64_t *)v48) >= 2 * v50) {
    uint64_t v52 = (_OWORD *)v48;
  }
  else {
    uint64_t v52 = (_OWORD *)a6;
  }
  long long v53 = v52[4];
  long long v55 = v52[1];
  long long v54 = v52[2];
  *(_OWORD *)(v48 + 48) = v52[3];
  *(_OWORD *)(v48 + 64) = v53;
  *(_OWORD *)(v48 + 16) = v55;
  *(_OWORD *)(v48 + 32) = v54;
  *(_OWORD *)uint64_t v48 = *v52;
  os_unfair_lock_unlock(v31);
}

uint64_t *std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t *result, unsigned int a2, int a3)
{
  uint64_t v4 = result;
  uint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (void *)v5;
        unsigned int v8 = *(_DWORD *)(v5 + 28);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = (uint64_t **)v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v7 = result + 1;
LABEL_9:
    int v9 = operator new(0x20uLL);
    v9[7] = a3;
    *(void *)int v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v7;
    void *v6 = (uint64_t *)v9;
    uint64_t v10 = *(void *)*v4;
    if (v10)
    {
      *uint64_t v4 = v10;
      uint64_t v11 = *v6;
    }
    else
    {
      uint64_t v11 = (uint64_t *)v9;
    }
    uint64_t result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v5;
        unsigned int v8 = v5 + 4;
        if (!std::less<std::string>::operator()[abi:nn180100](a2, v5 + 4)) {
          break;
        }
        uint64_t v5 = *v6;
        int v9 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      uint64_t result = (uint64_t *)std::less<std::string>::operator()[abi:nn180100](v8, a2);
      if (!result) {
        break;
      }
      int v9 = v6 + 1;
      uint64_t v5 = v6[1];
      if (!v5) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v9 = a1 + 1;
LABEL_9:
    uint64_t v11 = (uint64_t *)operator new(0x38uLL);
    uint64_t v12 = (std::string *)(v11 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v11[6] = *(void *)(a3 + 16);
    }
    *uint64_t v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v6;
    _DWORD *v9 = v11;
    uint64_t v13 = (uint64_t *)**a1;
    if (v13)
    {
      *a1 = v13;
      uint64_t v11 = *v9;
    }
    uint64_t result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  char v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<_topicCandidate>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

BOOL std::less<std::string>::operator()[abi:nn180100](void *a1, void *a2)
{
  int v2 = *((char *)a2 + 23);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = a1[1];
  }
  if (v3 < 0) {
    a1 = (void *)*a1;
  }
  if (v2 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = a2[1];
  }
  if (v2 < 0) {
    a2 = (void *)*a2;
  }
  if (v5 >= v4) {
    size_t v6 = v4;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7) {
    return v7 < 0;
  }
  else {
    return v4 < v5;
  }
}

void std::allocator<_peopleMatchInfo>::destroy[abi:nn180100](uint64_t a1)
{
  int v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)(a1 + 56);
  if (v3)
  {
    *(void *)(a1 + 64) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    size_t v4 = *(void **)a1;
    operator delete(v4);
  }
}

void std::__function::__func<SIPommesMailSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,unsigned long const*,ci_rankingbits_s,unsigned int,char const*,char const**,__CFArray const*,BOOL,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0,std::allocator<SIPommesMailSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,unsigned long const*,ci_rankingbits_s,unsigned int,char const*,char const**,__CFArray const*,BOOL,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0>,void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::operator()(uint64_t a1, char **a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  size_t v6 = *a2;
  unint64_t v7 = *a3;
  unint64_t v8 = *a4;
  unint64_t v9 = *a5;
  uint64_t v10 = *(void *)(a1 + 8);
  if (!(*a4 | *a3) && *(void *)(v10 + 8) == *(void *)v10)
  {
    uint64_t v38 = 0;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v32 = 0u;
    *(_OWORD *)uint64_t v33 = 0u;
    *(_OWORD *)buf = 0u;
    *(_OWORD *)float64_t v31 = 0u;
    _peopleMatchInfo::_peopleMatchInfo((_peopleMatchInfo *)buf, *(void *)(**(void **)(a1 + 16) + 32));
    MEMORY[0x1C1880BF0](buf, "");
    std::vector<_peopleMatchInfo>::push_back[abi:nn180100](*(char ***)(a1 + 8), (long long *)buf);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v33[1])
    {
      *(void **)&long long v34 = v33[1];
      operator delete(v33[1]);
    }
    if (SHIBYTE(v32) < 0) {
      operator delete(v31[1]);
    }
    if (SHIBYTE(v31[0]) < 0) {
      operator delete(*(void **)buf);
    }
  }
  else
  {
    uint64_t v11 = **(void **)(a1 + 24);
    uint64_t v12 = **(void **)(a1 + 32);
    uint64_t v13 = **(void **)(a1 + 40);
    uint64_t v14 = **(void ***)(a1 + 16);
    uint64_t v15 = **(void **)(a1 + 48);
    uint64_t v16 = **(void **)(a1 + 56);
    uint64_t v17 = ***(void ***)(a1 + 72);
    unint64_t v18 = **(char ***)(a1 + 96);
    int v19 = **(unsigned __int8 **)(a1 + 104);
    int v20 = **(unsigned __int8 **)(a1 + 112);
    int v21 = **(unsigned __int8 **)(a1 + 136);
    uint8x8_t v22 = *(CFArrayRef **)(a1 + 152);
    int v23 = **(unsigned __int8 **)(a1 + 144);
    switch(v8)
    {
      case 0uLL:
        _SIPommesSuggestionsProcessName(v13, (uint64_t)v14, v6, v7, (int)v18, v19 != 0, v20 != 0, (char **)v10, v21 != 0, *v22);
        return;
      case 1uLL:
        uint64_t v24 = **(void **)(a1 + 40);
        uint64_t v25 = **(void **)(a1 + 16);
        _SIPommesSuggestionsProcessEmailAddress(v24, v25, v6, v7, v9, (void *)v10);
        return;
      case 2uLL:
        _SIPommesSuggestionsProcessName(v13, (uint64_t)v14, v6, v7, (int)v18, v19 != 0, v20 != 0, *(char ***)(a1 + 120), v21 != 0, *v22);
        return;
      case 3uLL:
        _SIPommesSuggestionsProcessEmailAddress(**(void **)(a1 + 40), **(void **)(a1 + 16), v6, v7, v9, *(void **)(a1 + 120));
        goto LABEL_24;
      case 4uLL:
        _SIPommesSuggestionsProcessRawText(v11, v12, v13, v14, v15, v16, (int)v6, v7, v17, v18, 0, v23 != 0, v10, 0, *v22);
        goto LABEL_24;
      case 5uLL:
        _SIPommesSuggestionsProcessRawText(v11, v12, v13, v14, v15, v16, (int)v6, v7, v17, v18, v7 > 0x118, v23 != 0, v10, 0, *v22);
        goto LABEL_24;
      default:
        if (dword_1E9FC90DC >= 5)
        {
          unint64_t v29 = v8;
          uint64_t v26 = *(void *)(**(void **)(a1 + 88) + 8 * v8);
          int v27 = *__error();
          unint64_t v28 = _SILogForLogForCategory(14);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            *(void *)&uint8_t buf[4] = v26;
            _os_log_impl(&dword_1BD672000, v28, OS_LOG_TYPE_DEFAULT, "Pommes Suggestions cannot handle field %s.", buf, 0xCu);
          }
          *__error() = v27;
          unint64_t v8 = v29;
        }
        if (v8 < 3) {
          return;
        }
LABEL_24:
        if (!**(unsigned char **)(a1 + 160))
        {
          _SIPommesSuggestionsAddPeopleCandidate(**(void **)(a1 + 24), **(os_unfair_lock_t **)(a1 + 32), **(void **)(a1 + 16), **(unsigned char **)(a1 + 112), **(void **)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 8), 1);
          _SIPommesSuggestionsAddPeopleCandidate(**(void **)(a1 + 24), **(os_unfair_lock_t **)(a1 + 32), **(void **)(a1 + 16), **(unsigned char **)(a1 + 112), **(void **)(a1 + 120), *(void *)(*(void *)(a1 + 120) + 8), 0);
          **(unsigned char **)(a1 + 160) = 1;
        }
        break;
    }
  }
}

void std::vector<_peopleMatchInfo>::push_back[abi:nn180100](char **a1, long long *a2)
{
  unint64_t v5 = (unint64_t)a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if (v5 < v4)
  {
    std::allocator<_peopleMatchInfo>::construct[abi:nn180100]<_peopleMatchInfo,_peopleMatchInfo const&>((std::string *)a1[1], a2);
    size_t v6 = (std::string::value_type *)(v5 + 136);
    goto LABEL_21;
  }
  unint64_t v7 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v5 - (void)*a1) >> 3);
  if (v7 + 1 > 0x1E1E1E1E1E1E1E1) {
    abort();
  }
  unint64_t v8 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v4 - (void)*a1) >> 3);
  uint64_t v9 = 2 * v8;
  if (2 * v8 <= v7 + 1) {
    uint64_t v9 = v7 + 1;
  }
  if (v8 >= 0xF0F0F0F0F0F0F0) {
    unint64_t v10 = 0x1E1E1E1E1E1E1E1;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10)
  {
    if (v10 > 0x1E1E1E1E1E1E1E1) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v11 = (char *)operator new(136 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = (std::string *)&v11[136 * v7];
  uint64_t v13 = &v11[136 * v10];
  std::allocator<_peopleMatchInfo>::construct[abi:nn180100]<_peopleMatchInfo,_peopleMatchInfo const&>(v12, a2);
  size_t v6 = &v12[5].__r_.__value_.__s.__data_[16];
  uint64_t v14 = *a1;
  uint64_t v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = (char *)v12;
    a1[1] = v6;
    a1[2] = v13;
    if (!v15) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  uint64_t v16 = 0;
  do
  {
    uint64_t v17 = (char *)v12 + v16;
    unint64_t v18 = &v15[v16];
    long long v19 = *(_OWORD *)&v15[v16 - 136];
    *((void *)v17 - 15) = *(void *)&v15[v16 - 120];
    *(_OWORD *)(v17 - 136) = v19;
    *((void *)v18 - 16) = 0;
    *((void *)v18 - 15) = 0;
    *((void *)v18 - 17) = 0;
    long long v20 = *(_OWORD *)&v15[v16 - 112];
    *((void *)v17 - 12) = *(void *)&v15[v16 - 96];
    *((_OWORD *)v17 - 7) = v20;
    *((void *)v18 - 13) = 0;
    *((void *)v18 - 12) = 0;
    *((void *)v18 - 14) = 0;
    uint64_t v21 = *(void *)&v15[v16 - 88];
    *((void *)v17 - 9) = 0;
    *((void *)v17 - 8) = 0;
    *((void *)v17 - 11) = v21;
    *((void *)v17 - 10) = 0;
    *((_OWORD *)v17 - 5) = *(_OWORD *)&v15[v16 - 80];
    *((void *)v17 - 8) = *(void *)&v15[v16 - 64];
    *((void *)v18 - 10) = 0;
    *((void *)v18 - 9) = 0;
    *((void *)v18 - 8) = 0;
    *((void *)v17 - 7) = 0;
    *((void *)v17 - 6) = 0;
    *((void *)v17 - 5) = 0;
    *(_OWORD *)(v17 - 56) = *(_OWORD *)&v15[v16 - 56];
    *((void *)v17 - 5) = *(void *)&v15[v16 - 40];
    *((void *)v18 - 7) = 0;
    *((void *)v18 - 6) = 0;
    *((void *)v18 - 5) = 0;
    long long v22 = *(_OWORD *)&v15[v16 - 16];
    *((_OWORD *)v17 - 2) = *(_OWORD *)&v15[v16 - 32];
    *((_OWORD *)v17 - 1) = v22;
    v16 -= 136;
  }
  while (&v15[v16] != v14);
  int v23 = (char *)v12 + v16;
  uint64_t v24 = *a1;
  uint64_t v15 = a1[1];
  *a1 = v23;
  a1[1] = v6;
  a1[2] = v13;
  if (v15 != v24)
  {
    do
    {
      v15 -= 136;
      std::allocator<_peopleMatchInfo>::destroy[abi:nn180100]((uint64_t)v15);
    }
    while (v15 != v24);
    uint64_t v15 = v24;
  }
  if (v15) {
LABEL_20:
  }
    operator delete(v15);
LABEL_21:
  a1[1] = v6;
}

void _SIPommesSuggestionsProcessName(int a1, uint64_t a2, char *a3, int a4, int a5, int a6, int a7, char **a8, char a9, CFArrayRef theArray)
{
  uint64_t v23 = 0;
  long long v22 = 0u;
  *(_OWORD *)long long v20 = 0u;
  long long v21 = 0u;
  *(_OWORD *)unint64_t v18 = 0u;
  long long v19 = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)std::string __p = 0u;
  _peopleMatchInfo::_peopleMatchInfo((_peopleMatchInfo *)__p, *(void *)(a2 + 32));
  if (a3 && *a3)
  {
    std::string::basic_string[abi:nn180100]<0>(&v13, a3);
    if (SHIBYTE(v16[0]) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = v13;
    v16[0] = v14;
    if (*(void *)(a2 + 32)) {
      operator new();
    }
  }
  else
  {
    MEMORY[0x1C1880BF0](__p, "");
  }
  std::vector<_peopleMatchInfo>::push_back[abi:nn180100](a8, (long long *)__p);
  if (v20[0])
  {
    v20[1] = v20[0];
    operator delete(v20[0]);
  }
  if (v18[1])
  {
    *(void **)&long long v19 = v18[1];
    operator delete(v18[1]);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(v16[1]);
  }
  if (SHIBYTE(v16[0]) < 0) {
    operator delete(__p[0]);
  }
}

void _SIPommesSuggestionsProcessEmailAddress(int a1, uint64_t a2, char *__s, uint64_t a4, unint64_t a5, void *a6)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(a6[1] - *a6) >> 3) <= a5)
  {
    if (dword_1E9FC90DC >= 5)
    {
      int v12 = *__error();
      long long v13 = _SILogForLogForCategory(14);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(void *)&uint8_t buf[4] = a5;
        _os_log_impl(&dword_1BD672000, v13, OS_LOG_TYPE_DEFAULT, "Invalid index %ld for matchInfoArray.", buf, 0xCu);
      }
      *__error() = v12;
    }
  }
  else if (__s && *__s)
  {
    std::string::basic_string[abi:nn180100]<0>(buf, __s);
    uint64_t v9 = *a6 + 136 * a5;
    uint64_t v10 = v9 + 24;
    if (*(char *)(v9 + 47) < 0) {
      operator delete(*(void **)v10);
    }
    long long v11 = *(_OWORD *)buf;
    *(void *)(v10 + 16) = v16;
    *(_OWORD *)uint64_t v10 = v11;
    *(_DWORD *)(*a6 + 136 * a5 + 52) = 0;
    if (a2)
    {
      if (*(void *)(a2 + 32))
      {
        CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], "en-US", 0x8000100u);
        operator new();
      }
    }
  }
  else
  {
    uint64_t v14 = 17 * a5;
    MEMORY[0x1C1880BF0](*a6 + 136 * a5 + 24, "");
    *(_DWORD *)(*a6 + 8 * v14 + 52) = 0;
  }
}

void _SIPommesSuggestionsAddPeopleCandidate(uint64_t a1, os_unfair_lock_t lock, uint64_t a3, char a4, uint64_t a5, uint64_t a6, int a7)
{
  if (!a3) {
    return;
  }
  uint64_t v7 = a6;
  uint64_t v8 = a5;
  if (a5 == a6) {
    return;
  }
  int v9 = a7;
  char v10 = a4;
  long long v11 = lock;
  uint64_t v12 = a1;
  unint64_t v13 = *(void *)(a3 + 32);
  long long v80 = (uint64_t *)(a1 + 64);
  size_t v78 = (void *)(a1 + 80);
  do
  {
    uint64_t v14 = *(unsigned __int8 *)(v8 + 47);
    if (*(char *)(v8 + 47) < 0)
    {
      if (!*(void *)(v8 + 32)) {
        goto LABEL_54;
      }
    }
    else if (!*(unsigned char *)(v8 + 47))
    {
      goto LABEL_54;
    }
    *(void *)(v8 + 128) = 0;
    *(unsigned char *)(v8 + 123) = 0;
    unint64_t v15 = 0;
    if (v13)
    {
      uint64_t v16 = (uint64_t *)(*(void *)(v8 + 80) + 8);
      uint64_t v17 = (uint64_t *)(*(void *)(v8 + 56) + 8);
      while (1)
      {
        uint64_t v19 = *v17;
        v17 += 2;
        uint64_t v18 = v19;
        uint64_t v20 = *v16;
        v16 += 2;
        if (v20 <= 0 && v18 < 1) {
          break;
        }
        if (v13 == ++v15)
        {
          float v22 = *(float *)(v8 + 48);
          goto LABEL_20;
        }
      }
      *(void *)(v8 + 128) = v15;
      if (v15) {
        *(unsigned char *)(v8 + 123) = 1;
      }
    }
    float v22 = *(float *)(v8 + 48);
    if (v15 < v13 && v22 < 1.0) {
      goto LABEL_54;
    }
LABEL_20:
    float v23 = 0.0;
    if ((v10 & 1) == 0)
    {
      double v24 = v22;
      double v25 = *(float *)(v8 + 52);
      if (v9)
      {
        float v23 = v25 + v24 * 0.9;
        if (v23 < 0.1) {
          return;
        }
      }
      else
      {
        float v23 = v25 * 0.05 + v24 * 0.1;
        if (v23 < 0.05) {
          return;
        }
      }
    }
    if ((v14 & 0x80u) != 0) {
      uint64_t v14 = *(void *)(v8 + 32);
    }
    if (!v14 || *(void *)(v12 + 88) > 0x3E8uLL) {
      goto LABEL_54;
    }
    os_unfair_lock_lock(v11);
    int v26 = *(char *)(v8 + 47);
    if (v26 >= 0) {
      int v27 = (uint64_t *)(v8 + 24);
    }
    else {
      int v27 = *(uint64_t **)(v8 + 24);
    }
    if (v26 >= 0) {
      unint64_t v28 = *(unsigned __int8 *)(v8 + 47);
    }
    else {
      unint64_t v28 = *(void *)(v8 + 32);
    }
    unint64_t v29 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v27, v28);
    unint64_t v30 = *(void *)(v12 + 72);
    if (!v30) {
      goto LABEL_52;
    }
    unint64_t v31 = v29;
    uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v30);
    v32.i16[0] = vaddlv_u8(v32);
    unint64_t v33 = v32.u32[0];
    if (v32.u32[0] > 1uLL)
    {
      unint64_t v34 = v29;
      if (v29 >= v30) {
        unint64_t v34 = v29 % v30;
      }
    }
    else
    {
      unint64_t v34 = (v30 - 1) & v29;
    }
    uint64_t v72 = *v80;
    unint64_t v35 = *(unsigned __int8 ***)(*v80 + 8 * v34);
    if (!v35 || (long long v36 = *v35) == 0) {
LABEL_52:
    }
      operator new();
    unint64_t v76 = v30 - 1;
    while (1)
    {
      unint64_t v37 = *((void *)v36 + 1);
      if (v37 == v31) {
        break;
      }
      if (v33 > 1)
      {
        if (v37 >= v30) {
          v37 %= v30;
        }
      }
      else
      {
        v37 &= v76;
      }
      if (v37 != v34) {
        goto LABEL_52;
      }
LABEL_51:
      long long v36 = *(unsigned __int8 **)v36;
      if (!v36) {
        goto LABEL_52;
      }
    }
    if (!std::equal_to<std::string>::operator()[abi:nn180100](v36 + 16, (unsigned __int8 *)(v8 + 24))) {
      goto LABEL_51;
    }
    unint64_t v38 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v27, v28);
    unint64_t v39 = v38;
    if (v33 > 1)
    {
      unint64_t v40 = v38;
      if (v38 >= v30) {
        unint64_t v40 = v38 % v30;
      }
    }
    else
    {
      unint64_t v40 = v76 & v38;
    }
    BOOL v41 = *(void ***)(v72 + 8 * v40);
    if (v41)
    {
      unint64_t v42 = (char *)*v41;
      if (*v41)
      {
        do
        {
          unint64_t v43 = *((void *)v42 + 1);
          if (v43 == v39)
          {
            if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)v42 + 16, (unsigned __int8 *)(v8 + 24)))
            {
              goto LABEL_99;
            }
          }
          else
          {
            if (v33 > 1)
            {
              if (v43 >= v30) {
                v43 %= v30;
              }
            }
            else
            {
              v43 &= v76;
            }
            if (v43 != v40) {
              break;
            }
          }
          unint64_t v42 = *(char **)v42;
        }
        while (v42);
      }
    }
    uint64_t v82 = 0;
    unint64_t v42 = (char *)operator new(0x30uLL);
    v81[0] = v42;
    v81[1] = v78;
    *(void *)unint64_t v42 = 0;
    *((void *)v42 + 1) = v39;
    size_t v44 = (std::string *)(v42 + 16);
    if (*(char *)(v8 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(v44, *(const std::string::value_type **)(v8 + 24), *(void *)(v8 + 32));
    }
    else
    {
      *(_OWORD *)&v44->__r_.__value_.__l.__data_ = *(_OWORD *)(v8 + 24);
      *((void *)v42 + 4) = *(void *)(v8 + 40);
    }
    *((void *)v42 + 5) = 0;
    float v45 = (float)(unint64_t)(*(void *)(a1 + 88) + 1);
    LOBYTE(v82) = 1;
    float v46 = *(float *)(a1 + 96);
    if ((float)(v46 * (float)v30) < v45)
    {
      BOOL v48 = v30 < 3 || v33 > 1;
      unint64_t v49 = v48 | (2 * v30);
      unint64_t v50 = vcvtps_u32_f32(v45 / v46);
      if (v49 <= v50) {
        size_t v51 = v50;
      }
      else {
        size_t v51 = v49;
      }
      std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__rehash<true>((uint64_t)v80, v51);
      unint64_t v30 = *(void *)(a1 + 72);
      if ((v30 & (v30 - 1)) != 0)
      {
        if (v39 >= v30) {
          unint64_t v40 = v39 % v30;
        }
        else {
          unint64_t v40 = v39;
        }
      }
      else
      {
        unint64_t v40 = (v30 - 1) & v39;
      }
    }
    uint64_t v52 = *v80;
    long long v53 = *(void **)(*v80 + 8 * v40);
    if (v53)
    {
      *(void *)unint64_t v42 = *v53;
      goto LABEL_97;
    }
    *(void *)unint64_t v42 = *v78;
    void *v78 = v42;
    *(void *)(v52 + 8 * v40) = v78;
    if (*(void *)v42)
    {
      unint64_t v54 = *(void *)(*(void *)v42 + 8);
      if ((v30 & (v30 - 1)) != 0)
      {
        if (v54 >= v30) {
          v54 %= v30;
        }
      }
      else
      {
        v54 &= v30 - 1;
      }
      long long v53 = (void *)(*v80 + 8 * v54);
LABEL_97:
      *long long v53 = v42;
    }
    v81[0] = 0;
    ++*(void *)(a1 + 88);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_peopleCandidate>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_peopleCandidate>>,void *>>>>::reset[abi:nn180100]((uint64_t)v81);
LABEL_99:
    uint64_t v55 = *((void *)v42 + 5);
    int v56 = *(char *)(v8 + 23);
    if (v56 >= 0) {
      std::string::size_type v57 = (uint64_t *)v8;
    }
    else {
      std::string::size_type v57 = *(uint64_t **)v8;
    }
    if (v56 >= 0) {
      unint64_t v58 = *(unsigned __int8 *)(v8 + 23);
    }
    else {
      unint64_t v58 = *(void *)(v8 + 8);
    }
    unint64_t v59 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v57, v58);
    int8x8_t v60 = *(int8x8_t *)(v55 + 96);
    if (v60)
    {
      unint64_t v61 = v59;
      uint8x8_t v62 = (uint8x8_t)vcnt_s8(v60);
      v62.i16[0] = vaddlv_u8(v62);
      unint64_t v63 = v62.u32[0];
      if (v62.u32[0] > 1uLL)
      {
        unint64_t v64 = v59;
        if (v59 >= *(void *)&v60) {
          unint64_t v64 = v59 % *(void *)&v60;
        }
      }
      else
      {
        unint64_t v64 = (*(void *)&v60 - 1) & v59;
      }
      char v65 = *(unsigned __int8 ***)(*(void *)(v55 + 88) + 8 * v64);
      if (v65)
      {
        for (CFIndex i = *v65; i; CFIndex i = *(unsigned __int8 **)i)
        {
          unint64_t v67 = *((void *)i + 1);
          if (v67 == v61)
          {
            if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)v8))
            {
              float v71 = *((float *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v55 + 88, v8, v8)+ 10)+ v23;
              *((float *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v55 + 88, v8, v8)+ 10) = v71;
              int v9 = a7;
              uint64_t v7 = a6;
              char v10 = a4;
              long long v11 = lock;
              if (v71 > *(float *)(v55 + 8))
              {
                *(float *)(v55 + 8) = v71;
                *(_DWORD *)uint64_t v55 = *(_DWORD *)(v8 + 48);
                std::string::operator=((std::string *)(v55 + 40), (const std::string *)v8);
LABEL_123:
                *(unsigned char *)(v55 + 26) = 0;
              }
              goto LABEL_124;
            }
          }
          else
          {
            if (v63 > 1)
            {
              if (v67 >= *(void *)&v60) {
                v67 %= *(void *)&v60;
              }
            }
            else
            {
              v67 &= *(void *)&v60 - 1;
            }
            if (v67 != v64) {
              break;
            }
          }
        }
      }
    }
    *((float *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v55 + 88, v8, v8)+ 10) = v23;
    int v9 = a7;
    uint64_t v7 = a6;
    char v10 = a4;
    long long v11 = lock;
    if (*(float *)(v55 + 8) < v23)
    {
      *(float *)(v55 + 8) = v23;
      *(_DWORD *)uint64_t v55 = *(_DWORD *)(v8 + 48);
      goto LABEL_123;
    }
LABEL_124:
    double v68 = *(double *)(v8 + 104);
    if (v68 > 0.000000100000001)
    {
      double v69 = *(double *)(v55 + 16);
      if (v69 <= 0.000000100000001 || v68 < v69)
      {
        *(double *)(v55 + 16) = v68;
        std::string::operator=((std::string *)(v55 + 40), (const std::string *)v8);
      }
    }
    *(unsigned char *)(v55 + 24) = (*(unsigned __int8 *)(v55 + 24) | *(unsigned __int8 *)(v8 + 120)) != 0;
    *(unsigned char *)(v55 + 25) = (*(unsigned __int8 *)(v55 + 25) | *(unsigned __int8 *)(v8 + 122)) != 0;
    uint64_t v12 = a1;
    if (v9) {
      *(unsigned char *)(v55 + 27) = 1;
    }
    else {
      *(unsigned char *)(v55 + 28) = 1;
    }
    os_unfair_lock_unlock(v11);
LABEL_54:
    v8 += 136;
  }
  while (v8 != v7);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_peopleCandidate>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_peopleCandidate>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  char v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<_peopleCandidate>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

uint64_t _matchOnce(int a1, char *__s, int a3, void *a4)
{
  if (a3)
  {
    *a4 = 0;
    size_t v5 = strlen(__s);
    uint64_t result = 1;
  }
  else
  {
    uint64_t result = icu_search_match();
    *a4 = 0;
    size_t v5 = 0;
  }
  a4[1] = v5;
  return result;
}

__n128 std::allocator<_peopleMatchInfo>::construct[abi:nn180100]<_peopleMatchInfo,_peopleMatchInfo const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  size_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  this[2].__r_.__value_.__r.__words[0] = *((void *)a2 + 6);
  std::vector<CFRange>::vector(&this[2].__r_.__value_.__l.__size_, (uint64_t)a2 + 56);
  std::vector<CFRange>::vector(&this[3].__r_.__value_.__l.__size_, (uint64_t)(a2 + 5));
  __n128 result = *(__n128 *)((char *)a2 + 104);
  *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = *(long long *)((char *)a2 + 120);
  *(__n128 *)&this[4].__r_.__value_.__r.__words[1] = result;
  return result;
}

void *std::vector<CFRange>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  long long v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    std::vector<CFRange>::__vallocate[abi:nn180100](a1, v5 >> 4);
    long long v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

__n128 std::__function::__func<SIPommesMailSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,unsigned long const*,ci_rankingbits_s,unsigned int,char const*,char const**,__CFArray const*,BOOL,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0,std::allocator<SIPommesMailSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,unsigned long const*,ci_rankingbits_s,unsigned int,char const*,char const**,__CFArray const*,BOOL,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0>,void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1811408;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  long long v3 = *(_OWORD *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  __n128 result = *(__n128 *)(a1 + 104);
  long long v7 = *(_OWORD *)(a1 + 120);
  long long v8 = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(a2 + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 136) = v8;
  *(_OWORD *)(a2 + 120) = v7;
  *(__n128 *)(a2 + 104) = result;
  return result;
}

__n128 std::__function::__func<SIPommesMailSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,unsigned long const*,ci_rankingbits_s,unsigned int,char const*,char const**,__CFArray const*,BOOL,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0,std::allocator<SIPommesMailSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,unsigned long const*,ci_rankingbits_s,unsigned int,char const*,char const**,__CFArray const*,BOOL,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0>,void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0xA8uLL);
  *(void *)long long v2 = &unk_1F1811408;
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<SIPommesMailSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,unsigned long const*,ci_rankingbits_s,unsigned int,char const*,char const**,__CFArray const*,BOOL,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0,std::allocator<SIPommesMailSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,unsigned long const*,ci_rankingbits_s,unsigned int,char const*,char const**,__CFArray const*,BOOL,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0>,void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::~__func()
{
}

uint64_t std::function<void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a2;
  uint64_t v7 = a4;
  uint64_t v8 = a3;
  uint64_t v6 = a5;
  if (a1) {
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)a1 + 48))(a1, &v9, &v8, &v7, &v6);
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return std::__throw_bad_function_call[abi:nn180100]();
}

uint64_t std::__throw_bad_function_call[abi:nn180100]()
{
  return std::__function::__func<SIPommesPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,ci_rankingbits_s,unsigned int,char const*,char const**)::$_0,std::allocator<SIPommesPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,ci_rankingbits_s,unsigned int,char const*,char const**)::$_0>,void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::operator()();
}

void std::__function::__func<SIPommesPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,ci_rankingbits_s,unsigned int,char const*,char const**)::$_0,std::allocator<SIPommesPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,ci_rankingbits_s,unsigned int,char const*,char const**)::$_0>,void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::operator()(uint64_t a1, unsigned int **a2, uint64_t *a3, void *a4)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(**(void **)(a1 + 72) + 8 * *a4);
  long long v5 = *a2;
  uint64_t v6 = *a3;
  uint64_t v7 = **(void **)(a1 + 8);
  uint64_t v8 = **(void **)(a1 + 16);
  uint64_t v9 = **(void **)(a1 + 24);
  char v10 = **(void ***)(a1 + 32);
  uint64_t v11 = **(void **)(a1 + 40);
  uint64_t v12 = **(char ***)(a1 + 80);
  int v13 = **(unsigned __int8 **)(a1 + 88);
  switch(*a4)
  {
    case 5:
      uint64_t v16 = ***(void ***)(a1 + 56);
      memset(buffer, 0, 24);
      _SIPommesSuggestionsProcessRawText(v7, v8, v9, v10, 0, v11, (int)v5, v6, v16, v12, 0, 0, (uint64_t)buffer, 1, 0);
      *(void *)at = buffer;
      std::vector<_peopleMatchInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)at);
      return;
    case 0xALL:
      BOOL v23 = v13 != 0;
      int v24 = 11;
      goto LABEL_10;
    case 0xBLL:
      BOOL v23 = v13 != 0;
      int v24 = 12;
LABEL_10:
      int v50 = v24;
      char v49 = v23;
      goto LABEL_16;
    case 0xCLL:
      int v50 = 16;
      char v49 = v13 != 0;
      goto LABEL_16;
    case 0xELL:
      BOOL v14 = v13 != 0;
      int v15 = 17;
      goto LABEL_3;
    case 0x11:
      int v50 = 18;
      char v49 = v13 != 0;
      goto LABEL_16;
    case 0x15:
      BOOL v14 = v13 != 0;
      int v15 = 13;
      goto LABEL_3;
    case 0x16:
      int v50 = 15;
      char v49 = v13 != 0;
      goto LABEL_16;
    case 0x17:
    case 0x19:
    case 0x1ALL:
      int v50 = 9;
      char v49 = v13 != 0;
      goto LABEL_16;
    case 0x18:
      BOOL v14 = v13 != 0;
      int v15 = 14;
      goto LABEL_3;
    case 0x1BLL:
    case 0x1CLL:
    case 0x1DLL:
    case 0x1ELL:
      BOOL v14 = v13 != 0;
      int v15 = 9;
LABEL_3:
      int v50 = v15;
      char v49 = v14;
LABEL_16:
      _SIPommesSuggestionsProcessPhotoAttribute(v7, v8, v9, (uint64_t)v10, v11, (uint64_t)v5, v6, (uint64_t)v12, v49, v50);
      return;
    case 0x29:
      bzero(buffer, 0x3E8uLL);
      CFIndex v25 = *v5;
      CFLocaleRef v26 = CFLocaleCopyCurrent();
      if (!v26) {
        goto LABEL_47;
      }
      CFLocaleRef v27 = v26;
      unint64_t v28 = CFDateFormatterCreate(0, v26, kCFDateFormatterLongStyle, kCFDateFormatterNoStyle);
      if (v28)
      {
        unint64_t v29 = v28;
        CFArrayRef v30 = (const __CFArray *)CFDateFormatterCopyProperty(v28, (CFDateFormatterKey)*MEMORY[0x1E4F1D0E0]);
        if (v30)
        {
          CFArrayRef theArray = v30;
          CFIndex Count = CFArrayGetCount(v30);
          unint64_t v54 = 0;
          if (v25 && Count >= v25)
          {
            CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, (v25 - 1));
            if (ValueAtIndex)
            {
              CFStringRef v33 = ValueAtIndex;
              int CString = CFStringGetCString(ValueAtIndex, buffer, 1000, 0x8000100u);
              unint64_t v35 = buffer;
              if (!CString) {
                unint64_t v35 = 0;
              }
              unint64_t v54 = v35;
              CFRelease(v33);
            }
            else
            {
              unint64_t v54 = 0;
            }
          }
          CFRelease(theArray);
          unint64_t v40 = v54;
        }
        else
        {
          unint64_t v40 = 0;
        }
        CFRelease(v29);
        CFRelease(v27);
        if (v40)
        {
          char v44 = v13 != 0;
          size_t v45 = strlen(v40);
          int v46 = 19;
          goto LABEL_55;
        }
      }
      else
      {
        CFRelease(v27);
      }
LABEL_47:
      int v17 = *__error();
      unint64_t v47 = _SILogForLogForCategory(14);
      if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
        goto LABEL_57;
      }
      *(_DWORD *)at = 136315394;
      *(void *)&at[4] = "_SIPommesSuggestionsProcessPhotosAttribute";
      __int16 v59 = 1024;
      int v60 = 1717;
      uint64_t v19 = "%s:%d: converting month to string returned null";
      uint64_t v20 = at;
      long long v21 = v47;
      uint32_t v22 = 18;
      goto LABEL_59;
    case 0x2ALL:
      bzero(buffer, 0x3E8uLL);
      CFArrayRef theArraya = (CFArrayRef)*v5;
      CFLocaleRef v36 = CFLocaleCopyCurrent();
      if (!v36) {
        goto LABEL_56;
      }
      CFLocaleRef v37 = v36;
      CFDateFormatterRef v38 = CFDateFormatterCreate(0, v36, kCFDateFormatterLongStyle, kCFDateFormatterNoStyle);
      if (v38)
      {
        unint64_t v39 = v38;
        unint64_t v40 = (const char *)CFStringCreateWithCString(0, "y", 0x8000100u);
        CFDateFormatterSetFormat(v39, (CFStringRef)v40);
        if (v40)
        {
          *(void *)at = 0;
          BOOL v41 = CFCalendarCopyCurrent();
          uint64_t v55 = v40;
          if (v41)
          {
            long long v53 = v41;
            if (CFCalendarComposeAbsoluteTime(v41, (CFAbsoluteTime *)at, "y", theArraya)
              && (CFDateRef v42 = CFDateCreate(0, *(CFAbsoluteTime *)at)) != 0)
            {
              CFDateRef v52 = v42;
              CFStringRef StringWithDate = CFDateFormatterCreateStringWithDate(0, v39, v42);
              if (StringWithDate)
              {
                unint64_t v40 = buffer;
                CFStringRef cf = StringWithDate;
                if (!CFStringGetCString(StringWithDate, buffer, 1000, 0x8000100u)) {
                  unint64_t v40 = 0;
                }
                CFRelease(cf);
              }
              else
              {
                unint64_t v40 = 0;
              }
              CFRelease(v52);
            }
            else
            {
              unint64_t v40 = 0;
            }
            CFRelease(v53);
          }
          else
          {
            unint64_t v40 = 0;
          }
          CFRelease(v55);
        }
        CFRelease(v39);
        CFRelease(v37);
        if (v40)
        {
          char v44 = v13 != 0;
          size_t v45 = strlen(v40);
          int v46 = 20;
LABEL_55:
          _SIPommesSuggestionsProcessPhotoAttribute(v7, v8, v9, (uint64_t)v10, v11, (uint64_t)v40, v45, (uint64_t)v12, v44, v46);
          return;
        }
      }
      else
      {
        CFRelease(v37);
      }
LABEL_56:
      int v17 = *__error();
      BOOL v48 = _SILogForLogForCategory(14);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)at = 136315650;
        *(void *)&at[4] = "_SIPommesSuggestionsProcessPhotosAttribute";
        __int16 v59 = 1024;
        int v60 = 1727;
        __int16 v61 = 1024;
        int v62 = (int)theArraya;
        uint64_t v19 = "%s:%d: converting year to string returned null for %d";
        uint64_t v20 = at;
        long long v21 = v48;
        uint32_t v22 = 24;
LABEL_59:
        _os_log_error_impl(&dword_1BD672000, v21, OS_LOG_TYPE_ERROR, v19, (uint8_t *)v20, v22);
      }
LABEL_57:
      *__error() = v17;
      return;
    default:
      int v17 = *__error();
      uint64_t v18 = _SILogForLogForCategory(14);
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        goto LABEL_57;
      }
      *(_DWORD *)buffer = 136315650;
      *(void *)&buffer[4] = "_SIPommesSuggestionsProcessPhotosAttribute";
      *(_WORD *)&buffer[12] = 1024;
      *(_DWORD *)&buffer[14] = 1752;
      *(_WORD *)&buffer[18] = 2080;
      *(void *)&buffer[20] = v4;
      uint64_t v19 = "%s:%d: Pommes Photos Suggestions cannot handle field %s";
      uint64_t v20 = buffer;
      long long v21 = v18;
      uint32_t v22 = 28;
      goto LABEL_59;
  }
}

void _SIPommesSuggestionsProcessPhotoAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, int a10)
{
  uint64_t v10 = MEMORY[0x1F4188790](a1);
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (*(void *)(v13 + 32))
  {
    float v19 = v18;
    uint64_t v20 = v17;
    int32_t v21 = v16;
    uint32_t v22 = v15;
    uint64_t v23 = v14;
    uint64_t v24 = v13;
    uint64_t v25 = v12;
    CFLocaleRef v26 = v11;
    uint64_t v27 = v10;
    int v30 = 0;
    bzero(v34, 0xF278uLL);
    v33[0] = *(void *)(v24 + 88);
    v33[1] = v20;
    v33[2] = 0;
    v34[62064] = a9;
    pommesSuggestionsTokenizeString(v25, v22, v21, (unsigned __int16 *)&v30 + 1, (unsigned __int16 *)&v30, (uint64_t)v33, 1, 1, 0, (uint64_t)pommesSuggestionsGetTokenCallback, 0, 4u);
    if (HIWORD(v30))
    {
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      if (v23)
      {
        if (icu_search_match())
        {
          std::string::basic_string[abi:nn180100]<0>(__p, v22);
          _AccumulatePhotosCandidates(v27 + 104, v26, (uint64_t)__p, a10, v19);
          if (v29 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }
}

__n128 std::__function::__func<SIPommesPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,ci_rankingbits_s,unsigned int,char const*,char const**)::$_0,std::allocator<SIPommesPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,ci_rankingbits_s,unsigned int,char const*,char const**)::$_0>,void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1811450;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  __n128 result = *(__n128 *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  *(void *)(a2 + 88) = *(void *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

__n128 std::__function::__func<SIPommesPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,ci_rankingbits_s,unsigned int,char const*,char const**)::$_0,std::allocator<SIPommesPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,ci_rankingbits_s,unsigned int,char const*,char const**)::$_0>,void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0x60uLL);
  *(void *)long long v2 = &unk_1F1811450;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *((void *)v2 + 11) = *(void *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<SIPommesPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,ci_rankingbits_s,unsigned int,char const*,char const**)::$_0,std::allocator<SIPommesPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,ci_rankingbits_s,unsigned int,char const*,char const**)::$_0>,void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::~__func()
{
}

void *___ZL44SIPommesSpotlightPhotosSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v9 = result;
  uint64_t v10 = *(void *)(result[14] + 8);
  unint64_t v11 = *(void *)(v10 + 24);
  if (v11 != -1 && v11 >= a6)
  {
    if (a5 && *(unsigned char *)(*(void *)(result[15] + 8) + 24))
    {
      uint64_t v22 = result[19];
      uint64_t v23 = result[18] + 144;
      uint64_t v24 = v9[20];
      uint64_t v25 = v9[21];
      uint64_t v26 = v9[22];
      uint64_t v27 = v9[23];
      char v28 = *((unsigned char *)v9 + 212);
      long long v29 = *((_OWORD *)v9 + 5);
      v31[2] = *((_OWORD *)v9 + 4);
      v31[3] = v29;
      v31[4] = *((_OWORD *)v9 + 6);
      long long v30 = *((_OWORD *)v9 + 3);
      v31[0] = *((_OWORD *)v9 + 2);
      v31[1] = v30;
      return (void *)_SIPommesSuggestionsProcessTopicAttribute(v23, v22, v24, v25, v26, a2, a3, a4, a5, v27, v28, 1, 6, v31, *((_DWORD *)v9 + 52), *(_WORD *)((char *)v9 + 213), HIBYTE(*(_WORD *)((char *)v9 + 213)));
    }
  }
  else
  {
    *(void *)(v10 + 24) = a6;
    if ((double)(int)a3 * 0.3 <= (double)(unint64_t)result[17])
    {
      uint64_t v13 = result[19];
      uint64_t v14 = result[18] + 144;
      uint64_t v15 = v9[20];
      uint64_t v16 = v9[21];
      uint64_t v17 = v9[22];
      uint64_t v18 = v9[23];
      char v19 = *((unsigned char *)v9 + 212);
      long long v20 = *((_OWORD *)v9 + 5);
      v32[2] = *((_OWORD *)v9 + 4);
      v32[3] = v20;
      v32[4] = *((_OWORD *)v9 + 6);
      long long v21 = *((_OWORD *)v9 + 3);
      v32[0] = *((_OWORD *)v9 + 2);
      v32[1] = v21;
      __n128 result = (void *)_SIPommesSuggestionsProcessTopicAttribute(v14, v13, v15, v16, v17, a2, a3, a4, a5, v18, v19, 0, 6, v32, *((_DWORD *)v9 + 52), *(_WORD *)((char *)v9 + 213), HIBYTE(*(_WORD *)((char *)v9 + 213)));
      *(unsigned char *)(*(void *)(v9[15] + 8) + 24) = (_BYTE)result;
    }
  }
  return result;
}

uint64_t ___ZL44SIPommesSpotlightPhotosSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke_2(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6 = *(void *)(*(void *)(result + 112) + 8);
  unint64_t v7 = *(void *)(v6 + 24);
  if (v7 == -1 || v7 < a6)
  {
    *(void *)(v6 + 24) = a6;
    uint64_t v12 = *(void *)(result + 128);
    uint64_t v13 = *(void *)(result + 120) + 304;
    uint64_t v14 = *(void *)(result + 136);
    uint64_t v15 = *(void *)(result + 144);
    uint64_t v16 = *(void *)(result + 152);
    uint64_t v17 = *(void *)(result + 160);
    char v18 = *(unsigned char *)(result + 184);
    long long v19 = *(_OWORD *)(result + 80);
    v21[2] = *(_OWORD *)(result + 64);
    v21[3] = v19;
    v21[4] = *(_OWORD *)(result + 96);
    long long v20 = *(_OWORD *)(result + 48);
    v21[0] = *(_OWORD *)(result + 32);
    v21[1] = v20;
    return _SIPommesSuggestionsProcessTopicAttribute(v13, v12, v14, v15, v16, a2, a3, a4, a5, v17, v18, 0, 23, v21, *(_DWORD *)(result + 180), *(_WORD *)(result + 185), HIBYTE(*(_WORD *)(result + 185)));
  }
  return result;
}

uint64_t std::__function::__func<SIPommesSpotlightPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,_SuggestionsModel *,CITokenizer *,unsigned int const**,int,char const**,si_completion_pattern_s *,char const**,unsigned int,ci_rankingbits_s,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0,std::allocator<SIPommesSpotlightPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,_SuggestionsModel *,CITokenizer *,unsigned int const**,int,char const**,si_completion_pattern_s *,char const**,unsigned int,ci_rankingbits_s,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0>,void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::operator()(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = **(void **)(result + 8);
  if (v3 >= 5)
  {
    uint64_t v4 = *a3;
    if ((double)(int)*a3 * 0.3 <= (double)v3)
    {
      uint64_t v5 = *a2;
      uint64_t v6 = **(void **)(result + 32) + 184;
      uint64_t v7 = **(void **)(result + 40);
      uint64_t v8 = **(void **)(result + 48);
      uint64_t v9 = **(void **)(result + 56);
      uint64_t v10 = **(void **)(result + 64);
      uint64_t v11 = **(void **)(result + 72);
      uint64_t v12 = *(_OWORD **)(result + 88);
      char v13 = **(unsigned char **)(result + 80);
      long long v14 = v12[3];
      v16[2] = v12[2];
      v16[3] = v14;
      v16[4] = v12[4];
      long long v15 = v12[1];
      v16[0] = *v12;
      v16[1] = v15;
      return _SIPommesSuggestionsProcessTopicAttribute(v6, v7, v8, v9, v10, v5, v4, 0, 0, v11, v13, 0, 6, v16, **(_DWORD **)(result + 104), **(unsigned char **)(result + 112), **(unsigned char **)(result + 120));
    }
  }
  return result;
}

__n128 std::__function::__func<SIPommesSpotlightPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,_SuggestionsModel *,CITokenizer *,unsigned int const**,int,char const**,si_completion_pattern_s *,char const**,unsigned int,ci_rankingbits_s,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0,std::allocator<SIPommesSpotlightPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,_SuggestionsModel *,CITokenizer *,unsigned int const**,int,char const**,si_completion_pattern_s *,char const**,unsigned int,ci_rankingbits_s,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0>,void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1811498;
  long long v2 = *(_OWORD *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  __n128 result = *(__n128 *)(a1 + 72);
  long long v6 = *(_OWORD *)(a1 + 88);
  long long v7 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 104) = v7;
  *(_OWORD *)(a2 + 88) = v6;
  *(__n128 *)(a2 + 72) = result;
  return result;
}

__n128 std::__function::__func<SIPommesSpotlightPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,_SuggestionsModel *,CITokenizer *,unsigned int const**,int,char const**,si_completion_pattern_s *,char const**,unsigned int,ci_rankingbits_s,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0,std::allocator<SIPommesSpotlightPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,_SuggestionsModel *,CITokenizer *,unsigned int const**,int,char const**,si_completion_pattern_s *,char const**,unsigned int,ci_rankingbits_s,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0>,void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0x88uLL);
  *(void *)long long v2 = &unk_1F1811498;
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

void std::__function::__func<SIPommesSpotlightPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,_SuggestionsModel *,CITokenizer *,unsigned int const**,int,char const**,si_completion_pattern_s *,char const**,unsigned int,ci_rankingbits_s,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0,std::allocator<SIPommesSpotlightPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,_SuggestionsModel *,CITokenizer *,unsigned int const**,int,char const**,si_completion_pattern_s *,char const**,unsigned int,ci_rankingbits_s,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0>,void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::~__func()
{
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    long long v7 = (uint64_t *)a2;
  }
  else {
    long long v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v9;
      if (v9 >= v11) {
        unint64_t v14 = v9 % v11;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v9;
    }
    long long v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v14);
    if (v15)
    {
      for (CFIndex i = *v15; i; CFIndex i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2)) {
            return;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  char v18 = operator new(0x28uLL);
  v18[1] = v10;
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  v18[4] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__rehash<true>(a1, v24);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v14 = v10 % v11;
      }
      else {
        unint64_t v14 = v10;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v10;
    }
  }
  uint64_t v25 = *(void *)a1;
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v14);
  if (v26)
  {
    *char v18 = *v26;
LABEL_44:
    *uint64_t v26 = v18;
    goto LABEL_45;
  }
  uint64_t v27 = *(void *)(a1 + 16);
  *char v18 = v27;
  *(void *)(a1 + 16) = v18;
  *(void *)(v25 + 8 * v14) = a1 + 16;
  if (v27)
  {
    unint64_t v28 = *(void *)(v27 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    uint64_t v26 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
}

void *std::getline[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, uint64_t a2, unsigned __int8 a3)
{
  char v11 = 0;
  MEMORY[0x1C1880CF0](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    long long v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    unint64_t v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    ++v6;
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void joinStringArrayWithDelim(uint64_t *a1, std::string *this)
{
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
  }
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  while (v5 != v4)
  {
    int v6 = *(char *)(v5 + 23);
    if (v6 >= 0) {
      long long v7 = (const std::string::value_type *)v5;
    }
    else {
      long long v7 = *(const std::string::value_type **)v5;
    }
    if (v6 >= 0) {
      std::string::size_type v8 = *(unsigned __int8 *)(v5 + 23);
    }
    else {
      std::string::size_type v8 = *(void *)(v5 + 8);
    }
    std::string::append(this, v7, v8);
    uint64_t v4 = a1[1];
    if (v5 != v4 - 24)
    {
      std::string::push_back(this, 32);
      uint64_t v4 = a1[1];
    }
    v5 += 24;
  }
}

BOOL std::__includes[abi:nn180100]<std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::__less<void,void> &,std::__identity,std::__identity>(void *a1, void *a2, void *a3, void *a4)
{
  BOOL v4 = a3 == a4;
  if (a3 != a4 && a1 != a2)
  {
    while (1)
    {
      uint64_t v5 = a3[4];
      uint64_t v6 = a1[4];
      if (v5 < v6) {
        break;
      }
      if (v6 >= v5)
      {
        std::string::size_type v8 = (void *)a3[1];
        if (v8)
        {
          do
          {
            long long v7 = v8;
            std::string::size_type v8 = (void *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            long long v7 = (void *)a3[2];
            BOOL v9 = *v7 == (void)a3;
            a3 = v7;
          }
          while (!v9);
        }
      }
      else
      {
        long long v7 = a3;
      }
      unint64_t v10 = (void *)a1[1];
      if (v10)
      {
        do
        {
          char v11 = v10;
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          char v11 = (void *)a1[2];
          BOOL v9 = *v11 == (void)a1;
          a1 = v11;
        }
        while (!v9);
      }
      BOOL v4 = v7 == a4;
      if (v7 != a4)
      {
        a1 = v11;
        a3 = v7;
        if (v11 != a2) {
          continue;
        }
      }
      return v4;
    }
    return 0;
  }
  return v4;
}

double std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::insert_iterator<std::set<long long>>>(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  *(void *)&long long v12 = a4;
  *((void *)&v12 + 1) = a5;
  if (a2 != a3)
  {
    do
    {
      std::insert_iterator<std::set<long long>>::operator=[abi:nn180100]((uint64_t)&v12, v5[4]);
      std::string::size_type v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          BOOL v9 = v8;
          std::string::size_type v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          BOOL v9 = (void *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          uint64_t v5 = v9;
        }
        while (!v10);
      }
      uint64_t v5 = v9;
    }
    while (v9 != a3);
    uint64_t v5 = a3;
  }
  *(void *)a1 = v5;
  double result = *(double *)&v12;
  *(_OWORD *)(a1 + 8) = v12;
  return result;
}

uint64_t std::insert_iterator<std::set<long long>>::operator=[abi:nn180100](uint64_t a1, uint64_t a2)
{
  long long v3 = std::__tree<long long>::__emplace_hint_unique_key_args<long long,long long const&>(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, a2);
  *(void *)(a1 + 8) = v3;
  BOOL v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      BOOL v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      uint64_t v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      long long v3 = v5;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

void dedupSuggestions(uint64_t *a1, int64x2_t *a2)
{
  uint64_t v308 = *MEMORY[0x1E4F143B8];
  int64x2_t v288 = 0uLL;
  v289 = 0;
  uint64_t v2 = *a1;
  if (*a1 == a1[1])
  {
    uint64_t v23 = 0;
    unint64_t v22 = 0;
  }
  else
  {
    do
    {
      uint64_t v4 = v288.i64[1];
      if (v288.i64[1] >= (unint64_t)v289)
      {
        uint64_t v6 = (v288.i64[1] - v288.i64[0]) >> 5;
        if ((unint64_t)(v6 + 1) >> 59) {
          goto LABEL_397;
        }
        unint64_t v7 = ((uint64_t)v289 - v288.i64[0]) >> 4;
        if (v7 <= v6 + 1) {
          unint64_t v7 = v6 + 1;
        }
        if ((unint64_t)v289 - v288.i64[0] >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v8 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v7;
        }
        buf.__end_cap_.__value_ = (std::allocator<std::string> *)&v289;
        if (v8)
        {
          BOOL v10 = std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,_freeTextCandidate *>>>(v8);
        }
        else
        {
          BOOL v10 = 0;
          uint64_t v9 = 0;
        }
        long long v12 = (char *)&v10[4 * v6];
        value = (std::string *)&v10[4 * v9];
        buf.__end_cap_.__value_ = value;
        if (*(char *)(v2 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v10[4 * v6], *(const std::string::value_type **)v2, *(void *)(v2 + 8));
        }
        else
        {
          long long v14 = *(_OWORD *)v2;
          *((void *)v12 + 2) = *(void *)(v2 + 16);
          *(_OWORD *)long long v12 = v14;
        }
        buf.__begin_ = 0;
        buf.__first_ = 0;
        v10[4 * v6 + 3] = *(void *)(v2 + 24);
        std::__split_buffer<std::string>::pointer end = (std::__split_buffer<std::string>::pointer)(v12 + 32);
        buf.__end_ = (std::__split_buffer<std::string>::pointer)(v12 + 32);
        uint64_t v15 = v288.i64[1];
        uint64_t v16 = v288.i64[0];
        if (v288.i64[1] == v288.i64[0])
        {
          int64x2_t v18 = vdupq_n_s64(v288.u64[1]);
        }
        else
        {
          do
          {
            long long v17 = *(_OWORD *)(v15 - 32);
            *((void *)v12 - 2) = *(void *)(v15 - 16);
            *((_OWORD *)v12 - 2) = v17;
            *(void *)(v15 - 24) = 0;
            *(void *)(v15 - 16) = 0;
            *(void *)(v15 - 32) = 0;
            *((void *)v12 - 1) = *(void *)(v15 - 8);
            v12 -= 32;
            v15 -= 32;
          }
          while (v15 != v16);
          int64x2_t v18 = v288;
          std::__split_buffer<std::string>::pointer end = buf.__end_;
          value = buf.__end_cap_.__value_;
        }
        v288.i64[0] = (uint64_t)v12;
        v288.i64[1] = (uint64_t)end;
        *(int64x2_t *)&buf.__begin_ = v18;
        float v19 = v289;
        v289 = value;
        buf.__end_cap_.__value_ = v19;
        buf.__first_ = (std::__split_buffer<std::string>::pointer)v18.i64[0];
        std::__split_buffer<std::pair<std::string,_freeTextCandidate *>>::~__split_buffer((uint64_t)&buf);
      }
      else
      {
        if (*(char *)(v2 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v288.i64[1], *(const std::string::value_type **)v2, *(void *)(v2 + 8));
        }
        else
        {
          long long v5 = *(_OWORD *)v2;
          *(void *)(v288.i64[1] + 16) = *(void *)(v2 + 16);
          *(_OWORD *)uint64_t v4 = v5;
        }
        *(void *)(v4 + 24) = *(void *)(v2 + 24);
        std::__split_buffer<std::string>::pointer end = (std::__split_buffer<std::string>::pointer)(v4 + 32);
      }
      v288.i64[1] = (uint64_t)end;
      std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,_compareFreeText,std::__wrap_iter<std::pair<std::string,_freeTextCandidate *> *>>(*a1, a1[1], (a1[1] - *a1) >> 5);
      uint64_t v20 = a1[1];
      BOOL v21 = (void **)(v20 - 32);
      if (*(char *)(v20 - 9) < 0) {
        operator delete(*v21);
      }
      a1[1] = (uint64_t)v21;
      uint64_t v2 = *a1;
    }
    while ((void **)*a1 != v21);
    uint64_t v23 = v288.i64[1];
    unint64_t v22 = v288.i64[0];
    if (v288.i64[0] != v288.i64[1])
    {
      unint64_t v24 = v288.i64[1] - 32;
      if ((unint64_t)(v288.i64[1] - 32) > v288.i64[0])
      {
        do
        {
          uint64_t v25 = *(void *)(v22 + 16);
          long long v26 = *(_OWORD *)v22;
          uint64_t v27 = *(void *)(v24 + 16);
          *(_OWORD *)unint64_t v22 = *(_OWORD *)v24;
          *(void *)(v22 + 16) = v27;
          *(_OWORD *)unint64_t v24 = v26;
          *(void *)(v24 + 16) = v25;
          uint64_t v28 = *(void *)(v22 + 24);
          *(void *)(v22 + 24) = *(void *)(v24 + 24);
          *(void *)(v24 + 24) = v28;
          v22 += 32;
          v24 -= 32;
        }
        while (v22 < v24);
        uint64_t v23 = v288.i64[1];
        unint64_t v22 = v288.i64[0];
      }
    }
  }
  int64x2_t v286 = 0uLL;
  v287[0] = 0;
  std::__compressed_pair<std::string *> v29 = (std::__compressed_pair<std::string *>)0;
  long long v283 = 0u;
  long long v284 = 0u;
  uint64_t v285 = 1065353216;
  v280 = 0;
  v281 = 0;
  uint64_t v282 = 0;
  int64x2_t v278 = 0uLL;
  v279 = 0;
  if (v23 == v22)
  {
    memset(&v291, 0, 32);
    v291.__end_cap_.__value_ = (std::allocator<std::string> *)1065353216;
    goto LABEL_382;
  }
  unint64_t v30 = 0;
  v260 = (std::string *)(MEMORY[0x1E4FBA490] + 24);
  uint64_t v259 = MEMORY[0x1E4FBA490] + 64;
  v256 = (std::string *)*MEMORY[0x1E4FBA410];
  v255 = *(std::string **)(MEMORY[0x1E4FBA410] + 24);
  v257 = *(std::string **)(MEMORY[0x1E4FBA410] + 16);
  v258 = *(std::string **)(MEMORY[0x1E4FBA410] + 8);
  do
  {
    unint64_t v263 = v30;
    uint64_t v31 = *(void *)(v22 + 32 * v30 + 24);
    memset(&v277, 0, sizeof(v277));
    uint64_t v262 = v31;
    uint64_t v32 = (std::string *)(v31 + 16);
    memset(&v276, 0, sizeof(v276));
    uint64_t v307 = 0;
    std::__compressed_pair<std::string *> v305 = v29;
    std::__compressed_pair<std::string *> v306 = v29;
    std::__compressed_pair<std::string *> v303 = v29;
    std::__compressed_pair<std::string *> v304 = v29;
    std::__compressed_pair<std::string *> v301 = v29;
    std::__compressed_pair<std::string *> v302 = v29;
    std::__compressed_pair<std::string *> v299 = v29;
    std::__compressed_pair<std::string *> v300 = v29;
    *(std::__compressed_pair<std::string *> *)&v297[32] = v29;
    v298[1] = v29.std::__1::__compressed_pair_elem<std::allocator<std::string> &, 1, false>::__value_;
    *(std::__compressed_pair<std::string *> *)v297 = v29;
    *(std::__compressed_pair<std::string *> *)&v297[16] = v29;
    std::__compressed_pair<std::string *> v295 = v29;
    std::__compressed_pair<std::string *> v296 = v29;
    *(std::__compressed_pair<std::string *> *)&buf.__begin_ = v29;
    buf.__end_cap_ = v29;
    v298[0] = v259;
    buf.__first_ = v258;
    *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + v258[-1].__r_.__value_.__r.__words[0]) = v257;
    buf.__begin_ = 0;
    CFStringRef v33 = (std::ios_base *)((char *)&buf + buf.__first_[-1].__r_.__value_.__r.__words[0]);
    std::ios_base::init(v33, &buf.__end_);
    v33[1].__vftable = 0;
    v33[1].__fmtflags_ = -1;
    buf.__first_ = v260;
    v298[0] = v259;
    std::streambuf::basic_streambuf();
    unint64_t v34 = (std::string *)(MEMORY[0x1E4FBA470] + 16);
    buf.__end_ = (std::__split_buffer<std::string>::pointer)(MEMORY[0x1E4FBA470] + 16);
    uint64_t v35 = (std::allocator<std::string> *)&v297[8];
    memset(&v297[8], 0, 32);
    *(_DWORD *)&v297[40] = 8;
    std::string::operator=((std::string *)&v297[8], v32);
    *(void *)&v297[32] = 0;
    if (v297[31] >= 0)
    {
      unint64_t v36 = v297[31];
    }
    else
    {
      uint64_t v35 = *(std::allocator<std::string> **)&v297[8];
      unint64_t v36 = *(void *)&v297[16];
    }
    if ((v297[40] & 8) != 0)
    {
      buf.__end_cap_.__value_ = v35;
      v295.std::__1::__compressed_pair_elem<std::string *, 0, false>::__value_ = (std::string *)v35;
      *(void *)&v297[32] = (char *)v35 + v36;
      v295.std::__1::__compressed_pair_elem<std::allocator<std::string> &, 1, false>::__value_ = (std::allocator<std::string> *)((char *)v35 + v36);
    }
    if ((v297[40] & 0x10) != 0)
    {
      *(void *)&v297[32] = (char *)v35 + v36;
      if (v297[31] >= 0) {
        std::string::size_type v37 = 22;
      }
      else {
        std::string::size_type v37 = (*(void *)&v297[24] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      }
      std::string::resize((std::string *)&v297[8], v37, 0);
      uint64_t v38 = v297[31];
      if (v297[31] < 0) {
        uint64_t v38 = *(void *)&v297[16];
      }
      v296.std::__1::__compressed_pair_elem<std::allocator<std::string> &, 1, false>::__value_ = v35;
      v296.std::__1::__compressed_pair_elem<std::string *, 0, false>::__value_ = (std::string *)v35;
      *(void *)v297 = (char *)v35 + v38;
      if ((v297[40] & 3) != 0)
      {
        if (v36 >> 31)
        {
          uint64_t v39 = ((v36 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
          unint64_t v40 = 0x7FFFFFFF * ((v39 + ((v36 - 0x80000000 - v39) >> 1)) >> 30);
          uint64_t v35 = (std::allocator<std::string> *)((char *)v35 + v40 + 0x7FFFFFFF);
          unint64_t v36 = v36 - v40 - 0x7FFFFFFF;
          v296.std::__1::__compressed_pair_elem<std::allocator<std::string> &, 1, false>::__value_ = v35;
        }
        if (v36) {
          v296.std::__1::__compressed_pair_elem<std::allocator<std::string> &, 1, false>::__value_ = (std::allocator<std::string> *)((char *)v35 + v36);
        }
      }
    }
    long long __s = 0uLL;
    int64_t v293 = 0;
    while (1)
    {
      std::getline[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&buf, (uint64_t)&__s, 0x20u);
      if ((*((unsigned char *)&buf.__end_cap_.__value_ + buf.__first_[-1].__r_.__value_.__r.__words[0]) & 5) != 0) {
        break;
      }
      if (v293 >= 0) {
        p_s = (const char *)&__s;
      }
      else {
        p_s = (const char *)__s;
      }
      CFDateRef v42 = PRPommesStemWordWithCString(p_s, 100, 1);
      if (v42)
      {
        unint64_t v43 = v42;
        std::string::basic_string[abi:nn180100]<0>(&__p, v42);
        std::string::size_type size = (_OWORD *)v276.__r_.__value_.__l.__size_;
        if (v276.__r_.__value_.__l.__size_ >= v276.__r_.__value_.__r.__words[2])
        {
          unint64_t v48 = 0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(v276.__r_.__value_.__l.__size_ - v276.__r_.__value_.__r.__words[0]) >> 3);
          unint64_t v49 = v48 + 1;
          if (v48 + 1 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_397;
          }
          if (0x5555555555555556
             * ((uint64_t)(v276.__r_.__value_.__r.__words[2] - v276.__r_.__value_.__r.__words[0]) >> 3) > v49)
            unint64_t v49 = 0x5555555555555556
                * ((uint64_t)(v276.__r_.__value_.__r.__words[2] - v276.__r_.__value_.__r.__words[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v276.__r_.__value_.__r.__words[2] - v276.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
            unint64_t v50 = 0xAAAAAAAAAAAAAAALL;
          else {
            unint64_t v50 = v49;
          }
          v291.__end_cap_.__value_ = (std::allocator<std::string> *)&v276.__r_.__value_.__r.__words[2];
          if (v50) {
            unint64_t v50 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v50);
          }
          else {
            uint64_t v51 = 0;
          }
          unint64_t v58 = v50 + 24 * v48;
          long long v59 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v58 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v58 = v59;
          memset(&__p, 0, sizeof(__p));
          std::string::size_type v60 = v276.__r_.__value_.__l.__size_;
          std::string::size_type v61 = v276.__r_.__value_.__r.__words[0];
          if (v276.__r_.__value_.__l.__size_ == v276.__r_.__value_.__r.__words[0])
          {
            int64x2_t v64 = vdupq_n_s64(v276.__r_.__value_.__l.__size_);
            std::string::size_type v62 = v50 + 24 * v48;
          }
          else
          {
            std::string::size_type v62 = v50 + 24 * v48;
            do
            {
              long long v63 = *(_OWORD *)(v60 - 24);
              *(void *)(v62 - 8) = *(void *)(v60 - 8);
              *(_OWORD *)(v62 - 24) = v63;
              v62 -= 24;
              *(void *)(v60 - 16) = 0;
              *(void *)(v60 - 8) = 0;
              *(void *)(v60 - 24) = 0;
              v60 -= 24;
            }
            while (v60 != v61);
            int64x2_t v64 = *(int64x2_t *)&v276.__r_.__value_.__l.__data_;
          }
          std::string::size_type v65 = v58 + 24;
          v276.__r_.__value_.__r.__words[0] = v62;
          v276.__r_.__value_.__l.__size_ = v58 + 24;
          *(int64x2_t *)&v291.__begin_ = v64;
          long long v66 = (std::string *)v276.__r_.__value_.__r.__words[2];
          v276.__r_.__value_.__r.__words[2] = v50 + 24 * v51;
          v291.__end_cap_.__value_ = v66;
          v291.__first_ = (std::__split_buffer<std::string>::pointer)v64.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v291);
          v276.__r_.__value_.__l.__size_ = v65;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v45 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v276.__r_.__value_.__l.__size_ + 16) = *((void *)&__p.__r_.__value_.__l + 2);
          *std::string::size_type size = v45;
          memset(&__p, 0, sizeof(__p));
          v276.__r_.__value_.__l.__size_ = (std::string::size_type)size + 24;
        }
        free(v43);
      }
      else
      {
        int v46 = (_OWORD *)v276.__r_.__value_.__l.__size_;
        if (v276.__r_.__value_.__l.__size_ >= v276.__r_.__value_.__r.__words[2])
        {
          unint64_t v52 = 0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(v276.__r_.__value_.__l.__size_ - v276.__r_.__value_.__r.__words[0]) >> 3);
          unint64_t v53 = v52 + 1;
          if (v52 + 1 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_397;
          }
          if (0x5555555555555556
             * ((uint64_t)(v276.__r_.__value_.__r.__words[2] - v276.__r_.__value_.__r.__words[0]) >> 3) > v53)
            unint64_t v53 = 0x5555555555555556
                * ((uint64_t)(v276.__r_.__value_.__r.__words[2] - v276.__r_.__value_.__r.__words[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v276.__r_.__value_.__r.__words[2] - v276.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
            unint64_t v54 = 0xAAAAAAAAAAAAAAALL;
          else {
            unint64_t v54 = v53;
          }
          v291.__end_cap_.__value_ = (std::allocator<std::string> *)&v276.__r_.__value_.__r.__words[2];
          if (v54)
          {
            uint64_t v55 = (std::string *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v54);
            uint64_t v57 = v56;
          }
          else
          {
            uint64_t v55 = 0;
            uint64_t v57 = 0;
          }
          double v68 = &v55->__r_.__value_.__s.__data_[24 * v52];
          if (SHIBYTE(v293) < 0)
          {
            std::string::__init_copy_ctor_external(v55 + v52, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
          }
          else
          {
            long long v69 = __s;
            *((void *)v68 + 2) = v293;
            *(_OWORD *)double v68 = v69;
          }
          std::string::size_type v70 = v276.__r_.__value_.__l.__size_;
          std::string::size_type v71 = v276.__r_.__value_.__r.__words[0];
          if (v276.__r_.__value_.__l.__size_ == v276.__r_.__value_.__r.__words[0])
          {
            int64x2_t v74 = vdupq_n_s64(v276.__r_.__value_.__l.__size_);
            std::string::size_type v72 = (std::string::size_type)(v55 + v52);
          }
          else
          {
            std::string::size_type v72 = (std::string::size_type)(v55 + v52);
            do
            {
              long long v73 = *(_OWORD *)(v70 - 24);
              *(void *)(v72 - 8) = *(void *)(v70 - 8);
              *(_OWORD *)(v72 - 24) = v73;
              v72 -= 24;
              *(void *)(v70 - 16) = 0;
              *(void *)(v70 - 8) = 0;
              *(void *)(v70 - 24) = 0;
              v70 -= 24;
            }
            while (v70 != v71);
            int64x2_t v74 = *(int64x2_t *)&v276.__r_.__value_.__l.__data_;
          }
          std::string::size_type v67 = (std::string::size_type)(v68 + 24);
          v276.__r_.__value_.__r.__words[0] = v72;
          v276.__r_.__value_.__l.__size_ = (std::string::size_type)(v68 + 24);
          *(int64x2_t *)&v291.__begin_ = v74;
          uint64_t v75 = (std::string *)v276.__r_.__value_.__r.__words[2];
          v276.__r_.__value_.__r.__words[2] = (std::string::size_type)&v55[v57];
          v291.__end_cap_.__value_ = v75;
          v291.__first_ = (std::__split_buffer<std::string>::pointer)v74.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v291);
        }
        else
        {
          if (SHIBYTE(v293) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v276.__r_.__value_.__l.__size_, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
          }
          else
          {
            long long v47 = __s;
            *(void *)(v276.__r_.__value_.__l.__size_ + 16) = v293;
            _OWORD *v46 = v47;
          }
          std::string::size_type v67 = (std::string::size_type)v46 + 24;
        }
        v276.__r_.__value_.__l.__size_ = v67;
      }
    }
    if (SHIBYTE(v293) < 0) {
      operator delete((void *)__s);
    }
    buf.__first_ = v256;
    *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + v256[-1].__r_.__value_.__r.__words[0]) = v255;
    buf.__end_ = v34;
    if ((v297[31] & 0x80000000) != 0) {
      operator delete(*(void **)&v297[8]);
    }
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x1C1880F90](v298);
    joinStringArrayWithDelim((uint64_t *)&v276, &v277);
    int v76 = *__error();
    uint64_t v77 = _SILogForLogForCategory(14);
    if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(v262 + 39) < 0) {
        uint64_t v32 = (std::string *)v32->__r_.__value_.__r.__words[0];
      }
      size_t v78 = &v277;
      if ((v277.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        size_t v78 = (std::string *)v277.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__first_) = 136315394;
      *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = v32;
      WORD2(buf.__begin_) = 2080;
      *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__begin_ + 6) = v78;
      _os_log_impl(&dword_1BD672000, v77, OS_LOG_TYPE_DEFAULT, "[Pommes_Suggestions]mail_debug: stemmed '%s' -> '%s'", (uint8_t *)&buf, 0x16u);
    }
    *__error() = v76;
    int v79 = SHIBYTE(v277.__r_.__value_.__r.__words[2]);
    std::string::size_type v253 = v277.__r_.__value_.__l.__size_;
    v254 = (const std::string::value_type *)v277.__r_.__value_.__r.__words[0];
    if ((v277.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v80 = &v277;
    }
    else {
      long long v80 = (std::string *)v277.__r_.__value_.__r.__words[0];
    }
    if ((v277.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v81 = HIBYTE(v277.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v81 = v277.__r_.__value_.__l.__size_;
    }
    unint64_t v82 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)v80, v81);
    unint64_t v83 = *((void *)&v283 + 1);
    if (!*((void *)&v283 + 1)) {
      goto LABEL_132;
    }
    unint64_t v84 = v82;
    uint8x8_t v85 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v283 + 8));
    v85.i16[0] = vaddlv_u8(v85);
    unint64_t v86 = v85.u32[0];
    if (v85.u32[0] > 1uLL)
    {
      unint64_t v87 = v82;
      if (v82 >= *((void *)&v283 + 1)) {
        unint64_t v87 = v82 % *((void *)&v283 + 1);
      }
    }
    else
    {
      unint64_t v87 = (*((void *)&v283 + 1) - 1) & v82;
    }
    uint64_t v88 = v283;
    long long v89 = *(unsigned __int8 ***)(v283 + 8 * v87);
    if (!v89 || (long long v90 = *v89) == 0)
    {
LABEL_132:
      uint64_t v92 = v288.i64[0];
      unint64_t v93 = v263;
      unint64_t v94 = v288.i64[0] + 32 * v263;
      uint64_t v95 = v286.i64[1];
      if (v286.i64[1] >= v287[0])
      {
        uint64_t v97 = (v286.i64[1] - v286.i64[0]) >> 5;
        if ((unint64_t)(v97 + 1) >> 59) {
          goto LABEL_397;
        }
        unint64_t v98 = (v287[0] - v286.i64[0]) >> 4;
        if (v98 <= v97 + 1) {
          unint64_t v98 = v97 + 1;
        }
        if (v287[0] - v286.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
          unint64_t v99 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v99 = v98;
        }
        buf.__end_cap_.__value_ = (std::allocator<std::string> *)v287;
        if (v99)
        {
          int v101 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,_freeTextCandidate *>>>(v99);
        }
        else
        {
          int v101 = 0;
          uint64_t v100 = 0;
        }
        int v103 = &v101[32 * v97];
        BOOL v104 = (std::string *)&v101[32 * v100];
        buf.__end_cap_.__value_ = v104;
        if (*(char *)(v94 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v101[32 * v97], *(const std::string::value_type **)v94, *(void *)(v94 + 8));
        }
        else
        {
          long long v105 = *(_OWORD *)v94;
          *((void *)v103 + 2) = *(void *)(v94 + 16);
          *(_OWORD *)int v103 = v105;
        }
        buf.__begin_ = 0;
        buf.__first_ = 0;
        char v106 = &v101[32 * v97];
        unint64_t v93 = v263;
        *((void *)v106 + 3) = *(void *)(v92 + 32 * v263 + 24);
        std::__split_buffer<std::string>::pointer v102 = (std::__split_buffer<std::string>::pointer)(v103 + 32);
        buf.__end_ = (std::__split_buffer<std::string>::pointer)(v103 + 32);
        uint64_t v107 = v286.i64[1];
        uint64_t v108 = v286.i64[0];
        if (v286.i64[1] == v286.i64[0])
        {
          int64x2_t v110 = vdupq_n_s64(v286.u64[1]);
        }
        else
        {
          do
          {
            long long v109 = *(_OWORD *)(v107 - 32);
            *((void *)v103 - 2) = *(void *)(v107 - 16);
            *((_OWORD *)v103 - 2) = v109;
            *(void *)(v107 - 24) = 0;
            *(void *)(v107 - 16) = 0;
            *(void *)(v107 - 32) = 0;
            *((void *)v103 - 1) = *(void *)(v107 - 8);
            v103 -= 32;
            v107 -= 32;
          }
          while (v107 != v108);
          int64x2_t v110 = v286;
          std::__split_buffer<std::string>::pointer v102 = buf.__end_;
          BOOL v104 = buf.__end_cap_.__value_;
        }
        v286.i64[0] = (uint64_t)v103;
        v286.i64[1] = (uint64_t)v102;
        *(int64x2_t *)&buf.__begin_ = v110;
        char v111 = (std::string *)v287[0];
        v287[0] = v104;
        buf.__end_cap_.__value_ = v111;
        buf.__first_ = (std::__split_buffer<std::string>::pointer)v110.i64[0];
        std::__split_buffer<std::pair<std::string,_freeTextCandidate *>>::~__split_buffer((uint64_t)&buf);
      }
      else
      {
        if (*(char *)(v94 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v286.i64[1], *(const std::string::value_type **)v94, *(void *)(v94 + 8));
        }
        else
        {
          long long v96 = *(_OWORD *)v94;
          *(void *)(v286.i64[1] + 16) = *(void *)(v94 + 16);
          *(_OWORD *)uint64_t v95 = v96;
        }
        *(void *)(v95 + 24) = *(void *)(v92 + 32 * v263 + 24);
        std::__split_buffer<std::string>::pointer v102 = (std::__split_buffer<std::string>::pointer)(v95 + 32);
      }
      v286.i64[1] = (uint64_t)v102;
      std::vector<std::vector<std::string>>::push_back[abi:nn180100]((char **)&v280, (long long **)&v276);
      char v112 = (_OWORD *)v278.i64[1];
      if (v278.i64[1] < (unint64_t)v279)
      {
        if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v278.i64[1], v277.__r_.__value_.__l.__data_, v277.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v113 = *(_OWORD *)&v277.__r_.__value_.__l.__data_;
          *(void *)(v278.i64[1] + 16) = *((void *)&v277.__r_.__value_.__l + 2);
          *char v112 = v113;
        }
        BOOL v120 = (char *)v112 + 24;
LABEL_177:
        v278.i64[1] = (uint64_t)v120;
        int64x2_t v129 = v286;
        if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&buf, v277.__r_.__value_.__l.__data_, v277.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&buf.__first_ = *(_OWORD *)&v277.__r_.__value_.__l.__data_;
          buf.__end_ = (std::__split_buffer<std::string>::pointer)v277.__r_.__value_.__r.__words[2];
        }
        buf.__end_cap_.__value_ = (std::string *)(((v129.i64[1] - v129.i64[0]) >> 5) - 1);
        std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::pair<std::string,unsigned long>>((uint64_t)&v283, (uint64_t)&buf, (long long *)&buf);
        if (SHIBYTE(buf.__end_) < 0) {
          operator delete(buf.__first_);
        }
        goto LABEL_182;
      }
      unint64_t v114 = 0xAAAAAAAAAAAAAAABLL * ((v278.i64[1] - v278.i64[0]) >> 3);
      unint64_t v115 = v114 + 1;
      if (v114 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        if (0x5555555555555556 * (((uint64_t)v279 - v278.i64[0]) >> 3) > v115) {
          unint64_t v115 = 0x5555555555555556 * (((uint64_t)v279 - v278.i64[0]) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v279 - v278.i64[0]) >> 3) >= 0x555555555555555) {
          unint64_t v116 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v116 = v115;
        }
        buf.__end_cap_.__value_ = (std::allocator<std::string> *)&v279;
        if (v116)
        {
          __int16 v117 = (std::string *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v116);
          uint64_t v119 = v118;
        }
        else
        {
          __int16 v117 = 0;
          uint64_t v119 = 0;
        }
        long long v121 = &v117->__r_.__value_.__s.__data_[24 * v114];
        if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v117 + v114, v277.__r_.__value_.__l.__data_, v277.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v122 = *(_OWORD *)&v277.__r_.__value_.__l.__data_;
          *((void *)v121 + 2) = *((void *)&v277.__r_.__value_.__l + 2);
          *(_OWORD *)long long v121 = v122;
        }
        uint64_t v123 = v278.i64[1];
        uint64_t v124 = v278.i64[0];
        if (v278.i64[1] == v278.i64[0])
        {
          int64x2_t v127 = vdupq_n_s64(v278.u64[1]);
          uint64_t v125 = &v117->__r_.__value_.__s.__data_[24 * v114];
        }
        else
        {
          uint64_t v125 = &v117->__r_.__value_.__s.__data_[24 * v114];
          do
          {
            long long v126 = *(_OWORD *)(v123 - 24);
            *((void *)v125 - 1) = *(void *)(v123 - 8);
            *(_OWORD *)(v125 - 24) = v126;
            v125 -= 24;
            *(void *)(v123 - 16) = 0;
            *(void *)(v123 - 8) = 0;
            *(void *)(v123 - 24) = 0;
            v123 -= 24;
          }
          while (v123 != v124);
          int64x2_t v127 = v278;
        }
        BOOL v120 = v121 + 24;
        v278.i64[0] = (uint64_t)v125;
        v278.i64[1] = (uint64_t)(v121 + 24);
        *(int64x2_t *)&buf.__begin_ = v127;
        long long v128 = v279;
        v279 = &v117[v119];
        buf.__end_cap_.__value_ = v128;
        buf.__first_ = (std::__split_buffer<std::string>::pointer)v127.i64[0];
        std::__split_buffer<std::string>::~__split_buffer(&buf);
        unint64_t v93 = v263;
        goto LABEL_177;
      }
LABEL_397:
      abort();
    }
    uint64_t v261 = *((void *)&v283 + 1) - 1;
    while (1)
    {
      unint64_t v91 = *((void *)v90 + 1);
      if (v91 == v84) {
        break;
      }
      if (v86 > 1)
      {
        if (v91 >= v83) {
          v91 %= v83;
        }
      }
      else
      {
        v91 &= v261;
      }
      if (v91 != v87) {
        goto LABEL_132;
      }
LABEL_131:
      long long v90 = *(unsigned __int8 **)v90;
      if (!v90) {
        goto LABEL_132;
      }
    }
    if (!std::equal_to<std::string>::operator()[abi:nn180100](v90 + 16, (unsigned __int8 *)&v277)) {
      goto LABEL_131;
    }
    unint64_t v130 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)v80, v81);
    unint64_t v131 = v130;
    if (v86 > 1)
    {
      unint64_t v132 = v130;
      if (v130 >= v83) {
        unint64_t v132 = v130 % v83;
      }
    }
    else
    {
      unint64_t v132 = v261 & v130;
    }
    int v133 = *(void ***)(v88 + 8 * v132);
    unint64_t v93 = v263;
    if (v133)
    {
      char v134 = (char *)*v133;
      if (*v133)
      {
        do
        {
          unint64_t v135 = *((void *)v134 + 1);
          if (v135 == v131)
          {
            if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)v134 + 16, (unsigned __int8 *)&v277))
            {
              uint64_t v159 = v262;
              goto LABEL_229;
            }
          }
          else
          {
            if (v86 > 1)
            {
              if (v135 >= v83) {
                v135 %= v83;
              }
            }
            else
            {
              v135 &= v261;
            }
            if (v135 != v132) {
              break;
            }
          }
          char v134 = *(char **)v134;
        }
        while (v134);
      }
    }
    char v134 = (char *)operator new(0x30uLL);
    *(void *)char v134 = 0;
    *((void *)v134 + 1) = v131;
    char v136 = (std::string *)(v134 + 16);
    if (v79 < 0)
    {
      std::string::__init_copy_ctor_external(v136, v254, v253);
    }
    else
    {
      *(_OWORD *)&v136->__r_.__value_.__l.__data_ = *(_OWORD *)&v277.__r_.__value_.__l.__data_;
      *((void *)v134 + 4) = *((void *)&v277.__r_.__value_.__l + 2);
    }
    float v137 = (float)(unint64_t)(*((void *)&v284 + 1) + 1);
    *((void *)v134 + 5) = 0;
    uint64_t v159 = v262;
    if ((float)(*(float *)&v285 * (float)v83) < v137)
    {
      BOOL v139 = v83 < 3 || v86 > 1;
      unint64_t v140 = v139 | (2 * v83);
      unint64_t v141 = vcvtps_u32_f32(v137 / *(float *)&v285);
      if (v140 <= v141) {
        size_t v142 = v141;
      }
      else {
        size_t v142 = v140;
      }
      std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__rehash<true>((uint64_t)&v283, v142);
      unint64_t v83 = *((void *)&v283 + 1);
      if ((*((void *)&v283 + 1) & (*((void *)&v283 + 1) - 1)) != 0)
      {
        if (v131 >= *((void *)&v283 + 1)) {
          unint64_t v132 = v131 % *((void *)&v283 + 1);
        }
        else {
          unint64_t v132 = v131;
        }
      }
      else
      {
        unint64_t v132 = (*((void *)&v283 + 1) - 1) & v131;
      }
    }
    uint64_t v143 = v283;
    v144 = *(void **)(v283 + 8 * v132);
    if (v144)
    {
      *(void *)char v134 = *v144;
      goto LABEL_227;
    }
    *(void *)char v134 = v284;
    *(void *)&long long v284 = v134;
    *(void *)(v143 + 8 * v132) = &v284;
    if (*(void *)v134)
    {
      unint64_t v145 = *(void *)(*(void *)v134 + 8);
      if ((v83 & (v83 - 1)) != 0)
      {
        if (v145 >= v83) {
          v145 %= v83;
        }
      }
      else
      {
        v145 &= v83 - 1;
      }
      v144 = (void *)(v283 + 8 * v145);
LABEL_227:
      void *v144 = v134;
    }
    ++*((void *)&v284 + 1);
LABEL_229:
    uint64_t v146 = *((void *)v134 + 5);
    if (*(char *)(v159 + 39) < 0) {
      unint64_t v147 = *(void *)(v159 + 24);
    }
    else {
      unint64_t v147 = *(unsigned __int8 *)(v159 + 39);
    }
    uint64_t v148 = *(void *)(v286.i64[0] + 32 * v146 + 24);
    if (*(char *)(v148 + 39) < 0) {
      unint64_t v149 = *(void *)(v148 + 24);
    }
    else {
      unint64_t v149 = *(unsigned __int8 *)(v148 + 39);
    }
    if (v147 >= v149) {
      goto LABEL_182;
    }
    uint64_t v150 = v288.i64[0];
    unint64_t v151 = v288.i64[0] + 32 * v263;
    uint64_t v152 = v286.i64[1];
    if (v286.i64[1] < v287[0])
    {
      if (*(char *)(v151 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v286.i64[1], *(const std::string::value_type **)v151, *(void *)(v151 + 8));
      }
      else
      {
        long long v153 = *(_OWORD *)v151;
        *(void *)(v286.i64[1] + 16) = *(void *)(v151 + 16);
        *(_OWORD *)uint64_t v152 = v153;
      }
      *(void *)(v152 + 24) = *(void *)(v150 + 32 * v263 + 24);
      std::__split_buffer<std::string>::pointer v160 = (std::__split_buffer<std::string>::pointer)(v152 + 32);
      goto LABEL_258;
    }
    uint64_t v154 = (v286.i64[1] - v286.i64[0]) >> 5;
    if ((unint64_t)(v154 + 1) >> 59) {
      goto LABEL_397;
    }
    unint64_t v155 = (v287[0] - v286.i64[0]) >> 4;
    if (v155 <= v154 + 1) {
      unint64_t v155 = v154 + 1;
    }
    if (v287[0] - v286.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL) {
      unint64_t v156 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v156 = v155;
    }
    buf.__end_cap_.__value_ = (std::allocator<std::string> *)v287;
    if (v156)
    {
      uint64_t v158 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,_freeTextCandidate *>>>(v156);
    }
    else
    {
      uint64_t v158 = 0;
      uint64_t v157 = 0;
    }
    uint64_t v161 = &v158[32 * v154];
    v162 = (std::string *)&v158[32 * v157];
    buf.__end_cap_.__value_ = v162;
    if (*(char *)(v151 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v158[32 * v154], *(const std::string::value_type **)v151, *(void *)(v151 + 8));
    }
    else
    {
      long long v163 = *(_OWORD *)v151;
      *((void *)v161 + 2) = *(void *)(v151 + 16);
      *(_OWORD *)uint64_t v161 = v163;
    }
    buf.__begin_ = 0;
    buf.__first_ = 0;
    int v164 = &v158[32 * v154];
    unint64_t v93 = v263;
    *((void *)v164 + 3) = *(void *)(v150 + 32 * v263 + 24);
    std::__split_buffer<std::string>::pointer v160 = (std::__split_buffer<std::string>::pointer)(v161 + 32);
    buf.__end_ = (std::__split_buffer<std::string>::pointer)(v161 + 32);
    uint64_t v165 = v286.i64[1];
    uint64_t v166 = v286.i64[0];
    if (v286.i64[1] == v286.i64[0])
    {
      int64x2_t v168 = vdupq_n_s64(v286.u64[1]);
    }
    else
    {
      do
      {
        long long v167 = *(_OWORD *)(v165 - 32);
        *((void *)v161 - 2) = *(void *)(v165 - 16);
        *((_OWORD *)v161 - 2) = v167;
        *(void *)(v165 - 24) = 0;
        *(void *)(v165 - 16) = 0;
        *(void *)(v165 - 32) = 0;
        *((void *)v161 - 1) = *(void *)(v165 - 8);
        v161 -= 32;
        v165 -= 32;
      }
      while (v165 != v166);
      int64x2_t v168 = v286;
      std::__split_buffer<std::string>::pointer v160 = buf.__end_;
      v162 = buf.__end_cap_.__value_;
    }
    v286.i64[0] = (uint64_t)v161;
    v286.i64[1] = (uint64_t)v160;
    *(int64x2_t *)&buf.__begin_ = v168;
    long long v169 = (std::string *)v287[0];
    v287[0] = v162;
    buf.__end_cap_.__value_ = v169;
    buf.__first_ = (std::__split_buffer<std::string>::pointer)v168.i64[0];
    std::__split_buffer<std::pair<std::string,_freeTextCandidate *>>::~__split_buffer((uint64_t)&buf);
LABEL_258:
    v286.i64[1] = (uint64_t)v160;
    std::vector<std::vector<std::string>>::push_back[abi:nn180100]((char **)&v280, (long long **)&v276);
    long long v170 = (_OWORD *)v278.i64[1];
    if (v278.i64[1] < (unint64_t)v279)
    {
      if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v278.i64[1], v277.__r_.__value_.__l.__data_, v277.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v171 = *(_OWORD *)&v277.__r_.__value_.__l.__data_;
        *(void *)(v278.i64[1] + 16) = *((void *)&v277.__r_.__value_.__l + 2);
        *long long v170 = v171;
      }
      long long v178 = (char *)v170 + 24;
      goto LABEL_281;
    }
    unint64_t v172 = 0xAAAAAAAAAAAAAAABLL * ((v278.i64[1] - v278.i64[0]) >> 3);
    unint64_t v173 = v172 + 1;
    if (v172 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_397;
    }
    if (0x5555555555555556 * (((uint64_t)v279 - v278.i64[0]) >> 3) > v173) {
      unint64_t v173 = 0x5555555555555556 * (((uint64_t)v279 - v278.i64[0]) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v279 - v278.i64[0]) >> 3) >= 0x555555555555555) {
      unint64_t v174 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v174 = v173;
    }
    buf.__end_cap_.__value_ = (std::allocator<std::string> *)&v279;
    if (v174)
    {
      v175 = (std::string *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v174);
      uint64_t v177 = v176;
    }
    else
    {
      v175 = 0;
      uint64_t v177 = 0;
    }
    long long v179 = &v175->__r_.__value_.__s.__data_[24 * v172];
    if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v175 + v172, v277.__r_.__value_.__l.__data_, v277.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v180 = *(_OWORD *)&v277.__r_.__value_.__l.__data_;
      *((void *)v179 + 2) = *((void *)&v277.__r_.__value_.__l + 2);
      *(_OWORD *)long long v179 = v180;
    }
    uint64_t v181 = v278.i64[1];
    uint64_t v182 = v278.i64[0];
    if (v278.i64[1] == v278.i64[0])
    {
      int64x2_t v185 = vdupq_n_s64(v278.u64[1]);
      uint64_t v183 = &v175->__r_.__value_.__s.__data_[24 * v172];
    }
    else
    {
      uint64_t v183 = &v175->__r_.__value_.__s.__data_[24 * v172];
      do
      {
        long long v184 = *(_OWORD *)(v181 - 24);
        *((void *)v183 - 1) = *(void *)(v181 - 8);
        *(_OWORD *)(v183 - 24) = v184;
        v183 -= 24;
        *(void *)(v181 - 16) = 0;
        *(void *)(v181 - 8) = 0;
        *(void *)(v181 - 24) = 0;
        v181 -= 24;
      }
      while (v181 != v182);
      int64x2_t v185 = v278;
    }
    long long v178 = v179 + 24;
    v278.i64[0] = (uint64_t)v183;
    v278.i64[1] = (uint64_t)(v179 + 24);
    *(int64x2_t *)&buf.__begin_ = v185;
    uint64_t v186 = v279;
    v279 = &v175[v177];
    buf.__end_cap_.__value_ = v186;
    buf.__first_ = (std::__split_buffer<std::string>::pointer)v185.i64[0];
    std::__split_buffer<std::string>::~__split_buffer(&buf);
    unint64_t v93 = v263;
LABEL_281:
    v278.i64[1] = (uint64_t)v178;
    int64x2_t v187 = v286;
    if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&buf, v277.__r_.__value_.__l.__data_, v277.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&buf.__first_ = *(_OWORD *)&v277.__r_.__value_.__l.__data_;
      buf.__end_ = (std::__split_buffer<std::string>::pointer)v277.__r_.__value_.__r.__words[2];
    }
    buf.__end_cap_.__value_ = (std::string *)(((v187.i64[1] - v187.i64[0]) >> 5) - 1);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::pair<std::string,unsigned long>>((uint64_t)&v283, (uint64_t)&buf, (long long *)&buf);
    if (SHIBYTE(buf.__end_) < 0) {
      operator delete(buf.__first_);
    }
    uint64_t v188 = v286.i64[1];
    uint64_t v189 = v286.i64[0] + 32 * v146;
    uint64_t v190 = v189 + 32;
    if (v189 + 32 != v286.i64[1])
    {
      do
      {
        if (*(char *)(v189 + 23) < 0) {
          operator delete(*(void **)v189);
        }
        *(_OWORD *)uint64_t v189 = *(_OWORD *)(v189 + 32);
        uint64_t v191 = *(void *)(v189 + 48);
        *(unsigned char *)(v189 + 55) = 0;
        *(unsigned char *)(v189 + 32) = 0;
        uint64_t v192 = v189 + 32;
        uint64_t v193 = *(void *)(v189 + 56);
        *(void *)(v189 + 16) = v191;
        *(void *)(v189 + 24) = v193;
        uint64_t v194 = v189 + 64;
        v189 += 32;
      }
      while (v194 != v188);
      uint64_t v190 = v286.i64[1];
      uint64_t v189 = v192;
    }
    while (v190 != v189)
    {
      if (*(char *)(v190 - 9) < 0) {
        operator delete(*(void **)(v190 - 32));
      }
      v190 -= 32;
    }
    v286.i64[1] = v189;
    char v195 = v281;
    BOOL v196 = (std::vector<std::string> *)((char *)v280 + 24 * v146);
    if (&v196[1] != (std::vector<std::string> *)v281)
    {
      uint64_t v197 = (char *)v280 + 24 * v146;
      do
      {
        std::vector<std::string>::__vdeallocate(v196);
        long long v198 = *(_OWORD *)(v197 + 24);
        v197 += 24;
        *(_OWORD *)&v196->__begin_ = v198;
        v196->__end_cap_.__value_ = v196[1].__end_cap_.__value_;
        v196[1].__end_ = 0;
        v196[1].__end_cap_.__value_ = 0;
        *(void *)uint64_t v197 = 0;
        v199 = (std::string *)&v196[2];
        BOOL v196 = (std::vector<std::string> *)v197;
      }
      while (v199 != v195);
      BOOL v196 = (std::vector<std::string> *)v197;
    }
    while (v195 != (std::string *)v196)
    {
      buf.__first_ = --v195;
      std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&buf);
    }
    v281 = (std::string *)v196;
    uint64_t v200 = v278.i64[1];
    uint64_t v201 = v278.i64[0] + 24 * v146;
    uint64_t v202 = v201 + 24;
    if (v201 + 24 != v278.i64[1])
    {
      do
      {
        if (*(char *)(v201 + 23) < 0) {
          operator delete(*(void **)v201);
        }
        *(_OWORD *)uint64_t v201 = *(_OWORD *)(v201 + 24);
        *(void *)(v201 + 16) = *(void *)(v201 + 40);
        *(unsigned char *)(v201 + 47) = 0;
        uint64_t v203 = v201 + 48;
        *(unsigned char *)(v201 + 24) = 0;
        v201 += 24;
      }
      while (v203 != v200);
      uint64_t v202 = v278.i64[1];
    }
    while (v202 != v201)
    {
      if (*(char *)(v202 - 1) < 0) {
        operator delete(*(void **)(v202 - 24));
      }
      v202 -= 24;
    }
    v278.i64[1] = v201;
LABEL_182:
    buf.__first_ = &v276;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&buf);
    if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v277.__r_.__value_.__l.__data_);
    }
    unint64_t v30 = v93 + 1;
    unint64_t v22 = v288.i64[0];
    std::__compressed_pair<std::string *> v29 = (std::__compressed_pair<std::string *>)0;
  }
  while (v30 < (v288.i64[1] - v288.i64[0]) >> 5);
  uint64_t v204 = v286.i64[0];
  memset(&v291, 0, 32);
  v291.__end_cap_.__value_ = (std::allocator<std::string> *)1065353216;
  if (v286.i64[1] != v286.i64[0])
  {
    unint64_t v205 = 0;
    v206 = (void *)&__s + 1;
    do
    {
      uint64_t v207 = *(void *)(v204 + 32 * v205 + 24);
      memset(&__p, 0, sizeof(__p));
      unint64_t v208 = v278.i64[0] + 24 * v205;
      if (*(char *)(v208 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v208, *(void *)(v208 + 8));
      }
      else {
        std::string __p = *(std::string *)v208;
      }
      memset(&v277, 0, sizeof(v277));
      std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>(&v277, *((long long **)v280 + 3 * v205), *((long long **)v280 + 3 * v205 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v280 + 3 * v205 + 1) - *((void *)v280 + 3 * v205)) >> 3));
      if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((uint64_t)v291.__first_, (unint64_t)v291.__begin_, (uint64_t)&__p))
      {
        v273[0] = 0;
        v273[1] = 0;
        v272 = v273;
        std::set<long long>::insert[abi:nn180100]<std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>>((uint64_t *)&v272, *(void **)(v207 + 40), (void *)(v207 + 48));
        v209 = std::__hash_table<std::__hash_value_type<std::string,std::set<long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v291, (uint64_t)&__p, (uint64_t)&__p);
        v271[0] = 0;
        v271[1] = 0;
        v270 = v271;
        std::set<long long>::insert[abi:nn180100]<std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>>((uint64_t *)&v270, *((void **)v209 + 5), (void *)v209 + 6);
        v210 = v270;
        v211 = v272;
        if (std::__includes[abi:nn180100]<std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::__less<void,void> &,std::__identity,std::__identity>(v270, v271, v272, v273)|| std::__includes[abi:nn180100]<std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::__less<void,void> &,std::__identity,std::__identity>(v211, v273, v210, v271))
        {
          std::__tree<long long>::destroy(v271[0]);
          std::__tree<long long>::destroy(v273[0]);
        }
        else
        {
          v223 = &__s;
          v268 = 0;
          uint64_t v269 = 0;
          v267 = &v268;
          std::set<long long>::insert[abi:nn180100]<std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>>((uint64_t *)&v267, *(void **)(v207 + 40), (void *)(v207 + 48));
          v224 = std::__hash_table<std::__hash_value_type<std::string,std::set<long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v291, (uint64_t)&__p, (uint64_t)&__p);
          v265 = 0;
          uint64_t v266 = 0;
          v264 = &v265;
          std::set<long long>::insert[abi:nn180100]<std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>>((uint64_t *)&v264, *((void **)v224 + 5), (void *)v224 + 6);
          void *v206 = 0;
          v206[1] = 0;
          *(void *)&long long __s = v206;
          uint64_t v225 = (uint64_t)v267;
          uint64_t v226 = (uint64_t)v264;
          v276.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s;
          v276.__r_.__value_.__l.__size_ = (std::string::size_type)v206;
          if (v267 == &v268)
          {
            std::string::size_type v236 = (std::string::size_type)v206;
LABEL_364:
            v237 = (void *)v226;
            v238 = &v265;
            uint64_t v239 = (uint64_t)v223;
          }
          else
          {
            while ((void **)v226 != &v265)
            {
              uint64_t v227 = *(void *)(v225 + 32);
              uint64_t v228 = *(void *)(v226 + 32);
              if (v227 >= v228)
              {
                if (v228 >= v227)
                {
                  v232 = *(void **)(v225 + 8);
                  if (v232)
                  {
                    do
                    {
                      v231 = v232;
                      v232 = (void *)*v232;
                    }
                    while (v232);
                  }
                  else
                  {
                    do
                    {
                      v231 = *(void **)(v225 + 16);
                      BOOL v233 = *v231 == v225;
                      uint64_t v225 = (uint64_t)v231;
                    }
                    while (!v233);
                  }
                }
                else
                {
                  std::insert_iterator<std::set<long long>>::operator=[abi:nn180100]((uint64_t)&v276, v228);
                  v231 = (void *)v225;
                }
                v234 = *(void **)(v226 + 8);
                if (v234)
                {
                  do
                  {
                    uint64_t v226 = (uint64_t)v234;
                    v234 = (void *)*v234;
                  }
                  while (v234);
                }
                else
                {
                  do
                  {
                    uint64_t v235 = v226;
                    uint64_t v226 = *(void *)(v226 + 16);
                  }
                  while (*(void *)v226 != v235);
                }
                uint64_t v225 = (uint64_t)v231;
              }
              else
              {
                std::insert_iterator<std::set<long long>>::operator=[abi:nn180100]((uint64_t)&v276, *(void *)(v225 + 32));
                v229 = *(void **)(v225 + 8);
                if (v229)
                {
                  do
                  {
                    uint64_t v225 = (uint64_t)v229;
                    v229 = (void *)*v229;
                  }
                  while (v229);
                }
                else
                {
                  do
                  {
                    uint64_t v230 = v225;
                    uint64_t v225 = *(void *)(v225 + 16);
                  }
                  while (*(void *)v225 != v230);
                }
              }
              if ((void **)v225 == &v268)
              {
                std::string::size_type v236 = v276.__r_.__value_.__l.__size_;
                v223 = (long long *)v276.__r_.__value_.__r.__words[0];
                goto LABEL_364;
              }
            }
            std::string::size_type v236 = v276.__r_.__value_.__l.__size_;
            uint64_t v239 = v276.__r_.__value_.__r.__words[0];
            v237 = (void *)v225;
            v238 = &v268;
          }
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::insert_iterator<std::set<long long>>>((uint64_t)&buf, v237, v238, v239, v236);
          float v240 = 1.0;
          if (v269 + v266) {
            float v240 = (double)(unint64_t)v293 / (double)(unint64_t)(v266 + v269);
          }
          std::__tree<long long>::destroy(*((void **)&__s + 1));
          std::__tree<long long>::destroy(v265);
          std::__tree<long long>::destroy(v268);
          std::__tree<long long>::destroy(v271[0]);
          std::__tree<long long>::destroy(v273[0]);
          if (v240 > 0.3)
          {
            v241 = (long long *)(v286.i64[0] + 32 * v205);
            unint64_t v242 = a2->u64[1];
            if (v242 >= a2[1].i64[0])
            {
              v243 = std::vector<std::pair<std::string,_freeTextCandidate *>>::__push_back_slow_path<std::pair<std::string,_freeTextCandidate *> const&>(a2, v241);
            }
            else
            {
              std::vector<std::pair<std::string,_freeTextCandidate *>>::__construct_one_at_end[abi:nn180100]<std::pair<std::string,_freeTextCandidate *> const&>((uint64_t)a2, v241);
              v243 = (char *)(v242 + 32);
            }
            a2->i64[1] = (uint64_t)v243;
          }
        }
      }
      else
      {
        void *v206 = 0;
        v206[1] = 0;
        *(void *)&long long __s = v206;
        std::set<long long>::insert[abi:nn180100]<std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>>((uint64_t *)&__s, *(void **)(v207 + 40), (void *)(v207 + 48));
        std::pair<std::string,std::set<long long>>::pair[abi:nn180100]<std::string&,std::set<long long>,0>((std::string *)&buf, (long long *)&__p, (std::string::size_type *)&__s);
        std::__hash_table<std::__hash_value_type<std::string,std::set<long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<long long>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::set<long long>>>((uint64_t)&v291, (uint64_t)&buf, (uint64_t)&buf);
        std::__tree<long long>::destroy(buf.__end_cap_.__value_);
        if (SHIBYTE(buf.__end_) < 0) {
          operator delete(buf.__first_);
        }
        std::__tree<long long>::destroy(*((void **)&__s + 1));
        v212 = (long long *)(v286.i64[0] + 32 * v205);
        unint64_t v213 = a2->u64[1];
        if (v213 >= a2[1].i64[0])
        {
          v214 = std::vector<std::pair<std::string,_freeTextCandidate *>>::__push_back_slow_path<std::pair<std::string,_freeTextCandidate *> const&>(a2, v212);
        }
        else
        {
          std::vector<std::pair<std::string,_freeTextCandidate *>>::__construct_one_at_end[abi:nn180100]<std::pair<std::string,_freeTextCandidate *> const&>((uint64_t)a2, v212);
          v214 = (char *)(v213 + 32);
        }
        a2->i64[1] = (uint64_t)v214;
        std::string::size_type v215 = v277.__r_.__value_.__r.__words[0];
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v277.__r_.__value_.__l.__size_ - v277.__r_.__value_.__r.__words[0]) >> 3) >= 3)
        {
          v216 = v206;
          std::string::size_type v217 = v277.__r_.__value_.__l.__size_ - 24;
          long long __s = 0uLL;
          int64_t v293 = 0;
          int64_t v218 = v277.__r_.__value_.__l.__size_ - 24 - v277.__r_.__value_.__r.__words[0];
          if (v218)
          {
            unint64_t v219 = 0xAAAAAAAAAAAAAAABLL * (v218 >> 3);
            if (v219 > 0xAAAAAAAAAAAAAAALL) {
              goto LABEL_397;
            }
            v220 = (std::string *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v219);
            *(void *)&long long __s = v220;
            *((void *)&__s + 1) = v220;
            int64_t v293 = (int64_t)&v220[v221];
            do
            {
              if (*(char *)(v215 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v220, *(const std::string::value_type **)v215, *(void *)(v215 + 8));
              }
              else
              {
                long long v222 = *(_OWORD *)v215;
                v220->__r_.__value_.__r.__words[2] = *(void *)(v215 + 16);
                *(_OWORD *)&v220->__r_.__value_.__l.__data_ = v222;
              }
              v215 += 24;
              ++v220;
            }
            while (v215 != v217);
            *((void *)&__s + 1) = v220;
          }
          memset(&v276, 0, sizeof(v276));
          joinStringArrayWithDelim((uint64_t *)&__s, &v276);
          v206 = v216;
          if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((uint64_t)v291.__first_, (unint64_t)v291.__begin_, (uint64_t)&v276))
          {
            v275[0] = 0;
            v275[1] = 0;
            v274 = v275;
            std::set<long long>::insert[abi:nn180100]<std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>>((uint64_t *)&v274, *(void **)(v207 + 40), (void *)(v207 + 48));
            std::pair<std::string,std::set<long long>>::pair[abi:nn180100]<std::string&,std::set<long long>,0>((std::string *)&buf, (long long *)&v276, (std::string::size_type *)&v274);
            std::__hash_table<std::__hash_value_type<std::string,std::set<long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<long long>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::set<long long>>>((uint64_t)&v291, (uint64_t)&buf, (uint64_t)&buf);
            std::__tree<long long>::destroy(buf.__end_cap_.__value_);
            if (SHIBYTE(buf.__end_) < 0) {
              operator delete(buf.__first_);
            }
            std::__tree<long long>::destroy(v275[0]);
          }
          if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v276.__r_.__value_.__l.__data_);
          }
          buf.__first_ = (std::__split_buffer<std::string>::pointer)&__s;
          std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&buf);
        }
      }
      buf.__first_ = &v277;
      std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&buf);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v205;
      uint64_t v204 = v286.i64[0];
    }
    while (v205 < (v286.i64[1] - v286.i64[0]) >> 5);
    if (v291.__end_cap_.__value_)
    {
      std::__hash_table<std::__hash_value_type<std::string,std::set<long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<long long>>>>::__deallocate_node(v291.__end_->__r_.__value_.__r.__words);
      v291.__end_ = 0;
      std::__split_buffer<std::string>::pointer begin = v291.__begin_;
      if (v291.__begin_)
      {
        std::__split_buffer<std::string>::pointer v245 = 0;
        do
        {
          v291.__first_->__r_.__value_.__r.__words[(void)v245] = 0;
          std::__split_buffer<std::string>::pointer v245 = (std::__split_buffer<std::string>::pointer)((char *)v245 + 1);
        }
        while (begin != v245);
      }
      v291.__end_cap_.__value_ = 0;
    }
  }
LABEL_382:
  if (*((void *)&v284 + 1))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v284);
    *(void *)&long long v284 = 0;
    uint64_t v246 = *((void *)&v283 + 1);
    if (*((void *)&v283 + 1))
    {
      uint64_t v247 = 0;
      do
        *(void *)(v283 + 8 * v247++) = 0;
      while (v246 != v247);
    }
    *((void *)&v284 + 1) = 0;
  }
  std::__hash_table<std::__hash_value_type<std::string,std::set<long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<long long>>>>::__deallocate_node(v291.__end_->__r_.__value_.__r.__words);
  std::__split_buffer<std::string>::pointer first = v291.__first_;
  v291.__first_ = 0;
  if (first) {
    operator delete(first);
  }
  buf.__first_ = (std::__split_buffer<std::string>::pointer)&v278;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&buf);
  v249 = (std::string *)v280;
  if (v280)
  {
    v250 = v281;
    while (v250 != v249)
    {
      buf.__first_ = --v250;
      std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&buf);
    }
    operator delete(v249);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v284);
  v251 = (void *)v283;
  *(void *)&long long v283 = 0;
  if (v251) {
    operator delete(v251);
  }
  buf.__first_ = (std::__split_buffer<std::string>::pointer)&v286;
  std::vector<std::pair<std::string,_freeTextCandidate *>>::__destroy_vector::operator()[abi:nn180100]((void ***)&buf);
  buf.__first_ = (std::__split_buffer<std::string>::pointer)&v288;
  std::vector<std::pair<std::string,_freeTextCandidate *>>::__destroy_vector::operator()[abi:nn180100]((void ***)&buf);
}

char *std::vector<std::pair<std::string,_freeTextCandidate *>>::__push_back_slow_path<std::pair<std::string,_freeTextCandidate *> const&>(int64x2_t *a1, long long *a2)
{
  uint64_t v2 = (a1->i64[1] - a1->i64[0]) >> 5;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59) {
    abort();
  }
  uint64_t v6 = a1 + 1;
  uint64_t v7 = a1[1].i64[0] - a1->i64[0];
  if (v7 >> 4 > v3) {
    unint64_t v3 = v7 >> 4;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v8 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v3;
  }
  unint64_t v24 = (uint64_t *)v6;
  if (v8)
  {
    BOOL v10 = std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,_freeTextCandidate *>>>(v8);
  }
  else
  {
    BOOL v10 = 0;
    uint64_t v9 = 0;
  }
  char v11 = (char *)&v10[4 * v2];
  long long v12 = (char *)&v10[4 * v9];
  uint64_t v23 = v12;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v10[4 * v2], *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v13 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)char v11 = v13;
  }
  v22.i64[0] = 0;
  v10[4 * v2 + 3] = *((void *)a2 + 3);
  long long v14 = v11 + 32;
  v22.i64[1] = (uint64_t)(v11 + 32);
  uint64_t v16 = a1->i64[0];
  unint64_t v15 = a1->u64[1];
  if (v15 == a1->i64[0])
  {
    int64x2_t v18 = vdupq_n_s64(v15);
  }
  else
  {
    do
    {
      long long v17 = *(_OWORD *)(v15 - 32);
      *((void *)v11 - 2) = *(void *)(v15 - 16);
      *((_OWORD *)v11 - 2) = v17;
      *(void *)(v15 - 24) = 0;
      *(void *)(v15 - 16) = 0;
      *(void *)(v15 - 32) = 0;
      *((void *)v11 - 1) = *(void *)(v15 - 8);
      v11 -= 32;
      v15 -= 32;
    }
    while (v15 != v16);
    int64x2_t v18 = *a1;
    long long v14 = (char *)v22.i64[1];
    long long v12 = v23;
  }
  a1->i64[0] = (uint64_t)v11;
  a1->i64[1] = (uint64_t)v14;
  int64x2_t v22 = v18;
  float v19 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v12;
  uint64_t v23 = v19;
  uint64_t v21 = v18.i64[0];
  std::__split_buffer<std::pair<std::string,_freeTextCandidate *>>::~__split_buffer((uint64_t)&v21);
  return v14;
}

void std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,_compareFreeText,std::__wrap_iter<std::pair<std::string,_freeTextCandidate *> *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)a1;
    *(void *)float v19 = *(void *)(a1 + 8);
    *(void *)&v19[7] = *(void *)(a1 + 15);
    char v8 = *(unsigned char *)(a1 + 23);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    uint64_t v9 = *(void *)(a1 + 24);
    int64_t v10 = (unint64_t)(a3 - 2) >> 1;
    uint64_t v11 = a1;
    do
    {
      uint64_t v12 = v11 + 32 * (v6 + 1);
      uint64_t v13 = 2 * v6;
      uint64_t v6 = (2 * v6) | 1;
      uint64_t v14 = v13 + 2;
      if (v14 < a3 && *(float *)(*(void *)(v12 + 24) + 4) > *(float *)(*(void *)(v12 + 56) + 4))
      {
        v12 += 32;
        uint64_t v6 = v14;
      }
      if (*(char *)(v11 + 23) < 0) {
        operator delete(*(void **)v11);
      }
      long long v15 = *(_OWORD *)v12;
      *(void *)(v11 + 16) = *(void *)(v12 + 16);
      *(_OWORD *)uint64_t v11 = v15;
      *(unsigned char *)(v12 + 23) = 0;
      *(unsigned char *)uint64_t v12 = 0;
      *(void *)(v11 + 24) = *(void *)(v12 + 24);
      uint64_t v11 = v12;
    }
    while (v6 <= v10);
    uint64_t v16 = (void **)(a2 - 32);
    int v17 = *(char *)(v12 + 23);
    if (a2 - 32 == v12)
    {
      if (v17 < 0) {
        operator delete(*(void **)v12);
      }
      *(void *)uint64_t v12 = v7;
      *(void *)(v12 + 8) = *(void *)v19;
      *(void *)(v12 + 15) = *(void *)&v19[7];
      *(unsigned char *)(v12 + 23) = v8;
      *(void *)(v12 + 24) = v9;
    }
    else
    {
      if (v17 < 0) {
        operator delete(*(void **)v12);
      }
      long long v18 = *(_OWORD *)v16;
      *(void *)(v12 + 16) = *(void *)(a2 - 16);
      *(_OWORD *)uint64_t v12 = v18;
      *(unsigned char *)(a2 - 9) = 0;
      *(unsigned char *)(a2 - 32) = 0;
      *(void *)(v12 + 24) = *(void *)(a2 - 8);
      if (*(char *)(a2 - 9) < 0) {
        operator delete(*v16);
      }
      *(void *)(a2 - 32) = v7;
      *(void *)(a2 - 24) = *(void *)v19;
      *(void *)(a2 - 17) = *(void *)&v19[7];
      *(unsigned char *)(a2 - 9) = v8;
      *(void *)(a2 - 8) = v9;
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,_compareFreeText &,std::__wrap_iter<std::pair<std::string,_freeTextCandidate *> *>>(a1, v12 + 32, (v12 + 32 - a1) >> 5);
    }
  }
}

void std::vector<std::vector<std::string>>::push_back[abi:nn180100](char **a1, long long **a2)
{
  long long v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *(void *)long long v5 = 0;
    *((void *)v5 + 1) = 0;
    *((void *)v5 + 2) = 0;
    std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>(v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
    uint64_t v6 = v5 + 24;
    goto LABEL_20;
  }
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
  if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)*a1) >> 3);
  uint64_t v9 = 2 * v8;
  if (2 * v8 <= v7 + 1) {
    uint64_t v9 = v7 + 1;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10)
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v11 = (char *)operator new(24 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = &v11[24 * v7];
  uint64_t v13 = &v11[24 * v10];
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>(v12, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  uint64_t v6 = v12 + 24;
  uint64_t v14 = *a1;
  long long v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v12;
    a1[1] = v6;
    a1[2] = v13;
    if (!v15) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  do
  {
    *((void *)v12 - 3) = 0;
    *((void *)v12 - 2) = 0;
    v12 -= 24;
    *((void *)v12 + 2) = 0;
    long long v16 = *(_OWORD *)(v15 - 24);
    v15 -= 24;
    *(_OWORD *)uint64_t v12 = v16;
    *((void *)v12 + 2) = *((void *)v15 + 2);
    *(void *)long long v15 = 0;
    *((void *)v15 + 1) = 0;
    *((void *)v15 + 2) = 0;
  }
  while (v15 != v14);
  int v17 = *a1;
  long long v15 = a1[1];
  *a1 = v12;
  a1[1] = v6;
  a1[2] = v13;
  if (v15 != v17)
  {
    do
    {
      v15 -= 24;
      long long v18 = (void **)v15;
      std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v18);
    }
    while (v15 != v17);
    long long v15 = v17;
  }
  if (v15) {
LABEL_19:
  }
    operator delete(v15);
LABEL_20:
  a1[1] = v6;
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::pair<std::string,unsigned long>>(uint64_t a1, uint64_t a2, long long *a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    unint64_t v7 = (uint64_t *)a2;
  }
  else {
    unint64_t v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v9;
      if (v9 >= v11) {
        unint64_t v14 = v9 % v11;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v9;
    }
    long long v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v14);
    if (v15)
    {
      for (CFIndex i = *v15; i; CFIndex i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2)) {
            return;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  long long v18 = operator new(0x30uLL);
  long long v19 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  uint64_t v20 = *((void *)a3 + 2);
  uint64_t v21 = *((void *)a3 + 3);
  *((void *)a3 + 2) = 0;
  v18[1] = v10;
  *((_OWORD *)v18 + 1) = v19;
  v18[4] = v20;
  v18[5] = v21;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__rehash<true>(a1, v27);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v14 = v10 % v11;
      }
      else {
        unint64_t v14 = v10;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v10;
    }
  }
  uint64_t v28 = *(void *)a1;
  std::__compressed_pair<std::string *> v29 = *(void **)(*(void *)a1 + 8 * v14);
  if (v29)
  {
    *long long v18 = *v29;
LABEL_44:
    void *v29 = v18;
    goto LABEL_45;
  }
  uint64_t v30 = *(void *)(a1 + 16);
  *long long v18 = v30;
  *(void *)(a1 + 16) = v18;
  *(void *)(v28 + 8 * v14) = a1 + 16;
  if (v30)
  {
    unint64_t v31 = *(void *)(v30 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11) {
        v31 %= v11;
      }
    }
    else
    {
      v31 &= v11 - 1;
    }
    std::__compressed_pair<std::string *> v29 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_44;
  }
LABEL_45:
  ++*(void *)(a1 + 24);
}

void std::vector<std::pair<std::string,_freeTextCandidate *>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  char v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0) {
          operator delete(*(v4 - 4));
        }
        v4 -= 4;
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::set<long long>::insert[abi:nn180100]<std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    long long v5 = (uint64_t **)result;
    int v6 = result + 1;
    do
    {
      double result = std::__tree<long long>::__emplace_hint_unique_key_args<long long,long long const&>(v5, v6, v4[4], v4[4]);
      unint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          unint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          unint64_t v4 = v8;
        }
        while (!v9);
      }
      unint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

std::string *std::pair<std::string,std::set<long long>>::pair[abi:nn180100]<std::string&,std::set<long long>,0>(std::string *this, long long *a2, std::string::size_type *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = *a3;
  int v6 = a3 + 1;
  std::string::size_type v7 = a3[1];
  this[1].__r_.__value_.__l.__size_ = v7;
  unint64_t v8 = &this[1].__r_.__value_.__s.__data_[8];
  std::string::size_type v9 = a3[2];
  this[1].__r_.__value_.__r.__words[2] = v9;
  if (v9)
  {
    *(void *)(v7 + 16) = v8;
    *a3 = (std::string::size_type)v6;
    void *v6 = 0;
    a3[2] = 0;
  }
  else
  {
    this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  }
  return this;
}

void std::__hash_table<std::__hash_value_type<std::string,std::set<long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<long long>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::set<long long>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    std::string::size_type v7 = (uint64_t *)a2;
  }
  else {
    std::string::size_type v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v9;
      if (v9 >= v11) {
        unint64_t v14 = v9 % v11;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v9;
    }
    long long v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v14);
    if (v15)
    {
      for (CFIndex i = *v15; i; CFIndex i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2)) {
            return;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  long long v18 = (void *)(a1 + 16);
  uint64_t v37 = 0;
  long long v19 = operator new(0x40uLL);
  uint64_t v20 = v19;
  v36[0] = v19;
  v36[1] = a1 + 16;
  *long long v19 = 0;
  v19[1] = v10;
  *((_OWORD *)v19 + 1) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v21 = *(void *)(a3 + 16);
  uint64_t v22 = *(void *)(a3 + 24);
  *(void *)(a3 + 16) = 0;
  float v23 = (void *)(a3 + 32);
  uint64_t v24 = *(void *)(a3 + 32);
  v19[4] = v21;
  v19[5] = v22;
  v19[6] = v24;
  unint64_t v25 = (char *)(v19 + 6);
  uint64_t v26 = *(void *)(a3 + 40);
  v19[7] = v26;
  if (v26)
  {
    *(void *)(v24 + 16) = v25;
    *(void *)(a3 + 24) = v23;
    *float v23 = 0;
    *(void *)(a3 + 40) = 0;
  }
  else
  {
    v19[5] = v25;
  }
  LOBYTE(v37) = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v29 = 1;
    if (v11 >= 3) {
      BOOL v29 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v30 = v29 | (2 * v11);
    unint64_t v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31) {
      size_t v32 = v31;
    }
    else {
      size_t v32 = v30;
    }
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__rehash<true>(a1, v32);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v14 = v10 % v11;
      }
      else {
        unint64_t v14 = v10;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v10;
    }
  }
  uint64_t v33 = *(void *)a1;
  unint64_t v34 = *(void **)(*(void *)a1 + 8 * v14);
  if (v34)
  {
    *uint64_t v20 = *v34;
LABEL_47:
    *unint64_t v34 = v20;
    goto LABEL_48;
  }
  *uint64_t v20 = *v18;
  *long long v18 = v20;
  *(void *)(v33 + 8 * v14) = v18;
  if (*v20)
  {
    unint64_t v35 = *(void *)(*v20 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v35 >= v11) {
        v35 %= v11;
      }
    }
    else
    {
      v35 &= v11 - 1;
    }
    unint64_t v34 = (void *)(*(void *)a1 + 8 * v35);
    goto LABEL_47;
  }
LABEL_48:
  v36[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<long long>>,void *>>>>::reset[abi:nn180100]((uint64_t)v36);
}

void std::vector<std::pair<std::string,_freeTextCandidate *>>::__construct_one_at_end[abi:nn180100]<std::pair<std::string,_freeTextCandidate *> const&>(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(v4 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v4 = v5;
  }
  *(void *)(v4 + 24) = *((void *)a2 + 3);
  *(void *)(a1 + 8) = v4 + 32;
}

char *std::__hash_table<std::__hash_value_type<std::string,std::set<long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    std::string::size_type v7 = (uint64_t *)a2;
  }
  else {
    std::string::size_type v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v9;
      if (v9 >= v11) {
        unint64_t v14 = v9 % v11;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v9;
    }
    long long v15 = *(void ***)(*(void *)a1 + 8 * v14);
    if (v15)
    {
      long long v16 = (char *)*v15;
      if (*v15)
      {
        do
        {
          unint64_t v17 = *((void *)v16 + 1);
          if (v17 == v10)
          {
            if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)v16 + 16, (unsigned __int8 *)a2))
            {
              return v16;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v17 >= v11) {
                v17 %= v11;
              }
            }
            else
            {
              v17 &= v11 - 1;
            }
            if (v17 != v14) {
              break;
            }
          }
          long long v16 = *(char **)v16;
        }
        while (v16);
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  long long v18 = (void *)(a1 + 16);
  uint64_t v31 = 0;
  long long v16 = (char *)operator new(0x40uLL);
  v30[0] = v16;
  v30[1] = a1 + 16;
  *(void *)long long v16 = 0;
  *((void *)v16 + 1) = v10;
  long long v19 = (std::string *)(v16 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v16 + 4) = *(void *)(a3 + 16);
  }
  *((void *)v16 + 6) = 0;
  *((void *)v16 + 7) = 0;
  *((void *)v16 + 5) = v16 + 48;
  LOBYTE(v31) = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v14 = v10 % v11;
      }
      else {
        unint64_t v14 = v10;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  float v27 = *(void **)(*(void *)a1 + 8 * v14);
  if (v27)
  {
    *(void *)long long v16 = *v27;
LABEL_47:
    void *v27 = v16;
    goto LABEL_48;
  }
  *(void *)long long v16 = *v18;
  *long long v18 = v16;
  *(void *)(v26 + 8 * v14) = v18;
  if (*(void *)v16)
  {
    unint64_t v28 = *(void *)(*(void *)v16 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    float v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_47;
  }
LABEL_48:
  v30[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<long long>>,void *>>>>::reset[abi:nn180100]((uint64_t)v30);
  return v16;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<long long>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  char v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::set<long long>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::set<long long>>,0>(uint64_t a1)
{
  std::__tree<long long>::destroy(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::set<long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<long long>>>>::__deallocate_node(void *a1)
{
  if (a1)
  {
    char v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::set<long long>>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      char v1 = v2;
    }
    while (v2);
  }
}

void std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,_compareFreeText &,std::__wrap_iter<std::pair<std::string,_freeTextCandidate *> *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v5 = v3 >> 1;
    uint64_t v6 = *(void *)(a2 - 8);
    if (*(float *)(*(void *)(a1 + 32 * (v3 >> 1) + 24) + 4) > *(float *)(v6 + 4))
    {
      uint64_t v8 = *(void *)(a2 - 32);
      std::string::size_type v7 = (long long *)(a2 - 32);
      *(void *)uint8x8_t v12 = *(void *)(a2 - 24);
      *(void *)&v12[7] = *(void *)(a2 - 17);
      char v9 = *(unsigned char *)(a2 - 9);
      *((void *)v7 + 1) = 0;
      *((void *)v7 + 2) = 0;
      *(void *)std::string::size_type v7 = 0;
      do
      {
        if (*((char *)v7 + 23) < 0) {
          operator delete(*(void **)v7);
        }
        unint64_t v10 = (long long *)(a1 + 32 * v5);
        long long v11 = *v10;
        *((void *)v7 + 2) = *((void *)v10 + 2);
        *std::string::size_type v7 = v11;
        *((unsigned char *)v10 + 23) = 0;
        *(unsigned char *)unint64_t v10 = 0;
        *((void *)v7 + 3) = *((void *)v10 + 3);
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        std::string::size_type v7 = v10;
      }
      while (*(float *)(*(void *)(a1 + 32 * v5 + 24) + 4) > *(float *)(v6 + 4));
      if (*((char *)v10 + 23) < 0) {
        operator delete(*(void **)v10);
      }
      *(void *)unint64_t v10 = v8;
      *((void *)v10 + 1) = *(void *)v12;
      *(void *)((char *)v10 + 15) = *(void *)&v12[7];
      *((unsigned char *)v10 + 23) = v9;
      *((void *)v10 + 3) = v6;
    }
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,_freeTextCandidate *>>>(unint64_t a1)
{
  if (a1 >> 59) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(32 * a1);
}

uint64_t std::__split_buffer<std::pair<std::string,_freeTextCandidate *>>::~__split_buffer(uint64_t a1)
{
  unint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 4;
      *(void *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v4);
        uint64_t v4 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void SIPommesEnumerateSuggestions(uint64_t a1, uint64_t a2, int a3, char a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v393 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return;
  }
  if (!a2) {
    return;
  }
  char v9 = *(char **)(a2 + 16);
  if (!v9) {
    return;
  }
  uint64_t v10 = a1;
  if (*(void *)(a1 + 128))
  {
    memset(v360, 0, sizeof(v360));
    long long v11 = *(uint64_t **)(a1 + 120);
    if (!v11)
    {
      memset(v353, 0, 24);
      goto LABEL_122;
    }
    while (1)
    {
      unint64_t v12 = *(void *)&v360[8];
      if (*(void *)&v360[8] - *(void *)v360 != 320) {
        goto LABEL_11;
      }
      if (**(float **)(*(void *)v360 + 24) <= *(float *)v11[5]) {
        break;
      }
LABEL_29:
      long long v11 = (uint64_t *)*v11;
      if (!v11)
      {
        unint64_t v28 = *(long long **)v360;
        memset(v353, 0, 24);
        if (*(void *)v360 == *(void *)&v360[8]) {
          goto LABEL_122;
        }
        do
        {
          uint64_t v29 = *(void *)&v353[8];
          if (*(void *)&v353[8] >= *(void *)&v353[16])
          {
            uint64_t v31 = (uint64_t)(*(void *)&v353[8] - *(void *)v353) >> 5;
            if ((unint64_t)(v31 + 1) >> 59) {
              goto LABEL_556;
            }
            unint64_t v32 = (uint64_t)(*(void *)&v353[16] - *(void *)v353) >> 4;
            if (v32 <= v31 + 1) {
              unint64_t v32 = v31 + 1;
            }
            if (*(void *)&v353[16] - *(void *)v353 >= 0x7FFFFFFFFFFFFFE0uLL) {
              unint64_t v33 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v32;
            }
            *(void *)&long long v380 = &v353[16];
            if (v33)
            {
              unint64_t v35 = std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,_freeTextCandidate *>>>(v33);
            }
            else
            {
              unint64_t v35 = 0;
              uint64_t v34 = 0;
            }
            uint64_t v37 = (char *)&v35[4 * v31];
            uint64_t v38 = (char *)&v35[4 * v34];
            *(void *)&unsigned char buf[24] = v38;
            if (*((char *)v28 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v35[4 * v31], *(const std::string::value_type **)v28, *((void *)v28 + 1));
            }
            else
            {
              long long v39 = *v28;
              *((void *)v37 + 2) = *((void *)v28 + 2);
              *(_OWORD *)uint64_t v37 = v39;
            }
            *(void *)&uint8_t buf[8] = 0;
            *(void *)std::__split_buffer<std::string> buf = 0;
            v35[4 * v31 + 3] = *((void *)v28 + 3);
            unint64_t v36 = v37 + 32;
            *(void *)&uint8_t buf[16] = v37 + 32;
            uint64_t v40 = *(void *)&v353[8];
            uint64_t v41 = *(void *)v353;
            if (*(void *)&v353[8] == *(void *)v353)
            {
              int64x2_t v43 = vdupq_n_s64(*(unint64_t *)&v353[8]);
            }
            else
            {
              do
              {
                long long v42 = *(_OWORD *)(v40 - 32);
                *((void *)v37 - 2) = *(void *)(v40 - 16);
                *((_OWORD *)v37 - 2) = v42;
                *(void *)(v40 - 24) = 0;
                *(void *)(v40 - 16) = 0;
                *(void *)(v40 - 32) = 0;
                *((void *)v37 - 1) = *(void *)(v40 - 8);
                v37 -= 32;
                v40 -= 32;
              }
              while (v40 != v41);
              int64x2_t v43 = *(int64x2_t *)v353;
              unint64_t v36 = *(char **)&buf[16];
              uint64_t v38 = *(char **)&buf[24];
            }
            *(void *)v353 = v37;
            *(void *)&v353[8] = v36;
            *(int64x2_t *)&uint8_t buf[8] = v43;
            uint64_t v44 = *(void *)&v353[16];
            *(void *)&v353[16] = v38;
            *(void *)&unsigned char buf[24] = v44;
            *(void *)std::__split_buffer<std::string> buf = v43.i64[0];
            std::__split_buffer<std::pair<std::string,_freeTextCandidate *>>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            if (*((char *)v28 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(*(std::string **)&v353[8], *(const std::string::value_type **)v28, *((void *)v28 + 1));
            }
            else
            {
              long long v30 = *v28;
              *(void *)(*(void *)&v353[8] + 16) = *((void *)v28 + 2);
              *(_OWORD *)uint64_t v29 = v30;
            }
            *(void *)(v29 + 24) = *((void *)v28 + 3);
            unint64_t v36 = (char *)(v29 + 32);
          }
          *(void *)&v353[8] = v36;
          std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,_comparePhoto,std::__wrap_iter<std::pair<std::string,_photosCandidate *> *>>(*(uint64_t *)v360, *(uint64_t *)&v360[8], (uint64_t)(*(void *)&v360[8] - *(void *)v360) >> 5);
          long long v45 = (void **)(*(void *)&v360[8] - 32);
          if (*(char *)(*(void *)&v360[8] - 9) < 0) {
            operator delete(*v45);
          }
          *(void *)&v360[8] = v45;
          unint64_t v28 = *(long long **)v360;
        }
        while (*(void ***)v360 != v45);
        uint64_t v46 = *(void *)&v353[8];
        unint64_t v47 = *(void *)v353;
        if (*(void *)v353 != *(void *)&v353[8])
        {
          unint64_t v48 = *(void *)&v353[8] - 32;
          if ((unint64_t)(*(void *)&v353[8] - 32) > *(void *)v353)
          {
            do
            {
              uint64_t v49 = *(void *)(v47 + 16);
              long long v50 = *(_OWORD *)v47;
              uint64_t v51 = *(void *)(v48 + 16);
              *(_OWORD *)unint64_t v47 = *(_OWORD *)v48;
              *(void *)(v47 + 16) = v51;
              *(_OWORD *)unint64_t v48 = v50;
              *(void *)(v48 + 16) = v49;
              uint64_t v52 = *(void *)(v47 + 24);
              *(void *)(v47 + 24) = *(void *)(v48 + 24);
              *(void *)(v48 + 24) = v52;
              v47 += 32;
              v48 -= 32;
            }
            while (v47 < v48);
            uint64_t v46 = *(void *)&v353[8];
            unint64_t v47 = *(void *)v353;
          }
        }
        LOBYTE(v350[0]) = 0;
        if (v47 == v46) {
          goto LABEL_122;
        }
        unint64_t v53 = 0;
        int v54 = 0;
        uint64_t v337 = v46;
        while (2)
        {
          uint64_t v55 = (const char *)v47;
          if (*(char *)(v47 + 23) < 0) {
            uint64_t v55 = *(const char **)v47;
          }
          CFStringRef v56 = CFStringCreateWithCString(0, v55, 0x8000100u);
          if (!v56) {
            goto LABEL_108;
          }
          CFStringRef v57 = v56;
          uint64_t v58 = *(void *)v353;
          int v59 = *(_DWORD *)(*(void *)(*(void *)v353 + 32 * v53 + 24) + 8);
          if (v59 != 18 && v59 != 9 || v53 == 0) {
            goto LABEL_105;
          }
          unint64_t v62 = 0;
          BOOL v63 = 1;
LABEL_73:
          uint64_t v64 = v58 + 32 * v53;
          unint64_t v65 = *(unsigned __int8 *)(v64 + 23);
          if (*(char *)(v64 + 23) < 0) {
            unint64_t v66 = *(void *)(v64 + 8);
          }
          else {
            unint64_t v66 = *(unsigned __int8 *)(v64 + 23);
          }
          uint64_t v67 = v58 + 32 * v62;
          unint64_t v68 = *(unsigned __int8 *)(v67 + 23);
          if (*(char *)(v67 + 23) < 0) {
            unint64_t v69 = *(void *)(v67 + 8);
          }
          else {
            unint64_t v69 = *(unsigned __int8 *)(v67 + 23);
          }
          if (v69 >= v66) {
            unint64_t v70 = v66;
          }
          else {
            unint64_t v70 = v69;
          }
          if ((v65 & 0x80) != 0)
          {
            unint64_t v65 = *(void *)(v64 + 8);
            if ((v68 & 0x80) != 0) {
              goto LABEL_97;
            }
          }
          else
          {
            if ((v68 & 0x80) == 0) {
              goto LABEL_84;
            }
LABEL_97:
            unint64_t v68 = *(void *)(v67 + 8);
          }
LABEL_84:
          if (v65 <= v68) {
            unint64_t v71 = v68;
          }
          else {
            unint64_t v71 = v65;
          }
          if (v70)
          {
            uint64_t v72 = 0;
            float v73 = 0.0;
            do
            {
              uint64_t v74 = *(void *)v353 + 32 * v53;
              if (*(char *)(v74 + 23) < 0) {
                uint64_t v74 = *(void *)v74;
              }
              __darwin_ct_rune_t v75 = __tolower(*(char *)(v74 + v72));
              uint64_t v76 = *(void *)v353 + 32 * v62;
              if (*(char *)(v76 + 23) < 0) {
                uint64_t v76 = *(void *)v76;
              }
              if (v75 != __tolower(*(char *)(v76 + v72))) {
                break;
              }
              float v73 = v73 + 1.0;
              ++v72;
            }
            while (v70 != v72);
            uint64_t v58 = *(void *)v353;
          }
          else
          {
            float v73 = 0.0;
          }
          if (*(_DWORD *)(*(void *)(v58 + 32 * v53 + 24) + 4) == *(_DWORD *)(*(void *)(v58 + 32 * v62 + 24) + 4)) {
            unint64_t v77 = v70;
          }
          else {
            unint64_t v77 = v71;
          }
          if ((float)(v73 / (float)v77) >= 0.75 || (++v62, BOOL v63 = v62 < v53, v62 == v53))
          {
            uint64_t v46 = v337;
            if (!v63)
            {
LABEL_105:
              uint64_t v78 = *(void *)(v47 + 24);
              if ((*(_DWORD *)(v78 + 8) - 17) <= 1) {
                *(_DWORD *)(v78 + 8) = 9;
              }
              long long v391 = 0u;
              long long v392 = 0u;
              long long v389 = 0u;
              long long v390 = 0u;
              long long v388 = 0u;
              long long v385 = 0u;
              long long v386 = 0u;
              long long v383 = 0u;
              long long v384 = 0u;
              long long v381 = 0u;
              long long v382 = 0u;
              long long v380 = 0u;
              memset(buf, 0, sizeof(buf));
              long long v387 = (unint64_t)v57;
              uint64_t v79 = *(void *)(v47 + 24);
              *(double *)&long long v391 = *(float *)v79;
              HIDWORD(v391) = *(_DWORD *)(v79 + 8);
              (*(void (**)(uint64_t, unsigned char *, void **))(a8 + 16))(a8, buf, v350);
              CFRelease(v57);
              ++v54;
            }
LABEL_108:
            v47 += 32;
            if (v47 == v46 || (++v53, v54 >= 7))
            {
LABEL_122:
              *(void *)std::__split_buffer<std::string> buf = v353;
              std::vector<std::pair<std::string,_freeTextCandidate *>>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
              *(void *)std::__split_buffer<std::string> buf = v360;
              std::vector<std::pair<std::string,_freeTextCandidate *>>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
              return;
            }
            continue;
          }
          goto LABEL_73;
        }
      }
    }
    std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,_comparePhoto,std::__wrap_iter<std::pair<std::string,_photosCandidate *> *>>(*(uint64_t *)v360, *(uint64_t *)&v360[8], 10);
    unint64_t v12 = *(void *)&v360[8] - 32;
    if (*(char *)(*(void *)&v360[8] - 9) < 0) {
      operator delete(*(void **)v12);
    }
    *(void *)&v360[8] = v12;
LABEL_11:
    uint64_t v13 = v11[5];
    if (*((char *)v11 + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v353, (const std::string::value_type *)v11[2], v11[3]);
      unint64_t v12 = *(void *)&v360[8];
    }
    else
    {
      *(_OWORD *)v353 = *((_OWORD *)v11 + 1);
      *(void *)&v353[16] = v11[4];
    }
    *(void *)&v353[24] = v13;
    if (v12 >= *(void *)&v360[16])
    {
      uint64_t v16 = (uint64_t)(v12 - *(void *)v360) >> 5;
      if ((unint64_t)(v16 + 1) >> 59) {
        goto LABEL_556;
      }
      unint64_t v17 = (uint64_t)(*(void *)&v360[16] - *(void *)v360) >> 4;
      if (v17 <= v16 + 1) {
        unint64_t v17 = v16 + 1;
      }
      if (*(void *)&v360[16] - *(void *)v360 >= 0x7FFFFFFFFFFFFFE0uLL) {
        unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v17;
      }
      *(void *)&long long v380 = &v360[16];
      long long v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,_freeTextCandidate *>>>(v18);
      float v21 = &v19[32 * v16];
      *((void *)v21 + 2) = *(void *)&v353[16];
      *(_OWORD *)float v21 = *(_OWORD *)v353;
      memset(v353, 0, 24);
      *((void *)v21 + 3) = v13;
      uint64_t v22 = *(void *)&v360[8];
      uint64_t v23 = *(void *)v360;
      if (*(void *)&v360[8] == *(void *)v360)
      {
        int64x2_t v26 = vdupq_n_s64(*(unint64_t *)&v360[8]);
        unint64_t v24 = &v19[32 * v16];
      }
      else
      {
        unint64_t v24 = &v19[32 * v16];
        do
        {
          long long v25 = *(_OWORD *)(v22 - 32);
          *((void *)v24 - 2) = *(void *)(v22 - 16);
          *((_OWORD *)v24 - 2) = v25;
          *(void *)(v22 - 24) = 0;
          *(void *)(v22 - 16) = 0;
          *(void *)(v22 - 32) = 0;
          *((void *)v24 - 1) = *(void *)(v22 - 8);
          v24 -= 32;
          v22 -= 32;
        }
        while (v22 != v23);
        int64x2_t v26 = *(int64x2_t *)v360;
      }
      uint64_t v15 = (uint64_t)(v21 + 32);
      *(void *)v360 = v24;
      *(void *)&v360[8] = v21 + 32;
      *(int64x2_t *)&uint8_t buf[8] = v26;
      uint64_t v27 = *(void *)&v360[16];
      *(void *)&v360[16] = &v19[32 * v20];
      *(void *)&unsigned char buf[24] = v27;
      *(void *)std::__split_buffer<std::string> buf = v26.i64[0];
      std::__split_buffer<std::pair<std::string,_freeTextCandidate *>>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      long long v14 = *(_OWORD *)v353;
      *(void *)(v12 + 16) = *(void *)&v353[16];
      *(_OWORD *)unint64_t v12 = v14;
      memset(v353, 0, 24);
      *(void *)(v12 + 24) = *(void *)&v353[24];
      uint64_t v15 = v12 + 32;
    }
    *(void *)&v360[8] = v15;
    std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,_comparePhoto &,std::__wrap_iter<std::pair<std::string,_photosCandidate *> *>>(*(uint64_t *)v360, v15, (v15 - *(void *)v360) >> 5);
    goto LABEL_29;
  }
  if (*(void *)(a1 + 168)
    || *(void *)(a1 + 208)
    || *(void *)(a1 + 248)
    || *(void *)(a1 + 288)
    || *(void *)(a1 + 328))
  {
    _SIPommesSpotlightEnumerateTopicSuggestions(*(uint64_t **)(a1 + 160), *(void *)(a1 + 168), 1uLL, a8);
    _SIPommesSpotlightEnumerateTopicSuggestions(*(uint64_t **)(v10 + 200), *(void *)(v10 + 208), 1uLL, a8);
    _SIPommesSpotlightEnumerateTopicSuggestions(*(uint64_t **)(v10 + 240), *(void *)(v10 + 248), 3uLL, a8);
    _SIPommesSpotlightEnumerateTopicSuggestions(*(uint64_t **)(v10 + 280), *(void *)(v10 + 288), 3uLL, a8);
    _SIPommesSpotlightEnumerateTopicSuggestions(*(uint64_t **)(v10 + 320), *(void *)(v10 + 328), 0xAuLL, a8);
    char v9 = *(char **)(a2 + 16);
  }
  char v336 = a4;
  memset(v359, 0, 24);
  std::string::basic_string[abi:nn180100]<0>(v359, v9);
  memset(&__s1, 0, sizeof(__s1));
  if (SHIBYTE(v359[0].__r_.__value_.__r.__words[2]) < 0)
  {
    if (v359[0].__r_.__value_.__l.__size_ < 2) {
      goto LABEL_132;
    }
    unint64_t v84 = (std::string *)v359[0].__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(v359[0].__r_.__value_.__r.__words[0] + v359[0].__r_.__value_.__l.__size_ - 1) != 42) {
      goto LABEL_132;
    }
    uint64_t v83 = --v359[0].__r_.__value_.__l.__size_;
  }
  else
  {
    if (HIBYTE(v359[0].__r_.__value_.__r.__words[2]) < 2u
      || v359[0].__r_.__value_.__s.__data_[HIBYTE(v359[0].__r_.__value_.__r.__words[2]) - 1] != 42)
    {
      goto LABEL_132;
    }
    uint64_t v83 = HIBYTE(v359[0].__r_.__value_.__r.__words[2]) - 1;
    *((unsigned char *)&v359[0].__r_.__value_.__s + 23) = (*((unsigned char *)&v359[0].__r_.__value_.__s + 23) - 1) & 0x7F;
    unint64_t v84 = v359;
  }
  v84->__r_.__value_.__s.__data_[v83] = 0;
  if (SHIBYTE(v359[0].__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v357, v359[0].__r_.__value_.__l.__data_, v359[0].__r_.__value_.__l.__size_);
  }
  else {
    std::string v357 = v359[0];
  }
  uint64_t v85 = stringToLowerCase((uint64_t *)&v357, &__s1, 1);
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v357.__r_.__value_.__l.__data_);
  }
  if (v85)
  {
LABEL_132:
    int v86 = *__error();
    unint64_t v87 = _SILogForLogForCategory(14);
    if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::__split_buffer<std::string> buf = 0;
      _os_log_impl(&dword_1BD672000, v87, OS_LOG_TYPE_DEFAULT, "[Pommes_Suggestions]----------New Request----------", buf, 2u);
    }
    *__error() = v86;
    int v88 = *__error();
    long long v89 = _SILogForLogForCategory(14);
    if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
    {
      std::string::size_type size = HIBYTE(v359[0].__r_.__value_.__r.__words[2]);
      if ((v359[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v359[0].__r_.__value_.__l.__size_;
      }
      uint64_t v91 = *(void *)(a2 + 32);
      *(_DWORD *)std::__split_buffer<std::string> buf = 134218498;
      *(void *)&uint8_t buf[4] = size;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v91;
      *(_WORD *)&buf[22] = 2080;
      *(void *)&unsigned char buf[24] = a7;
      _os_log_impl(&dword_1BD672000, v89, OS_LOG_TYPE_DEFAULT, "[Pommes_Suggestions]mail_query_info: ss_len:%ld sc_qf_count:%ld lang:%s ", buf, 0x20u);
    }
    *__error() = v88;
    int64x2_t v355 = 0uLL;
    v356 = 0;
    memset(v353, 0, sizeof(v353));
    uint64_t v354 = 1065353216;
    *(_OWORD *)v350 = 0u;
    *(_OWORD *)std::string __p = 0u;
    uint64_t v352 = 1065353216;
    if (*(void *)(v10 + 88))
    {
      uint64_t v332 = a2;
      int v333 = a5;
      uint64_t v334 = v10;
      for (CFIndex i = *(long long **)(v10 + 80); i; CFIndex i = *(long long **)i)
      {
        uint64_t v93 = *((void *)i + 5);
        if (v93)
        {
          int v94 = *(char *)(v93 + 63);
          if (v94 < 0) {
            uint64_t v95 = *(void *)(v93 + 48);
          }
          else {
            uint64_t v95 = *(unsigned __int8 *)(v93 + 63);
          }
          long long v96 = i + 1;
          if (!v95)
          {
            std::string::operator=((std::string *)(v93 + 40), (const std::string *)(i + 1));
            *(unsigned char *)(v93 + 26) = 1;
            LOBYTE(v94) = *(unsigned char *)(v93 + 63);
          }
          memset(buf, 0, 24);
          if ((v94 & 0x80) != 0) {
            std::string::__init_copy_ctor_external(&v349, *(const std::string::value_type **)(v93 + 40), *(void *)(v93 + 48));
          }
          else {
            std::string v349 = *(std::string *)(v93 + 40);
          }
          uint64_t v97 = stringToLowerCase((uint64_t *)&v349, (std::string *)buf, 0);
          if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v349.__r_.__value_.__l.__data_);
          }
          if (v97)
          {
            if (buf[23] >= 0) {
              unint64_t v98 = (uint64_t *)buf;
            }
            else {
              unint64_t v98 = *(uint64_t **)buf;
            }
            if (buf[23] >= 0) {
              unint64_t v99 = buf[23];
            }
            else {
              unint64_t v99 = *(void *)&buf[8];
            }
            unint64_t v100 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v98, v99);
            unint64_t v101 = (unint64_t)v350[1];
            if (!v350[1]) {
              goto LABEL_174;
            }
            unint64_t v102 = v100;
            uint8x8_t v103 = (uint8x8_t)vcnt_s8((int8x8_t)v350[1]);
            v103.i16[0] = vaddlv_u8(v103);
            unint64_t v104 = v103.u32[0];
            if (v103.u32[0] > 1uLL)
            {
              unint64_t v105 = v100;
              if ((void *)v100 >= v350[1]) {
                unint64_t v105 = v100 % (unint64_t)v350[1];
              }
            }
            else
            {
              unint64_t v105 = ((unint64_t)v350[1] - 1) & v100;
            }
            char v106 = (unsigned __int8 **)*((void *)v350[0] + v105);
            if (!v106 || (uint64_t v107 = *v106) == 0)
            {
LABEL_174:
              unint64_t v109 = *(void *)(v93 + 136);
              if (v109 >= *(void *)(v93 + 144))
              {
                char v111 = std::vector<std::string>::__push_back_slow_path<std::string const&>((std::string **)(v93 + 128), i + 1);
              }
              else
              {
                if (*((char *)i + 39) < 0)
                {
                  std::string::__init_copy_ctor_external(*(std::string **)(v93 + 136), *((const std::string::value_type **)i + 2), *((void *)i + 3));
                }
                else
                {
                  long long v110 = *v96;
                  *(void *)(v109 + 16) = *((void *)i + 4);
                  *(_OWORD *)unint64_t v109 = v110;
                }
                char v111 = (std::string *)(v109 + 24);
              }
              *(void *)(v93 + 136) = v111;
              *((void *)std::__hash_table<std::__hash_value_type<std::string,_peopleCandidate *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,_peopleCandidate *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,_peopleCandidate *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,_peopleCandidate *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)v350, (uint64_t)buf, (uint64_t)buf)+ 5) = v93;
              goto LABEL_181;
            }
            while (1)
            {
              unint64_t v108 = *((void *)v107 + 1);
              if (v108 == v102)
              {
                if (std::equal_to<std::string>::operator()[abi:nn180100](v107 + 16, buf))
                {
                  uint64_t v112 = *((void *)std::__hash_table<std::__hash_value_type<std::string,_peopleCandidate *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,_peopleCandidate *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,_peopleCandidate *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,_peopleCandidate *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)v350, (uint64_t)buf, (uint64_t)buf)+ 5);
                  if (v112)
                  {
                    unint64_t v113 = *(void *)(v112 + 136);
                    if (v113 >= *(void *)(v112 + 144))
                    {
                      unint64_t v115 = std::vector<std::string>::__push_back_slow_path<std::string const&>((std::string **)(v112 + 128), i + 1);
                    }
                    else
                    {
                      if (*((char *)i + 39) < 0)
                      {
                        std::string::__init_copy_ctor_external(*(std::string **)(v112 + 136), *((const std::string::value_type **)i + 2), *((void *)i + 3));
                      }
                      else
                      {
                        long long v114 = *v96;
                        *(void *)(v113 + 16) = *((void *)i + 4);
                        *(_OWORD *)unint64_t v113 = v114;
                      }
                      unint64_t v115 = (std::string *)(v113 + 24);
                    }
                    *(void *)(v112 + 136) = v115;
                    float v116 = *(float *)(v93 + 8);
                    if (v116 > *(float *)(v112 + 8))
                    {
                      *(float *)(v112 + 8) = v116;
                      std::string::operator=((std::string *)(v112 + 64), (const std::string *)(v93 + 64));
                    }
                    double v117 = *(double *)(v93 + 16);
                    if (v117 > 0.000000100000001)
                    {
                      double v118 = *(double *)(v112 + 16);
                      if (v118 <= 0.000000100000001 || v117 < v118)
                      {
                        *(double *)(v112 + 16) = v117;
                        std::string::operator=((std::string *)(v112 + 40), (const std::string *)(v93 + 40));
                      }
                    }
                    if (*(unsigned char *)(v112 + 24)) {
                      BOOL v120 = 1;
                    }
                    else {
                      BOOL v120 = *(unsigned char *)(v93 + 24) != 0;
                    }
                    *(unsigned char *)(v112 + 24) = v120;
                    if (*(unsigned char *)(v112 + 27)) {
                      BOOL v121 = 1;
                    }
                    else {
                      BOOL v121 = *(unsigned char *)(v93 + 27) != 0;
                    }
                    *(unsigned char *)(v112 + 27) = v121;
                    if (*(unsigned char *)(v112 + 28)) {
                      BOOL v122 = 1;
                    }
                    else {
                      BOOL v122 = *(unsigned char *)(v93 + 28) != 0;
                    }
                    *(unsigned char *)(v112 + 28) = v122;
                  }
                  break;
                }
              }
              else
              {
                if (v104 > 1)
                {
                  if (v108 >= v101) {
                    v108 %= v101;
                  }
                }
                else
                {
                  v108 &= v101 - 1;
                }
                if (v108 != v105) {
                  goto LABEL_174;
                }
              }
              uint64_t v107 = *(unsigned __int8 **)v107;
              if (!v107) {
                goto LABEL_174;
              }
            }
          }
LABEL_181:
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
      }
      int v123 = *__error();
      uint64_t v124 = _SILogForLogForCategory(14);
      if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::__split_buffer<std::string> buf = 134217984;
        *(void **)&uint8_t buf[4] = __p[1];
        _os_log_impl(&dword_1BD672000, v124, OS_LOG_TYPE_DEFAULT, "[Pommes_Suggestions]mail_debug: PPL candidates size: %ld.", buf, 0xCu);
      }
      int v125 = 0;
      *__error() = v123;
      memset(v360, 0, sizeof(v360));
      char v126 = a3;
      if (a3)
      {
        BOOL v127 = 0;
        if (__p[1] >= (void *)3)
        {
          long long v128 = (const std::string::value_type *)__p[0];
          if (__p[0])
          {
            do
            {
              memset(buf, 0, sizeof(buf));
              if (v128[39] < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)buf, *((const std::string::value_type **)v128 + 2), *((void *)v128 + 3));
              }
              else
              {
                *(_OWORD *)std::__split_buffer<std::string> buf = *((_OWORD *)v128 + 1);
                *(void *)&uint8_t buf[16] = *((void *)v128 + 4);
              }
              uint64_t v129 = *((void *)v128 + 5);
              int v130 = *(unsigned __int8 *)(v129 + 27);
              BOOL v127 = *(unsigned char *)(v129 + 27) != 0;
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
              if (v130) {
                break;
              }
              long long v128 = *(const std::string::value_type **)v128;
            }
            while (v128);
            unint64_t v131 = (const std::string::value_type *)__p[0];
            if (__p[0])
            {
              LOBYTE(v128) = 0;
              do
              {
                memset(buf, 0, sizeof(buf));
                if (v131[39] < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)buf, *((const std::string::value_type **)v131 + 2), *((void *)v131 + 3));
                }
                else
                {
                  *(_OWORD *)std::__split_buffer<std::string> buf = *((_OWORD *)v131 + 1);
                  *(void *)&uint8_t buf[16] = *((void *)v131 + 4);
                }
                uint64_t v132 = *((void *)v131 + 5);
                if (*(unsigned char *)(v132 + 24) && *(double *)(v132 + 16) <= 47304000.0)
                {
                  int v133 = 0;
                  LOBYTE(v128) = 1;
                }
                else
                {
                  int v133 = 1;
                }
                if ((buf[23] & 0x80000000) != 0) {
                  operator delete(*(void **)buf);
                }
                if (!v133) {
                  break;
                }
                unint64_t v131 = *(const std::string::value_type **)v131;
              }
              while (v131);
            }
            else
            {
              LOBYTE(v128) = 0;
            }
          }
          else
          {
            BOOL v127 = 0;
          }
          int v125 = v128 & 1;
          char v126 = a3;
        }
      }
      else
      {
        BOOL v127 = 0;
      }
      char v134 = __p[0];
      if (__p[0])
      {
        char v135 = v336 ^ 1 | v126;
        char v136 = v126 ^ 1 | v336;
        while (1)
        {
          if (v127)
          {
            uint64_t v137 = v134[5];
            if (*(unsigned char *)(v137 + 28))
            {
              if (!*(unsigned char *)(v137 + 27)) {
                break;
              }
            }
          }
          if ((v135 & 1) == 0 && !*(unsigned char *)(v134[5] + 28))
          {
            int v140 = *__error();
            uint64_t v148 = _SILogForLogForCategory(14);
            if (!os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_287;
            }
            *(_WORD *)std::__split_buffer<std::string> buf = 0;
            uint64_t v143 = v148;
            v144 = "[Pommes_Suggestions]mail_debug: 1 PPL suggestion skipped. Reason: scope is recipientOnly and candidat"
                   "e is not a recipient.";
            goto LABEL_285;
          }
          if ((v136 & 1) == 0 && !*(unsigned char *)(v134[5] + 27))
          {
            int v140 = *__error();
            v162 = _SILogForLogForCategory(14);
            if (!os_log_type_enabled(v162, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_287;
            }
            *(_WORD *)std::__split_buffer<std::string> buf = 0;
            uint64_t v143 = v162;
            v144 = "[Pommes_Suggestions]mail_debug: 1 PPL suggestion skipped. Reason: scope is authorsOnly and candidate "
                   "is not an author.";
            goto LABEL_285;
          }
          if (__p[1] > (void *)2) {
            int v138 = v125;
          }
          else {
            int v138 = 0;
          }
          if (v138 == 1)
          {
            uint64_t v139 = v134[5];
            if (!*(unsigned char *)(v139 + 24) && *(double *)(v139 + 16) > 47304000.0)
            {
              int v140 = *__error();
              unint64_t v141 = _SILogForLogForCategory(14);
              if (os_log_type_enabled(v141, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v142 = *(void *)(v134[5] + 16);
                *(_DWORD *)std::__split_buffer<std::string> buf = 134217984;
                *(void *)&uint8_t buf[4] = v142;
                uint64_t v143 = v141;
                v144 = "[Pommes_Suggestions]mail_debug: 1 PPL suggestion thresholded. Reason: not used and age %f.";
                uint32_t v145 = 12;
                goto LABEL_286;
              }
              goto LABEL_287;
            }
          }
          unint64_t v146 = *(void *)&v360[8];
          if (*(void *)&v360[8] - *(void *)v360 != 160) {
            goto LABEL_264;
          }
          if (*(float *)(*(void *)(*(void *)v360 + 24) + 8) <= *(float *)(v134[5] + 8))
          {
            std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,_comparePeople,std::__wrap_iter<std::pair<std::string,_peopleCandidate *> *>>(*(uint64_t *)v360, *(uint64_t *)&v360[8], 5);
            unint64_t v146 = *(void *)&v360[8] - 32;
            if (*(char *)(*(void *)&v360[8] - 9) < 0) {
              operator delete(*(void **)v146);
            }
            *(void *)&v360[8] = v146;
LABEL_264:
            std::string::size_type v147 = v134[5];
            if (*(char *)(v147 + 63) < 0)
            {
              std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v147 + 40), *(void *)(v147 + 48));
              std::string::size_type v147 = v134[5];
              unint64_t v146 = *(void *)&v360[8];
            }
            else
            {
              std::string __str = *(std::string *)(v147 + 40);
            }
            std::string::size_type v348 = v147;
            if (v146 >= *(void *)&v360[16])
            {
              uint64_t v151 = (uint64_t)(v146 - *(void *)v360) >> 5;
              if ((unint64_t)(v151 + 1) >> 59) {
                goto LABEL_556;
              }
              unint64_t v152 = (uint64_t)(*(void *)&v360[16] - *(void *)v360) >> 4;
              if (v152 <= v151 + 1) {
                unint64_t v152 = v151 + 1;
              }
              if (*(void *)&v360[16] - *(void *)v360 >= 0x7FFFFFFFFFFFFFE0uLL) {
                unint64_t v153 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v153 = v152;
              }
              *(void *)&long long v380 = &v360[16];
              uint64_t v154 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,_freeTextCandidate *>>>(v153);
              unint64_t v156 = (std::string *)&v154[32 * v151];
              std::string *v156 = __str;
              memset(&__str, 0, sizeof(__str));
              v156[1].__r_.__value_.__r.__words[0] = v147;
              uint64_t v157 = *(void *)&v360[8];
              uint64_t v158 = *(void *)v360;
              if (*(void *)&v360[8] == *(void *)v360)
              {
                int64x2_t v161 = vdupq_n_s64(*(unint64_t *)&v360[8]);
                uint64_t v159 = &v154[32 * v151];
              }
              else
              {
                uint64_t v159 = &v154[32 * v151];
                do
                {
                  long long v160 = *(_OWORD *)(v157 - 32);
                  *((void *)v159 - 2) = *(void *)(v157 - 16);
                  *((_OWORD *)v159 - 2) = v160;
                  *(void *)(v157 - 24) = 0;
                  *(void *)(v157 - 16) = 0;
                  *(void *)(v157 - 32) = 0;
                  *((void *)v159 - 1) = *(void *)(v157 - 8);
                  v159 -= 32;
                  v157 -= 32;
                }
                while (v157 != v158);
                int64x2_t v161 = *(int64x2_t *)v360;
              }
              p_std::string::size_type size = (uint64_t)&v156[1].__r_.__value_.__l.__size_;
              *(void *)v360 = v159;
              *(void *)&v360[8] = (char *)v156 + 32;
              *(int64x2_t *)&uint8_t buf[8] = v161;
              uint64_t v164 = *(void *)&v360[16];
              *(void *)&v360[16] = &v154[32 * v155];
              *(void *)&unsigned char buf[24] = v164;
              *(void *)std::__split_buffer<std::string> buf = v161.i64[0];
              std::__split_buffer<std::pair<std::string,_freeTextCandidate *>>::~__split_buffer((uint64_t)buf);
            }
            else
            {
              long long v149 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
              *(void *)(v146 + 16) = *((void *)&__str.__r_.__value_.__l + 2);
              *(_OWORD *)unint64_t v146 = v149;
              memset(&__str, 0, sizeof(__str));
              *(void *)(v146 + 24) = v348;
              p_std::string::size_type size = v146 + 32;
            }
            *(void *)&v360[8] = p_size;
            std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,_comparePeople &,std::__wrap_iter<std::pair<std::string,_peopleCandidate *> *>>(*(uint64_t *)v360, p_size, (p_size - *(void *)v360) >> 5);
          }
LABEL_291:
          char v134 = (void *)*v134;
          if (!v134) {
            goto LABEL_292;
          }
        }
        int v140 = *__error();
        long long v163 = _SILogForLogForCategory(14);
        if (!os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_287;
        }
        *(_WORD *)std::__split_buffer<std::string> buf = 0;
        uint64_t v143 = v163;
        v144 = "[Pommes_Suggestions]mail_debug: 1 PPL suggestion thresholded. Reason: is recipient and we have author candidates.";
LABEL_285:
        uint32_t v145 = 2;
LABEL_286:
        _os_log_impl(&dword_1BD672000, v143, OS_LOG_TYPE_DEFAULT, v144, buf, v145);
LABEL_287:
        *__error() = v140;
        goto LABEL_291;
      }
LABEL_292:
      uint64_t v165 = *(long long **)v360;
      if (*(void *)v360 != *(void *)&v360[8])
      {
        do
        {
          uint64_t v166 = v355.i64[1];
          if (v355.i64[1] >= (unint64_t)v356)
          {
            uint64_t v168 = (v355.i64[1] - v355.i64[0]) >> 5;
            if ((unint64_t)(v168 + 1) >> 59) {
              goto LABEL_556;
            }
            unint64_t v169 = (uint64_t)&v356[-v355.i64[0]] >> 4;
            if (v169 <= v168 + 1) {
              unint64_t v169 = v168 + 1;
            }
            if ((unint64_t)&v356[-v355.i64[0]] >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v170 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v170 = v169;
            }
            *(void *)&long long v380 = &v356;
            if (v170)
            {
              unint64_t v172 = std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,_freeTextCandidate *>>>(v170);
            }
            else
            {
              unint64_t v172 = 0;
              uint64_t v171 = 0;
            }
            unint64_t v174 = (char *)&v172[4 * v168];
            v175 = (char *)&v172[4 * v171];
            *(void *)&unsigned char buf[24] = v175;
            if (*((char *)v165 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v172[4 * v168], *(const std::string::value_type **)v165, *((void *)v165 + 1));
            }
            else
            {
              long long v176 = *v165;
              *((void *)v174 + 2) = *((void *)v165 + 2);
              *(_OWORD *)unint64_t v174 = v176;
            }
            *(void *)&uint8_t buf[8] = 0;
            *(void *)std::__split_buffer<std::string> buf = 0;
            v172[4 * v168 + 3] = *((void *)v165 + 3);
            unint64_t v173 = v174 + 32;
            *(void *)&uint8_t buf[16] = v174 + 32;
            uint64_t v177 = v355.i64[1];
            uint64_t v178 = v355.i64[0];
            if (v355.i64[1] == v355.i64[0])
            {
              int64x2_t v180 = vdupq_n_s64(v355.u64[1]);
            }
            else
            {
              do
              {
                long long v179 = *(_OWORD *)(v177 - 32);
                *((void *)v174 - 2) = *(void *)(v177 - 16);
                *((_OWORD *)v174 - 2) = v179;
                *(void *)(v177 - 24) = 0;
                *(void *)(v177 - 16) = 0;
                *(void *)(v177 - 32) = 0;
                *((void *)v174 - 1) = *(void *)(v177 - 8);
                v174 -= 32;
                v177 -= 32;
              }
              while (v177 != v178);
              int64x2_t v180 = v355;
              unint64_t v173 = *(char **)&buf[16];
              v175 = *(char **)&buf[24];
            }
            v355.i64[0] = (uint64_t)v174;
            v355.i64[1] = (uint64_t)v173;
            *(int64x2_t *)&uint8_t buf[8] = v180;
            uint64_t v181 = v356;
            v356 = v175;
            *(void *)&unsigned char buf[24] = v181;
            *(void *)std::__split_buffer<std::string> buf = v180.i64[0];
            std::__split_buffer<std::pair<std::string,_freeTextCandidate *>>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            if (*((char *)v165 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v355.i64[1], *(const std::string::value_type **)v165, *((void *)v165 + 1));
            }
            else
            {
              long long v167 = *v165;
              *(void *)(v355.i64[1] + 16) = *((void *)v165 + 2);
              *(_OWORD *)uint64_t v166 = v167;
            }
            *(void *)(v166 + 24) = *((void *)v165 + 3);
            unint64_t v173 = (char *)(v166 + 32);
          }
          v355.i64[1] = (uint64_t)v173;
          memset(buf, 0, 24);
          if (*(char *)(*(void *)v360 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v346, **(const std::string::value_type ***)v360, *(void *)(*(void *)v360 + 8));
          }
          else
          {
            long long v182 = **(_OWORD **)v360;
            v346.__r_.__value_.__r.__words[2] = *(void *)(*(void *)v360 + 16);
            *(_OWORD *)&v346.__r_.__value_.__l.__data_ = v182;
          }
          uint64_t v183 = stringToLowerCase((uint64_t *)&v346, (std::string *)buf, 0);
          if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v346.__r_.__value_.__l.__data_);
          }
          if (v183) {
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v353, (uint64_t)buf, (uint64_t)buf);
          }
          std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,_comparePeople,std::__wrap_iter<std::pair<std::string,_peopleCandidate *> *>>(*(uint64_t *)v360, *(uint64_t *)&v360[8], (uint64_t)(*(void *)&v360[8] - *(void *)v360) >> 5);
          long long v184 = (void **)(*(void *)&v360[8] - 32);
          if (*(char *)(*(void *)&v360[8] - 9) < 0) {
            operator delete(*v184);
          }
          *(void *)&v360[8] = v184;
          if ((buf[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)buf);
            long long v184 = *(void ***)&v360[8];
          }
          uint64_t v165 = *(long long **)v360;
        }
        while (*(void ***)v360 != v184);
      }
      unint64_t v185 = v355.i64[0];
      if (v355.i64[0] != v355.i64[1])
      {
        unint64_t v186 = v355.i64[1] - 32;
        if ((unint64_t)(v355.i64[1] - 32) > v355.i64[0])
        {
          do
          {
            uint64_t v187 = *(void *)(v185 + 16);
            long long v188 = *(_OWORD *)v185;
            uint64_t v189 = *(void *)(v186 + 16);
            *(_OWORD *)unint64_t v185 = *(_OWORD *)v186;
            *(void *)(v185 + 16) = v189;
            *(_OWORD *)unint64_t v186 = v188;
            *(void *)(v186 + 16) = v187;
            uint64_t v190 = *(void *)(v185 + 24);
            *(void *)(v185 + 24) = *(void *)(v186 + 24);
            *(void *)(v186 + 24) = v190;
            v185 += 32;
            v186 -= 32;
          }
          while (v185 < v186);
        }
      }
      *(void *)std::__split_buffer<std::string> buf = v360;
      std::vector<std::pair<std::string,_freeTextCandidate *>>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
      uint64_t v192 = v355.i64[1];
      uint64_t v191 = v355.i64[0];
      v344 = 0;
      v345 = 0;
      v343 = 0;
      uint64_t v193 = v355.i64[1] - v355.i64[0];
      uint64_t v10 = v334;
      a5 = v333;
      if (v355.i64[1] != v355.i64[0])
      {
        if (v193 < 0) {
LABEL_556:
        }
          abort();
        uint64_t v194 = (std::string *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,_freeTextCandidate *>>>(v193 >> 5);
        v343 = v194;
        v344 = v194;
        v345 = (char *)v194 + 32 * v195;
        do
        {
          if (*(char *)(v191 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v194, *(const std::string::value_type **)v191, *(void *)(v191 + 8));
          }
          else
          {
            long long v196 = *(_OWORD *)v191;
            v194->__r_.__value_.__r.__words[2] = *(void *)(v191 + 16);
            *(_OWORD *)&v194->__r_.__value_.__l.__data_ = v196;
          }
          v194[1].__r_.__value_.__r.__words[0] = *(void *)(v191 + 24);
          v191 += 32;
          uint64_t v194 = (std::string *)((char *)v194 + 32);
        }
        while (v191 != v192);
        v344 = v194;
        if (v194 != v343)
        {
          if (_os_feature_enabled_impl() && strlen(*(const char **)v332) <= 3)
          {
            uint64_t v197 = v343;
          }
          else
          {
            uint64_t v197 = v343;
            std::string::pointer data = v343[1].__r_.__value_.__l.__data_;
            if (data[25] && data[27] && data[28])
            {
              int v199 = 1;
LABEL_345:
              *(void *)std::__split_buffer<std::string> buf = &v343;
              std::vector<std::pair<std::string,_freeTextCandidate *>>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
              int v200 = *__error();
              uint64_t v201 = _SILogForLogForCategory(14);
              if (os_log_type_enabled(v201, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)std::__split_buffer<std::string> buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v199;
                _os_log_impl(&dword_1BD672000, v201, OS_LOG_TYPE_DEFAULT, "[Pommes_Suggestions]mail_debug: intent_is_people: %d.", buf, 8u);
              }
              *__error() = v200;
              int v202 = *__error();
              uint64_t v203 = _SILogForLogForCategory(14);
              if (os_log_type_enabled(v203, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v204 = *(void *)(v10 + 48);
                *(_DWORD *)std::__split_buffer<std::string> buf = 134217984;
                *(void *)&uint8_t buf[4] = v204;
                _os_log_impl(&dword_1BD672000, v203, OS_LOG_TYPE_DEFAULT, "[Pommes_Suggestions]mail_debug: FT candidates size: %ld.", buf, 0xCu);
              }
              *__error() = v202;
              int64x2_t v341 = 0uLL;
              unint64_t v342 = 0;
              if (!*(void *)(v10 + 48)) {
                goto LABEL_454;
              }
              memset(v360, 0, sizeof(v360));
              if ((v199 | a5 ^ 1) == 1)
              {
                int v205 = *__error();
                v206 = _SILogForLogForCategory(14);
                if (os_log_type_enabled(v206, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v207 = "free-text are not included";
                  uint64_t v208 = *(void *)(v10 + 48);
                  if (v199) {
                    uint64_t v207 = "intent is people";
                  }
                  *(_DWORD *)std::__split_buffer<std::string> buf = 134218242;
                  *(void *)&uint8_t buf[4] = v208;
                  *(_WORD *)&buf[12] = 2080;
                  *(void *)&buf[14] = v207;
                  _os_log_impl(&dword_1BD672000, v206, OS_LOG_TYPE_DEFAULT, "[Pommes_Suggestions]mail_debug: %ld FT suggestion candidates are thresholded. Reason: %s.", buf, 0x16u);
                }
                *__error() = v205;
LABEL_453:
                *(void *)std::__split_buffer<std::string> buf = v360;
                std::vector<std::pair<std::string,_freeTextCandidate *>>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
LABEL_454:
                __str.__r_.__value_.__s.__data_[0] = 0;
                uint64_t v271 = v355.i64[1];
                uint64_t v270 = v355.i64[0];
                if (v355.i64[0] != v355.i64[1])
                {
                  uint64_t v272 = 0;
                  v273 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
                  while (1)
                  {
                    v274 = (const char *)v270;
                    if (*(char *)(v270 + 23) < 0) {
                      v274 = *(const char **)v270;
                    }
                    uint64_t v275 = *(void *)(v270 + 24);
                    uint64_t v277 = *(void *)(v275 + 128);
                    uint64_t v276 = *(void *)(v275 + 136);
                    unint64_t v278 = (v276 - v277) / 24;
                    CFStringRef v279 = CFStringCreateWithCString(0, v274, 0x8000100u);
                    Mutable = CFArrayCreateMutable(0, v278, v273);
                    if (v276 != v277)
                    {
                      uint64_t v281 = 0;
                      if (v278 <= 1) {
                        uint64_t v282 = 1;
                      }
                      else {
                        uint64_t v282 = v278;
                      }
                      do
                      {
                        long long v283 = (const char *)(*(void *)(*(void *)(v270 + 24) + 128) + v281);
                        if (v283[23] < 0) {
                          long long v283 = *(const char **)v283;
                        }
                        CFStringRef v284 = CFStringCreateWithCString(0, v283, 0x8000100u);
                        if (v284)
                        {
                          CFStringRef v285 = v284;
                          CFArrayAppendValue(Mutable, v284);
                          CFRelease(v285);
                        }
                        v281 += 24;
                        --v282;
                      }
                      while (v282);
                    }
                    uint64_t v286 = *(void *)(v270 + 24);
                    if (*(unsigned char *)(v286 + 27))
                    {
                      *(_DWORD *)(v286 + 32) = 0;
                      if (v279) {
                        goto LABEL_474;
                      }
                    }
                    else
                    {
                      if (*(unsigned char *)(v286 + 28)) {
                        int v287 = 1;
                      }
                      else {
                        int v287 = 2;
                      }
                      *(_DWORD *)(v286 + 32) = v287;
                      if (v279)
                      {
LABEL_474:
                        if (Mutable)
                        {
                          long long v391 = 0u;
                          long long v392 = 0u;
                          long long v389 = 0u;
                          long long v390 = 0u;
                          long long v387 = 0u;
                          long long v388 = 0u;
                          long long v385 = 0u;
                          long long v386 = 0u;
                          long long v383 = 0u;
                          long long v384 = 0u;
                          long long v381 = 0u;
                          long long v382 = 0u;
                          long long v380 = 0u;
                          memset(buf, 0, sizeof(buf));
                          uint64_t v288 = *(void *)(v270 + 24);
                          *((void *)&v380 + 1) = *(void *)(v288 + 16);
                          *(void *)&long long v387 = v279;
                          *((void *)&v389 + 1) = Mutable;
                          *(double *)&long long v391 = *(float *)(v288 + 8);
                          HIDWORD(v391) = 10;
                          BYTE2(v392) = *(unsigned char *)(v288 + 24);
                          BYTE3(v392) = *(unsigned char *)(v288 + 26);
                          DWORD1(v392) = *(_DWORD *)(v288 + 32);
                          int v289 = *__error();
                          v290 = _SILogForLogForCategory(14);
                          if (os_log_type_enabled(v290, OS_LOG_TYPE_DEFAULT))
                          {
                            uint64_t v291 = *(void *)(v270 + 24);
                            if (*(char *)(v291 + 63) < 0) {
                              uint64_t v292 = *(void *)(v291 + 48);
                            }
                            else {
                              uint64_t v292 = *(unsigned __int8 *)(v291 + 63);
                            }
                            double v293 = *(float *)(v291 + 8);
                            double v294 = *(float *)v291;
                            double v295 = *(float *)(v291 + 4);
                            uint64_t v296 = *(void *)(v291 + 112);
                            unint64_t v297 = 0xAAAAAAAAAAAAAAABLL
                                 * ((uint64_t)(*(void *)(v291 + 136) - *(void *)(v291 + 128)) >> 3);
                            uint64_t v298 = *(void *)(v291 + 16);
                            int v299 = *(unsigned __int8 *)(v291 + 24);
                            int v300 = *(unsigned __int8 *)(v291 + 25);
                            int v301 = *(unsigned __int8 *)(v291 + 26);
                            int v302 = *(_DWORD *)(v291 + 32);
                            *(_DWORD *)v360 = 134220800;
                            *(void *)&v360[4] = v272;
                            *(_WORD *)&v360[12] = 2048;
                            *(double *)&v360[14] = v293;
                            *(_WORD *)&v360[22] = 2048;
                            *(double *)&v360[24] = v294;
                            __int16 v361 = 2048;
                            double v362 = v295;
                            __int16 v363 = 2048;
                            uint64_t v364 = v296;
                            __int16 v365 = 2048;
                            unint64_t v366 = v297;
                            __int16 v367 = 2048;
                            uint64_t v368 = v298;
                            __int16 v369 = 1024;
                            int v370 = v299;
                            __int16 v371 = 1024;
                            int v372 = v300;
                            __int16 v373 = 2048;
                            uint64_t v374 = v292;
                            __int16 v375 = 1024;
                            int v376 = v301;
                            __int16 v377 = 1024;
                            int v378 = v302;
                            _os_log_impl(&dword_1BD672000, v290, OS_LOG_TYPE_DEFAULT, "[Pommes_Suggestions]mail_sugg_ppl: pos:%ld sc_final:%f sc_best_name:%f sc_email_address:%f n_names:%ld n_emailaddresses:%ld t_since_use_creation:%f item_used:%d strong_name:%d len_best_name:%ld missing_name:%d default_scope:%d ", v360, 0x6Au);
                          }
                          *__error() = v289;
                          (*(void (**)(uint64_t, unsigned char *, std::string *))(a8 + 16))(a8, buf, &__str);
                          ++v272;
                        }
                        CFRelease(v279);
                      }
                    }
                    if (Mutable) {
                      CFRelease(Mutable);
                    }
                    v270 += 32;
                    if (v270 == v271) {
                      goto LABEL_487;
                    }
                  }
                }
                uint64_t v272 = 0;
LABEL_487:
                uint64_t v304 = v341.i64[1];
                for (uint64_t j = v341.i64[0]; j != v304; j += 32)
                {
                  std::__compressed_pair<std::string *> v305 = (const char *)j;
                  if (*(char *)(j + 23) < 0) {
                    std::__compressed_pair<std::string *> v305 = *(const char **)j;
                  }
                  CFStringRef v306 = CFStringCreateWithCString(0, v305, 0x8000100u);
                  if (v306)
                  {
                    CFStringRef v307 = v306;
                    long long v391 = 0u;
                    long long v392 = 0u;
                    long long v389 = 0u;
                    long long v390 = 0u;
                    long long v388 = 0u;
                    long long v385 = 0u;
                    long long v386 = 0u;
                    long long v383 = 0u;
                    long long v384 = 0u;
                    long long v381 = 0u;
                    long long v382 = 0u;
                    long long v380 = 0u;
                    memset(buf, 0, sizeof(buf));
                    long long v387 = (unint64_t)v306;
                    *(double *)&long long v391 = *(float *)(*(void *)(j + 24) + 4);
                    HIDWORD(v391) = 9;
                    int v308 = *__error();
                    v309 = _SILogForLogForCategory(14);
                    if (os_log_type_enabled(v309, OS_LOG_TYPE_DEFAULT))
                    {
                      if (*(char *)(j + 23) < 0) {
                        double v310 = *(double *)(j + 8);
                      }
                      else {
                        *(void *)&double v310 = *(unsigned __int8 *)(j + 23);
                      }
                      uint64_t v311 = *(void *)(j + 24);
                      double v312 = *(float *)(v311 + 4);
                      double v313 = *(float *)v311;
                      uint64_t v314 = *(void *)(v311 + 8);
                      *(_DWORD *)v360 = 134219008;
                      *(void *)&v360[4] = v272;
                      *(_WORD *)&v360[12] = 2048;
                      *(double *)&v360[14] = v312;
                      *(_WORD *)&v360[22] = 2048;
                      *(double *)&v360[24] = v313;
                      __int16 v361 = 2048;
                      double v362 = v310;
                      __int16 v363 = 2048;
                      uint64_t v364 = v314;
                      _os_log_impl(&dword_1BD672000, v309, OS_LOG_TYPE_DEFAULT, "[Pommes_Suggestions]mail_sugg_ft: pos:%ld sc_final:%f sc_topicality:%f len_ft:%ld match_type:%ld ", v360, 0x34u);
                    }
                    *__error() = v308;
                    (*(void (**)(uint64_t, unsigned char *, std::string *))(a8 + 16))(a8, buf, &__str);
                    ++v272;
                    CFRelease(v307);
                  }
                }
                *(void *)std::__split_buffer<std::string> buf = &v341;
                std::vector<std::pair<std::string,_freeTextCandidate *>>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
                v315 = (void **)__p[0];
                if (__p[0])
                {
                  do
                  {
                    v316 = (void **)*v315;
                    if (*((char *)v315 + 39) < 0) {
                      operator delete(v315[2]);
                    }
                    operator delete(v315);
                    v315 = v316;
                  }
                  while (v316);
                }
                v317 = v350[0];
                v350[0] = 0;
                if (v317) {
                  operator delete(v317);
                }
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)&v353[16]);
                v318 = *(void **)v353;
                *(void *)v353 = 0;
                if (v318) {
                  operator delete(v318);
                }
                *(void *)std::__split_buffer<std::string> buf = &v355;
                std::vector<std::pair<std::string,_freeTextCandidate *>>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
                goto LABEL_507;
              }
              v209 = *(uint64_t **)(v10 + 40);
              if (!v209)
              {
LABEL_421:
                if (!_os_feature_enabled_impl() || a6)
                {
                  uint64_t v246 = *(long long **)v360;
                  if (*(void *)v360 != *(void *)&v360[8])
                  {
                    do
                    {
                      uint64_t v247 = v341.i64[1];
                      if (v341.i64[1] >= v342)
                      {
                        uint64_t v249 = (v341.i64[1] - v341.i64[0]) >> 5;
                        if ((unint64_t)(v249 + 1) >> 59) {
                          goto LABEL_556;
                        }
                        unint64_t v250 = (uint64_t)(v342 - v341.i64[0]) >> 4;
                        if (v250 <= v249 + 1) {
                          unint64_t v250 = v249 + 1;
                        }
                        if (v342 - v341.i64[0] >= 0x7FFFFFFFFFFFFFE0) {
                          unint64_t v251 = 0x7FFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v251 = v250;
                        }
                        *(void *)&long long v380 = &v342;
                        if (v251)
                        {
                          std::string::size_type v253 = std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,_freeTextCandidate *>>>(v251);
                        }
                        else
                        {
                          std::string::size_type v253 = 0;
                          uint64_t v252 = 0;
                        }
                        uint64_t v255 = (uint64_t)&v253[4 * v249];
                        v256 = (char *)&v253[4 * v252];
                        *(void *)&unsigned char buf[24] = v256;
                        if (*((char *)v246 + 23) < 0)
                        {
                          std::string::__init_copy_ctor_external((std::string *)&v253[4 * v249], *(const std::string::value_type **)v246, *((void *)v246 + 1));
                        }
                        else
                        {
                          long long v257 = *v246;
                          *(void *)(v255 + 16) = *((void *)v246 + 2);
                          *(_OWORD *)uint64_t v255 = v257;
                        }
                        *(void *)&uint8_t buf[8] = 0;
                        *(void *)std::__split_buffer<std::string> buf = 0;
                        v253[4 * v249 + 3] = *((void *)v246 + 3);
                        uint64_t v254 = v255 + 32;
                        *(void *)&uint8_t buf[16] = v255 + 32;
                        uint64_t v258 = v341.i64[1];
                        uint64_t v259 = v341.i64[0];
                        if (v341.i64[1] == v341.i64[0])
                        {
                          int64x2_t v261 = vdupq_n_s64(v341.u64[1]);
                        }
                        else
                        {
                          do
                          {
                            long long v260 = *(_OWORD *)(v258 - 32);
                            *(void *)(v255 - 16) = *(void *)(v258 - 16);
                            *(_OWORD *)(v255 - 32) = v260;
                            *(void *)(v258 - 24) = 0;
                            *(void *)(v258 - 16) = 0;
                            *(void *)(v258 - 32) = 0;
                            *(void *)(v255 - 8) = *(void *)(v258 - 8);
                            v255 -= 32;
                            v258 -= 32;
                          }
                          while (v258 != v259);
                          int64x2_t v261 = v341;
                          uint64_t v254 = *(void *)&buf[16];
                          v256 = *(char **)&buf[24];
                        }
                        v341.i64[0] = v255;
                        v341.i64[1] = v254;
                        *(int64x2_t *)&uint8_t buf[8] = v261;
                        unint64_t v262 = v342;
                        unint64_t v342 = (unint64_t)v256;
                        *(void *)&unsigned char buf[24] = v262;
                        *(void *)std::__split_buffer<std::string> buf = v261.i64[0];
                        std::__split_buffer<std::pair<std::string,_freeTextCandidate *>>::~__split_buffer((uint64_t)buf);
                      }
                      else
                      {
                        if (*((char *)v246 + 23) < 0)
                        {
                          std::string::__init_copy_ctor_external((std::string *)v341.i64[1], *(const std::string::value_type **)v246, *((void *)v246 + 1));
                        }
                        else
                        {
                          long long v248 = *v246;
                          *(void *)(v341.i64[1] + 16) = *((void *)v246 + 2);
                          *(_OWORD *)uint64_t v247 = v248;
                        }
                        *(void *)(v247 + 24) = *((void *)v246 + 3);
                        uint64_t v254 = v247 + 32;
                      }
                      v341.i64[1] = v254;
                      std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,_compareFreeText,std::__wrap_iter<std::pair<std::string,_freeTextCandidate *> *>>(*(uint64_t *)v360, *(uint64_t *)&v360[8], (uint64_t)(*(void *)&v360[8] - *(void *)v360) >> 5);
                      unint64_t v263 = (void **)(*(void *)&v360[8] - 32);
                      if (*(char *)(*(void *)&v360[8] - 9) < 0) {
                        operator delete(*v263);
                      }
                      *(void *)&v360[8] = v263;
                      uint64_t v246 = *(long long **)v360;
                    }
                    while (*(void ***)v360 != v263);
                  }
                  unint64_t v264 = v341.i64[0];
                  if (v341.i64[0] != v341.i64[1])
                  {
                    unint64_t v265 = v341.i64[1] - 32;
                    if ((unint64_t)(v341.i64[1] - 32) > v341.i64[0])
                    {
                      do
                      {
                        uint64_t v266 = *(void *)(v264 + 16);
                        long long v267 = *(_OWORD *)v264;
                        uint64_t v268 = *(void *)(v265 + 16);
                        *(_OWORD *)unint64_t v264 = *(_OWORD *)v265;
                        *(void *)(v264 + 16) = v268;
                        *(_OWORD *)unint64_t v265 = v267;
                        *(void *)(v265 + 16) = v266;
                        uint64_t v269 = *(void *)(v264 + 24);
                        *(void *)(v264 + 24) = *(void *)(v265 + 24);
                        *(void *)(v265 + 24) = v269;
                        v264 += 32;
                        v265 -= 32;
                      }
                      while (v264 < v265);
                    }
                  }
                }
                else
                {
                  memset(v340, 0, 24);
                  std::vector<std::pair<std::string,_freeTextCandidate *>>::__init_with_size[abi:nn180100]<std::pair<std::string,_freeTextCandidate *>*,std::pair<std::string,_freeTextCandidate *>*>(v340, *(long long **)v360, *(long long **)&v360[8], (uint64_t)(*(void *)&v360[8] - *(void *)v360) >> 5);
                  dedupSuggestions((uint64_t *)v340, &v341);
                  *(void *)std::__split_buffer<std::string> buf = v340;
                  std::vector<std::pair<std::string,_freeTextCandidate *>>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
                }
                goto LABEL_453;
              }
              while (1)
              {
                v210 = (const std::string::value_type **)(v209 + 2);
                uint64_t v211 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
                if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v212 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v212 = __s1.__r_.__value_.__l.__size_;
                }
                uint64_t v213 = *((unsigned __int8 *)v209 + 39);
                int v214 = (char)v213;
                std::string::size_type v215 = v209[3];
                if ((v213 & 0x80u) != 0) {
                  uint64_t v213 = v209[3];
                }
                if (v212 == v213)
                {
                  if (v214 >= 0) {
                    v216 = (const std::string::value_type *)(v209 + 2);
                  }
                  else {
                    v216 = *v210;
                  }
                  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
                  {
                    if (!memcmp(__s1.__r_.__value_.__l.__data_, v216, __s1.__r_.__value_.__l.__size_))
                    {
LABEL_381:
                      int v220 = *__error();
                      v224 = _SILogForLogForCategory(14);
                      if (!os_log_type_enabled(v224, OS_LOG_TYPE_DEFAULT)) {
                        goto LABEL_384;
                      }
                      *(_WORD *)std::__split_buffer<std::string> buf = 0;
                      long long v222 = v224;
                      v223 = "[Pommes_Suggestions]mail_debug: 1 FT suggestion thresholded. Reason: same as query.";
LABEL_383:
                      _os_log_impl(&dword_1BD672000, v222, OS_LOG_TYPE_DEFAULT, v223, buf, 2u);
                      goto LABEL_384;
                    }
                  }
                  else
                  {
                    if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
                      goto LABEL_381;
                    }
                    p_s1 = &__s1;
                    while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v216)
                    {
                      p_s1 = (std::string *)((char *)p_s1 + 1);
                      ++v216;
                      if (!--v211) {
                        goto LABEL_381;
                      }
                    }
                  }
                }
                int64_t v218 = *(std::string **)&v360[8];
                uint64_t v219 = *(void *)v360;
                if (*(void *)&v360[8] - *(void *)v360 != 96)
                {
                  if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(*(uint64_t *)v353, *(unint64_t *)&v353[8], (uint64_t)(v209 + 2)))
                  {
                    std::string::size_type v225 = v209[5];
                    if (v214 < 0)
                    {
                      std::string::__init_copy_ctor_external(&__str, *v210, v215);
                      int64_t v218 = *(std::string **)&v360[8];
                    }
                    else
                    {
                      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)v210;
                      __str.__r_.__value_.__r.__words[2] = v209[4];
                    }
                    std::string::size_type v348 = v225;
                    if ((unint64_t)v218 < *(void *)&v360[16])
                    {
                      *int64_t v218 = __str;
                      v218[1].__r_.__value_.__r.__words[0] = v225;
                      memset(&__str, 0, sizeof(__str));
                      uint64_t v228 = (uint64_t)&v218[1].__r_.__value_.__l.__size_;
LABEL_419:
                      *(void *)&v360[8] = v228;
                      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,_compareFreeText &,std::__wrap_iter<std::pair<std::string,_freeTextCandidate *> *>>(*(uint64_t *)v360, v228, (v228 - *(void *)v360) >> 5);
                      goto LABEL_420;
                    }
                    uint64_t v229 = ((uint64_t)v218 - *(void *)v360) >> 5;
                    if ((unint64_t)(v229 + 1) >> 59) {
                      goto LABEL_556;
                    }
                    unint64_t v230 = (uint64_t)(*(void *)&v360[16] - *(void *)v360) >> 4;
                    if (v230 <= v229 + 1) {
                      unint64_t v230 = v229 + 1;
                    }
                    if (*(void *)&v360[16] - *(void *)v360 >= 0x7FFFFFFFFFFFFFE0uLL) {
                      unint64_t v231 = 0x7FFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v231 = v230;
                    }
                    *(void *)&long long v380 = &v360[16];
                    v232 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,_freeTextCandidate *>>>(v231);
                    v234 = (std::string *)&v232[32 * v229];
                    std::string *v234 = __str;
                    memset(&__str, 0, sizeof(__str));
                    v234[1].__r_.__value_.__r.__words[0] = v225;
                    unint64_t v235 = *(void *)&v360[8];
                    uint64_t v236 = *(void *)v360;
                    if (*(void *)&v360[8] != *(void *)v360)
                    {
                      v237 = (std::string *)&v232[32 * v229];
                      do
                      {
                        long long v238 = *(_OWORD *)(v235 - 32);
                        v237[-1].__r_.__value_.__l.__size_ = *(void *)(v235 - 16);
                        *(_OWORD *)&v237[-2].__r_.__value_.__r.__words[2] = v238;
                        *(void *)(v235 - 24) = 0;
                        *(void *)(v235 - 16) = 0;
                        *(void *)(v235 - 32) = 0;
                        v237[-1].__r_.__value_.__r.__words[2] = *(void *)(v235 - 8);
                        v237 = (std::string *)((char *)v237 - 32);
                        v235 -= 32;
                      }
                      while (v235 != v236);
LABEL_416:
                      int64x2_t v244 = *(int64x2_t *)v360;
LABEL_418:
                      uint64_t v228 = (uint64_t)&v234[1].__r_.__value_.__l.__size_;
                      *(void *)v360 = v237;
                      *(void *)&v360[8] = (char *)v234 + 32;
                      *(int64x2_t *)&uint8_t buf[8] = v244;
                      uint64_t v245 = *(void *)&v360[16];
                      *(void *)&v360[16] = &v232[32 * v233];
                      *(void *)&unsigned char buf[24] = v245;
                      *(void *)std::__split_buffer<std::string> buf = v244.i64[0];
                      std::__split_buffer<std::pair<std::string,_freeTextCandidate *>>::~__split_buffer((uint64_t)buf);
                      goto LABEL_419;
                    }
LABEL_417:
                    int64x2_t v244 = vdupq_n_s64(v235);
                    v237 = v234;
                    goto LABEL_418;
                  }
                  int v220 = *__error();
                  uint64_t v221 = _SILogForLogForCategory(14);
                  if (!os_log_type_enabled(v221, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_384;
                  }
LABEL_377:
                  *(_WORD *)std::__split_buffer<std::string> buf = 0;
                  long long v222 = v221;
                  v223 = "[Pommes_Suggestions]mail_debug: 1 FT suggestion thresholded. Reason: same as people candidate.";
                  goto LABEL_383;
                }
                if (*(float *)(*(void *)(*(void *)v360 + 24) + 4) <= *(float *)(v209[5] + 4))
                {
                  if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(*(uint64_t *)v353, *(unint64_t *)&v353[8], (uint64_t)(v209 + 2)))
                  {
                    std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,_compareFreeText,std::__wrap_iter<std::pair<std::string,_freeTextCandidate *> *>>(v219, (uint64_t)v218, 3);
                    unint64_t v226 = *(void *)&v360[8] - 32;
                    if (*(char *)(*(void *)&v360[8] - 9) < 0) {
                      operator delete(*(void **)v226);
                    }
                    *(void *)&v360[8] = v226;
                    std::string::size_type v227 = v209[5];
                    if (*((char *)v209 + 39) < 0)
                    {
                      std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v209[2], v209[3]);
                      unint64_t v226 = *(void *)&v360[8];
                    }
                    else
                    {
                      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)v210;
                      __str.__r_.__value_.__r.__words[2] = v209[4];
                    }
                    std::string::size_type v348 = v227;
                    if (v226 < *(void *)&v360[16])
                    {
                      *(std::string *)unint64_t v226 = __str;
                      *(void *)(v226 + 24) = v227;
                      memset(&__str, 0, sizeof(__str));
                      uint64_t v228 = v226 + 32;
                      goto LABEL_419;
                    }
                    uint64_t v239 = (uint64_t)(v226 - *(void *)v360) >> 5;
                    if ((unint64_t)(v239 + 1) >> 59) {
                      goto LABEL_556;
                    }
                    unint64_t v240 = (uint64_t)(*(void *)&v360[16] - *(void *)v360) >> 4;
                    if (v240 <= v239 + 1) {
                      unint64_t v240 = v239 + 1;
                    }
                    if (*(void *)&v360[16] - *(void *)v360 >= 0x7FFFFFFFFFFFFFE0uLL) {
                      unint64_t v241 = 0x7FFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v241 = v240;
                    }
                    *(void *)&long long v380 = &v360[16];
                    v232 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,_freeTextCandidate *>>>(v241);
                    v234 = (std::string *)&v232[32 * v239];
                    std::string *v234 = __str;
                    memset(&__str, 0, sizeof(__str));
                    v234[1].__r_.__value_.__r.__words[0] = v227;
                    unint64_t v235 = *(void *)&v360[8];
                    uint64_t v242 = *(void *)v360;
                    if (*(void *)&v360[8] != *(void *)v360)
                    {
                      v237 = (std::string *)&v232[32 * v239];
                      do
                      {
                        long long v243 = *(_OWORD *)(v235 - 32);
                        v237[-1].__r_.__value_.__l.__size_ = *(void *)(v235 - 16);
                        *(_OWORD *)&v237[-2].__r_.__value_.__r.__words[2] = v243;
                        *(void *)(v235 - 24) = 0;
                        *(void *)(v235 - 16) = 0;
                        *(void *)(v235 - 32) = 0;
                        v237[-1].__r_.__value_.__r.__words[2] = *(void *)(v235 - 8);
                        v237 = (std::string *)((char *)v237 - 32);
                        v235 -= 32;
                      }
                      while (v235 != v242);
                      goto LABEL_416;
                    }
                    goto LABEL_417;
                  }
                  int v220 = *__error();
                  uint64_t v221 = _SILogForLogForCategory(14);
                  if (os_log_type_enabled(v221, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_377;
                  }
LABEL_384:
                  *__error() = v220;
                }
LABEL_420:
                v209 = (uint64_t *)*v209;
                if (!v209) {
                  goto LABEL_421;
                }
              }
            }
          }
          memset(buf, 0, sizeof(buf));
          *(void *)&long long v380 = 1065353216;
          v319 = v344;
          if (v197 == v344)
          {
            v327 = v197;
          }
          else
          {
            do
            {
              std::string::pointer v320 = v197[1].__r_.__value_.__l.__data_;
              if (v320[87] < 0) {
                std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v320 + 8), *((void *)v320 + 9));
              }
              else {
                std::string __str = *(std::string *)(v320 + 64);
              }
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_str = &__str;
              }
              else {
                p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
              }
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int64_t v322 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              }
              else {
                int64_t v322 = __str.__r_.__value_.__l.__size_;
              }
              unint64_t v323 = v322 - 1;
              if (v322 >= 1)
              {
                v324 = (char *)p_str + v322;
                v325 = p_str;
                do
                {
                  v326 = memchr(v325, 64, v322);
                  if (!v326) {
                    break;
                  }
                  if (*v326 == 64)
                  {
                    if (v326 != v324 && v326 - (unsigned char *)p_str < v323)
                    {
                      std::string::basic_string((std::string *)v360, &__str, v326 - (unsigned char *)p_str + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v341);
                      goto LABEL_533;
                    }
                    break;
                  }
                  v325 = (std::string *)(v326 + 1);
                  int64_t v322 = v324 - (unsigned char *)v325;
                }
                while (v324 - (unsigned char *)v325 >= 1);
              }
              std::string::basic_string[abi:nn180100]<0>(v360, "");
LABEL_533:
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)buf, (uint64_t)v360, (uint64_t)v360);
              if ((v360[23] & 0x80000000) != 0) {
                operator delete(*(void **)v360);
              }
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              uint64_t v197 = (std::string *)((char *)v197 + 32);
            }
            while (v197 != v319);
            uint64_t v197 = v343;
            v327 = v344;
            uint64_t v10 = v334;
            a5 = v333;
          }
          uint64_t v328 = (char *)v327 - (char *)v197;
          if ((unint64_t)v328 > 0x60 && *(void *)&buf[24] >= (unint64_t)((v328 >> 5) - 1)) {
            goto LABEL_553;
          }
          if (!_os_feature_enabled_impl()) {
            goto LABEL_548;
          }
          if (v343 != v344)
          {
            v329 = v343;
            while (!*(unsigned char *)(v329[1].__r_.__value_.__r.__words[0] + 29))
            {
              v329 = (std::string *)((char *)v329 + 32);
              if (v329 == v344) {
                goto LABEL_547;
              }
            }
            goto LABEL_553;
          }
LABEL_547:
          if (*(void *)(v332 + 32) <= 3uLL)
          {
LABEL_548:
            std::string::pointer v330 = v343[1].__r_.__value_.__l.__data_;
            if (v330[25] || (*(float *)v330 > 0.0 || *((float *)v330 + 1) > 0.0) && v330[24])
            {
              int v199 = 1;
              goto LABEL_554;
            }
          }
LABEL_553:
          int v199 = 0;
LABEL_554:
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)&buf[16]);
          v331 = *(void **)buf;
          *(void *)std::__split_buffer<std::string> buf = 0;
          if (v331) {
            operator delete(v331);
          }
          goto LABEL_345;
        }
      }
    }
    else
    {
      v343 = 0;
      v344 = 0;
      v345 = 0;
    }
    int v199 = 0;
    goto LABEL_345;
  }
LABEL_507:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v359[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v359[0].__r_.__value_.__l.__data_);
  }
}

void std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,_comparePhoto,std::__wrap_iter<std::pair<std::string,_photosCandidate *> *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)a1;
    *(void *)long long v19 = *(void *)(a1 + 8);
    *(void *)&v19[7] = *(void *)(a1 + 15);
    char v8 = *(unsigned char *)(a1 + 23);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    uint64_t v9 = *(void *)(a1 + 24);
    int64_t v10 = (unint64_t)(a3 - 2) >> 1;
    uint64_t v11 = a1;
    do
    {
      uint64_t v12 = v11 + 32 * (v6 + 1);
      uint64_t v13 = 2 * v6;
      uint64_t v6 = (2 * v6) | 1;
      uint64_t v14 = v13 + 2;
      if (v14 < a3 && **(float **)(v12 + 24) > **(float **)(v12 + 56))
      {
        v12 += 32;
        uint64_t v6 = v14;
      }
      if (*(char *)(v11 + 23) < 0) {
        operator delete(*(void **)v11);
      }
      long long v15 = *(_OWORD *)v12;
      *(void *)(v11 + 16) = *(void *)(v12 + 16);
      *(_OWORD *)uint64_t v11 = v15;
      *(unsigned char *)(v12 + 23) = 0;
      *(unsigned char *)uint64_t v12 = 0;
      *(void *)(v11 + 24) = *(void *)(v12 + 24);
      uint64_t v11 = v12;
    }
    while (v6 <= v10);
    uint64_t v16 = (void **)(a2 - 32);
    int v17 = *(char *)(v12 + 23);
    if (a2 - 32 == v12)
    {
      if (v17 < 0) {
        operator delete(*(void **)v12);
      }
      *(void *)uint64_t v12 = v7;
      *(void *)(v12 + 8) = *(void *)v19;
      *(void *)(v12 + 15) = *(void *)&v19[7];
      *(unsigned char *)(v12 + 23) = v8;
      *(void *)(v12 + 24) = v9;
    }
    else
    {
      if (v17 < 0) {
        operator delete(*(void **)v12);
      }
      long long v18 = *(_OWORD *)v16;
      *(void *)(v12 + 16) = *(void *)(a2 - 16);
      *(_OWORD *)uint64_t v12 = v18;
      *(unsigned char *)(a2 - 9) = 0;
      *(unsigned char *)(a2 - 32) = 0;
      *(void *)(v12 + 24) = *(void *)(a2 - 8);
      if (*(char *)(a2 - 9) < 0) {
        operator delete(*v16);
      }
      *(void *)(a2 - 32) = v7;
      *(void *)(a2 - 24) = *(void *)v19;
      *(void *)(a2 - 17) = *(void *)&v19[7];
      *(unsigned char *)(a2 - 9) = v8;
      *(void *)(a2 - 8) = v9;
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,_comparePhoto &,std::__wrap_iter<std::pair<std::string,_photosCandidate *> *>>(a1, v12 + 32, (v12 + 32 - a1) >> 5);
    }
  }
}

void _SIPommesSpotlightEnumerateTopicSuggestions(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  v79[0] = 0;
  if (a2)
  {
    unint64_t v4 = a3;
    unint64_t v5 = a1;
    long long v6 = 0uLL;
    if (a1)
    {
      uint64_t v7 = 0;
      while (1)
      {
        uint64_t v8 = *((void *)&v6 + 1);
        uint64_t v9 = v6;
        if (*((void *)&v6 + 1) - (void)v6 != 320) {
          goto LABEL_9;
        }
        long long v59 = v6;
        double v10 = _topicCandidate::computedScore(*(_topicCandidate **)(v6 + 24));
        if (v10 >= _topicCandidate::computedScore((_topicCandidate *)v5[5])) {
          break;
        }
LABEL_35:
        long long v6 = v59;
        unint64_t v5 = (uint64_t *)*v5;
        if (!v5) {
          goto LABEL_36;
        }
      }
      std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,_compareTopic,std::__wrap_iter<std::pair<std::string,_topicCandidate *> *>>(v9, v8, 10);
      if (*(char *)(v8 - 9) < 0) {
        operator delete(*(void **)(v8 - 32));
      }
      *(void *)&long long v6 = v59;
      *((void *)&v6 + 1) = v8 - 32;
LABEL_9:
      uint64_t v11 = v5[5];
      if (*((char *)v5 + 39) < 0)
      {
        long long v60 = v6;
        std::string::__init_copy_ctor_external((std::string *)v64, (const std::string::value_type *)v5[2], v5[3]);
        long long v6 = v60;
      }
      else
      {
        *(_OWORD *)uint64_t v64 = *((_OWORD *)v5 + 1);
        *(void *)&v64[16] = v5[4];
      }
      *(void *)&v64[24] = v11;
      uint64_t v12 = *((void *)&v6 + 1);
      if (*((void *)&v6 + 1) >= (unint64_t)v7)
      {
        uint64_t v15 = v6;
        uint64_t v16 = (uint64_t)(*((void *)&v6 + 1) - v6) >> 5;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 59) {
          abort();
        }
        int64x2_t v61 = (int64x2_t)v6;
        if ((uint64_t)&v7[-v6] >> 4 > v17) {
          unint64_t v17 = (uint64_t)&v7[-v6] >> 4;
        }
        if ((unint64_t)&v7[-v6] >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        if (v18 >> 59) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        long long v19 = (char *)operator new(32 * v18);
        uint64_t v20 = &v19[32 * v16];
        *(_OWORD *)uint64_t v20 = *(_OWORD *)v64;
        uint64_t v21 = *(void *)&v64[16];
        memset(v64, 0, 24);
        *((void *)v20 + 2) = v21;
        *((void *)v20 + 3) = v11;
        if (v12 == v15)
        {
          int64x2_t v23 = vdupq_laneq_s64(v61, 1);
          uint64_t v22 = v20;
        }
        else
        {
          uint64_t v22 = v20;
          int64x2_t v23 = v61;
          do
          {
            long long v24 = *(_OWORD *)(v12 - 32);
            *((void *)v22 - 2) = *(void *)(v12 - 16);
            *((_OWORD *)v22 - 2) = v24;
            *(void *)(v12 - 24) = 0;
            *(void *)(v12 - 16) = 0;
            *(void *)(v12 - 32) = 0;
            *((void *)v22 - 1) = *(void *)(v12 - 8);
            v22 -= 32;
            v12 -= 32;
          }
          while (v12 != v15);
        }
        uint64_t v26 = *(_OWORD *)&v23 >> 64;
        uint64_t v58 = (void *)*(_OWORD *)&v23;
        uint64_t v25 = v23.i64[0];
        while (v26 != v25)
        {
          if (*(char *)(v26 - 9) < 0) {
            operator delete(*(void **)(v26 - 32));
          }
          v26 -= 32;
        }
        uint64_t v14 = (uint64_t)(v20 + 32);
        uint64_t v7 = &v19[32 * v18];
        *(void *)&long long v6 = v22;
        if (v58)
        {
          operator delete(v58);
          *(void *)&long long v6 = v22;
        }
        unint64_t v4 = a3;
      }
      else
      {
        long long v13 = *(_OWORD *)v64;
        *(void *)(*((void *)&v6 + 1) + 16) = *(void *)&v64[16];
        **((_OWORD **)&v6 + 1) = v13;
        memset(v64, 0, 24);
        *(void *)(*((void *)&v6 + 1) + 24) = *(void *)&v64[24];
        uint64_t v14 = *((void *)&v6 + 1) + 32;
      }
      *(void *)&long long v27 = v6;
      *((void *)&v27 + 1) = v14;
      long long v59 = v27;
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,_compareTopic &,std::__wrap_iter<std::pair<std::string,_topicCandidate *> *>>(v6, v14, (v14 - (uint64_t)v6) >> 5);
      goto LABEL_35;
    }
LABEL_36:
    unint64_t v28 = 0;
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    while (1)
    {
      uint64_t v30 = *((void *)&v6 + 1);
      uint64_t v29 = v6;
      if ((void)v6 == *((void *)&v6 + 1)) {
        break;
      }
      long long v62 = v6;
      memset(v78, 0, sizeof(v78));
      if (*(char *)(v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v78, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
      }
      else
      {
        long long v31 = *(_OWORD *)v6;
        *(void *)&v78[16] = *(void *)(v6 + 16);
        *(_OWORD *)uint64_t v78 = v31;
      }
      *(void *)&v78[24] = *(void *)(v29 + 24);
      if (v78[23] >= 0) {
        unint64_t v32 = v78;
      }
      else {
        unint64_t v32 = *(const char **)v78;
      }
      CFStringRef v33 = CFStringCreateWithCString(0, v32, 0x8000100u);
      if (v33)
      {
        CFStringRef v34 = v33;
        uint64_t v35 = *(void *)&v78[24];
        CFIndex v36 = *(void *)(*(void *)&v78[24] + 184);
        if (v36)
        {
          Mutable = CFArrayCreateMutable(allocator, v36, MEMORY[0x1E4F1D510]);
          uint64_t v38 = *(long long **)&v78[24];
          long long v39 = *(void **)(*(void *)&v78[24] + 168);
          if (v39 != (void *)(*(void *)&v78[24] + 176))
          {
            do
            {
              memset(v64, 0, 24);
              if (*((char *)v39 + 55) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v64, (const std::string::value_type *)v39[4], v39[5]);
              }
              else
              {
                *(_OWORD *)uint64_t v64 = *((_OWORD *)v39 + 2);
                *(void *)&v64[16] = v39[6];
              }
              if (v64[23] >= 0) {
                uint64_t v40 = v64;
              }
              else {
                uint64_t v40 = *(const char **)v64;
              }
              CFStringRef v41 = CFStringCreateWithCString(0, v40, 0x8000100u);
              CFArrayAppendValue(Mutable, v41);
              CFRelease(v41);
              if ((v64[23] & 0x80000000) != 0) {
                operator delete(*(void **)v64);
              }
              long long v42 = (void *)v39[1];
              if (v42)
              {
                do
                {
                  int64x2_t v43 = v42;
                  long long v42 = (void *)*v42;
                }
                while (v42);
              }
              else
              {
                do
                {
                  int64x2_t v43 = (void *)v39[2];
                  BOOL v44 = *v43 == (void)v39;
                  long long v39 = v43;
                }
                while (!v44);
              }
              uint64_t v38 = *(long long **)&v78[24];
              long long v39 = v43;
            }
            while (v43 != (void *)(*(void *)&v78[24] + 176));
          }
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          long long v66 = 0u;
          long long v67 = 0u;
          long long v65 = 0u;
          memset(v64, 0, sizeof(v64));
          *(void *)&long long v65 = *((void *)v38 + 16);
          uint64_t v45 = *((void *)v38 + 13);
          *((void *)&v65 + 1) = *((void *)v38 + 11);
          *(void *)&long long v66 = v45;
          long long v67 = *v38;
          long long v46 = v38[1];
          long long v47 = v38[2];
          long long v48 = v38[4];
          long long v70 = v38[3];
          long long v71 = v48;
          long long v68 = v46;
          long long v69 = v47;
          long long v73 = 0uLL;
          LODWORD(v74) = 0;
          long long v72 = (unint64_t)v34;
          *((void *)&v74 + 1) = Mutable;
          *(void *)&long long v75 = *((void *)v38 + 12);
          *(void *)&long long v76 = _topicCandidate::computedScore((_topicCandidate *)v38);
          HIDWORD(v76) = *((_DWORD *)v38 + 34);
          BYTE1(v77) = *((void *)v38 + 20) == 1;
          BYTE2(v77) = *((unsigned char *)v38 + 81);
          DWORD1(v77) = 0;
          BYTE8(v77) = *((unsigned char *)v38 + 80);
          BYTE9(v77) = *((_DWORD *)v38 + 28) > 1;
          (*(void (**)(uint64_t, unsigned char *, unsigned char *))(a4 + 16))(a4, v64, v79);
          CFRelease(Mutable);
          unint64_t v4 = a3;
        }
        else
        {
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          long long v66 = 0u;
          long long v67 = 0u;
          long long v65 = 0u;
          memset(v64, 0, sizeof(v64));
          *(void *)&long long v65 = *(void *)(*(void *)&v78[24] + 128);
          uint64_t v49 = *(void *)(*(void *)&v78[24] + 104);
          *((void *)&v65 + 1) = *(void *)(*(void *)&v78[24] + 88);
          *(void *)&long long v66 = v49;
          long long v67 = **(_OWORD **)&v78[24];
          long long v50 = *(_OWORD *)(*(void *)&v78[24] + 16);
          long long v51 = *(_OWORD *)(*(void *)&v78[24] + 32);
          long long v52 = *(_OWORD *)(*(void *)&v78[24] + 64);
          long long v70 = *(_OWORD *)(*(void *)&v78[24] + 48);
          long long v71 = v52;
          long long v68 = v50;
          long long v69 = v51;
          long long v72 = (unint64_t)v33;
          long long v73 = 0uLL;
          LODWORD(v74) = 0;
          *(void *)&long long v75 = *(void *)(*(void *)&v78[24] + 96);
          *(void *)&long long v76 = _topicCandidate::computedScore(*(_topicCandidate **)&v78[24]);
          HIDWORD(v76) = *(_DWORD *)(v35 + 136);
          BYTE1(v77) = *(void *)(v35 + 160) == 1;
          BYTE2(v77) = *(unsigned char *)(v35 + 81);
          DWORD1(v77) = 0;
          BYTE8(v77) = *(unsigned char *)(v35 + 80);
          BYTE9(v77) = *(_DWORD *)(v35 + 112) > 1;
          (*(void (**)(uint64_t, unsigned char *, unsigned char *))(a4 + 16))(a4, v64, v79);
        }
        CFRelease(v34);
        ++v28;
      }
      if (v28 >= v4)
      {
        long long v6 = v62;
      }
      else
      {
        std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,_compareTopic,std::__wrap_iter<std::pair<std::string,_topicCandidate *> *>>(v29, v30, (v30 - v29) >> 5);
        if (*(char *)(v30 - 9) < 0) {
          operator delete(*(void **)(v30 - 32));
        }
        *(void *)&long long v6 = v62;
        *((void *)&v6 + 1) = v30 - 32;
      }
      if ((v78[23] & 0x80000000) != 0)
      {
        long long v63 = v6;
        operator delete(*(void **)v78);
        long long v6 = v63;
      }
      if (v28 >= v4)
      {
        uint64_t v29 = v6;
        break;
      }
    }
    if (v29)
    {
      int v54 = (void **)*((void *)&v6 + 1);
      unint64_t v53 = (void **)v6;
      while (v54 != v53)
      {
        if (*((char *)v54 - 9) < 0) {
          operator delete(*(v54 - 4));
        }
        v54 -= 4;
      }
      operator delete(v53);
    }
  }
}

char *std::__hash_table<std::__hash_value_type<std::string,_peopleCandidate *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,_peopleCandidate *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,_peopleCandidate *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,_peopleCandidate *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (uint64_t *)a2;
  }
  else {
    uint64_t v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = a1[1];
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v9;
      if (v9 >= v11) {
        unint64_t v14 = v9 % v11;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v9;
    }
    uint64_t v15 = *(void ***)(*a1 + 8 * v14);
    if (v15)
    {
      uint64_t v16 = (char *)*v15;
      if (*v15)
      {
        do
        {
          unint64_t v17 = *((void *)v16 + 1);
          if (v17 == v10)
          {
            if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)v16 + 16, (unsigned __int8 *)a2))
            {
              return v16;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v17 >= v11) {
                v17 %= v11;
              }
            }
            else
            {
              v17 &= v11 - 1;
            }
            if (v17 != v14) {
              break;
            }
          }
          uint64_t v16 = *(char **)v16;
        }
        while (v16);
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  unint64_t v18 = a1 + 2;
  uint64_t v16 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = v10;
  long long v19 = (std::string *)(v16 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v16 + 4) = *(void *)(a3 + 16);
  }
  *((void *)v16 + 5) = 0;
  float v20 = (float)(unint64_t)(a1[3] + 1);
  float v21 = *((float *)a1 + 8);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    else {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v11 = a1[1];
    if (*(void *)&prime > v11) {
      goto LABEL_39;
    }
    if (*(void *)&prime < v11)
    {
      unint64_t v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v11 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (*(void *)&prime <= v32) {
        int8x8_t prime = (int8x8_t)v32;
      }
      if (*(void *)&prime >= v11)
      {
        unint64_t v11 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_39:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v26 = operator new(8 * *(void *)&prime);
          long long v27 = (void *)*a1;
          *a1 = (uint64_t)v26;
          if (v27) {
            operator delete(v27);
          }
          uint64_t v28 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v28++) = 0;
          while (*(void *)&prime != v28);
          uint64_t v29 = (void *)*v18;
          if (*v18)
          {
            unint64_t v30 = v29[1];
            uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(void *)&prime) {
                v30 %= *(void *)&prime;
              }
            }
            else
            {
              v30 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v30) = v18;
            uint64_t v35 = (void *)*v29;
            if (*v29)
            {
              do
              {
                unint64_t v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(void *)&prime) {
                    v36 %= *(void *)&prime;
                  }
                }
                else
                {
                  v36 &= *(void *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(void *)(*a1 + 8 * v36))
                  {
                    *(void *)(*a1 + 8 * v36) = v29;
                    goto LABEL_64;
                  }
                  void *v29 = *v35;
                  *uint64_t v35 = **(void **)(*a1 + 8 * v36);
                  **(void **)(*a1 + 8 * v36) = v35;
                  uint64_t v35 = v29;
                }
                unint64_t v36 = v30;
LABEL_64:
                uint64_t v29 = v35;
                uint64_t v35 = (void *)*v35;
                unint64_t v30 = v36;
              }
              while (v35);
            }
          }
          unint64_t v11 = (unint64_t)prime;
          goto LABEL_68;
        }
        CFStringRef v41 = (void *)*a1;
        *a1 = 0;
        if (v41) {
          operator delete(v41);
        }
        unint64_t v11 = 0;
        a1[1] = 0;
      }
    }
LABEL_68:
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v14 = v10 % v11;
      }
      else {
        unint64_t v14 = v10;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v10;
    }
  }
  uint64_t v37 = *a1;
  uint64_t v38 = *(void **)(*a1 + 8 * v14);
  if (v38)
  {
    *(void *)uint64_t v16 = *v38;
LABEL_81:
    *uint64_t v38 = v16;
    goto LABEL_82;
  }
  *(void *)uint64_t v16 = *v18;
  *unint64_t v18 = v16;
  *(void *)(v37 + 8 * v14) = v18;
  if (*(void *)v16)
  {
    unint64_t v39 = *(void *)(*(void *)v16 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v39 >= v11) {
        v39 %= v11;
      }
    }
    else
    {
      v39 &= v11 - 1;
    }
    uint64_t v38 = (void *)(*a1 + 8 * v39);
    goto LABEL_81;
  }
LABEL_82:
  ++a1[3];
  return v16;
}

void std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,_comparePeople,std::__wrap_iter<std::pair<std::string,_peopleCandidate *> *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v17 = *(void *)a1;
    *(void *)long long v19 = *(void *)(a1 + 8);
    *(void *)&v19[7] = *(void *)(a1 + 15);
    char v18 = *(unsigned char *)(a1 + 23);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    uint64_t v7 = *(void *)(a1 + 24);
    int64_t v8 = (unint64_t)(a3 - 2) >> 1;
    uint64_t v9 = a1;
    do
    {
      uint64_t v10 = v9 + 32 * v6 + 32;
      uint64_t v11 = 2 * v6;
      uint64_t v6 = (2 * v6) | 1;
      uint64_t v12 = v11 + 2;
      if (v11 + 2 < a3 && _comparePeople::operator()((void *)v10, (void *)(v10 + 32)))
      {
        v10 += 32;
        uint64_t v6 = v12;
      }
      if (*(char *)(v9 + 23) < 0) {
        operator delete(*(void **)v9);
      }
      long long v13 = *(_OWORD *)v10;
      *(void *)(v9 + 16) = *(void *)(v10 + 16);
      *(_OWORD *)uint64_t v9 = v13;
      *(unsigned char *)(v10 + 23) = 0;
      *(unsigned char *)uint64_t v10 = 0;
      *(void *)(v9 + 24) = *(void *)(v10 + 24);
      uint64_t v9 = v10;
    }
    while (v6 <= v8);
    unint64_t v14 = (void **)(a2 - 32);
    int v15 = *(char *)(v10 + 23);
    if (a2 - 32 == v10)
    {
      if (v15 < 0) {
        operator delete(*(void **)v10);
      }
      *(void *)uint64_t v10 = v17;
      *(void *)(v10 + 8) = *(void *)v19;
      *(void *)(v10 + 15) = *(void *)&v19[7];
      *(unsigned char *)(v10 + 23) = v18;
      *(void *)(v10 + 24) = v7;
    }
    else
    {
      if (v15 < 0) {
        operator delete(*(void **)v10);
      }
      long long v16 = *(_OWORD *)v14;
      *(void *)(v10 + 16) = *(void *)(a2 - 16);
      *(_OWORD *)uint64_t v10 = v16;
      *(unsigned char *)(a2 - 9) = 0;
      *(unsigned char *)(a2 - 32) = 0;
      *(void *)(v10 + 24) = *(void *)(a2 - 8);
      if (*(char *)(a2 - 9) < 0) {
        operator delete(*v14);
      }
      *(void *)(a2 - 32) = v17;
      *(void *)(a2 - 24) = *(void *)v19;
      *(void *)(a2 - 17) = *(void *)&v19[7];
      *(unsigned char *)(a2 - 9) = v18;
      *(void *)(a2 - 8) = v7;
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,_comparePeople &,std::__wrap_iter<std::pair<std::string,_peopleCandidate *> *>>(a1, v10 + 32, (v10 + 32 - a1) >> 5);
    }
  }
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (uint64_t *)a2;
  }
  else {
    uint64_t v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v9;
      if (v9 >= v11) {
        unint64_t v14 = v9 % v11;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v9;
    }
    int v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v14);
    if (v15)
    {
      for (CFIndex i = *v15; i; CFIndex i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2)) {
            return;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  char v18 = operator new(0x28uLL);
  v18[1] = v10;
  long long v19 = (std::string *)(v18 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v18[4] = *(void *)(a3 + 16);
  }
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v14 = v10 % v11;
      }
      else {
        unint64_t v14 = v10;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  long long v27 = *(void **)(*(void *)a1 + 8 * v14);
  if (v27)
  {
    *char v18 = *v27;
LABEL_47:
    void *v27 = v18;
    goto LABEL_48;
  }
  uint64_t v28 = *(void *)(a1 + 16);
  *char v18 = v28;
  *(void *)(a1 + 16) = v18;
  *(void *)(v26 + 8 * v14) = a1 + 16;
  if (v28)
  {
    unint64_t v29 = *(void *)(v28 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v29 >= v11) {
        v29 %= v11;
      }
    }
    else
    {
      v29 &= v11 - 1;
    }
    long long v27 = (void *)(*(void *)a1 + 8 * v29);
    goto LABEL_47;
  }
LABEL_48:
  ++*(void *)(a1 + 24);
}

void std::vector<std::pair<std::string,_freeTextCandidate *>>::__init_with_size[abi:nn180100]<std::pair<std::string,_freeTextCandidate *>*,std::pair<std::string,_freeTextCandidate *>*>(std::string **a1, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 59) {
      abort();
    }
    uint64_t v7 = (std::string *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,_freeTextCandidate *>>>(a4);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = (std::string *)((char *)v7 + 32 * v8);
    while (a2 != a3)
    {
      if (*((char *)a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *((void *)a2 + 1));
      }
      else
      {
        long long v9 = *a2;
        v7->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
      }
      v7[1].__r_.__value_.__r.__words[0] = *((void *)a2 + 3);
      a2 += 2;
      uint64_t v7 = (std::string *)((char *)v7 + 32);
    }
    a1[1] = v7;
  }
}

double std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,_comparePeople &,std::__wrap_iter<std::pair<std::string,_peopleCandidate *> *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v20 = v3;
    uint64_t v21 = v4;
    unint64_t v8 = v5 >> 1;
    long long v9 = (long long *)(a1 + 32 * (v5 >> 1));
    unint64_t v10 = (long long *)(a2 - 32);
    if (_comparePeople::operator()(v9, (void *)(a2 - 32)))
    {
      long long v17 = *v10;
      uint64_t v12 = *((void *)v10 + 2);
      *((void *)v10 + 1) = 0;
      *((void *)v10 + 2) = 0;
      *(void *)unint64_t v10 = 0;
      uint64_t v13 = *(void *)(a2 - 8);
      uint64_t v18 = v12;
      uint64_t v19 = v13;
      do
      {
        unint64_t v14 = v9;
        if (*((char *)v10 + 23) < 0) {
          operator delete(*(void **)v10);
        }
        long long v15 = *v9;
        *((void *)v10 + 2) = *((void *)v9 + 2);
        *unint64_t v10 = v15;
        *((unsigned char *)v9 + 23) = 0;
        *(unsigned char *)long long v9 = 0;
        *((void *)v10 + 3) = *((void *)v9 + 3);
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        long long v9 = (long long *)(a1 + 32 * v8);
        unint64_t v10 = v14;
      }
      while (_comparePeople::operator()(v9, &v17));
      if (*((char *)v14 + 23) < 0) {
        operator delete(*(void **)v14);
      }
      double result = *(double *)&v17;
      *unint64_t v14 = v17;
      uint64_t v16 = v19;
      *((void *)v14 + 2) = v18;
      *((void *)v14 + 3) = v16;
    }
  }
  return result;
}

BOOL _comparePeople::operator()(void *a1, void *a2)
{
  uint64_t v2 = a1[3];
  float v3 = *(float *)(v2 + 8);
  uint64_t v4 = a2[3];
  float v5 = *(float *)(v4 + 8);
  if (v3 != v5) {
    return v3 > v5;
  }
  unsigned int v7 = *(unsigned __int8 *)(v2 + 24);
  unsigned int v8 = *(unsigned __int8 *)(v4 + 24);
  if (v7 != v8) {
    return v7 > v8;
  }
  double v9 = *(double *)(v2 + 16);
  if (v9 > 0.000000100000001)
  {
    double v10 = *(double *)(v4 + 16);
    if (v10 > 0.000000100000001) {
      return v9 < v10;
    }
  }
  int v11 = *((char *)a2 + 23);
  int v12 = *((char *)a1 + 23);
  if (v12 >= 0) {
    size_t v13 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v13 = a1[1];
  }
  if (v12 < 0) {
    a1 = (void *)*a1;
  }
  if (v11 >= 0) {
    size_t v14 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v14 = a2[1];
  }
  if (v11 < 0) {
    a2 = (void *)*a2;
  }
  if (v14 >= v13) {
    size_t v15 = v13;
  }
  else {
    size_t v15 = v14;
  }
  int v16 = memcmp(a1, a2, v15);
  if (v16) {
    return v16 < 0;
  }
  else {
    return v13 < v14;
  }
}

double _topicCandidate::computedScore(_topicCandidate *this)
{
  unint64_t v3 = *(void *)this;
  unint64_t v2 = *((void *)this + 1);
  double v4 = 0.0;
  double v5 = 0.0;
  if (v2) {
    double v5 = log((double)v2) * 18.9648897;
  }
  if (v3) {
    double v4 = log((double)v3);
  }
  uint64_t v6 = *((int *)this + 29);
  double v7 = 0.0;
  double v8 = *((double *)this + 13);
  double v9 = (v5 + v4) * 0.25
     + 0.0
     + (double)*((int *)this + 28) * 2.5
     + (double)(int)v6 * 2.5
     + *((double *)this + 12) * 0.25;
  if (v8 != 0.0)
  {
    double v10 = fabs(v8);
    double v11 = v9 - v10 * 0.25;
    double v9 = v9 + v10 * 0.25;
    if (v10 < 5.0) {
      double v9 = v11;
    }
    uint64_t v12 = *((void *)this + 15);
    if ((unint64_t)(v6 - v12) < 4 && v6 != v12) {
      double v9 = v9 + (double)(unint64_t)(v6 - v12) * 5.0;
    }
  }
  double v14 = *((double *)this + 11);
  if (v14 <= 40996800.0) {
    double v14 = -0.0;
  }
  double v15 = v9 + v14 - (double)*((unint64_t *)this + 20);
  double v16 = 0.5;
  if (!*((unsigned char *)this + 80)) {
    double v16 = 0.0;
  }
  double v17 = v15 + v16;
  if (*((unsigned char *)this + 81)) {
    double v7 = 2.0;
  }
  return -(v17 + v7);
}

void std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,_compareTopic,std::__wrap_iter<std::pair<std::string,_topicCandidate *> *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 >= 2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)a1;
    *(void *)uint64_t v20 = *(void *)(a1 + 8);
    *(void *)&v20[7] = *(void *)(a1 + 15);
    char v19 = *(unsigned char *)(a1 + 23);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    uint64_t v8 = *(void *)(a1 + 24);
    int64_t v9 = (unint64_t)(a3 - 2) >> 1;
    uint64_t v10 = a1;
    do
    {
      uint64_t v11 = v10 + 32 * v6 + 32;
      uint64_t v12 = 2 * v6;
      uint64_t v6 = (2 * v6) | 1;
      uint64_t v13 = v12 + 2;
      if (v12 + 2 < a3)
      {
        BOOL v14 = _compareTopic::operator()(*(_topicCandidate **)(v11 + 24), *(_topicCandidate **)(v11 + 56));
        v11 += 32 * v14;
        if (v14) {
          uint64_t v6 = v13;
        }
      }
      if (*(char *)(v10 + 23) < 0) {
        operator delete(*(void **)v10);
      }
      long long v15 = *(_OWORD *)v11;
      *(void *)(v10 + 16) = *(void *)(v11 + 16);
      *(_OWORD *)uint64_t v10 = v15;
      *(unsigned char *)(v11 + 23) = 0;
      *(unsigned char *)uint64_t v11 = 0;
      *(void *)(v10 + 24) = *(void *)(v11 + 24);
      uint64_t v10 = v11;
    }
    while (v6 <= v9);
    double v16 = (void **)(a2 - 32);
    int v17 = *(char *)(v11 + 23);
    if (a2 - 32 == v11)
    {
      if (v17 < 0) {
        operator delete(*(void **)v11);
      }
      *(void *)uint64_t v11 = v7;
      *(void *)(v11 + 8) = *(void *)v20;
      *(void *)(v11 + 15) = *(void *)&v20[7];
      *(unsigned char *)(v11 + 23) = v19;
      *(void *)(v11 + 24) = v8;
    }
    else
    {
      if (v17 < 0) {
        operator delete(*(void **)v11);
      }
      long long v18 = *(_OWORD *)v16;
      *(void *)(v11 + 16) = *(void *)(a2 - 16);
      *(_OWORD *)uint64_t v11 = v18;
      *(unsigned char *)(a2 - 9) = 0;
      *(unsigned char *)(a2 - 32) = 0;
      *(void *)(v11 + 24) = *(void *)(a2 - 8);
      if (*(char *)(a2 - 9) < 0) {
        operator delete(*v16);
      }
      *(void *)(a2 - 32) = v7;
      *(void *)(a2 - 24) = *(void *)v20;
      *(void *)(a2 - 17) = *(void *)&v20[7];
      *(unsigned char *)(a2 - 9) = v19;
      *(void *)(a2 - 8) = v8;
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,_compareTopic &,std::__wrap_iter<std::pair<std::string,_topicCandidate *> *>>(a1, v11 + 32, (v11 + 32 - a1) >> 5);
    }
  }
}

__n128 std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,_compareTopic &,std::__wrap_iter<std::pair<std::string,_topicCandidate *> *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v6 = v3 >> 1;
    uint64_t v7 = (long long *)(a1 + 32 * (v3 >> 1));
    uint64_t v8 = *(_topicCandidate **)(a2 - 8);
    if (_compareTopic::operator()(*((_topicCandidate **)v7 + 3), v8))
    {
      uint64_t v10 = (__n128 *)(a2 - 32);
      __n128 v13 = *(__n128 *)(a2 - 32);
      unint64_t v14 = *(void *)(a2 - 16);
      *(void *)(a2 - 24) = 0;
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 32) = 0;
      do
      {
        uint64_t v11 = (__n128 *)v7;
        if (v10[1].n128_i8[7] < 0) {
          operator delete((void *)v10->n128_u64[0]);
        }
        __n128 v12 = (__n128)*v7;
        v10[1].n128_u64[0] = *((void *)v7 + 2);
        *uint64_t v10 = v12;
        *((unsigned char *)v7 + 23) = 0;
        *(unsigned char *)uint64_t v7 = 0;
        v10[1].n128_u64[1] = *((void *)v7 + 3);
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v7 = (long long *)(a1 + 32 * v6);
        uint64_t v10 = v11;
      }
      while (_compareTopic::operator()(*((_topicCandidate **)v7 + 3), v8));
      if (v11[1].n128_i8[7] < 0) {
        operator delete((void *)v11->n128_u64[0]);
      }
      __n128 result = v13;
      *uint64_t v11 = v13;
      v11[1].n128_u64[0] = v14;
      v11[1].n128_u64[1] = (unint64_t)v8;
    }
  }
  return result;
}

BOOL _compareTopic::operator()(_topicCandidate *a1, _topicCandidate *a2)
{
  int v2 = *((_DWORD *)a1 + 34);
  int v3 = *((_DWORD *)a2 + 34);
  if (v2 != v3) {
    return v2 < v3;
  }
  double v5 = _topicCandidate::computedScore(a1);
  return v5 > _topicCandidate::computedScore(a2);
}

void std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,_comparePhoto &,std::__wrap_iter<std::pair<std::string,_photosCandidate *> *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v5 = v3 >> 1;
    unint64_t v6 = *(float **)(a2 - 8);
    if (**(float **)(a1 + 32 * (v3 >> 1) + 24) > *v6)
    {
      uint64_t v8 = *(void *)(a2 - 32);
      uint64_t v7 = (long long *)(a2 - 32);
      *(void *)__n128 v12 = *(void *)(a2 - 24);
      *(void *)&v12[7] = *(void *)(a2 - 17);
      char v9 = *(unsigned char *)(a2 - 9);
      *((void *)v7 + 1) = 0;
      *((void *)v7 + 2) = 0;
      *(void *)uint64_t v7 = 0;
      do
      {
        if (*((char *)v7 + 23) < 0) {
          operator delete(*(void **)v7);
        }
        uint64_t v10 = (long long *)(a1 + 32 * v5);
        long long v11 = *v10;
        *((void *)v7 + 2) = *((void *)v10 + 2);
        *uint64_t v7 = v11;
        *((unsigned char *)v10 + 23) = 0;
        *(unsigned char *)uint64_t v10 = 0;
        *((void *)v7 + 3) = *((void *)v10 + 3);
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v7 = v10;
      }
      while (**(float **)(a1 + 32 * v5 + 24) > *v6);
      if (*((char *)v10 + 23) < 0) {
        operator delete(*(void **)v10);
      }
      *(void *)uint64_t v10 = v8;
      *((void *)v10 + 1) = *(void *)v12;
      *(void *)((char *)v10 + 15) = *(void *)&v12[7];
      *((unsigned char *)v10 + 23) = v9;
      *((void *)v10 + 3) = v6;
    }
  }
}

__int16 *normalizePunctuations(__int16 *result, int a2)
{
  if (result && a2 >= 1)
  {
    uint64_t v2 = a2;
    while (1)
    {
      unsigned int v3 = (unsigned __int16)*result;
      __int16 v4 = 39;
      if (v3 <= 0x200F)
      {
        if (v3 - 697 <= 0xF && ((1 << (v3 + 71)) & 0x8009) != 0) {
          goto LABEL_17;
        }
        if (v3 != 173)
        {
          if (v3 != 180) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
        goto LABEL_7;
      }
      char v5 = v3 - 16;
      if (v3 - 8208 > 0x22) {
        goto LABEL_20;
      }
      if (((1 << v5) & 0x1F) == 0) {
        break;
      }
LABEL_7:
      __int16 v4 = 45;
LABEL_17:
      uint64_t *result = v4;
LABEL_18:
      ++result;
      if (!--v2) {
        return result;
      }
    }
    if (((1 << v5) & 0x400000B00) != 0) {
      goto LABEL_17;
    }
LABEL_20:
    if (v3 != 8722) {
      goto LABEL_18;
    }
    goto LABEL_7;
  }
  return result;
}

void pommesSuggestionsTokenizeString(uint64_t a1, const char *a2, int32_t a3, unsigned __int16 *a4, unsigned __int16 *a5, uint64_t a6, char a7, int a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, unsigned int a12)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  int v19 = *(unsigned __int8 *)(a6 + 62088);
  if (_normalizeUnicodeString_onceToken != -1) {
    dispatch_once(&_normalizeUnicodeString_onceToken, &__block_literal_global_317);
  }
  pErrorCode[0] = U_ZERO_ERROR;
  *(_DWORD *)(a6 + 16) = 0;
  bzero(dest, 0x7D0uLL);
  pDestCFIndex Length = 0;
  int32_t v20 = 1000;
  u_strFromUTF8(dest, 1000, &pDestLength, a2, a3, pErrorCode);
  if (pErrorCode[0] == U_BUFFER_OVERFLOW_ERROR)
  {
    pDestCFIndex Length = 1000;
    pErrorCode[0] = U_ZERO_ERROR;
  }
  else
  {
    int32_t v20 = pDestLength;
    if (!pDestLength) {
      goto LABEL_17;
    }
  }
  if (_normalizeUnicodeString_norm2 && (v19 || (v21 = unorm2_quickCheck(), int32_t v20 = pDestLength, v21 != 1)))
  {
    int v25 = unorm2_normalize();
    if (pErrorCode[0] == U_BUFFER_OVERFLOW_ERROR) {
      int v23 = 1000;
    }
    else {
      int v23 = v25;
    }
  }
  else
  {
    int32_t v22 = u_strToLower((UChar *)(a6 + 40064), 1000, dest, v20, 0, pErrorCode);
    int v23 = v22;
    pDestCFIndex Length = v22;
    uint64_t v24 = v22;
    if (pErrorCode[0] == U_BUFFER_OVERFLOW_ERROR) {
      memcpy((void *)(a6 + 40064), dest, 2 * v22);
    }
    *(_WORD *)(a6 + 2 * v24 + 40064) = 0;
  }
  *(_DWORD *)(a6 + 16) = v23;
  if (a8) {
    normalizePunctuations((__int16 *)(a6 + 40064), pDestLength);
  }
LABEL_17:
  CFIndex v26 = *(int *)(a6 + 16);
  if (v26
    && (CFStringRef v27 = CFStringCreateWithCharactersNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UniChar *)(a6 + 40064), v26, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0])) != 0)
  {
    CFStringRef v56 = a5;
    long long v67 = 0u;
    long long v68 = 0u;
    *(void *)dest = a1;
    uint64_t v63 = a6 + 40064;
    uint64_t v28 = *(int *)(a6 + 16);
    CFStringRef v29 = v27;
    uint64_t v64 = a6 + 40064 + 2 * v28;
    uint64_t v65 = a6 + 16040;
    uint64_t v66 = a6 + 32056;
    LOWORD(v67) = 1000;
    *(void *)&long long v68 = a6 + 24;
    BYTE10(v68) = a7;
    BOOL v30 = SIStringContainsNewlineCharacters(a6 + 40064, v28);
    if (v30) {
      a10 = 0;
    }
    if (v30) {
      uint64_t v32 = a11;
    }
    else {
      uint64_t v32 = 0;
    }
    CITokenizerGetTokensNew(a1, (uint64_t)v29, *(void *)a6, a12, 0, a10, 0, v32, (uint64_t)dest);
    unsigned int v33 = WORD1(v67);
    if (a10)
    {
      unsigned __int16 v34 = WORD4(v68);
      if (*((uint64_t *)&v67 + 1) < WORD1(v67))
      {
        uint64_t v35 = WORD2(v67);
        if (WORD2(v67))
        {
          unint64_t v36 = (void *)(v68 + 16 * WORD4(v68));
          *unint64_t v36 = *((void *)&v67 + 1);
          v36[1] = v35;
          WORD4(v68) = ++v34;
        }
      }
    }
    else
    {
      unsigned __int16 v34 = WORD4(v68);
    }
    uint64_t v38 = a6 + 42066;
    if (v33 > 1) {
      __int16 v39 = a9;
    }
    else {
      __int16 v39 = 0;
    }
    unsigned __int16 v40 = v33 - v39;
    if (v34 < 2u) {
      char v41 = 1;
    }
    else {
      char v41 = a7;
    }
    if (v41) {
      uint64_t v42 = 0;
    }
    else {
      uint64_t v42 = *(void *)(v68 + 8) - 1;
    }
    unsigned __int16 v55 = v40;
    if (v40)
    {
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      unsigned __int16 v54 = v34;
      unint64_t v57 = v34;
      uint64_t v59 = v40;
      unint64_t v45 = 4001;
      long long v46 = (void *)a6;
      long long v47 = (unsigned char *)(a6 + 42066);
      do
      {
        uint64_t v48 = v46[2006];
        if (v45 <= 4 * v48) {
          break;
        }
        uint64_t v49 = (unsigned __int16 *)(a6 + 40064 + 2 * v46[2005]);
        *(void *)pErrorCode = 0;
        if (utf8_encodestr(v49, 2 * v48, v47, pErrorCode, v45)) {
          uint64_t v50 = 0;
        }
        else {
          uint64_t v50 = *(void *)pErrorCode;
        }
        v46[5759] = &v47[-v38];
        v46[5760] = v50;
        unint64_t v51 = v45 - v50;
        long long v52 = &v47[v50];
        if (v51 < 2)
        {
          long long v47 = v52;
          break;
        }
        unsigned char *v52 = 32;
        long long v47 = v52 + 1;
        unint64_t v45 = v51 - 1;
        if (v43 == v42) {
          char v53 = v41;
        }
        else {
          char v53 = 1;
        }
        if ((v53 & 1) == 0)
        {
          if (v45 < 3) {
            break;
          }
          *(_WORD *)(v52 + 1) = 8238;
          long long v47 = v52 + 3;
          unint64_t v45 = v51 - 3;
          if (++v44 >= v57) {
            uint64_t v42 = v43;
          }
          else {
            uint64_t v42 = *(void *)(v68 + 16 * v44 + 8) + v43;
          }
        }
        ++v43;
        v46 += 2;
      }
      while (v59 != v43);
      a5 = v56;
      unsigned __int16 v34 = v54;
    }
    else
    {
      long long v47 = (unsigned char *)(a6 + 42066);
    }
    *long long v47 = 0;
    *(_DWORD *)(a6 + 20) = v47 - v38;
    CFRelease(v29);
    unsigned __int16 v37 = v55;
  }
  else
  {
    unsigned __int16 v34 = 0;
    unsigned __int16 v37 = 0;
  }
  if (a4) {
    *a4 = v37;
  }
  if (a5) {
    *a5 = v34;
  }
}

uint64_t ___normalizeUnicodeString_block_invoke()
{
  uint64_t result = unorm2_getNFCInstance();
  _normalizeUnicodeString_norm2 = result;
  return result;
}

BOOL pommesSuggestionsGetTokenCallback(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a4 + 8);
  if (v4 <= a1 && a1 + 2 * a2 <= *(void *)(a4 + 16))
  {
    if ((a3 & 0x10) != 0)
    {
      if (a2 >= 1)
      {
        uint64_t v6 = 0;
        uint64_t v5 = (uint64_t)(a1 - v4) >> 1;
        do
        {
          uint64_t v7 = 0;
          while (*(_WORD *)(a1 + 2 * v6 + 2 * v7) != 45)
          {
            ++v7;
            if (!(v6 - a2 + v7))
            {
              a3 = 0;
              a2 -= v6;
              goto LABEL_16;
            }
          }
          uint64_t v8 = *(unsigned __int16 *)(a4 + 42);
          uint64_t v10 = *(void *)(a4 + 24);
          uint64_t v9 = *(void *)(a4 + 32);
          __int16 v11 = *(_WORD *)(a4 + 44);
          if (v7)
          {
            __n128 v12 = (uint64_t *)(v10 + 16 * v8);
            *__n128 v12 = v5;
            v12[1] = v7;
            *(void *)(v9 + 8 * v8) = 0;
            LOWORD(v8) = v8 + 1;
            ++v11;
          }
          uint64_t v13 = v6 + v7;
          uint64_t v14 = v5 + v7;
          long long v15 = (uint64_t *)(v10 + 16 * (unsigned __int16)v8);
          *long long v15 = v14;
          v15[1] = 1;
          *(void *)(v9 + 8 * (unsigned __int16)v8) = 32;
          *(_WORD *)(a4 + 42) = v8 + 1;
          *(_WORD *)(a4 + 44) = v11 + 1;
          uint64_t v5 = v14 + 1;
          uint64_t v6 = v13 + 1;
        }
        while (v6 != a2);
      }
    }
    else if ((a3 & 0x20000800) == 0)
    {
      uint64_t v5 = (uint64_t)(a1 - v4) >> 1;
LABEL_16:
      uint64_t v16 = *(unsigned __int16 *)(a4 + 42);
      int v17 = (uint64_t *)(*(void *)(a4 + 24) + 16 * v16);
      *int v17 = v5;
      v17[1] = a2;
      *(void *)(*(void *)(a4 + 32) + 8 * v16) = a3;
      *(_WORD *)(a4 + 42) = v16 + 1;
      ++*(_WORD *)(a4 + 44);
    }
  }
  return *(unsigned __int16 *)(a4 + 42) >= *(unsigned __int16 *)(a4 + 40)
      || *(unsigned __int16 *)(a4 + 64) > 0x3E7u;
}

BOOL pommesSuggestionsEmailAddressGetTokenCallback(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a4 + 8);
  if (v4 <= (unint64_t)a1 && (unint64_t)&a1[a2] <= *(void *)(a4 + 16))
  {
    uint64_t v5 = (uint64_t)((uint64_t)a1 - v4) >> 1;
    if ((a3 & 0x30) == 0)
    {
      uint64_t v21 = *(unsigned __int16 *)(a4 + 42);
      int32_t v22 = (uint64_t *)(*(void *)(a4 + 24) + 16 * v21);
      *int32_t v22 = v5;
      uint64_t v6 = a2;
      goto LABEL_22;
    }
    if (a2 >= 1)
    {
      uint64_t v6 = 0;
      while (1)
      {
        int v8 = *a1++;
        int v7 = v8;
        uint64_t v9 = (v8 - 33);
        if (v9 > 0x3F) {
          goto LABEL_12;
        }
        if (((1 << v9) & 0xE00000005000767DLL) != 0) {
          goto LABEL_13;
        }
        if (v9 == 31)
        {
          uint64_t v10 = *(unsigned __int16 *)(a4 + 42);
          uint64_t v12 = *(void *)(a4 + 24);
          uint64_t v11 = *(void *)(a4 + 32);
          __int16 v13 = *(_WORD *)(a4 + 44);
          if (v6)
          {
            uint64_t v14 = (uint64_t *)(v12 + 16 * v10);
            *uint64_t v14 = v5;
            v14[1] = v6;
            *(void *)(v11 + 8 * v10) = 0;
            LOWORD(v10) = v10 + 1;
            ++v13;
          }
          uint64_t v15 = v5 + v6;
          uint64_t v16 = (uint64_t *)(v12 + 16 * (unsigned __int16)v10);
          uint64_t *v16 = v15;
          v16[1] = 1;
          *(void *)(v11 + 8 * (unsigned __int16)v10) = 32;
          *(_WORD *)(a4 + 42) = v10 + 1;
          *(_WORD *)(a4 + 44) = v13 + 1;
          uint64_t v5 = v15 + 1;
          uint64_t v6 = 0;
        }
        else
        {
LABEL_12:
          if ((v7 - 123) < 4)
          {
LABEL_13:
            if (v6)
            {
              uint64_t v17 = *(unsigned __int16 *)(a4 + 42);
              uint64_t v18 = *(void *)(a4 + 32);
              int v19 = (uint64_t *)(*(void *)(a4 + 24) + 16 * v17);
              *int v19 = v5;
              v19[1] = v6;
              *(void *)(v18 + 8 * v17) = 0;
              *(_WORD *)(a4 + 42) = v17 + 1;
              ++*(_WORD *)(a4 + 44);
            }
            uint64_t v20 = v6 + v5;
            uint64_t v6 = 0;
            uint64_t v5 = v20 + 1;
            goto LABEL_16;
          }
          ++v6;
        }
LABEL_16:
        if (!--a2)
        {
          if (v6)
          {
            a3 = 0;
            uint64_t v21 = *(unsigned __int16 *)(a4 + 42);
            int32_t v22 = (uint64_t *)(*(void *)(a4 + 24) + 16 * v21);
            *int32_t v22 = v5;
LABEL_22:
            v22[1] = v6;
            *(void *)(*(void *)(a4 + 32) + 8 * v21) = a3;
            *(_WORD *)(a4 + 42) = v21 + 1;
            ++*(_WORD *)(a4 + 44);
          }
          return *(unsigned __int16 *)(a4 + 42) >= *(unsigned __int16 *)(a4 + 40);
        }
      }
    }
  }
  return *(unsigned __int16 *)(a4 + 42) >= *(unsigned __int16 *)(a4 + 40);
}

BOOL pommesSuggestionsLiteralGetTokenCallback(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a4 + 8);
  if (v4 <= a1 && a1 + 2 * a2 <= *(void *)(a4 + 16))
  {
    uint64_t v5 = *(unsigned __int16 *)(a4 + 42);
    uint64_t v6 = *(void *)(a4 + 32);
    int v7 = (uint64_t *)(*(void *)(a4 + 24) + 16 * v5);
    *int v7 = (uint64_t)(a1 - v4) >> 1;
    v7[1] = a2;
    *(void *)(v6 + 8 * v5) = a3;
    *(_WORD *)(a4 + 42) = v5 + 1;
    ++*(_WORD *)(a4 + 44);
  }
  return *(unsigned __int16 *)(a4 + 42) >= *(unsigned __int16 *)(a4 + 40);
}

BOOL pommesSuggestionsGetSentenceCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a4 < 1)
  {
LABEL_18:
    if (!*(unsigned char *)(a5 + 66))
    {
      uint64_t v21 = *(unsigned __int16 *)(a5 + 44);
      if (*(_WORD *)(a5 + 44))
      {
        uint64_t v22 = *(unsigned __int16 *)(a5 + 64);
        int v23 = (void *)(*(void *)(a5 + 56) + 16 * v22);
        *int v23 = *(void *)(a5 + 48);
        v23[1] = v21;
        *(_WORD *)(a5 + 64) = v22 + 1;
        *(void *)(a5 + 48) = *(unsigned __int16 *)(a5 + 42);
        *(_WORD *)(a5 + 44) = 0;
      }
    }
    if (*(unsigned __int16 *)(a5 + 42) < *(unsigned __int16 *)(a5 + 40)) {
      return *(unsigned __int16 *)(a5 + 64) > 0x3E7u;
    }
  }
  else
  {
    uint64_t v5 = 0;
    unsigned int v6 = *(unsigned __int16 *)(a5 + 40);
    int v7 = *(unsigned __int16 *)(a5 + 42);
    while (1)
    {
      int v8 = (uint64_t *)(a2 + 16 * v5);
      uint64_t v10 = *v8;
      uint64_t v9 = v8[1];
      uint64_t v11 = *(void *)(a3 + 8 * v5);
      if ((v11 & 0x10) != 0)
      {
        if (v9 >= 1)
        {
          for (uint64_t i = 0; i != v9; i += v13 + 1)
          {
            uint64_t v13 = 0;
            while (*(_WORD *)(a1 + 2 * i + 2 * v13) != 45)
            {
              ++v13;
              if (!(i - v9 + v13))
              {
                uint64_t v11 = 0;
                v9 -= i;
                goto LABEL_14;
              }
            }
            uint64_t v15 = *(void *)(a5 + 24);
            uint64_t v14 = *(void *)(a5 + 32);
            __int16 v16 = *(_WORD *)(a5 + 44);
            if (v13)
            {
              uint64_t v17 = (void *)(v15 + 16 * (unsigned __int16)v7);
              *uint64_t v17 = v10;
              v17[1] = v13;
              *(void *)(v14 + 8 * (unsigned __int16)v7++) = 0;
              ++v16;
            }
            uint64_t v18 = v13 + v10;
            int v19 = (void *)(v15 + 16 * (unsigned __int16)v7);
            *int v19 = v18;
            v19[1] = 1;
            *(void *)(v14 + 8 * (unsigned __int16)v7++) = 32;
            *(_WORD *)(a5 + 42) = v7;
            *(_WORD *)(a5 + 44) = v16 + 1;
            uint64_t v10 = v18 + 1;
          }
        }
      }
      else
      {
LABEL_14:
        uint64_t v20 = (void *)(*(void *)(a5 + 24) + 16 * (unsigned __int16)v7);
        *uint64_t v20 = v10;
        v20[1] = v9;
        *(void *)(*(void *)(a5 + 32) + 8 * (unsigned __int16)v7++) = v11;
        *(_WORD *)(a5 + 42) = v7;
        ++*(_WORD *)(a5 + 44);
      }
      if (v6 <= (unsigned __int16)v7 || *(unsigned __int16 *)(a5 + 64) >= 0x3E8u) {
        break;
      }
      if (++v5 == a4) {
        goto LABEL_18;
      }
    }
  }
  return 1;
}

void freeOverlayDir(uint64_t a1)
{
  char v1 = *(unint64_t **)(a1 + 8);
  if (v1)
  {
    *(void *)(a1 + 8) = 0;
    size_t v2 = malloc_size(v1);
    if (v2 >= 0x10 && v2 >= ((32 * *v1) | 0x10) && *v1 != 0)
    {
      unint64_t v4 = 0;
      uint64_t v5 = v1 + 2;
      do
      {
        freeOverlayDir(v5);
        ++v4;
        v5 += 4;
      }
      while (v4 < *v1);
    }
    free(v1);
  }
}

uint64_t directoryOverlayProcessPaths(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (pthread_rwlock_t *)(a1 + 8);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 8));
  for (uint64_t i = *(uint64_t ***)(a1 + 456); i; uint64_t i = (uint64_t **)*i)
    (*(void (**)(uint64_t, void, uint64_t *, void, uint64_t **))(a2 + 16))(a2, *((int *)i + 2), (uint64_t *)i + 2, *((unsigned int *)i + 3), &i[*((int *)i + 2) + 2]);
  return pthread_rwlock_unlock(v4);
}

uint64_t getBestDirectory(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, void *a5)
{
  if (*(uint64_t *)a1 <= 1)
  {
    uint64_t v14 = __si_assert_copy_extra_329();
    __message_assert_333((uint64_t)v14, v15, v16, v17, v18, v19, v20, v21, (char)"FileTree_Overlay.c");
    free(v14);
    if (__valid_fs(-1)) {
      uint64_t v22 = 2989;
    }
    else {
      uint64_t v22 = 3072;
    }
    *(_DWORD *)uint64_t v22 = -559038737;
    abort();
  }
  uint64_t v8 = a1;
  if (a2 == -1)
  {
    if (*(_DWORD *)(a1 + 16))
    {
      *a5 = 0;
      *a4 = -1;
    }
    checkDirectory((void *)a1);
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 8);
    if (v9 && (int v23 = 0, (Child = findChild(v9, *(void *)(a3 + 8 * a2), &v23)) != 0))
    {
      uint64_t v12 = Child;
      checkDirectory((void *)v8);
      if (*(_DWORD *)(v8 + 16))
      {
        *a5 = v8;
        *a4 = a2;
      }
      return getBestDirectory(v12, (a2 - 1), a3, a4, a5);
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

void *directoryDumpDirectoryPaths(void *result, int *a2)
{
  unsigned int v3 = result;
  if (result[3]) {
    uint64_t result = overlayPathsAddDirectory(a2, (size_t)result);
  }
  uint64_t v4 = v3[1];
  if (v4 && *(void *)(v4 + 8))
  {
    uint64_t v5 = 0;
    unsigned int v6 = 1;
    do
    {
      uint64_t v7 = v4 + 32 * v5;
      uint64_t v8 = *(void *)(v7 + 16);
      uint64_t result = (void *)(v7 + 16);
      if (v8 >= 2)
      {
        uint64_t result = (void *)directoryDumpDirectoryPaths(result, a2);
        uint64_t v4 = v3[1];
      }
      uint64_t v5 = v6;
    }
    while (*(void *)(v4 + 8) > (unint64_t)v6++);
  }
  return result;
}

void *overlayPathsAddDirectory(int *a1, size_t a2)
{
  size_t v2 = a2;
  int v4 = *(_DWORD *)(a2 + 16);
  int v5 = *a1;
  LODWORD(a2) = a1[1];
  unsigned int v6 = *a1 + 8 * v4 + 16;
  if (v6 <= a2)
  {
    uint64_t v8 = (char *)*((void *)a1 + 1);
  }
  else
  {
    do
    {
      BOOL v7 = v6 > 2 * (int)a2;
      a2 = (2 * a2);
    }
    while (v7);
    a1[1] = a2;
    uint64_t v8 = (char *)reallocf(*((void **)a1 + 1), a2);
    *((void *)a1 + 1) = v8;
    int v5 = *a1;
    int v4 = *(_DWORD *)(v2 + 16);
  }
  uint64_t v9 = &v8[v5];
  *(_DWORD *)uint64_t v9 = v4 + 1;
  *((void *)v9 + 1) = *(void *)v2;
  uint64_t result = memcpy(v9 + 16, *(const void **)(v2 + 24), 8 * *(int *)(v2 + 16));
  *a1 += 8 * *(_DWORD *)(v2 + 16) + 16;
  return result;
}

char *__si_assert_copy_extra_329()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  bzero(v6, 0x400uLL);
  v0 = getcwd(v6, 0x400uLL);
  if (v0) {
    char v1 = v0;
  }
  else {
    char v1 = "";
  }
  int v5 = 0;
  size_t v2 = (const char *)pthread_getspecific(__THREAD_STR_DATA_KEY);
  if (v2) {
    unsigned int v3 = v2;
  }
  else {
    unsigned int v3 = "";
  }
  asprintf(&v5, "%s %s", v1, v3);
  return v5;
}

void __message_assert_333(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  string[0] = 0;
  string[1] = &a9;
  vasprintf(string, "%s:%u: failed assertion '%s' %s ", &a9);
  SISetCrashCStr(string[0]);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)keys = 136315138;
    *(char **)&keys[4] = string[0];
    _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%s", keys, 0xCu);
  }
  *(void *)keys = "crash_string";
  xpc_object_t v9 = xpc_string_create(string[0]);
  xpc_object_t values = v9;
  xpc_object_t v10 = xpc_dictionary_create((const char *const *)keys, &values, 1uLL);
  analytics_send_event();
  xpc_release(v10);
  xpc_release(v9);
  free(string[0]);
}

void *checkDirectory(void *result)
{
  if (!*result)
  {
    size_t v2 = __si_assert_copy_extra_329();
    __message_assert_333((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9, (char)"FileTree_Overlay.c");
    free(v2);
    if (__valid_fs(-1)) {
      uint64_t v10 = 2989;
    }
    else {
      uint64_t v10 = 3072;
    }
    *(_DWORD *)uint64_t v10 = -559038737;
    abort();
  }
  char v1 = (void *)result[1];
  if (v1 && *v1 >= (unint64_t)(v1[1] - 1))
  {
    uint64_t v11 = __si_assert_copy_extra_329();
    __message_assert_333((uint64_t)v11, v12, v13, v14, v15, v16, v17, v18, (char)"FileTree_Overlay.c");
    free(v11);
    if (__valid_fs(-1)) {
      uint64_t v19 = 2989;
    }
    else {
      uint64_t v19 = 3072;
    }
    *(_DWORD *)uint64_t v19 = -559038737;
    abort();
  }
  return result;
}

uint64_t directoryOverlay_unlock(uint64_t a1)
{
  return pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 240));
}

uint64_t negativeFindChild(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return 0;
  }
  int v4 = HIDWORD(a2) - a2 - 8;
  unsigned int v5 = (a2 - (HIDWORD(a2) - a2) - 1640531527) ^ (v4 << 8);
  unsigned int v6 = (16 - (HIDWORD(a2) - a2) - v5) ^ (v5 >> 13);
  int v7 = (v4 - v5 - v6) ^ (v6 >> 12);
  unsigned int v8 = (v5 - v6 - v7) ^ (v7 << 16);
  unsigned int v9 = (v6 - v7 - v8) ^ (v8 >> 5);
  int v10 = (v7 - v8 - v9) ^ (v9 >> 3);
  unsigned int v11 = *(_DWORD *)a1 - 1;
  unsigned int v12 = v11 & ((v9 - v10 - ((v8 - v9 - v10) ^ (v10 << 10))) ^ (((v8 - v9 - v10) ^ (v10 << 10)) >> 15));
  if (v12 <= 1) {
    unsigned int v12 = 1;
  }
  uint64_t v13 = v12 - 1;
  uint64_t v14 = *(void *)(v3 + 16 * v13);
  if (!v14 || (v14 != a2 ? (BOOL v15 = *(_DWORD *)a1 == 0) : (BOOL v15 = 1), v15))
  {
    int v17 = -1;
  }
  else
  {
    int v17 = -1;
    int v18 = *(_DWORD *)a1 - 1;
    do
    {
      if (v17 == -1 && v14 == 1) {
        int v17 = v13;
      }
      if ((int)v13 + 1 < v11) {
        uint64_t v13 = (v13 + 1);
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = *(void *)(v3 + 16 * v13);
      if (!v14) {
        break;
      }
      BOOL v20 = v18-- != 0;
      BOOL v21 = v20;
    }
    while (v14 != a2 && v21);
  }
  if (v14 != a2)
  {
    if (a3)
    {
      uint64_t result = 0;
      if (v17 != -1) {
        LODWORD(v13) = v17;
      }
      goto LABEL_17;
    }
    return 0;
  }
  uint64_t result = v3 + 16 * v13;
  if (a3) {
LABEL_17:
  }
    *a3 = v13;
  return result;
}

uint64_t doInsertItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v17 = 0;
  uint64_t result = negativeFindChild(a1, a2, &v17);
  if (result)
  {
    unsigned int v8 = __si_assert_copy_extra_329();
    __message_assert_333((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15, (char)"FileTree_Overlay.c");
    free(v8);
    if (__valid_fs(-1)) {
      uint64_t v16 = 2989;
    }
    else {
      uint64_t v16 = 3072;
    }
    *(_DWORD *)uint64_t v16 = -559038737;
    abort();
  }
  int v7 = (uint64_t *)(*(void *)(a1 + 8) + 16 * v17);
  *int v7 = a2;
  v7[1] = a3;
  ++*(_DWORD *)(a1 + 4);
  return result;
}

uint64_t getDirectory(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  if ((uint64_t)*a1 <= 1)
  {
    int v18 = __si_assert_copy_extra_329();
    __message_assert_333((uint64_t)v18, v19, v20, v21, v22, v23, v24, v25, (char)"FileTree_Overlay.c");
    free(v18);
    if (__valid_fs(-1)) {
      uint64_t v26 = 2989;
    }
    else {
      uint64_t v26 = 3072;
    }
    *(_DWORD *)uint64_t v26 = -559038737;
    abort();
  }
  unsigned int v5 = a1;
  if (a2 != -1)
  {
    uint64_t v8 = a1[1];
    if (v8)
    {
      LODWORD(v27[0]) = 0;
      uint64_t v9 = *(void *)(a3 + 8 * a2);
      uint64_t Child = findChild(v8, v9, v27);
      if (Child)
      {
        uint64_t v11 = Child;
        checkDirectory(v5);
        uint64_t v12 = (a2 - 1);
        uint64_t v13 = (void *)v11;
        return getDirectory(v13, v12, a3, a4);
      }
      if (a4)
      {
        uint64_t v14 = LODWORD(v27[0]);
        goto LABEL_11;
      }
    }
    else if (a4)
    {
      uint64_t v14 = 0;
      uint64_t v9 = *(void *)(a3 + 8 * a2);
LABEL_11:
      memset(&v27[1], 0, 24);
      checkDirectory(v5);
      v27[0] = v9;
      insertDirectory(v5, v14, (uint64_t)v27);
      uint64_t v16 = v15;
      checkDirectory(v15);
      uint64_t v12 = (a2 - 1);
      uint64_t v13 = v16;
      return getDirectory(v13, v12, a3, a4);
    }
    return 0;
  }
  checkDirectory(a1);
  return (uint64_t)v5;
}

void insertDirectory(void *a1, uint64_t a2, uint64_t a3)
{
  if (*(uint64_t *)a3 <= 2 || *(void *)a3 == *a1)
  {
    int v18 = __si_assert_copy_extra_329();
    __message_assert_333((uint64_t)v18, v19, v20, v21, v22, v23, v24, v25, (char)"FileTree_Overlay.c");
    free(v18);
    if (__valid_fs(-1)) {
      uint64_t v26 = 2989;
    }
    else {
      uint64_t v26 = 3072;
    }
    *(_DWORD *)uint64_t v26 = -559038737;
    abort();
  }
  checkDirectory(a1);
  checkDirectory((void *)a3);
  unsigned int v6 = (void *)a1[1];
  if (v6)
  {
    uint64_t v7 = v6[1];
    if (5 * *v6 + 5 >= (unint64_t)(4 * v7 - 4))
    {
      v6[1] = 2 * v7;
      uint64_t v13 = malloc_type_calloc(1uLL, v7 << 6, 0x1030040D6482CB5uLL);
      a1[1] = v13;
      v13[1] = v6[1];
      uint64_t v14 = v6[1] >> 1;
      v6[1] = v14;
      if (v14 != 1)
      {
        uint64_t v15 = 0;
        unsigned int v16 = 1;
        do
        {
          if ((uint64_t)v6[4 * v15 + 2] >= 2)
          {
            doInsertDirectory((void *)a1[1], (uint64_t)&v6[4 * v15 + 2]);
            uint64_t v14 = v6[1];
          }
          uint64_t v15 = v16;
        }
        while (v14 - 1 > (unint64_t)v16++);
        uint64_t v13 = (void *)a1[1];
      }
      doInsertDirectory(v13, a3);
      free(v6);
    }
    else
    {
      uint64_t v8 = &v6[4 * a2];
      uint64_t v10 = v8[2];
      uint64_t v9 = v8 + 2;
      if (v10 >= 2)
      {
        CFStringRef v27 = __si_assert_copy_extra_329();
        __message_assert_333((uint64_t)v27, v28, v29, v30, v31, v32, v33, v34, (char)"FileTree_Overlay.c");
        free(v27);
        if (__valid_fs(-1)) {
          uint64_t v35 = 2989;
        }
        else {
          uint64_t v35 = 3072;
        }
        *(_DWORD *)uint64_t v35 = -559038737;
        abort();
      }
      long long v11 = *(_OWORD *)(a3 + 16);
      _OWORD *v9 = *(_OWORD *)a3;
      v9[1] = v11;
      ++*(void *)a1[1];
      checkDirectory(a1);
    }
  }
  else
  {
    uint64_t v12 = malloc_type_calloc(1uLL, 0x80uLL, 0x1030040D6482CB5uLL);
    a1[1] = v12;
    v12[1] = 4;
    doInsertDirectory(v12, a3);
  }
}

__n128 doInsertDirectory(void *a1, uint64_t a2)
{
  unsigned int v16 = 0;
  if (findChild((uint64_t)a1, *(void *)a2, &v16))
  {
    uint64_t v7 = __si_assert_copy_extra_329();
    __message_assert_333((uint64_t)v7, v8, v9, v10, v11, v12, v13, v14, (char)"FileTree_Overlay.c");
    free(v7);
    if (__valid_fs(-1)) {
      uint64_t v15 = 2989;
    }
    else {
      uint64_t v15 = 3072;
    }
    *(_DWORD *)uint64_t v15 = -559038737;
    abort();
  }
  int v4 = &a1[4 * v16];
  __n128 result = *(__n128 *)a2;
  long long v6 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v4 + 1) = *(_OWORD *)a2;
  *((_OWORD *)v4 + 2) = v6;
  ++*a1;
  return result;
}

uint64_t directoryOverlayMoveDirectory(uint64_t a1, unsigned int a2, uint64_t *a3, unsigned int a4, void *a5)
{
  uint64_t v9 = (void *)(a1 + 208);
  uint64_t v8 = *(void *)(a1 + 208);
  if (a3[a2 - 1] == v8) {
    unsigned int v10 = a2 - 1;
  }
  else {
    unsigned int v10 = a2;
  }
  if (a5[a4 - 1] == v8) {
    unsigned int v11 = a4 - 1;
  }
  else {
    unsigned int v11 = a4;
  }
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 8));
  unsigned int v79 = 0;
  int v12 = v10 - 1;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v73 = a3 + 1;
  Directory = (void *)getDirectory(v9, v10 - 2, (uint64_t)(a3 + 1), 0);
  *(void *)&long long v75 = Directory;
  unsigned int v74 = v10 - 1;
  if (Directory)
  {
    uint64_t v14 = Directory;
    uint64_t v15 = (void *)Directory[1];
    if (v15 && *v15)
    {
      checkDirectory(Directory);
      v80[0] = 0;
      unsigned int v16 = (void *)v14[1];
      uint64_t v17 = *a3;
      uint64_t Child = (long long *)findChild((uint64_t)v16, *a3, v80);
      if (Child)
      {
        long long v19 = Child[1];
        long long v77 = *Child;
        long long v78 = v19;
        uint64_t v20 = &v16[4 * v80[0]];
        uint64_t v22 = v20[2];
        uint64_t v21 = v20 + 2;
        if (v22 != v17)
        {
          long long v60 = __si_assert_copy_extra_329();
          __message_assert_333((uint64_t)v60, v61, v62, v63, v64, v65, v66, v67, (char)"FileTree_Overlay.c");
          free(v60);
          if (__valid_fs(-1)) {
            uint64_t v68 = 2989;
          }
          else {
            uint64_t v68 = 3072;
          }
          *(_DWORD *)uint64_t v68 = -559038737;
          abort();
        }
        --*v16;
        *uint64_t v21 = 1;
        checkDirectory(v14);
        goto LABEL_19;
      }
      int v12 = v10 - 1;
    }
    int v23 = *((_DWORD *)v14 + 4);
    if (v23)
    {
      unsigned int v79 = v10 - 2;
      uint64_t v24 = *v14;
      uint64_t v25 = (void *)v14[3];
LABEL_18:
      __src = v25;
      goto LABEL_20;
    }
  }
  getBestDirectory((uint64_t)v9, v12, (uint64_t)a3, &v79, &v75);
  if ((void)v75)
  {
    uint64_t v24 = *(void *)v75;
    int v23 = *(_DWORD *)(v75 + 16);
    uint64_t v25 = *(void **)(v75 + 24);
    goto LABEL_18;
  }
LABEL_19:
  uint64_t v24 = 0;
  int v23 = 0;
  __src = 0;
LABEL_20:
  uint64_t v26 = malloc_type_malloc(8 * (v11 + v10) + 16, 0x810A14A5uLL);
  v26[2] = v10;
  v26[3] = v11;
  *(void *)uint64_t v26 = 0;
  memcpy(v26 + 4, a3, 8 * v10);
  memcpy(&v26[2 * v10 + 4], a5, 8 * v11);
  if (*(void *)(a1 + 456))
  {
    CFStringRef v27 = (void *)(a1 + 464);
    **(void **)(a1 + 464) = v26;
  }
  else
  {
    *(void *)(a1 + 456) = v26;
    CFStringRef v27 = (void *)(a1 + 464);
  }
  void *v27 = v26;
  uint64_t v28 = v77;
  if (!(void)v77)
  {
    uint64_t v33 = getDirectory(v9, v11 - 1, (uint64_t)a5, 1);
    v80[0] = 0;
    uint64_t v34 = *(void *)(v33 + 8);
    if (v34)
    {
      if (findChild(v34, *a3, v80))
      {
LABEL_49:
        uint64_t v31 = (pthread_rwlock_t *)(v9 - 25);
        return pthread_rwlock_unlock(v31);
      }
      uint64_t v35 = v80[0];
    }
    else
    {
      uint64_t v35 = 0;
    }
    pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 240));
    uint64_t v36 = *a3;
    if (*a3 <= 2)
    {
      unint64_t v51 = __si_assert_copy_extra_329();
      __message_assert_333((uint64_t)v51, v52, v53, v54, v55, v56, v57, v58, (char)"FileTree_Overlay.c");
      free(v51);
      if (__valid_fs(-1)) {
        uint64_t v59 = 2989;
      }
      else {
        uint64_t v59 = 3072;
      }
      *(_DWORD *)uint64_t v59 = -559038737;
      abort();
    }
    uint64_t v37 = a3[1];
    uint64_t v38 = *(uint64_t **)(a1 + 448);
    uint64_t v70 = v35;
    long long v71 = (void *)v33;
    if (v38)
    {
      uint64_t v39 = *(unsigned int *)(a1 + 440);
      if (5 * *(_DWORD *)(a1 + 444) + 5 >= (4 * v39 - 4))
      {
        uint64_t v69 = a3[1];
        *(_DWORD *)(a1 + 440) = 2 * v39;
        *(void *)(a1 + 448) = malloc_type_calloc(1uLL, 32 * (2 * v39), 0x1030040D6482CB5uLL);
        if (v39)
        {
          unsigned __int16 v40 = v38 + 1;
          do
          {
            uint64_t v41 = *(v40 - 1);
            if (v41 >= 2) {
              doInsertItem(a1 + 440, v41, *v40);
            }
            v40 += 2;
            --v39;
          }
          while (v39);
        }
        free(v38);
        uint64_t v37 = v69;
      }
    }
    else
    {
      uint64_t v42 = a3[1];
      uint64_t v43 = malloc_type_calloc(1uLL, 0x40uLL, 0x1000040451B5BE8uLL);
      uint64_t v37 = v42;
      *(void *)(a1 + 448) = v43;
      *(_DWORD *)(a1 + 440) = 4;
    }
    doInsertItem(a1 + 440, v36, v37);
    pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 240));
    unsigned int v44 = v74 - v79;
    if (v24) {
      unsigned int v45 = v74 - v79 + v23;
    }
    else {
      unsigned int v45 = v74;
    }
    uint64_t v46 = *a3;
    size_t v47 = 8 * (int)v45;
    uint64_t v48 = (char *)malloc_type_malloc(v47, 0x100004000313F17uLL);
    uint64_t v49 = v48;
    long long v77 = (unint64_t)v46;
    LODWORD(v78) = v45;
    *((void *)&v78 + 1) = v48;
    if (v24)
    {
      size_t v47 = 8 * (int)v44;
      memcpy(&v48[v47], __src, 8 * v23);
    }
    memcpy(v49, v73, v47);
    long long v75 = v77;
    long long v76 = v78;
    insertDirectory(v71, v70, (uint64_t)&v75);
    goto LABEL_49;
  }
  checkDirectory(&v77);
  uint64_t v29 = (void *)getDirectory(v9, v11 - 1, (uint64_t)a5, 1);
  checkDirectory(v29);
  v80[0] = 0;
  uint64_t v30 = v29[1];
  if (!v30)
  {
    uint64_t v32 = 0;
    uint64_t v31 = (pthread_rwlock_t *)(v9 - 25);
    goto LABEL_31;
  }
  uint64_t v31 = (pthread_rwlock_t *)(v9 - 25);
  if (!findChild(v30, v28, v80))
  {
    uint64_t v32 = v80[0];
LABEL_31:
    checkDirectory(v29);
    long long v75 = v77;
    long long v76 = v78;
    insertDirectory(v29, v32, (uint64_t)&v75);
  }
  return pthread_rwlock_unlock(v31);
}

uint64_t getDirectory_352(void *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if ((uint64_t)*a1 <= 1)
  {
    uint64_t v22 = __si_assert_copy_extra_329();
    long long v19 = v22;
    int v23 = "";
    if (v22) {
      int v23 = v22;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "FileTree_UpdateSet.c", 134, "directory->fileid>=2", v23);
    goto LABEL_19;
  }
  unsigned int v5 = a1;
  if (a2 != -1)
  {
    if ((a2 & 0x80000000) == 0)
    {
      uint64_t v8 = a1[1];
      if (v8)
      {
        LODWORD(v24[0]) = 0;
        uint64_t v9 = *(void *)(a3 + 8 * a2);
        uint64_t Child = findChild(v8, v9, v24);
        if (Child)
        {
          uint64_t v11 = Child;
          checkDirectory_359(v5);
          uint64_t v12 = a2 - 1;
          uint64_t v13 = (void *)v11;
          return getDirectory_352(v13, v12, a3, a4);
        }
        if (a4)
        {
          uint64_t v14 = LODWORD(v24[0]);
          goto LABEL_12;
        }
      }
      else if (a4)
      {
        uint64_t v14 = 0;
        uint64_t v9 = *(void *)(a3 + 8 * a2);
LABEL_12:
        memset(&v24[1], 0, 24);
        checkDirectory_359(v5);
        v24[0] = v9;
        insertDirectory_362(v5, v14, v24);
        unsigned int v16 = v15;
        checkDirectory_359(v15);
        uint64_t v12 = a2 - 1;
        uint64_t v13 = v16;
        return getDirectory_352(v13, v12, a3, a4);
      }
      return 0;
    }
    int v18 = __si_assert_copy_extra_329();
    long long v19 = v18;
    uint64_t v20 = "";
    if (v18) {
      uint64_t v20 = v18;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "FileTree_UpdateSet.c", 139, "depth >= 0", v20);
LABEL_19:
    free(v19);
    if (__valid_fs(-1)) {
      uint64_t v21 = 2989;
    }
    else {
      uint64_t v21 = 3072;
    }
    *(_DWORD *)uint64_t v21 = -559038737;
    abort();
  }
  checkDirectory_359(a1);
  return (uint64_t)v5;
}

uint64_t getAllPostings(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(_DWORD *)(result + 24)) {
    __n128 result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, result + 16);
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4 && *(void *)(v4 + 8) != 1)
  {
    uint64_t v5 = 0;
    unsigned int v6 = 1;
    do
    {
      uint64_t v7 = v4 + 32 * v5;
      uint64_t v8 = *(void *)(v7 + 16);
      __n128 result = v7 + 16;
      if (v8 >= 2)
      {
        __n128 result = getAllPostings(result, a2);
        uint64_t v4 = *(void *)(v3 + 8);
      }
      uint64_t v5 = v6;
    }
    while (*(void *)(v4 + 8) - 1 > (unint64_t)v6++);
  }
  return result;
}

void *checkDirectory_359(void *result)
{
  if (!*result)
  {
    size_t v2 = __si_assert_copy_extra_329();
    uint64_t v3 = v2;
    uint64_t v4 = "";
    if (v2) {
      uint64_t v4 = v2;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "FileTree_UpdateSet.c", 117, "directory->fileid", v4);
    free(v3);
    if (__valid_fs(-1)) {
      uint64_t v5 = 2989;
    }
    else {
      uint64_t v5 = 3072;
    }
    *(_DWORD *)uint64_t v5 = -559038737;
    abort();
  }
  char v1 = (void *)result[1];
  if (v1 && *v1 >= (unint64_t)(v1[1] - 1))
  {
    unsigned int v6 = __si_assert_copy_extra_329();
    uint64_t v7 = v6;
    uint64_t v8 = "";
    if (v6) {
      uint64_t v8 = v6;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "FileTree_UpdateSet.c", 119, "directory->children->childCount < directory->children->pageSize-1", v8);
    free(v7);
    if (__valid_fs(-1)) {
      uint64_t v9 = 2989;
    }
    else {
      uint64_t v9 = 3072;
    }
    *(_DWORD *)uint64_t v9 = -559038737;
    abort();
  }
  return result;
}

void insertDirectory_362(void *a1, uint64_t a2, void *a3)
{
  if ((uint64_t)*a3 <= 2)
  {
    int v18 = __si_assert_copy_extra_329();
    long long v19 = v18;
    uint64_t v20 = "";
    if (v18) {
      uint64_t v20 = v18;
    }
    __message_assert("%s:%u: failed assertion '%s' %s got file id %lld", "FileTree_UpdateSet.c", 79, "newDirectory.fileid >2", v20, *a3);
    uint64_t v21 = v19;
LABEL_23:
    free(v21);
    if (__valid_fs(-1)) {
      uint64_t v25 = 2989;
    }
    else {
      uint64_t v25 = 3072;
    }
    *(_DWORD *)uint64_t v25 = -559038737;
    abort();
  }
  if (*a3 == *a1)
  {
    uint64_t v22 = __si_assert_copy_extra_329();
    int v23 = v22;
    uint64_t v24 = "";
    if (v22) {
      uint64_t v24 = v22;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "FileTree_UpdateSet.c", 80, "newDirectory.fileid != directory->fileid", v24);
    uint64_t v21 = v23;
    goto LABEL_23;
  }
  checkDirectory_359(a1);
  checkDirectory_359(a3);
  unsigned int v6 = (void *)a1[1];
  if (v6)
  {
    uint64_t v7 = v6[1];
    if (5 * *v6 + 5 >= (unint64_t)(4 * v7 - 4))
    {
      v6[1] = 2 * v7;
      uint64_t v13 = malloc_type_calloc(1uLL, v7 << 6, 0x1020040D49128EBuLL);
      a1[1] = v13;
      v13[1] = v6[1];
      uint64_t v14 = v6[1] >> 1;
      v6[1] = v14;
      if (v14 != 1)
      {
        uint64_t v15 = 0;
        unsigned int v16 = 1;
        do
        {
          if ((uint64_t)v6[4 * v15 + 2] >= 2)
          {
            doInsertDirectory_366((void *)a1[1], (uint64_t)&v6[4 * v15 + 2]);
            uint64_t v14 = v6[1];
          }
          uint64_t v15 = v16;
        }
        while (v14 - 1 > (unint64_t)v16++);
        uint64_t v13 = (void *)a1[1];
      }
      doInsertDirectory_366(v13, (uint64_t)a3);
      free(v6);
    }
    else
    {
      uint64_t v8 = &v6[4 * a2];
      uint64_t v10 = v8[2];
      uint64_t v9 = v8 + 2;
      if (v10 >= 2)
      {
        uint64_t v26 = __si_assert_copy_extra_329();
        CFStringRef v27 = v26;
        uint64_t v28 = "";
        if (v26) {
          uint64_t v28 = v26;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "FileTree_UpdateSet.c", 106, "directory->children->nodes[slot].fileid<=1", v28);
        free(v27);
        if (__valid_fs(-1)) {
          uint64_t v29 = 2989;
        }
        else {
          uint64_t v29 = 3072;
        }
        *(_DWORD *)uint64_t v29 = -559038737;
        abort();
      }
      long long v11 = *((_OWORD *)a3 + 1);
      _OWORD *v9 = *(_OWORD *)a3;
      v9[1] = v11;
      ++*(void *)a1[1];
      checkDirectory_359(a1);
    }
  }
  else
  {
    uint64_t v12 = malloc_type_calloc(1uLL, 0x80uLL, 0x1020040D49128EBuLL);
    a1[1] = v12;
    v12[1] = 4;
    doInsertDirectory_366(v12, (uint64_t)a3);
  }
}

__n128 doInsertDirectory_366(void *a1, uint64_t a2)
{
  unsigned int v11 = 0;
  if (findChild((uint64_t)a1, *(void *)a2, &v11))
  {
    uint64_t v7 = __si_assert_copy_extra_329();
    uint64_t v8 = v7;
    uint64_t v9 = "";
    if (v7) {
      uint64_t v9 = v7;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "FileTree_UpdateSet.c", 72, "dir==0", v9);
    free(v8);
    if (__valid_fs(-1)) {
      uint64_t v10 = 2989;
    }
    else {
      uint64_t v10 = 3072;
    }
    *(_DWORD *)uint64_t v10 = -559038737;
    abort();
  }
  uint64_t v4 = &a1[4 * v11];
  __n128 result = *(__n128 *)a2;
  long long v6 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v4 + 1) = *(_OWORD *)a2;
  *((_OWORD *)v4 + 2) = v6;
  ++*a1;
  return result;
}

void moveDirectory(uint64_t *a1, int a2, uint64_t *a3, int a4, uint64_t a5)
{
  int v6 = a4;
  int v9 = a2 - 1;
  uint64_t v10 = *a1;
  int v11 = a4 - 1;
  uint64_t v12 = *(void *)(a5 + 8 * (a4 - 1));
  if (a3[a2 - 1] != *a1) {
    int v9 = a2;
  }
  long long v33 = 0u;
  long long v34 = 0u;
  Directory_352 = (void *)getDirectory_352(a1, v9 - 2, (uint64_t)(a3 + 1), 0);
  if (Directory_352)
  {
    uint64_t v14 = Directory_352;
    uint64_t v15 = (void *)Directory_352[1];
    if (v15)
    {
      if (*v15)
      {
        checkDirectory_359(Directory_352);
        LODWORD(v31[0]) = 0;
        unsigned int v16 = (void *)v14[1];
        uint64_t v17 = *a3;
        uint64_t Child = (long long *)findChild((uint64_t)v16, v17, v31);
        if (Child)
        {
          long long v19 = Child[1];
          long long v33 = *Child;
          long long v34 = v19;
          uint64_t v20 = &v16[4 * LODWORD(v31[0])];
          uint64_t v22 = v20[2];
          uint64_t v21 = v20 + 2;
          if (v22 != v17)
          {
            CFStringRef v27 = __si_assert_copy_extra_329();
            uint64_t v28 = v27;
            uint64_t v29 = "";
            if (v27) {
              uint64_t v29 = v27;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "FileTree_UpdateSet.c", 286, "directory->children->nodes[slot].fileid==p1[0]", v29);
            free(v28);
            if (__valid_fs(-1)) {
              uint64_t v30 = 2989;
            }
            else {
              uint64_t v30 = 3072;
            }
            *(_DWORD *)uint64_t v30 = -559038737;
            abort();
          }
          --*v16;
          *uint64_t v21 = 1;
          checkDirectory_359(v14);
          uint64_t v23 = v33;
          if ((void)v33)
          {
            if (v12 == v10) {
              int v6 = v11;
            }
            checkDirectory_359(&v33);
            uint64_t v24 = (void *)getDirectory_352(a1, v6 - 1, a5, 1);
            checkDirectory_359(v24);
            unsigned int v32 = 0;
            uint64_t v25 = v24[1];
            if (v25)
            {
              if (findChild(v25, v23, &v32)) {
                return;
              }
              uint64_t v26 = v32;
            }
            else
            {
              uint64_t v26 = 0;
            }
            checkDirectory_359(v24);
            v31[0] = v33;
            v31[1] = v34;
            insertDirectory_362(v24, v26, v31);
          }
        }
      }
    }
  }
}

uint64_t storeDirStoreUpdateSet(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = *(void *)a2;
  uint64_t v7 = a3[5];
  if ((unint64_t)(a3[4] - v7) < 0xB)
  {
    long long __src = 0u;
    long long v25 = 0u;
    size_t v18 = writeVInt64((uint64_t)&__src, 0, v6);
    uint64_t result = store_stream_write_bytes((uint64_t)a3, (char *)&__src, v18);
  }
  else
  {
    uint64_t result = writeVInt64(a3[6], v7, v6);
    a3[5] = result;
  }
  if (*(_DWORD *)(a2 + 24))
  {
    uint64_t result = CIWritePostings((uint64_t)a3, a1, 0, (unsigned int *)(a2 + 16), 0, 0);
  }
  else
  {
    uint64_t v9 = a3[5];
    if ((unint64_t)(a3[4] - v9) < 0xB)
    {
      long long __src = 0u;
      long long v25 = 0u;
      uint64_t result = store_stream_write_bytes((uint64_t)a3, (char *)&__src, 1uLL);
    }
    else
    {
      *(unsigned char *)(a3[6] + v9) = 0;
      a3[5] = v9 + 1;
    }
  }
  uint64_t v10 = *(unint64_t **)(a2 + 8);
  if (v10)
  {
    unint64_t v11 = *v10;
    uint64_t v12 = a3[5];
    if ((unint64_t)(a3[4] - v12) < 0xB)
    {
      long long __src = 0u;
      long long v25 = 0u;
      size_t v19 = writeVInt64((uint64_t)&__src, 0, v11);
      uint64_t result = store_stream_write_bytes((uint64_t)a3, (char *)&__src, v19);
    }
    else
    {
      uint64_t result = writeVInt64(a3[6], v12, v11);
      a3[5] = result;
    }
    uint64_t v13 = *(void *)(a2 + 8);
    if (*(void *)(v13 + 8) == 1)
    {
      int v14 = 0;
    }
    else
    {
      int v14 = 0;
      unint64_t v16 = 0;
      uint64_t v17 = 16;
      do
      {
        if (*(uint64_t *)(v13 + v17) >= 2)
        {
          uint64_t result = storeDirStoreUpdateSet(a1);
          ++v14;
          uint64_t v13 = *(void *)(a2 + 8);
        }
        ++v16;
        v17 += 32;
      }
      while (v16 < *(void *)(v13 + 8) - 1);
    }
    if (v14 != *(_DWORD *)v13)
    {
      uint64_t v20 = __si_assert_copy_extra_329();
      uint64_t v21 = v20;
      uint64_t v22 = "";
      if (v20) {
        uint64_t v22 = v20;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "FileTree_UpdateSet.c", 373, "(uint32_t)outChildren == (uint32_t)root->children->childCount", v22);
      free(v21);
      if (__valid_fs(-1)) {
        uint64_t v23 = 2989;
      }
      else {
        uint64_t v23 = 3072;
      }
      *(_DWORD *)uint64_t v23 = -559038737;
      abort();
    }
  }
  else
  {
    uint64_t v15 = a3[5];
    if ((unint64_t)(a3[4] - v15) < 6)
    {
      long long __src = 0u;
      long long v25 = 0u;
      return store_stream_write_bytes((uint64_t)a3, (char *)&__src, 1uLL);
    }
    else
    {
      *(unsigned char *)(a3[6] + v15) = 0;
      a3[5] = v15 + 1;
    }
  }
  return result;
}

uint64_t writeVInt64(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (HIDWORD(a3))
  {
    if ((a3 & 0x8000000000000000) != 0)
    {
      uint64x2_t v8 = (uint64x2_t)vdupq_n_s64(a3);
      v9.i32[0] = a3;
      uint64_t v10 = (int8x8_t *)(a1 + a2);
      v9.i32[1] = a3 >> 7;
      *uint64_t v10 = vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v9, (int64x2_t)vshlq_u64(v8, (uint64x2_t)xmmword_1BDA822B0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v8, (uint64x2_t)xmmword_1BDA822C0), (int32x4_t)vshlq_u64(v8, (uint64x2_t)xmmword_1BDA822D0)))), (int8x8_t)0x8080808080808080);
      uint64_t v4 = a2 + 9;
      v10[1].i8[0] = HIBYTE(a3) | 0x80;
      LOBYTE(a3) = 1;
    }
    else if ((a3 & 0x7F00000000000000) != 0)
    {
      uint64x2_t v5 = (uint64x2_t)vdupq_n_s64(a3);
      v6.i32[0] = a3;
      uint64_t v4 = a2 + 8;
      v6.i32[1] = a3 >> 7;
      *(int8x8_t *)(a1 + a2) = vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v6, (int64x2_t)vshlq_u64(v5, (uint64x2_t)xmmword_1BDA822B0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v5, (uint64x2_t)xmmword_1BDA822C0), (int32x4_t)vshlq_u64(v5, (uint64x2_t)xmmword_1BDA822D0)))), (int8x8_t)0x8080808080808080);
      a3 = (a3 & 0x7F00000000000000) >> 56;
    }
    else
    {
      char v11 = a3 | 0x80;
      if ((a3 & 0xFE000000000000) != 0)
      {
        uint64_t v12 = a1 + a2;
        *(unsigned char *)uint64_t v12 = v11;
        uint64x2_t v13 = (uint64x2_t)vdupq_n_s64(a3);
        int16x8_t v14 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v13, (uint64x2_t)xmmword_1BDA822F0), (int32x4_t)vshlq_u64(v13, (uint64x2_t)xmmword_1BDA822E0));
        v14.i64[0] = *(void *)&vmovn_s32((int32x4_t)v14) | 0x80008000800080;
        *(_DWORD *)(v12 + 1) = vmovn_s16(v14).u32[0];
        *(unsigned char *)(v12 + 5) = (a3 >> 35) | 0x80;
        uint64_t v4 = a2 + 7;
        *(unsigned char *)(v12 + 6) = (a3 >> 42) | 0x80;
        a3 = (a3 & 0xFE000000000000) >> 49;
      }
      else
      {
        uint64_t v16 = a1 + a2;
        *(unsigned char *)uint64_t v16 = v11;
        uint64x2_t v17 = (uint64x2_t)vdupq_n_s64(a3);
        uint64_t v4 = a2 + 5;
        int16x8_t v18 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v17, (uint64x2_t)xmmword_1BDA822F0), (int32x4_t)vshlq_u64(v17, (uint64x2_t)xmmword_1BDA822E0));
        v18.i64[0] = *(void *)&vmovn_s32((int32x4_t)v18) | 0x80008000800080;
        *(_DWORD *)(v16 + 1) = vmovn_s16(v18).u32[0];
        if ((a3 & 0x1FC0000000000) != 0)
        {
          *(unsigned char *)(a1 + v4) = (a3 >> 35) | 0x80;
          uint64_t v4 = a2 + 6;
          a3 = (a3 & 0x1FC0000000000) >> 42;
        }
        else
        {
          a3 = (a3 >> 35) & 0x7F;
        }
      }
    }
  }
  else if ((a3 & 0x7F0000000) != 0)
  {
    uint64_t v3 = (unsigned char *)(a1 + a2);
    unsigned char *v3 = a3 | 0x80;
    v3[1] = (a3 >> 7) | 0x80;
    v3[2] = (a3 >> 14) | 0x80;
    uint64_t v4 = a2 + 4;
    v3[3] = (a3 >> 21) | 0x80;
    a3 = (a3 & 0x7F0000000) >> 28;
  }
  else if ((a3 & 0xFE00000) != 0)
  {
    uint64_t v7 = (unsigned char *)(a1 + a2);
    *uint64_t v7 = a3 | 0x80;
    v7[1] = (a3 >> 7) | 0x80;
    uint64_t v4 = a2 + 3;
    v7[2] = (a3 >> 14) | 0x80;
    a3 = (a3 & 0xFE00000) >> 21;
  }
  else if ((a3 & 0x1FC000) != 0)
  {
    uint64_t v15 = (unsigned char *)(a1 + a2);
    *uint64_t v15 = a3 | 0x80;
    uint64_t v4 = a2 + 2;
    v15[1] = (a3 >> 7) | 0x80;
    a3 = (a3 & 0x1FC000) >> 14;
  }
  else if ((a3 & 0x3F80) != 0)
  {
    uint64_t v4 = a2 + 1;
    *(unsigned char *)(a1 + a2) = a3 | 0x80;
    a3 = (a3 & 0x3F80) >> 7;
  }
  else
  {
    uint64_t v4 = a2;
  }
  *(unsigned char *)(a1 + v4) = a3;
  return v4 + 1;
}

uint64_t store_stream_write_bytes(uint64_t a1, char *__src, size_t __n)
{
  size_t v3 = __n;
  size_t v7 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  for (size_t i = v6 + __n; i >= v7; size_t i = v6 + v3)
  {
    size_t v9 = v7 - v6;
    memcpy((void *)(*(void *)(a1 + 48) + v6), __src, v7 - v6);
    *(void *)(a1 + 40) += v9;
    uint64_t result = store_stream_flush((unsigned int *)a1, 0);
    if (result) {
      return result;
    }
    __src += v9;
    v3 -= v9;
    size_t v7 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
  }
  uint64_t result = (uint64_t)memcpy((void *)(*(void *)(a1 + 48) + v6), __src, v3);
  *(void *)(a1 + 40) += v3;
  return result;
}

uint64_t restoreDirStoreUpdateSet(char **a1, long long *a2, unsigned int *a3)
{
  uint64_t v5 = *((void *)a3 + 5);
  if ((unint64_t)(*((void *)a3 + 4) - v5) < 0xB)
  {
    int v59 = 0;
    uint64_t v7 = 0;
    LOBYTE(__dst) = 0;
    while (store_stream_read_bytes(a3, (char *)&__dst) == 1)
    {
      v7 |= (unint64_t)(__dst & 0x7F) << v59;
      v59 += 7;
      if ((__dst & 0x80) == 0) {
        goto LABEL_7;
      }
    }
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      char v8 = *(unsigned char *)(*((void *)a3 + 6) + v5++);
      v7 |= (unint64_t)(v8 & 0x7F) << v6;
      if ((v8 & 0x80) == 0) {
        break;
      }
      BOOL v9 = v6 == 63;
      v6 += 7;
    }
    while (!v9);
    *((void *)a3 + 5) = v5;
  }
LABEL_7:
  *(void *)a2 = v7;
  if (v7)
  {
    if (v7 < 2) {
      return 0;
    }
  }
  else
  {
    if (*((void *)a3 + 4)) {
      return 0;
    }
    *(void *)a2 = 2;
  }
  int vint32 = store_stream_read_vint32((uint64_t)a3);
  if (!vint32) {
    goto LABEL_65;
  }
  int v11 = vint32;
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  unsigned int v74 = a2;
  long long v75 = (int *)(a2 + 1);
  uint64_t v16 = a1;
  int v76 = vint32;
  do
  {
    uint64_t v17 = *((void *)a3 + 5);
    if ((unint64_t)(*((void *)a3 + 4) - v17) < 0xB)
    {
      int v33 = 0;
      unint64_t v19 = 0;
      LOBYTE(__dst) = 0;
      while (1)
      {
        uint64_t v34 = *((void *)a3 + 5);
        if ((unint64_t)(v34 + 1) > *((void *)a3 + 4))
        {
          unint64_t __nbyte = *((void *)a3 + 4);
          uint64_t v35 = v14;
          uint64_t v36 = 0;
          p_dst = &__dst;
          uint64_t v39 = *((void *)a3 + 5);
          size_t v38 = 1;
          while (1)
          {
            size_t v69 = v38;
            unint64_t v70 = v19;
            unsigned __int16 v40 = p_dst;
            uint64_t v41 = v12;
            uint64_t v42 = (char *)*((void *)a3 + 6);
            size_t __n = __nbyte - v39;
            if (__nbyte != v39)
            {
              memcpy(p_dst, &v42[v39], __n);
              *((void *)a3 + 5) = __nbyte;
            }
            unint64_t __nbyte = prot_pread(*a3, v42, __nbyte, *((void *)a3 + 3));
            if (__nbyte == -1)
            {
              size_t v38 = 0;
              a3[4] = *__error();
              goto LABEL_57;
            }
            unint64_t v43 = *((void *)a3 + 3) + __nbyte;
            *((void *)a3 + 4) = __nbyte;
            *((void *)a3 + 5) = 0;
            *((void *)a3 + 3) = v43;
            if (!__nbyte) {
              break;
            }
            uint64_t v34 = 0;
            uint64_t v39 = 0;
            p_dst = (long long *)((char *)v40 + __n);
            size_t v38 = v69 - __n;
            v36 += __n;
            uint64_t v12 = v41;
            unint64_t v19 = v70;
            if (v69 - __n <= __nbyte) {
              goto LABEL_44;
            }
          }
          size_t v38 = __n;
LABEL_57:
          uint64_t v12 = v41;
          unint64_t v19 = v70;
        }
        else
        {
          uint64_t v35 = v14;
          uint64_t v36 = 0;
          p_dst = &__dst;
          size_t v38 = 1;
LABEL_44:
          memcpy(p_dst, (const void *)(*((void *)a3 + 6) + v34), v38);
          *((void *)a3 + 5) = v34 + v38;
        }
        uint64_t v16 = a1;
        int v11 = v76;
        uint64_t v14 = v35;
        if (v38 + v36 != 1) {
          break;
        }
        v19 |= (unint64_t)(__dst & 0x7F) << v33;
        v33 += 7;
        if ((__dst & 0x80) == 0) {
          goto LABEL_20;
        }
      }
      unint64_t v19 = 0;
    }
    else
    {
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      do
      {
        char v20 = *(unsigned char *)(*((void *)a3 + 6) + v17++);
        v19 |= (unint64_t)(v20 & 0x7F) << v18;
        if ((v20 & 0x80) == 0) {
          break;
        }
        BOOL v9 = v18 == 63;
        v18 += 7;
      }
      while (!v9);
      *((void *)a3 + 5) = v17;
    }
LABEL_20:
    if (v12) {
      unint64_t v21 = v12 - (v19 >> 2);
    }
    else {
      unint64_t v21 = v19 >> 2;
    }
    if ((v19 & 2) == 0) {
      uint64_t v12 = v21;
    }
    if (v19)
    {
      int v24 = 1;
      if (!v13)
      {
LABEL_39:
        uint64_t v15 = v75;
        if ((v19 & 2) == 0) {
          goto LABEL_35;
        }
        goto LABEL_40;
      }
    }
    else
    {
      uint64_t v22 = v14;
      int v23 = store_stream_read_vint32((uint64_t)a3);
      uint64_t v14 = v22;
      int v11 = v76;
      uint64_t v16 = a1;
      int v24 = v23;
      if (!v13) {
        goto LABEL_39;
      }
    }
    if ((v19 & 2) != 0) {
      unsigned int v25 = 2;
    }
    else {
      unsigned int v25 = 1;
    }
    uint64_t v26 = (atomic_uint *)v16 + 3;
    unsigned int v27 = atomic_load((unsigned int *)v16 + 3);
    unsigned int v28 = v27 + v25;
    uint64_t v29 = *((unsigned int *)v16 + 2);
    if (v28 >= v29)
    {
      unsigned int v44 = 2 * v29;
      if (!v29) {
        unsigned int v44 = 0x4000;
      }
      *((_DWORD *)v16 + 2) = v44;
      int __nbytea = v14;
      int v45 = my_vm_reallocate((void **)v16, 12 * v29, 12 * v44, 243, (uint64_t)v16[2]);
      LODWORD(v14) = __nbytea;
      int v11 = v76;
      uint64_t v16 = a1;
      if (v45)
      {
        uint64_t v65 = __si_assert_copy_extra_329();
        uint64_t v66 = v65;
        uint64_t v67 = "";
        if (v65) {
          uint64_t v67 = v65;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "DocPosting.h", 250, "0 == kr", v67);
        free(v66);
        if (__valid_fs(-1)) {
          uint64_t v68 = 2989;
        }
        else {
          uint64_t v68 = 3072;
        }
        *(_DWORD *)uint64_t v68 = -559038737;
        abort();
      }
    }
    uint64_t add = atomic_fetch_add(v26, v25);
    if (v14) {
      uint64_t v15 = (int *)&(*v16)[12 * v14];
    }
    if (!add)
    {
      *v15 &= 1u;
      uint64_t v61 = __si_assert_copy_extra_329();
      uint64_t v62 = v61;
      uint64_t v63 = "";
      if (v61) {
        uint64_t v63 = v61;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "FileTree_UpdateSet.c", 428, "lastPosting", v63);
      free(v62);
      if (__valid_fs(-1)) {
        uint64_t v64 = 2989;
      }
      else {
        uint64_t v64 = 3072;
      }
      *(_DWORD *)uint64_t v64 = -559038737;
      abort();
    }
    uint64_t v31 = *v16;
    *uint64_t v15 = *v15 & 1 | (2 * add);
    uint64_t v15 = (int *)&v31[12 * add];
    uint64_t v14 = add;
    if ((v19 & 2) == 0)
    {
LABEL_35:
      int v32 = 0;
      v15[2] = v21;
      goto LABEL_36;
    }
LABEL_40:
    *((void *)v15 + 1) = v19 >> 2;
    int v32 = 1;
LABEL_36:
    *uint64_t v15 = v32;
    v15[1] = v24;
    ++v13;
  }
  while (v13 != v11);
  int v46 = store_stream_read_vint32((uint64_t)a3);
  a2 = v74;
  if (v46) {
    return 0;
  }
LABEL_65:
  uint64_t v48 = *((void *)a3 + 5);
  if ((unint64_t)(*((void *)a3 + 4) - v48) < 0xB)
  {
    int v60 = 0;
    unint64_t v50 = 0;
    LOBYTE(__dst) = 0;
    while (store_stream_read_bytes(a3, (char *)&__dst) == 1)
    {
      v50 |= (unint64_t)(__dst & 0x7F) << v60;
      v60 += 7;
      if ((__dst & 0x80) == 0) {
        goto LABEL_71;
      }
    }
    unint64_t v50 = 0;
  }
  else
  {
    uint64_t v49 = 0;
    unint64_t v50 = 0;
    do
    {
      char v51 = *(unsigned char *)(*((void *)a3 + 6) + v48++);
      v50 |= (unint64_t)(v51 & 0x7F) << v49;
      if ((v51 & 0x80) == 0) {
        break;
      }
      BOOL v9 = v49 == 63;
      v49 += 7;
    }
    while (!v9);
    *((void *)a3 + 5) = v48;
  }
LABEL_71:
  if (!v50) {
    return 1;
  }
  uint64_t v52 = 4;
  do
  {
    uint64_t v53 = v52;
    unint64_t v54 = 4 * v52 - 4;
    v52 *= 2;
  }
  while (5 * v50 >= v54);
  unsigned int v55 = 1;
  uint64_t v56 = malloc_type_calloc(1uLL, 32 * v53, 0x1020040D49128EBuLL);
  *((void *)a2 + 1) = v56;
  v56[1] = v53;
  while (1)
  {
    long long __dst = 0u;
    long long v79 = 0u;
    if (!restoreDirStoreUpdateSet(a1, &__dst, a3)) {
      break;
    }
    doInsertDirectory_366(*((void **)a2 + 1), (uint64_t)&__dst);
    if (v50 <= v55++) {
      return 1;
    }
  }
  long long v58 = a2[1];
  long long __dst = *a2;
  long long v79 = v58;
  freeDirectory((uint64_t)&__dst);
  uint64_t result = 0;
  *((void *)a2 + 1) = 0;
  return result;
}

uint64_t store_stream_read_bytes(unsigned int *a1, char *__dst)
{
  size_t v4 = *((void *)a1 + 4);
  uint64_t v5 = *((void *)a1 + 5);
  if (v5 + 1 > v4)
  {
    uint64_t v6 = 0;
    size_t v7 = 1;
    uint64_t v10 = *((void *)a1 + 5);
    while (1)
    {
      size_t v8 = v4 - v10;
      if (v4 != v10)
      {
        memcpy(__dst, (const void *)(*((void *)a1 + 6) + v10), v4 - v10);
        size_t v4 = *((void *)a1 + 4);
        *((void *)a1 + 5) += v8;
      }
      unint64_t v11 = prot_pread(*a1, *((void **)a1 + 6), v4, *((void *)a1 + 3));
      if (v11 == -1) {
        break;
      }
      size_t v4 = v11;
      *((void *)a1 + 4) = v11;
      *((void *)a1 + 5) = 0;
      *((void *)a1 + 3) += v11;
      if (!v11) {
        return v8 + v6;
      }
      uint64_t v5 = 0;
      uint64_t v10 = 0;
      __dst += v8;
      v7 -= v8;
      v6 += v8;
      if (v7 <= v11) {
        goto LABEL_3;
      }
    }
    size_t v8 = 0;
    a1[4] = *__error();
  }
  else
  {
    uint64_t v6 = 0;
    size_t v7 = 1;
LABEL_3:
    memcpy(__dst, (const void *)(*((void *)a1 + 6) + v5), v7);
    *((void *)a1 + 5) += v7;
    size_t v8 = v7;
  }
  return v8 + v6;
}

uint64_t store_stream_read_vint32(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if ((unint64_t)(*(void *)(a1 + 32) - v2) < 6)
  {
    int v17 = 0;
    LODWORD(v5) = 0;
    char __dst = 0;
    while (store_stream_read_bytes((unsigned int *)a1, &__dst) == 1)
    {
      uint64_t v5 = ((__dst & 0x7F) << v17) | v5;
      v17 += 7;
      if ((__dst & 0x80) == 0) {
        return v5;
      }
    }
    return 0;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = v2 + 1;
    uint64_t v5 = *(unsigned __int8 *)(v3 + v2);
    if ((*(char *)(v3 + v2) & 0x80000000) == 0)
    {
      uint64_t v6 = v2 + 1;
LABEL_11:
      *(void *)(a1 + 40) = v6;
      return v5;
    }
    uint64_t v6 = v2 + 2;
    int v7 = *(char *)(v3 + v4);
    int v8 = *(unsigned __int8 *)(v3 + v4);
    if ((v7 & 0x80000000) == 0)
    {
      uint64_t v5 = v5 & 0x7F | (v8 << 7);
      goto LABEL_11;
    }
    uint64_t v9 = v2 + 3;
    int v10 = *(char *)(v3 + v6);
    char v11 = v10;
    if ((v10 & 0x80000000) == 0)
    {
      uint64_t v12 = ((v8 & 0x7F) << 7) | (v10 << 14) | (v5 & 0x7F);
      uint64_t v6 = v9;
LABEL_10:
      uint64_t v5 = v12;
      goto LABEL_11;
    }
    uint64_t v6 = v2 + 4;
    int v13 = *(char *)(v3 + v9);
    int v14 = *(unsigned __int8 *)(v3 + v9);
    if ((v13 & 0x80000000) == 0)
    {
      uint64_t v12 = ((v11 & 0x7F) << 14) | (v14 << 21) | ((v8 & 0x7F) << 7) | (v5 & 0x7F);
      goto LABEL_10;
    }
    int v16 = *(char *)(v3 + v6);
    *(void *)(a1 + 40) = v2 + 5;
    if (v16 < 0)
    {
      return ((v14 & 0x7F) << 21) | (v16 << 28) | ((v11 & 0x7F) << 14) | ((v8 & 0x7F) << 7) | (v5 & 0x7F);
    }
    else
    {
      uint64_t v5 = 0;
      *(_DWORD *)(a1 + 16) = 22;
    }
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v17;
  char __dst;

  uint64_t v2 = *(void *)(a1 + 40);
  if ((unint64_t)(*(void *)(a1 + 32) - v2) < 6)
  {
    int v17 = 0;
    LODWORD(v5) = 0;
    char __dst = 0;
    while (store_stream_read_bytes((unsigned int *)a1, &__dst) == 1)
    {
      uint64_t v5 = ((__dst & 0x7F) << v17) | v5;
      v17 += 7;
      if ((__dst & 0x80) == 0) {
        return v5;
      }
    }
    return 0;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = v2 + 1;
    uint64_t v5 = *(unsigned __int8 *)(v3 + v2);
    if (*(char *)(v3 + v2) < 0)
    {
      uint64_t v6 = v2 + 2;
      int v7 = *(char *)(v3 + v4);
      int v8 = *(unsigned __int8 *)(v3 + v4);
      if (v7 < 0)
      {
        uint64_t v9 = v2 + 3;
        int v10 = *(char *)(v3 + v6);
        char v11 = v10;
        if (v10 < 0)
        {
          uint64_t v12 = v2 + 4;
          int v13 = *(char *)(v3 + v9);
          int v14 = *(unsigned __int8 *)(v3 + v9);
          if (v13 < 0)
          {
            uint64_t v15 = *(char *)(v3 + v12);
            *(void *)(a1 + 40) = v2 + 5;
            if (v15 < 0)
            {
              return ((v14 & 0x7F) << 21) | (v15 << 28) | ((v11 & 0x7F) << 14) | ((v8 & 0x7F) << 7) | (v5 & 0x7F);
            }
            else
            {
              uint64_t v5 = 0;
              *(_DWORD *)(a1 + 16) = 22;
            }
          }
          else
          {
            uint64_t v5 = ((v11 & 0x7F) << 14) | (v14 << 21) | ((v8 & 0x7F) << 7) | (v5 & 0x7F);
            *(void *)(a1 + 40) = v12;
          }
        }
        else
        {
          uint64_t v5 = ((v8 & 0x7F) << 7) | (v10 << 14) | (v5 & 0x7F);
          *(void *)(a1 + 40) = v9;
        }
      }
      else
      {
        uint64_t v5 = v5 & 0x7F | (v8 << 7);
        *(void *)(a1 + 40) = v6;
      }
    }
    else
    {
      *(void *)(a1 + 40) = v4;
    }
  }
  return v5;
}

uint64_t countInUpdates(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 24) > *(void *)(a1 + 8))
  {
    int v10 = __si_assert_copy_extra_329();
    char v11 = v10;
    uint64_t v12 = "";
    if (v10) {
      uint64_t v12 = v10;
    }
    __message_assert(v10, "ChangeHolder.cpp", 104, "changes->hole <= changes->count", v12);
    goto LABEL_14;
  }
  uint64_t Slot = findSlotT<PayloadIterator__Changes,DocID_Count_Pair>((unint64_t **)a1, a2);
  uint64_t v5 = 0;
  if ((Slot & 0x8000000000000000) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    if (Slot < v6)
    {
      uint64_t v7 = *(void *)(a1 + 8);
      uint64_t v8 = *(void *)(a1 + 24);
      if (Slot >= v8 && Slot < v6 - v7 + v8) {
        return 0;
      }
      if (*(void *)(*(void *)a1 + 16 * Slot) == a2) {
        return *(unsigned int *)(*(void *)a1 + 16 * Slot + 8);
      }
      if (v8 <= v7) {
        return 0;
      }
      int v14 = __si_assert_copy_extra_329();
      char v11 = v14;
      uint64_t v15 = "";
      if (v14) {
        uint64_t v15 = v14;
      }
      __message_assert(v14, "ChangeHolder.cpp", 119, "changes->hole <= changes->count", v15);
LABEL_14:
      free(v11);
      if (__valid_fs(-1)) {
        uint64_t v13 = 2989;
      }
      else {
        uint64_t v13 = 3072;
      }
      *(_DWORD *)uint64_t v13 = -559038737;
      abort();
    }
  }
  return v5;
}

void __message_assert(const char *a1, ...)
{
  va_start(va, a1);
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  v1[0] = 0;
  va_copy((va_list)&v1[1], va);
  vasprintf((char **)v1, "%s:%u: failed assertion '%s' %s ", va);
  SISetCrashCStr((const char *)v1[0]);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::__split_buffer<std::string> buf = 136315138;
    uint64_t v3 = v1[0];
    _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
  }
  free(v1[0]);
}

uint64_t findSlotT<PayloadIterator__Changes,DocID_Count_Pair>(unint64_t **a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)a1[1];
  if (!v2) {
    return -1;
  }
  uint64_t v4 = (uint64_t)a1[3];
  uint64_t v5 = *a1;
  if (v4 == v2)
  {
    unint64_t v6 = v5[2 * v2 - 2];
    uint64_t result = (uint64_t)a1[1];
  }
  else
  {
    uint64_t result = (uint64_t)a1[2] - 1;
    unint64_t v6 = v5[2 * result];
  }
  if (v6 <= a2)
  {
    if (v2 > 31)
    {
      BOOL v15 = __OFSUB__(v4, v2);
      uint64_t v16 = v4 - v2;
      if (!((v16 < 0) ^ v15 | (v16 == 0)))
      {
        unint64_t v21 = __si_assert_copy_extra_329();
        uint64_t v22 = v21;
        int v23 = "";
        if (v21) {
          int v23 = v21;
        }
        __message_assert(v21, "ChangeHolder.cpp", 53, "changes->hole <= changes->count", v23);
        free(v22);
        if (__valid_fs(-1)) {
          uint64_t v24 = 2989;
        }
        else {
          uint64_t v24 = 3072;
        }
        *(_DWORD *)uint64_t v24 = -559038737;
        abort();
      }
      if (v4 && (uint64_t v17 = v4 - 1, v5[2 * v17] <= a2))
      {
        uint64_t result = 0;
      }
      else
      {
        uint64_t v18 = a1[2];
        uint64_t result = (uint64_t)v18 + v16;
        uint64_t v17 = (uint64_t)v18 - 1;
      }
      while (result <= v17)
      {
        uint64_t v19 = result + ((v17 - result) >> 1);
        unint64_t v20 = v5[2 * v19];
        if (v20 == a2)
        {
          result += (v17 - result) >> 1;
          return result;
        }
        if (v20 <= a2) {
          uint64_t v17 = v19 - 1;
        }
        else {
          uint64_t result = v19 + 1;
        }
      }
    }
    else
    {
      uint64_t v8 = a1[2];
      if (v4 < 1)
      {
LABEL_12:
        uint64_t v11 = (uint64_t)v8 + v4 - v2;
        if (v11 >= (uint64_t)v8)
        {
          return (uint64_t)v8 - 1;
        }
        else
        {
          uint64_t v12 = v2 - v4;
          uint64_t v13 = &v5[2 * v11];
          while (1)
          {
            unint64_t v14 = *v13;
            v13 += 2;
            if (v14 <= a2) {
              break;
            }
            if (!--v12) {
              return (uint64_t)v8 - 1;
            }
          }
          return (uint64_t)v8 - v12;
        }
      }
      else
      {
        uint64_t result = 0;
        uint64_t v9 = v5;
        while (1)
        {
          unint64_t v10 = *v9;
          v9 += 2;
          if (v10 <= a2) {
            break;
          }
          if (v4 == ++result) {
            goto LABEL_12;
          }
        }
      }
    }
  }
  return result;
}

unint64_t *changesHandleUpdate(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t Slot = findSlotT<PayloadIterator__Changes,DocID_Count_Pair>((unint64_t **)a1, a2);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  weak_checkChangeHolderIntegrity<PayloadIterator__Changes,DocID_Count_Pair>(v7, v9);
  if (Slot < 0)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    goto LABEL_15;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  if (Slot < v8 - v7 + v9 && Slot >= *(void *)(a1 + 24) || Slot >= v10)
  {
LABEL_15:
    uint64_t v16 = *(void *)(a1 + 8);
    if (v16 >= v10)
    {
      uint64_t v32 = 2 * v10;
      BOOL v33 = v10 == 0;
      uint64_t v34 = 16;
      if (!v33) {
        uint64_t v34 = v32;
      }
      *(void *)(a1 + 16) = v34;
      realloc = (unint64_t *)query_realloc(*(void **)a1, 16 * v34);
      *(void *)a1 = realloc;
      uint64_t v17 = *(void *)(a1 + 8);
      uint64_t v10 = *(void *)(a1 + 16);
      *(void *)(a1 + 24) = v17;
      uint64_t v16 = v17;
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 24);
      realloc = *(unint64_t **)a1;
    }
    memmove(&realloc[2 * v17], &realloc[2 * (v10 - (v16 - v17))], 16 * (v16 - v17));
    uint64_t v19 = *(void *)(a1 + 8);
    *(void *)(a1 + 24) = v19;
    uint64_t result = (unint64_t *)weak_checkChangeHolderIntegrity<PayloadIterator__Changes,DocID_Count_Pair>(v19, v19);
    if (a3 == 2)
    {
      int v20 = -1;
    }
    else
    {
      if (a3 != 1)
      {
LABEL_23:
        uint64_t v21 = *(void *)(a1 + 8);
        *(void *)(*(void *)a1 + 16 * v21) = a2;
        *(void *)(a1 + 8) = v21 + 1;
        ++*(void *)(a1 + 24);
        return result;
      }
      if (dword_1E9FC90CC >= 5)
      {
        int v35 = *__error();
        uint64_t v36 = _SILogForLogForCategory(10);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::__split_buffer<std::string> buf = 134218240;
          unint64_t v40 = a2;
          __int16 v41 = 2048;
          uint64_t v42 = a1;
          _os_log_impl(&dword_1BD672000, v36, OS_LOG_TYPE_DEFAULT, "Add %lld to change holder %p", buf, 0x16u);
        }
        uint64_t result = (unint64_t *)__error();
        *(_DWORD *)uint64_t result = v35;
      }
      int v20 = 1;
    }
    *(_DWORD *)(*(void *)a1 + 16 * *(void *)(a1 + 8) + 8) = v20;
    goto LABEL_23;
  }
  uint64_t result = *(unint64_t **)a1;
  unint64_t v14 = *(void *)(*(void *)a1 + 16 * Slot);
  if (v14 == a2)
  {
    if (a3 == 2)
    {
      int v15 = -1;
    }
    else
    {
      if (a3 != 1) {
        goto LABEL_33;
      }
      int v15 = 1;
    }
    LODWORD(result[2 * Slot + 1]) += v15;
    uint64_t result = *(unint64_t **)a1;
LABEL_33:
    if (LODWORD(result[2 * Slot + 1]))
    {
      uint64_t v23 = *(void *)(a1 + 8);
    }
    else
    {
      uint64_t result = (unint64_t *)changeHolderMoveHoleToIndex<PayloadIterator__Changes,DocID_Count_Pair>((void *)a1, Slot);
      uint64_t v23 = *(void *)(a1 + 8) - 1;
      *(void *)(a1 + 8) = v23;
    }
    if (*(void *)(a1 + 24) > v23)
    {
      uint64_t v24 = __si_assert_copy_extra_329();
      unsigned int v25 = v24;
      uint64_t v26 = "";
      if (v24) {
        uint64_t v26 = v24;
      }
      __message_assert(v24, "ChangeHolder.cpp", 235, "changes->hole <= changes->count", v26);
      goto LABEL_45;
    }
    return result;
  }
  if (v14 >= a2) {
    goto LABEL_15;
  }
  if (*(void *)(a1 + 8) >= v10)
  {
    *(void *)(a1 + 16) = 2 * v10;
    *(void *)a1 = query_realloc(result, 32 * v10);
    *(void *)(a1 + 24) = *(void *)(a1 + 8);
  }
  uint64_t result = (unint64_t *)changeHolderMoveHoleToIndex<PayloadIterator__Changes,DocID_Count_Pair>((void *)a1, Slot);
  uint64_t v22 = *(void *)(a1 + 24);
  if (a3 == 1)
  {
    *(_DWORD *)(*(void *)a1 + 16 * v22 + 8) = 1;
    if (dword_1E9FC90CC >= 5)
    {
      int v37 = *__error();
      size_t v38 = _SILogForLogForCategory(10);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::__split_buffer<std::string> buf = 134218240;
        unint64_t v40 = a2;
        __int16 v41 = 2048;
        uint64_t v42 = a1;
        _os_log_impl(&dword_1BD672000, v38, OS_LOG_TYPE_DEFAULT, "Add %lld to change holder %p", buf, 0x16u);
      }
      uint64_t result = (unint64_t *)__error();
      *(_DWORD *)uint64_t result = v37;
    }
  }
  else if (a3 == 2)
  {
    *(_DWORD *)(*(void *)a1 + 16 * v22 + 8) = -1;
  }
  *(void *)(*(void *)a1 + 16 * v22) = a2;
  uint64_t v27 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v27 + 1;
  uint64_t v28 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v28 + 1;
  if (v27 > v28)
  {
    uint64_t v29 = __si_assert_copy_extra_329();
    unsigned int v25 = v29;
    uint64_t v30 = "";
    if (v29) {
      uint64_t v30 = v29;
    }
    __message_assert(v29, "ChangeHolder.cpp", 258, "changes->hole <= changes->count", v30);
LABEL_45:
    free(v25);
    if (__valid_fs(-1)) {
      uint64_t v31 = 2989;
    }
    else {
      uint64_t v31 = 3072;
    }
    *(_DWORD *)uint64_t v31 = -559038737;
    abort();
  }
  return result;
}

uint64_t weak_checkChangeHolderIntegrity<PayloadIterator__Changes,DocID_Count_Pair>(uint64_t result, uint64_t a2)
{
  if (a2 > result)
  {
    uint64_t v2 = __si_assert_copy_extra_329();
    uint64_t v3 = v2;
    uint64_t v4 = "";
    if (v2) {
      uint64_t v4 = v2;
    }
    __message_assert(v2, "ChangeHolder.cpp", 129, "changes->hole<=changes->count", v4);
    free(v3);
    if (__valid_fs(-1)) {
      uint64_t v5 = 2989;
    }
    else {
      uint64_t v5 = 3072;
    }
    *(_DWORD *)uint64_t v5 = -559038737;
    abort();
  }
  return result;
}

uint64_t changeHolderMoveHoleToIndex<PayloadIterator__Changes,DocID_Count_Pair>(void *a1, uint64_t a2)
{
  uint64_t v5 = a1 + 1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a1[3];
  uint64_t v7 = v6 - v4 + v5[1];
  weak_checkChangeHolderIntegrity<PayloadIterator__Changes,DocID_Count_Pair>(v4, v6);
  uint64_t v8 = a2 - v7;
  if (a2 >= v7)
  {
    if (a2 != v7) {
      memmove((void *)(*a1 + 16 * a1[3]), (const void *)(*a1 + 16 * v7), 16 * v8);
    }
    a2 = a1[3] + v8;
    a1[3] = a2;
    uint64_t v13 = a1[1];
    if (a2 <= v13) {
      goto LABEL_12;
    }
    int v20 = __si_assert_copy_extra_329();
    int v15 = v20;
    uint64_t v21 = "";
    if (v20) {
      uint64_t v21 = v20;
    }
    __message_assert(v20, "ChangeHolder.cpp", 179, "changes->hole <= changes->count", v21);
LABEL_21:
    free(v15);
    if (__valid_fs(-1)) {
      uint64_t v22 = 2989;
    }
    else {
      uint64_t v22 = 3072;
    }
    *(_DWORD *)uint64_t v22 = -559038737;
    abort();
  }
  uint64_t v9 = a1[3];
  BOOL v10 = v9 == a2;
  BOOL v11 = v9 < a2;
  uint64_t v12 = v9 - a2;
  if (v11)
  {
    uint64_t v18 = __si_assert_copy_extra_329();
    int v15 = v18;
    uint64_t v19 = "";
    if (v18) {
      uint64_t v19 = v18;
    }
    __message_assert(v18, "ChangeHolder.cpp", 183, "i <= changes->hole", v19);
    goto LABEL_21;
  }
  if (!v10)
  {
    memmove((void *)(*a1 + 16 * (v7 - v12)), (const void *)(*a1 + 16 * a2), 16 * v12);
    a1[3] = a2;
  }
  uint64_t v13 = a1[1];
  if (v13 < a2)
  {
    unint64_t v14 = __si_assert_copy_extra_329();
    int v15 = v14;
    uint64_t v16 = "";
    if (v14) {
      uint64_t v16 = v14;
    }
    __message_assert(v14, "ChangeHolder.cpp", 189, "changes->hole <= changes->count", v16);
    goto LABEL_21;
  }
LABEL_12:
  return weak_checkChangeHolderIntegrity<PayloadIterator__Changes,DocID_Count_Pair>(v13, a2);
}

void *query_realloc(void *ptr, size_t size)
{
  if (ptr) {
    uint64_t v2 = malloc_type_zone_realloc((malloc_zone_t *)queryZone, ptr, size, 0xECA6AA46uLL);
  }
  else {
    uint64_t v2 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, size, 0x8DDAA030uLL);
  }
  uint64_t v3 = v2;
  if (!v2) {
    _log_fault_for_malloc_failure();
  }
  return v3;
}

uint64_t changesSetMinCount(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t Slot = findSlotT<PayloadIterator__Changes,DocID_Count_Pair>((unint64_t **)a1, a2);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t result = weak_checkChangeHolderIntegrity<PayloadIterator__Changes,DocID_Count_Pair>(v7, v9);
  if (Slot < 0)
  {
    uint64_t v11 = *(void *)(a1 + 16);
    unint64_t v14 = *(unint64_t **)a1;
    goto LABEL_19;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  BOOL v13 = Slot >= v8 - v7 + v9 || Slot < v12;
  unint64_t v14 = *(unint64_t **)a1;
  if (!v13 || Slot >= v11) {
    goto LABEL_19;
  }
  unint64_t v16 = v14[2 * Slot];
  if (v16 == a2)
  {
    uint64_t v17 = &v14[2 * Slot];
    int v19 = *((_DWORD *)v17 + 2);
    uint64_t v18 = v17 + 1;
    if (v19 > a3)
    {
      *uint64_t v18 = a3;
      uint64_t v12 = *(void *)(a1 + 24);
    }
    if (v12 > *(void *)(a1 + 8))
    {
      int v20 = __si_assert_copy_extra_329();
      uint64_t v21 = v20;
      uint64_t v22 = "";
      if (v20) {
        uint64_t v22 = v20;
      }
      __message_assert(v20, "ChangeHolder.cpp", 300, "changes->hole <= changes->count", v22);
      free(v21);
      if (__valid_fs(-1)) {
        uint64_t v23 = 2989;
      }
      else {
        uint64_t v23 = 3072;
      }
      *(_DWORD *)uint64_t v23 = -559038737;
      abort();
    }
    return result;
  }
  if (v16 >= a2)
  {
LABEL_19:
    uint64_t v24 = *(void *)(a1 + 8);
    if (v24 < v11 && v14)
    {
      uint64_t v25 = *(void *)(a1 + 24);
    }
    else
    {
      uint64_t v26 = 2 * v11;
      if (!v11) {
        uint64_t v26 = 16;
      }
      *(void *)(a1 + 8) = v11;
      *(void *)(a1 + 16) = v26;
      if (v14) {
        uint64_t v27 = (unint64_t *)malloc_type_zone_realloc((malloc_zone_t *)queryZone, v14, 16 * v26, 0xECA6AA46uLL);
      }
      else {
        uint64_t v27 = (unint64_t *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 16 * v26, 0x8DDAA030uLL);
      }
      unint64_t v14 = v27;
      if (v27)
      {
        *(void *)a1 = v27;
      }
      else
      {
        _log_fault_for_malloc_failure();
        unint64_t v14 = *(unint64_t **)a1;
      }
      uint64_t v25 = *(void *)(a1 + 8);
      uint64_t v11 = *(void *)(a1 + 16);
      *(void *)(a1 + 24) = v25;
      uint64_t v24 = v25;
    }
    memmove(&v14[2 * v25], &v14[2 * (v11 - (v24 - v25))], 16 * (v24 - v25));
    uint64_t v35 = *(void *)(a1 + 8);
    *(void *)(a1 + 24) = v35;
    uint64_t result = weak_checkChangeHolderIntegrity<PayloadIterator__Changes,DocID_Count_Pair>(v35, v35);
    *(_DWORD *)(*(void *)a1 + 16 * *(void *)(a1 + 8) + 8) = a3;
    uint64_t v36 = *(void *)(a1 + 8);
    *(void *)(*(void *)a1 + 16 * v36) = a2;
    *(void *)(a1 + 8) = v36 + 1;
    ++*(void *)(a1 + 24);
    return result;
  }
  if (*(void *)(a1 + 8) >= v11)
  {
    *(void *)(a1 + 16) = 2 * v11;
    int v37 = malloc_type_zone_realloc((malloc_zone_t *)queryZone, v14, 32 * v11, 0xECA6AA46uLL);
    if (!v37) {
      _log_fault_for_malloc_failure();
    }
    *(void *)a1 = v37;
    *(void *)(a1 + 24) = *(void *)(a1 + 8);
  }
  uint64_t result = changeHolderMoveHoleToIndex<PayloadIterator__Changes,DocID_Count_Pair>((void *)a1, Slot);
  uint64_t v28 = *(void *)(a1 + 24);
  *(_DWORD *)(*(void *)a1 + 16 * v28 + 8) = a3;
  uint64_t v29 = *(void *)(a1 + 8);
  *(void *)(*(void *)a1 + 16 * v28) = a2;
  uint64_t v30 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v30 + 1;
  *(void *)(a1 + 8) = v29 + 1;
  if (v30 > v29)
  {
    uint64_t v31 = __si_assert_copy_extra_329();
    uint64_t v32 = v31;
    BOOL v33 = "";
    if (v31) {
      BOOL v33 = v31;
    }
    __message_assert(v31, "ChangeHolder.cpp", 318, "changes->hole <= changes->count", v33);
    free(v32);
    if (__valid_fs(-1)) {
      uint64_t v34 = 2989;
    }
    else {
      uint64_t v34 = 3072;
    }
    *(_DWORD *)uint64_t v34 = -559038737;
    abort();
  }
  return result;
}

uint64_t distanceHolderSetMinDistance(uint64_t a1, unint64_t a2, float a3)
{
  uint64_t Slot = findSlotT<PayloadIterator__Changes,DocID_Count_Pair>((unint64_t **)a1, a2);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t result = weak_checkChangeHolderIntegrity<PayloadIterator__Changes,DocID_Count_Pair>(v7, v9);
  if (Slot < 0)
  {
    uint64_t v12 = *(void *)(a1 + 16);
    unint64_t v14 = *(unint64_t **)a1;
    goto LABEL_20;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  BOOL v13 = Slot >= v8 - v7 + v9 || Slot < v11;
  unint64_t v14 = *(unint64_t **)a1;
  if (!v13 || Slot >= v12) {
    goto LABEL_20;
  }
  unint64_t v16 = v14[2 * Slot];
  if (v16 != a2)
  {
    if (v16 < a2)
    {
      uint64_t v28 = *(void *)(a1 + 8);
      if (v28 >= v12)
      {
        *(void *)(a1 + 16) = 2 * v12;
        int v46 = malloc_type_zone_realloc((malloc_zone_t *)queryZone, v14, 32 * v12, 0xECA6AA46uLL);
        if (!v46) {
          _log_fault_for_malloc_failure();
        }
        *(void *)a1 = v46;
        uint64_t v11 = *(void *)(a1 + 8);
        uint64_t v12 = *(void *)(a1 + 16);
        *(void *)(a1 + 24) = v11;
        uint64_t v28 = v11;
      }
      uint64_t v29 = v11 - v28 + v12;
      weak_checkChangeHolderIntegrity<PayloadIterator__Changes,DocID_Count_Pair>(v28, v11);
      uint64_t v30 = Slot - v29;
      if (Slot >= v29)
      {
        if (Slot != v29) {
          memmove((void *)(*(void *)a1 + 16 * *(void *)(a1 + 24)), (const void *)(*(void *)a1 + 16 * v29), 16 * v30);
        }
        uint64_t Slot = *(void *)(a1 + 24) + v30;
        *(void *)(a1 + 24) = Slot;
        uint64_t v34 = *(void *)(a1 + 8);
        if (Slot <= v34) {
          goto LABEL_47;
        }
        uint64_t v49 = __si_assert_copy_extra_329();
        uint64_t v21 = v49;
        unint64_t v50 = "";
        if (v49) {
          unint64_t v50 = v49;
        }
        __message_assert(v49, "ChangeHolder.cpp", 179, "changes->hole <= changes->count", v50);
      }
      else
      {
        uint64_t v31 = *(void *)(a1 + 24);
        BOOL v32 = v31 == Slot;
        BOOL v13 = v31 < Slot;
        uint64_t v33 = v31 - Slot;
        if (!v13)
        {
          if (!v32)
          {
            memmove((void *)(*(void *)a1 + 16 * (v29 - v33)), (const void *)(*(void *)a1 + 16 * Slot), 16 * v33);
            *(void *)(a1 + 24) = Slot;
          }
          uint64_t v34 = *(void *)(a1 + 8);
          if (v34 < Slot)
          {
            uint64_t v35 = __si_assert_copy_extra_329();
            uint64_t v21 = v35;
            uint64_t v36 = "";
            if (v35) {
              uint64_t v36 = v35;
            }
            __message_assert(v35, "ChangeHolder.cpp", 189, "changes->hole <= changes->count", v36);
            goto LABEL_17;
          }
LABEL_47:
          uint64_t result = weak_checkChangeHolderIntegrity<PayloadIterator__Changes,DocID_Count_Pair>(v34, Slot);
          uint64_t v39 = *(void *)(a1 + 24);
          *(float *)(*(void *)a1 + 16 * v39 + 8) = a3;
          uint64_t v40 = *(void *)(a1 + 8);
          *(void *)(*(void *)a1 + 16 * v39) = a2;
          uint64_t v41 = *(void *)(a1 + 24);
          *(void *)(a1 + 24) = v41 + 1;
          *(void *)(a1 + 8) = v40 + 1;
          if (v41 > v40)
          {
            uint64_t v42 = __si_assert_copy_extra_329();
            uint64_t v43 = v42;
            unsigned int v44 = "";
            if (v42) {
              unsigned int v44 = v42;
            }
            __message_assert(v42, "ChangeHolder.cpp", 318, "changes->hole <= changes->count", v44);
            free(v43);
            if (__valid_fs(-1)) {
              uint64_t v45 = 2989;
            }
            else {
              uint64_t v45 = 3072;
            }
            *(_DWORD *)uint64_t v45 = -559038737;
            abort();
          }
          return result;
        }
        size_t v47 = __si_assert_copy_extra_329();
        uint64_t v21 = v47;
        uint64_t v48 = "";
        if (v47) {
          uint64_t v48 = v47;
        }
        __message_assert(v47, "ChangeHolder.cpp", 183, "i <= changes->hole", v48);
      }
LABEL_17:
      free(v21);
      if (__valid_fs(-1)) {
        uint64_t v23 = 2989;
      }
      else {
        uint64_t v23 = 3072;
      }
      *(_DWORD *)uint64_t v23 = -559038737;
      abort();
    }
LABEL_20:
    uint64_t v24 = *(void *)(a1 + 8);
    if (v24 < v12 && v14)
    {
      uint64_t v25 = *(void *)(a1 + 24);
    }
    else
    {
      uint64_t v26 = 2 * v12;
      if (!v12) {
        uint64_t v26 = 16;
      }
      *(void *)(a1 + 8) = v12;
      *(void *)(a1 + 16) = v26;
      if (v14) {
        uint64_t v27 = (unint64_t *)malloc_type_zone_realloc((malloc_zone_t *)queryZone, v14, 16 * v26, 0xECA6AA46uLL);
      }
      else {
        uint64_t v27 = (unint64_t *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 16 * v26, 0x8DDAA030uLL);
      }
      unint64_t v14 = v27;
      if (v27)
      {
        *(void *)a1 = v27;
      }
      else
      {
        _log_fault_for_malloc_failure();
        unint64_t v14 = *(unint64_t **)a1;
      }
      uint64_t v25 = *(void *)(a1 + 8);
      uint64_t v12 = *(void *)(a1 + 16);
      *(void *)(a1 + 24) = v25;
      uint64_t v24 = v25;
    }
    memmove(&v14[2 * v25], &v14[2 * (v12 - (v24 - v25))], 16 * (v24 - v25));
    uint64_t v37 = *(void *)(a1 + 8);
    *(void *)(a1 + 24) = v37;
    uint64_t result = weak_checkChangeHolderIntegrity<PayloadIterator__Changes,DocID_Count_Pair>(v37, v37);
    *(float *)(*(void *)a1 + 16 * *(void *)(a1 + 8) + 8) = a3;
    uint64_t v38 = *(void *)(a1 + 8);
    *(void *)(*(void *)a1 + 16 * v38) = a2;
    *(void *)(a1 + 8) = v38 + 1;
    ++*(void *)(a1 + 24);
    return result;
  }
  uint64_t v17 = &v14[2 * Slot];
  float v19 = *((float *)v17 + 2);
  uint64_t v18 = (float *)(v17 + 1);
  if (v19 > a3)
  {
    *uint64_t v18 = a3;
    uint64_t v11 = *(void *)(a1 + 24);
  }
  if (v11 > *(void *)(a1 + 8))
  {
    int v20 = __si_assert_copy_extra_329();
    uint64_t v21 = v20;
    uint64_t v22 = "";
    if (v20) {
      uint64_t v22 = v20;
    }
    __message_assert(v20, "ChangeHolder.cpp", 300, "changes->hole <= changes->count", v22);
    goto LABEL_17;
  }
  return result;
}

float distanceHolderGetMinDistance(uint64_t a1, unint64_t a2, unsigned char *a3)
{
  *a3 = 0;
  if (*(void *)(a1 + 24) > *(void *)(a1 + 8))
  {
    uint64_t v12 = __si_assert_copy_extra_329();
    BOOL v13 = v12;
    unint64_t v14 = "";
    if (v12) {
      unint64_t v14 = v12;
    }
    __message_assert(v12, "ChangeHolder.cpp", 104, "changes->hole <= changes->count", v14);
LABEL_13:
    free(v13);
    if (__valid_fs(-1)) {
      uint64_t v15 = 2989;
    }
    else {
      uint64_t v15 = 3072;
    }
    *(_DWORD *)uint64_t v15 = -559038737;
    abort();
  }
  uint64_t Slot = findSlotT<PayloadIterator__Changes,DocID_Count_Pair>((unint64_t **)a1, a2);
  float result = 0.0;
  if ((Slot & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (Slot < v8)
    {
      uint64_t v9 = *(void *)(a1 + 8);
      uint64_t v10 = *(void *)(a1 + 24);
      if (Slot < v10 || Slot >= v8 - v9 + v10)
      {
        uint64_t v11 = *(unint64_t **)a1;
        if (*(void *)(*(void *)a1 + 16 * Slot) == a2)
        {
          *a3 = 1;
          return *(float *)&v11[2 * Slot + 1];
        }
        if (v10 > v9)
        {
          unint64_t v16 = __si_assert_copy_extra_329();
          BOOL v13 = v16;
          uint64_t v17 = "";
          if (v16) {
            uint64_t v17 = v16;
          }
          __message_assert(v16, "ChangeHolder.cpp", 119, "changes->hole <= changes->count", v17);
          goto LABEL_13;
        }
      }
    }
  }
  return result;
}

uint64_t checkAgainstChangeHolder(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 24) > *(void *)(a1 + 8))
  {
    BOOL v13 = __si_assert_copy_extra_329();
    unint64_t v14 = v13;
    uint64_t v15 = "";
    if (v13) {
      uint64_t v15 = v13;
    }
    __message_assert(v13, "ChangeHolder.cpp", 362, "changes->hole <= changes->count", v15);
    goto LABEL_17;
  }
  uint64_t Slot = findSlotT<PayloadIterator__Changes,DocID_Count_Pair>((unint64_t **)a1, a2);
  uint64_t v5 = 0;
  if (Slot < 0) {
    return v5;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (Slot >= v6) {
    return v5;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 24);
  if (Slot >= v8 && Slot < v6 - v7 + v8) {
    return 0;
  }
  if (*(void *)(*(void *)a1 + 16 * Slot) != a2)
  {
    if (v8 <= v7) {
      return 0;
    }
    uint64_t v17 = __si_assert_copy_extra_329();
    unint64_t v14 = v17;
    uint64_t v18 = "";
    if (v17) {
      uint64_t v18 = v17;
    }
    __message_assert(v17, "ChangeHolder.cpp", 386, "changes->hole <= changes->count", v18);
LABEL_17:
    free(v14);
    if (__valid_fs(-1)) {
      uint64_t v16 = 2989;
    }
    else {
      uint64_t v16 = 3072;
    }
    *(_DWORD *)uint64_t v16 = -559038737;
    abort();
  }
  uint64_t v9 = *(void *)a1 + 16 * Slot;
  int v10 = *(_DWORD *)(v9 + 8);
  uint64_t v5 = v10 >> 31;
  *(_DWORD *)(v9 + 8) = (v10 + 1) & (v10 >> 31);
  if (*(_DWORD *)(*(void *)a1 + 16 * Slot + 8))
  {
    uint64_t v11 = *(void *)(a1 + 8);
  }
  else
  {
    changeHolderMoveHoleToIndex<PayloadIterator__Changes,DocID_Count_Pair>((void *)a1, Slot);
    uint64_t v11 = *(void *)(a1 + 8) - 1;
    *(void *)(a1 + 8) = v11;
  }
  if (*(void *)(a1 + 24) > v11)
  {
    float v19 = __si_assert_copy_extra_329();
    unint64_t v14 = v19;
    int v20 = "";
    if (v19) {
      int v20 = v19;
    }
    __message_assert(v19, "ChangeHolder.cpp", 383, "changes->hole <= changes->count", v20);
    goto LABEL_17;
  }
  return v5;
}

void ReleaseEmbeddingDistances(uint64_t a1)
{
  if (atomic_fetch_add((atomic_uint *volatile)(a1 + 32), 0xFFFFFFFF) == 1)
  {
    free(*(void **)a1);
    free((void *)a1);
  }
}

unint64_t utf8_prev_char_start(unint64_t a1, unint64_t a2)
{
  do
  {
    if (a2 <= a1) {
      break;
    }
    do
    {
      unsigned int v3 = *(unsigned __int8 *)--a2;
      int v2 = v3;
      unint64_t v4 = (unint64_t)v3 >> 4;
      unint64_t v5 = v4 & 0xC;
    }
    while (v5 == 8);
    if ((v2 & 0x80) != 0)
    {
      uint64_t v6 = utf8_byte_length(unsigned char)::utf8_len_table[v4];
      int v7 = (utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v6] & v2);
      if (v5 == 12)
      {
        if (v6 <= 2) {
          uint64_t v8 = 2;
        }
        else {
          uint64_t v8 = v6;
        }
        for (uint64_t i = 1; i != v8; ++i)
        {
          int v2 = *(unsigned char *)(a2 + i) & 0x3F | (v7 << 6);
          int v7 = v2;
        }
      }
      else
      {
        int v2 = (utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v6] & v2);
      }
    }
  }
  while ((v2 - 880) > 0xFFFFFF8F);
  return a2;
}

unint64_t utf8_to_code_point(unsigned __int8 *a1)
{
  int v2 = (char)*a1;
  unint64_t result = *a1;
  if (v2 < 0)
  {
    uint64_t v4 = utf8_byte_length(unsigned char)::utf8_len_table[result >> 4];
    int v5 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v4] & result;
    if ((~(result >> 4) & 0xC) != 0)
    {
      return utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v4] & result;
    }
    else
    {
      if (v4 <= 2) {
        uint64_t v6 = 2;
      }
      else {
        uint64_t v6 = utf8_byte_length(unsigned char)::utf8_len_table[result >> 4];
      }
      uint64_t v7 = v6 - 1;
      uint64_t v8 = (char *)(a1 + 1);
      do
      {
        char v9 = *v8++;
        unint64_t result = v9 & 0x3F | (v5 << 6);
        int v5 = v9 & 0x3F | (v5 << 6);
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

ssize_t file_scanner_read(ssize_t result)
{
  char v1 = (char *)(result + 16);
  *(void *)(result + 4120) = result + 16;
  *(void *)(result + 4112) = result + 16;
  if (!*(_DWORD *)(result + 4128))
  {
    ssize_t v2 = result;
    unint64_t result = pread(*(_DWORD *)result, v1, 0x1000uLL, *(void *)(result + 8));
    if (result == -1)
    {
      unsigned int v3 = (FILE *)*MEMORY[0x1E4F143C8];
      uint64_t v4 = __error();
      int v5 = *v4;
      *(_DWORD *)(v2 + 4128) = *v4;
      return fprintf(v3, "\npread error(%d) offset: 0x%llx \n", v5, *(void *)(v2 + 8));
    }
    else
    {
      *(void *)(v2 + 8) += result;
      *(void *)(v2 + 4112) = v1;
      *(void *)(v2 + 4120) = &v1[result];
      if (!result) {
        *(_DWORD *)(v2 + 4128) = -1;
      }
    }
  }
  return result;
}

uint64_t file_scanner_read_vint(ssize_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  ssize_t v2 = *(char **)(a1 + 4112);
  if ((uint64_t)(*(void *)(a1 + 4120) - (void)v2) < 11)
  {
    uint64_t v7 = 0;
    memset(v13, 0, sizeof(v13));
    while (1)
    {
      if ((unint64_t)v2 >= *(void *)(a1 + 4120))
      {
        file_scanner_read(a1);
        ssize_t v2 = *(char **)(a1 + 4112);
      }
      uint64_t v8 = v2 + 1;
      *(void *)(a1 + 4112) = v2 + 1;
      int v9 = *v2;
      *((unsigned char *)v13 + v7) = v9;
      if ((v9 & 0x80000000) == 0) {
        break;
      }
      ++v7;
      ssize_t v2 = v8;
      if (v7 == 11) {
        return 0;
      }
    }
    uint64_t result = 0;
    if (v7 <= 9)
    {
      int v10 = *(_DWORD *)(a1 + 4128);
      if (!v10)
      {
        uint64_t result = 0;
        uint64_t v11 = (char *)v13;
        do
        {
          char v12 = *v11++;
          result |= (unint64_t)(v12 & 0x7F) << v10;
          v10 += 7;
        }
        while (v12 < 0);
      }
    }
  }
  else
  {
    int v3 = 0;
    uint64_t result = 0;
    int v5 = v2 + 1;
    do
    {
      char v6 = *(v5 - 1);
      *(void *)(a1 + 4112) = v5;
      result |= (unint64_t)(v6 & 0x7F) << v3;
      v3 += 7;
      ++v5;
    }
    while (v6 < 0);
  }
  return result;
}

uint64_t file_scanner_read_vint32(ssize_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  char v1 = (void *)(a1 + 4112);
  ssize_t v2 = *(char **)(a1 + 4112);
  if ((uint64_t)(*(void *)(a1 + 4120) - (void)v2) < 11)
  {
    uint64_t v6 = 0;
    memset(v10, 0, sizeof(v10));
    int v9 = (char *)v10;
    while (1)
    {
      if ((unint64_t)v2 >= *(void *)(a1 + 4120))
      {
        file_scanner_read(a1);
        ssize_t v2 = *(char **)(a1 + 4112);
      }
      uint64_t v7 = v2 + 1;
      *char v1 = v2 + 1;
      int v8 = *v2;
      *((unsigned char *)v10 + v6) = v8;
      if ((v8 & 0x80000000) == 0) {
        break;
      }
      ++v6;
      ssize_t v2 = v7;
      if (v6 == 11) {
        return 0;
      }
    }
    uint64_t result = 0;
    if (v6 <= 9 && !*(_DWORD *)(a1 + 4128))
    {
      int v9 = (char *)v10;
      return restoreVInt32(&v9);
    }
  }
  else
  {
    int v3 = (char **)(a1 + 4112);
    return restoreVInt32(v3);
  }
  return result;
}

uint64_t restoreVInt32(char **a1)
{
  char v1 = *a1;
  uint64_t v2 = **a1;
  if ((**a1 & 0x80000000) == 0)
  {
    uint64_t v3 = 1;
    goto LABEL_10;
  }
  int v4 = v1[1];
  if ((v1[1] & 0x80000000) == 0)
  {
    uint64_t v2 = v2 & 0x7F | (v4 << 7);
    uint64_t v3 = 2;
    goto LABEL_10;
  }
  int v5 = v1[2];
  if ((v1[2] & 0x80000000) == 0)
  {
    uint64_t v6 = ((v4 & 0x7F) << 7) | (v5 << 14) | (v2 & 0x7F);
    uint64_t v3 = 3;
LABEL_9:
    uint64_t v2 = v6;
    goto LABEL_10;
  }
  int v7 = v1[3];
  if ((v1[3] & 0x80000000) == 0)
  {
    uint64_t v6 = ((v5 & 0x7F) << 14) | (v7 << 21) | ((v4 & 0x7F) << 7) | (v2 & 0x7F);
    uint64_t v3 = 4;
    goto LABEL_9;
  }
  int v9 = v1[4];
  if (v9 < 0)
  {
    uint64_t v11 = __si_assert_copy_extra_329();
    __message_assert_408((uint64_t)v11, v12, v13, v14, v15, v16, v17, v18, (char)"VIntUtils.h");
    free(v11);
    if (__valid_fs(-1)) {
      uint64_t v19 = 2989;
    }
    else {
      uint64_t v19 = 3072;
    }
    *(_DWORD *)uint64_t v19 = -559038737;
    abort();
  }
  uint64_t v10 = ((v7 & 0x7F) << 21) | (v9 << 28) | ((v5 & 0x7F) << 14) | ((v4 & 0x7F) << 7) | (v2 & 0x7F);
  uint64_t v3 = 5;
  uint64_t v2 = v10;
LABEL_10:
  *a1 = &v1[v3];
  return v2;
}

void __message_assert_408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  v9[0] = 0;
  v9[1] = &a9;
  vasprintf((char **)v9, "%s:%u: failed assertion '%s' %s readVInt32: exceeds max size for uint32_t", &a9);
  SISetCrashCStr((const char *)v9[0]);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::__split_buffer<std::string> buf = 136315138;
    uint64_t v11 = v9[0];
    _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
  }
  free(v9[0]);
}

void Converter::~Converter(Converter *this)
{
  *(void *)this = &unk_1F1810CA0;
  uint64_t v2 = (char *)*((void *)this + 1);
  if (v2 != (char *)this + 24) {
    free(v2);
  }
  JUMPOUT(0x1C1881000);
}

{
  char *v2;

  *(void *)this = &unk_1F1810CA0;
  uint64_t v2 = (char *)*((void *)this + 1);
  if (v2 != (char *)this + 24) {
    free(v2);
  }
}

void UTF8Str::~UTF8Str(UTF8Str *this)
{
  *(void *)this = &unk_1F1810C80;
  uint64_t v2 = (char *)*((void *)this + 1);
  if (v2 != (char *)this + 24)
  {
    free(v2);
    *((void *)this + 1) = 0;
  }
  *(void *)this = &unk_1F1810CA0;
  JUMPOUT(0x1C1881000);
}

{
  char *v2;

  *(void *)this = &unk_1F1810C80;
  uint64_t v2 = (char *)*((void *)this + 1);
  if (v2 != (char *)this + 24)
  {
    free(v2);
    *((void *)this + 1) = 0;
  }
  *(void *)this = &unk_1F1810CA0;
}

CFArrayRef __setDatastoreLocalizedAttributes_block_invoke()
{
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&setDatastoreLocalizedAttributes::defaultLanguages, 1, MEMORY[0x1E4F1D510]);
  setDatastoreLocalizedAttributes::defaultLanguageOrder = (uint64_t)result;
  return result;
}

uint64_t isVectorDictionary(const void *a1, _DWORD *a2, _DWORD *a3, _WORD *a4, const void **a5)
{
  CFTypeID v10 = CFGetTypeID(a1);
  if (isVectorDictionary(__CFDictionary const*,vec_dimensions *,vec_data_format *,unsigned short *,__CFData const**,BOOL,vec_data_format,vec_dimensions)::onceToken != -1) {
    dispatch_once(&isVectorDictionary(__CFDictionary const*,vec_dimensions *,vec_data_format *,unsigned short *,__CFData const**,BOOL,vec_data_format,vec_dimensions)::onceToken, &__block_literal_global_78);
  }
  if (v10 != isVectorDictionary(__CFDictionary const*,vec_dimensions *,vec_data_format *,unsigned short *,__CFData const**,BOOL,vec_data_format,vec_dimensions)::sDictionaryTypeID) {
    return 0;
  }
  uint64_t result = CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, @"vec_data", a5);
  if (!result) {
    return result;
  }
  if (CFGetTypeID(*a5) != isVectorDictionary(__CFDictionary const*,vec_dimensions *,vec_data_format *,unsigned short *,__CFData const**,BOOL,vec_data_format,vec_dimensions)::sDataTypeID) {
    return 0;
  }
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  value = 0;
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, @"vec_dim", (const void **)&value)
    && CFGetTypeID(value) == isVectorDictionary(__CFDictionary const*,vec_dimensions *,vec_data_format *,unsigned short *,__CFData const**,BOOL,vec_data_format,vec_dimensions)::sNumberTypeID)
  {
    CFNumberGetValue((CFNumberRef)value, kCFNumberSInt8Type, a2);
  }
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, @"vec_format", (const void **)&value)
    && CFGetTypeID(value) == isVectorDictionary(__CFDictionary const*,vec_dimensions *,vec_data_format *,unsigned short *,__CFData const**,BOOL,vec_data_format,vec_dimensions)::sNumberTypeID)
  {
    CFNumberGetValue((CFNumberRef)value, kCFNumberSInt8Type, a3);
  }
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, @"vec_version", (const void **)&value)
    && CFGetTypeID(value) == isVectorDictionary(__CFDictionary const*,vec_dimensions *,vec_data_format *,unsigned short *,__CFData const**,BOOL,vec_data_format,vec_dimensions)::sNumberTypeID)
  {
    CFNumberGetValue((CFNumberRef)value, kCFNumberSInt16Type, a4);
  }
  unint64_t Length = CFDataGetLength((CFDataRef)*a5);
  uint64_t v13 = *a2;
  unint64_t v14 = -1;
  if ((int)v13 <= 2)
  {
    uint64_t v15 = *a3;
    if ((int)v15 <= 2) {
      unint64_t v14 = (vector_dimension_vec_sizes_12485[v13] * vector_size_elem_sizes_12484[v15]);
    }
  }
  return v14 <= Length;
}

void *appendVector(size_t a1, unint64_t *a2, char **a3, unint64_t *a4, CFDataRef theData)
{
  uint64_t v7 = *a2;
  unint64_t v8 = *a2 + a1;
  *a2 = v8;
  int v9 = *a3;
  if (v8 > *a4)
  {
    unint64_t v11 = (v8 - 1) | ((v8 - 1) >> 1) | (((v8 - 1) | ((v8 - 1) >> 1)) >> 2);
    unint64_t v12 = v11 | (v11 >> 4) | ((v11 | (v11 >> 4)) >> 8);
    size_t v13 = (v12 | (v12 >> 16) | ((v12 | (v12 >> 16)) >> 32)) + 1;
    *a4 = v13;
    int v9 = (char *)malloc_type_realloc(v9, v13, 0xA8BFA577uLL);
    *a3 = v9;
  }
  unint64_t v14 = &v9[v7];
  BytePtr = CFDataGetBytePtr(theData);
  return memcpy(v14, BytePtr, a1);
}

CFTypeID ___ZL18isVectorDictionaryPK14__CFDictionaryP14vec_dimensionsP15vec_data_formatPtPPK8__CFDatabS4_S2__block_invoke()
{
  isVectorDictionary(__CFDictionary const*,vec_dimensions *,vec_data_format *,unsigned short *,__CFData const**,BOOL,vec_data_format,vec_dimensions)::sDictionaryTypeID = CFDictionaryGetTypeID();
  isVectorDictionary(__CFDictionary const*,vec_dimensions *,vec_data_format *,unsigned short *,__CFData const**,BOOL,vec_data_format,vec_dimensions)::sDataTypeID = CFDataGetTypeID();
  CFTypeID result = CFNumberGetTypeID();
  isVectorDictionary(__CFDictionary const*,vec_dimensions *,vec_data_format *,unsigned short *,__CFData const**,BOOL,vec_data_format,vec_dimensions)::sNumberTypeID = result;
  return result;
}

void DBTypeConverter::~DBTypeConverter(DBTypeConverter *this)
{
  *(void *)this = &unk_1F1810CA0;
  uint64_t v2 = (char *)*((void *)this + 1);
  if (v2 != (char *)this + 24) {
    free(v2);
  }
  JUMPOUT(0x1C1881000);
}

{
  char *v2;

  *(void *)this = &unk_1F1810CA0;
  uint64_t v2 = (char *)*((void *)this + 1);
  if (v2 != (char *)this + 24) {
    free(v2);
  }
}

BOOL ___ZL13getAttributesP4__SIxP13CatInfoGottenP14__MDPlistBytesPPKclP11__SIUserCtx_block_invoke(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return plistBlock(a2, a3, a4, a6);
}

uint64_t runCannedHelper(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void *, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t result = a1(a2, a6, a3, a4, a5, a7, a8, 0, &__block_literal_global_67, a9);
  if ((result & 1) == 0)
  {
    if (dword_1E9FC90B8 >= 5)
    {
      int v12 = *__error();
      size_t v13 = _SILogForLogForCategory(5);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::__split_buffer<std::string> buf = 136315394;
        uint64_t v15 = a6;
        __int16 v16 = 2048;
        uint64_t v17 = a4;
        _os_log_impl(&dword_1BD672000, v13, OS_LOG_TYPE_DEFAULT, "No attribute %s for %llx", buf, 0x16u);
      }
      *__error() = v12;
    }
    return _MDPlistBytesAddNull();
  }
  return result;
}

BOOL __runCannedHelper_block_invoke(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return plistBlock(a2, a3, a4, a6);
}

uint64_t _qpContentIndexMatch(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9 = (_DWORD *)*a2;
  if (!v9)
  {
    ((void (*)(uint64_t, void *))a2[1])(a1, a2);
    int v9 = (_DWORD *)*a2;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, _DWORD *, uint64_t, uint64_t, void))(*(void *)a5 + 48))(a5, v9, a3, a4, *(void *)(a3 + 72));
  if (result)
  {
    if (*a2) {
      *(_DWORD *)(*a2 + 40) |= 0x8000u;
    }
  }
  return result;
}

uint64_t _qpPathMatch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((*(unsigned char *)(a3 + 34) & 0x10) != 0) {
    return 0;
  }
  else {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a5 + 56))(a5, a1, a2, a3, a4);
  }
}

void ___ZN11SISearchCtxC2Ev_block_invoke()
{
  CFAbsoluteTimeGetCurrent();
  uint64_t v2 = 0;
  uint64_t v3 = &v2;
  uint64_t v4 = 0x2000000000;
  char v5 = 0;
  v0[0] = 0;
  v0[1] = v0;
  v0[2] = 0x2000000000;
  int v1 = 0;
  md_deadline_once_run_block_with_lock();
  if (!*((unsigned char *)v3 + 24)) {
    operator new();
  }
  _Block_object_dispose(v0, 8);
  _Block_object_dispose(&v2, 8);
}

void SISearchCtx_METADATA::SISearchCtx_METADATA(SISearchCtx_METADATA *this, char a2, char a3)
{
  *(void *)this = &unk_1F1810958;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 81) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 148) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((void *)this + 30) = -1;
  *((_DWORD *)this + 62) = 0;
  *((_DWORD *)this + 76) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((void *)this + 36) = md_deadline_once_create();
  *((void *)this + 37) = dispatch_time(0, 500000000);
  *(void *)this = &unk_1F1810AA0;
  *((_DWORD *)this + 90) = 9;
  *((_OWORD *)this + 23) = 0u;
  *((_DWORD *)this + 96) = 0;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((void *)this + 64) = 0;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_WORD *)this + 296) = 0;
  *(_OWORD *)((char *)this + 596) = 0u;
  *(_OWORD *)((char *)this + 612) = 0u;
  *(_OWORD *)((char *)this + 628) = 0u;
  *(void *)((char *)this + 642) = 0;
  *((unsigned char *)this + 650) = a2;
  *((_DWORD *)this + 163) = 0;
  *((unsigned char *)this + 656) = a3;
  *((void *)this + 83) = 0;
  *((_DWORD *)this + 168) = 0;
  *((void *)this + 105) = 0;
  *((_DWORD *)this + 212) = 0;
  *((void *)this + 153) = 0;
  *((_DWORD *)this + 308) = 0;
  *((void *)this + 155) = 0;
  *((unsigned char *)this + 1248) = 0;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 820) = 0u;
  *((_WORD *)this + 596) = 0;
  *(_OWORD *)((char *)this + 1160) = 0u;
  *(_OWORD *)((char *)this + 1176) = 0u;
  *(_OWORD *)((char *)this + 1128) = 0u;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *(_OWORD *)((char *)this + 1096) = 0u;
  *(_OWORD *)((char *)this + 1112) = 0u;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *(_OWORD *)((char *)this + 1080) = 0u;
  *(_OWORD *)((char *)this + 1032) = 0u;
  *(_OWORD *)((char *)this + 1048) = 0u;
  *(_OWORD *)((char *)this + 1000) = 0u;
  *(_OWORD *)((char *)this + 1016) = 0u;
  *(_OWORD *)((char *)this + 968) = 0u;
  *(_OWORD *)((char *)this + 984) = 0u;
  *(_OWORD *)((char *)this + 936) = 0u;
  *(_OWORD *)((char *)this + 952) = 0u;
  *(_OWORD *)((char *)this + 904) = 0u;
  *(_OWORD *)((char *)this + 920) = 0u;
  *(_OWORD *)((char *)this + 872) = 0u;
  *(_OWORD *)((char *)this + 888) = 0u;
  *(_OWORD *)((char *)this + 856) = 0u;
  *((_DWORD *)this + 304) = 0;
  *((_OWORD *)this + 75) = 0u;
}

const __CFArray *PartialQueryResults::attributeVector(PartialQueryResults *this)
{
  uint64_t v2 = (CFIndex *)((char *)this + 232);
  uint64_t v3 = *((void *)this + 29);
  if (*(unsigned char *)this)
  {
    if (v3)
    {
      uint64_t v4 = (char **)((char *)this + 104);
      if (!*((void *)this + 13))
      {
        CFArrayRef v5 = (const __CFArray *)*((void *)this + 16);
        if (v5)
        {
          size_t v18 = 0;
          SIFlattenArrayToCStringVector(v5, v4, &v18, &v17);
        }
      }
    }
    return (const __CFArray *)*((void *)this + 13);
  }
  else
  {
    uint64_t v7 = (char **)((char *)this + 96);
    CFArrayRef result = (const __CFArray *)*((void *)this + 12);
    if (v3) {
      BOOL v8 = result == 0;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8)
    {
      CFArrayRef result = (const __CFArray *)*((void *)this + 15);
      if (result)
      {
        SIFlattenArrayToCStringVector(result, v7, (size_t *)this + 30, v2);
        CFArrayRef result = (const __CFArray *)*((void *)this + 12);
        if (!result)
        {
          int v9 = __si_assert_copy_extra_329();
          __message_assert_333((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, (char)"SISearchCtx.h");
          free(v9);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
      }
    }
  }
  return result;
}

void ___ZN19PartialQueryResultsC2EPK9__CFArrayPK13__CFBitVectorS2_S2_P14__CFDictionary11SIQueryKindPK13__RLEOIDArraydb19SICompletionOptionsP16_CompletionModelP17_SuggestionsModelP23si_completion_pattern_sj_block_invoke()
{
}

void PartialQueryResults::populateCompletionModel()
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2000000000;
  char v13 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  int v9 = 0;
  uint64_t v8 = 0x2000000000;
  md_deadline_once_run_block_with_lock();
  if (!*((unsigned char *)v11 + 24))
  {
    int v0 = *((_DWORD *)v7 + 6);
    int v1 = (unsigned int *)malloc_type_malloc(0x38uLL, 0x10200403802FF21uLL);
    uint64_t v2 = v1;
    if (v1)
    {
      atomic_store(0, v1);
      *((void *)v1 + 1) = 0;
      if (v0 == 1)
      {
        unsigned int v3 = 1;
      }
      else
      {
        *((void *)v1 + 1) = SILanguageModelGetDefaultModel();
        unsigned int v3 = v0 & 0xFFFFFFEF;
      }
      *((_OWORD *)v2 + 1) = 0u;
      v2[1] = v3;
      *((_OWORD *)v2 + 2) = 0u;
      v2[12] = 0;
      if (SIWordTrieGetTypeID::once[0] != -1) {
        dispatch_once(SIWordTrieGetTypeID::once, &__block_literal_global_5054);
      }
      uint64_t Instance = _CFRuntimeCreateInstance();
      *(_OWORD *)(Instance + 16) = 0u;
      *(_OWORD *)(Instance + 32) = 0u;
      *(_DWORD *)(Instance + 48) = 1065353216;
      if (v3)
      {
        *((void *)v2 + 2) = Instance;
      }
      else
      {
        *((void *)v2 + 3) = Instance;
        if (SIWordTrieGetTypeID::once[0] != -1) {
          dispatch_once(SIWordTrieGetTypeID::once, &__block_literal_global_5054);
        }
        uint64_t v5 = _CFRuntimeCreateInstance();
        *(_OWORD *)(v5 + 16) = 0u;
        *(_OWORD *)(v5 + 32) = 0u;
        *(_DWORD *)(v5 + 48) = 1065353216;
        *((void *)v2 + 4) = v5;
      }
      atomic_fetch_add((atomic_uint *volatile)v2, 1u);
    }
    md_deadline_once_run_block_with_lock();
  }
  _Block_object_dispose(&v6, 8);
  _Block_object_dispose(&v10, 8);
}

void *___ZN19PartialQueryResults23populateCompletionModelEP18md_deadline_once_s_block_invoke(void *result, int a2)
{
  uint64_t v2 = result[6];
  *(unsigned char *)(*(void *)(result[4] + 8) + 24) = a2 != 0;
  if (!a2) {
    *(_DWORD *)(*(void *)(result[5] + 8) + 24) = *(_DWORD *)(v2 + 320);
  }
  return result;
}

void ___ZN19PartialQueryResults23populateCompletionModelEP18md_deadline_once_s_block_invoke_2(uint64_t a1, int a2)
{
  if (a2) {
    SICompletionModelRelease(*(void **)(a1 + 40));
  }
  else {
    *(void *)(*(void *)(a1 + 32) + 328) = *(void *)(a1 + 40);
  }
}

uint64_t QueryFunctionCallbackContext::getDocSet()
{
  return 0;
}

uint64_t QueryFunctionCallbackContext::findPath(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = **(void **)(a4 + 288);
  if ((*(unsigned char *)(a4 + 34) & 8) != 0
    || ((*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 24))(a1, **(void **)(a4 + 288)) & 1) == 0)
  {
    uint64_t v9 = *a3;
    if (*a3 || (((void (*)(uint64_t, uint64_t *))a3[1])(a2, a3), (uint64_t v9 = *a3) != 0))
    {
      uint64_t v9 = *(void *)(v9 + 24);
      BOOL v8 = v9 != v7;
      LODWORD(v9) = v9 == v7;
    }
    else
    {
      BOOL v8 = 1;
    }
  }
  else
  {
    BOOL v8 = 0;
    LODWORD(v9) = 1;
  }
  if (*(_DWORD *)(a4 + 24) == 5) {
    return v8;
  }
  else {
    return v9;
  }
}

uint64_t QueryFunctionCallbackContext_LIVE::findContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(unsigned __int8 *)(a1 + 33);
  if (*(unsigned char *)(a1 + 33))
  {
    uint64_t v7 = *(void *)(a1 + 8);
    unint64_t v8 = *(void *)(a2 + 32);
    uint64_t v9 = *(void *)(v7 + 1376);
    unint64_t v10 = *(unsigned int *)(v9 + 8);
    if (v10)
    {
      uint64_t v11 = *(void *)v9 - 8;
      while (1)
      {
        uint64_t v12 = *(void *)(v11 + 8 * v10);
        if (v12)
        {
          unint64_t v13 = *(void *)(v12 + 80);
          if (v13 < v8 && v13 + *(unsigned int *)(v12 + 68) > v8) {
            break;
          }
        }
        if (v10-- <= 1) {
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      uint64_t v14 = *(void *)(v7 + 1384);
      unint64_t v15 = *(unsigned int *)(v14 + 8);
      if (!v15)
      {
LABEL_18:
        int v4 = 0;
        return v4 ^ ((*(_DWORD *)(a3 + 24) - 5) < 2);
      }
      uint64_t v16 = *(void *)v14 - 8;
      while (1)
      {
        uint64_t v12 = *(void *)(v16 + 8 * v15);
        if (v12)
        {
          unint64_t v17 = *(void *)(v12 + 80);
          if (v17 < v8 && v17 + *(unsigned int *)(v12 + 68) > v8) {
            break;
          }
        }
        if (v15-- < 2) {
          goto LABEL_18;
        }
      }
    }
    uint64_t v18 = *(void *)(a3 + 120);
    if (!v18)
    {
      uint64_t v19 = *(const UInt8 **)(a3 + 72);
      if (v19)
      {
        size_t v20 = strlen(*(const char **)(a3 + 72));
        CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        uint64_t v22 = v19;
      }
      else
      {
        CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        uint64_t v22 = 0;
        size_t v20 = 0;
      }
      CFStringRef v23 = CFStringCreateWithBytes(v21, v22, v20, 0x8000100u, 0);
      uint64_t v24 = *(void *)(a1 + 24);
      if (v24) {
        uint64_t v25 = *(void *)(v24 + 144);
      }
      else {
        uint64_t v25 = 0;
      }
      uint64_t v26 = _CIQueryNodeForString(v12, v23, 0, (*(_DWORD *)(a3 + 32) >> 1) & 0x20 | (*(_DWORD *)(a3 + 32) >> 4) & 3 | (((*(_DWORD *)(a3 + 32) >> 15) & 1) << 25) | (*(_DWORD *)(a3 + 32) >> 1) & 0x4000000 | (*(_DWORD *)(a3 + 32) >> 11) & 8u, v25, (*(_DWORD *)(*(void *)(a1 + 8) + 6576) >> 19) & 3, 0, *(_DWORD *)(a3 + 60));
      uint64_t v18 = (uint64_t)v26;
      uint64_t v27 = 0;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(a3 + 120), (unint64_t *)&v27, (unint64_t)v26);
      if (v27)
      {
        ContentIndexQueryNodeDispose((char *)v26);
        uint64_t v18 = *(void *)(a3 + 120);
      }
      else
      {
        *(void *)(a3 + 120) = v26;
        *(void *)(a3 + 128) = ContentIndexQueryNodeDispose;
      }
      if (v23) {
        CFRelease(v23);
      }
    }
    int v4 = _CIMatchesNodeByDocId(v12, v18, *(void *)(a2 + 32), *(unsigned char *)(a1 + 32)) != 0;
  }
  return v4 ^ ((*(_DWORD *)(a3 + 24) - 5) < 2);
}

uint64_t QueryFunctionCallbackContext_LIVE::gotten(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)a3)
  {
    (*(void (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
    if (!*(void *)a3) {
      return 0;
    }
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 32);
  return v5(a1);
}

uint64_t QueryFunctionCallbackContext_LIVE::gotten(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (!result) {
    operator new();
  }
  return result;
}

BOOL QueryFunctionCallbackContext_LIVE::matchPath(QueryFunctionCallbackContext_LIVE *this, uint64_t a2)
{
  unint64_t v2 = *((unsigned int *)this + 9);
  if ((int)v2 < 1) {
    return 0;
  }
  unsigned int v3 = (void *)*((void *)this + 6);
  if (*v3 == a2) {
    return 1;
  }
  unint64_t v5 = 0;
  uint64_t v6 = v3 + 1;
  while (v2 - 1 != v5)
  {
    uint64_t v7 = v6[v5++];
    if (v7 == a2) {
      return v5 < v2;
    }
  }
  unint64_t v5 = *((unsigned int *)this + 9);
  return v5 < v2;
}

void QueryFunctionCallbackContext_LIVE::~QueryFunctionCallbackContext_LIVE(QueryFunctionCallbackContext_LIVE *this)
{
  *(void *)this = &unk_1F1810BD0;
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x1C1881000);
}

{
  uint64_t v1;

  *(void *)this = &unk_1F1810BD0;
  uint64_t v1 = *((void *)this + 5);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

uint64_t QueryFunctionCallbackContext::postCheck()
{
  return 2;
}

void SIQueryAddResults(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  unint64_t v2 = v1;
  int v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  bzero(v10, 0x11E0uLL);
  v10[0] = 0;
  uint64_t v33 = 0;
  uint64_t v40 = 0;
  __int16 v41 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v13 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  uint64_t v28 = 0;
  int v32 = 0;
  long long v31 = 0u;
  long long v30 = 0u;
  long long v29 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v42 = 0;
  int v48 = 1;
  int v50 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  if (v2) {
    CFRetain(v2);
  }
  int v46 = v2;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v49 = 0;
  uint64_t v45 = v4;
  uint64_t v47 = 0;
  uint64_t v51 = MEMORY[0x1E4F143A8];
  uint64_t v52 = 0x40000000;
  uint64_t v53 = ___ZN19PartialQueryResultsC2EPK17__MDStoreOIDArrayPK14__MDPlistBytes_block_invoke;
  unint64_t v54 = &__block_descriptor_tmp_29_544;
  unsigned int v55 = v10;
  uint64_t v34 = md_deadline_once_create();
  dispatch_time_t v35 = dispatch_time(0, 100000000);
  BOOL v9 = _MDStoreOIDArrayGetVectorCount() < 2;
  si_querypipe_addresults(*(void *)(v6 + 24), (uint64_t)v10, 0, v9, v8);
  PartialQueryResults::~PartialQueryResults((PartialQueryResults *)v10);
}

void ___ZN19PartialQueryResultsC2EPK17__MDStoreOIDArrayPK14__MDPlistBytes_block_invoke()
{
}

void *makeNodeForAttribute(const __CFString *cf2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (CFEqual(@"_kMDItemDisplayNameWithExtensionsSynth", cf2))
  {
    return db_make_query_node_with_ann("true", 0);
  }
  else
  {
    query_node_with_ann = db_make_query_node_with_ann("*=*", 0);
    free(*(void **)query_node_with_ann[2]);
    bzero(&v5, 0x410uLL);
    int v4 = fastUTF8String(cf2, &v6, v7);
    uint64_t v5 = v4;
    *(void *)query_node_with_ann[2] = strdup(v4);
    if (v4 != v7) {
      free(v4);
    }
    return query_node_with_ann;
  }
}

uint64_t SIUINT32SetGetTypeID()
{
  uint64_t result = __kSIUINT32SetTypeID;
  if (!__kSIUINT32SetTypeID)
  {
    uint64_t result = _CFRuntimeRegisterClass();
    __kSIUINT32SetTypeID = result;
  }
  return result;
}

uint64_t SIUINT32SetContainsValue(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 176)) {
    return 0;
  }
  int v3 = *(_DWORD *)(a1 + 20);
  if (v3)
  {
    if ((*(_DWORD *)(a1 + 16) ^ a2) >> (-4 * v3)) {
      return 0;
    }
  }
  uint64_t v4 = *(void *)(a1 + 8 * ((a2 >> (28 - 4 * v3)) & 0xF) + 48);
  if (v4)
  {
    int v5 = v3 + 2;
    do
      uint64_t v4 = *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((a2 >> (32 - 4 * v5++)) & 0xF));
    while ((v4 & 1) != 0);
  }
  if (!v4) {
    return 0;
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)v4 + 16))();
  }
}

uint64_t SIUINT32SetAddValue(uint64_t a1, uint64_t a2)
{
  return SIValueSet<unsigned int>::SIValueSetInsert((unsigned int *)(a1 + 16), a2);
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::valueIterator(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)a3 = &unk_1F1810CC0;
  *(_DWORD *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = a1 + 8;
  *(_WORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = a2;
  return a3;
}

void SIValueSet<unsigned int>::BitmapHolder::BitmapIterator::~BitmapIterator()
{
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::BitmapIterator::hasMore(uint64_t a1)
{
  int v1 = *(__int16 *)(a1 + 24);
  if (v1 > 4095) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  while (1)
  {
    unint64_t v3 = *(void *)(v2 + 8 * ((__int16)v1 >> 6));
    if (v3) {
      break;
    }
    v1 += 64;
    *(_WORD *)(a1 + 24) = v1;
LABEL_9:
    if ((__int16)v1 >= 4096) {
      return 0;
    }
  }
  uint64_t v4 = v1 & 0x3F;
  while (((v3 >> v4) & 1) == 0)
  {
    *(_WORD *)(a1 + 24) = ++v1;
    if (++v4 == 64) {
      goto LABEL_9;
    }
  }
  return 1;
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::BitmapIterator::nextKey(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 32);
  int v2 = *(__int16 *)(a1 + 24);
  if (v2 > 4095) {
    return v1;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  while (1)
  {
    int v4 = (__int16)v2;
    if (*(void *)(v3 + 8 * ((__int16)v2 >> 6))) {
      break;
    }
    LOWORD(v2) = v2 + 64;
    *(_WORD *)(a1 + 24) = v2;
    if (v4 >= 4032) {
      return v1;
    }
  }
  int v6 = *(_DWORD *)(a1 + 8);
  *(_WORD *)(a1 + 24) = v2 + 1;
  return v6 | (__int16)v2 | v1;
}

void SIValueSet<unsigned int>::BitmapHolder::~BitmapHolder()
{
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::Serialize(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, void))(*(void *)a2 + 8))(a2, 0);
  int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16);
  return v4(a2, a1 + 8, 512);
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::GetRawCount()
{
  return 61;
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::IsEmpty(uint64_t a1)
{
  LOWORD(v1) = 0;
  while (1)
  {
    unint64_t v2 = *(void *)(a1 + 8 + 8 * ((__int16)v1 >> 6));
    if (v2) {
      break;
    }
LABEL_2:
    int v1 = (__int16)(v1 + 64);
    if (v1 >= 4096) {
      return 1;
    }
  }
  uint64_t v3 = v1 & 0x3F;
  LOWORD(v1) = v1 & 0xFFC0;
  while (((v2 >> v3) & 1) == 0)
  {
    if (++v3 == 64) {
      goto LABEL_2;
    }
  }
  return 0;
}

void SIValueSet<unsigned int>::BitmapHolder::Apply(uint64_t a1, uint64_t a2, int a3, uint64_t (*a4)(char *, uint64_t, uint64_t), uint64_t a5)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v11, v10);
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v14 = a1 + 8;
  do
  {
    while (1)
    {
      unint64_t v15 = *(void *)(v14 + 8 * ((__int16)v13 >> 6));
      if (v15) {
        break;
      }
LABEL_2:
      int v13 = (__int16)(v13 + 64);
      if (v13 >= 4096) {
        goto LABEL_16;
      }
    }
    uint64_t v16 = v13 & 0x3F;
    __int16 v17 = v13 & 0xFFC0;
    while (((v15 >> v16) & 1) == 0)
    {
      ++v13;
      if (++v16 == 64)
      {
        LOWORD(v13) = v17;
        goto LABEL_2;
      }
    }
    if ((__int16)v13 > 4095)
    {
LABEL_11:
      int v18 = 0;
    }
    else
    {
      while (1)
      {
        int v18 = (__int16)v13;
        if (*(void *)(v14 + 8 * ((__int16)v13 >> 6))) {
          break;
        }
        v13 += 64;
        if (v18 >= 4032) {
          goto LABEL_11;
        }
      }
      ++v13;
    }
    *(_DWORD *)&v11[4 * v12++] = v18 | a3;
    if (v12 == a2)
    {
      char v19 = a4(v11, a2, a5);
      uint64_t v12 = 0;
      if (v19) {
        break;
      }
    }
  }
  while ((__int16)v13 < 4096);
LABEL_16:
  if (v12) {
    a4(v11, v12, a5);
  }
}

BOOL SIValueSet<unsigned int>::BitmapHolder::RemoveKey(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = 1 << (a3 & a2);
  uint64_t v4 = a1 + 8 * ((a3 & a2) << 16 >> 22);
  uint64_t v7 = *(void *)(v4 + 8);
  int v5 = (uint64_t *)(v4 + 8);
  uint64_t v6 = v7;
  uint64_t v8 = v7 & v3;
  if ((v7 & v3) != 0) {
    *int v5 = v6 ^ v3;
  }
  return v8 != 0;
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::CloseKey(uint64_t a1, uint64_t a2, __int16 a3)
{
  if ((*(void *)(a1 + 8 * ((__int16)(a3 & a2) >> 6) + 8) >> (a3 & a2))) {
    return a2;
  }
  LODWORD(v4) = a2;
  LOWORD(v5) = a3 & a2;
  while (1)
  {
    int v5 = (__int16)(v5 + 1);
    if (v5 >= 64) {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if ((*(void *)(a1 + 8 * (v5 >> 6) + 8) >> v5)) {
      return v4;
    }
  }
  unsigned int v6 = (unsigned __int16)(a3 & a2);
  LODWORD(v4) = a2;
  while ((__int16)v6 >= 1)
  {
    --v6;
    uint64_t v4 = (v4 - 1);
    if ((*(void *)(a1 + 8 * (v6 >> 6) + 8) >> v6)) {
      return v4;
    }
  }
  return 0;
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::AddSortedKeysWithContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(int **)a2;
  if (*(void *)a2 < *(void *)(a2 + 8))
  {
    if (a3)
    {
      do
      {
        if ((*(_DWORD *)(a2 + 20) & *v3) != *(_DWORD *)(a2 + 16)) {
          break;
        }
        unsigned int Key = SIValueSet<unsigned int>::FlatContextWithPfx::nextKey((int **)a2);
        uint64_t v8 = 1 << Key;
        uint64_t v9 = a1 + ((uint64_t)((unint64_t)((__int16)Key >> 6) << 48) >> 45);
        uint64_t v12 = *(void *)(v9 + 8);
        size_t v10 = (uint64_t *)(v9 + 8);
        uint64_t v11 = v12;
        if (((1 << Key) & v12) == 0) {
          goto LABEL_11;
        }
        SIValueSet<unsigned int>::SIValueSetInsert(*(unsigned int **)(a3 + 8), *(_DWORD *)a3 | Key);
        uint64_t v3 = *(int **)a2;
      }
      while (*(void *)a2 < *(void *)(a2 + 8));
    }
    else
    {
      while ((*(_DWORD *)(a2 + 20) & *v3) == *(_DWORD *)(a2 + 16))
      {
        __int16 v13 = SIValueSet<unsigned int>::FlatContextWithPfx::nextKey((int **)a2);
        uint64_t v8 = 1 << v13;
        uint64_t v14 = a1 + ((uint64_t)((unint64_t)(v13 >> 6) << 48) >> 45);
        uint64_t v15 = *(void *)(v14 + 8);
        size_t v10 = (uint64_t *)(v14 + 8);
        uint64_t v11 = v15;
        if (((1 << v13) & v15) == 0)
        {
LABEL_11:
          *size_t v10 = v8 | v11;
          return 1;
        }
        uint64_t v3 = *(int **)a2;
        if (*(void *)a2 >= *(void *)(a2 + 8)) {
          return 0;
        }
      }
    }
  }
  return 0;
}

uint64_t SIValueSet<unsigned int>::FlatContextWithPfx::nextKey(int **a1)
{
  int v1 = *(*a1)++;
  int v2 = *((_DWORD *)a1 + 5);
  if ((v2 & v1) != *((_DWORD *)a1 + 4))
  {
    uint64_t v4 = __si_assert_copy_extra_329();
    int v5 = v4;
    unsigned int v6 = "";
    if (v4) {
      unsigned int v6 = v4;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 172, "(key & fMask) == fPfx", v6);
    free(v5);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return v1 & ~v2;
}

BOOL SIValueSet<unsigned int>::BitmapHolder::AddKey(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = 1 << (a3 & a2);
  uint64_t v4 = a1 + ((uint64_t)((unint64_t)((a3 & a2) << 16 >> 22) << 48) >> 45);
  uint64_t v7 = *(void *)(v4 + 8);
  int v5 = (uint64_t *)(v4 + 8);
  uint64_t v6 = v7;
  uint64_t v8 = v7 & v3;
  if ((v7 & v3) == 0) {
    *int v5 = v6 | v3;
  }
  return v8 == 0;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::valueIterator(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned __int16 *)(a1 + 8);
  *(void *)a3 = &unk_1F1810E00;
  *(void *)(a3 + 8) = a1 + 10;
  *(void *)(a3 + 16) = a1 + 10 + 2 * v3;
  *(_DWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = a2;
  return a3;
}

void SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::RLEKeyIterator::~RLEKeyIterator()
{
}

BOOL SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::RLEKeyIterator::hasMore(uint64_t a1)
{
  return *(_WORD *)(a1 + 26) || *(void *)(a1 + 8) < *(void *)(a1 + 16);
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::RLEKeyIterator::nextKey(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32);
  if (*(_WORD *)(a1 + 26))
  {
    --*(_WORD *)(a1 + 26);
    unsigned __int16 v2 = *(_WORD *)(a1 + 24) + 1;
    *(_WORD *)(a1 + 24) = v2;
  }
  else
  {
    uint64_t v3 = *(unsigned __int16 **)(a1 + 8);
    unint64_t v4 = *(void *)(a1 + 16);
    unsigned __int16 v2 = *v3;
    *(void *)(a1 + 8) = v3 + 1;
    *(_WORD *)(a1 + 24) = v2;
    if ((unint64_t)(v3 + 1) < v4)
    {
      int v5 = (__int16)v3[1];
      if (v5 < 0)
      {
        *(void *)(a1 + 8) = v3 + 2;
        *(_WORD *)(a1 + 26) = v5 & 0x7FFF;
      }
    }
  }
  return v1 | v2;
}

void SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::~RLEKeyHolder()
{
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::Serialize(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, 2);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 8))(a2, *(unsigned __int16 *)(a1 + 8));
  uint64_t v4 = 2 * *(unsigned __int16 *)(a1 + 8);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16);
  return v5(a2, a1 + 10, v4);
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::GetRawCount(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 8);
}

BOOL SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::IsEmpty(uint64_t a1)
{
  return *(_WORD *)(a1 + 8) == 0;
}

void SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::Apply(uint64_t a1, uint64_t a2, int a3, void (*a4)(char *, uint64_t, uint64_t), uint64_t a5)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = *(unsigned __int16 *)(v9 + 8);
  if (v12 > 0x3F) {
    return;
  }
  __int16 v13 = (unsigned __int16 *)(v9 + 10);
  unint64_t v14 = v9 + 10 + 2 * v12;
  bzero((char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  unsigned __int16 v15 = 0;
  __int16 v16 = 0;
LABEL_3:
  uint64_t v17 = 0;
  while (v16)
  {
    --v16;
    ++v15;
LABEL_15:
    *(_DWORD *)&v11[4 * v17++] = v15 | a3;
    if (v17 == a2)
    {
      a4(v11, a2, a5);
      goto LABEL_3;
    }
  }
  if ((unint64_t)v13 < v14)
  {
    unsigned __int16 v15 = *v13;
    if ((unint64_t)(v13 + 1) >= v14)
    {
      __int16 v16 = 0;
      ++v13;
    }
    else
    {
      int v18 = (__int16)v13[1];
      if (v18 < 0) {
        __int16 v16 = v18 & 0x7FFF;
      }
      else {
        __int16 v16 = 0;
      }
      if (v18 < 0) {
        v13 += 2;
      }
      else {
        ++v13;
      }
    }
    goto LABEL_15;
  }
  if (v17) {
    a4(v11, v17, a5);
  }
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::RemoveKey(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  unsigned int v4 = a2 & a3 & 0x7FFF;
  unint64_t v5 = a1 + 10;
  unint64_t v6 = *(unsigned __int16 *)(a1 + 8);
  unint64_t v7 = a1 + 10 + 2 * v6;
  if (v6 >= 3)
  {
    uint64_t v9 = 2 * v6;
    unint64_t v10 = a1 + 10 + 2 * v6;
    uint64_t v8 = (__int16 *)(a1 + 10);
    do
    {
      uint64_t v11 = &v8[v9 >> 2];
      int v12 = *v11;
      if (v12 < 0)
      {
        __int16 v13 = *--v11;
        LOWORD(v12) = v13;
      }
      if (v11 <= v8) {
        break;
      }
      if (v4 == (unsigned __int16)v12)
      {
        uint64_t v8 = v11;
        if ((unint64_t)v11 >= v7) {
          return 0;
        }
        goto LABEL_17;
      }
      if ((unsigned __int16)v12 > v4) {
        unint64_t v10 = (unint64_t)v11;
      }
      else {
        uint64_t v8 = v11;
      }
      uint64_t v9 = v10 - (void)v8;
    }
    while (v10 > (unint64_t)v8 && (unint64_t)v9 > 5);
    if ((unint64_t)v8 >= v7) {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = (__int16 *)(a1 + 10);
    if (v5 >= v7) {
      return 0;
    }
  }
LABEL_17:
  __int16 v16 = v8 + 1;
  unsigned int v15 = (unsigned __int16)*v8;
  if (v4 == v15)
  {
    if ((unint64_t)v16 >= v7) {
      goto LABEL_46;
    }
    goto LABEL_35;
  }
  while (1)
  {
    if ((v15 & 0x8000) == 0)
    {
      uint64_t result = 0;
      if (v4 < v15 || (unint64_t)v16 >= v7) {
        return result;
      }
      goto LABEL_20;
    }
    unsigned int v19 = (unsigned __int16)*(v16 - 2);
    unsigned int v20 = (unsigned __int16)(v19 + (v15 & 0x7FFF));
    if (v4 > v19 && v4 <= v20) {
      break;
    }
    if ((unint64_t)v16 >= v7) {
      return 0;
    }
LABEL_20:
    unsigned int v17 = (unsigned __int16)*v16++;
    unsigned int v15 = v17;
    if (v4 == v17)
    {
      uint64_t v8 = v16 - 1;
      if ((unint64_t)v16 >= v7) {
        goto LABEL_46;
      }
LABEL_35:
      int v22 = (__int16)*v16;
      if ((v22 & 0x80000000) == 0)
      {
        size_t v23 = v7 - (void)v16;
        long long v24 = v16;
LABEL_39:
        memmove(v8, v24, v23);
        __int16 v25 = *(_WORD *)(a1 + 8) - 1;
        goto LABEL_47;
      }
      __int16 *v8 = v15 + 1;
      if ((v22 & 0x7FFF) == 1)
      {
        long long v24 = v8 + 2;
        size_t v23 = v7 - (void)(v8 + 2);
        uint64_t v8 = v16;
        goto LABEL_39;
      }
      __int16 v26 = v22 - 1;
      goto LABEL_41;
    }
  }
  uint64_t v28 = v16 - 1;
  if ((v15 & 0x7FFF) != 1)
  {
    if (v4 == v20)
    {
      *uint64_t v28 = (v15 - 1) | 0x8000;
      return 1;
    }
    if (v4 == v19 + 1)
    {
      *uint64_t v28 = v4 + 1;
      if (!(~v4 + v20)) {
        return 1;
      }
      unint64_t v29 = *(unsigned __int16 *)(a1 + 8);
      if (v29 < 0x3F)
      {
        uint64_t v30 = (uint64_t)((uint64_t)v16 - v5) >> 1;
        if (v29 != v30)
        {
          memmove(v16 + 1, v16, 2 * (v29 - v30));
          LOWORD(v29) = *(_WORD *)(a1 + 8);
        }
        *(_WORD *)(a1 + 8) = v29 + 1;
        __int16 v26 = v20 + ~(_WORD)v4;
LABEL_41:
        __int16 v27 = v26 | 0x8000;
LABEL_42:
        _WORD *v16 = v27;
        return 1;
      }
    }
    else
    {
      *(v16 - 1) = (v4 + ~(_WORD)v19) | 0x8000;
      unint64_t v31 = *(unsigned __int16 *)(a1 + 8);
      if (v31 < 0x3F)
      {
        uint64_t v32 = (uint64_t)((uint64_t)v16 - v5) >> 1;
        if (v31 != v32)
        {
          memmove(v16 + 1, v16, 2 * (v31 - v32));
          LOWORD(v31) = *(_WORD *)(a1 + 8);
        }
        *(_WORD *)(a1 + 8) = v31 + 1;
        _WORD *v16 = v4 + 1;
        __int16 v33 = ~(_WORD)v4;
        __int16 v34 = v20 + ~(_WORD)v4;
        if (!((_WORD)v20 + v33)) {
          return 1;
        }
        unint64_t v35 = *(unsigned __int16 *)(a1 + 8);
        if (v35 < 0x3F)
        {
          ++v16;
          uint64_t v36 = (uint64_t)((uint64_t)v28 - v5 + 4) >> 1;
          if (v35 != v36)
          {
            memmove(v28 + 3, v28 + 2, 2 * (v35 - v36));
            LOWORD(v35) = *(_WORD *)(a1 + 8);
          }
          *(_WORD *)(a1 + 8) = v35 + 1;
          __int16 v27 = v34 | 0x8000;
          goto LABEL_42;
        }
      }
    }
    long long v37 = __si_assert_copy_extra_329();
    long long v38 = v37;
    if (v37) {
      long long v39 = v37;
    }
    else {
      long long v39 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "SIValueSetInternals.h", 649, v39);
    free(v38);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  if ((unint64_t)v16 < v7)
  {
    memmove(v16 - 1, v16, v7 - (void)v16);
    LOWORD(v6) = *(_WORD *)(a1 + 8);
  }
LABEL_46:
  __int16 v25 = v6 - 1;
LABEL_47:
  *(_WORD *)(a1 + 8) = v25;
  return 1;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::CloseKey(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(unsigned __int16 *)(a1 + 8);
  if (!*(_WORD *)(a1 + 8)) {
    return 0;
  }
  unsigned int v4 = a2 & a3 & 0x7FFF;
  unint64_t v5 = (__int16 *)(a1 + 10);
  unint64_t v6 = a1 + 10 + 2 * v3;
  if (v3 < 3)
  {
LABEL_16:
    if ((unint64_t)v5 >= v6)
    {
LABEL_31:
      uint64_t v20 = a1 + 2 * v3;
      uint64_t v17 = *(unsigned __int16 *)(v20 + 8);
      if (*(__int16 *)(v20 + 8) < 0) {
        return (v17 & 0x7FFF) + *(unsigned __int16 *)(v20 + 6);
      }
      else {
        return v17;
      }
    }
  }
  else
  {
    uint64_t v7 = 2 * v3;
    unint64_t v8 = a1 + 10 + 2 * v3;
    while (1)
    {
      uint64_t v9 = &v5[v7 >> 2];
      if (*v9 < 0)
      {
        unsigned int v11 = (unsigned __int16)*--v9;
        unsigned int v10 = v11;
        if (v9 <= v5) {
          goto LABEL_16;
        }
      }
      else
      {
        unsigned int v10 = (unsigned __int16)*v9;
        if (v9 <= v5) {
          goto LABEL_16;
        }
      }
      if (v10 == v4) {
        break;
      }
      if (v10 > v4) {
        unint64_t v8 = (unint64_t)v9;
      }
      else {
        unint64_t v5 = v9;
      }
      uint64_t v7 = v8 - (void)v5;
      if (v8 <= (unint64_t)v5 || (unint64_t)v7 <= 5) {
        goto LABEL_16;
      }
    }
    unint64_t v5 = v9;
    if ((unint64_t)v9 >= v6) {
      goto LABEL_31;
    }
  }
  __int16 v13 = (unsigned __int16 *)v5;
  while (1)
  {
    unsigned int v18 = *v13++;
    uint64_t v17 = v18;
    if (v4 == v18) {
      return a2 & a3 & 0x7FFF;
    }
    if ((v17 & 0x8000) != 0)
    {
      unsigned int v14 = (unsigned __int16)*(v5 - 1);
      unsigned int v15 = v14 + (v17 & 0x7FFF);
      if (v4 >= v14 && v4 <= v15) {
        return a2 & a3 & 0x7FFF;
      }
    }
    else if (v4 < v17)
    {
      return v17;
    }
    unint64_t v5 = (__int16 *)v13;
    if ((unint64_t)v13 >= v6) {
      goto LABEL_31;
    }
  }
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::ContainsKey(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  unsigned int v3 = a2 & a3 & 0x7FFF;
  unsigned int v4 = (__int16 *)(a1 + 10);
  unint64_t v5 = *(unsigned __int16 *)(a1 + 8);
  unint64_t v6 = a1 + 10 + 2 * v5;
  if (v5 < 3)
  {
LABEL_15:
    if ((unint64_t)v4 >= v6) {
      return 0;
    }
  }
  else
  {
    uint64_t v7 = 2 * v5;
    unint64_t v8 = a1 + 10 + 2 * v5;
    while (1)
    {
      uint64_t v9 = &v4[v7 >> 2];
      if (*v9 < 0)
      {
        unsigned int v11 = (unsigned __int16)*--v9;
        unsigned int v10 = v11;
        if (v9 <= v4) {
          goto LABEL_15;
        }
      }
      else
      {
        unsigned int v10 = (unsigned __int16)*v9;
        if (v9 <= v4) {
          goto LABEL_15;
        }
      }
      if (v10 == v3) {
        break;
      }
      if (v10 > v3) {
        unint64_t v8 = (unint64_t)v9;
      }
      else {
        unsigned int v4 = v9;
      }
      uint64_t v7 = v8 - (void)v4;
      if (v8 <= (unint64_t)v4 || (unint64_t)v7 <= 5) {
        goto LABEL_15;
      }
    }
    unsigned int v4 = v9;
    if ((unint64_t)v9 >= v6) {
      return 0;
    }
  }
  unsigned int v13 = (unsigned __int16)*v4;
  if (v3 != v13)
  {
    unsigned int v15 = (unsigned __int16 *)(v4 + 1);
    do
    {
      if ((v13 & 0x8000) != 0)
      {
        unsigned int v17 = *(v15 - 2);
        unsigned int v18 = v17 + (v13 & 0x7FFF);
        if (v3 >= v17 && v3 <= v18) {
          return 1;
        }
        if ((unint64_t)v15 >= v6) {
          return 0;
        }
      }
      else
      {
        uint64_t result = 0;
        if (v3 < v13 || (unint64_t)v15 >= v6) {
          return result;
        }
      }
      unsigned int v16 = *v15++;
      unsigned int v13 = v16;
    }
    while (v3 != v16);
  }
  return 1;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::AddSortedKeysWithContext(uint64_t a1, int **a2, uint64_t a3)
{
  if (*a2 >= a2[1] || (*((_DWORD *)a2 + 5) & **a2) != *((_DWORD *)a2 + 4)) {
    return 0;
  }
  unsigned __int16 v6 = SIValueSet<unsigned int>::FlatContextWithPfx::peek(a2);
  unsigned __int16 v7 = v6;
  unint64_t v8 = *(unsigned __int16 *)(a1 + 8);
  unint64_t v9 = a1 + 10 + 2 * v8;
  unsigned int v10 = (__int16 *)(a1 + 10);
  if (v8 >= 3)
  {
    uint64_t v11 = 2 * v8;
    unint64_t v12 = a1 + 10 + 2 * v8;
    unsigned int v10 = (__int16 *)(a1 + 10);
    do
    {
      unsigned int v13 = &v10[v11 >> 2];
      int v14 = *v13;
      if (v14 < 0)
      {
        __int16 v15 = *--v13;
        LOWORD(v14) = v15;
      }
      if (v13 <= v10) {
        break;
      }
      if ((unsigned __int16)v14 == v6)
      {
        unsigned int v10 = v13;
        break;
      }
      if ((unsigned __int16)v14 > v6) {
        unint64_t v12 = (unint64_t)v13;
      }
      else {
        unsigned int v10 = v13;
      }
      uint64_t v11 = v12 - (void)v10;
    }
    while (v12 > (unint64_t)v10 && (unint64_t)v11 > 5);
  }
  uint64_t v67 = a1;
  int v68 = a1 + 10;
  int v18 = 0;
  uint64_t result = 0;
  unint64_t v19 = a1 + 136;
  uint64_t v20 = v10;
  int v21 = 1;
  uint64_t v72 = a3;
  unint64_t v70 = v19;
  while (2)
  {
    long long v71 = v20;
    LOWORD(v23) = 0;
    uint64_t v24 = 0;
    __int16 v25 = v10;
    while (1)
    {
      uint64_t v27 = v24;
      unsigned __int16 v28 = v23;
      if ((unint64_t)v25 >= v9) {
        break;
      }
LABEL_29:
      unsigned int v23 = (unsigned __int16)*v25;
      if (v23 > v7) {
        break;
      }
      int v30 = 1;
LABEL_53:
      if ((unint64_t)(v25 + 1) >= v9)
      {
        uint64_t v42 = 1;
        uint64_t v24 = 1;
        if (v27) {
          goto LABEL_60;
        }
      }
      else
      {
        int v39 = v25[1];
        uint64_t v40 = v39 & 0x7FFF;
        BOOL v41 = v39 >= 0;
        uint64_t v42 = 2;
        if (v41)
        {
          uint64_t v42 = 1;
          uint64_t v24 = 1;
        }
        else
        {
          uint64_t v24 = v40 + 1;
        }
        if (v27)
        {
LABEL_60:
          unint64_t v43 = v24 + v23;
          if (v27 + (unint64_t)v28 < v23 || v43 < v28) {
            goto LABEL_73;
          }
          uint64_t v45 = v27 - v24 + v28;
          unint64_t v46 = v45 + v23;
          BOOL v47 = v28 > v23;
          if (v28 < v23) {
            unsigned int v23 = v28;
          }
          if (!v47)
          {
            uint64_t v45 = v27;
            unint64_t v46 = v27 + v28;
          }
          if (v43 > v46) {
            uint64_t v24 = v45 + v43 - v46;
          }
          else {
            uint64_t v24 = v45;
          }
        }
      }
      v25 += v42;
      if (v24 + (unint64_t)v23 >= v7) {
        char v26 = v30;
      }
      else {
        char v26 = 0;
      }
      if ((v26 & 1) == 0) {
        goto LABEL_74;
      }
    }
    while (2)
    {
      if (!v27)
      {
        uint64_t v27 = 1;
        unsigned __int16 v28 = v7;
LABEL_39:
        int v31 = 1;
        goto LABEL_40;
      }
      unint64_t v29 = v27 + v28;
      int v30 = 1;
      if (v29 < v7 || (unint64_t)v7 + 1 < v28) {
        goto LABEL_51;
      }
      if (v28 <= v7)
      {
        int v31 = 0;
        if (v29 > v7) {
          goto LABEL_40;
        }
        goto LABEL_38;
      }
      uint64_t v27 = v27 + v28 - 1;
      unint64_t v29 = v27 + v7;
      int v31 = 1;
      unsigned __int16 v28 = v7;
      if (v29 <= v7)
      {
LABEL_38:
        uint64_t v27 = v27 + v7 + 1 - v29;
        goto LABEL_39;
      }
LABEL_40:
      uint64_t v32 = *a2 + 1;
      int v33 = **a2;
      *a2 = v32;
      int v34 = *((_DWORD *)a2 + 5);
      if ((v34 & v33) != *((_DWORD *)a2 + 4))
      {
        uint64_t v51 = __si_assert_copy_extra_329();
        uint64_t v52 = v51;
        uint64_t v53 = "";
        if (v51) {
          uint64_t v53 = v51;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 172, "(key & fMask) == fPfx", v53);
LABEL_92:
        free(v52);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      if (v7 != (unsigned __int16)(v33 & ~(_WORD)v34))
      {
        unint64_t v54 = __si_assert_copy_extra_329();
        unsigned int v55 = v54;
        uint64_t v56 = "";
        if (v54) {
          uint64_t v56 = v54;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 761, "v==key", v56);
        goto LABEL_97;
      }
      if (v31)
      {
        ++result;
      }
      else if (v72)
      {
        uint64_t v35 = result;
        unint64_t v36 = v9;
        SIValueSet<unsigned int>::SIValueSetInsert(*(unsigned int **)(v72 + 8), *(_DWORD *)v72 | v7);
        uint64_t result = v35;
        unint64_t v9 = v36;
        uint64_t v32 = *a2;
      }
      if (v32 < a2[1])
      {
        int v37 = *v32;
        int v38 = *((_DWORD *)a2 + 5);
        if ((v38 & v37) == *((_DWORD *)a2 + 4))
        {
          unsigned __int16 v7 = v37 & ~(_WORD)v38;
          ++v21;
          ++v18;
          if ((unint64_t)v25 < v9) {
            goto LABEL_29;
          }
          continue;
        }
      }
      break;
    }
    int v30 = 0;
    ++v18;
LABEL_51:
    if ((unint64_t)v25 < v9)
    {
      unsigned int v23 = (unsigned __int16)*v25;
      goto LABEL_53;
    }
LABEL_73:
    LOWORD(v23) = v28;
    uint64_t v24 = v27;
LABEL_74:
    if (v24 == 1)
    {
      uint64_t v49 = v71;
      if (v71 >= v25)
      {
        if (v9 + 4 > v70) {
          goto LABEL_114;
        }
        unsigned int v10 = (__int16 *)(v70 - (v9 - (void)v25));
        if ((__int16 *)v9 != v25)
        {
          uint64_t v50 = result;
          memmove((void *)(v70 - (v9 - (void)v25)), v25, v9 - (void)v25);
          uint64_t result = v50;
          uint64_t v49 = v71;
        }
        unint64_t v9 = v70;
        unint64_t v22 = v70;
      }
      else
      {
        unsigned int v10 = v25;
        unint64_t v22 = v70;
      }
      __int16 *v49 = v23;
      uint64_t v20 = v49 + 1;
      if (v30) {
        goto LABEL_22;
      }
      goto LABEL_88;
    }
    uint64_t v20 = v71;
    if (v24)
    {
      int v48 = v71 + 1;
      if (v71 + 1 < v25)
      {
        unsigned int v10 = v25;
        unint64_t v22 = v70;
        goto LABEL_21;
      }
      if (v9 + 4 <= v70)
      {
        unsigned int v10 = (__int16 *)(v70 - (v9 - (void)v25));
        if ((__int16 *)v9 != v25)
        {
          uint64_t v69 = result;
          memmove((void *)(v70 - (v9 - (void)v25)), v25, v9 - (void)v25);
          int v48 = v71 + 1;
          uint64_t result = v69;
        }
        unint64_t v9 = v70;
        unint64_t v22 = v70;
LABEL_21:
        __int16 *v71 = v23;
        v71[1] = (v24 - 1) | 0x8000;
        uint64_t v20 = v48 + 1;
        if (v30)
        {
LABEL_22:
          if ((unint64_t)v20 + v9 - (void)v10 + 4 > v22) {
            goto LABEL_103;
          }
          continue;
        }
LABEL_88:
        __int16 v25 = v10;
LABEL_107:
        unsigned int v10 = v25;
        if (v18 == v21) {
          goto LABEL_108;
        }
        uint64_t v62 = __si_assert_copy_extra_329();
        unsigned int v55 = v62;
        uint64_t v63 = "";
        if (v62) {
          uint64_t v63 = v62;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 811, "popped==peeked", v63);
LABEL_97:
        free(v55);
        if (__valid_fs(-1)) {
LABEL_98:
        }
          uint64_t v57 = 2989;
        else {
          uint64_t v57 = 3072;
        }
        *(_DWORD *)uint64_t v57 = -559038737;
        abort();
      }
LABEL_114:
      uint64_t v64 = __si_assert_copy_extra_329();
      uint64_t v65 = v64;
      if (v64) {
        uint64_t v66 = v64;
      }
      else {
        uint64_t v66 = "";
      }
      __message_assert("%s:%u: Unexpected code path %s ", "SIValueSetInternals.h", 626, v66);
      free(v65);
      goto LABEL_98;
    }
    break;
  }
  unsigned int v10 = v25;
  if (!v30) {
    goto LABEL_107;
  }
LABEL_103:
  if (v18 >= v21)
  {
    long long v58 = __si_assert_copy_extra_329();
    uint64_t v52 = v58;
    int v59 = "";
    if (v58) {
      int v59 = v58;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 810, "popped<peeked", v59);
    goto LABEL_92;
  }
LABEL_108:
  int v60 = v9 - v10;
  if (v9 > (unint64_t)v10)
  {
    uint64_t v61 = result;
    memmove(v20, v10, v9 - (void)v10);
    uint64_t result = v61;
    LODWORD(v20) = v20 + v60;
  }
  *(_WORD *)(v67 + 8) = (v20 - v68) >> 1;
  return result;
}

uint64_t SIValueSet<unsigned int>::FlatContextWithPfx::peek(int **a1)
{
  int v1 = **a1;
  int v2 = *((_DWORD *)a1 + 5);
  if ((v2 & v1) != *((_DWORD *)a1 + 4))
  {
    unsigned int v4 = __si_assert_copy_extra_329();
    unint64_t v5 = v4;
    unsigned __int16 v6 = "";
    if (v4) {
      unsigned __int16 v6 = v4;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 164, "(key & fMask) == fPfx", v6);
    free(v5);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return v1 & ~v2;
}

BOOL SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::AddKey(uint64_t a1, int a2, int a3)
{
  LOWORD(v3) = a3 & a2;
  int v76 = a3 & a2;
  unint64_t v4 = *(unsigned __int16 *)(a1 + 8);
  unint64_t v5 = a1 + 10 + 2 * v4;
  unsigned __int16 v6 = (__int16 *)(a1 + 10);
  if (v4 >= 3)
  {
    uint64_t v7 = 2 * v4;
    unint64_t v8 = a1 + 10 + 2 * v4;
    unsigned __int16 v6 = (__int16 *)(a1 + 10);
    do
    {
      unint64_t v9 = &v6[v7 >> 2];
      int v10 = *v9;
      if (v10 < 0)
      {
        __int16 v11 = *--v9;
        LOWORD(v10) = v11;
      }
      if (v9 <= v6) {
        break;
      }
      if ((unsigned __int16)v10 == (unsigned __int16)v3)
      {
        unsigned __int16 v6 = v9;
        break;
      }
      if ((unsigned __int16)v10 > (unsigned __int16)v3) {
        unint64_t v8 = (unint64_t)v9;
      }
      else {
        unsigned __int16 v6 = v9;
      }
      uint64_t v7 = v8 - (void)v6;
    }
    while (v8 > (unint64_t)v6 && (unint64_t)v7 > 5);
  }
  int v68 = a1 + 10;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  unint64_t v15 = a1 + 136;
  unsigned int v16 = &v76;
  unsigned int v17 = v6;
  int v18 = 1;
  while (2)
  {
    unsigned __int16 v19 = 0;
    uint64_t v20 = 0;
    int v21 = v6;
    while (2)
    {
      if ((unint64_t)v21 >= v5)
      {
        BOOL v41 = v16++;
        if (!v20) {
          goto LABEL_73;
        }
LABEL_61:
        unint64_t v42 = v20 + v19;
        if (v42 < (unsigned __int16)v3 || (unint64_t)(unsigned __int16)v3 + 1 < v19)
        {
          int v40 = 1;
          unsigned int v16 = v41;
          goto LABEL_81;
        }
        unsigned int v43 = v19;
        uint64_t v44 = v20 + v19 - 1;
        unint64_t v45 = v44 + (unsigned __int16)v3;
        if (v19 > (unsigned __int16)v3) {
          unsigned __int16 v19 = v3;
        }
        if (v43 <= (unsigned __int16)v3)
        {
          int v46 = 0;
        }
        else
        {
          uint64_t v20 = v44;
          int v46 = 1;
        }
        if (v43 > (unsigned __int16)v3) {
          unint64_t v42 = v45;
        }
        if (v42 > (unsigned __int16)v3)
        {
          unsigned int v47 = v46;
        }
        else
        {
          uint64_t v20 = v20 + (unsigned __int16)v3 + 1 - v42;
          unsigned int v47 = 1;
        }
        while (*(unsigned __int16 *)v41 == (unsigned __int16)v3)
        {
          v14 += v47;
          if (v41 >= &v76)
          {
            int v40 = 0;
            uint64_t v13 = (v13 + 1);
            goto LABEL_81;
          }
          int v48 = *v16++;
          LOWORD(v3) = v48;
          ++v18;
          uint64_t v13 = (v13 + 1);
          BOOL v41 = v16 - 1;
          if (v20) {
            goto LABEL_61;
          }
LABEL_73:
          uint64_t v20 = 1;
          unsigned __int16 v19 = v3;
          unsigned int v47 = 1;
        }
LABEL_110:
        uint64_t v53 = __si_assert_copy_extra_329();
        unint64_t v54 = v53;
        unsigned int v55 = "";
        if (v53) {
          unsigned int v55 = v53;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 761, "v==key", v55);
LABEL_113:
        free(v54);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      unsigned int v28 = (unsigned __int16)*v21;
      if (v28 <= (unsigned __int16)v3)
      {
        int v40 = 1;
        goto LABEL_83;
      }
      int v31 = v16 + 1;
      uint64_t v32 = v13;
      while (1)
      {
        uint64_t v13 = v32;
        unsigned int v16 = v31;
        int v33 = v31 - 1;
        if (!v20)
        {
          uint64_t v20 = 1;
          unsigned __int16 v19 = v3;
          unsigned int v39 = 1;
          goto LABEL_56;
        }
        unint64_t v34 = v20 + v19;
        if (v34 < (unsigned __int16)v3 || (unint64_t)(unsigned __int16)v3 + 1 < v19) {
          break;
        }
        unsigned int v35 = v19;
        uint64_t v36 = v20 + v19 - 1;
        unint64_t v37 = v36 + (unsigned __int16)v3;
        if (v19 > (unsigned __int16)v3) {
          unsigned __int16 v19 = v3;
        }
        if (v35 <= (unsigned __int16)v3)
        {
          int v38 = 0;
        }
        else
        {
          uint64_t v20 = v36;
          int v38 = 1;
        }
        if (v35 > (unsigned __int16)v3) {
          unint64_t v34 = v37;
        }
        if (v34 > (unsigned __int16)v3)
        {
          unsigned int v39 = v38;
        }
        else
        {
          uint64_t v20 = v20 + (unsigned __int16)v3 + 1 - v34;
          unsigned int v39 = 1;
        }
LABEL_56:
        if (*(unsigned __int16 *)v33 != (unsigned __int16)v3) {
          goto LABEL_110;
        }
        v14 += v39;
        if (v33 >= &v76)
        {
          int v40 = 0;
          uint64_t v13 = (v13 + 1);
          goto LABEL_81;
        }
        int v31 = v16 + 1;
        int v3 = *v16;
        ++v18;
        uint64_t v32 = (v13 + 1);
        if (v28 <= (unsigned __int16)*v16)
        {
          int v40 = 1;
          uint64_t v13 = (v13 + 1);
          goto LABEL_81;
        }
      }
      int v40 = 1;
      unsigned int v16 = v33;
LABEL_81:
      if ((unint64_t)v21 >= v5) {
        goto LABEL_94;
      }
      unsigned int v28 = (unsigned __int16)*v21;
LABEL_83:
      if ((unint64_t)(v21 + 1) >= v5)
      {
        uint64_t v22 = 1;
        uint64_t v23 = 1;
        if (!v20) {
          goto LABEL_35;
        }
      }
      else
      {
        int v49 = v21[1];
        BOOL v50 = v49 >= 0;
        if (v49 < 0) {
          uint64_t v22 = 2;
        }
        else {
          uint64_t v22 = 1;
        }
        if (v50) {
          uint64_t v23 = 1;
        }
        else {
          uint64_t v23 = (v21[1] & 0x7FFF) + 1;
        }
        if (!v20) {
          goto LABEL_35;
        }
      }
      unint64_t v24 = v23 + v28;
      if (v20 + (unint64_t)v19 < v28 || v24 < v19)
      {
LABEL_94:
        LOWORD(v28) = v19;
        uint64_t v23 = v20;
        break;
      }
      uint64_t v26 = v20 - v23 + v19 + v28;
      BOOL v27 = v19 > v28;
      if (v19 < v28) {
        unsigned int v28 = v19;
      }
      if (v27)
      {
        uint64_t v20 = v20 - v23 + v19;
        unint64_t v29 = v26;
      }
      else
      {
        unint64_t v29 = v20 + v19;
      }
      if (v24 > v29) {
        uint64_t v23 = v20 + v24 - v29;
      }
      else {
        uint64_t v23 = v20;
      }
LABEL_35:
      v21 += v22;
      if (v23 + (unint64_t)v28 >= (unsigned __int16)v3) {
        char v30 = v40;
      }
      else {
        char v30 = 0;
      }
      unsigned __int16 v19 = v28;
      uint64_t v20 = v23;
      if (v30) {
        continue;
      }
      break;
    }
    if (v23 == 1)
    {
      if (v17 < v21)
      {
        unsigned __int16 v6 = v21;
      }
      else
      {
        if (v5 + 4 > v15)
        {
LABEL_132:
          uint64_t v65 = __si_assert_copy_extra_329();
          uint64_t v66 = v65;
          if (v65) {
            uint64_t v67 = v65;
          }
          else {
            uint64_t v67 = "";
          }
          __message_assert("%s:%u: Unexpected code path %s ", "SIValueSetInternals.h", 626, v67);
          free(v66);
          goto LABEL_129;
        }
        unsigned __int16 v6 = (__int16 *)(v15 - (v5 - (void)v21));
        if ((__int16 *)v5 == v21)
        {
          unint64_t v5 = v15;
        }
        else
        {
          uint64_t v72 = (void *)(v15 - (v5 - (void)v21));
          unsigned int v74 = v17;
          unint64_t v52 = v15;
          memmove(v72, v21, v5 - (void)v21);
          unsigned __int16 v6 = (__int16 *)v72;
          unsigned int v17 = v74;
          unint64_t v15 = v52;
          unint64_t v5 = v52;
        }
      }
      *v17++ = v28;
      if (!v40) {
        goto LABEL_116;
      }
      goto LABEL_19;
    }
    if (v23)
    {
      uint64_t v51 = v17 + 1;
      if (v17 + 1 < v21)
      {
        unsigned __int16 v6 = v21;
        goto LABEL_107;
      }
      if (v5 + 4 > v15) {
        goto LABEL_132;
      }
      unsigned __int16 v6 = (__int16 *)(v15 - (v5 - (void)v21));
      if ((__int16 *)v5 != v21)
      {
        long long v73 = (void *)(v15 - (v5 - (void)v21));
        long long v75 = v17;
        unint64_t v70 = v17 + 1;
        unint64_t v71 = v15;
        memmove(v73, v21, v5 - (void)v21);
        uint64_t v51 = v70;
        unint64_t v15 = v71;
        unsigned __int16 v6 = (__int16 *)v73;
        unsigned int v17 = v75;
      }
      unint64_t v5 = v15;
LABEL_107:
      *unsigned int v17 = v28;
      v17[1] = (v23 - 1) | 0x8000;
      unsigned int v17 = v51 + 1;
      if (!v40)
      {
LABEL_116:
        int v21 = v6;
        goto LABEL_122;
      }
LABEL_19:
      if ((unint64_t)v17 + v5 - (void)v6 + 4 > v15) {
        goto LABEL_118;
      }
      continue;
    }
    break;
  }
  unsigned __int16 v6 = v21;
  if (!v40)
  {
LABEL_122:
    unsigned __int16 v6 = v21;
    if (v13 == v18) {
      goto LABEL_123;
    }
    uint64_t v61 = __si_assert_copy_extra_329();
    uint64_t v62 = v61;
    uint64_t v63 = "";
    if (v61) {
      uint64_t v63 = v61;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 811, "popped==peeked", v63);
    free(v62);
    if (!__valid_fs(-1))
    {
      uint64_t v64 = 3072;
LABEL_131:
      *(_DWORD *)uint64_t v64 = -559038737;
      abort();
    }
LABEL_129:
    uint64_t v64 = 2989;
    goto LABEL_131;
  }
LABEL_118:
  if ((int)v13 >= v18)
  {
    uint64_t v56 = __si_assert_copy_extra_329();
    unint64_t v54 = v56;
    uint64_t v57 = "";
    if (v56) {
      uint64_t v57 = v56;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 810, "popped<peeked", v57);
    goto LABEL_113;
  }
LABEL_123:
  int v58 = v5 - v6;
  if (v5 > (unint64_t)v6)
  {
    int v59 = (int)v17;
    memmove(v17, v6, v5 - (void)v6);
    LODWORD(v17) = v59 + v58;
  }
  *(_WORD *)(a1 + 8) = (v17 - v68) >> 1;
  return v14 != 0;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::valueIterator(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  *(void *)a3 = &unk_1F1810D60;
  *(void *)(a3 + 8) = a1 + 12;
  *(void *)(a3 + 16) = a1 + 12 + 4 * v3;
  *(void *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = a2;
  return a3;
}

void SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::RLEKeyIterator::~RLEKeyIterator()
{
}

BOOL SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::RLEKeyIterator::hasMore(uint64_t a1)
{
  return *(_DWORD *)(a1 + 28) || *(void *)(a1 + 8) < *(void *)(a1 + 16);
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::RLEKeyIterator::nextKey(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 28);
  unsigned int v1 = *(_DWORD *)(a1 + 32);
  if (v2)
  {
    int v3 = v2 - 1;
    int v4 = *(_DWORD *)(a1 + 24) + 1;
    *(_DWORD *)(a1 + 24) = v4;
    *(_DWORD *)(a1 + 28) = v3;
    return v4 | v1;
  }
  else
  {
    unsigned __int16 v6 = *(int **)(a1 + 8);
    unint64_t v7 = *(void *)(a1 + 16);
    int v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    *(_DWORD *)(a1 + 24) = v8;
    if ((unint64_t)(v6 + 1) < v7 && (int v9 = v6[1], v9 < 0))
    {
      *(void *)(a1 + 8) = v6 + 2;
      *(_DWORD *)(a1 + 28) = v9 & 0x7FFFFFFF;
      return v8 | v1;
    }
    else
    {
      return v8 | v1;
    }
  }
}

void SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::~RLEKeyHolder()
{
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::Serialize(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, 4);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 8))(a2, *(unsigned int *)(a1 + 8));
  uint64_t v4 = 4 * *(unsigned int *)(a1 + 8);
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16);
  return v5(a2, a1 + 12, v4);
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::GetRawCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

BOOL SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::IsEmpty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) == 0;
}

void SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::Apply(uint64_t a1, uint64_t a2, int a3, void (*a4)(char *, uint64_t, uint64_t), uint64_t a5)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  __int16 v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(unsigned int *)(v9 + 8);
  if (v12 > 0x3F) {
    return;
  }
  uint64_t v13 = (int *)(v9 + 12);
  unint64_t v14 = v9 + 12 + 4 * v12;
  bzero((char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  int v15 = 0;
  int v16 = 0;
LABEL_3:
  uint64_t v17 = 0;
  while (v16)
  {
    --v16;
    ++v15;
LABEL_15:
    *(_DWORD *)&v11[4 * v17++] = v15 | a3;
    if (v17 == a2)
    {
      a4(v11, a2, a5);
      goto LABEL_3;
    }
  }
  if ((unint64_t)v13 < v14)
  {
    int v18 = v13 + 1;
    int v15 = *v13;
    if ((unint64_t)(v13 + 1) >= v14)
    {
      int v16 = 0;
      ++v13;
    }
    else
    {
      if (*v18 < 0) {
        v13 += 2;
      }
      else {
        ++v13;
      }
      if (*v18 < 0) {
        int v16 = *v18 & 0x7FFFFFFF;
      }
      else {
        int v16 = 0;
      }
    }
    goto LABEL_15;
  }
  if (v17) {
    a4(v11, v17, a5);
  }
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::RemoveKey(uint64_t a1, int a2, int a3)
{
  unsigned int v4 = a2 & a3 & 0x7FFFFFFF;
  unint64_t v5 = a1 + 12;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  unint64_t v7 = a1 + 12 + 4 * v6;
  if (v6 >= 3)
  {
    uint64_t v9 = 4 * v6;
    unint64_t v10 = a1 + 12 + 4 * v6;
    int v8 = (unsigned int *)(a1 + 12);
    do
    {
      __int16 v11 = &v8[v9 >> 3];
      unsigned int v12 = *v11;
      if ((*v11 & 0x80000000) != 0)
      {
        unsigned int v13 = *--v11;
        unsigned int v12 = v13;
      }
      if (v11 <= v8) {
        break;
      }
      if (v12 == v4)
      {
        int v8 = v11;
        if ((unint64_t)v11 >= v7) {
          return 0;
        }
        goto LABEL_17;
      }
      if (v12 > v4) {
        unint64_t v10 = (unint64_t)v11;
      }
      else {
        int v8 = v11;
      }
      uint64_t v9 = v10 - (void)v8;
    }
    while (v10 > (unint64_t)v8 && (unint64_t)v9 > 0xB);
    if ((unint64_t)v8 >= v7) {
      return 0;
    }
  }
  else
  {
    int v8 = (unsigned int *)(a1 + 12);
    if (v5 >= v7) {
      return 0;
    }
  }
LABEL_17:
  int v16 = v8 + 1;
  unsigned int v15 = *v8;
  if (*v8 == v4)
  {
    if ((unint64_t)v16 >= v7) {
      goto LABEL_43;
    }
    goto LABEL_35;
  }
  while (1)
  {
    if ((v15 & 0x80000000) == 0)
    {
      uint64_t result = 0;
      if (v15 > v4 || (unint64_t)v16 >= v7) {
        return result;
      }
      goto LABEL_20;
    }
    unsigned int v19 = *(v16 - 2);
    unsigned int v20 = v19 + (v15 & 0x7FFFFFFF);
    if (v4 > v19 && v4 <= v20) {
      break;
    }
    if ((unint64_t)v16 >= v7) {
      return 0;
    }
LABEL_20:
    unsigned int v17 = *v16++;
    unsigned int v15 = v17;
    if (v17 == v4)
    {
      int v8 = v16 - 1;
      if ((unint64_t)v16 >= v7) {
        goto LABEL_43;
      }
LABEL_35:
      unsigned int v22 = *v16;
      if ((*v16 & 0x80000000) == 0)
      {
        size_t v23 = v7 - (void)v16;
        unint64_t v24 = v16;
LABEL_39:
        memmove(v8, v24, v23);
        int v25 = *(_DWORD *)(a1 + 8) - 1;
        goto LABEL_44;
      }
      unsigned int *v8 = v4 + 1;
      if ((v22 & 0x7FFFFFFF) == 1)
      {
        unint64_t v24 = v8 + 2;
        size_t v23 = v7 - (void)(v8 + 2);
        int v8 = v16;
        goto LABEL_39;
      }
      unsigned int v27 = (v22 - 1) | 0x80000000;
LABEL_48:
      unsigned int *v16 = v27;
      return 1;
    }
  }
  uint64_t v26 = v16 - 1;
  if ((v15 & 0x7FFFFFFF) != 1)
  {
    if (v4 == v20)
    {
      *uint64_t v26 = (v15 - 1) | 0x80000000;
      return 1;
    }
    if (v4 == v19 + 1)
    {
      *uint64_t v26 = v4 + 1;
      unsigned int v28 = v20 + ~v4;
      if (!v28) {
        return 1;
      }
      uint64_t v29 = *(unsigned int *)(a1 + 8);
      if (v29 < 0x3F)
      {
        uint64_t v30 = (uint64_t)((uint64_t)v16 - v5) >> 2;
        if (v29 != v30)
        {
          uint64_t v31 = v29 - v30;
          uint64_t v32 = v16 + 1;
LABEL_63:
          memmove(v32, v16, 4 * v31);
          LODWORD(v29) = *(_DWORD *)(a1 + 8);
          goto LABEL_64;
        }
        goto LABEL_64;
      }
    }
    else
    {
      *(v16 - 1) = (v4 + ~v19) | 0x80000000;
      uint64_t v33 = *(unsigned int *)(a1 + 8);
      if (v33 < 0x3F)
      {
        uint64_t v34 = (uint64_t)((uint64_t)v16 - v5) >> 2;
        if (v33 != v34)
        {
          memmove(v16 + 1, v16, 4 * (v33 - v34));
          LODWORD(v33) = *(_DWORD *)(a1 + 8);
        }
        *(_DWORD *)(a1 + 8) = v33 + 1;
        unsigned int *v16 = v4 + 1;
        unsigned int v28 = v20 + ~v4;
        if (!v28) {
          return 1;
        }
        uint64_t v29 = *(unsigned int *)(a1 + 8);
        if (v29 < 0x3F)
        {
          ++v16;
          uint64_t v35 = (uint64_t)((uint64_t)v26 - v5 + 8) >> 2;
          if (v29 != v35)
          {
            uint64_t v31 = v29 - v35;
            uint64_t v32 = v26 + 3;
            goto LABEL_63;
          }
LABEL_64:
          *(_DWORD *)(a1 + 8) = v29 + 1;
          unsigned int v27 = v28 | 0x80000000;
          goto LABEL_48;
        }
      }
    }
    uint64_t v36 = __si_assert_copy_extra_329();
    unint64_t v37 = v36;
    if (v36) {
      int v38 = v36;
    }
    else {
      int v38 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "SIValueSetInternals.h", 649, v38);
    free(v37);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  if ((unint64_t)v16 < v7)
  {
    memmove(v16 - 1, v16, v7 - (void)v16);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
LABEL_43:
  int v25 = v6 - 1;
LABEL_44:
  *(_DWORD *)(a1 + 8) = v25;
  return 1;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::CloseKey(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (!v3) {
    return 0;
  }
  unsigned int v4 = a2 & a3 & 0x7FFFFFFF;
  unint64_t v5 = (unsigned int *)(a1 + 12);
  unint64_t v6 = a1 + 12 + 4 * v3;
  if (v3 >= 3)
  {
    uint64_t v7 = 4 * v3;
    unint64_t v8 = a1 + 12 + 4 * v3;
    do
    {
      uint64_t v9 = &v5[v7 >> 3];
      unsigned int v10 = *v9;
      if ((*v9 & 0x80000000) != 0)
      {
        unsigned int v11 = *--v9;
        unsigned int v10 = v11;
      }
      if (v9 <= v5) {
        break;
      }
      if (v10 == v4)
      {
        unint64_t v5 = v9;
        if ((unint64_t)v9 < v6) {
          goto LABEL_16;
        }
        goto LABEL_30;
      }
      if (v10 > v4) {
        unint64_t v8 = (unint64_t)v9;
      }
      else {
        unint64_t v5 = v9;
      }
      uint64_t v7 = v8 - (void)v5;
    }
    while (v8 > (unint64_t)v5 && (unint64_t)v7 > 0xB);
  }
  if ((unint64_t)v5 >= v6)
  {
LABEL_30:
    uint64_t v17 = *(unsigned int *)(a1 + 4 * (v3 - 1) + 12);
    if ((v17 & 0x80000000) != 0) {
      return *(_DWORD *)(a1 + 4 * (v3 - 2) + 12) + (v17 & 0x7FFFFFFF);
    }
    else {
      return v17;
    }
  }
  else
  {
LABEL_16:
    unsigned int v13 = v5;
    while (1)
    {
      unsigned int v18 = *v13++;
      uint64_t v17 = v18;
      if (v18 == v4) {
        return a2 & a3 & 0x7FFFFFFF;
      }
      if ((v17 & 0x80000000) != 0)
      {
        unsigned int v14 = *(v5 - 1);
        unsigned int v15 = v14 + (v17 & 0x7FFFFFFF);
        if (v4 >= v14 && v4 <= v15) {
          return a2 & a3 & 0x7FFFFFFF;
        }
      }
      else if (v17 > v4)
      {
        return v17;
      }
      unint64_t v5 = v13;
      if ((unint64_t)v13 >= v6) {
        goto LABEL_30;
      }
    }
  }
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::ContainsKey(uint64_t a1, int a2, int a3)
{
  unsigned int v3 = a2 & a3 & 0x7FFFFFFF;
  unsigned int v4 = (unsigned int *)(a1 + 12);
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  unint64_t v6 = a1 + 12 + 4 * v5;
  if (v5 >= 3)
  {
    uint64_t v7 = 4 * v5;
    unint64_t v8 = a1 + 12 + 4 * v5;
    do
    {
      uint64_t v9 = &v4[v7 >> 3];
      unsigned int v10 = *v9;
      if ((*v9 & 0x80000000) != 0)
      {
        unsigned int v11 = *--v9;
        unsigned int v10 = v11;
      }
      if (v9 <= v4) {
        break;
      }
      if (v10 == v3)
      {
        unsigned int v4 = v9;
        if ((unint64_t)v9 < v6) {
          goto LABEL_15;
        }
        return 0;
      }
      if (v10 > v3) {
        unint64_t v8 = (unint64_t)v9;
      }
      else {
        unsigned int v4 = v9;
      }
      uint64_t v7 = v8 - (void)v4;
    }
    while (v8 > (unint64_t)v4 && (unint64_t)v7 > 0xB);
  }
  if ((unint64_t)v4 >= v6) {
    return 0;
  }
LABEL_15:
  unsigned int v13 = *v4;
  if (*v4 != v3)
  {
    unsigned int v15 = v4 + 1;
    do
    {
      if ((v13 & 0x80000000) != 0)
      {
        unsigned int v17 = *(v15 - 2);
        unsigned int v18 = v17 + (v13 & 0x7FFFFFFF);
        if (v3 >= v17 && v3 <= v18) {
          return 1;
        }
        if ((unint64_t)v15 >= v6) {
          return 0;
        }
      }
      else
      {
        uint64_t result = 0;
        if (v13 > v3 || (unint64_t)v15 >= v6) {
          return result;
        }
      }
      unsigned int v16 = *v15++;
      unsigned int v13 = v16;
    }
    while (v16 != v3);
  }
  return 1;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::AddSortedKeysWithContext(uint64_t a1, int **a2, uint64_t a3)
{
  if (*a2 >= a2[1] || (*((_DWORD *)a2 + 5) & **a2) != *((_DWORD *)a2 + 4)) {
    return 0;
  }
  unsigned int v6 = SIValueSet<unsigned int>::FlatContextWithPfx::peek(a2);
  unsigned int v7 = v6;
  unint64_t v8 = (unsigned int *)(a1 + 12);
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  unint64_t v10 = a1 + 12 + 4 * v9;
  uint64_t v67 = a1 + 12;
  if (v9 >= 3)
  {
    uint64_t v11 = 4 * v9;
    unint64_t v12 = a1 + 12 + 4 * v9;
    do
    {
      unsigned int v13 = (char *)&v8[v11 >> 3];
      unsigned int v14 = *(_DWORD *)v13;
      if ((*(_DWORD *)v13 & 0x80000000) != 0)
      {
        unsigned int v15 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        unsigned int v14 = v15;
      }
      if (v13 <= (char *)v8) {
        break;
      }
      if (v14 == v6)
      {
        unint64_t v8 = (unsigned int *)v13;
        break;
      }
      if (v14 > v6) {
        unint64_t v12 = (unint64_t)v13;
      }
      else {
        unint64_t v8 = (unsigned int *)v13;
      }
      uint64_t v11 = v12 - (void)v8;
    }
    while (v12 > (unint64_t)v8 && (unint64_t)v11 > 0xB);
  }
  uint64_t v71 = a3;
  int v18 = 0;
  uint64_t result = 0;
  uint64_t v66 = a1;
  unint64_t v19 = a1 + 264;
  unsigned int v20 = v8;
  int v21 = 1;
  unint64_t v69 = v19;
  while (2)
  {
    unint64_t v70 = v20;
    unsigned int v23 = 0;
    uint64_t v24 = 0;
    int v25 = v8;
    while (1)
    {
      uint64_t v27 = v24;
      unsigned int v28 = v23;
      if ((unint64_t)v25 >= v10) {
        break;
      }
LABEL_29:
      unsigned int v23 = *v25;
      if (v7 < *v25) {
        break;
      }
      int v30 = 1;
LABEL_53:
      if ((unint64_t)(v25 + 1) >= v10)
      {
        uint64_t v42 = 1;
        uint64_t v24 = 1;
        if (v27) {
          goto LABEL_60;
        }
      }
      else
      {
        signed int v39 = v25[1];
        uint64_t v40 = v39 & 0x7FFFFFFF;
        BOOL v41 = v39 >= 0;
        uint64_t v42 = 2;
        if (v41)
        {
          uint64_t v42 = 1;
          uint64_t v24 = 1;
        }
        else
        {
          uint64_t v24 = v40 + 1;
        }
        if (v27)
        {
LABEL_60:
          unint64_t v43 = v24 + v23;
          if (v27 + (unint64_t)v28 < v23 || v43 < v28) {
            goto LABEL_73;
          }
          uint64_t v45 = v27 - v24 + v28;
          unint64_t v46 = v45 + v23;
          BOOL v47 = v28 > v23;
          if (v28 < v23) {
            unsigned int v23 = v28;
          }
          if (!v47)
          {
            uint64_t v45 = v27;
            unint64_t v46 = v27 + v28;
          }
          if (v43 > v46) {
            uint64_t v24 = v45 + v43 - v46;
          }
          else {
            uint64_t v24 = v45;
          }
        }
      }
      v25 += v42;
      if (v24 + (unint64_t)v23 >= v7) {
        char v26 = v30;
      }
      else {
        char v26 = 0;
      }
      if ((v26 & 1) == 0) {
        goto LABEL_74;
      }
    }
    while (2)
    {
      if (!v27)
      {
        uint64_t v27 = 1;
        unsigned int v28 = v7;
LABEL_39:
        int v31 = 1;
        goto LABEL_40;
      }
      unint64_t v29 = v27 + v28;
      int v30 = 1;
      if (v29 < v7 || (unint64_t)v7 + 1 < v28) {
        goto LABEL_51;
      }
      if (v28 <= v7)
      {
        int v31 = 0;
        if (v29 > v7) {
          goto LABEL_40;
        }
        goto LABEL_38;
      }
      uint64_t v27 = v27 + v28 - 1;
      unint64_t v29 = v27 + v7;
      int v31 = 1;
      unsigned int v28 = v7;
      if (v29 <= v7)
      {
LABEL_38:
        uint64_t v27 = v27 + v7 + 1 - v29;
        goto LABEL_39;
      }
LABEL_40:
      uint64_t v32 = *a2 + 1;
      int v33 = **a2;
      *a2 = v32;
      int v34 = *((_DWORD *)a2 + 5);
      if ((v34 & v33) != *((_DWORD *)a2 + 4))
      {
        BOOL v50 = __si_assert_copy_extra_329();
        uint64_t v51 = v50;
        unint64_t v52 = "";
        if (v50) {
          unint64_t v52 = v50;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 172, "(key & fMask) == fPfx", v52);
LABEL_92:
        free(v51);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      if ((v33 & ~v34) != v7)
      {
        uint64_t v53 = __si_assert_copy_extra_329();
        unint64_t v54 = v53;
        unsigned int v55 = "";
        if (v53) {
          unsigned int v55 = v53;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 761, "v==key", v55);
        goto LABEL_97;
      }
      if (v31)
      {
        ++result;
      }
      else if (v71)
      {
        uint64_t v35 = result;
        unint64_t v36 = v10;
        SIValueSet<unsigned int>::SIValueSetInsert(*(unsigned int **)(v71 + 8), *(_DWORD *)v71 | v7);
        uint64_t result = v35;
        unint64_t v10 = v36;
        uint64_t v32 = *a2;
      }
      if (v32 < a2[1])
      {
        int v37 = *v32;
        int v38 = *((_DWORD *)a2 + 5);
        if ((v38 & v37) == *((_DWORD *)a2 + 4))
        {
          unsigned int v7 = v37 & ~v38;
          ++v21;
          ++v18;
          if ((unint64_t)v25 < v10) {
            goto LABEL_29;
          }
          continue;
        }
      }
      break;
    }
    int v30 = 0;
    ++v18;
LABEL_51:
    if ((unint64_t)v25 < v10)
    {
      unsigned int v23 = *v25;
      goto LABEL_53;
    }
LABEL_73:
    unsigned int v23 = v28;
    uint64_t v24 = v27;
LABEL_74:
    if (v24 == 1)
    {
      if (v70 >= v25)
      {
        unint64_t v22 = v69;
        if (v10 + 8 > v69) {
          goto LABEL_114;
        }
        unint64_t v8 = (unsigned int *)(v69 - (v10 - (void)v25));
        if ((unsigned int *)v10 != v25)
        {
          uint64_t v49 = result;
          memmove((void *)(v69 - (v10 - (void)v25)), v25, v10 - (void)v25);
          uint64_t result = v49;
          unint64_t v22 = v69;
        }
        unint64_t v10 = v22;
      }
      else
      {
        unint64_t v8 = v25;
        unint64_t v22 = v69;
      }
      *unint64_t v70 = v23;
      unsigned int v20 = v70 + 1;
      if (v30) {
        goto LABEL_22;
      }
      goto LABEL_88;
    }
    unsigned int v20 = v70;
    if (v24)
    {
      int v48 = v70 + 1;
      if (v70 + 1 < v25)
      {
        unint64_t v8 = v25;
        goto LABEL_21;
      }
      if (v10 + 8 <= v69)
      {
        unint64_t v8 = (unsigned int *)(v69 - (v10 - (void)v25));
        if ((unsigned int *)v10 != v25)
        {
          uint64_t v68 = result;
          memmove((void *)(v69 - (v10 - (void)v25)), v25, v10 - (void)v25);
          int v48 = v70 + 1;
          uint64_t result = v68;
        }
        unint64_t v10 = v69;
LABEL_21:
        *unint64_t v70 = v23;
        v70[1] = (v24 - 1) | 0x80000000;
        unint64_t v22 = v69;
        unsigned int v20 = v48 + 1;
        if (v30)
        {
LABEL_22:
          if ((unint64_t)v20 + v10 - (void)v8 + 8 > v22) {
            goto LABEL_103;
          }
          continue;
        }
LABEL_88:
        int v25 = v8;
LABEL_107:
        unint64_t v8 = v25;
        if (v18 == v21) {
          goto LABEL_108;
        }
        uint64_t v61 = __si_assert_copy_extra_329();
        unint64_t v54 = v61;
        uint64_t v62 = "";
        if (v61) {
          uint64_t v62 = v61;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 811, "popped==peeked", v62);
LABEL_97:
        free(v54);
        if (__valid_fs(-1)) {
LABEL_98:
        }
          uint64_t v56 = 2989;
        else {
          uint64_t v56 = 3072;
        }
        *(_DWORD *)uint64_t v56 = -559038737;
        abort();
      }
LABEL_114:
      uint64_t v63 = __si_assert_copy_extra_329();
      uint64_t v64 = v63;
      if (v63) {
        uint64_t v65 = v63;
      }
      else {
        uint64_t v65 = "";
      }
      __message_assert("%s:%u: Unexpected code path %s ", "SIValueSetInternals.h", 626, v65);
      free(v64);
      goto LABEL_98;
    }
    break;
  }
  unint64_t v8 = v25;
  if (!v30) {
    goto LABEL_107;
  }
LABEL_103:
  if (v18 >= v21)
  {
    uint64_t v57 = __si_assert_copy_extra_329();
    uint64_t v51 = v57;
    int v58 = "";
    if (v57) {
      int v58 = v57;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 810, "popped<peeked", v58);
    goto LABEL_92;
  }
LABEL_108:
  unint64_t v59 = v10 - (void)v8;
  if (v10 > (unint64_t)v8)
  {
    uint64_t v60 = result;
    memmove(v20, v8, v10 - (void)v8);
    uint64_t result = v60;
    unsigned int v20 = (unsigned int *)((char *)v20 + v59);
  }
  *(_DWORD *)(v66 + 8) = ((unint64_t)v20 - v67) >> 2;
  return result;
}

BOOL SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::AddKey(uint64_t a1, int a2, int a3)
{
  unsigned int v3 = a3 & a2;
  int v81 = a3 & a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = a1 + 12 + 4 * v4;
  if (v4 >= 3)
  {
    uint64_t v7 = 4 * v4;
    unint64_t v8 = a1 + 12 + 4 * v4;
    unsigned int v6 = (unsigned int *)(a1 + 12);
    do
    {
      uint64_t v9 = &v6[v7 >> 3];
      unsigned int v10 = *v9;
      if ((*v9 & 0x80000000) != 0)
      {
        unsigned int v11 = *--v9;
        unsigned int v10 = v11;
      }
      if (v9 <= v6) {
        break;
      }
      if (v10 == v3)
      {
        unsigned int v6 = v9;
        break;
      }
      if (v10 > v3) {
        unint64_t v8 = (unint64_t)v9;
      }
      else {
        unsigned int v6 = v9;
      }
      uint64_t v7 = v8 - (void)v6;
    }
    while (v8 > (unint64_t)v6 && (unint64_t)v7 > 0xB);
  }
  else
  {
    unsigned int v6 = (unsigned int *)(a1 + 12);
  }
  uint64_t v73 = a1 + 12;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  unint64_t v15 = a1 + 264;
  unsigned int v16 = &v81;
  unsigned int v17 = v6;
  int v18 = 1;
  while (2)
  {
    unsigned int v19 = 0;
    uint64_t v20 = 0;
    int v21 = v6;
    while (1)
    {
      if ((unint64_t)v21 >= v5)
      {
        uint64_t v44 = v16++;
        if (!v20)
        {
          while (1)
          {
            uint64_t v20 = 1;
            unsigned int v19 = v3;
            unsigned int v51 = 1;
LABEL_82:
            if (*v44 != v3) {
              break;
            }
            v14 += v51;
            if (v44 >= &v81)
            {
              int v43 = 0;
              uint64_t v34 = (v13 + 1);
              if ((unint64_t)v21 >= v5) {
                goto LABEL_105;
              }
              goto LABEL_95;
            }
            unsigned int v52 = *v16++;
            unsigned int v3 = v52;
            ++v18;
            uint64_t v13 = (v13 + 1);
            uint64_t v44 = v16 - 1;
            if (v20) {
              goto LABEL_67;
            }
          }
LABEL_122:
          int v58 = __si_assert_copy_extra_329();
          unint64_t v59 = v58;
          uint64_t v60 = "";
          if (v58) {
            uint64_t v60 = v58;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 761, "v==key", v60);
LABEL_125:
          free(v59);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
LABEL_67:
        unint64_t v45 = v3 + 1;
        unint64_t v46 = v20 + v19;
        if (v46 >= v3 && v45 >= v19)
        {
          BOOL v48 = v19 > v3;
          if (v19 <= v3)
          {
            int v49 = 0;
          }
          else
          {
            unsigned int v19 = v3;
            uint64_t v20 = v46 - 1;
            int v49 = 1;
          }
          if (v48) {
            unint64_t v46 = v46 - 1 + v3;
          }
          uint64_t v50 = v20 + v45 - v46;
          if (v46 > v3)
          {
            unsigned int v51 = v49;
          }
          else
          {
            uint64_t v20 = v50;
            unsigned int v51 = 1;
          }
          goto LABEL_82;
        }
        int v43 = 1;
        unsigned int v16 = v44;
        uint64_t v34 = v13;
        if ((unint64_t)v21 >= v5) {
          goto LABEL_105;
        }
      }
      else
      {
        unsigned int v29 = *v21;
        if (v3 >= *v21)
        {
          int v43 = 1;
          goto LABEL_96;
        }
        int v33 = v16 + 1;
        while (1)
        {
          uint64_t v34 = v13;
          unsigned int v16 = v33;
          uint64_t v35 = v33 - 1;
          if (v20)
          {
            unint64_t v36 = v3 + 1;
            unint64_t v37 = v20 + v19;
            if (v37 < v3 || v36 < v19)
            {
              int v43 = 1;
              unsigned int v16 = v35;
              if ((unint64_t)v21 >= v5) {
                goto LABEL_105;
              }
              goto LABEL_95;
            }
            BOOL v39 = v19 > v3;
            if (v19 <= v3)
            {
              int v40 = 0;
            }
            else
            {
              unsigned int v19 = v3;
              uint64_t v20 = v37 - 1;
              int v40 = 1;
            }
            if (v39) {
              unint64_t v37 = v37 - 1 + v3;
            }
            uint64_t v41 = v20 + v36 - v37;
            if (v37 > v3)
            {
              unsigned int v42 = v40;
            }
            else
            {
              uint64_t v20 = v41;
              unsigned int v42 = 1;
            }
          }
          else
          {
            uint64_t v20 = 1;
            unsigned int v19 = v3;
            unsigned int v42 = 1;
          }
          if (*v35 != v3) {
            goto LABEL_122;
          }
          v14 += v42;
          if (v35 >= &v81) {
            break;
          }
          int v33 = v16 + 1;
          unsigned int v3 = *v16;
          ++v18;
          uint64_t v13 = (v13 + 1);
          if (*v16 >= v29)
          {
            int v43 = 1;
            goto LABEL_92;
          }
        }
        int v43 = 0;
LABEL_92:
        uint64_t v34 = (v34 + 1);
        if ((unint64_t)v21 >= v5)
        {
LABEL_105:
          uint64_t v13 = v34;
          goto LABEL_106;
        }
      }
LABEL_95:
      unsigned int v29 = *v21;
      uint64_t v13 = v34;
LABEL_96:
      if ((unint64_t)(v21 + 1) < v5) {
        break;
      }
      uint64_t v22 = 1;
      uint64_t v23 = 1;
      if (v20) {
        goto LABEL_23;
      }
LABEL_39:
      v21 += v22;
      if (v23 + (unint64_t)v29 >= v3) {
        char v32 = v43;
      }
      else {
        char v32 = 0;
      }
      unsigned int v19 = v29;
      uint64_t v20 = v23;
      if ((v32 & 1) == 0) {
        goto LABEL_107;
      }
    }
    int v53 = v21[1];
    uint64_t v54 = v53 & 0x7FFFFFFF;
    BOOL v55 = v53 >= 0;
    if (v53 < 0) {
      uint64_t v22 = 2;
    }
    else {
      uint64_t v22 = 1;
    }
    if (v55) {
      uint64_t v23 = 1;
    }
    else {
      uint64_t v23 = v54 + 1;
    }
    if (!v20) {
      goto LABEL_39;
    }
LABEL_23:
    unint64_t v24 = v23 + v29;
    unint64_t v25 = v20 + v19;
    if (v25 >= v29 && v24 >= v19)
    {
      uint64_t v27 = v20 - v23 + v19 + v29;
      BOOL v28 = v19 > v29;
      if (v19 < v29) {
        unsigned int v29 = v19;
      }
      if (v28) {
        uint64_t v30 = v20 - v23 + v19;
      }
      else {
        uint64_t v30 = v20;
      }
      if (v28) {
        unint64_t v31 = v27;
      }
      else {
        unint64_t v31 = v25;
      }
      if (v24 > v31) {
        uint64_t v23 = v30 + v24 - v31;
      }
      else {
        uint64_t v23 = v30;
      }
      goto LABEL_39;
    }
LABEL_106:
    unsigned int v29 = v19;
    uint64_t v23 = v20;
LABEL_107:
    if (v23 == 1)
    {
      if (v17 < v21)
      {
        unsigned int v6 = v21;
        goto LABEL_19;
      }
      if (v5 + 8 <= v15)
      {
        unsigned int v6 = (unsigned int *)(v15 - (v5 - (void)v21));
        if ((unsigned int *)v5 == v21)
        {
          unint64_t v5 = v15;
        }
        else
        {
          long long v77 = (void *)(v15 - (v5 - (void)v21));
          long long v79 = v17;
          unint64_t v57 = v15;
          memmove(v77, v21, v5 - (void)v21);
          unsigned int v6 = (unsigned int *)v77;
          unsigned int v17 = v79;
          unint64_t v15 = v57;
          unint64_t v5 = v57;
        }
LABEL_19:
        *v17++ = v29;
        if (!v43) {
          goto LABEL_128;
        }
        goto LABEL_20;
      }
LABEL_144:
      unint64_t v70 = __si_assert_copy_extra_329();
      uint64_t v71 = v70;
      if (v70) {
        uint64_t v72 = v70;
      }
      else {
        uint64_t v72 = "";
      }
      __message_assert("%s:%u: Unexpected code path %s ", "SIValueSetInternals.h", 626, v72);
      free(v71);
LABEL_141:
      uint64_t v69 = 2989;
LABEL_143:
      *(_DWORD *)uint64_t v69 = -559038737;
      abort();
    }
    if (v23)
    {
      uint64_t v56 = v17 + 1;
      if (v17 + 1 < v21)
      {
        unsigned int v6 = v21;
        goto LABEL_119;
      }
      if (v5 + 8 > v15) {
        goto LABEL_144;
      }
      unsigned int v6 = (unsigned int *)(v15 - (v5 - (void)v21));
      if ((unsigned int *)v5 != v21)
      {
        long long v78 = (void *)(v15 - (v5 - (void)v21));
        long long v80 = v17;
        long long v75 = v17 + 1;
        unint64_t v76 = v15;
        memmove(v78, v21, v5 - (void)v21);
        uint64_t v56 = v75;
        unint64_t v15 = v76;
        unsigned int v6 = (unsigned int *)v78;
        unsigned int v17 = v80;
      }
      unint64_t v5 = v15;
LABEL_119:
      *unsigned int v17 = v29;
      v17[1] = (v23 - 1) | 0x80000000;
      unsigned int v17 = v56 + 1;
      if (!v43)
      {
LABEL_128:
        int v21 = v6;
        goto LABEL_134;
      }
LABEL_20:
      if ((unint64_t)v17 + v5 - (void)v6 + 8 > v15) {
        goto LABEL_130;
      }
      continue;
    }
    break;
  }
  unsigned int v6 = v21;
  if (v43)
  {
LABEL_130:
    if ((int)v13 >= v18)
    {
      uint64_t v61 = __si_assert_copy_extra_329();
      unint64_t v59 = v61;
      uint64_t v62 = "";
      if (v61) {
        uint64_t v62 = v61;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 810, "popped<peeked", v62);
      goto LABEL_125;
    }
  }
  else
  {
LABEL_134:
    unsigned int v6 = v21;
    if (v13 != v18)
    {
      uint64_t v66 = __si_assert_copy_extra_329();
      uint64_t v67 = v66;
      uint64_t v68 = "";
      if (v66) {
        uint64_t v68 = v66;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 811, "popped==peeked", v68);
      free(v67);
      if (__valid_fs(-1)) {
        goto LABEL_141;
      }
      uint64_t v69 = 3072;
      goto LABEL_143;
    }
  }
  unint64_t v63 = v5 - (void)v6;
  if (v5 > (unint64_t)v6)
  {
    uint64_t v64 = v17;
    memmove(v17, v6, v5 - (void)v6);
    unsigned int v17 = (unsigned int *)((char *)v64 + v63);
  }
  *(_DWORD *)(a1 + 8) = ((unint64_t)v17 - v73) >> 2;
  return v14 != 0;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::valueIterator(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)a3 = &unk_1F1810EA0;
  *(void *)(a3 + 8) = a1 + 16;
  *(void *)(a3 + 16) = a1 + 16 + 8 * v3;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + 40) = a2;
  return a3;
}

void SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::RLEKeyIterator::~RLEKeyIterator()
{
}

BOOL SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::RLEKeyIterator::hasMore(void *a1)
{
  return a1[4] || a1[1] < a1[2];
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::RLEKeyIterator::nextKey(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = v2 - 1;
    uint64_t v4 = *(void *)(a1 + 24) + 1;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v3;
    return v1 | v4;
  }
  else
  {
    unsigned int v6 = *(uint64_t **)(a1 + 8);
    unint64_t v7 = *(void *)(a1 + 16);
    uint64_t v9 = *v6;
    unsigned int v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    *(void *)(a1 + 24) = v9;
    if ((unint64_t)(v6 + 1) < v7 && (uint64_t v10 = v6[1], v10 < 0))
    {
      *(void *)(a1 + 8) = v6 + 2;
      *(void *)(a1 + 32) = v10 & 0x7FFFFFFFFFFFFFFFLL;
      return v1 | v8;
    }
    else
    {
      return v1 | v8;
    }
  }
}

void SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::~RLEKeyHolder()
{
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::Serialize(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, 8);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 8))(a2, *(unsigned int *)(a1 + 8));
  uint64_t v4 = 8 * *(void *)(a1 + 8);
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16);
  return v5(a2, a1 + 16, v4);
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::GetRawCount(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

BOOL SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::IsEmpty(uint64_t a1)
{
  return *(void *)(a1 + 8) == 0;
}

void SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::Apply(uint64_t a1, uint64_t a2, int a3, void (*a4)(char *, uint64_t, uint64_t), uint64_t a5)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  unsigned int v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = *(void *)(v9 + 8);
  if (v12 > 0x3F) {
    return;
  }
  uint64_t v13 = (uint64_t *)(v9 + 16);
  unint64_t v14 = v9 + 16 + 8 * v12;
  bzero((char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  LODWORD(v15) = 0;
  uint64_t v16 = 0;
LABEL_3:
  uint64_t v17 = 0;
  while (v16)
  {
    --v16;
    LODWORD(v15) = v15 + 1;
LABEL_15:
    *(_DWORD *)&v11[4 * v17++] = v15 | a3;
    if (v17 == a2)
    {
      a4(v11, a2, a5);
      goto LABEL_3;
    }
  }
  if ((unint64_t)v13 < v14)
  {
    int v18 = v13 + 1;
    uint64_t v15 = *v13;
    if ((unint64_t)(v13 + 1) >= v14)
    {
      uint64_t v16 = 0;
      ++v13;
    }
    else
    {
      if (*v18 < 0) {
        v13 += 2;
      }
      else {
        ++v13;
      }
      if (*v18 < 0) {
        uint64_t v16 = *v18 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v16 = 0;
      }
    }
    goto LABEL_15;
  }
  if (v17) {
    a4(v11, v17, a5);
  }
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::RemoveKey(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v4 = a3 & a2;
  unint64_t v5 = a1 + 16;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = 8 * v6;
  unint64_t v8 = a1 + 16 + 8 * v6;
  if (v6 >= 1 && (unint64_t)v7 >= 0x18)
  {
    unint64_t v11 = a1 + 16 + 8 * v6;
    size_t v10 = (unint64_t *)(a1 + 16);
    do
    {
      unint64_t v12 = &v10[v7 >> 4];
      unint64_t v13 = *v12;
      if ((*v12 & 0x8000000000000000) != 0)
      {
        unint64_t v14 = *--v12;
        unint64_t v13 = v14;
      }
      if (v12 <= v10) {
        break;
      }
      if (v13 == v4)
      {
        size_t v10 = v12;
        if ((unint64_t)v12 >= v8) {
          return 0;
        }
        goto LABEL_20;
      }
      if (v13 > v4) {
        unint64_t v11 = (unint64_t)v12;
      }
      else {
        size_t v10 = v12;
      }
      uint64_t v7 = v11 - (void)v10;
    }
    while (v11 > (unint64_t)v10 && (unint64_t)v7 > 0x17);
    if ((unint64_t)v10 >= v8) {
      return 0;
    }
  }
  else
  {
    size_t v10 = (unint64_t *)(a1 + 16);
    if (v5 >= v8) {
      return 0;
    }
  }
LABEL_20:
  uint64_t v17 = v10 + 1;
  unint64_t v16 = *v10;
  if (*v10 == v4)
  {
    if ((unint64_t)v17 < v8)
    {
LABEL_22:
      unint64_t v18 = *v17;
      if ((*v17 & 0x8000000000000000) == 0)
      {
        size_t v19 = v8 - (void)v17;
        uint64_t v20 = v17;
LABEL_41:
        memmove(v10, v20, v19);
        uint64_t v26 = *(void *)(a1 + 8) - 1;
        goto LABEL_42;
      }
      *size_t v10 = v4 + 1;
      if ((v18 & 0x7FFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v20 = v10 + 2;
        size_t v19 = v8 - (void)(v10 + 2);
        size_t v10 = v17;
        goto LABEL_41;
      }
      unint64_t v28 = (v18 - 1) | 0x8000000000000000;
LABEL_50:
      *uint64_t v17 = v28;
      return 1;
    }
LABEL_38:
    *(void *)(a1 + 8) = v6 - 1;
    return 1;
  }
  while (1)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t result = 0;
      if (v16 > v4 || (unint64_t)v17 >= v8) {
        return result;
      }
      goto LABEL_24;
    }
    unint64_t v23 = *(v17 - 2);
    unint64_t v24 = v23 + (v16 & 0x7FFFFFFFFFFFFFFFLL);
    if (v23 < v4 && v24 >= v4) {
      break;
    }
    if ((unint64_t)v17 >= v8) {
      return 0;
    }
LABEL_24:
    unint64_t v21 = *v17++;
    unint64_t v16 = v21;
    if (v21 == v4)
    {
      size_t v10 = v17 - 1;
      if ((unint64_t)v17 < v8) {
        goto LABEL_22;
      }
      goto LABEL_38;
    }
  }
  uint64_t v27 = v17 - 1;
  if ((v16 & 0x7FFFFFFFFFFFFFFFLL) != 1)
  {
    if (v24 == v4)
    {
      unint64_t *v27 = (v16 - 1) | 0x8000000000000000;
      return 1;
    }
    if (v23 + 1 == v4)
    {
      unint64_t *v27 = v4 + 1;
      unint64_t v29 = v24 + ~v4;
      if (!v29) {
        return 1;
      }
      unint64_t v30 = *(void *)(a1 + 8);
      if (v30 < 0x3F)
      {
        uint64_t v31 = (uint64_t)((uint64_t)v17 - v5) >> 3;
        if (v30 != v31)
        {
          unint64_t v32 = v30 - v31;
          int v33 = v17 + 1;
LABEL_65:
          memmove(v33, v17, 8 * v32);
          uint64_t v31 = *(void *)(a1 + 8);
          goto LABEL_66;
        }
        goto LABEL_66;
      }
    }
    else
    {
      *(v17 - 1) = ((v4 - 1) - v23) | 0x8000000000000000;
      unint64_t v34 = *(void *)(a1 + 8);
      if (v34 < 0x3F)
      {
        uint64_t v35 = (uint64_t)((uint64_t)v17 - v5) >> 3;
        if (v34 != v35)
        {
          memmove(v17 + 1, v17, 8 * (v34 - v35));
          uint64_t v35 = *(void *)(a1 + 8);
        }
        *(void *)(a1 + 8) = v35 + 1;
        *uint64_t v17 = (v4 + 1);
        unint64_t v29 = v24 + ~v4;
        if (!v29) {
          return 1;
        }
        unint64_t v36 = *(void *)(a1 + 8);
        if (v36 < 0x3F)
        {
          ++v17;
          uint64_t v31 = (uint64_t)((uint64_t)v27 - v5 + 16) >> 3;
          if (v36 != v31)
          {
            unint64_t v32 = v36 - v31;
            int v33 = v27 + 3;
            goto LABEL_65;
          }
LABEL_66:
          *(void *)(a1 + 8) = v31 + 1;
          unint64_t v28 = v29 | 0x8000000000000000;
          goto LABEL_50;
        }
      }
    }
    unint64_t v37 = __si_assert_copy_extra_329();
    int v38 = v37;
    if (v37) {
      BOOL v39 = v37;
    }
    else {
      BOOL v39 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "SIValueSetInternals.h", 649, v39);
    free(v38);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  if ((unint64_t)v17 < v8)
  {
    memmove(v17 - 1, v17, v8 - (void)v17);
    uint64_t v6 = *(void *)(a1 + 8);
  }
  uint64_t v26 = v6 - 1;
LABEL_42:
  *(void *)(a1 + 8) = v26;
  return 1;
}

unint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::CloseKey(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return 0;
  }
  unint64_t result = a3 & a2;
  uint64_t v6 = (unsigned int *)(a1 + 16);
  unint64_t v7 = 8 * v3;
  if (v3 >= 1 && v7 >= 0x18)
  {
    uint64_t v9 = 8 * v3;
    unint64_t v10 = a1 + 16 + 8 * v3;
    do
    {
      unint64_t v11 = &v6[2 * (v9 >> 4)];
      unint64_t v12 = *(void *)v11;
      if ((*(void *)v11 & 0x8000000000000000) != 0)
      {
        unint64_t v13 = *((void *)v11 - 1);
        v11 -= 2;
        unint64_t v12 = v13;
      }
      if (v11 <= v6) {
        break;
      }
      if (v12 == result)
      {
        uint64_t v6 = v11;
        break;
      }
      if (v12 > result) {
        unint64_t v10 = (unint64_t)v11;
      }
      else {
        uint64_t v6 = v11;
      }
      uint64_t v9 = v10 - (void)v6;
    }
    while (v10 > (unint64_t)v6 && (unint64_t)v9 > 0x17);
  }
  while ((unint64_t)v6 < a1 + 16 + 8 * v3)
  {
    uint64_t v15 = *v6;
    if (result == v15) {
      return result;
    }
    v6 += 2;
    if (result < v15) {
      return v15;
    }
  }
  unint64_t result = *(void *)(a1 + 8 * v3 + 8);
  if ((result & 0x8000000000000000) != 0) {
    return (*(_DWORD *)(v7 + a1) + result);
  }
  return result;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::ContainsKey(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v3 = a3 & a2;
  unint64_t v4 = (unsigned int *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = 8 * v5;
  unint64_t v7 = a1 + 16 + 8 * v5;
  if (v5 >= 1 && (unint64_t)v6 >= 0x18)
  {
    unint64_t v9 = a1 + 16 + 8 * v5;
    do
    {
      unint64_t v10 = &v4[2 * (v6 >> 4)];
      unint64_t v11 = *(void *)v10;
      if ((*(void *)v10 & 0x8000000000000000) != 0)
      {
        unint64_t v12 = *((void *)v10 - 1);
        v10 -= 2;
        unint64_t v11 = v12;
      }
      if (v10 <= v4) {
        break;
      }
      if (v11 == v3)
      {
        unint64_t v4 = v10;
        goto LABEL_20;
      }
      if (v11 > v3) {
        unint64_t v9 = (unint64_t)v10;
      }
      else {
        unint64_t v4 = v10;
      }
      uint64_t v6 = v9 - (void)v4;
    }
    while (v9 > (unint64_t)v4 && (unint64_t)v6 > 0x17);
  }
  while (1)
  {
LABEL_20:
    if ((unint64_t)v4 >= v7) {
      return 0;
    }
    unsigned int v14 = *v4;
    if (v3 == *v4) {
      break;
    }
    v4 += 2;
    if (v3 < v14) {
      return 0;
    }
  }
  return 1;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedKeysWithContext(uint64_t a1, int **a2, uint64_t a3)
{
  if (*a2 >= a2[1] || (*((_DWORD *)a2 + 5) & **a2) != *((_DWORD *)a2 + 4)) {
    return 0;
  }
  unsigned int v5 = SIValueSet<unsigned int>::FlatContextWithPfx::peek(a2);
  unint64_t v6 = v5;
  unint64_t v7 = (unint64_t *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = 8 * v8;
  unint64_t v10 = a1 + 16 + 8 * v8;
  BOOL v11 = v8 >= 1 && (unint64_t)v9 >= 0x18;
  uint64_t v67 = a1 + 16;
  if (v11)
  {
    unint64_t v15 = a1 + 16 + 8 * v8;
    uint64_t v12 = a3;
    do
    {
      unint64_t v16 = &v7[v9 >> 4];
      unint64_t v17 = *v16;
      if ((*v16 & 0x8000000000000000) != 0)
      {
        unint64_t v18 = *--v16;
        unint64_t v17 = v18;
      }
      if (v16 <= v7) {
        break;
      }
      if (v17 == v5)
      {
        unint64_t v7 = v16;
        break;
      }
      if (v17 > v5) {
        unint64_t v15 = (unint64_t)v16;
      }
      else {
        unint64_t v7 = v16;
      }
      uint64_t v9 = v15 - (void)v7;
    }
    while (v15 > (unint64_t)v7 && (unint64_t)v9 > 0x17);
  }
  else
  {
    uint64_t v12 = a3;
  }
  int v20 = 0;
  uint64_t v13 = 0;
  uint64_t v66 = a1;
  unint64_t v21 = a1 + 520;
  uint64_t v22 = v7;
  int v23 = 1;
  unint64_t v68 = v21;
  while (2)
  {
    uint64_t v69 = v22;
    unint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = v7;
    while (1)
    {
      uint64_t v29 = v25;
      unint64_t v30 = v24;
      if ((unint64_t)v26 >= v10) {
        break;
      }
LABEL_40:
      unint64_t v24 = *v26;
      if (v6 < *v26) {
        break;
      }
      int v31 = 1;
LABEL_65:
      if ((unint64_t)(v26 + 1) >= v10)
      {
        uint64_t v44 = 1;
        uint64_t v25 = 1;
        if (v29) {
          goto LABEL_72;
        }
      }
      else
      {
        int64_t v41 = v26[1];
        uint64_t v42 = v41 & 0x7FFFFFFFFFFFFFFFLL;
        BOOL v43 = v41 >= 0;
        uint64_t v25 = 1;
        uint64_t v44 = 2;
        if (v43) {
          uint64_t v44 = 1;
        }
        else {
          uint64_t v25 = v42 + 1;
        }
        if (v29)
        {
LABEL_72:
          if (v29 + v30 < v24) {
            goto LABEL_76;
          }
          unint64_t v45 = v25 + v24;
          if (v25 + v24 < v30) {
            goto LABEL_76;
          }
          uint64_t v25 = v29 + v30 - v25;
          BOOL v27 = v30 > v24;
          if (v30 < v24) {
            unint64_t v24 = v30;
          }
          if (!v27) {
            uint64_t v25 = v29;
          }
          if (v45 > v25 + v24) {
            uint64_t v25 = v45 - v24;
          }
        }
      }
      v26 += v44;
      if (v6 <= v25 + v24) {
        char v28 = v31;
      }
      else {
        char v28 = 0;
      }
      if ((v28 & 1) == 0) {
        goto LABEL_77;
      }
    }
    while (2)
    {
      if (v29)
      {
        int v31 = 1;
        if (v29 + v30 < v6 || v6 + 1 < v30) {
          goto LABEL_63;
        }
        uint64_t v32 = v29 + v30 - 1;
        BOOL v33 = v30 > v6;
        BOOL v34 = v30 > v6;
        if (v30 >= v6) {
          unint64_t v30 = v6;
        }
        if (v33) {
          uint64_t v29 = v32;
        }
        if (v6 >= v29 + v30)
        {
          uint64_t v29 = v6 + 1 - v30;
          goto LABEL_51;
        }
      }
      else
      {
        uint64_t v29 = 1;
        unint64_t v30 = v6;
LABEL_51:
        BOOL v34 = 1;
      }
      uint64_t v35 = *a2 + 1;
      int v36 = **a2;
      *a2 = v35;
      int v37 = *((_DWORD *)a2 + 5);
      if ((v37 & v36) != *((_DWORD *)a2 + 4))
      {
        uint64_t v50 = __si_assert_copy_extra_329();
        unsigned int v51 = v50;
        unsigned int v52 = "";
        if (v50) {
          unsigned int v52 = v50;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 172, "(key & fMask) == fPfx", v52);
LABEL_95:
        free(v51);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      if (v6 != (v36 & ~v37))
      {
        int v53 = __si_assert_copy_extra_329();
        uint64_t v54 = v53;
        BOOL v55 = "";
        if (v53) {
          BOOL v55 = v53;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 761, "v==key", v55);
        goto LABEL_100;
      }
      if (v34)
      {
        ++v13;
      }
      else if (v12)
      {
        unint64_t v38 = v10;
        SIValueSet<unsigned int>::SIValueSetInsert(*(unsigned int **)(v12 + 8), *(_DWORD *)v12 | v6);
        unint64_t v10 = v38;
        uint64_t v12 = a3;
        uint64_t v35 = *a2;
      }
      if (v35 < a2[1])
      {
        int v39 = *v35;
        int v40 = *((_DWORD *)a2 + 5);
        if ((v40 & v39) == *((_DWORD *)a2 + 4))
        {
          unint64_t v6 = v39 & ~v40;
          ++v23;
          ++v20;
          if ((unint64_t)v26 < v10) {
            goto LABEL_40;
          }
          continue;
        }
      }
      break;
    }
    int v31 = 0;
    ++v20;
LABEL_63:
    if ((unint64_t)v26 < v10)
    {
      unint64_t v24 = *v26;
      goto LABEL_65;
    }
LABEL_76:
    unint64_t v24 = v30;
    uint64_t v25 = v29;
LABEL_77:
    uint64_t v46 = v25 - 1;
    if (v25 == 1)
    {
      unint64_t v47 = v68;
      int v49 = v69;
      if (v69 >= v26)
      {
        if (v10 + 16 > v68) {
          goto LABEL_117;
        }
        unint64_t v7 = (unint64_t *)(v68 - (v10 - (void)v26));
        if ((unint64_t *)v10 != v26)
        {
          memmove((void *)(v68 - (v10 - (void)v26)), v26, v10 - (void)v26);
          unint64_t v47 = v68;
          int v49 = v69;
          uint64_t v12 = a3;
        }
        unint64_t v10 = v47;
      }
      else
      {
        unint64_t v7 = v26;
      }
      unint64_t *v49 = v24;
      uint64_t v22 = v49 + 1;
      if (v31) {
        goto LABEL_27;
      }
      goto LABEL_91;
    }
    unint64_t v47 = v68;
    uint64_t v22 = v69;
    if (v25)
    {
      BOOL v48 = v69 + 1;
      if (v69 + 1 < v26)
      {
        unint64_t v7 = v26;
        goto LABEL_26;
      }
      if (v10 + 16 <= v68)
      {
        unint64_t v7 = (unint64_t *)(v68 - (v10 - (void)v26));
        if ((unint64_t *)v10 != v26)
        {
          memmove((void *)(v68 - (v10 - (void)v26)), v26, v10 - (void)v26);
          BOOL v48 = v69 + 1;
          unint64_t v47 = v68;
          uint64_t v22 = v69;
          uint64_t v12 = a3;
        }
        unint64_t v10 = v47;
LABEL_26:
        *uint64_t v22 = v24;
        v22[1] = v46 | 0x8000000000000000;
        uint64_t v22 = v48 + 1;
        if (v31)
        {
LABEL_27:
          if ((unint64_t)v22 + v10 - (void)v7 + 16 > v47) {
            goto LABEL_106;
          }
          continue;
        }
LABEL_91:
        uint64_t v26 = v7;
LABEL_110:
        unint64_t v7 = v26;
        if (v20 == v23) {
          goto LABEL_111;
        }
        uint64_t v61 = __si_assert_copy_extra_329();
        uint64_t v54 = v61;
        uint64_t v62 = "";
        if (v61) {
          uint64_t v62 = v61;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 811, "popped==peeked", v62);
LABEL_100:
        free(v54);
        if (__valid_fs(-1)) {
LABEL_101:
        }
          uint64_t v56 = 2989;
        else {
          uint64_t v56 = 3072;
        }
        *(_DWORD *)uint64_t v56 = -559038737;
        abort();
      }
LABEL_117:
      unint64_t v63 = __si_assert_copy_extra_329();
      uint64_t v64 = v63;
      if (v63) {
        uint64_t v65 = v63;
      }
      else {
        uint64_t v65 = "";
      }
      __message_assert("%s:%u: Unexpected code path %s ", "SIValueSetInternals.h", 626, v65);
      free(v64);
      goto LABEL_101;
    }
    break;
  }
  unint64_t v7 = v26;
  if (!v31) {
    goto LABEL_110;
  }
LABEL_106:
  if (v20 >= v23)
  {
    unint64_t v57 = __si_assert_copy_extra_329();
    unsigned int v51 = v57;
    int v58 = "";
    if (v57) {
      int v58 = v57;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 810, "popped<peeked", v58);
    goto LABEL_95;
  }
LABEL_111:
  unint64_t v59 = v10 - (void)v7;
  uint64_t v60 = v22;
  if (v10 > (unint64_t)v7)
  {
    memmove(v22, v7, v10 - (void)v7);
    uint64_t v60 = (unint64_t *)((char *)v60 + v59);
  }
  *(void *)(v66 + 8) = ((uint64_t)v60 - v67) >> 3;
  return v13;
}

BOOL SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddKey(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v3 = a3 & a2;
  int v69 = a3 & a2;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = 8 * v4;
  unint64_t v6 = a1 + 16 + 8 * v4;
  if (v4 >= 1 && (unint64_t)v5 >= 0x18)
  {
    unint64_t v9 = a1 + 16 + 8 * v4;
    uint64_t v8 = (unint64_t *)(a1 + 16);
    do
    {
      unint64_t v10 = &v8[v5 >> 4];
      unint64_t v11 = *v10;
      if ((*v10 & 0x8000000000000000) != 0)
      {
        unint64_t v12 = *--v10;
        unint64_t v11 = v12;
      }
      if (v10 <= v8) {
        break;
      }
      if (v11 == v3)
      {
        uint64_t v8 = v10;
        break;
      }
      if (v11 > v3) {
        unint64_t v9 = (unint64_t)v10;
      }
      else {
        uint64_t v8 = v10;
      }
      uint64_t v5 = v9 - (void)v8;
    }
    while (v9 > (unint64_t)v8 && (unint64_t)v5 > 0x17);
  }
  else
  {
    uint64_t v8 = (unint64_t *)(a1 + 16);
  }
  uint64_t v62 = a1 + 16;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  unint64_t v16 = a1 + 520;
  unint64_t v17 = &v69;
  unint64_t v18 = v8;
  int v19 = 1;
  unint64_t v66 = a1 + 520;
  while (2)
  {
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = v8;
    while (1)
    {
      if ((unint64_t)v22 >= v6)
      {
        BOOL v27 = v17++;
        if (!v21)
        {
          while (1)
          {
            unint64_t v20 = v3;
            uint64_t v21 = 1;
            uint64_t v36 = 1;
LABEL_58:
            if (v3 != *v27) {
              break;
            }
            v15 += v36;
            if (v27 >= &v69) {
              goto LABEL_62;
            }
            unsigned int v37 = *v17++;
            unint64_t v3 = v37;
            ++v19;
            uint64_t v14 = (v14 + 1);
            BOOL v27 = v17 - 1;
            if (v21) {
              goto LABEL_48;
            }
          }
LABEL_104:
          unint64_t v47 = __si_assert_copy_extra_329();
          BOOL v48 = v47;
          int v49 = "";
          if (v47) {
            int v49 = v47;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 761, "v==key", v49);
          goto LABEL_107;
        }
LABEL_48:
        if (v21 + v20 >= v3 && v3 + 1 >= v20)
        {
          uint64_t v33 = v21 + v20 - 1;
          BOOL v34 = v20 > v3;
          BOOL v35 = v20 > v3;
          if (v20 >= v3) {
            unint64_t v20 = v3;
          }
          if (v34) {
            uint64_t v21 = v33;
          }
          if (v3 < v21 + v20)
          {
            uint64_t v36 = v35;
          }
          else
          {
            uint64_t v21 = v3 + 1 - v20;
            uint64_t v36 = 1;
          }
          goto LABEL_58;
        }
LABEL_65:
        int v32 = 1;
        unint64_t v17 = v27;
        if ((unint64_t)v22 >= v6) {
          goto LABEL_88;
        }
        goto LABEL_66;
      }
      unint64_t v24 = *v22;
      if (v3 < *v22) {
        break;
      }
      int v32 = 1;
LABEL_68:
      if ((unint64_t)(v22 + 1) >= v6)
      {
        uint64_t v39 = 1;
        uint64_t v40 = 1;
        if (v21) {
          goto LABEL_78;
        }
      }
      else
      {
        uint64_t v38 = v22[1];
        if (v38 < 0) {
          uint64_t v39 = 2;
        }
        else {
          uint64_t v39 = 1;
        }
        if (v38 < 0) {
          uint64_t v40 = (v38 & 0x7FFFFFFFFFFFFFFFLL) + 1;
        }
        else {
          uint64_t v40 = 1;
        }
        if (v21)
        {
LABEL_78:
          if (v21 + v20 < v24) {
            goto LABEL_88;
          }
          unint64_t v41 = v40 + v24;
          if (v40 + v24 < v20) {
            goto LABEL_88;
          }
          unint64_t v42 = v21 + v20 - v40;
          BOOL v43 = v20 > v24;
          if (v20 < v24) {
            unint64_t v24 = v20;
          }
          if (v43) {
            uint64_t v44 = v42;
          }
          else {
            uint64_t v44 = v21;
          }
          uint64_t v40 = v41 - v24;
          if (v41 <= v44 + v24) {
            uint64_t v40 = v44;
          }
        }
      }
      v22 += v39;
      if (v3 <= v40 + v24) {
        char v23 = v32;
      }
      else {
        char v23 = 0;
      }
      unint64_t v20 = v24;
      uint64_t v21 = v40;
      if ((v23 & 1) == 0) {
        goto LABEL_89;
      }
    }
    uint64_t v25 = v17 + 1;
    uint64_t v26 = v14;
    while (1)
    {
      uint64_t v14 = v26;
      unint64_t v17 = v25;
      BOOL v27 = v25 - 1;
      if (v21)
      {
        if (v21 + v20 < v3 || v3 + 1 < v20) {
          goto LABEL_65;
        }
        uint64_t v28 = v21 + v20 - 1;
        BOOL v29 = v20 > v3;
        BOOL v30 = v20 > v3;
        if (v20 >= v3) {
          unint64_t v20 = v3;
        }
        if (v29) {
          uint64_t v21 = v28;
        }
        if (v3 < v21 + v20)
        {
          uint64_t v31 = v30;
        }
        else
        {
          uint64_t v21 = v3 + 1 - v20;
          uint64_t v31 = 1;
        }
      }
      else
      {
        unint64_t v20 = v3;
        uint64_t v21 = 1;
        uint64_t v31 = 1;
      }
      if (v3 != *v27) {
        goto LABEL_104;
      }
      v15 += v31;
      if (v27 >= &v69) {
        break;
      }
      uint64_t v25 = v17 + 1;
      unint64_t v3 = *v17;
      ++v19;
      uint64_t v26 = (v14 + 1);
      if (v24 <= v3)
      {
        int v32 = 1;
        goto LABEL_63;
      }
    }
LABEL_62:
    int v32 = 0;
LABEL_63:
    uint64_t v14 = (v14 + 1);
    if ((unint64_t)v22 < v6)
    {
LABEL_66:
      unint64_t v24 = *v22;
      goto LABEL_68;
    }
LABEL_88:
    unint64_t v24 = v20;
    uint64_t v40 = v21;
LABEL_89:
    uint64_t v45 = v40 - 1;
    if (v40 != 1)
    {
      if (v40)
      {
        uint64_t v46 = v18 + 1;
        if (v18 + 1 < v22)
        {
          uint64_t v8 = v22;
          goto LABEL_22;
        }
        if (v6 + 16 > v16) {
          goto LABEL_125;
        }
        uint64_t v8 = (unint64_t *)(v16 - (v6 - (void)v22));
        if ((unint64_t *)v6 != v22)
        {
          uint64_t v67 = v18;
          uint64_t v64 = v40 - 1;
          uint64_t v65 = v18 + 1;
          memmove((void *)(v16 - (v6 - (void)v22)), v22, v6 - (void)v22);
          uint64_t v45 = v64;
          uint64_t v46 = v65;
          unint64_t v16 = v66;
          unint64_t v18 = v67;
        }
        unint64_t v6 = v16;
LABEL_22:
        *unint64_t v18 = v24;
        v18[1] = v45 | 0x8000000000000000;
        unint64_t v18 = v46 + 1;
        if (!v32) {
          goto LABEL_103;
        }
LABEL_23:
        if ((unint64_t)v18 + v6 - (void)v8 + 16 > v16) {
          goto LABEL_111;
        }
        continue;
      }
      uint64_t v8 = v22;
      if (!v32) {
        goto LABEL_115;
      }
LABEL_111:
      if ((int)v14 < v19) {
        goto LABEL_116;
      }
      uint64_t v50 = __si_assert_copy_extra_329();
      BOOL v48 = v50;
      unsigned int v51 = "";
      if (v50) {
        unsigned int v51 = v50;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 810, "popped<peeked", v51);
LABEL_107:
      free(v48);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    break;
  }
  if (v18 < v22)
  {
    uint64_t v8 = v22;
    goto LABEL_102;
  }
  if (v6 + 16 > v16)
  {
LABEL_125:
    unint64_t v59 = __si_assert_copy_extra_329();
    uint64_t v60 = v59;
    if (v59) {
      uint64_t v61 = v59;
    }
    else {
      uint64_t v61 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "SIValueSetInternals.h", 626, v61);
    free(v60);
    goto LABEL_122;
  }
  uint64_t v8 = (unint64_t *)(v16 - (v6 - (void)v22));
  if ((unint64_t *)v6 != v22)
  {
    unint64_t v68 = v18;
    memmove((void *)(v16 - (v6 - (void)v22)), v22, v6 - (void)v22);
    unint64_t v16 = v66;
    unint64_t v18 = v68;
  }
  unint64_t v6 = v16;
LABEL_102:
  *v18++ = v24;
  if (v32) {
    goto LABEL_23;
  }
LABEL_103:
  uint64_t v22 = v8;
LABEL_115:
  uint64_t v8 = v22;
  if (v14 != v19)
  {
    BOOL v55 = __si_assert_copy_extra_329();
    uint64_t v56 = v55;
    unint64_t v57 = "";
    if (v55) {
      unint64_t v57 = v55;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 811, "popped==peeked", v57);
    free(v56);
    if (!__valid_fs(-1))
    {
      uint64_t v58 = 3072;
LABEL_124:
      *(_DWORD *)uint64_t v58 = -559038737;
      abort();
    }
LABEL_122:
    uint64_t v58 = 2989;
    goto LABEL_124;
  }
LABEL_116:
  unint64_t v52 = v6 - (void)v8;
  if (v6 > (unint64_t)v8)
  {
    int v53 = v18;
    memmove(v18, v8, v6 - (void)v8);
    unint64_t v18 = (unint64_t *)((char *)v53 + v52);
  }
  *(void *)(a1 + 8) = ((uint64_t)v18 - v62) >> 3;
  return v15 != 0;
}

uint64_t SIUINT64SetCreate()
{
  if (!__kSIUINT64SetTypeID) {
    __kSIUINT64SetTypeID = _CFRuntimeRegisterClass();
  }
  return _CFRuntimeCreateInstance();
}

void __SIUINT64SetFinalize(char *a1)
{
  uint64_t v2 = 0;
  unint64_t v3 = a1 + 56;
  CFAllocatorRef v4 = (const __CFAllocator *)*((void *)a1 + 6);
  do
  {
    uint64_t v5 = *(void **)&v3[v2];
    if (v5)
    {
      if ((v5 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v5 + 72))(*(void *)&v3[v2]);
        CFAllocatorDeallocate(v4, v5);
      }
      *(void *)&v3[v2] = 0;
    }
    v2 += 8;
  }
  while (v2 != 128);
  unint64_t v6 = (void **)*((void *)a1 + 4);
  if (v6)
  {
    SIValueSet<unsigned long long>::CombLevel_s::malloc_chain_s::chain_s::clear(v6, *((const __CFAllocator **)a1 + 6), *((void *)a1 + 5));
    CFAllocatorDeallocate(*((CFAllocatorRef *)a1 + 6), *((void **)a1 + 4));
    *((void *)a1 + 4) = 0;
  }
}

double __SIUINT64SetInit(char *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  *((void *)a1 + 2) = 0;
  *((_DWORD *)a1 + 6) = 0;
  *((void *)a1 + 5) = 0;
  *((void *)a1 + 6) = v2;
  unint64_t v3 = CFAllocatorAllocate(v2, 8072, 0);
  bzero(v3, 0x1F88uLL);
  *((void *)a1 + 4) = v3;
  double result = 0.0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  a1[184] = 1;
  return result;
}

uint64_t SIUINT64SetGetTypeID()
{
  uint64_t result = __kSIUINT64SetTypeID;
  if (!__kSIUINT64SetTypeID)
  {
    uint64_t result = _CFRuntimeRegisterClass();
    __kSIUINT64SetTypeID = result;
  }
  return result;
}

uint64_t SIUINT64SetContainsValue(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(a1 + 184)) {
    return 0;
  }
  int v3 = *(_DWORD *)(a1 + 24);
  if (v3)
  {
    if ((*(void *)(a1 + 16) ^ a2) >> (-4 * v3)) {
      return 0;
    }
  }
  uint64_t v4 = *(void *)(a1 + 8 * ((a2 >> ((60 - 4 * v3) & 0xFC)) & 0xF) + 56);
  if (v4)
  {
    int v5 = v3 + 2;
    do
      uint64_t v4 = *(void *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((a2 >> ((64 - 4 * v5++) & 0xFC)) & 0xF));
    while ((v4 & 1) != 0);
  }
  if (!v4) {
    return 0;
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)v4 + 16))();
  }
}

uint64_t SIUINT64SetAddValue(uint64_t a1, unint64_t a2)
{
  return SIValueSet<unsigned long long>::SIValueSetInsert((unint64_t *)(a1 + 16), a2);
}

uint64_t SIValueSet<unsigned long long>::SIValueSetInsert(unint64_t *a1, unint64_t a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  if (v4)
  {
    int v5 = 4 * v4;
    unint64_t v6 = *a1;
    if ((*a1 ^ a2) >> (-4 * v4))
    {
      unint64_t v7 = a1 + 5;
      do
      {
        int v17 = *((_DWORD *)a1 + 2);
        *((_DWORD *)a1 + 2) = v17 - 1;
        if (v17 <= 0)
        {
          char v23 = __si_assert_copy_extra_329();
          unint64_t v24 = v23;
          uint64_t v25 = "";
          if (v23) {
            uint64_t v25 = v23;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 1650, "s->sharedDepth>=0", v25);
          free(v24);
          if (__valid_fs(-1)) {
            uint64_t v26 = 2989;
          }
          else {
            uint64_t v26 = 3072;
          }
          *(_DWORD *)uint64_t v26 = -559038737;
          abort();
        }
        if (v17 == 1) {
          uint64_t v18 = 0;
        }
        else {
          uint64_t v18 = -1 << (-4 * (v17 - 1));
        }
        *a1 = v6 & v18;
        unint64_t v9 = a1[3];
        if (v9 == 63 || (uint64_t v8 = (void *)a1[2]) == 0)
        {
          uint64_t v8 = CFAllocatorAllocate((CFAllocatorRef)a1[4], 8072, 0);
          void *v8 = a1[2];
          bzero(v8 + 1, 0x1F80uLL);
          unint64_t v9 = 0;
          a1[2] = (unint64_t)v8;
        }
        a1[3] = v9 + 1;
        long long v10 = *v7;
        long long v11 = *(_OWORD *)(a1 + 7);
        long long v12 = *(_OWORD *)(a1 + 9);
        uint64_t v13 = &v8[16 * v9];
        *(_OWORD *)(v13 + 7) = *(_OWORD *)(a1 + 11);
        *(_OWORD *)(v13 + 5) = v12;
        *(_OWORD *)(v13 + 3) = v11;
        *(_OWORD *)(v13 + 1) = v10;
        long long v14 = *(_OWORD *)(a1 + 13);
        long long v15 = *(_OWORD *)(a1 + 15);
        long long v16 = *(_OWORD *)(a1 + 17);
        *(_OWORD *)(v13 + 15) = *(_OWORD *)(a1 + 19);
        *(_OWORD *)(v13 + 13) = v16;
        *(_OWORD *)(v13 + 11) = v15;
        *(_OWORD *)(v13 + 9) = v14;
        *(_OWORD *)(a1 + 9) = 0u;
        *(_OWORD *)(a1 + 11) = 0u;
        *(_OWORD *)(a1 + 13) = 0u;
        *(_OWORD *)(a1 + 15) = 0u;
        *(_OWORD *)(a1 + 17) = 0u;
        *(_OWORD *)(a1 + 19) = 0u;
        *unint64_t v7 = 0u;
        *(_OWORD *)(a1 + 7) = 0u;
        *((void *)v7 + ((v6 >> ((64 - 4 * v17) & 0xFC)) & 0xF)) = (unint64_t)(v13 + 1) | 1;
        unint64_t v6 = *a1;
      }
      while (*a1 != (v18 & a2));
      int v4 = *((_DWORD *)a1 + 2);
      int v5 = 4 * v4;
    }
    if ((v5 - 61) <= 0xFFFFFFBE)
    {
      int v19 = __si_assert_copy_extra_329();
      unint64_t v20 = v19;
      uint64_t v21 = "";
      if (v19) {
        uint64_t v21 = v19;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 1670, "((sizeof(ValueType) * 8) -4*(1+(s->sharedDepth))) <= sizeof(ValueType)*8", v21);
      free(v20);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
  }
  else if (*((unsigned char *)a1 + 168))
  {
    int v4 = 12;
    *((_DWORD *)a1 + 2) = 12;
    *a1 = a2 & 0xFFFFFFFFFFFF0000;
  }
  else
  {
    int v4 = 0;
  }
  *((unsigned char *)a1 + 168) = 0;
  return SIValueSet<unsigned long long>::_SIValueSetInnerInsert((unint64_t)(a1 + 5), a2, v4, (uint64_t)(a1 + 2));
}

uint64_t SIValueSet<unsigned long long>::_SIValueSetInnerInsert(unint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  int v5 = a3;
  unsigned __int16 v7 = 60 - 4 * a3;
  char v8 = (60 - 4 * a3) & 0xFC;
  uint64_t v9 = (a2 >> v8) & 0xF;
  unint64_t v10 = *(void *)(a1 + 8 * v9);
  if (v10)
  {
    do
    {
      unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      unsigned __int16 v7 = 56 - 4 * v5;
      char v8 = (56 - 4 * v5) & 0xFC;
      uint64_t v9 = (a2 >> v8) & 0xF;
      unint64_t v10 = *(void *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 8 * v9);
      ++v5;
    }
    while ((v10 & 1) != 0);
  }
  else
  {
    unint64_t v11 = a1;
  }
  if ((__int16)v7 < 13)
  {
    if (!v10)
    {
      unint64_t v10 = (unint64_t)CFAllocatorAllocate(*(CFAllocatorRef *)(a4 + 16), 520, 0);
      *(void *)unint64_t v10 = &unk_1F1810F70;
      *(_OWORD *)(v10 + 24) = 0u;
      *(_OWORD *)(v10 + 40) = 0u;
      *(_OWORD *)(v10 + 56) = 0u;
      *(_OWORD *)(v10 + 72) = 0u;
      *(_OWORD *)(v10 + 88) = 0u;
      *(_OWORD *)(v10 + 104) = 0u;
      *(_OWORD *)(v10 + 120) = 0u;
      *(_OWORD *)(v10 + 136) = 0u;
      *(_OWORD *)(v10 + 152) = 0u;
      *(_OWORD *)(v10 + 168) = 0u;
      *(_OWORD *)(v10 + 184) = 0u;
      *(_OWORD *)(v10 + 200) = 0u;
      *(_OWORD *)(v10 + 216) = 0u;
      *(_OWORD *)(v10 + 232) = 0u;
      *(_OWORD *)(v10 + 248) = 0u;
      *(_OWORD *)(v10 + 8) = 0u;
      *(_OWORD *)(v10 + 264) = 0u;
      *(_OWORD *)(v10 + 280) = 0u;
      *(_OWORD *)(v10 + 296) = 0u;
      *(_OWORD *)(v10 + 312) = 0u;
      *(_OWORD *)(v10 + 328) = 0u;
      *(_OWORD *)(v10 + 344) = 0u;
      *(_OWORD *)(v10 + 360) = 0u;
      *(_OWORD *)(v10 + 376) = 0u;
      *(_OWORD *)(v10 + 392) = 0u;
      *(_OWORD *)(v10 + 408) = 0u;
      *(_OWORD *)(v10 + 424) = 0u;
      *(_OWORD *)(v10 + 440) = 0u;
      *(_OWORD *)(v10 + 456) = 0u;
      *(_OWORD *)(v10 + 472) = 0u;
      *(_OWORD *)(v10 + 488) = 0u;
      *(_OWORD *)(v10 + 504) = 0u;
      *(void *)(v11 + 8 * v9) = v10;
    }
    int v13 = a2 & ~(-1 << v8);
    int v14 = (__int16)v13 >> 6;
    uint64_t v15 = 1 << v13;
    long long v16 = (char *)(v10 + 8 * (__int16)v14);
    uint64_t v19 = *((void *)v16 + 1);
    int v17 = (uint64_t *)(v16 + 8);
    uint64_t v18 = v19;
    if ((v19 & v15) != 0)
    {
      return 0;
    }
    else
    {
      *int v17 = v18 | v15;
      return 1;
    }
  }
  else
  {
    if (v10)
    {
      long long v12 = *(uint64_t (***)(void *, unint64_t, uint64_t))v10;
    }
    else
    {
      if (v7 < 0x20u)
      {
        CFAllocatorRef v21 = *(const __CFAllocator **)(a4 + 16);
        if (v7 < 0x10u)
        {
          unint64_t v10 = (unint64_t)CFAllocatorAllocate(v21, 136, 0);
          long long v12 = (uint64_t (**)(void *, unint64_t, uint64_t))&unk_1F18110E8;
          *(void *)unint64_t v10 = &unk_1F18110E8;
          *(_OWORD *)(v10 + 8) = 0u;
          *(_OWORD *)(v10 + 24) = 0u;
          *(_OWORD *)(v10 + 40) = 0u;
          *(_OWORD *)(v10 + 56) = 0u;
          *(_OWORD *)(v10 + 72) = 0u;
          *(_OWORD *)(v10 + 88) = 0u;
          *(_OWORD *)(v10 + 104) = 0u;
          *(_OWORD *)(v10 + 120) = 0u;
        }
        else
        {
          unint64_t v10 = (unint64_t)CFAllocatorAllocate(v21, 264, 0);
          long long v12 = (uint64_t (**)(void *, unint64_t, uint64_t))&unk_1F1811048;
          *(void *)unint64_t v10 = &unk_1F1811048;
          *(_OWORD *)(v10 + 8) = 0u;
          *(_OWORD *)(v10 + 24) = 0u;
          *(_OWORD *)(v10 + 40) = 0u;
          *(_OWORD *)(v10 + 56) = 0u;
          *(_OWORD *)(v10 + 72) = 0u;
          *(_OWORD *)(v10 + 88) = 0u;
          *(_OWORD *)(v10 + 104) = 0u;
          *(_OWORD *)(v10 + 120) = 0u;
          *(_OWORD *)(v10 + 136) = 0u;
          *(_OWORD *)(v10 + 152) = 0u;
          *(_OWORD *)(v10 + 168) = 0u;
          *(_OWORD *)(v10 + 184) = 0u;
          *(_OWORD *)(v10 + 200) = 0u;
          *(_OWORD *)(v10 + 216) = 0u;
          *(_OWORD *)(v10 + 232) = 0u;
          *(_OWORD *)(v10 + 248) = 0u;
        }
      }
      else
      {
        unint64_t v10 = (unint64_t)CFAllocatorAllocate(*(CFAllocatorRef *)(a4 + 16), 520, 0);
        long long v12 = (uint64_t (**)(void *, unint64_t, uint64_t))&unk_1F1811188;
        *(void *)unint64_t v10 = &unk_1F1811188;
        *(_OWORD *)(v10 + 24) = 0u;
        *(_OWORD *)(v10 + 40) = 0u;
        *(_OWORD *)(v10 + 56) = 0u;
        *(_OWORD *)(v10 + 72) = 0u;
        *(_OWORD *)(v10 + 88) = 0u;
        *(_OWORD *)(v10 + 104) = 0u;
        *(_OWORD *)(v10 + 120) = 0u;
        *(_OWORD *)(v10 + 136) = 0u;
        *(_OWORD *)(v10 + 152) = 0u;
        *(_OWORD *)(v10 + 168) = 0u;
        *(_OWORD *)(v10 + 184) = 0u;
        *(_OWORD *)(v10 + 200) = 0u;
        *(_OWORD *)(v10 + 216) = 0u;
        *(_OWORD *)(v10 + 232) = 0u;
        *(_OWORD *)(v10 + 248) = 0u;
        *(_OWORD *)(v10 + 8) = 0u;
        *(_OWORD *)(v10 + 264) = 0u;
        *(_OWORD *)(v10 + 280) = 0u;
        *(_OWORD *)(v10 + 296) = 0u;
        *(_OWORD *)(v10 + 312) = 0u;
        *(_OWORD *)(v10 + 328) = 0u;
        *(_OWORD *)(v10 + 344) = 0u;
        *(_OWORD *)(v10 + 360) = 0u;
        *(_OWORD *)(v10 + 376) = 0u;
        *(_OWORD *)(v10 + 392) = 0u;
        *(_OWORD *)(v10 + 408) = 0u;
        *(_OWORD *)(v10 + 424) = 0u;
        *(_OWORD *)(v10 + 440) = 0u;
        *(_OWORD *)(v10 + 456) = 0u;
        *(_OWORD *)(v10 + 472) = 0u;
        *(_OWORD *)(v10 + 488) = 0u;
        *(_OWORD *)(v10 + 504) = 0u;
      }
      *(void *)(v11 + 8 * v9) = v10;
    }
    uint64_t v20 = (*v12)((void *)v10, a2, ~(-1 << v8));
    if ((unint64_t)(*(uint64_t (**)(unint64_t))(*(void *)v10 + 56))(v10) >= 0x3E) {
      *(void *)(v11 + 8 * v9) = SIValueSet<unsigned long long>::_SIValueSetBurstRLE((void *)v10, v5, a4);
    }
  }
  return v20;
}

uint64_t SIValueSet<unsigned long long>::_SIValueSetBurstRLE(void *a1, int a2, uint64_t a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a3 + 8);
  if (v6 == 63 || (unsigned __int16 v7 = *(void **)a3) == 0)
  {
    unsigned __int16 v7 = CFAllocatorAllocate(*(CFAllocatorRef *)(a3 + 16), 8072, 0);
    *unsigned __int16 v7 = *(void *)a3;
    bzero(v7 + 1, 0x1F80uLL);
    uint64_t v6 = 0;
    *(void *)a3 = v7;
  }
  *(void *)(a3 + 8) = v6 + 1;
  char v8 = &v7[16 * v6];
  *(_OWORD *)(v8 + 1) = 0u;
  unint64_t v9 = (unint64_t)(v8 + 1);
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  uint64_t v10 = (a2 + 1);
  int v11 = 64 - 4 * v10;
  *(_OWORD *)(v9 + 16) = 0u;
  if (v11 >= 32)
  {
    unint64_t v12 = a1[1];
    if (v12 > 0x3F) {
      goto LABEL_71;
    }
    uint64_t v44 = &v43;
    int v13 = a1 + 2;
    unint64_t v14 = (unint64_t)&a1[v12 + 2];
    bzero(v45, 0x400uLL);
    uint64_t v15 = 0;
    uint64_t v16 = 0;
LABEL_7:
    uint64_t v17 = 0;
    while (1)
    {
      if (v16)
      {
        --v16;
        ++v15;
      }
      else
      {
        if ((unint64_t)v13 >= v14)
        {
          if (v17)
          {
            uint64_t v28 = v45;
            do
            {
              uint64_t v29 = *v28++;
              SIValueSet<unsigned long long>::_SIValueSetInnerInsert(v9, v29, v10, a3);
              --v17;
            }
            while (v17);
          }
          goto LABEL_71;
        }
        uint64_t v18 = v13 + 1;
        uint64_t v15 = *v13;
        if ((unint64_t)(v13 + 1) >= v14)
        {
          uint64_t v16 = 0;
          ++v13;
        }
        else
        {
          if (*v18 < 0) {
            v13 += 2;
          }
          else {
            ++v13;
          }
          if (*v18 < 0) {
            uint64_t v16 = *v18 & 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v16 = 0;
          }
        }
      }
      v45[v17++] = v15;
      if (v17 == 128)
      {
        for (uint64_t i = 0; i != 128; ++i)
          SIValueSet<unsigned long long>::_SIValueSetInnerInsert(v9, v45[i], v10, a3);
        goto LABEL_7;
      }
    }
  }
  if (v11 >= 16)
  {
    uint64_t v20 = *((unsigned int *)a1 + 2);
    if (v20 > 0x3F) {
      goto LABEL_71;
    }
    uint64_t v44 = &v43;
    CFAllocatorRef v21 = (unsigned int *)a1 + 3;
    unint64_t v22 = (unint64_t)a1 + 4 * v20 + 12;
    bzero(v45, 0x400uLL);
    unsigned int v23 = 0;
    int v24 = 0;
LABEL_26:
    uint64_t v25 = 0;
    while (1)
    {
      if (v24)
      {
        --v24;
        ++v23;
      }
      else
      {
        if ((unint64_t)v21 >= v22)
        {
          if (v25)
          {
            uint64_t v38 = v45;
            do
            {
              uint64_t v39 = *v38++;
              SIValueSet<unsigned long long>::_SIValueSetInnerInsert(v9, v39, v10, a3);
              --v25;
            }
            while (v25);
          }
          goto LABEL_71;
        }
        unsigned int v23 = *v21;
        if ((unint64_t)(v21 + 1) >= v22)
        {
          int v24 = 0;
          ++v21;
        }
        else
        {
          int v26 = v21[1];
          if (v26 < 0) {
            v21 += 2;
          }
          else {
            ++v21;
          }
          if (v26 < 0) {
            int v24 = v26 & 0x7FFFFFFF;
          }
          else {
            int v24 = 0;
          }
        }
      }
      v45[v25++] = v23;
      if (v25 == 128)
      {
        for (uint64_t j = 0; j != 128; ++j)
          SIValueSet<unsigned long long>::_SIValueSetInnerInsert(v9, v45[j], v10, a3);
        goto LABEL_26;
      }
    }
  }
  unint64_t v30 = *((unsigned __int16 *)a1 + 4);
  if (v30 > 0x3F) {
    goto LABEL_71;
  }
  uint64_t v44 = &v43;
  uint64_t v31 = (unsigned __int16 *)a1 + 5;
  unint64_t v32 = (unint64_t)a1 + 2 * v30 + 10;
  bzero(v45, 0x400uLL);
  unsigned __int16 v33 = 0;
  __int16 v34 = 0;
LABEL_48:
  uint64_t v35 = 0;
  while (v34)
  {
    --v34;
    ++v33;
LABEL_60:
    v45[v35++] = v33;
    if (v35 == 128)
    {
      for (uint64_t k = 0; k != 128; ++k)
        SIValueSet<unsigned long long>::_SIValueSetInnerInsert(v9, v45[k], v10, a3);
      goto LABEL_48;
    }
  }
  if ((unint64_t)v31 < v32)
  {
    unsigned __int16 v33 = *v31;
    if ((unint64_t)(v31 + 1) >= v32)
    {
      __int16 v34 = 0;
      ++v31;
    }
    else
    {
      int v36 = (__int16)v31[1];
      if (v36 < 0) {
        __int16 v34 = v36 & 0x7FFF;
      }
      else {
        __int16 v34 = 0;
      }
      if (v36 < 0) {
        v31 += 2;
      }
      else {
        ++v31;
      }
    }
    goto LABEL_60;
  }
  if (v35)
  {
    uint64_t v40 = v45;
    do
    {
      uint64_t v41 = *v40++;
      SIValueSet<unsigned long long>::_SIValueSetInnerInsert(v9, v41, v10, a3);
      --v35;
    }
    while (v35);
  }
LABEL_71:
  (*(void (**)(void *))(*a1 + 72))(a1);
  CFAllocatorDeallocate(*(CFAllocatorRef *)(a3 + 16), a1);
  return v9 | 1;
}

uint64_t SIValueSet<unsigned long long>::BitmapHolder::valueIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = &unk_1F1810F40;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = a1 + 8;
  *(_WORD *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = a2;
  return a3;
}

void SIValueSet<unsigned long long>::BitmapHolder::BitmapIterator::~BitmapIterator()
{
}

uint64_t SIValueSet<unsigned long long>::BitmapHolder::BitmapIterator::hasMore(uint64_t a1)
{
  int v1 = *(__int16 *)(a1 + 24);
  if (v1 > 4095) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  while (1)
  {
    unint64_t v3 = *(void *)(v2 + 8 * ((__int16)v1 >> 6));
    if (v3) {
      break;
    }
    v1 += 64;
    *(_WORD *)(a1 + 24) = v1;
LABEL_9:
    if ((__int16)v1 >= 4096) {
      return 0;
    }
  }
  uint64_t v4 = v1 & 0x3F;
  while (((v3 >> v4) & 1) == 0)
  {
    *(_WORD *)(a1 + 24) = ++v1;
    if (++v4 == 64) {
      goto LABEL_9;
    }
  }
  return 1;
}

uint64_t SIValueSet<unsigned long long>::BitmapHolder::BitmapIterator::nextKey(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(__int16 *)(a1 + 24);
  if (v2 > 4095) {
    return v1;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  while (!*(void *)(v3 + 8 * ((__int16)v2 >> 6)))
  {
    int v4 = (__int16)v2;
    LOWORD(v2) = v2 + 64;
    *(_WORD *)(a1 + 24) = v2;
    if (v4 >= 4032) {
      return v1;
    }
  }
  uint64_t v6 = *(void *)(a1 + 8);
  *(_WORD *)(a1 + 24) = v2 + 1;
  return v6 | (__int16)v2 | v1;
}

void SIValueSet<unsigned long long>::BitmapHolder::~BitmapHolder()
{
}

uint64_t SIValueSet<unsigned long long>::BitmapHolder::Serialize(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, void))(*(void *)a2 + 8))(a2, 0);
  int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16);
  return v4(a2, a1 + 8, 512);
}

uint64_t SIValueSet<unsigned long long>::BitmapHolder::GetRawCount()
{
  return 61;
}

uint64_t SIValueSet<unsigned long long>::BitmapHolder::IsEmpty(uint64_t a1)
{
  LOWORD(v1) = 0;
  while (1)
  {
    unint64_t v2 = *(void *)(a1 + 8 + 8 * ((__int16)v1 >> 6));
    if (v2) {
      break;
    }
LABEL_2:
    int v1 = (__int16)(v1 + 64);
    if (v1 >= 4096) {
      return 1;
    }
  }
  uint64_t v3 = v1 & 0x3F;
  LOWORD(v1) = v1 & 0xFFC0;
  while (((v2 >> v3) & 1) == 0)
  {
    if (++v3 == 64) {
      goto LABEL_2;
    }
  }
  return 0;
}

void SIValueSet<unsigned long long>::BitmapHolder::Apply(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, uint64_t, uint64_t), uint64_t a5)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  MEMORY[0x1F4188790](a1);
  int v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v11, v10);
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v14 = a1 + 8;
  do
  {
    while (1)
    {
      unint64_t v15 = *(void *)(v14 + 8 * ((__int16)v13 >> 6));
      if (v15) {
        break;
      }
LABEL_2:
      int v13 = (__int16)(v13 + 64);
      if (v13 >= 4096) {
        goto LABEL_16;
      }
    }
    uint64_t v16 = v13 & 0x3F;
    __int16 v17 = v13 & 0xFFC0;
    while (((v15 >> v16) & 1) == 0)
    {
      ++v13;
      if (++v16 == 64)
      {
        LOWORD(v13) = v17;
        goto LABEL_2;
      }
    }
    if ((__int16)v13 > 4095)
    {
LABEL_11:
      uint64_t v19 = 0;
    }
    else
    {
      while (!*(void *)(v14 + 8 * ((__int16)v13 >> 6)))
      {
        int v18 = (__int16)v13;
        v13 += 64;
        if (v18 >= 4032) {
          goto LABEL_11;
        }
      }
      LOWORD(v19) = v13++;
      uint64_t v19 = (__int16)v19;
    }
    *(void *)&v11[8 * v12++] = v19 | a3;
    if (v12 == a2)
    {
      char v20 = a4(v11, a2, a5);
      uint64_t v12 = 0;
      if (v20) {
        break;
      }
    }
  }
  while ((__int16)v13 < 4096);
LABEL_16:
  if (v12) {
    a4(v11, v12, a5);
  }
}

BOOL SIValueSet<unsigned long long>::BitmapHolder::RemoveKey(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = 1 << (a3 & a2);
  uint64_t v4 = a1 + 8 * ((a3 & a2) << 16 >> 22);
  uint64_t v7 = *(void *)(v4 + 8);
  int v5 = (uint64_t *)(v4 + 8);
  uint64_t v6 = v7;
  uint64_t v8 = v7 & v3;
  if ((v7 & v3) != 0) {
    *int v5 = v6 ^ v3;
  }
  return v8 != 0;
}

uint64_t SIValueSet<unsigned long long>::BitmapHolder::CloseKey(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(void *)(a1 + 8 * ((int)((a3 & a2) << 16) >> 22) + 8) >> (a3 & a2))) {
    return a2;
  }
  uint64_t v4 = a2;
  LOWORD(v5) = a3 & a2;
  while (1)
  {
    int v5 = (__int16)(v5 + 1);
    if (v5 >= 64) {
      break;
    }
    ++v4;
    if ((*(void *)(a1 + 8 * (v5 >> 6) + 8) >> v5)) {
      return v4;
    }
  }
  unsigned int v6 = (unsigned __int16)(a3 & a2);
  uint64_t v4 = a2;
  while ((__int16)v6 >= 1)
  {
    --v6;
    --v4;
    if ((*(void *)(a1 + 8 * (v6 >> 6) + 8) >> v6)) {
      return v4;
    }
  }
  return 0;
}

uint64_t SIValueSet<unsigned long long>::BitmapHolder::ContainsKey(uint64_t a1, int a2, int a3)
{
  return (*(void *)(a1 + 8 * ((a3 & a2) << 16 >> 22) + 8) >> (a3 & a2)) & 1;
}

BOOL SIValueSet<unsigned long long>::BitmapHolder::AddKey(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = 1 << (a3 & a2);
  uint64_t v4 = a1 + ((uint64_t)((unint64_t)((a3 & a2) << 16 >> 22) << 48) >> 45);
  uint64_t v7 = *(void *)(v4 + 8);
  int v5 = (uint64_t *)(v4 + 8);
  uint64_t v6 = v7;
  uint64_t v8 = v7 & v3;
  if ((v7 & v3) == 0) {
    *int v5 = v6 | v3;
  }
  return v8 == 0;
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::valueIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned __int16 *)(a1 + 8);
  *(void *)a3 = &unk_1F18110B8;
  *(void *)(a3 + 8) = a1 + 10;
  *(void *)(a3 + 16) = a1 + 10 + 2 * v3;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = a2;
  return a3;
}

void SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::RLEKeyIterator::~RLEKeyIterator()
{
}

BOOL SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::RLEKeyIterator::hasMore(uint64_t a1)
{
  return *(_WORD *)(a1 + 26) || *(void *)(a1 + 8) < *(void *)(a1 + 16);
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::RLEKeyIterator::nextKey(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_WORD *)(a1 + 26))
  {
    --*(_WORD *)(a1 + 26);
    unsigned __int16 v2 = *(_WORD *)(a1 + 24) + 1;
    *(_WORD *)(a1 + 24) = v2;
  }
  else
  {
    uint64_t v3 = *(unsigned __int16 **)(a1 + 8);
    unint64_t v4 = *(void *)(a1 + 16);
    unsigned __int16 v2 = *v3;
    *(void *)(a1 + 8) = v3 + 1;
    *(_WORD *)(a1 + 24) = v2;
    if ((unint64_t)(v3 + 1) < v4)
    {
      int v5 = (__int16)v3[1];
      if (v5 < 0)
      {
        *(void *)(a1 + 8) = v3 + 2;
        *(_WORD *)(a1 + 26) = v5 & 0x7FFF;
      }
    }
  }
  return v1 | v2;
}

void SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::~RLEKeyHolder()
{
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::Serialize(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, 2);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 8))(a2, *(unsigned __int16 *)(a1 + 8));
  uint64_t v4 = 2 * *(unsigned __int16 *)(a1 + 8);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16);
  return v5(a2, a1 + 10, v4);
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::GetRawCount(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 8);
}

BOOL SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::IsEmpty(uint64_t a1)
{
  return *(_WORD *)(a1 + 8) == 0;
}

void SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::Apply(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(char *, uint64_t, uint64_t), uint64_t a5)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  int v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = *(unsigned __int16 *)(v9 + 8);
  if (v12 > 0x3F) {
    return;
  }
  int v13 = (unsigned __int16 *)(v9 + 10);
  unint64_t v14 = v9 + 10 + 2 * v12;
  bzero((char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  unsigned __int16 v15 = 0;
  __int16 v16 = 0;
LABEL_3:
  uint64_t v17 = 0;
  while (v16)
  {
    --v16;
    ++v15;
LABEL_15:
    *(void *)&v11[8 * v17++] = v15 | a3;
    if (v17 == a2)
    {
      a4(v11, a2, a5);
      goto LABEL_3;
    }
  }
  if ((unint64_t)v13 < v14)
  {
    unsigned __int16 v15 = *v13;
    if ((unint64_t)(v13 + 1) >= v14)
    {
      __int16 v16 = 0;
      ++v13;
    }
    else
    {
      int v18 = (__int16)v13[1];
      if (v18 < 0) {
        __int16 v16 = v18 & 0x7FFF;
      }
      else {
        __int16 v16 = 0;
      }
      if (v18 < 0) {
        v13 += 2;
      }
      else {
        ++v13;
      }
    }
    goto LABEL_15;
  }
  if (v17) {
    a4(v11, v17, a5);
  }
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::RemoveKey(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  unint64_t v4 = a2 & a3 & 0x7FFF;
  unint64_t v5 = a1 + 10;
  unint64_t v6 = *(unsigned __int16 *)(a1 + 8);
  unint64_t v7 = a1 + 10 + 2 * v6;
  if (v6 >= 3)
  {
    uint64_t v9 = 2 * v6;
    unint64_t v10 = a1 + 10 + 2 * v6;
    uint64_t v8 = (__int16 *)(a1 + 10);
    do
    {
      int v11 = &v8[v9 >> 2];
      int v12 = *v11;
      if (v12 < 0)
      {
        __int16 v13 = *--v11;
        LOWORD(v12) = v13;
      }
      if (v11 <= v8) {
        break;
      }
      if (v4 == (unsigned __int16)v12)
      {
        uint64_t v8 = v11;
        if ((unint64_t)v11 >= v7) {
          return 0;
        }
        goto LABEL_17;
      }
      if ((unsigned __int16)v12 > v4) {
        unint64_t v10 = (unint64_t)v11;
      }
      else {
        uint64_t v8 = v11;
      }
      uint64_t v9 = v10 - (void)v8;
    }
    while (v10 > (unint64_t)v8 && (unint64_t)v9 > 5);
    if ((unint64_t)v8 >= v7) {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = (__int16 *)(a1 + 10);
    if (v5 >= v7) {
      return 0;
    }
  }
LABEL_17:
  __int16 v16 = v8 + 1;
  unint64_t v15 = (unsigned __int16)*v8;
  if (v4 == v15)
  {
    if ((unint64_t)v16 >= v7) {
      goto LABEL_43;
    }
    goto LABEL_35;
  }
  while (1)
  {
    if ((v15 & 0x8000) == 0)
    {
      uint64_t result = 0;
      if (v4 < v15 || (unint64_t)v16 >= v7) {
        return result;
      }
      goto LABEL_20;
    }
    unint64_t v19 = (unsigned __int16)*(v16 - 2);
    unint64_t v20 = (unsigned __int16)(v19 + (v15 & 0x7FFF));
    if (v4 > v19 && v4 <= v20) {
      break;
    }
    if ((unint64_t)v16 >= v7) {
      return 0;
    }
LABEL_20:
    unsigned int v17 = (unsigned __int16)*v16++;
    unint64_t v15 = v17;
    if (v4 == v17)
    {
      uint64_t v8 = v16 - 1;
      if ((unint64_t)v16 >= v7) {
        goto LABEL_43;
      }
LABEL_35:
      int v22 = (__int16)*v16;
      if ((v22 & 0x80000000) == 0)
      {
        size_t v23 = v7 - (void)v16;
        int v24 = v16;
LABEL_39:
        memmove(v8, v24, v23);
        __int16 v25 = *(_WORD *)(a1 + 8) - 1;
        goto LABEL_44;
      }
      __int16 *v8 = v15 + 1;
      if ((v22 & 0x7FFF) == 1)
      {
        int v24 = v8 + 2;
        size_t v23 = v7 - (void)(v8 + 2);
        uint64_t v8 = v16;
        goto LABEL_39;
      }
      __int16 v27 = v22 - 1;
      goto LABEL_48;
    }
  }
  int v26 = v16 - 1;
  if ((v15 & 0x7FFF) != 1)
  {
    if (v4 == v20)
    {
      *int v26 = (v15 - 1) | 0x8000;
      return 1;
    }
    if (v4 == v19 + 1)
    {
      *int v26 = v4 + 1;
      if (!(~v4 + v20)) {
        return 1;
      }
      unint64_t v29 = *(unsigned __int16 *)(a1 + 8);
      if (v29 < 0x3F)
      {
        uint64_t v30 = (uint64_t)((uint64_t)v16 - v5) >> 1;
        if (v29 != v30)
        {
          memmove(v16 + 1, v16, 2 * (v29 - v30));
          LOWORD(v29) = *(_WORD *)(a1 + 8);
        }
        *(_WORD *)(a1 + 8) = v29 + 1;
        __int16 v27 = v20 + ~(_WORD)v4;
LABEL_48:
        __int16 v28 = v27 | 0x8000;
LABEL_49:
        _WORD *v16 = v28;
        return 1;
      }
    }
    else
    {
      *(v16 - 1) = (v4 + ~(_WORD)v19) | 0x8000;
      unint64_t v31 = *(unsigned __int16 *)(a1 + 8);
      if (v31 < 0x3F)
      {
        uint64_t v32 = (uint64_t)((uint64_t)v16 - v5) >> 1;
        if (v31 != v32)
        {
          memmove(v16 + 1, v16, 2 * (v31 - v32));
          LOWORD(v31) = *(_WORD *)(a1 + 8);
        }
        *(_WORD *)(a1 + 8) = v31 + 1;
        _WORD *v16 = v4 + 1;
        __int16 v33 = ~(_WORD)v4;
        __int16 v34 = v20 + ~(_WORD)v4;
        if (!((_WORD)v20 + v33)) {
          return 1;
        }
        unint64_t v35 = *(unsigned __int16 *)(a1 + 8);
        if (v35 < 0x3F)
        {
          ++v16;
          uint64_t v36 = (uint64_t)((uint64_t)v26 - v5 + 4) >> 1;
          if (v35 != v36)
          {
            memmove(v26 + 3, v26 + 2, 2 * (v35 - v36));
            LOWORD(v35) = *(_WORD *)(a1 + 8);
          }
          *(_WORD *)(a1 + 8) = v35 + 1;
          __int16 v28 = v34 | 0x8000;
          goto LABEL_49;
        }
      }
    }
    unsigned int v37 = __si_assert_copy_extra_329();
    uint64_t v38 = v37;
    if (v37) {
      uint64_t v39 = v37;
    }
    else {
      uint64_t v39 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "SIValueSetInternals.h", 649, v39);
    free(v38);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  if ((unint64_t)v16 < v7)
  {
    memmove(v16 - 1, v16, v7 - (void)v16);
    LOWORD(v6) = *(_WORD *)(a1 + 8);
  }
LABEL_43:
  __int16 v25 = v6 - 1;
LABEL_44:
  *(_WORD *)(a1 + 8) = v25;
  return 1;
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::CloseKey(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v3 = *(unsigned __int16 *)(a1 + 8);
  if (!*(_WORD *)(a1 + 8)) {
    return 0;
  }
  unint64_t v4 = a2 & a3 & 0x7FFFLL;
  unint64_t v5 = (__int16 *)(a1 + 10);
  unint64_t v6 = a1 + 10 + 2 * v3;
  if (v3 < 3)
  {
LABEL_16:
    if ((unint64_t)v5 >= v6)
    {
LABEL_31:
      uint64_t v20 = a1 + 2 * v3;
      unint64_t v17 = *(unsigned __int16 *)(v20 + 8);
      if (*(__int16 *)(v20 + 8) < 0) {
        return (v17 & 0x7FFF) + *(unsigned __int16 *)(v20 + 6);
      }
      else {
        return v17;
      }
    }
  }
  else
  {
    uint64_t v7 = 2 * v3;
    unint64_t v8 = a1 + 10 + 2 * v3;
    while (1)
    {
      uint64_t v9 = &v5[v7 >> 2];
      if (*v9 < 0)
      {
        unsigned int v11 = (unsigned __int16)*--v9;
        unsigned int v10 = v11;
        if (v9 <= v5) {
          goto LABEL_16;
        }
      }
      else
      {
        unsigned int v10 = (unsigned __int16)*v9;
        if (v9 <= v5) {
          goto LABEL_16;
        }
      }
      if (v10 == v4) {
        break;
      }
      if (v10 > v4) {
        unint64_t v8 = (unint64_t)v9;
      }
      else {
        unint64_t v5 = v9;
      }
      uint64_t v7 = v8 - (void)v5;
      if (v8 <= (unint64_t)v5 || (unint64_t)v7 <= 5) {
        goto LABEL_16;
      }
    }
    unint64_t v5 = v9;
    if ((unint64_t)v9 >= v6) {
      goto LABEL_31;
    }
  }
  __int16 v13 = (unsigned __int16 *)v5;
  while (1)
  {
    unsigned int v18 = *v13++;
    unint64_t v17 = v18;
    if (v4 == v18) {
      return a2 & a3 & 0x7FFFLL;
    }
    if ((v17 & 0x8000) != 0)
    {
      unint64_t v14 = (unsigned __int16)*(v5 - 1);
      unint64_t v15 = v14 + (v17 & 0x7FFF);
      if (v4 >= v14 && v4 <= v15) {
        return a2 & a3 & 0x7FFFLL;
      }
    }
    else if (v4 < v17)
    {
      return v17;
    }
    unint64_t v5 = (__int16 *)v13;
    if ((unint64_t)v13 >= v6) {
      goto LABEL_31;
    }
  }
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::ContainsKey(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  unint64_t v3 = a2 & a3 & 0x7FFF;
  unint64_t v4 = (__int16 *)(a1 + 10);
  unint64_t v5 = *(unsigned __int16 *)(a1 + 8);
  unint64_t v6 = a1 + 10 + 2 * v5;
  if (v5 < 3)
  {
LABEL_15:
    if ((unint64_t)v4 >= v6) {
      return 0;
    }
  }
  else
  {
    uint64_t v7 = 2 * v5;
    unint64_t v8 = a1 + 10 + 2 * v5;
    while (1)
    {
      uint64_t v9 = &v4[v7 >> 2];
      if (*v9 < 0)
      {
        unsigned int v11 = (unsigned __int16)*--v9;
        unsigned int v10 = v11;
        if (v9 <= v4) {
          goto LABEL_15;
        }
      }
      else
      {
        unsigned int v10 = (unsigned __int16)*v9;
        if (v9 <= v4) {
          goto LABEL_15;
        }
      }
      if (v10 == v3) {
        break;
      }
      if (v10 > v3) {
        unint64_t v8 = (unint64_t)v9;
      }
      else {
        unint64_t v4 = v9;
      }
      uint64_t v7 = v8 - (void)v4;
      if (v8 <= (unint64_t)v4 || (unint64_t)v7 <= 5) {
        goto LABEL_15;
      }
    }
    unint64_t v4 = v9;
    if ((unint64_t)v9 >= v6) {
      return 0;
    }
  }
  unint64_t v13 = (unsigned __int16)*v4;
  if (v3 != v13)
  {
    unint64_t v15 = (unsigned __int16 *)(v4 + 1);
    __int16 v16 = v13;
    do
    {
      if (v16 < 0)
      {
        unint64_t v18 = *(v15 - 2);
        unint64_t v19 = v18 + (v16 & 0x7FFF);
        if (v3 >= v18 && v3 <= v19) {
          return 1;
        }
        if ((unint64_t)v15 >= v6) {
          return 0;
        }
      }
      else
      {
        uint64_t result = 0;
        if (v3 < v13 || (unint64_t)v15 >= v6) {
          return result;
        }
      }
      unsigned int v17 = *v15++;
      unint64_t v13 = v17;
      __int16 v16 = v17;
    }
    while (v3 != v17);
  }
  return 1;
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::AddSortedKeysWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  if (*a2 >= a2[1] || (uint64_t *)((unint64_t)a2[3] & **a2) != a2[2]) {
    return 0;
  }
  unsigned __int16 v6 = SIValueSet<unsigned long long>::FlatContextWithPfx::peek(a2);
  unsigned __int16 v7 = v6;
  unint64_t v8 = *(unsigned __int16 *)(a1 + 8);
  unint64_t v9 = a1 + 10 + 2 * v8;
  unsigned int v10 = (__int16 *)(a1 + 10);
  if (v8 >= 3)
  {
    uint64_t v11 = 2 * v8;
    unint64_t v12 = a1 + 10 + 2 * v8;
    unsigned int v10 = (__int16 *)(a1 + 10);
    do
    {
      unint64_t v13 = &v10[v11 >> 2];
      int v14 = *v13;
      if (v14 < 0)
      {
        __int16 v15 = *--v13;
        LOWORD(v14) = v15;
      }
      if (v13 <= v10) {
        break;
      }
      if ((unsigned __int16)v14 == v6)
      {
        unsigned int v10 = v13;
        break;
      }
      if ((unsigned __int16)v14 > v6) {
        unint64_t v12 = (unint64_t)v13;
      }
      else {
        unsigned int v10 = v13;
      }
      uint64_t v11 = v12 - (void)v10;
    }
    while (v12 > (unint64_t)v10 && (unint64_t)v11 > 5);
  }
  uint64_t v67 = a1;
  int v68 = a1 + 10;
  int v18 = 0;
  uint64_t result = 0;
  unint64_t v19 = a1 + 136;
  uint64_t v20 = v10;
  int v21 = 1;
  uint64_t v72 = a3;
  unint64_t v70 = v19;
  while (2)
  {
    uint64_t v71 = v20;
    LOWORD(v23) = 0;
    uint64_t v24 = 0;
    __int16 v25 = v10;
    while (1)
    {
      uint64_t v27 = v24;
      unsigned __int16 v28 = v23;
      if ((unint64_t)v25 >= v9) {
        break;
      }
LABEL_29:
      unsigned int v23 = (unsigned __int16)*v25;
      if (v23 > v7) {
        break;
      }
      int v30 = 1;
LABEL_53:
      if ((unint64_t)(v25 + 1) >= v9)
      {
        uint64_t v42 = 1;
        uint64_t v24 = 1;
        if (v27) {
          goto LABEL_60;
        }
      }
      else
      {
        int v39 = v25[1];
        uint64_t v40 = v39 & 0x7FFF;
        BOOL v41 = v39 >= 0;
        uint64_t v42 = 2;
        if (v41)
        {
          uint64_t v42 = 1;
          uint64_t v24 = 1;
        }
        else
        {
          uint64_t v24 = v40 + 1;
        }
        if (v27)
        {
LABEL_60:
          unint64_t v43 = v24 + v23;
          if (v27 + (unint64_t)v28 < v23 || v43 < v28) {
            goto LABEL_73;
          }
          uint64_t v45 = v27 - v24 + v28;
          unint64_t v46 = v45 + v23;
          BOOL v47 = v28 > v23;
          if (v28 < v23) {
            unsigned int v23 = v28;
          }
          if (!v47)
          {
            uint64_t v45 = v27;
            unint64_t v46 = v27 + v28;
          }
          if (v43 > v46) {
            uint64_t v24 = v45 + v43 - v46;
          }
          else {
            uint64_t v24 = v45;
          }
        }
      }
      v25 += v42;
      if (v24 + (unint64_t)v23 >= v7) {
        char v26 = v30;
      }
      else {
        char v26 = 0;
      }
      if ((v26 & 1) == 0) {
        goto LABEL_74;
      }
    }
    while (2)
    {
      if (!v27)
      {
        uint64_t v27 = 1;
        unsigned __int16 v28 = v7;
LABEL_39:
        int v31 = 1;
        goto LABEL_40;
      }
      unint64_t v29 = v27 + v28;
      int v30 = 1;
      if (v29 < v7 || (unint64_t)v7 + 1 < v28) {
        goto LABEL_51;
      }
      if (v28 <= v7)
      {
        int v31 = 0;
        if (v29 > v7) {
          goto LABEL_40;
        }
        goto LABEL_38;
      }
      uint64_t v27 = v27 + v28 - 1;
      unint64_t v29 = v27 + v7;
      int v31 = 1;
      unsigned __int16 v28 = v7;
      if (v29 <= v7)
      {
LABEL_38:
        uint64_t v27 = v27 + v7 + 1 - v29;
        goto LABEL_39;
      }
LABEL_40:
      uint64_t v32 = *a2 + 1;
      uint64_t v33 = **a2;
      *a2 = v32;
      unint64_t v34 = (unint64_t)a2[3];
      if ((uint64_t *)(v34 & v33) != a2[2])
      {
        unsigned int v51 = __si_assert_copy_extra_329();
        unint64_t v52 = v51;
        int v53 = "";
        if (v51) {
          int v53 = v51;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 172, "(key & fMask) == fPfx", v53);
LABEL_92:
        free(v52);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      if (v7 != (unsigned __int16)(v33 & ~(_WORD)v34))
      {
        uint64_t v54 = __si_assert_copy_extra_329();
        BOOL v55 = v54;
        uint64_t v56 = "";
        if (v54) {
          uint64_t v56 = v54;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 761, "v==key", v56);
        goto LABEL_97;
      }
      if (v31)
      {
        ++result;
      }
      else if (v72)
      {
        uint64_t v35 = result;
        unint64_t v36 = v9;
        SIValueSet<unsigned long long>::SIValueSetInsert(*(unint64_t **)(v72 + 8), *(void *)v72 | v7);
        uint64_t result = v35;
        unint64_t v9 = v36;
        uint64_t v32 = *a2;
      }
      if (v32 < a2[1])
      {
        uint64_t v37 = *v32;
        unint64_t v38 = (unint64_t)a2[3];
        if ((uint64_t *)(v38 & v37) == a2[2])
        {
          unsigned __int16 v7 = v37 & ~(_WORD)v38;
          ++v21;
          ++v18;
          if ((unint64_t)v25 < v9) {
            goto LABEL_29;
          }
          continue;
        }
      }
      break;
    }
    int v30 = 0;
    ++v18;
LABEL_51:
    if ((unint64_t)v25 < v9)
    {
      unsigned int v23 = (unsigned __int16)*v25;
      goto LABEL_53;
    }
LABEL_73:
    LOWORD(v23) = v28;
    uint64_t v24 = v27;
LABEL_74:
    if (v24 == 1)
    {
      int v49 = v71;
      if (v71 >= v25)
      {
        if (v9 + 4 > v70) {
          goto LABEL_114;
        }
        unsigned int v10 = (__int16 *)(v70 - (v9 - (void)v25));
        if ((__int16 *)v9 != v25)
        {
          uint64_t v50 = result;
          memmove((void *)(v70 - (v9 - (void)v25)), v25, v9 - (void)v25);
          uint64_t result = v50;
          int v49 = v71;
        }
        unint64_t v9 = v70;
        unint64_t v22 = v70;
      }
      else
      {
        unsigned int v10 = v25;
        unint64_t v22 = v70;
      }
      __int16 *v49 = v23;
      uint64_t v20 = v49 + 1;
      if (v30) {
        goto LABEL_22;
      }
      goto LABEL_88;
    }
    if (v24)
    {
      BOOL v48 = v71 + 1;
      if (v71 + 1 < v25)
      {
        unsigned int v10 = v25;
        unint64_t v22 = v70;
        goto LABEL_21;
      }
      if (v9 + 4 <= v70)
      {
        unsigned int v10 = (__int16 *)(v70 - (v9 - (void)v25));
        if ((__int16 *)v9 != v25)
        {
          uint64_t v69 = result;
          memmove((void *)(v70 - (v9 - (void)v25)), v25, v9 - (void)v25);
          BOOL v48 = v71 + 1;
          uint64_t result = v69;
        }
        unint64_t v9 = v70;
        unint64_t v22 = v70;
LABEL_21:
        __int16 *v71 = v23;
        v71[1] = (v24 - 1) | 0x8000;
        uint64_t v20 = v48 + 1;
        if (v30)
        {
LABEL_22:
          if ((unint64_t)v20 + v9 - (void)v10 + 4 > v22) {
            goto LABEL_103;
          }
          continue;
        }
LABEL_88:
        __int16 v25 = v10;
LABEL_107:
        unsigned int v10 = v25;
        if (v18 == v21) {
          goto LABEL_108;
        }
        uint64_t v62 = __si_assert_copy_extra_329();
        BOOL v55 = v62;
        unint64_t v63 = "";
        if (v62) {
          unint64_t v63 = v62;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 811, "popped==peeked", v63);
LABEL_97:
        free(v55);
        if (__valid_fs(-1)) {
LABEL_98:
        }
          uint64_t v57 = 2989;
        else {
          uint64_t v57 = 3072;
        }
        *(_DWORD *)uint64_t v57 = -559038737;
        abort();
      }
LABEL_114:
      uint64_t v64 = __si_assert_copy_extra_329();
      uint64_t v65 = v64;
      if (v64) {
        unint64_t v66 = v64;
      }
      else {
        unint64_t v66 = "";
      }
      __message_assert("%s:%u: Unexpected code path %s ", "SIValueSetInternals.h", 626, v66);
      free(v65);
      goto LABEL_98;
    }
    break;
  }
  unsigned int v10 = v25;
  uint64_t v20 = v71;
  if (!v30) {
    goto LABEL_107;
  }
LABEL_103:
  if (v18 >= v21)
  {
    uint64_t v58 = __si_assert_copy_extra_329();
    unint64_t v52 = v58;
    unint64_t v59 = "";
    if (v58) {
      unint64_t v59 = v58;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 810, "popped<peeked", v59);
    goto LABEL_92;
  }
LABEL_108:
  int v60 = v9 - v10;
  if (v9 > (unint64_t)v10)
  {
    uint64_t v61 = result;
    memmove(v20, v10, v9 - (void)v10);
    uint64_t result = v61;
    LODWORD(v20) = v20 + v60;
  }
  *(_WORD *)(v67 + 8) = (v20 - v68) >> 1;
  return result;
}

BOOL SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::AddKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LOWORD(v3) = a3 & a2;
  uint64_t v76 = a3 & a2;
  unint64_t v4 = *(unsigned __int16 *)(a1 + 8);
  unint64_t v5 = a1 + 10 + 2 * v4;
  unsigned __int16 v6 = (__int16 *)(a1 + 10);
  if (v4 >= 3)
  {
    uint64_t v7 = 2 * v4;
    unint64_t v8 = a1 + 10 + 2 * v4;
    unsigned __int16 v6 = (__int16 *)(a1 + 10);
    do
    {
      unint64_t v9 = &v6[v7 >> 2];
      int v10 = *v9;
      if (v10 < 0)
      {
        __int16 v11 = *--v9;
        LOWORD(v10) = v11;
      }
      if (v9 <= v6) {
        break;
      }
      if ((unsigned __int16)v10 == (unsigned __int16)v3)
      {
        unsigned __int16 v6 = v9;
        break;
      }
      if ((unsigned __int16)v10 > (unsigned __int16)v3) {
        unint64_t v8 = (unint64_t)v9;
      }
      else {
        unsigned __int16 v6 = v9;
      }
      uint64_t v7 = v8 - (void)v6;
    }
    while (v8 > (unint64_t)v6 && (unint64_t)v7 > 5);
  }
  int v68 = a1 + 10;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  unint64_t v15 = a1 + 136;
  __int16 v16 = (unsigned __int16 *)&v76;
  unsigned int v17 = v6;
  int v18 = 1;
  while (2)
  {
    unsigned __int16 v19 = 0;
    uint64_t v20 = 0;
    int v21 = v6;
    while (2)
    {
      if ((unint64_t)v21 >= v5)
      {
        v16 += 4;
        BOOL v41 = v16 - 4;
        if (!v20) {
          goto LABEL_73;
        }
LABEL_61:
        unint64_t v42 = v20 + v19;
        if (v42 < (unsigned __int16)v3 || (unint64_t)(unsigned __int16)v3 + 1 < v19)
        {
          int v40 = 1;
          __int16 v16 = v41;
          goto LABEL_81;
        }
        unsigned int v43 = v19;
        uint64_t v44 = v20 + v19 - 1;
        unint64_t v45 = v44 + (unsigned __int16)v3;
        if (v19 > (unsigned __int16)v3) {
          unsigned __int16 v19 = v3;
        }
        if (v43 <= (unsigned __int16)v3)
        {
          int v46 = 0;
        }
        else
        {
          uint64_t v20 = v44;
          int v46 = 1;
        }
        if (v43 > (unsigned __int16)v3) {
          unint64_t v42 = v45;
        }
        if (v42 > (unsigned __int16)v3)
        {
          unsigned int v47 = v46;
        }
        else
        {
          uint64_t v20 = v20 + (unsigned __int16)v3 + 1 - v42;
          unsigned int v47 = 1;
        }
        while (*v41 == (unsigned __int16)v3)
        {
          v14 += v47;
          if (v41 >= (unsigned __int16 *)&v76)
          {
            int v40 = 0;
            uint64_t v13 = (v13 + 1);
            goto LABEL_81;
          }
          unsigned __int16 v48 = *v16;
          v16 += 4;
          LOWORD(v3) = v48;
          ++v18;
          uint64_t v13 = (v13 + 1);
          BOOL v41 = v16 - 4;
          if (v20) {
            goto LABEL_61;
          }
LABEL_73:
          uint64_t v20 = 1;
          unsigned __int16 v19 = v3;
          unsigned int v47 = 1;
        }
LABEL_110:
        int v53 = __si_assert_copy_extra_329();
        uint64_t v54 = v53;
        BOOL v55 = "";
        if (v53) {
          BOOL v55 = v53;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 761, "v==key", v55);
LABEL_113:
        free(v54);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      unsigned int v28 = (unsigned __int16)*v21;
      if (v28 <= (unsigned __int16)v3)
      {
        int v40 = 1;
        goto LABEL_83;
      }
      int v31 = v16 + 4;
      uint64_t v32 = v13;
      while (1)
      {
        uint64_t v13 = v32;
        __int16 v16 = v31;
        uint64_t v33 = v31 - 4;
        if (!v20)
        {
          uint64_t v20 = 1;
          unsigned __int16 v19 = v3;
          unsigned int v39 = 1;
          goto LABEL_56;
        }
        unint64_t v34 = v20 + v19;
        if (v34 < (unsigned __int16)v3 || (unint64_t)(unsigned __int16)v3 + 1 < v19) {
          break;
        }
        unsigned int v35 = v19;
        uint64_t v36 = v20 + v19 - 1;
        unint64_t v37 = v36 + (unsigned __int16)v3;
        if (v19 > (unsigned __int16)v3) {
          unsigned __int16 v19 = v3;
        }
        if (v35 <= (unsigned __int16)v3)
        {
          int v38 = 0;
        }
        else
        {
          uint64_t v20 = v36;
          int v38 = 1;
        }
        if (v35 > (unsigned __int16)v3) {
          unint64_t v34 = v37;
        }
        if (v34 > (unsigned __int16)v3)
        {
          unsigned int v39 = v38;
        }
        else
        {
          uint64_t v20 = v20 + (unsigned __int16)v3 + 1 - v34;
          unsigned int v39 = 1;
        }
LABEL_56:
        if (*v33 != (unsigned __int16)v3) {
          goto LABEL_110;
        }
        v14 += v39;
        if (v33 >= (unsigned __int16 *)&v76)
        {
          int v40 = 0;
          uint64_t v13 = (v13 + 1);
          goto LABEL_81;
        }
        int v31 = v16 + 4;
        unsigned int v3 = *v16;
        ++v18;
        uint64_t v32 = (v13 + 1);
        if (v28 <= v3)
        {
          int v40 = 1;
          uint64_t v13 = (v13 + 1);
          goto LABEL_81;
        }
      }
      int v40 = 1;
      __int16 v16 = v33;
LABEL_81:
      if ((unint64_t)v21 >= v5) {
        goto LABEL_94;
      }
      unsigned int v28 = (unsigned __int16)*v21;
LABEL_83:
      if ((unint64_t)(v21 + 1) >= v5)
      {
        uint64_t v22 = 1;
        uint64_t v23 = 1;
        if (!v20) {
          goto LABEL_35;
        }
      }
      else
      {
        int v49 = v21[1];
        BOOL v50 = v49 >= 0;
        if (v49 < 0) {
          uint64_t v22 = 2;
        }
        else {
          uint64_t v22 = 1;
        }
        if (v50) {
          uint64_t v23 = 1;
        }
        else {
          uint64_t v23 = (v21[1] & 0x7FFF) + 1;
        }
        if (!v20) {
          goto LABEL_35;
        }
      }
      unint64_t v24 = v23 + v28;
      if (v20 + (unint64_t)v19 < v28 || v24 < v19)
      {
LABEL_94:
        LOWORD(v28) = v19;
        uint64_t v23 = v20;
        break;
      }
      uint64_t v26 = v20 - v23 + v19 + v28;
      BOOL v27 = v19 > v28;
      if (v19 < v28) {
        unsigned int v28 = v19;
      }
      if (v27)
      {
        uint64_t v20 = v20 - v23 + v19;
        unint64_t v29 = v26;
      }
      else
      {
        unint64_t v29 = v20 + v19;
      }
      if (v24 > v29) {
        uint64_t v23 = v20 + v24 - v29;
      }
      else {
        uint64_t v23 = v20;
      }
LABEL_35:
      v21 += v22;
      if (v23 + (unint64_t)v28 >= (unsigned __int16)v3) {
        char v30 = v40;
      }
      else {
        char v30 = 0;
      }
      unsigned __int16 v19 = v28;
      uint64_t v20 = v23;
      if (v30) {
        continue;
      }
      break;
    }
    if (v23 == 1)
    {
      if (v17 < v21)
      {
        unsigned __int16 v6 = v21;
      }
      else
      {
        if (v5 + 4 > v15)
        {
LABEL_132:
          uint64_t v65 = __si_assert_copy_extra_329();
          unint64_t v66 = v65;
          if (v65) {
            uint64_t v67 = v65;
          }
          else {
            uint64_t v67 = "";
          }
          __message_assert("%s:%u: Unexpected code path %s ", "SIValueSetInternals.h", 626, v67);
          free(v66);
          goto LABEL_129;
        }
        unsigned __int16 v6 = (__int16 *)(v15 - (v5 - (void)v21));
        if ((__int16 *)v5 == v21)
        {
          unint64_t v5 = v15;
        }
        else
        {
          uint64_t v72 = (void *)(v15 - (v5 - (void)v21));
          unsigned int v74 = v17;
          unint64_t v52 = v15;
          memmove(v72, v21, v5 - (void)v21);
          unsigned __int16 v6 = (__int16 *)v72;
          unsigned int v17 = v74;
          unint64_t v15 = v52;
          unint64_t v5 = v52;
        }
      }
      *v17++ = v28;
      if (!v40) {
        goto LABEL_116;
      }
      goto LABEL_19;
    }
    if (v23)
    {
      unsigned int v51 = v17 + 1;
      if (v17 + 1 < v21)
      {
        unsigned __int16 v6 = v21;
        goto LABEL_107;
      }
      if (v5 + 4 > v15) {
        goto LABEL_132;
      }
      unsigned __int16 v6 = (__int16 *)(v15 - (v5 - (void)v21));
      if ((__int16 *)v5 != v21)
      {
        uint64_t v73 = (void *)(v15 - (v5 - (void)v21));
        long long v75 = v17;
        unint64_t v70 = v17 + 1;
        unint64_t v71 = v15;
        memmove(v73, v21, v5 - (void)v21);
        unsigned int v51 = v70;
        unint64_t v15 = v71;
        unsigned __int16 v6 = (__int16 *)v73;
        unsigned int v17 = v75;
      }
      unint64_t v5 = v15;
LABEL_107:
      *unsigned int v17 = v28;
      v17[1] = (v23 - 1) | 0x8000;
      unsigned int v17 = v51 + 1;
      if (!v40)
      {
LABEL_116:
        int v21 = v6;
        goto LABEL_122;
      }
LABEL_19:
      if ((unint64_t)v17 + v5 - (void)v6 + 4 > v15) {
        goto LABEL_118;
      }
      continue;
    }
    break;
  }
  unsigned __int16 v6 = v21;
  if (!v40)
  {
LABEL_122:
    unsigned __int16 v6 = v21;
    if (v13 == v18) {
      goto LABEL_123;
    }
    uint64_t v61 = __si_assert_copy_extra_329();
    uint64_t v62 = v61;
    unint64_t v63 = "";
    if (v61) {
      unint64_t v63 = v61;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 811, "popped==peeked", v63);
    free(v62);
    if (!__valid_fs(-1))
    {
      uint64_t v64 = 3072;
LABEL_131:
      *(_DWORD *)uint64_t v64 = -559038737;
      abort();
    }
LABEL_129:
    uint64_t v64 = 2989;
    goto LABEL_131;
  }
LABEL_118:
  if ((int)v13 >= v18)
  {
    uint64_t v56 = __si_assert_copy_extra_329();
    uint64_t v54 = v56;
    uint64_t v57 = "";
    if (v56) {
      uint64_t v57 = v56;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 810, "popped<peeked", v57);
    goto LABEL_113;
  }
LABEL_123:
  int v58 = v5 - v6;
  if (v5 > (unint64_t)v6)
  {
    int v59 = (int)v17;
    memmove(v17, v6, v5 - (void)v6);
    LODWORD(v17) = v59 + v58;
  }
  *(_WORD *)(a1 + 8) = (v17 - v68) >> 1;
  return v14 != 0;
}

void *SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::valueIterator(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  *a3 = &unk_1F1811018;
  a3[1] = a1 + 12;
  a3[2] = a1 + 12 + 4 * v3;
  a3[3] = 0;
  a3[4] = a2;
  return a3;
}

void SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::RLEKeyIterator::~RLEKeyIterator()
{
}

BOOL SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::RLEKeyIterator::hasMore(uint64_t a1)
{
  return *(_DWORD *)(a1 + 28) || *(void *)(a1 + 8) < *(void *)(a1 + 16);
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::RLEKeyIterator::nextKey(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(a1 + 28);
  if (v2)
  {
    int v3 = v2 - 1;
    unsigned int v4 = *(_DWORD *)(a1 + 24) + 1;
    *(_DWORD *)(a1 + 24) = v4;
    *(_DWORD *)(a1 + 28) = v3;
  }
  else
  {
    unint64_t v5 = *(unsigned int **)(a1 + 8);
    unint64_t v6 = *(void *)(a1 + 16);
    unsigned int v4 = *v5;
    *(void *)(a1 + 8) = v5 + 1;
    *(_DWORD *)(a1 + 24) = v4;
    if ((unint64_t)(v5 + 1) < v6)
    {
      unsigned int v7 = v5[1];
      if ((v7 & 0x80000000) != 0)
      {
        *(void *)(a1 + 8) = v5 + 2;
        *(_DWORD *)(a1 + 28) = v7 & 0x7FFFFFFF;
      }
    }
  }
  return v1 | v4;
}

void SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::~RLEKeyHolder()
{
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::Serialize(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, 4);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 8))(a2, *(unsigned int *)(a1 + 8));
  uint64_t v4 = 4 * *(unsigned int *)(a1 + 8);
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16);
  return v5(a2, a1 + 12, v4);
}

BOOL SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::IsEmpty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) == 0;
}

void SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::Apply(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(char *, uint64_t, uint64_t), uint64_t a5)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  __int16 v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(unsigned int *)(v9 + 8);
  if (v12 > 0x3F) {
    return;
  }
  uint64_t v13 = (_DWORD *)(v9 + 12);
  unint64_t v14 = v9 + 12 + 4 * v12;
  bzero((char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  unsigned int v15 = 0;
  int v16 = 0;
LABEL_3:
  uint64_t v17 = 0;
  while (v16)
  {
    --v16;
    ++v15;
LABEL_15:
    *(void *)&v11[8 * v17++] = v15 | a3;
    if (v17 == a2)
    {
      a4(v11, a2, a5);
      goto LABEL_3;
    }
  }
  if ((unint64_t)v13 < v14)
  {
    int v18 = v13 + 1;
    unsigned int v15 = *v13;
    if ((unint64_t)(v13 + 1) >= v14)
    {
      int v16 = 0;
      ++v13;
    }
    else
    {
      if (*v18 < 0) {
        v13 += 2;
      }
      else {
        ++v13;
      }
      if (*v18 < 0) {
        int v16 = *v18 & 0x7FFFFFFF;
      }
      else {
        int v16 = 0;
      }
    }
    goto LABEL_15;
  }
  if (v17) {
    a4(v11, v17, a5);
  }
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::RemoveKey(uint64_t a1, int a2, int a3)
{
  unint64_t v4 = a2 & a3 & 0x7FFFFFFF;
  unint64_t v5 = a1 + 12;
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  unint64_t v7 = a1 + 12 + 4 * v6;
  if (v6 >= 3)
  {
    uint64_t v9 = 4 * v6;
    unint64_t v10 = a1 + 12 + 4 * v6;
    unint64_t v8 = (unsigned int *)(a1 + 12);
    do
    {
      __int16 v11 = &v8[v9 >> 3];
      unsigned int v12 = *v11;
      if ((*v11 & 0x80000000) != 0)
      {
        unsigned int v13 = *--v11;
        unsigned int v12 = v13;
      }
      if (v11 <= v8) {
        break;
      }
      if (v12 == v4)
      {
        unint64_t v8 = v11;
        if ((unint64_t)v11 >= v7) {
          return 0;
        }
        goto LABEL_17;
      }
      if (v12 > v4) {
        unint64_t v10 = (unint64_t)v11;
      }
      else {
        unint64_t v8 = v11;
      }
      uint64_t v9 = v10 - (void)v8;
    }
    while (v10 > (unint64_t)v8 && (unint64_t)v9 > 0xB);
    if ((unint64_t)v8 >= v7) {
      return 0;
    }
  }
  else
  {
    unint64_t v8 = (unsigned int *)(a1 + 12);
    if (v5 >= v7) {
      return 0;
    }
  }
LABEL_17:
  int v16 = v8 + 1;
  unint64_t v15 = *v8;
  if (v4 == v15)
  {
    if ((unint64_t)v16 >= v7) {
      goto LABEL_43;
    }
    goto LABEL_35;
  }
  while (1)
  {
    if ((v15 & 0x80000000) == 0)
    {
      uint64_t result = 0;
      if (v4 < v15 || (unint64_t)v16 >= v7) {
        return result;
      }
      goto LABEL_20;
    }
    unint64_t v19 = *(v16 - 2);
    unint64_t v20 = v19 + (v15 & 0x7FFFFFFF);
    if (v4 > v19 && v4 <= v20) {
      break;
    }
    if ((unint64_t)v16 >= v7) {
      return 0;
    }
LABEL_20:
    unsigned int v17 = *v16++;
    unint64_t v15 = v17;
    if (v4 == v17)
    {
      unint64_t v8 = v16 - 1;
      if ((unint64_t)v16 >= v7) {
        goto LABEL_43;
      }
LABEL_35:
      unsigned int v22 = *v16;
      if ((*v16 & 0x80000000) == 0)
      {
        size_t v23 = v7 - (void)v16;
        unint64_t v24 = v16;
LABEL_39:
        memmove(v8, v24, v23);
        int v25 = *(_DWORD *)(a1 + 8) - 1;
        goto LABEL_44;
      }
      unsigned int *v8 = v15 + 1;
      if ((v22 & 0x7FFFFFFF) == 1)
      {
        unint64_t v24 = v8 + 2;
        size_t v23 = v7 - (void)(v8 + 2);
        unint64_t v8 = v16;
        goto LABEL_39;
      }
      unsigned int v27 = v22 - 1;
      goto LABEL_48;
    }
  }
  uint64_t v26 = v16 - 1;
  if ((v15 & 0x7FFFFFFF) != 1)
  {
    if (v4 == v20)
    {
      *uint64_t v26 = (v15 - 1) | 0x80000000;
      return 1;
    }
    if (v4 == v19 + 1)
    {
      *uint64_t v26 = v4 + 1;
      if (v20 == v4 + 1) {
        return 1;
      }
      uint64_t v29 = *(unsigned int *)(a1 + 8);
      if (v29 < 0x3F)
      {
        uint64_t v30 = (uint64_t)((uint64_t)v16 - v5) >> 2;
        if (v29 != v30)
        {
          memmove(v16 + 1, v16, 4 * (v29 - v30));
          LODWORD(v29) = *(_DWORD *)(a1 + 8);
        }
        *(_DWORD *)(a1 + 8) = v29 + 1;
        unsigned int v27 = v20 + ~v4;
LABEL_48:
        unsigned int v28 = v27 | 0x80000000;
LABEL_49:
        unsigned int *v16 = v28;
        return 1;
      }
    }
    else
    {
      *(v16 - 1) = (v4 + ~v19) | 0x80000000;
      uint64_t v31 = *(unsigned int *)(a1 + 8);
      if (v31 < 0x3F)
      {
        uint64_t v32 = (uint64_t)((uint64_t)v16 - v5) >> 2;
        if (v31 != v32)
        {
          memmove(v16 + 1, v16, 4 * (v31 - v32));
          LODWORD(v31) = *(_DWORD *)(a1 + 8);
        }
        *(_DWORD *)(a1 + 8) = v31 + 1;
        unsigned int *v16 = v4 + 1;
        int v33 = v20 + ~v4;
        if (!v33) {
          return 1;
        }
        uint64_t v34 = *(unsigned int *)(a1 + 8);
        if (v34 < 0x3F)
        {
          ++v16;
          uint64_t v35 = (uint64_t)((uint64_t)v26 - v5 + 8) >> 2;
          if (v34 != v35)
          {
            memmove(v26 + 3, v26 + 2, 4 * (v34 - v35));
            LODWORD(v34) = *(_DWORD *)(a1 + 8);
          }
          *(_DWORD *)(a1 + 8) = v34 + 1;
          unsigned int v28 = v33 | 0x80000000;
          goto LABEL_49;
        }
      }
    }
    uint64_t v36 = __si_assert_copy_extra_329();
    unint64_t v37 = v36;
    if (v36) {
      int v38 = v36;
    }
    else {
      int v38 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "SIValueSetInternals.h", 649, v38);
    free(v37);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  if ((unint64_t)v16 < v7)
  {
    memmove(v16 - 1, v16, v7 - (void)v16);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
LABEL_43:
  int v25 = v6 - 1;
LABEL_44:
  *(_DWORD *)(a1 + 8) = v25;
  return 1;
}

unint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::CloseKey(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (!v3) {
    return 0;
  }
  unint64_t v4 = a2 & a3 & 0x7FFFFFFF;
  unint64_t v5 = (unsigned int *)(a1 + 12);
  unint64_t v6 = a1 + 12 + 4 * v3;
  if (v3 >= 3)
  {
    uint64_t v7 = 4 * v3;
    unint64_t v8 = a1 + 12 + 4 * v3;
    do
    {
      uint64_t v9 = &v5[v7 >> 3];
      unsigned int v10 = *v9;
      if ((*v9 & 0x80000000) != 0)
      {
        unsigned int v11 = *--v9;
        unsigned int v10 = v11;
      }
      if (v9 <= v5) {
        break;
      }
      if (v10 == v4)
      {
        unint64_t v5 = v9;
        if ((unint64_t)v9 < v6) {
          goto LABEL_16;
        }
        goto LABEL_30;
      }
      if (v10 > v4) {
        unint64_t v8 = (unint64_t)v9;
      }
      else {
        unint64_t v5 = v9;
      }
      uint64_t v7 = v8 - (void)v5;
    }
    while (v8 > (unint64_t)v5 && (unint64_t)v7 > 0xB);
  }
  if ((unint64_t)v5 >= v6)
  {
LABEL_30:
    unint64_t v17 = *(unsigned int *)(a1 + 4 * (v3 - 1) + 12);
    if ((v17 & 0x80000000) != 0) {
      return *(_DWORD *)(a1 + 4 * (v3 - 2) + 12) + (v17 & 0x7FFFFFFF);
    }
    else {
      return v17;
    }
  }
  else
  {
LABEL_16:
    unsigned int v13 = v5;
    while (1)
    {
      unsigned int v18 = *v13++;
      unint64_t v17 = v18;
      if (v4 == v18) {
        return a2 & a3 & 0x7FFFFFFF;
      }
      if ((v17 & 0x80000000) != 0)
      {
        unint64_t v14 = *(v5 - 1);
        unint64_t v15 = v14 + (v17 & 0x7FFFFFFF);
        if (v4 >= v14 && v4 <= v15) {
          return a2 & a3 & 0x7FFFFFFF;
        }
      }
      else if (v4 < v17)
      {
        return v17;
      }
      unint64_t v5 = v13;
      if ((unint64_t)v13 >= v6) {
        goto LABEL_30;
      }
    }
  }
}

BOOL SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::AddKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = a3 & a2;
  uint64_t v81 = a3 & a2;
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = a1 + 12 + 4 * v4;
  if (v4 >= 3)
  {
    uint64_t v7 = 4 * v4;
    unint64_t v8 = a1 + 12 + 4 * v4;
    unint64_t v6 = (unsigned int *)(a1 + 12);
    do
    {
      uint64_t v9 = &v6[v7 >> 3];
      unsigned int v10 = *v9;
      if ((*v9 & 0x80000000) != 0)
      {
        unsigned int v11 = *--v9;
        unsigned int v10 = v11;
      }
      if (v9 <= v6) {
        break;
      }
      if (v10 == v3)
      {
        unint64_t v6 = v9;
        break;
      }
      if (v10 > v3) {
        unint64_t v8 = (unint64_t)v9;
      }
      else {
        unint64_t v6 = v9;
      }
      uint64_t v7 = v8 - (void)v6;
    }
    while (v8 > (unint64_t)v6 && (unint64_t)v7 > 0xB);
  }
  else
  {
    unint64_t v6 = (unsigned int *)(a1 + 12);
  }
  uint64_t v73 = a1 + 12;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  unint64_t v15 = a1 + 264;
  int v16 = (unsigned int *)&v81;
  unint64_t v17 = v6;
  int v18 = 1;
  while (2)
  {
    unsigned int v19 = 0;
    uint64_t v20 = 0;
    int v21 = v6;
    while (1)
    {
      if ((unint64_t)v21 >= v5)
      {
        v16 += 2;
        uint64_t v44 = (uint64_t *)(v16 - 2);
        if (!v20)
        {
          while (1)
          {
            uint64_t v20 = 1;
            unsigned int v19 = v3;
            unsigned int v51 = 1;
LABEL_82:
            if (v3 != *(_DWORD *)v44) {
              break;
            }
            v14 += v51;
            if (v44 >= &v81)
            {
              int v43 = 0;
              uint64_t v34 = (v13 + 1);
              if ((unint64_t)v21 >= v5) {
                goto LABEL_105;
              }
              goto LABEL_95;
            }
            unsigned int v52 = *v16;
            v16 += 2;
            unsigned int v3 = v52;
            ++v18;
            uint64_t v13 = (v13 + 1);
            uint64_t v44 = (uint64_t *)(v16 - 2);
            if (v20) {
              goto LABEL_67;
            }
          }
LABEL_122:
          int v58 = __si_assert_copy_extra_329();
          int v59 = v58;
          int v60 = "";
          if (v58) {
            int v60 = v58;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 761, "v==key", v60);
LABEL_125:
          free(v59);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
LABEL_67:
        unint64_t v45 = v3 + 1;
        unint64_t v46 = v20 + v19;
        if (v46 >= v3 && v45 >= v19)
        {
          BOOL v48 = v19 > v3;
          if (v19 <= v3)
          {
            int v49 = 0;
          }
          else
          {
            unsigned int v19 = v3;
            uint64_t v20 = v46 - 1;
            int v49 = 1;
          }
          if (v48) {
            unint64_t v46 = v46 - 1 + v3;
          }
          uint64_t v50 = v20 + v45 - v46;
          if (v46 > v3)
          {
            unsigned int v51 = v49;
          }
          else
          {
            uint64_t v20 = v50;
            unsigned int v51 = 1;
          }
          goto LABEL_82;
        }
        int v43 = 1;
        int v16 = (unsigned int *)v44;
        uint64_t v34 = v13;
        if ((unint64_t)v21 >= v5) {
          goto LABEL_105;
        }
      }
      else
      {
        unsigned int v29 = *v21;
        if (v3 >= *v21)
        {
          int v43 = 1;
          goto LABEL_96;
        }
        int v33 = v16 + 2;
        while (1)
        {
          uint64_t v34 = v13;
          int v16 = v33;
          uint64_t v35 = (uint64_t *)(v33 - 2);
          if (v20)
          {
            unint64_t v36 = v3 + 1;
            unint64_t v37 = v20 + v19;
            if (v37 < v3 || v36 < v19)
            {
              int v43 = 1;
              int v16 = (unsigned int *)v35;
              if ((unint64_t)v21 >= v5) {
                goto LABEL_105;
              }
              goto LABEL_95;
            }
            BOOL v39 = v19 > v3;
            if (v19 <= v3)
            {
              int v40 = 0;
            }
            else
            {
              unsigned int v19 = v3;
              uint64_t v20 = v37 - 1;
              int v40 = 1;
            }
            if (v39) {
              unint64_t v37 = v37 - 1 + v3;
            }
            uint64_t v41 = v20 + v36 - v37;
            if (v37 > v3)
            {
              unsigned int v42 = v40;
            }
            else
            {
              uint64_t v20 = v41;
              unsigned int v42 = 1;
            }
          }
          else
          {
            uint64_t v20 = 1;
            unsigned int v19 = v3;
            unsigned int v42 = 1;
          }
          if (v3 != *(_DWORD *)v35) {
            goto LABEL_122;
          }
          v14 += v42;
          if (v35 >= &v81) {
            break;
          }
          int v33 = v16 + 2;
          unsigned int v3 = *v16;
          ++v18;
          uint64_t v13 = (v13 + 1);
          if (v29 <= *v16)
          {
            int v43 = 1;
            goto LABEL_92;
          }
        }
        int v43 = 0;
LABEL_92:
        uint64_t v34 = (v34 + 1);
        if ((unint64_t)v21 >= v5)
        {
LABEL_105:
          uint64_t v13 = v34;
          goto LABEL_106;
        }
      }
LABEL_95:
      unsigned int v29 = *v21;
      uint64_t v13 = v34;
LABEL_96:
      if ((unint64_t)(v21 + 1) < v5) {
        break;
      }
      uint64_t v22 = 1;
      uint64_t v23 = 1;
      if (v20) {
        goto LABEL_23;
      }
LABEL_39:
      v21 += v22;
      if (v23 + (unint64_t)v29 >= v3) {
        char v32 = v43;
      }
      else {
        char v32 = 0;
      }
      unsigned int v19 = v29;
      uint64_t v20 = v23;
      if ((v32 & 1) == 0) {
        goto LABEL_107;
      }
    }
    int v53 = v21[1];
    uint64_t v54 = v53 & 0x7FFFFFFF;
    BOOL v55 = v53 >= 0;
    if (v53 < 0) {
      uint64_t v22 = 2;
    }
    else {
      uint64_t v22 = 1;
    }
    if (v55) {
      uint64_t v23 = 1;
    }
    else {
      uint64_t v23 = v54 + 1;
    }
    if (!v20) {
      goto LABEL_39;
    }
LABEL_23:
    unint64_t v24 = v23 + v29;
    unint64_t v25 = v20 + v19;
    if (v25 >= v29 && v24 >= v19)
    {
      uint64_t v27 = v20 - v23 + v19 + v29;
      BOOL v28 = v19 > v29;
      if (v19 < v29) {
        unsigned int v29 = v19;
      }
      if (v28) {
        uint64_t v30 = v20 - v23 + v19;
      }
      else {
        uint64_t v30 = v20;
      }
      if (v28) {
        unint64_t v31 = v27;
      }
      else {
        unint64_t v31 = v25;
      }
      if (v24 > v31) {
        uint64_t v23 = v30 + v24 - v31;
      }
      else {
        uint64_t v23 = v30;
      }
      goto LABEL_39;
    }
LABEL_106:
    unsigned int v29 = v19;
    uint64_t v23 = v20;
LABEL_107:
    if (v23 == 1)
    {
      if (v17 < v21)
      {
        unint64_t v6 = v21;
        goto LABEL_19;
      }
      if (v5 + 8 <= v15)
      {
        unint64_t v6 = (unsigned int *)(v15 - (v5 - (void)v21));
        if ((unsigned int *)v5 == v21)
        {
          unint64_t v5 = v15;
        }
        else
        {
          long long v77 = (void *)(v15 - (v5 - (void)v21));
          long long v79 = v17;
          unint64_t v57 = v15;
          memmove(v77, v21, v5 - (void)v21);
          unint64_t v6 = (unsigned int *)v77;
          unint64_t v17 = v79;
          unint64_t v15 = v57;
          unint64_t v5 = v57;
        }
LABEL_19:
        *v17++ = v29;
        if (!v43) {
          goto LABEL_128;
        }
        goto LABEL_20;
      }
LABEL_144:
      unint64_t v70 = __si_assert_copy_extra_329();
      unint64_t v71 = v70;
      if (v70) {
        uint64_t v72 = v70;
      }
      else {
        uint64_t v72 = "";
      }
      __message_assert("%s:%u: Unexpected code path %s ", "SIValueSetInternals.h", 626, v72);
      free(v71);
LABEL_141:
      uint64_t v69 = 2989;
LABEL_143:
      *(_DWORD *)uint64_t v69 = -559038737;
      abort();
    }
    if (v23)
    {
      uint64_t v56 = v17 + 1;
      if (v17 + 1 < v21)
      {
        unint64_t v6 = v21;
        goto LABEL_119;
      }
      if (v5 + 8 > v15) {
        goto LABEL_144;
      }
      unint64_t v6 = (unsigned int *)(v15 - (v5 - (void)v21));
      if ((unsigned int *)v5 != v21)
      {
        long long v78 = (void *)(v15 - (v5 - (void)v21));
        long long v80 = v17;
        long long v75 = v17 + 1;
        unint64_t v76 = v15;
        memmove(v78, v21, v5 - (void)v21);
        uint64_t v56 = v75;
        unint64_t v15 = v76;
        unint64_t v6 = (unsigned int *)v78;
        unint64_t v17 = v80;
      }
      unint64_t v5 = v15;
LABEL_119:
      *unint64_t v17 = v29;
      v17[1] = (v23 - 1) | 0x80000000;
      unint64_t v17 = v56 + 1;
      if (!v43)
      {
LABEL_128:
        int v21 = v6;
        goto LABEL_134;
      }
LABEL_20:
      if ((unint64_t)v17 + v5 - (void)v6 + 8 > v15) {
        goto LABEL_130;
      }
      continue;
    }
    break;
  }
  unint64_t v6 = v21;
  if (v43)
  {
LABEL_130:
    if ((int)v13 >= v18)
    {
      uint64_t v61 = __si_assert_copy_extra_329();
      int v59 = v61;
      uint64_t v62 = "";
      if (v61) {
        uint64_t v62 = v61;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 810, "popped<peeked", v62);
      goto LABEL_125;
    }
  }
  else
  {
LABEL_134:
    unint64_t v6 = v21;
    if (v13 != v18)
    {
      unint64_t v66 = __si_assert_copy_extra_329();
      uint64_t v67 = v66;
      int v68 = "";
      if (v66) {
        int v68 = v66;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 811, "popped==peeked", v68);
      free(v67);
      if (__valid_fs(-1)) {
        goto LABEL_141;
      }
      uint64_t v69 = 3072;
      goto LABEL_143;
    }
  }
  unint64_t v63 = v5 - (void)v6;
  if (v5 > (unint64_t)v6)
  {
    uint64_t v64 = v17;
    memmove(v17, v6, v5 - (void)v6);
    unint64_t v17 = (unsigned int *)((char *)v64 + v63);
  }
  *(_DWORD *)(a1 + 8) = ((unint64_t)v17 - v73) >> 2;
  return v14 != 0;
}

void *SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::valueIterator(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *a3 = &unk_1F1811158;
  a3[1] = a1 + 16;
  a3[2] = a1 + 16 + 8 * v3;
  a3[3] = 0;
  a3[4] = 0;
  a3[5] = a2;
  return a3;
}

void SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::RLEKeyIterator::~RLEKeyIterator()
{
}

BOOL SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::RLEKeyIterator::hasMore(void *a1)
{
  return a1[4] || a1[1] < a1[2];
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::RLEKeyIterator::nextKey(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v1 = a1[5];
  if (v2)
  {
    uint64_t v3 = v2 - 1;
    uint64_t v4 = a1[3] + 1;
    a1[3] = v4;
    a1[4] = v3;
    return v4 | v1;
  }
  else
  {
    unint64_t v6 = (uint64_t *)a1[1];
    unint64_t v7 = a1[2];
    uint64_t v8 = *v6;
    a1[1] = v6 + 1;
    a1[3] = v8;
    if ((unint64_t)(v6 + 1) < v7 && (uint64_t v9 = v6[1], v9 < 0))
    {
      a1[1] = v6 + 2;
      a1[4] = v9 & 0x7FFFFFFFFFFFFFFFLL;
      return v8 | v1;
    }
    else
    {
      return v8 | v1;
    }
  }
}

void SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::~RLEKeyHolder()
{
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::Serialize(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, 8);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 8))(a2, *(unsigned int *)(a1 + 8));
  uint64_t v4 = 8 * *(void *)(a1 + 8);
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16);
  return v5(a2, a1 + 16, v4);
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::GetRawCount(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

BOOL SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::IsEmpty(uint64_t a1)
{
  return *(void *)(a1 + 8) == 0;
}

void SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::Apply(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, uint64_t, uint64_t), uint64_t a5)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  unsigned int v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = *(void *)(v9 + 8);
  if (v12 > 0x3F) {
    return;
  }
  uint64_t v13 = (uint64_t *)(v9 + 16);
  unint64_t v14 = v9 + 16 + 8 * v12;
  bzero((char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
LABEL_3:
  uint64_t v17 = 0;
  while (v16)
  {
    --v16;
    ++v15;
LABEL_15:
    *(void *)&v11[8 * v17++] = v15 | a3;
    if (v17 == a2)
    {
      a4(v11, a2, a5);
      goto LABEL_3;
    }
  }
  if ((unint64_t)v13 < v14)
  {
    int v18 = v13 + 1;
    uint64_t v15 = *v13;
    if ((unint64_t)(v13 + 1) >= v14)
    {
      uint64_t v16 = 0;
      ++v13;
    }
    else
    {
      if (*v18 < 0) {
        v13 += 2;
      }
      else {
        ++v13;
      }
      if (*v18 < 0) {
        uint64_t v16 = *v18 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v16 = 0;
      }
    }
    goto LABEL_15;
  }
  if (v17) {
    a4(v11, v17, a5);
  }
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::RemoveKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2 & a3 & 0x7FFFFFFFFFFFFFFFLL;
  unint64_t v5 = a1 + 16;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = 8 * v6;
  unint64_t v8 = a1 + 16 + 8 * v6;
  if (v6 >= 1 && (unint64_t)v7 >= 0x18)
  {
    unint64_t v11 = a1 + 16 + 8 * v6;
    size_t v10 = (unint64_t *)(a1 + 16);
    do
    {
      unint64_t v12 = &v10[v7 >> 4];
      unint64_t v13 = *v12;
      if ((*v12 & 0x8000000000000000) != 0)
      {
        unint64_t v14 = *--v12;
        unint64_t v13 = v14;
      }
      if (v12 <= v10) {
        break;
      }
      if (v13 == v4)
      {
        size_t v10 = v12;
        if ((unint64_t)v12 >= v8) {
          return 0;
        }
        goto LABEL_20;
      }
      if (v13 > v4) {
        unint64_t v11 = (unint64_t)v12;
      }
      else {
        size_t v10 = v12;
      }
      uint64_t v7 = v11 - (void)v10;
    }
    while (v11 > (unint64_t)v10 && (unint64_t)v7 > 0x17);
    if ((unint64_t)v10 >= v8) {
      return 0;
    }
  }
  else
  {
    size_t v10 = (unint64_t *)(a1 + 16);
    if (v5 >= v8) {
      return 0;
    }
  }
LABEL_20:
  uint64_t v17 = v10 + 1;
  unint64_t v16 = *v10;
  if (*v10 == v4)
  {
    if ((unint64_t)v17 < v8)
    {
LABEL_22:
      unint64_t v18 = *v17;
      if ((*v17 & 0x8000000000000000) == 0)
      {
        size_t v19 = v8 - (void)v17;
        uint64_t v20 = v17;
LABEL_42:
        memmove(v10, v20, v19);
        uint64_t v26 = *(void *)(a1 + 8) - 1;
        goto LABEL_43;
      }
      *size_t v10 = v4 + 1;
      if ((v18 & 0x7FFFFFFFFFFFFFFFLL) == 1)
      {
        uint64_t v20 = v10 + 2;
        size_t v19 = v8 - (void)(v10 + 2);
        size_t v10 = v17;
        goto LABEL_42;
      }
      unint64_t v28 = (v18 - 1) | 0x8000000000000000;
LABEL_51:
      *uint64_t v17 = v28;
      return 1;
    }
LABEL_39:
    *(void *)(a1 + 8) = v6 - 1;
    return 1;
  }
  while (1)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t result = 0;
      if (v16 > v4 || (unint64_t)v17 >= v8) {
        return result;
      }
      goto LABEL_24;
    }
    unint64_t v23 = *(v17 - 2);
    unint64_t v24 = v23 + (v16 & 0x7FFFFFFFFFFFFFFFLL);
    if (v4 > v23 && v4 <= v24) {
      break;
    }
    if ((unint64_t)v17 >= v8) {
      return 0;
    }
LABEL_24:
    unint64_t v21 = *v17++;
    unint64_t v16 = v21;
    if (v21 == v4)
    {
      size_t v10 = v17 - 1;
      if ((unint64_t)v17 < v8) {
        goto LABEL_22;
      }
      goto LABEL_39;
    }
  }
  uint64_t v27 = v17 - 1;
  if ((v16 & 0x7FFFFFFFFFFFFFFFLL) != 1)
  {
    if (v4 == v24)
    {
      unint64_t *v27 = (v16 - 1) | 0x8000000000000000;
      return 1;
    }
    if (v4 == v23 + 1)
    {
      unint64_t *v27 = v4 + 1;
      unint64_t v29 = v24 + ~v4;
      if (!v29) {
        return 1;
      }
      unint64_t v30 = *(void *)(a1 + 8);
      if (v30 < 0x3F)
      {
        uint64_t v31 = (uint64_t)((uint64_t)v17 - v5) >> 3;
        if (v30 != v31)
        {
          unint64_t v32 = v30 - v31;
          int v33 = v17 + 1;
LABEL_66:
          memmove(v33, v17, 8 * v32);
          uint64_t v31 = *(void *)(a1 + 8);
          goto LABEL_67;
        }
        goto LABEL_67;
      }
    }
    else
    {
      *(v17 - 1) = (v4 + ~v23) | 0x8000000000000000;
      unint64_t v34 = *(void *)(a1 + 8);
      if (v34 < 0x3F)
      {
        uint64_t v35 = (uint64_t)((uint64_t)v17 - v5) >> 3;
        if (v34 != v35)
        {
          memmove(v17 + 1, v17, 8 * (v34 - v35));
          uint64_t v35 = *(void *)(a1 + 8);
        }
        *(void *)(a1 + 8) = v35 + 1;
        *uint64_t v17 = v4 + 1;
        unint64_t v29 = v24 + ~v4;
        if (!v29) {
          return 1;
        }
        unint64_t v36 = *(void *)(a1 + 8);
        if (v36 < 0x3F)
        {
          ++v17;
          uint64_t v31 = (uint64_t)((uint64_t)v27 - v5 + 16) >> 3;
          if (v36 != v31)
          {
            unint64_t v32 = v36 - v31;
            int v33 = v27 + 3;
            goto LABEL_66;
          }
LABEL_67:
          *(void *)(a1 + 8) = v31 + 1;
          unint64_t v28 = v29 | 0x8000000000000000;
          goto LABEL_51;
        }
      }
    }
    unint64_t v37 = __si_assert_copy_extra_329();
    int v38 = v37;
    if (v37) {
      BOOL v39 = v37;
    }
    else {
      BOOL v39 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "SIValueSetInternals.h", 649, v39);
    free(v38);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  if ((unint64_t)v17 < v8)
  {
    memmove(v17 - 1, v17, v8 - (void)v17);
    uint64_t v6 = *(void *)(a1 + 8);
  }
  uint64_t v26 = v6 - 1;
LABEL_43:
  *(void *)(a1 + 8) = v26;
  return 1;
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::CloseKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return 0;
  }
  unint64_t v4 = a2 & a3 & 0x7FFFFFFFFFFFFFFFLL;
  unint64_t v5 = (unint64_t *)(a1 + 16);
  uint64_t v6 = 8 * v3;
  unint64_t v7 = a1 + 16 + 8 * v3;
  if (v3 >= 1 && (unint64_t)v6 >= 0x18)
  {
    unint64_t v9 = a1 + 16 + 8 * v3;
    do
    {
      size_t v10 = &v5[v6 >> 4];
      unint64_t v11 = *v10;
      if ((*v10 & 0x8000000000000000) != 0)
      {
        unint64_t v12 = *--v10;
        unint64_t v11 = v12;
      }
      if (v10 <= v5) {
        break;
      }
      if (v11 == v4)
      {
        unint64_t v5 = v10;
        if ((unint64_t)v10 < v7) {
          goto LABEL_20;
        }
        goto LABEL_34;
      }
      if (v11 > v4) {
        unint64_t v9 = (unint64_t)v10;
      }
      else {
        unint64_t v5 = v10;
      }
      uint64_t v6 = v9 - (void)v5;
    }
    while (v9 > (unint64_t)v5 && (unint64_t)v6 > 0x17);
  }
  if ((unint64_t)v5 >= v7)
  {
LABEL_34:
    unint64_t v18 = *(void *)(a1 + 8 * v3 + 8);
    if ((v18 & 0x8000000000000000) != 0) {
      return *(void *)(a1 + 8 * v3) + (v18 & 0x7FFFFFFFFFFFFFFFLL);
    }
    else {
      return v18;
    }
  }
  else
  {
LABEL_20:
    unint64_t v14 = v5;
    while (1)
    {
      unint64_t v19 = *v14++;
      unint64_t v18 = v19;
      if (v19 == v4) {
        return a2 & a3 & 0x7FFFFFFFFFFFFFFFLL;
      }
      if ((v18 & 0x8000000000000000) != 0)
      {
        unint64_t v15 = *(v5 - 1);
        unint64_t v16 = v15 + (v18 & 0x7FFFFFFFFFFFFFFFLL);
        if (v4 >= v15 && v4 <= v16) {
          return a2 & a3 & 0x7FFFFFFFFFFFFFFFLL;
        }
      }
      else if (v18 > v4)
      {
        return v18;
      }
      unint64_t v5 = v14;
      if ((unint64_t)v14 >= v7) {
        goto LABEL_34;
      }
    }
  }
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::ContainsKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2 & a3 & 0x7FFFFFFFFFFFFFFFLL;
  unint64_t v4 = (unint64_t *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = 8 * v5;
  unint64_t v7 = a1 + 16 + 8 * v5;
  if (v5 >= 1 && (unint64_t)v6 >= 0x18)
  {
    unint64_t v9 = a1 + 16 + 8 * v5;
    do
    {
      size_t v10 = &v4[v6 >> 4];
      unint64_t v11 = *v10;
      if ((*v10 & 0x8000000000000000) != 0)
      {
        unint64_t v12 = *--v10;
        unint64_t v11 = v12;
      }
      if (v10 <= v4) {
        break;
      }
      if (v11 == v3)
      {
        unint64_t v4 = v10;
        if ((unint64_t)v10 < v7) {
          goto LABEL_19;
        }
        return 0;
      }
      if (v11 > v3) {
        unint64_t v9 = (unint64_t)v10;
      }
      else {
        unint64_t v4 = v10;
      }
      uint64_t v6 = v9 - (void)v4;
      if (v9 > (unint64_t)v4)
      {
        BOOL v13 = (unint64_t)v6 >= 0x17;
        BOOL v14 = v6 == 23;
      }
      else
      {
        BOOL v13 = 0;
        BOOL v14 = 0;
      }
    }
    while (!v14 && v13);
  }
  if ((unint64_t)v4 >= v7) {
    return 0;
  }
LABEL_19:
  unint64_t v15 = *v4;
  if (*v4 != v3)
  {
    uint64_t v17 = v4 + 1;
    do
    {
      if ((v15 & 0x8000000000000000) != 0)
      {
        unint64_t v19 = *(v17 - 2);
        unint64_t v20 = v19 + (v15 & 0x7FFFFFFFFFFFFFFFLL);
        if (v3 >= v19)
        {
          BOOL v21 = v3 >= v20;
          BOOL v22 = v3 == v20;
        }
        else
        {
          BOOL v21 = 1;
          BOOL v22 = 0;
        }
        if (v22 || !v21) {
          return 1;
        }
        if ((unint64_t)v17 >= v7) {
          return 0;
        }
      }
      else
      {
        uint64_t result = 0;
        if (v15 > v3 || (unint64_t)v17 >= v7) {
          return result;
        }
      }
      unint64_t v18 = *v17++;
      unint64_t v15 = v18;
    }
    while (v18 != v3);
  }
  return 1;
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::AddSortedKeysWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  if (*a2 >= a2[1] || (uint64_t *)((unint64_t)a2[3] & **a2) != a2[2]) {
    return 0;
  }
  unint64_t v5 = SIValueSet<unsigned long long>::FlatContextWithPfx::peek(a2);
  unint64_t v6 = v5;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = 8 * v7;
  unint64_t v9 = a1 + 16 + 8 * v7;
  if (v7 >= 1 && (unint64_t)v8 >= 0x18)
  {
    unint64_t v15 = a1 + 16 + 8 * v7;
    unint64_t v11 = (unint64_t *)(a1 + 16);
    uint64_t v12 = a3;
    do
    {
      unint64_t v16 = &v11[v8 >> 4];
      unint64_t v17 = *v16;
      if ((*v16 & 0x8000000000000000) != 0)
      {
        unint64_t v18 = *--v16;
        unint64_t v17 = v18;
      }
      if (v16 <= v11) {
        break;
      }
      if (v17 == v5)
      {
        unint64_t v11 = v16;
        break;
      }
      if (v17 > v5) {
        unint64_t v15 = (unint64_t)v16;
      }
      else {
        unint64_t v11 = v16;
      }
      uint64_t v8 = v15 - (void)v11;
    }
    while (v15 > (unint64_t)v11 && (unint64_t)v8 > 0x17);
  }
  else
  {
    unint64_t v11 = (unint64_t *)(a1 + 16);
    uint64_t v12 = a3;
  }
  uint64_t v66 = a1;
  uint64_t v67 = a1 + 16;
  int v20 = 0;
  uint64_t v13 = 0;
  unint64_t v21 = a1 + 520;
  BOOL v22 = v11;
  int v23 = 1;
  unint64_t v69 = v21;
  while (2)
  {
    unint64_t v70 = v22;
    unint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = v11;
    while (1)
    {
      uint64_t v29 = v25;
      unint64_t v30 = v24;
      if ((unint64_t)v26 >= v9) {
        break;
      }
LABEL_40:
      unint64_t v24 = *v26;
      if (v6 < *v26) {
        break;
      }
      int v31 = 1;
LABEL_68:
      if ((unint64_t)(v26 + 1) >= v9)
      {
        uint64_t v44 = 1;
        uint64_t v25 = 1;
        if (v29) {
          goto LABEL_78;
        }
      }
      else
      {
        uint64_t v43 = v26[1];
        if (v43 < 0) {
          uint64_t v44 = 2;
        }
        else {
          uint64_t v44 = 1;
        }
        if (v43 < 0) {
          uint64_t v25 = (v43 & 0x7FFFFFFFFFFFFFFFLL) + 1;
        }
        else {
          uint64_t v25 = 1;
        }
        if (v29)
        {
LABEL_78:
          if (v29 + v30 < v24) {
            goto LABEL_82;
          }
          unint64_t v45 = v25 + v24;
          if (v25 + v24 < v30) {
            goto LABEL_82;
          }
          uint64_t v25 = v29 + v30 - v25;
          BOOL v27 = v30 > v24;
          if (v30 < v24) {
            unint64_t v24 = v30;
          }
          if (!v27) {
            uint64_t v25 = v29;
          }
          if (v45 > v25 + v24) {
            uint64_t v25 = v45 - v24;
          }
        }
      }
      v26 += v44;
      if (v6 <= v25 + v24) {
        char v28 = v31;
      }
      else {
        char v28 = 0;
      }
      if ((v28 & 1) == 0) {
        goto LABEL_83;
      }
    }
    while (2)
    {
      if (v29)
      {
        int v31 = 1;
        if (v29 + v30 < v6) {
          goto LABEL_66;
        }
        unint64_t v32 = v6 + 1;
        if (v6 + 1 < v30) {
          goto LABEL_66;
        }
        uint64_t v33 = v29 + v30 - 1;
        BOOL v34 = v30 > v6;
        BOOL v35 = v30 > v6;
        if (v30 >= v6) {
          unint64_t v30 = v6;
        }
        if (!v34) {
          uint64_t v33 = v29;
        }
        if (v32 > v33 + v30) {
          uint64_t v29 = v32 - v30;
        }
        else {
          uint64_t v29 = v33;
        }
        int v36 = v32 > v33 + v30 || v35;
      }
      else
      {
        uint64_t v29 = 1;
        unint64_t v30 = v6;
        int v36 = 1;
      }
      unint64_t v37 = *a2 + 1;
      uint64_t v38 = **a2;
      *a2 = v37;
      unint64_t v39 = (unint64_t)a2[3];
      if ((uint64_t *)(v39 & v38) != a2[2])
      {
        uint64_t v50 = __si_assert_copy_extra_329();
        unsigned int v51 = v50;
        unsigned int v52 = "";
        if (v50) {
          unsigned int v52 = v50;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 172, "(key & fMask) == fPfx", v52);
LABEL_101:
        free(v51);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      if ((v38 & ~v39) != v6)
      {
        int v53 = __si_assert_copy_extra_329();
        uint64_t v54 = v53;
        BOOL v55 = "";
        if (v53) {
          BOOL v55 = v53;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 761, "v==key", v55);
        goto LABEL_106;
      }
      if (v36)
      {
        ++v13;
      }
      else if (v12)
      {
        unint64_t v40 = v9;
        SIValueSet<unsigned long long>::SIValueSetInsert(*(unint64_t **)(v12 + 8), *(void *)v12 | v6);
        unint64_t v9 = v40;
        uint64_t v12 = a3;
        unint64_t v37 = *a2;
      }
      if (v37 < a2[1])
      {
        uint64_t v41 = *v37;
        unint64_t v42 = (unint64_t)a2[3];
        if ((uint64_t *)(v42 & v41) == a2[2])
        {
          unint64_t v6 = v41 & ~v42;
          ++v23;
          ++v20;
          if ((unint64_t)v26 < v9) {
            goto LABEL_40;
          }
          continue;
        }
      }
      break;
    }
    int v31 = 0;
    ++v20;
LABEL_66:
    if ((unint64_t)v26 < v9)
    {
      unint64_t v24 = *v26;
      goto LABEL_68;
    }
LABEL_82:
    unint64_t v24 = v30;
    uint64_t v25 = v29;
LABEL_83:
    uint64_t v46 = v25 - 1;
    if (v25 == 1)
    {
      unint64_t v47 = v69;
      BOOL v48 = v70;
      if (v70 >= v26)
      {
        if (v9 + 16 > v69) {
          goto LABEL_123;
        }
        unint64_t v11 = (unint64_t *)(v69 - (v9 - (void)v26));
        if ((unint64_t *)v9 != v26)
        {
          int v49 = (void *)(v69 - (v9 - (void)v26));
          memmove(v49, v26, v9 - (void)v26);
          unint64_t v11 = (unint64_t *)v49;
          unint64_t v47 = v69;
          BOOL v48 = v70;
          uint64_t v12 = a3;
        }
        unint64_t v9 = v47;
      }
      else
      {
        unint64_t v11 = v26;
      }
      *BOOL v48 = v24;
      BOOL v22 = v48 + 1;
      if (v31) {
        goto LABEL_27;
      }
      goto LABEL_97;
    }
    unint64_t v47 = v69;
    BOOL v22 = v70;
    if (v25)
    {
      if (v70 + 1 < v26)
      {
        unint64_t v11 = v26;
        goto LABEL_26;
      }
      if (v9 + 16 <= v69)
      {
        unint64_t v11 = (unint64_t *)(v69 - (v9 - (void)v26));
        if ((unint64_t *)v9 != v26)
        {
          int v68 = (void *)(v69 - (v9 - (void)v26));
          memmove(v68, v26, v9 - (void)v26);
          unint64_t v11 = (unint64_t *)v68;
          unint64_t v47 = v69;
          BOOL v22 = v70;
          uint64_t v12 = a3;
        }
        unint64_t v9 = v47;
LABEL_26:
        *BOOL v22 = v24;
        v22[1] = v46 | 0x8000000000000000;
        BOOL v22 = v70 + 2;
        if (v31)
        {
LABEL_27:
          if ((unint64_t)v22 + v9 - (void)v11 + 16 > v47) {
            goto LABEL_112;
          }
          continue;
        }
LABEL_97:
        uint64_t v26 = v11;
LABEL_116:
        unint64_t v11 = v26;
        if (v20 == v23) {
          goto LABEL_117;
        }
        uint64_t v61 = __si_assert_copy_extra_329();
        uint64_t v54 = v61;
        uint64_t v62 = "";
        if (v61) {
          uint64_t v62 = v61;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 811, "popped==peeked", v62);
LABEL_106:
        free(v54);
        if (__valid_fs(-1)) {
LABEL_107:
        }
          uint64_t v56 = 2989;
        else {
          uint64_t v56 = 3072;
        }
        *(_DWORD *)uint64_t v56 = -559038737;
        abort();
      }
LABEL_123:
      unint64_t v63 = __si_assert_copy_extra_329();
      uint64_t v64 = v63;
      if (v63) {
        uint64_t v65 = v63;
      }
      else {
        uint64_t v65 = "";
      }
      __message_assert("%s:%u: Unexpected code path %s ", "SIValueSetInternals.h", 626, v65);
      free(v64);
      goto LABEL_107;
    }
    break;
  }
  unint64_t v11 = v26;
  if (!v31) {
    goto LABEL_116;
  }
LABEL_112:
  if (v20 >= v23)
  {
    unint64_t v57 = __si_assert_copy_extra_329();
    unsigned int v51 = v57;
    int v58 = "";
    if (v57) {
      int v58 = v57;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 810, "popped<peeked", v58);
    goto LABEL_101;
  }
LABEL_117:
  unint64_t v59 = v9 - (void)v11;
  int v60 = v22;
  if (v9 > (unint64_t)v11)
  {
    memmove(v22, v11, v9 - (void)v11);
    int v60 = (unint64_t *)((char *)v60 + v59);
  }
  *(void *)(v66 + 8) = ((uint64_t)v60 - v67) >> 3;
  return v13;
}

BOOL SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::AddKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 & a2;
  uint64_t v70 = a3 & a2;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = 8 * v4;
  unint64_t v6 = a1 + 16 + 8 * v4;
  if (v4 >= 1 && (unint64_t)v5 >= 0x18)
  {
    unint64_t v9 = a1 + 16 + 8 * v4;
    uint64_t v8 = (unint64_t *)(a1 + 16);
    do
    {
      size_t v10 = &v8[v5 >> 4];
      unint64_t v11 = *v10;
      if ((*v10 & 0x8000000000000000) != 0)
      {
        unint64_t v12 = *--v10;
        unint64_t v11 = v12;
      }
      if (v10 <= v8) {
        break;
      }
      if (v11 == v3)
      {
        uint64_t v8 = v10;
        break;
      }
      if (v11 > v3) {
        unint64_t v9 = (unint64_t)v10;
      }
      else {
        uint64_t v8 = v10;
      }
      uint64_t v5 = v9 - (void)v8;
    }
    while (v9 > (unint64_t)v8 && (unint64_t)v5 > 0x17);
  }
  else
  {
    uint64_t v8 = (unint64_t *)(a1 + 16);
  }
  uint64_t v63 = a1 + 16;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  unint64_t v16 = a1 + 520;
  unint64_t v17 = (unint64_t *)&v70;
  unint64_t v18 = v8;
  int v19 = 1;
  unint64_t v67 = a1 + 520;
  while (2)
  {
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    BOOL v22 = v8;
    while (1)
    {
      if ((unint64_t)v22 >= v6)
      {
        BOOL v27 = v17++;
        if (!v21)
        {
          while (1)
          {
            unint64_t v20 = v3;
            uint64_t v21 = 1;
            uint64_t v37 = 1;
LABEL_58:
            if (*v27 != v3) {
              break;
            }
            v15 += v37;
            if (v27 >= (unint64_t *)&v70) {
              goto LABEL_62;
            }
            unint64_t v38 = *v17++;
            unint64_t v3 = v38;
            ++v19;
            uint64_t v14 = (v14 + 1);
            BOOL v27 = v17 - 1;
            if (v21) {
              goto LABEL_48;
            }
          }
LABEL_104:
          BOOL v48 = __si_assert_copy_extra_329();
          int v49 = v48;
          uint64_t v50 = "";
          if (v48) {
            uint64_t v50 = v48;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 761, "v==key", v50);
          goto LABEL_107;
        }
LABEL_48:
        if (v21 + v20 >= v3)
        {
          unint64_t v33 = v3 + 1;
          if (v3 + 1 >= v20)
          {
            uint64_t v34 = v21 + v20 - 1;
            BOOL v35 = v20 > v3;
            BOOL v36 = v20 > v3;
            if (v20 >= v3) {
              unint64_t v20 = v3;
            }
            if (v35) {
              uint64_t v21 = v34;
            }
            if (v33 <= v21 + v20)
            {
              uint64_t v37 = v36;
            }
            else
            {
              uint64_t v21 = v33 - v20;
              uint64_t v37 = 1;
            }
            goto LABEL_58;
          }
        }
LABEL_65:
        int v32 = 1;
        unint64_t v17 = v27;
        if ((unint64_t)v22 >= v6) {
          goto LABEL_88;
        }
        goto LABEL_66;
      }
      unint64_t v24 = *v22;
      if (v3 < *v22) {
        break;
      }
      int v32 = 1;
LABEL_68:
      if ((unint64_t)(v22 + 1) >= v6)
      {
        uint64_t v40 = 1;
        uint64_t v41 = 1;
        if (v21) {
          goto LABEL_78;
        }
      }
      else
      {
        uint64_t v39 = v22[1];
        if (v39 < 0) {
          uint64_t v40 = 2;
        }
        else {
          uint64_t v40 = 1;
        }
        if (v39 < 0) {
          uint64_t v41 = (v39 & 0x7FFFFFFFFFFFFFFFLL) + 1;
        }
        else {
          uint64_t v41 = 1;
        }
        if (v21)
        {
LABEL_78:
          if (v21 + v20 < v24) {
            goto LABEL_88;
          }
          unint64_t v42 = v41 + v24;
          if (v41 + v24 < v20) {
            goto LABEL_88;
          }
          unint64_t v43 = v21 + v20 - v41;
          BOOL v44 = v20 > v24;
          if (v20 < v24) {
            unint64_t v24 = v20;
          }
          if (v44) {
            uint64_t v45 = v43;
          }
          else {
            uint64_t v45 = v21;
          }
          uint64_t v41 = v42 - v24;
          if (v42 <= v45 + v24) {
            uint64_t v41 = v45;
          }
        }
      }
      v22 += v40;
      if (v3 <= v41 + v24) {
        char v23 = v32;
      }
      else {
        char v23 = 0;
      }
      unint64_t v20 = v24;
      uint64_t v21 = v41;
      if ((v23 & 1) == 0) {
        goto LABEL_89;
      }
    }
    uint64_t v25 = v17 + 1;
    uint64_t v26 = v14;
    while (1)
    {
      uint64_t v14 = v26;
      unint64_t v17 = v25;
      BOOL v27 = v25 - 1;
      if (v21)
      {
        if (v21 + v20 < v3 || v3 + 1 < v20) {
          goto LABEL_65;
        }
        uint64_t v28 = v21 + v20 - 1;
        BOOL v29 = v20 > v3;
        BOOL v30 = v20 > v3;
        if (v20 >= v3) {
          unint64_t v20 = v3;
        }
        if (v29) {
          uint64_t v21 = v28;
        }
        if (v3 < v21 + v20)
        {
          uint64_t v31 = v30;
        }
        else
        {
          uint64_t v21 = v3 + 1 - v20;
          uint64_t v31 = 1;
        }
      }
      else
      {
        unint64_t v20 = v3;
        uint64_t v21 = 1;
        uint64_t v31 = 1;
      }
      if (*v27 != v3) {
        goto LABEL_104;
      }
      v15 += v31;
      if (v27 >= (unint64_t *)&v70) {
        break;
      }
      uint64_t v25 = v17 + 1;
      unint64_t v3 = *v17;
      ++v19;
      uint64_t v26 = (v14 + 1);
      if (*v17 >= v24)
      {
        int v32 = 1;
        goto LABEL_63;
      }
    }
LABEL_62:
    int v32 = 0;
LABEL_63:
    uint64_t v14 = (v14 + 1);
    if ((unint64_t)v22 < v6)
    {
LABEL_66:
      unint64_t v24 = *v22;
      goto LABEL_68;
    }
LABEL_88:
    unint64_t v24 = v20;
    uint64_t v41 = v21;
LABEL_89:
    uint64_t v46 = v41 - 1;
    if (v41 != 1)
    {
      if (v41)
      {
        unint64_t v47 = v18 + 1;
        if (v18 + 1 < v22)
        {
          uint64_t v8 = v22;
          goto LABEL_22;
        }
        if (v6 + 16 > v16) {
          goto LABEL_125;
        }
        uint64_t v8 = (unint64_t *)(v16 - (v6 - (void)v22));
        if ((unint64_t *)v6 != v22)
        {
          int v68 = v18;
          uint64_t v65 = v41 - 1;
          uint64_t v66 = v18 + 1;
          memmove((void *)(v16 - (v6 - (void)v22)), v22, v6 - (void)v22);
          uint64_t v46 = v65;
          unint64_t v47 = v66;
          unint64_t v16 = v67;
          unint64_t v18 = v68;
        }
        unint64_t v6 = v16;
LABEL_22:
        *unint64_t v18 = v24;
        v18[1] = v46 | 0x8000000000000000;
        unint64_t v18 = v47 + 1;
        if (!v32) {
          goto LABEL_103;
        }
LABEL_23:
        if ((unint64_t)v18 + v6 - (void)v8 + 16 > v16) {
          goto LABEL_111;
        }
        continue;
      }
      uint64_t v8 = v22;
      if (!v32) {
        goto LABEL_115;
      }
LABEL_111:
      if ((int)v14 < v19) {
        goto LABEL_116;
      }
      unsigned int v51 = __si_assert_copy_extra_329();
      int v49 = v51;
      unsigned int v52 = "";
      if (v51) {
        unsigned int v52 = v51;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 810, "popped<peeked", v52);
LABEL_107:
      free(v49);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    break;
  }
  if (v18 < v22)
  {
    uint64_t v8 = v22;
    goto LABEL_102;
  }
  if (v6 + 16 > v16)
  {
LABEL_125:
    int v60 = __si_assert_copy_extra_329();
    uint64_t v61 = v60;
    if (v60) {
      uint64_t v62 = v60;
    }
    else {
      uint64_t v62 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "SIValueSetInternals.h", 626, v62);
    free(v61);
    goto LABEL_122;
  }
  uint64_t v8 = (unint64_t *)(v16 - (v6 - (void)v22));
  if ((unint64_t *)v6 != v22)
  {
    unint64_t v69 = v18;
    memmove((void *)(v16 - (v6 - (void)v22)), v22, v6 - (void)v22);
    unint64_t v16 = v67;
    unint64_t v18 = v69;
  }
  unint64_t v6 = v16;
LABEL_102:
  *v18++ = v24;
  if (v32) {
    goto LABEL_23;
  }
LABEL_103:
  BOOL v22 = v8;
LABEL_115:
  uint64_t v8 = v22;
  if (v14 != v19)
  {
    uint64_t v56 = __si_assert_copy_extra_329();
    unint64_t v57 = v56;
    int v58 = "";
    if (v56) {
      int v58 = v56;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 811, "popped==peeked", v58);
    free(v57);
    if (!__valid_fs(-1))
    {
      uint64_t v59 = 3072;
LABEL_124:
      *(_DWORD *)uint64_t v59 = -559038737;
      abort();
    }
LABEL_122:
    uint64_t v59 = 2989;
    goto LABEL_124;
  }
LABEL_116:
  unint64_t v53 = v6 - (void)v8;
  if (v6 > (unint64_t)v8)
  {
    uint64_t v54 = v18;
    memmove(v18, v8, v6 - (void)v8);
    unint64_t v18 = (unint64_t *)((char *)v54 + v53);
  }
  *(void *)(a1 + 8) = ((uint64_t)v18 - v63) >> 3;
  return v15 != 0;
}

uint64_t SIUINT64SetRemoveValue(uint64_t result, unint64_t a2)
{
  if (!*(unsigned char *)(result + 184))
  {
    int v2 = *(_DWORD *)(result + 24);
    if (!v2 || *(void *)(result + 16) == ((-1 << (-4 * v2)) & a2)) {
      return SIValueSet<unsigned long long>::_SIValueSetInnerRemove(result + 56, a2, v2, result + 32);
    }
  }
  return result;
}

uint64_t SIValueSet<unsigned long long>::_SIValueSetInnerRemove(unint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  int v5 = a3;
  uint64_t v6 = (a2 >> ((60 - 4 * a3) & 0xFC)) & 0xF;
  unint64_t v7 = *(void *)(a1 + 8 * v6);
  if (v7)
  {
    do
    {
      unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v6 = (a2 >> ((56 - 4 * v5) & 0xFC)) & 0xF;
      unint64_t v7 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8 * v6);
      ++v5;
    }
    while ((v7 & 1) != 0);
  }
  else
  {
    unint64_t v8 = a1;
  }
  if (!v7) {
    return 0;
  }
  uint64_t v9 = (*(uint64_t (**)(unint64_t))(*(void *)v7 + 32))(v7);
  unint64_t v10 = (*(uint64_t (**)(unint64_t))(*(void *)v7 + 56))(v7);
  if (v10 >= 0x3E)
  {
    uint64_t v11 = SIValueSet<unsigned long long>::_SIValueSetBurstRLE((void *)v7, v5, a4);
LABEL_10:
    *(void *)(v8 + 8 * v6) = v11;
    return v9;
  }
  if (!v10)
  {
    (*(void (**)(unint64_t))(*(void *)v7 + 72))(v7);
    CFAllocatorDeallocate(*(CFAllocatorRef *)(a4 + 16), (void *)v7);
    uint64_t v11 = 0;
    goto LABEL_10;
  }
  return v9;
}

uint64_t SIUINT64SetIterate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return SIValueSet<unsigned long long>::_SIValueSetInnerIterate(a1 + 56, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), a2, a4, a3);
}

void compaction_runLoop(uint64_t a1, void (*a2)(uint64_t, void), uint64_t a3)
{
  pthread_t v6 = pthread_self();
  unint64_t v7 = *(NSObject **)(a1 + 32);
  uint64_t v9 = MEMORY[0x1E4F143A8];
  uint64_t v10 = 0x40000000;
  uint64_t v11 = __si_scheduler_set_thread_block_invoke;
  unint64_t v12 = &__block_descriptor_tmp_29_1150;
  uint64_t v13 = a1;
  pthread_t v14 = v6;
  dispatch_sync(v7, &v9);
  a2(a3, 0);
  unint64_t v8 = *(NSObject **)(a1 + 32);
  uint64_t v9 = MEMORY[0x1E4F143A8];
  uint64_t v10 = 0x40000000;
  uint64_t v11 = __si_scheduler_set_thread_block_invoke;
  unint64_t v12 = &__block_descriptor_tmp_29_1150;
  uint64_t v13 = a1;
  pthread_t v14 = 0;
  dispatch_sync(v8, &v9);
}

void utility_query_runLoop(uint64_t a1, void (*a2)(uint64_t, void), uint64_t a3)
{
  pthread_t v6 = pthread_self();
  unint64_t v7 = *(NSObject **)(a1 + 32);
  uint64_t v9 = MEMORY[0x1E4F143A8];
  uint64_t v10 = 0x40000000;
  uint64_t v11 = __si_scheduler_set_thread_block_invoke;
  unint64_t v12 = &__block_descriptor_tmp_29_1150;
  uint64_t v13 = a1;
  pthread_t v14 = v6;
  dispatch_sync(v7, &v9);
  a2(a3, 0);
  unint64_t v8 = *(NSObject **)(a1 + 32);
  uint64_t v9 = MEMORY[0x1E4F143A8];
  uint64_t v10 = 0x40000000;
  uint64_t v11 = __si_scheduler_set_thread_block_invoke;
  unint64_t v12 = &__block_descriptor_tmp_29_1150;
  uint64_t v13 = a1;
  pthread_t v14 = 0;
  dispatch_sync(v8, &v9);
}

void volume_runLoop(uint64_t a1, void (*a2)(uint64_t, void), uint64_t a3)
{
  pthread_t v6 = pthread_self();
  unint64_t v7 = *(NSObject **)(a1 + 32);
  uint64_t v9 = MEMORY[0x1E4F143A8];
  uint64_t v10 = 0x40000000;
  uint64_t v11 = __si_scheduler_set_thread_block_invoke;
  unint64_t v12 = &__block_descriptor_tmp_29_1150;
  uint64_t v13 = a1;
  pthread_t v14 = v6;
  dispatch_sync(v7, &v9);
  a2(a3, 0);
  unint64_t v8 = *(NSObject **)(a1 + 32);
  uint64_t v9 = MEMORY[0x1E4F143A8];
  uint64_t v10 = 0x40000000;
  uint64_t v11 = __si_scheduler_set_thread_block_invoke;
  unint64_t v12 = &__block_descriptor_tmp_29_1150;
  uint64_t v13 = a1;
  pthread_t v14 = 0;
  dispatch_sync(v8, &v9);
}

void preheat_runLoop(uint64_t a1, void (*a2)(uint64_t, void), uint64_t a3)
{
  pthread_t v6 = pthread_self();
  unint64_t v7 = *(NSObject **)(a1 + 32);
  uint64_t v9 = MEMORY[0x1E4F143A8];
  uint64_t v10 = 0x40000000;
  uint64_t v11 = __si_scheduler_set_thread_block_invoke;
  unint64_t v12 = &__block_descriptor_tmp_29_1150;
  uint64_t v13 = a1;
  pthread_t v14 = v6;
  dispatch_sync(v7, &v9);
  a2(a3, 0);
  unint64_t v8 = *(NSObject **)(a1 + 32);
  uint64_t v9 = MEMORY[0x1E4F143A8];
  uint64_t v10 = 0x40000000;
  uint64_t v11 = __si_scheduler_set_thread_block_invoke;
  unint64_t v12 = &__block_descriptor_tmp_29_1150;
  uint64_t v13 = a1;
  pthread_t v14 = 0;
  dispatch_sync(v8, &v9);
}

void shutdown_runLoop(uint64_t a1, void (*a2)(uint64_t, void), uint64_t a3)
{
  pthread_t v6 = pthread_self();
  unint64_t v7 = *(NSObject **)(a1 + 32);
  uint64_t v9 = MEMORY[0x1E4F143A8];
  uint64_t v10 = 0x40000000;
  uint64_t v11 = __si_scheduler_set_thread_block_invoke;
  unint64_t v12 = &__block_descriptor_tmp_29_1150;
  uint64_t v13 = a1;
  pthread_t v14 = v6;
  dispatch_sync(v7, &v9);
  a2(a3, 0);
  unint64_t v8 = *(NSObject **)(a1 + 32);
  uint64_t v9 = MEMORY[0x1E4F143A8];
  uint64_t v10 = 0x40000000;
  uint64_t v11 = __si_scheduler_set_thread_block_invoke;
  unint64_t v12 = &__block_descriptor_tmp_29_1150;
  uint64_t v13 = a1;
  pthread_t v14 = 0;
  dispatch_sync(v8, &v9);
}

void initCountsArray_block_invoke(int a1, CFMutableArrayRef theArray, uint64_t a3)
{
  if (theArray)
  {
    uint64_t v3 = a3;
    if (a3 >= 1)
    {
      if (initCountsArray_block_invoke_onceToken != -1) {
        dispatch_once(&initCountsArray_block_invoke_onceToken, &__block_literal_global_546);
      }
      do
      {
        CFArrayAppendValue(theArray, (const void *)initCountsArray_block_invoke_cfZero);
        --v3;
      }
      while (v3);
    }
  }
}

CFNumberRef initCountsArray_block_invoke_2()
{
  CFNumberRef result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberLongType, &initCountsArray_block_invoke_zero);
  initCountsArray_block_invoke_cfZero = (uint64_t)result;
  return result;
}

void readFromAllCountsArray_block_invoke_3(int a1, CFArrayRef theArray, __CFArray *a3, char a4, uint64_t a5)
{
  if (theArray)
  {
    if (CFArrayGetCount(theArray))
    {
      unint64_t valuePtr = 0;
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, 0);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
      if (a5 >= 1)
      {
        CFIndex v10 = 0;
        uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)(valuePtr & ~(-1 << a4)));
        v11.i16[0] = vaddlv_u8(v11);
        CFIndex v12 = v11.u32[0] + 1;
        do
        {
          if ((valuePtr >> (a4 + v10)))
          {
            CFIndex v13 = v12 + 1;
            pthread_t v14 = CFArrayGetValueAtIndex(theArray, v12);
            CFArraySetValueAtIndex(a3, v10, v14);
            CFIndex v12 = v13;
          }
          ++v10;
        }
        while (a5 != v10);
      }
    }
  }
}

void _journalPlaybackResume(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)a1) {
      si_indexingWatchdogResume(*(void *)(*(void *)a1 + 64));
    }
  }
}

void _journalPlaybackSuspend(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)a1) {
      si_indexingWatchdogSuspend(*(void *)(*(void *)a1 + 64));
    }
  }
}

BOOL _journalPlaybackMatchAddress(uint64_t a1, char *a2)
{
  return a1 && (int v2 = *(uint64_t **)(a1 + 8)) != 0 && _journalMatchAddress(v2, a2);
}

BOOL _journalMatchAddress(uint64_t *a1, char *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = a1[2];
  unint64_t v3 = v2 + a1[3];
  BOOL v6 = v2 != -1 && v2 <= (unint64_t)a2 && v3 > (unint64_t)a2;
  if (v6)
  {
    bzero(v32, 0x400uLL);
    uint64_t v9 = fd_name(a1[1], v32, 0x400uLL);
    memset(&v23, 0, sizeof(v23));
    int v10 = *__error();
    uint8x8_t v11 = _SILogForLogForCategory(10);
    os_log_type_t v12 = dword_1E9FC90CC < 3;
    if (os_log_type_enabled(v11, (os_log_type_t)(dword_1E9FC90CC < 3)))
    {
      *(_DWORD *)std::__split_buffer<std::string> buf = 134218754;
      uint64_t v25 = a2;
      __int16 v26 = 2048;
      unint64_t v27 = v2;
      __int16 v28 = 2048;
      st_std::string::size_type size = v3;
      __int16 v30 = 2080;
      uint64_t v31 = v9;
      _os_log_impl(&dword_1BD672000, v11, v12, "*warn* Got a journal exception at address:%p, map:[%p, %p), name: %s.", buf, 0x2Au);
    }
    *__error() = v10;
    int v13 = fd_stat(a1[1], &v23);
    int v14 = *__error();
    uint64_t v15 = _SILogForLogForCategory(10);
    BOOL v16 = dword_1E9FC90CC < 3;
    BOOL v17 = os_log_type_enabled(v15, (os_log_type_t)(dword_1E9FC90CC < 3));
    if (v13)
    {
      if (v17)
      {
        *(_DWORD *)std::__split_buffer<std::string> buf = 136315138;
        uint64_t v25 = v9;
        unint64_t v18 = "*warn* Stat failed for name: %s.";
        int v19 = v15;
        os_log_type_t v20 = v16;
        uint32_t v21 = 12;
LABEL_18:
        _os_log_impl(&dword_1BD672000, v19, v20, v18, buf, v21);
      }
    }
    else if (v17)
    {
      *(_DWORD *)std::__split_buffer<std::string> buf = 134218496;
      uint64_t v25 = (char *)v2;
      __int16 v26 = 2048;
      unint64_t v27 = v3;
      __int16 v28 = 2048;
      st_std::string::size_type size = v23.st_size;
      unint64_t v18 = "*warn* map:[%p, %p), size: %llx";
      int v19 = v15;
      os_log_type_t v20 = v16;
      uint32_t v21 = 32;
      goto LABEL_18;
    }
    *__error() = v14;
    fd_assert_not_unlinked(a1[1]);
  }
  return v6;
}

void _journalCtxResume(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)a1) {
      si_indexingWatchdogResume(*(void *)(*(void *)a1 + 64));
    }
  }
}

void _journalCtxSuspend(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)a1) {
      si_indexingWatchdogSuspend(*(void *)(*(void *)a1 + 64));
    }
  }
}

BOOL _journalCtxMatchAddress(uint64_t a1, char *a2)
{
  return a1 && (unint64_t v2 = *(uint64_t **)(a1 + 8)) != 0 && _journalMatchAddress(v2, a2);
}

void si_routine_protectionClassCX(unsigned char *a1)
{
  if (a1[16]) {
    free(a1);
  }
}

void si_routine_thirdParty(unsigned char *a1)
{
  if (a1[16]) {
    free(a1);
  }
}

void si_routine_pommesctl(unsigned char *a1)
{
  if (a1[16]) {
    free(a1);
  }
}

void si_routine_photos(unsigned char *a1)
{
  if (a1[16]) {
    free(a1);
  }
}

void si_routine_notes(unsigned char *a1)
{
  if (a1[16]) {
    free(a1);
  }
}

void si_routine_localFileProvider(unsigned char *a1)
{
  if (a1[16]) {
    free(a1);
  }
}

void si_routine_calendar(unsigned char *a1)
{
  if (a1[16]) {
    free(a1);
  }
}

void si_routine_messages(unsigned char *a1)
{
  if (a1[16]) {
    free(a1);
  }
}

uint64_t si_get_contentindex_for_id(uint64_t a1, int a2)
{
  unint64_t v2 = *(uint64_t ***)(a1 + 1376);
  uint64_t v3 = *((unsigned int *)v2 + 2);
  if (v3)
  {
    uint64_t v4 = *v2;
    while (1)
    {
      uint64_t v5 = *v4;
      if (*(_DWORD *)(*v4 + 56) == a2) {
        break;
      }
      ++v4;
      if (!--v3) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    BOOL v6 = *(uint64_t ***)(a1 + 1384);
    uint64_t v7 = *((unsigned int *)v6 + 2);
    if (v7)
    {
      for (uint64_t i = *v6; ; ++i)
      {
        uint64_t v5 = *i;
        if (*(_DWORD *)(*i + 56) == a2) {
          break;
        }
        if (!--v7) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void si_power_info_init(uint64_t a1, xpc_object_t object, uint64_t a3, NSObject *a4)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 16) = a3;
  if (object) {
    xpc_object_t v6 = xpc_retain(object);
  }
  else {
    xpc_object_t v6 = 0;
  }
  *(void *)(a1 + 8) = v6;
  if (a4)
  {
    *(void *)(a1 + 24) = a4;
    dispatch_retain(a4);
    uint64_t v7 = *(NSObject **)(a1 + 24);
    dispatch_group_enter(v7);
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t si_power_info_assert_power(uint64_t result, uint64_t a2)
{
  if (!*(void *)(result + 24))
  {
    unint64_t v2 = (_DWORD *)result;
    if (!*(_DWORD *)result)
    {
      uint64_t v3 = *(void *)(a2 + 2352);
      if (v3)
      {
        uint64_t v4 = *(uint64_t (**)(void, const char *))(v3 + 64);
        if (v4)
        {
          CFNumberRef result = v4(*(void *)(v3 + 144), "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SIStoring.c");
          *unint64_t v2 = result;
        }
      }
    }
  }
  return result;
}

uint64_t __syncIndex_block_invoke(uint64_t a1, uint64_t a2)
{
  char v2 = atomic_load((unsigned int *)(a2 + 36));
  if ((v2 & 2) == 0 && !*(unsigned char *)(a2 + 15203) && (*(unsigned char *)(a2 + 15200) & 6) == 2)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if (!*(unsigned char *)(v5 + 6936) && *(int *)(v5 + 6952) <= 0)
    {
      xpc_object_t v6 = malloc_type_calloc(1uLL, 0x60uLL, 0x10B0040E0DE4348uLL);
      void *v6 = *(void *)(a1 + 32);
      v6[1] = a2;
      *((_DWORD *)v6 + 5) = *(_DWORD *)(a2 + 56);
      si_forceSplitIndex();
    }
  }
  return 1;
}

uint64_t ContentIndexListsApply(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result && (uint64_t v5 = result, *(_DWORD *)(result + 8)))
  {
    uint64_t v6 = 0;
    while (1)
    {
      CFNumberRef result = (*(uint64_t (**)(uint64_t, void, void))(a3 + 16))(a3, *(void *)(*(void *)v5 + 8 * v6), 0);
      if (!result) {
        break;
      }
      if (++v6 >= (unint64_t)*(unsigned int *)(v5 + 8)) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    if (a2 && *(_DWORD *)(a2 + 8))
    {
      unint64_t v7 = 0;
      do
      {
        CFNumberRef result = (*(uint64_t (**)(uint64_t, void, uint64_t))(a3 + 16))(a3, *(void *)(*(void *)a2 + 8 * v7), 1);
        if (!result) {
          break;
        }
        ++v7;
      }
      while (v7 < *(unsigned int *)(a2 + 8));
    }
  }
  return result;
}

void si_deleteExhaustedRemappings(uint64_t a1, CFArrayRef theArray)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (theArray)
  {
    for (CFIndex i = 0; i < CFArrayGetCount(theArray); ++i)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      int v6 = *(_DWORD *)(a1 + 32);
      bzero(__str, 0x400uLL);
      snprintf(__str, 0x400uLL, "remapping%ld", ValueAtIndex[5]);
      unint64_t v7 = (atomic_uint *)fd_create_protected(v6, __str, 0, 3u);
      _fd_unlink_with_origin((uint64_t)v7, 0);
      fd_release(v7);
    }
    CFRelease(theArray);
  }
}

void si_makeUnavailable(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if (**(_DWORD **)(a1 + 6584)
    || (atomic_load_explicit((atomic_uchar *volatile)(a1 + 2431), memory_order_acquire) & 1) != 0
    || (char v9 = 0, atomic_compare_exchange_strong((atomic_uchar *volatile)(a1 + 2431), (unsigned __int8 *)&v9, 1u), v9))
  {
    int v27 = *__error();
    __int16 v28 = _SILogForLogForCategory(0);
    os_log_type_t v29 = gSILogLevels[0] < 3;
    if (os_log_type_enabled(v28, (os_log_type_t)(gSILogLevels[0] < 3)))
    {
      *(_DWORD *)std::__split_buffer<std::string> buf = 67109634;
      int v57 = a2;
      __int16 v58 = 2080;
      uint64_t v59 = a5;
      __int16 v60 = 2048;
      uint64_t v61 = a3;
      _os_log_impl(&dword_1BD672000, v28, v29, "*warn* Index already unavailable, error:%d, reason:\"%s\", options:0x%lx", buf, 0x1Cu);
    }
    *__error() = v27;
  }
  else
  {
    bzero(v49, 0x400uLL);
    int v11 = fcntl(*(_DWORD *)(a1 + 32), 50, v49);
    int v12 = v49[0];
    int v44 = *__error();
    int v13 = _SILogForLogForCategory(0);
    os_log_type_t v14 = gSILogLevels[0] < 3;
    if (os_log_type_enabled(v13, (os_log_type_t)(gSILogLevels[0] < 3)))
    {
      if (v12) {
        BOOL v15 = v11 < 0;
      }
      else {
        BOOL v15 = 1;
      }
      *(_DWORD *)std::__split_buffer<std::string> buf = 67109890;
      int v57 = a2;
      BOOL v16 = v49;
      if (v15) {
        BOOL v16 = 0;
      }
      __int16 v58 = 2080;
      uint64_t v59 = a5;
      __int16 v60 = 2048;
      uint64_t v61 = a3;
      __int16 v62 = 2080;
      uint64_t v63 = v16;
      _os_log_impl(&dword_1BD672000, v13, v14, "*warn* Marking the index as unavailable, error:%d, reason:\"%s\", options:0x%lx, path:%s", buf, 0x26u);
    }
    *__error() = v44;
    bzero(__str, 0x400uLL);
    uint64_t v17 = snprintf(__str, 0x400uLL, "%d, %u, %u, %s", a2, a4, a3, a5);
    __si_write_error_to_file(v17, *(_DWORD *)(a1 + 60), *(_DWORD *)(a1 + 32), v18, v19, v20, v21, v22, (char)"SpotlightIndex.c");
    for (uint64_t i = 0; i != 160; i += 8)
    {
      uint64_t v24 = *(void *)(a1 + 1008 + i);
      if (v24) {
        *(_DWORD *)(v24 + 36) = 1;
      }
    }
    if (a3)
    {
      int v30 = *(_DWORD *)(a1 + 32);
      bzero(buf, 0x400uLL);
      memset(&v47, 0, sizeof(v47));
      if (fstat(v30, &v47) == -1)
      {
        int v38 = *__error();
        uint64_t v39 = _SILogForLogForCategory(0);
        os_log_type_t v40 = 2 * (gSILogLevels[0] < 4);
        if (os_log_type_enabled(v39, v40))
        {
          int v41 = *__error();
          *(_DWORD *)xpc_object_t values = 67109376;
          *(_DWORD *)&values[4] = v30;
          *(_WORD *)&values[8] = 1024;
          *(_DWORD *)&values[10] = v41;
          _os_log_impl(&dword_1BD672000, v39, v40, "fstat(%d) err: %d", values, 0xEu);
        }
        *__error() = v38;
      }
      else
      {
        int v31 = fcntl(v30, 50, buf, 16241, __str);
        int v32 = buf[0];
        int v33 = *__error();
        uint64_t v34 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          if (v32) {
            BOOL v42 = v31 < 0;
          }
          else {
            BOOL v42 = 1;
          }
          unint64_t v43 = buf;
          if (v42) {
            unint64_t v43 = 0;
          }
          *(_DWORD *)xpc_object_t values = 136315906;
          *(void *)&values[4] = "notify_lowspace";
          *(_WORD *)&values[12] = 1024;
          int v51 = 16208;
          __int16 v52 = 1024;
          dev_t st_dev = v47.st_dev;
          __int16 v54 = 2080;
          BOOL v55 = v43;
          _os_log_error_impl(&dword_1BD672000, v34, OS_LOG_TYPE_ERROR, "%s:%d: low space for device %d (%s)", values, 0x22u);
        }
        *__error() = v33;
        dev_t valuePtr = v47.st_dev;
        CFAllocatorRef v35 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        *(void *)xpc_object_t values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
        keys = @"DeviceNumber";
        CFDictionaryRef v36 = CFDictionaryCreate(v35, (const void **)&keys, (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        LocalCenter = CFNotificationCenterGetLocalCenter();
        CFNotificationCenterPostNotification(LocalCenter, @"com.apple.Spotlight.lowdiskspace", 0, v36, 1u);
        CFRelease(*(CFTypeRef *)values);
        CFRelease(v36);
      }
    }
    else
    {
      uint64_t v25 = *(void *)(a1 + 2352);
      __int16 v26 = *(void (**)(void, uint64_t, uint64_t, const char *))(v25 + 32);
      if (v26)
      {
        if ((a3 & 2) != 0)
        {
          touch_crash_state(*(_DWORD *)(a1 + 32));
          uint64_t v25 = *(void *)(a1 + 2352);
          __int16 v26 = *(void (**)(void, uint64_t, uint64_t, const char *))(v25 + 32);
        }
        v26(*(void *)(v25 + 144), a2, a3, a5);
      }
    }
  }
}

uint64_t delete_index_recovery_files(int a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  bzero(__s, 0x400uLL);
  uint64_t result = fcntl(a1, 50, __s);
  if ((result & 0x80000000) == 0 && __s[0])
  {
    uint64_t v3 = &__s[strlen(__s)];
    sprintf(v3, "/%s", "store.db.recover");
    if (gSILogLevels[0] >= 5)
    {
      int v5 = *__error();
      int v6 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::__split_buffer<std::string> buf = 136315138;
        int v10 = __s;
        _os_log_impl(&dword_1BD672000, v6, OS_LOG_TYPE_DEFAULT, "deleting %s", buf, 0xCu);
      }
      *__error() = v5;
    }
    unlink(__s);
    sprintf(v3, "/%s", ".store.db.recover");
    if (gSILogLevels[0] >= 5)
    {
      int v7 = *__error();
      unint64_t v8 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::__split_buffer<std::string> buf = 136315138;
        int v10 = __s;
        _os_log_impl(&dword_1BD672000, v8, OS_LOG_TYPE_DEFAULT, "deleting %s", buf, 0xCu);
      }
      *__error() = v7;
    }
    unlink(__s);
    for (int i = 1; i != 6; ++i)
    {
      sprintf(v3, "/store.db.recoverStr-%d.map.header", i);
      unlink(__s);
      sprintf(v3, "/store.db.recoverStr-%d.map.offsets", i);
      unlink(__s);
      sprintf(v3, "/store.db.recoverStr-%d.map.data", i);
      unlink(__s);
      sprintf(v3, "/store.db.recoverStr-%d.map.buckets", i);
      uint64_t result = unlink(__s);
    }
  }
  return result;
}

BOOL lowDiskSpaceCallback(uint64_t a1)
{
  pthread_mutex_lock(&mergeMutex);
  int v2 = *(unsigned __int8 *)(a1 + 2427);
  if (*(unsigned char *)(a1 + 2427))
  {
    ++*(_DWORD *)(a1 + 2420);
    do
      pthread_cond_wait(&mergeCond, &mergeMutex);
    while (*(unsigned char *)(a1 + 2427));
    --*(_DWORD *)(a1 + 2420);
  }
  pthread_mutex_unlock(&mergeMutex);
  return v2 != 0;
}

char *__si_assert_copy_extra_625(int a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v2 = v8;
  bzero(v8, 0x400uLL);
  if (a1 == -1 || fcntl(a1, 50, v8) < 0 || !v8[0])
  {
    uint64_t v3 = getcwd(v8, 0x400uLL);
    if (v3) {
      int v2 = v3;
    }
    else {
      int v2 = "";
    }
  }
  int v7 = 0;
  uint64_t v4 = (const char *)pthread_getspecific(__THREAD_STR_DATA_KEY);
  if (v4) {
    int v5 = v4;
  }
  else {
    int v5 = "";
  }
  asprintf(&v7, "%s %s", v2, v5);
  return v7;
}

uint64_t __si_set_obj_state_locked_block_invoke_2(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 15201);
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v2 != 4 && v2 != v3)
  {
    *(unsigned char *)(a2 + 15201) = v3;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  return 1;
}

void serialize_to_state(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  *(unsigned char *)a4 = 1;
  int v6 = *(_DWORD *)(a1 + 8);
  if (a3)
  {
    if (v6)
    {
      int v13 = __si_assert_copy_extra_625(-1);
      os_log_type_t v14 = v13;
      BOOL v15 = "";
      if (v13) {
        BOOL v15 = v13;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 30871, "syncSet->indexCount == 0", v15);
      free(v14);
      if (__valid_fs(-1)) {
        uint64_t v16 = 2989;
      }
      else {
        uint64_t v16 = 3072;
      }
      *(_DWORD *)uint64_t v16 = -559038737;
      abort();
    }
    unint64_t v8 = (unsigned int *)(a2 + 8);
    int v7 = *(_DWORD *)(a2 + 8);
    *(_WORD *)(a4 + 6) = v7;
    uint64_t v22 = 0;
    stat v23 = &v22;
    uint64_t v24 = 0x2000000000;
    int v9 = *(unsigned __int16 *)(a4 + 4);
    BOOL v10 = 1;
  }
  else
  {
    int v9 = 0;
    *(_WORD *)(a4 + 4) = v6;
    unint64_t v8 = (unsigned int *)(a2 + 8);
    int v7 = *(_DWORD *)(a2 + 8);
    *(_WORD *)(a4 + 6) = v7;
    uint64_t v22 = 0;
    stat v23 = &v22;
    uint64_t v24 = 0x2000000000;
    BOOL v10 = v6 == 0;
  }
  int v25 = v9;
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 0x40000000;
  uint64_t v18 = __serialize_to_state_block_invoke;
  uint64_t v19 = &unk_1E6342AC8;
  uint64_t v20 = &v22;
  uint64_t v21 = a4;
  if (v10)
  {
LABEL_11:
    if (v7)
    {
      unint64_t v12 = 0;
      do
      {
        if (!((unsigned int (*)(void *, void, uint64_t))v18)(v17, *(void *)(*(void *)a2 + 8 * v12), 1))break; {
        ++v12;
        }
      }
      while (v12 < *v8);
    }
  }
  else
  {
    uint64_t v11 = 0;
    while (((unsigned int (*)(void *, void, void))v18)(v17, *(void *)(*(void *)a1 + 8 * v11), 0))
    {
      if (++v11 >= (unint64_t)*(unsigned int *)(a1 + 8))
      {
        if (!a2) {
          break;
        }
        int v7 = *v8;
        goto LABEL_11;
      }
    }
  }
  _Block_object_dispose(&v22, 8);
}

uint64_t si_store_index_state(int a1, char *a2, int a3, int a4, char *a5, int a6, int a7, int a8)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = x_openat(a1, a2, 536872449, a4, (int)a5, a6, a7, a8, 0x180u);
  uint64_t v12 = v11;
  if (a3) {
    fcntl(v11, 64, 3);
  }
  if (v12 == -1) {
    return *__error();
  }
  uint64_t v13 = prot_pwrite(v12, a5, 0x1000uLL, 0);
  if (v13 == 4096)
  {
    prot_fsync(v12, a4);
    int v16 = *__error();
    uint64_t v17 = _SILogForLogForCategory(11);
    os_log_type_t v18 = 2 * (dword_1E9FC90D0 < 4);
    if (os_log_type_enabled(v17, v18))
    {
      if ((a5[1] - 1) > 3u) {
        uint64_t v19 = "unknown";
      }
      else {
        uint64_t v19 = off_1E6342B48[(a5[1] - 1)];
      }
      *(_DWORD *)std::__split_buffer<std::string> buf = 136315138;
      stat v23 = v19;
      _os_log_impl(&dword_1BD672000, v17, v18, "write state:%s", buf, 0xCu);
    }
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v14 = v13;
    if (v13 == -1) {
      uint64_t v15 = *__error();
    }
    else {
      uint64_t v15 = 22;
    }
    int v16 = *__error();
    uint64_t v20 = _SILogForLogForCategory(11);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::__split_buffer<std::string> buf = 136316162;
      stat v23 = "si_store_index_state";
      __int16 v24 = 1024;
      int v25 = 30853;
      __int16 v26 = 1024;
      int v27 = v12;
      __int16 v28 = 2048;
      uint64_t v29 = v14;
      __int16 v30 = 1024;
      int v31 = v15;
      _os_log_error_impl(&dword_1BD672000, v20, OS_LOG_TYPE_ERROR, "%s:%d: write index state fd:%d rs:%ld error:%d", buf, 0x28u);
    }
  }
  *__error() = v16;
  close(v12);
  return v15;
}

uint64_t __serialize_to_state_block_invoke(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 15201);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v5 = *(int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 1;
  *(unsigned char *)(v3 + v5 + 8) = v2;
  return 1;
}

const char *SISetCrashCStr(const char *result)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    if (gSICrashBufferSize && gSICrashBuffer != 0)
    {
      char v2 = result;
      pthread_mutex_lock(&sSICrashStrLock);
      bzero(__source, 0x800uLL);
      uint64_t v3 = (char *)gSICrashBuffer;
      if (*(unsigned char *)gSICrashBuffer)
      {
        __strlcpy_chk();
        __strlcat_chk();
        uint64_t v3 = (char *)gSICrashBuffer;
      }
      char *v3 = 0;
      pthread_t v4 = pthread_self();
      snprintf(v3, 0x800uLL, "[%p] %s", v4, v2);
      if (__source[0]) {
        strlcat((char *)gSICrashBuffer, __source, gSICrashBufferSize);
      }
      return (const char *)pthread_mutex_unlock(&sSICrashStrLock);
    }
  }
  return result;
}

uint64_t retire_docs(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a2[7];
  uint64_t v2 = a2[8];
  uint64_t v5 = a2[4];
  uint64_t v4 = a2[5];
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[12];
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, void *))(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  v14[0] = a2[2];
  v14[1] = v4;
  v14[2] = v2;
  v14[3] = v6;
  v14[4] = v5;
  v14[5] = v3;
  v14[6] = v7;
  v14[7] = v8;
  v14[8] = v9;
  long long v15 = *((_OWORD *)a2 + 5);
  uint64_t v16 = v10;
  return v12(v11, 0, v14);
}

uint64_t commit_shadow(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v2 = __si_assert_copy_extra_625(-1);
    uint64_t v3 = v2;
    uint64_t v4 = "";
    if (v2) {
      uint64_t v4 = v2;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 1609, "!ctx->syncDirtyChunks", v4);
    free(v3);
    if (__valid_fs(-1)) {
      uint64_t v5 = 2989;
    }
    else {
      uint64_t v5 = 3072;
    }
    *(_DWORD *)uint64_t v5 = -559038737;
    abort();
  }
  db_commit_shadow_complete_datastore(*(void *)(a1 + 24));
  return 0;
}

uint64_t post_shadow_datastore(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v11 = __si_assert_copy_extra_625(-1);
    uint64_t v12 = v11;
    uint64_t v13 = "";
    if (v11) {
      uint64_t v13 = v11;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 1578, "!ctx->syncDirtyChunks", v13);
    free(v12);
    if (__valid_fs(-1)) {
      uint64_t v14 = 2989;
    }
    else {
      uint64_t v14 = 3072;
    }
    *(_DWORD *)uint64_t v14 = -559038737;
    abort();
  }
  uint64_t v2 = si_set_obj_state_locked(*(void *)(a1 + 32), 0, 4);
  if (v2)
  {
    uint64_t v3 = v2;
    int v4 = *__error();
    uint64_t v5 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::__split_buffer<std::string> buf = 136315650;
      uint64_t v16 = "post_shadow_datastore";
      __int16 v17 = 1024;
      int v18 = 1582;
      __int16 v19 = 1024;
      int v20 = v3;
      uint64_t v6 = "%s:%d: si_set_index_state err:%d";
LABEL_17:
      _os_log_error_impl(&dword_1BD672000, v5, OS_LOG_TYPE_ERROR, v6, buf, 0x18u);
    }
  }
  else
  {
    uint64_t v7 = db_commit_shadow_datastore(*(void *)(a1 + 24));
    if (v7)
    {
      uint64_t v3 = v7;
      int v4 = *__error();
      uint64_t v5 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::__split_buffer<std::string> buf = 136315650;
        uint64_t v16 = "post_shadow_datastore";
        __int16 v17 = 1024;
        int v18 = 1588;
        __int16 v19 = 1024;
        int v20 = v3;
        uint64_t v6 = "%s:%d: db_commit_shadow_datastore err:%d";
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v3 = db_store_dirty_chunk_info(*(void *)(*(void *)(a1 + 32) + 1184), *(unsigned int *)(*(void *)(a1 + 32) + 32), 1, 0);
      uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 6616);
      if (!v9) {
        return v3;
      }
      uint64_t v10 = commitShadowReverseStore(v9);
      if (!v10)
      {
        uint64_t v3 = reverseStoreStoreDirtyBitmap(*(void *)(*(void *)(a1 + 32) + 6616));
        if (!v3) {
          return v3;
        }
        int v4 = *__error();
        uint64_t v5 = _SILogForLogForCategory(0);
        if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
          goto LABEL_7;
        }
        *(_DWORD *)std::__split_buffer<std::string> buf = 136315650;
        uint64_t v16 = "post_shadow_datastore";
        __int16 v17 = 1024;
        int v18 = 1599;
        __int16 v19 = 1024;
        int v20 = v3;
        uint64_t v6 = "%s:%d: reverseStoreStoreDirtyBitmap err:%d";
        goto LABEL_17;
      }
      uint64_t v3 = v10;
      int v4 = *__error();
      uint64_t v5 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::__split_buffer<std::string> buf = 136315650;
        uint64_t v16 = "post_shadow_datastore";
        __int16 v17 = 1024;
        int v18 = 1596;
        __int16 v19 = 1024;
        int v20 = v3;
        uint64_t v6 = "%s:%d: commitShadowReverseStore err:%d";
        goto LABEL_17;
      }
    }
  }
LABEL_7:
  *__error() = v4;
  return v3;
}

uint64_t shadow_datastore(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 40))
  {
    long long v15 = __si_assert_copy_extra_625(-1);
    uint64_t v16 = v15;
    __int16 v17 = "";
    if (v15) {
      __int16 v17 = v15;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 1548, "!ctx->syncDirtyChunks", v17);
    free(v16);
    if (__valid_fs(-1)) {
      uint64_t v18 = 2989;
    }
    else {
      uint64_t v18 = 3072;
    }
    *(_DWORD *)uint64_t v18 = -559038737;
    abort();
  }
  uint64_t v2 = db_shadow_datastore(*(void *)(a1 + 24), *(unsigned __int8 *)(a1 + 42));
  if (v2)
  {
    uint64_t v3 = v2;
    int v4 = *__error();
    uint64_t v5 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
LABEL_4:
      *__error() = v4;
      goto LABEL_5;
    }
    *(_DWORD *)std::__split_buffer<std::string> buf = 136315650;
    int v20 = "shadow_datastore";
    __int16 v21 = 1024;
    int v22 = 1551;
    __int16 v23 = 1024;
    int v24 = v3;
    uint64_t v14 = "%s:%d: db_shadow_datastore err:%d";
LABEL_15:
    _os_log_error_impl(&dword_1BD672000, v5, OS_LOG_TYPE_ERROR, v14, buf, 0x18u);
    goto LABEL_4;
  }
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(v12 + 6616);
  if (v13)
  {
    uint64_t v3 = shadowReverseStore(v13, 0, *(_DWORD **)(v12 + 6584));
    if (v3)
    {
      int v4 = *__error();
      uint64_t v5 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_4;
      }
      *(_DWORD *)std::__split_buffer<std::string> buf = 136315650;
      int v20 = "shadow_datastore";
      __int16 v21 = 1024;
      int v22 = 1557;
      __int16 v23 = 1024;
      int v24 = v3;
      uint64_t v14 = "%s:%d: shadowReverseStore err:%d";
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
LABEL_5:
  uint64_t v6 = *(os_unfair_lock_s **)(a1 + 32);
  uint64_t v7 = (uint64_t)&v6[546];
  uint64_t v8 = v6 + 554;
  os_unfair_lock_lock(v6 + 554);
  if (v3) {
    char v9 = 8;
  }
  else {
    char v9 = 7;
  }
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  activityJournalWriteVInt64(v7, v9, (unint64_t)Current);
  os_unfair_lock_unlock(v8);
  return v3;
}

uint64_t commit_sync_datastore(uint64_t a1, int a2)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32);
  if (a2) {
    int v5 = 2;
  }
  else {
    int v5 = 3;
  }
  uint64_t v6 = si_set_obj_state_locked(v4, 0, v5);
  if (v6)
  {
    uint64_t v7 = v6;
    int v8 = *__error();
    char v9 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __str = 136315650;
      *(void *)&__str[4] = "commit_sync_datastore";
      *(_WORD *)&__str[12] = 1024;
      *(_DWORD *)&__str[14] = 1519;
      *(_WORD *)&__str[18] = 1024;
      *(_DWORD *)&__str[20] = v7;
      uint64_t v10 = "%s:%d: si_set_index_state err:%d";
LABEL_34:
      _os_log_error_impl(&dword_1BD672000, v9, OS_LOG_TYPE_ERROR, v10, (uint8_t *)__str, 0x18u);
      goto LABEL_9;
    }
    goto LABEL_9;
  }
  uint64_t v11 = db_commit_sync_datastore(*(void *)(a1 + 24), a2);
  if (v11)
  {
    uint64_t v7 = v11;
    int v8 = *__error();
    char v9 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __str = 136315650;
      *(void *)&__str[4] = "commit_sync_datastore";
      *(_WORD *)&__str[12] = 1024;
      *(_DWORD *)&__str[14] = 1523;
      *(_WORD *)&__str[18] = 1024;
      *(_DWORD *)&__str[20] = v7;
      uint64_t v10 = "%s:%d: db_commit_sync_datastore err:%d";
      goto LABEL_34;
    }
    goto LABEL_9;
  }
  uint64_t v25 = *(void *)(*(void *)(a1 + 32) + 6616);
  if (v25)
  {
    uint64_t v7 = commitSyncReverseStore(v25, a2);
    if (v7)
    {
      int v8 = *__error();
      char v9 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __str = 136315650;
        *(void *)&__str[4] = "commit_sync_datastore";
        *(_WORD *)&__str[12] = 1024;
        *(_DWORD *)&__str[14] = 1529;
        *(_WORD *)&__str[18] = 1024;
        *(_DWORD *)&__str[20] = v7;
        uint64_t v10 = "%s:%d: commitSyncReverseStore err:%d";
        goto LABEL_34;
      }
LABEL_9:
      *__error() = v8;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 1288);
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  memset(__str, 0, sizeof(__str));
  snprintf(__str, 0x200uLL, "doc_store_sync(%p)", (const void *)v12);
  v29[0] = 0;
  v29[1] = 0;
  ScopeLogger::ScopeLogger((ScopeLogger *)v29, __str);
  if (v12)
  {
    uint64_t v13 = (std::mutex *)(v12 + 40);
    std::mutex::lock((std::mutex *)(v12 + 40));
    int v14 = fsync(*(_DWORD *)(v12 + 4));
    std::mutex::unlock(v13);
    int v15 = *__error();
    uint64_t v16 = _SILogForLogForCategory(8);
    os_log_type_t v17 = 2 * (dword_1E9FC90C4 < 4);
    if (os_log_type_enabled(v16, v17))
    {
      *(_DWORD *)std::__split_buffer<std::string> buf = 136315394;
      int v31 = "doc_store_sync";
      __int16 v32 = 1024;
      int v33 = v14;
      _os_log_impl(&dword_1BD672000, v16, v17, "%s returns %d\n", buf, 0x12u);
    }
    *__error() = v15;
  }
  ScopeLogger::~ScopeLogger((ScopeLogger *)v29);
  uint64_t v18 = *(void *)(a1 + 32);
  uint64_t v19 = v18 + 2184;
  unint64_t v20 = *(void *)(v18 + 2400);
  memset(__str, 0, sizeof(__str));
  __int16 v21 = (os_unfair_lock_s *)(v18 + 2216);
  os_unfair_lock_lock((os_unfair_lock_t)(v18 + 2216));
  double Current = CFAbsoluteTimeGetCurrent();
  unint64_t v23 = (unint64_t)Current;
  if ((unint64_t)Current > 0x7F)
  {
    if (v23 >> 14)
    {
      if (v23 >> 21)
      {
        if (v23 >> 28)
        {
          if (v23 >> 35)
          {
            if (v23 >> 42)
            {
              if (v23 >> 49)
              {
                if (HIBYTE(v23))
                {
                  __str[0] = -1;
                  *(void *)&__str[1] = (unint64_t)Current;
                  uint64_t v24 = 9;
                }
                else
                {
                  __str[0] = -2;
                  __str[1] = (unint64_t)Current >> 48;
                  __str[2] = (unsigned __int16)((unint64_t)Current >> 32) >> 8;
                  __str[3] = (unint64_t)Current >> 32;
                  __str[4] = (unint64_t)Current >> 24;
                  __str[5] = (unint64_t)Current >> 16;
                  __str[6] = (unsigned __int16)(unint64_t)Current >> 8;
                  uint64_t v24 = 8;
                  __str[7] = (unint64_t)Current;
                }
              }
              else
              {
                __str[0] = BYTE6(v23) | 0xFC;
                __str[1] = (unsigned __int16)((unint64_t)Current >> 32) >> 8;
                __str[2] = (unint64_t)Current >> 32;
                __str[3] = (unint64_t)Current >> 24;
                __str[4] = (unint64_t)Current >> 16;
                __str[5] = (unsigned __int16)(unint64_t)Current >> 8;
                uint64_t v24 = 7;
                __str[6] = (unint64_t)Current;
              }
            }
            else
            {
              __str[0] = BYTE5(v23) | 0xF8;
              __str[1] = (unint64_t)Current >> 32;
              __str[2] = (unint64_t)Current >> 24;
              __str[3] = (unint64_t)Current >> 16;
              __str[4] = (unsigned __int16)(unint64_t)Current >> 8;
              __str[5] = (unint64_t)Current;
              uint64_t v24 = 6;
            }
          }
          else
          {
            __str[0] = BYTE4(v23) | 0xF0;
            __str[1] = (unint64_t)Current >> 24;
            __str[2] = (unint64_t)Current >> 16;
            __str[3] = (unsigned __int16)(unint64_t)Current >> 8;
            __str[4] = (unint64_t)Current;
            uint64_t v24 = 5;
          }
        }
        else
        {
          __str[0] = BYTE3(v23) | 0xE0;
          __str[1] = (unint64_t)Current >> 16;
          __str[2] = (unsigned __int16)(unint64_t)Current >> 8;
          __str[3] = (unint64_t)Current;
          uint64_t v24 = 4;
        }
      }
      else
      {
        __str[0] = BYTE2(v23) | 0xC0;
        __str[1] = (unsigned __int16)(unint64_t)Current >> 8;
        __str[2] = (unint64_t)Current;
        uint64_t v24 = 3;
      }
    }
    else
    {
      __str[0] = BYTE1(v23) | 0x80;
      __str[1] = (unint64_t)Current;
      uint64_t v24 = 2;
    }
  }
  else
  {
    __str[0] = (unint64_t)Current;
    uint64_t v24 = 1;
  }
  unsigned int v26 = v2_writeVInt64_9466((uint64_t)__str, v24, v20);
  if (v7) {
    char v27 = 6;
  }
  else {
    char v27 = 40;
  }
  activityJournalWrite(v19, v27, __str, v26);
  os_unfair_lock_unlock(v21);
  if (!v7) {
    *(void *)(*(void *)(a1 + 32) + 2144) = 0;
  }
  return v7;
}

void *store_stream_write_vint(void *result)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = result[5];
  if ((unint64_t)(result[4] - v1) < 0xB)
  {
    memset(v2, 0, sizeof(v2));
    return (void *)store_stream_write_bytes((uint64_t)result, (char *)v2, 1uLL);
  }
  else
  {
    *(unsigned char *)(result[6] + v1) = 0;
    result[5] = v1 + 1;
  }
  return result;
}

uint64_t __sync_datastore_block_invoke(uint64_t result, signed int a2, uint64_t a3, signed int a4, uint64_t a5)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    uint64_t v9 = result;
    store_stream_write_vint32((void *)(*(void *)(*(void *)(result + 32) + 8) + 24), a2);
    if (a2 >= 1)
    {
      uint64_t v10 = 0;
      uint64_t v11 = a2;
      do
      {
        uint64_t v12 = *(void *)(*(void *)(v9 + 32) + 8);
        unint64_t v13 = *(void *)(a3 + 8 * v10);
        size_t v14 = *(void *)(v12 + 56);
        uint64_t v15 = *(void *)(v12 + 64);
        if (v14 - v15 < 0xB)
        {
          long long v28 = 0u;
          long long v29 = 0u;
          long long __src = &v28;
          size_t v16 = writeVInt64((uint64_t)&v28, 0, v13);
          if (v16 + v15 >= v14)
          {
            long long __src = &v28;
            while (1)
            {
              size_t v17 = v14 - v15;
              memcpy((void *)(*(void *)(v12 + 72) + v15), __src, v17);
              *(void *)(v12 + 64) += v17;
              if (store_stream_flush((unsigned int *)(v12 + 24), 0)) {
                break;
              }
              long long __src = (long long *)((char *)__src + v17);
              v16 -= v17;
              size_t v14 = *(void *)(v12 + 56);
              uint64_t v15 = *(void *)(v12 + 64);
              if (v15 + v16 < v14) {
                goto LABEL_9;
              }
            }
          }
          else
          {
LABEL_9:
            memcpy((void *)(*(void *)(v12 + 72) + v15), __src, v16);
            *(void *)(v12 + 64) += v16;
          }
        }
        else
        {
          *(void *)(v12 + 64) = writeVInt64(*(void *)(v12 + 72), *(void *)(v12 + 64), v13);
        }
        ++v10;
      }
      while (v10 != v11);
    }
    uint64_t result = (uint64_t)store_stream_write_vint32((void *)(*(void *)(*(void *)(v9 + 32) + 8) + 24), a4);
    if (a4 >= 1)
    {
      uint64_t v18 = 0;
      uint64_t v19 = a4;
      do
      {
        uint64_t v20 = *(void *)(*(void *)(v9 + 32) + 8);
        unint64_t v21 = *(void *)(a5 + 8 * v18);
        size_t v23 = *(void *)(v20 + 56);
        uint64_t v22 = *(void *)(v20 + 64);
        if (v23 - v22 < 0xB)
        {
          long long v28 = 0u;
          long long v29 = 0u;
          uint64_t v24 = &v28;
          size_t v25 = writeVInt64((uint64_t)&v28, 0, v21);
          if (v25 + v22 >= v23)
          {
            uint64_t v24 = &v28;
            while (1)
            {
              size_t v26 = v23 - v22;
              memcpy((void *)(*(void *)(v20 + 72) + v22), v24, v26);
              *(void *)(v20 + 64) += v26;
              uint64_t result = store_stream_flush((unsigned int *)(v20 + 24), 0);
              if (result) {
                break;
              }
              uint64_t v24 = (long long *)((char *)v24 + v26);
              v25 -= v26;
              size_t v23 = *(void *)(v20 + 56);
              uint64_t v22 = *(void *)(v20 + 64);
              if (v22 + v25 < v23) {
                goto LABEL_21;
              }
            }
          }
          else
          {
LABEL_21:
            uint64_t result = (uint64_t)memcpy((void *)(*(void *)(v20 + 72) + v22), v24, v25);
            *(void *)(v20 + 64) += v25;
          }
        }
        else
        {
          uint64_t result = writeVInt64(*(void *)(v20 + 72), *(void *)(v20 + 64), v21);
          *(void *)(v20 + 64) = result;
        }
        ++v18;
      }
      while (v18 != v19);
    }
  }
  return result;
}

void *store_stream_write_vint32(void *result, unsigned int a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = result[5];
  if ((unint64_t)(result[4] - v2) < 6)
  {
    memset(v9, 0, sizeof(v9));
    if (a2 >> 28)
    {
      LOBYTE(v9[0]) = a2 | 0x80;
      BYTE1(v9[0]) = (a2 >> 7) | 0x80;
      BYTE2(v9[0]) = (a2 >> 14) | 0x80;
      BYTE3(v9[0]) = (a2 >> 21) | 0x80;
      BYTE4(v9[0]) = a2 >> 28;
      size_t v8 = 5;
    }
    else if ((a2 & 0xFE00000) != 0)
    {
      LOBYTE(v9[0]) = a2 | 0x80;
      BYTE1(v9[0]) = (a2 >> 7) | 0x80;
      BYTE2(v9[0]) = (a2 >> 14) | 0x80;
      BYTE3(v9[0]) = (a2 & 0xFE00000) >> 21;
      size_t v8 = 4;
    }
    else if ((a2 & 0x1FC000) != 0)
    {
      LOBYTE(v9[0]) = a2 | 0x80;
      BYTE1(v9[0]) = (a2 >> 7) | 0x80;
      BYTE2(v9[0]) = (a2 & 0x1FC000) >> 14;
      size_t v8 = 3;
    }
    else if ((a2 & 0x3F80) != 0)
    {
      LOBYTE(v9[0]) = a2 | 0x80;
      BYTE1(v9[0]) = (unsigned __int16)(a2 & 0x3F80) >> 7;
      size_t v8 = 2;
    }
    else
    {
      LOBYTE(v9[0]) = a2;
      size_t v8 = 1;
    }
    return (void *)store_stream_write_bytes((uint64_t)result, (char *)v9, v8);
  }
  else
  {
    uint64_t v3 = result[6];
    unsigned int v4 = a2 >> 28;
    if (a2 >> 28)
    {
      uint64_t v6 = (unsigned char *)(v3 + v2);
      unsigned char *v6 = a2 | 0x80;
      v6[1] = (a2 >> 7) | 0x80;
      v6[2] = (a2 >> 14) | 0x80;
      v2 += 4;
      v6[3] = (a2 >> 21) | 0x80;
    }
    else if ((a2 & 0xFE00000) != 0)
    {
      int v5 = (unsigned char *)(v3 + v2);
      *int v5 = a2 | 0x80;
      v5[1] = (a2 >> 7) | 0x80;
      v2 += 3;
      v5[2] = (a2 >> 14) | 0x80;
      unsigned int v4 = (a2 & 0xFE00000) >> 21;
    }
    else if ((a2 & 0x1FC000) != 0)
    {
      uint64_t v7 = (unsigned char *)(v3 + v2);
      *uint64_t v7 = a2 | 0x80;
      v2 += 2;
      v7[1] = (a2 >> 7) | 0x80;
      unsigned int v4 = (a2 & 0x1FC000) >> 14;
    }
    else if ((a2 & 0x3F80) != 0)
    {
      *(unsigned char *)(v3 + v2++) = a2 | 0x80;
      unsigned int v4 = (unsigned __int16)(a2 & 0x3F80) >> 7;
    }
    else
    {
      LOBYTE(v4) = a2;
    }
    *(unsigned char *)(v3 + v2) = v4;
    result[5] = v2 + 1;
  }
  return result;
}

void deleteStaleOverlay(int a1)
{
  uint64_t v1 = (atomic_uint *)fd_create_protected(a1, "dirStore.overlay", 1026, 0);
  if (v1)
  {
    uint64_t v2 = v1;
    _fd_unlink_with_origin((uint64_t)v1, 0);
    fd_release(v2);
  }
}

uint64_t unlock_datastore(uint64_t a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 6568));
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 6616);
  if (v2) {
    db_write_unlock(v2 + 4424);
  }
  uint64_t v3 = *(int **)(a1 + 24);
  return db_unlock_datastore(v3);
}

uint64_t si_indexDeleteByOid(uint64_t a1, uint64_t a2)
{
  uint64_t result = RLEOIDArrayIsEmpty(a2);
  if (!result)
  {
    uint64_t v5 = *(void *)(a1 + 1376);
    uint64_t v6 = *(void *)(a1 + 1384);
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 0x40000000;
    uint64_t v10 = __si_indexDeleteByOid_block_invoke;
    uint64_t v11 = &__block_descriptor_tmp_247;
    uint64_t v12 = a2;
    if (v5 && *(_DWORD *)(v5 + 8))
    {
      uint64_t v7 = 0;
      while (1)
      {
        uint64_t result = ((uint64_t (*)(void *, void, void))v10)(v9, *(void *)(*(void *)v5 + 8 * v7), 0);
        if (!result) {
          break;
        }
        if (++v7 >= (unint64_t)*(unsigned int *)(v5 + 8)) {
          goto LABEL_8;
        }
      }
    }
    else
    {
LABEL_8:
      if (v6 && *(_DWORD *)(v6 + 8))
      {
        unint64_t v8 = 0;
        do
        {
          uint64_t result = ((uint64_t (*)(void *, void, uint64_t))v10)(v9, *(void *)(*(void *)v6 + 8 * v8), 1);
          if (!result) {
            break;
          }
          ++v8;
        }
        while (v8 < *(unsigned int *)(v6 + 8));
      }
    }
  }
  return result;
}

uint64_t __si_indexDeleteByOid_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t attrsKeyValueMatchesString(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5)
{
  uint64_t result = _MDPlistDictionaryGetPlistObjectForKey();
  if (result)
  {
    uint64_t result = 0;
    if (_MDPlistGetPlistObjectType() == 244)
    {
      CFArrayRef Value = (const void *)_MDPlistStringGetValue();
      if (!a5 && !memcmp(Value, a4, 0)) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t attrsKeyValueEnabled()
{
  uint64_t result = _MDPlistDictionaryGetPlistObjectForKey();
  if (result)
  {
    int PlistObjectType = _MDPlistGetPlistObjectType();
    if (PlistObjectType > 225)
    {
      if ((PlistObjectType - 226) > 1) {
        return 0;
      }
    }
    else if (PlistObjectType != 35 && PlistObjectType != 51)
    {
      return PlistObjectType == 225 && _MDPlistBooleanGetValue();
    }
    return _MDPlistNumberGetIntValue() != 0;
  }
  return result;
}

uint64_t _SIProtectionClass(uint64_t a1)
{
  return *(_DWORD *)(a1 + 60) >> 1;
}

void remap_update_callback(uint64_t a1, void *a2)
{
  *(void *)(a2[1] + 24) = *a2;
}

void *si_compact_lock(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  pthread_mutex_lock(&mergeMutex);
  *(unsigned char *)(a1 + 2427) = 0;
  if (*(_DWORD *)(a1 + 2420)) {
    pthread_cond_signal(&mergeCond);
  }
  pthread_mutex_unlock(&mergeMutex);
  uint64_t v2 = malloc_type_calloc(1uLL, 0x50uLL, 0x2004093837F09uLL);
  v2[4] = si_scheduler_suspend(*(void *)(a1 + 896));
  *uint64_t v2 = si_scheduler_suspend(*(void *)(a1 + 864));
  atomic_fetch_add((atomic_uint *volatile)(a1 + 1444), 1u);
  uint64_t v3 = si_scheduler_suspend(*(void *)(a1 + 872));
  atomic_fetch_add((atomic_uint *volatile)(a1 + 1444), 0xFFFFFFFF);
  v2[1] = v3;
  _OWORD v2[2] = si_scheduler_suspend(*(void *)(a1 + 880));
  v2[8] = si_scheduler_suspend(*(void *)(a1 + 928));
  v2[9] = si_scheduler_suspend(*(void *)(a1 + 936));
  return v2;
}

void si_compact_unlock(uint64_t a1, void **a2)
{
  if (a1 && a2)
  {
    pthread_mutex_lock(&mergeMutex);
    *(unsigned char *)(a1 + 2427) = 1;
    pthread_mutex_unlock(&mergeMutex);
    si_scheduler_resume(*(void *)(a1 + 936), a2[9], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 6299);
    si_scheduler_resume(*(void *)(a1 + 928), a2[8], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 6300);
    si_scheduler_resume(*(void *)(a1 + 880), a2[2], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 6301);
    si_scheduler_resume(*(void *)(a1 + 872), a2[1], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 6302);
    si_scheduler_resume(*(void *)(a1 + 864), *a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 6303);
    si_scheduler_resume(*(void *)(a1 + 896), a2[4], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 6304);
  }
  else if (!a2)
  {
    return;
  }
  free(a2);
}

BOOL si_compact_cancel(uint64_t a1)
{
  return *(_DWORD *)(a1 + 2420) != 0;
}

void si_suspend_if_bad_time(uint64_t a1, uint64_t a2)
{
  if (sInGameMode)
  {
    pthread_mutex_lock(&sGameModeMutex);
    while (sInGameMode)
    {
      if (*(_DWORD *)(a1 + 2420)) {
        break;
      }
      if (*(unsigned char *)(a1 + 2424)) {
        break;
      }
      pthread_cond_wait(&sGameModeCond, &sGameModeMutex);
    }
    pthread_mutex_unlock(&sGameModeMutex);
  }
  fd_system_status_stall_if_busy();
  if (a2)
  {
    if (!*(void *)(a1 + 2320))
    {
      unsigned int v4 = *(_xpc_activity_s **)(a2 + 8);
      if (v4)
      {
        if (*(void *)(a2 + 16)
          && xpc_activity_should_defer(v4)
          && xpc_activity_set_state(*(xpc_activity_t *)(a2 + 8), 3))
        {
          pthread_mutex_lock(&mergeMutex);
          uint64_t v5 = *(_xpc_activity_s **)(a2 + 8);
          uint64_t v6 = *(unsigned char **)(a2 + 16);
          unsigned char *v6 = 1;
          if (v5)
          {
            do
            {
              if (!*(void *)(a2 + 16)) {
                break;
              }
              if (!xpc_activity_should_defer(v5)) {
                break;
              }
              if (*(_DWORD *)(a1 + 2420)) {
                break;
              }
              if (*(unsigned char *)(a1 + 2424)) {
                break;
              }
              pthread_cond_wait(&mergeCond, &mergeMutex);
              uint64_t v5 = *(_xpc_activity_s **)(a2 + 8);
            }
            while (v5);
            uint64_t v6 = *(unsigned char **)(a2 + 16);
          }
          unsigned char *v6 = 0;
          pthread_mutex_unlock(&mergeMutex);
        }
      }
    }
  }
}

NSObject *copyHoldQueue(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 1152);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(NSObject **)(v1 + 16);
  if (v2)
  {
    dispatch_retain(*(dispatch_object_t *)(v1 + 16));
    dispatch_suspend(v2);
  }
  return v2;
}

void si_cleanup(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (unsigned int *)malloc_type_malloc(0x28uLL, 0x10A0040A9CEF559uLL);
  uint64_t v5 = 0;
  *((void *)v4 + 1) = a1;
  *((void *)v4 + 2) = a2;
  atomic_store(1u, v4);
  *((void *)v4 + 3) = 0;
  *((void *)v4 + 4) = DeallocContentIndexList;
  do
  {
    si_enqueue_cleanup_if_busy(*(void **)(a1 + 1008 + v5), (uint64_t)v4);
    v5 += 8;
  }
  while (v5 != 136);
  long long v7 = 0u;
  long long v8 = 0u;
  uint64_t v6 = v4;
  si_collect_inner((void **)&v6);
}

void DeallocContentIndexList(os_unfair_lock_s *a1, void **a2, uint64_t a3, int a4)
{
  if (a4)
  {
    ContentIndexListFree(a2);
  }
  else
  {
    uint64_t v5 = a1 + 1643;
    os_unfair_lock_lock(a1 + 1643);
    ContentIndexListFree(a2);
    os_unfair_lock_unlock(v5);
  }
}

void si_clone_index_metadata_to_inflight(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = v1;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v26 = 0;
  char v27 = &v26;
  uint64_t v28 = 0x7800000000;
  long long v30 = 0u;
  long long v29 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  LODWORD(v30) = -1;
  CIMetaInfoCreateWithPrefix(*(_DWORD *)(v1 + 32), (uint64_t)&v29, 0, 0, *(_DWORD *)(v1 + 60), "tmp");
  long long v7 = v27;
  uint64_t v8 = v27[4];
  int v9 = *((_DWORD *)v27 + 10);
  uint64_t v10 = v27[6];
  long long v11 = *(_OWORD *)(v6 + 1192);
  *(_OWORD *)(v27 + 5) = *(_OWORD *)(v6 + 1208);
  *(_OWORD *)(v7 + 3) = v11;
  long long v12 = *(_OWORD *)(v6 + 1256);
  long long v13 = *(_OWORD *)(v6 + 1272);
  long long v14 = *(_OWORD *)(v6 + 1240);
  *(_OWORD *)(v7 + 7) = *(_OWORD *)(v6 + 1224);
  *(_OWORD *)(v7 + 9) = v14;
  *(_OWORD *)(v7 + 13) = v13;
  *(_OWORD *)(v7 + 11) = v12;
  *((_DWORD *)v7 + 10) = v9;
  v7[6] = v10;
  v7[4] = v8;
  uint64_t v15 = MEMORY[0x1E4F143A8];
  v7[8] = 0;
  v7[9] = 0;
  v22[0] = v15;
  v22[1] = 0x40000000;
  size_t v23 = __si_clone_index_metadata_to_inflight_block_invoke;
  uint64_t v24 = &unk_1E6341538;
  size_t v25 = &v26;
  if (v5 && *(_DWORD *)(v5 + 8))
  {
    uint64_t v16 = 0;
    while (v23((uint64_t)v22, *(void *)(*(void *)v5 + 8 * v16), 0))
    {
      if (++v16 >= (unint64_t)*(unsigned int *)(v5 + 8)) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    if (v3 && *(_DWORD *)(v3 + 8))
    {
      unint64_t v17 = 0;
      do
      {
        if (!v23((uint64_t)v22, *(void *)(*(void *)v3 + 8 * v17), 1)) {
          break;
        }
        ++v17;
      }
      while (v17 < *(unsigned int *)(v3 + 8));
    }
  }
  _CIMetaInfoSync((uint64_t)(v27 + 3), gTerminating == 0);
  CIMetaInfoClose((uint64_t)(v27 + 3));
  if (v6) {
    int v18 = (*(unsigned __int8 *)(v6 + 830) >> 2) & 1;
  }
  else {
    int v18 = 0;
  }
  bzero(v35, 0x1000uLL);
  serialize_to_state(v5, v3, v18, (uint64_t)v35);
  si_store_index_state(*(_DWORD *)(v6 + 32), "tmp.spotlight.state.transition", *(unsigned __int8 *)(v6 + 2064), 1, v35, v19, v20, v21);
  _Block_object_dispose(&v26, 8);
}

uint64_t __si_clone_index_metadata_to_inflight_block_invoke(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = *(unsigned __int8 *)(a2 + 15201);
  if (a3)
  {
    if (v3 != 1)
    {
      ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 68);
      if (v3 == 4) {
        ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 76);
      }
    }
  }
  else if (v3 != 1)
  {
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 64);
    if (v3 == 4) {
      ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 72);
    }
  }
  return 1;
}

void _SIScanQueuesDrained(uint64_t a1)
{
}

void delayed_op3(uint64_t a1, int a2)
{
  if (a2)
  {
    (*(void (**)(void))(a1 + 16))(*(void *)a1);
    free((void *)a1);
  }
  else
  {
    if (*(_DWORD *)(a1 + 24) == 4) {
      int v3 = delayed_op_final;
    }
    else {
      int v3 = delayed_op4;
    }
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 1056);
    si_enqueue_work_with_qos(v4, 5, (uint64_t)v3, a1);
  }
}

void delayed_op4(void *a1, int a2)
{
  if (!a2 && (uint64_t v3 = a1[1], (*(unsigned char *)(v3 + 6576) & 0x10) != 0))
  {
    uint64_t v4 = *(void *)(v3 + 1088);
    si_enqueue_work_with_qos(v4, 5, (uint64_t)delayed_op_final, (uint64_t)a1);
  }
  else
  {
    ((void (*)(void))a1[2])(*a1);
    free(a1);
  }
}

int *_fullyDrained(int *result, int a2)
{
  if (!a2)
  {
    uint64_t v2 = result;
    if (!*((unsigned char *)result + 2430))
    {
      *((unsigned char *)result + 2430) = 1;
      uint64_t v3 = *((void *)result + 172);
      LODWORD(v4) = *(_DWORD *)(v3 + 8);
      if (v4 >= 3)
      {
        uint64_t v5 = 0;
        do
        {
          ContentIndexSetEmergency(*(int **)(*(void *)v3 + 8 * v5), 0);
          unint64_t v6 = v5 + 3;
          ++v5;
          unint64_t v4 = *(unsigned int *)(v3 + 8);
        }
        while (v6 < v4);
      }
      uint64_t result = *(int **)(*(void *)v3 + 8 * (v4 - 1));
      if (result && *((unsigned char *)result + 44))
      {
        ContentIndexSetEmergency(result, 0);
        _SIIssueSplit((uint64_t)v2, 1);
        return SIInitialIndexingEnded(v2, 0);
      }
    }
  }
  return result;
}

void _SIIssueSplit(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v4 = *(void *)(a1 + 1376);
    if (!v4 || !*(_DWORD *)(v4 + 8)) {
      return;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 1384);
    if (!v5 || !*(_DWORD *)(v5 + 8) || !*(_DWORD *)(a1 + 1232)) {
      return;
    }
  }
  int v6 = *__error();
  long long v7 = _SILogForLogForCategory(4);
  os_log_type_t v8 = 2 * (dword_1E9FC90B4 < 4);
  if (os_log_type_enabled(v7, v8))
  {
    *(_WORD *)long long v12 = 0;
    _os_log_impl(&dword_1BD672000, v7, v8, "_SIIssueSplit called", v12, 2u);
  }
  *__error() = v6;
  int v9 = malloc_type_calloc(1uLL, 0x60uLL, 0x10B0040E0DE4348uLL);
  *(void *)int v9 = a1;
  if (a2) {
    LiveIndex = si_getLiveIndex(*(void *)(a1 + 1376));
  }
  else {
    LiveIndex = si_getSyncIndex(a1, 0);
  }
  *((void *)v9 + 1) = LiveIndex;
  int v11 = LiveIndex[14];
  *((_DWORD *)v9 + 4) = 2;
  *((_DWORD *)v9 + 5) = v11;
  si_scheduler_async_suspend_and_enqueue(*(void *)(a1 + 872), *(void *)(a1 + 1040), (uint64_t)_swapIndex, (uint64_t)v9, (unsigned int **)v9 + 11);
}

int *SIInitialIndexingEnded(int *result, int a2)
{
  uint64_t v3 = (uint64_t)result;
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a2 == -1 && *((void *)result + 859) && *((unsigned char *)result + 6885))
  {
    return (int *)SISyncIndex((uint64_t)result);
  }
  else if ((result[207] & 4) == 0)
  {
    bzero(v17, 0x400uLL);
    __n128 v5 = (__n128)si_sync_ctx_create_with_defer_fd(v3, 0);
    uint64_t v6 = v4;
    *(_DWORD *)(v4 + 80) = a2;
    if (!*(void *)(v4 + 128) && !*(_DWORD *)(v4 + 104))
    {
      uint64_t v13 = *(void *)(v3 + 2352);
      if (v13)
      {
        long long v14 = *(uint64_t (**)(void, const char *, uint64_t, const char *, __n128))(v13 + 64);
        if (v14) {
          *(_DWORD *)(v4 + 104) = v14(*(void *)(v13 + 144), "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 20554, "void SIInitialIndexingEnded(SIRef, int32_t)", v5);
        }
      }
    }
    si_enqueue_work_with_qos(*(void *)(v3 + 1096), 9, (uint64_t)si_initialIndexingEndedQueueOnHold, v6);
    int v7 = *__error();
    os_log_type_t v8 = _SILogForLogForCategory(0);
    os_log_type_t v9 = 2 * (gSILogLevels[0] < 4);
    if (os_log_type_enabled(v8, v9))
    {
      int v10 = fcntl(*(_DWORD *)(v3 + 48), 50, v17);
      if (v17[0]) {
        BOOL v11 = v10 < 0;
      }
      else {
        BOOL v11 = 1;
      }
      if (v11) {
        long long v12 = 0;
      }
      else {
        long long v12 = v17;
      }
      *(_DWORD *)std::__split_buffer<std::string> buf = 136315138;
      uint64_t v16 = v12;
      _os_log_impl(&dword_1BD672000, v8, v9, "Finished initial indexing of %s", buf, 0xCu);
    }
    uint64_t result = __error();
    unint64_t *result = v7;
  }
  return result;
}

void si_initialIndexingEndedQueueOnHold(atomic_uint *a1, int a2)
{
  uint64_t v3 = a1;
  if (!a2)
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *(void *)(*(void *)a1 + 1152);
    if (v5)
    {
      if (!*(unsigned char *)(v4 + 2064) && !*(unsigned char *)(v4 + 2429))
      {
        attachJournal(v3);
        uint64_t v5 = *(void *)(v4 + 1152);
      }
      si_enqueue_barrier_with_qos(v5, 9, (uint64_t)si_initialIndexingEndedQueueOnSet, (uint64_t)v3);
      uint64_t v3 = 0;
    }
  }
  si_sync_ctx_free((uint64_t)v3, a2 != 0);
}

void si_initialIndexingEndedQueueOnSet(uint64_t a1, int a2)
{
  uint64_t v3 = a1;
  if (!a2)
  {
    si_enqueue_barrier_with_qos(*(void *)(*(void *)a1 + 1048), 9, (uint64_t)si_initialIndexingEndedQueueOnFlush, a1);
    uint64_t v3 = 0;
  }
  si_sync_ctx_free(v3, a2 != 0);
}

void si_initialIndexingEndedQueueOnFlush(uint64_t a1, int a2)
{
  uint64_t v3 = a1;
  if (a2) {
    goto LABEL_55;
  }
  uint64_t v4 = *(void *)a1;
  int v5 = *(_DWORD *)(a1 + 80);
  unsigned int v51 = 0;
  if (!fd_setDir(*(unsigned int *)(v4 + 32), (int *)&v51)) {
    goto LABEL_55;
  }
  uint64_t v6 = v4 + 1384;
  *(unsigned char *)(v4 + 2428) = 0;
  uint64_t v7 = *(void *)(v4 + 1384);
  int v8 = *(_DWORD *)(v7 + 8);
  if (v8)
  {
    uint64_t v9 = *(void *)(*(void *)v7 + 8 * (v8 - 1));
    char v10 = atomic_load((unsigned int *)(v9 + 36));
    if ((v10 & 3) == 0 && !*(unsigned char *)(v9 + 15203))
    {
      *(_DWORD *)(*(void *)v6 + 16) = -1;
      while (1)
      {
        BOOL v11 = *(long long **)(v4 + 1384);
        long long v12 = ContentIndexListClone(v11);
        *((_DWORD *)v12 + 4) = -1;
        if (si_swapIndexSet((int *)v4, (uint64_t)v11, (unint64_t)v12, (atomic_ullong *)(v4 + 1384), v13, v14, v15, v16))break; {
        ContentIndexListFree((void **)v12);
        }
      }
      _CIDisableUpdates(*(void *)(*v12 + 8 * (*((_DWORD *)v12 + 2) - 1)));
    }
  }
  if (v5 != 1)
  {
    uint64_t v17 = *(void *)(v4 + 1376);
    LODWORD(v18) = *(_DWORD *)(v17 + 16);
    if ((v18 & 0x80000000) != 0) {
      goto LABEL_39;
    }
    uint64_t v19 = 0;
    int v20 = 0;
    while (1)
    {
      while (1)
      {
        if (v19 >= *(_DWORD *)(v17 + 8) - 1) {
          goto LABEL_40;
        }
        uint64_t v21 = *(void *)(*(void *)v17 + 8 * v19);
        if (*(unsigned char *)(v21 + 44) || v5 && v5 < *(_DWORD *)(v21 + 40)) {
          goto LABEL_40;
        }
        ++v20;
        if (v19 == v18) {
          break;
        }
LABEL_25:
        char v28 = atomic_load((unsigned int *)(v21 + 36));
        if ((v28 & 3) == 0 && !*(unsigned char *)(v21 + 15203))
        {
          _CIDisableUpdates(*(void *)(*(void *)v17 + 8 * v19));
          si_perform_livequeries_bulk_updates(v4);
          uint64_t v29 = *(void *)(*(void *)v17 + 8 * *(int *)(v17 + 16));
          char v30 = atomic_load((unsigned int *)(v29 + 36));
          if ((v30 & 3) != 0 || *(unsigned char *)(v29 + 15203))
          {
            long long v46 = __si_assert_copy_extra_625(-1);
            long long v47 = v46;
            long long v48 = "";
            if (v46) {
              long long v48 = v46;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 9199, "ContentIndexWritable(indexSet->index[indexSet->currentIndex])", v48);
            free(v47);
            if (__valid_fs(-1)) {
              uint64_t v49 = 2989;
            }
            else {
              uint64_t v49 = 3072;
            }
            *(_DWORD *)uint64_t v49 = -559038737;
            abort();
          }
          long long v31 = malloc_type_calloc(1uLL, 0x90uLL, 0x10B00402663C8FFuLL);
          uint64_t v32 = (uint64_t)v31;
          *long long v31 = *(_OWORD *)v3;
          long long v33 = *(_OWORD *)(v3 + 64);
          long long v35 = *(_OWORD *)(v3 + 16);
          long long v34 = *(_OWORD *)(v3 + 32);
          v31[3] = *(_OWORD *)(v3 + 48);
          v31[4] = v33;
          v31[1] = v35;
          _OWORD v31[2] = v34;
          long long v36 = *(_OWORD *)(v3 + 128);
          long long v38 = *(_OWORD *)(v3 + 80);
          long long v37 = *(_OWORD *)(v3 + 96);
          v31[7] = *(_OWORD *)(v3 + 112);
          v31[8] = v36;
          _OWORD v31[5] = v38;
          v31[6] = v37;
          *(_DWORD *)(v3 + 104) = 0;
          *(void *)(v3 + 120) = 0;
          *(void *)(v3 + 128) = 0;
          *(void *)(v3 + 112) = 0;
          *((void *)v31 + 1) = *(void *)(*(void *)v17 + 8 * v19);
          *(void *)(v3 + 64) = 0;
          if (!*((void *)v31 + 16) && !*((_DWORD *)v31 + 26))
          {
            uint64_t v39 = *(void *)(v4 + 2352);
            if (v39)
            {
              long long v40 = *(uint64_t (**)(void, const char *, uint64_t, const char *))(v39 + 64);
              if (v40) {
                *((_DWORD *)v31 + 26) = v40(*(void *)(v39 + 144), "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 9205, "void si_initialIndexingEndedQueueOnFlush(si_sync_ctx *, Boolean)");
              }
            }
          }
          si_indexDeleteDeferredItems(*(void *)v3);
          si_enqueue_work_with_qos(*(void *)(v4 + 1040), 9, (uint64_t)si_scanEnded, v32);
        }
        uint64_t v18 = *(int *)(v17 + 16);
        BOOL v44 = v19++ < v18;
        if (!v44) {
          goto LABEL_40;
        }
      }
      uint64_t v22 = ContentIndexListClone((long long *)v17);
      size_t v23 = v22;
      do
      {
        uint64_t v24 = *((int *)v22 + 4) + 1;
        *((_DWORD *)v22 + 4) = v24;
        if ((int)v24 >= *((_DWORD *)v22 + 2)) {
          break;
        }
        uint64_t v25 = *(void *)(*v22 + 8 * v24);
        char v26 = atomic_load((unsigned int *)(v25 + 36));
      }
      while ((v26 & 3) != 0 || *(unsigned char *)(v25 + 15203));
      uint64_t v27 = v17;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(v4 + 1376), (unint64_t *)&v27, (unint64_t)v22);
      if (v27 == v17)
      {
        si_cleanup(v4, v17);
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 1392), 1u, memory_order_relaxed);
        _si_log_indexes((int *)v4);
        uint64_t v21 = *(void *)(*v23 + 8 * v19);
        uint64_t v17 = (uint64_t)v23;
        goto LABEL_25;
      }
      free((void *)*v22);
      free(v23);
      uint64_t v19 = 0;
      uint64_t v17 = *(void *)(v4 + 1376);
      LODWORD(v18) = *(_DWORD *)(v17 + 16);
      if ((v18 & 0x80000000) != 0) {
        goto LABEL_40;
      }
    }
  }
  si_perform_livequeries_bulk_updates(v4);
LABEL_39:
  int v20 = 0;
LABEL_40:
  int v41 = *__error();
  long long v42 = _SILogForLogForCategory(4);
  os_log_type_t v43 = 2 * (dword_1E9FC90B4 < 4);
  if (os_log_type_enabled(v42, v43))
  {
    *(_WORD *)std::__split_buffer<std::string> buf = 0;
    _os_log_impl(&dword_1BD672000, v42, v43, "Advanced transaction id", buf, 2u);
  }
  *__error() = v41;
  if (v5 == 1)
  {
    if (*(_DWORD *)(*(void *)v6 + 8)) {
      BOOL v44 = 0;
    }
    else {
      BOOL v44 = v20 <= 2;
    }
    if (v44) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  if (v20 >= 3)
  {
LABEL_50:
    si_enqueue_work_with_qos(*(void *)(v4 + 1040), 9, (uint64_t)si_initialIndexingEnded, v3);
    uint64_t v3 = 0;
  }
LABEL_51:
  if (!*(_DWORD *)(*(void *)(v4 + 1376) + 8)) {
    SISetScanCount(v4, (const char *)1, 1);
  }
  int v45 = v51;
  MEMORY[0x1C1882290](v51);
  if ((v45 & 0x80000000) == 0) {
    close(v45);
  }
LABEL_55:
  si_sync_ctx_free(v3, a2 != 0);
}

int *_si_log_indexes(int *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *((void *)result + 172);
    if (v2) {
      ContentIndexListDump(v2);
    }
    uint64_t result = (int *)*((void *)v1 + 173);
    if (result)
    {
      return ContentIndexListDump((uint64_t)result);
    }
  }
  return result;
}

uint64_t SISetScanCount(uint64_t a1, const char *a2, int a3)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  makeThreadId();
  if (!a1 || !*(void *)(a1 + 1048)) {
    return 0;
  }
  uint64_t v6 = (os_unfair_lock_s *)(a1 + 6572);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 6572));
  unsigned int v100 = 0;
  int v7 = fd_setDir(*(unsigned int *)(a1 + 32), (int *)&v100);
  uint64_t v8 = 0;
  if (v7)
  {
    int v9 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
    unint64_t v10 = setThreadIdAndInfo(*(_DWORD *)(a1 + 32), sFdExceptionCallbacks, 0, 1, v9);
    unsigned int v98 = HIDWORD(v10);
    unsigned int v99 = v10;
    unsigned int v96 = v12;
    unsigned int v97 = v11;
    uint64_t v13 = *(void *)&threadData[18 * v10 + 2];
    uint64_t v14 = v13 + 320 * HIDWORD(v10);
    *(unsigned char *)(v14 + 216) = 0;
    int v15 = *(_DWORD *)(v14 + 312);
    int v16 = *(void (**)(void))(v14 + 224);
    if (v16) {
      v16(*(void *)(v13 + 320 * HIDWORD(v10) + 288));
    }
    if (_setjmp((int *)v14))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::__split_buffer<std::string> buf = 0;
        _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
      }
      *(_DWORD *)(v14 + 312) = v15;
      CIOnThreadCleanUpReset(v96);
      dropThreadId(v99, 1, v9);
      CICleanUpReset(v99, v97);
      uint64_t v17 = 0;
LABEL_34:
      int v39 = v100;
      MEMORY[0x1C1882290](v100);
      if ((v39 & 0x80000000) == 0) {
        close(v39);
      }
      uint64_t v8 = v17;
      goto LABEL_37;
    }
    uint64_t v19 = *(void *)(a1 + 1384);
    if (!v19 || !*(void *)v19 || (uint64_t v20 = *(void *)(a1 + 1376)) == 0 || (v21 = *(void *)v20) == 0)
    {
      int v32 = *__error();
      long long v33 = _SILogForLogForCategory(0);
      os_log_type_t v34 = gSILogLevels[0] < 3;
      if (os_log_type_enabled(v33, (os_log_type_t)(gSILogLevels[0] < 3)))
      {
        *(_DWORD *)std::__split_buffer<std::string> buf = 136315138;
        unint64_t v102 = "int32_t SISetScanCount(SIRef, CFIndex, _Bool)";
        _os_log_impl(&dword_1BD672000, v33, v34, "*warn* %s called on fs-only index", buf, 0xCu);
      }
      *__error() = v32;
      uint64_t v35 = 0;
LABEL_31:
      uint64_t v36 = *(void *)&threadData[18 * v99 + 2];
      uint64_t v37 = v36 + 320 * v98;
      *(_DWORD *)(v37 + 312) = v15;
      long long v38 = *(void (**)(void))(v37 + 232);
      if (v38) {
        v38(*(void *)(v36 + 320 * v98 + 288));
      }
      dropThreadId(v99, 0, v9);
      uint64_t v17 = v35;
      goto LABEL_34;
    }
    int v95 = v9;
    int v22 = *(_DWORD *)(v20 + 8);
    if (v22)
    {
      unsigned int v23 = v22 - 1;
      do
      {
        if (*(void *)(v21 + 8 * v23)) {
          break;
        }
        *(_DWORD *)(v20 + 8) = v23--;
      }
      while (v23 != -1);
    }
    int v24 = *__error();
    uint64_t v25 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      char v26 = "no";
      if (a3) {
        char v26 = "yes";
      }
      *(_DWORD *)std::__split_buffer<std::string> buf = 134218242;
      unint64_t v102 = a2;
      __int16 v103 = 2080;
      unint64_t v104 = v26;
      _os_log_impl(&dword_1BD672000, v25, OS_LOG_TYPE_DEFAULT, "SISetScanCount:%ld full:%s", buf, 0x16u);
    }
    int v27 = a3;
    char v28 = a3;
    *__error() = v24;
    uint64_t v29 = *(unsigned int *)(v20 + 8);
    int v9 = v95;
    if (v29)
    {
      if (*(_DWORD *)(*(void *)(*(void *)v20 + 8 * (v29 - 1)) + 68) <= 1u)
      {
        int v30 = *(_DWORD *)(v19 + 8);
        if (!v30)
        {
          checkIndexSets(a1);
          int v61 = 1;
          goto LABEL_71;
        }
        if (v29 < 2) {
          long long v31 = (uint64_t *)(*(void *)v19 + 8 * (v30 - 1));
        }
        else {
          long long v31 = (uint64_t *)(*(void *)v20 + 8 * v29 - 16);
        }
        uint64_t v62 = *v31;
        if (a2)
        {
          uint64_t v63 = v29 - 1;
          if (*(_DWORD *)(v20 + 8) <= 1u) {
            uint64_t v64 = 0;
          }
          else {
            uint64_t v64 = v63;
          }
          LODWORD(v65) = *(_DWORD *)(v62 + 68);
          if (v65 >= 2) {
            uint64_t v65 = v65;
          }
          else {
            uint64_t v65 = 0;
          }
          rebaseIndexes(v20, v64, (uint64_t)&a2[*(void *)(v62 + 80) + 1025 + v65]);
        }
        int v55 = *(_DWORD *)(v62 + 40);
        int v54 = 1;
LABEL_67:
        int v66 = v55;
        int v67 = v54;
        checkIndexSets(a1);
        int v60 = v66;
        int v59 = v67;
        int v61 = v67;
        if (v66)
        {
LABEL_68:
          int v61 = v59;
          int v68 = *(_DWORD *)(a1 + 6868);
          if (v68 >= v60) {
            int v68 = v60;
          }
          int v69 = v60;
          goto LABEL_72;
        }
LABEL_71:
        int v69 = 0;
        int v68 = *(_DWORD *)(a1 + 6868);
LABEL_72:
        int v93 = v61;
        unsigned int v94 = v69;
        *(_DWORD *)(a1 + 6868) = v68;
        if (v68 >= 3)
        {
          int v70 = *__error();
          unint64_t v71 = _SILogForLogForCategory(0);
          os_log_type_t v72 = 2 * (gSILogLevels[0] < 4);
          if (os_log_type_enabled(v71, v72))
          {
            int v73 = *(_DWORD *)(a1 + 6868);
            *(_DWORD *)std::__split_buffer<std::string> buf = 67109120;
            LODWORD(v102) = v73;
            _os_log_impl(&dword_1BD672000, v71, v72, "Starting cleanup for transactions below %d", buf, 8u);
          }
          *__error() = v70;
          SIInitialIndexingEnded(a1, (*(_DWORD *)(a1 + 6868) - 1));
        }
        if (current_index_not_writable(*(void *)(a1 + 1376)))
        {
          while (1)
          {
            unsigned int v74 = ContentIndexListClone((long long *)v20);
            int v75 = *((_DWORD *)v74 + 4);
            if (v75 == -1) {
              break;
            }
            unint64_t v76 = (void **)v74;
            if (v75 < *((_DWORD *)v74 + 2))
            {
              do
              {
                uint64_t v77 = *(void *)(*v74 + 8 * v75);
                char v78 = atomic_load((unsigned int *)(v77 + 36));
                if ((v78 & 3) == 0 && !*(unsigned char *)(v77 + 15203)) {
                  break;
                }
                int v79 = *((_DWORD *)v74 + 4) + 1;
                *((_DWORD *)v74 + 4) = v79;
                int v75 = v79;
              }
              while (v79 < *((_DWORD *)v74 + 2));
            }
            long long v80 = si_scheduler_suspend(*(void *)(a1 + 944));
            if (si_swapIndexSet((int *)a1, v20, (unint64_t)v76, (atomic_ullong *)(a1 + 1376), v81, v82, v83, v84))
            {
              si_scheduler_resume(*(void *)(a1 + 944), v80, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 21235);
              int v9 = v95;
              break;
            }
            free(*v76);
            free(v76);
            si_scheduler_resume(*(void *)(a1 + 944), v80, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 21231);
            int v9 = v95;
          }
        }
        if (v93)
        {
          uint64_t v85 = *(void *)(a1 + 872);
          if (v85) {
            int v86 = *(void **)(v85 + 160);
          }
          else {
            int v86 = 0;
          }
          si_scheduler_resume(v85, v86, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 21244);
        }
        uint64_t v35 = v94;
        goto LABEL_31;
      }
      if (!a3)
      {
        int v41 = ContentIndexListClone((long long *)v20);
        int v42 = count_IndexSetForWriting((uint64_t)v41, *((_DWORD *)v41 + 2) - 1);
        int v43 = *__error();
        BOOL v44 = _SILogForLogForCategory(11);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::__split_buffer<std::string> buf = 67109120;
          LODWORD(v102) = v42;
          _os_log_impl(&dword_1BD672000, v44, OS_LOG_TYPE_DEFAULT, "SISetScanCount: Counted %d live indexes", buf, 8u);
        }
        *__error() = v43;
        int v45 = (void *)*v41;
        uint64_t v46 = (*((_DWORD *)v41 + 2) - 1);
        if ((!a2 || v42 > 14 || (uint64_t v47 = v45[v46]) != 0 && *(unsigned char *)(v47 + 44))
          && (uint64_t v48 = v45[v46]) != 0
          && (char v49 = atomic_load((unsigned int *)(v48 + 36)), (v49 & 3) == 0)
          && !*(unsigned char *)(v48 + 15203))
        {
          unsigned int v87 = *((_DWORD *)v41 + 2) - 1;
          int v9 = v95;
          if (*((_DWORD *)v41 + 4) == -1) {
            *((_DWORD *)v41 + 4) = v87;
          }
          int v88 = *(int **)(*v41 + 8 * v87);
          int v51 = v88[10];
          if (a2) {
            ContentIndexSetEmergency(v88, 1);
          }
          int v52 = 1;
        }
        else
        {
          long long v50 = malloc_type_calloc(1uLL, 0x18uLL, 0x10200408F8695FCuLL);
          v50[20] = v28;
          *((_DWORD *)v50 + 4) = 0;
          *(void *)long long v50 = a1;
          *((void *)v50 + 1) = a2;
          int v51 = *(_DWORD *)(*(void *)(*v41 + 8 * (*((_DWORD *)v41 + 2) - 1)) + 40);
          si_enqueue_work_with_qos(*(void *)(a1 + 1056), 17, (uint64_t)si_set_scan_count, (uint64_t)v50);
          int v52 = 0;
          int v9 = v95;
        }
        int v53 = v52;
        free((void *)*v41);
        free(v41);
        int v54 = v53;
        int v55 = v51;
        goto LABEL_67;
      }
    }
    int v56 = *__error();
    long long v57 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::__split_buffer<std::string> buf = 134217984;
      unint64_t v102 = a2;
      _os_log_impl(&dword_1BD672000, v57, OS_LOG_TYPE_DEFAULT, "full scan:%ld", buf, 0xCu);
    }
    *__error() = v56;
    if (v27 && *(_DWORD *)(v20 + 8) && *(void *)(**(void **)v20 + 80) < (uint64_t)a2)
    {
      long long v89 = __si_assert_copy_extra_625(-1);
      long long v90 = v89;
      uint64_t v91 = "";
      if (v89) {
        uint64_t v91 = v89;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 21170, "oldLiveSet->indexCount==0 || (CFIndex)ContentIndexBaseDocId(oldLiveSet->index[0]) >= count", v91);
      free(v90);
      if (__valid_fs(-1)) {
        uint64_t v92 = 2989;
      }
      else {
        uint64_t v92 = 3072;
      }
      *(_DWORD *)uint64_t v92 = -559038737;
      abort();
    }
    long long v58 = malloc_type_calloc(1uLL, 0x18uLL, 0x10200408F8695FCuLL);
    v58[20] = v28;
    *((_DWORD *)v58 + 4) = 1;
    *(void *)long long v58 = a1;
    *((void *)v58 + 1) = a2;
    si_enqueue_work_with_qos(*(void *)(a1 + 1056), 17, (uint64_t)si_set_scan_count, (uint64_t)v58);
    checkIndexSets(a1);
    int v59 = 0;
    int v60 = 1;
    goto LABEL_68;
  }
LABEL_37:
  uint64_t v40 = v8;
  os_unfair_lock_unlock(v6);
  return v40;
}

void checkIndexSets(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 1384);
  do
  {
    do
    {
      uint64_t v3 = v2;
      uint64_t v4 = *(uint64_t **)(a1 + 1376);
      __dmb(0xBu);
      uint64_t v2 = *(uint64_t **)(a1 + 1384);
    }
    while (v3 != v2);
  }
  while (v4 != *(uint64_t **)(a1 + 1376));
  __checkIndexSetDocIdOrder(a1, v4);
  __checkIndexSetDocIdOrder(a1, v3);
}

void rebaseIndexes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned int *)(a1 + 8) > a2)
  {
    uint64_t v4 = a2;
    do
    {
      _CIRebaseDocId(*(void *)(*(void *)a1 + 8 * v4), *(void *)(*(void *)(*(void *)a1 + 8 * v4) + 80) + a3, 21104);
      ++v4;
    }
    while (v4 < *(unsigned int *)(a1 + 8));
  }
}

BOOL current_index_not_writable(BOOL result)
{
  if (result)
  {
    uint64_t v1 = *(int *)(result + 16);
    if (v1 == -1)
    {
      return 0;
    }
    else
    {
      uint64_t v2 = *(void *)(*(void *)result + 8 * v1);
      char v3 = atomic_load((unsigned int *)(v2 + 36));
      return (v3 & 3) != 0 || *(unsigned __int8 *)(v2 + 15203) != 0;
    }
  }
  return result;
}

uint64_t si_swapIndexSet(int *a1, uint64_t a2, unint64_t a3, atomic_ullong *a4, uint64_t a5, int a6, int a7, int a8)
{
  uint64_t v8 = a2;
  atomic_compare_exchange_strong(a4, (unint64_t *)&v8, a3);
  if (v8 != a2) {
    return 0;
  }
  uint64_t v11 = 1;
  si_write_index_state((uint64_t)a1, 1, 0, (uint64_t)a4, a5, a6, a7, a8);
  si_cleanup((uint64_t)a1, a2);
  atomic_fetch_add_explicit(a1 + 348, 1u, memory_order_relaxed);
  _si_log_indexes(a1);
  return v11;
}

void si_set_scan_count(uint64_t *a1, int a2)
{
  uint64_t v191 = *MEMORY[0x1E4F143B8];
  if (a2) {
    goto LABEL_2;
  }
  uint64_t v3 = *a1;
  if (!*(void *)(*a1 + 1048)) {
    goto LABEL_2;
  }
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  int v6 = *((unsigned __int8 *)a1 + 20);
  unsigned int v165 = 0;
  if (!fd_setDir(*(unsigned int *)(v3 + 32), (int *)&v165)) {
    goto LABEL_2;
  }
  int v7 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unsigned int v164 = 0;
  unint64_t v163 = 0;
  unsigned int v162 = 0;
  unint64_t v8 = setThreadIdAndInfo(*(_DWORD *)(v3 + 32), sFdExceptionCallbacks, 0, 1, v7);
  unsigned int v164 = v8;
  unint64_t v163 = __PAIR64__(HIDWORD(v8), v9);
  unsigned int v162 = v10;
  uint64_t v11 = *(void *)&threadData[18 * v8 + 2];
  uint64_t v12 = v11 + 320 * HIDWORD(v8);
  *(unsigned char *)(v12 + 216) = 0;
  int v13 = *(_DWORD *)(v12 + 312);
  uint64_t v14 = *(void (**)(void))(v12 + 224);
  if (v14) {
    v14(*(void *)(v11 + 320 * HIDWORD(v8) + 288));
  }
  int v151 = v7;
  unsigned int v161 = v164;
  unsigned int v160 = HIDWORD(v163);
  unint64_t v159 = __PAIR64__(v163, v162);
  if (_setjmp((int *)v12))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", (uint8_t *)&buf, 2u);
    }
    *(_DWORD *)(v12 + 312) = v13;
    CIOnThreadCleanUpReset(v159);
    dropThreadId(v161, 1, v7);
    CICleanUpReset(v161, HIDWORD(v159));
    goto LABEL_107;
  }
  int v147 = v6;
  uint64_t v148 = v5;
  int v150 = v13;
  int v15 = *(void **)(v3 + 1384);
  if (!v15)
  {
LABEL_100:
    int v96 = *__error();
    unsigned int v97 = _SILogForLogForCategory(0);
    os_log_type_t v98 = gSILogLevels[0] < 3;
    if (os_log_type_enabled(v97, (os_log_type_t)(gSILogLevels[0] < 3)))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = "void si_set_scan_count(void *, Boolean)";
      _os_log_impl(&dword_1BD672000, v97, v98, "*warn* %s called on fs-only index", (uint8_t *)&buf, 0xCu);
    }
    *__error() = v96;
    int v99 = v150;
LABEL_103:
    int v100 = v151;
    goto LABEL_104;
  }
  int v16 = (uint64_t *)(v3 + 1376);
  unint64_t v146 = (unsigned char *)(v3 + 6936);
  long long v149 = (atomic_ullong *)(v3 + 1376);
  while (1)
  {
    uint64_t v17 = *v16;
    if (*v15) {
      BOOL v18 = v17 == 0;
    }
    else {
      BOOL v18 = 1;
    }
    if (v18) {
      goto LABEL_100;
    }
    uint64_t v19 = *(void *)v17;
    if (!*(void *)v17) {
      goto LABEL_100;
    }
    int v20 = *(_DWORD *)(v17 + 8);
    if (!v20) {
      goto LABEL_25;
    }
    int v21 = v20 - 1;
    uint64_t v22 = 8 * (v20 - 1);
    int v23 = v21;
    while (!*(void *)(v19 + v22))
    {
      *(_DWORD *)(v17 + 8) = v23--;
      v22 -= 8;
      if (v23 == -1) {
        goto LABEL_25;
      }
    }
    if (v147) {
      break;
    }
    int v41 = ContentIndexListClone((long long *)v17);
    int v42 = count_IndexSetForWriting((uint64_t)v41, *((_DWORD *)v41 + 2) - 1);
    int v43 = *__error();
    BOOL v44 = _SILogForLogForCategory(11);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 67109120;
      DWORD1(buf) = v42;
      _os_log_impl(&dword_1BD672000, v44, OS_LOG_TYPE_DEFAULT, "si_set_scancount: Counted %d live indexes", (uint8_t *)&buf, 8u);
    }
    *__error() = v43;
    char v49 = (void *)*v41;
    int v50 = *((_DWORD *)v41 + 2);
    uint64_t v51 = (v50 - 1);
    if (v148)
    {
      if (v42 <= 14)
      {
        uint64_t v52 = v49[v51];
        if (!v52 || !*(unsigned char *)(v52 + 44)) {
          goto LABEL_51;
        }
      }
    }
    uint64_t v53 = v49[v51];
    if (!v53) {
      goto LABEL_51;
    }
    char v54 = atomic_load((unsigned int *)(v53 + 36));
    if ((v54 & 3) != 0)
    {
      int v50 = *((_DWORD *)v41 + 2);
LABEL_51:
      if (v50 == *((_DWORD *)v41 + 3))
      {
        *((_DWORD *)v41 + 3) = 2 * v50;
        int v55 = (char *)malloc_type_realloc((void *)*v41, 8 * (2 * v50), 0x2004093837F09uLL);
        *int v41 = v55;
        bzero(&v55[8 * *((unsigned int *)v41 + 2)], 8 * *((unsigned int *)v41 + 3) - 8 * *((unsigned int *)v41 + 2));
      }
      long long v184 = 0u;
      memset(v185, 0, sizeof(v185));
      long long v182 = 0u;
      long long v183 = 0u;
      long long v180 = 0u;
      long long v181 = 0u;
      long long v178 = 0u;
      long long v179 = 0u;
      long long v176 = 0u;
      long long v177 = 0u;
      long long v174 = 0u;
      long long v175 = 0u;
      long long v173 = 0u;
      memset(__str, 0, sizeof(__str));
      snprintf(__str, 0xFFuLL, "live.%d.", *(_DWORD *)(v17 + 8));
      int v145 = *(_DWORD *)(*(void *)(*v41 + 8 * (*((_DWORD *)v41 + 2) - 1)) + 40);
      int v56 = ((*(_DWORD *)(v4 + 828) & 1) << 6) ^ 0x50;
      if (*(unsigned char *)(v4 + 2064)) {
        v56 |= 0x100u;
      }
      if (*(unsigned char *)(v4 + 2065)) {
        v56 |= 0x400u;
      }
      unsigned int v57 = *(_DWORD *)(v4 + 6576);
      int v58 = v56 | (v57 >> 7) & 0x800;
      if (*v146) {
        int v59 = v58 | 0x1000;
      }
      else {
        int v59 = v58;
      }
      v155[0] = MEMORY[0x1E4F143A8];
      v155[1] = 0x40000000;
      v155[2] = __si_set_scan_count_block_invoke_1740;
      v155[3] = &__block_descriptor_tmp_1741;
      v155[4] = v4;
      uint64_t v60 = *(unsigned int *)(v4 + 32);
      uint64_t v61 = *(void *)(*v41 + 8 * (*((_DWORD *)v41 + 2) - 1));
      unsigned int v62 = *(_DWORD *)(v61 + 68);
      uint64_t v63 = *(void *)(v61 + 80);
      if (v62 >= 2) {
        uint64_t v64 = v62;
      }
      else {
        uint64_t v64 = 0;
      }
      int v65 = *(_DWORD *)(v4 + 1276);
      int v66 = *(int **)(v4 + 1184);
      if (v66)
      {
        uint64_t v143 = v3;
        uint64_t v67 = *(void *)(v61 + 80);
        uint64_t vector_store = db_get_vector_store(v66);
        uint64_t v63 = v67;
        uint64_t v3 = v143;
        uint64_t v69 = vector_store;
      }
      else
      {
        uint64_t v69 = 0;
      }
      v154[0] = MEMORY[0x1E4F143A8];
      v154[1] = 0x40000000;
      v154[2] = __si_set_scan_count_block_invoke_2_1742;
      v154[3] = &__block_descriptor_tmp_1743;
      v154[4] = v4;
      uint64_t New = ContentIndexCreateNew(v60, @"tmp.", v148 + 1025 + v63 + v64, v145 + 1, v59 | ~(v57 >> 1) & 0x8000, 1, v65, v69, (uint64_t)v154, v155, *(_DWORD *)(v4 + 60));
      uint64_t v71 = *((unsigned int *)v41 + 2);
      *(void *)(*v41 + 8 * v71) = New;
      uint64_t v144 = New;
      if (New)
      {
        uint64_t v72 = *(void *)(*v41 + 8 * v71);
        v153[0] = MEMORY[0x1E4F143A8];
        v153[1] = 0x40000000;
        v153[2] = __si_set_scan_count_block_invoke_3_1744;
        v153[3] = &__block_descriptor_tmp_1745;
        v153[4] = v4;
        v153[5] = v72;
        ContentIndexSetDirtyCallback(v72, v153);
        v152[0] = MEMORY[0x1E4F143A8];
        v152[1] = 0x40000000;
        v152[2] = __si_set_scan_count_block_invoke_4;
        v152[3] = &__block_descriptor_tmp_1746;
        v152[4] = v4;
        v152[5] = v72;
        ContentIndexSetDirtyCallback(v72, v152);
        *(unsigned char *)(v72 + 15201) = 4;
        uint64_t v190 = 0;
        long long v188 = 0u;
        long long v189 = 0u;
        long long buf = 0u;
        long long v187 = 0u;
        *(_DWORD *)uint64_t v166 = 0;
        ContentIndexSyncIndex(v72, (uint64_t)&buf, (uint64_t)v166);
        bzero((char *)&buf + 8, 0x208uLL);
        *(void *)&long long buf = 0x6D6F76650A00;
        DWORD2(buf) = 2;
        BYTE12(buf) = 1;
        LODWORD(v187) = *(_DWORD *)(v17 + 8);
        HIDWORD(v187) = 1;
        si_clone_index_metadata_to_inflight(v4);
        __strlcpy_chk();
        int v73 = si_openat_protected(*(unsigned int *)(v4 + 32), "tmp.movePlan", 1538, 3);
        pwrite(v73, &buf, 0x210uLL, 0);
        fcntl(v73, 85);
        ContentIndexChangePrefix(v72);
        unlinkat(*(_DWORD *)(v4 + 32), "tmp.movePlan", 2048);
        unlinkat(*(_DWORD *)(v4 + 32), "tmp.spotlight.state.transition", 2048);
        close(v73);
        *(unsigned char *)(v72 + 15201) = 4;
        unsigned int v74 = *((_DWORD *)v41 + 2) + 1;
        *((_DWORD *)v41 + 2) = v74;
        int v75 = 1;
      }
      else
      {
        bzero(&buf, 0x400uLL);
        int v76 = *__error();
        uint64_t v77 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
        {
          int v93 = fcntl(*(_DWORD *)(v4 + 32), 50, &buf);
          p_long long buf = 0;
          *(_DWORD *)uint64_t v166 = 136315650;
          if ((_BYTE)buf) {
            BOOL v95 = v93 < 0;
          }
          else {
            BOOL v95 = 1;
          }
          long long v167 = "si_set_scan_count";
          if (!v95) {
            p_long long buf = &buf;
          }
          __int16 v168 = 1024;
          int v169 = 21032;
          __int16 v170 = 2080;
          uint64_t v171 = p_buf;
          _os_log_error_impl(&dword_1BD672000, v77, OS_LOG_TYPE_ERROR, "%s:%d: Couldn't create live store at %s.", v166, 0x1Cu);
        }
        *__error() = v76;
        unsigned int v74 = *((_DWORD *)v41 + 2);
        int v75 = -1;
      }
      unsigned int v78 = *((_DWORD *)v41 + 4);
      if (v78 == -1)
      {
        *((_DWORD *)v41 + 4) = v74 - 1;
        unsigned int v78 = v74 - 1;
      }
      if (v78 < v74)
      {
        signed int v79 = v78;
        do
        {
          uint64_t v80 = *(void *)(*v41 + 8 * v79);
          char v81 = atomic_load((unsigned int *)(v80 + 36));
          if ((v81 & 3) != 0)
          {
            unsigned int v82 = *((_DWORD *)v41 + 4);
            unsigned int v83 = *((_DWORD *)v41 + 2);
          }
          else
          {
            int v84 = *(unsigned __int8 *)(v80 + 15203);
            unsigned int v82 = *((_DWORD *)v41 + 4);
            unsigned int v83 = *((_DWORD *)v41 + 2);
            unsigned int v74 = v83;
            unsigned int v78 = v82;
            if (!v84) {
              break;
            }
          }
          unsigned int v85 = v83;
          unsigned int v86 = v82 + 1;
          *((_DWORD *)v41 + 4) = v86;
          signed int v79 = v86;
          unsigned int v78 = v86;
          unsigned int v74 = v85;
        }
        while (v86 < v85);
      }
      if (v78 == v74)
      {
        *((_DWORD *)v41 + 4) = -1;
      }
      else
      {
        bzero(&buf, 0x400uLL);
        if (v144)
        {
          if (v78 != -1)
          {
            uint64_t v87 = *(void *)(*v41 + 8 * (int)v78);
            char v88 = atomic_load((unsigned int *)(v87 + 36));
            if ((v88 & 3) != 0 || *(unsigned char *)(v87 + 15203))
            {
              uint64_t v132 = __si_assert_copy_extra_625(*(_DWORD *)(v4 + 32));
              int v133 = v132;
              if (v132) {
                char v134 = v132;
              }
              else {
                char v134 = "";
              }
              int v135 = fcntl(*(_DWORD *)(v4 + 32), 50, &buf);
              char v136 = 0;
              if ((_BYTE)buf) {
                BOOL v137 = v135 < 0;
              }
              else {
                BOOL v137 = 1;
              }
              if (!v137) {
                char v136 = (const char *)&buf;
              }
              __message_assert("%s:%u: failed assertion '%s' %s No writable index available for %s", "SpotlightIndex.c", 21047, "(ci_rc != ContentIndex_OpenedNew) || (indexSet->currentIndex==~0) || ContentIndexWritable(indexSet->index[indexSet->currentIndex])", v134, v136);
              free(v133);
              if (__valid_fs(*(_DWORD *)(v4 + 32))) {
                uint64_t v138 = 2989;
              }
              else {
                uint64_t v138 = 3072;
              }
              *(_DWORD *)uint64_t v138 = -559038737;
              abort();
            }
          }
        }
      }
      int v89 = v75;
      int v90 = v145;
      goto LABEL_85;
    }
    int v50 = *((_DWORD *)v41 + 2);
    if (*(unsigned char *)(v53 + 15203)) {
      goto LABEL_51;
    }
    unsigned int v91 = *((_DWORD *)v41 + 2) - 1;
    if (*((_DWORD *)v41 + 4) == -1) {
      *((_DWORD *)v41 + 4) = v91;
    }
    uint64_t v92 = *(int **)(*v41 + 8 * v91);
    int v90 = v92[10];
    if (v148) {
      ContentIndexSetEmergency(v92, 1);
    }
    int v89 = -1;
LABEL_85:
    if (si_swapIndexSet((int *)v4, v17, (unint64_t)v41, v149, v45, v46, v47, v48))
    {
      int v108 = v89;
      int v99 = v150;
      goto LABEL_111;
    }
    if (v89 != 1)
    {
      uint64_t v40 = (void **)v41;
      int v16 = v149;
      goto LABEL_39;
    }
    int v39 = (uint64_t *)(*v41 + 8 * (*((_DWORD *)v41 + 2) - 1));
    uint64_t v40 = (void **)v41;
    int v16 = v149;
LABEL_38:
    ContentIndexDeleteIndex(*v39, 1);
LABEL_39:
    free(*v40);
    free(v40);
    int v15 = *(void **)(v4 + 1384);
    if (!v15) {
      goto LABEL_100;
    }
  }
  if (*(void *)(*(void *)v19 + 80) < v148)
  {
    BOOL v127 = __si_assert_copy_extra_625(-1);
    long long v128 = v127;
    uint64_t v129 = "";
    if (v127) {
      uint64_t v129 = v127;
    }
    unint64_t v141 = "oldLiveSet->indexCount==0 || (CFIndex)ContentIndexBaseDocId(oldLiveSet->index[0]) >= count";
    uint64_t v142 = v129;
    int v130 = 20859;
LABEL_153:
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", v130, v141, v142);
    free(v128);
    if (__valid_fs(-1)) {
      uint64_t v131 = 2989;
    }
    else {
      uint64_t v131 = 3072;
    }
    *(_DWORD *)uint64_t v131 = -559038737;
    abort();
  }
LABEL_25:
  int v24 = ((*(_DWORD *)(v4 + 828) & 1) << 6) ^ 0x50;
  if (*(unsigned char *)(v4 + 2064)) {
    v24 |= 0x100u;
  }
  if (*(unsigned char *)(v4 + 2065)) {
    v24 |= 0x400u;
  }
  unsigned int v25 = *(_DWORD *)(v4 + 6576);
  int v26 = v24 | (v25 >> 7) & 0x800;
  if (*v146) {
    int v27 = v26 | 0x1000;
  }
  else {
    int v27 = v26;
  }
  v158[0] = MEMORY[0x1E4F143A8];
  v158[1] = 0x40000000;
  v158[2] = __si_set_scan_count_block_invoke;
  v158[3] = &__block_descriptor_tmp_1737;
  v158[4] = v4;
  char v28 = (uint64_t **)ContentIndexListClone((long long *)v17);
  uint64_t v29 = *(unsigned int *)(v4 + 32);
  int v30 = *(_DWORD *)(v4 + 1276);
  long long v31 = *(int **)(v4 + 1184);
  if (v31) {
    uint64_t v32 = db_get_vector_store(v31);
  }
  else {
    uint64_t v32 = 0;
  }
  v157[0] = MEMORY[0x1E4F143A8];
  v157[1] = 0x40000000;
  v157[2] = __si_set_scan_count_block_invoke_2;
  v157[3] = &__block_descriptor_tmp_1738;
  v157[4] = v4;
  uint64_t v33 = ContentIndexCreateNew(v29, @"tmp.", v148 + 1025, 2, v27 | ~(v25 >> 1) & 0x8000, 1, v30, v32, (uint64_t)v157, v158, *(_DWORD *)(v4 + 60));
  **char v28 = v33;
  if (v33)
  {
    uint64_t v34 = **v28;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 0x40000000;
    aBlock[2] = __si_set_scan_count_block_invoke_3;
    aBlock[3] = &__block_descriptor_tmp_1739;
    aBlock[4] = v4;
    aBlock[5] = v34;
    ContentIndexSetDirtyCallback(v34, aBlock);
    *(unsigned char *)(v34 + 15201) = 4;
    uint64_t v190 = 0;
    long long v188 = 0u;
    long long v189 = 0u;
    long long buf = 0u;
    long long v187 = 0u;
    *(_DWORD *)std::string __str = 0;
    ContentIndexSyncIndex(v34, (uint64_t)&buf, (uint64_t)__str);
    bzero((char *)&buf + 8, 0x208uLL);
    *(void *)&long long buf = 0x6D6F76650A00;
    DWORD2(buf) = 2;
    BYTE12(buf) = 1;
    HIDWORD(v187) = 1;
    *((_DWORD *)v28 + 2) = 1;
    *((_DWORD *)v28 + 4) = -1;
    si_clone_index_metadata_to_inflight(v4);
    __strlcpy_chk();
    LODWORD(v34) = si_openat_protected(*(unsigned int *)(v4 + 32), "tmp.movePlan", 1538, 3);
    pwrite(v34, &buf, 0x210uLL, 0);
    fcntl(v34, 85);
    ContentIndexChangePrefix(**v28);
    unlinkat(*(_DWORD *)(v4 + 32), "tmp.movePlan", 2048);
    close(v34);
    int v16 = v149;
    if (si_swapIndexSet((int *)v4, v17, (unint64_t)v28, v149, v35, v36, v37, v38))
    {
      int v90 = 1;
      int v108 = 1;
      int v99 = v150;
      goto LABEL_113;
    }
    int v39 = *v28;
    uint64_t v40 = (void **)v28;
    goto LABEL_38;
  }
  bzero(&buf, 0x400uLL);
  int v106 = *__error();
  uint64_t v107 = _SILogForLogForCategory(0);
  int v99 = v150;
  if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
  {
    int v124 = fcntl(*(_DWORD *)(v4 + 32), 50, &buf);
    int v125 = 0;
    *(_DWORD *)std::string __str = 136315650;
    *(void *)&__str[4] = "si_set_scan_count";
    if ((_BYTE)buf) {
      BOOL v126 = v124 < 0;
    }
    else {
      BOOL v126 = 1;
    }
    if (!v126) {
      int v125 = &buf;
    }
    *(_WORD *)&__str[12] = 1024;
    *(_DWORD *)&__str[14] = 20934;
    *(_WORD *)&__str[18] = 2080;
    *(void *)&__str[20] = v125;
    _os_log_error_impl(&dword_1BD672000, v107, OS_LOG_TYPE_ERROR, "%s:%d: Couldn't create live store at %s.", (uint8_t *)__str, 0x1Cu);
  }
  *__error() = v106;
  int v90 = 1;
  int v108 = -1;
LABEL_111:
  int v16 = v149;
LABEL_113:
  unint64_t v109 = (uint64_t *)*v16;
  if (*v16)
  {
    *(void *)&long long buf = v4;
    __checkIndexSetDocIdOrder(v4, v109);
  }
  long long v110 = *(uint64_t **)(v4 + 1384);
  if (v110)
  {
    *(void *)&long long buf = v4;
    __checkIndexSetDocIdOrder(v4, v110);
  }
  int v111 = *(_DWORD *)(v4 + 6868);
  if (v111 >= v90) {
    int v112 = v90;
  }
  else {
    int v112 = *(_DWORD *)(v4 + 6868);
  }
  if (v90) {
    int v111 = v112;
  }
  *(_DWORD *)(v4 + 6868) = v111;
  if (v111 >= 3)
  {
    int v113 = *__error();
    long long v114 = _SILogForLogForCategory(0);
    os_log_type_t v115 = 2 * (gSILogLevels[0] < 4);
    if (os_log_type_enabled(v114, v115))
    {
      int v116 = *(_DWORD *)(v4 + 6868);
      LODWORD(buf) = 67109120;
      DWORD1(buf) = v116;
      _os_log_impl(&dword_1BD672000, v114, v115, "Starting cleanup for transactions below %d", (uint8_t *)&buf, 8u);
    }
    *__error() = v113;
    SIInitialIndexingEnded(v4, (*(_DWORD *)(v4 + 6868) - 1));
    int v16 = v149;
  }
  uint64_t v117 = *v16;
  if (*v16)
  {
    uint64_t v118 = *(int *)(v117 + 16);
    if (v118 != -1)
    {
      uint64_t v119 = *(void *)(*(void *)v117 + 8 * v118);
      char v120 = atomic_load((unsigned int *)(v119 + 36));
      if ((v120 & 3) != 0 || *(unsigned char *)(v119 + 15203))
      {
        uint64_t v139 = __si_assert_copy_extra_625(-1);
        long long v128 = v139;
        int v140 = "";
        if (v139) {
          int v140 = v139;
        }
        unint64_t v141 = "!ref->liveSet || ref->liveSet->currentIndex==~0 || ContentIndexWritable(ref->liveSet->index[ref->liveSet->currentIndex])";
        uint64_t v142 = v140;
        int v130 = 21075;
        goto LABEL_153;
      }
    }
  }
  if (v108 < 0)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)(v3 + 2431), memory_order_acquire) & 1) == 0)
    {
      if (SIIsAppleInternal_onceToken != -1) {
        dispatch_once(&SIIsAppleInternal_onceToken, &__block_literal_global_5267);
      }
      if (SIIsAppleInternal_internal)
      {
        if (!atomic_fetch_add_explicit(&si_set_scan_count__crashCount, 1u, memory_order_relaxed))
        {
          CFStringRef v123 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"si_set_scan_count, rc:%d", 0xFFFFFFFFLL);
          getpid();
          SISimulateCrashForPid(0, (uint64_t)v123);
          if (v123) {
            CFRelease(v123);
          }
        }
      }
    }
    si_makeUnavailable(v4, 22, 2, 14, "could not create live index");
    goto LABEL_103;
  }
  uint64_t v121 = *(void *)(v4 + 872);
  if (v121) {
    BOOL v122 = *(void **)(v121 + 160);
  }
  else {
    BOOL v122 = 0;
  }
  int v100 = v151;
  si_scheduler_resume(v121, v122, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 21080);
LABEL_104:
  uint64_t v101 = *(void *)&threadData[18 * v161 + 2];
  unsigned int v102 = v160;
  uint64_t v103 = v101 + 320 * v160;
  *(_DWORD *)(v103 + 312) = v99;
  unint64_t v104 = *(void (**)(void))(v103 + 232);
  if (v104) {
    v104(*(void *)(v101 + 320 * v102 + 288));
  }
  dropThreadId(v161, 0, v100);
LABEL_107:
  int v105 = v165;
  MEMORY[0x1C1882290](v165);
  if ((v105 & 0x80000000) == 0) {
    close(v105);
  }
LABEL_2:
  free(a1);
}

void __si_set_scan_count_block_invoke(uint64_t a1, const void *a2)
{
}

uint64_t __si_set_scan_count_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return _si_next_index_id(*(os_unfair_lock_s **)(a1 + 32), a2, 1, 0);
}

uint64_t __si_set_scan_count_block_invoke_3(uint64_t a1)
{
  return si_set_obj_state(*(os_unfair_lock_s **)(a1 + 32), *(void *)(a1 + 40));
}

void __si_set_scan_count_block_invoke_1740(uint64_t a1, const void *a2)
{
}

uint64_t __si_set_scan_count_block_invoke_2_1742(uint64_t a1, uint64_t a2)
{
  return _si_next_index_id(*(os_unfair_lock_s **)(a1 + 32), a2, 1, 0);
}

uint64_t __si_set_scan_count_block_invoke_3_1744(uint64_t a1)
{
  return si_set_obj_state(*(os_unfair_lock_s **)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t __si_set_scan_count_block_invoke_4(uint64_t a1)
{
  return si_set_obj_state(*(os_unfair_lock_s **)(a1 + 32), *(void *)(a1 + 40));
}

void si_initialIndexingEnded(uint64_t a1, int a2)
{
  if (!a2)
  {
    uint64_t v4 = *(void **)a1;
    if (**(void **)(*(void *)a1 + 1384))
    {
      si_sync_ctx_create_with_defer_fd(*(void *)a1, 0);
      *(void *)(v5 + 64) = *(void *)(a1 + 64);
      *(_DWORD *)(v5 + 56) = 8873;
      *(void *)(a1 + 64) = 0;
      syncIndex(v5, 0);
      uint64_t v6 = db_shrink_cache(v4[148]);
      if (v6)
      {
        si_makeUnavailable((uint64_t)v4, v6, 0, 4, "Failure in db_shrink_cache at si_initialIndexingEnded");
      }
      else
      {
        int v7 = *(_DWORD *)(a1 + 80);
        if (gSISystemOnBattery
          && (uint64_t v8 = v4[294]) != 0
          && (unsigned int v9 = *(void (**)(uint64_t, void, __CFString *, void *))(v8 + 80)) != 0)
        {
          uint64_t v10 = *(void *)(v8 + 144);
          v11[0] = MEMORY[0x1E4F143A8];
          v11[1] = 0x40000000;
          v11[2] = __si_initialIndexingEnded_block_invoke;
          v11[3] = &__block_descriptor_tmp_792;
          int v12 = v7;
          v9(v10, 0, @"InitialIndexingEnded", v11);
        }
        else
        {
          setupAndIssueMerge(v4, v7, 0, 0, 0);
        }
      }
    }
  }
  si_sync_ctx_free(a1, a2 != 0);
}

void __si_initialIndexingEnded_block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4, NSObject *a5)
{
  if (a2) {
    setupAndIssueMerge(a2, *(_DWORD *)(a1 + 32), a3, a4, a5);
  }
}

void setupAndIssueMerge(void *a1, int a2, void *a3, uint64_t a4, NSObject *a5)
{
  uint64_t v5 = a5;
  unsigned int v9 = (uint64_t *)a1[173];
  uint64_t v10 = (uint64_t **)a1[172];
  unint64_t v11 = *((unsigned int *)v9 + 2);
  if (v11)
  {
    unint64_t v12 = 0;
    int v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = *v9;
    do
    {
      while (*(_DWORD *)(*(void *)(v15 + 8 * v12) + 40) != a2)
      {
        if (v14) {
          goto LABEL_11;
        }
        if (++v12 >= v11) {
          goto LABEL_13;
        }
      }
      if (!v14) {
        uint64_t v14 = *(void *)(v15 + 8 * v12);
      }
      ++v13;
      ++v12;
    }
    while (v12 < v11);
    if (!v14) {
      goto LABEL_13;
    }
LABEL_11:
    int v16 = 0;
    BOOL v17 = 1;
    goto LABEL_25;
  }
  int v13 = 0;
LABEL_13:
  uint64_t v18 = *((unsigned int *)v10 + 2);
  if (v18)
  {
    int v16 = 0;
    uint64_t v14 = 0;
    uint64_t v19 = *v10;
    do
    {
      if (*(_DWORD *)(*v19 + 40) == a2)
      {
        if (!v14) {
          uint64_t v14 = *v19;
        }
        ++v13;
        int v16 = 1;
      }
      else if (v14)
      {
        break;
      }
      ++v19;
      --v18;
    }
    while (v18);
    BOOL v17 = v16 == 0;
    if (v11 >= 2 && v16) {
      setupAndIssueMerge(a1, 1, a3, a4, a5);
    }
    if (v14)
    {
LABEL_25:
      int v20 = (char *)malloc_type_calloc(1uLL, 0x460uLL, 0x1070040C187FD8AuLL);
      *(void *)int v20 = a1;
      if (v16 && v13 == 1)
      {
        uint64_t v21 = a1[172];
        int v22 = *(_DWORD *)(v14 + 56);
        if (v22 && (uint64_t v23 = *(unsigned int *)(v21 + 8), v23))
        {
          long long v31 = v5;
          uint64_t v24 = 0;
          while (*(_DWORD *)(*(void *)(*(void *)v21 + 8 * v24) + 56) != v22)
          {
            if (v23 == ++v24) {
              goto LABEL_36;
            }
          }
          if ((v24 + 1) < 2)
          {
LABEL_36:
            uint64_t v25 = 0;
            int v13 = 1;
            goto LABEL_38;
          }
          int v13 = count_IndexSet(v21, (int)v24 - 1, *(_DWORD *)(v14 + 52));
          uint64_t v25 = (int)v24 - v13;
LABEL_38:
          uint64_t v5 = v31;
        }
        else
        {
          uint64_t v25 = 0;
          int v13 = 1;
        }
        uint64_t v14 = *(void *)(*(void *)v21 + 8 * v25);
      }
      if (v17) {
        int v26 = -1;
      }
      else {
        int v26 = v13;
      }
      *((_DWORD *)v20 + 2) = *(_DWORD *)(v14 + 56);
      *((_DWORD *)v20 + 3) = v26;
      v20[16] = v16;
      *(_WORD *)(v20 + 1041) = 0;
      *((void *)v20 + 131) = "void setupAndIssueMerge(SIRef, uint32_t, _Bool, xpc_activity_t, _Bool *, dispatch_group_t)";
      *((_DWORD *)v20 + 274) = 5;
      v20[1100] = 0;
      __strlcpy_chk();
      int v27 = v20 + 1064;
      si_power_info_init((uint64_t)(v20 + 1064), a3, a4, v5);
      if (!*((void *)v20 + 136) && !*v27)
      {
        uint64_t v29 = a1[294];
        if (v29)
        {
          int v30 = *(uint64_t (**)(void, const char *, uint64_t, const char *))(v29 + 64);
          if (v30) {
            _DWORD *v27 = v30(*(void *)(v29 + 144), "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 8842, "void setupAndIssueMerge(SIRef, uint32_t, _Bool, xpc_activity_t, _Bool *, dispatch_group_t)");
          }
        }
      }
      uint64_t v28 = a1[132];
      si_enqueue_work(v28, (uint64_t)si_mergeIndex, (uint64_t)v20);
    }
  }
}

void si_mergeIndex(uint64_t *a1, int a2)
{
  uint64_t v3 = (uint64_t)a1;
  uint64_t v153 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = *a1;
    if (!a1[138]) {
      a1[138] = time(0);
    }
    disableProcMon();
    unsigned int v130 = 0;
    if (!fd_setDir(*(unsigned int *)(v5 + 32), (int *)&v130)) {
      goto LABEL_148;
    }
    int v6 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
    unint64_t v7 = setThreadIdAndInfo(-1, (long long *)sSDBExceptionCallbacks, *(void *)(v5 + 1184), 0x40000000, v6);
    unsigned int v128 = HIDWORD(v7);
    unsigned int v129 = v7;
    unsigned int v126 = v9;
    unsigned int v127 = v8;
    uint64_t v10 = *(void *)&threadData[18 * v7 + 2];
    uint64_t v11 = v10 + 320 * HIDWORD(v7);
    *(unsigned char *)(v11 + 216) = 0;
    int v12 = *(_DWORD *)(v11 + 312);
    int v13 = *(void (**)(void))(v11 + 224);
    if (v13) {
      v13(*(void *)(v10 + 320 * HIDWORD(v7) + 288));
    }
    int v14 = v6;
    if (_setjmp((int *)v11))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
      }
      *(_DWORD *)(v11 + 312) = v12;
      CIOnThreadCleanUpReset(v126);
      dropThreadId(v129, 1, v6);
      CICleanUpReset(v129, v127);
LABEL_145:
      uint64_t v108 = v3;
      int v109 = v130;
      MEMORY[0x1C1882290](v130);
      if ((v109 & 0x80000000) == 0) {
        close(v109);
      }
      uint64_t v3 = v108;
LABEL_148:
      enableProcMon();
      goto LABEL_149;
    }
    uint64_t v15 = (_DWORD *)(v3 + 1064);
    if (!*(void *)(v3 + 1088) && !*v15)
    {
      uint64_t v23 = *(void *)(v5 + 2352);
      if (v23)
      {
        uint64_t v24 = *(uint64_t (**)(void, const char *, uint64_t, const char *))(v23 + 64);
        if (v24) {
          *uint64_t v15 = v24(*(void *)(v23 + 144), "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 8565, "void si_mergeIndex(void *, Boolean)");
        }
      }
    }
    if (!*(_DWORD *)(v3 + 8) && (*(unsigned char *)(v3 + 1042) || !*(unsigned char *)(v3 + 16)))
    {
      uint64_t v16 = *(void *)(v5 + 1384);
      if (*(_DWORD *)(v16 + 16) != -1)
      {
        for (int i = (atomic_ullong *)(v4 + 1384); ; v16 = *i)
        {
          uint64_t v18 = ContentIndexListClone((long long *)v16);
          *((_DWORD *)v18 + 4) = -1;
          if (si_swapIndexSet((int *)v5, v16, (unint64_t)v18, i, v19, v20, v21, v22)) {
            break;
          }
          ContentIndexListFree((void **)v18);
        }
        _CIDisableUpdates(*(void *)(*v18 + 8 * (*((_DWORD *)v18 + 2) - 1)));
      }
    }
    int v25 = *__error();
    int v26 = _SILogForLogForCategory(0);
    os_log_type_t v27 = 2 * (gSILogLevels[0] < 4);
    if (os_log_type_enabled(v26, v27))
    {
      if (*(unsigned char *)(v3 + 1042)) {
        uint64_t v28 = "Full";
      }
      else {
        uint64_t v28 = "Partial";
      }
      uint64_t v29 = "Vacuum";
      int v30 = si_merge_reason_names[*(unsigned int *)(v3 + 1096)];
      int v31 = *(unsigned __int8 *)(v3 + 1043);
      if (!*(unsigned char *)(v3 + 1041)) {
        uint64_t v29 = "Normal";
      }
      *(_DWORD *)long long buf = 136315906;
      *(void *)&uint8_t buf[4] = v28;
      uint64_t v32 = "Voluntary";
      __int16 v141 = 2080;
      uint64_t v142 = v29;
      __int16 v143 = 2080;
      uint64_t v144 = v30;
      if (v31) {
        uint64_t v32 = "Forced";
      }
      __int16 v145 = 2080;
      unint64_t v146 = v32;
      _os_log_impl(&dword_1BD672000, v26, v27, "Attempt to merge (%s/%s/%s/%s)", buf, 0x2Au);
    }
    *__error() = v25;
    if (*(unsigned char *)(v3 + 1042))
    {
      *(_DWORD *)(v3 + 12) = -1;
      if ((transfer_live_indexes(v5) & 1) == 0)
      {
        int v43 = *__error();
        BOOL v44 = _SILogForLogForCategory(0);
        os_log_type_t v45 = 2 * (gSILogLevels[0] < 4);
        if (os_log_type_enabled(v44, v45))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1BD672000, v44, v45, "Failed to transfer live indexes", buf, 2u);
        }
        *__error() = v43;
        goto LABEL_139;
      }
    }
    int v125 = v14;
    uint64_t v33 = *(void *)v3;
    if (*(unsigned char *)(v3 + 16)) {
      uint64_t v34 = 1376;
    }
    else {
      uint64_t v34 = 1384;
    }
    if (*(unsigned char *)(v3 + 16)) {
      uint64_t v35 = *(void *)v3 + 1376;
    }
    else {
      uint64_t v35 = *(void *)v3 + 1384;
    }
    int v36 = *(uint64_t **)(v33 + v34);
    int v37 = v36;
    *(void *)long long buf = v5;
    __checkIndexSetDocIdOrder(v5, v36);
    int v38 = *(_DWORD *)(v3 + 12);
    if (v38 == -1)
    {
      signed int v42 = 0;
      int v46 = *((_DWORD *)v37 + 2);
      *(_DWORD *)(v3 + 12) = v46;
      int v38 = v46;
    }
    else
    {
      int v39 = *(_DWORD *)(v3 + 8);
      if (v39 && (uint64_t v40 = *((unsigned int *)v37 + 2), v40))
      {
        uint64_t v41 = 0;
        while (*(_DWORD *)(*(void *)(*v37 + 8 * v41) + 56) != v39)
        {
          if (v40 == ++v41) {
            goto LABEL_47;
          }
        }
        signed int v42 = v41;
      }
      else
      {
LABEL_47:
        signed int v42 = 0;
      }
    }
    if (!v38 || (v42 + v38) > *((_DWORD *)v37 + 2))
    {
      int v47 = v37;
      int v48 = *__error();
      char v49 = _SILogForLogForCategory(0);
      os_log_type_t v50 = 2 * (gSILogLevels[0] < 4);
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = si_merge_reason_names[*(unsigned int *)(v3 + 1096)];
        int v52 = *(unsigned __int8 *)(v3 + 1043);
        if (*(unsigned char *)(v3 + 1042)) {
          uint64_t v53 = "Full";
        }
        else {
          uint64_t v53 = "Partial";
        }
        int v54 = *(_DWORD *)(v3 + 12);
        BOOL v55 = *(unsigned char *)(v3 + 1041) == 0;
        unsigned int v56 = *((_DWORD *)v47 + 2);
        *(_DWORD *)long long buf = 136316674;
        *(void *)&uint8_t buf[4] = v53;
        if (v55) {
          unsigned int v57 = "Normal";
        }
        else {
          unsigned int v57 = "Vacuum";
        }
        __int16 v141 = 2080;
        uint64_t v142 = v57;
        int v58 = "Voluntary";
        __int16 v143 = 2080;
        uint64_t v144 = v51;
        if (v52) {
          int v58 = "Forced";
        }
        __int16 v145 = 2080;
        unint64_t v146 = v58;
        __int16 v147 = 1024;
        int v148 = v54;
        __int16 v149 = 1024;
        BOOL v150 = v54 + v42 <= v56;
        __int16 v151 = 2080;
        unint64_t v152 = "";
        _os_log_impl(&dword_1BD672000, v49, v50, "Skipped merge (%s/%s/%s/%s/%d/%d)%s", buf, 0x40u);
      }
      *__error() = v48;
      int v14 = v125;
      goto LABEL_139;
    }
    BOOL v122 = (long long **)v35;
    uint64_t v123 = v34;
    int v124 = (long long *)v37;
    uint64_t v121 = ContentIndexListClone((long long *)v37);
    bzero(buf, 0x400uLL);
    int v59 = fcntl(*(_DWORD *)(v5 + 32), 50, buf);
    uint64_t v60 = 0;
    if (buf[0]) {
      BOOL v61 = v59 < 0;
    }
    else {
      BOOL v61 = 1;
    }
    if (!v61) {
      uint64_t v60 = buf;
    }
    uint64_t v120 = (uint64_t)v60;
    int v62 = *__error();
    uint64_t v63 = _SILogForLogForCategory(0);
    os_log_type_t v64 = 2 * (gSILogLevels[0] < 4);
    if (os_log_type_enabled(v63, v64))
    {
      if (*(unsigned char *)(v3 + 1042)) {
        int v65 = "Full";
      }
      else {
        int v65 = "Partial";
      }
      BOOL v55 = *(unsigned char *)(v3 + 1041) == 0;
      int v66 = si_merge_reason_names[*(unsigned int *)(v3 + 1096)];
      int v67 = *(unsigned __int8 *)(v3 + 1043);
      int v68 = *(_DWORD *)(v3 + 12);
      *(_DWORD *)uint64_t v131 = 136316162;
      *(void *)&v131[4] = v65;
      if (v55) {
        uint64_t v69 = "Normal";
      }
      else {
        uint64_t v69 = "Vacuum";
      }
      __int16 v132 = 2080;
      int v133 = v69;
      int v70 = "Voluntary";
      __int16 v134 = 2080;
      if (v67) {
        int v70 = "Forced";
      }
      int v135 = v66;
      __int16 v136 = 2080;
      BOOL v137 = v70;
      __int16 v138 = 1024;
      int v139 = v68;
      _os_log_impl(&dword_1BD672000, v63, v64, "Merging (%s/%s/%s/%s/%d)", v131, 0x30u);
    }
    *__error() = v62;
    int v71 = *(_DWORD *)(v3 + 12);
    if (*((_DWORD *)v121 + 2) == v71 && !*(unsigned char *)(v3 + 16)) {
      *((_DWORD *)v121 + 4) = -1;
    }
    signed int v72 = *((_DWORD *)v121 + 4);
    int v73 = v122;
    if (v42 <= v72 && v72 < v71 + v42)
    {
      if (v42 >= v72)
      {
        *(_DWORD *)(v3 + 12) = v71 - 1;
        ++v42;
      }
      else
      {
        *(_DWORD *)(v3 + 12) = v72 + ~v42;
      }
    }
    int v74 = v42;
    if (CompactIndexes(v5, v3, v42, v121)
      && (!*(unsigned char *)(v3 + 1041)
       || *(void *)(v5 + 1144)
       || (uint64_t v76 = *(int *)(v3 + 12), (int)v76 + v42 <= *((_DWORD *)v121 + 2))
       && ((SetupDeferQueue(v5, (uint64_t)v121, v42, v76) & 1) != 0
        || (int v92 = *((_DWORD *)v121 + 2) + ~v42,
            *(_DWORD *)(v3 + 12) = v92,
            SetupDeferQueue(v5, (uint64_t)v121, v42, v92)))))
    {
      int v75 = CompactIndexes(v5, v3, v42, v121);
    }
    else
    {
      int v75 = 0;
    }
    if (!*(unsigned char *)(v3 + 1041) && *(void *)(v5 + 1144)) {
      handleDeferQueue(v5);
    }
    if (!v75) {
      goto LABEL_136;
    }
    int v77 = *(_DWORD *)(v3 + 12);
    if (v77 < 2) {
      goto LABEL_136;
    }
    signed int v78 = *(_DWORD *)(v3 + 12);
    signed int v79 = *((_DWORD *)v121 + 4);
    if (v79 == -1)
    {
      if (!*(unsigned char *)(v3 + 16))
      {
        unsigned __int8 v93 = 0;
        unsigned int v94 = *(_DWORD *)(v3 + 12);
LABEL_128:
        uint64_t v95 = MergeIndexes(v5, *(_DWORD *)(v3 + 8), v74, v94, v73, v124, v121, v120, (char *)(v3 + 17), *(unsigned char *)(v3 + 1041), v93, v3 + 1064);
        if (v95)
        {
          uint64_t v96 = *(void *)(v33 + v123);
          int v14 = v125;
          if (*(_DWORD *)(v3 + 8)
            && (int v97 = *(_DWORD *)(v95 + 56)) != 0
            && (uint64_t v98 = *(unsigned int *)(v96 + 8), v98))
          {
            uint64_t v99 = v95;
            uint64_t v100 = 0;
            while (*(_DWORD *)(*(void *)(*(void *)v96 + 8 * v100) + 56) != v97)
            {
              if (v98 == ++v100) {
                goto LABEL_135;
              }
            }
            unsigned int v114 = v100;
            *(void *)uint64_t v131 = v5;
            __checkIndexSetDocIdOrder(v5, (uint64_t *)v96);
            if (v114)
            {
              int v115 = count_IndexSet(v96, v114, *(_DWORD *)(v99 + 52));
              if (v115 >= 5 && v115 < *(_DWORD *)(v3 + 12))
              {
                *(_DWORD *)(v3 + 8) = *(_DWORD *)(*(void *)(*(void *)v96 + 8 * (v114 - v115 + 1)) + 56);
                *(_DWORD *)(v3 + 12) = v115;
                *(_WORD *)(v3 + 1041) = 0;
                *(void *)(v3 + 1048) = "void si_mergeIndex(void *, Boolean)";
                si_enqueue_work(*(void *)(v5 + 1056), (uint64_t)si_mergeIndex, v3);
                uint64_t v3 = 0;
LABEL_139:
                if (*(void *)(v5 + 1144) && *(unsigned char *)(v3 + 1041)) {
                  handleDeferQueue(v5);
                }
                uint64_t v105 = *(void *)&threadData[18 * v129 + 2];
                uint64_t v106 = v105 + 320 * v128;
                *(_DWORD *)(v106 + 312) = v12;
                uint64_t v107 = *(void (**)(void))(v106 + 232);
                if (v107) {
                  v107(*(void *)(v105 + 320 * v128 + 288));
                }
                dropThreadId(v129, 0, v14);
                goto LABEL_145;
              }
            }
          }
          else
          {
LABEL_135:
            *(void *)uint64_t v131 = v5;
            __checkIndexSetDocIdOrder(v5, (uint64_t *)v96);
          }
LABEL_138:
          uint64_t v101 = (int *)*(unsigned __int8 *)(v3 + 1100);
          int v102 = gSISystemInDarkWake;
          uint64_t v103 = si_merge_reason_names[*(unsigned int *)(v3 + 1096)];
          time_t v104 = time(0);
          si_message_trace_darkwake(v101, v5, (uint64_t)"DarkMerge", v102, (uint64_t)v103, (uint64_t)"Index merge in dark wake", v104 - *(void *)(v3 + 1104));
          goto LABEL_139;
        }
        int v14 = v125;
        if (*(unsigned char *)(v3 + 1041)) {
          handleDeferQueue(v5);
        }
        if (!*(void *)(v5 + 1144)) {
          goto LABEL_138;
        }
        long long v110 = __si_assert_copy_extra_625(-1);
        int v111 = v110;
        int v112 = "";
        if (v110) {
          int v112 = v110;
        }
        uint64_t v119 = v112;
        int v113 = 8715;
LABEL_164:
        __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", v113, "!ref->workqueues.queues[SI_DEFER_QUEUE_IDX]", v119);
        free(v111);
        if (__valid_fs(-1)) {
          uint64_t v118 = 2989;
        }
        else {
          uint64_t v118 = 3072;
        }
        *(_DWORD *)uint64_t v118 = -559038737;
        abort();
      }
      unsigned int v84 = *((_DWORD *)v121 + 2);
      if (v42 >= v84)
      {
        *(_DWORD *)(v3 + 12) = 0;
        goto LABEL_136;
      }
      if (v77 + v42 >= v84)
      {
        int v85 = v84 + ~v42;
        *(_DWORD *)(v3 + 12) = v85;
        if (v85 < 1) {
          goto LABEL_136;
        }
      }
      uint64_t v86 = 0;
      do
      {
        uint64_t v87 = v86;
        _CIDisableUpdates(*(void *)(*v121 + 8 * (v74 + v86)));
        uint64_t v86 = v87 + 1;
        uint64_t v83 = *(int *)(v3 + 12);
      }
      while (v87 + 1 < v83);
      int v73 = v122;
    }
    else
    {
      if (v42 == v79)
      {
        *(_DWORD *)(v3 + 12) = 0;
        signed int v78 = 0;
      }
      signed int v80 = v78;
      if (v42 < v79)
      {
        signed int v81 = v78 + v42;
        signed int v82 = v79;
        if (v81 > v79)
        {
LABEL_105:
          LODWORD(v83) = v82 - v42;
          *(_DWORD *)(v3 + 12) = v82 - v42;
          goto LABEL_126;
        }
      }
      if (v42 <= v79)
      {
        LODWORD(v83) = v80;
      }
      else
      {
        LODWORD(v83) = v80;
        if (v42 < v80)
        {
          uint64_t v88 = v42;
          while (1)
          {
            uint64_t v89 = v88;
            uint64_t v90 = *(void *)(*v121 + 8 * v88);
            char v91 = atomic_load((unsigned int *)(v90 + 36));
            if ((v91 & 3) == 0 && !*(unsigned char *)(v90 + 15203)) {
              break;
            }
            uint64_t v88 = v89 + 1;
            if (v89 + 1 >= *(int *)(v3 + 12))
            {
              LODWORD(v83) = *(_DWORD *)(v3 + 12);
              goto LABEL_126;
            }
          }
          signed int v82 = v89;
          goto LABEL_105;
        }
      }
    }
LABEL_126:
    if ((int)v83 >= 2)
    {
      unsigned __int8 v93 = *(unsigned char *)(v3 + 16) != 0;
      unsigned int v94 = v83;
      goto LABEL_128;
    }
LABEL_136:
    free((void *)*v121);
    free(v121);
    int v14 = v125;
    if (!*(void *)(v5 + 1144)) {
      goto LABEL_138;
    }
    handleDeferQueue(v5);
    if (!*(void *)(v5 + 1144)) {
      goto LABEL_138;
    }
    int v116 = __si_assert_copy_extra_625(-1);
    int v111 = v116;
    uint64_t v117 = "";
    if (v116) {
      uint64_t v117 = v116;
    }
    uint64_t v119 = v117;
    int v113 = 8722;
    goto LABEL_164;
  }
LABEL_149:
  si_merge_ctx_free(v3, a2 != 0);
}

uint64_t disableProcMon()
{
  getpid();
  pthread_mutex_lock(&sProcMonLock);
  if (!sDisableProcMon && proc_get_cpumon_params())
  {
    int v0 = *__error();
    uint64_t v1 = _SILogForLogForCategory(0);
    os_log_type_t v2 = 2 * (gSILogLevels[0] < 4);
    if (os_log_type_enabled(v1, v2))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1BD672000, v1, v2, "Failed to get cpumon_params", buf, 2u);
    }
    *__error() = v0;
  }
  if (proc_set_cpumon_params())
  {
    int v3 = *__error();
    uint64_t v4 = _SILogForLogForCategory(0);
    os_log_type_t v5 = gSILogLevels[0] < 3;
    if (os_log_type_enabled(v4, (os_log_type_t)(gSILogLevels[0] < 3)))
    {
      *(_WORD *)unint64_t v7 = 0;
      _os_log_impl(&dword_1BD672000, v4, v5, "*warn* Failed to set cpumon_params", v7, 2u);
    }
    *__error() = v3;
  }
  ++sDisableProcMon;
  return pthread_mutex_unlock(&sProcMonLock);
}

uint64_t transfer_live_indexes(uint64_t a1)
{
  v112[11] = *(void **)MEMORY[0x1E4F143B8];
  int v2 = *__error();
  int v3 = _SILogForLogForCategory(6);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1BD672000, v3, OS_LOG_TYPE_DEFAULT, "transfer_live_indexes begin\n", (uint8_t *)&buf, 2u);
  }
  uint64_t v4 = 0;
  *__error() = v2;
  memset(v112, 0, 80);
  do
  {
    v112[v4] = si_scheduler_suspend(*(void *)(a1 + v4 * 8 + 864));
    ++v4;
  }
  while (v4 != 10);
  os_log_type_t v5 = *(long long **)(a1 + 1384);
  int v6 = *(long long **)(a1 + 1376);
  unint64_t v7 = ContentIndexListClone(v6);
  unsigned int v8 = ContentIndexListClone(v5);
  unint64_t v9 = (unint64_t)v8;
  unint64_t v10 = *((unsigned int *)v8 + 2);
  uint64_t v11 = *(void *)(*v7 + 8 * (*((_DWORD *)v7 + 2) - 1));
  uint64_t v73 = (uint64_t)v5;
  if (*((_DWORD *)v7 + 2) == 1)
  {
LABEL_11:
    int v15 = 1;
  }
  else
  {
    uint64_t v12 = 0;
    while (1)
    {
      uint64_t v13 = *(void *)(*v7 + 8 * v12);
      if (!v13) {
        break;
      }
      char v14 = atomic_load((unsigned int *)(v13 + 36));
      if ((v14 & 3) == 0 && !*(unsigned char *)(v13 + 15203)) {
        break;
      }
      if (++v12 >= (unint64_t)(*((_DWORD *)v7 + 2) - 1)) {
        goto LABEL_11;
      }
    }
    int v15 = 0;
  }
  int v16 = *((_DWORD *)v8 + 4);
  unsigned int v17 = *(_DWORD *)(a1 + 6576);
  int v18 = (((*(_DWORD *)(a1 + 828) & 1) << 6) | (*(unsigned __int8 *)(a1 + 2064) << 8) | (*(unsigned __int8 *)(a1 + 2065) << 10) | (v17 >> 7) & 0x800) ^ 0x50;
  if (*(unsigned char *)(a1 + 6936)) {
    v18 |= 0x1000u;
  }
  v77[0] = MEMORY[0x1E4F143A8];
  v77[1] = 0x40000000;
  v77[2] = __transfer_live_indexes_block_invoke;
  v77[3] = &__block_descriptor_tmp_754;
  v77[4] = a1;
  if (!v15 || v16 != -1) {
    goto LABEL_31;
  }
  uint64_t v72 = (uint64_t)v6;
  unsigned int v19 = v18 | ~(v17 >> 1) & 0x8000;
  uint64_t v20 = *(unsigned int *)(a1 + 32);
  LODWORD(v21) = *(_DWORD *)(v11 + 68);
  uint64_t v21 = v21 >= 2 ? v21 : 0;
  uint64_t v22 = *(void *)(v11 + 80) + v21 + 1025;
  int v23 = *(_DWORD *)(v11 + 40);
  int v24 = *(_DWORD *)(a1 + 1276);
  int v25 = *(int **)(a1 + 1184);
  if (v25)
  {
    uint64_t v71 = v11;
    int v26 = *(_DWORD *)(v11 + 40);
    uint64_t vector_store = db_get_vector_store(v25);
    int v23 = v26;
    uint64_t v11 = v71;
    uint64_t v28 = vector_store;
  }
  else
  {
    uint64_t v28 = 0;
  }
  v76[0] = MEMORY[0x1E4F143A8];
  v76[1] = 0x40000000;
  v76[2] = __transfer_live_indexes_block_invoke_2;
  v76[3] = &__block_descriptor_tmp_758;
  v76[4] = a1;
  uint64_t New = ContentIndexCreateNew(v20, @"tmp.", v22, v23, v19, 1, v24, v28, (uint64_t)v76, v77, *(_DWORD *)(a1 + 60));
  if (New)
  {
    uint64_t v30 = New;
    char v31 = atomic_load((unsigned int *)(v11 + 36));
    if ((v31 & 3) == 0 && !*(unsigned char *)(v11 + 15203)) {
      _CIDisableUpdates(v11);
    }
    int v75 = 0;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 0x40000000;
    aBlock[2] = __transfer_live_indexes_block_invoke_3;
    aBlock[3] = &__block_descriptor_tmp_759;
    aBlock[4] = a1;
    aBlock[5] = v30;
    ContentIndexSetDirtyCallback(v30, aBlock);
    *(unsigned char *)(v30 + 15201) = 4;
    *(void *)&long long v83 = 0;
    long long v81 = 0u;
    long long v82 = 0u;
    long long buf = 0u;
    long long v80 = 0u;
    ContentIndexSyncIndex(v30, (uint64_t)&buf, (uint64_t)&v75);
    *(_DWORD *)(v72 + 16) = -1;
    if (*(_DWORD *)(v9 + 16) != -1)
    {
      uint64_t v63 = __si_assert_copy_extra_625(-1);
      os_log_type_t v64 = v63;
      int v65 = "";
      if (v63) {
        int v65 = v63;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 6862, "indexSet2->currentIndex==~0", v65);
      free(v64);
      if (__valid_fs(-1)) {
        uint64_t v66 = 2989;
      }
      else {
        uint64_t v66 = 3072;
      }
      *(_DWORD *)uint64_t v66 = -559038737;
      abort();
    }
    unsigned int v32 = *((_DWORD *)v7 + 2);
    int v33 = *(_DWORD *)(v9 + 8);
    unsigned int v34 = *(_DWORD *)(v9 + 12);
    if (v34 >= v33 + v32)
    {
      uint64_t v35 = *(char **)v9;
    }
    else
    {
      do
        v34 *= 2;
      while (v34 < v33 + v32);
      *(_DWORD *)(v9 + 12) = v34;
      uint64_t v35 = (char *)malloc_type_realloc(*(void **)v9, 8 * v34, 0x2004093837F09uLL);
      *(void *)unint64_t v9 = v35;
      int v33 = *(_DWORD *)(v9 + 8);
      unsigned int v32 = *((_DWORD *)v7 + 2);
    }
    memcpy(&v35[8 * v33], (const void *)*v7, 8 * v32);
    long long v110 = 0u;
    long long v111 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    long long v100 = 0u;
    long long v101 = 0u;
    long long v98 = 0u;
    long long v99 = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v94 = 0u;
    long long v95 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    long long v90 = 0u;
    long long v91 = 0u;
    long long v88 = 0u;
    long long v89 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    *(void *)&long long buf = 0x6D6F76650A00;
    DWORD2(buf) = 1;
    HIDWORD(buf) = *((_DWORD *)v7 + 2) - v10 + *(_DWORD *)(v9 + 8);
    DWORD1(v80) = v10;
    __strlcpy_chk();
    unsigned int v37 = *(_DWORD *)(v9 + 8) + *((_DWORD *)v7 + 2);
    *(_DWORD *)(v9 + 8) = v37;
    if (v10 < v37)
    {
      unint64_t v38 = v10;
      do
      {
        uint64_t v39 = *(void *)(*(void *)v9 + 8 * v38);
        char v40 = atomic_load((unsigned int *)(v39 + 36));
        if ((v40 & 3) == 0 && !*(unsigned char *)(v39 + 15203)) {
          _CIDisableUpdates(*(void *)(*(void *)v9 + 8 * v38));
        }
        ++v38;
      }
      while (v38 < *(unsigned int *)(v9 + 8));
    }
    *(_DWORD *)(v9 + 16) = -1;
    *((_DWORD *)v7 + 2) = 1;
    *(void *)*unint64_t v7 = v30;
    *((_DWORD *)v7 + 4) = 0;
    si_clone_index_metadata_to_inflight(a1);
    int v41 = si_openat_protected(*(unsigned int *)(a1 + 32), "tmp.movePlan", 1538, 3);
    pwrite(v41, &buf, 0x210uLL, 0);
    fcntl(v41, 85);
    if (v10 < *(_DWORD *)(v9 + 8))
    {
      int v42 = 0;
      while (1)
      {
        DWORD2(v80) = v42;
        pwrite(v41, &buf, 0x210uLL, 0);
        fcntl(v41, 85);
        memset(__str, 0, 255);
        snprintf((char *)__str, 0xFFuLL, "%u.", v10);
        ContentIndexChangePrefix(*(void *)(*(void *)v9 + 8 * v10));
        uint64_t v43 = *(void *)(*(void *)v9 + 8 * v10);
        char v44 = atomic_load((unsigned int *)(v43 + 36));
        if ((v44 & 3) == 0 && !*(unsigned char *)(v43 + 15203)) {
          break;
        }
        ++v10;
        ++v42;
        if (v10 >= *(unsigned int *)(v9 + 8)) {
          goto LABEL_44;
        }
      }
      int v59 = __si_assert_copy_extra_625(-1);
      uint64_t v60 = v59;
      BOOL v61 = "";
      if (v59) {
        BOOL v61 = v59;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 6909, "!ContentIndexWritable(indexSet2->index[i])", v61);
LABEL_60:
      free(v60);
      if (__valid_fs(-1)) {
        uint64_t v62 = 2989;
      }
      else {
        uint64_t v62 = 3072;
      }
      *(_DWORD *)uint64_t v62 = -559038737;
      abort();
    }
LABEL_44:
    HIDWORD(v80) = 1;
    pwrite(v41, &buf, 0x210uLL, 0);
    fcntl(v41, 85);
    ContentIndexChangePrefix(v30);
    uint64_t v45 = v73;
    uint64_t v46 = v73;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 1384), (unint64_t *)&v46, v9);
    if (v46 != v45)
    {
      uint64_t v69 = __si_assert_copy_extra_625(-1);
      uint64_t v60 = v69;
      int v70 = "";
      if (v69) {
        int v70 = v69;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 6918, "si_swapIndexSet(ref,oldIndexSet2,indexSet2,&ref->syncSet,0, 0)", v70);
      goto LABEL_60;
    }
    si_cleanup(a1, v73);
    atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 1392), 1u, memory_order_relaxed);
    _si_log_indexes((int *)a1);
    if (!si_swapIndexSet((int *)a1, v72, (unint64_t)v7, (atomic_ullong *)(a1 + 1376), v47, v48, v49, v50))
    {
      int v67 = __si_assert_copy_extra_625(-1);
      uint64_t v60 = v67;
      int v68 = "";
      if (v67) {
        int v68 = v67;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 6922, "si_swapIndexSet(ref,oldIndexSet1,indexSet1,&ref->liveSet,1, 1)", v68);
      goto LABEL_60;
    }
    int v51 = *(_DWORD *)(*(void *)(a1 + 1384) + 8);
    *(_DWORD *)(a1 + 1232) = v51;
    *(_DWORD *)(a1 + 1240) = v51;
    int v52 = *(_DWORD *)(*(void *)(a1 + 1376) + 8);
    *(_DWORD *)(a1 + 1236) = v52;
    *(_DWORD *)(a1 + 1244) = v52;
    _CIMetaInfoSync(a1 + 1192, gTerminating == 0);
    unlinkat(*(_DWORD *)(a1 + 32), "tmp.movePlan", 2048);
    close(v41);
    uint64_t v36 = 1;
    *(unsigned char *)(a1 + 2429) = 1;
    _CreateDeferQueue(a1, *(uint64_t **)(a1 + 1384), 0, *(unsigned int *)(*(void *)(a1 + 1384) + 8));
  }
  else
  {
LABEL_31:
    free((void *)*v7);
    free(v7);
    free(*(void **)v9);
    free((void *)v9);
    uint64_t v36 = 0;
  }
  for (uint64_t i = 117; i != 108; --i)
    si_scheduler_resume(*(void *)(a1 + i * 8), (void *)v76[i], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 6940);
  if (v36)
  {
    si_sync_ctx_create_with_defer_fd(a1, 0);
    uint64_t v55 = v54;
    *(unsigned char *)(v54 + 96) = 1;
    if (!*(unsigned char *)(*(void *)v54 + 2429) && !*(unsigned char *)(*(void *)v54 + 2064)) {
      attachJournal((atomic_uint *)v54);
    }
    syncIndex(v55, 0);
  }
  si_scheduler_resume(*(void *)(a1 + 864), v112[0], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 6954);
  int v56 = *__error();
  unsigned int v57 = _SILogForLogForCategory(6);
  if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1BD672000, v57, OS_LOG_TYPE_DEFAULT, "transfer_live_indexes end\n", (uint8_t *)&buf, 2u);
  }
  *__error() = v56;
  return v36;
}

uint64_t CompactIndexes(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if ((*(unsigned char *)(a1 + 6578) & 4) != 0) {
    return 1;
  }
  pthread_mutex_lock(&mergeMutex);
  *(_WORD *)(a1 + 2426) = 257;
  pthread_mutex_unlock(&mergeMutex);
  unsigned int v8 = (unsigned int *)(a4 + 1);
  if (a2) {
    unsigned int v8 = (unsigned int *)(a2 + 12);
  }
  uint64_t v9 = *v8;
  if ((int)v9 < 1)
  {
    char v11 = 0;
    goto LABEL_26;
  }
  int v23 = (_DWORD *)(a2 + 12);
  uint64_t v10 = 0;
  char v11 = 0;
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v13 = 8 * a3;
  while (1)
  {
    uint64_t v14 = *(void *)(*a4 + v13 + 8 * v10);
    char v15 = atomic_load((unsigned int *)(v14 + 36));
    if ((v15 & 4) != 0) {
      goto LABEL_18;
    }
    char v16 = atomic_load((unsigned int *)(v14 + 36));
    if ((v16 & 2) != 0)
    {
      if (a2) {
        goto LABEL_16;
      }
LABEL_14:
      char v17 = atomic_load((unsigned int *)(v14 + 36));
      if ((v17 & 2) == 0 && !*(unsigned char *)(v14 + 15203)) {
        goto LABEL_26;
      }
      goto LABEL_16;
    }
    if (a2) {
      break;
    }
    if (*(unsigned char *)(v14 + 15203)) {
      goto LABEL_14;
    }
LABEL_18:
    ++v10;
    char v11 = 1;
    if (v9 == v10) {
      goto LABEL_26;
    }
  }
  if (!*(unsigned char *)(v14 + 15203))
  {
    *(unsigned char *)(a2 + 1041) = 0;
    *(_DWORD *)(a2 + 12) = v10;
    goto LABEL_26;
  }
LABEL_16:
  xpc_object_t values = (void *)*(int *)(v14 + 56);
  CFSetRef v18 = CFSetCreate(v12, (const void **)&values, 1, 0);
  setUpOverlay(a1, v18);
  CFRelease(v18);
  char v24 = 0;
  int v19 = (*(_DWORD *)(a1 + 6576) >> 4) & 1;
  *(void *)&long long v26 = si_compact_lock;
  *((void *)&v26 + 1) = si_compact_unlock;
  os_log_type_t v27 = si_compact_cancel;
  uint64_t v28 = a1;
  int v20 = _CICompact(v14, &v26, v19, &v24);
  mergeOverlay(a1, 0);
  if (!a2 || !v20) {
    goto LABEL_18;
  }
  if (v24)
  {
    *int v23 = 0;
    si_recycleForBadIndex(a1, v14, "compact err");
  }
  else
  {
    *int v23 = v10;
  }
  *(unsigned char *)(a2 + 1041) = 0;
LABEL_26:
  pthread_mutex_lock(&mergeMutex);
  uint64_t v21 = v11 & (*(_DWORD *)(a1 + 2420) == 0);
  *(_WORD *)(a1 + 2426) = 0;
  pthread_cond_broadcast(&mergeCond);
  pthread_mutex_unlock(&mergeMutex);
  return v21;
}

uint64_t SetupDeferQueue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (a4 && a4 + a3 <= *(unsigned int *)(a2 + 8))
  {
    uint64_t v29 = si_scheduler_suspend(*(void *)(a1 + 864));
    *(unsigned char *)(a1 + 2429) = 1;
    atomic_fetch_add((atomic_uint *volatile)(a1 + 1444), 1u);
    uint64_t v28 = si_scheduler_suspend(*(void *)(a1 + 872));
    atomic_fetch_add((atomic_uint *volatile)(a1 + 1444), 0xFFFFFFFF);
    unsigned int v8 = si_scheduler_suspend(*(void *)(a1 + 880));
    uint64_t v9 = si_scheduler_suspend(*(void *)(a1 + 928));
    uint64_t v10 = si_scheduler_suspend(*(void *)(a1 + 936));
    int v11 = *__error();
    CFAllocatorRef v12 = _SILogForLogForCategory(0);
    os_log_type_t v13 = 2 * (gSILogLevels[0] < 4);
    if (os_log_type_enabled(v12, v13))
    {
      int v14 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)long long buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = a3;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = a4;
      _os_log_impl(&dword_1BD672000, v12, v13, "size:%d start:%d count:%d", buf, 0x14u);
    }
    *__error() = v11;
    _CreateDeferQueue(a1, (uint64_t *)a2, a3, a4);
    uint64_t v15 = new_live_index(a1, 1, 0);
    si_scheduler_resume(*(void *)(a1 + 936), v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 6537);
    si_scheduler_resume(*(void *)(a1 + 928), v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 6538);
    si_scheduler_resume(*(void *)(a1 + 880), v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 6539);
    si_scheduler_resume(*(void *)(a1 + 872), v28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 6540);
    si_scheduler_resume(*(void *)(a1 + 864), v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 6541);
    if (v15)
    {
      char v16 = si_scheduler_suspend(*(void *)(a1 + 864));
      si_sync_ctx_create_with_defer_fd(a1, 0);
      uint64_t v18 = v17;
      *(unsigned char *)(v17 + 96) = 1;
      if (!*(unsigned char *)(*(void *)v17 + 2429) && !*(unsigned char *)(*(void *)v17 + 2064)) {
        attachJournal((atomic_uint *)v17);
      }
      syncIndex(v18, 0);
      si_scheduler_resume(*(void *)(a1 + 864), v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 6557);
      if ((*(unsigned char *)(a1 + 6578) & 4) != 0) {
        return 1;
      }
      char v19 = atomic_load((unsigned int *)(v15 + 36));
      if ((v19 & 4) != 0) {
        return 1;
      }
      xpc_object_t values = (void *)*(int *)(v15 + 56);
      CFSetRef v20 = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 1, 0);
      setUpOverlay(a1, v20);
      CFRelease(v20);
      char v30 = 0;
      int v21 = (*(_DWORD *)(a1 + 6576) >> 4) & 1;
      *(void *)long long buf = si_compact_lock;
      *(void *)&uint8_t buf[8] = si_compact_unlock;
      *(void *)&uint8_t buf[16] = si_compact_cancel;
      uint64_t v33 = a1;
      int v22 = _CICompact(v15, buf, v21, &v30);
      BOOL v23 = v22 == 0;
      if (!v22 || !v30)
      {
        mergeOverlay(a1, 0);
        return v23;
      }
      si_recycleForBadIndex(a1, v15, "compact err");
    }
    return 0;
  }
  else
  {
    int v24 = *__error();
    int v25 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      int v27 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)long long buf = 136316162;
      *(void *)&uint8_t buf[4] = "SetupDeferQueue";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 6516;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v27;
      LOWORD(v33) = 1024;
      *(_DWORD *)((char *)&v33 + 2) = a3;
      HIWORD(v33) = 1024;
      int v34 = a4;
      _os_log_error_impl(&dword_1BD672000, v25, OS_LOG_TYPE_ERROR, "%s:%d: invalid range - size:%d start:%d count:%d", buf, 0x24u);
    }
    BOOL v23 = 0;
    *__error() = v24;
  }
  return v23;
}

uint64_t handleDeferQueue(uint64_t a1)
{
  int v2 = (pthread_mutex_t *)(a1 + 1312);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1312));
  uint64_t v3 = *(void *)(a1 + 1144);
  uint64_t v4 = *(void *)(a1 + 872);
  if (v4) {
    atomic_fetch_add((atomic_uint *volatile)(v4 + 88), 1u);
  }
  *(void *)(a1 + 1144) = 0;
  *(unsigned char *)(a1 + 2429) = 0;
  *(_OWORD *)(a1 + 1296) = 0u;
  uint64_t DeferJournalFd = getDeferJournalFd(a1, 1);
  dispatch_resume(*(dispatch_object_t *)(v3 + 16));
  int v6 = malloc_type_malloc(0x20uLL, 0x20040DC1BFBCFuLL);
  void *v6 = v3;
  v6[1] = v4;
  v6[2] = DeferJournalFd;
  v6[3] = a1;
  unint64_t v7 = malloc_type_malloc(0x10uLL, 0x20040A4A59CD2uLL);
  *unint64_t v7 = 0;
  v7[1] = v3;
  unsigned int v8 = *(void **)(a1 + 1168);
  if (v8)
  {
    do
    {
      uint64_t v9 = v8;
      unsigned int v8 = (void *)*v8;
    }
    while (v8);
  }
  else
  {
    uint64_t v9 = (void *)(a1 + 1168);
  }
  void *v9 = v7;
  si_enqueue_barrier(v3, (uint64_t)si_deferqueue_cleanup, (uint64_t)v6);
  return pthread_mutex_unlock(v2);
}

uint64_t MergeIndexes(uint64_t a1, int a2, int a3, unsigned int a4, long long **a5, long long *a6, void *a7, uint64_t a8, char *a9, unsigned __int8 a10, unsigned __int8 a11, uint64_t a12)
{
  int v14 = a5;
  unsigned int v15 = a4;
  LODWORD(v16) = a3;
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  unint64_t v19 = a4;
  char v20 = 1;
LABEL_2:
  char v54 = v20;
  unint64_t v53 = v19;
  unsigned int v21 = 0;
  unsigned int v22 = 0;
  BOOL v23 = *v14;
  while (1)
  {
    int v24 = a6;
    a6 = v23;
    if (v24 == v23) {
      break;
    }
    ContentIndexListFree((void **)a7);
    a7 = ContentIndexListClone(a6);
    BOOL v23 = *v14;
    if (a6 == *v14) {
      break;
    }
    BOOL v25 = 0;
LABEL_16:
    if (a6 == v23)
    {
      unsigned int v30 = v15 - v25;
      if (v22 >= v30) {
        unsigned int v31 = v30;
      }
      else {
        unsigned int v31 = v22;
      }
      unsigned int v55 = v31;
      uint64_t v32 = v30 + v16 - v31;
      int v33 = *(_DWORD *)(*(void *)(*a7 + 8 * v32) + 56);
      char v34 = a10 ^ 1;
      if (v30 <= v22) {
        char v34 = 1;
      }
      int v35 = *(_DWORD *)(*(void *)(*a7 + 8 * v32) + 56);
      if ((v34 & 1) == 0)
      {
        int v51 = *__error();
        log = _SILogForLogForCategory(0);
        os_log_type_t type = 2 * (gSILogLevels[0] < 4);
        if (os_log_type_enabled(log, type))
        {
          *(_DWORD *)long long buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v30;
          __int16 v58 = 1024;
          unsigned int v59 = v55;
          _os_log_impl(&dword_1BD672000, log, type, "mergeCount:%d != count:%d", buf, 0xEu);
        }
        *__error() = v51;
        int v35 = *(_DWORD *)(*(void *)(*a7 + 8 * v32) + 56);
      }
      unsigned __int8 v36 = a10;
      if (v30 > v22) {
        unsigned __int8 v36 = 0;
      }
      uint64_t v37 = OuterMerge(a1, v35, v55, v14, (uint64_t)a6, a7, a8, a9, v36, a11, a12);
      uint64_t v38 = v37;
      if (!v37) {
        return v38;
      }
      if (v33 == a2) {
        a2 = *(_DWORD *)(v37 + 56);
      }
      a6 = *v14;
      uint64_t v39 = *((unsigned int *)*v14 + 2);
      if (a2)
      {
        if (!v39)
        {
          LODWORD(v16) = 0;
          a2 = *(_DWORD *)(v37 + 56);
LABEL_45:
          unsigned int v15 = v30 - (v55 - 1);
          if (v16 + v15 > v39)
          {
            uint64_t v43 = __si_assert_copy_extra_625(-1);
            char v44 = v43;
            uint64_t v45 = "";
            if (v43) {
              uint64_t v45 = v43;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 8209, "start+count <= oldIndexSet->indexCount", v45);
LABEL_61:
            free(v44);
            if (__valid_fs(-1)) {
              uint64_t v48 = 2989;
            }
            else {
              uint64_t v48 = 3072;
            }
            *(_DWORD *)uint64_t v48 = -559038737;
            abort();
          }
          if (v39 + v55 - 1 < v21)
          {
            uint64_t v46 = __si_assert_copy_extra_625(-1);
            char v44 = v46;
            uint64_t v47 = "";
            if (v46) {
              uint64_t v47 = v46;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 8210, "oldIndexSet->indexCount+(mergeCount-1) >= preCount", v47);
            goto LABEL_61;
          }
          *(void *)long long buf = a1;
          __checkIndexSetDocIdOrder(a1, (uint64_t *)a6);
          if (v15 < 2)
          {
            int v42 = *v14;
            *(void *)long long buf = a1;
            __checkIndexSetDocIdOrder(a1, (uint64_t *)v42);
            return v38;
          }
          a7 = ContentIndexListClone(a6);
          char v40 = *v14;
          *(void *)long long buf = a1;
          __checkIndexSetDocIdOrder(a1, (uint64_t *)v40);
          char v20 = 0;
          unint64_t v19 = v30 - (v55 - 1);
          if (v53 <= v15) {
            return v38;
          }
          goto LABEL_2;
        }
        uint64_t v16 = 0;
        while (*(_DWORD *)(*(void *)(*(void *)a6 + 8 * v16) + 56) != a2)
        {
          if (v39 == ++v16) {
            goto LABEL_36;
          }
        }
      }
      else
      {
LABEL_36:
        LODWORD(v16) = 0;
      }
      if (v16 >= v39)
      {
        LODWORD(v16) = 0;
        a2 = *(_DWORD *)(v37 + 56);
        if (a2)
        {
          if (v39)
          {
            uint64_t v16 = 0;
            while (*(_DWORD *)(*(void *)(*(void *)a6 + 8 * v16) + 56) != a2)
            {
              if (v39 == ++v16)
              {
                LODWORD(v16) = 0;
                goto LABEL_45;
              }
            }
          }
        }
      }
      goto LABEL_45;
    }
  }
  uint64_t v26 = a1;
  if (!a2 || *(_DWORD *)(*(void *)(*a7 + 8 * v16) + 56) == a2)
  {
LABEL_14:
    unsigned int v21 = *((_DWORD *)a7 + 2);
    int v28 = v16 + v15;
    if (v16 + v15 > v21) {
      goto LABEL_50;
    }
    int v29 = count_IndexSet((uint64_t)a7, v28 - 1, *(_DWORD *)(*(void *)(*a7 + 8 * (v28 - 1)) + 52));
    BOOL v25 = v29 == 0;
    unsigned int v22 = count_IndexSet((uint64_t)a7, v28 - 2, *(_DWORD *)(*(void *)(*a7 + 8 * (v28 - 2)) + 52))
        + v29;
    a1 = v26;
    *(void *)long long buf = v26;
    __checkIndexSetDocIdOrder(v26, a7);
    int v14 = a5;
    BOOL v23 = *a5;
    goto LABEL_16;
  }
  uint64_t v27 = *((unsigned int *)a7 + 2);
  if (!v27)
  {
LABEL_12:
    LODWORD(v16) = 0;
    goto LABEL_14;
  }
  uint64_t v16 = 0;
  while (*(_DWORD *)(*(void *)(*a7 + 8 * v16) + 56) != a2)
  {
    if (v27 == ++v16) {
      goto LABEL_12;
    }
  }
  if (v27 >= v16) {
    goto LABEL_14;
  }
LABEL_50:
  if (v54) {
    ContentIndexListFree((void **)a7);
  }
  return 0;
}

int *si_message_trace_darkwake(int *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    if (a2)
    {
      uint64_t v12 = *(void *)(a2 + 2352);
      os_log_type_t v13 = *(uint64_t (**)(uint64_t, const char *))(v12 + 88);
      if (v13)
      {
        uint64_t v14 = *(void *)(v12 + 144);
        return (int *)v13(v14, "com.apple.spotlight.mds.index-darkwake");
      }
    }
  }
  else if (gSILogLevels[0] >= 5)
  {
    int v15 = *__error();
    uint64_t v16 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 136316162;
      uint64_t v18 = a3;
      __int16 v19 = 1024;
      int v20 = a4;
      __int16 v21 = 2080;
      uint64_t v22 = a5;
      __int16 v23 = 2080;
      uint64_t v24 = a6;
      __int16 v25 = 2048;
      uint64_t v26 = a7;
      _os_log_impl(&dword_1BD672000, v16, OS_LOG_TYPE_DEFAULT, "Not tracing com.apple.spotlight.mds.index-darkwake %s %d %s %s %ld", (uint8_t *)&v17, 0x30u);
    }
    uint64_t result = __error();
    unint64_t *result = v15;
  }
  return result;
}

uint64_t enableProcMon()
{
  getpid();
  pthread_mutex_lock(&sProcMonLock);
  if (sDisableProcMon == 1 && proc_set_cpumon_params() && proc_set_cpumon_defaults())
  {
    int v0 = *__error();
    uint64_t v1 = _SILogForLogForCategory(0);
    os_log_type_t v2 = gSILogLevels[0] < 3;
    if (os_log_type_enabled(v1, (os_log_type_t)(gSILogLevels[0] < 3)))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1BD672000, v1, v2, "*warn* Failed to reset cpumon_params", v4, 2u);
    }
    *__error() = v0;
  }
  --sDisableProcMon;
  return pthread_mutex_unlock(&sProcMonLock);
}

void si_merge_ctx_free(uint64_t a1, char a2)
{
  if (a1)
  {
    uint64_t v4 = *(NSObject **)(a1 + 1056);
    if (v4)
    {
      dispatch_resume(v4);
      dispatch_release(*(dispatch_object_t *)(a1 + 1056));
      *(void *)(a1 + 1056) = 0;
    }
    si_power_info_cleanup(a1 + 1064, *(void *)a1, a2);
    os_log_type_t v5 = *(NSObject **)(a1 + 1112);
    if (v5)
    {
      dispatch_group_leave(*(dispatch_group_t *)(a1 + 1112));
      dispatch_release(v5);
    }
    free((void *)a1);
  }
}

uint64_t OuterMerge(uint64_t a1, int a2, unsigned int a3, long long **a4, uint64_t a5, uint64_t *a6, uint64_t a7, char *a8, unsigned __int8 a9, unsigned __int8 a10, uint64_t a11)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  int v15 = *__error();
  uint64_t v16 = _SILogForLogForCategory(0);
  os_log_type_t v17 = 2 * (gSILogLevels[0] < 4);
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = "false";
    if (a10) {
      uint64_t v18 = "true";
    }
    __int16 v19 = "";
    buf.f_bstd::string::size_type size = 67109634;
    buf.f_iostd::string::size_type size = a3;
    *(uint64_t *)((char *)&buf.f_blocks + 2) = (uint64_t)v18;
    LOWORD(buf.f_blocks) = 2080;
    if (a9) {
      __int16 v19 = "vacuum";
    }
    WORD1(buf.f_bfree) = 2080;
    *(uint64_t *)((char *)&buf.f_bfree + 4) = (uint64_t)v19;
    _os_log_impl(&dword_1BD672000, v16, v17, "Outer Merge - count:%d live:%s %s", (uint8_t *)&buf, 0x1Cu);
  }
  *__error() = v15;
  if (a2 && (uint64_t v20 = *(unsigned int *)(a5 + 8), v20))
  {
    uint64_t v21 = 0;
    while (*(_DWORD *)(*(void *)(*(void *)a5 + 8 * v21) + 56) != a2)
    {
      if (v20 == ++v21) {
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    uint64_t v21 = 0;
  }
  if (a9 && !*(void *)(a1 + 1144))
  {
    uint64_t v76 = __si_assert_copy_extra_625(-1);
    int v77 = v76;
    signed int v78 = "";
    if (v76) {
      signed int v78 = v76;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 7998, "ref->workqueues.queues[SI_DEFER_QUEUE_IDX]", v78);
LABEL_104:
    free(v77);
    if (__valid_fs(-1)) {
      uint64_t v79 = 2989;
    }
    else {
      uint64_t v79 = 3072;
    }
    *(_DWORD *)uint64_t v79 = -559038737;
    abort();
  }
  *(void *)&buf.f_bstd::string::size_type size = a1;
  __checkIndexSetDocIdOrder(a1, a6);
  if (a3)
  {
    uint64_t v22 = 0;
    int v23 = *(_DWORD *)(a1 + 6576) & 1 | 2;
    uint64_t v24 = (uint64_t *)(*(void *)a5 + 8 * v21);
    uint64_t v25 = a3;
    do
    {
      uint64_t v26 = *v24++;
      v22 += ContentIndexCalculateSize(v26, v23);
      --v25;
    }
    while (v25);
  }
  else
  {
    uint64_t v22 = 0;
  }
  bzero(&buf, 0x878uLL);
  if (fstatfs(*(_DWORD *)(a1 + 32), &buf))
  {
    int v27 = *__error();
    int v28 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      int v75 = *__error();
      *(_DWORD *)long long v88 = 136315650;
      *(void *)&v88[4] = "OuterMerge";
      *(_WORD *)&v88[12] = 1024;
      *(_DWORD *)long long v89 = 8018;
      *(_WORD *)&v89[4] = 1024;
      *(_DWORD *)&v89[6] = v75;
      _os_log_error_impl(&dword_1BD672000, v28, OS_LOG_TYPE_ERROR, "%s:%d: error (%d) getting free space", v88, 0x18u);
    }
    *__error() = v27;
    ContentIndexListFree((void **)a6);
    return 0;
  }
  uint64_t v30 = 0x6400000 / buf.f_bsize;
  if (2 * (buf.f_blocks / 0x64) < v30) {
    uint64_t v30 = 2 * (buf.f_blocks / 0x64);
  }
  uint64_t v31 = 5 * (buf.f_blocks / 0x64);
  if (v31 >= 0x20000000 / buf.f_bsize) {
    uint64_t v31 = 0x20000000 / buf.f_bsize;
  }
  if ((*(unsigned char *)(a1 + 6576) & 1) == 0) {
    uint64_t v31 = v30;
  }
  uint64_t v32 = v31 * buf.f_bsize;
  uint64_t v33 = buf.f_bfree * buf.f_bsize;
  if (v33 < v32)
  {
    int v34 = *__error();
    int v35 = _SILogForLogForCategory(0);
    os_log_type_t v36 = gSILogLevels[0] < 3;
    if (os_log_type_enabled(v35, (os_log_type_t)(gSILogLevels[0] < 3)))
    {
      *(_DWORD *)long long v88 = 134218496;
      *(void *)&v88[4] = v22;
      *(_WORD *)&v88[12] = 2048;
      *(void *)long long v89 = v33;
      *(_WORD *)&v89[8] = 2048;
      uint64_t v90 = v32;
      _os_log_impl(&dword_1BD672000, v35, v36, "*warn* Merge canceled - low disk space (%lld %lld %lld)", v88, 0x20u);
    }
    uint64_t v29 = 0;
    *__error() = v34;
    return v29;
  }
  long long v85 = (long long *)a5;
  if (a3 > 8 || a3 >= 2 && v33 < v32 + v22)
  {
    int v37 = *__error();
    uint64_t v38 = _SILogForLogForCategory(0);
    os_log_type_t v39 = 2 * (gSILogLevels[0] < 4);
    if (os_log_type_enabled(v38, v39))
    {
      *(_DWORD *)long long v88 = 134218240;
      *(void *)&v88[4] = v22;
      *(_WORD *)&v88[12] = 2048;
      *(void *)long long v89 = v33;
      _os_log_impl(&dword_1BD672000, v38, v39, "used:%lld, free:%lld", v88, 0x16u);
    }
    unsigned int v40 = (a3 + 1) >> 1;
    unsigned int v41 = 0;
    unsigned int v42 = 0;
    *__error() = v37;
    LODWORD(v43) = v21;
    unsigned int v44 = a3;
    while (1)
    {
      v41 += v40;
      int v45 = v43 + v44 - v41;
      unsigned int v47 = v44 - v41;
      BOOL v46 = v45 < (int)v43 || v47 == 0;
      if (v45 >= (int)v43) {
        unsigned int v47 = 0;
      }
      uint64_t v48 = v47 + v40;
      if (v46) {
        int v49 = v43;
      }
      else {
        int v49 = v45;
      }
      BYTE1(v82) = a10;
      LOBYTE(v82) = 0;
      uint64_t v50 = OuterMerge(a1, *(unsigned int *)(*(void *)(*a6 + 8 * v49) + 56), v48, a4, v85, a6, a7, a8, v82, a11);
      if (!v50)
      {
        int v57 = *__error();
        __int16 v58 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long v88 = 136315394;
          *(void *)&v88[4] = "OuterMerge";
          *(_WORD *)&v88[12] = 1024;
          *(_DWORD *)long long v89 = 8084;
          unsigned int v59 = "%s:%d: Merging failed";
          uint64_t v60 = v58;
          uint32_t v61 = 18;
          goto LABEL_100;
        }
        goto LABEL_88;
      }
      uint64_t v51 = v50;
      if (v45 <= (int)v43 && a2) {
        a2 = *(_DWORD *)(v50 + 56);
      }
      long long v85 = *a4;
      int v52 = ContentIndexListClone(*a4);
      a6 = v52;
      uint64_t v53 = *((unsigned int *)v52 + 2);
      if (!a2) {
        break;
      }
      if (v53)
      {
        uint64_t v43 = 0;
        while (*(_DWORD *)(*(void *)(*v52 + 8 * v43) + 56) != a2)
        {
          if (v53 == ++v43) {
            goto LABEL_55;
          }
        }
        goto LABEL_56;
      }
      uint64_t v43 = 0;
      if (*(_DWORD *)(v51 + 56)) {
        a2 = *(_DWORD *)(v51 + 56);
      }
      else {
        a2 = 0;
      }
LABEL_66:
      if (v43 != v21 && gSILogLevels[0] >= 5)
      {
        int v54 = *__error();
        unsigned int v55 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
        {
          int v56 = *((_DWORD *)a6 + 2);
          *(_DWORD *)long long v88 = 67109632;
          *(_DWORD *)&v88[4] = v21;
          *(_WORD *)&v88[8] = 1024;
          *(_DWORD *)&v88[10] = v43;
          *(_WORD *)long long v89 = 1024;
          *(_DWORD *)&v89[2] = v56;
          _os_log_impl(&dword_1BD672000, v55, OS_LOG_TYPE_DEFAULT, "cindex was added during merge, old start %d new start: %d cindex count:%d", v88, 0x14u);
        }
        *__error() = v54;
      }
      *(void *)long long v88 = a1;
      __checkIndexSetDocIdOrder(a1, a6);
      ++v42;
      unsigned int v44 = a3;
      if (v41 >= a3) {
        goto LABEL_76;
      }
    }
LABEL_55:
    uint64_t v43 = 0;
LABEL_56:
    if (v43 >= v53)
    {
      a2 = *(_DWORD *)(v51 + 56);
      if (a2 && v53)
      {
        uint64_t v43 = 0;
        while (*(_DWORD *)(*(void *)(*v52 + 8 * v43) + 56) != a2)
        {
          if (v53 == ++v43) {
            goto LABEL_62;
          }
        }
      }
      else
      {
LABEL_62:
        uint64_t v43 = 0;
      }
    }
    goto LABEL_66;
  }
  uint64_t v43 = v21;
  unsigned int v42 = a3;
LABEL_76:
  if (a9 && !*(void *)(a1 + 1144))
  {
    long long v80 = __si_assert_copy_extra_625(-1);
    int v77 = v80;
    long long v81 = "";
    if (v80) {
      long long v81 = v80;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 8093, "ref->workqueues.queues[SI_DEFER_QUEUE_IDX]", v81);
    goto LABEL_104;
  }
  uint64_t v62 = *(void *)(*a6 + 8 * v43);
  char v63 = atomic_load((unsigned int *)(v62 + 36));
  if (((v63 & 3) != 0 || *(unsigned char *)(v62 + 15203)) && v43 != *((_DWORD *)a6 + 4))
  {
    uint64_t v29 = InnerMerge(a1, v43, v42, (atomic_ullong *)a4, v85, a6, a7, a8, a9, a10, a11);
    if (v29)
    {
      if (!*(_DWORD *)(a1 + 2420))
      {
        int v70 = *a4;
        *(void *)long long v88 = a1;
        __checkIndexSetDocIdOrder(a1, (uint64_t *)v70);
      }
      if (a9 && *(void *)(a1 + 1144))
      {
        uint64_t v71 = __si_assert_copy_extra_625(-1);
        uint64_t v72 = v71;
        uint64_t v73 = "";
        if (v71) {
          uint64_t v73 = v71;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 8107, "!ref->workqueues.queues[SI_DEFER_QUEUE_IDX]", v73);
        free(v72);
        if (__valid_fs(-1)) {
          uint64_t v74 = 2989;
        }
        else {
          uint64_t v74 = 3072;
        }
        *(_DWORD *)uint64_t v74 = -559038737;
        abort();
      }
    }
  }
  else
  {
    uint64_t v64 = *(void *)(*a6 + 8 * v43);
    char v65 = atomic_load((unsigned int *)(v64 + 36));
    if ((v65 & 3) == 0 && !*(unsigned char *)(v64 + 15203))
    {
      int v66 = *__error();
      int v67 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long v88 = 136315650;
        *(void *)&v88[4] = "OuterMerge";
        *(_WORD *)&v88[12] = 1024;
        *(_DWORD *)long long v89 = 8110;
        *(_WORD *)&v89[4] = 1024;
        *(_DWORD *)&v89[6] = v43;
        _os_log_error_impl(&dword_1BD672000, v67, OS_LOG_TYPE_ERROR, "%s:%d: Failed to merge; index at %d is writable",
          v88,
          0x18u);
      }
      *__error() = v66;
    }
    if (v43 != *((_DWORD *)a6 + 4)) {
      return 0;
    }
    int v57 = *__error();
    int v68 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long v88 = 136315650;
      *(void *)&v88[4] = "OuterMerge";
      *(_WORD *)&v88[12] = 1024;
      *(_DWORD *)long long v89 = 8112;
      *(_WORD *)&v89[4] = 1024;
      *(_DWORD *)&v89[6] = v43;
      unsigned int v59 = "%s:%d: Failed to merge; index at %d is current";
      uint64_t v60 = v68;
      uint32_t v61 = 24;
LABEL_100:
      _os_log_error_impl(&dword_1BD672000, v60, OS_LOG_TYPE_ERROR, v59, v88, v61);
    }
LABEL_88:
    uint64_t v29 = 0;
    *__error() = v57;
  }
  return v29;
}

uint64_t InnerMerge(uint64_t a1, uint64_t a2, unsigned int a3, atomic_ullong *a4, void *a5, uint64_t *a6, uint64_t a7, char *a8, unsigned __int8 a9, unsigned __int8 a10, uint64_t a11)
{
  uint64_t v107 = a7;
  long long v108 = a8;
  long long v111 = a5;
  long long v109 = a4;
  int v110 = a10;
  int v112 = a9;
  uint64_t v134 = *MEMORY[0x1E4F143B8];
  int v115 = 0;
  int v116 = 0;
  ++*(void *)(a1 + 2384);
  asprintf(&v115, "tmp.merge.%ld.", v99);
  *(void *)&v133.f_bstd::string::size_type size = a1;
  __checkIndexSetDocIdOrder(a1, a6);
  int v15 = *__error();
  uint64_t v16 = _SILogForLogForCategory(0);
  os_log_type_t v17 = 2 * (gSILogLevels[0] < 4);
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = "false";
    if (v110) {
      uint64_t v18 = "true";
    }
    __int16 v19 = "";
    v133.f_bstd::string::size_type size = 67109634;
    v133.f_iostd::string::size_type size = a3;
    *(uint64_t *)((char *)&v133.f_blocks + 2) = (uint64_t)v18;
    LOWORD(v133.f_blocks) = 2080;
    if (v112) {
      __int16 v19 = "vacuum";
    }
    WORD1(v133.f_bfree) = 2080;
    *(uint64_t *)((char *)&v133.f_bfree + 4) = (uint64_t)v19;
    _os_log_impl(&dword_1BD672000, v16, v17, "Inner Merge - count:%d live:%s %s", (uint8_t *)&v133, 0x1Cu);
  }
  *__error() = v15;
  unint64_t v20 = 0;
  if (a3)
  {
    int v21 = *(_DWORD *)(a1 + 6576) & 1 | 2;
    uint64_t v22 = (uint64_t *)(*v111 + 8 * a2);
    uint64_t v23 = a3;
    do
    {
      uint64_t v24 = *v22++;
      v20 += ContentIndexCalculateSize(v24, v21);
      --v23;
    }
    while (v23);
  }
  bzero(&v133, 0x878uLL);
  if (fstatfs(*(_DWORD *)(a1 + 32), &v133))
  {
    int v25 = *__error();
    uint64_t v26 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      int v40 = *__error();
      LODWORD(v126[0]) = 136315650;
      *(void *)((char *)v126 + 4) = "InnerMerge";
      WORD6(v126[0]) = 1024;
      *(_DWORD *)((char *)v126 + 14) = 7833;
      WORD1(v126[1]) = 1024;
      DWORD1(v126[1]) = v40;
      _os_log_error_impl(&dword_1BD672000, v26, OS_LOG_TYPE_ERROR, "%s:%d: error (%d) getting free space", (uint8_t *)v126, 0x18u);
    }
    *__error() = v25;
    ContentIndexListFree((void **)a6);
    return 0;
  }
  uint64_t v28 = v133.f_blocks / 0x64;
  unint64_t v29 = 0x6400000 / v133.f_bsize;
  if (2 * (v133.f_blocks / 0x64) < v29) {
    unint64_t v29 = 2 * v28;
  }
  unint64_t v30 = 5 * v28;
  if (v30 >= 0x20000000 / v133.f_bsize) {
    unint64_t v30 = 0x20000000 / v133.f_bsize;
  }
  if ((*(unsigned char *)(a1 + 6576) & 1) == 0) {
    unint64_t v30 = v29;
  }
  uint64_t v31 = v30 * v133.f_bsize;
  uint64_t v32 = v133.f_bfree * v133.f_bsize;
  if (v32 < v31 || v20 > v32 && v20 - v32 < v31 || v32 > v20 && v32 - v20 < v31)
  {
    int v33 = *__error();
    int v34 = _SILogForLogForCategory(0);
    os_log_type_t v35 = gSILogLevels[0] < 3;
    if (os_log_type_enabled(v34, (os_log_type_t)(gSILogLevels[0] < 3)))
    {
      LODWORD(v126[0]) = 134218496;
      *(void *)((char *)v126 + 4) = v20;
      WORD6(v126[0]) = 2048;
      *(void *)((char *)v126 + 14) = v32;
      WORD3(v126[1]) = 2048;
      *((void *)&v126[1] + 1) = v31;
      _os_log_impl(&dword_1BD672000, v34, v35, "*warn* Merge canceled - low disk space (%lld %lld %lld)", (uint8_t *)v126, 0x20u);
    }
    uint64_t v27 = 0;
    *__error() = v33;
    return v27;
  }
  uint64_t v37 = a2;
  if (*(void *)(*(void *)(a1 + 2352) + 96))
  {
    uint64_t v38 = "merge";
    *(void *)&v126[0] = 0;
    if (v112) {
      uint64_t v38 = "vacuum";
    }
    if (v110) {
      os_log_type_t v39 = "live";
    }
    else {
      os_log_type_t v39 = "sync";
    }
    asprintf((char **)v126, "com.apple.spotlightindex.%s.%s.%d", v38, v39, 64 - __clz(v20));
    uint64_t v106 = (*(uint64_t (**)(void, void))(*(void *)(a1 + 2352) + 96))(*(void *)(*(void *)(a1 + 2352) + 144), *(void *)&v126[0]);
    free(*(void **)&v126[0]);
  }
  else
  {
    uint64_t v106 = 0;
  }
  pthread_mutex_lock(&mergeMutex);
  *(_WORD *)(a1 + 2426) = 257;
  pthread_mutex_unlock(&mergeMutex);
  uint64_t v41 = *a6 + 8 * a2;
  uint64_t v42 = *(void *)(v41 + 8 * a3 - 8);
  LODWORD(v43) = *(_DWORD *)(v42 + 68);
  uint64_t v44 = *(void *)(v42 + 80);
  if (v43 >= 2) {
    uint64_t v43 = v43;
  }
  else {
    uint64_t v43 = 0;
  }
  unint64_t v45 = v44 + v43 - *(void *)(*(void *)v41 + 80);
  uint64_t v46 = 8 * a3;
  if (a3)
  {
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    do
    {
      if (v47)
      {
        uint64_t v50 = *(void *)(v41 + v47 - 8);
        uint64_t v49 = *(void *)(v41 + v47);
        LODWORD(v51) = *(_DWORD *)(v50 + 68);
        uint64_t v52 = *(void *)(v50 + 80);
        if (v51 >= 2) {
          uint64_t v51 = v51;
        }
        else {
          uint64_t v51 = 0;
        }
        uint64_t v48 = *(void *)(v49 + 80) + v48 - v52 - v51;
      }
      else
      {
        uint64_t v49 = *(void *)v41;
      }
      uint64_t v53 = atomic_load((unsigned int *)(v49 + 16));
      v48 += v53;
      v47 += 8;
    }
    while (v46 != v47);
  }
  else
  {
    uint64_t v48 = 0;
  }
  if (v45 <= 0xE38E38E || (uint64_t v27 = 0, v112) && v45 - v48 <= 0xCCCCCCB)
  {
    CFIndex v104 = a3;
    uint64_t v105 = a2;
    int v54 = (char *)malloc_type_malloc(0x38uLL, 0x102004034DBE25AuLL);
    int field_id_limit = db_get_field_id_limit(*(int **)(a1 + 1184));
    *(_OWORD *)(v54 + 8) = 0u;
    int v56 = v54 + 8;
    *(_OWORD *)(v54 + 24) = 0u;
    *(_OWORD *)(v54 + 40) = 0u;
    *(void *)int v54 = a1;
    CFIndex v57 = (field_id_limit + 1);
    bit_vector_init((void *)v54 + 1, v57);
    long long v103 = v54;
    bit_vector_init((void *)v54 + 4, v57);
    __int16 v58 = *(int **)(a1 + 1184);
    v121[0] = MEMORY[0x1E4F143A8];
    v121[1] = 0x40000000;
    BOOL v122 = __si_merge_term_filter_ctx_init_block_invoke;
    uint64_t v123 = &__block_descriptor_tmp_702;
    int v124 = v54 + 8;
    int v125 = v54 + 32;
    long long v102 = v54 + 32;
    memset(v126, 0, sizeof(v126));
    unsigned int v59 = db_copy_field_ids_with_buffer(v58, "_kMDItemExternalID", (uint64_t)v126, 8uLL);
    if (v59)
    {
      uint64_t v60 = (long long *)v59;
      if (*v59)
      {
        uint32_t v61 = v59 + 1;
        do
          ((void (*)(void *))v122)(v121);
        while (*v61++);
      }
      if (v60 != v126) {
        free(v60);
      }
    }
    bit_vector_set(v56, *(unsigned int *)(a1 + 2032));
    bit_vector_set(v56, *(unsigned int *)(a1 + 2036));
    bit_vector_set(v56, *(unsigned int *)(a1 + 2040));
    if (gDefaultSchema)
    {
      long long v119 = 0uLL;
      uint64_t v120 = 0;
      v126[0] = xmmword_1E6341350;
      *(void *)&v126[1] = 0;
      _MDPlistContainerGetPlistObjectAtKeyArray();
      *(void *)&v126[0] = MEMORY[0x1E4F143A8];
      *((void *)&v126[0] + 1) = 0x40000000;
      *(void *)&v126[1] = __si_merge_term_filter_ctx_init_block_invoke_2;
      *((void *)&v126[1] + 1) = &__block_descriptor_tmp_708;
      uint64_t v127 = a1;
      unint64_t v128 = (unint64_t)(v54 + 8);
      unsigned int v129 = (uint64_t (*)(void *, unsigned __int8 *, unsigned int))v102;
      long long v117 = v119;
      uint64_t v118 = v120;
      _MDPlistDictionaryIterate();
    }
    char v63 = v54 + 8;
    id_for_int field = db_get_id_for_field(*(int **)(a1 + 1184), "_kMDItemPhotoEmbedding");
    unsigned int v101 = id_for_field;
    long long v102 = v100;
    unsigned int v65 = *(_DWORD *)(a1 + 32);
    v114[0] = MEMORY[0x1E4F143A8];
    v114[1] = 0x40000000;
    v114[2] = __InnerMerge_block_invoke;
    v114[3] = &__block_descriptor_tmp_696;
    v114[4] = a1;
    MEMORY[0x1F4188790](id_for_field);
    bzero(&v100[-((v46 + 15) & 0xFFFFFFFF0)], 8 * a3);
    CFIndex v66 = v104;
    uint64_t v37 = v105;
    if (a3)
    {
      uint64_t v67 = *a6;
      unsigned int v68 = a2;
      uint64_t v69 = &v100[-((v46 + 15) & 0xFFFFFFFF0)];
      CFIndex v70 = v104;
      do
      {
        *v69++ = *(int *)(*(void *)(v67 + 8 * v68++) + 56);
        --v70;
      }
      while (v70);
    }
    CFSetRef v71 = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&v100[-((v46 + 15) & 0xFFFFFFFF0)], v66, 0);
    setUpOverlay(a1, v71);
    CFRelease(v71);
    uint64_t v72 = (uint64_t **)(*a6 + 8 * v37);
    if (v112) {
      uint64_t v73 = (uint64_t *)&v116;
    }
    else {
      uint64_t v73 = 0;
    }
    *(void *)&v126[0] = si_merge_lock;
    *((void *)&v126[0] + 1) = si_merge_unlock;
    *(void *)&v126[1] = si_should_cancel_merge;
    *((void *)&v126[1] + 1) = si_message_trace_lifecycle;
    uint64_t v127 = a1;
    unint64_t v128 = v65;
    uint64_t v74 = v103;
    unsigned int v129 = si_merge_term_filter;
    unsigned int v130 = v103;
    uint64_t v131 = v114;
    uint64_t v132 = v101;
    uint64_t v27 = ContentIndexMergeIndexes(v72, a3, v115, v73, v126);
    int v75 = (const void *)v74[3];
    if (v75)
    {
      CFRelease(v75);
      v74[3] = 0;
    }
    void *v63 = 0;
    v63[1] = 0;
    uint64_t v76 = (const void *)v74[6];
    if (v76) {
      CFRelease(v76);
    }
    free(v74);
    if (v27) {
      SIActivityJournalMergeIndices((os_unfair_lock_s *)(a1 + 2184), a2, a3, v110);
    }
  }
  int v77 = *(_DWORD *)(*(void *)(*a6 + 8 * v37) + 56);
  free(v115);
  if (!v27)
  {
    int v88 = *__error();
    long long v89 = _SILogForLogForCategory(10);
    os_log_type_t v90 = 2 * (dword_1E9FC90CC < 4);
    if (os_log_type_enabled(v89, v90))
    {
      LODWORD(v126[0]) = 136315138;
      *(void *)((char *)v126 + 4) = v107;
      _os_log_impl(&dword_1BD672000, v89, v90, "CIMergeIndex failure at %s", (uint8_t *)v126, 0xCu);
    }
    *__error() = v88;
    free((void *)*a6);
    free(a6);
    goto LABEL_95;
  }
  if (v116) {
    SetupRemapping(a1, (uint64_t)v116);
  }
  if (v112 && !*(void *)(a1 + 1144))
  {
    long long v93 = __si_assert_copy_extra_625(-1);
    long long v94 = v93;
    long long v95 = "";
    if (v93) {
      long long v95 = v93;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 7918, "ref->workqueues.queues[SI_DEFER_QUEUE_IDX]", v95);
LABEL_106:
    free(v94);
    if (__valid_fs(-1)) {
      uint64_t v98 = 2989;
    }
    else {
      uint64_t v98 = 3072;
    }
    *(_DWORD *)uint64_t v98 = -559038737;
    abort();
  }
  unsigned int v78 = a3;
  uint64_t v79 = (uint64_t **)v109;
  char inserted = InsertMergedIndex(a1, v77, a2, v78, v27, v109, (atomic_ullong)v111, a6, v108, v116, v112, v110);
  int v81 = *__error();
  int v82 = _SILogForLogForCategory(10);
  long long v83 = v82;
  if ((inserted & 1) == 0)
  {
    if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v126[0]) = 136315650;
      *(void *)((char *)v126 + 4) = "InnerMerge";
      WORD6(v126[0]) = 1024;
      *(_DWORD *)((char *)v126 + 14) = 7922;
      WORD1(v126[1]) = 2080;
      *(void *)((char *)&v126[1] + 4) = v107;
      _os_log_error_impl(&dword_1BD672000, v83, OS_LOG_TYPE_ERROR, "%s:%d: InsertMergedIndex failed at %s", (uint8_t *)v126, 0x1Cu);
    }
    *__error() = v81;
    free((void *)*a6);
    free(a6);
    ContentIndexDeleteIndex(v27, 1);
LABEL_95:
    pthread_mutex_lock(&mergeMutex);
    *(_WORD *)(a1 + 2426) = 0;
    if (*(_DWORD *)(a1 + 2420)) {
      pthread_cond_broadcast(&mergeCond);
    }
    pthread_mutex_unlock(&mergeMutex);
    mergeOverlay(a1, 0);
    uint64_t v27 = 0;
    uint64_t v87 = 0;
    goto LABEL_98;
  }
  os_log_type_t v84 = 2 * (dword_1E9FC90CC < 4);
  if (os_log_type_enabled(v82, v84))
  {
    LODWORD(v126[0]) = 136315138;
    *(void *)((char *)v126 + 4) = v107;
    _os_log_impl(&dword_1BD672000, v83, v84, "InsertMergedIndex success at %s", (uint8_t *)v126, 0xCu);
  }
  *__error() = v81;
  v113[0] = MEMORY[0x1E4F143A8];
  v113[1] = 0x40000000;
  v113[2] = __InnerMerge_block_invoke_697;
  v113[3] = &__block_descriptor_tmp_699;
  v113[4] = a1;
  v113[5] = v27;
  dispatch_apply(2uLL, 0, v113);
  long long v85 = *v79;
  *(void *)&v126[0] = a1;
  __checkIndexSetDocIdOrder(a1, v85);
  if (v112 && *(void *)(a1 + 1144))
  {
    long long v96 = __si_assert_copy_extra_625(-1);
    long long v94 = v96;
    long long v97 = "";
    if (v96) {
      long long v97 = v96;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 7946, "!ref->workqueues.queues[SI_DEFER_QUEUE_IDX]", v97);
    goto LABEL_106;
  }
  if (v116)
  {
    long long v86 = malloc_type_malloc(0x20uLL, 0x20040DC1BFBCFuLL);
    *long long v86 = a1;
    v86[1] = v27;
    v86[2] = v116;
    v86[3] = a11;
    si_remapForIndex((uint64_t)v86, 0);
  }
  pthread_mutex_lock(&mergeMutex);
  *(_WORD *)(a1 + 2426) = 0;
  if (*(_DWORD *)(a1 + 2420)) {
    pthread_cond_broadcast(&mergeCond);
  }
  pthread_mutex_unlock(&mergeMutex);
  uint64_t v87 = 1;
LABEL_98:
  uint64_t v91 = *(void *)(a1 + 2352);
  uint64_t v92 = *(void (**)(void, uint64_t, uint64_t))(v91 + 104);
  if (v92) {
    v92(*(void *)(v91 + 144), v106, v87);
  }
  return v27;
}

void bit_vector_init(void *a1, CFIndex capacity)
{
  if (!a1)
  {
    uint64_t v9 = __si_assert_copy_extra_625(-1);
    uint64_t v10 = v9;
    int v11 = "";
    if (v9) {
      int v11 = v9;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "bit_vector.h", 41, "bv", v11);
    free(v10);
    if (__valid_fs(-1)) {
      uint64_t v12 = 2989;
    }
    else {
      uint64_t v12 = 3072;
    }
    *(_DWORD *)uint64_t v12 = -559038737;
    abort();
  }
  *a1 = 0;
  a1[1] = capacity;
  if (capacity)
  {
    Mutable = CFBitVectorCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], capacity);
    a1[2] = Mutable;
    CFBitVectorSetCount(Mutable, capacity);
    if (!a1[2])
    {
      os_log_type_t v5 = __si_assert_copy_extra_625(-1);
      int v6 = v5;
      unint64_t v7 = "";
      if (v5) {
        unint64_t v7 = v5;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "bit_vector.h", 47, "bv->_cfbv", v7);
      free(v6);
      if (__valid_fs(-1)) {
        uint64_t v8 = 2989;
      }
      else {
        uint64_t v8 = 3072;
      }
      *(_DWORD *)uint64_t v8 = -559038737;
      abort();
    }
  }
  else
  {
    a1[2] = 0;
  }
}

void __si_merge_term_filter_ctx_init_block_invoke(uint64_t a1, CFIndex idx)
{
  CFIndex v3 = idx;
  bit_vector_set(*(void **)(a1 + 32), idx);
  uint64_t v4 = *(void **)(a1 + 40);
  bit_vector_set(v4, v3);
}

void bit_vector_set(void *a1, CFIndex idx)
{
  CFIndex v4 = a1[1];
  if (v4 <= idx)
  {
    if (v4) {
      CFIndex v6 = a1[1];
    }
    else {
      CFIndex v6 = 32;
    }
    while (1)
    {
      v6 *= 2;
      if (v6 > idx) {
        break;
      }
      if (v6 <= v4)
      {
        unint64_t v7 = __si_assert_copy_extra_625(-1);
        uint64_t v8 = v7;
        uint64_t v9 = "";
        if (v7) {
          uint64_t v9 = v7;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "bit_vector.h", 111, "newCapacity > bv->capacity", v9);
        goto LABEL_15;
      }
    }
    CFBitVectorRef v11 = (const __CFBitVector *)a1[2];
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (v11) {
      MutableCopy = CFBitVectorCreateMutableCopy(v12, v6, v11);
    }
    else {
      MutableCopy = CFBitVectorCreateMutable(v12, v6);
    }
    uint64_t v14 = MutableCopy;
    if (!MutableCopy)
    {
      uint64_t v16 = __si_assert_copy_extra_625(-1);
      uint64_t v8 = v16;
      os_log_type_t v17 = "";
      if (v16) {
        os_log_type_t v17 = v16;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "bit_vector.h", 115, "newBV", v17);
LABEL_15:
      free(v8);
      if (__valid_fs(-1)) {
        uint64_t v10 = 2989;
      }
      else {
        uint64_t v10 = 3072;
      }
      *(_DWORD *)uint64_t v10 = -559038737;
      abort();
    }
    CFBitVectorSetCount(MutableCopy, v6);
    int v15 = (const void *)a1[2];
    if (v15) {
      CFRelease(v15);
    }
    a1[1] = v6;
    a1[2] = v14;
  }
  if (*a1 <= idx) {
    *a1 = idx + 1;
  }
  os_log_type_t v5 = (__CFBitVector *)a1[2];
  CFBitVectorSetBitAtIndex(v5, idx, 1u);
}

void __si_merge_term_filter_ctx_init_block_invoke_2(uint64_t a1, char *a2, uint64_t a3, long long *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  long long v24 = 0uLL;
  uint64_t v25 = 0;
  long long v26 = *a4;
  *(void *)&long long v27 = *((void *)a4 + 2);
  if (_MDPlistDictionaryGetPlistObjectForKey())
  {
    long long v26 = v24;
    *(void *)&long long v27 = v25;
    if (_MDPlistGetPlistObjectType() == 225)
    {
      long long v26 = v24;
      *(void *)&long long v27 = v25;
      if (_MDPlistBooleanGetValue())
      {
        unint64_t v7 = *(int **)(*(void *)(a1 + 32) + 1184);
        v20[0] = MEMORY[0x1E4F143A8];
        v20[1] = 0x40000000;
        int v21 = __si_merge_term_filter_ctx_init_block_invoke_3;
        uint64_t v22 = &__block_descriptor_tmp_705;
        long long v23 = *(_OWORD *)(a1 + 40);
        long long v26 = 0u;
        long long v27 = 0u;
        uint64_t v8 = db_copy_field_ids_with_buffer(v7, a2, (uint64_t)&v26, 8uLL);
        if (v8)
        {
          uint64_t v9 = (long long *)v8;
          if (*v8)
          {
            uint64_t v10 = v8 + 1;
            do
              ((void (*)(void *))v21)(v20);
            while (*v10++);
          }
LABEL_16:
          if (v9 != &v26) {
            free(v9);
          }
        }
      }
    }
  }
  else
  {
    long long v26 = *a4;
    *(void *)&long long v27 = *((void *)a4 + 2);
    if (_MDPlistDictionaryGetPlistObjectForKey())
    {
      long long v26 = v24;
      *(void *)&long long v27 = v25;
      if (_MDPlistGetPlistObjectType() == 225)
      {
        long long v26 = v24;
        *(void *)&long long v27 = v25;
        if (_MDPlistBooleanGetValue())
        {
          CFAllocatorRef v12 = *(int **)(*(void *)(a1 + 32) + 1184);
          v16[0] = MEMORY[0x1E4F143A8];
          v16[1] = 0x40000000;
          os_log_type_t v17 = __si_merge_term_filter_ctx_init_block_invoke_4;
          uint64_t v18 = &__block_descriptor_tmp_706;
          uint64_t v19 = *(void *)(a1 + 40);
          long long v26 = 0u;
          long long v27 = 0u;
          os_log_type_t v13 = db_copy_field_ids_with_buffer(v12, a2, (uint64_t)&v26, 8uLL);
          if (v13)
          {
            uint64_t v9 = (long long *)v13;
            if (*v13)
            {
              uint64_t v14 = v13 + 1;
              do
                ((void (*)(void *))v17)(v16);
              while (*v14++);
            }
            goto LABEL_16;
          }
        }
      }
    }
  }
}

uint64_t __InnerMerge_block_invoke(uint64_t a1, uint64_t a2)
{
  return _si_next_index_id(*(os_unfair_lock_s **)(a1 + 32), a2, 1, 0);
}

uint64_t setUpOverlay(uint64_t result, const void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (*(void *)(result + 6616))
  {
    CFIndex v3 = (uint64_t *)result;
    CFIndex v4 = (atomic_uint *)(result + 1444);
    atomic_fetch_add((atomic_uint *volatile)(result + 1444), 1u);
    os_log_type_t v5 = si_scheduler_suspend(*(void *)(result + 872));
    atomic_fetch_add(v4, 0xFFFFFFFF);
    CFIndex v6 = si_scheduler_suspend(v3[108]);
    unint64_t v7 = (char *)malloc_type_calloc(1uLL, 0x1D8uLL, 0x103004099AB8BE7uLL);
    atomic_store(1u, (unsigned int *)v7);
    *((void *)v7 + 26) = 2;
    memset(&v9, 0, sizeof(v9));
    pthread_rwlockattr_init(&v9);
    pthread_rwlock_init((pthread_rwlock_t *)(v7 + 240), &v9);
    pthread_rwlock_init((pthread_rwlock_t *)(v7 + 8), &v9);
    pthread_rwlockattr_destroy(&v9);
    v3[828] = (uint64_t)v7;
    v3[829] = (uint64_t)CFRetain(a2);
    si_scheduler_resume(v3[109], v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 8330);
    uint64_t v8 = v3[108];
    return si_scheduler_resume(v8, v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 8331);
  }
  return result;
}

uint64_t SetupRemapping(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  unsigned int v25 = 0;
  uint64_t result = fd_setDir(*(unsigned int *)(a1 + 32), (int *)&v25);
  if (result)
  {
    bzero(__str, 0x400uLL);
    uint64_t v5 = 51;
    while (1)
    {
      uint64_t v6 = *(void *)(a1 + 2376);
      *(void *)(a2 + 40) = v6;
      *(void *)(a1 + 2376) = v6 + 1;
      snprintf(__str, 0x400uLL, "remapping%ld", v6);
      unint64_t v7 = (atomic_uint *)fd_create_protected(*(_DWORD *)(a1 + 32), __str, 536873474, 3u);
      uint64_t v24 = 0;
      uint64_t v8 = _fd_acquire_fd((uint64_t)v7, &v24);
      if (v8 != -1) {
        break;
      }
      fd_release(v7);
      if (!--v5)
      {
        int v9 = *__error();
        uint64_t v10 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unint64_t v29 = 136315650;
          *(void *)&v29[4] = "SetupRemapping";
          *(_WORD *)&v29[12] = 1024;
          *(_DWORD *)&v29[14] = 6615;
          *(_WORD *)&v29[18] = 2080;
          *(void *)&v29[20] = __str;
          _os_log_error_impl(&dword_1BD672000, v10, OS_LOG_TYPE_ERROR, "%s:%d: open remp failed: %s", v29, 0x1Cu);
        }
        *__error() = v9;
        goto LABEL_16;
      }
    }
    uint64_t v11 = v8;
    uint64_t v12 = **(void **)(a2 + 16);
    int v26 = 268435454;
    unsigned int v27 = v12;
    prot_pwrite_guarded(v8, (uint64_t)&v24, (uint64_t)&v26, 4uLL, 0);
    prot_pwrite_guarded(v11, (uint64_t)&v24, a2 + 32, 8uLL, 4);
    prot_pwrite_guarded(v11, (uint64_t)&v24, (uint64_t)&v27, 4uLL, 12);
    if (v27)
    {
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      uint64_t v15 = 16;
      do
      {
        uint64_t v16 = (long long *)(*(void *)(*(void *)(a2 + 16) + 8) + v13);
        long long v17 = *v16;
        *(void *)&v29[16] = *((void *)v16 + 2);
        *(_OWORD *)unint64_t v29 = v17;
        prot_pwrite_guarded(v11, (uint64_t)&v24, (uint64_t)v29, 8uLL, v15);
        prot_pwrite_guarded(v11, (uint64_t)&v24, (uint64_t)&v29[8], 4uLL, v15 + 8);
        uint64_t v18 = v15 + 12;
        uint64_t v19 = prot_pwrite_guarded(v11, (uint64_t)&v24, *(uint64_t *)&v29[16], 4 * *(unsigned int *)&v29[8], v18);
        if (v19 != 4 * *(unsigned int *)&v29[8])
        {
          int v20 = *__error();
          int v21 = _SILogForLogForCategory(0);
          os_log_type_t v22 = gSILogLevels[0] < 3;
          if (os_log_type_enabled(v21, (os_log_type_t)(gSILogLevels[0] < 3)))
          {
            *(_WORD *)statfs buf = 0;
            _os_log_impl(&dword_1BD672000, v21, v22, "*warn* Failed writing remapping data. Will cause index corruption if remapping fails.", buf, 2u);
          }
          *__error() = v20;
          uint64_t v19 = 4 * *(unsigned int *)&v29[8];
        }
        uint64_t v15 = v19 + v18;
        ++v14;
        v13 += 24;
      }
      while (v14 < v27);
    }
    _fd_release_fd(v7, v11, 0, v24);
    fd_release(v7);
LABEL_16:
    int v23 = v25;
    uint64_t result = MEMORY[0x1C1882290](v25);
    if ((v23 & 0x80000000) == 0) {
      return close(v23);
    }
  }
  return result;
}

uint64_t InsertMergedIndex(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, atomic_ullong *a6, atomic_ullong a7, void *a8, char *a9, const void *a10, char a11, char a12)
{
  uint64_t v14 = a5;
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = (const char *)(a5 + 15208);
  bzero(v93, 0x208uLL);
  __statfs buf = 0x6D6F76650A00;
  v93[4] = a12;
  int v94 = a3;
  unsigned int v95 = a4;
  int v20 = *((_DWORD *)a8 + 2) - a3;
  int v96 = a4 + a3;
  int v97 = v20;
  strncpy(v99, v19, 0xFFuLL);
  if (!v99[0]) {
    return 0;
  }
  int v82 = a6;
  pthread_mutex_lock(&mergeMutex);
  *(unsigned char *)(a1 + 2427) = 0;
  if (*(_DWORD *)(a1 + 2420)) {
    pthread_cond_broadcast(&mergeCond);
  }
  pthread_mutex_unlock(&mergeMutex);
  atomic_fetch_add((atomic_uint *volatile)(a1 + 1444), 1u);
  long long v83 = si_scheduler_suspend(*(void *)(a1 + 872));
  atomic_fetch_add((atomic_uint *volatile)(a1 + 1444), 0xFFFFFFFF);
  pthread_mutex_lock(&mergeMutex);
  *(unsigned char *)(a1 + 2427) = 1;
  pthread_mutex_unlock(&mergeMutex);
  int v21 = *__error();
  os_log_type_t v22 = _SILogForLogForCategory(0);
  os_log_type_t v23 = 2 * (gSILogLevels[0] < 4);
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = *(void *)(a1 + 1376);
    int v25 = *(_DWORD *)(v24 + 8);
    LODWORD(v24) = *(_DWORD *)(v24 + 16);
    *(_DWORD *)statfs buf = 134218496;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v25;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v24;
    _os_log_impl(&dword_1BD672000, v22, v23, "InsertMergedIndex %p live count %d current %d", buf, 0x18u);
  }
  *__error() = v21;
  uint64_t v26 = a4;
  if (!_CIMergeDeletes(v14, (uint64_t)a10, *a8 + 8 * a3, a4))
  {
    mergeOverlay(a1, 0);
    uint64_t v35 = *(void *)(a1 + 872);
    os_log_type_t v36 = v83;
    int v37 = 7276;
LABEL_30:
    si_scheduler_resume(v35, v36, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", v37);
    return 0;
  }
  long long v80 = si_scheduler_suspend(*(void *)(a1 + 864));
  uint64_t v81 = v14;
  if (_os_feature_enabled_impl())
  {
    uint64_t v27 = *(void *)(a1 + 1384);
    uint64_t v28 = *(void *)(a1 + 1376);
    if (v27)
    {
      if (*(_DWORD *)(v27 + 8))
      {
        unint64_t v29 = 0;
        do
          __InsertMergedIndex_block_invoke(*(void *)(*(void *)v27 + 8 * v29++));
        while (v29 < *(unsigned int *)(v27 + 8));
      }
      uint64_t v14 = v81;
    }
    if (v28 && *(_DWORD *)(v28 + 8))
    {
      unint64_t v30 = 0;
      do
        __InsertMergedIndex_block_invoke(*(void *)(*(void *)v28 + 8 * v30++));
      while (v30 < *(unsigned int *)(v28 + 8));
    }
  }
  uint64_t v91 = 0;
  long long v89 = 0u;
  long long v90 = 0u;
  memset(buf, 0, sizeof(buf));
  int v87 = 0;
  ContentIndexSyncIndex(v14, (uint64_t)buf, (uint64_t)&v87);
  if (!*(unsigned char *)(v14 + 8))
  {
    mergeOverlay(a1, 0);
    si_scheduler_resume(*(void *)(a1 + 872), v83, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 7301);
    uint64_t v35 = *(void *)(a1 + 864);
    os_log_type_t v36 = v80;
    int v37 = 7302;
    goto LABEL_30;
  }
  uint64_t v31 = 0;
  uint64_t v32 = a3;
  long long v89 = 0u;
  long long v90 = 0u;
  memset(buf, 0, sizeof(buf));
  do
  {
    *(void *)&buf[v31] = si_scheduler_suspend(*(void *)(a1 + v31 + 880));
    v31 += 8;
  }
  while (v31 != 64);
  atomic_ullong v33 = *v82;
  if (*v82 == a7)
  {
    atomic_ullong v33 = a7;
  }
  else
  {
    free((void *)*a8);
    free(a8);
    a8 = ContentIndexListClone((long long *)v33);
    if (a2 && (uint64_t v34 = *(unsigned int *)(v33 + 8), v34))
    {
      a3 = 0;
      while (*(_DWORD *)(*(void *)(*(void *)v33 + 8 * a3) + 56) != a2)
      {
        if (v34 == ++a3) {
          goto LABEL_26;
        }
      }
    }
    else
    {
LABEL_26:
      a3 = 0;
    }
    uint64_t v32 = a3;
  }
  if (*(_DWORD *)(*(void *)(*(void *)v33 + 8 * v32) + 56) != a2)
  {
    si_scheduler_resume(*(void *)(a1 + 872), v83, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 7328);
    si_scheduler_resume(*(void *)(a1 + 864), v80, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 7329);
    uint64_t v47 = 0;
    uint64_t v48 = a1 + 880;
    do
    {
      si_scheduler_resume(*(void *)(v48 + v47), *(void **)&buf[v47], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 7332);
      v47 += 8;
    }
    while (v47 != 64);
    return 0;
  }
  os_log_type_t v39 = ContentIndexListClone(0);
  if (a10)
  {
    Mutable = *(__CFArray **)(a1 + 2360);
    if (!Mutable)
    {
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      *(void *)(a1 + 2360) = Mutable;
    }
    CFArrayAppendValue(Mutable, a10);
  }
  uint64_t v85 = v33;
  if (a4)
  {
    unsigned int v41 = a3;
    do
    {
      ContentIndexListAppend((uint64_t)v39, *(void *)(*a8 + 8 * v41));
      *(void *)(*a8 + 8 * v41++) = 0;
      --v26;
    }
    while (v26);
  }
  *(void *)(*a8 + 8 * v32) = v81;
  uint64_t v42 = *((unsigned int *)a8 + 2);
  if (a3 + a4 < v42)
  {
    unsigned int v43 = a3 + 1;
    uint64_t v44 = a3 + a4;
    do
      *(void *)(*a8 + 8 * v43++) = *(void *)(*a8 + 8 * v44++);
    while (v42 != v44);
  }
  if (a12)
  {
    unint64_t v45 = (unsigned int *)(a8 + 2);
    unsigned int v46 = *((_DWORD *)a8 + 4);
LABEL_54:
    if (v46 != -1 && v46 > a3) {
      *unint64_t v45 = v46 - a4 + 1;
    }
    *((_DWORD *)a8 + 2) = v42 - a4 + 1;
    goto LABEL_61;
  }
  unsigned int v46 = *(_DWORD *)(*(void *)(a1 + 1384) + 16);
  unint64_t v45 = (unsigned int *)(a8 + 2);
  if (v46 == -1) {
    *unint64_t v45 = -1;
  }
  else {
    unsigned int v46 = *v45;
  }
  if (v46 != a3 + a4 - 1) {
    goto LABEL_54;
  }
  *((_DWORD *)a8 + 4) = -1;
  *((_DWORD *)a8 + 2) = v42 - a4 + 1;
LABEL_61:
  si_clone_index_metadata_to_inflight(a1);
  create_scan_touch_file(*(unsigned int *)(a1 + 32), 0);
  int v50 = si_openat_protected(*(unsigned int *)(a1 + 32), "tmp.movePlan", 1538, 3);
  pwrite(v50, &__buf, 0x210uLL, 0);
  fcntl(v50, 85);
  unsigned int v51 = 0;
  while (1)
  {
    unsigned int v52 = v51;
    unsigned int v53 = *((_DWORD *)v39 + 2);
    if (v51 >= v53) {
      break;
    }
    char v54 = perform_victim_rename(v51, v39);
    unsigned int v51 = v52 + 1;
    if ((v54 & 1) == 0)
    {
      if (*((_DWORD *)v39 + 2))
      {
        unint64_t v55 = 0;
        do
          ContentIndexDeleteIndex(*(void *)(*v39 + 8 * v55++), 0);
        while (v55 < *((unsigned int *)v39 + 2));
      }
      break;
    }
  }
  if (a4 >= 2)
  {
    int v98 = 1;
    pwrite(v50, &__buf, 0x210uLL, 0);
    fcntl(v50, 85);
    uint64_t v56 = (a3 + 1);
    unsigned int v57 = *((_DWORD *)a8 + 2);
    if (v56 < v57)
    {
      LOBYTE(v58) = 1;
      do
      {
        while ((v58 & 1) == 0)
        {
          LOBYTE(v58) = 0;
          uint64_t v56 = (v56 + 1);
          if (v56 >= v57) {
            goto LABEL_87;
          }
        }
        int v58 = perform_renumber_rename(v56, a8, &__buf, v50, a9);
        unsigned int v57 = *((_DWORD *)a8 + 2);
        uint64_t v56 = (v56 + 1);
      }
      while (v56 < v57);
      if (!v58) {
        goto LABEL_87;
      }
    }
  }
  int v98 = 2;
  pwrite(v50, &__buf, 0x210uLL, 0);
  fcntl(v50, 85);
  if (!rename_new_index(v81, a9, a3))
  {
LABEL_87:
    if ((v50 & 0x80000000) == 0) {
      close(v50);
    }
    si_makeUnavailable(a1, 22, 0, 25, "Failure renaming index");
    return 0;
  }
  int v98 = 3;
  pwrite(v50, &__buf, 0x210uLL, 0);
  fcntl(v50, 85);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = __InsertMergedIndex_block_invoke_3;
  aBlock[3] = &__block_descriptor_tmp_729;
  aBlock[4] = a1;
  aBlock[5] = v81;
  ContentIndexSetDirtyCallback(v81, aBlock);
  *(unsigned char *)(v81 + 15201) = 4;
  if (!si_swapIndexSet((int *)a1, v85, (unint64_t)a8, v82, v59, v60, v61, v62))
  {
    uint64_t v76 = __si_assert_copy_extra_625(-1);
    int v77 = v76;
    unsigned int v78 = "";
    if (v76) {
      unsigned int v78 = v76;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 7452, "si_swapIndexSet(ref, oldIndexSet, indexSet, indexSetPtr,1, live)", v78);
    free(v77);
    if (__valid_fs(-1)) {
      uint64_t v79 = 2989;
    }
    else {
      uint64_t v79 = 3072;
    }
    *(_DWORD *)uint64_t v79 = -559038737;
    abort();
  }
  ++*(_DWORD *)(a1 + 1392);
  unsigned int v63 = *(_DWORD *)(*(void *)(a1 + 1384) + 8);
  if (*(_DWORD *)(a1 + 1232) > v63) {
    *(_DWORD *)(a1 + 1232) = v63;
  }
  if (*(_DWORD *)(a1 + 1240) > v63) {
    *(_DWORD *)(a1 + 1240) = v63;
  }
  unsigned int v64 = *(_DWORD *)(*(void *)(a1 + 1376) + 8);
  if (*(_DWORD *)(a1 + 1236) > v64) {
    *(_DWORD *)(a1 + 1236) = v64;
  }
  if (*(_DWORD *)(a1 + 1244) > v64) {
    *(_DWORD *)(a1 + 1244) = v64;
  }
  _CIMetaInfoSync(a1 + 1192, gTerminating == 0);
  si_set_obj_state((os_unfair_lock_s *)a1, v81);
  LODWORD(v65) = *((_DWORD *)v39 + 2);
  if (v52 < v53)
  {
    char v66 = a11;
    goto LABEL_93;
  }
  char v66 = a11;
  if (v65)
  {
    unint64_t v67 = 0;
    do
    {
      ContentIndexDeleteIndex(*(void *)(*v39 + 8 * v67++), 0);
      unint64_t v65 = *((unsigned int *)v39 + 2);
    }
    while (v67 < v65);
LABEL_93:
    if (v65)
    {
      unint64_t v68 = 0;
      do
      {
        uint64_t v69 = malloc_type_malloc(0x10uLL, 0x20040A4A59CD2uLL);
        v69[1] = a1;
        *uint64_t v69 = *(void *)(*v39 + 8 * v68);
        uint64_t v70 = *(void *)(a1 + 1096);
        qos_class_t v71 = qos_class_self();
        si_enqueue_work_with_qos(v70, v71, (uint64_t)si_freeIndex0, (uint64_t)v69);
        ++v68;
      }
      while (v68 < *((unsigned int *)v39 + 2));
    }
  }
  free((void *)*v39);
  free(v39);
  if (v66) {
    handleDeferQueue(a1);
  }
  if (a10)
  {
    si_sync_ctx_create_with_defer_fd(a1, 0);
    uint64_t v73 = v72;
    *(unsigned char *)(v72 + 96) = 1;
    if (!*(unsigned char *)(*(void *)v72 + 2429) && !*(unsigned char *)(*(void *)v72 + 2064)) {
      attachJournal((atomic_uint *)v72);
    }
    syncIndex(v73, 0);
  }
  uint64_t v74 = 0;
  do
  {
    si_scheduler_resume(*(void *)(a1 + 8 * v74 + 936), *((void **)&v90 + v74 + 1), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 7512);
    unint64_t v75 = v74 + 9;
    --v74;
  }
  while (v75 > 2);
  si_scheduler_resume(*(void *)(a1 + 864), v80, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 7515);
  mergeOverlay(a1, v81);
  db_scan_lost_ids(*(int **)(a1 + 1184), 0, a1);
  unlinkat(*(_DWORD *)(a1 + 32), "rescan_needed", 2048);
  si_scheduler_resume(*(void *)(a1 + 872), v83, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 7521);
  unlinkat(*(_DWORD *)(a1 + 32), "tmp.spotlight.state.transition", 2048);
  unlinkat(*(_DWORD *)(a1 + 32), "tmp.movePlan", 2048);
  close(v50);
  return 1;
}

void mergeOverlay(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 6624);
  if (v2)
  {
    uint64_t v5 = (void *)(a1 + 6624);
    uint64_t v6 = *(void *)(a1 + 6632);
    uint64_t v7 = *(void *)(a1 + 1376);
    uint64_t v8 = *(void *)(a1 + 1384);
    int v9 = (atomic_uint *)(a1 + 1444);
    atomic_fetch_add((atomic_uint *volatile)(a1 + 1444), 1u);
    uint64_t v10 = si_scheduler_suspend(*(void *)(a1 + 872));
    atomic_fetch_add(v9, 0xFFFFFFFF);
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 0x40000000;
    void v17[2] = __mergeOverlay_block_invoke;
    v17[3] = &__block_descriptor_tmp_253;
    v17[4] = a2;
    v17[5] = v8;
    v17[6] = v6;
    v17[7] = v7;
    directoryOverlayProcessPaths(v2, (uint64_t)v17);
    uint64_t v11 = si_scheduler_suspend(*(void *)(a1 + 864));
    *uint64_t v5 = 0;
    v5[1] = 0;
    si_scheduler_resume(*(void *)(a1 + 872), v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 8373);
    si_scheduler_resume(*(void *)(a1 + 864), v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 8374);
    uint64_t v12 = *(NSObject **)(*(void *)(a1 + 864) + 152);
    uint64_t v13 = *(NSObject **)(*(void *)(a1 + 928) + 152);
    uint64_t v14 = *(NSObject **)(*(void *)(a1 + 936) + 152);
    uint64_t v15 = *(NSObject **)(*(void *)(a1 + 880) + 152);
    dispatch_retain(v13);
    dispatch_retain(v12);
    dispatch_retain(v15);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __mergeOverlay_block_invoke_2;
    block[3] = &__block_descriptor_tmp_258;
    block[4] = v13;
    block[5] = v15;
    block[6] = v12;
    block[7] = v2;
    block[8] = v6;
    dispatch_barrier_async(v14, block);
  }
}

void __InnerMerge_block_invoke_697(uint64_t a1, uint64_t a2)
{
  makeThreadId();
  if (a2 == 1)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    index_optimize_disk_space(v5);
  }
  else if (!a2)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    recalculateTopK(v4);
  }
}

void si_remapForIndex(uint64_t a1, int a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    uint64_t v3 = *(void *)a1;
    uint64_t v4 = (void *)os_transaction_create();
    unsigned int v33 = 0;
    if (fd_setDir(*(unsigned int *)(v3 + 32), (int *)&v33))
    {
      unint64_t v32 = 0;
      while (1)
      {
        unint64_t v5 = ContentIndexRemappingNextDocId(*(void **)(a1 + 16), &v32);
        if (!v5) {
          break;
        }
        uint64_t v6 = v5;
        si_suspend_if_bad_time(v3, *(void *)(a1 + 24));
        unint64_t v7 = v32;
        if (v6 == v32)
        {
          *(void *)(*(void *)(a1 + 16) + 24) = v6 + 1;
        }
        else
        {
          unint64_t v8 = _CIGetOIDForDocId(*(void *)(a1 + 8), v6, 0);
          uint64_t v31 = 0;
          if (**(_DWORD **)(v3 + 6584))
          {
            int v17 = *__error();
            uint64_t v18 = _SILogForLogForCategory(0);
            os_log_type_t v19 = 2 * (gSILogLevels[0] < 4);
            if (os_log_type_enabled(v18, v19))
            {
              *(_WORD *)statfs buf = 0;
              _os_log_impl(&dword_1BD672000, v18, v19, "remapping canceled", buf, 2u);
            }
            *__error() = v17;
            goto LABEL_31;
          }
          if (db_get_obj(*(_DWORD **)(v3 + 1184), v8, &v31, 0))
          {
            *(void *)(*(void *)(a1 + 16) + 24) = v7 + 1;
          }
          else
          {
            int v9 = v31;
            if (*((void *)v31 + 4) == v7)
            {
              uint64_t v10 = *(void *)(a1 + 16);
              v30[0] = v7 + 1;
              v30[1] = v10;
              *((void *)v31 + 4) = v6;
              uint64_t v11 = *(int **)(v3 + 1184);
              if (*v11 != 1685287992)
              {
                int v24 = *__error();
                int v25 = _SILogForLogForCategory(4);
                if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
                {
                  int v26 = *v11;
                  *(_DWORD *)statfs buf = 136315650;
                  uint64_t v35 = "db_update_obj_callback";
                  __int16 v36 = 1024;
                  int v37 = 323;
                  __int16 v38 = 1024;
                  int v39 = v26;
                  _os_log_error_impl(&dword_1BD672000, v25, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
                }
                *__error() = v24;
                uint64_t v27 = __si_assert_copy_extra_329();
                uint64_t v28 = v27;
                if (v27) {
                  unint64_t v29 = v27;
                }
                else {
                  unint64_t v29 = "";
                }
                __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 323, v29);
                free(v28);
                MEMORY[0xBAD] = -559038737;
                abort();
              }
              int updated = db2_update_obj_callback(*(void *)(v3 + 1184), (uint64_t)v9, 0, (void (*)(uint64_t, uint64_t, uint64_t))remap_update_callback, (uint64_t)v30);
              if (updated && dword_1E9FC90C0 >= 5)
              {
                int v13 = updated;
                int v14 = *__error();
                uint64_t v15 = _SILogForLogForCategory(7);
                if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)statfs buf = 67109120;
                  LODWORD(v35) = v13;
                  _os_log_impl(&dword_1BD672000, v15, OS_LOG_TYPE_DEFAULT, "Updating item for remap failed with error %d", buf, 8u);
                }
                *__error() = v14;
              }
              int v9 = v31;
            }
            else
            {
              *(void *)(*(void *)(a1 + 16) + 24) = v7 + 1;
            }
            free(v9);
          }
        }
      }
      if (!**(_DWORD **)(v3 + 6584))
      {
        db_perform_callback(*(void *)(v3 + 1184), (void (*)(uint64_t))si_removeRemapping, a1);
        uint64_t v16 = db_shrink_cache(*(void *)(v3 + 1184));
        if (v16)
        {
          si_makeUnavailable(v3, v16, 0, 3, "Failure in db_shrink_cache at si_remapForIndex");
        }
        else
        {
          si_sync_ctx_create_with_defer_fd(v3, 0);
          uint64_t v21 = v20;
          *(unsigned char *)(v20 + 96) = 1;
          if (!*(unsigned char *)(*(void *)a1 + 2064)) {
            attachJournal((atomic_uint *)v20);
          }
          *(void *)(v21 + 40) = si_os_release_routine;
          os_retain(v4);
          *(void *)(v21 + 48) = v4;
          uint64_t v22 = *(void *)a1;
          if (*(unsigned char *)(*(void *)a1 + 2064))
          {
            flushGraphCache(v22);
            uint64_t v22 = *(void *)a1;
          }
          si_enqueue_work(*(void *)(v22 + 1040), (uint64_t)syncIndex, v21);
        }
      }
LABEL_31:
      int v23 = v33;
      MEMORY[0x1C1882290](v33);
      if ((v23 & 0x80000000) == 0) {
        close(v23);
      }
    }
    os_release(v4);
  }
  CFRelease(*(CFTypeRef *)(a1 + 16));
  free((void *)a1);
}

void indexContactGraphData(uint64_t a1, int a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v3 = *(CFDictionaryRef *)a1;
  if (v3)
  {
    if (a2) {
      goto LABEL_10;
    }
    int v4 = *__error();
    unint64_t v5 = _SILogForLogForCategory(4);
    os_log_type_t v6 = 2 * (dword_1E9FC90B4 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)a1);
      *(_DWORD *)statfs buf = 134217984;
      *(void *)&uint8_t buf[4] = Count;
      _os_log_impl(&dword_1BD672000, v5, v6, "Index contact graph data; %ld items", buf, 0xCu);
    }
    *__error() = v4;
    memcpy(buf, (const void *)(a1 + 8), sizeof(buf));
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    Mutable = (const void *)_MDPlistContainerCreateMutable();
    unint64_t v32 = Mutable;
    _MDPlistContainerBeginContainer();
    _MDPlistContainerBeginArray();
    CFDictionaryApplyFunction(*(CFDictionaryRef *)a1, (CFDictionaryApplierFunction)flushGraphCacheApply2, buf);
    _MDPlistContainerAddNullValue();
    _MDPlistContainerEndArray();
    _MDPlistContainerEndContainer();
    Bytes = (const UInt8 *)_MDPlistContainerGetBytes();
    CFIndex Length = _MDPlistContainerGetLength();
    CFDataRef v12 = CFDataCreateWithBytesNoCopy(v8, Bytes, Length, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    if (!SISetCodedAttributes(*(void *)(a1 + 328), @"com.apple.MobileAddressBook", 0, 0, v12, 0, 0, 0, 0, 9, 0, 0))
    {
      int v13 = *__error();
      int v14 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v27 = 136315394;
        uint64_t v28 = "indexContactGraphData";
        __int16 v29 = 1024;
        int v30 = 26387;
        _os_log_error_impl(&dword_1BD672000, v14, OS_LOG_TYPE_ERROR, "%s:%d: SISetCodedAttributes failed in indexContactGraphData", v27, 0x12u);
      }
      *__error() = v13;
    }
    CFRelease(v12);
    CFRelease(Mutable);
    CFDictionaryRef v3 = *(CFDictionaryRef *)a1;
    if (*(void *)a1) {
LABEL_10:
    }
      CFRelease(v3);
    *(void *)a1 = 0;
    long long v15 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)statfs buf = *(_OWORD *)(a1 + 8);
    *(_OWORD *)&uint8_t buf[16] = v15;
    long long v16 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)&uint8_t buf[32] = *(_OWORD *)(a1 + 40);
    *(_OWORD *)&buf[48] = v16;
    releaseCommDates((uint64_t)buf);
    long long v17 = *(_OWORD *)(a1 + 88);
    *(_OWORD *)statfs buf = *(_OWORD *)(a1 + 72);
    *(_OWORD *)&uint8_t buf[16] = v17;
    long long v18 = *(_OWORD *)(a1 + 120);
    *(_OWORD *)&uint8_t buf[32] = *(_OWORD *)(a1 + 104);
    *(_OWORD *)&buf[48] = v18;
    releaseCommDates((uint64_t)buf);
    long long v19 = *(_OWORD *)(a1 + 152);
    *(_OWORD *)statfs buf = *(_OWORD *)(a1 + 136);
    *(_OWORD *)&uint8_t buf[16] = v19;
    long long v20 = *(_OWORD *)(a1 + 184);
    *(_OWORD *)&uint8_t buf[32] = *(_OWORD *)(a1 + 168);
    *(_OWORD *)&buf[48] = v20;
    releaseCommDates((uint64_t)buf);
    long long v21 = *(_OWORD *)(a1 + 216);
    *(_OWORD *)statfs buf = *(_OWORD *)(a1 + 200);
    *(_OWORD *)&uint8_t buf[16] = v21;
    long long v22 = *(_OWORD *)(a1 + 248);
    *(_OWORD *)&uint8_t buf[32] = *(_OWORD *)(a1 + 232);
    *(_OWORD *)&buf[48] = v22;
    releaseCommDates((uint64_t)buf);
    long long v23 = *(_OWORD *)(a1 + 280);
    *(_OWORD *)statfs buf = *(_OWORD *)(a1 + 264);
    *(_OWORD *)&uint8_t buf[16] = v23;
    long long v24 = *(_OWORD *)(a1 + 312);
    *(_OWORD *)&uint8_t buf[32] = *(_OWORD *)(a1 + 296);
    *(_OWORD *)&buf[48] = v24;
    releaseCommDates((uint64_t)buf);
    free((void *)a1);
  }
  else
  {
    int v25 = *__error();
    int v26 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)statfs buf = 136315394;
      *(void *)&uint8_t buf[4] = "indexContactGraphData";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 26363;
      _os_log_error_impl(&dword_1BD672000, v26, OS_LOG_TYPE_ERROR, "%s:%d: ~~~ No ctx->usedDates.", buf, 0x12u);
    }
    *__error() = v25;
  }
}

void playBackMobileJournal(uint64_t *a1, int a2)
{
  uint64_t v2 = a1;
  uint64_t v171 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[1];
  if (a2) {
    goto LABEL_185;
  }
  uint64_t v4 = *a1;
  uint64_t v5 = *a1;
  uint64_t v6 = fd_lseek(*(_DWORD **)(v3 + 8), 0, 2);
  uint64_t v7 = v6;
  unint64_t v143 = v6;
  if (v6)
  {
    size_t v8 = *(void *)(v3 + 24);
    if (v8)
    {
      int v9 = *(void **)(v3 + 16);
      if (v9 == (void *)-1)
      {
LABEL_10:
        *(void *)(v3 + 24) = v7;
        *(void *)(v3 + 32) = 0;
        char v11 = 1;
        uint64_t v12 = v7;
        *(void *)(v3 + 16) = fd_mmap(*(void *)(v3 + 8));
        goto LABEL_14;
      }
      BOOL v10 = v8 == v143 && *(void *)(v3 + 32) == 0;
      if (!v10)
      {
        munmap(v9, v8);
        goto LABEL_10;
      }
      uint64_t v12 = v7;
      char v11 = 1;
    }
    else
    {
      char v11 = 0;
      uint64_t v12 = v6;
      *(void *)(v3 + 24) = v6;
      *(void *)(v3 + 32) = 0;
    }
  }
  else
  {
    uint64_t v12 = 0;
    char v11 = 0;
  }
LABEL_14:
  uint64_t v150 = v5;
  int64_t v142 = *(void *)(v5 + 2128);
  int v13 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v14 = setThreadIdAndInfo(-1, (long long *)sJournalExceptionCallbacks, (uint64_t)v2, 0x40000000, v13);
  unsigned int v158 = HIDWORD(v14);
  unsigned int v159 = v14;
  unsigned int v157 = v15;
  unsigned int v156 = v16;
  uint64_t v17 = *(void *)&threadData[18 * v14 + 2];
  uint64_t v18 = v17 + 320 * HIDWORD(v14);
  *(unsigned char *)(v18 + 216) = 0;
  int v19 = *(_DWORD *)(v18 + 312);
  long long v20 = *(void (**)(void))(v18 + 224);
  if (v20) {
    v20(*(void *)(v17 + 320 * HIDWORD(v14) + 288));
  }
  unsigned int v155 = v159;
  unsigned int v154 = v158;
  unint64_t v153 = __PAIR64__(v157, v156);
  if (_setjmp((int *)v18))
  {
    long long v21 = (_DWORD *)(v18 + 312);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)statfs buf = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
    }
    *long long v21 = v19;
    CIOnThreadCleanUpReset(v153);
    dropThreadId(v155, 1, v13);
    CICleanUpReset(v155, HIDWORD(v153));
    goto LABEL_181;
  }
  if (!v12) {
    goto LABEL_178;
  }
  uint64_t v146 = v12;
  if ((v11 & 1) == 0) {
    si_mobile_journal_map_activate((int *)v3);
  }
  int v148 = v19;
  int v149 = v13;
  uint64_t v151 = v4;
  uint64_t v22 = 0;
  uint64_t v23 = -1;
  uint64_t v140 = *(void *)(v3 + 16);
  uint64_t v24 = 0;
  if (v140 == -1 || v143 < 0xC) {
    goto LABEL_172;
  }
  uint64_t v25 = -1;
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v26 = 0;
  unint64_t v27 = 0;
  uint64_t v28 = 0;
  char v147 = v11;
  statfs v133 = v2;
  while (2)
  {
    uint64_t v24 = v26;
    uint64_t v29 = v28;
    int64_t v145 = v25;
    if (*(unsigned char *)(v150 + 2425))
    {
      int v115 = *__error();
      int v116 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)statfs buf = 0;
        goto LABEL_161;
      }
LABEL_162:
      *__error() = v115;
      uint64_t v22 = v29;
      uint64_t v23 = v145;
      goto LABEL_171;
    }
    uint64_t v30 = v27;
    uint64_t v31 = v25;
    uint64_t v32 = *(void *)(v150 + 872);
    if (v32)
    {
      *(void *)&long long v160 = 0;
      *((void *)&v160 + 1) = &v160;
      uint64_t v161 = 0x2000000000;
      uint64_t v162 = 0;
      if (*(void *)(v32 + 48))
      {
        if (!*(unsigned char *)(v32 + 59))
        {
          long long v111 = *(NSObject **)(v32 + 32);
          *(void *)statfs buf = MEMORY[0x1E4F143A8];
          *(void *)&uint8_t buf[8] = 0x40000000;
          *(void *)&uint8_t buf[16] = __si_scheduler_voluntary_check_for_suspend_inline_block_invoke;
          *(void *)&unsigned char buf[24] = &unk_1E6342EF8;
          *(void *)&uint8_t buf[32] = &v160;
          uint64_t v164 = v32;
          dispatch_sync(v111, buf);
          if (*(void *)(*((void *)&v160 + 1) + 24))
          {
            uint64_t v112 = *(void *)(*((void *)&v160 + 1) + 24);
            do
            {
              if (atomic_fetch_add(*(atomic_uint *volatile *)v112, 0xFFFFFFFF) == 1)
              {
                (*(void (**)(void, void, void, uint64_t))(*(void *)v112 + 32))(*(void *)(*(void *)v112 + 8), *(void *)(*(void *)v112 + 16), *(void *)(*(void *)v112 + 24), 1);
                free(*(void **)v112);
              }
              *(void *)uint64_t v112 = 0;
              uint64_t v112 = *(void *)(v112 + 32);
            }
            while (v112);
          }
        }
      }
      if ((*(_DWORD *)(v32 + 112) || *(void *)(v32 + 136)) && *(_DWORD *)(v32 + 128) == 1 && !*(unsigned char *)(v32 + 59)) {
        quick_check_suspension(v32);
      }
      _Block_object_dispose(&v160, 8);
      if (*(unsigned char *)(v150 + 2425))
      {
        int v115 = *__error();
        int v116 = _SILogForLogForCategory(4);
        if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)statfs buf = 0;
LABEL_161:
          _os_log_impl(&dword_1BD672000, v116, OS_LOG_TYPE_DEFAULT, "Interrupting indexing; process quitting", buf, 2u);
        }
        goto LABEL_162;
      }
    }
    if ((~(_WORD)v29 & 0xFFF) != 0)
    {
      uint64_t v33 = v24;
    }
    else
    {
      uint64_t v33 = v24;
      if (v24 != v29)
      {
        __n128 v35 = (__n128)si_sync_ctx_create_with_defer_fd(v150, 0);
        uint64_t v36 = *(void *)(v34 + 88);
        if (v36 <= v31 + 1) {
          uint64_t v36 = v31 + 1;
        }
        *(void *)(v34 + 88) = v36;
        si_sync_index_delayed2(v35);
        uint64_t v33 = v29;
      }
    }
    uint64_t v37 = v33;
    uint64_t v38 = v140 + v30;
    uint64_t v39 = v140 + v30;
    unsigned int v40 = *(_DWORD *)(v140 + v30);
    unint64_t v152 = 0;
    HIDWORD(v41) = v40 + 264306963;
    LODWORD(v41) = v40 + 264306963;
    uint64_t v144 = v29;
    uint64_t v141 = v33;
    uint64_t v138 = v30;
    int v42 = -263323923;
    switch((v41 >> 20))
    {
      case 0u:
        int64_t VInt64 = v2_readVInt64(v38 + 12, (uint64_t *)&v152);
        char v44 = 1;
        goto LABEL_54;
      case 1u:
        goto LABEL_77;
      case 2u:
        unint64_t v45 = v2_readVInt64(v38 + 18, (uint64_t *)&v152);
        char v46 = 1;
        int64_t v47 = v45;
        goto LABEL_45;
      case 4u:
        int v42 = -262275347;
LABEL_77:
        unsigned int v40 = v42;
        int64_t v72 = v2_readVInt64(v38 + 36, (uint64_t *)&v152);
        char v73 = 1;
        goto LABEL_78;
      default:
        if (v40 != -264372499)
        {
          if ((v40 & 0xFFEFFFFF) == 0xF04DFEED)
          {
            char v73 = 0;
            int64_t v72 = 0;
LABEL_78:
            uint64_t v74 = *(unsigned int *)(v39 + 4);
            uint64_t v75 = (v74 + 12);
            if (v75 < 0x24 || v143 < v138 + (unint64_t)v75)
            {
              int v117 = *__error();
              uint64_t v118 = _SILogForLogForCategory(0);
              if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)statfs buf = 136316418;
                *(void *)&uint8_t buf[4] = "playBackMobileJournal";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4606;
                *(_WORD *)&buf[18] = 2048;
                *(void *)&buf[20] = v40;
                *(_WORD *)&buf[28] = 2048;
                *(void *)&buf[30] = v74;
                *(_WORD *)&buf[38] = 2048;
                uint64_t v164 = v138;
                __int16 v165 = 2048;
                uint64_t v166 = v146;
                _os_log_error_impl(&dword_1BD672000, v118, OS_LOG_TYPE_ERROR, "%s:%d: Invalid journal entry, magic:0x%08lx, size:%ld, pos:%ld, end:%ld", buf, 0x3Au);
              }
              *__error() = v117;
              uint64_t v31 = v145;
              goto LABEL_169;
            }
            unint64_t v76 = v74 - 24 - v152;
            if (v74 - 24 > v152)
            {
              uint64_t v77 = *(_WORD *)(v39 + 12) & 0x3FF;
              unsigned int v78 = (const char *)(v38 + v152 + 36);
              size_t v79 = strnlen(v78, v74 - 24 - v152);
              size_t v80 = v79;
              if (v79 == v76 || v79 + 1 != v77)
              {
                int v89 = *__error();
                long long v90 = _SILogForLogForCategory(0);
                if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)statfs buf = 136316930;
                  *(void *)&uint8_t buf[4] = "playBackMobileJournal";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 4622;
                  *(_WORD *)&buf[18] = 2048;
                  *(void *)&buf[20] = v40;
                  *(_WORD *)&buf[28] = 2048;
                  *(void *)&buf[30] = v74;
                  *(_WORD *)&buf[38] = 2048;
                  uint64_t v164 = v138;
                  __int16 v165 = 2048;
                  uint64_t v166 = v146;
                  __int16 v167 = 2048;
                  size_t v168 = v80;
                  __int16 v169 = 2048;
                  uint64_t v170 = v77;
                  _os_log_error_impl(&dword_1BD672000, v90, OS_LOG_TYPE_ERROR, "%s:%d: Invalid journal entry, magic:0x%08lx, size:%ld, pos:%ld, end:%ld, len:%ld(%ld)", buf, 0x4Eu);
                }
                *__error() = v89;
                uint64_t v2 = v133;
              }
              else
              {
                CFStringRef v81 = CFStringCreateWithCString(alloc, v78, 0x8000100u);
                uint64_t v2 = v133;
                if (v81)
                {
                  CFStringRef v82 = v81;
                  BOOL v83 = v72 != 0;
                  if (v145) {
                    BOOL v84 = v72 != 0;
                  }
                  else {
                    BOOL v84 = 0;
                  }
                  if (v72 >= v145) {
                    BOOL v84 = 0;
                  }
                  if (v72 > v142) {
                    BOOL v83 = 0;
                  }
                  if (v84 || v83)
                  {
                    char v11 = v147;
                    uint64_t v88 = v144;
                    if (gSILogLevels[0] < 5)
                    {
                      int64_t v87 = v145;
                      goto LABEL_143;
                    }
                    int v113 = *__error();
                    unsigned int v114 = _SILogForLogForCategory(0);
                    if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)statfs buf = 134218496;
                      *(void *)&uint8_t buf[4] = v72;
                      *(_WORD *)&unsigned char buf[12] = 2048;
                      *(void *)&buf[14] = v145;
                      *(_WORD *)&buf[22] = 2048;
                      *(void *)&unsigned char buf[24] = v142;
                      _os_log_impl(&dword_1BD672000, v114, OS_LOG_TYPE_DEFAULT, "Playback skipping sn: %lld mrsn: %lld csn: %lld", buf, 0x20u);
                    }
                    *__error() = v113;
                    uint64_t v88 = v144;
                    int64_t v87 = v145;
                    char v11 = v147;
                    unint64_t v108 = v138 + v75;
                    uint64_t v2 = v133;
                  }
                  else
                  {
                    *(void *)statfs buf = si_mobile_set_attr_ctx_create(v150, v81);
                    *(_DWORD *)(*(void *)buf + 80) |= 0x10u;
                    atomic_fetch_add((atomic_uint *volatile)v3, 1u);
                    uint64_t v85 = *(void *)buf;
                    *(void *)(*(void *)buf + 8) = v3;
                    *(void *)(v85 + 16) = v138;
                    *(void *)(v85 + 24) = v75;
                    *(unsigned char *)(v85 + 32) = v73;
                    *(CFAbsoluteTime *)(v85 + 64) = CFAbsoluteTimeGetCurrent();
                    long long v86 = si_backtrace_routine_resolve(*(void *)v85, *(const __CFString **)(v85 + 72), (uint64_t (*)())setCSAttributes2, (void *)v85, buf);
                    ((void (*)(void, void))v86)(*(void *)buf, 0);
                    if (v145 <= v72) {
                      int64_t v87 = v72;
                    }
                    else {
                      int64_t v87 = v145;
                    }
                    uint64_t v88 = v144 + 1;
                    char v11 = v147;
LABEL_143:
                    unint64_t v108 = v138 + v75;
                  }
                  int64_t v109 = v87;
                  uint64_t v110 = v88;
                  CFRelease(v82);
                  unint64_t v93 = v108;
                  uint64_t v94 = v110;
                  int64_t v95 = v109;
                  goto LABEL_126;
                }
              }
            }
            int v91 = *__error();
            uint64_t v92 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)statfs buf = 136316418;
              *(void *)&uint8_t buf[4] = "playBackMobileJournal";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4629;
              *(_WORD *)&buf[18] = 2048;
              *(void *)&buf[20] = v40;
              *(_WORD *)&buf[28] = 2048;
              *(void *)&buf[30] = v74;
              *(_WORD *)&buf[38] = 2048;
              uint64_t v164 = v138;
              __int16 v165 = 2048;
              uint64_t v166 = v146;
              _os_log_error_impl(&dword_1BD672000, v92, OS_LOG_TYPE_ERROR, "%s:%d: Invalid journal entry - nil bundleID, magic:0x%08lx, size:%ld, pos:%ld, end:%ld", buf, 0x3Au);
            }
            *__error() = v91;
            unint64_t v93 = v138 + v75;
            uint64_t v94 = v144;
            int64_t v95 = v145;
            goto LABEL_104;
          }
          if (v40 != -261161235) {
            goto LABEL_170;
          }
          char v46 = 0;
          int64_t v47 = 0;
LABEL_45:
          uint64_t v48 = *(unsigned int *)(v39 + 4);
          uint64_t v49 = (v48 + 12);
          if (v49 < 0x12 || v143 < v138 + (unint64_t)v49)
          {
            int v121 = *__error();
            BOOL v122 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)statfs buf = 136316418;
              *(void *)&uint8_t buf[4] = "playBackMobileJournal";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4663;
              *(_WORD *)&buf[18] = 2048;
              *(void *)&buf[20] = 4033806061;
              *(_WORD *)&buf[28] = 2048;
              *(void *)&buf[30] = v48;
              *(_WORD *)&buf[38] = 2048;
              uint64_t v164 = v138;
              __int16 v165 = 2048;
              uint64_t v166 = v146;
              _os_log_error_impl(&dword_1BD672000, v122, OS_LOG_TYPE_ERROR, "%s:%d: Invalid journal entry, magic:0x%08lx, size:%ld, pos:%ld, end:%ld", buf, 0x3Au);
            }
            *__error() = v121;
            goto LABEL_169;
          }
          char v136 = v46;
          unint64_t v50 = v138 + v49;
          uint64_t v51 = *(unsigned __int16 *)(v39 + 12);
          int v52 = *(unsigned __int16 *)(v39 + 12);
          unint64_t v53 = v48 - 6 - v152;
          if (v48 - 6 <= v152)
          {
            CFStringRef v57 = 0;
          }
          else
          {
            if (!v52)
            {
              CFStringRef v96 = 0;
              BOOL v97 = 1;
              if (v47 && v31 && v47 < v31)
              {
                unint64_t v93 = v138 + v49;
                uint64_t v94 = v144;
LABEL_133:
                int64_t v95 = v31;
                goto LABEL_104;
              }
              goto LABEL_135;
            }
            int v134 = v52;
            uint64_t v54 = v51;
            unint64_t v55 = (const char *)(v38 + v152 + 18);
            size_t v56 = strnlen(v55, v48 - 6 - v152);
            if (v56 == v53 || v56 + 1 != v54)
            {
              size_t v98 = v56;
              int v99 = *__error();
              uint64_t v100 = _SILogForLogForCategory(0);
              if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)statfs buf = 136316930;
                *(void *)&uint8_t buf[4] = "playBackMobileJournal";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4679;
                *(_WORD *)&buf[18] = 2048;
                *(void *)&buf[20] = 4033806061;
                *(_WORD *)&buf[28] = 2048;
                *(void *)&buf[30] = v48;
                *(_WORD *)&buf[38] = 2048;
                uint64_t v164 = v138;
                __int16 v165 = 2048;
                uint64_t v166 = v146;
                __int16 v167 = 2048;
                size_t v168 = v98;
                __int16 v169 = 2048;
                uint64_t v170 = v54;
                _os_log_error_impl(&dword_1BD672000, v100, OS_LOG_TYPE_ERROR, "%s:%d: Invalid journal entry, magic:0x%08lx, size:%ld, pos:%ld, end:%ld, len:%ld(%ld)", buf, 0x4Eu);
              }
              *__error() = v99;
              CFStringRef v57 = 0;
            }
            else
            {
              CFStringRef v57 = CFStringCreateWithCString(alloc, v55, 0x8000100u);
            }
            uint64_t v29 = v144;
            uint64_t v31 = v145;
            unint64_t v50 = v138 + v49;
            int v52 = v134;
          }
          BOOL v97 = v57 == 0;
          if (!v57 && v52)
          {
            unint64_t v93 = v50;
            uint64_t v94 = v29;
            int64_t v95 = v31;
            goto LABEL_125;
          }
          if (v47 && v31 && v47 < v31)
          {
            unint64_t v137 = v50;
            CFStringRef v96 = v57;
            uint64_t v102 = v31;
            uint64_t v103 = v144;
            if (v57) {
              goto LABEL_140;
            }
            unint64_t v93 = v50;
            uint64_t v94 = v144;
            goto LABEL_133;
          }
          CFStringRef v96 = v57;
LABEL_135:
          unint64_t v137 = v50;
          BOOL v104 = v97;
          uint64_t v105 = si_mobile_delete_attr_ctx_create(v150, v96);
          *((_DWORD *)v105 + 10) |= 0x10u;
          atomic_fetch_add((atomic_uint *volatile)v3, 1u);
          v105[1] = v3;
          v105[2] = v138;
          v105[3] = v49;
          *((unsigned char *)v105 + 32) = v136;
          *((CFAbsoluteTime *)v105 + 6) = CFAbsoluteTimeGetCurrent();
          deleteCSAttributes((uint64_t)v105, 0);
          if (v31 <= v47) {
            int64_t v95 = v47;
          }
          else {
            int64_t v95 = v31;
          }
          uint64_t v102 = v95;
          uint64_t v103 = v144 + 1;
          if (!v104)
          {
LABEL_140:
            uint64_t v106 = v103;
            int64_t v107 = v102;
            CFRelease(v96);
            unint64_t v93 = v137;
            uint64_t v94 = v106;
            int64_t v95 = v107;
            goto LABEL_104;
          }
          unint64_t v93 = v137;
          uint64_t v94 = v144 + 1;
LABEL_104:
          char v11 = v147;
LABEL_126:
          uint64_t v25 = v95;
          uint64_t v28 = v94;
          unint64_t v27 = v93;
          unint64_t v101 = v93 + 12;
          uint64_t v23 = v95;
          uint64_t v22 = v94;
          uint64_t v24 = v141;
          uint64_t v26 = v141;
          if (v101 > v143) {
            goto LABEL_172;
          }
          continue;
        }
        int64_t VInt64 = 0;
        char v44 = 0;
LABEL_54:
        unint64_t v58 = *(unsigned int *)(v39 + 4);
        if (v58 <= 0xFFFFFFF3)
        {
          unint64_t v59 = v58 + 12;
          unint64_t v60 = v30 + v58 + 12;
          if (v143 >= v60)
          {
            unint64_t v135 = v58;
            if (v58 <= v152) {
              goto LABEL_60;
            }
            long long v160 = 0uLL;
            uint64_t v161 = 0;
            _MDPlistGetRootPlistObjectFromBytesWithError();
            *(_OWORD *)statfs buf = v160;
            *(void *)&uint8_t buf[16] = v161;
            if (!_MDPlistArrayGetCount()) {
              goto LABEL_60;
            }
            memset(buf, 0, 24);
            _MDPlistArrayGetPlistObjectAtIndex();
            uint64_t v61 = _MDPlistContainerCopyObject();
            if (v61)
            {
              char v62 = 0;
              unsigned int v63 = (const void *)v61;
            }
            else
            {
LABEL_60:
              int v64 = *__error();
              unint64_t v65 = _SILogForLogForCategory(0);
              if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)statfs buf = 136316418;
                *(void *)&uint8_t buf[4] = "playBackMobileJournal";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4574;
                *(_WORD *)&buf[18] = 2048;
                *(void *)&buf[20] = 4030594797;
                *(_WORD *)&buf[28] = 2048;
                *(void *)&buf[30] = v135;
                *(_WORD *)&buf[38] = 2048;
                uint64_t v164 = v30;
                __int16 v165 = 2048;
                uint64_t v166 = v146;
                _os_log_error_impl(&dword_1BD672000, v65, OS_LOG_TYPE_ERROR, "%s:%d: Invalid journal entry - nil bundleID, magic:0x%08lx, size:%ld, pos:%ld, end:%ld", buf, 0x3Au);
              }
              unsigned int v63 = 0;
              *__error() = v64;
              char v62 = 1;
            }
            BOOL v66 = VInt64 != 0;
            if (v145) {
              BOOL v67 = VInt64 != 0;
            }
            else {
              BOOL v67 = 0;
            }
            if (VInt64 >= v145) {
              BOOL v67 = 0;
            }
            if (VInt64 > v142) {
              BOOL v66 = 0;
            }
            if (v67)
            {
              int64_t VInt64 = v145;
              uint64_t v71 = v144;
            }
            else
            {
              if (!v66)
              {
                unint64_t v68 = v59;
                *(void *)statfs buf = si_mobile_set_attr_ctx_create(v150, v63);
                *(_DWORD *)(*(void *)buf + 80) |= 0x10u;
                atomic_fetch_add((atomic_uint *volatile)v3, 1u);
                uint64_t v69 = *(void *)buf;
                *(void *)(*(void *)buf + 8) = v3;
                *(void *)(v69 + 16) = v138;
                *(void *)(v69 + 24) = v68;
                *(unsigned char *)(v69 + 32) = v44;
                *(CFAbsoluteTime *)(v69 + 64) = CFAbsoluteTimeGetCurrent();
                uint64_t v70 = si_backtrace_routine_resolve(*(void *)v69, *(const __CFString **)(v69 + 72), (uint64_t (*)())setCSAttributes1, (void *)v69, buf);
                ((void (*)(void, void))v70)(*(void *)buf, 0);
                if (v145 > VInt64) {
                  int64_t VInt64 = v145;
                }
                uint64_t v71 = v144 + 1;
                if ((v62 & 1) == 0) {
LABEL_110:
                }
                  CFRelease(v63);
LABEL_111:
                unint64_t v93 = v60;
                uint64_t v94 = v71;
                int64_t v95 = VInt64;
LABEL_125:
                char v11 = v147;
                goto LABEL_126;
              }
              uint64_t v71 = v144;
              int64_t VInt64 = v145;
            }
            if ((v62 & 1) == 0) {
              goto LABEL_110;
            }
            goto LABEL_111;
          }
        }
        int v119 = *__error();
        uint64_t v120 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)statfs buf = 136316418;
          *(void *)&uint8_t buf[4] = "playBackMobileJournal";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4550;
          *(_WORD *)&buf[18] = 2048;
          *(void *)&buf[20] = 4030594797;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = v58;
          *(_WORD *)&buf[38] = 2048;
          uint64_t v164 = v30;
          __int16 v165 = 2048;
          uint64_t v166 = v146;
          _os_log_error_impl(&dword_1BD672000, v120, OS_LOG_TYPE_ERROR, "%s:%d: Invalid journal entry, magic:0x%08lx, size:%ld, pos:%ld, end:%ld", buf, 0x3Au);
        }
        *__error() = v119;
        uint64_t v29 = v144;
        uint64_t v31 = v145;
LABEL_169:
        uint64_t v37 = v141;
LABEL_170:
        uint64_t v24 = v37;
        uint64_t v22 = v29;
        uint64_t v23 = v31;
LABEL_171:
        char v11 = v147;
LABEL_172:
        uint64_t v123 = v22;
        if ((v11 & 1) == 0) {
          si_mobile_journal_map_deactivate((void *)v3);
        }
        BOOL v10 = v123 == v24;
        uint64_t v4 = v151;
        int v13 = v149;
        int v19 = v148;
        if (!v10)
        {
          __n128 v125 = (__n128)si_sync_ctx_create_with_defer_fd(v150, 0);
          uint64_t v126 = *(void *)(v124 + 88);
          if (v126 <= v23 + 1) {
            uint64_t v126 = v23 + 1;
          }
          *(void *)(v124 + 88) = v126;
          si_sync_index_delayed2(v125);
        }
LABEL_178:
        uint64_t v127 = *(void *)&threadData[18 * v155 + 2];
        unsigned int v128 = v154;
        uint64_t v129 = v127 + 320 * v154;
        *(_DWORD *)(v129 + 312) = v19;
        unsigned int v130 = *(void (**)(void))(v129 + 232);
        if (v130) {
          v130(*(void *)(v127 + 320 * v128 + 288));
        }
        dropThreadId(v155, 0, v13);
LABEL_181:
        if (atomic_fetch_add((atomic_uint *volatile)(v4 + 6880), 0xFFFFFFFF) == 1)
        {
          int v131 = *__error();
          uint64_t v132 = _SILogForLogForCategory(4);
          if (os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)statfs buf = 0;
            _os_log_impl(&dword_1BD672000, v132, OS_LOG_TYPE_DEFAULT, "Playback finished.", buf, 2u);
          }
          *__error() = v131;
        }
LABEL_185:
        if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1) {
          _si_mobile_journal_finalize(v3, 1);
        }
        free(v2);
        return;
    }
  }
}

int *si_mobile_journal_map_activate(int *result)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*((void *)result + 3))
  {
    uint64_t v1 = (uint64_t *)result;
    if (*((void *)result + 2) == -1)
    {
      *((void *)result + 2) = fd_guarded_mmap(*((void *)result + 1));
      memset(v16, 0, 255);
      int v2 = *__error();
      uint64_t v3 = _SILogForLogForCategory(4);
      os_log_type_t v4 = 2 * (dword_1E9FC90B4 < 4);
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v6 = v1[2];
        uint64_t v5 = v1[3];
        uint64_t v7 = fd_name(v1[1], (char *)v16, 0xFFuLL);
        int v8 = 134218754;
        int v9 = v1;
        __int16 v10 = 2048;
        uint64_t v11 = v6;
        __int16 v12 = 2048;
        uint64_t v13 = v5;
        __int16 v14 = 2080;
        unsigned int v15 = v7;
        _os_log_impl(&dword_1BD672000, v3, v4, "Activated journal %p %p %lx %s", (uint8_t *)&v8, 0x2Au);
      }
      uint64_t result = __error();
      unint64_t *result = v2;
    }
  }
  return result;
}

void si_mobile_journal_map_deactivate(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  memset(v16, 0, 255);
  int v2 = *__error();
  uint64_t v3 = _SILogForLogForCategory(4);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[2];
    uint64_t v4 = a1[3];
    uint64_t v6 = fd_name(a1[1], (char *)v16, 0xFFuLL);
    int v8 = 134218754;
    int v9 = a1;
    __int16 v10 = 2048;
    uint64_t v11 = v5;
    __int16 v12 = 2048;
    uint64_t v13 = v4;
    __int16 v14 = 2080;
    unsigned int v15 = v6;
    _os_log_impl(&dword_1BD672000, v3, OS_LOG_TYPE_DEFAULT, "Deactivating journal %p %p %lx %s", (uint8_t *)&v8, 0x2Au);
  }
  *__error() = v2;
  uint64_t v7 = (void *)a1[2];
  if (v7 != (void *)-1) {
    fd_guarded_munmap(a1[1], v7, a1[3]);
  }
  a1[2] = -1;
  a1[3] = 0;
}

BOOL si_zombifyItem(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  unsigned __int8 v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = v1;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  bzero(v22, 0x1000uLL);
  _SIStackAllocatorCreate(v22, 4096, indexingZone);
  if (!v22[3]) {
    v22[1] = (v22[0] + 55) & 0xFFFFFFFFFFFFFFF0;
  }
  Mutable = (const void *)_MDPlistContainerCreateMutable();
  _MDPlistContainerBeginContainer();
  _MDPlistContainerBeginArray();
  _MDPlistContainerBeginDictionary();
  uint64_t v20 = 0;
  unint64_t v21 = 0;
  db_get_field(*(int **)(v10 + 1184), v7, "_kMDItemExternalID", &v21, &v20);
  _MDPlistContainerAddCString();
  _MDPlistContainerAddCString();
  _MDPlistContainerAddCString();
  CFAbsoluteTimeGetCurrent();
  _MDPlistContainerAddDateValue();
  _MDPlistContainerAddCString();
  _MDPlistContainerAddBooleanValue();
  _MDPlistContainerEndDictionary();
  _MDPlistContainerAddNullValue();
  _MDPlistContainerEndArray();
  _MDPlistContainerEndContainer();
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  _MDPlistGetRootPlistObjectFromPlist();
  if (gSILogLevels[0] >= 5)
  {
    int v14 = *__error();
    unsigned int v15 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = v9;
      _os_log_impl(&dword_1BD672000, v15, OS_LOG_TYPE_DEFAULT, "Zombifying oid %lld", (uint8_t *)&buf, 0xCu);
    }
    *__error() = v14;
  }
  long long buf = v18;
  uint64_t v24 = v19;
  _MDPlistArrayGetPlistObjectAtIndex();
  uint64_t v24 = 0;
  long long buf = 0u;
  BOOL v12 = processOneCS(v10, -1, v5, 0, 0, (uint64_t)v16, (uint64_t)&buf, 0, 0, 0, v3, 0, 0, &v17);
  CFRelease(Mutable);
  return v12;
}

void si_enqueue_text_store_doc_for_deletion(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)&text_store_docs_lock);
  uint64_t v4 = *(const uint64_t ***)(a1 + 6928);
  if (!v4)
  {
    uint64_t v4 = (const uint64_t **)malloc_type_calloc(0x18uLL, 1uLL, 0xE61FBE58uLL);
    *(void *)(a1 + 6928) = v4;
  }
  uint64_t v5 = v4[1];
  uint64_t v6 = *v4;
  if (v5 != v4[2]) {
    goto LABEL_9;
  }
  unint64_t v7 = 2 * (void)v5;
  if (v7 <= 0x10) {
    uint64_t v8 = 16;
  }
  else {
    uint64_t v8 = v7;
  }
  uint64_t v9 = (const uint64_t *)reallocf((void *)*v4, 8 * v8);
  *uint64_t v4 = v9;
  if (v9)
  {
    uint64_t v6 = v9;
    v4[2] = (const uint64_t *)v8;
    uint64_t v5 = v4[1];
LABEL_9:
    v4[1] = (const uint64_t *)((char *)v5 + 1);
    v6[(void)v5] = a2;
    if (v5 == (const uint64_t *)0x7FFF)
    {
      si_text_store_bulk_delete(a1, v6, 0x8000);
      free(v4);
      *(void *)(a1 + 6928) = 0;
    }
    goto LABEL_13;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    int v10 = 136315138;
    uint64_t v11 = "si_enqueue_text_store_doc_for_deletion";
    _os_log_fault_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation failure in %s", (uint8_t *)&v10, 0xCu);
  }
LABEL_13:
  os_unfair_lock_unlock((os_unfair_lock_t)&text_store_docs_lock);
}

void cleanupRelatedItemWithBundle(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = strchr(a1, 58);
  if (!v12) {
    return;
  }
  *uint64_t v12 = 0;
  uint64_t v13 = v12 + 1;
  CFIndex v14 = v12 - a1;
  uint64_t v15 = a2 - (v12 - a1);
  unint64_t v30 = 0;
  if (dword_1E9FC90B4 >= 5)
  {
    int v29 = *__error();
    uint64_t v26 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      uint64_t v32 = a1;
      __int16 v33 = 2080;
      uint64_t v34 = a1;
      __int16 v35 = 2080;
      uint64_t v36 = v13;
      _os_log_impl(&dword_1BD672000, v26, OS_LOG_TYPE_DEFAULT, "Deleting related item for %s (%s , %s)", buf, 0x20u);
    }
    *__error() = v29;
  }
  if (_si_get_object_for_identifier_createParentDBO(a5, (int)v15 - 1, v13, (int)v14 + 1, (uint64_t)a1, 0, 0, 0, &v30, 0, 0))
  {
    if (dword_1E9FC90B4 >= 5)
    {
      int v16 = *__error();
      char v17 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315650;
        uint64_t v32 = a1;
        __int16 v33 = 2080;
        uint64_t v34 = a1;
        __int16 v35 = 2080;
        uint64_t v36 = v13;
        _os_log_impl(&dword_1BD672000, v17, OS_LOG_TYPE_DEFAULT, "Failed to find related item for %s (%s , %s)", buf, 0x20u);
      }
      *__error() = v16;
    }
    return;
  }
  CFIndex v18 = v15 - 2;
  if (dword_1E9FC90B4 >= 5)
  {
    int v27 = *__error();
    uint64_t v28 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315906;
      uint64_t v32 = a1;
      __int16 v33 = 2080;
      uint64_t v34 = a1;
      __int16 v35 = 2080;
      uint64_t v36 = v13;
      __int16 v37 = 2048;
      unint64_t v38 = v30;
      _os_log_impl(&dword_1BD672000, v28, OS_LOG_TYPE_DEFAULT, "Found related item for %s (%s , %s), oid: %lld", buf, 0x2Au);
    }
    *__error() = v27;
  }
  buf[0] = 0;
  _si_delete_attributes_inner(a5, v30, 0, a3, a4, a6, buf);
  si_finish_text_store_deletions(a5);
  if (buf[0]) {
    notify_post("com.apple.spotlight.SyndicatedContentDeleted");
  }
  CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v20 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)v13, v18, 0x8000100u, 0);
  CFStringRef v21 = CFStringCreateWithBytes(v19, (const UInt8 *)a1, v14, 0x8000100u, 0);
  CFStringRef v22 = v21;
  if (v20) {
    BOOL v23 = v21 == 0;
  }
  else {
    BOOL v23 = 1;
  }
  if (!v23)
  {
    uint64_t v24 = *(void *)(a5 + 2352);
    uint64_t v25 = *(void (**)(void, void, CFStringRef, CFStringRef, void))(v24 + 112);
    if (v25 && *(unsigned char *)(a5 + 2064)) {
      v25(*(void *)(v24 + 144), 0, v21, v20, 0);
    }
    goto LABEL_21;
  }
  if (v20) {
LABEL_21:
  }
    CFRelease(v20);
  if (v22) {
    CFRelease(v22);
  }
}

void si_removeRelatedItem(uint64_t a1, uint64_t *a2, CFStringRef theString, const __CFString *a4, uint64_t a5, const char *a6)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  if (!a2 || !*a2)
  {
    char v46 = __si_assert_copy_extra_625(-1);
    char v44 = v46;
    int64_t v47 = "";
    if (v46) {
      int64_t v47 = v46;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 25088, "dbop && *dbop", v47);
LABEL_47:
    free(v44);
    if (__valid_fs(-1)) {
      uint64_t v48 = 2989;
    }
    else {
      uint64_t v48 = 3072;
    }
    *(_DWORD *)uint64_t v48 = -559038737;
    abort();
  }
  memset(v69, 0, sizeof(v69));
  char v60 = 0;
  size_t v59 = 0;
  if (a5)
  {
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFIndex Length = CFStringGetLength(theString);
    CFIndex v13 = CFStringGetLength(a4);
    MutableCopy = CFStringCreateMutableCopy(v11, Length + v13 + 1, theString);
    CFStringAppend(MutableCopy, @":");
    CFStringAppend(MutableCopy, a4);
    uint64_t v15 = fasterUTF8String(a4, &v59, (char *)v69, 256, &v60);
    CFRelease(MutableCopy);
    int v16 = "_kMDItemRelatedObjectsWithBundle";
  }
  else
  {
    uint64_t v15 = fasterUTF8String(a4, &v59, (char *)v69, 256, &v60);
    int v16 = "_kMDItemRelatedObjects";
  }
  size_t v17 = v59;
  std::string __s1 = 0;
  unint64_t v58 = 0;
  int field = db_get_field(*(int **)(a1 + 1184), *a2, v16, &v58, &__s1);
  if (field)
  {
    int v19 = field;
    if (field != 2)
    {
      CFStringRef v20 = a6;
      CFStringRef v21 = theString;
      int v22 = *__error();
      BOOL v23 = _SILogForLogForCategory(4);
      BOOL v24 = dword_1E9FC90B4 < 3;
      if (os_log_type_enabled(v23, (os_log_type_t)(dword_1E9FC90B4 < 3)))
      {
        *(_DWORD *)long long buf = 138413058;
        char v62 = v20;
        __int16 v63 = 2112;
        CFStringRef v64 = v21;
        __int16 v65 = 2112;
        CFStringRef v66 = a4;
        __int16 v67 = 1024;
        LODWORD(v68) = v19;
        uint64_t v25 = "*warn* Failed to fetch the dbo for relatedIdentifier:%@, bundleID:%@, identifier:%@, rc:%d";
        uint64_t v26 = v23;
        os_log_type_t v27 = v24;
        uint32_t v28 = 38;
        goto LABEL_10;
      }
      goto LABEL_11;
    }
    goto LABEL_12;
  }
  __int16 v29 = *(_WORD *)(v58 + 2);
  if ((v29 & 0x90) != 0)
  {
    uint64_t v49 = __si_assert_copy_extra_625(-1);
    unint64_t v50 = v49;
    uint64_t v51 = "";
    if (v49) {
      uint64_t v51 = v49;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 25122, "(fieldFlags & (DB_FIELD_UNIQUED_VALS|DB_FIELD_LOCALIZED_STR)) == 0", v51);
    free(v50);
    if (__valid_fs(-1)) {
      uint64_t v52 = 2989;
    }
    else {
      uint64_t v52 = 3072;
    }
    *(_DWORD *)uint64_t v52 = -559038737;
    abort();
  }
  CFStringRef v55 = theString;
  uint64_t v56 = a1;
  CFStringRef v54 = (const __CFString *)a6;
  unint64_t v30 = *(unsigned int *)(v58 + 8);
  uint64_t v31 = __s1;
  if ((v29 & 0x20) == 0)
  {
    size_t v32 = strnlen(__s1, *(unsigned int *)(v58 + 8));
    if (v32 + 1 < v30) {
      unint64_t v33 = v32 + 1;
    }
    else {
      unint64_t v33 = v30;
    }
    if (v17 != v33 || memcmp(v31, v15, v17)) {
      goto LABEL_12;
    }
LABEL_37:
    uint64_t v40 = v56;
    db_delete_field(*(int **)(v56 + 1184), a2, v16);
    goto LABEL_38;
  }
  if (!v30) {
    goto LABEL_12;
  }
  uint64_t v34 = &__s1[v30];
  __int16 v35 = __s1;
  while (1)
  {
    size_t v36 = v34 - v35;
    size_t v37 = strnlen(v35, v34 - v35);
    if (v37 + 1 < v34 - v35) {
      size_t v36 = v37 + 1;
    }
    if (!v36)
    {
      unsigned int v43 = __si_assert_copy_extra_625(-1);
      char v44 = v43;
      unint64_t v45 = "";
      if (v43) {
        unint64_t v45 = v43;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 25133, "size", v45);
      goto LABEL_47;
    }
    if (v17 == v36 && !memcmp(v35, v15, v17)) {
      break;
    }
    v35 += v36;
    if (v35 >= v34) {
      goto LABEL_12;
    }
  }
  if (v17 >= v30) {
    goto LABEL_37;
  }
  if (v30 >= v17) {
    size_t v38 = v30 - v17;
  }
  else {
    size_t v38 = 0;
  }
  int v53 = v38;
  uint64_t v39 = (char *)malloc_type_malloc(v38, 0xD52B7B1AuLL);
  memcpy(v39, v31, v35 - v31);
  memcpy(&v39[v35 - v31], &v35[v17], v34 - &v35[v17]);
  uint64_t v40 = v56;
  db_add_field(*(int **)(v56 + 1184), (char **)a2, 1u, v16, 0, 0x2120u, 11, (unsigned __int8 *)v39, v41, v53);
  free(v39);
LABEL_38:
  db_update_obj(*(int **)(v40 + 1184), *a2, 3);
  if (dword_1E9FC90B4 >= 5)
  {
    int v22 = *__error();
    int v42 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315906;
      char v62 = "_kMDItemRelatedObjects";
      __int16 v63 = 2112;
      CFStringRef v64 = v54;
      __int16 v65 = 2112;
      CFStringRef v66 = v55;
      __int16 v67 = 2112;
      CFStringRef v68 = a4;
      uint64_t v25 = "Updated \"%s\" field for relatedIdentifier:%@, bundleID:%@, identifier:%@";
      uint64_t v26 = v42;
      os_log_type_t v27 = OS_LOG_TYPE_DEFAULT;
      uint32_t v28 = 42;
LABEL_10:
      _os_log_impl(&dword_1BD672000, v26, v27, v25, buf, v28);
    }
LABEL_11:
    *__error() = v22;
  }
LABEL_12:
  if (v60) {
    free(v15);
  }
}

uint64_t changesExistingSyndicationAttributes(uint64_t a1, uint64_t a2, CFDictionaryRef theDict)
{
  size_t v17 = 0;
  unint64_t v18 = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"com_apple_mobilesms_isHighlightedContent");
  if (Value)
  {
    CFNumberRef v7 = Value;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v7))
    {
      if (!db_get_field(*(int **)(a1 + 1184), a2, "com_apple_mobilesms_isHighlightedContent", &v18, &v17))
      {
        dev_t valuePtr = 0;
        if (CFNumberGetValue(v7, kCFNumberSInt64Type, &valuePtr))
        {
          if (v17 && *v17 != valuePtr) {
            return 1;
          }
        }
      }
      size_t v17 = 0;
    }
  }
  CFNumberRef v9 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"kMDItemSyndicationStatus");
  if (v9)
  {
    CFNumberRef v10 = v9;
    CFTypeID v11 = CFNumberGetTypeID();
    if (v11 == CFGetTypeID(v10)
      && !db_get_field(*(int **)(a1 + 1184), a2, "kMDItemSyndicationStatus", &v18, &v17))
    {
      dev_t valuePtr = 0;
      if (CFNumberGetValue(v10, kCFNumberSInt64Type, &valuePtr))
      {
        if (v17 && *v17 != valuePtr) {
          return 1;
        }
      }
    }
  }
  dev_t valuePtr = 0;
  uint64_t result = (uint64_t)CFDictionaryGetValue(theDict, @"com_apple_mobilesms_isChatAutoDonating");
  if (result)
  {
    CFBooleanRef v13 = (const __CFBoolean *)result;
    CFTypeID v14 = CFBooleanGetTypeID();
    if (v14 == CFGetTypeID(v13)
      && !db_get_field(*(int **)(a1 + 1184), a2, "com_apple_mobilesms_isChatAutoDonating", &v18, &valuePtr))
    {
      int v15 = CFBooleanGetValue(v13);
      if (valuePtr)
      {
        if (*valuePtr != v15) {
          return 1;
        }
      }
    }
    return 0;
  }
  return result;
}

void _SIConsistencyCheck(uint64_t a1)
{
  if (a1 && *(void *)(a1 + 1184))
  {
    uint64_t v2 = *(void *)(a1 + 1056);
    if (v2) {
      si_enqueue_work_with_qos(v2, 9, (uint64_t)si_consistencyCheck, a1);
    }
  }
}

void __processOneCS_block_invoke_1322(uint64_t a1, CFArrayRef theArray, uint64_t a3)
{
  if (a3 == 4)
  {
    CFIndex v5 = 0;
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    do
    {
      uint64_t valuePtr = 0;
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, v5);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, &valuePtr);
      if (valuePtr)
      {
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) |= 1 << *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8)
                                                                                        + 24);
        CFNumberRef v8 = CFNumberCreate(v6, kCFNumberSInt64Type, &valuePtr);
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), v8);
        CFRelease(v8);
      }
      uint64_t v9 = *(void *)(a1 + 40);
      if (*(unsigned char *)(a1 + 80))
      {
        if ((*(void *)(a1 + 64) >> *(_DWORD *)(*(void *)(v9 + 8) + 24)))
        {
          ++*(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
          uint64_t v9 = *(void *)(a1 + 40);
        }
      }
      ++*(_DWORD *)(*(void *)(v9 + 8) + 24);
      ++v5;
    }
    while (v5 != 4);
  }
  else if (*(unsigned char *)(a1 + 80))
  {
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v11 = 4;
    do
    {
      uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8);
      int v13 = *(_DWORD *)(v12 + 24);
      if (((1 << v13) & *(void *)(a1 + 64)) != 0)
      {
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) |= 1 << v13;
        uint64_t valuePtr = 0;
        CFArrayRef v14 = *(const __CFArray **)(a1 + 72);
        uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
        CFIndex v16 = *(int *)(v15 + 24);
        *(_DWORD *)(v15 + 24) = v16 + 1;
        CFNumberRef v17 = (const __CFNumber *)CFArrayGetValueAtIndex(v14, v16);
        CFNumberGetValue(v17, kCFNumberSInt64Type, &valuePtr);
        CFNumberRef v18 = CFNumberCreate(v10, kCFNumberSInt64Type, &valuePtr);
        CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), v18);
        CFRelease(v18);
        uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8);
        int v13 = *(_DWORD *)(v12 + 24);
      }
      *(_DWORD *)(v12 + 24) = v13 + 1;
      --v11;
    }
    while (v11);
  }
  else
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += 4;
  }
}

CFMutableStringRef safeCFStringCopy(const __CFString *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFIndex Length = CFStringGetLength(a1);
  return CFStringCreateMutableCopy(v2, Length, a1);
}

void updatedRelatedPersons(uint64_t a1, const __CFArray *a2, const __CFArray *a3, uint64_t a4, const void *a5)
{
  unint64_t v10 = 86400 * ((unint64_t)CFAbsoluteTimeGetCurrent() / 0x15180);
  unint64_t v11 = (unint64_t)MEMORY[0x1C187FB10](a4);
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDateRef v12 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (double)v11);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 328));
  if (CFEqual(a5, @"com.apple.mobilemail"))
  {
    int v13 = (__CFBag **)(a1 + 400);
  }
  else if (CFEqual(a5, @"com.apple.MobileSMS"))
  {
    int v13 = (__CFBag **)(a1 + 464);
  }
  else if (CFEqual(a5, @"com.apple.mobilecal"))
  {
    int v13 = (__CFBag **)(a1 + 528);
  }
  else if (CFEqual(a5, @"com.apple.CloudDocs.iCloudDriveFileProvider") {
         || CFEqual(a5, @"com.apple.CloudDocs.iCloudDriveFileProviderManaged")
  }
         || CFEqual(a5, @"com.apple.CloudDocs.MobileDocumentsFileProvider"))
  {
    int v13 = (__CFBag **)(a1 + 592);
  }
  else
  {
    int v13 = 0;
  }
  CFArrayRef v34 = a3;
  if (v10 <= v11)
  {
    Mutable = *(__CFBag **)(a1 + 336);
    if (!Mutable)
    {
      Mutable = CFBagCreateMutable(allocator, 0, MEMORY[0x1E4F1D520]);
      *(void *)(a1 + 336) = Mutable;
    }
    __int16 v35 = *(__CFBag **)(a1 + 368);
    if (v35)
    {
      if (!v13) {
        goto LABEL_54;
      }
    }
    else
    {
      __int16 v35 = CFBagCreateMutable(allocator, 0, MEMORY[0x1E4F1D520]);
      *(void *)(a1 + 368) = v35;
      Mutable = *(__CFBag **)(a1 + 336);
      if (!v13) {
        goto LABEL_54;
      }
    }
    CFIndex v16 = *v13;
    if (!*v13)
    {
      CFIndex v16 = CFBagCreateMutable(allocator, 0, MEMORY[0x1E4F1D520]);
      char *v13 = v16;
    }
    CFNumberRef v17 = v13[4];
    if (!v17)
    {
      CFNumberRef v17 = CFBagCreateMutable(allocator, 0, MEMORY[0x1E4F1D520]);
      v13[4] = v17;
LABEL_53:
      CFIndex v16 = *v13;
      goto LABEL_55;
    }
    goto LABEL_55;
  }
  if (v11 + 604800 >= v10)
  {
    Mutable = *(__CFBag **)(a1 + 344);
    if (!Mutable)
    {
      Mutable = CFBagCreateMutable(allocator, 0, MEMORY[0x1E4F1D520]);
      *(void *)(a1 + 344) = Mutable;
    }
    __int16 v35 = *(__CFBag **)(a1 + 376);
    if (v35)
    {
      if (!v13) {
        goto LABEL_54;
      }
    }
    else
    {
      __int16 v35 = CFBagCreateMutable(allocator, 0, MEMORY[0x1E4F1D520]);
      *(void *)(a1 + 376) = v35;
      Mutable = *(__CFBag **)(a1 + 344);
      if (!v13) {
        goto LABEL_54;
      }
    }
    uint64_t v15 = v13 + 1;
    CFIndex v16 = v13[1];
    if (!v16)
    {
      CFIndex v16 = CFBagCreateMutable(allocator, 0, MEMORY[0x1E4F1D520]);
      *uint64_t v15 = v16;
    }
    CFNumberRef v17 = v13[5];
    if (!v17)
    {
      CFNumberRef v17 = CFBagCreateMutable(allocator, 0, MEMORY[0x1E4F1D520]);
      v13[5] = v17;
      goto LABEL_52;
    }
    goto LABEL_55;
  }
  if (v11 + 2592000 < v10)
  {
    Mutable = *(__CFBag **)(a1 + 360);
    if (!Mutable)
    {
      Mutable = CFBagCreateMutable(allocator, 0, MEMORY[0x1E4F1D520]);
      *(void *)(a1 + 360) = Mutable;
    }
    __int16 v35 = *(__CFBag **)(a1 + 392);
    if (!v35)
    {
      __int16 v35 = CFBagCreateMutable(allocator, 0, MEMORY[0x1E4F1D520]);
      *(void *)(a1 + 392) = v35;
      Mutable = *(__CFBag **)(a1 + 360);
    }
    if (v13)
    {
      uint64_t v15 = v13 + 3;
      CFIndex v16 = v13[3];
      if (!v16)
      {
        CFIndex v16 = CFBagCreateMutable(allocator, 0, MEMORY[0x1E4F1D520]);
        *uint64_t v15 = v16;
      }
      CFNumberRef v17 = v13[7];
      if (!v17)
      {
        CFNumberRef v17 = CFBagCreateMutable(allocator, 0, MEMORY[0x1E4F1D520]);
        v13[7] = v17;
LABEL_52:
        int v13 = v15;
        goto LABEL_53;
      }
      goto LABEL_55;
    }
LABEL_54:
    CFIndex v16 = 0;
    CFNumberRef v17 = 0;
    goto LABEL_55;
  }
  Mutable = *(__CFBag **)(a1 + 352);
  if (!Mutable)
  {
    Mutable = CFBagCreateMutable(allocator, 0, MEMORY[0x1E4F1D520]);
    *(void *)(a1 + 352) = Mutable;
  }
  __int16 v35 = *(__CFBag **)(a1 + 384);
  if (!v35)
  {
    __int16 v35 = CFBagCreateMutable(allocator, 0, MEMORY[0x1E4F1D520]);
    *(void *)(a1 + 384) = v35;
    Mutable = *(__CFBag **)(a1 + 352);
  }
  if (!v13) {
    goto LABEL_54;
  }
  uint64_t v15 = v13 + 2;
  CFIndex v16 = v13[2];
  if (!v16)
  {
    CFIndex v16 = CFBagCreateMutable(allocator, 0, MEMORY[0x1E4F1D520]);
    *uint64_t v15 = v16;
  }
  CFNumberRef v17 = v13[6];
  if (!v17)
  {
    CFNumberRef v17 = CFBagCreateMutable(allocator, 0, MEMORY[0x1E4F1D520]);
    v13[6] = v17;
    goto LABEL_52;
  }
LABEL_55:
  if (a2)
  {
    CFIndex Count = CFArrayGetCount(a2);
    if ((unint64_t)(Count - 1) <= 3)
    {
      CFIndex v19 = Count;
      CFIndex v20 = 0;
      do
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, v20);
        CFTypeID v22 = CFGetTypeID(ValueAtIndex);
        if (v22 == CFStringGetTypeID())
        {
          CFIndex Length = CFStringGetLength(ValueAtIndex);
          CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(allocator, Length, ValueAtIndex);
          CFBagAddValue(Mutable, MutableCopy);
          if (v16) {
            CFBagAddValue(v16, MutableCopy);
          }
          CFDateRef Value = (const __CFDate *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 656), MutableCopy);
          if (!Value || CFDateCompare(v12, Value, 0) == kCFCompareGreaterThan) {
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 656), MutableCopy, v12);
          }
          CFRelease(MutableCopy);
        }
        ++v20;
      }
      while (v19 != v20);
    }
  }
  if (v34)
  {
    CFIndex v26 = CFArrayGetCount(v34);
    if ((unint64_t)(v26 - 1) <= 3)
    {
      CFIndex v27 = v26;
      CFIndex v28 = 0;
      do
      {
        CFStringRef v29 = (const __CFString *)CFArrayGetValueAtIndex(v34, v28);
        CFTypeID v30 = CFGetTypeID(v29);
        if (v30 == CFStringGetTypeID())
        {
          CFIndex v31 = CFStringGetLength(v29);
          CFMutableStringRef v32 = CFStringCreateMutableCopy(allocator, v31, v29);
          CFBagAddValue(v35, v32);
          if (v17) {
            CFBagAddValue(v17, v32);
          }
          CFDateRef v33 = (const __CFDate *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 656), v32);
          if (!v33 || CFDateCompare(v12, v33, 0) == kCFCompareGreaterThan) {
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 656), v32, v12);
          }
          CFRelease(v32);
        }
        ++v28;
      }
      while (v27 != v28);
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 328));
  CFRelease(v12);
}

void si_consistencyCheck(uint64_t a1, int a2)
{
  if (!a2)
  {
    CFArrayRef v3 = *(const __CFArray **)(a1 + 2360);
    if (v3 && CFArrayGetCount(v3))
    {
      uint64_t v4 = *(void *)(a1 + 1056);
      si_enqueue_work_with_qos(v4, 9, (uint64_t)_si_consistencyCheckAfterCompact, a1);
    }
    else
    {
      _si_consistencyCheck(a1);
    }
  }
}

void _si_consistencyCheck(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  bzero(v32, 0x400uLL);
  int v2 = fcntl(*(_DWORD *)(a1 + 32), 50, v32);
  if (v32[0]) {
    BOOL v3 = v2 < 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v32;
  }
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v18 = a1;
  uint64_t v19 = 0;
  CFIndex v5 = si_scheduler_suspend(*(void *)(a1 + 864));
  CFAllocatorRef v6 = si_scheduler_suspend(*(void *)(a1 + 872));
  CFNumberRef v7 = si_scheduler_suspend(*(void *)(a1 + 864));
  atomic_fetch_add((atomic_uint *volatile)(a1 + 1444), 1u);
  CFNumberRef v8 = si_scheduler_suspend(*(void *)(a1 + 872));
  atomic_fetch_add((atomic_uint *volatile)(a1 + 1444), 0xFFFFFFFF);
  int v9 = *__error();
  unint64_t v10 = _SILogForLogForCategory(7);
  os_log_type_t v11 = dword_1E9FC90C0 < 3;
  if (os_log_type_enabled(v10, (os_log_type_t)(dword_1E9FC90C0 < 3)))
  {
    *(_DWORD *)long long buf = 136315138;
    BOOL v23 = v4;
    _os_log_impl(&dword_1BD672000, v10, v11, "*warn* Starting internal consistency check for %s", buf, 0xCu);
  }
  *__error() = v9;
  *(_DWORD *)long long buf = 0;
  if (fd_setDir(*(unsigned int *)(a1 + 32), (int *)buf))
  {
    disableProcMon();
    int v12 = db_apply(*(int **)(a1 + 1184), (uint64_t (*)(uint64_t, void, uint64_t))check_consistency, (uint64_t)&v18);
    enableProcMon();
    int v13 = *(_DWORD *)buf;
    MEMORY[0x1C1882290](*(unsigned int *)buf);
    if ((v13 & 0x80000000) == 0) {
      close(v13);
    }
  }
  else
  {
    int v12 = -1;
  }
  int v14 = *__error();
  uint64_t v15 = _SILogForLogForCategory(7);
  os_log_type_t v16 = dword_1E9FC90C0 < 3;
  if (os_log_type_enabled(v15, (os_log_type_t)(dword_1E9FC90C0 < 3)))
  {
    *(_DWORD *)long long buf = 136316162;
    BOOL v23 = v4;
    __int16 v24 = 1024;
    int v25 = v19;
    __int16 v26 = 1024;
    int v27 = HIDWORD(v20);
    __int16 v28 = 1024;
    int v29 = v20 + HIDWORD(v19);
    __int16 v30 = 1024;
    int v31 = v21;
    _os_log_impl(&dword_1BD672000, v15, v16, "*warn* Finished internal consistency check for %s. Checks: %d Missing:%d Inconsistent:%d Missing deletes:%d", buf, 0x24u);
  }
  *__error() = v14;
  si_scheduler_resume(*(void *)(a1 + 864), v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 17066);
  si_scheduler_resume(*(void *)(a1 + 872), v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 17067);
  si_scheduler_resume(*(void *)(a1 + 872), v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 17068);
  si_scheduler_resume(*(void *)(a1 + 864), v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 17069);
  if (!v12)
  {
    SISetProperty(a1, @"kSIRepairedIndex", (const void *)*MEMORY[0x1E4F1CFD0]);
    CFStringRef v17 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const char *)sysVersionCStr, 0x8000100u);
    SISetProperty(a1, @"kSIConsistencyCheck", v17);
    CFRelease(v17);
  }
}

uint64_t SISetProperty(uint64_t result, const void *a2, const void *a3)
{
  if (result)
  {
    uint64_t v3 = result;
    if (*(void *)(result + 1184))
    {
      if (CFEqual(@"database.shutdowntime", a2))
      {
        si_scheduler_boost_and_forget(*(void *)(v3 + 864));
        si_scheduler_boost_and_forget(*(void *)(v3 + 944));
      }
      return si_set_property(v3, a2, a3, 0, 0);
    }
  }
  return result;
}

uint64_t check_consistency(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)a3;
  char v6 = db_corespotlight_store(a1);
  ++*(_DWORD *)(a3 + 8);
  if (*(unsigned char *)(v5 + 2424)) {
    return 0;
  }
  unint64_t v8 = a2[4];
  if (v8 + 1 < 2) {
    return 1;
  }
  char v10 = v6;
  bzero(v54, 0x400uLL);
  uint64_t v11 = si_indexForDocId(v5, v8);
  if (v11)
  {
    uint64_t v12 = _CIGetOIDForDocId(v11, v8, 0);
    if (v12 == *a2) {
      return 1;
    }
    uint64_t v13 = v12;
    if (v12)
    {
      if ((v10 & 1) == 0)
      {
        uint64_t v14 = (*(uint64_t (**)(void))(*(void *)(v5 + 1408) + 40))();
        if (v14)
        {
          uint64_t v15 = v14;
          int v16 = *__error();
          CFStringRef v17 = _SILogForLogForCategory(7);
          os_log_type_t v18 = 2 * (dword_1E9FC90C0 < 4);
          if (os_log_type_enabled(v17, v18))
          {
            uint64_t v19 = *a2;
            uint64_t v20 = a2[4];
            int v46 = 134218754;
            uint64_t v47 = v19;
            __int16 v48 = 2048;
            uint64_t v49 = v13;
            __int16 v50 = 2048;
            uint64_t v51 = v20;
            __int16 v52 = 2080;
            uint64_t v53 = v15;
            _os_log_impl(&dword_1BD672000, v17, v18, "Index/sdb inconsistency for (sdb)oid %lld; index has oid %lld. doc id: %lld. path: %s",
              (uint8_t *)&v46,
              0x2Au);
          }
          *__error() = v16;
          uint64_t v21 = *a2;
          uint64_t v7 = 1;
          (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v5 + 2352) + 16))(*(void *)(*(void *)(v5 + 2352) + 144), v21, 1, 0);
          ++*(_DWORD *)(a3 + 12);
          return v7;
        }
      }
      ++*(_DWORD *)(a3 + 24);
      if (dword_1E9FC90C0 < 5)
      {
LABEL_23:
        _SIDeleteAttributes(v5, *a2);
        return 1;
      }
      int v30 = *__error();
      int v31 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v42 = *a2;
        int v46 = 134217984;
        uint64_t v47 = v42;
        uint64_t v33 = "delete attributes consistancy 2 oid: %lld";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if ((v10 & 1) != 0 || (uint64_t v34 = (*(uint64_t (**)(void))(*(void *)(v5 + 1408) + 40))()) == 0)
    {
      if (dword_1E9FC90C0 >= 5)
      {
        int v43 = *__error();
        char v44 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v45 = *a2;
          int v46 = 134217984;
          uint64_t v47 = v45;
          _os_log_impl(&dword_1BD672000, v44, OS_LOG_TYPE_DEFAULT, "delete attributes consistancy oid: %lld", (uint8_t *)&v46, 0xCu);
        }
        *__error() = v43;
      }
      _SIDeleteAttributes(v5, *a2);
      ++*(_DWORD *)(a3 + 24);
      return 1;
    }
    uint64_t v35 = v34;
    int v36 = *__error();
    size_t v37 = _SILogForLogForCategory(7);
    os_log_type_t v38 = 2 * (dword_1E9FC90C0 < 4);
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = *a2;
      uint64_t v40 = a2[4];
      int v46 = 134218754;
      uint64_t v47 = v39;
      __int16 v48 = 2048;
      uint64_t v49 = 0;
      __int16 v50 = 2048;
      uint64_t v51 = v40;
      __int16 v52 = 2080;
      uint64_t v53 = v35;
      _os_log_impl(&dword_1BD672000, v37, v38, "Index/sdb inconsistency for (sdb)oid %lld; index has oid %lld. doc id: %lld. path: %s",
        (uint8_t *)&v46,
        0x2Au);
    }
    *__error() = v36;
    ++*(_DWORD *)(a3 + 20);
    uint64_t v41 = *a2;
    uint64_t v7 = 1;
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v5 + 2352) + 16))(*(void *)(*(void *)(v5 + 2352) + 144), v41, 1, 0);
  }
  else
  {
    if ((v10 & 1) != 0 || (uint64_t v22 = (*(uint64_t (**)(void))(*(void *)(v5 + 1408) + 40))()) == 0)
    {
      ++*(_DWORD *)(a3 + 24);
      if (dword_1E9FC90C0 < 5) {
        goto LABEL_23;
      }
      int v30 = *__error();
      int v31 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v32 = *a2;
        int v46 = 134217984;
        uint64_t v47 = v32;
        uint64_t v33 = "delete attributes consistancy 3 oid: %lld";
LABEL_33:
        _os_log_impl(&dword_1BD672000, v31, OS_LOG_TYPE_DEFAULT, v33, (uint8_t *)&v46, 0xCu);
      }
LABEL_34:
      *__error() = v30;
      goto LABEL_23;
    }
    uint64_t v23 = v22;
    int v24 = *__error();
    int v25 = _SILogForLogForCategory(7);
    os_log_type_t v26 = 2 * (dword_1E9FC90C0 < 4);
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = *a2;
      uint64_t v28 = a2[4];
      int v46 = 134218498;
      uint64_t v47 = v27;
      __int16 v48 = 2048;
      uint64_t v49 = v28;
      __int16 v50 = 2080;
      uint64_t v51 = v23;
      _os_log_impl(&dword_1BD672000, v25, v26, "Index/sdb inconsistency; wrong doc id for oid %lld; has %lld. path:%s",
        (uint8_t *)&v46,
        0x20u);
    }
    *__error() = v24;
    uint64_t v29 = *a2;
    uint64_t v7 = 1;
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v5 + 2352) + 16))(*(void *)(*(void *)(v5 + 2352) + 144), v29, 1, 0);
    ++*(_DWORD *)(a3 + 16);
  }
  return v7;
}

void _SIDeleteAttributes(uint64_t a1, uint64_t a2)
{
  if (a2 && *(void *)(a1 + 1048))
  {
    uint64_t v4 = malloc_type_calloc(1uLL, 0x50uLL, 0x10E0040BFFD03D2uLL);
    v4[3] = a2;
    *uint64_t v4 = a1;
    *((_DWORD *)v4 + 12) = 0;
    uint64_t v5 = *(void *)(a1 + 1048);
    si_enqueue_barrier(v5, (uint64_t)si_delete_attributes, (uint64_t)v4);
  }
}

void si_delete_attributes(uint64_t *a1, int a2)
{
  if (!a2)
  {
    uint64_t v3 = *a1;
    unsigned int v11 = 0;
    if (fd_setDir(*(unsigned int *)(v3 + 32), (int *)&v11))
    {
      char v10 = 0;
      if (*(unsigned char *)(v3 + 2064)) {
        uint64_t v4 = &v10;
      }
      else {
        uint64_t v4 = 0;
      }
      unint64_t v5 = a1[3];
      if (*((_DWORD *)a1 + 12))
      {
        uint64_t v6 = *(void *)(v3 + 288);
        if (!v6)
        {
          os_unfair_lock_lock((os_unfair_lock_t)(v3 + 280));
          if (!*(void *)(v3 + 288))
          {
            uint64_t v7 = *(void *)(v3 + 296);
            if (v7)
            {
              *(void *)(v3 + 288) = v7;
              *(void *)(v3 + 296) = 0;
            }
            else
            {
              uint64_t Mutable = RLEOIDArrayCreateMutable((const __CFAllocator *)*MEMORY[0x1E4F1CF80]);
              __dmb(0xBu);
              *(void *)(v3 + 288) = Mutable;
            }
          }
          os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 280));
          uint64_t v6 = *(void *)(v3 + 288);
        }
        _si_delete_attributes_inner(v3, v5, 0, 0, 0, v6, v4);
        si_finish_text_store_deletions(v3);
        si_indexDeleteDeferredItemsIfReady(v3);
      }
      else
      {
        _si_delete_attributes_inner(v3, a1[3], 0, 0, 0, 0, v4);
        si_finish_text_store_deletions(v3);
      }
      if (v10) {
        notify_post("com.apple.spotlight.SyndicatedContentDeleted");
      }
      int v9 = v11;
      MEMORY[0x1C1882290](v11);
      if ((v9 & 0x80000000) == 0) {
        close(v9);
      }
    }
  }
  free(a1);
}

void _si_consistencyCheckAfterCompact(uint64_t a1, int a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    CFArrayRef v3 = *(const __CFArray **)(a1 + 2360);
    if (v3 && CFArrayGetCount(v3))
    {
      bzero(v13, 0x400uLL);
      int v4 = fcntl(*(_DWORD *)(a1 + 32), 50, v13);
      int v5 = v13[0];
      int v6 = *__error();
      uint64_t v7 = _SILogForLogForCategory(7);
      os_log_type_t v8 = dword_1E9FC90C0 < 3;
      if (os_log_type_enabled(v7, (os_log_type_t)(dword_1E9FC90C0 < 3)))
      {
        if (v5) {
          BOOL v9 = v4 < 0;
        }
        else {
          BOOL v9 = 1;
        }
        if (v9) {
          char v10 = 0;
        }
        else {
          char v10 = v13;
        }
        *(_DWORD *)long long buf = 136315138;
        uint64_t v12 = v10;
        _os_log_impl(&dword_1BD672000, v7, v8, "*warn* Skipping consistency check for %s", buf, 0xCu);
      }
      *__error() = v6;
    }
    else
    {
      _si_consistencyCheck(a1);
    }
  }
}

CFStringRef CopyUserTag(const __CFString *a1)
{
  CFRange v2 = CFStringFind(a1, @"\n", 0);
  if (v2.length)
  {
    v4.length = v2.location;
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    v4.location = 0;
    return CFStringCreateWithSubstring(v3, a1, v4);
  }
  else
  {
    if (a1) {
      CFRetain(a1);
    }
    return a1;
  }
}

void __postPreprocess_block_invoke_2(uint64_t a1, const __CFArray *a2)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  if (TypeID == CFGetTypeID(a2))
  {
    int v5 = *(__CFArray **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v6.length = CFArrayGetCount(a2);
    v6.location = 0;
    CFArrayAppendArray(v5, a2, v6);
  }
  else
  {
    CFTypeID v7 = CFStringGetTypeID();
    if (v7 == CFGetTypeID(a2))
    {
      os_log_type_t v8 = *(__CFArray **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      CFArrayAppendValue(v8, a2);
    }
  }
}

CFArrayRef __postPreprocess_block_invoke()
{
  v2[1] = *(const void **)MEMORY[0x1E4F143B8];
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  v2[0] = @"MDSystemFile";
  CFArrayRef result = CFArrayCreate(v0, v2, 1, MEMORY[0x1E4F1D510]);
  postPreprocess_arrSystemFile = (uint64_t)result;
  return result;
}

CFSetRef __preProcess_block_invoke()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  v1[0] = xmmword_1E63425D8;
  v1[1] = *(_OWORD *)off_1E63425E8;
  CFSetRef result = CFSetCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)v1, 4, MEMORY[0x1E4F1D548]);
  preProcess_localizeFieldNames = (uint64_t)result;
  return result;
}

uint64_t _CopyUTITypeInfo(const __CFString *a1, uint64_t a2, CFTypeRef *a3, CFURLRef *a4)
{
  if (a2 > 9) {
    return 0;
  }
  os_log_type_t v8 = (void *)MEMORY[0x1C1881FD0]();
  CFDictionaryRef v9 = UTTypeCopyDeclaration(a1);
  if (!v9) {
    return 0;
  }
  CFDateRef Value = CFDictionaryGetValue(v9, (const void *)*MEMORY[0x1E4F22598]);
  if (Value)
  {
    if (a3) {
      *a3 = CFRetain(Value);
    }
    if (a4)
    {
      unsigned int v11 = (void *)MEMORY[0x1C1881FD0]();
      *a4 = UTTypeCopyDeclaringBundleURL(a1);
    }
    uint64_t v12 = 1;
  }
  else
  {
    CFArrayRef v13 = (const __CFArray *)CFDictionaryGetValue(v9, (const void *)*MEMORY[0x1E4F22578]);
    if (!v13) {
      goto LABEL_16;
    }
    CFArrayRef ValueAtIndex = v13;
    CFTypeID TypeID = CFArrayGetTypeID();
    if (TypeID == CFGetTypeID(ValueAtIndex) && CFArrayGetCount(ValueAtIndex) == 1) {
      CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
    }
    CFTypeID v16 = CFStringGetTypeID();
    if (v16 == CFGetTypeID(ValueAtIndex)) {
      uint64_t v12 = _CopyUTITypeInfo(ValueAtIndex, a2 + 1, a3, a4);
    }
    else {
LABEL_16:
    }
      uint64_t v12 = 0;
  }
  CFRelease(v9);
  return v12;
}

CFTypeID __isAppleInternalInstall_block_invoke()
{
  CFTypeID result = MGCopyAnswer();
  if (result
    && (uint64_t v1 = (const void *)result, v2 = CFGetTypeID((CFTypeRef)result), result = CFStringGetTypeID(), v2 == result))
  {
    CFTypeID result = CFEqual(v1, @"Internal");
    BOOL v3 = result != 0;
  }
  else
  {
    BOOL v3 = 0;
  }
  isAppleInternalInstall_isInternalInstall = v3;
  return result;
}

void ___copyMDPlistObject_block_invoke_2(uint64_t a1, const char *a2, uint64_t a3, long long *a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  long long v12 = *a4;
  uint64_t v13 = *((void *)a4 + 2);
  uint64_t v8 = _copyMDPlistObject(v6, &v12, v7);
  if (v8)
  {
    CFDictionaryRef v9 = (const void *)v8;
    CFStringRef v10 = CFStringCreateWithCStringNoCopy(*(CFAllocatorRef *)(a1 + 32), a2, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    if (v10)
    {
      CFStringRef v11 = v10;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), v10, v9);
      CFRelease(v11);
    }
    CFRelease(v9);
  }
}

void __setCSAttributes2_block_invoke(uint64_t a1)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  int v2 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v3 = setThreadIdAndInfo(-1, (long long *)sJournalCtxExceptionCallbacks, *(void *)(a1 + 32), 0x40000000, v2);
  unsigned int v56 = HIDWORD(v3);
  unsigned int v57 = v3;
  unsigned int v54 = v5;
  unsigned int v55 = v4;
  uint64_t v6 = *(void *)&threadData[18 * v3 + 2];
  uint64_t v7 = v6 + 320 * HIDWORD(v3);
  *(unsigned char *)(v7 + 216) = 0;
  int v8 = *(_DWORD *)(v7 + 312);
  CFDictionaryRef v9 = *(void (**)(void))(v7 + 224);
  if (v9) {
    v9(*(void *)(v6 + 320 * HIDWORD(v3) + 288));
  }
  unsigned int v53 = v57;
  unsigned int v52 = v56;
  unsigned int v51 = v55;
  unsigned int v50 = v54;
  uint64_t v10 = _setjmp((int *)v7);
  if (v10)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
    }
    *(_DWORD *)(v7 + 312) = v8;
    CIOnThreadCleanUpReset(v50);
    dropThreadId(v53, 1, v2);
    CICleanUpReset(v53, v51);
  }
  else
  {
    if (gCPUCount <= 1) {
      unsigned int v11 = 1;
    }
    else {
      unsigned int v11 = gCPUCount;
    }
    unsigned int v12 = *(_DWORD *)(a1 + 80);
    if (v11 >= v12) {
      unsigned int v11 = *(_DWORD *)(a1 + 80);
    }
    *(void *)long long buf = 0;
    uint64_t v47 = buf;
    if (v11 >= 0x10) {
      uint64_t v13 = 16;
    }
    else {
      uint64_t v13 = v11;
    }
    uint64_t v48 = 0x2000000000;
    char v49 = 0;
    int v36 = v2;
    int v35 = v8;
    if (v13 == 1)
    {
      MEMORY[0x1F4188790](v10);
      bzero(v32, 0x1000uLL);
      _SIStackAllocatorCreate(v32, 4096, indexingZone);
      if (*(_DWORD *)(a1 + 80))
      {
        unint64_t v15 = 0;
        CFTypeID v16 = (int *)&unk_1E9FC9000;
        *(void *)&long long v14 = 138412546;
        long long v34 = v14;
        do
        {
          if (!v32[3]) {
            v32[1] = (v32[0] + 55) & 0xFFFFFFFFFFFFFFF0;
          }
          long long v44 = 0uLL;
          uint64_t v45 = 0;
          *(_OWORD *)unint64_t v58 = *(_OWORD *)(a1 + 40);
          *(void *)&v58[16] = *(void *)(a1 + 56);
          _MDPlistArrayGetPlistObjectAtIndex();
          *(_OWORD *)unint64_t v58 = v44;
          *(void *)&v58[16] = v45;
          uint64_t v17 = _MDPlistContainerCopyObject();
          if (v17)
          {
            CFStringRef v18 = (const __CFString *)v17;
            if (v16[45] >= 5)
            {
              int v33 = *__error();
              uint64_t v21 = _SILogForLogForCategory(4);
              if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v22 = *(void *)(a1 + 64);
                *(_DWORD *)unint64_t v58 = v34;
                *(void *)&v58[4] = v22;
                *(_WORD *)&v58[12] = 2112;
                *(void *)&v58[14] = v18;
                _os_log_impl(&dword_1BD672000, v21, OS_LOG_TYPE_DEFAULT, "Index delete bundleID:%@, identifier:%@", v58, 0x16u);
              }
              *__error() = v33;
              CFTypeID v16 = (_DWORD *)&unk_1E9FC9000;
            }
            *(void *)unint64_t v58 = 0;
            if (!si_get_object_for_identifier_createParentDBO(*(void *)(a1 + 72), *(const __CFString **)(a1 + 64), v18, 0, 0, (unint64_t *)v58, 0, 0))
            {
              uint64_t v19 = *(void *)(a1 + 72);
              _si_delete_attributes_inner(v19, *(void *)v58, *(unsigned __int8 *)(a1 + 84), 0, 0, 0, v47 + 24);
              uint64_t v20 = v19;
              CFTypeID v16 = (_DWORD *)&unk_1E9FC9000;
              si_finish_text_store_deletions(v20);
            }
            CFRelease(v18);
          }
          ++v15;
        }
        while (v15 < *(unsigned int *)(a1 + 80));
      }
    }
    else
    {
      size_t v23 = v13;
      int v24 = v13;
      *(void *)&long long v44 = 0;
      uint64_t v25 = *(void *)(a1 + 32);
      if (v24) {
        int v26 = *(_DWORD *)(*(void *)v25 + 32);
      }
      else {
        int v26 = -1;
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __setCSAttributes2_block_invoke_1704;
      block[3] = &unk_1E63426D8;
      block[6] = &v44;
      int v41 = v26;
      unsigned int v42 = v12;
      long long v38 = *(_OWORD *)(a1 + 40);
      uint64_t v39 = *(void *)(a1 + 56);
      long long v40 = *(_OWORD *)(a1 + 64);
      char v43 = *(unsigned char *)(a1 + 84);
      block[5] = v25;
      block[4] = buf;
      dispatch_apply(v23, 0, block);
    }
    if (v47[24] && CFEqual(*(CFTypeRef *)(a1 + 64), @"com.apple.MobileSMS")) {
      notify_post("com.apple.spotlight.SyndicatedContentDeleted");
    }
    uint64_t v27 = *(void *)&threadData[18 * v53 + 2];
    unsigned int v28 = v52;
    uint64_t v29 = v27 + 320 * v52;
    *(_DWORD *)(v29 + 312) = v35;
    int v30 = *(void (**)(void))(v29 + 232);
    int v31 = v36;
    if (v30) {
      v30(*(void *)(v27 + 320 * v28 + 288));
    }
    dropThreadId(v53, 0, v31);
    _Block_object_dispose(buf, 8);
  }
}

void __setCSAttributes2_block_invoke_1707(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unsigned int v2 = *(_DWORD *)(a1 + 136);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __setCSAttributes2_block_invoke_2;
  v6[3] = &__block_descriptor_tmp_1713;
  __int16 v17 = *(_WORD *)(a1 + 140);
  unsigned int v16 = v2;
  int8x16_t v3 = *(int8x16_t *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  int8x16_t v7 = vextq_s8(v3, v3, 8uLL);
  long long v8 = v4;
  uint64_t v9 = *(void *)(a1 + 72);
  long long v10 = *(_OWORD *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 104);
  uint64_t v11 = *(void *)(a1 + 96);
  uint64_t v12 = v1;
  uint64_t v13 = v5;
  long long v14 = *(_OWORD *)(a1 + 112);
  uint64_t v15 = *(void *)(a1 + 128);
  uint64_t v19 = *(void *)(a1 + 158);
  long long v18 = *(_OWORD *)(a1 + 142);
  si_indexingWatchdogPerform(v1, v3.i64[0], v2, 6u, (uint64_t)v6);
}

BOOL getCSInfoAtIndex(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  _MDPlistArrayGetPlistObjectAtIndex();
  if (_MDPlistGetPlistObjectType() == 246)
  {
    _MDPlistDataGetBytePtr();
    _MDPlistGetRootPlistObjectFromBytes();
  }
  if (_MDPlistGetPlistObjectType() != 240) {
    return 0;
  }
  if (_MDPlistArrayGetCount() - 5 < 0xFFFFFFFE) {
    return 0;
  }
  _MDPlistArrayGetPlistObjectAtIndex();
  IntCFDateRef Value = _MDPlistNumberGetIntValue();
  if ((IntValue & 2) != 0) {
    return 0;
  }
  _MDPlistArrayGetPlistObjectAtIndex();
  BOOL v9 = _MDPlistGetPlistObjectType() == 241;
  BOOL result = v9;
  if (v9)
  {
    *(_OWORD *)a3 = 0uLL;
    *(void *)(a3 + 16) = 0;
    *a4 = IntValue;
    *(void *)(a5 + 16) = 0;
    *(_OWORD *)a5 = 0uLL;
  }
  return result;
}

BOOL forceProcessCSSerialForNotes(unsigned int a1, long long *a2)
{
  if (a1)
  {
    uint64_t v4 = 0;
    BOOL v5 = 1;
    while (1)
    {
      long long v10 = 0uLL;
      uint64_t v11 = 0;
      long long v7 = *a2;
      uint64_t v8 = *((void *)a2 + 2);
      if (getCSInfoAtIndex((uint64_t)&v7, v4, (uint64_t)v12, &v9, (uint64_t)&v10))
      {
        long long v7 = v10;
        uint64_t v8 = v11;
        if (attrsKeyValueEnabled()) {
          break;
        }
      }
      uint64_t v4 = (v4 + 1);
      BOOL v5 = v4 < a1;
      if (a1 == v4) {
        return 0;
      }
    }
  }
  else
  {
    return 0;
  }
  return v5;
}

uint64_t __setCSAttributes2_block_invoke_3()
{
  qos_class_self();
  uint64_t result = pthread_qos_max_parallelism();
  _kMDItemRelatedObjectsWithBundle_block_invoke_4_indexingPool = (int)result;
  return result;
}

uint64_t __setCSAttributes2_block_invoke_1704(uint64_t a1)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  makeThreadId();
  int v2 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v3 = setThreadIdAndInfo(*(_DWORD *)(a1 + 96), sFdExceptionCallbacks, 0, 1, v2);
  unsigned int v59 = HIDWORD(v3);
  unsigned int v60 = v3;
  unsigned int v57 = v5;
  unsigned int v58 = v4;
  uint64_t v6 = *(void *)&threadData[18 * v3 + 2];
  uint64_t v7 = v6 + 320 * HIDWORD(v3);
  *(unsigned char *)(v7 + 216) = 0;
  int v8 = *(_DWORD *)(v7 + 312);
  int v9 = *(void (**)(void))(v7 + 224);
  if (v9) {
    v9(*(void *)(v6 + 320 * HIDWORD(v3) + 288));
  }
  unsigned int v56 = v60;
  unsigned int v55 = v59;
  unsigned int v54 = v58;
  unsigned int v53 = v57;
  if (_setjmp((int *)v7))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
    }
    *(_DWORD *)(v7 + 312) = v8;
    CIOnThreadCleanUpReset(v53);
    dropThreadId(v56, 1, v2);
    return CICleanUpReset(v56, v54);
  }
  else
  {
    int v11 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
    unint64_t v12 = setThreadIdAndInfo(-1, (long long *)sJournalCtxExceptionCallbacks, *(void *)(a1 + 40), 0x40000000, v11);
    unsigned int v51 = HIDWORD(v12);
    unsigned int v52 = v12;
    unsigned int v49 = v14;
    unsigned int v50 = v13;
    uint64_t v15 = *(void *)&threadData[18 * v12 + 2];
    uint64_t v16 = v15 + 320 * HIDWORD(v12);
    *(unsigned char *)(v16 + 216) = 0;
    int v17 = *(_DWORD *)(v16 + 312);
    long long v18 = *(void (**)(void))(v16 + 224);
    if (v18) {
      v18(*(void *)(v15 + 320 * HIDWORD(v12) + 288));
    }
    unsigned int v48 = v52;
    unsigned int v47 = v51;
    unsigned int v46 = v50;
    unsigned int v45 = v49;
    uint64_t v19 = _setjmp((int *)v16);
    if (v19)
    {
      uint64_t v20 = (_DWORD *)(v16 + 312);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
      }
      *uint64_t v20 = v17;
      CIOnThreadCleanUpReset(v45);
      dropThreadId(v48, 1, v11);
      CICleanUpReset(v48, v46);
    }
    else
    {
      int v40 = v17;
      int v41 = v11;
      int v42 = v2;
      MEMORY[0x1F4188790](v19);
      bzero(v37, 0x1000uLL);
      _SIStackAllocatorCreate(v37, 4096, indexingZone);
      if (atomic_fetch_add_explicit(*(atomic_ullong *volatile *)(a1 + 48), 1uLL, memory_order_relaxed) < *(unsigned int *)(a1 + 100))
      {
        uint64_t v22 = (int *)&unk_1E9FC9000;
        *(void *)&long long v21 = 138412546;
        long long v39 = v21;
        do
        {
          memset(buf, 0, sizeof(buf));
          uint64_t v44 = 0;
          *(_OWORD *)uint64_t v61 = *(_OWORD *)(a1 + 56);
          *(void *)&v61[16] = *(void *)(a1 + 72);
          _MDPlistArrayGetPlistObjectAtIndex();
          if (!v37[3]) {
            v37[1] = (v37[0] + 55) & 0xFFFFFFFFFFFFFFF0;
          }
          *(_OWORD *)uint64_t v61 = *(_OWORD *)buf;
          *(void *)&v61[16] = v44;
          uint64_t v23 = _MDPlistContainerCopyObject();
          if (v23)
          {
            CFStringRef v24 = (const __CFString *)v23;
            if (v22[45] >= 5)
            {
              int v38 = *__error();
              uint64_t v27 = _SILogForLogForCategory(4);
              if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v28 = *(void *)(a1 + 80);
                *(_DWORD *)uint64_t v61 = v39;
                *(void *)&void v61[4] = v28;
                *(_WORD *)&v61[12] = 2112;
                *(void *)&v61[14] = v24;
                _os_log_impl(&dword_1BD672000, v27, OS_LOG_TYPE_DEFAULT, "Index delete bundleID:%@, identifier:%@", v61, 0x16u);
              }
              *__error() = v38;
              uint64_t v22 = (_DWORD *)&unk_1E9FC9000;
            }
            *(void *)uint64_t v61 = 0;
            if (!si_get_object_for_identifier_createParentDBO(*(void *)(a1 + 88), *(const __CFString **)(a1 + 80), v24, 0, 0, (unint64_t *)v61, 0, 0))
            {
              uint64_t v25 = *(void *)(a1 + 88);
              _si_delete_attributes_inner(v25, *(void *)v61, *(unsigned __int8 *)(a1 + 104), 0, 1, 0, *(void *)(*(void *)(a1 + 32) + 8) + 24);
              uint64_t v26 = v25;
              uint64_t v22 = (_DWORD *)&unk_1E9FC9000;
              si_finish_text_store_deletions(v26);
            }
            CFRelease(v24);
          }
        }
        while (atomic_fetch_add_explicit(*(atomic_ullong *volatile *)(a1 + 48), 1uLL, memory_order_relaxed) < *(unsigned int *)(a1 + 100));
      }
      uint64_t v29 = *(void *)&threadData[18 * v48 + 2];
      unsigned int v30 = v47;
      uint64_t v31 = v29 + 320 * v47;
      *(_DWORD *)(v31 + 312) = v40;
      uint64_t v32 = *(void (**)(void))(v31 + 232);
      if (v32) {
        v32(*(void *)(v29 + 320 * v30 + 288));
      }
      dropThreadId(v48, 0, v41);
      int v2 = v42;
    }
    uint64_t v33 = *(void *)&threadData[18 * v56 + 2];
    unsigned int v34 = v55;
    uint64_t v35 = v33 + 320 * v55;
    *(_DWORD *)(v35 + 312) = v8;
    int v36 = *(void (**)(void))(v35 + 232);
    if (v36) {
      v36(*(void *)(v33 + 320 * v34 + 288));
    }
    return dropThreadId(v56, 0, v2);
  }
}

uint64_t getDeferJournalFd(uint64_t a1, int a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 2320);
  if (v4 || (a2 & 1) != 0)
  {
LABEL_16:
    if (a2)
    {
      if (*(unsigned char *)(a1 + 2064))
      {
        unsigned int v13 = *(atomic_uint **)(a1 + 2104);
        if (v13 && atomic_fetch_add(v13, 0xFFFFFFFF) == 1) {
          _si_mobile_journal_finalize((uint64_t)v13, 1);
        }
        *(void *)(a1 + 2104) = 0;
      }
      *(void *)(a1 + 2320) = 0;
    }
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 32);
    if (v5 == -1)
    {
      uint64_t v15 = __si_assert_copy_extra_625(-1);
      uint64_t v16 = v15;
      int v17 = "";
      if (v15) {
        int v17 = v15;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 3602, "indexFd != -1", v17);
      free(v16);
      if (__valid_fs(-1)) {
        uint64_t v18 = 2989;
      }
      else {
        uint64_t v18 = 3072;
      }
      *(_DWORD *)uint64_t v18 = -559038737;
      abort();
    }
    int v6 = *(_DWORD *)(a1 + 2340);
    if (v6 == 0x7FFFFFFF)
    {
LABEL_11:
      int v9 = __si_assert_copy_extra_625(-1);
      long long v10 = v9;
      int v11 = "";
      if (v9) {
        int v11 = v9;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 3607, "syncCount < 2147483647", v11);
      free(v10);
      if (__valid_fs(-1)) {
        uint64_t v12 = 2989;
      }
      else {
        uint64_t v12 = 3072;
      }
      *(_DWORD *)uint64_t v12 = -559038737;
      abort();
    }
    while (1)
    {
      long long v32 = 0u;
      memset(v33, 0, sizeof(v33));
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      *(_OWORD *)std::string __str = 0u;
      snprintf(__str, 0xFFuLL, "%s%d", "deferAttr.", v6);
      if ((*(_DWORD *)(a1 + 60) & 0xFFFFFFFE) == 2) {
        unsigned __int8 v7 = 2;
      }
      else {
        unsigned __int8 v7 = 0;
      }
      int v8 = fd_create_protected(v5, __str, 536873482, v7);
      if (v8)
      {
        ++*(_DWORD *)(a1 + 2340);
        *(void *)(a1 + 2320) = v8;
        SIActivityJournalNewJournal((os_unfair_lock_s *)(a1 + 2184), (uint64_t)v8);
        _fd_acquire_fd(*(void *)(a1 + 2320), __str);
        uint64_t v4 = *(void *)(a1 + 2320);
        goto LABEL_16;
      }
      if (*__error() != 17) {
        return 0;
      }
      int v6 = *(_DWORD *)(a1 + 2340) + 1;
      *(_DWORD *)(a1 + 2340) = v6;
      if (v6 == 0x7FFFFFFF) {
        goto LABEL_11;
      }
    }
  }
  return v4;
}

uint64_t flushGraphCacheApply2(uint64_t a1, uint64_t a2, void *a3)
{
  v94[4] = *MEMORY[0x1E4F143B8];
  if (*a3) {
    uint64_t v83 = MEMORY[0x1C187F790](*a3, a1);
  }
  else {
    uint64_t v83 = 0;
  }
  uint64_t v5 = a3[1];
  if (v5) {
    uint64_t v82 = MEMORY[0x1C187F790](v5, a1);
  }
  else {
    uint64_t v82 = 0;
  }
  uint64_t v6 = a3[2];
  if (v6) {
    uint64_t v81 = MEMORY[0x1C187F790](v6, a1);
  }
  else {
    uint64_t v81 = 0;
  }
  uint64_t v7 = a3[3];
  if (v7) {
    uint64_t v80 = MEMORY[0x1C187F790](v7, a1);
  }
  else {
    uint64_t v80 = 0;
  }
  uint64_t v8 = a3[4];
  if (v8) {
    uint64_t v79 = MEMORY[0x1C187F790](v8, a1);
  }
  else {
    uint64_t v79 = 0;
  }
  uint64_t v9 = a3[5];
  if (v9) {
    uint64_t v78 = MEMORY[0x1C187F790](v9, a1);
  }
  else {
    uint64_t v78 = 0;
  }
  uint64_t v10 = a3[6];
  if (v10) {
    uint64_t v77 = MEMORY[0x1C187F790](v10, a1);
  }
  else {
    uint64_t v77 = 0;
  }
  uint64_t v11 = a3[7];
  if (v11) {
    uint64_t v76 = MEMORY[0x1C187F790](v11, a1);
  }
  else {
    uint64_t v76 = 0;
  }
  uint64_t v12 = a3[8];
  if (v12) {
    uint64_t v75 = MEMORY[0x1C187F790](v12, a1);
  }
  else {
    uint64_t v75 = 0;
  }
  uint64_t v13 = a3[9];
  if (v13) {
    uint64_t v74 = MEMORY[0x1C187F790](v13, a1);
  }
  else {
    uint64_t v74 = 0;
  }
  uint64_t v14 = a3[10];
  if (v14) {
    uint64_t v73 = MEMORY[0x1C187F790](v14, a1);
  }
  else {
    uint64_t v73 = 0;
  }
  uint64_t v15 = a3[11];
  if (v15) {
    uint64_t v72 = MEMORY[0x1C187F790](v15, a1);
  }
  else {
    uint64_t v72 = 0;
  }
  uint64_t v16 = a3[12];
  if (v16) {
    uint64_t v71 = MEMORY[0x1C187F790](v16, a1);
  }
  else {
    uint64_t v71 = 0;
  }
  uint64_t v17 = a3[13];
  if (v17) {
    uint64_t v70 = MEMORY[0x1C187F790](v17, a1);
  }
  else {
    uint64_t v70 = 0;
  }
  uint64_t v18 = a3[14];
  if (v18) {
    uint64_t v69 = MEMORY[0x1C187F790](v18, a1);
  }
  else {
    uint64_t v69 = 0;
  }
  uint64_t v19 = a3[15];
  if (v19) {
    uint64_t v68 = MEMORY[0x1C187F790](v19, a1);
  }
  else {
    uint64_t v68 = 0;
  }
  uint64_t v20 = a3[16];
  if (v20) {
    uint64_t v67 = MEMORY[0x1C187F790](v20, a1);
  }
  else {
    uint64_t v67 = 0;
  }
  uint64_t v21 = a3[17];
  if (v21) {
    uint64_t v66 = MEMORY[0x1C187F790](v21, a1);
  }
  else {
    uint64_t v66 = 0;
  }
  uint64_t v22 = a3[18];
  if (v22) {
    uint64_t v65 = MEMORY[0x1C187F790](v22, a1);
  }
  else {
    uint64_t v65 = 0;
  }
  uint64_t v23 = a3[19];
  if (v23) {
    uint64_t v64 = MEMORY[0x1C187F790](v23, a1);
  }
  else {
    uint64_t v64 = 0;
  }
  uint64_t v24 = a3[20];
  if (v24) {
    uint64_t v63 = MEMORY[0x1C187F790](v24, a1);
  }
  else {
    uint64_t v63 = 0;
  }
  uint64_t v25 = a3[21];
  if (v25) {
    uint64_t v62 = MEMORY[0x1C187F790](v25, a1);
  }
  else {
    uint64_t v62 = 0;
  }
  uint64_t v26 = a3[22];
  if (v26) {
    uint64_t v61 = MEMORY[0x1C187F790](v26, a1);
  }
  else {
    uint64_t v61 = 0;
  }
  uint64_t v27 = a3[23];
  if (v27) {
    uint64_t v60 = MEMORY[0x1C187F790](v27, a1);
  }
  else {
    uint64_t v60 = 0;
  }
  uint64_t v28 = a3[24];
  if (v28) {
    uint64_t v59 = MEMORY[0x1C187F790](v28, a1);
  }
  else {
    uint64_t v59 = 0;
  }
  uint64_t v29 = a3[25];
  if (v29) {
    uint64_t v58 = MEMORY[0x1C187F790](v29, a1);
  }
  else {
    uint64_t v58 = 0;
  }
  uint64_t v30 = a3[26];
  if (v30) {
    uint64_t v57 = MEMORY[0x1C187F790](v30, a1);
  }
  else {
    uint64_t v57 = 0;
  }
  uint64_t v31 = a3[27];
  if (v31) {
    uint64_t v56 = MEMORY[0x1C187F790](v31, a1);
  }
  else {
    uint64_t v56 = 0;
  }
  uint64_t v32 = a3[28];
  if (v32) {
    uint64_t v55 = MEMORY[0x1C187F790](v32, a1);
  }
  else {
    uint64_t v55 = 0;
  }
  uint64_t v33 = a3[29];
  if (v33) {
    uint64_t v54 = MEMORY[0x1C187F790](v33, a1);
  }
  else {
    uint64_t v54 = 0;
  }
  uint64_t v34 = a3[30];
  if (v34) {
    uint64_t v53 = MEMORY[0x1C187F790](v34, a1);
  }
  else {
    uint64_t v53 = 0;
  }
  uint64_t v35 = a3[31];
  if (v35) {
    uint64_t v36 = MEMORY[0x1C187F790](v35, a1);
  }
  else {
    uint64_t v36 = 0;
  }
  uint64_t v37 = a3[32];
  if (v37) {
    uint64_t v38 = MEMORY[0x1C187F790](v37, a1);
  }
  else {
    uint64_t v38 = 0;
  }
  uint64_t v39 = a3[33];
  if (v39) {
    uint64_t v40 = MEMORY[0x1C187F790](v39, a1);
  }
  else {
    uint64_t v40 = 0;
  }
  uint64_t v41 = a3[34];
  if (v41) {
    uint64_t v42 = MEMORY[0x1C187F790](v41, a1);
  }
  else {
    uint64_t v42 = 0;
  }
  uint64_t v43 = a3[35];
  if (v43) {
    uint64_t v44 = MEMORY[0x1C187F790](v43, a1);
  }
  else {
    uint64_t v44 = 0;
  }
  uint64_t v45 = a3[36];
  if (v45) {
    uint64_t v46 = MEMORY[0x1C187F790](v45, a1);
  }
  else {
    uint64_t v46 = 0;
  }
  uint64_t v47 = a3[37];
  if (v47) {
    uint64_t v48 = MEMORY[0x1C187F790](v47, a1);
  }
  else {
    uint64_t v48 = 0;
  }
  uint64_t v49 = a3[38];
  if (v49) {
    uint64_t v50 = MEMORY[0x1C187F790](v49, a1);
  }
  else {
    uint64_t v50 = 0;
  }
  uint64_t v51 = a3[39];
  if (v51) {
    uint64_t v51 = MEMORY[0x1C187F790](v51, a1);
  }
  v94[0] = v83;
  v94[1] = v82;
  v94[2] = v81;
  v94[3] = v80;
  v93[0] = v79;
  v93[1] = v78;
  v93[2] = v77;
  v93[3] = v76;
  v92[0] = v75;
  v92[1] = v74;
  v92[2] = v73;
  v92[3] = v72;
  v91[0] = v71;
  v91[1] = v70;
  v91[2] = v69;
  v91[3] = v68;
  v90[0] = v67;
  v90[1] = v66;
  v90[2] = v65;
  v90[3] = v64;
  v89[0] = v63;
  v89[1] = v62;
  v89[2] = v61;
  v89[3] = v60;
  v88[0] = v59;
  v88[1] = v58;
  v88[2] = v57;
  v88[3] = v56;
  v87[0] = v55;
  v87[1] = v54;
  v87[2] = v53;
  v87[3] = v36;
  v86[0] = v38;
  v86[1] = v40;
  v86[2] = v42;
  v86[3] = v44;
  v85[0] = v46;
  v85[1] = v48;
  v85[2] = v50;
  v85[3] = v51;
  _MDPlistContainerBeginArray();
  _MDPlistContainerAddNullValue();
  _MDPlistContainerAddInt32Value();
  addContactInfoToContainer(a3[40], a1, a2, (uint64_t)v94, (uint64_t)v93, (uint64_t)v92, (uint64_t)v91, (uint64_t)v90, (uint64_t)v89, (uint64_t)v88, (uint64_t)v87, (uint64_t)v86, (uint64_t)v85);
  return _MDPlistContainerEndArray();
}

uint64_t addContactInfoToContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _MDPlistContainerBeginDictionary();
  _MDPlistContainerAddCString();
  _MDPlistContainerAddObject();
  if (a4)
  {
    uint64_t v30 = a3;
    _MDPlistContainerAddCString();
    _MDPlistContainerBeginArray();
    for (uint64_t i = 0; i != 32; i += 8)
      _MDPlistContainerAddInt64Value();
    _MDPlistContainerEndArray();
    a3 = v30;
  }
  if (a5)
  {
    _MDPlistContainerAddCString();
    _MDPlistContainerBeginArray();
    for (uint64_t j = 0; j != 32; j += 8)
      _MDPlistContainerAddInt64Value();
    _MDPlistContainerEndArray();
  }
  if (a6)
  {
    _MDPlistContainerAddCString();
    _MDPlistContainerBeginArray();
    for (uint64_t k = 0; k != 32; k += 8)
      _MDPlistContainerAddInt64Value();
    _MDPlistContainerEndArray();
  }
  if (a7)
  {
    _MDPlistContainerAddCString();
    _MDPlistContainerBeginArray();
    for (uint64_t m = 0; m != 32; m += 8)
      _MDPlistContainerAddInt64Value();
    _MDPlistContainerEndArray();
  }
  if (a8)
  {
    _MDPlistContainerAddCString();
    _MDPlistContainerBeginArray();
    for (uint64_t n = 0; n != 32; n += 8)
      _MDPlistContainerAddInt64Value();
    _MDPlistContainerEndArray();
  }
  if (a9)
  {
    _MDPlistContainerAddCString();
    _MDPlistContainerBeginArray();
    for (iuint64_t i = 0; ii != 32; ii += 8)
      _MDPlistContainerAddInt64Value();
    _MDPlistContainerEndArray();
  }
  if (a10)
  {
    _MDPlistContainerAddCString();
    _MDPlistContainerBeginArray();
    for (juint64_t j = 0; jj != 32; jj += 8)
      _MDPlistContainerAddInt64Value();
    _MDPlistContainerEndArray();
  }
  if (a11)
  {
    _MDPlistContainerAddCString();
    _MDPlistContainerBeginArray();
    for (kuint64_t k = 0; kk != 32; kk += 8)
      _MDPlistContainerAddInt64Value();
    _MDPlistContainerEndArray();
  }
  if (a12)
  {
    _MDPlistContainerAddCString();
    _MDPlistContainerBeginArray();
    for (muint64_t m = 0; mm != 32; mm += 8)
      _MDPlistContainerAddInt64Value();
    _MDPlistContainerEndArray();
  }
  if (a13)
  {
    _MDPlistContainerAddCString();
    _MDPlistContainerBeginArray();
    for (nuint64_t n = 0; nn != 32; nn += 8)
      _MDPlistContainerAddInt64Value();
    _MDPlistContainerEndArray();
  }
  if (a3)
  {
    _MDPlistContainerAddCString();
    _MDPlistContainerAddObject();
  }
  return _MDPlistContainerEndDictionary();
}

void flushGraphCacheApply(uint64_t a1, uint64_t a2, void *a3)
{
  if (*a3) {
    uint64_t v83 = MEMORY[0x1C187F790](*a3, a1);
  }
  else {
    uint64_t v83 = 0;
  }
  uint64_t v5 = a3[1];
  if (v5) {
    uint64_t v82 = MEMORY[0x1C187F790](v5, a1);
  }
  else {
    uint64_t v82 = 0;
  }
  uint64_t v6 = a3[2];
  if (v6) {
    uint64_t v80 = MEMORY[0x1C187F790](v6, a1);
  }
  else {
    uint64_t v80 = 0;
  }
  uint64_t v7 = a3[3];
  if (v7) {
    uint64_t v79 = MEMORY[0x1C187F790](v7, a1);
  }
  else {
    uint64_t v79 = 0;
  }
  uint64_t v8 = a3[4];
  if (v8) {
    uint64_t v78 = MEMORY[0x1C187F790](v8, a1);
  }
  else {
    uint64_t v78 = 0;
  }
  uint64_t v9 = a3[5];
  if (v9) {
    uint64_t v77 = MEMORY[0x1C187F790](v9, a1);
  }
  else {
    uint64_t v77 = 0;
  }
  uint64_t v10 = a3[6];
  if (v10) {
    uint64_t v76 = MEMORY[0x1C187F790](v10, a1);
  }
  else {
    uint64_t v76 = 0;
  }
  uint64_t v11 = a3[7];
  if (v11) {
    uint64_t v75 = MEMORY[0x1C187F790](v11, a1);
  }
  else {
    uint64_t v75 = 0;
  }
  uint64_t v12 = a3[8];
  if (v12) {
    uint64_t v74 = MEMORY[0x1C187F790](v12, a1);
  }
  else {
    uint64_t v74 = 0;
  }
  uint64_t v13 = a3[9];
  if (v13) {
    uint64_t v73 = MEMORY[0x1C187F790](v13, a1);
  }
  else {
    uint64_t v73 = 0;
  }
  uint64_t v14 = a3[10];
  if (v14) {
    uint64_t v72 = MEMORY[0x1C187F790](v14, a1);
  }
  else {
    uint64_t v72 = 0;
  }
  uint64_t v15 = a3[11];
  if (v15) {
    uint64_t v71 = MEMORY[0x1C187F790](v15, a1);
  }
  else {
    uint64_t v71 = 0;
  }
  uint64_t v16 = a3[12];
  if (v16) {
    uint64_t v70 = MEMORY[0x1C187F790](v16, a1);
  }
  else {
    uint64_t v70 = 0;
  }
  uint64_t v17 = a3[13];
  if (v17) {
    uint64_t v69 = MEMORY[0x1C187F790](v17, a1);
  }
  else {
    uint64_t v69 = 0;
  }
  uint64_t v18 = a3[14];
  if (v18) {
    uint64_t v68 = MEMORY[0x1C187F790](v18, a1);
  }
  else {
    uint64_t v68 = 0;
  }
  uint64_t v19 = a3[15];
  if (v19) {
    uint64_t v67 = MEMORY[0x1C187F790](v19, a1);
  }
  else {
    uint64_t v67 = 0;
  }
  uint64_t v20 = a3[16];
  if (v20) {
    uint64_t v66 = MEMORY[0x1C187F790](v20, a1);
  }
  else {
    uint64_t v66 = 0;
  }
  uint64_t v21 = a3[17];
  if (v21) {
    uint64_t v65 = MEMORY[0x1C187F790](v21, a1);
  }
  else {
    uint64_t v65 = 0;
  }
  uint64_t v22 = a3[18];
  if (v22) {
    uint64_t v64 = MEMORY[0x1C187F790](v22, a1);
  }
  else {
    uint64_t v64 = 0;
  }
  uint64_t v23 = a3[19];
  if (v23) {
    uint64_t v63 = MEMORY[0x1C187F790](v23, a1);
  }
  else {
    uint64_t v63 = 0;
  }
  uint64_t v24 = a3[20];
  if (v24) {
    uint64_t v62 = MEMORY[0x1C187F790](v24, a1);
  }
  else {
    uint64_t v62 = 0;
  }
  uint64_t v25 = a3[21];
  if (v25) {
    uint64_t v61 = MEMORY[0x1C187F790](v25, a1);
  }
  else {
    uint64_t v61 = 0;
  }
  uint64_t v26 = a3[22];
  if (v26) {
    uint64_t v60 = MEMORY[0x1C187F790](v26, a1);
  }
  else {
    uint64_t v60 = 0;
  }
  uint64_t v27 = a3[23];
  if (v27) {
    uint64_t v59 = MEMORY[0x1C187F790](v27, a1);
  }
  else {
    uint64_t v59 = 0;
  }
  uint64_t v28 = a3[24];
  if (v28) {
    uint64_t v58 = MEMORY[0x1C187F790](v28, a1);
  }
  else {
    uint64_t v58 = 0;
  }
  uint64_t v29 = a3[25];
  if (v29) {
    uint64_t v57 = MEMORY[0x1C187F790](v29, a1);
  }
  else {
    uint64_t v57 = 0;
  }
  uint64_t v30 = a3[26];
  if (v30) {
    uint64_t v56 = MEMORY[0x1C187F790](v30, a1);
  }
  else {
    uint64_t v56 = 0;
  }
  uint64_t v31 = a3[27];
  if (v31) {
    uint64_t v55 = MEMORY[0x1C187F790](v31, a1);
  }
  else {
    uint64_t v55 = 0;
  }
  uint64_t v32 = a3[28];
  if (v32) {
    uint64_t v54 = MEMORY[0x1C187F790](v32, a1);
  }
  else {
    uint64_t v54 = 0;
  }
  uint64_t v33 = a3[29];
  if (v33) {
    uint64_t v53 = MEMORY[0x1C187F790](v33, a1);
  }
  else {
    uint64_t v53 = 0;
  }
  uint64_t v34 = a3[30];
  if (v34) {
    uint64_t v52 = MEMORY[0x1C187F790](v34, a1);
  }
  else {
    uint64_t v52 = 0;
  }
  uint64_t v35 = a3[31];
  if (v35) {
    uint64_t v36 = MEMORY[0x1C187F790](v35, a1);
  }
  else {
    uint64_t v36 = 0;
  }
  uint64_t v37 = a3[32];
  if (v37) {
    uint64_t v38 = MEMORY[0x1C187F790](v37, a1);
  }
  else {
    uint64_t v38 = 0;
  }
  uint64_t v39 = a3[33];
  if (v39) {
    uint64_t v40 = MEMORY[0x1C187F790](v39, a1);
  }
  else {
    uint64_t v40 = 0;
  }
  uint64_t v41 = a3[34];
  if (v41) {
    uint64_t v42 = MEMORY[0x1C187F790](v41, a1);
  }
  else {
    uint64_t v42 = 0;
  }
  uint64_t v43 = a3[35];
  if (v43) {
    uint64_t v44 = MEMORY[0x1C187F790](v43, a1);
  }
  else {
    uint64_t v44 = 0;
  }
  uint64_t v45 = a3[36];
  if (v45) {
    uint64_t v46 = MEMORY[0x1C187F790](v45, a1);
  }
  else {
    uint64_t v46 = 0;
  }
  uint64_t v47 = a3[37];
  if (v47) {
    uint64_t v48 = MEMORY[0x1C187F790](v47, a1);
  }
  else {
    uint64_t v48 = 0;
  }
  uint64_t v49 = a3[38];
  if (v49) {
    uint64_t v50 = MEMORY[0x1C187F790](v49, a1);
  }
  else {
    uint64_t v50 = 0;
  }
  uint64_t v51 = a3[39];
  if (v51) {
    uint64_t v51 = MEMORY[0x1C187F790](v51, a1);
  }
  si_updateContactInfo(a3[40], a1, v83, v82, v80, v79, v78, v77, v76, v75, v74, v73, v72, v71, v70, v69, v68, v67, v66,
    v65,
    v64,
    v63,
    v62,
    v61,
    v60,
    v59,
    v58,
    v57,
    v56,
    v55,
    v54,
    v53,
    v52,
    v36,
    v38,
    v40,
    v42,
    v44,
    v46,
    v48,
    v50,
    v51,
    a2);
}

void si_updateContactInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  *(void *)&long long v60 = a7;
  *((void *)&v60 + 1) = a8;
  *(void *)&long long v57 = a3;
  *((void *)&v57 + 1) = a4;
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  bzero(v67, 0x800uLL);
  CFAllocatorRef v43 = _SIStackAllocatorCreate(v67, 512, indexingZone);
  if (!v67[3]) {
    v67[1] = (v67[0] + 55) & 0xFFFFFFFFFFFFFFF0;
  }
  long long v79 = v57;
  uint64_t v80 = a5;
  uint64_t v81 = a6;
  long long v76 = v60;
  uint64_t v77 = a9;
  uint64_t v78 = a10;
  if (*((void *)&v57 + 1) | (unint64_t)v57 | a5 | a6) {
    uint64_t v44 = &v79;
  }
  else {
    uint64_t v44 = 0;
  }
  v75[0] = a11;
  v75[1] = a12;
  v75[2] = a13;
  v75[3] = a14;
  uint64_t v45 = &v76;
  if (!(*((void *)&v60 + 1) | (unint64_t)v60 | a9 | a10)) {
    uint64_t v45 = 0;
  }
  uint64_t v61 = (uint64_t)v45;
  uint64_t v62 = (uint64_t)v44;
  v74[0] = a15;
  v74[1] = a16;
  v74[2] = a17;
  v74[3] = a18;
  if (a12 | a11 | a13 | a14) {
    uint64_t v46 = v75;
  }
  else {
    uint64_t v46 = 0;
  }
  v73[0] = a19;
  v73[1] = a20;
  v73[2] = a21;
  void v73[3] = a22;
  if (a16 | a15 | a17 | a18) {
    uint64_t v47 = v74;
  }
  else {
    uint64_t v47 = 0;
  }
  v72[0] = a23;
  v72[1] = a24;
  v72[2] = a25;
  v72[3] = a26;
  if (a20 | a19 | a21 | a22) {
    uint64_t v48 = v73;
  }
  else {
    uint64_t v48 = 0;
  }
  v71[0] = a27;
  v71[1] = a28;
  v71[2] = a29;
  _DWORD v71[3] = a30;
  if (a24 | a23 | a25 | a26) {
    uint64_t v49 = v72;
  }
  else {
    uint64_t v49 = 0;
  }
  v70[0] = a31;
  v70[1] = a32;
  v70[2] = a33;
  v70[3] = a34;
  if (a28 | a27 | a29 | a30) {
    uint64_t v50 = v71;
  }
  else {
    uint64_t v50 = 0;
  }
  v69[0] = a35;
  v69[1] = a36;
  void v69[2] = a37;
  if (a32 | a31 | a33 | a34) {
    uint64_t v51 = v70;
  }
  else {
    uint64_t v51 = 0;
  }
  v69[3] = a38;
  v68[0] = a39;
  v68[1] = a40;
  if (a36 | a35 | a37 | a38) {
    uint64_t v52 = v69;
  }
  else {
    uint64_t v52 = 0;
  }
  v68[2] = a41;
  v68[3] = a42;
  if (a40 | a39 | a41 | a42) {
    uint64_t v53 = v68;
  }
  else {
    uint64_t v53 = 0;
  }
  CFAllocatorRef v54 = v43;
  uint64_t Mutable = (const void *)_MDPlistContainerCreateMutable();
  _MDPlistContainerBeginContainer();
  _MDPlistContainerBeginArray();
  addContactInfoToContainer((uint64_t)Mutable, a2, a43, v62, v61, (uint64_t)v46, (uint64_t)v47, (uint64_t)v48, (uint64_t)v49, (uint64_t)v50, (uint64_t)v51, (uint64_t)v52, (uint64_t)v53);
  _MDPlistContainerAddNullValue();
  _MDPlistContainerEndArray();
  _MDPlistContainerEndContainer();
  long long v79 = 0uLL;
  uint64_t v80 = 0;
  _MDPlistGetRootPlistObjectFromPlist();
  long long v76 = v79;
  uint64_t v77 = v80;
  _MDPlistArrayGetPlistObjectAtIndex();
  long long v76 = v79;
  uint64_t v77 = v80;
  _MDPlistArrayGetPlistObjectAtIndex();
  LOBYTE(v56) = 0;
  processOneCS(a1, -1, @"com.apple.MobileAddressBook", 0, 0x20000, v66, v65, 0, 0, v54, v56, 0, 0, &v76);
  CFRelease(Mutable);
}

uint64_t si_removeRemapping(const void **a1)
{
  pthread_mutex_lock(&schlock);
  uint64_t Mutable = (__CFArray *)*((void *)*a1 + 296);
  if (!Mutable)
  {
    uint64_t Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    *((void *)*a1 + 296) = Mutable;
  }
  CFArrayAppendValue(Mutable, a1[2]);
  pthread_mutex_unlock(&schlock);
  CFArrayRef v3 = (const __CFArray *)*((void *)*a1 + 295);
  v6.length = CFArrayGetCount(v3);
  v6.locatiouint64_t n = 0;
  FirstIndexOfCFDateRef Value = CFArrayGetFirstIndexOfValue(v3, v6, a1[2]);
  if (FirstIndexOfValue == -1) {
    return 0xFFFFFFFFLL;
  }
  CFArrayRemoveValueAtIndex(*((CFMutableArrayRef *)*a1 + 295), FirstIndexOfValue);
  return 0;
}

void recalculateTopK(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 2064))
  {
    if ((*(unsigned char *)(a1 + 830) & 4) == 0)
    {
      int v2 = (atomic_uint *)fd_create_protected(*(_DWORD *)(a1 + 32), "tmp.topK.v2.mdplistc", 1538, 0);
      if (v2)
      {
        CFArrayRef v3 = v2;
        uint64_t v46 = 0;
        uint64_t v47 = &v46;
        uint64_t v48 = 0x2000000000;
        CFMutableDictionaryRef Mutable = 0;
        CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 500, 0, MEMORY[0x1E4F1D540]);
        uint64_t v5 = *(void *)(a1 + 1384);
        uint64_t v6 = *(void *)(a1 + 1376);
        v42[0] = MEMORY[0x1E4F143A8];
        v42[1] = 0x40000000;
        CFAllocatorRef v43 = __recalculateTopK_block_invoke;
        uint64_t v44 = &unk_1E6341B58;
        uint64_t v45 = &v46;
        if (v5 && *(_DWORD *)(v5 + 8))
        {
          uint64_t v7 = 0;
          while (((unsigned int (*)(void *, void, void))v43)(v42, *(void *)(*(void *)v5 + 8 * v7), 0))
          {
            if (++v7 >= (unint64_t)*(unsigned int *)(v5 + 8)) {
              goto LABEL_9;
            }
          }
        }
        else
        {
LABEL_9:
          if (v6 && *(_DWORD *)(v6 + 8))
          {
            unint64_t v8 = 0;
            do
            {
              if (!((unsigned int (*)(void *, void, uint64_t))v43)(v42, *(void *)(*(void *)v6 + 8 * v8), 1))break; {
              ++v8;
              }
            }
            while (v8 < *(unsigned int *)(v6 + 8));
          }
        }
        CFMutableDictionaryRef v9 = CFDictionaryCreateMutable(v4, 500, 0, 0);
        CFDictionaryApplyFunction((CFDictionaryRef)v47[3], (CFDictionaryApplierFunction)heapifyDicts, v9);
        uint64_t v10 = (void *)_MDPlistContainerCreateMutable();
        _MDPlistContainerBeginContainer();
        _MDPlistContainerBeginDictionary();
        CFDictionaryApplyFunction(v9, (CFDictionaryApplierFunction)emitTerms, v10);
        _MDPlistContainerEndDictionary();
        _MDPlistContainerEndContainer();
        unint64_t Length = _MDPlistContainerGetLength();
        uint64_t Bytes = _MDPlistContainerGetBytes();
        fd_pwrite((uint64_t)v3, Bytes, Length, 0);
        fd_sync((uint64_t)v3, 0);
        CFRelease(v10);
        uint64_t v13 = (atomic_uint *)fd_create_protected(*(_DWORD *)(a1 + 32), "tmp.topK.v2.mdplistc", 0, 0);
        if (!v13)
        {
          _fd_unlink_with_origin((uint64_t)v3, 0);
LABEL_31:
          fd_release(v3);
          CFRelease((CFTypeRef)v47[3]);
          CFDictionaryApplyFunction(v9, (CFDictionaryApplierFunction)pqDisposeApplier, 0);
          CFRelease(v9);
          _Block_object_dispose(&v46, 8);
          return;
        }
        uint64_t v14 = v13;
        uint64_t v15 = fd_mmap((uint64_t)v13);
        if (v15 != -1)
        {
          uint64_t v32 = (void *)v15;
          v41[0] = v15;
          v41[1] = Length;
          v41[2] = 0;
          v40[0] = 1;
          v40[1] = v41;
          int v16 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
          unint64_t v17 = setThreadIdAndInfo(-1, (long long *)sMappingExceptionCallbacks, (uint64_t)v40, 0, v16);
          unsigned int v38 = HIDWORD(v17);
          unsigned int v39 = v17;
          unint64_t v37 = __PAIR64__(v18, v19);
          uint64_t v20 = *(void *)&threadData[18 * v17 + 2];
          uint64_t v21 = v20 + 320 * HIDWORD(v17);
          *(unsigned char *)(v21 + 216) = 0;
          int v22 = *(_DWORD *)(v21 + 312);
          uint64_t v23 = *(void (**)(void))(v21 + 224);
          if (v23) {
            v23(*(void *)(v20 + 320 * HIDWORD(v17) + 288));
          }
          unsigned int v36 = v39;
          unsigned int v35 = v38;
          unint64_t v34 = v37;
          if (_setjmp((int *)v21))
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)long long buf = 0;
              _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
            }
            *(_DWORD *)(v21 + 312) = v22;
            CIOnThreadCleanUpReset(v34);
            dropThreadId(v36, 1, v16);
            CICleanUpReset(v36, HIDWORD(v34));
            uint64_t v24 = v32;
          }
          else
          {
            uint64_t v24 = v32;
            uint64_t v25 = _MDPlistContainerCreateWithBytes();
            uint64_t v26 = *(void *)&threadData[18 * v36 + 2];
            unsigned int v27 = v35;
            uint64_t v28 = v26 + 320 * v35;
            *(_DWORD *)(v28 + 312) = v22;
            uint64_t v29 = *(void (**)(void))(v28 + 232);
            if (v29) {
              v29(*(void *)(v26 + 320 * v27 + 288));
            }
            dropThreadId(v36, 0, v16);
            if (v25)
            {
              fd_rename((uint64_t)v3, "topK.v2.mdplistc");
              uint64_t v30 = si_scheduler_suspend(*(void *)(a1 + 912));
              uint64_t v31 = *(const void **)(a1 + 664);
              *(void *)(a1 + 664) = v25;
              if (v31) {
                CFRelease(v31);
              }
              si_scheduler_resume(*(void *)(a1 + 912), v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 7780);
              goto LABEL_30;
            }
          }
          munmap(v24, Length);
        }
LABEL_30:
        fd_release(v14);
        goto LABEL_31;
      }
    }
  }
}

uint64_t __recalculateTopK_block_invoke(uint64_t a1, uint64_t a2)
{
  CFArrayRef v3 = *(const void **)(a2 + 14496);
  if (v3)
  {
    CFTypeRef v4 = CFRetain(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      v30[0] = _MDPlistContainerGetBytes();
      v30[1] = _MDPlistContainerGetLength();
      void v30[2] = 0;
      v29[0] = 1;
      v29[1] = v30;
      int v6 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
      unint64_t v7 = setThreadIdAndInfo(-1, (long long *)sMappingExceptionCallbacks, (uint64_t)v29, 0, v6);
      unsigned int v27 = HIDWORD(v7);
      unsigned int v28 = v7;
      unint64_t v26 = __PAIR64__(v8, v9);
      uint64_t v10 = *(void *)&threadData[18 * v7 + 2];
      uint64_t v11 = v10 + 320 * HIDWORD(v7);
      *(unsigned char *)(v11 + 216) = 0;
      int v12 = *(_DWORD *)(v11 + 312);
      uint64_t v13 = *(void (**)(void))(v11 + 224);
      if (v13) {
        v13(*(void *)(v10 + 320 * HIDWORD(v7) + 288));
      }
      unsigned int v25 = v28;
      unsigned int v24 = v27;
      unint64_t v23 = v26;
      if (_setjmp((int *)v11))
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)int v22 = 0;
          _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v22, 2u);
        }
        *(_DWORD *)(v11 + 312) = v12;
        CIOnThreadCleanUpReset(v23);
        dropThreadId(v25, 1, v6);
        CICleanUpReset(v25, HIDWORD(v23));
      }
      else
      {
        CFDictionaryRef v14 = (const __CFDictionary *)_MDPlistContainerCopyRootObject();
        CFDictionaryRef v15 = v14;
        if (v14)
        {
          CFTypeID v16 = CFGetTypeID(v14);
          if (v16 == CFDictionaryGetTypeID()) {
            CFDictionaryApplyFunction(v15, (CFDictionaryApplierFunction)sumDicts, *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
          }
        }
        uint64_t v17 = *(void *)&threadData[18 * v25 + 2];
        unsigned int v18 = v24;
        uint64_t v19 = v17 + 320 * v24;
        *(_DWORD *)(v19 + 312) = v12;
        uint64_t v20 = *(void (**)(void))(v19 + 232);
        if (v20) {
          v20(*(void *)(v17 + 320 * v18 + 288));
        }
        dropThreadId(v25, 0, v6);
        if (v15) {
          CFRelease(v15);
        }
      }
      CFRelease(v5);
    }
  }
  return 1;
}

void pqDisposeApplier(uint64_t a1, void **a2)
{
  free(*a2);
  free(a2);
}

void emitTerms(uint64_t a1, uint64_t *a2)
{
  if (!a1 || !a2)
  {
    uint64_t v33 = __si_assert_copy_extra_625(-1);
    unint64_t v34 = v33;
    unsigned int v35 = "";
    if (v33) {
      unsigned int v35 = v33;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 7656, "k && v", v35);
    free(v34);
    if (__valid_fs(-1)) {
      uint64_t v36 = 2989;
    }
    else {
      uint64_t v36 = 3072;
    }
    *(_DWORD *)uint64_t v36 = -559038737;
    abort();
  }
  CFStringRef v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%d", a1);
  _MDPlistContainerAddObject();
  _MDPlistContainerBeginDictionary();
  int v4 = *((_DWORD *)a2 + 4);
  int v5 = v4 - 1;
  if (v4 == 1) {
    goto LABEL_22;
  }
  int v6 = 0;
  do
  {
    uint64_t v7 = a2[2];
    if (v7 == 1)
    {
      unsigned int v8 = 0;
      goto LABEL_7;
    }
    unsigned int v8 = *(const void **)(*a2 + 16);
    long long v9 = *(_OWORD *)(*a2 + 16 * v7 - 16);
    *(_OWORD *)(*a2 + 16) = v9;
    uint64_t v11 = a2[1];
    uint64_t v10 = a2[2];
    a2[2] = v10 - 1;
    uint64_t v12 = v11 >> 1;
    uint64_t v13 = 1;
    uint64_t v14 = 2;
    uint64_t v15 = 3;
    while (1)
    {
      uint64_t v16 = *a2;
      uint64_t v17 = (uint64_t *)(*a2 + 16 * v14);
      uint64_t v19 = *v17;
      uint64_t v18 = v17[1];
      if (v15 >= v10)
      {
        if (v14 >= v10) {
          goto LABEL_7;
        }
        uint64_t v21 = 0;
        uint64_t v22 = 0xFFFFFFFFLL;
      }
      else
      {
        uint64_t v20 = (uint64_t *)(v16 + 16 * v15);
        uint64_t v21 = *v20;
        uint64_t v22 = v20[1];
      }
      if (DWORD2(v9) > v18)
      {
        if (v22 >= v18)
        {
          uint64_t v22 = v18;
          uint64_t v21 = v19;
          uint64_t v15 = v14;
        }
        goto LABEL_15;
      }
      if (DWORD2(v9) <= v22) {
        break;
      }
LABEL_15:
      _X14 = v16 + 32 * v15;
      __asm { PRFM            #1, [X14] }
      if (v15 != v13)
      {
        uint64_t v14 = 2 * v15;
        *(_OWORD *)(v16 + 16 * v15) = v9;
        uint64_t v29 = (void *)(*a2 + 16 * v13);
        uint64_t v13 = v15;
        void *v29 = v21;
        v29[1] = v22;
        BOOL v30 = v15 < v12;
        uint64_t v15 = (2 * v15) | 1;
        if (v30) {
          continue;
        }
      }
      goto LABEL_7;
    }
    _X8 = v16 + 32 * v13;
    __asm { PRFM            #1, [X8] }
LABEL_7:
    _MDPlistContainerAddObject();
    _MDPlistContainerAddInt32Value();
    CFRelease(v8);
    ++v6;
  }
  while (v6 != v5);
LABEL_22:
  _MDPlistContainerEndDictionary();
  CFRelease(v3);
}

void heapifyDicts(int a1, CFTypeRef cf, const void *a3)
{
  CFDictionaryRef v5 = (const __CFDictionary *)CFRetain(cf);
  int v6 = (__CFDictionary *)CFRetain(a3);
  unint64_t v7 = a1;
  if (!CFDictionaryContainsKey(v6, (const void *)a1))
  {
    unsigned int v8 = malloc_type_malloc(0x18uLL, 0x102004024DAA5DEuLL);
    long long v9 = v8;
    uint64_t v10 = 10000;
    if (a1 > 716189595)
    {
      if (a1 == 716189596 || a1 == 856881155) {
        goto LABEL_9;
      }
    }
    else
    {
      if (a1 == 510259174)
      {
LABEL_9:
        v8[1] = v10;
        v8[2] = 1;
        uint64_t v11 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 16 * v10 + 32, 0x6085D6BuLL);
        if (!v11) {
          _log_fault_for_malloc_failure();
        }
        void *v9 = v11;
        *uint64_t v11 = 0;
        v11[1] = 0;
        goto LABEL_12;
      }
      if (a1 == 679607404)
      {
        *(_OWORD *)(v8 + 1) = xmmword_1BDA82300;
        void *v8 = 0;
LABEL_12:
        CFDictionaryAddValue(v6, (const void *)v7, v9);
        goto LABEL_13;
      }
    }
    uint64_t v10 = 50;
    goto LABEL_9;
  }
LABEL_13:
  CFDateRef Value = (void *)CFDictionaryGetValue(v6, (const void *)v7);
  CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)heapifyDict, Value);
  CFRelease(v5);
  CFRelease(v6);
}

void heapifyDict(const void *a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return;
  }
  CFTypeRef v5 = CFRetain(a1);
  uint64_t v6 = a2;
  uint64_t v7 = *(void *)(a3 + 16);
  if (v7 <= 20000)
  {
    uint64_t v8 = *(void *)(a3 + 8);
    uint64_t v9 = *(void *)(a3 + 16);
    if (v7 + 2 >= v8)
    {
      uint64_t v10 = 2 * v8;
      if (v8 < 4) {
        uint64_t v10 = 4;
      }
      *(void *)(a3 + 8) = v10;
      size_t v11 = 16 * v10 + 32;
      if (*(void *)a3) {
        uint64_t v12 = malloc_type_zone_realloc((malloc_zone_t *)queryZone, *(void **)a3, v11, 0xECA6AA46uLL);
      }
      else {
        uint64_t v12 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v11, 0x8DDAA030uLL);
      }
      uint64_t v47 = v12;
      if (!v12) {
        _log_fault_for_malloc_failure();
      }
      *(void *)a3 = v47;
      *uint64_t v47 = 0;
      v47[1] = 0;
      uint64_t v9 = *(void *)(a3 + 16);
    }
    *(void *)(a3 + 16) = v9 + 1;
    uint64_t v48 = (void *)(*(void *)a3 + 16 * v7);
    *uint64_t v48 = v5;
    v48[1] = v6;
    if (v7 >= 2)
    {
      do
      {
        uint64_t v49 = *(_OWORD **)a3;
        unint64_t v50 = (unint64_t)v7 >> 1;
        if (*(_DWORD *)(*(void *)a3 + 16 * v7 + 8) > *(_DWORD *)(*(void *)a3 + 16 * ((unint64_t)v7 >> 1) + 8)) {
          break;
        }
        long long v51 = v49[v7];
        v49[v7] = v49[v50];
        *(_OWORD *)(*(void *)a3 + 16 * v50) = v51;
        BOOL v37 = (unint64_t)v7 > 3;
        uint64_t v7 = (unint64_t)v7 >> 1;
      }
      while (v37);
    }
    return;
  }
  uint64_t v13 = *(_DWORD **)a3;
  if (*(void *)a3) {
    unsigned int v14 = v13[6];
  }
  else {
    unsigned int v14 = 0;
  }
  if (v14 >= a2) {
    goto LABEL_47;
  }
  long long v15 = *(_OWORD *)&v13[4 * v7 - 4];
  uint64_t v16 = (const void *)*((void *)v13 + 2);
  *((_OWORD *)v13 + 1) = v15;
  uint64_t v18 = *(void *)(a3 + 8);
  uint64_t v17 = *(void *)(a3 + 16);
  *(void *)(a3 + 16) = v17 - 1;
  uint64_t v19 = v18 >> 1;
  uint64_t v20 = 3;
  uint64_t v21 = 2;
  uint64_t v22 = 1;
  while (1)
  {
    unint64_t v23 = *(_OWORD **)a3;
    unsigned int v24 = (uint64_t *)(*(void *)a3 + 16 * v21);
    uint64_t v25 = *v24;
    uint64_t v26 = v24[1];
    if (v20 >= v17)
    {
      if (v21 >= v17) {
        goto LABEL_25;
      }
      uint64_t v28 = 0;
      uint64_t v29 = 0xFFFFFFFFLL;
    }
    else
    {
      unsigned int v27 = (uint64_t *)&v23[v20];
      uint64_t v28 = *v27;
      uint64_t v29 = v27[1];
    }
    if (DWORD2(v15) > v26)
    {
      if (v29 >= v26)
      {
        uint64_t v29 = v26;
        uint64_t v28 = v25;
        uint64_t v20 = v21;
      }
      goto LABEL_18;
    }
    if (DWORD2(v15) <= v29) {
      break;
    }
LABEL_18:
    _X13 = (char *)&v23[2 * v20];
    __asm { PRFM            #1, [X13] }
    if (v20 == v22) {
      goto LABEL_25;
    }
    uint64_t v21 = 2 * v20;
    v23[v20] = v15;
    uint64_t v36 = (void *)(*(void *)a3 + 16 * v22);
    uint64_t v22 = v20;
    *uint64_t v36 = v28;
    v36[1] = v29;
    BOOL v37 = v20 < v19;
    uint64_t v20 = (2 * v20) | 1;
    if (!v37)
    {
      unint64_t v23 = *(_OWORD **)a3;
      goto LABEL_25;
    }
  }
  _X8 = (char *)&v23[2 * v22];
  __asm { PRFM            #1, [X8] }
LABEL_25:
  uint64_t v40 = *(void *)(a3 + 8);
  unint64_t v41 = *(void *)(a3 + 16);
  if ((uint64_t)(v41 + 2) >= v40)
  {
    uint64_t v43 = 2 * v40;
    BOOL v37 = v40 < 4;
    uint64_t v44 = 4;
    if (!v37) {
      uint64_t v44 = v43;
    }
    *(void *)(a3 + 8) = v44;
    size_t v45 = 16 * v44 + 32;
    if (v23) {
      uint64_t v46 = malloc_type_zone_realloc((malloc_zone_t *)queryZone, v23, v45, 0xECA6AA46uLL);
    }
    else {
      uint64_t v46 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v45, 0x8DDAA030uLL);
    }
    uint64_t v52 = v46;
    if (!v46) {
      _log_fault_for_malloc_failure();
    }
    *(void *)a3 = v52;
    void *v52 = 0;
    v52[1] = 0;
    uint64_t v42 = *(void *)(a3 + 16);
    unint64_t v23 = *(_OWORD **)a3;
  }
  else
  {
    uint64_t v42 = *(void *)(a3 + 16);
  }
  *(void *)(a3 + 16) = v42 + 1;
  uint64_t v53 = &v23[v41];
  *uint64_t v53 = v5;
  v53[1] = v6;
  CFTypeRef v5 = v16;
  if ((uint64_t)v41 >= 2)
  {
    do
    {
      CFAllocatorRef v54 = *(_OWORD **)a3;
      unint64_t v55 = v41 >> 1;
      if (*(_DWORD *)(*(void *)a3 + 16 * v41 + 8) > *(_DWORD *)(*(void *)a3 + 16 * (v41 >> 1) + 8)) {
        break;
      }
      long long v56 = v54[v41];
      v54[v41] = v54[v55];
      *(_OWORD *)(*(void *)a3 + 16 * v55) = v56;
      BOOL v37 = v41 > 3;
      v41 >>= 1;
    }
    while (v37);
    CFTypeRef v5 = v16;
  }
LABEL_47:
  CFRelease(v5);
}

void sumDicts(const void *a1, const void *a2, CFTypeRef cf)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  CFTypeRef v5 = (__CFDictionary *)CFRetain(cf);
  CFStringRef v6 = (const __CFString *)CFRetain(a1);
  IntCFDateRef Value = CFStringGetIntValue(v6);
  if (IntValue)
  {
    unsigned int v8 = IntValue;
    CFDictionaryRef v9 = (const __CFDictionary *)CFRetain(a2);
    CFDictionaryRef v10 = v9;
    if (v9)
    {
      CFTypeID v11 = CFGetTypeID(v9);
      if (v11 == CFDictionaryGetTypeID())
      {
        unint64_t v12 = v8;
        if (!CFDictionaryContainsKey(v5, (const void *)v8))
        {
          uint64_t v13 = 50;
          if (v8 == 679607404) {
            uint64_t v13 = 0;
          }
          if (v8 == 856881155) {
            uint64_t v14 = 10000;
          }
          else {
            uint64_t v14 = v13;
          }
          if (v8 == 716189596) {
            uint64_t v15 = 10000;
          }
          else {
            uint64_t v15 = v14;
          }
          if (v8 == 510259174) {
            CFIndex v16 = 10000;
          }
          else {
            CFIndex v16 = v15;
          }
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v16, MEMORY[0x1E4F1D530], 0);
          CFDictionaryAddValue(v5, (const void *)v12, Mutable);
          CFRelease(Mutable);
        }
        CFDateRef Value = (void *)CFDictionaryGetValue(v5, (const void *)v12);
        CFDictionaryApplyFunction(v10, (CFDictionaryApplierFunction)sumDict, Value);
      }
    }
    CFRelease(v10);
    CFRelease(v5);
    CFRelease(v6);
  }
  else
  {
    int v19 = *__error();
    uint64_t v20 = _SILogForLogForCategory(0);
    os_log_type_t v21 = gSILogLevels[0] < 3;
    if (os_log_type_enabled(v20, (os_log_type_t)(gSILogLevels[0] < 3)))
    {
      int v22 = 138412290;
      CFStringRef v23 = v6;
      _os_log_impl(&dword_1BD672000, v20, v21, "*warn* Skipped deprecated topK bundleIndex %@", (uint8_t *)&v22, 0xCu);
    }
    *__error() = v19;
  }
}

void sumDict(const void *a1, const __CFNumber *a2, CFTypeRef cf)
{
  CFDictionaryRef v5 = (const __CFDictionary *)CFRetain(cf);
  unsigned int Value = CFDictionaryGetValue(v5, a1);
  int valuePtr = 0;
  CFNumberGetValue(a2, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(v5, a1, (const void *)(valuePtr + Value));
  CFRelease(v5);
}

uint64_t __mergeOverlay_block_invoke(uint64_t a1, int a2, uint64_t *a3, int a4, uint64_t a5)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    uint64_t result = _CIMoveDirectory(result, a2, a3, a4, a5);
  }
  uint64_t v11 = *(void *)(a1 + 40);
  if (*(_DWORD *)(v11 + 8))
  {
    unint64_t v12 = 0;
    do
    {
      uint64_t result = CFSetContainsValue(*(CFSetRef *)(a1 + 48), (const void *)*(int *)(*(void *)(*(void *)v11 + 8 * v12) + 56));
      if (result) {
        uint64_t result = _CIMoveDirectory(*(void *)(**(void **)(a1 + 40) + 8 * v12), a2, a3, a4, a5);
      }
      ++v12;
      uint64_t v11 = *(void *)(a1 + 40);
    }
    while (v12 < *(unsigned int *)(v11 + 8));
  }
  uint64_t v13 = *(void *)(a1 + 56);
  if (*(_DWORD *)(v13 + 8))
  {
    unint64_t v14 = 0;
    do
    {
      uint64_t result = CFSetContainsValue(*(CFSetRef *)(a1 + 48), (const void *)*(int *)(*(void *)(*(void *)v13 + 8 * v14) + 56));
      if (result) {
        uint64_t result = _CIMoveDirectory(*(void *)(**(void **)(a1 + 56) + 8 * v14), a2, a3, a4, a5);
      }
      ++v14;
      uint64_t v13 = *(void *)(a1 + 56);
    }
    while (v14 < *(unsigned int *)(v13 + 8));
  }
  return result;
}

void __mergeOverlay_block_invoke_2(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 32);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = __mergeOverlay_block_invoke_3;
  v4[3] = &__block_descriptor_tmp_257;
  long long v3 = *(_OWORD *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 40);
  long long v6 = v3;
  dispatch_barrier_async(v2, v4);
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
}

void __mergeOverlay_block_invoke_3(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __mergeOverlay_block_invoke_4;
  block[3] = &__block_descriptor_tmp_256;
  long long v4 = *(_OWORD *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 56);
  dispatch_barrier_async(v2, block);
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
}

void __mergeOverlay_block_invoke_4(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 32);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = __mergeOverlay_block_invoke_5;
  v3[3] = &__block_descriptor_tmp_255;
  long long v4 = *(_OWORD *)(a1 + 40);
  dispatch_barrier_async(v2, v3);
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
}

void __mergeOverlay_block_invoke_5(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
  {
    pthread_rwlock_destroy((pthread_rwlock_t *)(v2 + 240));
    pthread_rwlock_destroy((pthread_rwlock_t *)(v2 + 8));
    free(*(void **)(v2 + 448));
    freeOverlayDir(v2 + 208);
    long long v3 = *(void **)(v2 + 456);
    if (v3)
    {
      do
      {
        long long v4 = (void *)*v3;
        free(v3);
        long long v3 = v4;
      }
      while (v4);
    }
    free((void *)v2);
  }
  uint64_t v5 = *(const void **)(a1 + 40);
  CFRelease(v5);
}

uint64_t __InsertMergedIndex_block_invoke(uint64_t result)
{
  if (result)
  {
    char v1 = atomic_load((unsigned int *)(result + 36));
    if ((v1 & 3) == 0 && !*(unsigned char *)(result + 15203)) {
      return _CIFlushCache(result, 1, 0, 0, (uint64_t)&__block_literal_global_726);
    }
  }
  return result;
}

ssize_t create_scan_touch_file(uint64_t a1, char a2)
{
  int v3 = si_openat_protected(a1, "rescan_needed", 1538, 3);
  __long long buf = a2;
  ssize_t result = write(v3, &__buf, 1uLL);
  if ((v3 & 0x80000000) == 0) {
    return close(v3);
  }
  return result;
}

uint64_t perform_victim_rename(unsigned int a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v18 = 0u;
  memset(v19, 0, sizeof(v19));
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  *(_OWORD *)std::string __str = 0u;
  snprintf(__str, 0xFFuLL, "%s.%s", "tmp.victim", (const char *)(*(void *)(*a2 + 8 * a1) + 15208));
  return ContentIndexChangePrefix(*(void *)(*a2 + 8 * a1));
}

uint64_t perform_renumber_rename(uint64_t a1, void *a2, _DWORD *a3, int a4, char *a5)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  long long v24 = 0u;
  memset(v25, 0, sizeof(v25));
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  *(_OWORD *)std::string __str = 0u;
  long long v9 = fmtcheck(a5, "%i");
  snprintf(__str, 0xFFuLL, v9, a1);
  a3[8] = a1;
  pwrite(a4, a3, 0x210uLL, 0);
  fcntl(a4, 85);
  return ContentIndexChangePrefix(*(void *)(*a2 + 8 * a1));
}

uint64_t rename_new_index(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  long long v22 = 0u;
  memset(v23, 0, sizeof(v23));
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)std::string __str = 0u;
  uint64_t v5 = fmtcheck(a2, "%i");
  snprintf(__str, 0xFFuLL, v5, a3);
  uint64_t v6 = ContentIndexChangePrefix(a1);
  uint64_t v7 = *(void *)(a1 + 4912);
  if (v6)
  {
    if (v7 && _os_feature_enabled_impl()) {
      vectorIndexEndMerge(*(void *)(a1 + 4912));
    }
  }
  else if (v7 && _os_feature_enabled_impl())
  {
    vectorIndexCancelMerge(*(void *)(a1 + 4912));
  }
  return v6;
}

uint64_t __InsertMergedIndex_block_invoke_3(uint64_t a1)
{
  return si_set_obj_state(*(os_unfair_lock_s **)(a1 + 32), *(void *)(a1 + 40));
}

void si_freeIndex0(uint64_t *a1, int a2)
{
  if (a2)
  {
    freeIndex(*a1);
  }
  else
  {
    uint64_t v3 = *(void *)(a1[1] + 1096);
    qos_class_t v4 = qos_class_self();
    si_enqueue_work_with_qos(v3, v4, (uint64_t)si_freeIndex, *a1);
  }
  free(a1);
}

uint64_t si_merge_term_filter(void *a1, unsigned __int8 *a2, unsigned int a3)
{
  int v6 = triePropertyID(a2, a3);
  if (v6 != si_merge_term_filter_lastID) {
    si_merge_term_filter_lastID = v6;
  }
  if (a3 == 2)
  {
    if (*a2 > 5u) {
      return 0;
    }
    unsigned int v7 = a2[1];
    return v7 < 6;
  }
  if (a3 == 1)
  {
    unsigned int v7 = *a2;
    return v7 < 6;
  }
  if (a3 >= 3 && *a2 <= 5u)
  {
    int v9 = triePropertyID(a2, a3);
    if (v9)
    {
      if (*a2 == 1 && a2[1] == 2)
      {
        if (v9 < 0)
        {
          long long v16 = __si_assert_copy_extra_625(-1);
          long long v17 = v16;
          long long v18 = "";
          if (v16) {
            long long v18 = v16;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "bit_vector.h", 96, "bitIndex >= 0", v18);
          free(v17);
          if (__valid_fs(-1)) {
            uint64_t v19 = 2989;
          }
          else {
            uint64_t v19 = 3072;
          }
          *(_DWORD *)uint64_t v19 = -559038737;
          abort();
        }
        CFIndex v10 = v9;
        if (a1[4] <= v9) {
          return 0;
        }
        CFBitVectorRef v11 = (const __CFBitVector *)a1[6];
      }
      else
      {
        if (v9 < 0)
        {
          long long v12 = __si_assert_copy_extra_625(-1);
          long long v13 = v12;
          long long v14 = "";
          if (v12) {
            long long v14 = v12;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "bit_vector.h", 96, "bitIndex >= 0", v14);
          free(v13);
          if (__valid_fs(-1)) {
            uint64_t v15 = 2989;
          }
          else {
            uint64_t v15 = 3072;
          }
          *(_DWORD *)uint64_t v15 = -559038737;
          abort();
        }
        CFIndex v10 = v9;
        if (a1[1] <= v9) {
          return 0;
        }
        CFBitVectorRef v11 = (const __CFBitVector *)a1[3];
      }
      if (CFBitVectorGetBitAtIndex(v11, v10)) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t triePropertyID(unsigned char *a1, unsigned int a2)
{
  if (a2 < 3 || *a1 != 1) {
    return 0;
  }
  if (a1[a2 - 1] == 1 && a1[a2 - 2] == 1) {
    return 1;
  }
  __int16 v16 = 0;
  int v15 = 0;
  if (a1[1] == 2) {
    unsigned int v3 = 2;
  }
  else {
    unsigned int v3 = 1;
  }
  LODWORD(v4) = a2 - v3;
  if ((int)(a2 - v3) < 1)
  {
    unsigned int v7 = &v15;
  }
  else
  {
    if ((int)v4 >= 5) {
      uint64_t v4 = 5;
    }
    else {
      uint64_t v4 = v4;
    }
    uint64_t v5 = v4 - 1;
    int v6 = &a1[v3];
    unsigned int v7 = &v15;
    do
    {
      uint64_t v8 = v5;
      int v9 = *v6++;
      int v10 = tcmr[v9];
      *(unsigned char *)unsigned int v7 = tcmr[v9];
      unsigned int v7 = (int *)((char *)v7 + 1);
      if ((v10 & 0x80000000) == 0) {
        break;
      }
      uint64_t v5 = v8 - 1;
    }
    while (v8);
  }
  *(unsigned char *)unsigned int v7 = 0;
  uint64_t result = v15;
  if ((char)v15 < 0)
  {
    if (SBYTE1(v15) < 0)
    {
      if (SBYTE2(v15) < 0)
      {
        if (SHIBYTE(v15) < 0)
        {
          if ((char)v16 < 0)
          {
            CFBitVectorRef v11 = __si_assert_copy_extra_625(-1);
            long long v12 = v11;
            long long v13 = "";
            if (v11) {
              long long v13 = v11;
            }
            __message_assert("%s:%u: failed assertion '%s' %s readVInt32: exceeds max size for uint32_t", "VIntUtils.h", 341, "(b4 & 0x80) == 0", v13);
            free(v12);
            if (__valid_fs(-1)) {
              uint64_t v14 = 2989;
            }
            else {
              uint64_t v14 = 3072;
            }
            *(_DWORD *)uint64_t v14 = -559038737;
            abort();
          }
          return ((HIBYTE(v15) & 0x7F) << 21) | (v16 << 28) | ((BYTE2(v15) & 0x7F) << 14) | ((BYTE1(v15) & 0x7F) << 7) | v15 & 0x7Fu;
        }
        else
        {
          return ((BYTE2(v15) & 0x7F) << 14) | (HIBYTE(v15) << 21) | ((BYTE1(v15) & 0x7F) << 7) | v15 & 0x7Fu;
        }
      }
      else
      {
        return ((BYTE1(v15) & 0x7F) << 7) | (BYTE2(v15) << 14) | v15 & 0x7Fu;
      }
    }
    else
    {
      return v15 & 0x7F | (BYTE1(v15) << 7);
    }
  }
  return result;
}

uint64_t si_message_trace_lifecycle(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (result)
  {
    uint64_t v6 = *(void *)(result + 2352);
    unsigned int v7 = *(uint64_t (**)(void, const char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 88);
    if (v7) {
      return v7(*(void *)(v6 + 144), "com.apple.spotlight.mds.index-lifecycle", a2, a3, a4, a5, a6);
    }
  }
  return result;
}

BOOL si_should_cancel_merge(uint64_t a1)
{
  return *(_DWORD *)(a1 + 2420) != 0;
}

uint64_t si_merge_unlock(uint64_t result, void *a2)
{
  if (result) {
    return si_scheduler_resume(*(void *)(result + 872), a2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 6130);
  }
  return result;
}

atomic_uint *si_merge_lock(atomic_uint *result)
{
  if (result)
  {
    char v1 = result + 361;
    atomic_fetch_add(result + 361, 1u);
    uint64_t result = (atomic_uint *)si_scheduler_suspend(*((void *)result + 109));
    atomic_fetch_add(v1, 0xFFFFFFFF);
  }
  return result;
}

void __si_merge_term_filter_ctx_init_block_invoke_3(uint64_t a1, CFIndex idx)
{
  CFIndex v3 = idx;
  bit_vector_set(*(void **)(a1 + 32), idx);
  uint64_t v4 = *(void **)(a1 + 40);
  bit_vector_set(v4, v3);
}

void __si_merge_term_filter_ctx_init_block_invoke_4(uint64_t a1, CFIndex idx)
{
}

void si_deferqueue_cleanup(void *a1, int a2)
{
  if (!a2)
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1[3] + 1312));
    uint64_t v4 = (void *)(a1[3] + 1168);
    uint64_t v6 = (void *)*a1;
    uint64_t v5 = a1[1];
    while (1)
    {
      unsigned int v7 = v4;
      uint64_t v4 = (void *)*v4;
      if (!v4) {
        break;
      }
      if ((void *)v4[1] == v6)
      {
        *unsigned int v7 = *v4;
        free(v4);
        break;
      }
    }
    if (*v6 == v5)
    {
      uint64_t v8 = *(NSObject **)(v5 + 32);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __si_scheduler_remove_and_destroy_block_invoke;
      block[3] = &__block_descriptor_tmp_14_1093;
      void block[4] = v5;
      dispatch_sync(v8, block);
      int v9 = v6[2];
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 0x40000000;
      v12[2] = __si_scheduler_remove_and_destroy_block_invoke_2;
      v12[3] = &__block_descriptor_tmp_15_1094;
      v12[4] = v6;
      v12[5] = v5;
      dispatch_barrier_async(v9, v12);
    }
    pthread_mutex_unlock((pthread_mutex_t *)(a1[3] + 1312));
    int v10 = (void *)a1[3];
    if (v10 && v10[148] && v10[130] && v10[(v10[137] != 0) + 126])
    {
      si_sync_ctx_create_with_defer_fd(a1[3], a1[2]);
      si_enqueue_work_with_qos(v10[137], 9, (uint64_t)si_sync_index_delayed0, v11);
    }
  }
  uint64_t v3 = a1[1];
  if (v3 && atomic_fetch_add((atomic_uint *volatile)(v3 + 88), 0xFFFFFFFF) == 1) {
    _si_scheduler_destroy(v3);
  }
  free(a1);
}

uint64_t _CreateDeferQueue(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (pthread_mutex_t *)(a1 + 1312);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1312));
  if (*(void *)(a1 + 1144))
  {
    uint64_t v14 = __si_assert_copy_extra_625(-1);
    int v15 = v14;
    __int16 v16 = "";
    if (v14) {
      __int16 v16 = v14;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 6506, "!ref->workqueues.queues[SI_DEFER_QUEUE_IDX]", v16);
    free(v15);
    if (__valid_fs(-1)) {
      uint64_t v17 = 2989;
    }
    else {
      uint64_t v17 = 3072;
    }
    *(_DWORD *)uint64_t v17 = -559038737;
    abort();
  }
  *(void *)(a1 + 1144) = si_create_child_queue(*(void *)(a1 + 872));
  uint64_t v9 = *a2;
  *(void *)(a1 + 1296) = *(void *)(*(void *)(*a2 + 8 * a3) + 80);
  uint64_t v10 = *(void *)(v9 + 8 * (a3 + a4) - 8);
  LODWORD(v11) = *(_DWORD *)(v10 + 68);
  uint64_t v12 = *(void *)(v10 + 80);
  if (v11 >= 2) {
    uint64_t v11 = v11;
  }
  else {
    uint64_t v11 = 0;
  }
  *(void *)(a1 + 1304) = v12 + v11;
  return pthread_mutex_unlock(v8);
}

uint64_t new_live_index(uint64_t a1, int a2, unint64_t a3)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1 + 1376);
  uint64_t v7 = *(unsigned int *)(v6 + 8);
  unsigned int v61 = 0;
  if (!fd_setDir(*(unsigned int *)(a1 + 32), (int *)&v61)) {
    return 0;
  }
  CFStringRef v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"tmp.live.%d.", v7);
  int v8 = ((*(_DWORD *)(a1 + 828) & 1) << 6) ^ 0x50;
  if (*(unsigned char *)(a1 + 2064)) {
    v8 |= 0x100u;
  }
  if (*(unsigned char *)(a1 + 2065)) {
    v8 |= 0x400u;
  }
  unsigned int v9 = *(_DWORD *)(a1 + 6576);
  int v10 = v8 | (v9 >> 7) & 0x800;
  if (*(unsigned char *)(a1 + 6936)) {
    v10 |= 0x1000u;
  }
  unsigned int v11 = v10 | ~(v9 >> 1) & 0x8000;
  v60[0] = MEMORY[0x1E4F143A8];
  v60[1] = 0x40000000;
  v60[2] = __new_live_index_block_invoke;
  v60[3] = &__block_descriptor_tmp_770;
  v60[4] = a1;
  if (v7)
  {
    uint64_t v12 = (v7 - 1);
    uint64_t v13 = *(void *)(*(void *)v6 + 8 * v12);
    LODWORD(v14) = *(_DWORD *)(v13 + 68);
    if (v14 >= 2) {
      uint64_t v14 = v14;
    }
    else {
      uint64_t v14 = 0;
    }
    unint64_t v15 = *(void *)(v13 + 80) + v14;
    if (v15 > a3) {
      a3 = v15;
    }
    uint64_t v16 = *(unsigned int *)(a1 + 32);
    int v17 = *(_DWORD *)(v13 + 40);
    int v18 = *(_DWORD *)(a1 + 1276);
    uint64_t v19 = *(int **)(a1 + 1184);
    if (v19) {
      uint64_t vector_store = db_get_vector_store(v19);
    }
    else {
      uint64_t vector_store = 0;
    }
    v58[0] = MEMORY[0x1E4F143A8];
    v58[1] = 0x40000000;
    v58[2] = __new_live_index_block_invoke_3;
    v58[3] = &__block_descriptor_tmp_772;
    v58[4] = a1;
    uint64_t v31 = v16;
    CFStringRef v32 = v55;
    uint64_t New = ContentIndexCreateNew(v31, v55, a3, v17, v11, 1, v18, vector_store, (uint64_t)v58, v60, *(_DWORD *)(a1 + 60));
    uint64_t v33 = *(_DWORD **)(*(void *)v6 + 8 * v12);
    int v34 = a3;
    int v35 = 6719;
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 1384);
    uint64_t v23 = *(void *)(*(void *)v22 + 8 * (*(_DWORD *)(v22 + 8) - 1));
    LODWORD(v24) = *(_DWORD *)(v23 + 68);
    if (v24 >= 2) {
      uint64_t v24 = v24;
    }
    else {
      uint64_t v24 = 0;
    }
    unint64_t v25 = *(void *)(v23 + 80) + v24;
    if (v25 > a3) {
      a3 = v25;
    }
    uint64_t v26 = *(unsigned int *)(a1 + 32);
    int v27 = *(_DWORD *)(v23 + 40);
    int v28 = *(_DWORD *)(a1 + 1276);
    uint64_t v29 = *(int **)(a1 + 1184);
    if (v29) {
      uint64_t v30 = db_get_vector_store(v29);
    }
    else {
      uint64_t v30 = 0;
    }
    v59[0] = MEMORY[0x1E4F143A8];
    v59[1] = 0x40000000;
    void v59[2] = __new_live_index_block_invoke_2;
    v59[3] = &__block_descriptor_tmp_771;
    v59[4] = a1;
    uint64_t v36 = v26;
    CFStringRef v32 = v55;
    uint64_t New = ContentIndexCreateNew(v36, v55, a3, v27, v11, 1, v28, v30, (uint64_t)v59, v60, *(_DWORD *)(a1 + 60));
    uint64_t v33 = *(_DWORD **)(*(void *)v22 + 8 * (*(_DWORD *)(v22 + 8) - 1));
    int v34 = a3;
    int v35 = 6714;
  }
  _ContentIndexSetPayloadMaxCount(v33, v34, v35);
  CFRelease(v32);
  if (New)
  {
    SIActivityJournalNewLiveIndex((os_unfair_lock_s *)(a1 + 2184), v7, a3);
    int v37 = *(_DWORD *)(v6 + 8);
    if (v37) {
      ContentIndexSetEmergency((int *)New, *(unsigned __int8 *)(*(void *)(*(void *)v6 + 8 * (v7 - 1)) + 44));
    }
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 0x40000000;
    aBlock[2] = __new_live_index_block_invoke_4;
    aBlock[3] = &__block_descriptor_tmp_773;
    aBlock[4] = a1;
    aBlock[5] = New;
    ContentIndexSetDirtyCallback(New, aBlock);
    *(unsigned char *)(New + 15201) = 4;
    uint64_t v66 = 0;
    long long v64 = 0u;
    long long v65 = 0u;
    __long long buf = 0u;
    long long v63 = 0u;
    int v56 = 0;
    ContentIndexSyncIndex(New, (uint64_t)&__buf, (uint64_t)&v56);
    unsigned int v38 = ContentIndexListClone((long long *)v6);
    unint64_t v39 = (unint64_t)v38;
    unsigned int v40 = *((_DWORD *)v38 + 3);
    if (v40 <= *((_DWORD *)v38 + 2))
    {
      unsigned int v41 = 2 * v40;
      *((_DWORD *)v38 + 3) = v41;
      *unsigned int v38 = malloc_type_realloc((void *)*v38, 8 * v41, 0x2004093837F09uLL);
    }
    memset(__str, 0, 255);
    snprintf((char *)__str, 0xFFuLL, "live.%d.", v7);
    bzero((char *)&__buf + 8, 0x208uLL);
    *(void *)&__long long buf = 0x6D6F76650A00;
    DWORD2(__buf) = 2;
    LODWORD(v63) = v7;
    HIDWORD(v63) = 1;
    *(void *)(*(void *)v39 + 8 * v7) = New;
    *(_DWORD *)(v39 + 16) = v7;
    ++*(_DWORD *)(v39 + 8);
    si_clone_index_metadata_to_inflight(a1);
    __strlcpy_chk();
    int v42 = si_openat_protected(*(unsigned int *)(a1 + 32), "tmp.movePlan", 1538, 3);
    pwrite(v42, &__buf, 0x210uLL, 0);
    fcntl(v42, 85);
    ContentIndexChangePrefix(New);
    unlinkat(*(_DWORD *)(a1 + 32), "tmp.movePlan", 2048);
    close(v42);
    uint64_t v48 = v6;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 1376), (unint64_t *)&v48, v39);
    if (v48 != v6)
    {
      long long v51 = __si_assert_copy_extra_625(*(_DWORD *)(a1 + 32));
      uint64_t v52 = v51;
      uint64_t v53 = "";
      if (v51) {
        uint64_t v53 = v51;
      }
      __message_assert("%s:%u: failed assertion '%s' %s This should be impossible; this thread is supposed to be  suspended when the oth"
        "er thread changes index sets.",
        "SpotlightIndex.c",
        6776,
        "OSAtomicCompareAndSwapPtrBarrier(oldIndexSet,indexSet,(void* volatile*)indexSetPtr)",
        v53);
      free(v52);
      if (__valid_fs(*(_DWORD *)(a1 + 32))) {
        uint64_t v54 = 2989;
      }
      else {
        uint64_t v54 = 3072;
      }
      *(_DWORD *)uint64_t v54 = -559038737;
      abort();
    }
    si_write_index_state(a1, 1, 0, v43, v44, v45, v46, v47);
    if (a2)
    {
      si_cleanup(a1, v6);
      atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 1392), 1u, memory_order_relaxed);
      if (!v37) {
        goto LABEL_39;
      }
    }
    else
    {
      free(*(void **)v6);
      free((void *)v6);
      if (!v37) {
        goto LABEL_39;
      }
    }
    _CIDisableUpdates(*(void *)(*(void *)v39 + 8 * (v7 - 1)));
    uint64_t New = *(void *)(*(void *)v39 + 8 * (v7 - 1));
  }
LABEL_39:
  int v49 = v61;
  MEMORY[0x1C1882290](v61);
  if ((v49 & 0x80000000) == 0) {
    close(v49);
  }
  return New;
}

void si_recycleForBadIndex(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v6 = *__error();
  uint64_t v7 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 136315650;
    int v10 = "si_recycleForBadIndex";
    __int16 v11 = 1024;
    int v12 = 16302;
    __int16 v13 = 2080;
    uint64_t v14 = a3;
    _os_log_error_impl(&dword_1BD672000, v7, OS_LOG_TYPE_ERROR, "%s:%d: recycle %s", buf, 0x1Cu);
  }
  *__error() = v6;
  _CIMakeInvalid(a2);
  if (a1 && (atomic_load_explicit((atomic_uchar *volatile)(a1 + 2431), memory_order_acquire) & 1) == 0)
  {
    if (SIIsAppleInternal_onceToken != -1) {
      dispatch_once(&SIIsAppleInternal_onceToken, &__block_literal_global_5267);
    }
    if (SIIsAppleInternal_internal)
    {
      if (!atomic_fetch_add_explicit(si_recycleForBadIndex__crashCount, 1u, memory_order_relaxed))
      {
        CFStringRef v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"recycle, message:%s", a3);
        getpid();
        SISimulateCrashForPid(0, (uint64_t)v8);
        if (v8) {
          CFRelease(v8);
        }
      }
    }
  }
  si_makeUnavailable(a1, 22, 2, 7, a3);
}

void __new_live_index_block_invoke(uint64_t a1, const void *a2)
{
}

uint64_t __new_live_index_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return _si_next_index_id(*(os_unfair_lock_s **)(a1 + 32), a2, 1, 0);
}

uint64_t __new_live_index_block_invoke_3(uint64_t a1, uint64_t a2)
{
  return _si_next_index_id(*(os_unfair_lock_s **)(a1 + 32), a2, 1, 0);
}

uint64_t __new_live_index_block_invoke_4(uint64_t a1)
{
  return si_set_obj_state(*(os_unfair_lock_s **)(a1 + 32), *(void *)(a1 + 40));
}

void __transfer_live_indexes_block_invoke(uint64_t a1, const void *a2)
{
}

uint64_t __transfer_live_indexes_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return _si_next_index_id(*(os_unfair_lock_s **)(a1 + 32), a2, 1, 0);
}

uint64_t __transfer_live_indexes_block_invoke_3(uint64_t a1)
{
  return si_set_obj_state(*(os_unfair_lock_s **)(a1 + 32), *(void *)(a1 + 40));
}

void si_scanEnded(uint64_t *a1, int a2)
{
  if (!a2)
  {
    uint64_t v4 = *a1;
    if (**(void **)(*a1 + 1384))
    {
      uint64_t v5 = *(void *)(v4 + 1408);
      if (v5)
      {
        int v6 = *(void (**)(uint64_t, void))(v5 + 88);
        if (v6)
        {
          if (!*(unsigned char *)(v5 + 240)) {
            v6(v5, *(void *)(v5 + 24));
          }
        }
      }
      si_sync_ctx_create_with_defer_fd(v4, 0);
      *(void *)(v7 + 64) = a1[8];
      a1[8] = 0;
      syncIndex(v7, 0);
      int v8 = *(_DWORD *)(a1[1] + 56);
      if (gSISystemOnBattery
        && (uint64_t v9 = *(void *)(v4 + 2352)) != 0
        && (int v10 = *(void (**)(uint64_t, void, __CFString *, void *))(v9 + 80)) != 0)
      {
        uint64_t v11 = *(void *)(v9 + 144);
        v12[0] = MEMORY[0x1E4F143A8];
        v12[1] = 0x40000000;
        v12[2] = __si_scanEnded_block_invoke;
        v12[3] = &__block_descriptor_tmp_787;
        int v13 = v8;
        v10(v11, 0, @"ScanEnded", v12);
      }
      else
      {
        setupAndIssueMergeScan(v4, v8, 0, 0, 0);
      }
    }
  }
  si_sync_ctx_free((uint64_t)a1, a2 != 0);
}

void __si_scanEnded_block_invoke(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, NSObject *a5)
{
  if (a2) {
    setupAndIssueMergeScan(a2, *(_DWORD *)(a1 + 32), a3, a4, a5);
  }
}

void setupAndIssueMergeScan(uint64_t a1, int a2, void *a3, uint64_t a4, NSObject *a5)
{
  int v17 = 0;
  int v18 = a2;
  BOOL v9 = si_needsVaccuum(*(uint64_t **)(a1 + 1376), &v18, &v17);
  int v10 = v17;
  if (v17)
  {
    BOOL v11 = v9;
    int v12 = (char *)malloc_type_calloc(1uLL, 0x460uLL, 0x1070040C187FD8AuLL);
    *(void *)int v12 = a1;
    uint8_t v12[16] = 1;
    v12[1041] = v11;
    *((_DWORD *)v12 + 2) = v18;
    *((_DWORD *)v12 + 3) = v10;
    v12[1042] = 0;
    *((void *)v12 + 131) = "void setupAndIssueMergeScan(SIRef, int32_t, _Bool, xpc_activity_t, _Bool *, dispatch_group_t)";
    *((_DWORD *)v12 + 274) = 6;
    v12[1100] = 1;
    __strlcpy_chk();
    int v13 = v12 + 1064;
    si_power_info_init((uint64_t)(v12 + 1064), a3, a4, a5);
    if (!*((void *)v12 + 136) && !*v13)
    {
      uint64_t v14 = *(void *)(a1 + 2352);
      if (v14)
      {
        uint64_t v15 = *(uint64_t (**)(void, const char *, uint64_t, const char *))(v14 + 64);
        if (v15) {
          _DWORD *v13 = v15(*(void *)(v14 + 144), "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 9052, "void setupAndIssueMergeScan(SIRef, int32_t, _Bool, xpc_activity_t, _Bool *, dispatch_group_t)");
        }
      }
    }
    uint64_t v16 = *(void *)(a1 + 1056);
    si_enqueue_work(v16, (uint64_t)si_mergeIndex, (uint64_t)v12);
  }
}

BOOL si_needsVaccuum(uint64_t *a1, _DWORD *a2, _DWORD *a3)
{
  *a3 = 0;
  unsigned int v3 = *((_DWORD *)a1 + 2);
  uint64_t v4 = *a1;
  if (!v3) {
    goto LABEL_13;
  }
  int v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
LABEL_3:
  --v3;
  do
  {
    int v8 = *(_DWORD **)(v4 + 8 * v3);
    if (v8[14] == *a2)
    {
      int v5 = v8[10];
      char v6 = 1;
      *a3 = 1;
      uint64_t v7 = v8;
      if (v3) {
        goto LABEL_3;
      }
      goto LABEL_10;
    }
    --v3;
  }
  while (v3 != -1);
  int v8 = v7;
  if ((v6 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_10:
  uint64_t v9 = *((unsigned int *)a1 + 2);
  if (v9)
  {
    while (*(_DWORD *)(*(void *)(v4 + 8 * v9 - 8) + 40) != v5)
    {
      if (!--v9) {
        goto LABEL_13;
      }
    }
    unint64_t v11 = 0;
    uint64_t v10 = 0;
    uint64_t v15 = 8 * (v9 - 1);
    int v16 = v9;
    while (1)
    {
      uint64_t v4 = *a1;
      int v17 = *(unsigned int **)(*a1 + v15);
      if (v17[10] != v5 && v17[13] != v8[13]) {
        break;
      }
      ++*a3;
      uint64_t v18 = atomic_load(v17 + 4);
      v10 += v18;
      LODWORD(v18) = v17[17];
      if (v18 >= 2) {
        uint64_t v18 = v18;
      }
      else {
        uint64_t v18 = 0;
      }
      v11 += v18;
      v15 -= 8;
      if (!--v16)
      {
        uint64_t v4 = *a1;
        break;
      }
    }
    int v12 = v9 - *a3;
  }
  else
  {
LABEL_13:
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    int v12 = 0;
  }
  uint64_t v13 = *(void *)(v4 + 8 * (v12 & ~(v12 >> 31)));
  if (!v13) {
    return 0;
  }
  *a2 = *(_DWORD *)(v13 + 56);
  return v11 < 3 * v10;
}

_DWORD *si_getSyncIndex(uint64_t a1, int a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = *(uint64_t **)(a1 + 1384);
  uint64_t v4 = *(uint64_t **)(a1 + 1376);
  uint64_t v5 = *((unsigned int *)v3 + 2);
  if ((int)v5 >= 1)
  {
    LOBYTE(v6) = 0;
    for (uint64_t i = v5 + 1; i > 1; --i)
    {
      if (v6)
      {
        uint64_t v5 = (v5 - 1);
      }
      else
      {
        uint64_t v5 = (v5 - 1);
        uint64_t v8 = *(void *)(*v3 + 8 * v5);
        char v9 = atomic_load((unsigned int *)(v8 + 36));
        if ((v9 & 3) == 0)
        {
          int v6 = *(unsigned __int8 *)(v8 + 15203);
          if (!v6) {
            continue;
          }
        }
      }
      uint64_t v10 = *(void *)(*v3 + 8 * v5);
      char v11 = atomic_load((unsigned int *)(v10 + 36));
      if ((v11 & 3) == 0 && !*(unsigned char *)(v10 + 15203))
      {
        unint64_t v25 = __si_assert_copy_extra_625(-1);
        uint64_t v26 = v25;
        int v27 = "";
        if (v25) {
          int v27 = v25;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 9623, "!ContentIndexWritable(indexSet->index[i-1])", v27);
LABEL_35:
        free(v26);
        if (__valid_fs(-1)) {
          uint64_t v28 = 2989;
        }
        else {
          uint64_t v28 = 3072;
        }
        *(_DWORD *)uint64_t v28 = -559038737;
        abort();
      }
      LOBYTE(v6) = 1;
    }
  }
  uint64_t v12 = *((int *)v4 + 4);
  if (v12 != -1)
  {
    uint64_t v13 = *(void *)(*v4 + 8 * v12);
    char v14 = atomic_load((unsigned int *)(v13 + 36));
    if ((v14 & 3) != 0 || *(unsigned char *)(v13 + 15203))
    {
      int v34 = __si_assert_copy_extra_625(-1);
      int v35 = v34;
      uint64_t v36 = "";
      if (v34) {
        uint64_t v36 = v34;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 9626, "indexLiveSet->currentIndex==~0 || ContentIndexWritable(indexLiveSet->index[indexLiveSet->currentIndex])", v36);
      free(v35);
      if (__valid_fs(-1)) {
        uint64_t v37 = 2989;
      }
      else {
        uint64_t v37 = 3072;
      }
      *(_DWORD *)uint64_t v37 = -559038737;
      abort();
    }
  }
  uint64_t v15 = *((int *)v3 + 4);
  if (v15 != -1)
  {
    uint64_t v16 = *(void *)(*v3 + 8 * v15);
    char v17 = atomic_load((unsigned int *)(v16 + 36));
    if ((v17 & 3) == 0 && !*(unsigned char *)(v16 + 15203))
    {
      uint64_t v19 = *v3;
      uint64_t v18 = *((int *)v3 + 4);
      goto LABEL_19;
    }
  }
  uint64_t v18 = *((int *)v4 + 4);
  if (v18 != -1)
  {
    uint64_t v19 = *v4;
LABEL_19:
    LiveIndex = *(_DWORD **)(v19 + 8 * v18);
    goto LABEL_21;
  }
  LiveIndex = si_getLiveIndex(*(void *)(a1 + 1376));
LABEL_21:
  if (*LiveIndex != -1163003219)
  {
    uint64_t v30 = __si_assert_copy_extra_625(-1);
    uint64_t v26 = v30;
    uint64_t v31 = "";
    if (v30) {
      uint64_t v31 = v30;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 9635, "ContentIndexValidIndex(cindex)", v31);
    goto LABEL_35;
  }
  char v21 = atomic_load(LiveIndex + 9);
  if ((v21 & 3) != 0 || *((unsigned char *)LiveIndex + 15203))
  {
    CFStringRef v32 = __si_assert_copy_extra_625(-1);
    uint64_t v26 = v32;
    uint64_t v33 = "";
    if (v32) {
      uint64_t v33 = v32;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 9636, "ContentIndexWritable(cindex)", v33);
    goto LABEL_35;
  }
  if (a2 && LiveIndex[10] != a2 && !*((unsigned char *)LiveIndex + 44))
  {
    int v22 = *__error();
    uint64_t v23 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      int v29 = LiveIndex[10];
      *(_DWORD *)long long buf = 136315906;
      unint64_t v39 = "si_getSyncIndex";
      __int16 v40 = 1024;
      int v41 = 9639;
      __int16 v42 = 1024;
      int v43 = a2;
      __int16 v44 = 1024;
      int v45 = v29;
      _os_log_error_impl(&dword_1BD672000, v23, OS_LOG_TYPE_ERROR, "%s:%d: Unexpected transaction id %d != %d", buf, 0x1Eu);
    }
    *__error() = v22;
  }
  return LiveIndex;
}

uint64_t si_mergeOneIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v12 = 0;
  if (!fd_setDir(*(unsigned int *)(a1 + 32), (int *)&v12)) {
    return 0;
  }
  uint64_t v4 = *(long long **)(a1 + 1376);
  uint64_t v5 = ContentIndexListClone(v4);
  bzero(v13, 0x400uLL);
  int v6 = fcntl(*(_DWORD *)(a1 + 32), 50, v13);
  if (v13[0]) {
    BOOL v7 = v6 < 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v13;
  }
  uint64_t v9 = OuterMerge(a1, *(_DWORD *)(a2 + 56), 1u, (long long **)(a1 + 1376), (uint64_t)v4, v5, (uint64_t)v8, "live.%d.", 0, 1u, 0);
  int v10 = v12;
  MEMORY[0x1C1882290](v12);
  if ((v10 & 0x80000000) == 0) {
    close(v10);
  }
  return v9;
}

uint64_t si_indexIdForOID(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 1376);
  uint64_t v5 = *(unsigned int *)(v4 + 8);
  if (v5)
  {
    uint64_t v6 = v5 - 1;
    while (1)
    {
      uint64_t v7 = *(void *)(*(void *)v4 + 8 * v6);
      if (v7)
      {
        uint64_t result = _CIDocIdForOID(v7, a2);
        if (result) {
          break;
        }
      }
      if ((unint64_t)--v6 >= 0xFFFFFFFFFFFFFFFELL) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    uint64_t v9 = *(void *)(a1 + 1384);
    uint64_t v10 = *(unsigned int *)(v9 + 8);
    if (v10)
    {
      uint64_t v11 = v10 - 1;
      while (1)
      {
        uint64_t v12 = *(void *)(*(void *)v9 + 8 * v11);
        if (v12)
        {
          uint64_t result = _CIDocIdForOID(v12, a2);
          if (result) {
            break;
          }
        }
        if ((unint64_t)--v11 >= 0xFFFFFFFFFFFFFFFELL) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t SICreateIndex(void *a1, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  bzero(buffer, 0x400uLL);
  if (!CFStringGetFileSystemRepresentation(a2, buffer, 1024)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = open(buffer, 1081344);
  if (result != -1)
  {
    int v20 = result;
    if (a6 && a7 && a8)
    {
      uint64_t v34 = 0;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = *(_OWORD *)a9;
      uint64_t v27 = *(void *)(a9 + 16);
      uint64_t v21 = a11;
      uint64_t result = _SIOpenIndex((uint64_t)a1, result, a3, a4, a5, (uint64_t)&v28, (uint64_t)&v26, a10, a11, 0, &SICreateIndex_cancel);
      if ((result & 0x80000000) == 0)
      {
        uint64_t v22 = *((void *)&v31 + 1);
        uint64_t v23 = v29;
        uint64_t v24 = *((void *)&v28 + 1);
        *a6 = *((void *)&v29 + 1) + v31 + v28;
        uint64_t v25 = *((void *)&v30 + 1);
        *a7 = v30 + v22 + v24;
        *a8 = v25 + v32 + v23;
      }
    }
    else
    {
      long long v28 = *(_OWORD *)a9;
      *(void *)&long long v29 = *(void *)(a9 + 16);
      uint64_t v21 = a11;
      uint64_t result = _SIOpenIndex((uint64_t)a1, result, a3, a4, a5, 0, (uint64_t)&v28, a10, a11, 0, &SICreateIndex_cancel);
    }
    if ((a5 & 6) == 2 && (result & 0x80000000) != 0)
    {
      if (a6) {
        *a6 = 0;
      }
      if (a7) {
        *a7 = 0;
      }
      if (a8) {
        *a8 = 0;
      }
      long long v28 = *(_OWORD *)a9;
      *(void *)&long long v29 = *(void *)(a9 + 16);
      LODWORD(result) = SICreateNewIndex(a1, v20, a3, a4, a5, &v28, a10, v21, &SICreateIndex_cancel);
      if (result <= 1) {
        return 1;
      }
      else {
        return result;
      }
    }
  }
  return result;
}

uint64_t _SIOpenIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned char *a10, _DWORD *a11)
{
  uint64_t v11 = MEMORY[0x1F4188790](a1);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v606 = v16;
  uint64_t v18 = v17;
  uint64_t v611 = v19;
  uint64_t v612 = v20;
  int v22 = v21;
  uint64_t v23 = (void *)v11;
  uint64_t v659 = *MEMORY[0x1E4F143B8];
  int v654 = 0;
  unsigned int v601 = open(".", 4);
  _SITuningInit();
  makeThreadId();
  CFTypeRef v653 = 0;
  CFTypeRef cf = 0;
  *a10 = 0;
  unsigned int v24 = BYTE3(v18);
  _si_load_error_from_file(BYTE3(v18), v22);
  _si_set_error_str(0, 1);
  _si_set_rebuild_reason(0, 1, 1);
  uint64_t v25 = openat(v22, "tmp.movePlan", 2);
  unsigned int v617 = v18;
  unsigned int v615 = BYTE3(v18);
  if ((v25 & 0x80000000) == 0)
  {
    uint64_t v26 = v25;
    bzero(__buf, 0x210uLL);
    if (prot_pread(v26, __buf, 0x210uLL, 0) == 528 && *(void *)__buf == 0x6D6F76650A00)
    {
      memset(v658, 0, 255);
      memset(v657, 0, 255);
      switch(*(_DWORD *)&__buf[8])
      {
        case 0:
          if (__buf[12]) {
            uint64_t v27 = "live.";
          }
          else {
            uint64_t v27 = "";
          }
          switch(*(_DWORD *)&__buf[36])
          {
            case 0:
              if (*(_DWORD *)&__buf[20])
              {
                unsigned int v28 = 0;
                do
                {
                  snprintf((char *)v657, 0xFFuLL, "%s%d.", v27, v28 + *(_DWORD *)&__buf[16]);
                  snprintf((char *)v658, 0xFFuLL, "%s.%s%d.", "tmp.victim", v27, v28 + *(_DWORD *)&__buf[16]);
                  ContentIndexCompleteChangePrefix(v22, (char *)v657, (char *)v658);
                  ++v28;
                }
                while (v28 < *(_DWORD *)&__buf[20]);
              }
              *(_DWORD *)&__buf[36] = 1;
              pwrite(v26, __buf, 0x210uLL, 0);
              fcntl(v26, 85);
              goto LABEL_13;
            case 1:
LABEL_13:
              v620 = v23;
              int v29 = *(_DWORD *)&__buf[32];
              if (*(_DWORD *)&__buf[32] < *(_DWORD *)&__buf[28])
              {
                do
                {
                  int v30 = v29;
                  int v31 = *(_DWORD *)&__buf[16] + *(_DWORD *)&__buf[32] + 1;
                  snprintf((char *)v657, 0xFFuLL, "%s%d.", v27, v29 + *(_DWORD *)&__buf[24]);
                  snprintf((char *)v658, 0xFFuLL, "%s%d.", v27, v31);
                  *(_DWORD *)&__uint8_t buf[32] = v30;
                  pwrite(v26, __buf, 0x210uLL, 0);
                  fcntl(v26, 85);
                  ContentIndexCompleteChangePrefix(v22, (char *)v657, (char *)v658);
                  int v29 = v30 + 1;
                }
                while ((v30 + 1) < *(_DWORD *)&__buf[28]);
              }
              *(_DWORD *)&__buf[36] = 2;
              pwrite(v26, __buf, 0x210uLL, 0);
              fcntl(v26, 85);
              uint64_t v23 = v620;
              goto LABEL_16;
            case 2:
LABEL_16:
              snprintf((char *)v658, 0xFFuLL, "%s%d.", v27, *(_DWORD *)&__buf[16]);
              ContentIndexCompleteChangePrefix(v22, &__buf[268], (char *)v658);
              *(_DWORD *)&__buf[36] = 3;
              pwrite(v26, __buf, 0x210uLL, 0);
              fcntl(v26, 85);
              goto LABEL_33;
            case 3:
              goto LABEL_33;
            default:
              goto LABEL_37;
          }
        case 1:
          if (*(_DWORD *)&__buf[28] == 1) {
            goto LABEL_22;
          }
          if (*(_DWORD *)&__buf[28]) {
            goto LABEL_37;
          }
          int v32 = *(_DWORD *)&__buf[24];
          if (*(_DWORD *)&__buf[24] < *(_DWORD *)&__buf[12])
          {
            do
            {
              int v33 = v32;
              *(_DWORD *)&__unsigned char buf[24] = v32;
              pwrite(v26, __buf, 0x210uLL, 0);
              fcntl(v26, 85);
              snprintf((char *)v657, 0xFFuLL, "live.%d.", v33 + *(_DWORD *)&__buf[16]);
              snprintf((char *)v658, 0xFFuLL, "%d.", v33 + *(_DWORD *)&__buf[20]);
              ContentIndexCompleteChangePrefix(v22, (char *)v657, (char *)v658);
              int v32 = v33 + 1;
            }
            while ((v33 + 1) < *(_DWORD *)&__buf[12]);
          }
          *(_DWORD *)&__buf[28] = 1;
          pwrite(v26, __buf, 0x210uLL, 0);
LABEL_22:
          uint64_t v34 = "live.0.";
          int v35 = v22;
          break;
        case 2:
          if (__buf[12]) {
            uint64_t v36 = "live.";
          }
          else {
            uint64_t v36 = "";
          }
          if (*(_DWORD *)&__buf[28] == 1) {
            goto LABEL_31;
          }
          if (*(_DWORD *)&__buf[28]) {
            goto LABEL_37;
          }
          v621 = v23;
          for (int i = *(_DWORD *)&__buf[24]; i > *(int *)&__buf[16]; --i)
          {
            snprintf((char *)v657, 0xFFuLL, "%s%d.", v36, i - 1);
            snprintf((char *)v658, 0xFFuLL, "%s%d.", v36, i);
            *(_DWORD *)&__unsigned char buf[24] = i;
            pwrite(v26, __buf, 0x210uLL, 0);
            fcntl(v26, 85);
            ContentIndexCompleteChangePrefix(v22, (char *)v657, (char *)v658);
          }
          *(_DWORD *)&__buf[28] = 1;
          pwrite(v26, __buf, 0x210uLL, 0);
          fcntl(v26, 85);
          uint64_t v23 = v621;
LABEL_31:
          snprintf((char *)v658, 0xFFuLL, "%s%d.", v36, *(_DWORD *)&__buf[16]);
          int v35 = v22;
          uint64_t v34 = (char *)v658;
          break;
        case 3:
          if (*(_DWORD *)&__buf[12] == 842150450)
          {
            _rename_prefix_suffix(v22, &__buf[268], ".offsets");
            _rename_prefix_suffix(v22, &__buf[268], ".data");
            _rename_prefix_suffix(v22, &__buf[268], ".header");
          }
          goto LABEL_37;
        case 4:
          ContentIndexCompleteChangePrefix(v22, &__buf[268], &__buf[12]);
          goto LABEL_37;
        default:
          goto LABEL_37;
      }
      ContentIndexCompleteChangePrefix(v35, &__buf[268], v34);
LABEL_33:
      rename_transitional_state(v22);
LABEL_37:
      unsigned int v24 = v615;
    }
    unlinkat(v22, "tmp.movePlan", 2048);
    close(v26);
    uint64_t v18 = v617;
  }
  unsigned int v38 = (char *)malloc_type_calloc(1uLL, 0x2778uLL, 0x10F0040EF72DC6BuLL);
  uint64_t v39 = (uint64_t)v38;
  *(void *)unsigned int v38 = 0xC0DE10DE10DEC0DELL;
  SIInitIndexLocks((uint64_t)v38);
  v651[0] = MEMORY[0x1E4F143A8];
  v651[1] = 0x40000000;
  v651[2] = ___SIOpenIndex_block_invoke;
  v651[3] = &__block_descriptor_tmp_795;
  v651[4] = v38;
  *((_DWORD *)v38 + 15) = v24;
  *((_DWORD *)v38 + 8) = -1;
  *((_DWORD *)v38 + 12) = -1;
  uint64_t v46 = *(void *)(v15 + 16);
  *(_OWORD *)(v38 + 8) = *(_OWORD *)v15;
  *((void *)v38 + 3) = v46;
  *((void *)v38 + 294) = v13;
  *((void *)v38 + 289) = 0;
  *((void *)v38 + 823) = a11;
  *((_DWORD *)v38 + 362) = 1;
  unsigned int v47 = *((_DWORD *)v38 + 1644) & 0xFFFBFFFF;
  *((_DWORD *)v38 + 1644) = v47;
  v38[6936] = (v18 & 0x40000) != 0;
  uint64_t v48 = *((void *)v38 + 148);
  if (v48)
  {
    db_datastore_set_bg_assertion_flag(v48, (v18 & 0x40000) != 0);
    unsigned int v49 = *((_DWORD *)v38 + 1644);
  }
  else
  {
    unsigned int v49 = v47;
  }
  *((_DWORD *)v38 + 1739) = 0;
  unsigned int v50 = (v18 >> 8) & 1;
  v38[2064] = BYTE1(v18) & 1;
  if ((v18 & 0x100) != 0)
  {
    *((_DWORD *)v38 + 1644) = v49 | 0x40000;
    int v51 = 1;
  }
  else
  {
    int v51 = 0;
    if (v612 && (v49 & 0x40000) != 0) {
      int v51 = (*(unsigned __int8 *)(v612 + 28) >> 4) & 1;
    }
  }
  *(_OWORD *)(v38 + 1208) = 0u;
  *(_OWORD *)(v38 + 1224) = 0u;
  *((_DWORD *)v38 + 302) = -1;
  uint64_t v52 = v601;
  *(_OWORD *)(v38 + 1256) = 0u;
  *(_OWORD *)(v38 + 1272) = 0u;
  *(_OWORD *)(v38 + 1240) = 0u;
  *(_OWORD *)(v38 + 1192) = 0u;
  uint64_t v649 = 0;
  uint64_t v648 = 0;
  CFTypeRef v650 = 0;
  uint64_t v647 = 0;
  v646 = 0;
  if (*a11)
  {
    __si_set_error_str(1, "%s:%u: %s", v40, v41, v42, v43, v44, v45, (char)"SpotlightIndex.c");
    int v53 = 89;
LABEL_49:
    uint64_t v54 = v23;
    goto LABEL_50;
  }
  int v55 = v18 & 0x80040001;
  int v56 = v18 & 4;
  int v57 = v611;
  int v605 = v56;
  unsigned int v616 = v22;
  if (v611)
  {
    int v58 = *(_DWORD *)(v611 + 28) & 1;
    int v59 = v55;
    int v60 = dup(*(_DWORD *)(v611 + 4));
    int v55 = v59;
    int v56 = v605;
    *((_DWORD *)v38 + 12) = v60;
    unsigned int v50 = v38[2064];
    int v57 = v58;
    uint64_t v18 = v617;
  }
  int v65 = v55;
  int v613 = v56;
  BOOL v66 = v56 != 0;
  if (v50) {
    int v67 = v57;
  }
  else {
    int v67 = v66;
  }
  if ((v18 & 8) != 0)
  {
    unsigned int v618 = v601;
    uint64_t v619 = v13;
    int v68 = -1;
    BOOL v69 = 0;
    unsigned int v70 = 0;
    int v71 = v51;
    uint64_t v54 = v23;
    uint64_t v72 = v611;
    goto LABEL_73;
  }
  int v604 = v55;
  int v608 = v55;
  bzero(v658, 0x400uLL);
  uint64_t v76 = guarded_dup(v616);
  *((void *)v38 + 4) = v76;
  *((void *)v38 + 5) = v77;
  if (v76 == -1 || MEMORY[0x1C1882290]())
  {
    int v53 = *__error();
    __si_set_error_str(1, "%s:%u: %s", v78, v79, v80, v81, v82, v83, (char)"SpotlightIndex.c");
    goto LABEL_49;
  }
  uint64_t v619 = v13;
  v622 = v23;
  v607 = v38 + 6936;
  if (v38[6936]) {
    int v108 = 0;
  }
  else {
    int v108 = v51;
  }
  registerForCloning(*((_DWORD *)v38 + 8), v108);
  bzero(v657, 0x400uLL);
  int v109 = *__error();
  uint64_t v110 = _SILogForLogForCategory(11);
  os_log_type_t v111 = 2 * (dword_1E9FC90D0 < 4);
  if (os_log_type_enabled(v110, v111))
  {
    int v112 = fcntl(*((_DWORD *)v38 + 8), 50, v657);
    int v113 = 0;
    if (LOBYTE(v657[0])) {
      BOOL v114 = v112 < 0;
    }
    else {
      BOOL v114 = 1;
    }
    if (!v114) {
      int v113 = v657;
    }
    *(_DWORD *)__long long buf = 134218242;
    *(void *)&__uint8_t buf[4] = v38;
    *(_WORD *)&__unsigned char buf[12] = 2080;
    *(void *)&__buf[14] = v113;
    _os_log_impl(&dword_1BD672000, v110, v111, "%p Open fd %s", __buf, 0x16u);
  }
  *__error() = v109;
  uint64_t v13 = v619;
  if (v38[2064])
  {
    *(_DWORD *)long long buf = 0;
    if (fd_setDir(*((unsigned int *)v38 + 8), (int *)buf))
    {
      memset(__buf, 0, 144);
      if (!stat("activityJournal", (stat *)__buf))
      {
        __si_set_error_str(1, "%s:%u: %s", v115, v116, v117, v118, v119, v120, (char)"SpotlightIndex.c");
        int v51 = v108;
        __si_set_rebuild_reason(v213, v214, "%s:%u: %s", "SpotlightIndex.c", 11444, "rebuild activity journal name");
        fd_resetDir(*(int *)buf);
        goto LABEL_204;
      }
      fd_resetDir(*(int *)buf);
    }
  }
  int v614 = v108;
  uint64_t v645 = 0;
  int v592 = v67;
  int v121 = check_crash_state(*((_DWORD *)v38 + 8), v67, v617, &v645, 0);
  int v122 = *__error();
  uint64_t v123 = _SILogForLogForCategory(0);
  os_log_type_t v124 = 2 * (gSILogLevels[0] < 4);
  if (os_log_type_enabled(v123, v124))
  {
    uint64_t v125 = v645;
    int v126 = fcntl(*((_DWORD *)v38 + 8), 50, v658);
    uint64_t v127 = 0;
    if (LOBYTE(v658[0])) {
      BOOL v128 = v126 < 0;
    }
    else {
      BOOL v128 = 1;
    }
    if (!v128) {
      uint64_t v127 = v658;
    }
    uint64_t v13 = v619;
    *(_DWORD *)__long long buf = 134218242;
    *(void *)&__uint8_t buf[4] = v125;
    *(_WORD *)&__unsigned char buf[12] = 2080;
    *(void *)&__buf[14] = v127;
    _os_log_impl(&dword_1BD672000, v123, v124, "last_crash_delta: %ld for %s", __buf, 0x16u);
  }
  int v129 = v121;
  *__error() = v122;
  if ((unint64_t)(v645 - 1) <= 0x545E) {
    icu_rules_clear_cache();
  }
  char v130 = v617;
  if (v129)
  {
    int v131 = *__error();
    uint64_t v132 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v132, OS_LOG_TYPE_ERROR))
    {
      int v248 = fcntl(*((_DWORD *)v38 + 8), 50, v658);
      uint64_t v249 = 0;
      *(void *)&__uint8_t buf[4] = "_SIOpenIndex";
      *(_DWORD *)&__buf[14] = 11460;
      *(_DWORD *)__long long buf = 136315906;
      if (LOBYTE(v658[0])) {
        BOOL v250 = v248 < 0;
      }
      else {
        BOOL v250 = 1;
      }
      *(_WORD *)&__unsigned char buf[12] = 1024;
      if (!v250) {
        uint64_t v249 = v658;
      }
      uint64_t v13 = v619;
      *(_WORD *)&__buf[18] = 1024;
      *(_DWORD *)&__buf[20] = v129;
      *(_WORD *)&__unsigned char buf[24] = 2080;
      *(void *)&__buf[26] = v249;
      _os_log_error_impl(&dword_1BD672000, v132, OS_LOG_TYPE_ERROR, "%s:%d: check_crash_state: %d for %s", __buf, 0x22u);
    }
    *__error() = v131;
    if (CFPreferencesGetAppBooleanValue(@"SpotlightDisableIndexRebuild", (CFStringRef)*MEMORY[0x1E4F1D3B8], 0))
    {
      int v139 = *__error();
      uint64_t v140 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v140, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__long long buf = 136315394;
        *(void *)&__uint8_t buf[4] = "_SIOpenIndex";
        *(_WORD *)&__unsigned char buf[12] = 1024;
        *(_DWORD *)&__buf[14] = 11472;
        _os_log_error_impl(&dword_1BD672000, v140, OS_LOG_TYPE_ERROR, "%s:%d: Index rebuild disabled by SpotlightDisableIndexRebuild", __buf, 0x12u);
      }
      *__error() = v139;
      char v130 = v617;
      goto LABEL_139;
    }
    __si_set_error_str(1, "%s:%u: %s", v133, v134, v135, v136, v137, v138, (char)"SpotlightIndex.c");
    int v51 = v614;
LABEL_204:
    int v53 = 22;
    uint64_t v54 = v622;
    goto LABEL_50;
  }
LABEL_139:
  int v598 = check_crash_state(v616, v592, v130, 0, 1);
  int v141 = check_crash_state(v616, v592, v130, 0, 3);
  int v597 = v141;
  unsigned int v618 = v601;
  if (v141)
  {
    int v654 = 2;
    int v141 = 2;
  }
  int v603 = v141;
  int64_t v142 = malloc_type_calloc(1uLL, 0x18uLL, 0x1080040A085CBA5uLL);
  *((void *)v38 + 173) = v142;
  v142[3] = 2;
  unint64_t v143 = malloc_type_calloc(2uLL, 8uLL, 0x2004093837F09uLL);
  uint64_t v144 = *((void *)v38 + 173);
  *(void *)uint64_t v144 = v143;
  *(_DWORD *)(v144 + 16) = -1;
  int64_t v145 = malloc_type_calloc(1uLL, 0x18uLL, 0x1080040A085CBA5uLL);
  *((void *)v38 + 172) = v145;
  v145[3] = 2;
  uint64_t v146 = malloc_type_calloc(2uLL, 8uLL, 0x2004093837F09uLL);
  uint64_t v147 = *((void *)v38 + 172);
  *(void *)uint64_t v147 = v146;
  *(_DWORD *)(v147 + 16) = -1;
  char v644 = 0;
  int v148 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unsigned int v643 = 0;
  unint64_t v642 = 0;
  unsigned int v641 = 0;
  unint64_t v149 = setThreadIdAndInfo(*((_DWORD *)v38 + 8), sFdExceptionCallbacks, 0, 1, v148);
  unsigned int v643 = v149;
  unint64_t v642 = __PAIR64__(HIDWORD(v149), v150);
  unsigned int v641 = v151;
  uint64_t v152 = *(void *)&threadData[18 * v149 + 2];
  uint64_t v153 = v152 + 320 * HIDWORD(v149);
  *(unsigned char *)(v153 + 216) = 0;
  int v154 = *(_DWORD *)(v153 + 312);
  unsigned int v155 = *(void (**)(void))(v153 + 224);
  if (v155) {
    v155(*(void *)(v152 + 320 * HIDWORD(v149) + 288));
  }
  unsigned int v640 = v643;
  unsigned int v639 = HIDWORD(v642);
  unint64_t v638 = __PAIR64__(v642, v641);
  unsigned int v156 = v622;
  uint64_t v18 = v617;
  if (_setjmp((int *)v153))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__long long buf = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", __buf, 2u);
    }
    *(_DWORD *)(v153 + 312) = v154;
    CIOnThreadCleanUpReset(v638);
    dropThreadId(v640, 1, v148);
    CICleanUpReset(v640, HIDWORD(v638));
    unsigned int v163 = 0;
    int v68 = -1;
    BOOL v164 = 0;
    uint64_t v54 = v622;
    goto LABEL_147;
  }
  uint64_t v52 = v601;
  if (SIIsAppleInternal_onceToken != -1) {
    dispatch_once(&SIIsAppleInternal_onceToken, &__block_literal_global_5267);
  }
  if (SIIsAppleInternal_internal)
  {
    long long v181 = fd_create_protected(*((_DWORD *)v38 + 8), "activityJournal.1", 536871433, 3u);
    si_activity_journal_init((uint64_t)(v38 + 2184), v181);
    fd_mark_purgable(*((_DWORD **)v38 + 273));
  }
  int v182 = CIMetaInfoOpenAndLock(*((unsigned int *)v38 + 8));
  uint64_t v54 = v622;
  if (v182)
  {
    int v183 = v182;
    uint64_t v184 = v601;
    int v185 = v182;
    int v186 = *__error();
    long long v187 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v187, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__long long buf = 136315650;
      *(void *)&__uint8_t buf[4] = "_SIOpenIndex";
      *(_WORD *)&__unsigned char buf[12] = 1024;
      *(_DWORD *)&__buf[14] = 11512;
      *(_WORD *)&__buf[18] = 1024;
      *(_DWORD *)&__buf[20] = v185;
      _os_log_error_impl(&dword_1BD672000, v187, OS_LOG_TYPE_ERROR, "%s:%d: CIMetaInfoOpenAndLock error %d", __buf, 0x18u);
    }
    *__error() = v186;
    bzero(__buf, 0x400uLL);
    snprintf(__buf, 0x400uLL, "CIMetaInfoOpenAndLock failed with %d", v183);
    __si_set_error_str(0, "%s:%u: %s", v188, v189, v190, v191, v192, v193, (char)"SpotlightIndex.c");
    uint64_t v194 = *(void *)&threadData[18 * v640 + 2];
    unsigned int v195 = v639;
    uint64_t v196 = v194 + 320 * v639;
    *(_DWORD *)(v196 + 312) = v154;
    uint64_t v197 = *(void (**)(void))(v196 + 232);
    if (v197) {
      v197(*(void *)(v194 + 320 * v195 + 288));
    }
    dropThreadId(v640, 0, v148);
    int v53 = v185;
LABEL_189:
    int v71 = v614;
    uint64_t v52 = v184;
LABEL_300:
    if (v650)
    {
      CFRelease(v650);
      CFTypeRef v650 = 0;
    }
    uint64_t v649 = 0;
    uint64_t v648 = 0;
    _SICloseIndex(v39, 0);
    uint64_t v311 = *(int **)(v39 + 1184);
    if (v311)
    {
      db_release_datastore_no_sync(v311);
      *(void *)(v39 + 1184) = 0;
    }
    uint64_t v312 = *(void *)(v39 + 6616);
    if (v312)
    {
      freeReverseDirStore(v312);
      *(void *)(v39 + 6616) = 0;
    }
    void *v54 = 0;
    int v51 = v71;
    uint64_t v13 = v619;
LABEL_50:
    if (cf) {
      CFRelease(cf);
    }
    if (v653) {
      CFRelease(v653);
    }
    MEMORY[0x1C1882290](v52);
    close(v52);
    free(v646);
    if (*(void *)(v39 + 40))
    {
      guarded_close_np();
      if (!v51)
      {
LABEL_62:
        ContentIndexListFree(*(void ***)(v39 + 1384));
        ContentIndexListFree(*(void ***)(v39 + 1376));
        if (v13)
        {
          uint64_t v62 = *(void (**)(uint64_t))(v13 + 24);
          if (v62) {
            v62(v13);
          }
        }
        long long v63 = *(const void **)(v39 + 1488);
        if (v63) {
          CFRelease(v63);
        }
        free((void *)v39);
        void *v54 = 0;
        *__error() = v53;
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      close(*(_DWORD *)(v39 + 32));
      if (!v51) {
        goto LABEL_62;
      }
    }
    int v61 = *(_DWORD *)(v39 + 32);
    if ((v61 & 0x80000000) == 0) {
      unregisterForCloning(v61);
    }
    goto LABEL_62;
  }
  uint64_t v600 = (uint64_t)(v38 + 1192);
  int v221 = *((_DWORD *)v38 + 319);
  if (v38[2064])
  {
    if (v221 <= 112) {
      goto LABEL_214;
    }
    goto LABEL_213;
  }
  if (v221 >= 100) {
LABEL_213:
  }
    v38[2065] = 1;
LABEL_214:
  v637[0] = MEMORY[0x1E4F143A8];
  v637[1] = 0x40000000;
  v637[2] = ___SIOpenIndex_block_invoke_803;
  v637[3] = &__block_descriptor_tmp_804;
  v637[4] = v38;
  check_touch_file(v616, "tmp.Glow", (uint64_t)v637);
  v636[0] = MEMORY[0x1E4F143A8];
  v636[1] = 0x40000000;
  v636[2] = ___SIOpenIndex_block_invoke_2;
  v636[3] = &__block_descriptor_tmp_805;
  v636[4] = v38;
  check_touch_file(v616, "Glow.created", (uint64_t)v636);
  if ((v617 & 0x40) != 0)
  {
    *((_DWORD *)v38 + 1644) |= 0x40u;
  }
  else
  {
    v635[0] = MEMORY[0x1E4F143A8];
    v635[1] = 0x40000000;
    v635[2] = ___SIOpenIndex_block_invoke_3;
    v635[3] = &__block_descriptor_tmp_806;
    v635[4] = v38;
    check_touch_file(v616, "tmp.Cab", (uint64_t)v635);
  }
  int v609 = v154;
  if ((v617 & 0x400) != 0)
  {
    *((_DWORD *)v38 + 1644) |= 0x100u;
  }
  else
  {
    v634[0] = MEMORY[0x1E4F143A8];
    v634[1] = 0x40000000;
    v634[2] = ___SIOpenIndex_block_invoke_4;
    v634[3] = &__block_descriptor_tmp_807;
    v634[4] = v38;
    check_touch_file(v616, "tmp.Star", (uint64_t)v634);
  }
  uint64_t v633 = 0;
  if (v613 || (index_state = si_read_index_state((uint64_t)v38), unsigned int v229 = v38[2473], !v38[2473]))
  {
    if (v38[2064]) {
      int v234 = 75776;
    }
    else {
      int v234 = 141312;
    }
    unsigned int v235 = v234 & 0xFFFFFFF1 | (2 * (v605 & 7));
    if (CIMetaInfoRead(v600, v38[2064]))
    {
      if (!v613 && (db_check_datastore(*((_DWORD *)v38 + 8), v235) & 0x80000000) == 0) {
        *a10 = 1;
      }
      int v236 = *__error();
      v237 = _SILogForLogForCategory(10);
      int v71 = v614;
      if (os_log_type_enabled(v237, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__long long buf = 136315650;
        *(void *)&__uint8_t buf[4] = "_SIOpenIndex";
        *(_WORD *)&__unsigned char buf[12] = 1024;
        *(_DWORD *)&__buf[14] = 11630;
        *(_WORD *)&__buf[18] = 1024;
        *(_DWORD *)&__buf[20] = -1;
        _os_log_error_impl(&dword_1BD672000, v237, OS_LOG_TYPE_ERROR, "%s:%d: CIMetaInfoRead error %d", __buf, 0x18u);
      }
      *__error() = v236;
      bzero(__buf, 0x400uLL);
      snprintf(__buf, 0x400uLL, "CIMetaInfoRead failed with %d", -1);
      __si_set_error_str(1, "%s:%u: %s", v238, v239, v240, v241, v242, v243, (char)"SpotlightIndex.c");
      uint64_t v244 = *(void *)&threadData[18 * v640 + 2];
      unsigned int v245 = v639;
      uint64_t v246 = v244 + 320 * v639;
      *(_DWORD *)(v246 + 312) = v609;
      uint64_t v247 = *(void (**)(void))(v246 + 232);
      if (v247) {
        v247(*(void *)(v244 + 320 * v245 + 288));
      }
      dropThreadId(v640, 0, v148);
      int v53 = -1;
      goto LABEL_300;
    }
    int v610 = v148;
    int v251 = db_check_datastore(*((_DWORD *)v38 + 8), v235);
    int v252 = v251;
    int v253 = *__error();
    int v254 = *__error();
    uint64_t v255 = _SILogForLogForCategory(0);
    os_log_type_t v256 = 2 * (gSILogLevels[0] < 4);
    if (os_log_type_enabled(v255, v256))
    {
      *(_DWORD *)__long long buf = 67109120;
      *(_DWORD *)&__uint8_t buf[4] = v251;
      _os_log_impl(&dword_1BD672000, v255, v256, "db_check_datastore: %d", __buf, 8u);
    }
    *__error() = v254;
    if (v251 == -1 && v253 == 2)
    {
      int v263 = *__error();
      unint64_t v264 = _SILogForLogForCategory(0);
      os_log_type_t v265 = 2 * (gSILogLevels[0] < 4);
      uint64_t v54 = v622;
      if (os_log_type_enabled(v264, v265))
      {
        *(_WORD *)__long long buf = 0;
        _os_log_impl(&dword_1BD672000, v264, v265, "file didn't exist, try shadow", __buf, 2u);
      }
      *__error() = v263;
      int v266 = v608;
      int v267 = v605;
      goto LABEL_258;
    }
    uint64_t v54 = v622;
    if (v251)
    {
      int v266 = v608;
      int v267 = v605;
      if (v251 == 2)
      {
LABEL_258:
        int v268 = 4;
        int v252 = 2;
        int v269 = 0;
        int v270 = v235;
        goto LABEL_259;
      }
      if (v251 != 1)
      {
        uint64_t v184 = v601;
        int v440 = *__error();
        bzero(__buf, 0x400uLL);
        snprintf(__buf, 0x400uLL, "invalid datastore %d, %d", v251, v440);
        __si_set_error_str(1, "%s:%u: %s", v441, v442, v443, v444, v445, v446, (char)"SpotlightIndex.c");
        uint64_t v447 = *(void *)&threadData[18 * v640 + 2];
        unsigned int v448 = v639;
        uint64_t v449 = v447 + 320 * v639;
        *(_DWORD *)(v449 + 312) = v609;
        v450 = *(void (**)(void))(v449 + 232);
        if (v450) {
          v450(*(void *)(v447 + 320 * v448 + 288));
        }
        int v53 = 0;
        dropThreadId(v640, 0, v610);
        goto LABEL_189;
      }
      int v268 = 7;
      int v252 = 1;
      int v269 = 1;
      int v270 = v235 | 1;
    }
    else
    {
      int v268 = 7;
      int v269 = 0;
      int v270 = v235;
      int v266 = v608;
      int v267 = v605;
    }
LABEL_259:
    int v596 = v270;
    int v271 = v252;
    int v599 = v269;
    int v272 = v268 | 0x2000;
    if (!v598) {
      int v272 = v268;
    }
    if (v597) {
      int v273 = v272 | 0x4000;
    }
    else {
      int v273 = v272;
    }
    int v274 = v273;
    if (v266)
    {
LABEL_265:
      if (v273 != 7) {
        goto LABEL_392;
      }
LABEL_266:
      int v275 = db_restore_dirty_chunk_info(*((_DWORD *)v38 + 8), (uint64_t)&v646, v257, v258, v259, v260, v261, v262);
      if (v275)
      {
        int v276 = v275;
        bzero(__buf, 0x400uLL);
        snprintf(__buf, 0x400uLL, "restore db dirty pages failed %d", v276);
        __si_set_error_str(1, "%s:%u: %s", v277, v278, v279, v280, v281, v282, (char)"SpotlightIndex.c");
        int v274 = 4;
      }
      else
      {
        int v274 = 7;
      }
      if (!v608)
      {
        int v379 = reverseStoreRestoreDirtyBitmap(*((_DWORD *)v38 + 8), (uint64_t)&v648);
        int v267 = v605;
        if (v379)
        {
          int v380 = v379;
          bzero(__buf, 0x400uLL);
          snprintf(__buf, 0x400uLL, "restore rs dirty pages failed %d", v380);
          __si_set_error_str(1, "%s:%u: %s", v381, v382, v383, v384, v385, v386, (char)"SpotlightIndex.c");
          int v267 = v605;
          int v274 = 4;
        }
LABEL_392:
        unsigned int v387 = *((_DWORD *)v38 + 1644);
        if ((v387 & 0x10) != 0) {
          int v388 = 48;
        }
        else {
          int v388 = 16;
        }
        int v389 = v274 | v388 | (2 * v267);
        if (!v604) {
          v389 |= 0x40u;
        }
        if (v38[2064]) {
          int v390 = v389 | 0x100;
        }
        else {
          int v390 = v389;
        }
        CFBooleanRef v391 = (const __CFBoolean *)SICopyProperty((uint64_t)v38, @"kSITokenizerUseCRF");
        if (v391)
        {
          CFBooleanRef v392 = v391;
          if (CFBooleanGetValue(v391)) {
            *((_DWORD *)v38 + 1644) = *((_DWORD *)v38 + 1644) & 0xFFE7FFFF | 0x80000;
          }
          CFRelease(v392);
        }
        int VersionForDirectory = ContentIndexGetVersionForDirectory(*((_DWORD *)v38 + 8));
        int v394 = VersionForDirectory;
        if (v38[2064])
        {
          unsigned int v156 = v54;
          if ((VersionForDirectory - 115) <= 0xFFFFFFFC)
          {
            uint64_t v395 = v601;
            int v396 = 114;
            goto LABEL_407;
          }
        }
        else
        {
          unsigned int v156 = v54;
          if ((VersionForDirectory - 96) >= 5 && VersionForDirectory != 102)
          {
            uint64_t v395 = v601;
            int v396 = 102;
LABEL_407:
            int v397 = VersionForDirectory;
            if (VersionForDirectory >= v396
              || (v38[2064] ? (int v398 = 111) : (int v398 = 95), VersionForDirectory != -1 && VersionForDirectory < v398))
            {
              bzero(__buf, 0x400uLL);
              snprintf(__buf, 0x400uLL, "invalid index version reindexing %d, %d", v394, v396);
              __si_set_error_str(1, "%s:%u: %s", v399, v400, v401, v402, v403, v404, (char)"SpotlightIndex.c");
              int v405 = *__error();
              v406 = _SILogForLogForCategory(0);
              os_log_type_t v407 = gSILogLevels[0] < 3;
              if (os_log_type_enabled(v406, (os_log_type_t)(gSILogLevels[0] < 3)))
              {
                *(_DWORD *)long long buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v397;
                *(_WORD *)&uint8_t buf[8] = 1024;
                *(_DWORD *)&buf[10] = v396;
                _os_log_impl(&dword_1BD672000, v406, v407, "*warn* Index version %d out of date, expected %d, reindexing", buf, 0xEu);
              }
              *__error() = v405;
              if (!v613)
              {
                x_unlinkat(*((_DWORD *)v38 + 8), "store.db", 0);
                x_unlinkat(*((_DWORD *)v38 + 8), ".store.db", 0);
              }
              uint64_t v408 = *(void *)&threadData[18 * v640 + 2];
              unsigned int v409 = v639;
              uint64_t v410 = v408 + 320 * v639;
              *(_DWORD *)(v410 + 312) = v609;
              v411 = *(void (**)(void))(v410 + 232);
              uint64_t v52 = v395;
              int v71 = v614;
              if (v411) {
                v411(*(void *)(v408 + 320 * v409 + 288));
              }
              int v53 = 0;
              dropThreadId(v640, 0, v610);
              goto LABEL_459;
            }
            bzero(__buf, 0x400uLL);
            snprintf(__buf, 0x400uLL, "invalid index version recovering %d, %d", v394, v396);
            __si_set_error_str(1, "%s:%u: %s", v460, v461, v462, v463, v464, v465, (char)"SpotlightIndex.c");
            int v466 = *__error();
            v467 = _SILogForLogForCategory(0);
            os_log_type_t v468 = gSILogLevels[0] < 3;
            if (os_log_type_enabled(v467, (os_log_type_t)(gSILogLevels[0] < 3)))
            {
              *(_DWORD *)long long buf = 67109376;
              *(_DWORD *)&uint8_t buf[4] = v397;
              *(_WORD *)&uint8_t buf[8] = 1024;
              *(_DWORD *)&buf[10] = v396;
              _os_log_impl(&dword_1BD672000, v467, v468, "*warn* Index version %d out of date, expected %d, recovering", buf, 0xEu);
            }
            *__error() = v466;
            *a10 = 1;
            int v458 = *((_DWORD *)v38 + 362);
            int v459 = -1;
            int v431 = v610;
LABEL_454:
            *((_DWORD *)v38 + 362) = v458;
            int v469 = *__error();
            v470 = _SILogForLogForCategory(0);
            os_log_type_t v471 = 2 * (gSILogLevels[0] < 4);
            if (os_log_type_enabled(v470, v471))
            {
              *(_WORD *)__long long buf = 0;
              _os_log_impl(&dword_1BD672000, v470, v471, "Could not open existing content index", __buf, 2u);
            }
            *__error() = v469;
            uint64_t v472 = *(void *)&threadData[18 * v640 + 2];
            unsigned int v473 = v639;
            uint64_t v474 = v472 + 320 * v639;
            *(_DWORD *)(v474 + 312) = v609;
            v475 = *(void (**)(void))(v474 + 232);
            if (v475) {
              v475(*(void *)(v472 + 320 * v473 + 288));
            }
            int v53 = 0;
            dropThreadId(v640, 0, v431);
            bzero(__buf, 0x400uLL);
            snprintf(__buf, 0x400uLL, "content index open failed %d", v459);
            __si_set_error_str(0, "%s:%u: %s", v476, v477, v478, v479, v480, v481, (char)"SpotlightIndex.c");
            int v71 = v614;
            uint64_t v52 = v395;
            goto LABEL_459;
          }
        }
        uint64_t v412 = v390 | ((v387 >> 1) & 0x8000 | (v387 >> 7) & 0x800) ^ 0x8000;
        *a10 = 1;
        int v582 = *((_DWORD *)v38 + 362);
        v632[0] = MEMORY[0x1E4F143A8];
        v632[1] = 0x40000000;
        v632[2] = ___SIOpenIndex_block_invoke_821;
        v632[3] = &__block_descriptor_tmp_822;
        v632[4] = v38;
        _si_next_index_id((os_unfair_lock_s *)v38, (*(_DWORD *)(*((void *)v38 + 172) + 8) + *(_DWORD *)(*((void *)v38 + 173) + 8)), 0, 1);
        uint64_t v413 = *((void *)v38 + 173);
        uint64_t v414 = *((void *)v38 + 172);
        uint64_t v415 = *((void *)v38 + 823);
        v416 = (int *)*((void *)v38 + 148);
        if (v416) {
          uint64_t vector_store = db_get_vector_store(v416);
        }
        else {
          uint64_t vector_store = 0;
        }
        int v418 = ContentIndexOpenBulk(v600, v606, v413, v414, v412, v415, (uint64_t)(v38 + 2400), (uint64_t)&v633, vector_store, (uint64_t)v632, v651);
        int v419 = v418;
        int v420 = *__error();
        v421 = _SILogForLogForCategory(0);
        os_log_type_t v422 = 2 * (gSILogLevels[0] < 4);
        if (os_log_type_enabled(v421, v422))
        {
          uint64_t v423 = *((void *)v38 + 300);
          *(_DWORD *)__long long buf = 67109632;
          *(_DWORD *)&__uint8_t buf[4] = v418;
          *(_WORD *)&__uint8_t buf[8] = 2048;
          *(void *)&__buf[10] = v38;
          *(_WORD *)&__buf[18] = 2048;
          *(void *)&__buf[20] = v423;
          _os_log_impl(&dword_1BD672000, v421, v422, "ContentIndexOpenBulk: %d opened %p with recovery time %llu", __buf, 0x1Cu);
        }
        *__error() = v420;
        uint64_t v54 = v156;
        if (v418 == 3)
        {
          int v419 = 0;
          unsigned int v430 = v617;
          int v431 = v610;
          int v432 = v605;
        }
        else
        {
          unsigned int v430 = v617;
          int v431 = v610;
          int v432 = v605;
          if (v418 < 0)
          {
            uint64_t v395 = v601;
            int v458 = v582;
            int v459 = v418;
            goto LABEL_454;
          }
        }
        int v433 = v419;
        if (!v613)
        {
          si_handle_tmp_files(*((unsigned int *)v38 + 8), v418 == 3, (v430 >> 12) & 1, (__CFArray **)&v653, (__CFArray **)&cf);
          int v432 = v605;
        }
        int v434 = v609;
        int v435 = v608;
        if (v433 == 2)
        {
          if (__si_invalid_term_update_set_key)
          {
            __si_set_error_str(1, "%s:%u: %s", v424, v425, v426, v427, v428, v429, (char)"SpotlightIndex.c");
            _si_set_invalid_term_update_set();
            int v435 = v608;
          }
          int v436 = v596 | 0x20;
          if (v435)
          {
            int v437 = v603;
            int v438 = v596 | 0x20;
            goto LABEL_483;
          }
          if (handleDirStoreOverlay((uint64_t)v38))
          {
            int v439 = 2;
            int v654 = 2;
          }
          else
          {
            int v439 = v603;
          }
          int v432 = v605;
        }
        else
        {
          int v437 = v603;
          int v439 = v603;
          int v438 = v596;
          int v436 = v596;
          if (v608) {
            goto LABEL_483;
          }
        }
        int v583 = v439;
        int v584 = v436;
        int v494 = check_crash_state(*((_DWORD *)v38 + 8), v432 != 0, v430, &v645, 2);
        bzero(__buf, 0x400uLL);
        int v495 = *__error();
        v496 = _SILogForLogForCategory(0);
        os_log_type_t v497 = 2 * (gSILogLevels[0] < 4);
        if (os_log_type_enabled(v496, v497))
        {
          uint64_t v498 = v645;
          int v499 = fcntl(*((_DWORD *)v38 + 8), 50, __buf);
          v500 = 0;
          if (__buf[0]) {
            BOOL v501 = v499 < 0;
          }
          else {
            BOOL v501 = 1;
          }
          if (!v501) {
            v500 = __buf;
          }
          *(_DWORD *)long long buf = 134218242;
          *(void *)&uint8_t buf[4] = v498;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v500;
          _os_log_impl(&dword_1BD672000, v496, v497, "rs last_crash_delta: %ld for %s", buf, 0x16u);
        }
        *__error() = v495;
        v502 = openReverseStore(*((_DWORD *)v38 + 8), v494, v433 == 2, v605 != 0, *((_DWORD **)v38 + 823), (uint64_t)&v648, v651);
        *((void *)v38 + 827) = v502;
        if (v650)
        {
          CFRelease(v650);
          CFTypeRef v650 = 0;
          v503 = (char *)*((void *)v38 + 827);
        }
        else
        {
          v503 = v502;
        }
        int v431 = v610;
        int v434 = v609;
        uint64_t v649 = 0;
        uint64_t v648 = 0;
        if (v503)
        {
          int v437 = v583;
        }
        else
        {
          int v654 = v583 | 1;
          int v437 = v583 | 1;
        }
        int v438 = v584;
LABEL_483:
        int v504 = v437;
        char v505 = v599 ^ 1;
        if ((v438 & 0x20) == 0) {
          char v505 = 1;
        }
        if (v505)
        {
          __int16 v510 = v438;
          memset(__buf, 0, 40);
          *(_DWORD *)__long long buf = *((_DWORD *)v38 + 8);
          *(void *)&__uint8_t buf[8] = "store.db";
          int v511 = *((_DWORD *)v38 + 15);
          *(_DWORD *)&__uint8_t buf[16] = v438;
          *(_DWORD *)&__buf[20] = v511;
          if (SIIsAppleInternal_onceToken != -1) {
            dispatch_once(&SIIsAppleInternal_onceToken, &__block_literal_global_5267);
          }
          uint64_t datastore_with_ctx = 0;
          if (SIIsAppleInternal_internal) {
            v513 = v38 + 2184;
          }
          else {
            v513 = 0;
          }
          *(void *)&__unsigned char buf[24] = v513;
          __uint8_t buf[32] = 0;
          if ((v510 & 0x1000) == 0) {
            uint64_t datastore_with_ctx = db2_get_datastore_with_ctx((unsigned int *)__buf);
          }
          *((void *)v38 + 148) = datastore_with_ctx;
          int v509 = *__error();
        }
        else
        {
          int v506 = *__error();
          v507 = _SILogForLogForCategory(0);
          os_log_type_t v508 = gSILogLevels[0] < 3;
          if (os_log_type_enabled(v507, (os_log_type_t)(gSILogLevels[0] < 3)))
          {
            *(_WORD *)__long long buf = 0;
            _os_log_impl(&dword_1BD672000, v507, v508, "*warn* datastore clean, index dirty, recovering...", __buf, 2u);
          }
          *__error() = v506;
          int v509 = 22;
        }
        if (!*((void *)v38 + 148))
        {
          bzero(__buf, 0x400uLL);
          snprintf(__buf, 0x400uLL, "open datastore failed %d", v509);
          __si_set_error_str(1, "%s:%u: %s", v530, v531, v532, v533, v534, v535, (char)"SpotlightIndex.c");
          uint64_t v536 = *(void *)&threadData[18 * v640 + 2];
          unsigned int v537 = v639;
          uint64_t v538 = v536 + 320 * v639;
          *(_DWORD *)(v538 + 312) = v434;
          v539 = *(void (**)(void))(v538 + 232);
          if (v539) {
            v539(*(void *)(v536 + 320 * v537 + 288));
          }
          int v53 = 0;
          dropThreadId(v640, 0, v431);
          goto LABEL_199;
        }
        *(_DWORD *)__long long buf = 0;
        CFNumberRef v514 = (const __CFNumber *)SICopyProperty((uint64_t)v38, @"kSINextIndexId");
        if (v514)
        {
          CFNumberRef v515 = v514;
          CFTypeID v516 = CFGetTypeID(v514);
          if (v516 == CFNumberGetTypeID()) {
            CFNumberGetValue(v515, kCFNumberSInt32Type, __buf);
          }
          CFRelease(v515);
        }
        if (*(_DWORD *)__buf > *((_DWORD *)v38 + 362)) {
          *((_DWORD *)v38 + 362) = *(_DWORD *)__buf;
        }
        db_datastore_set_bg_assertion_flag(*((void *)v38 + 148), *v607);
        if (v433)
        {
          if (!v613 && v433 == 2)
          {
            db_set_dirty_chunks(*((void *)v38 + 148), 0, 0, 0);
            db_store_dirty_chunk_info(*((void *)v38 + 148), *((unsigned int *)v38 + 8), 1, 0);
            uint64_t v517 = *((void *)v38 + 827);
            if (v517) {
              reverseStoreStoreDirtyBitmap(v517);
            }
            int v518 = handleIndexRepair((uint64_t)v38, v619, v633);
            if (v518)
            {
              int v519 = v518;
              bzero(__buf, 0x400uLL);
              snprintf(__buf, 0x400uLL, "recover datastore error %d", v519);
              __si_set_error_str(1, "%s:%u: %s", v520, v521, v522, v523, v524, v525, (char)"SpotlightIndex.c");
              uint64_t v526 = *(void *)&threadData[18 * v640 + 2];
              unsigned int v527 = v639;
              uint64_t v528 = v526 + 320 * v639;
              *(_DWORD *)(v528 + 312) = v434;
              v529 = *(void (**)(void))(v528 + 232);
              if (v529) {
                v529(*(void *)(v526 + 320 * v527 + 288));
              }
              int v53 = 0;
              dropThreadId(v640, 0, v610);
              int v71 = v614;
              uint64_t v54 = v622;
              goto LABEL_299;
            }
            goto LABEL_519;
          }
        }
        else
        {
          db_set_dirty_chunks(*((void *)v38 + 148), (uint64_t)v646, v647, SHIDWORD(v647));
          v646 = 0;
        }
        if (v613)
        {
          unsigned int v163 = v433;
          int v456 = 0;
          BOOL v457 = v598 != 0;
          goto LABEL_559;
        }
LABEL_519:
        unsigned int v163 = v433;
        v38[2473] = 4;
        BOOL is_dirty = db_is_dirty(*((int **)v38 + 148));
        char v546 = 4;
        if (is_dirty)
        {
          char v546 = 1;
          v38[2473] = 1;
        }
        v38[2474] = v546;
        if (v608)
        {
          v38[2475] = 0;
LABEL_532:
          uint64_t v548 = *((void *)v38 + 173);
          uint64_t v549 = *(unsigned int *)(*((void *)v38 + 172) + 8);
          int v550 = *(_DWORD *)(v548 + 8);
          if (*v607) {
            int v550 = *((unsigned __int16 *)v38 + 1238);
          }
          if (*(_DWORD *)(v548 + 8))
          {
            uint64_t v551 = *(unsigned int *)(v548 + 8);
            v552 = v38 + 2480;
            uint64_t v553 = **((void **)v38 + 173);
            for (uint64_t j = 0; v551 != j; ++j)
            {
              int v555 = atomic_load((unsigned int *)(*(void *)(v553 + 8 * j) + 32));
              if (v555 > 0)
              {
                if (v555 == 1)
                {
LABEL_544:
                  LOBYTE(v555) = 4;
                  v552[j] = 4;
                  goto LABEL_545;
                }
                if (v555 != 2) {
LABEL_542:
                }
                  LOBYTE(v555) = 1;
              }
              else
              {
                if (v555 == -1073623027) {
                  goto LABEL_544;
                }
                if (v555 != -804450864) {
                  goto LABEL_542;
                }
                LOBYTE(v555) = 3;
              }
              v552[j] = v555;
              v38[2473] = 1;
LABEL_545:
              uint64_t v556 = **((void **)v38 + 173);
              *(unsigned char *)(*(void *)(v556 + 8 * j) + 15201) = v555;
              uint64_t v553 = v556;
            }
          }
          if (v549)
          {
            v557 = v38 + 2480;
            uint64_t v558 = **((void **)v38 + 172);
            for (uint64_t k = 0; v549 != k; ++k)
            {
              int v560 = atomic_load((unsigned int *)(*(void *)(v558 + 8 * k) + 32));
              if (v560 > 0)
              {
                if (v560 == 1)
                {
LABEL_556:
                  v557[(v550 + k)] = 4;
                  LOBYTE(v560) = 4;
                  goto LABEL_557;
                }
                if (v560 != 2) {
LABEL_554:
                }
                  LOBYTE(v560) = 1;
              }
              else
              {
                if (v560 == -1073623027) {
                  goto LABEL_556;
                }
                if (v560 != -804450864) {
                  goto LABEL_554;
                }
                LOBYTE(v560) = 3;
              }
              v557[(v550 + k)] = v560;
              v38[2473] = 1;
LABEL_557:
              uint64_t v561 = **((void **)v38 + 172);
              *(unsigned char *)(*(void *)(v561 + 8 * k) + 15201) = v560;
              uint64_t v558 = v561;
            }
          }
          si_write_index_state((uint64_t)v38, 1, 0, v541, v542, v543, v544, v545);
          int v456 = 0;
          BOOL v457 = v598 != 0;
          uint64_t v54 = v622;
LABEL_559:
          uint64_t v18 = v617;
          goto LABEL_560;
        }
        uint64_t v547 = *((void *)v38 + 827);
        if (v547)
        {
          LODWORD(v547) = *(_DWORD *)(v547 + 4416);
          switch(v547)
          {
            case 0xC001D00D:
              v38[2475] = 4;
              goto LABEL_532;
            case 0xD00D0DD0:
              LOBYTE(v547) = 3;
              break;
            case 2:
              break;
            default:
              v38[2475] = 1;
              v38[2473] = 1;
              goto LABEL_532;
          }
        }
        v38[2475] = v547;
        int v654 = v504 | 1;
        goto LABEL_532;
      }
LABEL_389:
      int v267 = v605;
      goto LABEL_392;
    }
    int v581 = v271;
    int v323 = reverseStoreNeedsRecover(*((_DWORD *)v38 + 8));
    int v324 = *__error();
    v325 = _SILogForLogForCategory(0);
    os_log_type_t v326 = 2 * (gSILogLevels[0] < 4);
    if (os_log_type_enabled(v325, v326))
    {
      *(_DWORD *)__long long buf = 67109120;
      *(_DWORD *)&__uint8_t buf[4] = v323;
      _os_log_impl(&dword_1BD672000, v325, v326, "reverse store state: %x", __buf, 8u);
    }
    *__error() = v324;
    if (v323 < 0)
    {
      uint64_t v54 = v622;
      int v267 = v605;
      if (v323 == -1073623027) {
        goto LABEL_265;
      }
      if (v323 == -804450864)
      {
        if (v273 == 7) {
          goto LABEL_266;
        }
        if (v273 != 4) {
          goto LABEL_392;
        }
        uint64_t v327 = v601;
        int v328 = *__error();
        v329 = _SILogForLogForCategory(0);
        os_log_type_t v330 = gSILogLevels[0] < 3;
        if (os_log_type_enabled(v329, (os_log_type_t)(gSILogLevels[0] < 3)))
        {
          *(void *)__long long buf = 0x404000300;
          *(_WORD *)&__uint8_t buf[8] = 1024;
          *(_DWORD *)&__buf[10] = -804450864;
          *(_WORD *)&__buf[14] = 1024;
          *(_DWORD *)&__uint8_t buf[16] = v581;
          _os_log_impl(&dword_1BD672000, v329, v330, "*warn* datastore dirty, reverse store needs shadow -- forcing repair (%u, %u, %u)", __buf, 0x14u);
        }
LABEL_463:
        *__error() = v328;
        __si_set_error_str(1, "%s:%u: %s", v484, v485, v486, v487, v488, v489, (char)"SpotlightIndex.c");
        *a10 = 1;
        uint64_t v490 = *(void *)&threadData[18 * v640 + 2];
        unsigned int v491 = v639;
        uint64_t v492 = v490 + 320 * v639;
        *(_DWORD *)(v492 + 312) = v609;
        v493 = *(void (**)(void))(v492 + 232);
        if (v493) {
          v493(*(void *)(v490 + 320 * v491 + 288));
        }
        int v53 = 0;
        dropThreadId(v640, 0, v610);
        int v71 = v614;
        uint64_t v54 = v622;
        uint64_t v52 = v327;
        goto LABEL_300;
      }
    }
    else
    {
      if (!v323)
      {
        uint64_t v327 = v601;
        if (!v599)
        {
          int v274 = 4;
          uint64_t v54 = v622;
          goto LABEL_389;
        }
        int v328 = *__error();
        v482 = _SILogForLogForCategory(0);
        os_log_type_t v483 = gSILogLevels[0] < 3;
        if (os_log_type_enabled(v482, (os_log_type_t)(gSILogLevels[0] < 3)))
        {
          *(_WORD *)__long long buf = 0;
          _os_log_impl(&dword_1BD672000, v482, v483, "*warn* datastore needs shadow, reverse store dirty -- forcing repair", __buf, 2u);
        }
        goto LABEL_463;
      }
      uint64_t v54 = v622;
      int v267 = v605;
      if (v323 == 2) {
        goto LABEL_265;
      }
    }
    bzero(__buf, 0x400uLL);
    snprintf(__buf, 0x400uLL, "invalid reverse store %d", v323);
    __si_set_error_str(1, "%s:%u: %s", v369, v370, v371, v372, v373, v374, (char)"SpotlightIndex.c");
    uint64_t v375 = *(void *)&threadData[18 * v640 + 2];
    unsigned int v376 = v639;
    uint64_t v377 = v375 + 320 * v639;
    *(_DWORD *)(v377 + 312) = v609;
    int v378 = *(void (**)(void))(v377 + 232);
    if (v378) {
      v378(*(void *)(v375 + 320 * v376 + 288));
    }
    int v53 = 0;
    dropThreadId(v640, 0, v610);
    int v71 = v614;
    goto LABEL_300;
  }
  if (*v607 && v229 != 1 && v229 != 4)
  {
    int v331 = index_state;
    int v332 = *__error();
    int v333 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v333, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__long long buf = 136315650;
      *(void *)&__uint8_t buf[4] = "_SIOpenIndex";
      *(_WORD *)&__unsigned char buf[12] = 1024;
      *(_DWORD *)&__buf[14] = 11554;
      *(_WORD *)&__buf[18] = 1024;
      *(_DWORD *)&__buf[20] = v229;
      _os_log_error_impl(&dword_1BD672000, v333, OS_LOG_TYPE_ERROR, "%s:%d: open indexstate not clean for locked indexing: %d", __buf, 0x18u);
    }
    *__error() = v332;
    bzero(__buf, 0x400uLL);
    snprintf(__buf, 0x400uLL, "open index state failed %d, %d", v331, v229);
    __si_set_error_str(1, "%s:%u: %s", v334, v335, v336, v337, v338, v339, (char)"SpotlightIndex.c");
    uint64_t v340 = *(void *)&threadData[18 * v640 + 2];
    unsigned int v341 = v639;
    uint64_t v342 = v340 + 320 * v639;
    *(_DWORD *)(v342 + 312) = v609;
    v343 = *(void (**)(void))(v342 + 232);
    if (v343) {
      v343(*(void *)(v340 + 320 * v341 + 288));
    }
    int v53 = 0;
    dropThreadId(v640, 0, v148);
    int v71 = v614;
    uint64_t v52 = v601;
LABEL_459:
    uint64_t v54 = v156;
    goto LABEL_300;
  }
  memcpy(__buf, v38 + 2472, sizeof(__buf));
  int v230 = *__error();
  unint64_t v231 = _SILogForLogForCategory(11);
  os_log_type_t v232 = 2 * (dword_1E9FC90D0 < 4);
  if (os_log_type_enabled(v231, v232))
  {
    if (v229 > 4) {
      uint64_t v233 = "unknown";
    }
    else {
      uint64_t v233 = off_1E6342B48[(v229 - 1)];
    }
    *(_DWORD *)long long buf = 134218242;
    *(void *)&uint8_t buf[4] = v38;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v233;
    _os_log_impl(&dword_1BD672000, v231, v232, "%p si state: %s", buf, 0x16u);
  }
  int v610 = v148;
  *__error() = v230;
  unsigned int v344 = _SIOpenIndexFilesWithState((uint64_t)v38, v229, v604 == 0, (*((_DWORD *)v38 + 1644) >> 4) & 1, v617, a10, &v633, v606, &v654, v598 != 0);
  int v345 = *__error();
  std::string v346 = _SILogForLogForCategory(11);
  os_log_type_t v347 = 2 * (dword_1E9FC90D0 < 4);
  if (os_log_type_enabled(v346, v347))
  {
    *(_DWORD *)long long buf = 134218240;
    *(void *)&uint8_t buf[4] = v38;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v344;
    _os_log_impl(&dword_1BD672000, v346, v347, "%p _SIOpenIndexFilesWithState: %d", buf, 0x12u);
  }
  *__error() = v345;
  int v348 = *__error();
  uint64_t v54 = v622;
  if (v344 == 2)
  {
    uint64_t v18 = v617;
    int v349 = v610;
    if (handleDirStoreOverlay((uint64_t)v38)) {
      v654 |= 2u;
    }
    if (handleIndexRepair((uint64_t)v38, v619, v633))
    {
      __si_set_error_str(1, "%s:%u: %s", v361, v362, v363, v364, v365, v366, (char)"SpotlightIndex.c");
      uint64_t v358 = *(void *)&threadData[18 * v640 + 2];
      unsigned int v359 = v639;
      uint64_t v360 = v358 + 320 * v639;
      *(_DWORD *)(v360 + 312) = v609;
LABEL_378:
      __int16 v367 = *(void (**)(void))(v360 + 232);
      uint64_t v52 = v601;
      int v71 = v614;
      if (v367) {
        v367(*(void *)(v358 + 320 * v359 + 288));
      }
      dropThreadId(v640, 0, v349);
      int v53 = v348;
      goto LABEL_300;
    }
    BOOL v368 = 0;
  }
  else
  {
    uint64_t v18 = v617;
    int v349 = v610;
    if (v344 == -1)
    {
      int v350 = *__error();
      v351 = _SILogForLogForCategory(10);
      if (os_log_type_enabled(v351, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "_SIOpenIndex";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 11571;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v348;
        _os_log_error_impl(&dword_1BD672000, v351, OS_LOG_TYPE_ERROR, "%s:%d: _SIOpenIndexFilesWithState error %d", buf, 0x18u);
      }
      *__error() = v350;
      __si_set_error_str(0, "%s:%u: %s", v352, v353, v354, v355, v356, v357, (char)"SpotlightIndex.c");
      uint64_t v358 = *(void *)&threadData[18 * v640 + 2];
      unsigned int v359 = v639;
      uint64_t v360 = v358 + 320 * v639;
      *(_DWORD *)(v360 + 312) = v609;
      goto LABEL_378;
    }
    BOOL v368 = v229 == 3;
  }
  si_handle_tmp_files(*((unsigned int *)v38 + 8), v368, (v18 >> 12) & 1, (__CFArray **)&v653, (__CFArray **)&cf);
  if (memcmp(__buf, v38 + 2472, 0x1000uLL)) {
    si_write_index_state((uint64_t)v38, 0, 0, v451, v452, v453, v454, v455);
  }
  unsigned int v163 = v344;
  int v456 = v348;
  BOOL v457 = 0;
LABEL_560:
  if (!*v607)
  {
    v562 = (atomic_uint *)fd_create_protected(*((_DWORD *)v38 + 8), "topK.v2.mdplistc", 0, 0);
    if (v562)
    {
      v563 = v562;
      memset(__buf, 0, 144);
      fd_stat((uint64_t)v562, (stat *)__buf);
      uint64_t v564 = fd_mmap((uint64_t)v563);
      if (v564 != -1)
      {
        v588 = (void *)v564;
        *(void *)long long buf = v564;
        *(void *)&uint8_t buf[8] = *(void *)&__buf[96];
        *(void *)&uint8_t buf[16] = 0;
        v631[0] = 1;
        v631[1] = buf;
        int v565 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
        unint64_t v566 = setThreadIdAndInfo(-1, (long long *)sMappingExceptionCallbacks, (uint64_t)v631, 0, v565);
        unsigned int v629 = HIDWORD(v566);
        unsigned int v630 = v566;
        unsigned int v628 = v567;
        unsigned int v627 = v568;
        uint64_t v569 = *(void *)&threadData[18 * v566 + 2];
        uint64_t v570 = v569 + 320 * HIDWORD(v566);
        *(unsigned char *)(v570 + 216) = 0;
        int v571 = *(_DWORD *)(v570 + 312);
        v572 = *(void (**)(void))(v570 + 224);
        if (v572) {
          v572(*(void *)(v569 + 320 * HIDWORD(v566) + 288));
        }
        unsigned int v626 = v630;
        unsigned int v625 = v629;
        unint64_t v624 = __PAIR64__(v628, v627);
        if (_setjmp((int *)v570))
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)v623 = 0;
            _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v623, 2u);
          }
          *(_DWORD *)(v570 + 312) = v571;
          CIOnThreadCleanUpReset(v624);
          dropThreadId(v626, 1, v565);
          CICleanUpReset(v626, HIDWORD(v624));
        }
        else
        {
          *((void *)v38 + 83) = _MDPlistContainerCreateWithBytes();
          uint64_t v573 = *(void *)&threadData[18 * v626 + 2];
          unsigned int v574 = v625;
          uint64_t v575 = v573 + 320 * v625;
          *(_DWORD *)(v575 + 312) = v571;
          v576 = *(void (**)(void))(v575 + 232);
          if (v576) {
            v576(*(void *)(v573 + 320 * v574 + 288));
          }
          dropThreadId(v626, 0, v565);
        }
        if (!*((void *)v38 + 83)) {
          munmap(v588, *(size_t *)&__buf[96]);
        }
        uint64_t v54 = v622;
        uint64_t v18 = v617;
      }
      fd_release(v563);
    }
  }
  char v644 = 1;
  uint64_t v577 = *(void *)&threadData[18 * v640 + 2];
  unsigned int v578 = v639;
  uint64_t v579 = v577 + 320 * v639;
  *(_DWORD *)(v579 + 312) = v609;
  v580 = *(void (**)(void))(v579 + 232);
  if (v580) {
    v580(*(void *)(v577 + 320 * v578 + 288));
  }
  dropThreadId(v640, 0, v610);
  int v68 = v456;
  BOOL v164 = v457;
LABEL_147:
  uint64_t v72 = v611;
  int v65 = v608;
  if (!v644)
  {
    __si_set_error_str(1, "%s:%u: %s", v157, v158, v159, v160, v161, v162, (char)"SpotlightIndex.c");
    int v53 = 22;
LABEL_199:
    int v71 = v614;
LABEL_299:
    uint64_t v52 = v618;
    goto LABEL_300;
  }
  unsigned int v70 = v163;
  int v71 = v614;
  BOOL v69 = v164;
LABEL_73:
  int v73 = v68;
  unsigned int v74 = v70;
  void *v54 = v38;
  if (v65)
  {
    int v75 = v654;
  }
  else if ((v18 & 8) != 0 || v38[2064] || *((void *)v38 + 827))
  {
    int v75 = v654;
  }
  else
  {
    int v75 = v654;
    if (!v654)
    {
      BOOL v84 = __si_assert_copy_extra_625(-1);
      uint64_t v85 = v84;
      long long v86 = "";
      if (v84) {
        long long v86 = v84;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 12074, "fs_only || newIndex->dirStore || rebuildDirStore", v86);
      free(v85);
      if (__valid_fs(-1)) {
        uint64_t v87 = 2989;
      }
      else {
        uint64_t v87 = 3072;
      }
      *(_DWORD *)uint64_t v87 = -559038737;
      abort();
    }
  }
  unsigned int v94 = SIInitIndex((uint64_t)v38, v72, v612, v18, a9, (uint64_t)v653, (uint64_t)cf, 0, v75);
  if ((v94 & 0x80000000) != 0)
  {
    if (!__si_error_str_key || !pthread_getspecific(__si_error_str_key))
    {
      bzero(__buf, 0x400uLL);
      snprintf(__buf, 0x400uLL, "init index error %d", v94);
      __si_set_error_str(1, "%s:%u: %s", v102, v103, v104, v105, v106, v107, (char)"SpotlightIndex.c");
    }
    int v53 = 22;
    goto LABEL_299;
  }
  if (v75) {
    x_unlinkat(v616, "mds64-crash-state-reverse-store-v2", 2048);
  }
  if ((v75 & 2) != 0) {
    x_unlinkat(v616, "mds64-crash-state-forward-path-index-v2", 2048);
  }
  int v594 = v71;
  if (v69)
  {
    __buf[0] = 0;
    int v95 = db_clear_vector_fields(*((_DWORD **)v38 + 148), __buf, *((_DWORD **)v38 + 823));
    if (__buf[0]) {
      db_unlock_datastore(*((int **)v38 + 148));
    }
    if (!v95) {
      x_unlinkat(v616, "mds64-crash-state-vector-index-v2", 2048);
    }
  }
  int v602 = v73;
  if ((v616 & 0x80000000) == 0)
  {
    int v96 = openat(v616, "rescan_needed", 0);
    if (v96 != -1)
    {
      int v97 = v96;
      __buf[0] = 0;
      read(v96, __buf, 1uLL);
      close(v97);
    }
  }
  if ((~v18 & 0x80100) == 0)
  {
    unsigned int v98 = v74;
    int v99 = *((_DWORD *)v38 + 584);
    *(void *)&v658[0] = 0;
    *((void *)&v658[0] + 1) = v658;
    *(void *)&v658[1] = 0x2000000000;
    BYTE8(v658[1]) = 0;
    *(void *)__long long buf = MEMORY[0x1E4F143A8];
    *(void *)&__uint8_t buf[8] = 0x40000000;
    *(void *)&__uint8_t buf[16] = __exist_precheck_touch_file_block_invoke;
    *(void *)&__unsigned char buf[24] = &unk_1E6341F00;
    *(void *)&__uint8_t buf[32] = v658;
    check_touch_file(v616, "132427543.fixed", (uint64_t)__buf);
    int v100 = *(unsigned __int8 *)(*((void *)&v658[0] + 1) + 24);
    _Block_object_dispose(v658, 8);
    if (v100)
    {
      unsigned int v74 = v98;
      if (gSILogLevels[0] >= 5)
      {
        LODWORD(v18) = *__error();
        unint64_t v101 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__long long buf = 67109120;
          *(_DWORD *)&__uint8_t buf[4] = v615;
          _os_log_impl(&dword_1BD672000, v101, OS_LOG_TYPE_DEFAULT, "(%u) precheck touch file exists", __buf, 8u);
        }
        *__error() = v18;
        LOWORD(v18) = v617;
        unsigned int v74 = v98;
      }
      goto LABEL_284;
    }
    int v595 = v99;
    if (totalDiskSpaceSize_onceToken != -1) {
      dispatch_once(&totalDiskSpaceSize_onceToken, &__block_literal_global_905);
    }
    unsigned int v74 = v98;
    uint64_t v165 = gTotalDiskSpaceSize;
    int v166 = openat(v616, ".", 0);
    if (v166 == -1)
    {
      int v204 = *__error();
      int v205 = _SILogForLogForCategory(0);
      os_log_type_t v206 = gSILogLevels[0] < 3;
      if (os_log_type_enabled(v205, (os_log_type_t)(gSILogLevels[0] < 3)))
      {
        int v207 = *__error();
        *(_DWORD *)__long long buf = 67109376;
        *(_DWORD *)&__uint8_t buf[4] = v616;
        *(_WORD *)&__uint8_t buf[8] = 1024;
        *(_DWORD *)&__buf[10] = v207;
        _os_log_impl(&dword_1BD672000, v205, v206, "*warn* openat(%d): %d", __buf, 0xEu);
      }
      *__error() = v204;
      goto LABEL_283;
    }
    int v167 = v166;
    size_t v168 = fdopendir(v166);
    if (!v168)
    {
      int v208 = *__error();
      v209 = _SILogForLogForCategory(0);
      os_log_type_t v210 = gSILogLevels[0] < 3;
      if (os_log_type_enabled(v209, (os_log_type_t)(gSILogLevels[0] < 3)))
      {
        int v211 = *__error();
        *(_DWORD *)__long long buf = 67109376;
        *(_DWORD *)&__uint8_t buf[4] = v167;
        *(_WORD *)&__uint8_t buf[8] = 1024;
        *(_DWORD *)&__buf[10] = v211;
        _os_log_impl(&dword_1BD672000, v209, v210, "*warn* fdopendir(%d): %d", __buf, 0xEu);
      }
      *__error() = v208;
      int v212 = v167;
      goto LABEL_282;
    }
    unint64_t v591 = v165;
    uint64_t v593 = v165;
    __int16 v169 = v168;
    memset(__buf, 0, 144);
    unint64_t v170 = 0;
    time_t v585 = time(0);
    unint64_t v171 = 0;
    uint64_t v172 = 0;
    time_t v173 = 0;
LABEL_154:
    uint64_t v586 = v172;
    unint64_t v590 = v170;
    time_t v174 = v173;
LABEL_155:
    time_t v589 = v174;
    unint64_t v175 = v171;
LABEL_156:
    unint64_t v587 = v175;
    while (1)
    {
      long long v176 = readdir(v169);
      if (!v176) {
        break;
      }
      long long v177 = v176;
      if (v176->d_type == 8)
      {
        d_name = v176->d_name;
        if (v176->d_name[0] != 46 && !strstr(v176->d_name, ".shadow") && !fstatat(v616, d_name, (stat *)__buf, 32))
        {
          if (!strncmp(d_name, "journalAttr.", 0xCuLL))
          {
            size_t v179 = strlen(d_name);
            if (strncmp(&d_name[v179 - 3], "toc", 3uLL))
            {
              LODWORD(v658[0]) = 0;
              if (sscanf(&v177->d_name[12], "%d", v658) == 1 && SLODWORD(v658[0]) > v595)
              {
                unint64_t v170 = *(void *)&__buf[96] + v590;
                if (v585 > *(uint64_t *)&__buf[48])
                {
                  if (v586 <= v585 - *(void *)&__buf[48]) {
                    uint64_t v180 = v585 - *(void *)&__buf[48];
                  }
                  else {
                    uint64_t v180 = v586;
                  }
                  goto LABEL_178;
                }
              }
              else
              {
                unint64_t v170 = v590;
              }
              uint64_t v180 = v586;
LABEL_178:
              uint64_t v172 = v180;
              unint64_t v171 = v587;
              time_t v173 = v589;
              unsigned int v74 = v98;
              goto LABEL_154;
            }
          }
          if (strstr(d_name, ".indexPostings") && !strncmp(&d_name[v177->d_namlen - 14], ".indexPostings", 0xEuLL))
          {
            unint64_t v171 = *(void *)&__buf[96] + v587;
            unint64_t v175 = *(void *)&__buf[96] + v587;
            if (v585 <= *(uint64_t *)&__buf[48]) {
              goto LABEL_156;
            }
            time_t v174 = v589;
            if (v589 <= v585 - *(void *)&__buf[48]) {
              time_t v174 = v585 - *(void *)&__buf[48];
            }
            goto LABEL_155;
          }
        }
      }
    }
    closedir(v169);
    if (v590 >> 29 && v586 >= 604801)
    {
      int v198 = *__error();
      int v199 = _SILogForLogForCategory(0);
      os_log_type_t v200 = gSILogLevels[0] < 3;
      int v201 = v594;
      if (os_log_type_enabled(v199, (os_log_type_t)(gSILogLevels[0] < 3)))
      {
        LODWORD(v658[0]) = 134218240;
        *(void *)((char *)v658 + 4) = v590;
        WORD6(v658[0]) = 2048;
        *(void *)((char *)v658 + 14) = v586;
        int v202 = "*warn* Huge unprocessed journal files detected. size:%llu age:%lus";
        uint32_t v203 = 22;
LABEL_209:
        _os_log_impl(&dword_1BD672000, v199, v200, v202, (uint8_t *)v658, v203);
        goto LABEL_210;
      }
      goto LABEL_210;
    }
    int v201 = v594;
    if (v587 >> 30 >= 5 && v591 <= 10 * v587)
    {
      int v198 = *__error();
      int v199 = _SILogForLogForCategory(0);
      os_log_type_t v200 = gSILogLevels[0] < 3;
      if (os_log_type_enabled(v199, (os_log_type_t)(gSILogLevels[0] < 3)))
      {
        LODWORD(v658[0]) = 136316162;
        *(void *)((char *)v658 + 4) = ".indexPostings";
        WORD6(v658[0]) = 2048;
        *(void *)((char *)v658 + 14) = v587;
        WORD3(v658[1]) = 2048;
        *((void *)&v658[1] + 1) = v589;
        LOWORD(v658[2]) = 2048;
        *(void *)((char *)&v658[2] + 2) = v590;
        WORD5(v658[2]) = 2048;
        *(void *)((char *)&v658[2] + 12) = v593;
        int v202 = "*warn* Huge *%s files detected. size:%llu age:%lus journals:%llu totalDisk:%llu";
        uint32_t v203 = 52;
        goto LABEL_209;
      }
LABEL_210:
      *__error() = v198;
      dump_filesystem_meta(v616);
      __si_set_error_str(1, "%s:%u: %s", v215, v216, v217, v218, v219, v220, (char)"SpotlightIndex.c");
      int v53 = 22;
      int v51 = v201;
      uint64_t v13 = v619;
      uint64_t v52 = v618;
      goto LABEL_50;
    }
    int v222 = unlinkat(v616, "130162031.fixed", 0);
    int v223 = *__error();
    int v224 = *__error();
    std::string::size_type v225 = _SILogForLogForCategory(0);
    BOOL v226 = os_log_type_enabled(v225, OS_LOG_TYPE_DEFAULT);
    if (v222)
    {
      if (!v226) {
        goto LABEL_271;
      }
      LODWORD(v658[0]) = 67109632;
      DWORD1(v658[0]) = v615;
      WORD4(v658[0]) = 1024;
      *(_DWORD *)((char *)v658 + 10) = v616;
      HIWORD(v658[0]) = 1024;
      LODWORD(v658[1]) = v223;
      std::string::size_type v227 = "(%u) did not delete previous touch file %d err %d";
    }
    else
    {
      if (!v226) {
        goto LABEL_271;
      }
      LODWORD(v658[0]) = 67109632;
      DWORD1(v658[0]) = v615;
      WORD4(v658[0]) = 1024;
      *(_DWORD *)((char *)v658 + 10) = v616;
      HIWORD(v658[0]) = 1024;
      LODWORD(v658[1]) = v223;
      std::string::size_type v227 = "(%u) deleted previous touch file %d err %d";
    }
    _os_log_impl(&dword_1BD672000, v225, OS_LOG_TYPE_DEFAULT, v227, (uint8_t *)v658, 0x14u);
LABEL_271:
    *__error() = v224;
    *__error() = v223;
    int v283 = openat(v616, "132427543.fixed", 513, 384);
    int v284 = *__error();
    int v285 = v284;
    if (v283 == -1)
    {
      int v293 = *__error();
      double v294 = _SILogForLogForCategory(0);
      os_log_type_t v295 = gSILogLevels[0] < 3;
      if (os_log_type_enabled(v294, (os_log_type_t)(gSILogLevels[0] < 3)))
      {
        LODWORD(v658[0]) = 67109632;
        DWORD1(v658[0]) = v615;
        WORD4(v658[0]) = 1024;
        *(_DWORD *)((char *)v658 + 10) = v616;
        HIWORD(v658[0]) = 1024;
        LODWORD(v658[1]) = v285;
        _os_log_impl(&dword_1BD672000, v294, v295, "*warn* (%u) create touch file %d err %d", (uint8_t *)v658, 0x14u);
      }
      *__error() = v293;
      *__error() = v285;
      goto LABEL_283;
    }
    int v286 = *__error();
    int v287 = _SILogForLogForCategory(0);
    uint64_t v288 = v287;
    if (v284 == 2)
    {
      if (os_log_type_enabled(v287, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(v658[0]) = 67109376;
        DWORD1(v658[0]) = v615;
        WORD4(v658[0]) = 1024;
        *(_DWORD *)((char *)v658 + 10) = v616;
        os_log_type_t v289 = OS_LOG_TYPE_DEFAULT;
        v290 = "(%u) create touch file %d";
        uint32_t v291 = 14;
        uint64_t v292 = v288;
LABEL_280:
        _os_log_impl(&dword_1BD672000, v292, v289, v290, (uint8_t *)v658, v291);
      }
    }
    else
    {
      BOOL v296 = gSILogLevels[0] < 3;
      if (os_log_type_enabled(v287, (os_log_type_t)(gSILogLevels[0] < 3)))
      {
        LODWORD(v658[0]) = 67109632;
        DWORD1(v658[0]) = v615;
        WORD4(v658[0]) = 1024;
        *(_DWORD *)((char *)v658 + 10) = v616;
        HIWORD(v658[0]) = 1024;
        LODWORD(v658[1]) = v285;
        v290 = "*warn* (%u) create touch file %d err %d";
        uint32_t v291 = 20;
        uint64_t v292 = v288;
        os_log_type_t v289 = v296;
        goto LABEL_280;
      }
    }
    *__error() = v286;
    *__error() = v285;
    int v212 = v283;
LABEL_282:
    close(v212);
LABEL_283:
    LOWORD(v18) = v617;
  }
LABEL_284:
  int v297 = v18 & 0xC;
  if ((v18 & 0xC) == 0)
  {
    if ((v18 & 0x200) != 0 && !v38[2065])
    {
      __si_set_error_str(1, "%s:%u: %s", v88, v89, v90, v91, v92, v93, (char)"SpotlightIndex.c");
      int v71 = v594;
      int v53 = v602;
    }
    else
    {
      int v71 = v594;
      if (si_validate_db((uint64_t)v38))
      {
        indexmetastd::string::pointer data = si_create_indexmetadata((uint64_t)v38, 1);
        if (indexmetadata)
        {
          free(indexmetadata);
LABEL_292:
          std::__compressed_pair<std::string *> v305 = (uint64_t *)*((void *)v38 + 172);
          *(void *)__long long buf = v38;
          __checkIndexSetDocIdOrder((uint64_t)v38, v305);
          CFStringRef v306 = (uint64_t *)*((void *)v38 + 173);
          *(void *)__long long buf = v38;
          __checkIndexSetDocIdOrder((uint64_t)v38, v306);
          if (v613) {
            goto LABEL_328;
          }
          CFStringRef v307 = (int *)*((void *)v38 + 172);
          int v308 = (int *)*((void *)v38 + 173);
          uint64_t v309 = (uint64_t)v308;
          disableWritingForAllButLastOfRunsOfTransaction(v307);
          disableWritingForAllButLastOfRunsOfTransaction(v308);
          if (v307[2] >= 2)
          {
            if ((v38[6578] & 4) != 0) {
              NotCompactCFIndex Count = 0;
            }
            else {
              NotCompactCFIndex Count = indexSetGetNotCompactCount((uint64_t)v307);
            }
            NotMergedCFIndex Count = indexSetGetNotMergedCount((uint64_t *)v307);
            LiveCFIndex Count = indexSetGetLiveCount(*(void *)v307, v307[2]);
            if (NotCompactCount >= 10)
            {
              uint64_t v315 = (uint64_t)v38;
              int v316 = NotCompactCount;
LABEL_314:
              holdAndIssueMerge(v315, v316, (uint64_t)v307, 1);
              goto LABEL_315;
            }
            if (NotMergedCount > 10)
            {
              uint64_t v315 = (uint64_t)v38;
              int v316 = NotMergedCount;
              goto LABEL_314;
            }
            if (LiveCount >= 6)
            {
              int v316 = LiveCount - 1;
              uint64_t v315 = (uint64_t)v38;
              goto LABEL_314;
            }
            if (NotCompactCount) {
              compactReadOnlyIndexes((uint64_t)v38, 1);
            }
          }
LABEL_315:
          LOBYTE(v18) = v617;
          if (*(_DWORD *)(v309 + 8) >= 2u)
          {
            if ((v38[6578] & 4) != 0) {
              int v317 = 0;
            }
            else {
              int v317 = indexSetGetNotCompactCount(v309);
            }
            int v318 = indexSetGetNotMergedCount((uint64_t *)v309);
            if (indexSetGetWritableCount(v309) || (unsigned int v319 = *(_DWORD *)(v309 + 8), v319 < 2))
            {
              if (v317 >= 10)
              {
                uint64_t v320 = (uint64_t)v38;
                int v321 = v317;
LABEL_327:
                holdAndIssueMerge(v320, v321, v309, 0);
                LOBYTE(v18) = v617;
                goto LABEL_328;
              }
              if (v318 > 10)
              {
                uint64_t v320 = (uint64_t)v38;
                int v321 = v318;
                goto LABEL_327;
              }
              unsigned int v319 = *(_DWORD *)(v309 + 8);
              if (v319 < 0x1A)
              {
                LOBYTE(v18) = v617;
                if (v317) {
                  compactReadOnlyIndexes((uint64_t)v38, 0);
                }
                goto LABEL_328;
              }
            }
            int v321 = v319 >> 1;
            uint64_t v320 = (uint64_t)v38;
            goto LABEL_327;
          }
LABEL_328:
          free(v646);
          MEMORY[0x1C1882290](v618);
          close(v618);
          if ((v18 & 1) == 0) {
            _SIPreHeatIndex((uint64_t)v38, 0, 1);
          }
          if (!(v94 | v297))
          {
            if (v74) {
              int v322 = 39;
            }
            else {
              int v322 = 38;
            }
            SIActivityJournalOpen((uint64_t)(v38 + 2184), v322, *((_DWORD *)v38 + 584), *(_DWORD *)(*((void *)v38 + 173) + 8), *(_DWORD *)(*((void *)v38 + 172) + 8), *((void *)v38 + 265), *((void *)v38 + 266), *((void *)v38 + 300));
          }
          goto LABEL_335;
        }
      }
      else
      {
        LODWORD(indexmetadata) = 0;
      }
      __si_set_error_str((int)indexmetadata, "%s:%u: %s", v298, v299, v300, v301, v302, v303, (char)"SpotlightIndex.c");
      int v53 = 22;
    }
    goto LABEL_299;
  }
  if ((v18 & 8) == 0) {
    goto LABEL_292;
  }
  free(v646);
  MEMORY[0x1C1882290](v618);
  close(v618);
LABEL_335:
  if (v653) {
    CFRelease(v653);
  }
  if (cf) {
    CFRelease(cf);
  }
  si_cacheIndexVersion((uint64_t)v38);
  if (v94) {
    return v94;
  }
  else {
    return v74;
  }
}

uint64_t SICreateNewIndex(void *a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, long long *a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  LODWORD(v13) = a2;
  uint64_t v302 = *MEMORY[0x1E4F143B8];
  if (freeQueueOnce[0] != -1)
  {
    unsigned int v248 = a5;
    uint64_t v249 = a3;
    dispatch_once(freeQueueOnce, &__block_literal_global_294);
    a3 = v249;
    a5 = v248;
  }
  uint64_t v15 = 0xFFFFFFFFLL;
  if ((a5 & 4) != 0) {
    return v15;
  }
  uint64_t v283 = a8;
  uint64_t v284 = a3;
  uint64_t v282 = a4;
  int v285 = v13;
  int v287 = a1;
  unsigned int v16 = a5 & 0x100;
  unsigned int v17 = a5 & 0x200;
  unsigned int v288 = a5;
  unsigned int v286 = open(".", 4);
  bzero(v301, 0x400uLL);
  _SITuningInit();
  makeThreadId();
  uint64_t v18 = (char *)malloc_type_calloc(1uLL, 0x2778uLL, 0x10F0040EF72DC6BuLL);
  SIInitIndexLocks((uint64_t)v18);
  v291[0] = MEMORY[0x1E4F143A8];
  v291[1] = 0x40000000;
  v291[2] = __SICreateNewIndex_block_invoke_2;
  v291[3] = &__block_descriptor_tmp_297;
  v291[4] = v18;
  *(void *)uint64_t v18 = 0xC0DE10DE10DEC0DELL;
  *((_DWORD *)v18 + 15) = HIBYTE(v288);
  *((_DWORD *)v18 + 8) = -1;
  *((_DWORD *)v18 + 12) = -1;
  v18[2064] = BYTE1(v16);
  v18[2065] = v17 >> 9;
  long long v25 = *a6;
  *((void *)v18 + 3) = *((void *)a6 + 2);
  *(_OWORD *)(v18 + 8) = v25;
  *((void *)v18 + 294) = a7;
  *((void *)v18 + 289) = 0;
  *((void *)v18 + 823) = a9;
  *((_DWORD *)v18 + 362) = 1;
  *((_DWORD *)v18 + 1644) = *((_DWORD *)v18 + 1644) & 0xFFFBFFFF | (v16 << 10);
  if (*a9)
  {
    __si_set_error_str(1, "%s:%u: %s", v19, v20, v21, v22, v23, v24, (char)"SpotlightIndex.c");
    int v26 = 0;
    int v27 = 0;
    uint64_t v28 = v286;
    int v29 = v287;
LABEL_6:
    int v30 = *__error();
    int v31 = _SILogForLogForCategory(0);
    os_log_type_t v32 = 2 * (gSILogLevels[0] < 4);
    if (os_log_type_enabled(v31, v32))
    {
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v27;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v26;
      _os_log_impl(&dword_1BD672000, v31, v32, "Failed at %d (%d)", buf, 0xEu);
    }
    *__error() = v30;
    MEMORY[0x1C1882290](v28);
    close(v28);
    ContentIndexListFree(*((void ***)v18 + 173));
    ContentIndexListFree(*((void ***)v18 + 172));
    int v33 = (const void *)*((void *)v18 + 186);
    if (v33) {
      CFRelease(v33);
    }
    if (a7)
    {
      uint64_t v34 = *(void (**)(uint64_t))(a7 + 24);
      if (v34) {
        v34(a7);
      }
    }
    free(v18);
    void *v29 = 0;
    return 0xFFFFFFFFLL;
  }
  int v29 = v287;
  unsigned int v281 = v17;
  if (v16)
  {
    int v40 = 0;
    BOOL v39 = 1;
    uint64_t v13 = v13;
  }
  else
  {
    uint64_t v13 = v13;
    uint64_t v36 = v284;
    if (v284
      && ((int v37 = *(_DWORD *)(v284 + 4), v37 == -1)
       || (v38 = dup(v37), uint64_t v36 = v284, *((_DWORD *)v18 + 12) = v38, v38 == -1)))
    {
      if ((v288 & 8) != 0)
      {
        int v26 = 0;
        int v27 = 0;
        uint64_t v28 = v286;
        goto LABEL_6;
      }
      int v40 = *(unsigned char *)(v36 + 28) & 1;
      BOOL v39 = (v288 & 0x180) != 0;
    }
    else
    {
      BOOL v39 = 0;
      int v40 = 0;
    }
  }
  *(_DWORD *)long long buf = 0;
  if (fd_setDir(v13, (int *)buf))
  {
    int v41 = *__error();
    uint64_t v42 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int valuePtr = 0;
      _os_log_impl(&dword_1BD672000, v42, OS_LOG_TYPE_DEFAULT, "Creating New Index", valuePtr, 2u);
    }
    *__error() = v41;
    int v43 = *(_DWORD *)buf;
    MEMORY[0x1C1882290](*(unsigned int *)buf);
    LODWORD(v13) = v285;
    if ((v43 & 0x80000000) == 0) {
      close(v43);
    }
  }
  uint64_t v44 = v288;
  if ((v288 & 8) == 0)
  {
    unsigned int v280 = v16;
    if (!a7)
    {
      uint64_t v257 = __si_assert_copy_extra_625(-1);
      int v258 = v257;
      int v259 = "";
      if (v257) {
        int v259 = v257;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 13387, "callbacks", v259);
      free(v258);
      if (__valid_fs(-1)) {
        uint64_t v260 = 2989;
      }
      else {
        uint64_t v260 = 3072;
      }
      *(_DWORD *)uint64_t v260 = -559038737;
      abort();
    }
    int v45 = check_crash_state(v13, v40, v288, 0, 0);
    if (v45)
    {
      int v46 = v45;
      int v47 = *__error();
      uint64_t v48 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        int v88 = fcntl(v285, 50, v301);
        if (v301[0]) {
          BOOL v89 = v88 < 0;
        }
        else {
          BOOL v89 = 1;
        }
        if (v89) {
          uint64_t v90 = 0;
        }
        else {
          uint64_t v90 = v301;
        }
        *(_DWORD *)long long buf = 136315906;
        *(void *)&uint8_t buf[4] = "SICreateNewIndex";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 13393;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v46;
        *(_WORD *)&unsigned char buf[24] = 2080;
        *(void *)&buf[26] = v90;
        _os_log_error_impl(&dword_1BD672000, v48, OS_LOG_TYPE_ERROR, "%s:%d: check_crash_state: %d for %s", buf, 0x22u);
      }
      int v26 = 0;
      int v27 = 0;
      *__error() = v47;
      uint64_t v28 = v286;
      int v29 = v287;
      goto LABEL_6;
    }
    int v55 = check_crash_state(v13, v40, v288, 0, 1);
    uint64_t v56 = guarded_dup(v13);
    *((void *)v18 + 4) = v56;
    *((void *)v18 + 5) = v57;
    unsigned int v58 = v288 & 0x80000001;
    if ((v288 & 0x80000001) != 0) {
      int v59 = 17;
    }
    else {
      int v59 = 81;
    }
    if (v18[2064]) {
      v59 |= 0x100u;
    }
    if (v18[2065]) {
      v59 |= 0x400u;
    }
    if (v55) {
      v59 |= 0x2000u;
    }
    BOOL v60 = v284;
    if (v284) {
      BOOL v60 = ((*(_DWORD *)(v284 + 28) >> 2) & 1) == 0;
    }
    *((_DWORD *)v18 + 1644) = *((_DWORD *)v18 + 1644) & 0xFFFEFFFF | (v60 << 16);
    if (!v60) {
      v59 |= 0x8000u;
    }
    if (v39) {
      v59 |= 0x80u;
    }
    int v29 = v287;
    if ((v56 & 0x80000000) != 0)
    {
      int v26 = 0;
      int v27 = 0;
LABEL_76:
      uint64_t v28 = v286;
      goto LABEL_77;
    }
    unsigned int v279 = v59;
    if (dword_1E9FC90C0 >= 5)
    {
      int v264 = *__error();
      os_log_type_t v265 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v265, OS_LOG_TYPE_DEFAULT))
      {
        int v266 = fcntl(v285, 50, v301);
        if (v301[0]) {
          BOOL v267 = v266 < 0;
        }
        else {
          BOOL v267 = 1;
        }
        if (v267) {
          int v268 = 0;
        }
        else {
          int v268 = v301;
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v268;
        _os_log_impl(&dword_1BD672000, v265, OS_LOG_TYPE_DEFAULT, "Opened %s successfully", buf, 0xCu);
      }
      *__error() = v264;
      int v29 = v287;
      if (dword_1E9FC90C0 >= 5)
      {
        int v269 = *__error();
        int v270 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v270, OS_LOG_TYPE_DEFAULT))
        {
          int v271 = fcntl(v285, 50, v301);
          if (v301[0]) {
            BOOL v272 = v271 < 0;
          }
          else {
            BOOL v272 = 1;
          }
          if (v272) {
            int v273 = 0;
          }
          else {
            int v273 = v301;
          }
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = v273;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "store.db";
          _os_log_impl(&dword_1BD672000, v270, OS_LOG_TYPE_DEFAULT, "Try %s/%s", buf, 0x16u);
        }
        *__error() = v269;
        int v29 = v287;
      }
    }
    registerForCloning(*((_DWORD *)v18 + 8), v16 >> 8);
    if (SIIsAppleInternal_onceToken != -1) {
      dispatch_once(&SIIsAppleInternal_onceToken, &__block_literal_global_5267);
    }
    if (SIIsAppleInternal_internal)
    {
      int v61 = fd_create_protected(*((_DWORD *)v18 + 8), "activityJournal.1", 536872457, 3u);
      si_activity_journal_init((uint64_t)(v18 + 2184), v61);
      fd_mark_purgable(*((_DWORD **)v18 + 273));
    }
    unlinkat(*((_DWORD *)v18 + 8), "mds64-crash-state", 0);
    unlinkat(*((_DWORD *)v18 + 8), "mds64-crash-state-v2", 0);
    if (!v16)
    {
      uint64_t v62 = (atomic_uint *)fd_create_protected(*((_DWORD *)v18 + 8), "tmp.Lion", 512, 0);
      fd_release(v62);
      long long v63 = (atomic_uint *)fd_create_protected(*((_DWORD *)v18 + 8), "Lion.created", 512, 0);
      fd_release(v63);
      long long v64 = (atomic_uint *)fd_create_protected(*((_DWORD *)v18 + 8), "Glow.created", 512, 0);
      fd_release(v64);
      int v65 = (atomic_uint *)fd_create_protected(*((_DWORD *)v18 + 8), "tmp.Glow", 512, 0);
      fd_release(v65);
      BOOL v66 = (atomic_uint *)fd_create_protected(*((_DWORD *)v18 + 8), "tmp.Cab", 512, 0);
      fd_release(v66);
      int v67 = (atomic_uint *)fd_create_protected(*((_DWORD *)v18 + 8), "Cab.created", 512, 0);
      fd_release(v67);
      *((_DWORD *)v18 + 1644) |= 0x40u;
      int v68 = (atomic_uint *)fd_create_protected(*((_DWORD *)v18 + 8), "tmp.Star", 512, 0);
      fd_release(v68);
    }
    BOOL v69 = malloc_type_calloc(1uLL, 0x18uLL, 0x1080040A085CBA5uLL);
    *((void *)v18 + 173) = v69;
    v69[3] = 2;
    unsigned int v70 = malloc_type_calloc(2uLL, 8uLL, 0x2004093837F09uLL);
    uint64_t v71 = *((void *)v18 + 173);
    *(void *)uint64_t v71 = v70;
    *(_DWORD *)(v71 + 16) = -1;
    uint64_t v72 = malloc_type_calloc(1uLL, 0x18uLL, 0x1080040A085CBA5uLL);
    *((void *)v18 + 172) = v72;
    v72[3] = 2;
    int v73 = malloc_type_calloc(2uLL, 8uLL, 0x2004093837F09uLL);
    uint64_t v74 = *((void *)v18 + 172);
    *(void *)uint64_t v74 = v73;
    *(_DWORD *)(v74 + 16) = -1;
    MEMORY[0x1C1882290](*((unsigned int *)v18 + 8));
    if (v281) {
      int v75 = 3;
    }
    else {
      int v75 = 1;
    }
    if (v16) {
      unsigned int v76 = v75;
    }
    else {
      unsigned int v76 = v281 >> 8;
    }
    if (CIMetaInfoCreateWithPrefix(*((_DWORD *)v18 + 8), (uint64_t)(v18 + 1192), v76, 1, *((_DWORD *)v18 + 15), 0))
    {
      int v26 = 0;
      int v27 = 13526;
      uint64_t v28 = v286;
      goto LABEL_77;
    }
    uint64_t v290 = 0;
    uint64_t v79 = *((void *)v18 + 173);
    uint64_t v80 = *((void *)v18 + 172);
    uint64_t v81 = *((void *)v18 + 823);
    uint64_t vector_store = (int *)*((void *)v18 + 148);
    if (vector_store)
    {
      uint64_t v83 = *((void *)v18 + 172);
      uint64_t vector_store = (int *)db_get_vector_store(vector_store);
      uint64_t v80 = v83;
      unsigned int v58 = v288 & 0x80000001;
    }
    v289[0] = MEMORY[0x1E4F143A8];
    v289[1] = 0x40000000;
    v289[2] = __SICreateNewIndex_block_invoke_307;
    v289[3] = &__block_descriptor_tmp_309;
    v289[4] = v18;
    int v84 = ContentIndexOpenBulk((uint64_t)(v18 + 1192), 0, v79, v80, v279, v81, (uint64_t)(v18 + 2400), (uint64_t)&v290, (uint64_t)vector_store, (uint64_t)v289, v291);
    if (v84 == 1)
    {
      time_t v91 = time(0);
      uint64_t v92 = *((void *)v18 + 173);
      unint64_t v85 = 0x1EC02E000uLL;
      if (*(_DWORD *)(v92 + 8))
      {
        ContentIndexUpdateTimeStamp(**(int ***)v92, v91, 0, 1);
        ContentIndexUpdateTimeStamp(***((int ****)v18 + 173), v91, 1, 1);
      }
      LiveIndex = si_getLiveIndex(*((void *)v18 + 172));
      ContentIndexUpdateTimeStamp(LiveIndex, v91, 0, 1);
      unsigned int v94 = si_getLiveIndex(*((void *)v18 + 172));
      ContentIndexUpdateTimeStamp(v94, v91, 1, 1);
    }
    else
    {
      unint64_t v85 = 0x1EC02E000;
      if (v84 == -1)
      {
        int v86 = *__error();
        uint64_t v87 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = "SICreateNewIndex";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 13538;
          _os_log_error_impl(&dword_1BD672000, v87, OS_LOG_TYPE_ERROR, "%s:%d: Could not create new content index", buf, 0x12u);
        }
        int v26 = 0;
        *__error() = v86;
        int v27 = 13537;
        goto LABEL_76;
      }
    }
    if (v39) {
      int v95 = 133376;
    }
    else {
      int v95 = 256;
    }
    if (v18[2064]) {
      int v96 = 67584;
    }
    else {
      int v96 = v95;
    }
    if (dword_1E9FC90C0 >= 5)
    {
      int v274 = *__error();
      int v275 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v275, OS_LOG_TYPE_DEFAULT))
      {
        int v276 = fcntl(v285, 50, v301);
        if (v301[0]) {
          BOOL v277 = v276 < 0;
        }
        else {
          BOOL v277 = 1;
        }
        if (v277) {
          uint64_t v278 = 0;
        }
        else {
          uint64_t v278 = v301;
        }
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = v278;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "store.db";
        _os_log_impl(&dword_1BD672000, v275, OS_LOG_TYPE_DEFAULT, "Creating store at %s/%s.", buf, 0x16u);
      }
      *__error() = v274;
      int v29 = v287;
      unint64_t v85 = 0x1EC02E000;
    }
    memset(buf, 0, sizeof(buf));
    *(_DWORD *)long long buf = *((_DWORD *)v18 + 8);
    *(void *)&uint8_t buf[8] = "store.db";
    *(_DWORD *)&buf[20] = *((_DWORD *)v18 + 15);
    if (*(void *)(v85 + 3600) != -1) {
      dispatch_once(&SIIsAppleInternal_onceToken, &__block_literal_global_5267);
    }
    uint64_t v28 = v286;
    if (SIIsAppleInternal_internal) {
      int v97 = v18 + 2184;
    }
    else {
      int v97 = 0;
    }
    *(void *)&unsigned char buf[24] = v97;
    uint8_t buf[32] = 0;
    *(_DWORD *)&uint8_t buf[16] = v96;
    uint64_t datastore_with_ctx = db2_create_datastore_with_ctx((uint64_t)buf);
    *((void *)v18 + 148) = datastore_with_ctx;
    if (datastore_with_ctx)
    {
      si_set_vector_store((uint64_t)v18);
      if (v58
        || (ReverseStore = createReverseStore(*((_DWORD *)v18 + 8), "", v291),
            (*((void *)v18 + 827) = ReverseStore) != 0))
      {
        int v100 = 0;
        unint64_t v101 = (int **)(v18 + 1184);
        do
        {
          id_for_int field = db_create_id_for_field(*v101, "_kMDXXXX___DUMMY", (unsigned __int16)v100, (unsigned __int16)v100);
          ++v100;
        }
        while (id_for_field < 6);
        db_create_id_for_value(*v101, "public.message");
        db_create_id_for_value(*v101, "com.apple.mail.emlx");
        db_create_id_for_value(*v101, "com.apple.mail.eml");
        db_create_id_for_value(*v101, "com.microsoft.entourage.virtual.message");
        db_create_id_for_value(*v101, "com.apple.ichat.transcript");
        db_create_id_for_value(*v101, "public.contact");
        db_create_id_for_value(*v101, "public.vcard");
        db_create_id_for_value(*v101, "com.apple.addressbook.person");
        db_create_id_for_value(*v101, "com.apple.addressbook.group");
        db_create_id_for_value(*v101, "com.microsoft.entourage.virtual.contact");
        db_create_id_for_value(*v101, "com.microsoft.entourage.virtual.group");
        db_create_id_for_value(*v101, "com.apple.systempreference.prefpane");
        db_create_id_for_value(*v101, "public.font");
        db_create_id_for_value(*v101, "public.bookmark");
        db_create_id_for_value(*v101, "com.apple.safari.bookmark");
        db_create_id_for_value(*v101, "com.apple.safari.history");
        db_create_id_for_value(*v101, "public.to-do-item");
        db_create_id_for_value(*v101, "public.calendar-event");
        db_create_id_for_value(*v101, "com.apple.ical.bookmark");
        db_create_id_for_value(*v101, "com.apple.ical.bookmark.todo");
        db_create_id_for_value(*v101, "com.apple.ical.ics.event");
        db_create_id_for_value(*v101, "com.apple.ical.ics.todo");
        db_create_id_for_value(*v101, "com.microsoft.entourage.virtual.event");
        db_create_id_for_value(*v101, "com.microsoft.entourage.virtual.task");
        db_create_id_for_value(*v101, "public.movie");
        db_create_id_for_value(*v101, "com.apple.quicktime-movie");
        db_create_id_for_value(*v101, "public.mpeg-video");
        db_create_id_for_value(*v101, "public.mpeg-4");
        db_create_id_for_value(*v101, "public.mpeg");
        db_create_id_for_value(*v101, "public.3gpp");
        db_create_id_for_value(*v101, "public.3gpp2");
        db_create_id_for_value(*v101, "com.apple.application-bundle");
        db_create_id_for_value(*v101, "com.apple.application-file");
        db_create_id_for_value(*v101, "com.apple.dashboard-widget");
        db_create_id_for_value(*v101, "public.folder");
        db_create_id_for_value(*v101, "com.apple.mount-point");
        db_create_id_for_value(*v101, "public.audio");
        db_create_id_for_value(*v101, "public.mpeg-4-audio");
        db_create_id_for_value(*v101, "com.apple.protected-mpeg-4-audio");
        db_create_id_for_value(*v101, "com.adobe.pdf");
        db_create_id_for_value(*v101, "com.apple.localized-pdf-bundle");
        db_create_id_for_value(*v101, "public.presentation");
        db_create_id_for_value(*v101, "com.microsoft.powerpoint.ppt");
        db_create_id_for_value(*v101, "com.apple.keynote.key");
        db_create_id_for_value(*v101, "com.apple.iwork.keynote.key");
        db_create_id_for_value(*v101, "public.image");
        db_create_id_for_value(*v101, "com.apple.motion.project");
        db_create_id_for_value(*v101, "com.apple.iwork.pages.pages");
        db_create_id_for_value(*v101, "com.apple.iwork.pages.sffpages");
        db_create_id_for_value(*v101, "com.apple.iwork.pages.template");
        db_create_id_for_value(*v101, "com.apple.iwork.pages.sfftemplate");
        db_create_id_for_value(*v101, "public.rtf");
        db_create_id_for_value(*v101, "com.apple.rtfd");
        db_create_id_for_value(*v101, "com.apple.flat-rtfd");
        db_create_id_for_value(*v101, "com.microsoft.word.doc");
        db_create_id_for_value(*v101, "org.khronos.collada.digital-asset-exchange");
        db_create_id_for_value(*v101, "public.plain-text");
        db_create_id_for_value(*v101, "public.html");
        db_create_id_for_value(*v101, "public.xhtml");
        db_create_id_for_value(*v101, "public.shell-script");
        db_create_id_for_value(*v101, "public.source-code");
        db_create_id_for_value(*v101, "public.unix-executable");
        db_create_id_for_value(*v101, "com.apple.xcode.project");
        db_create_id_for_value(*v101, "com.apple.xcode.model");
        db_create_id_for_value(*v101, "com.apple.xcode.archive");
        db_create_id_for_value(*v101, "com.apple.xcode.docset");
        db_create_id_for_value(*v101, "com.apple.xcode.projectdata");
        db_create_id_for_value(*v101, "com.apple.xcode.dsym");
        db_create_id_for_value(*v101, "com.apple.xcode.configsettings");
        db_create_id_for_value(*v101, "com.apple.xcode.usersettings");
        db_create_id_for_value(*v101, "com.apple.xcode.strings-text");
        db_create_id_for_value(*v101, "com.apple.xcode.plugin");
        db_create_id_for_value(*v101, "com.apple.xcode.mom");
        db_create_id_for_value(*v101, "com.apple.property-list");
        db_create_id_for_value(*v101, "dyn.ah62d4rv4ge81a7dk");
        db_create_id_for_value(*v101, "dyn.ah62d4rv4ge80u5pbsa");
        db_create_id_for_value(*v101, "com.apple.dashcode.xml");
        db_create_id_for_value(*v101, "com.apple.dashcode.css");
        db_create_id_for_value(*v101, "com.apple.dashcode.javascript");
        db_create_id_for_value(*v101, "com.apple.dashcode.json");
        db_create_id_for_value(*v101, "com.apple.dashcode.manifest");
        db_create_id_for_value(*v101, "com.apple.interfacebuilder.document");
        db_create_id_for_value(*v101, "com.apple.interfacebuilder.document.cocoa");
        db_create_id_for_value(*v101, "com.apple.rez-source");
        db_create_id_for_value(*v101, "com.apple.iphone.developerprofile");
        db_create_id_for_value(*v101, "com.apple.iphone.mobileprovision");
        db_create_id_for_value(*v101, "com.apple.coreanimation-bundle");
        db_create_id_for_value(*v101, "com.apple.coreanimation-xml");
        db_create_id_for_value(*v101, "com.sun.java-class");
        db_create_id_for_value(*v101, "com.apple.scripting-definition");
        db_create_id_for_value(*v101, "com.apple.dt.document.workspace");
        db_create_id_for_value(*v101, "com.apple.dt.document.scheme");
        db_create_id_for_value(*v101, "com.apple.dt.ide.plug-in");
        db_create_id_for_value(*v101, "com.apple.dt.dvt.plug-in");
        db_create_id_for_value(*v101, "com.apple.dt.document.snapshot");
        db_create_id_for_value(*v101, "com.apple.dt.bundle.unit-test.objective-c");
        db_create_id_for_value(*v101, "com.apple.instruments.tracetemplate");
        db_create_id_for_value(*v101, "com.apple.quartzdebug.introspectiontrace");
        db_create_id_for_value(*v101, "com.apple.applescript.text-object");
        db_create_id_for_value(*v101, "com.apple.applescript.data-object");
        db_create_id_for_value(*v101, "com.apple.applescript.url-object");
        db_create_id_for_value(*v101, "com.apple.applescript.alias-object");
        db_create_id_for_value(*v101, "com.apple.symbol-export");
        db_create_id_for_value(*v101, "com.apple.mach-o-binary");
        db_create_id_for_value(*v101, "com.apple.mach-o-object");
        db_create_id_for_value(*v101, "com.apple.mach-o-executable");
        db_create_id_for_value(*v101, "com.apple.x11-mach-o-executable");
        db_create_id_for_value(*v101, "public.object-code");
        db_create_id_for_value(*v101, "com.microsoft.windows-executable");
        db_create_id_for_value(*v101, "com.microsoft.windows-dynamic-link-library");
        db_create_id_for_value(*v101, "com.sun.java-archive");
        db_create_id_for_value(*v101, "com.sun.web-application-archive");
        db_create_id_for_value(*v101, "com.apple.xcode.plugindata");
        db_create_id_for_value(*v101, "com.apple.dt.playground");
        db_create_id_for_value(*v101, "com.apple.iwork.numbers.sffnumbers");
        db_create_id_for_value(*v101, "com.apple.iwork.numbers.numbers");
        db_create_id_for_value(*v101, "com.apple.iwork.numbers.template");
        db_create_id_for_value(*v101, "com.microsoft.excel.xls");
        db_create_id_for_value(*v101, "org.openxmlformats.spreadsheetml.sheet");
        db_create_id_for_value(*v101, "public.spreadsheet");
        db_create_id_for_value(*v101, "public.xml");
        db_create_id_for_value(*v101, "com.apple.log");
        db_create_id_for_value(*v101, "com.apple.crashreport");
        db_create_id_for_value(*v101, "com.apple.spinreport");
        db_create_id_for_value(*v101, "com.apple.panicreport");
        db_create_id_for_value(*v101, "com.apple.shutdownstall");
        db_create_id_for_value(*v101, "com.apple.hangreport");
        db_create_id_for_value(*v101, "public.json");
        db_create_id_for_value(*v101, "public.log");
        db_create_id_for_value(*v101, "public.content");
        db_create_id_for_value(*v101, "com.microsoft.excel.sheet.binary.macroenabled");
        db_create_id_for_value(*v101, "org.openxmlformats.spreadsheetml.sheet.macroenabled");
        db_create_id_for_value(*v101, "com.apple.protected-mpeg-4-audio-b");
        db_create_id_for_value(*v101, "com.audible.aa-audiobook");
        db_create_id_for_value(*v101, "com.audible.aax-audiobook");
        db_create_id_for_value(*v101, "com.apple.tips");
        db_create_id_for_value(*v101, "com.apple.helpviewer");
        db_create_id_for_value(*v101, "com.apple.help.topic");
        db_create_id_for_field(*v101, "kMDItemContentTypeTree", 0x330u, 11);
        db_create_id_for_field(*v101, "kMDItemSupportFileType", 0x330u, 11);
        db_create_id_for_field(*v101, "_kMDItemTimeMachinePath", 0, 0);
        db_create_id_for_field(*v101, "kMDItemContentType", 0x310u, 11);
        db_create_id_for_field(*v101, "_kMDItemGroupId", 0x108u, 2);
        if (!v280)
        {
          CFAllocatorRef v103 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0);
          int id_for_value = db_create_id_for_value(*v101, "public.message");
          if (id_for_value != -2) {
            CFDictionarySetValue(Mutable, (const void *)(id_for_value & 0x7FFFFFFF), (const void *)1);
          }
          int v106 = db_create_id_for_value(*v101, "com.apple.mail.emlx");
          if (v106 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v106 & 0x7FFFFFFF), (const void *)2);
          }
          int v107 = db_create_id_for_value(*v101, "com.apple.mail.eml");
          if (v107 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v107 & 0x7FFFFFFF), (const void *)3);
          }
          int v108 = db_create_id_for_value(*v101, "com.microsoft.entourage.virtual.message");
          if (v108 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v108 & 0x7FFFFFFF), (const void *)4);
          }
          int v109 = db_create_id_for_value(*v101, "com.apple.ichat.transcript");
          if (v109 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v109 & 0x7FFFFFFF), (const void *)5);
          }
          int v110 = db_create_id_for_value(*v101, "public.contact");
          if (v110 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v110 & 0x7FFFFFFF), (const void *)6);
          }
          int v111 = db_create_id_for_value(*v101, "public.vcard");
          if (v111 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v111 & 0x7FFFFFFF), (const void *)7);
          }
          int v112 = db_create_id_for_value(*v101, "com.apple.addressbook.person");
          if (v112 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v112 & 0x7FFFFFFF), (const void *)8);
          }
          int v113 = db_create_id_for_value(*v101, "com.apple.addressbook.group");
          if (v113 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v113 & 0x7FFFFFFF), (const void *)9);
          }
          int v114 = db_create_id_for_value(*v101, "com.microsoft.entourage.virtual.contact");
          if (v114 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v114 & 0x7FFFFFFF), (const void *)0xA);
          }
          int v115 = db_create_id_for_value(*v101, "com.microsoft.entourage.virtual.group");
          if (v115 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v115 & 0x7FFFFFFF), (const void *)0xB);
          }
          int v116 = db_create_id_for_value(*v101, "com.apple.systempreference.prefpane");
          if (v116 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v116 & 0x7FFFFFFF), (const void *)0xC);
          }
          int v117 = db_create_id_for_value(*v101, "public.font");
          if (v117 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v117 & 0x7FFFFFFF), (const void *)0xD);
          }
          int v118 = db_create_id_for_value(*v101, "public.bookmark");
          if (v118 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v118 & 0x7FFFFFFF), (const void *)0xE);
          }
          int v119 = db_create_id_for_value(*v101, "com.apple.safari.bookmark");
          if (v119 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v119 & 0x7FFFFFFF), (const void *)0xF);
          }
          int v120 = db_create_id_for_value(*v101, "com.apple.safari.history");
          if (v120 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v120 & 0x7FFFFFFF), (const void *)0x10);
          }
          int v121 = db_create_id_for_value(*v101, "public.to-do-item");
          if (v121 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v121 & 0x7FFFFFFF), (const void *)0x11);
          }
          int v122 = db_create_id_for_value(*v101, "public.calendar-event");
          if (v122 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v122 & 0x7FFFFFFF), (const void *)0x12);
          }
          int v123 = db_create_id_for_value(*v101, "com.apple.ical.bookmark");
          if (v123 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v123 & 0x7FFFFFFF), (const void *)0x13);
          }
          int v124 = db_create_id_for_value(*v101, "com.apple.ical.bookmark.todo");
          if (v124 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v124 & 0x7FFFFFFF), (const void *)0x14);
          }
          int v125 = db_create_id_for_value(*v101, "com.apple.ical.ics.event");
          if (v125 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v125 & 0x7FFFFFFF), (const void *)0x15);
          }
          int v126 = db_create_id_for_value(*v101, "com.apple.ical.ics.todo");
          if (v126 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v126 & 0x7FFFFFFF), (const void *)0x16);
          }
          int v127 = db_create_id_for_value(*v101, "com.microsoft.entourage.virtual.event");
          if (v127 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v127 & 0x7FFFFFFF), (const void *)0x17);
          }
          int v128 = db_create_id_for_value(*v101, "com.microsoft.entourage.virtual.task");
          if (v128 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v128 & 0x7FFFFFFF), (const void *)0x18);
          }
          int v129 = db_create_id_for_value(*v101, "public.movie");
          if (v129 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v129 & 0x7FFFFFFF), (const void *)0x19);
          }
          int v130 = db_create_id_for_value(*v101, "com.apple.quicktime-movie");
          if (v130 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v130 & 0x7FFFFFFF), (const void *)0x1A);
          }
          int v131 = db_create_id_for_value(*v101, "public.mpeg-video");
          if (v131 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v131 & 0x7FFFFFFF), (const void *)0x1B);
          }
          int v132 = db_create_id_for_value(*v101, "public.mpeg-4");
          if (v132 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v132 & 0x7FFFFFFF), (const void *)0x1C);
          }
          int v133 = db_create_id_for_value(*v101, "public.mpeg");
          if (v133 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v133 & 0x7FFFFFFF), (const void *)0x1D);
          }
          int v134 = db_create_id_for_value(*v101, "public.3gpp");
          if (v134 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v134 & 0x7FFFFFFF), (const void *)0x1E);
          }
          int v135 = db_create_id_for_value(*v101, "public.3gpp2");
          if (v135 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v135 & 0x7FFFFFFF), (const void *)0x1F);
          }
          int v136 = db_create_id_for_value(*v101, "com.apple.application-bundle");
          if (v136 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v136 & 0x7FFFFFFF), (const void *)0x20);
          }
          int v137 = db_create_id_for_value(*v101, "com.apple.application-file");
          if (v137 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v137 & 0x7FFFFFFF), (const void *)0x21);
          }
          int v138 = db_create_id_for_value(*v101, "com.apple.dashboard-widget");
          if (v138 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v138 & 0x7FFFFFFF), (const void *)0x22);
          }
          int v139 = db_create_id_for_value(*v101, "public.folder");
          if (v139 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v139 & 0x7FFFFFFF), (const void *)0x23);
          }
          int v140 = db_create_id_for_value(*v101, "com.apple.mount-point");
          if (v140 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v140 & 0x7FFFFFFF), (const void *)0x24);
          }
          int v141 = db_create_id_for_value(*v101, "public.audio");
          if (v141 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v141 & 0x7FFFFFFF), (const void *)0x25);
          }
          int v142 = db_create_id_for_value(*v101, "public.mpeg-4-audio");
          if (v142 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v142 & 0x7FFFFFFF), (const void *)0x26);
          }
          int v143 = db_create_id_for_value(*v101, "com.apple.protected-mpeg-4-audio");
          if (v143 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v143 & 0x7FFFFFFF), (const void *)0x27);
          }
          int v144 = db_create_id_for_value(*v101, "com.adobe.pdf");
          if (v144 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v144 & 0x7FFFFFFF), (const void *)0x28);
          }
          int v145 = db_create_id_for_value(*v101, "com.apple.localized-pdf-bundle");
          if (v145 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v145 & 0x7FFFFFFF), (const void *)0x29);
          }
          int v146 = db_create_id_for_value(*v101, "public.presentation");
          if (v146 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v146 & 0x7FFFFFFF), (const void *)0x2A);
          }
          int v147 = db_create_id_for_value(*v101, "com.microsoft.powerpoint.ppt");
          if (v147 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v147 & 0x7FFFFFFF), (const void *)0x2B);
          }
          int v148 = db_create_id_for_value(*v101, "com.apple.keynote.key");
          if (v148 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v148 & 0x7FFFFFFF), (const void *)0x2C);
          }
          int v149 = db_create_id_for_value(*v101, "com.apple.iwork.keynote.key");
          if (v149 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v149 & 0x7FFFFFFF), (const void *)0x2D);
          }
          int v150 = db_create_id_for_value(*v101, "public.image");
          if (v150 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v150 & 0x7FFFFFFF), (const void *)0x2E);
          }
          int v151 = db_create_id_for_value(*v101, "com.apple.motion.project");
          if (v151 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v151 & 0x7FFFFFFF), (const void *)0x2F);
          }
          int v152 = db_create_id_for_value(*v101, "com.apple.iwork.pages.pages");
          if (v152 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v152 & 0x7FFFFFFF), (const void *)0x30);
          }
          int v153 = db_create_id_for_value(*v101, "com.apple.iwork.pages.sffpages");
          if (v153 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v153 & 0x7FFFFFFF), (const void *)0x31);
          }
          int v154 = db_create_id_for_value(*v101, "com.apple.iwork.pages.template");
          if (v154 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v154 & 0x7FFFFFFF), (const void *)0x32);
          }
          int v155 = db_create_id_for_value(*v101, "com.apple.iwork.pages.sfftemplate");
          if (v155 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v155 & 0x7FFFFFFF), (const void *)0x33);
          }
          int v156 = db_create_id_for_value(*v101, "public.rtf");
          if (v156 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v156 & 0x7FFFFFFF), (const void *)0x34);
          }
          int v157 = db_create_id_for_value(*v101, "com.apple.rtfd");
          if (v157 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v157 & 0x7FFFFFFF), (const void *)0x35);
          }
          int v158 = db_create_id_for_value(*v101, "com.apple.flat-rtfd");
          if (v158 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v158 & 0x7FFFFFFF), (const void *)0x36);
          }
          int v159 = db_create_id_for_value(*v101, "com.microsoft.word.doc");
          if (v159 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v159 & 0x7FFFFFFF), (const void *)0x37);
          }
          int v160 = db_create_id_for_value(*v101, "org.khronos.collada.digital-asset-exchange");
          if (v160 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v160 & 0x7FFFFFFF), (const void *)0x38);
          }
          int v161 = db_create_id_for_value(*v101, "public.plain-text");
          if (v161 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v161 & 0x7FFFFFFF), (const void *)0x39);
          }
          int v162 = db_create_id_for_value(*v101, "public.html");
          if (v162 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v162 & 0x7FFFFFFF), (const void *)0x3A);
          }
          int v163 = db_create_id_for_value(*v101, "public.xhtml");
          if (v163 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v163 & 0x7FFFFFFF), (const void *)0x3B);
          }
          int v164 = db_create_id_for_value(*v101, "public.shell-script");
          if (v164 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v164 & 0x7FFFFFFF), (const void *)0x3C);
          }
          int v165 = db_create_id_for_value(*v101, "public.source-code");
          if (v165 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v165 & 0x7FFFFFFF), (const void *)0x3D);
          }
          int v166 = db_create_id_for_value(*v101, "public.unix-executable");
          if (v166 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v166 & 0x7FFFFFFF), (const void *)0x3E);
          }
          int v167 = db_create_id_for_value(*v101, "com.apple.xcode.project");
          if (v167 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v167 & 0x7FFFFFFF), (const void *)0x3F);
          }
          int v168 = db_create_id_for_value(*v101, "com.apple.xcode.model");
          if (v168 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v168 & 0x7FFFFFFF), (const void *)0x40);
          }
          int v169 = db_create_id_for_value(*v101, "com.apple.xcode.archive");
          if (v169 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v169 & 0x7FFFFFFF), (const void *)0x41);
          }
          int v170 = db_create_id_for_value(*v101, "com.apple.xcode.docset");
          if (v170 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v170 & 0x7FFFFFFF), (const void *)0x42);
          }
          int v171 = db_create_id_for_value(*v101, "com.apple.xcode.projectdata");
          if (v171 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v171 & 0x7FFFFFFF), (const void *)0x43);
          }
          int v172 = db_create_id_for_value(*v101, "com.apple.xcode.dsym");
          if (v172 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v172 & 0x7FFFFFFF), (const void *)0x44);
          }
          int v173 = db_create_id_for_value(*v101, "com.apple.xcode.configsettings");
          if (v173 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v173 & 0x7FFFFFFF), (const void *)0x45);
          }
          int v174 = db_create_id_for_value(*v101, "com.apple.xcode.usersettings");
          if (v174 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v174 & 0x7FFFFFFF), (const void *)0x46);
          }
          int v175 = db_create_id_for_value(*v101, "com.apple.xcode.strings-text");
          if (v175 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v175 & 0x7FFFFFFF), (const void *)0x47);
          }
          int v176 = db_create_id_for_value(*v101, "com.apple.xcode.plugin");
          if (v176 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v176 & 0x7FFFFFFF), (const void *)0x48);
          }
          int v177 = db_create_id_for_value(*v101, "com.apple.xcode.mom");
          if (v177 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v177 & 0x7FFFFFFF), (const void *)0x49);
          }
          int v178 = db_create_id_for_value(*v101, "com.apple.property-list");
          if (v178 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v178 & 0x7FFFFFFF), (const void *)0x4A);
          }
          int v179 = db_create_id_for_value(*v101, "dyn.ah62d4rv4ge81a7dk");
          if (v179 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v179 & 0x7FFFFFFF), (const void *)0x4B);
          }
          int v180 = db_create_id_for_value(*v101, "dyn.ah62d4rv4ge80u5pbsa");
          if (v180 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v180 & 0x7FFFFFFF), (const void *)0x4C);
          }
          int v181 = db_create_id_for_value(*v101, "com.apple.dashcode.xml");
          if (v181 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v181 & 0x7FFFFFFF), (const void *)0x4D);
          }
          int v182 = db_create_id_for_value(*v101, "com.apple.dashcode.css");
          if (v182 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v182 & 0x7FFFFFFF), (const void *)0x4E);
          }
          int v183 = db_create_id_for_value(*v101, "com.apple.dashcode.javascript");
          if (v183 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v183 & 0x7FFFFFFF), (const void *)0x4F);
          }
          int v184 = db_create_id_for_value(*v101, "com.apple.dashcode.json");
          if (v184 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v184 & 0x7FFFFFFF), (const void *)0x50);
          }
          int v185 = db_create_id_for_value(*v101, "com.apple.dashcode.manifest");
          if (v185 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v185 & 0x7FFFFFFF), (const void *)0x51);
          }
          int v186 = db_create_id_for_value(*v101, "com.apple.interfacebuilder.document");
          if (v186 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v186 & 0x7FFFFFFF), (const void *)0x52);
          }
          int v187 = db_create_id_for_value(*v101, "com.apple.interfacebuilder.document.cocoa");
          if (v187 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v187 & 0x7FFFFFFF), (const void *)0x53);
          }
          int v188 = db_create_id_for_value(*v101, "com.apple.rez-source");
          if (v188 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v188 & 0x7FFFFFFF), (const void *)0x54);
          }
          int v189 = db_create_id_for_value(*v101, "com.apple.iphone.developerprofile");
          if (v189 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v189 & 0x7FFFFFFF), (const void *)0x55);
          }
          int v190 = db_create_id_for_value(*v101, "com.apple.iphone.mobileprovision");
          if (v190 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v190 & 0x7FFFFFFF), (const void *)0x56);
          }
          int v191 = db_create_id_for_value(*v101, "com.apple.coreanimation-bundle");
          if (v191 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v191 & 0x7FFFFFFF), (const void *)0x57);
          }
          int v192 = db_create_id_for_value(*v101, "com.apple.coreanimation-xml");
          if (v192 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v192 & 0x7FFFFFFF), (const void *)0x58);
          }
          int v193 = db_create_id_for_value(*v101, "com.sun.java-class");
          if (v193 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v193 & 0x7FFFFFFF), (const void *)0x59);
          }
          int v194 = db_create_id_for_value(*v101, "com.apple.scripting-definition");
          if (v194 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v194 & 0x7FFFFFFF), (const void *)0x5A);
          }
          int v195 = db_create_id_for_value(*v101, "com.apple.dt.document.workspace");
          if (v195 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v195 & 0x7FFFFFFF), (const void *)0x5B);
          }
          int v196 = db_create_id_for_value(*v101, "com.apple.dt.document.scheme");
          if (v196 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v196 & 0x7FFFFFFF), (const void *)0x5C);
          }
          int v197 = db_create_id_for_value(*v101, "com.apple.dt.ide.plug-in");
          if (v197 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v197 & 0x7FFFFFFF), (const void *)0x5D);
          }
          int v198 = db_create_id_for_value(*v101, "com.apple.dt.dvt.plug-in");
          if (v198 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v198 & 0x7FFFFFFF), (const void *)0x5E);
          }
          int v199 = db_create_id_for_value(*v101, "com.apple.dt.document.snapshot");
          if (v199 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v199 & 0x7FFFFFFF), (const void *)0x5F);
          }
          int v200 = db_create_id_for_value(*v101, "com.apple.dt.bundle.unit-test.objective-c");
          if (v200 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v200 & 0x7FFFFFFF), (const void *)0x60);
          }
          int v201 = db_create_id_for_value(*v101, "com.apple.instruments.tracetemplate");
          if (v201 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v201 & 0x7FFFFFFF), (const void *)0x61);
          }
          int v202 = db_create_id_for_value(*v101, "com.apple.quartzdebug.introspectiontrace");
          if (v202 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v202 & 0x7FFFFFFF), (const void *)0x62);
          }
          int v203 = db_create_id_for_value(*v101, "com.apple.applescript.text-object");
          if (v203 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v203 & 0x7FFFFFFF), (const void *)0x63);
          }
          int v204 = db_create_id_for_value(*v101, "com.apple.applescript.data-object");
          if (v204 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v204 & 0x7FFFFFFF), (const void *)0x64);
          }
          int v205 = db_create_id_for_value(*v101, "com.apple.applescript.url-object");
          if (v205 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v205 & 0x7FFFFFFF), (const void *)0x65);
          }
          int v206 = db_create_id_for_value(*v101, "com.apple.applescript.alias-object");
          if (v206 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v206 & 0x7FFFFFFF), (const void *)0x66);
          }
          int v207 = db_create_id_for_value(*v101, "com.apple.symbol-export");
          if (v207 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v207 & 0x7FFFFFFF), (const void *)0x67);
          }
          int v208 = db_create_id_for_value(*v101, "com.apple.mach-o-binary");
          if (v208 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v208 & 0x7FFFFFFF), (const void *)0x68);
          }
          int v209 = db_create_id_for_value(*v101, "com.apple.mach-o-object");
          if (v209 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v209 & 0x7FFFFFFF), (const void *)0x69);
          }
          int v210 = db_create_id_for_value(*v101, "com.apple.mach-o-executable");
          if (v210 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v210 & 0x7FFFFFFF), (const void *)0x6A);
          }
          int v211 = db_create_id_for_value(*v101, "com.apple.x11-mach-o-executable");
          if (v211 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v211 & 0x7FFFFFFF), (const void *)0x6B);
          }
          int v212 = db_create_id_for_value(*v101, "public.object-code");
          if (v212 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v212 & 0x7FFFFFFF), (const void *)0x6C);
          }
          int v213 = db_create_id_for_value(*v101, "com.microsoft.windows-executable");
          if (v213 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v213 & 0x7FFFFFFF), (const void *)0x6D);
          }
          int v214 = db_create_id_for_value(*v101, "com.microsoft.windows-dynamic-link-library");
          if (v214 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v214 & 0x7FFFFFFF), (const void *)0x6E);
          }
          int v215 = db_create_id_for_value(*v101, "com.sun.java-archive");
          if (v215 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v215 & 0x7FFFFFFF), (const void *)0x6F);
          }
          int v216 = db_create_id_for_value(*v101, "com.sun.web-application-archive");
          if (v216 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v216 & 0x7FFFFFFF), (const void *)0x70);
          }
          int v217 = db_create_id_for_value(*v101, "com.apple.xcode.plugindata");
          if (v217 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v217 & 0x7FFFFFFF), (const void *)0x71);
          }
          int v218 = db_create_id_for_value(*v101, "com.apple.dt.playground");
          if (v218 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v218 & 0x7FFFFFFF), (const void *)0x72);
          }
          int v219 = db_create_id_for_value(*v101, "com.apple.iwork.numbers.sffnumbers");
          if (v219 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v219 & 0x7FFFFFFF), (const void *)0x73);
          }
          int v220 = db_create_id_for_value(*v101, "com.apple.iwork.numbers.numbers");
          if (v220 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v220 & 0x7FFFFFFF), (const void *)0x74);
          }
          int v221 = db_create_id_for_value(*v101, "com.apple.iwork.numbers.template");
          if (v221 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v221 & 0x7FFFFFFF), (const void *)0x75);
          }
          int v222 = db_create_id_for_value(*v101, "com.microsoft.excel.xls");
          if (v222 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v222 & 0x7FFFFFFF), (const void *)0x76);
          }
          int v223 = db_create_id_for_value(*v101, "org.openxmlformats.spreadsheetml.sheet");
          if (v223 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v223 & 0x7FFFFFFF), (const void *)0x77);
          }
          int v224 = db_create_id_for_value(*v101, "public.spreadsheet");
          if (v224 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v224 & 0x7FFFFFFF), (const void *)0x78);
          }
          int v225 = db_create_id_for_value(*v101, "public.xml");
          if (v225 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v225 & 0x7FFFFFFF), (const void *)0x79);
          }
          int v226 = db_create_id_for_value(*v101, "com.apple.log");
          if (v226 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v226 & 0x7FFFFFFF), (const void *)0x7A);
          }
          int v227 = db_create_id_for_value(*v101, "com.apple.crashreport");
          if (v227 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v227 & 0x7FFFFFFF), (const void *)0x7B);
          }
          int v228 = db_create_id_for_value(*v101, "com.apple.spinreport");
          if (v228 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v228 & 0x7FFFFFFF), (const void *)0x7C);
          }
          int v229 = db_create_id_for_value(*v101, "com.apple.panicreport");
          if (v229 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v229 & 0x7FFFFFFF), (const void *)0x7D);
          }
          int v230 = db_create_id_for_value(*v101, "com.apple.shutdownstall");
          if (v230 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v230 & 0x7FFFFFFF), (const void *)0x7E);
          }
          int v231 = db_create_id_for_value(*v101, "com.apple.hangreport");
          if (v231 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v231 & 0x7FFFFFFF), (const void *)0x7F);
          }
          int v232 = db_create_id_for_value(*v101, "public.json");
          if (v232 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v232 & 0x7FFFFFFF), (const void *)0x80);
          }
          int v233 = db_create_id_for_value(*v101, "public.log");
          if (v233 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v233 & 0x7FFFFFFF), (const void *)0x81);
          }
          int v234 = db_create_id_for_value(*v101, "public.content");
          if (v234 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v234 & 0x7FFFFFFF), (const void *)0x82);
          }
          int v235 = db_create_id_for_value(*v101, "com.microsoft.excel.sheet.binary.macroenabled");
          if (v235 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v235 & 0x7FFFFFFF), (const void *)0x83);
          }
          int v236 = db_create_id_for_value(*v101, "org.openxmlformats.spreadsheetml.sheet.macroenabled");
          if (v236 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v236 & 0x7FFFFFFF), (const void *)0x84);
          }
          int v237 = db_create_id_for_value(*v101, "com.apple.protected-mpeg-4-audio-b");
          if (v237 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v237 & 0x7FFFFFFF), (const void *)0x85);
          }
          int v238 = db_create_id_for_value(*v101, "com.audible.aa-audiobook");
          if (v238 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v238 & 0x7FFFFFFF), (const void *)0x86);
          }
          int v239 = db_create_id_for_value(*v101, "com.audible.aax-audiobook");
          if (v239 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v239 & 0x7FFFFFFF), (const void *)0x87);
          }
          int v240 = db_create_id_for_value(*v101, "com.apple.tips");
          if (v240 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v240 & 0x7FFFFFFF), (const void *)0x88);
          }
          int v241 = db_create_id_for_value(*v101, "com.apple.helpviewer");
          if (v241 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v241 & 0x7FFFFFFF), (const void *)0x89);
          }
          int v242 = db_create_id_for_value(*v101, "com.apple.help.topic");
          if (v242 != -2) {
            CFDictionarySetValue(Mutable, (const void *)(v242 & 0x7FFFFFFF), (const void *)0x8A);
          }
          *((void *)v18 + 825) = CFDictionaryCreateCopy(v103, Mutable);
          CFRelease(Mutable);
        }
        db_create_id_for_field(*v101, "kMDStoreProperties", 0x108u, 14);
        if (!*v101)
        {
          int v246 = *__error();
          uint64_t v247 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v247, OS_LOG_TYPE_ERROR))
          {
            int v254 = fcntl(v285, 50, v301);
            if (v301[0]) {
              BOOL v255 = v254 < 0;
            }
            else {
              BOOL v255 = 1;
            }
            if (v255) {
              os_log_type_t v256 = 0;
            }
            else {
              os_log_type_t v256 = v301;
            }
            *(_DWORD *)long long buf = 136315906;
            *(void *)&uint8_t buf[4] = "SICreateNewIndex";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 13669;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = v256;
            *(_WORD *)&buf[28] = 2080;
            *(void *)&buf[30] = "store.db";
            _os_log_error_impl(&dword_1BD672000, v247, OS_LOG_TYPE_ERROR, "%s:%d: Could not create store at path '%s/%s'", buf, 0x26u);
          }
          *__error() = v246;
          int v27 = 13670;
          int v26 = 1;
          goto LABEL_77;
        }
        *(_DWORD *)long long buf = 2;
        CFNumberRef v243 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, buf);
        SISetProperty((uint64_t)v18, @"YukonRecomputedSizes", v243);
        CFRelease(v243);
        int v26 = 1;
        _si_next_index_id((os_unfair_lock_s *)v18, *((unsigned int *)v18 + 362), 1, 1);
        uint64_t v44 = v288;
        goto LABEL_32;
      }
      int v244 = *__error();
      BOOL v250 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v250, OS_LOG_TYPE_ERROR))
      {
        int v261 = fcntl(v285, 50, v301);
        if (v301[0]) {
          BOOL v262 = v261 < 0;
        }
        else {
          BOOL v262 = 1;
        }
        if (v262) {
          int v263 = 0;
        }
        else {
          int v263 = v301;
        }
        *(_DWORD *)int valuePtr = 136315650;
        int v293 = "SICreateNewIndex";
        __int16 v294 = 1024;
        int v295 = 13597;
        __int16 v296 = 2080;
        int v297 = v263;
        _os_log_error_impl(&dword_1BD672000, v250, OS_LOG_TYPE_ERROR, "%s:%d: Could not create reverse dir store at path '%s'", valuePtr, 0x1Cu);
      }
      int v27 = 13598;
    }
    else
    {
      int v244 = *__error();
      unsigned int v245 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v245, OS_LOG_TYPE_ERROR))
      {
        int v251 = fcntl(v285, 50, v301);
        if (v301[0]) {
          BOOL v252 = v251 < 0;
        }
        else {
          BOOL v252 = 1;
        }
        if (v252) {
          int v253 = 0;
        }
        else {
          int v253 = v301;
        }
        *(_DWORD *)int valuePtr = 136315906;
        int v293 = "SICreateNewIndex";
        __int16 v294 = 1024;
        int v295 = 13585;
        __int16 v296 = 2080;
        int v297 = v253;
        __int16 v298 = 2080;
        uint64_t v299 = "store.db";
        _os_log_error_impl(&dword_1BD672000, v245, OS_LOG_TYPE_ERROR, "%s:%d: Could not create store at path '%s/%s'", valuePtr, 0x26u);
      }
      int v27 = 13586;
    }
    int v26 = 0;
    *__error() = v244;
    goto LABEL_77;
  }
  int v26 = 0;
  uint64_t v28 = v286;
LABEL_32:
  void *v29 = v18;
  *((_DWORD *)v18 + 1644) |= 0x380000u;
  uint64_t v49 = SIInitIndex((uint64_t)v18, v284, v282, v44, v283, 0, 0, 1, 0);
  if ((v49 & 0x80000000) != 0)
  {
    int v27 = 0;
LABEL_77:
    _SICloseIndex((uint64_t)v18, 0);
    uint64_t v77 = (int *)*((void *)v18 + 148);
    if (v77)
    {
      db_release_datastore_no_sync(v77);
      *((void *)v18 + 148) = 0;
    }
    uint64_t v78 = *((void *)v18 + 827);
    if (v78)
    {
      freeReverseDirStore(v78);
      *((void *)v18 + 827) = 0;
    }
    goto LABEL_6;
  }
  uint64_t v15 = v49;
  if (!(v49 | v288 & 8))
  {
    unsigned int v50 = (const void *)*MEMORY[0x1E4F1CFD0];
    if (v281) {
      si_set_property((uint64_t)v18, @"kSITokenizerUnigrams", (const void *)*MEMORY[0x1E4F1CFD0], 1, 0);
    }
    si_set_property((uint64_t)v18, @"kSITokenizerUseCRF", v50, 1, 0);
    *(_DWORD *)long long buf = (*((_DWORD *)v18 + 1644) >> 19) & 3;
    CFAllocatorRef v51 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberRef v52 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, buf);
    si_set_property((uint64_t)v18, @"kSITokenizerVersion", v52, 1, 0);
    CFRelease(v52);
    CFStringRef v53 = CFStringCreateWithCString(v51, (const char *)sysVersionCStr, 0x8000100u);
    si_set_property((uint64_t)v18, @"kSIRepairSizes", v53, 1, 0);
    CFRelease(v53);
    *(_DWORD *)int valuePtr = (*((_DWORD *)v18 + 1644) >> 21) & 1;
    CFNumberRef v54 = CFNumberCreate(v51, kCFNumberIntType, valuePtr);
    si_set_property((uint64_t)v18, @"kSIIdentifierHashVersion", v54, 1, 0);
    CFRelease(v54);
    si_set_property((uint64_t)v18, @"kSIRepairedIndex", v50, 1, 0);
    _si_set_version_property((uint64_t)v18, @"VEC_EXT_CLEARED_JOURNALS", 0);
    _si_set_version_property((uint64_t)v18, @"VEC_EXT_CLEARED_VECTORS", 1);
    os_unfair_lock_lock((os_unfair_lock_t)v18 + 1642);
    si_set_obj_state_locked((uint64_t)v18, (uint64_t)v18, 1);
    os_unfair_lock_unlock((os_unfair_lock_t)v18 + 1642);
  }
  MEMORY[0x1C1882290](v28);
  close(v28);
  if ((v288 & 8) == 0) {
    SIActivityJournalOpen((uint64_t)(v18 + 2184), 37, *((_DWORD *)v18 + 584), *(_DWORD *)(*((void *)v18 + 173) + 8), *(_DWORD *)(*((void *)v18 + 172) + 8), 0, 0, *((void *)v18 + 300));
  }
  si_cacheIndexVersion((uint64_t)v18);
  return v15;
}

void _SITuningInit()
{
  pthread_once(&_SITuningInit_once_control, (void (*)(void))_onceInitTuning);
  if (_SITuningInit_indexOnce != -1)
  {
    dispatch_once(&_SITuningInit_indexOnce, &__block_literal_global_993);
  }
}

double SIInitIndexLocks(uint64_t a1)
{
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1872), 0);
  pthread_cond_init((pthread_cond_t *)(a1 + 1936), 0);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1496), 0);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1560), 0);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1624), 0);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 6968), 0);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 2248), 0);
  pthread_rwlock_init((pthread_rwlock_t *)(a1 + 80), 0);
  *(_DWORD *)(a1 + 1688) = 0;
  double result = 0.0;
  *(void *)(a1 + 6568) = 0;
  atomic_store(0, (unsigned int *)(a1 + 1444));
  return result;
}

void __SICreateNewIndex_block_invoke_2(uint64_t a1, const void *a2)
{
}

uint64_t guarded_dup(int a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = 0;
  uint64_t v7 = dup(a1);
  arc4random_buf(&v8, 8uLL);
  int v1 = change_fdguard_np();
  if (v1)
  {
    int v2 = v1;
    int v3 = *__error();
    uint64_t v4 = _SILogForLogForCategory(11);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = *__error();
      *(_DWORD *)long long buf = 136315906;
      uint64_t v10 = "guarded_dup";
      __int16 v11 = 1024;
      int v12 = 13264;
      __int16 v13 = 1024;
      int v14 = v2;
      __int16 v15 = 1024;
      int v16 = v6;
      _os_log_error_impl(&dword_1BD672000, v4, OS_LOG_TYPE_ERROR, "%s:%d: Failed to protect fd with %d %d", buf, 0x1Eu);
    }
    *__error() = v3;
  }
  return v7;
}

uint64_t __SICreateNewIndex_block_invoke_307(uint64_t a1, uint64_t a2)
{
  return _si_next_index_id(*(os_unfair_lock_s **)(a1 + 32), a2, 0, 1);
}

int *si_set_vector_store(uint64_t a1)
{
  double result = *(int **)(a1 + 1184);
  if (result)
  {
    uint64_t vector_store = db_get_vector_store(result);
    uint64_t v4 = *(void *)(a1 + 1384);
    uint64_t v5 = *(void *)(a1 + 1376);
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 0x40000000;
    uint64_t v9 = __si_set_vector_store_block_invoke;
    uint64_t v10 = &__block_descriptor_tmp_988;
    uint64_t v11 = vector_store;
    if (v4 && *(_DWORD *)(v4 + 8))
    {
      uint64_t v6 = 0;
      while (((unsigned int (*)(void *, void, void))v9)(v8, *(void *)(*(void *)v4 + 8 * v6), 0))
      {
        if (++v6 >= (unint64_t)*(unsigned int *)(v4 + 8)) {
          goto LABEL_7;
        }
      }
    }
    else
    {
LABEL_7:
      if (v5 && *(_DWORD *)(v5 + 8))
      {
        unint64_t v7 = 0;
        do
        {
          if (!((unsigned int (*)(void *, void, uint64_t))v9)(v8, *(void *)(*(void *)v5 + 8 * v7), 1))break; {
          ++v7;
          }
        }
        while (v7 < *(unsigned int *)(v5 + 8));
      }
    }
    return (int *)db_set_host(*(int **)(a1 + 1184), a1);
  }
  return result;
}

uint64_t SIInitIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  int v11 = v10;
  CFArrayRef v449 = v12;
  CFArrayRef v14 = v13;
  int v16 = v15;
  unsigned int v18 = v17;
  uint64_t v443 = v19;
  uint64_t v442 = v20;
  uint64_t v21 = v9;
  uint64_t v518 = *MEMORY[0x1E4F143B8];
  if (registerForGameModeChange_onceToken[0] != -1) {
    dispatch_once(registerForGameModeChange_onceToken, &__block_literal_global_1021);
  }
  CFArrayRef v446 = v14;
  if (freeQueueOnce[0] != -1) {
    dispatch_once(freeQueueOnce, &__block_literal_global_996);
  }
  si_set_vector_store(v21);
  uint64_t v22 = *(void *)(v21 + 1384);
  uint64_t v23 = *(void *)(v21 + 1376);
  *(void *)std::string __s1 = 0;
  uint64_t v480 = __s1;
  uint64_t v481 = 0x2000000000;
  int v482 = 0;
  *(void *)&buf.f_bstd::string::size_type size = MEMORY[0x1E4F143A8];
  buf.f_blocks = 0x40000000;
  buf.f_bfree = (uint64_t)__ContentIndexVectorIndexDropCount_block_invoke;
  buf.f_bavail = (uint64_t)&unk_1E6346E50;
  buf.f_files = (uint64_t)__s1;
  if (v22 && *(_DWORD *)(v22 + 8))
  {
    uint64_t v24 = 0;
    while (((unsigned int (*)(statfs *, void, void))buf.f_bfree)(&buf, *(void *)(*(void *)v22 + 8 * v24), 0))
    {
      if (++v24 >= (unint64_t)*(unsigned int *)(v22 + 8)) {
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    if (v23 && *(_DWORD *)(v23 + 8))
    {
      unint64_t v25 = 0;
      do
      {
        if (!((unsigned int (*)(statfs *, void, uint64_t))buf.f_bfree)(&buf, *(void *)(*(void *)v23 + 8 * v25), 1))break; {
        ++v25;
        }
      }
      while (v25 < *(unsigned int *)(v23 + 8));
    }
  }
  int32_t v26 = *((_DWORD *)v480 + 6);
  _Block_object_dispose(__s1, 8);
  if (v26)
  {
    int v27 = *__error();
    uint64_t v28 = _SILogForLogForCategory(16);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      buf.f_bstd::string::size_type size = 67109120;
      buf.f_iostd::string::size_type size = v26;
      _os_log_impl(&dword_1BD672000, v28, OS_LOG_TYPE_DEFAULT, "db_scan_lost_ids for %u dropped vectors", (uint8_t *)&buf, 8u);
    }
    *__error() = v27;
    create_scan_touch_file(*(unsigned int *)(v21 + 32), 0);
    db_scan_lost_ids(*(int **)(v21 + 1184), 0, v21);
    unlinkat(*(_DWORD *)(v21 + 32), "rescan_needed", 2048);
    uint64_t v29 = *(void *)(v21 + 1384);
    uint64_t v30 = *(void *)(v21 + 1376);
    if (v29)
    {
      uint64_t v31 = *(unsigned int *)(v29 + 8);
      if (v31)
      {
        os_log_type_t v32 = *(uint64_t **)v29;
        do
        {
          uint64_t v33 = *v32++;
          *(_DWORD *)(v33 + 4920) = 0;
          --v31;
        }
        while (v31);
      }
    }
    if (v30)
    {
      uint64_t v34 = *(unsigned int *)(v30 + 8);
      if (v34)
      {
        int v35 = *(uint64_t **)v30;
        do
        {
          uint64_t v36 = *v35++;
          *(_DWORD *)(v36 + 4920) = 0;
          --v34;
        }
        while (v34);
      }
    }
  }
  char v445 = v11;
  int v37 = dispatch_queue_attr_make_with_qos_class(MEMORY[0x1E4F14430], QOS_CLASS_BACKGROUND, 0);
  *(void *)(v21 + 1176) = dispatch_queue_create("com.apple.spotlight.index.journal.toc", v37);
  bzero(__s1, 0x400uLL);
  int v38 = *(_DWORD *)(v21 + 32);
  bzero(&buf, 0x878uLL);
  int v39 = fstatfs(v38, &buf);
  uint64_t v40 = buf.f_blocks * buf.f_bsize;
  if (v39) {
    uint64_t v40 = -1;
  }
  *(void *)(v21 + 2464) = v40;
  *(_DWORD *)(v21 + 6868) = 0x7FFFFFFF;
  uint64_t v41 = 832;
  do
  {
    uint64_t v42 = v41;
    *(void *)(v21 + v41) = dispatch_semaphore_create(16);
    uint64_t v41 = v42 + 8;
  }
  while (v42 != 856);
  int v444 = v11;
  atomic_store(0, (unsigned int *)(v21 + 6880));
  *(unsigned char *)(v21 + 1472) = 0;
  *(void *)(v21 + 1464) = 0;
  if (*(unsigned char *)(v21 + 2064))
  {
    int v43 = dispatch_workloop_create("Watchdog workloop");
    uint64_t v44 = dispatch_queue_create_with_target_V2("Watchdog timer queue", 0, v43);
    int v45 = dispatch_source_create(MEMORY[0x1E4F14490], 1uLL, 0, v44);
    dispatch_release(v43);
    int v46 = malloc_type_calloc(1uLL, 0x78uLL, 0x1060040D8F80976uLL);
    void *v46 = v45;
    v46[1] = v44;
    *((unsigned char *)v46 + 16) = 0;
    v46[9] = 0;
    v46[12] = 0;
    v46[14] = 0;
    *((_DWORD *)v46 + 20) = 0;
    *((_OWORD *)v46 + 2) = 0u;
    *((_OWORD *)v46 + 3) = 0u;
    *((_DWORD *)v46 + 16) = 0;
    *(void *)(v21 + 64) = v46;
    *(void *)&buf.f_bstd::string::size_type size = MEMORY[0x1E4F143A8];
    buf.f_blocks = 0x40000000;
    buf.f_bfree = (uint64_t)__si_indexingWatchdogInit_block_invoke;
    buf.f_bavail = (uint64_t)&__block_descriptor_tmp_7_2989;
    buf.f_files = (uint64_t)v46;
    buf.f_ffree = v21;
    dispatch_source_set_event_handler(v45, &buf);
    if ((v18 & 0x100) == 0) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  *(void *)(v21 + 64) = 0;
  if ((v18 & 0x100) != 0)
  {
LABEL_32:
    *(void *)(v21 + 2120) = 1;
    *(void *)(v21 + 2128) = 0;
    *(unsigned char *)(v21 + 672) = 0;
    *(_DWORD *)(v21 + 328) = 0;
    *(void *)(v21 + 656) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
LABEL_33:
  bzero((void *)(v21 + 7032), 0xC00uLL);
  int v47 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unsigned int v468 = 0;
  unint64_t v467 = 0;
  unsigned int v466 = 0;
  unint64_t v48 = setThreadIdAndInfo(*(_DWORD *)(v21 + 32), sFdExceptionCallbacks, 0, 1, v47);
  unsigned int v468 = v48;
  unint64_t v467 = __PAIR64__(HIDWORD(v48), v49);
  unsigned int v466 = v50;
  uint64_t v51 = *(void *)&threadData[18 * v48 + 2];
  uint64_t v52 = v51 + 320 * HIDWORD(v48);
  *(unsigned char *)(v52 + 216) = 0;
  int v53 = *(_DWORD *)(v52 + 312);
  CFNumberRef v54 = *(void (**)(void))(v52 + 224);
  if (v54) {
    v54(*(void *)(v51 + 320 * HIDWORD(v48) + 288));
  }
  unsigned int v465 = v468;
  unsigned int v464 = HIDWORD(v467);
  unint64_t v463 = __PAIR64__(v467, v466);
  if (_setjmp((int *)v52))
  {
    int v55 = (_DWORD *)(v52 + 312);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.f_bsize) = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", (uint8_t *)&buf, 2u);
    }
    *int v55 = v53;
    CIOnThreadCleanUpReset(v463);
    dropThreadId(v465, 1, v47);
    CICleanUpReset(v465, HIDWORD(v463));
LABEL_157:
    _SICloseIndex(v21, 0);
    pthread_mutex_destroy((pthread_mutex_t *)(v21 + 1872));
    pthread_cond_destroy((pthread_cond_t *)(v21 + 1936));
    pthread_mutex_destroy((pthread_mutex_t *)(v21 + 1496));
    pthread_mutex_destroy((pthread_mutex_t *)(v21 + 1560));
    pthread_mutex_destroy((pthread_mutex_t *)(v21 + 1624));
    pthread_mutex_destroy((pthread_mutex_t *)(v21 + 6968));
    pthread_mutex_destroy((pthread_mutex_t *)(v21 + 2248));
    pthread_rwlock_destroy((pthread_rwlock_t *)(v21 + 80));
    return 0xFFFFFFFFLL;
  }
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  *(void *)(v21 + 72) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int valuePtr = 1;
  CFNumberRef v56 = CFNumberCreate(allocator, kCFNumberIntType, &valuePtr);
  if (v56)
  {
    CFNumberRef v57 = v56;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v21 + 72), @"version", v56);
    CFRelease(v57);
  }
  *(void *)(v21 + 1696) = CFBagCreateMutable(allocator, 64, MEMORY[0x1E4F1D520]);
  if (*(_DWORD *)(v21 + 32) && *(void *)(v21 + 1184)) {
    _si_init_localized_terms(v21);
  }
  if ((v18 & 0x80000109) == 0 && !a9 && !*(void *)(v21 + 6616))
  {
    int v405 = __si_assert_copy_extra_625(-1);
    uint64_t v377 = v405;
    v406 = "";
    if (v405) {
      v406 = v405;
    }
    v416 = "fs_only || newIndex->dirStore || rebuildDirStore";
    int v418 = v406;
    int v379 = 14550;
    goto LABEL_488;
  }
  unsigned int v448 = v18 & 0x80000109;
  *(_DWORD *)(v21 + 828) = v18;
  if (*(unsigned char *)(v21 + 2064)) {
    *(_DWORD *)(v21 + 6576) |= 0xC000u;
  }
  int v58 = *(_DWORD *)(v21 + 32);
  uint64_t v453 = v21;
  __int16 v452 = v18;
  int v451 = v47;
  int v450 = v53;
  if ((v18 & 0x100) != 0)
  {
    long long v507 = 0u;
    long long v506 = 0u;
    long long v505 = 0u;
    long long v504 = 0u;
    long long v503 = 0u;
    long long v502 = 0u;
    long long v501 = 0u;
    long long v500 = 0u;
    long long v499 = 0u;
    long long v498 = 0u;
    long long v497 = 0u;
    long long v496 = 0u;
    long long v495 = 0u;
    long long v494 = 0u;
    long long v493 = 0u;
    long long v492 = 0u;
    long long v491 = 0u;
    long long v490 = 0u;
    long long v489 = 0u;
    long long v488 = 0u;
    long long v487 = 0u;
    long long v486 = 0u;
    long long v485 = 0u;
    memset(&v484, 0, sizeof(v484));
    snprintf((char *)&v484, 0x200uLL, "doc_store_load(%d, %s, %lld)", v58, "docstore", 1);
    v471[1] = 0;
    v471[0] = 0;
    ScopeLogger::ScopeLogger((ScopeLogger *)v471, (const char *)&v484);
    long long v469 = 0u;
    long long v470 = 0u;
    analytics::ScopedLogger<analytics::OpenEvent>::ScopedLogger();
  }
  int v59 = fcntl(*(_DWORD *)(v21 + 32), 50, __s1);
  BOOL v60 = 0;
  if ((v59 & 0x80000000) == 0 && __s1[0])
  {
    int v61 = strstr(__s1, "NSFile");
    if (v61) {
      BOOL v60 = v61;
    }
    else {
      BOOL v60 = __s1;
    }
  }
  int v436 = v60;
  if (*(void *)(v21 + 1184))
  {
    _SIInitSDB(v21, v18, (v18 >> 2) & 1);
    CFNumberRef v62 = (const __CFNumber *)SICopyProperty(v21, @"JournalSerialNumber");
    if (v62)
    {
      CFNumberRef v63 = v62;
      CFTypeID v64 = CFGetTypeID(v62);
      if (v64 == CFNumberGetTypeID())
      {
        *(void *)&buf.f_bstd::string::size_type size = 0;
        CFNumberGetValue(v63, kCFNumberSInt64Type, &buf);
        if (*(void *)&buf.f_bsize) {
          *(void *)(v21 + 2120) = *(void *)&buf.f_bsize;
        }
      }
      CFRelease(v63);
    }
    CFNumberRef v65 = (const __CFNumber *)SICopyProperty(v21, @"ConsumedJournalSerialNumber");
    if (v65)
    {
      CFNumberRef v66 = v65;
      CFTypeID v67 = CFGetTypeID(v65);
      if (v67 == CFNumberGetTypeID())
      {
        *(void *)&buf.f_bstd::string::size_type size = 0;
        CFNumberGetValue(v66, kCFNumberSInt64Type, &buf);
        if (*(void *)&buf.f_bsize) {
          *(void *)(v21 + 2128) = *(void *)&buf.f_bsize;
        }
      }
      CFRelease(v66);
    }
    CFNumberRef v68 = (const __CFNumber *)SICopyProperty(v21, @"kSIIdentifierHashVersion");
    if (v68)
    {
      CFNumberRef v69 = v68;
      CFTypeID v70 = CFGetTypeID(v68);
      if (v70 == CFNumberGetTypeID())
      {
        buf.f_bstd::string::size_type size = 0;
        CFNumberGetValue(v69, kCFNumberIntType, &buf);
        *(_DWORD *)(v21 + 6576) = *(_DWORD *)(v21 + 6576) & 0xFFDFFFFF | ((buf.f_bsize & 1) << 21);
      }
      CFRelease(v69);
    }
    CFNumberRef v71 = (const __CFNumber *)SICopyProperty(v21, @"kSIIdentifierHashVersion");
    if (v71)
    {
      CFNumberRef v72 = v71;
      CFTypeID v73 = CFGetTypeID(v71);
      if (v73 == CFNumberGetTypeID())
      {
        buf.f_bstd::string::size_type size = 0;
        CFNumberGetValue(v72, kCFNumberIntType, &buf);
        *(_DWORD *)(v21 + 6576) = *(_DWORD *)(v21 + 6576) & 0xFFDFFFFF | ((buf.f_bsize & 1) << 21);
      }
      CFRelease(v72);
    }
    if ((v445 & 1) == 0)
    {
      unsigned int v74 = *(_DWORD *)(v21 + 1448);
      if (v74 <= 1) {
        unsigned int v74 = 1;
      }
      *(void *)&buf.f_bstd::string::size_type size = 0;
      buf.f_blocks = (uint64_t)&buf;
      buf.f_bfree = 0x2000000000;
      LODWORD(buf.f_bavail) = v74;
      uint64_t v75 = *(void *)(v21 + 1384);
      uint64_t v76 = *(void *)(v21 + 1376);
      v458[0] = MEMORY[0x1E4F143A8];
      v458[1] = 0x40000000;
      int v459 = __SIInitIndex_block_invoke_998;
      uint64_t v460 = &unk_1E6342130;
      p_statfs buf = &buf;
      if (v75 && *(_DWORD *)(v75 + 8))
      {
        uint64_t v77 = 0;
        while (((unsigned int (*)(void *, void, void))v459)(v458, *(void *)(*(void *)v75 + 8 * v77), 0))
        {
          if (++v77 >= (unint64_t)*(unsigned int *)(v75 + 8)) {
            goto LABEL_86;
          }
        }
      }
      else
      {
LABEL_86:
        if (v76 && *(_DWORD *)(v76 + 8))
        {
          unint64_t v78 = 0;
          do
          {
            if (!((unsigned int (*)(void *, void, uint64_t))v459)(v458, *(void *)(*(void *)v76 + 8 * v78), 1))break; {
            ++v78;
            }
          }
          while (v78 < *(unsigned int *)(v76 + 8));
        }
      }
      unsigned int v79 = *(_DWORD *)(buf.f_blocks + 24);
      if (v79 > *(_DWORD *)(v21 + 1448))
      {
        *(_DWORD *)(v21 + 1448) = v79;
        CFNumberRef v80 = CFNumberCreate(allocator, kCFNumberSInt32Type, (const void *)(v21 + 1448));
        SISetProperty(v21, @"kSINextIndexId", v80);
        CFRelease(v80);
      }
      _Block_object_dispose(&buf, 8);
      int v53 = v450;
    }
  }
  *(void *)(v21 + 1768) = CFSetCreateMutable(allocator, 0, &kSILQCallbacks);
  *(void *)(v21 + 1776) = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], &kQueryNodeUniqueSetValueCallbacks);
  pthread_mutex_init((pthread_mutex_t *)(v21 + 1704), 0);
  pthread_mutex_init((pthread_mutex_t *)(v21 + 1312), 0);
  *(void *)(v21 + 1432) = 0;
  int v441 = v18 & 0xC;
  if ((v18 & 0xC) != 0)
  {
    uint64_t v87 = v442;
    if ((v18 & 8) != 0) {
      goto LABEL_131;
    }
  }
  else
  {
    CFNumberRef v88 = (const __CFNumber *)SICopyProperty(v21, @"kMDSIndexSyncCount");
    BOOL v89 = (_DWORD *)(v21 + 2336);
    uint64_t v87 = v442;
    if (v88)
    {
      CFNumberRef v90 = v88;
      CFNumberGetValue(v88, kCFNumberIntType, v89);
      CFRelease(v90);
    }
    else
    {
      *BOOL v89 = 1;
    }
    CFNumberRef v91 = (const __CFNumber *)SICopyProperty(v21, @"kMDSIndexDeferSyncCount");
    uint64_t v81 = (_DWORD *)(v21 + 2340);
    if (v91)
    {
      CFNumberRef v92 = v91;
      CFNumberGetValue(v91, kCFNumberIntType, v81);
      CFRelease(v92);
    }
    else
    {
      *uint64_t v81 = 1;
    }
  }
  if (!*(unsigned char *)(v21 + 2065))
  {
    CFBooleanRef v93 = (const __CFBoolean *)SICopyProperty(v21, @"kSITokenizerUnigrams");
    if (v93)
    {
      CFBooleanRef v94 = v93;
      if (CFBooleanGetValue(v93)) {
        *(unsigned char *)(v21 + 2065) = 1;
      }
      CFRelease(v94);
    }
  }
  if ((*(unsigned char *)(v21 + 6578) & 0x18) == 0)
  {
    CFBooleanRef v95 = (const __CFBoolean *)SICopyProperty(v21, @"kSITokenizerUseCRF");
    if (v95)
    {
      CFBooleanRef v96 = v95;
      if (CFBooleanGetValue(v95)) {
        *(_DWORD *)(v21 + 6576) = *(_DWORD *)(v21 + 6576) & 0xFFE7FFFF | 0x80000;
      }
      CFRelease(v96);
    }
    CFNumberRef v97 = (const __CFNumber *)SICopyProperty(v21, @"kSITokenizerVersion");
    if (v97)
    {
      CFNumberRef v98 = v97;
      *(_DWORD *)(v21 + 6576) |= 0x180000u;
      CFTypeID v99 = CFGetTypeID(v97);
      if (v99 == CFNumberGetTypeID())
      {
        buf.f_bstd::string::size_type size = 0;
        if (CFNumberGetValue(v98, kCFNumberIntType, &buf))
        {
          if (buf.f_bsize - 1 <= 2) {
            *(_DWORD *)(v21 + 6576) = *(_DWORD *)(v21 + 6576) & 0xFFE7FFFF | ((buf.f_bsize & 3) << 19);
          }
        }
      }
      CFRelease(v98);
    }
    if ((v18 & 1) == 0 && (~*(_DWORD *)(v21 + 6576) & 0x180000) != 0)
    {
      CFArrayRef v100 = CFLocaleCopyPreferredLanguages();
      if (v100)
      {
        CFArrayRef v101 = v100;
        if (CFArrayGetCount(v100))
        {
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v101, 0);
          if ((unint64_t)CFStringFind(ValueAtIndex, @"ko", 9uLL).length)
          {
            int v103 = *__error();
            uint64_t v104 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
            {
              unsigned int v392 = *(_DWORD *)(v21 + 6576);
              buf.f_bstd::string::size_type size = 136315906;
              *(void *)&buf.f_iostd::string::size_type size = "SIInitIndex";
              WORD2(buf.f_blocks) = 1024;
              *(_DWORD *)((char *)&buf.f_blocks + 6) = 14767;
              WORD1(buf.f_bfree) = 1024;
              HIDWORD(buf.f_bfree) = (v392 >> 19) & 3;
              LOWORD(buf.f_bavail) = 2112;
              *(uint64_t *)((char *)&buf.f_bavail + 2) = (uint64_t)ValueAtIndex;
              _os_log_error_impl(&dword_1BD672000, v104, OS_LOG_TYPE_ERROR, "%s:%d: rebuild index for tokenizer (%d) %@", (uint8_t *)&buf, 0x22u);
            }
            *__error() = v103;
            CFRelease(v101);
            __si_set_error_str(1, "%s:%u: %s", v105, v106, v107, v108, v109, v110, (char)"SpotlightIndex.c");
            __si_set_rebuild_reason(v111, v112, "%s:%u: %s", "SpotlightIndex.c", 14774, "tokenizer");
            int v53 = v450;
            goto LABEL_154;
          }
        }
        CFRelease(v101);
      }
    }
  }
  if ((v18 & 0xC) == 0)
  {
    int v113 = *(_DWORD **)(v21 + 1184);
    if (v113) {
      db_create_id_for_field(v113, "kMDItemAttributeChangeDate", 0, 12);
    }
  }
LABEL_131:
  if (v16) {
    CFRetain(v16);
  }
  *(void *)(v21 + 1408) = v16;
  if (!v87 || (v18 & 0x100) != 0)
  {
    if ((v18 & 0x100) != 0) {
      goto LABEL_138;
    }
  }
  else
  {
    unsigned int v114 = *(_DWORD *)(v21 + 6576) & 0xFFFFFFFD | (2 * ((v87[7] & 0x180) == 256));
    *(_DWORD *)(v21 + 6576) = v114;
    unsigned int v115 = v114 & 0xFFFFFFFB | (4 * ((v87[7] >> 5) & 1));
    *(_DWORD *)(v21 + 6576) = v115;
    unsigned int v116 = v115 & 0xFFFFFFFE | (v87[7] >> 13) & 1;
    *(_DWORD *)(v21 + 6576) = v116;
    *(_DWORD *)(v21 + 6576) = (v116 & 0xFFFEFFFF | (((v87[7] >> 2) & 1) << 16)) ^ 0x10000;
  }
  if (!v16)
  {
    __si_set_error_str(1, "%s:%u: %s", (uint64_t)v81, v82, v83, v84, v85, v86, (char)"SpotlightIndex.c");
LABEL_154:
    uint64_t v123 = *(void *)&threadData[18 * v465 + 2];
    unsigned int v124 = v464;
    uint64_t v125 = v123 + 320 * v464;
    *(_DWORD *)(v125 + 312) = v53;
    int v126 = *(void (**)(void))(v125 + 232);
    if (v126) {
      v126(*(void *)(v123 + 320 * v124 + 288));
    }
    dropThreadId(v465, 0, v47);
    goto LABEL_157;
  }
LABEL_138:
  long long v478 = 0u;
  long long v477 = 0u;
  long long v476 = 0u;
  long long v475 = 0u;
  long long v474 = 0u;
  *(_OWORD *)value = 0u;
  pthread_mutex_lock(&schlock);
  uint64_t v117 = 12;
  if ((v18 & 4) != 0) {
    uint64_t v117 = 9;
  }
  if ((v18 & 8) != 0) {
    uint64_t v118 = 6;
  }
  else {
    uint64_t v118 = v117;
  }
  int v119 = global_schedulers;
  uint64_t v120 = v118;
  do
  {
    if (!*v119) {
      *int v119 = (uint64_t)CFDictionaryCreateMutable(allocator, 0, 0, &kSISchedulerDictionaryValueCallBacks);
    }
    ++v119;
    --v120;
  }
  while (v120);
  if ((v18 & 8) == 0)
  {
    CFMutableDictionaryRef Mutable = (__CFSet *)gAllIndexes;
    if (!gAllIndexes)
    {
      CFMutableDictionaryRef Mutable = CFSetCreateMutable(allocator, 0, 0);
      gAllIndexes = (uint64_t)Mutable;
    }
    CFSetAddValue(Mutable, (const void *)v21);
  }
  unsigned int v122 = v443;
  if (v443) {
    unsigned int v122 = *v443;
  }
  unsigned int v429 = v122;
  if (v442) {
    unsigned int v128 = *v442;
  }
  else {
    unsigned int v128 = 0;
  }
  *(_DWORD *)(v21 + 1396) = v429;
  unsigned int v427 = v128;
  *(_DWORD *)(v21 + 1400) = v128;
  *(_DWORD *)(v21 + 6576) |= 0x40000u;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __SIInitIndex_block_invoke_1007;
  block[3] = &__block_descriptor_tmp_1011;
  void block[4] = v21;
  if (SIInitIndex_once != -1) {
    dispatch_once(&SIInitIndex_once, block);
  }
  if (SIInitIndex_override == 1 && ((*(_DWORD *)(v21 + 6576) >> 18) & 1) != SIInitIndex_lowLatency)
  {
    int v129 = *__error();
    int v130 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
    {
      if (SIInitIndex_lowLatency) {
        int v131 = "true";
      }
      else {
        int v131 = "false";
      }
      buf.f_bstd::string::size_type size = 136315138;
      *(void *)&buf.f_iostd::string::size_type size = v131;
      _os_log_impl(&dword_1BD672000, v130, OS_LOG_TYPE_DEFAULT, "setting low latency: %s", (uint8_t *)&buf, 0xCu);
    }
    *__error() = v129;
    *(_DWORD *)(v21 + 6576) = *(_DWORD *)(v21 + 6576) & 0xFFFBFFFF | (SIInitIndex_lowLatency << 18);
  }
  uint64_t v132 = v21;
  uint64_t v133 = v21 + 864;
  uint64_t v134 = 0;
  int v440 = (uint64_t *)(v21 + 864);
  do
  {
    bzero(&buf, 0x450uLL);
    uint64_t v135 = *(int *)((char *)&free_scheduler_settings + v134 + 48);
    uint64_t v136 = *(int *)((char *)&free_scheduler_settings + v134 + 52);
    snprintf((char *)&buf, 0x450uLL, "%s scheduler for index at %s", *(const char **)((char *)&free_scheduler_settings + v134 + 40), v436);
    if (*(void *)(v133 + 8 * v135))
    {
      uint64_t v372 = __si_assert_copy_extra_625(-1);
      uint64_t v373 = v372;
      uint64_t v374 = "";
      if (v372) {
        uint64_t v374 = v372;
      }
      uint64_t v415 = "newIndex->workqueues.schedulers[schedId]==0";
      v417 = v374;
      int v375 = 14895;
      goto LABEL_495;
    }
    uint64_t v137 = v132 + 8 * v136;
    if (*(void *)(v137 + 1008))
    {
      unsigned int v376 = __si_assert_copy_extra_625(-1);
      uint64_t v377 = v376;
      int v378 = "";
      if (v376) {
        int v378 = v376;
      }
      v416 = "newIndex->workqueues.queues[queueId]==0";
      int v418 = v378;
      int v379 = 14896;
      goto LABEL_488;
    }
    int v138 = (void **)(v137 + 1008);
    root_scheduler = si_create_root_scheduler((uint64_t)&buf);
    uint64_t v133 = (uint64_t)v440;
    v440[v135] = (uint64_t)root_scheduler;
    *int v138 = si_create_child_queue((uint64_t)root_scheduler);
    v134 += 56;
  }
  while (v134 != 336);
  int v140 = (CFMutableDictionaryRef *)global_schedulers;
  int v141 = &byte_1F1812E20;
  int v142 = (const void **)value;
  uint64_t v143 = v118;
  int v144 = v440;
  do
  {
    uint64_t v422 = v143;
    if ((v452 & 0x100) != 0)
    {
      unsigned int v145 = 0;
    }
    else
    {
      unsigned int v145 = v429;
      if (*(v141 - 15)) {
        unsigned int v145 = v427;
      }
    }
    unint64_t v146 = v145;
    if (!CFDictionaryGetValueIfPresent(*v140, (const void *)v145, v142))
    {
      bzero(&buf, 0x400uLL);
      snprintf((char *)&buf, 0x400uLL, "%s scheduler for spindle %d", *((const char **)v141 + 1), v146);
      int v160 = si_create_root_scheduler((uint64_t)&buf);
      *int v142 = v160;
      CFDictionarySetValue(*v140, (const void *)v146, v160);
      uint64_t v161 = (uint64_t)*v142;
      if (*v142)
      {
        if (atomic_fetch_add((atomic_uint *volatile)(v161 + 88), 0xFFFFFFFF) == 1) {
          _si_scheduler_destroy(v161);
        }
      }
    }
    int v147 = v142;
    bzero(&buf, 0x450uLL);
    uint64_t v149 = *((int *)v141 + 4);
    uint64_t v148 = *((int *)v141 + 5);
    int v150 = *(v141 - 32);
    snprintf((char *)&buf, 0x450uLL, "%s scheduler for index at %s", *((const char **)v141 + 1), v436);
    if (v144[v149])
    {
      int v380 = __si_assert_copy_extra_625(-1);
      uint64_t v377 = v380;
      uint64_t v381 = "";
      if (v380) {
        uint64_t v381 = v380;
      }
      v416 = "newIndex->workqueues.schedulers[schedId]==0";
      int v418 = v381;
      int v379 = 14934;
      goto LABEL_488;
    }
    uint64_t v151 = v453 + 8 * v148;
    if (*(void *)(v151 + 1008))
    {
      uint64_t v383 = __si_assert_copy_extra_625(-1);
      uint64_t v373 = v383;
      uint64_t v384 = "";
      if (v383) {
        uint64_t v384 = v383;
      }
      uint64_t v415 = "newIndex->workqueues.queues[queueId]==0";
      v417 = v384;
      int v375 = 14935;
      goto LABEL_495;
    }
    __darwin_time_t v152 = (__darwin_time_t)*v147;
    __darwin_time_t v153 = (__darwin_time_t)*v147;
    scheduler = (dispatch_object_t *)si_create_scheduler(*(void *)(v152 + 32));
    uint64_t v155 = (uint64_t)scheduler;
    if (v150)
    {
      dispatch_suspend(scheduler[19]);
      ++*(_DWORD *)(v155 + 108);
      int v156 = malloc_type_malloc(0x10uLL, 0x1020040EDED9539uLL);
      *(void *)(v155 + 160) = v156;
      void *v156 = v155;
      pthread_threadid_np(0, v156 + 1);
    }
    int v157 = (void **)(v151 + 1008);
    *(_OWORD *)(v155 + 8) = *(_OWORD *)(v153 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v152 + 88), 1u);
    dispatch_activate(*(dispatch_object_t *)(v155 + 32));
    int v158 = *(NSObject **)(v153 + 32);
    *(void *)&v484.dev_t st_dev = MEMORY[0x1E4F143A8];
    v484.st_ino = 0x40000000;
    *(void *)&v484.st_uid = __si_create_child_scheduler_block_invoke;
    *(void *)&v484.st_rdev = &__block_descriptor_tmp_16_1103;
    v484.st_atimespec.tv_sec = v153;
    v484.st_atimespec.tv_nsec = v155;
    dispatch_sync(v158, &v484);
    int v144 = v440;
    v440[v149] = v155;
    uint64_t v159 = v453;
    *int v157 = si_create_child_queue(v155);
    ++v140;
    v141 += 56;
    int v142 = v147 + 1;
    --v143;
  }
  while (v422 != 1);
  __int16 v162 = v452;
  int v163 = v451;
  int v164 = v450;
  if (*(void *)(v453 + 896))
  {
    int v165 = *__error();
    int v166 = _SILogForLogForCategory(3);
    os_log_type_t v167 = 2 * (dword_1E9FC90B0 < 4);
    if (os_log_type_enabled(v166, v167))
    {
      uint64_t v168 = *(void *)(v453 + 896);
      buf.f_bstd::string::size_type size = 134218242;
      *(void *)&buf.f_iostd::string::size_type size = v168;
      WORD2(buf.f_blocks) = 2080;
      *(uint64_t *)((char *)&buf.f_blocks + 6) = (uint64_t)v436;
      _os_log_impl(&dword_1BD672000, v166, v167, "Suspending root scheduler for %p (%s)", (uint8_t *)&buf, 0x16u);
    }
    *__error() = v165;
    int v169 = *(void **)(v453 + 896);
    int v164 = v450;
    do
    {
      int v170 = v169;
      if (!v169) {
        break;
      }
      int v169 = (void *)*v169;
    }
    while (*v170);
    *(void *)(v453 + 2440) = si_scheduler_suspend_async((uint64_t)v170);
  }
  if (dword_1E9FC90B0 >= 5)
  {
    int v399 = *__error();
    uint64_t v400 = _SILogForLogForCategory(3);
    if (os_log_type_enabled(v400, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v401 = *(void *)(v453 + 904);
      buf.f_bstd::string::size_type size = 134217984;
      *(void *)&buf.f_iostd::string::size_type size = v401;
      _os_log_impl(&dword_1BD672000, v400, OS_LOG_TYPE_DEFAULT, "Created volume scheduler %p", (uint8_t *)&buf, 0xCu);
    }
    *__error() = v399;
    if (dword_1E9FC90B0 >= 5)
    {
      int v402 = *__error();
      uint64_t v403 = _SILogForLogForCategory(3);
      if (os_log_type_enabled(v403, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v404 = *(void *)(v453 + 928);
        buf.f_bstd::string::size_type size = 134217984;
        *(void *)&buf.f_iostd::string::size_type size = v404;
        _os_log_impl(&dword_1BD672000, v403, OS_LOG_TYPE_DEFAULT, "Created index scheduler %p", (uint8_t *)&buf, 0xCu);
      }
      *__error() = v402;
    }
  }
  if (!v441) {
    *(void *)(v453 + 1152) = si_create_child_queue(*(void *)(v453 + 872));
  }
  pthread_mutex_unlock(&schlock);
  *(void *)(v453 + 6912) = copyVolumeInfoStr(*(_DWORD *)(v453 + 32));
  for (uint64_t i = 1008; i != 1160; i += 8)
  {
    uint64_t v172 = *(void *)(v453 + i);
    if (v172)
    {
      uint64_t v173 = *(void *)(v453 + i);
      int v174 = *(_DWORD *)(v453 + 32);
      *(_DWORD *)(v172 + 40) = v174;
      *(void *)(v173 + 48) = copyVolumeInfoStr(v174);
    }
  }
  if (*(void *)(v453 + 1160))
  {
    uint64_t v175 = *(void *)(v453 + 1160);
    *(_DWORD *)(v175 + 40) = -1;
    *(void *)(v175 + 48) = strdup("");
  }
  if (*(void *)(v453 + 1184))
  {
    si_create_propertydict(v453, 0, 1);
    if (!*(void *)(v453 + 1432)) {
      si_storecookieRef(v453);
    }
    si_getsizes(v453, v444 ^ 1);
  }
  if ((v452 & 8) == 0)
  {
    CFDictionaryRef v176 = (const __CFDictionary *)SICopyProperty(v453, @"kIndexRemappingData");
    if (v176)
    {
      CFDictionaryRef v177 = v176;
      CFNumberRef v178 = (const __CFNumber *)CFDictionaryGetValue(v176, remapping_keys[0]);
      CFArrayRef v179 = (const __CFArray *)CFDictionaryGetValue(v177, off_1E9FC9230);
      if (v178) {
        CFNumberGetValue(v178, kCFNumberCFIndexType, (void *)(v453 + 2376));
      }
      if (v179)
      {
        CFIndex Count = CFArrayGetCount(v179);
        CFArrayRef theArray = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
        if (Count >= 1)
        {
          for (CFIndex j = 0; Count != j; ++j)
          {
            CFDictionaryRef v182 = (const __CFDictionary *)CFArrayGetValueAtIndex(v179, j);
            int v183 = *(_DWORD *)(v453 + 32);
            CFNumberRef v184 = (const __CFNumber *)CFDictionaryGetValue(v182, remapping_keys_9972[0]);
            CFNumberRef v185 = (const __CFNumber *)CFDictionaryGetValue(v182, off_1E9FC9F80);
            if (v185) {
              BOOL v186 = v184 == 0;
            }
            else {
              BOOL v186 = 1;
            }
            if (v186) {
              continue;
            }
            *(void *)&buf.f_bstd::string::size_type size = 0;
            v484.dev_t st_dev = 0;
            if (!CFNumberGetValue(v185, kCFNumberCFIndexType, &buf)) {
              continue;
            }
            if (!CFNumberGetValue(v184, kCFNumberSInt32Type, &v484)) {
              continue;
            }
            int v187 = (void *)CIDecodeRemappingMetadataWithIndex(v183, v484.st_dev, *(uint64_t *)&buf.f_bsize);
            if (!v187) {
              continue;
            }
            int v188 = v187;
            CFArrayAppendValue(theArray, v187);
            if ((v452 & 4) == 0)
            {
              unint64_t DocId = ContentIndexRemappingNextDocId(v188, (unint64_t *)&buf.f_bsize);
              if (!DocId) {
                continue;
              }
              uint64_t v190 = si_indexForDocId(v453, DocId);
              if (!v190) {
                continue;
              }
              uint64_t v419 = v190;
              int v191 = malloc_type_malloc(0x20uLL, 0x20040DC1BFBCFuLL);
              *int v191 = v453;
              v191[1] = v419;
              v191[2] = CFRetain(v188);
              si_enqueue_work(*(void *)(v453 + 1056), (uint64_t)si_remapForIndex, (uint64_t)v191);
            }
            CFRelease(v188);
          }
        }
        __int16 v162 = v452;
        uint64_t v159 = v453;
        si_inflateLeakedRemapping(v453, (v452 & 4) != 0, *(void *)(v453 + 2376), theArray);
        int v163 = v451;
        int v164 = v450;
        if (CFArrayGetCount(theArray))
        {
          *(void *)(v453 + 2360) = theArray;
        }
        else
        {
          *(void *)(v453 + 2360) = 0;
          CFRelease(theArray);
        }
        int v144 = v440;
      }
      else
      {
        int v192 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
        if (*(void *)(v453 + 2376) <= 1uLL) {
          uint64_t v193 = 1;
        }
        else {
          uint64_t v193 = *(void *)(v453 + 2376);
        }
        si_inflateLeakedRemapping(v453, (v452 & 4) != 0, v193, v192);
        if (CFArrayGetCount(v192))
        {
          *(void *)(v453 + 2360) = v192;
        }
        else
        {
          *(void *)(v453 + 2360) = 0;
          CFRelease(v192);
        }
        int v164 = v450;
      }
      CFRelease(v177);
    }
  }
  si_populateClientStates(v159);
  if (a9 && *(void *)(v159 + 872) && *(void *)(v159 + 1040))
  {
    int v194 = malloc_type_calloc(1uLL, 0x18uLL, 0x102004093CA8EA1uLL);
    v194[2] = a9;
    *(void *)int v194 = v159;
    *((void *)v194 + 2) = si_scheduler_suspend(*(void *)(v159 + 872));
    si_enqueue_work(*(void *)(v159 + 1040), (uint64_t)si_repair_index_file_tree, (uint64_t)v194);
  }
  if (v441 || (v445 & 1) != 0) {
    goto LABEL_440;
  }
  if (_os_feature_enabled_impl())
  {
    if (si_check_version_property(v159, @"VEC_EXT_CLEARED_VECTORS"))
    {
      buf.f_bstd::string::size_type size = 0;
      int v195 = db_clear_vector_fields(*(_DWORD **)(v159 + 1184), &buf, *(_DWORD **)(v159 + 6584));
      if (buf.f_bsize) {
        db_unlock_datastore(*(int **)(v159 + 1184));
      }
      if (!v195)
      {
        int v196 = *__error();
        int v197 = _SILogForLogForCategory(16);
        os_log_type_t v198 = dword_1E9FC90E4 < 3;
        if (os_log_type_enabled(v197, (os_log_type_t)(dword_1E9FC90E4 < 3)))
        {
          LOWORD(v484.st_dev) = 0;
          _os_log_impl(&dword_1BD672000, v197, v198, "*warn* Reset vector indexes", (uint8_t *)&v484, 2u);
        }
        *__error() = v196;
        uint64_t v199 = *(void *)(v159 + 1384);
        uint64_t v200 = *(void *)(v159 + 1376);
        if (v199 && *(_DWORD *)(v199 + 8))
        {
          uint64_t v201 = 0;
          do
          {
            uint64_t v202 = v201;
            ContentIndexResetVectorIndex(*(void *)(*(void *)v199 + 8 * v201));
            uint64_t v201 = v202 + 1;
          }
          while (v202 + 1 < (unint64_t)*(unsigned int *)(v199 + 8));
        }
        if (v200 && *(_DWORD *)(v200 + 8))
        {
          uint64_t v203 = 0;
          do
          {
            uint64_t v204 = v203;
            ContentIndexResetVectorIndex(*(void *)(*(void *)v200 + 8 * v203));
            uint64_t v203 = v204 + 1;
          }
          while (v204 + 1 < (unint64_t)*(unsigned int *)(v200 + 8));
        }
        _si_set_version_property(v159, @"VEC_EXT_CLEARED_VECTORS", 1);
      }
LABEL_267:
      db_set_ignore_vectors(*(void *)(v159 + 1184), 1);
    }
    else if (si_check_version_property(v159, @"VEC_EXT_CLEARED_JOURNALS"))
    {
      goto LABEL_267;
    }
  }
  LODWORD(__p[0]) = 0;
  if (!fd_setDir(*(unsigned int *)(v159 + 32), (int *)__p)) {
    goto LABEL_438;
  }
  bzero(&buf, 0x400uLL);
  gid_t v205 = *(_DWORD *)(v159 + 2336);
  gid_t v433 = v205;
  gid_t v437 = *(_DWORD *)(v159 + 2340);
  gid_t v206 = v205 + 1;
  do
  {
    if (v206 == 0x7FFFFFFF)
    {
      int v209 = 2147483646;
      goto LABEL_275;
    }
    if (snprintf((char *)&buf, 0x400uLL, "%s%d", "journalAttr.", v206) >= 0x400)
    {
      uint64_t v386 = __si_assert_copy_extra_625(-1);
      uint64_t v373 = v386;
      unsigned int v387 = "";
      if (v386) {
        unsigned int v387 = v386;
      }
      uint64_t v415 = "0 <= count && count < pathBufferSize";
      v417 = v387;
      int v375 = 5599;
      goto LABEL_495;
    }
    memset(&v484, 0, sizeof(v484));
    int v207 = stat((const char *)&buf, &v484);
    gid_t v208 = ++v206;
  }
  while (!v207);
  int v209 = v208 - 2;
LABEL_275:
  gid_t v210 = v205 - 1;
  int v211 = -2147483647;
  int v423 = v209;
  while (v205 != v211)
  {
    if (snprintf((char *)&buf, 0x400uLL, "%s%d", "journalAttr.", v210) >= 0x400)
    {
      int v388 = __si_assert_copy_extra_625(-1);
      uint64_t v373 = v388;
      int v389 = "";
      if (v388) {
        int v389 = v388;
      }
      uint64_t v415 = "0 <= count && count < pathBufferSize";
      v417 = v389;
      int v375 = 5611;
      goto LABEL_495;
    }
    memset(&v484, 0, sizeof(v484));
    int v212 = stat((const char *)&buf, &v484);
    gid_t v213 = --v210;
    ++v211;
    if (v212)
    {
      uint64_t v214 = v213 + 2;
      unsigned int v215 = v213 + 1;
      goto LABEL_281;
    }
  }
  unsigned int v215 = 0x80000000;
  uint64_t v214 = 2147483649;
LABEL_281:
  unsigned int v424 = v215;
  int v216 = *(unsigned __int8 *)(v159 + 2064);
  int v217 = v437;
  int v218 = v437;
  if (v216)
  {
    gid_t v219 = v437 + 1;
    do
    {
      if (v219 == 0x7FFFFFFF)
      {
        int v218 = 2147483646;
        goto LABEL_288;
      }
      if (snprintf((char *)&buf, 0x400uLL, "%s%d", "deferAttr.", v219) >= 0x400)
      {
        uint64_t v393 = __si_assert_copy_extra_625(-1);
        uint64_t v377 = v393;
        int v394 = "";
        if (v393) {
          int v394 = v393;
        }
        v416 = "0 <= count && count < pathBufferSize";
        int v418 = v394;
        int v379 = 5625;
        goto LABEL_488;
      }
      memset(&v484, 0, sizeof(v484));
      int v220 = stat((const char *)&buf, &v484);
      gid_t v221 = ++v219;
    }
    while (!v220);
    int v218 = v221 - 2;
LABEL_288:
    gid_t v222 = v437 - 1;
    gid_t v223 = v437 + 0x7FFFFFFF;
    while (1)
    {
      if (!v223)
      {
        int v217 = -2147483647;
        goto LABEL_294;
      }
      if (snprintf((char *)&buf, 0x400uLL, "%s%d", "deferAttr.", v222) >= 0x400) {
        break;
      }
      memset(&v484, 0, sizeof(v484));
      int v224 = stat((const char *)&buf, &v484);
      gid_t v225 = --v222;
      --v223;
      if (v224)
      {
        int v217 = v225 + 2;
        goto LABEL_294;
      }
    }
    uint64_t v395 = __si_assert_copy_extra_625(-1);
    uint64_t v373 = v395;
    int v396 = "";
    if (v395) {
      int v396 = v395;
    }
    uint64_t v415 = "0 <= count && count < pathBufferSize";
    v417 = v396;
    int v375 = 5637;
LABEL_495:
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", v375, v415, v417);
    free(v373);
    if (__valid_fs(-1)) {
      uint64_t v385 = 2989;
    }
    else {
      uint64_t v385 = 3072;
    }
    *(_DWORD *)uint64_t v385 = -559038737;
    abort();
  }
LABEL_294:
  int v226 = v217;
  int v434 = v218;
  uint64_t v227 = v453;
  int v228 = *(atomic_uint **)(v453 + 6944);
  if (v228 || (int v228 = (atomic_uint *)fd_create_protected(*(_DWORD *)(v453 + 32), "journalRepair.1", 0, 0)) != 0)
  {
    memset(&v484, 0, sizeof(v484));
    if (fd_stat((uint64_t)v228, &v484))
    {
      uint64_t v229 = v214;
      int v230 = v423;
    }
    else
    {
      int v231 = *__error();
      int v232 = _SILogForLogForCategory(0);
      uint64_t v233 = v214;
      int v230 = v423;
      if (os_log_type_enabled(v232, OS_LOG_TYPE_DEFAULT))
      {
        int v508 = 136316162;
        int v509 = "journalRepair.1";
        __int16 v510 = 2048;
        st_std::string::size_type size = (statfs *)v484.st_size;
        __int16 v512 = 1024;
        gid_t v513 = v205;
        __int16 v514 = 1024;
        int v515 = v233;
        __int16 v516 = 1024;
        int v517 = v423;
        _os_log_impl(&dword_1BD672000, v232, OS_LOG_TYPE_DEFAULT, "Found %s, size:%lld, syncCount:%d, first:%d, last:%d", (uint8_t *)&v508, 0x28u);
      }
      *__error() = v231;
      if (v484.st_size)
      {
        if (snprintf((char *)&buf, 0x400uLL, "%s%d", "journalAttr.", v424) >= 0x400)
        {
          uint64_t v413 = __si_assert_copy_extra_625(-1);
          uint64_t v377 = v413;
          uint64_t v414 = "";
          if (v413) {
            uint64_t v414 = v413;
          }
          v416 = "0 <= count && count < pathBufferSize";
          int v418 = v414;
          int v379 = 5665;
          goto LABEL_488;
        }
        int v234 = *__error();
        int v235 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v235, OS_LOG_TYPE_DEFAULT))
        {
          int v508 = 136316162;
          int v509 = "journalRepair.1";
          __int16 v510 = 2080;
          st_std::string::size_type size = &buf;
          __int16 v512 = 1024;
          gid_t v513 = v205;
          __int16 v514 = 1024;
          int v515 = v424;
          __int16 v516 = 1024;
          int v517 = v423;
          _os_log_impl(&dword_1BD672000, v235, OS_LOG_TYPE_DEFAULT, "Moving %s to %s, syncCount:%d, first:%d, last:%d", (uint8_t *)&v508, 0x28u);
        }
        *__error() = v234;
        fd_rename((uint64_t)v228, (const char *)&buf);
        uint64_t v229 = v424;
      }
      else
      {
        _fd_unlink_with_origin((uint64_t)v228, 0);
        fd_release(v228);
        int v228 = 0;
        uint64_t v229 = v233;
      }
    }
    uint64_t v236 = v229;
  }
  else
  {
    uint64_t v236 = v214;
    int v230 = v423;
  }
  int v432 = v228;
  gid_t v435 = v226;
  if (v230 == v205 || v236 == v205)
  {
    if (snprintf((char *)&buf, 0x400uLL, "%s%d", "journalAttr.", v205) >= 0x400)
    {
      unsigned int v409 = __si_assert_copy_extra_625(-1);
      uint64_t v377 = v409;
      uint64_t v410 = "";
      if (v409) {
        uint64_t v410 = v409;
      }
      v416 = "0 <= count && count < pathBufferSize";
      int v418 = v410;
      int v379 = 5675;
      goto LABEL_488;
    }
    memset(&v484, 0, sizeof(v484));
    int v237 = stat((const char *)&buf, &v484);
    if (v237) {
      int v238 = v230 == v205;
    }
    else {
      int v238 = 0;
    }
    if (v237) {
      BOOL v239 = v236 == v205;
    }
    else {
      BOOL v239 = 0;
    }
    v230 -= v238;
    uint64_t v236 = (v236 + v239);
  }
  uint64_t v240 = v236;
  dev_t v241 = v230;
  __darwin_time_t v438 = *(void *)(v453 + 2120);
  __darwin_time_t v439 = *(void *)(v453 + 2128);
  int v242 = *__error();
  CFNumberRef v243 = _SILogForLogForCategory(0);
  BOOL v244 = os_log_type_enabled(v243, OS_LOG_TYPE_DEFAULT);
  int v245 = v230 - v240;
  if (v230 < (int)v240)
  {
    __int16 v162 = v452;
    if (v244)
    {
      v484.dev_t st_dev = 134219264;
      *(void *)&v484.st_mode = v453;
      WORD2(v484.st_ino) = 1024;
      *(_DWORD *)((char *)&v484.st_ino + 6) = v433;
      HIWORD(v484.st_uid) = 1024;
      v484.st_gid = v240;
      LOWORD(v484.st_rdev) = 1024;
      *(dev_t *)((char *)&v484.st_rdev + 2) = v241;
      *((_WORD *)&v484.st_rdev + 3) = 2048;
      v484.st_atimespec.tv_sec = v438;
      LOWORD(v484.st_atimespec.tv_nsec) = 2048;
      *(uint64_t *)((char *)&v484.st_atimespec.tv_nsec + 2) = v439;
      _os_log_impl(&dword_1BD672000, v243, OS_LOG_TYPE_DEFAULT, "No journals to replay for %p, syncCount:%d, first:%d, last:%d, journalSerialNumber:%lld, consumedJournalSerialNumber:%lld", (uint8_t *)&v484, 0x32u);
    }
    *__error() = v242;
    uint64_t v246 = -1;
    dev_t v247 = v241;
    goto LABEL_360;
  }
  __int16 v162 = v452;
  if (v244)
  {
    v484.dev_t st_dev = 67110656;
    *(_DWORD *)&v484.st_mode = v245 + 1;
    LOWORD(v484.st_ino) = 2048;
    *(__darwin_ino64_t *)((char *)&v484.st_ino + 2) = v453;
    HIWORD(v484.st_uid) = 1024;
    v484.st_gid = v433;
    LOWORD(v484.st_rdev) = 1024;
    *(dev_t *)((char *)&v484.st_rdev + 2) = v240;
    *((_WORD *)&v484.st_rdev + 3) = 1024;
    LODWORD(v484.st_atimespec.tv_sec) = v241;
    WORD2(v484.st_atimespec.tv_sec) = 2048;
    *(__darwin_time_t *)((char *)&v484.st_atimespec.tv_sec + 6) = v438;
    HIWORD(v484.st_atimespec.tv_nsec) = 2048;
    v484.st_mtimespec.tv_sec = v439;
    _os_log_impl(&dword_1BD672000, v243, OS_LOG_TYPE_DEFAULT, "Replaying %d journals for %p, syncCount:%d, first:%d, last:%d, journalSerialNumber:%lld, consumedJournalSerialNumber:%lld", (uint8_t *)&v484, 0x38u);
  }
  *__error() = v242;
  if (v241 >= *(_DWORD *)(v453 + 2336)) {
    *(_DWORD *)(v453 + 2336) = v241 + 1;
  }
  dev_t v430 = v241;
  int v425 = v245 + 1;
  int v508 = 0;
  uint64_t v248 = -1;
  int v249 = 0;
  uint64_t v250 = 0;
  int v251 = v432;
  do
  {
    gid_t v252 = v240 + v249;
    if (snprintf((char *)&buf, 0x400uLL, "%s%d", "journalAttr.", v240 + v249) >= 0x400)
    {
      int v390 = __si_assert_copy_extra_625(-1);
      uint64_t v377 = v390;
      CFBooleanRef v391 = "";
      if (v390) {
        CFBooleanRef v391 = v390;
      }
      v416 = "0 <= count && count < pathBufferSize";
      int v418 = v391;
      int v379 = 5703;
      goto LABEL_488;
    }
    if (!v508)
    {
      if (v251 && (int v259 = v251, !v249)
        || (int v259 = (atomic_uint *)fd_create_protected(*(_DWORD *)(v227 + 32), (const char *)&buf, 0, 0)) != 0)
      {
        uint64_t v260 = si_playbackJournal(v227, (uint64_t)v259, (uint64_t)&v508);
        int v261 = v508;
        if (v508)
        {
          uint64_t v262 = v240;
          int v263 = *__error();
          int v264 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v264, OS_LOG_TYPE_ERROR))
          {
            v484.dev_t st_dev = 136316418;
            *(void *)&v484.st_mode = "si_playbackJournals";
            WORD2(v484.st_ino) = 1024;
            *(_DWORD *)((char *)&v484.st_ino + 6) = 5721;
            HIWORD(v484.st_uid) = 1024;
            v484.st_gid = v252;
            LOWORD(v484.st_rdev) = 1024;
            *(dev_t *)((char *)&v484.st_rdev + 2) = v262;
            *((_WORD *)&v484.st_rdev + 3) = 1024;
            LODWORD(v484.st_atimespec.tv_sec) = v430;
            WORD2(v484.st_atimespec.tv_sec) = 2080;
            *(__darwin_time_t *)((char *)&v484.st_atimespec.tv_sec + 6) = (__darwin_time_t)&buf;
            _os_log_error_impl(&dword_1BD672000, v264, OS_LOG_TYPE_ERROR, "%s:%d: ParseFailed A idx:%d (%d %d) %s", (uint8_t *)&v484, 0x2Eu);
          }
          *__error() = v263;
          uint64_t v227 = v453;
          uint64_t v240 = v262;
          int v251 = v432;
        }
        uint64_t v250 = (v250 + 1);
        if (v248 <= v260) {
          uint64_t v265 = v260;
        }
        else {
          uint64_t v265 = v248;
        }
        if (v261) {
          uint64_t v258 = v248;
        }
        else {
          uint64_t v258 = v265;
        }
        fd_release(v259);
        goto LABEL_348;
      }
      int v269 = *__error();
      int v270 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v270, OS_LOG_TYPE_DEFAULT))
      {
        v484.dev_t st_dev = 136315906;
        *(void *)&v484.st_mode = &buf;
        WORD2(v484.st_ino) = 1024;
        *(_DWORD *)((char *)&v484.st_ino + 6) = v433;
        HIWORD(v484.st_uid) = 1024;
        v484.st_gid = v240;
        LOWORD(v484.st_rdev) = 1024;
        *(dev_t *)((char *)&v484.st_rdev + 2) = v430;
        _os_log_impl(&dword_1BD672000, v270, OS_LOG_TYPE_DEFAULT, "Missing %s, syncCount:%d, first:%d, last:%d", (uint8_t *)&v484, 0x1Eu);
      }
      *__error() = v269;
LABEL_333:
      uint64_t v258 = v248;
LABEL_348:
      uint64_t v266 = v250;
      __int16 v162 = v452;
      goto LABEL_352;
    }
    int v253 = (atomic_uint *)fd_create_protected(*(_DWORD *)(v227 + 32), (const char *)&buf, 2, 0);
    if (v253)
    {
      int v254 = v253;
      dev_t v255 = fd_truncate((uint64_t)v253, 0);
      fd_release(v254);
      int v256 = *__error();
      uint64_t v257 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v257, OS_LOG_TYPE_ERROR))
      {
        v484.dev_t st_dev = 136316162;
        *(void *)&v484.st_mode = "si_playbackJournals";
        WORD2(v484.st_ino) = 1024;
        *(_DWORD *)((char *)&v484.st_ino + 6) = 5739;
        HIWORD(v484.st_uid) = 1024;
        v484.st_gid = v240 + v249;
        LOWORD(v484.st_rdev) = 1024;
        *(dev_t *)((char *)&v484.st_rdev + 2) = v255;
        *((_WORD *)&v484.st_rdev + 3) = 2080;
        v484.st_atimespec.tv_sec = (__darwin_time_t)&buf;
        _os_log_error_impl(&dword_1BD672000, v257, OS_LOG_TYPE_ERROR, "%s:%d: ParseFailed truncated A idx:%d result:%d %s", (uint8_t *)&v484, 0x28u);
      }
      *__error() = v256;
      goto LABEL_333;
    }
    int v267 = *__error();
    int v268 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v268, OS_LOG_TYPE_ERROR))
    {
      v484.dev_t st_dev = 136315906;
      *(void *)&v484.st_mode = "si_playbackJournals";
      WORD2(v484.st_ino) = 1024;
      *(_DWORD *)((char *)&v484.st_ino + 6) = 5733;
      HIWORD(v484.st_uid) = 1024;
      v484.st_gid = v240 + v249;
      LOWORD(v484.st_rdev) = 2080;
      *(void *)((char *)&v484.st_rdev + 2) = &buf;
      _os_log_error_impl(&dword_1BD672000, v268, OS_LOG_TYPE_ERROR, "%s:%d: ParseFailed unable to truncate A idx:%d %s", (uint8_t *)&v484, 0x22u);
    }
    *__error() = v267;
    uint64_t v258 = v248;
    uint64_t v266 = v250;
LABEL_352:
    ++v249;
    uint64_t v250 = v266;
    uint64_t v248 = v258;
  }
  while (v425 != v249);
  int v271 = *__error();
  BOOL v272 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v272, OS_LOG_TYPE_DEFAULT))
  {
    v484.dev_t st_dev = 67109890;
    *(_DWORD *)&v484.st_mode = v266;
    LOWORD(v484.st_ino) = 2080;
    *(__darwin_ino64_t *)((char *)&v484.st_ino + 2) = (__darwin_ino64_t)&buf;
    HIWORD(v484.st_uid) = 1024;
    v484.st_gid = v433;
    LOWORD(v484.st_rdev) = 2048;
    *(void *)((char *)&v484.st_rdev + 2) = v258;
    _os_log_impl(&dword_1BD672000, v272, OS_LOG_TYPE_DEFAULT, "Replayed %d journal(s) %s, syncCount:%d, maxReplaySerialNumber:%lld", (uint8_t *)&v484, 0x22u);
  }
  *__error() = v271;
  uint64_t v246 = v258;
  dev_t v247 = v240;
LABEL_360:
  uint64_t v426 = v246;
  if (v446)
  {
    CFIndex v273 = CFArrayGetCount(v446);
    if (v273 >= 1)
    {
      CFIndex v274 = v273;
      for (CFIndex k = 0; k != v274; ++k)
      {
        int v276 = CFArrayGetValueAtIndex(v446, k);
        if ((unint64_t)v276 < v247)
        {
          int v277 = (int)v276;
          snprintf((char *)&buf, 0x400uLL, "%s%d", "journalAttr.", v276);
          int v278 = *__error();
          unsigned int v279 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v279, OS_LOG_TYPE_DEFAULT))
          {
            v484.dev_t st_dev = 136315138;
            *(void *)&v484.st_mode = &buf;
            _os_log_impl(&dword_1BD672000, v279, OS_LOG_TYPE_DEFAULT, "Unlinking dropped file %s", (uint8_t *)&v484, 0xCu);
          }
          *__error() = v278;
          unlink((const char *)&buf);
          snprintf((char *)&buf, 0x400uLL, "%s%d_toc", "journalAttr.", v277);
          int v280 = *__error();
          unsigned int v281 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v281, OS_LOG_TYPE_DEFAULT))
          {
            v484.dev_t st_dev = 136315138;
            *(void *)&v484.st_mode = &buf;
            _os_log_impl(&dword_1BD672000, v281, OS_LOG_TYPE_DEFAULT, "Unlinking dropped file %s", (uint8_t *)&v484, 0xCu);
          }
          *__error() = v280;
          unlink((const char *)&buf);
          __int16 v162 = v452;
        }
      }
    }
  }
  uint64_t v159 = v453;
  int v163 = v451;
  int v144 = v440;
  if (*(unsigned char *)(v453 + 2064))
  {
    if (v434 != v437 && v435 != v437)
    {
      dev_t v282 = v434;
      gid_t v283 = v435;
      goto LABEL_382;
    }
    if (snprintf((char *)&buf, 0x400uLL, "%s%d", "deferAttr.", v437) < 0x400)
    {
      memset(&v484, 0, sizeof(v484));
      int v284 = stat((const char *)&buf, &v484);
      if (v284) {
        BOOL v285 = v434 == v437;
      }
      else {
        BOOL v285 = 0;
      }
      if (v284) {
        BOOL v286 = v435 == v437;
      }
      else {
        BOOL v286 = 0;
      }
      dev_t v282 = v434 - v285;
      gid_t v283 = v435 + v286;
LABEL_382:
      gid_t v287 = v283;
      dev_t v288 = v282;
      int v289 = *__error();
      uint64_t v290 = _SILogForLogForCategory(0);
      BOOL v291 = os_log_type_enabled(v290, OS_LOG_TYPE_DEFAULT);
      gid_t v428 = v287;
      if (v288 < (int)v287)
      {
        if (v291)
        {
          v484.dev_t st_dev = 134219264;
          *(void *)&v484.st_mode = v453;
          WORD2(v484.st_ino) = 1024;
          *(_DWORD *)((char *)&v484.st_ino + 6) = v437;
          HIWORD(v484.st_uid) = 1024;
          v484.st_gid = v287;
          LOWORD(v484.st_rdev) = 1024;
          *(dev_t *)((char *)&v484.st_rdev + 2) = v288;
          *((_WORD *)&v484.st_rdev + 3) = 2048;
          v484.st_atimespec.tv_sec = v438;
          LOWORD(v484.st_atimespec.tv_nsec) = 2048;
          *(uint64_t *)((char *)&v484.st_atimespec.tv_nsec + 2) = v439;
          _os_log_impl(&dword_1BD672000, v290, OS_LOG_TYPE_DEFAULT, "No defer journals to replay for %p, deferSyncCount:%d, first:%d, last:%d, journalSerialNumber:%lld, consumedJournalSerialNumber:%lld", (uint8_t *)&v484, 0x32u);
        }
        *__error() = v289;
        __darwin_time_t v292 = v426;
        signed int v293 = v288;
LABEL_419:
        __darwin_time_t v420 = v292;
        if (v449)
        {
          CFIndex v322 = CFArrayGetCount(v449);
          if (v322 >= 1)
          {
            CFIndex v323 = v322;
            for (CFIndex m = 0; m != v323; ++m)
            {
              v325 = CFArrayGetValueAtIndex(v449, m);
              if ((unint64_t)v325 < v293)
              {
                int v326 = (int)v325;
                snprintf((char *)&buf, 0x400uLL, "%s%d", "deferAttr.", v325);
                int v327 = *__error();
                int v328 = _SILogForLogForCategory(0);
                if (os_log_type_enabled(v328, OS_LOG_TYPE_DEFAULT))
                {
                  v484.dev_t st_dev = 136315138;
                  *(void *)&v484.st_mode = &buf;
                  _os_log_impl(&dword_1BD672000, v328, OS_LOG_TYPE_DEFAULT, "Unlinking dropped file %s", (uint8_t *)&v484, 0xCu);
                }
                *__error() = v327;
                unlink((const char *)&buf);
                snprintf((char *)&buf, 0x400uLL, "%s%d_toc", "deferAttr.", v326);
                int v329 = *__error();
                os_log_type_t v330 = _SILogForLogForCategory(0);
                if (os_log_type_enabled(v330, OS_LOG_TYPE_DEFAULT))
                {
                  v484.dev_t st_dev = 136315138;
                  *(void *)&v484.st_mode = &buf;
                  _os_log_impl(&dword_1BD672000, v330, OS_LOG_TYPE_DEFAULT, "Unlinking dropped file %s", (uint8_t *)&v484, 0xCu);
                }
                *__error() = v329;
                unlink((const char *)&buf);
                uint64_t v159 = v453;
              }
            }
          }
        }
        __darwin_time_t v331 = v439;
        if (v420 > v439) {
          __darwin_time_t v331 = v420;
        }
        __darwin_time_t v332 = v438;
        if (v438 <= v331)
        {
          __darwin_time_t v333 = v331 + 1;
          *(void *)(v159 + 2120) = v333;
          __darwin_time_t v332 = v333;
        }
        int v334 = *__error();
        uint64_t v335 = _SILogForLogForCategory(0);
        __int16 v162 = v452;
        int v163 = v451;
        int v144 = v440;
        if (os_log_type_enabled(v335, OS_LOG_TYPE_DEFAULT))
        {
          v484.dev_t st_dev = 134218240;
          *(void *)&v484.st_mode = v332;
          WORD2(v484.st_ino) = 2048;
          *(__darwin_ino64_t *)((char *)&v484.st_ino + 6) = v439;
          _os_log_impl(&dword_1BD672000, v335, OS_LOG_TYPE_DEFAULT, "journalSerialNumber:%lld, consumedJournalSerialNumber:%lld", (uint8_t *)&v484, 0x16u);
        }
        *__error() = v334;
        goto LABEL_436;
      }
      if (v291)
      {
        v484.dev_t st_dev = 67110656;
        *(_DWORD *)&v484.st_mode = v288 - v287 + 1;
        LOWORD(v484.st_ino) = 2048;
        *(__darwin_ino64_t *)((char *)&v484.st_ino + 2) = v453;
        HIWORD(v484.st_uid) = 1024;
        v484.st_gid = v437;
        LOWORD(v484.st_rdev) = 1024;
        *(dev_t *)((char *)&v484.st_rdev + 2) = v287;
        *((_WORD *)&v484.st_rdev + 3) = 1024;
        LODWORD(v484.st_atimespec.tv_sec) = v288;
        WORD2(v484.st_atimespec.tv_sec) = 2048;
        *(__darwin_time_t *)((char *)&v484.st_atimespec.tv_sec + 6) = v438;
        HIWORD(v484.st_atimespec.tv_nsec) = 2048;
        v484.st_mtimespec.tv_sec = v439;
        _os_log_impl(&dword_1BD672000, v290, OS_LOG_TYPE_DEFAULT, "Replaying %d defer journals for %p, syncCount:%d, first:%d, last:%d, journalSerialNumber:%lld, consumedJournalSerialNumber:%lld", (uint8_t *)&v484, 0x38u);
      }
      *__error() = v289;
      if (v288 >= *(_DWORD *)(v453 + 2340)) {
        *(_DWORD *)(v453 + 2340) = v288 + 1;
      }
      dev_t v431 = v288;
      uint64_t v294 = (v288 + 1);
      int v508 = 0;
      int v295 = "deferAttr.";
      __int16 v296 = "%s%d";
      int v297 = 0;
      uint64_t v298 = v287;
      uint64_t v299 = v426;
      while (2)
      {
        if (snprintf((char *)&buf, 0x400uLL, v296, v295, v298) >= 0x400)
        {
          int v397 = __si_assert_copy_extra_625(-1);
          uint64_t v373 = v397;
          int v398 = "";
          if (v397) {
            int v398 = v397;
          }
          uint64_t v415 = "0 <= count && count < pathBufferSize";
          v417 = v398;
          int v375 = 5785;
          goto LABEL_495;
        }
        int v300 = *(_DWORD *)(v453 + 32);
        if (v297)
        {
          uint64_t v301 = (atomic_uint *)fd_create_protected(v300, (const char *)&buf, 2, 0);
          if (v301)
          {
            uint64_t v302 = v301;
            dev_t v303 = fd_truncate((uint64_t)v301, 0);
            fd_release(v302);
            int v304 = *__error();
            std::__compressed_pair<std::string *> v305 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v305, OS_LOG_TYPE_ERROR))
            {
              v484.dev_t st_dev = 136316162;
              *(void *)&v484.st_mode = "si_playbackJournals";
              WORD2(v484.st_ino) = 1024;
              *(_DWORD *)((char *)&v484.st_ino + 6) = 5816;
              HIWORD(v484.st_uid) = 1024;
              v484.st_gid = v298;
              LOWORD(v484.st_rdev) = 1024;
              *(dev_t *)((char *)&v484.st_rdev + 2) = v303;
              *((_WORD *)&v484.st_rdev + 3) = 2080;
              v484.st_atimespec.tv_sec = (__darwin_time_t)&buf;
              CFStringRef v306 = v305;
              CFStringRef v307 = "%s:%d: ParseFailed truncated B idx:%d result:%d %s";
              uint32_t v308 = 40;
              goto LABEL_418;
            }
          }
          else
          {
            int v304 = *__error();
            int v321 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v321, OS_LOG_TYPE_ERROR))
            {
              v484.dev_t st_dev = 136315906;
              *(void *)&v484.st_mode = "si_playbackJournals";
              WORD2(v484.st_ino) = 1024;
              *(_DWORD *)((char *)&v484.st_ino + 6) = 5810;
              HIWORD(v484.st_uid) = 1024;
              v484.st_gid = v298;
              LOWORD(v484.st_rdev) = 2080;
              *(void *)((char *)&v484.st_rdev + 2) = &buf;
              CFStringRef v306 = v321;
              CFStringRef v307 = "%s:%d: ParseFailed unable to truncate B idx:%d %s";
              uint32_t v308 = 34;
LABEL_418:
              _os_log_error_impl(&dword_1BD672000, v306, OS_LOG_TYPE_ERROR, v307, (uint8_t *)&v484, v308);
            }
          }
          *__error() = v304;
          __darwin_time_t v292 = v299;
        }
        else
        {
          uint64_t v309 = v296;
          uint64_t v310 = v294;
          uint64_t v311 = v295;
          uint64_t v312 = (atomic_uint *)fd_create_protected(v300, (const char *)&buf, 0, 0);
          int v313 = *__error();
          uint64_t v314 = _SILogForLogForCategory(0);
          BOOL v315 = os_log_type_enabled(v314, OS_LOG_TYPE_DEFAULT);
          if (v312)
          {
            if (v315)
            {
              v484.dev_t st_dev = 136315906;
              *(void *)&v484.st_mode = &buf;
              WORD2(v484.st_ino) = 1024;
              *(_DWORD *)((char *)&v484.st_ino + 6) = v437;
              HIWORD(v484.st_uid) = 1024;
              v484.st_gid = v428;
              LOWORD(v484.st_rdev) = 1024;
              *(dev_t *)((char *)&v484.st_rdev + 2) = v431;
              _os_log_impl(&dword_1BD672000, v314, OS_LOG_TYPE_DEFAULT, "Replaying %s, syncCount:%d, first:%d, last:%d", (uint8_t *)&v484, 0x1Eu);
            }
            *__error() = v313;
            uint64_t v316 = si_playbackJournal(v453, (uint64_t)v312, (uint64_t)&v508);
            int v297 = v508;
            if (v508)
            {
              int v317 = *__error();
              int v318 = _SILogForLogForCategory(0);
              if (os_log_type_enabled(v318, OS_LOG_TYPE_ERROR))
              {
                v484.dev_t st_dev = 136316418;
                *(void *)&v484.st_mode = "si_playbackJournals";
                WORD2(v484.st_ino) = 1024;
                *(_DWORD *)((char *)&v484.st_ino + 6) = 5798;
                HIWORD(v484.st_uid) = 1024;
                v484.st_gid = v298;
                LOWORD(v484.st_rdev) = 1024;
                *(dev_t *)((char *)&v484.st_rdev + 2) = v428;
                *((_WORD *)&v484.st_rdev + 3) = 1024;
                LODWORD(v484.st_atimespec.tv_sec) = v431;
                WORD2(v484.st_atimespec.tv_sec) = 2080;
                *(__darwin_time_t *)((char *)&v484.st_atimespec.tv_sec + 6) = (__darwin_time_t)&buf;
                _os_log_error_impl(&dword_1BD672000, v318, OS_LOG_TYPE_ERROR, "%s:%d: ParseFailed B idx:%d (%d %d) %s", (uint8_t *)&v484, 0x2Eu);
              }
              *__error() = v317;
            }
            if (v299 <= v316) {
              uint64_t v319 = v316;
            }
            else {
              uint64_t v319 = v299;
            }
            if (v297) {
              uint64_t v320 = v299;
            }
            else {
              uint64_t v320 = v319;
            }
            fd_release(v312);
            __darwin_time_t v292 = v320;
            int v295 = v311;
            uint64_t v294 = v310;
            __int16 v296 = v309;
          }
          else
          {
            if (v315)
            {
              v484.dev_t st_dev = 136315906;
              *(void *)&v484.st_mode = &buf;
              WORD2(v484.st_ino) = 1024;
              *(_DWORD *)((char *)&v484.st_ino + 6) = v437;
              HIWORD(v484.st_uid) = 1024;
              v484.st_gid = v428;
              LOWORD(v484.st_rdev) = 1024;
              *(dev_t *)((char *)&v484.st_rdev + 2) = v431;
              _os_log_impl(&dword_1BD672000, v314, OS_LOG_TYPE_DEFAULT, "Missing %s, syncCount:%d, first:%d, last:%d", (uint8_t *)&v484, 0x1Eu);
            }
            *__error() = v313;
            int v297 = 0;
            __darwin_time_t v292 = v299;
            uint64_t v294 = v310;
            __int16 v296 = v309;
          }
        }
        uint64_t v298 = (v298 + 1);
        uint64_t v299 = v292;
        if (v294 == v298)
        {
          signed int v293 = v428;
          uint64_t v159 = v453;
          goto LABEL_419;
        }
        continue;
      }
    }
    v411 = __si_assert_copy_extra_625(-1);
    uint64_t v377 = v411;
    uint64_t v412 = "";
    if (v411) {
      uint64_t v412 = v411;
    }
    v416 = "0 <= count && count < pathBufferSize";
    int v418 = v412;
    int v379 = 5762;
LABEL_488:
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", v379, v416, v418);
    free(v377);
    if (__valid_fs(-1)) {
      uint64_t v382 = 2989;
    }
    else {
      uint64_t v382 = 3072;
    }
    *(_DWORD *)uint64_t v382 = -559038737;
    abort();
  }
LABEL_436:
  int v336 = (int)__p[0];
  MEMORY[0x1C1882290](LODWORD(__p[0]));
  int v164 = v450;
  if ((v336 & 0x80000000) == 0) {
    close(v336);
  }
LABEL_438:
  if (_os_feature_enabled_impl())
  {
    uint64_t v337 = *(void *)(v159 + 1048);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 0x40000000;
    aBlock[2] = __SIInitIndex_block_invoke_1014;
    aBlock[3] = &__block_descriptor_tmp_1015;
    aBlock[4] = v159;
    si_enqueue_block(v337, aBlock);
  }
LABEL_440:
  if (*(unsigned char *)(v159 + 2064) && (CFDictionaryRef clientstates_file = (const __CFDictionary *)si_read_clientstates_file(v159)) != 0)
  {
    CFDictionaryRef v339 = clientstates_file;
    CFStringRef v340 = (const __CFString *)CFDictionaryGetValue(clientstates_file, @"journalName");
    if (v340)
    {
      CFStringRef v341 = v340;
      CFTypeRef v342 = CFRetain(v340);
      SIReleaseJournalAssertion(v159, v341);
      CFTypeRef v343 = v342;
    }
    else
    {
      CFTypeRef v343 = 0;
      SIReleaseJournalAssertion(v159, 0);
    }
    CFRelease(v339);
    unsigned int v344 = v343;
  }
  else
  {
    unsigned int v344 = 0;
  }
  uint64_t v455 = 0;
  uint64_t v455 = *(void *)(v159 + 2120);
  CFNumberRef v345 = CFNumberCreate(allocator, kCFNumberSInt64Type, &v455);
  if (v345)
  {
    CFNumberRef v346 = v345;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v159 + 72), @"journalSerialNumber", v345);
    CFRelease(v346);
  }
  CFNumberRef v347 = CFNumberCreate(allocator, kCFNumberIntType, (const void *)(v159 + 2336));
  if (v347)
  {
    CFNumberRef v348 = v347;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v159 + 72), @"syncCount", v347);
    CFRelease(v348);
  }
  CFNumberRef v349 = CFNumberCreate(allocator, kCFNumberIntType, (const void *)(v159 + 2340));
  if (v349)
  {
    CFNumberRef v350 = v349;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v159 + 72), @"deferSyncCount", v349);
    CFRelease(v350);
  }
  if (v344)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v159 + 72), @"journalName", v344);
    CFRelease(v344);
  }
  CFUUIDRef v351 = (const __CFUUID *)si_storecookieRef(v159);
  CFStringRef v352 = CFUUIDCreateString(allocator, v351);
  if (v352)
  {
    CFStringRef v353 = v352;
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v159 + 72), @"cookie", v352);
    CFRelease(v353);
  }
  SIPersistClientStateAndMeta(v159, 1);
  if (!v441) {
    si_enqueue_barrier(*(void *)(v159 + 1048), (uint64_t)resumeHoldQueue, *(void *)(*(void *)(v159 + 1152) + 16));
  }
  CFNumberRef v354 = (const __CFNumber *)SICopyProperty(v159, @"YukonRecomputedSizes");
  if (v354)
  {
    CFNumberRef v355 = v354;
    buf.f_bstd::string::size_type size = 0;
    CFNumberGetValue(v354, kCFNumberIntType, &buf);
    f_bstd::string::size_type size = buf.f_bsize;
    CFRelease(v355);
    unsigned int v357 = v448;
    if ((v162 & 0x800) == 0 && f_bsize < 2)
    {
LABEL_462:
      v454[0] = MEMORY[0x1E4F143A8];
      v454[1] = 0x40000000;
      v454[2] = __SIInitIndex_block_invoke_2;
      v454[3] = &__block_descriptor_tmp_1016;
      v454[4] = v159;
      _SIRecomputeSizesWithCallback(v159, 0, v454);
    }
  }
  else
  {
    unsigned int v357 = v448;
    if ((v162 & 0x800) == 0) {
      goto LABEL_462;
    }
  }
  uint64_t v358 = *(void *)&threadData[18 * v465 + 2];
  unsigned int v359 = v464;
  uint64_t v360 = v358 + 320 * v464;
  *(_DWORD *)(v360 + 312) = v164;
  uint64_t v361 = *(void (**)(void))(v360 + 232);
  if (v361) {
    v361(*(void *)(v358 + 320 * v359 + 288));
  }
  dropThreadId(v465, 0, v163);
  if (!v357 && !a9 && !*(void *)(v159 + 6616))
  {
    os_log_type_t v407 = __si_assert_copy_extra_625(-1);
    uint64_t v377 = v407;
    uint64_t v408 = "";
    if (v407) {
      uint64_t v408 = v407;
    }
    v416 = "fs_only||newIndex->dirStore || rebuildDirStore";
    int v418 = v408;
    int v379 = 15068;
    goto LABEL_488;
  }
  if (gTerminating)
  {
    __si_set_error_str(1, "%s:%u: %s", v362, v363, v364, v365, v366, v367, (char)"SpotlightIndex.c");
    return 4294967293;
  }
  else
  {
    uint64_t v368 = *v144;
    if (*v144) {
      uint64_t v369 = *(void **)(v368 + 160);
    }
    else {
      uint64_t v369 = 0;
    }
    si_scheduler_resume(v368, v369, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 15128);
    uint64_t v370 = *(void *)(v159 + 944);
    if (v370) {
      uint64_t v371 = *(void **)(v370 + 160);
    }
    else {
      uint64_t v371 = 0;
    }
    si_scheduler_resume(v370, v371, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 15130);
    return 0;
  }
}

void _si_set_version_property(uint64_t a1, const void *a2, int a3)
{
  uint64_t valuePtr = 5;
  CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberCFIndexType, &valuePtr);
  si_set_property(a1, a2, v6, 1, a3);
  CFRelease(v6);
}

uint64_t si_cacheIndexVersion(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 1384);
  uint64_t v2 = *(void *)(result + 1376);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  uint64_t v8 = __si_cacheIndexVersion_block_invoke;
  uint64_t v9 = &__block_descriptor_tmp_989;
  uint64_t v10 = result;
  if (v2)
  {
    uint64_t v3 = *(unsigned int *)(v2 + 8);
    while ((int)v3 >= 1)
    {
      uint64_t v4 = v3 - 1;
      double result = ((uint64_t (*)(void *, void, uint64_t))v8)(v7, *(void *)(*(void *)v2 + 8 * v3 - 8), 1);
      uint64_t v3 = v4;
      if (!result) {
        return result;
      }
    }
  }
  if (v1)
  {
    uint64_t v5 = *(unsigned int *)(v1 + 8);
    do
    {
      if ((int)v5 < 1) {
        break;
      }
      uint64_t v6 = v5 - 1;
      double result = ((uint64_t (*)(void *, void, void))v8)(v7, *(void *)(*(void *)v1 + 8 * v5 - 8), 0);
      uint64_t v5 = v6;
    }
    while (result);
  }
  return result;
}

void _SICloseIndex(uint64_t a1, int a2)
{
  if (a1 && sContactsIndex == a1) {
    sContactsIndex = 0;
  }
  if (a2)
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 1872));
    if (!gTerminating) {
      SIShutdownIndex(a1, 0, 0);
    }
    while (!*(_DWORD *)(a1 + 2408))
      pthread_cond_wait((pthread_cond_t *)(a1 + 1936), (pthread_mutex_t *)(a1 + 1872));
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1872));
  }
  else
  {
    if ((*(_DWORD *)(a1 + 828) & 8) == 0)
    {
      pthread_mutex_lock(&schlock);
      if (gAllIndexes) {
        CFSetRemoveValue((CFMutableSetRef)gAllIndexes, (const void *)a1);
      }
      pthread_mutex_unlock(&schlock);
    }
    _SIShutdownIndex(a1);
  }
}

void SIShutdownIndex(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  if (!a1) {
    goto LABEL_6;
  }
  if (sContactsIndex == a1) {
    sContactsIndex = 0;
  }
  if (*(unsigned char *)(a1 + 2424) || *(_DWORD *)(a1 + 2408))
  {
LABEL_6:
    if (a2)
    {
      a2(a3, 0xFFFFFFFFLL);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 2424) = 1;
    uint64_t v5 = malloc_type_malloc(0x18uLL, 0xA00402214FCE6uLL);
    v5[1] = a3;
    v5[2] = a2;
    *uint64_t v5 = a1;
    *(_DWORD *)(a1 + 2420) = 1;
    for (uint64_t i = 864; i != 1000; i += 8)
    {
      uint64_t v7 = *(void *)(a1 + i);
      if (v7)
      {
        uint64_t v8 = *(NSObject **)(v7 + 32);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 0x40000000;
        block[2] = __si_scheduler_set_stopped_block_invoke;
        block[3] = &__block_descriptor_tmp_24_1141;
        void block[4] = v7;
        dispatch_async(v8, block);
      }
    }
    *(unsigned char *)(a1 + 2425) = 1;
    if (*(void *)(a1 + 2440)) {
      awakenPreheat(a1);
    }
    uint64_t v9 = *(void *)(a1 + 1160);
    si_enqueue_work(v9, (uint64_t)si_shutdown, (uint64_t)v5);
  }
}

void _SIShutdownIndex(uint64_t a1)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  bzero(v94, 0x400uLL);
  uint64_t v2 = (int *)(a1 + 32);
  int v3 = fcntl(*(_DWORD *)(a1 + 32), 50, v94);
  if (v94[0]) {
    BOOL v4 = v3 < 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v94;
  }
  int v6 = *__error();
  uint64_t v7 = _SILogForLogForCategory(0);
  os_log_type_t v8 = 2 * (gSILogLevels[0] < 4);
  if (os_log_type_enabled(v7, v8))
  {
    *(_DWORD *)statfs buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl(&dword_1BD672000, v7, v8, "Index shut down starting for index at %s.", buf, 0xCu);
  }
  *__error() = v6;
  double Current = CFAbsoluteTimeGetCurrent();
  if (sContactsIndex == a1) {
    sContactsIndex = 0;
  }
  *(_DWORD *)(a1 + 2420) = 1;
  uint64_t v83 = 0;
  uint64_t v84 = &v83;
  uint64_t v85 = 0x2000000000;
  char v86 = 0;
  uint64_t v10 = *(void *)(a1 + 1384);
  uint64_t v11 = *(void *)(a1 + 1376);
  v79[0] = MEMORY[0x1E4F143A8];
  v79[1] = 0x40000000;
  CFNumberRef v80 = ___SIShutdownIndex_block_invoke;
  uint64_t v81 = &unk_1E6342378;
  uint64_t v82 = &v83;
  if (v10 && *(_DWORD *)(v10 + 8))
  {
    uint64_t v12 = 0;
    while (((unsigned int (*)(void *, void, void))v80)(v79, *(void *)(*(void *)v10 + 8 * v12), 0))
    {
      if (++v12 >= (unint64_t)*(unsigned int *)(v10 + 8)) {
        goto LABEL_16;
      }
    }
  }
  else
  {
LABEL_16:
    if (v11 && *(_DWORD *)(v11 + 8))
    {
      unint64_t v13 = 0;
      do
      {
        if (!((unsigned int (*)(void *, void, uint64_t))v80)(v79, *(void *)(*(void *)v11 + 8 * v13), 1))break; {
        ++v13;
        }
      }
      while (v13 < *(unsigned int *)(v11 + 8));
    }
  }
  if (!*((unsigned char *)v84 + 24))
  {
    si_scheduler_boost_and_forget(*(void *)(a1 + 944));
    si_scheduler_boost_and_forget(*(void *)(a1 + 864));
    si_scheduler_boost_and_forget(*(void *)(a1 + 872));
    si_scheduler_boost_and_forget(*(void *)(a1 + 896));
    si_scheduler_boost_and_forget(*(void *)(a1 + 912));
    si_scheduler_boost_and_forget(*(void *)(a1 + 888));
    si_scheduler_boost_and_forget(*(void *)(a1 + 880));
    si_scheduler_boost_and_forget(*(void *)(a1 + 952));
    _SIShutdownIndexSchedulers(a1, 0, 0, Current);
    unsigned int v78 = 0;
    uint64_t v14 = *(void *)(a1 + 6584);
    uint64_t v15 = *(void *)(a1 + 1184);
    uint64_t v16 = *(void *)(a1 + 1384);
    if (v15)
    {
      uint64_t v17 = *(void *)(a1 + 1376);
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 1376);
      if (*(_OWORD *)(a1 + 1376) == 0)
      {
LABEL_59:
        SIActivityJournalClose((os_unfair_lock_s *)(a1 + 2184));
        int v45 = *(atomic_uint **)(a1 + 2184);
        *(void *)(a1 + 2184) = 0;
        if (v45) {
          fd_release(v45);
        }
        if (*(unsigned char *)(a1 + 2064))
        {
          int v46 = *(_DWORD *)(a1 + 6956);
          int v47 = *(atomic_uint **)(a1 + 2096);
          if (v47 && atomic_fetch_add(v47, 0xFFFFFFFF) == 1) {
            _si_mobile_journal_finalize((uint64_t)v47, v46 == 0);
          }
          *(void *)(a1 + 2096) = 0;
          unint64_t v48 = *(atomic_uint **)(a1 + 2104);
          if (v48 && atomic_fetch_add(v48, 0xFFFFFFFF) == 1) {
            _si_mobile_journal_finalize((uint64_t)v48, 1);
          }
          *(void *)(a1 + 2104) = 0;
          unsigned int v49 = *(atomic_uint **)(a1 + 2112);
          if (v49 && atomic_fetch_add(v49, 0xFFFFFFFF) == 1) {
            _si_mobile_journal_finalize((uint64_t)v49, 1);
          }
          *(void *)(a1 + 2112) = 0;
        }
        unsigned int v50 = *(atomic_uint **)(a1 + 2312);
        *(void *)(a1 + 2312) = 0;
        if (v50) {
          fd_release(v50);
        }
        doc_store_close(*(DocStore **)(a1 + 1288));
        *(void *)(a1 + 1288) = 0;
        *(_OWORD *)statfs buf = *(_OWORD *)v2;
        *(_DWORD *)(a1 + 32) = -1;
        int v51 = *(_DWORD *)buf;
        if (*(_DWORD *)buf != -1)
        {
          if (*(void *)&buf[8])
          {
            guarded_close_np();
            int v52 = *(_DWORD *)buf;
          }
          else
          {
            close(*(int *)buf);
            int v52 = v51;
          }
          unregisterForCloning(v52);
        }
        int v53 = *(_DWORD *)(a1 + 48);
        *(_DWORD *)(a1 + 48) = -1;
        if (v53 != -1) {
          close(v53);
        }
        int v54 = *__error();
        int v55 = _SILogForLogForCategory(0);
        os_log_type_t v56 = 2 * (gSILogLevels[0] < 4);
        if (os_log_type_enabled(v55, v56))
        {
          CFAbsoluteTime v57 = CFAbsoluteTimeGetCurrent();
          *(_DWORD *)statfs buf = 136315394;
          *(void *)&uint8_t buf[4] = v5;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(double *)&buf[14] = v57 - Current;
          _os_log_impl(&dword_1BD672000, v55, v56, "Index shut down finished for index at %s after %f seconds.", buf, 0x16u);
        }
        *__error() = v54;
        goto LABEL_84;
      }
    }
    uint64_t v72 = 0;
    uint64_t v75 = 257;
    uint64_t v73 = v15;
    uint64_t v74 = a1;
    uint64_t v18 = v17;
    long long v71 = 0u;
    uint64_t v76 = v16;
    uint64_t v77 = v17;
    CFBooleanRef v93 = 0;
    long long v91 = 0u;
    long long v92 = 0u;
    memset(buf, 0, sizeof(buf));
    if (gTerminating) {
      *(_DWORD *)(a1 + 2412) = 1;
    }
    do
    {
      uint64_t v19 = v16;
      uint64_t v20 = v18;
      __dmb(0xBu);
      uint64_t v16 = *(void *)(a1 + 1384);
      uint64_t v18 = *(void *)(a1 + 1376);
    }
    while (v19 != v16 || v20 != v18);
    if (!fd_setDir(*v2, (int *)&v78))
    {
      int v29 = *__error();
      uint64_t v30 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        int v58 = *__error();
        *(_DWORD *)uint64_t valuePtr = 136315906;
        *(void *)&uint8_t valuePtr[4] = "_SIShutdownIndex";
        *(_WORD *)&valuePtr[12] = 1024;
        *(_DWORD *)&valuePtr[14] = 15907;
        *(_WORD *)&valuePtr[18] = 1024;
        *(_DWORD *)&valuePtr[20] = v58;
        *(_WORD *)&valuePtr[24] = 2080;
        *(void *)&valuePtr[26] = v5;
        _os_log_error_impl(&dword_1BD672000, v30, OS_LOG_TYPE_ERROR, "%s:%d: setDir 2 error %d (%s)", valuePtr, 0x22u);
      }
      *__error() = v29;
      uint64_t v31 = *(void *)(a1 + 1384);
      uint64_t v32 = *(void *)(a1 + 1376);
      *(_OWORD *)&valuePtr[32] = v91;
      long long v88 = v92;
      BOOL v89 = v93;
      *(_OWORD *)uint64_t valuePtr = *(_OWORD *)buf;
      *(_OWORD *)&valuePtr[16] = *(_OWORD *)&buf[16];
      ContentIndexCloseIndexBulk_Step1(0, v31, v32, (long long *)valuePtr, v14);
      CIMetaInfoClose(a1 + 1192);
      goto LABEL_56;
    }
    int v22 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
    unsigned int v70 = 0;
    unint64_t v69 = 0;
    unsigned int v68 = 0;
    unint64_t v23 = setThreadIdAndInfo(*v2, sFdExceptionCallbacks, 0, 1, v22);
    unsigned int v70 = v23;
    unsigned int v68 = v25;
    unint64_t v69 = __PAIR64__(HIDWORD(v23), v24);
    uint64_t v26 = *(void *)&threadData[18 * v23 + 2];
    uint64_t v27 = v26 + 320 * HIDWORD(v23);
    *(unsigned char *)(v27 + 216) = 0;
    int v59 = *(_DWORD *)(v27 + 312);
    uint64_t v28 = *(void (**)(void))(v27 + 224);
    if (v28) {
      v28(*(void *)(v26 + 320 * HIDWORD(v23) + 288));
    }
    unsigned int v67 = v70;
    unsigned int v66 = HIDWORD(v69);
    unint64_t v65 = __PAIR64__(v69, v68);
    if (_setjmp((int *)v27))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t valuePtr = 0;
        _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", valuePtr, 2u);
      }
      *(_DWORD *)(v27 + 312) = v59;
      CIOnThreadCleanUpReset(v65);
      dropThreadId(v67, 1, v22);
      CICleanUpReset(v67, HIDWORD(v65));
LABEL_56:
      int v41 = *__error();
      uint64_t v42 = _SILogForLogForCategory(0);
      os_log_type_t v43 = 2 * (gSILogLevels[0] < 4);
      if (os_log_type_enabled(v42, v43))
      {
        CFAbsoluteTime v44 = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)uint64_t valuePtr = 136315394;
        *(void *)&uint8_t valuePtr[4] = v5;
        *(_WORD *)&valuePtr[12] = 2048;
        *(double *)&valuePtr[14] = v44 - Current;
        _os_log_impl(&dword_1BD672000, v42, v43, "Index closed for %s after %f seconds.", valuePtr, 0x16u);
      }
      *__error() = v41;
      goto LABEL_59;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)(a1 + 2431), memory_order_acquire) & 1) == 0)
    {
      if (!*(void *)(a1 + 1184))
      {
        uint64_t v35 = a1 + 1192;
        goto LABEL_50;
      }
      *(void *)uint64_t valuePtr = 0;
      *(void *)uint64_t valuePtr = *(void *)(a1 + 2128);
      CFNumberRef v33 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, valuePtr);
      if (v33)
      {
        CFNumberRef v34 = v33;
        si_set_property(a1, @"ConsumedJournalSerialNumber", v33, 1, 0);
        CFRelease(v34);
      }
      _si_store_propery_cache(a1, 0, 1);
      si_storesizes(a1, 0);
    }
    uint64_t v35 = a1 + 1192;
    if (*(void *)(a1 + 1184))
    {
      long long v60 = xmmword_1F1813340;
      long long v61 = *(_OWORD *)&off_1F1813350;
      long long v62 = xmmword_1F1813360;
      long long v63 = *(_OWORD *)off_1F1813370;
      CFTypeID v64 = &v71;
LABEL_51:
      ContentIndexCloseIndexBulk_Step1(v35, v19, v20, &v60, v14);
      CIMetaInfoClose(v35);
      int v36 = v78;
      MEMORY[0x1C1882290](v78);
      if ((v36 & 0x80000000) == 0) {
        close(v36);
      }
      uint64_t v37 = *(void *)&threadData[18 * v67 + 2];
      unsigned int v38 = v66;
      uint64_t v39 = v37 + 320 * v66;
      *(_DWORD *)(v39 + 312) = v59;
      uint64_t v40 = *(void (**)(void))(v39 + 232);
      if (v40) {
        v40(*(void *)(v37 + 320 * v38 + 288));
      }
      dropThreadId(v67, 0, v22);
      goto LABEL_56;
    }
LABEL_50:
    long long v62 = v91;
    long long v63 = v92;
    CFTypeID v64 = v93;
    long long v60 = *(_OWORD *)buf;
    long long v61 = *(_OWORD *)&buf[16];
    goto LABEL_51;
  }
LABEL_84:
  _Block_object_dispose(&v83, 8);
}

void _SIShutdownIndexSchedulers(uint64_t a1, char a2, int a3, double a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  bzero(v38, 0x400uLL);
  BOOL v9 = fcntl(*(_DWORD *)(a1 + 32), 50, v38) < 0 || v38[0] == 0;
  uint64_t v10 = dispatch_group_create();
  pthread_mutex_lock(&sGameModeMutex);
  pthread_cond_broadcast(&sGameModeCond);
  pthread_mutex_unlock(&sGameModeMutex);
  int v11 = *(_DWORD *)(a1 + 6964);
  uint64_t v12 = 124;
  do
  {
    if (!v11 || v12 == 119) {
      si_scheduler_stop(*(void *)(a1 + 8 * v12), (uint64_t)v10);
    }
    unint64_t v13 = v12 - 107;
    --v12;
  }
  while (v13 > 1);
  *(unsigned char *)(a1 + 2425) = 1;
  if (*(void *)(a1 + 2440)) {
    awakenPreheat(a1);
  }
  dispatch_group_wait(v10, 0xFFFFFFFFFFFFFFFFLL);
  int v14 = *__error();
  uint64_t v15 = _SILogForLogForCategory(0);
  os_log_type_t v16 = 2 * (gSILogLevels[0] < 4);
  if (os_log_type_enabled(v15, v16))
  {
    if (v9) {
      uint64_t v17 = 0;
    }
    else {
      uint64_t v17 = v38;
    }
    *(_DWORD *)statfs buf = 136315394;
    *(void *)&uint8_t buf[4] = v17;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = CFAbsoluteTimeGetCurrent() - a4;
    _os_log_impl(&dword_1BD672000, v15, v16, "Shedulers stopped for %s after %f seconds.", buf, 0x16u);
  }
  *__error() = v14;
  if (a3)
  {
    for (uint64_t i = 1008; i != 1168; i += 8)
    {
      if (i == 1160 && (a2 & 1) != 0) {
        break;
      }
      uint64_t v19 = *(void *)(a1 + i);
      if (v19)
      {
        if (*(void *)v19) {
          si_scheduler_remove_workqueue(*(void *)v19, *(void **)(a1 + i));
        }
        if (i == 1144) {
          dispatch_resume(*(dispatch_object_t *)(v19 + 16));
        }
        si_workqueue_drain(v19);
      }
    }
    cleanup_retiring(a1);
  }
  else
  {
    uint64_t v20 = malloc_type_calloc(0x14uLL, 8uLL, 0x2004093837F09uLL);
    for (int j = 0; j != 20; ++j)
    {
      if (j == 19) {
        char v22 = a2;
      }
      else {
        char v22 = 0;
      }
      BOOL v23 = j == 11 || v11 == 0;
      if (v23 && (v22 & 1) == 0)
      {
        if (j == 17)
        {
          pthread_mutex_lock((pthread_mutex_t *)(a1 + 1312));
          si_handleWorkQueue(a1, (uint64_t)v20, v10, 17);
          pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1312));
        }
        else
        {
          si_handleWorkQueue(a1, (uint64_t)v20, v10, j);
        }
      }
    }
    si_cancel_activectx((void *)a1);
    memcpy(buf, (const void *)(a1 + 864), sizeof(buf));
    uint64_t v24 = 0;
    uint64_t v25 = *(unsigned int *)(a1 + 1396);
    uint64_t v26 = *(unsigned int *)(a1 + 1400);
    do
    {
      uint64_t v27 = *(void *)&buf[v24];
      if (v27) {
        atomic_fetch_add((atomic_uint *volatile)(v27 + 88), 1u);
      }
      v24 += 8;
    }
    while (v24 != 136);
    if (!v11) {
      cleanup_retiring(a1);
    }
    initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
    int v29 = dispatch_queue_create("com.apple.spotlight.index.shutdown.shortlived", initially_inactive);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___SIShutdownIndexSchedulers_block_invoke;
    block[3] = &__block_descriptor_tmp_1092;
    void block[4] = v20;
    memcpy(v31, buf, sizeof(v31));
    uint64_t v32 = v10;
    CFNumberRef v33 = v29;
    int v36 = v11;
    uint64_t v34 = v26;
    uint64_t v35 = v25;
    dispatch_group_notify(v10, v29, block);
    dispatch_activate(v29);
    dispatch_release(v29);
  }
}

void awakenPreheat(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v2 = *__error();
  int v3 = _SILogForLogForCategory(3);
  os_log_type_t v4 = 2 * (dword_1E9FC90B0 < 4);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(a1 + 896);
    int v16 = 134217984;
    uint64_t v17 = v5;
    _os_log_impl(&dword_1BD672000, v3, v4, "awakenPreheat entered for %p", (uint8_t *)&v16, 0xCu);
  }
  *__error() = v2;
  int v6 = *(void **)(a1 + 2440);
  if (v6
    && (uint64_t v7 = *(void **)(a1 + 2440),
        atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 2440), (unint64_t *)&v7, 0, memory_order_relaxed, memory_order_relaxed), v7 == v6))
  {
    int v8 = *__error();
    BOOL v9 = _SILogForLogForCategory(3);
    os_log_type_t v10 = 2 * (dword_1E9FC90B0 < 4);
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = *(void *)(a1 + 896);
      int v16 = 134217984;
      uint64_t v17 = v11;
      _os_log_impl(&dword_1BD672000, v9, v10, "awakenPreheat continued for %p", (uint8_t *)&v16, 0xCu);
    }
    *__error() = v8;
    si_scheduler_resume_with_token(v6);
  }
  else
  {
    int v12 = *__error();
    unint64_t v13 = _SILogForLogForCategory(3);
    os_log_type_t v14 = 2 * (dword_1E9FC90B0 < 4);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *(void *)(a1 + 896);
      int v16 = 134217984;
      uint64_t v17 = v15;
      _os_log_impl(&dword_1BD672000, v13, v14, "awakenPreheat skipped for %p", (uint8_t *)&v16, 0xCu);
    }
    *__error() = v12;
  }
}

uint64_t cleanup_retiring(uint64_t a1)
{
  int v2 = *(void **)(a1 + 1168);
  *(void *)(a1 + 1168) = 0;
  int v3 = (pthread_mutex_t *)(a1 + 1312);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1312));
  if (v2)
  {
    do
    {
      os_log_type_t v4 = (void *)*v2;
      si_scheduler_remove_workqueue(*(void *)(a1 + 872), (void *)v2[1]);
      si_workqueue_drain(v2[1]);
      si_workqueue_destroy(v2[1]);
      free(v2);
      int v2 = v4;
    }
    while (v4);
  }
  return pthread_mutex_unlock(v3);
}

void si_handleWorkQueue(uint64_t a1, uint64_t a2, NSObject *a3, int a4)
{
  uint64_t v4 = a1 + 8 * a4;
  uint64_t v5 = *(void *)(v4 + 1008);
  *(void *)(v4 + 1008) = 0;
  if (v5)
  {
    if (*(void *)v5) {
      si_scheduler_remove_workqueue(*(void *)v5, (void *)v5);
    }
    if (a4 == 17) {
      dispatch_resume(*(dispatch_object_t *)(v5 + 16));
    }
    si_workqueue_drain(v5);
    dispatch_group_enter(a3);
    dispatch_retain(a3);
    BOOL v9 = *(NSObject **)(v5 + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __si_handleWorkQueue_block_invoke;
    block[3] = &__block_descriptor_tmp_1093;
    void block[4] = a3;
    dispatch_barrier_async(v9, block);
    *(void *)(a2 + 8 * a4) = v5;
  }
}

void __si_handleWorkQueue_block_invoke(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  int v2 = *(NSObject **)(a1 + 32);
  dispatch_release(v2);
}

int *si_shutdown(uint64_t *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v2 = *__error();
  int v3 = _SILogForLogForCategory(3);
  os_log_type_t v4 = 2 * (dword_1E9FC90B0 < 4);
  if (os_log_type_enabled(v3, v4))
  {
    LOWORD(v15) = 0;
    _os_log_impl(&dword_1BD672000, v3, v4, "Shutdown started", (uint8_t *)&v15, 2u);
  }
  *__error() = v2;
  double Current = CFAbsoluteTimeGetCurrent();
  if (*a1)
  {
    pthread_mutex_lock((pthread_mutex_t *)(*a1 + 1872));
    uint64_t v6 = *a1;
    if (!*(_DWORD *)(*a1 + 2408))
    {
      _SIShutdownIndex(v6);
      uint64_t v8 = *a1;
      *(_DWORD *)(*a1 + 2408) = 1;
      BOOL v9 = (void (*)(uint64_t, void))a1[2];
      if (v9)
      {
        v9(a1[1], 0);
        pthread_cond_signal((pthread_cond_t *)(*a1 + 1936));
        pthread_mutex_unlock((pthread_mutex_t *)(*a1 + 1872));
        goto LABEL_10;
      }
      pthread_cond_signal((pthread_cond_t *)(v8 + 1936));
      uint64_t v6 = *a1;
    }
    pthread_mutex_unlock((pthread_mutex_t *)(v6 + 1872));
  }
  uint64_t v7 = (void (*)(uint64_t, uint64_t))a1[2];
  if (v7) {
    v7(a1[1], 0xFFFFFFFFLL);
  }
LABEL_10:
  free(a1);
  int v10 = *__error();
  uint64_t v11 = _SILogForLogForCategory(3);
  os_log_type_t v12 = 2 * (dword_1E9FC90B0 < 4);
  if (os_log_type_enabled(v11, v12))
  {
    CFAbsoluteTime v13 = CFAbsoluteTimeGetCurrent();
    int v15 = 134217984;
    double v16 = v13 - Current;
    _os_log_impl(&dword_1BD672000, v11, v12, "Shutdown ended after %f seconds", (uint8_t *)&v15, 0xCu);
  }
  double result = __error();
  int *result = v10;
  return result;
}

uint64_t __si_cacheIndexVersion_block_invoke(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 1;
  }
  uint64_t result = 0;
  *(_DWORD *)(*(void *)(a1 + 32) + 6924) = *(_DWORD *)(a2 + 4);
  return result;
}

uint64_t _si_init_localized_terms(uint64_t a1)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 6640))
  {
    uint64_t v40 = __si_assert_copy_extra_625(-1);
    int v41 = v40;
    uint64_t v42 = "";
    if (v40) {
      uint64_t v42 = v40;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 30630, "!ref->uniqueLocalizedTerms", v42);
    free(v41);
    if (__valid_fs(-1)) {
      uint64_t v43 = 2989;
    }
    else {
      uint64_t v43 = 3072;
    }
    *(_DWORD *)uint64_t v43 = -559038737;
    abort();
  }
  int v2 = fd_create_protected(*(_DWORD *)(a1 + 32), "tmp.spotlight.loc", 0, 0);
  int v3 = v2;
  os_log_type_t v4 = (atomic_uint *)v2;
  if (*(unsigned char *)(a1 + 2065)) {
    uint64_t v5 = 122;
  }
  else {
    uint64_t v5 = 90;
  }
  uint64_t v52 = 0;
  int v6 = _fd_acquire_fd((uint64_t)v2, &v52);
  memset(&v51, 0, sizeof(v51));
  int v7 = fstat(v6, &v51);
  st_std::string::size_type size = v51.st_size;
  _fd_release_fd(v3, v6, 0, v52);
  if (v7 == -1 || st_size == 0)
  {
    fd_release(v4);
    os_log_type_t v4 = 0;
  }
  v50[0] = MEMORY[0x1E4F143A8];
  v50[1] = 0x40000000;
  v50[2] = ___si_init_localized_terms_block_invoke;
  v50[3] = &__block_descriptor_tmp_1032;
  v50[4] = a1;
  if (v4)
  {
    long long v56 = 0u;
    long long v57 = 0u;
    memset(v55, 0, sizeof(v55));
    store_stream_init((uint64_t)v55, v4, 0);
    if (!*(_DWORD *)&v55[16] && *(int *)(a1 + 1276) >= 84)
    {
      CFDataRef v10 = (const __CFData *)SICopyProperty(a1, @"database.localizedtermsuuid");
      if (v10)
      {
        CFDataRef v11 = v10;
        if (CFDataGetLength(v10) == 16 && store_stream_read_vint32_671((uint64_t)v55) == 13)
        {
          v59.locatiouint64_t n = 0;
          *(void *)buffer = 0;
          uint64_t v54 = 0;
          v59.length = 16;
          CFDataGetBytes(v11, v59, buffer);
          store_stream_read_bytes_672((unsigned int *)v55, (char *)(a1 + 6848), 0x10uLL);
          if (!uuid_compare(buffer, (const unsigned __int8 *)(a1 + 6848)))
          {
            int updated = TermUpdateSetRestore((uint64_t)v55, 0, 0, 0, 1, v5, 0, 0, 0, 0, v50);
            *(void *)(a1 + 6640) = updated;
            if (updated)
            {
              int v31 = *__error();
              uint64_t v32 = _SILogForLogForCategory(0);
              os_log_type_t v33 = 2 * (gSILogLevels[0] < 4);
              if (os_log_type_enabled(v32, v33))
              {
                WORD2(v49) = 0;
                _os_log_impl(&dword_1BD672000, v32, v33, "restored localized terms", (uint8_t *)&v49 + 4, 2u);
              }
              *__error() = v31;
              CFRelease(v11);
              store_stream_destroy((uint64_t)v55);
              fd_release(v4);
              char v12 = 1;
              goto LABEL_21;
            }
          }
        }
        CFRelease(v11);
      }
    }
    store_stream_destroy((uint64_t)v55);
    fd_release(v4);
  }
  *(void *)(a1 + 6640) = TermUpdateSetCreate(0, 0, 0, 1, v5, 0, 0, v50);
  char v12 = 0;
LABEL_21:
  memset(v55, 0, 24);
  pthread_rwlockattr_init((pthread_rwlockattr_t *)v55);
  pthread_rwlock_init((pthread_rwlock_t *)(a1 + 6648), (const pthread_rwlockattr_t *)v55);
  pthread_rwlockattr_destroy((pthread_rwlockattr_t *)v55);
  uint64_t v13 = *(void *)(a1 + 6640);
  *(void *)(v13 + 280) = a1 + 6648;
  *(void *)(v13 + 608) = getPropertyStringCallback;
  *(unsigned char *)(a1 + 6864) = 0;
  int v14 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v15 = setThreadIdAndInfo(*(_DWORD *)(a1 + 32), sFdExceptionCallbacks, 0, 1, v14);
  *(_DWORD *)buffer = HIDWORD(v15);
  *(_DWORD *)int v55 = v15;
  unint64_t v49 = __PAIR64__(v16, v17);
  uint64_t v18 = *(void *)&threadData[18 * v15 + 2];
  uint64_t v19 = v18 + 320 * HIDWORD(v15);
  *(unsigned char *)(v19 + 216) = 0;
  int v20 = *(_DWORD *)(v19 + 312);
  uint64_t v21 = *(void (**)(void))(v19 + 224);
  if (v21) {
    v21(*(void *)(v18 + 320 * HIDWORD(v15) + 288));
  }
  unsigned int v48 = *(_DWORD *)v55;
  unsigned int v47 = *(_DWORD *)buffer;
  unint64_t v46 = v49;
  if (_setjmp((int *)v19))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)statfs buf = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
    }
    *(_DWORD *)(v19 + 312) = v20;
    CIOnThreadCleanUpReset(v46);
    dropThreadId(v48, 1, v14);
    return CICleanUpReset(v48, HIDWORD(v46));
  }
  if (*(int *)(a1 + 1276) < 84) {
    goto LABEL_52;
  }
  uint64_t v23 = *(void *)(a1 + 1184);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___si_init_localized_terms_block_invoke_1036;
  aBlock[3] = &__block_descriptor_tmp_1037;
  aBlock[4] = a1;
  if (*(_DWORD *)v23 == 1685287992) {
    *(void *)(v23 + 968) = _Block_copy(aBlock);
  }
  if (v12) {
    goto LABEL_52;
  }
  uint64_t v24 = *(void *)(a1 + 1184);
  if (*(_DWORD *)v24 != 1685287992) {
    goto LABEL_52;
  }
  uint64_t v25 = *(void *)(a1 + 1184);
  if (!*(void *)(v24 + 968)) {
    goto LABEL_52;
  }
  uint64_t v26 = *(void *)(v25 + 912);
  if ((*(unsigned char *)(v25 + 804) & 0x14) == 0)
  {
    if (*(_DWORD *)(v26 + 56) >= 2u)
    {
      unsigned int v29 = 1;
      do
      {
        (*(void (**)(void))(*(void *)(v25 + 968) + 16))();
        ++v29;
      }
      while (v29 < *(_DWORD *)(v26 + 56));
    }
    goto LABEL_52;
  }
  if (!v26) {
    goto LABEL_52;
  }
  int v27 = *(_DWORD *)(v26 + 216);
  switch(v27)
  {
    case -270471200:
      unint64_t v28 = *(void *)(v26 + 376);
LABEL_49:
      if (v28 >= 2)
      {
        int v34 = 2;
        do
        {
          unsigned int v35 = v34;
          (*(void (**)(void))(*(void *)(v25 + 968) + 16))();
          int v34 = v35 + 1;
        }
        while (v28 > v35);
      }
      break;
    case 1684300900:
      unint64_t v28 = *(void *)(v26 + 4504);
      goto LABEL_49;
    case 842150450:
      unint64_t v28 = (*(_DWORD *)(v26 + 1388) - 1) + 1;
      goto LABEL_49;
  }
LABEL_52:
  uint64_t v36 = *(void *)&threadData[18 * v48 + 2];
  unsigned int v37 = v47;
  uint64_t v38 = v36 + 320 * v47;
  *(_DWORD *)(v38 + 312) = v20;
  uint64_t v39 = *(void (**)(void))(v38 + 232);
  if (v39) {
    v39(*(void *)(v36 + 320 * v37 + 288));
  }
  return dropThreadId(v48, 0, v14);
}

uint64_t _SIInitSDB(uint64_t a1, __int16 a2, int a3)
{
  uint64_t v375 = *MEMORY[0x1E4F143B8];
  int v6 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v7 = setThreadIdAndInfo(-1, (long long *)sSDBExceptionCallbacks, *(void *)(a1 + 1184), 0x40000000, v6);
  unsigned int v367 = HIDWORD(v7);
  unsigned int v368 = v7;
  unsigned int v365 = v9;
  unsigned int v366 = v8;
  uint64_t v10 = *(void *)&threadData[18 * v7 + 2];
  uint64_t v11 = v10 + 320 * HIDWORD(v7);
  *(unsigned char *)(v11 + 216) = 0;
  int v12 = *(_DWORD *)(v11 + 312);
  uint64_t v13 = *(void (**)(void))(v11 + 224);
  if (v13) {
    v13(*(void *)(v10 + 320 * HIDWORD(v7) + 288));
  }
  unsigned int v364 = v368;
  unsigned int v363 = v367;
  unsigned int v362 = v366;
  unsigned int v361 = v365;
  int v14 = _setjmp((int *)v11);
  unint64_t v15 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (v14)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)statfs buf = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
    }
    *(_DWORD *)(v11 + 312) = v12;
    CIOnThreadCleanUpReset(v361);
    dropThreadId(v364, 1, v6);
    CICleanUpReset(v364, v362);
    goto LABEL_617;
  }
  unsigned int v16 = *(void **)(a1 + 1184);
  v360[0] = MEMORY[0x1E4F143A8];
  v360[1] = 0x40000000;
  v360[2] = ___SIInitSDB_block_invoke;
  v360[3] = &__block_descriptor_tmp_1039;
  v360[4] = a1;
  v358[4] = a1;
  v359[0] = MEMORY[0x1E4F143A8];
  v359[1] = 0x40000000;
  v359[2] = ___SIInitSDB_block_invoke_2;
  v359[3] = &__block_descriptor_tmp_1041;
  v359[4] = a1;
  v358[0] = MEMORY[0x1E4F143A8];
  v358[1] = 0x40000000;
  v358[2] = ___SIInitSDB_block_invoke_3;
  v358[3] = &__block_descriptor_tmp_1042;
  if (*(_DWORD *)v16 != 1685287992)
  {
    uint64_t v338 = __si_assert_copy_extra_329();
    CFDictionaryRef v339 = v338;
    CFStringRef v340 = "";
    if (v338) {
      CFStringRef v340 = v338;
    }
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 233, v340);
LABEL_631:
    free(v339);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  db2_set_garbage_collector(v16, v360, v359, v358);
  unsigned int v17 = *(int **)(a1 + 1184);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___SIInitSDB_block_invoke_4;
  aBlock[3] = &__block_descriptor_tmp_1044;
  aBlock[4] = a1;
  if (*v17 != 1685287992)
  {
    int v341 = *__error();
    CFTypeRef v342 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v342, OS_LOG_TYPE_ERROR))
    {
      int v343 = *v17;
      *(_DWORD *)statfs buf = 136315650;
      uint64_t v370 = "db_set_dirty_callback";
      __int16 v371 = 1024;
      int v372 = 235;
      __int16 v373 = 1024;
      int v374 = v343;
      _os_log_error_impl(&dword_1BD672000, v342, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v341;
    unsigned int v344 = __si_assert_copy_extra_329();
    CFDictionaryRef v339 = v344;
    CFNumberRef v345 = "";
    if (v344) {
      CFNumberRef v345 = v344;
    }
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 235, v345);
    goto LABEL_631;
  }
  uint64_t v18 = _Block_copy(aBlock);
  uint64_t v19 = (const void *)*((void *)v17 + 104);
  if (v19) {
    _Block_release(v19);
  }
  *((void *)v17 + 104) = v18;
  uint64_t v20 = *(void *)(a1 + 6616);
  if (v20)
  {
    v356[0] = MEMORY[0x1E4F143A8];
    v356[1] = 0x40000000;
    v356[2] = ___SIInitSDB_block_invoke_5;
    v356[3] = &__block_descriptor_tmp_1045;
    v356[4] = a1;
    uint64_t v21 = _Block_copy(v356);
    char v22 = *(const void **)(v20 + 4640);
    if (v22) {
      _Block_release(v22);
    }
    *(void *)(v20 + 4640) = v21;
  }
  int v351 = v6;
  uint64_t v23 = *(void *)(a1 + 1384);
  uint64_t v24 = *(void *)(a1 + 1376);
  v352[0] = MEMORY[0x1E4F143A8];
  v352[1] = 0x40000000;
  CFStringRef v353 = ___SIInitSDB_block_invoke_6;
  CFNumberRef v354 = &__block_descriptor_tmp_1047;
  uint64_t v355 = a1;
  if (v23 && *(_DWORD *)(v23 + 8))
  {
    uint64_t v25 = 0;
    while (((unsigned int (*)(void *, void, void))v353)(v352, *(void *)(*(void *)v23 + 8 * v25), 0))
    {
      if (++v25 >= (unint64_t)*(unsigned int *)(v23 + 8)) {
        goto LABEL_20;
      }
    }
  }
  else
  {
LABEL_20:
    if (v24 && *(_DWORD *)(v24 + 8))
    {
      unint64_t v26 = 0;
      do
      {
        if (!((unsigned int (*)(void *, void, uint64_t))v353)(v352, *(void *)(*(void *)v24 + 8 * v26), 1))break; {
        ++v26;
        }
      }
      while (v26 < *(unsigned int *)(v24 + 8));
    }
  }
  int v27 = a3;
  if (*(unsigned char *)(a1 + 2064))
  {
    CFDictionaryRef v28 = (const __CFDictionary *)SICopyProperty(a1, @"GroupAssignments");
    CFAllocatorRef v29 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (v28)
    {
      CFDictionaryRef v30 = v28;
      *(void *)(a1 + 2080) = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v28);
      CFRelease(v30);
    }
    else
    {
      *(void *)(a1 + 2080) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    CFMutableDictionaryRef Mutable = CFBitVectorCreateMutable(v29, 256);
    *(void *)(a1 + 2088) = Mutable;
    CFBitVectorSetCount(Mutable, 256);
    CFBitVectorSetAllBits(*(CFMutableBitVectorRef *)(a1 + 2088), 0);
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 2080), (CFDictionaryApplierFunction)updateUsedBites, *(void **)(a1 + 2088));
  }
  uint64_t v32 = (int **)(a1 + 1184);
  *(_DWORD *)(a1 + 2052) = db_create_id_for_field(*(_DWORD **)(a1 + 1184), "_kMDItemExternalID", 0x2308u, 11);
  *(_DWORD *)(a1 + 2056) = db_create_id_for_field(*(_DWORD **)(a1 + 1184), "_kMDItemBundleID", 0x4318u, 11);
  *(_DWORD *)(a1 + 2048) = db_create_id_for_field(*(_DWORD **)(a1 + 1184), "_kMDItemOwnerUserID", 0x308u, 7);
  *(_DWORD *)(a1 + 2060) = db_create_id_for_field(*(_DWORD **)(a1 + 1184), "_kMDItemDomainIdentifier", 0x4300u, 11);
  *(_DWORD *)(a1 + 2024) = db_create_id_for_field(*(_DWORD **)(a1 + 1184), "_kMDItemFileName", 0x308u, 11);
  *(_DWORD *)(a1 + 1992) = db_create_id_for_field(*(_DWORD **)(a1 + 1184), "kMDItemContentTypeTree", 0x330u, 11);
  *(_DWORD *)(a1 + 1996) = db_create_id_for_field(*(_DWORD **)(a1 + 1184), "kMDItemSupportFileType", 0x330u, 11);
  *(_DWORD *)(a1 + 1988) = db_create_id_for_field(*(_DWORD **)(a1 + 1184), "kMDItemContentType", 0x310u, 11);
  *(_DWORD *)(a1 + 2000) = db_create_id_for_field(*(_DWORD **)(a1 + 1184), "_kMDItemGroupId", 0x108u, 2);
  if (v27)
  {
    if ((a2 & 0x100) != 0)
    {
      uint64_t v175 = "_kMDItemStorageSize";
    }
    else
    {
      if (!*(void *)(a1 + 6600))
      {
        CFAllocatorRef v33 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        int v34 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0);
        unsigned int v35 = *v32;
        int id_for_string = db_get_id_for_string(*v32, "public.message");
        if (id_for_string != -2)
        {
          CFDictionarySetValue(v34, (const void *)(id_for_string & 0x7FFFFFFF), (const void *)1);
          unsigned int v35 = *v32;
        }
        int v37 = db_get_id_for_string(v35, "com.apple.mail.emlx");
        if (v37 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v37 & 0x7FFFFFFF), (const void *)2);
          unsigned int v35 = *v32;
        }
        int v38 = db_get_id_for_string(v35, "com.apple.mail.eml");
        if (v38 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v38 & 0x7FFFFFFF), (const void *)3);
          unsigned int v35 = *v32;
        }
        int v39 = db_get_id_for_string(v35, "com.microsoft.entourage.virtual.message");
        if (v39 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v39 & 0x7FFFFFFF), (const void *)4);
          unsigned int v35 = *v32;
        }
        int v40 = db_get_id_for_string(v35, "com.apple.ichat.transcript");
        if (v40 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v40 & 0x7FFFFFFF), (const void *)5);
          unsigned int v35 = *v32;
        }
        int v41 = db_get_id_for_string(v35, "public.contact");
        if (v41 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v41 & 0x7FFFFFFF), (const void *)6);
          unsigned int v35 = *v32;
        }
        int v42 = db_get_id_for_string(v35, "public.vcard");
        if (v42 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v42 & 0x7FFFFFFF), (const void *)7);
          unsigned int v35 = *v32;
        }
        int v43 = db_get_id_for_string(v35, "com.apple.addressbook.person");
        if (v43 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v43 & 0x7FFFFFFF), (const void *)8);
          unsigned int v35 = *v32;
        }
        int v44 = db_get_id_for_string(v35, "com.apple.addressbook.group");
        if (v44 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v44 & 0x7FFFFFFF), (const void *)9);
          unsigned int v35 = *v32;
        }
        int v45 = db_get_id_for_string(v35, "com.microsoft.entourage.virtual.contact");
        if (v45 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v45 & 0x7FFFFFFF), (const void *)0xA);
          unsigned int v35 = *v32;
        }
        int v46 = db_get_id_for_string(v35, "com.microsoft.entourage.virtual.group");
        if (v46 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v46 & 0x7FFFFFFF), (const void *)0xB);
          unsigned int v35 = *v32;
        }
        int v47 = db_get_id_for_string(v35, "com.apple.systempreference.prefpane");
        if (v47 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v47 & 0x7FFFFFFF), (const void *)0xC);
          unsigned int v35 = *v32;
        }
        int v48 = db_get_id_for_string(v35, "public.font");
        if (v48 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v48 & 0x7FFFFFFF), (const void *)0xD);
          unsigned int v35 = *v32;
        }
        int v49 = db_get_id_for_string(v35, "public.bookmark");
        if (v49 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v49 & 0x7FFFFFFF), (const void *)0xE);
          unsigned int v35 = *v32;
        }
        int v50 = db_get_id_for_string(v35, "com.apple.safari.bookmark");
        if (v50 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v50 & 0x7FFFFFFF), (const void *)0xF);
          unsigned int v35 = *v32;
        }
        int v51 = db_get_id_for_string(v35, "com.apple.safari.history");
        if (v51 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v51 & 0x7FFFFFFF), (const void *)0x10);
          unsigned int v35 = *v32;
        }
        int v52 = db_get_id_for_string(v35, "public.to-do-item");
        if (v52 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v52 & 0x7FFFFFFF), (const void *)0x11);
          unsigned int v35 = *v32;
        }
        int v53 = db_get_id_for_string(v35, "public.calendar-event");
        if (v53 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v53 & 0x7FFFFFFF), (const void *)0x12);
          unsigned int v35 = *v32;
        }
        int v54 = db_get_id_for_string(v35, "com.apple.ical.bookmark");
        if (v54 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v54 & 0x7FFFFFFF), (const void *)0x13);
          unsigned int v35 = *v32;
        }
        int v55 = db_get_id_for_string(v35, "com.apple.ical.bookmark.todo");
        if (v55 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v55 & 0x7FFFFFFF), (const void *)0x14);
          unsigned int v35 = *v32;
        }
        int v56 = db_get_id_for_string(v35, "com.apple.ical.ics.event");
        if (v56 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v56 & 0x7FFFFFFF), (const void *)0x15);
          unsigned int v35 = *v32;
        }
        int v57 = db_get_id_for_string(v35, "com.apple.ical.ics.todo");
        if (v57 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v57 & 0x7FFFFFFF), (const void *)0x16);
          unsigned int v35 = *v32;
        }
        int v58 = db_get_id_for_string(v35, "com.microsoft.entourage.virtual.event");
        if (v58 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v58 & 0x7FFFFFFF), (const void *)0x17);
          unsigned int v35 = *v32;
        }
        int v59 = db_get_id_for_string(v35, "com.microsoft.entourage.virtual.task");
        if (v59 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v59 & 0x7FFFFFFF), (const void *)0x18);
          unsigned int v35 = *v32;
        }
        int v60 = db_get_id_for_string(v35, "public.movie");
        if (v60 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v60 & 0x7FFFFFFF), (const void *)0x19);
          unsigned int v35 = *v32;
        }
        int v61 = db_get_id_for_string(v35, "com.apple.quicktime-movie");
        if (v61 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v61 & 0x7FFFFFFF), (const void *)0x1A);
          unsigned int v35 = *v32;
        }
        int v62 = db_get_id_for_string(v35, "public.mpeg-video");
        if (v62 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v62 & 0x7FFFFFFF), (const void *)0x1B);
          unsigned int v35 = *v32;
        }
        int v63 = db_get_id_for_string(v35, "public.mpeg-4");
        if (v63 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v63 & 0x7FFFFFFF), (const void *)0x1C);
          unsigned int v35 = *v32;
        }
        int v64 = db_get_id_for_string(v35, "public.mpeg");
        if (v64 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v64 & 0x7FFFFFFF), (const void *)0x1D);
          unsigned int v35 = *v32;
        }
        int v65 = db_get_id_for_string(v35, "public.3gpp");
        if (v65 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v65 & 0x7FFFFFFF), (const void *)0x1E);
          unsigned int v35 = *v32;
        }
        int v66 = db_get_id_for_string(v35, "public.3gpp2");
        if (v66 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v66 & 0x7FFFFFFF), (const void *)0x1F);
          unsigned int v35 = *v32;
        }
        int v67 = db_get_id_for_string(v35, "com.apple.application-bundle");
        if (v67 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v67 & 0x7FFFFFFF), (const void *)0x20);
          unsigned int v35 = *v32;
        }
        int v68 = db_get_id_for_string(v35, "com.apple.application-file");
        if (v68 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v68 & 0x7FFFFFFF), (const void *)0x21);
          unsigned int v35 = *v32;
        }
        int v69 = db_get_id_for_string(v35, "com.apple.dashboard-widget");
        if (v69 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v69 & 0x7FFFFFFF), (const void *)0x22);
          unsigned int v35 = *v32;
        }
        int v70 = db_get_id_for_string(v35, "public.folder");
        if (v70 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v70 & 0x7FFFFFFF), (const void *)0x23);
          unsigned int v35 = *v32;
        }
        int v71 = db_get_id_for_string(v35, "com.apple.mount-point");
        if (v71 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v71 & 0x7FFFFFFF), (const void *)0x24);
          unsigned int v35 = *v32;
        }
        int v72 = db_get_id_for_string(v35, "public.audio");
        if (v72 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v72 & 0x7FFFFFFF), (const void *)0x25);
          unsigned int v35 = *v32;
        }
        int v73 = db_get_id_for_string(v35, "public.mpeg-4-audio");
        if (v73 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v73 & 0x7FFFFFFF), (const void *)0x26);
          unsigned int v35 = *v32;
        }
        int v74 = db_get_id_for_string(v35, "com.apple.protected-mpeg-4-audio");
        if (v74 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v74 & 0x7FFFFFFF), (const void *)0x27);
          unsigned int v35 = *v32;
        }
        int v75 = db_get_id_for_string(v35, "com.adobe.pdf");
        if (v75 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v75 & 0x7FFFFFFF), (const void *)0x28);
          unsigned int v35 = *v32;
        }
        int v76 = db_get_id_for_string(v35, "com.apple.localized-pdf-bundle");
        if (v76 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v76 & 0x7FFFFFFF), (const void *)0x29);
          unsigned int v35 = *v32;
        }
        int v77 = db_get_id_for_string(v35, "public.presentation");
        if (v77 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v77 & 0x7FFFFFFF), (const void *)0x2A);
          unsigned int v35 = *v32;
        }
        int v78 = db_get_id_for_string(v35, "com.microsoft.powerpoint.ppt");
        if (v78 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v78 & 0x7FFFFFFF), (const void *)0x2B);
          unsigned int v35 = *v32;
        }
        int v79 = db_get_id_for_string(v35, "com.apple.keynote.key");
        if (v79 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v79 & 0x7FFFFFFF), (const void *)0x2C);
          unsigned int v35 = *v32;
        }
        int v80 = db_get_id_for_string(v35, "com.apple.iwork.keynote.key");
        if (v80 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v80 & 0x7FFFFFFF), (const void *)0x2D);
          unsigned int v35 = *v32;
        }
        int v81 = db_get_id_for_string(v35, "public.image");
        if (v81 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v81 & 0x7FFFFFFF), (const void *)0x2E);
          unsigned int v35 = *v32;
        }
        int v82 = db_get_id_for_string(v35, "com.apple.motion.project");
        if (v82 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v82 & 0x7FFFFFFF), (const void *)0x2F);
          unsigned int v35 = *v32;
        }
        int v83 = db_get_id_for_string(v35, "com.apple.iwork.pages.pages");
        if (v83 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v83 & 0x7FFFFFFF), (const void *)0x30);
          unsigned int v35 = *v32;
        }
        int v84 = db_get_id_for_string(v35, "com.apple.iwork.pages.sffpages");
        if (v84 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v84 & 0x7FFFFFFF), (const void *)0x31);
          unsigned int v35 = *v32;
        }
        int v85 = db_get_id_for_string(v35, "com.apple.iwork.pages.template");
        if (v85 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v85 & 0x7FFFFFFF), (const void *)0x32);
          unsigned int v35 = *v32;
        }
        int v86 = db_get_id_for_string(v35, "com.apple.iwork.pages.sfftemplate");
        if (v86 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v86 & 0x7FFFFFFF), (const void *)0x33);
          unsigned int v35 = *v32;
        }
        int v87 = db_get_id_for_string(v35, "public.rtf");
        if (v87 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v87 & 0x7FFFFFFF), (const void *)0x34);
          unsigned int v35 = *v32;
        }
        int v88 = db_get_id_for_string(v35, "com.apple.rtfd");
        if (v88 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v88 & 0x7FFFFFFF), (const void *)0x35);
          unsigned int v35 = *v32;
        }
        int v89 = db_get_id_for_string(v35, "com.apple.flat-rtfd");
        if (v89 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v89 & 0x7FFFFFFF), (const void *)0x36);
          unsigned int v35 = *v32;
        }
        int v90 = db_get_id_for_string(v35, "com.microsoft.word.doc");
        if (v90 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v90 & 0x7FFFFFFF), (const void *)0x37);
          unsigned int v35 = *v32;
        }
        int v91 = db_get_id_for_string(v35, "org.khronos.collada.digital-asset-exchange");
        if (v91 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v91 & 0x7FFFFFFF), (const void *)0x38);
          unsigned int v35 = *v32;
        }
        int v92 = db_get_id_for_string(v35, "public.plain-text");
        if (v92 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v92 & 0x7FFFFFFF), (const void *)0x39);
          unsigned int v35 = *v32;
        }
        int v93 = db_get_id_for_string(v35, "public.html");
        if (v93 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v93 & 0x7FFFFFFF), (const void *)0x3A);
          unsigned int v35 = *v32;
        }
        int v94 = db_get_id_for_string(v35, "public.xhtml");
        if (v94 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v94 & 0x7FFFFFFF), (const void *)0x3B);
          unsigned int v35 = *v32;
        }
        int v95 = db_get_id_for_string(v35, "public.shell-script");
        if (v95 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v95 & 0x7FFFFFFF), (const void *)0x3C);
          unsigned int v35 = *v32;
        }
        int v96 = db_get_id_for_string(v35, "public.source-code");
        if (v96 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v96 & 0x7FFFFFFF), (const void *)0x3D);
          unsigned int v35 = *v32;
        }
        int v97 = db_get_id_for_string(v35, "public.unix-executable");
        if (v97 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v97 & 0x7FFFFFFF), (const void *)0x3E);
          unsigned int v35 = *v32;
        }
        int v98 = db_get_id_for_string(v35, "com.apple.xcode.project");
        if (v98 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v98 & 0x7FFFFFFF), (const void *)0x3F);
          unsigned int v35 = *v32;
        }
        int v99 = db_get_id_for_string(v35, "com.apple.xcode.model");
        if (v99 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v99 & 0x7FFFFFFF), (const void *)0x40);
          unsigned int v35 = *v32;
        }
        int v100 = db_get_id_for_string(v35, "com.apple.xcode.archive");
        if (v100 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v100 & 0x7FFFFFFF), (const void *)0x41);
          unsigned int v35 = *v32;
        }
        int v101 = db_get_id_for_string(v35, "com.apple.xcode.docset");
        if (v101 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v101 & 0x7FFFFFFF), (const void *)0x42);
          unsigned int v35 = *v32;
        }
        int v102 = db_get_id_for_string(v35, "com.apple.xcode.projectdata");
        if (v102 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v102 & 0x7FFFFFFF), (const void *)0x43);
          unsigned int v35 = *v32;
        }
        int v103 = db_get_id_for_string(v35, "com.apple.xcode.dsym");
        if (v103 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v103 & 0x7FFFFFFF), (const void *)0x44);
          unsigned int v35 = *v32;
        }
        int v104 = db_get_id_for_string(v35, "com.apple.xcode.configsettings");
        if (v104 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v104 & 0x7FFFFFFF), (const void *)0x45);
          unsigned int v35 = *v32;
        }
        int v105 = db_get_id_for_string(v35, "com.apple.xcode.usersettings");
        if (v105 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v105 & 0x7FFFFFFF), (const void *)0x46);
          unsigned int v35 = *v32;
        }
        int v106 = db_get_id_for_string(v35, "com.apple.xcode.strings-text");
        if (v106 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v106 & 0x7FFFFFFF), (const void *)0x47);
          unsigned int v35 = *v32;
        }
        int v107 = db_get_id_for_string(v35, "com.apple.xcode.plugin");
        if (v107 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v107 & 0x7FFFFFFF), (const void *)0x48);
          unsigned int v35 = *v32;
        }
        int v108 = db_get_id_for_string(v35, "com.apple.xcode.mom");
        if (v108 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v108 & 0x7FFFFFFF), (const void *)0x49);
          unsigned int v35 = *v32;
        }
        int v109 = db_get_id_for_string(v35, "com.apple.property-list");
        if (v109 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v109 & 0x7FFFFFFF), (const void *)0x4A);
          unsigned int v35 = *v32;
        }
        int v110 = db_get_id_for_string(v35, "dyn.ah62d4rv4ge81a7dk");
        if (v110 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v110 & 0x7FFFFFFF), (const void *)0x4B);
          unsigned int v35 = *v32;
        }
        int v111 = db_get_id_for_string(v35, "dyn.ah62d4rv4ge80u5pbsa");
        if (v111 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v111 & 0x7FFFFFFF), (const void *)0x4C);
          unsigned int v35 = *v32;
        }
        int v112 = db_get_id_for_string(v35, "com.apple.dashcode.xml");
        if (v112 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v112 & 0x7FFFFFFF), (const void *)0x4D);
          unsigned int v35 = *v32;
        }
        int v113 = db_get_id_for_string(v35, "com.apple.dashcode.css");
        if (v113 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v113 & 0x7FFFFFFF), (const void *)0x4E);
          unsigned int v35 = *v32;
        }
        int v114 = db_get_id_for_string(v35, "com.apple.dashcode.javascript");
        if (v114 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v114 & 0x7FFFFFFF), (const void *)0x4F);
          unsigned int v35 = *v32;
        }
        int v115 = db_get_id_for_string(v35, "com.apple.dashcode.json");
        if (v115 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v115 & 0x7FFFFFFF), (const void *)0x50);
          unsigned int v35 = *v32;
        }
        int v116 = db_get_id_for_string(v35, "com.apple.dashcode.manifest");
        if (v116 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v116 & 0x7FFFFFFF), (const void *)0x51);
          unsigned int v35 = *v32;
        }
        int v117 = db_get_id_for_string(v35, "com.apple.interfacebuilder.document");
        if (v117 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v117 & 0x7FFFFFFF), (const void *)0x52);
          unsigned int v35 = *v32;
        }
        int v118 = db_get_id_for_string(v35, "com.apple.interfacebuilder.document.cocoa");
        if (v118 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v118 & 0x7FFFFFFF), (const void *)0x53);
          unsigned int v35 = *v32;
        }
        int v119 = db_get_id_for_string(v35, "com.apple.rez-source");
        if (v119 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v119 & 0x7FFFFFFF), (const void *)0x54);
          unsigned int v35 = *v32;
        }
        int v120 = db_get_id_for_string(v35, "com.apple.iphone.developerprofile");
        if (v120 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v120 & 0x7FFFFFFF), (const void *)0x55);
          unsigned int v35 = *v32;
        }
        int v121 = db_get_id_for_string(v35, "com.apple.iphone.mobileprovision");
        if (v121 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v121 & 0x7FFFFFFF), (const void *)0x56);
          unsigned int v35 = *v32;
        }
        int v122 = db_get_id_for_string(v35, "com.apple.coreanimation-bundle");
        if (v122 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v122 & 0x7FFFFFFF), (const void *)0x57);
          unsigned int v35 = *v32;
        }
        int v123 = db_get_id_for_string(v35, "com.apple.coreanimation-xml");
        if (v123 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v123 & 0x7FFFFFFF), (const void *)0x58);
          unsigned int v35 = *v32;
        }
        int v124 = db_get_id_for_string(v35, "com.sun.java-class");
        if (v124 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v124 & 0x7FFFFFFF), (const void *)0x59);
          unsigned int v35 = *v32;
        }
        int v125 = db_get_id_for_string(v35, "com.apple.scripting-definition");
        if (v125 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v125 & 0x7FFFFFFF), (const void *)0x5A);
          unsigned int v35 = *v32;
        }
        int v126 = db_get_id_for_string(v35, "com.apple.dt.document.workspace");
        if (v126 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v126 & 0x7FFFFFFF), (const void *)0x5B);
          unsigned int v35 = *v32;
        }
        int v127 = db_get_id_for_string(v35, "com.apple.dt.document.scheme");
        if (v127 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v127 & 0x7FFFFFFF), (const void *)0x5C);
          unsigned int v35 = *v32;
        }
        int v128 = db_get_id_for_string(v35, "com.apple.dt.ide.plug-in");
        if (v128 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v128 & 0x7FFFFFFF), (const void *)0x5D);
          unsigned int v35 = *v32;
        }
        int v129 = db_get_id_for_string(v35, "com.apple.dt.dvt.plug-in");
        if (v129 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v129 & 0x7FFFFFFF), (const void *)0x5E);
          unsigned int v35 = *v32;
        }
        int v130 = db_get_id_for_string(v35, "com.apple.dt.document.snapshot");
        if (v130 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v130 & 0x7FFFFFFF), (const void *)0x5F);
          unsigned int v35 = *v32;
        }
        int v131 = db_get_id_for_string(v35, "com.apple.dt.bundle.unit-test.objective-c");
        if (v131 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v131 & 0x7FFFFFFF), (const void *)0x60);
          unsigned int v35 = *v32;
        }
        int v132 = db_get_id_for_string(v35, "com.apple.instruments.tracetemplate");
        if (v132 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v132 & 0x7FFFFFFF), (const void *)0x61);
          unsigned int v35 = *v32;
        }
        int v133 = db_get_id_for_string(v35, "com.apple.quartzdebug.introspectiontrace");
        if (v133 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v133 & 0x7FFFFFFF), (const void *)0x62);
          unsigned int v35 = *v32;
        }
        int v134 = db_get_id_for_string(v35, "com.apple.applescript.text-object");
        if (v134 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v134 & 0x7FFFFFFF), (const void *)0x63);
          unsigned int v35 = *v32;
        }
        int v135 = db_get_id_for_string(v35, "com.apple.applescript.data-object");
        if (v135 != -2) {
          CFDictionarySetValue(v34, (const void *)(v135 & 0x7FFFFFFF), (const void *)0x64);
        }
        uint64_t v136 = *v32;
        int v137 = db_get_id_for_string(*v32, "com.apple.applescript.url-object");
        if (v137 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v137 & 0x7FFFFFFF), (const void *)0x65);
          uint64_t v136 = *v32;
        }
        int v138 = db_get_id_for_string(v136, "com.apple.applescript.alias-object");
        if (v138 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v138 & 0x7FFFFFFF), (const void *)0x66);
          uint64_t v136 = *v32;
        }
        int v139 = db_get_id_for_string(v136, "com.apple.symbol-export");
        if (v139 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v139 & 0x7FFFFFFF), (const void *)0x67);
          uint64_t v136 = *v32;
        }
        int v140 = db_get_id_for_string(v136, "com.apple.mach-o-binary");
        if (v140 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v140 & 0x7FFFFFFF), (const void *)0x68);
          uint64_t v136 = *v32;
        }
        int v141 = db_get_id_for_string(v136, "com.apple.mach-o-object");
        if (v141 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v141 & 0x7FFFFFFF), (const void *)0x69);
          uint64_t v136 = *v32;
        }
        int v142 = db_get_id_for_string(v136, "com.apple.mach-o-executable");
        if (v142 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v142 & 0x7FFFFFFF), (const void *)0x6A);
          uint64_t v136 = *v32;
        }
        int v143 = db_get_id_for_string(v136, "com.apple.x11-mach-o-executable");
        if (v143 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v143 & 0x7FFFFFFF), (const void *)0x6B);
          uint64_t v136 = *v32;
        }
        int v144 = db_get_id_for_string(v136, "public.object-code");
        if (v144 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v144 & 0x7FFFFFFF), (const void *)0x6C);
          uint64_t v136 = *v32;
        }
        int v145 = db_get_id_for_string(v136, "com.microsoft.windows-executable");
        if (v145 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v145 & 0x7FFFFFFF), (const void *)0x6D);
          uint64_t v136 = *v32;
        }
        int v146 = db_get_id_for_string(v136, "com.microsoft.windows-dynamic-link-library");
        if (v146 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v146 & 0x7FFFFFFF), (const void *)0x6E);
          uint64_t v136 = *v32;
        }
        int v147 = db_get_id_for_string(v136, "com.sun.java-archive");
        if (v147 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v147 & 0x7FFFFFFF), (const void *)0x6F);
          uint64_t v136 = *v32;
        }
        int v148 = db_get_id_for_string(v136, "com.sun.web-application-archive");
        if (v148 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v148 & 0x7FFFFFFF), (const void *)0x70);
          uint64_t v136 = *v32;
        }
        int v149 = db_get_id_for_string(v136, "com.apple.xcode.plugindata");
        if (v149 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v149 & 0x7FFFFFFF), (const void *)0x71);
          uint64_t v136 = *v32;
        }
        int v150 = db_get_id_for_string(v136, "com.apple.dt.playground");
        if (v150 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v150 & 0x7FFFFFFF), (const void *)0x72);
          uint64_t v136 = *v32;
        }
        int v151 = db_get_id_for_string(v136, "com.apple.iwork.numbers.sffnumbers");
        if (v151 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v151 & 0x7FFFFFFF), (const void *)0x73);
          uint64_t v136 = *v32;
        }
        int v152 = db_get_id_for_string(v136, "com.apple.iwork.numbers.numbers");
        if (v152 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v152 & 0x7FFFFFFF), (const void *)0x74);
          uint64_t v136 = *v32;
        }
        int v153 = db_get_id_for_string(v136, "com.apple.iwork.numbers.template");
        if (v153 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v153 & 0x7FFFFFFF), (const void *)0x75);
          uint64_t v136 = *v32;
        }
        int v154 = db_get_id_for_string(v136, "com.microsoft.excel.xls");
        if (v154 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v154 & 0x7FFFFFFF), (const void *)0x76);
          uint64_t v136 = *v32;
        }
        int v155 = db_get_id_for_string(v136, "org.openxmlformats.spreadsheetml.sheet");
        if (v155 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v155 & 0x7FFFFFFF), (const void *)0x77);
          uint64_t v136 = *v32;
        }
        int v156 = db_get_id_for_string(v136, "public.spreadsheet");
        if (v156 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v156 & 0x7FFFFFFF), (const void *)0x78);
          uint64_t v136 = *v32;
        }
        int v157 = db_get_id_for_string(v136, "public.xml");
        if (v157 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v157 & 0x7FFFFFFF), (const void *)0x79);
          uint64_t v136 = *v32;
        }
        int v158 = db_get_id_for_string(v136, "com.apple.log");
        if (v158 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v158 & 0x7FFFFFFF), (const void *)0x7A);
          uint64_t v136 = *v32;
        }
        int v159 = db_get_id_for_string(v136, "com.apple.crashreport");
        if (v159 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v159 & 0x7FFFFFFF), (const void *)0x7B);
          uint64_t v136 = *v32;
        }
        int v160 = db_get_id_for_string(v136, "com.apple.spinreport");
        if (v160 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v160 & 0x7FFFFFFF), (const void *)0x7C);
          uint64_t v136 = *v32;
        }
        int v161 = db_get_id_for_string(v136, "com.apple.panicreport");
        if (v161 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v161 & 0x7FFFFFFF), (const void *)0x7D);
          uint64_t v136 = *v32;
        }
        int v162 = db_get_id_for_string(v136, "com.apple.shutdownstall");
        if (v162 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v162 & 0x7FFFFFFF), (const void *)0x7E);
          uint64_t v136 = *v32;
        }
        int v163 = db_get_id_for_string(v136, "com.apple.hangreport");
        if (v163 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v163 & 0x7FFFFFFF), (const void *)0x7F);
          uint64_t v136 = *v32;
        }
        int v164 = db_get_id_for_string(v136, "public.json");
        if (v164 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v164 & 0x7FFFFFFF), (const void *)0x80);
          uint64_t v136 = *v32;
        }
        int v165 = db_get_id_for_string(v136, "public.log");
        if (v165 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v165 & 0x7FFFFFFF), (const void *)0x81);
          uint64_t v136 = *v32;
        }
        int v166 = db_get_id_for_string(v136, "public.content");
        if (v166 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v166 & 0x7FFFFFFF), (const void *)0x82);
          uint64_t v136 = *v32;
        }
        int v167 = db_get_id_for_string(v136, "com.microsoft.excel.sheet.binary.macroenabled");
        if (v167 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v167 & 0x7FFFFFFF), (const void *)0x83);
          uint64_t v136 = *v32;
        }
        int v168 = db_get_id_for_string(v136, "org.openxmlformats.spreadsheetml.sheet.macroenabled");
        if (v168 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v168 & 0x7FFFFFFF), (const void *)0x84);
          uint64_t v136 = *v32;
        }
        int v169 = db_get_id_for_string(v136, "com.apple.protected-mpeg-4-audio-b");
        if (v169 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v169 & 0x7FFFFFFF), (const void *)0x85);
          uint64_t v136 = *v32;
        }
        int v170 = db_get_id_for_string(v136, "com.audible.aa-audiobook");
        if (v170 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v170 & 0x7FFFFFFF), (const void *)0x86);
          uint64_t v136 = *v32;
        }
        int v171 = db_get_id_for_string(v136, "com.audible.aax-audiobook");
        if (v171 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v171 & 0x7FFFFFFF), (const void *)0x87);
          uint64_t v136 = *v32;
        }
        int v172 = db_get_id_for_string(v136, "com.apple.tips");
        if (v172 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v172 & 0x7FFFFFFF), (const void *)0x88);
          uint64_t v136 = *v32;
        }
        int v173 = db_get_id_for_string(v136, "com.apple.helpviewer");
        if (v173 != -2)
        {
          CFDictionarySetValue(v34, (const void *)(v173 & 0x7FFFFFFF), (const void *)0x89);
          uint64_t v136 = *v32;
        }
        int v174 = db_get_id_for_string(v136, "com.apple.help.topic");
        if (v174 != -2) {
          CFDictionarySetValue(v34, (const void *)(v174 & 0x7FFFFFFF), (const void *)0x8A);
        }
        *(void *)(a1 + 6600) = CFDictionaryCreateCopy(v33, v34);
        CFRelease(v34);
      }
      uint64_t v175 = "kMDItemPhysicalSize";
    }
    *(_DWORD *)(a1 + 2004) = db_get_id_for_field(*(int **)(a1 + 1184), v175);
    id_for_int field = db_get_id_for_field(*(int **)(a1 + 1184), "kMDItemWhereFroms");
  }
  else
  {
    if ((a2 & 0x100) != 0)
    {
      uint64_t v316 = "_kMDItemStorageSize";
    }
    else
    {
      if (!*(void *)(a1 + 6600))
      {
        CFAllocatorRef v176 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFDictionaryRef v177 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0);
        int id_for_value = db_create_id_for_value(*v32, "public.message");
        if (id_for_value != -2) {
          CFDictionarySetValue(v177, (const void *)(id_for_value & 0x7FFFFFFF), (const void *)1);
        }
        int v179 = db_create_id_for_value(*v32, "com.apple.mail.emlx");
        if (v179 != -2) {
          CFDictionarySetValue(v177, (const void *)(v179 & 0x7FFFFFFF), (const void *)2);
        }
        int v180 = db_create_id_for_value(*v32, "com.apple.mail.eml");
        if (v180 != -2) {
          CFDictionarySetValue(v177, (const void *)(v180 & 0x7FFFFFFF), (const void *)3);
        }
        int v181 = db_create_id_for_value(*v32, "com.microsoft.entourage.virtual.message");
        if (v181 != -2) {
          CFDictionarySetValue(v177, (const void *)(v181 & 0x7FFFFFFF), (const void *)4);
        }
        int v182 = db_create_id_for_value(*v32, "com.apple.ichat.transcript");
        if (v182 != -2) {
          CFDictionarySetValue(v177, (const void *)(v182 & 0x7FFFFFFF), (const void *)5);
        }
        int v183 = db_create_id_for_value(*v32, "public.contact");
        if (v183 != -2) {
          CFDictionarySetValue(v177, (const void *)(v183 & 0x7FFFFFFF), (const void *)6);
        }
        int v184 = db_create_id_for_value(*v32, "public.vcard");
        if (v184 != -2) {
          CFDictionarySetValue(v177, (const void *)(v184 & 0x7FFFFFFF), (const void *)7);
        }
        int v185 = db_create_id_for_value(*v32, "com.apple.addressbook.person");
        if (v185 != -2) {
          CFDictionarySetValue(v177, (const void *)(v185 & 0x7FFFFFFF), (const void *)8);
        }
        int v186 = db_create_id_for_value(*v32, "com.apple.addressbook.group");
        if (v186 != -2) {
          CFDictionarySetValue(v177, (const void *)(v186 & 0x7FFFFFFF), (const void *)9);
        }
        int v187 = db_create_id_for_value(*v32, "com.microsoft.entourage.virtual.contact");
        if (v187 != -2) {
          CFDictionarySetValue(v177, (const void *)(v187 & 0x7FFFFFFF), (const void *)0xA);
        }
        int v188 = db_create_id_for_value(*v32, "com.microsoft.entourage.virtual.group");
        if (v188 != -2) {
          CFDictionarySetValue(v177, (const void *)(v188 & 0x7FFFFFFF), (const void *)0xB);
        }
        int v189 = db_create_id_for_value(*v32, "com.apple.systempreference.prefpane");
        if (v189 != -2) {
          CFDictionarySetValue(v177, (const void *)(v189 & 0x7FFFFFFF), (const void *)0xC);
        }
        int v190 = db_create_id_for_value(*v32, "public.font");
        if (v190 != -2) {
          CFDictionarySetValue(v177, (const void *)(v190 & 0x7FFFFFFF), (const void *)0xD);
        }
        int v191 = db_create_id_for_value(*v32, "public.bookmark");
        if (v191 != -2) {
          CFDictionarySetValue(v177, (const void *)(v191 & 0x7FFFFFFF), (const void *)0xE);
        }
        int v192 = db_create_id_for_value(*v32, "com.apple.safari.bookmark");
        if (v192 != -2) {
          CFDictionarySetValue(v177, (const void *)(v192 & 0x7FFFFFFF), (const void *)0xF);
        }
        int v193 = db_create_id_for_value(*v32, "com.apple.safari.history");
        if (v193 != -2) {
          CFDictionarySetValue(v177, (const void *)(v193 & 0x7FFFFFFF), (const void *)0x10);
        }
        int v194 = db_create_id_for_value(*v32, "public.to-do-item");
        if (v194 != -2) {
          CFDictionarySetValue(v177, (const void *)(v194 & 0x7FFFFFFF), (const void *)0x11);
        }
        int v195 = db_create_id_for_value(*v32, "public.calendar-event");
        if (v195 != -2) {
          CFDictionarySetValue(v177, (const void *)(v195 & 0x7FFFFFFF), (const void *)0x12);
        }
        int v196 = db_create_id_for_value(*v32, "com.apple.ical.bookmark");
        if (v196 != -2) {
          CFDictionarySetValue(v177, (const void *)(v196 & 0x7FFFFFFF), (const void *)0x13);
        }
        int v197 = db_create_id_for_value(*v32, "com.apple.ical.bookmark.todo");
        if (v197 != -2) {
          CFDictionarySetValue(v177, (const void *)(v197 & 0x7FFFFFFF), (const void *)0x14);
        }
        int v198 = db_create_id_for_value(*v32, "com.apple.ical.ics.event");
        if (v198 != -2) {
          CFDictionarySetValue(v177, (const void *)(v198 & 0x7FFFFFFF), (const void *)0x15);
        }
        int v199 = db_create_id_for_value(*v32, "com.apple.ical.ics.todo");
        if (v199 != -2) {
          CFDictionarySetValue(v177, (const void *)(v199 & 0x7FFFFFFF), (const void *)0x16);
        }
        int v200 = db_create_id_for_value(*v32, "com.microsoft.entourage.virtual.event");
        if (v200 != -2) {
          CFDictionarySetValue(v177, (const void *)(v200 & 0x7FFFFFFF), (const void *)0x17);
        }
        int v201 = db_create_id_for_value(*v32, "com.microsoft.entourage.virtual.task");
        if (v201 != -2) {
          CFDictionarySetValue(v177, (const void *)(v201 & 0x7FFFFFFF), (const void *)0x18);
        }
        int v202 = db_create_id_for_value(*v32, "public.movie");
        if (v202 != -2) {
          CFDictionarySetValue(v177, (const void *)(v202 & 0x7FFFFFFF), (const void *)0x19);
        }
        int v203 = db_create_id_for_value(*v32, "com.apple.quicktime-movie");
        if (v203 != -2) {
          CFDictionarySetValue(v177, (const void *)(v203 & 0x7FFFFFFF), (const void *)0x1A);
        }
        int v204 = db_create_id_for_value(*v32, "public.mpeg-video");
        if (v204 != -2) {
          CFDictionarySetValue(v177, (const void *)(v204 & 0x7FFFFFFF), (const void *)0x1B);
        }
        int v205 = db_create_id_for_value(*v32, "public.mpeg-4");
        if (v205 != -2) {
          CFDictionarySetValue(v177, (const void *)(v205 & 0x7FFFFFFF), (const void *)0x1C);
        }
        int v206 = db_create_id_for_value(*v32, "public.mpeg");
        if (v206 != -2) {
          CFDictionarySetValue(v177, (const void *)(v206 & 0x7FFFFFFF), (const void *)0x1D);
        }
        int v207 = db_create_id_for_value(*v32, "public.3gpp");
        if (v207 != -2) {
          CFDictionarySetValue(v177, (const void *)(v207 & 0x7FFFFFFF), (const void *)0x1E);
        }
        int v208 = db_create_id_for_value(*v32, "public.3gpp2");
        if (v208 != -2) {
          CFDictionarySetValue(v177, (const void *)(v208 & 0x7FFFFFFF), (const void *)0x1F);
        }
        int v209 = db_create_id_for_value(*v32, "com.apple.application-bundle");
        if (v209 != -2) {
          CFDictionarySetValue(v177, (const void *)(v209 & 0x7FFFFFFF), (const void *)0x20);
        }
        int v210 = db_create_id_for_value(*v32, "com.apple.application-file");
        if (v210 != -2) {
          CFDictionarySetValue(v177, (const void *)(v210 & 0x7FFFFFFF), (const void *)0x21);
        }
        int v211 = db_create_id_for_value(*v32, "com.apple.dashboard-widget");
        if (v211 != -2) {
          CFDictionarySetValue(v177, (const void *)(v211 & 0x7FFFFFFF), (const void *)0x22);
        }
        int v212 = db_create_id_for_value(*v32, "public.folder");
        if (v212 != -2) {
          CFDictionarySetValue(v177, (const void *)(v212 & 0x7FFFFFFF), (const void *)0x23);
        }
        int v213 = db_create_id_for_value(*v32, "com.apple.mount-point");
        if (v213 != -2) {
          CFDictionarySetValue(v177, (const void *)(v213 & 0x7FFFFFFF), (const void *)0x24);
        }
        int v214 = db_create_id_for_value(*v32, "public.audio");
        if (v214 != -2) {
          CFDictionarySetValue(v177, (const void *)(v214 & 0x7FFFFFFF), (const void *)0x25);
        }
        int v215 = db_create_id_for_value(*v32, "public.mpeg-4-audio");
        if (v215 != -2) {
          CFDictionarySetValue(v177, (const void *)(v215 & 0x7FFFFFFF), (const void *)0x26);
        }
        int v216 = db_create_id_for_value(*v32, "com.apple.protected-mpeg-4-audio");
        if (v216 != -2) {
          CFDictionarySetValue(v177, (const void *)(v216 & 0x7FFFFFFF), (const void *)0x27);
        }
        int v217 = db_create_id_for_value(*v32, "com.adobe.pdf");
        if (v217 != -2) {
          CFDictionarySetValue(v177, (const void *)(v217 & 0x7FFFFFFF), (const void *)0x28);
        }
        int v218 = db_create_id_for_value(*v32, "com.apple.localized-pdf-bundle");
        if (v218 != -2) {
          CFDictionarySetValue(v177, (const void *)(v218 & 0x7FFFFFFF), (const void *)0x29);
        }
        int v219 = db_create_id_for_value(*v32, "public.presentation");
        if (v219 != -2) {
          CFDictionarySetValue(v177, (const void *)(v219 & 0x7FFFFFFF), (const void *)0x2A);
        }
        int v220 = db_create_id_for_value(*v32, "com.microsoft.powerpoint.ppt");
        if (v220 != -2) {
          CFDictionarySetValue(v177, (const void *)(v220 & 0x7FFFFFFF), (const void *)0x2B);
        }
        int v221 = db_create_id_for_value(*v32, "com.apple.keynote.key");
        if (v221 != -2) {
          CFDictionarySetValue(v177, (const void *)(v221 & 0x7FFFFFFF), (const void *)0x2C);
        }
        int v222 = db_create_id_for_value(*v32, "com.apple.iwork.keynote.key");
        if (v222 != -2) {
          CFDictionarySetValue(v177, (const void *)(v222 & 0x7FFFFFFF), (const void *)0x2D);
        }
        int v223 = db_create_id_for_value(*v32, "public.image");
        if (v223 != -2) {
          CFDictionarySetValue(v177, (const void *)(v223 & 0x7FFFFFFF), (const void *)0x2E);
        }
        int v224 = db_create_id_for_value(*v32, "com.apple.motion.project");
        if (v224 != -2) {
          CFDictionarySetValue(v177, (const void *)(v224 & 0x7FFFFFFF), (const void *)0x2F);
        }
        int v225 = db_create_id_for_value(*v32, "com.apple.iwork.pages.pages");
        if (v225 != -2) {
          CFDictionarySetValue(v177, (const void *)(v225 & 0x7FFFFFFF), (const void *)0x30);
        }
        int v226 = db_create_id_for_value(*v32, "com.apple.iwork.pages.sffpages");
        if (v226 != -2) {
          CFDictionarySetValue(v177, (const void *)(v226 & 0x7FFFFFFF), (const void *)0x31);
        }
        int v227 = db_create_id_for_value(*v32, "com.apple.iwork.pages.template");
        if (v227 != -2) {
          CFDictionarySetValue(v177, (const void *)(v227 & 0x7FFFFFFF), (const void *)0x32);
        }
        int v228 = db_create_id_for_value(*v32, "com.apple.iwork.pages.sfftemplate");
        if (v228 != -2) {
          CFDictionarySetValue(v177, (const void *)(v228 & 0x7FFFFFFF), (const void *)0x33);
        }
        int v229 = db_create_id_for_value(*v32, "public.rtf");
        if (v229 != -2) {
          CFDictionarySetValue(v177, (const void *)(v229 & 0x7FFFFFFF), (const void *)0x34);
        }
        int v230 = db_create_id_for_value(*v32, "com.apple.rtfd");
        if (v230 != -2) {
          CFDictionarySetValue(v177, (const void *)(v230 & 0x7FFFFFFF), (const void *)0x35);
        }
        int v231 = db_create_id_for_value(*v32, "com.apple.flat-rtfd");
        if (v231 != -2) {
          CFDictionarySetValue(v177, (const void *)(v231 & 0x7FFFFFFF), (const void *)0x36);
        }
        int v232 = db_create_id_for_value(*v32, "com.microsoft.word.doc");
        if (v232 != -2) {
          CFDictionarySetValue(v177, (const void *)(v232 & 0x7FFFFFFF), (const void *)0x37);
        }
        int v233 = db_create_id_for_value(*v32, "org.khronos.collada.digital-asset-exchange");
        if (v233 != -2) {
          CFDictionarySetValue(v177, (const void *)(v233 & 0x7FFFFFFF), (const void *)0x38);
        }
        int v234 = db_create_id_for_value(*v32, "public.plain-text");
        if (v234 != -2) {
          CFDictionarySetValue(v177, (const void *)(v234 & 0x7FFFFFFF), (const void *)0x39);
        }
        int v235 = db_create_id_for_value(*v32, "public.html");
        if (v235 != -2) {
          CFDictionarySetValue(v177, (const void *)(v235 & 0x7FFFFFFF), (const void *)0x3A);
        }
        int v236 = db_create_id_for_value(*v32, "public.xhtml");
        if (v236 != -2) {
          CFDictionarySetValue(v177, (const void *)(v236 & 0x7FFFFFFF), (const void *)0x3B);
        }
        int v237 = db_create_id_for_value(*v32, "public.shell-script");
        if (v237 != -2) {
          CFDictionarySetValue(v177, (const void *)(v237 & 0x7FFFFFFF), (const void *)0x3C);
        }
        int v238 = db_create_id_for_value(*v32, "public.source-code");
        if (v238 != -2) {
          CFDictionarySetValue(v177, (const void *)(v238 & 0x7FFFFFFF), (const void *)0x3D);
        }
        int v239 = db_create_id_for_value(*v32, "public.unix-executable");
        if (v239 != -2) {
          CFDictionarySetValue(v177, (const void *)(v239 & 0x7FFFFFFF), (const void *)0x3E);
        }
        int v240 = db_create_id_for_value(*v32, "com.apple.xcode.project");
        if (v240 != -2) {
          CFDictionarySetValue(v177, (const void *)(v240 & 0x7FFFFFFF), (const void *)0x3F);
        }
        int v241 = db_create_id_for_value(*v32, "com.apple.xcode.model");
        if (v241 != -2) {
          CFDictionarySetValue(v177, (const void *)(v241 & 0x7FFFFFFF), (const void *)0x40);
        }
        int v242 = db_create_id_for_value(*v32, "com.apple.xcode.archive");
        if (v242 != -2) {
          CFDictionarySetValue(v177, (const void *)(v242 & 0x7FFFFFFF), (const void *)0x41);
        }
        int v243 = db_create_id_for_value(*v32, "com.apple.xcode.docset");
        if (v243 != -2) {
          CFDictionarySetValue(v177, (const void *)(v243 & 0x7FFFFFFF), (const void *)0x42);
        }
        int v244 = db_create_id_for_value(*v32, "com.apple.xcode.projectdata");
        if (v244 != -2) {
          CFDictionarySetValue(v177, (const void *)(v244 & 0x7FFFFFFF), (const void *)0x43);
        }
        int v245 = db_create_id_for_value(*v32, "com.apple.xcode.dsym");
        if (v245 != -2) {
          CFDictionarySetValue(v177, (const void *)(v245 & 0x7FFFFFFF), (const void *)0x44);
        }
        int v246 = db_create_id_for_value(*v32, "com.apple.xcode.configsettings");
        if (v246 != -2) {
          CFDictionarySetValue(v177, (const void *)(v246 & 0x7FFFFFFF), (const void *)0x45);
        }
        int v247 = db_create_id_for_value(*v32, "com.apple.xcode.usersettings");
        if (v247 != -2) {
          CFDictionarySetValue(v177, (const void *)(v247 & 0x7FFFFFFF), (const void *)0x46);
        }
        int v248 = db_create_id_for_value(*v32, "com.apple.xcode.strings-text");
        if (v248 != -2) {
          CFDictionarySetValue(v177, (const void *)(v248 & 0x7FFFFFFF), (const void *)0x47);
        }
        int v249 = db_create_id_for_value(*v32, "com.apple.xcode.plugin");
        if (v249 != -2) {
          CFDictionarySetValue(v177, (const void *)(v249 & 0x7FFFFFFF), (const void *)0x48);
        }
        int v250 = db_create_id_for_value(*v32, "com.apple.xcode.mom");
        if (v250 != -2) {
          CFDictionarySetValue(v177, (const void *)(v250 & 0x7FFFFFFF), (const void *)0x49);
        }
        int v251 = db_create_id_for_value(*v32, "com.apple.property-list");
        if (v251 != -2) {
          CFDictionarySetValue(v177, (const void *)(v251 & 0x7FFFFFFF), (const void *)0x4A);
        }
        int v252 = db_create_id_for_value(*v32, "dyn.ah62d4rv4ge81a7dk");
        if (v252 != -2) {
          CFDictionarySetValue(v177, (const void *)(v252 & 0x7FFFFFFF), (const void *)0x4B);
        }
        int v253 = db_create_id_for_value(*v32, "dyn.ah62d4rv4ge80u5pbsa");
        if (v253 != -2) {
          CFDictionarySetValue(v177, (const void *)(v253 & 0x7FFFFFFF), (const void *)0x4C);
        }
        int v254 = db_create_id_for_value(*v32, "com.apple.dashcode.xml");
        if (v254 != -2) {
          CFDictionarySetValue(v177, (const void *)(v254 & 0x7FFFFFFF), (const void *)0x4D);
        }
        int v255 = db_create_id_for_value(*v32, "com.apple.dashcode.css");
        if (v255 != -2) {
          CFDictionarySetValue(v177, (const void *)(v255 & 0x7FFFFFFF), (const void *)0x4E);
        }
        int v256 = db_create_id_for_value(*v32, "com.apple.dashcode.javascript");
        if (v256 != -2) {
          CFDictionarySetValue(v177, (const void *)(v256 & 0x7FFFFFFF), (const void *)0x4F);
        }
        int v257 = db_create_id_for_value(*v32, "com.apple.dashcode.json");
        if (v257 != -2) {
          CFDictionarySetValue(v177, (const void *)(v257 & 0x7FFFFFFF), (const void *)0x50);
        }
        int v258 = db_create_id_for_value(*v32, "com.apple.dashcode.manifest");
        if (v258 != -2) {
          CFDictionarySetValue(v177, (const void *)(v258 & 0x7FFFFFFF), (const void *)0x51);
        }
        int v259 = db_create_id_for_value(*v32, "com.apple.interfacebuilder.document");
        if (v259 != -2) {
          CFDictionarySetValue(v177, (const void *)(v259 & 0x7FFFFFFF), (const void *)0x52);
        }
        int v260 = db_create_id_for_value(*v32, "com.apple.interfacebuilder.document.cocoa");
        if (v260 != -2) {
          CFDictionarySetValue(v177, (const void *)(v260 & 0x7FFFFFFF), (const void *)0x53);
        }
        int v261 = db_create_id_for_value(*v32, "com.apple.rez-source");
        if (v261 != -2) {
          CFDictionarySetValue(v177, (const void *)(v261 & 0x7FFFFFFF), (const void *)0x54);
        }
        int v262 = db_create_id_for_value(*v32, "com.apple.iphone.developerprofile");
        if (v262 != -2) {
          CFDictionarySetValue(v177, (const void *)(v262 & 0x7FFFFFFF), (const void *)0x55);
        }
        int v263 = db_create_id_for_value(*v32, "com.apple.iphone.mobileprovision");
        if (v263 != -2) {
          CFDictionarySetValue(v177, (const void *)(v263 & 0x7FFFFFFF), (const void *)0x56);
        }
        int v264 = db_create_id_for_value(*v32, "com.apple.coreanimation-bundle");
        if (v264 != -2) {
          CFDictionarySetValue(v177, (const void *)(v264 & 0x7FFFFFFF), (const void *)0x57);
        }
        int v265 = db_create_id_for_value(*v32, "com.apple.coreanimation-xml");
        if (v265 != -2) {
          CFDictionarySetValue(v177, (const void *)(v265 & 0x7FFFFFFF), (const void *)0x58);
        }
        int v266 = db_create_id_for_value(*v32, "com.sun.java-class");
        if (v266 != -2) {
          CFDictionarySetValue(v177, (const void *)(v266 & 0x7FFFFFFF), (const void *)0x59);
        }
        int v267 = db_create_id_for_value(*v32, "com.apple.scripting-definition");
        if (v267 != -2) {
          CFDictionarySetValue(v177, (const void *)(v267 & 0x7FFFFFFF), (const void *)0x5A);
        }
        int v268 = db_create_id_for_value(*v32, "com.apple.dt.document.workspace");
        if (v268 != -2) {
          CFDictionarySetValue(v177, (const void *)(v268 & 0x7FFFFFFF), (const void *)0x5B);
        }
        int v269 = db_create_id_for_value(*v32, "com.apple.dt.document.scheme");
        if (v269 != -2) {
          CFDictionarySetValue(v177, (const void *)(v269 & 0x7FFFFFFF), (const void *)0x5C);
        }
        int v270 = db_create_id_for_value(*v32, "com.apple.dt.ide.plug-in");
        if (v270 != -2) {
          CFDictionarySetValue(v177, (const void *)(v270 & 0x7FFFFFFF), (const void *)0x5D);
        }
        int v271 = db_create_id_for_value(*v32, "com.apple.dt.dvt.plug-in");
        if (v271 != -2) {
          CFDictionarySetValue(v177, (const void *)(v271 & 0x7FFFFFFF), (const void *)0x5E);
        }
        int v272 = db_create_id_for_value(*v32, "com.apple.dt.document.snapshot");
        if (v272 != -2) {
          CFDictionarySetValue(v177, (const void *)(v272 & 0x7FFFFFFF), (const void *)0x5F);
        }
        int v273 = db_create_id_for_value(*v32, "com.apple.dt.bundle.unit-test.objective-c");
        if (v273 != -2) {
          CFDictionarySetValue(v177, (const void *)(v273 & 0x7FFFFFFF), (const void *)0x60);
        }
        int v274 = db_create_id_for_value(*v32, "com.apple.instruments.tracetemplate");
        if (v274 != -2) {
          CFDictionarySetValue(v177, (const void *)(v274 & 0x7FFFFFFF), (const void *)0x61);
        }
        int v275 = db_create_id_for_value(*v32, "com.apple.quartzdebug.introspectiontrace");
        if (v275 != -2) {
          CFDictionarySetValue(v177, (const void *)(v275 & 0x7FFFFFFF), (const void *)0x62);
        }
        int v276 = db_create_id_for_value(*v32, "com.apple.applescript.text-object");
        if (v276 != -2) {
          CFDictionarySetValue(v177, (const void *)(v276 & 0x7FFFFFFF), (const void *)0x63);
        }
        int v277 = db_create_id_for_value(*v32, "com.apple.applescript.data-object");
        if (v277 != -2) {
          CFDictionarySetValue(v177, (const void *)(v277 & 0x7FFFFFFF), (const void *)0x64);
        }
        int v278 = db_create_id_for_value(*v32, "com.apple.applescript.url-object");
        if (v278 != -2) {
          CFDictionarySetValue(v177, (const void *)(v278 & 0x7FFFFFFF), (const void *)0x65);
        }
        int v279 = db_create_id_for_value(*v32, "com.apple.applescript.alias-object");
        if (v279 != -2) {
          CFDictionarySetValue(v177, (const void *)(v279 & 0x7FFFFFFF), (const void *)0x66);
        }
        int v280 = db_create_id_for_value(*v32, "com.apple.symbol-export");
        if (v280 != -2) {
          CFDictionarySetValue(v177, (const void *)(v280 & 0x7FFFFFFF), (const void *)0x67);
        }
        int v281 = db_create_id_for_value(*v32, "com.apple.mach-o-binary");
        if (v281 != -2) {
          CFDictionarySetValue(v177, (const void *)(v281 & 0x7FFFFFFF), (const void *)0x68);
        }
        int v282 = db_create_id_for_value(*v32, "com.apple.mach-o-object");
        if (v282 != -2) {
          CFDictionarySetValue(v177, (const void *)(v282 & 0x7FFFFFFF), (const void *)0x69);
        }
        int v283 = db_create_id_for_value(*v32, "com.apple.mach-o-executable");
        if (v283 != -2) {
          CFDictionarySetValue(v177, (const void *)(v283 & 0x7FFFFFFF), (const void *)0x6A);
        }
        int v284 = db_create_id_for_value(*v32, "com.apple.x11-mach-o-executable");
        if (v284 != -2) {
          CFDictionarySetValue(v177, (const void *)(v284 & 0x7FFFFFFF), (const void *)0x6B);
        }
        int v285 = db_create_id_for_value(*v32, "public.object-code");
        if (v285 != -2) {
          CFDictionarySetValue(v177, (const void *)(v285 & 0x7FFFFFFF), (const void *)0x6C);
        }
        int v286 = db_create_id_for_value(*v32, "com.microsoft.windows-executable");
        if (v286 != -2) {
          CFDictionarySetValue(v177, (const void *)(v286 & 0x7FFFFFFF), (const void *)0x6D);
        }
        int v287 = db_create_id_for_value(*v32, "com.microsoft.windows-dynamic-link-library");
        if (v287 != -2) {
          CFDictionarySetValue(v177, (const void *)(v287 & 0x7FFFFFFF), (const void *)0x6E);
        }
        int v288 = db_create_id_for_value(*v32, "com.sun.java-archive");
        if (v288 != -2) {
          CFDictionarySetValue(v177, (const void *)(v288 & 0x7FFFFFFF), (const void *)0x6F);
        }
        int v289 = db_create_id_for_value(*v32, "com.sun.web-application-archive");
        if (v289 != -2) {
          CFDictionarySetValue(v177, (const void *)(v289 & 0x7FFFFFFF), (const void *)0x70);
        }
        int v290 = db_create_id_for_value(*v32, "com.apple.xcode.plugindata");
        if (v290 != -2) {
          CFDictionarySetValue(v177, (const void *)(v290 & 0x7FFFFFFF), (const void *)0x71);
        }
        int v291 = db_create_id_for_value(*v32, "com.apple.dt.playground");
        if (v291 != -2) {
          CFDictionarySetValue(v177, (const void *)(v291 & 0x7FFFFFFF), (const void *)0x72);
        }
        int v292 = db_create_id_for_value(*v32, "com.apple.iwork.numbers.sffnumbers");
        if (v292 != -2) {
          CFDictionarySetValue(v177, (const void *)(v292 & 0x7FFFFFFF), (const void *)0x73);
        }
        int v293 = db_create_id_for_value(*v32, "com.apple.iwork.numbers.numbers");
        if (v293 != -2) {
          CFDictionarySetValue(v177, (const void *)(v293 & 0x7FFFFFFF), (const void *)0x74);
        }
        int v294 = db_create_id_for_value(*v32, "com.apple.iwork.numbers.template");
        if (v294 != -2) {
          CFDictionarySetValue(v177, (const void *)(v294 & 0x7FFFFFFF), (const void *)0x75);
        }
        int v295 = db_create_id_for_value(*v32, "com.microsoft.excel.xls");
        if (v295 != -2) {
          CFDictionarySetValue(v177, (const void *)(v295 & 0x7FFFFFFF), (const void *)0x76);
        }
        int v296 = db_create_id_for_value(*v32, "org.openxmlformats.spreadsheetml.sheet");
        if (v296 != -2) {
          CFDictionarySetValue(v177, (const void *)(v296 & 0x7FFFFFFF), (const void *)0x77);
        }
        int v297 = db_create_id_for_value(*v32, "public.spreadsheet");
        if (v297 != -2) {
          CFDictionarySetValue(v177, (const void *)(v297 & 0x7FFFFFFF), (const void *)0x78);
        }
        int v298 = db_create_id_for_value(*v32, "public.xml");
        if (v298 != -2) {
          CFDictionarySetValue(v177, (const void *)(v298 & 0x7FFFFFFF), (const void *)0x79);
        }
        int v299 = db_create_id_for_value(*v32, "com.apple.log");
        if (v299 != -2) {
          CFDictionarySetValue(v177, (const void *)(v299 & 0x7FFFFFFF), (const void *)0x7A);
        }
        int v300 = db_create_id_for_value(*v32, "com.apple.crashreport");
        if (v300 != -2) {
          CFDictionarySetValue(v177, (const void *)(v300 & 0x7FFFFFFF), (const void *)0x7B);
        }
        int v301 = db_create_id_for_value(*v32, "com.apple.spinreport");
        if (v301 != -2) {
          CFDictionarySetValue(v177, (const void *)(v301 & 0x7FFFFFFF), (const void *)0x7C);
        }
        int v302 = db_create_id_for_value(*v32, "com.apple.panicreport");
        if (v302 != -2) {
          CFDictionarySetValue(v177, (const void *)(v302 & 0x7FFFFFFF), (const void *)0x7D);
        }
        int v303 = db_create_id_for_value(*v32, "com.apple.shutdownstall");
        if (v303 != -2) {
          CFDictionarySetValue(v177, (const void *)(v303 & 0x7FFFFFFF), (const void *)0x7E);
        }
        int v304 = db_create_id_for_value(*v32, "com.apple.hangreport");
        if (v304 != -2) {
          CFDictionarySetValue(v177, (const void *)(v304 & 0x7FFFFFFF), (const void *)0x7F);
        }
        int v305 = db_create_id_for_value(*v32, "public.json");
        if (v305 != -2) {
          CFDictionarySetValue(v177, (const void *)(v305 & 0x7FFFFFFF), (const void *)0x80);
        }
        int v306 = db_create_id_for_value(*v32, "public.log");
        if (v306 != -2) {
          CFDictionarySetValue(v177, (const void *)(v306 & 0x7FFFFFFF), (const void *)0x81);
        }
        int v307 = db_create_id_for_value(*v32, "public.content");
        if (v307 != -2) {
          CFDictionarySetValue(v177, (const void *)(v307 & 0x7FFFFFFF), (const void *)0x82);
        }
        int v308 = db_create_id_for_value(*v32, "com.microsoft.excel.sheet.binary.macroenabled");
        if (v308 != -2) {
          CFDictionarySetValue(v177, (const void *)(v308 & 0x7FFFFFFF), (const void *)0x83);
        }
        int v309 = db_create_id_for_value(*v32, "org.openxmlformats.spreadsheetml.sheet.macroenabled");
        if (v309 != -2) {
          CFDictionarySetValue(v177, (const void *)(v309 & 0x7FFFFFFF), (const void *)0x84);
        }
        int v310 = db_create_id_for_value(*v32, "com.apple.protected-mpeg-4-audio-b");
        if (v310 != -2) {
          CFDictionarySetValue(v177, (const void *)(v310 & 0x7FFFFFFF), (const void *)0x85);
        }
        int v311 = db_create_id_for_value(*v32, "com.audible.aa-audiobook");
        if (v311 != -2) {
          CFDictionarySetValue(v177, (const void *)(v311 & 0x7FFFFFFF), (const void *)0x86);
        }
        int v312 = db_create_id_for_value(*v32, "com.audible.aax-audiobook");
        if (v312 != -2) {
          CFDictionarySetValue(v177, (const void *)(v312 & 0x7FFFFFFF), (const void *)0x87);
        }
        int v313 = db_create_id_for_value(*v32, "com.apple.tips");
        if (v313 != -2) {
          CFDictionarySetValue(v177, (const void *)(v313 & 0x7FFFFFFF), (const void *)0x88);
        }
        int v314 = db_create_id_for_value(*v32, "com.apple.helpviewer");
        if (v314 != -2) {
          CFDictionarySetValue(v177, (const void *)(v314 & 0x7FFFFFFF), (const void *)0x89);
        }
        int v315 = db_create_id_for_value(*v32, "com.apple.help.topic");
        if (v315 != -2) {
          CFDictionarySetValue(v177, (const void *)(v315 & 0x7FFFFFFF), (const void *)0x8A);
        }
        *(void *)(a1 + 6600) = CFDictionaryCreateCopy(v176, v177);
        CFRelease(v177);
      }
      uint64_t v316 = "kMDItemPhysicalSize";
    }
    *(_DWORD *)(a1 + 2004) = db_create_id_for_field(*(_DWORD **)(a1 + 1184), v316, 0x300u, 7);
    id_for_int field = db_create_id_for_field(*(_DWORD **)(a1 + 1184), "kMDItemWhereFroms", 0x220u, 11);
  }
  *(_DWORD *)(a1 + 2020) = id_for_field;
  int v318 = *(int **)(a1 + 1184);
  if (*v318 != 1685287992)
  {
    int v346 = *__error();
    CFNumberRef v347 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v347, OS_LOG_TYPE_ERROR))
    {
      int v348 = *v318;
      *(_DWORD *)statfs buf = 136315650;
      uint64_t v370 = "db_create_static_strings";
      __int16 v371 = 1024;
      int v372 = 436;
      __int16 v373 = 1024;
      int v374 = v348;
      _os_log_error_impl(&dword_1BD672000, v347, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v346;
    CFNumberRef v349 = __si_assert_copy_extra_329();
    CFDictionaryRef v339 = v349;
    CFNumberRef v350 = "";
    if (v349) {
      CFNumberRef v350 = v349;
    }
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 436, v350);
    goto LABEL_631;
  }
  unsigned int v319 = v318[201];
  *(_WORD *)statfs buf = 18959;
  v318[234] = _get_id_for_string((unint64_t)v318, 0, "kMDItemLanguages", 16, ((v319 >> 3) & 1) == 0, buf);
  unsigned int v320 = v318[201];
  if ((v320 & 4) != 0) {
    __int16 v321 = 17167;
  }
  else {
    __int16 v321 = -15601;
  }
  *(_WORD *)statfs buf = v321;
  v318[235] = _get_id_for_string((unint64_t)v318, 0, "kMDItemKind", 11, ((v320 >> 3) & 1) == 0, buf);
  unsigned int v322 = v318[201];
  if ((v322 & 4) != 0) {
    __int16 v323 = 17163;
  }
  else {
    __int16 v323 = -15605;
  }
  *(_WORD *)statfs buf = v323;
  v318[236] = _get_id_for_string((unint64_t)v318, 0, "kMDItemDisplayName", 18, ((v322 >> 3) & 1) == 0, buf);
  unsigned int v324 = v318[201];
  if ((v324 & 4) != 0) {
    __int16 v325 = 779;
  }
  else {
    __int16 v325 = -31989;
  }
  *(_WORD *)statfs buf = v325;
  v318[237] = _get_id_for_string((unint64_t)v318, 0, "kMDItemKeywords", 15, ((v324 >> 3) & 1) == 0, buf);
  unsigned int v326 = v318[201];
  if ((v326 & 4) != 0) {
    __int16 v327 = 779;
  }
  else {
    __int16 v327 = -31989;
  }
  *(_WORD *)statfs buf = v327;
  v318[238] = _get_id_for_string((unint64_t)v318, 0, "com_apple_system_prefs_keywords", 31, ((v326 >> 3) & 1) == 0, buf);
  unsigned int v328 = v318[201];
  if ((v328 & 4) != 0) {
    __int16 v329 = 783;
  }
  else {
    __int16 v329 = -31985;
  }
  *(_WORD *)statfs buf = v329;
  v318[239] = _get_id_for_string((unint64_t)v318, 0, "kMDItemKeywords", 15, ((v328 >> 3) & 1) == 0, buf);
  unsigned int v330 = v318[201];
  if ((v330 & 4) != 0) {
    __int16 v331 = 783;
  }
  else {
    __int16 v331 = -31985;
  }
  *(_WORD *)statfs buf = v331;
  v318[240] = _get_id_for_string((unint64_t)v318, 0, "com_apple_system_prefs_keywords", 31, ((v330 >> 3) & 1) == 0, buf);
  *(_DWORD *)(a1 + 2008) = db_create_id_for_field(*(_DWORD **)(a1 + 1184), "kMDItemDisplayName", 0x12A0u, 11);
  *(_DWORD *)(a1 + 2012) = db_create_id_for_field(*(_DWORD **)(a1 + 1184), "kMDItemLanguages", 0x330u, 11);
  *(_DWORD *)(a1 + 2028) = db_create_id_for_field(*(_DWORD **)(a1 + 1184), "kMDItemRecipientEmailAddresses", 0x220u, 11);
  *(_DWORD *)(a1 + 2032) = db_create_id_for_field(*(_DWORD **)(a1 + 1184), "kMDItemPrimaryRecipientEmailAddresses", 0x4320u, 11);
  *(_DWORD *)(a1 + 2036) = db_create_id_for_field(*(_DWORD **)(a1 + 1184), "kMDItemAdditionalRecipientEmailAddresses", 0x4320u, 11);
  *(_DWORD *)(a1 + 2040) = db_create_id_for_field(*(_DWORD **)(a1 + 1184), "kMDItemHiddenAdditionalRecipientEmailAddresses", 0x4320u, 11);
  *(_DWORD *)(a1 + 2044) = db_create_id_for_field(*(_DWORD **)(a1 + 1184), "_kMDItemDisplayNameWithExtensions", 0x228u, 11);
  uint64_t v332 = *(void *)&threadData[18 * v364 + 2];
  unsigned int v333 = v363;
  uint64_t v334 = v332 + 320 * v363;
  *(_DWORD *)(v334 + 312) = v12;
  uint64_t v335 = *(void (**)(void))(v334 + 232);
  if (v335) {
    v335(*(void *)(v332 + 320 * v333 + 288));
  }
  dropThreadId(v364, 0, v351);
  unint64_t v15 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
LABEL_617:
  CFAllocatorRef v336 = *v15;
  *(void *)(a1 + 1792) = CFBagCreateMutable(*v15, 64, MEMORY[0x1E4F1D520]);
  *(void *)(a1 + 1800) = CFDictionaryCreateMutable(v336, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  return pthread_mutex_init((pthread_mutex_t *)(a1 + 1808), 0);
}

const void *SICopyProperty(uint64_t a1, const void *a2)
{
  if (a1 && *(void *)(a1 + 1184))
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 1496));
    CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 1488);
    if (!v4)
    {
      if (!si_create_propertydict(a1, 0, 0))
      {
        int v6 = 0;
LABEL_10:
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1496));
        return v6;
      }
      CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 1488);
    }
    unsigned int Value = CFDictionaryGetValue(v4, a2);
    int v6 = Value;
    if (Value) {
      CFRetain(Value);
    }
    goto LABEL_10;
  }
  return 0;
}

uint64_t __SIInitIndex_block_invoke_998(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 56);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  if ((v2 + 1) > *(_DWORD *)(v3 + 24)) {
    int v4 = v2 + 1;
  }
  else {
    int v4 = *(_DWORD *)(v3 + 24);
  }
  *(_DWORD *)(v3 + 24) = v4;
  return 1;
}

uint64_t __SIInitIndex_block_invoke_1007(uint64_t a1)
{
  SIInitIndex_override = 0;
  SIInitIndex_lowLatency = (*(_DWORD *)(*(void *)(a1 + 32) + 6576) & 0x40000) != 0;
  Boolean keyExistsAndHasValidFormat = 0;
  uint64_t result = CFPreferencesGetAppBooleanValue(@"LOW_LATENCY", @"com.apple.SpotlightServer", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
  {
    SIInitIndex_lowLatency = result != 0;
    SIInitIndex_override = 1;
  }
  return result;
}

void si_getsizes(uint64_t a1, int a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 1184)) {
    return;
  }
  indexmetastd::string::pointer data = si_create_indexmetadata(a1, 1);
  if (!indexmetadata)
  {
    int v14 = *__error();
    unint64_t v15 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)statfs buf = 136315394;
      *(void *)int v56 = "si_getsizes";
      *(_WORD *)&v56[8] = 1024;
      *(_DWORD *)&v56[10] = 1238;
      _os_log_error_impl(&dword_1BD672000, v15, OS_LOG_TYPE_ERROR, "%s:%d: Failed to get metadata dbo", buf, 0x12u);
    }
    *__error() = v14;
    BOOL v16 = 0;
    goto LABEL_34;
  }
  unint64_t v53 = 0;
  long long __src = 0;
  int v5 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v6 = setThreadIdAndInfo(-1, (long long *)sSDBExceptionCallbacks, *(void *)(a1 + 1184), 0x40000000, v5);
  unsigned int v51 = HIDWORD(v6);
  unsigned int v52 = v6;
  unsigned int v49 = v8;
  unsigned int v50 = v7;
  uint64_t v9 = *(void *)&threadData[18 * v6 + 2];
  uint64_t v10 = v9 + 320 * HIDWORD(v6);
  *(unsigned char *)(v10 + 216) = 0;
  int v11 = *(_DWORD *)(v10 + 312);
  int v12 = *(void (**)(void))(v10 + 224);
  if (v12) {
    v12(*(void *)(v9 + 320 * HIDWORD(v6) + 288));
  }
  if (!_setjmp((int *)v10))
  {
    if (db_get_field(*(int **)(a1 + 1184), (uint64_t)indexmetadata, "kMDStoreAccumulatedSizes", &v53, &__src))
    {
      int v17 = *__error();
      uint64_t v18 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)statfs buf = 136315394;
        *(void *)int v56 = "si_getsizes";
        *(_WORD *)&v56[8] = 1024;
        *(_DWORD *)&v56[10] = 1211;
        _os_log_error_impl(&dword_1BD672000, v18, OS_LOG_TYPE_ERROR, "%s:%d: Failed to get kMDStoreAccumulatedSizes", buf, 0x12u);
      }
      *__error() = v17;
    }
    else
    {
      if (*(unsigned char *)(a1 + 2064)) {
        uint64_t v19 = 256;
      }
      else {
        uint64_t v19 = 22;
      }
      size_t v20 = *(unsigned int *)(v53 + 8);
      if (v20 <= 8 * (int)v19)
      {
        memcpy((void *)(a1 + 7032), __src, v20);
        uint64_t v28 = 0;
        uint64_t v29 = v19 - 1;
        uint64_t v30 = a1 + 7040;
        *(void *)&long long v31 = 67109376;
        uint64_t v32 = dword_1E9FC90C0;
        int v33 = 0;
        do
        {
          int v34 = v33;
          uint64_t v35 = v32;
          if ((int)v32 >= 5)
          {
            long long v48 = v31;
            int v46 = *__error();
            log = _SILogForLogForCategory(7);
            if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v36 = *(void *)(v30 + 8 * v28);
              *(_DWORD *)statfs buf = v48;
              *(_DWORD *)int v56 = v28 + 1;
              *(_WORD *)&v56[4] = 2048;
              *(void *)&v56[6] = v36;
              _os_log_impl(&dword_1BD672000, log, OS_LOG_TYPE_DEFAULT, "Size %d: %lld", buf, 0x12u);
            }
            *__error() = v46;
            uint64_t v35 = dword_1E9FC90C0;
            long long v31 = v48;
          }
          uint64_t v32 = v35;
          if (*(uint64_t *)(v30 + 8 * v28) < 0) {
            int v33 = 1;
          }
          else {
            int v33 = v34;
          }
          ++v28;
          char v13 = v33;
        }
        while (v29 != v28);
LABEL_21:
        if (db_get_field(*(int **)(a1 + 1184), (uint64_t)indexmetadata, "kMDStoreAccumulatedCounts", &v53, &__src))
        {
          int v21 = *__error();
          char v22 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)statfs buf = 136315394;
            *(void *)int v56 = "si_getsizes";
            *(_WORD *)&v56[8] = 1024;
            *(_DWORD *)&v56[10] = 1232;
            _os_log_error_impl(&dword_1BD672000, v22, OS_LOG_TYPE_ERROR, "%s:%d: Failed to get kMDStoreAccumulatedCounts", buf, 0x12u);
          }
          *__error() = v21;
        }
        else
        {
          if (*(unsigned char *)(a1 + 2064)) {
            uint64_t v23 = 256;
          }
          else {
            uint64_t v23 = 22;
          }
          size_t v24 = *(unsigned int *)(v53 + 8);
          if (v24 <= 4 * (int)v23)
          {
            memcpy((void *)(a1 + 9080), __src, v24);
            uint64_t v37 = v23 - 1;
            uint64_t v38 = 0;
            *(void *)&long long v39 = 67109376;
            uint64_t v40 = dword_1E9FC90C0;
            do
            {
              uint64_t v41 = v40;
              if ((int)v40 >= 5)
              {
                long long v47 = v39;
                int v45 = *__error();
                int v43 = _SILogForLogForCategory(7);
                if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
                {
                  int v42 = *(_DWORD *)(a1 + 9084 + 4 * v38);
                  *(_DWORD *)statfs buf = v47;
                  *(_DWORD *)int v56 = v38 + 1;
                  *(_WORD *)&v56[4] = 1024;
                  *(_DWORD *)&v56[6] = v42;
                  _os_log_impl(&dword_1BD672000, v43, OS_LOG_TYPE_DEFAULT, "Count %d: %d", buf, 0xEu);
                }
                *__error() = v45;
                uint64_t v41 = dword_1E9FC90C0;
                long long v39 = v47;
              }
              uint64_t v40 = v41;
              ++v38;
            }
            while (v37 != v38);
            goto LABEL_30;
          }
        }
        char v13 = 1;
LABEL_30:
        uint64_t v25 = *(void *)&threadData[18 * v52 + 2];
        uint64_t v26 = v25 + 320 * v51;
        *(_DWORD *)(v26 + 312) = v11;
        int v27 = *(void (**)(void))(v26 + 232);
        if (v27) {
          v27(*(void *)(v25 + 320 * v51 + 288));
        }
        dropThreadId(v52, 0, v5);
        goto LABEL_33;
      }
    }
    char v13 = 1;
    goto LABEL_21;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)statfs buf = 0;
    _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
  }
  *(_DWORD *)(v10 + 312) = v11;
  CIOnThreadCleanUpReset(v49);
  dropThreadId(v52, 1, v5);
  CICleanUpReset(v52, v50);
  char v13 = 0;
LABEL_33:
  BOOL v16 = (v13 & 1) == 0;
LABEL_34:
  free(indexmetadata);
  if (a2)
  {
    if (!v16) {
      _SIRecomputeSizesWithCallback(a1, 0, &__block_literal_global_7761);
    }
  }
}

void si_inflateLeakedRemapping(uint64_t a1, char a2, uint64_t a3, __CFArray *a4)
{
  unsigned int v8 = (void *)CIDecodeRemappingMetadataWithIndex(*(_DWORD *)(a1 + 32), 0, a3);
  if (v8)
  {
    uint64_t v9 = v8;
    CFArrayAppendValue(a4, v8);
    if ((a2 & 1) == 0)
    {
      unint64_t v10 = ContentIndexRemappingNextDocId(v9, &v12);
      int v11 = malloc_type_malloc(0x20uLL, 0x20040DC1BFBCFuLL);
      *int v11 = a1;
      v11[1] = si_indexForDocId(a1, v10);
      v11[2] = CFRetain(v9);
      if (v11[1]) {
        si_enqueue_work(*(void *)(a1 + 1056), (uint64_t)si_remapForIndex, (uint64_t)v11);
      }
      else {
        free(v11);
      }
    }
    CFRelease(v9);
    *(void *)(a1 + 2376) = a3 + 1;
  }
}

void si_populateClientStates(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 1184))
  {
    if (*(unsigned char *)(a1 + 2064))
    {
      CFDictionaryRef v2 = *(const __CFDictionary **)(a1 + 2080);
      if (v2)
      {
        CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 2080));
        uint64_t v19 = (uint64_t)&v19;
        MEMORY[0x1F4188790](Count);
        int v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
        bzero(v5, v4);
        CFDictionaryGetKeysAndValues(v2, (const void **)v5, 0);
        if (Count >= 1)
        {
          uint64_t v6 = 0;
          CFAllocatorRef v21 = (CFAllocatorRef)*MEMORY[0x1E4F1CF80];
          unsigned int v7 = "_kMDItemStateInfo_";
          do
          {
            CFStringRef v8 = *(const __CFString **)&v5[8 * v6];
            char v22 = 0;
            if (CFStringCompare(v8, @"com.apple.searchd", 1uLL)
              && !si_get_object_for_identifier_createParentDBO(a1, @"com.apple.searchd", v8, 0, 0, 0, &v22, 0))
            {
              uint64_t v9 = (uint64_t)v22;
              int v25 = 0;
              unint64_t v23 = 0;
              size_t v24 = 0;
              if (!db_get_field(*(int **)(a1 + 1184), (uint64_t)v22, "_kMDItemExternalID", &v23, &v24))
              {
                CFStringRef v10 = CFStringCreateWithCString(v21, v24, 0x8000100u);
                if (v10)
                {
                  CFStringRef v20 = v10;
                  clientstates_dict = (__CFDictionary *)si_get_clientstates_dict(a1, v10);
                  while (db_next_field(*(_DWORD **)(a1 + 1184), v9, 0, &v25, (uint64_t *)&v24, &v23) == 35)
                  {
                    if (*(_WORD *)v23 == 14)
                    {
                      unint64_t v12 = v24;
                      if (!strncmp(v7, v24, 0x11uLL))
                      {
                        CFAllocatorRef v13 = v21;
                        CFStringRef v14 = CFStringCreateWithCString(v21, v12, 0x8000100u);
                        CFDataRef v15 = CFDataCreate(v13, (const UInt8 *)(v23 + 13), *(unsigned int *)(v23 + 8));
                        BOOL v16 = v7;
                        CFDataRef v17 = v15;
                        CFDictionarySetValue(clientstates_dict, v14, v15);
                        CFDataRef v18 = v17;
                        unsigned int v7 = v16;
                        CFRelease(v18);
                        CFRelease(v14);
                      }
                    }
                  }
                  CFRelease(v20);
                }
              }
              free(v22);
            }
            ++v6;
          }
          while (v6 != Count);
        }
      }
    }
  }
}

BOOL si_check_version_property(uint64_t a1, const void *a2)
{
  CFNumberRef v2 = (const __CFNumber *)SICopyProperty(a1, a2);
  if (v2)
  {
    CFNumberRef v3 = v2;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v3))
    {
      uint64_t valuePtr = 0;
      CFNumberGetValue(v3, kCFNumberCFIndexType, &valuePtr);
      CFRelease(v3);
      return valuePtr != 5;
    }
    CFRelease(v3);
  }
  return 1;
}

uint64_t si_playbackJournal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)a2;
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 2064))
  {
    CFStringRef v8 = (unsigned int *)malloc_type_calloc(1uLL, 0x78uLL, 0x10F004029A00669uLL);
    uint64_t v9 = (uint64_t)v8;
    if (v8)
    {
      *((void *)v8 + 2) = -1;
      atomic_store(1u, v8);
      if (v5) {
        atomic_fetch_add_explicit(v5 + 8, 1u, memory_order_relaxed);
      }
      *((void *)v8 + 1) = v5;
      *((void *)v8 + 3) = fd_lseek(v5, 0, 2);
      uint64_t v10 = a1;
      uint64_t v11 = v9;
    }
    else
    {
      uint64_t v10 = a1;
      uint64_t v11 = 0;
    }
    uint64_t v33 = preparseMobileJournal(v10, v11, a3);
    si_sync_ctx_create_with_defer_fd(a1, 0);
    atomic_fetch_add(journalsEnqueued, 1u);
    uint64_t v35 = v34[11];
    if (v35 <= v33 + 1) {
      uint64_t v35 = v33 + 1;
    }
    v34[11] = v35;
    if (v5) {
      atomic_fetch_add_explicit(v5 + 8, 1u, memory_order_relaxed);
    }
    v34[8] = v5;
    v34[5] = si_playbackSyncFinished;
    v34[6] = v9;
    si_enqueue_work_with_qos(*(void *)(a1 + 1096), 9, (uint64_t)si_sync_index_delayed0, (uint64_t)v34);
    return v33;
  }
  uint64_t v45 = 0;
  int v12 = _fd_acquire_fd(a2, &v45);
  if (v12 < 0)
  {
    uint64_t v16 = 0;
    st_std::string::size_type size = 0;
    goto LABEL_72;
  }
  int v13 = v12;
  uint64_t v41 = v5;
  CFStringRef v14 = (unsigned int *)malloc_type_malloc(0x100000uLL, 0xF15AB47EuLL);
  memset(&v44, 0, sizeof(v44));
  int __fd = v13;
  fstat(v13, &v44);
  if (v44.st_size >= 0x100000uLL) {
    st_std::string::size_type size = 0x100000;
  }
  else {
    st_std::string::size_type size = v44.st_size;
  }
  if (!st_size)
  {
    off_t v3 = 0;
    off_t v4 = 0;
    uint64_t v16 = 0;
    goto LABEL_71;
  }
  uint64_t v16 = 0;
  off_t v4 = 0;
  off_t v17 = 0;
  int64_t v43 = 0x100000;
  do
  {
    if (pread(__fd, v14, st_size, v17) < 1 || (off_t v4 = st_size + v17, v17 + 12 > st_size + v17))
    {
      st_std::string::size_type size = 0;
      off_t v3 = v17;
      break;
    }
    off_t v18 = v17;
    off_t v40 = v17;
    while (1)
    {
      uint64_t v19 = (char *)v14 + v18 - v17;
      int v20 = *(_DWORD *)v19;
      if (*(_DWORD *)v19 == -262275347 || v20 == -267518227) {
        break;
      }
      if (v20 == -266469651) {
        goto LABEL_27;
      }
      if (v20 != -263323923)
      {
        if (v20 != -265421075)
        {
          off_t v3 = v18;
          st_std::string::size_type size = 1;
          goto LABEL_71;
        }
LABEL_27:
        uint64_t v25 = *((unsigned int *)v19 + 1);
        off_t v3 = v25 + 12 + v18;
        if (v3 > v44.st_size || v25 + 12 > v43) {
          goto LABEL_69;
        }
        if (v3 > v4) {
          goto LABEL_55;
        }
        uint64_t v27 = *((unsigned int *)v19 + 2);
        if (v25 != 8 * v27) {
          goto LABEL_69;
        }
        memset(buf, 0, sizeof(buf));
        if (v27)
        {
          uint64_t v28 = (uint64_t *)(v19 + 12);
          do
          {
            if ((pushMove(buf, *v28) & 1) == 0)
            {
              flushPlaybackPossibleMoves(a1, (uint64_t)buf, v20 == -266469651);
              pushMove(buf, *v28);
            }
            ++v28;
            --v27;
          }
          while (v27);
        }
        flushPlaybackPossibleMoves(a1, (uint64_t)buf, v20 == -266469651);
        if (*(void *)buf) {
          munmap(*(void **)buf, 16 * *MEMORY[0x1E4F14B00]);
        }
        goto LABEL_42;
      }
      uint64_t v29 = *((unsigned int *)v19 + 1);
      off_t v3 = v29 + 12 + v18;
      if (v3 > v44.st_size || v29 + 12 > v43) {
        goto LABEL_69;
      }
      if (v3 > v4) {
        goto LABEL_55;
      }
      if (v29 != 16 || *((_DWORD *)v19 + 2) != 2)
      {
LABEL_69:
        off_t v3 = v18;
        st_std::string::size_type size = 0;
        goto LABEL_71;
      }
      uint64_t v31 = *(void *)(v19 + 12);
      if (v31 >= 3)
      {
        uint64_t v32 = *(void *)(v19 + 20);
        if (v32 >= 3) {
          SITransferAttributes(a1, v31, v32, 0, 0, 0);
        }
      }
LABEL_42:
      ++v16;
      off_t v18 = v3;
      if (v3 + 12 > v4) {
        goto LABEL_56;
      }
    }
    uint64_t v22 = *((unsigned int *)v19 + 1);
    off_t v23 = v18 + 12;
    off_t v24 = v18 + 12 + v22;
    if (v24 <= v4)
    {
      si_playbackRecord(a1);
      off_t v3 = v23 + *((unsigned int *)v19 + 1);
      goto LABEL_42;
    }
    if (v24 > v44.st_size) {
      goto LABEL_69;
    }
    if (v22 + 12 > v43)
    {
      CFStringRef v14 = (unsigned int *)malloc_type_realloc(v14, v22 + 12, 0xC2E52FE9uLL);
      int64_t v43 = malloc_size(v14);
      pread(__fd, v14, v43, v18);
      si_playbackRecord(a1);
      off_t v3 = v23 + v14[1];
      off_t v17 = v18;
      goto LABEL_42;
    }
LABEL_55:
    off_t v3 = v18;
LABEL_56:
    if (v3 == v40)
    {
      st_std::string::size_type size = 0;
      off_t v3 = v40;
      break;
    }
    if (v43 >= (unint64_t)(v44.st_size - v3)) {
      st_std::string::size_type size = v44.st_size - v3;
    }
    else {
      st_std::string::size_type size = v43;
    }
    off_t v17 = v3;
  }
  while (st_size);
LABEL_71:
  free(v14);
  int v5 = v41;
  _fd_release_fd(v41, __fd, 0, v45);
LABEL_72:
  int v36 = *__error();
  uint64_t v37 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)statfs buf = 134218752;
    *(void *)&uint8_t buf[4] = v16;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = st_size;
    *(_WORD *)&buf[22] = 2048;
    *(void *)&unsigned char buf[24] = v3;
    __int16 v47 = 2048;
    off_t v48 = v4;
    _os_log_impl(&dword_1BD672000, v37, OS_LOG_TYPE_DEFAULT, "Played back %ld records (skipped %ld), read %lld/%lld bytes", buf, 0x2Au);
  }
  *__error() = v36;
  si_sync_ctx_create_with_defer_fd(a1, 0);
  atomic_fetch_add(journalsEnqueued, 1u);
  if (v5) {
    atomic_fetch_add_explicit(v5 + 8, 1u, memory_order_relaxed);
  }
  *(void *)(v38 + 64) = v5;
  si_enqueue_work_with_qos(*(void *)(a1 + 1096), 9, (uint64_t)si_sync_index_delayed0, v38);
  return -1;
}

void __SIInitIndex_block_invoke_1014(uint64_t a1, int a2)
{
  if (!a2)
  {
    db_set_ignore_vectors(*(void *)(*(void *)(a1 + 32) + 1184), a2);
    uint64_t v4 = *(void *)(a1 + 32);
    _si_set_version_property(v4, @"VEC_EXT_CLEARED_JOURNALS", 1);
  }
}

CFPropertyListRef si_read_clientstates_file(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 2064)) {
    return 0;
  }
  uint64_t v1 = (atomic_uint *)fd_create_protected(*(_DWORD *)(a1 + 32), "clientstatesmetafile", 0x20000000, 3u);
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = fd_lseek(v1, 0, 2);
    if (v3)
    {
      size_t v4 = v3;
      int v5 = (const UInt8 *)fd_mmap((uint64_t)v2);
      if (v5 != (const UInt8 *)-1)
      {
        uint64_t v6 = (UInt8 *)v5;
        CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFDataRef v8 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v5, v4);
        if (v8)
        {
          CFDataRef v9 = v8;
          CFPropertyListRef v10 = CFPropertyListCreateWithData(v7, v8, 0, 0, 0);
          CFRelease(v9);
        }
        else
        {
          CFPropertyListRef v10 = 0;
        }
        munmap(v6, v4);
        fd_release(v2);
        return v10;
      }
      int v13 = *__error();
      CFStringRef v14 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        off_t v18 = __error();
        uint64_t v19 = strerror(*v18);
        int v20 = 136315650;
        CFAllocatorRef v21 = "si_read_clientstates_file";
        __int16 v22 = 1024;
        int v23 = 4824;
        __int16 v24 = 2080;
        uint64_t v25 = v19;
        _os_log_error_impl(&dword_1BD672000, v14, OS_LOG_TYPE_ERROR, "%s:%d: si_read_clientstates_file: mmap failed: %s", (uint8_t *)&v20, 0x1Cu);
      }
      *__error() = v13;
      fd_release(v2);
      return 0;
    }
  }
  int v11 = *__error();
  int v12 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    uint64_t v16 = __error();
    off_t v17 = strerror(*v16);
    int v20 = 136315650;
    CFAllocatorRef v21 = "si_read_clientstates_file";
    __int16 v22 = 1024;
    int v23 = 4830;
    __int16 v24 = 2080;
    uint64_t v25 = v17;
    _os_log_error_impl(&dword_1BD672000, v12, OS_LOG_TYPE_ERROR, "%s:%d: si_read_clientstates_file: open client state meta file failed: %s", (uint8_t *)&v20, 0x1Cu);
  }
  CFPropertyListRef v10 = 0;
  *__error() = v11;
  return v10;
}

void SIReleaseJournalAssertion(uint64_t a1, const __CFString *Value)
{
  if (a1)
  {
    size_t v4 = (atomic_uint *)fd_create_protected(*(_DWORD *)(a1 + 32), "assertedJournalAttr.1", 0x20000000, 2u);
    if (v4)
    {
      int v5 = v4;
      fd_drop_assertion((uint64_t)v4);
      fd_release(v5);
    }
    if (Value
      || (pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 80)),
          unsigned int Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), @"journalName"),
          pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 80)),
          Value))
    {
      int v6 = *(_DWORD *)(a1 + 32);
      CStringPtr = CFStringGetCStringPtr(Value, 0x8000100u);
      CFDataRef v8 = (atomic_uint *)fd_create_protected(v6, CStringPtr, 0x20000000, 2u);
      if (v8)
      {
        CFDataRef v9 = v8;
        fd_drop_assertion((uint64_t)v8);
        fd_release(v9);
      }
    }
  }
}

void __SIInitIndex_block_invoke_2(uint64_t a1)
{
  int valuePtr = 2;
  CFNumberRef v2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  SISetProperty(*(void *)(a1 + 32), @"YukonRecomputedSizes", v2);
  CFRelease(v2);
}

void resumeHoldQueue(dispatch_object_t object)
{
  if (object) {
    dispatch_resume(object);
  }
}

uint64_t preparseMobileJournal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v173 = a3;
  uint64_t v197 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 2128);
  unint64_t v172 = *(void *)(a2 + 24);
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
  v195[0] = a1;
  v195[1] = a2;
  int v174 = (int *)a2;
  uint64_t v8 = os_transaction_create();
  int v9 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v10 = setThreadIdAndInfo(-1, (long long *)sJournalExceptionCallbacks, (uint64_t)v195, 0x40000000, v9);
  unsigned int v193 = HIDWORD(v10);
  unsigned int v194 = v10;
  unsigned int v191 = v12;
  unsigned int v192 = v11;
  uint64_t v13 = *(void *)&threadData[18 * v10 + 2];
  uint64_t v14 = v13 + 320 * HIDWORD(v10);
  *(unsigned char *)(v14 + 216) = 0;
  int v15 = *(_DWORD *)(v14 + 312);
  uint64_t v16 = *(void (**)(void))(v14 + 224);
  if (v16) {
    v16(*(void *)(v13 + 320 * HIDWORD(v10) + 288));
  }
  CFDictionaryRef v177 = (void *)v8;
  int v17 = v9;
  unsigned int v190 = v194;
  unsigned int v189 = v193;
  unsigned int v188 = v192;
  unsigned int v187 = v191;
  if (_setjmp((int *)v14))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)statfs buf = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
    }
    *(_DWORD *)(v14 + 312) = v15;
    CIOnThreadCleanUpReset(v187);
    dropThreadId(v190, 1, v9);
    CICleanUpReset(v190, v188);
    uint64_t v18 = -1;
    uint64_t v19 = v177;
    if (!v177) {
      return v18;
    }
LABEL_7:
    os_release(v19);
    return v18;
  }
  unint64_t v21 = v172;
  if (!v172 || (si_mobile_journal_map_activate(v174), uint64_t v168 = *((void *)v174 + 2), v168 == -1))
  {
    uint64_t v18 = -1;
    uint64_t v30 = (uint64_t)v177;
    goto LABEL_154;
  }
  unint64_t v176 = v172;
  int v179 = v15;
  int v180 = v9;
  uint64_t v175 = Mutable;
  uint64_t v178 = v5;
  if (v172 <= 0xB)
  {
    __int16 v24 = (uint64_t *)malloc_type_malloc(0x10uLL, 0x20040A4A59CD2uLL);
    uint64_t v25 = -1;
    uint64_t v26 = -1;
    uint64_t v27 = 0;
    unint64_t v28 = 0;
    uint64_t v29 = 0;
    goto LABEL_147;
  }
  CFAllocatorRef v167 = v6;
  int v166 = -263323923;
  uint64_t v31 = -1;
  CFStringEncoding v165 = 134217984;
  int v164 = -264372499;
  *(void *)&long long v22 = 136316418;
  long long v163 = v22;
  uint64_t v162 = 4030594797;
  *(void *)&long long v22 = 136315906;
  long long v161 = v22;
  *(void *)&long long v22 = 136316930;
  *(void *)&long long v23 = 136316930;
  long long v160 = v23;
  long long v159 = v22;
  *(void *)&long long v22 = 136316418;
  long long v158 = v22;
  uint64_t v32 = -1;
  uint64_t v33 = 0;
  unint64_t v34 = 0;
  uint64_t v35 = 0;
  while (2)
  {
    unint64_t v36 = v34;
    uint64_t v37 = v33;
    uint64_t v38 = v35;
    uint64_t v39 = v31;
    uint64_t v40 = v168 + v34;
    uint64_t v41 = v168 + v34;
    unsigned int v42 = *(_DWORD *)(v168 + v34);
    unint64_t v186 = 0;
    HIDWORD(v43) = v42 + 264306963;
    LODWORD(v43) = v42 + 264306963;
    uint64_t v169 = v39;
    switch((v43 >> 20))
    {
      case 0u:
        unint64_t VInt64 = v2_readVInt64(v40 + 12, (uint64_t *)&v186);
        if (v32 == -1) {
          unint64_t v45 = VInt64;
        }
        else {
          unint64_t v45 = v32;
        }
        unint64_t v46 = VInt64;
        uint64_t v47 = v45;
        goto LABEL_23;
      case 1u:
        uint64_t v48 = v40 + 36;
        unsigned int v49 = v166;
        goto LABEL_42;
      case 2u:
        uint64_t v48 = v40 + 18;
        unsigned int v49 = -261161235;
        goto LABEL_42;
      case 4u:
        uint64_t v48 = v40 + 36;
        unsigned int v49 = -262275347;
LABEL_42:
        unint64_t v65 = v2_readVInt64(v48, (uint64_t *)&v186);
        if (v32 == -1) {
          uint64_t v32 = v65;
        }
        int64_t v50 = v65;
        goto LABEL_45;
      default:
        unsigned int v49 = v42;
        unint64_t v46 = 0;
        uint64_t v47 = v32;
        int64_t v50 = 0;
        if (v42 != v164)
        {
LABEL_45:
          int64_t v66 = v50;
          uint64_t v67 = v32;
          if ((v49 & 0xFFEFFFFF) == 0xF04DFEED)
          {
            uint64_t v157 = v32;
            unint64_t v68 = *(unsigned int *)(v40 + 4);
            if ((v68 + 12) < 0x24 || v21 < v36 + (v68 + 12))
            {
              int v123 = *__error();
              int v124 = _SILogForLogForCategory(0);
              if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)statfs buf = 136316418;
                *(void *)&uint8_t buf[4] = "preparseMobileJournal";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 5049;
                *(_WORD *)&buf[18] = 2048;
                *(void *)&buf[20] = v49;
                *(_WORD *)&buf[28] = 2048;
                *(void *)&buf[30] = v68;
                *(_WORD *)&buf[38] = 2048;
                *(void *)&uint8_t buf[40] = v36;
                *(_WORD *)&buf[48] = 2048;
                *(void *)&buf[50] = v176;
                _os_log_error_impl(&dword_1BD672000, v124, OS_LOG_TYPE_ERROR, "%s:%d: Invalid journal entry, magic:0x%08lx, size:%ld, pos:%ld, end:%ld", buf, 0x3Au);
              }
              *__error() = v123;
              uint64_t v32 = v157;
              goto LABEL_145;
            }
            int64_t v156 = v50;
            uint64_t v170 = v38;
            uint64_t v171 = v37;
            unint64_t v155 = v36 + (v68 + 12);
            unint64_t v70 = v68 - 24 - v186;
            if (v68 - 24 <= v186) {
              goto LABEL_74;
            }
            unint64_t v149 = v68 - 24;
            unint64_t v71 = *(unsigned __int16 *)(v40 + 12);
            uint64_t v150 = v40 + 36;
            int v72 = (const char *)(v40 + 36 + v186);
            size_t v73 = strnlen(v72, v68 - 24 - v186);
            size_t v74 = v73;
            if (v73 == v70 || v73 + 1 != (v71 & 0x3FF))
            {
              uint64_t v91 = v71 & 0x3FF;
              int v92 = *__error();
              int v93 = _SILogForLogForCategory(0);
              if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)statfs buf = v159;
                *(void *)&uint8_t buf[4] = "preparseMobileJournal";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 5066;
                *(_WORD *)&buf[18] = 2048;
                *(void *)&buf[20] = v49;
                *(_WORD *)&buf[28] = 2048;
                *(void *)&buf[30] = v68;
                *(_WORD *)&buf[38] = 2048;
                *(void *)&uint8_t buf[40] = v36;
                *(_WORD *)&buf[48] = 2048;
                *(void *)&buf[50] = v176;
                *(_WORD *)&buf[58] = 2048;
                *(void *)&buf[60] = v74;
                *(_WORD *)&buf[68] = 2048;
                *(void *)&buf[70] = v91;
                _os_log_error_impl(&dword_1BD672000, v93, OS_LOG_TYPE_ERROR, "%s:%d: Invalid journal entry, magic:0x%08lx, size:%ld, pos:%ld, end:%ld, len:%ld(%ld)", buf, 0x4Eu);
              }
              *__error() = v92;
LABEL_74:
              int v94 = *__error();
              int v95 = _SILogForLogForCategory(0);
              uint64_t v96 = v171;
              uint64_t v97 = v170;
              if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)statfs buf = v158;
                *(void *)&uint8_t buf[4] = "preparseMobileJournal";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 5073;
                *(_WORD *)&buf[18] = 2048;
                *(void *)&buf[20] = v49;
                *(_WORD *)&buf[28] = 2048;
                *(void *)&buf[30] = v68;
                *(_WORD *)&buf[38] = 2048;
                *(void *)&uint8_t buf[40] = v36;
                *(_WORD *)&buf[48] = 2048;
                *(void *)&buf[50] = v176;
                _os_log_error_impl(&dword_1BD672000, v95, OS_LOG_TYPE_ERROR, "%s:%d: Invalid journal entry - nil bundleID, magic:0x%08lx, size:%ld, pos:%ld, end:%ld", buf, 0x3Au);
              }
              *__error() = v94;
              unint64_t v21 = v172;
              uint64_t v62 = v169;
              if (v156 && v169 && v156 < v169)
              {
                uint64_t v63 = v96 + 1;
                uint64_t v32 = v157;
                unint64_t v28 = v155;
                uint64_t v64 = v97;
              }
              else
              {
                if (v169 <= v156) {
                  uint64_t v62 = v156;
                }
                uint64_t v64 = v97 + 1;
                atomic_fetch_add_explicit(&gEnqueuedSize, v68, memory_order_relaxed);
                uint64_t v32 = v157;
                unint64_t v28 = v155;
                uint64_t v63 = v96;
              }
              goto LABEL_134;
            }
            CFStringRef v75 = CFStringCreateWithCString(v167, v72, v165);
            if (!v75) {
              goto LABEL_74;
            }
            CFStringRef v76 = v75;
            if ((*(_WORD *)(v41 + 14) & 0x7FFF) != 0)
            {
              CFStringRef v77 = CFStringCreateWithCString(v167, &v72[(v71 & 0x3FF) + (v71 >> 10)], v165);
              if (v77)
              {
                CFStringRef v78 = v77;
                if (CFStringHasPrefix(v77, @"_kMDItemStateInfo_")) {
                  int v79 = (void *)CFRetain(v78);
                }
                else {
                  int v79 = (void *)CFStringCreateWithFormat(v167, 0, @"_kMDItemStateInfo_%@", v78);
                }
                int v108 = v79;
                unint64_t v109 = *(unsigned int *)(v41 + 32);
                if (v149 >= v109)
                {
                  clientstates_dict = (__CFDictionary *)si_get_clientstates_dict(a1, v76);
                  int v113 = clientstates_dict;
                  if (v109)
                  {
                    CFDataRef v114 = CFDataCreate(v167, (const UInt8 *)(v150 + v149 - v109), v109);
                    if (v114)
                    {
                      CFDataRef v115 = v114;
                      CFDictionarySetValue(v113, v108, v114);
                      CFRelease(v115);
                    }
                  }
                  else
                  {
                    CFDictionaryRemoveValue(clientstates_dict, v108);
                  }
                }
                else
                {
                  int v110 = *__error();
                  int v111 = _SILogForLogForCategory(0);
                  if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)statfs buf = v161;
                    *(void *)&uint8_t buf[4] = "preparseMobileJournal";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 5101;
                    *(_WORD *)&buf[18] = 2048;
                    *(void *)&buf[20] = v109;
                    *(_WORD *)&buf[28] = 2048;
                    *(void *)&buf[30] = v149;
                    _os_log_error_impl(&dword_1BD672000, v111, OS_LOG_TYPE_ERROR, "%s:%d: Invalid client state size:%ld > size:%ld", buf, 0x26u);
                  }
                  *__error() = v110;
                }
                CFRelease(v108);
                CFRelease(v78);
              }
            }
            uint64_t v116 = v169;
            if (v156 && v169 && v156 < v169)
            {
              uint64_t v117 = v171 + 1;
              uint64_t v118 = v170;
            }
            else
            {
              if (v169 <= v156) {
                uint64_t v119 = v156;
              }
              else {
                uint64_t v119 = v169;
              }
              atomic_fetch_add_explicit(&gEnqueuedSize, v68, memory_order_relaxed);
              CFSetAddValue(v175, v76);
              uint64_t v116 = v119;
              uint64_t v118 = v170 + 1;
              uint64_t v117 = v171;
            }
            unint64_t v28 = v155;
            uint64_t v120 = v117;
            uint64_t v121 = v118;
            uint64_t v122 = v116;
            CFRelease(v76);
            uint64_t v32 = v157;
            uint64_t v63 = v120;
            uint64_t v64 = v121;
            uint64_t v62 = v122;
LABEL_133:
            unint64_t v21 = v172;
            goto LABEL_134;
          }
          if (v49 != -261161235) {
            goto LABEL_145;
          }
          unint64_t v80 = *(unsigned int *)(v40 + 4);
          if ((v80 + 12) < 0x12 || v21 < v36 + (v80 + 12))
          {
            uint64_t v126 = v67;
            int v127 = *__error();
            int v128 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v128, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)statfs buf = 136316418;
              *(void *)&uint8_t buf[4] = "preparseMobileJournal";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 5130;
              *(_WORD *)&buf[18] = 2048;
              *(void *)&buf[20] = 4033806061;
              *(_WORD *)&buf[28] = 2048;
              *(void *)&buf[30] = v80;
              *(_WORD *)&buf[38] = 2048;
              *(void *)&uint8_t buf[40] = v36;
              *(_WORD *)&buf[48] = 2048;
              *(void *)&buf[50] = v176;
              _os_log_error_impl(&dword_1BD672000, v128, OS_LOG_TYPE_ERROR, "%s:%d: Invalid journal entry, magic:0x%08lx, size:%ld, pos:%ld, end:%ld", buf, 0x3Au);
            }
            *__error() = v127;
            uint64_t v32 = v126;
            goto LABEL_145;
          }
          uint64_t v81 = v38;
          unint64_t v82 = v36 + (v80 + 12);
          uint64_t v83 = *(unsigned __int16 *)(v40 + 12);
          int v84 = *(unsigned __int16 *)(v40 + 12);
          unint64_t v85 = v80 - 24 - v186;
          if (v80 - 24 <= v186)
          {
            CFStringRef v90 = 0;
            uint64_t v62 = v169;
LABEL_93:
            if (v84) {
              goto LABEL_94;
            }
            goto LABEL_96;
          }
          if (!*(_WORD *)(v40 + 12))
          {
            uint64_t v62 = v169;
            if (!v50 || !v169 || v50 >= v169)
            {
              if (v169 <= v50) {
                uint64_t v62 = v50;
              }
              atomic_fetch_add_explicit(&gEnqueuedSize, v80, memory_order_relaxed);
              uint64_t v32 = v67;
              unint64_t v28 = v82;
              uint64_t v63 = v37;
              uint64_t v64 = v81 + 1;
              goto LABEL_134;
            }
LABEL_94:
            uint64_t v63 = v37 + 1;
            uint64_t v32 = v67;
            unint64_t v28 = v82;
            goto LABEL_95;
          }
          unint64_t v154 = v36 + (v80 + 12);
          int64_t v156 = v50;
          uint64_t v157 = v67;
          uint64_t v86 = v83;
          int v87 = (const char *)(v40 + v186 + 18);
          size_t v88 = strnlen(v87, v80 - 24 - v186);
          size_t v89 = v88;
          if (v88 == v85 || v88 + 1 != v86)
          {
            int v98 = *__error();
            int v99 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)statfs buf = v160;
              *(void *)&uint8_t buf[4] = "preparseMobileJournal";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 5146;
              *(_WORD *)&buf[18] = 2048;
              *(void *)&buf[20] = 4033806061;
              *(_WORD *)&buf[28] = 2048;
              *(void *)&buf[30] = v80;
              *(_WORD *)&buf[38] = 2048;
              *(void *)&uint8_t buf[40] = v36;
              *(_WORD *)&buf[48] = 2048;
              *(void *)&buf[50] = v176;
              *(_WORD *)&buf[58] = 2048;
              *(void *)&buf[60] = v89;
              *(_WORD *)&buf[68] = 2048;
              *(void *)&buf[70] = v86;
              _os_log_error_impl(&dword_1BD672000, v99, OS_LOG_TYPE_ERROR, "%s:%d: Invalid journal entry, magic:0x%08lx, size:%ld, pos:%ld, end:%ld, len:%ld(%ld)", buf, 0x4Eu);
            }
            CFStringRef v90 = 0;
            *__error() = v98;
          }
          else
          {
            CFStringRef v90 = CFStringCreateWithCString(v167, v87, v165);
          }
          unint64_t v21 = v172;
          uint64_t v62 = v169;
          uint64_t v67 = v157;
          int64_t v66 = v156;
          unint64_t v82 = v154;
          if (!v90) {
            goto LABEL_93;
          }
LABEL_96:
          if (!v66 || !v62 || v66 >= v62)
          {
            if (v62 <= v66) {
              uint64_t v100 = v66;
            }
            else {
              uint64_t v100 = v62;
            }
            uint64_t v101 = v81 + 1;
            atomic_fetch_add_explicit(&gEnqueuedSize, v80, memory_order_relaxed);
            if (v90)
            {
              unint64_t v28 = v82;
              uint64_t v32 = v67;
              CFSetAddValue(v175, v90);
              uint64_t v102 = v37;
LABEL_106:
              uint64_t v103 = v102;
              CFRelease(v90);
              uint64_t v63 = v103;
            }
            else
            {
              uint64_t v32 = v67;
              unint64_t v28 = v82;
              uint64_t v63 = v37;
            }
            uint64_t v64 = v101;
            uint64_t v62 = v100;
            goto LABEL_134;
          }
          unint64_t v28 = v82;
          uint64_t v32 = v67;
          uint64_t v63 = v37 + 1;
          uint64_t v100 = v62;
          uint64_t v101 = v81;
          uint64_t v102 = v37 + 1;
          if (v90) {
            goto LABEL_106;
          }
LABEL_95:
          uint64_t v64 = v81;
LABEL_134:
          uint64_t v31 = v62;
          uint64_t v35 = v64;
          uint64_t v33 = v63;
          unint64_t v34 = v28;
          uint64_t v25 = v62;
          uint64_t v26 = v32;
          uint64_t v29 = v64;
          if (v28 + 12 > v21) {
            goto LABEL_146;
          }
          continue;
        }
LABEL_23:
        uint64_t v32 = v47;
        unint64_t v51 = *(unsigned int *)(v40 + 4);
        unint64_t v28 = v51 + v36 + 12;
        if (v51 <= 0xFFFFFFF3 && v21 >= v28)
        {
          int64_t v53 = v46;
          unint64_t v54 = *(unsigned int *)(v40 + 4);
          if (v51 > v186)
          {
            uint64_t v185 = 0;
            long long v183 = 0uLL;
            uint64_t v184 = 0;
            _MDPlistGetRootPlistObjectFromBytesWithError();
            memset(buf, 0, 24);
            if (_MDPlistArrayGetCount())
            {
              memset(buf, 0, 24);
              _MDPlistArrayGetPlistObjectAtIndex();
              long long v181 = *(_OWORD *)buf;
              uint64_t v182 = *(void *)&buf[16];
              uint64_t v55 = _MDPlistContainerCopyObject();
              if (v55)
              {
                int v56 = (const void *)v55;
                uint64_t v57 = v169;
                if (v53 && v169 && v53 < v169)
                {
                  uint64_t v58 = v37 + 1;
                  uint64_t v59 = v38;
                }
                else
                {
                  atomic_fetch_add_explicit(&gEnqueuedSize, v51, memory_order_relaxed);
                  if (v169 <= v53) {
                    uint64_t v104 = v53;
                  }
                  else {
                    uint64_t v104 = v169;
                  }
                  CFSetAddValue(v175, v56);
                  uint64_t v57 = v104;
                  uint64_t v59 = v38 + 1;
                  uint64_t v58 = v37;
                }
                unint64_t v21 = v172;
                uint64_t v105 = v58;
                uint64_t v106 = v59;
                uint64_t v107 = v57;
                CFRelease(v56);
                uint64_t v63 = v105;
                uint64_t v64 = v106;
                uint64_t v62 = v107;
                goto LABEL_134;
              }
            }
          }
          int v60 = *__error();
          int v61 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)statfs buf = v163;
            *(void *)&uint8_t buf[4] = "preparseMobileJournal";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 5024;
            *(_WORD *)&buf[18] = 2048;
            *(void *)&buf[20] = v162;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = v54;
            *(_WORD *)&buf[38] = 2048;
            *(void *)&uint8_t buf[40] = v36;
            *(_WORD *)&buf[48] = 2048;
            *(void *)&buf[50] = v176;
            _os_log_error_impl(&dword_1BD672000, v61, OS_LOG_TYPE_ERROR, "%s:%d: Invalid journal entry - nil bundleID, magic:0x%08lx, size:%ld, pos:%ld, end:%ld", buf, 0x3Au);
          }
          *__error() = v60;
          uint64_t v62 = v169;
          if (v53 && v169 && v53 < v169)
          {
            uint64_t v63 = v37 + 1;
            uint64_t v64 = v38;
          }
          else
          {
            atomic_fetch_add_explicit(&gEnqueuedSize, v54, memory_order_relaxed);
            if (v169 <= v53) {
              uint64_t v62 = v53;
            }
            uint64_t v64 = v38 + 1;
            uint64_t v63 = v37;
          }
          goto LABEL_133;
        }
        int v129 = *__error();
        int v130 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v130, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)statfs buf = 136316418;
          *(void *)&uint8_t buf[4] = "preparseMobileJournal";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5000;
          *(_WORD *)&buf[18] = 2048;
          *(void *)&buf[20] = 4030594797;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = v51;
          *(_WORD *)&buf[38] = 2048;
          *(void *)&uint8_t buf[40] = v36;
          *(_WORD *)&buf[48] = 2048;
          *(void *)&buf[50] = v176;
          _os_log_error_impl(&dword_1BD672000, v130, OS_LOG_TYPE_ERROR, "%s:%d: Invalid journal entry, magic:0x%08lx, size:%ld, pos:%ld, end:%ld", buf, 0x3Au);
        }
        *__error() = v129;
LABEL_145:
        uint64_t v25 = v169;
        unint64_t v28 = v36;
        uint64_t v63 = v37;
        uint64_t v29 = v38;
        uint64_t v26 = v32;
LABEL_146:
        uint64_t v27 = v63;
        __int16 v24 = (uint64_t *)malloc_type_malloc(0x10uLL, 0x20040A4A59CD2uLL);
        if (v174)
        {
LABEL_147:
          atomic_fetch_add(v174, 1u);
          int v132 = v24;
          int v133 = v174;
        }
        else
        {
          int v132 = v24;
          int v133 = 0;
        }
        unint64_t v152 = v28;
        uint64_t v151 = v27;
        uint64_t v18 = v25;
        uint64_t v153 = v26;
        uint64_t v134 = (uint64_t)v132;
        *int v132 = a1;
        v132[1] = (uint64_t)v133;
        atomic_fetch_add((atomic_uint *volatile)(a1 + 6880), 1u);
        si_mobile_journal_map_deactivate(v133);
        si_enqueue_barrier_with_qos(*(void *)(a1 + 1048), 0, (uint64_t)playBackMobileJournal, v134);
        CFSetRef v135 = v175;
        CFIndex Count = CFSetGetCount(v175);
        MEMORY[0x1F4188790](Count);
        int v138 = (const void **)((char *)&v148 - v137);
        bzero((char *)&v148 - v137, v139);
        CFSetGetValues(v135, v138);
        if (Count >= 1)
        {
          for (uint64_t i = 0; i != Count; ++i)
          {
            *(void *)statfs buf = 0;
            *(void *)statfs buf = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
            **(void **)statfs buf = a1;
            CFTypeRef v141 = CFRetain(v138[i]);
            *(void *)(*(void *)buf + 8) = v141;
            si_enqueue_work_bulk_with_qos(*(void *)(a1 + 1048), 0, (uint64_t)dummy_routine, (uint64_t)buf, (uint64_t)v138[i], i == 0);
          }
        }
        CFRelease(v175);
        si_enqueue_work_with_qos(*(void *)(a1 + 1048), 0, (uint64_t)endTransaction, (uint64_t)v177);
        int v142 = *__error();
        int v143 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)statfs buf = 134219520;
          *(void *)&uint8_t buf[4] = v29;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v151;
          *(_WORD *)&buf[22] = 2048;
          *(void *)&unsigned char buf[24] = v152;
          *(_WORD *)&uint8_t buf[32] = 2048;
          *(void *)&buf[34] = v176;
          *(_WORD *)&buf[42] = 2048;
          *(void *)&buf[44] = v178;
          *(_WORD *)&buf[52] = 2048;
          *(void *)&buf[54] = v153;
          *(_WORD *)&buf[62] = 2048;
          *(void *)&buf[64] = v18;
          _os_log_impl(&dword_1BD672000, v143, OS_LOG_TYPE_DEFAULT, "Played back %ld records (skipped %ld), read %lld/%lld bytes, consumedJournalSerialNumber:%lld, minReplaySerialNumber:%lld, maxReplaySerialNumber:%lld", buf, 0x48u);
        }
        *__error() = v142;
        uint64_t v30 = 0;
        int v17 = v180;
        int v15 = v179;
LABEL_154:
        uint64_t v144 = *(void *)&threadData[18 * v190 + 2];
        unsigned int v145 = v189;
        uint64_t v146 = v144 + 320 * v189;
        *(_DWORD *)(v146 + 312) = v15;
        int v147 = *(void (**)(void))(v146 + 232);
        if (v147) {
          v147(*(void *)(v144 + 320 * v145 + 288));
        }
        dropThreadId(v190, 0, v17);
        uint64_t v19 = (void *)v30;
        if (v30) {
          goto LABEL_7;
        }
        return v18;
    }
  }
}

void si_playbackRecord(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  v28[1024] = *MEMORY[0x1E4F143B8];
  CFIndex v4 = *(unsigned int *)(v2 + 8);
  if (8 * v4 > (unint64_t)*(unsigned int *)(v2 + 4)) {
    return;
  }
  int v5 = v3;
  uint64_t v26 = v1;
  uint64_t v6 = v2 + 12;
  bzero(v28, 0x2000uLL);
  bzero(v27, 0x2000uLL);
  CFIndex v7 = (v4 + 1);
  if (v7 >= 0x401)
  {
    uint64_t v8 = malloc_type_malloc(8 * (v4 + 1), 0x100004000313F17uLL);
    int v9 = (const void **)malloc_type_malloc(8 * (v4 + 1), 0xC0040B8AA526DuLL);
    unint64_t v10 = (const void *)*MEMORY[0x1E4F1D260];
    atomic_uint *v9 = (const void *)*MEMORY[0x1E4F1D260];
    goto LABEL_5;
  }
  unint64_t v10 = (const void *)*MEMORY[0x1E4F1D260];
  v27[0] = *MEMORY[0x1E4F1D260];
  int v9 = (const void **)v27;
  uint64_t v8 = v28;
  if (v4)
  {
LABEL_5:
    uint64_t v11 = 0;
    do
    {
      v8[v11 + 1] = *(void *)(v6 + 8 * v11);
      ++v11;
    }
    while (v4 != v11);
  }
  void *v8 = 0;
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v13 = _MDPlistBytesCreate();
  if (v13)
  {
    uint64_t v14 = (const void *)v13;
    CFArrayRef v15 = (const __CFArray *)_MDPlistBytesCopyPlistAtIndex();
    CFRelease(v14);
    if (v15)
    {
      v29.locatiouint64_t n = 0;
      v29.length = v4;
      CFArrayGetValues(v15, v29, v9 + 1);
      CFIndex v16 = 0;
      while (v16 < CFArrayGetCount(v15))
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v15, v16);
        uint64_t v18 = &v9[v16++];
        if (ValueAtIndex != v18[1])
        {
          uint64_t v19 = __si_assert_copy_extra_625(-1);
          int v20 = v19;
          unint64_t v21 = "";
          if (v19) {
            unint64_t v21 = v19;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 3457, "CFArrayGetValueAtIndex(inValues,i) == valueArray[i+1]", v21);
          goto LABEL_15;
        }
      }
      if (*v9 != v10)
      {
        __int16 v24 = __si_assert_copy_extra_625(-1);
        int v20 = v24;
        uint64_t v25 = "";
        if (v24) {
          uint64_t v25 = v24;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 3460, "valueArray[0]==kCFNull", v25);
LABEL_15:
        free(v20);
        if (__valid_fs(-1)) {
          uint64_t v22 = 2989;
        }
        else {
          uint64_t v22 = 3072;
        }
        *(_DWORD *)uint64_t v22 = -559038737;
        abort();
      }
      CFArrayRef v23 = CFArrayCreate(v12, v9, v7, MEMORY[0x1E4F1D510]);
      SIBulkSetAttributes(v26, (uint64_t)v8, 0, v7, (uint64_t)v23, 0, 0, 65540, v5, 0, 0, 0, 0);
      CFRelease(v15);
      CFRelease(v23);
    }
  }
  if (v8 != v28) {
    free(v8);
  }
  if (v9 != v27) {
    free(v9);
  }
}

void flushPlaybackPossibleMoves(uint64_t a1, uint64_t a2, int a3)
{
  CFIndex v4 = *(void **)a2;
  size_t v5 = *(void *)(a2 + 16);
  if (a3)
  {
    uint64_t v6 = 0;
    size_t v7 = 0;
  }
  else
  {
    uint64_t v6 = *(void **)a2;
    size_t v7 = v5;
    CFIndex v4 = 0;
    size_t v5 = 0;
  }
  SIPossibleMovesBulk(a1, v6, v7, v4, v5);
  uint64_t v8 = *(void **)a2;
  void *v8 = 0;
  v8[1] = 0;
  *(void *)(a2 + 16) = 0;
}

void SITransferAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a4 && a2 >= 3 && a3 >= 3)
  {
    CFAllocatorRef v12 = (char *)malloc_type_malloc(0x1CuLL, 0x3D033EFuLL);
    *(void *)(v12 + 12) = a2;
    *(void *)(v12 + 20) = a3;
    *(void *)CFAllocatorRef v12 = 0x10F04DFEEDLL;
    *((_DWORD *)v12 + 2) = 2;
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 1624));
    JournalFd = getJournalFd(a1, 0, 0);
    uint64_t v14 = fd_write((uint64_t)JournalFd, (uint64_t)v12, 0x1CuLL);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1624));
    if (v14 == -1)
    {
      int v26 = *__error();
      int v15 = *__error();
      CFIndex v16 = _SILogForLogForCategory(4);
      os_log_type_t v17 = 2 * (dword_1E9FC90B4 < 4);
      if (os_log_type_enabled(v16, v17))
      {
        *(_DWORD *)statfs buf = 67109120;
        LODWORD(v28) = v26;
        _os_log_impl(&dword_1BD672000, v16, v17, "Error writing to log file: %d", buf, 8u);
      }
      *__error() = v15;
    }
    free(v12);
  }
  if (*(void *)(a1 + 1048))
  {
    uint64_t v18 = malloc_type_calloc(1uLL, 0x30uLL, 0x10A004032120C31uLL);
    if (dword_1E9FC90B4 >= 5)
    {
      int v22 = *__error();
      CFArrayRef v23 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)statfs buf = 0;
        _os_log_impl(&dword_1BD672000, v23, OS_LOG_TYPE_DEFAULT, "Do attribute transfer.", buf, 2u);
      }
      *__error() = v22;
    }
    *uint64_t v18 = a1;
    v18[1] = a3;
    v18[2] = a2;
    v18[3] = a4;
    v18[4] = a5;
    *((unsigned char *)v18 + 40) = a6;
    int v19 = *__error();
    int v20 = _SILogForLogForCategory(4);
    os_log_type_t v21 = 2 * (dword_1E9FC90B4 < 4);
    if (os_log_type_enabled(v20, v21))
    {
      *(_DWORD *)statfs buf = 134218240;
      uint64_t v28 = a3;
      __int16 v29 = 2048;
      uint64_t v30 = a2;
      _os_log_impl(&dword_1BD672000, v20, v21, "SITransferAttributes from %lld to %lld", buf, 0x16u);
    }
    *__error() = v19;
    si_enqueue_barrier(*(void *)(a1 + 1048), (uint64_t)transferAttributes, (uint64_t)v18);
    if (dword_1E9FC90B4 >= 5)
    {
      int v24 = *__error();
      uint64_t v25 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)statfs buf = 0;
        _os_log_impl(&dword_1BD672000, v25, OS_LOG_TYPE_DEFAULT, "Leave.", buf, 2u);
      }
      *__error() = v24;
    }
  }
}

void SIPossibleMovesBulk(uint64_t a1, const void *a2, size_t a3, const void *a4, size_t a5)
{
  if (*(void *)(a1 + 6616) && *(void *)(a1 + 1048))
  {
    unint64_t v10 = malloc_type_malloc(0x28uLL, 0x1030040626A9454uLL);
    *((void *)v10 + 2) = a3;
    *((void *)v10 + 4) = a5;
    *((void *)v10 + 3) = malloc_type_malloc(a5, 0xEAFF80FAuLL);
    uint64_t v11 = malloc_type_malloc(a3, 0x3B7B5173uLL);
    *(void *)unint64_t v10 = a1;
    *((void *)v10 + 1) = v11;
    memcpy(*((void **)v10 + 3), a4, a5);
    memcpy(*((void **)v10 + 1), a2, a3);
    uint64_t v12 = *(void *)(a1 + 1048);
    si_enqueue_barrier_with_qos(v12, 9, (uint64_t)possibleMoves, (uint64_t)v10);
  }
}

void possibleMoves(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    CFIndex v4 = malloc_type_calloc(1uLL, 0x30uLL, 0x464CD32BuLL);
    *(_WORD *)CFIndex v4 = 257;
    v4[1] = *(void *)a1;
    v4[2] = 2;
    *((_DWORD *)v4 + 6) = 0;
    if (*(uint64_t *)(a1 + 16) >= 1)
    {
      size_t v5 = *(void **)(a1 + 8);
      do
      {
        if (!v5[1]) {
          break;
        }
        unint64_t v6 = 0;
        v4[5] = *v5;
        do
        {
          void v4[4] = v5[v6 + 2];
          innerMoveFiles((unint64_t)v4);
          ++v6;
          unint64_t v7 = v5[1];
        }
        while (v6 < v7);
        v5 += v7 + 2;
      }
      while ((unint64_t)v5 < *(void *)(a1 + 8) + *(void *)(a1 + 16));
    }
    if (*(uint64_t *)(a1 + 32) >= 1)
    {
      uint64_t v8 = *(void **)(a1 + 24);
      int v9 = v8;
      do
      {
        uint64_t v10 = v9[1];
        v4[5] = *v9;
        if (v10)
        {
          unint64_t v11 = 0;
          do
          {
            void v4[4] = v9[v11 + 2];
            moveDirectoriesInner((uint64_t)v4);
            ++v11;
            unint64_t v12 = v9[1];
          }
          while (v11 < v12);
          uint64_t v8 = *(void **)(a1 + 24);
        }
        else
        {
          unint64_t v12 = 0;
        }
        v9 += v12 + 2;
      }
      while (v9 < (void *)((char *)v8 + *(void *)(a1 + 32)));
    }
    free(v4);
    bumpWorkTime(*(void *)a1, Current);
  }
  free(*(void **)(a1 + 8));
  free(*(void **)(a1 + 24));
  free((void *)a1);
}

unint64_t innerMoveFiles(unint64_t result)
{
  unint64_t v1 = result;
  unsigned int v2 = 0;
  uint64_t v4 = *(void *)(result + 8);
  unint64_t v3 = *(void *)(result + 16);
  while (v3 > v2)
  {
    uint64_t result = processOneFile(v4);
    unsigned int v2 = result;
    unint64_t v3 = *(void *)(v1 + 16);
    if (v3 < result)
    {
      size_t v5 = __si_assert_copy_extra_625(-1);
      unint64_t v6 = v5;
      unint64_t v7 = "";
      if (v5) {
        unint64_t v7 = v5;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 29732, "i<=ctx->count", v7);
      free(v6);
      if (__valid_fs(-1)) {
        uint64_t v8 = 2989;
      }
      else {
        uint64_t v8 = 3072;
      }
      *(_DWORD *)uint64_t v8 = -559038737;
      abort();
    }
  }
  return result;
}

void moveDirectoriesInner(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v2 = v1;
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(v1 + 8);
  if (*(unsigned char *)(v1 + 2))
  {
    if (!*(void *)(v1 + 16))
    {
      CFStringRef v78 = (const void *)SIUINT64SetCreate();
      for (uint64_t i = *(void *)(v3 + 6608); i; uint64_t i = *(void *)(v3 + 6608))
      {
        *(void *)(v3 + 6608) = 0;
        unint64_t v102 = 0x10000;
        long long v104 = 0u;
        uint64_t v105 = 0;
        uint64_t v103 = v3;
        *(void *)&long long v104 = 1;
        uint64_t __dst = v3;
        v101[0] = v78;
        v101[1] = &v102;
        SIValueSet<unsigned long long>::_SIValueSetInnerIterate(i + 56, *(void *)(i + 16), *(_DWORD *)(i + 24), (uint64_t)fixupOne, (uint64_t)&__dst, 128);
        CFRelease((CFTypeRef)i);
      }
      CFRelease(v78);
      return;
    }
    uint64_t v4 = *(void *)(v3 + 6608);
    if (!v4)
    {
      uint64_t v4 = SIUINT64SetCreate();
      *(void *)(v3 + 6608) = v4;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (*(void *)(v2 + 16))
  {
    unint64_t v5 = 0;
    uint64_t v92 = *(void *)(v3 + 1376);
    unint64_t v6 = &v103;
    size_t v88 = (unint64_t *)(v4 + 16);
    unint64_t v7 = (int *)&unk_1E9FC9000;
    uint64_t v91 = v4;
    uint64_t v87 = *(void *)(v3 + 1384);
    while (1)
    {
      unint64_t v8 = *(void *)(v2 + 8 * v5 + 32);
      uint64_t v9 = *(unsigned __int8 *)(v2 + 1);
      bzero(&v102, 0x1008uLL);
      bzero(&__dst, 0x1008uLL);
      if (!v8)
      {
        if (v7[47] >= 5)
        {
          int v70 = *__error();
          unint64_t v71 = _SILogForLogForCategory(6);
          if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
          {
            int buf = 134217984;
            *(void *)buf_4 = 0;
            _os_log_impl(&dword_1BD672000, v71, OS_LOG_TYPE_DEFAULT, "Move for bad oid: %lld", (uint8_t *)&buf, 0xCu);
          }
          *__error() = v70;
          uint64_t v4 = v91;
        }
        goto LABEL_19;
      }
      uint64_t v10 = *(void *)(v3 + 1408);
      unint64_t v11 = *(uint64_t (**)(uint64_t))(v10 + 128);
      if (!v11 || ((uint64_t v12 = v11(v10), v12 != v8) ? (v13 = (unint64_t)(v12 + 1) > 1) : (v13 = 0), !v13))
      {
        if (v7[47] >= 5)
        {
          int v68 = *__error();
          int v69 = _SILogForLogForCategory(6);
          if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
          {
            int buf = 134217984;
            *(void *)buf_4 = v8;
            _os_log_impl(&dword_1BD672000, v69, OS_LOG_TYPE_DEFAULT, "No parent for oid: %lld", (uint8_t *)&buf, 0xCu);
          }
          *__error() = v68;
          uint64_t v4 = v91;
        }
        if ((*(_DWORD *)(v3 + 6576) & 6) != 4)
        {
          uint64_t v14 = *(void *)(v3 + 2352);
          int v15 = *(void (**)(void, unint64_t, void))(v14 + 128);
          if (v15) {
            v15(*(void *)(v14 + 144), v8, 0);
          }
        }
        goto LABEL_19;
      }
      unint64_t v16 = v12;
      int Path = directoryStoreWriterGetPath(*(void *)(v3 + 6616), v8, (uint64_t)v6);
      if (dword_1E9FC90B4 >= 5)
      {
        int v90 = Path;
        int v72 = *__error();
        size_t v73 = _SILogForLogForCategory(4);
        if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
        {
          int buf = 134218240;
          *(void *)buf_4 = v8;
          LOWORD(buf_4[2]) = 2048;
          *(void *)((char *)&buf_4[2] + 2) = v16;
          _os_log_impl(&dword_1BD672000, v73, OS_LOG_TYPE_DEFAULT, "oid: %lld moved to parent oid: %lld", (uint8_t *)&buf, 0x16u);
        }
        *__error() = v72;
        int Path = v90;
        uint64_t v4 = v91;
        unint64_t v7 = (_DWORD *)&unk_1E9FC9000;
        if (!v90)
        {
LABEL_107:
          processOneChildlessDirectory(v3);
          goto LABEL_19;
        }
      }
      else if (!Path)
      {
        goto LABEL_107;
      }
      uint64_t v18 = v103;
      if (v103 != v16) {
        break;
      }
      int v19 = v6;
      int v20 = *__error();
      os_log_type_t v21 = _SILogForLogForCategory(6);
      int v22 = v7;
      CFArrayRef v23 = v21;
      os_log_type_t v24 = 2 * (v22[47] < 4);
      if (os_log_type_enabled(v21, v24))
      {
        int buf = 134218240;
        *(void *)buf_4 = v16;
        LOWORD(buf_4[2]) = 2048;
        *(void *)((char *)&buf_4[2] + 2) = v8;
        _os_log_impl(&dword_1BD672000, v23, v24, "parent %lld unchanged for %lld", (uint8_t *)&buf, 0x16u);
      }
      *__error() = v20;
      uint64_t v4 = v91;
      unint64_t v6 = v19;
LABEL_27:
      unint64_t v7 = (_DWORD *)&unk_1E9FC9000;
LABEL_19:
      v5 += v9 + 1;
      if (v5 >= *(void *)(v2 + 16)) {
        return;
      }
    }
    uint64_t v25 = v4;
    if (v4)
    {
      int v26 = v6;
      int v27 = Path;
      SIValueSet<unsigned long long>::SIValueSetInsert(v88, v16);
      int Path = v27;
      unint64_t v6 = v26;
      uint64_t v18 = v103;
    }
    if (v18 == v16)
    {
      unint64_t v102 = v8;
      if (Path >= 1) {
        memcpy(&__dst, v6, 8 * Path);
      }
      si_perform_livequeries_directory_updates(v3);
      uint64_t v4 = v25;
      goto LABEL_19;
    }
    int v89 = Path;
    int buf = 0;
    uint64_t __dst = v16;
    uint64_t v28 = *(void *)(v3 + 6616);
    if (v16 == 2)
    {
      directoryStoreSetParentForMove(v28, v8, 2);
      int v29 = 1;
      uint64_t v4 = v25;
      uint64_t v30 = v87;
      goto LABEL_60;
    }
    int v31 = directoryStoreWriterGetPath(v28, v16, (uint64_t)v101);
    uint64_t v4 = v25;
    if (v31)
    {
      uint64_t v32 = __dst;
      unint64_t v7 = (_DWORD *)&unk_1E9FC9000;
      uint64_t v30 = v87;
      if (__dst == v8) {
        goto LABEL_57;
      }
      if (v31 >= 1)
      {
        uint64_t v33 = (v31 + 1) - 1;
        uint64_t v34 = v33;
        uint64_t v35 = v101;
        do
        {
          uint64_t v37 = *v35++;
          uint64_t v36 = v37;
          if (v8 == v37 || __dst == v36) {
            goto LABEL_57;
          }
          --v34;
        }
        while (v34);
        uint64_t v39 = v101;
        while (1)
        {
          uint64_t v41 = *v39++;
          uint64_t v40 = v41;
          if (v8 == v41 || __dst == v40) {
            break;
          }
          if (!--v33) {
            goto LABEL_53;
          }
        }
        unint64_t v80 = __si_assert_copy_extra_625(-1);
        uint64_t v81 = v80;
        unint64_t v82 = "";
        if (v80) {
          unint64_t v82 = v80;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 29911, "!(sourceOid==destPath[i] || destPath[0] == destPath[i])", v82);
LABEL_115:
        free(v81);
        if (__valid_fs(-1)) {
          uint64_t v83 = 2989;
        }
        else {
          uint64_t v83 = 3072;
        }
        *(_DWORD *)uint64_t v83 = -559038737;
        abort();
      }
    }
    else
    {
      SIPersistentIDStoreGetOidPathForOid(*(void *)(v3 + 1408), v16, (uint64_t)v101, 0, &buf);
      int v31 = 0;
      uint64_t v32 = __dst;
      unint64_t v7 = (_DWORD *)&unk_1E9FC9000;
      uint64_t v30 = v87;
      if (__dst == v8) {
        goto LABEL_57;
      }
LABEL_53:
      if (!v31 && buf)
      {
        int v43 = si_directoryStoreEnsurePath(v3);
        if (v43 == -1)
        {
LABEL_57:
          _SIResolveDirectory(v3, v8, *(unsigned int *)(v2 + 24));
          goto LABEL_19;
        }
        int v44 = v43;
        uint64_t v32 = __dst;
        goto LABEL_59;
      }
    }
    int v44 = v31;
LABEL_59:
    directoryStoreSetParentForMove(*(void *)(v3 + 6616), v8, v32);
    int v29 = v44 + 1;
LABEL_60:
    uint64_t v86 = (uint64_t)v6;
    unint64_t v102 = v8;
    uint64_t v45 = *(void *)(v3 + 6624);
    if (v45) {
      directoryOverlayMoveDirectory(v45, v89 + 1, (uint64_t *)&v102, v29, &__dst);
    }
    if (*(_DWORD *)(v30 + 8))
    {
      unint64_t v46 = 0;
      do
      {
        CFSetRef v47 = *(const __CFSet **)(v3 + 6632);
        if (!v47 || !CFSetContainsValue(v47, (const void *)*(int *)(*(void *)(*(void *)v30 + 8 * v46) + 56))) {
          _CIMoveDirectory(*(void *)(*(void *)v30 + 8 * v46), v89 + 1, (uint64_t *)&v102, v29, (uint64_t)&__dst);
        }
        ++v46;
      }
      while (v46 < *(unsigned int *)(v30 + 8));
    }
    uint64_t v48 = v92;
    if (*(_DWORD *)(v92 + 8))
    {
      unint64_t v49 = 0;
      do
      {
        CFSetRef v50 = *(const __CFSet **)(v3 + 6632);
        if (!v50
          || (int v51 = CFSetContainsValue(v50, (const void *)*(int *)(*(void *)(*(void *)v48 + 8 * v49) + 56)),
              uint64_t v48 = v92,
              !v51))
        {
          _CIMoveDirectory(*(void *)(*(void *)v48 + 8 * v49), v89 + 1, (uint64_t *)&v102, v29, (uint64_t)&__dst);
          uint64_t v48 = v92;
        }
        ++v49;
      }
      while (v49 < *(unsigned int *)(v48 + 8));
    }
    si_perform_livequeries_directory_updates(v3);
    int v93 = 0;
    unint64_t v6 = (void *)v86;
    if (!db_get_obj_callback(*(int **)(v3 + 1184), v8, &v93, 0, (void (*)(void *, uint64_t))si_docIdRewriteCallback, *(void *)(v3 + 2360), 0))
    {
      unsigned int v52 = (unint64_t *)v93;
      uint64_t v53 = *((void *)v93 + 3);
      if (v53 == v103 || (unint64_t)(v53 + 1) < 2)
      {
        uint64_t v54 = 0;
      }
      else
      {
        int v66 = *__error();
        uint64_t v67 = _SILogForLogForCategory(6);
        if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
        {
          uint64_t v74 = *(void *)v93;
          uint64_t v75 = *((void *)v93 + 3);
          uint64_t v76 = *((void *)v93 + 4);
          int v77 = *((_DWORD *)v93 + 11);
          int buf = 136316674;
          *(void *)buf_4 = "moveDirectoriesInner";
          LOWORD(buf_4[2]) = 1024;
          *(_DWORD *)((char *)&buf_4[2] + 2) = 29981;
          HIWORD(buf_4[3]) = 2048;
          *(void *)&buf_4[4] = v75;
          LOWORD(buf_4[6]) = 2048;
          *(void *)((char *)&buf_4[6] + 2) = v74;
          HIWORD(buf_4[8]) = 2048;
          *(void *)&buf_4[9] = v103;
          __int16 v96 = 2048;
          uint64_t v97 = v76;
          __int16 v98 = 1024;
          int v99 = v77;
          _os_log_error_impl(&dword_1BD672000, v67, OS_LOG_TYPE_ERROR, "%s:%d: Got parent %lld for %lld. Expected %lld (doc %llu)(%d)", (uint8_t *)&buf, 0x40u);
        }
        *__error() = v66;
        unsigned int v52 = (unint64_t *)v93;
        uint64_t v54 = *((void *)v93 + 3);
      }
      uint64_t v55 = __dst;
      v52[3] = __dst;
      if (v55 != directoryStoreGetParent(*(void *)(v3 + 6616), *v52))
      {
        int v84 = __si_assert_copy_extra_625(-1);
        uint64_t v81 = v84;
        unint64_t v85 = "";
        if (v84) {
          unint64_t v85 = v84;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 29994, "dbo->parent_oid == directoryStoreGetParent(ref->dirStore, dbo->oid)", v85);
        goto LABEL_115;
      }
      unint64_t v102 = *(void *)v93;
      if (v54) {
        uint64_t v103 = v54;
      }
      LiveIndex = si_getLiveIndex(*(void *)(v3 + 1376));
      if (v93
        && *(void *)(v3 + 1144)
        && (unint64_t v57 = *((void *)v93 + 4)) != 0
        && v57 > *(void *)(v3 + 1296)
        && v57 <= *(void *)(v3 + 1304))
      {
        handleMovingContent(v3, (uint64_t)LiveIndex, (unint64_t *)v93, v29, &__dst);
      }
      else
      {
        ContentIndexUpdatePath((uint64_t)LiveIndex, *((void *)v93 + 4), v29, (uint64_t)&__dst, v89 - 1, v86);
        int updated = db_update_obj(*(int **)(v3 + 1184), (uint64_t)v93, 10);
        if (updated)
        {
          int v59 = updated;
          int v60 = *__error();
          int v61 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
          {
            int buf = 136315650;
            *(void *)buf_4 = "moveDirectoriesInner";
            LOWORD(buf_4[2]) = 1024;
            *(_DWORD *)((char *)&buf_4[2] + 2) = 30010;
            HIWORD(buf_4[3]) = 1024;
            buf_4[4] = v59;
            _os_log_error_impl(&dword_1BD672000, v61, OS_LOG_TYPE_ERROR, "%s:%d: Write error %d updating parent", (uint8_t *)&buf, 0x18u);
          }
          *__error() = v60;
        }
      }
      unsigned int v62 = *((_DWORD *)v93 + 10);
      if ((v62 & 0x20) != 0) {
        int v63 = 5;
      }
      else {
        int v63 = 4;
      }
      int v64 = v63 | (v62 >> 5) & 2;
      BOOL HasContent = objectHasContent(*(int **)(v3 + 1184), (uint64_t)v93);
      int buf = 0;
      memset(&buf_4[3], 0, 24);
      buf_4[0] = v29;
      *(void *)&buf_4[1] = &__dst;
      LOBYTE(buf_4[3]) = HasContent;
      buf_4[4] = v64;
      si_perform_livequeries_updates(v3);
      free(v93);
      uint64_t v4 = v91;
    }
    goto LABEL_27;
  }
}

void _SIResolveDirectory(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 6616) && *(void *)(a1 + 1048))
  {
    if (a3 < 1001)
    {
      unint64_t v8 = malloc_type_calloc(1uLL, 0x28uLL, 0x37F6D217uLL);
      v8[1] = a1;
      void v8[2] = 1;
      *((_DWORD *)v8 + 6) = a3 + 1;
      v8[4] = a2;
      uint64_t v9 = *(void *)(a1 + 1048);
      si_enqueue_barrier(v9, (uint64_t)moveDirectories, (uint64_t)v8);
    }
    else
    {
      int v6 = *__error();
      unint64_t v7 = _SILogForLogForCategory(6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        int v10 = 136315650;
        unint64_t v11 = "_SIResolveDirectory";
        __int16 v12 = 1024;
        int v13 = 30292;
        __int16 v14 = 2048;
        uint64_t v15 = a2;
        _os_log_error_impl(&dword_1BD672000, v7, OS_LOG_TYPE_ERROR, "%s:%d: move dropped %llx retry count exceeded", (uint8_t *)&v10, 0x1Cu);
      }
      *__error() = v6;
    }
  }
}

uint64_t si_directoryStoreEnsurePath(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  int v7 = v6;
  uint64_t v9 = v8;
  unint64_t v11 = v10;
  uint64_t v12 = v1;
  __dst[512] = *MEMORY[0x1E4F143B8];
  uint64_t v39 = 0;
  *uint64_t v2 = 0;
  int64_t Parent = directoryStoreWriterGetParent(*(void *)(v1 + 6616), v10);
  char v38 = 0;
  uint64_t v14 = directoryStoreEnsurePath(*(void *)(v12 + 6616), v11, v9, v7, v5, &v38, &v39, &v37);
  uint64_t v15 = v14;
  if (v14 != -1)
  {
    if (v39) {
      BOOL v16 = v39 == v11;
    }
    else {
      BOOL v16 = 1;
    }
    if (v16) {
      return v15;
    }
    if ((int)v14 < 1) {
      goto LABEL_16;
    }
    uint64_t v17 = 0;
    while (v9[v17] != v39)
    {
      if (v14 == ++v17) {
        return v15;
      }
    }
    if (v17)
    {
      bzero(__dst, 0x1000uLL);
      if ((int)v15 - (int)v17 < 1)
      {
        uint64_t v18 = 0;
      }
      else
      {
        memcpy(__dst, &v9[v17], 8 * (v15 - v17));
        uint64_t v18 = __dst[0];
      }
      uint64_t v26 = ((v17 << 32) - 0x100000000) >> 32;
      int v27 = processOneChildlessDirectory(v12);
      if (v27)
      {
        if (dword_1E9FC90BC >= 5)
        {
          uint64_t v28 = v27;
          int v29 = *__error();
          uint64_t v30 = _SILogForLogForCategory(6);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v31 = v9[v26];
            *(_DWORD *)int buf = 134218498;
            unint64_t v41 = v31;
            __int16 v42 = 2048;
            uint64_t v43 = v18;
            __int16 v44 = 2080;
            uint64_t v45 = v28;
            _os_log_impl(&dword_1BD672000, v30, OS_LOG_TYPE_DEFAULT, "Skipped fix up; item %lld, new parent %lld %s",
              buf,
              0x20u);
          }
          *__error() = v29;
        }
        return v15;
      }
      if (dword_1E9FC90BC < 5) {
        return v15;
      }
      int v21 = *__error();
      uint64_t v32 = _SILogForLogForCategory(6);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v33 = v9[v26];
        *(_DWORD *)int buf = 134218240;
        unint64_t v41 = v33;
        __int16 v42 = 2048;
        uint64_t v43 = v18;
        CFArrayRef v23 = "Fixed up (formerly) childless item %lld, new parent %lld";
        os_log_type_t v24 = v32;
LABEL_35:
        uint32_t v25 = 22;
        goto LABEL_36;
      }
    }
    else
    {
LABEL_16:
      if (Parent) {
        return v15;
      }
      bzero(__dst, 0x1000uLL);
      __memcpy_chk();
      int v19 = processOneChildlessDirectory(v12);
      if (v19)
      {
        if (dword_1E9FC90BC < 5) {
          return v15;
        }
        int v20 = v19;
        int v21 = *__error();
        int v22 = _SILogForLogForCategory(6);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 134218498;
          unint64_t v41 = v11;
          __int16 v42 = 2048;
          uint64_t v43 = __dst[0];
          __int16 v44 = 2080;
          uint64_t v45 = v20;
          CFArrayRef v23 = "Skipped fix up; item %lld, new parent %lld %s";
          os_log_type_t v24 = v22;
          uint32_t v25 = 32;
LABEL_36:
          _os_log_impl(&dword_1BD672000, v24, OS_LOG_TYPE_DEFAULT, v23, buf, v25);
        }
      }
      else
      {
        if (dword_1E9FC90BC < 5) {
          return v15;
        }
        int v21 = *__error();
        uint64_t v35 = _SILogForLogForCategory(6);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 134218240;
          unint64_t v41 = v11;
          __int16 v42 = 2048;
          uint64_t v43 = __dst[0];
          CFArrayRef v23 = "Fixed up (formerly) childless item %lld, new parent %lld";
          os_log_type_t v24 = v35;
          goto LABEL_35;
        }
      }
    }
    *__error() = v21;
    return v15;
  }
  if (!v38) {
    _DWORD *v3 = 22;
  }
  return v15;
}

void handleMovingContent(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, const void *a5)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFTypeRef cf = decodeDBOToDictionary(*(int **)(a1 + 1184), (uint64_t)a3, 0, 0, 2, *(_DWORD *)(a1 + 2020), *(_DWORD *)(a1 + 2052), 0, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  if (!objectHasContent(*(int **)(a1 + 1184), (uint64_t)a3)) {
    goto LABEL_9;
  }
  bzero(buf, 0x400uLL);
  uint64_t v12 = si_cache_relative_path_for_oid(*a3, "txt", (char *)buf, *(unsigned __int8 *)(a1 + 2064));
  if (!v12 || (int v13 = openat(*(_DWORD *)(a1 + 32), v12, 0), v13 == -1))
  {
LABEL_19:
    (*(void (**)(void, unint64_t, void, void))(*(void *)(a1 + 2352) + 16))(*(void *)(*(void *)(a1 + 2352) + 144), *a3, 0, 0);
    goto LABEL_20;
  }
  int v14 = v13;
  fcntl(v13, 48, 1);
  fcntl(v14, 76, 1);
  off_t v15 = lseek(v14, 0, 2);
  if (v15 < 1 || (v16 = v15, (uint64_t v17 = malloc_type_zone_malloc((malloc_zone_t *)indexingZone, v15, 0xFE656D47uLL)) == 0))
  {
LABEL_18:
    close(v14);
    goto LABEL_19;
  }
  uint64_t v18 = v17;
  if (v16 != pread(v14, v17, v16, 0)
    || (CFStringRef v19 = CFStringCreateWithBytesNoCopy(v10, (const UInt8 *)v18, v16, 0x8000100u, 1u, (CFAllocatorRef)*MEMORY[0x1E4F1CF90])) == 0)
  {
    free(v18);
    goto LABEL_18;
  }
  CFStringRef v20 = v19;
  CFDictionarySetValue(cf, 0, v19);
  CFRelease(v20);
  close(v14);
LABEL_9:
  unint64_t v29 = 0;
  unint64_t v21 = a3[4];
  uint64_t v22 = si_indexForDocId(a1, v21);
  if (v22) {
    int v23 = _CIDelete(v22, v21, *a3, 1);
  }
  else {
    int v23 = 15;
  }
  int v24 = _CIUpdateContent(a2, a4, a5, 0, 0, *a3, v23, 0, 0.0, cf, 0, (uint64_t *)&v29, 5u, 0, (*(_DWORD *)(a1 + 6576) >> 19) & 3, (uint64_t (*)(uint64_t))lowDiskSpaceCallback, a1, 0, 0,
          *(void *)(a1 + 2456),
          0,
          0);
  a3[4] = v29;
  if (!v24)
  {
    int updated = db_update_obj(*(int **)(a1 + 1184), (uint64_t)a3, 0);
    if (updated)
    {
      int v26 = updated;
      int v27 = *__error();
      uint64_t v28 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315650;
        uint64_t v31 = "handleMovingContent";
        __int16 v32 = 1024;
        int v33 = 29364;
        __int16 v34 = 1024;
        int v35 = v26;
        _os_log_error_impl(&dword_1BD672000, v28, OS_LOG_TYPE_ERROR, "%s:%d: Write error %d updating parent", buf, 0x18u);
      }
      *__error() = v27;
    }
  }
LABEL_20:
  CFRelease(cf);
}

const char *processOneChildlessDirectory(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  unint64_t v9 = v8;
  unint64_t v11 = v10;
  uint64_t v12 = v1;
  v70[512] = *MEMORY[0x1E4F143B8];
  int v59 = 0;
  int v13 = 0;
  if (!db_get_obj_callback(*(int **)(v1 + 1184), v10, &v59, 0, (void (*)(void *, uint64_t))si_docIdRewriteCallback, *(void *)(v1 + 2360), 0))
  {
    bzero(&v69, 0x1008uLL);
    if (v9 == -1 || !v7)
    {
      if (v9 == -1)
      {
        uint64_t v14 = *((void *)v59 + 3);
        goto LABEL_20;
      }
    }
    else
    {
      SIValueSet<unsigned long long>::SIValueSetInsert((unint64_t *)(v7 + 16), v9);
    }
    uint64_t v14 = *((void *)v59 + 3);
    if (v14 != v9 && v14 != 0)
    {
      if (v14 <= 1 && v14 != -1)
      {
        uint64_t v53 = __si_assert_copy_extra_625(*(_DWORD *)(v12 + 48));
        uint64_t v54 = v53;
        uint64_t v55 = "";
        if (v53) {
          uint64_t v55 = v53;
        }
        __message_assert("%s:%u: failed assertion '%s' %s Got parent id %lld for oid %lld", "SpotlightIndex.c", 29537, "dbo->parent_oid>=2 || dbo->parent_oid==-1", v55, *((void *)v59 + 3), *(void *)v59);
        free(v54);
        if (__valid_fs(*(_DWORD *)(v12 + 48))) {
          uint64_t v56 = 2989;
        }
        else {
          uint64_t v56 = 3072;
        }
        *(_DWORD *)uint64_t v56 = -559038737;
        abort();
      }
      bzero(&v66, 0x1008uLL);
      unsigned int v58 = 0;
      if (*(unsigned char *)(v12 + 2064))
      {
        uint64_t Path = directoryStoreGetPath(*(void *)(v12 + 6616), v9, (uint64_t)v70);
        unsigned int v58 = Path;
      }
      else
      {
        uint64_t v57 = v3;
        if (SIPersistentIDStoreGetOidPathForOid(*(void *)(v12 + 1408), v9, (uint64_t)v70, 0, &v58))
        {
          *uint64_t v5 = *__error();
          int v13 = "failed";
LABEL_32:
          free(v59);
          return v13;
        }
        uint64_t Path = v58;
      }
      unint64_t v69 = v9;
      if (v9 == v11) {
        goto LABEL_18;
      }
      uint64_t v21 = (Path + 1);
      if (v21 >= 2)
      {
        uint64_t v22 = v70;
        uint64_t v23 = v21 - 1;
        do
        {
          uint64_t v25 = *v22++;
          uint64_t v24 = v25;
          if (v25 == v11 || v24 == v9) {
            goto LABEL_18;
          }
        }
        while (--v23);
      }
      int v27 = v59;
      unint64_t v28 = *((void *)v59 + 3);
      if (v28 == -1)
      {
        int v30 = 0;
        *(void *)&long long v66 = 0;
      }
      else
      {
        int v29 = directoryStoreGetPath(*(void *)(v12 + 6616), v28, (uint64_t)&v66 + 8);
        int v30 = v29 + 1;
        int v27 = v59;
        uint64_t v31 = *((void *)v59 + 3);
        *(void *)&long long v66 = v31;
        if ((v29 & 0x80000000) == 0 && v31 <= 1)
        {
          __int16 v32 = __si_assert_copy_extra_625(-1);
          int v33 = v32;
          __int16 v34 = "";
          if (v32) {
            __int16 v34 = v32;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 29588, "sourcePath[0]>=2", v34);
          goto LABEL_77;
        }
      }
      v27[3] = v9;
      if (v21 >= 2)
      {
        int v35 = si_directoryStoreEnsurePath(v12, v9, v70, Path, *v27, v7, v5, v3, v57);
        uint64_t v21 = v35 + 1;
        if ((v35 & 0x80000000) == 0)
        {
          uint64_t v36 = (v35 + 1);
          unsigned int v37 = (uint64_t *)&v69;
          while (1)
          {
            uint64_t v38 = *v37++;
            if (v38 <= 1) {
              break;
            }
            if (!--v36) {
              goto LABEL_56;
            }
          }
          CFSetRef v50 = __si_assert_copy_extra_625(-1);
          int v33 = v50;
          int v51 = "";
          if (v50) {
            int v51 = v50;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 29600, "destPath[i]>=2", v51);
LABEL_77:
          free(v33);
          if (__valid_fs(-1)) {
            uint64_t v52 = 2989;
          }
          else {
            uint64_t v52 = 3072;
          }
          *(_DWORD *)uint64_t v52 = -559038737;
          abort();
        }
LABEL_56:
        if (v35 < -1)
        {
LABEL_18:
          uint64_t v18 = 0;
LABEL_29:
          if (v18) {
            int v13 = v18;
          }
          else {
            int v13 = "failed";
          }
          goto LABEL_32;
        }
      }
      LiveIndex = si_getLiveIndex(*(void *)(v12 + 1376));
      if (!v59
        || !*(void *)(v12 + 1144)
        || (unint64_t v40 = *((void *)v59 + 4)) == 0
        || v40 <= *(void *)(v12 + 1296)
        || v40 > *(void *)(v12 + 1304))
      {
        ContentIndexUpdatePath((uint64_t)LiveIndex, *((void *)v59 + 4), v21, (uint64_t)&v69, v30, (uint64_t)&v66);
        int updated = db_update_obj(*(int **)(v12 + 1184), (uint64_t)v59, 10);
        if (updated)
        {
          int v42 = updated;
          int v43 = *__error();
          __int16 v44 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136315650;
            int v61 = "processOneChildlessDirectory";
            __int16 v62 = 1024;
            int v63 = 29617;
            __int16 v64 = 1024;
            int v65 = v42;
            _os_log_error_impl(&dword_1BD672000, v44, OS_LOG_TYPE_ERROR, "%s:%d: Write error %d updating parent", buf, 0x18u);
          }
          *__error() = v43;
        }
        unsigned int v45 = *((_DWORD *)v59 + 10);
        if ((v45 & 0x20) != 0) {
          int v46 = 5;
        }
        else {
          int v46 = 4;
        }
        int v47 = v46 | (v45 >> 5) & 2;
        BOOL HasContent = objectHasContent(*(int **)(v12 + 1184), (uint64_t)v59);
        long long v66 = 0u;
        long long v67 = 0u;
        uint64_t v68 = 0;
        DWORD1(v66) = v21 & ~(v21 >> 63);
        if (v21 <= 0) {
          unint64_t v49 = 0;
        }
        else {
          unint64_t v49 = &v69;
        }
        *((void *)&v66 + 1) = v49;
        LOBYTE(v67) = HasContent;
        DWORD1(v67) = v47;
        si_perform_livequeries_updates(v12);
        int v13 = 0;
        goto LABEL_32;
      }
      handleMovingContent(v12, (uint64_t)LiveIndex, (unint64_t *)v59, v21, &v69);
      goto LABEL_18;
    }
LABEL_20:
    CFStringRef v19 = "parent===1";
    if (v9 != -1) {
      CFStringRef v19 = 0;
    }
    if (v14 == v9) {
      CFStringRef v19 = "dbo->parent_oid == parent";
    }
    if (v14) {
      uint64_t v18 = v19;
    }
    else {
      uint64_t v18 = "dbo->parent_oid==0";
    }
    if (!v18) {
      uint64_t v18 = "Unknown";
    }
    goto LABEL_29;
  }
  return v13;
}

void moveDirectories(void *a1, int a2)
{
  if (!a2) {
    moveDirectoriesInner((uint64_t)a1);
  }
  free(a1);
}

uint64_t fixupOne(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    do
    {
      unint64_t v7 = *a1++;
      unint64_t v6 = v7;
      if ((SIUINT64SetContainsValue(*(void *)(a3 + 8), v7) & 1) == 0)
      {
        SIValueSet<unsigned long long>::SIValueSetInsert((unint64_t *)(*(void *)(a3 + 8) + 16), v6);
        *(void *)(*(void *)(a3 + 16) + 32) = v6;
        moveDirectoriesInner();
      }
      --v4;
    }
    while (v4);
  }
  return 0;
}

unint64_t processOneFile(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  int v3 = v2;
  unsigned int v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = v1;
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  int v9 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v10 = setThreadIdAndInfo(*(_DWORD *)(v1 + 32), sFdExceptionCallbacks, 0, 1, v9);
  unsigned int v85 = HIDWORD(v10);
  unsigned int v86 = v10;
  unint64_t v84 = __PAIR64__(v11, v12);
  uint64_t v13 = *(void *)&threadData[18 * v10 + 2];
  uint64_t v14 = v13 + 320 * HIDWORD(v10);
  *(unsigned char *)(v14 + 216) = 0;
  int v15 = *(_DWORD *)(v14 + 312);
  size_t v16 = *(void (**)(void))(v14 + 224);
  if (v16) {
    v16(*(void *)(v13 + 320 * HIDWORD(v10) + 288));
  }
  unint64_t v17 = v5 + 1;
  unsigned int v83 = v86;
  unsigned int v82 = v85;
  unint64_t v81 = v84;
  if (_setjmp((int *)v14))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int16 v96 = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v96, 2u);
    }
    *(_DWORD *)(v14 + 312) = v15;
    CIOnThreadCleanUpReset(v81);
    dropThreadId(v83, 1, v9);
    CICleanUpReset(v83, HIDWORD(v81));
    unint64_t v18 = v5 + 1;
    int v19 = 0;
    goto LABEL_61;
  }
  if (*(unsigned __int8 *)(v7 + 1) + (unint64_t)v17 > *(void *)(v7 + 16))
  {
    int v65 = __si_assert_copy_extra_625(-1);
    int v61 = v65;
    long long v66 = "";
    if (v65) {
      long long v66 = v65;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 29390, "i+advanceLen<=ctx->count", v66);
    goto LABEL_74;
  }
  int v78 = *(unsigned __int8 *)(v7 + 1);
  unint64_t v20 = *(void *)(v7 + 8 * v5 + 32);
  unint64_t v21 = v17;
  unint64_t v80 = 0;
  if (!db_get_obj_callback(*(int **)(v8 + 1184), v20, &v80, 0, (void (*)(void *, uint64_t))si_docIdRewriteCallback, *(void *)(v8 + 2360), 0))
  {
    if (!*(unsigned char *)v7 || !*(unsigned char *)(v7 + 1) || (uint64_t v22 = *(void *)(v7 + 8 * v17 + 32)) == 0)
    {
      uint64_t v23 = *(uint64_t (**)(void))(*(void *)(v8 + 1408) + 128);
      if (v23) {
        uint64_t v22 = v23();
      }
      else {
        uint64_t v22 = -1;
      }
    }
    if (dword_1E9FC90B4 >= 5)
    {
      int v77 = *__error();
      unint64_t v69 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int16 v96 = 134218240;
        *(void *)&v96[4] = v20;
        __int16 v97 = 2048;
        uint64_t v98 = v22;
        _os_log_impl(&dword_1BD672000, v69, OS_LOG_TYPE_DEFAULT, "oid: %lld moved to parent oid: %lld (file)", v96, 0x16u);
      }
      *__error() = v77;
    }
    bzero(v96, 0x1008uLL);
    uint64_t v24 = v80;
    if (v22 == -1) {
      goto LABEL_57;
    }
    uint64_t v25 = *((void *)v80 + 3);
    if (v25 == v22 || !v25) {
      goto LABEL_57;
    }
    if (v25 <= 1 && v25 != -1)
    {
      int v70 = __si_assert_copy_extra_625(*(_DWORD *)(v8 + 48));
      unint64_t v71 = v70;
      int v72 = "";
      if (v70) {
        int v72 = v70;
      }
      __message_assert("%s:%u: failed assertion '%s' %s Got parent id %lld for oid %lld", "SpotlightIndex.c", 29405, "dbo->parent_oid>=2 || dbo->parent_oid==-1", v72, *((void *)v80 + 3), *(void *)v80);
      free(v71);
      int v67 = *(_DWORD *)(v8 + 48);
LABEL_75:
      if (__valid_fs(v67)) {
        uint64_t v68 = 2989;
      }
      else {
        uint64_t v68 = 3072;
      }
      *(_DWORD *)uint64_t v68 = -559038737;
      abort();
    }
    bzero(&v93, 0x1008uLL);
    int v79 = 0;
    if (SIPersistentIDStoreGetOidPathForOid(*(void *)(v8 + 1408), v22, (uint64_t)&v96[8], 0, &v79)) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = (v79 + 1);
    }
    *(void *)__int16 v96 = v22;
    int v27 = v80;
    unint64_t v28 = *((void *)v80 + 3);
    if (v28 == -1)
    {
      int v31 = 0;
      *(void *)&long long v93 = 0;
      uint64_t v32 = v22;
    }
    else
    {
      int Path = directoryStoreGetPath(*(void *)(v8 + 6616), v28, (uint64_t)&v93 + 8);
      int v27 = v80;
      uint64_t v30 = *((void *)v80 + 3);
      *(void *)&long long v93 = v30;
      if ((Path & 0x80000000) == 0 && v30 < 2)
      {
        size_t v73 = __si_assert_copy_extra_625(-1);
        uint64_t v74 = v73;
        uint64_t v75 = "";
        if (v73) {
          uint64_t v75 = v73;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 29426, "sourcePath[0]>=2", v75);
        free(v74);
        if (__valid_fs(-1)) {
          uint64_t v76 = 2989;
        }
        else {
          uint64_t v76 = 3072;
        }
        *(_DWORD *)uint64_t v76 = -559038737;
        abort();
      }
      int v31 = Path + 1;
      uint64_t v32 = *(void *)v96;
    }
    v27[3] = v22;
    if (v32 != v20)
    {
      uint64_t v33 = v26;
      if (v26 < 2)
      {
        int v39 = v31;
        uint64_t v41 = v33;
LABEL_42:
        LiveIndex = si_getLiveIndex(*(void *)(v8 + 1376));
        if (!v80
          || !*(void *)(v8 + 1144)
          || (unint64_t v43 = *((void *)v80 + 4)) == 0
          || v43 <= *(void *)(v8 + 1296)
          || v43 > *(void *)(v8 + 1304))
        {
          ContentIndexUpdatePath((uint64_t)LiveIndex, *((void *)v80 + 4), v41, (uint64_t)v96, v39, (uint64_t)&v93);
          int updated = db_update_obj(*(int **)(v8 + 1184), (uint64_t)v80, 10);
          if (updated)
          {
            int v45 = updated;
            int v46 = *__error();
            int v47 = _SILogForLogForCategory(7);
            if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int buf = 136315650;
              size_t v88 = "processOneFile";
              __int16 v89 = 1024;
              int v90 = 29469;
              __int16 v91 = 1024;
              int v92 = v45;
              _os_log_error_impl(&dword_1BD672000, v47, OS_LOG_TYPE_ERROR, "%s:%d: Write error %d updating parent", buf, 0x18u);
            }
            *__error() = v46;
          }
          unsigned int v48 = *((_DWORD *)v80 + 10);
          if ((v48 & 0x20) != 0) {
            int v49 = 5;
          }
          else {
            int v49 = 4;
          }
          int v50 = v49 | (v48 >> 5) & 2;
          BOOL HasContent = objectHasContent(*(int **)(v8 + 1184), (uint64_t)v80);
          uint64_t v52 = 0;
          long long v93 = 0u;
          long long v94 = 0u;
          uint64_t v95 = 0;
          DWORD1(v93) = v41;
          if (v41) {
            uint64_t v52 = v96;
          }
          *((void *)&v93 + 1) = v52;
          LOBYTE(v94) = HasContent;
          DWORD1(v94) = v50;
          si_perform_livequeries_updates(v8);
          uint64_t v24 = v80;
          goto LABEL_57;
        }
        handleMovingContent(v8, (uint64_t)LiveIndex, (unint64_t *)v80, v41, v96);
LABEL_31:
        uint64_t v24 = v80;
LABEL_57:
        free(v24);
        unint64_t v21 = v17;
        goto LABEL_58;
      }
      __int16 v34 = (uint64_t *)&v96[8];
      uint64_t v35 = v26 - 1;
      while (1)
      {
        uint64_t v37 = *v34++;
        uint64_t v36 = v37;
        if (v20 == v37 || v32 == v36) {
          break;
        }
        if (!--v35)
        {
          int v39 = v31;
          int v40 = si_directoryStoreEnsurePath(v8);
          if (v40 < -1) {
            break;
          }
          uint64_t v41 = (v40 + 1);
          goto LABEL_42;
        }
      }
    }
    _SIResolveDirectory(v8, v20, v3);
    goto LABEL_31;
  }
LABEL_58:
  uint64_t v53 = *(void *)&threadData[18 * v83 + 2];
  unsigned int v54 = v82;
  uint64_t v55 = v53 + 320 * v82;
  *(_DWORD *)(v55 + 312) = v15;
  uint64_t v56 = *(void (**)(void))(v55 + 232);
  if (v56) {
    v56(*(void *)(v53 + 320 * v54 + 288));
  }
  dropThreadId(v83, 0, v9);
  unint64_t v18 = v21;
  int v19 = v78;
LABEL_61:
  unint64_t v57 = v18;
  unint64_t v58 = *(void *)(v7 + 16);
  if (v58 < v57)
  {
    int v60 = __si_assert_copy_extra_625(-1);
    int v61 = v60;
    __int16 v62 = "";
    if (v60) {
      __int16 v62 = v60;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 29517, "i<=ctx->count", v62);
    goto LABEL_74;
  }
  unint64_t result = (v19 + v17);
  if (v58 < result)
  {
    int v63 = __si_assert_copy_extra_625(-1);
    int v61 = v63;
    __int16 v64 = "";
    if (v63) {
      __int16 v64 = v63;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 29520, "i<=ctx->count", v64);
LABEL_74:
    free(v61);
    int v67 = -1;
    goto LABEL_75;
  }
  return result;
}

uint64_t SIBulkSetAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, void (*a10)(void, void), uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13 = MEMORY[0x1F4188790](a1);
  unint64_t v21 = a10;
  uint64_t v22 = a11;
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(v13 + 1280))
  {
    int v23 = *__error();
    uint64_t v24 = _SILogForLogForCategory(10);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
LABEL_5:
      *__error() = v23;
      if (a10) {
        a10(a11, 1);
      }
      return 0;
    }
    *(_WORD *)int buf = 0;
    uint64_t v25 = "SIBulkSetAttributes failed: index is read-only";
LABEL_4:
    _os_log_impl(&dword_1BD672000, v24, OS_LOG_TYPE_DEFAULT, v25, buf, 2u);
    goto LABEL_5;
  }
  CFTypeRef cf = v19;
  if (!v16)
  {
    int v23 = *__error();
    uint64_t v24 = _SILogForLogForCategory(10);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_5;
    }
    *(_WORD *)int buf = 0;
    uint64_t v25 = "SIBulkSetAttributes failed: count is zero";
    goto LABEL_4;
  }
  int v27 = v20;
  CFArrayRef v28 = v18;
  CFArrayRef v29 = v17;
  uint64_t v30 = v15;
  uint64_t v31 = v14;
  uint64_t v32 = v13;
  uint64_t count = v16;
  uint64_t v33 = (char *)malloc_type_calloc(v16, 0x28uLL, 0x1060040A1774B36uLL);
  uint64_t v116 = malloc_type_calloc(count, 8uLL, 0x100004000313F17uLL);
  bzero(buf, 0x1000uLL);
  size_t v35 = count;
  uint64_t v120 = v32;
  uint64_t v117 = v33;
  if (count <= 4096)
  {
    if (count <= 1)
    {
      uint64_t v76 = buf;
      __memset_chk();
      uint64_t v48 = count;
      int v75 = 0;
      goto LABEL_57;
    }
    unsigned int v122 = v27;
    CFAllocatorRef allocator = (CFAllocatorRef)a10;
    uint64_t v36 = buf;
  }
  else
  {
    unsigned int v122 = v27;
    CFAllocatorRef allocator = (CFAllocatorRef)a10;
    uint64_t v36 = (uint8_t *)malloc_type_malloc(count, 0x2BD8088EuLL);
    size_t v35 = count;
  }
  int v37 = gSILogLevels[0];
  uint64_t v38 = 1;
  *(void *)&long long v34 = 134217984;
  int v124 = v36;
  do
  {
    if (v37 >= 5)
    {
      long long v126 = v34;
      int v113 = *__error();
      int v39 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v40 = *(void *)(v31 + 8 * v38);
        *(_DWORD *)blocCFIndex k = v126;
        *(void *)&void block[4] = v40;
        _os_log_impl(&dword_1BD672000, v39, OS_LOG_TYPE_DEFAULT, "Enqueue attribute change %llx.", block, 0xCu);
      }
      *__error() = v113;
      int v37 = gSILogLevels[0];
      uint64_t v36 = v124;
      size_t v35 = count;
      long long v34 = v126;
    }
    ++v38;
  }
  while (v35 != v38);
  bzero(v36, v35);
  uint64_t v41 = 0;
  int v42 = 0;
  unint64_t v43 = (const void *)*MEMORY[0x1E4F1D260];
  CFIndex v127 = count - 1;
  __int16 v44 = v33 + 16;
  do
  {
    *((void *)v44 - 2) = *(void *)(v31 + 8 + 8 * v41);
    if (v30) {
      uint64_t v45 = *(void *)(v30 + 8 + 8 * v41);
    }
    else {
      uint64_t v45 = 0;
    }
    *((void *)v44 - 1) = v45;
    if (v29) {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v29, v41 + 1);
    }
    else {
      CFStringRef ValueAtIndex = 0;
    }
    *(void *)__int16 v44 = ValueAtIndex;
    if (v28) {
      int v47 = CFArrayGetValueAtIndex(v28, v41 + 1);
    }
    else {
      int v47 = 0;
    }
    uint64_t v48 = count;
    if (v47 == v43) {
      int v49 = 0;
    }
    else {
      int v49 = v47;
    }
    *((void *)v44 + 1) = v49;
    v44[16] = v124[v41] != 0;
    v42 += (v124[v41++] == 0) & (v122 >> 4);
    v44 += 40;
  }
  while (v127 != v41);
  if (!v42)
  {
    int v75 = 1;
    unint64_t v21 = (void (*)(void, void))allocator;
    uint64_t v22 = a11;
    uint64_t v76 = v124;
    int v27 = v122;
LABEL_57:
    size_t v50 = v48 - 1;
    goto LABEL_58;
  }
  size_t v50 = count - 1;
  int v51 = (uint64_t *)malloc_type_malloc(8 * v127, 0x100004000313F17uLL);
  CFMutableSetRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v127, 0);
  uint64_t v53 = 0;
  unsigned int v54 = v33 + 16;
  uint64_t v55 = count - 1;
  int v27 = v122;
  do
  {
    if (!v54[16])
    {
      CFArrayAppendValue(Mutable, *(const void **)v54);
      v51[v53++] = *((void *)v54 - 2);
    }
    v54 += 40;
    --v55;
  }
  while (v55);
  uint64_t v22 = a11;
  if (v53)
  {
    MutableUsingMCFAllocatorRef alloc = (const void *)_MDPlistBytesCreateMutableUsingMalloc();
    _MDPlistBytesAppendPlist();
    ByteVectorCFIndex Count = _MDPlistBytesGetByteVectorCount();
    unint64_t v58 = malloc_type_malloc(8 * v53 + ByteVectorCount + 12, 0xF5F2EB0EuLL);
    if (a9 == 12) {
      int v59 = -262275347;
    }
    else {
      int v59 = -267518227;
    }
    int v112 = v58;
    _DWORD *v58 = v59;
    int v60 = v58 + 3;
    int v61 = &v58[2 * v53 + 3];
    ByteVector = (const void *)_MDPlistBytesGetByteVector();
    CFDataRef v114 = MutableUsingMalloc;
    unsigned int v63 = _MDPlistBytesGetByteVectorCount();
    memcpy(v61, ByteVector, v63);
    if (v53 >= 1)
    {
      __int16 v64 = v51;
      uint64_t v65 = v53;
      do
      {
        uint64_t v66 = *v64++;
        *v60++ = v66;
        --v65;
      }
      while (v65);
    }
    uint64_t v67 = _MDPlistBytesGetByteVectorCount() + 8 * v53;
    v112[1] = v67;
    v112[2] = v53;
    pthread_mutex_lock((pthread_mutex_t *)(v120 + 1624));
    JournalFd = getJournalFd(v120, 0, 0);
    uint64_t v69 = fd_write((uint64_t)JournalFd, (uint64_t)v112, v67 + 12);
    pthread_mutex_unlock((pthread_mutex_t *)(v120 + 1624));
    BOOL v70 = v69 == -1;
    size_t v50 = count - 1;
    if (v70)
    {
      int v71 = *__error();
      int v72 = *__error();
      size_t v73 = _SILogForLogForCategory(4);
      os_log_type_t v74 = 2 * (dword_1E9FC90B4 < 4);
      if (os_log_type_enabled(v73, v74))
      {
        *(_DWORD *)blocCFIndex k = 67109120;
        *(_DWORD *)&void block[4] = v71;
        _os_log_impl(&dword_1BD672000, v73, v74, "Error writing to log file: %d", block, 8u);
      }
      *__error() = v72;
      MutableUsingMCFAllocatorRef alloc = v114;
    }
    CFRelease(MutableUsingMalloc);
    free(v112);
    uint64_t v33 = v117;
  }
  free(v51);
  CFRelease(Mutable);
  int v75 = 1;
  unint64_t v21 = (void (*)(void, void))allocator;
  uint64_t v76 = v124;
  uint64_t v48 = count;
LABEL_58:
  if (v48 >= 3 && (v27 & 1) == 0) {
    qsort(v33, v50, 0x28uLL, (int (__cdecl *)(const void *, const void *))OIDAttrPairCmp);
  }
  int v77 = (char *)malloc_type_calloc(1uLL, 80 * v50 + 24, 0xF3B2714CuLL);
  if (!v77)
  {
    int v103 = *__error();
    long long v104 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)blocCFIndex k = 136315650;
      *(void *)&void block[4] = "SIBulkSetAttributes";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 18364;
      *(_WORD *)&block[18] = 2048;
      *(void *)&block[20] = 80 * v50 + 24;
      _os_log_error_impl(&dword_1BD672000, v104, OS_LOG_TYPE_ERROR, "%s:%d: SIBulkSetAttributes failed: calloc failed to allocate size %zu", block, 0x1Cu);
    }
    *__error() = v103;
    if (v21) {
      v21(v22, 1);
    }
    free(v33);
    free(v116);
    uint64_t v105 = 0;
    uint64_t result = 0;
    goto LABEL_132;
  }
  int v78 = v27;
  int v125 = v76;
  size_t v128 = v50;
  CFDataRef v115 = v77;
  *((void *)v77 + 2) = v50;
  uint64_t v79 = v120;
  if (v75)
  {
    CFAllocatorRef allocatora = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    int v123 = (pthread_mutex_t *)(v120 + 1808);
    unint64_t v80 = v116;
    unint64_t v81 = (CFAbsoluteTime *)(v77 + 96);
    unsigned int v82 = v117 + 16;
    size_t v83 = v128;
    while (1)
    {
      CFTypeRef v84 = cf;
      if (cf) {
        CFTypeRef v84 = CFRetain(cf);
      }
      *((void *)v81 - 4) = v84;
      *((void *)v81 - 9) = v79;
      uint64_t v85 = *((void *)v82 - 2);
      int v86 = v82[16];
      if (!v85) {
        goto LABEL_69;
      }
      if (v82[16]) {
        break;
      }
      int v87 = 0;
LABEL_71:
      *((void *)v81 - 6) = v85;
      size_t v88 = v81 - 6;
      *((_DWORD *)v88 + 6) = v87 | v78;
      *((_DWORD *)v88 + 7) = a9;
      v88[1] = *((CFAbsoluteTime *)v82 - 1);
      if (v86) {
        uint64_t v85 = 0;
      }
      *unint64_t v80 = v85;
      *((void *)v81 - 2) = a12;
      uint64_t v89 = *((void *)v82 + 1);
      if (v89) {
        CFRetain(*((CFTypeRef *)v82 + 1));
      }
      *((void *)v81 - 7) = v89;
      *((_DWORD *)v81 - 2) = a13;
      *unint64_t v81 = CFAbsoluteTimeGetCurrent();
      if ((v78 & 0x80) != 0)
      {
        if (!*(void *)v82) {
          goto LABEL_80;
        }
        if (CFDictionaryGetCount(*(CFDictionaryRef *)v82) <= 1)
        {
          *(void *)unsigned int v82 = 0;
          goto LABEL_80;
        }
        if (!*(void *)v82) {
LABEL_80:
        }
          *((_DWORD *)v81 - 6) |= 0x100u;
        if (!*(void *)(v79 + 6872) || (*(unsigned char *)(v79 + 6576) & 0x10) != 0)
        {
          *((_DWORD *)v81 - 6) |= 4u;
        }
        else if (a13 == -1)
        {
          *((_DWORD *)v81 - 2) = 1;
        }
        if (dword_1E9FC90B4 >= 5)
        {
          int v97 = *__error();
          uint64_t v98 = _SILogForLogForCategory(4);
          if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v99 = *((void *)v81 - 6);
            int v100 = *((_DWORD *)v81 - 6);
            *(_DWORD *)blocCFIndex k = 134218240;
            *(void *)&void block[4] = v99;
            *(_WORD *)&block[12] = 1024;
            *(_DWORD *)&block[14] = v100;
            _os_log_impl(&dword_1BD672000, v98, OS_LOG_TYPE_DEFAULT, "PUSH REPAIR oid: %lld, f:%x", block, 0x12u);
          }
          *__error() = v97;
          uint64_t v79 = v120;
        }
      }
      if (*(void *)v82)
      {
        CFTypeID v90 = CFGetTypeID(*(CFTypeRef *)v82);
        if (v90 == CFDictionaryGetTypeID())
        {
          CFDictionaryRef v91 = *(CFDictionaryRef *)v82;
          if (*(void *)v82) {
            CFRetain(*(CFTypeRef *)v82);
          }
          *((void *)v81 - 8) = v91;
        }
      }
      if (a9 == 7 || !*((void *)v81 - 8)) {
        goto LABEL_105;
      }
      CFNumberRef v92 = CFNumberCreate(allocatora, kCFNumberLongLongType, v81 - 6);
      uint64_t v93 = v79;
      int v94 = *((_DWORD *)v81 - 6);
      pthread_mutex_lock(v123);
      if (CFBagGetValue(*(CFBagRef *)(v93 + 1792), v92))
      {
        unsigned int Value = (__CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v93 + 1800), v92);
        CFMutableArrayRef v96 = Value;
        if ((v94 & 1) == 0)
        {
          if (!Value)
          {
            CFMutableArrayRef v96 = CFArrayCreateMutable(allocatora, 0, MEMORY[0x1E4F1D510]);
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(v120 + 1800), v92, v96);
            CFRelease(v96);
          }
          CFArrayAppendValue(v96, *((const void **)v81 - 8));
          goto LABEL_104;
        }
        if (Value) {
          CFArrayRemoveAllValues(Value);
        }
      }
      else if ((v94 & 1) == 0)
      {
        goto LABEL_104;
      }
      CFBagSetValue(*(CFMutableBagRef *)(v120 + 1792), v92);
LABEL_104:
      pthread_mutex_unlock(v123);
      CFRelease(v92);
      uint64_t v79 = v120;
LABEL_105:
      v81 += 10;
      v82 += 40;
      ++v80;
      if (!--v83) {
        goto LABEL_110;
      }
    }
    int v86 = 1;
LABEL_69:
    int v87 = 2;
    goto LABEL_71;
  }
LABEL_110:
  if ((v78 & 1) != 0 || !a12)
  {
    uint64_t v102 = (uint64_t)v115;
    uint64_t v101 = v116;
    *CFDataRef v115 = v21;
    v115[1] = a11;
    unint64_t v21 = 0;
  }
  else
  {
    uint64_t v102 = (uint64_t)v115;
    uint64_t v101 = v116;
  }
  uint64_t v106 = *(void *)(v79 + 1048);
  uint64_t v107 = *(NSObject **)(v106 + 8);
  *(void *)blocCFIndex k = MEMORY[0x1E4F143A8];
  *(void *)&block[8] = 0x40000000;
  *(void *)&block[16] = __si_push_queue_block_invoke;
  *(void *)&block[24] = &__block_descriptor_tmp_41_1177;
  uint64_t v132 = v106;
  uint64_t v133 = a12;
  uint64_t v134 = v101;
  size_t v135 = v128;
  dispatch_sync(v107, block);
  uint64_t v76 = v125;
  if (a9 == 10 || (v78 & 0x801) == 0)
  {
    int v108 = (uint64_t *)(v120 + 1048);
    if (a13)
    {
      uint64_t v109 = a11;
      if (*(_DWORD *)(v120 + 6920) != a13) {
        *(_DWORD *)(v120 + 6920) = a13;
      }
      goto LABEL_129;
    }
  }
  else
  {
    if (a13 && *(_DWORD *)(v120 + 6920) != a13) {
      *(_DWORD *)(v120 + 6920) = a13;
    }
    int v108 = (uint64_t *)(v120 + 1152);
  }
  uint64_t v109 = a11;
LABEL_129:
  uint64_t v110 = *v108;
  qos_class_t v111 = qos_class_self();
  si_enqueue_barrier_with_qos(v110, v111, (uint64_t)setAttributesBulk, v102);
  if (v21) {
    v21(v109, 0);
  }
  free(v117);
  free(v101);
  uint64_t v105 = 1;
  uint64_t result = 1;
LABEL_132:
  if (v76 != buf)
  {
    free(v76);
    return v105;
  }
  return result;
}

void setAttributesBulk(void *a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = gCPUCount;
  if (a1[2] < (unint64_t)gCPUCount) {
    unint64_t v4 = a1[2];
  }
  if (v4 >= 0x10) {
    size_t v5 = 16;
  }
  else {
    size_t v5 = v4;
  }
  if (dword_1E9FC90B4 >= 5)
  {
    int v25 = *__error();
    uint64_t v26 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = a1[2];
      *(_DWORD *)int buf = 134218240;
      *(void *)&uint8_t buf[4] = v27;
      __int16 v35 = 2048;
      size_t v36 = v5;
      _os_log_impl(&dword_1BD672000, v26, OS_LOG_TYPE_DEFAULT, "Begin setattr with %ld items on %ld threads", buf, 0x16u);
    }
    *__error() = v25;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  dispatch_group_t v7 = dispatch_group_create();
  uint64_t v8 = v7;
  if (!a2 && v5 > 1)
  {
    *(void *)int buf = 0;
    uint64_t v9 = a1[3];
    int v10 = *(_DWORD *)(v9 + 32);
    v31[0] = MEMORY[0x1E4F143A8];
    v31[1] = 0x40000000;
    _OWORD v31[2] = __setAttributesBulk_block_invoke;
    v31[3] = &__block_descriptor_tmp_1791;
    int v32 = v10;
    v31[4] = buf;
    _OWORD v31[5] = a1;
    v31[6] = v7;
    char v33 = 0;
    dispatch_apply(v5, 0, v31);
    uint64_t v11 = v9;
    goto LABEL_18;
  }
  uint64_t v12 = a1[2];
  if (a2)
  {
    uint64_t v13 = 0;
    if (!v12) {
      goto LABEL_17;
    }
LABEL_15:
    unint64_t v14 = 0;
    uint64_t v15 = (uint64_t)(a1 + 3);
    do
    {
      _setAttributes(v15);
      ++v14;
      v15 += 80;
    }
    while (v14 < a1[2]);
    goto LABEL_17;
  }
  if (v12)
  {
    uint64_t v13 = a1[3];
    goto LABEL_15;
  }
  uint64_t v13 = 0;
LABEL_17:
  uint64_t v11 = v13;
LABEL_18:
  bumpWorkTime(v11, Current);
  if (dword_1E9FC90B4 >= 5)
  {
    int v28 = *__error();
    CFArrayRef v29 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v30 = "Canceled";
      if (!a2) {
        uint64_t v30 = "Complete";
      }
      *(_DWORD *)int buf = 136315138;
      *(void *)&uint8_t buf[4] = v30;
      _os_log_impl(&dword_1BD672000, v29, OS_LOG_TYPE_DEFAULT, "%s setattr", buf, 0xCu);
    }
    *__error() = v28;
  }
  if (*a1) {
    ((void (*)(void, uint64_t))*a1)(a1[1], a2);
  }
  if (!a2)
  {
    if (a1[2])
    {
      uint64_t v16 = a1[3];
      if (!*(unsigned char *)(v16 + 2064) && !*(unsigned char *)(v16 + 1472))
      {
        CFArrayRef v17 = **(int ***)(v16 + 1048);
        do
        {
          CFArrayRef v18 = v17;
          CFArrayRef v17 = *(int **)v17;
        }
        while (v17);
        if (v18[31] <= 1)
        {
          double v19 = *(double *)(v16 + 1464);
          CFAbsoluteTime v20 = CFAbsoluteTimeGetCurrent();
          *(CFAbsoluteTime *)(v16 + 1464) = v20;
          if (v20 - v19 >= 0.9)
          {
            *(unsigned char *)(v16 + 1472) = 1;
            int v21 = *__error();
            uint64_t v22 = _SILogForLogForCategory(11);
            os_log_type_t v23 = 2 * (dword_1E9FC90D0 < 4);
            if (os_log_type_enabled(v22, v23))
            {
              *(_WORD *)int buf = 0;
              _os_log_impl(&dword_1BD672000, v22, v23, "Index going idle; sync immediately", buf, 2u);
            }
            *__error() = v21;
            si_sync_ctx_create_with_defer_fd(v16, 0);
            *(unsigned char *)(v24 + 139) = 1;
            si_enqueue_work_with_qos(*(void *)(v16 + 1096), 9, (uint64_t)si_sync_index_delayed0, v24);
          }
        }
      }
    }
  }
  dispatch_group_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(v8);
  free(a1);
}

void _setAttributes(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  int v4 = v2;
  uint64_t v6 = v5;
  int v8 = v7;
  uint64_t v9 = v1;
  uint64_t v379 = *MEMORY[0x1E4F143B8];
  if (*(void *)(v1 + 56)) {
    BOOL v10 = dword_1E9FC90B0 < 5;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    if (!v2) {
      goto LABEL_14;
    }
LABEL_7:
    if (dword_1E9FC90B4 >= 5)
    {
      int v11 = *__error();
      uint64_t v12 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v13 = *(void *)(v9 + 24);
        LODWORD(v346[0]) = 134217984;
        *(unint64_t *)((char *)v346 + 4) = v13;
        _os_log_impl(&dword_1BD672000, v12, OS_LOG_TYPE_DEFAULT, "Canceled oid: %lld", (uint8_t *)v346, 0xCu);
      }
      *__error() = v11;
    }
    goto LABEL_444;
  }
  int v14 = *__error();
  uint64_t v15 = _SILogForLogForCategory(3);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    CFAbsoluteTime v17 = CFAbsoluteTimeGetCurrent() - *(double *)(v9 + 72);
    LODWORD(v346[0]) = 134217984;
    *(CFAbsoluteTime *)((char *)v346 + 4) = v17;
    _os_log_impl(&dword_1BD672000, v15, OS_LOG_TYPE_DEFAULT, "Set attributes waited for %f seconds", (uint8_t *)v346, 0xCu);
  }
  *__error() = v14;
  if (v4) {
    goto LABEL_7;
  }
LABEL_14:
  int v334 = 0;
  int v18 = dword_1E9FC90B4;
  if (dword_1E9FC90B4 >= 5)
  {
    int v263 = *__error();
    int v264 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v264, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v265 = *(void *)(v9 + 24);
      int v266 = *(_DWORD *)(v9 + 52);
      LODWORD(v346[0]) = 134218496;
      *(unint64_t *)((char *)v346 + 4) = v265;
      WORD2(v346[1]) = 1024;
      *(_DWORD *)((char *)&v346[1] + 6) = v266;
      WORD1(v346[2]) = 1024;
      HIDWORD(v346[2]) = v266;
      _os_log_impl(&dword_1BD672000, v264, OS_LOG_TYPE_DEFAULT, "_setAttributes oid: %lld source: %d options: 0x%x", (uint8_t *)v346, 0x18u);
    }
    *__error() = v263;
    int v18 = dword_1E9FC90B4;
  }
  int v309 = v6;
  double v19 = (unint64_t *)(v9 + 24);
  unsigned int v20 = *(_DWORD *)(v9 + 48);
  int v21 = v20 & 1;
  if (*(void *)(v9 + 24)) {
    int v22 = (v20 >> 1) & 1;
  }
  else {
    int v22 = 1;
  }
  BOOL v23 = v22 != 1 || v18 < 5;
  LODWORD(v323) = *(_DWORD *)(v9 + 48);
  if (!v23)
  {
    int v272 = *__error();
    int v273 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v273, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v275 = *v19;
      LODWORD(v346[0]) = 134217984;
      *(unint64_t *)((char *)v346 + 4) = v275;
      _os_log_impl(&dword_1BD672000, v273, OS_LOG_TYPE_DEFAULT, "Dummy coming in oid: %lld", (uint8_t *)v346, 0xCu);
    }
    *__error() = v272;
    unsigned int v20 = *(_DWORD *)(v9 + 48);
  }
  BOOL v317 = v21 == 0;
  LODWORD(v324) = v20 & 0x100;
  BOOL v24 = v324 == 0;
  if ((v20 & 0x100) == 0 && v21) {
    BOOL v24 = (v20 & 0x24) != 0;
  }
  int v25 = *(_DWORD *)(v9 + 64);
  int v26 = v20;
  if ((v22 & 1) == 0)
  {
    CFDictionaryRef v27 = *(const __CFDictionary **)(v9 + 16);
    int v26 = v20;
    if (v27)
    {
      if (CFDictionaryGetValue(v27, @"_kMDItemDeleted")) {
        int v26 = v20 | 0x8000;
      }
      else {
        int v26 = v20;
      }
    }
  }
  if ((v26 & 0x18000) == 0x10000)
  {
    bzero(v346, 0x400uLL);
    if (!(*(uint64_t (**)(void))(*(void *)(*(void *)v9 + 1408) + 40))()) {
      v26 |= 0x8000u;
    }
  }
  int v327 = v21;
  LODWORD(v320) = v26;
  if ((v26 & 0x8000) != 0)
  {
    unint64_t v31 = *v19;
    if (*v19)
    {
      if (dword_1E9FC90B4 >= 5)
      {
        int v280 = *__error();
        int v281 = _SILogForLogForCategory(4);
        if (os_log_type_enabled(v281, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v282 = *v19;
          LODWORD(v346[0]) = 134217984;
          *(unint64_t *)((char *)v346 + 4) = v282;
          _os_log_impl(&dword_1BD672000, v281, OS_LOG_TYPE_DEFAULT, "deleting oid: %lld", (uint8_t *)v346, 0xCu);
        }
        *__error() = v280;
        unint64_t v31 = *v19;
        int v21 = v327;
      }
      LOBYTE(v346[0]) = 0;
      uint64_t v32 = *(void *)v9;
      _si_delete_attributes_inner(*(void *)v9, v31, 0, 0, 1, 0, v346);
      si_finish_text_store_deletions(v32);
      if (LOBYTE(v346[0])) {
        notify_post("com.apple.spotlight.SyndicatedContentDeleted");
      }
    }
    goto LABEL_42;
  }
  if (v22)
  {
LABEL_42:
    BOOL v30 = 1;
    goto LABEL_43;
  }
  int v28 = *(const void **)(v9 + 8);
  if (v28)
  {
    CFTypeID v29 = CFGetTypeID(v28);
    BOOL v30 = v29 != CFDictionaryGetTypeID();
  }
  else
  {
    BOOL v30 = 0;
  }
LABEL_43:
  uint64_t v33 = *(void *)v9;
  char v34 = !v24;
  if (*(unsigned char *)(*(void *)v9 + 2064)) {
    char v34 = 1;
  }
  if ((v34 & 1) == 0 && dword_1E9FC90D4 >= 4 && !v30)
  {
    bzero(v346, 0x400uLL);
    uint64_t v36 = (*(uint64_t (**)(void))(*(void *)(v33 + 1408) + 40))();
    if (v36)
    {
      int v302 = (unsigned __int8 **)v36;
      CFLog();
    }
  }
  if (!v21) {
    goto LABEL_56;
  }
  if (*(void *)(v9 + 8) == *MEMORY[0x1E4F1D260])
  {
    int v276 = __si_assert_copy_extra_625(*(_DWORD *)(*(void *)v9 + 32));
    int v277 = v276;
    int v278 = "";
    if (v276) {
      int v278 = v276;
    }
    __message_assert("%s:%u: failed assertion '%s' %s src: %d id: %d oid: %lld parent: %lld options: %x extra: %p", "SpotlightIndex.c", 23955, "(CFTypeRef)ctx->attrdict!=(CFTypeRef)kCFNull", v278, *(_DWORD *)(v9 + 52), *(_DWORD *)(v9 + 64), *(void *)(v9 + 24), *(void *)(v9 + 32), *(_DWORD *)(v9 + 48), *(const void **)(v9 + 16));
    free(v277);
    if (__valid_fs(*(_DWORD *)(*(void *)v9 + 32))) {
      uint64_t v279 = 2989;
    }
    else {
      uint64_t v279 = 3072;
    }
    *(_DWORD *)uint64_t v279 = -559038737;
    abort();
  }
  if (((unsigned __int16)v320 & 0x400) != 0)
  {
LABEL_56:
    LOBYTE(v39) = 0;
    BOOL v38 = 0;
  }
  else
  {
    unsigned int v37 = (unsigned __int16)v320 & 0x200;
    BOOL v38 = v37 == 0;
    unsigned int v39 = v37 >> 9;
  }
  if ((v20 & 0x40) != 0) {
    int v40 = 4;
  }
  else {
    int v40 = 6;
  }
  if ((v20 & 0xC0) == 0) {
    int v40 = 7;
  }
  if ((v20 & 0x1C0) == 0)
  {
    int v40 = 5;
    int v41 = 5;
    int v42 = 5;
    if ((v20 & 0x20) != 0 || !v21) {
      goto LABEL_64;
    }
    BOOL v52 = (v20 & 0x1000) == 0;
    BOOL v53 = !v24 || !v52;
    int v40 = v24 && v52 ? 1 : 9;
    int v41 = v24 && v52 ? 2 : 9;
    int v42 = v53 ? 9 : 3;
    if ((v24 | ((unsigned __int16)(v20 & 0x1000) >> 12))) {
      goto LABEL_64;
    }
    int v40 = ((int)(v20 << 18) >> 31) & 5;
  }
  int v41 = v40;
  int v42 = v40;
LABEL_64:
  unsigned int v321 = v20;
  if (v39) {
    int v43 = v40;
  }
  else {
    int v43 = v42;
  }
  LODWORD(v308) = v38;
  if (v38) {
    unsigned int v44 = v41;
  }
  else {
    unsigned int v44 = v43;
  }
  unsigned int v45 = *(_DWORD *)(v9 + 52);
  if (v45 - 10 >= 3) {
    uint64_t v46 = v44;
  }
  else {
    uint64_t v46 = v45;
  }
  int v47 = v45 - 10 < 3 || v24;
  int v330 = v47;
  if (!*(unsigned char *)(*(void *)v9 + 2064) && v46 != v45)
  {
    int v48 = *__error();
    int v49 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      int v119 = *(_DWORD *)(v9 + 52);
      uint64_t v120 = *(unsigned __int8 ***)(v9 + 24);
      LODWORD(v346[0]) = 136316418;
      *(unint64_t *)((char *)v346 + 4) = (unint64_t)"_setAttributes";
      WORD2(v346[1]) = 1024;
      *(_DWORD *)((char *)&v346[1] + 6) = 24006;
      WORD1(v346[2]) = 1024;
      HIDWORD(v346[2]) = v119;
      LOWORD(v346[3]) = 1024;
      *(_DWORD *)((char *)&v346[3] + 2) = v46;
      HIWORD(v346[3]) = 2048;
      CFNumberRef v347 = v120;
      LOWORD(v348) = 1024;
      *(_DWORD *)((char *)&v348 + 2) = v320;
      _os_log_error_impl(&dword_1BD672000, v49, OS_LOG_TYPE_ERROR, "%s:%d: ctx->source: %d != source: %d oid: %lld options: %x", (uint8_t *)v346, 0x2Eu);
    }
    *__error() = v48;
  }
  if (!v30)
  {
    CFDictionaryRef v50 = *(const __CFDictionary **)(v9 + 8);
    if (v50)
    {
      bzero(&v358, 0x400uLL);
      bzero(&v351, 0x400uLL);
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v50, @":MD:kMDItemPath");
      if (Value && CFStringGetCString(Value, (char *)&v358, 1024, 0x8000100u)) {
        snprintf((char *)v346, 0x400uLL, "processing oid: %lld source: %d %s", *v19, v46, (const char *)&v358);
      }
      else {
        snprintf((char *)v346, 0x400uLL, "processing oid: %lld source: %d", *v19, v46);
      }
      snprintf((char *)&v351, 0x400uLL, "processing oid: %lld source: %d", *v19, v46);
      v301[509] = 24022;
      int v302 = &v351;
      __si_set_error_str(1, "%s:%u: %s", v54, v55, v56, v57, v58, v59, (char)"SpotlightIndex.c");
    }
  }
  LODWORD(v322) = v30;
  int v316 = v8;
  uint64_t v60 = *(void *)v9;
  unsigned int v326 = v321 & 0x80;
  uint64_t v331 = v60;
  if ((v326 >> 7) | (v324 >> 8))
  {
    int v61 = *__error();
    __int16 v62 = _SILogForLogForCategory(4);
    os_log_type_t v63 = 2 * (dword_1E9FC90B4 < 4);
    if (os_log_type_enabled(v62, v63))
    {
      unint64_t v64 = *v19;
      LODWORD(v346[0]) = 134218496;
      *(unint64_t *)((char *)v346 + 4) = v64;
      WORD2(v346[1]) = 1024;
      *(_DWORD *)((char *)&v346[1] + 6) = v320;
      WORD1(v346[2]) = 1024;
      HIDWORD(v346[2]) = v25;
      _os_log_impl(&dword_1BD672000, v62, v63, "DEQUEUE oid: %lld, o: %x t: %d", (uint8_t *)v346, 0x18u);
    }
    *__error() = v61;
    uint64_t v60 = v331;
  }
  CFDictionaryRef v65 = *(const __CFDictionary **)(v9 + 8);
  CFDictionaryRef v315 = *(CFDictionaryRef *)(v9 + 16);
  unint64_t v328 = *(void *)(v9 + 24);
  __int16 v329 = (uint64_t *)(v9 + 24);
  uint64_t v311 = *(void *)(v9 + 32);
  uint64_t v312 = *(void *)(v9 + 40);
  CFDictionaryRef v313 = v65;
  if (v327)
  {
    CFAllocatorRef v66 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberRef v67 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberLongLongType, (const void *)(v9 + 24));
    uint64_t v68 = (pthread_mutex_t *)(v60 + 1808);
    pthread_mutex_lock((pthread_mutex_t *)(v60 + 1808));
    if (MEMORY[0x1C187F790](*(void *)(v60 + 1792), v67) < 2)
    {
      CFArrayRef v70 = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v60 + 1800), v67);
      uint64_t v71 = v60;
      CFArrayRef v69 = v70;
      if (v70)
      {
        CFRetain(v70);
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v71 + 1800), v67);
      }
    }
    else if (dword_1E9FC90B4 >= 5)
    {
      uint64_t v283 = v46;
      int v284 = *__error();
      int v285 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v285, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v286 = *v329;
        LODWORD(v346[0]) = 134217984;
        *(unint64_t *)((char *)v346 + 4) = v286;
        _os_log_impl(&dword_1BD672000, v285, OS_LOG_TYPE_DEFAULT, "Duplicate in flight oid: %lld", (uint8_t *)v346, 0xCu);
      }
      CFArrayRef v69 = 0;
      *__error() = v284;
      LODWORD(v322) = 1;
      uint64_t v46 = v283;
    }
    else
    {
      CFArrayRef v69 = 0;
      LODWORD(v322) = 1;
    }
    CFBagRemoveValue(*(CFMutableBagRef *)(v331 + 1792), v67);
    pthread_mutex_unlock(v68);
    CFRelease(v67);
    if (v69)
    {
      CFDictionaryRef Mutable = CFDictionaryCreateMutable(v66, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      unint64_t v73 = *(void *)(v9 + 8);
      v346[0] = (unint64_t)Mutable;
      v346[1] = v73;
      CFIndex Count = CFArrayGetCount(v69);
      if (Count >= 1)
      {
        unint64_t v75 = Count + 1;
        do
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v69, v75 - 2);
          CFDictionaryApplyFunction(ValueAtIndex, (CFDictionaryApplierFunction)preProcessInFlight, v346);
          --v75;
        }
        while (v75 > 1);
      }
      CFIndex v310 = CFDictionaryGetCount(Mutable);
      if (!v310)
      {
        CFRelease(Mutable);
        CFDictionaryRef Mutable = 0;
      }
      CFDictionaryRef v325 = Mutable;
      CFRelease(v69);
    }
    else
    {
      CFDictionaryRef v325 = 0;
      CFIndex v310 = 0;
    }
    uint64_t v60 = v331;
  }
  else
  {
    CFDictionaryRef v325 = 0;
    CFIndex v310 = 0;
  }
  int v77 = 0;
  int v314 = v323 & 0x4800;
  if (v46 == 4) {
    int v78 = 1;
  }
  else {
    int v78 = v330;
  }
  *(void *)&long long v3 = 67109376;
  long long v318 = v3;
  *(void *)&long long v3 = 67109120;
  long long v319 = v3;
  do
  {
    if (v78) {
      LiveIndex = si_getLiveIndex(*(void *)(v60 + 1376));
    }
    else {
      LiveIndex = si_getSyncIndex(v60, v25);
    }
    SyncIndex = LiveIndex;
    if (v25 < 1) {
      goto LABEL_147;
    }
    v25 &= ~(v25 >> 31);
    if (v25 > LiveIndex[10] && !*((unsigned char *)LiveIndex + 44))
    {
      uint64_t v81 = v46;
      int v82 = *__error();
      size_t v83 = _SILogForLogForCategory(4);
      os_log_type_t v84 = dword_1E9FC90B4 < 3;
      if (os_log_type_enabled(v83, (os_log_type_t)(dword_1E9FC90B4 < 3)))
      {
        int v85 = SyncIndex[10];
        v346[0] = __PAIR64__(v25, v318);
        LOWORD(v346[1]) = 1024;
        *(_DWORD *)((char *)&v346[1] + 2) = v85;
        _os_log_impl(&dword_1BD672000, v83, v84, "*warn* Unexpected transaction id %d. Expected %d. Attempting repair", (uint8_t *)v346, 0xEu);
      }
      *__error() = v82;
      uint64_t v60 = v331;
      si_sync_ctx_create_with_defer_fd(v331, 0);
      uint64_t v87 = v86;
      *(_DWORD *)(v86 + 80) = v25 - 1;
      uint64_t v88 = *(void *)(v60 + 1048);
      qos_class_t v89 = qos_class_self();
      si_enqueue_barrier_with_qos(v88, v89, (uint64_t)si_initialIndexingEndedQueueOnFlush, v87);
      int v90 = *__error();
      CFDictionaryRef v91 = _SILogForLogForCategory(4);
      os_log_type_t v92 = dword_1E9FC90B4 < 3;
      if (os_log_type_enabled(v91, (os_log_type_t)(dword_1E9FC90B4 < 3)))
      {
        v346[0] = __PAIR64__(si_getSyncIndex(v60, v25)[10], v319);
        _os_log_impl(&dword_1BD672000, v91, v92, "*warn* Transaction id is now %d", (uint8_t *)v346, 8u);
      }
      *__error() = v90;
      SyncIndex = si_getSyncIndex(v60, v25);
      uint64_t v46 = v81;
    }
    int v93 = SyncIndex[10];
    if (v25 <= v93 || SyncIndex == v77 || SyncIndex == 0) {
      break;
    }
    int v77 = SyncIndex;
  }
  while (!*((unsigned char *)SyncIndex + 44));
  BOOL v10 = v25 < v93;
  int v96 = v330;
  if (!v10) {
    int v96 = 1;
  }
  if ((v317 | v96))
  {
LABEL_147:
    unsigned int v97 = v326;
  }
  else
  {
    unsigned int v97 = v326;
    if (!*((unsigned char *)SyncIndex + 44))
    {
      if (*(_DWORD *)(v60 + 2416) < v25 && v328 != -1)
      {
        *(_DWORD *)(v60 + 2416) = v25;
        int v103 = *__error();
        long long v104 = _SILogForLogForCategory(4);
        os_log_type_t v105 = dword_1E9FC90B4 < 3;
        if (os_log_type_enabled(v104, (os_log_type_t)(dword_1E9FC90B4 < 3)))
        {
          int v106 = SyncIndex[10];
          LODWORD(v346[0]) = 67109632;
          HIDWORD(v346[0]) = v25;
          LOWORD(v346[1]) = 1024;
          *(_DWORD *)((char *)&v346[1] + 2) = v106;
          HIWORD(v346[1]) = 2048;
          v346[2] = v328;
          _os_log_impl(&dword_1BD672000, v104, v105, "*warn* Items's transaction id %d is too low for the current index %d. Discarding oid %llx.", (uint8_t *)v346, 0x18u);
        }
        *__error() = v103;
        uint64_t v60 = v331;
        unsigned int v97 = v326;
      }
      goto LABEL_150;
    }
  }
  if (v322)
  {
LABEL_150:
    if (dword_1E9FC90B4 < 5)
    {
      LOBYTE(v98) = 0;
      if (!v97) {
        goto LABEL_432;
      }
      goto LABEL_428;
    }
    int v270 = *__error();
    int v271 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v271, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v346[0]) = 134217984;
      *(unint64_t *)((char *)v346 + 4) = v328;
      _os_log_impl(&dword_1BD672000, v271, OS_LOG_TYPE_DEFAULT, "isDummy oid: %lld", (uint8_t *)v346, 0xCu);
    }
    LOBYTE(v98) = 0;
    *__error() = v270;
    goto LABEL_529;
  }
  if (v328)
  {
    uint64_t v99 = *(int **)(v60 + 1184);
    obint j = 0;
    obj_callbacCFIndex k = db_get_obj_callback(v99, v328, (void **)&obj, 0x10000, (void (*)(void *, uint64_t))si_docIdRewriteCallback, *(void *)(v60 + 2360), 0);
    int v101 = obj_callback;
    if (obj_callback)
    {
      if (obj_callback == 9)
      {
        int v98 = 0;
LABEL_418:
        if (obj)
        {
          free(obj);
          obint j = 0;
        }
        if (SyncIndex) {
          int v218 = v98;
        }
        else {
          int v218 = 0;
        }
        if (v218 != 1)
        {
LABEL_427:
          if (!v97) {
            goto LABEL_432;
          }
          goto LABEL_428;
        }
        char v219 = atomic_load(SyncIndex + 9);
        if ((v219 & 2) == 0
          && !*((unsigned char *)SyncIndex + 15203)
          && *((unsigned char *)SyncIndex + 15664)
          && !atomic_fetch_or((atomic_uchar *volatile)(v60 + 1440), 2u))
        {
          int v237 = *__error();
          int v238 = _SILogForLogForCategory(4);
          os_log_type_t v239 = 2 * (dword_1E9FC90B4 < 4);
          if (os_log_type_enabled(v238, v239))
          {
            LOWORD(v346[0]) = 0;
            _os_log_impl(&dword_1BD672000, v238, v239, "Schedule index flush.", (uint8_t *)v346, 2u);
          }
          *__error() = v237;
          int v240 = malloc_type_calloc(1uLL, 0x60uLL, 0x10B0040E0DE4348uLL);
          uint64_t v60 = v331;
          *int v240 = v331;
          v240[1] = SyncIndex;
          int v241 = SyncIndex[14];
          *((_DWORD *)v240 + 4) = 2;
          *((_DWORD *)v240 + 5) = v241;
          si_indexDeleteDeferredItems(v60);
          v240[5] = copyHoldQueue(*v240);
          if (!v240[9] && !*((_DWORD *)v240 + 12))
          {
            uint64_t v260 = *(void *)(v60 + 2352);
            if (v260)
            {
              int v261 = *(uint64_t (**)(void, const char *, uint64_t, const char *))(v260 + 64);
              if (v261) {
                *((_DWORD *)v240 + 12) = v261(*(void *)(v260 + 144), "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 24787, "void _setAttributes(si_set_attr_ctx *, _Bool, dispatch_group_t, Boolean)");
              }
            }
          }
          si_enqueue_work(*(void *)(v60 + 1040), (uint64_t)_flushCache, (uint64_t)v240);
          LOBYTE(v98) = 1;
          goto LABEL_458;
        }
LABEL_426:
        LOBYTE(v98) = 1;
        goto LABEL_427;
      }
    }
    else
    {
      obj_callbacCFIndex k = (uint64_t)db_validate_obj(v99);
    }
    MEMORY[0x1F4188790](obj_callback);
    bzero(v301, 0x1000uLL);
    CFAllocatorRef v107 = _SIStackAllocatorCreate(v301, 4096, indexingZone);
    if (v313) {
      CFIndex v108 = CFDictionaryGetCount(v313);
    }
    else {
      CFIndex v108 = 0;
    }
    CFDictionaryRef v109 = v315;
    unsigned int v322 = v99;
    if (v315) {
      CFDictionaryRef v109 = (CFDictionaryRef)CFDictionaryGetCount(v315);
    }
    uint64_t v110 = (char *)v109 + v108 + v310;
    qos_class_t v111 = v110 + 4;
    CFAllocatorRef allocator = v107;
    int v112 = (char *)CFAllocatorAllocate(v107, 16 * (uint64_t)&v110[(void)(v110 + 4)] + 656, 16 * (uint64_t)&v110[(void)(v110 + 4)] + 656);
    LODWORD(v113) = 0;
    long long v377 = 0u;
    long long v378 = 0u;
    CFDataRef v114 = v110 + 27;
    long long v375 = 0u;
    long long v376 = 0u;
    *(void *)&long long v318 = &v112[8 * (void)(v110 + 27)];
    uint64_t v115 = v318 + 8 * (void)(v110 + 27);
    long long v373 = 0u;
    long long v374 = 0u;
    uint64_t v116 = v115 + 8 * (void)v110;
    long long v372 = 0u;
    long long v371 = 0u;
    long long v370 = 0u;
    long long v369 = 0u;
    long long v368 = 0u;
    long long v367 = 0u;
    long long v366 = 0u;
    long long v365 = 0u;
    long long v364 = 0u;
    memset(v363, 0, sizeof(v363));
    long long v362 = 0u;
    long long v361 = 0u;
    unint64_t v358 = 0xFFF0000000000000;
    long long v360 = 0u;
    long long v359 = 0u;
    int v117 = (v46 == 10) | (2 * v327);
    LODWORD(v360) = v117;
    if (!v101 && obj)
    {
      if ((*(unsigned char *)(v331 + 6576) & 0x10) == 0)
      {
LABEL_176:
        LODWORD(v113) = 0;
        goto LABEL_187;
      }
      if (objectIsMarker(*(int **)(v331 + 1184), (uint64_t)obj)) {
        goto LABEL_185;
      }
      if (v313)
      {
        if (CFDictionaryContainsKey(v313, @":MD:_kMDItemBackupMoveMarker")) {
          goto LABEL_185;
        }
        int v118 = CFDictionaryContainsKey(v313, @":MD:_kMDItemBackupMoveMarker");
        CFDictionaryRef v113 = v315;
        if (!v315 || v118)
        {
LABEL_504:
          int v117 = v360;
          if (!v118) {
            goto LABEL_176;
          }
          goto LABEL_186;
        }
LABEL_184:
        if (!CFDictionaryContainsKey(v113, @":MD:_kMDItemBackupMoveMarker"))
        {
          int v118 = CFDictionaryContainsKey(v315, @":MD:_kMDItemBackupMoveMarker");
          goto LABEL_504;
        }
LABEL_185:
        int v117 = v360;
LABEL_186:
        LODWORD(v113) = 128;
        goto LABEL_187;
      }
      CFDictionaryRef v113 = v315;
      if (v315) {
        goto LABEL_184;
      }
      int v117 = v360;
    }
LABEL_187:
    unsigned int v121 = v117 & 0xFFFFFE7F | v113 | (*(unsigned __int8 *)(v331 + 2064) << 8) | 0x1000;
    int v307 = v112;
    *(void *)&long long v364 = v112;
    *((void *)&v364 + 1) = v318;
    *((void *)&v365 + 1) = v114;
    *(void *)&long long v367 = v115;
    *((void *)&v367 + 1) = v116;
    *((void *)&v368 + 1) = v111;
    LODWORD(v360) = v121;
    DWORD2(v376) = -1;
    DWORD2(v377) = -1;
    int v122 = v327;
    CFDictionaryRef v123 = v313;
    int v124 = v322;
    if (obj)
    {
      LOBYTE(v332) = 0;
      v346[0] = 0;
      int v351 = 0;
      if (db_get_field(v322, (uint64_t)obj, "_kMDItemGroupId", v346, &v351))
      {
        if (!si_getGroupFromDBO(v331, (uint64_t)obj, &v332) && dword_1E9FC90B4 >= 5)
        {
          int v125 = *__error();
          long long v126 = _SILogForLogForCategory(4);
          if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v335 = 0;
            _os_log_impl(&dword_1BD672000, v126, OS_LOG_TYPE_DEFAULT, "Couldn't get the group id.", v335, 2u);
          }
          *__error() = v125;
          int v122 = v327;
          CFDictionaryRef v123 = v313;
          int v124 = v322;
        }
      }
      else if (*(_DWORD *)(v346[0] + 8) == 1)
      {
        LOBYTE(v332) = *v351;
      }
      if ((v332 & 0xF7) == 2) {
        LODWORD(v360) = v360 | 0x400;
      }
    }
    if ((unint64_t)v123 | (unint64_t)v315)
    {
      uint64_t v60 = v331;
      CFDictionaryRef v127 = v325;
      if (v325)
      {
        CFDictionaryApplyFunction(v325, (CFDictionaryApplierFunction)preProcess, &v358);
        CFRelease(v127);
      }
      CFDictionaryRef v128 = v315;
      if (v315)
      {
        CFDictionaryApplyFunction(v315, (CFDictionaryApplierFunction)preProcess, &v358);
        CFDictionaryRef v128 = v315;
      }
      *((void *)&v372 + 1) = v128;
      if (v123) {
        CFDictionaryApplyFunction(v123, (CFDictionaryApplierFunction)preProcess, &v358);
      }
      postPreprocess((uint64_t)&v358, 0);
      handleUserTags((uint64_t)&v358);
      if ((void)v373)
      {
        if (SyncIndex)
        {
          if (v46 <= 3)
          {
            ContentIndexUpdateTimeStamp(SyncIndex, v373, v308, v330);
            if ((unint64_t)v373 > *(void *)(v60 + 2400)) {
              *(void *)(v60 + 2400) = v373;
            }
          }
        }
      }
      if ((void)v361)
      {
        InsertPreProcessContextAddAttr((uint64_t)&v358, @"_kTimeMachineOldestSnapshot", (CFTypeRef)v361, 0);
        *(void *)&long long v361 = 0;
      }
      if (*((void *)&v360 + 1))
      {
        InsertPreProcessContextAddAttr((uint64_t)&v358, @"_kTimeMachineNewestSnapshot", *((CFTypeRef *)&v360 + 1), 0);
        *((void *)&v360 + 1) = 0;
      }
      char v129 = v360;
      if ((v360 & 0x10) != 0 && (void)v365)
      {
        char v129 = v360 & 0xEF;
        LODWORD(v360) = v360 & 0xFFFFFFEF;
      }
      if ((v129 & 0x20) != 0)
      {
        if (v363[0])
        {
          if (!CFDictionaryGetValue(v123, @"_kMDItemSnippet"))
          {
            CFStringRef v130 = SICreateStringByRemovingWhitespaceFromTextContent(allocator, v363[0], 300);
            if (v130) {
              InsertPreProcessContextAddAttr((uint64_t)&v358, @"_kMDItemSnippet", v130, 0);
            }
          }
        }
      }
      CFDictionaryRef v325 = 0;
      uint64_t v131 = v311;
      if (*((void *)&v378 + 1)) {
        BOOL v132 = v311 == 0;
      }
      else {
        BOOL v132 = 1;
      }
      if (!v132) {
        uint64_t v131 = *((void *)&v378 + 1);
      }
      uint64_t v311 = v131;
    }
    else
    {
      uint64_t v60 = v331;
    }
    if (obj)
    {
      if (!(void)v366 && (v323 & 0x800) != 0 && !v122)
      {
        v346[0] = 0;
        int v351 = 0;
        if (!db_get_field(v124, (uint64_t)obj, "_kMDItemUserTags", v346, &v351))
        {
          CFDictionaryRef v133 = _decodeSDBField((unint64_t)v124, (unsigned __int16 *)v346[0], v351, 0, 0, 0, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
          CFTypeID v134 = CFGetTypeID(v133);
          if (v134 == CFStringGetTypeID() || (CFTypeID TypeID = CFArrayGetTypeID(), TypeID == CFGetTypeID(v133)))
          {
            *(void *)&long long v366 = @":EA:_kMDItemUserTags";
            *((void *)&v366 + 1) = v133;
            handleUserTags((uint64_t)&v358);
          }
          else
          {
            CFRelease(v133);
          }
          uint64_t v60 = v331;
        }
      }
    }
    if ((v360 & 4) != 0 && !v122)
    {
      int v136 = *__error();
      uint64_t v137 = _SILogForLogForCategory(0);
      os_log_type_t v138 = 2 * (gSILogLevels[0] < 4);
      if (os_log_type_enabled(v137, v138))
      {
        LOWORD(v346[0]) = 0;
        _os_log_impl(&dword_1BD672000, v137, v138, "Dictionary claims the importer was the origin, but trail tells us it was not. Treating as normal setAttr call.", (uint8_t *)v346, 2u);
      }
      *__error() = v136;
      uint64_t v60 = v331;
    }
    unint64_t v139 = v362;
    if ((void)v362) {
      CFRetain((CFTypeRef)v362);
    }
    CFIndex v140 = *((void *)&v362 + 1);
    if (*((void *)&v362 + 1)) {
      CFRetain(*((CFTypeRef *)&v362 + 1));
    }
    CFIndex v310 = v140;
    unint64_t v323 = v139;
    if (dword_1E9FC90BC >= 5)
    {
      int v287 = *__error();
      int v288 = _SILogForLogForCategory(6);
      if (os_log_type_enabled(v288, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(v346[0]) = 138412546;
        *(unint64_t *)((char *)v346 + 4) = v310;
        WORD2(v346[1]) = 2112;
        *(unint64_t *)((char *)&v346[1] + 6) = v323;
        _os_log_impl(&dword_1BD672000, v288, OS_LOG_TYPE_DEFAULT, "%@ = %@", (uint8_t *)v346, 0x16u);
      }
      *__error() = v287;
      uint64_t v60 = v331;
      int v122 = v327;
    }
    if (!(void)v359 && v122) {
      LODWORD(v360) = v360 & 0xFFFFFFEF;
    }
    if (*(unsigned char *)(*(void *)v9 + 2064))
    {
      unsigned int v141 = v320 | 0x200;
    }
    else
    {
      if (v314) {
        int v142 = 1;
      }
      else {
        int v142 = v122;
      }
      if (v142) {
        unsigned int v141 = v320 | 0x200;
      }
      else {
        unsigned int v141 = v320;
      }
    }
    unsigned int v303 = v141;
    if (!v312 || (uint64_t v143 = *(void *)(v312 + 56)) == 0) {
      uint64_t v143 = gDefaultSchema;
    }
    if (!v101)
    {
      if (obj)
      {
        if (!v122)
        {
          if (*(void *)(v60 + 1144))
          {
            unint64_t v144 = obj[4];
            if (v144)
            {
              if (v144 > *(void *)(v60 + 1296)
                && v144 <= *(void *)(v60 + 1304)
                && objectHasContent(v322, (uint64_t)obj)
                && (v360 & 0x20) == 0)
              {
                uint64_t v145 = *obj;
                free(obj);
                obint j = 0;
                cleanupPreProcContext(&v358);
                if (v307) {
                  CFAllocatorDeallocate(allocator, v307);
                }
                if (!(void)v365)
                {
                  int v256 = malloc_type_malloc(0x50uLL, 0x10E0040BFFD03D2uLL);
                  _OWORD *v256 = *(_OWORD *)v9;
                  long long v257 = *(_OWORD *)(v9 + 64);
                  long long v259 = *(_OWORD *)(v9 + 16);
                  long long v258 = *(_OWORD *)(v9 + 32);
                  v256[3] = *(_OWORD *)(v9 + 48);
                  v256[4] = v257;
                  v256[1] = v259;
                  v256[2] = v258;
                  *(_OWORD *)(v9 + 48) = 0u;
                  *(_OWORD *)(v9 + 64) = 0u;
                  *(_OWORD *)(v9 + 16) = 0u;
                  *(_OWORD *)(v9 + 32) = 0u;
                  *(_OWORD *)uint64_t v9 = 0u;
                  si_enqueue_work(*(void *)(v60 + 1144), (uint64_t)setAttributes, (uint64_t)v256);
                  return;
                }
                (*(void (**)(void, uint64_t, void, void))(*(void *)(v60 + 2352) + 16))(*(void *)(*(void *)(v60 + 2352) + 144), v145, 0, 0);
                LOBYTE(v98) = 0;
                goto LABEL_458;
              }
            }
          }
        }
      }
    }
    if (v122) {
      BOOL v146 = 1;
    }
    else {
      BOOL v146 = v101 != 0;
    }
    if (!v146
      && v363[0] != (CFStringRef)*MEMORY[0x1E4F1D260]
      && (objectHasContent(v322, (uint64_t)obj) || (*(unsigned char *)(v60 + 6576) & 0x10) != 0))
    {
      int v147 = decodeDBOToDictionary(v322, (uint64_t)obj, 0, 0x2000, 2, *(_DWORD *)(v60 + 2020), *(_DWORD *)(v60 + 2052), *(_DWORD *)(v60 + 1276) > 83, 0, allocator);
    }
    else
    {
      int v147 = 0;
    }
    int v148 = 0;
    unint64_t v149 = v328;
    unsigned int v320 = v147;
    uint64_t v308 = 0;
    if (!v101 && obj)
    {
      v346[0] = *(unsigned int *)(v60 + 2004);
      int v351 = 0;
      *(void *)uint64_t v335 = 0;
      uint64_t v150 = v322;
      int field_by_id = db_get_field_by_id(v322, (uint64_t)obj, (int *)v346, (unint64_t *)&v351, (unint64_t *)v335);
      uint64_t v152 = 0;
      if (!field_by_id) {
        uint64_t v152 = **(void **)v335;
      }
      uint64_t v308 = v152;
      LODWORD(v346[0]) = *(_DWORD *)(v60 + 2000);
      if (db_get_field_by_id(v150, (uint64_t)obj, (int *)v346, (unint64_t *)&v351, (unint64_t *)v335))int v148 = 0; {
      else
      }
        int v148 = **(unsigned char **)v335;
      unint64_t v149 = v328;
    }
    int v304 = v148;
    unint64_t v153 = v149;
    si_indexDeleteDeferredItemsIfItemIncluded(v60, v149);
    unint64_t v154 = obj;
    int v305 = obj;
    if (obj)
    {
      obint j = (uint64_t *)db_copy_obj((unsigned int *)obj, 1024);
      db_validate_obj(v322);
      free(v154);
      BOOL v155 = v46 == 10 && v314 == 0;
      BOOL v156 = v317;
      if (v155) {
        BOOL v156 = 0;
      }
      if (v156)
      {
        int v157 = candidateForReimport(v60, (uint64_t *)&obj);
        LODWORD(v154) = 0;
      }
      else
      {
        if (v122)
        {
          unsigned int v159 = db_delete_fields_with_flags(v322, (uint64_t)obj);
          LODWORD(v154) = v159 == 0;
          if (v159 && dword_1E9FC90C0 >= 5)
          {
            unsigned int v297 = v159;
            int v298 = *__error();
            int v299 = _SILogForLogForCategory(7);
            if (os_log_type_enabled(v299, OS_LOG_TYPE_DEFAULT))
            {
              v346[0] = __PAIR64__(v297, v319);
              _os_log_impl(&dword_1BD672000, v299, OS_LOG_TYPE_DEFAULT, "Deleting importer fields failed, rc:%d", (uint8_t *)v346, 8u);
            }
            *__error() = v298;
            uint64_t v60 = v331;
            int v122 = v327;
          }
          if (!v363[0]) {
            InsertPreProcessContextAddAttr((uint64_t)&v358, @"_kMDItemTextContentIndexExists", (CFTypeRef)*MEMORY[0x1E4F1CFC8], 0);
          }
        }
        else
        {
          LODWORD(v154) = 0;
        }
        int v157 = 0;
      }
    }
    else
    {
      obint j = (uint64_t *)db_create_obj((uint64_t)v322, 1024, 0);
      *obint j = v153;
      int v157 = (v46 != 10 || v314 != 0) && v317;
    }
    if ((v360 & 8) != 0) {
      *((_DWORD *)obj + 10) |= 2u;
    }
    LODWORD(v319) = v157;
    if (v324)
    {
      if (*(void *)(v9 + 8))
      {
        int v290 = __si_assert_copy_extra_625(-1);
        int v291 = v290;
        int v292 = "";
        if (v290) {
          int v292 = v290;
        }
        __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 24626, "ctx->attrdict==((void *)0)", v292);
        free(v291);
        if (__valid_fs(-1)) {
          uint64_t v293 = 2989;
        }
        else {
          uint64_t v293 = 3072;
        }
        *(_DWORD *)uint64_t v293 = -559038737;
        abort();
      }
      int v351 = 0;
      CFStringRef v352 = &v351;
      uint64_t v353 = 0x2000000000;
      LOBYTE(v354) = 0;
      long long v163 = *(_DWORD **)(v60 + 6872);
      if (v163)
      {
        *(void *)uint64_t v335 = 0;
        if (!db_get_obj(v163, *obj, (void **)v335, 0))
        {
          uint64_t v164 = *(void *)v335;
          *((_DWORD *)obj + 10) = *(_DWORD *)(*(void *)v335 + 40);
          *((unsigned char *)v352 + 24) = 1;
          CFStringEncoding v165 = *(_DWORD **)(v60 + 6872);
          v346[0] = MEMORY[0x1E4F143A8];
          v346[1] = 0x40000000;
          v346[2] = (unint64_t)__si_addRecoveryAttributes_block_invoke;
          v346[3] = (unint64_t)&unk_1E6345E20;
          CFNumberRef v347 = &v351;
          uint64_t v348 = v60;
          p_obint j = (uint64_t)&obj;
          uint64_t v350 = v164;
          _enumerate_dbo(v165, v164, 0, (uint64_t)v346);
          free(*(void **)v335);
        }
        BOOL v166 = *((unsigned char *)v352 + 24) != 0;
      }
      else
      {
        BOOL v166 = 0;
      }
      _Block_object_dispose(&v351, 8);
      unsigned int v167 = v154 | v166;
      int v168 = 1;
LABEL_392:
      uint64_t v203 = v311;
      if (v166 && v167)
      {
        if ((v360 & 0x40) == 0)
        {
          if (v363[0])
          {
            CFStringRef v204 = (const __CFString *)CFDictionaryGetValue(v313, @"kMDItemContentType");
            if (v204)
            {
              CFStringRef v205 = v204;
              CFTypeID v206 = CFStringGetTypeID();
              BOOL v53 = v206 == CFGetTypeID(v205);
              uint64_t v60 = v331;
              if (v53)
              {
                if (CFEqual(v205, @"public.plain-text")
                  || CFEqual(v205, @"public.data")
                  || CFStringHasPrefix(v205, @"dyn."))
                {
                  goto LABEL_402;
                }
                if (v315) {
                  int v262 = CFDictionaryGetValue(v315, @"kMDItemContentTypeTree");
                }
                else {
                  int v262 = 0;
                }
                if (v313 && !v262) {
                  int v262 = CFDictionaryGetValue(v313, @"kMDItemContentTypeTree");
                }
                if (v262)
                {
                  CFTypeID v269 = CFArrayGetTypeID();
                  BOOL v53 = v269 == CFGetTypeID(v262);
                  uint64_t v60 = v331;
                  if (v53)
                  {
                    v380.length = CFArrayGetCount((CFArrayRef)v262);
                    v380.locatiouint64_t n = 0;
                    if (CFArrayContainsValue((CFArrayRef)v262, v380, @"public.plain-text")) {
LABEL_402:
                    }
                      LODWORD(v360) = v360 | 0x40;
                  }
                }
              }
            }
          }
        }
        unsigned int v207 = 0;
        unsigned int v208 = v360;
        CFStringRef v209 = v363[0];
        if ((v321 & 0x40) != 0)
        {
          int v210 = v322;
          uint64_t v211 = (uint64_t)v320;
          uint64_t v212 = v308;
          unsigned __int8 v213 = v304;
          int v214 = v319;
        }
        else
        {
          int v210 = v322;
          uint64_t v211 = (uint64_t)v320;
          uint64_t v212 = v308;
          unsigned __int8 v213 = v304;
          int v214 = v319;
          if ((v360 & 0x1000) != 0 && !v363[0])
          {
            if (*(unsigned char *)(v9 + 49)) {
              unsigned int v207 = 1;
            }
            else {
              unsigned int v207 = v317 & (v360 >> 4);
            }
          }
        }
        uint64_t v242 = obj[3];
        if (v203)
        {
          obj[3] = v203;
          unsigned int v208 = v360;
        }
        long long v356 = *(_OWORD *)&v363[1];
        if (v330) {
          int v243 = ((*(_DWORD *)(v60 + 1276) > 83) << 10) | 2;
        }
        else {
          int v243 = (*(_DWORD *)(v60 + 1276) > 83) << 10;
        }
        int v244 = v243 | (4 * v122);
        if (v314) {
          v244 |= 0x10u;
        }
        unsigned int v245 = v208 >> 3;
        int v246 = (2 * v208) & 0xA0 | (((v208 >> 3) & 1) << 6) | v244;
        if (v207) {
          int v247 = v246 | 0x100;
        }
        else {
          int v247 = v246;
        }
        unsigned int v248 = v247 | v245 & 0x200;
        if (!v305) {
          v248 |= 0x800u;
        }
        int v351 = *(unsigned __int8 **)(v9 + 8);
        CFStringRef v352 = (unsigned __int8 **)v209;
        if (v214) {
          v248 |= 0x1000u;
        }
        if (v168) {
          v248 |= 0x2000u;
        }
        if (v316) {
          uint64_t v249 = v248 | 0x4000;
        }
        else {
          uint64_t v249 = v248;
        }
        uint64_t v353 = (uint64_t)v363[5];
        int v217 = (const void *)v310;
        unint64_t v354 = v323;
        CFIndex v355 = v310;
        long long v357 = *(_OWORD *)&v363[3];
        uint64_t v250 = si_writeBackAndIndexWithLiveQueryToggle(v60, (uint64_t)SyncIndex, (uint64_t)&v351, v211, v242, (uint64_t)&obj, v46, v249, v312, *(_DWORD *)(v9 + 64), v212, v213, v334, SHIDWORD(v375), v309);
        int v215 = v307;
        if (v250 == 89 || (uint64_t v251 = v250, !v250))
        {
LABEL_486:
          db_validate_obj(v210);
          int v98 = 1;
          unsigned int v97 = v326;
          int v216 = (const void *)v323;
          if (!v217) {
            goto LABEL_412;
          }
          goto LABEL_411;
        }
        if (v250 == -3)
        {
          if (!*(unsigned char *)(v60 + 2450))
          {
            *(unsigned char *)(v60 + 2450) = 1;
            _SIConsistencyCheck(v60);
          }
          goto LABEL_486;
        }
        int v252 = v250;
        int v216 = (const void *)v323;
        if (!*(unsigned char *)(v60 + 2064))
        {
          bzero(v346, 0x1000uLL);
          int v332 = 0;
          int OidPathForOid = SIPersistentIDStoreGetOidPathForOid(*(void *)(v60 + 1408), *v329, (uint64_t)v346, 1, &v332);
          int v252 = OidPathForOid | v332 ? OidPathForOid : 2;
          if (_setAttributes__COUNT_ >= 1)
          {
            --_setAttributes__COUNT_;
            int v254 = *__error();
            int v255 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v255, OS_LOG_TYPE_ERROR))
            {
              uint64_t v267 = *(void *)(v9 + 24);
              int v268 = *(_DWORD *)(v9 + 48);
              *(_DWORD *)uint64_t v335 = 136316418;
              *(void *)&v335[4] = "_setAttributes";
              __int16 v336 = 1024;
              int v337 = 24727;
              __int16 v338 = 2048;
              uint64_t v339 = v267;
              __int16 v340 = 1024;
              int v341 = v268;
              __int16 v342 = 1024;
              int v343 = v251;
              __int16 v344 = 1024;
              int v345 = v252;
              _os_log_error_impl(&dword_1BD672000, v255, OS_LOG_TYPE_ERROR, "%s:%d: Couldn't update index oid: %lld options: %x updateErr: %d resolveErr: %d", v335, 0x2Eu);
            }
            *__error() = v254;
            uint64_t v60 = v331;
            int v217 = (const void *)v310;
          }
        }
        if (v252 != 2 && v252 != 22) {
          si_makeUnavailable(v60, v251, 2 * (v251 != 22), 16, "set attributes err");
        }
        int v98 = 0;
        unsigned int v97 = v326;
        if (!v217) {
          goto LABEL_412;
        }
      }
      else
      {
        if (dword_1E9FC90B4 >= 5)
        {
          int v294 = *__error();
          int v295 = _SILogForLogForCategory(4);
          if (os_log_type_enabled(v295, OS_LOG_TYPE_DEFAULT))
          {
            unint64_t v296 = *v329;
            LODWORD(v346[0]) = 134217984;
            *(unint64_t *)((char *)v346 + 4) = v296;
            _os_log_impl(&dword_1BD672000, v295, OS_LOG_TYPE_DEFAULT, "No write back for %lld", (uint8_t *)v346, 0xCu);
          }
          int v98 = 0;
          *__error() = v294;
          uint64_t v60 = v331;
        }
        else
        {
          int v98 = 0;
        }
        unsigned int v97 = v326;
        int v215 = v307;
        int v216 = (const void *)v323;
        int v217 = (const void *)v310;
        if (!v310) {
          goto LABEL_412;
        }
      }
LABEL_411:
      CFRelease(v217);
LABEL_412:
      if (v216) {
        CFRelease(v216);
      }
      cleanupPreProcContext(&v358);
      if (v320) {
        CFRelease(v320);
      }
      if (v215) {
        CFAllocatorDeallocate(allocator, v215);
      }
      goto LABEL_418;
    }
    long long v160 = v322;
    if ((void)v368)
    {
      setDatastoreLocalizedAttributes((uint64_t)v322, (int)&obj, (const void **)v367, *((uint64_t *)&v367 + 1), v368, v143, 0, v122, v314 != 0);
      db_validate_obj(v160);
      LODWORD(v154) = 1;
    }
    if (!(void)v365)
    {
LABEL_334:
      uint64_t v171 = v359;
      if ((void)v359)
      {
        CFAbsoluteTime v172 = *(double *)&v358;
        LODWORD(v154) = 1;
        uint64_t v173 = v160;
      }
      else
      {
        if ((BYTE1(v360) & 8) == 0) {
          goto LABEL_339;
        }
        CFAbsoluteTime v172 = *(double *)&v358;
        LODWORD(v154) = 1;
        uint64_t v173 = v160;
        uint64_t v171 = 0;
      }
      markItemAsUsedForField(v173, (char **)&obj, "kMDItemLastUsedDate", "kMDItemUsedDates", v171, 1, 1, 0, v172);
LABEL_339:
      if ((void)v376)
      {
        memset(v346, 0, sizeof(v346));
        CFTypeID v174 = CFStringGetTypeID();
        if (v174 == CFGetTypeID((CFTypeRef)v376)
          && CFStringGetCString((CFStringRef)v376, (char *)v346, 32, 0x8000100u))
        {
          double Current = CFAbsoluteTimeGetCurrent();
          int v176 = DWORD2(v376);
          CFDictionaryRef v177 = (const char *)v346;
          uint64_t v178 = v160;
        }
        else
        {
          double Current = 0.0;
          uint64_t v178 = v160;
          CFDictionaryRef v177 = 0;
          int v176 = 0;
        }
        updateItemRecentEngagementData(v178, (uint64_t *)&obj, v177, v176, "_kMDItemRecentAppSearchEngagementQueries", "_kMDItemRecentAppSearchEngagementDates", "_kMDItemRecentAppSearchEngagementRenderPositions", 1, Current);
        LODWORD(v154) = 1;
      }
      if ((void)v377)
      {
        memset(v346, 0, sizeof(v346));
        CFTypeID v179 = CFStringGetTypeID();
        if (v179 == CFGetTypeID((CFTypeRef)v377)
          && CFStringGetCString((CFStringRef)v377, (char *)v346, 32, 0x8000100u))
        {
          double v180 = CFAbsoluteTimeGetCurrent();
          int v181 = DWORD2(v377);
          uint64_t v182 = (const char *)v346;
          long long v183 = v160;
        }
        else
        {
          double v180 = 0.0;
          long long v183 = v160;
          uint64_t v182 = 0;
          int v181 = 0;
        }
        updateItemRecentSpotlightEngagementData(v183, (uint64_t *)&obj, v182, v181, v180);
        LODWORD(v154) = 1;
      }
      if ((void)v378)
      {
        CFTypeID v184 = CFDateGetTypeID();
        CFTypeID v185 = CFGetTypeID((CFTypeRef)v378);
        double v186 = 0.0;
        if (v184 == v185) {
          double v186 = MEMORY[0x1C187FB10](v378, 0.0);
        }
        updateItemRecentOutOfSpotlightEngagementData(v160, (char **)&obj, v186);
        LODWORD(v154) = 1;
      }
      if ((void)v374)
      {
        int v334 = markItemAsUsedForField(v160, (char **)&obj, "_kMDItemInterestingDate", 0, v374, 0, 0, 0x2108u, 0.0);
        CFDateRef v187 = SICopyRoundedDate();
        markItemAsUsedForField(v160, (char **)&obj, "kMDItemInterestingDate_Ranking", 0, (uint64_t)v187, 0, 0, 0x100u, 0.0);
        CFRelease(v187);
        LODWORD(v154) = 1;
      }
      else
      {
        uint64_t v188 = *((void *)&v373 + 1);
        if (*((void *)&v373 + 1)) {
          uint64_t v188 = CFNumberGetValue(*((CFNumberRef *)&v373 + 1), kCFNumberSInt32Type, &v334);
        }
      }
      double v189 = *((double *)&v371 + 1);
      if (*(double *)&v371 == 0.0 && *((double *)&v371 + 1) == 0.0 && *(double *)&v372 == 0.0)
      {
        BOOL v166 = 1;
        int v168 = 1;
LABEL_388:
        if (v323) {
          BOOL v202 = v166;
        }
        else {
          BOOL v202 = 0;
        }
        unsigned int v167 = v202 | v154;
        goto LABEL_392;
      }
      unsigned int v190 = "_kMDItemAppEngagementData";
      if (*((double *)&v371 + 1) == 0.0) {
        double v189 = *(double *)&v372;
      }
      else {
        unsigned int v190 = "_kMDItemEngagementData";
      }
      if (*(double *)&v371 == 0.0) {
        unsigned int v191 = (char *)v190;
      }
      else {
        unsigned int v191 = "_kMDItemRenderData";
      }
      if (*(double *)&v371 == 0.0) {
        double v192 = v189;
      }
      else {
        double v192 = *(double *)&v371;
      }
      int v351 = 0;
      *(void *)uint64_t v335 = 0;
      MEMORY[0x1F4188790](v188);
      bzero(v300, 0x2E3uLL);
      db_validate_obj(v160);
      if (!*obj)
      {
        uint64_t v60 = v331;
LABEL_387:
        int v168 = 0;
        BOOL v166 = 1;
        goto LABEL_388;
      }
      unsigned int v324 = v301;
      int field = db_get_field(v160, (uint64_t)obj, v191, (unint64_t *)v335, &v351);
      if (field)
      {
        *(void *)&long long v318 = v46;
        unsigned int v303 = *__error();
        unsigned int v194 = _SILogForLogForCategory(4);
        os_log_type_t v195 = 2 * (dword_1E9FC90B4 < 4);
        if (os_log_type_enabled(v194, v195))
        {
          LOWORD(v346[0]) = 0;
          _os_log_impl(&dword_1BD672000, v194, v195, "db didn't find any existing values", (uint8_t *)v346, 2u);
        }
        int v196 = __error();
        unsigned int v197 = 0;
        *int v196 = v303;
        uint64_t v46 = v318;
        int v122 = v327;
      }
      else
      {
        unsigned int v197 = *(_DWORD *)(*(void *)v335 + 8);
      }
      int v332 = 0;
      if (markItemAsRenderedOrEngaged((uint64_t)v300, (uint64_t)v351, v197, &v332, field == 0, v192))
      {
        if (!db_add_field(v322, (char **)&obj, 1u, v191, 0, 0, 14, v300, v198, v332))
        {
          LODWORD(v154) = 1;
          uint64_t v60 = v331;
          goto LABEL_387;
        }
        int v199 = *__error();
        int v200 = _SILogForLogForCategory(4);
        if (!os_log_type_enabled(v200, OS_LOG_TYPE_ERROR)) {
          goto LABEL_386;
        }
        LODWORD(v346[0]) = 136315394;
        *(unint64_t *)((char *)v346 + 4) = (unint64_t)"_setAttributes";
        WORD2(v346[1]) = 1024;
        *(_DWORD *)((char *)&v346[1] + 6) = 24613;
        int v201 = "%s:%d: db get field failed in counts code";
      }
      else
      {
        int v199 = *__error();
        int v200 = _SILogForLogForCategory(4);
        if (!os_log_type_enabled(v200, OS_LOG_TYPE_ERROR))
        {
LABEL_386:
          uint64_t v60 = v331;
          *__error() = v199;
          goto LABEL_387;
        }
        LODWORD(v346[0]) = 136315394;
        *(unint64_t *)((char *)v346 + 4) = (unint64_t)"_setAttributes";
        WORD2(v346[1]) = 1024;
        *(_DWORD *)((char *)&v346[1] + 6) = 24605;
        int v201 = "%s:%d: marking item as rendered/engaged failed";
      }
      _os_log_error_impl(&dword_1BD672000, v200, OS_LOG_TYPE_ERROR, v201, (uint8_t *)v346, 0x12u);
      goto LABEL_386;
    }
    CFDictionaryRef v161 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)v364, (const void **)v318, v365, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v122) {
      unsigned __int8 v162 = 1;
    }
    else {
      unsigned __int8 v162 = *(_DWORD *)(v9 + 52) == 12;
    }
    BOOL v169 = setDatastoreAttributes((uint64_t)v322, (uint64_t)&obj, v161, v303, v143, 0, v162, v314 != 0);
    BOOL v170 = v169;
    if (v161)
    {
      CFRelease(v161);
      LODWORD(v154) = 1;
      if (v170)
      {
LABEL_333:
        uint64_t v60 = v331;
        long long v160 = v322;
        goto LABEL_334;
      }
    }
    else
    {
      LODWORD(v154) = 1;
      if (v169) {
        goto LABEL_333;
      }
    }
    BOOL v166 = 0;
    int v168 = 1;
    uint64_t v60 = v331;
    goto LABEL_388;
  }
  if (dword_1E9FC90B4 < 5) {
    goto LABEL_426;
  }
  int v98 = *__error();
  uint64_t v102 = _SILogForLogForCategory(4);
  if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v346[0]) = 134217984;
    *(unint64_t *)((char *)v346 + 4) = 0;
    _os_log_impl(&dword_1BD672000, v102, OS_LOG_TYPE_DEFAULT, "oid is zero: %lld", (uint8_t *)v346, 0xCu);
  }
  *__error() = v98;
  LOBYTE(v98) = 1;
LABEL_529:
  uint64_t v60 = v331;
LABEL_458:
  if (!v326) {
    goto LABEL_432;
  }
LABEL_428:
  if (!*v329)
  {
    int v220 = *__error();
    int v221 = _SILogForLogForCategory(4);
    os_log_type_t v222 = 2 * (dword_1E9FC90B4 < 4);
    if (os_log_type_enabled(v221, v222))
    {
      LOWORD(v346[0]) = 0;
      _os_log_impl(&dword_1BD672000, v221, v222, "All recovery items processed", (uint8_t *)v346, 2u);
    }
    *__error() = v220;
    uint64_t v60 = v331;
    *(unsigned char *)(v331 + 6884) = 1;
  }
LABEL_432:
  if (SyncIndex) {
    char v223 = v98;
  }
  else {
    char v223 = 1;
  }
  int v224 = v329;
  CFDictionaryRef v225 = v325;
  if ((v223 & 1) == 0)
  {
    int v226 = si_getLiveIndex(*(void *)(*(void *)v9 + 1376));
    _CIUpdateContent((uint64_t)v226, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, v46, 0, (*(_DWORD *)(v60 + 6576) >> 19) & 3, (uint64_t (*)(uint64_t))lowDiskSpaceCallback, v60, 0, 0,
      *(void *)(v60 + 2456),
      v316,
      0);
    if (v328)
    {
      int v227 = *__error();
      int v228 = _SILogForLogForCategory(4);
      os_log_type_t v229 = 2 * (dword_1E9FC90B4 < 4);
      if (os_log_type_enabled(v228, v229))
      {
        LODWORD(v346[0]) = 134217984;
        *(unint64_t *)((char *)v346 + 4) = v328;
        _os_log_impl(&dword_1BD672000, v228, v229, "Dummy for oid %lld", (uint8_t *)v346, 0xCu);
      }
      *__error() = v227;
      uint64_t v60 = v331;
    }
  }
  int v230 = *(_DWORD *)(v60 + 1476);
  atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v60 + 1476), (unsigned int *)&v230, 0, memory_order_relaxed, memory_order_relaxed);
  if (v225) {
    CFRelease(v225);
  }
  _si_set_error_str(0, 1);
  uint64_t v231 = *(void *)(v9 + 56);
  if (v231)
  {
    uint64_t v232 = *(void *)(v60 + 1048);
    int v233 = *(NSObject **)(v232 + 8);
    v346[0] = MEMORY[0x1E4F143A8];
    v346[1] = 0x40000000;
    v346[2] = (unint64_t)__si_pop_queue_block_invoke;
    v346[3] = (unint64_t)&__block_descriptor_tmp_42_1180;
    CFNumberRef v347 = (unsigned __int8 **)v232;
    uint64_t v348 = v231;
    p_obint j = 1;
    uint64_t v350 = (uint64_t)v224;
    dispatch_sync(v233, v346);
  }
LABEL_444:
  int v234 = *(const void **)(v9 + 40);
  if (v234) {
    CFRelease(v234);
  }
  *(void *)(v9 + 40) = 0;
  int v235 = *(const void **)(v9 + 8);
  if (v235) {
    CFRelease(v235);
  }
  *(void *)(v9 + 8) = 0;
  int v236 = *(const void **)(v9 + 16);
  if (v236) {
    CFRelease(v236);
  }
  *(void *)(v9 + 16) = 0;
}

uint64_t __setAttributesBulk_block_invoke(uint64_t a1)
{
  makeThreadId();
  int v2 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v3 = setThreadIdAndInfo(*(_DWORD *)(a1 + 56), sFdExceptionCallbacks, 0, 1, v2);
  unsigned int v24 = HIDWORD(v3);
  unsigned int v25 = v3;
  unint64_t v23 = __PAIR64__(v4, v5);
  uint64_t v6 = *(void *)&threadData[18 * v3 + 2];
  uint64_t v7 = v6 + 320 * HIDWORD(v3);
  *(unsigned char *)(v7 + 216) = 0;
  int v8 = *(_DWORD *)(v7 + 312);
  uint64_t v9 = *(void (**)(void))(v7 + 224);
  if (v9) {
    v9(*(void *)(v6 + 320 * HIDWORD(v3) + 288));
  }
  unsigned int v22 = v25;
  unsigned int v21 = v24;
  unint64_t v20 = v23;
  if (_setjmp((int *)v7))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)double v19 = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v19, 2u);
    }
    *(_DWORD *)(v7 + 312) = v8;
    CIOnThreadCleanUpReset(v20);
    dropThreadId(v22, 1, v2);
    return CICleanUpReset(v22, HIDWORD(v20));
  }
  else
  {
    unint64_t add_explicit = atomic_fetch_add_explicit(*(atomic_ullong *volatile *)(a1 + 32), 1uLL, memory_order_relaxed);
    if (add_explicit < *(void *)(*(void *)(a1 + 40) + 16))
    {
      unint64_t v12 = add_explicit;
      uint64_t v13 = *(void *)(a1 + 40);
      unint64_t v14 = v12;
      do
      {
        _setAttributes(v13 + 80 * v14 + 24);
        unint64_t v14 = atomic_fetch_add_explicit(*(atomic_ullong *volatile *)(a1 + 32), 1uLL, memory_order_relaxed);
        uint64_t v13 = *(void *)(a1 + 40);
      }
      while (v14 < *(void *)(v13 + 16));
    }
    uint64_t v15 = *(void *)&threadData[18 * v22 + 2];
    unsigned int v16 = v21;
    uint64_t v17 = v15 + 320 * v21;
    *(_DWORD *)(v17 + 312) = v8;
    int v18 = *(void (**)(void))(v17 + 232);
    if (v18) {
      v18(*(void *)(v15 + 320 * v16 + 288));
    }
    return dropThreadId(v22, 0, v2);
  }
}

BOOL objectIsMarker(int *a1, uint64_t a2)
{
  unint64_t v3 = 0;
  unsigned int v4 = 0;
  return !db_get_field(a1, a2, "_kMDItemBackupMoveMarker", &v3, &v4) && *v4 != 0;
}

void setAttributes(uint64_t *a1, uint64_t a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  unsigned int v5 = dispatch_group_create();
  _setAttributes(a1, 0, v5, a2);
  if (!a2) {
    bumpWorkTime(*a1, Current);
  }
  dispatch_group_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(v5);
  free(a1);
}

void preProcessInFlight(void *key, const void *a2, CFDictionaryRef *a3)
{
  if (CFDictionaryGetValue(*a3, key)) {
    return;
  }
  CFDictionaryRef v6 = a3[1];
  if (!v6) {
    return;
  }
  CFStringRef Value = CFDictionaryGetValue(v6, key);
  if (!Value) {
    goto LABEL_23;
  }
  int v8 = Value;
  if (CFEqual(Value, a2)) {
    return;
  }
  CFTypeID v9 = CFGetTypeID(v8);
  if (v9 != CFArrayGetTypeID())
  {
LABEL_23:
    unint64_t v20 = *a3;
    CFDictionarySetValue(v20, key, a2);
    return;
  }
  CFTypeID v10 = CFGetTypeID(a2);
  if (v10 != CFArrayGetTypeID())
  {
    if ((const void *)*MEMORY[0x1E4F1D260] != a2)
    {
      v23.length = CFArrayGetCount((CFArrayRef)v8);
      v23.locatiouint64_t n = 0;
      if (CFArrayGetFirstIndexOfValue((CFArrayRef)v8, v23, a2) != -1) {
        return;
      }
      CFMutableStringRef MutableCopy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, (CFArrayRef)v8);
      CFArrayAppendValue(MutableCopy, a2);
      CFDictionarySetValue(*a3, key, MutableCopy);
      int v18 = MutableCopy;
      goto LABEL_20;
    }
    goto LABEL_23;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)v8);
  CFIndex v12 = CFArrayGetCount((CFArrayRef)a2);
  if (v12 >= 1)
  {
    CFIndex v13 = v12;
    CFIndex v14 = 0;
    uint64_t v15 = 0;
    CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v14);
      v22.locatiouint64_t n = 0;
      v22.length = Count;
      if (CFArrayGetFirstIndexOfValue((CFArrayRef)v8, v22, ValueAtIndex) == -1)
      {
        if (!v15) {
          uint64_t v15 = CFArrayCreateMutableCopy(v16, 0, (CFArrayRef)v8);
        }
        CFArrayAppendValue(v15, ValueAtIndex);
      }
      ++v14;
    }
    while (v13 != v14);
    if (v15)
    {
      CFDictionarySetValue(*a3, key, v15);
      int v18 = v15;
LABEL_20:
      CFRelease(v18);
    }
  }
}

uint64_t OIDAttrPairCmp(void *a1, void *a2)
{
  if (*a1 >= *a2) {
    unsigned int v2 = 0;
  }
  else {
    unsigned int v2 = -1;
  }
  if (*a1 > *a2) {
    return 1;
  }
  else {
    return v2;
  }
}

void si_playbackSyncFinished(uint64_t a1, int a2)
{
  if (a1)
  {
    if (a2)
    {
      *(unsigned char *)(a1 + 109) = 1;
      if (*(void *)(a1 + 8))
      {
        uint64_t v2 = *(void *)(a1 + 80);
        if (v2)
        {
          if ((*(_WORD *)(v2 + 60) & 0x100) != 0) {
            *(_WORD *)(v2 + 60) &= ~0x100u;
          }
        }
      }
      uint64_t v3 = *(void *)(a1 + 80);
      if (v3 && (*(_WORD *)(v3 + 60) & 0x100) != 0) {
        *(_WORD *)(v3 + 60) &= ~0x100u;
      }
    }
    if (atomic_fetch_add((atomic_uint *volatile)a1, 0xFFFFFFFF) == 1) {
      _si_mobile_journal_finalize(a1, 1);
    }
  }
}

void dummy_routine(CFTypeRef *a1, int a2)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    v7[0] = 0;
    CFTypeRef v3 = a1[1];
    uint64_t v4 = *((void *)*a1 + 131);
    unsigned int v5 = *(NSObject **)(v4 + 8);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 0x40000000;
    v6[2] = __si_pop_queue_block_invoke;
    v6[3] = &__block_descriptor_tmp_42_1180;
    void v6[4] = v4;
    v6[5] = v3;
    v6[6] = 1;
    v6[7] = v7;
    dispatch_sync(v5, v6);
  }
  CFRelease(a1[1]);
  free(a1);
}

void si_repair_index_file_tree(void *a1, int a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8)
{
  __int buf = *((_DWORD *)a1 + 2);
  uint64_t v9 = *(void *)a1;
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 0x40000000;
  void v21[2] = __si_repair_index_file_tree_block_invoke;
  v21[3] = &__block_descriptor_tmp_1061;
  v21[4] = v9;
  if (!a2)
  {
    if (*(unsigned char *)(v9 + 828)) {
      return;
    }
    int v10 = x_openat(*(_DWORD *)(v9 + 32), "repair_dirstore", 536871424, a4, a5, a6, a7, a8, 0x180u);
    if (v10 != -1)
    {
      int v11 = v10;
      pwrite(v10, &__buf, 4uLL, 0);
      close(v11);
    }
    if (*(unsigned char *)(v9 + 2064) || (__buf & 1) != 0)
    {
      uint64_t v12 = *(void *)(v9 + 6616);
      if (v12) {
        freeReverseDirStore(v12);
      }
      *(void *)(v9 + 6616) = createReverseStore(*(_DWORD *)(v9 + 32), "tmp.", v21);
      x_unlinkat(*(_DWORD *)(v9 + 32), "mds64-crash-state-reverse-store-v2", 0);
    }
    uint64_t v13 = *(void *)(v9 + 1384);
    uint64_t v14 = *(void *)(v9 + 1376);
    if (v13 && *(_DWORD *)(v13 + 8))
    {
      unint64_t v15 = 0;
      do
        ContentIndexResetDirStore(*(void *)(*(void *)v13 + 8 * v15++));
      while (v15 < *(unsigned int *)(v13 + 8));
    }
    if (v14 && *(_DWORD *)(v14 + 8))
    {
      unint64_t v16 = 0;
      do
        ContentIndexResetDirStore(*(void *)(*(void *)v14 + 8 * v16++));
      while (v16 < *(unsigned int *)(v14 + 8));
    }
    x_unlinkat(*(_DWORD *)(v9 + 32), "mds64-crash-state-forward-path-index-v2", 0);
    uint64_t v17 = SIUINT64SetCreate();
    db_apply(*(int **)(v9 + 1184), (uint64_t (*)(uint64_t, void, uint64_t))gather_parented_items, v17);
    if (*(unsigned char *)(v9 + 2064)) {
      int v18 = reset_parented_items;
    }
    else {
      int v18 = reparent_parented_items;
    }
    SIValueSet<unsigned long long>::_SIValueSetInnerIterate(v17 + 56, *(void *)(v17 + 16), *(_DWORD *)(v17 + 24), (uint64_t)v18, v9, 1024);
    CFRelease((CFTypeRef)v17);
    if (*(unsigned char *)(v9 + 2064) || (__buf & 1) != 0)
    {
      if (!flushReverseStore(*(void *)(v9 + 6616))
        && !commitSyncReverseStore(*(void *)(v9 + 6616), 0)
        && !shadowReverseStore(*(void *)(v9 + 6616), 1, 0))
      {
        commitShadowReverseStore(*(void *)(v9 + 6616));
      }
      uint64_t v19 = *(void *)(v9 + 6616);
      CFRange v23 = 0;
      asprintf(&v23, "%sreverseDirectoryStore", "");
      fd_rename(*(void *)(v19 + 216), v23);
      free(v23);
    }
    x_unlinkat(*(_DWORD *)(v9 + 32), "repair_dirstore", 2048);
    si_getLiveIndex(*(void *)(v9 + 1376));
    LiveIndex = si_getLiveIndex(*(void *)(v9 + 1376));
    _CIFlushCache((uint64_t)LiveIndex, 1, 0, 0, (uint64_t)&__block_literal_global_1069);
    _SIIssueFullMergeWithGroup((void *)v9, 0);
    si_scheduler_resume(*(void *)(v9 + 872), *((void **)a1 + 2), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 32419);
  }
  free(a1);
}

void __si_repair_index_file_tree_block_invoke(uint64_t a1, const void *a2)
{
}

void _SIIssueFullMergeWithGroup(void *a1, NSObject *a2)
{
  if (a1 && a1[131])
  {
    uint64_t v4 = (char *)malloc_type_calloc(1uLL, 0x460uLL, 0x1070040C187FD8AuLL);
    *(void *)uint64_t v4 = a1;
    uint8_t v4[16] = 0;
    *(_WORD *)(v4 + 1041) = 257;
    v4[1043] = 1;
    *((_DWORD *)v4 + 274) = 4;
    *((void *)v4 + 131) = "void _SIIssueFullMergeWithGroup(SIRef, dispatch_group_t)";
    __strlcpy_chk();
    if (!*((void *)v4 + 136) && !*((_DWORD *)v4 + 266))
    {
      uint64_t v5 = a1[294];
      if (v5)
      {
        CFDictionaryRef v6 = *(uint64_t (**)(void, const char *, uint64_t, const char *))(v5 + 64);
        if (v6) {
          *((_DWORD *)v4 + 266) = v6(*(void *)(v5 + 144), "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 21680, "void _SIIssueFullMergeWithGroup(SIRef, dispatch_group_t)");
        }
      }
    }
    if (a2)
    {
      dispatch_retain(a2);
      dispatch_group_enter(a2);
    }
    *((void *)v4 + 139) = a2;
    uint64_t v7 = a1[144];
    si_enqueue_barrier_with_qos(v7, 5, (uint64_t)_SIContinueIssueMerge0, (uint64_t)v4);
  }
}

void _SIContinueIssueMerge0(uint64_t a1, int a2)
{
  uint64_t v3 = a1;
  if (!a2)
  {
    si_enqueue_barrier_with_qos(*(void *)(*(void *)a1 + 1048), 5, (uint64_t)_SIContinueIssueMerge, a1);
    uint64_t v3 = 0;
  }
  si_merge_ctx_free(v3, a2 != 0);
}

void _SIContinueIssueMerge(uint64_t a1, int a2)
{
  uint64_t v3 = a1;
  if (!a2)
  {
    si_enqueue_work_with_qos(*(void *)(*(void *)a1 + 1040), 5, (uint64_t)_SIContinueIssueMerge2, a1);
    uint64_t v3 = 0;
  }
  si_merge_ctx_free(v3, a2 != 0);
}

void _SIContinueIssueMerge2(uint64_t a1, int a2)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  if (a2) {
    goto LABEL_2;
  }
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = 1376;
  if (!*(unsigned char *)(a1 + 16)) {
    uint64_t v5 = 1384;
  }
  uint64_t v6 = *(void *)(v4 + v5);
  uint64_t v7 = *(unsigned int *)(v6 + 8);
  int v8 = *(unsigned __int8 *)(v4 + 2432);
  if (*(unsigned char *)(a1 + 1042)) {
    *(unsigned char *)(v4 + 2432) = 0;
  }
  uint64_t v9 = *(void *)(a1 + 1072);
  int v10 = gSISystemOnBattery;
  int v11 = fullVaccuumNeeded(v4, gSISystemOnBattery != 0);
  if ((v11 & 1) != 0 || !v10 || *(unsigned char *)(v4 + 2448))
  {
    if (!v11)
    {
      int v14 = 0;
      goto LABEL_27;
    }
    goto LABEL_12;
  }
  int v37 = fullVaccuumNeeded(v4, 0);
  int v14 = 0;
  if (v37)
  {
    BOOL v38 = *(_xpc_activity_s **)(a1 + 1072);
    if (v38 && *(void *)(a1 + 1080) && xpc_activity_should_defer(v38))
    {
      uint64_t v76 = v9;
      **(unsigned char **)(a1 + 1080) = 1;
      *(unsigned char *)(v4 + 2448) = 1;
      LODWORD(buf) = -1;
      uint64_t v39 = *(unsigned int *)(v4 + 32);
      BOOL v40 = v39 == -1 || (fd_setDir(v39, (int *)&buf) & 1) == 0;
      int v60 = *__error();
      int v61 = _SILogForLogForCategory(12);
      os_log_type_t v62 = 2 * (dword_1E9FC90D4 < 4);
      if (os_log_type_enabled(v61, v62))
      {
        *(_WORD *)uint64_t v79 = 0;
        _os_log_impl(&dword_1BD672000, v61, v62, "defer vacuum", v79, 2u);
      }
      *__error() = v60;
      if (!v40) {
        fd_resetDir(buf);
      }
    }
    else
    {
      if (v9)
      {
LABEL_12:
        uint64_t v76 = v9;
        *(_DWORD *)uint64_t v79 = -1;
        uint64_t v12 = *(unsigned int *)(v4 + 32);
        BOOL v13 = v12 == -1 || (fd_setDir(v12, (int *)v79) & 1) == 0;
        int v15 = *__error();
        unint64_t v16 = _SILogForLogForCategory(12);
        os_log_type_t v17 = 2 * (dword_1E9FC90D4 < 4);
        if (os_log_type_enabled(v16, v17))
        {
          if (gSISystemOnBattery) {
            int v18 = " (on battery)";
          }
          else {
            int v18 = "";
          }
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v18;
          _os_log_impl(&dword_1BD672000, v16, v17, "Vacuum needed%s", (uint8_t *)&buf, 0xCu);
        }
        *__error() = v15;
        if (!v13)
        {
          int v19 = *(_DWORD *)v79;
          MEMORY[0x1C1882290](*(unsigned int *)v79);
          if ((v19 & 0x80000000) == 0) {
            close(v19);
          }
        }
        int v14 = 1;
        goto LABEL_26;
      }
      uint64_t v76 = 0;
      *(unsigned char *)(v4 + 2448) = 1;
      LODWORD(buf) = -1;
      uint64_t v41 = *(unsigned int *)(v4 + 32);
      BOOL v42 = v41 == -1 || (fd_setDir(v41, (int *)&buf) & 1) == 0;
      int v57 = *__error();
      uint64_t v58 = _SILogForLogForCategory(12);
      os_log_type_t v59 = 2 * (dword_1E9FC90D4 < 4);
      if (os_log_type_enabled(v58, v59))
      {
        *(_WORD *)uint64_t v79 = 0;
        _os_log_impl(&dword_1BD672000, v58, v59, "Vacuum scheduled", v79, 2u);
      }
      *__error() = v57;
      if (!v42) {
        fd_resetDir(buf);
      }
      (*(void (**)(void, uint64_t, __CFString *, void *))(*(void *)(v4 + 2352) + 80))(*(void *)(*(void *)(v4 + 2352) + 144), 1, @"Merge", &__block_literal_global_1759);
    }
    int v14 = 0;
LABEL_26:
    uint64_t v9 = v76;
  }
LABEL_27:
  if (!*(unsigned char *)(a1 + 1042) || ((*(unsigned char *)(a1 + 1043) == 0) & ~v14) == 0)
  {
    while (1)
    {
      uint64_t v20 = v7;
      if (!v7) {
        break;
      }
      uint64_t v21 = *(void *)(*(void *)v6 + 8 * v7 - 8);
      char v22 = atomic_load((unsigned int *)(v21 + 36));
      if ((v22 & 3) == 0)
      {
        --v7;
        if (!*(unsigned char *)(v21 + 15203)) {
          continue;
        }
      }
      int v23 = v20;
      goto LABEL_54;
    }
    int v23 = 0;
LABEL_54:
    si_sync_ctx_create_with_defer_fd(v4, 0);
    uint64_t v36 = v35;
    *(unsigned char *)(v35 + 96) = 1;
    if (!*(unsigned char *)(*(void *)v35 + 2064) && !*(unsigned char *)(*(void *)v35 + 2429)) {
      attachJournal((atomic_uint *)v35);
    }
    syncIndex(v36, 0);
    if (v20)
    {
      *(_DWORD *)(a1 + 12) = v23;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)(*(void *)v6 + 8 * (*(_DWORD *)(v6 + 8) - v23))
                                      + 56);
      si_enqueue_work(*(void *)(v4 + 1056), (uint64_t)si_mergeIndex, a1);
      return;
    }
    goto LABEL_2;
  }
  if (v8) {
    goto LABEL_2;
  }
  unsigned int v24 = *(uint64_t **)(v4 + 1376);
  if (!v24) {
    goto LABEL_2;
  }
  unsigned int v25 = count_IndexSet(*(void *)(v4 + 1376), *((_DWORD *)v24 + 2) - 1, 0);
  if (!v25) {
    goto LABEL_2;
  }
  unsigned int v26 = v25;
  if (!*(unsigned char *)(v4 + 2449))
  {
    BOOL v27 = v25 == 4 && v9 == 0;
    BOOL v28 = v27;
    BOOL v29 = gSISystemOnBattery && v25 == 6;
    if (v29 || v28)
    {
      *(void *)&long long buf = 0;
      *((void *)&buf + 1) = &buf;
      uint64_t v81 = 0x2000000000;
      int v82 = 0;
      int v82 = malloc_type_malloc(0x460uLL, 0x1070040C187FD8AuLL);
      uint64_t v31 = *((void *)&buf + 1);
      memcpy(*(void **)(*((void *)&buf + 1) + 24), (const void *)a1, 0x460uLL);
      uint64_t v32 = *(void *)(v31 + 24);
      *(_DWORD *)(v32 + 1064) = 0;
      *(void *)(v32 + 1080) = 0;
      *(void *)(v32 + 1088) = 0;
      *(void *)(v32 + 1072) = 0;
      *(void *)(*(void *)(v31 + 24) + 1056) = 0;
      *(void *)(*(void *)(v31 + 24) + 1112) = 0;
      *(unsigned char *)(*(void *)(v31 + 24) + 1100) = v26 != 4;
      *(_DWORD *)uint64_t v79 = -1;
      uint64_t v33 = *(unsigned int *)(v4 + 32);
      BOOL v34 = v33 == -1 || (fd_setDir(v33, (int *)v79) & 1) == 0;
      int v66 = *__error();
      CFNumberRef v67 = _SILogForLogForCategory(12);
      os_log_type_t v68 = 2 * (dword_1E9FC90D4 < 4);
      if (os_log_type_enabled(v67, v68))
      {
        *(_WORD *)int v78 = 0;
        _os_log_impl(&dword_1BD672000, v67, v68, "Merge(2) scheduled", v78, 2u);
      }
      *__error() = v66;
      if (!v34) {
        fd_resetDir(*(int *)v79);
      }
      *(unsigned char *)(v4 + 2449) = 1;
      uint64_t v69 = *(void *)(v4 + 2352);
      CFArrayRef v70 = *(void (**)(uint64_t, BOOL, __CFString *, void *))(v69 + 80);
      uint64_t v71 = *(void *)(v69 + 144);
      v77[0] = MEMORY[0x1E4F143A8];
      v77[1] = 0x40000000;
      v77[2] = ___SIContinueIssueMerge2_block_invoke_1764;
      v77[3] = &unk_1E6342998;
      v77[4] = &buf;
      void v77[5] = v4;
      v70(v71, v26 != 4, @"Merge(2)", v77);
      _Block_object_dispose(&buf, 8);
      goto LABEL_2;
    }
  }
  if ((v25 < 4 || v9 == 0) && (v25 < 6 || gSISystemOnBattery != 0)) {
    goto LABEL_2;
  }
  *(unsigned char *)(v4 + 2449) = 0;
  unsigned int v45 = *((_DWORD *)v24 + 2);
  do
  {
    unsigned int v46 = v45;
    if (v45 <= *((_DWORD *)v24 + 2) - v25) {
      break;
    }
    uint64_t v47 = *(void *)(*v24 + 8 * --v45);
    char v48 = atomic_load((unsigned int *)(v47 + 36));
    if ((v48 & 3) != 0) {
      break;
    }
  }
  while (!*(unsigned char *)(v47 + 15203));
  if (v46 < 5)
  {
LABEL_2:
    si_merge_ctx_free(a1, a2 != 0);
    return;
  }
  uint64_t v49 = *((_DWORD *)v24 + 2) - v25;
  if (v49 >= v46)
  {
    unint64_t v51 = 0;
    unint64_t v56 = 0;
  }
  else
  {
    uint64_t v50 = 0;
    unint64_t v51 = 0;
    uint64_t v52 = *v24;
    do
    {
      uint64_t v53 = *(void *)(v52 + 8 * v49);
      uint64_t v54 = atomic_load((unsigned int *)(v53 + 16));
      v50 += v54;
      LODWORD(v54) = *(_DWORD *)(v53 + 68);
      uint64_t v55 = *(void *)(v53 + 80);
      if (v54 >= 2) {
        uint64_t v54 = v54;
      }
      else {
        uint64_t v54 = 0;
      }
      uint64_t v52 = *v24;
      unint64_t v51 = v55 + v51 + v54 - *(void *)(*(void *)(*v24 + 8 * v49++) + 80);
    }
    while (v46 != v49);
    unint64_t v56 = 4 * v50;
  }
  *(unsigned char *)(a1 + 1042) = 0;
  *(_DWORD *)(a1 + 12) = v46;
  *(unsigned char *)(a1 + 16) = 1;
  __strlcpy_chk();
  *(unsigned char *)(a1 + 1041) = v56 > v51;
  unsigned int v63 = *((_DWORD *)v24 + 2);
  BOOL v64 = v63 >= v26;
  unsigned int v65 = v63 - v26;
  if (!v64)
  {
    int v72 = __si_assert_copy_extra_625(-1);
    unint64_t v73 = v72;
    os_log_type_t v74 = "";
    if (v72) {
      os_log_type_t v74 = v72;
    }
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 21620, "indexCount <= indexSet->indexCount", v74);
    free(v73);
    if (__valid_fs(-1)) {
      uint64_t v75 = 2989;
    }
    else {
      uint64_t v75 = 3072;
    }
    *(_DWORD *)uint64_t v75 = -559038737;
    abort();
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)(*v24 + 8 * v65) + 56);
  si_enqueue_work_with_qos(*(void *)(v4 + 1056), 5, (uint64_t)si_mergeIndex, a1);
}

uint64_t fullVaccuumNeeded(uint64_t a1, int a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  itemCounts(*(uint64_t **)(a1 + 1384), &v15, &v13);
  itemCounts(*(uint64_t **)(a1 + 1376), &v14, &v12);
  uint64_t v4 = v13;
  unint64_t v5 = v15;
  if (a2)
  {
    if (3 * v15 >= 4 * v13) {
      return 0;
    }
    uint64_t v6 = v14;
    if (v15 <= 5 * v14) {
      return 0;
    }
  }
  else
  {
    uint64_t v6 = v14;
    BOOL v7 = v15 < 2 * v13 && v15 > 4 * v14;
    if (!v7 && v14 + v15 >= 2 * (v12 + v13)) {
      return 0;
    }
  }
  int v8 = *__error();
  uint64_t v9 = _SILogForLogForCategory(0);
  os_log_type_t v10 = 2 * (gSILogLevels[0] < 4);
  if (os_log_type_enabled(v9, v10))
  {
    *(_DWORD *)long long buf = 134218752;
    unint64_t v17 = v5;
    __int16 v18 = 2048;
    uint64_t v19 = v6;
    __int16 v20 = 2048;
    uint64_t v21 = v4;
    __int16 v22 = 2048;
    uint64_t v23 = v12;
    _os_log_impl(&dword_1BD672000, v9, v10, "full vacuum needed - count: %lld, live count: %lld, delete count: %lld, live delete count: %lld", buf, 0x2Au);
  }
  *__error() = v8;
  return 1;
}

uint64_t si_sync_index_vaccuum_if_needed(uint64_t result, char a2, void *a3, uint64_t a4, NSObject *a5)
{
  if (result)
  {
    uint64_t v5 = result;
    if (*(void *)(result + 1184) && *(void *)(result + 1040) && *(void *)(result + 1048))
    {
      si_sync_ctx_create_with_defer_fd(result, 0);
      uint64_t v11 = v10;
      *(unsigned char *)(v10 + 136) = a2;
      si_power_info_init(v10 + 104, a3, a4, a5);
      si_enqueue_barrier_with_qos(*(void *)(v5 + 1152), 9, (uint64_t)si_sync_index_delayed_if_dirty0, v11);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void si_sync_index_delayed_if_dirty0(uint64_t a1, int a2)
{
  uint64_t v3 = a1;
  if (!a2)
  {
    si_enqueue_barrier_with_qos(*(void *)(*(void *)a1 + 1048), 9, (uint64_t)si_sync_index_delayed_if_dirty, a1);
    uint64_t v3 = 0;
  }
  si_sync_ctx_free(v3, a2 != 0);
}

void si_sync_index_delayed_if_dirty(uint64_t a1, int a2)
{
  if (!a2)
  {
    uint64_t v4 = (char *)malloc_type_calloc(1uLL, 0x460uLL, 0x1070040C187FD8AuLL);
    uint64_t v5 = *(void *)a1;
    *((void *)v4 + 131) = "void si_sync_index_delayed_if_dirty(si_sync_ctx *, Boolean)";
    *(void *)uint64_t v4 = v5;
    uint8_t v4[16] = 0;
    *(_WORD *)(v4 + 1041) = 257;
    v4[1043] = 0;
    *((_DWORD *)v4 + 274) = 1;
    v4[1100] = *(unsigned char *)(a1 + 136);
    long long v6 = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(v4 + 1064) = *(_OWORD *)(a1 + 104);
    *(_OWORD *)(v4 + 1080) = v6;
    *(_DWORD *)(a1 + 104) = 0;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 112) = 0;
    uint64_t v7 = *(void *)(v5 + 2352);
    if (v7)
    {
      int v8 = *(uint64_t (**)(void, const char *, uint64_t, const char *))(v7 + 64);
      if (v8) {
        *(_DWORD *)(a1 + 104) = v8(*(void *)(v7 + 144), "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 2497, "void si_sync_index_delayed_if_dirty(si_sync_ctx *, Boolean)");
      }
    }
    __strlcpy_chk();
    si_enqueue_barrier_with_qos(*(void *)(*(void *)a1 + 1152), 9, (uint64_t)_SIContinueIssueMerge0, (uint64_t)v4);
    int v9 = _CIListsClean(*(void *)(*(void *)a1 + 1384), *(void *)(*(void *)a1 + 1376));
    uint64_t v10 = *(void *)a1;
    if (v9)
    {
      uint64_t v11 = *(int **)(v10 + 1184);
      if (v11)
      {
        if (!db_is_dirty(v11)) {
          goto LABEL_10;
        }
        uint64_t v10 = *(void *)a1;
      }
    }
    si_enqueue_work_with_qos(*(void *)(v10 + 1096), 9, (uint64_t)si_sync_index_delayed0, a1);
    a1 = 0;
  }
LABEL_10:
  si_sync_ctx_free(a1, a2 != 0);
}

uint64_t *itemCounts(uint64_t *result, void *a2, void *a3)
{
  if (*((_DWORD *)result + 2))
  {
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = *result;
    do
    {
      uint64_t v7 = *(void *)(v6 + 8 * v3);
      uint64_t v8 = atomic_load((unsigned int *)(v7 + 16));
      v4 += v8;
      LODWORD(v8) = *(_DWORD *)(v7 + 68);
      uint64_t v9 = *(void *)(v7 + 80);
      if (v8 >= 2) {
        uint64_t v8 = v8;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v6 = *result;
      uint64_t v5 = v9 + v5 + v8 - *(void *)(*(void *)(*result + 8 * v3++) + 80);
    }
    while (v3 < *((unsigned int *)result + 2));
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  *a2 += v5;
  *a3 += v4;
  return result;
}

uint64_t reset_parented_items(unint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(int **)(a3 + 1184);
  unint64_t cs_orphan_oid = si_get_cs_orphan_oid(a3);
  if (a2)
  {
    unint64_t v8 = cs_orphan_oid;
    do
    {
      unint64_t v10 = *a1++;
      unint64_t v9 = v10;
      __int16 v18 = 0;
      if (!db_get_obj(v6, v10, &v18, 0))
      {
        uint64_t v11 = v18;
        if (*((void *)v18 + 3) == v8
          || (*((void *)v18 + 3) = v8, (int updated = db_update_obj(v6, (uint64_t)v11, 9)) == 0))
        {
          *(void *)long long buf = v8;
          *(void *)&uint8_t buf[8] = 2;
          LiveIndex = si_getLiveIndex(*(void *)(a3 + 1376));
          si_updateIndexForPathRepair(a3, (uint64_t)LiveIndex, (uint64_t)v18, (uint64_t)buf, 2);
        }
        else
        {
          int v13 = updated;
          int v14 = *__error();
          unint64_t v15 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 136315906;
            *(void *)&uint8_t buf[4] = "reset_parented_items";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 32292;
            __int16 v20 = 1024;
            int v21 = v13;
            __int16 v22 = 2048;
            unint64_t v23 = v9;
            _os_log_error_impl(&dword_1BD672000, v15, OS_LOG_TYPE_ERROR, "%s:%d: updateErr err %d (%lld)", buf, 0x22u);
          }
          *__error() = v14;
        }
        free(v18);
      }
      --a2;
    }
    while (a2);
  }
  return 0;
}

uint64_t reparent_parented_items(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  v14[512] = *MEMORY[0x1E4F143B8];
  if (v2)
  {
    uint64_t v4 = v3;
    uint64_t v5 = v2;
    uint64_t v6 = (unint64_t *)v1;
    uint64_t v7 = *(_DWORD **)(v3 + 1184);
    do
    {
      unint64_t v8 = *v6++;
      int v13 = 0;
      if (!db_get_obj(v7, v8, &v13, 0))
      {
        unint64_t v9 = v13;
        if (*((void *)v13 + 3))
        {
          bzero(v14, 0x1000uLL);
          LiveIndex = si_getLiveIndex(*(void *)(v4 + 1376));
          int v12 = 0;
          computePathFS(v4, (unint64_t *)v13, v14, (unsigned int *)&v12);
          si_updateIndexForPathRepair(v4, (uint64_t)LiveIndex, (uint64_t)v13, (uint64_t)v14, v12);
          unint64_t v9 = v13;
        }
        free(v9);
      }
      --v5;
    }
    while (v5);
  }
  return 0;
}

uint64_t gather_parented_items(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (a2[3]) {
    SIValueSet<unsigned long long>::SIValueSetInsert((unint64_t *)(a3 + 16), *a2);
  }
  return 1;
}

void release_scheduler(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = dispatch_group_create();
  si_scheduler_stop(a2, (uint64_t)v3);
  dispatch_group_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(v3);
  uint64_t v4 = *(NSObject **)(a2 + 32);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = __si_scheduler_drain_block_invoke;
  v5[3] = &__block_descriptor_tmp_8;
  v5[4] = a2;
  v5[5] = 0;
  dispatch_sync(v4, v5);
  if (atomic_fetch_add((atomic_uint *volatile)(a2 + 88), 0xFFFFFFFF) == 1)
  {
    _si_scheduler_destroy(a2);
  }
}

uint64_t retain_scheduler(uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  if (a2) {
    atomic_fetch_add((atomic_uint *volatile)(a2 + 88), 1u);
  }
  return result;
}

void query_node_unique_set_value_callback_release(uint64_t a1, uint64_t a2)
{
}

uint64_t query_node_unique_set_value_callback_retain(uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  atomic_fetch_add_explicit((atomic_uint *volatile)(a2 + 72), 1u, memory_order_relaxed);
  return result;
}

void updateUsedBites(int a1, CFNumberRef number, __CFBitVector *a3)
{
  unint64_t valuePtr = 0;
  CFNumberGetValue(number, kCFNumberLongType, &valuePtr);
  if (valuePtr <= 0xFE) {
    CFBitVectorSetBitAtIndex(a3, valuePtr, 1u);
  }
}

uint64_t dbGCUnmap(int a1, void *a2, size_t a3)
{
  return munmap(a2, a3);
}

void dbGCFree(int a1, void *a2)
{
}

void ___si_init_localized_terms_block_invoke(uint64_t a1, const void *a2)
{
}

uint64_t store_stream_read_vint32_671(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if ((unint64_t)(*(void *)(a1 + 32) - v2) < 6)
  {
    int v17 = 0;
    LODWORD(v5) = 0;
    char __dst = 0;
    while (store_stream_read_bytes_672((unsigned int *)a1, &__dst, 1uLL) == 1)
    {
      uint64_t v5 = ((__dst & 0x7F) << v17) | v5;
      v17 += 7;
      if ((__dst & 0x80) == 0) {
        return v5;
      }
    }
    return 0;
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = v2 + 1;
    uint64_t v5 = *(unsigned __int8 *)(v3 + v2);
    if ((*(char *)(v3 + v2) & 0x80000000) == 0)
    {
      uint64_t v6 = v2 + 1;
LABEL_11:
      *(void *)(a1 + 40) = v6;
      return v5;
    }
    uint64_t v6 = v2 + 2;
    int v7 = *(char *)(v3 + v4);
    int v8 = *(unsigned __int8 *)(v3 + v4);
    if ((v7 & 0x80000000) == 0)
    {
      uint64_t v5 = v5 & 0x7F | (v8 << 7);
      goto LABEL_11;
    }
    uint64_t v9 = v2 + 3;
    int v10 = *(char *)(v3 + v6);
    char v11 = v10;
    if ((v10 & 0x80000000) == 0)
    {
      uint64_t v12 = ((v8 & 0x7F) << 7) | (v10 << 14) | (v5 & 0x7F);
      uint64_t v6 = v9;
LABEL_10:
      uint64_t v5 = v12;
      goto LABEL_11;
    }
    uint64_t v6 = v2 + 4;
    int v13 = *(char *)(v3 + v9);
    int v14 = *(unsigned __int8 *)(v3 + v9);
    if ((v13 & 0x80000000) == 0)
    {
      uint64_t v12 = ((v11 & 0x7F) << 14) | (v14 << 21) | ((v8 & 0x7F) << 7) | (v5 & 0x7F);
      goto LABEL_10;
    }
    int v16 = *(char *)(v3 + v6);
    *(void *)(a1 + 40) = v2 + 5;
    if (v16 < 0)
    {
      return ((v14 & 0x7F) << 21) | (v16 << 28) | ((v11 & 0x7F) << 14) | ((v8 & 0x7F) << 7) | (v5 & 0x7F);
    }
    else
    {
      uint64_t v5 = 0;
      *(_DWORD *)(a1 + 16) = 22;
    }
  }
  return v5;
}

uint64_t store_stream_read_bytes_672(unsigned int *a1, char *__dst, size_t __n)
{
  size_t v6 = *((void *)a1 + 4);
  uint64_t v7 = *((void *)a1 + 5);
  if (v7 + __n > v6)
  {
    uint64_t v8 = 0;
    uint64_t v11 = *((void *)a1 + 5);
    while (1)
    {
      size_t v9 = v6 - v11;
      if (v6 != v11)
      {
        memcpy(__dst, (const void *)(*((void *)a1 + 6) + v11), v6 - v11);
        size_t v6 = *((void *)a1 + 4);
        *((void *)a1 + 5) += v9;
      }
      unint64_t v12 = prot_pread(*a1, *((void **)a1 + 6), v6, *((void *)a1 + 3));
      if (v12 == -1) {
        break;
      }
      size_t v6 = v12;
      *((void *)a1 + 4) = v12;
      *((void *)a1 + 5) = 0;
      *((void *)a1 + 3) += v12;
      if (!v12) {
        return v9 + v8;
      }
      uint64_t v7 = 0;
      uint64_t v11 = 0;
      __dst += v9;
      __n -= v9;
      v8 += v9;
      if (__n <= v12) {
        goto LABEL_3;
      }
    }
    size_t v9 = 0;
    a1[4] = *__error();
  }
  else
  {
    uint64_t v8 = 0;
LABEL_3:
    memcpy(__dst, (const void *)(*((void *)a1 + 6) + v7), __n);
    *((void *)a1 + 5) += __n;
    size_t v9 = __n;
  }
  return v9 + v8;
}

void ___si_init_localized_terms_block_invoke_1036(uint64_t a1, unsigned int a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    bzero(v36, 0x400uLL);
    RawLocalizedUniquedField = (uint8_t *)getRawLocalizedUniquedField(*(void *)(v4 + 1184), a2, v36, 0);
    if (RawLocalizedUniquedField)
    {
      size_t v6 = RawLocalizedUniquedField;
      CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFDictionaryRef v8 = _decodeSDBField(*(void *)(v4 + 1184), (unsigned __int16 *)v6, v6 + 13, 0, 0, 0, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
      if (v8)
      {
        CFDictionaryRef v9 = v8;
        int v10 = *__error();
        uint64_t v11 = _SILogForLogForCategory(0);
        os_log_type_t v12 = 2 * (gSILogLevels[0] < 4);
        if (os_log_type_enabled(v11, v12))
        {
          *(_DWORD *)long long buf = 67109378;
          *(_DWORD *)uint64_t v33 = a2;
          *(_WORD *)&v33[4] = 2112;
          *(void *)&v33[6] = v9;
          _os_log_impl(&dword_1BD672000, v11, v12, "new loc field(%d): %@", buf, 0x12u);
        }
        *__error() = v10;
        CFTypeID v13 = CFGetTypeID(v9);
        if (v13 == CFDictionaryGetTypeID() && CFDictionaryGetCount(v9))
        {
          CFDictionaryRef Mutable = CFDictionaryCreateMutable(v7, 0, 0, MEMORY[0x1E4F1D540]);
          field_name_for_id = (char *)db_get_field_name_for_id(*(int **)(v4 + 1184), *((_DWORD *)v6 + 1));
          if (field_name_for_id)
          {
            id_for_int field = db_get_id_for_field(*(int **)(v4 + 1184), field_name_for_id);
            CFDictionaryAddValue(Mutable, (const void *)(id_for_field | ((unint64_t)(*((_WORD *)v6 + 1) & 0x100) << 23)), v9);
            TermUpdateSetAddDocumentInfo(*(void *)(v4 + 6640), (*(_DWORD *)(v4 + 6576) >> 19) & 3, a2, 0, Mutable, 0, 0, 5, 0);
            CFRelease(Mutable);
          }
          else
          {
            si_analytics_log_7729(0, v16, v17, v18, v19, v20, v21, v22, *((_DWORD *)v6 + 1));
            int v24 = *__error();
            unsigned int v25 = _SILogForLogForCategory(7);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            {
              int v31 = *((_DWORD *)v6 + 1);
              *(_DWORD *)long long buf = 136315650;
              *(void *)uint64_t v33 = "si_handle_new_unique_localized_field";
              *(_WORD *)&v33[8] = 1024;
              *(_DWORD *)&v33[10] = 540;
              __int16 v34 = 1024;
              int v35 = v31;
              _os_log_error_impl(&dword_1BD672000, v25, OS_LOG_TYPE_ERROR, "%s:%d: No field name for field id %d", buf, 0x18u);
            }
            *__error() = v24;
          }
        }
        CFRelease(v9);
      }
      if (v6 != v36) {
        free(v6);
      }
    }
  }
  uint64_t v26 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v26 + 6864))
  {
    uuid_generate_random((unsigned __int8 *)(v26 + 6848));
    CFDataRef v27 = CFDataCreate(0, (const UInt8 *)(*(void *)(a1 + 32) + 6848), 16);
    SISetProperty(*(void *)(a1 + 32), @"database.localizedtermsuuid", v27);
    CFRelease(v27);
    int v28 = *__error();
    BOOL v29 = _SILogForLogForCategory(0);
    os_log_type_t v30 = 2 * (gSILogLevels[0] < 4);
    if (os_log_type_enabled(v29, v30))
    {
      *(_DWORD *)uint64_t v36 = 67109120;
      unsigned int v37 = a2;
      _os_log_impl(&dword_1BD672000, v29, v30, "new loc term %d", v36, 8u);
    }
    *__error() = v28;
    *(unsigned char *)(*(void *)(a1 + 32) + 6864) = 1;
  }
}

dispatch_semaphore_t freeQueueSetup()
{
  CFAllocatorRef v0 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_BACKGROUND, 0);
  freeQueue = (uint64_t)dispatch_queue_create("com.apple.spotlight.index.free", v0);
  dispatch_semaphore_t result = dispatch_semaphore_create(16);
  freeSemaphore = (uint64_t)result;
  return result;
}

void __registerForGameModeChange_block_invoke()
{
  CFAllocatorRef v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  sGameModeNotificationQueue = (uint64_t)dispatch_queue_create("com.apple.spotlight.CoreSpotlight.gm", v0);
  notify_register_check("com.apple.system.console_mode_changed", &registerForGameModeChange__gameModeNotifyToken);
  notify_register_dispatch("com.apple.system.console_mode_changed", &registerForGameModeChange__gameModeNotifyToken, (dispatch_queue_t)sGameModeNotificationQueue, &__block_literal_global_1027);
  uint64_t v1 = sGameModeNotificationQueue;
  dispatch_async(v1, &__block_literal_global_1030);
}

uint64_t __registerForGameModeChange_block_invoke_3()
{
  return checkGameModeAndSuspendResume(registerForGameModeChange__gameModeNotifyToken);
}

uint64_t checkGameModeAndSuspendResume(int a1)
{
  uint64_t state64 = 0;
  notify_get_state(a1, &state64);
  pthread_mutex_lock(&sGameModeMutex);
  sInGameMode = state64 != 0;
  if (!state64) {
    pthread_cond_broadcast(&sGameModeCond);
  }
  return pthread_mutex_unlock(&sGameModeMutex);
}

uint64_t __registerForGameModeChange_block_invoke_2(uint64_t a1, int a2)
{
  return checkGameModeAndSuspendResume(a2);
}

uint64_t __si_set_vector_store_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  a2[1798] = v3;
  uint64_t v4 = (void *)a2[614];
  if (v4)
  {
    v4[26] = v3;
    uint64_t v5 = (void *)v4[19];
    size_t v6 = v4 + 20;
    if (v5 != v4 + 20)
    {
      do
      {
        (*(void (**)(void, uint64_t))(*(void *)v5[5] + 288))(v5[5], v3);
        CFAllocatorRef v7 = (void *)v5[1];
        if (v7)
        {
          do
          {
            CFDictionaryRef v8 = v7;
            CFAllocatorRef v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            CFDictionaryRef v8 = (void *)v5[2];
            BOOL v9 = *v8 == (void)v5;
            uint64_t v5 = v8;
          }
          while (!v9);
        }
        uint64_t v5 = v8;
      }
      while (v8 != v6);
    }
  }
  uint64_t v10 = a2[1799];
  if (v10) {
    TermUpdateSetSetVectorStore(*(void **)(v10 + 80), v3);
  }
  uint64_t v11 = a2[1800];
  if (v11) {
    TermUpdateSetSetVectorStore(*(void **)(v11 + 80), v3);
  }
  return 1;
}

uint64_t _onceInitTuning()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 1;
  *(void *)uint64_t v3 = 0x1900000006;
  size_t v1 = 4;
  sysctl(v3, 2u, &v2, &v1, 0, 0);
  gCPUCFIndex Count = v2;
  return pthread_mutex_unlock(&_onceInitTuning_prefLock);
}

int *rename_transitional_state(int a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (renameatx_np(a1, "tmp.indexState", a1, "indexState", 0x10u))
  {
    int v2 = *__error();
    uint64_t v3 = _SILogForLogForCategory(6);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v7 = *__error();
      int v9 = 136316162;
      uint64_t v10 = "rename_transitional_state";
      __int16 v11 = 1024;
      int v12 = 11134;
      __int16 v13 = 1024;
      int v14 = v7;
      __int16 v15 = 2080;
      uint64_t v16 = "tmp.indexState";
      __int16 v17 = 2080;
      uint64_t v18 = "indexState";
      _os_log_error_impl(&dword_1BD672000, v3, OS_LOG_TYPE_ERROR, "%s:%d: errno:%d %s -> %s", (uint8_t *)&v9, 0x2Cu);
    }
    *__error() = v2;
  }
  dispatch_semaphore_t result = (int *)renameatx_np(a1, "tmp.spotlight.state.transition", a1, "tmp.spotlight.state", 0x10u);
  if (result)
  {
    int v5 = *__error();
    size_t v6 = _SILogForLogForCategory(6);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v8 = *__error();
      int v9 = 136316162;
      uint64_t v10 = "rename_transitional_state";
      __int16 v11 = 1024;
      int v12 = 11138;
      __int16 v13 = 1024;
      int v14 = v8;
      __int16 v15 = 2080;
      uint64_t v16 = "tmp.spotlight.state.transition";
      __int16 v17 = 2080;
      uint64_t v18 = "tmp.spotlight.state";
      _os_log_error_impl(&dword_1BD672000, v6, OS_LOG_TYPE_ERROR, "%s:%d: errno:%d %s -> %s", (uint8_t *)&v9, 0x2Cu);
    }
    dispatch_semaphore_t result = __error();
    int *result = v5;
  }
  return result;
}

uint64_t check_touch_file(uint64_t result, const char *a2, uint64_t a3)
{
  if ((result & 0x80000000) == 0)
  {
    if (a2)
    {
      dispatch_semaphore_t result = openat(result, a2, 0x8000);
      if (result != -1)
      {
        int v4 = result;
        (*(void (**)(uint64_t))(a3 + 16))(a3);
        return close(v4);
      }
    }
  }
  return result;
}

uint64_t si_read_index_state(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = x_openat(*(_DWORD *)(v1 + 32), "tmp.spotlight.state", 0, v2, v3, v4, v5, v6, v31);
  if (v7 == -1)
  {
    uint64_t v11 = *__error();
    if (v11 == 2)
    {
      int v23 = *__error();
      int v24 = _SILogForLogForCategory(11);
      os_log_type_t v25 = 2 * (dword_1E9FC90D0 < 4);
      if (os_log_type_enabled(v24, v25))
      {
        __src[0] = 134218240;
        *(void *)&__src[1] = v1;
        LOWORD(__src[3]) = 1024;
        *(_DWORD *)((char *)&__src[3] + 2) = 2;
        _os_log_impl(&dword_1BD672000, v24, v25, "%p open index state error:%d", (uint8_t *)__src, 0x12u);
      }
      *__error() = v23;
      return 2;
    }
    else if (v11 == 92)
    {
      int v12 = *__error();
      __int16 v13 = _SILogForLogForCategory(11);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        __src[0] = 136316162;
        *(void *)&__src[1] = "si_read_index_state";
        LOWORD(__src[3]) = 1024;
        *(_DWORD *)((char *)&__src[3] + 2) = 30791;
        HIWORD(__src[4]) = 2048;
        *(void *)&__src[5] = v1;
        LOWORD(__src[7]) = 1024;
        *(_DWORD *)((char *)&__src[7] + 2) = 92;
        HIWORD(__src[8]) = 2080;
        *(void *)&__src[9] = strerror(92);
        _os_log_error_impl(&dword_1BD672000, v13, OS_LOG_TYPE_ERROR, "%s:%d: %p open index state error:%d (%s); removing the file.",
          (uint8_t *)__src,
          0x2Cu);
      }
      *__error() = v12;
      if (unlinkat(*(_DWORD *)(v1 + 32), "tmp.spotlight.state", 0))
      {
        int v14 = *__error();
        __int16 v15 = _SILogForLogForCategory(11);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          BOOL v29 = __error();
          os_log_type_t v30 = strerror(*v29);
          __src[0] = 136315650;
          *(void *)&__src[1] = "si_read_index_state";
          LOWORD(__src[3]) = 1024;
          *(_DWORD *)((char *)&__src[3] + 2) = 30793;
          HIWORD(__src[4]) = 2080;
          *(void *)&__src[5] = v30;
          _os_log_error_impl(&dword_1BD672000, v15, OS_LOG_TYPE_ERROR, "%s:%d: Error removing tmp.spotlight.state: %s\n", (uint8_t *)__src, 0x1Cu);
        }
        *__error() = v14;
      }
      return 92;
    }
    else
    {
      int v26 = *__error();
      CFDataRef v27 = _SILogForLogForCategory(11);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        __src[0] = 136315906;
        *(void *)&__src[1] = "si_read_index_state";
        LOWORD(__src[3]) = 1024;
        *(_DWORD *)((char *)&__src[3] + 2) = 30798;
        HIWORD(__src[4]) = 2048;
        *(void *)&__src[5] = v1;
        LOWORD(__src[7]) = 1024;
        *(_DWORD *)((char *)&__src[7] + 2) = v11;
        _os_log_error_impl(&dword_1BD672000, v27, OS_LOG_TYPE_ERROR, "%s:%d: %p open index state error:%d", (uint8_t *)__src, 0x22u);
      }
      *__error() = v26;
    }
  }
  else
  {
    uint64_t v8 = v7;
    if (*(unsigned char *)(v1 + 2064)) {
      fcntl(v7, 64, 3);
    }
    bzero(__src, 0x1000uLL);
    ssize_t v9 = prot_pread(v8, __src, 0x1000uLL, 0);
    ssize_t v10 = v9;
    if (v9 == -1)
    {
      uint64_t v11 = *__error();
    }
    else
    {
      if (v9 == 4096)
      {
        close(v8);
LABEL_21:
        if (LOBYTE(__src[0]) == 1)
        {
          memcpy((void *)(v1 + 2472), __src, 0x1000uLL);
          int v18 = *__error();
          uint64_t v19 = _SILogForLogForCategory(11);
          os_log_type_t v20 = 2 * (dword_1E9FC90D0 < 4);
          if (os_log_type_enabled(v19, v20))
          {
            if ((BYTE1(__src[0]) - 1) > 3u) {
              uint64_t v21 = "unknown";
            }
            else {
              uint64_t v21 = off_1E6342B48[(BYTE1(__src[0]) - 1)];
            }
            *(_DWORD *)long long buf = 134218242;
            uint64_t v33 = (const char *)v1;
            __int16 v34 = 2080;
            *(void *)int v35 = v21;
            _os_log_impl(&dword_1BD672000, v19, v20, "%p read state:%s", buf, 0x16u);
          }
        }
        else
        {
          int v18 = *__error();
          uint64_t v22 = _SILogForLogForCategory(11);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 136315906;
            uint64_t v33 = "si_read_index_state";
            __int16 v34 = 1024;
            *(_DWORD *)int v35 = 30818;
            *(_WORD *)&v35[4] = 2048;
            *(void *)&v35[6] = v1;
            __int16 v36 = 1024;
            int v37 = LOBYTE(__src[0]);
            _os_log_error_impl(&dword_1BD672000, v22, OS_LOG_TYPE_ERROR, "%s:%d: %p invalid version:%d", buf, 0x22u);
          }
        }
        *__error() = v18;
        _si_dump_index_state(v1, 4);
        return 0;
      }
      uint64_t v11 = 22;
    }
    int v16 = *__error();
    __int16 v17 = _SILogForLogForCategory(11);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136316418;
      uint64_t v33 = "si_read_index_state";
      __int16 v34 = 1024;
      *(_DWORD *)int v35 = 30811;
      *(_WORD *)&v35[4] = 2048;
      *(void *)&v35[6] = v1;
      __int16 v36 = 1024;
      int v37 = v8;
      __int16 v38 = 2048;
      ssize_t v39 = v10;
      __int16 v40 = 1024;
      int v41 = v11;
      _os_log_error_impl(&dword_1BD672000, v17, OS_LOG_TYPE_ERROR, "%s:%d: %p read index state fd:%d rs:%ld error:%d", buf, 0x32u);
    }
    *__error() = v16;
    close(v8);
    if (!v11) {
      goto LABEL_21;
    }
  }
  return v11;
}

uint64_t _SIOpenIndexFilesWithState(uint64_t a1, int a2, unsigned int a3, int a4, char a5, unsigned char *a6, void *a7, uint64_t a8, _DWORD *a9, char a10)
{
  uint64_t v432 = *MEMORY[0x1E4F143B8];
  *a6 = 0;
  *a7 = 0;
  v417[0] = MEMORY[0x1E4F143A8];
  v417[1] = 0x40000000;
  v417[2] = ___SIOpenIndexFilesWithState_block_invoke;
  v417[3] = &__block_descriptor_tmp_838;
  v417[4] = a1;
  int v389 = (char *)(a1 + 6936);
  int v12 = *(unsigned __int8 *)(a1 + 6936);
  uint64_t v13 = *(unsigned __int16 *)(a1 + 2476);
  uint64_t v390 = *(unsigned __int16 *)(a1 + 2478);
  uint64_t v416 = 0;
  uint64_t v415 = 0;
  uint64_t v413 = 0;
  uint64_t v412 = 0;
  CFTypeRef cf = 0;
  if (a4) {
    int v14 = 48;
  }
  else {
    int v14 = 16;
  }
  if (a3) {
    v14 |= 0x40u;
  }
  if (*(unsigned char *)(a1 + 2065)) {
    v14 |= 0x400u;
  }
  BOOL v15 = v12 == 0;
  if (v12) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v13;
  }
  unsigned int v17 = *(_DWORD *)(a1 + 6576);
  int v18 = (v17 >> 7) & 0x800 | v14;
  if (!v15) {
    v18 |= 0x1000u;
  }
  int v19 = v18 | ~(v17 >> 1) & 0x8000;
  if (a10) {
    int v20 = v19 | 0x2000;
  }
  else {
    int v20 = v19;
  }
  int v21 = *(unsigned __int8 *)(a1 + 2064);
  if (*(unsigned char *)(a1 + 2064)) {
    int v22 = 111;
  }
  else {
    int v22 = 95;
  }
  if (*(unsigned char *)(a1 + 2064)) {
    int v23 = 114;
  }
  else {
    int v23 = 102;
  }
  if (*(unsigned char *)(a1 + 2064)) {
    int v24 = v20 | 0x100;
  }
  else {
    int v24 = v20;
  }
  os_log_type_t v25 = (int *)(a1 + 1192);
  int v26 = CIMetaInfoRead(a1 + 1192, v21);
  if (v26)
  {
    int v27 = v26;
    int v28 = *__error();
    BOOL v29 = _SILogForLogForCategory(11);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __str = 136315906;
      *(void *)&__str[4] = "_SIOpenIndexFilesWithState";
      *(_WORD *)&__str[12] = 1024;
      *(_DWORD *)&__str[14] = 10328;
      *(_WORD *)&__str[18] = 2048;
      *(void *)&__str[20] = a1;
      *(_WORD *)&__str[28] = 1024;
      *(_DWORD *)&__str[30] = v27;
      _os_log_error_impl(&dword_1BD672000, v29, OS_LOG_TYPE_ERROR, "%s:%d: %p CIMetaInfoRead err:%d", (uint8_t *)__str, 0x22u);
    }
    *__error() = v28;
    bzero(__str, 0x400uLL);
    snprintf(__str, 0x400uLL, "CIMetaInfoRead failed %d", v27);
    goto LABEL_29;
  }
  uint64_t v382 = v16;
  int v379 = v21;
  unsigned int v391 = v23;
  unsigned int v388 = v22;
  CFRange v380 = v25;
  unsigned int v378 = a3;
  uint64_t v377 = v13;
  if (*(_DWORD *)(a1 + 1236) > 0x31u || *(_DWORD *)(a1 + 1244) > 0x31u)
  {
    int v38 = *__error();
    ssize_t v39 = _SILogForLogForCategory(11);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      int v212 = *(_DWORD *)(a1 + 1236);
      int v213 = *(_DWORD *)(a1 + 1244);
      *(_DWORD *)std::string __str = 136316162;
      *(void *)&__str[4] = "_SIOpenIndexFilesWithState";
      *(_WORD *)&__str[12] = 1024;
      *(_DWORD *)&__str[14] = 10335;
      *(_WORD *)&__str[18] = 2048;
      *(void *)&__str[20] = a1;
      *(_WORD *)&__str[28] = 1024;
      *(_DWORD *)&__str[30] = v212;
      *(_WORD *)&__str[34] = 1024;
      *(_DWORD *)&__str[36] = v213;
      _os_log_error_impl(&dword_1BD672000, v39, OS_LOG_TYPE_ERROR, "%s:%d: %p Too many live indexes %d/%d", (uint8_t *)__str, 0x28u);
    }
    *__error() = v38;
    bzero(__str, 0x400uLL);
    snprintf(__str, 0x400uLL, "too many live indexes %d, %d", *(_DWORD *)(a1 + 1236), *(_DWORD *)(a1 + 1244));
    __si_set_error_str(1, "%s:%u: %s", v40, v41, v42, v43, v44, v45, (char)"SpotlightIndex.c");
    int v36 = -1;
    goto LABEL_42;
  }
  char v47 = 0;
  if (v21) {
    int v48 = 75777;
  }
  else {
    int v48 = 10241;
  }
  int v381 = v48;
  unsigned int v375 = v24;
  unsigned int v376 = v24 | 2;
  long long v374 = (void *)(a1 + 2400);
  uint64_t v49 = a1 + 2480 + v13;
  unsigned int v50 = a3;
  uint64_t v51 = v388;
  while (2)
  {
    int v52 = *(unsigned __int8 *)(a1 + 2474);
    if (!*(unsigned char *)(a1 + 2474)) {
      int v52 = *(unsigned __int8 *)(a1 + 2473);
    }
    uint64_t v53 = *(unsigned int *)(a1 + 32);
    int v418 = 0;
    bzero(&__str[2], 0x3FEuLL);
    strcpy(__str, ".");
    strlcat(__str, "store.db", 0x400uLL);
    unsigned __int8 v411 = 0;
    switch(v52)
    {
      case 1:
        int v59 = *__error();
        int v60 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1BD672000, v60, OS_LOG_TYPE_DEFAULT, "Restore sdb from shadow", buf, 2u);
        }
        *__error() = v59;
        int updated = update_db_header(v53);
        if ((updated & 0xFFFFFFFD) != 0)
        {
          int v62 = updated;
          int v63 = *__error();
          BOOL v64 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 67109120;
            LODWORD(v425) = v62;
            _os_log_impl(&dword_1BD672000, v64, OS_LOG_TYPE_DEFAULT, "Failed to update header err:%d", buf, 8u);
          }
LABEL_84:
          *__error() = v63;
          uint64_t v51 = v388;
          goto LABEL_85;
        }
        char v67 = copyFileFallback(v53, "store.db", v53, __str, &v418, 1, 1);
        int v68 = *__error();
        if ((v67 & 1) == 0)
        {
          if (v68) {
            int v62 = v68;
          }
          else {
            int v62 = -1;
          }
          int v63 = *__error();
          os_log_type_t v74 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 136315906;
            int v425 = "db2_update_datastore_state";
            __int16 v426 = 1024;
            LODWORD(v427) = 6786;
            WORD2(v427) = 2080;
            *(void *)((char *)&v427 + 6) = "store.db";
            HIWORD(v427) = 2080;
            gid_t v428 = __str;
            _os_log_error_impl(&dword_1BD672000, v74, OS_LOG_TYPE_ERROR, "%s:%d: Failed to copyfile for recovery %s->%s", buf, 0x26u);
          }
          goto LABEL_84;
        }
        uint64_t v69 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1BD672000, v69, OS_LOG_TYPE_DEFAULT, "Restore data_map from shadow", buf, 2u);
        }
        *__error() = v68;
        bzero(buf, 0x400uLL);
        snprintf((char *)buf, 0x400uLL, "%sStr-%d.map", "db", 1);
        uint64_t v419 = v53;
        __darwin_time_t v420 = buf;
        uint64_t v421 = 0x8400000002;
        long long v422 = 0u;
        memset(v423, 0, sizeof(v423));
        uint64_t v70 = data_map32_init_with_ctx((uint64_t)&v419);
        if (v70)
        {
          uint64_t v71 = v70;
          int v72 = *(_DWORD *)(v70 + 216);
          switch(v72)
          {
            case -270471200:
              _data_map_ext_commit(v70);
              break;
            case 1684300900:
              _data_map64_commit(v70);
              break;
            case 842150450:
              _data_map32_commit(v70, 1);
              break;
          }
          data_map_destroy(v71);
        }
        bzero(buf, 0x400uLL);
        snprintf((char *)buf, 0x400uLL, "%sStr-%d.map", "db", 2);
        uint64_t v421 = 0x8400000000;
        uint64_t v419 = v53;
        __darwin_time_t v420 = buf;
        long long v422 = 0u;
        memset(v423, 0, sizeof(v423));
        uint64_t v164 = data_map32_init_with_ctx((uint64_t)&v419);
        if (v164)
        {
          uint64_t v165 = v164;
          int v166 = *(_DWORD *)(v164 + 216);
          switch(v166)
          {
            case -270471200:
              _data_map_ext_commit(v164);
              break;
            case 1684300900:
              _data_map64_commit(v164);
              break;
            case 842150450:
              _data_map32_commit(v164, 1);
              break;
          }
          data_map_destroy(v165);
        }
        bzero(buf, 0x400uLL);
        snprintf((char *)buf, 0x400uLL, "%sStr-%d.map", "db", 3);
        uint64_t v421 = 0x8400000000;
        uint64_t v419 = v53;
        __darwin_time_t v420 = buf;
        long long v422 = 0u;
        memset(v423, 0, sizeof(v423));
        uint64_t v167 = data_map32_init_with_ctx((uint64_t)&v419);
        if (v167)
        {
          uint64_t v168 = v167;
          int v169 = *(_DWORD *)(v167 + 216);
          switch(v169)
          {
            case -270471200:
              _data_map_ext_commit(v167);
              break;
            case 1684300900:
              _data_map64_commit(v167);
              break;
            case 842150450:
              _data_map32_commit(v167, 1);
              break;
          }
          data_map_destroy(v168);
        }
        bzero(buf, 0x400uLL);
        snprintf((char *)buf, 0x400uLL, "%sStr-%d.map", "db", 4);
        uint64_t v421 = 0x8400000000;
        uint64_t v419 = v53;
        __darwin_time_t v420 = buf;
        long long v422 = 0u;
        memset(v423, 0, sizeof(v423));
        uint64_t v170 = data_map32_init_with_ctx((uint64_t)&v419);
        if (v170)
        {
          uint64_t v171 = v170;
          int v172 = *(_DWORD *)(v170 + 216);
          switch(v172)
          {
            case -270471200:
              _data_map_ext_commit(v170);
              break;
            case 1684300900:
              _data_map64_commit(v170);
              break;
            case 842150450:
              _data_map32_commit(v170, 1);
              break;
          }
          data_map_destroy(v171);
        }
        bzero(buf, 0x400uLL);
        snprintf((char *)buf, 0x400uLL, "%sStr-%d.map", "db", 5);
        uint64_t v421 = 0x8400000000;
        uint64_t v419 = v53;
        __darwin_time_t v420 = buf;
        long long v422 = 0u;
        memset(v423, 0, sizeof(v423));
        uint64_t v173 = data_map32_init_with_ctx((uint64_t)&v419);
        if (v173)
        {
          uint64_t v174 = v173;
          int v175 = *(_DWORD *)(v173 + 216);
          switch(v175)
          {
            case -270471200:
              _data_map_ext_commit(v173);
              break;
            case 1684300900:
              _data_map64_commit(v173);
              break;
            case 842150450:
              _data_map32_commit(v173, 1);
              break;
          }
          data_map_destroy(v174);
        }
        bzero(buf, 0x400uLL);
        snprintf((char *)buf, 0x400uLL, "%sStr-%d.map", "db", 6);
        uint64_t v419 = v53;
        __darwin_time_t v420 = buf;
        uint64_t v421 = 0xC400000004;
        long long v422 = 0u;
        memset(v423, 0, sizeof(v423));
        uint64_t v176 = data_map_ext_init_with_ctx((uint64_t)&v419);
        if (v176)
        {
          uint64_t v177 = v176;
          int v178 = *(_DWORD *)(v176 + 216);
          switch(v178)
          {
            case -270471200:
              _data_map_ext_commit(v176);
              break;
            case 1684300900:
              _data_map64_commit(v176);
              break;
            case 842150450:
              _data_map32_commit(v176, 1);
              break;
          }
          data_map_destroy(v177);
        }
        int v62 = update_db_header(v53);
        uint64_t v51 = v388;
        if (v62)
        {
LABEL_85:
          int v75 = *__error();
          uint64_t v76 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 136315906;
            int v425 = "db2_update_datastore_state";
            __int16 v426 = 1024;
            LODWORD(v427) = 6897;
            WORD2(v427) = 1024;
            *(_DWORD *)((char *)&v427 + 6) = v52;
            WORD5(v427) = 1024;
            HIDWORD(v427) = v62;
            _os_log_error_impl(&dword_1BD672000, v76, OS_LOG_TYPE_ERROR, "%s:%d: update state (%d) failed err:%d", buf, 0x1Eu);
          }
          *__error() = v75;
          if (v62)
          {
            bzero(__str, 0x400uLL);
            snprintf(__str, 0x400uLL, "db_update_datastore_state failed %d, %d", v62, v52);
            __si_set_error_str(1, "%s:%u: %s", v214, v215, v216, v217, v218, v219, (char)"SpotlightIndex.c");
            int v220 = *__error();
            int v221 = _SILogForLogForCategory(11);
            if (os_log_type_enabled(v221, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 136315906;
              int v425 = "_SIOpenIndexFilesWithState";
              __int16 v426 = 1024;
              LODWORD(v427) = 10350;
              WORD2(v427) = 2048;
              *(void *)((char *)&v427 + 6) = a1;
              HIWORD(v427) = 1024;
              LODWORD(v428) = v62;
              _os_log_error_impl(&dword_1BD672000, v221, OS_LOG_TYPE_ERROR, "%s:%d: %p db_update_datastore_state err:%d", buf, 0x22u);
            }
            *__error() = v220;
LABEL_30:
            int v36 = -1;
            goto LABEL_31;
          }
LABEL_88:
          int v66 = 0;
        }
        else
        {
LABEL_64:
          int v66 = 4;
LABEL_67:
          unsigned __int8 v411 = v66;
        }
        uint64_t v77 = v390;
        if (v66 != *(unsigned __int8 *)(a1 + 2474))
        {
          *(unsigned char *)(a1 + 2474) = v66;
          int v78 = si_write_index_state(a1, 0, 0, v54, v55, v56, v57, v58);
          if (v78)
          {
            int v222 = v78;
            bzero(__str, 0x400uLL);
            snprintf(__str, 0x400uLL, "si_write_index_state failed %d, %d", v222, v66);
            __si_set_error_str(1, "%s:%u: %s", v223, v224, v225, v226, v227, v228, (char)"SpotlightIndex.c");
            int v229 = *__error();
            int v230 = _SILogForLogForCategory(11);
            if (os_log_type_enabled(v230, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 136315906;
              int v425 = "_SIOpenIndexFilesWithState";
              __int16 v426 = 1024;
              LODWORD(v427) = 10360;
              WORD2(v427) = 2048;
              *(void *)((char *)&v427 + 6) = a1;
              HIWORD(v427) = 1024;
              LODWORD(v428) = v222;
              _os_log_error_impl(&dword_1BD672000, v230, OS_LOG_TYPE_ERROR, "%s:%d: %p si_write_index_state err:%d", buf, 0x22u);
            }
            *__error() = v229;
            goto LABEL_30;
          }
        }
        long long v408 = 0u;
        long long v409 = 0u;
        uint64_t v410 = 0;
        LODWORD(v408) = *(_DWORD *)(a1 + 32);
        *((void *)&v408 + 1) = "store.db";
        *(void *)&long long v409 = __PAIR64__(*(_DWORD *)(a1 + 60), v381);
        if (SIIsAppleInternal_onceToken != -1) {
          dispatch_once(&SIIsAppleInternal_onceToken, &__block_literal_global_5267);
        }
        uint64_t v79 = a1 + 2184;
        if (!SIIsAppleInternal_internal) {
          uint64_t v79 = 0;
        }
        *((void *)&v409 + 1) = v79;
        LOBYTE(v410) = 0;
        if (*(unsigned char *)(a1 + 2473) == 2)
        {
          if (v47)
          {
            CFStringRef v352 = __si_assert_copy_extra_625(-1);
            uint64_t v353 = v352;
            unint64_t v354 = "";
            if (v352) {
              unint64_t v354 = v352;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 10377, "!fast_flush_failed", v354);
LABEL_402:
            free(v353);
            if (__valid_fs(-1)) {
              uint64_t v359 = 2989;
            }
            else {
              uint64_t v359 = 3072;
            }
            *(_DWORD *)uint64_t v359 = -559038737;
            abort();
          }
          uint64_t datastore_with_ctx = db2_get_datastore_with_ctx((unsigned int *)&v408);
          *(void *)(a1 + 1184) = datastore_with_ctx;
          if (!datastore_with_ctx)
          {
            int v92 = 0;
            goto LABEL_160;
          }
          *(_DWORD *)std::string __str = 0;
          CFNumberRef v81 = (const __CFNumber *)SICopyProperty(a1, @"kSINextIndexId");
          uint64_t v82 = v382;
          if (v81)
          {
            CFNumberRef v83 = v81;
            CFTypeID v84 = CFGetTypeID(v81);
            if (v84 == CFNumberGetTypeID()) {
              CFNumberGetValue(v83, kCFNumberSInt32Type, __str);
            }
            CFRelease(v83);
          }
          if (*(_DWORD *)__str > *(_DWORD *)(a1 + 1448)) {
            *(_DWORD *)(a1 + 1448) = *(_DWORD *)__str;
          }
          db_datastore_set_bg_assertion_flag(*(void *)(a1 + 1184), *v389);
          if (*(unsigned char *)(a1 + 2474) == 2)
          {
            int v91 = db_restore_dirty_chunk_info(*(_DWORD *)(a1 + 32), (uint64_t)&v415, v85, v86, v87, v88, v89, v90);
            if (v91) {
              goto LABEL_106;
            }
            db_set_dirty_chunks(*(void *)(a1 + 1184), (uint64_t)v415, v416, SHIDWORD(v416));
            uint64_t v415 = 0;
          }
          int v93 = x_openat(*(_DWORD *)(a1 + 32), "repair_dirstore", 0x20000000, v86, v87, v88, v89, v90, v372);
          if (v93 != -1)
          {
            int v94 = v93;
            *(_DWORD *)std::string __str = 0;
            pread(v93, __str, 4uLL, 0);
            close(v94);
            *a9 |= *(_DWORD *)__str;
          }
          if (a3)
          {
            int v95 = *(unsigned __int8 *)(a1 + 2475);
            if (!*(unsigned char *)(a1 + 2475)) {
              int v95 = *(unsigned __int8 *)(a1 + 2473);
            }
            int v96 = reverseStoreUpdateState(*(unsigned int *)(a1 + 32), v95, &v411);
            int v92 = v96;
            if (v379 && v96 == 2)
            {
              int v102 = *__error();
              int v103 = _SILogForLogForCategory(6);
              if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)std::string __str = 136315394;
                *(void *)&__str[4] = "_SIOpenIndexFilesWithState";
                *(_WORD *)&__str[12] = 1024;
                *(_DWORD *)&__str[14] = 10432;
                _os_log_error_impl(&dword_1BD672000, v103, OS_LOG_TYPE_ERROR, "%s:%d: Ignoring missing path store", (uint8_t *)__str, 0x12u);
              }
              *__error() = v102;
              *(void *)(a1 + 6616) = createReverseStore(*(_DWORD *)(a1 + 32), "", v417);
            }
            else
            {
              if (v96) {
                goto LABEL_160;
              }
              int v131 = v411;
              if (v411 == *(unsigned __int8 *)(a1 + 2475))
              {
                uint64_t v373 = v49;
              }
              else
              {
                *(unsigned char *)(a1 + 2475) = v411;
                int v91 = si_write_index_state(a1, 0, 0, v97, v98, v99, v100, v101);
                if (v91)
                {
LABEL_106:
                  int v92 = v91;
LABEL_160:
                  int v36 = -1;
                  goto LABEL_161;
                }
                uint64_t v373 = v49;
                int v131 = *(unsigned __int8 *)(a1 + 2475);
              }
              if (v131 == 2)
              {
                int v154 = reverseStoreRestoreDirtyBitmap(*(_DWORD *)(a1 + 32), (uint64_t)&v412);
                if (v154)
                {
                  int v92 = v154;
                  int v36 = -1;
                  uint64_t v49 = v373;
                  goto LABEL_161;
                }
              }
              uint64_t v419 = 0;
              int v155 = check_crash_state(*(_DWORD *)(a1 + 32), 0, a5, &v419, 2);
              bzero(__str, 0x400uLL);
              int v156 = *__error();
              int v157 = _SILogForLogForCategory(0);
              os_log_type_t v158 = 2 * (gSILogLevels[0] < 4);
              if (os_log_type_enabled(v157, v158))
              {
                uint64_t v159 = v419;
                int v160 = fcntl(*(_DWORD *)(a1 + 32), 50, __str);
                if (__str[0]) {
                  BOOL v161 = v160 < 0;
                }
                else {
                  BOOL v161 = 1;
                }
                *(_DWORD *)long long buf = 134218242;
                if (v161) {
                  unsigned __int8 v162 = 0;
                }
                else {
                  unsigned __int8 v162 = __str;
                }
                int v425 = (const char *)v159;
                __int16 v426 = 2080;
                *(void *)&long long v427 = v162;
                _os_log_impl(&dword_1BD672000, v157, v158, "rs last_crash_delta: %ld for %s", buf, 0x16u);
              }
              *__error() = v156;
              long long v163 = openReverseStore(*(_DWORD *)(a1 + 32), v155, 0, 0, *(_DWORD **)(a1 + 6584), (uint64_t)&v412, v417);
              *(void *)(a1 + 6616) = v163;
              if (cf)
              {
                CFRelease(cf);
                CFTypeRef cf = 0;
                long long v163 = *(char **)(a1 + 6616);
              }
              uint64_t v77 = v390;
              uint64_t v82 = v382;
              uint64_t v51 = v388;
              uint64_t v49 = v373;
              uint64_t v413 = 0;
              uint64_t v412 = 0;
              if (!v163) {
                *a9 |= 1u;
              }
            }
          }
          updateMetaInfoForState(v380, v82, v77);
          if (v82)
          {
            uint64_t v104 = 0;
            while (1)
            {
              uint64_t v105 = a1 + v104;
              uint64_t v106 = *(unsigned __int8 *)(a1 + v104 + 2480);
              if (!*(unsigned char *)(a1 + v104 + 2480)) {
                uint64_t v106 = *(unsigned __int8 *)(a1 + 2473);
              }
              int v107 = ContentIndexUpdateState(*(unsigned int *)(a1 + 32), *(unsigned int *)(a1 + 1276), v51, v391, a3, 0, v104, v106, &v411);
              if (v107)
              {
                int v92 = v107;
                int v132 = *__error();
                CFDictionaryRef v133 = _SILogForLogForCategory(11);
                if (!os_log_type_enabled(v133, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_159;
                }
                *(_DWORD *)std::string __str = 136315906;
                *(void *)&__str[4] = "_SIOpenIndexFilesWithState";
                *(_WORD *)&__str[12] = 1024;
                *(_DWORD *)&__str[14] = 10482;
                *(_WORD *)&__str[18] = 2048;
                *(void *)&__str[20] = a1;
                *(_WORD *)&__str[28] = 1024;
                *(_DWORD *)&__str[30] = v92;
                CFTypeID v134 = v133;
                size_t v135 = "%s:%d: %p ContentIndexUpdateState err:%d";
                goto LABEL_158;
              }
              if (*(unsigned __int8 *)(v105 + 2480) != v411)
              {
                *(unsigned char *)(v105 + 2480) = v411;
                int v113 = si_write_index_state(a1, 0, 0, v108, v109, v110, v111, v112);
                if (v113) {
                  break;
                }
              }
              if (v82 == ++v104) {
                goto LABEL_127;
              }
            }
            int v92 = v113;
            int v132 = *__error();
            uint64_t v137 = _SILogForLogForCategory(11);
            if (!os_log_type_enabled(v137, OS_LOG_TYPE_ERROR)) {
              goto LABEL_159;
            }
            *(_DWORD *)std::string __str = 136315906;
            *(void *)&__str[4] = "_SIOpenIndexFilesWithState";
            *(_WORD *)&__str[12] = 1024;
            *(_DWORD *)&__str[14] = 10489;
            *(_WORD *)&__str[18] = 2048;
            *(void *)&__str[20] = a1;
            *(_WORD *)&__str[28] = 1024;
            *(_DWORD *)&__str[30] = v92;
            CFTypeID v134 = v137;
            size_t v135 = "%s:%d: %p si_write_index_state err:%d";
            goto LABEL_158;
          }
LABEL_127:
          if (v77)
          {
            uint64_t v114 = 0;
            while (1)
            {
              uint64_t v115 = *(unsigned __int8 *)(v49 + v114);
              if (!*(unsigned char *)(v49 + v114)) {
                uint64_t v115 = *(unsigned __int8 *)(a1 + 2473);
              }
              int v116 = ContentIndexUpdateState(*(unsigned int *)(a1 + 32), *(unsigned int *)(a1 + 1276), v51, v391, a3, 1, v114, v115, &v411);
              if (v116)
              {
                int v92 = v116;
                int v132 = *__error();
                int v136 = _SILogForLogForCategory(11);
                if (!os_log_type_enabled(v136, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_159;
                }
                *(_DWORD *)std::string __str = 136315906;
                *(void *)&__str[4] = "_SIOpenIndexFilesWithState";
                *(_WORD *)&__str[12] = 1024;
                *(_DWORD *)&__str[14] = 10499;
                *(_WORD *)&__str[18] = 2048;
                *(void *)&__str[20] = a1;
                *(_WORD *)&__str[28] = 1024;
                *(_DWORD *)&__str[30] = v92;
                CFTypeID v134 = v136;
                size_t v135 = "%s:%d: %p ContentIndexUpdateState err:%d";
                goto LABEL_158;
              }
              if (*(unsigned __int8 *)(v49 + v114) != v411)
              {
                *(unsigned char *)(v49 + v114) = v411;
                int v122 = si_write_index_state(a1, 0, 0, v117, v118, v119, v120, v121);
                if (v122) {
                  break;
                }
              }
              if (v77 == ++v114) {
                goto LABEL_135;
              }
            }
            int v92 = v122;
            int v132 = *__error();
            os_log_type_t v138 = _SILogForLogForCategory(11);
            if (!os_log_type_enabled(v138, OS_LOG_TYPE_ERROR)) {
              goto LABEL_159;
            }
            *(_DWORD *)std::string __str = 136315906;
            *(void *)&__str[4] = "_SIOpenIndexFilesWithState";
            *(_WORD *)&__str[12] = 1024;
            *(_DWORD *)&__str[14] = 10506;
            *(_WORD *)&__str[18] = 2048;
            *(void *)&__str[20] = a1;
            *(_WORD *)&__str[28] = 1024;
            *(_DWORD *)&__str[30] = v92;
            CFTypeID v134 = v138;
            size_t v135 = "%s:%d: %p si_write_index_state err:%d";
LABEL_158:
            _os_log_error_impl(&dword_1BD672000, v134, OS_LOG_TYPE_ERROR, v135, (uint8_t *)__str, 0x22u);
LABEL_159:
            *__error() = v132;
            goto LABEL_160;
          }
LABEL_135:
          if (!*(_DWORD *)(a1 + 1224)) {
            *(_DWORD *)(a1 + 1224) = 1;
          }
          uint64_t v407 = 0;
          long long v400 = 0u;
          long long v401 = 0u;
          long long v402 = 0u;
          long long v403 = 0u;
          long long v404 = 0u;
          long long v405 = 0u;
          uint64_t v406 = 0;
          uint64_t v399 = 0;
          int v123 = *(_DWORD *)(a1 + 1448);
          v398[0] = MEMORY[0x1E4F143A8];
          v398[1] = 0x40000000;
          v398[2] = ___SIOpenIndexFilesWithState_block_invoke_845;
          v398[3] = &__block_descriptor_tmp_846;
          v398[4] = a1;
          _si_next_index_id((os_unfair_lock_s *)a1, (*(_DWORD *)(*(void *)(a1 + 1376) + 8) + *(_DWORD *)(*(void *)(a1 + 1384) + 8)), 0, 1);
          v397[0] = MEMORY[0x1E4F143A8];
          v397[1] = 0x40000000;
          v397[2] = ___SIOpenIndexFilesWithState_block_invoke_2;
          v397[3] = &__block_descriptor_tmp_847;
          v397[4] = a1;
          uint64_t v124 = *(void *)(a1 + 1384);
          uint64_t v125 = *(void *)(a1 + 1376);
          uint64_t v126 = *(void *)(a1 + 6584);
          uint64_t vector_store = *(int **)(a1 + 1184);
          if (vector_store) {
            uint64_t vector_store = (int *)db_get_vector_store(vector_store);
          }
          int v36 = ContentIndexOpenBulk((uint64_t)v380, (uint64_t)&v400, v124, v125, v376, v126, (uint64_t)&v399, (uint64_t)&v407, (uint64_t)vector_store, (uint64_t)v398, v397);
          if ((v36 & 0x80000000) == 0)
          {
            long long v233 = v405;
            *(_OWORD *)(a8 + 64) = v404;
            *(_OWORD *)(a8 + 80) = v233;
            *(void *)(a8 + 96) = v406;
            long long v234 = v401;
            *(_OWORD *)a8 = v400;
            *(_OWORD *)(a8 + 16) = v234;
            long long v235 = v403;
            *(_OWORD *)(a8 + 32) = v402;
            *(_OWORD *)(a8 + 48) = v235;
            *a7 = v407;
            *long long v374 = v399;
            int v236 = *__error();
            int v237 = _SILogForLogForCategory(11);
            os_log_type_t v238 = 2 * (dword_1E9FC90D0 < 4);
            if (os_log_type_enabled(v237, v238))
            {
              uint64_t v239 = *(void *)(a1 + 2400);
              *(_DWORD *)std::string __str = 134218240;
              *(void *)&__str[4] = a1;
              *(_WORD *)&__str[12] = 2048;
              *(void *)&__str[14] = v239;
              _os_log_impl(&dword_1BD672000, v237, v238, "opened SIRef:%p from fast flush with recovery time %llu", (uint8_t *)__str, 0x16u);
            }
            char v47 = 0;
            int v240 = a2;
            goto LABEL_338;
          }
          *(_DWORD *)(a1 + 1448) = v123;
          int v128 = *__error();
          if (v128) {
            int v92 = v128;
          }
          else {
            int v92 = -1;
          }
          int v129 = *__error();
          CFStringRef v130 = _SILogForLogForCategory(11);
          if (os_log_type_enabled(v130, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __str = 136315906;
            *(void *)&__str[4] = "_SIOpenIndexFilesWithState";
            *(_WORD *)&__str[12] = 1024;
            *(_DWORD *)&__str[14] = 10542;
            *(_WORD *)&__str[18] = 2048;
            *(void *)&__str[20] = a1;
            *(_WORD *)&__str[28] = 1024;
            *(_DWORD *)&__str[30] = v36;
            _os_log_error_impl(&dword_1BD672000, v130, OS_LOG_TYPE_ERROR, "%s:%d: %p ContentIndexOpenBulk err:%d", (uint8_t *)__str, 0x22u);
          }
          *__error() = v129;
          if (v36 == -2)
          {
            bzero(__str, 0x400uLL);
            int v36 = -2;
            snprintf(__str, 0x400uLL, "ContentIndexOpenBulk failed %d, %d", -2, v92);
            goto LABEL_353;
          }
LABEL_161:
          int v139 = **(_DWORD **)(a1 + 6584);
          int v140 = *__error();
          unsigned int v141 = _SILogForLogForCategory(11);
          int v142 = v141;
          if (v139)
          {
            os_log_type_t v195 = 2 * (dword_1E9FC90D0 < 4);
            if (os_log_type_enabled(v141, v195))
            {
              *(_DWORD *)std::string __str = 134218240;
              *(void *)&__str[4] = a1;
              *(_WORD *)&__str[12] = 1024;
              *(_DWORD *)&__str[14] = v92;
              _os_log_impl(&dword_1BD672000, v142, v195, "%p open from fast flush canceled:%d", (uint8_t *)__str, 0x12u);
            }
            *__error() = v140;
            bzero(__str, 0x400uLL);
            snprintf(__str, 0x400uLL, "open from fast flush canceled %d", v92);
            __si_set_error_str(1, "%s:%u: %s", v196, v197, v198, v199, v200, v201, (char)"SpotlightIndex.c");
            if (!v92) {
              goto LABEL_42;
            }
LABEL_31:
            int v37 = *(int **)(a1 + 1184);
            if (v37)
            {
              if (v36 != -2 && !**(_DWORD **)(a1 + 6584) && !*v389) {
                *a6 = 1;
              }
              db_release_datastore_no_sync(v37);
              *(void *)(a1 + 1184) = 0;
            }
            goto LABEL_42;
          }
          BOOL v143 = dword_1E9FC90D0 < 3;
          if (os_log_type_enabled(v141, (os_log_type_t)(dword_1E9FC90D0 < 3)))
          {
            *(_DWORD *)std::string __str = 134218240;
            *(void *)&__str[4] = a1;
            *(_WORD *)&__str[12] = 1024;
            *(_DWORD *)&__str[14] = v92;
            _os_log_impl(&dword_1BD672000, v142, (os_log_type_t)v143, "*warn* %p open from fast flush failed:%d", (uint8_t *)__str, 0x12u);
          }
          *__error() = v140;
          unint64_t v149 = *(int **)(a1 + 1184);
          if (v149)
          {
            db_release_datastore_no_sync(v149);
            *(void *)(a1 + 1184) = 0;
          }
          uint64_t v150 = *(void *)(a1 + 6616);
          uint64_t v51 = v388;
          if (v150)
          {
            freeReverseDirStore(v150);
            *(void *)(a1 + 6616) = 0;
          }
          if (*(_DWORD *)(*(void *)(a1 + 1384) + 8))
          {
            CFIndex v355 = __si_assert_copy_extra_625(-1);
            uint64_t v353 = v355;
            long long v356 = "";
            if (v355) {
              long long v356 = v355;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 10583, "newIndex->syncSet->indexCount==0", v356);
            goto LABEL_402;
          }
          if (*(_DWORD *)(*(void *)(a1 + 1376) + 8))
          {
            long long v357 = __si_assert_copy_extra_625(-1);
            uint64_t v353 = v357;
            unint64_t v358 = "";
            if (v357) {
              unint64_t v358 = v357;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 10584, "newIndex->liveSet->indexCount==0", v358);
            goto LABEL_402;
          }
          *(unsigned char *)(a1 + 2473) = 1;
          if (*(unsigned char *)(a1 + 2474) != 4) {
            *(unsigned char *)(a1 + 2474) = 1;
          }
          if (a3 && *(unsigned char *)(a1 + 2475) != 4) {
            *(unsigned char *)(a1 + 2475) = 1;
          }
          uint64_t v151 = *(unsigned __int16 *)(a1 + 2476) + *(unsigned __int16 *)(a1 + 2478);
          if (v151)
          {
            uint64_t v152 = (unsigned char *)(a1 + 2480);
            do
            {
              if (*v152 != 4) {
                *uint64_t v152 = 1;
              }
              ++v152;
              --v151;
            }
            while (v151);
          }
          int v153 = si_write_index_state(a1, 0, 0, v144, v145, v146, v147, v148);
          char v47 = 1;
          if (v153)
          {
            int v202 = v153;
            int v203 = *__error();
            CFStringRef v204 = _SILogForLogForCategory(11);
            if (os_log_type_enabled(v204, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string __str = 136315906;
              *(void *)&__str[4] = "_SIOpenIndexFilesWithState";
              *(_WORD *)&__str[12] = 1024;
              *(_DWORD *)&__str[14] = 10604;
              *(_WORD *)&__str[18] = 2048;
              *(void *)&__str[20] = a1;
              *(_WORD *)&__str[28] = 1024;
              *(_DWORD *)&__str[30] = v202;
              _os_log_error_impl(&dword_1BD672000, v204, OS_LOG_TYPE_ERROR, "%s:%d: %p si_write_index_state err:%d", (uint8_t *)__str, 0x22u);
            }
            *__error() = v203;
            bzero(__str, 0x400uLL);
            snprintf(__str, 0x400uLL, "si_write_index_state err %d", v202);
            __si_set_error_str(1, "%s:%u: %s", v206, v207, v208, v209, v210, v211, (char)"SpotlightIndex.c");
            goto LABEL_31;
          }
          continue;
        }
        uint64_t v179 = db2_get_datastore_with_ctx((unsigned int *)&v408);
        *(void *)(a1 + 1184) = v179;
        if (!v179)
        {
LABEL_29:
          __si_set_error_str(1, "%s:%u: %s", v30, v31, v32, v33, v34, v35, (char)"SpotlightIndex.c");
          goto LABEL_30;
        }
        *(_DWORD *)std::string __str = 0;
        CFNumberRef v180 = (const __CFNumber *)SICopyProperty(a1, @"kSINextIndexId");
        uint64_t v181 = v391;
        if (v180)
        {
          CFNumberRef v182 = v180;
          CFTypeID v183 = CFGetTypeID(v180);
          if (v183 == CFNumberGetTypeID()) {
            CFNumberGetValue(v182, kCFNumberSInt32Type, __str);
          }
          CFRelease(v182);
        }
        if (*(_DWORD *)__str > *(_DWORD *)(a1 + 1448)) {
          *(_DWORD *)(a1 + 1448) = *(_DWORD *)__str;
        }
        db_datastore_set_bg_assertion_flag(*(void *)(a1 + 1184), *v389);
        if (!v50) {
          goto LABEL_305;
        }
        if (*(unsigned char *)(a1 + 2475) == 2)
        {
          _si_dump_index_state(a1, 2);
          if (*(unsigned char *)(a1 + 2475) == 2)
          {
            long long v360 = __si_assert_copy_extra_625(-1);
            long long v361 = v360;
            long long v362 = "";
            if (v360) {
              long long v362 = v360;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 10643, "s->directory_state!=kSIIndexStateFastFlush", v362);
LABEL_415:
            free(v361);
            if (__valid_fs(-1)) {
              uint64_t v367 = 2989;
            }
            else {
              uint64_t v367 = 3072;
            }
            *(_DWORD *)uint64_t v367 = -559038737;
            abort();
          }
        }
        int v184 = *__error();
        CFTypeID v185 = _SILogForLogForCategory(6);
        os_log_type_t v186 = 2 * (dword_1E9FC90BC < 4);
        if (os_log_type_enabled(v185, v186))
        {
          int v187 = *(unsigned __int8 *)(a1 + 2475);
          int v188 = *(unsigned __int8 *)(a1 + 2473);
          if (*(unsigned char *)(a1 + 2475)) {
            int v189 = *(unsigned __int8 *)(a1 + 2475);
          }
          else {
            int v189 = *(unsigned __int8 *)(a1 + 2473);
          }
          *(_DWORD *)std::string __str = 67109632;
          *(_DWORD *)&__str[4] = v189;
          *(_WORD *)&__str[8] = 1024;
          *(_DWORD *)&__str[10] = v187;
          *(_WORD *)&__str[14] = 1024;
          *(_DWORD *)&_OWORD __str[16] = v188;
          _os_log_impl(&dword_1BD672000, v185, v186, "Update reverse store with state: %d (%d, %d)", (uint8_t *)__str, 0x14u);
        }
        *__error() = v184;
        int v190 = *(unsigned __int8 *)(a1 + 2475);
        if (!*(unsigned char *)(a1 + 2475)) {
          int v190 = *(unsigned __int8 *)(a1 + 2473);
        }
        int v191 = reverseStoreUpdateState(*(unsigned int *)(a1 + 32), v190, &v411);
        int v192 = v191;
        LODWORD(v77) = v390;
        uint64_t v51 = v388;
        if (v379 && v191 == 2)
        {
          int v193 = *__error();
          unsigned int v194 = _SILogForLogForCategory(6);
          if (os_log_type_enabled(v194, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __str = 136315394;
            *(void *)&__str[4] = "_SIOpenIndexFilesWithState";
            *(_WORD *)&__str[12] = 1024;
            *(_DWORD *)&__str[14] = 10650;
            _os_log_error_impl(&dword_1BD672000, v194, OS_LOG_TYPE_ERROR, "%s:%d: Ignoring missing path store", (uint8_t *)__str, 0x12u);
          }
          *__error() = v193;
          *(void *)(a1 + 6616) = createReverseStore(*(_DWORD *)(a1 + 32), "", v417);
          goto LABEL_305;
        }
        if (v191)
        {
          int v231 = *__error();
          uint64_t v232 = _SILogForLogForCategory(11);
          if (os_log_type_enabled(v232, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __str = 136315650;
            *(void *)&__str[4] = "_SIOpenIndexFilesWithState";
            *(_WORD *)&__str[12] = 1024;
            *(_DWORD *)&__str[14] = 10655;
            *(_WORD *)&__str[18] = 1024;
            *(_DWORD *)&__str[20] = v192;
            _os_log_error_impl(&dword_1BD672000, v232, OS_LOG_TYPE_ERROR, "%s:%d: reverseStoreUpdateState err:%d", (uint8_t *)__str, 0x18u);
          }
          *__error() = v231;
          bzero(__str, 0x400uLL);
          snprintf(__str, 0x400uLL, "reverseStoreUpdateState err %d", v192);
          goto LABEL_29;
        }
        int v247 = v411;
        if (v411 != *(unsigned __int8 *)(a1 + 2475))
        {
          int v248 = *__error();
          uint64_t v249 = _SILogForLogForCategory(6);
          os_log_type_t v250 = 2 * (dword_1E9FC90BC < 4);
          if (os_log_type_enabled(v249, v250))
          {
            *(_DWORD *)std::string __str = 67109120;
            *(_DWORD *)&__str[4] = v247;
            _os_log_impl(&dword_1BD672000, v249, v250, "Got reverse store with state: %d", (uint8_t *)__str, 8u);
          }
          *__error() = v248;
          *(unsigned char *)(a1 + 2475) = v247;
          int v256 = si_write_index_state(a1, 0, 0, v251, v252, v253, v254, v255);
          if (v256)
          {
            int v257 = v256;
            int v258 = *__error();
            long long v259 = _SILogForLogForCategory(11);
            if (os_log_type_enabled(v259, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string __str = 136315650;
              *(void *)&__str[4] = "_SIOpenIndexFilesWithState";
              *(_WORD *)&__str[12] = 1024;
              *(_DWORD *)&__str[14] = 10666;
              *(_WORD *)&__str[18] = 1024;
              *(_DWORD *)&__str[20] = v257;
              _os_log_error_impl(&dword_1BD672000, v259, OS_LOG_TYPE_ERROR, "%s:%d: si_write_index_state err:%d", (uint8_t *)__str, 0x18u);
            }
            *__error() = v258;
            bzero(__str, 0x400uLL);
            snprintf(__str, 0x400uLL, "si_write_index_state err %d", v257);
            goto LABEL_29;
          }
        }
        uint64_t v419 = 0;
        int v260 = check_crash_state(*(_DWORD *)(a1 + 32), 0, a5, &v419, 2);
        bzero(__str, 0x400uLL);
        int v261 = *__error();
        int v262 = _SILogForLogForCategory(0);
        os_log_type_t v263 = 2 * (gSILogLevels[0] < 4);
        if (os_log_type_enabled(v262, v263))
        {
          uint64_t v264 = v419;
          int v265 = fcntl(*(_DWORD *)(a1 + 32), 50, __str);
          if (__str[0]) {
            BOOL v266 = v265 < 0;
          }
          else {
            BOOL v266 = 1;
          }
          if (v266) {
            uint64_t v267 = 0;
          }
          else {
            uint64_t v267 = __str;
          }
          *(_DWORD *)long long buf = 134218242;
          int v425 = (const char *)v264;
          __int16 v426 = 2080;
          *(void *)&long long v427 = v267;
          _os_log_impl(&dword_1BD672000, v262, v263, "rs last_crash_delta: %ld for %s", buf, 0x16u);
        }
        *__error() = v261;
        int v268 = openReverseStore(*(_DWORD *)(a1 + 32), v260, 0, 0, *(_DWORD **)(a1 + 6584), (uint64_t)&v412, v417);
        *(void *)(a1 + 6616) = v268;
        if (!v268) {
          *a9 |= 1u;
        }
        LODWORD(v77) = v390;
        uint64_t v51 = v388;
        uint64_t v181 = v391;
LABEL_305:
        updateMetaInfoForState(v380, v382, v77);
        if (v382)
        {
          uint64_t v269 = 0;
          while (1)
          {
            uint64_t v270 = a1 + v269;
            uint64_t v271 = *(unsigned __int8 *)(a1 + v269 + 2480);
            if (!*(unsigned char *)(a1 + v269 + 2480)) {
              uint64_t v271 = *(unsigned __int8 *)(a1 + 2473);
            }
            int v272 = ContentIndexUpdateState(*(unsigned int *)(a1 + 32), *(unsigned int *)(a1 + 1276), v51, v181, v378, 0, v269, v271, &v411);
            if (v272)
            {
              int v289 = v272;
              int v290 = *__error();
              int v291 = _SILogForLogForCategory(11);
              if (!os_log_type_enabled(v291, OS_LOG_TYPE_ERROR)) {
                goto LABEL_331;
              }
              *(_DWORD *)std::string __str = 136315906;
              *(void *)&__str[4] = "_SIOpenIndexFilesWithState";
              *(_WORD *)&__str[12] = 1024;
              *(_DWORD *)&__str[14] = 10707;
              *(_WORD *)&__str[18] = 2048;
              *(void *)&__str[20] = a1;
              *(_WORD *)&__str[28] = 1024;
              *(_DWORD *)&__str[30] = v289;
              int v292 = "%s:%d: %p ContentIndexUpdateState err:%d";
              goto LABEL_330;
            }
            if (*(unsigned __int8 *)(v270 + 2480) != v411)
            {
              *(unsigned char *)(v270 + 2480) = v411;
              int v278 = si_write_index_state(a1, 0, 0, v273, v274, v275, v276, v277);
              if (v278) {
                break;
              }
            }
            ++v269;
            uint64_t v51 = v388;
            if (v382 == v269) {
              goto LABEL_313;
            }
          }
          int v294 = v278;
          int v290 = *__error();
          int v291 = _SILogForLogForCategory(11);
          if (!os_log_type_enabled(v291, OS_LOG_TYPE_ERROR)) {
            goto LABEL_331;
          }
          *(_DWORD *)std::string __str = 136315906;
          *(void *)&__str[4] = "_SIOpenIndexFilesWithState";
          *(_WORD *)&__str[12] = 1024;
          *(_DWORD *)&__str[14] = 10714;
          *(_WORD *)&__str[18] = 2048;
          *(void *)&__str[20] = a1;
          *(_WORD *)&__str[28] = 1024;
          *(_DWORD *)&__str[30] = v294;
          int v292 = "%s:%d: %p si_write_index_state err:%d";
LABEL_330:
          _os_log_error_impl(&dword_1BD672000, v291, OS_LOG_TYPE_ERROR, v292, (uint8_t *)__str, 0x22u);
LABEL_331:
          *__error() = v290;
        }
        else
        {
LABEL_313:
          if (v390)
          {
            uint64_t v279 = 0;
            uint64_t v280 = v377 + a1 + 2480;
            while (1)
            {
              uint64_t v281 = *(unsigned __int8 *)(v280 + v279);
              if (!*(unsigned char *)(v280 + v279)) {
                uint64_t v281 = *(unsigned __int8 *)(a1 + 2473);
              }
              int v282 = ContentIndexUpdateState(*(unsigned int *)(a1 + 32), *(unsigned int *)(a1 + 1276), v51, v181, v378, 1, v279, v281, &v411);
              if (v282)
              {
                int v293 = v282;
                int v290 = *__error();
                int v291 = _SILogForLogForCategory(11);
                if (!os_log_type_enabled(v291, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_331;
                }
                *(_DWORD *)std::string __str = 136315906;
                *(void *)&__str[4] = "_SIOpenIndexFilesWithState";
                *(_WORD *)&__str[12] = 1024;
                *(_DWORD *)&__str[14] = 10724;
                *(_WORD *)&__str[18] = 2048;
                *(void *)&__str[20] = a1;
                *(_WORD *)&__str[28] = 1024;
                *(_DWORD *)&__str[30] = v293;
                int v292 = "%s:%d: %p ContentIndexUpdateState err:%d";
                goto LABEL_330;
              }
              if (*(unsigned __int8 *)(v280 + v279) != v411)
              {
                *(unsigned char *)(v280 + v279) = v411;
                int v288 = si_write_index_state(a1, 0, 0, v283, v284, v285, v286, v287);
                if (v288) {
                  break;
                }
              }
              ++v279;
              uint64_t v51 = v388;
              if (v390 == v279) {
                goto LABEL_332;
              }
            }
            int v295 = v288;
            int v290 = *__error();
            int v291 = _SILogForLogForCategory(11);
            if (!os_log_type_enabled(v291, OS_LOG_TYPE_ERROR)) {
              goto LABEL_331;
            }
            *(_DWORD *)std::string __str = 136315906;
            *(void *)&__str[4] = "_SIOpenIndexFilesWithState";
            *(_WORD *)&__str[12] = 1024;
            *(_DWORD *)&__str[14] = 10731;
            *(_WORD *)&__str[18] = 2048;
            *(void *)&__str[20] = a1;
            *(_WORD *)&__str[28] = 1024;
            *(_DWORD *)&__str[30] = v295;
            int v292 = "%s:%d: %p si_write_index_state err:%d";
            goto LABEL_330;
          }
        }
LABEL_332:
        int v296 = *(_DWORD *)(a1 + 1448);
        v396[0] = MEMORY[0x1E4F143A8];
        v396[1] = 0x40000000;
        v396[2] = ___SIOpenIndexFilesWithState_block_invoke_856;
        v396[3] = &__block_descriptor_tmp_857;
        v396[4] = a1;
        _si_next_index_id((os_unfair_lock_s *)a1, (v382 + v390), 0, 1);
        v395[0] = MEMORY[0x1E4F143A8];
        v395[1] = 0x40000000;
        v395[2] = ___SIOpenIndexFilesWithState_block_invoke_2_858;
        v395[3] = &__block_descriptor_tmp_859;
        v395[4] = a1;
        uint64_t v297 = *(void *)(a1 + 1384);
        uint64_t v298 = *(void *)(a1 + 1376);
        uint64_t v299 = *(void *)(a1 + 6584);
        int v300 = *(int **)(a1 + 1184);
        if (v300) {
          int v300 = (int *)db_get_vector_store(v300);
        }
        int v36 = ContentIndexOpenBulk((uint64_t)v380, a8, v297, v298, v375 | 6, v299, (uint64_t)v374, (uint64_t)a7, (uint64_t)v300, (uint64_t)v396, v395);
        if (v36 < 0)
        {
          *(_DWORD *)(a1 + 1448) = v296;
          int v320 = *__error();
          if (v320) {
            int v321 = v320;
          }
          else {
            int v321 = -1;
          }
          bzero(__str, 0x400uLL);
          snprintf(__str, 0x400uLL, "ContentIndexOpenBulk err %d, %d", v36, v321);
LABEL_353:
          __si_set_error_str(0, "%s:%u: %s", v241, v242, v243, v244, v245, v246, (char)"SpotlightIndex.c");
          goto LABEL_31;
        }
        int v236 = *__error();
        int v301 = _SILogForLogForCategory(11);
        os_log_type_t v302 = 2 * (dword_1E9FC90D0 < 4);
        if (os_log_type_enabled(v301, v302))
        {
          uint64_t v303 = *(void *)(a1 + 2400);
          *(_DWORD *)std::string __str = 134218240;
          *(void *)&__str[4] = a1;
          *(_WORD *)&__str[12] = 2048;
          *(void *)&__str[14] = v303;
          _os_log_impl(&dword_1BD672000, v301, v302, "opened index %p with recovery time is %llu)", (uint8_t *)__str, 0x16u);
        }
        uint64_t v77 = v390;
        int v240 = a2;
        unsigned int v50 = v378;
LABEL_338:
        *__error() = v236;
        if ((v240 == 1) | v47 & 1) {
          int v36 = 2;
        }
        if (!*(_DWORD *)(*(void *)(a1 + 1376) + 8))
        {
          uint64_t v309 = *(void *)(a1 + 1384);
          int v310 = *(_DWORD *)(*(void *)(*(void *)v309 + 8 * (*(_DWORD *)(v309 + 8) - 1)) + 40);
          v394[0] = MEMORY[0x1E4F143A8];
          v394[1] = 0x40000000;
          v394[2] = ___SIOpenIndexFilesWithState_block_invoke_861;
          v394[3] = &__block_descriptor_tmp_862;
          v394[4] = a1;
          uint64_t v311 = *(unsigned int *)(a1 + 32);
          uint64_t v312 = *(void *)(*(void *)v309 + 8 * (*(_DWORD *)(v309 + 8) - 1));
          LODWORD(v313) = *(_DWORD *)(v312 + 68);
          uint64_t v314 = *(void *)(v312 + 80);
          uint64_t v313 = v313 >= 2 ? v313 : 0;
          uint64_t v315 = v314 + v313;
          int v316 = v310 ? v310 + 1 : 2;
          int v317 = *(_DWORD *)(a1 + 1276);
          long long v318 = *(int **)(a1 + 1184);
          uint64_t v319 = v318 ? db_get_vector_store(v318) : 0;
          v393[0] = MEMORY[0x1E4F143A8];
          v393[1] = 0x40000000;
          v393[2] = ___SIOpenIndexFilesWithState_block_invoke_2_863;
          v393[3] = &__block_descriptor_tmp_864;
          v393[4] = a1;
          uint64_t New = ContentIndexCreateNew(v311, @"tmp.", v315, v316, v375, 1, v317, v319, (uint64_t)v393, v394, *(_DWORD *)(a1 + 60));
          unsigned int v50 = v378;
          if (New)
          {
            uint64_t v323 = New;
            *(_DWORD *)long long buf = 0;
            aBlock[0] = MEMORY[0x1E4F143A8];
            aBlock[1] = 0x40000000;
            aBlock[2] = ___SIOpenIndexFilesWithState_block_invoke_3;
            aBlock[3] = &__block_descriptor_tmp_865;
            aBlock[4] = a1;
            void aBlock[5] = New;
            ContentIndexSetDirtyCallback(New, aBlock);
            *(unsigned char *)(v323 + 15201) = 4;
            uint64_t v431 = 0;
            long long v430 = 0u;
            memset(__str, 0, sizeof(__str));
            ContentIndexSyncIndex(v323, (uint64_t)__str, (uint64_t)buf);
            bzero(&__str[8], 0x208uLL);
            *(void *)std::string __str = 0x6D6F76650A00;
            *(_DWORD *)&__str[8] = 2;
            __str[12] = 1;
            *(_DWORD *)&__str[28] = 1;
            ContentIndexListAppend(*(void *)(a1 + 1376), v323);
            si_clone_index_metadata_to_inflight(a1);
            uint64_t v77 = v390;
            __strlcpy_chk();
            int v324 = si_openat_protected(*(unsigned int *)(a1 + 32), "tmp.movePlan", 1538, 3);
            pwrite(v324, __str, 0x210uLL, 0);
            fcntl(v324, 85);
            ContentIndexChangePrefix(v323);
            unlinkat(*(_DWORD *)(a1 + 32), "tmp.movePlan", 2048);
            int v325 = v324;
            unsigned int v50 = v378;
            close(v325);
          }
        }
        uint64_t v326 = *(void *)(a1 + 1376);
        int v327 = *(_DWORD *)(v326 + 8);
        uint64_t v328 = v382;
        if (!v327) {
          goto LABEL_370;
        }
        int v329 = *(_DWORD *)(*(void *)(*(void *)v326 + 8 * (v327 - 1)) + 4);
        if (!db_uses_stringmap(*(void *)(a1 + 1184))) {
          goto LABEL_364;
        }
        if ((v329 - 95) < 4)
        {
          ContentIndexListsApply(*(void *)(a1 + 1384), *(void *)(a1 + 1376), (uint64_t)*(&off_1E6342B68 + (v329 - 95)));
          goto LABEL_364;
        }
        if ((db_corespotlight_store(*(void *)(a1 + 1184)) & 1) == 0 && (v329 - 99) >= 2 && v329 != 102)
        {
          long long v368 = __si_assert_copy_extra_625(-1);
          long long v361 = v368;
          long long v369 = "";
          if (v368) {
            long long v369 = v368;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 10830, "db_corespotlight_store(newIndex->store) || version == 99 || version == 100 || version == 102", v369);
          goto LABEL_415;
        }
LABEL_364:
        int v330 = *(_DWORD *)(*(void *)(**(void **)(a1 + 1376)
                                     + 8 * (*(_DWORD *)(*(void *)(a1 + 1376) + 8) - 1))
                         + 4);
        if (db_uses_stringmap(*(void *)(a1 + 1184)))
        {
          if ((v330 - 95) < 4)
          {
            ContentIndexListsApply(*(void *)(a1 + 1384), *(void *)(a1 + 1376), (uint64_t)*(&off_1E6342B88 + (v330 - 95)));
            goto LABEL_370;
          }
          if ((db_corespotlight_store(*(void *)(a1 + 1184)) & 1) == 0
            && (v330 - 99) >= 2
            && v330 != 102)
          {
            long long v370 = __si_assert_copy_extra_625(-1);
            long long v361 = v370;
            long long v371 = "";
            if (v370) {
              long long v371 = v370;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 10848, "db_corespotlight_store(newIndex->store) || version == 99 || version == 100 || version == 102", v371);
            goto LABEL_415;
          }
        }
LABEL_370:
        int v331 = *(unsigned __int8 *)(a1 + 2474) == 4;
        if (*(unsigned char *)(a1 + 2474) == 4 && v50) {
          int v331 = *(unsigned __int8 *)(a1 + 2475) == 4;
        }
        if (v36)
        {
          if (v36 == 2)
          {
            uint64_t v332 = *(void *)(a1 + 1384);
            uint64_t v333 = *(unsigned int *)(v332 + 8);
            if (v333)
            {
              int v334 = *(uint64_t **)v332;
              do
              {
                uint64_t v335 = *v334++;
                *(unsigned char *)(v335 + 15201) = 4;
                --v333;
              }
              while (v333);
            }
            uint64_t v336 = *(void *)(a1 + 1376);
            uint64_t v337 = *(unsigned int *)(v336 + 8);
            if (v337)
            {
              __int16 v338 = *(uint64_t **)v336;
              do
              {
                uint64_t v339 = *v338++;
                *(unsigned char *)(v339 + 15201) = 4;
                --v337;
              }
              while (v337);
            }
          }
          goto LABEL_390;
        }
        uint64_t v340 = *(void *)(a1 + 1384);
        if (v382 != *(_DWORD *)(v340 + 8))
        {
          unsigned int v363 = __si_assert_copy_extra_625(-1);
          long long v361 = v363;
          long long v364 = "";
          if (v363) {
            long long v364 = v363;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 10867, "scanCount == newIndex->syncSet->indexCount", v364);
          goto LABEL_415;
        }
        uint64_t v341 = *(void *)(a1 + 1376);
        __int16 v342 = (unsigned __int8 *)(a1 + 2480);
        if (*(_DWORD *)(v341 + 8) != v77)
        {
          long long v365 = __si_assert_copy_extra_625(-1);
          long long v361 = v365;
          long long v366 = "";
          if (v365) {
            long long v366 = v365;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 10868, "liveCount == newIndex->liveSet->indexCount", v366);
          goto LABEL_415;
        }
        if (v382)
        {
          int v343 = *(uint64_t **)v340;
          do
          {
            int v345 = *v342++;
            char v344 = v345;
            int v331 = (v345 == 4) & v331;
            uint64_t v346 = *v343++;
            *(unsigned char *)(v346 + 15201) = v344;
            --v328;
          }
          while (v328);
        }
        if (v77)
        {
          CFNumberRef v347 = *(uint64_t **)v341;
          uint64_t v348 = (unsigned __int8 *)(v377 + a1 + 2480);
          do
          {
            int v350 = *v348++;
            char v349 = v350;
            int v331 = (v350 == 4) & v331;
            uint64_t v351 = *v347++;
            *(unsigned char *)(v351 + 15201) = v349;
            --v77;
          }
          while (v77);
        }
LABEL_390:
        if (v331 && *(unsigned char *)(a1 + 2473) != 4)
        {
          *(unsigned char *)(a1 + 2473) = 4;
          si_write_index_state(a1, 0, 0, v304, v305, v306, v307, v308);
        }
LABEL_42:
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
        uint64_t v413 = 0;
        uint64_t v412 = 0;
        free(v415);
        if (v36 < 0) {
          return 0xFFFFFFFFLL;
        }
        else {
          return v36;
        }
      case 2:
        int v62 = update_db_header(v53);
        if (v62) {
          goto LABEL_85;
        }
        int v66 = 2;
        goto LABEL_67;
      case 3:
        int v62 = update_db_header(v53);
        if (v62) {
          goto LABEL_85;
        }
        if ((copyFileFallback(v53, __str, v53, "store.db", &v418, 1, 1) & 1) == 0)
        {
          int v73 = *__error();
          if (v73) {
            int v62 = v73;
          }
          else {
            int v62 = -1;
          }
          goto LABEL_85;
        }
        uint64_t v65 = v53;
LABEL_63:
        int v62 = update_db_header(v65);
        if (!v62) {
          goto LABEL_64;
        }
        goto LABEL_85;
      case 4:
        uint64_t v65 = v53;
        goto LABEL_63;
      default:
        goto LABEL_88;
    }
  }
}

uint64_t handleDirStoreOverlay(uint64_t a1)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  int v2 = (atomic_uint *)fd_create_protected(*(_DWORD *)(a1 + 32), "dirStore.overlay", 0, 0);
  if (!v2) {
    return 0;
  }
  int v3 = v2;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  uint64_t v65 = 0;
  int v4 = _fd_acquire_fd((uint64_t)v2, &v65);
  memset(&v64, 0, sizeof(v64));
  int v5 = fstat(v4, &v64);
  if (v5 == -1 || !v64.st_size)
  {
    if (v5 == -1) {
      uint64_t v11 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v11 = 0;
    }
    _fd_release_fd(v3, v4, 0, v65);
    goto LABEL_89;
  }
  _fd_release_fd(v3, v4, 0, v65);
  if (!store_stream_init((uint64_t)&v66, v3, 0))
  {
    uint64_t v11 = 0xFFFFFFFFLL;
LABEL_89:
    fd_release(v3);
    return v11;
  }
  for (uint64_t i = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
        ;
        CFSetAddValue(i, (const void *)*(int *)(*(void *)(*(void *)v8 + 8 * (vint32_671 - 1)) + 56)))
  {
    unsigned int vint32_671 = store_stream_read_vint32_671((uint64_t)&v66);
    if (!vint32_671) {
      break;
    }
    uint64_t v8 = *(void *)(a1 + 1384);
    if (vint32_671 > *(_DWORD *)(v8 + 8))
    {
LABEL_91:
      uint64_t v11 = 0xFFFFFFFFLL;
      goto LABEL_92;
    }
  }
  while (1)
  {
    unsigned int v10 = store_stream_read_vint32_671((uint64_t)&v66);
    if (!v10) {
      break;
    }
    uint64_t v9 = *(void *)(a1 + 1376);
    if (v10 > *(_DWORD *)(v9 + 8)) {
      goto LABEL_91;
    }
    CFSetAddValue(i, (const void *)*(int *)(*(void *)(*(void *)v9 + 8 * (v10 - 1)) + 56));
  }
  uint64_t v11 = v67;
  if (!v67)
  {
    int v58 = v3;
    int v12 = 0;
    while (1)
    {
      uint64_t v13 = store_stream_read_vint32_671((uint64_t)&v66);
      int v14 = v13;
      if (!v13 || (int)v13 > 512) {
        break;
      }
      MEMORY[0x1F4188790](v13);
      uint64_t v16 = (uint64_t *)&v52[-v15];
      bzero(&v52[-v15], v17);
      int v63 = v52;
      if (v14 >= 1)
      {
        uint64_t v18 = 0;
        size_t v19 = *((void *)&v68 + 1);
        do
        {
          if ((unint64_t)v68 - v19 < 0xB)
          {
            int v24 = 0;
            uint64_t v21 = 0;
            char __dst = 0;
            int v61 = (char *)v69;
            while (1)
            {
              if (v19 + 1 > (unint64_t)v68)
              {
                size_t v57 = v68;
                unint64_t v62 = 0;
                LODWORD(v55) = v66;
                p_dst = &__dst;
                off_t v60 = *((void *)&v67 + 1);
                size_t v26 = 1;
                while (1)
                {
                  size_t v56 = v57 - v19;
                  if (v57 != v19) {
                    memcpy(p_dst, &v61[v19], v56);
                  }
                  unint64_t v27 = prot_pread(v55, v61, v57, v60);
                  if (v27 == -1)
                  {
                    size_t v19 = v57;
                    *(void *)&long long v68 = v57;
                    *((void *)&v68 + 1) = v57;
                    *((void *)&v67 + 1) = v60;
                    size_t v26 = 0;
                    LODWORD(v67) = *__error();
                    goto LABEL_30;
                  }
                  v60 += v27;
                  size_t v19 = 0;
                  if (!v27) {
                    break;
                  }
                  p_dst += v56;
                  v26 -= v56;
                  v62 += v56;
                  size_t v57 = v27;
                  if (v26 <= v27)
                  {
                    size_t v19 = 0;
                    *((void *)&v67 + 1) = v60;
                    *(void *)&long long v68 = v27;
                    os_log_type_t v25 = p_dst;
                    goto LABEL_29;
                  }
                }
                long long v68 = 0uLL;
                *((void *)&v67 + 1) = v60;
                size_t v26 = v56;
              }
              else
              {
                unint64_t v62 = 0;
                os_log_type_t v25 = &__dst;
                size_t v26 = 1;
LABEL_29:
                memcpy(v25, &v61[v19], v26);
                v19 += v26;
                *((void *)&v68 + 1) = v19;
              }
LABEL_30:
              if (v26 + v62 != 1) {
                break;
              }
              v21 |= (unint64_t)(__dst & 0x7F) << v24;
              v24 += 7;
              if ((__dst & 0x80) == 0) {
                goto LABEL_24;
              }
            }
            uint64_t v21 = 0;
          }
          else
          {
            uint64_t v20 = 0;
            uint64_t v21 = 0;
            do
            {
              char v22 = *(unsigned char *)(v69 + v19++);
              v21 |= (unint64_t)(v22 & 0x7F) << v20;
              if ((v22 & 0x80) == 0) {
                break;
              }
              BOOL v23 = v20 == 63;
              v20 += 7;
            }
            while (!v23);
            *((void *)&v68 + 1) = v19;
          }
LABEL_24:
          v16[v18++] = v21;
        }
        while (v18 != v14);
      }
      uint64_t v28 = store_stream_read_vint32_671((uint64_t)&v66);
      int v12 = v28;
      if ((int)v28 >= 513) {
        break;
      }
      MEMORY[0x1F4188790](v28);
      uint64_t v30 = &v52[-v29];
      bzero(&v52[-v29], v31);
      if (v12 >= 1)
      {
        uint64_t v32 = 0;
        size_t v33 = *((void *)&v68 + 1);
        do
        {
          if ((unint64_t)v68 - v33 < 0xB)
          {
            off_t v60 = 0;
            uint64_t v35 = 0;
            char __dst = 0;
            p_dst = (char *)v69;
            while (1)
            {
              if (v33 + 1 > (unint64_t)v68)
              {
                size_t v55 = v68;
                int v61 = 0;
                unsigned int v53 = v66;
                size_t v56 = (size_t)&__dst;
                size_t v57 = *((void *)&v67 + 1);
                unint64_t v62 = 1;
                while (1)
                {
                  size_t v54 = v55 - v33;
                  if (v55 != v33) {
                    memcpy((void *)v56, &p_dst[v33], v54);
                  }
                  unint64_t v40 = prot_pread(v53, p_dst, v55, v57);
                  if (v40 == -1)
                  {
                    size_t v33 = v55;
                    *(void *)&long long v68 = v55;
                    *((void *)&v68 + 1) = v55;
                    *((void *)&v67 + 1) = v57;
                    uint64_t v41 = __error();
                    size_t v39 = 0;
                    LODWORD(v67) = *v41;
                    goto LABEL_59;
                  }
                  v57 += v40;
                  size_t v33 = 0;
                  if (!v40) {
                    break;
                  }
                  v56 += v54;
                  v61 += v54;
                  size_t v55 = v40;
                  v62 -= v54;
                  if (v62 <= v40)
                  {
                    size_t v33 = 0;
                    *((void *)&v67 + 1) = v57;
                    *(void *)&long long v68 = v40;
                    int v37 = (char *)v56;
                    size_t v38 = v62;
                    goto LABEL_58;
                  }
                }
                long long v68 = 0uLL;
                *((void *)&v67 + 1) = v57;
                size_t v39 = v54;
              }
              else
              {
                int v61 = 0;
                int v37 = &__dst;
                size_t v38 = 1;
LABEL_58:
                unint64_t v62 = v38;
                memcpy(v37, &p_dst[v33], v38);
                size_t v39 = v62;
                v33 += v62;
                *((void *)&v68 + 1) = v33;
              }
LABEL_59:
              if (&v61[v39] != (char *)1) {
                break;
              }
              v35 |= (unint64_t)(__dst & 0x7F) << v60;
              off_t v60 = (v60 + 7);
              if ((__dst & 0x80) == 0) {
                goto LABEL_53;
              }
            }
            uint64_t v35 = 0;
          }
          else
          {
            uint64_t v34 = 0;
            uint64_t v35 = 0;
            do
            {
              char v36 = *(unsigned char *)(v69 + v33++);
              v35 |= (unint64_t)(v36 & 0x7F) << v34;
              if ((v36 & 0x80) == 0) {
                break;
              }
              BOOL v23 = v34 == 63;
              v34 += 7;
            }
            while (!v23);
            *((void *)&v68 + 1) = v33;
          }
LABEL_53:
          *(void *)&v30[8 * v32++] = v35;
        }
        while (v32 != v12);
      }
      uint64_t v42 = *(void *)(a1 + 1384);
      if (*(_DWORD *)(v42 + 8))
      {
        unint64_t v43 = 0;
        do
        {
          if (CFSetContainsValue(i, (const void *)*(int *)(*(void *)(*(void *)v42 + 8 * v43) + 56))) {
            _CIMoveDirectory(*(void *)(**(void **)(a1 + 1384) + 8 * v43), v14, v16, v12, (uint64_t)v30);
          }
          ++v43;
          uint64_t v42 = *(void *)(a1 + 1384);
        }
        while (v43 < *(unsigned int *)(v42 + 8));
      }
      uint64_t v44 = *(void *)(a1 + 1376);
      if (*(_DWORD *)(v44 + 8))
      {
        unint64_t v45 = 0;
        do
        {
          if (CFSetContainsValue(i, (const void *)*(int *)(*(void *)(*(void *)v44 + 8 * v45) + 56))) {
            _CIMoveDirectory(*(void *)(**(void **)(a1 + 1376) + 8 * v45), v14, v16, v12, (uint64_t)v30);
          }
          ++v45;
          uint64_t v44 = *(void *)(a1 + 1376);
        }
        while (v45 < *(unsigned int *)(v44 + 8));
      }
    }
    unsigned int v47 = v67;
    store_stream_destroy((uint64_t)&v66);
    if (v14 > 512 || v12 > 512 || v47)
    {
      uint64_t v48 = *(void *)(a1 + 1384);
      if (*(_DWORD *)(v48 + 8))
      {
        unint64_t v49 = 0;
        do
        {
          if (CFSetContainsValue(i, (const void *)*(int *)(*(void *)(*(void *)v48 + 8 * v49) + 56))) {
            _CIMakeInvalid(*(void *)(**(void **)(a1 + 1384) + 8 * v49));
          }
          ++v49;
          uint64_t v48 = *(void *)(a1 + 1384);
        }
        while (v49 < *(unsigned int *)(v48 + 8));
      }
      uint64_t v50 = *(void *)(a1 + 1376);
      int v3 = v58;
      if (*(_DWORD *)(v50 + 8))
      {
        unint64_t v51 = 0;
        do
        {
          if (CFSetContainsValue(i, (const void *)*(int *)(*(void *)(*(void *)v50 + 8 * v51) + 56))) {
            _CIMakeInvalid(*(void *)(**(void **)(a1 + 1376) + 8 * v51));
          }
          ++v51;
          uint64_t v50 = *(void *)(a1 + 1376);
        }
        while (v51 < *(unsigned int *)(v50 + 8));
      }
      if (v47) {
        uint64_t v11 = v47;
      }
      else {
        uint64_t v11 = 0xFFFFFFFFLL;
      }
    }
    else
    {
      uint64_t v11 = 0;
      int v3 = v58;
    }
  }
LABEL_92:
  fd_release(v3);
  if (i) {
    CFRelease(i);
  }
  return v11;
}

uint64_t handleIndexRepair(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a2 + 40) || !(*(void *)(a1 + 2400) | a3)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(void *)(a1 + 2400);
  v58[0] = v6;
  v58[1] = a3;
  uint64_t v59 = 0;
  uint64_t v60 = v5;
  uint64_t v61 = *(void *)(a2 + 144);
  uint64_t v62 = 0;
  if (*(unsigned char *)(a1 + 2064))
  {
    int v7 = *(_DWORD *)(a1 + 32);
    uint64_t v8 = *(int **)(a1 + 1184);
    uint64_t v9 = malloc_type_calloc(1uLL, 0x38uLL, 0x1060040EBC759B4uLL);
    if (fcntl(v7, 63) == 1) {
      unsigned __int8 v10 = 2;
    }
    else {
      unsigned __int8 v10 = 0;
    }
    void *v9 = fd_create_protected(v7, "journalRepair.1", 536872450, v10);
    v9[1] = v8;
    *((_DWORD *)v9 + 4) = db_get_id_for_field(v8, "_kMDItemGroupId");
    *((_DWORD *)v9 + 5) = db_get_id_for_field(v8, "_kMDItemBundleID");
    *((_DWORD *)v9 + 6) = db_get_id_for_field(v8, "_kMDItemExternalID");
    uint64_t v6 = *(void *)(a1 + 2400);
    int v12 = v9;
  }
  else
  {
    int v12 = 0;
  }
  uint64_t v13 = *(int **)(a1 + 1184);
  int v63 = v12;
  stat v64 = v13;
  if (v6)
  {
    if (a3)
    {
      int v14 = db_clear_docids_setup(v13);
      char v57 = 0;
      int v15 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
      unint64_t v16 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v15);
      LODWORD(v52) = HIDWORD(v16);
      *(_DWORD *)long long buf = v16;
      unint64_t v56 = __PAIR64__(v17, v18);
      uint64_t v19 = *(void *)&threadData[18 * v16 + 2];
      uint64_t v20 = v19 + 320 * HIDWORD(v16);
      int v21 = *(_DWORD *)(v20 + 312);
      char v22 = *(void (**)(void))(v20 + 224);
      if (v22) {
        v22(*(void *)(v19 + 320 * HIDWORD(v16) + 288));
      }
      unsigned int v55 = *(_DWORD *)buf;
      unsigned int v54 = v52;
      unint64_t v53 = v56;
      if (_setjmp((int *)v20))
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          LOWORD(valuePtr[0]) = 0;
          _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", (uint8_t *)valuePtr, 2u);
        }
        *(_DWORD *)(v20 + 312) = v21;
        CIOnThreadCleanUpReset(v53);
        dropThreadId(v55, 1, v15);
        CICleanUpReset(v55, HIDWORD(v53));
        unsigned int v23 = 0;
      }
      else
      {
        db_set_host(*(int **)(a1 + 1184), a1);
        unint64_t v27 = *(int **)(a1 + 1184);
        if (*v27 != 1685287992)
        {
          int v46 = *__error();
          unsigned int v47 = _SILogForLogForCategory(4);
          if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
          {
            int v48 = *v27;
            LODWORD(valuePtr[0]) = 136315650;
            *(void *)((char *)valuePtr + 4) = "db_clear_docids";
            WORD2(valuePtr[1]) = 1024;
            *(_DWORD *)((char *)&valuePtr[1] + 6) = 414;
            WORD1(valuePtr[2]) = 1024;
            HIDWORD(valuePtr[2]) = v48;
            _os_log_error_impl(&dword_1BD672000, v47, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", (uint8_t *)valuePtr, 0x18u);
          }
          *__error() = v46;
          unint64_t v49 = __si_assert_copy_extra_329();
          uint64_t v50 = v49;
          if (v49) {
            unint64_t v51 = v49;
          }
          else {
            unint64_t v51 = "";
          }
          __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 414, v51);
          free(v50);
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        unsigned int v28 = db2_clear_docids(*(void *)(a1 + 1184), v14, *(_DWORD **)(a1 + 6584), 1, (unsigned int (*)(_DWORD *, uint64_t))clear_docid_match_new, (uint64_t)v58);
        char v57 = 1;
        uint64_t v29 = *(void *)&threadData[18 * v55 + 2];
        unsigned int v30 = v54;
        uint64_t v31 = v29 + 320 * v54;
        *(_DWORD *)(v31 + 312) = v21;
        uint64_t v32 = *(void (**)(void))(v31 + 232);
        if (v32) {
          v32(*(void *)(v29 + 320 * v30 + 288));
        }
        dropThreadId(v55, 0, v15);
        unsigned int v23 = v28;
      }
      if (v57) {
        uint64_t v26 = v23;
      }
      else {
        uint64_t v26 = 0xFFFFFFFFLL;
      }
      db_clear_docids_cleanup(*(int **)(a1 + 1184), v14);
    }
    else
    {
      uint64_t v26 = 0;
    }
    CFNumberRef v33 = (const __CFNumber *)SICopyProperty(a1, @"database.recoverscantime");
    if (v33)
    {
      CFNumberRef v34 = v33;
      valuePtr[0] = 0;
      if (CFNumberGetValue(v33, kCFNumberSInt64Type, valuePtr) && valuePtr[0] > *(void *)(a1 + 2400)) {
        *(void *)(a1 + 2400) = valuePtr[0];
      }
      CFRelease(v34);
    }
    long long v88 = 0u;
    long long v89 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    memset(valuePtr, 0, sizeof(valuePtr));
    time_t v52 = *(void *)(a1 + 2400);
    uint64_t v35 = localtime(&v52);
    strftime((char *)valuePtr, 0x100uLL, "%F %T", v35);
    int v36 = *__error();
    int v37 = _SILogForLogForCategory(11);
    os_log_type_t v38 = 2 * (dword_1E9FC90D0 < 4);
    if (os_log_type_enabled(v37, v38))
    {
      *(_DWORD *)long long buf = 134219010;
      uint64_t v66 = a1;
      __int16 v67 = 2080;
      long long v68 = valuePtr;
      __int16 v69 = 2048;
      uint64_t v70 = a3;
      __int16 v71 = 1024;
      int v72 = HIDWORD(v62);
      __int16 v73 = 2048;
      uint64_t v74 = v59;
      _os_log_impl(&dword_1BD672000, v37, v38, "%p repair - catchup scan time stamp: %s, base: %ld, repair count: %d, remair max: %ld", buf, 0x30u);
    }
    *__error() = v36;
    os_log_type_t v25 = v63;
    uint64_t v24 = v26;
    if (!v63) {
      goto LABEL_42;
    }
    goto LABEL_37;
  }
  uint64_t v24 = -*(char *)(a1 + 2064);
  os_log_type_t v25 = v12;
  if (v12)
  {
LABEL_37:
    *(void *)(a1 + 6944) = *(void *)v25;
    if (*((void *)v25 + 5))
    {
      _MDPlistContainerEndArray();
      _MDPlistContainerEndArray();
      _MDPlistContainerEndContainer();
      mobile_journal_plist(*(_DWORD **)v25, 0, 0, *((void *)v25 + 5), 0, 0);
      CFRelease(*((CFTypeRef *)v25 + 5));
    }
    size_t v39 = (const void *)*((void *)v25 + 4);
    if (v39) {
      CFRelease(v39);
    }
    free(v25);
  }
LABEL_42:
  if (!v24)
  {
    uint64_t v40 = *(void *)(a1 + 1376);
    if (v40)
    {
      int v41 = HIDWORD(v62);
      int v42 = *(_DWORD *)(v40 + 8);
      if (!v42
        || (uint64_t v43 = *(void *)(*(void *)v40 + 8 * (v42 - 1)),
            char v44 = atomic_load((unsigned int *)(v43 + 36)),
            (v44 & 3) != 0)
        || *(unsigned char *)(v43 + 15203))
      {
        new_live_index(a1, 0, v59 + 1);
        uint64_t v40 = *(void *)(a1 + 1376);
      }
      if (v41 && v40)
      {
        int v45 = *(_DWORD *)(v40 + 8);
        if (v45) {
          ContentIndexSetEmergency(*(int **)(*(void *)v40 + 8 * (v45 - 1)), 1);
        }
      }
    }
  }
  return v24;
}

void si_handle_tmp_files(uint64_t a1, int a2, int a3, __CFArray **a4, __CFArray **a5)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  if (_os_feature_enabled_impl()) {
    int v10 = _os_feature_enabled_impl();
  }
  else {
    int v10 = 1;
  }
  unsigned int v98 = 0;
  if (fd_setDir(a1, (int *)&v98))
  {
    uint64_t v11 = opendir(".");
    if (v11)
    {
      int v12 = v11;
      int v88 = a2;
      int64_t v96 = 0;
      uint64_t v97 = a5;
      int64_t v91 = 0;
      unint64_t v93 = 0;
      int64_t v94 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      while (1)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v15 = v14;
            uint64_t v16 = v13;
            unsigned int v17 = readdir(v12);
            if (!v17)
            {
              closedir(v12);
              int64_t v50 = v91;
              unint64_t v49 = v93;
              int64_t v51 = v94;
              goto LABEL_62;
            }
            unsigned int v18 = v17;
            d_name = (const std::__fs::filesystem::path *)v17->d_name;
            uint64_t v13 = v16;
            uint64_t v14 = v15;
            if (v17->d_name[0] != 46)
            {
              d_os_log_type_t type = v17->d_type;
              BOOL v21 = d_type == 4 || d_type == 10;
              uint64_t v13 = v16;
              uint64_t v14 = v15;
              if (!v21) {
                break;
              }
            }
          }
          if (strncmp(v17->d_name, "tmp.", 4uLL)) {
            break;
          }
          int v28 = strncmp((const char *)d_name, "tmp.SnowLeopard", 0xFuLL);
          uint64_t v13 = v16;
          uint64_t v14 = v15;
          if (v28)
          {
            int v29 = strncmp((const char *)d_name, "tmp.Cab", 7uLL);
            uint64_t v13 = v16;
            uint64_t v14 = v15;
            if (v29)
            {
              int v30 = strncmp((const char *)d_name, "tmp.Glow", 8uLL);
              uint64_t v13 = v16;
              uint64_t v14 = v15;
              if (v30)
              {
                int v31 = strncmp((const char *)d_name, "tmp.Star", 8uLL);
                uint64_t v13 = v16;
                uint64_t v14 = v15;
                if (v31)
                {
                  int v32 = strncmp((const char *)d_name, "tmp.Lion", 8uLL);
                  uint64_t v13 = v16;
                  uint64_t v14 = v15;
                  if (v32)
                  {
                    int v33 = strncmp((const char *)d_name, "tmp.spotlight", 0xDuLL);
                    uint64_t v13 = v16;
                    uint64_t v14 = v15;
                    if (v33)
                    {
                      int v34 = strncmp((const char *)d_name, "tmp.store.recovery", 0x12uLL);
                      uint64_t v13 = v16;
                      uint64_t v14 = v15;
                      if (v34)
                      {
                        if (v88 && !strncmp((const char *)d_name, "tmp.journals.", 0xDuLL))
                        {
                          for (uint64_t i = &v18->d_name[13]; *i; ++i)
                          {
                            if (*i == 46)
                            {
                              if (!i[1]) {
                                break;
                              }
                              bzero(buf, 0x400uLL);
                              __strcpy_chk();
                              uint64_t v40 = i - (char *)d_name - 4;
                              if (*((unsigned char *)&buf[0].st_dev + v40) != 46)
                              {
                                long long v82 = __si_assert_copy_extra_625(-1);
                                long long v83 = v82;
                                long long v84 = "";
                                if (v82) {
                                  long long v84 = v82;
                                }
                                __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 10161, "new_path[ptr-direntry->d_name-4]=='.'", v84);
                                free(v83);
                                if (__valid_fs(-1)) {
                                  uint64_t v85 = 2989;
                                }
                                else {
                                  uint64_t v85 = 3072;
                                }
                                *(_DWORD *)uint64_t v85 = -559038737;
                                abort();
                              }
                              *((unsigned char *)&buf[0].st_dev + v40) = 47;
                              int v87 = *__error();
                              int v41 = _SILogForLogForCategory(0);
                              os_log_type_t v42 = 2 * (gSILogLevels[0] < 4);
                              uint64_t v43 = v41;
                              if (os_log_type_enabled(v41, v42))
                              {
                                *(_DWORD *)int v99 = 136315394;
                                int v100 = (const char *)d_name;
                                __int16 v101 = 2080;
                                *(void *)int v102 = buf;
                                _os_log_impl(&dword_1BD672000, v43, v42, "renaming: %s to %s", v99, 0x16u);
                              }
                              *__error() = v87;
                              rename(d_name, (const std::__fs::filesystem::path *)buf, v44);
                              if (v45)
                              {
                                int v46 = *__error();
                                unsigned int v47 = _SILogForLogForCategory(0);
                                if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
                                {
                                  int v48 = *__error();
                                  *(_DWORD *)int v99 = 136316162;
                                  int v100 = "si_handle_tmp_files";
                                  __int16 v101 = 1024;
                                  *(_DWORD *)int v102 = 10167;
                                  *(_WORD *)&v102[4] = 1024;
                                  *(_DWORD *)&v102[6] = v48;
                                  __int16 v103 = 2080;
                                  uint64_t v104 = d_name;
                                  __int16 v105 = 2080;
                                  uint64_t v106 = buf;
                                  _os_log_error_impl(&dword_1BD672000, v47, OS_LOG_TYPE_ERROR, "%s:%d: move error:%d, %s to %s", v99, 0x2Cu);
                                }
                                *__error() = v46;
                              }
                              goto LABEL_49;
                            }
                          }
                        }
LABEL_21:
                        int v86 = v10;
                        int v25 = *__error();
                        uint64_t v26 = _SILogForLogForCategory(10);
                        os_log_type_t v27 = 2 * (dword_1E9FC90CC < 4);
                        if (os_log_type_enabled(v26, v27))
                        {
                          buf[0].dev_t st_dev = 136315138;
                          *(void *)&buf[0].st_mode = d_name;
                          _os_log_impl(&dword_1BD672000, v26, v27, "unlink (%s)", (uint8_t *)buf, 0xCu);
                        }
                        *__error() = v25;
                        unlink((const char *)d_name);
                        uint64_t v13 = v16;
                        uint64_t v14 = v15;
                        int v10 = v86;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (a4 && !strncmp((const char *)d_name, "journalAttr.", 0xCuLL)) {
          break;
        }
        if (v97 && !strncmp((const char *)d_name, "deferAttr.", 0xAuLL))
        {
          *(void *)&buf[0].dev_t st_dev = 0;
          uint64_t v39 = strtoll(&v18->d_name[10], (char **)buf, 0);
          if (v39 < 2) {
            goto LABEL_49;
          }
          int v37 = (const void *)v39;
          CFDictionaryRef Mutable = *v97;
          if (!*v97)
          {
            CFDictionaryRef Mutable = CFArrayCreateMutable(allocator, 0, 0);
            *uint64_t v97 = Mutable;
          }
          goto LABEL_48;
        }
        int v22 = strncmp((const char *)d_name, "skg_", 4uLL);
        d_namleuint64_t n = v18->d_namlen;
        if (v22)
        {
          uint64_t v13 = v16;
          uint64_t v14 = v15;
          if (d_namlen >= 0xD)
          {
            int v24 = strncmp((const char *)d_name + d_namlen - 13, "topK.mdplistc", 0xDuLL);
            uint64_t v13 = v16;
            uint64_t v14 = v15;
            if (!v24) {
              goto LABEL_21;
            }
          }
        }
        else
        {
          uint64_t v13 = 1;
          uint64_t v14 = 1;
          if (d_namlen != 4)
          {
            memset(buf, 0, 144);
            if (!stat((const char *)d_name, buf))
            {
              if (!strncmp((const char *)d_name, "skg_deleteAttr.", 0xFuLL))
              {
                v93 += buf[0].st_size;
                ++v94;
              }
              else if (!strncmp((const char *)d_name, "skg_knowledgeEntry.", 0x13uLL))
              {
                v91 += buf[0].st_size;
                ++v96;
              }
            }
LABEL_49:
            uint64_t v13 = v16;
            uint64_t v14 = v15;
          }
        }
      }
      *(void *)&buf[0].dev_t st_dev = 0;
      uint64_t v36 = strtoll(&v18->d_name[12], (char **)buf, 0);
      if (v36 < 2) {
        goto LABEL_49;
      }
      int v37 = (const void *)v36;
      CFDictionaryRef Mutable = *a4;
      if (!*a4)
      {
        CFDictionaryRef Mutable = CFArrayCreateMutable(allocator, 0, 0);
        *a4 = Mutable;
      }
LABEL_48:
      CFArrayAppendValue(Mutable, v37);
      goto LABEL_49;
    }
    unint64_t v49 = 0;
    int64_t v50 = 0;
    int64_t v51 = 0;
    int64_t v96 = 0;
    LOBYTE(v15) = 0;
LABEL_62:
    int v53 = v98;
    MEMORY[0x1C1882290](v98);
    if ((v53 & 0x80000000) == 0) {
      close(v53);
    }
    int v52 = v15 & 1;
  }
  else
  {
    unint64_t v49 = 0;
    int64_t v50 = 0;
    int64_t v51 = 0;
    int64_t v96 = 0;
    int v52 = 0;
  }
  if (v49 > 0x3B9ACA00) {
    int v54 = 1;
  }
  else {
    int v54 = a3;
  }
  if ((_os_feature_enabled_impl() ^ 1 | v54 | v52) == 1)
  {
    *(_DWORD *)int v99 = 0;
    if (fd_setDir(a1, (int *)v99))
    {
      unsigned int v55 = opendir(".");
      if (v55)
      {
        unint64_t v56 = v55;
        int64_t v95 = v51;
        char v57 = 0;
        while (1)
        {
          int v58 = readdir(v56);
          if (!v58) {
            break;
          }
          uint64_t v59 = v58->d_name;
          if (v58->d_name[0] != 46)
          {
            int v60 = v58->d_type;
            BOOL v61 = v60 == 4 || v60 == 10;
            if (!v61
              && !strncmp(v58->d_name, "skg_", 4uLL)
              && (!strncmp(v59, "skg_deleteAttr.", 0xFuLL) || !strncmp(v59, "skg_knowledgeEntry.", 0x13uLL)))
            {
              int v92 = *__error();
              uint64_t v62 = _SILogForLogForCategory(10);
              os_log_type_t v63 = 2 * (dword_1E9FC90CC < 4);
              CFAllocatorRef allocatora = v62;
              if (os_log_type_enabled(v62, v63))
              {
                buf[0].dev_t st_dev = 136315138;
                *(void *)&buf[0].st_mode = v59;
                _os_log_impl(&dword_1BD672000, allocatora, v63, "unlink (%s)", (uint8_t *)buf, 0xCu);
              }
              *__error() = v92;
              unlink(v59);
              char v57 = 1;
            }
          }
        }
        closedir(v56);
        int64_t v51 = v95;
      }
      else
      {
        char v57 = 0;
      }
      int v65 = *(_DWORD *)v99;
      MEMORY[0x1C1882290](*(unsigned int *)v99);
      if ((v65 & 0x80000000) == 0) {
        close(v65);
      }
      BOOL v64 = (v57 & 1) == 0;
    }
    else
    {
      BOOL v64 = 1;
    }
    bzero(buf, 0x400uLL);
    if ((fcntl(a1, 50, buf) & 0x80000000) == 0 && LOBYTE(buf[0].st_dev))
    {
      size_t v66 = strlen((const char *)buf);
      snprintf((char *)buf + v66, 1024 - v66, "/%s", "skg_");
      int v67 = open((const char *)buf, 1793, 384);
      if ((v67 & 0x80000000) == 0)
      {
        close(v67);
        if (!v64)
        {
          bzero(buf, 0x400uLL);
          if ((fcntl(a1, 50, buf) & 0x80000000) == 0)
          {
            if (LOBYTE(buf[0].st_dev))
            {
              size_t v68 = strlen((const char *)buf);
              CFAllocatorRef v69 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              CFURLRef v70 = CFURLCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)buf, v68, 0x8000100u, 0);
              if (v70)
              {
                CFURLRef v71 = v70;
                CFURLRef PathComponent = CFURLCreateCopyDeletingLastPathComponent(v69, v70);
                if (PathComponent)
                {
                  CFURLRef v73 = PathComponent;
                  CFStringRef v74 = CFURLCopyLastPathComponent(PathComponent);
                  if (v74)
                  {
                    CFStringRef v75 = v74;
                    xpc_object_t v76 = dictionaryFromPurgeEvent(v74, v96, v50);
                    analytics_send_event();
                    xpc_release(v76);
                    xpc_object_t v77 = dictionaryFromPurgeEvent(v75, v51, v49);
                    analytics_send_event();
                    xpc_release(v77);
                    CFRelease(v75);
                  }
                  CFRelease(v73);
                }
                CFRelease(v71);
              }
            }
          }
        }
        return;
      }
      int v78 = *__error();
      long long v79 = _SILogForLogForCategory(10);
      if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v99 = 136315394;
        int v100 = "si_purge_journal_files";
        __int16 v101 = 1024;
        *(_DWORD *)int v102 = 10062;
        _os_log_error_impl(&dword_1BD672000, v79, OS_LOG_TYPE_ERROR, "%s:%d: write skg marker error", v99, 0x12u);
      }
      *__error() = v78;
    }
    int v80 = *__error();
    long long v81 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
    {
      buf[0].dev_t st_dev = 136315394;
      *(void *)&buf[0].st_mode = "si_handle_tmp_files";
      WORD2(buf[0].st_ino) = 1024;
      *(_DWORD *)((char *)&buf[0].st_ino + 6) = 10224;
      _os_log_error_impl(&dword_1BD672000, v81, OS_LOG_TYPE_ERROR, "%s:%d: unable to purge skg files", (uint8_t *)buf, 0x12u);
    }
    *__error() = v80;
  }
}

uint64_t __exist_precheck_touch_file_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

int *dump_filesystem_meta(int a1)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  *(_OWORD *)std::string __str = 0u;
  long long v52 = 0u;
  int v2 = openat(a1, ".", 0);
  if (v2 == -1)
  {
    int v15 = *__error();
    uint64_t v16 = _SILogForLogForCategory(0);
    os_log_type_t v17 = gSILogLevels[0] < 3;
    if (os_log_type_enabled(v16, (os_log_type_t)(gSILogLevels[0] < 3)))
    {
      int v18 = *__error();
      v50.dev_t st_dev = 67109376;
      *(_DWORD *)&v50.int st_mode = a1;
      LOWORD(v50.st_ino) = 1024;
      *(_DWORD *)((char *)&v50.st_ino + 2) = v18;
      _os_log_impl(&dword_1BD672000, v16, v17, "*warn* openat(%d): %d", (uint8_t *)&v50, 0xEu);
    }
    dispatch_semaphore_t result = __error();
    int *result = v15;
  }
  else
  {
    int v3 = v2;
    int v4 = fdopendir(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      time_t v23 = time(0);
      uint64_t v6 = MEMORY[0x1E4F14500];
      while (1)
      {
        int v7 = readdir(v5);
        if (!v7) {
          break;
        }
        if (v7->d_type == 8)
        {
          d_name = v7->d_name;
          memset(&v50, 0, sizeof(v50));
          if (!fstatat(a1, v7->d_name, &v50, 32) && os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          {
            st_blkstd::string::size_type size = v50.st_blksize;
            int st_mode = v50.st_mode;
            __uint32_t st_flags = v50.st_flags;
            st_std::string::size_type size = v50.st_size;
            __darwin_time_t tv_sec = v50.st_atimespec.tv_sec;
            prettyStr(v23 - v50.st_atimespec.tv_sec, __str);
            __darwin_time_t v12 = v50.st_mtimespec.tv_sec;
            prettyStr(v23 - v50.st_mtimespec.tv_sec, __str);
            __darwin_time_t v13 = v50.st_ctimespec.tv_sec;
            prettyStr(v23 - v50.st_ctimespec.tv_sec, __str);
            *(_DWORD *)long long buf = 67111938;
            int v27 = a1;
            __int16 v28 = 2080;
            int v29 = d_name;
            __int16 v30 = 2048;
            off_t v31 = st_size;
            __int16 v32 = 1024;
            blksize_t v33 = st_blksize;
            __int16 v34 = 1024;
            int v35 = st_mode;
            __int16 v36 = 1024;
            __uint32_t v37 = st_flags;
            __int16 v38 = 2048;
            __darwin_time_t v39 = tv_sec;
            __int16 v40 = 2080;
            int v41 = __str;
            __int16 v42 = 2048;
            __darwin_time_t v43 = v12;
            __int16 v44 = 2080;
            int v45 = __str;
            __int16 v46 = 2048;
            __darwin_time_t v47 = v13;
            __int16 v48 = 2080;
            unint64_t v49 = __str;
            _os_log_impl(&dword_1BD672000, v6, OS_LOG_TYPE_DEFAULT, "[fsmeta %d] %s sz:%llu bs:%d md:%d fl:%d at:%lus(%s ago) mt:%lus(%s ago) ct:%lus(%s ago)", buf, 0x6Au);
          }
        }
      }
      return (int *)closedir(v5);
    }
    else
    {
      int v19 = *__error();
      uint64_t v20 = _SILogForLogForCategory(0);
      os_log_type_t v21 = gSILogLevels[0] < 3;
      if (os_log_type_enabled(v20, (os_log_type_t)(gSILogLevels[0] < 3)))
      {
        int v22 = *__error();
        v50.dev_t st_dev = 67109376;
        *(_DWORD *)&v50.int st_mode = v3;
        LOWORD(v50.st_ino) = 1024;
        *(_DWORD *)((char *)&v50.st_ino + 2) = v22;
        _os_log_impl(&dword_1BD672000, v20, v21, "*warn* fdopendir(%d): %d", (uint8_t *)&v50, 0xEu);
      }
      *__error() = v19;
      return (int *)close(v3);
    }
  }
  return result;
}

uint64_t si_validate_db(uint64_t a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v2 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v3 = setThreadIdAndInfo(-1, (long long *)sSDBExceptionCallbacks, *(void *)(a1 + 1184), 0x40000000, v2);
  unsigned int v21 = HIDWORD(v3);
  unsigned int v22 = v3;
  unsigned int v19 = v5;
  unsigned int v20 = v4;
  uint64_t v6 = *(void *)&threadData[18 * v3 + 2];
  uint64_t v7 = v6 + 320 * HIDWORD(v3);
  *(unsigned char *)(v7 + 216) = 0;
  int v8 = *(_DWORD *)(v7 + 312);
  uint64_t v9 = *(void (**)(void))(v7 + 224);
  if (v9) {
    v9(*(void *)(v6 + 320 * HIDWORD(v3) + 288));
  }
  if (_setjmp((int *)v7))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
    }
    *(_DWORD *)(v7 + 312) = v8;
    CIOnThreadCleanUpReset(v19);
    uint64_t v10 = 1;
    dropThreadId(v22, 1, v2);
    CICleanUpReset(v22, v20);
  }
  else
  {
    field_name_for_id = (const char *)db_get_field_name_for_id(*(int **)(a1 + 1184), 1);
    __darwin_time_t v12 = field_name_for_id;
    if (field_name_for_id && !strncmp(field_name_for_id, "_kMDXXXX___DUMMY", 0x10uLL))
    {
      uint64_t v10 = 1;
    }
    else
    {
      int v13 = *__error();
      uint64_t v14 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315650;
        int v24 = "si_validate_db";
        __int16 v25 = 1024;
        int v26 = 943;
        __int16 v27 = 2080;
        __int16 v28 = v12;
        _os_log_error_impl(&dword_1BD672000, v14, OS_LOG_TYPE_ERROR, "%s:%d: Entry 1 in the name table is %s (should be dummy field name)", buf, 0x1Cu);
      }
      uint64_t v10 = 0;
      *__error() = v13;
    }
    uint64_t v15 = *(void *)&threadData[18 * v22 + 2];
    uint64_t v16 = v15 + 320 * v21;
    *(_DWORD *)(v16 + 312) = v8;
    os_log_type_t v17 = *(void (**)(void))(v16 + 232);
    if (v17) {
      v17(*(void *)(v15 + 320 * v21 + 288));
    }
    dropThreadId(v22, 0, v2);
  }
  return v10;
}

int *disableWritingForAllButLastOfRunsOfTransaction(int *result)
{
  uint64_t v1 = result;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = result[2];
  if (v2 >= 2)
  {
    uint64_t v3 = 0;
    do
    {
      unsigned int v4 = (int **)(*(void *)v1 + 8 * v3);
      dispatch_semaphore_t result = *v4;
      if ((*v4)[10] == v4[1][10])
      {
        _CIDisableUpdates((uint64_t)result);
        int v5 = *__error();
        uint64_t v6 = _SILogForLogForCategory(0);
        os_log_type_t v7 = 2 * (gSILogLevels[0] < 4);
        if (os_log_type_enabled(v6, v7))
        {
          int v8 = *(_DWORD *)(*(void *)(*(void *)v1 + 8 * v3) + 40);
          *(_DWORD *)long long buf = 67109120;
          int v14 = v8;
          _os_log_impl(&dword_1BD672000, v6, v7, "Disable updates for index in transaction %d", buf, 8u);
        }
        dispatch_semaphore_t result = __error();
        int *result = v5;
        unint64_t v2 = v1[2];
      }
      unint64_t v9 = v3 + 2;
      ++v3;
    }
    while (v9 < v2);
  }
  v1[4] = -1;
  if (v2)
  {
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *(void *)(*(void *)v1 + 8 * v10);
      char v12 = atomic_load((unsigned int *)(v11 + 36));
      if ((v12 & 3) == 0 && !*(unsigned char *)(v11 + 15203)) {
        break;
      }
      if (++v10 >= (unint64_t)v1[2]) {
        return result;
      }
    }
    v1[4] = v10;
  }
  return result;
}

uint64_t indexSetGetNotCompactCount(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((int)v1 < 1) {
    return 0;
  }
  uint64_t result = 0;
  unint64_t v4 = v1 + 1;
  do
  {
    uint64_t v5 = (v4 - 2);
    char v6 = atomic_load((unsigned int *)(*(void *)(*(void *)a1 + 8 * v5) + 36));
    if ((v6 & 4) != 0) {
      break;
    }
    uint64_t v7 = *(void *)(*(void *)a1 + 8 * v5);
    char v8 = atomic_load((unsigned int *)(v7 + 36));
    BOOL v9 = (v8 & 3) == 0 && *(unsigned char *)(v7 + 15203) == 0;
    uint64_t result = result + !v9;
    --v4;
  }
  while (v4 > 1);
  return result;
}

uint64_t indexSetGetNotMergedCount(uint64_t *a1)
{
  uint64_t v1 = *((unsigned int *)a1 + 2);
  if ((int)v1 < 1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = *a1;
  for (unsigned int i = v1 - 1; ; --i)
  {
    uint64_t v6 = *(void *)(v4 + 8 * i);
    char v7 = atomic_load((unsigned int *)(v6 + 36));
    if ((v7 & 3) == 0 && !*(unsigned char *)(v6 + 15203)) {
      break;
    }
    uint64_t v4 = *a1;
    if (*(int *)(*(void *)(*a1 + 8 * i) + 52) > 2) {
      break;
    }
    uint64_t result = (result + 1);
    if (v1 == result) {
      return v1;
    }
  }
  return result;
}

uint64_t indexSetGetLiveCount(uint64_t a1, int a2)
{
  if (a2 - 1 < 1) {
    return 0;
  }
  uint64_t result = 0;
  unsigned int v4 = a2 - 2;
  while (*(_DWORD *)(*(void *)(a1 + 8 * (a2 - 1)) + 40) == *(_DWORD *)(*(void *)(a1 + 8 * v4)
                                                                                          + 40))
  {
    uint64_t result = (result + 1);
    if (--v4 == -1) {
      return (a2 - 1);
    }
  }
  return result;
}

void holdAndIssueMerge(uint64_t a1, int a2, uint64_t a3, char a4)
{
  char v8 = malloc_type_calloc(1uLL, 0x460uLL, 0x1070040C187FD8AuLL);
  v8[1042] = 0;
  *((void *)v8 + 132) = copyHoldQueue(a1);
  *(void *)char v8 = a1;
  uint64_t v9 = *(void *)(*(void *)a3 + 8 * (*(_DWORD *)(a3 + 8) - a2));
  v8[16] = a4;
  *((_DWORD *)v8 + 2) = *(_DWORD *)(v9 + 56);
  *((_DWORD *)v8 + 3) = a2;
  v8[1041] = 0;
  *((void *)v8 + 131) = "void holdAndIssueMerge(SIRef, int32_t, SIIndexSetRef, _Bool, _Bool)";
  *((_DWORD *)v8 + 274) = 7;
  v8[1100] = 0;
  if (!*((void *)v8 + 136) && !*((_DWORD *)v8 + 266))
  {
    uint64_t v10 = *(void *)(a1 + 2352);
    if (v10)
    {
      uint64_t v11 = *(uint64_t (**)(void, const char *, uint64_t, const char *))(v10 + 64);
      if (v11) {
        *((_DWORD *)v8 + 266) = v11(*(void *)(v10 + 144), "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 9988, "void holdAndIssueMerge(SIRef, int32_t, SIIndexSetRef, _Bool, _Bool)");
      }
    }
  }
  __strlcpy_chk();
  uint64_t v12 = *(void *)(a1 + 1056);
  si_enqueue_work(v12, (uint64_t)si_mergeIndex, (uint64_t)v8);
}

void compactReadOnlyIndexes(uint64_t a1, char a2)
{
  unsigned int v4 = malloc_type_calloc(1uLL, 0x460uLL, 0x1070040C187FD8AuLL);
  uint8_t v4[16] = a2;
  *(void *)unsigned int v4 = a1;
  uint64_t v5 = *(void *)(a1 + 1048);
  si_enqueue_barrier_with_qos(v5, 9, (uint64_t)si_compactReadOnlyIndexes1, (uint64_t)v4);
}

uint64_t indexSetGetWritableCount(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((int)v1 < 1) {
    return 0;
  }
  LODWORD(v2) = 0;
  unint64_t v3 = v1 + 1;
  do
  {
    uint64_t v4 = *(void *)(*(void *)a1 + 8 * (v3 - 2));
    char v5 = atomic_load((unsigned int *)(v4 + 36));
    BOOL v6 = (v5 & 3) == 0 && *(unsigned __int8 *)(v4 + 15203) == 0;
    uint64_t v2 = (v2 + v6);
    --v3;
  }
  while (v3 > 1);
  return v2;
}

void _SIPreHeatIndex(uint64_t a1, const void *a2, char a3)
{
  if (*(void *)(a1 + 1184) && *(void *)(a1 + 1088))
  {
    BOOL v6 = malloc_type_calloc(1uLL, 0x18uLL, 0x1020040A95220FAuLL);
    v6[16] = a3;
    *(void *)BOOL v6 = a1;
    if (a2) {
      CFRetain(a2);
    }
    *((void *)v6 + 1) = a2;
    uint64_t v7 = *(void *)(a1 + 1088);
    si_enqueue_work(v7, (uint64_t)si_preheat, (uint64_t)v6);
  }
}

void si_preheat(uint64_t *a1, int a2)
{
  if (!a2)
  {
    uint64_t v3 = *a1;
    kdebug_trace();
    unsigned int v14 = 0;
    if (fd_setDir(*(unsigned int *)(v3 + 32), (int *)&v14))
    {
      uint64_t v4 = *(void *)(v3 + 1376);
      int v5 = *(_DWORD *)(v4 + 8);
      if (v5) {
        _CIPreHeatIndex(*(void *)(*(void *)v4 + 8 * (v5 - 1)), *((unsigned __int8 *)a1 + 16));
      }
      uint64_t v6 = *(void *)(v3 + 1384);
      if (*(_DWORD *)(v6 + 8))
      {
        unint64_t v7 = 0;
        do
          _CIPreHeatIndex(*(void *)(*(void *)v6 + 8 * v7++), *((unsigned __int8 *)a1 + 16));
        while (v7 < *(unsigned int *)(v6 + 8));
      }
      uint64_t v8 = *(void *)(v3 + 1376);
      if (*(_DWORD *)(v8 + 8))
      {
        unint64_t v9 = 0;
        do
          _CIPreHeatIndex(*(void *)(*(void *)v8 + 8 * v9++), *((unsigned __int8 *)a1 + 16));
        while (v9 < *(unsigned int *)(v8 + 8));
      }
      uint64_t v10 = a1[1];
      if (v10)
      {
        CFArrayRef v11 = *(const __CFArray **)(v10 + 112);
        if (v11)
        {
          if (CFArrayGetCount(*(CFArrayRef *)(v10 + 112)))
          {
            CFArrayGetValueAtIndex(v11, 0);
            icu_locale_create();
            icu_locale_get_rules();
            icu_locale_retain();
          }
        }
      }
      int v12 = v14;
      MEMORY[0x1C1882290](v14);
      if ((v12 & 0x80000000) == 0) {
        close(v12);
      }
    }
    kdebug_trace();
  }
  int v13 = (const void *)a1[1];
  if (v13) {
    CFRelease(v13);
  }
  free(a1);
}

void si_compactReadOnlyIndexes1(uint64_t a1, int a2)
{
  uint64_t v3 = a1;
  if (!a2)
  {
    si_enqueue_work_with_qos(*(void *)(*(void *)a1 + 1040), 9, (uint64_t)si_compactReadOnlyIndexes2, a1);
    uint64_t v3 = 0;
  }
  si_merge_ctx_free(v3, a2 != 0);
}

void si_compactReadOnlyIndexes2(uint64_t *a1, int a2)
{
  uint64_t v3 = (uint64_t)a1;
  if (!a2)
  {
    uint64_t v4 = *a1;
    si_sync_ctx_create_with_defer_fd(*a1, 0);
    uint64_t v6 = v5;
    *(unsigned char *)(v5 + 96) = 1;
    if (!*(unsigned char *)(*(void *)v5 + 2429) && !*(unsigned char *)(*(void *)v3 + 2064)) {
      attachJournal((atomic_uint *)v5);
    }
    syncIndex(v6, 0);
    si_enqueue_work(*(void *)(v4 + 1056), (uint64_t)si_compactReadOnlyIndexes3, v3);
    uint64_t v3 = 0;
  }
  si_merge_ctx_free(v3, a2 != 0);
}

void si_compactReadOnlyIndexes3(uint64_t a1, int a2)
{
  if (!a2)
  {
    uint64_t v4 = *(void *)a1;
    unsigned int v8 = 0;
    if (fd_setDir(*(unsigned int *)(v4 + 32), (int *)&v8))
    {
      uint64_t v5 = 1376;
      if (!*(unsigned char *)(a1 + 16)) {
        uint64_t v5 = 1384;
      }
      uint64_t v6 = *(void *)(v4 + v5);
      uint64_t v9 = v4;
      __checkIndexSetDocIdOrder(v4, (uint64_t *)v6);
      if (*(_DWORD *)(v6 + 8)) {
        CompactIndexes(v4, 0, 0, (void *)v6);
      }
      int v7 = v8;
      MEMORY[0x1C1882290](v8);
      if ((v7 & 0x80000000) == 0) {
        close(v7);
      }
    }
  }
  si_merge_ctx_free(a1, a2 != 0);
}

char *prettyStr(uint64_t a1, char *__str)
{
  if (a1 <= 86399)
  {
    if (a1 % 86400 < 3600)
    {
      if (a1 % 86400 % 3600 < 60) {
        snprintf(__str, 0x80uLL, "%lds");
      }
      else {
        snprintf(__str, 0x80uLL, "%ld:%ld");
      }
    }
    else
    {
      snprintf(__str, 0x80uLL, "%ld:%ld:%ld");
    }
  }
  else
  {
    snprintf(__str, 0x80uLL, "%ldd%ld:%ld:%ld");
  }
  return __str;
}

int *__totalDiskSpaceSize_block_invoke()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  bzero(&v6, 0x878uLL);
  uint64_t result = (int *)statfs("/", &v6);
  if (result)
  {
    int v1 = *__error();
    uint64_t v2 = _SILogForLogForCategory(0);
    os_log_type_t v3 = gSILogLevels[0] < 3;
    if (os_log_type_enabled(v2, (os_log_type_t)(gSILogLevels[0] < 3)))
    {
      int v4 = *__error();
      v5[0] = 67109120;
      v5[1] = v4;
      _os_log_impl(&dword_1BD672000, v2, v3, "*warn* Failed to get total disk space size. err=%d", (uint8_t *)v5, 8u);
    }
    uint64_t result = __error();
    int *result = v1;
  }
  else
  {
    gTotalDiskSpaceSize = v6.f_blocks * v6.f_bsize;
  }
  return result;
}

xpc_object_t dictionaryFromPurgeEvent(const __CFString *a1, int64_t a2, int64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  bzero(buffer, 0x400uLL);
  xpc_object_t empty = xpc_dictionary_create_empty();
  if (CFStringGetCString(a1, buffer, 1024, 0x8000100u)) {
    xpc_dictionary_set_string(empty, "indexId", buffer);
  }
  xpc_dictionary_set_int64(empty, "itemcount", a2);
  xpc_dictionary_set_int64(empty, "indexingtime", 0);
  xpc_dictionary_set_int64(empty, "aggregatedatasize", a3);
  return empty;
}

uint64_t clear_docid_match_new(uint64_t a1, uint64_t a2)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 > *(void *)(a2 + 16))
  {
    *(void *)(a2 + 16) = v3;
    unint64_t v3 = *(void *)(a1 + 32);
  }
  if (v3 < *(void *)(a2 + 8)) {
    return 0;
  }
  ++*(_DWORD *)(a2 + 44);
  uint64_t v5 = *(void *)(a2 + 48);
  if (v5)
  {
    v16[0] = *(unsigned int *)(v5 + 20);
    *(void *)uint64_t v15 = 0;
    if (!db_get_field_by_id(*(int **)(v5 + 8), a1, (int *)v16, (unint64_t *)v15, 0))
    {
      CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFDictionaryRef v7 = _decodeSDBField(*(void *)(v5 + 8), *(unsigned __int16 **)v15, (unsigned __int8 *)(*(void *)v15 + 13), 0, 0, 0, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
      if (v7)
      {
        CFStringRef v8 = (const __CFString *)v7;
        CFStringRef v9 = *(const __CFString **)(v5 + 32);
        if (!v9 || *(_DWORD *)(v5 + 48) > 0x40u || CFStringCompare(v9, v8, 0))
        {
          if (*(void *)(v5 + 40))
          {
            _MDPlistContainerEndArray();
            _MDPlistContainerEndArray();
            _MDPlistContainerEndContainer();
            mobile_journal_plist(*(_DWORD **)v5, 0, *(_DWORD *)(v5 + 48), *(void *)(v5 + 40), 0, 0);
            CFRelease(*(CFTypeRef *)(v5 + 40));
            *(void *)(v5 + 40) = 0;
          }
          uint64_t v10 = *(const void **)(v5 + 32);
          if (v10) {
            CFRelease(v10);
          }
          *(void *)(v5 + 32) = CFRetain(v8);
          *(_DWORD *)(v5 + 48) = 0;
          *(void *)(v5 + 40) = _MDPlistContainerCreateMutable();
          _MDPlistContainerBeginContainer();
          _MDPlistContainerBeginArray();
          _MDPlistContainerAddObject();
          _MDPlistContainerBeginArray();
        }
        LODWORD(v16[0]) = *(_DWORD *)(v5 + 24);
        if (!db_get_field_by_id(*(int **)(v5 + 8), a1, (int *)v16, (unint64_t *)v15, 0))
        {
          CFDictionaryRef v12 = _decodeSDBField(*(void *)(v5 + 8), *(unsigned __int16 **)v15, (unsigned __int8 *)(*(void *)v15 + 13), 0, 0, 0, 0, v6);
          if (v12)
          {
            CFDictionaryRef v13 = v12;
            if (objectHasContent(*(int **)(v5 + 8), a1))
            {
              _MDPlistContainerBeginDictionary();
              _MDPlistContainerAddCString();
              _MDPlistContainerAddObject();
              _MDPlistContainerAddCString();
              _MDPlistContainerAddObject();
              _MDPlistContainerAddCString();
              _MDPlistContainerAddBooleanValue();
              _MDPlistContainerEndDictionary();
              ++*(_DWORD *)(v5 + 48);
              CFRelease(v13);
              goto LABEL_18;
            }
            CFRelease(v13);
          }
        }
        _MDPlistContainerBeginDictionary();
        CFArrayRef v11 = *(_DWORD **)(v5 + 8);
        v14[0] = MEMORY[0x1E4F143A8];
        v14[1] = 0x40000000;
        v14[2] = __RepairJournalWrite_block_invoke;
        v14[3] = &__block_descriptor_tmp_882;
        v14[4] = v5;
        v14[5] = a1;
        _enumerate_dbo(v11, a1, 0, (uint64_t)v14);
        _MDPlistContainerEndDictionary();
        ++*(_DWORD *)(v5 + 48);
LABEL_18:
        CFRelease(v8);
      }
    }
  }
  return 1;
}

void __RepairJournalWrite_block_invoke(uint64_t a1, char *__s1, uint64_t a3)
{
  if (strcmp(__s1, "_kMDItemGroupId"))
  {
    if (strcmp(__s1, "_kMDItemTextContentIndexExists"))
    {
      CFDictionaryRef v6 = _decodeSDBField(*(void *)(*(void *)(a1 + 32) + 8), (unsigned __int16 *)a3, (unsigned __int8 *)(a3 + 13), 0, 0, 0, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
      if (v6)
      {
        CFDictionaryRef v7 = v6;
        _MDPlistContainerAddCString();
        _MDPlistContainerAddObject();
        CFRelease(v7);
      }
    }
  }
}

int *updateMetaInfoForState(int *result, int a2, int a3)
{
  uint64_t v5 = result;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (result[10] != a2)
  {
    int v6 = *__error();
    CFDictionaryRef v7 = _SILogForLogForCategory(11);
    os_log_type_t v8 = dword_1E9FC90D0 < 3;
    if (os_log_type_enabled(v7, (os_log_type_t)(dword_1E9FC90D0 < 3)))
    {
      int v9 = v5[10];
      int v22 = 67109376;
      int v23 = a2;
      __int16 v24 = 1024;
      int v25 = v9;
      _os_log_impl(&dword_1BD672000, v7, v8, "*warn* clean scan count mis-match expected:%d got %d", (uint8_t *)&v22, 0xEu);
    }
    uint64_t result = __error();
    int *result = v6;
    v5[10] = a2;
  }
  if (v5[12] != a2)
  {
    int v10 = *__error();
    CFArrayRef v11 = _SILogForLogForCategory(11);
    os_log_type_t v12 = dword_1E9FC90D0 < 3;
    if (os_log_type_enabled(v11, (os_log_type_t)(dword_1E9FC90D0 < 3)))
    {
      int v13 = v5[12];
      int v22 = 67109376;
      int v23 = a2;
      __int16 v24 = 1024;
      int v25 = v13;
      _os_log_impl(&dword_1BD672000, v11, v12, "*warn* shadow scan count mis-match expected:%d got %d", (uint8_t *)&v22, 0xEu);
    }
    uint64_t result = __error();
    int *result = v10;
    v5[12] = a2;
  }
  if (v5[11] != a3)
  {
    int v14 = *__error();
    uint64_t v15 = _SILogForLogForCategory(11);
    os_log_type_t v16 = dword_1E9FC90D0 < 3;
    if (os_log_type_enabled(v15, (os_log_type_t)(dword_1E9FC90D0 < 3)))
    {
      int v17 = v5[11];
      int v22 = 67109376;
      int v23 = a3;
      __int16 v24 = 1024;
      int v25 = v17;
      _os_log_impl(&dword_1BD672000, v15, v16, "*warn* clean live count mis-match expected:%d got %d", (uint8_t *)&v22, 0xEu);
    }
    uint64_t result = __error();
    int *result = v14;
    v5[11] = a3;
  }
  if (v5[13] != a3)
  {
    int v18 = *__error();
    unsigned int v19 = _SILogForLogForCategory(11);
    os_log_type_t v20 = dword_1E9FC90D0 < 3;
    if (os_log_type_enabled(v19, (os_log_type_t)(dword_1E9FC90D0 < 3)))
    {
      int v21 = v5[13];
      int v22 = 67109376;
      int v23 = a3;
      __int16 v24 = 1024;
      int v25 = v21;
      _os_log_impl(&dword_1BD672000, v19, v20, "*warn* shadow live count mis-match expected:%d got %d", (uint8_t *)&v22, 0xEu);
    }
    uint64_t result = __error();
    int *result = v18;
    v5[13] = a3;
  }
  return result;
}

uint64_t SIOpenJWLIndex(int a1, void *a2, uint64_t a3)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  int v6 = malloc_type_calloc(1uLL, 0x2778uLL, 0x10F0040EF72DC6BuLL);
  void *v6 = 0xC0DE10DE10DEC0DELL;
  uint64_t v7 = guarded_dup(a1);
  void v6[4] = v7;
  v6[5] = v8;
  if (v7 == -1 || MEMORY[0x1C1882290]())
  {
    int v9 = *__error();
    int v10 = _SILogForLogForCategory(11);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v37 = *((_DWORD *)v6 + 8);
      __int16 v38 = __error();
      __darwin_time_t v39 = strerror(*v38);
      int v40 = *__error();
      *(_DWORD *)long long buf = 136316418;
      *(void *)&uint8_t buf[4] = "SIOpenJWLIndex";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 13080;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v37;
      *(_WORD *)&unsigned char buf[24] = 1024;
      *(_DWORD *)&buf[26] = a1;
      *(_WORD *)&buf[30] = 2080;
      *(void *)&uint8_t buf[32] = v39;
      *(_WORD *)&uint8_t buf[40] = 1024;
      *(_DWORD *)&buf[42] = v40;
      _os_log_error_impl(&dword_1BD672000, v10, OS_LOG_TYPE_ERROR, "%s:%d: Unable to set jwl index fd: %d (dirfd: %d), err: %s(%d)", buf, 0x2Eu);
    }
    *__error() = v9;
    free(v6);
    return 0xFFFFFFFFLL;
  }
  pthread_rwlock_init((pthread_rwlock_t *)(v6 + 10), 0);
  pthread_mutex_init((pthread_mutex_t *)(v6 + 203), 0);
  *((_DWORD *)v6 + 15) = 2 * a3;
  *(_OWORD *)(v6 + 289) = 0u;
  *((_DWORD *)v6 + 1739) = 1;
  *((unsigned char *)v6 + 2064) = 1;
  *((_DWORD *)v6 + 1741) = 1;
  CFDictionaryRef clientstates_file = (const __CFDictionary *)si_read_clientstates_file((uint64_t)v6);
  v6[9] = clientstates_file;
  if (clientstates_file)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(clientstates_file, @"version");
    if (Value)
    {
      valuePtr[0] = 0;
      CFNumberGetValue(Value, kCFNumberIntType, valuePtr);
      if (valuePtr[0] != 1)
      {
        int v31 = *__error();
        __int16 v34 = _SILogForLogForCategory(11);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315906;
          *(void *)&uint8_t buf[4] = "si_validate_and_read_clientstate";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 13002;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = valuePtr[0];
          *(_WORD *)&unsigned char buf[24] = 1024;
          *(_DWORD *)&buf[26] = 1;
          blksize_t v33 = "%s:%d: si_validate_and_read_clientstate: version mismatch %d != %d";
          int v35 = v34;
          uint32_t v36 = 30;
LABEL_48:
          _os_log_error_impl(&dword_1BD672000, v35, OS_LOG_TYPE_ERROR, v33, buf, v36);
          goto LABEL_49;
        }
        goto LABEL_49;
      }
      CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v6[9], @"journalSerialNumber");
      if (v14)
      {
        *(void *)unint64_t valuePtr = 0;
        CFNumberGetValue(v14, kCFNumberSInt64Type, valuePtr);
        if (*(uint64_t *)valuePtr <= 0)
        {
          int v31 = *__error();
          int v41 = _SILogForLogForCategory(11);
          if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = "si_validate_and_read_clientstate";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 13015;
            *(_WORD *)&unsigned char buf[18] = 2048;
            *(void *)&buf[20] = *(void *)valuePtr;
            blksize_t v33 = "%s:%d: si_validate_and_read_clientstate: invalid journal sno %lld";
LABEL_35:
            int v35 = v41;
            uint32_t v36 = 28;
            goto LABEL_48;
          }
          goto LABEL_49;
        }
        v6[265] = *(void *)valuePtr;
        CFNumberRef v15 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v6[9], @"syncCount");
        if (v15)
        {
          valuePtr[0] = 0;
          CFNumberGetValue(v15, kCFNumberIntType, valuePtr);
          if (valuePtr[0] <= 0)
          {
            int v31 = *__error();
            int v45 = _SILogForLogForCategory(11);
            if (!os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
              goto LABEL_49;
            }
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = "si_validate_and_read_clientstate";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 13029;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = valuePtr[0];
            blksize_t v33 = "%s:%d: si_validate_and_read_clientstate: invalid synccount %d";
            goto LABEL_44;
          }
          *((_DWORD *)v6 + 584) = valuePtr[0];
          CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v6[9], @"deferSyncCount");
          if (v16)
          {
            valuePtr[0] = 0;
            CFNumberGetValue(v16, kCFNumberIntType, valuePtr);
            if (valuePtr[0] > 0)
            {
              *((_DWORD *)v6 + 585) = valuePtr[0];
              CFStringRef v17 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v6[9], @"cookie");
              if (v17)
              {
                CFStringRef v18 = v17;
                CFUUIDRef v19 = CFUUIDCreateFromString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v17);
                v6[179] = v19;
                if (v19)
                {
                  *(CFUUIDBytes *)(v6 + 177) = CFUUIDGetUUIDBytes(v19);
                  pthread_mutex_init((pthread_mutex_t *)(v6 + 164), 0);
                  *((_DWORD *)v6 + 15) = *((_DWORD *)v6 + 15) & 1 | (2 * a3);
                  _SIChangeProtectionClassForFilesInDirectory(*((_DWORD *)v6 + 8), a3);
                  *((_DWORD *)v6 + 15) &= ~1u;
                  CFStringRef v20 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v6[9], @"journalName");
                  CFStringRef v21 = v20;
                  if (v20)
                  {
                    int v22 = *((_DWORD *)v6 + 8);
                    CStringPtr = CFStringGetCStringPtr(v20, 0x8000100u);
                    int v24 = openat(v22, CStringPtr, 536870922);
                    if (v24 == -1)
                    {
                      int v48 = *__error();
                      unint64_t v49 = _SILogForLogForCategory(0);
                      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
                      {
                        BOOL v64 = CFStringGetCStringPtr(v21, 0x8000100u);
                        int v65 = __error();
                        size_t v66 = strerror(*v65);
                        *(_DWORD *)long long buf = 136315906;
                        *(void *)&uint8_t buf[4] = "SIOpenJWLIndex";
                        *(_WORD *)&unsigned char buf[12] = 1024;
                        *(_DWORD *)&buf[14] = 13128;
                        *(_WORD *)&unsigned char buf[18] = 2080;
                        *(void *)&buf[20] = v64;
                        *(_WORD *)&buf[28] = 2080;
                        *(void *)&buf[30] = v66;
                        _os_log_error_impl(&dword_1BD672000, v49, OS_LOG_TYPE_ERROR, "%s:%d: Unable to open journal %s err: %s", buf, 0x26u);
                      }
                      *__error() = v48;
                    }
                    else
                    {
                      int v25 = v24;
                      int v26 = *((_DWORD *)v6 + 8);
                      __int16 v27 = CFStringGetCStringPtr(v21, 0x8000100u);
                      __int16 v28 = fd_create_protected(v26, v27, 536870922, 2u);
                      close(v25);
                      if (v28)
                      {
                        v6[289] = v28;
                        _fd_acquire_fd((uint64_t)v28, buf);
                        if (*((unsigned char *)v6 + 2064)
                          && (*((unsigned char *)v6 + 829) & 0x10) == 0
                          && _os_feature_enabled_impl())
                        {
                          _os_feature_enabled_impl();
                        }
                        v6[262] = si_mobile_journal_create((uint64_t)v6);
                      }
                    }
                  }
                  if (!v6[262])
                  {
                    memset(v88, 0, sizeof(v88));
                    long long v87 = 0u;
                    long long v86 = 0u;
                    long long v85 = 0u;
                    long long v84 = 0u;
                    long long v83 = 0u;
                    long long v82 = 0u;
                    long long v81 = 0u;
                    long long v80 = 0u;
                    long long v79 = 0u;
                    long long v78 = 0u;
                    long long v77 = 0u;
                    int v62 = *((_DWORD *)v6 + 585) - 1;
                    memset(buf, 0, sizeof(buf));
                    __sprintf_chk((char *)buf, 0, 0xFFuLL, "%s%d", "deferAttr.", v62);
                    if (v21)
                    {
                      os_log_type_t v63 = CFStringGetCStringPtr(v21, 0x8000100u);
                      if (!strcmp(v63, (const char *)buf)) {
                        *((_DWORD *)v6 + 1740) = 1;
                      }
                    }
                  }
                  for (uint64_t i = 0; i != 336; i += 56)
                  {
                    bzero(buf, 0x450uLL);
                    uint64_t v51 = *(int *)((char *)&free_scheduler_settings + i + 48);
                    uint64_t v52 = *(int *)((char *)&free_scheduler_settings + i + 52);
                    if (v51 == 11)
                    {
                      bzero(valuePtr, 0x400uLL);
                      int v53 = fcntl(*((_DWORD *)v6 + 8), 50, valuePtr);
                      if (LOBYTE(valuePtr[0])) {
                        BOOL v54 = v53 < 0;
                      }
                      else {
                        BOOL v54 = 1;
                      }
                      if (v54) {
                        long long v55 = 0;
                      }
                      else {
                        long long v55 = (const char *)valuePtr;
                      }
                      snprintf((char *)buf, 0x450uLL, "%s scheduler for jwl index at %s", *(const char **)((char *)&free_scheduler_settings + i + 40), v55);
                      if (v6[119])
                      {
                        int v67 = __si_assert_copy_extra_625(-1);
                        size_t v68 = v67;
                        CFAllocatorRef v69 = "";
                        if (v67) {
                          CFAllocatorRef v69 = v67;
                        }
                        __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 13167, "newIndex->workqueues.schedulers[schedId]==0", v69);
                        free(v68);
                        if (__valid_fs(-1)) {
                          uint64_t v70 = 2989;
                        }
                        else {
                          uint64_t v70 = 3072;
                        }
                        *(_DWORD *)uint64_t v70 = -559038737;
                        abort();
                      }
                      long long v56 = &v6[v52];
                      if (v56[126])
                      {
                        CFURLRef v71 = __si_assert_copy_extra_625(-1);
                        int v72 = v71;
                        CFURLRef v73 = "";
                        if (v71) {
                          CFURLRef v73 = v71;
                        }
                        __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 13168, "newIndex->workqueues.queues[queueId]==0", v73);
                        free(v72);
                        if (__valid_fs(-1)) {
                          uint64_t v74 = 2989;
                        }
                        else {
                          uint64_t v74 = 3072;
                        }
                        *(_DWORD *)uint64_t v74 = -559038737;
                        abort();
                      }
                      long long v57 = (void **)(v56 + 126);
                      root_scheduler = si_create_root_scheduler((uint64_t)buf);
                      v6[119] = root_scheduler;
                      *long long v57 = si_create_child_queue((uint64_t)root_scheduler);
                    }
                    else
                    {
                      v6[v51 + 108] = 0;
                      v6[v52 + 126] = 0;
                    }
                  }
                  if (SIIsAppleInternal_onceToken != -1) {
                    dispatch_once(&SIIsAppleInternal_onceToken, &__block_literal_global_5267);
                  }
                  if (SIIsAppleInternal_internal)
                  {
                    uint64_t v59 = fd_create_protected(*((_DWORD *)v6 + 8), "activityJournal.1", 536871433, 3u);
                    si_activity_journal_init((uint64_t)(v6 + 273), v59);
                    fd_mark_purgable((_DWORD *)v6[273]);
                  }
                  int v60 = dispatch_queue_attr_make_with_qos_class(MEMORY[0x1E4F14430], QOS_CLASS_BACKGROUND, 0);
                  dispatch_queue_t v61 = dispatch_queue_create("com.apple.spotlight.index.journal.toc", v60);
                  uint64_t result = 0;
                  v6[147] = v61;
                  *a2 = v6;
                  return result;
                }
                int v31 = *__error();
                int v41 = _SILogForLogForCategory(11);
                if (!os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_49;
                }
                *(_DWORD *)long long buf = 136315650;
                *(void *)&uint8_t buf[4] = "si_validate_and_read_clientstate";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 13056;
                *(_WORD *)&unsigned char buf[18] = 2112;
                *(void *)&buf[20] = v18;
                blksize_t v33 = "%s:%d: si_validate_and_read_clientstate: invalid cookie %@";
                goto LABEL_35;
              }
              int v31 = *__error();
              __int16 v32 = _SILogForLogForCategory(11);
              if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 136315394;
                *(void *)&uint8_t buf[4] = "si_validate_and_read_clientstate";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 13061;
                blksize_t v33 = "%s:%d: si_validate_and_read_clientstate: cookie not found";
                goto LABEL_47;
              }
LABEL_49:
              *__error() = v31;
              int v46 = *__error();
              __darwin_time_t v47 = _SILogForLogForCategory(11);
              if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 136315394;
                *(void *)&uint8_t buf[4] = "SIOpenJWLIndex";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 13106;
                _os_log_error_impl(&dword_1BD672000, v47, OS_LOG_TYPE_ERROR, "%s:%d: Invalid client state file, can't open jwlindex", buf, 0x12u);
              }
              *__error() = v46;
              pthread_mutex_destroy((pthread_mutex_t *)(v6 + 203));
              pthread_rwlock_destroy((pthread_rwlock_t *)(v6 + 10));
              free(v6);
              return 4294967293;
            }
            int v31 = *__error();
            int v45 = _SILogForLogForCategory(11);
            if (!os_log_type_enabled(v45, OS_LOG_TYPE_ERROR)) {
              goto LABEL_49;
            }
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = "si_validate_and_read_clientstate";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 13043;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = valuePtr[0];
            blksize_t v33 = "%s:%d: si_validate_and_read_clientstate: invalid defersynccount %d";
LABEL_44:
            int v35 = v45;
            uint32_t v36 = 24;
            goto LABEL_48;
          }
          int v31 = *__error();
          __int16 v32 = _SILogForLogForCategory(11);
          if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
            goto LABEL_49;
          }
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = "si_validate_and_read_clientstate";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 13048;
          blksize_t v33 = "%s:%d: si_validate_and_read_clientstate: defersynccount not found";
        }
        else
        {
          int v31 = *__error();
          __int16 v32 = _SILogForLogForCategory(11);
          if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
            goto LABEL_49;
          }
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = "si_validate_and_read_clientstate";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 13034;
          blksize_t v33 = "%s:%d: si_validate_and_read_clientstate: synccount not found";
        }
      }
      else
      {
        int v31 = *__error();
        __int16 v32 = _SILogForLogForCategory(11);
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
          goto LABEL_49;
        }
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = "si_validate_and_read_clientstate";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 13020;
        blksize_t v33 = "%s:%d: si_validate_and_read_clientstate: journal sno not found";
      }
    }
    else
    {
      int v31 = *__error();
      __int16 v32 = _SILogForLogForCategory(11);
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
        goto LABEL_49;
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "si_validate_and_read_clientstate";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 13006;
      blksize_t v33 = "%s:%d: si_validate_and_read_clientstate: version not found";
    }
LABEL_47:
    int v35 = v32;
    uint32_t v36 = 18;
    goto LABEL_48;
  }
  int v29 = *__error();
  __int16 v30 = _SILogForLogForCategory(11);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
  {
    __int16 v42 = __error();
    __darwin_time_t v43 = strerror(*v42);
    int v44 = *__error();
    *(_DWORD *)long long buf = 136315906;
    *(void *)&uint8_t buf[4] = "SIOpenJWLIndex";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 13097;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v43;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = v44;
    _os_log_error_impl(&dword_1BD672000, v30, OS_LOG_TYPE_ERROR, "%s:%d: Unable to read client state file, err: %s(%d)", buf, 0x22u);
  }
  *__error() = v29;
  pthread_mutex_destroy((pthread_mutex_t *)(v6 + 203));
  pthread_rwlock_destroy((pthread_rwlock_t *)(v6 + 10));
  free(v6);
  return 4294967294;
}

DIR *_SIChangeProtectionClassForFilesInDirectory(int a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  bzero(__s, 0x400uLL);
  uint64_t result = (DIR *)fcntl(a1, 50, __s);
  if ((result & 0x80000000) == 0)
  {
    if (__s[0])
    {
      size_t v5 = strlen(__s);
      uint64_t result = opendir(__s);
      if (result)
      {
        int v6 = result;
        if (fcntl(a1, 63) != a2) {
          fcntl(a1, 64, a2);
        }
        if ((a2 - 1) < 2 || a2 == 7) {
          uint64_t v8 = 3;
        }
        else {
          uint64_t v8 = a2;
        }
        while (1)
        {
          int v9 = readdir(v6);
          if (!v9) {
            break;
          }
          int v10 = v9;
          d_os_log_type_t type = v9->d_type;
          if (d_type == 8 || d_type == 4)
          {
            d_name = v9->d_name;
            if (strcmp(v9->d_name, "."))
            {
              if (strcmp(v10->d_name, ".."))
              {
                d_namleuint64_t n = v10->d_namlen;
                if (v5 - 1023 + d_namlen >= 0xFFFFFFFFFFFFFC00)
                {
                  uint64_t v15 = v8;
                  if (a2 <= 7)
                  {
                    uint64_t v15 = v8;
                    if (((1 << a2) & 0x86) != 0)
                    {
                      uint64_t v15 = v8;
                      if (strcmp("tmp.spotlight.state", d_name))
                      {
                        uint64_t v15 = v8;
                        if (strncmp("clientstatesmetafile", d_name, 0x15uLL))
                        {
                          uint64_t v15 = v8;
                          if (strncmp("activityJournal.", d_name, 0x10uLL))
                          {
                            uint64_t v15 = v8;
                            if (strncmp("tmp.store.recovery.", d_name, 0x13uLL))
                            {
                              uint64_t v15 = v8;
                              if (strncmp("store.updates", d_name, 0xDuLL))
                              {
                                uint64_t v15 = v8;
                                if (!strstr(d_name, "indexHead"))
                                {
                                  uint64_t v15 = v8;
                                  if (!strstr(d_name, "indexState"))
                                  {
                                    uint64_t v15 = v8;
                                    if (!strstr(d_name, "indexBigDates"))
                                    {
                                      uint64_t v15 = v8;
                                      if (!strstr(d_name, "indexScores"))
                                      {
                                        uint64_t v15 = v8;
                                        if (!strstr(d_name, "indexGroups"))
                                        {
                                          uint64_t v15 = v8;
                                          if (!strstr(d_name, "indexIds"))
                                          {
                                            uint64_t v15 = v8;
                                            if (!strstr(d_name, "indexPositionTable"))
                                            {
                                              uint64_t v15 = v8;
                                              if (!strstr(d_name, "indexPositions"))
                                              {
                                                uint64_t v15 = v8;
                                                if (!strstr(d_name, "indexPostings"))
                                                {
                                                  uint64_t v15 = v8;
                                                  if (!strstr(d_name, "indexTermIds"))
                                                  {
                                                    uint64_t v15 = v8;
                                                    if (!strstr(d_name, "directoryStoreFile"))
                                                    {
                                                      uint64_t v15 = v8;
                                                      if (!strstr(d_name, "shadowIndexGroups"))
                                                      {
                                                        uint64_t v15 = v8;
                                                        if (!strstr(d_name, "shadowIndexHead"))
                                                        {
                                                          uint64_t v15 = v8;
                                                          if (!strstr(d_name, "shadowIndexPositionTable"))
                                                          {
                                                            uint64_t v15 = v8;
                                                            if (!strstr(d_name, "shadowIndexTermIds"))
                                                            {
                                                              uint64_t v15 = v8;
                                                              if (!strstr(d_name, "bgassertions"))
                                                              {
                                                                uint64_t v15 = v8;
                                                                if (strncmp("remapping", d_name, 9uLL))
                                                                {
                                                                  if (strncmp("dbStr", d_name, 5uLL)
                                                                    || (uint64_t v15 = v8, strstr(d_name, ".data")))
                                                                  {
                                                                    if (d_namlen < 4
                                                                      || (uint64_t v15 = v8,
                                                                          strncmp(&d_name[d_namlen - 3], "toc", 3uLL)))
                                                                    {
                                                                      uint64_t v15 = v8;
                                                                      if (!strstr(d_name, "errorFile"))
                                                                      {
                                                                        CFStringRef v18 = strstr(d_name, "vectorIndexDrops.plist");
                                                                        uint64_t v15 = v18 ? v8 : 7;
                                                                        if (a2 != 7 && !v18)
                                                                        {
                                                                          if (strstr(d_name, "journalAttr.")
                                                                            || strstr(d_name, "assertedJournalAttr.1")
                                                                            || strstr(d_name, "deferattr."))
                                                                          {
                                                                            uint64_t v15 = 2;
                                                                          }
                                                                          else if (strstr(d_name, "journalRepair."))
                                                                          {
                                                                            uint64_t v15 = 2;
                                                                          }
                                                                          else
                                                                          {
                                                                            uint64_t v15 = a2;
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  int v16 = openat(v6->__dd_fd, d_name, 0x8000);
                  if (v16 != -1)
                  {
                    int v17 = v16;
                    if (fcntl(v16, 63) != v15) {
                      fcntl(v17, 64, v15);
                    }
                    close(v17);
                  }
                }
              }
            }
          }
        }
        return (DIR *)closedir(v6);
      }
    }
  }
  return result;
}

DIR *_SISetProtectionClass(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a1 + 60) & 1 | (2 * a2);
  return _SIChangeProtectionClassForFilesInDirectory(*(_DWORD *)(a1 + 32), a2);
}

uint64_t _SISetPriority(uint64_t result, int a2)
{
  *(_DWORD *)(result + 60) = *(_DWORD *)(result + 60) & 0xFFFFFFFE | a2;
  return result;
}

void SICloseJWLIndex(uint64_t a1)
{
  if (a1)
  {
    si_scheduler_boost_and_forget(*(void *)(a1 + 952));
    double Current = CFAbsoluteTimeGetCurrent();
    _SIShutdownIndexSchedulers(a1, 0, 0, Current);
    uint64_t v3 = *(void *)(a1 + 952);
    if (v3 && atomic_fetch_add((atomic_uint *volatile)(v3 + 88), 0xFFFFFFFF) == 1) {
      _si_scheduler_destroy(v3);
    }
    int v4 = *(atomic_uint **)(a1 + 2096);
    if (v4 && atomic_fetch_add(v4, 0xFFFFFFFF) == 1) {
      _si_mobile_journal_finalize((uint64_t)v4, 1);
    }
    size_t v5 = *(atomic_uint **)(a1 + 2104);
    if (v5 && atomic_fetch_add(v5, 0xFFFFFFFF) == 1) {
      _si_mobile_journal_finalize((uint64_t)v5, 1);
    }
    int v6 = *(atomic_uint **)(a1 + 2312);
    if (v6) {
      fd_release(v6);
    }
    uint64_t v7 = *(atomic_uint **)(a1 + 2320);
    if (v7) {
      fd_release(v7);
    }
    if (SIIsAppleInternal_onceToken != -1) {
      dispatch_once(&SIIsAppleInternal_onceToken, &__block_literal_global_5267);
    }
    if (SIIsAppleInternal_internal)
    {
      SIActivityJournalClose((os_unfair_lock_s *)(a1 + 2184));
      uint64_t v8 = *(atomic_uint **)(a1 + 2184);
      *(void *)(a1 + 2184) = 0;
      if (v8) {
        fd_release(v8);
      }
    }
    dispatch_release(*(dispatch_object_t *)(a1 + 1176));
    int v9 = *(const void **)(a1 + 72);
    if (v9) {
      CFRelease(v9);
    }
    *(void *)(a1 + 72) = 0;
    int v10 = *(const void **)(a1 + 1432);
    if (v10) {
      CFRelease(v10);
    }
    *(void *)(a1 + 1432) = 0;
    pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1624));
    pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 80));
    pthread_mutex_destroy((pthread_mutex_t *)(a1 + 1312));
    *(_OWORD *)CFArrayRef v11 = *(_OWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = -1;
    if (v11[0] != -1)
    {
      if (*(void *)&v11[2]) {
        guarded_close_np();
      }
      else {
        close(v11[0]);
      }
    }
    free((void *)a1);
  }
}

uint64_t SIOpenIndex(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, void *a6, long long *a7, uint64_t a8, uint64_t a9, _DWORD *a10)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  makeThreadId();
  if (freeQueueOnce[0] != -1) {
    dispatch_once(freeQueueOnce, &__block_literal_global_675);
  }
  int v16 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v17 = setThreadIdAndInfo(a2, sFdExceptionCallbacks, 0, 1, v16);
  unsigned int v68 = HIDWORD(v17);
  unsigned int v69 = v17;
  unsigned int v66 = v19;
  unsigned int v67 = v18;
  uint64_t v20 = *(void *)&threadData[18 * v17 + 2];
  uint64_t v21 = v20 + 320 * HIDWORD(v17);
  *(unsigned char *)(v21 + 216) = 0;
  int v62 = *(_DWORD *)(v21 + 312);
  int v22 = *(void (**)(void))(v21 + 224);
  if (v22) {
    v22(*(void *)(v20 + 320 * HIDWORD(v17) + 288));
  }
  int v23 = (int **)a1;
  if (_setjmp((int *)v21))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)CFURLRef v71 = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v71, 2u);
    }
    *(_DWORD *)(v21 + 312) = v62;
    CIOnThreadCleanUpReset(v66);
    dropThreadId(v69, 1, v16);
    CICleanUpReset(v69, v67);
    uint64_t v24 = 0xFFFFFFFFLL;
    goto LABEL_73;
  }
  long long v64 = *a7;
  uint64_t v65 = *((void *)a7 + 2);
  double Current = CFAbsoluteTimeGetCurrent();
  if (a8)
  {
    int v26 = *(void (**)(void))(a8 + 24);
    *(void *)(a8 + 24) = 0;
  }
  else
  {
    int v26 = 0;
  }
  char v78 = 0;
  if (a6)
  {
    uint64_t v77 = 0;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    *(_OWORD *)CFURLRef v71 = 0u;
    long long v72 = 0u;
    *(_OWORD *)long long buf = v64;
    *(void *)&uint8_t buf[16] = v65;
    uint64_t v27 = _SIOpenIndex((uint64_t)a1, a2, a3, a4, a5, (uint64_t)v71, (uint64_t)buf, a8, a9, &v78, a10);
    if ((v27 & 0x80000000) != 0)
    {
      if (v78)
      {
        int v36 = *__error();
        if (v36) {
          int v37 = v36;
        }
        else {
          int v37 = -1;
        }
        if ((a5 & 0x100) != 0 || v37 == 28) {
          char v78 = 0;
        }
        int v33 = v37;
LABEL_26:
        int v60 = v26;
        unsigned int v70 = -1;
        if (a2 == -1 || (fd_setDir(a2, (int *)&v70) & 1) == 0)
        {
          int v38 = v16;
          char v39 = 1;
        }
        else
        {
          int v38 = v16;
          char v39 = 0;
        }
        int v40 = *__error();
        int v41 = _SILogForLogForCategory(11);
        os_log_type_t v42 = 2 * (dword_1E9FC90D0 < 4);
        if (os_log_type_enabled(v41, v42))
        {
          if (__si_error_str_key) {
            __darwin_time_t v43 = pthread_getspecific(__si_error_str_key);
          }
          else {
            __darwin_time_t v43 = 0;
          }
          *(_DWORD *)long long buf = 134218498;
          *(void *)&uint8_t buf[4] = a1;
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v27;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v43;
          _os_log_impl(&dword_1BD672000, v41, v42, "%p _SIOpenIndex: %d %s", buf, 0x1Cu);
        }
        *__error() = v40;
        if ((v39 & 1) == 0)
        {
          int v44 = v70;
          MEMORY[0x1C1882290](v70);
          if ((v44 & 0x80000000) == 0) {
            close(v44);
          }
        }
        uint64_t v35 = v27;
        int v34 = v33;
        int v16 = v38;
        int v26 = v60;
        if (a8) {
          goto LABEL_39;
        }
        goto LABEL_40;
      }
    }
    else
    {
      uint64_t v28 = *((void *)&v74 + 1);
      a6[8] = v74;
      uint64_t v29 = *(void *)&v71[8];
      long long v30 = v72;
      a6[6] = *(void *)v71;
      a6[7] = *((void *)&v30 + 1);
      uint64_t v31 = *((void *)&v73 + 1);
      a6[4] = v73;
      a6[5] = v28;
      uint64_t v32 = v77;
      a6[2] = v75;
      a6[3] = v29;
      *a6 = v30;
      a6[1] = v31;
      a6[11] = v32;
    }
    int v33 = -1;
    goto LABEL_26;
  }
  int v34 = -1;
  uint64_t v35 = 4294967294;
  if (a8) {
LABEL_39:
  }
    *(void *)(a8 + 24) = v26;
LABEL_40:
  if ((v35 & 0x80000000) == 0)
  {
    if ((a5 & 0xC) == 0)
    {
      uint64_t v45 = *a1;
      if (*a1)
      {
        int v46 = SICopyProperty(*a1, @"kSIRepairSizes");
        if (!v46)
        {
          if ((*(_DWORD *)(v45 + 6576) & 0x180000) != 0x100000)
          {
            __darwin_time_t v47 = SICopyProperty(v45, @"kSIConsistencyCheck");
            if (!v47) {
              goto LABEL_54;
            }
            CFRelease(v47);
          }
          si_repair_sizes(v45);
          goto LABEL_54;
        }
        CFRelease(v46);
      }
    }
LABEL_54:
    bumpWorkTime(*a1, Current);
    if (v35 != 1 && *(unsigned char *)(*a1 + 2064))
    {
      uint64_t v48 = *(void *)(*a1 + 1376);
      unsigned int v49 = *(_DWORD *)(v48 + 8);
      if (v49 >= 2)
      {
        unsigned int v50 = count_IndexSet(v48, v49 - 2, 1);
        analytics_send_event_lazy();
        if (v50 <= 3 && (v50 != 3 || gSISystemOnBattery))
        {
          uint64_t v51 = a1;
          if (v50 == 3)
          {
            uint64_t v59 = *(void *)(*a1 + 2352);
            if (v59)
            {
              if (*(void *)(v59 + 80))
              {
                *(void *)CFURLRef v71 = MEMORY[0x1E4F143A8];
                *(void *)&v71[8] = 0x40000000;
                *(void *)&long long v72 = __OpenIndex_block_invoke_3;
                *((void *)&v72 + 1) = &__block_descriptor_tmp_971;
                *(void *)&long long v73 = 3;
                analytics_send_event_lazy();
                (*(void (**)(void, void, __CFString *, void *))(*(void *)(*a1 + 2352) + 80))(*(void *)(*(void *)(*a1 + 2352) + 144), 0, @"IndexOpenCompact", &__block_literal_global_977);
              }
            }
          }
        }
        else
        {
          *(void *)CFURLRef v71 = MEMORY[0x1E4F143A8];
          *(void *)&v71[8] = 0x40000000;
          *(void *)&long long v72 = __OpenIndex_block_invoke_2;
          *((void *)&v72 + 1) = &__block_descriptor_tmp_969;
          *(void *)&long long v73 = v50;
          analytics_send_event_lazy();
          uint64_t v51 = a1;
          setupAndIssueMergeCleanup(*a1, *(void *)(**(void **)(*a1 + 1376) + 8 * (*(_DWORD *)(*(void *)(*a1 + 1376) + 8) - 2)), 0);
        }
        unsigned int v52 = count_UncompactedIndexSet(*(void *)(*v51 + 1376), *(_DWORD *)(*(void *)(*v51 + 1376) + 8) - 2);
        if (v52)
        {
          if (gSISystemOnBattery && (uint64_t v53 = *(void *)(*a1 + 2352)) != 0 && *(void *)(v53 + 80))
          {
            *(void *)long long buf = MEMORY[0x1E4F143A8];
            *(void *)&uint8_t buf[8] = 0x40000000;
            *(void *)&uint8_t buf[16] = __OpenIndex_block_invoke_5;
            *(void *)&unsigned char buf[24] = &__block_descriptor_tmp_979;
            uint64_t v80 = v52;
            analytics_send_event_lazy();
            (*(void (**)(void, void, __CFString *, void *))(*(void *)(*a1 + 2352) + 80))(*(void *)(*(void *)(*a1 + 2352) + 144), 0, @"IndexOpenCompact", &__block_literal_global_982);
          }
          else
          {
            *(void *)long long buf = MEMORY[0x1E4F143A8];
            *(void *)&uint8_t buf[8] = 0x40000000;
            *(void *)&uint8_t buf[16] = __OpenIndex_block_invoke_8;
            *(void *)&unsigned char buf[24] = &__block_descriptor_tmp_986;
            uint64_t v80 = v52;
            analytics_send_event_lazy();
            setupAndIssueMergeCleanup(*a1, *(void *)(**(void **)(*a1 + 1376)+ 8 * (*(_DWORD *)(*(void *)(*a1 + 1376) + 8) - 2)), 0);
          }
        }
      }
      int v23 = (int **)a1;
      int v54 = CleanupWritableIndexes(*(void *)(*a1 + 1376));
      if ((CleanupWritableIndexes(*(void *)(*a1 + 1384)) & 1) != 0 || v54) {
        SISyncIndex(*a1);
      }
    }
    goto LABEL_70;
  }
  if (v35 == -1 && v26)
  {
    v26(a8);
LABEL_49:
    *__error() = v34;
    goto LABEL_70;
  }
  if (v35 == -1) {
    goto LABEL_49;
  }
LABEL_70:
  uint64_t v55 = *(void *)&threadData[18 * v69 + 2];
  uint64_t v56 = v55 + 320 * v68;
  *(_DWORD *)(v56 + 312) = v62;
  long long v57 = *(void (**)(void))(v56 + 232);
  if (v57) {
    v57(*(void *)(v55 + 320 * v68 + 288));
  }
  dropThreadId(v69, 0, v16);
  uint64_t v24 = v35;
LABEL_73:
  _si_log_indexes(*v23);
  return v24;
}

uint64_t si_repair_sizes(uint64_t result)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (*(void *)(result + 1184))
  {
    uint64_t v1 = result;
    if (!*(unsigned char *)(result + 1280))
    {
      uint64_t v2 = *(void *)(result + 2352);
      if (v2)
      {
        if (*(void *)(v2 + 40))
        {
          unsigned int v42 = 0;
          uint64_t result = fd_setDir(*(unsigned int *)(result + 32), (int *)&v42);
          if (result)
          {
            int v3 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
            unint64_t v4 = setThreadIdAndInfo(*(_DWORD *)(v1 + 32), sFdExceptionCallbacks, 0, 1, v3);
            unsigned int v40 = HIDWORD(v4);
            unsigned int v41 = v4;
            unsigned int v38 = v6;
            unsigned int v39 = v5;
            uint64_t v7 = *(void *)&threadData[18 * v4 + 2];
            uint64_t v8 = v7 + 320 * HIDWORD(v4);
            *(unsigned char *)(v8 + 216) = 0;
            int v9 = *(_DWORD *)(v8 + 312);
            int v10 = *(void (**)(void))(v8 + 224);
            if (v10) {
              v10(*(void *)(v7 + 320 * HIDWORD(v4) + 288));
            }
            unsigned int v37 = v41;
            unsigned int v36 = v40;
            unsigned int v35 = v39;
            unsigned int v34 = v38;
            if (_setjmp((int *)v8))
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)long long buf = 0;
                _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
              }
              *(_DWORD *)(v8 + 312) = v9;
              CIOnThreadCleanUpReset(v34);
              dropThreadId(v37, 1, v3);
              CICleanUpReset(v37, v35);
            }
            else
            {
              int v11 = *__error();
              os_log_type_t v12 = _SILogForLogForCategory(4);
              if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl(&dword_1BD672000, v12, OS_LOG_TYPE_DEFAULT, "Gathering size data for repair", buf, 2u);
              }
              *__error() = v11;
              CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              CFDictionaryRef Mutable = (const void *)RLEOIDArrayCreateMutable((const __CFAllocator *)*MEMORY[0x1E4F1CF80]);
              uint64_t v15 = (const void *)RLEOIDArrayCreateMutable(v13);
              *(void *)long long buf = 0;
              uint64_t v31 = buf;
              uint64_t v32 = 0x2000000000;
              uint64_t v33 = 0;
              v29[0] = 0;
              v29[1] = v29;
              void v29[2] = 0x2000000000;
              v29[3] = 0;
              uint64_t v16 = *(void *)(v1 + 1384);
              uint64_t v17 = *(void *)(v1 + 1376);
              v28[0] = MEMORY[0x1E4F143A8];
              v28[1] = 0x40000000;
              v28[2] = __si_repair_sizes_block_invoke;
              v28[3] = &unk_1E6342088;
              v28[6] = Mutable;
              v28[7] = v15;
              v28[4] = v29;
              v28[5] = buf;
              ContentIndexListsApply(v16, v17, (uint64_t)v28);
              uint64_t v18 = si_repair_size_for_oids(v1);
              CFRelease(v15);
              uint64_t v19 = si_repair_size_for_oids(v1);
              CFRelease(Mutable);
              CFStringRef v20 = CFStringCreateWithCString(v13, (const char *)sysVersionCStr, 0x8000100u);
              si_set_property(v1, @"kSIRepairSizes", v20, 1, 0);
              CFRelease(v20);
              int v21 = *__error();
              int v22 = _SILogForLogForCategory(4);
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__darwin_time_t v43 = 134218240;
                uint64_t v44 = v18;
                __int16 v45 = 2048;
                uint64_t v46 = v19;
                _os_log_impl(&dword_1BD672000, v22, OS_LOG_TYPE_DEFAULT, "Gathering size data for repair (%lld, %lld)", v43, 0x16u);
              }
              *__error() = v21;
              uint64_t v23 = *(void *)&threadData[18 * v37 + 2];
              unsigned int v24 = v36;
              uint64_t v25 = v23 + 320 * v36;
              *(_DWORD *)(v25 + 312) = v9;
              int v26 = *(void (**)(void))(v25 + 232);
              if (v26) {
                v26(*(void *)(v23 + 320 * v24 + 288));
              }
              dropThreadId(v37, 0, v3);
              _Block_object_dispose(v29, 8);
              _Block_object_dispose(buf, 8);
            }
            int v27 = v42;
            uint64_t result = MEMORY[0x1C1882290](v42);
            if ((v27 & 0x80000000) == 0) {
              return close(v27);
            }
          }
        }
      }
    }
  }
  return result;
}

xpc_object_t __OpenIndex_block_invoke_2(uint64_t a1)
{
  return xpc_uint64_create(*(void *)(a1 + 32));
}

void setupAndIssueMergeCleanup(uint64_t a1, int a2, NSObject *a3)
{
  int v37 = a2;
  int v38 = 0;
  BOOL v6 = si_needsVaccuum(*(uint64_t **)(a1 + 1376), &v37, &v38);
  uint64_t v7 = *(uint64_t **)(a1 + 1376);
  int v8 = *((_DWORD *)v7 + 2);
  if (!v8) {
    return;
  }
  BOOL v9 = v6;
  int v10 = 0;
  unsigned int v11 = 0;
  int v12 = 0;
  unsigned int v13 = 0;
  uint64_t v14 = 0;
  unsigned int v15 = v8 - 1;
  uint64_t v16 = 8 * (v8 - 1);
  while (1)
  {
    uint64_t v17 = *(void *)(*v7 + v16);
    if (*(_DWORD *)(v17 + 56) != a2)
    {
      uint64_t v17 = v14;
      goto LABEL_8;
    }
    char v18 = atomic_load((unsigned int *)(v17 + 36));
    if ((v18 & 3) == 0 && !*(unsigned char *)(v17 + 15203)) {
      break;
    }
    int v12 = *(_DWORD *)(v17 + 40);
    int v10 = 1;
    unsigned int v13 = v15;
    unsigned int v11 = v15;
    uint64_t v14 = *(void *)(*v7 + v16);
LABEL_8:
    v16 -= 8;
    if (--v15 == -1)
    {
      if (!v10) {
        return;
      }
      goto LABEL_10;
    }
  }
  unsigned int v13 = v15;
  unsigned int v11 = v15;
  if (!v10) {
    return;
  }
LABEL_10:
  uint64_t v19 = *((unsigned int *)v7 + 2);
  uint64_t v20 = *v7;
  if (v19)
  {
    while (1)
    {
      uint64_t v21 = (v19 - 1);
      if (*(_DWORD *)(*(void *)(v20 + 8 * v21) + 40) == v12) {
        break;
      }
      --v19;
      if (!v21) {
        goto LABEL_25;
      }
    }
    uint64_t v22 = 0;
    int v23 = 1;
    unsigned int v13 = v19;
    while (v19 + v22)
    {
      uint64_t v24 = *(void *)(*v7 + 8 * (v19 + v22 - 1));
      if (*(_DWORD *)(v24 + 40) == v12
        || *(_DWORD *)(v24 + 52) == *(_DWORD *)(v17 + 52)
        || (char v25 = atomic_load((unsigned int *)(v24 + 36)), (v25 & 4) == 0))
      {
        ++v23;
        unsigned int v13 = v19 - 1 + v22;
      }
      char v26 = atomic_load((unsigned int *)(v24 + 36));
      if ((v26 & 3) == 0 && !*(unsigned char *)(v24 + 15203)) {
        break;
      }
      --v22;
    }
    if (v23)
    {
      uint64_t v20 = *v7;
      goto LABEL_25;
    }
  }
  else
  {
LABEL_25:
    uint64_t v27 = *(void *)(v20 + 8 * v13);
    unsigned int v28 = v11 + 1;
    if (v27) {
      BOOL v29 = v28 == v13;
    }
    else {
      BOOL v29 = 1;
    }
    if (!v29)
    {
      int v30 = *(_DWORD *)(v27 + 56);
      unsigned int v31 = v28 - v13;
      uint64_t v32 = (char *)malloc_type_calloc(1uLL, 0x460uLL, 0x1070040C187FD8AuLL);
      *(void *)uint64_t v32 = a1;
      v32[16] = 1;
      v32[1041] = v9;
      *((_DWORD *)v32 + 2) = v30;
      *((_DWORD *)v32 + 3) = v31;
      v32[1042] = 0;
      *((void *)v32 + 131) = "void setupAndIssueMergeCleanup(SIRef, int32_t, _Bool, xpc_activity_t, _Bool *, dispatch_group_t)";
      *((_DWORD *)v32 + 274) = 9;
      v32[1100] = 1;
      __strlcpy_chk();
      uint64_t v33 = v32 + 1064;
      si_power_info_init((uint64_t)(v32 + 1064), 0, 0, a3);
      if (!*((void *)v32 + 136) && !*v33)
      {
        uint64_t v34 = *(void *)(a1 + 2352);
        if (v34)
        {
          unsigned int v35 = *(uint64_t (**)(void, const char *, uint64_t, const char *))(v34 + 64);
          if (v35) {
            _DWORD *v33 = v35(*(void *)(v34 + 144), "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 9027, "void setupAndIssueMergeCleanup(SIRef, int32_t, _Bool, xpc_activity_t, _Bool *, dispatch_group_t)");
          }
        }
      }
      uint64_t v36 = *(void *)(a1 + 1056);
      si_enqueue_work(v36, (uint64_t)si_mergeIndex, (uint64_t)v32);
    }
  }
}

xpc_object_t __OpenIndex_block_invoke_3(uint64_t a1)
{
  return xpc_uint64_create(*(void *)(a1 + 32));
}

uint64_t count_UncompactedIndexSet(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 <= a2) {
    return 0;
  }
  unsigned int v3 = 0;
  if ((a2 & 0x80000000) == 0)
  {
    int v4 = 1;
    uint64_t v5 = a2;
    do
    {
      uint64_t v6 = *(void *)(*(void *)a1 + 8 * v5);
      char v7 = atomic_load((unsigned int *)(v6 + 36));
      if ((v7 & 3) == 0 && !*(unsigned char *)(v6 + 15203)) {
        break;
      }
      char v8 = atomic_load((unsigned int *)(*(void *)(*(void *)a1 + 8 * v5) + 36));
      if ((v8 & 4) == 0) {
        unsigned int v3 = v4;
      }
      ++v4;
    }
    while (v5-- > 0);
    unsigned int v2 = *(_DWORD *)(a1 + 8);
  }
  if (v2 >= v3) {
    return v3;
  }
  else {
    return v2;
  }
}

xpc_object_t __OpenIndex_block_invoke_5(uint64_t a1)
{
  return xpc_uint64_create(*(void *)(a1 + 32));
}

xpc_object_t __OpenIndex_block_invoke_8(uint64_t a1)
{
  return xpc_uint64_create(*(void *)(a1 + 32));
}

uint64_t CleanupWritableIndexes(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) < 2u)
  {
    char v3 = 0;
  }
  else
  {
    uint64_t v2 = 0;
    char v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(*(void *)a1 + 8 * v2);
      char v5 = atomic_load((unsigned int *)(v4 + 36));
      if ((v5 & 3) == 0 && !*(unsigned char *)(v4 + 15203))
      {
        _CIDisableUpdates(*(void *)(*(void *)a1 + 8 * v2));
        char v3 = 1;
      }
      unint64_t v6 = v2 + 2;
      ++v2;
    }
    while (v6 < *(unsigned int *)(a1 + 8));
  }
  return v3 & 1;
}

void __OpenIndex_block_invoke_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v5 = *(void *)(a2 + 1096);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 0x40000000;
    v6[2] = __OpenIndex_block_invoke_7;
    v6[3] = &__block_descriptor_tmp_984;
    void v6[4] = a2;
    v6[5] = a5;
    si_enqueue_block(v5, v6);
  }
}

void __OpenIndex_block_invoke_7(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 1376);
  if (count_UncompactedIndexSet(v2, *(_DWORD *)(v2 + 8) - 2))
  {
    uint64_t v3 = *(void *)(*(void *)v2 + 8 * (*(_DWORD *)(v2 + 8) - 2));
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(NSObject **)(a1 + 40);
    setupAndIssueMergeCleanup(v4, v3, v5);
  }
}

void __OpenIndex_block_invoke_4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 + 1376);
    if (v3)
    {
      unsigned int v4 = *(_DWORD *)(v3 + 8);
      if (v4 >= 3 && count_IndexSet(v3, v4 - 2, 1) >= 3)
      {
        uint64_t v5 = *(void *)(*(void *)v3 + 8 * (*(_DWORD *)(v3 + 8) - 2));
        setupAndIssueMergeCleanup(a2, v5, 0);
      }
    }
  }
}

xpc_object_t __OpenIndex_block_invoke()
{
  return xpc_uint64_create(1uLL);
}

uint64_t __si_repair_sizes_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8))
  {
    int v4 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
    unint64_t v5 = setThreadIdAndInfo(-1, (long long *)sIndexExceptionCallbacks, a2, 0, v4);
    unsigned int v34 = HIDWORD(v5);
    *(_DWORD *)long long buf = v5;
    unint64_t v33 = __PAIR64__(v6, v7);
    uint64_t v8 = *(void *)&threadData[18 * v5 + 2];
    uint64_t v9 = v8 + 320 * HIDWORD(v5);
    *(unsigned char *)(v9 + 216) = 0;
    int v10 = *(_DWORD *)(v9 + 312);
    unsigned int v11 = *(void (**)(void))(v9 + 224);
    if (v11) {
      v11(*(void *)(v8 + 320 * HIDWORD(v5) + 288));
    }
    unsigned int v32 = *(_DWORD *)buf;
    unsigned int v31 = v34;
    unint64_t v30 = v33;
    if (_setjmp((int *)v9))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)BOOL v29 = 0;
        _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v29, 2u);
      }
      *(_DWORD *)(v9 + 312) = v10;
      CIOnThreadCleanUpReset(v30);
      dropThreadId(v32, 1, v4);
      CICleanUpReset(v32, HIDWORD(v30));
    }
    else
    {
      int v28 = v10;
      uint64_t v12 = *(void *)(a2 + 14432);
      if (v12)
      {
        uint64_t v27 = *(void *)(a2 + 14408);
        if (v27)
        {
          uint64_t v13 = *(unsigned int *)(a2 + 68);
          if (v13 >= 2)
          {
            char v14 = 6;
            int v15 = *(unsigned __int8 *)(a2 + 45);
            for (uint64_t i = 1; i != v13; ++i)
            {
              if (v15) {
                int v17 = *(unsigned __int8 *)(v12 + i);
              }
              else {
                int v17 = (*(_DWORD *)(v12 + (((3435973837u * (unint64_t)i) >> 32) & 0xFFFFFFFC)) >> (v14 - 30 * (i / 5))) & 0x3F;
              }
              unsigned int v18 = v17 & 0xFFFFFFDF;
              if (v18)
              {
                BOOL v19 = v18 == 17;
                uint64_t v20 = 56;
                if (v19)
                {
                  uint64_t v20 = 48;
                  uint64_t v21 = 32;
                }
                else
                {
                  uint64_t v21 = 40;
                }
                SIValueSet<unsigned long long>::SIValueSetInsert((unint64_t *)(*(void *)(a1 + v20) + 216), *(void *)(v27 + 8 * i));
                ++*(void *)(*(void *)(*(void *)(a1 + v21) + 8) + 24);
              }
              v14 += 6;
            }
          }
        }
      }
      uint64_t v22 = *(void *)&threadData[18 * v32 + 2];
      unsigned int v23 = v31;
      uint64_t v24 = v22 + 320 * v31;
      *(_DWORD *)(v24 + 312) = v28;
      char v25 = *(void (**)(void))(v24 + 232);
      if (v25) {
        v25(*(void *)(v22 + 320 * v23 + 288));
      }
      dropThreadId(v32, 0, v4);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO, "Skipping because index is shut down", buf, 2u);
  }
  return 1;
}

uint64_t si_repair_size_for_oids(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  if (v1) {
    RLEOIDIteratorCreate(v1);
  }
  return 0;
}

void SICalculateSize(uint64_t a1, void (*a2)(uint64_t, void), uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 1016);
  if (v4)
  {
    unsigned int v6 = malloc_type_malloc(0x18uLL, 0xA00402214FCE6uLL);
    v6[2] = a3;
    void *v6 = a1;
    v6[1] = a2;
    si_enqueue_work(v4, (uint64_t)si_get_size, (uint64_t)v6);
  }
  else
  {
    a2(a3, 0);
  }
}

void si_get_size(void *a1, int a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v3 = 0;
    goto LABEL_25;
  }
  uint64_t v4 = (void *)*a1;
  uint64_t v5 = *(void *)(*a1 + 1384);
  uint64_t v6 = *(void *)(*a1 + 1376);
  if (v5 && *(int *)(v5 + 8) >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v3 = 0;
    do
      v3 += ContentIndexCalculateSize(*(void *)(*(void *)v5 + 8 * v7++), 6);
    while (v7 < *(int *)(v5 + 8));
    if (!v6) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if (!v6) {
      goto LABEL_13;
    }
  }
  if (*(int *)(v6 + 8) >= 1)
  {
    uint64_t v8 = 0;
    do
      v3 += ContentIndexCalculateSize(*(void *)(*(void *)v6 + 8 * v8++), 6);
    while (v8 < *(int *)(v6 + 8));
  }
LABEL_13:
  uint64_t v9 = v4[148];
  if (v9)
  {
    if (*(_DWORD *)v9 != 1685287992)
    {
      int v17 = *__error();
      unsigned int v18 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        gid_t v19 = *(_DWORD *)v9;
        v23.dev_t st_dev = 136315650;
        *(void *)&v23.int st_mode = "db_get_size";
        WORD2(v23.st_ino) = 1024;
        *(_DWORD *)((char *)&v23.st_ino + 6) = 258;
        HIWORD(v23.st_uid) = 1024;
        v23.st_gid = v19;
        _os_log_error_impl(&dword_1BD672000, v18, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", (uint8_t *)&v23, 0x18u);
      }
      *__error() = v17;
      uint64_t v20 = __si_assert_copy_extra_329();
      uint64_t v21 = v20;
      if (v20) {
        uint64_t v22 = v20;
      }
      else {
        uint64_t v22 = "";
      }
      __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 258, v22);
      free(v21);
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    memset(&v23, 0, sizeof(v23));
    uint64_t v10 = *(void *)(v9 + 848);
    if (!v10) {
      goto LABEL_23;
    }
    while (1)
    {
      int v11 = fstatat(*(_DWORD *)(v10 + 44), *(const char **)(v10 + 72), &v23, 2048);
      uint64_t v12 = g_prot_error_callback;
      if (v11 != -1 || g_prot_error_callback == 0) {
        break;
      }
      uint64_t v14 = *(unsigned int *)(v10 + 40);
      int v15 = __error();
      if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v12 + 16))(v12, v14, *v15, 8) & 1) == 0) {
        goto LABEL_23;
      }
    }
    if (!v11) {
      off_t v16 = 2 * v23.st_size;
    }
    else {
LABEL_23:
    }
      off_t v16 = 0;
    v3 += v16;
  }
LABEL_25:
  ((void (*)(void, uint64_t))a1[1])(a1[2], v3);
  free(a1);
}

uint64_t doFastFlushIndex(uint64_t a1)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  int v2 = getiopolicy_np(0, 1);
  setiopolicy_np(0, 1, 1);
  uint64_t v56 = 1;
  uint64_t v3 = *(int8x16_t **)(a1 + 2352);
  int8x16_t v52 = vextq_s8(*v3, *v3, 8uLL);
  uint64_t v4 = *(void *)(a1 + 1184);
  uint64_t v53 = v3[9].i64[0];
  uint64_t v54 = v4;
  uint64_t v5 = *(void *)(a1 + 1384);
  uint64_t v55 = a1;
  uint64_t v57 = v5;
  uint64_t v6 = *(void *)(a1 + 1376);
  uint64_t v58 = v6;
  uint64_t valuePtr = 0;
  uint64_t valuePtr = *(void *)(a1 + 2128);
  CFNumberRef v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
  if (v7)
  {
    CFNumberRef v8 = v7;
    si_set_property(a1, @"ConsumedJournalSerialNumber", v7, 1, 0);
    CFRelease(v8);
  }
  uint64_t v9 = (pthread_mutex_t *)(a1 + 1560);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1560));
  unsigned int v50 = 0;
  if (fd_setDir(*(unsigned int *)(a1 + 32), (int *)&v50))
  {
    int v10 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
    unint64_t v11 = setThreadIdAndInfo(*(_DWORD *)(a1 + 32), sFdExceptionCallbacks, 0, 1, v10);
    unsigned int v48 = HIDWORD(v11);
    unsigned int v49 = v11;
    unsigned int v46 = v13;
    unsigned int v47 = v12;
    uint64_t v14 = *(void *)&threadData[18 * v11 + 2];
    uint64_t v15 = v14 + 320 * HIDWORD(v11);
    *(unsigned char *)(v15 + 216) = 0;
    int v41 = *(_DWORD *)(v15 + 312);
    off_t v16 = *(void (**)(void))(v15 + 224);
    if (v16) {
      v16(*(void *)(v14 + 320 * HIDWORD(v11) + 288));
    }
    if (_setjmp((int *)v15))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
      }
      *(_DWORD *)(v15 + 312) = v41;
      CIOnThreadCleanUpReset(v46);
      dropThreadId(v49, 1, v10);
      CICleanUpReset(v49, v47);
    }
    else
    {
      int v17 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
      unint64_t v18 = setThreadIdAndInfo(-1, (long long *)sSDBExceptionCallbacks, *(void *)(a1 + 1184), 0x40000000, v17);
      unsigned int v44 = HIDWORD(v18);
      unsigned int v45 = v18;
      unsigned int v42 = v20;
      unsigned int v43 = v19;
      uint64_t v21 = *(void *)&threadData[18 * v18 + 2];
      uint64_t v22 = v21 + 320 * HIDWORD(v18);
      *(unsigned char *)(v22 + 216) = 0;
      int v40 = *(_DWORD *)(v22 + 312);
      stat v23 = *(void (**)(void))(v22 + 224);
      if (v23) {
        v23(*(void *)(v21 + 320 * HIDWORD(v18) + 288));
      }
      if (_setjmp((int *)v22))
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
        }
        *(_DWORD *)(v22 + 312) = v40;
        CIOnThreadCleanUpReset(v42);
        dropThreadId(v45, 1, v17);
        CICleanUpReset(v45, v43);
      }
      else
      {
        _si_store_propery_cache(a1, 0, 1);
        si_storesizes(a1, 0);
        uint64_t v24 = *(void *)(a1 + 2352);
        if (v24)
        {
          char v25 = *(void (**)(void))(v24 + 48);
          if (v25) {
            v25(*(void *)(v24 + 144));
          }
        }
        uint64_t v26 = *(void *)(a1 + 6584);
        *(_OWORD *)long long buf = xmmword_1F1813340;
        *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)&off_1F1813350;
        long long v60 = xmmword_1F1813360;
        long long v61 = *(_OWORD *)off_1F1813370;
        int v62 = &v52;
        int v27 = _ContentIndexSyncIndexBulk(a1 + 1192, v5, v6, 4, 0, (uint64_t)buf, v26, 0, 0);
        uint64_t v28 = *(void *)(a1 + 2352);
        if (v28)
        {
          BOOL v29 = *(void (**)(void))(v28 + 56);
          if (v29) {
            v29(*(void *)(v28 + 144));
          }
        }
        if (v27)
        {
          int v30 = *__error();
          unsigned int v31 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = "doFastFlushIndex";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2001;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = v27;
            _os_log_error_impl(&dword_1BD672000, v31, OS_LOG_TYPE_ERROR, "%s:%d: ContentIndexSyncIndexBulk err:%d", buf, 0x18u);
          }
          *__error() = v30;
        }
        uint64_t v32 = *(void *)&threadData[18 * v45 + 2];
        uint64_t v33 = v32 + 320 * v44;
        *(_DWORD *)(v33 + 312) = v40;
        unsigned int v34 = *(void (**)(void))(v33 + 232);
        if (v34) {
          v34(*(void *)(v32 + 320 * v44 + 288));
        }
        dropThreadId(v45, 0, v17);
      }
      uint64_t v35 = *(void *)&threadData[18 * v49 + 2];
      uint64_t v36 = v35 + 320 * v48;
      *(_DWORD *)(v36 + 312) = v41;
      int v37 = *(void (**)(void))(v36 + 232);
      if (v37) {
        v37(*(void *)(v35 + 320 * v48 + 288));
      }
      dropThreadId(v49, 0, v10);
    }
    int v38 = v50;
    MEMORY[0x1C1882290](v50);
    if ((v38 & 0x80000000) == 0) {
      close(v38);
    }
  }
  pthread_mutex_unlock(v9);
  return setiopolicy_np(0, 1, v2);
}

uint64_t __SIIndexInactive_block_invoke()
{
  if (g_fd_list) {
    return _fd_close_inactive(0xFFFFFFFFLL, 0, 0, 1);
  }
  return result;
}

void si_setstorecookie(uint64_t a1, CFTypeRef cf)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(const void **)(a1 + 1432);
  if (!v4 || !CFEqual(v4, cf))
  {
    CFUUIDRef v5 = (const __CFUUID *)CFRetain(cf);
    *(void *)(a1 + 1432) = v5;
    *(CFUUIDBytes *)(a1 + 1416) = CFUUIDGetUUIDBytes(v5);
    if (*(void *)(a1 + 1184))
    {
      if (!*(unsigned char *)(a1 + 1280))
      {
        indexmetastd::string::pointer data = si_create_indexmetadata(a1, 1);
        uint64_t v32 = indexmetadata;
        if (indexmetadata)
        {
          uint64_t v7 = (uint64_t)indexmetadata;
          unint64_t v30 = 0;
          unsigned int v31 = 0;
          int v8 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
          unint64_t v9 = setThreadIdAndInfo(-1, (long long *)sSDBExceptionCallbacks, *(void *)(a1 + 1184), 0x40000000, v8);
          unsigned int v28 = HIDWORD(v9);
          unsigned int v29 = v9;
          unsigned int v26 = v11;
          unsigned int v27 = v10;
          uint64_t v12 = *(void *)&threadData[18 * v9 + 2];
          uint64_t v13 = v12 + 320 * HIDWORD(v9);
          *(unsigned char *)(v13 + 216) = 0;
          int v14 = *(_DWORD *)(v13 + 312);
          uint64_t v15 = *(void (**)(void))(v13 + 224);
          if (v15) {
            v15(*(void *)(v12 + 320 * HIDWORD(v9) + 288));
          }
          if (_setjmp((int *)v13))
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)long long buf = 0;
              _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
            }
            *(_DWORD *)(v13 + 312) = v14;
            CIOnThreadCleanUpReset(v26);
            dropThreadId(v29, 1, v8);
            CICleanUpReset(v29, v27);
            off_t v16 = (void *)v7;
          }
          else
          {
            if (db_get_field(*(int **)(a1 + 1184), v7, "kMDStoreUUID", &v30, &v31)
              || *(_DWORD *)(v30 + 8) != 16
              || (*(void *)(a1 + 1416) == *v31 ? (BOOL v18 = *(void *)(a1 + 1424) == v31[1]) : (BOOL v18 = 0), !v18))
            {
              int updated = db_add_field(*(int **)(a1 + 1184), (char **)&v32, 1u, "kMDStoreUUID", 0, 0x108u, 14, (unsigned __int8 *)(a1 + 1416), v17, 16);
              if (updated || (int updated = db_update_obj(*(int **)(a1 + 1184), (uint64_t)v32, 12)) != 0)
              {
                int v20 = *__error();
                uint64_t v21 = _SILogForLogForCategory(7);
                os_log_type_t v22 = dword_1E9FC90C0 < 3;
                if (os_log_type_enabled(v21, (os_log_type_t)(dword_1E9FC90C0 < 3)))
                {
                  *(_DWORD *)long long buf = 67109120;
                  int v34 = updated;
                  _os_log_impl(&dword_1BD672000, v21, v22, "*warn* Failed setting store cookie (%d)", buf, 8u);
                }
                *__error() = v20;
              }
              else
              {
                db_dirty_datastore(*(int **)(a1 + 1184));
              }
            }
            uint64_t v23 = *(void *)&threadData[18 * v29 + 2];
            uint64_t v24 = v23 + 320 * v28;
            *(_DWORD *)(v24 + 312) = v14;
            char v25 = *(void (**)(void))(v24 + 232);
            if (v25) {
              v25(*(void *)(v23 + 320 * v28 + 288));
            }
            dropThreadId(v29, 0, v8);
            off_t v16 = v32;
          }
          free(v16);
        }
      }
    }
  }
}

BOOL SIHasPersistentStoreCookie(uint64_t a1)
{
  return *(void *)(a1 + 1184) != 0;
}

uint64_t SIProcessTerminating()
{
  int v0 = 0;
  v11[1] = *MEMORY[0x1E4F143B8];
  atomic_compare_exchange_strong_explicit(&gTerminating, (unsigned int *)&v0, 1u, memory_order_relaxed, memory_order_relaxed);
  gProcessTerminating = 1;
  pthread_mutex_lock(&schlock);
  if (!gShutdownGroup)
  {
    gShutdownGroup = (uint64_t)dispatch_group_create();
    if (global_schedulers[0])
    {
      CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)global_schedulers[0]);
      if (Count)
      {
        uint64_t v3 = Count;
        size_t v4 = 8 * Count;
        MEMORY[0x1F4188790](Count);
        CFUUIDRef v5 = (void *)((char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
        bzero(v5, v4);
        MEMORY[0x1F4188790](v6);
        uint64_t v7 = v5;
        bzero(v5, v4);
        CFDictionaryGetKeysAndValues((CFDictionaryRef)global_schedulers[0], (const void **)v5, (const void **)v5);
        if (v3 >= 1)
        {
          do
          {
            dispatch_group_enter((dispatch_group_t)gShutdownGroup);
            uint64_t v8 = *v7++;
            child_queue = si_create_child_queue(v8);
            uint64_t v10 = *v5++;
            si_enqueue_work_with_qos((uint64_t)child_queue, 25, (uint64_t)si_spindle_shutdown, v10);
            --v3;
          }
          while (v3);
        }
      }
    }
  }
  return pthread_mutex_unlock(&schlock);
}

void si_spindle_shutdown(uint64_t a1, int a2)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  if (a2) {
    goto LABEL_2;
  }
  pthread_mutex_lock(&schlock);
  if (!gAllIndexes)
  {
    pthread_mutex_unlock(&schlock);
    goto LABEL_2;
  }
  CFIndex Count = CFSetGetCount((CFSetRef)gAllIndexes);
  MEMORY[0x1F4188790](Count);
  CFUUIDRef v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v5, v4);
  CFSetGetValues((CFSetRef)gAllIndexes, (const void **)v5);
  if (Count < 1)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)&v5[8 * v6];
      if (*(_DWORD *)(v8 + 1396) == a1)
      {
        *(void *)&v5[8 * v7] = v8;
        CFSetRemoveValue((CFMutableSetRef)gAllIndexes, *(const void **)&v5[8 * v6]);
        ++v7;
      }
      ++v6;
    }
    while (Count != v6);
    if (v7)
    {
      unint64_t v9 = malloc_type_malloc(8 * v7, 0x80040B8603338uLL);
      memcpy(v9, v5, 8 * v7);
      goto LABEL_16;
    }
  }
  unint64_t v9 = 0;
LABEL_16:
  pthread_mutex_unlock(&schlock);
  if (v9)
  {
    _SIShutdownIndexBulk((int *)v9, v7);
    free(v9);
  }
LABEL_2:
  if (gShutdownGroup) {
    dispatch_group_leave((dispatch_group_t)gShutdownGroup);
  }
}

int *_SIShutdownIndexBulk(int *result, uint64_t a2)
{
  uint64_t v167 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unint64_t v149 = &v135;
    int v146 = (uint64_t *)result;
    uint64_t v2 = *(void *)result;
    int v3 = *(_DWORD *)(*(void *)result + 1396);
    int v148 = v3;
    int v4 = *(_DWORD *)(v2 + 6576);
    uint64_t v5 = MEMORY[0x1F4188790](result);
    uint64_t v7 = (char *)&v135 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    size_t v9 = 8 * v8;
    uint64_t v10 = MEMORY[0x1F4188790](v5);
    unsigned int v11 = (char *)&v135 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    int64_t v147 = v12;
    size_t v13 = 104 * v12;
    MEMORY[0x1F4188790](v10);
    uint64_t v15 = (char *)&v135 - v14;
    bzero(v7, v16);
    bzero(v11, v9);
    bzero(v15, v13);
    double Current = CFAbsoluteTimeGetCurrent();
    int v18 = *__error();
    unsigned int v19 = _SILogForLogForCategory(11);
    os_log_type_t v20 = 2 * (dword_1E9FC90D0 < 4);
    if (os_log_type_enabled(v19, v20))
    {
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v148;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v147;
      _os_log_impl(&dword_1BD672000, v19, v20, "shut down starting for spindle:%d count:%d", buf, 0xEu);
    }
    uint64_t v144 = (uint64_t *)v11;
    uint64_t v145 = v7;
    BOOL v143 = v15;
    *__error() = v18;
    if ((v4 & 0x40000) != 0)
    {
      int v48 = v148;
      if (!exc_pthread_key[0]) {
        pthread_key_create(exc_pthread_key, 0);
      }
      v159[0] = MEMORY[0x1E4F143A8];
      v159[1] = 0x40000000;
      v159[2] = ___SIShutdownIndexBulk_block_invoke;
      v159[3] = &__block_descriptor_tmp_1087;
      int v160 = v48;
      v159[4] = v146;
      v159[5] = v144;
      v159[6] = v143;
      v159[7] = v147;
      v159[8] = v145;
      dispatch_apply(v147, 0, v159);
      int v49 = *__error();
      unsigned int v50 = _SILogForLogForCategory(11);
      os_log_type_t v51 = 2 * (dword_1E9FC90D0 < 4);
      if (!os_log_type_enabled(v50, v51)) {
        goto LABEL_97;
      }
    }
    else
    {
      os_log_type_t v22 = v146;
      int64_t v21 = v147;
      if (v147 >= 1)
      {
        uint64_t v23 = 0;
        do
        {
          if (v3 != *(_DWORD *)(*v22 + 1396))
          {
            int v131 = __si_assert_copy_extra_625(-1);
            int v132 = v131;
            CFDictionaryRef v133 = "";
            if (v131) {
              CFDictionaryRef v133 = v131;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 15447, "indexSpindleId==si_indices[0]->indexSpindleId", v133);
            free(v132);
            if (__valid_fs(-1)) {
              uint64_t v134 = 2989;
            }
            else {
              uint64_t v134 = 3072;
            }
            *(_DWORD *)uint64_t v134 = -559038737;
            abort();
          }
          uint64_t v24 = v22[v23];
          if (!*(unsigned char *)(v24 + 1280))
          {
            char v25 = _SIShutdownSetup(v24);
            v144[v23] = (uint64_t)v25;
          }
          ++v23;
        }
        while (v21 != v23);
      }
      int v26 = *__error();
      unsigned int v27 = _SILogForLogForCategory(11);
      os_log_type_t v28 = 2 * (dword_1E9FC90D0 < 4);
      if (os_log_type_enabled(v27, v28))
      {
        CFAbsoluteTime v29 = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v148;
        *(_WORD *)&uint8_t buf[8] = 2048;
        *(double *)&buf[10] = v29 - Current;
        _os_log_impl(&dword_1BD672000, v27, v28, "shutdown setup complete for spindle:%d after %f seconds.", buf, 0x12u);
      }
      int v142 = v15;
      *__error() = v26;
      int64_t v30 = v147;
      if (v147 < 1)
      {
        uint64_t v47 = 0;
      }
      else
      {
        uint64_t v31 = 0;
        unsigned int v139 = 72;
        unsigned int v137 = 320;
        uint64_t v32 = v144;
        uint64_t v33 = v146;
        do
        {
          uint64_t v34 = *v32;
          if (*v32)
          {
            *(void *)long long buf = 0;
            int v35 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
            unsigned int v158 = 0;
            unsigned int v157 = 0;
            unsigned int v155 = 0;
            unsigned int v156 = 0;
            unint64_t v36 = setThreadIdAndInfo(*(_DWORD *)(*v33 + 32), sFdExceptionCallbacks, 0, 1, v35);
            unsigned int v157 = HIDWORD(v36);
            unsigned int v158 = v36;
            unsigned int v155 = v38;
            unsigned int v156 = v37;
            uint64_t v39 = *(void *)((char *)&threadData[2] + v36 * (unint64_t)v139);
            uint64_t v40 = v39 + HIDWORD(v36) * (unint64_t)v137;
            *(unsigned char *)(v40 + 216) = 0;
            int v41 = *(_DWORD *)(v40 + 312);
            unsigned int v42 = *(void (**)(void))(v40 + 224);
            if (v42) {
              v42(*(void *)(v39 + 320 * HIDWORD(v36) + 288));
            }
            unsigned int v154 = v158;
            unsigned int v153 = v157;
            unsigned int v152 = v156;
            unsigned int v151 = v155;
            if (_setjmp((int *)v40))
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                v150[0] = 0;
                _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", (uint8_t *)v150, 2u);
              }
              *(_DWORD *)(v40 + 312) = v41;
              CIOnThreadCleanUpReset(v151);
              dropThreadId(v154, 1, v35);
              CICleanUpReset(v154, v152);
            }
            else
            {
              _CISyncContextSync(v34, buf);
              uint64_t v43 = *(void *)&threadData[18 * v154 + 2];
              unsigned int v44 = v153;
              uint64_t v45 = v43 + 320 * v153;
              *(_DWORD *)(v45 + 312) = v41;
              unsigned int v46 = *(void (**)(void))(v45 + 232);
              if (v46) {
                v46(*(void *)(v43 + 320 * v44 + 288));
              }
              dropThreadId(v154, 0, v35);
            }
            if (!v31) {
              uint64_t v31 = *(void *)buf;
            }
          }
          uint64_t v47 = v31;
          ++v33;
          ++v32;
          --v30;
        }
        while (v30);
      }
      uint64_t v52 = v47;
      int v53 = *__error();
      uint64_t v54 = _SILogForLogForCategory(11);
      os_log_type_t v55 = 2 * (dword_1E9FC90D0 < 4);
      if (os_log_type_enabled(v54, v55))
      {
        CFAbsoluteTime v56 = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v148;
        *(_WORD *)&uint8_t buf[8] = 2048;
        *(double *)&buf[10] = v56 - Current;
        _os_log_impl(&dword_1BD672000, v54, v55, "shutdown sync complete for spindle:%d after %f seconds.", buf, 0x12u);
      }
      *__error() = v53;
      uint64_t v57 = v142;
      if (v52)
      {
        fd_sync(v52, 1);
        int v58 = *__error();
        uint64_t v59 = _SILogForLogForCategory(11);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
        {
          CFAbsoluteTime v60 = CFAbsoluteTimeGetCurrent();
          *(_DWORD *)long long buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v148;
          *(_WORD *)&uint8_t buf[8] = 2048;
          *(double *)&buf[10] = v60 - Current;
          _os_log_impl(&dword_1BD672000, v59, OS_LOG_TYPE_DEFAULT, "shutdown sync-fsync for spindle:%d after %f seconds.", buf, 0x12u);
        }
        *__error() = v58;
      }
      int64_t v61 = v147;
      if (v147 < 1)
      {
        uint64_t v78 = 0;
      }
      else
      {
        uint64_t v62 = 0;
        unsigned int v141 = &v57[104 * v147];
        unsigned int v140 = 72;
        unsigned int v138 = 320;
        uint64_t v63 = (uint64_t **)v144;
        long long v64 = v146;
        do
        {
          uint64_t v65 = *v63;
          if (*v63)
          {
            *(void *)long long buf = 0;
            int v66 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
            unsigned int v158 = 0;
            unsigned int v157 = 0;
            unsigned int v155 = 0;
            unsigned int v156 = 0;
            unint64_t v67 = setThreadIdAndInfo(*(_DWORD *)(*v64 + 32), sFdExceptionCallbacks, 0, 1, v66);
            unsigned int v157 = HIDWORD(v67);
            unsigned int v158 = v67;
            unsigned int v155 = v69;
            unsigned int v156 = v68;
            uint64_t v70 = *(void *)((char *)&threadData[2] + v67 * (unint64_t)v140);
            uint64_t v71 = v70 + HIDWORD(v67) * (unint64_t)v138;
            *(unsigned char *)(v71 + 216) = 0;
            int v72 = *(_DWORD *)(v71 + 312);
            long long v73 = *(void (**)(void))(v71 + 224);
            if (v73) {
              v73(*(void *)(v70 + 320 * HIDWORD(v67) + 288));
            }
            unsigned int v154 = v158;
            unsigned int v153 = v157;
            unsigned int v152 = v156;
            unsigned int v151 = v155;
            if (_setjmp((int *)v71))
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                v150[0] = 0;
                _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", (uint8_t *)v150, 2u);
              }
              *(_DWORD *)(v71 + 312) = v72;
              CIOnThreadCleanUpReset(v151);
              dropThreadId(v154, 1, v66);
              CICleanUpReset(v154, v152);
            }
            else
            {
              _CISyncContextCommitData(v65, (uint64_t *)buf, (uint64_t)v141);
              uint64_t v74 = *(void *)&threadData[18 * v154 + 2];
              unsigned int v75 = v153;
              uint64_t v76 = v74 + 320 * v153;
              *(_DWORD *)(v76 + 312) = v72;
              uint64_t v77 = *(void (**)(void))(v76 + 232);
              if (v77) {
                v77(*(void *)(v74 + 320 * v75 + 288));
              }
              dropThreadId(v154, 0, v66);
            }
            if (!v62) {
              uint64_t v62 = *(void *)buf;
            }
          }
          uint64_t v78 = v62;
          ++v64;
          ++v63;
          --v61;
        }
        while (v61);
      }
      uint64_t v79 = v78;
      int v80 = *__error();
      uint64_t v81 = _SILogForLogForCategory(11);
      os_log_type_t v82 = 2 * (dword_1E9FC90D0 < 4);
      if (os_log_type_enabled(v81, v82))
      {
        CFAbsoluteTime v83 = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v148;
        *(_WORD *)&uint8_t buf[8] = 2048;
        *(double *)&buf[10] = v83 - Current;
        _os_log_impl(&dword_1BD672000, v81, v82, "shutdown commit data complete for spindle:%d after %f seconds.", buf, 0x12u);
      }
      *__error() = v80;
      if (v79)
      {
        fd_sync(v79, 1);
        int v84 = *__error();
        long long v85 = _SILogForLogForCategory(11);
        os_log_type_t v86 = 2 * (dword_1E9FC90D0 < 4);
        if (os_log_type_enabled(v85, v86))
        {
          CFAbsoluteTime v87 = CFAbsoluteTimeGetCurrent();
          *(_DWORD *)long long buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v148;
          *(_WORD *)&uint8_t buf[8] = 2048;
          *(double *)&buf[10] = v87 - Current;
          _os_log_impl(&dword_1BD672000, v85, v86, "shutdown commit-fsync for spindle:%d after %f seconds.", buf, 0x12u);
        }
        *__error() = v84;
      }
      if (v147 >= 1)
      {
        unsigned int v136 = 72;
        unsigned int v135 = 320;
        int v88 = v144;
        uint64_t v90 = v146;
        int64_t v89 = v147;
        do
        {
          uint64_t v91 = *v88;
          if (*v88)
          {
            int v92 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
            *(_DWORD *)long long buf = 0;
            unsigned int v158 = 0;
            unsigned int v157 = 0;
            unsigned int v156 = 0;
            unint64_t v93 = setThreadIdAndInfo(*(_DWORD *)(*v90 + 32), sFdExceptionCallbacks, 0, 1, v92);
            unsigned int v158 = HIDWORD(v93);
            *(_DWORD *)long long buf = v93;
            unsigned int v157 = v94;
            unsigned int v156 = v95;
            uint64_t v96 = *(void *)((char *)&threadData[2] + v93 * (unint64_t)v136);
            uint64_t v97 = v96 + HIDWORD(v93) * (unint64_t)v135;
            *(unsigned char *)(v97 + 216) = 0;
            int v98 = *(_DWORD *)(v97 + 312);
            int v99 = *(void (**)(void))(v97 + 224);
            if (v99) {
              v99(*(void *)(v96 + 320 * HIDWORD(v93) + 288));
            }
            unsigned int v155 = *(_DWORD *)buf;
            unsigned int v154 = v158;
            unsigned int v153 = v157;
            unsigned int v152 = v156;
            if (_setjmp((int *)v97))
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                LOWORD(v151) = 0;
                _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", (uint8_t *)&v151, 2u);
              }
              *(_DWORD *)(v97 + 312) = v98;
              CIOnThreadCleanUpReset(v152);
              dropThreadId(v155, 1, v92);
              CICleanUpReset(v155, v153);
            }
            else
            {
              _CISyncContextCommitHeader(v91);
              uint64_t v100 = *(void *)&threadData[18 * v155 + 2];
              unsigned int v101 = v154;
              uint64_t v102 = v100 + 320 * v154;
              *(_DWORD *)(v102 + 312) = v98;
              __int16 v103 = *(void (**)(void))(v102 + 232);
              if (v103) {
                v103(*(void *)(v100 + 320 * v101 + 288));
              }
              dropThreadId(v155, 0, v92);
            }
          }
          ++v90;
          ++v88;
          --v89;
        }
        while (v89);
      }
      int v104 = *__error();
      __int16 v105 = _SILogForLogForCategory(11);
      os_log_type_t v106 = 2 * (dword_1E9FC90D0 < 4);
      if (os_log_type_enabled(v105, v106))
      {
        CFAbsoluteTime v107 = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v148;
        *(_WORD *)&uint8_t buf[8] = 2048;
        *(double *)&buf[10] = v107 - Current;
        _os_log_impl(&dword_1BD672000, v105, v106, "shutdown commit header complete for spindle:%d after %f seconds.", buf, 0x12u);
      }
      *__error() = v104;
      int64_t v108 = v147;
      if (v147 >= 1)
      {
        int v110 = v143;
        uint64_t v109 = v144;
        do
        {
          uint64_t v111 = *v109;
          if (*v109)
          {
            if (!*(_DWORD *)(v111 + 168))
            {
              int v112 = *(void (**)(uint64_t, unsigned char *))(v111 + 72);
              if (v112)
              {
                if (CIDocCountsNonEmpty(v110))
                {
                  uint64_t v113 = *(void *)(v111 + 80);
                  long long v114 = *((_OWORD *)v110 + 5);
                  long long v164 = *((_OWORD *)v110 + 4);
                  long long v165 = v114;
                  uint64_t v166 = *((void *)v110 + 12);
                  long long v115 = *((_OWORD *)v110 + 1);
                  *(_OWORD *)long long buf = *(_OWORD *)v110;
                  *(_OWORD *)&uint8_t buf[16] = v115;
                  long long v116 = *((_OWORD *)v110 + 3);
                  long long v162 = *((_OWORD *)v110 + 2);
                  long long v163 = v116;
                  v112(v113, buf);
                }
              }
            }
          }
          v110 += 104;
          ++v109;
          --v108;
        }
        while (v108);
        uint64_t v117 = v144;
        int64_t v118 = v147;
        do
        {
          if (*v117) {
            _CISyncContextDestroy(*v117);
          }
          ++v117;
          --v118;
        }
        while (v118);
      }
      int v119 = *__error();
      int v120 = _SILogForLogForCategory(11);
      os_log_type_t v121 = 2 * (dword_1E9FC90D0 < 4);
      if (os_log_type_enabled(v120, v121))
      {
        CFAbsoluteTime v122 = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v148;
        *(_WORD *)&uint8_t buf[8] = 2048;
        *(double *)&buf[10] = v122 - Current;
        _os_log_impl(&dword_1BD672000, v120, v121, "shut down complete for spindle:%d after %f seconds.", buf, 0x12u);
      }
      *__error() = v119;
      int64_t v123 = v147;
      if (v147 >= 1)
      {
        uint64_t v125 = v145;
        uint64_t v124 = v146;
        do
        {
          int64_t v126 = v123;
          CFDictionaryRef v127 = v125;
          int v128 = v124 + 1;
          _SIShutdownComplete(*v124);
          _DWORD *v127 = 0;
          uint64_t v124 = v128;
          uint64_t v125 = v127 + 1;
          int64_t v123 = v126 - 1;
        }
        while (v126 != 1);
      }
      int v49 = *__error();
      unsigned int v50 = _SILogForLogForCategory(11);
      os_log_type_t v51 = 2 * (dword_1E9FC90D0 < 4);
      BOOL v129 = os_log_type_enabled(v50, v51);
      int v48 = v148;
      if (!v129) {
        goto LABEL_97;
      }
    }
    CFAbsoluteTime v130 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v48;
    *(_WORD *)&uint8_t buf[8] = 2048;
    *(double *)&buf[10] = v130 - Current;
    _os_log_impl(&dword_1BD672000, v50, v51, "shut down complete for spindle:%d after %f seconds.", buf, 0x12u);
LABEL_97:
    uint64_t result = __error();
    DIR *result = v49;
  }
  return result;
}

void *_SIShutdownSetup(uint64_t a1)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (a1 && sContactsIndex == a1) {
    sContactsIndex = 0;
  }
  bzero(v61, 0x400uLL);
  int v2 = fcntl(*(_DWORD *)(a1 + 32), 50, v61);
  if (v61[0]) {
    BOOL v3 = v2 < 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    int v4 = 0;
  }
  else {
    int v4 = v61;
  }
  int v5 = *__error();
  uint64_t v6 = _SILogForLogForCategory(0);
  os_log_type_t v7 = 2 * (gSILogLevels[0] < 4);
  if (os_log_type_enabled(v6, v7))
  {
    int v8 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)long long buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v8;
    *(_WORD *)&uint8_t buf[8] = 2080;
    *(void *)&buf[10] = v4;
    _os_log_impl(&dword_1BD672000, v6, v7, "Index shut down starting for index at %d %s.", buf, 0x12u);
  }
  *__error() = v5;
  double Current = CFAbsoluteTimeGetCurrent();
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2216));
  CFAbsoluteTime v10 = CFAbsoluteTimeGetCurrent();
  activityJournalWriteVInt64(a1 + 2184, 35, (unint64_t)v10);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 2216));
  *(_DWORD *)(a1 + 2420) = 1;
  uint64_t v57 = 0;
  int v58 = &v57;
  uint64_t v59 = 0x2000000000;
  char v60 = 0;
  uint64_t v11 = *(void *)(a1 + 1384);
  uint64_t v12 = *(void *)(a1 + 1376);
  v53[0] = MEMORY[0x1E4F143A8];
  v53[1] = 0x40000000;
  uint64_t v54 = ___SIShutdownSetup_block_invoke;
  os_log_type_t v55 = &unk_1E63423C0;
  CFAbsoluteTime v56 = &v57;
  if (v11 && *(_DWORD *)(v11 + 8))
  {
    uint64_t v13 = 0;
    while (((unsigned int (*)(void *, void, void))v54)(v53, *(void *)(*(void *)v11 + 8 * v13), 0))
    {
      if (++v13 >= (unint64_t)*(unsigned int *)(v11 + 8)) {
        goto LABEL_17;
      }
    }
  }
  else
  {
LABEL_17:
    if (v12 && *(_DWORD *)(v12 + 8))
    {
      unint64_t v14 = 0;
      do
      {
        if (!((unsigned int (*)(void *, void, uint64_t))v54)(v53, *(void *)(*(void *)v12 + 8 * v14), 1))break; {
        ++v14;
        }
      }
      while (v14 < *(unsigned int *)(v12 + 8));
    }
  }
  if (*((unsigned char *)v58 + 24)) {
    goto LABEL_23;
  }
  si_scheduler_boost_and_forget(*(void *)(a1 + 944));
  si_scheduler_boost_and_forget(*(void *)(a1 + 864));
  si_scheduler_boost_and_forget(*(void *)(a1 + 872));
  si_scheduler_boost_and_forget(*(void *)(a1 + 896));
  si_scheduler_boost_and_forget(*(void *)(a1 + 912));
  si_scheduler_boost_and_forget(*(void *)(a1 + 888));
  _SIShutdownIndexSchedulers(a1, 1, 1, Current);
  si_cancel_activectx((void *)a1);
  *(_DWORD *)(a1 + 2412) = 1;
  if (*(unsigned char *)(a1 + 2473) == 4)
  {
    int v16 = *__error();
    __n128 v17 = _SILogForLogForCategory(11);
    os_log_type_t v18 = 2 * (dword_1E9FC90D0 < 4);
    if (os_log_type_enabled(v17, v18))
    {
      int v19 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v19;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = 4;
      _os_log_impl(&dword_1BD672000, v17, v18, "shutdown %d clean %x", buf, 0xEu);
    }
    uint64_t v15 = 0;
    *__error() = v16;
    goto LABEL_56;
  }
  unsigned int v52 = 0;
  if (!*(void *)(a1 + 1184) && !*(void *)(a1 + 1384) && !*(void *)(a1 + 1376))
  {
LABEL_23:
    uint64_t v15 = 0;
    goto LABEL_56;
  }
  if (fd_setDir(*(unsigned int *)(a1 + 32), (int *)&v52))
  {
    int v20 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
    unint64_t v21 = setThreadIdAndInfo(*(_DWORD *)(a1 + 32), sFdExceptionCallbacks, 0, 1, v20);
    unsigned int v50 = HIDWORD(v21);
    unsigned int v51 = v21;
    unsigned int v48 = v23;
    unsigned int v49 = v22;
    uint64_t v24 = *(void *)&threadData[18 * v21 + 2];
    uint64_t v25 = v24 + 320 * HIDWORD(v21);
    *(unsigned char *)(v25 + 216) = 0;
    int v26 = *(_DWORD *)(v25 + 312);
    unsigned int v27 = *(void (**)(void))(v25 + 224);
    if (v27) {
      v27(*(void *)(v24 + 320 * HIDWORD(v21) + 288));
    }
    if (_setjmp((int *)v25))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
      }
      *(_DWORD *)(v25 + 312) = v26;
      CIOnThreadCleanUpReset(v48);
      dropThreadId(v51, 1, v20);
      CICleanUpReset(v51, v49);
      goto LABEL_23;
    }
    if (*(void *)(a1 + 1184))
    {
      _si_store_propery_cache(a1, 0, 0);
      si_storesizes(a1, 0);
    }
    int v31 = v52;
    MEMORY[0x1C1882290](v52);
    if ((v31 & 0x80000000) == 0) {
      close(v31);
    }
    if (*(unsigned char *)(a1 + 1280))
    {
      uint64_t v32 = 0;
    }
    else
    {
      uint64_t v33 = *(void *)(a1 + 1184);
      int8x16_t v47 = *(int8x16_t *)(a1 + 1376);
      uint64_t v34 = (char *)malloc_type_malloc(0x40uLL, 0x10A0040BD50C579uLL);
      *(void *)uint64_t v34 = 0;
      *((void *)v34 + 1) = 0;
      *((void *)v34 + 2) = 0;
      *((void *)v34 + 3) = v33;
      *((void *)v34 + 4) = a1;
      *((_WORD *)v34 + 20) = 257;
      *(_DWORD *)(v34 + 42) = 0;
      *((_WORD *)v34 + 23) = 0;
      *((int8x16_t *)v34 + 3) = vextq_s8(v47, v47, 8uLL);
      uint64_t v35 = *(void *)(a1 + 1384);
      do
      {
        do
        {
          uint64_t v36 = v35;
          uint64_t v37 = *(void *)(a1 + 1376);
          __dmb(0xBu);
          uint64_t v35 = *(void *)(a1 + 1384);
        }
        while (v36 != v35);
        uint64_t v35 = *(void *)(a1 + 1384);
      }
      while (v37 != *(void *)(a1 + 1376));
      uint64_t v38 = *(void *)(a1 + 6584);
      *(_OWORD *)long long buf = xmmword_1F1813340;
      *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)&off_1F1813350;
      *(_OWORD *)&unsigned char buf[32] = xmmword_1F1813360;
      long long v63 = *(_OWORD *)off_1F1813370;
      long long v64 = v34;
      uint64_t v32 = _CISyncContextCreate(a1 + 1192, v36, v37, 2, 0, (uint64_t)buf, v38, 0, 0);
    }
    int v39 = *__error();
    uint64_t v40 = _SILogForLogForCategory(0);
    os_log_type_t v41 = 2 * (gSILogLevels[0] < 4);
    if (os_log_type_enabled(v40, v41))
    {
      CFAbsoluteTime v42 = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v4;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = v42 - Current;
      _os_log_impl(&dword_1BD672000, v40, v41, "Index closed for %s after %f seconds.", buf, 0x16u);
    }
    *__error() = v39;
    uint64_t v43 = *(void *)&threadData[18 * v51 + 2];
    uint64_t v44 = v43 + 320 * v50;
    *(_DWORD *)(v44 + 312) = v26;
    uint64_t v45 = *(void (**)(void))(v44 + 232);
    if (v45) {
      v45(*(void *)(v43 + 320 * v50 + 288));
    }
    dropThreadId(v51, 0, v20);
    uint64_t v15 = v32;
  }
  else
  {
    int v28 = *__error();
    int v29 = *__error();
    int64_t v30 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315906;
      *(void *)&uint8_t buf[4] = "_SIShutdownSetup";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 15611;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v28;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = v4;
      _os_log_error_impl(&dword_1BD672000, v30, OS_LOG_TYPE_ERROR, "%s:%d: setDir 1 error %d (%s)", buf, 0x22u);
    }
    uint64_t v15 = 0;
    *__error() = v29;
  }
LABEL_56:
  _Block_object_dispose(&v57, 8);
  return v15;
}

uint64_t _SIShutdownComplete(uint64_t a1)
{
  if (a1 && sContactsIndex == a1) {
    sContactsIndex = 0;
  }
  si_cancel_activectx((void *)a1);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1872));
  if (!*(_DWORD *)(a1 + 2408))
  {
    *(_DWORD *)(a1 + 2408) = 1;
    pthread_cond_signal((pthread_cond_t *)(a1 + 1936));
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1872));
}

_DWORD *SIWaitForAllIndexShutdown()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t result = (_DWORD *)SIProcessTerminating();
  if (gShutdownGroup)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    int v2 = *__error();
    BOOL v3 = _SILogForLogForCategory(11);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11) = 0;
      _os_log_impl(&dword_1BD672000, v3, OS_LOG_TYPE_DEFAULT, "SIWaitForAllIndexShutdown start", (uint8_t *)&v11, 2u);
    }
    *__error() = v2;
    int v4 = gShutdownGroup;
    dispatch_time_t v5 = dispatch_time(0, 30000000000);
    intptr_t v6 = dispatch_group_wait(v4, v5);
    int v7 = *__error();
    int v8 = _SILogForLogForCategory(11);
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v6)
    {
      if (v9)
      {
        LOWORD(v11) = 0;
        _os_log_impl(&dword_1BD672000, v8, OS_LOG_TYPE_DEFAULT, "SIWaitForAllIndexShutdown timeout", (uint8_t *)&v11, 2u);
      }
      *__error() = v7;
      _exit(1);
    }
    if (v9)
    {
      CFAbsoluteTime v10 = CFAbsoluteTimeGetCurrent();
      int v11 = 134217984;
      double v12 = v10 - Current;
      _os_log_impl(&dword_1BD672000, v8, OS_LOG_TYPE_DEFAULT, "SIWaitForAllIndexShutdown complete after %f", (uint8_t *)&v11, 0xCu);
    }
    uint64_t result = __error();
    _DWORD *result = v7;
  }
  return result;
}

void SICloseIndex(void *a1)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  int v2 = *__error();
  BOOL v3 = _SILogForLogForCategory(11);
  os_log_type_t v4 = 2 * (dword_1E9FC90D0 < 4);
  if (os_log_type_enabled(v3, v4))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = gTerminating;
    _os_log_impl(&dword_1BD672000, v3, v4, "SICloseIndex, terminating:%d", buf, 8u);
  }
  *__error() = v2;
  if (gTerminating)
  {
    *((_DWORD *)a1 + 603) = 1;
    *(_DWORD *)a1[823] = -1;
  }
  _SICloseIndex((uint64_t)a1, 1);
  si_cancel_activectx(a1);
  dispatch_sync((dispatch_queue_t)freeQueue, &__block_literal_global_1096);
  for (uint64_t i = 104; i != 108; ++i)
    dispatch_release((dispatch_object_t)a1[i]);
  dispatch_release((dispatch_object_t)a1[147]);
  if ((*((unsigned char *)a1 + 828) & 8) != 0)
  {
    if (*((_DWORD *)a1 + 603)) {
      return;
    }
LABEL_13:
    uint64_t v7 = a1[8];
    if (v7)
    {
      a1[8] = 0;
      *(unsigned char *)(v7 + 105) = 1;
      if (*(void *)v7)
      {
        dispatch_source_cancel(*(dispatch_source_t *)v7);
        dispatch_resume(*(dispatch_object_t *)v7);
        dispatch_release(*(dispatch_object_t *)v7);
        dispatch_sync(*(dispatch_queue_t *)(v7 + 8), &__block_literal_global_3025);
        dispatch_release(*(dispatch_object_t *)(v7 + 8));
      }
      free((void *)v7);
    }
    uint64_t v8 = a1[173];
    uint64_t v9 = a1[172];
    if (v8)
    {
      LODWORD(v10) = *(_DWORD *)(v8 + 8);
      if (v10)
      {
        unint64_t v11 = 0;
        do
        {
          freeIndex(*(void *)(*(void *)v8 + 8 * v11++));
          unint64_t v10 = *(unsigned int *)(v8 + 8);
        }
        while (v11 < v10);
      }
      if (!v9) {
        goto LABEL_29;
      }
    }
    else if (!v9)
    {
      goto LABEL_32;
    }
    LODWORD(v12) = *(_DWORD *)(v9 + 8);
    if (v12)
    {
      unint64_t v13 = 0;
      do
      {
        freeIndex(*(void *)(*(void *)v9 + 8 * v13++));
        unint64_t v12 = *(unsigned int *)(v9 + 8);
      }
      while (v13 < v12);
    }
    if (!v8) {
      goto LABEL_31;
    }
    LODWORD(v10) = *(_DWORD *)(v8 + 8);
LABEL_29:
    bzero(*(void **)v8, 8 * v10);
    *(_DWORD *)(v8 + 8) = 0;
    *(_DWORD *)(v8 + 16) = -1;
    if (v9)
    {
      LODWORD(v12) = *(_DWORD *)(v9 + 8);
LABEL_31:
      bzero(*(void **)v9, 8 * v12);
      *(_DWORD *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 16) = -1;
    }
LABEL_32:
    unint64_t v14 = (const void *)a1[224];
    if (v14)
    {
      CFRelease(v14);
      CFRelease((CFTypeRef)a1[225]);
      pthread_mutex_destroy((pthread_mutex_t *)(a1 + 226));
    }
    uint64_t v15 = (const void *)a1[212];
    if (v15) {
      CFRelease(v15);
    }
    int v16 = (const void *)a1[826];
    if (v16) {
      CFRelease(v16);
    }
    __n128 v17 = (const void *)a1[176];
    if (v17) {
      CFRelease(v17);
    }
    os_log_type_t v18 = (const void *)a1[221];
    if (v18) {
      CFRelease(v18);
    }
    int v19 = (const void *)a1[222];
    if (v19) {
      CFRelease(v19);
    }
    if (!*((unsigned char *)a1 + 2064))
    {
      int v20 = (const void *)a1[825];
      if (v20) {
        CFRelease(v20);
      }
      a1[825] = 0;
    }
    pthread_mutex_destroy((pthread_mutex_t *)(a1 + 213));
    pthread_mutex_destroy((pthread_mutex_t *)(a1 + 164));
    ContentIndexListFree((void **)a1[173]);
    ContentIndexListFree((void **)a1[172]);
    unint64_t v21 = (int *)a1[859];
    if (v21) {
      db_release_datastore_no_sync(v21);
    }
    unsigned int v22 = (int *)a1[148];
    if (v22) {
      db_release_datastore_no_sync(v22);
    }
    uint64_t v23 = a1[827];
    if (v23) {
      freeReverseDirStore(v23);
    }
    uint64_t v24 = (const void *)a1[260];
    if (v24) {
      CFRelease(v24);
    }
    a1[260] = 0;
    uint64_t v25 = (const void *)a1[261];
    if (v25) {
      CFRelease(v25);
    }
    a1[261] = 0;
    long long v26 = *((_OWORD *)a1 + 22);
    *(_OWORD *)long long buf = *((_OWORD *)a1 + 21);
    long long v59 = v26;
    long long v27 = *((_OWORD *)a1 + 24);
    long long v60 = *((_OWORD *)a1 + 23);
    long long v61 = v27;
    releaseCommDates((uint64_t)buf);
    long long v28 = *((_OWORD *)a1 + 26);
    *(_OWORD *)long long buf = *((_OWORD *)a1 + 25);
    long long v59 = v28;
    long long v29 = *((_OWORD *)a1 + 28);
    long long v60 = *((_OWORD *)a1 + 27);
    long long v61 = v29;
    releaseCommDates((uint64_t)buf);
    long long v30 = *((_OWORD *)a1 + 30);
    *(_OWORD *)long long buf = *((_OWORD *)a1 + 29);
    long long v59 = v30;
    long long v31 = *((_OWORD *)a1 + 32);
    long long v60 = *((_OWORD *)a1 + 31);
    long long v61 = v31;
    releaseCommDates((uint64_t)buf);
    long long v32 = *((_OWORD *)a1 + 34);
    *(_OWORD *)long long buf = *((_OWORD *)a1 + 33);
    long long v59 = v32;
    long long v33 = *((_OWORD *)a1 + 36);
    long long v60 = *((_OWORD *)a1 + 35);
    long long v61 = v33;
    releaseCommDates((uint64_t)buf);
    long long v34 = *((_OWORD *)a1 + 38);
    *(_OWORD *)long long buf = *((_OWORD *)a1 + 37);
    long long v59 = v34;
    long long v35 = *((_OWORD *)a1 + 40);
    long long v60 = *((_OWORD *)a1 + 39);
    long long v61 = v35;
    releaseCommDates((uint64_t)buf);
    uint64_t v36 = (const void *)a1[82];
    if (v36) {
      CFRelease(v36);
    }
    a1[82] = 0;
    uint64_t v37 = (const void *)a1[36];
    if (v37) {
      CFRelease(v37);
    }
    a1[36] = 0;
    uint64_t v38 = (const void *)a1[37];
    if (v38) {
      CFRelease(v38);
    }
    a1[37] = 0;
    int v39 = (const void *)a1[39];
    if (v39) {
      CFRelease(v39);
    }
    a1[39] = 0;
    uint64_t v40 = (const void *)a1[40];
    if (v40) {
      CFRelease(v40);
    }
    a1[40] = 0;
    os_log_type_t v41 = (const void *)a1[9];
    if (v41) {
      CFRelease(v41);
    }
    a1[9] = 0;
    CFAbsoluteTime v42 = (const void *)a1[179];
    if (v42) {
      CFRelease(v42);
    }
    a1[179] = 0;
    uint64_t v43 = (const void *)a1[83];
    if (v43) {
      CFRelease(v43);
    }
    a1[83] = 0;
    uint64_t v44 = (void *)a1[131];
    if (v44 && !*v44)
    {
      si_workqueue_drain(a1[131]);
      si_workqueue_destroy((uint64_t)v44);
    }
    for (uint64_t j = 108; j != 126; ++j)
    {
      uint64_t v46 = a1[j];
      if (v46 && atomic_fetch_add((atomic_uint *volatile)(v46 + 88), 0xFFFFFFFF) == 1) {
        _si_scheduler_destroy(v46);
      }
    }
    uint64_t v47 = *((unsigned int *)a1 + 349);
    unsigned int v48 = (const void *)a1[186];
    if (v48) {
      CFRelease(v48);
    }
    uint64_t v49 = a1[294];
    if (v49)
    {
      unsigned int v50 = *(void (**)(void))(v49 + 24);
      if (v50) {
        v50();
      }
    }
    unsigned int v51 = (const void *)a1[295];
    if (v51) {
      CFRelease(v51);
    }
    a1[295] = 0;
    si_deleteExhaustedRemappings((uint64_t)a1, (CFArrayRef)a1[296]);
    a1[296] = 0;
    unsigned int v52 = (const void *)a1[824];
    if (v52) {
      CFRelease(v52);
    }
    a1[824] = 0;
    int v53 = (void **)a1[280];
    if (v53)
    {
      free(*v53);
      free(v53[1]);
      free(v53);
    }
    uint64_t v54 = a1[830];
    if (v54) {
      TermUpdateSetRelease(v54);
    }
    pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 831));
    pthread_mutex_destroy((pthread_mutex_t *)(a1 + 234));
    pthread_cond_destroy((pthread_cond_t *)(a1 + 242));
    pthread_mutex_destroy((pthread_mutex_t *)(a1 + 187));
    pthread_mutex_destroy((pthread_mutex_t *)(a1 + 195));
    pthread_mutex_destroy((pthread_mutex_t *)(a1 + 203));
    pthread_mutex_destroy((pthread_mutex_t *)(a1 + 871));
    pthread_mutex_destroy((pthread_mutex_t *)(a1 + 281));
    free((void *)a1[864]);
    doc_store_close((DocStore *)a1[161]);
    a1[161] = 0;
    si_cancel_activectx(a1);
    *a1 = 0;
    if (gFlushSuspendOnceToken != -1) {
      dispatch_once(&gFlushSuspendOnceToken, &__block_literal_global_1099);
    }
    *(void *)long long buf = MEMORY[0x1E4F143A8];
    *(void *)&uint8_t buf[8] = 0x40000000;
    *(void *)&long long v59 = ___SIFreeIndex_block_invoke_3;
    *((void *)&v59 + 1) = &__block_descriptor_tmp_1101;
    *(void *)&long long v60 = a1;
    dispatch_async((dispatch_queue_t)gFlushSuspendQueue, buf);
    global_queue = dispatch_get_global_queue(-32768, 0);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___SIFreeIndex_block_invoke_4;
    block[3] = &__block_descriptor_tmp_1102;
    void block[4] = v47;
    dispatch_async(global_queue, block);
    CIPurgeTokenizers();
    uint64_t v56 = 240;
    do
    {
      slab_cleanup((void **)v56);
      uint64_t v56 = (v56 + 1);
    }
    while (v56 != 255);
    return;
  }
  pthread_mutex_lock(&schlock);
  int v6 = *((_DWORD *)a1 + 603);
  if (gAllIndexes) {
    CFSetRemoveValue((CFMutableSetRef)gAllIndexes, a1);
  }
  pthread_mutex_unlock(&schlock);
  if (!v6) {
    goto LABEL_13;
  }
}

CFDictionaryRef SICopyProperties(uint64_t a1)
{
  if (!*(void *)(a1 + 1184)) {
    return 0;
  }
  int v2 = (pthread_mutex_t *)(a1 + 1496);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1496));
  CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 1488);
  if (!v3)
  {
    if (!si_create_propertydict(a1, 0, 0))
    {
      CFDictionaryRef Copy = 0;
      goto LABEL_6;
    }
    CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 1488);
  }
  CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3);
LABEL_6:
  pthread_mutex_unlock(v2);
  return Copy;
}

uint64_t SIGetIndexVersion(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 6924);
  }
  return result;
}

uint64_t SIGetObjectCount(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(void *)(a1 + 1184)) != 0) {
    return db_get_object_count(v1);
  }
  else {
    return -1;
  }
}

uint64_t SISyncIndexForLikelyShutdown(uint64_t result)
{
  if (result)
  {
    if (*(void *)(result + 1184)
      && *(void *)(result + 1040)
      && *(void *)(result + 1048)
      && *(void *)(result + 1152))
    {
      si_enqueue_barrier_with_qos(*(void *)(result + 1096), 9, (uint64_t)si_flush_index_for_likely_shutdown_delayed0, result);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void si_flush_index_for_likely_shutdown_delayed0(uint64_t a1, int a2)
{
  if (!a2) {
    si_enqueue_barrier_with_qos(*(void *)(a1 + 1152), 9, (uint64_t)si_flush_index_for_likely_shutdown_delayed1, a1);
  }
}

void si_flush_index_for_likely_shutdown_delayed1(uint64_t a1, int a2)
{
  if (!a2) {
    si_enqueue_barrier_with_qos(*(void *)(a1 + 1048), 9, (uint64_t)si_flush_index_for_likely_shutdown_delayed, a1);
  }
}

void si_flush_index_for_likely_shutdown_delayed(uint64_t a1, int a2)
{
  if (!a2) {
    si_enqueue_work_with_qos(*(void *)(a1 + 1040), 9, (uint64_t)fastFlushIndex, a1);
  }
}

void fastFlushIndex(uint64_t a1, int a2)
{
  if (!a2)
  {
    os_log_type_t v4 = (void *)os_transaction_create();
    doFastFlushIndex(a1);
    os_release(v4);
  }
}

void _SIGetAllOids(uint64_t a1, void (*a2)(uint64_t, void, uint64_t), uint64_t a3)
{
  if (a1 && *(void *)(a1 + 1184))
  {
    dispatch_time_t v5 = malloc_type_malloc(0x18uLL, 0xA00402214FCE6uLL);
    v5[2] = a3;
    *dispatch_time_t v5 = a1;
    v5[1] = a2;
    uint64_t v6 = *(void *)(a1 + 1040);
    si_enqueue_work(v6, (uint64_t)si_gatherOids, (uint64_t)v5);
  }
  else
  {
    a2(a3, 0, 1);
  }
}

void si_gatherOids(void **a1, int a2)
{
  if (a2)
  {
    ((void (*)(void *, void, uint64_t))a1[1])(a1[2], 0, 1);
  }
  else
  {
    CFDictionaryRef v3 = *a1;
    uint64_t v4 = (*a1)[172];
    uint64_t v5 = (*a1)[173];
    uint64_t Mutable = RLEOIDArrayCreateMutable((const __CFAllocator *)*MEMORY[0x1E4F1CF80]);
    unsigned int v10 = 0;
    if (fd_setDir(*((unsigned int *)v3 + 8), (int *)&v10))
    {
      if (*(_DWORD *)(v5 + 8))
      {
        unint64_t v7 = 0;
        do
          _CIAddOids(*(void *)(*(void *)v5 + 8 * v7++), Mutable);
        while (v7 < *(unsigned int *)(v5 + 8));
      }
      if (*(_DWORD *)(v4 + 8))
      {
        unint64_t v8 = 0;
        do
          _CIAddOids(*(void *)(*(void *)v4 + 8 * v8++), Mutable);
        while (v8 < *(unsigned int *)(v4 + 8));
      }
      int v9 = v10;
      MEMORY[0x1C1882290](v10);
      if ((v9 & 0x80000000) == 0) {
        close(v9);
      }
    }
    ((void (*)(void *, uint64_t, uint64_t))a1[1])(a1[2], Mutable, 0);
  }
  free(a1);
}

void _SICheckIndexForDuplicateOids(uint64_t a1)
{
  if (a1 && *(void *)(a1 + 1184))
  {
    uint64_t v2 = *(void *)(a1 + 1056);
    if (v2) {
      si_enqueue_work_with_qos(v2, 9, (uint64_t)si_checkDuplicateOids, a1);
    }
  }
}

void si_checkDuplicateOids(uint64_t a1, int a2)
{
  if (!a2)
  {
    CFArrayRef v3 = *(const __CFArray **)(a1 + 2360);
    if (v3 && CFArrayGetCount(v3))
    {
      uint64_t v4 = *(void *)(a1 + 1056);
      si_enqueue_work_with_qos(v4, 9, (uint64_t)_si_checkDuplicateOidsAfterCompact, a1);
    }
    else
    {
      _si_checkDuplicateOids(a1);
    }
  }
}

void _si_checkDuplicateOids(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  bzero(v37, 0x400uLL);
  int v2 = fcntl(*(_DWORD *)(a1 + 32), 50, v37);
  if (v37[0]) {
    BOOL v3 = v2 < 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v37;
  }
  uint64_t v24 = si_scheduler_suspend(*(void *)(a1 + 864));
  atomic_fetch_add((atomic_uint *volatile)(a1 + 1444), 1u);
  uint64_t v5 = si_scheduler_suspend(*(void *)(a1 + 872));
  atomic_fetch_add((atomic_uint *volatile)(a1 + 1444), 0xFFFFFFFF);
  int v6 = *__error();
  unint64_t v7 = _SILogForLogForCategory(7);
  os_log_type_t v8 = dword_1E9FC90C0 < 3;
  if (os_log_type_enabled(v7, (os_log_type_t)(dword_1E9FC90C0 < 3)))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v4;
    _os_log_impl(&dword_1BD672000, v7, v8, "*warn* Starting duplicate oid check for %s", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v6;
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  unsigned int v10 = (const void *)SIUINT64SetCreate();
  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = &buf;
  uint64_t v35 = 0x2000000000;
  uint64_t v36 = 0;
  uint64_t v11 = *(void *)(a1 + 1384);
  uint64_t v12 = *(void *)(a1 + 1376);
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 0x40000000;
  long long v26 = ___si_checkDuplicateOids_block_invoke;
  long long v27 = &unk_1E6342648;
  p_long long buf = &buf;
  long long v29 = v10;
  if (v12)
  {
    uint64_t v13 = *(unsigned int *)(v12 + 8);
    while ((int)v13 >= 1)
    {
      uint64_t v14 = v13 - 1;
      int v15 = ((uint64_t (*)(void *, void, uint64_t))v26)(v25, *(void *)(*(void *)v12 + 8 * v13 - 8), 1);
      uint64_t v13 = v14;
      if (!v15) {
        goto LABEL_18;
      }
    }
  }
  if (v11)
  {
    uint64_t v16 = *(unsigned int *)(v11 + 8);
    do
    {
      if ((int)v16 < 1) {
        break;
      }
      uint64_t v17 = v16 - 1;
      int v18 = ((uint64_t (*)(void *, void, void))v26)(v25, *(void *)(*(void *)v11 + 8 * v16 - 8), 0);
      uint64_t v16 = v17;
    }
    while (v18);
  }
LABEL_18:
  CFRelease(v10);
  int v19 = *__error();
  int v20 = _SILogForLogForCategory(7);
  os_log_type_t v21 = dword_1E9FC90C0 < 3;
  if (os_log_type_enabled(v20, (os_log_type_t)(dword_1E9FC90C0 < 3)))
  {
    uint64_t v22 = *(void *)(*((void *)&buf + 1) + 24);
    *(_DWORD *)long long v30 = 136315394;
    long long v31 = v4;
    __int16 v32 = 1024;
    int v33 = v22;
    _os_log_impl(&dword_1BD672000, v20, v21, "*warn* Finished duplicate oid check for %s. Missing deletes:%d", v30, 0x12u);
  }
  *__error() = v19;
  si_scheduler_resume(*(void *)(a1 + 864), v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 17131);
  si_scheduler_resume(*(void *)(a1 + 872), v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 17132);
  CFStringRef v23 = CFStringCreateWithCString(v9, (const char *)sysVersionCStr, 0x8000100u);
  SISetProperty(a1, @"kIndexCheckDupOids", v23);
  CFRelease(v23);
  _Block_object_dispose(&buf, 8);
}

uint64_t ___si_checkDuplicateOids_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += _CIDeleteDuplicates(a2, *(void *)(a1 + 40));
  return 1;
}

void _si_checkDuplicateOidsAfterCompact(uint64_t a1, int a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    CFArrayRef v3 = *(const __CFArray **)(a1 + 2360);
    if (v3 && CFArrayGetCount(v3))
    {
      bzero(v13, 0x400uLL);
      int v4 = fcntl(*(_DWORD *)(a1 + 32), 50, v13);
      int v5 = v13[0];
      int v6 = *__error();
      unint64_t v7 = _SILogForLogForCategory(7);
      os_log_type_t v8 = dword_1E9FC90C0 < 3;
      if (os_log_type_enabled(v7, (os_log_type_t)(dword_1E9FC90C0 < 3)))
      {
        if (v5) {
          BOOL v9 = v4 < 0;
        }
        else {
          BOOL v9 = 1;
        }
        if (v9) {
          unsigned int v10 = 0;
        }
        else {
          unsigned int v10 = v13;
        }
        *(_DWORD *)long long buf = 136315138;
        uint64_t v12 = v10;
        _os_log_impl(&dword_1BD672000, v7, v8, "*warn* Skipping duplicate oid check for %s", buf, 0xCu);
      }
      *__error() = v6;
    }
    else
    {
      _si_checkDuplicateOids(a1);
    }
  }
}

uint64_t _SIIssueRecovery(uint64_t result)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v1 = result;
    if (*(void *)(result + 1184))
    {
      bzero(v7, 0x400uLL);
      uint64_t result = fcntl(*(_DWORD *)(v1 + 32), 50, v7);
      if ((result & 0x80000000) == 0)
      {
        if (v7[0])
        {
          int v2 = *__error();
          CFArrayRef v3 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315138;
            int v6 = v7;
            _os_log_impl(&dword_1BD672000, v3, OS_LOG_TYPE_DEFAULT, "Recovery issued for %s", buf, 0xCu);
          }
          *__error() = v2;
          *(_DWORD *)long long buf = 0;
          uint64_t result = fd_setDir(*(unsigned int *)(v1 + 32), (int *)buf);
          if (result)
          {
            renameatx_np(*(_DWORD *)(v1 + 32), "indexState", *(_DWORD *)(v1 + 32), "indexState.aside", 0x10u);
            si_makeUnavailable(v1, 22, 2, 10, "recovery");
            int v4 = *(_DWORD *)buf;
            uint64_t result = MEMORY[0x1C1882290](*(unsigned int *)buf);
            if ((v4 & 0x80000000) == 0) {
              return close(v4);
            }
          }
        }
      }
    }
  }
  return result;
}

int *_SISetQueryBehavior(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v1 = gSIQueryBehavior;
  gSIQueryBehavior = a1;
  int v2 = *__error();
  CFArrayRef v3 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109376;
    v5[1] = v1;
    __int16 v6 = 1024;
    int v7 = gSIQueryBehavior;
    _os_log_impl(&dword_1BD672000, v3, OS_LOG_TYPE_DEFAULT, "_SISetQueryBehavior from %d to %d", (uint8_t *)v5, 0xEu);
  }
  uint64_t result = __error();
  int *result = v2;
  return result;
}

void si_cacheCleanup(void *a1, int a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    uint64_t v3 = *a1;
    walCFIndex k = (_DWORD *)a1[2];
    if (!walk)
    {
      bzero(&v15, 0x400uLL);
      if (fcntl(*(_DWORD *)(v3 + 32), 50, &v15) < 0 || !(_BYTE)v15)
      {
        walCFIndex k = (_DWORD *)a1[2];
        if (!walk) {
          goto LABEL_11;
        }
      }
      else
      {
        __strlcat_chk();
        long long v13 = xmmword_1BDA831B0;
        uint64_t v14 = 0;
        fsi_attr_size((uint64_t)&v13);
        walCFIndex k = fsi_create_walk((uint64_t)&v15);
        a1[2] = walk;
        if (!walk) {
          goto LABEL_11;
        }
      }
    }
    if (!**(_DWORD **)(v3 + 6584))
    {
      uint64_t v15 = 0;
      uint64_t v16 = &v15;
      uint64_t v17 = 0x2000000000;
      char v18 = 0;
      *(void *)&long long v7 = MEMORY[0x1E4F143A8];
      *((void *)&v7 + 1) = 0x40000000;
      uint64_t v8 = __si_cacheCleanup_block_invoke;
      BOOL v9 = &unk_1E6342670;
      uint64_t v11 = v3;
      uint64_t v12 = a1;
      unsigned int v10 = &v15;
      if (fsi_iterate_f((uint64_t)walk, &v7))
      {
        _Block_object_dispose(&v15, 8);
      }
      else
      {
        int v6 = *((unsigned __int8 *)v16 + 24);
        _Block_object_dispose(&v15, 8);
        if (v6)
        {
          si_enqueue_work(*(void *)(*a1 + 1056), (uint64_t)si_cacheCleanup, (uint64_t)a1);
          return;
        }
      }
    }
  }
LABEL_11:
  int v5 = (char *)a1[2];
  if (v5) {
    fsi_close(v5);
  }
  free(a1);
}

uint64_t __si_cacheCleanup_block_invoke(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (**(_DWORD **)(a1[5] + 6584) | a4) {
    return 1;
  }
  uint64_t v7 = a1[6];
  uint64_t v8 = *(int *)(v7 + 8);
  ++*(void *)(v7 + 8 * v8 + 24);
  int v9 = *(_DWORD *)(a3 + 4);
  if (!v9)
  {
    if (v8 == 4)
    {
      __endptr = 0;
      uint64_t v11 = strtoll(*(const char **)(a3 + 32), &__endptr, 0);
      uint64_t v12 = __endptr;
      if (__endptr != *(char **)(a3 + 32))
      {
        uint64_t v13 = v11;
        if (v11)
        {
          if (!strcmp(__endptr, ".txt") || strcmp(v12, ".tmp"))
          {
            bzero(buf, 0x400uLL);
            uint64_t v14 = *(void *)(a1[5] + 1408);
            if (!*(unsigned char *)(v14 + 240))
            {
              uint64_t v22 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t, uint8_t *, void))(v14 + 48))(v14, v13, buf, 0);
              if (v22)
              {
                memset(&v28, 0, sizeof(v28));
                if (stat(v22, &v28) == -1 && *__error() == 2)
                {
                  int v23 = *__error();
                  uint64_t v24 = _SILogForLogForCategory(0);
                  os_log_type_t v25 = 2 * (gSILogLevels[0] < 4);
                  if (os_log_type_enabled(v24, v25))
                  {
                    uint64_t v26 = *(void *)(a3 + 16);
                    *(_DWORD *)long long v30 = 136315138;
                    uint64_t v31 = v26;
                    _os_log_impl(&dword_1BD672000, v24, v25, "deleting stale cache file%s", v30, 0xCu);
                  }
                  *__error() = v23;
                  if (!unlink(*(const char **)(a3 + 16)))
                  {
                    uint64_t v27 = a1[6] + 8 * *(int *)(a1[6] + 8);
                    --*(void *)(v27 + 24);
                  }
                }
              }
            }
          }
        }
      }
    }
    return 0;
  }
  if (v9 != 2)
  {
    if (v9 == 1)
    {
      unsigned int v10 = v8 + 1;
      *(_DWORD *)(v7 + 8) = v8 + 1;
      if ((int)v8 < 1 || v10 <= 4 && strlen(*(const char **)(a3 + 32)) == 4)
      {
        uint64_t result = 0;
      }
      else
      {
        *(unsigned char *)(v7 + 64) = 1;
        uint64_t result = 2;
      }
      *(void *)(v7 + 8 * (int)v10 + 24) = 0;
      return result;
    }
    return 0;
  }
  BOOL v16 = (int)v8 >= 2 && *(unsigned char *)(v7 + 64) == 0;
  if (v16 && *(void *)(v7 + 8 * v8 + 24) == 1)
  {
    int v17 = *__error();
    char v18 = _SILogForLogForCategory(0);
    os_log_type_t v19 = 2 * (gSILogLevels[0] < 4);
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = *(void *)(a3 + 16);
      *(_DWORD *)long long buf = 136315138;
      uint64_t v33 = v20;
      _os_log_impl(&dword_1BD672000, v18, v19, "deleting stale cache folder%s", buf, 0xCu);
    }
    *__error() = v17;
    int v21 = rmdir(*(const char **)(a3 + 16));
    uint64_t v7 = a1[6];
    LODWORD(v8) = *(_DWORD *)(v7 + 8);
    if (!v21) {
      --*(void *)(v7 + 8 * ((int)v8 - 1) + 24);
    }
  }
  uint64_t result = 0;
  *(unsigned char *)(v7 + 64) = 0;
  *(_DWORD *)(v7 + 8) = v8 - 1;
  if (v8 == 4)
  {
    do
    {
      *(_DWORD *)(a2 + 3400) = 1;
      a2 = *(void *)(a2 + 8608);
    }
    while (a2);
    uint64_t result = 0;
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
  }
  return result;
}

void _SIIssueSizeRepair(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)(a1 + 1184)) {
      si_enqueue_barrier(*(void *)(a1 + 1048), (uint64_t)si_sizeRepair, a1);
    }
  }
}

uint64_t si_sizeRepair(uint64_t result, int a2)
{
  if (!a2 && *(void *)(result + 1184) && !*(unsigned char *)(result + 1280)) {
    return si_set_property(result, @"kSIRepairSizes", (const void *)*MEMORY[0x1E4F1D260], 1, 1);
  }
  return result;
}

uint64_t SISyncIndexVaccuumIfNeeded(uint64_t a1)
{
  return si_sync_index_vaccuum_if_needed(a1, 0, 0, 0, 0);
}

_DWORD *_SIOpenIndexFilesForMerge(_DWORD *result)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    int v1 = result;
    uint64_t v2 = *((void *)result + 148);
    if (*(_DWORD *)v2 != 1685287992)
    {
      int v13 = *__error();
      uint64_t v14 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        int v15 = *(_DWORD *)v2;
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "db_ensure_open_files";
        __int16 v20 = 1024;
        int v21 = 276;
        __int16 v22 = 1024;
        int v23 = v15;
        _os_log_error_impl(&dword_1BD672000, v14, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
      }
      *__error() = v13;
      BOOL v16 = __si_assert_copy_extra_329();
      int v17 = v16;
      if (v16) {
        char v18 = v16;
      }
      else {
        char v18 = "";
      }
      __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 276, v18);
      free(v17);
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    if (db_read_lock(v2 + 584)) {
      sdb2_die(v2, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 15422);
    }
    uint64_t v3 = *(_DWORD **)(v2 + 848);
    *(void *)long long buf = 0;
    int v4 = _fd_acquire_fd((uint64_t)v3, buf);
    if (v4 != -1)
    {
      v3[17] = 1;
      _fd_release_fd(v3, v4, 0, *(uint64_t *)buf);
    }
    int v5 = *(_DWORD **)(v2 + 840);
    *(void *)long long buf = 0;
    int v6 = _fd_acquire_fd((uint64_t)v5, buf);
    if (v6 != -1)
    {
      v5[17] = 1;
      _fd_release_fd(v5, v6, 0, *(uint64_t *)buf);
    }
    int v7 = pthread_mutex_lock((pthread_mutex_t *)(v2 + 584));
    int v8 = *(_DWORD *)(v2 + 780) - 1;
    *(_DWORD *)(v2 + 780) = v8;
    if (!v8) {
      db_rwlock_wakeup(v2 + 584, 0, 0);
    }
    uint64_t result = (_DWORD *)pthread_mutex_unlock((pthread_mutex_t *)(v2 + 584));
    if (v7) {
      sdb2_die(v2, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 15425);
    }
    uint64_t v9 = *((void *)v1 + 173);
    uint64_t v10 = *((void *)v1 + 172);
    if (*(_DWORD *)(v9 + 8))
    {
      unint64_t v11 = 0;
      do
        uint64_t result = _CIEnsureOpenFiles(*(void *)(*(void *)v9 + 8 * v11++));
      while (v11 < *(unsigned int *)(v9 + 8));
    }
    if (*(_DWORD *)(v10 + 8))
    {
      unint64_t v12 = 0;
      do
        uint64_t result = _CIEnsureOpenFiles(*(void *)(*(void *)v10 + 8 * v12++));
      while (v12 < *(unsigned int *)(v10 + 8));
    }
  }
  return result;
}

uint64_t _SICooldownIndexFilesForMerge(uint64_t result)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 1184);
    if (*(_DWORD *)v2 != 1685287992)
    {
      int v21 = *__error();
      __int16 v22 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        int v23 = *(_DWORD *)v2;
        *(_DWORD *)long long buf = 136315650;
        stat v28 = "db_cooldown_files";
        __int16 v29 = 1024;
        int v30 = 277;
        __int16 v31 = 1024;
        int v32 = v23;
        _os_log_error_impl(&dword_1BD672000, v22, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
      }
      *__error() = v21;
      uint64_t v24 = __si_assert_copy_extra_329();
      os_log_type_t v25 = v24;
      if (v24) {
        uint64_t v26 = v24;
      }
      else {
        uint64_t v26 = "";
      }
      __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 277, v26);
      free(v25);
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    if (db_read_lock(v2 + 584)) {
      sdb2_die(v2, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 15430);
    }
    uint64_t v3 = *(void *)(v2 + 848);
    if (v3) {
      *(_DWORD *)(v3 + 68) = 0;
    }
    uint64_t v4 = *(void *)(v2 + 840);
    if (v4) {
      *(_DWORD *)(v4 + 68) = 0;
    }
    int v5 = pthread_mutex_lock((pthread_mutex_t *)(v2 + 584));
    int v6 = *(_DWORD *)(v2 + 780) - 1;
    *(_DWORD *)(v2 + 780) = v6;
    if (!v6) {
      db_rwlock_wakeup(v2 + 584, 0, 0);
    }
    uint64_t result = pthread_mutex_unlock((pthread_mutex_t *)(v2 + 584));
    if (v5) {
      sdb2_die(v2, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 15433);
    }
    int v7 = *(uint64_t ***)(v1 + 1384);
    int v8 = *(uint64_t ***)(v1 + 1376);
    uint64_t v9 = *((unsigned int *)v7 + 2);
    if (v9)
    {
      uint64_t v10 = *v7;
      do
      {
        uint64_t v11 = *v10;
        uint64_t v12 = *(void *)(*v10 + 4672);
        if (v12) {
          *(_DWORD *)(v12 + 68) = 0;
        }
        uint64_t v13 = *(void *)(v11 + 208);
        if (v13) {
          *(_DWORD *)(v13 + 68) = 0;
        }
        uint64_t v14 = *(void *)(v11 + 472);
        if (v14) {
          *(_DWORD *)(v14 + 68) = 0;
        }
        ++v10;
        --v9;
      }
      while (v9);
    }
    uint64_t v15 = *((unsigned int *)v8 + 2);
    if (v15)
    {
      BOOL v16 = *v8;
      do
      {
        uint64_t v17 = *v16;
        uint64_t v18 = *(void *)(*v16 + 4672);
        if (v18) {
          *(_DWORD *)(v18 + 68) = 0;
        }
        uint64_t v19 = *(void *)(v17 + 208);
        if (v19) {
          *(_DWORD *)(v19 + 68) = 0;
        }
        uint64_t v20 = *(void *)(v17 + 472);
        if (v20) {
          *(_DWORD *)(v20 + 68) = 0;
        }
        ++v16;
        --v15;
      }
      while (v15);
    }
  }
  return result;
}

uint64_t _SIFlushAndSyncIndex(int8x16_t *a1)
{
  uint64_t v49 = 0;
  uint64_t v2 = (int8x16_t *)a1[147].i64[0];
  int8x16_t v45 = vextq_s8(*v2, *v2, 8uLL);
  uint64_t v3 = a1[74].i64[0];
  uint64_t v46 = v2[9].i64[0];
  uint64_t v47 = v3;
  unsigned int v48 = a1;
  int8x16_t v50 = vextq_s8(a1[86], a1[86], 8uLL);
  makeThreadId();
  if (gSILogLevels[0] >= 5)
  {
    int v33 = *__error();
    uint64_t v34 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1BD672000, v34, OS_LOG_TYPE_DEFAULT, "Starting forced sync!", buf, 2u);
    }
    *__error() = v33;
  }
  unsigned int v44 = 0;
  if (fd_setDir(a1[2].u32[0], (int *)&v44))
  {
    int v4 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
    unint64_t v5 = setThreadIdAndInfo(-1, (long long *)sSDBExceptionCallbacks, a1[74].i64[0], 0x40000000, v4);
    unsigned int v42 = HIDWORD(v5);
    unsigned int v43 = v5;
    unint64_t v41 = __PAIR64__(v6, v7);
    uint64_t v8 = *(void *)&threadData[18 * v5 + 2];
    uint64_t v9 = v8 + 320 * HIDWORD(v5);
    *(unsigned char *)(v9 + 216) = 0;
    int v10 = *(_DWORD *)(v9 + 312);
    uint64_t v11 = *(void (**)(void))(v9 + 224);
    if (v11) {
      v11(*(void *)(v8 + 320 * HIDWORD(v5) + 288));
    }
    unsigned int v40 = v43;
    unsigned int v39 = v42;
    unint64_t v38 = v41;
    if (_setjmp((int *)v9))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
      }
      *(_DWORD *)(v9 + 312) = v10;
      CIOnThreadCleanUpReset(v38);
      dropThreadId(v40, 1, v4);
      CICleanUpReset(v40, HIDWORD(v38));
    }
    else
    {
      uint64_t v12 = a1[88].i64[0];
      if (v12)
      {
        uint64_t v13 = *(void (**)(uint64_t, void))(v12 + 88);
        if (v13)
        {
          if (!*(unsigned char *)(v12 + 240)) {
            v13(v12, *(void *)(v12 + 24));
          }
        }
      }
      uint64_t valuePtr = 0;
      uint64_t valuePtr = a1[133].i64[0];
      CFNumberRef v14 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
      if (v14)
      {
        CFNumberRef v15 = v14;
        si_set_property((uint64_t)a1, @"ConsumedJournalSerialNumber", v14, 1, 0);
        CFRelease(v15);
      }
      uint64_t v16 = a1[147].i64[0];
      if (v16)
      {
        uint64_t v17 = *(void (**)(void))(v16 + 48);
        if (v17) {
          v17(*(void *)(v16 + 144));
        }
      }
      uint64_t v18 = a1[86].i64[1];
      uint64_t v19 = a1[86].i64[0];
      uint64_t v20 = a1[411].i64[1];
      *(_OWORD *)long long buf = xmmword_1F1813340;
      long long v52 = *(_OWORD *)&off_1F1813350;
      long long v53 = xmmword_1F1813360;
      long long v54 = *(_OWORD *)off_1F1813370;
      os_log_type_t v55 = &v45;
      uint64_t v21 = _ContentIndexSyncIndexBulk((uint64_t)&a1[74].i64[1], v18, v19, 0, 0, (uint64_t)buf, v20, (uint64_t)lowDiskSpaceCallback, (uint64_t)a1);
      int v22 = v21;
      uint64_t v23 = v21;
      uint64_t v24 = a1[147].i64[0];
      if (v24)
      {
        os_log_type_t v25 = *(void (**)(void))(v24 + 56);
        if (v25) {
          v25(*(void *)(v24 + 144));
        }
      }
      if (v23 && v22 != 89)
      {
        if (v22 == 28) {
          uint64_t v26 = 1;
        }
        else {
          uint64_t v26 = 2;
        }
        si_makeUnavailable((uint64_t)a1, v23, v26, 12, "flush err");
      }
      uint64_t v27 = *(void *)&threadData[18 * v40 + 2];
      unsigned int v28 = v39;
      uint64_t v29 = v27 + 320 * v39;
      *(_DWORD *)(v29 + 312) = v10;
      int v30 = *(void (**)(void))(v29 + 232);
      if (v30) {
        v30(*(void *)(v27 + 320 * v28 + 288));
      }
      dropThreadId(v40, 0, v4);
    }
    int v31 = v44;
    MEMORY[0x1C1882290](v44);
    if ((v31 & 0x80000000) == 0) {
      close(v31);
    }
  }
  if (gSILogLevels[0] >= 5)
  {
    int v35 = *__error();
    uint64_t v36 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1BD672000, v36, OS_LOG_TYPE_DEFAULT, "Finished forced sync!", buf, 2u);
    }
    *__error() = v35;
  }
  return 1;
}

void SIBulkDeleteAttributes(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unsigned int v6 = (pthread_mutex_t *)(a1 + 1808);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1808));
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a3 >= 1)
  {
    uint64_t v8 = 1;
    uint64_t v9 = a2;
    do
    {
      CFNumberRef v10 = CFNumberCreate(v7, kCFNumberLongLongType, v9);
      CFNumberRef Value = CFBagGetValue(*(CFBagRef *)(a1 + 1792), v10);
      CFRelease(v10);
      if (v8 >= a3) {
        break;
      }
      ++v8;
      ++v9;
    }
    while (!Value);
  }
  pthread_mutex_unlock(v6);
  uint64_t v12 = (const void *)RLEOIDArrayCreate(v7, a2, a3);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  _SIBulkDeleteAttributes((int *)a1, (uint64_t)v12, a3, (uint64_t)Current);
  if (*(void *)(a1 + 1152))
  {
    CFNumberRef v14 = (CFAbsoluteTime *)malloc_type_malloc(0x20uLL, 0x10600405FCA77C1uLL);
    *(void *)CFNumberRef v14 = a1;
    *((void *)v14 + 1) = v12;
    v14[3] = CFAbsoluteTimeGetCurrent();
    uint64_t v15 = *(void *)(a1 + 1152);
    si_enqueue_barrier(v15, (uint64_t)_SIBulkDeleteAttributesHeld, (uint64_t)v14);
  }
  else if (v12)
  {
    CFRelease(v12);
  }
}

int *_SIBulkDeleteAttributes(int *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    uint64_t v4 = (uint64_t)result;
    if (*((void *)result + 131))
    {
      if (!RLEOIDArrayIsEmpty(a2))
      {
        uint64_t v9 = malloc_type_calloc(1uLL, 0x80uLL, 0x10300406AF0F2FAuLL);
        void *v9 = v4;
        CFNumberRef v10 = malloc_type_malloc(0x2000uLL, 0x100004000313F17uLL);
        v9[6] = 1024;
        v9[1] = v10;
        void v9[2] = -1;
        RLEOIDIteratorCreate(a2);
      }
      int v7 = gSISystemInDarkWake;
      uint64_t v8 = time(0) - a4;
      return si_message_trace_darkwake(0, v4, (uint64_t)"PermissionCache", v7, (uint64_t)"Validate", (uint64_t)"Permission cache in dark wake", v8);
    }
  }
  return result;
}

void _SIBulkDeleteAttributesHeld(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    _SIBulkDeleteAttributes(*(int **)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), (uint64_t)*(double *)(a1 + 24));
  }
  CFRelease(*(CFTypeRef *)(a1 + 8));
  free((void *)a1);
}

void si_bulk_delete_attributes(uint64_t a1, int a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    uint64_t v5 = *(void *)a1;
    if (*(void *)(a1 + 16) == -1) {
      *(void *)(a1 + 16) = SIGetLargestOid(*(void *)a1);
    }
    if (!*(void *)(a1 + 112)) {
      *(void *)(a1 + 112) = time(0);
    }
    unsigned int v29 = 0;
    if (fd_setDir(*(unsigned int *)(v5 + 32), (int *)&v29))
    {
      if (*(void *)(a1 + 40))
      {
        uint64_t v6 = 0;
        while (1)
        {
          int64_t v7 = *(void *)(*(void *)(a1 + 8) + 8 * v6);
          if (v7 > *(void *)(a1 + 16)) {
            break;
          }
          if (dword_1E9FC90B4 >= 5)
          {
            int v8 = *__error();
            uint64_t v9 = _SILogForLogForCategory(4);
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v10 = *(void *)(*(void *)(a1 + 8) + 8 * v6);
              *(_DWORD *)long long buf = 134217984;
              uint64_t v31 = v10;
              _os_log_impl(&dword_1BD672000, v9, OS_LOG_TYPE_DEFAULT, "Delete (bulk) oid: %lld", buf, 0xCu);
            }
            *__error() = v8;
            int64_t v7 = *(void *)(*(void *)(a1 + 8) + 8 * v6);
          }
          buf[0] = 0;
          _si_delete_attributes_inner(v5, v7, 1u, 0, 0, 0, buf);
          si_finish_text_store_deletions(v5);
          if (buf[0]) {
            notify_post("com.apple.spotlight.SyndicatedContentDeleted");
          }
          ++*(void *)(a1 + 56);
          if ((unint64_t)++v6 >= *(void *)(a1 + 40)) {
            goto LABEL_18;
          }
        }
        if (gSILogLevels[0] >= 5)
        {
          int v25 = *__error();
          uint64_t v26 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v27 = *(void *)(a1 + 16);
            uint64_t v28 = *(void *)(*(void *)(a1 + 8) + 8 * v6);
            *(_DWORD *)long long buf = 134218240;
            uint64_t v31 = v28;
            __int16 v32 = 2048;
            uint64_t v33 = v27;
            _os_log_impl(&dword_1BD672000, v26, OS_LOG_TYPE_DEFAULT, "oid: %lld > max_oid: %lld", buf, 0x16u);
          }
          *__error() = v25;
        }
        fd_resetDir(v29);
        *(void *)(a1 + 40) = 0;
        goto LABEL_30;
      }
LABEL_18:
      int v11 = v29;
      MEMORY[0x1C1882290](v29);
      if ((v11 & 0x80000000) == 0) {
        close(v11);
      }
    }
    uint64_t v12 = RLEOIDIteratorNext(*(unsigned char ***)(a1 + 64), *(void *)(a1 + 8), *(void *)(a1 + 48));
    *(void *)(a1 + 40) = v12;
    if (v12)
    {
      uint64_t v13 = *(void **)(a1 + 8);
      if (*(void *)(a1 + 24) < *v13 && *(void *)(a1 + 56) < *(void *)(a1 + 32))
      {
        *(void *)(a1 + 24) = v13[v12 - 1];
        si_enqueue_barrier(*(void *)(v5 + 1048), (uint64_t)si_bulk_delete_attributes, a1);
        a1 = 0;
LABEL_34:
        bumpWorkTime(v5, Current);
        goto LABEL_35;
      }
    }
    if (*(void *)(a1 + 56) >= 0x401uLL)
    {
      int v14 = *__error();
      uint64_t v15 = _SILogForLogForCategory(0);
      os_log_type_t v16 = 2 * (gSILogLevels[0] < 4);
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = *(void *)(a1 + 40);
        *(_DWORD *)long long buf = 67109120;
        LODWORD(v31) = v17;
        _os_log_impl(&dword_1BD672000, v15, v16, "%d missing items, cleaninup up cache.", buf, 8u);
      }
      *__error() = v14;
      if (v5 && *(void *)(v5 + 1184))
      {
        uint64_t v18 = malloc_type_calloc(1uLL, 0x48uLL, 0x1020040A82CC6CDuLL);
        *uint64_t v18 = v5;
        si_enqueue_work(*(void *)(v5 + 1056), (uint64_t)si_cacheCleanup, (uint64_t)v18);
      }
    }
LABEL_30:
    uint64_t v19 = (int *)*(unsigned __int8 *)(a1 + 104);
    uint64_t v20 = *(void *)a1;
    int v21 = gSISystemInDarkWake;
    if (*(unsigned char *)(a1 + 120)) {
      int v22 = "Initial";
    }
    else {
      int v22 = "Validate";
    }
    time_t v23 = time(0);
    si_message_trace_darkwake(v19, v20, (uint64_t)"PermissionCache", v21, (uint64_t)v22, (uint64_t)"Permission cache in dark wake", v23 - *(void *)(a1 + 112));
    goto LABEL_34;
  }
LABEL_35:
  if (a1)
  {
    si_power_info_cleanup(a1 + 72, *(void *)a1, a2 != 0);
    uint64_t v24 = *(uint64_t **)(a1 + 64);
    if (v24) {
      RLEOIDIteratorDestroy(v24);
    }
    free(*(void **)(a1 + 8));
    free((void *)a1);
  }
}

uint64_t SIGetLargestOid(uint64_t a1)
{
  if (!*(void *)(a1 + 1184)) {
    return -1;
  }
  makeThreadId();
  int v2 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
  unint64_t v3 = setThreadIdAndInfo(*(_DWORD *)(a1 + 32), sFdExceptionCallbacks, 0, 1, v2);
  unsigned int v24 = HIDWORD(v3);
  unsigned int v25 = v3;
  unint64_t v23 = __PAIR64__(v4, v5);
  uint64_t v6 = *(void *)&threadData[18 * v3 + 2];
  uint64_t v7 = v6 + 320 * HIDWORD(v3);
  *(unsigned char *)(v7 + 216) = 0;
  int v8 = *(_DWORD *)(v7 + 312);
  uint64_t v9 = *(void (**)(void))(v7 + 224);
  if (v9) {
    v9(*(void *)(v6 + 320 * HIDWORD(v3) + 288));
  }
  unsigned int v22 = v25;
  unsigned int v21 = v24;
  unint64_t v20 = v23;
  if (_setjmp((int *)v7))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v19 = 0;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v19, 2u);
    }
    *(_DWORD *)(v7 + 312) = v8;
    CIOnThreadCleanUpReset(v20);
    dropThreadId(v22, 1, v2);
    CICleanUpReset(v22, HIDWORD(v20));
    return -1;
  }
  else
  {
    uint64_t v12 = db_datastore_largest_oid(*(void *)(a1 + 1184));
    uint64_t v13 = *(void *)(a1 + 6872);
    uint64_t v10 = v12;
    if (v13)
    {
      uint64_t v18 = db_datastore_largest_oid(v13);
      if (v12 <= v18) {
        uint64_t v10 = v18;
      }
      else {
        uint64_t v10 = v12;
      }
    }
    uint64_t v14 = *(void *)&threadData[18 * v22 + 2];
    unsigned int v15 = v21;
    uint64_t v16 = v14 + 320 * v21;
    *(_DWORD *)(v16 + 312) = v8;
    uint64_t v17 = *(void (**)(void))(v16 + 232);
    if (v17) {
      v17(*(void *)(v14 + 320 * v15 + 288));
    }
    dropThreadId(v22, 0, v2);
  }
  return v10;
}

uint64_t SISerializeCacheData(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(v1 + 1184);
  if (!v4) {
    return 0;
  }
  if (*(_DWORD *)v4 != 1685287992)
  {
    int v57 = *__error();
    int v58 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      int v59 = *(_DWORD *)v4;
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "db_serialize_cache";
      __int16 v69 = 1024;
      int v70 = 491;
      __int16 v71 = 1024;
      int v72 = v59;
      _os_log_error_impl(&dword_1BD672000, v58, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v57;
    long long v60 = __si_assert_copy_extra_329();
    long long v61 = v60;
    if (v60) {
      uint64_t v62 = v60;
    }
    else {
      uint64_t v62 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 491, v62);
    free(v61);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  unsigned int v5 = v3;
  uint64_t v6 = v2;
  int v7 = pthread_mutex_lock((pthread_mutex_t *)(v4 + 584));
  HIDWORD(v9) = qos_class_self() - 9;
  LODWORD(v9) = HIDWORD(v9);
  unsigned int v8 = v9 >> 2;
  if (v8 > 6) {
    signed int v10 = 0;
  }
  else {
    signed int v10 = dword_1BDA87810[v8];
  }
  if (*(void *)(v4 + 768)) {
    goto LABEL_16;
  }
  if (!*(_DWORD *)(v4 + 780) && !*(unsigned char *)(v4 + 796)) {
    goto LABEL_55;
  }
  uint64_t v12 = v10 <= 5 ? 5 : v10;
  uint64_t v13 = (uint64_t *)(v4 + 16 * v10 + 664);
  uint64_t v14 = v12 - v10 + 1;
  while (--v14)
  {
    uint64_t v15 = *v13;
    v13 += 2;
    if (v15) {
      goto LABEL_16;
    }
  }
  if (*(void *)(v4 + 16 * v10 + 648) && !*(_DWORD *)(v4 + 784)) {
LABEL_16:
  }
    db_rwlock_wait(v4 + 584, v10, 5);
  else {
LABEL_55:
  }
    *(int32x2_t *)(v4 + 780) = vadd_s32(*(int32x2_t *)(v4 + 780), (int32x2_t)0x100000001);
  unint64_t v67 = v5;
  pthread_mutex_unlock((pthread_mutex_t *)(v4 + 584));
  if (v7) {
    sdb2_die(v4, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 15385);
  }
  uint64_t v16 = *(void *)(v4 + 928);
  bzero(&buf[8], 0xFF9uLL);
  *(void *)long long buf = 3401903581;
  if (v16)
  {
    unsigned int v17 = atomic_load((unsigned int *)(v16 + 248));
    uint64_t v18 = malloc_type_calloc(0x10uLL, v17 + 1, 0xC4611BB6uLL);
    unsigned int v19 = atomic_load((unsigned int *)(v16 + 248));
    unint64_t v20 = malloc_type_malloc(8 * (v19 + 1), 0x80040B8603338uLL);
    unsigned int v21 = atomic_load((unsigned int *)(v16 + 248));
    unsigned int v22 = malloc_type_malloc(2 * (v21 + 1), 0x1000040BDFB0063uLL);
    if (atomic_load((unsigned int *)(v16 + 248)))
    {
      unint64_t v24 = 0;
      unsigned int v25 = v18;
      do
      {
        *(void *)unsigned int v25 = *(void *)v16;
        void v25[2] = v24;
        v20[v24++] = v25;
        unint64_t v26 = atomic_load((unsigned int *)(v16 + 248));
        v25 += 4;
      }
      while (v24 < v26);
    }
    atomic_load((unsigned int *)(v16 + 248));
    if (cache_get_info_for_keys() || (unsigned int v29 = atomic_load((unsigned int *)(v16 + 248))) == 0)
    {
      uint64_t v27 = 0;
      uint64_t v28 = 8;
    }
    else
    {
      unint64_t v30 = 0;
      int v31 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 8;
      do
      {
        if (v22[2 * v30])
        {
          unsigned int v32 = v30 - v31;
          unsigned int v33 = v32 >> 28;
          if (v32 >> 28)
          {
            int v35 = &buf[v28];
            *int v35 = v32 | 0x80;
            v35[1] = (v32 >> 7) | 0x80;
            v35[2] = (v32 >> 14) | 0x80;
            v28 += 4;
            v35[3] = (v32 >> 21) | 0x80;
          }
          else if ((v32 & 0xFE00000) != 0)
          {
            uint64_t v34 = &buf[v28];
            *uint64_t v34 = v32 | 0x80;
            v34[1] = (v32 >> 7) | 0x80;
            v28 += 3;
            v34[2] = (v32 >> 14) | 0x80;
            unsigned int v33 = (v32 & 0xFE00000) >> 21;
          }
          else if ((v32 & 0x1FC000) != 0)
          {
            unsigned int v44 = &buf[v28];
            uint8_t *v44 = v32 | 0x80;
            v28 += 2;
            v44[1] = (v32 >> 7) | 0x80;
            unsigned int v33 = (v32 & 0x1FC000) >> 14;
          }
          else if ((v32 & 0x3F80) != 0)
          {
            buf[v28++] = v32 | 0x80;
            unsigned int v33 = (unsigned __int16)(v32 & 0x3F80) >> 7;
          }
          else
          {
            LOBYTE(v33) = v32;
          }
          buf[v28++] = v33;
          if (v28 < 4092)
          {
            int v31 = v30;
          }
          else
          {
            long long v64 = v22;
            uint64_t v65 = v18;
            uint64_t v36 = 0;
LABEL_34:
            uint64_t v66 = 0;
            uint64_t v63 = v36;
            uint64_t v37 = &buf[v36];
            size_t v38 = v28;
            while (1)
            {
              while (1)
              {
                unint64_t v39 = write(v6, v37, v38);
                if ((v39 & 0x8000000000000000) == 0) {
                  break;
                }
                uint64_t v40 = g_prot_error_callback;
                if (g_prot_error_callback)
                {
                  unint64_t v41 = __error();
                  if ((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v40 + 16))(v40, v6, *v41, 6))continue; {
                }
                  }
                uint64_t v27 = -1;
                goto LABEL_57;
              }
              uint64_t v27 = v39 + v66;
              BOOL v42 = v38 > v39;
              v38 -= v39;
              if (!v42) {
                break;
              }
              v66 += v39;
              v37 += v39;
            }
            if (v27 == -1)
            {
LABEL_57:
              unsigned int v22 = v64;
              uint64_t v18 = v65;
              break;
            }
            uint64_t v36 = v27 + v63;
            *v67 += v27;
            v28 -= v27;
            if (v28) {
              goto LABEL_34;
            }
            int v31 = v30;
            unsigned int v22 = v64;
            uint64_t v18 = v65;
          }
        }
        ++v30;
        unint64_t v43 = atomic_load((unsigned int *)(v16 + 248));
      }
      while (v30 < v43);
    }
    uint64_t v45 = v27;
    free(v18);
    free(v20);
    free(v22);
    if (v45 == -1) {
      goto LABEL_71;
    }
  }
  else
  {
    uint64_t v28 = 8;
  }
  uint64_t v46 = 0;
  size_t v47 = v28 + 1;
  buf[v28] = 0;
  while (1)
  {
    uint64_t v48 = 0;
    uint64_t v49 = &buf[v46];
    size_t v50 = v47;
    while (1)
    {
      while (1)
      {
        unint64_t v51 = write(v6, v49, v50);
        if ((v51 & 0x8000000000000000) == 0) {
          break;
        }
        uint64_t v52 = g_prot_error_callback;
        if (g_prot_error_callback)
        {
          long long v53 = __error();
          if ((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v52 + 16))(v52, v6, *v53, 6))continue; {
        }
          }
        goto LABEL_71;
      }
      v48 += v51;
      BOOL v42 = v50 > v51;
      v50 -= v51;
      if (!v42) {
        break;
      }
      v49 += v51;
    }
    if (v48 == -1) {
      break;
    }
    uint64_t v11 = 0;
    v46 += v48;
    *v67 += v48;
    v47 -= v48;
    if (!v47) {
      goto LABEL_72;
    }
  }
LABEL_71:
  uint64_t v11 = 0xFFFFFFFFLL;
LABEL_72:
  int v54 = pthread_mutex_lock((pthread_mutex_t *)(v4 + 584));
  int32x2_t v55 = vadd_s32(*(int32x2_t *)(v4 + 780), (int32x2_t)-1);
  *(int32x2_t *)(v4 + 780) = v55;
  if (!v55.i32[0]) {
    db_rwlock_wakeup(v4 + 584, 0, 0);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v4 + 584));
  if (v54) {
    sdb2_die(v4, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 15387);
  }
  return v11;
}

uint64_t SIRestoreCacheData(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(_DWORD **)(v1 + 1184);
  if (v6)
  {
    v54[0] = MEMORY[0x1E4F143A8];
    v54[1] = 0x40000000;
    int32x2_t v55 = __SIRestoreCacheData_block_invoke;
    uint64_t v56 = &__block_descriptor_tmp_480;
    uint64_t v57 = v1;
    if (*v6 != 1685287992)
    {
      size_t v50 = __si_assert_copy_extra_329();
      unint64_t v51 = v50;
      if (v50) {
        uint64_t v52 = v50;
      }
      else {
        uint64_t v52 = "";
      }
      __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 490, v52);
      free(v51);
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    v58[0] = MEMORY[0x1E4F143A8];
    v58[1] = 0x40000000;
    void v58[2] = __db2_deserialize_cache_block_invoke;
    v58[3] = &__block_descriptor_tmp_123_12371;
    v58[4] = v6;
    bzero(__buf, 0x2000uLL);
    off_t v7 = *v4;
    while (1)
    {
      unint64_t v8 = pread(v5, __buf, 0x2000uLL, v7);
      uint64_t v9 = g_prot_error_callback;
      if (v8 != -1 || g_prot_error_callback == 0) {
        break;
      }
      uint64_t v11 = __error();
      if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v9 + 16))(v9, v5, *v11, 4) & 1) == 0)
      {
        unint64_t v12 = -1;
        goto LABEL_16;
      }
    }
    unint64_t v12 = v8;
    if (v8 <= 7)
    {
      int v14 = *__error();
      uint64_t v15 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        off_t v16 = *v4;
        *(_DWORD *)uint64_t v63 = 136315906;
        *(void *)&v63[4] = "page_cache_deserialize_entries";
        *(_WORD *)&v63[12] = 1024;
        *(_DWORD *)&v63[14] = 1537;
        *(_WORD *)&v63[18] = 2048;
        *(void *)&v63[20] = v12;
        *(_WORD *)&v63[28] = 2048;
        *(void *)&v63[30] = v16;
        unsigned int v17 = "%s:%d: Unexpected EOF in page cache preload; got %ld bytes at offset %lld";
        uint64_t v18 = v15;
        uint32_t v19 = 38;
LABEL_58:
        _os_log_error_impl(&dword_1BD672000, v18, OS_LOG_TYPE_ERROR, v17, v63, v19);
        goto LABEL_50;
      }
      goto LABEL_50;
    }
LABEL_16:
    uint64_t v20 = __buf[0];
    if (__buf[0] != 3401903581)
    {
      int v14 = *__error();
      uint64_t v46 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v63 = 136315650;
        *(void *)&v63[4] = "page_cache_deserialize_entries";
        *(_WORD *)&v63[12] = 1024;
        *(_DWORD *)&v63[14] = 1543;
        *(_WORD *)&v63[18] = 2048;
        *(void *)&v63[20] = v20;
        unsigned int v17 = "%s:%d: Missing signature in page cache preload %llx";
        uint64_t v18 = v46;
        uint32_t v19 = 28;
        goto LABEL_58;
      }
LABEL_50:
      uint64_t v13 = 0xFFFFFFFFLL;
      goto LABEL_54;
    }
    long long v53 = v4;
    unsigned int v21 = malloc_type_malloc(0x4000uLL, 0x100004052888210uLL);
    int v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 8;
    while (1)
    {
      uint64_t v26 = v25 + 1;
      int v27 = *((unsigned __int8 *)__buf + v25);
      if (*((char *)__buf + v25) < 0)
      {
        uint64_t v29 = v25 + 2;
        int v30 = *((char *)__buf + v26);
        int v31 = *((unsigned __int8 *)__buf + v26);
        if (v30 < 0)
        {
          uint64_t v32 = v25 + 3;
          int v33 = *((char *)__buf + v29);
          int v34 = *((unsigned __int8 *)__buf + v29);
          if (v33 < 0)
          {
            uint64_t v35 = v25 + 4;
            int v36 = *((char *)__buf + v32);
            int v37 = *((unsigned __int8 *)__buf + v32);
            if (v36 < 0)
            {
              v25 += 5;
              unsigned int v38 = *((unsigned __int8 *)__buf + v35);
              int v28 = (v38 >> 7) ^ 1;
              int v27 = ((v37 & 0x7F) << 21) | (v38 << 28) | ((v34 & 0x7F) << 14) | ((v31 & 0x7F) << 7) | v27 & 0x7F;
            }
            else
            {
              int v28 = 0;
              v25 += 4;
              int v27 = ((v34 & 0x7F) << 14) | (v37 << 21) | ((v31 & 0x7F) << 7) | v27 & 0x7F;
            }
          }
          else
          {
            int v28 = 0;
            v25 += 3;
            int v27 = ((v31 & 0x7F) << 7) | (v34 << 14) | v27 & 0x7F;
          }
        }
        else
        {
          int v28 = 0;
          int v27 = v27 & 0x7F | (v31 << 7);
          v25 += 2;
        }
      }
      else
      {
        int v28 = 0;
        ++v25;
      }
      BOOL v39 = v28 == 0;
      if (!v27 || v28 != 0) {
        break;
      }
      v22 += v27;
      v21[v24] = v22;
      if (v24 == 4095)
      {
        *(void *)uint64_t v63 = MEMORY[0x1E4F143A8];
        *(void *)&v63[8] = 0x40000000;
        *(void *)&v63[16] = __page_cache_deserialize_entries_block_invoke;
        *(void *)&v63[24] = &unk_1E6348AC0;
        *(void *)&v63[32] = v58;
        long long v64 = v21;
        uint64_t v65 = 4096;
        v55((uint64_t)v54, v63);
        unsigned int v21 = malloc_type_malloc(0x4000uLL, 0x100004052888210uLL);
        uint64_t v24 = 0;
      }
      else
      {
        ++v24;
      }
      ++v23;
      if (v25 + 5 >= v12)
      {
        off_t v41 = *v53 + v25;
        *long long v53 = v41;
        while (1)
        {
          ssize_t v42 = pread(v5, __buf, 0x2000uLL, v41);
          uint64_t v43 = g_prot_error_callback;
          if (v42 != -1 || g_prot_error_callback == 0) {
            break;
          }
          uint64_t v45 = __error();
          if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v43 + 16))(v43, v5, *v45, 4) & 1) == 0)
          {
            unint64_t v12 = -1;
            goto LABEL_44;
          }
        }
        unint64_t v12 = v42;
LABEL_44:
        uint64_t v25 = 0;
        if (!v12)
        {
          BOOL v39 = 1;
          break;
        }
      }
    }
    uint64_t v13 = (v39 - 1);
    if (v24 && v39)
    {
      v59[0] = MEMORY[0x1E4F143A8];
      v59[1] = 0x40000000;
      void v59[2] = __page_cache_deserialize_entries_block_invoke_2;
      v59[3] = &unk_1E6348AE8;
      v59[4] = v58;
      void v59[5] = v21;
      v59[6] = v24;
      v55((uint64_t)v54, v59);
    }
    else
    {
      free(v21);
    }
    *v53 += v25;
    int v14 = *__error();
    size_t v47 = _SILogForLogForCategory(7);
    os_log_type_t v48 = 2 * (dword_1E9FC90C0 < 4);
    if (os_log_type_enabled(v47, v48))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v62 = v23;
      _os_log_impl(&dword_1BD672000, v47, v48, "Pre-loaded %ld cache pages", buf, 0xCu);
    }
LABEL_54:
    *__error() = v14;
  }
  else
  {
    LOBYTE(__buf[0]) = 0;
    if (prot_pread(v2, __buf, 1uLL, *v3) == 1 && (++*v4, !LOBYTE(__buf[0]))) {
      return 0;
    }
    else {
      return 96;
    }
  }
  return v13;
}

void __SIRestoreCacheData_block_invoke(uint64_t a1, void *aBlock)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 1088);
  unint64_t v3 = _Block_copy(aBlock);
  si_enqueue_work(v2, (uint64_t)runBlock, (uint64_t)v3);
}

void runBlock(void (**a1)(void, void), int a2)
{
  ((void (**)(void, BOOL))a1)[2](a1, a2 != 0);
  _Block_release(a1);
}

uint64_t _SIGetRecoverTimeStamp(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  time_t v1 = *(void *)(a1 + 2400);
  if (!v1) {
    return 0;
  }
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  time_t v8 = v1;
  unint64_t v3 = localtime(&v8);
  strftime(v11, 0x100uLL, "%F %T", v3);
  int v4 = *__error();
  uint64_t v5 = _SILogForLogForCategory(0);
  os_log_type_t v6 = 2 * (gSILogLevels[0] < 4);
  if (os_log_type_enabled(v5, v6))
  {
    *(_DWORD *)long long buf = 136315138;
    signed int v10 = v11;
    _os_log_impl(&dword_1BD672000, v5, v6, "time stamp%s", buf, 0xCu);
  }
  *__error() = v4;
  return *(void *)(a1 + 2400);
}

uint64_t SISetAttributes(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  time_t v8 = malloc_type_calloc(1uLL, 0x50uLL, 0x10E0040BFFD03D2uLL);
  if (dword_1E9FC90B4 >= 5)
  {
    int v11 = *__error();
    long long v12 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1BD672000, v12, OS_LOG_TYPE_DEFAULT, "Do attribute change.", buf, 2u);
    }
    *__error() = v11;
  }
  v8[3] = a2;
  v8[1] = CFRetain(a3);
  if (a4) {
    CFTypeRef v9 = CFRetain(a4);
  }
  else {
    CFTypeRef v9 = 0;
  }
  v8[5] = v9;
  void *v8 = a1;
  *((_DWORD *)v8 + 13) = 7;
  si_enqueue_barrier(*(void *)(a1 + 1048), (uint64_t)setAttributes, (uint64_t)v8);
  if (dword_1E9FC90B4 >= 5)
  {
    int v13 = *__error();
    long long v14 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v15 = 0;
      _os_log_impl(&dword_1BD672000, v14, OS_LOG_TYPE_DEFAULT, "Leave.", v15, 2u);
    }
    *__error() = v13;
  }
  return 1;
}

void SIIndexingFullyCaughtUp(uint64_t a1)
{
  if (*(void *)(a1 + 1152))
  {
    uint64_t v2 = malloc_type_calloc(1uLL, 0x50uLL, 0x10E0040BFFD03D2uLL);
    *uint64_t v2 = a1;
    uint64_t v3 = *(void *)(a1 + 1152);
    si_enqueue_barrier(v3, (uint64_t)setIndexingCaughtUp0, (uint64_t)v2);
  }
}

void setIndexingCaughtUp0(void *a1, int a2)
{
  if (a2) {
    free(a1);
  }
  else {
    si_enqueue_barrier(*(void *)(*(void *)a1 + 1048), (uint64_t)setIndexingCaughtUp, (uint64_t)a1);
  }
}

void setIndexingCaughtUp(uint64_t *a1, int a2)
{
  if (!a2)
  {
    uint64_t v3 = *a1;
    *(unsigned char *)(v3 + 2451) = 1;
    uint64_t v4 = db_shrink_cache(*(void *)(v3 + 1184));
    if (v4) {
      si_makeUnavailable(*a1, v4, 0, 13, "Failure in db_shrink_cache at setIndexingCaughtUp");
    }
  }
  free(a1);
}

uint64_t SIDeleteCSAttributes(uint64_t a1, const void *a2, CFArrayRef theArray, void (*a4)(void, void), uint64_t a5)
{
  CFIndex Count = CFArrayGetCount(theArray);
  uint64_t v11 = Count;
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (Count >= 65000) {
    CFIndex v13 = 65000;
  }
  else {
    CFIndex v13 = Count;
  }
  CFIndex capacity = v13;
  CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v13, MEMORY[0x1E4F1D510]);
  if (v11 < 1)
  {
LABEL_13:
    uint64_t v21 = SISetCSAttributes(a1, a2, Mutable, 0x8000, a4, a5);
  }
  else
  {
    uint64_t v26 = a1;
    long long v23 = a4;
    uint64_t v24 = a5;
    CFIndex v15 = 0;
    long long v16 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    long long v17 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    do
    {
      while (1)
      {
        long long v18 = CFDictionaryCreateMutable(v12, 4, v16, v17);
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v15);
        CFDictionarySetValue(v18, @"_kMDItemExternalID", ValueAtIndex);
        CFArrayAppendValue(Mutable, v18);
        CFRelease(v18);
        if (CFArrayGetCount(Mutable) >= 65000) {
          break;
        }
        if (++v15 >= v11) {
          goto LABEL_12;
        }
      }
      int v20 = SISetCSAttributes(v26, a2, Mutable, 0x8000, (void (*)(void, void))noop, 0);
      CFRelease(Mutable);
      CFArrayRef Mutable = CFArrayCreateMutable(v12, capacity, MEMORY[0x1E4F1D510]);
      if (!v20) {
        break;
      }
      ++v15;
    }
    while (v15 < v11);
    if (v20)
    {
LABEL_12:
      a4 = v23;
      a5 = v24;
      a1 = v26;
      goto LABEL_13;
    }
    uint64_t v21 = 0;
  }
  CFRelease(Mutable);
  return v21;
}

uint64_t __mobile_journal_transfer_paths_block_invoke(uint64_t a1, char *__s1)
{
  uint64_t result = strncmp(__s1, "skg_", 4uLL);
  if (!result)
  {
    uint64_t result = renameat(*(_DWORD *)(a1 + 40), __s1, *(_DWORD *)(a1 + 44), __s1);
    if (result) {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = 1;
    }
  }
  return result;
}

uint64_t __get_files_for_directory_block_invoke(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  if (**(_DWORD **)(a1 + 40)) {
    return 1;
  }
  if (a4) {
    return 2;
  }
  int v5 = a3[1];
  if (v5 == 1)
  {
    if (!*(unsigned char *)(a1 + 48) && *a3 > 0) {
      return 2;
    }
  }
  else if (!v5)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  return 0;
}

uint64_t SIGetCSAttributes(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5, int a6, const void *a7)
{
  long long v14 = (CFAbsoluteTime *)malloc_type_calloc(1uLL, 0x40uLL, 0x10E0040D1AEC469uLL);
  *(void *)long long v14 = a1;
  *((void *)v14 + 1) = CFRetain(a2);
  *((void *)v14 + 2) = CFRetain(a3);
  *((void *)v14 + 3) = CFRetain(a4);
  v14[4] = CFAbsoluteTimeGetCurrent();
  if (a5) {
    CFRetain(a5);
  }
  *((void *)v14 + 5) = a5;
  *((_DWORD *)v14 + 12) = a6;
  *((void *)v14 + 7) = _Block_copy(a7);
  uint64_t v15 = *(void *)(a1 + 1080);
  qos_class_t v16 = qos_class_self();
  si_enqueue_work_with_qos(v15, v16, (uint64_t)si_getCSAttr, (uint64_t)v14);
  return 0;
}

uint64_t SIGetCacheFileDescriptors(uint64_t a1, const void *a2, const void *a3, const void *a4, int a5, const void *a6)
{
  CFAllocatorRef v12 = (CFAbsoluteTime *)malloc_type_calloc(1uLL, 0x38uLL, 0x10E0040BA4910EAuLL);
  *(void *)CFAllocatorRef v12 = a1;
  *((void *)v12 + 1) = CFRetain(a2);
  *((void *)v12 + 2) = CFRetain(a3);
  v12[3] = CFAbsoluteTimeGetCurrent();
  if (a4) {
    CFRetain(a4);
  }
  *((void *)v12 + 4) = a4;
  *((_DWORD *)v12 + 10) = a5;
  *((void *)v12 + 6) = _Block_copy(a6);
  uint64_t v13 = *(void *)(a1 + 1080);
  qos_class_t v14 = qos_class_self();
  si_enqueue_work_with_qos(v13, v14, (uint64_t)si_getCacheFileDescriptors, (uint64_t)v12);
  return 0;
}

uint64_t SIGetCacheFd(uint64_t a1, const void *a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 0x10uLL, 0xA0040AFF93C70uLL);
  *uint64_t v4 = a1;
  v4[1] = _Block_copy(a2);
  uint64_t v5 = *(void *)(a1 + 1080);
  qos_class_t v6 = qos_class_self();
  si_enqueue_work_with_qos(v5, v6, (uint64_t)si_getCacheFd, (uint64_t)v4);
  return 0;
}

uint64_t SIGetCacheEntry(uint64_t a1, const void *a2, const void *a3, const void *a4)
{
  time_t v8 = malloc_type_calloc(1uLL, 0x20uLL, 0xE0040C8AD4411uLL);
  void *v8 = a1;
  v8[1] = CFRetain(a2);
  void v8[2] = CFRetain(a3);
  v8[3] = _Block_copy(a4);
  uint64_t v9 = *(void *)(a1 + 1080);
  qos_class_t v10 = qos_class_self();
  si_enqueue_work_with_qos(v9, v10, (uint64_t)si_getCacheEntry, (uint64_t)v8);
  return 0;
}

uint64_t SISetCacheEntry(uint64_t a1, const void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 1280))
  {
    int v3 = *__error();
    uint64_t v4 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 134217984;
      uint64_t v10 = a1;
      _os_log_impl(&dword_1BD672000, v4, OS_LOG_TYPE_DEFAULT, "Can't set cache entry because the index is read-only. ref:%p", (uint8_t *)&v9, 0xCu);
    }
    uint64_t v5 = 0;
    *__error() = v3;
  }
  else
  {
    uint64_t v5 = 1;
    off_t v7 = malloc_type_calloc(1uLL, 0x10uLL, 0x60040FAFB2B2FuLL);
    *off_t v7 = a1;
    v7[1] = CFRetain(a2);
    si_enqueue_work_with_qos(*(void *)(a1 + 1048), 9, (uint64_t)si_setCacheEntry, (uint64_t)v7);
  }
  return v5;
}

uint64_t SIDeleteCacheEntry(uint64_t a1, const void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 1280))
  {
    int v3 = *__error();
    uint64_t v4 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 134217984;
      uint64_t v10 = a1;
      _os_log_impl(&dword_1BD672000, v4, OS_LOG_TYPE_DEFAULT, "Can't delete cache entry because the index is read-only. ref:%p", (uint8_t *)&v9, 0xCu);
    }
    uint64_t v5 = __error();
    uint64_t result = 0;
    *uint64_t v5 = v3;
  }
  else
  {
    time_t v8 = malloc_type_calloc(1uLL, 0x18uLL, 0x60040149E097CuLL);
    void *v8 = a1;
    if (a2) {
      void v8[2] = CFRetain(a2);
    }
    si_enqueue_work_with_qos(*(void *)(a1 + 1048), 9, (uint64_t)si_deleteCacheEntry, (uint64_t)v8);
    return 1;
  }
  return result;
}

uint64_t SICloseCache(uint64_t a1)
{
  uint64_t v2 = malloc_type_calloc(1uLL, 0x10uLL, 0x60040FAFB2B2FuLL);
  *uint64_t v2 = a1;
  si_enqueue_work_with_qos(*(void *)(a1 + 1048), 9, (uint64_t)si_closeCache, (uint64_t)v2);
  return 1;
}

uint64_t SIHoldAssertion(uint64_t a1, int a2, double a3)
{
  uint64_t v3 = a1;
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return v3;
  }
  if (!*(unsigned char *)(a1 + 1280))
  {
    uint64_t v98 = 0;
    int v99 = &v98;
    uint64_t v100 = 0x2000000000;
    char v101 = 1;
    time_t v8 = 0;
    double v9 = CFAbsoluteTimeGetCurrent() + a3;
    if (a2)
    {
      uint64_t v10 = (atomic_uint *)fd_create_protected(*(_DWORD *)(v3 + 32), "bgassertions", 536872449, 3u);
      if (!v10)
      {
        int v21 = *__error();
        long long v22 = _SILogForLogForCategory(10);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          os_log_type_t v48 = __error();
          uint64_t v49 = strerror(*v48);
          int v50 = *__error();
          *(_DWORD *)long long buf = 136315906;
          *(void *)&uint8_t buf[4] = "SIHoldAssertion";
          *(_WORD *)&uint8_t buf[12] = 1024;
          *(_DWORD *)&buf[14] = 19832;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v49;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v50;
          _os_log_error_impl(&dword_1BD672000, v22, OS_LOG_TYPE_ERROR, "%s:%d: Unable to create bg assertion touch file: %s(%d)", buf, 0x22u);
        }
        uint64_t v3 = 0;
        *__error() = v21;
        goto LABEL_102;
      }
      time_t v8 = v10;
      memset(buf, 0, 55);
      __sprintf_chk((char *)buf, 0, 0x37uLL, "%d$F$", (int)v9);
      size_t v11 = strlen((const char *)buf);
      uint64_t v12 = fd_write((uint64_t)v8, (uint64_t)buf, v11);
      if (v12 != strlen((const char *)buf))
      {
        int v23 = *__error();
        uint64_t v24 = _SILogForLogForCategory(10);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          unint64_t v51 = __error();
          uint64_t v52 = strerror(*v51);
          int v53 = *__error();
          *(_DWORD *)int v110 = 136315906;
          *(void *)&v110[4] = "SIHoldAssertion";
          *(_WORD *)&v110[12] = 1024;
          *(_DWORD *)&v110[14] = 19838;
          *(_WORD *)&v110[18] = 2080;
          *(void *)&v110[20] = v52;
          *(_WORD *)&v110[28] = 1024;
          *(_DWORD *)&v110[30] = v53;
          _os_log_error_impl(&dword_1BD672000, v24, OS_LOG_TYPE_ERROR, "%s:%d: bg assertion touch file write error: %s(%d)", v110, 0x22u);
        }
        *__error() = v23;
        fd_release(v8);
        goto LABEL_101;
      }
    }
    uint64_t v13 = *(void *)(v3 + 1376);
    v92[0] = MEMORY[0x1E4F143A8];
    v92[1] = 0x40000000;
    unint64_t v93 = __SIHoldAssertion_block_invoke;
    unsigned int v94 = &unk_1E6341708;
    double v96 = a3;
    uint64_t v97 = v8;
    unsigned int v95 = &v98;
    if (v13 && *(_DWORD *)(v13 + 8))
    {
      unint64_t v14 = 0;
      do
      {
        if (!((unsigned int (*)(void *, void, uint64_t))v93)(v92, *(void *)(*(void *)v13 + 8 * v14), 1))break; {
        ++v14;
        }
      }
      while (v14 < *(unsigned int *)(v13 + 8));
    }
    if (!*((unsigned char *)v99 + 24)) {
      goto LABEL_83;
    }
    uint64_t v15 = *(void *)(v3 + 1184);
    if (*(_DWORD *)v15 != 1685287992)
    {
      int v86 = *__error();
      CFAbsoluteTime v87 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
      {
        int v88 = *(_DWORD *)v15;
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "db_datastore_hold_assertion";
        *(_WORD *)&uint8_t buf[12] = 1024;
        *(_DWORD *)&buf[14] = 239;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v88;
        _os_log_error_impl(&dword_1BD672000, v87, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
      }
      *__error() = v86;
      int64_t v89 = __si_assert_copy_extra_329();
      uint64_t v90 = v89;
      if (v89) {
        uint64_t v91 = v89;
      }
      else {
        uint64_t v91 = "";
      }
      __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 239, v91);
      free(v90);
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    if (db_read_lock(v15 + 584)) {
      sdb2_die(v15, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 15093);
    }
    if ((fd_hold_assertion(*(void *)(v15 + 848), (uint64_t)v8, a3) & 0x80000000) != 0)
    {
      int v25 = pthread_mutex_lock((pthread_mutex_t *)(v15 + 584));
      int v26 = *(_DWORD *)(v15 + 780) - 1;
      *(_DWORD *)(v15 + 780) = v26;
      if (!v26) {
        db_rwlock_wakeup(v15 + 584, 0, 0);
      }
      pthread_mutex_unlock((pthread_mutex_t *)(v15 + 584));
      if (v25) {
        sdb2_die(v15, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 15096);
      }
    }
    else if ((fd_hold_assertion(*(void *)(v15 + 840), (uint64_t)v8, a3) & 0x80000000) != 0)
    {
      int v25 = pthread_mutex_lock((pthread_mutex_t *)(v15 + 584));
      int v27 = *(_DWORD *)(v15 + 780) - 1;
      *(_DWORD *)(v15 + 780) = v27;
      if (!v27) {
        db_rwlock_wakeup(v15 + 584, 0, 0);
      }
      pthread_mutex_unlock((pthread_mutex_t *)(v15 + 584));
      if (v25) {
        sdb2_die(v15, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 15101);
      }
    }
    else
    {
      uint64_t v16 = *(void *)(v15 + 880);
      int v17 = *(_DWORD *)(v16 + 216);
      if (v17 == -270471200)
      {
        uint64_t v20 = 0;
      }
      else
      {
        BOOL v68 = v17 == 1684300900;
        long long v18 = (uint64_t *)(v16 + 1296);
        long long v19 = (uint64_t *)(v16 + 272);
        if (!v68) {
          long long v19 = v18;
        }
        uint64_t v20 = *v19;
      }
      if ((fd_hold_assertion(v20, (uint64_t)v8, a3) & 0x80000000) != 0) {
        goto LABEL_71;
      }
      uint64_t v28 = *(void *)(v15 + 888);
      int v29 = *(_DWORD *)(v28 + 216);
      if (v29 == -270471200)
      {
        uint64_t v32 = 0;
      }
      else
      {
        BOOL v68 = v29 == 1684300900;
        int v30 = (uint64_t *)(v28 + 1296);
        int v31 = (uint64_t *)(v28 + 272);
        if (!v68) {
          int v31 = v30;
        }
        uint64_t v32 = *v31;
      }
      if ((fd_hold_assertion(v32, (uint64_t)v8, a3) & 0x80000000) != 0) {
        goto LABEL_71;
      }
      uint64_t v33 = *(void *)(v15 + 896);
      int v34 = *(_DWORD *)(v33 + 216);
      if (v34 == -270471200)
      {
        uint64_t v37 = 0;
      }
      else
      {
        BOOL v68 = v34 == 1684300900;
        uint64_t v35 = (uint64_t *)(v33 + 1296);
        int v36 = (uint64_t *)(v33 + 272);
        if (!v68) {
          int v36 = v35;
        }
        uint64_t v37 = *v36;
      }
      if ((fd_hold_assertion(v37, (uint64_t)v8, a3) & 0x80000000) != 0) {
        goto LABEL_71;
      }
      uint64_t v38 = *(void *)(v15 + 904);
      int v39 = *(_DWORD *)(v38 + 216);
      if (v39 == -270471200)
      {
        uint64_t v42 = 0;
      }
      else
      {
        BOOL v68 = v39 == 1684300900;
        uint64_t v40 = (uint64_t *)(v38 + 1296);
        off_t v41 = (uint64_t *)(v38 + 272);
        if (!v68) {
          off_t v41 = v40;
        }
        uint64_t v42 = *v41;
      }
      if ((fd_hold_assertion(v42, (uint64_t)v8, a3) & 0x80000000) != 0) {
        goto LABEL_71;
      }
      uint64_t v43 = *(void *)(v15 + 912);
      int v44 = *(_DWORD *)(v43 + 216);
      if (v44 == -270471200)
      {
        uint64_t v47 = 0;
      }
      else
      {
        BOOL v68 = v44 == 1684300900;
        uint64_t v45 = (uint64_t *)(v43 + 1296);
        uint64_t v46 = (uint64_t *)(v43 + 272);
        if (!v68) {
          uint64_t v46 = v45;
        }
        uint64_t v47 = *v46;
      }
      if ((fd_hold_assertion(v47, (uint64_t)v8, a3) & 0x80000000) != 0) {
        goto LABEL_71;
      }
      uint64_t v54 = *(void *)(v15 + 920);
      int v55 = *(_DWORD *)(v54 + 216);
      if (v55 == -270471200)
      {
        uint64_t v58 = 0;
      }
      else
      {
        BOOL v68 = v55 == 1684300900;
        uint64_t v56 = (uint64_t *)(v54 + 1296);
        uint64_t v57 = (uint64_t *)(v54 + 272);
        if (!v68) {
          uint64_t v57 = v56;
        }
        uint64_t v58 = *v57;
      }
      if ((fd_hold_assertion(v58, (uint64_t)v8, a3) & 0x80000000) != 0)
      {
LABEL_71:
        int v25 = pthread_mutex_lock((pthread_mutex_t *)(v15 + 584));
        int v59 = *(_DWORD *)(v15 + 780) - 1;
        *(_DWORD *)(v15 + 780) = v59;
        if (!v59) {
          db_rwlock_wakeup(v15 + 584, 0, 0);
        }
        pthread_mutex_unlock((pthread_mutex_t *)(v15 + 584));
        if (v25) {
          sdb2_die(v15, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 15107);
        }
      }
      else
      {
        LOBYTE(v25) = 1;
        *(unsigned char *)(v15 + 988) = 1;
        if (db_read_unlock(v15 + 584)) {
          sdb2_die(v15, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 15114);
        }
      }
    }
    char v60 = v99[3] & v25;
    *((unsigned char *)v99 + 24) = v60;
    if ((v60 & 1) == 0) {
      goto LABEL_83;
    }
    BOOL v61 = _SICreateFdAndHoldAssertion(*(_DWORD *)(v3 + 32), (uint64_t)v8, "dirStore.overlay", a3);
    char v62 = v99[3] & v61;
    *((unsigned char *)v99 + 24) = v62;
    if ((v62 & 1) == 0) {
      goto LABEL_83;
    }
    BOOL v63 = _SICreateFdAndHoldAssertion(*(_DWORD *)(v3 + 32), (uint64_t)v8, "tmp.spotlight.loc", a3);
    char v64 = v99[3] & v63;
    *((unsigned char *)v99 + 24) = v64;
    if ((v64 & 1) != 0
      && (JournalFd = getJournalFd(v3, 0, 0),
          int v66 = fd_hold_assertion((uint64_t)JournalFd, (uint64_t)v8, a3),
          char v67 = v99[3] & (v66 >= 0),
          *((unsigned char *)v99 + 24) = v67,
          (v67 & 1) != 0))
    {
      *(_DWORD *)(v3 + 6952) = 0;
      bzero(buf, 0x400uLL);
      fd_name((uint64_t)JournalFd, (char *)buf, 0x400uLL);
      BOOL v68 = *(void *)buf == 0x416C616E72756F6ALL && *(_DWORD *)&buf[8] == 779252852;
      if (v68)
      {
        *(void *)int v110 = 0;
        int v69 = strtoll((const char *)&buf[12], (char **)v110, 0);
        *(_DWORD *)(v3 + 6952) = v69;
      }
      else
      {
        int v69 = *(_DWORD *)(v3 + 6952);
      }
      if (v69 <= 0) {
        goto LABEL_100;
      }
      if (v8)
      {
        if (fd_lseek(v8, 0, 0))
        {
          int v70 = *__error();
          __int16 v71 = _SILogForLogForCategory(10);
          if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
          {
            int v72 = __error();
            uint64_t v73 = strerror(*v72);
            int v74 = *__error();
            *(_DWORD *)int v110 = 136315906;
            *(void *)&v110[4] = "SIHoldAssertion";
            *(_WORD *)&v110[12] = 1024;
            *(_DWORD *)&v110[14] = 19902;
            *(_WORD *)&v110[18] = 2080;
            *(void *)&v110[20] = v73;
            *(_WORD *)&v110[28] = 1024;
            *(_DWORD *)&v110[30] = v74;
            unsigned int v75 = "%s:%d: bg assertion touch file lseek error: %s(%d)";
            uint64_t v76 = v110;
LABEL_98:
            _os_log_error_impl(&dword_1BD672000, v71, OS_LOG_TYPE_ERROR, v75, v76, 0x22u);
          }
LABEL_99:
          *__error() = v70;
LABEL_100:
          fd_release(v8);
          SIDropAssertion(v3);
LABEL_101:
          uint64_t v3 = 0;
          goto LABEL_102;
        }
        memset(v110, 0, 55);
        __sprintf_chk((char *)v110, 0, 0x37uLL, "%d$S$", (int)v9);
        size_t v77 = strlen((const char *)v110);
        uint64_t v78 = fd_write((uint64_t)v8, (uint64_t)v110, v77);
        if (v78 != strlen((const char *)v110))
        {
          int v70 = *__error();
          __int16 v71 = _SILogForLogForCategory(10);
          if (!os_log_type_enabled(v71, OS_LOG_TYPE_ERROR)) {
            goto LABEL_99;
          }
          os_log_type_t v82 = __error();
          CFAbsoluteTime v83 = strerror(*v82);
          int v84 = *__error();
          *(_DWORD *)uint64_t v102 = 136315906;
          __int16 v103 = "SIHoldAssertion";
          __int16 v104 = 1024;
          int v105 = 19910;
          __int16 v106 = 2080;
          CFAbsoluteTime v107 = v83;
          __int16 v108 = 1024;
          int v109 = v84;
          unsigned int v75 = "%s:%d: bg assertion touch file write error: %s(%d)";
          goto LABEL_97;
        }
        if (fd_sync((uint64_t)v8, 1))
        {
          int v70 = *__error();
          __int16 v71 = _SILogForLogForCategory(10);
          if (!os_log_type_enabled(v71, OS_LOG_TYPE_ERROR)) {
            goto LABEL_99;
          }
          uint64_t v79 = __error();
          int v80 = strerror(*v79);
          int v81 = *__error();
          *(_DWORD *)uint64_t v102 = 136315906;
          __int16 v103 = "SIHoldAssertion";
          __int16 v104 = 1024;
          int v105 = 19917;
          __int16 v106 = 2080;
          CFAbsoluteTime v107 = v80;
          __int16 v108 = 1024;
          int v109 = v81;
          unsigned int v75 = "%s:%d: bg assertion touch file fsync error: %s(%d)";
LABEL_97:
          uint64_t v76 = v102;
          goto LABEL_98;
        }
        fd_release(v8);
      }
    }
    else
    {
LABEL_83:
      fd_release(v8);
      SIDropAssertion(v3);
    }
    uint64_t v3 = *((unsigned __int8 *)v99 + 24);
LABEL_102:
    _Block_object_dispose(&v98, 8);
    return v3;
  }
  int v4 = *__error();
  uint64_t v5 = _SILogForLogForCategory(10);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl(&dword_1BD672000, v5, OS_LOG_TYPE_DEFAULT, "Can't hold assertions because the index is read-only. ref:%p", buf, 0xCu);
  }
  uint64_t v3 = 0;
  *__error() = v4;
  return v3;
}

BOOL __SIHoldAssertion_block_invoke(double *a1, uint64_t *a2)
{
  if (!a2
    || (v4 = a1[5], uint64_t v5 = *((void *)a1 + 6), (fd_hold_assertion(a2[584], v5, v4) & 0x80000000) != 0)
    || (fd_hold_assertion(a2[59], v5, v4) & 0x80000000) != 0
    || (fd_hold_assertion(a2[26], v5, v4) & 0x80000000) != 0)
  {
    BOOL result = 0;
  }
  else
  {
    BOOL result = _CICreateFdAndHoldAssertion((uint64_t)a2, v5, "shadowIndexDirectory", v4);
    if (result)
    {
      BOOL result = _CICreateFdAndHoldAssertion((uint64_t)a2, v5, "shadowIndexCompactDirectory", v4);
      if (result) {
        BOOL result = _CICreateFdAndHoldAssertion((uint64_t)a2, v5, "shadowIndexArrays", v4);
      }
    }
  }
  *(unsigned char *)(*(void *)(*((void *)a1 + 4) + 8) + 24) &= result;
  return result;
}

uint64_t SIDropAssertion(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v63 = 0;
    char v64 = &v63;
    uint64_t v65 = 0x2000000000;
    char v66 = 0;
    char v66 = SIDeleteBgAssertionFile(a1);
    uint64_t v2 = *(void *)(v1 + 1376);
    v59[0] = MEMORY[0x1E4F143A8];
    v59[1] = 0x40000000;
    char v60 = __SIDropAssertion_block_invoke;
    BOOL v61 = &unk_1E6341730;
    char v62 = &v63;
    if (v2 && *(_DWORD *)(v2 + 8))
    {
      unint64_t v3 = 0;
      do
      {
        if (!((unsigned int (*)(void *, void, uint64_t))v60)(v59, *(void *)(*(void *)v2 + 8 * v3), 1))break; {
        ++v3;
        }
      }
      while (v3 < *(unsigned int *)(v2 + 8));
    }
    uint64_t v4 = *(void *)(v1 + 1184);
    if (*(_DWORD *)v4 != 1685287992)
    {
      int v51 = *__error();
      uint64_t v52 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        int v53 = *(_DWORD *)v4;
        *(_DWORD *)long long buf = 136315650;
        BOOL v68 = "db_datastore_drop_assertion";
        __int16 v69 = 1024;
        int v70 = 240;
        __int16 v71 = 1024;
        int v72 = v53;
        _os_log_error_impl(&dword_1BD672000, v52, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
      }
      *__error() = v51;
      uint64_t v54 = __si_assert_copy_extra_329();
      int v55 = v54;
      if (v54) {
        uint64_t v56 = v54;
      }
      else {
        uint64_t v56 = "";
      }
      __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 240, v56);
      free(v55);
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    if (db_read_lock(v4 + 584)) {
      sdb2_die(v4, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 15122);
    }
    *(unsigned char *)(v4 + 988) = 0;
    int v5 = fd_drop_assertion(*(void *)(v4 + 848));
    int v6 = fd_drop_assertion(*(void *)(v4 + 840));
    uint64_t v7 = *(void *)(v4 + 880);
    int v8 = *(_DWORD *)(v7 + 216);
    int v58 = v6;
    if (v8 == -270471200)
    {
      uint64_t v12 = 0;
    }
    else
    {
      BOOL v9 = v8 == 1684300900;
      uint64_t v10 = (uint64_t *)(v7 + 1296);
      size_t v11 = (uint64_t *)(v7 + 272);
      if (!v9) {
        size_t v11 = v10;
      }
      uint64_t v12 = *v11;
    }
    int v13 = fd_drop_assertion(v12);
    uint64_t v14 = *(void *)(v4 + 888);
    int v15 = *(_DWORD *)(v14 + 216);
    int v57 = v13;
    if (v15 == -270471200)
    {
      uint64_t v18 = 0;
    }
    else
    {
      BOOL v9 = v15 == 1684300900;
      uint64_t v16 = (uint64_t *)(v14 + 1296);
      int v17 = (uint64_t *)(v14 + 272);
      if (!v9) {
        int v17 = v16;
      }
      uint64_t v18 = *v17;
    }
    int v19 = fd_drop_assertion(v18);
    uint64_t v20 = *(void *)(v4 + 896);
    int v21 = *(_DWORD *)(v20 + 216);
    if (v21 == -270471200)
    {
      uint64_t v24 = 0;
    }
    else
    {
      BOOL v9 = v21 == 1684300900;
      long long v22 = (uint64_t *)(v20 + 1296);
      int v23 = (uint64_t *)(v20 + 272);
      if (!v9) {
        int v23 = v22;
      }
      uint64_t v24 = *v23;
    }
    int v25 = fd_drop_assertion(v24);
    uint64_t v26 = *(void *)(v4 + 904);
    int v27 = *(_DWORD *)(v26 + 216);
    if (v27 == -270471200)
    {
      uint64_t v30 = 0;
    }
    else
    {
      BOOL v9 = v27 == 1684300900;
      uint64_t v28 = (uint64_t *)(v26 + 1296);
      int v29 = (uint64_t *)(v26 + 272);
      if (!v9) {
        int v29 = v28;
      }
      uint64_t v30 = *v29;
    }
    int v31 = fd_drop_assertion(v30);
    uint64_t v32 = *(void *)(v4 + 912);
    int v33 = *(_DWORD *)(v32 + 216);
    if (v33 == -270471200)
    {
      uint64_t v36 = 0;
    }
    else
    {
      BOOL v9 = v33 == 1684300900;
      int v34 = (uint64_t *)(v32 + 1296);
      uint64_t v35 = (uint64_t *)(v32 + 272);
      if (!v9) {
        uint64_t v35 = v34;
      }
      uint64_t v36 = *v35;
    }
    int v37 = fd_drop_assertion(v36);
    uint64_t v38 = *(void *)(v4 + 920);
    int v39 = *(_DWORD *)(v38 + 216);
    if (v39 == -270471200)
    {
      uint64_t v42 = 0;
    }
    else
    {
      BOOL v9 = v39 == 1684300900;
      uint64_t v40 = (uint64_t *)(v38 + 1296);
      off_t v41 = (uint64_t *)(v38 + 272);
      if (!v9) {
        off_t v41 = v40;
      }
      uint64_t v42 = *v41;
    }
    int v43 = fd_drop_assertion(v42);
    int v44 = pthread_mutex_lock((pthread_mutex_t *)(v4 + 584));
    int v45 = *(_DWORD *)(v4 + 780) - 1;
    *(_DWORD *)(v4 + 780) = v45;
    if (!v45) {
      db_rwlock_wakeup(v4 + 584, 0, 0);
    }
    pthread_mutex_unlock((pthread_mutex_t *)(v4 + 584));
    if (v44) {
      sdb2_die(v4, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 15134);
    }
    *((unsigned char *)v64 + 24) &= (v58 | v5 | v57 | v19 | v25 | v31 | v37 | v43) >= 0;
    BOOL v46 = _SICreateFdAndDropAssertion(*(_DWORD *)(v1 + 32), "dirStore.overlay");
    *((unsigned char *)v64 + 24) &= v46;
    BOOL v47 = _SICreateFdAndDropAssertion(*(_DWORD *)(v1 + 32), "tmp.spotlight.loc");
    *((unsigned char *)v64 + 24) &= v47;
    JournalFd = getJournalFd(v1, 0, 0);
    int v49 = fd_drop_assertion((uint64_t)JournalFd);
    uint64_t v1 = (_BYTE)v64[3] & (v49 >= 0);
    *((unsigned char *)v64 + 24) &= v49 >= 0;
    _Block_object_dispose(&v63, 8);
  }
  return v1;
}

BOOL _SICreateFdAndHoldAssertion(int a1, uint64_t a2, const char *a3, double a4)
{
  *(void *)&v30[5] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (atomic_uint *)fd_create_protected(a1, a3, 514, 0);
  if (v7)
  {
    int v8 = v7;
    uint64_t v22 = 0;
    int v9 = _fd_acquire_fd((uint64_t)v7, &v22);
    if (v9 < 0)
    {
      int v13 = *__error();
      uint64_t v14 = _SILogForLogForCategory(10);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        int v19 = *__error();
        uint64_t v20 = __error();
        int v21 = strerror(*v20);
        *(_DWORD *)long long buf = 136316418;
        uint64_t v24 = "_SICreateFdAndHoldAssertion";
        __int16 v25 = 1024;
        int v26 = 19778;
        __int16 v27 = 1024;
        *(_DWORD *)uint64_t v28 = v9;
        *(_WORD *)&v28[4] = 2080;
        *(void *)&v28[6] = a3;
        __int16 v29 = 1024;
        v30[0] = v19;
        LOWORD(v30[1]) = 2080;
        *(void *)((char *)&v30[1] + 2) = v21;
        _os_log_error_impl(&dword_1BD672000, v14, OS_LOG_TYPE_ERROR, "%s:%d: fd = %d for %s file: %d(%s)", buf, 0x32u);
      }
      BOOL v10 = 0;
      *__error() = v13;
    }
    else
    {
      BOOL v10 = (int)fd_hold_assertion((uint64_t)v8, a2, a4) >= 0;
      _fd_release_fd(v8, v9, 0, v22);
    }
    fd_release(v8);
  }
  else
  {
    int v11 = *__error();
    uint64_t v12 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v16 = *__error();
      int v17 = __error();
      uint64_t v18 = strerror(*v17);
      *(_DWORD *)long long buf = 136316162;
      uint64_t v24 = "_SICreateFdAndHoldAssertion";
      __int16 v25 = 1024;
      int v26 = 19766;
      __int16 v27 = 2080;
      *(void *)uint64_t v28 = a3;
      *(_WORD *)&void v28[8] = 1024;
      *(_DWORD *)&v28[10] = v16;
      __int16 v29 = 2080;
      *(void *)uint64_t v30 = v18;
      _os_log_error_impl(&dword_1BD672000, v12, OS_LOG_TYPE_ERROR, "%s:%d: Unable to get fdptr for %s file: %d(%s)", buf, 0x2Cu);
    }
    BOOL v10 = 0;
    *__error() = v11;
  }
  return v10;
}

uint64_t SIDeleteBgAssertionFile(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (atomic_uint *)fd_create_protected(*(_DWORD *)(a1 + 32), "bgassertions", 536870914, 0);
  if (v1)
  {
    uint64_t v2 = v1;
    if ((_fd_unlink_with_origin((uint64_t)v1, 0) & 0x80000000) != 0)
    {
      int v10 = *__error();
      int v11 = _SILogForLogForCategory(10);
      os_log_type_t v12 = dword_1E9FC90CC < 3;
      if (os_log_type_enabled(v11, (os_log_type_t)(dword_1E9FC90CC < 3)))
      {
        int v13 = __error();
        uint64_t v14 = strerror(*v13);
        int v15 = *__error();
        int v17 = 136315394;
        uint64_t v18 = v14;
        __int16 v19 = 1024;
        int v20 = v15;
        _os_log_impl(&dword_1BD672000, v11, v12, "*warn* Unable to delete bg assertion touch file: %s(%d)", (uint8_t *)&v17, 0x12u);
      }
      uint64_t v3 = 0;
      *__error() = v10;
    }
    else
    {
      uint64_t v3 = 1;
    }
    fd_release(v2);
  }
  else
  {
    int v4 = *__error();
    int v5 = _SILogForLogForCategory(10);
    os_log_type_t v6 = dword_1E9FC90CC < 3;
    if (os_log_type_enabled(v5, (os_log_type_t)(dword_1E9FC90CC < 3)))
    {
      uint64_t v7 = __error();
      int v8 = strerror(*v7);
      int v9 = *__error();
      int v17 = 136315394;
      uint64_t v18 = v8;
      __int16 v19 = 1024;
      int v20 = v9;
      _os_log_impl(&dword_1BD672000, v5, v6, "*warn* Unable to open bg assertion touch file: %s(%d)", (uint8_t *)&v17, 0x12u);
    }
    uint64_t v3 = 0;
    *__error() = v4;
  }
  return v3;
}

uint64_t __SIDropAssertion_block_invoke(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    int v4 = fd_drop_assertion(a2[584]);
    int v5 = fd_drop_assertion(a2[59]) | v4;
    int v6 = v5 | fd_drop_assertion(a2[26]);
    BOOL v7 = _CICreateFdAndDropAssertion((uint64_t)a2, "shadowIndexDirectory");
    BOOL v8 = v6 >= 0 && v7;
    BOOL v9 = _CICreateFdAndDropAssertion((uint64_t)a2, "shadowIndexCompactDirectory");
    char v10 = v8 & v9 & _CICreateFdAndDropAssertion((uint64_t)a2, "shadowIndexArrays");
  }
  else
  {
    char v10 = 0;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) &= v10;
  return 1;
}

BOOL _SICreateFdAndDropAssertion(int a1, const char *a2)
{
  *(void *)&v26[5] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (atomic_uint *)fd_create_protected(a1, a2, 2, 0);
  if (v3)
  {
    int v4 = v3;
    uint64_t v18 = 0;
    int v5 = _fd_acquire_fd((uint64_t)v3, &v18);
    if (v5 < 0)
    {
      int v9 = *__error();
      char v10 = _SILogForLogForCategory(10);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        int v15 = *__error();
        int v16 = __error();
        int v17 = strerror(*v16);
        *(_DWORD *)long long buf = 136316418;
        int v20 = "_SICreateFdAndDropAssertion";
        __int16 v21 = 1024;
        int v22 = 19804;
        __int16 v23 = 1024;
        *(_DWORD *)uint64_t v24 = v5;
        *(_WORD *)&void v24[4] = 2080;
        *(void *)&v24[6] = a2;
        __int16 v25 = 1024;
        v26[0] = v15;
        LOWORD(v26[1]) = 2080;
        *(void *)((char *)&v26[1] + 2) = v17;
        _os_log_error_impl(&dword_1BD672000, v10, OS_LOG_TYPE_ERROR, "%s:%d: fd = %d for %s file: %d(%s)", buf, 0x32u);
      }
      BOOL v6 = 0;
      *__error() = v9;
    }
    else
    {
      BOOL v6 = (int)fd_drop_assertion((uint64_t)v4) >= 0;
      _fd_release_fd(v4, v5, 0, v18);
    }
    fd_release(v4);
  }
  else
  {
    int v7 = *__error();
    BOOL v8 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v12 = *__error();
      int v13 = __error();
      uint64_t v14 = strerror(*v13);
      *(_DWORD *)long long buf = 136316162;
      int v20 = "_SICreateFdAndDropAssertion";
      __int16 v21 = 1024;
      int v22 = 19791;
      __int16 v23 = 2080;
      *(void *)uint64_t v24 = a2;
      *(_WORD *)&v24[8] = 1024;
      *(_DWORD *)&v24[10] = v12;
      __int16 v25 = 2080;
      *(void *)int v26 = v14;
      _os_log_error_impl(&dword_1BD672000, v8, OS_LOG_TYPE_ERROR, "%s:%d: Unable to get fdptr for %s file: %d(%s)", buf, 0x2Cu);
    }
    BOOL v6 = 0;
    *__error() = v7;
  }
  return v6;
}

uint64_t SISetBgAssertionFlag(uint64_t result, char a2)
{
  if (result)
  {
    *(unsigned char *)(result + 6936) = a2;
    BOOL result = *(void *)(result + 1184);
    if (result) {
      return db_datastore_set_bg_assertion_flag(result, a2);
    }
  }
  return result;
}

uint64_t _SISetAssertedJournalNum(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 6952) = a2;
  }
  return result;
}

uint64_t SISetLockedJournalingState(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 6956) = a2;
  }
  return result;
}

void SICreateAssertedJournalFile(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v1 = (atomic_uint *)fd_create_protected(*(_DWORD *)(a1 + 32), "assertedJournalAttr.1", 536872458, 2u);
    if (v1)
    {
      uint64_t v2 = v1;
      fd_hold_assertion((uint64_t)v1, 0, 36000.0);
      fd_release(v2);
    }
    else
    {
      int v3 = *__error();
      int v4 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        int v5 = *__error();
        BOOL v6 = __error();
        int v7 = strerror(*v6);
        int v8 = 136315906;
        int v9 = "SICreateAssertedJournalFile";
        __int16 v10 = 1024;
        int v11 = 19993;
        __int16 v12 = 1024;
        int v13 = v5;
        __int16 v14 = 2080;
        int v15 = v7;
        _os_log_error_impl(&dword_1BD672000, v4, OS_LOG_TYPE_ERROR, "%s:%d: SICreateAssertedJournalFile: Unable to open asserted journal file %d(%s)", (uint8_t *)&v8, 0x22u);
      }
      *__error() = v3;
    }
  }
}

uint64_t SIIsLockedIndexingMode(uint64_t result)
{
  if (result) {
    return (*(unsigned __int8 *)(result + 830) >> 2) & 1;
  }
  return result;
}

void _SIValidateActivityJournal(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    bzero(v5, 0x400uLL);
    uint64_t v4 = 0;
    int v2 = _fd_acquire_fd(*(void *)(a1 + 2184), &v4);
    if (v2 != -1)
    {
      int v3 = v2;
      if (fcntl(v2, 50, v5) < 0 || !v5[0]) {
        _fd_release_fd(*(_DWORD **)(a1 + 2184), v3, 0, v4);
      }
      else {
        _SIActivityJournalGetOIDs((uint64_t)v5);
      }
    }
  }
}

uint64_t _SIValidateVectors(uint64_t result, int a2)
{
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  if (!result) {
    return result;
  }
  int v2 = *(int **)(result + 1184);
  if (!v2) {
    return result;
  }
  if (*v2 != 1685287992)
  {
    int v119 = *__error();
    int v120 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
    {
      int v121 = *v2;
      *(_DWORD *)unsigned int v151 = 136315650;
      *(void *)&v151[4] = "db_datastore_validate_vectors";
      *(_WORD *)&v151[12] = 1024;
      *(_DWORD *)&v151[14] = 238;
      *(_WORD *)&v151[18] = 1024;
      *(_DWORD *)&v151[20] = v121;
      _os_log_error_impl(&dword_1BD672000, v120, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", v151, 0x18u);
    }
    *__error() = v119;
    CFAbsoluteTime v122 = __si_assert_copy_extra_329();
    int64_t v123 = v122;
    if (v122) {
      uint64_t v124 = v122;
    }
    else {
      uint64_t v124 = "";
    }
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 238, v124);
    free(v123);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  uint64_t v4 = *((void *)v2 + 115);
  if (!v4) {
    goto LABEL_55;
  }
  int v5 = *(_DWORD *)(v4 + 216);
  if (v5 == 1684300900)
  {
    if (*(_DWORD *)(v4 + 4576)) {
      goto LABEL_52;
    }
    BOOL result = _data_map64_rdlock(*((void *)v2 + 115));
    if (!result)
    {
      unint64_t v7 = *(void *)(v4 + 288);
      int v6 = 1;
      if (!v7)
      {
LABEL_169:
        BOOL result = _data_map64_unlock(v4);
        goto LABEL_56;
      }
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      unint64_t v10 = 0;
      uint64_t v125 = *(unsigned int *)(v4 + 220);
      while (1)
      {
        *(void *)CFAbsoluteTime v130 = 0;
        *(void *)&v130[8] = 0;
        LOBYTE(v127) = 0;
        data_entry_restore_64(v4 + 272, v9, v7, (unsigned int *)v130, &v127);
        if ((_BYTE)v127)
        {
          long long v162 = 0u;
          long long v163 = 0u;
          long long v160 = 0u;
          long long v161 = 0u;
          long long v158 = 0u;
          long long v159 = 0u;
          long long v156 = 0u;
          long long v157 = 0u;
          long long v154 = 0u;
          long long v155 = 0u;
          long long v152 = 0u;
          long long v153 = 0u;
          memset(v151, 0, sizeof(v151));
          int v45 = *__error();
          BOOL v46 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
          {
            uint64_t v112 = fd_name(*(void *)(v4 + 240), (char *)v151, 0x100uLL);
            uint64_t v113 = *(void *)(v4 + 288);
            *(_DWORD *)long long buf = 136316418;
            *(void *)&uint8_t buf[4] = "_data_map64_get_data_entry";
            *(_WORD *)&uint8_t buf[12] = 1024;
            *(_DWORD *)&buf[14] = 375;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v112;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = v9;
            *(_WORD *)&buf[38] = 2048;
            *(void *)&uint8_t buf[40] = v113;
            *(_WORD *)&unsigned char buf[48] = 2048;
            *(void *)&buf[50] = *(unsigned int *)v130;
            _os_log_error_impl(&dword_1BD672000, v46, OS_LOG_TYPE_ERROR, "%s:%d: data_entry_restore_64 failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx", buf, 0x3Au);
          }
          *__error() = v45;
          if (a2 < 0)
          {
            int v95 = *__error();
            double v96 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)unsigned int v151 = 136315394;
              *(void *)&v151[4] = "_data_map64_validate";
              *(_WORD *)&v151[12] = 1024;
              *(_DWORD *)&v151[14] = 662;
              _os_log_error_impl(&dword_1BD672000, v96, OS_LOG_TYPE_ERROR, "%s:%d: entry exceeds storage", v151, 0x12u);
            }
            *__error() = v95;
          }
          else
          {
            dprintf(a2, "entry exceeds storage\n");
          }
          goto LABEL_168;
        }
        if (*(void *)(v4 + 4504) <= v10) {
          break;
        }
        uint64_t v11 = *(void *)(v4 + 4448);
        __int16 v12 = (uint64_t *)(v11 + v8);
        if (!v11)
        {
          if ((a2 & 0x80000000) == 0)
          {
LABEL_105:
            dprintf(a2, "Error mismatch offset ids\n");
            dprintf(a2, "offset not found for %lld offset 0x%llx %s\n");
            goto LABEL_168;
          }
          goto LABEL_115;
        }
        if (*v12 == 1)
        {
          if ((*(_WORD *)v130 & 0x3F80) != 0) {
            int v13 = 2;
          }
          else {
            int v13 = 1;
          }
          if ((*(_DWORD *)v130 & 0x1FC000) != 0) {
            int v13 = 3;
          }
          if ((*(_DWORD *)v130 & 0xFE00000) != 0) {
            int v13 = 4;
          }
          if (*(_DWORD *)v130 >> 28) {
            int v14 = 5;
          }
          else {
            int v14 = v13;
          }
          unsigned int v15 = v14 + *(_DWORD *)v130;
        }
        else
        {
          if (*v12 != v9)
          {
            if ((a2 & 0x80000000) == 0)
            {
              dprintf(a2, "Error mismatch offset ids\n");
              dprintf(a2, "sid: %lld so: %lld oo:%lld %s\n");
              goto LABEL_168;
            }
            char v66 = 0;
LABEL_116:
            int v67 = *__error();
            BOOL v68 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)unsigned int v151 = 136315394;
              *(void *)&v151[4] = "_data_map64_validate";
              *(_WORD *)&v151[12] = 1024;
              *(_DWORD *)&v151[14] = 677;
              _os_log_error_impl(&dword_1BD672000, v68, OS_LOG_TYPE_ERROR, "%s:%d: Error mismatch offset ids ", v151, 0x12u);
            }
            *__error() = v67;
            int v69 = *__error();
            int v70 = _SILogForLogForCategory(0);
            BOOL v71 = os_log_type_enabled(v70, OS_LOG_TYPE_ERROR);
            if (v66)
            {
              if (v71)
              {
                *(_DWORD *)unsigned int v151 = 136316162;
                *(void *)&v151[4] = "_data_map64_validate";
                *(_WORD *)&v151[12] = 1024;
                *(_DWORD *)&v151[14] = 687;
                *(_WORD *)&v151[18] = 2048;
                *(void *)&v151[20] = v10;
                *(_WORD *)&v151[28] = 2048;
                *(void *)&v151[30] = v9;
                *(_WORD *)&v151[38] = 2080;
                *(void *)&v151[40] = *(void *)&v130[8];
                int v72 = "%s:%d: offset not found for %lld offset 0x%llx %s";
                uint64_t v73 = v70;
                uint32_t v74 = 48;
                goto LABEL_194;
              }
            }
            else if (v71)
            {
              uint64_t v118 = *v12;
              *(_DWORD *)unsigned int v151 = 136316418;
              *(void *)&v151[4] = "_data_map64_validate";
              *(_WORD *)&v151[12] = 1024;
              *(_DWORD *)&v151[14] = 682;
              *(_WORD *)&v151[18] = 2048;
              *(void *)&v151[20] = v10;
              *(_WORD *)&v151[28] = 2048;
              *(void *)&v151[30] = v9;
              *(_WORD *)&v151[38] = 2048;
              *(void *)&v151[40] = v118;
              *(_WORD *)&v151[48] = 2080;
              *(void *)&v151[50] = *(void *)&v130[8];
              int v72 = "%s:%d: sid: %lld so: %lld oo:%lld %s";
              uint64_t v73 = v70;
              uint32_t v74 = 58;
LABEL_194:
              _os_log_error_impl(&dword_1BD672000, v73, OS_LOG_TYPE_ERROR, v72, v151, v74);
            }
            *__error() = v69;
            goto LABEL_168;
          }
          if (v10)
          {
            unsigned int v16 = *(_DWORD *)v130;
            int64_t v126 = *(const void **)&v130[8];
            unsigned int v17 = commonHash(*(_DWORD *)v130 - (int)v125, *(void *)&v130[8] + v125);
            bucket_entry = (void *)_data_map64_get_bucket_entry((uint64_t *)v4, v17, v10, 0, 0);
            __int16 v19 = bucket_entry;
            if (!bucket_entry)
            {
              if ((a2 & 0x80000000) == 0)
              {
                dprintf(a2, "Error mismatch hash ids\n");
                goto LABEL_165;
              }
              uint64_t v97 = 0;
              goto LABEL_172;
            }
            if (v10 != *bucket_entry)
            {
              uint64_t v97 = bucket_entry;
              if ((a2 & 0x80000000) == 0)
              {
                dprintf(a2, "Error mismatch hash ids\n");
                dprintf(a2, "sid: %llu hid: %lld offset: %lld %s\n");
                goto LABEL_168;
              }
LABEL_172:
              int v99 = *__error();
              uint64_t v100 = _SILogForLogForCategory(0);
              if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)unsigned int v151 = 136315394;
                *(void *)&v151[4] = "_data_map64_validate";
                *(_WORD *)&v151[12] = 1024;
                *(_DWORD *)&v151[14] = 707;
                _os_log_error_impl(&dword_1BD672000, v100, OS_LOG_TYPE_ERROR, "%s:%d: Error mismatch hash ids ", v151, 0x12u);
              }
              *__error() = v99;
              int v101 = *__error();
              uint64_t v102 = _SILogForLogForCategory(0);
              BOOL v103 = os_log_type_enabled(v102, OS_LOG_TYPE_ERROR);
              if (v19)
              {
                if (v103)
                {
                  uint64_t v104 = *v97;
                  *(_DWORD *)unsigned int v151 = 136316418;
                  *(void *)&v151[4] = "_data_map64_validate";
                  *(_WORD *)&v151[12] = 1024;
                  *(_DWORD *)&v151[14] = 712;
                  *(_WORD *)&v151[18] = 2048;
                  *(void *)&v151[20] = v10;
                  *(_WORD *)&v151[28] = 2048;
                  *(void *)&v151[30] = v104;
                  *(_WORD *)&v151[38] = 2048;
                  *(void *)&v151[40] = v9;
                  *(_WORD *)&v151[48] = 2080;
                  *(void *)&v151[50] = v126;
                  int v105 = "%s:%d: sid: %llu hid: %lld offset: %lld %s";
                  goto LABEL_183;
                }
                goto LABEL_190;
              }
              if (!v103) {
                goto LABEL_190;
              }
              *(_DWORD *)unsigned int v151 = 136316162;
              *(void *)&v151[4] = "_data_map64_validate";
              *(_WORD *)&v151[12] = 1024;
              *(_DWORD *)&v151[14] = 717;
              *(_WORD *)&v151[18] = 2048;
              *(void *)&v151[20] = v10;
              *(_WORD *)&v151[28] = 2048;
              *(void *)&v151[30] = v9;
              *(_WORD *)&v151[38] = 2080;
              *(void *)&v151[40] = v126;
              int v105 = "%s:%d: hash entry not found for %lld offset 0x%llx %s";
LABEL_188:
              int v110 = v102;
              uint32_t v111 = 48;
              goto LABEL_189;
            }
            unsigned int v20 = commonHash(v16 - *(_DWORD *)(v4 + 220), (uint64_t)v126 + *(unsigned int *)(v4 + 220));
            __int16 v21 = (void *)_data_map64_get_bucket_entry((uint64_t *)v4, v20, 0, v126, v16);
            int v22 = v21;
            if (!v21)
            {
              if (a2 < 0)
              {
                uint64_t v98 = 0;
                goto LABEL_178;
              }
              dprintf(a2, "Error mismatch hash\n");
LABEL_165:
              dprintf(a2, "hash entry not found for %lld offset 0x%llx %s\n");
LABEL_168:
              int v6 = 0;
              goto LABEL_169;
            }
            if (v10 != *v21)
            {
              uint64_t v98 = v21;
              if ((a2 & 0x80000000) == 0)
              {
                dprintf(a2, "Error mismatch hash\n");
                dprintf(a2, "sid: %llu hid: %llu offset: %llu ** %s **\n");
                goto LABEL_168;
              }
LABEL_178:
              int v106 = *__error();
              CFAbsoluteTime v107 = _SILogForLogForCategory(0);
              if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)unsigned int v151 = 136315394;
                *(void *)&v151[4] = "_data_map64_validate";
                *(_WORD *)&v151[12] = 1024;
                *(_DWORD *)&v151[14] = 729;
                _os_log_error_impl(&dword_1BD672000, v107, OS_LOG_TYPE_ERROR, "%s:%d: Error mismatch hash ", v151, 0x12u);
              }
              *__error() = v106;
              int v101 = *__error();
              uint64_t v102 = _SILogForLogForCategory(0);
              BOOL v108 = os_log_type_enabled(v102, OS_LOG_TYPE_ERROR);
              if (v22)
              {
                if (v108)
                {
                  uint64_t v109 = *v98;
                  *(_DWORD *)unsigned int v151 = 136316418;
                  *(void *)&v151[4] = "_data_map64_validate";
                  *(_WORD *)&v151[12] = 1024;
                  *(_DWORD *)&v151[14] = 734;
                  *(_WORD *)&v151[18] = 2048;
                  *(void *)&v151[20] = v10;
                  *(_WORD *)&v151[28] = 2048;
                  *(void *)&v151[30] = v109;
                  *(_WORD *)&v151[38] = 2048;
                  *(void *)&v151[40] = v9;
                  *(_WORD *)&v151[48] = 2080;
                  *(void *)&v151[50] = v126;
                  int v105 = "%s:%d: sid: %llu hid: %llu offset: %llu %s";
LABEL_183:
                  int v110 = v102;
                  uint32_t v111 = 58;
LABEL_189:
                  _os_log_error_impl(&dword_1BD672000, v110, OS_LOG_TYPE_ERROR, v105, v151, v111);
                }
LABEL_190:
                *__error() = v101;
                goto LABEL_168;
              }
              if (!v108) {
                goto LABEL_190;
              }
              *(_DWORD *)unsigned int v151 = 136316162;
              *(void *)&v151[4] = "_data_map64_validate";
              *(_WORD *)&v151[12] = 1024;
              *(_DWORD *)&v151[14] = 739;
              *(_WORD *)&v151[18] = 2048;
              *(void *)&v151[20] = v10;
              *(_WORD *)&v151[28] = 2048;
              *(void *)&v151[30] = v9;
              *(_WORD *)&v151[38] = 2080;
              *(void *)&v151[40] = v126;
              int v105 = "%s:%d: hash entry not found for %lld offset 0x%llx %s";
              goto LABEL_188;
            }
          }
          else
          {
            unsigned int v16 = *(_DWORD *)v130;
          }
          if ((v16 & 0x3F80) != 0) {
            int v23 = 2;
          }
          else {
            int v23 = 1;
          }
          if ((v16 & 0x1FC000) != 0) {
            int v23 = 3;
          }
          if ((v16 & 0xFE00000) != 0) {
            int v23 = 4;
          }
          if (v16 >> 28) {
            int v24 = 5;
          }
          else {
            int v24 = v23;
          }
          unsigned int v15 = v24 + v16;
        }
        v9 += v15;
        ++v10;
        unint64_t v7 = *(void *)(v4 + 288);
        v8 += 16;
        if (v9 >= v7)
        {
          int v6 = 1;
          goto LABEL_169;
        }
      }
      long long v162 = 0u;
      long long v163 = 0u;
      long long v160 = 0u;
      long long v161 = 0u;
      long long v158 = 0u;
      long long v159 = 0u;
      long long v156 = 0u;
      long long v157 = 0u;
      long long v154 = 0u;
      long long v155 = 0u;
      long long v152 = 0u;
      long long v153 = 0u;
      memset(v151, 0, sizeof(v151));
      int v47 = *__error();
      os_log_type_t v48 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        uint64_t v114 = *(void *)(v4 + 4504);
        long long v115 = fd_name(*(void *)(v4 + 240), (char *)v151, 0x100uLL);
        *(_DWORD *)long long buf = 136316418;
        *(void *)&uint8_t buf[4] = "_data_map64_get_offset_entry";
        *(_WORD *)&uint8_t buf[12] = 1024;
        *(_DWORD *)&buf[14] = 362;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(void *)&buf[20] = v10;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = v114;
        *(_WORD *)&buf[38] = 2048;
        *(void *)&uint8_t buf[40] = v4;
        *(_WORD *)&unsigned char buf[48] = 2080;
        *(void *)&buf[50] = v115;
        _os_log_error_impl(&dword_1BD672000, v48, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %lld max %lld %p %s", buf, 0x3Au);
      }
      *__error() = v47;
      if ((a2 & 0x80000000) == 0) {
        goto LABEL_105;
      }
      __int16 v12 = 0;
LABEL_115:
      char v66 = 1;
      goto LABEL_116;
    }
    goto LABEL_55;
  }
  if (v5 != 842150450)
  {
    if (v5 == -270471200)
    {
      if (!*(_DWORD *)(v4 + 464))
      {
        BOOL result = _data_map_ext_rdlock(*((void *)v2 + 115));
        if (!result)
        {
          BOOL result = _data_map_ext_unlock(v4);
          int v6 = 1;
          goto LABEL_56;
        }
        goto LABEL_55;
      }
LABEL_52:
      if ((a2 & 0x80000000) == 0)
      {
        dprintf(a2, "datamap is invalid\n");
        __int16 v25 = "failed";
        return dprintf(a2, "db_datastore_validate_vectors: %s\n", v25);
      }
      return result;
    }
    goto LABEL_55;
  }
  if (*(_DWORD *)(v4 + 1464)) {
    goto LABEL_52;
  }
  BOOL result = _data_map32_rdlock(*((void *)v2 + 115));
  if (result)
  {
LABEL_55:
    int v6 = 0;
    goto LABEL_56;
  }
  unsigned int v26 = *(_DWORD *)(v4 + 1320);
  int v6 = 1;
  if (!v26) {
    goto LABEL_158;
  }
  unsigned int v27 = 0;
  unsigned int v28 = 0;
  uint64_t v29 = *(unsigned int *)(v4 + 1244);
  while (1)
  {
    uint64_t v127 = 0;
    int v128 = 0;
    if (*(_DWORD *)(v4 + 1388) <= v28)
    {
      long long v162 = 0u;
      long long v163 = 0u;
      long long v160 = 0u;
      long long v161 = 0u;
      long long v158 = 0u;
      long long v159 = 0u;
      long long v156 = 0u;
      long long v157 = 0u;
      long long v154 = 0u;
      long long v155 = 0u;
      long long v152 = 0u;
      long long v153 = 0u;
      memset(v151, 0, sizeof(v151));
      int v31 = *__error();
      uint64_t v32 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        int v43 = *(_DWORD *)(v4 + 1388);
        int v44 = fd_name(*(void *)(v4 + 1264), (char *)v151, 0x100uLL);
        *(_DWORD *)long long buf = 136316418;
        *(void *)&uint8_t buf[4] = "_data_map32_get_offset_entry";
        *(_WORD *)&uint8_t buf[12] = 1024;
        *(_DWORD *)&buf[14] = 424;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v28;
        *(_WORD *)&unsigned char buf[24] = 1024;
        *(_DWORD *)&buf[26] = v43;
        *(_WORD *)&buf[30] = 2048;
        *(void *)&unsigned char buf[32] = v4;
        *(_WORD *)&uint8_t buf[40] = 2080;
        *(void *)&buf[42] = v44;
        _os_log_error_impl(&dword_1BD672000, v32, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %d max %d %p %s", buf, 0x32u);
      }
      uint64_t v30 = 0;
      *__error() = v31;
      unsigned int v26 = *(_DWORD *)(v4 + 1320);
    }
    else
    {
      uint64_t v30 = (unsigned int *)(*(void *)(v4 + 1344) + 4 * v28);
    }
    char v129 = 0;
    if (v26 <= v27)
    {
      long long v162 = 0u;
      long long v163 = 0u;
      long long v160 = 0u;
      long long v161 = 0u;
      long long v158 = 0u;
      long long v159 = 0u;
      long long v156 = 0u;
      long long v157 = 0u;
      long long v154 = 0u;
      long long v155 = 0u;
      long long v152 = 0u;
      long long v153 = 0u;
      memset(v151, 0, sizeof(v151));
      int v49 = *__error();
      int v50 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      {
LABEL_112:
        *__error() = v49;
        int v60 = *__error();
        BOOL v61 = _SILogForLogForCategory(0);
        if (!os_log_type_enabled(v61, OS_LOG_TYPE_ERROR)) {
          goto LABEL_156;
        }
        *(_DWORD *)unsigned int v151 = 136315394;
        *(void *)&v151[4] = "_data_map32_validate";
        *(_WORD *)&v151[12] = 1024;
        *(_DWORD *)&v151[14] = 762;
        char v62 = "%s:%d: entry exceeds storage";
        uint64_t v63 = v61;
        uint32_t v64 = 18;
        goto LABEL_155;
      }
      uint64_t v51 = *(unsigned int *)(v4 + 1320);
      uint64_t v52 = fd_name(*(void *)(v4 + 1264), (char *)v151, 0x100uLL);
      *(_DWORD *)long long buf = 136316418;
      *(void *)&uint8_t buf[4] = "_data_map32_get_data_entry";
      *(_WORD *)&uint8_t buf[12] = 1024;
      *(_DWORD *)&buf[14] = 448;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = v27;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = v51;
      *(_WORD *)&buf[38] = 2048;
      *(void *)&uint8_t buf[40] = v4;
      *(_WORD *)&unsigned char buf[48] = 2080;
      *(void *)&buf[50] = v52;
      int v53 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
      uint64_t v54 = buf;
      int v55 = v50;
      uint32_t v56 = 58;
LABEL_192:
      _os_log_error_impl(&dword_1BD672000, v55, OS_LOG_TYPE_ERROR, v53, v54, v56);
      goto LABEL_112;
    }
    data_entry_restore_32(*(void *)(v4 + 1312), v27, v26, (uint64_t)&v127, &v129);
    if (v129)
    {
      uint64_t v57 = 0;
      uint64_t v150 = 0;
      long long v148 = 0u;
      long long v149 = 0u;
      long long v146 = 0u;
      long long v147 = 0u;
      long long v144 = 0u;
      long long v145 = 0u;
      long long v142 = 0u;
      long long v143 = 0u;
      memset(buf, 0, sizeof(buf));
      do
      {
        if ((unint64_t)v27 + v57 >= *(unsigned int *)(v4 + 1320)) {
          break;
        }
        size_t v58 = strlen((const char *)buf);
        sprintf((char *)&buf[v58], "%d ", *(unsigned __int8 *)(*(void *)(v4 + 1312) + v27 + v57++));
      }
      while (v57 != 5);
      long long v162 = 0u;
      long long v163 = 0u;
      long long v160 = 0u;
      long long v161 = 0u;
      long long v158 = 0u;
      long long v159 = 0u;
      long long v156 = 0u;
      long long v157 = 0u;
      long long v154 = 0u;
      long long v155 = 0u;
      long long v152 = 0u;
      long long v153 = 0u;
      memset(v151, 0, sizeof(v151));
      int v49 = *__error();
      int v59 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v59, OS_LOG_TYPE_ERROR)) {
        goto LABEL_112;
      }
      long long v116 = fd_name(*(void *)(v4 + 1264), (char *)v151, 0x100uLL);
      uint64_t v117 = *(unsigned int *)(v4 + 1320);
      *(_DWORD *)CFAbsoluteTime v130 = 136316674;
      *(void *)&v130[4] = "_data_map32_get_data_entry";
      *(_WORD *)&v130[12] = 1024;
      *(_DWORD *)&v130[14] = 444;
      __int16 v131 = 2080;
      int v132 = v116;
      __int16 v133 = 2048;
      uint64_t v134 = v27;
      __int16 v135 = 2048;
      uint64_t v136 = v117;
      __int16 v137 = 2048;
      uint64_t v138 = v127;
      __int16 v139 = 2080;
      unsigned int v140 = buf;
      int v53 = "%s:%d: data_entry_restore_32 failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
      uint64_t v54 = v130;
      int v55 = v59;
      uint32_t v56 = 68;
      goto LABEL_192;
    }
    if (!v30) {
      break;
    }
    if (*v30 != v27)
    {
      uint64_t v65 = v30;
      goto LABEL_122;
    }
    if (v28)
    {
      unsigned int v34 = v127;
      int v33 = v128;
      if (*(unsigned char *)(v4 + 1460)) {
        unsigned int v35 = LegacyHash((unsigned __int16 *)((char *)v128 + v29), (v127 - v29));
      }
      else {
        unsigned int v35 = commonHash((int)v127 - (int)v29, (uint64_t)v128 + v29);
      }
      uint64_t v36 = (_DWORD *)_data_map32_get_bucket_entry(v4, v35, v28, 0, 0);
      int v37 = v36;
      if (!v36)
      {
        int v80 = 0;
        goto LABEL_135;
      }
      if (v28 != *v36)
      {
        int v80 = v36;
LABEL_135:
        int v81 = *__error();
        os_log_type_t v82 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unsigned int v151 = 136315394;
          *(void *)&v151[4] = "_data_map32_validate";
          *(_WORD *)&v151[12] = 1024;
          *(_DWORD *)&v151[14] = 789;
          _os_log_error_impl(&dword_1BD672000, v82, OS_LOG_TYPE_ERROR, "%s:%d: Error mismatch hash ids ", v151, 0x12u);
        }
        *__error() = v81;
        int v60 = *__error();
        CFAbsoluteTime v83 = _SILogForLogForCategory(0);
        BOOL v84 = os_log_type_enabled(v83, OS_LOG_TYPE_ERROR);
        if (v37)
        {
          if (v84)
          {
            int v85 = *v80;
            *(_DWORD *)unsigned int v151 = 136316418;
            *(void *)&v151[4] = "_data_map32_validate";
            *(_WORD *)&v151[12] = 1024;
            *(_DWORD *)&v151[14] = 791;
            *(_WORD *)&v151[18] = 1024;
            *(_DWORD *)&v151[20] = v28;
            *(_WORD *)&v151[24] = 1024;
            *(_DWORD *)&v151[26] = v85;
            *(_WORD *)&v151[30] = 2048;
            *(void *)&v151[32] = v27;
            *(_WORD *)&v151[40] = 2080;
            *(void *)&v151[42] = v33;
            int v86 = "%s:%d: sid: %d hid: %d offset: %ld %s";
            CFAbsoluteTime v87 = v83;
            uint32_t v88 = 50;
            goto LABEL_196;
          }
        }
        else if (v84)
        {
          *(_DWORD *)unsigned int v151 = 136316162;
          *(void *)&v151[4] = "_data_map32_validate";
          *(_WORD *)&v151[12] = 1024;
          *(_DWORD *)&v151[14] = 793;
          *(_WORD *)&v151[18] = 1024;
          *(_DWORD *)&v151[20] = v28;
          *(_WORD *)&v151[24] = 2048;
          *(void *)&v151[26] = v27;
          *(_WORD *)&v151[34] = 2080;
          *(void *)&v151[36] = v33;
          int v86 = "%s:%d: hash entry not found for %d offset 0x%lx %s";
          CFAbsoluteTime v87 = v83;
          uint32_t v88 = 44;
LABEL_196:
          _os_log_error_impl(&dword_1BD672000, v87, OS_LOG_TYPE_ERROR, v86, v151, v88);
        }
        int v6 = 0;
        goto LABEL_157;
      }
      if (*(unsigned char *)(v4 + 1460)) {
        unsigned int v38 = LegacyHash(v33, v34);
      }
      else {
        unsigned int v38 = commonHash(v34, (uint64_t)v33);
      }
      int v39 = (_DWORD *)_data_map32_get_bucket_entry(v4, v38, 0, v33, v34);
      uint64_t v40 = v39;
      if (!v39)
      {
        int64_t v89 = 0;
        goto LABEL_142;
      }
      if (v28 != *v39)
      {
        int64_t v89 = v39;
LABEL_142:
        int v90 = *__error();
        uint64_t v91 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unsigned int v151 = 136315394;
          *(void *)&v151[4] = "_data_map32_validate";
          *(_WORD *)&v151[12] = 1024;
          *(_DWORD *)&v151[14] = 803;
          _os_log_error_impl(&dword_1BD672000, v91, OS_LOG_TYPE_ERROR, "%s:%d: Error mismatch hash ", v151, 0x12u);
        }
        *__error() = v90;
        int v60 = *__error();
        int v92 = _SILogForLogForCategory(0);
        BOOL v93 = os_log_type_enabled(v92, OS_LOG_TYPE_ERROR);
        if (v40)
        {
          if (!v93) {
            goto LABEL_156;
          }
          int v94 = *v89;
          *(_DWORD *)unsigned int v151 = 136316418;
          *(void *)&v151[4] = "_data_map32_validate";
          *(_WORD *)&v151[12] = 1024;
          *(_DWORD *)&v151[14] = 805;
          *(_WORD *)&v151[18] = 1024;
          *(_DWORD *)&v151[20] = v28;
          *(_WORD *)&v151[24] = 1024;
          *(_DWORD *)&v151[26] = v94;
          *(_WORD *)&v151[30] = 2048;
          *(void *)&v151[32] = v27;
          *(_WORD *)&v151[40] = 2080;
          *(void *)&v151[42] = v33;
          char v62 = "%s:%d: sid: %d hid: %d offset: %ld %s";
          uint64_t v63 = v92;
          uint32_t v64 = 50;
          goto LABEL_155;
        }
        if (!v93) {
          goto LABEL_156;
        }
        *(_DWORD *)unsigned int v151 = 136316162;
        *(void *)&v151[4] = "_data_map32_validate";
        *(_WORD *)&v151[12] = 1024;
        *(_DWORD *)&v151[14] = 807;
        *(_WORD *)&v151[18] = 1024;
        *(_DWORD *)&v151[20] = v28;
        *(_WORD *)&v151[24] = 2048;
        *(void *)&v151[26] = v27;
        *(_WORD *)&v151[34] = 2080;
        *(void *)&v151[36] = v33;
        char v62 = "%s:%d: hash entry not found for %d offset 0x%lx %s";
        uint64_t v63 = v92;
LABEL_154:
        uint32_t v64 = 44;
        goto LABEL_155;
      }
    }
    else
    {
      unsigned int v34 = v127;
    }
    if ((v34 & 0x3F80) != 0) {
      int v41 = 2;
    }
    else {
      int v41 = 1;
    }
    if ((v34 & 0x1FC000) != 0) {
      int v41 = 3;
    }
    if ((v34 & 0xFE00000) != 0) {
      int v41 = 4;
    }
    if (v34 >> 28) {
      int v42 = 5;
    }
    else {
      int v42 = v41;
    }
    v27 += v34 + v42;
    ++v28;
    unsigned int v26 = *(_DWORD *)(v4 + 1320);
    if (v27 >= v26)
    {
      int v6 = 1;
      goto LABEL_158;
    }
  }
  uint64_t v65 = 0;
LABEL_122:
  int v75 = *__error();
  uint64_t v76 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)unsigned int v151 = 136315394;
    *(void *)&v151[4] = "_data_map32_validate";
    *(_WORD *)&v151[12] = 1024;
    *(_DWORD *)&v151[14] = 775;
    _os_log_error_impl(&dword_1BD672000, v76, OS_LOG_TYPE_ERROR, "%s:%d: Error mismatch offset ids ", v151, 0x12u);
  }
  *__error() = v75;
  int v60 = *__error();
  size_t v77 = _SILogForLogForCategory(0);
  BOOL v78 = os_log_type_enabled(v77, OS_LOG_TYPE_ERROR);
  if (!v30)
  {
    if (!v78) {
      goto LABEL_156;
    }
    *(_DWORD *)unsigned int v151 = 136316162;
    *(void *)&v151[4] = "_data_map32_validate";
    *(_WORD *)&v151[12] = 1024;
    *(_DWORD *)&v151[14] = 779;
    *(_WORD *)&v151[18] = 1024;
    *(_DWORD *)&v151[20] = v28;
    *(_WORD *)&v151[24] = 2048;
    *(void *)&v151[26] = v27;
    *(_WORD *)&v151[34] = 2080;
    *(void *)&v151[36] = v128;
    char v62 = "%s:%d: offset not found for %d offset 0x%lx %s";
    uint64_t v63 = v77;
    goto LABEL_154;
  }
  if (!v78) {
    goto LABEL_156;
  }
  uint64_t v79 = *v65;
  *(_DWORD *)unsigned int v151 = 136316418;
  *(void *)&v151[4] = "_data_map32_validate";
  *(_WORD *)&v151[12] = 1024;
  *(_DWORD *)&v151[14] = 777;
  *(_WORD *)&v151[18] = 1024;
  *(_DWORD *)&v151[20] = v28;
  *(_WORD *)&v151[24] = 2048;
  *(void *)&v151[26] = v27;
  *(_WORD *)&v151[34] = 2048;
  *(void *)&v151[36] = v79;
  *(_WORD *)&v151[44] = 2080;
  *(void *)&v151[46] = v128;
  char v62 = "%s:%d: sid: %d so: %ld oo:%ld %s";
  uint64_t v63 = v77;
  uint32_t v64 = 54;
LABEL_155:
  _os_log_error_impl(&dword_1BD672000, v63, OS_LOG_TYPE_ERROR, v62, v151, v64);
LABEL_156:
  int v6 = 1;
LABEL_157:
  *__error() = v60;
LABEL_158:
  BOOL result = _data_map32_unlock(v4);
LABEL_56:
  if ((a2 & 0x80000000) == 0)
  {
    __int16 v25 = "failed";
    if (v6) {
      __int16 v25 = "success";
    }
    return dprintf(a2, "db_datastore_validate_vectors: %s\n", v25);
  }
  return result;
}

uint64_t SIVectorIndexStorageSize(void *a1, char a2)
{
  if (!a1 || !a1[148]) {
    return 0;
  }
  uint64_t v2 = a1[173];
  uint64_t v3 = a1[172];
  uint64_t v13 = 0;
  int v14 = &v13;
  uint64_t v15 = 0x2000000000;
  uint64_t v16 = 0;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  unint64_t v9 = __ContentIndexVectorIndexStorageSize_block_invoke;
  unint64_t v10 = &unk_1E6346E78;
  uint64_t v11 = &v13;
  char v12 = a2;
  if (v2 && *(_DWORD *)(v2 + 8))
  {
    uint64_t v4 = 0;
    while (((unsigned int (*)(void *, void, void))v9)(v8, *(void *)(*(void *)v2 + 8 * v4), 0))
    {
      if (++v4 >= (unint64_t)*(unsigned int *)(v2 + 8)) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    if (v3 && *(_DWORD *)(v3 + 8))
    {
      unint64_t v5 = 0;
      do
      {
        if (!((unsigned int (*)(void *, void, uint64_t))v9)(v8, *(void *)(*(void *)v3 + 8 * v5), 1)) {
          break;
        }
        ++v5;
      }
      while (v5 < *(unsigned int *)(v3 + 8));
    }
  }
  uint64_t v6 = v14[3];
  _Block_object_dispose(&v13, 8);
  return v6;
}

uint64_t SIPurgeVectorIndex(uint64_t a1, int a2)
{
  if (!a1 || !*(void *)(a1 + 1184)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 1384);
  uint64_t v5 = *(void *)(a1 + 1376);
  uint64_t v18 = 0;
  __int16 v19 = &v18;
  uint64_t v20 = 0x2000000000;
  uint64_t v21 = 0;
  uint64_t v12 = MEMORY[0x1E4F143A8];
  uint64_t v13 = 0x40000000;
  int v14 = __ContentIndexPurgeVectorIndex_block_invoke;
  uint64_t v15 = &unk_1E6346EA0;
  uint64_t v16 = &v18;
  LOBYTE(v17) = a2;
  if (v4 && *(_DWORD *)(v4 + 8))
  {
    uint64_t v6 = 0;
    while (((unsigned int (*)(uint64_t *, void, void))v14)(&v12, *(void *)(*(void *)v4 + 8 * v6), 0))
    {
      if (++v6 >= (unint64_t)*(unsigned int *)(v4 + 8)) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    if (v5 && *(_DWORD *)(v5 + 8))
    {
      unint64_t v7 = 0;
      do
      {
        if (!((unsigned int (*)(uint64_t *, void, uint64_t))v14)(&v12, *(void *)(*(void *)v5 + 8 * v7), 1))break; {
        ++v7;
        }
      }
      while (v7 < *(unsigned int *)(v5 + 8));
    }
  }
  uint64_t v8 = v19[3];
  _Block_object_dispose(&v18, 8);
  if (v8)
  {
    if (a2) {
      int v9 = 2;
    }
    else {
      int v9 = 1;
    }
    create_scan_touch_file(*(unsigned int *)(a1 + 32), v9);
    uint64_t v10 = *(void *)(a1 + 1056);
    uint64_t v12 = MEMORY[0x1E4F143A8];
    uint64_t v13 = 0x40000000;
    int v14 = __scan_lost_ids_on_queue_block_invoke;
    uint64_t v15 = &__block_descriptor_tmp_1724;
    uint64_t v16 = (uint64_t *)a1;
    int v17 = v9;
    si_enqueue_block(v10, &v12);
  }
  return v8;
}

uint64_t __scan_lost_ids_on_queue_block_invoke(uint64_t result, int a2)
{
  if (!a2)
  {
    uint64_t v3 = *(void *)(result + 32);
    db_scan_lost_ids(*(int **)(v3 + 1184), *(unsigned int *)(result + 40), v3);
    int v4 = *(_DWORD *)(v3 + 32);
    return unlinkat(v4, "rescan_needed", 2048);
  }
  return result;
}

uint64_t SIGetAttributes(uint64_t a1, unint64_t a2, uint64_t a3, const __CFArray *a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  size_t v24 = 0;
  __int16 v25 = 0;
  CFIndex v23 = 0;
  SIFlattenArrayToCStringVector(a4, &v25, &v24, &v23);
  CFArrayRef Mutable = (const void *)_MDPlistBytesCreateMutable();
  _MDPlistBytesBeginPlist();
  _MDPlistBytesBeginArray();
  uint64_t v8 = v25;
  uint64_t v9 = v23;
  _MDPlistBytesAddNull();
  uint64_t v10 = *(int **)(a1 + 1184);
  if (v10)
  {
    unsigned int v28 = 0;
    if (v9 < 1 || db_get_obj(v10, a2, &v28, 0))
    {
      if (dword_1E9FC90B8 >= 5)
      {
        int v20 = *__error();
        uint64_t v21 = _SILogForLogForCategory(5);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134217984;
          unint64_t v30 = a2;
          _os_log_impl(&dword_1BD672000, v21, OS_LOG_TYPE_DEFAULT, "No dbo for %llx", buf, 0xCu);
        }
        *__error() = v20;
      }
      _MDPlistBytesAddNull();
    }
    else
    {
      _MDPlistBytesBeginArray();
      uint64_t v11 = (const char **)v8;
      do
      {
        unsigned int v26 = 0;
        unsigned int v27 = 0;
        if (db_get_field(v10, (uint64_t)v28, (char *)*v11, (unint64_t *)&v27, &v26))
        {
          uint64_t v12 = *v11;
          uint64_t v13 = (const char *)strlen(*v11);
          int v14 = CannedFieldTable::in_word_set((CannedFieldTable *)*v11, v13);
          if (!v14
            || (((uint64_t (*)(uint64_t, const char *, uint64_t, unint64_t, void *, void, void, void, void *, const void *))v14[1])(a1, v12, a3, a2, v28, 0, 0, 0, &__block_literal_global_94, Mutable) & 1) == 0)
          {
            if (dword_1E9FC90B8 >= 5)
            {
              int v22 = *__error();
              uint64_t v16 = _SILogForLogForCategory(5);
              if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
              {
                int v17 = *v11;
                *(_DWORD *)long long buf = 136315394;
                unint64_t v30 = (unint64_t)v17;
                __int16 v31 = 2048;
                unint64_t v32 = a2;
                _os_log_impl(&dword_1BD672000, v16, OS_LOG_TYPE_DEFAULT, "No attribute %s for %llx", buf, 0x16u);
              }
              *__error() = v22;
            }
            _MDPlistBytesAddNull();
          }
        }
        else
        {
          if (a3) {
            uint64_t v15 = *(char ***)(a3 + 120);
          }
          else {
            uint64_t v15 = 0;
          }
          MDPlistBytesAddSDBFieldLocalized((uint64_t)Mutable, v10, v27, v26, v15, 0, 1);
        }
        ++v11;
        --v9;
      }
      while (v9);
      _MDPlistBytesEndArray();
      free(v28);
    }
  }
  _MDPlistBytesEndArray();
  _MDPlistBytesEndPlist();
  uint64_t v18 = _MDPlistBytesCopyPlistAtIndex();
  if (Mutable) {
    CFRelease(Mutable);
  }
  free(v8);
  return v18;
}

char *SIExecuteQueryWithResultsCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  xpc_object_t values = a5;
  CFArrayRef v8 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 1, 0);
  uint64_t v9 = SIExecuteQueryWithResultsCallbackForTags(a1, a2, a3, 0, v8);
  CFRelease(v8);
  return v9;
}

char *SIExecuteQuery(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return SIExecuteQueryWithResultsCallback(a1, a2, a3, (uint64_t)a4, a4);
}

char *SIBulkGetAttributeNames(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = (char *)malloc_type_calloc(1uLL, 0x70uLL, 0x10200408DCF1539uLL);
  atomic_store(2u, (unsigned int *)v13);
  pthread_mutex_init((pthread_mutex_t *)(v13 + 48), 0);
  *((_DWORD *)v13 + 8) = 3;
  int v14 = malloc_type_calloc(1uLL, 0x38uLL, 0x1030040115CFCBFuLL);
  *int v14 = a1;
  atomic_fetch_add((atomic_uint *volatile)(a5 + 8), 1u);
  v14[3] = a5;
  v14[4] = v13;
  if (a4) {
    CFTypeRef v15 = CFRetain(a4);
  }
  else {
    CFTypeRef v15 = 0;
  }
  v14[5] = v15;
  v14[1] = a2;
  v14[2] = a3;
  if ((a7 & 0x100000) == 0)
  {
    if ((a7 & 0x400000) == 0) {
      goto LABEL_6;
    }
LABEL_11:
    *((unsigned char *)v14 + 48) |= 2u;
    if ((a7 & 0x200000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  *((unsigned char *)v14 + 48) |= 4u;
  if ((a7 & 0x400000) != 0) {
    goto LABEL_11;
  }
LABEL_6:
  if ((a7 & 0x200000) != 0) {
LABEL_7:
  }
    *((unsigned char *)v14 + 48) |= 1u;
LABEL_8:
  Log = _MDPerf_QueryLog();
  if ((unint64_t)(v13 + 1) >= 2)
  {
    uint64_t v18 = Log;
    if (os_signpost_enabled(Log))
    {
      qos_class_t v19 = qos_class_self();
      int v20 = *((_DWORD *)v13 + 8);
      int v21 = 134218496;
      uint64_t v22 = 0;
      __int16 v23 = 1024;
      qos_class_t v24 = v19;
      __int16 v25 = 1024;
      int v26 = v20;
      _os_signpost_emit_with_name_impl(&dword_1BD672000, v18, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v13, "Job", "QueryId=%{signpost.description:attribute}lld CurrentQoS=%{signpost.description:attribute}x JobType=%{signpost.description:attribute}d", (uint8_t *)&v21, 0x18u);
    }
  }
  si_enqueue_routine(a1, (uint64_t)v13, (uint64_t (*)(uint64_t, uint64_t))si_getAttrNamesBulk, (uint64_t)v14, 9u);
  return v13;
}

char *SIBulkGetAttributes(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, const void *a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = (char *)malloc_type_calloc(1uLL, 0x70uLL, 0x10200408DCF1539uLL);
  atomic_store(2u, (unsigned int *)v16);
  pthread_mutex_init((pthread_mutex_t *)(v16 + 48), 0);
  *((_DWORD *)v16 + 8) = 2;
  int v17 = malloc_type_calloc(1uLL, 0x48uLL, 0x10700402C59DD4BuLL);
  *(void *)int v17 = a1;
  *((void *)v17 + 1) = CFRetain(a5);
  atomic_fetch_add((atomic_uint *volatile)(a6 + 8), 1u);
  *((void *)v17 + 4) = a6;
  *((void *)v17 + 5) = v16;
  if (a4) {
    CFTypeRef v18 = CFRetain(a4);
  }
  else {
    CFTypeRef v18 = 0;
  }
  *((void *)v17 + 6) = v18;
  *((void *)v17 + 2) = a2;
  *((void *)v17 + 3) = a3;
  *((CFAbsoluteTime *)v17 + 7) = CFAbsoluteTimeGetCurrent();
  char v19 = *((unsigned char *)v17 + 64) & 0xF7;
  if ((a8 & 0x100000) != 0) {
    char v19 = *((unsigned char *)v17 + 64) & 0xF3 | 4;
  }
  *((unsigned char *)v17 + 64) = (a8 >> 21) & 3 | v19;
  if (*(_DWORD *)(a1 + 1276) == 102)
  {
    int v20 = si_attrs_remapping_copy(*((const __CFArray **)v17 + 1), (*(_DWORD *)(a1 + 6576) >> 6) & 1);
    if (v20)
    {
      int v21 = v20;
      CFRelease(*((CFTypeRef *)v17 + 1));
      *((void *)v17 + 1) = v21;
    }
  }
  BOOL v22 = a3 != 0;
  if (a3) {
    uint64_t v23 = a3 - 1;
  }
  else {
    uint64_t v23 = 0;
  }
  uint64_t v24 = a2 + 8 * v22;
  Log = _MDPerf_QueryLog();
  if ((unint64_t)(v16 + 1) >= 2)
  {
    unint64_t v32 = Log;
    if (os_signpost_enabled(Log))
    {
      qos_class_t v33 = qos_class_self();
      int v34 = *((_DWORD *)v16 + 8);
      int v35 = 134218496;
      uint64_t v36 = 0;
      __int16 v37 = 1024;
      qos_class_t v38 = v33;
      __int16 v39 = 1024;
      int v40 = v34;
      _os_signpost_emit_with_name_impl(&dword_1BD672000, v32, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v16, "Job", "QueryId=%{signpost.description:attribute}lld CurrentQoS=%{signpost.description:attribute}x JobType=%{signpost.description:attribute}d", (uint8_t *)&v35, 0x18u);
    }
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1312));
  uint64_t v26 = *(void *)(a1 + 1144);
  if (v26 && si_peek_queue(v26, a7, v24, v23))
  {
    si_enqueue_barrier_routine(a1, (uint64_t)v16, (uint64_t (*)(uint64_t, uint64_t))si_enqueue_getAttrBulk, (uint64_t)v17, 0x11u);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1312));
  }
  else
  {
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1312));
    uint64_t v27 = *(void *)(a1 + 1048);
    if (!v27 || !si_peek_queue(v27, a7, v24, v23))
    {
      si_enqueue_routine(a1, (uint64_t)v16, (uint64_t (*)(uint64_t, uint64_t))si_getAttrBulk, (uint64_t)v17, 9u);
      return v16;
    }
    si_enqueue_barrier_routine(a1, (uint64_t)v16, (uint64_t (*)(uint64_t, uint64_t))si_enqueue_getAttrBulk, (uint64_t)v17, 5u);
  }
  int v28 = *__error();
  uint64_t v29 = _SILogForLogForCategory(0);
  os_log_type_t v30 = 2 * (gSILogLevels[0] < 4);
  if (os_log_type_enabled(v29, v30))
  {
    LOWORD(v35) = 0;
    _os_log_impl(&dword_1BD672000, v29, v30, "Stalled getAttr because task had pending sets", (uint8_t *)&v35, 2u);
  }
  *__error() = v28;
  return v16;
}

void si_enqueue_getAttrBulk(uint64_t *a1, int a2)
{
  if (a2) {
    si_getAttrBulk((uint64_t)a1, a2);
  }
  else {
    si_enqueue_routine(*a1, a1[5], (uint64_t (*)(uint64_t, uint64_t))si_getAttrBulk, (uint64_t)a1, 9u);
  }
}

void SIPreHeatIndex(uint64_t a1, const void *a2)
{
  if (a1) {
    _SIPreHeatIndex(a1, a2, 0);
  }
}

void _SIStartPreheatScheduler(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 2440))
  {
    int v2 = *__error();
    uint64_t v3 = _SILogForLogForCategory(3);
    os_log_type_t v4 = 2 * (dword_1E9FC90B0 < 4);
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = *(void *)(a1 + 896);
      int v6 = 134217984;
      uint64_t v7 = v5;
      _os_log_impl(&dword_1BD672000, v3, v4, "_SIStartPreheatScheduler for %p", (uint8_t *)&v6, 0xCu);
    }
    *__error() = v2;
    awakenPreheat(a1);
  }
}

int *SIInitialIndexingStarted(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  bzero(v11, 0x400uLL);
  *(unsigned char *)(a1 + 2428) = 1;
  int v2 = *__error();
  uint64_t v3 = _SILogForLogForCategory(0);
  os_log_type_t v4 = 2 * (gSILogLevels[0] < 4);
  if (os_log_type_enabled(v3, v4))
  {
    int v5 = fcntl(*(_DWORD *)(a1 + 48), 50, v11);
    if (v11[0]) {
      BOOL v6 = v5 < 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (v6) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v11;
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v10 = v7;
    _os_log_impl(&dword_1BD672000, v3, v4, "Started initial indexing of %s", buf, 0xCu);
  }
  BOOL result = __error();
  int *result = v2;
  return result;
}

uint64_t SIGetMaxTransactionID(uint64_t a1)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  makeThreadId();
  if (a1 && *(void *)(a1 + 1048))
  {
    unsigned int v37 = 0;
    int v2 = fd_setDir(*(unsigned int *)(a1 + 32), (int *)&v37);
    uint64_t v3 = 0;
    if (!v2) {
      return v3;
    }
    int v4 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
    unint64_t v5 = setThreadIdAndInfo(*(_DWORD *)(a1 + 32), sFdExceptionCallbacks, 0, 1, v4);
    unsigned int v35 = HIDWORD(v5);
    unsigned int v36 = v5;
    unsigned int v33 = v7;
    unsigned int v34 = v6;
    uint64_t v8 = *(void *)&threadData[18 * v5 + 2];
    uint64_t v9 = v8 + 320 * HIDWORD(v5);
    *(unsigned char *)(v9 + 216) = 0;
    int v10 = *(_DWORD *)(v9 + 312);
    uint64_t v11 = *(void (**)(void))(v9 + 224);
    if (v11) {
      v11(*(void *)(v8 + 320 * HIDWORD(v5) + 288));
    }
    if (_setjmp((int *)v9))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", buf, 2u);
      }
      *(_DWORD *)(v9 + 312) = v10;
      CIOnThreadCleanUpReset(v33);
      dropThreadId(v36, 1, v4);
      CICleanUpReset(v36, v34);
      uint64_t v12 = 0;
LABEL_26:
      int v29 = v37;
      MEMORY[0x1C1882290](v37);
      if ((v29 & 0x80000000) == 0) {
        close(v29);
      }
      return v12;
    }
    int v17 = *(void **)(a1 + 1384);
    if (!v17 || !*v17 || (CFTypeRef v18 = *(uint64_t **)(a1 + 1376)) == 0 || (v19 = *v18) == 0)
    {
      int v23 = *__error();
      uint64_t v24 = _SILogForLogForCategory(0);
      os_log_type_t v25 = gSILogLevels[0] < 3;
      if (os_log_type_enabled(v24, (os_log_type_t)(gSILogLevels[0] < 3)))
      {
        *(_DWORD *)long long buf = 136315138;
        __int16 v39 = "int32_t SIGetMaxTransactionID(SIRef)";
        _os_log_impl(&dword_1BD672000, v24, v25, "*warn* %s called on fs-only index", buf, 0xCu);
      }
      *__error() = v23;
      uint64_t v12 = 0;
      goto LABEL_23;
    }
    int v20 = *((_DWORD *)v18 + 2);
    if (v20)
    {
      int v21 = *((_DWORD *)v18 + 2);
      if (*(void *)(v19 + 8 * (v20 - 1)))
      {
        int v22 = *((_DWORD *)v18 + 2);
LABEL_34:
        if (v21 != 1 || *(void *)(*(void *)v19 + 80))
        {
          uint64_t v12 = *(unsigned int *)(*(void *)(v19 + 8 * (v22 - 1)) + 40);
LABEL_23:
          uint64_t v26 = *(void *)&threadData[18 * v36 + 2];
          uint64_t v27 = v26 + 320 * v35;
          *(_DWORD *)(v27 + 312) = v10;
          int v28 = *(void (**)(void))(v27 + 232);
          if (v28) {
            v28(*(void *)(v26 + 320 * v35 + 288));
          }
          dropThreadId(v36, 0, v4);
          goto LABEL_26;
        }
      }
      else
      {
        int v30 = *((_DWORD *)v18 + 2);
        while (v30 != 1)
        {
          uint64_t v31 = *(void *)(v19 + 8 * (v30 - 2));
          int v32 = --v30;
          if (v31)
          {
            int v21 = v32;
            *((_DWORD *)v18 + 2) = v32;
            int v22 = v32;
            goto LABEL_34;
          }
        }
        *((_DWORD *)v18 + 2) = 0;
      }
    }
    uint64_t v12 = 1;
    goto LABEL_23;
  }
  int v13 = *__error();
  int v14 = _SILogForLogForCategory(0);
  os_log_type_t v15 = gSILogLevels[0] < 3;
  if (os_log_type_enabled(v14, (os_log_type_t)(gSILogLevels[0] < 3)))
  {
    *(_DWORD *)long long buf = 136315394;
    __int16 v39 = "int32_t SIGetMaxTransactionID(SIRef)";
    __int16 v40 = 2048;
    uint64_t v41 = a1;
    _os_log_impl(&dword_1BD672000, v14, v15, "*warn* %s called on fs-only or null index %p", buf, 0x16u);
  }
  *__error() = v13;
  return 0;
}

uint64_t SISetTransactionCount(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  makeThreadId();
  if (*(void *)(a1 + 1056) && *(void *)(a1 + 1048))
  {
    if (a2 == -1)
    {
      *(_DWORD *)(a1 + 6868) = 1;
    }
    else
    {
      int v6 = *(_DWORD *)(a1 + 6868);
      if (v6 >= a2) {
        int v6 = a2;
      }
      *(_DWORD *)(a1 + 6868) = v6;
      if (a2 == 1)
      {
        if (a3 && *(void *)(a1 + 6872)) {
          *(unsigned char *)(a1 + 6885) = 1;
        }
        if (*(_DWORD *)(*(void *)(a1 + 1384) + 8) == 1 && *(_DWORD *)(*(void *)(a1 + 1376) + 8) == 1)
        {
          unsigned int v7 = malloc_type_malloc(0x10uLL, 0x1020040EDED9539uLL);
          *unsigned int v7 = a1;
          v7[1] = a3;
          uint64_t v8 = *(void *)(a1 + 1056);
          uint64_t v9 = si_set_transactioncount_0;
LABEL_29:
          si_enqueue_work(v8, (uint64_t)v9, (uint64_t)v7);
        }
      }
      else if (a2 >= 2)
      {
        uint64_t v10 = *(void *)(a1 + 1376);
        int v11 = *(_DWORD *)(v10 + 8);
        if (v11 == 1)
        {
          uint64_t v12 = malloc_type_malloc(0x10uLL, 0x1020040EDED9539uLL);
          *uint64_t v12 = a1;
          v12[1] = a3;
          si_enqueue_work(*(void *)(a1 + 1056), (uint64_t)si_set_transactioncount_0, (uint64_t)v12);
          int v11 = *(_DWORD *)(v10 + 8);
        }
        if (v11)
        {
          uint64_t v13 = 0;
          while (1)
          {
            int v14 = *(_DWORD *)(*(void *)(*(void *)v10 + 8 * v13) + 40);
            if (v14 == a2) {
              break;
            }
            if (v14 > a2) {
              return 0xFFFFFFFFLL;
            }
            if (v11 == ++v13) {
              goto LABEL_27;
            }
          }
          if (v11 - 1 > v13) {
            return 0xFFFFFFFFLL;
          }
LABEL_27:
          if (*(void *)(a1 + 1056))
          {
            BOOL v17 = v14 == a2;
            unsigned int v7 = malloc_type_malloc(0x20uLL, 0x102004077D6F10EuLL);
            *((unsigned char *)v7 + 8) = v17;
            void v7[2] = a3;
            *unsigned int v7 = a1;
            *((_DWORD *)v7 + 6) = a2;
            uint64_t v8 = *(void *)(a1 + 1056);
            uint64_t v9 = si_prepareForTransaction;
            goto LABEL_29;
          }
          int v19 = *__error();
          int v20 = _SILogForLogForCategory(0);
          os_log_type_t v21 = 2 * (gSILogLevels[0] < 4);
          if (os_log_type_enabled(v20, v21))
          {
            LOWORD(v22) = 0;
            _os_log_impl(&dword_1BD672000, v20, v21, "Not supported for read only index", (uint8_t *)&v22, 2u);
          }
          *__error() = v19;
        }
        else
        {
          int v15 = *__error();
          uint64_t v16 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            int v22 = 136315394;
            int v23 = "SISetTransactionCount";
            __int16 v24 = 1024;
            int v25 = 20784;
            _os_log_error_impl(&dword_1BD672000, v16, OS_LOG_TYPE_ERROR, "%s:%d: No live index", (uint8_t *)&v22, 0x12u);
          }
          *__error() = v15;
        }
      }
    }
  }
  return 0xFFFFFFFFLL;
}

void si_prepareForTransaction(void *a1, int a2)
{
  if (!a2)
  {
    uint64_t v3 = *(void *)a1;
    uint64_t v4 = *(void *)(*(void *)a1 + 1376);
    unsigned int v5 = count_IndexSetForWriting(v4, *(_DWORD *)(v4 + 8) - 1);
    uint64_t v6 = *(void *)(*(void *)v4 + 8 * (*(_DWORD *)(v4 + 8) - 1));
    if (v5 < 0xF)
    {
      if (!*(unsigned char *)(v6 + 44))
      {
        unsigned int v7 = (void **)ContentIndexListClone((long long *)v4);
        if (!*((unsigned char *)a1 + 8) && prepareForTransaction(v3, (uint64_t)v7, 0, *((_DWORD *)a1 + 6))
          || prepareForTransaction(v3, (uint64_t)v7, *((void *)a1 + 2), *((_DWORD *)a1 + 6) + 1))
        {
          ContentIndexListFree(v7);
        }
        else
        {
          si_swapIndexSet((int *)v3, v4, (unint64_t)v7, (atomic_ullong *)(v3 + 1376), v8, v9, v10, v11);
        }
      }
    }
    else
    {
      ContentIndexSetEmergency((int *)v6, 1);
    }
  }
  free(a1);
}

uint64_t prepareForTransaction(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  memset(__str, 0, 255);
  snprintf((char *)__str, 0xFFuLL, "live.%d.", *(_DWORD *)(a2 + 8));
  int v8 = ((*(_DWORD *)(a1 + 828) & 1) << 6) ^ 0x50;
  if (*(unsigned char *)(a1 + 2064)) {
    v8 |= 0x100u;
  }
  if (*(unsigned char *)(a1 + 2065)) {
    v8 |= 0x400u;
  }
  unsigned int v9 = *(_DWORD *)(a1 + 6576);
  int v10 = v8 | (v9 >> 7) & 0x800;
  if (*(unsigned char *)(a1 + 6936)) {
    v10 |= 0x1000u;
  }
  unsigned int v11 = v10 | ~(v9 >> 1) & 0x8000;
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 0x40000000;
  v32[2] = __prepareForTransaction_block_invoke;
  v32[3] = &__block_descriptor_tmp_1732;
  v32[4] = a1;
  uint64_t v12 = *(unsigned int *)(a1 + 32);
  uint64_t v13 = *(void *)(*(void *)a2 + 8 * (*(_DWORD *)(a2 + 8) - 1));
  LODWORD(v14) = *(_DWORD *)(v13 + 68);
  uint64_t v15 = *(void *)(v13 + 80);
  if (v14 >= 2) {
    uint64_t v14 = v14;
  }
  else {
    uint64_t v14 = 0;
  }
  int v16 = a3 + 1025;
  uint64_t v17 = a3 + 1025 + v15 + v14;
  int v18 = *(_DWORD *)(a1 + 1276);
  int v19 = *(int **)(a1 + 1184);
  if (v19) {
    uint64_t vector_store = db_get_vector_store(v19);
  }
  else {
    uint64_t vector_store = 0;
  }
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 0x40000000;
  _OWORD v31[2] = __prepareForTransaction_block_invoke_2;
  v31[3] = &__block_descriptor_tmp_1733;
  v31[4] = a1;
  uint64_t New = ContentIndexCreateNew(v12, @"tmp.", v17, a4, v11, 1, v18, vector_store, (uint64_t)v31, v32, *(_DWORD *)(a1 + 60));
  int v30 = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = __prepareForTransaction_block_invoke_3;
  aBlock[3] = &__block_descriptor_tmp_1734;
  aBlock[4] = a1;
  void aBlock[5] = New;
  ContentIndexSetDirtyCallback(New, aBlock);
  *(unsigned char *)(New + 15201) = 4;
  uint64_t v43 = 0;
  long long v41 = 0u;
  long long v42 = 0u;
  __long long buf = 0u;
  long long v40 = 0u;
  ContentIndexSyncIndex(New, (uint64_t)&__buf, (uint64_t)&v30);
  bzero((char *)&__buf + 8, 0x208uLL);
  *(void *)&__long long buf = 0x6D6F76650A00;
  DWORD2(__buf) = 2;
  BYTE12(__buf) = 1;
  LODWORD(v40) = *(_DWORD *)(a2 + 8);
  HIDWORD(v40) = 1;
  ContentIndexListAppend(a2, New);
  si_clone_index_metadata_to_inflight(a1);
  __strlcpy_chk();
  int v22 = si_openat_protected(*(unsigned int *)(a1 + 32), "tmp.movePlan", 1538, 3);
  pwrite(v22, &__buf, 0x210uLL, 0);
  fcntl(v22, 85);
  ContentIndexChangePrefix(New);
  unlinkat(*(_DWORD *)(a1 + 32), "tmp.movePlan", 2048);
  close(v22);
  int v23 = *(_DWORD **)(*(void *)a2 + 8 * (*(_DWORD *)(a2 + 8) - 1));
  unsigned int v24 = v23[17];
  if (v24 < 2) {
    unsigned int v24 = 0;
  }
  _ContentIndexSetPayloadMaxCount(v23, v16 + v23[20] + v24, 20661);
  int v25 = *__error();
  uint64_t v26 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 136315650;
    unsigned int v34 = "prepareForTransaction";
    __int16 v35 = 1024;
    int v36 = 20665;
    __int16 v37 = 1024;
    int v38 = a4;
    _os_log_error_impl(&dword_1BD672000, v26, OS_LOG_TYPE_ERROR, "%s:%d: Prepare for transaction %d", buf, 0x18u);
  }
  *__error() = v25;
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 0x40000000;
  v28[2] = __prepareForTransaction_block_invoke_1735;
  v28[3] = &__block_descriptor_tmp_1736;
  v28[4] = a1;
  v28[5] = New;
  ContentIndexSetDirtyCallback(New, v28);
  *(unsigned char *)(New + 15201) = 4;
  return 0;
}

void __prepareForTransaction_block_invoke(uint64_t a1, const void *a2)
{
}

uint64_t __prepareForTransaction_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return _si_next_index_id(*(os_unfair_lock_s **)(a1 + 32), a2, 1, 0);
}

uint64_t __prepareForTransaction_block_invoke_3(uint64_t a1)
{
  return si_set_obj_state(*(os_unfair_lock_s **)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t __prepareForTransaction_block_invoke_1735(uint64_t a1)
{
  return si_set_obj_state(*(os_unfair_lock_s **)(a1 + 32), *(void *)(a1 + 40));
}

void delayed_op_prop2(uint64_t a1, int a2)
{
  if (a2)
  {
    (*(void (**)(void))(a1 + 16))(*(void *)a1);
    free((void *)a1);
  }
  else
  {
    if (*(_DWORD *)(a1 + 24) == 3) {
      uint64_t v3 = delayed_op_final;
    }
    else {
      uint64_t v3 = delayed_op_prop3;
    }
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 1040);
    si_enqueue_work_for_job(v4, (uint64_t)v3, a1, 0);
  }
}

void delayed_op_prop3(uint64_t a1, int a2)
{
  if (a2)
  {
    (*(void (**)(void))(a1 + 16))(*(void *)a1);
    free((void *)a1);
  }
  else
  {
    if (*(_DWORD *)(a1 + 24) == 4) {
      uint64_t v3 = delayed_op_final;
    }
    else {
      uint64_t v3 = delayed_op_prop4;
    }
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 1056);
    si_enqueue_work_for_job(v4, (uint64_t)v3, a1, 0);
  }
}

void delayed_op_prop4(void *a1, int a2)
{
  if (!a2 && (uint64_t v3 = a1[1], (*(unsigned char *)(v3 + 6576) & 0x10) != 0))
  {
    uint64_t v4 = *(void *)(v3 + 1088);
    si_enqueue_work_for_job(v4, (uint64_t)delayed_op_final, (uint64_t)a1, 0);
  }
  else
  {
    ((void (*)(void))a1[2])(*a1);
    free(a1);
  }
}

void _SIScheduleDiskOperation(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 1072);
  if (a2) {
    si_enqueue_work_with_qos(v4, a2, a3, a4);
  }
  else {
    si_enqueue_work(v4, a3, a4);
  }
}

void _SIScheduleOperation(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 1104);
  if (a2) {
    si_enqueue_work_with_qos(v4, a2, a3, a4);
  }
  else {
    si_enqueue_work(v4, a3, a4);
  }
}

void _SIScheduleOperationPostIndexUpdate(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a1)
  {
    if (a5)
    {
      uint64_t v5 = 17;
      if (!*(void *)(a1 + 1144)) {
        uint64_t v5 = 5;
      }
    }
    else
    {
      uint64_t v5 = 5;
    }
    uint64_t v6 = *(void *)(a1 + 8 * v5 + 1008);
    if (v6)
    {
      if (a2) {
        si_enqueue_barrier_with_qos(v6, a2, a3, a4);
      }
      else {
        si_enqueue_barrier(v6, a3, a4);
      }
    }
  }
}

void _SIIssueFullMerge(void *a1)
{
}

void _SIIssueMerge(void *a1, int a2)
{
  if (a1[130])
  {
    uint64_t v4 = (char *)malloc_type_calloc(1uLL, 0x460uLL, 0x1070040C187FD8AuLL);
    *(void *)uint64_t v4 = a1;
    uint8_t v4[16] = a2 != 0;
    *(_WORD *)(v4 + 1041) = 0;
    *((void *)v4 + 131) = "void _SIIssueMerge(SIRef, int)";
    *((_DWORD *)v4 + 274) = 4;
    __strlcpy_chk();
    if (!*((void *)v4 + 136) && !*((_DWORD *)v4 + 266))
    {
      uint64_t v5 = a1[294];
      if (v5)
      {
        uint64_t v6 = *(uint64_t (**)(void, const char *, uint64_t, const char *))(v5 + 64);
        if (v6) {
          *((_DWORD *)v4 + 266) = v6(*(void *)(v5 + 144), "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 21706, "void _SIIssueMerge(SIRef, int)");
        }
      }
    }
    uint64_t v7 = a1[144];
    si_enqueue_barrier_with_qos(v7, 5, (uint64_t)_SIContinueIssueMerge0, (uint64_t)v4);
  }
}

void _SIIssueCompact(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 1040)) {
    compactReadOnlyIndexes(a1, a2 != 0);
  }
}

void si_merge_for_badness(uint64_t a1, char a2)
{
  if (*(void *)(a1 + 1152))
  {
    if ((a2 & 1) != 0
      || *(unsigned char *)(a1 + 2449)
      || (uint64_t v6 = *(void *)(a1 + 2352),
          (uint64_t v7 = *(void (**)(uint64_t, void, __CFString *, void *))(v6 + 80)) == 0))
    {
      uint64_t v4 = malloc_type_malloc(0x20uLL, 0x102004092C98459uLL);
      *uint64_t v4 = a1;
      v4[1] = 0;
      *((unsigned char *)v4 + 16) = a2;
      v4[3] = 0;
      uint64_t v5 = *(void *)(a1 + 1152);
      si_enqueue_barrier_with_qos(v5, 5, (uint64_t)_si_merge_for_badness_on_hold_queue, (uint64_t)v4);
    }
    else
    {
      *(unsigned char *)(a1 + 2449) = 1;
      uint64_t v8 = *(void *)(v6 + 144);
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 0x40000000;
      void v9[2] = __si_merge_for_badness_block_invoke;
      v9[3] = &__block_descriptor_tmp_500;
      v9[4] = a1;
      v7(v8, 0, @"MergeForBadness", v9);
    }
  }
}

void __si_merge_for_badness_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, NSObject *a5)
{
  if (a2 && *(unsigned char *)(a2 + 2449))
  {
    *(unsigned char *)(a2 + 2449) = 0;
    unsigned int v16 = -1;
    uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 32) + 32);
    BOOL v9 = v8 == -1 || (fd_setDir(v8, (int *)&v16) & 1) == 0;
    int v10 = *__error();
    unsigned int v11 = _SILogForLogForCategory(12);
    os_log_type_t v12 = 2 * (dword_1E9FC90D4 < 4);
    if (os_log_type_enabled(v11, v12))
    {
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_1BD672000, v11, v12, "MergeForBadness started", v15, 2u);
    }
    *__error() = v10;
    if (!v9)
    {
      int v13 = v16;
      MEMORY[0x1C1882290](v16);
      if ((v13 & 0x80000000) == 0) {
        close(v13);
      }
    }
    uint64_t v14 = malloc_type_malloc(0x20uLL, 0x102004092C98459uLL);
    *uint64_t v14 = a2;
    v14[1] = a5;
    *((unsigned char *)v14 + 16) = 0;
    dispatch_retain(a5);
    dispatch_group_enter(a5);
    v14[3] = 0;
    si_enqueue_barrier_with_qos(*(void *)(*(void *)(a1 + 32) + 1152), 5, (uint64_t)_si_merge_for_badness_on_hold_queue, (uint64_t)v14);
  }
}

void _si_merge_for_badness_on_hold_queue(unsigned int **a1, int a2)
{
  if (a2) {
    si_merge_for_badness_ctx_free(a1);
  }
  else {
    si_scheduler_async_suspend_and_enqueue(*((void *)*a1 + 109), *((void *)*a1 + 130), (uint64_t)_si_merge_for_badness_on_flush_queue, (uint64_t)a1, a1 + 3);
  }
}

void si_merge_for_badness_ctx_free(void *a1)
{
  if (a1)
  {
    int v2 = (void *)*((void *)a1 + 3);
    if (v2) {
      si_scheduler_resume_with_token(v2);
    }
    uint64_t v3 = *((void *)a1 + 1);
    if (v3)
    {
      dispatch_group_leave(v3);
      dispatch_release(*((dispatch_object_t *)a1 + 1));
    }
    free(a1);
  }
}

void _si_merge_for_badness_on_flush_queue(uint64_t *a1, int a2)
{
  if (a2)
  {
    si_merge_for_badness_ctx_free(a1);
  }
  else
  {
    uint64_t v3 = *a1;
    uint64_t v4 = *(void *)(*a1 + 1384);
    uint64_t v5 = *(void *)(*a1 + 1376);
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 0x40000000;
    uint64_t v14 = ___si_merge_for_badness_on_flush_queue_block_invoke;
    uint64_t v15 = &__block_descriptor_tmp_1768;
    uint64_t v16 = v3;
    if (v5)
    {
      uint64_t v6 = *(unsigned int *)(v5 + 8);
      while ((int)v6 >= 1)
      {
        uint64_t v7 = v6 - 1;
        int v8 = v14((uint64_t)v13, *(void *)(*(void *)v5 + 8 * v6 - 8), 1);
        uint64_t v6 = v7;
        if (!v8) {
          goto LABEL_14;
        }
      }
    }
    if (v4)
    {
      uint64_t v9 = *(unsigned int *)(v4 + 8);
      do
      {
        if ((int)v9 < 1) {
          break;
        }
        uint64_t v10 = v9 - 1;
        int v11 = v14((uint64_t)v13, *(void *)(*(void *)v4 + 8 * v9 - 8), 0);
        uint64_t v9 = v10;
      }
      while (v11);
    }
LABEL_14:
    os_log_type_t v12 = (void *)a1[3];
    if (v12)
    {
      si_scheduler_resume_with_token(v12);
      a1[3] = 0;
    }
    si_enqueue_work(*(void *)(v3 + 1056), (uint64_t)_si_merge_for_badness_on_compact_queue, (uint64_t)a1);
  }
}

uint64_t ___si_merge_for_badness_on_flush_queue_block_invoke(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a2 + 15712) || *(unsigned char *)(a2 + 15206))
  {
    char v6 = atomic_load((unsigned int *)(a2 + 36));
    if ((v6 & 3) == 0 && !*(unsigned char *)(a2 + 15203))
    {
      uint64_t v7 = malloc_type_calloc(1uLL, 0x60uLL, 0x10B0040E0DE4348uLL);
      *uint64_t v7 = v5;
      v7[1] = a2;
      *((_DWORD *)v7 + 5) = *(_DWORD *)(a2 + 56);
      *((unsigned char *)v7 + 80) = a3;
      *((unsigned char *)v7 + 83) = 1;
      _swapIndex(v7, 0);
    }
  }
  return 1;
}

void _si_merge_for_badness_on_compact_queue(void *a1, int a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    uint64_t v3 = (void *)*a1;
    uint64_t v36 = 0;
    __int16 v37 = &v36;
    uint64_t v38 = 0x2000000000;
    uint64_t v39 = 0;
    uint64_t v32 = 0;
    unsigned int v33 = &v32;
    uint64_t v34 = 0x2000000000;
    int v35 = 0;
    uint64_t v28 = 0;
    int v29 = &v28;
    uint64_t v30 = 0x2000000000;
    char v31 = 0;
    uint64_t v24 = 0;
    int v25 = &v24;
    uint64_t v26 = 0x2000000000;
    char v27 = 0;
    uint64_t v4 = v3[173];
    uint64_t v5 = v3[172];
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 0x40000000;
    int v18 = ___si_merge_for_badness_on_compact_queue_block_invoke;
    int v19 = &unk_1E63429E0;
    int v20 = &v36;
    os_log_type_t v21 = &v32;
    int v22 = &v28;
    int v23 = &v24;
    if (v5)
    {
      uint64_t v6 = *(unsigned int *)(v5 + 8);
      while ((int)v6 >= 1)
      {
        uint64_t v7 = v6 - 1;
        int v8 = v18(v17, *(unsigned char **)(*(void *)v5 + 8 * v6 - 8), 1);
        uint64_t v6 = v7;
        if (!v8) {
          goto LABEL_11;
        }
      }
    }
    if (v4)
    {
      uint64_t v9 = *(unsigned int *)(v4 + 8);
      do
      {
        if ((int)v9 < 1) {
          break;
        }
        uint64_t v10 = v9 - 1;
        int v11 = v18(v17, *(unsigned char **)(*(void *)v4 + 8 * v9 - 8), 0);
        uint64_t v9 = v10;
      }
      while (v11);
    }
LABEL_11:
    if (v37[3])
    {
      if (*((unsigned char *)v25 + 24) || !*((unsigned char *)v29 + 24) || (transfer_live_indexes((uint64_t)v3) & 1) != 0)
      {
        os_log_type_t v12 = malloc_type_calloc(1uLL, 0x460uLL, 0x1070040C187FD8AuLL);
        v12[2] = *(_DWORD *)(v37[3] + 56);
        v12[3] = *((_DWORD *)v33 + 6);
        *((unsigned char *)v12 + 1042) = 0;
        *(void *)os_log_type_t v12 = v3;
        *((unsigned char *)v12 + 16) = *((unsigned char *)v25 + 24);
        *((unsigned char *)v12 + 1041) = 0;
        *((void *)v12 + 131) = "void _si_merge_for_badness_on_compact_queue(void *, Boolean)";
        v12[274] = 8;
        *((void *)v12 + 139) = a1[1];
        a1[1] = 0;
        __strlcpy_chk();
        if (!*((void *)v12 + 136) && !v12[266])
        {
          uint64_t v15 = v3[294];
          if (v15)
          {
            uint64_t v16 = *(uint64_t (**)(void, const char *, uint64_t, const char *))(v15 + 64);
            if (v16) {
              v12[266] = v16(*(void *)(v15 + 144), "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 21792, "void _si_merge_for_badness_on_compact_queue(void *, Boolean)");
            }
          }
        }
        si_mergeIndex((uint64_t *)v12, 0);
        si_merge_for_badness(v3, *((unsigned __int8 *)a1 + 16));
      }
      else
      {
        int v13 = *__error();
        uint64_t v14 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315394;
          long long v41 = "_si_merge_for_badness_on_compact_queue";
          __int16 v42 = 1024;
          int v43 = 21774;
          _os_log_error_impl(&dword_1BD672000, v14, OS_LOG_TYPE_ERROR, "%s:%d: transfer_live_indexes failed", buf, 0x12u);
        }
        *__error() = v13;
      }
    }
    _Block_object_dispose(&v24, 8);
    _Block_object_dispose(&v28, 8);
    _Block_object_dispose(&v32, 8);
    _Block_object_dispose(&v36, 8);
  }
  si_merge_for_badness_ctx_free(a1);
}

uint64_t ___si_merge_for_badness_on_compact_queue_block_invoke(void *a1, unsigned char *a2, int a3)
{
  if ((a2[15712] || a2[15206]) && !a2[15207])
  {
    uint64_t v3 = 1;
    a2[15207] = 1;
    *(void *)(*(void *)(a1[4] + 8) + 24) = a2;
    ++*(_DWORD *)(*(void *)(a1[5] + 8) + 24);
    if (a3) {
      *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
    }
  }
  else if (*(_DWORD *)(*(void *)(a1[5] + 8) + 24))
  {
    uint64_t v3 = 0;
    *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = a3;
    *(void *)(*(void *)(a1[4] + 8) + 24) = a2;
    ++*(_DWORD *)(*(void *)(a1[5] + 8) + 24);
  }
  else
  {
    return 1;
  }
  return v3;
}

void _SIIssueVerify(uint64_t a1, int a2)
{
  uint64_t v4 = malloc_type_malloc(0x10uLL, 0x10200403A5D3213uLL);
  *(void *)uint64_t v4 = a1;
  v4[2] = a2;
  uint64_t v5 = 1048;
  if (*(unsigned char *)(a1 + 1280))
  {
    uint64_t v5 = 1080;
    uint64_t v6 = si_verify;
  }
  else
  {
    uint64_t v6 = si_verify0;
  }
  uint64_t v7 = *(void *)(a1 + v5);
  si_enqueue_work(v7, (uint64_t)v6, (uint64_t)v4);
}

void si_verify(uint64_t *a1, int a2)
{
  int v2 = a1;
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    uint64_t v3 = *a1;
    bzero(v65, 0x400uLL);
    uint64_t v4 = *(void *)(v3 + 2352);
    uint64_t v5 = *(uint64_t (**)(void, const char *))(v4 + 96);
    if (v5) {
      uint64_t v6 = v5(*(void *)(v4 + 144), "com.apple.spotlightindex.verify");
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = si_scheduler_suspend(*(void *)(v3 + 864));
    unsigned int v48 = 0;
    int v8 = 0;
    if (fd_setDir(*(unsigned int *)(v3 + 32), (int *)&v48))
    {
      uint64_t v46 = v6;
      int v9 = *__error();
      uint64_t v10 = _SILogForLogForCategory(0);
      os_log_type_t v11 = 2 * (gSILogLevels[0] < 4);
      if (os_log_type_enabled(v10, v11))
      {
        int v12 = fcntl(*(_DWORD *)(v3 + 32), 50, v65);
        if (v65[0]) {
          BOOL v13 = v12 < 0;
        }
        else {
          BOOL v13 = 1;
        }
        if (v13) {
          uint64_t v14 = 0;
        }
        else {
          uint64_t v14 = v65;
        }
        *(_DWORD *)long long buf = 136315138;
        int v50 = v14;
        _os_log_impl(&dword_1BD672000, v10, v11, "verifying %s", buf, 0xCu);
      }
      *__error() = v9;
      uint64_t v15 = *(void *)(v3 + 1384);
      uint64_t v16 = *(void *)(v3 + 1376);
      if (v15) {
        uint64_t v17 = *(unsigned int *)(v15 + 8);
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v45 = v2;
      int v47 = *(uint64_t ***)(v3 + 1376);
      if (v16) {
        uint64_t v18 = *(unsigned int *)(v16 + 8);
      }
      else {
        uint64_t v18 = 0;
      }
      *(void *)(v3 + 1248) = 0;
      int v19 = (unint64_t *)(v3 + 1256);
      *(void *)(v3 + 1256) = -1;
      *(void *)(v3 + 1264) = -1;
      *(_DWORD *)(v3 + 1272) = 0;
      if (v17)
      {
        uint64_t v20 = 0;
        while (1)
        {
          uint64_t v21 = *(void *)(*(void *)v15 + v20);
          int v22 = ContentIndexVerifyIndex(v21);
          if (atomic_load((unsigned int *)(v21 + 15192))) {
            break;
          }
          if (v22)
          {
LABEL_39:
            _CIMakeInvalid(v21);
            if (v17)
            {
              int v29 = *(uint64_t **)v15;
              do
              {
                uint64_t v30 = *v29++;
                *(unsigned char *)(v30 + 8) = 0;
                --v17;
              }
              while (v17);
            }
            uint64_t v6 = v46;
            if (v18)
            {
              char v31 = *v47;
              do
              {
                uint64_t v32 = *v31++;
                *(unsigned char *)(v32 + 8) = 0;
                --v18;
              }
              while (v18);
            }
            *(_DWORD *)(v3 + 1272) = -2;
            int v33 = *__error();
            uint64_t v34 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
            {
              int v38 = fcntl(*(_DWORD *)(v3 + 32), 50, v65);
              if (v65[0]) {
                BOOL v39 = v38 < 0;
              }
              else {
                BOOL v39 = 1;
              }
              uint64_t v40 = *(void *)(v3 + 1256);
              if (v39) {
                long long v41 = 0;
              }
              else {
                long long v41 = v65;
              }
              uint64_t v42 = *(void *)(v3 + 1264);
              int v43 = *(_DWORD *)(v3 + 1248);
              int v44 = *(_DWORD *)(v3 + 1252);
              *(_DWORD *)long long buf = 136316930;
              int v50 = "si_verify";
              __int16 v51 = 1024;
              int v52 = 21920;
              __int16 v53 = 2080;
              uint64_t v54 = v41;
              __int16 v55 = 1024;
              int v56 = -2;
              __int16 v57 = 1024;
              int v58 = v40;
              __int16 v59 = 1024;
              int v60 = v42;
              __int16 v61 = 1024;
              int v62 = v43;
              __int16 v63 = 1024;
              int v64 = v44;
              _os_log_error_impl(&dword_1BD672000, v34, OS_LOG_TYPE_ERROR, "%s:%d: verify index: %s, err: %d, (%d %d) , (%d, %d)", buf, 0x3Au);
            }
            *__error() = v33;
            int v8 = -2;
            if (!*(unsigned char *)(v3 + 1280)) {
              si_makeUnavailable(v3, 4294967294, 2, 15, "verify err");
            }
            int v2 = v45;
            goto LABEL_49;
          }
          unint64_t v24 = *(void *)(v21 + 15560);
          if (v24 >= *(void *)(v21 + 15568)) {
            unint64_t v24 = *(void *)(v21 + 15568);
          }
          if (v24 > *v19) {
            *int v19 = v24;
          }
          ++*(_DWORD *)(v3 + 1248);
          v20 += 8;
          if (8 * v17 == v20) {
            goto LABEL_29;
          }
        }
      }
      else
      {
LABEL_29:
        if (v18)
        {
          for (uint64_t i = 0; i != v18; ++i)
          {
            uint64_t v21 = (*v47)[i];
            int v26 = ContentIndexVerifyIndex(v21);
            if (atomic_load((unsigned int *)(v21 + 15192))) {
              break;
            }
            if (v26) {
              goto LABEL_39;
            }
            unint64_t v28 = *(void *)(v21 + 15560);
            if (v28 >= *(void *)(v21 + 15568)) {
              unint64_t v28 = *(void *)(v21 + 15568);
            }
            if (v28 > *v19) {
              *(void *)(v3 + 1264) = v28;
            }
            ++*(_DWORD *)(v3 + 1252);
          }
        }
      }
      int v8 = 0;
      int v2 = v45;
      uint64_t v6 = v46;
LABEL_49:
      int v35 = v48;
      MEMORY[0x1C1882290](v48);
      if ((v35 & 0x80000000) == 0) {
        close(v35);
      }
    }
    si_scheduler_resume(*(void *)(v3 + 864), v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 21935);
    uint64_t v36 = *(void *)(v3 + 2352);
    __int16 v37 = *(void (**)(void, uint64_t, BOOL))(v36 + 104);
    if (v37) {
      v37(*(void *)(v36 + 144), v6, v8 != 0);
    }
  }
  free(v2);
}

void si_verify0(void *a1, int a2)
{
  if (a2) {
    free(a1);
  }
  else {
    si_enqueue_work(*(void *)(*(void *)a1 + 1056), (uint64_t)si_verify, (uint64_t)a1);
  }
}

void _SICleanupStrings(uint64_t a1, void *a2, NSObject *a3, unsigned char *a4, int a5)
{
  if (!**(_DWORD **)(a1 + 6584) && (!a4 || !*a4))
  {
    si_sync_ctx_create_with_defer_fd(a1, 0);
    uint64_t v11 = v10;
    *(void *)(v10 + 40) = si_syncFinishedForCleanup;
    int v12 = malloc_type_calloc(1uLL, 0x30uLL, 0x1030040DF2DC81EuLL);
    *(void *)int v12 = a1;
    *((void *)v12 + 3) = a4;
    *((_DWORD *)v12 + 8) = a5;
    if (a2) {
      xpc_object_t v13 = xpc_retain(a2);
    }
    else {
      xpc_object_t v13 = 0;
    }
    *((void *)v12 + 1) = v13;
    if (a3)
    {
      *((void *)v12 + 2) = a3;
      dispatch_retain(a3);
      dispatch_group_enter(*((dispatch_group_t *)v12 + 2));
    }
    *(void *)(v11 + 48) = v12;
    uint64_t v14 = *(void *)(a1 + 1096);
    si_enqueue_work_with_qos(v14, 9, (uint64_t)si_sync_index_delayed0, v11);
  }
}

void si_syncFinishedForCleanup(void *a1, int a2)
{
  int v2 = a1;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    uint64_t v3 = *a1;
    if (*a1)
    {
      uint64_t v4 = *(_DWORD **)(v3 + 1184);
      if (v4)
      {
        if (*v4 != 1685287992)
        {
          uint64_t v6 = *(int **)(v3 + 1184);
          int v7 = *__error();
          int v8 = _SILogForLogForCategory(4);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            int v9 = *v6;
            *(_DWORD *)long long buf = 136315650;
            uint64_t v14 = "db_garbage_collect_strings";
            __int16 v15 = 1024;
            int v16 = 440;
            __int16 v17 = 1024;
            int v18 = v9;
            _os_log_error_impl(&dword_1BD672000, v8, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
          }
          *__error() = v7;
          uint64_t v10 = __si_assert_copy_extra_329();
          uint64_t v11 = v10;
          if (v10) {
            int v12 = v10;
          }
          else {
            int v12 = "";
          }
          __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 440, v12);
          free(v11);
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        uint64_t v5 = db2_garbage_collect_strings((uint64_t)v4, v2[8] & 1, *(_DWORD **)(v3 + 6584));
        *((void *)v2 + 5) = v5;
        if (v5)
        {
          si_enqueue_work_with_qos(*(void *)(v3 + 1056), 9, (uint64_t)si_CleanupCommit, (uint64_t)v2);
          int v2 = 0;
        }
      }
    }
  }
  si_cleanup_strings_ctx_free(v2);
}

void si_cleanup_strings_ctx_free(void *a1)
{
  if (a1)
  {
    int v2 = *((void *)a1 + 2);
    if (v2)
    {
      dispatch_group_leave(v2);
      dispatch_release(*((dispatch_object_t *)a1 + 2));
    }
    uint64_t v3 = (void *)*((void *)a1 + 1);
    if (v3) {
      xpc_release(v3);
    }
    free(a1);
  }
}

void si_CleanupCommit(int **a1, int a2)
{
  if (!a2)
  {
    uint64_t v3 = *a1;
    if (*a1)
    {
      if (*((void *)v3 + 148))
      {
        if (**((_DWORD **)v3 + 823))
        {
          uint64_t v4 = 0;
          uint64_t v5 = *((void *)v3 + 148);
        }
        else
        {
          uint64_t v4 = (char *)malloc_type_calloc(0x12uLL, 8uLL, 0x2004093837F09uLL);
          for (uint64_t i = 0; i != 36; i += 2)
          {
            if (i != 20) {
              *(void *)&v4[i * 4] = si_scheduler_suspend(*(void *)&v3[i + 216]);
            }
          }
          uint64_t v5 = *((void *)v3 + 148);
        }
        int v7 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
        unint64_t v8 = setThreadIdAndInfo(-1, (long long *)sSDBExceptionCallbacks, v5, 0x40000000, v7);
        unsigned int v26 = HIDWORD(v8);
        unsigned int v27 = v8;
        unint64_t v25 = __PAIR64__(v9, v10);
        uint64_t v11 = *(void *)&threadData[18 * v8 + 2];
        uint64_t v12 = v11 + 320 * HIDWORD(v8);
        *(unsigned char *)(v12 + 216) = 0;
        int v13 = *(_DWORD *)(v12 + 312);
        uint64_t v14 = *(void (**)(void))(v12 + 224);
        if (v14) {
          v14(*(void *)(v11 + 320 * HIDWORD(v8) + 288));
        }
        unsigned int v24 = v27;
        unsigned int v23 = v26;
        unint64_t v22 = v25;
        if (_setjmp((int *)v12))
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)uint64_t v21 = 0;
            _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v21, 2u);
          }
          *(_DWORD *)(v12 + 312) = v13;
          CIOnThreadCleanUpReset(v22);
          dropThreadId(v24, 1, v7);
          CICleanUpReset(v24, HIDWORD(v22));
        }
        else
        {
          db_garbage_collect_strings_commit(*((void *)v3 + 148), a1[5], 0);
          uint64_t v15 = *(void *)&threadData[18 * v24 + 2];
          unsigned int v16 = v23;
          uint64_t v17 = v15 + 320 * v23;
          *(_DWORD *)(v17 + 312) = v13;
          int v18 = *(void (**)(void))(v17 + 232);
          if (v18) {
            v18(*(void *)(v15 + 320 * v16 + 288));
          }
          dropThreadId(v24, 0, v7);
        }
        uint64_t v19 = v3 + 250;
        for (uint64_t j = 0; j != -36; j -= 2)
        {
          if (j != -14) {
            si_scheduler_resume(*(void *)&v19[j], *(void **)&v4[j * 4 + 136], (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 22031);
          }
        }
        if (v4) {
          free(v4);
        }
      }
    }
  }
  si_cleanup_strings_ctx_free(a1);
}

void _SIIssueDefrag(uint64_t a1)
{
  if (!**(_DWORD **)(a1 + 6584))
  {
    si_sync_ctx_create_with_defer_fd(a1, 0);
    uint64_t v3 = v2;
    *(unsigned char *)(v2 + 138) = 1;
    *(unsigned char *)(v2 + 96) = 1;
    uint64_t v4 = *(void *)(a1 + 1096);
    si_enqueue_work_with_qos(v4, 9, (uint64_t)si_sync_index_delayed0, v3);
  }
}

void _SIIssueFlush(uint64_t a1, int a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 0x60uLL, 0x10B0040E0DE4348uLL);
  *uint64_t v4 = a1;
  if (a2) {
    LiveIndex = si_getLiveIndex(*(void *)(a1 + 1376));
  }
  else {
    LiveIndex = si_getSyncIndex(a1, 0);
  }
  v4[1] = LiveIndex;
  int v6 = LiveIndex[14];
  *((_DWORD *)v4 + 4) = 2;
  *((_DWORD *)v4 + 5) = v6;
  uint64_t v7 = *(void *)(a1 + 1040);
  si_enqueue_work(v7, (uint64_t)_flushCache, (uint64_t)v4);
}

uint64_t SICrashStringInit(uint64_t result, int a2)
{
  gSICrashBuffer = result;
  gSICrashBufferSize = a2;
  return result;
}

uint64_t SISetPowerState(uint64_t result)
{
  gSISystemOnBattery = result & 1;
  gSISystemInDarkWake = (result & 2) != 0;
  return result;
}

uint64_t _SISetTurboMode(uint64_t result)
{
  gTurboMode = result;
  return result;
}

__CFDictionary *_SICopyPropertyIDMap(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(int **)(a1 + 1184);
  if (!v2) {
    return 0;
  }
  int field_id_limit = db_get_field_id_limit(v2);
  if (field_id_limit < 1) {
    return 0;
  }
  int v4 = field_id_limit;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], field_id_limit, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v4 != 1)
  {
    for (int i = 1; i != v4; ++i)
    {
      uint64_t field_name_for_id = db_get_field_name_for_id(*(int **)(a1 + 1184), i);
      if (field_name_for_id)
      {
        unsigned int v9 = (const char *)field_name_for_id;
        uint64_t valuePtr = i | (*(unsigned __int8 *)(field_name_for_id - 2) << 28);
        CFNumberRef v10 = CFNumberCreate(v5, kCFNumberSInt64Type, &valuePtr);
        CFStringRef v11 = CFStringCreateWithCString(v5, v9, 0x8000100u);
        CFDictionaryAddValue(Mutable, v10, v11);
        CFRelease(v11);
        CFRelease(v10);
      }
    }
  }
  return Mutable;
}

uint64_t _SITermIndexIterate(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v3 = v2;
  v12[2604] = *MEMORY[0x1E4F143B8];
  uint64_t result = GetContentIndex(v1, v4);
  if (result)
  {
    unint64_t v6 = result + 96;
    int v7 = *(_DWORD *)(result + 4680);
    v8[0] = 0;
    uint64_t v9 = result + 4984;
    v8[1] = v7;
    uint64_t v10 = result + 9704;
    uint64_t v11 = v3;
    bzero(v12, 0x5160uLL);
    return _dumpTrie(v6, 0, v8, v12, (uint64_t)iterateTermsCallback, (uint64_t)v8);
  }
  return result;
}

uint64_t GetContentIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && (a2 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = *(void *)(a1 + 1384);
    if (v3)
    {
      unint64_t v4 = *(unsigned int *)(v3 + 8);
      if (v4)
      {
        BOOL v5 = a2 >= v4;
        unint64_t v6 = a2 - v4;
        if (v5)
        {
          a2 = v6;
        }
        else
        {
          uint64_t v2 = *(void *)(*(void *)v3 + 8 * a2);
          if (v2) {
            return v2;
          }
        }
      }
    }
    uint64_t v2 = *(void *)(a1 + 1376);
    if (v2)
    {
      uint64_t v7 = *(unsigned int *)(v2 + 8);
      if (v7) {
        BOOL v8 = (uint64_t)a2 < v7;
      }
      else {
        BOOL v8 = 0;
      }
      if (v8) {
        return *(void *)(*(void *)v2 + 8 * a2);
      }
      else {
        return 0;
      }
    }
  }
  return v2;
}

uint64_t _SIReverseStoreIterate(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 6616))
  {
    uint64_t v3 = result;
    int v4 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
    unint64_t v5 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v4);
    unsigned int v21 = HIDWORD(v5);
    unsigned int v22 = v5;
    unint64_t v20 = __PAIR64__(v6, v7);
    uint64_t v8 = *(void *)&threadData[18 * v5 + 2];
    uint64_t v9 = v8 + 320 * HIDWORD(v5);
    int v10 = *(_DWORD *)(v9 + 312);
    uint64_t v11 = *(void (**)(void))(v9 + 224);
    if (v11) {
      v11(*(void *)(v8 + 320 * HIDWORD(v5) + 288));
    }
    unsigned int v19 = v22;
    unsigned int v18 = v21;
    unint64_t v17 = v20;
    if (_setjmp((int *)v9))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)unsigned int v16 = 0;
        _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v16, 2u);
      }
      *(_DWORD *)(v9 + 312) = v10;
      CIOnThreadCleanUpReset(v17);
      dropThreadId(v19, 1, v4);
      return CICleanUpReset(v19, HIDWORD(v17));
    }
    else
    {
      _reverseStoreIterate(*(void *)(v3 + 6616), a2);
      uint64_t v12 = *(void *)&threadData[18 * v19 + 2];
      unsigned int v13 = v18;
      uint64_t v14 = v12 + 320 * v18;
      *(_DWORD *)(v14 + 312) = v10;
      uint64_t v15 = *(void (**)(void))(v14 + 232);
      if (v15) {
        v15(*(void *)(v12 + 320 * v13 + 288));
      }
      return dropThreadId(v19, 0, v4);
    }
  }
  return result;
}

uint64_t _SIDirectoryStoreIterate(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result = GetContentIndex(a1, a2);
  if (result)
  {
    uint64_t v5 = *(void *)(result + 4928);
    if (v5)
    {
      int v6 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
      unint64_t v7 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v6);
      unsigned int v28 = HIDWORD(v7);
      unsigned int v29 = v7;
      unint64_t v27 = __PAIR64__(v8, v9);
      uint64_t v10 = *(void *)&threadData[18 * v7 + 2];
      uint64_t v11 = v10 + 320 * HIDWORD(v7);
      int v12 = *(_DWORD *)(v11 + 312);
      unsigned int v13 = *(void (**)(void))(v11 + 224);
      if (v13) {
        v13(*(void *)(v10 + 320 * HIDWORD(v7) + 288));
      }
      unsigned int v26 = v29;
      unsigned int v25 = v28;
      unint64_t v24 = v27;
      if (_setjmp((int *)v11))
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)unsigned int v18 = 0;
          _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v18, 2u);
        }
        *(_DWORD *)(v11 + 312) = v12;
        CIOnThreadCleanUpReset(v24);
        dropThreadId(v26, 1, v6);
        return CICleanUpReset(v26, HIDWORD(v24));
      }
      else
      {
        uint64_t v19 = MEMORY[0x1E4F143A8];
        uint64_t v20 = 0x40000000;
        unsigned int v21 = ___SIDirectoryStoreIterate_block_invoke;
        unsigned int v22 = &unk_1E6341778;
        uint64_t v23 = a3;
        dumpDirectoryStore(v5);
        uint64_t v14 = *(void *)&threadData[18 * v26 + 2];
        unsigned int v15 = v25;
        uint64_t v16 = v14 + 320 * v25;
        *(_DWORD *)(v16 + 312) = v12;
        unint64_t v17 = *(void (**)(void))(v16 + 232);
        if (v17) {
          v17(*(void *)(v14 + 320 * v15 + 288));
        }
        return dropThreadId(v26, 0, v6);
      }
    }
  }
  return result;
}

uint64_t _SIGetIndexCount(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 1384);
    if (v2) {
      uint64_t result = *(unsigned int *)(v2 + 8);
    }
    else {
      uint64_t result = 0;
    }
    uint64_t v3 = *(void *)(v1 + 1376);
    if (v3) {
      result += *(unsigned int *)(v3 + 8);
    }
  }
  return result;
}

unint64_t _SIGetMissingParentOID(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (*(unsigned char *)(result + 2064))
    {
      unint64_t v2 = atomic_load((unint64_t *)(result + 2072));
      uint64_t result = v2;
      if (!v2)
      {
        unint64_t v3 = si_compute_oid_for_identifier(@"com.apple.searchd", @"com.apple.spotlight.missingparent");
        makeThreadId();
        int v4 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
        unint64_t v5 = setThreadIdAndInfo(*(_DWORD *)(v1 + 32), sFdExceptionCallbacks, 0, 1, v4);
        unsigned int v41 = HIDWORD(v5);
        unsigned int v42 = v5;
        unint64_t v40 = __PAIR64__(v6, v7);
        uint64_t v8 = *(void *)&threadData[18 * v5 + 2];
        uint64_t v9 = v8 + 320 * HIDWORD(v5);
        *(unsigned char *)(v9 + 216) = 0;
        int v10 = *(_DWORD *)(v9 + 312);
        uint64_t v11 = *(void (**)(void))(v9 + 224);
        if (v11) {
          v11(*(void *)(v8 + 320 * HIDWORD(v5) + 288));
        }
        unsigned int v39 = v42;
        unsigned int v38 = v41;
        unint64_t v37 = v40;
        if (_setjmp((int *)v9))
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            LOWORD(v30) = 0;
            _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", (uint8_t *)&v30, 2u);
          }
          *(_DWORD *)(v9 + 312) = v10;
          CIOnThreadCleanUpReset(v37);
          dropThreadId(v39, 1, v4);
          CICleanUpReset(v39, HIDWORD(v37));
          return 0;
        }
        else
        {
          int v13 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
          unint64_t v14 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v13);
          unsigned int v35 = HIDWORD(v14);
          unsigned int v36 = v14;
          unint64_t v34 = __PAIR64__(v15, v16);
          uint64_t v17 = *(void *)&threadData[18 * v14 + 2];
          uint64_t v18 = v17 + 320 * HIDWORD(v14);
          int v19 = *(_DWORD *)(v18 + 312);
          uint64_t v20 = *(void (**)(void))(v18 + 224);
          if (v20) {
            v20(*(void *)(v17 + 320 * HIDWORD(v14) + 288));
          }
          unsigned int v33 = v36;
          unsigned int v32 = v35;
          unint64_t v31 = v34;
          if (_setjmp((int *)v18))
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              LOWORD(v30) = 0;
              _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", (uint8_t *)&v30, 2u);
            }
            *(_DWORD *)(v18 + 312) = v19;
            CIOnThreadCleanUpReset(v31);
            dropThreadId(v33, 1, v13);
            CICleanUpReset(v33, HIDWORD(v31));
            unint64_t v12 = 0;
          }
          else
          {
            unint64_t cs_orphan_oid = 0;
            uint64_t v30 = 0;
            if (!db_get_obj_callback(*(int **)(v1 + 1184), v3, &v30, 1, (void (*)(void *, uint64_t))si_docIdRewriteCallback, *(void *)(v1 + 2360), 0))
            {
              free(v30);
              unint64_t cs_orphan_oid = si_get_cs_orphan_oid(v1);
            }
            uint64_t v22 = *(void *)&threadData[18 * v33 + 2];
            unsigned int v23 = v32;
            uint64_t v24 = v22 + 320 * v32;
            *(_DWORD *)(v24 + 312) = v19;
            unsigned int v25 = *(void (**)(void))(v24 + 232);
            if (v25) {
              v25(*(void *)(v22 + 320 * v23 + 288));
            }
            dropThreadId(v33, 0, v13);
            unint64_t v12 = cs_orphan_oid;
          }
          uint64_t v26 = *(void *)&threadData[18 * v39 + 2];
          unsigned int v27 = v38;
          uint64_t v28 = v26 + 320 * v38;
          *(_DWORD *)(v28 + 312) = v10;
          unsigned int v29 = *(void (**)(void))(v28 + 232);
          if (v29) {
            v29(*(void *)(v26 + 320 * v27 + 288));
          }
          dropThreadId(v39, 0, v4);
        }
        return v12;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t si_compute_oid_for_identifier(const __CFString *a1, const __CFString *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  bzero(v14, 0x400uLL);
  char v12 = 0;
  uint64_t v11 = 0;
  if (a2) {
    int v4 = fasterUTF8String(a2, &v11, v14, 1024, &v12);
  }
  else {
    int v4 = "";
  }
  memset(v13, 0, sizeof(v13));
  char v10 = 0;
  uint64_t v9 = 0;
  if (a1)
  {
    unint64_t v5 = fasterUTF8String(a1, &v9, (char *)v13, 128, &v10);
    int v6 = v9;
  }
  else
  {
    int v6 = 0;
    unint64_t v5 = "";
  }
  uint64_t v7 = si_compute_oid_for_identifier_bundle_id(v4, v11, (uint64_t)v5, v6);
  if (v12) {
    free(v4);
  }
  if (v10) {
    free(v5);
  }
  return v7;
}

__CFString *_SISchedulerCopyDump(void *a1)
{
  if (!a1) {
    return 0;
  }
  CFArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppend(Mutable, @"Scheduler state:\n");
  CFStringAppend(Mutable, @"<<<<<<<<\n");
  for (uint64_t i = 0; i != 18; ++i)
  {
    uint64_t v4 = a1[i + 108];
    if (v4)
    {
      unint64_t v5 = *(NSObject **)(v4 + 32);
      blocCFIndex k = MEMORY[0x1E4F143A8];
      uint64_t v14 = 0x40000000;
      uint64_t v15 = __si_scheduler_dump_block_invoke;
      unsigned int v16 = &__block_descriptor_tmp_39_1162;
      uint64_t v17 = (uint64_t *)v4;
      uint64_t v18 = Mutable;
      dispatch_sync(v5, &block);
    }
  }
  for (uint64_t j = 0; j != 20; ++j)
    si_workqueue_dump((uint64_t *)a1[j + 126], Mutable);
  CFStringAppend(Mutable, @">>>>>>>>\n");
  uint64_t v7 = a1[173];
  uint64_t v8 = a1[172];
  uint64_t v9 = a1[148];
  CFStringAppend(Mutable, @"===== VectorIndex begin =====\n");
  uint64_t v25 = 0;
  uint64_t v26 = &v25;
  uint64_t v27 = 0x2000000000;
  int v28 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = &v21;
  uint64_t v23 = 0x2000000000;
  int v24 = 0;
  blocCFIndex k = MEMORY[0x1E4F143A8];
  uint64_t v14 = 0x40000000;
  uint64_t v15 = __ContentIndexListDumpVectorIndex_block_invoke;
  unsigned int v16 = &unk_1E6346E28;
  int v19 = Mutable;
  uint64_t v20 = v9;
  uint64_t v17 = &v25;
  uint64_t v18 = (__CFString *)&v21;
  if (v7 && *(_DWORD *)(v7 + 8))
  {
    uint64_t v10 = 0;
    while (((unsigned int (*)(uint64_t *, void, void))v15)(&block, *(void *)(*(void *)v7 + 8 * v10), 0))
    {
      if (++v10 >= (unint64_t)*(unsigned int *)(v7 + 8)) {
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    if (v8 && *(_DWORD *)(v8 + 8))
    {
      unint64_t v11 = 0;
      do
      {
        if (!((unsigned int (*)(uint64_t *, void, uint64_t))v15)(&block, *(void *)(*(void *)v8 + 8 * v11), 1))break; {
        ++v11;
        }
      }
      while (v11 < *(unsigned int *)(v8 + 8));
    }
  }
  CFStringAppendFormat(Mutable, 0, @"===== VectorIndex Total %u vectors in %u generations =====\n", *((unsigned int *)v26 + 6), *((unsigned int *)v22 + 6), block, v14);
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v25, 8);
  return Mutable;
}

void _SIIssueSchedulerDump(void *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    unint64_t v1 = _SISchedulerCopyDump(a1);
    int v2 = *__error();
    unint64_t v3 = _SILogForLogForCategory(3);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315650;
      unint64_t v5 = "_SIIssueSchedulerDump";
      __int16 v6 = 1024;
      int v7 = 22599;
      __int16 v8 = 2112;
      uint64_t v9 = v1;
      _os_log_error_impl(&dword_1BD672000, v3, OS_LOG_TYPE_ERROR, "%s:%d: %@", (uint8_t *)&v4, 0x1Cu);
    }
    *__error() = v2;
    CFRelease(v1);
  }
}

uint64_t _SIIssueLiveQueryDump(uint64_t a1)
{
  if (a1) {
    return si_dump_livequeries(a1);
  }
  return a1;
}

uint64_t _SIMinimizeDiskSpace(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  pthread_mutex_lock(&mergeMutex);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 2426);
  int v3 = *(_DWORD *)(a1 + 2420);
  *(_DWORD *)(a1 + 2420) = v3 + 1;
  if (v2)
  {
    do
      pthread_cond_wait(&mergeCond, &mergeMutex);
    while (*(unsigned char *)(a1 + 2426));
    --*(_DWORD *)(a1 + 2420);
    pthread_mutex_unlock(&mergeMutex);
    return v2;
  }
  *(_DWORD *)(a1 + 2420) = v3;
  pthread_mutex_unlock(&mergeMutex);
  if (!*(void *)(a1 + 1376)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 944);
  if (!v4) {
    return 0;
  }
  unint64_t v5 = si_scheduler_suspend(v4);
  uint64_t v6 = *(void *)(a1 + 1376);
  uint64_t v7 = *(unsigned int *)(v6 + 8);
  if ((int)v7 < 1) {
    goto LABEL_20;
  }
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  int v10 = -1;
  do
  {
    uint64_t v11 = v7 - 1;
    char v12 = *(_DWORD **)(*(void *)v6 + 8 * (v7 - 1));
    LODWORD(v13) = v12[17];
    if (v13 >= 2) {
      uint64_t v13 = v13;
    }
    else {
      uint64_t v13 = 0;
    }
    v8 += v13;
    if ((int)v12[13] <= 1)
    {
      int v14 = v7 - 1;
      uint64_t v15 = atomic_load(v12 + 4);
      v9 += v15;
      if (v8 < 2 * v9) {
        int v10 = v14;
      }
    }
    uint64_t v7 = v11;
  }
  while ((unint64_t)(v11 + 1) > 1);
  if (v10 < 1)
  {
LABEL_20:
    si_scheduler_resume(*(void *)(a1 + 944), v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 22647);
  }
  else
  {
    uint64_t v16 = *(void *)(*(void *)v6 + 8 * v10);
    si_scheduler_resume(*(void *)(a1 + 944), v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 22642);
    si_recycleForBadIndex(a1, v16, "low disk space");
    return 0xFFFFFFFFLL;
  }
  return v2;
}

void _SISetMeEmailAddresses(CFSetRef theSet)
{
  CFSetRef Copy = CFSetCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theSet);
  os_unfair_lock_lock(&sSIMeEmailAddressesLock);
  uint64_t v2 = (const void *)sSIMeEmailAddresses;
  sSIMeEmailAddresses = (uint64_t)Copy;
  os_unfair_lock_unlock(&sSIMeEmailAddressesLock);
  if (v2)
  {
    CFRelease(v2);
  }
}

void _SISetKnownContactEmailMapping(CFDictionaryRef theDict)
{
  if (theDict) {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theDict);
  }
  else {
    CFMutableDictionaryRef MutableCopy = 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&sEmailAddressMappingLock);
  uint64_t v2 = (const void *)sKnownEmailAdresses;
  sKnownEmailAdresses = (uint64_t)MutableCopy;
  os_unfair_lock_unlock((os_unfair_lock_t)&sEmailAddressMappingLock);
  if (v2)
  {
    CFRelease(v2);
  }
}

void _SISetKnownContactCounts(CFDictionaryRef theDict)
{
  if (theDict) {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theDict);
  }
  else {
    CFMutableDictionaryRef MutableCopy = 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&sContactCountsLock);
  uint64_t v2 = (const void *)sKnownContactCounts;
  sKnownContactCounts = (uint64_t)MutableCopy;
  os_unfair_lock_unlock((os_unfair_lock_t)&sContactCountsLock);
  if (v2)
  {
    CFRelease(v2);
  }
}

__CFArray *_SICreateContactMailCounts(const void *a1)
{
  CFArrayRef Mutable = 0;
  if (a1)
  {
    if (sKnownEmailAdresses && sKnownContactCounts != 0)
    {
      os_unfair_lock_lock((os_unfair_lock_t)&sEmailAddressMappingLock);
      CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)sKnownEmailAdresses, a1);
      if (Value)
      {
        unint64_t v5 = Value;
        CFRetain(Value);
        os_unfair_lock_unlock((os_unfair_lock_t)&sEmailAddressMappingLock);
        os_unfair_lock_lock((os_unfair_lock_t)&sContactCountsLock);
        CFArrayRef v6 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)sKnownContactCounts, v5);
        CFArrayRef v7 = v6;
        if (v6) {
          CFRetain(v6);
        }
        os_unfair_lock_unlock((os_unfair_lock_t)&sContactCountsLock);
        CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 8, MEMORY[0x1E4F1D510]);
        initCountsArray_block_invoke((int)&__block_literal_global_543, Mutable, 8);
        readFromAllCountsArray_block_invoke_3((int)&__block_literal_global_550, v7, Mutable, 8, 8);
        CFRelease(v5);
        if (v7) {
          CFRelease(v7);
        }
      }
      else
      {
        os_unfair_lock_unlock((os_unfair_lock_t)&sEmailAddressMappingLock);
        return 0;
      }
    }
  }
  return Mutable;
}

__CFArray *_SICreateContactSMSCounts(const void *a1)
{
  CFArrayRef Mutable = 0;
  if (a1 && sKnownContactCounts)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&sContactCountsLock);
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)sKnownContactCounts, a1);
    CFArrayRef v4 = Value;
    if (Value) {
      CFRetain(Value);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&sContactCountsLock);
    CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 8, MEMORY[0x1E4F1D510]);
    initCountsArray_block_invoke((int)&__block_literal_global_543, Mutable, 8);
    readFromAllCountsArray_block_invoke_3((int)&__block_literal_global_550, v4, Mutable, 16, 8);
    if (v4) {
      CFRelease(v4);
    }
  }
  return Mutable;
}

void *_SISetCoreSpotlightCopyBundleRemapCallback(void *result)
{
  sSICoreSpotlightCopyBundleRemapCallbacCFIndex k = result;
  return result;
}

uint64_t _SISetContactsIndex(uint64_t result)
{
  sContactsIndex = result;
  return result;
}

uint64_t SISetAccumulatedWorkBoundaryCrossCallback(uint64_t result, uint64_t (*a2)(uint64_t, double), uint64_t a3, double a4, double a5)
{
  *(void *)(result + 2160) = a3;
  *(double *)(result + 2168) = a4;
  *(double *)(result + 2176) = a5;
  *(void *)(result + 2152) = a2;
  if (a2)
  {
    double v5 = *(double *)(result + 2144);
    if (v5 >= a4 || v5 > a5) {
      return a2(a3, v5);
    }
  }
  return result;
}

uint64_t SIMoveDirectories(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && *(void *)(a1 + 6616) && *(void *)(a1 + 1048))
  {
    if ((a3 & 7) != 0)
    {
      uint64_t v15 = __si_assert_copy_extra_625(-1);
      uint64_t v16 = v15;
      uint64_t v17 = "";
      if (v15) {
        uint64_t v17 = v15;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 30311, "(count & 0x7) == 0", v17);
      free(v16);
      if (__valid_fs(-1)) {
        uint64_t v18 = 2989;
      }
      else {
        uint64_t v18 = 3072;
      }
      *(_DWORD *)uint64_t v18 = -559038737;
      abort();
    }
    if (dword_1E9FC90B4 >= 5)
    {
      uint64_t v19 = a3;
      int v20 = *__error();
      uint64_t v21 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1BD672000, v21, OS_LOG_TYPE_DEFAULT, "Do directory move.", buf, 2u);
      }
      *__error() = v20;
      a3 = v19;
    }
    uint64_t v5 = 0;
    int v6 = 0;
    uint64_t v7 = a3 / 8;
    while (v7 > v6)
    {
      uint64_t v8 = a2 + 8 * v6;
      if (*(void *)v8) {
        ++v5;
      }
      v6 += *(_DWORD *)(v8 + 8) + 2;
      if (v7 < v6) {
        return 0;
      }
    }
    if (v5)
    {
      uint64_t v9 = (uint64_t *)malloc_type_calloc(1uLL, 8 * v5 + 32, 0x7E0104D9uLL);
      uint64_t v10 = (uint64_t)v9;
      int v11 = 0;
      v9[1] = a1;
      while (v7 > v11)
      {
        uint64_t v12 = *(void *)(a2 + 8 * v11);
        if (v12)
        {
          uint64_t v13 = v9[2];
          void v9[2] = v13 + 1;
          v9[v13 + 4] = v12;
        }
        v11 += *(void *)(a2 + 8 * (v11 + 1)) + 2;
        if (v7 < v11)
        {
          free(v9);
          return 0;
        }
      }
      journalMoves(a1, v9[2], v9 + 4, 0);
      si_enqueue_barrier(*(void *)(a1 + 1048), (uint64_t)moveDirectories, v10);
    }
    if (dword_1E9FC90B4 >= 5)
    {
      int v22 = *__error();
      uint64_t v23 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v24 = 0;
        _os_log_impl(&dword_1BD672000, v23, OS_LOG_TYPE_DEFAULT, "Leave.", v24, 2u);
      }
      *__error() = v22;
    }
  }
  return 1;
}

void journalMoves(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    int v8 = 8 * a2;
    uint64_t v9 = malloc_type_malloc(8 * a2 + 12, 0x5D1D3219uLL);
    uint64_t v10 = v9;
    if (a4) {
      int v11 = -265421075;
    }
    else {
      int v11 = -266469651;
    }
    _DWORD *v9 = v11;
    uint64_t v12 = v9 + 3;
    if (a2 >= 1)
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v14 = *a3++;
        *v12++ = v14;
        --v13;
      }
      while (v13);
    }
    v9[1] = v8;
    void v9[2] = a2;
    uint64_t v15 = (pthread_mutex_t *)(a1 + 1624);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 1624));
    JournalFd = getJournalFd(a1, 0, 0);
    uint64_t v17 = fd_write((uint64_t)JournalFd, (uint64_t)v10, (v8 & 0xFFFFFFF8) + 12);
    pthread_mutex_unlock(v15);
    if (v17 == -1)
    {
      int v18 = *__error();
      int v19 = *__error();
      int v20 = _SILogForLogForCategory(4);
      os_log_type_t v21 = 2 * (dword_1E9FC90B4 < 4);
      if (os_log_type_enabled(v20, v21))
      {
        v22[0] = 67109120;
        v22[1] = v18;
        _os_log_impl(&dword_1BD672000, v20, v21, "Error writing to log file: %d", (uint8_t *)v22, 8u);
      }
      *__error() = v19;
    }
    free(v10);
  }
}

uint64_t SIMoveFiles(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 6616) && *(void *)(a1 + 1048))
  {
    if ((a3 & 7) != 0)
    {
      int v20 = __si_assert_copy_extra_625(-1);
      os_log_type_t v21 = v20;
      int v22 = "";
      if (v20) {
        int v22 = v20;
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 30361, "(count & 0x7) == 0", v22);
      free(v21);
      if (__valid_fs(-1)) {
        uint64_t v23 = 2989;
      }
      else {
        uint64_t v23 = 3072;
      }
      *(_DWORD *)uint64_t v23 = -559038737;
      abort();
    }
    if (dword_1E9FC90B4 >= 5)
    {
      int v24 = *__error();
      uint64_t v25 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1BD672000, v25, OS_LOG_TYPE_DEFAULT, "Do directory move.", buf, 2u);
      }
      *__error() = v24;
    }
    uint64_t v6 = 0;
    int v7 = 0;
    uint64_t v8 = a3 / 8;
    while (v8 > v7)
    {
      uint64_t v9 = a2 + 8 * v7;
      if (*(void *)v9) {
        ++v6;
      }
      v7 += *(_DWORD *)(v9 + 8) + 2;
      if (v8 < v7) {
        return 0;
      }
    }
    if (v6)
    {
      int v11 = malloc_type_calloc(1uLL, 8 * v6 + 32, 0x20AF8CCEuLL);
      uint64_t v12 = (uint64_t)v11;
      int v13 = 0;
      v11[1] = a1;
      while (v8 > v13)
      {
        uint64_t v14 = *(void *)(a2 + 8 * v13);
        if (v14)
        {
          uint64_t v15 = v11[2];
          void v11[2] = v15 + 1;
          v11[v15 + 4] = v14;
        }
        v13 += *(void *)(a2 + 8 * (v13 + 1)) + 2;
        if (v8 < v13)
        {
          uint64_t v16 = __si_assert_copy_extra_625(-1);
          uint64_t v17 = v16;
          int v18 = "";
          if (v16) {
            int v18 = v16;
          }
          __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 30388, "i<=count/8", v18);
          free(v17);
          if (__valid_fs(-1)) {
            uint64_t v19 = 2989;
          }
          else {
            uint64_t v19 = 3072;
          }
          *(_DWORD *)uint64_t v19 = -559038737;
          abort();
        }
      }
      journalMoves(a1, v11[2], v11 + 4, 1);
      si_enqueue_barrier(*(void *)(a1 + 1048), (uint64_t)moveFiles, v12);
    }
    if (dword_1E9FC90B4 >= 5)
    {
      int v26 = *__error();
      uint64_t v27 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v28 = 0;
        _os_log_impl(&dword_1BD672000, v27, OS_LOG_TYPE_DEFAULT, "Leave.", v28, 2u);
      }
      *__error() = v26;
    }
  }
  return 1;
}

void moveFiles(void *a1, int a2)
{
  if (!a2)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    innerMoveFiles((unint64_t)a1);
    bumpWorkTime(a1[1], Current);
  }
  free(a1);
}

BOOL SISupportsFastScoping(uint64_t a1)
{
  return *(void *)(a1 + 1184) && *(void *)(a1 + 6616) != 0;
}

CFDictionaryRef __isEntitledForAttribute_block_invoke()
{
  __dst[61] = *(const void **)MEMORY[0x1E4F143B8];
  memcpy(__dst, off_1E6341818, 0x1E8uLL);
  memcpy(values, &unk_1BDA82FB8, sizeof(values));
  CFDictionaryRef result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], __dst, (const void **)values, 61, &kCStringDictionaryKeyCallBacks, &kIntDictionaryValueCallBacks);
  isEntitledForAttribute_attributeEntitlementMapping = (uint64_t)result;
  return result;
}

__CFArray *SICopyCorrections(uint64_t a1, const __CFString *a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  makeThreadId();
  if (a1)
  {
    bzero(buf, 0x404uLL);
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0, 1024, a2);
    CFStringNormalize(MutableCopy, kCFStringNormalizationFormC);
    CFStringLowercase(MutableCopy, 0);
    char v47 = 0;
    long long v55 = 0u;
    long long v54 = 0u;
    long long v53 = 0u;
    long long v52 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v49 = 0u;
    v46[0] = 5;
    v46[1] = &v48;
    uint64_t v48 = *(void *)(a1 + 1312);
    uint64_t v5 = *(unsigned int *)(a1 + 1336);
    *(void *)&long long v50 = *(void *)(a1 + 1344);
    *((void *)&v50 + 1) = v5;
    uint64_t v6 = *(void *)(a1 + 1376);
    *(void *)&long long v51 = *(void *)(a1 + 1328);
    *((void *)&v51 + 1) = v6;
    uint64_t v7 = *(void *)(a1 + 1360);
    *(void *)&long long v52 = *(unsigned int *)(a1 + 1372);
    *((void *)&v52 + 1) = v7;
    uint64_t v8 = *(unsigned int *)(a1 + 1256);
    *(void *)&long long v53 = *(void *)(a1 + 1248);
    *((void *)&v53 + 1) = v8;
    *(void *)&long long v54 = *(void *)(a1 + 1264);
    *((void *)&v54 + 1) = -1;
    long long v49 = 0uLL;
    int v9 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
    unint64_t v10 = setThreadIdAndInfo(-1, (long long *)sMappingExceptionCallbacks, (uint64_t)v46, 0, v9);
    unsigned int v44 = HIDWORD(v10);
    unsigned int v45 = v10;
    unint64_t v43 = __PAIR64__(v11, v12);
    uint64_t v13 = *(void *)&threadData[18 * v10 + 2];
    uint64_t v14 = v13 + 320 * HIDWORD(v10);
    *(unsigned char *)(v14 + 216) = 0;
    int v15 = *(_DWORD *)(v14 + 312);
    uint64_t v16 = *(void (**)(void))(v14 + 224);
    if (v16) {
      v16(*(void *)(v13 + 320 * HIDWORD(v10) + 288));
    }
    unsigned int v42 = v45;
    unsigned int v41 = v44;
    unint64_t v40 = v43;
    if (_setjmp((int *)v14))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        v39[0] = 0;
        _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", (uint8_t *)v39, 2u);
      }
      *(_DWORD *)(v14 + 312) = v15;
      CIOnThreadCleanUpReset(v40);
      dropThreadId(v42, 1, v9);
      CICleanUpReset(v42, HIDWORD(v40));
    }
    else
    {
      if (CFStringGetCString(MutableCopy, (char *)v57, 1024, 0x8000100u)
        && (*(_DWORD *)long long buf = 0,
            size_t v22 = strlen((const char *)v57),
            (unsigned int v23 = data_map32_id_get_with_key_noextra(a1, v57, v22 + 1)) != 0))
      {
        CFArrayRef Mutable = 0;
        unsigned int v25 = *(_DWORD *)(data_map32_get_data(a1, v23, 0) - 4);
        if (v25)
        {
          CFArrayRef Mutable = 0;
          uint64_t data = data_map32_get_data(a1, v25, 0);
          CFIndex v27 = *(unsigned int *)(data - 4);
          if ((v27 - 257) >= 0xFFFFFF00)
          {
            int v28 = (unsigned int *)data;
            CFArrayRef Mutable = CFArrayCreateMutable(0, v27, MEMORY[0x1E4F1D510]);
            unsigned int v29 = v28;
            CFIndex v30 = v27;
            do
            {
              unint64_t v31 = v29 + 1;
              unsigned int v32 = (const char *)data_map32_get_data(a1, *v29, 0);
              if (v32)
              {
                CFStringRef v33 = CFStringCreateWithCString(0, v32, 0x8000100u);
                if (v33)
                {
                  CFStringRef v34 = v33;
                  CFArrayAppendValue(Mutable, v33);
                  CFRelease(v34);
                }
              }
              unsigned int v29 = v31;
              --v30;
            }
            while (v30);
            char v47 = 1;
          }
        }
      }
      else
      {
        CFArrayRef Mutable = 0;
      }
      uint64_t v35 = *(void *)&threadData[18 * v42 + 2];
      unsigned int v36 = v41;
      uint64_t v37 = v35 + 320 * v41;
      *(_DWORD *)(v37 + 312) = v15;
      unsigned int v38 = *(void (**)(void))(v37 + 232);
      if (v38) {
        v38(*(void *)(v35 + 320 * v36 + 288));
      }
      dropThreadId(v42, 0, v9);
      if (Mutable)
      {
        if (v47)
        {
          uint64_t v17 = Mutable;
          goto LABEL_9;
        }
        CFRelease(Mutable);
      }
    }
    uint64_t v17 = 0;
LABEL_9:
    CFRelease(MutableCopy);
    return v17;
  }
  int v19 = *__error();
  int v20 = _SILogForLogForCategory(10);
  BOOL v21 = dword_1E9FC90CC < 3;
  if (os_log_type_enabled(v20, (os_log_type_t)(dword_1E9FC90CC < 3)))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1BD672000, v20, (os_log_type_t)v21, "*warn* invalid corrections commit", buf, 2u);
  }
  *__error() = v19;
  return 0;
}

void SICorrectionCommit(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v2 = *(unsigned __int8 *)(a1 + 1462);
    if (!_data_map32_commit(a1, 0))
    {
      uint64_t v3 = *(void *)(a1 + 1264);
      if (v3)
      {
        int v4 = *(_DWORD *)(v3 + 44);
        if (v4 != -1)
        {
          bzero(v27, 0x400uLL);
          uint64_t v5 = fd_name(v3, (char *)v27, 0x400uLL);
          if (v5)
          {
            uint64_t v6 = v5;
            size_t v7 = strlen(v5);
            if (v7 >= 8)
            {
              uint64_t v8 = (char *)&v6[v7 - 7];
              if (!strcmp(v8, ".header"))
              {
                strcpy(v8, ".map");
                unsigned __int8 v9 = v2 ? 3 : 0;
                unint64_t v10 = (atomic_uint *)fd_create_protected(v4, v6, 1538, v9);
                if (v10)
                {
                  unsigned int v11 = v10;
                  uint64_t v12 = (*(unsigned int *)(a1 + 1368) + 103) & 0x1FFFFFFF8;
                  uint64_t v13 = (*(unsigned int *)(a1 + 1340) + v12 + 15) & 0x3FFFFFFF8;
                  uint64_t v14 = (*(unsigned int *)(a1 + 1320) + v13 + 15) & 0x7FFFFFFF8;
                  if (fd_truncate((uint64_t)v10, v14) || (uint64_t v18 = fd_mmap((uint64_t)v11), v18 == -1))
                  {
                    _fd_unlink_with_origin((uint64_t)v11, 0);
                    fd_release(v11);
                  }
                  else
                  {
                    int v19 = (char *)v18;
                    int v20 = *(long long **)(a1 + 1288);
                    long long v21 = *v20;
                    long long v22 = v20[1];
                    long long v23 = v20[2];
                    *(void *)(v18 + 48) = *((void *)v20 + 6);
                    *(_OWORD *)(v18 + 16) = v22;
                    *(_OWORD *)(v18 + 32) = v23;
                    *(_OWORD *)uint64_t v18 = v21;
                    *(_DWORD *)(v18 + 56) = 13;
                    *(_DWORD *)(v18 + 60) = v14;
                    *(_DWORD *)(v18 + 64) = 88;
                    *(_DWORD *)(v18 + 68) = v12;
                    *(_DWORD *)(v18 + 72) = v13;
                    memcpy((void *)(v18 + 88), *(const void **)(a1 + 1376), *(unsigned int *)(a1 + 1368));
                    memcpy(&v19[v12], *(const void **)(a1 + 1344), *(unsigned int *)(a1 + 1340));
                    memcpy(&v19[v13], *(const void **)(a1 + 1312), *(unsigned int *)(a1 + 1320));
                    fd_system_status_stall_if_busy();
                    msync(v19, v14, 16);
                    munmap(v19, v14);
                    fd_release(v11);
                    free(*(void **)(a1 + 1288));
                    *(void *)(a1 + 1288) = 0;
                    _fd_unlink_with_origin(*(void *)(a1 + 1264), 0);
                    fd_release(*(atomic_uint **)(a1 + 1264));
                    *(void *)(a1 + 1264) = 0;
                    munmap(*(void **)(a1 + 1376), *(unsigned int *)(a1 + 1372));
                    *(void *)(a1 + 1376) = -1;
                    _fd_unlink_with_origin(*(void *)(a1 + 1360), 0);
                    fd_release(*(atomic_uint **)(a1 + 1360));
                    *(void *)(a1 + 1360) = 0;
                    munmap(*(void **)(a1 + 1344), *(unsigned int *)(a1 + 1336));
                    *(void *)(a1 + 1344) = -1;
                    _fd_unlink_with_origin(*(void *)(a1 + 1328), 0);
                    fd_release(*(atomic_uint **)(a1 + 1328));
                    *(void *)(a1 + 1328) = 0;
                    munmap(*(void **)(a1 + 1312), *(unsigned int *)(a1 + 1304));
                    *(void *)(a1 + 1312) = -1;
                    _fd_unlink_with_origin(*(void *)(a1 + 1296), 0);
                    fd_release(*(atomic_uint **)(a1 + 1296));
                    *(void *)(a1 + 1296) = 0;
                    if (*(unsigned char *)(a1 + 1462)) {
                      unsigned __int8 v24 = 3;
                    }
                    else {
                      unsigned __int8 v24 = 0;
                    }
                    unsigned int v25 = fd_create_protected(v4, v6, 1, v24);
                    *(void *)(a1 + 1264) = v25;
                    int v26 = (unsigned int *)fd_mmap((uint64_t)v25);
                    if (v26 != (unsigned int *)-1)
                    {
                      *(void *)(a1 + 1248) = v26;
                      *(void *)(a1 + 1288) = v26;
                      *(void *)(a1 + 1376) = (char *)v26 + v26[16];
                      *(void *)(a1 + 1344) = (char *)v26 + v26[17];
                      *(void *)(a1 + 1312) = (char *)v26 + v26[18];
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    int v15 = *__error();
    uint64_t v16 = _SILogForLogForCategory(10);
    os_log_type_t v17 = dword_1E9FC90CC < 3;
    if (os_log_type_enabled(v16, (os_log_type_t)(dword_1E9FC90CC < 3)))
    {
      *(_WORD *)CFIndex v27 = 0;
      _os_log_impl(&dword_1BD672000, v16, v17, "*warn* invalid corrections commit", v27, 2u);
    }
    *__error() = v15;
  }
}

void SICorrectionDestory(uint64_t a1)
{
  if (a1) {
    data_map32_destroy(a1);
  }
}

uint64_t SICorrectionCreate(const __CFString *a1, int a2, int a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  bzero(buffer, 0x400uLL);
  if (!CFStringGetCString(a1, buffer, 1024, 0x8000100u)) {
    strcpy(buffer, "default_corrections");
  }
  long long v8 = 0u;
  *(_OWORD *)unsigned __int8 v9 = 0u;
  if (a3) {
    int v6 = 9;
  }
  else {
    int v6 = 10;
  }
  LODWORD(v8) = a2;
  *((void *)&v8 + 1) = buffer;
  *(_DWORD *)unsigned __int8 v9 = 4;
  *(_DWORD *)&v9[4] = v6;
  *(_OWORD *)&v9[8] = 0uLL;
  long long v10 = 0uLL;
  uint64_t v11 = 0;
  return data_map32_init_with_ctx((uint64_t)&v8);
}

void SIAddCorrection(uint64_t a1, CFStringRef theString, const __CFArray *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    int v15 = *__error();
    uint64_t v16 = _SILogForLogForCategory(10);
    os_log_type_t v17 = dword_1E9FC90CC < 3;
    if (os_log_type_enabled(v16, (os_log_type_t)(dword_1E9FC90CC < 3)))
    {
      *(_WORD *)long long v22 = 0;
      _os_log_impl(&dword_1BD672000, v16, v17, "*warn* no correction dict passed", v22, 2u);
    }
    *__error() = v15;
    return;
  }
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0, 1024, theString);
  CFStringNormalize(MutableCopy, kCFStringNormalizationFormC);
  CFStringLowercase(MutableCopy, 0);
  bzero(v22, 0x404uLL);
  CFIndex Count = CFArrayGetCount(a3);
  bzero(&v25, 0x404uLL);
  if (Count < 1)
  {
    unsigned int v7 = 0;
    goto LABEL_20;
  }
  unsigned int v7 = 0;
  CFIndex v8 = 0;
  while (1)
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a3, v8);
    if (CFStringGetLength(ValueAtIndex) >= 1025)
    {
      int v10 = *__error();
      uint64_t v11 = _SILogForLogForCategory(10);
      os_log_type_t v12 = dword_1E9FC90CC < 3;
      if (os_log_type_enabled(v11, (os_log_type_t)(dword_1E9FC90CC < 3)))
      {
        *(_DWORD *)long long buf = 138412290;
        CFMutableStringRef v24 = MutableCopy;
        _os_log_impl(&dword_1BD672000, v11, v12, "*warn* exceeded max for %@", buf, 0xCu);
      }
      *__error() = v10;
      goto LABEL_11;
    }
    int v25 = 0;
    if (CFStringGetCString(ValueAtIndex, v26, 1024, 0x8000100u)) {
      break;
    }
LABEL_11:
    if (Count == ++v8) {
      goto LABEL_20;
    }
  }
  size_t v13 = strlen(v26);
  int data_id = _data_map32_get_data_id(a1, *(_DWORD *)(a1 + 1244), (char *)&v25, v13 + 5, 1);
  if (v7 != 256)
  {
    *(_DWORD *)&v22[4 * v7++ + 4] = data_id;
    *(_DWORD *)long long v22 = v7;
    goto LABEL_11;
  }
  int v18 = *__error();
  int v19 = _SILogForLogForCategory(10);
  os_log_type_t v20 = dword_1E9FC90CC < 3;
  if (os_log_type_enabled(v19, (os_log_type_t)(dword_1E9FC90CC < 3)))
  {
    *(_DWORD *)long long buf = 138412290;
    CFMutableStringRef v24 = MutableCopy;
    _os_log_impl(&dword_1BD672000, v19, v20, "*warn* correctDict exceeded max for %@", buf, 0xCu);
  }
  *__error() = v18;
  unsigned int v7 = 256;
LABEL_20:
  int v25 = _data_map32_get_data_id(a1, *(_DWORD *)(a1 + 1244), (char *)v22, 4 * v7 + 4, 1);
  CFStringGetCString(MutableCopy, v26, 1024, 0x8000100u);
  size_t v21 = strlen(v26);
  _data_map32_get_data_id(a1, *(_DWORD *)(a1 + 1244), (char *)&v25, v21 + 5, 1);
  CFRelease(MutableCopy);
}

uint64_t _SIGetLastUsedDate(int a1, char *path, _OWORD *a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    goto LABEL_9;
  }
  long long v6 = 0uLL;
  uint64_t v7 = 0;
  if (a1 != -1)
  {
    ssize_t v4 = fgetxattr(a1, "com.apple.lastuseddate#PS", &v6, 0x18uLL, 0, 0);
    if (v4 < 0) {
      return 0xFFFFFFFFLL;
    }
    goto LABEL_7;
  }
  if (!path)
  {
LABEL_9:
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
  ssize_t v4 = getxattr(path, "com.apple.lastuseddate#PS", &v6, 0x18uLL, 0, 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
LABEL_7:
    if (v4 == 16)
    {
      uint64_t result = 0;
      *a3 = v6;
      return result;
    }
    goto LABEL_9;
  }
  return 0xFFFFFFFFLL;
}

uint64_t _SISetLastUsedDate(int a1, char *path, long long *a3)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    goto LABEL_6;
  }
  long long v4 = *a3;
  if (a1 != -1) {
    return fsetxattr(a1, "com.apple.lastuseddate#PS", &v4, 0x10uLL, 0, 0);
  }
  if (path) {
    return setxattr(path, "com.apple.lastuseddate#PS", &v4, 0x10uLL, 0, 0);
  }
LABEL_6:
  *__error() = 22;
  return 0xFFFFFFFFLL;
}

void *_SISetCoreSpotlightRelatedItemCallback(void *result)
{
  sCSRelatedItemCallbacCFIndex k = result;
  return result;
}

DIR *_SITemporarilyChangeProtectionClass(uint64_t a1, uint64_t a2)
{
  return _SIChangeProtectionClassForFilesInDirectory(*(_DWORD *)(a1 + 32), a2);
}

uint64_t _SIPriority(uint64_t a1)
{
  return *(_DWORD *)(a1 + 60) & 1;
}

CFDictionaryRef _SIUserCopyUserFSCriteriaForQuery(char *a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  query_node_with_anuint64_t n = db_make_query_node_with_ann(a1, 0);
  if (!query_node_with_ann) {
    return 0;
  }
  int v2 = query_node_with_ann;
  uint64_t v20 = 0;
  size_t v21 = &v20;
  uint64_t v22 = 0x2000000000;
  char v23 = 1;
  uint64_t v16 = 0;
  os_log_type_t v17 = &v16;
  uint64_t v18 = 0x2000000000;
  uint64_t v19 = 0;
  uint64_t v12 = 0;
  size_t v13 = &v12;
  uint64_t v14 = 0x2000000000;
  uint64_t v15 = 0;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  void v11[2] = ___SIUserCopyUserFSCriteriaForQuery_block_invoke;
  v11[3] = &unk_1E6341A08;
  int v11[4] = &v20;
  v11[5] = &v12;
  v11[6] = &v16;
  keys = (void *)MEMORY[0x1E4F143A8];
  uint64_t v26 = 0x40000000;
  uint64_t v27 = __db_query_tree_apply_block_block_invoke;
  uint64_t v28 = &unk_1E6348598;
  unsigned int v29 = v11;
  db_query_tree_apply_block_with_meta(query_node_with_ann, (uint64_t)&keys, 0);
  if (*((unsigned char *)v21 + 24) && ((uint64_t v3 = (void *)v13[3]) != 0 || v17[3]))
  {
    uint64_t v4 = 0;
    keys = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    memset(values, 0, sizeof(values));
    uint64_t v5 = (void *)*MEMORY[0x1E4F1CFD0];
    if (v3 == (void *)*MEMORY[0x1E4F1CFD0])
    {
      keys = @"kMDItemIsTrashed";
      values[0] = v3;
      uint64_t v4 = 1;
    }
    *(&keys + v4) = @"LISearchObjTypeReturnAll";
    CFIndex v6 = v4 + 1;
    values[v4] = v5;
    uint64_t v7 = (void *)v17[3];
    if (v7)
    {
      *(&keys + v6) = @"LISearchFileNameContains";
      values[v6] = v7;
      CFIndex v6 = v4 | 2;
    }
    CFDictionaryRef v8 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&keys, (const void **)values, v6, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  else
  {
    CFDictionaryRef v8 = 0;
  }
  unsigned __int8 v9 = (const void *)v17[3];
  if (v9) {
    CFRelease(v9);
  }
  keys = (void *)MEMORY[0x1E4F143A8];
  uint64_t v26 = 0x40000000;
  uint64_t v27 = __db_query_tree_apply_block_block_invoke;
  uint64_t v28 = &unk_1E6348598;
  unsigned int v29 = &__block_literal_global_161;
  db_query_tree_apply_block_with_meta(v2, (uint64_t)&keys, 0);
  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(&v20, 8);
  return v8;
}

uint64_t SIIndexIsLowLatency(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 6578) >> 2) & 1;
}

void SIFixupPaths(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (*(void *)(a1 + 1056))
  {
    CFIndex v6 = malloc_type_malloc(0x10uLL, 0x60040FAFB2B2FuLL);
    void *v6 = a1;
    v6[1] = RLEOIDArrayCreate((const __CFAllocator *)*MEMORY[0x1E4F1CF80], a2, a3);
    uint64_t v7 = *(void *)(a1 + 1056);
    si_enqueue_work(v7, (uint64_t)fixupOrphanItems, (uint64_t)v6);
  }
}

uint64_t SISetICUCacheFd()
{
  return MEMORY[0x1F412F4B0]();
}

void SIFetchTopKTerms(uint64_t a1, void *a2)
{
  if (a1 && *(void *)(a1 + 1080))
  {
    uint64_t v4 = malloc_type_malloc(0x10uLL, 0xA0040AFF93C70uLL);
    *uint64_t v4 = a1;
    v4[1] = _Block_copy(a2);
    uint64_t v5 = *(void *)(a1 + 1080);
    si_enqueue_work(v5, (uint64_t)get_topK, (uint64_t)v4);
  }
  else
  {
    CFIndex v6 = (void (*)(void *, void))a2[2];
    v6(a2, 0);
  }
}

void get_topK(const void **a1, int a2)
{
  if (a2)
  {
    (*((void (**)(void))a1[1] + 2))();
  }
  else
  {
    v23[0] = _MDPlistContainerGetBytes();
    v23[1] = _MDPlistContainerGetLength();
    v23[2] = 0;
    v22[0] = 1;
    v22[1] = v23;
    int v3 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
    unint64_t v4 = setThreadIdAndInfo(-1, (long long *)sMappingExceptionCallbacks, (uint64_t)v22, 0, v3);
    unsigned int v20 = HIDWORD(v4);
    unsigned int v21 = v4;
    unint64_t v19 = __PAIR64__(v5, v6);
    uint64_t v7 = *(void *)&threadData[18 * v4 + 2];
    uint64_t v8 = v7 + 320 * HIDWORD(v4);
    *(unsigned char *)(v8 + 216) = 0;
    int v9 = *(_DWORD *)(v8 + 312);
    int v10 = *(void (**)(void))(v8 + 224);
    if (v10) {
      v10(*(void *)(v7 + 320 * HIDWORD(v4) + 288));
    }
    unsigned int v18 = v21;
    unsigned int v17 = v20;
    unint64_t v16 = v19;
    if (_setjmp((int *)v8))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v15 = 0;
        _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v15, 2u);
      }
      *(_DWORD *)(v8 + 312) = v9;
      CIOnThreadCleanUpReset(v16);
      dropThreadId(v18, 1, v3);
      CICleanUpReset(v18, HIDWORD(v16));
    }
    else
    {
      (*((void (**)(void))a1[1] + 2))();
      uint64_t v11 = *(void *)&threadData[18 * v18 + 2];
      unsigned int v12 = v17;
      uint64_t v13 = v11 + 320 * v17;
      *(_DWORD *)(v13 + 312) = v9;
      uint64_t v14 = *(void (**)(void))(v13 + 232);
      if (v14) {
        v14(*(void *)(v11 + 320 * v12 + 288));
      }
      dropThreadId(v18, 0, v3);
    }
  }
  _Block_release(a1[1]);
  free(a1);
}

void _SITransferBundles(uint64_t a1, uint64_t a2, const __CFArray *a3, int a4, const void *a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v21 = 0;
    _os_log_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "### transfer start", v21, 2u);
  }
  if (a3) {
    CFIndex Count = CFArrayGetCount(a3);
  }
  else {
    CFIndex Count = 0;
  }
  uint64_t v11 = malloc_type_calloc(1uLL, 4 * Count + 84, 0x266BEA3CuLL);
  *uint64_t v11 = a1;
  v11[1] = a2;
  *((_DWORD *)v11 + 6) = a4;
  if (a5) {
    int v11[4] = _Block_copy(a5);
  }
  if (Count)
  {
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        bzero(v21, 0x400uLL);
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a3, i);
        if (CFStringGetCString(ValueAtIndex, (char *)v21, 1024, 0x8000100u))
        {
          int v14 = strlen((const char *)v21);
          int v15 = bundleIdHash((uint64_t)v21, v14 + 1);
          uint64_t v16 = *((unsigned int *)v11 + 18);
          *((_DWORD *)v11 + 18) = v16 + 1;
          *((_DWORD *)v11 + v16 + 19) = v15;
        }
      }
    }
    uint64_t v17 = *((unsigned int *)v11 + 18);
    if ((a4 & 2) == 0 && v17)
    {
      int v18 = bundleIdHash((uint64_t)"com.com.apple.searchd", 21);
      *((_DWORD *)v11 + 18) = v17 + 1;
      *((_DWORD *)v11 + v17 + 19) = v18;
      LODWORD(v17) = v17 + 1;
    }
  }
  else
  {
    LODWORD(v17) = *((_DWORD *)v11 + 18);
  }
  if (a1 != a2 && a1 && v17 && *(unsigned char *)(a1 + 2064) && *(void *)(a1 + 1040))
  {
    void v11[2] = *(void *)(a1 + 1184);
    if ((a4 & 4) == 0)
    {
      *((_DWORD *)v11 + 7) = 0;
      si_enqueue_work(*(void *)(a1 + 1040), (uint64_t)si_transferBundleItems, (uint64_t)v11);
      return;
    }
    *((_DWORD *)v11 + 7) = 18;
    unint64_t v19 = (unsigned int *)v11;
    int v20 = 0;
  }
  else
  {
    *((_DWORD *)v11 + 12) = 22;
    unint64_t v19 = (unsigned int *)v11;
    int v20 = 1;
  }
  si_transferBundleItems(v19, v20);
}

void si_transferBundleItems(unsigned int *a1, int a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    int v3 = a1[12];
    if (!v3)
    {
      a1[12] = 89;
      int v3 = 89;
    }
  }
  else
  {
    char v39 = 0;
    unint64_t v4 = db_clear_docids_setup(*((int **)a1 + 2));
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v43 = 0u;
    uint64_t v5 = 0;
    memset(buf, 0, sizeof(buf));
    do
    {
      if (v5 != a1[7]) {
        buf[v5] = si_scheduler_suspend(*(void *)(*(void *)a1 + 8 * v5 + 864));
      }
      ++v5;
    }
    while (v5 != 18);
    long long v41 = 0u;
    memset(v40, 0, sizeof(v40));
    if (*((void *)a1 + 1))
    {
      uint64_t v6 = 0;
      do
      {
        uint64_t v7 = v6;
        *(void *)((char *)v40 + v6) = si_scheduler_suspend(*(void *)(*((void *)a1 + 1) + v6 + 864));
        uint64_t v6 = v7 + 8;
      }
      while (v7 != 136);
    }
    int v8 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
    unint64_t v9 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v8);
    unsigned int v37 = HIDWORD(v9);
    unsigned int v38 = v9;
    unint64_t v36 = __PAIR64__(v10, v11);
    uint64_t v12 = *(void *)&threadData[18 * v9 + 2];
    uint64_t v13 = v12 + 320 * HIDWORD(v9);
    int v14 = *(_DWORD *)(v13 + 312);
    int v15 = *(void (**)(void))(v13 + 224);
    if (v15) {
      v15(*(void *)(v12 + 320 * HIDWORD(v9) + 288));
    }
    unsigned int v35 = v38;
    unsigned int v34 = v37;
    unint64_t v33 = v36;
    if (_setjmp((int *)v13))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        v32[0] = 0;
        _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", (uint8_t *)v32, 2u);
      }
      *(_DWORD *)(v13 + 312) = v14;
      CIOnThreadCleanUpReset(v33);
      dropThreadId(v35, 1, v8);
      CICleanUpReset(v35, HIDWORD(v33));
      int v16 = 0;
    }
    else
    {
      int v17 = db_clear_docids_matching_bundles(*((_DWORD **)a1 + 2), v4, *(_DWORD **)(*(void *)a1 + 6584), a1 + 19, a1[18], (unsigned int (*)(void *, uint64_t))transfer_bundles_match, (uint64_t)a1);
      char v39 = 1;
      uint64_t v18 = *(void *)&threadData[18 * v35 + 2];
      unsigned int v19 = v34;
      uint64_t v20 = v18 + 320 * v34;
      *(_DWORD *)(v20 + 312) = v14;
      unsigned int v21 = *(void (**)(void))(v20 + 232);
      if (v21) {
        v21(*(void *)(v18 + 320 * v19 + 288));
      }
      dropThreadId(v35, 0, v8);
      int v16 = v17;
    }
    if (v39) {
      int v22 = v16;
    }
    else {
      int v22 = -1;
    }
    transfer_index_if_needed((uint64_t)a1, 0);
    db_clear_docids_cleanup(*((int **)a1 + 2), v4);
    if (*((void *)a1 + 1))
    {
      uint64_t v23 = 0;
      do
      {
        uint64_t v24 = v23;
        si_scheduler_resume(*(void *)(*((void *)a1 + 1) + v23 + 1000), *(void **)((char *)&buf[-1] + v23), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 31934);
        uint64_t v23 = v24 - 8;
      }
      while (v24 != -136);
    }
    for (uint64_t i = 0; i != -18; --i)
    {
      if (i + 17 != a1[7]) {
        si_scheduler_resume(*(void *)(*(void *)a1 + 8 * i + 1000), *((void **)&v49 + i + 1), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 31943);
      }
    }
    if (a1[12]) {
      BOOL v26 = 1;
    }
    else {
      BOOL v26 = v22 == 0;
    }
    int v27 = a1[12];
    if (!v26)
    {
      a1[12] = v22;
      int v27 = v22;
    }
    int v3 = v27;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v28 = *((void *)a1 + 5);
    LODWORD(buf[0]) = 67109376;
    HIDWORD(buf[0]) = v3;
    LOWORD(buf[1]) = 2048;
    *(void *)((char *)&buf[1] + 2) = v28;
    _os_log_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "### transfer complete res:%d matches:%lu", (uint8_t *)buf, 0x12u);
  }
  uint64_t v29 = *((void *)a1 + 4);
  if (v29)
  {
    (*(void (**)(uint64_t, void))(v29 + 16))(v29, a1[12]);
    _Block_release(*((const void **)a1 + 4));
  }
  uint64_t v30 = (const void *)*((void *)a1 + 7);
  if (v30) {
    CFRelease(v30);
  }
  unint64_t v31 = (const void *)*((void *)a1 + 8);
  if (v31) {
    CFRelease(v31);
  }
  free(a1);
}

void transfer_index_if_needed(uint64_t a1, CFDictionaryRef theDict)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (!theDict)
  {
    uint64_t v5 = (void *)(a1 + 64);
    if (!*(void *)(a1 + 64)) {
      return;
    }
    CFArrayRef Value = 0;
    goto LABEL_9;
  }
  CFArrayRef Value = CFDictionaryGetValue(theDict, @"_kMDItemBundleID");
  uint64_t v5 = (void *)(a1 + 64);
  if (!*(void *)(a1 + 64)) {
    goto LABEL_22;
  }
  if (!Value || *(int *)(a1 + 52) > 512 || !CFEqual(*(CFTypeRef *)(a1 + 56), Value))
  {
LABEL_9:
    _MDPlistContainerAddNullValue();
    _MDPlistContainerEndArray();
    _MDPlistContainerEndContainer();
    int v6 = *(_DWORD *)(a1 + 52);
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 56);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412546;
        *(void *)&void buf[4] = v7;
        *(_WORD *)&uint8_t buf[12] = 1024;
        *(_DWORD *)&buf[14] = v6;
        _os_log_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "### transfering %@ %d items", buf, 0x12u);
        int v6 = *(_DWORD *)(a1 + 52);
      }
      if (v6 >= 1)
      {
        for (int i = 0; i < v6; ++i)
        {
          memset(buf, 0, sizeof(buf));
          _MDPlistGetRootPlistObjectFromPlist();
          uint64_t v9 = *(void *)(a1 + 8);
          long long v20 = *(_OWORD *)buf;
          uint64_t v21 = *(void *)&buf[16];
          _MDPlistArrayGetPlistObjectAtIndex();
          uint64_t v21 = 0;
          long long v20 = 0u;
          if (processOneCS(v9, -1, v7, 0, 0, (uint64_t)v22, (uint64_t)&v20, 0, 0, 0, 0, 0, 0, &v23))
          {
            unsigned int v10 = malloc_type_calloc(1uLL, 0x60uLL, 0x10B0040E0DE4348uLL);
            *unsigned int v10 = *(void *)(a1 + 8);
            LiveIndex = si_getLiveIndex(*(void *)(*(void *)(a1 + 8) + 1376));
            v10[1] = LiveIndex;
            int v12 = LiveIndex[14];
            *((_DWORD *)v10 + 4) = 2;
            *((_DWORD *)v10 + 5) = v12;
            _flushCache(v10, 0);
          }
          int v6 = *(_DWORD *)(a1 + 52);
        }
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *(void *)(a1 + 56);
        *(_DWORD *)long long buf = 138412546;
        *(void *)&void buf[4] = v13;
        *(_WORD *)&uint8_t buf[12] = 1024;
        *(_DWORD *)&buf[14] = v6;
        _os_log_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "### transferred %@ %d items", buf, 0x12u);
      }
    }
    int v14 = *(const void **)(a1 + 56);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(a1 + 56) = 0;
    }
    CFRelease(*(CFTypeRef *)(a1 + 64));
    *(void *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 52) = 0;
LABEL_22:
    if (!Value) {
      return;
    }
  }
  CFIndex Count = CFDictionaryGetCount(theDict);
  MEMORY[0x1F4188790](Count);
  int v16 = (CFTypeRef *)((char *)&v20 - ((8 * Count + 15) & 0xFFFFFFFFFFFFFFF0));
  bzero(v16, 8 * Count);
  MEMORY[0x1F4188790](v17);
  uint64_t v18 = v16;
  bzero(v16, 8 * Count);
  CFDictionaryGetKeysAndValues(theDict, v16, v16);
  if (!*v5)
  {
    *(void *)(a1 + 64) = _MDPlistContainerCreateMutable();
    _MDPlistContainerBeginContainer();
    _MDPlistContainerBeginArray();
    *(void *)(a1 + 56) = CFRetain(Value);
  }
  if (CFDictionaryGetValue(theDict, @"_kMDItemExternalID"))
  {
    _MDPlistContainerBeginDictionary();
    if (Count >= 1)
    {
      do
      {
        CFTypeRef v19 = *v16;
        if (!CFEqual(*v16, @"kMDItemAttributeChangeDate")
          && !CFEqual(v19, @"_kMDItemProtectionClass")
          && !CFEqual(v19, @"_kMDItemGroupId")
          && !CFEqual(v19, @"_kMDItemTransfered"))
        {
          _MDPlistContainerAddObject();
          _MDPlistContainerAddObject();
        }
        ++v18;
        ++v16;
        --Count;
      }
      while (Count);
    }
    _MDPlistContainerAddObject();
    _MDPlistContainerAddBooleanValue();
    _MDPlistContainerEndDictionary();
    ++*(_DWORD *)(a1 + 52);
  }
}

uint64_t transfer_bundles_match(uint64_t *a1, uint64_t a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = HIDWORD(*a1);
  unsigned int v5 = *(_DWORD *)(a2 + 72);
  if ((*(unsigned char *)(a2 + 24) & 2) == 0 && *(_DWORD *)(a2 + 4 * --v5 + 76) == v4) {
    LODWORD(v4) = *a1;
  }
  if (!v5) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 4 * v5;
  while (v4 != *(_DWORD *)(a2 + v6 + 76))
  {
    v6 += 4;
    if (v7 == v6) {
      return 0;
    }
  }
  uint64_t v25 = 0;
  unint64_t v26 = 0;
  if (db_get_field(*(int **)(a2 + 16), (uint64_t)a1, "_kMDItemExternalID", &v26, &v25)
    || (*(void *)long long buf = 0, db_get_field(*(int **)(a2 + 16), (uint64_t)a1, "_kMDItemBundleID", &v26, buf))
    || ((*(_WORD *)(v26 + 2) & 0x10) != 0
      ? (BOOL v10 = db_get_string_for_id(*(int **)(a2 + 16), *(_DWORD *)(v26 + 13)) != 0)
      : (BOOL v10 = 1),
        !v25 || !v10))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *a1;
      *(_DWORD *)long long buf = 134217984;
      *(void *)&void buf[4] = v13;
      _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "### transfer oid: 0x%llx - could not resolve bundle and identifier", buf, 0xCu);
    }
    return 0;
  }
  ++*(void *)(a2 + 40);
  unsigned int v11 = decodeDBOToDictionary(*(int **)(a2 + 16), (uint64_t)a1, 0, 0, 0, 0, 0, 0, 2, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  CFDictionaryRef v12 = v11;
  if (*(void *)(a2 + 8))
  {
    transfer_index_if_needed(a2, v11);
  }
  else
  {
    CFIndex Count = CFDictionaryGetCount(v11);
    MEMORY[0x1F4188790](Count);
    int v15 = (CFTypeRef *)((char *)&v25 - ((8 * Count + 15) & 0xFFFFFFFFFFFFFFF0));
    bzero(v15, 8 * Count);
    MEMORY[0x1F4188790](v16);
    uint64_t v17 = v15;
    bzero(v15, 8 * Count);
    CFDictionaryGetKeysAndValues(v12, v15, v15);
    if (Count >= 1)
    {
      do
      {
        CFTypeRef v18 = *v15;
        if (!CFEqual(*v15, @"_kMDItemBundleID") && !CFEqual(v18, @"_kMDItemExternalID"))
        {
          CFTypeID v19 = CFGetTypeID(*v17);
          if (v19 != CFArrayGetTypeID()) {
            CFDictionaryGetTypeID();
          }
        }
        ++v17;
        ++v15;
        --Count;
      }
      while (Count);
    }
  }
  CFRelease(v12);
  if (*(unsigned char *)(a2 + 24)) {
    return 0;
  }
  uint64_t v20 = a1[4];
  if (!v20) {
    return 1;
  }
  uint64_t v21 = si_indexForDocId(*(void *)a2, a1[4]);
  if (!v21) {
    return 1;
  }
  uint64_t v22 = v21;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v23 = *a1;
    *(_DWORD *)long long buf = 134218240;
    *(void *)&void buf[4] = v23;
    __int16 v28 = 2048;
    uint64_t v29 = v20;
    _os_log_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "### index delete oid: 0x%llx did: 0x%llx", buf, 0x16u);
    uint64_t v20 = a1[4];
  }
  uint64_t v24 = *a1;
  uint64_t v8 = 1;
  _CIDelete(v22, v20, v24, 1);
  return v8;
}

void _SIDeleteBundles(uint64_t a1, const __CFArray *a2, unsigned int a3, const void *a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CFTypeID v19 = 0;
    _os_log_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "### delete bundles journal start", v19, 2u);
  }
  if (a2) {
    CFIndex Count = CFArrayGetCount(a2);
  }
  else {
    CFIndex Count = 0;
  }
  uint64_t v9 = (unsigned int *)malloc_type_calloc(1uLL, 4 * Count + 52, 0xE39A44C2uLL);
  *(void *)uint64_t v9 = a1;
  v9[4] = a3;
  if (a4) {
    *((void *)v9 + 3) = _Block_copy(a4);
  }
  if (Count)
  {
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        bzero(v19, 0x400uLL);
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, i);
        if (CFStringGetCString(ValueAtIndex, (char *)v19, 1024, 0x8000100u))
        {
          int v12 = strlen((const char *)v19);
          unsigned int v13 = bundleIdHash((uint64_t)v19, v12 + 1);
          uint64_t v14 = v9[11];
          v9[11] = v14 + 1;
          v9[v14 + 12] = v13;
        }
      }
    }
    uint64_t v15 = v9[11];
    if ((a3 & 2) == 0 && v15)
    {
      unsigned int v16 = bundleIdHash((uint64_t)"com.com.apple.searchd", 21);
      v9[11] = v15 + 1;
      v9[v15 + 12] = v16;
      LODWORD(v15) = v15 + 1;
    }
    if (!a1) {
      goto LABEL_25;
    }
  }
  else
  {
    LODWORD(v15) = v9[11];
    if (!a1)
    {
LABEL_25:
      v9[10] = 22;
      void v9[5] = 18;
      uint64_t v17 = v9;
      int v18 = 1;
      goto LABEL_26;
    }
  }
  if (!v15 || !*(unsigned char *)(a1 + 2064) || !*(void *)(a1 + 1040)) {
    goto LABEL_25;
  }
  *((void *)v9 + 1) = *(void *)(a1 + 1184);
  if ((a3 & 4) == 0)
  {
    void v9[5] = 0;
    si_enqueue_work(*(void *)(a1 + 1040), (uint64_t)si_deleteBundleItems, (uint64_t)v9);
    return;
  }
  void v9[5] = 18;
  uint64_t v17 = v9;
  int v18 = 0;
LABEL_26:
  si_deleteBundleItems(v17, v18);
}

void si_deleteBundleItems(unsigned int *a1, int a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    int v3 = a1[10];
    if (!v3)
    {
      a1[10] = 89;
      int v3 = 89;
    }
  }
  else
  {
    unsigned __int8 v33 = 0;
    unint64_t v4 = db_clear_docids_setup(*((int **)a1 + 1));
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v35 = 0u;
    uint64_t v5 = 0;
    memset(buf, 0, sizeof(buf));
    do
    {
      if (v5 != a1[5]) {
        buf[v5] = si_scheduler_suspend(*(void *)(*(void *)a1 + 8 * v5 + 864));
      }
      ++v5;
    }
    while (v5 != 18);
    int v6 = atomic_fetch_add_explicit(exceptionSequenceNum, 1u, memory_order_relaxed) + 1;
    unint64_t v7 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v6);
    unsigned int v31 = HIDWORD(v7);
    unsigned int v32 = v7;
    unint64_t v30 = __PAIR64__(v8, v9);
    uint64_t v10 = *(void *)&threadData[18 * v7 + 2];
    uint64_t v11 = v10 + 320 * HIDWORD(v7);
    int v12 = *(_DWORD *)(v11 + 312);
    unsigned int v13 = *(void (**)(void))(v11 + 224);
    if (v13) {
      v13(*(void *)(v10 + 320 * HIDWORD(v7) + 288));
    }
    unsigned int v29 = v32;
    unsigned int v28 = v31;
    unint64_t v27 = v30;
    if (_setjmp((int *)v11))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)unint64_t v26 = 0;
        _os_log_error_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Caught mach exception", v26, 2u);
      }
      *(_DWORD *)(v11 + 312) = v12;
      CIOnThreadCleanUpReset(v27);
      dropThreadId(v29, 1, v6);
      CICleanUpReset(v29, HIDWORD(v27));
      int v14 = 0;
    }
    else
    {
      int v14 = db_clear_docids_matching_bundles(*((_DWORD **)a1 + 1), v4, *(_DWORD **)(*(void *)a1 + 6584), a1 + 12, a1[11], (unsigned int (*)(void *, uint64_t))delete_bundles_match, (uint64_t)a1);
      unsigned __int8 v33 = 1;
      uint64_t v15 = *(void *)&threadData[18 * v29 + 2];
      unsigned int v16 = v28;
      uint64_t v17 = v15 + 320 * v28;
      *(_DWORD *)(v17 + 312) = v12;
      int v18 = *(void (**)(void))(v17 + 232);
      if (v18) {
        v18(*(void *)(v15 + 320 * v16 + 288));
      }
      dropThreadId(v29, 0, v6);
    }
    int v19 = v33;
    db_clear_docids_cleanup(*((int **)a1 + 1), v4);
    for (uint64_t i = 0; i != -18; --i)
    {
      if (i + 17 != a1[5]) {
        si_scheduler_resume(*(void *)(*(void *)a1 + 8 * i + 1000), *((void **)&v41 + i + 1), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 32120);
      }
    }
    if (v19) {
      int v21 = v14;
    }
    else {
      int v21 = -1;
    }
    if (a1[10]) {
      BOOL v22 = 1;
    }
    else {
      BOOL v22 = v21 == 0;
    }
    int v23 = a1[10];
    if (!v22)
    {
      a1[10] = v21;
      int v23 = v21;
    }
    int v3 = v23;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v24 = *((void *)a1 + 4);
    LODWORD(buf[0]) = 67109376;
    HIDWORD(buf[0]) = v3;
    LOWORD(buf[1]) = 2048;
    *(void *)((char *)&buf[1] + 2) = v24;
    _os_log_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "### delete bundles complete res:%d matches:%lu", (uint8_t *)buf, 0x12u);
  }
  uint64_t v25 = *((void *)a1 + 3);
  if (v25)
  {
    (*(void (**)(uint64_t, void))(v25 + 16))(v25, a1[10]);
    _Block_release(*((const void **)a1 + 3));
  }
  free(a1);
}

uint64_t delete_bundles_match(uint64_t *a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = HIDWORD(*a1);
  unsigned int v5 = *(_DWORD *)(a2 + 44);
  if ((*(unsigned char *)(a2 + 16) & 2) == 0 && *(_DWORD *)(a2 + 4 * --v5 + 48) == v4) {
    LODWORD(v4) = *a1;
  }
  if (!v5) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 4 * v5;
  while (v4 != *(_DWORD *)(a2 + v6 + 48))
  {
    v6 += 4;
    if (v7 == v6) {
      return 0;
    }
  }
  uint64_t v20 = 0;
  unint64_t v21 = 0;
  uint64_t string_for_id = 0;
  if (!db_get_field(*(int **)(a2 + 8), (uint64_t)a1, "_kMDItemExternalID", &v21, &v20))
  {
    *(void *)long long buf = 0;
    uint64_t string_for_id = 0;
    if (!db_get_field(*(int **)(a2 + 8), (uint64_t)a1, "_kMDItemBundleID", &v21, buf))
    {
      if ((*(_WORD *)(v21 + 2) & 0x10) != 0) {
        uint64_t string_for_id = db_get_string_for_id(*(int **)(a2 + 8), *(_DWORD *)(v21 + 13));
      }
      else {
        uint64_t string_for_id = v21 + 13;
      }
    }
  }
  ++*(void *)(a2 + 32);
  int v9 = *(_DWORD *)(a2 + 16);
  BOOL v10 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    if (v10)
    {
      uint64_t v17 = *a1;
      uint64_t v18 = a1[4];
      *(_DWORD *)long long buf = 134218754;
      *(void *)&void buf[4] = v17;
      __int16 v23 = 2048;
      uint64_t v24 = v18;
      __int16 v25 = 2080;
      uint64_t v26 = string_for_id;
      __int16 v27 = 2080;
      uint64_t v28 = v20;
      _os_log_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "### delete oid: 0x%llx did: 0x%llx %s %s", buf, 0x2Au);
    }
    return 0;
  }
  if (v10)
  {
    uint64_t v11 = *a1;
    uint64_t v12 = a1[4];
    *(_DWORD *)long long buf = 134218754;
    *(void *)&void buf[4] = v11;
    __int16 v23 = 2048;
    uint64_t v24 = v12;
    __int16 v25 = 2080;
    uint64_t v26 = string_for_id;
    __int16 v27 = 2080;
    uint64_t v28 = v20;
    _os_log_impl(&dword_1BD672000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "### delete oid: 0x%llx did: 0x%llx %s %s", buf, 0x2Au);
  }
  uint64_t v13 = a1[4];
  if (!v13) {
    return 1;
  }
  uint64_t v14 = si_indexForDocId(*(void *)a2, a1[4]);
  if (!v14) {
    return 1;
  }
  uint64_t v15 = *a1;
  uint64_t v16 = 1;
  _CIDelete(v14, v13, v15, 1);
  return v16;
}

uint64_t *_SIGetDocumentCount(uint64_t a1, void *a2, void *a3)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  itemCounts(*(uint64_t **)(a1 + 1384), &v10, &v8);
  uint64_t result = itemCounts(*(uint64_t **)(a1 + 1376), &v9, &v7);
  if (a3) {
    *a3 = v7 + v8;
  }
  if (a2) {
    *a2 = v9 + v10 - (v7 + v8);
  }
  return result;
}

uint64_t SIExecuteResumeActivityCallback(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = *(void *)(result + 2352);
    if (v2)
    {
      int v3 = *(uint64_t (**)(uint64_t))(v2 + 136);
      if (v3) {
        return v3(a2);
      }
    }
  }
  return result;
}

uint64_t _SIGetFieldNameForId(uint64_t a1, int a2)
{
  if (a1 && (uint64_t v2 = *(int **)(a1 + 1184)) != 0) {
    return db_get_field_name_for_id(v2, a2);
  }
  else {
    return 0;
  }
}

uint64_t _SISetVectorIndexDropCallback(uint64_t result)
{
  sVectorIndexDropCallbacCFIndex k = result;
  return result;
}

uint64_t unicode_combinable(unsigned int a1)
{
  if (a1 < 0x300) {
    return 0;
  }
  int v1 = __CFUniCharCombiningBitmap[(unint64_t)a1 >> 8];
  if (!__CFUniCharCombiningBitmap[(unint64_t)a1 >> 8]) {
    return 0;
  }
  if (v1 == 255) {
    return 1;
  }
  return (__CFUniCharCombiningBitmap[(a1 >> 3) + 256 + 32 * v1 - 32] >> (a1 & 7)) & 1;
}

uint64_t map_case(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 > 0x7F)
  {
    if ((unsigned __int16)(a1 + 223) < 0x3Au || a1 < 0x587 || (unsigned __int16)(a1 - 7680) <= 0x6E9u)
    {
      int __key = (unsigned __int16)a1;
      int v3 = (unsigned __int16 *)bsearch(&__key, &case_mapping_table, 0x57AuLL, 4uLL, (int (__cdecl *)(const void *, const void *))case_cmp);
      if (v3) {
        return v3[1];
      }
    }
  }
  else
  {
    if ((a1 - 97) > 0x19) {
      uint64_t v2 = (unsigned __int8 *)tolower_map;
    }
    else {
      uint64_t v2 = toupper_map;
    }
    return v2[a1];
  }
  return v1;
}

uint64_t case_cmp(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 - *a2;
}

uint64_t _SICrashStateDump(const char *a1, FILE *a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  int v45 = 0;
  time_t v43 = 0;
  time_t v44 = -1;
  time_t v41 = -1;
  size_t size = 0;
  time_t v40 = 0;
  int v3 = open(a1, 256);
  if (v3 == -1)
  {
    __error();
    fprintf(a2, "Failed to open file %s. errno = %d\n");
    return 0xFFFFFFFFLL;
  }
  else
  {
    int v4 = v3;
    int v5 = 0;
    int v35 = 0;
    time_t v36 = -1;
    time_t v32 = -1;
    unsigned int v34 = a2;
    int v33 = v3;
    while (read(v4, &v45, 4uLL) == 4)
    {
      if (v45 == 1127364148)
      {
        char v6 = 1;
      }
      else
      {
        if (v45 != 875967043)
        {
          fprintf(a2, "Invalid crash file. magic=0x%x\n");
          return 0xFFFFFFFFLL;
        }
        char v6 = 0;
        int v45 = 1127364148;
      }
      if (read(v4, &size, 8uLL) != 8)
      {
        fprintf(a2, "Invalid header. len=%ld\n");
        return 0xFFFFFFFFLL;
      }
      uint64_t v7 = (char *)malloc_type_malloc(size, 0xA4F8FEEBuLL);
      if (!v7)
      {
        fwrite("Malloc failed\n", 0xEuLL, 1uLL, a2);
        return 4294967294;
      }
      uint64_t v8 = v7;
      ssize_t v9 = read(v4, v7, size);
      if (v9 != size)
      {
        fprintf(a2, "Read failed. len=%ld\n");
LABEL_37:
        free(v8);
        return 4294967294;
      }
      if (v9 <= 5)
      {
        fprintf(a2, "Read failed: len=%ld<6\n");
        goto LABEL_37;
      }
      int v39 = v5;
      if ((v6 & 1) == 0)
      {
        for (uint64_t i = 0; i != 48; i += 16)
          *(int8x16_t *)&v8[i] = vrev64q_s8(*(int8x16_t *)&v8[i]);
      }
      v8[v9 - 1] = 0;
      uint64_t v11 = *(void *)v8;
      uint64_t v12 = (const void *)*((void *)v8 + 1);
      uint64_t v13 = *((void *)v8 + 2);
      v46[0] = *((void *)v8 + 3);
      size_t v15 = *((void *)v8 + 4);
      size_t v14 = *((void *)v8 + 5);
      uint64_t v16 = malloc_type_malloc(v15, 0xD464FEB2uLL);
      uint64_t v17 = malloc_type_malloc(v14, 0x1CB9FE96uLL);
      int v19 = v8 + 48;
      int v18 = v8[48];
      uint64_t v37 = v13;
      long long v38 = v12;
      if (v18 == 43)
      {
        int v19 = v8 + 49;
        ++v35;
        time_t v40 = v46[0];
        if (v32 == -1)
        {
          time_t v41 = v46[0];
          uint64_t v20 = -49;
          time_t v32 = v46[0];
        }
        else
        {
          uint64_t v20 = -49;
        }
      }
      else
      {
        uint64_t v20 = -48;
      }
      size_t v21 = v20 - (v14 + v15) + size;
      BOOL v22 = malloc_type_malloc(v21, 0xE4B289A5uLL);
      if (v16) {
        memcpy(v16, v19, v15);
      }
      __int16 v23 = &v19[v15];
      if (v17) {
        memcpy(v17, v23, v14);
      }
      if (v22) {
        memcpy(v22, &v23[v14], v21);
      }
      time_t v43 = v46[0];
      if (v36 == -1)
      {
        time_t v44 = v46[0];
        time_t v36 = v46[0];
      }
      int v5 = v39 + 1;
      *(void *)long long v48 = 0;
      uint64_t v49 = 0;
      __int16 v51 = 0;
      uint64_t v50 = 0;
      uint64_t v24 = localtime(v46);
      strftime(v48, 0x1AuLL, "%Y-%m-%d %H:%M:%S%z", v24);
      BOOL v31 = v18 == 43;
      a2 = v34;
      fprintf(v34, "[%16s] crashed pc:0x%08lx, addr:%p, sig:0x%08lx, compact:%d, build:%s, spotlight_version:%s, path:%s\n", v48, v11, v38, v37, v31, (const char *)v16, (const char *)v17, (const char *)v22);
      free(v16);
      free(v17);
      free(v22);
      free(v8);
      int v4 = v33;
    }
    if (v5)
    {
      *(void *)long long v48 = 0;
      uint64_t v49 = 0;
      __int16 v51 = 0;
      uint64_t v50 = 0;
      __int16 v25 = localtime(&v43);
      strftime(v48, 0x1AuLL, "%Y-%m-%d %H:%M:%S%z", v25);
      if (v5 == 1)
      {
        fprintf(a2, "Detected crash at %s\n");
      }
      else
      {
        memset(v46, 0, sizeof(v46));
        __int16 v47 = 0;
        __int16 v27 = localtime(&v44);
        strftime((char *)v46, 0x1AuLL, "%Y-%m-%d %H:%M:%S%z", v27);
        if (v43 <= v44) {
          double v28 = 1.79769313e308;
        }
        else {
          double v28 = (double)(24 * v5) * 3600.0 / (double)(v43 - v44);
        }
        fprintf(a2, "Detected %d crashes from %s to %s in total. crash rate %.2f/day\n", v5, (const char *)v46, v48, v28);
        if (v35 >= 1)
        {
          uint64_t v29 = localtime(&v40);
          strftime(v48, 0x1AuLL, "%Y-%m-%d %H:%M:%S%z", v29);
          if (v35 == 1)
          {
            fprintf(a2, "Detected compact crash at %s\n");
          }
          else
          {
            unint64_t v30 = localtime(&v41);
            strftime((char *)v46, 0x1AuLL, "%Y-%m-%d %H:%M:%S%z", v30);
            fprintf(a2, "Detected %d compact crashes from %s to %s in total. compact crash rate %.2f/day\n");
          }
        }
      }
    }
    else
    {
      fwrite("No crash detected\n", 0x12uLL, 1uLL, a2);
    }
    close(v4);
    return 0;
  }
}

void ScopeLogger::ScopeLogger(ScopeLogger *this, const char *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  *(void *)this = a2;
  int v4 = *__error();
  int v5 = _SILogForLogForCategory(8);
  os_log_type_t v6 = 2 * (dword_1E9FC90C4 < 4);
  if (os_log_type_enabled(v5, v6))
  {
    LODWORD(v7.tv_sec) = 136315138;
    *(__darwin_time_t *)((char *)&v7.tv_sec + 4) = (__darwin_time_t)a2;
    _os_log_impl(&dword_1BD672000, v5, v6, "%s entry", (uint8_t *)&v7, 0xCu);
  }
  *__error() = v4;
  v7.__darwin_time_t tv_sec = 0;
  v7.tv_nsec = 0;
  clock_gettime(_CLOCK_REALTIME, &v7);
  *((void *)this + 1) = v7.tv_nsec + 1000000000 * v7.tv_sec;
}

void DocStore::DocStore(DocStore *this, int a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = -1;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 850045863;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 1;
  operator new();
}

void DocStore::~DocStore(DocStore *this)
{
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    int v3 = (void *)v2[7];
    if (v3)
    {
      v2[8] = v3;
      operator delete(v3);
    }
    int v4 = (void *)v2[4];
    if (v4)
    {
      v2[5] = v4;
      operator delete(v4);
    }
    int v5 = (void *)v2[1];
    if (v5)
    {
      _OWORD v2[2] = v5;
      operator delete(v5);
    }
    MEMORY[0x1C1881000](v2, 0x1010C40CE421770);
  }
  int v6 = *((_DWORD *)this + 1);
  if ((v6 & 0x80000000) == 0) {
    close(v6);
  }
  uint64_t v7 = *((void *)this + 23);
  if (v7)
  {
    FileBackedBloomMap::unmap(*((FileBackedBloomMap **)this + 23));
    MEMORY[0x1C1881000](v7, 0x1010C4095F1AE09);
  }
  int v8 = *((_DWORD *)this + 44);
  if ((v8 & 0x80000000) == 0) {
    close(v8);
  }
  ssize_t v9 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v11);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 40));
  uint64_t v12 = *((void *)this + 2);
  if (v12)
  {
    uint64_t v13 = *((void *)this + 3);
    size_t v14 = (void *)*((void *)this + 2);
    if (v13 != v12)
    {
      do
      {
        if (*(char *)(v13 - 9) < 0) {
          operator delete(*(void **)(v13 - 32));
        }
        v13 -= 32;
      }
      while (v13 != v12);
      size_t v14 = (void *)*((void *)this + 2);
    }
    *((void *)this + 3) = v12;
    operator delete(v14);
  }
}

void ScopeLogger::~ScopeLogger(ScopeLogger *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *(void *)ssize_t v9 = 0;
  *(void *)&v9[8] = 0;
  clock_gettime(_CLOCK_REALTIME, (timespec *)v9);
  uint64_t v2 = *(void *)v9;
  uint64_t v3 = *(void *)&v9[8];
  int v4 = *__error();
  int v5 = _SILogForLogForCategory(8);
  os_log_type_t v6 = 2 * (dword_1E9FC90C4 < 4);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = *(void *)this;
    double v8 = (double)(unint64_t)(v3 + 1000000000 * v2 - *((void *)this + 1)) * 0.000001;
    *(_DWORD *)ssize_t v9 = 136315394;
    *(void *)&v9[4] = v7;
    *(_WORD *)&v9[12] = 2048;
    *(double *)&v9[14] = v8;
    _os_log_impl(&dword_1BD672000, v5, v6, "%s exit; call took %.6fms", v9, 0x16u);
  }
  *__error() = v4;
}

void std::__shared_weak_count::__release_shared[abi:nn180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

int *DocStore::init_file_backed_bloom_map(int *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!*((void *)this + 23))
  {
    uint64_t v1 = (uint64_t)this;
    strcpy(path, "tmp.XXXXXX");
    int v2 = mkstempsat_np(*this, path, 0);
    if ((v2 & 0x80000000) == 0)
    {
      int v3 = v2;
      unlinkat(*(_DWORD *)v1, path, 0);
      *(_DWORD *)(v1 + 176) = v3;
      *(void *)(v1 + 184) = 0;
      operator new();
    }
    int v4 = *__error();
    int v5 = *__error();
    os_log_type_t v6 = _SILogForLogForCategory(8);
    os_log_type_t v7 = dword_1E9FC90C4 < 3;
    if (os_log_type_enabled(v6, (os_log_type_t)(dword_1E9FC90C4 < 3)))
    {
      int v8 = 136315138;
      ssize_t v9 = strerror(v4);
      _os_log_impl(&dword_1BD672000, v6, v7, "*warn* init_file_backed_bloom_map: mkstempsat_np: %s", (uint8_t *)&v8, 0xCu);
    }
    this = __error();
    *this = v5;
  }
  return this;
}

uint64_t std::__throw_bad_optional_access[abi:nn180100]()
{
  return std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>();
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(unint64_t a1, __n128 *a2, uint64_t a3, char a4)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  while (2)
  {
    uint64_t v10 = &a2[-2].n128_u64[1];
    double v96 = a2 - 3;
    uint64_t v98 = a2;
    uint64_t v11 = &a2[-5].n128_u64[1];
    uint64_t v12 = (__n128 *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v12) >> 3);
          if (v5 || !v4)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (std::less<std::string>::operator()[abi:nn180100](v10, (void *)a1))
                {
                  __n128 v41 = *(__n128 *)a1;
                  unint64_t v100 = *(void *)(a1 + 16);
                  __n128 v99 = v41;
                  long long v42 = *(_OWORD *)v10;
                  *(void *)(a1 + 16) = v10[2];
                  *(_OWORD *)a1 = v42;
                  __n128 v43 = v99;
                  void v10[2] = v100;
                  *(__n128 *)uint64_t v10 = v43;
                }
                break;
              case 3uLL:
                std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((void *)a1, (void *)(a1 + 24), v10);
                break;
              case 4uLL:
                std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((__n128 *)a1, (void *)(a1 + 24), (void *)(a1 + 48), v10);
                break;
              case 5uLL:
                std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((__n128 *)a1, (void *)(a1 + 24), (void *)(a1 + 48), (void *)(a1 + 72), v10);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v13 <= 575)
          {
            time_t v44 = (__n128 *)(a1 + 24);
            BOOL v46 = (__n128 *)a1 == a2 || v44 == a2;
            if (a4)
            {
              if (!v46)
              {
                uint64_t v47 = 0;
                n128_u64 = (void *)a1;
                do
                {
                  uint64_t v49 = n128_u64;
                  n128_u64 = v44->n128_u64;
                  if (std::less<std::string>::operator()[abi:nn180100](v44, v49))
                  {
                    __n128 v50 = *(__n128 *)n128_u64;
                    unint64_t v100 = n128_u64[2];
                    __n128 v99 = v50;
                    n128_u64[1] = 0;
                    n128_u64[2] = 0;
                    void *n128_u64 = 0;
                    uint64_t v51 = v47;
                    while (1)
                    {
                      uint64_t v52 = a1 + v51;
                      *(_OWORD *)(v52 + 24) = *(_OWORD *)(a1 + v51);
                      *(void *)(v52 + 40) = *(void *)(a1 + v51 + 16);
                      *(unsigned char *)(v52 + 23) = 0;
                      *(unsigned char *)uint64_t v52 = 0;
                      if (!v51) {
                        break;
                      }
                      v51 -= 24;
                      if (!std::less<std::string>::operator()[abi:nn180100](&v99, (void *)(v51 + a1)))
                      {
                        uint64_t v53 = a1 + v51 + 24;
                        goto LABEL_88;
                      }
                    }
                    uint64_t v53 = a1;
LABEL_88:
                    __n128 v54 = v99;
                    *(void *)(v53 + 16) = v100;
                    *(__n128 *)uint64_t v53 = v54;
                  }
                  time_t v44 = (__n128 *)(n128_u64 + 3);
                  v47 += 24;
                }
                while (n128_u64 + 3 != (void *)a2);
              }
            }
            else if (!v46)
            {
              do
              {
                int64_t v89 = (void *)a1;
                a1 = (unint64_t)v44;
                if (std::less<std::string>::operator()[abi:nn180100](v44, v89))
                {
                  __n128 v90 = *(__n128 *)a1;
                  unint64_t v100 = *(void *)(a1 + 16);
                  __n128 v99 = v90;
                  *(void *)(a1 + 8) = 0;
                  *(void *)(a1 + 16) = 0;
                  *(void *)a1 = 0;
                  unint64_t v91 = a1;
                  do
                  {
                    unint64_t v92 = v91 - 24;
                    *(_OWORD *)unint64_t v91 = *(_OWORD *)(v91 - 24);
                    *(void *)(v91 + 16) = *(void *)(v91 - 8);
                    *(unsigned char *)(v91 - 1) = 0;
                    *(unsigned char *)(v91 - 24) = 0;
                    BOOL v93 = std::less<std::string>::operator()[abi:nn180100](&v99, (void *)(v91 - 48));
                    unint64_t v91 = v92;
                  }
                  while (v93);
                  __n128 v94 = v99;
                  *(void *)(v92 + 16) = v100;
                  *(__n128 *)unint64_t v92 = v94;
                }
                time_t v44 = (__n128 *)(a1 + 24);
              }
              while ((__n128 *)(a1 + 24) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((__n128 *)a1 != a2)
            {
              int64_t v55 = (v14 - 2) >> 1;
              int64_t v56 = v55;
              do
              {
                int64_t v57 = v56;
                if (v55 >= v56)
                {
                  uint64_t v58 = (2 * v56) | 1;
                  unint64_t v59 = a1 + 24 * v58;
                  if (2 * v56 + 2 < (uint64_t)v14
                    && std::less<std::string>::operator()[abi:nn180100]((void *)(a1 + 24 * v58), (void *)(v59 + 24)))
                  {
                    v59 += 24;
                    uint64_t v58 = 2 * v57 + 2;
                  }
                  int v60 = (__n128 *)(a1 + 24 * v57);
                  a2 = v98;
                  if (!std::less<std::string>::operator()[abi:nn180100]((void *)v59, v60))
                  {
                    __n128 v61 = *v60;
                    unint64_t v100 = v60[1].n128_u64[0];
                    __n128 v99 = v61;
                    v60->n128_u64[1] = 0;
                    v60[1].n128_u64[0] = 0;
                    v60->n128_u64[0] = 0;
                    do
                    {
                      int v62 = (__n128 *)v59;
                      __n128 v63 = *(__n128 *)v59;
                      v60[1].n128_u64[0] = *(void *)(v59 + 16);
                      *int v60 = v63;
                      *(unsigned char *)(v59 + 23) = 0;
                      *(unsigned char *)unint64_t v59 = 0;
                      if (v55 < v58) {
                        break;
                      }
                      uint64_t v64 = (2 * v58) | 1;
                      unint64_t v59 = a1 + 24 * v64;
                      uint64_t v65 = 2 * v58 + 2;
                      if (v65 < (uint64_t)v14
                        && std::less<std::string>::operator()[abi:nn180100]((void *)(a1 + 24 * v64), (void *)(v59 + 24)))
                      {
                        v59 += 24;
                        uint64_t v64 = v65;
                      }
                      int v60 = v62;
                      uint64_t v58 = v64;
                    }
                    while (!std::less<std::string>::operator()[abi:nn180100]((void *)v59, &v99));
                    __n128 v66 = v99;
                    v62[1].n128_u64[0] = v100;
                    *int v62 = v66;
                    a2 = v98;
                  }
                }
                int64_t v56 = v57 - 1;
              }
              while (v57);
              int64_t v67 = v13 / 0x18uLL;
              do
              {
                BOOL v68 = a2;
                uint64_t v69 = 0;
                unint64_t v95 = *(void *)a1;
                v101.n128_u64[0] = *(void *)(a1 + 8);
                *(unint64_t *)((char *)v101.n128_u64 + 7) = *(void *)(a1 + 15);
                unsigned __int8 v97 = *(unsigned char *)(a1 + 23);
                *(void *)(a1 + 8) = 0;
                *(void *)(a1 + 16) = 0;
                *(void *)a1 = 0;
                uint64_t v70 = v67 - 2;
                if (v67 < 2) {
                  uint64_t v70 = v67 - 1;
                }
                uint64_t v71 = v70 >> 1;
                unint64_t v72 = a1;
                do
                {
                  uint64_t v73 = v72 + 24 * v69 + 24;
                  uint64_t v74 = 2 * v69;
                  uint64_t v69 = (2 * v69) | 1;
                  uint64_t v75 = v74 + 2;
                  if (v74 + 2 < v67
                    && std::less<std::string>::operator()[abi:nn180100]((void *)v73, (void *)(v73 + 24)))
                  {
                    v73 += 24;
                    uint64_t v69 = v75;
                  }
                  if (*(char *)(v72 + 23) < 0) {
                    operator delete(*(void **)v72);
                  }
                  __n128 v76 = *(__n128 *)v73;
                  *(void *)(v72 + 16) = *(void *)(v73 + 16);
                  *(__n128 *)unint64_t v72 = v76;
                  *(unsigned char *)(v73 + 23) = 0;
                  *(unsigned char *)uint64_t v73 = 0;
                  unint64_t v72 = v73;
                }
                while (v69 <= v71);
                a2 = (__n128 *)((char *)v68 - 24);
                if ((__int8 *)v73 == &v68[-2].n128_i8[8])
                {
                  *(void *)uint64_t v73 = v95;
                  uint64_t v87 = *(uint64_t *)((char *)v101.n128_i64 + 7);
                  *(void *)(v73 + 8) = v101.n128_u64[0];
                  *(void *)(v73 + 15) = v87;
                  *(unsigned char *)(v73 + 23) = v97;
                  int64_t v80 = v67 - 1;
                }
                else
                {
                  __n128 v77 = *a2;
                  *(void *)(v73 + 16) = v68[-1].n128_u64[1];
                  *(__n128 *)uint64_t v73 = v77;
                  v68[-2].n128_u64[1] = v95;
                  unint64_t v78 = v101.n128_u64[0];
                  *(unint64_t *)((char *)v68[-1].n128_u64 + 7) = *(unint64_t *)((char *)v101.n128_u64 + 7);
                  v68[-1].n128_u64[0] = v78;
                  v68[-1].n128_u8[15] = v97;
                  uint64_t v79 = v73 - a1 + 24;
                  int64_t v80 = v67 - 1;
                  if (v79 >= 25)
                  {
                    unint64_t v81 = (unint64_t)(-2 - 0x5555555555555555 * (v79 >> 3)) >> 1;
                    unint64_t v82 = a1 + 24 * v81;
                    if (std::less<std::string>::operator()[abi:nn180100]((void *)v82, (void *)v73))
                    {
                      __n128 v83 = *(__n128 *)v73;
                      unint64_t v100 = *(void *)(v73 + 16);
                      __n128 v99 = v83;
                      *(void *)(v73 + 8) = 0;
                      *(void *)(v73 + 16) = 0;
                      *(void *)uint64_t v73 = 0;
                      do
                      {
                        uint64_t v84 = v82;
                        long long v85 = *(_OWORD *)v82;
                        *(void *)(v73 + 16) = *(void *)(v82 + 16);
                        *(_OWORD *)uint64_t v73 = v85;
                        *(unsigned char *)(v82 + 23) = 0;
                        *(unsigned char *)unint64_t v82 = 0;
                        if (!v81) {
                          break;
                        }
                        unint64_t v81 = (v81 - 1) >> 1;
                        unint64_t v82 = a1 + 24 * v81;
                        uint64_t v73 = v84;
                      }
                      while (std::less<std::string>::operator()[abi:nn180100]((void *)v82, &v99));
                      __n128 v86 = v99;
                      *(void *)(v84 + 16) = v100;
                      *(__n128 *)uint64_t v84 = v86;
                    }
                  }
                }
                BOOL v88 = v67 <= 2;
                int64_t v67 = v80;
              }
              while (!v88);
            }
            return;
          }
          size_t v15 = (void *)(a1 + 24 * (v14 >> 1));
          if ((unint64_t)v13 >= 0xC01)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((void *)a1, (void *)(a1 + 24 * (v14 >> 1)), v10);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((void *)(a1 + 24), (void *)(a1 + 24 * (v14 >> 1) - 24), v96);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((void *)(a1 + 48), (void *)(a1 + 24 + 24 * (v14 >> 1)), v11);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((void *)(a1 + 24 * (v14 >> 1) - 24), v15, (void *)(a1 + 24 + 24 * (v14 >> 1)));
            __n128 v16 = *(__n128 *)a1;
            unint64_t v100 = *(void *)(a1 + 16);
            __n128 v99 = v16;
            uint64_t v17 = v15[2];
            *(_OWORD *)a1 = *(_OWORD *)v15;
            *(void *)(a1 + 16) = v17;
            __n128 v18 = v99;
            int v15[2] = v100;
            *(__n128 *)size_t v15 = v18;
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((void *)(a1 + 24 * (v14 >> 1)), (void *)a1, v10);
          }
          --a3;
          a2 = v98;
          if ((a4 & 1) != 0 || std::less<std::string>::operator()[abi:nn180100]((void *)(a1 - 24), (void *)a1)) {
            break;
          }
          __n128 v31 = *(__n128 *)a1;
          unint64_t v102 = *(void *)(a1 + 16);
          __n128 v101 = v31;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          if (std::less<std::string>::operator()[abi:nn180100](&v101, v10))
          {
            uint64_t v12 = (__n128 *)a1;
            do
              uint64_t v12 = (__n128 *)((char *)v12 + 24);
            while (!std::less<std::string>::operator()[abi:nn180100](&v101, v12));
          }
          else
          {
            time_t v32 = (__n128 *)(a1 + 24);
            do
            {
              uint64_t v12 = v32;
              if (v32 >= v98) {
                break;
              }
              BOOL v33 = std::less<std::string>::operator()[abi:nn180100](&v101, v32);
              time_t v32 = (__n128 *)((char *)v12 + 24);
            }
            while (!v33);
          }
          unsigned int v34 = v98;
          if (v12 < v98)
          {
            unsigned int v34 = v98;
            do
              unsigned int v34 = (__n128 *)((char *)v34 - 24);
            while (std::less<std::string>::operator()[abi:nn180100](&v101, v34));
          }
          while (v12 < v34)
          {
            __n128 v35 = *v12;
            unint64_t v100 = v12[1].n128_u64[0];
            __n128 v99 = v35;
            __n128 v36 = *v34;
            v12[1].n128_u64[0] = v34[1].n128_u64[0];
            *uint64_t v12 = v36;
            __n128 v37 = v99;
            v34[1].n128_u64[0] = v100;
            *unsigned int v34 = v37;
            do
              uint64_t v12 = (__n128 *)((char *)v12 + 24);
            while (!std::less<std::string>::operator()[abi:nn180100](&v101, v12));
            do
              unsigned int v34 = (__n128 *)((char *)v34 - 24);
            while (std::less<std::string>::operator()[abi:nn180100](&v101, v34));
          }
          long long v38 = &v12[-2].n128_i8[8];
          BOOL v4 = (unint64_t)&v12[-2].n128_u64[1] >= a1;
          BOOL v5 = &v12[-2].n128_i8[8] == (__int8 *)a1;
          if (&v12[-2].n128_i8[8] == (__int8 *)a1)
          {
            if (v12[-1].n128_i8[15] < 0) {
              operator delete(*(void **)a1);
            }
          }
          else
          {
            if (*(char *)(a1 + 23) < 0) {
              operator delete(*(void **)a1);
            }
            long long v39 = *(_OWORD *)v38;
            *(void *)(a1 + 16) = v12[-1].n128_u64[1];
            *(_OWORD *)a1 = v39;
            v12[-1].n128_u8[15] = 0;
            v12[-2].n128_u8[8] = 0;
          }
          a4 = 0;
          __n128 v40 = v101;
          v12[-1].n128_u64[1] = v102;
          *(__n128 *)long long v38 = v40;
        }
        __n128 v19 = *(__n128 *)a1;
        unint64_t v102 = *(void *)(a1 + 16);
        __n128 v101 = v19;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        uint64_t v20 = (__n128 *)a1;
        do
        {
          size_t v21 = v20;
          uint64_t v20 = (__n128 *)((char *)v20 + 24);
        }
        while (std::less<std::string>::operator()[abi:nn180100](v20, &v101));
        BOOL v22 = v98;
        if (v21 == (__n128 *)a1)
        {
          BOOL v22 = v98;
          do
          {
            if (v20 >= v22) {
              break;
            }
            BOOL v22 = (__n128 *)((char *)v22 - 24);
          }
          while (!std::less<std::string>::operator()[abi:nn180100](v22, &v101));
        }
        else
        {
          do
            BOOL v22 = (__n128 *)((char *)v22 - 24);
          while (!std::less<std::string>::operator()[abi:nn180100](v22, &v101));
        }
        if (v20 < v22)
        {
          __int16 v23 = v22;
          uint64_t v12 = v20;
          do
          {
            __n128 v99 = *v12;
            __n128 v24 = v99;
            unint64_t v100 = v12[1].n128_u64[0];
            unint64_t v25 = v100;
            unint64_t v26 = v23[1].n128_u64[0];
            *uint64_t v12 = *v23;
            v12[1].n128_u64[0] = v26;
            v23[1].n128_u64[0] = v25;
            *__int16 v23 = v24;
            do
              uint64_t v12 = (__n128 *)((char *)v12 + 24);
            while (std::less<std::string>::operator()[abi:nn180100](v12, &v101));
            do
              __int16 v23 = (__n128 *)((char *)v23 - 24);
            while (!std::less<std::string>::operator()[abi:nn180100](v23, &v101));
          }
          while (v12 < v23);
        }
        else
        {
          uint64_t v12 = v20;
        }
        __int16 v27 = &v12[-2].n128_i8[8];
        if (&v12[-2].n128_i8[8] == (__int8 *)a1)
        {
          if (v12[-1].n128_i8[15] < 0) {
            operator delete(*(void **)a1);
          }
        }
        else
        {
          if (*(char *)(a1 + 23) < 0) {
            operator delete(*(void **)a1);
          }
          long long v28 = *(_OWORD *)v27;
          *(void *)(a1 + 16) = v12[-1].n128_u64[1];
          *(_OWORD *)a1 = v28;
          v12[-1].n128_u8[15] = 0;
          v12[-2].n128_u8[8] = 0;
        }
        __n128 v29 = v101;
        v12[-1].n128_u64[1] = v102;
        *(__n128 *)__int16 v27 = v29;
        if (v20 >= v22) {
          break;
        }
LABEL_36:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(a1, &v12[-2].n128_i8[8], a3, a4 & 1);
        a4 = 0;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((__n128 *)a1, (__n128 *)((char *)v12 - 24));
      if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12, v98))
      {
        break;
      }
      if (!v30) {
        goto LABEL_36;
      }
    }
    a2 = (__n128 *)((char *)v12 - 24);
    if (!v30) {
      continue;
    }
    break;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,DocStore::load(analytics::OpenEvent *,BOOL)::{lambda(DocStore::ColdShardDescriptor const&,DocStore::ColdShardDescriptor const&)#1} &,DocStore::ColdShardDescriptor*,false>(uint64_t *a1, const void **a2, uint64_t a3, char a4)
{
  uint64_t v306 = *MEMORY[0x1E4F143B8];
LABEL_2:
  unint64_t v9 = (unint64_t)a1;
  int v290 = (const void **)(a1 + 8);
  int v293 = (const void **)(a1 + 4);
  int v287 = a1 - 4;
  int v288 = a1 + 1;
  while (1)
  {
    uint64_t v10 = (uint64_t)a2 - v9;
    uint64_t v11 = (uint64_t)((uint64_t)a2 - v9) >> 5;
    if (v5 || !v4)
    {
      switch(v11)
      {
        case 0:
        case 1:
          return;
        case 2:
          CFAbsoluteTime v122 = *(a2 - 4);
          uint64_t v121 = (uint64_t)(a2 - 4);
          int v120 = v122;
          int v123 = *(char *)(v9 + 23);
          int v124 = *(char *)(v121 + 23);
          if (v124 >= 0) {
            size_t v125 = *(unsigned __int8 *)(v121 + 23);
          }
          else {
            size_t v125 = *(void *)(v121 + 8);
          }
          if (v124 >= 0) {
            int64_t v126 = (const void *)v121;
          }
          else {
            int64_t v126 = v120;
          }
          if (v123 >= 0) {
            size_t v127 = *(unsigned __int8 *)(v9 + 23);
          }
          else {
            size_t v127 = *(void *)(v9 + 8);
          }
          if (v123 >= 0) {
            int v128 = (const void *)v9;
          }
          else {
            int v128 = *(const void **)v9;
          }
          if (v127 >= v125) {
            size_t v129 = v125;
          }
          else {
            size_t v129 = v127;
          }
          int v130 = memcmp(v126, v128, v129);
          BOOL v131 = v125 < v127;
          if (v130) {
            BOOL v131 = v130 < 0;
          }
          if (v131)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<DocStore::ColdShardDescriptor *&,DocStore::ColdShardDescriptor *&>((uint64_t *)v9, v121);
          }
          break;
        case 3:
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,DocStore::load(analytics::OpenEvent *,BOOL)::{lambda(DocStore::ColdShardDescriptor const&,DocStore::ColdShardDescriptor const&)#1} &,DocStore::ColdShardDescriptor*>((const void **)v9, v9 + 32, (uint64_t)(a2 - 4));
          break;
        case 4:
          std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,DocStore::load(analytics::OpenEvent *,BOOL)::{lambda(DocStore::ColdShardDescriptor const&,DocStore::ColdShardDescriptor const&)#1} &,DocStore::ColdShardDescriptor*>(v9, v9 + 32, v9 + 64, (uint64_t)(a2 - 4));
          break;
        case 5:
          std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,DocStore::load(analytics::OpenEvent *,BOOL)::{lambda(DocStore::ColdShardDescriptor const&,DocStore::ColdShardDescriptor const&)#1} &,DocStore::ColdShardDescriptor*>(v9, v9 + 32, v9 + 64, v9 + 96, (uint64_t)(a2 - 4));
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v10 <= 767) {
      break;
    }
    int v300 = a2;
    if (!a3)
    {
      if ((const void **)v9 != a2)
      {
        int64_t v160 = (unint64_t)(v11 - 2) >> 1;
        int64_t v161 = v160;
        uint64_t v286 = (uint64_t)a2 - v9;
        unint64_t v296 = v9;
        int64_t v298 = v160;
        do
        {
          int64_t v162 = v161;
          if (v10 >= 64 && v160 >= v161)
          {
            int64_t v294 = v161;
            uint64_t v163 = (2 * v161) | 1;
            unint64_t v164 = v9 + 32 * v163;
            uint64_t v165 = 2 * v161 + 2;
            if (v165 < v11)
            {
              char v166 = *(unsigned char *)(v164 + 55);
              char v167 = *(unsigned char *)(v164 + 23);
              int v289 = *(const void **)(v164 + 32);
              int v291 = *(const void **)v164;
              if (v167 >= 0) {
                size_t v168 = *(unsigned __int8 *)(v164 + 23);
              }
              else {
                size_t v168 = *(void *)(v164 + 8);
              }
              if (v167 >= 0) {
                int v169 = (const void *)(v9 + 32 * v163);
              }
              else {
                int v169 = *(const void **)v164;
              }
              if (v166 >= 0) {
                size_t v170 = *(unsigned __int8 *)(v164 + 55);
              }
              else {
                size_t v170 = *(void *)(v164 + 40);
              }
              if (v166 >= 0) {
                uint64_t v171 = (const void *)(v164 + 32);
              }
              else {
                uint64_t v171 = *(const void **)(v164 + 32);
              }
              if (v170 >= v168) {
                size_t v172 = v168;
              }
              else {
                size_t v172 = v170;
              }
              int v173 = memcmp(v169, v171, v172);
              BOOL v174 = v168 < v170;
              if (v173) {
                BOOL v174 = v173 < 0;
              }
              BOOL v5 = !v174;
              int v175 = v291;
              if (!v5)
              {
                int v175 = v289;
                v164 += 32;
                uint64_t v163 = v165;
              }
            }
            else
            {
              int v175 = *(const void **)v164;
            }
            int64_t v162 = v294;
            unint64_t v176 = v9 + 32 * v294;
            int v177 = *(char *)(v176 + 23);
            int v178 = *(char *)(v164 + 23);
            if (v178 >= 0) {
              size_t v179 = *(unsigned __int8 *)(v164 + 23);
            }
            else {
              size_t v179 = *(void *)(v164 + 8);
            }
            if (v178 >= 0) {
              CFNumberRef v180 = (const void *)v164;
            }
            else {
              CFNumberRef v180 = v175;
            }
            if (v177 >= 0) {
              size_t v181 = *(unsigned __int8 *)(v176 + 23);
            }
            else {
              size_t v181 = *(void *)(v176 + 8);
            }
            if (v177 >= 0) {
              CFNumberRef v182 = (const void *)(v9 + 32 * v294);
            }
            else {
              CFNumberRef v182 = *(const void **)v176;
            }
            if (v181 >= v179) {
              size_t v183 = v179;
            }
            else {
              size_t v183 = v181;
            }
            int v184 = memcmp(v180, v182, v183);
            BOOL v185 = v179 < v181;
            if (v184) {
              BOOL v185 = v184 < 0;
            }
            uint64_t v10 = v286;
            if (!v185)
            {
              uint64_t v305 = 0;
              long long v186 = *(_OWORD *)v176;
              uint64_t v304 = *(void *)(v176 + 16);
              long long v303 = v186;
              *(void *)(v176 + 8) = 0;
              *(void *)(v176 + 16) = 0;
              *(void *)unint64_t v176 = 0;
              LOWORD(v305) = *(_WORD *)(v9 + 32 * v294 + 24);
              do
              {
                unint64_t v187 = v164;
                if (*(char *)(v176 + 23) < 0) {
                  operator delete(*(void **)v176);
                }
                long long v188 = *(_OWORD *)v164;
                *(void *)(v176 + 16) = *(void *)(v164 + 16);
                *(_OWORD *)unint64_t v176 = v188;
                *(unsigned char *)(v164 + 23) = 0;
                *(unsigned char *)unint64_t v164 = 0;
                *(_WORD *)(v176 + 24) = *(_WORD *)(v164 + 24);
                if (v160 < v163) {
                  break;
                }
                uint64_t v189 = (2 * v163) | 1;
                unint64_t v164 = v9 + 32 * v189;
                uint64_t v163 = 2 * v163 + 2;
                if (v163 < v11)
                {
                  int v190 = *(char *)(v164 + 55);
                  int v191 = *(const void **)(v164 + 32);
                  int v192 = *(char *)(v164 + 23);
                  int v193 = *(const void **)v164;
                  if (v192 >= 0) {
                    size_t v194 = *(unsigned __int8 *)(v164 + 23);
                  }
                  else {
                    size_t v194 = *(void *)(v164 + 8);
                  }
                  if (v192 >= 0) {
                    os_log_type_t v195 = (const void *)(v9 + 32 * v189);
                  }
                  else {
                    os_log_type_t v195 = *(const void **)v164;
                  }
                  uint64_t v196 = v11;
                  if (v190 >= 0) {
                    size_t v197 = *(unsigned __int8 *)(v164 + 55);
                  }
                  else {
                    size_t v197 = *(void *)(v164 + 40);
                  }
                  if (v190 >= 0) {
                    uint64_t v198 = (const void *)(v164 + 32);
                  }
                  else {
                    uint64_t v198 = *(const void **)(v164 + 32);
                  }
                  if (v197 >= v194) {
                    size_t v199 = v194;
                  }
                  else {
                    size_t v199 = v197;
                  }
                  int v200 = memcmp(v195, v198, v199);
                  BOOL v4 = v194 >= v197;
                  uint64_t v11 = v196;
                  BOOL v201 = !v4;
                  if (v200) {
                    BOOL v201 = v200 < 0;
                  }
                  BOOL v202 = !v201;
                  int v203 = v201 ? v191 : v193;
                  unint64_t v9 = v296;
                  int64_t v160 = v298;
                  if (v202) {
                    uint64_t v163 = v189;
                  }
                  else {
                    v164 += 32;
                  }
                }
                else
                {
                  int v203 = *(const void **)v164;
                  uint64_t v163 = v189;
                }
                int v204 = *(char *)(v164 + 23);
                if (v204 >= 0) {
                  size_t v205 = *(unsigned __int8 *)(v164 + 23);
                }
                else {
                  size_t v205 = *(void *)(v164 + 8);
                }
                if (v204 >= 0) {
                  uint64_t v206 = (const void *)v164;
                }
                else {
                  uint64_t v206 = v203;
                }
                if (v304 >= 0) {
                  size_t v207 = HIBYTE(v304);
                }
                else {
                  size_t v207 = *((void *)&v303 + 1);
                }
                if (v304 >= 0) {
                  uint64_t v208 = &v303;
                }
                else {
                  uint64_t v208 = (long long *)v303;
                }
                if (v207 >= v205) {
                  size_t v209 = v205;
                }
                else {
                  size_t v209 = v207;
                }
                int v210 = memcmp(v206, v208, v209);
                BOOL v211 = v205 < v207;
                if (v210) {
                  BOOL v211 = v210 < 0;
                }
                unint64_t v176 = v187;
              }
              while (!v211);
              if (*(char *)(v187 + 23) < 0) {
                operator delete(*(void **)v187);
              }
              long long v212 = v303;
              *(void *)(v187 + 16) = v304;
              *(_OWORD *)unint64_t v187 = v212;
              *(_WORD *)(v187 + 24) = v305;
              uint64_t v10 = v286;
              int64_t v162 = v294;
            }
          }
          int64_t v161 = v162 - 1;
        }
        while (v162);
        uint64_t v213 = (unint64_t)v10 >> 5;
        uint64_t v214 = v300;
        do
        {
          if (v213 >= 2)
          {
            int v301 = v214;
            uint64_t v215 = 0;
            uint64_t v295 = *(void *)v9;
            *(void *)os_log_type_t v302 = *(void *)(v9 + 8);
            *(void *)&v302[7] = *(void *)(v9 + 15);
            char v299 = *(unsigned char *)(v9 + 23);
            *(void *)(v9 + 8) = 0;
            *(void *)(v9 + 16) = 0;
            *(void *)unint64_t v9 = 0;
            __int16 v292 = *(_WORD *)(v9 + 24);
            unint64_t v216 = v9;
            do
            {
              uint64_t v217 = v216 + 32 * v215 + 32;
              uint64_t v218 = 2 * v215;
              uint64_t v215 = (2 * v215) | 1;
              uint64_t v219 = v218 + 2;
              if (v218 + 2 < v213)
              {
                int v220 = *(char *)(v217 + 55);
                int v221 = *(char *)(v217 + 23);
                if (v221 >= 0) {
                  size_t v222 = *(unsigned __int8 *)(v217 + 23);
                }
                else {
                  size_t v222 = *(void *)(v217 + 8);
                }
                if (v221 >= 0) {
                  uint64_t v223 = (const void *)v217;
                }
                else {
                  uint64_t v223 = *(const void **)v217;
                }
                if (v220 >= 0) {
                  size_t v224 = *(unsigned __int8 *)(v217 + 55);
                }
                else {
                  size_t v224 = *(void *)(v217 + 40);
                }
                if (v220 >= 0) {
                  uint64_t v225 = (const void *)(v217 + 32);
                }
                else {
                  uint64_t v225 = *(const void **)(v217 + 32);
                }
                if (v224 >= v222) {
                  size_t v226 = v222;
                }
                else {
                  size_t v226 = v224;
                }
                int v227 = memcmp(v223, v225, v226);
                BOOL v228 = v222 < v224;
                if (v227) {
                  BOOL v228 = v227 < 0;
                }
                if (v228)
                {
                  v217 += 32;
                  uint64_t v215 = v219;
                }
              }
              if (*(char *)(v216 + 23) < 0) {
                operator delete(*(void **)v216);
              }
              long long v229 = *(_OWORD *)v217;
              *(void *)(v216 + 16) = *(void *)(v217 + 16);
              *(_OWORD *)unint64_t v216 = v229;
              *(unsigned char *)(v217 + 23) = 0;
              *(unsigned char *)uint64_t v217 = 0;
              *(_WORD *)(v216 + 24) = *(_WORD *)(v217 + 24);
              unint64_t v216 = v217;
            }
            while (v215 <= (uint64_t)((unint64_t)(v213 - 2) >> 1));
            uint64_t v214 = v301;
            int v230 = (void **)(v301 - 4);
            int v231 = *(char *)(v217 + 23);
            if ((const void **)v217 == v301 - 4)
            {
              if (v231 < 0) {
                operator delete(*(void **)v217);
              }
              *(void *)uint64_t v217 = v295;
              *(void *)(v217 + 8) = *(void *)v302;
              *(void *)(v217 + 15) = *(void *)&v302[7];
              *(unsigned char *)(v217 + 23) = v299;
              *(_WORD *)(v217 + 24) = v292;
            }
            else
            {
              if (v231 < 0) {
                operator delete(*(void **)v217);
              }
              long long v232 = *(_OWORD *)v230;
              *(void *)(v217 + 16) = *(v301 - 2);
              *(_OWORD *)uint64_t v217 = v232;
              *((unsigned char *)v301 - 9) = 0;
              *((unsigned char *)v301 - 32) = 0;
              *(_WORD *)(v217 + 24) = *((_WORD *)v301 - 4);
              if (*((char *)v301 - 9) < 0) {
                operator delete(*v230);
              }
              *(v301 - 4) = (const void *)v295;
              *(const void **)((char *)v301 - 17) = *(const void **)&v302[7];
              *(v301 - 3) = *(const void **)v302;
              *((unsigned char *)v301 - 9) = v299;
              *((_WORD *)v301 - 4) = v292;
              uint64_t v233 = v217 + 32 - v9;
              if (v233 >= 33)
              {
                unint64_t v234 = (unint64_t)((v233 >> 5) - 2) >> 1;
                unint64_t v235 = v9 + 32 * v234;
                int v236 = *(char *)(v217 + 23);
                int v237 = *(char *)(v235 + 23);
                if (v237 >= 0) {
                  size_t v238 = *(unsigned __int8 *)(v235 + 23);
                }
                else {
                  size_t v238 = *(void *)(v235 + 8);
                }
                if (v237 >= 0) {
                  uint64_t v239 = (const void *)(v9 + 32 * v234);
                }
                else {
                  uint64_t v239 = *(const void **)v235;
                }
                if (v236 >= 0) {
                  size_t v240 = *(unsigned __int8 *)(v217 + 23);
                }
                else {
                  size_t v240 = *(void *)(v217 + 8);
                }
                if (v236 >= 0) {
                  uint64_t v241 = (const void *)v217;
                }
                else {
                  uint64_t v241 = *(const void **)v217;
                }
                if (v240 >= v238) {
                  size_t v242 = v238;
                }
                else {
                  size_t v242 = v240;
                }
                int v243 = memcmp(v239, v241, v242);
                BOOL v244 = v238 < v240;
                if (v243) {
                  BOOL v244 = v243 < 0;
                }
                if (v244)
                {
                  uint64_t v305 = 0;
                  long long v245 = *(_OWORD *)v217;
                  uint64_t v304 = *(void *)(v217 + 16);
                  long long v303 = v245;
                  *(void *)(v217 + 8) = 0;
                  *(void *)(v217 + 16) = 0;
                  *(void *)uint64_t v217 = 0;
                  LOWORD(v305) = *(_WORD *)(v217 + 24);
                  if (v304 >= 0) {
                    size_t v246 = HIBYTE(v304);
                  }
                  else {
                    size_t v246 = *((void *)&v303 + 1);
                  }
                  if (v304 >= 0) {
                    int v247 = &v303;
                  }
                  else {
                    int v247 = (long long *)v303;
                  }
                  do
                  {
                    uint64_t v248 = v235;
                    if (*(char *)(v217 + 23) < 0) {
                      operator delete(*(void **)v217);
                    }
                    long long v249 = *(_OWORD *)v235;
                    *(void *)(v217 + 16) = *(void *)(v235 + 16);
                    *(_OWORD *)uint64_t v217 = v249;
                    *(unsigned char *)(v235 + 23) = 0;
                    *(unsigned char *)unint64_t v235 = 0;
                    *(_WORD *)(v217 + 24) = *(_WORD *)(v235 + 24);
                    if (!v234) {
                      break;
                    }
                    unint64_t v234 = (v234 - 1) >> 1;
                    unint64_t v235 = v9 + 32 * v234;
                    int v250 = *(char *)(v235 + 23);
                    if (v250 >= 0) {
                      size_t v251 = *(unsigned __int8 *)(v235 + 23);
                    }
                    else {
                      size_t v251 = *(void *)(v235 + 8);
                    }
                    if (v250 >= 0) {
                      uint64_t v252 = (const void *)(v9 + 32 * v234);
                    }
                    else {
                      uint64_t v252 = *(const void **)v235;
                    }
                    if (v246 >= v251) {
                      size_t v253 = v251;
                    }
                    else {
                      size_t v253 = v246;
                    }
                    int v254 = memcmp(v252, v247, v253);
                    BOOL v255 = v251 < v246;
                    if (v254) {
                      BOOL v255 = v254 < 0;
                    }
                    uint64_t v217 = v248;
                  }
                  while (v255);
                  if (*(char *)(v248 + 23) < 0) {
                    operator delete(*(void **)v248);
                  }
                  long long v256 = v303;
                  *(void *)(v248 + 16) = v304;
                  *(_OWORD *)uint64_t v248 = v256;
                  *(_WORD *)(v248 + 24) = v305;
                }
              }
            }
          }
          v214 -= 4;
        }
        while ((unint64_t)v213-- > 2);
      }
      return;
    }
    uint64_t v12 = v9 + 32 * ((unint64_t)v11 >> 1);
    uint64_t v13 = a2 - 4;
    if ((unint64_t)v10 <= 0x1000)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,DocStore::load(analytics::OpenEvent *,BOOL)::{lambda(DocStore::ColdShardDescriptor const&,DocStore::ColdShardDescriptor const&)#1} &,DocStore::ColdShardDescriptor*>((const void **)v12, v9, (uint64_t)(a2 - 4));
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,DocStore::load(analytics::OpenEvent *,BOOL)::{lambda(DocStore::ColdShardDescriptor const&,DocStore::ColdShardDescriptor const&)#1} &,DocStore::ColdShardDescriptor*>((const void **)v9, v12, (uint64_t)(a2 - 4));
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,DocStore::load(analytics::OpenEvent *,BOOL)::{lambda(DocStore::ColdShardDescriptor const&,DocStore::ColdShardDescriptor const&)#1} &,DocStore::ColdShardDescriptor*>(v293, v12 - 32, (uint64_t)(a2 - 8));
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,DocStore::load(analytics::OpenEvent *,BOOL)::{lambda(DocStore::ColdShardDescriptor const&,DocStore::ColdShardDescriptor const&)#1} &,DocStore::ColdShardDescriptor*>(v290, v12 + 32, (uint64_t)(a2 - 12));
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,DocStore::load(analytics::OpenEvent *,BOOL)::{lambda(DocStore::ColdShardDescriptor const&,DocStore::ColdShardDescriptor const&)#1} &,DocStore::ColdShardDescriptor*>((const void **)(v12 - 32), v12, v12 + 32);
      uint64_t v14 = *(void *)v9;
      uint64_t v15 = *v288;
      *(void *)((char *)&v303 + 7) = *(uint64_t *)((char *)v288 + 7);
      *(void *)&long long v303 = v15;
      LOBYTE(v15) = *(unsigned char *)(v9 + 23);
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(void *)unint64_t v9 = 0;
      __int16 v16 = *(_WORD *)(v9 + 24);
      long long v17 = *(_OWORD *)v12;
      *(void *)(v9 + 16) = *(void *)(v12 + 16);
      *(_OWORD *)unint64_t v9 = v17;
      *(unsigned char *)(v12 + 23) = 0;
      *(_WORD *)(v9 + 24) = *(_WORD *)(v12 + 24);
      *(void *)uint64_t v12 = v14;
      uint64_t v18 = v303;
      *(void *)(v12 + 15) = *(void *)((char *)&v303 + 7);
      *(void *)(v12 + 8) = v18;
      *(unsigned char *)(v12 + 23) = v15;
      *(_WORD *)(v12 + 24) = v16;
    }
    --a3;
    if ((a4 & 1) == 0)
    {
      int v19 = *(char *)(v9 + 23);
      int v20 = *(char *)(v9 - 9);
      if (v20 >= 0) {
        size_t v21 = *(unsigned __int8 *)(v9 - 9);
      }
      else {
        size_t v21 = *(void *)(v9 - 24);
      }
      if (v20 >= 0) {
        BOOL v22 = v287;
      }
      else {
        BOOL v22 = *(uint64_t **)(v9 - 32);
      }
      if (v19 >= 0) {
        size_t v23 = *(unsigned __int8 *)(v9 + 23);
      }
      else {
        size_t v23 = *(void *)(v9 + 8);
      }
      if (v19 >= 0) {
        __n128 v24 = (const void *)v9;
      }
      else {
        __n128 v24 = *(const void **)v9;
      }
      if (v23 >= v21) {
        size_t v25 = v21;
      }
      else {
        size_t v25 = v23;
      }
      int v26 = memcmp(v22, v24, v25);
      BOOL v27 = v21 < v23;
      if (v26) {
        BOOL v27 = v26 < 0;
      }
      if (!v27)
      {
        uint64_t v305 = 0;
        long long v72 = *(_OWORD *)v9;
        uint64_t v304 = *(void *)(v9 + 16);
        long long v303 = v72;
        *(void *)(v9 + 8) = 0;
        *(void *)(v9 + 16) = 0;
        *(void *)unint64_t v9 = 0;
        __int16 v73 = *(_WORD *)(v9 + 24);
        LOWORD(v305) = v73;
        int v74 = *((char *)a2 - 9);
        if (v304 >= 0) {
          size_t v75 = HIBYTE(v304);
        }
        else {
          size_t v75 = *((void *)&v303 + 1);
        }
        if (v304 >= 0) {
          __n128 v76 = &v303;
        }
        else {
          __n128 v76 = (long long *)v303;
        }
        if (v74 >= 0) {
          size_t v77 = *((unsigned __int8 *)a2 - 9);
        }
        else {
          size_t v77 = (size_t)*(a2 - 3);
        }
        if (v74 >= 0) {
          unint64_t v78 = a2 - 4;
        }
        else {
          unint64_t v78 = (const void **)*(a2 - 4);
        }
        if (v77 >= v75) {
          size_t v79 = v75;
        }
        else {
          size_t v79 = v77;
        }
        int v80 = memcmp(v76, v78, v79);
        BOOL v81 = v75 < v77;
        if (v80) {
          BOOL v81 = v80 < 0;
        }
        if (v81)
        {
          unint64_t v82 = (const void **)(v9 + 32);
          do
          {
            int v83 = *((char *)v82 + 23);
            if (v83 >= 0) {
              size_t v84 = *((unsigned __int8 *)v82 + 23);
            }
            else {
              size_t v84 = (size_t)v82[1];
            }
            if (v83 >= 0) {
              long long v85 = v82;
            }
            else {
              long long v85 = *v82;
            }
            if (v84 >= v75) {
              size_t v86 = v75;
            }
            else {
              size_t v86 = v84;
            }
            int v87 = memcmp(v76, v85, v86);
            BOOL v88 = v75 < v84;
            if (v87) {
              BOOL v88 = v87 < 0;
            }
            v82 += 4;
          }
          while (!v88);
          a1 = (uint64_t *)(v82 - 4);
        }
        else
        {
          int64_t v89 = (uint64_t *)(v9 + 32);
          do
          {
            a1 = v89;
            if (v89 >= (uint64_t *)a2) {
              break;
            }
            int v90 = *((char *)v89 + 23);
            if (v90 >= 0) {
              size_t v91 = *((unsigned __int8 *)v89 + 23);
            }
            else {
              size_t v91 = v89[1];
            }
            if (v90 >= 0) {
              unint64_t v92 = v89;
            }
            else {
              unint64_t v92 = (const void *)*v89;
            }
            if (v91 >= v75) {
              size_t v93 = v75;
            }
            else {
              size_t v93 = v91;
            }
            int v94 = memcmp(v76, v92, v93);
            BOOL v95 = v94 < 0;
            if (!v94) {
              BOOL v95 = v75 < v91;
            }
            int64_t v89 = a1 + 4;
          }
          while (!v95);
        }
        double v96 = (uint64_t *)a2;
        if (a1 < (uint64_t *)a2)
        {
          do
          {
            int v97 = *((char *)v13 + 23);
            if (v97 >= 0) {
              size_t v98 = *((unsigned __int8 *)v13 + 23);
            }
            else {
              size_t v98 = (size_t)v13[1];
            }
            if (v97 >= 0) {
              __n128 v99 = v13;
            }
            else {
              __n128 v99 = *v13;
            }
            if (v98 >= v75) {
              size_t v100 = v75;
            }
            else {
              size_t v100 = v98;
            }
            int v101 = memcmp(v76, v99, v100);
            BOOL v102 = v75 < v98;
            if (v101) {
              BOOL v102 = v101 < 0;
            }
            v13 -= 4;
          }
          while (v102);
          double v96 = (uint64_t *)(v13 + 4);
        }
        while (a1 < v96)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<DocStore::ColdShardDescriptor *&,DocStore::ColdShardDescriptor *&>(a1, (uint64_t)v96);
          uint64_t v103 = a1 + 4;
          do
          {
            a1 = v103;
            size_t v104 = *((unsigned __int8 *)v103 + 23);
            if ((v104 & 0x80u) == 0) {
              size_t v105 = v104;
            }
            else {
              size_t v105 = a1[1];
            }
            if ((v104 & 0x80u) == 0) {
              int v106 = a1;
            }
            else {
              int v106 = (const void *)*a1;
            }
            if (v105 >= v75) {
              size_t v107 = v75;
            }
            else {
              size_t v107 = v105;
            }
            int v108 = memcmp(v76, v106, v107);
            BOOL v109 = v108 < 0;
            if (!v108) {
              BOOL v109 = v75 < v105;
            }
            uint64_t v103 = a1 + 4;
          }
          while (!v109);
          int v110 = v96 - 4;
          do
          {
            double v96 = v110;
            size_t v111 = *((unsigned __int8 *)v110 + 23);
            if ((v111 & 0x80u) == 0) {
              size_t v112 = v111;
            }
            else {
              size_t v112 = v96[1];
            }
            if ((v111 & 0x80u) == 0) {
              uint64_t v113 = v96;
            }
            else {
              uint64_t v113 = (const void *)*v96;
            }
            if (v112 >= v75) {
              size_t v114 = v75;
            }
            else {
              size_t v114 = v112;
            }
            int v115 = memcmp(v76, v113, v114);
            BOOL v116 = v115 < 0;
            if (!v115) {
              BOOL v116 = v75 < v112;
            }
            int v110 = v96 - 4;
          }
          while (v116);
        }
        uint64_t v117 = (void **)(a1 - 4);
        BOOL v4 = (unint64_t)(a1 - 4) >= v9;
        BOOL v5 = a1 - 4 == (uint64_t *)v9;
        if (a1 - 4 != (uint64_t *)v9)
        {
          if (*(char *)(v9 + 23) < 0) {
            operator delete(*(void **)v9);
          }
          long long v118 = *(_OWORD *)v117;
          *(void *)(v9 + 16) = *(a1 - 2);
          *(_OWORD *)unint64_t v9 = v118;
          *((unsigned char *)a1 - 9) = 0;
          *((unsigned char *)a1 - 32) = 0;
          *(_WORD *)(v9 + 24) = *((_WORD *)a1 - 4);
        }
        if (*((char *)a1 - 9) < 0) {
          operator delete(*v117);
        }
        a4 = 0;
        long long v119 = v303;
        *(a1 - 2) = v304;
        *(_OWORD *)uint64_t v117 = v119;
        *((_WORD *)a1 - 4) = v73;
        goto LABEL_2;
      }
    }
    uint64_t v28 = 0;
    uint64_t v305 = 0;
    long long v29 = *(_OWORD *)v9;
    uint64_t v304 = *(void *)(v9 + 16);
    long long v303 = v29;
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = 0;
    *(void *)unint64_t v9 = 0;
    __int16 v30 = *(_WORD *)(v9 + 24);
    LOWORD(v305) = v30;
    if (v304 >= 0) {
      size_t v31 = HIBYTE(v304);
    }
    else {
      size_t v31 = *((void *)&v303 + 1);
    }
    if (v304 >= 0) {
      time_t v32 = &v303;
    }
    else {
      time_t v32 = (long long *)v303;
    }
    do
    {
      int v33 = *(char *)(v9 + v28 + 55);
      if (v33 >= 0) {
        size_t v34 = *(unsigned __int8 *)(v9 + v28 + 55);
      }
      else {
        size_t v34 = *(void *)(v9 + v28 + 40);
      }
      if (v33 >= 0) {
        __n128 v35 = (const void *)(v9 + v28 + 32);
      }
      else {
        __n128 v35 = *(const void **)(v9 + v28 + 32);
      }
      if (v31 >= v34) {
        size_t v36 = v34;
      }
      else {
        size_t v36 = v31;
      }
      int v37 = memcmp(v35, v32, v36);
      BOOL v38 = v34 < v31;
      if (v37) {
        BOOL v38 = v37 < 0;
      }
      v28 += 32;
    }
    while (v38);
    unint64_t v39 = v9 + v28;
    if (v9 + v28 - 32 == v9)
    {
      while (1)
      {
        BOOL v46 = (uint64_t *)(v13 + 4);
        if (v39 >= (unint64_t)(v13 + 4)) {
          break;
        }
        int v47 = *((char *)v13 + 23);
        if (v47 >= 0) {
          size_t v48 = *((unsigned __int8 *)v13 + 23);
        }
        else {
          size_t v48 = (size_t)v13[1];
        }
        if (v47 >= 0) {
          uint64_t v49 = v13;
        }
        else {
          uint64_t v49 = *v13;
        }
        if (v31 >= v48) {
          size_t v50 = v48;
        }
        else {
          size_t v50 = v31;
        }
        int v51 = memcmp(v49, v32, v50);
        BOOL v52 = v48 < v31;
        if (v51) {
          BOOL v52 = v51 < 0;
        }
        v13 -= 4;
        if (v52) {
          goto LABEL_74;
        }
      }
    }
    else
    {
      do
      {
        int v40 = *((char *)v13 + 23);
        if (v40 >= 0) {
          size_t v41 = *((unsigned __int8 *)v13 + 23);
        }
        else {
          size_t v41 = (size_t)v13[1];
        }
        if (v40 >= 0) {
          long long v42 = v13;
        }
        else {
          long long v42 = *v13;
        }
        if (v31 >= v41) {
          size_t v43 = v41;
        }
        else {
          size_t v43 = v31;
        }
        int v44 = memcmp(v42, v32, v43);
        BOOL v45 = v41 < v31;
        if (v44) {
          BOOL v45 = v44 < 0;
        }
        v13 -= 4;
      }
      while (!v45);
LABEL_74:
      BOOL v46 = (uint64_t *)(v13 + 4);
    }
    a1 = (uint64_t *)v39;
    if (v39 < (unint64_t)v46)
    {
      uint64_t v53 = v46;
      do
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<DocStore::ColdShardDescriptor *&,DocStore::ColdShardDescriptor *&>(a1, (uint64_t)v53);
        __n128 v54 = a1 + 4;
        do
        {
          a1 = v54;
          size_t v55 = *((unsigned __int8 *)v54 + 23);
          if ((v55 & 0x80u) == 0) {
            size_t v56 = v55;
          }
          else {
            size_t v56 = a1[1];
          }
          if ((v55 & 0x80u) == 0) {
            int64_t v57 = a1;
          }
          else {
            int64_t v57 = (const void *)*a1;
          }
          if (v31 >= v56) {
            size_t v58 = v56;
          }
          else {
            size_t v58 = v31;
          }
          int v59 = memcmp(v57, v32, v58);
          BOOL v60 = v59 < 0;
          if (!v59) {
            BOOL v60 = v56 < v31;
          }
          __n128 v54 = a1 + 4;
        }
        while (v60);
        __n128 v61 = v53 - 4;
        do
        {
          uint64_t v53 = v61;
          size_t v62 = *((unsigned __int8 *)v61 + 23);
          if ((v62 & 0x80u) == 0) {
            size_t v63 = v62;
          }
          else {
            size_t v63 = v53[1];
          }
          if ((v62 & 0x80u) == 0) {
            uint64_t v64 = v53;
          }
          else {
            uint64_t v64 = (const void *)*v53;
          }
          if (v31 >= v63) {
            size_t v65 = v63;
          }
          else {
            size_t v65 = v31;
          }
          int v66 = memcmp(v64, v32, v65);
          BOOL v67 = v66 < 0;
          if (!v66) {
            BOOL v67 = v63 < v31;
          }
          __n128 v61 = v53 - 4;
        }
        while (!v67);
      }
      while (a1 < v53);
    }
    BOOL v68 = (void **)(a1 - 4);
    if (a1 - 4 != (uint64_t *)v9)
    {
      if (*(char *)(v9 + 23) < 0) {
        operator delete(*(void **)v9);
      }
      long long v69 = *(_OWORD *)v68;
      *(void *)(v9 + 16) = *(a1 - 2);
      *(_OWORD *)unint64_t v9 = v69;
      *((unsigned char *)a1 - 9) = 0;
      *((unsigned char *)a1 - 32) = 0;
      *(_WORD *)(v9 + 24) = *((_WORD *)a1 - 4);
    }
    if (*((char *)a1 - 9) < 0) {
      operator delete(*v68);
    }
    long long v70 = v303;
    *(a1 - 2) = v304;
    *(_OWORD *)BOOL v68 = v70;
    *((_WORD *)a1 - 4) = v30;
    a2 = v300;
    if (v39 < (unint64_t)v46) {
      goto LABEL_115;
    }
    BOOL v71 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,DocStore::load(analytics::OpenEvent *,BOOL)::{lambda(DocStore::ColdShardDescriptor const&,DocStore::ColdShardDescriptor const&)#1} &,DocStore::ColdShardDescriptor*>(v9, (const void **)a1 - 4);
    if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,DocStore::load(analytics::OpenEvent *,BOOL)::{lambda(DocStore::ColdShardDescriptor const&,DocStore::ColdShardDescriptor const&)#1} &,DocStore::ColdShardDescriptor*>((uint64_t)a1, v300))
    {
      if (v71) {
        goto LABEL_2;
      }
LABEL_115:
      std::__introsort<std::_ClassicAlgPolicy,DocStore::load(analytics::OpenEvent *,BOOL)::{lambda(DocStore::ColdShardDescriptor const&,DocStore::ColdShardDescriptor const&)#1} &,DocStore::ColdShardDescriptor*,false>(v9, a1 - 4, a3, a4 & 1);
      a4 = 0;
      goto LABEL_2;
    }
    a2 = (const void **)(a1 - 4);
    if (v71) {
      return;
    }
  }
  if (a4)
  {
    if ((const void **)v9 != a2)
    {
      int v132 = (const void **)(v9 + 32);
      if ((const void **)(v9 + 32) != a2)
      {
        uint64_t v133 = 0;
        uint64_t v134 = (const void **)v9;
        do
        {
          __int16 v135 = v132;
          int v136 = *((char *)v134 + 23);
          int v137 = *((char *)v134 + 55);
          if (v137 >= 0) {
            size_t v138 = *((unsigned __int8 *)v134 + 55);
          }
          else {
            size_t v138 = (size_t)v134[5];
          }
          if (v137 >= 0) {
            __int16 v139 = v132;
          }
          else {
            __int16 v139 = (const void **)v134[4];
          }
          if (v136 >= 0) {
            size_t v140 = *((unsigned __int8 *)v134 + 23);
          }
          else {
            size_t v140 = (size_t)v134[1];
          }
          if (v136 >= 0) {
            unsigned int v141 = v134;
          }
          else {
            unsigned int v141 = *v134;
          }
          if (v140 >= v138) {
            size_t v142 = v138;
          }
          else {
            size_t v142 = v140;
          }
          int v143 = memcmp(v139, v141, v142);
          BOOL v144 = v138 < v140;
          if (v143) {
            BOOL v144 = v143 < 0;
          }
          if (v144)
          {
            long long v145 = a2;
            uint64_t v305 = 0;
            long long v146 = *(_OWORD *)v135;
            uint64_t v304 = (uint64_t)v135[2];
            long long v303 = v146;
            v135[1] = 0;
            v135[2] = 0;
            *__int16 v135 = 0;
            LOWORD(v305) = *((_WORD *)v134 + 28);
            if (v304 >= 0) {
              size_t v147 = HIBYTE(v304);
            }
            else {
              size_t v147 = *((void *)&v303 + 1);
            }
            if (v304 >= 0) {
              long long v148 = &v303;
            }
            else {
              long long v148 = (long long *)v303;
            }
            uint64_t v149 = v133;
            while (1)
            {
              uint64_t v150 = v9 + v149;
              unsigned int v151 = (void **)(v9 + v149 + 32);
              if (*(char *)(v9 + v149 + 55) < 0) {
                operator delete(*v151);
              }
              *(_OWORD *)unsigned int v151 = *(_OWORD *)v150;
              *(void *)(v9 + v149 + 48) = *(void *)(v150 + 16);
              *(unsigned char *)(v150 + 23) = 0;
              *(unsigned char *)uint64_t v150 = 0;
              *(_WORD *)(v150 + 56) = *(_WORD *)(v150 + 24);
              if (!v149) {
                break;
              }
              int v152 = *(char *)(v9 + v149 - 9);
              if (v152 >= 0) {
                size_t v153 = *(unsigned __int8 *)(v9 + v149 - 9);
              }
              else {
                size_t v153 = *(void *)(v9 + v149 - 24);
              }
              if (v152 >= 0) {
                long long v154 = (const void *)(v9 + v149 - 32);
              }
              else {
                long long v154 = *(const void **)(v9 + v149 - 32);
              }
              if (v153 >= v147) {
                size_t v155 = v147;
              }
              else {
                size_t v155 = v153;
              }
              int v156 = memcmp(v148, v154, v155);
              BOOL v157 = v147 < v153;
              if (v156) {
                BOOL v157 = v156 < 0;
              }
              v149 -= 32;
              if (!v157)
              {
                uint64_t v158 = v9 + v149 + 32;
                goto LABEL_287;
              }
            }
            uint64_t v158 = v9;
LABEL_287:
            a2 = v145;
            if (*(char *)(v158 + 23) < 0) {
              operator delete(*(void **)v158);
            }
            long long v159 = v303;
            *(void *)(v158 + 16) = v304;
            *(_OWORD *)uint64_t v158 = v159;
            *(_WORD *)(v158 + 24) = v305;
          }
          int v132 = v135 + 4;
          v133 += 32;
          uint64_t v134 = v135;
        }
        while (v135 + 4 != a2);
      }
    }
  }
  else if ((const void **)v9 != a2)
  {
    int v258 = (const void *)(v9 + 32);
    if ((const void **)(v9 + 32) != a2)
    {
      long long v259 = (_WORD *)(v9 + 56);
      do
      {
        unint64_t v260 = (unint64_t)v258;
        int v261 = *(char *)(v9 + 23);
        int v262 = *(char *)(v9 + 55);
        if (v262 >= 0) {
          size_t v263 = *(unsigned __int8 *)(v9 + 55);
        }
        else {
          size_t v263 = *(void *)(v9 + 40);
        }
        if (v262 >= 0) {
          uint64_t v264 = v258;
        }
        else {
          uint64_t v264 = *(const void **)(v9 + 32);
        }
        if (v261 >= 0) {
          size_t v265 = *(unsigned __int8 *)(v9 + 23);
        }
        else {
          size_t v265 = *(void *)(v9 + 8);
        }
        if (v261 >= 0) {
          BOOL v266 = (const void *)v9;
        }
        else {
          BOOL v266 = *(const void **)v9;
        }
        if (v265 >= v263) {
          size_t v267 = v263;
        }
        else {
          size_t v267 = v265;
        }
        int v268 = memcmp(v264, v266, v267);
        BOOL v269 = v263 < v265;
        if (v268) {
          BOOL v269 = v268 < 0;
        }
        if (v269)
        {
          uint64_t v305 = 0;
          long long v270 = *(_OWORD *)v260;
          uint64_t v304 = *(void *)(v260 + 16);
          long long v303 = v270;
          *(void *)(v260 + 8) = 0;
          *(void *)(v260 + 16) = 0;
          *(void *)unint64_t v260 = 0;
          LOWORD(v305) = *(_WORD *)(v9 + 56);
          if (v304 >= 0) {
            size_t v271 = HIBYTE(v304);
          }
          else {
            size_t v271 = *((void *)&v303 + 1);
          }
          if (v304 >= 0) {
            int v272 = &v303;
          }
          else {
            int v272 = (long long *)v303;
          }
          uint64_t v273 = v259;
          do
          {
            uint64_t v274 = (void **)(v273 - 12);
            if (*((char *)v273 - 1) < 0) {
              operator delete(*v274);
            }
            *(_OWORD *)uint64_t v274 = *(_OWORD *)(v273 - 28);
            *((void *)v273 - 1) = *((void *)v273 - 5);
            *((unsigned char *)v273 - 33) = 0;
            *((unsigned char *)v273 - 56) = 0;
            int v275 = v273 - 28;
            int v276 = v273 - 16;
            _WORD *v273 = *(v273 - 16);
            int v277 = *((char *)v273 - 65);
            int v278 = v273 - 44;
            uint64_t v279 = (const void *)*((void *)v273 - 11);
            if (v277 >= 0) {
              size_t v280 = *((unsigned __int8 *)v273 - 65);
            }
            else {
              size_t v280 = *((void *)v273 - 10);
            }
            if (v277 >= 0) {
              uint64_t v281 = v278;
            }
            else {
              uint64_t v281 = v279;
            }
            if (v280 >= v271) {
              size_t v282 = v271;
            }
            else {
              size_t v282 = v280;
            }
            int v283 = memcmp(v272, v281, v282);
            BOOL v284 = v271 < v280;
            if (v283) {
              BOOL v284 = v283 < 0;
            }
            uint64_t v273 = v276;
          }
          while (v284);
          if (*((char *)v275 + 23) < 0) {
            operator delete(*(void **)v275);
          }
          long long v285 = v303;
          *((void *)v275 + 2) = v304;
          *(_OWORD *)int v275 = v285;
          v275[12] = v305;
        }
        int v258 = (const void *)(v260 + 32);
        v259 += 16;
        unint64_t v9 = v260;
      }
      while ((const void **)(v260 + 32) != a2);
    }
  }
}