void sub_1D0FA77C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1D0FA81BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id __atxlog_handle_settings_actions()
{
  if (__atxlog_handle_settings_actions_onceToken != -1) {
    dispatch_once(&__atxlog_handle_settings_actions_onceToken, &__block_literal_global_122);
  }
  v0 = (void *)__atxlog_handle_settings_actions_log;
  return v0;
}

void sub_1D0FA8FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  v12 = v11;

  pthread_mutex_unlock(v10);
  _Unwind_Resume(a1);
}

void sub_1D0FA90C4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void handleAmbientLightEvent(void *a1)
{
  if (a1)
  {
    v8 = a1;
    double Current = CFAbsoluteTimeGetCurrent();
    if (Current - v8[6] >= 1.0)
    {
      v8[6] = Current;
      v2 = NSNumber;
      IOHIDEventGetDoubleValue();
      v3 = objc_msgSend(v2, "numberWithDouble:");
      v4 = NSNumber;
      IOHIDEventGetDoubleValue();
      v5 = objc_msgSend(v4, "numberWithDouble:");
      v6 = NSNumber;
      IOHIDEventGetDoubleValue();
      v7 = objc_msgSend(v6, "numberWithDouble:");
      [v8 addSampleWithXValue:v3 YValue:v5 ZValue:v7];
    }
  }
}

void sub_1D0FA9548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id decodeSubGenresData(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    v2 = (void *)MEMORY[0x1D25F6CC0]();
    v3 = (void *)MEMORY[0x1E4F28DC0];
    v4 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v5 = objc_opt_class();
    v6 = objc_msgSend(v4, "setWithObjects:", v5, objc_opt_class(), 0);
    id v11 = 0;
    v7 = [v3 unarchivedObjectOfClasses:v6 fromData:v1 error:&v11];
    id v8 = v11;

    if (!v7)
    {
      v9 = __atxlog_handle_default();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        decodeSubGenresData_cold_1();
      }
    }
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_1D0FAA114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id __atxlog_handle_default()
{
  if (__atxlog_handle_default_onceToken != -1) {
    dispatch_once(&__atxlog_handle_default_onceToken, &__block_literal_global_230);
  }
  v0 = (void *)__atxlog_handle_default_log;
  return v0;
}

id __atxlog_handle_app_library()
{
  if (__atxlog_handle_app_library_onceToken != -1) {
    dispatch_once(&__atxlog_handle_app_library_onceToken, &__block_literal_global_77_2);
  }
  v0 = (void *)__atxlog_handle_app_library_log;
  return v0;
}

id __atxlog_handle_backup()
{
  if (__atxlog_handle_backup_onceToken != -1) {
    dispatch_once(&__atxlog_handle_backup_onceToken, &__block_literal_global_83_0);
  }
  v0 = (void *)__atxlog_handle_backup_log;
  return v0;
}

uint64_t _ATXRestoreIsInProgress()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  v0 = restoreStateQueue();
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ATXRestoreIsInProgress_block_invoke;
  block[3] = &unk_1E68AB438;
  block[4] = &v4;
  dispatch_sync(v0, block);

  uint64_t v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

id restoreStateQueue()
{
  if (restoreStateQueue_onceToken != -1) {
    dispatch_once(&restoreStateQueue_onceToken, &__block_literal_global_459);
  }
  v0 = (void *)restoreStateQueue_instance;
  return v0;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
}

void __Block_byref_object_dispose__17(uint64_t a1)
{
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
}

void __Block_byref_object_dispose__19(uint64_t a1)
{
}

void __Block_byref_object_dispose__20(uint64_t a1)
{
}

void __Block_byref_object_dispose__21(uint64_t a1)
{
}

void __Block_byref_object_dispose__22(uint64_t a1)
{
}

void __Block_byref_object_dispose__23(uint64_t a1)
{
}

void __Block_byref_object_dispose__24(uint64_t a1)
{
}

void __Block_byref_object_dispose__25(uint64_t a1)
{
}

void __Block_byref_object_dispose__26(uint64_t a1)
{
}

void __Block_byref_object_dispose__27(uint64_t a1)
{
}

void __Block_byref_object_dispose__28(uint64_t a1)
{
}

void __Block_byref_object_dispose__29(uint64_t a1)
{
}

void __Block_byref_object_dispose__30(uint64_t a1)
{
}

void __Block_byref_object_dispose__31(uint64_t a1)
{
}

void __Block_byref_object_dispose__32(uint64_t a1)
{
}

void __Block_byref_object_dispose__33(uint64_t a1)
{
}

void __Block_byref_object_dispose__34(uint64_t a1)
{
}

void __Block_byref_object_dispose__35(uint64_t a1)
{
}

void __Block_byref_object_dispose__36(uint64_t a1)
{
}

void __Block_byref_object_dispose__37(uint64_t a1)
{
}

void __Block_byref_object_dispose__38(uint64_t a1)
{
}

void __Block_byref_object_dispose__39(uint64_t a1)
{
}

void __Block_byref_object_dispose__40(uint64_t a1)
{
}

void __Block_byref_object_dispose__41(uint64_t a1)
{
}

void __Block_byref_object_dispose__42(uint64_t a1)
{
}

void __Block_byref_object_dispose__43(uint64_t a1)
{
}

void __Block_byref_object_dispose__44(uint64_t a1)
{
}

void __Block_byref_object_dispose__45(uint64_t a1)
{
}

void __Block_byref_object_dispose__46(uint64_t a1)
{
}

void __Block_byref_object_dispose__47(uint64_t a1)
{
}

void __Block_byref_object_dispose__48(uint64_t a1)
{
}

void __Block_byref_object_dispose__49(uint64_t a1)
{
}

void __Block_byref_object_dispose__50(uint64_t a1)
{
}

void __Block_byref_object_dispose__51(uint64_t a1)
{
}

void __Block_byref_object_dispose__52(uint64_t a1)
{
}

void __Block_byref_object_dispose__53(uint64_t a1)
{
}

void __Block_byref_object_dispose__54(uint64_t a1)
{
}

void __Block_byref_object_dispose__55(uint64_t a1)
{
}

void __Block_byref_object_dispose__56(uint64_t a1)
{
}

void __Block_byref_object_dispose__57(uint64_t a1)
{
}

void __Block_byref_object_dispose__58(uint64_t a1)
{
}

void __Block_byref_object_dispose__59(uint64_t a1)
{
}

void __Block_byref_object_dispose__60(uint64_t a1)
{
}

void __Block_byref_object_dispose__61(uint64_t a1)
{
}

void __Block_byref_object_dispose__62(uint64_t a1)
{
}

void __Block_byref_object_dispose__63(uint64_t a1)
{
}

void __Block_byref_object_dispose__64(uint64_t a1)
{
}

void __Block_byref_object_dispose__65(uint64_t a1)
{
}

void __Block_byref_object_dispose__66(uint64_t a1)
{
}

void __Block_byref_object_dispose__67(uint64_t a1)
{
}

void __Block_byref_object_dispose__68(uint64_t a1)
{
}

void __Block_byref_object_dispose__69(uint64_t a1)
{
}

void __Block_byref_object_dispose__70(uint64_t a1)
{
}

void __Block_byref_object_dispose__71(uint64_t a1)
{
}

void __Block_byref_object_dispose__72(uint64_t a1)
{
}

void __Block_byref_object_dispose__73(uint64_t a1)
{
}

void __Block_byref_object_dispose__74(uint64_t a1)
{
}

void __Block_byref_object_dispose__75(uint64_t a1)
{
}

void __Block_byref_object_dispose__76(uint64_t a1)
{
}

void __Block_byref_object_dispose__77(uint64_t a1)
{
}

void __Block_byref_object_dispose__78(uint64_t a1)
{
}

void __Block_byref_object_dispose__79(uint64_t a1)
{
}

void __Block_byref_object_dispose__80(uint64_t a1)
{
}

void __Block_byref_object_dispose__81(uint64_t a1)
{
}

void __Block_byref_object_dispose__82(uint64_t a1)
{
}

void __Block_byref_object_dispose__83(uint64_t a1)
{
}

void __Block_byref_object_dispose__84(uint64_t a1)
{
}

void __Block_byref_object_dispose__85(uint64_t a1)
{
}

void __Block_byref_object_dispose__86(uint64_t a1)
{
}

void __Block_byref_object_dispose__87(uint64_t a1)
{
}

void __Block_byref_object_dispose__88(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void __Block_byref_object_dispose__89(uint64_t a1)
{
}

void __Block_byref_object_dispose__90(uint64_t a1)
{
}

void __Block_byref_object_dispose__91(uint64_t a1)
{
}

void __Block_byref_object_dispose__92(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void __Block_byref_object_dispose__93(uint64_t a1)
{
}

void __Block_byref_object_dispose__94(uint64_t a1)
{
}

void __Block_byref_object_dispose__95(uint64_t a1)
{
}

void __Block_byref_object_dispose__96(uint64_t a1)
{
}

void __Block_byref_object_dispose__97(uint64_t a1)
{
}

void __Block_byref_object_dispose__98(uint64_t a1)
{
}

void __Block_byref_object_dispose__99(uint64_t a1)
{
}

void __Block_byref_object_dispose__100(uint64_t a1)
{
}

void __Block_byref_object_dispose__101(uint64_t a1)
{
}

void __Block_byref_object_dispose__102(uint64_t a1)
{
}

void __Block_byref_object_dispose__103(uint64_t a1)
{
}

void __Block_byref_object_dispose__104(uint64_t a1)
{
}

void __Block_byref_object_dispose__105(uint64_t a1)
{
}

void __Block_byref_object_dispose__106(uint64_t a1)
{
}

void __Block_byref_object_dispose__107(uint64_t a1)
{
}

void __Block_byref_object_dispose__108(uint64_t a1)
{
}

void __Block_byref_object_dispose__109(uint64_t a1)
{
}

void sub_1D0FABD10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D0FABDAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id __atxlog_handle_heuristic()
{
  if (__atxlog_handle_heuristic_onceToken != -1) {
    dispatch_once(&__atxlog_handle_heuristic_onceToken, &__block_literal_global_7_1);
  }
  v0 = (void *)__atxlog_handle_heuristic_log;
  return v0;
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__16(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__19(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__20(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__21(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__22(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__23(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__24(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__25(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__26(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__27(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__28(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__29(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__30(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__31(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__32(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__33(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__34(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__35(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__36(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__37(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void *__Block_byref_object_copy__38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(a1 + 48) = v2;
  return memcpy((void *)(a1 + 56), (const void *)(a2 + 56), 0xCD2uLL);
}

uint64_t __Block_byref_object_copy__39(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__40(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__41(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__42(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__43(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__44(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__45(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__46(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__47(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__48(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__49(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__50(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__51(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__52(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__53(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__54(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__55(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__56(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__57(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__58(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__59(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__60(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__61(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__62(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__63(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__64(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__65(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__66(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__67(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__68(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__69(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__70(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__71(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__72(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__73(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__74(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__75(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__76(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__77(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__78(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__79(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__80(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__81(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__82(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__83(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__84(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__85(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__86(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__87(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

__n128 __Block_byref_object_copy__88(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

uint64_t __Block_byref_object_copy__89(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__90(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__91(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

__n128 __Block_byref_object_copy__92(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

uint64_t __Block_byref_object_copy__93(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__94(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__95(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__96(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_copy__97(uint64_t a1, uint64_t a2)
{
}

uint64_t __Block_byref_object_copy__98(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__99(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__100(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__101(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__102(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__103(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__104(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__105(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__106(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__107(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__108(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__109(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D0FACB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1D0FAD52C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D0FAE190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

BOOL ATXPBTaskAgnosticBehaviorFeatureVectorReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    char v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          int v17 = *(unsigned __int16 *)(a1 + 1184);
          unsigned int v18 = (v17 | (*(unsigned __int8 *)(a1 + 1186) << 16) | 0x10000u) >> 16;
          *(_WORD *)(a1 + 1184) = v17;
          *(unsigned char *)(a1 + 1186) = v18;
          uint64_t v19 = *v3;
          unint64_t v20 = *(void *)(a2 + v19);
          if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v20);
            *(void *)(a2 + v19) = v20 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__unlockTime;
          goto LABEL_746;
        case 2u:
          char v22 = *(unsigned char *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 0x10u;
          *(unsigned char *)(a1 + 1186) = v22;
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v24);
            *(void *)(a2 + v23) = v24 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__launchTimePopularity;
          goto LABEL_746;
        case 3u:
          char v25 = *(unsigned char *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 0x100u;
          *(unsigned char *)(a1 + 1186) = v25;
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v27);
            *(void *)(a2 + v26) = v27 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__timeOfDayBucket;
          goto LABEL_746;
        case 4u:
          char v28 = *(unsigned char *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 0x200u;
          *(unsigned char *)(a1 + 1186) = v28;
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__timeOfDayPopularity;
          goto LABEL_746;
        case 5u:
          *(void *)(a1 + 1176) |= 0x8000000000000uLL;
          uint64_t v31 = *v3;
          unint64_t v32 = *(void *)(a2 + v31);
          if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v32);
            *(void *)(a2 + v31) = v32 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__coarseTimeOfDayPopularity;
          goto LABEL_746;
        case 6u:
          char v33 = *(unsigned char *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 8u;
          *(unsigned char *)(a1 + 1186) = v33;
          uint64_t v34 = *v3;
          unint64_t v35 = *(void *)(a2 + v34);
          if (v35 <= 0xFFFFFFFFFFFFFFF7 && v35 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v35);
            *(void *)(a2 + v34) = v35 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__launchPopularity;
          goto LABEL_746;
        case 7u:
          char v36 = *(unsigned char *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 4u;
          *(unsigned char *)(a1 + 1186) = v36;
          uint64_t v37 = *v3;
          unint64_t v38 = *(void *)(a2 + v37);
          if (v38 <= 0xFFFFFFFFFFFFFFF7 && v38 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v38);
            *(void *)(a2 + v37) = v38 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__launchDayOfWeekPopularity;
          goto LABEL_746;
        case 8u:
          *(void *)(a1 + 1176) |= 0x40000000000000uLL;
          uint64_t v39 = *v3;
          unint64_t v40 = *(void *)(a2 + v39);
          if (v40 <= 0xFFFFFFFFFFFFFFF7 && v40 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v40);
            *(void *)(a2 + v39) = v40 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__dayOfWeekBucket;
          goto LABEL_746;
        case 9u:
          *(void *)(a1 + 1176) |= 0x80000000000000uLL;
          uint64_t v41 = *v3;
          unint64_t v42 = *(void *)(a2 + v41);
          if (v42 <= 0xFFFFFFFFFFFFFFF7 && v42 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v42);
            *(void *)(a2 + v41) = v42 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__dayOfWeekPopularity;
          goto LABEL_746;
        case 0xAu:
          *(void *)(a1 + 1176) |= 0x800000000000000uLL;
          uint64_t v43 = *v3;
          unint64_t v44 = *(void *)(a2 + v43);
          if (v44 <= 0xFFFFFFFFFFFFFFF7 && v44 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v44);
            *(void *)(a2 + v43) = v44 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__entropyLaunchPopularity;
          goto LABEL_746;
        case 0xBu:
          *(void *)(a1 + 1176) |= 0x100000000000000uLL;
          uint64_t v45 = *v3;
          unint64_t v46 = *(void *)(a2 + v45);
          if (v46 <= 0xFFFFFFFFFFFFFFF7 && v46 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v46);
            *(void *)(a2 + v45) = v46 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__entropyDayOfWeekPopularity;
          goto LABEL_746;
        case 0xCu:
          *(void *)(a1 + 1176) |= 0x400000000000000uLL;
          uint64_t v47 = *v3;
          unint64_t v48 = *(void *)(a2 + v47);
          if (v48 <= 0xFFFFFFFFFFFFFFF7 && v48 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v48);
            *(void *)(a2 + v47) = v48 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__entropyDayOfWeekPopularityByDay;
          goto LABEL_746;
        case 0xDu:
          *(void *)(a1 + 1176) |= 0x200000000000000uLL;
          uint64_t v49 = *v3;
          unint64_t v50 = *(void *)(a2 + v49);
          if (v50 <= 0xFFFFFFFFFFFFFFF7 && v50 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v50);
            *(void *)(a2 + v49) = v50 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__entropyDayOfWeekPopularityByApp;
          goto LABEL_746;
        case 0xEu:
          *(void *)(a1 + 1176) |= 0x8000000000000000;
          uint64_t v51 = *v3;
          unint64_t v52 = *(void *)(a2 + v51);
          if (v52 <= 0xFFFFFFFFFFFFFFF7 && v52 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v52);
            *(void *)(a2 + v51) = v52 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__entropyTrendingPopularity;
          goto LABEL_746;
        case 0xFu:
          *(void *)(a1 + 1176) |= 0x1000000000000000uLL;
          uint64_t v53 = *v3;
          unint64_t v54 = *(void *)(a2 + v53);
          if (v54 <= 0xFFFFFFFFFFFFFFF7 && v54 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v54);
            *(void *)(a2 + v53) = v54 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__entropySSIDPopularity;
          goto LABEL_746;
        case 0x10u:
          *(void *)(a1 + 1176) |= 0x4000000000000000uLL;
          uint64_t v55 = *v3;
          unint64_t v56 = *(void *)(a2 + v55);
          if (v56 <= 0xFFFFFFFFFFFFFFF7 && v56 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v56);
            *(void *)(a2 + v55) = v56 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__entropySSIDPopularityBySSID;
          goto LABEL_746;
        case 0x11u:
          *(void *)(a1 + 1176) |= 0x2000000000000000uLL;
          uint64_t v57 = *v3;
          unint64_t v58 = *(void *)(a2 + v57);
          if (v58 <= 0xFFFFFFFFFFFFFFF7 && v58 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v58);
            *(void *)(a2 + v57) = v58 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__entropySSIDPopularityByApp;
          goto LABEL_746;
        case 0x12u:
          char v59 = *(unsigned char *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 0x1000u;
          *(unsigned char *)(a1 + 1186) = v59;
          uint64_t v60 = *v3;
          unint64_t v61 = *(void *)(a2 + v60);
          if (v61 <= 0xFFFFFFFFFFFFFFF7 && v61 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v61);
            *(void *)(a2 + v60) = v61 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__totalNumberOfLaunches;
          goto LABEL_746;
        case 0x13u:
          *(void *)(a1 + 1168) |= 1uLL;
          uint64_t v62 = *v3;
          unint64_t v63 = *(void *)(a2 + v62);
          if (v63 <= 0xFFFFFFFFFFFFFFF7 && v63 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v63);
            *(void *)(a2 + v62) = v63 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__airplaneModePopularity;
          goto LABEL_746;
        case 0x14u:
          char v64 = *(unsigned char *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 0x400u;
          *(unsigned char *)(a1 + 1186) = v64;
          uint64_t v65 = *v3;
          unint64_t v66 = *(void *)(a2 + v65);
          if (v66 <= 0xFFFFFFFFFFFFFFF7 && v66 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v66);
            *(void *)(a2 + v65) = v66 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__totalNumberOfAirplaneModeLaunches;
          goto LABEL_746;
        case 0x15u:
          char v67 = *(unsigned char *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 0x8000u;
          *(unsigned char *)(a1 + 1186) = v67;
          uint64_t v68 = *v3;
          unint64_t v69 = *(void *)(a2 + v68);
          if (v69 <= 0xFFFFFFFFFFFFFFF7 && v69 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v69);
            *(void *)(a2 + v68) = v69 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__trendingPopularity;
          goto LABEL_746;
        case 0x16u:
          char v70 = *(unsigned char *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 0x4000u;
          *(unsigned char *)(a1 + 1186) = v70;
          uint64_t v71 = *v3;
          unint64_t v72 = *(void *)(a2 + v71);
          if (v72 <= 0xFFFFFFFFFFFFFFF7 && v72 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v72);
            *(void *)(a2 + v71) = v72 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__totalNumberOfTrendingLaunches;
          goto LABEL_746;
        case 0x17u:
          char v73 = *(unsigned char *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 0x80u;
          *(unsigned char *)(a1 + 1186) = v73;
          uint64_t v74 = *v3;
          unint64_t v75 = *(void *)(a2 + v74);
          if (v75 <= 0xFFFFFFFFFFFFFFF7 && v75 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v75);
            *(void *)(a2 + v74) = v75 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__sSIDPopularity;
          goto LABEL_746;
        case 0x18u:
          char v76 = *(unsigned char *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 0x2000u;
          *(unsigned char *)(a1 + 1186) = v76;
          uint64_t v77 = *v3;
          unint64_t v78 = *(void *)(a2 + v77);
          if (v78 <= 0xFFFFFFFFFFFFFFF7 && v78 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v78);
            *(void *)(a2 + v77) = v78 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__totalNumberOfSSIDLaunches;
          goto LABEL_746;
        case 0x19u:
          char v79 = *(unsigned char *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 0x20u;
          *(unsigned char *)(a1 + 1186) = v79;
          uint64_t v80 = *v3;
          unint64_t v81 = *(void *)(a2 + v80);
          if (v81 <= 0xFFFFFFFFFFFFFFF7 && v81 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v81);
            *(void *)(a2 + v80) = v81 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__onWifi;
          goto LABEL_746;
        case 0x1Au:
          *(void *)(a1 + 1176) |= 0x10000000000000uLL;
          uint64_t v82 = *v3;
          unint64_t v83 = *(void *)(a2 + v82);
          if (v83 <= 0xFFFFFFFFFFFFFFF7 && v83 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v83);
            *(void *)(a2 + v82) = v83 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__coreMotionPopularity;
          goto LABEL_746;
        case 0x1Bu:
          char v84 = *(unsigned char *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 0x800u;
          *(unsigned char *)(a1 + 1186) = v84;
          uint64_t v85 = *v3;
          unint64_t v86 = *(void *)(a2 + v85);
          if (v86 <= 0xFFFFFFFFFFFFFFF7 && v86 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v86);
            *(void *)(a2 + v85) = v86 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__totalNumberOfCoreMotionLaunches;
          goto LABEL_746;
        case 0x1Cu:
          char v87 = *(unsigned char *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 1u;
          *(unsigned char *)(a1 + 1186) = v87;
          uint64_t v88 = *v3;
          unint64_t v89 = *(void *)(a2 + v88);
          if (v89 <= 0xFFFFFFFFFFFFFFF7 && v89 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v89);
            *(void *)(a2 + v88) = v89 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__isDateInWeekendOnDevice;
          goto LABEL_746;
        case 0x1Du:
          *(void *)(a1 + 1168) |= 4uLL;
          uint64_t v90 = *v3;
          unint64_t v91 = *(void *)(a2 + v90);
          if (v91 <= 0xFFFFFFFFFFFFFFF7 && v91 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v91);
            *(void *)(a2 + v90) = v91 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__ambientLightTypePopularity;
          goto LABEL_746;
        case 0x1Eu:
          *(void *)(a1 + 1168) |= 2uLL;
          uint64_t v92 = *v3;
          unint64_t v93 = *(void *)(a2 + v92);
          if (v93 <= 0xFFFFFFFFFFFFFFF7 && v93 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v93);
            *(void *)(a2 + v92) = v93 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__ambientLightTypeLaunchPopularity;
          goto LABEL_746;
        case 0x1Fu:
          *(void *)(a1 + 1176) |= 0x2000000000000uLL;
          uint64_t v94 = *v3;
          unint64_t v95 = *(void *)(a2 + v94);
          if (v95 <= 0xFFFFFFFFFFFFFFF7 && v95 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v95);
            *(void *)(a2 + v94) = v95 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appTimeOfDayLaunches;
          goto LABEL_746;
        case 0x20u:
          *(void *)(a1 + 1168) |= 8uLL;
          uint64_t v96 = *v3;
          unint64_t v97 = *(void *)(a2 + v96);
          if (v97 <= 0xFFFFFFFFFFFFFFF7 && v97 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v97);
            *(void *)(a2 + v96) = v97 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appDayOfWeekLaunches;
          goto LABEL_746;
        case 0x21u:
          *(void *)(a1 + 1176) |= 0x1000000000000uLL;
          uint64_t v98 = *v3;
          unint64_t v99 = *(void *)(a2 + v98);
          if (v99 <= 0xFFFFFFFFFFFFFFF7 && v99 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v99);
            *(void *)(a2 + v98) = v99 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appTimeAndDayOfWeekPopularity;
          goto LABEL_746;
        case 0x22u:
          *(void *)(a1 + 1176) |= 0x400000000000uLL;
          uint64_t v100 = *v3;
          unint64_t v101 = *(void *)(a2 + v100);
          if (v101 <= 0xFFFFFFFFFFFFFFF7 && v101 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v101);
            *(void *)(a2 + v100) = v101 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appPopularityGivenTimeAndDayOfWeek;
          goto LABEL_746;
        case 0x23u:
          *(void *)(a1 + 1176) |= 0x800000000000uLL;
          uint64_t v102 = *v3;
          unint64_t v103 = *(void *)(a2 + v102);
          if (v103 <= 0xFFFFFFFFFFFFFFF7 && v103 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v103);
            *(void *)(a2 + v102) = v103 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appPopularityOfTimeAndDayOfWeekGivenApp;
          goto LABEL_746;
        case 0x24u:
          *(void *)(a1 + 1176) |= 0x4000000000000uLL;
          uint64_t v104 = *v3;
          unint64_t v105 = *(void *)(a2 + v104);
          if (v105 <= 0xFFFFFFFFFFFFFFF7 && v105 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v105);
            *(void *)(a2 + v104) = v105 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appTotalNumberOfTimeAndDayOfWeekLaunches;
          goto LABEL_746;
        case 0x25u:
          *(void *)(a1 + 1168) |= 0x4000000000000000uLL;
          uint64_t v106 = *v3;
          unint64_t v107 = *(void *)(a2 + v106);
          if (v107 <= 0xFFFFFFFFFFFFFFF7 && v107 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v107);
            *(void *)(a2 + v106) = v107 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesCoarseTimePowLocationForAppInContext;
          goto LABEL_746;
        case 0x26u:
          *(void *)(a1 + 1168) |= 0x8000000000000000;
          uint64_t v108 = *v3;
          unint64_t v109 = *(void *)(a2 + v108);
          if (v109 <= 0xFFFFFFFFFFFFFFF7 && v109 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v109);
            *(void *)(a2 + v108) = v109 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesCoarseTimePowLocationInContext;
          goto LABEL_746;
        case 0x27u:
          *(void *)(a1 + 1168) |= 0x2000000000000000uLL;
          uint64_t v110 = *v3;
          unint64_t v111 = *(void *)(a2 + v110);
          if (v111 <= 0xFFFFFFFFFFFFFFF7 && v111 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v111);
            *(void *)(a2 + v110) = v111 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesCoarseTimePowLocationForApp;
          goto LABEL_746;
        case 0x28u:
          *(void *)(a1 + 1168) |= 0x1000000000000000uLL;
          uint64_t v112 = *v3;
          unint64_t v113 = *(void *)(a2 + v112);
          if (v113 <= 0xFFFFFFFFFFFFFFF7 && v113 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v113);
            *(void *)(a2 + v112) = v113 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesCoarseTimePowLocationForAllAppsAndContexts;
          goto LABEL_746;
        case 0x29u:
          *(void *)(a1 + 1176) |= 0x20000000000uLL;
          uint64_t v114 = *v3;
          unint64_t v115 = *(void *)(a2 + v114);
          if (v115 <= 0xFFFFFFFFFFFFFFF7 && v115 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v115);
            *(void *)(a2 + v114) = v115 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesSpecificTimeDowLocationForAppInContext;
          goto LABEL_746;
        case 0x2Au:
          *(void *)(a1 + 1176) |= 0x40000000000uLL;
          uint64_t v116 = *v3;
          unint64_t v117 = *(void *)(a2 + v116);
          if (v117 <= 0xFFFFFFFFFFFFFFF7 && v117 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v117);
            *(void *)(a2 + v116) = v117 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesSpecificTimeDowLocationInContext;
          goto LABEL_746;
        case 0x2Bu:
          *(void *)(a1 + 1176) |= 0x10000000000uLL;
          uint64_t v118 = *v3;
          unint64_t v119 = *(void *)(a2 + v118);
          if (v119 <= 0xFFFFFFFFFFFFFFF7 && v119 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v119);
            *(void *)(a2 + v118) = v119 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesSpecificTimeDowLocationForApp;
          goto LABEL_746;
        case 0x2Cu:
          *(void *)(a1 + 1176) |= 0x8000000000uLL;
          uint64_t v120 = *v3;
          unint64_t v121 = *(void *)(a2 + v120);
          if (v121 <= 0xFFFFFFFFFFFFFFF7 && v121 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v121);
            *(void *)(a2 + v120) = v121 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesSpecificTimeDowLocationForAllAppsAndContexts;
          goto LABEL_746;
        case 0x2Du:
          *(void *)(a1 + 1176) |= 0x10uLL;
          uint64_t v122 = *v3;
          unint64_t v123 = *(void *)(a2 + v122);
          if (v123 <= 0xFFFFFFFFFFFFFFF7 && v123 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v123);
            *(void *)(a2 + v122) = v123 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket0ForApp;
          goto LABEL_746;
        case 0x2Eu:
          *(void *)(a1 + 1176) |= 0x8000uLL;
          uint64_t v124 = *v3;
          unint64_t v125 = *(void *)(a2 + v124);
          if (v125 <= 0xFFFFFFFFFFFFFFF7 && v125 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v125);
            *(void *)(a2 + v124) = v125 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket1ForApp;
          goto LABEL_746;
        case 0x2Fu:
          *(void *)(a1 + 1176) |= 0x200000uLL;
          uint64_t v126 = *v3;
          unint64_t v127 = *(void *)(a2 + v126);
          if (v127 <= 0xFFFFFFFFFFFFFFF7 && v127 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v127);
            *(void *)(a2 + v126) = v127 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket2ForApp;
          goto LABEL_746;
        case 0x30u:
          *(void *)(a1 + 1176) |= 0x400000uLL;
          uint64_t v128 = *v3;
          unint64_t v129 = *(void *)(a2 + v128);
          if (v129 <= 0xFFFFFFFFFFFFFFF7 && v129 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v129);
            *(void *)(a2 + v128) = v129 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket3ForApp;
          goto LABEL_746;
        case 0x31u:
          *(void *)(a1 + 1176) |= 0x800000uLL;
          uint64_t v130 = *v3;
          unint64_t v131 = *(void *)(a2 + v130);
          if (v131 <= 0xFFFFFFFFFFFFFFF7 && v131 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v131);
            *(void *)(a2 + v130) = v131 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket4ForApp;
          goto LABEL_746;
        case 0x32u:
          *(void *)(a1 + 1176) |= 0x1000000uLL;
          uint64_t v132 = *v3;
          unint64_t v133 = *(void *)(a2 + v132);
          if (v133 <= 0xFFFFFFFFFFFFFFF7 && v133 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v133);
            *(void *)(a2 + v132) = v133 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket5ForApp;
          goto LABEL_746;
        case 0x33u:
          *(void *)(a1 + 1176) |= 0x2000000uLL;
          uint64_t v134 = *v3;
          unint64_t v135 = *(void *)(a2 + v134);
          if (v135 <= 0xFFFFFFFFFFFFFFF7 && v135 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v135);
            *(void *)(a2 + v134) = v135 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket6ForApp;
          goto LABEL_746;
        case 0x34u:
          *(void *)(a1 + 1176) |= 0x4000000uLL;
          uint64_t v136 = *v3;
          unint64_t v137 = *(void *)(a2 + v136);
          if (v137 <= 0xFFFFFFFFFFFFFFF7 && v137 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v137);
            *(void *)(a2 + v136) = v137 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket7ForApp;
          goto LABEL_746;
        case 0x35u:
          *(void *)(a1 + 1176) |= 0x8000000uLL;
          uint64_t v138 = *v3;
          unint64_t v139 = *(void *)(a2 + v138);
          if (v139 <= 0xFFFFFFFFFFFFFFF7 && v139 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v139);
            *(void *)(a2 + v138) = v139 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket8ForApp;
          goto LABEL_746;
        case 0x36u:
          *(void *)(a1 + 1176) |= 0x10000000uLL;
          uint64_t v140 = *v3;
          unint64_t v141 = *(void *)(a2 + v140);
          if (v141 <= 0xFFFFFFFFFFFFFFF7 && v141 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v141);
            *(void *)(a2 + v140) = v141 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket9ForApp;
          goto LABEL_746;
        case 0x37u:
          *(void *)(a1 + 1176) |= 0x20uLL;
          uint64_t v142 = *v3;
          unint64_t v143 = *(void *)(a2 + v142);
          if (v143 <= 0xFFFFFFFFFFFFFFF7 && v143 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v143);
            *(void *)(a2 + v142) = v143 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket10ForApp;
          goto LABEL_746;
        case 0x38u:
          *(void *)(a1 + 1176) |= 0x40uLL;
          uint64_t v144 = *v3;
          unint64_t v145 = *(void *)(a2 + v144);
          if (v145 <= 0xFFFFFFFFFFFFFFF7 && v145 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v145);
            *(void *)(a2 + v144) = v145 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket11ForApp;
          goto LABEL_746;
        case 0x39u:
          *(void *)(a1 + 1176) |= 0x80uLL;
          uint64_t v146 = *v3;
          unint64_t v147 = *(void *)(a2 + v146);
          if (v147 <= 0xFFFFFFFFFFFFFFF7 && v147 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v147);
            *(void *)(a2 + v146) = v147 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket12ForApp;
          goto LABEL_746;
        case 0x3Au:
          *(void *)(a1 + 1176) |= 0x100uLL;
          uint64_t v148 = *v3;
          unint64_t v149 = *(void *)(a2 + v148);
          if (v149 <= 0xFFFFFFFFFFFFFFF7 && v149 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v149);
            *(void *)(a2 + v148) = v149 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket13ForApp;
          goto LABEL_746;
        case 0x3Bu:
          *(void *)(a1 + 1176) |= 0x200uLL;
          uint64_t v150 = *v3;
          unint64_t v151 = *(void *)(a2 + v150);
          if (v151 <= 0xFFFFFFFFFFFFFFF7 && v151 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v151);
            *(void *)(a2 + v150) = v151 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket14ForApp;
          goto LABEL_746;
        case 0x3Cu:
          *(void *)(a1 + 1176) |= 0x400uLL;
          uint64_t v152 = *v3;
          unint64_t v153 = *(void *)(a2 + v152);
          if (v153 <= 0xFFFFFFFFFFFFFFF7 && v153 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v153);
            *(void *)(a2 + v152) = v153 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket15ForApp;
          goto LABEL_746;
        case 0x3Du:
          *(void *)(a1 + 1176) |= 0x800uLL;
          uint64_t v154 = *v3;
          unint64_t v155 = *(void *)(a2 + v154);
          if (v155 <= 0xFFFFFFFFFFFFFFF7 && v155 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v155);
            *(void *)(a2 + v154) = v155 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket16ForApp;
          goto LABEL_746;
        case 0x3Eu:
          *(void *)(a1 + 1176) |= 0x1000uLL;
          uint64_t v156 = *v3;
          unint64_t v157 = *(void *)(a2 + v156);
          if (v157 <= 0xFFFFFFFFFFFFFFF7 && v157 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v157);
            *(void *)(a2 + v156) = v157 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket17ForApp;
          goto LABEL_746;
        case 0x3Fu:
          *(void *)(a1 + 1176) |= 0x2000uLL;
          uint64_t v158 = *v3;
          unint64_t v159 = *(void *)(a2 + v158);
          if (v159 <= 0xFFFFFFFFFFFFFFF7 && v159 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v159);
            *(void *)(a2 + v158) = v159 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket18ForApp;
          goto LABEL_746;
        case 0x40u:
          *(void *)(a1 + 1176) |= 0x4000uLL;
          uint64_t v160 = *v3;
          unint64_t v161 = *(void *)(a2 + v160);
          if (v161 <= 0xFFFFFFFFFFFFFFF7 && v161 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v161);
            *(void *)(a2 + v160) = v161 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket19ForApp;
          goto LABEL_746;
        case 0x41u:
          *(void *)(a1 + 1176) |= 0x10000uLL;
          uint64_t v162 = *v3;
          unint64_t v163 = *(void *)(a2 + v162);
          if (v163 <= 0xFFFFFFFFFFFFFFF7 && v163 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v163);
            *(void *)(a2 + v162) = v163 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket20ForApp;
          goto LABEL_746;
        case 0x42u:
          *(void *)(a1 + 1176) |= 0x20000uLL;
          uint64_t v164 = *v3;
          unint64_t v165 = *(void *)(a2 + v164);
          if (v165 <= 0xFFFFFFFFFFFFFFF7 && v165 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v165);
            *(void *)(a2 + v164) = v165 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket21ForApp;
          goto LABEL_746;
        case 0x43u:
          *(void *)(a1 + 1176) |= 0x40000uLL;
          uint64_t v166 = *v3;
          unint64_t v167 = *(void *)(a2 + v166);
          if (v167 <= 0xFFFFFFFFFFFFFFF7 && v167 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v167);
            *(void *)(a2 + v166) = v167 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket22ForApp;
          goto LABEL_746;
        case 0x44u:
          *(void *)(a1 + 1176) |= 0x80000uLL;
          uint64_t v168 = *v3;
          unint64_t v169 = *(void *)(a2 + v168);
          if (v169 <= 0xFFFFFFFFFFFFFFF7 && v169 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v169);
            *(void *)(a2 + v168) = v169 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket23ForApp;
          goto LABEL_746;
        case 0x45u:
          *(void *)(a1 + 1176) |= 0x100000uLL;
          uint64_t v170 = *v3;
          unint64_t v171 = *(void *)(a2 + v170);
          if (v171 <= 0xFFFFFFFFFFFFFFF7 && v171 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v171);
            *(void *)(a2 + v170) = v171 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTimeBucket24ForApp;
          goto LABEL_746;
        case 0x46u:
          *(void *)(a1 + 1176) |= 0x800000000uLL;
          uint64_t v172 = *v3;
          unint64_t v173 = *(void *)(a2 + v172);
          if (v173 <= 0xFFFFFFFFFFFFFFF7 && v173 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v173);
            *(void *)(a2 + v172) = v173 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesOnDayOfWeekSundayForApp;
          goto LABEL_746;
        case 0x47u:
          *(void *)(a1 + 1176) |= 0x200000000uLL;
          uint64_t v174 = *v3;
          unint64_t v175 = *(void *)(a2 + v174);
          if (v175 <= 0xFFFFFFFFFFFFFFF7 && v175 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v175);
            *(void *)(a2 + v174) = v175 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesOnDayOfWeekMondayForApp;
          goto LABEL_746;
        case 0x48u:
          *(void *)(a1 + 1176) |= 0x2000000000uLL;
          uint64_t v176 = *v3;
          unint64_t v177 = *(void *)(a2 + v176);
          if (v177 <= 0xFFFFFFFFFFFFFFF7 && v177 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v177);
            *(void *)(a2 + v176) = v177 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesOnDayOfWeekTuesdayForApp;
          goto LABEL_746;
        case 0x49u:
          *(void *)(a1 + 1176) |= 0x4000000000uLL;
          uint64_t v178 = *v3;
          unint64_t v179 = *(void *)(a2 + v178);
          if (v179 <= 0xFFFFFFFFFFFFFFF7 && v179 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v179);
            *(void *)(a2 + v178) = v179 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesOnDayOfWeekWednesdayForApp;
          goto LABEL_746;
        case 0x4Au:
          *(void *)(a1 + 1176) |= 0x1000000000uLL;
          uint64_t v180 = *v3;
          unint64_t v181 = *(void *)(a2 + v180);
          if (v181 <= 0xFFFFFFFFFFFFFFF7 && v181 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v181);
            *(void *)(a2 + v180) = v181 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesOnDayOfWeekThursdayForApp;
          goto LABEL_746;
        case 0x4Bu:
          *(void *)(a1 + 1176) |= 0x100000000uLL;
          uint64_t v182 = *v3;
          unint64_t v183 = *(void *)(a2 + v182);
          if (v183 <= 0xFFFFFFFFFFFFFFF7 && v183 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v183);
            *(void *)(a2 + v182) = v183 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesOnDayOfWeekFridayForApp;
          goto LABEL_746;
        case 0x4Cu:
          *(void *)(a1 + 1176) |= 0x400000000uLL;
          uint64_t v184 = *v3;
          unint64_t v185 = *(void *)(a2 + v184);
          if (v185 <= 0xFFFFFFFFFFFFFFF7 && v185 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v185);
            *(void *)(a2 + v184) = v185 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesOnDayOfWeekSaturdayForApp;
          goto LABEL_746;
        case 0x4Du:
          *(void *)(a1 + 1168) |= 0x200uLL;
          uint64_t v186 = *v3;
          unint64_t v187 = *(void *)(a2 + v186);
          if (v187 <= 0xFFFFFFFFFFFFFFF7 && v187 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v187);
            *(void *)(a2 + v186) = v187 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtCoarseGeoHash0ForApp;
          goto LABEL_746;
        case 0x4Eu:
          *(void *)(a1 + 1168) |= 0x400uLL;
          uint64_t v188 = *v3;
          unint64_t v189 = *(void *)(a2 + v188);
          if (v189 <= 0xFFFFFFFFFFFFFFF7 && v189 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v189);
            *(void *)(a2 + v188) = v189 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtCoarseGeoHash1ForApp;
          goto LABEL_746;
        case 0x4Fu:
          *(void *)(a1 + 1168) |= 0x800uLL;
          uint64_t v190 = *v3;
          unint64_t v191 = *(void *)(a2 + v190);
          if (v191 <= 0xFFFFFFFFFFFFFFF7 && v191 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v191);
            *(void *)(a2 + v190) = v191 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtCoarseGeoHash2ForApp;
          goto LABEL_746;
        case 0x50u:
          *(void *)(a1 + 1168) |= 0x1000uLL;
          uint64_t v192 = *v3;
          unint64_t v193 = *(void *)(a2 + v192);
          if (v193 <= 0xFFFFFFFFFFFFFFF7 && v193 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v193);
            *(void *)(a2 + v192) = v193 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtCoarseGeoHash3ForApp;
          goto LABEL_746;
        case 0x51u:
          *(void *)(a1 + 1168) |= 0x2000uLL;
          uint64_t v194 = *v3;
          unint64_t v195 = *(void *)(a2 + v194);
          if (v195 <= 0xFFFFFFFFFFFFFFF7 && v195 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v195);
            *(void *)(a2 + v194) = v195 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtCoarseGeoHash4ForApp;
          goto LABEL_746;
        case 0x52u:
          *(void *)(a1 + 1168) |= 0x4000uLL;
          uint64_t v196 = *v3;
          unint64_t v197 = *(void *)(a2 + v196);
          if (v197 <= 0xFFFFFFFFFFFFFFF7 && v197 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v197);
            *(void *)(a2 + v196) = v197 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtCoarseGeoHash5ForApp;
          goto LABEL_746;
        case 0x53u:
          *(void *)(a1 + 1168) |= 0x8000uLL;
          uint64_t v198 = *v3;
          unint64_t v199 = *(void *)(a2 + v198);
          if (v199 <= 0xFFFFFFFFFFFFFFF7 && v199 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v199);
            *(void *)(a2 + v198) = v199 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtCoarseGeoHash6ForApp;
          goto LABEL_746;
        case 0x54u:
          *(void *)(a1 + 1168) |= 0x10000uLL;
          uint64_t v200 = *v3;
          unint64_t v201 = *(void *)(a2 + v200);
          if (v201 <= 0xFFFFFFFFFFFFFFF7 && v201 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v201);
            *(void *)(a2 + v200) = v201 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtCoarseGeoHash7ForApp;
          goto LABEL_746;
        case 0x55u:
          *(void *)(a1 + 1168) |= 0x20000uLL;
          uint64_t v202 = *v3;
          unint64_t v203 = *(void *)(a2 + v202);
          if (v203 <= 0xFFFFFFFFFFFFFFF7 && v203 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v203);
            *(void *)(a2 + v202) = v203 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtCoarseGeoHash8ForApp;
          goto LABEL_746;
        case 0x56u:
          *(void *)(a1 + 1168) |= 0x40000uLL;
          uint64_t v204 = *v3;
          unint64_t v205 = *(void *)(a2 + v204);
          if (v205 <= 0xFFFFFFFFFFFFFFF7 && v205 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v205);
            *(void *)(a2 + v204) = v205 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtCoarseGeoHash9ForApp;
          goto LABEL_746;
        case 0x57u:
          *(void *)(a1 + 1168) |= 0x4000000uLL;
          uint64_t v206 = *v3;
          unint64_t v207 = *(void *)(a2 + v206);
          if (v207 <= 0xFFFFFFFFFFFFFFF7 && v207 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v207);
            *(void *)(a2 + v206) = v207 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash0ForApp;
          goto LABEL_746;
        case 0x58u:
          *(void *)(a1 + 1168) |= 0x100000000uLL;
          uint64_t v208 = *v3;
          unint64_t v209 = *(void *)(a2 + v208);
          if (v209 <= 0xFFFFFFFFFFFFFFF7 && v209 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v209);
            *(void *)(a2 + v208) = v209 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash1ForApp;
          goto LABEL_746;
        case 0x59u:
          *(void *)(a1 + 1168) |= 0x200000000uLL;
          uint64_t v210 = *v3;
          unint64_t v211 = *(void *)(a2 + v210);
          if (v211 <= 0xFFFFFFFFFFFFFFF7 && v211 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v211);
            *(void *)(a2 + v210) = v211 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash2ForApp;
          goto LABEL_746;
        case 0x5Au:
          *(void *)(a1 + 1168) |= 0x400000000uLL;
          uint64_t v212 = *v3;
          unint64_t v213 = *(void *)(a2 + v212);
          if (v213 <= 0xFFFFFFFFFFFFFFF7 && v213 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v213);
            *(void *)(a2 + v212) = v213 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash3ForApp;
          goto LABEL_746;
        case 0x5Bu:
          *(void *)(a1 + 1168) |= 0x800000000uLL;
          uint64_t v214 = *v3;
          unint64_t v215 = *(void *)(a2 + v214);
          if (v215 <= 0xFFFFFFFFFFFFFFF7 && v215 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v215);
            *(void *)(a2 + v214) = v215 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash4ForApp;
          goto LABEL_746;
        case 0x5Cu:
          *(void *)(a1 + 1168) |= 0x1000000000uLL;
          uint64_t v216 = *v3;
          unint64_t v217 = *(void *)(a2 + v216);
          if (v217 <= 0xFFFFFFFFFFFFFFF7 && v217 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v217);
            *(void *)(a2 + v216) = v217 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash5ForApp;
          goto LABEL_746;
        case 0x5Du:
          *(void *)(a1 + 1168) |= 0x2000000000uLL;
          uint64_t v218 = *v3;
          unint64_t v219 = *(void *)(a2 + v218);
          if (v219 <= 0xFFFFFFFFFFFFFFF7 && v219 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v219);
            *(void *)(a2 + v218) = v219 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash6ForApp;
          goto LABEL_746;
        case 0x5Eu:
          *(void *)(a1 + 1168) |= 0x4000000000uLL;
          uint64_t v220 = *v3;
          unint64_t v221 = *(void *)(a2 + v220);
          if (v221 <= 0xFFFFFFFFFFFFFFF7 && v221 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v221);
            *(void *)(a2 + v220) = v221 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash7ForApp;
          goto LABEL_746;
        case 0x5Fu:
          *(void *)(a1 + 1168) |= 0x8000000000uLL;
          uint64_t v222 = *v3;
          unint64_t v223 = *(void *)(a2 + v222);
          if (v223 <= 0xFFFFFFFFFFFFFFF7 && v223 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v223);
            *(void *)(a2 + v222) = v223 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash8ForApp;
          goto LABEL_746;
        case 0x60u:
          *(void *)(a1 + 1168) |= 0x10000000000uLL;
          uint64_t v224 = *v3;
          unint64_t v225 = *(void *)(a2 + v224);
          if (v225 <= 0xFFFFFFFFFFFFFFF7 && v225 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v225);
            *(void *)(a2 + v224) = v225 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash9ForApp;
          goto LABEL_746;
        case 0x61u:
          *(void *)(a1 + 1168) |= 0x8000000uLL;
          uint64_t v226 = *v3;
          unint64_t v227 = *(void *)(a2 + v226);
          if (v227 <= 0xFFFFFFFFFFFFFFF7 && v227 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v227);
            *(void *)(a2 + v226) = v227 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash10ForApp;
          goto LABEL_746;
        case 0x62u:
          *(void *)(a1 + 1168) |= 0x10000000uLL;
          uint64_t v228 = *v3;
          unint64_t v229 = *(void *)(a2 + v228);
          if (v229 <= 0xFFFFFFFFFFFFFFF7 && v229 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v229);
            *(void *)(a2 + v228) = v229 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash11ForApp;
          goto LABEL_746;
        case 0x63u:
          *(void *)(a1 + 1168) |= 0x20000000uLL;
          uint64_t v230 = *v3;
          unint64_t v231 = *(void *)(a2 + v230);
          if (v231 <= 0xFFFFFFFFFFFFFFF7 && v231 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v231);
            *(void *)(a2 + v230) = v231 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash12ForApp;
          goto LABEL_746;
        case 0x64u:
          *(void *)(a1 + 1168) |= 0x40000000uLL;
          uint64_t v232 = *v3;
          unint64_t v233 = *(void *)(a2 + v232);
          if (v233 <= 0xFFFFFFFFFFFFFFF7 && v233 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v233);
            *(void *)(a2 + v232) = v233 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash13ForApp;
          goto LABEL_746;
        case 0x65u:
          *(void *)(a1 + 1168) |= 0x80000000uLL;
          uint64_t v234 = *v3;
          unint64_t v235 = *(void *)(a2 + v234);
          if (v235 <= 0xFFFFFFFFFFFFFFF7 && v235 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v235);
            *(void *)(a2 + v234) = v235 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash14ForApp;
          goto LABEL_746;
        case 0x66u:
          *(void *)(a1 + 1176) |= 0x100000000000uLL;
          uint64_t v236 = *v3;
          unint64_t v237 = *(void *)(a2 + v236);
          if (v237 <= 0xFFFFFFFFFFFFFFF7 && v237 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v237);
            *(void *)(a2 + v236) = v237 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appNumberOfSpecificGeohashesForApp;
          goto LABEL_746;
        case 0x67u:
          *(void *)(a1 + 1176) |= 0x80000000000uLL;
          uint64_t v238 = *v3;
          unint64_t v239 = *(void *)(a2 + v238);
          if (v239 <= 0xFFFFFFFFFFFFFFF7 && v239 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v239);
            *(void *)(a2 + v238) = v239 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appNumberOfCoarseGeohashesForApp;
          goto LABEL_746;
        case 0x68u:
          *(void *)(a1 + 1168) |= 0x40uLL;
          uint64_t v240 = *v3;
          unint64_t v241 = *(void *)(a2 + v240);
          if (v241 <= 0xFFFFFFFFFFFFFFF7 && v241 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v241);
            *(void *)(a2 + v240) = v241 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appEntropyForTimeBuckets;
          goto LABEL_746;
        case 0x69u:
          *(void *)(a1 + 1168) |= 0x20uLL;
          uint64_t v242 = *v3;
          unint64_t v243 = *(void *)(a2 + v242);
          if (v243 <= 0xFFFFFFFFFFFFFFF7 && v243 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v243);
            *(void *)(a2 + v242) = v243 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appEntropyForSpecificGeoHash;
          goto LABEL_746;
        case 0x6Au:
          *(void *)(a1 + 1168) |= 0x10uLL;
          uint64_t v244 = *v3;
          unint64_t v245 = *(void *)(a2 + v244);
          if (v245 <= 0xFFFFFFFFFFFFFFF7 && v245 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v245);
            *(void *)(a2 + v244) = v245 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appEntropyForCoarseGeoHash;
          goto LABEL_746;
        case 0x6Bu:
          *(void *)(a1 + 1168) |= 0x40000000000uLL;
          uint64_t v246 = *v3;
          unint64_t v247 = *(void *)(a2 + v246);
          if (v247 <= 0xFFFFFFFFFFFFFFF7 && v247 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v247);
            *(void *)(a2 + v246) = v247 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHashForAppInContext;
          goto LABEL_746;
        case 0x6Cu:
          *(void *)(a1 + 1168) |= 0x100000uLL;
          uint64_t v248 = *v3;
          unint64_t v249 = *(void *)(a2 + v248);
          if (v249 <= 0xFFFFFFFFFFFFFFF7 && v249 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v249);
            *(void *)(a2 + v248) = v249 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtCoarseGeoHashForAppInContext;
          goto LABEL_746;
        case 0x6Du:
          *(void *)(a1 + 1168) |= 0x400000uLL;
          uint64_t v250 = *v3;
          unint64_t v251 = *(void *)(a2 + v250);
          if (v251 <= 0xFFFFFFFFFFFFFFF7 && v251 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v251);
            *(void *)(a2 + v250) = v251 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtDayOfWeekForApp;
          goto LABEL_746;
        case 0x6Eu:
          *(void *)(a1 + 1168) |= 0x200000000000uLL;
          uint64_t v252 = *v3;
          unint64_t v253 = *(void *)(a2 + v252);
          if (v253 <= 0xFFFFFFFFFFFFFFF7 && v253 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v253);
            *(void *)(a2 + v252) = v253 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtTimeAndDayForAppInContext;
          goto LABEL_746;
        case 0x6Fu:
          *(void *)(a1 + 1168) |= 0x400000000000uLL;
          uint64_t v254 = *v3;
          unint64_t v255 = *(void *)(a2 + v254);
          if (v255 <= 0xFFFFFFFFFFFFFFF7 && v255 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v255);
            *(void *)(a2 + v254) = v255 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtTimeAndDayInContext;
          goto LABEL_746;
        case 0x70u:
          *(void *)(a1 + 1168) |= 0x100000000000uLL;
          uint64_t v256 = *v3;
          unint64_t v257 = *(void *)(a2 + v256);
          if (v257 <= 0xFFFFFFFFFFFFFFF7 && v257 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v257);
            *(void *)(a2 + v256) = v257 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtTimeAndDayForApp;
          goto LABEL_746;
        case 0x71u:
          *(void *)(a1 + 1168) |= 0x200000uLL;
          uint64_t v258 = *v3;
          unint64_t v259 = *(void *)(a2 + v258);
          if (v259 <= 0xFFFFFFFFFFFFFFF7 && v259 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v259);
            *(void *)(a2 + v258) = v259 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtCoarseGeoHashInContext;
          goto LABEL_746;
        case 0x72u:
          *(void *)(a1 + 1168) |= 0x80000uLL;
          uint64_t v260 = *v3;
          unint64_t v261 = *(void *)(a2 + v260);
          if (v261 <= 0xFFFFFFFFFFFFFFF7 && v261 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v261);
            *(void *)(a2 + v260) = v261 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtCoarseGeoHashForApp;
          goto LABEL_746;
        case 0x73u:
          *(void *)(a1 + 1168) |= 0x80000000000uLL;
          uint64_t v262 = *v3;
          unint64_t v263 = *(void *)(a2 + v262);
          if (v263 <= 0xFFFFFFFFFFFFFFF7 && v263 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v263);
            *(void *)(a2 + v262) = v263 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHashInContext;
          goto LABEL_746;
        case 0x74u:
          *(void *)(a1 + 1168) |= 0x20000000000uLL;
          uint64_t v264 = *v3;
          unint64_t v265 = *(void *)(a2 + v264);
          if (v265 <= 0xFFFFFFFFFFFFFFF7 && v265 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v265);
            *(void *)(a2 + v264) = v265 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHashForApp;
          goto LABEL_746;
        case 0x75u:
          *(void *)(a1 + 1176) |= 1uLL;
          uint64_t v266 = *v3;
          unint64_t v267 = *(void *)(a2 + v266);
          if (v267 <= 0xFFFFFFFFFFFFFFF7 && v267 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v267);
            *(void *)(a2 + v266) = v267 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesForAllAppsAndContextsDecayedAtCoarseContextRate;
          goto LABEL_746;
        case 0x76u:
          *(void *)(a1 + 1176) |= 2uLL;
          uint64_t v268 = *v3;
          unint64_t v269 = *(void *)(a2 + v268);
          if (v269 <= 0xFFFFFFFFFFFFFFF7 && v269 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v269);
            *(void *)(a2 + v268) = v269 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesForAllAppsAndContextsDecayedAtSpecificContextRate;
          goto LABEL_746;
        case 0x77u:
          char v270 = *(unsigned char *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 2u;
          *(unsigned char *)(a1 + 1186) = v270;
          uint64_t v271 = *v3;
          unint64_t v272 = *(void *)(a2 + v271);
          if (v272 <= 0xFFFFFFFFFFFFFFF7 && v272 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v272);
            *(void *)(a2 + v271) = v272 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__isLocationServicesDisabled;
          goto LABEL_746;
        case 0x78u:
          *(void *)(a1 + 1176) |= 0x40000000uLL;
          uint64_t v273 = *v3;
          unint64_t v274 = *(void *)(a2 + v273);
          if (v274 <= 0xFFFFFFFFFFFFFFF7 && v274 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v274);
            *(void *)(a2 + v273) = v274 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTwoHourTimeBucketForAppInContext;
          goto LABEL_746;
        case 0x79u:
          *(void *)(a1 + 1176) |= 0x80000000uLL;
          uint64_t v275 = *v3;
          unint64_t v276 = *(void *)(a2 + v275);
          if (v276 <= 0xFFFFFFFFFFFFFFF7 && v276 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v276);
            *(void *)(a2 + v275) = v276 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTwoHourTimeBucketInContext;
          goto LABEL_746;
        case 0x7Au:
          *(void *)(a1 + 1176) |= 0x20000000uLL;
          uint64_t v277 = *v3;
          unint64_t v278 = *(void *)(a2 + v277);
          if (v278 <= 0xFFFFFFFFFFFFFFF7 && v278 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v278);
            *(void *)(a2 + v277) = v278 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInTwoHourTimeBucketForApp;
          goto LABEL_746;
        case 0x7Bu:
          *(void *)(a1 + 1176) |= 0x20000000000000uLL;
          uint64_t v279 = *v3;
          unint64_t v280 = *(void *)(a2 + v279);
          if (v280 <= 0xFFFFFFFFFFFFFFF7 && v280 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v280);
            *(void *)(a2 + v279) = v280 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__currentTimeBucketFromZeroToTwentyFour;
          goto LABEL_746;
        case 0x7Cu:
          *(void *)(a1 + 1168) |= 0x400000000000000uLL;
          uint64_t v281 = *v3;
          unint64_t v282 = *(void *)(a2 + v281);
          if (v282 <= 0xFFFFFFFFFFFFFFF7 && v282 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v282);
            *(void *)(a2 + v281) = v282 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtZoom7GeoHashForAppInContext;
          goto LABEL_746;
        case 0x7Du:
          *(void *)(a1 + 1168) |= 0x800000000000000uLL;
          uint64_t v283 = *v3;
          unint64_t v284 = *(void *)(a2 + v283);
          if (v284 <= 0xFFFFFFFFFFFFFFF7 && v284 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v284);
            *(void *)(a2 + v283) = v284 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtZoom7GeoHashInContext;
          goto LABEL_746;
        case 0x7Eu:
          *(void *)(a1 + 1168) |= 0x200000000000000uLL;
          uint64_t v285 = *v3;
          unint64_t v286 = *(void *)(a2 + v285);
          if (v286 <= 0xFFFFFFFFFFFFFFF7 && v286 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v286);
            *(void *)(a2 + v285) = v286 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtZoom7GeoHashForApp;
          goto LABEL_746;
        case 0x7Fu:
          *(void *)(a1 + 1168) |= 0x800000000000uLL;
          uint64_t v287 = *v3;
          unint64_t v288 = *(void *)(a2 + v287);
          if (v288 <= 0xFFFFFFFFFFFFFFF7 && v288 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v288);
            *(void *)(a2 + v287) = v288 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtZoom7GeoHash0ForApp;
          goto LABEL_746;
        case 0x80u:
          *(void *)(a1 + 1168) |= 0x1000000000000uLL;
          uint64_t v289 = *v3;
          unint64_t v290 = *(void *)(a2 + v289);
          if (v290 <= 0xFFFFFFFFFFFFFFF7 && v290 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v290);
            *(void *)(a2 + v289) = v290 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtZoom7GeoHash1ForApp;
          goto LABEL_746;
        case 0x81u:
          *(void *)(a1 + 1168) |= 0x2000000000000uLL;
          uint64_t v291 = *v3;
          unint64_t v292 = *(void *)(a2 + v291);
          if (v292 <= 0xFFFFFFFFFFFFFFF7 && v292 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v292);
            *(void *)(a2 + v291) = v292 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtZoom7GeoHash2ForApp;
          goto LABEL_746;
        case 0x82u:
          *(void *)(a1 + 1168) |= 0x4000000000000uLL;
          uint64_t v293 = *v3;
          unint64_t v294 = *(void *)(a2 + v293);
          if (v294 <= 0xFFFFFFFFFFFFFFF7 && v294 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v294);
            *(void *)(a2 + v293) = v294 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtZoom7GeoHash3ForApp;
          goto LABEL_746;
        case 0x83u:
          *(void *)(a1 + 1168) |= 0x8000000000000uLL;
          uint64_t v295 = *v3;
          unint64_t v296 = *(void *)(a2 + v295);
          if (v296 <= 0xFFFFFFFFFFFFFFF7 && v296 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v296);
            *(void *)(a2 + v295) = v296 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtZoom7GeoHash4ForApp;
          goto LABEL_746;
        case 0x84u:
          *(void *)(a1 + 1168) |= 0x10000000000000uLL;
          uint64_t v297 = *v3;
          unint64_t v298 = *(void *)(a2 + v297);
          if (v298 <= 0xFFFFFFFFFFFFFFF7 && v298 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v298);
            *(void *)(a2 + v297) = v298 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtZoom7GeoHash5ForApp;
          goto LABEL_746;
        case 0x85u:
          *(void *)(a1 + 1168) |= 0x20000000000000uLL;
          uint64_t v299 = *v3;
          unint64_t v300 = *(void *)(a2 + v299);
          if (v300 <= 0xFFFFFFFFFFFFFFF7 && v300 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v300);
            *(void *)(a2 + v299) = v300 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtZoom7GeoHash6ForApp;
          goto LABEL_746;
        case 0x86u:
          *(void *)(a1 + 1168) |= 0x40000000000000uLL;
          uint64_t v301 = *v3;
          unint64_t v302 = *(void *)(a2 + v301);
          if (v302 <= 0xFFFFFFFFFFFFFFF7 && v302 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v302);
            *(void *)(a2 + v301) = v302 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtZoom7GeoHash7ForApp;
          goto LABEL_746;
        case 0x87u:
          *(void *)(a1 + 1168) |= 0x80000000000000uLL;
          uint64_t v303 = *v3;
          unint64_t v304 = *(void *)(a2 + v303);
          if (v304 <= 0xFFFFFFFFFFFFFFF7 && v304 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v304);
            *(void *)(a2 + v303) = v304 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtZoom7GeoHash8ForApp;
          goto LABEL_746;
        case 0x88u:
          *(void *)(a1 + 1168) |= 0x100000000000000uLL;
          uint64_t v305 = *v3;
          unint64_t v306 = *(void *)(a2 + v305);
          if (v306 <= 0xFFFFFFFFFFFFFFF7 && v306 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v306);
            *(void *)(a2 + v305) = v306 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtZoom7GeoHash9ForApp;
          goto LABEL_746;
        case 0x89u:
          *(void *)(a1 + 1168) |= 0x80uLL;
          uint64_t v307 = *v3;
          unint64_t v308 = *(void *)(a2 + v307);
          if (v308 <= 0xFFFFFFFFFFFFFFF7 && v308 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v308);
            *(void *)(a2 + v307) = v308 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appEntropyForZoom7GeoHash;
          goto LABEL_746;
        case 0x8Au:
          *(void *)(a1 + 1176) |= 0x200000000000uLL;
          uint64_t v309 = *v3;
          unint64_t v310 = *(void *)(a2 + v309);
          if (v310 <= 0xFFFFFFFFFFFFFFF7 && v310 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v310);
            *(void *)(a2 + v309) = v310 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appNumberOfZoom7GeohashesForApp;
          goto LABEL_746;
        case 0x8Bu:
          *(void *)(a1 + 1168) |= 0x2000000uLL;
          uint64_t v311 = *v3;
          unint64_t v312 = *(void *)(a2 + v311);
          if (v312 <= 0xFFFFFFFFFFFFFFF7 && v312 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v312);
            *(void *)(a2 + v311) = v312 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSSIDForAppInContext;
          goto LABEL_746;
        case 0x8Cu:
          *(void *)(a1 + 1168) |= 0x1000000uLL;
          uint64_t v313 = *v3;
          unint64_t v314 = *(void *)(a2 + v313);
          if (v314 <= 0xFFFFFFFFFFFFFFF7 && v314 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v314);
            *(void *)(a2 + v313) = v314 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSSIDForApp;
          goto LABEL_746;
        case 0x8Du:
          *(void *)(a1 + 1176) |= 4uLL;
          uint64_t v315 = *v3;
          unint64_t v316 = *(void *)(a2 + v315);
          if (v316 <= 0xFFFFFFFFFFFFFFF7 && v316 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v316);
            *(void *)(a2 + v315) = v316 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesForCoreMotionForAppInContext;
          goto LABEL_746;
        case 0x8Eu:
          *(void *)(a1 + 1176) |= 8uLL;
          uint64_t v317 = *v3;
          unint64_t v318 = *(void *)(a2 + v317);
          if (v318 <= 0xFFFFFFFFFFFFFFF7 && v318 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v318);
            *(void *)(a2 + v317) = v318 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesInAirplaneModeForAppInContext;
          goto LABEL_746;
        case 0x8Fu:
          char v319 = *(unsigned char *)(a1 + 1186);
          *(_WORD *)(a1 + 1184) |= 0x40u;
          *(unsigned char *)(a1 + 1186) = v319;
          uint64_t v320 = *v3;
          unint64_t v321 = *(void *)(a2 + v320);
          if (v321 <= 0xFFFFFFFFFFFFFFF7 && v321 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v321);
            *(void *)(a2 + v320) = v321 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__poiPopularityForAppInContext;
          goto LABEL_746;
        case 0x90u:
          *(void *)(a1 + 1168) |= 0x100uLL;
          uint64_t v322 = *v3;
          unint64_t v323 = *(void *)(a2 + v322);
          if (v323 <= 0xFFFFFFFFFFFFFFF7 && v323 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v323);
            *(void *)(a2 + v322) = v323 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchPopularityAtPOIForAppInContext;
          goto LABEL_746;
        case 0x91u:
          *(void *)(a1 + 1168) |= 0x800000uLL;
          uint64_t v324 = *v3;
          unint64_t v325 = *(void *)(a2 + v324);
          if (v325 <= 0xFFFFFFFFFFFFFFF7 && v325 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v325);
            *(void *)(a2 + v324) = v325 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v21 = 0;
          }
          v326 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtPOIForAppInContext;
LABEL_746:
          *(void *)(a1 + *v326) = v21;
          goto LABEL_747;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
LABEL_747:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          break;
      }
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void OUTLINED_FUNCTION_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

id ATXSleepSuggestedHomePageWasCreatedDuringMigration()
{
  id v0 = objc_alloc(MEMORY[0x1E4F1CB18]);
  uint64_t v1 = (void *)[v0 initWithSuiteName:*MEMORY[0x1E4F4B688]];
  uint64_t v2 = [v1 objectForKey:@"ATXSleepSuggestedHomePageWasCreatedDuringMigration"];

  if (v2)
  {
    v3 = [v1 objectForKey:@"ATXSleepSuggestedHomePageWasCreatedDuringMigration"];
  }
  else
  {
    uint64_t v15 = 0;
    v16 = &v15;
    uint64_t v17 = 0x2050000000;
    uint64_t v4 = (void *)getHKSPSleepStoreClass_softClass;
    uint64_t v18 = getHKSPSleepStoreClass_softClass;
    if (!getHKSPSleepStoreClass_softClass)
    {
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 3221225472;
      v14[2] = __getHKSPSleepStoreClass_block_invoke;
      v14[3] = &unk_1E68AB438;
      v14[4] = &v15;
      __getHKSPSleepStoreClass_block_invoke((uint64_t)v14);
      uint64_t v4 = (void *)v16[3];
    }
    uint64_t v5 = v4;
    _Block_object_dispose(&v15, 8);
    if (v5)
    {
      uint64_t v6 = (void *)[[v5 alloc] initWithIdentifier:@"proactive-migration-thingy"];
      id v13 = 0;
      char v7 = [v6 currentSleepSettingsWithError:&v13];
      id v8 = v13;
      unsigned int v9 = v8;
      if (!v7 || v8)
      {
        uint64_t v11 = __atxlog_handle_home_screen();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          ATXSleepSuggestedHomePageWasCreatedDuringMigration_cold_2((uint64_t)v9, v11);
        }

        v3 = 0;
      }
      else
      {
        v3 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v7, "springBoardSuggestedPageCreated"));
        [v1 setObject:v3 forKey:@"ATXSleepSuggestedHomePageWasCreatedDuringMigration"];
      }
    }
    else
    {
      uint64_t v10 = __atxlog_handle_home_screen();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        ATXSleepSuggestedHomePageWasCreatedDuringMigration_cold_1(v10);
      }

      v3 = 0;
    }
  }

  return v3;
}

void sub_1D0FC9BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getHKSPSleepStoreClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!SleepLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __SleepLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    v3[5] = v3;
    long long v4 = xmmword_1E68AB458;
    uint64_t v5 = 0;
    SleepLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!SleepLibraryCore_frameworkLibrary) {
    __getHKSPSleepStoreClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("HKSPSleepStore");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getHKSPSleepStoreClass_block_invoke_cold_2();
  }
  getHKSPSleepStoreClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __SleepLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  SleepLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_1D0FCBC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D0FCC7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D0FCE0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void sub_1D0FD83C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 176), 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

uint64_t ATXMPBBlendingLayerRefreshTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    char v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 16;
          goto LABEL_38;
        case 2u:
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 44) |= 2u;
          while (2)
          {
            uint64_t v23 = *v3;
            unint64_t v24 = *(void *)(a2 + v23);
            if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
              *(void *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                BOOL v14 = v21++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_42;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v22) = 0;
          }
LABEL_42:
          uint64_t v32 = 40;
          goto LABEL_47;
        case 3u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 44) |= 1u;
          break;
        case 4u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 8;
          goto LABEL_38;
        case 5u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 32;
LABEL_38:
          uint64_t v31 = *(void **)(a1 + v18);
          *(void *)(a1 + v18) = v17;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v28 = *v3;
        unint64_t v29 = *(void *)(a2 + v28);
        if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
        *(void *)(a2 + v28) = v29 + 1;
        v22 |= (unint64_t)(v30 & 0x7F) << v26;
        if ((v30 & 0x80) == 0) {
          goto LABEL_44;
        }
        v26 += 7;
        BOOL v14 = v27++ >= 9;
        if (v14)
        {
          LODWORD(v22) = 0;
          goto LABEL_46;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_44:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v22) = 0;
      }
LABEL_46:
      uint64_t v32 = 24;
LABEL_47:
      *(_DWORD *)(a1 + v32) = v22;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D0FDB34C(_Unwind_Exception *a1)
{
  long long v4 = v2;
  objc_destroyWeak(v4);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1D0FDD4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1D0FDDAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1D0FDF8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D0FDFEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t ATXPBPredictionTimeContextReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    char v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 16) |= 1u;
        uint64_t v18 = *v3;
        unint64_t v19 = *(void *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
          *(void *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v20 = 0;
        }
        *(void *)(a1 + 8) = v20;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D0FE3CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

__CFString *ATXUserNotificationResolutionTypeToString(unint64_t a1)
{
  if (a1 > 3) {
    return @"error_ATXUserNotificationResolutionTotal";
  }
  else {
    return off_1E68ABCC8[a1];
  }
}

uint64_t ATXUserNotificationResolutionTypeForNotificationEventType(unint64_t a1)
{
  if (a1 > 0x13) {
    return 2;
  }
  else {
    return qword_1D142B060[a1];
  }
}

void sub_1D0FE66F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D0FE67A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D0FE6FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, _Unwind_Exception *exception_object,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,void *a44,uint64_t a45,void *a46)
{
  _Unwind_Resume(a1);
}

void sub_1D0FE7360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D0FE744C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D0FE74F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D0FE77A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1D0FE78C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D0FE8CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_1D0FE9B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  _Unwind_Resume(a1);
}

__CFString *engagementTypeForPrediction(uint64_t a1, int a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return @"NO";
  }
  uint64_t v3 = a1 - 2;
  if (unint64_t)(a1 - 2) < 7 && ((0x67u >> v3)) {
    return off_1E68ABF60[v3];
  }
  long long v4 = __atxlog_handle_default();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = [MEMORY[0x1E4F4AE58] engagementTypeToString:a1];
    engagementTypeForPrediction(v5, buf, v4);
  }

  uint64_t v6 = (void *)MEMORY[0x1E4F1CA00];
  char v7 = [MEMORY[0x1E4F4AE58] engagementTypeToString:a1];
  [v6 raise:*MEMORY[0x1E4F1C3B8], @"%@ is not a valid engagment type to call engagementTypeForPrediction with engaged==YES", v7 format];

  return @"Error";
}

void sub_1D0FE9EE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void addScoreInputsForPredictionItemToDictionary(ATXPredictionItem *a1, NSMutableDictionary *a2)
{
  uint64_t v3 = a2;
  for (uint64_t i = 4; i != 821; ++i)
  {
    double v5 = *((float *)&a1->key + i);
    if (fabs(v5) == INFINITY) {
      double v5 = -31337.0;
    }
    uint64_t v6 = [NSNumber numberWithDouble:v5];
    char v7 = +[_ATXScoreTypes stringForScoreInput:i - 4];
    [(NSMutableDictionary *)v3 setObject:v6 forKeyedSubscript:v7];
  }
  key = a1->key;
}

void sub_1D0FE9FEC(_Unwind_Exception *a1)
{
  double v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1D0FEA4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1D0FECE5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D0FED1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void **a15)
{
  a15 = (void **)&STACK[0xD50];
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100](&a15);

  _Unwind_Resume(a1);
}

void sub_1D0FED294(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D0FED2F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D0FED3E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D0FED530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D0FED82C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D0FEDB04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D0FEDDDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (id *)**a1;
  if (v2)
  {
    long long v4 = (id *)v1[1];
    double v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 412;
      }
      while (v4 != v2);
      double v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<ATXPredictionItem>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E68AB010, MEMORY[0x1E4FBA1C8]);
}

void sub_1D0FEDEFC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ATXPredictionItem>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x13E22CBCE4A903) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(3296 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

uint64_t std::__split_buffer<ATXPredictionItem>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    long long v4 = (id *)(i - 3296);
    *(void *)(a1 + 16) = v4;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1D0FEE278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D0FEE85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_1D0FEF8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_1D0FF3300(_Unwind_Exception *a1)
{
}

void OUTLINED_FUNCTION_1_1(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(&STACK[0x8E0], 8) = a1;
}

void OUTLINED_FUNCTION_4_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 8u);
}

void sub_1D0FF5850(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1D0FF6974(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_1_2(uint64_t a1, uint64_t a2)
{
  return a2;
}

id allRelevanceModelConfigs()
{
  v4[2] = *MEMORY[0x1E4F143B8];
  id v0 = objc_opt_new();
  v4[0] = v0;
  uint64_t v1 = objc_opt_new();
  v4[1] = v1;
  uint64_t v2 = [MEMORY[0x1E4F1C978] arrayWithObjects:v4 count:2];

  return v2;
}

uint64_t AWDProactiveAppPredictionActionTimeEstimateContainerReadFrom(void *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    char v7 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash5ForApp;
    char v8 = (int *)MEMORY[0x1E4F940B8];
    unsigned int v9 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash5ForApp;
    uint64_t v10 = &OBJC_IVAR___ATXPBTaskAgnosticBehaviorFeatureVector__appLaunchesAtSpecificGeoHash5ForApp;
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v11 = 0;
        unsigned int v12 = 0;
        unint64_t v13 = 0;
        while (1)
        {
          uint64_t v14 = *v3;
          unint64_t v15 = *(void *)(a2 + v14);
          if (v15 == -1 || v15 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + *v8) + v15);
          *(void *)(a2 + v14) = v15 + 1;
          v13 |= (unint64_t)(v16 & 0x7F) << v11;
          if ((v16 & 0x80) == 0) {
            goto LABEL_12;
          }
          v11 += 7;
          BOOL v17 = v12++ >= 9;
          if (v17)
          {
            unint64_t v13 = 0;
            int v18 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v18 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v13 = 0;
        }
LABEL_14:
        int v19 = v13 & 7;
        if (!v18 && v19 != 4)
        {
          switch((v13 >> 3))
          {
            case 1u:
              uint64_t v21 = PBReaderReadString();
              uint64_t v22 = (void *)a1[13];
              a1[13] = v21;

              goto LABEL_131;
            case 2u:
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              *((unsigned char *)a1 + v7[213]) |= 1u;
              while (2)
              {
                uint64_t v26 = *v3;
                unint64_t v27 = *(void *)(a2 + v26);
                if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v28 = *(unsigned char *)(*(void *)(a2 + *v8) + v27);
                  *(void *)(a2 + v26) = v27 + 1;
                  v25 |= (unint64_t)(v28 & 0x7F) << v23;
                  if (v28 < 0)
                  {
                    v23 += 7;
                    BOOL v17 = v24++ >= 9;
                    if (v17)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_95;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_95:
              uint64_t v62 = 112;
              goto LABEL_100;
            case 3u:
              unint64_t v29 = v10;
              char v30 = v9;
              uint64_t v31 = v7;
              uint64_t v32 = PBReaderReadString();
              if (v32) {
                [a1 addParameter:v32];
              }

              char v7 = v31;
              unsigned int v9 = v30;
              uint64_t v10 = v29;
              goto LABEL_131;
            case 4u:
              if (v19 != 2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v65 = 0;
                while (1)
                {
                  uint64_t v66 = *v3;
                  unint64_t v67 = *(void *)(a2 + v66);
                  if (v67 == -1 || v67 >= *(void *)(a2 + *v4)) {
                    goto LABEL_129;
                  }
                  char v68 = *(unsigned char *)(*(void *)(a2 + *v8) + v67);
                  *(void *)(a2 + v66) = v67 + 1;
                  v65 |= (unint64_t)(v68 & 0x7F) << v63;
                  if (v68 < 0)
                  {
                    v63 += 7;
                    BOOL v17 = v64++ >= 9;
                    if (!v17) {
                      continue;
                    }
                  }
                  goto LABEL_130;
                }
              }
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v33 = 0;
                unsigned int v34 = 0;
                uint64_t v35 = 0;
                while (1)
                {
                  uint64_t v36 = *v3;
                  unint64_t v37 = *(void *)(a2 + v36);
                  if (v37 == -1 || v37 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v38 = *(unsigned char *)(*(void *)(a2 + *v8) + v37);
                  *(void *)(a2 + v36) = v37 + 1;
                  v35 |= (unint64_t)(v38 & 0x7F) << v33;
                  if (v38 < 0)
                  {
                    v33 += 7;
                    BOOL v17 = v34++ >= 9;
                    if (!v17) {
                      continue;
                    }
                  }
                  goto LABEL_44;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_44:
                PBRepeatedInt32Add();
              }
              goto LABEL_91;
            case 5u:
              if (v19 != 2)
              {
                char v69 = 0;
                unsigned int v70 = 0;
                uint64_t v71 = 0;
                while (1)
                {
                  uint64_t v72 = *v3;
                  unint64_t v73 = *(void *)(a2 + v72);
                  if (v73 == -1 || v73 >= *(void *)(a2 + *v4)) {
                    goto LABEL_129;
                  }
                  char v74 = *(unsigned char *)(*(void *)(a2 + *v8) + v73);
                  *(void *)(a2 + v72) = v73 + 1;
                  v71 |= (unint64_t)(v74 & 0x7F) << v69;
                  if (v74 < 0)
                  {
                    v69 += 7;
                    BOOL v17 = v70++ >= 9;
                    if (!v17) {
                      continue;
                    }
                  }
                  goto LABEL_130;
                }
              }
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v39 = 0;
                unsigned int v40 = 0;
                uint64_t v41 = 0;
                while (1)
                {
                  uint64_t v42 = *v3;
                  unint64_t v43 = *(void *)(a2 + v42);
                  if (v43 == -1 || v43 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v44 = *(unsigned char *)(*(void *)(a2 + *v8) + v43);
                  *(void *)(a2 + v42) = v43 + 1;
                  v41 |= (unint64_t)(v44 & 0x7F) << v39;
                  if (v44 < 0)
                  {
                    v39 += 7;
                    BOOL v17 = v40++ >= 9;
                    if (!v17) {
                      continue;
                    }
                  }
                  goto LABEL_57;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_57:
                PBRepeatedInt32Add();
              }
              goto LABEL_91;
            case 6u:
              if (v19 != 2)
              {
                char v75 = 0;
                unsigned int v76 = 0;
                uint64_t v77 = 0;
                while (1)
                {
                  uint64_t v78 = *v3;
                  unint64_t v79 = *(void *)(a2 + v78);
                  if (v79 == -1 || v79 >= *(void *)(a2 + *v4)) {
                    goto LABEL_129;
                  }
                  char v80 = *(unsigned char *)(*(void *)(a2 + *v8) + v79);
                  *(void *)(a2 + v7_Block_object_dispose(&STACK[0x8E0], 8) = v79 + 1;
                  v77 |= (unint64_t)(v80 & 0x7F) << v75;
                  if (v80 < 0)
                  {
                    v75 += 7;
                    BOOL v17 = v76++ >= 9;
                    if (!v17) {
                      continue;
                    }
                  }
                  goto LABEL_130;
                }
              }
              uint64_t result = PBReaderPlaceMark();
              if (!result) {
                return result;
              }
              while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
              {
                char v45 = 0;
                unsigned int v46 = 0;
                uint64_t v47 = 0;
                while (1)
                {
                  uint64_t v48 = *v3;
                  unint64_t v49 = *(void *)(a2 + v48);
                  if (v49 == -1 || v49 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v50 = *(unsigned char *)(*(void *)(a2 + *v8) + v49);
                  *(void *)(a2 + v4_Block_object_dispose(&STACK[0x8E0], 8) = v49 + 1;
                  v47 |= (unint64_t)(v50 & 0x7F) << v45;
                  if (v50 < 0)
                  {
                    v45 += 7;
                    BOOL v17 = v46++ >= 9;
                    if (!v17) {
                      continue;
                    }
                  }
                  goto LABEL_70;
                }
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_70:
                PBRepeatedInt32Add();
              }
              goto LABEL_91;
            case 7u:
              char v51 = 0;
              unsigned int v52 = 0;
              uint64_t v25 = 0;
              *((unsigned char *)a1 + v7[213]) |= 2u;
              while (2)
              {
                uint64_t v53 = *v3;
                unint64_t v54 = *(void *)(a2 + v53);
                if (v54 == -1 || v54 >= *(void *)(a2 + *v4))
                {
                  *(unsigned char *)(a2 + *v5) = 1;
                }
                else
                {
                  char v55 = *(unsigned char *)(*(void *)(a2 + *v8) + v54);
                  *(void *)(a2 + v53) = v54 + 1;
                  v25 |= (unint64_t)(v55 & 0x7F) << v51;
                  if (v55 < 0)
                  {
                    v51 += 7;
                    BOOL v17 = v52++ >= 9;
                    if (v17)
                    {
                      LODWORD(v25) = 0;
                      goto LABEL_99;
                    }
                    continue;
                  }
                }
                break;
              }
              if (*(unsigned char *)(a2 + *v5)) {
                LODWORD(v25) = 0;
              }
LABEL_99:
              uint64_t v62 = 116;
LABEL_100:
              *(_DWORD *)((char *)a1 + v62) = v25;
              goto LABEL_131;
            case 8u:
              if (v19 == 2)
              {
                uint64_t result = PBReaderPlaceMark();
                if (!result) {
                  return result;
                }
                while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
                {
                  char v56 = 0;
                  unsigned int v57 = 0;
                  uint64_t v58 = 0;
                  while (1)
                  {
                    uint64_t v59 = *v3;
                    unint64_t v60 = *(void *)(a2 + v59);
                    if (v60 == -1 || v60 >= *(void *)(a2 + *v4)) {
                      break;
                    }
                    char v61 = *(unsigned char *)(*(void *)(a2 + *v8) + v60);
                    *(void *)(a2 + v59) = v60 + 1;
                    v58 |= (unint64_t)(v61 & 0x7F) << v56;
                    if (v61 < 0)
                    {
                      v56 += 7;
                      BOOL v17 = v57++ >= 9;
                      if (!v17) {
                        continue;
                      }
                    }
                    goto LABEL_90;
                  }
                  *(unsigned char *)(a2 + *v5) = 1;
LABEL_90:
                  PBRepeatedInt32Add();
                }
LABEL_91:
                PBReaderRecallMark();
              }
              else
              {
                char v81 = 0;
                unsigned int v82 = 0;
                uint64_t v83 = 0;
                while (1)
                {
                  uint64_t v84 = *v3;
                  unint64_t v85 = *(void *)(a2 + v84);
                  if (v85 == -1 || v85 >= *(void *)(a2 + *v4)) {
                    break;
                  }
                  char v86 = *(unsigned char *)(*(void *)(a2 + *v8) + v85);
                  *(void *)(a2 + v84) = v85 + 1;
                  v83 |= (unint64_t)(v86 & 0x7F) << v81;
                  if (v86 < 0)
                  {
                    v81 += 7;
                    BOOL v17 = v82++ >= 9;
                    if (!v17) {
                      continue;
                    }
                  }
                  goto LABEL_130;
                }
LABEL_129:
                *(unsigned char *)(a2 + *v5) = 1;
LABEL_130:
                PBRepeatedInt32Add();
              }
LABEL_131:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
            default:
              if (PBReaderSkipValueWithTag()) {
                goto LABEL_131;
              }
              return 0;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D0FFE0C4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D0FFE498(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D0FFE9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_1D0FFEE8C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D0FFEF1C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D0FFEF9C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_3(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

uint64_t ATXMagicalMomentsPBMMPredictedCountTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    char v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 3)
      {
        uint64_t v23 = PBReaderReadString();
        unsigned int v24 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x8E0], 8) = v23;
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_31;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_33:
        *(_DWORD *)(a1 + 16) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D10004B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1000838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1D1001600(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Unwind_Resume(a1);
}

BOOL isTimeRangeWithinTimeRange(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a3;
  id v9 = a4;
  unint64_t v10 = [MEMORY[0x1E4F1C9A8] currentCalendar];
  id v11 = objc_alloc_init(MEMORY[0x1E4F1C9D8]);
  [v11 setSecond:a2];
  unint64_t v12 = [v10 dateByAddingComponents:v11 toDate:v7 options:0];
  if ([v7 compare:v8] == 1 || !objc_msgSend(v7, "compare:", v8)) {
    BOOL v13 = [v12 compare:v9] == -1 || objc_msgSend(v12, "compare:", v9) == 0;
  }
  else {
    BOOL v13 = 0;
  }

  return v13;
}

double percentageOfBundleIDInBucket(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  unint64_t v4 = [v3 countForObject:a1];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    unint64_t v8 = 0;
    uint64_t v9 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v5);
        }
        v8 += objc_msgSend(v5, "countForObject:", *(void *)(*((void *)&v13 + 1) + 8 * i), (void)v13);
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v7);

    double v11 = 0.0;
    if (v4 && v8) {
      double v11 = (double)v4 / (double)v8;
    }
  }
  else
  {

    double v11 = 0.0;
  }

  return v11;
}

void sub_1D100520C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a18);
  _Unwind_Resume(a1);
}

id OUTLINED_FUNCTION_2_2(id a1)
{
  return a1;
}

void OUTLINED_FUNCTION_6(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_1D1007A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1007D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1007EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D10080EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXMPBCacheAgeAtCacheRefreshTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        while (1)
        {
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 == -1 || v24 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
          *(void *)(a2 + v23) = v24 + 1;
          v22 |= (unint64_t)(v25 & 0x7F) << v20;
          if ((v25 & 0x80) == 0) {
            goto LABEL_34;
          }
          v20 += 7;
          BOOL v14 = v21++ >= 9;
          if (v14)
          {
            LODWORD(v22) = 0;
            goto LABEL_36;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_34:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_36:
        *(_DWORD *)(a1 + 16) = v22;
      }
      else
      {
        if (v17 == 2)
        {
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 8;
        }
        else
        {
          if (v17 != 1)
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 24;
        }
        uint64_t v26 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t ATXPBBlendingSessionDeviceContextReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 32) |= 8u;
          while (1)
          {
            uint64_t v21 = *v3;
            uint64_t v22 = *(void *)(a2 + v21);
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)(a2 + *v4)) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              goto LABEL_67;
            }
            v18 += 7;
            BOOL v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_69;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_67:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v20) = 0;
          }
LABEL_69:
          uint64_t v62 = 24;
          goto LABEL_91;
        case 2u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 32) |= 4u;
          while (2)
          {
            uint64_t v28 = *v3;
            uint64_t v29 = *(void *)(a2 + v28);
            unint64_t v30 = v29 + 1;
            if (v29 == -1 || v30 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
              *(void *)(a2 + v2_Block_object_dispose(&STACK[0x8E0], 8) = v30;
              v20 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                BOOL v15 = v27++ >= 9;
                if (v15)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_73;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v20) = 0;
          }
LABEL_73:
          uint64_t v62 = 20;
          goto LABEL_91;
        case 3u:
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v34 = 0;
          *(unsigned char *)(a1 + 32) |= 0x10u;
          while (2)
          {
            uint64_t v35 = *v3;
            uint64_t v36 = *(void *)(a2 + v35);
            unint64_t v37 = v36 + 1;
            if (v36 == -1 || v37 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v36);
              *(void *)(a2 + v35) = v37;
              v34 |= (unint64_t)(v38 & 0x7F) << v32;
              if (v38 < 0)
              {
                v32 += 7;
                BOOL v15 = v33++ >= 9;
                if (v15)
                {
                  uint64_t v34 = 0;
                  goto LABEL_77;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v34 = 0;
          }
LABEL_77:
          BOOL v63 = v34 != 0;
          uint64_t v64 = 28;
          goto LABEL_86;
        case 4u:
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v41 = 0;
          *(unsigned char *)(a1 + 32) |= 0x40u;
          while (2)
          {
            uint64_t v42 = *v3;
            uint64_t v43 = *(void *)(a2 + v42);
            unint64_t v44 = v43 + 1;
            if (v43 == -1 || v44 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v45 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
              *(void *)(a2 + v42) = v44;
              v41 |= (unint64_t)(v45 & 0x7F) << v39;
              if (v45 < 0)
              {
                v39 += 7;
                BOOL v15 = v40++ >= 9;
                if (v15)
                {
                  uint64_t v41 = 0;
                  goto LABEL_81;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v41 = 0;
          }
LABEL_81:
          BOOL v63 = v41 != 0;
          uint64_t v64 = 30;
          goto LABEL_86;
        case 5u:
          char v46 = 0;
          unsigned int v47 = 0;
          uint64_t v48 = 0;
          *(unsigned char *)(a1 + 32) |= 0x20u;
          while (2)
          {
            uint64_t v49 = *v3;
            uint64_t v50 = *(void *)(a2 + v49);
            unint64_t v51 = v50 + 1;
            if (v50 == -1 || v51 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v52 = *(unsigned char *)(*(void *)(a2 + *v7) + v50);
              *(void *)(a2 + v49) = v51;
              v48 |= (unint64_t)(v52 & 0x7F) << v46;
              if (v52 < 0)
              {
                v46 += 7;
                BOOL v15 = v47++ >= 9;
                if (v15)
                {
                  uint64_t v48 = 0;
                  goto LABEL_85;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v48 = 0;
          }
LABEL_85:
          BOOL v63 = v48 != 0;
          uint64_t v64 = 29;
LABEL_86:
          *(unsigned char *)(a1 + v64) = v63;
          continue;
        case 6u:
          char v53 = 0;
          unsigned int v54 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 32) |= 2u;
          break;
        case 7u:
          *(unsigned char *)(a1 + 32) |= 1u;
          uint64_t v59 = *v3;
          unint64_t v60 = *(void *)(a2 + v59);
          if (v60 <= 0xFFFFFFFFFFFFFFF7 && v60 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v61 = *(void *)(*(void *)(a2 + *v7) + v60);
            *(void *)(a2 + v59) = v60 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v61 = 0;
          }
          *(void *)(a1 + _Block_object_dispose(&STACK[0x8E0], 8) = v61;
          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v55 = *v3;
        uint64_t v56 = *(void *)(a2 + v55);
        unint64_t v57 = v56 + 1;
        if (v56 == -1 || v57 > *(void *)(a2 + *v4)) {
          break;
        }
        char v58 = *(unsigned char *)(*(void *)(a2 + *v7) + v56);
        *(void *)(a2 + v55) = v57;
        v20 |= (unint64_t)(v58 & 0x7F) << v53;
        if ((v58 & 0x80) == 0) {
          goto LABEL_88;
        }
        v53 += 7;
        BOOL v15 = v54++ >= 9;
        if (v15)
        {
          LODWORD(v20) = 0;
          goto LABEL_90;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_88:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v20) = 0;
      }
LABEL_90:
      uint64_t v62 = 16;
LABEL_91:
      *(_DWORD *)(a1 + v62) = v20;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void OUTLINED_FUNCTION_2_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_1D100C5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_1D100DF58(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

uint64_t ATXMPBBlendingClientModelHomeScreenLayoutTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 40;
          goto LABEL_33;
        case 2u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 24;
          goto LABEL_33;
        case 3u:
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 52) |= 1u;
          break;
        case 4u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 32;
          goto LABEL_33;
        case 5u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 8;
          goto LABEL_33;
        case 6u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 16;
LABEL_33:
          char v26 = *(void **)(a1 + v18);
          *(void *)(a1 + v1_Block_object_dispose(&STACK[0x8E0], 8) = v17;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v23 = *v3;
        unint64_t v24 = *(void *)(a2 + v23);
        if (v24 == -1 || v24 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
        *(void *)(a2 + v23) = v24 + 1;
        v22 |= (unint64_t)(v25 & 0x7F) << v20;
        if ((v25 & 0x80) == 0) {
          goto LABEL_37;
        }
        v20 += 7;
        BOOL v14 = v21++ >= 9;
        if (v14)
        {
          LODWORD(v22) = 0;
          goto LABEL_39;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v22) = 0;
      }
LABEL_39:
      *(_DWORD *)(a1 + 4_Block_object_dispose(&STACK[0x8E0], 8) = v22;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void OUTLINED_FUNCTION_1_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_5_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void sub_1D10118BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id *location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(v21);
  objc_destroyWeak(v19);
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v27 - 128));
  _Unwind_Resume(a1);
}

void updateCache()
{
  if ([MEMORY[0x1E4F93B08] isInternalBuild])
  {
    id v0 = +[ATXAppDirectoryOrderingProvider sharedInstance];
    [v0 updateCacheWithActivity:0 completionHandler:0];
  }
}

void sub_1D1013FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1016344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1D1017B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,id location)
{
}

void OUTLINED_FUNCTION_3_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_4_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0x16u);
}

void sub_1D101D1A8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1D101E91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 152), 8);
  _Unwind_Resume(a1);
}

void ATXSmoothedProbability(double a1, double a2)
{
  if (a2 + 0.00000011920929 < a1)
  {
    uint64_t v4 = __atxlog_handle_default();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      ATXSmoothedProbability_cold_1();
    }
    uint64_t v5 = @"ATXSmoothedProbability called with invalid arguments. numerator: %f denominator: %f";
LABEL_14:

    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3B8], v5, *(void *)&a1, *(void *)&a2);
    return;
  }
  if (a2 > 0.0)
  {
    +[ATXSlotResolutionParametersStatistics smoothedRatio:a1 over:a2];
    if (v6 < 0.0 || v6 > 1.0)
    {
      uint64_t v4 = __atxlog_handle_default();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        ATXSmoothedProbability_cold_2();
      }
      uint64_t v5 = @"Invalid probability found. numerator: %f denominator: %f";
      goto LABEL_14;
    }
  }
}

void ATXProbability(double a1, double a2)
{
  if (a2 + 0.00000011920929 < a1)
  {
    uint64_t v4 = __atxlog_handle_default();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      ATXProbability_cold_1();
    }
    uint64_t v5 = @"ATXProbability called with invalid arguments. numerator: %f denominator: %f";
LABEL_14:

    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F1C3B8], v5, *(void *)&a1, *(void *)&a2);
    return;
  }
  if (a2 > 0.0 && (a1 / a2 < 0.0 || a1 / a2 > 1.0))
  {
    uint64_t v4 = __atxlog_handle_default();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      ATXSmoothedProbability_cold_2();
    }
    uint64_t v5 = @"Invalid probability found. numerator: %f denominator: %f";
    goto LABEL_14;
  }
}

double ATXRatio(double a1, double a2)
{
  double result = a1 / a2;
  if (a2 <= 0.0) {
    return 0.0;
  }
  return result;
}

double ATXGaussianDistributionWithZeroMean(double a1, double a2)
{
  uint64_t v4 = +[_ATXGlobals sharedInstance];
  [v4 clippingThresholdForGaussianDist];
  double v6 = v5;

  if (fabs(a2) > v6 * a1) {
    return 0.0;
  }
  return exp(a2 / a1 * (a2 / a1) * -0.5);
}

void OUTLINED_FUNCTION_1_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_1D1029208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 176), 8);
  _Unwind_Resume(a1);
}

id ATXMaxDate(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  double v5 = v4;
  double v6 = v4;
  if (v3)
  {
    double v6 = v3;
    if (v4)
    {
      if (objc_msgSend(v3, "atx_isBeforeDate:", v4)) {
        double v6 = v5;
      }
      else {
        double v6 = v3;
      }
    }
  }
  id v7 = v6;

  return v7;
}

uint64_t ATXPBUnifiedInferredActivitySessionReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 48) |= 8u;
          uint64_t v18 = *v3;
          unint64_t v19 = *(void *)(a2 + v18);
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
            *(void *)(a2 + v1_Block_object_dispose(&STACK[0x8E0], 8) = v19 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v20 = 0;
          }
          uint64_t v35 = 32;
          goto LABEL_48;
        case 2u:
          *(unsigned char *)(a1 + 48) |= 2u;
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v20 = 0;
          }
          uint64_t v35 = 16;
          goto LABEL_48;
        case 3u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 48) |= 4u;
          break;
        case 4u:
          uint64_t v31 = PBReaderReadString();
          char v32 = *(void **)(a1 + 40);
          *(void *)(a1 + 40) = v31;

          continue;
        case 5u:
          *(unsigned char *)(a1 + 48) |= 1u;
          uint64_t v33 = *v3;
          unint64_t v34 = *(void *)(a2 + v33);
          if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v34);
            *(void *)(a2 + v33) = v34 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v20 = 0;
          }
          uint64_t v35 = 8;
LABEL_48:
          *(void *)(a1 + v35) = v20;
          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v27 = *v3;
        uint64_t v28 = *(void *)(a2 + v27);
        unint64_t v29 = v28 + 1;
        if (v28 == -1 || v29 > *(void *)(a2 + *v4)) {
          break;
        }
        char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
        *(void *)(a2 + v27) = v29;
        v26 |= (unint64_t)(v30 & 0x7F) << v24;
        if ((v30 & 0x80) == 0) {
          goto LABEL_39;
        }
        v24 += 7;
        BOOL v15 = v25++ >= 9;
        if (v15)
        {
          uint64_t v26 = 0;
          goto LABEL_41;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v26 = 0;
      }
LABEL_41:
      *(void *)(a1 + 24) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D102DC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void dispatch_sync_notxn(NSObject *a1, void *a2)
{
  id v3 = a2;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __dispatch_sync_notxn_block_invoke;
  block[3] = &unk_1E68AB618;
  id v6 = v3;
  id v4 = v3;
  dispatch_sync(a1, block);
}

void __dispatch_sync_notxn_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x1D25F6CC0]();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void OUTLINED_FUNCTION_0_6(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x16u);
}

void sub_1D102EEE8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1D102FE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXPBBlendingSessionClientModelSuggestionReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 28) |= 2u;
        while (1)
        {
          uint64_t v24 = *v3;
          uint64_t v25 = *(void *)(a2 + v24);
          unint64_t v26 = v25 + 1;
          if (v25 == -1 || v26 > *(void *)(a2 + *v4)) {
            break;
          }
          char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
          *(void *)(a2 + v24) = v26;
          v23 |= (unint64_t)(v27 & 0x7F) << v21;
          if ((v27 & 0x80) == 0) {
            goto LABEL_35;
          }
          v21 += 7;
          BOOL v15 = v22++ >= 9;
          if (v15)
          {
            LODWORD(v23) = 0;
            goto LABEL_37;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_35:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v23) = 0;
        }
LABEL_37:
        *(_DWORD *)(a1 + 24) = v23;
      }
      else if (v18 == 2)
      {
        *(unsigned char *)(a1 + 28) |= 1u;
        uint64_t v28 = *v3;
        unint64_t v29 = *(void *)(a2 + v28);
        if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v30 = *(void *)(*(void *)(a2 + *v7) + v29);
          *(void *)(a2 + v2_Block_object_dispose(&STACK[0x8E0], 8) = v29 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v30 = 0;
        }
        *(void *)(a1 + _Block_object_dispose(&STACK[0x8E0], 8) = v30;
      }
      else if (v18 == 1)
      {
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D1032F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D103352C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1033AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D10340BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1034648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void shouldReturnUndefined(void *a1, unint64_t a2)
{
  id v3 = a1;
  unint64_t v4 = v3[1];
  unint64_t v5 = v4 - a2;
  if (v4 < a2)
  {
    unsigned int v9 = __atxlog_handle_default();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      shouldReturnUndefined_cold_1();
    }

    unint64_t v10 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v11 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL shouldReturnUndefined(_ATXScoreInterpreterCtx *__strong, NSUInteger)");
    [v10 handleFailureInFunction:v11 file:@"_ATXScoreInterpreter.m" lineNumber:224 description:@"App prediction interpreter stack underflow"];

    __break(1u);
  }
  else
  {
    if (v5 < v4 && *(double *)&v3[v5 + 2] != -31337.0)
    {
      uint64_t v6 = -(uint64_t)a2;
      do
      {
        uint64_t v7 = v6;
        BOOL v8 = __CFADD__(v6++, 1);
      }
      while (!v8 && *(double *)&v3[v4 + 3 + v7] != -31337.0);
    }
  }
}

void drop(void *a1, unint64_t a2)
{
  id v3 = a1;
  unint64_t v4 = v3[1];
  BOOL v5 = v4 >= a2;
  unint64_t v6 = v4 - a2;
  if (v5)
  {
    v3[1] = v6;
  }
  else
  {
    uint64_t v7 = __atxlog_handle_default();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      shouldReturnUndefined_cold_1();
    }

    unsigned int v9 = [MEMORY[0x1E4F28B00] currentHandler];
    unint64_t v10 = objc_msgSend(NSString, "stringWithUTF8String:", "void drop(_ATXScoreInterpreterCtx *__strong, NSUInteger)");
    [v9 handleFailureInFunction:v10 file:@"_ATXScoreInterpreter.m" lineNumber:214 description:@"App prediction interpreter stack underflow"];

    __break(1u);
  }
}

void push(void *a1, double a2)
{
  id v3 = a1;
  unint64_t v4 = v3[1];
  if (v4 >= 0x1F4)
  {
    BOOL v5 = __atxlog_handle_default();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      push_cold_1();
    }

    unint64_t v6 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v7 = objc_msgSend(NSString, "stringWithUTF8String:", "void push(_ATXScoreInterpreterCtx *__strong, double)");
    [v6 handleFailureInFunction:v7 file:@"_ATXScoreInterpreter.m" lineNumber:194 description:@"App prediction interpreter stack overflow"];

    __break(1u);
  }
  else
  {
    v3[1] = v4 + 1;
    *(double *)&v3[v4 + 2] = a2;
  }
}

void pop(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = v1[1];
  if (v2)
  {
    v1[1] = v2 - 1;
  }
  else
  {
    id v3 = __atxlog_handle_default();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      shouldReturnUndefined_cold_1();
    }

    unint64_t v4 = [MEMORY[0x1E4F28B00] currentHandler];
    BOOL v5 = [NSString stringWithUTF8String:"double pop(_ATXScoreInterpreterCtx *__strong)"];
    [v4 handleFailureInFunction:v5 file:@"_ATXScoreInterpreter.m" lineNumber:204 description:@"App prediction interpreter stack underflow"];

    __break(1u);
  }
}

void sub_1D10372B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1D10380A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXAnchorModelPBLinkActionMetadataReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  BOOL v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 24;
        goto LABEL_23;
      case 2u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 16;
LABEL_23:
        uint64_t v20 = *(void **)(a1 + v18);
        *(void *)(a1 + v1_Block_object_dispose(&STACK[0x8E0], 8) = v17;

        goto LABEL_38;
      case 3u:
        char v21 = objc_alloc_init(ATXAnchorModelPBLaunchHistoryMetadata);
        objc_storeStrong((id *)(a1 + 8), v21);
        if (PBReaderPlaceMark() && ATXAnchorModelPBLaunchHistoryMetadataReadFrom((uint64_t)v21, a2))
        {
          PBReaderRecallMark();

LABEL_38:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 4u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        *(unsigned char *)(a1 + 36) |= 1u;
        while (2)
        {
          uint64_t v25 = *v3;
          unint64_t v26 = *(void *)(a2 + v25);
          if (v26 == -1 || v26 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v26);
            *(void *)(a2 + v25) = v26 + 1;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if (v27 < 0)
            {
              v22 += 7;
              BOOL v14 = v23++ >= 9;
              if (v14)
              {
                LODWORD(v24) = 0;
                goto LABEL_37;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v24) = 0;
        }
LABEL_37:
        *(_DWORD *)(a1 + 32) = v24;
        goto LABEL_38;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_38;
    }
  }
}

void sub_1D10396C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXMPBAnchorModelPhaseFilterTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  BOOL v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 48) |= 4u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_47;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_49;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_47:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_49:
          uint64_t v37 = 32;
          goto LABEL_58;
        case 2u:
          uint64_t v24 = PBReaderReadString();
          uint64_t v25 = 40;
          goto LABEL_45;
        case 3u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 48) |= 2u;
          while (2)
          {
            uint64_t v28 = *v3;
            unint64_t v29 = *(void *)(a2 + v28);
            if (v29 == -1 || v29 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
              *(void *)(a2 + v2_Block_object_dispose(&STACK[0x8E0], 8) = v29 + 1;
              v19 |= (unint64_t)(v30 & 0x7F) << v26;
              if (v30 < 0)
              {
                v26 += 7;
                BOOL v14 = v27++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_53;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_53:
          uint64_t v37 = 28;
          goto LABEL_58;
        case 4u:
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 48) |= 1u;
          break;
        case 5u:
          uint64_t v24 = PBReaderReadString();
          uint64_t v25 = 16;
          goto LABEL_45;
        case 6u:
          uint64_t v24 = PBReaderReadString();
          uint64_t v25 = 8;
LABEL_45:
          uint64_t v36 = *(void **)(a1 + v25);
          *(void *)(a1 + v25) = v24;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v33 = *v3;
        unint64_t v34 = *(void *)(a2 + v33);
        if (v34 == -1 || v34 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
        *(void *)(a2 + v33) = v34 + 1;
        v19 |= (unint64_t)(v35 & 0x7F) << v31;
        if ((v35 & 0x80) == 0) {
          goto LABEL_55;
        }
        v31 += 7;
        BOOL v14 = v32++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_57;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_55:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v19) = 0;
      }
LABEL_57:
      uint64_t v37 = 24;
LABEL_58:
      *(_DWORD *)(a1 + v37) = v19;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D103C4B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D1042094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v21 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1D1042A28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1042B54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1042C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void sub_1D1042E28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1042F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D1042FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D10430C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1D10431C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D10433D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D10435D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void **a24)
{
  a24 = (void **)&a21;
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100](&a24);

  _Unwind_Resume(a1);
}

void sub_1D10437BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1043970(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1043B80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1043E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D10441BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D10445E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id a27)
{
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a22, 8);

  _Unwind_Resume(a1);
}

void sub_1D1044828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D10448C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::vector<ATXPredictionItem>::__init_with_size[abi:ne180100]<ATXPredictionItem*,ATXPredictionItem*>(void *result, id *a2, id *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<ATXPredictionItem>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (void *)v6[1];
    while (a2 != a3)
    {
      void *v7 = *a2;
      uint64_t result = memcpy(v7 + 1, a2 + 1, 0xCD2uLL);
      v7 += 412;
      a2 += 412;
    }
    v6[1] = v7;
  }
  return result;
}

void sub_1D1044974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<ATXPredictionItem>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x13E22CBCE4A903) {
    std::vector<ATXPredictionItem>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ATXPredictionItem>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[3296 * v4];
  return result;
}

void __initFeedbackConstantsData_block_invoke()
{
  id v0 = (void *)MEMORY[0x1D25F6CC0]();
  uint64_t v1 = [MEMORY[0x1E4F4AF08] dictionaryForResource:@"_ATXFeedback" ofType:@"plist" specifiedABGroup:0];
  uint64_t v2 = [v1 objectForKeyedSubscript:@"Constants"];
  id v3 = [v2 objectForKeyedSubscript:@"BaseAlpha"];
  uint64_t v4 = v3;
  double v5 = 1.0;
  double v6 = 1.0;
  if (v3) {
    objc_msgSend(v3, "doubleValue", 1.0);
  }
  _ATXFeedbackConstantsData_0 = *(void *)&v6;

  uint64_t v7 = [v2 objectForKeyedSubscript:@"BaseBeta"];
  char v8 = v7;
  if (v7)
  {
    [v7 doubleValue];
    double v5 = v9;
  }
  _ATXFeedbackConstantsData_1 = *(void *)&v5;

  unint64_t v10 = [v2 objectForKeyedSubscript:@"MultiplierForAppAlphasAndBetas"];
  uint64_t v11 = v10;
  if (v10) {
    [v10 doubleValue];
  }
  else {
    double v12 = 1.0;
  }
  _ATXFeedbackConstantsData_2 = *(void *)&v12;

  char v13 = [v2 objectForKeyedSubscript:@"DecayHalfLifeSeconds"];
  BOOL v14 = v13;
  uint64_t v15 = 0x4122750000000000;
  uint64_t v16 = 0x4122750000000000;
  if (v13) {
    objc_msgSend(v13, "doubleValue", 604800.0);
  }
  _ATXFeedbackConstantsData_3 = v16;

  char v17 = [v2 objectForKeyedSubscript:@"ActionDecayHalfLifeSeconds"];
  unsigned int v18 = v17;
  if (v17)
  {
    [v17 doubleValue];
    uint64_t v15 = v19;
  }
  _ATXFeedbackConstantsData_4 = v15;

  uint64_t v20 = [v1 objectForKeyedSubscript:@"AppSpecificAlphas"];
  uint64_t v21 = (void *)_ATXFeedbackConstantsData_5;
  _ATXFeedbackConstantsData_5 = v20;
}

void sub_1D1047658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1049790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D104BA04(_Unwind_Exception *a1)
{
}

uint64_t ATXAnchorModelPBAppLaunchMetadataReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        unsigned int v18 = *(void **)(a1 + 32);
        *(void *)(a1 + 32) = v17;

        goto LABEL_70;
      case 2u:
        uint64_t v20 = objc_alloc_init(ATXAnchorModelPBLaunchHistoryMetadata);
        objc_storeStrong((id *)(a1 + 24), v20);
        if (PBReaderPlaceMark() && ATXAnchorModelPBLaunchHistoryMetadataReadFrom((uint64_t)v20, a2))
        {
          PBReaderRecallMark();

LABEL_70:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 3u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 48) |= 8u;
        while (2)
        {
          uint64_t v24 = *v3;
          unint64_t v25 = *(void *)(a2 + v24);
          if (v25 == -1 || v25 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              BOOL v14 = v22++ >= 9;
              if (v14)
              {
                uint64_t v23 = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_56:
        *(unsigned char *)(a1 + 44) = v23 != 0;
        goto LABEL_70;
      case 4u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v29 = 0;
        *(unsigned char *)(a1 + 48) |= 4u;
        while (2)
        {
          uint64_t v30 = *v3;
          unint64_t v31 = *(void *)(a2 + v30);
          if (v31 == -1 || v31 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v32 = *(unsigned char *)(*(void *)(a2 + *v7) + v31);
            *(void *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              BOOL v14 = v28++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_60;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v29) = 0;
        }
LABEL_60:
        *(_DWORD *)(a1 + 40) = v29;
        goto LABEL_70;
      case 5u:
        char v33 = 0;
        unsigned int v34 = 0;
        uint64_t v35 = 0;
        *(unsigned char *)(a1 + 48) |= 2u;
        while (2)
        {
          uint64_t v36 = *v3;
          unint64_t v37 = *(void *)(a2 + v36);
          if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v37);
            *(void *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              BOOL v14 = v34++ >= 9;
              if (v14)
              {
                uint64_t v35 = 0;
                goto LABEL_64;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v35 = 0;
        }
LABEL_64:
        uint64_t v44 = 16;
        goto LABEL_69;
      case 6u:
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v35 = 0;
        *(unsigned char *)(a1 + 48) |= 1u;
        while (2)
        {
          uint64_t v41 = *v3;
          unint64_t v42 = *(void *)(a2 + v41);
          if (v42 == -1 || v42 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v42);
            *(void *)(a2 + v41) = v42 + 1;
            v35 |= (unint64_t)(v43 & 0x7F) << v39;
            if (v43 < 0)
            {
              v39 += 7;
              BOOL v14 = v40++ >= 9;
              if (v14)
              {
                uint64_t v35 = 0;
                goto LABEL_68;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v35 = 0;
        }
LABEL_68:
        uint64_t v44 = 8;
LABEL_69:
        *(void *)(a1 + v44) = v35;
        goto LABEL_70;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_70;
    }
  }
}

uint64_t ATXPBPredictionLocationOfInterestReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = *(void **)(a1 + 32);
          *(void *)(a1 + 32) = v18;

          continue;
        case 2u:
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          *(unsigned char *)(a1 + 40) |= 4u;
          break;
        case 3u:
          *(unsigned char *)(a1 + 40) |= 1u;
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v30 = *(void *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v2_Block_object_dispose(&STACK[0x270], 8) = v29 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v30 = 0;
          }
          uint64_t v33 = 8;
          goto LABEL_43;
        case 4u:
          *(unsigned char *)(a1 + 40) |= 2u;
          uint64_t v31 = *v3;
          unint64_t v32 = *(void *)(a2 + v31);
          if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v30 = *(void *)(*(void *)(a2 + *v7) + v32);
            *(void *)(a2 + v31) = v32 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v30 = 0;
          }
          uint64_t v33 = 16;
LABEL_43:
          *(void *)(a1 + v33) = v30;
          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v24 = *v3;
        uint64_t v25 = *(void *)(a2 + v24);
        unint64_t v26 = v25 + 1;
        if (v25 == -1 || v26 > *(void *)(a2 + *v4)) {
          break;
        }
        char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
        *(void *)(a2 + v24) = v26;
        v23 |= (unint64_t)(v27 & 0x7F) << v21;
        if ((v27 & 0x80) == 0) {
          goto LABEL_36;
        }
        v21 += 7;
        BOOL v15 = v22++ >= 9;
        if (v15)
        {
          LODWORD(v23) = 0;
          goto LABEL_38;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_36:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v23) = 0;
      }
LABEL_38:
      *(_DWORD *)(a1 + 24) = v23;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void OUTLINED_FUNCTION_4_4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_debug_impl(a1, v4, OS_LOG_TYPE_DEBUG, a4, v5, 0xCu);
}

void sub_1D1050CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1051B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id _ATXInspectionInterface()
{
  id v0 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1F280C638];
  objc_msgSend(v0, "atx_addClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_appHistoryStopDeltaRecording_, 0, 1);
  objc_msgSend(v0, "atx_addClass:forSelector:argumentIndex:ofReply:", objc_opt_class(), sel_predictItemsAndReturnMetaDataAndInputsAndSubScoresWithCandidateBundleIdentifiers_candidateActiontypes_consumerSubType_reply_, 0, 1);
  uint64_t v1 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v2 = objc_opt_class();
  id v3 = objc_msgSend(v1, "setWithObjects:", v2, objc_opt_class(), 0);
  [v0 setClasses:v3 forSelector:sel_categoriesWithShouldUseDefault_reply_ argumentIndex:0 ofReply:1];

  uint64_t v4 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_msgSend(v4, "setWithObjects:", v5, objc_opt_class(), 0);
  [v0 setClasses:v6 forSelector:sel_blendedSuggestionsForConsumerSubType_reply_ argumentIndex:0 ofReply:1];

  uint64_t v7 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v8 = objc_opt_class();
  unsigned int v9 = objc_msgSend(v7, "setWithObjects:", v8, objc_opt_class(), 0);
  [v0 setClasses:v9 forSelector:sel_scheduledPredictionsForAnchorModelWithReply_ argumentIndex:0 ofReply:1];

  uint64_t v10 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v11 = objc_opt_class();
  uint64_t v12 = objc_msgSend(v10, "setWithObjects:", v11, objc_opt_class(), 0);
  [v0 setClasses:v12 forSelector:sel_validPredictionsRightNowForAnchorModelWithReply_ argumentIndex:0 ofReply:1];

  unint64_t v13 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v14 = objc_opt_class();
  BOOL v15 = objc_msgSend(v13, "setWithObjects:", v14, objc_opt_class(), 0);
  [v0 setClasses:v15 forSelector:sel_schedulePredictionsForAnchorModel_anchorType_reply_ argumentIndex:0 ofReply:0];

  int v16 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v17 = objc_opt_class();
  uint64_t v18 = objc_msgSend(v16, "setWithObjects:", v17, objc_opt_class(), 0);
  [v0 setClasses:v18 forSelector:sel_inspectInferredActivitySessionStream_fromTimestamp_reply_ argumentIndex:0 ofReply:1];

  uint64_t v19 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v20 = objc_opt_class();
  char v21 = objc_msgSend(v19, "setWithObjects:", v20, objc_opt_class(), 0);
  [v0 setClasses:v21 forSelector:sel_inspectInferredActivityTransitionStream_fromTimestamp_reply_ argumentIndex:0 ofReply:1];

  unsigned int v22 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v23 = objc_opt_class();
  uint64_t v24 = objc_msgSend(v22, "setWithObjects:", v23, objc_opt_class(), 0);
  [v0 setClasses:v24 forSelector:sel_fetchPosterDescriptorsWithReply_ argumentIndex:0 ofReply:1];

  return v0;
}

void sub_1D1053AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1054494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 160), 8);
  _Block_object_dispose((const void *)(v33 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t AWDProactiveAppDataReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 52) |= 2u;
        while (1)
        {
          uint64_t v21 = *v3;
          uint64_t v22 = *(void *)(a2 + v21);
          unint64_t v23 = v22 + 1;
          if (v22 == -1 || v23 > *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v23;
          v20 |= (unint64_t)(v24 & 0x7F) << v18;
          if ((v24 & 0x80) == 0) {
            goto LABEL_45;
          }
          v18 += 7;
          BOOL v15 = v19++ >= 9;
          if (v15)
          {
            uint64_t v20 = 0;
            goto LABEL_47;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_47:
        *(void *)(a1 + 16) = v20;
        goto LABEL_54;
      case 2u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        *(unsigned char *)(a1 + 52) |= 4u;
        while (2)
        {
          uint64_t v29 = *v3;
          uint64_t v30 = *(void *)(a2 + v29);
          unint64_t v31 = v30 + 1;
          if (v30 == -1 || v31 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v32 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v31;
            v28 |= (unint64_t)(v32 & 0x7F) << v26;
            if (v32 < 0)
            {
              v26 += 7;
              BOOL v15 = v27++ >= 9;
              if (v15)
              {
                uint64_t v28 = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v28 = 0;
        }
LABEL_51:
        *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x270], 8) = v28 != 0;
        goto LABEL_54;
      case 3u:
        *(unsigned char *)(a1 + 52) |= 1u;
        uint64_t v33 = *v3;
        unint64_t v34 = *(void *)(a2 + v33);
        if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v35 = *(void *)(*(void *)(a2 + *v7) + v34);
          *(void *)(a2 + v33) = v34 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v35 = 0;
        }
        *(void *)(a1 + _Block_object_dispose(&STACK[0x270], 8) = v35;
        goto LABEL_54;
      case 4u:
        uint64_t v36 = objc_alloc_init(AWDProactiveAppPredictionSubscores);
        objc_storeStrong((id *)(a1 + 40), v36);
        if PBReaderPlaceMark() && (AWDProactiveAppPredictionSubscoresReadFrom(v36, a2))
        {
          PBReaderRecallMark();

LABEL_54:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 5u:
        uint64_t v37 = PBReaderReadString();
        uint64_t v38 = 32;
        goto LABEL_43;
      case 6u:
        uint64_t v37 = PBReaderReadString();
        uint64_t v38 = 24;
LABEL_43:
        char v39 = *(void **)(a1 + v38);
        *(void *)(a1 + v3_Block_object_dispose(&STACK[0x270], 8) = v37;

        goto LABEL_54;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_54;
    }
  }
}

void OUTLINED_FUNCTION_1_7(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

void printStringRepresentation(FILE *a1, void *a2)
{
  id v5 = a2;
  id v3 = (void *)MEMORY[0x1D25F6CC0]();
  uint64_t v4 = [v5 description];
  printQuotedString(a1, v4);
}

void printQuotedString(FILE *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [(__CFString *)v3 length];
  CFStringRef theString = v3;
  uint64_t v40 = 0;
  int64_t v41 = v4;
  CharactersPtr = CFStringGetCharactersPtr(v3);
  CStringPtr = 0;
  uint64_t v38 = CharactersPtr;
  if (!CharactersPtr) {
    CStringPtr = CFStringGetCStringPtr(v3, 0x600u);
  }
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  int64_t v42 = 0;
  int64_t v43 = 0;
  char v39 = CStringPtr;
  if (v4)
  {
    uint64_t v14 = 0;
    int64_t v15 = 0;
    int64_t v16 = 0;
    uint64_t v17 = 64;
    while (2)
    {
      if ((unint64_t)v16 >= 4) {
        uint64_t v18 = 4;
      }
      else {
        uint64_t v18 = v16;
      }
      int64_t v19 = v41;
      if (v41 <= v16)
      {
LABEL_27:
        unsigned int v27 = (void *)MEMORY[0x1D25F6CC0](CStringPtr, v5, v6, v7, v8, v9, v10, v11, v29, *((void *)&v29 + 1), v30, *((void *)&v30 + 1), v31, *((void *)&v31 + 1), v32, *((void *)&v32 + 1));
        id v28 = [(__CFString *)v3 _stringRepresentation];
        fputs((const char *)[v28 UTF8String], a1);
      }
      else
      {
        if (v38)
        {
          UniChar v20 = v38[v16 + v40];
        }
        else if (v39)
        {
          UniChar v20 = v39[v40 + v16];
        }
        else
        {
          if (v43 <= v16 || v15 > v16)
          {
            uint64_t v22 = v18 + v14;
            uint64_t v23 = v17 - v18;
            int64_t v24 = v16 - v18;
            int64_t v25 = v24 + 64;
            if (v24 + 64 >= v41) {
              int64_t v25 = v41;
            }
            int64_t v42 = v24;
            int64_t v43 = v25;
            if (v41 >= v23) {
              int64_t v19 = v23;
            }
            v44.length = v19 + v22;
            v44.location = v24 + v40;
            CFStringGetCharacters(theString, v44, (UniChar *)&v29);
            int64_t v15 = v42;
          }
          UniChar v20 = *((_WORD *)&v29 + v16 - v15);
        }
        switch(v20)
        {
          case ' ':
          case '-':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
          case 'E':
          case 'F':
          case 'G':
          case 'H':
          case 'I':
          case 'J':
          case 'K':
          case 'L':
          case 'M':
          case 'N':
          case 'O':
          case 'P':
          case 'Q':
          case 'R':
          case 'S':
          case 'T':
          case 'U':
          case 'V':
          case 'W':
          case 'X':
          case 'Y':
          case 'Z':
          case '_':
          case 'a':
          case 'b':
          case 'c':
          case 'd':
          case 'e':
          case 'f':
          case 'g':
          case 'h':
          case 'i':
          case 'j':
          case 'k':
          case 'l':
          case 'm':
          case 'n':
          case 'o':
          case 'p':
          case 'q':
          case 'r':
          case 's':
          case 't':
          case 'u':
          case 'v':
          case 'w':
          case 'x':
          case 'y':
          case 'z':
            ++v16;
            --v14;
            ++v17;
            if (v4 != v16) {
              continue;
            }
            fputc(34, a1);
            char v26 = v3;
            fputs((const char *)[(__CFString *)v26 UTF8String], a1);
            fputc(34, a1);
            break;
          default:
            goto LABEL_27;
        }
      }
      break;
    }
  }
  else
  {
    fputs((const char *)[(__CFString *)v3 UTF8String], a1);
  }
}

uint64_t compareIds(id *a1, void *a2)
{
  return [*a1 compare:*a2];
}

double ATXSampleFromGammaDistribution(double a1, double a2)
{
  if (a1 <= 0.0)
  {
    uint64_t v6 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v7 = objc_msgSend(NSString, "stringWithUTF8String:", "double ATXSampleFromGammaDistribution(double, double)");
    [v6 handleFailureInFunction:v7, @"ATXGammaDistribution.mm", 18, @"Invalid parameter not satisfying: %@", @"shape > 0" file lineNumber description];
  }
  if (a2 <= 0.0)
  {
    uint64_t v8 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v9 = objc_msgSend(NSString, "stringWithUTF8String:", "double ATXSampleFromGammaDistribution(double, double)");
    [v8 handleFailureInFunction:v9, @"ATXGammaDistribution.mm", 19, @"Invalid parameter not satisfying: %@", @"scale > 0" file lineNumber description];
  }
  {
    ATXSampleFromGammaDistribution::rng = 1;
  }
  v10[0] = a1;
  v10[1] = a2;
  pthread_mutex_lock(&ATXSampleFromGammaDistribution::lock);
  double v4 = std::gamma_distribution<double>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>((uint64_t)v10, (unsigned int *)&ATXSampleFromGammaDistribution::rng, v10);
  pthread_mutex_unlock(&ATXSampleFromGammaDistribution::lock);
  return v4;
}

void sub_1D10595E8(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

double std::gamma_distribution<double>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(uint64_t a1, unsigned int *a2, double *a3)
{
  double v5 = *a3;
  if (*a3 == 1.0)
  {
    double v6 = std::generate_canonical[abi:ne180100]<double,53ul,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(a2);
    double v7 = -log(1.0 - v6);
  }
  else if (*a3 <= 1.0)
  {
    double v18 = 1.0 - v5;
    do
    {
      while (1)
      {
        double v19 = std::generate_canonical[abi:ne180100]<double,53ul,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(a2)
            + 0.0;
        double v20 = std::generate_canonical[abi:ne180100]<double,53ul,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(a2);
        double v21 = -log(1.0 - v20);
        if (v19 <= v18) {
          break;
        }
        double v22 = log((1.0 - v19) / v5);
        double v7 = pow(v18 - v5 * v22, 1.0 / v5);
        if (v7 <= v21 - v22) {
          return v7 * a3[1];
        }
      }
      double v23 = pow(v19, 1.0 / v5);
    }
    while (v23 > v21);
    double v7 = v23;
  }
  else
  {
    double v9 = v5 + -1.0;
    double v10 = v5 * 3.0 + -0.75;
    while (1)
    {
      do
      {
        double v11 = std::generate_canonical[abi:ne180100]<double,53ul,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(a2)
            + 0.0;
        double v12 = std::generate_canonical[abi:ne180100]<double,53ul,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(a2);
        double v13 = v11 * (1.0 - v11);
      }
      while (v13 == 0.0);
      double v14 = (v11 + -0.5) * sqrt(v10 / v13);
      double v7 = v9 + v14;
      if (v9 + v14 >= 0.0)
      {
        double v15 = (v12 + 0.0) * ((v12 + 0.0) * (v13 * (v13 * (v13 * 64.0))));
        if (v15 <= 1.0 - v14 * (v14 + v14) / v7) {
          break;
        }
        double v16 = log(v15);
        long double v17 = log(v7 / v9);
        if (v16 <= -(v14 - v9 * v17) - (v14 - v9 * v17)) {
          break;
        }
      }
    }
  }
  return v7 * a3[1];
}

double std::generate_canonical[abi:ne180100]<double,53ul,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(unsigned int *a1)
{
  unsigned int v1 = 48271 * (*a1 % 0xADC8);
  unsigned int v2 = 3399 * (*a1 / 0xADC8);
  BOOL v3 = v1 >= v2;
  unsigned int v4 = v1 - v2;
  if (v3) {
    int v5 = 0;
  }
  else {
    int v5 = 0x7FFFFFFF;
  }
  unsigned int v6 = v5 + v4;
  unsigned int v7 = v6 - 1;
  unsigned int v8 = v6 / 0xADC8;
  unsigned int v9 = 48271 * (v6 % 0xADC8);
  v8 *= 3399;
  BOOL v3 = v9 >= v8;
  unsigned int v10 = v9 - v8;
  if (v3) {
    int v11 = 0;
  }
  else {
    int v11 = 0x7FFFFFFF;
  }
  unsigned int v12 = v11 + v10;
  *a1 = v12;
  return ((double)v7 + (double)(v12 - 1) * 2147483650.0) / 4.61168601e18;
}

uint64_t ATXPBContextHeuristicsEventReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  unsigned int v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 16;
      }
      else
      {
        if (v17 == 2)
        {
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v24 = *v3;
            unint64_t v25 = *(void *)(a2 + v24);
            if (v25 == -1 || v25 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v26 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if ((v26 & 0x80) == 0) {
              goto LABEL_34;
            }
            v21 += 7;
            BOOL v14 = v22++ >= 9;
            if (v14)
            {
              uint64_t v23 = 0;
              goto LABEL_36;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_34:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v23 = 0;
          }
LABEL_36:
          *(unsigned char *)(a1 + 24) = v23 != 0;
          continue;
        }
        if (v17 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
        }
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 8;
      }
      double v20 = *(void **)(a1 + v19);
      *(void *)(a1 + v19) = v18;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D105C104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXPBPredictionAmbientLightContextReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  unsigned int v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 12) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_29;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_31;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_29:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_31:
        *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x270], 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D105F454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D105F6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D106044C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

void sub_1D10609FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1063680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0x16u);
}

uint64_t ATXCandidateRelevanceModelPBCandidateMetricsReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(_WORD *)(a1 + 76) |= 8u;
          while (1)
          {
            uint64_t v21 = *v3;
            uint64_t v22 = *(void *)(a2 + v21);
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)(a2 + *v4)) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              goto LABEL_88;
            }
            v18 += 7;
            BOOL v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_90;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_88:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v20) = 0;
          }
LABEL_90:
          uint64_t v73 = 28;
          goto LABEL_107;
        case 2u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v20 = 0;
          *(_WORD *)(a1 + 76) |= 0x10u;
          while (2)
          {
            uint64_t v28 = *v3;
            uint64_t v29 = *(void *)(a2 + v28);
            unint64_t v30 = v29 + 1;
            if (v29 == -1 || v30 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
              *(void *)(a2 + v2_Block_object_dispose(&STACK[0x270], 8) = v30;
              v20 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                BOOL v15 = v27++ >= 9;
                if (v15)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_94;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v20) = 0;
          }
LABEL_94:
          uint64_t v73 = 32;
          goto LABEL_107;
        case 3u:
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v20 = 0;
          *(_WORD *)(a1 + 76) |= 1u;
          while (2)
          {
            uint64_t v34 = *v3;
            uint64_t v35 = *(void *)(a2 + v34);
            unint64_t v36 = v35 + 1;
            if (v35 == -1 || v36 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v37 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
              *(void *)(a2 + v34) = v36;
              v20 |= (unint64_t)(v37 & 0x7F) << v32;
              if (v37 < 0)
              {
                v32 += 7;
                BOOL v15 = v33++ >= 9;
                if (v15)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_98;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v20) = 0;
          }
LABEL_98:
          uint64_t v73 = 16;
          goto LABEL_107;
        case 4u:
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v20 = 0;
          *(_WORD *)(a1 + 76) |= 2u;
          while (2)
          {
            uint64_t v40 = *v3;
            uint64_t v41 = *(void *)(a2 + v40);
            unint64_t v42 = v41 + 1;
            if (v41 == -1 || v42 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v41);
              *(void *)(a2 + v40) = v42;
              v20 |= (unint64_t)(v43 & 0x7F) << v38;
              if (v43 < 0)
              {
                v38 += 7;
                BOOL v15 = v39++ >= 9;
                if (v15)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_102;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v20) = 0;
          }
LABEL_102:
          uint64_t v73 = 20;
          goto LABEL_107;
        case 5u:
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v20 = 0;
          *(_WORD *)(a1 + 76) |= 4u;
          break;
        case 6u:
          *(_WORD *)(a1 + 76) |= 0x40u;
          uint64_t v50 = *v3;
          unint64_t v51 = *(void *)(a2 + v50);
          if (v51 <= 0xFFFFFFFFFFFFFFFBLL && v51 + 4 <= *(void *)(a2 + *v4))
          {
            int v52 = *(_DWORD *)(*(void *)(a2 + *v7) + v51);
            *(void *)(a2 + v50) = v51 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v52 = 0;
          }
          uint64_t v74 = 40;
          goto LABEL_128;
        case 7u:
          *(_WORD *)(a1 + 76) |= 0x200u;
          uint64_t v53 = *v3;
          unint64_t v54 = *(void *)(a2 + v53);
          if (v54 <= 0xFFFFFFFFFFFFFFFBLL && v54 + 4 <= *(void *)(a2 + *v4))
          {
            int v52 = *(_DWORD *)(*(void *)(a2 + *v7) + v54);
            *(void *)(a2 + v53) = v54 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v52 = 0;
          }
          uint64_t v74 = 52;
          goto LABEL_128;
        case 8u:
          *(_WORD *)(a1 + 76) |= 0x80u;
          uint64_t v55 = *v3;
          unint64_t v56 = *(void *)(a2 + v55);
          if (v56 <= 0xFFFFFFFFFFFFFFFBLL && v56 + 4 <= *(void *)(a2 + *v4))
          {
            int v52 = *(_DWORD *)(*(void *)(a2 + *v7) + v56);
            *(void *)(a2 + v55) = v56 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v52 = 0;
          }
          uint64_t v74 = 44;
          goto LABEL_128;
        case 9u:
          *(_WORD *)(a1 + 76) |= 0x100u;
          uint64_t v57 = *v3;
          unint64_t v58 = *(void *)(a2 + v57);
          if (v58 <= 0xFFFFFFFFFFFFFFFBLL && v58 + 4 <= *(void *)(a2 + *v4))
          {
            int v52 = *(_DWORD *)(*(void *)(a2 + *v7) + v58);
            *(void *)(a2 + v57) = v58 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v52 = 0;
          }
          uint64_t v74 = 48;
          goto LABEL_128;
        case 0xAu:
          *(_WORD *)(a1 + 76) |= 0x20u;
          uint64_t v59 = *v3;
          unint64_t v60 = *(void *)(a2 + v59);
          if (v60 <= 0xFFFFFFFFFFFFFFFBLL && v60 + 4 <= *(void *)(a2 + *v4))
          {
            int v52 = *(_DWORD *)(*(void *)(a2 + *v7) + v60);
            *(void *)(a2 + v59) = v60 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v52 = 0;
          }
          uint64_t v74 = 36;
          goto LABEL_128;
        case 0xBu:
          *(_WORD *)(a1 + 76) |= 0x800u;
          uint64_t v61 = *v3;
          unint64_t v62 = *(void *)(a2 + v61);
          if (v62 <= 0xFFFFFFFFFFFFFFFBLL && v62 + 4 <= *(void *)(a2 + *v4))
          {
            int v52 = *(_DWORD *)(*(void *)(a2 + *v7) + v62);
            *(void *)(a2 + v61) = v62 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v52 = 0;
          }
          uint64_t v74 = 60;
          goto LABEL_128;
        case 0xCu:
          *(_WORD *)(a1 + 76) |= 0x4000u;
          uint64_t v63 = *v3;
          unint64_t v64 = *(void *)(a2 + v63);
          if (v64 <= 0xFFFFFFFFFFFFFFFBLL && v64 + 4 <= *(void *)(a2 + *v4))
          {
            int v52 = *(_DWORD *)(*(void *)(a2 + *v7) + v64);
            *(void *)(a2 + v63) = v64 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v52 = 0;
          }
          uint64_t v74 = 72;
          goto LABEL_128;
        case 0xDu:
          *(_WORD *)(a1 + 76) |= 0x1000u;
          uint64_t v65 = *v3;
          unint64_t v66 = *(void *)(a2 + v65);
          if (v66 <= 0xFFFFFFFFFFFFFFFBLL && v66 + 4 <= *(void *)(a2 + *v4))
          {
            int v52 = *(_DWORD *)(*(void *)(a2 + *v7) + v66);
            *(void *)(a2 + v65) = v66 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v52 = 0;
          }
          uint64_t v74 = 64;
          goto LABEL_128;
        case 0xEu:
          *(_WORD *)(a1 + 76) |= 0x2000u;
          uint64_t v67 = *v3;
          unint64_t v68 = *(void *)(a2 + v67);
          if (v68 <= 0xFFFFFFFFFFFFFFFBLL && v68 + 4 <= *(void *)(a2 + *v4))
          {
            int v52 = *(_DWORD *)(*(void *)(a2 + *v7) + v68);
            *(void *)(a2 + v67) = v68 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v52 = 0;
          }
          uint64_t v74 = 68;
          goto LABEL_128;
        case 0xFu:
          *(_WORD *)(a1 + 76) |= 0x400u;
          uint64_t v69 = *v3;
          unint64_t v70 = *(void *)(a2 + v69);
          if (v70 <= 0xFFFFFFFFFFFFFFFBLL && v70 + 4 <= *(void *)(a2 + *v4))
          {
            int v52 = *(_DWORD *)(*(void *)(a2 + *v7) + v70);
            *(void *)(a2 + v69) = v70 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v52 = 0;
          }
          uint64_t v74 = 56;
LABEL_128:
          *(_DWORD *)(a1 + v74) = v52;
          continue;
        case 0x10u:
          uint64_t v71 = PBReaderReadString();
          uint64_t v72 = *(void **)(a1 + 8);
          *(void *)(a1 + _Block_object_dispose(&STACK[0x270], 8) = v71;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v46 = *v3;
        uint64_t v47 = *(void *)(a2 + v46);
        unint64_t v48 = v47 + 1;
        if (v47 == -1 || v48 > *(void *)(a2 + *v4)) {
          break;
        }
        char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v47);
        *(void *)(a2 + v46) = v48;
        v20 |= (unint64_t)(v49 & 0x7F) << v44;
        if ((v49 & 0x80) == 0) {
          goto LABEL_104;
        }
        v44 += 7;
        BOOL v15 = v45++ >= 9;
        if (v15)
        {
          LODWORD(v20) = 0;
          goto LABEL_106;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_104:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v20) = 0;
      }
LABEL_106:
      uint64_t v73 = 24;
LABEL_107:
      *(_DWORD *)(a1 + v73) = v20;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDProactiveAppPredictionSessionReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(_DWORD *)(a1 + 192) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_229;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_231;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_229:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_231:
          *(void *)(a1 + _Block_object_dispose(&STACK[0x270], 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 192) |= 8u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_235;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_235:
          uint64_t v166 = 76;
          goto LABEL_341;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x8000u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_239;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_239:
          uint64_t v166 = 144;
          goto LABEL_341;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v37 = 0;
          *(_DWORD *)(a1 + 192) |= 0x4000000u;
          while (2)
          {
            uint64_t v38 = *v3;
            unint64_t v39 = *(void *)(a2 + v38);
            if (v39 == -1 || v39 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v40 = *(unsigned char *)(*(void *)(a2 + *v7) + v39);
              *(void *)(a2 + v3_Block_object_dispose(&STACK[0x270], 8) = v39 + 1;
              v37 |= (unint64_t)(v40 & 0x7F) << v35;
              if (v40 < 0)
              {
                v35 += 7;
                BOOL v14 = v36++ >= 9;
                if (v14)
                {
                  uint64_t v37 = 0;
                  goto LABEL_243;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v37 = 0;
          }
LABEL_243:
          BOOL v167 = v37 != 0;
          uint64_t v168 = 188;
          goto LABEL_320;
        case 5u:
          char v41 = 0;
          unsigned int v42 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 192) |= 4u;
          while (2)
          {
            uint64_t v43 = *v3;
            unint64_t v44 = *(void *)(a2 + v43);
            if (v44 == -1 || v44 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v45 = *(unsigned char *)(*(void *)(a2 + *v7) + v44);
              *(void *)(a2 + v43) = v44 + 1;
              v26 |= (unint64_t)(v45 & 0x7F) << v41;
              if (v45 < 0)
              {
                v41 += 7;
                BOOL v14 = v42++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_247;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_247:
          uint64_t v166 = 72;
          goto LABEL_341;
        case 6u:
          char v46 = 0;
          unsigned int v47 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x200000u;
          while (2)
          {
            uint64_t v48 = *v3;
            unint64_t v49 = *(void *)(a2 + v48);
            if (v49 == -1 || v49 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v50 = *(unsigned char *)(*(void *)(a2 + *v7) + v49);
              *(void *)(a2 + v4_Block_object_dispose(&STACK[0x270], 8) = v49 + 1;
              v26 |= (unint64_t)(v50 & 0x7F) << v46;
              if (v50 < 0)
              {
                v46 += 7;
                BOOL v14 = v47++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_251;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_251:
          uint64_t v166 = 168;
          goto LABEL_341;
        case 7u:
          char v51 = 0;
          unsigned int v52 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x40000u;
          while (2)
          {
            uint64_t v53 = *v3;
            unint64_t v54 = *(void *)(a2 + v53);
            if (v54 == -1 || v54 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v55 = *(unsigned char *)(*(void *)(a2 + *v7) + v54);
              *(void *)(a2 + v53) = v54 + 1;
              v26 |= (unint64_t)(v55 & 0x7F) << v51;
              if (v55 < 0)
              {
                v51 += 7;
                BOOL v14 = v52++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_255;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_255:
          uint64_t v166 = 156;
          goto LABEL_341;
        case 8u:
          char v56 = 0;
          unsigned int v57 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x10000u;
          while (2)
          {
            uint64_t v58 = *v3;
            unint64_t v59 = *(void *)(a2 + v58);
            if (v59 == -1 || v59 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v60 = *(unsigned char *)(*(void *)(a2 + *v7) + v59);
              *(void *)(a2 + v5_Block_object_dispose(&STACK[0x270], 8) = v59 + 1;
              v26 |= (unint64_t)(v60 & 0x7F) << v56;
              if (v60 < 0)
              {
                v56 += 7;
                BOOL v14 = v57++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_259;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_259:
          uint64_t v166 = 148;
          goto LABEL_341;
        case 9u:
          char v61 = 0;
          unsigned int v62 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x2000000u;
          while (2)
          {
            uint64_t v63 = *v3;
            unint64_t v64 = *(void *)(a2 + v63);
            if (v64 == -1 || v64 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v65 = *(unsigned char *)(*(void *)(a2 + *v7) + v64);
              *(void *)(a2 + v63) = v64 + 1;
              v26 |= (unint64_t)(v65 & 0x7F) << v61;
              if (v65 < 0)
              {
                v61 += 7;
                BOOL v14 = v62++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_263;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_263:
          uint64_t v166 = 184;
          goto LABEL_341;
        case 0xAu:
          char v66 = 0;
          unsigned int v67 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x4000u;
          while (2)
          {
            uint64_t v68 = *v3;
            unint64_t v69 = *(void *)(a2 + v68);
            if (v69 == -1 || v69 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v70 = *(unsigned char *)(*(void *)(a2 + *v7) + v69);
              *(void *)(a2 + v6_Block_object_dispose(&STACK[0x270], 8) = v69 + 1;
              v26 |= (unint64_t)(v70 & 0x7F) << v66;
              if (v70 < 0)
              {
                v66 += 7;
                BOOL v14 = v67++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_267;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_267:
          uint64_t v166 = 140;
          goto LABEL_341;
        case 0xBu:
          char v71 = 0;
          unsigned int v72 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 192) |= 2u;
          while (2)
          {
            uint64_t v73 = *v3;
            unint64_t v74 = *(void *)(a2 + v73);
            if (v74 == -1 || v74 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v75 = *(unsigned char *)(*(void *)(a2 + *v7) + v74);
              *(void *)(a2 + v73) = v74 + 1;
              v26 |= (unint64_t)(v75 & 0x7F) << v71;
              if (v75 < 0)
              {
                v71 += 7;
                BOOL v14 = v72++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_271;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_271:
          uint64_t v166 = 56;
          goto LABEL_341;
        case 0xCu:
          char v76 = 0;
          unsigned int v77 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x10u;
          while (2)
          {
            uint64_t v78 = *v3;
            unint64_t v79 = *(void *)(a2 + v78);
            if (v79 == -1 || v79 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v80 = *(unsigned char *)(*(void *)(a2 + *v7) + v79);
              *(void *)(a2 + v7_Block_object_dispose(&STACK[0x270], 8) = v79 + 1;
              v26 |= (unint64_t)(v80 & 0x7F) << v76;
              if (v80 < 0)
              {
                v76 += 7;
                BOOL v14 = v77++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_275;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_275:
          uint64_t v166 = 80;
          goto LABEL_341;
        case 0xDu:
          char v81 = 0;
          unsigned int v82 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x80000u;
          while (2)
          {
            uint64_t v83 = *v3;
            unint64_t v84 = *(void *)(a2 + v83);
            if (v84 == -1 || v84 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v85 = *(unsigned char *)(*(void *)(a2 + *v7) + v84);
              *(void *)(a2 + v83) = v84 + 1;
              v26 |= (unint64_t)(v85 & 0x7F) << v81;
              if (v85 < 0)
              {
                v81 += 7;
                BOOL v14 = v82++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_279;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_279:
          uint64_t v166 = 160;
          goto LABEL_341;
        case 0xEu:
          char v86 = 0;
          unsigned int v87 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x800u;
          while (2)
          {
            uint64_t v88 = *v3;
            unint64_t v89 = *(void *)(a2 + v88);
            if (v89 == -1 || v89 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v90 = *(unsigned char *)(*(void *)(a2 + *v7) + v89);
              *(void *)(a2 + v8_Block_object_dispose(&STACK[0x270], 8) = v89 + 1;
              v26 |= (unint64_t)(v90 & 0x7F) << v86;
              if (v90 < 0)
              {
                v86 += 7;
                BOOL v14 = v87++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_283;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_283:
          uint64_t v166 = 120;
          goto LABEL_341;
        case 0xFu:
          char v91 = 0;
          unsigned int v92 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x40u;
          while (2)
          {
            uint64_t v93 = *v3;
            unint64_t v94 = *(void *)(a2 + v93);
            if (v94 == -1 || v94 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v95 = *(unsigned char *)(*(void *)(a2 + *v7) + v94);
              *(void *)(a2 + v93) = v94 + 1;
              v26 |= (unint64_t)(v95 & 0x7F) << v91;
              if (v95 < 0)
              {
                v91 += 7;
                BOOL v14 = v92++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_287;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_287:
          uint64_t v166 = 88;
          goto LABEL_341;
        case 0x10u:
          char v96 = 0;
          unsigned int v97 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x1000000u;
          while (2)
          {
            uint64_t v98 = *v3;
            unint64_t v99 = *(void *)(a2 + v98);
            if (v99 == -1 || v99 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v100 = *(unsigned char *)(*(void *)(a2 + *v7) + v99);
              *(void *)(a2 + v9_Block_object_dispose(&STACK[0x270], 8) = v99 + 1;
              v26 |= (unint64_t)(v100 & 0x7F) << v96;
              if (v100 < 0)
              {
                v96 += 7;
                BOOL v14 = v97++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_291;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_291:
          uint64_t v166 = 180;
          goto LABEL_341;
        case 0x11u:
          char v101 = 0;
          unsigned int v102 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x800000u;
          while (2)
          {
            uint64_t v103 = *v3;
            unint64_t v104 = *(void *)(a2 + v103);
            if (v104 == -1 || v104 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v105 = *(unsigned char *)(*(void *)(a2 + *v7) + v104);
              *(void *)(a2 + v103) = v104 + 1;
              v26 |= (unint64_t)(v105 & 0x7F) << v101;
              if (v105 < 0)
              {
                v101 += 7;
                BOOL v14 = v102++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_295;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_295:
          uint64_t v166 = 176;
          goto LABEL_341;
        case 0x12u:
          char v106 = 0;
          unsigned int v107 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x100000u;
          while (2)
          {
            uint64_t v108 = *v3;
            unint64_t v109 = *(void *)(a2 + v108);
            if (v109 == -1 || v109 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v110 = *(unsigned char *)(*(void *)(a2 + *v7) + v109);
              *(void *)(a2 + v10_Block_object_dispose(&STACK[0x270], 8) = v109 + 1;
              v26 |= (unint64_t)(v110 & 0x7F) << v106;
              if (v110 < 0)
              {
                v106 += 7;
                BOOL v14 = v107++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_299;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_299:
          uint64_t v166 = 164;
          goto LABEL_341;
        case 0x13u:
          char v111 = 0;
          unsigned int v112 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x100u;
          while (2)
          {
            uint64_t v113 = *v3;
            unint64_t v114 = *(void *)(a2 + v113);
            if (v114 == -1 || v114 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v115 = *(unsigned char *)(*(void *)(a2 + *v7) + v114);
              *(void *)(a2 + v113) = v114 + 1;
              v26 |= (unint64_t)(v115 & 0x7F) << v111;
              if (v115 < 0)
              {
                v111 += 7;
                BOOL v14 = v112++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_303;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_303:
          uint64_t v166 = 108;
          goto LABEL_341;
        case 0x14u:
          char v116 = 0;
          unsigned int v117 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x400u;
          while (2)
          {
            uint64_t v118 = *v3;
            unint64_t v119 = *(void *)(a2 + v118);
            if (v119 == -1 || v119 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v120 = *(unsigned char *)(*(void *)(a2 + *v7) + v119);
              *(void *)(a2 + v11_Block_object_dispose(&STACK[0x270], 8) = v119 + 1;
              v26 |= (unint64_t)(v120 & 0x7F) << v116;
              if (v120 < 0)
              {
                v116 += 7;
                BOOL v14 = v117++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_307;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_307:
          uint64_t v166 = 116;
          goto LABEL_341;
        case 0x15u:
          char v121 = 0;
          unsigned int v122 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x200u;
          while (2)
          {
            uint64_t v123 = *v3;
            unint64_t v124 = *(void *)(a2 + v123);
            if (v124 == -1 || v124 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v125 = *(unsigned char *)(*(void *)(a2 + *v7) + v124);
              *(void *)(a2 + v123) = v124 + 1;
              v26 |= (unint64_t)(v125 & 0x7F) << v121;
              if (v125 < 0)
              {
                v121 += 7;
                BOOL v14 = v122++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_311;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_311:
          uint64_t v166 = 112;
          goto LABEL_341;
        case 0x16u:
          char v126 = 0;
          unsigned int v127 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x80u;
          while (2)
          {
            uint64_t v128 = *v3;
            unint64_t v129 = *(void *)(a2 + v128);
            if (v129 == -1 || v129 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v130 = *(unsigned char *)(*(void *)(a2 + *v7) + v129);
              *(void *)(a2 + v12_Block_object_dispose(&STACK[0x270], 8) = v129 + 1;
              v26 |= (unint64_t)(v130 & 0x7F) << v126;
              if (v130 < 0)
              {
                v126 += 7;
                BOOL v14 = v127++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_315;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_315:
          uint64_t v166 = 104;
          goto LABEL_341;
        case 0x17u:
          char v131 = 0;
          unsigned int v132 = 0;
          uint64_t v133 = 0;
          *(_DWORD *)(a1 + 192) |= 0x8000000u;
          while (2)
          {
            uint64_t v134 = *v3;
            unint64_t v135 = *(void *)(a2 + v134);
            if (v135 == -1 || v135 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v136 = *(unsigned char *)(*(void *)(a2 + *v7) + v135);
              *(void *)(a2 + v134) = v135 + 1;
              v133 |= (unint64_t)(v136 & 0x7F) << v131;
              if (v136 < 0)
              {
                v131 += 7;
                BOOL v14 = v132++ >= 9;
                if (v14)
                {
                  uint64_t v133 = 0;
                  goto LABEL_319;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v133 = 0;
          }
LABEL_319:
          BOOL v167 = v133 != 0;
          uint64_t v168 = 189;
LABEL_320:
          *(unsigned char *)(a1 + v16_Block_object_dispose(&STACK[0x270], 8) = v167;
          continue;
        case 0x18u:
          char v137 = 0;
          unsigned int v138 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x1000u;
          while (2)
          {
            uint64_t v139 = *v3;
            unint64_t v140 = *(void *)(a2 + v139);
            if (v140 == -1 || v140 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v141 = *(unsigned char *)(*(void *)(a2 + *v7) + v140);
              *(void *)(a2 + v139) = v140 + 1;
              v26 |= (unint64_t)(v141 & 0x7F) << v137;
              if (v141 < 0)
              {
                v137 += 7;
                BOOL v14 = v138++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_324;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_324:
          uint64_t v166 = 124;
          goto LABEL_341;
        case 0x19u:
          char v142 = 0;
          unsigned int v143 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x2000u;
          while (2)
          {
            uint64_t v144 = *v3;
            unint64_t v145 = *(void *)(a2 + v144);
            if (v145 == -1 || v145 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v146 = *(unsigned char *)(*(void *)(a2 + *v7) + v145);
              *(void *)(a2 + v144) = v145 + 1;
              v26 |= (unint64_t)(v146 & 0x7F) << v142;
              if (v146 < 0)
              {
                v142 += 7;
                BOOL v14 = v143++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_328;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_328:
          uint64_t v166 = 136;
          goto LABEL_341;
        case 0x1Au:
          char v147 = 0;
          unsigned int v148 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x400000u;
          while (2)
          {
            uint64_t v149 = *v3;
            unint64_t v150 = *(void *)(a2 + v149);
            if (v150 == -1 || v150 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v151 = *(unsigned char *)(*(void *)(a2 + *v7) + v150);
              *(void *)(a2 + v149) = v150 + 1;
              v26 |= (unint64_t)(v151 & 0x7F) << v147;
              if (v151 < 0)
              {
                v147 += 7;
                BOOL v14 = v148++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_332;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_332:
          uint64_t v166 = 172;
          goto LABEL_341;
        case 0x1Bu:
          char v152 = 0;
          unsigned int v153 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x20u;
          while (2)
          {
            uint64_t v154 = *v3;
            unint64_t v155 = *(void *)(a2 + v154);
            if (v155 == -1 || v155 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v156 = *(unsigned char *)(*(void *)(a2 + *v7) + v155);
              *(void *)(a2 + v154) = v155 + 1;
              v26 |= (unint64_t)(v156 & 0x7F) << v152;
              if (v156 < 0)
              {
                v152 += 7;
                BOOL v14 = v153++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_336;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_336:
          uint64_t v166 = 84;
          goto LABEL_341;
        case 0x1Cu:
          char v157 = 0;
          unsigned int v158 = 0;
          uint64_t v26 = 0;
          *(_DWORD *)(a1 + 192) |= 0x20000u;
          break;
        case 0x1Du:
          uint64_t v162 = PBReaderReadString();
          if (v162) {
            [(id)a1 addAppSequence:v162];
          }

          continue;
        case 0x1Eu:
          uint64_t v163 = PBReaderReadString();
          uint64_t v164 = 32;
          goto LABEL_227;
        case 0x1Fu:
          uint64_t v163 = PBReaderReadString();
          uint64_t v164 = 24;
          goto LABEL_227;
        case 0x20u:
          uint64_t v163 = PBReaderReadString();
          uint64_t v164 = 40;
          goto LABEL_227;
        case 0x21u:
          uint64_t v163 = PBReaderReadString();
          uint64_t v164 = 96;
          goto LABEL_227;
        case 0x22u:
          uint64_t v163 = PBReaderReadString();
          uint64_t v164 = 64;
          goto LABEL_227;
        case 0x23u:
          uint64_t v163 = PBReaderReadString();
          uint64_t v164 = 128;
          goto LABEL_227;
        case 0x24u:
          uint64_t v163 = PBReaderReadString();
          uint64_t v164 = 16;
LABEL_227:
          unint64_t v165 = *(void **)(a1 + v164);
          *(void *)(a1 + v164) = v163;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v159 = *v3;
        unint64_t v160 = *(void *)(a2 + v159);
        if (v160 == -1 || v160 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v161 = *(unsigned char *)(*(void *)(a2 + *v7) + v160);
        *(void *)(a2 + v159) = v160 + 1;
        v26 |= (unint64_t)(v161 & 0x7F) << v157;
        if ((v161 & 0x80) == 0) {
          goto LABEL_338;
        }
        v157 += 7;
        BOOL v14 = v158++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_340;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_338:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_340:
      uint64_t v166 = 152;
LABEL_341:
      *(_DWORD *)(a1 + v166) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D10763B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_1D107A8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_6_0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_error_impl(a1, v4, OS_LOG_TYPE_ERROR, a4, v5, 0xCu);
}

void sub_1D107C6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
}

void sub_1D107D7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXPBPredictionDeviceStateContextReadFrom(uint64_t a1, uint64_t a2)
{
  BOOL v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  int v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    unsigned int v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 != 2)
      {
        if (v17 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          goto LABEL_47;
        }
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 20) |= 2u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_39;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v20 = 0;
            goto LABEL_41;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_41:
        BOOL v33 = v20 != 0;
        uint64_t v34 = 17;
        goto LABEL_46;
      }
      uint64_t v30 = PBReaderReadString();
      unsigned int v31 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose(&STACK[0x270], 8) = v30;

LABEL_47:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v24 = 0;
    unsigned int v25 = 0;
    uint64_t v26 = 0;
    *(unsigned char *)(a1 + 20) |= 1u;
    while (1)
    {
      uint64_t v27 = *v3;
      unint64_t v28 = *(void *)(a2 + v27);
      if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
      *(void *)(a2 + v27) = v28 + 1;
      v26 |= (unint64_t)(v29 & 0x7F) << v24;
      if ((v29 & 0x80) == 0) {
        goto LABEL_43;
      }
      v24 += 7;
      BOOL v14 = v25++ >= 9;
      if (v14)
      {
        uint64_t v26 = 0;
        goto LABEL_45;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_43:
    if (*(unsigned char *)(a2 + *v5)) {
      uint64_t v26 = 0;
    }
LABEL_45:
    BOOL v33 = v26 != 0;
    uint64_t v34 = 16;
LABEL_46:
    *(unsigned char *)(a1 + v34) = v33;
    goto LABEL_47;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D107FB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1D1080374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D1081788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1081A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1D1081C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D1081F20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1082910(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

__CFString *widgetKindForDeduping(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"com.apple.CalendarWidget.CalendarListWidget"]) {
    unsigned int v2 = @"com.apple.CalendarWidget.CalendarUpNextWidget";
  }
  else {
    unsigned int v2 = (__CFString *)v1;
  }

  return v2;
}

void sub_1D1086918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D10874C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ATXGamePlayKitCDecisionNode::branches(ATXGamePlayKitCDecisionNode *this)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v4 = *(void **)this;
  BOOL v3 = (void *)*((void *)this + 1);
  while (v4 != v3)
  {
    if (*v4) {
      objc_msgSend(v2, "addObject:");
    }
    v4 += 3;
  }
  return v2;
}

void sub_1D10875D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1087BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void **std::vector<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<ATXPredictionItem>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    BOOL v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>>((uint64_t)result, v13);
    int v15 = &v14[24 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[24 * v16];
    long long v17 = *a2;
    *(void *)a2 = 0;
    *(_OWORD *)int v15 = v17;
    *((void *)v15 + 2) = *((void *)a2 + 2);
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    v18[2] = v15 + 24;
    std::vector<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::~__split_buffer(v18);
  }
  else
  {
    long long v8 = *a2;
    *(void *)a2 = 0;
    *(_OWORD *)unint64_t v7 = v8;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    uint64_t v9 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v9;
  return result;
}

void sub_1D1087DD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>::~pair(uint64_t a1)
{
  id v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  return a1;
}

void sub_1D1087F94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D10880E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_1D1088234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_1D1088324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t v13 = v12;

  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_1D1088440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D1088534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D10888C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  char v18 = v16;

  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }

  _Unwind_Resume(a1);
}

void ATXGamePlayKitCDecisionTree::decode(ATXGamePlayKitCDecisionTree *this, NSArray *a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  v62[0] = 0;
  v62[1] = 0;
  char v61 = (uint64_t *)v62;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  obj = a2;
  uint64_t v3 = [(NSArray *)obj countByEnumeratingWithState:&v57 objects:v63 count:16];
  if (v3)
  {
    uint64_t v50 = *(void *)v58;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v58 != v50) {
          objc_enumerationMutation(obj);
        }
        unint64_t v5 = *(void **)(*((void *)&v57 + 1) + 8 * i);
        unint64_t v6 = [v5 objectForKeyedSubscript:@"branch"];
        BOOL v7 = v6 == 0;

        if (v7)
        {
          uint64_t v30 = [(NSArray *)obj firstObject];
          uint64_t v31 = [v30 objectForKeyedSubscript:@"attribute"];
          uint64_t v32 = *(void **)(*(void *)this + 56);
          *(void *)(*(void *)this + 56) = v31;

          BOOL v33 = [v30 objectForKeyedSubscript:@"randomDistribution"];
          BOOL v34 = v33 == 0;

          if (!v34)
          {
            char v35 = [v30 objectForKeyedSubscript:@"randomDistribution"];
            unsigned int v36 = [v35 objectAtIndexedSubscript:0];

            uint64_t v37 = [v30 objectForKeyedSubscript:@"randomDistribution"];
            uint64_t v38 = [v37 objectAtIndexedSubscript:1];

            unint64_t v39 = [v30 objectForKeyedSubscript:@"randomDistribution"];
            char v40 = [v39 objectAtIndexedSubscript:2];

            char v41 = -[ATXGamePlayKitRandomDistribution initWithRandomSource:lowestValue:highestValue:]([ATXGamePlayKitRandomDistribution alloc], "initWithRandomSource:lowestValue:highestValue:", v40, [v36 integerValue], objc_msgSend(v38, "integerValue"));
            unsigned int v42 = *(void **)(*(void *)this + 72);
            *(void *)(*(void *)this + 72) = v41;
          }
          char v55 = 0;
          uint64_t v43 = [v30 objectForKeyedSubscript:@"depth"];
          unint64_t v44 = (void *)[v43 integerValue];

          char v55 = v44;
          *(void *)&long long v51 = &v55;
          char v45 = std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(&v61, (uint64_t *)&v55, (uint64_t)&std::piecewise_construct, (uint64_t **)&v51);
          uint64_t v47 = *(void *)this;
          uint64_t v46 = *((void *)this + 1);
          if (v46) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v48 = (std::__shared_weak_count *)v45[6];
          v45[5] = v47;
          v45[6] = v46;
          if (v48) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v48);
          }
        }
        else
        {
          _ZNSt3__115allocate_sharedB8ne180100I27ATXGamePlayKitCDecisionNodeNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v55);
          uint64_t v8 = [v5 objectForKeyedSubscript:@"attribute"];
          uint64_t v9 = (void *)v55[7];
          v55[7] = v8;

          unint64_t v10 = [v5 objectForKeyedSubscript:@"randomDistribution"];
          BOOL v11 = v10 == 0;

          if (!v11)
          {
            unint64_t v12 = [v5 objectForKeyedSubscript:@"randomDistribution"];
            unint64_t v13 = [v12 objectAtIndexedSubscript:0];

            BOOL v14 = [v5 objectForKeyedSubscript:@"randomDistribution"];
            int v15 = [v14 objectAtIndexedSubscript:1];

            uint64_t v16 = [v5 objectForKeyedSubscript:@"randomDistribution"];
            uint64_t v17 = [v16 objectAtIndexedSubscript:2];

            char v18 = -[ATXGamePlayKitRandomDistribution initWithRandomSource:lowestValue:highestValue:]([ATXGamePlayKitRandomDistribution alloc], "initWithRandomSource:lowestValue:highestValue:", v17, [v13 integerValue], objc_msgSend(v15, "integerValue"));
            unsigned int v19 = (void *)v55[9];
            v55[9] = v18;

            uint64_t v20 = (void *)v55[10];
            v55[10] = v17;
          }
          uint64_t v21 = [v5 objectForKeyedSubscript:@"branchValue"];
          unint64_t v22 = (void *)v55[8];
          v55[8] = v21;

          uint64_t v54 = 0;
          char v23 = [v5 objectForKeyedSubscript:@"depth"];
          uint64_t v24 = [v23 integerValue];

          uint64_t v54 = v24;
          *(void *)&long long v51 = &v54;
          unsigned int v25 = std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(&v61, &v54, (uint64_t)&std::piecewise_construct, (uint64_t **)&v51);
          uint64_t v27 = v55;
          uint64_t v26 = v56;
          if (v56) {
            atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unint64_t v28 = (std::__shared_weak_count *)v25[6];
          v25[5] = (uint64_t)v27;
          v25[6] = (uint64_t)v26;
          if (v28) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v28);
          }
          uint64_t v53 = v54 - 1;
          *(void *)&long long v51 = &v53;
          char v29 = (uint64_t *)std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(&v61, &v53, (uint64_t)&std::piecewise_construct, (uint64_t **)&v51)[5];
          *(void *)&long long v51 = [v5 objectForKeyedSubscript:@"branch"];
          *((void *)&v51 + 1) = v55;
          unsigned int v52 = v56;
          if (v56) {
            atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::vector<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::push_back[abi:ne180100](v29, &v51);
          if (v52) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v52);
          }

          if (v56) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v56);
          }
        }
      }
      uint64_t v3 = [(NSArray *)obj countByEnumeratingWithState:&v57 objects:v63 count:16];
    }
    while (v3);
  }

  std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::destroy((uint64_t)&v61, v62[0]);
}

void sub_1D1088EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,void *a28)
{
  std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::destroy((uint64_t)&a27, a28);
  _Unwind_Resume(a1);
}

id ATXGamePlayKitCDecisionTree::encodeWithCoder(uint64_t a1, ATXGamePlayKitCDecisionNode **a2, void *a3, uint64_t a4, void *a5)
{
  v37[1] = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  id v10 = a5;
  BOOL v11 = v10;
  if (v9)
  {
    unint64_t v12 = v10;
  }
  else
  {
    unint64_t v13 = *(ATXGamePlayKitCDecisionNode **)a1;
    BOOL v14 = *(void **)(a1 + 8);
    if (v14) {
      atomic_fetch_add_explicit(v14 + 1, 1uLL, memory_order_relaxed);
    }
    int v15 = (std::__shared_weak_count *)a2[1];
    *a2 = v13;
    a2[1] = (ATXGamePlayKitCDecisionNode *)v14;
    if (v15)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      unint64_t v13 = *a2;
    }
    uint64_t v16 = (void *)MEMORY[0x1E4F1CA60];
    uint64_t v17 = ATXGamePlayKitCDecisionNode::nodeData(v13, 0);
    unint64_t v12 = [v16 dictionaryWithDictionary:v17];

    char v18 = [NSNumber numberWithInteger:a4];
    [v12 setObject:v18 forKeyedSubscript:@"depth"];

    id v19 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    [v12 setObject:v19 forKeyedSubscript:@"children"];

    v37[0] = v12;
    id v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v37 count:1];
  }
  uint64_t v21 = *(void *)*a2;
  uint64_t v20 = *((void *)*a2 + 1);
  if (v21 != v20)
  {
    uint64_t v22 = a4 + 1;
    do
    {
      char v23 = *(ATXGamePlayKitCDecisionNode **)(v21 + 8);
      if (v23)
      {
        uint64_t v24 = (void *)MEMORY[0x1E4F1CA60];
        unsigned int v25 = ATXGamePlayKitCDecisionNode::nodeData(v23, *(objc_object **)v21);
        uint64_t v26 = [v24 dictionaryWithDictionary:v25];

        uint64_t v27 = [NSNumber numberWithInteger:v22];
        [v26 setObject:v27 forKeyedSubscript:@"depth"];

        id v28 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        [v26 setObject:v28 forKeyedSubscript:@"children"];

        char v29 = [v12 objectForKeyedSubscript:@"children"];
        uint64_t v30 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v9, "count"));
        [v29 addObject:v30];

        uint64_t v31 = *(std::__shared_weak_count **)(v21 + 16);
        uint64_t v35 = *(void *)(v21 + 8);
        unsigned int v36 = v31;
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v32 = [v9 arrayByAddingObject:v26];
        uint64_t v33 = ATXGamePlayKitCDecisionTree::encodeWithCoder(a1, &v35, v32, v22, v26);

        if (v36) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v36);
        }

        id v9 = (id)v33;
      }
      v21 += 24;
    }
    while (v21 != v20);
  }

  return v9;
}

void sub_1D10892FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1089490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D108951C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  id v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)ATXGamePlayKitDecisionTree;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
}

void sub_1D1089928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }

  _Unwind_Resume(a1);
}

void ATXGamePlayKitCDecisionTree::cartTreeGrowth(ATXGamePlayKitCDecisionTree *a1, void *a2, void *a3, void *a4, unint64_t a5, uint64_t a6, double a7)
{
  id v10 = a2;
  id v11 = a3;
  char v61 = v10;
  unint64_t v12 = [(NSArray *)v10 count];
  double v13 = ATXGamePlayKitCDecisionTree::giniImpurity(a1, v10);
  double v14 = (double)v12;
  unint64_t v15 = (unint64_t)(double)v12;
  *(void *)(*a4 + 4_Block_object_dispose(&STACK[0x270], 8) = v15;
  if (v13 >= 0.0)
  {
    if (v13 != 0.0)
    {
      v76[0] = 0;
      v76[1] = 0;
      char v75 = (uint64_t *)v76;
      long long v60 = ATXGamePlayKitCDecisionTree::getAttributeCounts((uint64_t)a1, v11, v10);
      unint64_t v19 = 0;
      uint64_t v20 = 0;
      double v21 = 1.0;
      while (1)
      {
        if ([v11 count] <= v19)
        {
          if (v21 > 0.0 && (unint64_t)[v11 count] < 2
            || (*(void *)(*a4 + 40) <= a5 ? (BOOL v40 = v14 < (double)(unint64_t)a6) : (BOOL v40 = 1), v40))
          {
            ATXGamePlayKitCDecisionTree::splitByAttribute(a1, v61, [v11 count], (uint64_t)&v72);
            char v41 = (uint64_t *)v72;
            if (v74 == 2)
            {
              if (v72 == (id *)&v73)
              {
                unint64_t v43 = 0;
                uint64_t v42 = 0;
              }
              else
              {
                uint64_t v42 = 0;
                unint64_t v43 = 0;
                do
                {
                  int v44 = [(id)v41[4] isEqualToNumber:&unk_1F27F0600];
                  char v45 = (void *)v41[5];
                  if (v44) {
                    uint64_t v42 = [v45 count];
                  }
                  else {
                    unint64_t v43 = [v45 count];
                  }
                  uint64_t v46 = (id *)v41[1];
                  if (v46)
                  {
                    do
                    {
                      uint64_t v47 = v46;
                      uint64_t v46 = (id *)*v46;
                    }
                    while (v46);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v47 = (id *)v41[2];
                      BOOL v48 = *v47 == v41;
                      char v41 = (uint64_t *)v47;
                    }
                    while (!v48);
                  }
                  char v41 = (uint64_t *)v47;
                }
                while (v47 != (id *)&v73);
              }
              char v55 = &unk_1F27F0600;
              char v56 = *(void **)(*a4 + 56);
              if ((double)v43 / ((double)(v42 + v43) + 0.001) >= a7) {
                char v55 = &unk_1F27F0618;
              }
              *(void *)(*a4 + 56) = v55;
            }
            else if (v72 != (id *)&v73)
            {
              unint64_t v52 = 0;
              do
              {
                if (v52 < [(id)v41[5] count])
                {
                  objc_storeStrong((id *)(*a4 + 56), (id)v41[4]);
                  unint64_t v52 = [(id)v41[5] count];
                }
                uint64_t v53 = (id *)v41[1];
                if (v53)
                {
                  do
                  {
                    uint64_t v54 = v53;
                    uint64_t v53 = (id *)*v53;
                  }
                  while (v53);
                }
                else
                {
                  do
                  {
                    uint64_t v54 = (id *)v41[2];
                    BOOL v48 = *v54 == v41;
                    char v41 = (uint64_t *)v54;
                  }
                  while (!v48);
                }
                char v41 = (uint64_t *)v54;
              }
              while (v54 != (id *)&v73);
            }
            uint64_t v50 = v73;
            long long v51 = (uint64_t *)&v72;
          }
          else
          {
            objc_storeStrong((id *)(*a4 + 56), v20);
            std::map<objc_object * {__strong},NSMutableArray * {__strong}>::map[abi:ne180100](v64, (uint64_t)&v75);
            unint64_t v49 = (std::__shared_weak_count *)a4[1];
            unsigned int v62 = (uint64_t *)*a4;
            uint64_t v63 = v49;
            if (v49) {
              atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            ATXGamePlayKitCDecisionTree::splitOnIndex((uint64_t)a1, a7, (uint64_t)v20, v11, v64, &v62, (uint64_t)v60, a5, a6);
            if (v63) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v63);
            }
            uint64_t v50 = (uint64_t *)v64[1];
            long long v51 = v64;
          }
          std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)v51, v50);

          std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v75, v76[0]);
          goto LABEL_73;
        }
        uint64_t v22 = [v60 objectAtIndexedSubscript:v19];
        if ([v22 integerValue] <= 2)
        {
        }
        else
        {
          char v23 = [(NSArray *)v61 firstObject];
          uint64_t v24 = [v23 objectAtIndexedSubscript:v19];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();

          if (isKindOfClass)
          {
            ATXGamePlayKitCDecisionTree::multiwaySplitByAttributeValue(a1, v61, v19, (uint64_t)&v72);
            std::map<objc_object * {__strong},NSMutableArray * {__strong}>::map[abi:ne180100](v69, (uint64_t)&v72);
            ATXGamePlayKitCDecisionTree::continuousGiniSplit(a1, (uint64_t)v69, (void **)&v70);
            std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)v69, (void *)v69[1]);
            [v71 floatValue];
            float v27 = v26;
            ATXGamePlayKitCDecisionTree::splitOnValueOfAttribute(a1, v61, v70, v19, (uint64_t)&v66);
            std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v72, v73);
            id v28 = v67;
            unsigned int v72 = (id *)v66;
            uint64_t v73 = v67;
            uint64_t v74 = v68;
            if (v68)
            {
              v67[2] = &v73;
              char v66 = (id **)&v67;
              unsigned int v67 = 0;
              uint64_t v68 = 0;
              id v28 = 0;
            }
            else
            {
              unsigned int v72 = (id *)&v73;
            }
            double v35 = v27;
            std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v66, v28);
            if (v21 <= v35)
            {
              double v35 = v21;
            }
            else
            {
              uint64_t v36 = [v11 objectAtIndexedSubscript:v19];

              uint64_t v20 = (void *)v36;
              std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__tree_node<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,void *> *,long>>(&v75, v72, (id *)&v73);
            }
            uint64_t v37 = (uint64_t *)v72;
            if (v72 != (id *)&v73)
            {
              do
                uint64_t v37 = std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::erase((uint64_t **)&v72, (uint64_t)v37);
              while (&v73 != (uint64_t **)v37);
            }
            uint64_t v38 = v70;
            char v70 = 0;

            id v39 = v71;
            id v71 = 0;

            std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v72, v73);
            double v21 = v35;
            goto LABEL_30;
          }
        }
        ATXGamePlayKitCDecisionTree::binarySplitByAttributeValue(a1, v61, v19, (uint64_t *)&v72);
        uint64_t v30 = (id **)v72;
        char v29 = v73;
        if (v72 == (id *)v73)
        {
          BOOL v34 = (uint64_t *)v72;
        }
        else
        {
          uint64_t v31 = v72 + 1;
          do
          {
            std::map<objc_object * {__strong},NSMutableArray * {__strong}>::map[abi:ne180100](v65, (uint64_t)v30);
            double v32 = ATXGamePlayKitCDecisionTree::giniSplit(a1, v65, v15);
            std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)v65, (void *)v65[1]);
            if (v32 < v21)
            {
              uint64_t v33 = [v11 objectAtIndexedSubscript:v19];

              uint64_t v20 = (void *)v33;
              if (v30 != (id **)&v75) {
                std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__tree_node<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,void *> *,long>>(&v75, *v30, v31);
              }
              double v21 = v32;
            }
            v30 += 3;
            v31 += 3;
          }
          while (v30 != (id **)v29);
          BOOL v34 = (uint64_t *)v72;
          uint64_t v30 = (id **)v73;
        }
        std::vector<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::erase((uint64_t)&v72, (uint64_t)v34, v30);
        char v66 = &v72;
        std::vector<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
LABEL_30:
        ++v19;
      }
    }
    uint64_t v20 = [(NSArray *)v10 firstObject];
    uint64_t v16 = [v20 lastObject];

    if (v16)
    {
      uint64_t v17 = [v20 lastObject];
      char v18 = *(void **)(*a4 + 56);
      *(void *)(*a4 + 56) = v17;
    }
LABEL_73:
  }
}

void sub_1D108A01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, std::__shared_weak_count *a17, char a18, void *a19)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&a18, a19);

  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(v21 - 144, *(void **)(v21 - 136));
  _Unwind_Resume(a1);
}

void sub_1D108A2B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D108A3B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D108A440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D108A4EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id ATXGamePlayKitCDecisionTree::findActionForAnswers(ATXGamePlayKitCDecisionTree *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  unint64_t v5 = *(uint64_t **)a1;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a1 + 1);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v6 = v5 + 1;
  if (v5[1] == *v5)
  {
    id v21 = 0;
  }
  else
  {
    uint64_t v22 = v4;
LABEL_5:
    BOOL v7 = (void *)v5[9];
    if (v7)
    {
      uint64_t v8 = [v7 nextInt];
LABEL_9:
      uint64_t v9 = *v5;
      uint64_t v10 = *v6;
      while (1)
      {
        if (v9 == v10) {
          goto LABEL_39;
        }
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v11 = (NSPredicate *)*(id *)v9;
          if ((ATXGamePlayKitCDecisionTree::isPredicateValid(a1, v11) & 1) == 0)
          {
            unint64_t v19 = __atxlog_handle_anchor();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 138543362;
              uint64_t v24 = v11;
              _os_log_fault_impl(&dword_1D0FA3000, v19, OS_LOG_TYPE_FAULT, "Encountered invalid predicate %{public}@", buf, 0xCu);
            }

            goto LABEL_39;
          }
          [(NSPredicate *)v11 allowEvaluation];
          unint64_t v12 = [v3 objectForKeyedSubscript:v5[7]];
          BOOL v13 = [(NSPredicate *)v11 evaluateWithObject:v12];

          if (v13)
          {
            unint64_t v5 = *(uint64_t **)(v9 + 8);
            uint64_t v4 = *(std::__shared_weak_count **)(v9 + 16);
            if (v4) {
              atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v22) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v22);
            }
            if (v5[1] == *v5)
            {
              id v21 = (id)v5[7];

              goto LABEL_40;
            }

            goto LABEL_33;
          }
        }
        else
        {
          id v14 = *(id *)v9;
          if (v5[9])
          {
            uint64_t v15 = [*(id *)v9 integerValue];
            BOOL v16 = v8 <= v15;
            v8 -= v15;
            if (v16) {
              goto LABEL_21;
            }
          }
          else
          {
            uint64_t v17 = [v3 objectForKeyedSubscript:v5[7]];
            int v18 = [v14 isEqual:v17];

            if (v18)
            {
LABEL_21:
              unint64_t v5 = *(uint64_t **)(v9 + 8);
              uint64_t v4 = *(std::__shared_weak_count **)(v9 + 16);
              if (v4) {
                atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v22) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v22);
              }
              if (v5[1] == *v5)
              {
                id v21 = (id)v5[7];
                goto LABEL_40;
              }
LABEL_33:
              id v21 = 0;
              unint64_t v6 = v5 + 1;
              uint64_t v22 = v4;
              if (v5[1] != *v5) {
                goto LABEL_5;
              }
              goto LABEL_40;
            }
          }
        }
        v9 += 24;
      }
    }
    if (v3)
    {
      uint64_t v8 = 0;
      if ([v3 count]) {
        goto LABEL_9;
      }
    }
LABEL_39:
    id v21 = 0;
    uint64_t v4 = v22;
  }
LABEL_40:
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  return v21;
}

void sub_1D108A7E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_1D108AAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1D108AC18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

__CFString *ATXGamePlayKitCDecisionTree::printTree(uint64_t a1, void **a2, void *a3, void *a4)
{
  id v7 = a3;
  uint64_t v8 = a4;
  if (*a2)
  {
    if ([v7 isEqualToString:@"\t"])
    {
      uint64_t v9 = [NSString stringWithFormat:@"\n%@(depth:%lu, ex:%lu)\n", (*a2)[7], (*a2)[5], (*a2)[6]];

      uint64_t v8 = (__CFString *)v9;
    }
    id v11 = (void *)**a2;
    for (uint64_t i = (void *)(*a2)[1]; v11 != i; v11 += 3)
    {
      if (v11[1])
      {
        unint64_t v12 = (std::__shared_weak_count *)v11[2];
        uint64_t v24 = v11[1];
        uint64_t v25 = v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BOOL v13 = [NSString stringWithFormat:@"%@\t", v7];
        id v14 = [NSString stringWithFormat:@"%@%@%@, %@(depth:%lu, ex:%lu)\n", v8, v7, *v11, *(void *)(v11[1] + 56), *(void *)(v11[1] + 40), *(void *)(v11[1] + 48)];
        uint64_t v15 = ATXGamePlayKitCDecisionTree::printTree(a1, &v24, v13, v14);

        BOOL v16 = v25;
      }
      else
      {
        uint64_t v17 = (std::__shared_weak_count *)v11[2];
        uint64_t v22 = 0;
        char v23 = v17;
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v18 = [NSString stringWithFormat:@"%@\t", v7];
        unint64_t v19 = [NSString stringWithFormat:@"%@%@%@\n", v8, v7, *v11];
        uint64_t v15 = ATXGamePlayKitCDecisionTree::printTree(a1, &v22, v18, v19);

        BOOL v16 = v23;
      }
      uint64_t v8 = (__CFString *)v15;
      if (v16)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        uint64_t v8 = (__CFString *)v15;
      }
    }
    uint64_t v8 = v8;
    uint64_t v20 = v8;
  }
  else
  {
    uint64_t v20 = &stru_1F2740B58;
  }

  return v20;
}

void sub_1D108AE68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D108AFEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D108B3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1D108B468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D108B50C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D108B6DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D108B7C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D108B848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D108B8BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D108B930(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D108BA14(_Unwind_Exception *a1)
{
  id v2 = v1;

  _Unwind_Resume(a1);
}

void sub_1D108BB00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D108BCD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D108BD98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D108BEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::__emplace_unique_key_args<long,std::piecewise_construct_t const&,std::tuple<long const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  id v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    uint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        uint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        unint64_t v6 = *v9;
        id v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        id v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    id v11 = (uint64_t *)operator new(0x38uLL);
    v11[4] = **a4;
    v11[5] = 0;
    v11[6] = 0;
    std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  unint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      id v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      id v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), unint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              double v10[2] = (uint64_t)v2;
              id v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            void *v9 = v2;
            v2[2] = (uint64_t)v9;
            id v3 = v9[2];
            id v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), unint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            id v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          id v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        id v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::destroy(a1, a2[1]);
    uint64_t v4 = (std::__shared_weak_count *)a2[6];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    operator delete(a2);
  }
}

id ATXGamePlayKitCDecisionNode::nodeData(ATXGamePlayKitCDecisionNode *this, objc_object *a2)
{
  v11[3] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  [v4 setObject:*((void *)this + 7) forKeyedSubscript:@"attribute"];
  unint64_t v5 = (void *)*((void *)this + 9);
  if (v5)
  {
    int v6 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v5, "lowestValue"));
    uint64_t v7 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(*((id *)this + 9), "highestValue", v6));
    uint64_t v8 = *((void *)this + 10);
    v11[1] = v7;
    v11[2] = v8;
    uint64_t v9 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:3];
    [v4 setObject:v9 forKeyedSubscript:@"randomDistribution"];
  }
  [v4 setObject:v3 forKeyedSubscript:@"branch"];
  [v4 setObject:*((void *)this + 8) forKeyedSubscript:@"branchValue"];

  return v4;
}

void sub_1D108C7B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double ATXGamePlayKitCDecisionTree::giniImpurity(ATXGamePlayKitCDecisionTree *this, NSArray *a2)
{
  id v3 = a2;
  id v4 = [(NSArray *)v3 firstObject];
  ATXGamePlayKitCDecisionTree::splitByAttribute(this, v3, [v4 count] - 1, (uint64_t)&v14);

  unint64_t v5 = [(NSArray *)v3 count];
  double v6 = 0.0;
  if (v5 && v15[1] != (void *)1)
  {
    uint64_t v7 = v14;
    if (v14 == v15)
    {
      double v6 = 1.0;
    }
    else
    {
      double v8 = (double)v5;
      double v6 = 1.0;
      do
      {
        unint64_t v9 = [v7[5] count];
        uint64_t v10 = v7[1];
        if (v10)
        {
          do
          {
            uint64_t v11 = (void **)v10;
            uint64_t v10 = (void *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            uint64_t v11 = (void **)v7[2];
            BOOL v12 = *v11 == v7;
            uint64_t v7 = v11;
          }
          while (!v12);
        }
        double v6 = v6 - (double)v9 / v8 * ((double)v9 / v8);
        uint64_t v7 = v11;
      }
      while (v11 != v15);
    }
  }
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v14, v15[0]);

  return v6;
}

void sub_1D108C908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&a10, a11);

  _Unwind_Resume(a1);
}

id ATXGamePlayKitCDecisionTree::getAttributeCounts(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  double v6 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v4, "count"));
  unint64_t v7 = 0;
  uint64_t v8 = MEMORY[0x1E4F1CC38];
  while ([v4 count] > v7)
  {
    unint64_t v9 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithCapacity:", objc_msgSend(v5, "count"));
    for (unint64_t i = 0; [v5 count] > i; ++i)
    {
      uint64_t v11 = [v5 objectAtIndexedSubscript:i];
      BOOL v12 = [v11 objectAtIndexedSubscript:v7];

      uint64_t v13 = [v9 objectForKeyedSubscript:v12];

      if (!v13) {
        [v9 setObject:v8 forKeyedSubscript:v12];
      }
    }
    id v14 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v9, "count"));
    [v6 setObject:v14 atIndexedSubscript:v7];

    ++v7;
  }

  return v6;
}

void sub_1D108CACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ATXGamePlayKitCDecisionTree::multiwaySplitByAttributeValue(ATXGamePlayKitCDecisionTree *this@<X0>, NSArray *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  double v6 = a2;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + _Block_object_dispose(&STACK[0x270], 8) = 0;
  *(void *)a4 = a4 + 8;
  unint64_t v7 = objc_opt_new();
  for (unint64_t i = 0; [(NSArray *)v6 count] > i; ++i)
  {
    unint64_t v9 = [(NSArray *)v6 objectAtIndexedSubscript:i];
    uint64_t v10 = [v9 objectAtIndexedSubscript:a3];

    uint64_t v11 = [v7 objectForKey:v10];

    if (v11)
    {
      BOOL v12 = [v7 objectForKey:v10];
      uint64_t v13 = [(NSArray *)v6 objectAtIndexedSubscript:i];
      [v12 addObject:v13];
    }
    else
    {
      id v14 = objc_alloc(MEMORY[0x1E4F1CA48]);
      BOOL v12 = [(NSArray *)v6 objectAtIndexedSubscript:i];
      uint64_t v13 = objc_msgSend(v14, "initWithObjects:", v12, 0);
      [v7 setObject:v13 forKey:v10];
    }
  }
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v15 = v7;
  uint64_t v16 = [v15 countByEnumeratingWithState:&v22 objects:v28 count:16];
  if (v16)
  {
    uint64_t v17 = *(void *)v23;
    do
    {
      uint64_t v18 = 0;
      do
      {
        if (*(void *)v23 != v17) {
          objc_enumerationMutation(v15);
        }
        unint64_t v26 = *(void *)(*((void *)&v22 + 1) + 8 * v18);
        uint64_t v19 = objc_msgSend(v15, "objectForKey:");
        float v27 = (id *)&v26;
        uint64_t v20 = std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<objc_object * {__strong},std::piecewise_construct_t const&,std::tuple<objc_object * const {__strong}&>,std::tuple<>>((uint64_t **)a4, &v26, (uint64_t)&std::piecewise_construct, &v27);
        id v21 = (void *)v20[5];
        v20[5] = v19;

        ++v18;
      }
      while (v16 != v18);
      uint64_t v16 = [v15 countByEnumeratingWithState:&v22 objects:v28 count:16];
    }
    while (v16);
  }
}

void sub_1D108CD88(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(v2, *(void **)(v2 + 8));
  _Unwind_Resume(a1);
}

void ATXGamePlayKitCDecisionTree::continuousGiniSplit(ATXGamePlayKitCDecisionTree *a1@<X0>, uint64_t a2@<X1>, void **a3@<X8>)
{
  std::map<objc_object * {__strong},NSMutableArray * {__strong}>::map[abi:ne180100](v170, a2);
  ATXGamePlayKitCDecisionTree::sortByAttributeWithAction((uint64_t)a1, v170);
  id v5 = (NSArray *)objc_claimAutoreleasedReturnValue();
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)v170, (void *)v170[1]);
  v169[0] = 0;
  v169[1] = 0;
  uint64_t v168 = (uint64_t *)v169;
  unint64_t v145 = v5;
  double v6 = [(NSArray *)v5 firstObject];
  ATXGamePlayKitCDecisionTree::splitByAttribute(a1, v5, [v6 count] - 1, (uint64_t)&v165);

  id v7 = objc_alloc(MEMORY[0x1E4F1CA48]);
  uint64_t v8 = (void *)[v7 initWithCapacity:v167];
  v164[0] = 0;
  v164[1] = 0;
  uint64_t v163 = (uint64_t *)v164;
  id v9 = objc_alloc(MEMORY[0x1E4F1CA48]);
  uint64_t v10 = [v9 initWithCapacity:v167];
  uint64_t v162 = @"<=";
  v171[0] = (uint64_t *)&v162;
  uint64_t v11 = std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v162, (uint64_t)&std::piecewise_construct, v171);
  BOOL v12 = (void *)v11[5];
  v11[5] = v10;

  id v13 = objc_alloc(MEMORY[0x1E4F1CA48]);
  uint64_t v14 = [v13 initWithCapacity:v167];
  unint64_t v140 = (uint64_t *)v169;
  char v141 = a3;
  char v161 = @">";
  v171[0] = (uint64_t *)&v161;
  id v15 = std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v161, (uint64_t)&std::piecewise_construct, v171);
  uint64_t v16 = (void *)v15[5];
  v15[5] = v14;

  for (unint64_t i = 0; [(NSArray *)v5 count] >= i; ++i)
  {
    id v160 = 0;
    if (i)
    {
      if ([(NSArray *)v5 count] == i)
      {
        uint64_t v17 = [(NSArray *)v5 objectAtIndexedSubscript:i - 2];
        unsigned int v143 = [v17 firstObject];

        uint64_t v18 = [(NSArray *)v5 objectAtIndexedSubscript:i - 1];
        uint64_t v19 = [v18 firstObject];

        char v142 = v19;
        [v19 floatValue];
        float v21 = v20;
        [v143 floatValue];
        float v23 = v22;
        long long v24 = NSNumber;
        [v19 floatValue];
        *(float *)&double v26 = (float)((float)(v21 - v23) * 0.5) + v25;
        float v27 = [v24 numberWithFloat:v26];
        id v28 = v160;
        id v160 = v27;

        uint64_t v29 = v165;
        if (v165 != &v166)
        {
          uint64_t v30 = 0;
          do
          {
            uint64_t v31 = v29[4];
            double v32 = [(NSArray *)v5 objectAtIndexedSubscript:i - 1];
            uint64_t v33 = [v32 lastObject];
            LODWORD(v31) = [v31 isEqual:v33];

            if (v31)
            {
              BOOL v34 = NSNumber;
              double v35 = [v8 objectAtIndexedSubscript:v30];
              uint64_t v36 = objc_msgSend(v34, "numberWithInteger:", objc_msgSend(v35, "integerValue") + 1);
              [v8 setObject:v36 atIndexedSubscript:v30];
            }
            else
            {
              double v35 = [v8 objectAtIndexedSubscript:v30];
              [v8 setObject:v35 atIndexedSubscript:v30];
            }

            uint64_t v37 = [v8 objectAtIndexedSubscript:v30];
            char v157 = @"<=";
            v171[0] = (uint64_t *)&v157;
            objc_msgSend((id)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v157, (uint64_t)&std::piecewise_construct, v171)[5], "setObject:atIndexedSubscript:", v37, v30);

            uint64_t v38 = NSNumber;
            uint64_t v39 = [v29[5] count];
            BOOL v40 = [v8 objectAtIndexedSubscript:v30];
            char v41 = objc_msgSend(v38, "numberWithUnsignedInteger:", v39 - objc_msgSend(v40, "integerValue"));
            char v156 = @">";
            v171[0] = (uint64_t *)&v156;
            objc_msgSend((id)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v156, (uint64_t)&std::piecewise_construct, v171)[5], "setObject:atIndexedSubscript:", v41, v30);

            uint64_t v42 = v29[1];
            if (v42)
            {
              do
              {
                unint64_t v43 = (void **)v42;
                uint64_t v42 = (void *)*v42;
              }
              while (v42);
            }
            else
            {
              do
              {
                unint64_t v43 = (void **)v29[2];
                BOOL v44 = *v43 == v29;
                uint64_t v29 = v43;
              }
              while (!v44);
            }
            ++v30;
            uint64_t v29 = v43;
          }
          while (v43 != &v166);
        }
      }
      else
      {
        char v66 = [(NSArray *)v5 objectAtIndexedSubscript:i - 1];
        unsigned int v143 = [v66 firstObject];

        unsigned int v67 = [(NSArray *)v5 objectAtIndexedSubscript:i];
        uint64_t v68 = [v67 firstObject];

        char v142 = v68;
        [v68 floatValue];
        float v70 = v69;
        [v143 floatValue];
        float v72 = v71;
        uint64_t v73 = NSNumber;
        [v68 floatValue];
        *(float *)&double v75 = v74 + (float)((float)(v70 - v72) * -0.5);
        char v76 = [v73 numberWithFloat:v75];
        id v77 = v160;
        id v160 = v76;

        uint64_t v78 = v165;
        if (v165 != &v166)
        {
          uint64_t v79 = 0;
          do
          {
            char v80 = v78[4];
            char v81 = [(NSArray *)v5 objectAtIndexedSubscript:i - 1];
            unsigned int v82 = [v81 lastObject];
            LODWORD(v80) = [v80 isEqual:v82];

            if (v80)
            {
              uint64_t v83 = NSNumber;
              unint64_t v84 = [v8 objectAtIndexedSubscript:v79];
              char v85 = objc_msgSend(v83, "numberWithInteger:", objc_msgSend(v84, "integerValue") + 1);
              [v8 setObject:v85 atIndexedSubscript:v79];
            }
            else
            {
              unint64_t v84 = [v8 objectAtIndexedSubscript:v79];
              [v8 setObject:v84 atIndexedSubscript:v79];
            }

            char v86 = [v8 objectAtIndexedSubscript:v79];
            unint64_t v155 = @"<=";
            v171[0] = (uint64_t *)&v155;
            objc_msgSend((id)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v155, (uint64_t)&std::piecewise_construct, v171)[5], "setObject:atIndexedSubscript:", v86, v79);

            unsigned int v87 = NSNumber;
            uint64_t v88 = [v78[5] count];
            unint64_t v89 = [v8 objectAtIndexedSubscript:v79];
            char v90 = objc_msgSend(v87, "numberWithUnsignedInteger:", v88 - objc_msgSend(v89, "integerValue"));
            uint64_t v154 = @">";
            v171[0] = (uint64_t *)&v154;
            objc_msgSend((id)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v154, (uint64_t)&std::piecewise_construct, v171)[5], "setObject:atIndexedSubscript:", v90, v79);

            char v91 = v78[1];
            if (v91)
            {
              do
              {
                unsigned int v92 = (void **)v91;
                char v91 = (void *)*v91;
              }
              while (v91);
            }
            else
            {
              do
              {
                unsigned int v92 = (void **)v78[2];
                BOOL v44 = *v92 == v78;
                uint64_t v78 = v92;
              }
              while (!v44);
            }
            ++v79;
            uint64_t v78 = v92;
          }
          while (v92 != &v166);
        }
      }
    }
    else
    {
      char v45 = [(NSArray *)v5 objectAtIndexedSubscript:0];
      unsigned int v143 = [v45 firstObject];

      uint64_t v46 = [(NSArray *)v5 objectAtIndexedSubscript:1];
      uint64_t v47 = [v46 firstObject];

      char v142 = v47;
      [v47 floatValue];
      float v49 = v48;
      [v143 floatValue];
      float v51 = v50;
      unint64_t v52 = NSNumber;
      [v143 floatValue];
      *(float *)&double v54 = v53 + (float)((float)(v49 - v51) * -0.5);
      char v55 = [v52 numberWithFloat:v54];
      id v56 = v160;
      id v160 = v55;

      long long v57 = v165;
      if (v165 != &v166)
      {
        uint64_t v58 = 0;
        do
        {
          [v8 setObject:&unk_1F27F0600 atIndexedSubscript:v58];
          long long v59 = [v8 objectAtIndexedSubscript:v58];
          uint64_t v159 = @"<=";
          v171[0] = (uint64_t *)&v159;
          objc_msgSend((id)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v159, (uint64_t)&std::piecewise_construct, v171)[5], "setObject:atIndexedSubscript:", v59, v58);

          long long v60 = NSNumber;
          uint64_t v61 = [v57[5] count];
          unsigned int v62 = [v8 objectAtIndexedSubscript:v58];
          uint64_t v63 = objc_msgSend(v60, "numberWithUnsignedInteger:", v61 - objc_msgSend(v62, "integerValue"));
          unsigned int v158 = @">";
          v171[0] = (uint64_t *)&v158;
          objc_msgSend((id)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v158, (uint64_t)&std::piecewise_construct, v171)[5], "setObject:atIndexedSubscript:", v63, v58);

          uint64_t v64 = v57[1];
          if (v64)
          {
            do
            {
              char v65 = (void **)v64;
              uint64_t v64 = (void *)*v64;
            }
            while (v64);
          }
          else
          {
            do
            {
              char v65 = (void **)v57[2];
              BOOL v44 = *v65 == v57;
              long long v57 = v65;
            }
            while (!v44);
          }
          ++v58;
          long long v57 = v65;
        }
        while (v65 != &v166);
      }
    }

    if (!i)
    {
      float v94 = 1.0;
      if (v167)
      {
        unint64_t v104 = 0;
        float v105 = 0.0;
        do
        {
          unsigned int v153 = @">";
          v171[0] = (uint64_t *)&v153;
          char v106 = objc_msgSend((id)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v153, (uint64_t)&std::piecewise_construct, v171)[5], "objectAtIndexedSubscript:", v104);
          [v106 floatValue];
          float v105 = v105 + v107;

          ++v104;
        }
        while (v167 > v104);
        if (v167)
        {
          unint64_t v108 = 0;
          float v94 = 1.0;
          do
          {
            char v152 = @">";
            v171[0] = (uint64_t *)&v152;
            unint64_t v109 = objc_msgSend((id)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v152, (uint64_t)&std::piecewise_construct, v171)[5], "objectAtIndexedSubscript:", v108);
            [v109 floatValue];
            float v94 = v94 - (float)((float)(v110 / v105) * (float)(v110 / v105));

            ++v108;
          }
          while (v167 > v108);
        }
      }
      goto LABEL_45;
    }
    if ([(NSArray *)v5 count] == i)
    {
      float v94 = 1.0;
      if (v167)
      {
        unint64_t v95 = 0;
        float v96 = 0.0;
        do
        {
          char v151 = @"<=";
          v171[0] = (uint64_t *)&v151;
          unsigned int v97 = objc_msgSend((id)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v151, (uint64_t)&std::piecewise_construct, v171)[5], "objectAtIndexedSubscript:", v95);
          [v97 floatValue];
          float v96 = v96 + v98;

          ++v95;
        }
        while (v167 > v95);
        if (v167)
        {
          unint64_t v99 = 0;
          float v94 = 1.0;
          do
          {
            unint64_t v150 = @"<=";
            v171[0] = (uint64_t *)&v150;
            char v100 = objc_msgSend((id)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v150, (uint64_t)&std::piecewise_construct, v171)[5], "objectAtIndexedSubscript:", v99);
            [v100 floatValue];
            float v94 = v94 - (float)((float)(v101 / v96) * (float)(v101 / v96));

            ++v99;
          }
          while (v167 > v99);
        }
      }
LABEL_45:
      *(float *)&double v93 = v94;
      uint64_t v102 = [NSNumber numberWithFloat:v93];
      v171[0] = (uint64_t *)&v160;
      uint64_t v103 = std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<objc_object * {__strong},std::piecewise_construct_t const&,std::tuple<objc_object * const {__strong}&>,std::tuple<>>(&v168, (unint64_t *)&v160, (uint64_t)&std::piecewise_construct, (id **)v171);
      goto LABEL_63;
    }
    float v111 = 1.0;
    if (v167)
    {
      unint64_t v112 = 0;
      float v113 = 0.0;
      float v114 = 0.0;
      do
      {
        uint64_t v149 = @"<=";
        v171[0] = (uint64_t *)&v149;
        char v115 = objc_msgSend((id)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v149, (uint64_t)&std::piecewise_construct, v171)[5], "objectAtIndexedSubscript:", v112);
        [v115 floatValue];
        float v117 = v116;

        unsigned int v148 = @">";
        v171[0] = (uint64_t *)&v148;
        uint64_t v118 = objc_msgSend((id)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v148, (uint64_t)&std::piecewise_construct, v171)[5], "objectAtIndexedSubscript:", v112);
        [v118 floatValue];
        float v114 = v114 + v117;
        float v113 = v113 + v119;

        ++v112;
      }
      while (v167 > v112);
      if (v167)
      {
        unint64_t v120 = 0;
        float v121 = 1.0;
        float v111 = 1.0;
        do
        {
          char v147 = @"<=";
          v171[0] = (uint64_t *)&v147;
          unsigned int v122 = objc_msgSend((id)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v147, (uint64_t)&std::piecewise_construct, v171)[5], "objectAtIndexedSubscript:", v120);
          [v122 floatValue];
          float v124 = v123;

          char v146 = @">";
          v171[0] = (uint64_t *)&v146;
          char v125 = objc_msgSend((id)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v163, (unint64_t *)&v146, (uint64_t)&std::piecewise_construct, v171)[5], "objectAtIndexedSubscript:", v120);
          [v125 floatValue];
          float v111 = v111 - (float)((float)(v124 / v114) * (float)(v124 / v114));
          float v121 = v121 - (float)((float)(v126 / v113) * (float)(v126 / v113));

          ++v120;
        }
        while (v167 > v120);
        goto LABEL_62;
      }
    }
    else
    {
      float v113 = 0.0;
      float v114 = 0.0;
    }
    float v121 = 1.0;
LABEL_62:
    unint64_t v127 = [(NSArray *)v5 count];
    *(float *)&double v128 = (float)(v121 * (float)(v113 / (float)v127)) + (float)((float)(v114 / (float)v127) * v111);
    uint64_t v102 = [NSNumber numberWithFloat:v128];
    v171[0] = (uint64_t *)&v160;
    uint64_t v103 = std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<objc_object * {__strong},std::piecewise_construct_t const&,std::tuple<objc_object * const {__strong}&>,std::tuple<>>(&v168, (unint64_t *)&v160, (uint64_t)&std::piecewise_construct, (id **)v171);
LABEL_63:
    unint64_t v129 = (void *)v103[5];
    v103[5] = v102;
  }
  *char v141 = &unk_1F27F0618;
  v141[1] = &unk_1F27F0618;
  char v130 = v168;
  if (v168 != v140)
  {
    char v131 = &unk_1F27F0618;
    do
    {
      [(id)v130[5] floatValue];
      float v133 = v132;
      [v131 floatValue];
      if (v133 < v134)
      {
        id v135 = (id)v130[4];
        id v136 = (id)v130[5];
        char v137 = *v141;
        *char v141 = v135;

        v141[1] = v136;
        char v131 = v136;
      }
      unsigned int v138 = (uint64_t *)v130[1];
      if (v138)
      {
        do
        {
          uint64_t v139 = v138;
          unsigned int v138 = (uint64_t *)*v138;
        }
        while (v138);
      }
      else
      {
        do
        {
          uint64_t v139 = (uint64_t *)v130[2];
          BOOL v44 = *v139 == (void)v130;
          char v130 = v139;
        }
        while (!v44);
      }
      char v130 = v139;
    }
    while (v139 != v140);
  }
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v163, v164[0]);

  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v165, v166);
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v168, v169[0]);
}

void sub_1D108DC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,char a32,void *a33,uint64_t a34,char a35,void *a36)
{
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&a32, a33);
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&a35, a36);
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(v37 - 216, *(void **)(v37 - 208));

  _Unwind_Resume(a1);
}

void ATXGamePlayKitCDecisionTree::splitOnValueOfAttribute(ATXGamePlayKitCDecisionTree *this@<X0>, NSArray *a2@<X1>, NSNumber *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v38[2] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a2;
  id v9 = a3;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + _Block_object_dispose(&STACK[0x270], 8) = 0;
  *(void *)a5 = a5 + 8;
  v37[0] = @"predicate";
  uint64_t v30 = v9;
  uint64_t v10 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"SELF <= %@", v9];
  v37[1] = @"value";
  v38[0] = v10;
  v38[1] = v9;
  id v28 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v38 forKeys:v37 count:2];

  v35[0] = @"predicate";
  uint64_t v11 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"SELF > %@", v9];
  v35[1] = @"value";
  v36[0] = v11;
  v36[1] = v9;
  uint64_t v29 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v36 forKeys:v35 count:2];

  unint64_t v12 = 0;
  id v13 = 0;
  while ([(NSArray *)v8 count] > v12)
  {
    uint64_t v14 = [(NSArray *)v8 objectAtIndexedSubscript:v12];
    id v15 = [v14 objectAtIndexedSubscript:a4];

    [v15 floatValue];
    float v17 = v16;
    [(NSNumber *)v30 floatValue];
    uint64_t v18 = v28;
    if (v17 > v19) {
      uint64_t v18 = v29;
    }
    id v20 = v18;

    id v13 = v20;
    id v33 = v13;
    BOOL v34 = &v33;
    LOBYTE(v20) = std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>((uint64_t **)a5, (unint64_t *)&v33, (uint64_t)&std::piecewise_construct, (uint64_t **)&v34)[5] == 0;

    if (v20)
    {
      id v24 = objc_alloc(MEMORY[0x1E4F1CA48]);
      float v23 = [(NSArray *)v8 objectAtIndexedSubscript:v12];
      uint64_t v25 = objc_msgSend(v24, "initWithObjects:", v23, 0);
      id v31 = v13;
      BOOL v34 = &v31;
      double v26 = std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>((uint64_t **)a5, (unint64_t *)&v31, (uint64_t)&std::piecewise_construct, (uint64_t **)&v34);
      float v27 = (void *)v26[5];
      v26[5] = v25;
    }
    else
    {
      id v32 = v13;
      BOOL v34 = &v32;
      float v21 = (void *)std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>((uint64_t **)a5, (unint64_t *)&v32, (uint64_t)&std::piecewise_construct, (uint64_t **)&v34)[5];
      float v22 = [(NSArray *)v8 objectAtIndexedSubscript:v12];
      [v21 addObject:v22];

      float v23 = v32;
    }

    ++v12;
  }
}

void sub_1D108E1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13)
{
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(v15, *(void **)(v15 + 8));
  _Unwind_Resume(a1);
}

id *std::pair<NSNumber * {__strong},NSNumber * {__strong}>::~pair(id *a1)
{
  return a1;
}

void ATXGamePlayKitCDecisionTree::binarySplitByAttributeValue(ATXGamePlayKitCDecisionTree *this@<X0>, NSArray *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  v32[2] = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  id v24 = v7;
  ATXGamePlayKitCDecisionTree::multiwaySplitByAttributeValue(this, v7, a3, (uint64_t)&v28);
  uint64_t v8 = v28;
  if (v28 != v29)
  {
    do
    {
      id v9 = v8 + 4;
      v27[0] = 0;
      v27[1] = 0;
      double v26 = (uint64_t *)v27;
      uint64_t v10 = (void *)v8[5];
      uint64_t v30 = (id *)(v8 + 4);
      uint64_t v11 = std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<objc_object * {__strong},std::piecewise_construct_t const&,std::tuple<objc_object * const {__strong}&>,std::tuple<>>(&v26, v8 + 4, (uint64_t)&std::piecewise_construct, &v30);
      objc_storeStrong((id *)v11 + 5, v10);
      id v12 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      id v13 = v28;
      if (v28 != v29)
      {
        do
        {
          BOOL v14 = v13[4] == v8[4] && v13[5] == v8[5];
          if (!v14) {
            objc_msgSend(v12, "addObjectsFromArray:");
          }
          uint64_t v15 = (void *)v13[1];
          if (v15)
          {
            do
            {
              float v16 = (void **)v15;
              uint64_t v15 = (void *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              float v16 = (void **)v13[2];
              BOOL v14 = *v16 == v13;
              id v13 = v16;
            }
            while (!v14);
          }
          id v13 = v16;
        }
        while (v16 != v29);
      }
      float v17 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"SELF != %@", *v9, v24];
      v31[0] = @"predicate";
      v31[1] = @"value";
      uint64_t v18 = *v9;
      v32[0] = v17;
      v32[1] = v18;
      id v25 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v32 forKeys:v31 count:2];
      uint64_t v30 = &v25;
      float v19 = std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(&v26, (unint64_t *)&v25, (uint64_t)&std::piecewise_construct, (uint64_t **)&v30);
      objc_storeStrong((id *)v19 + 5, v12);

      unint64_t v20 = a4[1];
      if (v20 >= a4[2])
      {
        uint64_t v21 = std::vector<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::__push_back_slow_path<std::allocator<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}>> const&>(a4, (uint64_t)&v26);
      }
      else
      {
        std::map<objc_object * {__strong},NSMutableArray * {__strong}>::map[abi:ne180100]((uint64_t *)a4[1], (uint64_t)&v26);
        uint64_t v21 = v20 + 24;
        a4[1] = v20 + 24;
      }
      a4[1] = v21;

      std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v26, v27[0]);
      float v22 = (void *)v8[1];
      if (v22)
      {
        do
        {
          float v23 = (void **)v22;
          float v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          float v23 = (void **)v8[2];
          BOOL v14 = *v23 == v8;
          uint64_t v8 = v23;
        }
        while (!v14);
      }
      uint64_t v8 = v23;
    }
    while (v23 != v29);
  }
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)&v28, v29[0]);
}

void sub_1D108E570(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::vector<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

double ATXGamePlayKitCDecisionTree::giniSplit(ATXGamePlayKitCDecisionTree *a1, void *a2, unint64_t a3)
{
  id v3 = a2 + 1;
  id v4 = (void *)*a2;
  if ((void *)*a2 == a2 + 1) {
    return 0.0;
  }
  double v6 = (double)a3;
  double v7 = 0.0;
  do
  {
    unint64_t v8 = [(id)v4[5] count];
    double v9 = ATXGamePlayKitCDecisionTree::giniImpurity(a1, (NSArray *)v4[5]);
    uint64_t v10 = (void *)v4[1];
    if (v10)
    {
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = (void *)*v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        uint64_t v11 = (void *)v4[2];
        BOOL v12 = *v11 == (void)v4;
        id v4 = v11;
      }
      while (!v12);
    }
    double v7 = v7 + (double)v8 / v6 * v9;
    id v4 = v11;
  }
  while (v11 != v3);
  return v7;
}

uint64_t std::vector<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::erase(uint64_t a1, uint64_t a2, void *a3)
{
  if ((void *)a2 != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::map<objc_object * {__strong},NSMutableArray * {__strong}> *,std::map<objc_object * {__strong},NSMutableArray * {__strong}>,std::map<objc_object * {__strong},NSMutableArray * {__strong}>,0>(a3, *(void **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        uint64_t v8 = v7 - 24;
        std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(v7 - 24, *(void **)(v7 - 16));
        uint64_t v7 = v8;
      }
      while (v8 != v6);
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x270], 8) = v6;
  }
  return a2;
}

void ATXGamePlayKitCDecisionTree::splitByAttribute(ATXGamePlayKitCDecisionTree *this@<X0>, NSArray *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = a2;
  unint64_t v7 = 0;
  *(void *)(a4 + _Block_object_dispose(&STACK[0x270], 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = a4 + 8;
  while ([(NSArray *)v6 count] > v7)
  {
    uint64_t v8 = [(NSArray *)v6 objectAtIndexedSubscript:v7];
    id v15 = [v8 objectAtIndexedSubscript:a3];

    float v16 = &v15;
    if (std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<objc_object * {__strong},std::piecewise_construct_t const&,std::tuple<objc_object * const {__strong}&>,std::tuple<>>((uint64_t **)a4, (unint64_t *)&v15, (uint64_t)&std::piecewise_construct, &v16)[5])
    {
      float v16 = &v15;
      double v9 = (void *)std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<objc_object * {__strong},std::piecewise_construct_t const&,std::tuple<objc_object * const {__strong}&>,std::tuple<>>((uint64_t **)a4, (unint64_t *)&v15, (uint64_t)&std::piecewise_construct, &v16)[5];
      uint64_t v10 = [(NSArray *)v6 objectAtIndexedSubscript:v7];
      [v9 addObject:v10];
    }
    else
    {
      id v11 = objc_alloc(MEMORY[0x1E4F1CA48]);
      uint64_t v10 = [(NSArray *)v6 objectAtIndexedSubscript:v7];
      uint64_t v12 = objc_msgSend(v11, "initWithObjects:", v10, 0);
      float v16 = &v15;
      id v13 = std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<objc_object * {__strong},std::piecewise_construct_t const&,std::tuple<objc_object * const {__strong}&>,std::tuple<>>((uint64_t **)a4, (unint64_t *)&v15, (uint64_t)&std::piecewise_construct, &v16);
      BOOL v14 = (void *)v13[5];
      v13[5] = v12;
    }
    ++v7;
  }
}

void sub_1D108E8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(v11, *(void **)(v11 + 8));
  _Unwind_Resume(a1);
}

void ATXGamePlayKitCDecisionTree::splitOnIndex(uint64_t a1, double a2, uint64_t a3, void *a4, void *a5, uint64_t **a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v34 = a4;
  float v17 = (void *)*a5;
  float v16 = a5 + 1;
  id v15 = v17;
  if (v17 != v16)
  {
    do
    {
      id v18 = (id)v15[4];
      _ZNSt3__115allocate_sharedB8ne180100I27ATXGamePlayKitCDecisionNodeNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v39);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0
        && ([v18 objectForKeyedSubscript:@"predicate"],
            float v19 = objc_claimAutoreleasedReturnValue(),
            v19,
            v19))
      {
        uint64_t v20 = [v18 objectForKeyedSubscript:@"value"];
        uint64_t v21 = (void *)v39[8];
        v39[8] = v20;

        id v22 = [v18 objectForKeyedSubscript:@"predicate"];
      }
      else
      {
        float v23 = v39;
        id v22 = v18;
        id v18 = (id)v23[8];
        v23[8] = v22;
      }

      id v24 = *a6;
      id v25 = v22;
      *(void *)&long long v37 = v25;
      *((void *)&v37 + 1) = v39;
      uint64_t v38 = v40;
      if (v40) {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::vector<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::push_back[abi:ne180100](v24, &v37);
      if (v38) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v38);
      }

      double v26 = v39;
      id v28 = *a6;
      float v27 = a6[1];
      if (v27) {
        atomic_fetch_add_explicit(v27 + 2, 1uLL, memory_order_relaxed);
      }
      uint64_t v29 = (std::__shared_weak_count *)v26[4];
      v26[3] = v28;
      v26[4] = v27;
      if (v29)
      {
        std::__shared_weak_count::__release_weak(v29);
        double v26 = v39;
      }
      v26[5] = (*a6)[5] + 1;
      uint64_t v30 = v15[5];
      double v35 = v26;
      uint64_t v36 = v40;
      if (v40) {
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      ATXGamePlayKitCDecisionTree::cartTreeGrowth(a1, v30, v34, &v35, a8, a9, a2);
      if (v36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v36);
      }
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
      }

      id v31 = (void *)v15[1];
      if (v31)
      {
        do
        {
          id v32 = v31;
          id v31 = (void *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          id v32 = (void *)v15[2];
          BOOL v33 = *v32 == (void)v15;
          id v15 = v32;
        }
        while (!v33);
      }
      id v15 = v32;
    }
    while (v32 != v16);
  }
}

void sub_1D108EB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>::~pair((uint64_t)&a12);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }

  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<objc_object * {__strong},std::piecewise_construct_t const&,std::tuple<objc_object * const {__strong}&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, id **a4)
{
  unint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        double v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    double v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x30uLL);
    void v11[4] = (uint64_t)**a4;
    v11[5] = 0;
    std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

id ATXGamePlayKitCDecisionTree::sortByAttributeWithAction(uint64_t a1, void *a2)
{
  v17[2] = *MEMORY[0x1E4F143B8];
  id v3 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v6 = (void *)*a2;
  id v4 = a2 + 1;
  uint64_t v5 = v6;
  if (v6 != v4)
  {
    do
    {
      for (unint64_t i = 0; [(id)v5[5] count] > i; ++i)
      {
        unint64_t v8 = (void *)v5[5];
        v17[0] = v5[4];
        double v9 = [v8 objectAtIndexedSubscript:i];
        unint64_t v10 = [v9 lastObject];
        v17[1] = v10;
        uint64_t v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v17 count:2];

        [v3 addObject:v11];
      }
      uint64_t v12 = (void *)v5[1];
      if (v12)
      {
        do
        {
          id v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          id v13 = (void *)v5[2];
          BOOL v14 = *v13 == (void)v5;
          uint64_t v5 = v13;
        }
        while (!v14);
      }
      uint64_t v5 = v13;
    }
    while (v13 != v4);
  }
  id v15 = [v3 sortedArrayUsingComparator:&__block_literal_global_301];

  return v15;
}

void sub_1D108EDAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN27ATXGamePlayKitCDecisionTree25sortByAttributeWithActionENSt3__13mapIU8__strongP11objc_objectU8__strongP14NSMutableArrayNS0_4lessIS4_EENS0_9allocatorINS0_4pairIU8__strongKS3_S7_EEEEEE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  uint64_t v6 = [v4 firstObject];
  [v6 floatValue];
  float v8 = v7;
  double v9 = [v5 firstObject];
  [v9 floatValue];
  float v11 = v10;

  if (v8 <= v11)
  {
    id v13 = [v4 firstObject];
    [v13 floatValue];
    float v15 = v14;
    float v16 = [v5 firstObject];
    [v16 floatValue];
    float v18 = v17;

    if (v15 >= v18) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = -1;
    }
  }
  else
  {
    uint64_t v12 = 1;
  }

  return v12;
}

void sub_1D108EEC4(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::__emplace_unique_key_args<NSString * {__strong},std::piecewise_construct_t const&,std::tuple<NSString * {__strong}&&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  float v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        double v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        float v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        float v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    double v9 = a1 + 1;
LABEL_10:
    float v11 = (uint64_t *)operator new(0x30uLL);
    uint64_t v12 = **a4;
    **a4 = 0;
    void v11[4] = v12;
    v11[5] = 0;
    std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

uint64_t *std::map<objc_object * {__strong},NSMutableArray * {__strong}>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<objc_object * {__strong},NSMutableArray * {__strong}>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__tree_node<std::__value_type,void *> *,long>>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1D108F064(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<objc_object * {__strong},NSMutableArray * {__strong}>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__tree_node<std::__value_type,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    id v4 = a2;
    id v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_hint_unique_key_args<objc_object * {__strong},std::pair<objc_object * const {__strong},NSMutableArray * {__strong}> const&>(v5, v6, v4 + 4, (id *)v4 + 4);
      float v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          float v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          id v4 = v8;
        }
        while (!v9);
      }
      id v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_hint_unique_key_args<objc_object * {__strong},std::pair<objc_object * const {__strong},NSMutableArray * {__strong}> const&>(uint64_t **a1, void *a2, unint64_t *a3, id *a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__find_equal<objc_object * {__strong}>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__construct_node<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::__insert_node_at(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

void *std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__find_equal<objc_object * {__strong}>(void *a1, void *a2, void *a3, void *a4, unint64_t *a5)
{
  id v5 = a1 + 1;
  if (a1 + 1 == a2 || (unint64_t v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      id v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        id v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    float v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          float v17 = v16;
          unint64_t v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          float v16 = (void *)*v17;
          id v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        id v5 = v17 + 1;
        float v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      float v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    float v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      float v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    uint64_t v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = v20;
          unint64_t v22 = v20[4];
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = (void *)*v21;
          id v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        id v5 = v21 + 1;
        uint64_t v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

id std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__construct_node<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}> const&>@<X0>(uint64_t a1@<X0>, id *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = operator new(0x30uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + _Block_object_dispose(&STACK[0x270], 8) = v5;
  v6[4] = *a2;
  id result = a2[1];
  v6[5] = result;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__move_assign(uint64_t a1, void *a2)
{
  id v4 = (void *)(a1 + 8);
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a2[1];
  void *v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    void *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

uint64_t **std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__tree_node<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,void *> *,long>>(uint64_t **result, id *a2, id *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *id result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    BOOL v14 = result;
    unint64_t v15 = v8;
    float v16 = v8;
    if (v8)
    {
      unint64_t v15 = std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          v17[0] = (id *)(v8 + 4);
          v17[1] = (id *)(v8 + 5);
          std::pair<objc_object * {__strong}&,NSMutableArray * {__strong}&>::operator=[abi:ne180100]<objc_object * const {__strong},NSMutableArray * {__strong},(void *)0>(v17, v9 + 4);
          std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__node_insert_multi(v5, v16);
          float v16 = v15;
          if (v15) {
            unint64_t v15 = std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          uint64_t v10 = (id *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              uint64_t v10 = (id *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (id *)v9[2];
              BOOL v11 = *a2 == v9;
              uint64_t v9 = a2;
            }
            while (!v11);
          }
          uint64_t v8 = v16;
          if (v16) {
            BOOL v11 = a2 == a3;
          }
          else {
            BOOL v11 = 1;
          }
          uint64_t v9 = a2;
        }
        while (!v11);
      }
    }
    id result = (uint64_t **)std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      id result = (uint64_t **)std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_multi<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}> const&>((uint64_t)v5, a2 + 4);
      uint64_t v12 = (id *)a2[1];
      if (v12)
      {
        do
        {
          id v13 = v12;
          uint64_t v12 = (id *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          id v13 = (id *)a2[2];
          BOOL v11 = *v13 == a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1D108F560(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__node_insert_multi(uint64_t **a1, uint64_t *a2)
{
  id v3 = a1 + 1;
  id v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        id v3 = (uint64_t **)v4;
        if (a2[4] >= (unint64_t)v4[4]) {
          break;
        }
        id v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      id v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::__insert_node_at(a1, (uint64_t)v3, v5, a2);
  return a2;
}

id **std::pair<objc_object * {__strong}&,NSMutableArray * {__strong}&>::operator=[abi:ne180100]<objc_object * const {__strong},NSMutableArray * {__strong},(void *)0>(id **a1, id *a2)
{
  return a1;
}

void *std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  id result = *(void **)(a1 + 16);
  if (result)
  {
    id v3 = (void *)*result;
    if (*result == a1)
    {
      *id result = 0;
      while (1)
      {
        id v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          id result = v4;
          id v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; id v3 = (void *)result[1])
      {
        do
        {
          id result = v3;
          id v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    id v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        id v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + _Block_object_dispose(&STACK[0x270], 8) = v2;
    }
    std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__emplace_multi<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}> const&>(uint64_t a1, id *a2)
{
  std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__construct_node<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}> const&>(a1, a2, (uint64_t)&v7);
  id v3 = (uint64_t **)(a1 + 8);
  id v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        id v3 = (uint64_t **)v4;
        if (v7[4] >= (unint64_t)v4[4]) {
          break;
        }
        id v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      id v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::__map_value_compare<long,std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>,std::less<long>,true>,std::allocator<std::__value_type<long,std::shared_ptr<ATXGamePlayKitCDecisionNode>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v3, v5, v7);
  return v7;
}

uint64_t *std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::erase(uint64_t **a1, uint64_t a2)
{
  id v3 = std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__remove_node_pointer(a1, (uint64_t *)a2);

  operator delete((void *)a2);
  return v3;
}

uint64_t *std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      id v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    id v4 = a2;
    do
    {
      id v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      id v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  uint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  id v3 = a2;
  if (*a2)
  {
    id v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      id v3 = a2;
      goto LABEL_7;
    }
    do
    {
      id v3 = v4;
      id v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  uint64_t v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    uint64_t *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      id result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      id result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      id v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + _Block_object_dispose(&STACK[0x270], 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *id v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        id result = v7;
      }
      uint64_t v7 = *(uint64_t **)(*v7 + 8);
    }
    unint64_t v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      float v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        uint64_t *v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        float v16 = v7;
      }
      else
      {
        unint64_t v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      id v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + _Block_object_dispose(&STACK[0x270], 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *id v24 = v23;
      goto LABEL_72;
    }
    float v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    float v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      float v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      id result = v7;
    }
    uint64_t v7 = *(uint64_t **)v12;
  }
  float v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  uint64_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    float v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    uint64_t v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    *uint64_t v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    float v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  id v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t std::vector<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::__push_back_slow_path<std::allocator<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<ATXPredictionItem>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  float v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  id v13 = v10;
  uint64_t v14 = (uint64_t *)&v10[24 * v4];
  float v16 = &v10[24 * v9];
  std::map<objc_object * {__strong},NSMutableArray * {__strong}>::map[abi:ne180100](v14, a2);
  unint64_t v15 = v14 + 3;
  std::vector<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::~__split_buffer(&v13);
  return v11;
}

void sub_1D108FC84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>,std::reverse_iterator<std::allocator<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}>>*>,std::allocator<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}>>*,std::allocator<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}>>*>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>,std::reverse_iterator<std::allocator<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}>>*>,std::allocator<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}>>*,std::allocator<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    uint64_t v8 = a3;
    do
    {
      uint64_t v9 = *(void *)(v8 - 24);
      v8 -= 24;
      *(void *)(v7 - 24) = v9;
      uint64_t v10 = (void *)(a3 - 16);
      uint64_t v11 = *(void *)(a3 - 16);
      *(void *)(v7 - 16) = v11;
      uint64_t v12 = v7 - 16;
      uint64_t v13 = *(void *)(a3 - 8);
      *(void *)(v7 - _Block_object_dispose(&STACK[0x270], 8) = v13;
      if (v13)
      {
        *(void *)(v11 + 16) = v12;
        *(void *)(a3 - 24) = v10;
        void *v10 = 0;
        *(void *)(a3 - _Block_object_dispose(&STACK[0x270], 8) = 0;
      }
      else
      {
        *(void *)(v7 - 24) = v12;
      }
      uint64_t v7 = *((void *)&v19 + 1) - 24;
      *((void *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    uint64_t v14 = v19;
  }
  char v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>,std::reverse_iterator<std::allocator<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>,std::reverse_iterator<std::allocator<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>,std::reverse_iterator<std::allocator<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>,std::reverse_iterator<std::allocator<std::pair<objc_object * const {__strong},NSMutableArray * {__strong}>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(v1, *(void **)(v1 + 8));
    v1 += 24;
  }
}

void **std::__split_buffer<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy(i - 24, *(void **)(i - 16));
  }
}

void *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::map<objc_object * {__strong},NSMutableArray * {__strong}> *,std::map<objc_object * {__strong},NSMutableArray * {__strong}>,std::map<objc_object * {__strong},NSMutableArray * {__strong}>,0>(void *a1, void *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      std::__tree<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<objc_object * {__strong},std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>,std::less<objc_object * {__strong}>,true>,std::allocator<std::__value_type<objc_object * {__strong},NSMutableArray * {__strong}>>>::__move_assign(a3, v4);
      v4 += 3;
      a3 += 24;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void std::vector<std::map<objc_object * {__strong},NSMutableArray * {__strong}>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 24;
        std::__tree<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::__map_value_compare<NSString * {__strong},std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>,std::less<NSString * {__strong}>,true>,std::allocator<std::__value_type<NSString * {__strong},NSMutableArray * {__strong}>>>::destroy((uint64_t)(v4 - 24), *((void **)v4 - 2));
        unint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t ATXGamePlayKitCDecisionTree::isPredicateValid(ATXGamePlayKitCDecisionTree *this, NSPredicate *a2)
{
  uint64_t v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v3 = v2;
    if ([(NSPredicate *)v3 options]) {
      goto LABEL_9;
    }
    unint64_t v4 = [(NSPredicate *)v3 leftExpression];
    uint64_t v5 = [v4 expressionType];

    if (v5 != 1) {
      goto LABEL_9;
    }
    uint64_t v6 = [(NSPredicate *)v3 rightExpression];
    uint64_t v7 = [v6 expressionType];

    if (!v7
      && (unint64_t)[(NSPredicate *)v3 predicateOperatorType] <= 5
      && (![(NSPredicate *)v3 customSelector]
       || (char *)[(NSPredicate *)v3 customSelector] == sel_compare_
       || (char *)[(NSPredicate *)v3 customSelector] == sel_isEqual_))
    {
      uint64_t v8 = 1;
    }
    else
    {
LABEL_9:
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

void sub_1D1090108(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

char *_ZNSt3__115allocate_sharedB8ne180100I27ATXGamePlayKitCDecisionNodeNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x78uLL);
  v2[4] = xmmword_1D142B460;
  v2[5] = 0u;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_1F272A0E0;
  *(_OWORD *)((char *)v2 + 40) = 0u;
  *((void *)v2 + 7) = 0;
  v2[6] = 0u;
  *((void *)v2 + 14) = 0;
  a1[1] = v2;
  *(_OWORD *)((char *)v2 + 24) = 0u;
  uint64_t result = (char *)v2 + 24;
  *a1 = result;
  return result;
}

void std::__shared_ptr_emplace<ATXGamePlayKitCDecisionNode>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F272A0E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ATXGamePlayKitCDecisionNode>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F272A0E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25F6530);
}

void std::__shared_ptr_emplace<ATXGamePlayKitCDecisionNode>::__on_zero_shared(uint64_t a1)
{
}

void ATXGamePlayKitCDecisionNode::~ATXGamePlayKitCDecisionNode(ATXGamePlayKitCDecisionNode *this)
{
  uint64_t v2 = (void *)*((void *)this + 7);
  *((void *)this + 7) = 0;

  uint64_t v3 = (void *)*((void *)this + 9);
  *((void *)this + 9) = 0;

  unint64_t v4 = (void *)*((void *)this + 10);
  *((void *)this + 10) = 0;

  objc_storeWeak((id *)this + 11, 0);
  std::vector<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::erase((uint64_t)this, *(void *)this, *((uint64_t **)this + 1));
  objc_destroyWeak((id *)this + 11);

  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = this;
  std::vector<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
}

uint64_t std::vector<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::erase(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if ((uint64_t *)a2 != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>> *,std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>> *,std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>> *,0>(a3, *(uint64_t **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 24;
        std::allocator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::destroy[abi:ne180100](a1 + 16, v7);
      }
      while (v7 != v6);
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x270], 8) = v6;
  }
  return a2;
}

void std::allocator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = *(void **)a2;
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>> *,std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>> *,std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>> *,0>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>::operator=[abi:ne180100](a3, v4);
      v4 += 3;
      a3 += 24;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>::operator=[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;

  long long v6 = *(_OWORD *)(a2 + 1);
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x270], 8) = v6;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return a1;
}

void std::vector<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 24;
        std::allocator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>,std::reverse_iterator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>*>,std::reverse_iterator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>*>,std::reverse_iterator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>,std::reverse_iterator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>*>,std::reverse_iterator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>*>,std::reverse_iterator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7 - 24;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *a3 = 0;
      *(_OWORD *)uint64_t v8 = v9;
      *(void *)(v8 + 16) = a3[2];
      a3[1] = 0;
      a3[2] = 0;
      *((void *)&v15 + 1) = v8;
      v8 -= 24;
      v7 -= 24;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>,std::reverse_iterator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>,std::reverse_iterator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>,std::reverse_iterator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>,std::reverse_iterator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::destroy[abi:ne180100](v3, v1);
      v1 += 24;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 24;
    std::allocator<std::pair<objc_object * {__strong},std::shared_ptr<ATXGamePlayKitCDecisionNode>>>::destroy[abi:ne180100](v4, i - 24);
  }
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100I27ATXGamePlayKitCDecisionTreeNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceI27ATXGamePlayKitCDecisionTreeNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_1D10907B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__120__shared_ptr_emplaceI27ATXGamePlayKitCDecisionTreeNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(uint64_t a1)
{
  *(void *)(a1 + _Block_object_dispose(&STACK[0x270], 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F272A130;
  ATXGamePlayKitCDecisionTree::ATXGamePlayKitCDecisionTree((ATXGamePlayKitCDecisionTree *)(a1 + 24));
  return a1;
}

void sub_1D1090814(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ATXGamePlayKitCDecisionTree>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F272A130;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ATXGamePlayKitCDecisionTree>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F272A130;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1D25F6530);
}

void std::__shared_ptr_emplace<ATXGamePlayKitCDecisionTree>::__on_zero_shared(uint64_t a1)
{
  std::allocator<ATXGamePlayKitCDecisionTree>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void ATXGamePlayKitCDecisionTree::ATXGamePlayKitCDecisionTree(ATXGamePlayKitCDecisionTree *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  _ZNSt3__115allocate_sharedB8ne180100I27ATXGamePlayKitCDecisionNodeNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v7);
  uint64_t v3 = v7;
  uint64_t v2 = v8;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v3;
  *((void *)this + 1) = v2;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
  }
  uint64_t v5 = *(void *)this;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 3);
  *((void *)this + 2) = v5;
  *((void *)this + 3) = v2;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1D1090954(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<ATXGamePlayKitCDecisionTree>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void linkChangedCallback(uint64_t a1, const __CFDictionary *a2, void *a3)
{
  uint64_t v4 = a3;
  if (a2)
  {
    uint64_t v5 = __atxlog_handle_default();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG)) {
      linkChangedCallback_cold_1((uint64_t)a2, v5);
    }

    CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(a2, @"LINK_CHANGED_IS_LINKDOWN");
    if (Value) {
      BOOL v7 = CFBooleanGetValue(Value) != 0;
    }
    else {
      BOOL v7 = 0;
    }
    if (CFDictionaryGetValue(a2, @"LINK_CHANGED_NETWORK")) {
      uint64_t v8 = (void *)[(id)WiFiNetworkGetSSID() copy];
    }
    else {
      uint64_t v8 = 0;
    }
    long long v9 = v4[3];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __linkChangedCallback_block_invoke;
    block[3] = &unk_1E68AD4C0;
    id v12 = v8;
    char v13 = v4;
    BOOL v14 = v7;
    id v10 = v8;
    dispatch_async(v9, block);
  }
}

void sub_1D1091028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __linkChangedCallback_block_invoke(uint64_t a1)
{
  uint64_t v3 = (uint64_t *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 32), v2);
    uint64_t v4 = objc_opt_new();
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }
  char v8 = *(unsigned char *)(a1 + 48);
  BOOL v7 = (unsigned char *)(a1 + 48);
  *(unsigned char *)(*((void *)v7 - 1) + 4_Block_object_dispose(&STACK[0x270], 8) = v8 ^ 1;
  long long v9 = __atxlog_handle_default();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
    __linkChangedCallback_block_invoke_cold_1(v3, v7, v9);
  }
}

uint64_t __getAirplaneMode_block_invoke()
{
  v2[1] = *MEMORY[0x1E4F143B8];
  v2[0] = @"AirplaneMode";
  [MEMORY[0x1E4F1C978] arrayWithObjects:v2 count:1];
  id v0 = dispatch_get_global_queue(9, 0);
  MGRegisterForUpdates();

  uint64_t result = MGGetBoolAnswer();
  atomic_store(result, getAirplaneMode_inAirplaneMode);
  return result;
}

void __getAirplaneMode_block_invoke_2()
{
  atomic_store(MGGetBoolAnswer(), getAirplaneMode_inAirplaneMode);
  id v0 = __atxlog_handle_default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG)) {
    __getAirplaneMode_block_invoke_2_cold_1(v0);
  }
}

void sub_1D1091D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v12 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1D1093774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL ATXMPBCacheAgeAtEngagementTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    BOOL v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 16;
LABEL_22:
        long long v19 = *(void **)(a1 + v18);
        *(void *)(a1 + v1_Block_object_dispose(&STACK[0x270], 8) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = PBReaderReadString();
    uint64_t v18 = 8;
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D109425C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

#error "1D10BBDF8: too big function (funcsize=0)"

id ATXAppBundleIdsForComplicationDescriptors(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = objc_opt_new();
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        char v8 = objc_msgSend(*(id *)(*((void *)&v11 + 1) + 8 * i), "extensionIdentity", (void)v11);
        unsigned int v9 = [v8 containerBundleIdentifier];

        if ([v9 length]) {
          [v2 addObject:v9];
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }

  return v2;
}

void sub_1D1120A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1120BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1120CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1120DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D112102C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11214F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1123B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void dispatch_sync_notxn_0(NSObject *a1, void *a2)
{
  id v3 = a2;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = __dispatch_sync_notxn_block_invoke_0;
  block[3] = &unk_1E68AB618;
  id v6 = v3;
  id v4 = v3;
  dispatch_sync(a1, block);
}

void sub_1D1126874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 192), 8);
  _Block_object_dispose((const void *)(v35 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1D1126FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 240), 8);
  _Block_object_dispose((const void *)(v35 - 192), 8);
  _Block_object_dispose((const void *)(v35 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1D11276F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 240), 8);
  _Block_object_dispose((const void *)(v35 - 192), 8);
  _Block_object_dispose((const void *)(v35 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1D11286AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D112D21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_1D112D7AC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void __dispatch_sync_notxn_block_invoke_0(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x1D25F6CC0]();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t OUTLINED_FUNCTION_4_5(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void OUTLINED_FUNCTION_6_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_7(uint64_t a1, uint64_t a2)
{
  return a2;
}

void OUTLINED_FUNCTION_9(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

uint64_t OUTLINED_FUNCTION_11(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

void OUTLINED_FUNCTION_13(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

void OUTLINED_FUNCTION_14(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0x20u);
}

void sub_1D1130C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t AWDProactiveActionDataReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  BOOL v7 = &OBJC_IVAR___ATXCoreDuetLogger__abGroup;
  char v8 = (int *)MEMORY[0x1E4F940B8];
  uint64_t v9 = &OBJC_IVAR___ATXCoreDuetLogger__abGroup;
  uint64_t v10 = &OBJC_IVAR___ATXCoreDuetLogger__abGroup;
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v11 = 0;
    unsigned int v12 = 0;
    unint64_t v13 = 0;
    while (1)
    {
      uint64_t v14 = *v3;
      uint64_t v15 = *(void *)(a2 + v14);
      unint64_t v16 = v15 + 1;
      if (v15 == -1 || v16 > *(void *)(a2 + *v4)) {
        break;
      }
      char v17 = *(unsigned char *)(*(void *)(a2 + *v8) + v15);
      *(void *)(a2 + v14) = v16;
      v13 |= (unint64_t)(v17 & 0x7F) << v11;
      if ((v17 & 0x80) == 0) {
        goto LABEL_12;
      }
      v11 += 7;
      BOOL v18 = v12++ >= 9;
      if (v18)
      {
        unint64_t v13 = 0;
        int v19 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v19 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v13 = 0;
    }
LABEL_14:
    if (v19 || (v13 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v13 >> 3))
    {
      case 1u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + v7[997]) |= 2u;
        while (1)
        {
          uint64_t v24 = *v3;
          uint64_t v25 = *(void *)(a2 + v24);
          unint64_t v26 = v25 + 1;
          if (v25 == -1 || v26 > *(void *)(a2 + *v4)) {
            break;
          }
          char v27 = *(unsigned char *)(*(void *)(a2 + *v8) + v25);
          *(void *)(a2 + v24) = v26;
          v23 |= (unint64_t)(v27 & 0x7F) << v21;
          if ((v27 & 0x80) == 0) {
            goto LABEL_68;
          }
          v21 += 7;
          BOOL v18 = v22++ >= 9;
          if (v18)
          {
            uint64_t v23 = 0;
            goto LABEL_70;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_68:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_70:
        *(void *)(a1 + v9[998]) = v23;
        goto LABEL_90;
      case 2u:
        uint64_t v28 = PBReaderReadString();
        uint64_t v29 = v10[999];
        goto LABEL_66;
      case 3u:
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v32 = 0;
        *(unsigned char *)(a1 + v7[997]) |= 4u;
        while (2)
        {
          uint64_t v33 = *v3;
          uint64_t v34 = *(void *)(a2 + v33);
          unint64_t v35 = v34 + 1;
          if (v34 == -1 || v35 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v36 = *(unsigned char *)(*(void *)(a2 + *v8) + v34);
            *(void *)(a2 + v33) = v35;
            v32 |= (unint64_t)(v36 & 0x7F) << v30;
            if (v36 < 0)
            {
              v30 += 7;
              BOOL v18 = v31++ >= 9;
              if (v18)
              {
                LODWORD(v32) = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v32) = 0;
        }
LABEL_74:
        *(_DWORD *)(a1 + 32) = v32;
        goto LABEL_90;
      case 4u:
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v39 = 0;
        *(unsigned char *)(a1 + v7[997]) |= 8u;
        while (2)
        {
          uint64_t v40 = *v3;
          uint64_t v41 = *(void *)(a2 + v40);
          unint64_t v42 = v41 + 1;
          if (v41 == -1 || v42 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v43 = *(unsigned char *)(*(void *)(a2 + *v8) + v41);
            *(void *)(a2 + v40) = v42;
            v39 |= (unint64_t)(v43 & 0x7F) << v37;
            if (v43 < 0)
            {
              v37 += 7;
              BOOL v18 = v38++ >= 9;
              if (v18)
              {
                uint64_t v39 = 0;
                goto LABEL_78;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v39 = 0;
        }
LABEL_78:
        BOOL v67 = v39 != 0;
        uint64_t v68 = 72;
        goto LABEL_87;
      case 5u:
        char v44 = 0;
        unsigned int v45 = 0;
        uint64_t v46 = 0;
        *(unsigned char *)(a1 + v7[997]) |= 0x10u;
        while (2)
        {
          uint64_t v47 = *v3;
          uint64_t v48 = *(void *)(a2 + v47);
          unint64_t v49 = v48 + 1;
          if (v48 == -1 || v49 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v50 = *(unsigned char *)(*(void *)(a2 + *v8) + v48);
            *(void *)(a2 + v47) = v49;
            v46 |= (unint64_t)(v50 & 0x7F) << v44;
            if (v50 < 0)
            {
              v44 += 7;
              BOOL v18 = v45++ >= 9;
              if (v18)
              {
                uint64_t v46 = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v46 = 0;
        }
LABEL_82:
        BOOL v67 = v46 != 0;
        uint64_t v68 = 73;
        goto LABEL_87;
      case 6u:
        *(unsigned char *)(a1 + v7[997]) |= 1u;
        uint64_t v51 = *v3;
        unint64_t v52 = *(void *)(a2 + v51);
        if (v52 <= 0xFFFFFFFFFFFFFFF7 && v52 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v53 = *(void *)(*(void *)(a2 + *v8) + v52);
          *(void *)(a2 + v51) = v52 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v53 = 0;
        }
        *(void *)(a1 + _Block_object_dispose(&STACK[0x270], 8) = v53;
        goto LABEL_90;
      case 7u:
        char v54 = 0;
        unsigned int v55 = 0;
        uint64_t v56 = 0;
        *(unsigned char *)(a1 + v7[997]) |= 0x20u;
        while (2)
        {
          uint64_t v57 = *v3;
          uint64_t v58 = *(void *)(a2 + v57);
          unint64_t v59 = v58 + 1;
          if (v58 == -1 || v59 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v60 = *(unsigned char *)(*(void *)(a2 + *v8) + v58);
            *(void *)(a2 + v57) = v59;
            v56 |= (unint64_t)(v60 & 0x7F) << v54;
            if (v60 < 0)
            {
              v54 += 7;
              BOOL v18 = v55++ >= 9;
              if (v18)
              {
                uint64_t v56 = 0;
                goto LABEL_86;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v56 = 0;
        }
LABEL_86:
        BOOL v67 = v56 != 0;
        uint64_t v68 = 74;
LABEL_87:
        *(unsigned char *)(a1 + v6_Block_object_dispose(&STACK[0x270], 8) = v67;
        goto LABEL_90;
      case 8u:
        uint64_t v61 = v7;
        unsigned int v62 = v10;
        uint64_t v63 = v9;
        uint64_t v64 = objc_alloc_init(AWDProactiveAppPredictionSubscores);
        objc_storeStrong((id *)(a1 + 64), v64);
        if PBReaderPlaceMark() && (AWDProactiveAppPredictionSubscoresReadFrom(v64, a2))
        {
          PBReaderRecallMark();

          uint64_t v9 = v63;
          uint64_t v10 = v62;
          BOOL v7 = v61;
LABEL_90:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 0xAu:
        uint64_t v28 = PBReaderReadString();
        uint64_t v29 = 48;
        goto LABEL_66;
      case 0xBu:
        uint64_t v28 = PBReaderReadString();
        uint64_t v29 = 40;
        goto LABEL_66;
      case 0xCu:
        uint64_t v28 = PBReaderReadString();
        uint64_t v29 = 56;
LABEL_66:
        char v66 = *(void **)(a1 + v29);
        *(void *)(a1 + v29) = v28;

        goto LABEL_90;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_90;
    }
  }
}

void sub_1D113689C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1D1136D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1D1137CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1D1138284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1D11388E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1D1138D38(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1D1139140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1139920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1139BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1139E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D113A248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D113A530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D113A770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D113A9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D113AF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D113B888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 160), 8);
  _Block_object_dispose((const void *)(v10 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1D113BED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D113C2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_3_2(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(void *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2112;
  *(void *)(a3 + 14) = a2;
  return result;
}

void OUTLINED_FUNCTION_5_1(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_fault_impl(a1, a4, OS_LOG_TYPE_FAULT, a2, a3, 0x16u);
}

uint64_t OUTLINED_FUNCTION_8()
{
  return v0;
}

void ATXUpdatePredictions(uint64_t a1, double a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)os_transaction_create();
  if (a1 == 20)
  {
    uint64_t v9 = +[ATXFaceSuggestionServer sharedInstance];
    [v9 regenerateFaceGalleryConfigurationWithCompletion:&__block_literal_global_67];
  }
  else if (a1 == 13)
  {
    uint64_t v5 = __atxlog_handle_default();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D0FA3000, v5, OS_LOG_TYPE_DEFAULT, "ATXUpdatePredictions: clearing ATXMagicalMomentsBlendingUpdater", buf, 2u);
    }

    id v6 = objc_opt_new();
    +[ATXMagicalMomentsBlendingUpdater updateBlendingLayerWithMagicalMomentsMap:v6];

    BOOL v7 = __atxlog_handle_default();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D0FA3000, v7, OS_LOG_TYPE_DEFAULT, "ATXUpdatePredictions: clearing ATXHeroAppBlendingUpdater", buf, 2u);
    }

    char v8 = objc_opt_new();
    +[ATXHeroAppBlendingUpdater updateBlendingLayerWithHeroAppPredictions:v8 currentLocation:0];
  }
  if (predictionUpdateDisabledByInternalSettings_onceToken != -1) {
    dispatch_once(&predictionUpdateDisabledByInternalSettings_onceToken, &__block_literal_global_111);
  }
  if (predictionUpdateDisabledByInternalSettings_disableCacheUpdateSetting)
  {
    uint64_t v10 = __atxlog_handle_default();
    if (os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      uint64_t v11 = "ATXUpdatePredictions: Skipping cache refresh due to internal settings";
LABEL_18:
      _os_log_impl(&dword_1D0FA3000, (os_log_t)v10, OS_LOG_TYPE_DEFAULT, v11, buf, 2u);
    }
  }
  else
  {
    buf[0] = 0;
    AppBooleanCFBooleanRef Value = CFPreferencesGetAppBooleanValue(@"displayDonationsOnLockscreen", (CFStringRef)*MEMORY[0x1E4F4B688], buf);
    if (a1 == 5 && AppBooleanValue)
    {
      uint64_t v10 = __atxlog_handle_default();
      if (os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        uint64_t v11 = "ATXUpdatePredictions: Skipping cache refresh for hero app w/ developer switch";
        goto LABEL_18;
      }
    }
    else
    {
      if ([MEMORY[0x1E4F93B10] isClassCLocked])
      {
        uint64_t v13 = __atxlog_handle_default();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
          ATXUpdatePredictions_cold_1(a1, v13);
        }

        uint64_t v14 = (void *)MEMORY[0x1E4F1CA00];
        uint64_t v15 = *MEMORY[0x1E4F1C3B8];
        uint64_t v16 = +[ATXUpdatePredictionsReasons stringForUpdatePredictionsReason:a1];
        [v14 raise:v15, @"ATXUpdatePredictions: Can not refresh predictions when class C locked! Reason: %@", v16 format];
      }
      pthread_mutex_lock(&lock_0);
      uint64_t v10 = (uint64_t)_Block_copy((const void *)overrideBlock);
      pthread_mutex_unlock(&lock_0);
      if (v10)
      {
        (*(void (**)(uint64_t, double))(v10 + 16))(v10, a2);
      }
      else
      {
        char v17 = 0;
        atomic_compare_exchange_strong((atomic_uchar *volatile)ATXUpdatePredictions_updateInProgress, (unsigned __int8 *)&v17, 1u);
        if (v17)
        {
          unsigned int v22 = __atxlog_handle_default();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v23 = +[ATXUpdatePredictionsReasons stringForUpdatePredictionsReason:a1];
            *(_DWORD *)buf = 138412290;
            unint64_t v26 = v23;
            _os_log_impl(&dword_1D0FA3000, v22, OS_LOG_TYPE_DEFAULT, "ATXUpdatePredictions: Update in progress already, coalescing update with reason: %@", buf, 0xCu);
          }
        }
        else
        {
          uint64_t v18 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
          int v19 = dispatch_queue_attr_make_with_qos_class(v18, QOS_CLASS_BACKGROUND, 0);
          uint64_t v20 = dispatch_queue_create("ATXUpdatePredictions", v19);

          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 3221225472;
          block[2] = __ATXUpdatePredictions_block_invoke_25;
          block[3] = &__block_descriptor_48_e5_v8__0l;
          *(double *)&void block[4] = a2;
          void block[5] = a1;
          dispatch_block_t v21 = dispatch_block_create(DISPATCH_BLOCK_DETACHED, block);
          dispatch_async(v20, v21);
        }
      }
    }
  }
}

void __ATXUpdatePredictions_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  uint64_t v4 = __atxlog_handle_lock_screen();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  if (v3)
  {
    if (v5) {
      __ATXUpdatePredictions_block_invoke_cold_2((uint64_t)v3, v4);
    }
  }
  else if (v5)
  {
    __ATXUpdatePredictions_block_invoke_cold_1(v4);
  }
}

void __ATXUpdatePredictions_block_invoke_25(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = __atxlog_handle_default();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = +[ATXUpdatePredictionsReasons stringForUpdatePredictionsReason:*(void *)(a1 + 40)];
    int v7 = 134218242;
    uint64_t v8 = v3;
    __int16 v9 = 2112;
    uint64_t v10 = v4;
    _os_log_impl(&dword_1D0FA3000, v2, OS_LOG_TYPE_DEFAULT, "ATXUpdatePredictions: cache age %lf, reason %@", (uint8_t *)&v7, 0x16u);
  }
  _ATXInitializeInOwnerProcess();
  BOOL v5 = (void *)MEMORY[0x1D25F6CC0]();
  id v6 = +[ATXUpdatePredictionsManager sharedInstance];
  [v6 updateBehavioralPredictionsIfOlderThan:*(void *)(a1 + 40) reason:*(double *)(a1 + 32)];

  atomic_store(0, ATXUpdatePredictions_updateInProgress);
}

void ATXUpdatePredictionsImmediatelyWithReason(uint64_t a1)
{
}

void ATXUpdatePredictionsImmediately()
{
}

void ATXUpdatePredictionsImmediatelyIfPossible(uint64_t a1)
{
  if (+[ATXUtils shouldSkipExpensiveTask])
  {
    uint64_t v2 = __atxlog_handle_default();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl(&dword_1D0FA3000, v2, OS_LOG_TYPE_DEFAULT, "ATXUpdatePredictions: Skipping prediction update since system is busy.", v3, 2u);
    }
  }
  else
  {
    ATXUpdatePredictions(a1, 0.0);
  }
}

void ATXUpdatePredictionsDefaultInterval(uint64_t a1)
{
  if (+[ATXUtils shouldSkipExpensiveTask])
  {
    uint64_t v2 = __atxlog_handle_default();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D0FA3000, v2, OS_LOG_TYPE_DEFAULT, "ATXUpdatePredictions: Skipping prediction update since system is busy.", buf, 2u);
    }
  }
  else
  {
    id v4 = +[_ATXGlobals sharedInstance];
    [v4 defaultPredictionRefreshRate];
    ATXUpdatePredictions(a1, v3);
  }
}

uint64_t ATXUpdatePredictionsOverrideHandler(void *a1)
{
  id v1 = a1;
  pthread_mutex_lock(&lock_0);
  uint64_t v2 = [v1 copy];

  double v3 = (void *)overrideBlock;
  overrideBlock = v2;

  return pthread_mutex_unlock(&lock_0);
}

uint64_t ATXUpdatePredictionsClearOverrride()
{
  return ATXUpdatePredictionsOverrideHandler(0);
}

uint64_t __predictionUpdateDisabledByInternalSettings_block_invoke()
{
  uint64_t result = [MEMORY[0x1E4F93B08] isInternalBuild];
  if (result)
  {
    Boolean keyExistsAndHasValidFormat = 0;
    uint64_t result = CFPreferencesGetAppBooleanValue(@"ATXDisableCacheUpdates", (CFStringRef)*MEMORY[0x1E4F4B688], &keyExistsAndHasValidFormat);
    predictionUpdateDisabledByInternalSettings_disableCacheUpdateSetting = result != 0;
  }
  return result;
}

void sub_1D113F74C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1D113FFDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1140060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D11400EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D11401BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1140E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,void *a28,uint64_t a29,void *a30,void *a31,void *a32,void *a33,void *a34)
{
  _Block_object_dispose(&STACK[0x2A8], 8);
  _Block_object_dispose(&STACK[0x2D8], 8);
  _Block_object_dispose(&STACK[0x2F8], 8);
  _Block_object_dispose(&STACK[0x318], 8);
  _Block_object_dispose(&STACK[0x338], 8);
  _Block_object_dispose(&STACK[0x358], 8);
  _Block_object_dispose(&STACK[0x378], 8);
  _Block_object_dispose(&STACK[0x398], 8);
  _Block_object_dispose(&STACK[0x3B8], 8);
  _Block_object_dispose(&STACK[0x3D8], 8);
  _Block_object_dispose(&STACK[0x3F8], 8);
  _Block_object_dispose(&STACK[0x418], 8);
  _Block_object_dispose(&STACK[0x438], 8);
  _Block_object_dispose(&STACK[0x458], 8);
  _Block_object_dispose(&STACK[0x478], 8);
  _Block_object_dispose(&STACK[0x498], 8);
  _Block_object_dispose(&STACK[0x4B8], 8);
  _Block_object_dispose(&STACK[0x4D8], 8);
  _Block_object_dispose(&STACK[0x4F8], 8);
  _Block_object_dispose(&STACK[0x518], 8);
  _Block_object_dispose(&STACK[0x538], 8);
  _Block_object_dispose(&STACK[0x558], 8);
  _Block_object_dispose(&STACK[0x578], 8);
  _Block_object_dispose(&STACK[0x598], 8);
  _Block_object_dispose(&STACK[0x5B8], 8);
  _Block_object_dispose(&STACK[0x5D8], 8);
  _Block_object_dispose(&STACK[0x5F8], 8);
  _Block_object_dispose(&STACK[0x618], 8);
  _Block_object_dispose(&STACK[0x638], 8);
  _Block_object_dispose(&STACK[0x658], 8);
  _Block_object_dispose(&STACK[0x678], 8);
  _Block_object_dispose(&STACK[0x698], 8);
  _Block_object_dispose(&STACK[0x6B8], 8);
  _Block_object_dispose(&STACK[0x6D8], 8);
  _Block_object_dispose(&STACK[0x6F8], 8);
  _Block_object_dispose(&STACK[0x718], 8);
  _Block_object_dispose(&STACK[0x738], 8);
  _Block_object_dispose(&STACK[0x758], 8);
  _Block_object_dispose(&STACK[0x778], 8);
  _Block_object_dispose(&STACK[0x798], 8);
  _Block_object_dispose(&STACK[0x7B8], 8);
  _Block_object_dispose(&STACK[0x7D8], 8);
  _Block_object_dispose(&STACK[0x7F8], 8);
  _Block_object_dispose(&STACK[0x818], 8);
  _Block_object_dispose(&STACK[0x838], 8);
  _Block_object_dispose(&STACK[0x858], 8);
  _Block_object_dispose(&STACK[0x878], 8);
  _Block_object_dispose(&STACK[0x898], 8);
  _Block_object_dispose(&STACK[0x8B8], 8);
  _Block_object_dispose((const void *)(v37 - 232), 8);
  _Block_object_dispose((const void *)(v37 - 200), 8);
  _Block_object_dispose((const void *)(v37 - 168), 8);
  _Block_object_dispose((const void *)(v37 - 136), 8);

  _Unwind_Resume(a1);
}

void sub_1D1141170()
{
}

void sub_1D1141178()
{
}

void sub_1D1141180()
{
}

void sub_1D1141188()
{
}

void sub_1D1141190()
{
}

void sub_1D1141198()
{
}

void sub_1D11411A0()
{
}

void sub_1D11411A8()
{
}

void sub_1D11411B0()
{
}

void sub_1D11411B8()
{
}

void sub_1D11411C0()
{
  JUMPOUT(0x1D1141124);
}

void sub_1D11411CC()
{
}

void sub_1D11411D4()
{
}

void sub_1D11411E0()
{
}

void sub_1D1141200()
{
}

void sub_1D1141208()
{
}

void sub_1D1143900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_1D1143A38()
{
}

void sub_1D1143DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose(&a44, 8);
  _Block_object_dispose((const void *)(v46 - 232), 8);
  _Block_object_dispose((const void *)(v46 - 200), 8);
  _Block_object_dispose((const void *)(v46 - 168), 8);
  _Block_object_dispose((const void *)(v46 - 136), 8);

  _Unwind_Resume(a1);
}

void sub_1D1143ED0()
{
}

void sub_1D1143ED8()
{
}

void sub_1D1143EE0()
{
}

void sub_1D114516C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,uint64_t a24,void *a25)
{
  _Unwind_Resume(a1);
}

void sub_1D11452EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1D1145588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D1145784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D11459C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1D1145C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1D1145D88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1146088(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1147D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1D1147F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D1148074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D11482C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1D11483C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1148430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D1148538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1148700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ATXAnchorModelPBModeMetadataReadFrom(uint64_t a1, uint64_t a2)
{
  double v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  BOOL v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  int v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v17;

        goto LABEL_47;
      case 2u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 32) |= 2u;
        while (2)
        {
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
            *(void *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              BOOL v14 = v21++ >= 9;
              if (v14)
              {
                uint64_t v22 = 0;
                goto LABEL_42;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v22 = 0;
        }
LABEL_42:
        *(unsigned char *)(a1 + 2_Block_object_dispose(&STACK[0x270], 8) = v22 != 0;
        goto LABEL_47;
      case 3u:
        unint64_t v26 = objc_alloc_init(ATXAnchorModelPBLaunchHistoryMetadata);
        objc_storeStrong((id *)(a1 + 8), v26);
        if (PBReaderPlaceMark() && ATXAnchorModelPBLaunchHistoryMetadataReadFrom((uint64_t)v26, a2))
        {
          PBReaderRecallMark();

LABEL_47:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 4u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v29 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        while (2)
        {
          uint64_t v30 = *v3;
          unint64_t v31 = *(void *)(a2 + v30);
          if (v31 == -1 || v31 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v32 = *(unsigned char *)(*(void *)(a2 + *v7) + v31);
            *(void *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              BOOL v14 = v28++ >= 9;
              if (v14)
              {
                LODWORD(v29) = 0;
                goto LABEL_46;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v29) = 0;
        }
LABEL_46:
        *(_DWORD *)(a1 + 24) = v29;
        goto LABEL_47;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_47;
    }
  }
}

BOOL ATXTimelineRelevancePBTimelineRelevanceSuggestionReadFrom(void *a1, uint64_t a2)
{
  double v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  BOOL v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        int v19 = objc_alloc_init(ATXTimelineRelevancePBTimelineRelevanceAbuseControlOutcome);
        [a1 addAbuseControlOutcome:v19];
        if (!PBReaderPlaceMark()
          || (ATXTimelineRelevancePBTimelineRelevanceAbuseControlOutcomeReadFrom((uint64_t)v19, a2) & 1) == 0)
        {
          goto LABEL_33;
        }
LABEL_27:
        PBReaderRecallMark();
        goto LABEL_28;
      }
      if (v17 == 1)
      {
        uint64_t v18 = PBReaderReadString();
        int v19 = (ATXTimelineRelevancePBTimelineRelevanceAbuseControlOutcome *)a1[2];
        a1[2] = v18;
LABEL_28:

        goto LABEL_30;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_30:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    int v19 = objc_alloc_init(ATXTimelineRelevancePBTimelineRelevanceScoreEntry);
    [a1 addTimelineRelevanceScoreEntry:v19];
    if (!PBReaderPlaceMark()
      || (ATXTimelineRelevancePBTimelineRelevanceScoreEntryReadFrom((uint64_t)v19, a2) & 1) == 0)
    {
LABEL_33:

      return 0;
    }
    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D114CC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1153E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t ATXPBUnifiedInferredActivityTransitionReadFrom(uint64_t a1, uint64_t a2)
{
  double v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  BOOL v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 44) |= 4u;
          uint64_t v18 = *v3;
          unint64_t v19 = *(void *)(a2 + v18);
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
            *(void *)(a2 + v1_Block_object_dispose(&STACK[0x270], 8) = v19 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v20 = 0;
          }
          uint64_t v40 = 24;
          goto LABEL_54;
        case 2u:
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          *(unsigned char *)(a1 + 44) |= 8u;
          while (2)
          {
            uint64_t v25 = *v3;
            uint64_t v26 = *(void *)(a2 + v25);
            unint64_t v27 = v26 + 1;
            if (v26 == -1 || v27 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v26);
              *(void *)(a2 + v25) = v27;
              v24 |= (unint64_t)(v28 & 0x7F) << v22;
              if (v28 < 0)
              {
                v22 += 7;
                BOOL v15 = v23++ >= 9;
                if (v15)
                {
                  uint64_t v24 = 0;
                  goto LABEL_45;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v24 = 0;
          }
LABEL_45:
          *(unsigned char *)(a1 + 40) = v24 != 0;
          continue;
        case 3u:
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          *(unsigned char *)(a1 + 44) |= 2u;
          break;
        case 4u:
          uint64_t v36 = PBReaderReadString();
          uint64_t v37 = *(void **)(a1 + 32);
          *(void *)(a1 + 32) = v36;

          continue;
        case 5u:
          *(unsigned char *)(a1 + 44) |= 1u;
          uint64_t v38 = *v3;
          unint64_t v39 = *(void *)(a2 + v38);
          if (v39 <= 0xFFFFFFFFFFFFFFF7 && v39 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v39);
            *(void *)(a2 + v3_Block_object_dispose(&STACK[0x270], 8) = v39 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v20 = 0;
          }
          uint64_t v40 = 8;
LABEL_54:
          *(void *)(a1 + v40) = v20;
          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v32 = *v3;
        uint64_t v33 = *(void *)(a2 + v32);
        unint64_t v34 = v33 + 1;
        if (v33 == -1 || v34 > *(void *)(a2 + *v4)) {
          break;
        }
        char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
        *(void *)(a2 + v32) = v34;
        v31 |= (unint64_t)(v35 & 0x7F) << v29;
        if ((v35 & 0x80) == 0) {
          goto LABEL_47;
        }
        v29 += 7;
        BOOL v15 = v30++ >= 9;
        if (v15)
        {
          uint64_t v31 = 0;
          goto LABEL_49;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_47:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v31 = 0;
      }
LABEL_49:
      *(void *)(a1 + 16) = v31;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D1156FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D115715C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1D1157274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1157354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D11574A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1157524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D1157674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1D1157740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D1157844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_1D11578D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D11579D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_1D1157A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D1157D2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1157D8C()
{
}

void sub_1D1157D94()
{
  _Block_object_dispose((const void *)(v0 - 144), 8);

  JUMPOUT(0x1D1157D84);
}

void sub_1D11580A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1158104()
{
}

void sub_1D115810C()
{
  _Block_object_dispose((const void *)(v0 - 144), 8);

  JUMPOUT(0x1D11580FCLL);
}

void sub_1D11583C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11584C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D11589D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1158A78()
{
  _Block_object_dispose((const void *)(v0 - 168), 8);

  JUMPOUT(0x1D1158A6CLL);
}

void sub_1D1158C40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ATXMPBAnchorModelEngagementTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  double v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  BOOL v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    int v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 64;
          goto LABEL_50;
        case 2u:
          *(_WORD *)(a1 + 116) |= 0x10u;
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v22 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v61 = 40;
          goto LABEL_102;
        case 3u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 72;
          goto LABEL_50;
        case 4u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(_WORD *)(a1 + 116) |= 0x200u;
          while (2)
          {
            uint64_t v27 = *v3;
            uint64_t v28 = *(void *)(a2 + v27);
            unint64_t v29 = v28 + 1;
            if (v28 == -1 || v29 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v29;
              v26 |= (unint64_t)(v30 & 0x7F) << v24;
              if (v30 < 0)
              {
                v24 += 7;
                BOOL v15 = v25++ >= 9;
                if (v15)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_76;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_76:
          uint64_t v60 = 112;
          goto LABEL_89;
        case 5u:
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v26 = 0;
          *(_WORD *)(a1 + 116) |= 0x80u;
          while (2)
          {
            uint64_t v33 = *v3;
            uint64_t v34 = *(void *)(a2 + v33);
            unint64_t v35 = v34 + 1;
            if (v34 == -1 || v35 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
              *(void *)(a2 + v33) = v35;
              v26 |= (unint64_t)(v36 & 0x7F) << v31;
              if (v36 < 0)
              {
                v31 += 7;
                BOOL v15 = v32++ >= 9;
                if (v15)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_80;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_80:
          uint64_t v60 = 104;
          goto LABEL_89;
        case 6u:
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v26 = 0;
          *(_WORD *)(a1 + 116) |= 0x40u;
          while (2)
          {
            uint64_t v39 = *v3;
            uint64_t v40 = *(void *)(a2 + v39);
            unint64_t v41 = v40 + 1;
            if (v40 == -1 || v41 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v42 = *(unsigned char *)(*(void *)(a2 + *v7) + v40);
              *(void *)(a2 + v39) = v41;
              v26 |= (unint64_t)(v42 & 0x7F) << v37;
              if (v42 < 0)
              {
                v37 += 7;
                BOOL v15 = v38++ >= 9;
                if (v15)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_84;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_84:
          uint64_t v60 = 88;
          goto LABEL_89;
        case 7u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 80;
          goto LABEL_50;
        case 8u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 56;
          goto LABEL_50;
        case 9u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 96;
LABEL_50:
          char v43 = *(void **)(a1 + v19);
          *(void *)(a1 + v19) = v18;

          continue;
        case 0xAu:
          *(_WORD *)(a1 + 116) |= 8u;
          uint64_t v44 = *v3;
          unint64_t v45 = *(void *)(a2 + v44);
          if (v45 <= 0xFFFFFFFFFFFFFFF7 && v45 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + *v7) + v45);
            *(void *)(a2 + v44) = v45 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v61 = 32;
          goto LABEL_102;
        case 0xBu:
          *(_WORD *)(a1 + 116) |= 2u;
          uint64_t v46 = *v3;
          unint64_t v47 = *(void *)(a2 + v46);
          if (v47 <= 0xFFFFFFFFFFFFFFF7 && v47 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + *v7) + v47);
            *(void *)(a2 + v46) = v47 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v61 = 16;
          goto LABEL_102;
        case 0xCu:
          *(_WORD *)(a1 + 116) |= 0x20u;
          uint64_t v48 = *v3;
          unint64_t v49 = *(void *)(a2 + v48);
          if (v49 <= 0xFFFFFFFFFFFFFFF7 && v49 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + *v7) + v49);
            *(void *)(a2 + v4_Block_object_dispose(&STACK[0x270], 8) = v49 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v61 = 48;
          goto LABEL_102;
        case 0xDu:
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v26 = 0;
          *(_WORD *)(a1 + 116) |= 0x100u;
          break;
        case 0xEu:
          *(_WORD *)(a1 + 116) |= 1u;
          uint64_t v56 = *v3;
          unint64_t v57 = *(void *)(a2 + v56);
          if (v57 <= 0xFFFFFFFFFFFFFFF7 && v57 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + *v7) + v57);
            *(void *)(a2 + v56) = v57 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v61 = 8;
          goto LABEL_102;
        case 0xFu:
          *(_WORD *)(a1 + 116) |= 4u;
          uint64_t v58 = *v3;
          unint64_t v59 = *(void *)(a2 + v58);
          if (v59 <= 0xFFFFFFFFFFFFFFF7 && v59 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + *v7) + v59);
            *(void *)(a2 + v5_Block_object_dispose(&STACK[0x270], 8) = v59 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v61 = 24;
LABEL_102:
          *(void *)(a1 + v61) = v23;
          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v52 = *v3;
        uint64_t v53 = *(void *)(a2 + v52);
        unint64_t v54 = v53 + 1;
        if (v53 == -1 || v54 > *(void *)(a2 + *v4)) {
          break;
        }
        char v55 = *(unsigned char *)(*(void *)(a2 + *v7) + v53);
        *(void *)(a2 + v52) = v54;
        v26 |= (unint64_t)(v55 & 0x7F) << v50;
        if ((v55 & 0x80) == 0) {
          goto LABEL_86;
        }
        v50 += 7;
        BOOL v15 = v51++ >= 9;
        if (v15)
        {
          LODWORD(v26) = 0;
          goto LABEL_88;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_86:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_88:
      uint64_t v60 = 108;
LABEL_89:
      *(_DWORD *)(a1 + v60) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D115B0D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D115B238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1D115B338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D115B430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1D115B4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void *__copy_helper_block_ea8_40c23_ZTS17ATXPredictionItem(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = *(id *)(a2 + 40);
  return memcpy((void *)(a1 + 48), (const void *)(a2 + 48), 0xCD2uLL);
}

void __destroy_helper_block_ea8_40c23_ZTS17ATXPredictionItem(uint64_t a1)
{
}

void sub_1D115B83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::__deallocate_node(uint64_t a1, id *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      double v3 = (id *)*v2;

      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  BOOL v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  int v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x270], 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    void *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::__deallocate_node(a1, *(id **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t **std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::find<NSString * {__strong}>(void *a1, id *a2)
{
  unint64_t v4 = [*a2 hash];
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = (uint64_t **)*i)
  {
    unint64_t v12 = (unint64_t)i[1];
    if (v12 == v6)
    {
      if ([i[2] isEqualToString:*a2]) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **i;
  unint64_t v12;

  unint64_t v4 = [*a2 hash];
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = (uint64_t **)*i)
  {
    unint64_t v12 = (unint64_t)i[1];
    if (v6 == v12)
    {
      if ([i[2] isEqualToString:*a2]) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

char *std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::__emplace_unique_key_args<NSString * {__strong},std::pair<NSString * {__strong},ATXPredictionItem>>(uint64_t a1, id *a2, long long *a3)
{
  unint64_t v7 = [*a2 hash];
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      unint64_t v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 == v8)
          {
            if ([*((id *)v13 + 2) isEqualToString:*a2]) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          unint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  BOOL v15 = (void *)(a1 + 16);
  unint64_t v13 = (char *)operator new(0xCF8uLL);
  *(void *)unint64_t v13 = 0;
  *((void *)v13 + 1) = v8;
  long long v16 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  *((_OWORD *)v13 + 1) = v16;
  memcpy(v13 + 32, a3 + 1, 0xCD2uLL);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::__rehash<true>(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void *)a1;
  char v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *(void *)unint64_t v13 = *v24;
LABEL_38:
    *char v24 = v13;
    goto LABEL_39;
  }
  *(void *)unint64_t v13 = *v15;
  *BOOL v15 = v13;
  *(void *)(v23 + 8 * v3) = v15;
  if (*(void *)v13)
  {
    unint64_t v25 = *(void *)(*(void *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }
    else
    {
      v25 &= v9 - 1;
    }
    char v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_1D115BD68(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x270], 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v_Block_object_dispose(&STACK[0x270], 8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            void *v7 = *v11;
            void *v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            unint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint8x8_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x270], 8) = 0;
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,void *>>>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

BOOL ATXAnchorModelPBLaunchHistoryMetadataReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  int8x8_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 0x10u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4))
            {
              char v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast2Hours;
              goto LABEL_77;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              break;
            }
            v17 += 7;
            BOOL v23 = v18++ > 8;
            if (v23)
            {
              LODWORD(v19) = 0;
              char v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast2Hours;
              goto LABEL_80;
            }
          }
          char v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast2Hours;
          goto LABEL_78;
        case 2u:
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 0x40u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              char v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast7Days;
              goto LABEL_77;
            }
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              BOOL v23 = v26++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                char v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast7Days;
                goto LABEL_80;
              }
              continue;
            }
            break;
          }
          char v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast7Days;
          goto LABEL_78;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 2u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              char v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast14Days;
              goto LABEL_77;
            }
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
            *(void *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              BOOL v23 = v31++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                char v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast14Days;
                goto LABEL_80;
              }
              continue;
            }
            break;
          }
          char v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast14Days;
          goto LABEL_78;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 8u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              char v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast28Days;
              goto LABEL_77;
            }
            char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
            *(void *)(a2 + v37) = v38 + 1;
            v19 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              BOOL v23 = v36++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                char v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast28Days;
                goto LABEL_80;
              }
              continue;
            }
            break;
          }
          char v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast28Days;
          goto LABEL_78;
        case 5u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 1u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              char v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast12Hours;
              goto LABEL_77;
            }
            char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
            *(void *)(a2 + v42) = v43 + 1;
            v19 |= (unint64_t)(v44 & 0x7F) << v40;
            if (v44 < 0)
            {
              v40 += 7;
              BOOL v23 = v41++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                char v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast12Hours;
                goto LABEL_80;
              }
              continue;
            }
            break;
          }
          char v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast12Hours;
          goto LABEL_78;
        case 6u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 4u;
          while (2)
          {
            uint64_t v47 = *v3;
            unint64_t v48 = *(void *)(a2 + v47);
            if (v48 == -1 || v48 >= *(void *)(a2 + *v4))
            {
              char v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast24Hours;
              goto LABEL_77;
            }
            char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
            *(void *)(a2 + v47) = v48 + 1;
            v19 |= (unint64_t)(v49 & 0x7F) << v45;
            if (v49 < 0)
            {
              v45 += 7;
              BOOL v23 = v46++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                char v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast24Hours;
                goto LABEL_80;
              }
              continue;
            }
            break;
          }
          char v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast24Hours;
          goto LABEL_78;
        case 7u:
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 0x20u;
          break;
        default:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
          return 0;
      }
      while (1)
      {
        uint64_t v52 = *v3;
        unint64_t v53 = *(void *)(a2 + v52);
        if (v53 == -1 || v53 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v54 = *(unsigned char *)(*(void *)(a2 + *v7) + v53);
        *(void *)(a2 + v52) = v53 + 1;
        v19 |= (unint64_t)(v54 & 0x7F) << v50;
        if ((v54 & 0x80) == 0)
        {
          char v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast48Hours;
          goto LABEL_78;
        }
        v50 += 7;
        BOOL v23 = v51++ > 8;
        if (v23)
        {
          LODWORD(v19) = 0;
          char v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast48Hours;
          goto LABEL_80;
        }
      }
      char v24 = &OBJC_IVAR___ATXAnchorModelPBLaunchHistoryMetadata__launchesInLast48Hours;
LABEL_77:
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_78:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v19) = 0;
      }
LABEL_80:
      *(_DWORD *)(a1 + *v24) = v19;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D11605B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t ATXMPBBlendingWidgetRotationEngagementTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  int8x8_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 56;
          goto LABEL_49;
        case 2u:
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 80) |= 1u;
          while (2)
          {
            uint64_t v23 = *v3;
            unint64_t v24 = *(void *)(a2 + v23);
            if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
              *(void *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                BOOL v14 = v21++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_53;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v22) = 0;
          }
LABEL_53:
          uint64_t v37 = 32;
          goto LABEL_62;
        case 3u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 24;
          goto LABEL_49;
        case 4u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 72;
          goto LABEL_49;
        case 5u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 80) |= 2u;
          while (2)
          {
            uint64_t v28 = *v3;
            unint64_t v29 = *(void *)(a2 + v28);
            if (v29 == -1 || v29 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
              *(void *)(a2 + v2_Block_object_dispose(&STACK[0x270], 8) = v29 + 1;
              v22 |= (unint64_t)(v30 & 0x7F) << v26;
              if (v30 < 0)
              {
                v26 += 7;
                BOOL v14 = v27++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_57;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v22) = 0;
          }
LABEL_57:
          uint64_t v37 = 64;
          goto LABEL_62;
        case 6u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 48;
          goto LABEL_49;
        case 7u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 40;
          goto LABEL_49;
        case 8u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 8;
          goto LABEL_49;
        case 9u:
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 80) |= 4u;
          break;
        case 0xAu:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 16;
LABEL_49:
          unsigned int v36 = *(void **)(a1 + v18);
          *(void *)(a1 + v1_Block_object_dispose(&STACK[0x270], 8) = v17;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v33 = *v3;
        unint64_t v34 = *(void *)(a2 + v33);
        if (v34 == -1 || v34 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
        *(void *)(a2 + v33) = v34 + 1;
        v22 |= (unint64_t)(v35 & 0x7F) << v31;
        if ((v35 & 0x80) == 0) {
          goto LABEL_59;
        }
        v31 += 7;
        BOOL v14 = v32++ >= 9;
        if (v14)
        {
          LODWORD(v22) = 0;
          goto LABEL_61;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_59:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v22) = 0;
      }
LABEL_61:
      uint64_t v37 = 68;
LABEL_62:
      *(_DWORD *)(a1 + v37) = v22;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

__CFString *_ATXAnchorModelSha256Hash(void *a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  unint64_t v5 = v4;
  if (!v3 || v4)
  {
    if (v3)
    {
      uint64_t v7 = [v3 dataUsingEncoding:4];
      char v8 = (void *)[v7 mutableCopy];

      [v8 appendData:v5];
      md[0] = 0;
      id v9 = v8;
      CC_SHA256((const void *)[v9 bytes], objc_msgSend(v9, "length"), md);
      id v10 = [MEMORY[0x1E4F1C9B8] dataWithBytes:md length:32];
      uint64_t v11 = [v10 bytes];
      unint64_t v12 = [MEMORY[0x1E4F28E78] string];
      if ([v10 length])
      {
        unint64_t v13 = 0;
        do
          objc_msgSend(v12, "appendFormat:", @"%hhx", *(unsigned __int8 *)(v11 + v13++), *(void *)md);
        while ([v10 length] > v13);
      }
      uint64_t v6 = (__CFString *)[v12 copy];
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = &stru_1F2740B58;
  }

  return v6;
}

void sub_1D1165054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1D116513C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1165224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  id v10 = v9;

  a9.super_class = (Class)ATXHeuristicActionProducer;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1D11652FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D11653B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1165454(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1D1165580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D116563C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1165874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D11659CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1165B24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1165DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void sub_1D1165F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D116600C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ATXTimelineRelevancePBTimelineRelevanceAbuseControlOutcomeReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 20) |= 2u;
        while (1)
        {
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 == -1 || v27 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
          *(void *)(a2 + v26) = v27 + 1;
          v25 |= (unint64_t)(v28 & 0x7F) << v23;
          if ((v28 & 0x80) == 0) {
            goto LABEL_41;
          }
          v23 += 7;
          BOOL v14 = v24++ >= 9;
          if (v14)
          {
            LODWORD(v25) = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v25) = 0;
        }
LABEL_43:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_37;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_39;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_39:
        *(void *)(a1 + _Block_object_dispose(&STACK[0x270], 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D116B348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1D116C258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id readWholeFile(int a1, char a2)
{
  lseek(a1, 0, 0);
  memset(&v15, 0, sizeof(v15));
  if (fstat(a1, &v15))
  {
    id v4 = __atxlog_handle_default();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      readWholeFile_cold_3();
    }

    if ((a2 & 1) == 0) {
      goto LABEL_6;
    }
LABEL_5:
    objc_msgSend(MEMORY[0x1E4F1CA00], "raise:format:", *MEMORY[0x1E4F282F8], @"readWholeFile errno=%i", *__error());
LABEL_6:
    unint64_t v5 = 0;
    goto LABEL_7;
  }
  off_t st_size = v15.st_size;
  if (v15.st_size)
  {
    char v8 = malloc_type_malloc(v15.st_size, 0xFDE44234uLL);
    if (!v8)
    {
      id v14 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C4A0] reason:@"malloc failed" userInfo:0];
      objc_exception_throw(v14);
    }
    unsigned int v9 = v8;
    ssize_t v10 = read(a1, v8, st_size);
    if (v10 == -1)
    {
      char v13 = __atxlog_handle_default();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        readWholeFile_cold_1();
      }

LABEL_21:
      free(v9);
      if ((a2 & 1) == 0) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
    uint64_t v11 = v10;
    if (v10 < st_size)
    {
      unint64_t v12 = __atxlog_handle_default();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        readWholeFile_cold_2(st_size, v11, v12);
      }

      goto LABEL_21;
    }
    unint64_t v5 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytesNoCopy:v9 length:st_size];
  }
  else
  {
    unint64_t v5 = objc_opt_new();
  }
LABEL_7:
  return v5;
}

void OUTLINED_FUNCTION_0_9(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void sub_1D116DB64(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D116E29C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D116E444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAnyLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeSpotlightLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeDayOfWeek(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAirplaneModeLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeWifiAppLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeTrendingLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___APRHistogramTypeAppIntentExplicitConfirms_Deprecated(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___APRHistogramTypeAppIntentExplicitRejects_Deprecated(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___APRHistogramTypeAppIntentDonation_Deprecated(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___APRHistogramTypeAppIntentImplicitConfirms_Deprecated(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___APRHistogramTypeAppIntentImplicitRejects_Deprecated(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeUnlockTime(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___APRHistogramTypeAppIntentSiriKitDonation_Deprecated(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___APRHistogramTypeAppIntentNonSiriKitDonation_Deprecated(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppIntentLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeIntentForAllAppsLaunch_Deprecated(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppForAllIntentsLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppIntentDayOfWeek(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeIntentForAllAppsDayOfWeek_Deprecated(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppForAllIntentsDayOfWeek(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppIntentTrendingLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeIntentForAllAppsTrendingLaunch_Deprecated(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppForAllIntentsTrendingLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppIntentUnlockTime(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeIntentForAllAppsUnlockTime_Deprecated(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppForAllIntentsUnlockTime(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppIntentAirplaneModeLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeIntentForAllAppsAirplaneModeLaunch_Deprecated(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppForAllIntentsAirplaneModeLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppIntentWifiLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeIntentForAllAppsWifiLaunch_Deprecated(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppForAllIntentsWifiLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeNotifications(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeActionsConfirms(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeActionsRejects(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeActionsHeuristicConfirms(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeActionsHeuristicRejects(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeCoreMotionLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppIntentCoreMotionLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppForAllIntentsCoreMotionLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypePartOfWeek(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAmbientLight(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeTimeOfDayAndDayOfWeek(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppCoarseTimePOWLocationLaunches(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppSpecificTimeDOWLocationLaunches(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppCoarseTimePOWLocationConfirms(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppSpecificTimeDOWLocationConfirms(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppCoarseTimePOWLocationRejects(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppSpecificTimeDOWLocationRejects(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppClipsAndHeroApp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppSpecificLocation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppCoarseLocation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppLaunchesTwoHourTimeInterval(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppConfirmsTwoHourTimeInterval(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppRejectsTwoHourTimeInterval(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppConfirmsDayOfWeek(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppRejectsDayOfWeek(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppConfirmsCoarseGeoHash(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppRejectsCoarseGeoHash(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppConfirmsSpecificGeoHash(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppRejectsSpecificGeoHash(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppZoom7GeoHash(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomeScreenWidgetInteractions(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomeScreenAppConfirmsCoarseTimePOWLocation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomeScreenAppConfirmsSpecificTimeDOWLocation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomeScreenAppConfirmsTwoHourTimeInterval(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomeScreenAppConfirmsDayOfWeek(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomeScreenAppConfirmsCoarseGeohash(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomeScreenAppConfirmsSpecificGeohash(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomeScreenAppRejectsCoarseTimePOWLocation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomeScreenAppRejectsSpecificTimeDOWLocation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomeScreenAppRejectsTwoHourTimeInterval(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomeScreenAppRejectsDayOfWeek(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomeScreenAppRejectsCoarseGeohash(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomeScreenAppRejectsSpecificGeohash(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppDirectoryConfirmsCoarseTimePOWLocation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppDirectoryConfirmsSpecificTimeDOWLocation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppDirectoryConfirmsTwoHourTimeInterval(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppDirectoryConfirmsDayOfWeek(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppDirectoryConfirmsCoarseGeohash(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppDirectoryConfirmsSpecificGeohash(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppDirectoryRejectsCoarseTimePOWLocation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppDirectoryRejectsSpecificTimeDOWLocation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppDirectoryRejectsTwoHourTimeInterval(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppDirectoryRejectsDayOfWeek(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppDirectoryRejectsCoarseGeohash(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppDirectoryRejectsSpecificGeohash(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppExplicitRejectsCoarseTimePOWLocation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomeScreenAppExplicitRejectsCoarseTimePOWLocation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppDirectoryExplicitRejectsCoarseTimePOWLocation(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeFallbackActionsConfirms(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeFallbackActionsRejects(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeHomescreenAppLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppDirectoryAppLaunch(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeAppClipsAndHeroAppNoDecay(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypePOICategory(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeActivitySuggestionsFeedback(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeNotificationDigestAppEngagement(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeNotificationDigestAlltimeMarqueeAppearances(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t __ATX_HISTOGRAM_FOR_TYPE___ATXHistogramTypeMax(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

void sub_1D117123C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_4_6(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x16u);
}

void sub_1D1174480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D117471C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1174C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1175C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_1D1175DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1176000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D117624C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

BOOL _ATXCopySqliteDatabaseClassC(void *a1, void *a2, char a3)
{
  id v5 = a1;
  id v6 = a2;
  uint64_t v7 = v6;
  if (v5)
  {
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v16 = [MEMORY[0x1E4F28B00] currentHandler];
    char v17 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _ATXCopySqliteDatabaseClassC(NSString *__strong, NSString *__strong, BOOL)");
    [v16 handleFailureInFunction:v17, @"_ATXInitialization.m", 224, @"Invalid parameter not satisfying: %@", @"fromPath" file lineNumber description];

    if (v7) {
      goto LABEL_3;
    }
  }
  unsigned int v18 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v19 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL _ATXCopySqliteDatabaseClassC(NSString *__strong, NSString *__strong, BOOL)");
  [v18 handleFailureInFunction:v19, @"_ATXInitialization.m", 225, @"Invalid parameter not satisfying: %@", @"toPath" file lineNumber description];

LABEL_3:
  unint64_t v21 = 0;
  ppDb = 0;
  id v8 = v5;
  if (sqlite3_open_v2((const char *)[v8 UTF8String], &ppDb, 1, 0))
  {
    unsigned int v9 = __atxlog_handle_default();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      _ATXCopySqliteDatabaseClassC_cold_2();
    }
LABEL_9:

    sqlite3_close_v2(ppDb);
    BOOL v10 = 0;
    goto LABEL_10;
  }
  if (sqlite3_open_v2((const char *)[v7 UTF8String], &v21, 3145734, 0))
  {
    unsigned int v9 = __atxlog_handle_default();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      _ATXCopySqliteDatabaseClassC_cold_1();
    }
    goto LABEL_9;
  }
  int v12 = sqlite3_file_control(v21, 0, 102, ppDb);
  sqlite3_exec_with_logging(v21, "PRAGMA journal_mode=WAL");
  sqlite3_exec_with_logging(v21, "VACUUM");
  sqlite3_exec_with_logging(v21, "ANALYZE");
  sqlite3_close_v2(v21);
  BOOL v10 = v12 == 0;
  if (v12 || (a3 & 1) == 0)
  {
    sqlite3_close_v2(ppDb);
  }
  else
  {
    int v20 = 128;
    sqlite3_file_control(ppDb, 0, 101, &v20);
    sqlite3_close_v2(ppDb);
    char v13 = [MEMORY[0x1E4F28CB8] defaultManager];
    [v13 removeItemAtPath:v8 error:0];
    id v14 = [v8 stringByAppendingString:@"-shm"];
    [v13 removeItemAtPath:v14 error:0];

    stat v15 = [v8 stringByAppendingString:@"-wal"];
    [v13 removeItemAtPath:v15 error:0];

    BOOL v10 = 1;
  }
LABEL_10:

  return v10;
}

void sqlite3_exec_with_logging(sqlite3 *a1, const char *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v3 = sqlite3_exec(a1, a2, 0, 0, 0);
  if (v3)
  {
    int v4 = v3;
    id v5 = __atxlog_handle_default();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      uint64_t v7 = a2;
      __int16 v8 = 1024;
      int v9 = v4;
      _os_log_impl(&dword_1D0FA3000, v5, OS_LOG_TYPE_DEFAULT, "Error running '%s': rc=%i", (uint8_t *)&v6, 0x12u);
    }
  }
}

BOOL _ATXCopySqliteDatabaseDataClassC(void *a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = NSTemporaryDirectory();
  int v6 = [MEMORY[0x1E4F29128] UUID];
  uint64_t v7 = [v6 UUIDString];
  __int16 v8 = [v5 stringByAppendingPathComponent:v7];

  unint64_t v9 = 0x1E4F28000uLL;
  uint64_t v10 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v35 = 0;
  LOBYTE(v7) = [v10 createDirectoryAtPath:v8 withIntermediateDirectories:1 attributes:0 error:&v35];
  id v11 = v35;

  if (v7)
  {
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    id v12 = v3;
    uint64_t v13 = [v12 countByEnumeratingWithState:&v31 objects:v36 count:16];
    if (v13)
    {
      uint64_t v14 = v13;
      id v29 = v11;
      id v30 = v3;
      stat v15 = 0;
      uint64_t v16 = *(void *)v32;
      while (2)
      {
        for (uint64_t i = 0; i != v14; ++i)
        {
          if (*(void *)v32 != v16) {
            objc_enumerationMutation(v12);
          }
          unsigned int v18 = *(void **)(*((void *)&v31 + 1) + 8 * i);
          uint64_t v19 = [v18 lastPathComponent];
          int v20 = [v8 stringByAppendingPathComponent:v19];

          if ([v20 hasSuffix:@".db"])
          {
            unint64_t v21 = v20;

            stat v15 = v21;
          }
          char v22 = [v12 objectForKeyedSubscript:v18];
          char v23 = [v22 writeToFile:v20 atomically:0];

          if ((v23 & 1) == 0)
          {
            uint64_t v25 = __atxlog_handle_default();
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
              _ATXCopySqliteDatabaseDataClassC_cold_2();
            }

            BOOL v24 = 0;
            id v3 = v30;
            id v11 = v29;
            unint64_t v9 = 0x1E4F28000;
            goto LABEL_24;
          }
        }
        uint64_t v14 = [v12 countByEnumeratingWithState:&v31 objects:v36 count:16];
        if (v14) {
          continue;
        }
        break;
      }

      id v3 = v30;
      id v11 = v29;
      unint64_t v9 = 0x1E4F28000;
      if (v15)
      {
        BOOL v24 = _ATXCopySqliteDatabaseClassC(v15, v4, 0);
        goto LABEL_24;
      }
    }
    else
    {
    }
    uint64_t v26 = __atxlog_handle_default();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      _ATXCopySqliteDatabaseDataClassC_cold_1(v12);
    }

    stat v15 = 0;
    BOOL v24 = 0;
LABEL_24:
    unint64_t v27 = [*(id *)(v9 + 3256) defaultManager];
    [v27 removeItemAtPath:v8 error:0];
  }
  else
  {
    stat v15 = __atxlog_handle_default();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      _ATXCopySqliteDatabaseDataClassC_cold_3();
    }
    BOOL v24 = 0;
  }

  return v24;
}

uint64_t _ATXExtractFilesFromDECBackupArchiveIfExists(void *a1, void *a2)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v68 = a2;
  id v4 = (void *)os_transaction_create();
  id v87 = 0;
  id v5 = [objc_alloc(MEMORY[0x1E4F1C9B8]) initWithContentsOfFile:v3 options:2 error:&v87];
  id v6 = v87;
  uint64_t v7 = v6;
  if (v5)
  {
    if ((unint64_t)[v5 length] <= 7)
    {
      __int16 v8 = __atxlog_handle_default();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        _ATXExtractFilesFromDECBackupArchiveIfExists_cold_2();
      }
LABEL_46:

LABEL_47:
      uint64_t v9 = 0;
LABEL_48:

      goto LABEL_49;
    }
    id v5 = v5;
    uint64_t v10 = (size_t *)[v5 bytes];
    id v11 = (const uint8_t *)(v10 + 1);
    size_t v12 = *v10;
    size_t v13 = [v5 length] - 8;
    uint64_t v14 = (uint8_t *)malloc_type_malloc(v12, 0xC20905BuLL);
    size_t v15 = compression_decode_buffer(v14, v12, v11, v13, 0, COMPRESSION_LZFSE);
    if (!v15)
    {
      free(v14);
      __int16 v8 = __atxlog_handle_default();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        _ATXExtractFilesFromDECBackupArchiveIfExists_cold_3();
      }
      goto LABEL_46;
    }
    uint64_t v16 = [objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytesNoCopy:v14 length:v15 freeWhenDone:1];

    char v17 = (void *)MEMORY[0x1D25F6CC0]();
    id v86 = 0;
    unsigned int v18 = [MEMORY[0x1E4F28F98] propertyListWithData:v16 options:1 format:0 error:&v86];
    id v19 = v86;

    if (!v18)
    {
      unint64_t v48 = __atxlog_handle_default();
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
        _ATXExtractFilesFromDECBackupArchiveIfExists_cold_4();
      }

      uint64_t v9 = 0;
      id v5 = v16;
      uint64_t v7 = v19;
      goto LABEL_48;
    }
    unsigned int v62 = v4;
    id v63 = v3;
    int v20 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA60]), "initWithCapacity:", objc_msgSend(v18, "count"));
    long long v82 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    id v21 = v18;
    uint64_t v22 = [v21 countByEnumeratingWithState:&v82 objects:v95 count:16];
    if (v22)
    {
      uint64_t v23 = v22;
      uint64_t v24 = *(void *)v83;
      do
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          if (*(void *)v83 != v24) {
            objc_enumerationMutation(v21);
          }
          uint64_t v26 = *(void **)(*((void *)&v82 + 1) + 8 * i);
          unint64_t v27 = [v21 objectForKeyedSubscript:v26];
          char v28 = [v26 lastPathComponent];
          [v20 setObject:v27 forKeyedSubscript:v28];
        }
        uint64_t v23 = [v21 countByEnumeratingWithState:&v82 objects:v95 count:16];
      }
      while (v23);
    }

    id v29 = objc_opt_new();
    obuint64_t j = (id)objc_opt_new();
    long long v78 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    id v5 = v20;
    uint64_t v30 = [v5 countByEnumeratingWithState:&v78 objects:v94 count:16];
    uint64_t v64 = v29;
    if (!v30)
    {
LABEL_33:

      if ([v29 count])
      {
        unint64_t v38 = objc_opt_new();
        long long v74 = 0u;
        long long v75 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        id v39 = v29;
        uint64_t v40 = [v39 countByEnumeratingWithState:&v74 objects:v93 count:16];
        if (v40)
        {
          uint64_t v41 = v40;
          uint64_t v42 = *(void *)v75;
          do
          {
            for (uint64_t j = 0; j != v41; ++j)
            {
              if (*(void *)v75 != v42) {
                objc_enumerationMutation(v39);
              }
              uint64_t v44 = *(void *)(*((void *)&v74 + 1) + 8 * j);
              char v45 = [v5 objectForKeyedSubscript:v44];
              [v38 setObject:v45 forKeyedSubscript:v44];
            }
            uint64_t v41 = [v39 countByEnumeratingWithState:&v74 objects:v93 count:16];
          }
          while (v41);
        }

        unsigned int v46 = [v68 stringByAppendingPathComponent:@"_ATXDataStore.db"];
        BOOL v61 = _ATXCopySqliteDatabaseDataClassC(v38, v46);
      }
      else
      {
        BOOL v61 = 1;
      }
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      id obja = obj;
      uint64_t v49 = [obja countByEnumeratingWithState:&v70 objects:v92 count:16];
      if (v49)
      {
        uint64_t v50 = v49;
        uint64_t v51 = *(void *)v71;
        int v65 = 1;
        do
        {
          uint64_t v52 = 0;
          unint64_t v53 = v19;
          do
          {
            if (*(void *)v71 != v51) {
              objc_enumerationMutation(obja);
            }
            char v54 = *(void **)(*((void *)&v70 + 1) + 8 * v52);
            char v55 = v5;
            uint64_t v56 = [v5 objectForKeyedSubscript:v54];
            unint64_t v57 = [v68 stringByAppendingPathComponent:v54];
            id v69 = v53;
            char v58 = [v56 writeToFile:v57 options:0x40000000 error:&v69];
            id v59 = v69;

            id v19 = v59;
            if ((v58 & 1) == 0)
            {
              uint64_t v60 = __atxlog_handle_default();
              if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412546;
                unint64_t v89 = v54;
                __int16 v90 = 2112;
                id v91 = v59;
                _os_log_error_impl(&dword_1D0FA3000, v60, OS_LOG_TYPE_ERROR, "Could not write %@: %@", buf, 0x16u);
              }

              int v65 = 0;
            }
            ++v52;
            unint64_t v53 = v59;
            id v5 = v55;
          }
          while (v50 != v52);
          uint64_t v50 = [obja countByEnumeratingWithState:&v70 objects:v92 count:16];
        }
        while (v50);
      }
      else
      {
        int v65 = 1;
      }

      uint64_t v9 = v61 & v65;
      uint64_t v7 = v19;
      id v4 = v62;
      id v3 = v63;
      goto LABEL_48;
    }
    uint64_t v31 = v30;
    uint64_t v32 = *(void *)v79;
LABEL_18:
    uint64_t v33 = 0;
    while (1)
    {
      if (*(void *)v79 != v32) {
        objc_enumerationMutation(v5);
      }
      long long v34 = *(void **)(*((void *)&v78 + 1) + 8 * v33);
      if (([v34 isEqualToString:@"_ATXDataStore.db"] & 1) != 0
        || [v34 isEqualToString:@"_ATXDataStore.db-wal"])
      {
        id v35 = v29;
      }
      else
      {
        if (![&unk_1F27F2C28 containsObject:v34])
        {
          unsigned int v36 = __atxlog_handle_default();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            unint64_t v89 = v34;
            _os_log_impl(&dword_1D0FA3000, v36, OS_LOG_TYPE_DEFAULT, "Unknown filename in backup file: %@", buf, 0xCu);
          }

          id v29 = v64;
          goto LABEL_25;
        }
        id v35 = obj;
      }
      [v35 addObject:v34];
LABEL_25:
      if (v31 == ++v33)
      {
        uint64_t v37 = [v5 countByEnumeratingWithState:&v78 objects:v94 count:16];
        uint64_t v31 = v37;
        if (!v37) {
          goto LABEL_33;
        }
        goto LABEL_18;
      }
    }
  }
  if ([v6 code] != 260)
  {
    id v5 = __atxlog_handle_default();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      _ATXExtractFilesFromDECBackupArchiveIfExists_cold_1();
    }
    goto LABEL_47;
  }
  uint64_t v9 = 1;
LABEL_49:

  return v9;
}

uint64_t _ATXDECBackupNeedsRestoring(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 stringByAppendingPathComponent:@"Backups/AppPredictionExpert"];
  id v3 = [MEMORY[0x1E4F28CB8] defaultManager];
  uint64_t v4 = [v3 fileExistsAtPath:v2];

  if (v4)
  {
    id v5 = [MEMORY[0x1E4F28CB8] defaultManager];
    id v6 = [v1 stringByAppendingPathComponent:@"restore_done"];
    int v7 = [v5 fileExistsAtPath:v6];

    if (v7)
    {
      id v8 = objc_alloc(MEMORY[0x1E4F1C9B8]);
      uint64_t v9 = [v1 stringByAppendingPathComponent:@"backup_version"];
      uint64_t v10 = (void *)[v8 initWithContentsOfFile:v9];

      id v11 = objc_alloc(MEMORY[0x1E4F1C9B8]);
      size_t v12 = [v1 stringByAppendingPathComponent:@"Backups/backup_version"];
      size_t v13 = (void *)[v11 initWithContentsOfFile:v12];

      uint64_t v4 = 1;
      if (v13 && v10) {
        uint64_t v4 = [v13 isEqualToData:v10] ^ 1;
      }
    }
    else
    {
      uint64_t v4 = 1;
    }
  }

  return v4;
}

void ATXTriggerActionHistogramPrefillJob()
{
  xpc_object_t xdict = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(xdict, (const char *)*MEMORY[0x1E4F14170], 1);
  xpc_dictionary_set_int64(xdict, (const char *)*MEMORY[0x1E4F141A8], 86400);
  xpc_dictionary_set_BOOL(xdict, (const char *)*MEMORY[0x1E4F14320], 1);
  xpc_dictionary_set_BOOL(xdict, (const char *)*MEMORY[0x1E4F14138], 0);
  xpc_activity_register("com.apple.duetexpertd.prefill-action-histograms", xdict, &__block_literal_global_82);
}

void __ATXTriggerActionHistogramPrefillJob_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a2;
  if (xpc_activity_get_state(v2) == 2 && ([MEMORY[0x1E4F93B10] isClassCLocked] & 1) == 0)
  {
    id v3 = objc_opt_new();
    uint64_t v4 = __atxlog_handle_default();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v_Block_object_dispose(&STACK[0x270], 8) = 0;
      _os_log_impl(&dword_1D0FA3000, v4, OS_LOG_TYPE_DEFAULT, "Prefilling action histograms...", (uint8_t *)&v8, 2u);
    }

    id v5 = (void *)MEMORY[0x1D25F6CC0]();
    +[_ATXActionUtils prefillActionHistograms];
    id v6 = __atxlog_handle_default();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      [v3 timeIntervalSinceNow];
      int v8 = 134217984;
      double v9 = v7 * -1000.0;
      _os_log_impl(&dword_1D0FA3000, v6, OS_LOG_TYPE_DEFAULT, "Done prefilling action histograms in %0.2f ms.", (uint8_t *)&v8, 0xCu);
    }
  }
}

void ATXEnableMobileAssetDataVault()
{
  uint64_t v0 = __atxlog_handle_xpc();
  os_signpost_id_t v1 = os_signpost_id_generate(v0);

  uint64_t v2 = __atxlog_handle_xpc();
  id v3 = v2;
  if (v1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D0FA3000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v1, "ATXEnableMobileAssetDataVault", " enableTelemetry=YES ", buf, 2u);
  }

  uint64_t v4 = __atxlog_handle_default();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1D0FA3000, v4, OS_LOG_TYPE_DEFAULT, "Attempt DuetExpertCenterAsset datavault assurance", buf, 2u);
  }

  ASEnsureDataVault();
  id v5 = 0;
  id v6 = __atxlog_handle_xpc();
  double v7 = v6;
  if (v1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D0FA3000, v7, OS_SIGNPOST_INTERVAL_END, v1, "ATXEnableMobileAssetDataVault", " enableTelemetry=YES ", buf, 2u);
  }

  int v8 = __atxlog_handle_default();
  double v9 = v8;
  if (!v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      size_t v12 = "Successfully ensured datavault";
      goto LABEL_17;
    }
LABEL_18:

    return;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
    ATXEnableMobileAssetDataVault_cold_2();
  }

  ASEnsureDataVault();
  id v10 = 0;
  id v11 = __atxlog_handle_default();
  double v9 = v11;
  if (!v10)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      size_t v12 = "Successfully ensured datavault after a retry";
LABEL_17:
      _os_log_impl(&dword_1D0FA3000, v9, OS_LOG_TYPE_DEFAULT, v12, buf, 2u);
      goto LABEL_18;
    }
    goto LABEL_18;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT)) {
    ATXEnableMobileAssetDataVault_cold_1();
  }

  _os_crash();
  __break(1u);
}

void _ATXInitializeInOwnerProcess()
{
  uint64_t v0 = (void *)MEMORY[0x1D25F6CC0]();
  if (_ATXInitializeInOwnerProcess_onceToken != -1) {
    dispatch_once(&_ATXInitializeInOwnerProcess_onceToken, &__block_literal_global_362);
  }
}

id ATXSharedDefaultHomeScreenItemUpdater()
{
  if ([MEMORY[0x1E4F93B10] isClassCLocked])
  {
    uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
    id v3 = [NSString stringWithUTF8String:"ATXDefaultHomeScreenItemUpdater *ATXSharedDefaultHomeScreenItemUpdater(void)"];
    [v2 handleFailureInFunction:v3 file:@"_ATXInitialization.m" lineNumber:107 description:@"We are class C locked while accessing a histogram"];
  }
  if (ATXSharedDefaultHomeScreenItemUpdater_onceToken != -1) {
    dispatch_once(&ATXSharedDefaultHomeScreenItemUpdater_onceToken, &__block_literal_global_719);
  }
  uint64_t v0 = (void *)ATXSharedDefaultHomeScreenItemUpdater_updater;
  return v0;
}

id restoreStateFinishedPath()
{
  uint64_t v0 = [MEMORY[0x1E4F4B650] appPredictionDirectory];
  os_signpost_id_t v1 = [v0 stringByAppendingPathComponent:@"restore_state_finished"];

  return v1;
}

void performPostRestoreTasks()
{
  uint64_t v0 = objc_opt_new();
  [v0 evictCachedSuggestedPages];

  id v1 = +[ATXAppDirectoryOrderingProvider sharedInstance];
  [v1 updateCacheWithActivity:0 completionHandler:0];
}

void __restoreStateQueue_block_invoke()
{
  uint64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("restoreState", v2);
  id v1 = (void *)restoreStateQueue_instance;
  restoreStateQueue_instance = (uint64_t)v0;
}

void __registerForRestoreStateNotifications_block_invoke()
{
  dispatch_queue_t v0 = (void **)dlsym((void *)registerForRestoreStateNotifications_mobileBackup, "kMBManagerRestoreStateChangedNotification");
  if (v0)
  {
    id v1 = *v0;
    int out_token = 0;
    uint64_t v2 = (const char *)[v1 UTF8String];
    id v3 = restoreStateQueue();
    notify_register_dispatch(v2, &out_token, v3, &__block_literal_global_468);

    __registerForRestoreStateNotifications_block_invoke_465(v4, out_token);
  }
  else
  {
    id v5 = __atxlog_handle_backup();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      __registerForRestoreStateNotifications_block_invoke_cold_1();
    }
  }
}

void __registerForRestoreStateNotifications_block_invoke_465(int a1, int token)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t state64 = 0;
  notify_get_state(token, &state64);
  uint64_t v2 = __atxlog_handle_backup();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    uint64_t v9 = state64;
    _os_log_impl(&dword_1D0FA3000, v2, OS_LOG_TYPE_DEFAULT, "Restore state changed: %ld", buf, 0xCu);
  }

  if (state64 == 2)
  {
    id v3 = __atxlog_handle_backup();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Restore detected. Pausing prediction updates.", buf, 2u);
    }

    restoreInProgress = 1;
  }
  else if (restoreInProgress == 1)
  {
    int v4 = __atxlog_handle_backup();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D0FA3000, v4, OS_LOG_TYPE_DEFAULT, "Restore finished. Restarting process.", buf, 2u);
    }

    id v5 = [MEMORY[0x1E4F28CB8] defaultManager];
    id v6 = restoreStateFinishedPath();
    [v5 createFileAtPath:v6 contents:0 attributes:0];

    exit(0);
  }
}

void __registerForAppPredictionUpdateCTSJob_block_invoke()
{
}

void __registerForUserRequestedBackupJob_block_invoke()
{
  dispatch_queue_t v0 = __atxlog_handle_backup();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_1D0FA3000, v0, OS_LOG_TYPE_DEFAULT, "Backup Now: Running app predictions backup...", v2, 2u);
  }

  id v1 = +[ATXBackupService backupService];
  [v1 backupWithCompletionHandler:&__block_literal_global_478];
}

void __registerForUserRequestedBackupJob_block_invoke_476(uint64_t a1, int a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v3 = __atxlog_handle_backup();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = @"NO";
    if (a2) {
      int v4 = @"YES";
    }
    int v5 = 138412290;
    id v6 = v4;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Backup Now succeeded: %@", (uint8_t *)&v5, 0xCu);
  }
}

void __registerForBackupCTSJob_block_invoke()
{
  dispatch_queue_t v0 = __atxlog_handle_backup();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_1D0FA3000, v0, OS_LOG_TYPE_DEFAULT, "Running app predictions backup...", v2, 2u);
  }

  id v1 = +[ATXBackupService backupService];
  [v1 backupWithCompletionHandler:&__block_literal_global_490];
}

void __registerForBackupCTSJob_block_invoke_488(uint64_t a1, int a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v3 = __atxlog_handle_backup();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = @"NO";
    if (a2) {
      int v4 = @"YES";
    }
    int v5 = 138412290;
    id v6 = v4;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Backup succeeded: %@", (uint8_t *)&v5, 0xCu);
  }
}

void __registerForTrainingCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_default();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Running app predictions training...", buf, 2u);
  }

  int v4 = +[_ATXAppPredictor sharedInstance];
  [v4 trainWithActivity:v2];

  int v5 = __atxlog_handle_default();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl(&dword_1D0FA3000, v5, OS_LOG_TYPE_DEFAULT, "Finished running atxtrain CTS job.", v6, 2u);
  }
}

void __registerForActionTimeEstimateCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_default();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Running Action Time Estimate logging...", v5, 2u);
  }

  int v4 = objc_opt_new();
  [v4 logActionTimeEstimatesWithActivity:v2];
}

void __registerForEverydayShortcutsTriggersCTSJobs_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_dailyroutines();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Running Daily Routines scheduled job...", v5, 2u);
  }

  int v4 = +[ATXDailyRoutinesTriggerManager sharedInstance];
  [v4 updateWithActivity:v2];
}

void __registerForEverydayShortcutsTriggersCTSJobs_block_invoke_500(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_dailyroutines();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Running Daily Routines one shot job...", v5, 2u);
  }

  int v4 = +[ATXDailyRoutinesTriggerManager sharedInstance];
  [v4 updateWithActivity:v2];
}

void __registerForDailyRoutinesCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_dailyroutines();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Running Daily Routines scheduled job...", v5, 2u);
  }

  int v4 = +[ATXDailyRoutinesTriggerManager sharedInstance];
  [v4 updateWithActivity:v2];
}

void __registerForDailyRoutinesCTSJob_block_invoke_505(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_dailyroutines();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Running Daily Routines one shot job...", v5, 2u);
  }

  int v4 = +[ATXDailyRoutinesTriggerManager sharedInstance];
  [v4 updateWithActivity:v2];
}

uint64_t __registerForMobileAssetMetadataUpdateCTSJob_block_invoke()
{
  return [MEMORY[0x1E4F4AF08] updateMobileAssetMetadata];
}

void __registerForMagicalMomentsCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_default();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Running Magical Moments model training...", v5, 2u);
  }

  int v4 = +[ATXMagicalMomentsAppPredictor sharedInstance];
  [v4 trainWithXPCActivity:v2];
}

void __registerForAnchorModelDataHarvestingCTSJob_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = __atxlog_handle_default();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v13) = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Running Anchor Model on-device training data collection...", (uint8_t *)&v13, 2u);
  }

  int v4 = (void *)MEMORY[0x1D25F6CC0]();
  int v5 = [[ATXAnchorModelTrainingDatasetBuilder alloc] initWithActivity:v2];
  [(ATXAnchorModelTrainingDatasetBuilder *)v5 cleanupDatasetForPrivacyPreservation];
  uint64_t v6 = [(ATXAnchorModelTrainingDatasetBuilder *)v5 addNewTrainingSamplesToDatabase];
  uint64_t v7 = __atxlog_handle_default();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 134217984;
    uint64_t v14 = v6;
    _os_log_impl(&dword_1D0FA3000, v7, OS_LOG_TYPE_DEFAULT, "Added %ld new samples after running Anchor Model Training Dataset Builder.", (uint8_t *)&v13, 0xCu);
  }

  int v8 = [v2 didDefer];
  uint64_t v9 = __atxlog_handle_default();
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (v10)
    {
      LOWORD(v13) = 0;
      _os_log_impl(&dword_1D0FA3000, v9, OS_LOG_TYPE_DEFAULT, "Deferring Anchor Model Data Harvesting CTS job right before we started harvesting data for offline data collection.", (uint8_t *)&v13, 2u);
    }
  }
  else
  {
    if (v10)
    {
      LOWORD(v13) = 0;
      _os_log_impl(&dword_1D0FA3000, v9, OS_LOG_TYPE_DEFAULT, "Running Anchor Model offline data collection...", (uint8_t *)&v13, 2u);
    }

    id v11 = (void *)MEMORY[0x1D25F6CC0]();
    size_t v12 = objc_opt_new();
    [v12 harvestData];
  }
}

void __registerForAnchorModelTrainingCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_anchor();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Running Anchor Model on-device training...", buf, 2u);
  }

  int v4 = [[ATXAnchorModelTrainer alloc] initWithXPCActivity:v2];
  [(ATXAnchorModelTrainer *)v4 train];
  int v5 = __atxlog_handle_anchor();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_1D0FA3000, v5, OS_LOG_TYPE_DEFAULT, "Done running Anchor Model on-device training.", v6, 2u);
  }
}

void __registerForBiomeProactiveSuggestionUIFeedbackResultStreamWritingCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_blending_ecosystem();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Writing proactive suggestion ui feedback results for client models to biome stream...", buf, 2u);
  }

  int v4 = objc_opt_new();
  [v4 writeEventsToStreamWithXPCActivity:v2];

  int v5 = __atxlog_handle_blending_ecosystem();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_1D0FA3000, v5, OS_LOG_TYPE_DEFAULT, "Done writing proactive suggestion ui feedback results for client models to biome stream.", v6, 2u);
  }
}

void __registerForModeEntityModelTrainingCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_default();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Running Mode Entity Model training...", buf, 2u);
  }

  int v4 = objc_opt_new();
  [v4 trainWithXPCActivity:v2];

  int v5 = __atxlog_handle_default();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_1D0FA3000, v5, OS_LOG_TYPE_DEFAULT, "Done running Mode Entity Model training.", v6, 2u);
  }
}

void __registerForModeSetupPredictionTrainingCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_default();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Running Mode Setup Prediction Model training...", buf, 2u);
  }

  int v4 = objc_opt_new();
  [v4 trainWithXPCActivity:v2];

  int v5 = __atxlog_handle_default();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_1D0FA3000, v5, OS_LOG_TYPE_DEFAULT, "Done running Mode Setup Prediction Model training.", v6, 2u);
  }
}

void __registerForUrgencyTuningGlobalMetricsLogging_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_default();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Logging global metrics for urgency tuning...", buf, 2u);
  }

  int v4 = objc_opt_new();
  [v4 logUrgencyTuningGlobalMetricsWithXPCActivity:v2];

  int v5 = __atxlog_handle_default();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_1D0FA3000, v5, OS_LOG_TYPE_DEFAULT, "Done logging global metrics for urgency tuning.", v6, 2u);
  }
}

void __registerForPeriodicLogUploadCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_default();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Running periodic logging...", buf, 2u);
  }

  int v4 = (void *)MEMORY[0x1D25F6CC0]();
  int v5 = __atxlog_handle_default();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl(&dword_1D0FA3000, v5, OS_LOG_TYPE_DEFAULT, "Running periodic logging: counted prediction updates", v16, 2u);
  }

  uint64_t v6 = objc_opt_new();
  [v6 flushCountedPredictionUpdatesToLogger];

  uint64_t v7 = (void *)MEMORY[0x1D25F6CC0]();
  int v8 = __atxlog_handle_default();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_1D0FA3000, v8, OS_LOG_TYPE_DEFAULT, "Running periodic logging: Core Duet action log donation metrics", v15, 2u);
  }

  uint64_t v9 = objc_opt_new();
  [v9 logCoreDuetActionLogDonationMetrics];

  BOOL v10 = (void *)MEMORY[0x1D25F6CC0]();
  id v11 = __atxlog_handle_default();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_1D0FA3000, v11, OS_LOG_TYPE_DEFAULT, "Running periodic logging: counted app launches", v14, 2u);
  }

  [MEMORY[0x1E4F4AEE0] logCountedAppLaunchesToEventTracker];
  size_t v12 = __atxlog_handle_default();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v13 = 0;
    _os_log_impl(&dword_1D0FA3000, v12, OS_LOG_TYPE_DEFAULT, "Finished periodic logging", v13, 2u);
  }
}

void __registerForInformationStorePeriodicCleanupCTSJob_block_invoke()
{
  dispatch_queue_t v0 = __atxlog_handle_default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v2 = 0;
    _os_log_impl(&dword_1D0FA3000, v0, OS_LOG_TYPE_DEFAULT, "Running periodic information store cleanup", v2, 2u);
  }

  id v1 = [MEMORY[0x1E4F4B0E8] sharedInstance];
  [v1 clearOutdatedWidgetEngagements];
  [v1 clearOutdatedWidgetReloadEntries];
  [v1 clearOutdatedSuggestedWidgetEntries];
}

void __registerForAppDirectoryCategoriesUpdateCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_app_library();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Updating ATXAppDirectory categories", v5, 2u);
  }

  int v4 = +[ATXAppDirectoryOrderingProvider sharedInstance];
  [v4 updateCacheWithActivity:v2 completionHandler:0];
}

void __registerForAppDirectoryLogUploadCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_default();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Uploading ATXAppDirectory logs", v5, 2u);
  }

  int v4 = objc_opt_new();
  [v4 uploadSummariesToCoreAnalyticsWithActivity:v2];
}

void __registerForUserWakeupCDContextChange_block_invoke()
{
  id v0 = objc_alloc(MEMORY[0x1E4F1CB18]);
  id v2 = (id)[v0 initWithSuiteName:*MEMORY[0x1E4F4B688]];
  id v1 = [MEMORY[0x1E4F1C9C8] date];
  [v2 setObject:v1 forKey:*MEMORY[0x1E4F4B708]];
}

void __registerForTimelineRelevanceMetricsCollectionCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_default();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Running Timeline Relevance Metric collection.", v5, 2u);
  }

  int v4 = objc_opt_new();
  [v4 harvestWithActivity:v2];
}

void __registerForTimelineRelevancePredictionCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_default();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Running Timeline Relevance prediction CTS job.", v5, 2u);
  }

  int v4 = objc_opt_new();
  [v4 persistQuotasWithActivity:v2];
  if (_os_feature_enabled_impl()) {
    [v4 trainWidgetPredictionModelWithActivity:v2];
  }
}

uint64_t __registerForCardSuggestionClientCacheCleanupCTSJob_block_invoke()
{
  id v0 = __atxlog_handle_default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v2 = 0;
    _os_log_impl(&dword_1D0FA3000, v0, OS_LOG_TYPE_DEFAULT, "Running Card Suggestion Client Cache Cleanup CTS Job", v2, 2u);
  }

  return +[ATXClientModelSuggestionReceiver clearPreviouslyPersistedCachesForCardSuggestionClientsIfNecessary];
}

void __registerForDefaultWidgetSuggesterUpdateCTSJobIfNecessary_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_home_screen();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Updating ATXDefaultWidgetSuggester", v5, 2u);
  }

  int v4 = +[ATXDefaultWidgetSuggesterServer sharedInstance];
  [v4 updateCachedValuesWithActivity:v2];
}

void __registerForWidgetOnboardingCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_default();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Updating onboarding widget and stack suggestions and refreshing installed cache", buf, 2u);
  }

  int v4 = [MEMORY[0x1E4F4B430] sharedInstance];
  int v5 = [v4 fetchHomeScreenWidgetDescriptorMetadataWithError:0];
  if (v5)
  {
    uint64_t v6 = ATXSharedDefaultHomeScreenItemUpdater();
    uint64_t v7 = [v4 homeScreenDescriptors];
    [v6 updateDefaultsIfNeededWithSystemDescriptors:v7 installDatesCache:v5 reason:@"Onboarding CTS job"];
  }
  int v8 = __atxlog_handle_home_screen();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_1D0FA3000, v8, OS_LOG_TYPE_DEFAULT, "Updating ATXOnboardingStackWidgetCache", v14, 2u);
  }

  uint64_t v9 = objc_opt_new();
  BOOL v10 = [v9 updateCacheWithActivity:v2];
  id v11 = __atxlog_handle_home_screen();
  size_t v12 = v11;
  if (v10)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v13 = 0;
      _os_log_impl(&dword_1D0FA3000, v12, OS_LOG_TYPE_DEFAULT, "Updating ATXOnboardingStackResultCache", v13, 2u);
    }

    size_t v12 = objc_opt_new();
    [v12 updateCacheWithActivity:v2 widgetCache:v10];
  }
  else if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    __registerForWidgetOnboardingCTSJob_block_invoke_cold_1();
  }
}

void __registerForBiomePublicStreamPruning_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = (id)objc_opt_new();
  [v3 pruneAllStreamsWithActivity:v2];
}

void __registerForFocusMetricsLogUploadCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_metrics();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Processing and uploading Focus metrics events to CoreAnalytics", buf, 2u);
  }

  int v4 = __atxlog_handle_metrics();
  os_signpost_id_t v5 = os_signpost_id_generate(v4);

  uint64_t v6 = __atxlog_handle_metrics();
  uint64_t v7 = v6;
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    *(_WORD *)int v13 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D0FA3000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v5, "FocusMetricsLogging.Total", " enableTelemetry=YES ", v13, 2u);
  }

  int v8 = objc_opt_new();
  uint64_t v9 = objc_opt_new();
  [v8 uploadFocusLogsToCoreAnalyticsWithActivity:v2 contactStore:v9];

  BOOL v10 = __atxlog_handle_metrics();
  id v11 = v10;
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    *(_WORD *)size_t v12 = 0;
    _os_signpost_emit_with_name_impl(&dword_1D0FA3000, v11, OS_SIGNPOST_INTERVAL_END, v5, "FocusMetricsLogging.Total", " enableTelemetry=YES ", v12, 2u);
  }
}

void __registerForHomeScreenLogUploadCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_default();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)os_signpost_id_t v5 = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Processing and uploading homescreen events to CoreAnalytics", v5, 2u);
  }

  int v4 = objc_opt_new();
  [v4 uploadHomeScreenSummaryLogsToCoreAnalyticsWithActivity:v2 customStartDate:0 dryRunCompletionHandler:0];
}

void __registerForNPlusOneStudyCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_default();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)os_signpost_id_t v5 = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Preparing and uploading N+1 study data to CoreAnalytics", v5, 2u);
  }

  int v4 = objc_opt_new();
  [v4 uploadStudyDataToCoreAnalyticsWithActivity:v2];
}

void __registerForBlendingBiomeStreamLoggingCTSJob_block_invoke()
{
  id v0 = __atxlog_handle_metrics();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v2 = 0;
    _os_log_impl(&dword_1D0FA3000, v0, OS_LOG_TYPE_DEFAULT, "Running Blending Biome Stream logging...", v2, 2u);
  }

  id v1 = +[ATXBlendingBiomeStreamLogger defaultBiomeStreamLogger];
  [v1 logBlendingMetricsFromBiomeStream];
}

void __registerForFeedbackMetricsLoggingCTSJob_block_invoke()
{
  id v0 = __atxlog_handle_metrics();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v4 = 0;
    _os_log_impl(&dword_1D0FA3000, v0, OS_LOG_TYPE_DEFAULT, "Running Blending Feedback Metrics logging...", v4, 2u);
  }

  id v1 = objc_alloc(MEMORY[0x1E4F93958]);
  id v2 = [MEMORY[0x1E4F93550] sharedInstance];
  id v3 = (void *)[v1 initWithHyperParameters:v2];

  [v3 logMetricsForiOSUIFeedbackQueries];
}

void __registerForFaceSuggestionsCTSJob_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  id v3 = __atxlog_handle_lock_screen();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 136315138;
    uint64_t v15 = "void registerForFaceSuggestionsCTSJob(void)_block_invoke";
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "%s: Refreshing Face and Complication suggestions...", (uint8_t *)&v14, 0xCu);
  }

  int v4 = [v2 setContinue];
  os_signpost_id_t v5 = __atxlog_handle_lock_screen();
  uint64_t v6 = v5;
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 136315138;
      uint64_t v15 = "void registerForFaceSuggestionsCTSJob(void)_block_invoke";
      _os_log_impl(&dword_1D0FA3000, v6, OS_LOG_TYPE_DEFAULT, "%s: activity set to CONTINUE", (uint8_t *)&v14, 0xCu);
    }

    uint64_t v6 = +[ATXFaceSuggestionServer sharedInstance];
    [v6 reloadLockScreenSuggestionsWithActivity:v2 completion:&__block_literal_global_631];
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    __registerForFaceSuggestionsCTSJob_block_invoke_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
  }
}

void __registerForFaceSuggestionsCTSJob_block_invoke_628(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_lock_screen();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    __registerForFaceSuggestionsCTSJob_block_invoke_628_cold_1((uint64_t)v2, v3);
  }
}

void __registerForLockscreenMetricsCTSJob_block_invoke()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  id v0 = __atxlog_handle_lock_screen();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    id v3 = "void registerForLockscreenMetricsCTSJob(void)_block_invoke";
    _os_log_impl(&dword_1D0FA3000, v0, OS_LOG_TYPE_DEFAULT, "%s: Collecting lockscreen metrics...", (uint8_t *)&v2, 0xCu);
  }

  id v1 = objc_opt_new();
  [v1 postDailyMetrics];
}

void __registerForZkwMetricsCTSJob_block_invoke()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  id v0 = __atxlog_handle_lock_screen();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    id v3 = "void registerForZkwMetricsCTSJob(void)_block_invoke";
    _os_log_impl(&dword_1D0FA3000, v0, OS_LOG_TYPE_DEFAULT, "%s: Collecting zkw metrics...", (uint8_t *)&v2, 0xCu);
  }

  id v1 = objc_opt_new();
  [v1 postZkwMetrics];
}

void __registerForVerticalModelsTrainingCTSJob_block_invoke()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  id v0 = __atxlog_handle_lock_screen();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    id v3 = "void registerForVerticalModelsTrainingCTSJob(void)_block_invoke";
    _os_log_impl(&dword_1D0FA3000, v0, OS_LOG_TYPE_DEFAULT, "%s: Training vertical models...", (uint8_t *)&v2, 0xCu);
  }

  id v1 = objc_opt_new();
  [v1 refreshWebsitePredictions];
}

void __registerForModelScoreHarvestingCTSJob_block_invoke()
{
  id v0 = __atxlog_handle_metrics();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v2 = 0;
    _os_log_impl(&dword_1D0FA3000, v0, OS_LOG_TYPE_DEFAULT, "Running model score harvesting...", v2, 2u);
  }

  id v1 = objc_alloc_init(MEMORY[0x1E4F93980]);
  [v1 modelScoreHarvesting];
}

void __registerForUpdateInferredModeBiomeStream_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_default();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Updating inferred mode Biome stream", buf, 2u);
  }

  uint64_t v4 = objc_opt_new();
  [v4 inferModesForLastDayWithXPCActivity:v2];

  os_signpost_id_t v5 = __atxlog_handle_default();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_1D0FA3000, v5, OS_LOG_TYPE_DEFAULT, "Finished", v6, 2u);
  }
}

void __registerForUpdateSuggestedPagesCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_modes();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Updating suggested pages from CTS job", buf, 2u);
  }

  uint64_t v4 = +[ATXSuggestedPagesServer sharedInstance];
  [v4 prewarmCachedSuggestedPagesWithActivity:v2];

  os_signpost_id_t v5 = __atxlog_handle_modes();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_1D0FA3000, v5, OS_LOG_TYPE_DEFAULT, "Finished updating suggested pages from CTS job", v6, 2u);
  }
}

void __registerForBlendingShadowLoggingCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_default();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)os_signpost_id_t v5 = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Beginning blending shadow logging XPC activity", v5, 2u);
  }

  uint64_t v4 = objc_opt_new();
  [v4 shadowLogWithXPCActivity:v2];
}

void __registerForModeActivityLoggingJob_block_invoke()
{
  id v0 = __atxlog_handle_default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v1 = 0;
    _os_log_impl(&dword_1D0FA3000, v0, OS_LOG_TYPE_DEFAULT, "Skipping deprecated mode activity metrics logging...", v1, 2u);
  }
}

void __registerForDigestLoggingJob_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_default();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)os_signpost_id_t v5 = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Running notification digest metrics logging...", v5, 2u);
  }

  uint64_t v4 = objc_opt_new();
  [v4 logMetricsWithXPCActivity:v2];
}

void __registerForDigestGlobalNotificationFeedbackJob_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_default();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)os_signpost_id_t v5 = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Updating digest global notification feedback...", v5, 2u);
  }

  uint64_t v4 = objc_opt_new();
  [v4 logGlobalNotificationStatisticsToDigestFeedbackWithXPCActivity:v2];
}

void __registerForNotificationAndSuggestionDatastorePruning_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_default();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)os_signpost_id_t v5 = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Pruning notification and suggestion datastore...", v5, 2u);
  }

  uint64_t v4 = objc_opt_new();
  [v4 pruneDatabaseWithXPCActivity:v2];
}

void __registerForNotificationAndSuggestionDatastorePruning_block_invoke_679(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = (id)objc_opt_new();
  [v3 pruneNotificationsBasedOnHardLimitsWithXPCActivity:v2];
}

void __registerForNotificationAndSuggestionDatastorePruning_block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = (id)objc_opt_new();
  [v3 pruneSuggestionsBasedOnHardLimitsWithXPCActivity:v2];
}

void __registerForNotificationAndSuggestionDatastorePruning_block_invoke_3()
{
  id v0 = (id)objc_opt_new();
  [v0 analyze];
}

void __registerForNotificationAndSuggestionDatastorePerfMetricsLogging_block_invoke()
{
  id v0 = (id)objc_opt_new();
  [v0 notificationAndSuggestionDatastorePerfMetricsLogging];
}

void __registerForATXDataStoreMaintainenceJob_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = +[_ATXDataStore sharedInstance];
  [v3 vacuumDatabaseWithActivity:v2];
}

void __registerForActivitySuggestionFeedbackProcessingCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = __atxlog_handle_modes();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)os_signpost_id_t v5 = 0;
    _os_log_impl(&dword_1D0FA3000, v3, OS_LOG_TYPE_DEFAULT, "Beginning Activity Suggestion Feedback Processing XPC activity", v5, 2u);
  }

  uint64_t v4 = objc_opt_new();
  [v4 processFeedbackWithXPCActivity:v2];
}

void __registerForATXSuggestedPagesHomeScreenModificationsMetricsCTSJob_block_invoke()
{
  id v0 = __atxlog_handle_default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1D0FA3000, v0, OS_LOG_TYPE_DEFAULT, "Started running com.apple.duetexpertd.homeScreenModificationMetricsLogger", buf, 2u);
  }

  id v1 = objc_opt_new();
  [v1 logMetrics];

  id v2 = __atxlog_handle_default();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl(&dword_1D0FA3000, v2, OS_LOG_TYPE_DEFAULT, "Finished running com.apple.duetexpertd.homeScreenModificationMetricsLogger", v3, 2u);
  }
}

void __registerForAmbientMetricsCTSJob_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1E4F5ACB8];
  id v3 = a2;
  uint64_t v4 = [v2 log];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315138;
    uint64_t v7 = "void registerForAmbientMetricsCTSJob(void)_block_invoke";
    _os_log_impl(&dword_1D0FA3000, v4, OS_LOG_TYPE_DEFAULT, "%s: starting Ambient metrics collection", (uint8_t *)&v6, 0xCu);
  }

  os_signpost_id_t v5 = objc_opt_new();
  [v5 collectWithActivity:v3];
}

void __registerForTimelineRelevanceTablePruningCTSJob_block_invoke(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = (id)objc_opt_new();
  [v3 pruneTimelineRelevanceTableWithXPCActivity:v2];
}

void languagePrefChanged()
{
  id v0 = __atxlog_handle_default();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl(&dword_1D0FA3000, v0, OS_LOG_TYPE_DEFAULT, "Language change detected - restarting duetexpertd.", v3, 2u);
  }

  id v1 = objc_alloc(MEMORY[0x1E4F1CB18]);
  id v2 = (void *)[v1 initWithSuiteName:*MEMORY[0x1E4F4B688]];
  [v2 setBool:1 forKey:@"ATXInitializationLanguageChangeDirty"];
  xpc_transaction_exit_clean();
}

void __ATXSharedDefaultHomeScreenItemUpdater_block_invoke()
{
  id v0 = +[_ATXAppLaunchHistogramManager sharedInstance];
  id v3 = [v0 histogramForLaunchType:1];

  uint64_t v1 = [objc_alloc(MEMORY[0x1E4F4AFA0]) initWithSpotlightAppLaunchHistogram:v3];
  id v2 = (void *)ATXSharedDefaultHomeScreenItemUpdater_updater;
  ATXSharedDefaultHomeScreenItemUpdater_updater = v1;
}

uint64_t __updatePredictionsIfLanguageChanged_block_invoke(uint64_t a1)
{
  ATXUpdatePredictionsImmediatelyWithReason(20);
  id v2 = *(void **)(a1 + 32);
  return [v2 setBool:0 forKey:@"ATXInitializationLanguageChangeDirty"];
}

__CFString *ATXAppLaunchFromToString(uint64_t a1)
{
  id v3 = @"AppLaunchSpotlight";
  switch(a1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      objc_msgSend(NSString, "stringWithFormat:", @"AppLaunchPage%lu", a1);
      id v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
      break;
    case 12:
      id v3 = @"AppLaunchSpotlightSearch";
      break;
    case 13:
      id v3 = @"AppLaunchSpotlightAppPred";
      break;
    case 14:
      id v3 = @"AppLaunchWidget";
      break;
    case 15:
      id v3 = @"AppLaunchWidgetAppPred";
      break;
    case 16:
      id v3 = @"AppLaunchDock";
      break;
    case 17:
      id v3 = @"AppLaunchNotification";
      break;
    case 18:
      id v3 = @"AppLaunchBanner";
      break;
    case 19:
      id v3 = @"AppLaunchSiri";
      break;
    case 20:
      id v3 = @"AppLaunchAppSwitcher";
      break;
    case 21:
      id v3 = @"AppLaunchBreadCrumb";
      break;
    case 22:
    case 23:
      id v3 = @"unknown";
      goto LABEL_6;
    default:
LABEL_6:
      break;
  }
  return v3;
}

id __dispatch_async_txn_block_invoke(uint64_t a1)
{
  id v2 = (void *)MEMORY[0x1D25F6CC0]();
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  return self;
}

void sub_1D1180BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1180DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1181008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1181250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11814CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1181748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D118249C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D1184654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11847C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1184A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1184CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1184EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11850B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D118520C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1185394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11854F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1185690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11858EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1185B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1185DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11863D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1186510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D118663C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1186744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1186844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1186B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D11872B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D118799C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
}

void sub_1D118951C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D118975C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D118C078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D118C8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1D118CAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D118CCE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1D118CF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1D118E94C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1D118F3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1D11914DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1191C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1192008(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_1D11921A0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1D11925A4(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 72));
  _Unwind_Resume(a1);
}

void sub_1D1192800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1192AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1D1193198(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1D11952A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1195454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D119556C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1195684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1195844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXPBPredictionUserContextReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  os_signpost_id_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          uint64_t v12 = *(void *)(a2 + v11);
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (v16) {
          BOOL v17 = 1;
        }
        else {
          BOOL v17 = (v10 & 7) == 4;
        }
        if (!v17)
        {
          switch((v10 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 48) |= 2u;
              uint64_t v18 = *v3;
              unint64_t v19 = *(void *)(a2 + v18);
              if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
              {
                uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
                *(void *)(a2 + v1_Block_object_dispose(&STACK[0x270], 8) = v19 + 8;
              }
              else
              {
                *(unsigned char *)(a2 + *v5) = 1;
                uint64_t v20 = 0;
              }
              uint64_t v27 = 16;
              goto LABEL_35;
            case 2u:
              uint64_t v23 = PBReaderReadString();
              uint64_t v24 = 32;
              goto LABEL_30;
            case 3u:
              *(unsigned char *)(a1 + 48) |= 1u;
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
              {
                uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v22);
                *(void *)(a2 + v21) = v22 + 8;
              }
              else
              {
                *(unsigned char *)(a2 + *v5) = 1;
                uint64_t v20 = 0;
              }
              uint64_t v27 = 8;
LABEL_35:
              *(void *)(a1 + v27) = v20;
              goto LABEL_36;
            case 4u:
              uint64_t v23 = PBReaderReadString();
              uint64_t v24 = 40;
              goto LABEL_30;
            case 5u:
              uint64_t v23 = PBReaderReadString();
              uint64_t v24 = 24;
LABEL_30:
              uint64_t v26 = *(void **)(a1 + v24);
              *(void *)(a1 + v24) = v23;

              goto LABEL_36;
            default:
              uint64_t result = PBReaderSkipValueWithTag();
              if (!result) {
                return result;
              }
LABEL_36:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t offsetFromAppendingData(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  while (([v3 length] & 0x1F) != 0)
    [v3 appendBytes:"" length:1];
  uint64_t v5 = [v3 length];
  [v3 appendData:v4];

  return v5;
}

void sub_1D119D570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D119D69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D119D92C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1D119DBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id ATXAppsThatCannotShowContentInSearch()
{
  id v0 = (void *)CFPreferencesCopyValue(@"SBSearchDisabledBundles", @"com.apple.spotlightui", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  uint64_t v1 = v0;
  if (v0)
  {
    id v2 = v0;
  }
  else
  {
    id v2 = [MEMORY[0x1E4F1C978] array];
  }
  id v3 = v2;

  id v4 = [MEMORY[0x1E4F1CA48] arrayWithArray:v3];
  [v4 removeObject:@"com.apple.CloudDocs.MobileDocumentsFileProvider"];
  [v4 removeObject:@"com.apple.CloudDocs.iCloudDriveFileProvider"];
  [v4 removeObject:@"com.apple.CloudDocs.iCloudDriveFileProviderManaged"];
  if ([v3 containsObject:@"com.apple.DocumentsApp"])
  {
    [v4 addObject:@"com.apple.CloudDocs.MobileDocumentsFileProvider"];
    [v4 addObject:@"com.apple.CloudDocs.iCloudDriveFileProvider"];
    [v4 addObject:@"com.apple.CloudDocs.iCloudDriveFileProviderManaged"];
    [v4 addObject:@"com.apple.FileProvider.LocalStorage"];
  }
  uint64_t v5 = [MEMORY[0x1E4F1CA80] setWithArray:v4];

  return v5;
}

void sub_1D119F5A4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1D11A2AE4(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1D11A2B88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D11A2D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1D11A31B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_1D11A3350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D11A34E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1D11A36E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D11A38EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D11A3A30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D11A3C70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D11A3CD4(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_1D11A3DD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D11A3E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1D11A3FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<ATXPredictionItem>::resize(uint64_t a1, unint64_t a2)
{
  id v3 = *(id **)(a1 + 8);
  unint64_t v4 = 0xDAB7EC1DD3431B57 * (((uint64_t)v3 - *(void *)a1) >> 5);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<ATXPredictionItem>::__append((char **)a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *(void *)a1 + 3296 * a2;
    while (v3 != (id *)v7)
    {
      v3 -= 412;
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x270], 8) = v7;
  }
}

void sub_1D11A4260(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D11A43C4(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<ATXAction * {__strong},int>,std::__unordered_map_hasher<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionHash,ATXActionEqual,true>,std::__unordered_map_equal<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionEqual,ATXActionHash,true>,std::allocator<std::__hash_value_type<ATXAction * {__strong},int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<ATXAction * {__strong},int>,std::__unordered_map_hasher<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionHash,ATXActionEqual,true>,std::__unordered_map_equal<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionEqual,ATXActionHash,true>,std::allocator<std::__hash_value_type<ATXAction * {__strong},int>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<ATXAction * {__strong},int>,std::__unordered_map_hasher<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionHash,ATXActionEqual,true>,std::__unordered_map_equal<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionEqual,ATXActionHash,true>,std::allocator<std::__hash_value_type<ATXAction * {__strong},int>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  id v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<ATXAction * {__strong},int>,std::__unordered_map_hasher<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionHash,ATXActionEqual,true>,std::__unordered_map_equal<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionEqual,ATXActionHash,true>,std::allocator<std::__hash_value_type<ATXAction * {__strong},int>>>::__deallocate_node(uint64_t a1, id *a2)
{
  if (a2)
  {
    id v2 = a2;
    do
    {
      id v3 = (id *)*v2;

      operator delete(v2);
      id v2 = v3;
    }
    while (v3);
  }
}

void std::__hash_table<std::__hash_value_type<ATXAction * {__strong},int>,std::__unordered_map_hasher<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionHash,ATXActionEqual,true>,std::__unordered_map_equal<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionEqual,ATXActionHash,true>,std::allocator<std::__hash_value_type<ATXAction * {__strong},int>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<ATXAction * {__strong},int>,std::__unordered_map_hasher<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionHash,ATXActionEqual,true>,std::__unordered_map_equal<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionEqual,ATXActionHash,true>,std::allocator<std::__hash_value_type<ATXAction * {__strong},int>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  BOOL v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x270], 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    void *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<ATXAction * {__strong},int>,std::__unordered_map_hasher<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionHash,ATXActionEqual,true>,std::__unordered_map_equal<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionEqual,ATXActionHash,true>,std::allocator<std::__hash_value_type<ATXAction * {__strong},int>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<ATXAction * {__strong},int>,std::__unordered_map_hasher<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionHash,ATXActionEqual,true>,std::__unordered_map_equal<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionEqual,ATXActionHash,true>,std::allocator<std::__hash_value_type<ATXAction * {__strong},int>>>::__deallocate_node(a1, *(id **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t **std::__hash_table<std::__hash_value_type<ATXAction * {__strong},int>,std::__unordered_map_hasher<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionHash,ATXActionEqual,true>,std::__unordered_map_equal<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionEqual,ATXActionHash,true>,std::allocator<std::__hash_value_type<ATXAction * {__strong},int>>>::find<ATXAction * {__strong}>(void *a1, id *a2)
{
  unint64_t v4 = [*a2 hash];
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = (uint64_t **)*i)
  {
    unint64_t v12 = (unint64_t)i[1];
    if (v12 == v6)
    {
      if ([i[2] isEqual:*a2]) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

void std::vector<ATXPredictionItem>::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E68AB018, MEMORY[0x1E4FBA1D0]);
}

void sub_1D11A47C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

char *std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::__emplace_unique_key_args<NSString * {__strong},NSString * {__strong}&,ATXPredictionItem>(uint64_t a1, id *a2, id *a3, uint64_t *a4)
{
  unint64_t v9 = [*a2 hash];
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    char v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = (char *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = *((void *)v15 + 1);
          if (v16 == v10)
          {
            if ([*((id *)v15 + 2) isEqualToString:*a2]) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4) {
              break;
            }
          }
          uint64_t v15 = *(char **)v15;
        }
        while (v15);
      }
    }
  }
  BOOL v17 = (void *)(a1 + 16);
  uint64_t v15 = (char *)operator new(0xCF8uLL);
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = v10;
  id v18 = *a3;
  uint64_t v19 = *a4;
  *a4 = 0;
  *((void *)v15 + 2) = v18;
  *((void *)v15 + 3) = v19;
  memcpy(v15 + 32, a4 + 1, 0xCD2uLL);
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)uint64_t v15 = *v27;
LABEL_38:
    *uint64_t v27 = v15;
    goto LABEL_39;
  }
  *(void *)uint64_t v15 = *v17;
  void *v17 = v15;
  *(void *)(v26 + 8 * v4) = v17;
  if (*(void *)v15)
  {
    unint64_t v28 = *(void *)(*(void *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    uint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_1D11A4A6C(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ATXPredictionItem>::__append(char **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  int8x8_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (0xDAB7EC1DD3431B57 * ((uint64_t)&v6[-v7] >> 5) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 3296 * a2;
      float v14 = -31337.0;
      do
      {
        *(void *)uint64_t v7 = 0;
        *(float *)(v7 + 3284) = v14;
        uint64_t v15 = 16;
        *(_WORD *)(v7 + 328_Block_object_dispose(&STACK[0x270], 8) = 0;
        do
        {
          *(float *)(v7 + v15) = v14;
          v15 += 4;
        }
        while (v15 != 3284);
        v7 += 3296;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = (char *)v7;
  }
  else
  {
    unint64_t v8 = 0xDAB7EC1DD3431B57 * ((v7 - (uint64_t)*a1) >> 5);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x13E22CBCE4A902) {
      std::vector<ATXPredictionItem>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xDAB7EC1DD3431B57 * ((v5 - *a1) >> 5);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x9F1165E725481) {
      unint64_t v11 = 0x13E22CBCE4A902;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v32 = result;
    if (v11) {
      uint8x8_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ATXPredictionItem>>(result, v11);
    }
    else {
      uint8x8_t v12 = 0;
    }
    unint64_t v16 = &v12[3296 * v8];
    BOOL v17 = &v12[3296 * v11];
    id v18 = (float *)&v16[3296 * a2];
    float v19 = -31337.0;
    float v20 = (float *)v16;
    do
    {
      *(void *)float v20 = 0;
      v20[821] = v19;
      uint64_t v21 = 4;
      *((_WORD *)v20 + 1644) = 0;
      do
        v20[v21++] = v19;
      while (v21 != 821);
      v20 += 824;
    }
    while (v20 != v18);
    unint64_t v23 = *a1;
    unint64_t v22 = (unint64_t)a1[1];
    if ((char *)v22 == *a1)
    {
      int64x2_t v27 = vdupq_n_s64(v22);
    }
    else
    {
      do
      {
        unint64_t v24 = v22 - 3296;
        uint64_t v25 = *(void *)(v22 - 3296);
        uint64_t v26 = v16 - 3288;
        v16 -= 3296;
        *(void *)(v22 - 3296) = 0;
        *(void *)unint64_t v16 = v25;
        memcpy(v26, (const void *)(v22 - 3288), 0xCD2uLL);
        unint64_t v22 = v24;
      }
      while ((char *)v24 != v23);
      int64x2_t v27 = *(int64x2_t *)a1;
    }
    *a1 = v16;
    a1[1] = (char *)v18;
    int64x2_t v30 = v27;
    unint64_t v28 = a1[2];
    a1[2] = v17;
    uint64_t v31 = v28;
    uint64_t v29 = v27.i64[0];
    return std::__split_buffer<ATXPredictionItem>::~__split_buffer((uint64_t)&v29);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<ATXAction * {__strong},int>,std::__unordered_map_hasher<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionHash,ATXActionEqual,true>,std::__unordered_map_equal<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionEqual,ATXActionHash,true>,std::allocator<std::__hash_value_type<ATXAction * {__strong},int>>>::__emplace_unique_key_args<ATXAction * {__strong},ATXAction * {__strong},long &>(uint64_t a1, id *a2, uint64_t *a3, void *a4)
{
  unint64_t v9 = [*a2 hash];
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    float v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if ([*((id *)i + 2) isEqual:*a2]) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  BOOL v17 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v10;
  uint64_t v18 = *a3;
  *a3 = 0;
  *((void *)i + 2) = v18;
  *((_DWORD *)i + 6) = *a4;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::__rehash<true>(a1, v24);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v25 = *(void *)a1;
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26)
  {
    *(void *)uint64_t i = *v26;
LABEL_38:
    *uint64_t v26 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v17;
  void *v17 = i;
  *(void *)(v25 + 8 * v4) = v17;
  if (*(void *)i)
  {
    unint64_t v27 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11) {
        v27 %= v11;
      }
    }
    else
    {
      v27 &= v11 - 1;
    }
    uint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1D11A4EC8(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ATXAction * {__strong},int>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ATXAction * {__strong},int>,void *>>>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void sub_1D11A514C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D11A5C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, id *a11)
{
  objc_destroyWeak(v11);
  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  objc_destroyWeak((id *)(v12 - 176));
  _Unwind_Resume(a1);
}

void sub_1D11A61D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D11A63F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D11A98C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t ATXPBPredictionLocationMotionContextReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  int8x8_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v18 = objc_alloc_init(ATXPBPredictionLocationOfInterest);
        uint64_t v19 = 88;
        goto LABEL_23;
      case 2u:
        uint64_t v18 = objc_alloc_init(ATXPBPredictionLocationOfInterest);
        uint64_t v19 = 64;
LABEL_23:
        objc_storeStrong((id *)(a1 + v19), v18);
        if PBReaderPlaceMark() && (ATXPBPredictionLocationOfInterestReadFrom((uint64_t)v18, a2))
        {
          PBReaderRecallMark();

LABEL_98:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 3u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(_WORD *)(a1 + 100) |= 0x80u;
        while (2)
        {
          uint64_t v24 = *v3;
          uint64_t v25 = *(void *)(a2 + v24);
          unint64_t v26 = v25 + 1;
          if (v25 == -1 || v26 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v26;
            v23 |= (unint64_t)(v27 & 0x7F) << v21;
            if (v27 < 0)
            {
              v21 += 7;
              BOOL v15 = v22++ >= 9;
              if (v15)
              {
                LODWORD(v23) = 0;
                goto LABEL_72;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v23) = 0;
        }
LABEL_72:
        *(_DWORD *)(a1 + 80) = v23;
        goto LABEL_98;
      case 4u:
        uint64_t v28 = PBReaderReadData();
        uint64_t v29 = *(void **)(a1 + 72);
        *(void *)(a1 + 72) = v28;

        goto LABEL_98;
      case 5u:
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v32 = 0;
        *(_WORD *)(a1 + 100) |= 0x200u;
        while (2)
        {
          uint64_t v33 = *v3;
          uint64_t v34 = *(void *)(a2 + v33);
          unint64_t v35 = v34 + 1;
          if (v34 == -1 || v35 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
            *(void *)(a2 + v33) = v35;
            v32 |= (unint64_t)(v36 & 0x7F) << v30;
            if (v36 < 0)
            {
              v30 += 7;
              BOOL v15 = v31++ >= 9;
              if (v15)
              {
                uint64_t v32 = 0;
                goto LABEL_76;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v32 = 0;
        }
LABEL_76:
        BOOL v63 = v32 != 0;
        uint64_t v64 = 97;
        goto LABEL_81;
      case 6u:
        *(_WORD *)(a1 + 100) |= 4u;
        uint64_t v37 = *v3;
        unint64_t v38 = *(void *)(a2 + v37);
        if (v38 <= 0xFFFFFFFFFFFFFFF7 && v38 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v39 = *(void *)(*(void *)(a2 + *v7) + v38);
          *(void *)(a2 + v37) = v38 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v39 = 0;
        }
        uint64_t v65 = 24;
        goto LABEL_90;
      case 7u:
        *(_WORD *)(a1 + 100) |= 0x10u;
        uint64_t v40 = *v3;
        unint64_t v41 = *(void *)(a2 + v40);
        if (v41 <= 0xFFFFFFFFFFFFFFF7 && v41 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v39 = *(void *)(*(void *)(a2 + *v7) + v41);
          *(void *)(a2 + v40) = v41 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v39 = 0;
        }
        uint64_t v65 = 40;
        goto LABEL_90;
      case 8u:
        *(_WORD *)(a1 + 100) |= 8u;
        uint64_t v42 = *v3;
        unint64_t v43 = *(void *)(a2 + v42);
        if (v43 <= 0xFFFFFFFFFFFFFFF7 && v43 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v39 = *(void *)(*(void *)(a2 + *v7) + v43);
          *(void *)(a2 + v42) = v43 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v39 = 0;
        }
        uint64_t v65 = 32;
        goto LABEL_90;
      case 9u:
        *(_WORD *)(a1 + 100) |= 2u;
        uint64_t v44 = *v3;
        unint64_t v45 = *(void *)(a2 + v44);
        if (v45 <= 0xFFFFFFFFFFFFFFF7 && v45 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v39 = *(void *)(*(void *)(a2 + *v7) + v45);
          *(void *)(a2 + v44) = v45 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v39 = 0;
        }
        uint64_t v65 = 16;
LABEL_90:
        *(void *)(a1 + v65) = v39;
        goto LABEL_98;
      case 0xAu:
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v48 = 0;
        *(_WORD *)(a1 + 100) |= 0x100u;
        while (2)
        {
          uint64_t v49 = *v3;
          uint64_t v50 = *(void *)(a2 + v49);
          unint64_t v51 = v50 + 1;
          if (v50 == -1 || v51 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v52 = *(unsigned char *)(*(void *)(a2 + *v7) + v50);
            *(void *)(a2 + v49) = v51;
            v48 |= (unint64_t)(v52 & 0x7F) << v46;
            if (v52 < 0)
            {
              v46 += 7;
              BOOL v15 = v47++ >= 9;
              if (v15)
              {
                uint64_t v48 = 0;
                goto LABEL_80;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v48 = 0;
        }
LABEL_80:
        BOOL v63 = v48 != 0;
        uint64_t v64 = 96;
LABEL_81:
        *(unsigned char *)(a1 + v64) = v63;
        goto LABEL_98;
      case 0xBu:
        *(_WORD *)(a1 + 100) |= 0x20u;
        uint64_t v53 = *v3;
        unint64_t v54 = *(void *)(a2 + v53);
        if (v54 <= 0xFFFFFFFFFFFFFFF7 && (unint64_t v55 = v54 + 8, v54 + 8 <= *(void *)(a2 + *v4)))
        {
          uint64_t v56 = *(void *)(*(void *)(a2 + *v7) + v54);
          *(void *)(a2 + v53) = v55;
        }
        else
        {
          uint64_t v56 = 0;
          *(unsigned char *)(a2 + *v5) = 1;
        }
        uint64_t v66 = 48;
        goto LABEL_97;
      case 0xCu:
        *(_WORD *)(a1 + 100) |= 1u;
        uint64_t v57 = *v3;
        unint64_t v58 = *(void *)(a2 + v57);
        if (v58 <= 0xFFFFFFFFFFFFFFF7 && (unint64_t v59 = v58 + 8, v58 + 8 <= *(void *)(a2 + *v4)))
        {
          uint64_t v56 = *(void *)(*(void *)(a2 + *v7) + v58);
          *(void *)(a2 + v57) = v59;
        }
        else
        {
          uint64_t v56 = 0;
          *(unsigned char *)(a2 + *v5) = 1;
        }
        uint64_t v66 = 8;
        goto LABEL_97;
      case 0xDu:
        *(_WORD *)(a1 + 100) |= 0x40u;
        uint64_t v60 = *v3;
        unint64_t v61 = *(void *)(a2 + v60);
        if (v61 <= 0xFFFFFFFFFFFFFFF7 && (unint64_t v62 = v61 + 8, v61 + 8 <= *(void *)(a2 + *v4)))
        {
          uint64_t v56 = *(void *)(*(void *)(a2 + *v7) + v61);
          *(void *)(a2 + v60) = v62;
        }
        else
        {
          uint64_t v56 = 0;
          *(unsigned char *)(a2 + *v5) = 1;
        }
        uint64_t v66 = 56;
LABEL_97:
        *(void *)(a1 + v66) = v56;
        goto LABEL_98;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_98;
    }
  }
}

uint64_t ATXShouldRevokeOldLockScreenPrediction(ATXAction *a1, ATXAction *a2)
{
  id v3 = a1;
  unint64_t v4 = a2;
  if (v3) {
    uint64_t v5 = [(ATXAction *)v3 isEqual:v4] ^ 1;
  }
  else {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_1D11AD9E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ATXShouldPostNewLockScreenPrediction(ATXAction *a1, ATXAction *a2)
{
  id v3 = a1;
  unint64_t v4 = a2;
  uint64_t v5 = v4;
  if (v4) {
    uint64_t v6 = [(ATXAction *)v4 isEqual:v3] ^ 1;
  }
  else {
    uint64_t v6 = 0;
  }

  return v6;
}

void sub_1D11ADA5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t ATXArrayDiff(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  unint64_t v5 = [v3 count];
  unint64_t v6 = [v4 count];
  if (v5 >= v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = v5;
  }
  if (v7 < 1)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    for (uint64_t i = 0; i != v7; ++i)
    {
      unint64_t v10 = [v3 objectAtIndexedSubscript:i];
      uint64_t v11 = [v4 objectAtIndexedSubscript:i];
      int v12 = [v10 isEqualToString:v11];

      v8 += v12 ^ 1u;
    }
  }
  unint64_t v13 = [v3 count];
  unint64_t v14 = [v4 count];
  if (v13 <= v14) {
    unint64_t v15 = v14;
  }
  else {
    unint64_t v15 = v13;
  }
  unint64_t v16 = v8 - v7 + v15;

  return v16;
}

void sub_1D11ADB70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t ATXCacheUpdateDiff(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  unint64_t v5 = objc_opt_new();
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v6 = v3;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v24 objects:v29 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v25;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v25 != v8) {
          objc_enumerationMutation(v6);
        }
        unint64_t v10 = [*(id *)(*((void *)&v24 + 1) + 8 * v9) actionKey];
        [v5 addObject:v10];

        ++v9;
      }
      while (v7 != v9);
      uint64_t v7 = [v6 countByEnumeratingWithState:&v24 objects:v29 count:16];
    }
    while (v7);
  }

  uint64_t v11 = objc_opt_new();
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v12 = v4;
  uint64_t v13 = [v12 countByEnumeratingWithState:&v20 objects:v28 count:16];
  if (v13)
  {
    uint64_t v14 = *(void *)v21;
    do
    {
      uint64_t v15 = 0;
      do
      {
        if (*(void *)v21 != v14) {
          objc_enumerationMutation(v12);
        }
        unint64_t v16 = [*(id *)(*((void *)&v20 + 1) + 8 * v15) predictedItem];
        BOOL v17 = [v16 actionKey];

        if (v17) {
          [v11 addObject:v17];
        }

        ++v15;
      }
      while (v13 != v15);
      uint64_t v13 = [v12 countByEnumeratingWithState:&v20 objects:v28 count:16];
    }
    while (v13);
  }

  unint64_t v18 = ATXArrayDiff(v5, v11);
  return v18;
}

void sub_1D11ADDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

unint64_t ATXCacheUpdateSetDiff(void *a1, void *a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  unint64_t v5 = objc_opt_new();
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v6 = v3;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v25 objects:v30 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v26;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v26 != v8) {
          objc_enumerationMutation(v6);
        }
        unint64_t v10 = [*(id *)(*((void *)&v25 + 1) + 8 * v9) actionKey];
        [v5 addObject:v10];

        ++v9;
      }
      while (v7 != v9);
      uint64_t v7 = [v6 countByEnumeratingWithState:&v25 objects:v30 count:16];
    }
    while (v7);
  }

  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v11 = v4;
  unint64_t v12 = 0;
  uint64_t v13 = [v11 countByEnumeratingWithState:&v21 objects:v29 count:16];
  if (v13)
  {
    uint64_t v14 = *(void *)v22;
    do
    {
      uint64_t v15 = 0;
      do
      {
        if (*(void *)v22 != v14) {
          objc_enumerationMutation(v11);
        }
        unint64_t v16 = [*(id *)(*((void *)&v21 + 1) + 8 * v15) predictedItem];
        BOOL v17 = [v16 actionKey];

        if ([v5 containsObject:v17]) {
          [v5 removeObject:v17];
        }
        else {
          ++v12;
        }

        ++v15;
      }
      while (v13 != v15);
      uint64_t v13 = [v11 countByEnumeratingWithState:&v21 objects:v29 count:16];
    }
    while (v13);
  }

  unint64_t v18 = [v5 count];
  if (v12 <= v18) {
    unint64_t v19 = v18;
  }
  else {
    unint64_t v19 = v12;
  }

  return v19;
}

void sub_1D11AE074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t ATXWriteActionPredictionChunks(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = v3;
  int v6 = open_dprotected_np((const char *)[v5 UTF8String], 1537, 3, 0, 420);
  if (v6 < 0)
  {
    uint64_t v8 = __atxlog_handle_default();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v10 = *__error();
      id v11 = __error();
      unint64_t v12 = strerror(*v11);
      *(_DWORD *)buf = 138412802;
      id v14 = v5;
      __int16 v15 = 1024;
      int v16 = v10;
      __int16 v17 = 2080;
      unint64_t v18 = v12;
      _os_log_error_impl(&dword_1D0FA3000, v8, OS_LOG_TYPE_ERROR, "Error opening %@: [%i] %s", buf, 0x1Cu);
    }

    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = ATXCacheFileWriteChunks();
    close(v6);
  }

  return v7;
}

void sub_1D11AE238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ATXActionExperienceForActions(double a1, double a2, double a3, int a4, double a5, int a6)
{
  double v6 = (double)a4;
  if (a1 > a3)
  {
    BOOL v8 = v6 == a2;
    BOOL v7 = v6 >= a2;
  }
  else
  {
    BOOL v7 = 1;
    BOOL v8 = 0;
  }
  if (v8 || !v7) {
    return 1;
  }
  if ((double)a6 <= a2)
  {
    BOOL v9 = a1 == a5;
    BOOL v10 = a1 < a5;
  }
  else
  {
    BOOL v9 = 1;
    BOOL v10 = 0;
  }
  if (v10 || v9) {
    return 3;
  }
  else {
    return 2;
  }
}

id ATXSortedActionResults(void *a1)
{
  uint64_t v1 = (void *)[a1 mutableCopy];
  [v1 sortWithOptions:16 usingComparator:&__block_literal_global_100];
  return v1;
}

void sub_1D11AE2E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___Z22ATXSortedActionResultsP7NSArrayIP15ATXActionResultE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  double v6 = [v4 scoredAction];
  if (v6)
  {
    BOOL v7 = [v4 scoredAction];
    [v7 score];
    float v9 = v8;
  }
  else
  {
    float v9 = -INFINITY;
  }

  BOOL v10 = [v5 scoredAction];
  if (v10)
  {
    id v11 = [v5 scoredAction];
    [v11 score];
    float v13 = v12;
  }
  else
  {
    float v13 = -INFINITY;
  }

  if (v9 <= v13) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = -1;
  }
  if (v9 < v13) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = v14;
  }

  return v15;
}

void sub_1D11AE3C8(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1D11AE4DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ATXPBAppModeEntityScoreMetricsReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    BOOL v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 16;
          goto LABEL_25;
        case 2u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 8;
          goto LABEL_25;
        case 3u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 24;
          goto LABEL_25;
        case 4u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 32;
LABEL_25:
          uint64_t v19 = *(void **)(a1 + v18);
          *(void *)(a1 + v1_Block_object_dispose(&STACK[0x270], 8) = v17;

          goto LABEL_26;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
LABEL_26:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          break;
      }
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D11B0F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11B20C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11B238C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11B4E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose(&a70, 8);
  _Block_object_dispose((const void *)(v70 - 248), 8);
  _Block_object_dispose((const void *)(v70 - 216), 8);
  _Unwind_Resume(a1);
}

__CFString *dateColumnNameForLaunchType(uint64_t a1)
{
  if (!a1) {
    return @"lastLaunchDate";
  }
  if (a1 == 1) {
    return @"lastSpotlightLaunchDate";
  }
  uint64_t v2 = __atxlog_handle_default();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
    dateColumnNameForLaunchType_cold_1();
  }

  [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8] format:@"launchType must be a valid _ATXLaunchType."];
  return 0;
}

void sub_1D11B7CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1D11B9018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11B9458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11BBCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

void sub_1D11BC02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void nukeDbFiles(void *a1)
{
  id v1 = a1;
  unlink((const char *)[v1 UTF8String]);
  id v2 = [v1 stringByAppendingString:@"-wal"];
  unlink((const char *)[v2 UTF8String]);

  id v3 = [v1 stringByAppendingString:@"-shm"];

  id v4 = v3;
  unlink((const char *)[v4 UTF8String]);
}

void sub_1D11BC51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1D11BCBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_1D11BD384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void sub_1D11BF578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v30 - 128), 8);
  _Block_object_dispose((const void *)(v30 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1D11C006C()
{
}

void sub_1D11C2E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11C33F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1D11C4494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void removeActionDataByBundleIdId(void *a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = __atxlog_handle_deletions();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    uint64_t v10 = a2;
    _os_log_impl(&dword_1D0FA3000, v4, OS_LOG_TYPE_DEFAULT, "Deleting actions with bundleIdId: %lld", buf, 0xCu);
  }

  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = __removeActionDataByBundleIdId_block_invoke;
  v8[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  v8[4] = a2;
  [v3 prepAndRunQuery:@"DELETE FROM alogBundleId WHERE id=?" onPrep:v8 onRow:0 onError:0];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __removeActionDataByBundleIdId_block_invoke_2;
  v7[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  v7[4] = a2;
  [v3 prepAndRunQuery:@"DELETE FROM slotSetKey WHERE alogId IN (SELECT id FROM alog WHERE bundleID=?)" onPrep:v7 onRow:0 onError:0];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = __removeActionDataByBundleIdId_block_invoke_3;
  v6[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  v6[4] = a2;
  [v3 prepAndRunQuery:@"DELETE FROM alog WHERE bundleId=?" onPrep:v6 onRow:0 onError:0];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __removeActionDataByBundleIdId_block_invoke_4;
  v5[3] = &__block_descriptor_40_e29_v16__0___PASSqliteStatement_8l;
  v5[4] = a2;
  [v3 prepAndRunQuery:@"DELETE FROM afeedback WHERE bundleId=?" onPrep:v5 onRow:0 onError:0];
}

void sub_1D11C4890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11C505C(_Unwind_Exception *a1)
{
}

void sub_1D11C5FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&a71, 8);
  _Block_object_dispose(&STACK[0x210], 8);
  _Block_object_dispose(&STACK[0x230], 8);
  _Unwind_Resume(a1);
}

void sub_1D11C7304(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1D11C7C64()
{
}

void sub_1D11C8398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11C8A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11C9354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_1D11C9624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11C987C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11C9E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11CB8D0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1D11CC680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
}

void sub_1D11CCBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
}

void sub_1D11CD518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11CD7FC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1D11CDB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11D0194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11D0BE0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1D11D17D8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t __removeActionDataByBundleIdId_block_invoke(uint64_t a1, void *a2)
{
  return [a2 bindParam:1 toInt64:*(void *)(a1 + 32)];
}

uint64_t __removeActionDataByBundleIdId_block_invoke_2(uint64_t a1, void *a2)
{
  return [a2 bindParam:1 toInt64:*(void *)(a1 + 32)];
}

uint64_t __removeActionDataByBundleIdId_block_invoke_3(uint64_t a1, void *a2)
{
  return [a2 bindParam:1 toInt64:*(void *)(a1 + 32)];
}

uint64_t __removeActionDataByBundleIdId_block_invoke_4(uint64_t a1, void *a2)
{
  return [a2 bindParam:1 toInt64:*(void *)(a1 + 32)];
}

void OUTLINED_FUNCTION_1_10(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void OUTLINED_FUNCTION_7_0(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(&STACK[0x210], 8) = a1;
}

void sub_1D11D9190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXMagicalMomentsPBMMShownTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    BOOL v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          unint64_t v12 = *(void *)(a2 + v11);
          if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          BOOL v14 = v9++ >= 9;
          if (v14)
          {
            unint64_t v10 = 0;
            int v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (v15) {
          BOOL v16 = 1;
        }
        else {
          BOOL v16 = (v10 & 7) == 4;
        }
        if (!v16)
        {
          switch((v10 >> 3))
          {
            case 1u:
              char v17 = 0;
              unsigned int v18 = 0;
              uint64_t v19 = 0;
              *(unsigned char *)(a1 + 40) |= 1u;
              break;
            case 2u:
              uint64_t v24 = PBReaderReadString();
              uint64_t v25 = 24;
              goto LABEL_31;
            case 3u:
              uint64_t v24 = PBReaderReadString();
              uint64_t v25 = 8;
              goto LABEL_31;
            case 4u:
              uint64_t v24 = PBReaderReadString();
              uint64_t v25 = 32;
LABEL_31:
              long long v26 = *(void **)(a1 + v25);
              *(void *)(a1 + v25) = v24;

              goto LABEL_36;
            default:
              uint64_t result = PBReaderSkipValueWithTag();
              if (!result) {
                return result;
              }
LABEL_36:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_33;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_35;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_35:
          *(_DWORD *)(a1 + 16) = v19;
          goto LABEL_36;
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D11DAFE0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1D11DCD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 168), 8);
  _Block_object_dispose((const void *)(v28 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1D11DD820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D11DDC8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D11DE768(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1D11DEC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL ATXPBBlendingSessionClientModelUpdateReadFrom(char *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    BOOL v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 16;
LABEL_26:
        uint64_t v20 = *(ATXPBBlendingSessionClientModelSuggestion **)&a1[v19];
        *(void *)&a1[v19] = v18;
LABEL_27:

        goto LABEL_29;
      }
      if (v17 == 1)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 8;
        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_29:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v20 = objc_alloc_init(ATXPBBlendingSessionClientModelSuggestion);
    [a1 addSuggestion:v20];
    if (!PBReaderPlaceMark()
      || (ATXPBBlendingSessionClientModelSuggestionReadFrom((uint64_t)v20, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t ATXTimelineRelevancePBTimelineRelevanceContainerReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  BOOL v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 80;
        goto LABEL_65;
      case 2u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 96;
        goto LABEL_65;
      case 3u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 32;
        goto LABEL_65;
      case 4u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        while (2)
        {
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
            *(void *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              BOOL v14 = v21++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_72;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v22) = 0;
        }
LABEL_72:
        *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x210], 8) = v22;
        goto LABEL_86;
      case 5u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        *(unsigned char *)(a1 + 108) |= 1u;
        while (2)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              BOOL v14 = v27++ >= 9;
              if (v14)
              {
                uint64_t v28 = 0;
                goto LABEL_76;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v28 = 0;
        }
LABEL_76:
        uint64_t v45 = 8;
        goto LABEL_85;
      case 6u:
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v34 = 0;
        *(unsigned char *)(a1 + 108) |= 4u;
        while (2)
        {
          uint64_t v35 = *v3;
          unint64_t v36 = *(void *)(a2 + v35);
          if (v36 == -1 || v36 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v37 = *(unsigned char *)(*(void *)(a2 + *v7) + v36);
            *(void *)(a2 + v35) = v36 + 1;
            v34 |= (unint64_t)(v37 & 0x7F) << v32;
            if (v37 < 0)
            {
              v32 += 7;
              BOOL v14 = v33++ >= 9;
              if (v14)
              {
                uint64_t v34 = 0;
                goto LABEL_80;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v34 = 0;
        }
LABEL_80:
        *(unsigned char *)(a1 + 104) = v34 != 0;
        goto LABEL_86;
      case 7u:
        unint64_t v38 = objc_alloc_init(ATXTimelineRelevancePBTimelineRelevanceScoreEntry);
        [(id)a1 addTimelineRelevanceScore:v38];
        if (!PBReaderPlaceMark()
          || (ATXTimelineRelevancePBTimelineRelevanceScoreEntryReadFrom((uint64_t)v38, a2) & 1) == 0)
        {
          goto LABEL_88;
        }
        goto LABEL_68;
      case 8u:
        unint64_t v38 = objc_alloc_init(ATXTimelineRelevancePBTimelineRelevanceSuggestion);
        [(id)a1 addTimelineRelevanceSuggestion:v38];
        if (!PBReaderPlaceMark() || !ATXTimelineRelevancePBTimelineRelevanceSuggestionReadFrom(v38, a2)) {
          goto LABEL_88;
        }
        goto LABEL_68;
      case 9u:
        unint64_t v38 = objc_alloc_init(ATXTimelineRelevancePBTimelineRelevanceRotation);
        [(id)a1 addRotation:v38];
        if (!PBReaderPlaceMark()
          || (ATXTimelineRelevancePBTimelineRelevanceRotationReadFrom((uint64_t)v38, a2) & 1) == 0)
        {
          goto LABEL_88;
        }
        goto LABEL_68;
      case 0xAu:
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v28 = 0;
        *(unsigned char *)(a1 + 108) |= 2u;
        while (2)
        {
          uint64_t v41 = *v3;
          unint64_t v42 = *(void *)(a2 + v41);
          if (v42 == -1 || v42 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v42);
            *(void *)(a2 + v41) = v42 + 1;
            v28 |= (unint64_t)(v43 & 0x7F) << v39;
            if (v43 < 0)
            {
              v39 += 7;
              BOOL v14 = v40++ >= 9;
              if (v14)
              {
                uint64_t v28 = 0;
                goto LABEL_84;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v28 = 0;
        }
LABEL_84:
        uint64_t v45 = 16;
LABEL_85:
        *(void *)(a1 + v45) = v28;
        goto LABEL_86;
      case 0xBu:
        unint64_t v38 = objc_alloc_init(ATXTimelineRelevancePBTimelineRelevanceStackConfigSummary);
        [(id)a1 addStackConfigSummary:v38];
        if (!PBReaderPlaceMark()
          || (ATXTimelineRelevancePBTimelineRelevanceStackConfigSummaryReadFrom((uint64_t)v38, a2) & 1) == 0)
        {
          goto LABEL_88;
        }
        goto LABEL_68;
      case 0xCu:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 24;
LABEL_65:
        uint64_t v44 = *(void **)(a1 + v18);
        *(void *)(a1 + v1_Block_object_dispose(&STACK[0x210], 8) = v17;

        goto LABEL_86;
      case 0xDu:
        unint64_t v38 = objc_alloc_init(ATXTimelineRelevancePBFeatureVector);
        objc_storeStrong((id *)(a1 + 40), v38);
        if (PBReaderPlaceMark() && ATXTimelineRelevancePBFeatureVectorReadFrom((uint64_t)v38, a2))
        {
LABEL_68:
          PBReaderRecallMark();

LABEL_86:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_88:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_86;
    }
  }
}

void sub_1D11E7E94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D11E8398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1D11E9574(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

void sub_1D11EAC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11EAE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11EAFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11EC198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D11EC348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id personalityStringFromComplication(void *a1)
{
  uint64_t v1 = (objc_class *)NSString;
  id v2 = a1;
  id v3 = [v1 alloc];
  uint64_t v4 = [v2 extensionBundleIdentifier];
  id v5 = [v2 kind];

  double v6 = (void *)[v3 initWithFormat:@"%@-%@", v4, v5];
  return v6;
}

void sub_1D11EF180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D11EF2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11EF424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11EF600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11EF994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11EFB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11EFD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11F0064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11F0524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11F0A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11F2274(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_2_6(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x1Cu);
}

void sub_1D11F47C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11FA09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D11FA848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
}

void sub_1D11FAFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1D11FBB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D1200BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getPRSServiceClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)getPRSServiceClass_softClass;
  uint64_t v7 = getPRSServiceClass_softClass;
  if (!getPRSServiceClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getPRSServiceClass_block_invoke;
    v3[3] = &unk_1E68AB438;
    v3[4] = &v4;
    __getPRSServiceClass_block_invoke((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1D1200CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getPRSServiceClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!PosterBoardServicesLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __PosterBoardServicesLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E68B2220;
    uint64_t v5 = 0;
    PosterBoardServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!PosterBoardServicesLibraryCore_frameworkLibrary) {
    __getPRSServiceClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("PRSService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getPRSServiceClass_block_invoke_cold_2();
  }
  getPRSServiceClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __PosterBoardServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  PosterBoardServicesLibraryCore_frameworkLibrary = result;
  return result;
}

void sub_1D12029E8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1D1203AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1203E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1204D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D1205B00(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1D1205E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location,char a30)
{
  objc_destroyWeak(v30);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v31 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1D1206E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 144), 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1D120A774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

void sub_1D120B3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getSGSuggestionsServiceClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!CoreSuggestionsLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __CoreSuggestionsLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E68B2488;
    uint64_t v5 = 0;
    CoreSuggestionsLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!CoreSuggestionsLibraryCore_frameworkLibrary) {
    __getSGSuggestionsServiceClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("SGSuggestionsService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getSGSuggestionsServiceClass_block_invoke_cold_2();
  }
  getSGSuggestionsServiceClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __CoreSuggestionsLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreSuggestionsLibraryCore_frameworkLibrary = result;
  return result;
}

void OUTLINED_FUNCTION_4_7(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

uint64_t ATXMPBInstalledAppClipSessionEngagementTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 32) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_39;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_41;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_41:
          uint64_t v32 = 24;
          goto LABEL_46;
        case 2u:
          uint64_t v24 = PBReaderReadString();
          uint64_t v25 = 16;
          goto LABEL_37;
        case 3u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 32) |= 2u;
          break;
        case 4u:
          uint64_t v24 = PBReaderReadString();
          uint64_t v25 = 8;
LABEL_37:
          uint64_t v31 = *(void **)(a1 + v25);
          *(void *)(a1 + v25) = v24;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v28 = *v3;
        unint64_t v29 = *(void *)(a2 + v28);
        if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
        *(void *)(a2 + v2_Block_object_dispose(&STACK[0x210], 8) = v29 + 1;
        v19 |= (unint64_t)(v30 & 0x7F) << v26;
        if ((v30 & 0x80) == 0) {
          goto LABEL_43;
        }
        v26 += 7;
        BOOL v14 = v27++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_45;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_43:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v19) = 0;
      }
LABEL_45:
      uint64_t v32 = 28;
LABEL_46:
      *(_DWORD *)(a1 + v32) = v19;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D120CE70(_Unwind_Exception *a1)
{
  MEMORY[0x1D25F6530](v2, 0x1060C40D5FD4D19);

  _Unwind_Resume(a1);
}

void sub_1D120CF00(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1D120D02C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1D120D380(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D120D408(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

float entropy(uint64_t ***a1, uint64_t a2, int a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  float v3 = 0.0;
  if (a2 != 0xFFFF && a3 != 0xFFFF) {
    return v3;
  }
  int v6 = a2;
  size_t v8 = (**a1)[1] - ***a1;
  unint64_t v9 = v8 | 0xF;
  memptr = 0;
  uint64_t v44 = 0;
  if ((v8 | 0xF) > 0x800)
  {
    uint64_t v10 = malloc_type_posix_memalign(&memptr, 0x10uLL, v8, 0xB95B6151uLL);
    LOBYTE(v44) = 0;
    if (v10)
    {
      id v40 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C4A0] reason:@"malloc failed" userInfo:0];
      objc_exception_throw(v40);
    }
    unint64_t v12 = (float *)memptr;
  }
  else
  {
    MEMORY[0x1F4188790](a1, a2);
    bzero((char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v8 | 0xF);
    unint64_t v12 = (float *)(((unint64_t)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0) + 15) & 0xFFFFFFFFFFFFFFF0);
  }
  size_t v13 = v8 | 3;
  memptr = 0;
  uint64_t v44 = 0;
  if ((v8 | 3) > 0x800)
  {
    int v39 = malloc_type_posix_memalign(&memptr, 8uLL, v8, 0x263F45D7uLL);
    LOBYTE(v44) = 0;
    if (v39)
    {
      id v41 = [MEMORY[0x1E4F1CA00] exceptionWithName:*MEMORY[0x1E4F1C4A0] reason:@"malloc failed" userInfo:0];
      objc_exception_throw(v41);
    }
    BOOL v14 = (char *)memptr;
  }
  else
  {
    MEMORY[0x1F4188790](v10, v11);
    BOOL v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v14, v13);
  }
  if ((a3 & v6) == 0xFFFF)
  {
    int v15 = **a1;
    uint64_t v16 = *v15;
    if (v15[1] != *v15)
    {
      unint64_t v17 = 0;
      float32x4_t v18 = 0uLL;
      float32x4_t v19 = 0uLL;
      do
      {
        uint64_t v20 = (float32x4_t *)(v16 + 32 * v17);
        float32x4_t v21 = *v20;
        float32x4_t v22 = v20[1];
        float32x4_t v19 = vaddq_f32(v19, v22);
        float32x4_t v18 = vaddq_f32(v18, *v20);
        uint64_t v23 = (float32x4_t *)&v12[8 * v17];
        *uint64_t v23 = v21;
        v23[1] = v22;
        ++v17;
        int v15 = **a1;
        uint64_t v16 = *v15;
      }
      while (v17 < (v15[1] - *v15) >> 5);
    }
    int v27 = *((_DWORD *)v15 + 6);
LABEL_29:
    if (v27 < 1)
    {
      float v3 = 0.0;
    }
    else
    {
      cblas_sscal_NEWLAPACK();
      LODWORD(memptr) = (v27 + 7) & 0xFFFFFFF8;
      vvlog2f((float *)v14, v12, (const int *)&memptr);
      cblas_sdot_NEWLAPACK();
      float v3 = -v37;
    }
    goto LABEL_32;
  }
  if (v6 == 0xFFFF)
  {
    uint64_t v24 = **a1;
    unint64_t v25 = v24[3];
    if (v25)
    {
      uint64_t v26 = 0;
      int v27 = 0;
      uint64_t v28 = v24[4];
      double v29 = 0.0;
      do
      {
        if (*(unsigned __int16 *)(v28 + 4 * v26) == a3)
        {
          float v30 = *(float *)(*v24 + 4 * v26);
          double v29 = v29 + v30;
          v12[v27++] = v30;
        }
        ++v26;
      }
      while (v25 > v26);
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v31 = **a1;
    unint64_t v32 = v31[3];
    if (v32)
    {
      uint64_t v33 = 0;
      int v27 = 0;
      uint64_t v34 = v31[4];
      double v35 = 0.0;
      do
      {
        if (*(unsigned __int16 *)(v34 + 4 * v33 + 2) == v6)
        {
          float v36 = *(float *)(*v31 + 4 * v33);
          double v35 = v35 + v36;
          v12[v27++] = v36;
        }
        ++v33;
      }
      while (v32 > v33);
      goto LABEL_29;
    }
  }
LABEL_32:
  if (v13 >= 0x801) {
    free(v14);
  }
  if (v9 >= 0x801) {
    free(v12);
  }
  if (fabsf(v3) == INFINITY) {
    return 0.0;
  }
  return v3;
}

void sub_1D120D8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D120DA70(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1D120DBE4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void _ZN12_GLOBAL__N_110SimdVectorIDv8_ffE6resizeEm(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = (a2 + 7) >> 3;
  int v6 = *(char **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = (v7 - *(void *)a1) >> 5;
  if (v5 <= v8)
  {
    if (v5 >= v8) {
      goto LABEL_21;
    }
    float32x4_t v21 = &v6[32 * v5];
    goto LABEL_15;
  }
  unint64_t v9 = v5 - v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v5 - v8 <= (v10 - v7) >> 5)
  {
    bzero(*(void **)(a1 + 8), 32 * v9);
    float32x4_t v21 = (char *)(v7 + 32 * v9);
LABEL_15:
    *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = v21;
    goto LABEL_21;
  }
  if ((a2 + 7) >> 62) {
    std::vector<ATXPredictionItem>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v10 - (void)v6;
  if (v11 >> 4 > v5) {
    unint64_t v5 = v11 >> 4;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
    uint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v12 = v5;
  }
  _ZNSt3__114__split_bufferIDv8_fRN12_GLOBAL__N_120SimdAlignedAllocatorIS1_EEEC1EmmS5_(&v32, v12, v8, a1 + 16);
  size_t v13 = (char *)v34[0];
  bzero(v34[0], 32 * v9);
  BOOL v14 = &v13[32 * v9];
  v34[0] = v14;
  uint64_t v16 = *(char **)a1;
  int v15 = *(char **)(a1 + 8);
  unint64_t v17 = v33;
  if (v15 == *(char **)a1)
  {
    uint64_t v20 = *(char **)(a1 + 8);
  }
  else
  {
    do
    {
      long long v18 = *((_OWORD *)v15 - 2);
      long long v19 = *((_OWORD *)v15 - 1);
      v15 -= 32;
      *((_OWORD *)v17 - 2) = v18;
      *((_OWORD *)v17 - 1) = v19;
      v17 -= 32;
    }
    while (v15 != v16);
    uint64_t v20 = *(char **)a1;
    int v15 = *(char **)(a1 + 8);
    BOOL v14 = (char *)v34[0];
  }
  *(void *)a1 = v17;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = v14;
  float32x4_t v22 = *(void **)(a1 + 16);
  *(void **)(a1 + 16) = v34[1];
  v34[0] = v15;
  v34[1] = v22;
  unint64_t v32 = v20;
  uint64_t v33 = v20;
  if (v15 != v20) {
    v34[0] = &v15[(v20 - v15 + 31) & 0xFFFFFFFFFFFFFFE0];
  }
  if (v20) {
    free(v20);
  }
LABEL_21:
  *(void *)(a1 + 24) = a2;
  if (v4 > a2)
  {
    unint64_t v23 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5;
    if (v23 < (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5)
    {
      _ZNSt3__114__split_bufferIDv8_fRN12_GLOBAL__N_120SimdAlignedAllocatorIS1_EEEC1EmmS5_(&v32, v23, (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5, a1 + 16);
      unint64_t v25 = *(char **)a1;
      uint64_t v24 = *(char **)(a1 + 8);
      uint64_t v26 = v33;
      if (v24 == *(char **)a1)
      {
        double v29 = *(char **)(a1 + 8);
      }
      else
      {
        do
        {
          long long v27 = *((_OWORD *)v24 - 2);
          long long v28 = *((_OWORD *)v24 - 1);
          v24 -= 32;
          *((_OWORD *)v26 - 2) = v27;
          *((_OWORD *)v26 - 1) = v28;
          v26 -= 32;
        }
        while (v24 != v25);
        double v29 = *(char **)a1;
        uint64_t v24 = *(char **)(a1 + 8);
      }
      *(void *)a1 = v26;
      float v30 = *(void **)(a1 + 16);
      *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = *(_OWORD *)v34;
      v34[0] = v24;
      v34[1] = v30;
      unint64_t v32 = v29;
      uint64_t v33 = v29;
      if (v24 != v29) {
        v34[0] = &v24[(v29 - v24 + 31) & 0xFFFFFFFFFFFFFFE0];
      }
      if (v29) {
        free(v29);
      }
    }
    uint64_t v31 = *(void *)(a1 + 24);
    if (v31) {
      bzero((void *)(*(void *)a1 + 4 * v31), *(void *)(a1 + 8) - (*(void *)a1 + 4 * v31));
    }
  }
}

void sub_1D120DE08(void *a1)
{
}

void _ZN12_GLOBAL__N_110SimdVectorIDv8_ijE6resizeEm(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = (a2 + 7) >> 3;
  int v6 = *(char **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = (v7 - *(void *)a1) >> 5;
  if (v5 <= v8)
  {
    if (v5 >= v8) {
      goto LABEL_21;
    }
    float32x4_t v21 = &v6[32 * v5];
    goto LABEL_15;
  }
  unint64_t v9 = v5 - v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v5 - v8 <= (v10 - v7) >> 5)
  {
    bzero(*(void **)(a1 + 8), 32 * v9);
    float32x4_t v21 = (char *)(v7 + 32 * v9);
LABEL_15:
    *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = v21;
    goto LABEL_21;
  }
  if ((a2 + 7) >> 62) {
    std::vector<ATXPredictionItem>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v10 - (void)v6;
  if (v11 >> 4 > v5) {
    unint64_t v5 = v11 >> 4;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
    uint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v12 = v5;
  }
  _ZNSt3__114__split_bufferIDv8_fRN12_GLOBAL__N_120SimdAlignedAllocatorIS1_EEEC1EmmS5_(&v32, v12, v8, a1 + 16);
  size_t v13 = (char *)v34[0];
  bzero(v34[0], 32 * v9);
  BOOL v14 = &v13[32 * v9];
  v34[0] = v14;
  uint64_t v16 = *(char **)a1;
  int v15 = *(char **)(a1 + 8);
  unint64_t v17 = v33;
  if (v15 == *(char **)a1)
  {
    uint64_t v20 = *(char **)(a1 + 8);
  }
  else
  {
    do
    {
      long long v18 = *((_OWORD *)v15 - 2);
      long long v19 = *((_OWORD *)v15 - 1);
      v15 -= 32;
      *((_OWORD *)v17 - 2) = v18;
      *((_OWORD *)v17 - 1) = v19;
      v17 -= 32;
    }
    while (v15 != v16);
    uint64_t v20 = *(char **)a1;
    int v15 = *(char **)(a1 + 8);
    BOOL v14 = (char *)v34[0];
  }
  *(void *)a1 = v17;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = v14;
  float32x4_t v22 = *(void **)(a1 + 16);
  *(void **)(a1 + 16) = v34[1];
  v34[0] = v15;
  v34[1] = v22;
  unint64_t v32 = v20;
  uint64_t v33 = v20;
  if (v15 != v20) {
    v34[0] = &v15[(v20 - v15 + 31) & 0xFFFFFFFFFFFFFFE0];
  }
  if (v20) {
    free(v20);
  }
LABEL_21:
  *(void *)(a1 + 24) = a2;
  if (v4 > a2)
  {
    unint64_t v23 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5;
    if (v23 < (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5)
    {
      _ZNSt3__114__split_bufferIDv8_fRN12_GLOBAL__N_120SimdAlignedAllocatorIS1_EEEC1EmmS5_(&v32, v23, (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5, a1 + 16);
      unint64_t v25 = *(char **)a1;
      uint64_t v24 = *(char **)(a1 + 8);
      uint64_t v26 = v33;
      if (v24 == *(char **)a1)
      {
        double v29 = *(char **)(a1 + 8);
      }
      else
      {
        do
        {
          long long v27 = *((_OWORD *)v24 - 2);
          long long v28 = *((_OWORD *)v24 - 1);
          v24 -= 32;
          *((_OWORD *)v26 - 2) = v27;
          *((_OWORD *)v26 - 1) = v28;
          v26 -= 32;
        }
        while (v24 != v25);
        double v29 = *(char **)a1;
        uint64_t v24 = *(char **)(a1 + 8);
      }
      *(void *)a1 = v26;
      float v30 = *(void **)(a1 + 16);
      *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = *(_OWORD *)v34;
      v34[0] = v24;
      v34[1] = v30;
      unint64_t v32 = v29;
      uint64_t v33 = v29;
      if (v24 != v29) {
        v34[0] = &v24[(v29 - v24 + 31) & 0xFFFFFFFFFFFFFFE0];
      }
      if (v29) {
        free(v29);
      }
    }
    uint64_t v31 = *(void *)(a1 + 24);
    if (v31) {
      bzero((void *)(*(void *)a1 + 4 * v31), *(void *)(a1 + 8) - (*(void *)a1 + 4 * v31));
    }
  }
}

void sub_1D120E024(void *a1)
{
}

void sub_1D120E1C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D120E29C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D120E53C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v3);
  _Unwind_Resume(a1);
}

void sub_1D120E6A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D120E7F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D120E9EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D120EB78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D120EC54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D120F038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(&location);
  pthread_mutex_unlock(v22);

  _Unwind_Resume(a1);
}

void sub_1D120F1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D120F3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  pthread_mutex_unlock(v8);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1D120F504(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1D120F704(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D120F7C8(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1D120F8D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D120F988(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1D120FAAC(_Unwind_Exception *a1)
{
  unint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1D120FBA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  pthread_mutex_unlock(v10);
  _Unwind_Resume(a1);
}

void sub_1D120FCA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D120FD1C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1D120FE68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D120FF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D12100D0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v3 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1D1210160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D1210228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1210338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

pthread_mutex_t *proactive::pas::detail::RecursiveMutex::RecursiveMutex(pthread_mutex_t *this)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  pthread_mutexattr_init(&v3);
  pthread_mutexattr_settype(&v3, 2);
  pthread_mutex_init(this, &v3);
  pthread_mutexattr_destroy(&v3);
  return this;
}

uint64_t *std::unique_ptr<proactive::pas::SynchronizedObject<anonymous namespace'::HDGuardedData,proactive::pas::detail::RecursiveMutex>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    pthread_mutex_destroy((pthread_mutex_t *)(v2 + 8));
    JUMPOUT(0x1D25F6530);
  }
  return result;
}

void *_ZNSt3__114__split_bufferIDv8_fRN12_GLOBAL__N_120SimdAlignedAllocatorIS1_EEEC1EmmS5_(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    memptr = 0;
    if (malloc_type_posix_memalign(&memptr, 0x40uLL, 32 * a2, 0x1000040E0EAB150uLL))
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      uint64_t v11 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v11, MEMORY[0x1E4FBA360], MEMORY[0x1E4FBA2C0]);
    }
    uint64_t v7 = (char *)memptr;
  }
  else
  {
    uint64_t v7 = 0;
  }
  unint64_t v8 = &v7[32 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[32 * a2];
  return a1;
}

uint64_t *std::unique_ptr<proactive::pas::SynchronizedObject<anonymous namespace'::HTGuardedData,proactive::pas::detail::RecursiveMutex>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    pthread_mutex_destroy((pthread_mutex_t *)(v2 + 8));
    JUMPOUT(0x1D25F6530);
  }
  return result;
}

void sub_1D12110AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id ATXSortAndLimitPredictionsWhileKeepingPredictionItems(void *a1, void *a2, int64x2_t *a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  id v45 = a1;
  id v5 = a2;
  id v49 = (id)objc_opt_new();
  int v6 = objc_opt_new();
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  obuint64_t j = +[ATXActionPredictionsHelpers sortedPredictions:v45];
  uint64_t v7 = [obj countByEnumeratingWithState:&v52 objects:v60 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v53;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v53 != v8) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(void **)(*((void *)&v52 + 1) + 8 * v9);
        if (!v5) {
          goto LABEL_14;
        }
        uint64_t v11 = [*(id *)(*((void *)&v52 + 1) + 8 * v9) actionKey];
        uint64_t v12 = [v6 objectForKeyedSubscript:v11];
        unint64_t v13 = [v12 unsignedIntegerValue];
        if (v13 < [v5 unsignedIntegerValue])
        {

LABEL_14:
          [v49 addObject:v10];
          long long v18 = NSNumber;
          long long v19 = [v10 actionKey];
          uint64_t v20 = [v6 objectForKeyedSubscript:v19];
          float32x4_t v21 = objc_msgSend(v18, "numberWithInt:", objc_msgSend(v20, "intValue") + 1);
          float32x4_t v22 = [v10 actionKey];
          [v6 setObject:v21 forKeyedSubscript:v22];

          goto LABEL_15;
        }
        BOOL v14 = +[ATXActionPredictions isActionPredictionContainerEligibleForLimit:v10];

        if (!v14) {
          goto LABEL_14;
        }
        if (a3)
        {
          uint64_t v16 = a3->i64[0];
          uint64_t v15 = a3->i64[1];
          unint64_t v17 = +[_ATXGlobals sharedInstance];
          LODWORD(v15) = 0xDAB7EC1DD3431B57 * ((v15 - v16) >> 5) < (int)[v17 numberOfActionsToKeepForLogging];

          if (v15)
          {
            if (v10) {
              [v10 predictionItem];
            }
            else {
              bzero(&v50, 0xCE0uLL);
            }
            uint64_t v24 = (void *)a3->i64[1];
            unint64_t v23 = a3[1].u64[0];
            if ((unint64_t)v24 >= v23)
            {
              unint64_t v27 = 0xDAB7EC1DD3431B57 * (((uint64_t)v24 - a3->i64[0]) >> 5);
              unint64_t v28 = v27 + 1;
              if (v27 + 1 > 0x13E22CBCE4A902) {
                std::vector<ATXPredictionItem>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v29 = 0xDAB7EC1DD3431B57 * ((uint64_t)(v23 - a3->i64[0]) >> 5);
              if (2 * v29 > v28) {
                unint64_t v28 = 2 * v29;
              }
              if (v29 >= 0x9F1165E725481) {
                unint64_t v30 = 0x13E22CBCE4A902;
              }
              else {
                unint64_t v30 = v28;
              }
              unint64_t v59 = a3 + 1;
              if (v30)
              {
                uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ATXPredictionItem>>((uint64_t)a3[1].i64, v30);
                uint64_t v47 = v32;
              }
              else
              {
                uint64_t v31 = 0;
                uint64_t v47 = 0;
              }
              uint64_t v33 = &v31[3296 * v27];
              id v34 = v50;
              id v50 = 0;
              *(void *)uint64_t v33 = v34;
              memcpy(v33 + 8, v51, 0xCD2uLL);
              uint64_t v36 = a3->i64[0];
              unint64_t v35 = a3->u64[1];
              if (v35 == a3->i64[0])
              {
                int64x2_t v41 = vdupq_n_s64(v35);
                float v37 = &v31[3296 * v27];
              }
              else
              {
                char v46 = v31;
                float v37 = &v31[3296 * v27];
                do
                {
                  unint64_t v38 = v35 - 3296;
                  uint64_t v39 = *(void *)(v35 - 3296);
                  id v40 = v37 - 3288;
                  v37 -= 3296;
                  *(void *)(v35 - 3296) = 0;
                  *(void *)float v37 = v39;
                  memcpy(v40, (const void *)(v35 - 3288), 0xCD2uLL);
                  unint64_t v35 = v38;
                }
                while (v38 != v36);
                int64x2_t v41 = *a3;
                uint64_t v31 = v46;
              }
              uint64_t v26 = v33 + 3296;
              a3->i64[0] = (uint64_t)v37;
              a3->i64[1] = (uint64_t)v26;
              int64x2_t v57 = v41;
              uint64_t v42 = a3[1].i64[0];
              a3[1].i64[0] = (uint64_t)&v31[3296 * v47];
              uint64_t v58 = v42;
              uint64_t v56 = v41.i64[0];
              std::__split_buffer<ATXPredictionItem>::~__split_buffer((uint64_t)&v56);
            }
            else
            {
              id v25 = v50;
              id v50 = 0;
              *uint64_t v24 = v25;
              memcpy(v24 + 1, v51, 0xCD2uLL);
              uint64_t v26 = v24 + 412;
            }
            a3->i64[1] = (uint64_t)v26;
          }
        }
LABEL_15:
        ++v9;
      }
      while (v9 != v7);
      uint64_t v43 = [obj countByEnumeratingWithState:&v52 objects:v60 count:16];
      uint64_t v7 = v43;
    }
    while (v43);
  }

  return v49;
}

void sub_1D1212D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1D1212EC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1212FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100](&a14);

  _Unwind_Resume(a1);
}

void sub_1D12131C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12133C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1213554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1213F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::~__hash_table((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void sub_1D121499C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  _Unwind_Resume(a1);
}

void sub_1D1214CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1D1214FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1215148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12153B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1D12156AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1D12157E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1215864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1215B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1D1215CD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1215EC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12160B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1216340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1D1216488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1218BE8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1D1218EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 144), 8);
  _Block_object_dispose((const void *)(v15 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1D1219174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1219D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_2_7()
{
  return objc_opt_class();
}

void sub_1D12215B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D1221D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D122239C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1D122272C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1D1222FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D1223ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1224070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1224314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1D1224EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1224F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D12252C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D12269B8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1D12281E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXTimelineRelevancePBTimelineRelevanceRotationReadFrom(uint64_t a1, uint64_t a2)
{
  pthread_mutexattr_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 40) |= 2u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_64;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_66;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_64:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_66:
          uint64_t v51 = 16;
          goto LABEL_83;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 0x10u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_70:
          uint64_t v52 = 32;
          goto LABEL_88;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v32 = 0;
          *(unsigned char *)(a1 + 40) |= 0x20u;
          while (2)
          {
            uint64_t v33 = *v3;
            unint64_t v34 = *(void *)(a2 + v33);
            if (v34 == -1 || v34 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
              *(void *)(a2 + v33) = v34 + 1;
              v32 |= (unint64_t)(v35 & 0x7F) << v30;
              if (v35 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  uint64_t v32 = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v32 = 0;
          }
LABEL_74:
          *(unsigned char *)(a1 + 36) = v32 != 0;
          continue;
        case 4u:
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 4u;
          while (2)
          {
            uint64_t v38 = *v3;
            unint64_t v39 = *(void *)(a2 + v38);
            if (v39 == -1 || v39 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v40 = *(unsigned char *)(*(void *)(a2 + *v7) + v39);
              *(void *)(a2 + v3_Block_object_dispose(&STACK[0x210], 8) = v39 + 1;
              v26 |= (unint64_t)(v40 & 0x7F) << v36;
              if (v40 < 0)
              {
                v36 += 7;
                BOOL v14 = v37++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_78:
          uint64_t v52 = 24;
          goto LABEL_88;
        case 5u:
          char v41 = 0;
          unsigned int v42 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 40) |= 1u;
          while (2)
          {
            uint64_t v43 = *v3;
            unint64_t v44 = *(void *)(a2 + v43);
            if (v44 == -1 || v44 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v45 = *(unsigned char *)(*(void *)(a2 + *v7) + v44);
              *(void *)(a2 + v43) = v44 + 1;
              v19 |= (unint64_t)(v45 & 0x7F) << v41;
              if (v45 < 0)
              {
                v41 += 7;
                BOOL v14 = v42++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_82:
          uint64_t v51 = 8;
LABEL_83:
          *(void *)(a1 + v51) = v19;
          continue;
        case 6u:
          char v46 = 0;
          unsigned int v47 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 8u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v48 = *v3;
        unint64_t v49 = *(void *)(a2 + v48);
        if (v49 == -1 || v49 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v50 = *(unsigned char *)(*(void *)(a2 + *v7) + v49);
        *(void *)(a2 + v4_Block_object_dispose(&STACK[0x210], 8) = v49 + 1;
        v26 |= (unint64_t)(v50 & 0x7F) << v46;
        if ((v50 & 0x80) == 0) {
          goto LABEL_85;
        }
        v46 += 7;
        BOOL v14 = v47++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_87;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_85:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_87:
      uint64_t v52 = 28;
LABEL_88:
      *(_DWORD *)(a1 + v52) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D122A88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_1D122ABB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D122C3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

ATXEvent *microLocationEventFromDK(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    pthread_mutexattr_t v3 = [v1 metadata];
    uint64_t v4 = [MEMORY[0x1E4F5B588] probabilityVector];
    id v5 = [v3 objectForKeyedSubscript:v4];

    if (v5)
    {
      int v6 = [v2 startDate];
      uint64_t v7 = [v6 dateByAddingTimeInterval:-300.0];

      char v8 = [v2 startDate];
      unsigned int v9 = [v8 dateByAddingTimeInterval:300.0];

      unint64_t v10 = [[ATXEvent alloc] initWithEvent:v5 startDate:v7 endDate:v9];
    }
    else
    {
      unint64_t v10 = 0;
    }
  }
  else
  {
    unint64_t v10 = 0;
  }

  return v10;
}

void sub_1D122CAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D122D29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D122D9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D122F740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D122FE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1230BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1230E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1230FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXCandidateRelevanceModelPBModelMetricsReadFrom(uint64_t a1, uint64_t a2)
{
  pthread_mutexattr_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 24;
          goto LABEL_116;
        case 2u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 8;
          goto LABEL_116;
        case 3u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 32;
          goto LABEL_116;
        case 4u:
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          *(_WORD *)(a1 + 116) |= 0x8000u;
          while (2)
          {
            uint64_t v24 = *v3;
            uint64_t v25 = *(void *)(a2 + v24);
            unint64_t v26 = v25 + 1;
            if (v25 == -1 || v26 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
              *(void *)(a2 + v24) = v26;
              v23 |= (unint64_t)(v27 & 0x7F) << v21;
              if (v27 < 0)
              {
                v21 += 7;
                BOOL v15 = v22++ >= 9;
                if (v15)
                {
                  uint64_t v23 = 0;
                  goto LABEL_127;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v23 = 0;
          }
LABEL_127:
          BOOL v107 = v23 != 0;
          uint64_t v108 = 114;
          goto LABEL_136;
        case 5u:
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v30 = 0;
          *(_WORD *)(a1 + 116) |= 0x4000u;
          while (2)
          {
            uint64_t v31 = *v3;
            uint64_t v32 = *(void *)(a2 + v31);
            unint64_t v33 = v32 + 1;
            if (v32 == -1 || v33 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
              *(void *)(a2 + v31) = v33;
              v30 |= (unint64_t)(v34 & 0x7F) << v28;
              if (v34 < 0)
              {
                v28 += 7;
                BOOL v15 = v29++ >= 9;
                if (v15)
                {
                  uint64_t v30 = 0;
                  goto LABEL_131;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v30 = 0;
          }
LABEL_131:
          BOOL v107 = v30 != 0;
          uint64_t v108 = 113;
          goto LABEL_136;
        case 6u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v37 = 0;
          *(_WORD *)(a1 + 116) |= 0x2000u;
          while (2)
          {
            uint64_t v38 = *v3;
            uint64_t v39 = *(void *)(a2 + v38);
            unint64_t v40 = v39 + 1;
            if (v39 == -1 || v40 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v41 = *(unsigned char *)(*(void *)(a2 + *v7) + v39);
              *(void *)(a2 + v3_Block_object_dispose(&STACK[0x210], 8) = v40;
              v37 |= (unint64_t)(v41 & 0x7F) << v35;
              if (v41 < 0)
              {
                v35 += 7;
                BOOL v15 = v36++ >= 9;
                if (v15)
                {
                  uint64_t v37 = 0;
                  goto LABEL_135;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v37 = 0;
          }
LABEL_135:
          BOOL v107 = v37 != 0;
          uint64_t v108 = 112;
LABEL_136:
          *(unsigned char *)(a1 + v10_Block_object_dispose(&STACK[0x210], 8) = v107;
          continue;
        case 7u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 80;
          goto LABEL_116;
        case 8u:
          char v42 = 0;
          unsigned int v43 = 0;
          uint64_t v44 = 0;
          *(_WORD *)(a1 + 116) |= 1u;
          while (2)
          {
            uint64_t v45 = *v3;
            uint64_t v46 = *(void *)(a2 + v45);
            unint64_t v47 = v46 + 1;
            if (v46 == -1 || v47 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v48 = *(unsigned char *)(*(void *)(a2 + *v7) + v46);
              *(void *)(a2 + v45) = v47;
              v44 |= (unint64_t)(v48 & 0x7F) << v42;
              if (v48 < 0)
              {
                v42 += 7;
                BOOL v15 = v43++ >= 9;
                if (v15)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_140;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v44) = 0;
          }
LABEL_140:
          uint64_t v109 = 16;
          goto LABEL_173;
        case 9u:
          char v49 = 0;
          unsigned int v50 = 0;
          uint64_t v44 = 0;
          *(_WORD *)(a1 + 116) |= 2u;
          while (2)
          {
            uint64_t v51 = *v3;
            uint64_t v52 = *(void *)(a2 + v51);
            unint64_t v53 = v52 + 1;
            if (v52 == -1 || v53 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v54 = *(unsigned char *)(*(void *)(a2 + *v7) + v52);
              *(void *)(a2 + v51) = v53;
              v44 |= (unint64_t)(v54 & 0x7F) << v49;
              if (v54 < 0)
              {
                v49 += 7;
                BOOL v15 = v50++ >= 9;
                if (v15)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_144;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v44) = 0;
          }
LABEL_144:
          uint64_t v109 = 20;
          goto LABEL_173;
        case 0xAu:
          char v55 = 0;
          unsigned int v56 = 0;
          uint64_t v44 = 0;
          *(_WORD *)(a1 + 116) |= 0x80u;
          while (2)
          {
            uint64_t v57 = *v3;
            uint64_t v58 = *(void *)(a2 + v57);
            unint64_t v59 = v58 + 1;
            if (v58 == -1 || v59 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v60 = *(unsigned char *)(*(void *)(a2 + *v7) + v58);
              *(void *)(a2 + v57) = v59;
              v44 |= (unint64_t)(v60 & 0x7F) << v55;
              if (v60 < 0)
              {
                v55 += 7;
                BOOL v15 = v56++ >= 9;
                if (v15)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_148;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v44) = 0;
          }
LABEL_148:
          uint64_t v109 = 88;
          goto LABEL_173;
        case 0xBu:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 64;
          goto LABEL_116;
        case 0xCu:
          *(_WORD *)(a1 + 116) |= 0x10u;
          uint64_t v61 = *v3;
          unint64_t v62 = *(void *)(a2 + v61);
          if (v62 <= 0xFFFFFFFFFFFFFFFBLL && v62 + 4 <= *(void *)(a2 + *v4))
          {
            int v63 = *(_DWORD *)(*(void *)(a2 + *v7) + v62);
            *(void *)(a2 + v61) = v62 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v63 = 0;
          }
          uint64_t v110 = 56;
          goto LABEL_182;
        case 0xDu:
          *(_WORD *)(a1 + 116) |= 8u;
          uint64_t v64 = *v3;
          unint64_t v65 = *(void *)(a2 + v64);
          if (v65 <= 0xFFFFFFFFFFFFFFFBLL && v65 + 4 <= *(void *)(a2 + *v4))
          {
            int v63 = *(_DWORD *)(*(void *)(a2 + *v7) + v65);
            *(void *)(a2 + v64) = v65 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v63 = 0;
          }
          uint64_t v110 = 52;
          goto LABEL_182;
        case 0xEu:
          *(_WORD *)(a1 + 116) |= 4u;
          uint64_t v66 = *v3;
          unint64_t v67 = *(void *)(a2 + v66);
          if (v67 <= 0xFFFFFFFFFFFFFFFBLL && v67 + 4 <= *(void *)(a2 + *v4))
          {
            int v63 = *(_DWORD *)(*(void *)(a2 + *v7) + v67);
            *(void *)(a2 + v66) = v67 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v63 = 0;
          }
          uint64_t v110 = 48;
          goto LABEL_182;
        case 0xFu:
          char v68 = 0;
          unsigned int v69 = 0;
          uint64_t v44 = 0;
          *(_WORD *)(a1 + 116) |= 0x20u;
          while (2)
          {
            uint64_t v70 = *v3;
            uint64_t v71 = *(void *)(a2 + v70);
            unint64_t v72 = v71 + 1;
            if (v71 == -1 || v72 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v73 = *(unsigned char *)(*(void *)(a2 + *v7) + v71);
              *(void *)(a2 + v70) = v72;
              v44 |= (unint64_t)(v73 & 0x7F) << v68;
              if (v73 < 0)
              {
                v68 += 7;
                BOOL v15 = v69++ >= 9;
                if (v15)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_152;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v44) = 0;
          }
LABEL_152:
          uint64_t v109 = 72;
          goto LABEL_173;
        case 0x10u:
          *(_WORD *)(a1 + 116) |= 0x100u;
          uint64_t v74 = *v3;
          unint64_t v75 = *(void *)(a2 + v74);
          if (v75 <= 0xFFFFFFFFFFFFFFFBLL && v75 + 4 <= *(void *)(a2 + *v4))
          {
            int v63 = *(_DWORD *)(*(void *)(a2 + *v7) + v75);
            *(void *)(a2 + v74) = v75 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v63 = 0;
          }
          uint64_t v110 = 92;
LABEL_182:
          *(_DWORD *)(a1 + v110) = v63;
          continue;
        case 0x11u:
          char v76 = 0;
          unsigned int v77 = 0;
          uint64_t v44 = 0;
          *(_WORD *)(a1 + 116) |= 0x800u;
          while (2)
          {
            uint64_t v78 = *v3;
            uint64_t v79 = *(void *)(a2 + v78);
            unint64_t v80 = v79 + 1;
            if (v79 == -1 || v80 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v81 = *(unsigned char *)(*(void *)(a2 + *v7) + v79);
              *(void *)(a2 + v7_Block_object_dispose(&STACK[0x210], 8) = v80;
              v44 |= (unint64_t)(v81 & 0x7F) << v76;
              if (v81 < 0)
              {
                v76 += 7;
                BOOL v15 = v77++ >= 9;
                if (v15)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_156;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v44) = 0;
          }
LABEL_156:
          uint64_t v109 = 104;
          goto LABEL_173;
        case 0x12u:
          char v82 = 0;
          unsigned int v83 = 0;
          uint64_t v44 = 0;
          *(_WORD *)(a1 + 116) |= 0x1000u;
          while (2)
          {
            uint64_t v84 = *v3;
            uint64_t v85 = *(void *)(a2 + v84);
            unint64_t v86 = v85 + 1;
            if (v85 == -1 || v86 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v87 = *(unsigned char *)(*(void *)(a2 + *v7) + v85);
              *(void *)(a2 + v84) = v86;
              v44 |= (unint64_t)(v87 & 0x7F) << v82;
              if (v87 < 0)
              {
                v82 += 7;
                BOOL v15 = v83++ >= 9;
                if (v15)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_160;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v44) = 0;
          }
LABEL_160:
          uint64_t v109 = 108;
          goto LABEL_173;
        case 0x13u:
          char v88 = 0;
          unsigned int v89 = 0;
          uint64_t v44 = 0;
          *(_WORD *)(a1 + 116) |= 0x400u;
          while (2)
          {
            uint64_t v90 = *v3;
            uint64_t v91 = *(void *)(a2 + v90);
            unint64_t v92 = v91 + 1;
            if (v91 == -1 || v92 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v93 = *(unsigned char *)(*(void *)(a2 + *v7) + v91);
              *(void *)(a2 + v90) = v92;
              v44 |= (unint64_t)(v93 & 0x7F) << v88;
              if (v93 < 0)
              {
                v88 += 7;
                BOOL v15 = v89++ >= 9;
                if (v15)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_164;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v44) = 0;
          }
LABEL_164:
          uint64_t v109 = 100;
          goto LABEL_173;
        case 0x14u:
          char v94 = 0;
          unsigned int v95 = 0;
          uint64_t v44 = 0;
          *(_WORD *)(a1 + 116) |= 0x200u;
          while (2)
          {
            uint64_t v96 = *v3;
            uint64_t v97 = *(void *)(a2 + v96);
            unint64_t v98 = v97 + 1;
            if (v97 == -1 || v98 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v99 = *(unsigned char *)(*(void *)(a2 + *v7) + v97);
              *(void *)(a2 + v96) = v98;
              v44 |= (unint64_t)(v99 & 0x7F) << v94;
              if (v99 < 0)
              {
                v94 += 7;
                BOOL v15 = v95++ >= 9;
                if (v15)
                {
                  LODWORD(v44) = 0;
                  goto LABEL_168;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v44) = 0;
          }
LABEL_168:
          uint64_t v109 = 96;
          goto LABEL_173;
        case 0x15u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 40;
LABEL_116:
          char v100 = *(void **)(a1 + v19);
          *(void *)(a1 + v19) = v18;

          continue;
        case 0x16u:
          char v101 = 0;
          unsigned int v102 = 0;
          uint64_t v44 = 0;
          *(_WORD *)(a1 + 116) |= 0x40u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v103 = *v3;
        uint64_t v104 = *(void *)(a2 + v103);
        unint64_t v105 = v104 + 1;
        if (v104 == -1 || v105 > *(void *)(a2 + *v4)) {
          break;
        }
        char v106 = *(unsigned char *)(*(void *)(a2 + *v7) + v104);
        *(void *)(a2 + v103) = v105;
        v44 |= (unint64_t)(v106 & 0x7F) << v101;
        if ((v106 & 0x80) == 0) {
          goto LABEL_170;
        }
        v101 += 7;
        BOOL v15 = v102++ >= 9;
        if (v15)
        {
          LODWORD(v44) = 0;
          goto LABEL_172;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_170:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v44) = 0;
      }
LABEL_172:
      uint64_t v109 = 76;
LABEL_173:
      *(_DWORD *)(a1 + v109) = v44;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t ATXMPBAppClipCaptureRateTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  pthread_mutexattr_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 24;
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 32) |= 1u;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_34;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_36;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_34:
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v20) = 0;
            }
LABEL_36:
            *(_DWORD *)(a1 + 16) = v20;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 8;
      }
      unint64_t v26 = *(void **)(a1 + v25);
      *(void *)(a1 + v25) = v24;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D1237BDC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

void sub_1D1238028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1238348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1238DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,char a23)
{
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_1D123AF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 128), 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_5_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x52u);
}

uint64_t ATXAnchorModelPBAnchorMetadataReadFrom(uint64_t a1, uint64_t a2)
{
  pthread_mutexattr_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 56) |= 2u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_74;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_76;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_74:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_76:
          uint64_t v57 = 20;
          goto LABEL_101;
        case 2u:
          uint64_t v24 = PBReaderReadString();
          uint64_t v25 = 8;
          goto LABEL_65;
        case 3u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 56) |= 1u;
          while (2)
          {
            uint64_t v28 = *v3;
            unint64_t v29 = *(void *)(a2 + v28);
            if (v29 == -1 || v29 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
              *(void *)(a2 + v2_Block_object_dispose(&STACK[0x210], 8) = v29 + 1;
              v19 |= (unint64_t)(v30 & 0x7F) << v26;
              if (v30 < 0)
              {
                v26 += 7;
                BOOL v14 = v27++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_80;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_80:
          uint64_t v57 = 16;
          goto LABEL_101;
        case 4u:
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 56) |= 0x40u;
          while (2)
          {
            uint64_t v33 = *v3;
            unint64_t v34 = *(void *)(a2 + v33);
            if (v34 == -1 || v34 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
              *(void *)(a2 + v33) = v34 + 1;
              v19 |= (unint64_t)(v35 & 0x7F) << v31;
              if (v35 < 0)
              {
                v31 += 7;
                BOOL v14 = v32++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_84;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_84:
          uint64_t v57 = 52;
          goto LABEL_101;
        case 5u:
          char v36 = 0;
          unsigned int v37 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 56) |= 4u;
          while (2)
          {
            uint64_t v38 = *v3;
            unint64_t v39 = *(void *)(a2 + v38);
            if (v39 == -1 || v39 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v40 = *(unsigned char *)(*(void *)(a2 + *v7) + v39);
              *(void *)(a2 + v3_Block_object_dispose(&STACK[0x210], 8) = v39 + 1;
              v19 |= (unint64_t)(v40 & 0x7F) << v36;
              if (v40 < 0)
              {
                v36 += 7;
                BOOL v14 = v37++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_88;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_88:
          uint64_t v57 = 24;
          goto LABEL_101;
        case 6u:
          char v41 = 0;
          unsigned int v42 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 56) |= 0x10u;
          while (2)
          {
            uint64_t v43 = *v3;
            unint64_t v44 = *(void *)(a2 + v43);
            if (v44 == -1 || v44 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v45 = *(unsigned char *)(*(void *)(a2 + *v7) + v44);
              *(void *)(a2 + v43) = v44 + 1;
              v19 |= (unint64_t)(v45 & 0x7F) << v41;
              if (v45 < 0)
              {
                v41 += 7;
                BOOL v14 = v42++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_92;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_92:
          uint64_t v57 = 32;
          goto LABEL_101;
        case 7u:
          char v46 = 0;
          unsigned int v47 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 56) |= 8u;
          while (2)
          {
            uint64_t v48 = *v3;
            unint64_t v49 = *(void *)(a2 + v48);
            if (v49 == -1 || v49 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v50 = *(unsigned char *)(*(void *)(a2 + *v7) + v49);
              *(void *)(a2 + v4_Block_object_dispose(&STACK[0x210], 8) = v49 + 1;
              v19 |= (unint64_t)(v50 & 0x7F) << v46;
              if (v50 < 0)
              {
                v46 += 7;
                BOOL v14 = v47++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_96;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_96:
          uint64_t v57 = 28;
          goto LABEL_101;
        case 8u:
          uint64_t v24 = PBReaderReadString();
          uint64_t v25 = 40;
LABEL_65:
          uint64_t v51 = *(void **)(a1 + v25);
          *(void *)(a1 + v25) = v24;

          continue;
        case 9u:
          char v52 = 0;
          unsigned int v53 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 56) |= 0x20u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v54 = *v3;
        unint64_t v55 = *(void *)(a2 + v54);
        if (v55 == -1 || v55 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v56 = *(unsigned char *)(*(void *)(a2 + *v7) + v55);
        *(void *)(a2 + v54) = v55 + 1;
        v19 |= (unint64_t)(v56 & 0x7F) << v52;
        if ((v56 & 0x80) == 0) {
          goto LABEL_98;
        }
        v52 += 7;
        BOOL v14 = v53++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_100;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_98:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v19) = 0;
      }
LABEL_100:
      uint64_t v57 = 48;
LABEL_101:
      *(_DWORD *)(a1 + v57) = v19;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D124483C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D1245AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D124860C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D1249C0C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

id getTrialAssets()
{
  if (getTrialAssets_onceToken != -1) {
    dispatch_once(&getTrialAssets_onceToken, &__block_literal_global_78);
  }
  uint64_t v0 = (void *)getTrialAssets_assets;
  return v0;
}

void sub_1D124D600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 144), 8);
  _Block_object_dispose((const void *)(v15 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1D124E22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __getTrialAssets_block_invoke()
{
  uint64_t v0 = objc_opt_new();
  uint64_t v1 = getTrialAssets_assets;
  getTrialAssets_assets = v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

void sub_1D124F6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1D124FC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1D12502EC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1D125088C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1D1251194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_2_8()
{
  return objc_opt_class();
}

void sub_1D1253E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AWDProactiveAppPredictionAppActionSequenceReadFrom(uint64_t a1, uint64_t a2)
{
  pthread_mutexattr_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v23 = PBReaderReadString();
        if (v23) {
          [(id)a1 addActionString:v23];
        }
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_33;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_35:
        *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id descriptorKey(void *a1, void *a2)
{
  pthread_mutexattr_t v3 = (objc_class *)NSString;
  id v4 = a2;
  id v5 = a1;
  int v6 = (void *)[[v3 alloc] initWithFormat:@"%@:%@", v5, v4];

  return v6;
}

uint64_t ATXMagicalMomentsPBMMEngagedTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  pthread_mutexattr_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          unint64_t v12 = *(void *)(a2 + v11);
          if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          BOOL v14 = v9++ >= 9;
          if (v14)
          {
            unint64_t v10 = 0;
            int v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (v15) {
          BOOL v16 = 1;
        }
        else {
          BOOL v16 = (v10 & 7) == 4;
        }
        if (!v16)
        {
          switch((v10 >> 3))
          {
            case 1u:
              char v17 = 0;
              unsigned int v18 = 0;
              uint64_t v19 = 0;
              *(unsigned char *)(a1 + 40) |= 1u;
              break;
            case 2u:
              uint64_t v24 = PBReaderReadString();
              uint64_t v25 = 24;
              goto LABEL_31;
            case 3u:
              uint64_t v24 = PBReaderReadString();
              uint64_t v25 = 8;
              goto LABEL_31;
            case 4u:
              uint64_t v24 = PBReaderReadString();
              uint64_t v25 = 32;
LABEL_31:
              char v26 = *(void **)(a1 + v25);
              *(void *)(a1 + v25) = v24;

              goto LABEL_36;
            default:
              uint64_t result = PBReaderSkipValueWithTag();
              if (!result) {
                return result;
              }
LABEL_36:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_33;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_35;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_35:
          *(_DWORD *)(a1 + 16) = v19;
          goto LABEL_36;
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDProactiveAppPredictionActionTimeEstimateReadFrom(uint64_t a1, uint64_t a2)
{
  pthread_mutexattr_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v23 = objc_alloc_init(AWDProactiveAppPredictionActionTimeEstimateContainer);
        [(id)a1 addAction:v23];
        if (!PBReaderPlaceMark()
          || (AWDProactiveAppPredictionActionTimeEstimateContainerReadFrom(v23, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_33;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_35:
        *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D125AA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 160), 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Block_object_dispose((const void *)(v29 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1D125AFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1D125D72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXAnchorModelPBActionUUIDMetadataReadFrom(uint64_t a1, uint64_t a2)
{
  pthread_mutexattr_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 36) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_46;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_48;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_46:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_48:
        uint64_t v36 = 8;
        goto LABEL_53;
      case 2u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 36) |= 2u;
        while (2)
        {
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 == -1 || v27 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
            *(void *)(a2 + v26) = v27 + 1;
            v19 |= (unint64_t)(v28 & 0x7F) << v24;
            if (v28 < 0)
            {
              v24 += 7;
              BOOL v14 = v25++ >= 9;
              if (v14)
              {
                uint64_t v19 = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_52:
        uint64_t v36 = 16;
LABEL_53:
        *(void *)(a1 + v36) = v19;
        goto LABEL_58;
      case 3u:
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v31 = 0;
        *(unsigned char *)(a1 + 36) |= 4u;
        while (2)
        {
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
            *(void *)(a2 + v32) = v33 + 1;
            v31 |= (unint64_t)(v34 & 0x7F) << v29;
            if (v34 < 0)
            {
              v29 += 7;
              BOOL v14 = v30++ >= 9;
              if (v14)
              {
                LODWORD(v31) = 0;
                goto LABEL_57;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v31) = 0;
        }
LABEL_57:
        *(_DWORD *)(a1 + 32) = v31;
        goto LABEL_58;
      case 4u:
        char v35 = objc_alloc_init(ATXAnchorModelPBLaunchHistoryMetadata);
        objc_storeStrong((id *)(a1 + 24), v35);
        if (PBReaderPlaceMark() && ATXAnchorModelPBLaunchHistoryMetadataReadFrom((uint64_t)v35, a2))
        {
          PBReaderRecallMark();

LABEL_58:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_58;
    }
  }
}

void sub_1D12605F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1263C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1D12646F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1D1265650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1D1266DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_1D12682D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1268850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1D12695C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1269644(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12696B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1269720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  unint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)ATXActionPredictionServer;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1D1269930(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1269B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

id __atx_xpc_private_queue_get(void)
{
  if (__atx_xpc_private_queue_get(void)::onceToken != -1) {
    dispatch_once(&__atx_xpc_private_queue_get(void)::onceToken, &__block_literal_global_150_0);
  }
  uint64_t v0 = (void *)__atx_xpc_private_queue_get(void)::queue;
  return v0;
}

void sub_1D1269DC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1269F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1D126A20C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D126A394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1D126A54C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D126A764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_1D126A9C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D126AB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1D126AE78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D126B004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D126B194(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D126B38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, ...)
{
  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D126B5F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL27__atx_xpc_private_queue_getv_block_invoke()
{
  uint64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("atx-xpc-bg", v2);
  uint64_t v1 = (void *)__atx_xpc_private_queue_get(void)::queue;
  __atx_xpc_private_queue_get(void)::queue = (uint64_t)v0;
}

BOOL ATXAnchorModelPBAnchorModelLogEntryReadFrom(uint64_t a1, uint64_t a2)
{
  pthread_mutexattr_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        unsigned int v18 = *(ATXAnchorModelPBAnchorMetadata **)(a1 + 48);
        *(void *)(a1 + 4_Block_object_dispose(&STACK[0x210], 8) = v17;
        goto LABEL_35;
      case 2u:
        unsigned int v18 = objc_alloc_init(ATXAnchorModelPBAnchorMetadata);
        objc_storeStrong((id *)(a1 + 8), v18);
        if (!PBReaderPlaceMark() || (ATXAnchorModelPBAnchorMetadataReadFrom((uint64_t)v18, a2) & 1) == 0) {
          goto LABEL_39;
        }
        goto LABEL_34;
      case 3u:
        unsigned int v18 = objc_alloc_init(ATXAnchorModelPBAppLaunchMetadata);
        [(id)a1 addPositiveAppLaunches:v18];
        goto LABEL_28;
      case 4u:
        unsigned int v18 = objc_alloc_init(ATXAnchorModelPBActionMetadata);
        [(id)a1 addPositiveActions:v18];
        goto LABEL_32;
      case 5u:
        unsigned int v18 = objc_alloc_init(ATXAnchorModelPBAppLaunchMetadata);
        [(id)a1 addNegativeAppLaunches:v18];
LABEL_28:
        if (!PBReaderPlaceMark()
          || (ATXAnchorModelPBAppLaunchMetadataReadFrom((uint64_t)v18, a2) & 1) == 0)
        {
          goto LABEL_39;
        }
        goto LABEL_34;
      case 6u:
        unsigned int v18 = objc_alloc_init(ATXAnchorModelPBActionMetadata);
        [(id)a1 addNegativeActions:v18];
LABEL_32:
        if PBReaderPlaceMark() && (ATXAnchorModelPBActionMetadataReadFrom((uint64_t)v18, a2))
        {
LABEL_34:
          PBReaderRecallMark();
LABEL_35:

LABEL_36:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_39:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_36;
    }
  }
}

void sub_1D1270008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1270844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose((const void *)(v40 - 200), 8);
  _Block_object_dispose((const void *)(v40 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1D127561C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1276530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D127B67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1D127B834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D127B958(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D127BB54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D127C40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_1D127C9A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D127CD0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D127CF0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D127D18C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D127D404(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D127D5E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D127E074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1D127EB08(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

BOOL ATXPBBlendingSessionBlendingUpdateReadFrom(id *a1, uint64_t a2)
{
  pthread_mutexattr_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 2;
        goto LABEL_24;
      case 2u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 1;
        goto LABEL_24;
      case 3u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 4;
LABEL_24:
        uint64_t v19 = (ATXPBBlendingSessionDeviceContext *)a1[v18];
        a1[v18] = (id)v17;
        goto LABEL_34;
      case 4u:
        uint64_t v19 = objc_alloc_init(ATXPBBlendingSessionDeviceContext);
        objc_storeStrong(a1 + 5, v19);
        if (!PBReaderPlaceMark()
          || (ATXPBBlendingSessionDeviceContextReadFrom((uint64_t)v19, a2) & 1) == 0)
        {
          goto LABEL_38;
        }
        goto LABEL_33;
      case 5u:
        uint64_t v19 = objc_alloc_init(ATXPBBlendingSessionClientModelUpdate);
        [a1 addClientModelUpdate:v19];
        if (!PBReaderPlaceMark() || !ATXPBBlendingSessionClientModelUpdateReadFrom((char *)v19, a2)) {
          goto LABEL_38;
        }
        goto LABEL_33;
      case 6u:
        uint64_t v19 = objc_alloc_init(ATXPBBlendingSessionUICache);
        objc_storeStrong(a1 + 6, v19);
        if (PBReaderPlaceMark() && ATXPBBlendingSessionUICacheReadFrom(v19, a2))
        {
LABEL_33:
          PBReaderRecallMark();
LABEL_34:

LABEL_35:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_38:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_35;
    }
  }
}

void sub_1D127FF00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D127FF90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12800A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1280174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12801E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12802D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12803C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12813AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1D1281954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

uint64_t ATXMPBAppClipSessionEngagementTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  pthread_mutexattr_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          unint64_t v12 = *(void *)(a2 + v11);
          if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          BOOL v14 = v9++ >= 9;
          if (v14)
          {
            unint64_t v10 = 0;
            int v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (v15) {
          BOOL v16 = 1;
        }
        else {
          BOOL v16 = (v10 & 7) == 4;
        }
        if (!v16)
        {
          switch((v10 >> 3))
          {
            case 1u:
              char v17 = 0;
              unsigned int v18 = 0;
              uint64_t v19 = 0;
              *(unsigned char *)(a1 + 40) |= 1u;
              break;
            case 2u:
              uint64_t v24 = PBReaderReadString();
              uint64_t v25 = 16;
              goto LABEL_31;
            case 3u:
              uint64_t v24 = PBReaderReadString();
              uint64_t v25 = 8;
              goto LABEL_31;
            case 4u:
              uint64_t v24 = PBReaderReadString();
              uint64_t v25 = 32;
LABEL_31:
              uint64_t v26 = *(void **)(a1 + v25);
              *(void *)(a1 + v25) = v24;

              goto LABEL_36;
            default:
              uint64_t result = PBReaderSkipValueWithTag();
              if (!result) {
                return result;
              }
LABEL_36:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_33;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_35;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v19) = 0;
          }
LABEL_35:
          *(_DWORD *)(a1 + 24) = v19;
          goto LABEL_36;
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

__CFString *ATXUserEducationSuggestionStateToString(unint64_t a1)
{
  if (a1 >= 3)
  {
    pthread_mutexattr_t v3 = __atxlog_handle_context_user_education_suggestions();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT)) {
      ATXUserEducationSuggestionStateToString_cold_1(a1, v3);
    }

    objc_msgSend(NSString, "stringWithFormat:", @"(error: unknown state: %ld)", a1);
    uint64_t v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v2 = off_1E68B4050[a1];
  }
  return v2;
}

uint64_t ATXPBBlendingSessionERMEventReadFrom(uint64_t a1, uint64_t a2)
{
  pthread_mutexattr_t v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 32;
          goto LABEL_30;
        case 2u:
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 40) |= 1u;
          break;
        case 3u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 16;
LABEL_30:
          uint64_t v26 = *(void **)(a1 + v18);
          *(void *)(a1 + v1_Block_object_dispose(&STACK[0x210], 8) = v17;

          continue;
        case 4u:
          uint64_t v27 = PBReaderReadString();
          if (v27) {
            [(id)a1 addBlendingUpdateUUID:v27];
          }

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v23 = *v3;
        unint64_t v24 = *(void *)(a2 + v23);
        if (v24 == -1 || v24 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
        *(void *)(a2 + v23) = v24 + 1;
        v22 |= (unint64_t)(v25 & 0x7F) << v20;
        if ((v25 & 0x80) == 0) {
          goto LABEL_35;
        }
        v20 += 7;
        BOOL v14 = v21++ >= 9;
        if (v14)
        {
          LODWORD(v22) = 0;
          goto LABEL_37;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_35:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v22) = 0;
      }
LABEL_37:
      *(_DWORD *)(a1 + 24) = v22;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D12889C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id contactIdentifiersFromINPersons(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v1, "count"));
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v3 = v1;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        char v8 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        unsigned int v9 = objc_msgSend(v8, "contactIdentifier", (void)v12);

        if (v9)
        {
          unint64_t v10 = [v8 contactIdentifier];
          [v2 addObject:v10];
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v5);
  }

  return v2;
}

void sub_1D1289450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t atx_CMFBlockListIsItemBlocked(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000;
  uint64_t v2 = (uint64_t (*)(uint64_t))getCMFBlockListIsItemBlockedSymbolLoc_ptr;
  char v8 = getCMFBlockListIsItemBlockedSymbolLoc_ptr;
  if (!getCMFBlockListIsItemBlockedSymbolLoc_ptr)
  {
    id v3 = (void *)CommunicationsFilterLibrary();
    v6[3] = (uint64_t)dlsym(v3, "CMFBlockListIsItemBlocked");
    getCMFBlockListIsItemBlockedSymbolLoc_ptr = (_UNKNOWN *)v6[3];
    uint64_t v2 = (uint64_t (*)(uint64_t))v6[3];
  }
  _Block_object_dispose(&v5, 8);
  if (!v2) {
    atx_CMFBlockListIsItemBlocked_cold_1();
  }
  return v2(a1);
}

void sub_1D1289560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1289800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D128A5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void *__getCMFItemCreateWithEmailAddressSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CommunicationsFilterLibrary();
  uint64_t result = dlsym(v2, "CMFItemCreateWithEmailAddress");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCMFItemCreateWithEmailAddressSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t CommunicationsFilterLibrary()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v2[0] = 0;
  if (!CommunicationsFilterLibraryCore_frameworkLibrary)
  {
    v2[1] = (void *)MEMORY[0x1E4F143A8];
    void v2[2] = (void *)3221225472;
    v2[3] = __CommunicationsFilterLibraryCore_block_invoke;
    v2[4] = &__block_descriptor_40_e5_v8__0l;
    v2[5] = v2;
    long long v3 = xmmword_1E68B4128;
    uint64_t v4 = 0;
    CommunicationsFilterLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  uint64_t v0 = CommunicationsFilterLibraryCore_frameworkLibrary;
  if (!CommunicationsFilterLibraryCore_frameworkLibrary) {
    CommunicationsFilterLibrary_cold_1(v2);
  }
  if (v2[0]) {
    free(v2[0]);
  }
  return v0;
}

uint64_t __CommunicationsFilterLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CommunicationsFilterLibraryCore_frameworkLibrary = result;
  return result;
}

void *__getCMFBlockListIsItemBlockedSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CommunicationsFilterLibrary();
  uint64_t result = dlsym(v2, "CMFBlockListIsItemBlocked");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCMFBlockListIsItemBlockedSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getCMFItemCreateWithPhoneNumberSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)CommunicationsFilterLibrary();
  uint64_t result = dlsym(v2, "CMFItemCreateWithPhoneNumber");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getCMFItemCreateWithPhoneNumberSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t ATXMPBDonationRatioTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        uint64_t v26 = PBReaderReadString();
        uint64_t v27 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v26;
      }
      else if (v18 == 2)
      {
        *(unsigned char *)(a1 + 28) |= 1u;
        uint64_t v28 = *v3;
        unint64_t v29 = *(void *)(a2 + v28);
        if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v30 = *(void *)(*(void *)(a2 + *v7) + v29);
          *(void *)(a2 + v2_Block_object_dispose(&STACK[0x210], 8) = v29 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v30 = 0;
        }
        *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = v30;
      }
      else if (v18 == 1)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 28) |= 2u;
        while (1)
        {
          uint64_t v22 = *v3;
          uint64_t v23 = *(void *)(a2 + v22);
          unint64_t v24 = v23 + 1;
          if (v23 == -1 || v24 > *(void *)(a2 + *v4)) {
            break;
          }
          char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v24;
          v21 |= (unint64_t)(v25 & 0x7F) << v19;
          if ((v25 & 0x80) == 0) {
            goto LABEL_35;
          }
          v19 += 7;
          BOOL v15 = v20++ >= 9;
          if (v15)
          {
            LODWORD(v21) = 0;
            goto LABEL_37;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_35:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_37:
        *(_DWORD *)(a1 + 24) = v21;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D128C774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXSuggestedPageTypeFromSuggestedFaceType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xA) {
    return 1;
  }
  else {
    return qword_1D142B9E8[a1 - 1];
  }
}

uint64_t ATXPBNotificationTimeSensitiveStatusReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 == -1 || v24 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
          *(void *)(a2 + v23) = v24 + 1;
          v22 |= (unint64_t)(v25 & 0x7F) << v20;
          if ((v25 & 0x80) == 0) {
            goto LABEL_39;
          }
          v20 += 7;
          BOOL v14 = v21++ >= 9;
          if (v14)
          {
            uint64_t v22 = 0;
            goto LABEL_41;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v22 = 0;
        }
LABEL_41:
        BOOL v33 = v22 != 0;
        uint64_t v34 = 16;
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            uint64_t v18 = PBReaderReadString();
            char v19 = *(void **)(a1 + 8);
            *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = v18;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        *(unsigned char *)(a1 + 20) |= 2u;
        while (1)
        {
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 == -1 || v30 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
          *(void *)(a2 + v29) = v30 + 1;
          v28 |= (unint64_t)(v31 & 0x7F) << v26;
          if ((v31 & 0x80) == 0) {
            goto LABEL_43;
          }
          v26 += 7;
          BOOL v14 = v27++ >= 9;
          if (v14)
          {
            uint64_t v28 = 0;
            goto LABEL_45;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_43:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v28 = 0;
        }
LABEL_45:
        BOOL v33 = v28 != 0;
        uint64_t v34 = 17;
      }
      *(unsigned char *)(a1 + v34) = v33;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D1293234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1294F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1D129BDD8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D129CA2C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1D129CC24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D129CD50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D129CDE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D129CE80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D129CF94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D129D094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1D129D140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D129D1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D129D2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  uint64_t v5 = v4;

  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1D129D470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  *(void *)(v9 - 40) = v8;
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100]((void ***)(v9 - 40));

  _Unwind_Resume(a1);
}

void sub_1D129D6DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<ATXPredictionItem>::__vdeallocate(id **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    long long v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 412;
      }
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1D129DD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXMPBAppClipSuppressionTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 24;
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 32) |= 1u;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_34;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_36;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_34:
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v20) = 0;
            }
LABEL_36:
            *(_DWORD *)(a1 + 16) = v20;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 8;
      }
      char v26 = *(void **)(a1 + v25);
      *(void *)(a1 + v25) = v24;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D12A08B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void ____atx_xpc_private_queue_get_block_invoke()
{
  uint64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v0 = dispatch_queue_create("atx-xpc-bg", v2);
  uint64_t v1 = (void *)__atx_xpc_private_queue_get_queue;
  __atx_xpc_private_queue_get_queue = (uint64_t)v0;
}

void sub_1D12A3054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL ATXCandidateRelevanceModelPBMetricsReadFrom(id *a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(ATXCandidateRelevanceModelPBModelMetrics);
        objc_storeStrong(a1 + 7, v17);
        if (PBReaderPlaceMark()
          && (ATXCandidateRelevanceModelPBModelMetricsReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
          goto LABEL_31;
        }
        goto LABEL_36;
      case 2u:
        unint64_t v17 = objc_alloc_init(ATXCandidateRelevanceModelPBEvaluationMetrics);
        uint64_t v18 = 4;
        goto LABEL_29;
      case 3u:
        unint64_t v17 = objc_alloc_init(ATXCandidateRelevanceModelPBEvaluationMetrics);
        uint64_t v18 = 6;
        goto LABEL_29;
      case 4u:
        unint64_t v17 = objc_alloc_init(ATXCandidateRelevanceModelPBEvaluationMetrics);
        uint64_t v18 = 5;
        goto LABEL_29;
      case 5u:
        unint64_t v17 = objc_alloc_init(ATXCandidateRelevanceModelPBEvaluationMetrics);
        uint64_t v18 = 2;
        goto LABEL_29;
      case 6u:
        unint64_t v17 = objc_alloc_init(ATXCandidateRelevanceModelPBEvaluationMetrics);
        uint64_t v18 = 3;
LABEL_29:
        objc_storeStrong(&a1[v18], v17);
        if (PBReaderPlaceMark()
          && (ATXCandidateRelevanceModelPBEvaluationMetricsReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
          goto LABEL_31;
        }
        goto LABEL_36;
      case 7u:
        unint64_t v17 = objc_alloc_init(ATXCandidateRelevanceModelPBCandidateMetrics);
        [a1 addCandidateMetrics:v17];
        if (PBReaderPlaceMark()
          && (ATXCandidateRelevanceModelPBCandidateMetricsReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_31:
          PBReaderRecallMark();

LABEL_32:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_36:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_32;
    }
  }
}

id createInfoSuggestion(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  uint64_t v7 = (objc_class *)MEMORY[0x1E4F938F0];
  id v8 = a2;
  id v9 = [v7 alloc];
  unint64_t v10 = [v6 launchId];
  uint64_t v11 = v10;
  if (!v10)
  {
    uint64_t v11 = [v5 bundleId];
  }
  unint64_t v12 = [v8 extensionBundleIdentifier];
  char v13 = [v8 kind];
  uint64_t v14 = objc_msgSend(v8, "atx_layoutOptions");

  int v15 = objc_msgSend([NSString alloc], "initWithFormat:", @"%lu", objc_msgSend(v5, "hash"));
  uint64_t v16 = (void *)[v9 initWithAppBundleIdentifier:v11 widgetBundleIdentifier:v12 widgetKind:v13 criterion:&stru_1F2740B58 applicableLayouts:v14 suggestionIdentifier:v15 startDate:0 endDate:0 intent:v6 metadata:0 relevanceScore:0];

  if (!v10) {
  return v16;
  }
}

uint64_t ATXTimelineRelevancePBTimelineRelevanceScoreEntryReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 44) |= 2u;
          uint64_t v18 = *v3;
          unint64_t v19 = *(void *)(a2 + v18);
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
            *(void *)(a2 + v1_Block_object_dispose(&STACK[0x210], 8) = v19 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v20 = 0;
          }
          *(void *)(a1 + 16) = v20;
          continue;
        case 2u:
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          *(unsigned char *)(a1 + 44) |= 1u;
          while (2)
          {
            uint64_t v25 = *v3;
            uint64_t v26 = *(void *)(a2 + v25);
            unint64_t v27 = v26 + 1;
            if (v26 == -1 || v27 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v26);
              *(void *)(a2 + v25) = v27;
              v24 |= (unint64_t)(v28 & 0x7F) << v22;
              if (v28 < 0)
              {
                v22 += 7;
                BOOL v15 = v23++ >= 9;
                if (v15)
                {
                  uint64_t v24 = 0;
                  goto LABEL_49;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v24 = 0;
          }
LABEL_49:
          uint64_t v44 = 8;
          goto LABEL_54;
        case 3u:
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v24 = 0;
          *(unsigned char *)(a1 + 44) |= 4u;
          while (2)
          {
            uint64_t v31 = *v3;
            uint64_t v32 = *(void *)(a2 + v31);
            unint64_t v33 = v32 + 1;
            if (v32 == -1 || v33 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
              *(void *)(a2 + v31) = v33;
              v24 |= (unint64_t)(v34 & 0x7F) << v29;
              if (v34 < 0)
              {
                v29 += 7;
                BOOL v15 = v30++ >= 9;
                if (v15)
                {
                  uint64_t v24 = 0;
                  goto LABEL_53;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v24 = 0;
          }
LABEL_53:
          uint64_t v44 = 24;
LABEL_54:
          *(void *)(a1 + v44) = v24;
          continue;
        case 4u:
          uint64_t v35 = PBReaderReadString();
          uint64_t v36 = *(void **)(a1 + 32);
          *(void *)(a1 + 32) = v35;

          continue;
        case 5u:
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v39 = 0;
          *(unsigned char *)(a1 + 44) |= 8u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v40 = *v3;
        uint64_t v41 = *(void *)(a2 + v40);
        unint64_t v42 = v41 + 1;
        if (v41 == -1 || v42 > *(void *)(a2 + *v4)) {
          break;
        }
        char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v41);
        *(void *)(a2 + v40) = v42;
        v39 |= (unint64_t)(v43 & 0x7F) << v37;
        if ((v43 & 0x80) == 0) {
          goto LABEL_56;
        }
        v37 += 7;
        BOOL v15 = v38++ >= 9;
        if (v15)
        {
          LODWORD(v39) = 0;
          goto LABEL_58;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_56:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v39) = 0;
      }
LABEL_58:
      *(_DWORD *)(a1 + 40) = v39;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D12AAC18(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

double ATXDayZeroScore(void *a1, void *a2, unint64_t a3)
{
  id v5 = a1;
  id v6 = a2;
  uint64_t v7 = [v6 objectForKeyedSubscript:@"dayZero"];
  char v8 = [v7 objectForKeyedSubscript:@"minDistinctLaunchedApps"];
  int v9 = [v8 intValue];

  double v10 = 0.0;
  if (v9 > a3)
  {
    uint64_t v11 = [v6 objectForKeyedSubscript:@"dayZero"];
    uint64_t v12 = [v11 objectForKeyedSubscript:@"dayZeroBumps"];
    unint64_t v13 = [v12 objectForKeyedSubscript:v5];

    [v13 doubleValue];
    double v10 = v14;
  }
  return v10;
}

void sub_1D12AC554(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

float ATXSetInput(uint64_t a1, unint64_t a2, double a3)
{
  if (a2 >= 0x331)
  {
    uint64_t v7 = [MEMORY[0x1E4F28B00] currentHandler];
    char v8 = objc_msgSend(NSString, "stringWithUTF8String:", "void ATXSetInput(ATXPredictionItem * _Nonnull, _ATXScoreInput, double)");
    objc_msgSend(v7, "handleFailureInFunction:file:lineNumber:description:", v8, @"_ATXAppPredictor.mm", 105, @"Input type must be less than _ATXScoreInputMax: %lu >= %lu", a2, 817);
  }
  if (fabs(a3) == INFINITY)
  {
    int v9 = [MEMORY[0x1E4F28B00] currentHandler];
    double v10 = objc_msgSend(NSString, "stringWithUTF8String:", "void ATXSetInput(ATXPredictionItem * _Nonnull, _ATXScoreInput, double)");
    uint64_t v11 = +[_ATXScoreTypes stringForScoreInput:a2];
    [v9 handleFailureInFunction:v10, @"_ATXAppPredictor.mm", 107, @"Value must be finite (input %lu, \"%@\")", a2, v11 file lineNumber description];
  }
  float result = a3;
  *(float *)(a1 + 4 * a2 + 16) = result;
  return result;
}

void sub_1D12AC770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ATXSetInputAge(uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  if (v7)
  {
    [v7 timeIntervalSinceDate:v8];
    double v10 = -v9;
    if (v9 <= 0.0)
    {
      ATXSetInput(a1, a2, -v9);
    }
    else
    {
      uint64_t v11 = __atxlog_handle_app_prediction();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v12 = +[_ATXScoreTypes stringForScoreInput:a2];
        ATXSetInputAge_cold_1(v12, v13, v11, v10);
      }
    }
  }
}

void sub_1D12AC8A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12AC94C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12ACAB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12ACBA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12ACCD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12AD574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,void *a25,void *a26,uint64_t a27,void *a28,void *a29,void *a30,void *a31,id a32,void *a33,void *a34,void *a35,uint64_t a36)
{
  a36 = a24;
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);

  _Unwind_Resume(a1);
}

void sub_1D12AE4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27,uint64_t a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,void *a37,void *a38,id a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,void *a45,void *a46,void *a47,uint64_t a48,void *a49,void *a50,uint64_t a51,uint64_t a52)
{
  a52 = a26;
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100]((void ***)&a52);

  _Unwind_Resume(a1);
}

void sub_1D12AE980(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<ATXAction * {__strong},int>,std::__unordered_map_hasher<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionHash,ATXActionEqual,true>,std::__unordered_map_equal<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionEqual,ATXActionHash,true>,std::allocator<std::__hash_value_type<ATXAction * {__strong},int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_1D12AEDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void **a20)
{
  std::__hash_table<std::__hash_value_type<ATXAction * {__strong},int>,std::__unordered_map_hasher<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionHash,ATXActionEqual,true>,std::__unordered_map_equal<ATXAction * {__strong},std::__hash_value_type<ATXAction * {__strong},int>,ATXActionEqual,ATXActionHash,true>,std::allocator<std::__hash_value_type<ATXAction * {__strong},int>>>::~__hash_table((uint64_t)&a20);
  a20 = (void **)(v20 - 112);
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100](&a20);

  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100](&a20);
  _Unwind_Resume(a1);
}

void sub_1D12AF304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  a29 = a13;
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100](&a29);

  _Unwind_Resume(a1);
}

void sub_1D12AF57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1D12AF71C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12AF828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1D12AF8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D12AF93C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12AF9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D12AFC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1D12AFD64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12AFE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1D12AFF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D12B0014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12B00CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1D12B0238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12B038C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12B0798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12B0AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1D12B0B5C()
{
}

void sub_1D12B0B64()
{
}

void sub_1D12B0BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)_ATXAppPredictor;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1D12B0C94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12B0D34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12B0DC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12B1090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12B1218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, char a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a15;
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100](&a18);

  _Unwind_Resume(a1);
}

void sub_1D12B13E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12B16A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12B1800(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12B1938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12B1A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1D12B1EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31)
{
  _Block_object_dispose((const void *)(v34 - 160), 8);
  *(void *)(v34 - 160) = v34 - 216;
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 160));

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__146(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__147(uint64_t a1)
{
}

void sub_1D12B27FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t ATXShouldPredictBundle(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if ([v7 bundleHasBeenLaunched:v6])
  {
    uint64_t v8 = 1;
  }
  else
  {
    double v9 = [v5 appInfoForBundleId:v6];
    uint64_t v8 = [v9 isEnterpriseApp] ^ 1;
  }
  return v8;
}

void sub_1D12B2A28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ATXKeepRandomPredictionItemsBelowLimit(uint64_t a1, unint64_t a2, char **a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = 0xDAB7EC1DD3431B57 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5);
    BOOL v7 = v6 >= a2;
    unint64_t v8 = v6 - a2;
    if (v8 != 0 && v7)
    {
      std::vector<ATXPredictionItem>::vector(&v42, v8);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ATXPredictionItem const*,ATXPredictionItem const*,ATXPredictionItem*>((int)&v44, (id *)(*(void *)a1 + 3296 * a2), *(id **)(a1 + 8), v42);
      uint64_t v11 = v42;
      uint64_t v12 = v43;
      uint32_t v13 = arc4random_uniform(0xFFFFFFFF);
      unsigned int v14 = v13 + ((v13 / 0x7FFFFFFF) | ((v13 / 0x7FFFFFFF) << 31));
      if (v14 <= 1) {
        unsigned int v14 = 1;
      }
      LODWORD(__dst[0]) = v14;
      std::__shuffle[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<ATXPredictionItem *>,std::__wrap_iter<ATXPredictionItem *>,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(v11, v12, (uint64_t)__dst);
      BOOL v15 = v42;
      unint64_t v16 = 0xDAB7EC1DD3431B57 * ((v43 - (uint64_t)v42) >> 5);
      if (v16 >= a4) {
        unint64_t v16 = a4;
      }
      if (v16)
      {
        unint64_t v17 = 0;
        uint64_t v18 = (uint64_t)(a3 + 2);
        do
        {
          unint64_t v19 = &v15[412 * v17];
          id v20 = *v19;
          memcpy(__dst, v19 + 1, 0xCD2uLL);
          char v22 = a3[1];
          unint64_t v21 = (unint64_t)a3[2];
          if ((unint64_t)v22 >= v21)
          {
            unint64_t v24 = 0xDAB7EC1DD3431B57 * ((v22 - *a3) >> 5);
            unint64_t v25 = v24 + 1;
            if (v24 + 1 > 0x13E22CBCE4A902) {
              std::vector<ATXPredictionItem>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v26 = 0xDAB7EC1DD3431B57 * ((uint64_t)(v21 - (void)*a3) >> 5);
            if (2 * v26 > v25) {
              unint64_t v25 = 2 * v26;
            }
            if (v26 >= 0x9F1165E725481) {
              unint64_t v27 = 0x13E22CBCE4A902;
            }
            else {
              unint64_t v27 = v25;
            }
            uint64_t v47 = v18;
            if (v27)
            {
              char v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ATXPredictionItem>>(v18, v27);
              uint64_t v30 = v29;
            }
            else
            {
              char v28 = 0;
              uint64_t v30 = 0;
            }
            uint64_t v31 = &v28[3296 * v24];
            *(void *)uint64_t v31 = v20;
            memcpy(v31 + 8, __dst, 0xCD2uLL);
            unint64_t v33 = *a3;
            unint64_t v32 = (unint64_t)a3[1];
            if ((char *)v32 == *a3)
            {
              int64x2_t v38 = vdupq_n_s64(v32);
              uint64_t v34 = &v28[3296 * v24];
            }
            else
            {
              uint64_t v34 = &v28[3296 * v24];
              do
              {
                unint64_t v35 = v32 - 3296;
                uint64_t v36 = *(void *)(v32 - 3296);
                char v37 = v34 - 3288;
                v34 -= 3296;
                *(void *)(v32 - 3296) = 0;
                *(void *)uint64_t v34 = v36;
                memcpy(v37, (const void *)(v32 - 3288), 0xCD2uLL);
                unint64_t v32 = v35;
              }
              while ((char *)v35 != v33);
              int64x2_t v38 = *(int64x2_t *)a3;
            }
            unsigned int v23 = v31 + 3296;
            *a3 = v34;
            a3[1] = v31 + 3296;
            int64x2_t v45 = v38;
            uint64_t v39 = a3[2];
            a3[2] = &v28[3296 * v30];
            char v46 = v39;
            uint64_t v44 = v38.i64[0];
            std::__split_buffer<ATXPredictionItem>::~__split_buffer((uint64_t)&v44);
            uint64_t v18 = (uint64_t)(a3 + 2);
          }
          else
          {
            *(void *)char v22 = v20;
            memcpy(v22 + 8, __dst, 0xCD2uLL);
            unsigned int v23 = v22 + 3296;
          }
          a3[1] = v23;

          ++v17;
          BOOL v15 = v42;
          unint64_t v40 = 0xDAB7EC1DD3431B57 * ((v43 - (uint64_t)v42) >> 5);
          if (v40 >= a4) {
            unint64_t v40 = a4;
          }
        }
        while (v40 > v17);
      }
      __dst[0] = (void **)&v42;
      std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100](__dst);
    }
  }
}

void sub_1D12B2D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  a11 = (void **)(v11 - 152);
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void sub_1D12B2FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1D12B3118(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1D12B320C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12B32CC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1D12B35C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25)
{
  _Block_object_dispose((const void *)(v29 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1D12B374C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12B3894(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12B4A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void *std::vector<ATXPredictionItem>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<ATXPredictionItem>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 3296 * a2;
    float v6 = -31337.0;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(float *)(v4 + 3284) = v6;
      uint64_t v7 = 16;
      *(_WORD *)(v4 + 328_Block_object_dispose(&STACK[0x210], 8) = 0;
      do
      {
        *(float *)(v4 + v7) = v6;
        v7 += 4;
      }
      while (v7 != 3284);
      v4 += 3296;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_1D12B50E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem const*>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem const*>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem const*>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem const*>>>::__emplace_unique_key_args<NSString * {__strong},std::pair<NSString * {__strong},ATXPredictionItem const*>>(uint64_t a1, id *a2, long long *a3)
{
  unint64_t v7 = [*a2 hash];
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(void **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if ([*((id *)i + 2) isEqualToString:*a2]) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  BOOL v15 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v8;
  long long v16 = *a3;
  *(void *)a3 = 0;
  *((_OWORD *)i + 1) = v16;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringHash,ATXNSStringEqual,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},ATXPredictionItem>,ATXNSStringEqual,ATXNSStringHash,true>,std::allocator<std::__hash_value_type<NSString * {__strong},ATXPredictionItem>>>::__rehash<true>(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    *(void *)uint64_t i = *v24;
LABEL_38:
    *unint64_t v24 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v15;
  *BOOL v15 = i;
  *(void *)(v23 + 8 * v3) = v15;
  if (*(void *)i)
  {
    unint64_t v25 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }
    else
    {
      v25 &= v9 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1D12B5344(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<ATXAction * {__strong},int>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void *std::get_temporary_buffer[abi:ne180100]<ATXPredictionItem>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0x9F1165E725481) {
    unint64_t v1 = 0x9F1165E725481;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
  while (1)
  {
    float result = operator new(3296 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

void sub_1D12B56B0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    do
    {

      v1 += 412;
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<ATXPredictionItem *> &,std::__wrap_iter<ATXPredictionItem *> &>(void ***a1, void ***a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = *a2;
  BOOL v4 = **a1;
  const std::nothrow_t *v2 = 0;
  memcpy(__dst, v2 + 1, sizeof(__dst));
  uint64_t v5 = *v3;
  void *v3 = 0;
  float v6 = *v2;
  const std::nothrow_t *v2 = v5;

  memcpy(v2 + 1, v3 + 1, 0xCD2uLL);
  unint64_t v7 = *v3;
  void *v3 = v4;

  return memcpy(v3 + 1, __dst, 0xCD2uLL);
}

char *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,-[_ATXAppPredictor _getPredictionForItems:clipBundleIdsToRank:consumerSubType:intent:scoreLogger:context:featureCache:]::$_0 &,std::__wrap_iter<ATXPredictionItem *>>(char *result, char *a2)
{
  if (result != a2)
  {
    uint64_t v22 = v5;
    uint64_t v23 = v4;
    uint64_t v24 = v2;
    uint64_t v25 = v3;
    unint64_t v7 = result;
    unint64_t v8 = result + 3296;
    if (result + 3296 != a2)
    {
      uint64_t v9 = 0;
      uint8x8_t v10 = (float *)result;
      do
      {
        unint64_t v11 = v8;
        if (v10[821] < v10[1645])
        {
          uint64_t v12 = *v8;
          void *v8 = 0;
          memcpy(v21, v10 + 826, sizeof(v21));
          float v13 = v10[1645];
          __int16 v14 = *((_WORD *)v10 + 3292);
          uint64_t v15 = v9;
          while (1)
          {
            long long v16 = (float *)&v7[v15];
            uint64_t v17 = *(void *)&v7[v15];
            *(void *)long long v16 = 0;
            float v18 = *(void **)&v7[v15 + 3296];
            *((void *)v16 + 412) = v17;

            memcpy(v16 + 826, v16 + 2, 0xCD2uLL);
            if (!v15) {
              break;
            }
            v15 -= 3296;
            if (*(v16 - 3) >= v13)
            {
              uint64_t v19 = (uint64_t)&v7[v15 + 3296];
              goto LABEL_10;
            }
          }
          uint64_t v19 = (uint64_t)v7;
LABEL_10:
          unint64_t v20 = *(void **)v19;
          *(void *)uint64_t v19 = v12;

          float result = (char *)memcpy(v16 + 2, v21, 0xCCCuLL);
          *(float *)(v19 + 3284) = v13;
          *(_WORD *)(v19 + 328_Block_object_dispose(&STACK[0x210], 8) = v14;
        }
        unint64_t v8 = v11 + 412;
        v9 += 3296;
        uint8x8_t v10 = (float *)v11;
      }
      while (v11 + 412 != (void *)a2);
    }
  }
  return result;
}

void sub_1D12B6128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (v9)
  {
    uint64_t v11 = a9 + 1;
    do
    {

      v9 += 412;
      --v11;
    }
    while (v11);
  }
  _Unwind_Resume(exception_object);
}

void **std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,ATXPredictionItem *,ATXPredictionItem *,std::__wrap_iter<ATXPredictionItem *>,0>(void **a1, void **a2, void **a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    float v6 = a3;
    do
    {
      unint64_t v7 = *v4;
      void *v4 = 0;
      unint64_t v8 = *v6;
      void *v6 = v7;

      memcpy(v6 + 1, v4 + 1, 0xCD2uLL);
      v3 += 412;
      v4 += 412;
      v6 += 412;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void **std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<ATXPredictionItem *>>(void **a1, void **a2, void **a3)
{
  uint64_t v4 = a2;
  uint8x8_t v10 = a2;
  uint64_t v11 = a1;
  while (1)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<ATXPredictionItem *> &,std::__wrap_iter<ATXPredictionItem *> &>(&v11, &v10);
    uint64_t v5 = v11 + 412;
    float v6 = v10 + 412;
    uint8x8_t v10 = v6;
    v11 += 412;
    if (v6 == a3) {
      break;
    }
    if (v5 == v4) {
      uint64_t v4 = v6;
    }
  }
  if (v5 != v4)
  {
    do
    {
      uint8x8_t v10 = v4;
      while (1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<ATXPredictionItem *> &,std::__wrap_iter<ATXPredictionItem *> &>(&v11, &v10);
        unint64_t v7 = v11 + 412;
        unint64_t v8 = v10 + 412;
        uint8x8_t v10 = v8;
        v11 += 412;
        if (v8 == a3) {
          break;
        }
        if (v7 == v4) {
          uint64_t v4 = v8;
        }
      }
    }
    while (v7 != v4);
  }
  return v5;
}

id *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<ATXPredictionItem const*,ATXPredictionItem const*,ATXPredictionItem*>(int a1, id *a2, id *a3, id *location)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  float v6 = a3;
  do
  {
    objc_storeStrong(location, *v5);
    memcpy(location + 1, v5 + 1, 0xCD2uLL);
    location += 412;
    v5 += 412;
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::__shuffle[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<ATXPredictionItem *>,std::__wrap_iter<ATXPredictionItem *>,std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = a1;
  if (a2 - (uint64_t)a1 >= 3297)
  {
    long long v10 = xmmword_1D142BAC0;
    unint64_t v4 = a2 - 3296;
    if (a2 - 3296 > (unint64_t)a1)
    {
      float v6 = (void **)((a2 - (uint64_t)a1) / 0xCE0uLL - 1);
      do
      {
        v9[0] = 0;
        v9[1] = v6;
        uint64_t v7 = std::uniform_int_distribution<long>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>((uint64_t)&v10, a3, v9);
        if (v7)
        {
          v9[0] = &v11[412 * v7];
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<ATXPredictionItem *> &,std::__wrap_iter<ATXPredictionItem *> &>(&v11, v9);
        }
        v11 += 412;
        float v6 = (void **)((char *)v6 - 1);
      }
      while ((unint64_t)v11 < v4);
    }
  }
  return a2;
}

uint64_t std::uniform_int_distribution<long>::operator()<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = a3[1];
  uint64_t v4 = result - *a3;
  if (result != *a3)
  {
    unint64_t v5 = v4 + 1;
    if (v4 == -1)
    {
      std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, 0x40uLL);
      return std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval((uint64_t)v10);
    }
    else
    {
      unint64_t v7 = __clz(v5);
      uint64_t v8 = 63;
      if (((v5 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        uint64_t v8 = 64;
      }
      std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, v8 - v7);
      do
        unint64_t v9 = std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval((uint64_t)v10);
      while (v9 >= v5);
      return *a3 + v9;
    }
  }
  return result;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + _Block_object_dispose(&STACK[0x210], 8) = a3;
  if (a3 % 0x1E) {
    unint64_t v3 = a3 / 0x1E + 1;
  }
  else {
    unint64_t v3 = a3 / 0x1E;
  }
  unint64_t v4 = a3 / v3;
  *(void *)(result + 16) = a3 / v3;
  *(void *)(result + 24) = v3;
  unint64_t v5 = (-1 << (a3 / v3)) & 0x7FFFFFFE;
  if (a3 / v3 >= 0x40) {
    unint64_t v5 = 0;
  }
  *(void *)(result + 40) = v5;
  if ((v5 ^ 0x7FFFFFFE) > v5 / v3)
  {
    ++v3;
    unint64_t v4 = a3 / v3;
    *(void *)(result + 16) = a3 / v3;
    *(void *)(result + 24) = v3;
    if (a3 / v3 > 0x3F)
    {
      unint64_t v6 = 0;
      *(void *)(result + 32) = v3 + v4 * v3 - a3;
      *(void *)(result + 40) = 0;
      goto LABEL_13;
    }
    *(void *)(result + 40) = (-1 << v4) & 0x7FFFFFFE;
  }
  *(void *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 > 0x3E) {
    unint64_t v6 = 0;
  }
  else {
    unint64_t v6 = 0x3FFFFFFFuLL >> v4 << (v4 + 1);
  }
LABEL_13:
  *(void *)(result + 4_Block_object_dispose(&STACK[0x210], 8) = v6;
  unsigned int v7 = 0xFFFFFFFF >> -(char)v4;
  if (!v4) {
    unsigned int v7 = 0;
  }
  if (v4 >= 0x1F) {
    unsigned int v8 = -1;
  }
  else {
    unsigned int v8 = 0xFFFFFFFF >> ~(_BYTE)v4;
  }
  *(_DWORD *)(result + 56) = v7;
  *(_DWORD *)(result + 60) = v8;
  return result;
}

uint64_t std::__independent_bits_engine<std::linear_congruential_engine<unsigned int,48271u,0u,2147483647u>,unsigned long>::__eval(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t result = 0;
    uint64_t v4 = 0;
    unint64_t v5 = *(void *)(a1 + 16);
    unsigned int v6 = **(_DWORD **)a1;
    do
    {
      do
      {
        unsigned int v7 = v6 / 0xADC8;
        unsigned int v8 = 48271 * (v6 % 0xADC8);
        v7 *= 3399;
        BOOL v9 = v8 >= v7;
        unsigned int v10 = v8 - v7;
        if (v9) {
          int v11 = 0;
        }
        else {
          int v11 = 0x7FFFFFFF;
        }
        unsigned int v6 = v11 + v10;
        unint64_t v12 = v6 - 1;
      }
      while (*(void *)(a1 + 40) <= v12);
      uint64_t v13 = result << v5;
      if (v5 >= 0x40) {
        uint64_t v13 = 0;
      }
      uint64_t result = v13 + (*(_DWORD *)(a1 + 56) & v12);
      ++v4;
    }
    while (v4 != v2);
    **(_DWORD **)a1 = v6;
  }
  else
  {
    uint64_t result = 0;
  }
  unint64_t v14 = *(void *)(a1 + 24);
  if (v2 < v14)
  {
    uint64_t v15 = *(unsigned int **)a1;
    unint64_t v16 = *(void *)(a1 + 48);
    unint64_t v17 = *(void *)(a1 + 16);
    int v18 = *(_DWORD *)(a1 + 60);
    unsigned int v19 = *v15;
    while (1)
    {
      unsigned int v20 = v19 / 0xADC8;
      unsigned int v21 = 48271 * (v19 % 0xADC8);
      v20 *= 3399;
      BOOL v9 = v21 >= v20;
      unsigned int v22 = v21 - v20;
      if (v9) {
        int v23 = 0;
      }
      else {
        int v23 = 0x7FFFFFFF;
      }
      unsigned int v19 = v23 + v22;
      unint64_t v24 = v19 - 1;
      if (v16 > v24)
      {
        uint64_t v25 = result << (v17 + 1);
        if (v17 >= 0x3F) {
          uint64_t v25 = 0;
        }
        uint64_t result = v25 + (v18 & v24);
        if (++v2 == v14) {
          break;
        }
      }
    }
    *uint64_t v15 = v19;
  }
  return result;
}

void sub_1D12B69CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D12B6F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 144), 8);
  _Block_object_dispose((const void *)(v29 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1D12B7298(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D12B7328(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D12B73A8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D12B8348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D12BA274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id NSErrorForInvalidInfoSourceIdentifier(void *a1)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  unint64_t v1 = (objc_class *)NSString;
  id v2 = a1;
  unint64_t v3 = (void *)[[v1 alloc] initWithFormat:@"source ID \"%@\" is invalid", v2];

  uint64_t v4 = (objc_class *)MEMORY[0x1E4F28C58];
  id v5 = v3;
  id v6 = [v4 alloc];
  uint64_t v10 = *MEMORY[0x1E4F28568];
  v11[0] = v5;
  unsigned int v7 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v11 forKeys:&v10 count:1];

  unsigned int v8 = (void *)[v6 initWithDomain:@"ATXInfoSuggestionServerErrorDomain" code:-1 userInfo:v7];
  return v8;
}

void toDictionaryApplier(void *a1, uint64_t a2, void *a3)
{
  if (*(double *)&a2 == 0.0 && a2 < 0) {
    double v5 = 0.0;
  }
  else {
    double v5 = *(double *)&a2;
  }
  id v6 = NSNumber;
  id v7 = a1;
  id v8 = a3;
  id v9 = [v6 numberWithDouble:v5];
  [v8 setObject:v9 forKeyedSubscript:v7];
}

CFStringRef copyDescriptionOfValueSlot(uint64_t a1)
{
  double v1 = *(double *)&a1;
  if (*(double *)&a1 == 0.0 && a1 < 0) {
    double v1 = 0.0;
  }
  return CFStringCreateWithFormat(0, 0, @"%f", *(void *)&v1);
}

BOOL valueSlotsEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t ATXMPBAnchorModelPredictionsGeneratedTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 24;
          goto LABEL_42;
        case 2u:
          *(unsigned char *)(a1 + 56) |= 1u;
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v22 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v23 = 0;
          }
          *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = v23;
          continue;
        case 3u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 32;
          goto LABEL_42;
        case 4u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 56) |= 4u;
          while (2)
          {
            uint64_t v27 = *v3;
            uint64_t v28 = *(void *)(a2 + v27);
            unint64_t v29 = v28 + 1;
            if (v28 == -1 || v29 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v29;
              v26 |= (unint64_t)(v30 & 0x7F) << v24;
              if (v30 < 0)
              {
                v24 += 7;
                BOOL v15 = v25++ >= 9;
                if (v15)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_46;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_46:
          uint64_t v38 = 52;
          goto LABEL_51;
        case 5u:
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 56) |= 2u;
          break;
        case 6u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 16;
          goto LABEL_42;
        case 7u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 40;
LABEL_42:
          char v37 = *(void **)(a1 + v19);
          *(void *)(a1 + v19) = v18;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v33 = *v3;
        uint64_t v34 = *(void *)(a2 + v33);
        unint64_t v35 = v34 + 1;
        if (v34 == -1 || v35 > *(void *)(a2 + *v4)) {
          break;
        }
        char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
        *(void *)(a2 + v33) = v35;
        v26 |= (unint64_t)(v36 & 0x7F) << v31;
        if ((v36 & 0x80) == 0) {
          goto LABEL_48;
        }
        v31 += 7;
        BOOL v15 = v32++ >= 9;
        if (v15)
        {
          LODWORD(v26) = 0;
          goto LABEL_50;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_48:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_50:
      uint64_t v38 = 48;
LABEL_51:
      *(_DWORD *)(a1 + v3_Block_object_dispose(&STACK[0x210], 8) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D12C31F8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1D12C4088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  uint64_t v34 = v22;
  unsigned int v32 = *(void **)(v31 - 144);

  _Unwind_Resume(a1);
}

void sub_1D12C43F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30)
{
  _Unwind_Resume(a1);
}

void sub_1D12C8AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  STACK[0x1F40] = (unint64_t)&STACK[0x1EF0];
  std::vector<ATXPredictionItem>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1F40]);

  _Unwind_Resume(a1);
}

void sub_1D12C9704()
{
  JUMPOUT(0x1D12C9814);
}

void sub_1D12C9710()
{
  JUMPOUT(0x1D12C9814);
}

void sub_1D12C971C()
{
}

void sub_1D12C9724()
{
  JUMPOUT(0x1D12C9814);
}

void sub_1D12C9730()
{
  JUMPOUT(0x1D12C9814);
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

void sub_1D12C9A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1D12C9D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1D12CA008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1D12CA174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12CA390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1D12CA4DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D12CA590(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::vector<double>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1D12CA700(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x210], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<ATXPredictionItem>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  id v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  double v5 = v6;
  id v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    char v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<ATXPredictionItem>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      char v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v13);
      char v8 = *a1;
      id v7 = a1[1];
    }
    else
    {
      char v14 = 0;
    }
    BOOL v15 = &v14[4 * v11];
    int v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    unint64_t v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

void *std::vector<float>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_1D12CA948(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + _Block_object_dispose(&STACK[0x210], 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<ATXPredictionItem>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t ATXMagicalMomentsPBMMTriggeredTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        uint64_t v23 = PBReaderReadString();
        char v24 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = v23;
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_31;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_33:
        *(_DWORD *)(a1 + 16) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D12D0AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D12D5014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1D12D5D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D12D646C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D12D6874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D12D6CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D12D7094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D12D74FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D12D79DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D12D8A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D12D8D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D12D8F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D12D9204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D12D933C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D12D9788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D12D9DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D12DA2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D12DA8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D12DABFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D12DB124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D12DBF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t AWDProactiveAppPredictionAppLaunchSequenceReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        uint64_t v23 = PBReaderReadString();
        if (v23) {
          [(id)a1 addBundleid:v23];
        }
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_33;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_35:
        *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D12E1574(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D12E3E74(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id dateFromDict(void *a1)
{
  if (a1)
  {
    uint64_t v1 = (objc_class *)MEMORY[0x1E4F1C9A8];
    id v2 = a1;
    id v3 = [v1 alloc];
    uint64_t v4 = (void *)[v3 initWithCalendarIdentifier:*MEMORY[0x1E4F1C318]];
    double v5 = objc_msgSend(MEMORY[0x1E4F1C9D8], "atx_componentsFromDictionary:", v2);

    if ([v5 year] == 0x7FFFFFFFFFFFFFFFLL)
    {
      id v6 = [MEMORY[0x1E4F1C9C8] now];
      uint64_t v7 = [v4 component:4 fromDate:v6];

      [v5 setYear:v7];
    }
    char v8 = [v4 dateFromComponents:v5];
  }
  else
  {
    char v8 = 0;
  }
  return v8;
}

void OUTLINED_FUNCTION_1_12(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

void OUTLINED_FUNCTION_2_9(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x20u);
}

uint64_t ATXPredictionUpdateCountPBPredictionUpdateCountTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        uint64_t v24 = PBReaderReadString();
        unsigned int v25 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = v24;
      }
      else
      {
        if (v17 == 2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 24) |= 1u;
          while (1)
          {
            uint64_t v28 = *v3;
            unint64_t v29 = *(void *)(a2 + v28);
            if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v2_Block_object_dispose(&STACK[0x210], 8) = v29 + 1;
            v20 |= (unint64_t)(v30 & 0x7F) << v26;
            if ((v30 & 0x80) == 0) {
              goto LABEL_43;
            }
            v26 += 7;
            BOOL v14 = v27++ >= 9;
            if (v14)
            {
              LODWORD(v20) = 0;
              goto LABEL_45;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_43:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v20) = 0;
          }
LABEL_45:
          uint64_t v32 = 16;
        }
        else
        {
          if (v17 != 1)
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 24) |= 2u;
          while (1)
          {
            uint64_t v21 = *v3;
            unint64_t v22 = *(void *)(a2 + v21);
            if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if ((v23 & 0x80) == 0) {
              goto LABEL_39;
            }
            v18 += 7;
            BOOL v14 = v19++ >= 9;
            if (v14)
            {
              LODWORD(v20) = 0;
              goto LABEL_41;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v20) = 0;
          }
LABEL_41:
          uint64_t v32 = 20;
        }
        *(_DWORD *)(a1 + v32) = v20;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL ATXMPBBlendingLayoutSelectionTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 56;
          goto LABEL_28;
        case 2u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 32;
          goto LABEL_28;
        case 3u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 48;
          goto LABEL_28;
        case 4u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 16;
          goto LABEL_28;
        case 5u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 24;
          goto LABEL_28;
        case 6u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 8;
          goto LABEL_28;
        case 7u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 40;
LABEL_28:
          unsigned int v19 = *(void **)(a1 + v18);
          *(void *)(a1 + v1_Block_object_dispose(&STACK[0x210], 8) = v17;

          goto LABEL_29;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
LABEL_29:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          break;
      }
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D12E9B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 176), 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_2_10(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x20u);
}

uint64_t ATXPBMinimalActionReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        *(unsigned char *)(a1 + 32) |= 1u;
        uint64_t v22 = *v3;
        unint64_t v23 = *(void *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && (unint64_t v24 = v23 + 8, v23 + 8 <= *(void *)(a2 + *v4)))
        {
          uint64_t v25 = *(void *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v24;
        }
        else
        {
          uint64_t v25 = 0;
          *(unsigned char *)(a2 + *v5) = 1;
        }
        *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = v25;
      }
      else
      {
        if (v18 == 2)
        {
          uint64_t v19 = PBReaderReadString();
          uint64_t v20 = 16;
        }
        else
        {
          if (v18 != 1)
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          uint64_t v19 = PBReaderReadString();
          uint64_t v20 = 24;
        }
        uint64_t v21 = *(void **)(a1 + v20);
        *(void *)(a1 + v20) = v19;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D12EC0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t hash32(void *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  memset(&v8, 0, sizeof(v8));
  id v1 = a1;
  CC_SHA256_Init(&v8);
  id v2 = v1;
  id v3 = (const void *)objc_msgSend(v2, "UTF8String", *(_OWORD *)v8.count, *(_OWORD *)&v8.hash[2], *(_OWORD *)&v8.hash[6], *(_OWORD *)&v8.wbuf[2], *(_OWORD *)&v8.wbuf[6], *(_OWORD *)&v8.wbuf[10], *(void *)&v8.wbuf[14]);
  id v4 = v2;
  uint64_t v5 = (const char *)[v4 UTF8String];

  CC_LONG v6 = strlen(v5);
  CC_SHA256_Update(&v8, v3, v6);
  CC_SHA256_Final(md, &v8);
  return *(unsigned int *)md;
}

uint64_t compareEntries(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 > *a2;
  }
}

void sub_1D12EE470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D12EF5B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D12EF738(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D12EFA88(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D12EFB68(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D12EFCCC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D12EFE0C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D12F0288(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D12F0404(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D12F0564(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D12F0644(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D12F0724(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D12F082C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D12F0934(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D12F0A94(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D12F0AFC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D12F0BDC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D12F0CBC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D12F0D24(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D12F0E64(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D12F1090(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D12F1184(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D12F1200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1D12F127C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1D12F131C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1D12F13D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1D12F18E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D12F1938(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D12F19C0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D12F1A48(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D12F1D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t ATXCandidateRelevanceModelPBEvaluationMetricsReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 136) |= 0x10000000u;
          uint64_t v18 = *v3;
          unint64_t v19 = *(void *)(a2 + v18);
          if (v19 <= 0xFFFFFFFFFFFFFFFBLL && v19 + 4 <= *(void *)(a2 + *v4))
          {
            int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v19);
            *(void *)(a2 + v1_Block_object_dispose(&STACK[0x210], 8) = v19 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v20 = 0;
          }
          uint64_t v134 = 120;
          goto LABEL_254;
        case 2u:
          *(_DWORD *)(a1 + 136) |= 0x20000000u;
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 <= 0xFFFFFFFFFFFFFFFBLL && v23 + 4 <= *(void *)(a2 + *v4))
          {
            int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v20 = 0;
          }
          uint64_t v134 = 124;
          goto LABEL_254;
        case 3u:
          *(_DWORD *)(a1 + 136) |= 0x40000000u;
          uint64_t v24 = *v3;
          unint64_t v25 = *(void *)(a2 + v24);
          if (v25 <= 0xFFFFFFFFFFFFFFFBLL && v25 + 4 <= *(void *)(a2 + *v4))
          {
            int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v25 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v20 = 0;
          }
          uint64_t v134 = 128;
          goto LABEL_254;
        case 4u:
          *(_DWORD *)(a1 + 136) |= 0x80000000;
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= *(void *)(a2 + *v4))
          {
            int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v27);
            *(void *)(a2 + v26) = v27 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v20 = 0;
          }
          uint64_t v134 = 132;
          goto LABEL_254;
        case 5u:
          *(_DWORD *)(a1 + 136) |= 0x1000000u;
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 <= 0xFFFFFFFFFFFFFFFBLL && v29 + 4 <= *(void *)(a2 + *v4))
          {
            int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v2_Block_object_dispose(&STACK[0x210], 8) = v29 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v20 = 0;
          }
          uint64_t v134 = 104;
          goto LABEL_254;
        case 6u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v32 = 0;
          *(_DWORD *)(a1 + 136) |= 0x8000000u;
          while (2)
          {
            uint64_t v33 = *v3;
            uint64_t v34 = *(void *)(a2 + v33);
            unint64_t v35 = v34 + 1;
            if (v34 == -1 || v35 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
              *(void *)(a2 + v33) = v35;
              v32 |= (unint64_t)(v36 & 0x7F) << v30;
              if (v36 < 0)
              {
                v30 += 7;
                BOOL v15 = v31++ >= 9;
                if (v15)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_168;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v32) = 0;
          }
LABEL_168:
          uint64_t v133 = 116;
          goto LABEL_213;
        case 7u:
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v32 = 0;
          *(_DWORD *)(a1 + 136) |= 0x4000000u;
          while (2)
          {
            uint64_t v39 = *v3;
            uint64_t v40 = *(void *)(a2 + v39);
            unint64_t v41 = v40 + 1;
            if (v40 == -1 || v41 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v42 = *(unsigned char *)(*(void *)(a2 + *v7) + v40);
              *(void *)(a2 + v39) = v41;
              v32 |= (unint64_t)(v42 & 0x7F) << v37;
              if (v42 < 0)
              {
                v37 += 7;
                BOOL v15 = v38++ >= 9;
                if (v15)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_172;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v32) = 0;
          }
LABEL_172:
          uint64_t v133 = 112;
          goto LABEL_213;
        case 8u:
          char v43 = 0;
          unsigned int v44 = 0;
          uint64_t v32 = 0;
          *(_DWORD *)(a1 + 136) |= 0x2000000u;
          while (2)
          {
            uint64_t v45 = *v3;
            uint64_t v46 = *(void *)(a2 + v45);
            unint64_t v47 = v46 + 1;
            if (v46 == -1 || v47 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v48 = *(unsigned char *)(*(void *)(a2 + *v7) + v46);
              *(void *)(a2 + v45) = v47;
              v32 |= (unint64_t)(v48 & 0x7F) << v43;
              if (v48 < 0)
              {
                v43 += 7;
                BOOL v15 = v44++ >= 9;
                if (v15)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_176;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v32) = 0;
          }
LABEL_176:
          uint64_t v133 = 108;
          goto LABEL_213;
        case 9u:
          *(_DWORD *)(a1 + 136) |= 0x100000u;
          uint64_t v49 = *v3;
          unint64_t v50 = *(void *)(a2 + v49);
          if (v50 <= 0xFFFFFFFFFFFFFFFBLL && v50 + 4 <= *(void *)(a2 + *v4))
          {
            int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v50);
            *(void *)(a2 + v49) = v50 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v20 = 0;
          }
          uint64_t v134 = 88;
          goto LABEL_254;
        case 0xAu:
          *(_DWORD *)(a1 + 136) |= 0x200000u;
          uint64_t v51 = *v3;
          unint64_t v52 = *(void *)(a2 + v51);
          if (v52 <= 0xFFFFFFFFFFFFFFFBLL && v52 + 4 <= *(void *)(a2 + *v4))
          {
            int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v52);
            *(void *)(a2 + v51) = v52 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v20 = 0;
          }
          uint64_t v134 = 92;
          goto LABEL_254;
        case 0xBu:
          *(_DWORD *)(a1 + 136) |= 0x400000u;
          uint64_t v53 = *v3;
          unint64_t v54 = *(void *)(a2 + v53);
          if (v54 <= 0xFFFFFFFFFFFFFFFBLL && v54 + 4 <= *(void *)(a2 + *v4))
          {
            int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v54);
            *(void *)(a2 + v53) = v54 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v20 = 0;
          }
          uint64_t v134 = 96;
          goto LABEL_254;
        case 0xCu:
          *(_DWORD *)(a1 + 136) |= 0x800000u;
          uint64_t v55 = *v3;
          unint64_t v56 = *(void *)(a2 + v55);
          if (v56 <= 0xFFFFFFFFFFFFFFFBLL && v56 + 4 <= *(void *)(a2 + *v4))
          {
            int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v56);
            *(void *)(a2 + v55) = v56 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v20 = 0;
          }
          uint64_t v134 = 100;
          goto LABEL_254;
        case 0xDu:
          *(_DWORD *)(a1 + 136) |= 0x10000u;
          uint64_t v57 = *v3;
          unint64_t v58 = *(void *)(a2 + v57);
          if (v58 <= 0xFFFFFFFFFFFFFFFBLL && v58 + 4 <= *(void *)(a2 + *v4))
          {
            int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v58);
            *(void *)(a2 + v57) = v58 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v20 = 0;
          }
          uint64_t v134 = 72;
          goto LABEL_254;
        case 0xEu:
          char v59 = 0;
          unsigned int v60 = 0;
          uint64_t v32 = 0;
          *(_DWORD *)(a1 + 136) |= 0x80000u;
          while (2)
          {
            uint64_t v61 = *v3;
            uint64_t v62 = *(void *)(a2 + v61);
            unint64_t v63 = v62 + 1;
            if (v62 == -1 || v63 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v64 = *(unsigned char *)(*(void *)(a2 + *v7) + v62);
              *(void *)(a2 + v61) = v63;
              v32 |= (unint64_t)(v64 & 0x7F) << v59;
              if (v64 < 0)
              {
                v59 += 7;
                BOOL v15 = v60++ >= 9;
                if (v15)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_180;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v32) = 0;
          }
LABEL_180:
          uint64_t v133 = 84;
          goto LABEL_213;
        case 0xFu:
          char v65 = 0;
          unsigned int v66 = 0;
          uint64_t v32 = 0;
          *(_DWORD *)(a1 + 136) |= 0x40000u;
          while (2)
          {
            uint64_t v67 = *v3;
            uint64_t v68 = *(void *)(a2 + v67);
            unint64_t v69 = v68 + 1;
            if (v68 == -1 || v69 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v70 = *(unsigned char *)(*(void *)(a2 + *v7) + v68);
              *(void *)(a2 + v67) = v69;
              v32 |= (unint64_t)(v70 & 0x7F) << v65;
              if (v70 < 0)
              {
                v65 += 7;
                BOOL v15 = v66++ >= 9;
                if (v15)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_184;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v32) = 0;
          }
LABEL_184:
          uint64_t v133 = 80;
          goto LABEL_213;
        case 0x10u:
          char v71 = 0;
          unsigned int v72 = 0;
          uint64_t v32 = 0;
          *(_DWORD *)(a1 + 136) |= 0x20000u;
          while (2)
          {
            uint64_t v73 = *v3;
            uint64_t v74 = *(void *)(a2 + v73);
            unint64_t v75 = v74 + 1;
            if (v74 == -1 || v75 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v76 = *(unsigned char *)(*(void *)(a2 + *v7) + v74);
              *(void *)(a2 + v73) = v75;
              v32 |= (unint64_t)(v76 & 0x7F) << v71;
              if (v76 < 0)
              {
                v71 += 7;
                BOOL v15 = v72++ >= 9;
                if (v15)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_188;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v32) = 0;
          }
LABEL_188:
          uint64_t v133 = 76;
          goto LABEL_213;
        case 0x11u:
          *(_DWORD *)(a1 + 136) |= 0x1000u;
          uint64_t v77 = *v3;
          unint64_t v78 = *(void *)(a2 + v77);
          if (v78 <= 0xFFFFFFFFFFFFFFFBLL && v78 + 4 <= *(void *)(a2 + *v4))
          {
            int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v78);
            *(void *)(a2 + v77) = v78 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v20 = 0;
          }
          uint64_t v134 = 56;
          goto LABEL_254;
        case 0x12u:
          *(_DWORD *)(a1 + 136) |= 0x2000u;
          uint64_t v79 = *v3;
          unint64_t v80 = *(void *)(a2 + v79);
          if (v80 <= 0xFFFFFFFFFFFFFFFBLL && v80 + 4 <= *(void *)(a2 + *v4))
          {
            int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v80);
            *(void *)(a2 + v79) = v80 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v20 = 0;
          }
          uint64_t v134 = 60;
          goto LABEL_254;
        case 0x13u:
          *(_DWORD *)(a1 + 136) |= 0x4000u;
          uint64_t v81 = *v3;
          unint64_t v82 = *(void *)(a2 + v81);
          if (v82 <= 0xFFFFFFFFFFFFFFFBLL && v82 + 4 <= *(void *)(a2 + *v4))
          {
            int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v82);
            *(void *)(a2 + v81) = v82 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v20 = 0;
          }
          uint64_t v134 = 64;
          goto LABEL_254;
        case 0x14u:
          *(_DWORD *)(a1 + 136) |= 0x8000u;
          uint64_t v83 = *v3;
          unint64_t v84 = *(void *)(a2 + v83);
          if (v84 <= 0xFFFFFFFFFFFFFFFBLL && v84 + 4 <= *(void *)(a2 + *v4))
          {
            int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v84);
            *(void *)(a2 + v83) = v84 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v20 = 0;
          }
          uint64_t v134 = 68;
          goto LABEL_254;
        case 0x15u:
          *(_DWORD *)(a1 + 136) |= 0x100u;
          uint64_t v85 = *v3;
          unint64_t v86 = *(void *)(a2 + v85);
          if (v86 <= 0xFFFFFFFFFFFFFFFBLL && v86 + 4 <= *(void *)(a2 + *v4))
          {
            int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v86);
            *(void *)(a2 + v85) = v86 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v20 = 0;
          }
          uint64_t v134 = 40;
          goto LABEL_254;
        case 0x16u:
          char v87 = 0;
          unsigned int v88 = 0;
          uint64_t v32 = 0;
          *(_DWORD *)(a1 + 136) |= 0x800u;
          while (2)
          {
            uint64_t v89 = *v3;
            uint64_t v90 = *(void *)(a2 + v89);
            unint64_t v91 = v90 + 1;
            if (v90 == -1 || v91 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v92 = *(unsigned char *)(*(void *)(a2 + *v7) + v90);
              *(void *)(a2 + v89) = v91;
              v32 |= (unint64_t)(v92 & 0x7F) << v87;
              if (v92 < 0)
              {
                v87 += 7;
                BOOL v15 = v88++ >= 9;
                if (v15)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_192;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v32) = 0;
          }
LABEL_192:
          uint64_t v133 = 52;
          goto LABEL_213;
        case 0x17u:
          char v93 = 0;
          unsigned int v94 = 0;
          uint64_t v32 = 0;
          *(_DWORD *)(a1 + 136) |= 0x400u;
          while (2)
          {
            uint64_t v95 = *v3;
            uint64_t v96 = *(void *)(a2 + v95);
            unint64_t v97 = v96 + 1;
            if (v96 == -1 || v97 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v98 = *(unsigned char *)(*(void *)(a2 + *v7) + v96);
              *(void *)(a2 + v95) = v97;
              v32 |= (unint64_t)(v98 & 0x7F) << v93;
              if (v98 < 0)
              {
                v93 += 7;
                BOOL v15 = v94++ >= 9;
                if (v15)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_196;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v32) = 0;
          }
LABEL_196:
          uint64_t v133 = 48;
          goto LABEL_213;
        case 0x18u:
          char v99 = 0;
          unsigned int v100 = 0;
          uint64_t v32 = 0;
          *(_DWORD *)(a1 + 136) |= 0x200u;
          while (2)
          {
            uint64_t v101 = *v3;
            uint64_t v102 = *(void *)(a2 + v101);
            unint64_t v103 = v102 + 1;
            if (v102 == -1 || v103 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v104 = *(unsigned char *)(*(void *)(a2 + *v7) + v102);
              *(void *)(a2 + v101) = v103;
              v32 |= (unint64_t)(v104 & 0x7F) << v99;
              if (v104 < 0)
              {
                v99 += 7;
                BOOL v15 = v100++ >= 9;
                if (v15)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_200;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v32) = 0;
          }
LABEL_200:
          uint64_t v133 = 44;
          goto LABEL_213;
        case 0x19u:
          *(_DWORD *)(a1 + 136) |= 0x10u;
          uint64_t v105 = *v3;
          unint64_t v106 = *(void *)(a2 + v105);
          if (v106 <= 0xFFFFFFFFFFFFFFFBLL && v106 + 4 <= *(void *)(a2 + *v4))
          {
            int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v106);
            *(void *)(a2 + v105) = v106 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v20 = 0;
          }
          uint64_t v134 = 24;
          goto LABEL_254;
        case 0x1Au:
          *(_DWORD *)(a1 + 136) |= 0x20u;
          uint64_t v107 = *v3;
          unint64_t v108 = *(void *)(a2 + v107);
          if (v108 <= 0xFFFFFFFFFFFFFFFBLL && v108 + 4 <= *(void *)(a2 + *v4))
          {
            int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v108);
            *(void *)(a2 + v107) = v108 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v20 = 0;
          }
          uint64_t v134 = 28;
          goto LABEL_254;
        case 0x1Bu:
          *(_DWORD *)(a1 + 136) |= 0x40u;
          uint64_t v109 = *v3;
          unint64_t v110 = *(void *)(a2 + v109);
          if (v110 <= 0xFFFFFFFFFFFFFFFBLL && v110 + 4 <= *(void *)(a2 + *v4))
          {
            int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v110);
            *(void *)(a2 + v109) = v110 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v20 = 0;
          }
          uint64_t v134 = 32;
          goto LABEL_254;
        case 0x1Cu:
          *(_DWORD *)(a1 + 136) |= 0x80u;
          uint64_t v111 = *v3;
          unint64_t v112 = *(void *)(a2 + v111);
          if (v112 <= 0xFFFFFFFFFFFFFFFBLL && v112 + 4 <= *(void *)(a2 + *v4))
          {
            int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v112);
            *(void *)(a2 + v111) = v112 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v20 = 0;
          }
          uint64_t v134 = 36;
          goto LABEL_254;
        case 0x1Du:
          *(_DWORD *)(a1 + 136) |= 1u;
          uint64_t v113 = *v3;
          unint64_t v114 = *(void *)(a2 + v113);
          if (v114 <= 0xFFFFFFFFFFFFFFFBLL && v114 + 4 <= *(void *)(a2 + *v4))
          {
            int v20 = *(_DWORD *)(*(void *)(a2 + *v7) + v114);
            *(void *)(a2 + v113) = v114 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v20 = 0;
          }
          uint64_t v134 = 8;
LABEL_254:
          *(_DWORD *)(a1 + v134) = v20;
          continue;
        case 0x1Eu:
          char v115 = 0;
          unsigned int v116 = 0;
          uint64_t v32 = 0;
          *(_DWORD *)(a1 + 136) |= 8u;
          while (2)
          {
            uint64_t v117 = *v3;
            uint64_t v118 = *(void *)(a2 + v117);
            unint64_t v119 = v118 + 1;
            if (v118 == -1 || v119 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v120 = *(unsigned char *)(*(void *)(a2 + *v7) + v118);
              *(void *)(a2 + v117) = v119;
              v32 |= (unint64_t)(v120 & 0x7F) << v115;
              if (v120 < 0)
              {
                v115 += 7;
                BOOL v15 = v116++ >= 9;
                if (v15)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_204;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v32) = 0;
          }
LABEL_204:
          uint64_t v133 = 20;
          goto LABEL_213;
        case 0x1Fu:
          char v121 = 0;
          unsigned int v122 = 0;
          uint64_t v32 = 0;
          *(_DWORD *)(a1 + 136) |= 4u;
          while (2)
          {
            uint64_t v123 = *v3;
            uint64_t v124 = *(void *)(a2 + v123);
            unint64_t v125 = v124 + 1;
            if (v124 == -1 || v125 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v126 = *(unsigned char *)(*(void *)(a2 + *v7) + v124);
              *(void *)(a2 + v123) = v125;
              v32 |= (unint64_t)(v126 & 0x7F) << v121;
              if (v126 < 0)
              {
                v121 += 7;
                BOOL v15 = v122++ >= 9;
                if (v15)
                {
                  LODWORD(v32) = 0;
                  goto LABEL_208;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v32) = 0;
          }
LABEL_208:
          uint64_t v133 = 16;
          goto LABEL_213;
        case 0x20u:
          char v127 = 0;
          unsigned int v128 = 0;
          uint64_t v32 = 0;
          *(_DWORD *)(a1 + 136) |= 2u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v129 = *v3;
        uint64_t v130 = *(void *)(a2 + v129);
        unint64_t v131 = v130 + 1;
        if (v130 == -1 || v131 > *(void *)(a2 + *v4)) {
          break;
        }
        char v132 = *(unsigned char *)(*(void *)(a2 + *v7) + v130);
        *(void *)(a2 + v129) = v131;
        v32 |= (unint64_t)(v132 & 0x7F) << v127;
        if ((v132 & 0x80) == 0) {
          goto LABEL_210;
        }
        v127 += 7;
        BOOL v15 = v128++ >= 9;
        if (v15)
        {
          LODWORD(v32) = 0;
          goto LABEL_212;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_210:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v32) = 0;
      }
LABEL_212:
      uint64_t v133 = 12;
LABEL_213:
      *(_DWORD *)(a1 + v133) = v32;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D12F9CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D12FA0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  objc_destroyWeak((id *)(v27 - 248));
  _Unwind_Resume(a1);
}

void sub_1D12FB354(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id compiledExpressionInstructions(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = objc_opt_new();
  v4[2](v4, v3, v5);

  CC_LONG v6 = [MEMORY[0x1E4F1C978] arrayWithArray:v5];

  return v6;
}

void pop_0(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1[1];
  if (v2)
  {
    v1[1] = v2 - 1;
  }
  else
  {
    id v3 = __atxlog_handle_default();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      shouldReturnUndefined_cold_1();
    }

    id v4 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v5 = [NSString stringWithUTF8String:"double pop(_ATXDeprecatedScoreInterpreterCtx *__strong)"];
    [v4 handleFailureInFunction:v5 file:@"_ATXDeprecatedScoreInterpreter.m" lineNumber:189 description:@"App prediction interpreter stack underflow"];

    __break(1u);
  }
}

double runInstructionsAndPopResult(void *a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v20 != v8) {
          objc_enumerationMutation(v5);
        }
        double v10 = (*(double (**)(void))(*(void *)(*((void *)&v19 + 1) + 8 * i) + 16))(*(void *)(*((void *)&v19 + 1) + 8 * i));
        uint64_t v11 = v4;
        unint64_t v12 = v4[1];
        if (v12 >= 0x1F4)
        {
          int v16 = __atxlog_handle_default();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
            runInstructionsAndPopResult_cold_1();
          }

          uint64_t v17 = objc_msgSend(MEMORY[0x1E4F28B00], "currentHandler", (void)v19);
          uint64_t v18 = objc_msgSend(NSString, "stringWithUTF8String:", "void push(_ATXDeprecatedScoreInterpreterCtx *__strong, double)");
          [v17 handleFailureInFunction:v18 file:@"_ATXDeprecatedScoreInterpreter.m" lineNumber:179 description:@"App prediction interpreter stack overflow"];

          __break(1u);
        }
        v4[1] = v12 + 1;
        *(double *)&v4[v12 + 2] = v10;
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v7);
  }

  pop_0(v4);
  double v14 = v13;

  return v14;
}

void shouldReturnUndefined_0(void *a1, unint64_t a2)
{
  id v3 = a1;
  unint64_t v4 = v3[1];
  unint64_t v5 = v4 - a2;
  if (v4 < a2)
  {
    unsigned int v9 = __atxlog_handle_default();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      shouldReturnUndefined_cold_1();
    }

    double v10 = [MEMORY[0x1E4F28B00] currentHandler];
    uint64_t v11 = objc_msgSend(NSString, "stringWithUTF8String:", "BOOL shouldReturnUndefined(_ATXDeprecatedScoreInterpreterCtx *__strong, NSUInteger)");
    [v10 handleFailureInFunction:v11 file:@"_ATXDeprecatedScoreInterpreter.m" lineNumber:209 description:@"App prediction interpreter stack underflow"];

    __break(1u);
  }
  else
  {
    if (v5 < v4 && *(double *)&v3[v5 + 2] != -31337.0)
    {
      uint64_t v6 = -(uint64_t)a2;
      do
      {
        uint64_t v7 = v6;
        BOOL v8 = __CFADD__(v6++, 1);
      }
      while (!v8 && *(double *)&v3[v4 + 3 + v7] != -31337.0);
    }
  }
}

void drop_0(void *a1, unint64_t a2)
{
  id v3 = a1;
  unint64_t v4 = v3[1];
  BOOL v5 = v4 >= a2;
  unint64_t v6 = v4 - a2;
  if (v5)
  {
    v3[1] = v6;
  }
  else
  {
    uint64_t v7 = __atxlog_handle_default();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      shouldReturnUndefined_cold_1();
    }

    unsigned int v9 = [MEMORY[0x1E4F28B00] currentHandler];
    double v10 = objc_msgSend(NSString, "stringWithUTF8String:", "void drop(_ATXDeprecatedScoreInterpreterCtx *__strong, NSUInteger)");
    [v9 handleFailureInFunction:v10 file:@"_ATXDeprecatedScoreInterpreter.m" lineNumber:199 description:@"App prediction interpreter stack underflow"];

    __break(1u);
  }
}

void sub_1D12FF388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,id a45,char a46)
{
}

uint64_t ATXPBContactModeEntityMetricsReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  BOOL v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 16;
          goto LABEL_37;
        case 2u:
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 32) |= 2u;
          while (2)
          {
            uint64_t v23 = *v3;
            unint64_t v24 = *(void *)(a2 + v23);
            if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
              *(void *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                BOOL v14 = v21++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_41;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v22) = 0;
          }
LABEL_41:
          uint64_t v32 = 28;
          goto LABEL_46;
        case 3u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 32) |= 1u;
          break;
        case 4u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 8;
LABEL_37:
          unsigned int v31 = *(void **)(a1 + v18);
          *(void *)(a1 + v1_Block_object_dispose(&STACK[0x210], 8) = v17;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v28 = *v3;
        unint64_t v29 = *(void *)(a2 + v28);
        if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
        *(void *)(a2 + v2_Block_object_dispose(&STACK[0x210], 8) = v29 + 1;
        v22 |= (unint64_t)(v30 & 0x7F) << v26;
        if ((v30 & 0x80) == 0) {
          goto LABEL_43;
        }
        v26 += 7;
        BOOL v14 = v27++ >= 9;
        if (v14)
        {
          LODWORD(v22) = 0;
          goto LABEL_45;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_43:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v22) = 0;
      }
LABEL_45:
      uint64_t v32 = 24;
LABEL_46:
      *(_DWORD *)(a1 + v32) = v22;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t ATXTimelineRelevancePBTimelineRelevanceStackConfigSummaryReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  BOOL v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 32) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_57;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_59;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_57:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_59:
          *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 32) |= 4u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_63;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_63:
          uint64_t v45 = 20;
          goto LABEL_76;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 32) |= 2u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_67;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_67:
          uint64_t v45 = 16;
          goto LABEL_76;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 32) |= 8u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
              *(void *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                BOOL v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_71;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_71:
          uint64_t v45 = 24;
          goto LABEL_76;
        case 5u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 32) |= 0x10u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v42 = *v3;
        unint64_t v43 = *(void *)(a2 + v42);
        if (v43 == -1 || v43 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
        *(void *)(a2 + v42) = v43 + 1;
        v26 |= (unint64_t)(v44 & 0x7F) << v40;
        if ((v44 & 0x80) == 0) {
          goto LABEL_73;
        }
        v40 += 7;
        BOOL v14 = v41++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_75;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_73:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_75:
      uint64_t v45 = 28;
LABEL_76:
      *(_DWORD *)(a1 + v45) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D1304020(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t ATXPBTaskAgnosticBehaviorSampleReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  BOOL v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        *(unsigned char *)(a1 + 32) |= 1u;
        uint64_t v18 = *v3;
        unint64_t v19 = *(void *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
          *(void *)(a2 + v1_Block_object_dispose(&STACK[0x210], 8) = v19 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v20 = 0;
        }
        *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = v20;
        goto LABEL_51;
      case 2u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v24 = 0;
        *(unsigned char *)(a1 + 32) |= 2u;
        while (2)
        {
          uint64_t v25 = *v3;
          uint64_t v26 = *(void *)(a2 + v25);
          unint64_t v27 = v26 + 1;
          if (v26 == -1 || v27 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v26);
            *(void *)(a2 + v25) = v27;
            v24 |= (unint64_t)(v28 & 0x7F) << v22;
            if (v28 < 0)
            {
              v22 += 7;
              BOOL v15 = v23++ >= 9;
              if (v15)
              {
                LODWORD(v24) = 0;
                goto LABEL_44;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v24) = 0;
        }
LABEL_44:
        *(_DWORD *)(a1 + 24) = v24;
        goto LABEL_51;
      case 3u:
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v31 = 0;
        *(unsigned char *)(a1 + 32) |= 4u;
        while (2)
        {
          uint64_t v32 = *v3;
          uint64_t v33 = *(void *)(a2 + v32);
          unint64_t v34 = v33 + 1;
          if (v33 == -1 || v34 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
            *(void *)(a2 + v32) = v34;
            v31 |= (unint64_t)(v35 & 0x7F) << v29;
            if (v35 < 0)
            {
              v29 += 7;
              BOOL v15 = v30++ >= 9;
              if (v15)
              {
                uint64_t v31 = 0;
                goto LABEL_48;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v31 = 0;
        }
LABEL_48:
        *(unsigned char *)(a1 + 2_Block_object_dispose(&STACK[0x210], 8) = v31 != 0;
        goto LABEL_51;
      case 4u:
        unsigned int v36 = objc_alloc_init(ATXPBTaskAgnosticBehaviorFeatureVector);
        objc_storeStrong((id *)(a1 + 16), v36);
        if (PBReaderPlaceMark() && ATXPBTaskAgnosticBehaviorFeatureVectorReadFrom((uint64_t)v36, a2))
        {
          PBReaderRecallMark();

LABEL_51:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_51;
    }
  }
}

void sub_1D1308664(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1D13090B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t NanoHomeScreenServicesLibraryCore()
{
  if (!NanoHomeScreenServicesLibraryCore_frameworkLibrary) {
    NanoHomeScreenServicesLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  return NanoHomeScreenServicesLibraryCore_frameworkLibrary;
}

uint64_t __NanoHomeScreenServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  NanoHomeScreenServicesLibraryCore_frameworkLibrary = result;
  return result;
}

Class __getNHSSRelevantWidgetDefaultsClass_block_invoke(uint64_t a1)
{
  NanoHomeScreenServicesLibraryCore();
  Class result = objc_getClass("NHSSRelevantWidgetDefaults");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getNHSSRelevantWidgetDefaultsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getNHSSRelevantWidgetClass_block_invoke(uint64_t a1)
{
  NanoHomeScreenServicesLibraryCore();
  Class result = objc_getClass("NHSSRelevantWidget");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getNHSSRelevantWidgetClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t ATXMPBBlendingHomeScreenWidgetTopOfStackSelectionTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  unint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  BOOL v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 48;
          goto LABEL_41;
        case 2u:
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 64) |= 1u;
          while (2)
          {
            uint64_t v23 = *v3;
            unint64_t v24 = *(void *)(a2 + v23);
            if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
              *(void *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                BOOL v14 = v21++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_45;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v22) = 0;
          }
LABEL_45:
          uint64_t v32 = 56;
          goto LABEL_50;
        case 3u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 24;
          goto LABEL_41;
        case 4u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 40;
          goto LABEL_41;
        case 5u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 64) |= 2u;
          break;
        case 6u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 32;
          goto LABEL_41;
        case 7u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 8;
          goto LABEL_41;
        case 8u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 16;
LABEL_41:
          uint64_t v31 = *(void **)(a1 + v18);
          *(void *)(a1 + v1_Block_object_dispose(&STACK[0x210], 8) = v17;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v28 = *v3;
        unint64_t v29 = *(void *)(a2 + v28);
        if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
        *(void *)(a2 + v2_Block_object_dispose(&STACK[0x210], 8) = v29 + 1;
        v22 |= (unint64_t)(v30 & 0x7F) << v26;
        if ((v30 & 0x80) == 0) {
          goto LABEL_47;
        }
        v26 += 7;
        BOOL v14 = v27++ >= 9;
        if (v14)
        {
          LODWORD(v22) = 0;
          goto LABEL_49;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_47:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v22) = 0;
      }
LABEL_49:
      uint64_t v32 = 60;
LABEL_50:
      *(_DWORD *)(a1 + v32) = v22;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D130C8BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void atxRegisterCTSJobHandler(const char *a1, void *a2, void *a3)
{
  id v5 = a3;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __atxRegisterCTSJobHandler_block_invoke;
  v7[3] = &unk_1E68B5350;
  id v8 = v5;
  unsigned int v9 = a1;
  id v6 = v5;
  xpc_activity_register(a1, a2, v7);
}

void __atxRegisterCTSJobHandler_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (!*(void *)(a1 + 32))
  {
    unint64_t v24 = [MEMORY[0x1E4F28B00] currentHandler];
    char v25 = objc_msgSend(NSString, "stringWithUTF8String:", "void atxRegisterCTSJobHandler(const char * _Nonnull, __strong xpc_object_t _Nonnull, __strong ATXCTSJobHandler _Nonnull)_block_invoke");
    [v24 handleFailureInFunction:v25, @"ATXCTSJobHelper.m", 21, @"Invalid parameter not satisfying: %@", @"handleCTSJob" file lineNumber description];
  }
  if (xpc_activity_get_state(v3) == 2)
  {
    id v4 = objc_alloc(MEMORY[0x1E4F4B450]);
    id v5 = [NSString stringWithUTF8String:*(void *)(a1 + 40)];
    id v6 = (void *)[v4 initWithActivity:v3 name:v5];

    LODWORD(v5) = [v6 didDefer];
    uint64_t v7 = __atxlog_handle_default();
    id v8 = v7;
    if (v5)
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 136315138;
        uint64_t v27 = v9;
        unint64_t v10 = "atxRegisterCTSJobHandler deferred activity before starting: %s";
LABEL_19:
        _os_log_impl(&dword_1D0FA3000, v8, OS_LOG_TYPE_DEFAULT, v10, buf, 0xCu);
      }
    }
    else
    {
      os_signpost_id_t v11 = os_signpost_id_generate(v7);

      unint64_t v12 = __atxlog_handle_default();
      char v13 = v12;
      unint64_t v14 = v11 - 1;
      if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
      {
        uint64_t v15 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = v15;
        _os_signpost_emit_with_name_impl(&dword_1D0FA3000, v13, OS_SIGNPOST_INTERVAL_BEGIN, v11, "CTS", "Job=%{public,signpost.telemetry:string1}s enableTelemetry=YES ", buf, 0xCu);
      }

      int v16 = (void *)MEMORY[0x1D25F6CC0]();
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
      uint64_t v17 = __atxlog_handle_default();
      uint64_t v18 = v17;
      if (v14 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v17))
      {
        uint64_t v19 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = v19;
        _os_signpost_emit_with_name_impl(&dword_1D0FA3000, v18, OS_SIGNPOST_INTERVAL_END, v11, "CTS", "Job=%{public,signpost.telemetry:string1}s enableTelemetry=YES ", buf, 0xCu);
      }

      if (![v6 didDefer]) {
        goto LABEL_21;
      }
      char v20 = __atxlog_handle_default();
      unsigned int v21 = v20;
      if (v14 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v20))
      {
        uint64_t v22 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 136446210;
        uint64_t v27 = v22;
        _os_signpost_emit_with_name_impl(&dword_1D0FA3000, v21, OS_SIGNPOST_EVENT, v11, "CTSDeferred", "Job=%{public,signpost.telemetry:string1}s enableTelemetry=YES ", buf, 0xCu);
      }

      id v8 = __atxlog_handle_default();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v23 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 136315138;
        uint64_t v27 = v23;
        unint64_t v10 = "atxRegisterCTSJobHandler deferred activity after partially running: %s";
        goto LABEL_19;
      }
    }

LABEL_21:
  }
}

void atxRegisterCTSJobHandlerForNonClassCLocked(const char *a1, void *a2, void *a3)
{
  id v5 = a3;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  v7[2] = __atxRegisterCTSJobHandlerForNonClassCLocked_block_invoke;
  v7[3] = &unk_1E68B5378;
  id v8 = v5;
  uint64_t v9 = a1;
  id v6 = v5;
  atxRegisterCTSJobHandler(a1, a2, v7);
}

void __atxRegisterCTSJobHandlerForNonClassCLocked_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([MEMORY[0x1E4F93B10] isClassCLocked])
  {
    id v4 = __atxlog_handle_default();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
      __atxRegisterCTSJobHandlerForNonClassCLocked_block_invoke_cold_1(a1, v4);
    }
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void onPostTestNotifReceive()
{
  id v0 = +[ATXActionNotificationServer sharedInstance];
  [v0 _postTestNotification];
}

void onPostTestNotifReceiveNoPrediction()
{
  id v0 = +[ATXActionNotificationServer sharedInstance];
  [v0 _postTestNotificationWithPredictionCount:0];
}

void onPostTestNotifReceiveManyPredictions()
{
  id v0 = +[ATXActionNotificationServer sharedInstance];
  [v0 _postTestNotificationWithPredictionCount:8];
}

void onPostTestNotifRemoveAll()
{
  id v0 = +[ATXActionNotificationServer sharedInstance];
  [v0 removeAllActionPredictionNotificationsAndTrackEvent:1 recordFeedback:0];
}

void sub_1D130E444(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1D130E7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D130F3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D130F7B4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1D130FC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D13122E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D13124E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D13125F4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_13(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void sub_1D13160C4(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1D131618C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1316214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D13162D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1316580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ATXMPBDonationCountTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        uint64_t v24 = PBReaderReadString();
        char v25 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = v24;
      }
      else
      {
        if (v17 == 2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 24) |= 2u;
          while (1)
          {
            uint64_t v28 = *v3;
            unint64_t v29 = *(void *)(a2 + v28);
            if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v2_Block_object_dispose(&STACK[0x210], 8) = v29 + 1;
            v20 |= (unint64_t)(v30 & 0x7F) << v26;
            if ((v30 & 0x80) == 0) {
              goto LABEL_43;
            }
            v26 += 7;
            BOOL v14 = v27++ >= 9;
            if (v14)
            {
              LODWORD(v20) = 0;
              goto LABEL_45;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_43:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v20) = 0;
          }
LABEL_45:
          uint64_t v32 = 20;
        }
        else
        {
          if (v17 != 1)
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 24) |= 1u;
          while (1)
          {
            uint64_t v21 = *v3;
            unint64_t v22 = *(void *)(a2 + v21);
            if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if ((v23 & 0x80) == 0) {
              goto LABEL_39;
            }
            v18 += 7;
            BOOL v14 = v19++ >= 9;
            if (v14)
            {
              LODWORD(v20) = 0;
              goto LABEL_41;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v20) = 0;
          }
LABEL_41:
          uint64_t v32 = 16;
        }
        *(_DWORD *)(a1 + v32) = v20;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D131909C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t ATXPBPredictionContextReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 52) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_46;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_48;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_46:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_48:
        *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x210], 8) = v19 != 0;
        goto LABEL_43;
      case 2u:
        uint64_t v24 = objc_alloc_init(ATXPBPredictionDeviceStateContext);
        objc_storeStrong((id *)(a1 + 16), v24);
        if (!PBReaderPlaceMark()
          || (ATXPBPredictionDeviceStateContextReadFrom((uint64_t)v24, a2) & 1) == 0)
        {
          goto LABEL_50;
        }
        goto LABEL_42;
      case 3u:
        uint64_t v24 = objc_alloc_init(ATXPBPredictionTimeContext);
        objc_storeStrong((id *)(a1 + 32), v24);
        if (!PBReaderPlaceMark() || (ATXPBPredictionTimeContextReadFrom((uint64_t)v24, a2) & 1) == 0) {
          goto LABEL_50;
        }
        goto LABEL_42;
      case 4u:
        uint64_t v24 = objc_alloc_init(ATXPBPredictionLocationMotionContext);
        objc_storeStrong((id *)(a1 + 24), v24);
        if (!PBReaderPlaceMark()
          || (ATXPBPredictionLocationMotionContextReadFrom((uint64_t)v24, a2) & 1) == 0)
        {
          goto LABEL_50;
        }
        goto LABEL_42;
      case 5u:
        uint64_t v24 = objc_alloc_init(ATXPBPredictionAmbientLightContext);
        objc_storeStrong((id *)(a1 + 8), v24);
        if (!PBReaderPlaceMark()
          || (ATXPBPredictionAmbientLightContextReadFrom((uint64_t)v24, a2) & 1) == 0)
        {
          goto LABEL_50;
        }
        goto LABEL_42;
      case 6u:
        uint64_t v24 = objc_alloc_init(ATXPBPredictionUserContext);
        objc_storeStrong((id *)(a1 + 40), v24);
        if PBReaderPlaceMark() && (ATXPBPredictionUserContextReadFrom((uint64_t)v24, a2))
        {
LABEL_42:
          PBReaderRecallMark();

LABEL_43:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_50:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_43;
    }
  }
}

void OUTLINED_FUNCTION_4_9(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x1Cu);
}

void sub_1D131D6CC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1D1320994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL ATXAnchorModelPBActionKeyMetadataReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        unsigned int v18 = *(ATXAnchorModelPBLaunchHistoryMetadata **)(a1 + 16);
        *(void *)(a1 + 16) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unsigned int v18 = objc_alloc_init(ATXAnchorModelPBLaunchHistoryMetadata);
    objc_storeStrong((id *)(a1 + 8), v18);
    if (!PBReaderPlaceMark() || !ATXAnchorModelPBLaunchHistoryMetadataReadFrom((uint64_t)v18, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D1321F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D132243C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D1324058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1324354(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

Class __getPRSServiceClass_block_invoke_0(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!PosterBoardServicesLibraryCore_frameworkLibrary_0)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __PosterBoardServicesLibraryCore_block_invoke_0;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E68B58D8;
    uint64_t v5 = 0;
    PosterBoardServicesLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  if (!PosterBoardServicesLibraryCore_frameworkLibrary_0) {
    __getPRSServiceClass_block_invoke_cold_1_0(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("PRSService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getPRSServiceClass_block_invoke_cold_2_0();
  }
  getPRSServiceClass_softClass_0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __PosterBoardServicesLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  PosterBoardServicesLibraryCore_frameworkLibrary_0 = result;
  return result;
}

double _ATXFeedbackComputeBetaMean(double a1, double a2)
{
  double result = 1.0;
  if (a1 != 0.0) {
    return a1 / (a1 + a2);
  }
  return result;
}

uint64_t bucketedInt(uint64_t result)
{
  if (result >= 0x65) {
    return 10 * (result / 0xA);
  }
  return result;
}

float roundToTwoSigFigs(float a1)
{
  return roundf(a1 * 100.0) / 100.0;
}

void sub_1D13275F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose(&a44, 8);
  _Block_object_dispose(&a48, 8);
  _Block_object_dispose(&a52, 8);
  _Block_object_dispose((const void *)(v52 - 232), 8);
  _Block_object_dispose((const void *)(v52 - 200), 8);
  _Block_object_dispose((const void *)(v52 - 168), 8);
  _Block_object_dispose((const void *)(v52 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1D132A768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL ATXPBBlendingSessionLogReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = objc_alloc_init(ATXPBBlendingSessionERMEvent);
        [a1 addErmEvent:v17];
        if (!PBReaderPlaceMark() || (ATXPBBlendingSessionERMEventReadFrom((uint64_t)v17, a2) & 1) == 0) {
          goto LABEL_30;
        }
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_27:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = objc_alloc_init(ATXPBBlendingSessionBlendingUpdate);
    [a1 addBlendingUpdate:v17];
    if (!PBReaderPlaceMark()
      || !ATXPBBlendingSessionBlendingUpdateReadFrom((id *)&v17->super.super.isa, a2))
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D1330150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1331E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXPBNotificationDeliveryEventReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v23 = PBReaderReadString();
        if (v23) {
          [(id)a1 addSuggestionUUID:v23];
        }
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_33;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_35:
        *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D1335BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t isPhotosPosterExtensionBundleId(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"com.apple.mobileslideshow.PhotosPosterProvider"]) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = [v1 isEqualToString:@"com.apple.PhotosUIPrivate.PhotosPosterProvider"];
  }

  return v2;
}

uint64_t isPhotosDescriptor(void *a1)
{
  id v1 = [a1 extensionBundleIdentifier];
  uint64_t v2 = isPhotosPosterExtensionBundleId(v1);

  return v2;
}

uint64_t isPhotoShuffleDescriptor(void *a1)
{
  id v1 = a1;
  if (isPhotosDescriptor(v1))
  {
    uint64_t v2 = [v1 identifier];
    uint64_t v3 = [v2 hasPrefix:@"SmartAlbum"];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

uint64_t ____atxlog_handle_default_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "general");
  uint64_t v1 = __atxlog_handle_default_log;
  __atxlog_handle_default_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_xpc()
{
  if (__atxlog_handle_xpc_onceToken != -1) {
    dispatch_once(&__atxlog_handle_xpc_onceToken, &__block_literal_global_4);
  }
  os_log_t v0 = (void *)__atxlog_handle_xpc_log;
  return v0;
}

uint64_t ____atxlog_handle_xpc_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "xpc");
  uint64_t v1 = __atxlog_handle_xpc_log;
  __atxlog_handle_xpc_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t ____atxlog_handle_heuristic_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "heuristic");
  uint64_t v1 = __atxlog_handle_heuristic_log;
  __atxlog_handle_heuristic_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_notifications()
{
  if (__atxlog_handle_notifications_onceToken != -1) {
    dispatch_once(&__atxlog_handle_notifications_onceToken, &__block_literal_global_10_0);
  }
  os_log_t v0 = (void *)__atxlog_handle_notifications_log;
  return v0;
}

uint64_t ____atxlog_handle_notifications_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "notifications");
  uint64_t v1 = __atxlog_handle_notifications_log;
  __atxlog_handle_notifications_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_pmm()
{
  if (__atxlog_handle_pmm_onceToken != -1) {
    dispatch_once(&__atxlog_handle_pmm_onceToken, &__block_literal_global_13_3);
  }
  os_log_t v0 = (void *)__atxlog_handle_pmm_log;
  return v0;
}

uint64_t ____atxlog_handle_pmm_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.mm", "GENERAL");
  uint64_t v1 = __atxlog_handle_pmm_log;
  __atxlog_handle_pmm_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_dailyroutines()
{
  if (__atxlog_handle_dailyroutines_onceToken != -1) {
    dispatch_once(&__atxlog_handle_dailyroutines_onceToken, &__block_literal_global_17_5);
  }
  os_log_t v0 = (void *)__atxlog_handle_dailyroutines_log;
  return v0;
}

uint64_t ____atxlog_handle_dailyroutines_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "dailyroutines");
  uint64_t v1 = __atxlog_handle_dailyroutines_log;
  __atxlog_handle_dailyroutines_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_feedback()
{
  if (__atxlog_handle_feedback_onceToken != -1) {
    dispatch_once(&__atxlog_handle_feedback_onceToken, &__block_literal_global_20_0);
  }
  os_log_t v0 = (void *)__atxlog_handle_feedback_log;
  return v0;
}

uint64_t ____atxlog_handle_feedback_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "feedback");
  uint64_t v1 = __atxlog_handle_feedback_log;
  __atxlog_handle_feedback_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_modes()
{
  if (__atxlog_handle_modes_onceToken != -1) {
    dispatch_once(&__atxlog_handle_modes_onceToken, &__block_literal_global_23_5);
  }
  os_log_t v0 = (void *)__atxlog_handle_modes_log;
  return v0;
}

uint64_t ____atxlog_handle_modes_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "modes");
  uint64_t v1 = __atxlog_handle_modes_log;
  __atxlog_handle_modes_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_hero()
{
  if (__atxlog_handle_hero_onceToken != -1) {
    dispatch_once(&__atxlog_handle_hero_onceToken, &__block_literal_global_26_3);
  }
  os_log_t v0 = (void *)__atxlog_handle_hero_log;
  return v0;
}

uint64_t ____atxlog_handle_hero_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "hero");
  uint64_t v1 = __atxlog_handle_hero_log;
  __atxlog_handle_hero_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_deletions()
{
  if (__atxlog_handle_deletions_onceToken != -1) {
    dispatch_once(&__atxlog_handle_deletions_onceToken, &__block_literal_global_29_3);
  }
  os_log_t v0 = (void *)__atxlog_handle_deletions_log;
  return v0;
}

uint64_t ____atxlog_handle_deletions_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "deletions");
  uint64_t v1 = __atxlog_handle_deletions_log;
  __atxlog_handle_deletions_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_gi()
{
  if (__atxlog_handle_gi_onceToken != -1) {
    dispatch_once(&__atxlog_handle_gi_onceToken, &__block_literal_global_32_2);
  }
  os_log_t v0 = (void *)__atxlog_handle_gi_log;
  return v0;
}

uint64_t ____atxlog_handle_gi_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "information");
  uint64_t v1 = __atxlog_handle_gi_log;
  __atxlog_handle_gi_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_timeline()
{
  if (__atxlog_handle_timeline_onceToken != -1) {
    dispatch_once(&__atxlog_handle_timeline_onceToken, &__block_literal_global_35_4);
  }
  os_log_t v0 = (void *)__atxlog_handle_timeline_log;
  return v0;
}

uint64_t ____atxlog_handle_timeline_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "timeline");
  uint64_t v1 = __atxlog_handle_timeline_log;
  __atxlog_handle_timeline_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_relevant_shortcut()
{
  if (__atxlog_handle_relevant_shortcut_onceToken != -1) {
    dispatch_once(&__atxlog_handle_relevant_shortcut_onceToken, &__block_literal_global_38_3);
  }
  os_log_t v0 = (void *)__atxlog_handle_relevant_shortcut_log;
  return v0;
}

uint64_t ____atxlog_handle_relevant_shortcut_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "relevant_shortcut");
  uint64_t v1 = __atxlog_handle_relevant_shortcut_log;
  __atxlog_handle_relevant_shortcut_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_relevance_model()
{
  if (__atxlog_handle_relevance_model_onceToken != -1) {
    dispatch_once(&__atxlog_handle_relevance_model_onceToken, &__block_literal_global_41_2);
  }
  os_log_t v0 = (void *)__atxlog_handle_relevance_model_log;
  return v0;
}

uint64_t ____atxlog_handle_relevance_model_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "relevance_model");
  uint64_t v1 = __atxlog_handle_relevance_model_log;
  __atxlog_handle_relevance_model_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_watch()
{
  if (__atxlog_handle_watch_onceToken != -1) {
    dispatch_once(&__atxlog_handle_watch_onceToken, &__block_literal_global_44_0);
  }
  os_log_t v0 = (void *)__atxlog_handle_watch_log;
  return v0;
}

uint64_t ____atxlog_handle_watch_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "watch");
  uint64_t v1 = __atxlog_handle_watch_log;
  __atxlog_handle_watch_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_ui()
{
  if (__atxlog_handle_ui_onceToken != -1) {
    dispatch_once(&__atxlog_handle_ui_onceToken, &__block_literal_global_47);
  }
  os_log_t v0 = (void *)__atxlog_handle_ui_log;
  return v0;
}

uint64_t ____atxlog_handle_ui_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "UI");
  uint64_t v1 = __atxlog_handle_ui_log;
  __atxlog_handle_ui_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_blending()
{
  if (__atxlog_handle_blending_onceToken != -1) {
    dispatch_once(&__atxlog_handle_blending_onceToken, &__block_literal_global_50_2);
  }
  os_log_t v0 = (void *)__atxlog_handle_blending_log;
  return v0;
}

uint64_t ____atxlog_handle_blending_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "blending");
  uint64_t v1 = __atxlog_handle_blending_log;
  __atxlog_handle_blending_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_blending_internal_cache()
{
  if (__atxlog_handle_blending_internal_cache_onceToken != -1) {
    dispatch_once(&__atxlog_handle_blending_internal_cache_onceToken, &__block_literal_global_53_1);
  }
  os_log_t v0 = (void *)__atxlog_handle_blending_internal_cache_log;
  return v0;
}

uint64_t ____atxlog_handle_blending_internal_cache_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "blending_internal_cache");
  uint64_t v1 = __atxlog_handle_blending_internal_cache_log;
  __atxlog_handle_blending_internal_cache_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_blending_ecosystem()
{
  if (__atxlog_handle_blending_ecosystem_onceToken != -1) {
    dispatch_once(&__atxlog_handle_blending_ecosystem_onceToken, &__block_literal_global_56_0);
  }
  os_log_t v0 = (void *)__atxlog_handle_blending_ecosystem_log;
  return v0;
}

uint64_t ____atxlog_handle_blending_ecosystem_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "blending_ecosystem");
  uint64_t v1 = __atxlog_handle_blending_ecosystem_log;
  __atxlog_handle_blending_ecosystem_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_home_screen()
{
  if (__atxlog_handle_home_screen_onceToken != -1) {
    dispatch_once(&__atxlog_handle_home_screen_onceToken, &__block_literal_global_59);
  }
  os_log_t v0 = (void *)__atxlog_handle_home_screen_log;
  return v0;
}

uint64_t ____atxlog_handle_home_screen_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "homescreen");
  uint64_t v1 = __atxlog_handle_home_screen_log;
  __atxlog_handle_home_screen_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_sleep_schedule()
{
  if (__atxlog_handle_sleep_schedule_onceToken != -1) {
    dispatch_once(&__atxlog_handle_sleep_schedule_onceToken, &__block_literal_global_62_1);
  }
  os_log_t v0 = (void *)__atxlog_handle_sleep_schedule_log;
  return v0;
}

uint64_t ____atxlog_handle_sleep_schedule_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "sleepschedule");
  uint64_t v1 = __atxlog_handle_sleep_schedule_log;
  __atxlog_handle_sleep_schedule_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_lock_screen()
{
  if (__atxlog_handle_lock_screen_onceToken != -1) {
    dispatch_once(&__atxlog_handle_lock_screen_onceToken, &__block_literal_global_65_4);
  }
  os_log_t v0 = (void *)__atxlog_handle_lock_screen_log;
  return v0;
}

uint64_t ____atxlog_handle_lock_screen_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "lockscreen");
  uint64_t v1 = __atxlog_handle_lock_screen_log;
  __atxlog_handle_lock_screen_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_anchor()
{
  if (__atxlog_handle_anchor_onceToken != -1) {
    dispatch_once(&__atxlog_handle_anchor_onceToken, &__block_literal_global_68);
  }
  os_log_t v0 = (void *)__atxlog_handle_anchor_log;
  return v0;
}

uint64_t ____atxlog_handle_anchor_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "anchor");
  uint64_t v1 = __atxlog_handle_anchor_log;
  __atxlog_handle_anchor_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_app_prediction()
{
  if (__atxlog_handle_app_prediction_onceToken != -1) {
    dispatch_once(&__atxlog_handle_app_prediction_onceToken, &__block_literal_global_71_0);
  }
  os_log_t v0 = (void *)__atxlog_handle_app_prediction_log;
  return v0;
}

uint64_t ____atxlog_handle_app_prediction_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "app_prediction");
  uint64_t v1 = __atxlog_handle_app_prediction_log;
  __atxlog_handle_app_prediction_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_action_prediction()
{
  if (__atxlog_handle_action_prediction_onceToken != -1) {
    dispatch_once(&__atxlog_handle_action_prediction_onceToken, &__block_literal_global_74);
  }
  os_log_t v0 = (void *)__atxlog_handle_action_prediction_log;
  return v0;
}

uint64_t ____atxlog_handle_action_prediction_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "action_prediction");
  uint64_t v1 = __atxlog_handle_action_prediction_log;
  __atxlog_handle_action_prediction_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t ____atxlog_handle_app_library_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "app_library");
  uint64_t v1 = __atxlog_handle_app_library_log;
  __atxlog_handle_app_library_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_app_install()
{
  if (__atxlog_handle_app_install_onceToken != -1) {
    dispatch_once(&__atxlog_handle_app_install_onceToken, &__block_literal_global_80_0);
  }
  os_log_t v0 = (void *)__atxlog_handle_app_install_log;
  return v0;
}

uint64_t ____atxlog_handle_app_install_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "app_install");
  uint64_t v1 = __atxlog_handle_app_install_log;
  __atxlog_handle_app_install_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t ____atxlog_handle_backup_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "backup");
  uint64_t v1 = __atxlog_handle_backup_log;
  __atxlog_handle_backup_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_metrics()
{
  if (__atxlog_handle_metrics_onceToken != -1) {
    dispatch_once(&__atxlog_handle_metrics_onceToken, &__block_literal_global_86_1);
  }
  os_log_t v0 = (void *)__atxlog_handle_metrics_log;
  return v0;
}

uint64_t ____atxlog_handle_metrics_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "metrics");
  uint64_t v1 = __atxlog_handle_metrics_log;
  __atxlog_handle_metrics_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_trial_assets()
{
  if (__atxlog_handle_trial_assets_onceToken != -1) {
    dispatch_once(&__atxlog_handle_trial_assets_onceToken, &__block_literal_global_89_3);
  }
  os_log_t v0 = (void *)__atxlog_handle_trial_assets_log;
  return v0;
}

uint64_t ____atxlog_handle_trial_assets_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "trial_assets");
  uint64_t v1 = __atxlog_handle_trial_assets_log;
  __atxlog_handle_trial_assets_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_notification_management()
{
  if (__atxlog_handle_notification_management_onceToken != -1) {
    dispatch_once(&__atxlog_handle_notification_management_onceToken, &__block_literal_global_92_0);
  }
  os_log_t v0 = (void *)__atxlog_handle_notification_management_log;
  return v0;
}

uint64_t ____atxlog_handle_notification_management_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "notification_management");
  uint64_t v1 = __atxlog_handle_notification_management_log;
  __atxlog_handle_notification_management_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_contextual_actions()
{
  if (__atxlog_handle_contextual_actions_onceToken != -1) {
    dispatch_once(&__atxlog_handle_contextual_actions_onceToken, &__block_literal_global_95_1);
  }
  os_log_t v0 = (void *)__atxlog_handle_contextual_actions_log;
  return v0;
}

uint64_t ____atxlog_handle_contextual_actions_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "contextual_actions");
  uint64_t v1 = __atxlog_handle_contextual_actions_log;
  __atxlog_handle_contextual_actions_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_intents_helper()
{
  if (__atxlog_handle_intents_helper_onceToken != -1) {
    dispatch_once(&__atxlog_handle_intents_helper_onceToken, &__block_literal_global_98_1);
  }
  os_log_t v0 = (void *)__atxlog_handle_intents_helper_log;
  return v0;
}

uint64_t ____atxlog_handle_intents_helper_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "intents_helper");
  uint64_t v1 = __atxlog_handle_intents_helper_log;
  __atxlog_handle_intents_helper_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_context_heuristic()
{
  if (__atxlog_handle_context_heuristic_onceToken != -1) {
    dispatch_once(&__atxlog_handle_context_heuristic_onceToken, &__block_literal_global_101_0);
  }
  os_log_t v0 = (void *)__atxlog_handle_context_heuristic_log;
  return v0;
}

uint64_t ____atxlog_handle_context_heuristic_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "context_heuristic");
  uint64_t v1 = __atxlog_handle_context_heuristic_log;
  __atxlog_handle_context_heuristic_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_zkw_hide()
{
  if (__atxlog_handle_zkw_hide_onceToken != -1) {
    dispatch_once(&__atxlog_handle_zkw_hide_onceToken, &__block_literal_global_104);
  }
  os_log_t v0 = (void *)__atxlog_handle_zkw_hide_log;
  return v0;
}

uint64_t ____atxlog_handle_zkw_hide_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "zkw_hide");
  uint64_t v1 = __atxlog_handle_zkw_hide_log;
  __atxlog_handle_zkw_hide_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_context_user_education_suggestions()
{
  if (__atxlog_handle_context_user_education_suggestions_onceToken != -1) {
    dispatch_once(&__atxlog_handle_context_user_education_suggestions_onceToken, &__block_literal_global_107);
  }
  os_log_t v0 = (void *)__atxlog_handle_context_user_education_suggestions_log;
  return v0;
}

uint64_t ____atxlog_handle_context_user_education_suggestions_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "user_education_suggestions");
  uint64_t v1 = __atxlog_handle_context_user_education_suggestions_log;
  __atxlog_handle_context_user_education_suggestions_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_time_intelligence()
{
  if (__atxlog_handle_time_intelligence_onceToken != -1) {
    dispatch_once(&__atxlog_handle_time_intelligence_onceToken, &__block_literal_global_110);
  }
  os_log_t v0 = (void *)__atxlog_handle_time_intelligence_log;
  return v0;
}

uint64_t ____atxlog_handle_time_intelligence_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "time");
  uint64_t v1 = __atxlog_handle_time_intelligence_log;
  __atxlog_handle_time_intelligence_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_contextual_engine()
{
  if (__atxlog_handle_contextual_engine_onceToken != -1) {
    dispatch_once(&__atxlog_handle_contextual_engine_onceToken, &__block_literal_global_113_0);
  }
  os_log_t v0 = (void *)__atxlog_handle_contextual_engine_log;
  return v0;
}

uint64_t ____atxlog_handle_contextual_engine_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "contextualengine");
  uint64_t v1 = __atxlog_handle_contextual_engine_log;
  __atxlog_handle_contextual_engine_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_usage_insights()
{
  if (__atxlog_handle_usage_insights_onceToken[0] != -1) {
    dispatch_once(__atxlog_handle_usage_insights_onceToken, &__block_literal_global_116);
  }
  os_log_t v0 = (void *)__atxlog_handle_usage_insights_log;
  return v0;
}

uint64_t ____atxlog_handle_usage_insights_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "usage_insights");
  uint64_t v1 = __atxlog_handle_usage_insights_log;
  __atxlog_handle_usage_insights_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id __atxlog_handle_notification_categorization()
{
  if (__atxlog_handle_notification_categorization_onceToken != -1) {
    dispatch_once(&__atxlog_handle_notification_categorization_onceToken, &__block_literal_global_119);
  }
  os_log_t v0 = (void *)__atxlog_handle_notification_categorization_log;
  return v0;
}

uint64_t ____atxlog_handle_notification_categorization_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "notification_categorization");
  uint64_t v1 = __atxlog_handle_notification_categorization_log;
  __atxlog_handle_notification_categorization_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

uint64_t ____atxlog_handle_settings_actions_block_invoke()
{
  os_log_t v0 = os_log_create("com.apple.duetexpertd.atx", "settings_actions");
  uint64_t v1 = __atxlog_handle_settings_actions_log;
  __atxlog_handle_settings_actions_log = (uint64_t)v0;
  return MEMORY[0x1F41817F8](v0, v1);
}

id createHeuristicWidget(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, double a6)
{
  uint64_t v11 = (objc_class *)MEMORY[0x1E4F4B0D0];
  id v12 = a4;
  id v13 = a3;
  id v14 = a2;
  id v15 = objc_alloc_init(v11);
  [v15 setSize:a1];
  [v15 setWidgetKind:v14];

  [v15 setExtensionBundleId:v13];
  [v15 setAppBundleId:v12];

  [v15 setScore:a6];
  [v15 setPredictionSource:@"Heuristic"];
  [v15 setRequiresAppLaunch:a5];
  return v15;
}

void sub_1D133EA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D133EC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXMPBScreenLogUnlockSessionTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = &OBJC_IVAR___ATXModeEntityCorrelatorInternalState__totalModeLaunchesHistogramPerEntity;
    char v8 = &OBJC_IVAR___ATXModeEntityCorrelatorInternalState__totalModeLaunchesHistogramPerEntity;
    unsigned int v9 = (int *)MEMORY[0x1E4F940B8];
    unint64_t v10 = &OBJC_IVAR___ATXModeEntityCorrelatorInternalState__totalModeLaunchesHistogramPerEntity;
    uint64_t v11 = &OBJC_IVAR___ATXModeEntityCorrelatorInternalState__totalModeLaunchesHistogramPerEntity;
    id v12 = &OBJC_IVAR___ATXModeEntityCorrelatorInternalState__totalModeLaunchesHistogramPerEntity;
    id v13 = &OBJC_IVAR___ATXModeEntityCorrelatorInternalState__totalModeLaunchesHistogramPerEntity;
    id v14 = &OBJC_IVAR___ATXModeEntityCorrelatorInternalState__totalModeLaunchesHistogramPerEntity;
    id v15 = &OBJC_IVAR___ATXModeEntityCorrelatorInternalState__totalModeLaunchesHistogramPerEntity;
    int v16 = &OBJC_IVAR___ATXModeEntityCorrelatorInternalState__totalModeLaunchesHistogramPerEntity;
    char v17 = &OBJC_IVAR___ATXModeEntityCorrelatorInternalState__totalModeLaunchesHistogramPerEntity;
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v18 = 0;
      unsigned int v19 = 0;
      unint64_t v20 = 0;
      while (1)
      {
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v23 = *(unsigned char *)(*(void *)(a2 + *v9) + v22);
        *(void *)(a2 + v21) = v22 + 1;
        v20 |= (unint64_t)(v23 & 0x7F) << v18;
        if ((v23 & 0x80) == 0) {
          goto LABEL_12;
        }
        v18 += 7;
        BOOL v24 = v19++ >= 9;
        if (v24)
        {
          unint64_t v20 = 0;
          int v25 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v25 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v20 = 0;
      }
LABEL_14:
      if (v25 || (v20 & 7) == 4) {
        break;
      }
      switch((v20 >> 3))
      {
        case 1u:
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          *(_DWORD *)(a1 + v7[263]) |= 0x80u;
          while (1)
          {
            uint64_t v30 = *v3;
            unint64_t v31 = *(void *)(a2 + v30);
            if (v31 == -1 || v31 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v32 = *(unsigned char *)(*(void *)(a2 + *v9) + v31);
            *(void *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0) {
              goto LABEL_169;
            }
            v27 += 7;
            BOOL v24 = v28++ >= 9;
            if (v24)
            {
              LODWORD(v29) = 0;
              goto LABEL_171;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_169:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_171:
          uint64_t v152 = v8[264];
          goto LABEL_244;
        case 2u:
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v29 = 0;
          *(_DWORD *)(a1 + v7[263]) |= 0x10u;
          while (2)
          {
            uint64_t v41 = *v3;
            unint64_t v42 = *(void *)(a2 + v41);
            if (v42 == -1 || v42 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v43 = *(unsigned char *)(*(void *)(a2 + *v9) + v42);
              *(void *)(a2 + v41) = v42 + 1;
              v29 |= (unint64_t)(v43 & 0x7F) << v39;
              if (v43 < 0)
              {
                v39 += 7;
                BOOL v24 = v40++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_175;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_175:
          uint64_t v152 = v10[265];
          goto LABEL_244;
        case 3u:
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v29 = 0;
          *(_DWORD *)(a1 + v7[263]) |= 8u;
          while (2)
          {
            uint64_t v46 = *v3;
            unint64_t v47 = *(void *)(a2 + v46);
            if (v47 == -1 || v47 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v48 = *(unsigned char *)(*(void *)(a2 + *v9) + v47);
              *(void *)(a2 + v46) = v47 + 1;
              v29 |= (unint64_t)(v48 & 0x7F) << v44;
              if (v48 < 0)
              {
                v44 += 7;
                BOOL v24 = v45++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_179;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_179:
          uint64_t v152 = v11[266];
          goto LABEL_244;
        case 4u:
          char v49 = 0;
          unsigned int v50 = 0;
          uint64_t v29 = 0;
          *(_DWORD *)(a1 + v7[263]) |= 0x20u;
          while (2)
          {
            uint64_t v51 = *v3;
            unint64_t v52 = *(void *)(a2 + v51);
            if (v52 == -1 || v52 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v53 = *(unsigned char *)(*(void *)(a2 + *v9) + v52);
              *(void *)(a2 + v51) = v52 + 1;
              v29 |= (unint64_t)(v53 & 0x7F) << v49;
              if (v53 < 0)
              {
                v49 += 7;
                BOOL v24 = v50++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_183;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_183:
          uint64_t v152 = v12[267];
          goto LABEL_244;
        case 5u:
          char v54 = 0;
          unsigned int v55 = 0;
          uint64_t v29 = 0;
          *(_DWORD *)(a1 + v7[263]) |= 2u;
          while (2)
          {
            uint64_t v56 = *v3;
            unint64_t v57 = *(void *)(a2 + v56);
            if (v57 == -1 || v57 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v58 = *(unsigned char *)(*(void *)(a2 + *v9) + v57);
              *(void *)(a2 + v56) = v57 + 1;
              v29 |= (unint64_t)(v58 & 0x7F) << v54;
              if (v58 < 0)
              {
                v54 += 7;
                BOOL v24 = v55++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_187;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_187:
          uint64_t v152 = v13[268];
          goto LABEL_244;
        case 6u:
          char v59 = 0;
          unsigned int v60 = 0;
          uint64_t v29 = 0;
          *(_DWORD *)(a1 + v7[263]) |= 1u;
          while (2)
          {
            uint64_t v61 = *v3;
            unint64_t v62 = *(void *)(a2 + v61);
            if (v62 == -1 || v62 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v63 = *(unsigned char *)(*(void *)(a2 + *v9) + v62);
              *(void *)(a2 + v61) = v62 + 1;
              v29 |= (unint64_t)(v63 & 0x7F) << v59;
              if (v63 < 0)
              {
                v59 += 7;
                BOOL v24 = v60++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_191;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_191:
          uint64_t v152 = v14[269];
          goto LABEL_244;
        case 7u:
          char v64 = 0;
          unsigned int v65 = 0;
          uint64_t v66 = 0;
          *(_DWORD *)(a1 + v7[263]) |= 0x10000u;
          while (2)
          {
            uint64_t v67 = *v3;
            unint64_t v68 = *(void *)(a2 + v67);
            if (v68 == -1 || v68 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v69 = *(unsigned char *)(*(void *)(a2 + *v9) + v68);
              *(void *)(a2 + v67) = v68 + 1;
              v66 |= (unint64_t)(v69 & 0x7F) << v64;
              if (v69 < 0)
              {
                v64 += 7;
                BOOL v24 = v65++ >= 9;
                if (v24)
                {
                  uint64_t v66 = 0;
                  goto LABEL_195;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v66 = 0;
          }
LABEL_195:
          BOOL v153 = v66 != 0;
          uint64_t v154 = v15[270];
          goto LABEL_253;
        case 8u:
          char v70 = 0;
          unsigned int v71 = 0;
          uint64_t v72 = 0;
          *(_DWORD *)(a1 + v7[263]) |= 0x20000u;
          while (2)
          {
            uint64_t v73 = *v3;
            unint64_t v74 = *(void *)(a2 + v73);
            if (v74 == -1 || v74 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v75 = *(unsigned char *)(*(void *)(a2 + *v9) + v74);
              *(void *)(a2 + v73) = v74 + 1;
              v72 |= (unint64_t)(v75 & 0x7F) << v70;
              if (v75 < 0)
              {
                v70 += 7;
                BOOL v24 = v71++ >= 9;
                if (v24)
                {
                  uint64_t v72 = 0;
                  goto LABEL_199;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v72 = 0;
          }
LABEL_199:
          BOOL v153 = v72 != 0;
          uint64_t v154 = v16[271];
          goto LABEL_253;
        case 9u:
          char v76 = 0;
          unsigned int v77 = 0;
          uint64_t v78 = 0;
          *(_DWORD *)(a1 + v7[263]) |= 0x400u;
          while (2)
          {
            uint64_t v79 = *v3;
            unint64_t v80 = *(void *)(a2 + v79);
            if (v80 == -1 || v80 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v81 = *(unsigned char *)(*(void *)(a2 + *v9) + v80);
              *(void *)(a2 + v79) = v80 + 1;
              v78 |= (unint64_t)(v81 & 0x7F) << v76;
              if (v81 < 0)
              {
                v76 += 7;
                BOOL v24 = v77++ >= 9;
                if (v24)
                {
                  uint64_t v78 = 0;
                  goto LABEL_203;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v78 = 0;
          }
LABEL_203:
          BOOL v153 = v78 != 0;
          uint64_t v154 = v17[272];
          goto LABEL_253;
        case 0xAu:
          char v82 = 0;
          unsigned int v83 = 0;
          uint64_t v84 = 0;
          *(_DWORD *)(a1 + v7[263]) |= 0x100u;
          while (2)
          {
            uint64_t v85 = *v3;
            unint64_t v86 = *(void *)(a2 + v85);
            if (v86 == -1 || v86 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v87 = *(unsigned char *)(*(void *)(a2 + *v9) + v86);
              *(void *)(a2 + v85) = v86 + 1;
              v84 |= (unint64_t)(v87 & 0x7F) << v82;
              if (v87 < 0)
              {
                v82 += 7;
                BOOL v24 = v83++ >= 9;
                if (v24)
                {
                  uint64_t v84 = 0;
                  goto LABEL_207;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v84 = 0;
          }
LABEL_207:
          BOOL v153 = v84 != 0;
          uint64_t v154 = 40;
          goto LABEL_253;
        case 0xBu:
          char v88 = 0;
          unsigned int v89 = 0;
          uint64_t v90 = 0;
          *(_DWORD *)(a1 + v7[263]) |= 0x8000u;
          while (2)
          {
            uint64_t v91 = *v3;
            unint64_t v92 = *(void *)(a2 + v91);
            if (v92 == -1 || v92 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v93 = *(unsigned char *)(*(void *)(a2 + *v9) + v92);
              *(void *)(a2 + v91) = v92 + 1;
              v90 |= (unint64_t)(v93 & 0x7F) << v88;
              if (v93 < 0)
              {
                v88 += 7;
                BOOL v24 = v89++ >= 9;
                if (v24)
                {
                  uint64_t v90 = 0;
                  goto LABEL_211;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v90 = 0;
          }
LABEL_211:
          BOOL v153 = v90 != 0;
          uint64_t v154 = 47;
          goto LABEL_253;
        case 0xCu:
          char v94 = 0;
          unsigned int v95 = 0;
          uint64_t v96 = 0;
          *(_DWORD *)(a1 + v7[263]) |= 0x4000u;
          while (2)
          {
            uint64_t v97 = *v3;
            unint64_t v98 = *(void *)(a2 + v97);
            if (v98 == -1 || v98 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v99 = *(unsigned char *)(*(void *)(a2 + *v9) + v98);
              *(void *)(a2 + v97) = v98 + 1;
              v96 |= (unint64_t)(v99 & 0x7F) << v94;
              if (v99 < 0)
              {
                v94 += 7;
                BOOL v24 = v95++ >= 9;
                if (v24)
                {
                  uint64_t v96 = 0;
                  goto LABEL_215;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v96 = 0;
          }
LABEL_215:
          BOOL v153 = v96 != 0;
          uint64_t v154 = 46;
          goto LABEL_253;
        case 0xDu:
          char v100 = 0;
          unsigned int v101 = 0;
          uint64_t v102 = 0;
          *(_DWORD *)(a1 + v7[263]) |= 0x100000u;
          while (2)
          {
            uint64_t v103 = *v3;
            unint64_t v104 = *(void *)(a2 + v103);
            if (v104 == -1 || v104 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v105 = *(unsigned char *)(*(void *)(a2 + *v9) + v104);
              *(void *)(a2 + v103) = v104 + 1;
              v102 |= (unint64_t)(v105 & 0x7F) << v100;
              if (v105 < 0)
              {
                v100 += 7;
                BOOL v24 = v101++ >= 9;
                if (v24)
                {
                  uint64_t v102 = 0;
                  goto LABEL_219;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v102 = 0;
          }
LABEL_219:
          BOOL v153 = v102 != 0;
          uint64_t v154 = 52;
          goto LABEL_253;
        case 0xEu:
          char v106 = 0;
          unsigned int v107 = 0;
          uint64_t v108 = 0;
          *(_DWORD *)(a1 + v7[263]) |= 0x2000u;
          while (2)
          {
            uint64_t v109 = *v3;
            unint64_t v110 = *(void *)(a2 + v109);
            if (v110 == -1 || v110 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v111 = *(unsigned char *)(*(void *)(a2 + *v9) + v110);
              *(void *)(a2 + v109) = v110 + 1;
              v108 |= (unint64_t)(v111 & 0x7F) << v106;
              if (v111 < 0)
              {
                v106 += 7;
                BOOL v24 = v107++ >= 9;
                if (v24)
                {
                  uint64_t v108 = 0;
                  goto LABEL_223;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v108 = 0;
          }
LABEL_223:
          BOOL v153 = v108 != 0;
          uint64_t v154 = 45;
          goto LABEL_253;
        case 0xFu:
          char v112 = 0;
          unsigned int v113 = 0;
          uint64_t v114 = 0;
          *(_DWORD *)(a1 + v7[263]) |= 0x200u;
          while (2)
          {
            uint64_t v115 = *v3;
            unint64_t v116 = *(void *)(a2 + v115);
            if (v116 == -1 || v116 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v117 = *(unsigned char *)(*(void *)(a2 + *v9) + v116);
              *(void *)(a2 + v115) = v116 + 1;
              v114 |= (unint64_t)(v117 & 0x7F) << v112;
              if (v117 < 0)
              {
                v112 += 7;
                BOOL v24 = v113++ >= 9;
                if (v24)
                {
                  uint64_t v114 = 0;
                  goto LABEL_227;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v114 = 0;
          }
LABEL_227:
          BOOL v153 = v114 != 0;
          uint64_t v154 = 41;
          goto LABEL_253;
        case 0x10u:
          char v118 = 0;
          unsigned int v119 = 0;
          uint64_t v120 = 0;
          *(_DWORD *)(a1 + v7[263]) |= 0x80000u;
          while (2)
          {
            uint64_t v121 = *v3;
            unint64_t v122 = *(void *)(a2 + v121);
            if (v122 == -1 || v122 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v123 = *(unsigned char *)(*(void *)(a2 + *v9) + v122);
              *(void *)(a2 + v121) = v122 + 1;
              v120 |= (unint64_t)(v123 & 0x7F) << v118;
              if (v123 < 0)
              {
                v118 += 7;
                BOOL v24 = v119++ >= 9;
                if (v24)
                {
                  uint64_t v120 = 0;
                  goto LABEL_231;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v120 = 0;
          }
LABEL_231:
          BOOL v153 = v120 != 0;
          uint64_t v154 = 51;
          goto LABEL_253;
        case 0x11u:
          char v124 = 0;
          unsigned int v125 = 0;
          uint64_t v126 = 0;
          *(_DWORD *)(a1 + v7[263]) |= 0x1000u;
          while (2)
          {
            uint64_t v127 = *v3;
            unint64_t v128 = *(void *)(a2 + v127);
            if (v128 == -1 || v128 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v129 = *(unsigned char *)(*(void *)(a2 + *v9) + v128);
              *(void *)(a2 + v127) = v128 + 1;
              v126 |= (unint64_t)(v129 & 0x7F) << v124;
              if (v129 < 0)
              {
                v124 += 7;
                BOOL v24 = v125++ >= 9;
                if (v24)
                {
                  uint64_t v126 = 0;
                  goto LABEL_235;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v126 = 0;
          }
LABEL_235:
          BOOL v153 = v126 != 0;
          uint64_t v154 = 44;
          goto LABEL_253;
        case 0x12u:
          char v130 = 0;
          unsigned int v131 = 0;
          uint64_t v29 = 0;
          *(_DWORD *)(a1 + v7[263]) |= 0x40u;
          while (2)
          {
            uint64_t v132 = *v3;
            unint64_t v133 = *(void *)(a2 + v132);
            if (v133 == -1 || v133 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v134 = *(unsigned char *)(*(void *)(a2 + *v9) + v133);
              *(void *)(a2 + v132) = v133 + 1;
              v29 |= (unint64_t)(v134 & 0x7F) << v130;
              if (v134 < 0)
              {
                v130 += 7;
                BOOL v24 = v131++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_239;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_239:
          uint64_t v152 = 32;
          goto LABEL_244;
        case 0x13u:
          char v135 = 0;
          unsigned int v136 = 0;
          uint64_t v29 = 0;
          *(_DWORD *)(a1 + v7[263]) |= 4u;
          while (2)
          {
            uint64_t v137 = *v3;
            unint64_t v138 = *(void *)(a2 + v137);
            if (v138 == -1 || v138 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v139 = *(unsigned char *)(*(void *)(a2 + *v9) + v138);
              *(void *)(a2 + v137) = v138 + 1;
              v29 |= (unint64_t)(v139 & 0x7F) << v135;
              if (v139 < 0)
              {
                v135 += 7;
                BOOL v24 = v136++ >= 9;
                if (v24)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_243;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_243:
          uint64_t v152 = 16;
LABEL_244:
          *(_DWORD *)(a1 + v152) = v29;
          continue;
        case 0x14u:
          char v140 = 0;
          unsigned int v141 = 0;
          uint64_t v142 = 0;
          *(_DWORD *)(a1 + v7[263]) |= 0x40000u;
          while (2)
          {
            uint64_t v143 = *v3;
            unint64_t v144 = *(void *)(a2 + v143);
            if (v144 == -1 || v144 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v145 = *(unsigned char *)(*(void *)(a2 + *v9) + v144);
              *(void *)(a2 + v143) = v144 + 1;
              v142 |= (unint64_t)(v145 & 0x7F) << v140;
              if (v145 < 0)
              {
                v140 += 7;
                BOOL v24 = v141++ >= 9;
                if (v24)
                {
                  uint64_t v142 = 0;
                  goto LABEL_248;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v142 = 0;
          }
LABEL_248:
          BOOL v153 = v142 != 0;
          uint64_t v154 = 50;
          goto LABEL_253;
        case 0x15u:
          char v146 = 0;
          unsigned int v147 = 0;
          uint64_t v148 = 0;
          *(_DWORD *)(a1 + v7[263]) |= 0x800u;
          break;
        default:
          uint64_t v33 = v8;
          unint64_t v34 = v10;
          char v35 = v11;
          unsigned int v36 = v7;
          uint64_t v37 = v12;
          uint64_t result = PBReaderSkipValueWithTag();
          uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
          id v12 = v37;
          id v13 = &OBJC_IVAR___ATXModeEntityCorrelatorInternalState__totalModeLaunchesHistogramPerEntity;
          uint64_t v7 = v36;
          id v14 = &OBJC_IVAR___ATXModeEntityCorrelatorInternalState__totalModeLaunchesHistogramPerEntity;
          uint64_t v11 = v35;
          id v15 = &OBJC_IVAR___ATXModeEntityCorrelatorInternalState__totalModeLaunchesHistogramPerEntity;
          unint64_t v10 = v34;
          char v17 = &OBJC_IVAR___ATXModeEntityCorrelatorInternalState__totalModeLaunchesHistogramPerEntity;
          char v8 = v33;
          int v16 = &OBJC_IVAR___ATXModeEntityCorrelatorInternalState__totalModeLaunchesHistogramPerEntity;
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v149 = *v3;
        unint64_t v150 = *(void *)(a2 + v149);
        if (v150 == -1 || v150 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v151 = *(unsigned char *)(*(void *)(a2 + *v9) + v150);
        *(void *)(a2 + v149) = v150 + 1;
        v148 |= (unint64_t)(v151 & 0x7F) << v146;
        if ((v151 & 0x80) == 0) {
          goto LABEL_250;
        }
        v146 += 7;
        BOOL v24 = v147++ >= 9;
        if (v24)
        {
          uint64_t v148 = 0;
          goto LABEL_252;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_250:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v148 = 0;
      }
LABEL_252:
      BOOL v153 = v148 != 0;
      uint64_t v154 = 43;
LABEL_253:
      *(unsigned char *)(a1 + v154) = v153;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D13434F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D1344638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D134597C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D1345C18(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D1345CC4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D1345EF4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D1345F74(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D1345FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1D134738C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL ATXTimelineRelevancePBFeatureVectorReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 24) |= 2u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4))
          {
            BOOL v24 = &OBJC_IVAR___ATXTimelineRelevancePBFeatureVector__appLaunchPopularity;
            goto LABEL_38;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            break;
          }
          v17 += 7;
          BOOL v23 = v18++ > 8;
          if (v23)
          {
            uint64_t v19 = 0;
            BOOL v24 = &OBJC_IVAR___ATXTimelineRelevancePBFeatureVector__appLaunchPopularity;
            goto LABEL_41;
          }
        }
        BOOL v24 = &OBJC_IVAR___ATXTimelineRelevancePBFeatureVector__appLaunchPopularity;
LABEL_39:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_41:
        *(void *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_42:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v25 = 0;
    unsigned int v26 = 0;
    uint64_t v19 = 0;
    *(unsigned char *)(a1 + 24) |= 1u;
    while (1)
    {
      uint64_t v27 = *v3;
      unint64_t v28 = *(void *)(a2 + v27);
      if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
      *(void *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        BOOL v24 = &OBJC_IVAR___ATXTimelineRelevancePBFeatureVector__appLaunchCount;
        goto LABEL_39;
      }
      v25 += 7;
      BOOL v23 = v26++ > 8;
      if (v23)
      {
        uint64_t v19 = 0;
        BOOL v24 = &OBJC_IVAR___ATXTimelineRelevancePBFeatureVector__appLaunchCount;
        goto LABEL_41;
      }
    }
    BOOL v24 = &OBJC_IVAR___ATXTimelineRelevancePBFeatureVector__appLaunchCount;
LABEL_38:
    *(unsigned char *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t DNDModeSemanticTypeToSuggestedFaceType(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) < 0xB) {
    return qword_1D142BF20[a1 + 1];
  }
  uint64_t v3 = __atxlog_handle_modes();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT)) {
    DNDModeSemanticTypeToSuggestedFaceType_cold_1(a1, v3);
  }

  return 0;
}

void sub_1D134C104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_1D134E2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D134E43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D134F254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D134F9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D134FAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id calendarWithTimeZone(void *a1)
{
  uint64_t v1 = (void *)MEMORY[0x1E4F1C9A8];
  id v2 = a1;
  uint64_t v3 = [v1 currentCalendar];
  [v3 setTimeZone:v2];

  return v3;
}

void sub_1D13534D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1354EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D13550A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ATXMPBHeroAppEngagementTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 16;
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 28) |= 1u;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_34;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_36;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_34:
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v20) = 0;
            }
LABEL_36:
            *(_DWORD *)(a1 + 24) = v20;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 8;
      }
      unsigned int v26 = *(void **)(a1 + v25);
      *(void *)(a1 + v25) = v24;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D1357AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, id *a12, id *a13, id *location, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  objc_destroyWeak(location);
  _Block_object_dispose(&a52, 8);
  _Block_object_dispose(&a58, 8);
  _Block_object_dispose(&a62, 8);
  _Block_object_dispose(&a68, 8);
  _Block_object_dispose(&a72, 8);
  _Block_object_dispose(&STACK[0x228], 8);
  objc_destroyWeak(a13);
  objc_destroyWeak(a12);
  objc_destroyWeak((id *)&STACK[0x2B0]);
  _Unwind_Resume(a1);
}

void sub_1D135A4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1D135A5B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D135A828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D135A9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1D135AC64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D135ADBC(_Unwind_Exception *a1)
{
  long long v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1D135AF90(_Unwind_Exception *a1)
{
  uint64_t v7 = v5;

  _Unwind_Resume(a1);
}

void sub_1D135B0B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D135B258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1D135B4BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D135B6E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D135B880(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_15(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x16u);
}

void loadArray(uint64_t a1, void *a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = 0;
  unint64_t v5 = 0x1E4F4A000uLL;
  uint64_t v6 = *MEMORY[0x1E4F1C3B8];
  uint64_t v41 = a1;
  uint64_t v7 = a1;
  id v38 = v3;
  do
  {
    unint64_t v42 = [*(id *)(v5 + 3672) actionFeedbackStageToString:v4];
    char v8 = objc_msgSend(v3, "objectForKeyedSubscript:");
    if (v8)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        [v8 floatValue];
        uint64_t v9 = 0;
        __asm { FCVT            H0, S0 }
        int16x8_t v15 = vdupq_lane_s16(_D0, 0);
        do
        {
          *(int16x8_t *)(v7 + v9) = v15;
          v9 += 16;
        }
        while (v9 != 96);
      }
      else
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v16 = v4;
          char v39 = v8;
          id v17 = v8;
          char v18 = [v17 objectForKeyedSubscript:@"Default"];
          [v18 floatValue];
          _S8 = v19;

          uint64_t v21 = 0;
          __asm { FCVT            H0, S8 }
          int16x8_t v23 = vdupq_lane_s16(_D0, 0);
          do
          {
            *(int16x8_t *)(v7 + v21) = v23;
            v21 += 16;
          }
          while (v21 != 96);
          uint64_t v40 = v7;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          uint64_t v24 = [v17 allKeys];
          uint64_t v25 = [v24 countByEnumeratingWithState:&v44 objects:v52 count:16];
          if (v25)
          {
            uint64_t v26 = v25;
            uint64_t v27 = *(void *)v45;
            do
            {
              for (uint64_t i = 0; i != v26; ++i)
              {
                if (*(void *)v45 != v27) {
                  objc_enumerationMutation(v24);
                }
                char v29 = *(void **)(*((void *)&v44 + 1) + 8 * i);
                if (([v29 isEqualToString:@"Default"] & 1) == 0)
                {
                  char v43 = 0;
                  unsigned int v30 = [MEMORY[0x1E4F4B680] consumerSubtypeForString:v29 found:&v43];
                  if (v43)
                  {
                    unsigned int v31 = v30;
                    if (v30 < 0x30)
                    {
                      unint64_t v34 = [v17 objectForKeyedSubscript:v29];
                      [v34 floatValue];
                      __asm { FCVT            H0, S0 }
                      *(_WORD *)(v41 + 96 * v16 + 2 * v31) = _S0;
                    }
                    else
                    {
                      char v32 = __atxlog_handle_default();
                      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 134218242;
                        unint64_t v49 = v31;
                        __int16 v50 = 2112;
                        uint64_t v51 = v42;
                        _os_log_error_impl(&dword_1D0FA3000, v32, OS_LOG_TYPE_ERROR, "Invalid consumerSubType value of %lu for string '%@' -- out of array bounds", buf, 0x16u);
                      }

                      [MEMORY[0x1E4F1CA00] raise:v6, @"Invalid consumerSubType value of %lu for string '%@' -- out of array bounds", v31, v42 format];
                    }
                  }
                  else
                  {
                    uint64_t v33 = __atxlog_handle_default();
                    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 138412290;
                      unint64_t v49 = (unint64_t)v29;
                      _os_log_error_impl(&dword_1D0FA3000, v33, OS_LOG_TYPE_ERROR, "Invalid consumerSubType string of '%@' in ATXActionFeedbackWeights asset", buf, 0xCu);
                    }

                    [MEMORY[0x1E4F1CA00] raise:v6, @"Invalid consumerSubType string of '%@' in ATXActionFeedbackWeights asset", v29, v37 format];
                  }
                }
              }
              uint64_t v26 = [v24 countByEnumeratingWithState:&v44 objects:v52 count:16];
            }
            while (v26);
          }

          id v3 = v38;
          char v8 = v39;
          uint64_t v4 = v16;
          unint64_t v5 = 0x1E4F4A000;
          uint64_t v7 = v40;
        }
        else
        {
          unsigned int v36 = __atxlog_handle_default();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            unint64_t v49 = (unint64_t)v3;
            _os_log_error_impl(&dword_1D0FA3000, v36, OS_LOG_TYPE_ERROR, "Invalid format of weights assetData: %@", buf, 0xCu);
          }

          [MEMORY[0x1E4F1CA00] raise:v6, @"Invalid format of weights assetData: %@", v3 format];
        }
      }
    }

    ++v4;
    v7 += 96;
  }
  while (v4 != 8);
}

void sub_1D13613DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D13619BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void sub_1D1361DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_1D1361FC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1362158(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D13622B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v16 = v14;

  _Unwind_Resume(a1);
}

void sub_1D1362644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1D136280C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1362A30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1362CD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D1362E00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AWDProactiveAppPredictionLaunchesAtLocationReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(_WORD *)(a1 + 60) |= 1u;
          while (1)
          {
            uint64_t v21 = *v3;
            uint64_t v22 = *(void *)(a2 + v21);
            unint64_t v23 = v22 + 1;
            if (v22 == -1 || v23 > *(void *)(a2 + *v4)) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0) {
              goto LABEL_80;
            }
            v18 += 7;
            BOOL v15 = v19++ >= 9;
            if (v15)
            {
              uint64_t v20 = 0;
              goto LABEL_82;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_80:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v20 = 0;
          }
LABEL_82:
          *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = v20;
          continue;
        case 2u:
          *(_WORD *)(a1 + 60) |= 2u;
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= *(void *)(a2 + *v4))
          {
            int v28 = *(_DWORD *)(*(void *)(a2 + *v7) + v27);
            *(void *)(a2 + v26) = v27 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v28 = 0;
          }
          uint64_t v77 = 24;
          goto LABEL_113;
        case 3u:
          *(_WORD *)(a1 + 60) |= 0x10u;
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= *(void *)(a2 + *v4))
          {
            int v28 = *(_DWORD *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v28 = 0;
          }
          uint64_t v77 = 36;
LABEL_113:
          *(_DWORD *)(a1 + v77) = v28;
          continue;
        case 4u:
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v33 = 0;
          *(_WORD *)(a1 + 60) |= 0x20u;
          while (2)
          {
            uint64_t v34 = *v3;
            uint64_t v35 = *(void *)(a2 + v34);
            unint64_t v36 = v35 + 1;
            if (v35 == -1 || v36 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v37 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
              *(void *)(a2 + v34) = v36;
              v33 |= (unint64_t)(v37 & 0x7F) << v31;
              if (v37 < 0)
              {
                v31 += 7;
                BOOL v15 = v32++ >= 9;
                if (v15)
                {
                  LODWORD(v33) = 0;
                  goto LABEL_86;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v33) = 0;
          }
LABEL_86:
          uint64_t v74 = 40;
          goto LABEL_103;
        case 5u:
          uint64_t v38 = PBReaderReadString();
          uint64_t v39 = 16;
          goto LABEL_57;
        case 6u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v42 = 0;
          *(_WORD *)(a1 + 60) |= 0x100u;
          while (2)
          {
            uint64_t v43 = *v3;
            uint64_t v44 = *(void *)(a2 + v43);
            unint64_t v45 = v44 + 1;
            if (v44 == -1 || v45 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v46 = *(unsigned char *)(*(void *)(a2 + *v7) + v44);
              *(void *)(a2 + v43) = v45;
              v42 |= (unint64_t)(v46 & 0x7F) << v40;
              if (v46 < 0)
              {
                v40 += 7;
                BOOL v15 = v41++ >= 9;
                if (v15)
                {
                  uint64_t v42 = 0;
                  goto LABEL_90;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v42 = 0;
          }
LABEL_90:
          BOOL v75 = v42 != 0;
          uint64_t v76 = 58;
          goto LABEL_108;
        case 7u:
          char v47 = 0;
          unsigned int v48 = 0;
          uint64_t v49 = 0;
          *(_WORD *)(a1 + 60) |= 0x40u;
          while (2)
          {
            uint64_t v50 = *v3;
            uint64_t v51 = *(void *)(a2 + v50);
            unint64_t v52 = v51 + 1;
            if (v51 == -1 || v52 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v53 = *(unsigned char *)(*(void *)(a2 + *v7) + v51);
              *(void *)(a2 + v50) = v52;
              v49 |= (unint64_t)(v53 & 0x7F) << v47;
              if (v53 < 0)
              {
                v47 += 7;
                BOOL v15 = v48++ >= 9;
                if (v15)
                {
                  uint64_t v49 = 0;
                  goto LABEL_94;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v49 = 0;
          }
LABEL_94:
          BOOL v75 = v49 != 0;
          uint64_t v76 = 56;
          goto LABEL_108;
        case 8u:
          uint64_t v38 = PBReaderReadString();
          uint64_t v39 = 48;
LABEL_57:
          char v54 = *(void **)(a1 + v39);
          *(void *)(a1 + v39) = v38;

          continue;
        case 9u:
          char v55 = 0;
          unsigned int v56 = 0;
          uint64_t v33 = 0;
          *(_WORD *)(a1 + 60) |= 8u;
          while (2)
          {
            uint64_t v57 = *v3;
            uint64_t v58 = *(void *)(a2 + v57);
            unint64_t v59 = v58 + 1;
            if (v58 == -1 || v59 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v60 = *(unsigned char *)(*(void *)(a2 + *v7) + v58);
              *(void *)(a2 + v57) = v59;
              v33 |= (unint64_t)(v60 & 0x7F) << v55;
              if (v60 < 0)
              {
                v55 += 7;
                BOOL v15 = v56++ >= 9;
                if (v15)
                {
                  LODWORD(v33) = 0;
                  goto LABEL_98;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v33) = 0;
          }
LABEL_98:
          uint64_t v74 = 32;
          goto LABEL_103;
        case 0xAu:
          char v61 = 0;
          unsigned int v62 = 0;
          uint64_t v33 = 0;
          *(_WORD *)(a1 + 60) |= 4u;
          while (2)
          {
            uint64_t v63 = *v3;
            uint64_t v64 = *(void *)(a2 + v63);
            unint64_t v65 = v64 + 1;
            if (v64 == -1 || v65 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v66 = *(unsigned char *)(*(void *)(a2 + *v7) + v64);
              *(void *)(a2 + v63) = v65;
              v33 |= (unint64_t)(v66 & 0x7F) << v61;
              if (v66 < 0)
              {
                v61 += 7;
                BOOL v15 = v62++ >= 9;
                if (v15)
                {
                  LODWORD(v33) = 0;
                  goto LABEL_102;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v33) = 0;
          }
LABEL_102:
          uint64_t v74 = 28;
LABEL_103:
          *(_DWORD *)(a1 + v74) = v33;
          continue;
        case 0xBu:
          char v67 = 0;
          unsigned int v68 = 0;
          uint64_t v69 = 0;
          *(_WORD *)(a1 + 60) |= 0x80u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v70 = *v3;
        uint64_t v71 = *(void *)(a2 + v70);
        unint64_t v72 = v71 + 1;
        if (v71 == -1 || v72 > *(void *)(a2 + *v4)) {
          break;
        }
        char v73 = *(unsigned char *)(*(void *)(a2 + *v7) + v71);
        *(void *)(a2 + v70) = v72;
        v69 |= (unint64_t)(v73 & 0x7F) << v67;
        if ((v73 & 0x80) == 0) {
          goto LABEL_105;
        }
        v67 += 7;
        BOOL v15 = v68++ >= 9;
        if (v15)
        {
          uint64_t v69 = 0;
          goto LABEL_107;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_105:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v69 = 0;
      }
LABEL_107:
      BOOL v75 = v69 != 0;
      uint64_t v76 = 57;
LABEL_108:
      *(unsigned char *)(a1 + v76) = v75;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_1D13653DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1D1367B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1367D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1367F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1368208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D1368F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D136E3B8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

BOOL ATXPBBlendingSessionUICacheReadFrom(void *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        char v18 = (ATXPBBlendingSessionClientModelSuggestion *)a1[1];
        a1[1] = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v18 = objc_alloc_init(ATXPBBlendingSessionClientModelSuggestion);
    [a1 addSuggestion:v18];
    if (!PBReaderPlaceMark()
      || (ATXPBBlendingSessionClientModelSuggestionReadFrom((uint64_t)v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void OUTLINED_FUNCTION_6_3(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x12u);
}

uint64_t ATXMagicalMomentsPBMMPredictedScoreTrackerReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 8;
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 32) |= 1u;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_34;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_36;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_34:
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v20) = 0;
            }
LABEL_36:
            *(_DWORD *)(a1 + 16) = v20;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 24;
      }
      uint64_t v26 = *(void **)(a1 + v25);
      *(void *)(a1 + v25) = v24;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void flushHistogram(void *a1)
{
  id v1 = a1;
  if (objc_opt_respondsToSelector())
  {
    [v1 flush];
  }
  else
  {
    uint64_t v2 = __atxlog_handle_default();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      flushHistogram_cold_1(v2);
    }

    [MEMORY[0x1E4F1CA00] raise:*MEMORY[0x1E4F1C3B8] format:@"Flush called on histogram which isn't backed by persistent store"];
  }
}

uint64_t ATXAnchorModelPBActionMetadataReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 40) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_38;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_40;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_38:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_40:
        *(_DWORD *)(a1 + 16) = v19;
        goto LABEL_41;
      case 2u:
        uint64_t v24 = objc_alloc_init(ATXAnchorModelPBAppLaunchMetadata);
        objc_storeStrong((id *)(a1 + 32), v24);
        if (!PBReaderPlaceMark()
          || (ATXAnchorModelPBAppLaunchMetadataReadFrom((uint64_t)v24, a2) & 1) == 0)
        {
          goto LABEL_43;
        }
        goto LABEL_36;
      case 3u:
        uint64_t v24 = objc_alloc_init(ATXAnchorModelPBActionKeyMetadata);
        objc_storeStrong((id *)(a1 + 8), v24);
        if (!PBReaderPlaceMark() || !ATXAnchorModelPBActionKeyMetadataReadFrom((uint64_t)v24, a2)) {
          goto LABEL_43;
        }
        goto LABEL_36;
      case 4u:
        uint64_t v24 = objc_alloc_init(ATXAnchorModelPBActionUUIDMetadata);
        [(id)a1 addActionUUIDMetadata:v24];
        if (PBReaderPlaceMark()
          && (ATXAnchorModelPBActionUUIDMetadataReadFrom((uint64_t)v24, a2) & 1) != 0)
        {
LABEL_36:
          PBReaderRecallMark();

LABEL_41:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_43:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_41;
    }
  }
}

void sub_1D137B388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D137BAF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D137D228(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1D137D2E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D137D594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1D137D764(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AWDProactiveAppPredictionIntentPredictionSessionReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  unint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    int v16 = v10 & 7;
    if (v15 || v16 == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(_DWORD *)(a1 + 184) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_222;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v20 = 0;
            goto LABEL_224;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_222:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_224:
        *(void *)(a1 + 32) = v20;
        goto LABEL_323;
      case 2u:
        uint64_t v24 = objc_alloc_init(AWDProactiveActionData);
        [(id)a1 addActionData:v24];
        if (!PBReaderPlaceMark() || (AWDProactiveActionDataReadFrom((uint64_t)v24, a2) & 1) == 0) {
          goto LABEL_337;
        }
        goto LABEL_218;
      case 3u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(_DWORD *)(a1 + 184) |= 2u;
        while (2)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v2_Block_object_dispose(&STACK[0x210], 8) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              BOOL v14 = v26++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_228;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_228:
        uint64_t v158 = 56;
        goto LABEL_322;
      case 4u:
        uint64_t v24 = objc_alloc_init(AWDProactiveAppPredictionAppLaunchSequence);
        objc_storeStrong((id *)(a1 + 80), v24);
        if (!PBReaderPlaceMark()
          || (AWDProactiveAppPredictionAppLaunchSequenceReadFrom((uint64_t)v24, a2) & 1) == 0)
        {
          goto LABEL_337;
        }
        goto LABEL_218;
      case 5u:
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v27 = 0;
        *(_DWORD *)(a1 + 184) |= 8u;
        while (2)
        {
          uint64_t v33 = *v3;
          unint64_t v34 = *(void *)(a2 + v33);
          if (v34 == -1 || v34 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
            *(void *)(a2 + v33) = v34 + 1;
            v27 |= (unint64_t)(v35 & 0x7F) << v31;
            if (v35 < 0)
            {
              v31 += 7;
              BOOL v14 = v32++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_232;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_232:
        uint64_t v158 = 88;
        goto LABEL_322;
      case 6u:
        char v36 = 0;
        unsigned int v37 = 0;
        uint64_t v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x10u;
        while (2)
        {
          uint64_t v38 = *v3;
          unint64_t v39 = *(void *)(a2 + v38);
          if (v39 == -1 || v39 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v40 = *(unsigned char *)(*(void *)(a2 + *v7) + v39);
            *(void *)(a2 + v3_Block_object_dispose(&STACK[0x210], 8) = v39 + 1;
            v27 |= (unint64_t)(v40 & 0x7F) << v36;
            if (v40 < 0)
            {
              v36 += 7;
              BOOL v14 = v37++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_236;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_236:
        uint64_t v158 = 92;
        goto LABEL_322;
      case 7u:
        char v41 = 0;
        unsigned int v42 = 0;
        uint64_t v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x20u;
        while (2)
        {
          uint64_t v43 = *v3;
          unint64_t v44 = *(void *)(a2 + v43);
          if (v44 == -1 || v44 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v45 = *(unsigned char *)(*(void *)(a2 + *v7) + v44);
            *(void *)(a2 + v43) = v44 + 1;
            v27 |= (unint64_t)(v45 & 0x7F) << v41;
            if (v45 < 0)
            {
              v41 += 7;
              BOOL v14 = v42++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_240;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_240:
        uint64_t v158 = 96;
        goto LABEL_322;
      case 8u:
        if (v16 == 2)
        {
          uint64_t result = PBReaderPlaceMark();
          if (!result) {
            return result;
          }
          while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4) && !*(unsigned char *)(a2 + *v5))
          {
            char v47 = 0;
            unsigned int v48 = 0;
            uint64_t v49 = 0;
            while (1)
            {
              uint64_t v50 = *v3;
              unint64_t v51 = *(void *)(a2 + v50);
              if (v51 == -1 || v51 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v52 = *(unsigned char *)(*(void *)(a2 + *v7) + v51);
              *(void *)(a2 + v50) = v51 + 1;
              v49 |= (unint64_t)(v52 & 0x7F) << v47;
              if (v52 < 0)
              {
                v47 += 7;
                BOOL v14 = v48++ >= 9;
                if (!v14) {
                  continue;
                }
              }
              goto LABEL_74;
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_74:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          char v161 = 0;
          unsigned int v162 = 0;
          uint64_t v163 = 0;
          while (1)
          {
            uint64_t v164 = *v3;
            unint64_t v165 = *(void *)(a2 + v164);
            if (v165 == -1 || v165 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v166 = *(unsigned char *)(*(void *)(a2 + *v7) + v165);
            *(void *)(a2 + v164) = v165 + 1;
            v163 |= (unint64_t)(v166 & 0x7F) << v161;
            if (v166 < 0)
            {
              v161 += 7;
              BOOL v14 = v162++ >= 9;
              if (!v14) {
                continue;
              }
            }
            goto LABEL_334;
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_334:
          PBRepeatedInt32Add();
        }
        goto LABEL_323;
      case 9u:
        char v53 = 0;
        unsigned int v54 = 0;
        uint64_t v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x40u;
        while (2)
        {
          uint64_t v55 = *v3;
          unint64_t v56 = *(void *)(a2 + v55);
          if (v56 == -1 || v56 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v57 = *(unsigned char *)(*(void *)(a2 + *v7) + v56);
            *(void *)(a2 + v55) = v56 + 1;
            v27 |= (unint64_t)(v57 & 0x7F) << v53;
            if (v57 < 0)
            {
              v53 += 7;
              BOOL v14 = v54++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_244;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_244:
        uint64_t v158 = 100;
        goto LABEL_322;
      case 0xAu:
        char v58 = 0;
        unsigned int v59 = 0;
        uint64_t v60 = 0;
        *(_DWORD *)(a1 + 184) |= 0x800000u;
        while (2)
        {
          uint64_t v61 = *v3;
          unint64_t v62 = *(void *)(a2 + v61);
          if (v62 == -1 || v62 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v63 = *(unsigned char *)(*(void *)(a2 + *v7) + v62);
            *(void *)(a2 + v61) = v62 + 1;
            v60 |= (unint64_t)(v63 & 0x7F) << v58;
            if (v63 < 0)
            {
              v58 += 7;
              BOOL v14 = v59++ >= 9;
              if (v14)
              {
                uint64_t v60 = 0;
                goto LABEL_248;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v60 = 0;
        }
LABEL_248:
        BOOL v159 = v60 != 0;
        uint64_t v160 = 180;
        goto LABEL_257;
      case 0xBu:
        char v64 = 0;
        unsigned int v65 = 0;
        uint64_t v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x80u;
        while (2)
        {
          uint64_t v66 = *v3;
          unint64_t v67 = *(void *)(a2 + v66);
          if (v67 == -1 || v67 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v68 = *(unsigned char *)(*(void *)(a2 + *v7) + v67);
            *(void *)(a2 + v66) = v67 + 1;
            v27 |= (unint64_t)(v68 & 0x7F) << v64;
            if (v68 < 0)
            {
              v64 += 7;
              BOOL v14 = v65++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_252;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_252:
        uint64_t v158 = 104;
        goto LABEL_322;
      case 0xCu:
        char v69 = 0;
        unsigned int v70 = 0;
        uint64_t v71 = 0;
        *(_DWORD *)(a1 + 184) |= 0x1000000u;
        while (2)
        {
          uint64_t v72 = *v3;
          unint64_t v73 = *(void *)(a2 + v72);
          if (v73 == -1 || v73 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v74 = *(unsigned char *)(*(void *)(a2 + *v7) + v73);
            *(void *)(a2 + v72) = v73 + 1;
            v71 |= (unint64_t)(v74 & 0x7F) << v69;
            if (v74 < 0)
            {
              v69 += 7;
              BOOL v14 = v70++ >= 9;
              if (v14)
              {
                uint64_t v71 = 0;
                goto LABEL_256;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v71 = 0;
        }
LABEL_256:
        BOOL v159 = v71 != 0;
        uint64_t v160 = 181;
LABEL_257:
        *(unsigned char *)(a1 + v160) = v159;
        goto LABEL_323;
      case 0xDu:
        char v75 = 0;
        unsigned int v76 = 0;
        uint64_t v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x400u;
        while (2)
        {
          uint64_t v77 = *v3;
          unint64_t v78 = *(void *)(a2 + v77);
          if (v78 == -1 || v78 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v79 = *(unsigned char *)(*(void *)(a2 + *v7) + v78);
            *(void *)(a2 + v77) = v78 + 1;
            v27 |= (unint64_t)(v79 & 0x7F) << v75;
            if (v79 < 0)
            {
              v75 += 7;
              BOOL v14 = v76++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_261;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_261:
        uint64_t v158 = 116;
        goto LABEL_322;
      case 0xEu:
        char v80 = 0;
        unsigned int v81 = 0;
        uint64_t v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x800u;
        while (2)
        {
          uint64_t v82 = *v3;
          unint64_t v83 = *(void *)(a2 + v82);
          if (v83 == -1 || v83 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v84 = *(unsigned char *)(*(void *)(a2 + *v7) + v83);
            *(void *)(a2 + v82) = v83 + 1;
            v27 |= (unint64_t)(v84 & 0x7F) << v80;
            if (v84 < 0)
            {
              v80 += 7;
              BOOL v14 = v81++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_265;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_265:
        uint64_t v158 = 120;
        goto LABEL_322;
      case 0xFu:
        char v85 = 0;
        unsigned int v86 = 0;
        uint64_t v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x2000u;
        while (2)
        {
          uint64_t v87 = *v3;
          unint64_t v88 = *(void *)(a2 + v87);
          if (v88 == -1 || v88 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v89 = *(unsigned char *)(*(void *)(a2 + *v7) + v88);
            *(void *)(a2 + v87) = v88 + 1;
            v27 |= (unint64_t)(v89 & 0x7F) << v85;
            if (v89 < 0)
            {
              v85 += 7;
              BOOL v14 = v86++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_269;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_269:
        uint64_t v158 = 140;
        goto LABEL_322;
      case 0x10u:
        char v90 = 0;
        unsigned int v91 = 0;
        uint64_t v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x4000u;
        while (2)
        {
          uint64_t v92 = *v3;
          unint64_t v93 = *(void *)(a2 + v92);
          if (v93 == -1 || v93 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v94 = *(unsigned char *)(*(void *)(a2 + *v7) + v93);
            *(void *)(a2 + v92) = v93 + 1;
            v27 |= (unint64_t)(v94 & 0x7F) << v90;
            if (v94 < 0)
            {
              v90 += 7;
              BOOL v14 = v91++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_273;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_273:
        uint64_t v158 = 144;
        goto LABEL_322;
      case 0x11u:
        char v95 = 0;
        unsigned int v96 = 0;
        uint64_t v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x10000u;
        while (2)
        {
          uint64_t v97 = *v3;
          unint64_t v98 = *(void *)(a2 + v97);
          if (v98 == -1 || v98 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v99 = *(unsigned char *)(*(void *)(a2 + *v7) + v98);
            *(void *)(a2 + v97) = v98 + 1;
            v27 |= (unint64_t)(v99 & 0x7F) << v95;
            if (v99 < 0)
            {
              v95 += 7;
              BOOL v14 = v96++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_277;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_277:
        uint64_t v158 = 152;
        goto LABEL_322;
      case 0x12u:
        char v100 = 0;
        unsigned int v101 = 0;
        uint64_t v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x80000u;
        while (2)
        {
          uint64_t v102 = *v3;
          unint64_t v103 = *(void *)(a2 + v102);
          if (v103 == -1 || v103 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v104 = *(unsigned char *)(*(void *)(a2 + *v7) + v103);
            *(void *)(a2 + v102) = v103 + 1;
            v27 |= (unint64_t)(v104 & 0x7F) << v100;
            if (v104 < 0)
            {
              v100 += 7;
              BOOL v14 = v101++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_281;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_281:
        uint64_t v158 = 164;
        goto LABEL_322;
      case 0x13u:
        char v105 = 0;
        unsigned int v106 = 0;
        uint64_t v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x200000u;
        while (2)
        {
          uint64_t v107 = *v3;
          unint64_t v108 = *(void *)(a2 + v107);
          if (v108 == -1 || v108 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v109 = *(unsigned char *)(*(void *)(a2 + *v7) + v108);
            *(void *)(a2 + v107) = v108 + 1;
            v27 |= (unint64_t)(v109 & 0x7F) << v105;
            if (v109 < 0)
            {
              v105 += 7;
              BOOL v14 = v106++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_285;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_285:
        uint64_t v158 = 172;
        goto LABEL_322;
      case 0x14u:
        char v110 = 0;
        unsigned int v111 = 0;
        uint64_t v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x400000u;
        while (2)
        {
          uint64_t v112 = *v3;
          unint64_t v113 = *(void *)(a2 + v112);
          if (v113 == -1 || v113 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v114 = *(unsigned char *)(*(void *)(a2 + *v7) + v113);
            *(void *)(a2 + v112) = v113 + 1;
            v27 |= (unint64_t)(v114 & 0x7F) << v110;
            if (v114 < 0)
            {
              v110 += 7;
              BOOL v14 = v111++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_289;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_289:
        uint64_t v158 = 176;
        goto LABEL_322;
      case 0x15u:
        char v115 = 0;
        unsigned int v116 = 0;
        uint64_t v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x1000u;
        while (2)
        {
          uint64_t v117 = *v3;
          unint64_t v118 = *(void *)(a2 + v117);
          if (v118 == -1 || v118 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v119 = *(unsigned char *)(*(void *)(a2 + *v7) + v118);
            *(void *)(a2 + v117) = v118 + 1;
            v27 |= (unint64_t)(v119 & 0x7F) << v115;
            if (v119 < 0)
            {
              v115 += 7;
              BOOL v14 = v116++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_293;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_293:
        uint64_t v158 = 136;
        goto LABEL_322;
      case 0x16u:
        uint64_t v120 = PBReaderReadString();
        uint64_t v121 = 40;
        goto LABEL_220;
      case 0x17u:
        char v122 = 0;
        unsigned int v123 = 0;
        uint64_t v27 = 0;
        *(_DWORD *)(a1 + 184) |= 4u;
        while (2)
        {
          uint64_t v124 = *v3;
          unint64_t v125 = *(void *)(a2 + v124);
          if (v125 == -1 || v125 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v126 = *(unsigned char *)(*(void *)(a2 + *v7) + v125);
            *(void *)(a2 + v124) = v125 + 1;
            v27 |= (unint64_t)(v126 & 0x7F) << v122;
            if (v126 < 0)
            {
              v122 += 7;
              BOOL v14 = v123++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_297;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_297:
        uint64_t v158 = 72;
        goto LABEL_322;
      case 0x18u:
        char v127 = 0;
        unsigned int v128 = 0;
        uint64_t v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x100u;
        while (2)
        {
          uint64_t v129 = *v3;
          unint64_t v130 = *(void *)(a2 + v129);
          if (v130 == -1 || v130 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v131 = *(unsigned char *)(*(void *)(a2 + *v7) + v130);
            *(void *)(a2 + v129) = v130 + 1;
            v27 |= (unint64_t)(v131 & 0x7F) << v127;
            if (v131 < 0)
            {
              v127 += 7;
              BOOL v14 = v128++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_301;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_301:
        uint64_t v158 = 108;
        goto LABEL_322;
      case 0x19u:
        char v132 = 0;
        unsigned int v133 = 0;
        uint64_t v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x200u;
        while (2)
        {
          uint64_t v134 = *v3;
          unint64_t v135 = *(void *)(a2 + v134);
          if (v135 == -1 || v135 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v136 = *(unsigned char *)(*(void *)(a2 + *v7) + v135);
            *(void *)(a2 + v134) = v135 + 1;
            v27 |= (unint64_t)(v136 & 0x7F) << v132;
            if (v136 < 0)
            {
              v132 += 7;
              BOOL v14 = v133++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_305;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_305:
        uint64_t v158 = 112;
        goto LABEL_322;
      case 0x1Au:
        char v137 = 0;
        unsigned int v138 = 0;
        uint64_t v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x20000u;
        while (2)
        {
          uint64_t v139 = *v3;
          unint64_t v140 = *(void *)(a2 + v139);
          if (v140 == -1 || v140 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v141 = *(unsigned char *)(*(void *)(a2 + *v7) + v140);
            *(void *)(a2 + v139) = v140 + 1;
            v27 |= (unint64_t)(v141 & 0x7F) << v137;
            if (v141 < 0)
            {
              v137 += 7;
              BOOL v14 = v138++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_309;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_309:
        uint64_t v158 = 156;
        goto LABEL_322;
      case 0x1Bu:
        char v142 = 0;
        unsigned int v143 = 0;
        uint64_t v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x40000u;
        while (2)
        {
          uint64_t v144 = *v3;
          unint64_t v145 = *(void *)(a2 + v144);
          if (v145 == -1 || v145 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v146 = *(unsigned char *)(*(void *)(a2 + *v7) + v145);
            *(void *)(a2 + v144) = v145 + 1;
            v27 |= (unint64_t)(v146 & 0x7F) << v142;
            if (v146 < 0)
            {
              v142 += 7;
              BOOL v14 = v143++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_313;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_313:
        uint64_t v158 = 160;
        goto LABEL_322;
      case 0x1Cu:
        char v147 = 0;
        unsigned int v148 = 0;
        uint64_t v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x8000u;
        while (2)
        {
          uint64_t v149 = *v3;
          unint64_t v150 = *(void *)(a2 + v149);
          if (v150 == -1 || v150 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v151 = *(unsigned char *)(*(void *)(a2 + *v7) + v150);
            *(void *)(a2 + v149) = v150 + 1;
            v27 |= (unint64_t)(v151 & 0x7F) << v147;
            if (v151 < 0)
            {
              v147 += 7;
              BOOL v14 = v148++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_317;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_317:
        uint64_t v158 = 148;
        goto LABEL_322;
      case 0x1Du:
        char v152 = 0;
        unsigned int v153 = 0;
        uint64_t v27 = 0;
        *(_DWORD *)(a1 + 184) |= 0x100000u;
        while (2)
        {
          uint64_t v154 = *v3;
          unint64_t v155 = *(void *)(a2 + v154);
          if (v155 == -1 || v155 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v156 = *(unsigned char *)(*(void *)(a2 + *v7) + v155);
            *(void *)(a2 + v154) = v155 + 1;
            v27 |= (unint64_t)(v156 & 0x7F) << v152;
            if (v156 < 0)
            {
              v152 += 7;
              BOOL v14 = v153++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_321;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_321:
        uint64_t v158 = 168;
LABEL_322:
        *(_DWORD *)(a1 + v15_Block_object_dispose(&STACK[0x210], 8) = v27;
        goto LABEL_323;
      case 0x1Eu:
        uint64_t v24 = objc_alloc_init(AWDProactiveAppPredictionAppActionSequence);
        objc_storeStrong((id *)(a1 + 64), v24);
        if (PBReaderPlaceMark()
          && (AWDProactiveAppPredictionAppActionSequenceReadFrom((uint64_t)v24, a2) & 1) != 0)
        {
LABEL_218:
          PBReaderRecallMark();

LABEL_323:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_337:

        return 0;
      case 0x1Fu:
        uint64_t v120 = PBReaderReadString();
        uint64_t v121 = 128;
LABEL_220:
        char v157 = *(void **)(a1 + v121);
        *(void *)(a1 + v121) = v120;

        goto LABEL_323;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_323;
    }
  }
}

uint64_t sub_1D1382E90()
{
  return 0x3A7374726F7053;
}

uint64_t sub_1D1382F3C()
{
  return sub_1D13F2D28();
}

uint64_t sub_1D1382F9C()
{
  return 0x7374726F7053;
}

uint64_t sub_1D1382FB0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1D1382FE4(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*sub_1D138301C())()
{
  return nullsub_1;
}

uint64_t sub_1D1383040()
{
  swift_bridgeObjectRetain();
  sub_1D13F26E8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D138309C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  else {
    return sub_1D13F2C58();
  }
}

uint64_t sub_1D13830BC()
{
  return sub_1D1382E90();
}

uint64_t sub_1D13830C4()
{
  return sub_1D13F2D28();
}

uint64_t sub_1D1383120()
{
  swift_bridgeObjectRetain();
  sub_1D13F26E8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D1383178()
{
  return sub_1D13F2D28();
}

uint64_t sub_1D13831D0(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return sub_1D13F2C58();
  }
}

id sub_1D1383200()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F9A448]);
  swift_bridgeObjectRetain();
  id v1 = (void *)sub_1D13F2678();
  uint64_t v2 = (void *)sub_1D13F2678();
  id v3 = (void *)sub_1D13F2678();
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(v0, sel_initWithQuery_requestedEntityType_identifier_, v1, v2, v3);

  return v4;
}

unint64_t sub_1D13832C8()
{
  unint64_t result = qword_1EA64D828;
  if (!qword_1EA64D828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA64D828);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for SportsSuggestion(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for SportsSuggestion()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for SportsSuggestion(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for SportsSuggestion(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsSuggestion(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsSuggestion(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose(&STACK[0x210], 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(&STACK[0x210], 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsSuggestion()
{
  return &type metadata for SportsSuggestion;
}

uint64_t sub_1D1383470()
{
  uint64_t v0 = sub_1D13F2538();
  __swift_allocate_value_buffer(v0, qword_1EBD24940);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EBD24940);
  return sub_1D13F2518();
}

uint64_t sub_1D13834E4()
{
  if (qword_1EBD24318 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_1D13F2538();
  return __swift_project_value_buffer(v0, (uint64_t)qword_1EBD24940);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_1D1383580@<X0>(uint64_t a1@<X8>)
{
  if (qword_1EBD24318 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D13F2538();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBD24940);
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void *sub_1D138368C(void *a1)
{
  id v2 = a1;
  return a1;
}

uint64_t sub_1D13836B4()
{
  type metadata accessor for MotionContext();
  sub_1D13841E4(&qword_1EA64D830);
  return sub_1D1387760();
}

uint64_t type metadata accessor for MotionContext()
{
  return self;
}

uint64_t sub_1D1383734()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t sub_1D13837A4()
{
  id v1 = *(void **)(v0 + 16);
  if (!v1) {
    return 0;
  }
  id v2 = objc_msgSend(v1, sel_confidence);
  if (!v2) {
    return 0x29776F4C28;
  }
  if (v2 != (id)2)
  {
    if (v2 == (id)1) {
      return 0x296D756964654D28;
    }
    return 0;
  }
  return 0x296867694828;
}

uint64_t sub_1D1383834()
{
  return 0;
}

void *sub_1D138383C()
{
  id v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

uint64_t sub_1D1383864(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t sub_1D1383898(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t sub_1D13838A4()
{
  return v0;
}

uint64_t sub_1D13838C4()
{
  return MEMORY[0x1F4186488](v0, 24, 7);
}

uint64_t sub_1D13838FC()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_1D1383914()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t sub_1D1383958()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))() & 1;
}

id sub_1D13839A0@<X0>(void *a1@<X8>)
{
  id v2 = *(void **)(*(void *)v1 + 16);
  *a1 = v2;
  return v2;
}

uint64_t sub_1D13839B0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 120))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1D13839EC@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for MotionContext();
  sub_1D13841E4(&qword_1EA64D830);
  uint64_t result = sub_1D1387790();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1D1383A4C()
{
  sub_1D1384030();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1D142C0B0;
  *(void *)(v0 + 32) = type metadata accessor for MotionContextStore.WalkingContext();
  *(void *)(v0 + 40) = type metadata accessor for MotionContextStore.RunningContext();
  *(void *)(v0 + 4_Block_object_dispose(&STACK[0x210], 8) = type metadata accessor for MotionContextStore.CyclingContext();
  uint64_t result = type metadata accessor for MotionContextStore.AutomotiveContext();
  *(void *)(v0 + 56) = result;
  qword_1EA650000 = v0;
  return result;
}

uint64_t *sub_1D1383AC0()
{
  if (qword_1EA64E740 != -1) {
    swift_once();
  }
  return &qword_1EA650000;
}

uint64_t sub_1D1383B0C()
{
  if (qword_1EA64E740 != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D1383B68()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D1383BA0(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1D1383BE8())()
{
  return j__swift_endAccess;
}

void *sub_1D1383C40()
{
  uint64_t v1 = *(void **)(v0 + 24);
  id v2 = v1;
  return v1;
}

uint64_t sub_1D1383C68(void *a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 24) = a1;
  uint64_t v3 = qword_1EA64E740;
  id v4 = a1;
  if (v3 != -1) {
    swift_once();
  }
  id v5 = v4;
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = sub_1D1384090(v6, (uint64_t)a1);
  swift_bridgeObjectRelease();

  *(void *)(v2 + 16) = v7;
  return v2;
}

uint64_t sub_1D1383D38(void *a1)
{
  *(void *)(v1 + 24) = a1;
  uint64_t v3 = qword_1EA64E740;
  id v4 = a1;
  if (v3 != -1) {
    swift_once();
  }
  id v5 = v4;
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = sub_1D1384090(v6, (uint64_t)a1);
  swift_bridgeObjectRelease();

  *(void *)(v1 + 16) = v7;
  return v1;
}

uint64_t sub_1D1383DF0()
{
  return 0x676E696B6C6157;
}

uint64_t sub_1D1383E08()
{
  uint64_t result = 0x20676E696B6C6157;
  sub_1D1383EE0();
  return result;
}

id sub_1D1383E20()
{
  return sub_1D1383F50((SEL *)&selRef_walking);
}

uint64_t sub_1D1383E2C()
{
  return 0x676E696E6E7552;
}

uint64_t sub_1D1383E44()
{
  uint64_t result = 0x20676E696E6E7552;
  sub_1D1383EE0();
  return result;
}

id sub_1D1383E5C()
{
  return sub_1D1383F50((SEL *)&selRef_running);
}

uint64_t sub_1D1383E68()
{
  return 0x676E696C637943;
}

uint64_t sub_1D1383E80()
{
  uint64_t result = 0x20676E696C637943;
  sub_1D1383EE0();
  return result;
}

id sub_1D1383E98()
{
  return sub_1D1383F50((SEL *)&selRef_cycling);
}

uint64_t sub_1D1383EA4()
{
  return 0x69746F6D6F747541;
}

uint64_t sub_1D1383EC0()
{
  uint64_t result = 0x69746F6D6F747541;
  sub_1D1383EE0();
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1D1383EE0()
{
  (*(void (**)(void))(*(void *)v0 + 104))();
  sub_1D13F26F8();
  swift_bridgeObjectRelease();
}

id sub_1D1383F44()
{
  return sub_1D1383F50((SEL *)&selRef_automotive);
}

id sub_1D1383F50(SEL *a1)
{
  if (*(void *)(v1 + 16)) {
    return [*(id *)(v1 + 16) *a1];
  }
  else {
    return 0;
  }
}

uint64_t sub_1D1383F84()
{
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_1D1383FAC()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186488](v0, 32, 7);
}

uint64_t sub_1D1383FEC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t sub_1D1384030()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64D840);
  if (swift_isClassType()) {
    uint64_t v1 = v0;
  }
  else {
    uint64_t v1 = 0;
  }
  if (v1) {
    uint64_t v2 = (uint64_t *)&unk_1EA64D850;
  }
  else {
    uint64_t v2 = (uint64_t *)&unk_1EA64D848;
  }
  return __swift_instantiateConcreteTypeFromMangledName(v2);
}

uint64_t sub_1D1384090(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v3)
  {
    uint64_t v11 = MEMORY[0x1E4FBC860];
    sub_1D13F2B08();
    uint64_t v6 = (uint64_t *)(a1 + 32);
    uint64_t v7 = type metadata accessor for MotionContext();
    uint64_t v8 = sub_1D13841E4(&qword_1EA64D830);
    do
    {
      uint64_t v9 = *v6++;
      uint64_t v10 = a2;
      sub_1D1387878(v9, (uint64_t)&v10, v7, v7, v8, v8);
      sub_1D13F2AE8();
      sub_1D13F2B18();
      sub_1D13F2B28();
      sub_1D13F2AF8();
      --v3;
    }
    while (v3);
    return v11;
  }
  return result;
}

uint64_t sub_1D13841A0(uint64_t a1)
{
  uint64_t result = sub_1D13841E4(&qword_1EA64D838);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = result;
  return result;
}

uint64_t sub_1D13841E4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for MotionContext();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D1384224()
{
  return MEMORY[0x1E4FBB1B0];
}

uint64_t sub_1D1384230()
{
  return sub_1D13841E4(&qword_1EA64D830);
}

void **initializeBufferWithCopyOfBuffer for MotionContextDependencies(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void destroy for MotionContextDependencies(id *a1)
{
}

void **assignWithCopy for MotionContextDependencies(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  id v4 = *a2;
  *a1 = *a2;
  id v5 = v4;

  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void **assignWithTake for MotionContextDependencies(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for MotionContextDependencies(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MotionContextDependencies(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + _Block_object_dispose(&STACK[0x210], 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + _Block_object_dispose(&STACK[0x210], 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MotionContextDependencies()
{
  return &type metadata for MotionContextDependencies;
}

uint64_t type metadata accessor for MotionContextStore()
{
  return self;
}

uint64_t type metadata accessor for MotionContextStore.WalkingContext()
{
  return self;
}

uint64_t type metadata accessor for MotionContextStore.RunningContext()
{
  return self;
}

uint64_t type metadata accessor for MotionContextStore.CyclingContext()
{
  return self;
}

uint64_t type metadata accessor for MotionContextStore.AutomotiveContext()
{
  return self;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_1D13844DC()
{
  return 1;
}

uint64_t sub_1D13844E4()
{
  return sub_1D13F2CF8();
}

uint64_t sub_1D138450C()
{
  return sub_1D13F2D28();
}

uint64_t sub_1D1384550()
{
  return sub_1D13F2D28();
}

void *sub_1D13845B4(uint64_t a1)
{
  v61[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64D858);
  MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v60 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6, v7);
  uint64_t v9 = (char *)&v55 - v8;
  MEMORY[0x1F4188790](v10, v11);
  unint64_t v13 = (unint64_t)&v55 - v12;
  unint64_t v14 = sub_1D13F1EF8();
  int v15 = *(void **)(v14 - 8);
  MEMORY[0x1F4188790](v14, v16);
  char v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19, v20);
  unsigned int v59 = (char *)&v55 - v21;
  uint64_t v22 = a1 + OBJC_IVAR____TtC21AppPredictionInternal14MeetingContext_dependencies;
  char v23 = *(void (***)(void, void))(v22
                                               + *(int *)(type metadata accessor for MeetingContext.Dependencies(0)
                                                        + 20));
  id v24 = objc_msgSend(v23, sel_virtualConference);
  if (!v24) {
    goto LABEL_12;
  }
  char v25 = v24;
  unint64_t v58 = v14;
  id v26 = objc_msgSend(v24, sel_joinMethods);

  sub_1D1384DE0(0, &qword_1EA64D860);
  unint64_t v14 = sub_1D13F2748();

  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v33 = sub_1D13F2B88();
    swift_bridgeObjectRelease();
    if (v33) {
      goto LABEL_4;
    }
    goto LABEL_11;
  }
  if (!*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_11:
    swift_bridgeObjectRelease();
    unint64_t v14 = v58;
LABEL_12:
    char v31 = (void (*)(char *, uint64_t, uint64_t, unint64_t))v15[7];
    v31(v9, 1, 1, v14);
    goto LABEL_13;
  }
LABEL_4:
  uint64_t v57 = v1;
  uint64_t v55 = v23;
  if ((v14 & 0xC000000000000001) != 0)
  {
    id v27 = (id)MEMORY[0x1D25F54B0](0, v14);
  }
  else
  {
    if (!*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_31;
    }
    id v27 = *(id *)(v14 + 32);
  }
  uint64_t v28 = v27;
  swift_bridgeObjectRelease();
  id v29 = objc_msgSend(v28, sel_URL);

  sub_1D13F1EE8();
  char v30 = (void (*)(char *, char *, unint64_t))v15[4];
  unint64_t v14 = v58;
  v30(v9, v18, v58);
  char v31 = (void (*)(char *, uint64_t, uint64_t, unint64_t))v15[7];
  v31(v9, 0, 1, v14);
  unint64_t v56 = v15;
  unsigned int v32 = (unsigned int (*)(char *, uint64_t, unint64_t))v15[6];
  if (v32(v9, 1, v14) != 1)
  {
    v30((char *)v13, v9, v14);
    v31((char *)v13, 0, 1, v14);
    int v15 = v56;
    goto LABEL_17;
  }
  int v15 = v56;
  char v23 = v55;
LABEL_13:
  id v34 = objc_msgSend(v23, sel_conferenceURLForDisplay, v55);
  uint64_t v35 = (uint64_t)v60;
  if (v34)
  {
    char v36 = v34;
    sub_1D13F1EE8();

    uint64_t v37 = 0;
  }
  else
  {
    uint64_t v37 = 1;
  }
  v31((char *)v35, v37, 1, v14);
  sub_1D1384CC4(v35, v13);
  sub_1D1384D2C((uint64_t)v9);
  unsigned int v32 = (unsigned int (*)(char *, uint64_t, unint64_t))v15[6];
LABEL_17:
  if (v32((char *)v13, 1, v14) != 1)
  {
    char v18 = v59;
    ((void (*)(char *, unint64_t, unint64_t))v15[4])(v59, v13, v14);
    uint64_t v38 = self;
    unint64_t v39 = (void *)sub_1D13F1ED8();
    v61[0] = 0;
    id v40 = objc_msgSend(v38, sel_appLinksWithURL_limit_error_, v39, 1, v61);

    char v23 = (void (**)(void, void))v15;
    int v15 = v61[0];
    if (!v40)
    {
      id v50 = v61[0];
      sub_1D13F1E98();

      swift_willThrow();
      ((void (**)(char *, unint64_t))v23)[1](v18, v14);
      return v15;
    }
    sub_1D1384DE0(0, &qword_1EA64D870);
    unint64_t v13 = sub_1D13F2748();
    char v41 = v15;

    if (!(v13 >> 62))
    {
      if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_22;
      }
      goto LABEL_32;
    }
LABEL_31:
    swift_bridgeObjectRetain();
    uint64_t v51 = sub_1D13F2B88();
    swift_bridgeObjectRelease();
    if (v51)
    {
LABEL_22:
      if ((v13 & 0xC000000000000001) != 0)
      {
        id v42 = (id)MEMORY[0x1D25F54B0](0, v13);
      }
      else
      {
        if (!*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          __break(1u);
        }
        id v42 = *(id *)(v13 + 32);
      }
      uint64_t v43 = v42;
      swift_bridgeObjectRelease();
      id v44 = objc_msgSend(v43, sel_targetApplicationRecord);

      id v45 = objc_msgSend(v44, sel_bundleIdentifier);
      if (v45)
      {
        sub_1D13F2688();
        uint64_t v47 = v46;

        unsigned int v48 = (void *)sub_1D13F1ED8();
        if (v47)
        {
          uint64_t v49 = (void *)sub_1D13F2678();
          swift_bridgeObjectRelease();
LABEL_35:
          id v52 = objc_allocWithZone(MEMORY[0x1E4FB4818]);
          char v53 = (void *)sub_1D13F2678();
          int v15 = objc_msgSend(v52, sel_initWithURL_bundleIdentifier_actionTitle_, v48, v49, v53);

          ((void (**)(char *, unint64_t))v23)[1](v18, v14);
          return v15;
        }
LABEL_34:
        uint64_t v49 = 0;
        goto LABEL_35;
      }
LABEL_33:
      unsigned int v48 = (void *)sub_1D13F1ED8();
      goto LABEL_34;
    }
LABEL_32:
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  sub_1D1384D2C(v13);
  sub_1D1384D8C();
  swift_allocError();
  swift_willThrow();
  return v15;
}

uint64_t sub_1D1384CC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64D858);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D1384D2C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64D858);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1D1384D8C()
{
  unint64_t result = qword_1EA64D868;
  if (!qword_1EA64D868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA64D868);
  }
  return result;
}

uint64_t sub_1D1384DE0(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1D1384E1C@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_retain();
}

void *sub_1D1384E28()
{
  return sub_1D13845B4(*v0);
}

uint64_t sub_1D1384E44(uint64_t a1, uint64_t a2)
{
  return sub_1D13AB29C(a1, a2);
}

id sub_1D1384E5C(uint64_t a1)
{
  uint64_t v2 = sub_1D13F1DE8();
  uint64_t v51 = *(void *)(v2 - 8);
  uint64_t v52 = v2;
  MEMORY[0x1F4188790](v2, v3);
  id v50 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1D13F1FF8();
  MEMORY[0x1F4188790](v5 - 8, v6);
  uint64_t v7 = sub_1D13F1EA8();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v9);
  uint64_t v11 = (uint64_t *)((char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = sub_1D13F2668();
  MEMORY[0x1F4188790](v12 - 8, v13);
  uint64_t v14 = sub_1D13F1EB8();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14, v16);
  char v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19, v20);
  uint64_t v22 = (char *)&v48 - v21;
  uint64_t v23 = a1 + OBJC_IVAR____TtC21AppPredictionInternal14MeetingContext_dependencies;
  id v24 = *(void **)(v23 + *(int *)(type metadata accessor for MeetingContext.Dependencies(0) + 20));
  sub_1D13F2658();
  uint64_t *v11 = type metadata accessor for ContextualEngine();
  (*(void (**)(uint64_t *, void, uint64_t))(v8 + 104))(v11, *MEMORY[0x1E4F275F0], v7);
  sub_1D13F1FE8();
  sub_1D13F1EC8();
  char v25 = (void *)*MEMORY[0x1E4FB4E88];
  uint64_t v53 = v15;
  uint64_t v54 = v14;
  id v26 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  uint64_t v49 = v22;
  v26(v18, v22, v14);
  id v27 = v25;
  sub_1D13F2698();
  id v28 = objc_allocWithZone(MEMORY[0x1E4FB49F8]);
  id v29 = (void *)sub_1D13F2678();
  swift_bridgeObjectRelease();
  char v30 = (void *)sub_1D13F2678();
  char v31 = (void *)sub_1D13F2678();
  id v32 = objc_msgSend(v28, sel_initWithIdentifier_name_symbolName_colorName_, v27, v29, v30, v31);

  id result = objc_msgSend(v24, sel_UUID);
  if (result)
  {
    id v34 = result;
    sub_1D13F2688();

    id v35 = objc_msgSend(v24, sel_calendarItemIdentifier);
    sub_1D13F2688();

    id result = objc_msgSend(v24, sel_title);
    if (result)
    {
      char v36 = result;
      uint64_t v37 = self;
      uint64_t v38 = sub_1D13F2688();
      uint64_t v40 = v39;

      uint64_t v55 = v38;
      uint64_t v56 = v40;
      char v41 = v50;
      sub_1D13F1DD8();
      sub_1D1385408();
      sub_1D13F2998();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v41, v52);
      swift_bridgeObjectRelease();
      id v42 = objc_allocWithZone(MEMORY[0x1E4FB4640]);
      uint64_t v43 = (void *)sub_1D13F2678();
      swift_bridgeObjectRelease();
      id v44 = (void *)sub_1D13F2678();
      swift_bridgeObjectRelease();
      id v45 = (void *)sub_1D13F2678();
      swift_bridgeObjectRelease();
      id v46 = objc_msgSend(v42, sel_initWithEventIdentifier_uniqueIdentifier_title_, v43, v44, v45);

      id v47 = objc_msgSend(v37, sel_turnOn_untilEventEnds_, v32, v46);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v49, v54);
      return v47;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_1D1385408()
{
  unint64_t result = qword_1EA64D878;
  if (!qword_1EA64D878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA64D878);
  }
  return result;
}

unint64_t sub_1D1385460()
{
  unint64_t result = qword_1EA64D880;
  if (!qword_1EA64D880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA64D880);
  }
  return result;
}

unint64_t sub_1D13854BC()
{
  unint64_t result = qword_1EA64D888;
  if (!qword_1EA64D888)
  {
    type metadata accessor for MeetingContext(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA64D888);
  }
  return result;
}

id sub_1D1385514()
{
  return sub_1D1384E5C(*v0);
}

ValueMetadata *type metadata accessor for JoinMeetingActionProducer()
{
  return &type metadata for JoinMeetingActionProducer;
}

uint64_t getEnumTagSinglePayload for JoinMeetingActionProducer.Error(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for JoinMeetingActionProducer.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1D1385644);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for JoinMeetingActionProducer.Error()
{
  return &type metadata for JoinMeetingActionProducer.Error;
}

ValueMetadata *type metadata accessor for DoNotDisturbActionProducer()
{
  return &type metadata for DoNotDisturbActionProducer;
}

void sub_1D1385694(uint64_t a1, uint64_t a2, char a3)
{
  v27[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v4 = sub_1D13F2538();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)sub_1D13F2678();
  swift_bridgeObjectRelease();
  uint64_t v10 = self;
  v27[0] = 0;
  id v11 = objc_msgSend(v10, sel_extensionWithIdentifier_error_, v9, v27);

  if (v11)
  {
    id v12 = v27[0];
    id v13 = objc_msgSend(v11, sel__plugIn);
    if (a3)
    {
      if (v13)
      {
        objc_msgSend(v13, sel_setUserElection_, 0);
LABEL_9:
        swift_unknownObjectRelease();

        return;
      }
      __break(1u);
    }
    else if (v13)
    {
      objc_msgSend(v13, sel_setUserElection_, 2);
      goto LABEL_9;
    }
    __break(1u);
  }
  else
  {
    id v14 = v27[0];
    uint64_t v15 = (void *)sub_1D13F1E98();

    swift_willThrow();
    sub_1D13F2528();
    id v16 = v15;
    id v17 = v15;
    char v18 = sub_1D13F2508();
    os_log_type_t v19 = sub_1D13F2838();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v26 = v5;
      uint64_t v22 = (void *)v21;
      *(_DWORD *)uint64_t v20 = 138412290;
      id v23 = v15;
      id v24 = (void *)_swift_stdlib_bridgeErrorToNSError();
      v27[0] = v24;
      sub_1D13F2978();
      *uint64_t v22 = v24;

      _os_log_impl(&dword_1D0FA3000, v18, v19, "Could not find extension: %@", v20, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23870);
      swift_arrayDestroy();
      char v25 = v22;
      uint64_t v5 = v26;
      MEMORY[0x1D25F77B0](v25, -1, -1);
      MEMORY[0x1D25F77B0](v20, -1, -1);
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

uint64_t sub_1D13859D0(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

id ATXPlugInManager.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id ATXPlugInManager.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

id ATXPlugInManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t _s21AppPredictionInternal16ATXPlugInManagerC07setPlugE04name9isEnabledySS_SbtFZ_0(uint64_t a1, uint64_t a2, int a3)
{
  int v25 = a3;
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t v3 = sub_1D13F2578();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_1D13F25A8();
  uint64_t v8 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26, v9);
  id v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1D13F2588();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12, v14);
  id v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D1385EAC();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v16, *MEMORY[0x1E4FBCB10], v12);
  id v17 = (void *)sub_1D13F28B8();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = v24;
  *(void *)(v18 + 16) = v23;
  *(void *)(v18 + 24) = v19;
  *(unsigned char *)(v18 + 32) = v25;
  aBlock[4] = sub_1D1385F24;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1D13859D0;
  aBlock[3] = &block_descriptor;
  uint64_t v20 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  sub_1D13F2598();
  uint64_t v27 = MEMORY[0x1E4FBC860];
  sub_1D1385F48();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD239E0);
  sub_1D1385FA0();
  sub_1D13F29B8();
  MEMORY[0x1D25F52A0](0, v11, v7, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v26);
  return swift_release();
}

uint64_t type metadata accessor for ATXPlugInManager()
{
  return self;
}

unint64_t sub_1D1385EAC()
{
  unint64_t result = qword_1EBD23970;
  if (!qword_1EBD23970)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EBD23970);
  }
  return result;
}

uint64_t sub_1D1385EEC()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 33, 7);
}

void sub_1D1385F24()
{
  sub_1D1385694(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

unint64_t sub_1D1385F48()
{
  unint64_t result = qword_1EBD239D0;
  if (!qword_1EBD239D0)
  {
    sub_1D13F2578();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBD239D0);
  }
  return result;
}

unint64_t sub_1D1385FA0()
{
  unint64_t result = qword_1EBD239E8;
  if (!qword_1EBD239E8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EBD239E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBD239E8);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

void *sub_1D1386044()
{
  return &unk_1D142C400;
}

double sub_1D1386050()
{
  return 55.0;
}

uint64_t sub_1D1386060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1D1386110(a1, (uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64D890);
  if (!swift_dynamicCast()) {
    return 0;
  }
  uint64_t v5 = (void *)MEMORY[0x1D25F6640]();
  sub_1D1386174(a2, a3, (uint64_t)v7);
  swift_bridgeObjectRelease();
  return v7[0];
}

uint64_t sub_1D1386110(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_1D1386174(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  v43[0] = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD239C8);
  MEMORY[0x1F4188790](v5 - 8, v6);
  uint64_t v8 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9, v10);
  uint64_t v12 = (char *)v43 - v11;
  id v13 = sub_1D1383200();
  sub_1D1386614(a1, (uint64_t)v12);
  sub_1D1386614(a2, (uint64_t)v8);
  id v14 = objc_allocWithZone(MEMORY[0x1E4F4AE40]);
  id v15 = sub_1D138667C((uint64_t)v12, (uint64_t)v8, 0, 0);
  id v16 = objc_msgSend(v13, sel_query);
  sub_1D13F2688();

  id v17 = objc_msgSend(v13, sel_identifier);
  sub_1D13F2688();

  id v18 = objc_allocWithZone(MEMORY[0x1E4F4B328]);
  id v19 = v15;
  uint64_t v20 = (void *)sub_1D13F2678();
  swift_bridgeObjectRelease();
  uint64_t v21 = (void *)sub_1D13F2678();
  swift_bridgeObjectRelease();
  id v22 = objc_msgSend(v18, sel_initWithSportsTeamName_qid_criteria_, v20, v21, v19);

  id v23 = objc_msgSend(self, sel_clientModelIdFromClientModelType_, 44);
  sub_1D13F2688();

  id v24 = objc_allocWithZone(MEMORY[0x1E4F93948]);
  int v25 = (void *)sub_1D13F2678();
  swift_bridgeObjectRelease();
  uint64_t v26 = (void *)sub_1D13F2678();
  id v27 = objc_msgSend(v24, sel_initWithClientModelId_clientModelVersion_, v25, v26);

  id v28 = objc_msgSend(v22, sel_actionDescription);
  sub_1D13F2688();

  id v29 = objc_msgSend(v22, sel_actionIdentifier);
  sub_1D13F2688();

  id v30 = objc_allocWithZone(MEMORY[0x1E4F93950]);
  id v31 = v22;
  id v32 = (void *)sub_1D13F2678();
  swift_bridgeObjectRelease();
  uint64_t v33 = (void *)sub_1D13F2678();
  swift_bridgeObjectRelease();
  id v34 = objc_msgSend(v30, sel_initWithExecutableObject_executableDescription_executableIdentifier_suggestionExecutableType_, v31, v32, v33, 8);

  id v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F93968]), sel_initWithRawScore_suggestedConfidenceCategory_, 4, 55.0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64D850);
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_1D142C3F0;
  *(void *)(v36 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F93960]), sel_initWithApplicableSuggestionLayout_, 5);
  v43[1] = v36;
  sub_1D13F2768();
  id v37 = objc_allocWithZone(MEMORY[0x1E4F93978]);
  sub_1D13867E8();
  uint64_t v38 = (void *)sub_1D13F2738();
  swift_bridgeObjectRelease();
  LOWORD(v42) = 1;
  id v39 = objc_msgSend(v37, sel_initWithTitle_subtitle_predictionReason_preferredLayoutConfigs_allowedOnLockscreen_allowedOnHomeScreen_allowedOnSpotlight_shouldClearOnEngagement_predictionReasons_, 0, 0, 0, v38, 0, 0, v42, 0x40000000000);

  if (v34)
  {
    id v40 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F93938]), sel_initWithClientModelSpecification_executableSpecification_uiSpecification_scoreSpecification_, v27, v34, v39, v35);
    if (v40)
    {
      id v41 = v40;

      *(void *)v43[0] = v41;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1D1386614(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD239C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_1D138667C(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = sub_1D13F1FA8();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  id v13 = 0;
  if (v12(a1, 1, v10) != 1)
  {
    id v13 = (void *)sub_1D13F1F48();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  }
  if (v12(a2, 1, v10) == 1)
  {
    id v14 = 0;
  }
  else
  {
    id v14 = (void *)sub_1D13F1F48();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a2, v10);
  }
  id v15 = objc_msgSend(v5, sel_initWithStartDate_endDate_lockScreenEligible_predicate_, v13, v14, a3 & 1, a4);

  return v15;
}

unint64_t sub_1D13867E8()
{
  unint64_t result = qword_1EA64D898;
  if (!qword_1EA64D898)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EA64D898);
  }
  return result;
}

uint64_t (*sub_1D1386828())()
{
  return nullsub_1;
}

uint64_t sub_1D1386844()
{
  return swift_allocObject();
}

uint64_t sub_1D1386854()
{
  return v0;
}

uint64_t sub_1D138685C()
{
  type metadata accessor for BlendingContext();
  sub_1D1386ABC((unint64_t *)&unk_1EA64DA60);
  return sub_1D1387760();
}

uint64_t type metadata accessor for BlendingContext()
{
  return self;
}

uint64_t sub_1D13868DC()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t sub_1D138694C()
{
  return MEMORY[0x1F4186488](v0, 16, 7);
}

uint64_t sub_1D138695C()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_1D1386970()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t sub_1D13869B4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))() & 1;
}

uint64_t sub_1D13869FC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t sub_1D1386A40@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 112))();
  *a1 = result;
  return result;
}

uint64_t sub_1D1386A78(uint64_t a1)
{
  uint64_t result = sub_1D1386ABC(&qword_1EA64D8A0);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = result;
  return result;
}

uint64_t sub_1D1386ABC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for BlendingContext();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D1386AFC@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for BlendingContext();
  sub_1D1386ABC((unint64_t *)&unk_1EA64DA60);
  uint64_t result = sub_1D1387790();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1D1386B5C()
{
  type metadata accessor for LocationOfInterestContext();
  sub_1D1387600(&qword_1EA64D8A8);
  return sub_1D1387760();
}

uint64_t type metadata accessor for LocationOfInterestContext()
{
  return self;
}

void *sub_1D1386BDC()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

void sub_1D1386C20(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = a1;
}

uint64_t sub_1D1386C68()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t sub_1D1386CD8()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_1D1386CEC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t sub_1D1386D30()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))() & 1;
}

uint64_t sub_1D1386D78@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 96))();
  *a1 = result;
  return result;
}

uint64_t sub_1D1386DC4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 120))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1D1386E00@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for LocationOfInterestContext();
  sub_1D1387600(&qword_1EA64D8A8);
  uint64_t result = sub_1D1387790();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1D1386E60()
{
  sub_1D138744C();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1D142C4A0;
  *(void *)(v0 + 32) = type metadata accessor for LocationOfInterestContextStore.HomeContext();
  *(void *)(v0 + 40) = type metadata accessor for LocationOfInterestContextStore.WorkContext();
  *(void *)(v0 + 4_Block_object_dispose(&STACK[0x210], 8) = type metadata accessor for LocationOfInterestContextStore.GymContext();
  *(void *)(v0 + 56) = type metadata accessor for LocationOfInterestContextStore.SchoolContext();
  uint64_t result = type metadata accessor for LocationOfInterestContextStore.AwayContext();
  *(void *)(v0 + 64) = result;
  qword_1EA650008 = v0;
  return result;
}

uint64_t *sub_1D1386EDC()
{
  if (qword_1EA64ECD0 != -1) {
    swift_once();
  }
  return &qword_1EA650008;
}

uint64_t sub_1D1386F28()
{
  if (qword_1EA64ECD0 != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

uint64_t (*sub_1D1386F84())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D1386FD8(void *a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 24) = a1;
  uint64_t v3 = qword_1EA64ECD0;
  id v4 = a1;
  if (v3 != -1) {
    swift_once();
  }
  id v5 = v4;
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = sub_1D13874AC(v6, (uint64_t)a1);
  swift_bridgeObjectRelease();

  *(void *)(v2 + 16) = v7;
  return v2;
}

uint64_t sub_1D13870A8(void *a1)
{
  *(void *)(v1 + 24) = a1;
  uint64_t v3 = qword_1EA64ECD0;
  id v4 = a1;
  if (v3 != -1) {
    swift_once();
  }
  id v5 = v4;
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = sub_1D13874AC(v6, (uint64_t)a1);
  swift_bridgeObjectRelease();

  *(void *)(v1 + 16) = v7;
  return v1;
}

uint64_t sub_1D1387160()
{
  return 0x656D6F68207441;
}

void *sub_1D1387178()
{
  uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 96))();
  if (result)
  {
    uint64_t v2 = result;
    id v3 = objc_msgSend(result, sel_type);

    return (void *)(v3 == 0);
  }
  return result;
}

uint64_t sub_1D13871DC()
{
  return 0x6B726F77207441;
}

void *sub_1D13871F4()
{
  uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 96))();
  if (result)
  {
    uint64_t v2 = result;
    id v3 = objc_msgSend(result, sel_type);

    return (void *)(v3 == (id)1);
  }
  return result;
}

uint64_t sub_1D1387258()
{
  return 0x6720656874207441;
}

void *sub_1D1387274()
{
  uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 96))();
  if (result)
  {
    uint64_t v2 = result;
    id v3 = objc_msgSend(result, sel_type);

    return (void *)(v3 == (id)3);
  }
  return result;
}

uint64_t sub_1D13872D8()
{
  return 0x6F6F686373207441;
}

void *sub_1D13872F4()
{
  uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 96))();
  if (result)
  {
    uint64_t v2 = result;
    id v3 = objc_msgSend(result, sel_type);

    return (void *)(v3 == (id)2);
  }
  return result;
}

uint64_t sub_1D1387358()
{
  return 0x6F72662079617741;
}

uint64_t sub_1D138737C()
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)v0 + 96);
  uint64_t v2 = (void *)v1();

  if (!v2) {
    return 1;
  }
  uint64_t result = v1();
  if (result)
  {
    id v4 = (void *)result;
    id v5 = objc_msgSend((id)result, sel_type);

    return v5 == (id)-1;
  }
  return result;
}

uint64_t sub_1D1387408()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t sub_1D138744C()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64D8B8);
  if (swift_isClassType()) {
    uint64_t v1 = v0;
  }
  else {
    uint64_t v1 = 0;
  }
  if (v1) {
    uint64_t v2 = (uint64_t *)&unk_1EA64D850;
  }
  else {
    uint64_t v2 = (uint64_t *)&unk_1EA64D8C0;
  }
  return __swift_instantiateConcreteTypeFromMangledName(v2);
}

uint64_t sub_1D13874AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v3)
  {
    uint64_t v11 = MEMORY[0x1E4FBC860];
    sub_1D13F2B08();
    uint64_t v6 = (uint64_t *)(a1 + 32);
    uint64_t v7 = type metadata accessor for LocationOfInterestContext();
    uint64_t v8 = sub_1D1387600(&qword_1EA64D8A8);
    do
    {
      uint64_t v9 = *v6++;
      uint64_t v10 = a2;
      sub_1D1387878(v9, (uint64_t)&v10, v7, v7, v8, v8);
      sub_1D13F2AE8();
      sub_1D13F2B18();
      sub_1D13F2B28();
      sub_1D13F2AF8();
      --v3;
    }
    while (v3);
    return v11;
  }
  return result;
}

uint64_t sub_1D13875BC(uint64_t a1)
{
  uint64_t result = sub_1D1387600(&qword_1EA64D8B0);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = result;
  return result;
}

uint64_t sub_1D1387600(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for LocationOfInterestContext();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D1387640()
{
  return sub_1D1387600(&qword_1EA64D8A8);
}

ValueMetadata *type metadata accessor for LocationOfInterestContextDependencies()
{
  return &type metadata for LocationOfInterestContextDependencies;
}

uint64_t type metadata accessor for LocationOfInterestContextStore()
{
  return self;
}

uint64_t type metadata accessor for LocationOfInterestContextStore.HomeContext()
{
  return self;
}

uint64_t type metadata accessor for LocationOfInterestContextStore.WorkContext()
{
  return self;
}

uint64_t type metadata accessor for LocationOfInterestContextStore.GymContext()
{
  return self;
}

uint64_t type metadata accessor for LocationOfInterestContextStore.SchoolContext()
{
  return self;
}

uint64_t type metadata accessor for LocationOfInterestContextStore.AwayContext()
{
  return self;
}

uint64_t sub_1D1387760()
{
  return sub_1D13F26A8();
}

uint64_t sub_1D1387790()
{
  return sub_1D13F26A8();
}

uint64_t sub_1D13877E0(uint64_t a1, uint64_t a2)
{
  sub_1D13F2A98();
  (*(void (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  id v4 = objc_allocWithZone((Class)sub_1D13F2408());
  return sub_1D13F23E8();
}

uint64_t sub_1D1387878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v11 = MEMORY[0x1F4188790](AssociatedTypeWitness, v10);
  id v13 = (char *)&v16 - v12;
  (*(void (**)(char *, uint64_t, double))(v14 + 16))((char *)&v16 - v12, a2, v11);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a6 + 64))(v13, a4, a6);
}

uint64_t sub_1D1387984(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(a2 + 24))();
  swift_getAssociatedTypeWitness();
  sub_1D13F27A8();
  swift_getWitnessTable();
  sub_1D13F2AD8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64DA70);
  uint64_t v2 = sub_1D13F2B38();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1D1387A7C()
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 48);
  uint64_t v2 = swift_checkMetadataState();
  return v1(v2, AssociatedConformanceWitness) & 1;
}

uint64_t sub_1D1387B34(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_1D1387B48(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_1D1387B5C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t sub_1D1387B70(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t sub_1D1387B84(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t sub_1D1387B98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t sub_1D1387BAC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_1D1387BC0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

id sub_1D1387BD4(void *a1)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23A30);
  double v6 = MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = objc_msgSend(a1, sel_setContinue, v6);
  if (result)
  {
    uint64_t v10 = sub_1D13F27D8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 1, 1, v10);
    double v11 = (void *)swift_allocObject();
    void v11[2] = 0;
    v11[3] = 0;
    void v11[4] = a1;
    v11[5] = v1;
    v11[6] = ObjectType;
    id v12 = a1;
    id v13 = v1;
    sub_1D1388CB4((uint64_t)v8, (uint64_t)&unk_1EA64D8D0, (uint64_t)v11);
    return (id)swift_release();
  }
  return result;
}

uint64_t sub_1D1387D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = a5;
  v6[9] = a6;
  v6[7] = a4;
  uint64_t v7 = sub_1D13F23D8();
  v6[10] = v7;
  v6[11] = *(void *)(v7 - 8);
  v6[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64A900);
  v6[13] = swift_task_alloc();
  uint64_t v8 = sub_1D13F2448();
  v6[14] = v8;
  v6[15] = *(void *)(v8 - 8);
  uint8_t v6[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64A908);
  v6[17] = swift_task_alloc();
  uint64_t v9 = sub_1D13F2428();
  v6[18] = v9;
  v6[19] = *(void *)(v9 - 8);
  v6[20] = swift_task_alloc();
  uint64_t v10 = sub_1D13F2538();
  v6[21] = v10;
  v6[22] = *(void *)(v10 - 8);
  v6[23] = swift_task_alloc();
  v6[24] = swift_task_alloc();
  v6[25] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D1387F54, 0, 0);
}

uint64_t sub_1D1387F54()
{
  sub_1D13F2478();
  *(void *)(v0 + 20_Block_object_dispose(&STACK[0x210], 8) = sub_1D13F2468();
  sub_1D138E29C((unint64_t *)&unk_1EBD236B8, MEMORY[0x1E4F5ACA0]);
  uint64_t v2 = sub_1D13F27B8();
  return MEMORY[0x1F4188298](sub_1D1388018, v2, v1);
}

uint64_t sub_1D1388018()
{
  *(void *)(v0 + 216) = sub_1D13F2458();
  *(void *)(v0 + 224) = 0;
  swift_release();
  return MEMORY[0x1F4188298](sub_1D13880AC, 0, 0);
}

uint64_t sub_1D13880AC()
{
  uint64_t v70 = v0;
  unint64_t v1 = *(void *)(v0 + 216);
  if (!v1)
  {
    sub_1D13F24F8();
    uint64_t v9 = sub_1D13F2508();
    os_log_type_t v10 = sub_1D13F2838();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = *(void *)(v0 + 200);
    uint64_t v14 = *(void *)(v0 + 168);
    uint64_t v13 = *(void *)(v0 + 176);
    if (v11)
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      uint64_t v69 = v16;
      *(_DWORD *)id v15 = 136315138;
      uint64_t v17 = sub_1D13F2D88();
      *(void *)(v0 + 32) = sub_1D138B264(v17, v18, &v69);
      sub_1D13F2978();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D0FA3000, v9, v10, "%s: not collecting ambient metrics, no stack config cache", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1D25F77B0](v16, -1, -1);
      MEMORY[0x1D25F77B0](v15, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    }
    goto LABEL_30;
  }
  if (!(v1 >> 62))
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2 == 2) {
      goto LABEL_4;
    }
LABEL_27:
    sub_1D13F24F8();
    swift_bridgeObjectRetain();
    id v50 = sub_1D13F2508();
    os_log_type_t v51 = sub_1D13F2838();
    BOOL v52 = os_log_type_enabled(v50, v51);
    uint64_t v53 = *(void *)(v0 + 192);
    uint64_t v54 = *(void *)(v0 + 168);
    uint64_t v55 = *(void *)(v0 + 176);
    if (v52)
    {
      uint64_t v56 = swift_slowAlloc();
      uint64_t v64 = swift_slowAlloc();
      uint64_t v69 = v64;
      *(_DWORD *)uint64_t v56 = 136315394;
      uint64_t v57 = sub_1D13F2D88();
      *(void *)(v0 + 40) = sub_1D138B264(v57, v58, &v69);
      sub_1D13F2978();
      swift_bridgeObjectRelease();
      *(_WORD *)(v56 + 12) = 2048;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 4_Block_object_dispose(&STACK[0x210], 8) = v2;
      sub_1D13F2978();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D0FA3000, v50, v51, "%s: not collecting ambient metrics, number of stacks: %ld, should be 2", (uint8_t *)v56, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1D25F77B0](v64, -1, -1);
      MEMORY[0x1D25F77B0](v56, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v53, v54);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v53, v54);
    }
    goto LABEL_30;
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = sub_1D13F2B88();
  swift_bridgeObjectRelease();
  if (v2 != 2) {
    goto LABEL_27;
  }
LABEL_4:
  if (objc_msgSend(*(id *)(v0 + 56), sel_shouldDefer)) {
    goto LABEL_6;
  }
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 144);
  double v6 = *(void **)(v0 + 56);
  uint64_t v7 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 64)) + 0x58))(v1);
  sub_1D138E29C(&qword_1EBD23938, MEMORY[0x1E4F5AC88]);
  sub_1D13F23B8();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  if (objc_msgSend(v6, sel_shouldDefer))
  {
LABEL_6:
    uint64_t v8 = *(void **)(v0 + 56);
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  uint64_t v19 = (*(uint64_t (**)(unint64_t))((*v7 & **(void **)(v0 + 64)) + 0x60))(v1);
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(v19 + 16);
  uint64_t v21 = *(void *)(v0 + 120);
  if (v20)
  {
    id v23 = *(void (**)(uint64_t, unint64_t, uint64_t))(v21 + 16);
    uint64_t v22 = v21 + 16;
    unint64_t v24 = v19 + ((*(unsigned __int8 *)(v22 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 64));
    uint64_t v65 = *(void *)(v22 + 56);
    unint64_t v67 = v23;
    int v25 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 40);
    uint64_t v26 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 32);
    unint64_t v62 = (void (**)(uint64_t, void, uint64_t))(v22 + 16);
    id v27 = (void (**)(uint64_t, uint64_t))(v22 - 8);
    unint64_t v61 = (v22 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    while (1)
    {
      uint64_t v28 = *(void *)(v0 + 136);
      uint64_t v29 = *(void *)(v0 + 112);
      uint64_t v30 = v22;
      v67(v28, v24, v29);
      id v31 = *v25;
      (*v25)(v28, 0, 1, v29);
      if ((*v26)(v28, 1, v29) == 1) {
        break;
      }
      uint64_t v32 = *(void *)(v0 + 128);
      uint64_t v33 = *(void *)(v0 + 112);
      (*v62)(v32, *(void *)(v0 + 136), v33);
      sub_1D138E29C(&qword_1EBD23940, MEMORY[0x1E4F5AC98]);
      sub_1D13F23B8();
      (*v27)(v32, v33);
      v24 += v65;
      --v20;
      uint64_t v22 = v30;
      if (!v20) {
        goto LABEL_16;
      }
    }
  }
  else
  {
    id v31 = *(void (**)(void, uint64_t, uint64_t, void))(v21 + 56);
LABEL_16:
    v31(*(void *)(v0 + 136), 1, 1, *(void *)(v0 + 112));
  }
  id v34 = *(void **)(v0 + 56);
  swift_bridgeObjectRelease();
  if ((objc_msgSend(v34, sel_shouldDefer) & 1) == 0)
  {
    uint64_t v35 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 64)) + 0x70))();
    uint64_t v36 = *(void *)(v35 + 16);
    uint64_t v37 = *(void *)(v0 + 88);
    if (v36)
    {
      id v39 = *(void (**)(uint64_t, unint64_t, uint64_t))(v37 + 16);
      uint64_t v38 = v37 + 16;
      unint64_t v40 = v35 + ((*(unsigned __int8 *)(v38 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 64));
      uint64_t v66 = *(void *)(v38 + 56);
      char v68 = v39;
      id v41 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 40);
      uint64_t v42 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 32);
      char v63 = (void (**)(uint64_t, void, uint64_t))(v38 + 16);
      uint64_t v43 = (void (**)(uint64_t, uint64_t))(v38 - 8);
      while (1)
      {
        uint64_t v44 = *(void *)(v0 + 104);
        uint64_t v45 = *(void *)(v0 + 80);
        uint64_t v46 = v38;
        v68(v44, v40, v45);
        id v47 = *v41;
        (*v41)(v44, 0, 1, v45);
        if ((*v42)(v44, 1, v45) == 1) {
          break;
        }
        uint64_t v48 = *(void *)(v0 + 96);
        uint64_t v49 = *(void *)(v0 + 80);
        (*v63)(v48, *(void *)(v0 + 104), v49);
        sub_1D138E29C(&qword_1EA64D918, MEMORY[0x1E4F5AC78]);
        sub_1D13F23B8();
        (*v43)(v48, v49);
        v40 += v66;
        --v36;
        uint64_t v38 = v46;
        if (!v36) {
          goto LABEL_24;
        }
      }
    }
    else
    {
      id v47 = *(void (**)(void, uint64_t, uint64_t, void))(v37 + 56);
LABEL_24:
      v47(*(void *)(v0 + 104), 1, 1, *(void *)(v0 + 80));
    }
    swift_bridgeObjectRelease();
  }
LABEL_30:
  uint64_t v8 = *(void **)(v0 + 56);
LABEL_31:
  objc_msgSend(v8, sel_setDone, v61);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unsigned int v59 = *(uint64_t (**)(void))(v0 + 8);
  return v59();
}

uint64_t sub_1D1388908()
{
  uint64_t v24 = v0;
  unint64_t v1 = *(void **)(v0 + 224);
  swift_release();
  sub_1D13F24F8();
  id v2 = v1;
  id v3 = v1;
  uint64_t v4 = sub_1D13F2508();
  os_log_type_t v5 = sub_1D13F2838();
  if (os_log_type_enabled(v4, v5))
  {
    double v6 = *(void **)(v0 + 224);
    uint64_t v20 = *(void *)(v0 + 176);
    uint64_t v21 = *(void *)(v0 + 168);
    uint64_t v22 = *(void *)(v0 + 184);
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    uint64_t v23 = v19;
    *(_DWORD *)uint64_t v7 = 136315394;
    uint64_t v9 = sub_1D13F2D88();
    *(void *)(v0 + 16) = sub_1D138B264(v9, v10, &v23);
    sub_1D13F2978();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2112;
    id v11 = v6;
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 24) = v12;
    sub_1D13F2978();
    void *v8 = v12;

    _os_log_impl(&dword_1D0FA3000, v4, v5, "%s: could not read ambient stacks: %@", (uint8_t *)v7, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23870);
    swift_arrayDestroy();
    MEMORY[0x1D25F77B0](v8, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1D25F77B0](v19, -1, -1);
    MEMORY[0x1D25F77B0](v7, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, v21);
  }
  else
  {
    uint64_t v13 = *(void **)(v0 + 224);
    uint64_t v15 = *(void *)(v0 + 176);
    uint64_t v14 = *(void *)(v0 + 184);
    uint64_t v16 = *(void *)(v0 + 168);

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }
  objc_msgSend(*(id *)(v0 + 56), sel_setDone, v19);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

uint64_t sub_1D1388C0C()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  os_log_type_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1D138E300;
  return sub_1D1387D00((uint64_t)v5, v6, v7, v2, v3, v4);
}

uint64_t sub_1D1388CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D13F27D8();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1D13F27C8();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1D138E150(a1, (uint64_t *)&unk_1EBD23A30);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1D13F27B8();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1D1388FE4(uint64_t a1)
{
  sub_1D13F24A8();
  uint64_t v3 = (void *)sub_1D13F2678();
  swift_bridgeObjectRelease();
  uint64_t Bool = _ATXDomainGetBool(v3);

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      LODWORD(v3) = a1;
    }
    else {
      LODWORD(v3) = a1 & 0xFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    os_log_type_t v5 = (char *)sub_1D13F2B88();
    if (v5)
    {
LABEL_3:
      unint64_t v6 = a1 & 0xC000000000000001;
      if ((a1 & 0xC000000000000001) != 0)
      {
        id v7 = (id)MEMORY[0x1D25F54B0](0, a1);
      }
      else
      {
        if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_45;
        }
        id v7 = *(id *)(a1 + 32);
      }
      uint64_t v8 = v7;
      swift_bridgeObjectRelease();
      uint64_t v1 = &selRef__updateAppLaunchHistogram_bundleId_context_weight_;
      LODWORD(v3) = objc_msgSend(v8, sel_allowsSmartRotate);

      unsigned int v32 = Bool;
      if (v6)
      {
        swift_bridgeObjectRetain();
        id v16 = (id)MEMORY[0x1D25F54B0](0, a1);
        swift_bridgeObjectRelease();
      }
      else
      {
        if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_49;
        }
        id v16 = *(id *)(a1 + 32);
      }
      id v17 = objc_msgSend(v16, sel_widgets);

      sub_1D1384DE0(0, &qword_1EBD23950);
      unint64_t v18 = sub_1D13F2748();

      if (!(v18 >> 62))
      {
        uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_12:
        uint64_t v9 = swift_bridgeObjectRelease();
        if (v6)
        {
          swift_bridgeObjectRetain();
          id v20 = (id)MEMORY[0x1D25F54B0](0, a1);
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
        if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          id v20 = *(id *)(a1 + 32);
LABEL_16:
          id v21 = objc_msgSend(v20, sel_allowsNewWidget);

          uint64_t v22 = v5 - 1;
          if (__OFSUB__(v5, 1))
          {
            __break(1u);
            goto LABEL_47;
          }
          unsigned int v31 = v3;
          if (v6)
          {
            swift_bridgeObjectRetain();
            id v23 = (id)MEMORY[0x1D25F54B0](v5 - 1, a1);
            swift_bridgeObjectRelease();
            goto LABEL_22;
          }
          if (((unint64_t)v22 & 0x8000000000000000) == 0)
          {
            if ((unint64_t)v22 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              id v23 = *(id *)(a1 + 8 * (void)v22 + 32);
LABEL_22:
              os_log_type_t v5 = (char *)[v23 v1[437]];

              if (v6)
              {
                swift_bridgeObjectRetain();
                id v24 = (id)MEMORY[0x1D25F54B0](v22, a1);
                swift_bridgeObjectRelease();
                goto LABEL_27;
              }
              if (((unint64_t)v22 & 0x8000000000000000) == 0)
              {
                if ((unint64_t)v22 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
                {
                  id v24 = *(id *)(a1 + 8 * (void)v22 + 32);
LABEL_27:
                  id v25 = objc_msgSend(v24, sel_widgets);

                  unint64_t v26 = sub_1D13F2748();
                  if (!(v26 >> 62))
                  {
                    uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
                    goto LABEL_29;
                  }
LABEL_47:
                  swift_bridgeObjectRetain();
                  uint64_t v27 = sub_1D13F2B88();
                  swift_bridgeObjectRelease();
LABEL_29:
                  uint64_t v9 = swift_bridgeObjectRelease();
                  if (v6)
                  {
                    swift_bridgeObjectRetain();
                    id v28 = (id)MEMORY[0x1D25F54B0](v22, a1);
                    swift_bridgeObjectRelease();
LABEL_34:
                    id v29 = objc_msgSend(v28, sel_allowsNewWidget);

                    uint64_t v10 = v31;
                    uint64_t Bool = v32;
                    goto LABEL_40;
                  }
                  if (((unint64_t)v22 & 0x8000000000000000) == 0)
                  {
                    if ((unint64_t)v22 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
                    {
                      id v28 = *(id *)(a1 + 8 * (void)v22 + 32);
                      goto LABEL_34;
                    }
LABEL_55:
                    __break(1u);
                    return MEMORY[0x1F4112F88](v9, v10, v11, v12, v13, v14, v15);
                  }
LABEL_54:
                  __break(1u);
                  goto LABEL_55;
                }
LABEL_53:
                __break(1u);
                goto LABEL_54;
              }
LABEL_52:
              __break(1u);
              goto LABEL_53;
            }
LABEL_51:
            __break(1u);
            goto LABEL_52;
          }
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
LABEL_45:
      swift_bridgeObjectRetain();
      uint64_t v19 = sub_1D13F2B88();
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
  }
  else
  {
    os_log_type_t v5 = *(char **)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5) {
      goto LABEL_3;
    }
  }
  swift_bridgeObjectRelease();
  id v29 = 0;
  uint64_t v27 = 0;
  id v21 = 0;
  uint64_t v19 = 0;
  uint64_t v10 = 0;
LABEL_40:
  uint64_t v9 = Bool;
  uint64_t v11 = v19;
  id v12 = v21;
  uint64_t v13 = v5;
  uint64_t v14 = v27;
  id v15 = v29;
  return MEMORY[0x1F4112F88](v9, v10, v11, v12, v13, v14, v15);
}

BOOL _ATXDomainGetBool(void *a1)
{
  uint64_t v1 = a1;
  Boolean keyExistsAndHasValidFormat = 0;
  BOOL v2 = CFPreferencesGetAppBooleanValue(v1, (CFStringRef)*MEMORY[0x1E4F4B688], &keyExistsAndHasValidFormat) != 0;

  return v2;
}

unint64_t sub_1D1389490(unint64_t a1)
{
  uint64_t v2 = sub_1D13F2448();
  uint64_t v46 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v3);
  os_log_type_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6, v7);
  BOOL v52 = (char *)&v35 - v8;
  if (a1 >> 62) {
    goto LABEL_31;
  }
  uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v9; uint64_t v9 = sub_1D13F2B88())
  {
    unint64_t v10 = 0;
    unint64_t v40 = a1 & 0xC000000000000001;
    uint64_t v37 = a1 & 0xFFFFFFFFFFFFFF8;
    unint64_t v38 = a1;
    uint64_t v36 = (char *)(a1 + 32);
    uint64_t v44 = v46 + 32;
    uint64_t v45 = (void (**)(char *, char *, uint64_t))(v46 + 16);
    uint64_t v43 = v46 + 8;
    unint64_t v11 = MEMORY[0x1E4FBC860];
    uint64_t v39 = v9;
    while (1)
    {
      if (v40)
      {
        id v12 = (id)MEMORY[0x1D25F54B0](v10, v38);
      }
      else
      {
        if (v10 >= *(void *)(v37 + 16)) {
          goto LABEL_30;
        }
        id v12 = *(id *)&v36[8 * v10];
      }
      a1 = (unint64_t)v12;
      BOOL v13 = __OFADD__(v10, 1);
      unint64_t v14 = v10 + 1;
      if (v13) {
        break;
      }
      id v15 = objc_msgSend(v12, sel_widgets);
      sub_1D1384DE0(0, &qword_1EBD23950);
      unint64_t v16 = sub_1D13F2748();

      if (v16 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v17 = sub_1D13F2B88();
        swift_bridgeObjectRelease();
        id v41 = (id)a1;
        unint64_t v42 = v14;
        if (!v17) {
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
        id v41 = (id)a1;
        unint64_t v42 = v14;
        if (!v17) {
          goto LABEL_4;
        }
      }
      if (v17 < 1) {
        goto LABEL_29;
      }
      uint64_t v18 = 0;
      unint64_t v47 = v16 & 0xC000000000000001;
      uint64_t v48 = v17;
      unint64_t v49 = v16;
      do
      {
        unint64_t v51 = v11;
        if (v47) {
          id v19 = (id)MEMORY[0x1D25F54B0](v18, v16);
        }
        else {
          id v19 = *(id *)(v16 + 8 * v18 + 32);
        }
        id v20 = v19;
        id v21 = objc_msgSend(v19, sel_chsWidget);
        id v22 = objc_msgSend(v21, sel_extensionIdentity);

        swift_beginAccess();
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD23930);
        uint64_t v50 = sub_1D13F2118();
        swift_endAccess();

        id v23 = objc_msgSend(v20, sel_chsWidget);
        id v24 = objc_msgSend(v23, sel_kind);

        sub_1D13F2688();
        id v25 = objc_msgSend(v20, sel_chsWidget);
        id v26 = objc_msgSend(v25, sel_intentReference);

        if (v26)
        {
          id v27 = objc_msgSend(v26, sel_intent);

          id v28 = v5;
          uint64_t v29 = v2;
          id v30 = objc_msgSend(v27, sel__className);

          sub_1D13F2688();
          uint64_t v2 = v29;
          os_log_type_t v5 = v28;
        }
        unsigned int v31 = v52;
        sub_1D13F2438();
        (*v45)(v5, v31, v2);
        unint64_t v11 = v51;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v11 = sub_1D138AFFC(0, *(void *)(v11 + 16) + 1, 1, v11);
        }
        unint64_t v16 = v49;
        a1 = *(void *)(v11 + 16);
        unint64_t v32 = *(void *)(v11 + 24);
        if (a1 >= v32 >> 1) {
          unint64_t v11 = sub_1D138AFFC(v32 > 1, a1 + 1, 1, v11);
        }
        ++v18;
        *(void *)(v11 + 16) = a1 + 1;
        uint64_t v33 = v46;
        (*(void (**)(unint64_t, char *, uint64_t))(v46 + 32))(v11+ ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(void *)(v33 + 72) * a1, v5, v2);

        (*(void (**)(char *, uint64_t))(v33 + 8))(v52, v2);
      }
      while (v48 != v18);
LABEL_4:

      swift_bridgeObjectRelease();
      unint64_t v10 = v42;
      if (v42 == v39)
      {
        swift_bridgeObjectRelease();
        return v11;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E4FBC860];
}

uint64_t sub_1D13899E0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1D13899E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_1D1389A1C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6 = a2;
  sub_1D13F2948();

  sub_1D13F2CF8();
  if (!a5) {
    return sub_1D13F2D08();
  }
  sub_1D13F2D08();
  swift_bridgeObjectRetain();
  sub_1D13F26E8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D1389AD8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1D13F2CE8();
  id v6 = a1;
  sub_1D13F2948();

  sub_1D13F2CF8();
  sub_1D13F2D08();
  if (a4)
  {
    swift_bridgeObjectRetain();
    sub_1D13F26E8();
    swift_bridgeObjectRelease();
  }
  return sub_1D13F2D28();
}

uint64_t sub_1D1389B84()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 24);
  sub_1D13F2CE8();
  id v3 = v1;
  sub_1D13F2948();

  sub_1D13F2CF8();
  sub_1D13F2D08();
  if (v2)
  {
    swift_bridgeObjectRetain();
    sub_1D13F26E8();
    swift_bridgeObjectRelease();
  }
  return sub_1D13F2D28();
}

uint64_t sub_1D1389C30()
{
  uint64_t v1 = *(void *)(v0 + 24);
  id v2 = *(id *)v0;
  sub_1D13F2948();

  sub_1D13F2CF8();
  if (!v1) {
    return sub_1D13F2D08();
  }
  sub_1D13F2D08();
  swift_bridgeObjectRetain();
  sub_1D13F26E8();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D1389CE4()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(v0 + 24);
  sub_1D13F2CE8();
  id v3 = v1;
  sub_1D13F2948();

  sub_1D13F2CF8();
  sub_1D13F2D08();
  if (v2)
  {
    swift_bridgeObjectRetain();
    sub_1D13F26E8();
    swift_bridgeObjectRelease();
  }
  return sub_1D13F2D28();
}

uint64_t sub_1D1389D8C(uint64_t *a1, uint64_t *a2)
{
  return sub_1D138CFF4(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t sub_1D1389DA8()
{
  return 0;
}

uint64_t sub_1D1389DB0(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t sub_1D1389DB8(uint64_t result)
{
  *(void *)(v1 + _Block_object_dispose(&STACK[0x210], 8) = result;
  return result;
}

uint64_t (*sub_1D1389DC0())()
{
  return nullsub_1;
}

uint64_t sub_1D1389DE0()
{
  return 0;
}

unint64_t ATXWidgetStackChangeReason.name.getter(uint64_t a1)
{
  uint64_t v1 = a1 - 1;
  unint64_t result = 0xD000000000000010;
  switch(v1)
  {
    case 0:
      unint64_t result = 0x6F72635372657375;
      break;
    case 1:
      unint64_t result = 0x75536D6574737973;
      break;
    case 2:
      unint64_t result = 0x61466D6574737973;
      break;
    case 3:
      unint64_t result = 0x70556D6574737973;
      break;
    case 4:
      unint64_t result = 0x6572436B63617473;
      break;
    case 5:
      unint64_t result = 0x7365446B63617473;
      break;
    case 6:
      unint64_t result = 0x4173746567646977;
      break;
    case 7:
      return result;
    case 8:
      unint64_t result = 0x6775626564;
      break;
    case 9:
      unint64_t result = 0xD00000000000001ALL;
      break;
    default:
      unint64_t result = 0x6E776F6E6B6E75;
      break;
  }
  return result;
}

uint64_t sub_1D1389F88()
{
  uint64_t v0 = sub_1D13F2028();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2);
  uint64_t v4 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_1D13F2048();
  uint64_t v5 = *(void *)(v52 - 8);
  MEMORY[0x1F4188790](v52, v6);
  uint64_t v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD239C8);
  MEMORY[0x1F4188790](v9 - 8, v10);
  unint64_t v47 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12, v13);
  uint64_t v46 = (char *)&v46 - v14;
  MEMORY[0x1F4188790](v15, v16);
  uint64_t v18 = (char *)&v46 - v17;
  uint64_t v19 = sub_1D13F1FA8();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19, v21);
  id v23 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24, v25);
  uint64_t v50 = (char *)&v46 - v26;
  uint64_t v27 = swift_allocObject();
  unint64_t v28 = sub_1D138A620(MEMORY[0x1E4FBC860]);
  uint64_t v53 = v27;
  *(void *)(v27 + 16) = v28;
  uint64_t v48 = v27 + 16;
  sub_1D13F2018();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, *MEMORY[0x1E4F27BF0], v0);
  sub_1D13F1F98();
  sub_1D13F2008();
  unint64_t v49 = *(void (**)(char *, uint64_t))(v20 + 8);
  v49(v23, v19);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v52);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    sub_1D138E150((uint64_t)v18, &qword_1EBD239C8);
    swift_release();
    return MEMORY[0x1E4FBC860];
  }
  else
  {
    id v30 = v50;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v50, v18, v19);
    sub_1D1384DE0(0, &qword_1EBD23948);
    uint64_t v31 = (uint64_t)v46;
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v46, v30, v19);
    unint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    v32(v31, 0, 1, v19);
    uint64_t v33 = (uint64_t)v47;
    v32((uint64_t)v47, 1, 1, v19);
    id v34 = sub_1D138A758(v31, v33, 0, 0, 0);
    id v35 = objc_msgSend((id)BiomeLibrary(), sel_SpringBoard);
    swift_unknownObjectRelease();
    id v36 = objc_msgSend(v35, sel_Domino);
    swift_unknownObjectRelease();
    id v37 = objc_msgSend(v36, sel_StackRotation);
    swift_unknownObjectRelease();
    id v38 = objc_msgSend(v37, sel_publisherWithOptions_, v34);

    unint64_t v58 = sub_1D138A8D8;
    uint64_t v59 = 0;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v55 = 1107296256;
    uint64_t v56 = sub_1D138AAF4;
    uint64_t v57 = &block_descriptor_0;
    uint64_t v39 = _Block_copy(&aBlock);
    unint64_t v58 = sub_1D138D11C;
    uint64_t v59 = v53;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v55 = 1107296256;
    uint64_t v56 = sub_1D138AAF4;
    uint64_t v57 = &block_descriptor_8;
    unint64_t v40 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    id v41 = objc_msgSend(v38, sel_sinkWithCompletion_receiveInput_, v39, v40);
    _Block_release(v40);
    _Block_release(v39);

    uint64_t v42 = swift_beginAccess();
    MEMORY[0x1F4188790](v42, v43);
    *(&v46 - 2) = v51;
    uint64_t v44 = swift_bridgeObjectRetain();
    uint64_t v29 = sub_1D138CCD0(v44, (void (*)(void))sub_1D138D56C, (uint64_t)(&v46 - 4));
    swift_bridgeObjectRelease();

    v49(v30, v19);
    swift_release();
  }
  return v29;
}

unint64_t sub_1D138A620(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64D900);
  uint64_t v2 = (void *)sub_1D13F2BB8();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_OWORD *)(a1 + 64);
  while (1)
  {
    uint64_t v6 = (void *)*((void *)v4 - 4);
    uint64_t v5 = *((void *)v4 - 3);
    uint64_t v7 = *((void *)v4 - 2);
    uint64_t v8 = *((void *)v4 - 1);
    long long v16 = *v4;
    swift_bridgeObjectRetain();
    id v9 = v6;
    unint64_t result = sub_1D138B8BC(v9, v5, v7, v8);
    if (v11) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v12 = (void *)(v2[6] + 32 * result);
    void *v12 = v9;
    v12[1] = v5;
    v12[2] = v7;
    void v12[3] = v8;
    *(_OWORD *)(v2[7] + 16 * result) = v16;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v2[2] = v15;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id sub_1D138A758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = sub_1D13F1FA8();
  uint64_t v10 = *(void *)(v9 - 8);
  char v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  uint64_t v12 = 0;
  if (v11(a1, 1, v9) != 1)
  {
    uint64_t v12 = (void *)sub_1D13F1F48();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
  }
  if (v11(a2, 1, v9) == 1)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = (void *)sub_1D13F1F48();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
  }
  id v14 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithStartDate_endDate_maxEvents_lastN_reversed_, v12, v13, a3, a4, a5 & 1);

  return v14;
}

id sub_1D138A8D8(void *a1)
{
  uint64_t v2 = sub_1D13F2538();
  uint64_t v3 = *(void *)(v2 - 8);
  double v5 = MEMORY[0x1F4188790](v2, v4);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = objc_msgSend(a1, sel_error, v5);
  if (result)
  {
    uint64_t v9 = result;
    sub_1D13F24F8();
    uint64_t v10 = v9;
    char v11 = sub_1D13F2508();
    os_log_type_t v12 = sub_1D13F2838();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      v18[0] = v2;
      id v14 = (uint8_t *)v13;
      uint64_t v15 = (void *)swift_slowAlloc();
      *(_DWORD *)id v14 = 138412290;
      uint64_t v10 = v10;
      uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
      v18[1] = v16;
      sub_1D13F2978();
      *uint64_t v15 = v16;

      _os_log_impl(&dword_1D0FA3000, v11, v12, "Could not sink stack rotation stream: %@", v14, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23870);
      swift_arrayDestroy();
      MEMORY[0x1D25F77B0](v15, -1, -1);
      uint64_t v17 = v14;
      uint64_t v2 = v18[0];
      MEMORY[0x1D25F77B0](v17, -1, -1);
    }
    else
    {

      char v11 = v10;
    }

    return (id)(*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v7, v2);
  }
  return result;
}

void (*sub_1D138AAFC(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5))(void *a1)
{
  uint64_t v10 = malloc(0x38uLL);
  *a1 = v10;
  v10[4] = a2;
  v10[5] = a5;
  swift_bridgeObjectRetain();
  v10[6] = sub_1D138BB04(v10, a2, a3, a4, a5);
  return sub_1D138AB98;
}

void sub_1D138AB98(void *a1)
{
  uint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void **)(*a1 + 32);
  (*(void (**)(void, void))(*a1 + 48))(*a1, 0);

  swift_bridgeObjectRelease();
  free(v1);
}

void sub_1D138ABFC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

id AmbientMetricsLogger.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id AmbientMetricsLogger.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AmbientMetricsLogger();
  return objc_msgSendSuper2(&v2, sel_init);
}

id AmbientMetricsLogger.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AmbientMetricsLogger();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1D138AD40()
{
  return sub_1D13F2D28();
}

uint64_t sub_1D138AD88()
{
  return sub_1D13F2CF8();
}

uint64_t sub_1D138ADB4()
{
  return sub_1D13F2D28();
}

void *sub_1D138ADF8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + _Block_object_dispose(&STACK[0x210], 8) = 0;
  return result;
}

void sub_1D138AE08(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_1D138AE14(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1D138AE28(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  id v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_1D138AF04;
  return v6(a1);
}

uint64_t sub_1D138AF04()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1D138AFFC(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23958);
  uint64_t v10 = *(void *)(sub_1D13F2448() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = sub_1D13F2B58();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_1D13F2448() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1D138CB78(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

uint64_t sub_1D138B264(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1D138B338(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1D138E0F0((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x1E4FBB9B0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1D138E0F0((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t sub_1D138B338(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1D13F2988();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_1D138B4F4(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_1D13F2AC8();
  if (!v8)
  {
    sub_1D13F2B58();
    __break(1u);
LABEL_17:
    uint64_t result = sub_1D13F2BC8();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_1D138B4F4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_1D138B58C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1D138B76C(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1D138B76C(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1D138B58C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_1D138B704(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_1D13F2A88();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_1D13F2B58();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_1D13F2708();
      if (!v2) {
        return MEMORY[0x1E4FBC860];
      }
    }
    sub_1D13F2BC8();
    __break(1u);
LABEL_14:
    uint64_t result = sub_1D13F2B58();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

void *sub_1D138B704(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA64DDF0);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  void v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1D138B76C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA64DDF0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1D13F2BC8();
  __break(1u);
  return result;
}

unint64_t sub_1D138B8BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1D13F2CE8();
  id v8 = a1;
  sub_1D13F2948();

  sub_1D13F2CF8();
  sub_1D13F2D08();
  if (a4)
  {
    swift_bridgeObjectRetain();
    sub_1D13F26E8();
    swift_bridgeObjectRelease();
  }
  uint64_t v9 = sub_1D13F2D28();
  return sub_1D138B99C((uint64_t)v8, a2, a3, a4, v9);
}

unint64_t sub_1D138B99C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v7 = a5 & ~v6;
  if (((*(void *)(v5 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
    return v7;
  }
  uint64_t v8 = ~v6;
  sub_1D1384DE0(0, &qword_1EA64D908);
  while (1)
  {
    uint64_t v9 = *(void *)(v5 + 48) + 32 * v7;
    size_t v11 = *(void **)v9;
    uint64_t v10 = *(void *)(v9 + 8);
    uint64_t v13 = *(void *)(v9 + 16);
    uint64_t v12 = *(void *)(v9 + 24);
    swift_bridgeObjectRetain();
    id v14 = v11;
    if ((sub_1D13F2938() & 1) != 0 && v10 == a2)
    {
      if (!v12)
      {
        if (!a4) {
          goto LABEL_21;
        }
        goto LABEL_14;
      }
      if (a4) {
        break;
      }
    }
    swift_bridgeObjectRelease();
LABEL_14:

LABEL_15:
    unint64_t v7 = (v7 + 1) & v8;
    if (((*(void *)(v5 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
      return v7;
    }
  }
  if (v13 != a3 || v12 != a4)
  {
    char v16 = sub_1D13F2C58();
    swift_bridgeObjectRelease();

    if (v16) {
      return v7;
    }
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
LABEL_21:

  return v7;
}

void (*sub_1D138BB04(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1)
{
  uint64_t v10 = malloc(0x60uLL);
  *a1 = v10;
  v10[8] = a2;
  v10[9] = a5;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  id v12 = a2;
  v10[10] = sub_1D138BE0C(v10);
  v10[11] = sub_1D138BC48(v10 + 4, v12, a3, a4, a5, isUniquelyReferenced_nonNull_native);
  return sub_1D138BBD0;
}

void sub_1D138BBD0(uint64_t a1)
{
  id v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 80);
  unint64_t v3 = *(void **)(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 88))();

  swift_bridgeObjectRelease();
  v2(v1, 0);
  free(v1);
}

void (*sub_1D138BC48(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6))(long long **a1)
{
  unint64_t v7 = v6;
  uint64_t v13 = malloc(0x48uLL);
  *a1 = v13;
  v13[6] = a5;
  v13[7] = v6;
  v13[4] = a3;
  v13[5] = a4;
  v13[3] = a2;
  uint64_t v14 = *v6;
  unint64_t v16 = sub_1D138B8BC(a2, a3, a4, a5);
  *((unsigned char *)v13 + 17) = v15 & 1;
  uint64_t v17 = *(void *)(v14 + 16);
  char v18 = v15 ^ 1;
  uint64_t v19 = v17 + ((v15 ^ 1) & 1);
  if (__OFADD__(v17, (v15 ^ 1) & 1))
  {
    __break(1u);
    goto LABEL_13;
  }
  unsigned __int8 v20 = v15;
  uint64_t v21 = *(void *)(v14 + 24);
  if (v21 < v19 || (a6 & 1) == 0)
  {
    if (v21 >= v19 && (a6 & 1) == 0)
    {
      sub_1D138C2A0();
      goto LABEL_9;
    }
    sub_1D138BE48(v19, a6 & 1);
    unint64_t v22 = sub_1D138B8BC(a2, a3, a4, a5);
    if ((v20 & 1) == (v23 & 1))
    {
      unint64_t v16 = v22;
      goto LABEL_9;
    }
LABEL_13:
    uint64_t result = (void (*)(long long **))sub_1D13F2C88();
    __break(1u);
    return result;
  }
LABEL_9:
  v13[8] = v16;
  long long v24 = 0uLL;
  if (v20) {
    long long v24 = *(_OWORD *)(*(void *)(*v7 + 56) + 16 * v16);
  }
  *(_OWORD *)uint64_t v13 = v24;
  *((unsigned char *)v13 + 16) = v18 & 1;
  return sub_1D138BDC0;
}

void sub_1D138BDC0(long long **a1)
{
  id v1 = *a1;
  sub_1D138C1A4(*a1, *((unsigned char *)*a1 + 17), *((uint64_t **)*a1 + 7), *((void *)*a1 + 8), *((void **)*a1 + 3), *((void *)*a1 + 4), *((void *)*a1 + 5), *((void *)*a1 + 6));
  free(v1);
}

uint64_t (*sub_1D138BE0C(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  void *v1 = 0x8000000000000000;
  return sub_1D138BE3C;
}

uint64_t sub_1D138BE3C(uint64_t result)
{
  **(void **)(result + _Block_object_dispose(&STACK[0x210], 8) = *(void *)result;
  return result;
}

uint64_t sub_1D138BE48(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64D900);
  char v39 = a2;
  uint64_t v6 = sub_1D13F2BA8();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    id v36 = v2;
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    id v38 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v37) {
          goto LABEL_35;
        }
        unint64_t v19 = v38[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v37) {
            goto LABEL_35;
          }
          unint64_t v19 = v38[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v37)
            {
LABEL_35:
              swift_release();
              unint64_t v3 = v36;
              if (v39)
              {
                uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
                if (v35 >= 64) {
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *id v38 = -1 << v35;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v38[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_42;
                }
                if (v13 >= v37) {
                  goto LABEL_35;
                }
                unint64_t v19 = v38[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      uint64_t v21 = *(void *)(v5 + 48) + 32 * v17;
      unint64_t v22 = *(void **)v21;
      uint64_t v23 = *(void *)(v21 + 8);
      uint64_t v25 = *(void *)(v21 + 16);
      uint64_t v24 = *(void *)(v21 + 24);
      long long v40 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v17);
      if ((v39 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        id v26 = v22;
      }
      sub_1D13F2CE8();
      id v27 = v22;
      sub_1D13F2948();

      sub_1D13F2CF8();
      sub_1D13F2D08();
      if (v24)
      {
        swift_bridgeObjectRetain();
        sub_1D13F26E8();
        swift_bridgeObjectRelease();
      }
      uint64_t result = sub_1D13F2D28();
      uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v29 = result & ~v28;
      unint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v11 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v29) & ~*(void *)(v11 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v33 = v30 == v32;
          if (v30 == v32) {
            unint64_t v30 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v11 + 8 * v30);
        }
        while (v34 == -1);
        unint64_t v14 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unsigned __int8 v15 = (void *)(*(void *)(v7 + 48) + 32 * v14);
      *unsigned __int8 v15 = v27;
      v15[1] = v23;
      v15[2] = v25;
      v15[3] = v24;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v14) = v40;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

void sub_1D138C1A4(long long *a1, char a2, uint64_t *a3, unint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1[1])
  {
    if (a2)
    {
      swift_arrayDestroy();
      uint64_t v10 = *a3;
      sub_1D138C464(a4, v10);
    }
  }
  else
  {
    long long v12 = *a1;
    int64_t v13 = (void *)*a3;
    if (a2)
    {
      *(_OWORD *)(v13[7] + 16 * a4) = v12;
    }
    else
    {
      sub_1D138C6C0(a4, (uint64_t)a5, a6, a7, a8, v12, *((uint64_t *)&v12 + 1), v13);
      swift_bridgeObjectRetain();
      id v14 = a5;
    }
  }
}

id sub_1D138C2A0()
{
  id v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64D900);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D13F2B98();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 32 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 32 * v15;
    int64_t v18 = *(void **)v17;
    uint64_t v19 = *(void *)(v17 + 24);
    uint64_t v20 = 16 * v15;
    uint64_t v21 = *(void *)(v4 + 48) + v16;
    long long v22 = *(_OWORD *)(v17 + 8);
    long long v23 = *(_OWORD *)(*(void *)(v2 + 56) + v20);
    *(void *)uint64_t v21 = *(void *)v17;
    *(_OWORD *)(v21 + _Block_object_dispose(&STACK[0x210], 8) = v22;
    *(void *)(v21 + 24) = v19;
    *(_OWORD *)(*(void *)(v4 + 56) + v20) = v23;
    swift_bridgeObjectRetain();
    id result = v18;
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1D138C464(unint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = sub_1D13F29C8();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      uint64_t v30 = v4;
      do
      {
        uint64_t v10 = v2;
        uint64_t v11 = *(void *)(v2 + 48) + 32 * v6;
        unint64_t v12 = *(void **)v11;
        uint64_t v13 = *(void *)(v11 + 24);
        sub_1D13F2CE8();
        swift_bridgeObjectRetain();
        id v14 = v12;
        sub_1D13F2948();
        sub_1D13F2CF8();
        sub_1D13F2D08();
        if (v13)
        {
          swift_bridgeObjectRetain();
          sub_1D13F26E8();
          swift_bridgeObjectRelease();
        }
        uint64_t v15 = sub_1D13F2D28();
        swift_bridgeObjectRelease();

        unint64_t v16 = v15 & v7;
        if (v3 >= (uint64_t)v9)
        {
          uint64_t v4 = v30;
          uint64_t v2 = v10;
          if (v16 < v9) {
            goto LABEL_5;
          }
        }
        else
        {
          uint64_t v4 = v30;
          uint64_t v2 = v10;
          if (v16 >= v9) {
            goto LABEL_13;
          }
        }
        if (v3 >= (uint64_t)v16)
        {
LABEL_13:
          uint64_t v17 = *(void *)(v2 + 48);
          int64_t v18 = (_OWORD *)(v17 + 32 * v3);
          uint64_t v19 = (_OWORD *)(v17 + 32 * v6);
          if (v3 != v6 || v18 >= v19 + 2)
          {
            long long v20 = v19[1];
            _OWORD *v18 = *v19;
            v18[1] = v20;
          }
          uint64_t v21 = *(void *)(v2 + 56);
          long long v22 = (_OWORD *)(v21 + 16 * v3);
          long long v23 = (_OWORD *)(v21 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v22 >= v23 + 1))
          {
            *long long v22 = *v23;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int64_t v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v25 = *v24;
    uint64_t v26 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v24 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v26 = *v24;
    uint64_t v25 = (-1 << a1) - 1;
  }
  *int64_t v24 = v26 & v25;
  uint64_t v27 = *(void *)(v2 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = v29;
    ++*(_DWORD *)(v2 + 36);
  }
}

unint64_t sub_1D138C6C0(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  a8[(result >> 6) + 8] |= 1 << result;
  uint64_t v8 = (void *)(a8[6] + 32 * result);
  void *v8 = a2;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = a5;
  unint64_t v9 = (void *)(a8[7] + 16 * result);
  void *v9 = a6;
  v9[1] = a7;
  uint64_t v10 = a8[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a8[2] = v12;
  }
  return result;
}

id sub_1D138C710(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v8 = (void **)v7;
  uint64_t v15 = (void *)*v7;
  unint64_t v17 = sub_1D138B8BC(a3, a4, a5, a6);
  uint64_t v18 = v15[2];
  BOOL v19 = (v16 & 1) == 0;
  id result = (id)(v18 + v19);
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v21 = v16;
  uint64_t v22 = v15[3];
  if (v22 >= (uint64_t)result && (a7 & 1) != 0)
  {
LABEL_7:
    long long v23 = *v8;
    if (v21)
    {
LABEL_8:
      int64_t v24 = (uint64_t *)(v23[7] + 16 * v17);
      *int64_t v24 = a1;
      v24[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v22 >= (uint64_t)result && (a7 & 1) == 0)
  {
    id result = sub_1D138C2A0();
    goto LABEL_7;
  }
  sub_1D138BE48((uint64_t)result, a7 & 1);
  id result = (id)sub_1D138B8BC(a3, a4, a5, a6);
  if ((v21 & 1) != (v25 & 1))
  {
LABEL_15:
    id result = (id)sub_1D13F2C88();
    __break(1u);
    return result;
  }
  unint64_t v17 = (unint64_t)result;
  long long v23 = *v8;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1D138C6C0(v17, (uint64_t)a3, a4, a5, a6, a1, a2, v23);
  swift_bridgeObjectRetain();
  return a3;
}

uint64_t sub_1D138C890(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D138C8B0(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1D138C8B0(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64D8F8);
  uint64_t v10 = *(void *)(sub_1D13F23D8() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_1D13F23D8() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (char *)v13 + v17;
  BOOL v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  char v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = sub_1D13F2BC8();
  __break(1u);
  return result;
}

uint64_t sub_1D138CAF0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_1D138CB78(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(sub_1D13F2448() - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = sub_1D13F2BC8();
  __break(1u);
  return result;
}

uint64_t sub_1D138CCD0(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  char v39 = a2;
  uint64_t v40 = a3;
  uint64_t v38 = sub_1D13F23D8();
  uint64_t v5 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38, v6);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = MEMORY[0x1E4FBC860];
  if (!v9) {
    return v10;
  }
  uint64_t v30 = v3;
  uint64_t v44 = MEMORY[0x1E4FBC860];
  sub_1D138C890(0, v9, 0);
  uint64_t v10 = v44;
  uint64_t result = sub_1D138CAF0(a1);
  uint64_t v13 = result;
  uint64_t v14 = 0;
  uint64_t v15 = a1 + 64;
  uint64_t v36 = v5 + 32;
  uint64_t v37 = v5;
  uint64_t v31 = a1 + 80;
  int64_t v32 = v9;
  uint64_t v33 = v12;
  uint64_t v34 = a1 + 64;
  uint64_t v35 = a1;
  while ((v13 & 0x8000000000000000) == 0 && v13 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v18 = (unint64_t)v13 >> 6;
    if ((*(void *)(v15 + 8 * ((unint64_t)v13 >> 6)) & (1 << v13)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(a1 + 36) != v12) {
      goto LABEL_24;
    }
    uint64_t v41 = v14;
    uint64_t v42 = 1 << v13;
    BOOL v19 = (void **)(*(void *)(a1 + 48) + 32 * v13);
    uint64_t v43 = v10;
    uint64_t v20 = *v19;
    swift_bridgeObjectRetain();
    char v21 = v8;
    id v22 = v20;
    v39();
    uint64_t v10 = v43;
    swift_bridgeObjectRelease();

    uint64_t v44 = v10;
    unint64_t v24 = *(void *)(v10 + 16);
    unint64_t v23 = *(void *)(v10 + 24);
    if (v24 >= v23 >> 1)
    {
      sub_1D138C890(v23 > 1, v24 + 1, 1);
      uint64_t v10 = v44;
    }
    *(void *)(v10 + 16) = v24 + 1;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v37 + 32))(v10+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(void *)(v37 + 72) * v24, v21, v38);
    a1 = v35;
    int64_t v16 = 1 << *(unsigned char *)(v35 + 32);
    if (v13 >= v16) {
      goto LABEL_25;
    }
    uint64_t v15 = v34;
    uint64_t v25 = *(void *)(v34 + 8 * v18);
    if ((v25 & v42) == 0) {
      goto LABEL_26;
    }
    LODWORD(v12) = v33;
    if (*(_DWORD *)(v35 + 36) != v33) {
      goto LABEL_27;
    }
    uint64_t v8 = v21;
    unint64_t v26 = v25 & (-2 << (v13 & 0x3F));
    if (v26)
    {
      int64_t v16 = __clz(__rbit64(v26)) | v13 & 0xFFFFFFFFFFFFFFC0;
      int64_t v17 = v32;
    }
    else
    {
      unint64_t v27 = v18 + 1;
      unint64_t v28 = (unint64_t)(v16 + 63) >> 6;
      int64_t v17 = v32;
      if (v18 + 1 < v28)
      {
        unint64_t v29 = *(void *)(v34 + 8 * v27);
        if (v29)
        {
LABEL_20:
          int64_t v16 = __clz(__rbit64(v29)) + (v27 << 6);
        }
        else
        {
          while (v28 - 2 != v18)
          {
            unint64_t v29 = *(void *)(v31 + 8 * v18++);
            if (v29)
            {
              unint64_t v27 = v18 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v14 = v41 + 1;
    uint64_t v13 = v16;
    if (v41 + 1 == v17) {
      return v10;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1D138CFF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1D1384DE0(0, &qword_1EA64D908);
  char v14 = sub_1D13F2938();
  uint64_t result = 0;
  if ((v14 & 1) != 0 && a2 == a6)
  {
    if (a4)
    {
      if (a8 && (a3 == a7 && a4 == a8 || (sub_1D13F2C58() & 1) != 0)) {
        return 1;
      }
    }
    else if (!a8)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1D138D0CC()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

void sub_1D138D11C(void *a1)
{
  id v2 = objc_msgSend(a1, sel_eventBody);
  if (v2)
  {
    id v34 = v2;
    id v3 = objc_msgSend(v2, sel_widget);
    if (v3)
    {
      uint64_t v4 = v3;
      id v5 = objc_msgSend(v3, sel_extensionBundleId);

      if (v5)
      {
        sub_1D13F2688();

        id v6 = objc_msgSend(v34, sel_widget);
        if (v6)
        {
          uint64_t v7 = v6;
          id v8 = objc_msgSend(v6, sel_kind);

          if (v8)
          {
            int64_t v9 = (uint64_t *)(v1 + 16);
            sub_1D13F2688();

            id v10 = objc_allocWithZone(MEMORY[0x1E4F4B440]);
            unint64_t v11 = (void *)sub_1D13F2678();
            swift_bridgeObjectRelease();
            uint64_t v12 = (void *)sub_1D13F2678();
            swift_bridgeObjectRelease();
            id v13 = objc_msgSend(v10, sel_initWithExtensionBundleId_kind_, v11, v12);

            uint64_t v14 = _sSo26ATXWidgetStackChangeReasonV21AppPredictionInternalE017springBoardDominob8RotationD0ABSo08BMSpringijbkD0V_tcfC_0(objc_msgSend(v34, sel_reason));
            id v15 = objc_msgSend(v34, sel_source);
            if (v15)
            {
              int64_t v16 = v15;
              uint64_t v17 = sub_1D13F2688();
              uint64_t v19 = v18;
            }
            else
            {
              uint64_t v17 = 0;
              uint64_t v19 = 0;
            }
            swift_beginAccess();
            uint64_t v20 = *(void *)(*v9 + 16);
            swift_bridgeObjectRetain();
            id v21 = v13;
            id v22 = v21;
            if (v20)
            {
              id v23 = v21;
              sub_1D138B8BC(v23, v14, v17, v19);
              if (v24)
              {
                swift_endAccess();
                swift_bridgeObjectRelease();

                goto LABEL_18;
              }
            }
            swift_endAccess();
            swift_bridgeObjectRelease();
            swift_beginAccess();
            id v25 = v22;
            swift_bridgeObjectRetain();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v36 = *v9;
            uint64_t *v9 = 0x8000000000000000;
            sub_1D138C710(0, 0, v25, v14, v17, v19, isUniquelyReferenced_nonNull_native);
            uint64_t *v9 = v36;
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_endAccess();
LABEL_18:
            if (objc_msgSend(v34, sel_newWidgetSuggestion))
            {
              swift_beginAccess();
              swift_bridgeObjectRetain();
              id v27 = v22;
              unint64_t v29 = sub_1D138AAFC(v35, v27, v14, v17, v19);
              if (*(unsigned char *)(v28 + 16) != 1)
              {
                uint64_t v30 = *(void *)(v28 + 8);
                BOOL v31 = __OFADD__(v30, 1);
                uint64_t v32 = v30 + 1;
                if (!v31)
                {
                  *(void *)(v28 + _Block_object_dispose(&STACK[0x210], 8) = v32;
LABEL_26:
                  ((void (*)(void *, void))v29)(v35, 0);
                  swift_endAccess();
                  swift_bridgeObjectRelease_n();

                  return;
                }
                __break(1u);
                goto LABEL_29;
              }
            }
            else
            {
              swift_beginAccess();
              swift_bridgeObjectRetain();
              id v27 = v22;
              unint64_t v29 = sub_1D138AAFC(v35, v27, v14, v17, v19);
              if (*(unsigned char *)(v33 + 16) != 1)
              {
                if (!__OFADD__(*(void *)v33, 1))
                {
                  ++*(void *)v33;
                  goto LABEL_26;
                }
LABEL_29:
                __break(1u);
                return;
              }
            }
            ((void (*)(void *, void))v29)(v35, 0);
            swift_endAccess();

            swift_bridgeObjectRelease_n();
            return;
          }
        }
        swift_bridgeObjectRelease();
      }
    }
  }
}

uint64_t sub_1D138D56C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v9 = objc_msgSend(a1, sel_extensionBundleId);
  uint64_t v10 = sub_1D13F2688();
  uint64_t v12 = v11;

  id v13 = objc_msgSend(a1, sel_kind);
  uint64_t v14 = sub_1D13F2688();
  uint64_t v16 = v15;

  unint64_t v17 = 0xD000000000000010;
  unint64_t v18 = 0x80000001D1483890;
  switch(a2)
  {
    case 1:
      unint64_t v18 = 0xEA00000000006C6CLL;
      unint64_t v17 = 0x6F72635372657375;
      break;
    case 2:
      strcpy((char *)v21, "systemSuggest");
      HIWORD(v21[1]) = -4864;
      sub_1D13F26F8();
      swift_bridgeObjectRetain();
      sub_1D13F26F8();
      swift_bridgeObjectRelease();
      unint64_t v17 = v21[0];
      unint64_t v18 = v21[1];
      break;
    case 3:
      unint64_t v18 = 0xEE006B6361626C6CLL;
      unint64_t v17 = 0x61466D6574737973;
      break;
    case 4:
      unint64_t v18 = 0xEC00000065746164;
      unint64_t v17 = 0x70556D6574737973;
      break;
    case 5:
      unint64_t v18 = 0xEC00000064657461;
      unint64_t v17 = 0x6572436B63617473;
      break;
    case 6:
      unint64_t v18 = 0xEE006465796F7274;
      unint64_t v17 = 0x7365446B63617473;
      break;
    case 7:
      unint64_t v17 = 0x4173746567646977;
      unint64_t v18 = 0xEC00000064656464;
      break;
    case 8:
      break;
    case 9:
      unint64_t v18 = 0xE500000000000000;
      unint64_t v17 = 0x6775626564;
      break;
    case 10:
      unint64_t v17 = 0xD00000000000001ALL;
      unint64_t v18 = 0x80000001D1483870;
      break;
    default:
      unint64_t v18 = 0xE700000000000000;
      unint64_t v17 = 0x6E776F6E6B6E75;
      break;
  }
  return MEMORY[0x1F4112F60](v10, v12, v14, v16, v17, v18, a5, a6);
}

uint64_t _sSo26ATXWidgetStackChangeReasonV21AppPredictionInternalE017springBoardDominob8RotationD0ABSo08BMSpringijbkD0V_tcfC_0(unsigned int a1)
{
  uint64_t v2 = sub_1D13F2538();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  id v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < 0xB) {
    return a1;
  }
  sub_1D13F24F8();
  id v8 = sub_1D13F2508();
  os_log_type_t v9 = sub_1D13F2848();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    uint64_t v15 = v11;
    *(_DWORD *)uint64_t v10 = 136315138;
    LODWORD(v14) = a1;
    type metadata accessor for BMSpringBoardDominoStackRotationReason(0);
    uint64_t v12 = sub_1D13F26A8();
    uint64_t v14 = sub_1D138B264(v12, v13, &v15);
    sub_1D13F2978();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D0FA3000, v8, v9, "Unhandled BMSpringBoardDominoStackRotationReason reason: %s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D25F77B0](v11, -1, -1);
    MEMORY[0x1D25F77B0](v10, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return 0;
}

uint64_t type metadata accessor for AmbientMetricsLogger()
{
  return self;
}

unint64_t sub_1D138DA54()
{
  unint64_t result = qword_1EA64D8D8;
  if (!qword_1EA64D8D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA64D8D8);
  }
  return result;
}

uint64_t method lookup function for AmbientMetricsLogger(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AmbientMetricsLogger);
}

uint64_t dispatch thunk of AmbientMetricsLogger.collect(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x50))();
}

uint64_t dispatch thunk of AmbientMetricsLogger.createSystemConfigurationEvent(stacks:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of AmbientMetricsLogger.createWidgetConfigurationEvents(stacks:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of AmbientMetricsLogger.createWidgetRotationEvents()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70))();
}

uint64_t initializeBufferWithCopyOfBuffer for AmbientMetricsLogger.WidgetRotationKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for AmbientMetricsLogger.WidgetRotationKey(id *a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AmbientMetricsLogger.WidgetRotationKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  id v4 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AmbientMetricsLogger.WidgetRotationKey(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for AmbientMetricsLogger.WidgetRotationKey(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AmbientMetricsLogger.WidgetRotationKey(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AmbientMetricsLogger.WidgetRotationKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose(&STACK[0x210], 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AmbientMetricsLogger.WidgetRotationKey()
{
  return &type metadata for AmbientMetricsLogger.WidgetRotationKey;
}

uint64_t getEnumTagSinglePayload for AmbientMetricsLogger.WidgetRotationData(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AmbientMetricsLogger.WidgetRotationData(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose(&STACK[0x210], 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AmbientMetricsLogger.WidgetRotationData()
{
  return &type metadata for AmbientMetricsLogger.WidgetRotationData;
}

void type metadata accessor for ATXWidgetStackChangeReason(uint64_t a1)
{
}

uint64_t sub_1D138DE14()
{
  return sub_1D138E29C(&qword_1EA64D8E8, type metadata accessor for ATXWidgetStackChangeReason);
}

uint64_t objectdestroyTm()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t sub_1D138DEA8()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1D138DF50;
  return sub_1D1387D00((uint64_t)v5, v6, v7, v2, v3, v4);
}

uint64_t sub_1D138DF50()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void type metadata accessor for BMSpringBoardDominoStackRotationReason(uint64_t a1)
{
}

void sub_1D138E058(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1D138E0F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1D138E150(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1D138E1AC()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D138E1E4(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1D138DF50;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1EA64DDE0 + dword_1EA64DDE0);
  return v6(a1, v4);
}

uint64_t sub_1D138E29C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1D138E2E4()
{
}

id sub_1D138E304()
{
  id result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ContextualEngine()), sel_init);
  qword_1EBD24348 = (uint64_t)result;
  return result;
}

uint64_t *sub_1D138E334()
{
  if (qword_1EBD24350 != -1) {
    swift_once();
  }
  return &qword_1EBD24348;
}

id static ContextualEngine.shared.getter()
{
  if (qword_1EBD24350 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1EBD24348;
  return v0;
}

uint64_t sub_1D138E438()
{
  return swift_retain();
}

uint64_t sub_1D138E484(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___ATXContextualEngine_contextStore);
  swift_beginAccess();
  void *v3 = a1;
  return swift_release();
}

uint64_t (*sub_1D138E4D8())()
{
  return j__swift_endAccess;
}

id sub_1D138E534()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___ATXContextualEngine_suggestionStore);
  swift_beginAccess();
  uint64_t v2 = *v1;
  return v2;
}

void sub_1D138E58C(void *a1)
{
}

uint64_t (*sub_1D138E598())()
{
  return j_j__swift_endAccess;
}

id sub_1D138E5F4()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___ATXContextualEngine_suggestionServer);
  swift_beginAccess();
  uint64_t v2 = *v1;
  return v2;
}

void sub_1D138E64C(void *a1)
{
}

uint64_t (*sub_1D138E658())()
{
  return j_j__swift_endAccess;
}

id sub_1D138E6B4()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR___ATXContextualEngine_internalServer);
  swift_beginAccess();
  uint64_t v2 = *v1;
  return v2;
}

void sub_1D138E70C(void *a1)
{
}

void sub_1D138E718(void *a1, void *a2)
{
  uint64_t v4 = (void **)(v2 + *a2);
  swift_beginAccess();
  uint64_t v5 = *v4;
  int *v4 = a1;
}

uint64_t (*sub_1D138E768())()
{
  return j_j__swift_endAccess;
}

char *sub_1D138E7C4()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23A30);
  MEMORY[0x1F4188790](v1 - 8, v2);
  uint64_t v56 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1D13F2538();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9, v10);
  uint64_t v12 = (char *)&v53 - v11;
  MEMORY[0x1F4188790](v13, v14);
  uint64_t v16 = (char *)&v53 - v15;
  unint64_t v17 = (uint64_t *)&v0[OBJC_IVAR___ATXContextualEngine_contextStore];
  *(void *)&v0[OBJC_IVAR___ATXContextualEngine_contextStore] = 0;
  uint64_t v55 = v0;
  uint64_t v18 = sub_1D13A07D8();
  uint64_t v19 = *(void (**)(char *))(v5 + 16);
  uint64_t v54 = v18;
  v19(v16);
  uint64_t v20 = sub_1D13F2508();
  os_log_type_t v21 = sub_1D13F2858();
  if (os_log_type_enabled(v20, v21))
  {
    id v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v53 = v17;
    id v23 = v19;
    char v24 = v8;
    id v25 = v12;
    uint64_t v26 = v5;
    uint64_t v27 = v4;
    uint64_t v28 = v22;
    *(_WORD *)id v22 = 0;
    _os_log_impl(&dword_1D0FA3000, v20, v21, "ContextualEngine init", v22, 2u);
    unint64_t v29 = v28;
    uint64_t v4 = v27;
    uint64_t v5 = v26;
    uint64_t v12 = v25;
    uint64_t v8 = v24;
    uint64_t v19 = v23;
    unint64_t v17 = v53;
    MEMORY[0x1D25F77B0](v29, -1, -1);
  }

  uint64_t v30 = *(void (**)(char *, uint64_t))(v5 + 8);
  v30(v16, v4);
  if (objc_msgSend(self, sel_isContextualEngineEnabled))
  {
    type metadata accessor for ContextualEngineContextStore();
    uint64_t v31 = v4;
    uint64_t v32 = sub_1D13AEB14();
    swift_beginAccess();
    uint64_t *v17 = v32;
    uint64_t v4 = v31;
    swift_release();
    ((void (*)(char *, uint64_t, uint64_t))v19)(v12, v54, v31);
    uint64_t v33 = sub_1D13F2508();
    os_log_type_t v34 = sub_1D13F2858();
    if (!os_log_type_enabled(v33, v34))
    {
      uint64_t v8 = v12;
      goto LABEL_10;
    }
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v35 = 0;
    _os_log_impl(&dword_1D0FA3000, v33, v34, "ContextualEngine: feature flag enabled, initializing context store", v35, 2u);
    uint64_t v8 = v12;
    goto LABEL_8;
  }
  ((void (*)(char *, uint64_t, uint64_t))v19)(v8, v54, v4);
  uint64_t v33 = sub_1D13F2508();
  os_log_type_t v36 = sub_1D13F2858();
  if (os_log_type_enabled(v33, v36))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v35 = 0;
    _os_log_impl(&dword_1D0FA3000, v33, v36, "ContextualEngine: feature flag disabled, not initializing context store", v35, 2u);
LABEL_8:
    MEMORY[0x1D25F77B0](v35, -1, -1);
  }
LABEL_10:

  v30(v8, v4);
  type metadata accessor for ContextualEngineSuggestionStore();
  swift_beginAccess();
  uint64_t v37 = swift_retain();
  uint64_t v38 = sub_1D138FFE8(v37);
  char v39 = v55;
  uint64_t v40 = (id *)&v55[OBJC_IVAR___ATXContextualEngine_suggestionStore];
  *(void *)&v55[OBJC_IVAR___ATXContextualEngine_suggestionStore] = v38;
  type metadata accessor for ContextualSuggestionServer();
  uint64_t v41 = *v17;
  swift_retain();
  *(void *)&v39[OBJC_IVAR___ATXContextualEngine_suggestionServer] = sub_1D13A3904(v41, v38);
  type metadata accessor for ContextualEngineInternalServer();
  swift_beginAccess();
  *(void *)&v39[OBJC_IVAR___ATXContextualEngine_internalServer] = sub_1D1396DEC(*v40);

  uint64_t v42 = (objc_class *)type metadata accessor for ContextualEngine();
  v57.receiver = v39;
  v57.super_class = v42;
  uint64_t v43 = (char *)objc_msgSendSuper2(&v57, sel_init);
  uint64_t v44 = &v43[OBJC_IVAR___ATXContextualEngine_internalServer];
  swift_beginAccess();
  uint64_t v45 = *(void **)v44;
  uint64_t v46 = *(void (**)(char *, _UNKNOWN **))((*MEMORY[0x1E4FBC8C8] & *v45) + 0x88);
  unint64_t v47 = v43;
  uint64_t v48 = v45;
  v46(v43, &off_1F272FA10);

  uint64_t v49 = sub_1D13F27D8();
  uint64_t v50 = (uint64_t)v56;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v56, 1, 1, v49);
  unint64_t v51 = (void *)swift_allocObject();
  v51[2] = 0;
  v51[3] = 0;
  v51[4] = v47;
  sub_1D138F5D0(v50, (uint64_t)&unk_1EA64D960, (uint64_t)v51);
  swift_release();
  return v47;
}

uint64_t sub_1D138ED4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return MEMORY[0x1F4188298](sub_1D138ED6C, 0, 0);
}

uint64_t sub_1D138ED6C()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 16)) + 0x70))();
  *(void *)(v0 + 24) = v2;
  if (v2)
  {
    uint64_t v8 = (uint64_t (*)(void))(*(void *)(*(void *)v2 + 352) + **(int **)(*(void *)v2 + 352));
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 32) = v3;
    void *v3 = v0;
    v3[1] = sub_1D138EF78;
    uint64_t v4 = v8;
  }
  else
  {
    uint64_t v5 = (void *)(*(uint64_t (**)(void))((*v1 & **(void **)(v0 + 16)) + 0xA0))();
    (*(void (**)(void))((*v1 & *v5) + 0x90))();

    sub_1D13F2498();
    uint64_t v6 = sub_1D13F26B8();
    swift_bridgeObjectRelease();
    notify_post((const char *)(v6 + 32));
    swift_release();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v4();
}

uint64_t sub_1D138EF78()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1D138FC7C;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1D138F094;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1D138F094()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 16)) + 0xA0))();
  (*(void (**)(void))((*v1 & *v2) + 0x90))();

  sub_1D13F2498();
  uint64_t v3 = sub_1D13F26B8();
  swift_bridgeObjectRelease();
  notify_post((const char *)(v3 + 32));
  swift_release();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1D138F184()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](sub_1D138F1A4, 0, 0);
}

uint64_t sub_1D138F1A4()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 16)) + 0x70))();
  *(void *)(v0 + 24) = v2;
  if (v2)
  {
    uint64_t v7 = (uint64_t (*)(void))(*(void *)(*(void *)v2 + 352) + **(int **)(*(void *)v2 + 352));
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 32) = v3;
    void *v3 = v0;
    v3[1] = sub_1D138F388;
    uint64_t v4 = v7;
  }
  else
  {
    uint64_t v5 = (void *)(*(uint64_t (**)(void))((*v1 & **(void **)(v0 + 16)) + 0xA0))();
    (*(void (**)(void))((*v1 & *v5) + 0x90))();

    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v4();
}

uint64_t sub_1D138F388()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1D138F56C;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1D138F4A4;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1D138F4A4()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 16)) + 0xA0))();
  (*(void (**)(void))((*v1 & *v2) + 0x90))();

  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1D138F56C()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D138F5D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1D13F27D8();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_1D13F27C8();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_1D138FC1C(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1D13F27B8();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

void sub_1D138F774(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v5 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x88))();
  (*(void (**)(uint64_t))((*v4 & *v5) + 0xA8))(a1);

  uint64_t v6 = (void *)(*(uint64_t (**)(void))((*v4 & *v2) + 0xA0))();
  (*(void (**)(void))((*v4 & *v6) + 0x90))();
}

id ContextualEngine.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ContextualEngine();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ContextualEngine()
{
  return self;
}

uint64_t method lookup function for ContextualEngine(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ContextualEngine);
}

uint64_t dispatch thunk of ContextualEngine.donate(rerankedBlendingSuggestions:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

unint64_t sub_1D138FAF4()
{
  unint64_t result = qword_1EBD23840;
  if (!qword_1EBD23840)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EBD23840);
  }
  return result;
}

uint64_t sub_1D138FB34()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1D138FB74()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_1D138DF50;
  v3[2] = v2;
  return MEMORY[0x1F4188298](sub_1D138ED6C, 0, 0);
}

uint64_t sub_1D138FC1C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23A30);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_1D138FC80()
{
  return &unk_1E68B6C58;
}

unint64_t ContextualEngineSnapshotOverrideEnabledKey.getter()
{
  return 0xD000000000000027;
}

uint64_t static String.allCases.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD23890);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1D142C8C0;
  *(void *)(v0 + 32) = sub_1D13F26D8();
  *(void *)(v0 + 40) = v1;
  *(void *)(v0 + 4_Block_object_dispose(&STACK[0x210], 8) = sub_1D13F26C8();
  *(void *)(v0 + 56) = v2;
  return v0;
}

uint64_t sub_1D138FD00@<X0>(uint64_t *a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD23890);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1D142C8C0;
  *(void *)(v2 + 32) = sub_1D13F26D8();
  *(void *)(v2 + 40) = v3;
  uint64_t result = sub_1D13F26C8();
  *(void *)(v2 + 4_Block_object_dispose(&STACK[0x210], 8) = result;
  *(void *)(v2 + 56) = v5;
  *a1 = v2;
  return result;
}

uint64_t sub_1D138FD5C()
{
  return swift_retain();
}

uint64_t sub_1D138FD6C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_delegate;
  swift_beginAccess();
  return MEMORY[0x1D25F7870](v1);
}

uint64_t sub_1D138FDBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_delegate;
  swift_beginAccess();
  *(void *)(v4 + _Block_object_dispose(&STACK[0x210], 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*sub_1D138FE28(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_delegate;
  void v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1D25F7870](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return sub_1D138FEB0;
}

void sub_1D138FEB0(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + *(void *)(*(void *)a1 + 48) + _Block_object_dispose(&STACK[0x210], 8) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

id sub_1D138FF38()
{
  id v0 = objc_allocWithZone((Class)ATXActionToWidgetConverter);
  return objc_msgSend(v0, sel_initWithAllowsSendMessageIntentConversion_, 0);
}

uint64_t sub_1D138FF74()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD23A68);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t sub_1D138FFA8()
{
  return swift_retain();
}

uint64_t sub_1D138FFBC(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

char *sub_1D138FFE8(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_1D139001C(a1);
}

char *sub_1D139001C(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v2 = OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_actionToWidgetConverter;
  id v3 = objc_allocWithZone((Class)ATXActionToWidgetConverter);
  uint64_t v4 = v1;
  *(void *)&v1[v2] = objc_msgSend(v3, sel_initWithAllowsSendMessageIntentConversion_, 0);
  uint64_t v5 = OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_lock;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD23A68);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 24) = 0;
  *(void *)(v6 + 16) = 0;
  *(void *)&v4[v5] = v6;
  uint64_t v50 = sub_1D13F2688();
  uint64_t v51 = v7;
  uint64_t v52 = sub_1D13F2688();
  uint64_t v53 = v8;
  uint64_t v54 = sub_1D13F2688();
  uint64_t v55 = v9;
  uint64_t v49 = MEMORY[0x1E4FBC860];
  sub_1D1394C68(0, 3, 0);
  uint64_t v10 = v49;
  uint64_t v11 = self;
  swift_bridgeObjectRetain();
  uint64_t v12 = (void *)sub_1D13F2678();
  id v13 = objc_msgSend(v11, sel_sourceIdentifierForHeuristicWithName_, v12);

  uint64_t v14 = sub_1D13F2688();
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();

  unint64_t v18 = *(void *)(v49 + 16);
  unint64_t v17 = *(void *)(v49 + 24);
  if (v18 >= v17 >> 1)
  {
    sub_1D1394C68(v17 > 1, v18 + 1, 1);
    uint64_t v10 = v49;
  }
  *(void *)(v10 + 16) = v18 + 1;
  unint64_t v19 = v10 + 16 * v18;
  *(void *)(v19 + 32) = v14;
  *(void *)(v19 + 40) = v16;
  swift_bridgeObjectRetain();
  uint64_t v20 = (void *)sub_1D13F2678();
  id v21 = objc_msgSend(v11, sel_sourceIdentifierForHeuristicWithName_, v20);

  uint64_t v22 = sub_1D13F2688();
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();

  unint64_t v26 = *(void *)(v10 + 16);
  unint64_t v25 = *(void *)(v10 + 24);
  if (v26 >= v25 >> 1)
  {
    sub_1D1394C68(v25 > 1, v26 + 1, 1);
    uint64_t v10 = v49;
  }
  *(void *)(v10 + 16) = v26 + 1;
  unint64_t v27 = v10 + 16 * v26;
  *(void *)(v27 + 32) = v22;
  *(void *)(v27 + 40) = v24;
  swift_bridgeObjectRetain();
  uint64_t v28 = (void *)sub_1D13F2678();
  id v29 = objc_msgSend(v11, sel_sourceIdentifierForHeuristicWithName_, v28);

  uint64_t v30 = sub_1D13F2688();
  uint64_t v32 = v31;
  swift_bridgeObjectRelease();

  unint64_t v34 = *(void *)(v10 + 16);
  unint64_t v33 = *(void *)(v10 + 24);
  if (v34 >= v33 >> 1) {
    sub_1D1394C68(v33 > 1, v34 + 1, 1);
  }
  uint64_t v35 = OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_disabledHeuristicSourceIdentifiers;
  uint64_t v36 = v49;
  *(void *)(v49 + 16) = v34 + 1;
  uint64_t v37 = v36 + 16 * v34;
  *(void *)(v37 + 32) = v30;
  *(void *)(v37 + 40) = v32;
  swift_arrayDestroy();
  uint64_t v38 = sub_1D1395168(v36);
  swift_release();
  *(void *)&v4[v35] = v38;
  uint64_t v39 = OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_allowedAmbientClientModelTypes;
  *(void *)&v4[v39] = sub_1D1395200((uint64_t)&unk_1F272FA48);
  *(void *)&v4[OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_contextStore] = a1;
  uint64_t v40 = self;
  swift_retain();
  id v41 = objc_msgSend(v40, sel_sharedInstance);
  *(void *)&v4[OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_modeFilter] = v41;

  v48.receiver = v4;
  v48.super_class = (Class)type metadata accessor for ContextualEngineSuggestionStore();
  uint64_t v42 = (char *)objc_msgSendSuper2(&v48, sel_init);
  uint64_t v43 = *(void **)&v42[OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_modeFilter];
  uint64_t v44 = v42;
  id v45 = v43;
  objc_msgSend(v45, sel_registerObserver_, v44);

  swift_release();
  return v44;
}

uint64_t sub_1D1390418()
{
  sub_1D13F2688();
  sub_1D13F2688();
  sub_1D13F2688();
  uint64_t v28 = MEMORY[0x1E4FBC860];
  sub_1D1394C68(0, 3, 0);
  uint64_t v0 = v28;
  uint64_t v1 = self;
  swift_bridgeObjectRetain();
  uint64_t v2 = (void *)sub_1D13F2678();
  id v3 = objc_msgSend(v1, sel_sourceIdentifierForHeuristicWithName_, v2);

  uint64_t v4 = sub_1D13F2688();
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();

  unint64_t v8 = *(void *)(v28 + 16);
  unint64_t v7 = *(void *)(v28 + 24);
  if (v8 >= v7 >> 1)
  {
    sub_1D1394C68(v7 > 1, v8 + 1, 1);
    uint64_t v0 = v28;
  }
  *(void *)(v0 + 16) = v8 + 1;
  unint64_t v9 = v0 + 16 * v8;
  *(void *)(v9 + 32) = v4;
  *(void *)(v9 + 40) = v6;
  swift_bridgeObjectRetain();
  uint64_t v10 = (void *)sub_1D13F2678();
  id v11 = objc_msgSend(v1, sel_sourceIdentifierForHeuristicWithName_, v10);

  uint64_t v12 = sub_1D13F2688();
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();

  unint64_t v16 = *(void *)(v0 + 16);
  unint64_t v15 = *(void *)(v0 + 24);
  if (v16 >= v15 >> 1)
  {
    sub_1D1394C68(v15 > 1, v16 + 1, 1);
    uint64_t v0 = v28;
  }
  *(void *)(v0 + 16) = v16 + 1;
  unint64_t v17 = v0 + 16 * v16;
  *(void *)(v17 + 32) = v12;
  *(void *)(v17 + 40) = v14;
  swift_bridgeObjectRetain();
  unint64_t v18 = (void *)sub_1D13F2678();
  id v19 = objc_msgSend(v1, sel_sourceIdentifierForHeuristicWithName_, v18);

  uint64_t v20 = sub_1D13F2688();
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();

  unint64_t v24 = *(void *)(v0 + 16);
  unint64_t v23 = *(void *)(v0 + 24);
  if (v24 >= v23 >> 1) {
    sub_1D1394C68(v23 > 1, v24 + 1, 1);
  }
  *(void *)(v28 + 16) = v24 + 1;
  uint64_t v25 = v28 + 16 * v24;
  *(void *)(v25 + 32) = v20;
  *(void *)(v25 + 40) = v22;
  swift_arrayDestroy();
  uint64_t v26 = sub_1D1395168(v28);
  swift_release();
  return v26;
}

uint64_t sub_1D13906C8()
{
  return sub_1D1395200((uint64_t)&unk_1F272FAA0);
}

uint64_t sub_1D13906D4()
{
  uint64_t v1 = *(os_unfair_lock_s **)((char *)v0 + OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_lock);
  uint64_t v2 = (uint64_t *)&v1[4];
  id v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1D1395368(v2);
  os_unfair_lock_unlock(v3);
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
  if (result)
  {
    uint64_t v6 = v5;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(ObjectType, v6);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1D13907A8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_contextStore];
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2) {
    uint64_t v4 = (*(uint64_t (**)(void))(*(void *)v2 + 216))();
  }
  else {
    uint64_t v4 = MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD23890);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D142C8C0;
  *(void *)(inited + 32) = sub_1D13F26D8();
  *(void *)(inited + 40) = v6;
  *(void *)(inited + 4_Block_object_dispose(&STACK[0x210], 8) = sub_1D13F26C8();
  *(void *)(inited + 56) = v7;
  if (qword_1EA64F0F0 != -1) {
    swift_once();
  }
  unint64_t v8 = (void *)qword_1EA64F0F8;
  unint64_t v9 = (void *)sub_1D13F2678();
  LODWORD(v_Block_object_dispose(&STACK[0x210], 8) = objc_msgSend(v8, sel_BOOLForKey_, v9);

  if (v8)
  {
    uint64_t v10 = (uint64_t)sub_1D13956F8();
    if (!v10) {
      uint64_t v10 = sub_1D1392628();
    }
    id v11 = (void *)v10;
    int64_t v12 = *(void *)(v4 + 16);
    if (v12)
    {
      uint64_t v40 = (void *)v10;
      uint64_t v41 = inited;
      uint64_t v47 = v3;
      sub_1D1394CA8(0, v12, 0);
      uint64_t v13 = v4 + 32;
      do
      {
        sub_1D1386110(v13, (uint64_t)v42);
        __swift_project_boxed_opaque_existential_1(v42, v43);
        sub_1D13F2A98();
        uint64_t v14 = v43;
        uint64_t v15 = v44;
        __swift_project_boxed_opaque_existential_1(v42, v43);
        uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 40))(v14, v15);
        uint64_t v18 = v17;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v42);
        uint64_t v19 = v45;
        uint64_t v20 = v46;
        uint64_t v21 = v47;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1D1394CA8(0, *(void *)(v21 + 16) + 1, 1);
          uint64_t v21 = v47;
        }
        unint64_t v23 = *(void *)(v21 + 16);
        unint64_t v22 = *(void *)(v21 + 24);
        if (v23 >= v22 >> 1)
        {
          sub_1D1394CA8(v22 > 1, v23 + 1, 1);
          uint64_t v21 = v47;
        }
        *(void *)(v21 + 16) = v23 + 1;
        unint64_t v24 = (void *)(v21 + 32 * v23);
        v24[4] = v19;
        v24[5] = v20;
        v24[6] = v16;
        v24[7] = v18;
        v13 += 40;
        --v12;
      }
      while (v12);
      swift_bridgeObjectRelease();
      uint64_t inited = v41;
      id v11 = v40;
      if (*(void *)(v21 + 16)) {
        goto LABEL_20;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      if (*(void *)(MEMORY[0x1E4FBC860] + 16))
      {
LABEL_20:
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD23550);
        uint64_t v29 = sub_1D13F2BB8();
LABEL_23:
        v42[0] = v29;
        uint64_t v30 = (void *)swift_bridgeObjectRetain();
        sub_1D1393DC4(v30, 1, v42);
        swift_bridgeObjectRelease();
        uint64_t v31 = v42[0];
        unint64_t v32 = sub_1D13F2398();
        swift_retain();
        sub_1D1395818(v32, v31);
        swift_bridgeObjectRelease();
        swift_release_n();
        id v33 = objc_allocWithZone((Class)sub_1D13F23A8());
        id v34 = (id)sub_1D13F2388();
        uint64_t v35 = sub_1D1395A70(inited, v34);

        swift_setDeallocating();
        swift_arrayDestroy();
        if (*(void *)(v35 + 16))
        {
          __swift_instantiateConcreteTypeFromMangledName(qword_1EA64D9A8);
          uint64_t v36 = sub_1D13F2BB8();
        }
        else
        {
          uint64_t v36 = MEMORY[0x1E4FBC868];
        }
        v42[0] = v36;
        uint64_t v38 = (void *)swift_bridgeObjectRetain();
        sub_1D1393A34(v38, 1, v42);

        goto LABEL_29;
      }
    }
    uint64_t v29 = MEMORY[0x1E4FBC868];
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  uint64_t v25 = v1;
  sub_1D1395D00(inited, v4, v25);
  uint64_t v27 = v26;
  swift_bridgeObjectRelease_n();

  swift_setDeallocating();
  swift_arrayDestroy();
  if (*(void *)(v27 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_1EA64D9A8);
    uint64_t v28 = sub_1D13F2BB8();
  }
  else
  {
    uint64_t v28 = MEMORY[0x1E4FBC868];
  }
  v42[0] = v28;
  uint64_t v37 = (void *)swift_bridgeObjectRetain();
  sub_1D1393A34(v37, 1, v42);
LABEL_29:
  swift_bridgeObjectRelease();
  return v42[0];
}

uint64_t sub_1D1390C54@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v4 = sub_1D13F2538();
  uint64_t v37 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v5);
  MEMORY[0x1F4188790](v6, v7);
  unint64_t v9 = (char *)&v32 - v8;
  unint64_t v39 = MEMORY[0x1E4FBC860];
  sub_1D1386110((uint64_t)a1, (uint64_t)v38);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64DA70);
  type metadata accessor for MeetingContext(0);
  if (swift_dynamicCast())
  {
    uint64_t v35 = swift_retain();
    v38[0] = nullsub_1(v35);
    unint64_t v10 = sub_1D1396384();
    uint64_t v11 = sub_1D13AB29C((uint64_t)&type metadata for JoinMeetingActionProducer, v10);
    if (v2)
    {
      swift_release();
      uint64_t v12 = sub_1D13A07D8();
      (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v9, v12, v4);
      id v13 = v2;
      id v14 = v2;
      uint64_t v15 = sub_1D13F2508();
      os_log_type_t v16 = sub_1D13F2838();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v34 = v4;
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        unint64_t v32 = (void *)swift_slowAlloc();
        id v33 = v17;
        *(_DWORD *)uint64_t v17 = 138412290;
        id v18 = v2;
        uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
        v38[0] = v19;
        uint64_t v4 = v34;
        sub_1D13F2978();
        uint64_t v20 = v32;
        *unint64_t v32 = v19;

        uint64_t v21 = v33;
        _os_log_impl(&dword_1D0FA3000, v15, v16, "Error producing join meeting suggestion: %@", v33, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23870);
        swift_arrayDestroy();
        MEMORY[0x1D25F77B0](v20, -1, -1);
        MEMORY[0x1D25F77B0](v21, -1, -1);
      }
      else
      {
      }
      (*(void (**)(char *, uint64_t))(v37 + 8))(v9, v4);
    }
    else
    {
      unint64_t v22 = (void *)v11;
      swift_release();
      id v23 = v22;
      MEMORY[0x1D25F5130]();
      if (*(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1D13F2778();
      }
      sub_1D13F2798();
      sub_1D13F2768();
    }
    uint64_t v24 = swift_retain();
    v38[0] = nullsub_1(v24);
    unint64_t v25 = sub_1D13963D8();
    uint64_t v26 = (void *)sub_1D13AB29C((uint64_t)&type metadata for DoNotDisturbActionProducer, v25);
    swift_release();
    id v27 = v26;
    MEMORY[0x1D25F5130]();
    if (*(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_1D13F2778();
    }
    sub_1D13F2798();
    sub_1D13F2768();

    swift_release();
  }
  uint64_t v28 = a1[3];
  uint64_t v29 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v28);
  (*(void (**)(uint64_t, uint64_t))(v29 + 32))(v28, v29);
  if (v39 >> 62)
  {
    sub_1D13F2338();
    swift_bridgeObjectRetain();
    sub_1D13F2B78();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_1D13F2C68();
    sub_1D13F2338();
  }
  swift_bridgeObjectRelease();
  id v30 = objc_allocWithZone((Class)sub_1D13F2378());
  uint64_t result = sub_1D13F2358();
  *uint64_t v36 = result;
  return result;
}

uint64_t sub_1D13912F0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2) {
    uint64_t v3 = v2;
  }
  *a2 = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D1391320(void (*a1)(void))
{
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xB0))();
  a1();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D13913A4()
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v2 = v0;
  unint64_t v3 = swift_bridgeObjectRetain();
  sub_1D13953B4(v3, (uint64_t)v2, ObjectType);

  uint64_t v4 = *(void **)&v2[OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_actionToWidgetConverter];
  sub_1D1384DE0(0, (unint64_t *)&qword_1EBD23840);
  uint64_t v5 = (void *)sub_1D13F2738();
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_convertSuggestions_, v5);

  unint64_t v7 = sub_1D13F2748();
  uint64_t v8 = v2;
  uint64_t v9 = sub_1D1395560(v7, (uint64_t)v8);
  swift_bridgeObjectRelease();

  return v9;
}

uint64_t sub_1D13914B0(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v64 = a3;
  uint64_t v65 = sub_1D13F2538();
  uint64_t v5 = *(void *)(v65 - 8);
  MEMORY[0x1F4188790](v65, v6);
  uint64_t v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9, v10);
  uint64_t v12 = (char *)&v60 - v11;
  double v15 = MEMORY[0x1F4188790](v13, v14);
  uint64_t v17 = (char *)&v60 - v16;
  id v18 = *a1;
  id v19 = objc_msgSend(v18, sel_clientModelSpecification, v15);
  id v20 = objc_msgSend(v19, sel_clientModelId);

  if (!v20)
  {
    sub_1D13F2688();
    id v20 = (id)sub_1D13F2678();
    swift_bridgeObjectRelease();
  }
  id v21 = objc_msgSend(self, sel_clientModelTypeFromClientModelId_, v20);

  if (v21)
  {
    if (!sub_1D1391C88((uint64_t)v21, *(void *)(a2+ OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_allowedAmbientClientModelTypes)))
    {
      sub_1D13F24F8();
      id v22 = v18;
      id v23 = sub_1D13F2508();
      os_log_type_t v24 = sub_1D13F2858();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = swift_slowAlloc();
        uint64_t v62 = swift_slowAlloc();
        uint64_t v63 = swift_slowAlloc();
        uint64_t v67 = v63;
        *(_DWORD *)uint64_t v25 = 136315394;
        uint64_t v26 = sub_1D13F2D88();
        uint64_t v66 = sub_1D138B264(v26, v27, &v67);
        uint64_t v28 = v5;
        sub_1D13F2978();
        swift_bridgeObjectRelease();
        *(_WORD *)(v25 + 12) = 2112;
        uint64_t v66 = (uint64_t)v22;
        id v29 = v22;
        sub_1D13F2978();
        uint64_t v30 = v62;
        *(void *)uint64_t v62 = v22;

        _os_log_impl(&dword_1D0FA3000, v23, v24, "%s: filtering out suggestion with unsupported client model type: %@", (uint8_t *)v25, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23870);
        swift_arrayDestroy();
        MEMORY[0x1D25F77B0](v30, -1, -1);
        uint64_t v31 = v63;
        swift_arrayDestroy();
        MEMORY[0x1D25F77B0](v31, -1, -1);
        MEMORY[0x1D25F77B0](v25, -1, -1);

        (*(void (**)(char *, uint64_t))(v28 + 8))(v17, v65);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v5 + 8))(v17, v65);
      }
      return 0;
    }
  }
  else
  {
    uint64_t v63 = (uint64_t)v12;
    unint64_t v32 = v8;
    uint64_t v33 = v5;
    if (qword_1EA64F0E0 != -1) {
      swift_once();
    }
    uint64_t v34 = (void *)qword_1EA64F0E8;
    swift_bridgeObjectRetain();
    id v35 = objc_msgSend(v18, sel_clientModelSpecification);
    id v36 = objc_msgSend(v35, sel_clientModelId);

    uint64_t v37 = sub_1D13F2688();
    uint64_t v39 = v38;

    LOBYTE(v37) = sub_1D1391EB0(v37, v39, v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = v33;
    uint64_t v8 = v32;
    if ((v37 & 1) == 0)
    {
      uint64_t v50 = v63;
      sub_1D13F24F8();
      id v51 = v18;
      uint64_t v52 = sub_1D13F2508();
      os_log_type_t v53 = sub_1D13F2858();
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v54 = swift_slowAlloc();
        uint64_t v55 = (void *)swift_slowAlloc();
        uint64_t v61 = swift_slowAlloc();
        uint64_t v67 = v61;
        *(_DWORD *)uint64_t v54 = 136315394;
        uint64_t v62 = v5;
        uint64_t v56 = sub_1D13F2D88();
        uint64_t v66 = sub_1D138B264(v56, v57, &v67);
        sub_1D13F2978();
        swift_bridgeObjectRelease();
        *(_WORD *)(v54 + 12) = 2112;
        uint64_t v66 = (uint64_t)v51;
        id v58 = v51;
        sub_1D13F2978();
        *uint64_t v55 = v51;

        _os_log_impl(&dword_1D0FA3000, v52, v53, "%s: filtering out suggestion with unsupported client model id: %@", (uint8_t *)v54, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23870);
        swift_arrayDestroy();
        MEMORY[0x1D25F77B0](v55, -1, -1);
        uint64_t v59 = v61;
        swift_arrayDestroy();
        MEMORY[0x1D25F77B0](v59, -1, -1);
        MEMORY[0x1D25F77B0](v54, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v50, v65);
      }
      else
      {

        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v50, v65);
      }
      return 0;
    }
  }
  if (objc_msgSend(*(id *)(a2 + OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_modeFilter), sel_currentModeConfigurationAllowsSuggestion_, v18))return 1; {
  sub_1D13F24F8();
  }
  id v41 = v18;
  uint64_t v42 = sub_1D13F2508();
  os_log_type_t v43 = sub_1D13F2858();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = swift_slowAlloc();
    uint64_t v45 = (void *)swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    uint64_t v67 = v63;
    *(_DWORD *)uint64_t v44 = 136315394;
    uint64_t v62 = v5;
    uint64_t v46 = sub_1D13F2D88();
    uint64_t v66 = sub_1D138B264(v46, v47, &v67);
    sub_1D13F2978();
    swift_bridgeObjectRelease();
    *(_WORD *)(v44 + 12) = 2112;
    uint64_t v66 = (uint64_t)v41;
    id v48 = v41;
    sub_1D13F2978();
    *uint64_t v45 = v41;

    _os_log_impl(&dword_1D0FA3000, v42, v43, "%s: filtering out suggestion due to mode configuration: %@", (uint8_t *)v44, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23870);
    swift_arrayDestroy();
    MEMORY[0x1D25F77B0](v45, -1, -1);
    uint64_t v49 = v63;
    swift_arrayDestroy();
    MEMORY[0x1D25F77B0](v49, -1, -1);
    MEMORY[0x1D25F77B0](v44, -1, -1);

    (*(void (**)(char *, uint64_t))(v62 + 8))(v8, v65);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v65);
  }
  return 0;
}

BOOL sub_1D1391C88(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  sub_1D13F2CE8();
  sub_1D13F2CF8();
  uint64_t v4 = sub_1D13F2D28();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_1D1391D78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    sub_1D13F2CE8();
    sub_1D13F26E8();
    uint64_t v6 = sub_1D13F2D28();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      unint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_1D13F2C58() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_1D13F2C58() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1D1391EB0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = sub_1D13F2C58();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (sub_1D13F2C58() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

void sub_1D1391F78(id *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_1D13F1FD8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1D13F2538();
  uint64_t v12 = *(void *)(v11 - 8);
  double v14 = MEMORY[0x1F4188790](v11, v13);
  uint64_t v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v17 = *a1;
  id v18 = objc_msgSend(*a1, sel_atxInfoSuggestionExecutableObject, v14);
  if (!v18)
  {
LABEL_8:
    uint64_t v41 = 0;
    goto LABEL_9;
  }
  id v19 = v18;
  uint64_t v44 = v12;
  uint64_t v45 = v11;
  uint64_t v46 = a3;
  uint64_t v20 = *(void *)(a2
                  + OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_disabledHeuristicSourceIdentifiers);
  id v21 = [v18 sourceIdentifier];
  uint64_t v22 = sub_1D13F2688();
  uint64_t v24 = v23;

  LOBYTE(v20) = sub_1D1391D78(v22, v24, v20);
  swift_bridgeObjectRelease();
  if (v20)
  {
    uint64_t v25 = sub_1D13A07D8();
    uint64_t v27 = v44;
    uint64_t v26 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v16, v25, v45);
    uint64_t v28 = v17;
    id v29 = sub_1D13F2508();
    os_log_type_t v30 = sub_1D13F2858();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = (void *)swift_slowAlloc();
      os_log_type_t v43 = v31;
      *(_DWORD *)uint64_t v31 = 138412290;
      unint64_t v47 = v28;
      unint64_t v32 = v28;
      uint64_t v27 = v44;
      uint64_t v26 = v45;
      sub_1D13F2978();
      uint64_t v33 = v42;
      *uint64_t v42 = v28;

      uint64_t v34 = v43;
      _os_log_impl(&dword_1D0FA3000, v29, v30, "ContextualEngineSuggestionStore: skipping disabled heuristic: %@", v43, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23870);
      swift_arrayDestroy();
      MEMORY[0x1D25F77B0](v33, -1, -1);
      MEMORY[0x1D25F77B0](v34, -1, -1);
    }
    else
    {

      id v29 = v28;
      id v19 = v28;
    }
    a3 = v46;

    (*(void (**)(char *, uint64_t))(v27 + 8))(v16, v26);
    goto LABEL_8;
  }
  sub_1D13F1FC8();
  uint64_t v35 = sub_1D13F1FB8();
  uint64_t v44 = v36;
  uint64_t v45 = v35;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  id v37 = [v19 widgetBundleIdentifier];
  sub_1D13F2688();

  id v38 = [v19 appBundleIdentifier];
  sub_1D13F2688();

  id v39 = [v19 widgetKind];
  sub_1D13F2688();

  [v19 intent];
  objc_msgSend(v17, sel_scoreSpecification);
  objc_msgSend(v17, sel_clientModelSpecification);
  id v40 = objc_allocWithZone((Class)sub_1D13F2318());
  uint64_t v41 = sub_1D13F2308();

  a3 = v46;
LABEL_9:
  *a3 = v41;
}

void sub_1D1392400()
{
  qword_1EA64F0E8 = (uint64_t)&unk_1F272FAF8;
}

uint64_t sub_1D1392414()
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
  if (result)
  {
    uint64_t v3 = v2;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
    return swift_unknownObjectRelease();
  }
  return result;
}

void sub_1D1392598()
{
  sub_1D13F2688();
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1CB18]);
  uint64_t v1 = (void *)sub_1D13F2678();
  swift_bridgeObjectRelease();
  id v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (v2) {
    qword_1EA64F0F8 = (uint64_t)v2;
  }
  else {
    __break(1u);
  }
}

uint64_t sub_1D1392628()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_contextStore);
  if (v1)
  {
    uint64_t v2 = (*(uint64_t (**)(void))(*(void *)v1 + 208))();
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      sub_1D13F2B08();
      uint64_t v4 = (uint64_t *)(v2 + 40);
      do
      {
        uint64_t v5 = *(v4 - 1);
        uint64_t v6 = *v4;
        sub_1D1387760();
        (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v5, v6);
        id v7 = objc_allocWithZone((Class)sub_1D13F2408());
        sub_1D13F23E8();
        id v8 = objc_allocWithZone((Class)sub_1D13F2378());
        sub_1D13F2358();
        sub_1D13F2AE8();
        sub_1D13F2B18();
        sub_1D13F2B28();
        sub_1D13F2AF8();
        v4 += 2;
        --v3;
      }
      while (v3);
    }
    swift_bridgeObjectRelease();
  }
  id v9 = objc_allocWithZone((Class)sub_1D13F23A8());
  return sub_1D13F2388();
}

uint64_t sub_1D13927B0()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](sub_1D13927D0, 0, 0);
}

uint64_t sub_1D13927D0()
{
  id v1 = sub_1D13956F8();
  if (v1)
  {
    uint64_t v2 = v1;
    sub_1D1392A94();
    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v4 = sub_1D1392628();
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v5(v4);
}

uint64_t sub_1D1392854(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return MEMORY[0x1F4188298](sub_1D1392874, 0, 0);
}

uint64_t sub_1D1392874()
{
  uint64_t v21 = v0;
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = v2;
    uint64_t v4 = self;
    id v20 = 0;
    id v5 = v3;
    id v6 = objc_msgSend(v4, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v5, 1, &v20);
    id v7 = v20;
    if (v6)
    {
      uint64_t v8 = sub_1D13F1F18();
      unint64_t v10 = v9;

      if (qword_1EA64F0F0 != -1) {
        swift_once();
      }
      uint64_t v11 = (void *)qword_1EA64F0F8;
      uint64_t v12 = (void *)sub_1D13F1F08();
      uint64_t v13 = (void *)sub_1D13F2678();
      objc_msgSend(v11, sel_setObject_forKey_, v12, v13);

      sub_1D13962E4(v8, v10);
    }
    else
    {
      uint64_t v16 = v7;
      id v17 = (void *)sub_1D13F1E98();

      swift_willThrow();
    }
  }
  else
  {
    if (qword_1EA64F0F0 != -1) {
      swift_once();
    }
    double v14 = (void *)qword_1EA64F0F8;
    uint64_t v15 = (void *)sub_1D13F2678();
    objc_msgSend(v14, sel_removeObjectForKey_, v15);
  }
  id v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

void sub_1D1392A94()
{
  uint64_t v1 = MEMORY[0x1E4FBC860];
  uint64_t v28 = MEMORY[0x1E4FBC860];
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_contextStore);
  if (v2) {
    uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v2 + 208))();
  }
  uint64_t v26 = *(void *)(v1 + 16);
  if (!v26)
  {
LABEL_28:
    swift_bridgeObjectRelease();
    id v23 = objc_allocWithZone((Class)sub_1D13F23A8());
    sub_1D13F2388();
    return;
  }
  unint64_t v3 = 0;
  uint64_t v24 = v1;
  uint64_t v25 = v1 + 32;
  while (v3 < *(void *)(v1 + 16))
  {
    uint64_t v8 = (uint64_t *)(v25 + 16 * v3);
    uint64_t v9 = *v8;
    uint64_t v27 = v8[1];
    unint64_t v10 = sub_1D13F2398();
    unint64_t v11 = v10;
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = sub_1D13F2B88();
      if (v12)
      {
LABEL_12:
        uint64_t v13 = 4;
        while (1)
        {
          if ((v11 & 0xC000000000000001) != 0) {
            id v14 = (id)MEMORY[0x1D25F54B0](v13 - 4, v11);
          }
          else {
            id v14 = *(id *)(v11 + 8 * v13);
          }
          uint64_t v15 = v14;
          uint64_t v16 = v13 - 3;
          if (__OFADD__(v13 - 4, 1))
          {
            __break(1u);
            goto LABEL_30;
          }
          id v17 = (void *)sub_1D13F2368();
          uint64_t v18 = sub_1D13F23F8();
          uint64_t v20 = v19;

          if (v18 == sub_1D1387760() && v20 == v21) {
            break;
          }
          char v22 = sub_1D13F2C58();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v22) {
            goto LABEL_23;
          }

          ++v13;
          if (v16 == v12) {
            goto LABEL_5;
          }
        }
        swift_bridgeObjectRelease_n();
LABEL_23:
        uint64_t v1 = v24;
        swift_bridgeObjectRelease_n();
        id v6 = v15;
        MEMORY[0x1D25F5130]();
        if (*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_1D13F2778();
        }
        sub_1D13F2798();
        sub_1D13F2768();
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v12) {
        goto LABEL_12;
      }
    }
LABEL_5:
    swift_bridgeObjectRelease_n();
    sub_1D1387760();
    (*(void (**)(uint64_t, uint64_t))(v27 + 24))(v9, v27);
    id v4 = objc_allocWithZone((Class)sub_1D13F2408());
    id v5 = (void *)sub_1D13F23E8();
    objc_allocWithZone((Class)sub_1D13F2378());
    id v6 = v5;
    id v7 = (id)sub_1D13F2358();
    MEMORY[0x1D25F5130]();
    if (*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_1D13F2778();
    }
    sub_1D13F2798();
    sub_1D13F2768();

    uint64_t v1 = v24;
LABEL_8:
    ++v3;

    if (v3 == v26) {
      goto LABEL_28;
    }
  }
LABEL_30:
  __break(1u);
}

id sub_1D1392E40()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void sub_1D1392E74()
{
}

id sub_1D1392ED4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ContextualEngineSuggestionStore();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1D1392FA4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  sub_1D13F2CE8();
  swift_bridgeObjectRetain();
  sub_1D13F26E8();
  uint64_t v8 = sub_1D13F2D28();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_1D13F2C58() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v14 = (uint64_t *)(*(void *)(*v3 + 48) + 16 * v10);
      uint64_t v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_1D13F2C58() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1D1393434(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1D1393154()
{
  id v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA64DA90);
  uint64_t v3 = sub_1D13F2A48();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    os_log_type_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                id v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *os_log_type_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      BOOL v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      sub_1D13F2CE8();
      sub_1D13F26E8();
      uint64_t result = sub_1D13F2D28();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      BOOL v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *BOOL v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_1D1393434(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_1D1393154();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_1D13935D0();
      goto LABEL_22;
    }
    sub_1D1393784();
  }
  uint64_t v11 = *v4;
  sub_1D13F2CE8();
  sub_1D13F26E8();
  uint64_t result = sub_1D13F2D28();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = sub_1D13F2C58(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = sub_1D13F2C78();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = sub_1D13F2C58();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (uint64_t *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void *sub_1D13935D0()
{
  id v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA64DA90);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D13F2A38();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    BOOL v19 = (void *)(*(void *)(v4 + 48) + v16);
    *BOOL v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1D1393784()
{
  id v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA64DA90);
  uint64_t v3 = sub_1D13F2A48();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    BOOL v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    sub_1D13F2CE8();
    swift_bridgeObjectRetain();
    sub_1D13F26E8();
    uint64_t result = sub_1D13F2D28();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *int64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    id v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

void sub_1D1393A34(void *a1, char a2, void *a3)
{
  if (!a1[2])
  {
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v43 = a1[2];
  uint64_t v7 = a1[4];
  uint64_t v6 = a1[5];
  unint64_t v8 = (void *)a1[6];
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)*a3;
  swift_bridgeObjectRetain();
  id v10 = v8;
  unint64_t v12 = sub_1D1394164(v7, v6);
  uint64_t v13 = v9[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14)) {
    goto LABEL_23;
  }
  char v16 = v11;
  if (v9[3] >= v15)
  {
    if (a2)
    {
      if (v11) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_1D13941DC();
      if (v16) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v21 = (void *)*a3;
    *(void *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    uint64_t v22 = (uint64_t *)(v21[6] + 16 * v12);
    *uint64_t v22 = v7;
    v22[1] = v6;
    *(void *)(v21[7] + 8 * v12) = v10;
    uint64_t v23 = v21[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    void v21[2] = v25;
    uint64_t v26 = v43 - 1;
    if (v43 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    BOOL v27 = (void **)(a1 + 9);
    while (1)
    {
      uint64_t v29 = (uint64_t)*(v27 - 2);
      uint64_t v28 = (uint64_t)*(v27 - 1);
      os_log_type_t v30 = *v27;
      uint64_t v31 = (void *)*a3;
      swift_bridgeObjectRetain();
      id v10 = v30;
      unint64_t v32 = sub_1D1394164(v29, v28);
      uint64_t v34 = v31[2];
      BOOL v35 = (v33 & 1) == 0;
      BOOL v24 = __OFADD__(v34, v35);
      uint64_t v36 = v34 + v35;
      if (v24) {
        break;
      }
      char v37 = v33;
      if (v31[3] < v36)
      {
        sub_1D139454C(v36, 1);
        unint64_t v32 = sub_1D1394164(v29, v28);
        if ((v37 & 1) != (v38 & 1)) {
          goto LABEL_25;
        }
      }
      if (v37) {
        goto LABEL_10;
      }
      id v39 = (void *)*a3;
      *(void *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      id v40 = (uint64_t *)(v39[6] + 16 * v32);
      *id v40 = v29;
      v40[1] = v28;
      *(void *)(v39[7] + 8 * v32) = v10;
      uint64_t v41 = v39[2];
      BOOL v24 = __OFADD__(v41, 1);
      uint64_t v42 = v41 + 1;
      if (v24) {
        goto LABEL_24;
      }
      v39[2] = v42;
      v27 += 3;
      if (!--v26) {
        goto LABEL_22;
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1D139454C(v15, a2 & 1);
  unint64_t v17 = sub_1D1394164(v7, v6);
  if ((v16 & 1) == (v18 & 1))
  {
    unint64_t v12 = v17;
    if ((v16 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    BOOL v19 = (void *)swift_allocError();
    swift_willThrow();
    id v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD23900);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease_n();
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_1D13F2C88();
  __break(1u);
LABEL_26:
  sub_1D13F2A78();
  sub_1D13F26F8();
  sub_1D13F2B48();
  sub_1D13F26F8();
  sub_1D13F2B68();
  __break(1u);
}

void sub_1D1393DC4(void *a1, char a2, void *a3)
{
  uint64_t v3 = a1[2];
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v7 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v8 = a1[7];
  uint64_t v45 = a1[6];
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)*a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v11 = sub_1D1394164(v7, v6);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13)) {
    goto LABEL_23;
  }
  char v15 = v10;
  if (v9[3] >= v14)
  {
    if (a2)
    {
      if (v10) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_1D1394390();
      if (v15) {
        goto LABEL_10;
      }
    }
LABEL_13:
    id v20 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    uint64_t v21 = (uint64_t *)(v20[6] + 16 * v11);
    *uint64_t v21 = v7;
    v21[1] = v6;
    uint64_t v22 = (void *)(v20[7] + 16 * v11);
    *uint64_t v22 = v45;
    v22[1] = v8;
    uint64_t v23 = v20[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v20[2] = v25;
    uint64_t v26 = v3 - 1;
    if (v3 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    BOOL v27 = a1 + 11;
    while (1)
    {
      uint64_t v29 = *(v27 - 3);
      uint64_t v28 = *(v27 - 2);
      uint64_t v30 = *(v27 - 1);
      uint64_t v31 = *v27;
      unint64_t v32 = (void *)*a3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v33 = sub_1D1394164(v29, v28);
      uint64_t v35 = v32[2];
      BOOL v36 = (v34 & 1) == 0;
      BOOL v24 = __OFADD__(v35, v36);
      uint64_t v37 = v35 + v36;
      if (v24) {
        break;
      }
      char v38 = v34;
      if (v32[3] < v37)
      {
        sub_1D139485C(v37, 1);
        unint64_t v33 = sub_1D1394164(v29, v28);
        if ((v38 & 1) != (v39 & 1)) {
          goto LABEL_25;
        }
      }
      if (v38) {
        goto LABEL_10;
      }
      id v40 = (void *)*a3;
      *(void *)(*a3 + 8 * (v33 >> 6) + 64) |= 1 << v33;
      uint64_t v41 = (uint64_t *)(v40[6] + 16 * v33);
      *uint64_t v41 = v29;
      v41[1] = v28;
      uint64_t v42 = (void *)(v40[7] + 16 * v33);
      *uint64_t v42 = v30;
      v42[1] = v31;
      uint64_t v43 = v40[2];
      BOOL v24 = __OFADD__(v43, 1);
      uint64_t v44 = v43 + 1;
      if (v24) {
        goto LABEL_24;
      }
      v27 += 4;
      v40[2] = v44;
      if (!--v26) {
        goto LABEL_22;
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1D139485C(v14, a2 & 1);
  unint64_t v16 = sub_1D1394164(v7, v6);
  if ((v15 & 1) == (v17 & 1))
  {
    unint64_t v11 = v16;
    if ((v15 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    char v18 = (void *)swift_allocError();
    swift_willThrow();
    id v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD23900);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_1D13F2C88();
  __break(1u);
LABEL_26:
  sub_1D13F2A78();
  sub_1D13F26F8();
  sub_1D13F2B48();
  sub_1D13F26F8();
  sub_1D13F2B68();
  __break(1u);
}

unint64_t sub_1D1394164(uint64_t a1, uint64_t a2)
{
  sub_1D13F2CE8();
  sub_1D13F26E8();
  uint64_t v4 = sub_1D13F2D28();
  return sub_1D1394B84(a1, a2, v4);
}

id sub_1D13941DC()
{
  id v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(qword_1EA64D9A8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D13F2B98();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    char v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    id v20 = *(void **)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1D1394390()
{
  id v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD23550);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D13F2B98();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    char v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    id v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v23 = v19;
    v23[1] = v18;
    int64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *int64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1D139454C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(qword_1EA64D9A8);
  char v38 = a2;
  uint64_t v6 = sub_1D13F2BA8();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    unint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    sub_1D13F2CE8();
    sub_1D13F26E8();
    uint64_t result = sub_1D13F2D28();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    void *v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1D139485C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD23550);
  char v42 = a2;
  uint64_t v6 = sub_1D13F2BA8();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  char v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    int64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    unint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1D13F2CE8();
    sub_1D13F26E8();
    uint64_t result = sub_1D13F2D28();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *unint64_t v19 = v34;
    v19[1] = v33;
    unint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *unint64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  int64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

unint64_t sub_1D1394B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    unint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1D13F2C58() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        int64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1D13F2C58() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_1D1394C68(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D1394CC8(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1D1394C88(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D1394E34(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1D1394CA8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D1394FDC(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1D1394CC8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD23890);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  BOOL v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1D13F2BC8();
  __break(1u);
  return result;
}

uint64_t sub_1D1394E34(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64DA40);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    double v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64DA48);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1D13F2BC8();
  __break(1u);
  return result;
}

uint64_t sub_1D1394FDC(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD23968);
    unint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    double v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64DA50);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1D13F2BC8();
  __break(1u);
  return result;
}

uint64_t sub_1D1395168(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = sub_1D13F27F8();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1D1392FA4(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1D1395200(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD23548);
    uint64_t v3 = sub_1D13F2A68();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      uint64_t v7 = *(void *)(v6 + 8 * v4);
      sub_1D13F2CE8();
      sub_1D13F2CF8();
      uint64_t result = sub_1D13F2D28();
      uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v10 = result & ~v9;
      unint64_t v11 = v10 >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
      uint64_t v13 = 1 << v10;
      uint64_t v14 = *(void *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(void *)(v14 + 8 * v10) == v7) {
          goto LABEL_3;
        }
        uint64_t v15 = ~v9;
        while (1)
        {
          unint64_t v10 = (v10 + 1) & v15;
          unint64_t v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0) {
            break;
          }
          if (*(void *)(v14 + 8 * v10) == v7) {
            goto LABEL_3;
          }
        }
      }
      *(void *)(v5 + 8 * v11) = v13 | v12;
      *(void *)(v14 + 8 * v10) = v7;
      uint64_t v16 = *(void *)(v3 + 16);
      BOOL v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return MEMORY[0x1E4FBC870];
}

uint64_t type metadata accessor for ContextualEngineSuggestionStore()
{
  return self;
}

uint64_t sub_1D1395368(uint64_t *a1)
{
  uint64_t v2 = sub_1D13913A4();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1D13953B4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      unint64_t v8 = 0;
      unint64_t v9 = a1 & 0xC000000000000001;
      uint64_t v15 = a2;
      while (v9)
      {
        id v10 = (id)MEMORY[0x1D25F54B0](v8, a1);
LABEL_9:
        unint64_t v11 = v10;
        unint64_t v12 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          goto LABEL_17;
        }
        uint64_t v16 = v10;
        char v13 = sub_1D13914B0(&v16, a2, a3);
        if (v3)
        {
          swift_bridgeObjectRelease();

          swift_release();
          return a2;
        }
        if (v13)
        {
          sub_1D13F2AE8();
          sub_1D13F2B18();
          unint64_t v9 = a1 & 0xC000000000000001;
          sub_1D13F2B28();
          sub_1D13F2AF8();
          a2 = v15;
        }
        else
        {
        }
        ++v8;
        if (v12 == v7)
        {
          a2 = v17;
          goto LABEL_20;
        }
      }
      if (v8 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      uint64_t v7 = sub_1D13F2B88();
      if (!v7) {
        goto LABEL_19;
      }
    }
    id v10 = *(id *)(a1 + 8 * v8 + 32);
    goto LABEL_9;
  }
LABEL_19:
  a2 = MEMORY[0x1E4FBC860];
LABEL_20:
  swift_bridgeObjectRelease();
  return a2;
}

uint64_t sub_1D1395560(unint64_t a1, uint64_t a2)
{
  uint64_t v13 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = sub_1D13F2B88())
  {
    for (uint64_t i = 4; ; ++i)
    {
      id v6 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1D25F54B0](i - 4, a1) : *(id *)(a1 + 8 * i);
      uint64_t v7 = v6;
      uint64_t v8 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      id v12 = v6;
      sub_1D1391F78(&v12, a2, &v11);
      if (v10)
      {
        swift_bridgeObjectRelease();

        return swift_bridgeObjectRelease();
      }

      if (v11)
      {
        MEMORY[0x1D25F5130]();
        if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_1D13F2778();
        }
        sub_1D13F2798();
        sub_1D13F2768();
      }
      if (v8 == v4)
      {
        swift_bridgeObjectRelease();
        return v13;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E4FBC860];
}

id sub_1D13956F8()
{
  if (qword_1EA64F0F0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1EA64F0F8;
  uint64_t v1 = (void *)sub_1D13F2678();
  id v2 = objc_msgSend(v0, sel_dataForKey_, v1);

  if (v2)
  {
    uint64_t v3 = sub_1D13F1F18();
    unint64_t v5 = v4;

    sub_1D1384DE0(0, &qword_1EA64DA58);
    sub_1D13F23A8();
    id v2 = (id)sub_1D13F2868();
    sub_1D13962E4(v3, v5);
  }
  return v2;
}

uint64_t sub_1D1395818(unint64_t a1, uint64_t a2)
{
  unint64_t v3 = a1;
  uint64_t v22 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (uint64_t i = v4; i; uint64_t i = sub_1D13F2B88())
  {
    unint64_t v19 = v3;
    unint64_t v21 = v3 & 0xC000000000000001;
    uint64_t v5 = 4;
    uint64_t v6 = i;
    while (1)
    {
      id v7 = v21 ? (id)MEMORY[0x1D25F54B0](v5 - 4, v3) : *(id *)(v3 + 8 * v5);
      uint64_t v8 = v7;
      uint64_t v9 = v5 - 3;
      if (__OFADD__(v5 - 4, 1)) {
        break;
      }
      uint64_t v10 = (void *)sub_1D13F2368();
      uint64_t v11 = sub_1D13F23F8();
      uint64_t v13 = v12;

      if (*(void *)(a2 + 16) && (sub_1D1394164(v11, v13), (v14 & 1) != 0))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v15 = (void *)sub_1D13F2368();
        sub_1D13F23F8();

        id v16 = objc_allocWithZone((Class)sub_1D13F2408());
        sub_1D13F23E8();
        sub_1D13F2348();
        id v17 = objc_allocWithZone((Class)sub_1D13F2378());
        sub_1D13F2358();

        MEMORY[0x1D25F5130]();
        if (*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_1D13F2778();
        }
        sub_1D13F2798();
        sub_1D13F2768();
        unint64_t v3 = v19;
        uint64_t v6 = i;
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      ++v5;
      if (v9 == v6)
      {
        swift_bridgeObjectRelease();
        return v22;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E4FBC860];
}

uint64_t sub_1D1395A70(uint64_t a1, void *a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v14 = MEMORY[0x1E4FBC860];
    sub_1D1394C88(0, v2, 0);
    uint64_t v3 = v14;
    uint64_t v5 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v6 = *(v5 - 1);
      uint64_t v7 = *v5;
      unint64_t v9 = *(void *)(v14 + 16);
      unint64_t v8 = *(void *)(v14 + 24);
      swift_bridgeObjectRetain();
      id v10 = a2;
      if (v9 >= v8 >> 1) {
        sub_1D1394C88(v8 > 1, v9 + 1, 1);
      }
      v5 += 2;
      *(void *)(v14 + 16) = v9 + 1;
      uint64_t v11 = (void *)(v14 + 24 * v9);
      void v11[4] = v6;
      v11[5] = v7;
      v11[6] = v10;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_1D1395B64(unint64_t a1, uint64_t a2)
{
  uint64_t v16 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      unint64_t v4 = 0;
      uint64_t v14 = OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_modeFilter;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v5 = (id)MEMORY[0x1D25F54B0](v4, a1);
LABEL_9:
        uint64_t v6 = v5;
        unint64_t v7 = v4 + 1;
        if (__OFADD__(v4, 1)) {
          goto LABEL_16;
        }
        sub_1D13F2328();
        if (!v8
          || (unint64_t v9 = *(void **)(a2 + v14),
              uint64_t v10 = v3,
              uint64_t v11 = (void *)sub_1D13F2678(),
              swift_bridgeObjectRelease(),
              unsigned int v12 = objc_msgSend(v9, sel_currentModeConfigurationAllowsBundleId_, v11),
              v11,
              uint64_t v3 = v10,
              v12))
        {
          sub_1D13F2AE8();
          sub_1D13F2B18();
          sub_1D13F2B28();
          sub_1D13F2AF8();
        }
        else
        {
        }
        ++v4;
        if (v7 == v3) {
          return v16;
        }
      }
      if (v4 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      uint64_t v3 = sub_1D13F2B88();
      if (!v3) {
        return MEMORY[0x1E4FBC860];
      }
    }
    id v5 = *(id *)(a1 + 8 * v4 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x1E4FBC860];
}

void sub_1D1395D00(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return;
  }
  uint64_t v40 = MEMORY[0x1E4FBC860];
  sub_1D1394C88(0, v5, 0);
  uint64_t v8 = 0;
  uint64_t v38 = a1 + 32;
  uint64_t v35 = (void *)(a2 + 32);
  uint64_t v36 = a2;
  int64_t v37 = v5;
  while (1)
  {
    unint64_t v9 = (uint64_t *)(v38 + 16 * v8);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    swift_bridgeObjectRetain();
    BOOL v13 = sub_1D13F26D8() == v10 && v12 == v11;
    uint64_t v39 = v10;
    if (v13) {
      break;
    }
    char v14 = sub_1D13F2C58();
    swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_15;
    }
    if (sub_1D13F26C8() == v39 && v15 == v11)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v17 = sub_1D13F2C58();
      swift_bridgeObjectRelease();
      if ((v17 & 1) == 0) {
        goto LABEL_24;
      }
    }
    unint64_t v20 = *(os_unfair_lock_s **)&a3[OBJC_IVAR____TtC21AppPredictionInternal31ContextualEngineSuggestionStore_lock];
    unint64_t v21 = (uint64_t *)&v20[4];
    uint64_t v18 = v20 + 6;
    os_unfair_lock_lock(v20 + 6);
    sub_1D13912F0(v21, &v42);
    if (v4) {
      goto LABEL_32;
    }
    os_unfair_lock_unlock(v18);
    unint64_t v22 = v42;
    int64_t v23 = a3;
    sub_1D1395B64(v22, (uint64_t)v23);
    uint64_t v4 = 0;

    swift_bridgeObjectRelease();
    uint64_t v24 = type metadata accessor for BlendingContext();
    uint64_t v42 = sub_1D1386844();
    uint64_t v25 = sub_1D139633C((unint64_t *)&unk_1EA64DA60, (void (*)(uint64_t))type metadata accessor for BlendingContext);
    sub_1D13877E0(v24, v25);
    swift_release();
    id v26 = objc_allocWithZone((Class)sub_1D13F2378());
    uint64_t v27 = sub_1D13F2358();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64D850);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_1D142C3F0;
    *(void *)(v28 + 32) = v27;
    uint64_t v42 = v28;
    sub_1D13F2768();
LABEL_24:
    id v29 = objc_allocWithZone((Class)sub_1D13F23A8());
    uint64_t v30 = sub_1D13F2388();
    swift_bridgeObjectRetain();
    if (v4)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();
    unint64_t v32 = *(void *)(v40 + 16);
    unint64_t v31 = *(void *)(v40 + 24);
    if (v32 >= v31 >> 1) {
      sub_1D1394C88(v31 > 1, v32 + 1, 1);
    }
    ++v8;
    *(void *)(v40 + 16) = v32 + 1;
    uint64_t v33 = (void *)(v40 + 24 * v32);
    v33[4] = v39;
    v33[5] = v11;
    v33[6] = v30;
    if (v8 == v37) {
      return;
    }
  }
  swift_bridgeObjectRelease();
LABEL_15:
  uint64_t v18 = *(os_unfair_lock_s **)(a2 + 16);
  if (!v18) {
    goto LABEL_24;
  }
  uint64_t v42 = MEMORY[0x1E4FBC860];
  sub_1D13F2B08();
  unint64_t v19 = v35;
  while (1)
  {
    sub_1D1390C54(v19, &v41);
    if (v4) {
      break;
    }
    uint64_t v4 = 0;
    sub_1D13F2AE8();
    sub_1D13F2B18();
    sub_1D13F2B28();
    sub_1D13F2AF8();
    v19 += 5;
    uint64_t v18 = (os_unfair_lock_s *)((char *)v18 - 1);
    if (!v18)
    {
      a2 = v36;
      goto LABEL_24;
    }
  }
  swift_release();
  __break(1u);
LABEL_32:
  os_unfair_lock_unlock(v18);
  __break(1u);
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_1D1396120(uint64_t a1)
{
  return a1;
}

unint64_t sub_1D139614C()
{
  unint64_t result = qword_1EA64D9C8;
  if (!qword_1EA64D9C8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EA64D9D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA64D9C8);
  }
  return result;
}

uint64_t sub_1D13961A8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

void *initializeBufferWithCopyOfBuffer for ContextualEngineSuggestionStore.GuardedData(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ContextualEngineSuggestionStore.GuardedData()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for ContextualEngineSuggestionStore.GuardedData(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for ContextualEngineSuggestionStore.GuardedData(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ContextualEngineSuggestionStore.GuardedData()
{
  return &type metadata for ContextualEngineSuggestionStore.GuardedData;
}

void type metadata accessor for ATXProactiveSuggestionClientModelType(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

uint64_t sub_1D139629C()
{
  return sub_1D139633C((unint64_t *)&unk_1EBD23850, type metadata accessor for ATXProactiveSuggestionClientModelType);
}

uint64_t sub_1D13962E4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t sub_1D139633C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1D1396384()
{
  unint64_t result = qword_1EA64DA78;
  if (!qword_1EA64DA78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA64DA78);
  }
  return result;
}

unint64_t sub_1D13963D8()
{
  unint64_t result = qword_1EA64DA80;
  if (!qword_1EA64DA80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA64DA80);
  }
  return result;
}

id RelevantShortcutCandidate.widgetDescriptor.getter()
{
  return *(id *)(v0 + OBJC_IVAR___ATXRelevantShortcutCandidate_widgetDescriptor);
}

uint64_t RelevantShortcutCandidate.donationBundleIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___ATXRelevantShortcutCandidate_donationBundleIdentifier);
  swift_bridgeObjectRetain();
  return v1;
}

void *RelevantShortcutCandidate.intent.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___ATXRelevantShortcutCandidate_intent);
  id v2 = v1;
  return v1;
}

uint64_t RelevantShortcutCandidate.relevantContexts.getter()
{
  return swift_bridgeObjectRetain();
}

id RelevantShortcutCandidate.__allocating_init(widgetDescriptor:donationBundleIdentifier:intent:relevantContexts:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (char *)objc_allocWithZone(v5);
  *(void *)&v11[OBJC_IVAR___ATXRelevantShortcutCandidate_widgetDescriptor] = a1;
  uint64_t v12 = &v11[OBJC_IVAR___ATXRelevantShortcutCandidate_donationBundleIdentifier];
  *(void *)uint64_t v12 = a2;
  *((void *)v12 + 1) = a3;
  *(void *)&v11[OBJC_IVAR___ATXRelevantShortcutCandidate_intent] = a4;
  *(void *)&v11[OBJC_IVAR___ATXRelevantShortcutCandidate_relevantContexts] = a5;
  v14.receiver = v11;
  v14.super_class = v5;
  return objc_msgSendSuper2(&v14, sel_init);
}

id RelevantShortcutCandidate.init(widgetDescriptor:donationBundleIdentifier:intent:relevantContexts:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)&v5[OBJC_IVAR___ATXRelevantShortcutCandidate_widgetDescriptor] = a1;
  uint64_t v6 = &v5[OBJC_IVAR___ATXRelevantShortcutCandidate_donationBundleIdentifier];
  *(void *)uint64_t v6 = a2;
  *((void *)v6 + 1) = a3;
  *(void *)&v5[OBJC_IVAR___ATXRelevantShortcutCandidate_intent] = a4;
  *(void *)&v5[OBJC_IVAR___ATXRelevantShortcutCandidate_relevantContexts] = a5;
  v8.receiver = v5;
  v8.super_class = (Class)type metadata accessor for RelevantShortcutCandidate();
  return objc_msgSendSuper2(&v8, sel_init);
}

uint64_t type metadata accessor for RelevantShortcutCandidate()
{
  return self;
}

id sub_1D139678C@<X0>(void *a1@<X8>)
{
  a1[3] = type metadata accessor for RelevantShortcutCandidate();
  *a1 = v3;
  return v3;
}

uint64_t sub_1D1396844()
{
  uint64_t v1 = v0;
  sub_1D13F2A78();
  sub_1D13F26F8();
  swift_bridgeObjectRetain();
  sub_1D13F26F8();
  swift_bridgeObjectRelease();
  sub_1D13F26F8();
  id v2 = *(void **)(v0 + OBJC_IVAR___ATXRelevantShortcutCandidate_widgetDescriptor);
  id v3 = objc_msgSend(v2, sel_extensionBundleIdentifier);
  sub_1D13F2688();

  sub_1D13F26F8();
  swift_bridgeObjectRelease();
  sub_1D13F26F8();
  id v4 = objc_msgSend(v2, sel_kind);
  sub_1D13F2688();

  sub_1D13F26F8();
  swift_bridgeObjectRelease();
  sub_1D13F26F8();
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR___ATXRelevantShortcutCandidate_relevantContexts);
  swift_bridgeObjectRetain();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23538);
  MEMORY[0x1D25F5160](v5, v6);
  sub_1D13F26F8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1D13F26F8();
  return 0;
}

id RelevantShortcutCandidate.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void RelevantShortcutCandidate.init()()
{
}

id RelevantShortcutCandidate.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RelevantShortcutCandidate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for RelevantShortcutCandidate(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for RelevantShortcutCandidate);
}

uint64_t dispatch thunk of RelevantShortcutCandidate.__allocating_init(widgetDescriptor:donationBundleIdentifier:intent:relevantContexts:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of RelevantShortcutCandidate.copy(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

id sub_1D1396BD0()
{
  uint64_t v1 = OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer____lazy_storage___xpcListener;
  objc_super v2 = *(void **)(v0
                + OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer____lazy_storage___xpcListener);
  if (v2)
  {
    id v3 = *(id *)(v0
               + OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer____lazy_storage___xpcListener);
  }
  else
  {
    sub_1D13F24B8();
    id v4 = objc_allocWithZone(MEMORY[0x1E4F29290]);
    uint64_t v5 = (void *)sub_1D13F2678();
    swift_bridgeObjectRelease();
    id v6 = objc_msgSend(v4, sel_initWithMachServiceName_, v5);

    objc_msgSend(v6, sel_setDelegate_, v0);
    unint64_t v7 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v6;
    id v3 = v6;

    objc_super v2 = 0;
  }
  id v8 = v2;
  return v3;
}

uint64_t sub_1D1396C98()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer_delegate;
  swift_beginAccess();
  return MEMORY[0x1D25F7870](v1);
}

uint64_t sub_1D1396CE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer_delegate;
  swift_beginAccess();
  *(void *)(v4 + _Block_object_dispose(&STACK[0x210], 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*sub_1D1396D54(void *a1))(uint64_t a1, char a2)
{
  id v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer_delegate;
  void v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1D25F7870](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return sub_1D138FEB0;
}

id sub_1D1396DDC()
{
  return *(id *)(v0 + OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer_suggestionStore);
}

id sub_1D1396DEC(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_1D1396E20(a1);
}

id sub_1D1396E20(void *a1)
{
  uint64_t v3 = sub_1D13F2538();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v1[OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer____lazy_storage___xpcListener] = 0;
  *(void *)&v1[OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v1[OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer_suggestionStore] = a1;
  id v8 = (objc_class *)type metadata accessor for ContextualEngineInternalServer();
  v17.receiver = v1;
  v17.super_class = v8;
  id v9 = a1;
  id v10 = objc_msgSendSuper2(&v17, sel_init);
  uint64_t v11 = sub_1D13A07D8();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v11, v3);
  uint64_t v12 = sub_1D13F2508();
  os_log_type_t v13 = sub_1D13F2858();
  if (os_log_type_enabled(v12, v13))
  {
    objc_super v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)objc_super v14 = 0;
    _os_log_impl(&dword_1D0FA3000, v12, v13, "ContextualEngineInternalServer init", v14, 2u);
    MEMORY[0x1D25F77B0](v14, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  id v15 = sub_1D1396BD0();
  objc_msgSend(v15, sel_resume);

  return v10;
}

uint64_t type metadata accessor for ContextualEngineInternalServer()
{
  return self;
}

uint64_t sub_1D139702C(uint64_t a1, void *a2)
{
  return sub_1D13991F4(a2);
}

uint64_t sub_1D1397034()
{
  return sub_1D1397074(MEMORY[0x1E4FBD380], "ContextualEngineInternalServer: connection interrupted");
}

uint64_t sub_1D1397054()
{
  return sub_1D1397074(MEMORY[0x1E4FBD390], "ContextualEngineInternalServer: connection invalidated");
}

uint64_t sub_1D1397074(uint64_t (*a1)(void), const char *a2)
{
  uint64_t v4 = sub_1D13F2538();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  id v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1D13A07D8();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v9, v4);
  id v10 = sub_1D13F2508();
  os_log_type_t v11 = a1();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl(&dword_1D0FA3000, v10, v11, a2, v12, 2u);
    MEMORY[0x1D25F77B0](v12, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1D1397234()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](sub_1D1397254, 0, 0);
}

uint64_t sub_1D1397254()
{
  uint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(*(void *)(v0 + 16)
                                                                  + OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer_suggestionStore))
                            + 0xB0))();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1D139745C(const void *a1, void *a2)
{
  *(void *)(v2 + 16) = a2;
  *(void *)(v2 + 24) = _Block_copy(a1);
  id v4 = a2;
  return MEMORY[0x1F4188298](sub_1D13974D4, 0, 0);
}

uint64_t sub_1D13974D4()
{
  uint64_t v2 = (char *)v0[2];
  uint64_t v1 = (void (**)(void, void, void))v0[3];
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)&v2[OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer_suggestionStore])
                    + 0xB0))();

  sub_1D13F23A8();
  uint64_t v3 = (void *)sub_1D13F25D8();
  swift_bridgeObjectRelease();
  ((void (**)(void, void *, void))v1)[2](v1, v3, 0);

  _Block_release(v1);
  id v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1D13975D4()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](sub_1D13975F4, 0, 0);
}

uint64_t sub_1D13975F4()
{
  uint64_t v1 = *(int **)((*MEMORY[0x1E4FBC8C8] & **(void **)(*(void *)(v0 + 16)
                                                     + OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer_suggestionStore))
               + 0xF0);
  id v4 = (uint64_t (*)(void))((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v2;
  void *v2 = v0;
  v2[1] = sub_1D1397708;
  return v4();
}

uint64_t sub_1D1397708(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_1D1397970(const void *a1, void *a2)
{
  *(void *)(v2 + 16) = a2;
  *(void *)(v2 + 24) = _Block_copy(a1);
  id v4 = a2;
  return MEMORY[0x1F4188298](sub_1D13979E8, 0, 0);
}

uint64_t sub_1D13979E8()
{
  uint64_t v1 = *(int **)((*MEMORY[0x1E4FBC8C8] & **(void **)(*(void *)(v0 + 16)
                                                     + OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer_suggestionStore))
               + 0xF0);
  id v4 = (uint64_t (*)(void))((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v2;
  void *v2 = v0;
  v2[1] = sub_1D1397AFC;
  return v4();
}

uint64_t sub_1D1397AFC(void *a1)
{
  uint64_t v3 = *(void (***)(void, void, void))(*v1 + 24);
  id v4 = *(void **)(*v1 + 16);
  uint64_t v7 = *v1;
  swift_task_dealloc();

  ((void (**)(void, void *, void))v3)[2](v3, a1, 0);
  _Block_release(v3);

  uint64_t v5 = *(uint64_t (**)(void))(v7 + 8);
  return v5();
}

uint64_t sub_1D1397C4C(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x1F4188298](sub_1D1397C6C, 0, 0);
}

uint64_t sub_1D1397C6C()
{
  uint64_t v1 = *(int **)((*MEMORY[0x1E4FBC8C8] & **(void **)(v0[3]
                                                     + OBJC_IVAR____TtC21AppPredictionInternal30ContextualEngineInternalServer_suggestionStore))
               + 0xF8);
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)v1 + *v1);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[4] = v2;
  void *v2 = v0;
  v2[1] = sub_1D1397D88;
  uint64_t v3 = v0[2];
  return v5(v3);
}

uint64_t sub_1D1397D88()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_1D1397E84, 0, 0);
}

uint64_t sub_1D1397E84()
{
  uint64_t v2 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 24)) + 0x80))();
  *(void *)(v0 + 40) = v2;
  if (v2)
  {
    uint64_t v3 = v1;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3 + 8) + **(int **)(v3 + 8));
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 4_Block_object_dispose(&STACK[0x210], 8) = v5;
    void *v5 = v0;
    v5[1] = sub_1D1397FF8;
    return v8(ObjectType, v3);
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

uint64_t sub_1D1397FF8()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](sub_1D1398134, 0, 0);
  }
  else
  {
    swift_unknownObjectRelease();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1D1398134()
{
  swift_unknownObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D1398314(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  uint64_t v8 = (void *)swift_task_alloc();
  void v3[5] = v8;
  void *v8 = v3;
  v8[2] = v6;
  v8[3] = v7;
  v8[1] = sub_1D13983F0;
  return MEMORY[0x1F4188298](sub_1D1397C6C, 0, 0);
}

uint64_t sub_1D13983F0()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  uint64_t v5 = *(void **)(*v1 + 24);
  id v6 = *(void **)(*v1 + 16);
  uint64_t v7 = *v1;
  swift_task_dealloc();

  uint64_t v8 = *(void *)(v3 + 32);
  if (v2)
  {
    uint64_t v9 = (void *)sub_1D13F1E88();

    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v8 + 16))(v8, 0);
  }
  _Block_release(*(const void **)(v4 + 32));
  uint64_t v10 = *(uint64_t (**)(void))(v7 + 8);
  return v10();
}

uint64_t sub_1D139858C()
{
  v1[2] = v0;
  uint64_t v2 = sub_1D13F2538();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D139864C, 0, 0);
}

uint64_t sub_1D139864C()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v4 = sub_1D13A07D8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v5 = sub_1D13F2508();
  os_log_type_t v6 = sub_1D13F2858();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_1D0FA3000, v5, v6, "ContextualEngineInternalServer: update()", v7, 2u);
    MEMORY[0x1D25F77B0](v7, -1, -1);
  }
  uint64_t v9 = v0[4];
  uint64_t v8 = v0[5];
  uint64_t v10 = (void *)v0[2];
  uint64_t v11 = v0[3];

  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v11);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v10) + 0x80))(v12);
  v0[6] = v14;
  if (v14)
  {
    uint64_t v15 = v13;
    uint64_t ObjectType = swift_getObjectType();
    unint64_t v20 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v15 + 8) + **(int **)(v15 + 8));
    objc_super v17 = (void *)swift_task_alloc();
    v0[7] = v17;
    void *v17 = v0;
    v17[1] = sub_1D1398884;
    return v20(ObjectType, v15);
  }
  else
  {
    swift_task_dealloc();
    unint64_t v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
}

uint64_t sub_1D1398884()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](sub_1D13989C8, 0, 0);
  }
  else
  {
    swift_unknownObjectRelease();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1D13989C8()
{
  swift_unknownObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D1398B9C(const void *a1, void *a2)
{
  void v2[2] = a2;
  v2[3] = _Block_copy(a1);
  a2;
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  void *v4 = v2;
  v4[1] = sub_1D1398C44;
  return sub_1D139858C();
}

uint64_t sub_1D1398C44()
{
  uint64_t v2 = v0;
  uint64_t v4 = *v1;
  uint64_t v3 = *v1;
  uint64_t v5 = *(void **)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc();

  uint64_t v7 = *(void *)(v3 + 24);
  if (v2)
  {
    uint64_t v8 = (void *)sub_1D13F1E88();

    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
  }
  else
  {
    (*(void (**)(uint64_t, void))(v7 + 16))(v7, 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  uint64_t v9 = *(uint64_t (**)(void))(v6 + 8);
  return v9();
}

void sub_1D1398DC8()
{
}

id sub_1D1398E28()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ContextualEngineInternalServer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1D1398EB8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  void *v4 = v3;
  v4[1] = sub_1D138E300;
  return v6();
}

uint64_t sub_1D1398F84(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  void *v5 = v4;
  v5[1] = sub_1D138E300;
  return v7();
}

uint64_t sub_1D1399050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D13F27D8();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1D13F27C8();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1D138FC1C(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1D13F27B8();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1D13991F4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1D13F2538();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1D13A07D8();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v9, v4);
  uint64_t v10 = sub_1D13F2508();
  os_log_type_t v11 = sub_1D13F2858();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl(&dword_1D0FA3000, v10, v11, "ContextualEngineInternalServer: incoming connection", v12, 2u);
    MEMORY[0x1D25F77B0](v12, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  uint64_t v13 = (void *)sub_1D13F2488();
  objc_msgSend(a1, sel_setExportedInterface_, v13);

  objc_msgSend(a1, sel_setExportedObject_, v2);
  uint64_t v21 = sub_1D1397034;
  uint64_t v22 = 0;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v18 = 1107296256;
  unint64_t v19 = sub_1D13859D0;
  unint64_t v20 = &block_descriptor_1;
  uint64_t v14 = _Block_copy(&aBlock);
  objc_msgSend(a1, sel_setInterruptionHandler_, v14);
  _Block_release(v14);
  uint64_t v21 = sub_1D1397054;
  uint64_t v22 = 0;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v18 = 1107296256;
  unint64_t v19 = sub_1D13859D0;
  unint64_t v20 = &block_descriptor_74;
  uint64_t v15 = _Block_copy(&aBlock);
  objc_msgSend(a1, sel_setInvalidationHandler_, v15);
  _Block_release(v15);
  objc_msgSend(a1, sel_resume);
  return 1;
}

uint64_t sub_1D1399498(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a2 + 8) + **(int **)(a2 + 8));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1D138DF50;
  return v7(a1, a2);
}

uint64_t sub_1D139958C()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_1D138E300;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1EA64DBD0 + dword_1EA64DBD0);
  return v5(v2, v3);
}

uint64_t sub_1D139963C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1D138E300;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1EA64DBE0 + dword_1EA64DBE0);
  return v6(v2, v3, v4);
}

uint64_t sub_1D1399700(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1D138E300;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1EA64DBF0 + dword_1EA64DBF0);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_1D13997CC()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D1399804(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1D138E300;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1EA64DC00 + dword_1EA64DC00);
  return v6(a1, v4);
}

uint64_t sub_1D13998BC()
{
  _Block_release(*(const void **)(v0 + 24));
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1D1399904()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1D138E300;
  uint64_t v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_1EA64DC10 + dword_1EA64DC10);
  return v6(v2, v3, v4);
}

uint64_t sub_1D13999C4()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_1D138E300;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1EA64DC30 + dword_1EA64DC30);
  return v5(v2, v3);
}

uint64_t objectdestroyTm_0()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D1399ABC()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_1D138DF50;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_1EA64DC50 + dword_1EA64DC50);
  return v5(v2, v3);
}

uint64_t objectdestroy_13Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

id ATXCompanionBundleIdMapper.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id ATXCompanionBundleIdMapper.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ATXCompanionBundleIdMapper();
  return objc_msgSendSuper2(&v2, sel_init);
}

id ATXCompanionBundleIdMapper.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ATXCompanionBundleIdMapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_1D1399D34(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = sub_1D13F29C8();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_1D13F2CE8();
        swift_bridgeObjectRetain();
        sub_1D13F26E8();
        uint64_t v9 = sub_1D13F2D28();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            _OWORD *v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    objc_super v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    objc_super v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  uint64_t *v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t _s21AppPredictionInternal26ATXCompanionBundleIdMapperC15generateMapping3forSDyS2SGSaySSG_tFZ_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  id v31 = self;
  swift_bridgeObjectRetain();
  int64_t v3 = (uint64_t *)(a1 + 40);
  uint64_t v4 = (void *)MEMORY[0x1E4FBC868];
  while (1)
  {
    uint64_t v7 = *(v3 - 1);
    uint64_t v6 = *v3;
    swift_bridgeObjectRetain();
    unint64_t v8 = (void *)sub_1D13F2678();
    id v9 = objc_msgSend(v31, sel_companionBundleIdForBundleId_, v8);

    if (!v9)
    {
      swift_bridgeObjectRetain();
      unint64_t v22 = sub_1D1394164(v7, v6);
      char v24 = v23;
      swift_bridgeObjectRelease();
      if ((v24 & 1) == 0) {
        goto LABEL_5;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1D1394390();
      }
      swift_bridgeObjectRelease();
      sub_1D1399D34(v22, (uint64_t)v4);
      swift_bridgeObjectRelease();
      goto LABEL_4;
    }
    uint64_t v10 = sub_1D13F2688();
    uint64_t v12 = v11;

    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v15 = sub_1D1394164(v7, v6);
    uint64_t v16 = v4[2];
    BOOL v17 = (v14 & 1) == 0;
    uint64_t v18 = v16 + v17;
    if (__OFADD__(v16, v17)) {
      break;
    }
    char v19 = v14;
    if (v4[3] >= v18)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if ((v14 & 1) == 0) {
          goto LABEL_18;
        }
      }
      else
      {
        sub_1D1394390();
        if ((v19 & 1) == 0) {
          goto LABEL_18;
        }
      }
    }
    else
    {
      sub_1D139485C(v18, isUniquelyReferenced_nonNull_native);
      unint64_t v20 = sub_1D1394164(v7, v6);
      if ((v19 & 1) != (v21 & 1)) {
        goto LABEL_28;
      }
      unint64_t v15 = v20;
      if ((v19 & 1) == 0)
      {
LABEL_18:
        v4[(v15 >> 6) + 8] |= 1 << v15;
        uint64_t v25 = (uint64_t *)(v4[6] + 16 * v15);
        *uint64_t v25 = v7;
        v25[1] = v6;
        id v26 = (uint64_t *)(v4[7] + 16 * v15);
        *id v26 = v10;
        v26[1] = v12;
        uint64_t v27 = v4[2];
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28) {
          goto LABEL_27;
        }
        v4[2] = v29;
        swift_bridgeObjectRetain();
        goto LABEL_4;
      }
    }
    uint64_t v5 = (uint64_t *)(v4[7] + 16 * v15);
    swift_bridgeObjectRelease();
    uint64_t *v5 = v10;
    v5[1] = v12;
LABEL_4:
    swift_bridgeObjectRelease();
LABEL_5:
    swift_bridgeObjectRelease();
    v3 += 2;
    if (!--v1)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v4;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  uint64_t result = sub_1D13F2C88();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ATXCompanionBundleIdMapper()
{
  return self;
}

uint64_t sub_1D139A1E0()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_identifier);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1D139A21C()
{
  return *(void *)(v0 + OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_maxCredits);
}

uint64_t sub_1D139A22C()
{
  return *(void *)(v0 + OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_secondsToReplenishOneCredit);
}

uint64_t sub_1D139A23C()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_loggingSubsystem);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1D139A278()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_loggingCategory);
  swift_bridgeObjectRetain();
  return v1;
}

id PowerThrottlingCreditPool.Config.__allocating_init(identifier:maxCredits:secondsToReplenishOneCredit:loggingSubsystem:loggingCategory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v17 = (char *)objc_allocWithZone(v8);
  uint64_t v18 = &v17[OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_identifier];
  *(void *)uint64_t v18 = a1;
  *((void *)v18 + 1) = a2;
  *(void *)&v17[OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_maxCredits] = a3;
  *(void *)&v17[OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_secondsToReplenishOneCredit] = a4;
  char v19 = &v17[OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_loggingSubsystem];
  *(void *)char v19 = a5;
  *((void *)v19 + 1) = a6;
  unint64_t v20 = &v17[OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_loggingCategory];
  *(void *)unint64_t v20 = a7;
  *((void *)v20 + 1) = a8;
  v22.receiver = v17;
  v22.super_class = v8;
  return objc_msgSendSuper2(&v22, sel_init);
}

id PowerThrottlingCreditPool.Config.init(identifier:maxCredits:secondsToReplenishOneCredit:loggingSubsystem:loggingCategory:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v9 = &v8[OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_identifier];
  *(void *)id v9 = a1;
  *((void *)v9 + 1) = a2;
  *(void *)&v8[OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_maxCredits] = a3;
  *(void *)&v8[OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_secondsToReplenishOneCredit] = a4;
  uint64_t v10 = &v8[OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_loggingSubsystem];
  *(void *)uint64_t v10 = a5;
  *((void *)v10 + 1) = a6;
  uint64_t v11 = &v8[OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_loggingCategory];
  *(void *)uint64_t v11 = a7;
  *((void *)v11 + 1) = a8;
  v13.receiver = v8;
  v13.super_class = (Class)type metadata accessor for PowerThrottlingCreditPool.Config();
  return objc_msgSendSuper2(&v13, sel_init);
}

uint64_t type metadata accessor for PowerThrottlingCreditPool.Config()
{
  return self;
}

id PowerThrottlingCreditPool.Config.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void PowerThrottlingCreditPool.Config.init()()
{
}

id PowerThrottlingCreditPool.Config.__deallocating_deinit(uint64_t a1)
{
  return sub_1D139BC04(a1, type metadata accessor for PowerThrottlingCreditPool.Config);
}

id sub_1D139A608()
{
  return *(id *)(v0 + 16);
}

id sub_1D139A610()
{
  return *(id *)(v0 + 24);
}

uint64_t sub_1D139A618(void *a1)
{
  return sub_1D139A654(a1);
}

uint64_t sub_1D139A654(void *a1)
{
  *(void *)(v1 + 24) = a1;
  sub_1D13F2688();
  id v3 = objc_allocWithZone(MEMORY[0x1E4F1CB18]);
  id v4 = a1;
  uint64_t v5 = (void *)sub_1D13F2678();
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v3, sel_initWithSuiteName_, v5);

  if (v6)
  {
    *(void *)(v1 + 16) = v6;
  }
  else
  {

    type metadata accessor for PowerThrottlingCreditPool.State();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v1;
}

uint64_t type metadata accessor for PowerThrottlingCreditPool.State()
{
  return self;
}

unint64_t sub_1D139A748()
{
  return 0xD000000000000020;
}

id sub_1D139A818()
{
  uint64_t v1 = *(void **)(v0 + 16);
  sub_1D139A748();
  objc_super v2 = (void *)sub_1D13F2678();
  swift_bridgeObjectRelease();
  id v3 = objc_msgSend(v1, sel_integerForKey_, v2);

  return v3;
}

void sub_1D139A88C()
{
  uint64_t v1 = *(void **)(v0 + 16);
  objc_super v2 = (void *)sub_1D13F2818();
  sub_1D139A748();
  id v3 = (id)sub_1D13F2678();
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setValue_forKey_, v2, v3);
}

void (*sub_1D139A920(id *a1))()
{
  a1[1] = v1;
  *a1 = sub_1D139A818();
  return sub_1D139A968;
}

void sub_1D139A968()
{
}

double sub_1D139A98C()
{
  uint64_t v1 = *(void **)(v0 + 16);
  sub_1D139A748();
  objc_super v2 = (void *)sub_1D13F2678();
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_doubleForKey_, v2);
  double v4 = v3;

  return v4;
}

void sub_1D139AA0C()
{
  uint64_t v1 = *(void **)(v0 + 16);
  objc_super v2 = (void *)sub_1D13F27E8();
  sub_1D139A748();
  id v3 = (id)sub_1D13F2678();
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setValue_forKey_, v2, v3);
}

void (*sub_1D139AAA4(void *a1))(uint64_t a1)
{
  id v3 = *(void **)(v1 + 16);
  a1[1] = v1;
  a1[2] = v3;
  sub_1D139A748();
  double v4 = (void *)sub_1D13F2678();
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_doubleForKey_, v4);
  uint64_t v6 = v5;

  *a1 = v6;
  return sub_1D139AB48;
}

void sub_1D139AB48(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  id v3 = (id)sub_1D13F27E8();
  sub_1D139A748();
  objc_super v2 = (void *)sub_1D13F2678();
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setValue_forKey_, v3, v2);
}

uint64_t sub_1D139ABE4()
{
  uint64_t v1 = *(void **)(v0 + 16);
  sub_1D139A748();
  objc_super v2 = (void *)sub_1D13F2678();
  swift_bridgeObjectRelease();
  id v3 = objc_msgSend(v1, sel_objectForKey_, v2);

  if (v3)
  {
    sub_1D13F29A8();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_1D139ACE8((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    if (swift_dynamicCast()) {
      return v5;
    }
  }
  else
  {
    sub_1D139AD50((uint64_t)v7);
  }
  return *(void *)(*(void *)(v0 + 24) + OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_secondsToReplenishOneCredit);
}

uint64_t sub_1D139ACE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD23898);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D139AD50(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD23898);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1D139ADB0()
{
  return v0;
}

uint64_t sub_1D139ADD8()
{
  return MEMORY[0x1F4186488](v0, 32, 7);
}

uint64_t sub_1D139AE18()
{
  uint64_t v0 = sub_1D13F2878();
  MEMORY[0x1F4188790](v0, v1);
  uint64_t v2 = sub_1D13F25A8();
  MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v4 = sub_1D13F2888();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D1385EAC();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, *MEMORY[0x1E4FBCC68], v4);
  sub_1D13F2598();
  v10[1] = MEMORY[0x1E4FBC860];
  sub_1D139B008();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD239F0);
  sub_1D139B060();
  sub_1D13F29B8();
  return sub_1D13F28A8();
}

unint64_t sub_1D139B008()
{
  unint64_t result = qword_1EBD23A50;
  if (!qword_1EBD23A50)
  {
    sub_1D13F2878();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBD23A50);
  }
  return result;
}

unint64_t sub_1D139B060()
{
  unint64_t result = qword_1EBD23A00[0];
  if (!qword_1EBD23A00[0])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EBD239F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EBD23A00);
  }
  return result;
}

id PowerThrottlingCreditPool.__allocating_init(config:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = sub_1D139BCDC(a1);

  return v4;
}

id PowerThrottlingCreditPool.init(config:)(void *a1)
{
  id v2 = sub_1D139BCDC(a1);

  return v2;
}

uint64_t sub_1D139B164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(NSObject **)&v3[OBJC_IVAR___ATXPowerThrottlingCreditPool_queue];
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = v3;
  v8[3] = a1;
  v8[4] = a2;
  void v8[5] = a3;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_1D139C07C;
  *(void *)(v9 + 24) = v8;
  v14[4] = sub_1D139C098;
  void v14[5] = v9;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 1107296256;
  v14[2] = sub_1D139BAE8;
  v14[3] = &block_descriptor_2;
  uint64_t v10 = _Block_copy(v14);
  uint64_t v11 = v3;
  swift_retain();
  swift_release();
  dispatch_sync(v7, v10);
  _Block_release(v10);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

void sub_1D139B2C8(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v8 = sub_1D13F1FA8();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10);
  uint64_t v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a1 + OBJC_IVAR___ATXPowerThrottlingCreditPool_state);
  if (!v13)
  {
    os_log_t v63 = (os_log_t)sub_1D13F2508();
    uint64_t v22 = sub_1D13F2858();
    if (os_log_type_enabled(v63, (os_log_type_t)v22))
    {
      char v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v23 = 0;
      _os_log_impl(&dword_1D0FA3000, v63, (os_log_type_t)v22, "PowerThrottlingCreditPool: Failed to initialize state. Dropping request.", v23, 2u);
      MEMORY[0x1D25F77B0](v23, -1, -1);
    }
    os_log_t v24 = v63;

    return;
  }
  uint64_t v60 = a4;
  uint64_t v61 = a3;
  char v14 = (a1 + OBJC_IVAR___ATXPowerThrottlingCreditPool_logger);
  swift_retain_n();
  os_log_t v63 = v14;
  unint64_t v15 = sub_1D13F2508();
  os_log_type_t v16 = sub_1D13F2858();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v62 = a2;
  if (v17)
  {
    uint64_t v18 = (_DWORD *)swift_slowAlloc();
    uint64_t v59 = v8;
    char v19 = v18;
    _DWORD *v18 = 134218240;
    v64[0] = a2;
    uint64_t v20 = sub_1D13F2978();
    *((_WORD *)v19 + 6) = 2048;
    v64[0] = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 112))(v20);
    sub_1D13F2978();
    swift_release();
    _os_log_impl(&dword_1D0FA3000, v15, v16, "PowerThrottlingCreditPool: Request to consume %ld credits. Currently at %ld before replenishing", (uint8_t *)v19, 0x16u);
    char v21 = v19;
    uint64_t v8 = v59;
    MEMORY[0x1D25F77B0](v21, -1, -1);
  }
  else
  {
    swift_release();
  }

  sub_1D13F1F88();
  sub_1D13F1F28();
  double v26 = v25;
  uint64_t v27 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  double v28 = v26 - (*(double (**)(uint64_t))(*(void *)v13 + 136))(v27);
  if ((~*(void *)&v28 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_40;
  }
  if (v28 <= -9.22337204e18)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v28 >= 9.22337204e18)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v29 = *(void *)(*(void *)(a1 + OBJC_IVAR___ATXPowerThrottlingCreditPool_config)
                  + OBJC_IVAR___ATXPowerThrottlingCreditPoolConfig_maxCredits);
  uint64_t v30 = *(uint64_t (**)(void))(*(void *)v13 + 112);
  uint64_t v31 = v30();
  BOOL v32 = __OFSUB__(v29, v31);
  uint64_t v33 = v29 - v31;
  if (v32)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  uint64_t v34 = (*(uint64_t (**)(void))(*(void *)v13 + 160))();
  if (!v34)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v35 = (uint64_t)v28;
  if ((uint64_t)v28 == 0x8000000000000000 && v34 == -1) {
    goto LABEL_46;
  }
  if ((v33 & ~(v33 >> 63)) >= v35 / v34) {
    uint64_t v37 = v35 / v34;
  }
  else {
    uint64_t v37 = v33 & ~(v33 >> 63);
  }
  uint64_t v38 = v37 & ~(v37 >> 63);
  uint64_t v39 = sub_1D13F2508();
  os_log_type_t v40 = sub_1D13F2858();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = swift_slowAlloc();
    *(_DWORD *)uint64_t v41 = 134218240;
    v64[0] = (uint64_t)v28;
    sub_1D13F2978();
    *(_WORD *)(v41 + 12) = 2048;
    v64[0] = v37 & ~(v37 >> 63);
    sub_1D13F2978();
    _os_log_impl(&dword_1D0FA3000, v39, v40, "PowerThrottlingCreditPool: secondsSinceLastReplenish: %ld creditsToReplenish: %ld", (uint8_t *)v41, 0x16u);
    MEMORY[0x1D25F77B0](v41, -1, -1);
  }

  if (v37 < 1) {
    goto LABEL_29;
  }
  uint64_t v43 = sub_1D13F2508();
  os_log_type_t v44 = sub_1D13F2858();
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v45 = 134217984;
    v64[0] = v37 & ~(v37 >> 63);
    sub_1D13F2978();
    _os_log_impl(&dword_1D0FA3000, v43, v44, "PowerThrottlingCreditPool: Replenishing %ld credits and setting timestampLastReplenished", v45, 0xCu);
    MEMORY[0x1D25F77B0](v45, -1, -1);
  }

  uint64_t v46 = (uint64_t (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)v13 + 128))(v64);
  if (__OFADD__(*v47, v38))
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    return;
  }
  *v47 += v38;
  uint64_t v48 = v46(v64, 0);
  uint64_t v42 = (*(uint64_t (**)(uint64_t, double))(*(void *)v13 + 144))(v48, v26);
LABEL_29:
  if (((uint64_t (*)(uint64_t))v30)(v42) > 0)
  {
    uint64_t v49 = (void (*)(void *, void))(*(uint64_t (**)(void *))(*(void *)v13 + 128))(v64);
    if (!__OFSUB__(*v50, v62))
    {
      *v50 -= v62;
      v49(v64, 0);
      swift_retain();
      id v51 = sub_1D13F2508();
      os_log_type_t v52 = sub_1D13F2858();
      if (os_log_type_enabled(v51, v52))
      {
        uint64_t v53 = swift_slowAlloc();
        *(_DWORD *)uint64_t v53 = 134218240;
        v64[0] = v62;
        uint64_t v54 = sub_1D13F2978();
        *(_WORD *)(v53 + 12) = 2048;
        v64[0] = ((uint64_t (*)(uint64_t))v30)(v54);
        sub_1D13F2978();
        swift_release();
        _os_log_impl(&dword_1D0FA3000, v51, v52, "PowerThrottlingCreditPool: Running block and consuming %ld credits, remaining credits: %ld", (uint8_t *)v53, 0x16u);
        MEMORY[0x1D25F77B0](v53, -1, -1);
      }
      else
      {
        swift_release();
      }

      v61();
      goto LABEL_37;
    }
    goto LABEL_45;
  }
  swift_retain();
  uint64_t v55 = sub_1D13F2508();
  os_log_type_t v56 = sub_1D13F2858();
  if (os_log_type_enabled(v55, v56))
  {
    unint64_t v57 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v57 = 134217984;
    v64[0] = v30();
    sub_1D13F2978();
    swift_release();
    _os_log_impl(&dword_1D0FA3000, v55, v56, "PowerThrottlingCreditPool: Not enought credits to run block. Dropping request. credits: %ld", v57, 0xCu);
    MEMORY[0x1D25F77B0](v57, -1, -1);

LABEL_37:
    swift_release();
    return;
  }

  swift_release_n();
}

uint64_t sub_1D139BAE8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void PowerThrottlingCreditPool.init()()
{
}

id PowerThrottlingCreditPool.__deallocating_deinit()
{
  return sub_1D139BC04(0, type metadata accessor for PowerThrottlingCreditPool);
}

id sub_1D139BC04(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

id sub_1D139BCDC(void *a1)
{
  id v22 = a1;
  uint64_t v2 = sub_1D13F2538();
  uint64_t v23 = *(void *)(v2 - 8);
  uint64_t v24 = v2;
  MEMORY[0x1F4188790](v2, v3);
  char v21 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1D13F2878();
  MEMORY[0x1F4188790](v5, v6);
  uint64_t v7 = sub_1D13F25A8();
  MEMORY[0x1F4188790](v7 - 8, v8);
  uint64_t v9 = sub_1D13F2888();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v11);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = OBJC_IVAR___ATXPowerThrottlingCreditPool_queue;
  sub_1D1385EAC();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v13, *MEMORY[0x1E4FBCC68], v9);
  char v14 = v1;
  sub_1D13F2598();
  uint64_t v26 = MEMORY[0x1E4FBC860];
  sub_1D139B008();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD239F0);
  sub_1D139B060();
  sub_1D13F29B8();
  *(void *)&v1[v20] = sub_1D13F28A8();
  type metadata accessor for PowerThrottlingCreditPool.State();
  swift_allocObject();
  id v15 = v22;
  *(void *)&v14[OBJC_IVAR___ATXPowerThrottlingCreditPool_state] = sub_1D139A654(v15);
  *(void *)&v14[OBJC_IVAR___ATXPowerThrottlingCreditPool_config] = v15;
  id v16 = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  BOOL v17 = v21;
  sub_1D13F2518();
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(&v14[OBJC_IVAR___ATXPowerThrottlingCreditPool_logger], v17, v24);

  uint64_t v18 = (objc_class *)type metadata accessor for PowerThrottlingCreditPool();
  v25.receiver = v14;
  v25.super_class = v18;
  return objc_msgSendSuper2(&v25, sel_init);
}

uint64_t sub_1D139C044()
{
  return MEMORY[0x1F4186498](v0, 48, 7);
}

void sub_1D139C07C()
{
  sub_1D139B2C8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void (**)(void))(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1D139C088()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D139C098()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t type metadata accessor for PowerThrottlingCreditPool()
{
  uint64_t result = qword_1EBD23EA0;
  if (!qword_1EBD23EA0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1D139C124()
{
  return type metadata accessor for PowerThrottlingCreditPool();
}

uint64_t sub_1D139C12C()
{
  uint64_t result = sub_1D13F2538();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for PowerThrottlingCreditPool(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PowerThrottlingCreditPool);
}

uint64_t dispatch thunk of PowerThrottlingCreditPool.__allocating_init(config:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of PowerThrottlingCreditPool.consume(credits:toRun:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t method lookup function for PowerThrottlingCreditPool.Config(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PowerThrottlingCreditPool.Config);
}

uint64_t dispatch thunk of PowerThrottlingCreditPool.Config.__allocating_init(identifier:maxCredits:secondsToReplenishOneCredit:loggingSubsystem:loggingCategory:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_1D139C260()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_1D139C274(uint64_t a1, uint64_t a2)
{
  v2[5] = a1;
  v2[6] = a2;
  uint64_t v3 = sub_1D13F1FA8();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  uint64_t v4 = sub_1D13F2538();
  v2[10] = v4;
  v2[11] = *(void *)(v4 - 8);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D139C3B8, 0, 0);
}

uint64_t sub_1D139C3B8()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[11];
  uint64_t v4 = sub_1D13834E4();
  v0[16] = v4;
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[17] = v5;
  v0[18] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v1, v4, v2);
  uint64_t v6 = sub_1D13F2508();
  os_log_type_t v7 = sub_1D13F2858();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_1D0FA3000, v6, v7, "createSuggestions", v8, 2u);
    MEMORY[0x1D25F77B0](v8, -1, -1);
  }
  uint64_t v9 = v0[15];
  uint64_t v10 = v0[10];
  uint64_t v11 = v0[11];

  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v0[19] = v12;
  v0[20] = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v12(v9, v10);
  sub_1D13F1F38();
  type metadata accessor for SportsContextProducer();
  v0[21] = sub_1D1386844();
  uint64_t v13 = (void *)swift_task_alloc();
  v0[22] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_1D139C56C;
  uint64_t v14 = v0[9];
  uint64_t v15 = v0[5];
  return sub_1D13B3A34(v15, v14);
}

uint64_t sub_1D139C56C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 184) = a1;
  *(void *)(v3 + 192) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_1D139CA88;
  }
  else
  {
    swift_release();
    uint64_t v4 = sub_1D139C688;
  }
  return MEMORY[0x1F4188298](v4, 0, 0);
}

uint64_t sub_1D139C688()
{
  uint64_t v29 = v0;
  (*(void (**)(void, void, void))(v0 + 136))(*(void *)(v0 + 112), *(void *)(v0 + 128), *(void *)(v0 + 80));
  swift_bridgeObjectRetain();
  uint64_t v1 = sub_1D13F2508();
  os_log_type_t v2 = sub_1D13F2858();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 184);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 134217984;
    *(void *)(v0 + 32) = *(void *)(v3 + 16);
    sub_1D13F2978();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D0FA3000, v1, v2, "Contexts created %ld", v4, 0xCu);
    MEMORY[0x1D25F77B0](v4, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v5 = *(void *)(v0 + 184);
  (*(void (**)(void, void))(v0 + 152))(*(void *)(v0 + 112), *(void *)(v0 + 80));
  type metadata accessor for SportsSuggestionProducer();
  sub_1D1386844();
  unint64_t v6 = MEMORY[0x1E4FBC860];
  unint64_t v26 = MEMORY[0x1E4FBC860];
  uint64_t v7 = *(void *)(v5 + 16);
  if (v7)
  {
    uint64_t v9 = *(void *)(v0 + 184);
    uint64_t v8 = *(void *)(v0 + 192);
    uint64_t v10 = *(void *)(v9 + 32);
    swift_bridgeObjectRetain();
    uint64_t v27 = v10;
    swift_bridgeObjectRetain();
    sub_1D139CCC0(&v27, v28);
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    sub_1D139D8FC(v28[0]);
    uint64_t v12 = v7 - 1;
    if (v12)
    {
      uint64_t v13 = (uint64_t *)(v9 + 40);
      do
      {
        uint64_t v27 = *v13;
        swift_bridgeObjectRetain();
        sub_1D139CCC0(&v27, v28);
        swift_bridgeObjectRelease();
        sub_1D139D8FC(v28[0]);
        ++v13;
        --v12;
      }
      while (v12);
    }
    swift_bridgeObjectRelease();
    unint64_t v6 = v26;
  }
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 136);
  uint64_t v15 = *(void *)(v0 + 128);
  uint64_t v16 = *(void *)(v0 + 104);
  uint64_t v17 = *(void *)(v0 + 80);
  swift_bridgeObjectRelease();
  v14(v16, v15, v17);
  swift_bridgeObjectRetain_n();
  uint64_t v18 = sub_1D13F2508();
  os_log_type_t v19 = sub_1D13F2858();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 134217984;
    if (v6 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v21 = sub_1D13F2B88();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v21 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    *(void *)(v0 + 24) = v21;
    sub_1D13F2978();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D0FA3000, v18, v19, "Created total suggestions %ld", v20, 0xCu);
    MEMORY[0x1D25F77B0](v20, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  swift_release();

  uint64_t v22 = *(void *)(v0 + 72);
  uint64_t v23 = *(void *)(v0 + 56);
  uint64_t v24 = *(void *)(v0 + 64);
  (*(void (**)(void, void))(v0 + 152))(*(void *)(v0 + 104), *(void *)(v0 + 80));
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  objc_super v25 = *(uint64_t (**)(unint64_t))(v0 + 8);
  return v25(v6);
}

uint64_t sub_1D139CA88()
{
  uint64_t v1 = *(void **)(v0 + 192);
  os_log_type_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 80);
  swift_release();
  v2(v4, v3, v5);
  id v6 = v1;
  id v7 = v1;
  uint64_t v8 = sub_1D13F2508();
  os_log_type_t v9 = sub_1D13F2838();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = *(void **)(v0 + 192);
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138412290;
    id v13 = v10;
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v14;
    sub_1D13F2978();
    void *v12 = v14;

    _os_log_impl(&dword_1D0FA3000, v8, v9, "Context producer error: %@", v11, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23870);
    swift_arrayDestroy();
    MEMORY[0x1D25F77B0](v12, -1, -1);
    MEMORY[0x1D25F77B0](v11, -1, -1);
  }
  else
  {
    uint64_t v15 = *(void **)(v0 + 192);
  }
  uint64_t v16 = *(void **)(v0 + 192);
  uint64_t v17 = *(void *)(v0 + 72);
  uint64_t v18 = *(void *)(v0 + 56);
  uint64_t v19 = *(void *)(v0 + 64);
  (*(void (**)(void, void))(v0 + 152))(*(void *)(v0 + 96), *(void *)(v0 + 80));

  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v21 = MEMORY[0x1E4FBC860];
  return v20(v21);
}

uint64_t sub_1D139CCC0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_1D13F2538();
  uint64_t v51 = *(void *)(v4 - 8);
  uint64_t v52 = v4;
  MEMORY[0x1F4188790](v4, v5);
  uint64_t v50 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SportsContextEntry(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v9);
  uint64_t v11 = (uint64_t *)((char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v12, v13);
  uint64_t v15 = (uint64_t *)((char *)&v48 - v14);
  uint64_t v53 = *a1;
  int64_t v16 = *(void *)(v53 + 16);
  uint64_t v17 = MEMORY[0x1E4FBC860];
  if (v16)
  {
    if (v16 == 2)
    {
      uint64_t v18 = v53 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
      sub_1D139DF88(v18, (uint64_t)&v48 - v14, type metadata accessor for SportsContextEntry);
      sub_1D139DF88(v18 + *(void *)(v8 + 72), (uint64_t)v11, type metadata accessor for SportsContextEntry);
      uint64_t v19 = sub_1D13A221C();
      uint64_t v21 = v20;
      uint64_t v22 = (uint64_t)v15 + *(int *)(v7 + 24);
      v55[3] = type metadata accessor for SportsDependencies(0);
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v55);
      sub_1D139DF88(v22, (uint64_t)boxed_opaque_existential_0, type metadata accessor for SportsDependencies);
      uint64_t v24 = sub_1D13AB5BC(v19, v21, (uint64_t)v55);
      swift_bridgeObjectRelease();
      uint64_t v25 = __swift_destroy_boxed_opaque_existential_0((uint64_t)v55);
      MEMORY[0x1F4188790](v25, v26);
      *(&v48 - 2) = v15;
      *(&v48 - 1) = v11;
      uint64_t v27 = sub_1D139D7DC((void *(*)(uint64_t *__return_ptr, uint64_t))sub_1D139DFF0, (uint64_t)(&v48 - 4), (uint64_t)v24);
      sub_1D139DE84((uint64_t)v11);
      sub_1D139DE84((uint64_t)v15);
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    uint64_t v48 = a2;
    v55[0] = MEMORY[0x1E4FBC860];
    int64_t v29 = v16;
    sub_1D1394C68(0, v16, 0);
    uint64_t v30 = v53 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v54 = *(void *)(v8 + 72);
    uint64_t v49 = v29;
    do
    {
      sub_1D139DF88(v30, (uint64_t)v11, type metadata accessor for SportsContextEntry);
      sub_1D13F1FA8();
      sub_1D139DE2C();
      uint64_t v31 = sub_1D13F2C48();
      uint64_t v33 = v32;
      sub_1D139DE84((uint64_t)v11);
      uint64_t v17 = v55[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1D1394C68(0, *(void *)(v17 + 16) + 1, 1);
        uint64_t v17 = v55[0];
      }
      unint64_t v35 = *(void *)(v17 + 16);
      unint64_t v34 = *(void *)(v17 + 24);
      if (v35 >= v34 >> 1)
      {
        sub_1D1394C68(v34 > 1, v35 + 1, 1);
        uint64_t v17 = v55[0];
      }
      *(void *)(v17 + 16) = v35 + 1;
      uint64_t v36 = v17 + 16 * v35;
      *(void *)(v36 + 32) = v31;
      *(void *)(v36 + 40) = v33;
      v30 += v54;
      --v29;
    }
    while (v29);
    a2 = v48;
  }
  else
  {
    uint64_t v49 = 0;
  }
  v55[0] = v17;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA64D9D0);
  sub_1D139DEE0((unint64_t *)&qword_1EA64DCC0, (uint64_t *)&unk_1EA64D9D0);
  uint64_t v37 = sub_1D13F2618();
  unint64_t v39 = v38;
  swift_bridgeObjectRelease();
  uint64_t v40 = sub_1D13834E4();
  uint64_t v42 = v50;
  uint64_t v41 = v51;
  uint64_t v43 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v50, v40, v52);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  os_log_type_t v44 = sub_1D13F2508();
  os_log_type_t v45 = sub_1D13F2838();
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v46 = swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    v55[0] = v47;
    *(_DWORD *)uint64_t v46 = 134218242;
    swift_bridgeObjectRelease();
    uint64_t v56 = v49;
    sub_1D13F2978();
    swift_bridgeObjectRelease();
    *(_WORD *)(v46 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v56 = sub_1D138B264(v37, v39, v55);
    sub_1D13F2978();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1D0FA3000, v44, v45, "Context pair error %ld: %s", (uint8_t *)v46, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D25F77B0](v47, -1, -1);
    MEMORY[0x1D25F77B0](v46, -1, -1);

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v50, v52);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v42, v43);
  }
  uint64_t v27 = MEMORY[0x1E4FBC860];
LABEL_16:
  *a2 = v27;
  return result;
}

uint64_t sub_1D139D2D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v56 = a4;
  uint64_t v7 = sub_1D13F2538();
  uint64_t v54 = *(void *)(v7 - 8);
  uint64_t v55 = v7;
  MEMORY[0x1F4188790](v7, v8);
  uint64_t v53 = (char *)v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD239C8);
  MEMORY[0x1F4188790](v10 - 8, v11);
  uint64_t v13 = (char *)v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14, v15);
  uint64_t v17 = (char *)v49 - v16;
  uint64_t v18 = sub_1D13F1FA8();
  uint64_t v19 = *(void **)(v18 - 8);
  MEMORY[0x1F4188790](v18, v20);
  uint64_t v52 = (char *)v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22, v23);
  uint64_t v25 = (char *)v49 - v24;
  MEMORY[0x1F4188790](v26, v27);
  int64_t v29 = (char *)v49 - v28;
  uint64_t v30 = *(void *)(a1 + 16);
  sub_1D13A0F38(v30, a2, a3, (uint64_t)v49 - v28);
  sub_1D13A132C(v30, a2, a3, (uint64_t)v25);
  uint64_t v31 = (void (*)(char *, char *, uint64_t))v19[2];
  unint64_t v57 = v29;
  v31(v17, v29, v18);
  uint64_t v32 = (void (*)(char *, void, uint64_t, uint64_t))v19[7];
  v32(v17, 0, 1, v18);
  v31(v13, v25, v18);
  v32(v13, 0, 1, v18);
  uint64_t v33 = sub_1D1386060(a1 + 24, (uint64_t)v17, (uint64_t)v13);
  sub_1D139E01C((uint64_t)v13);
  sub_1D139E01C((uint64_t)v17);
  if (v33)
  {
    unint64_t v34 = (void (*)(char *, uint64_t))v19[1];
    v34(v25, v18);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v34)(v57, v18);
    uint64_t v36 = v56;
  }
  else
  {
    uint64_t v51 = v25;
    uint64_t v37 = sub_1D13834E4();
    (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v53, v37, v55);
    unint64_t v38 = v57;
    v31(v52, v57, v18);
    unint64_t v39 = sub_1D13F2508();
    os_log_type_t v40 = sub_1D13F2838();
    BOOL v41 = os_log_type_enabled(v39, v40);
    uint64_t v36 = v56;
    if (v41)
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      uint64_t v59 = v50;
      *(_DWORD *)uint64_t v42 = 136315138;
      v49[1] = v42 + 4;
      sub_1D139DE2C();
      uint64_t v43 = v52;
      uint64_t v44 = sub_1D13F2C48();
      uint64_t v58 = sub_1D138B264(v44, v45, &v59);
      sub_1D13F2978();
      swift_bridgeObjectRelease();
      uint64_t v46 = (void (*)(char *, uint64_t))v19[1];
      v46(v43, v18);
      _os_log_impl(&dword_1D0FA3000, v39, v40, "Unable to create suggestion %s", v42, 0xCu);
      uint64_t v47 = v50;
      swift_arrayDestroy();
      MEMORY[0x1D25F77B0](v47, -1, -1);
      MEMORY[0x1D25F77B0](v42, -1, -1);

      (*(void (**)(char *, uint64_t))(v54 + 8))(v53, v55);
      v46(v51, v18);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v46)(v57, v18);
    }
    else
    {

      uint64_t v48 = (void (*)(char *, uint64_t))v19[1];
      v48(v52, v18);
      (*(void (**)(char *, uint64_t))(v54 + 8))(v53, v55);
      v48(v51, v18);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v48)(v38, v18);
    }
  }
  *uint64_t v36 = v33;
  return result;
}

uint64_t sub_1D139D7DC(void *(*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v10 = MEMORY[0x1E4FBC860];
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    uint64_t v7 = a3 + 32;
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v8 = a1(&v9, v7);
      if (v3)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      if (v9)
      {
        MEMORY[0x1D25F5130](v8);
        if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_1D13F2778();
        }
        sub_1D13F2798();
        sub_1D13F2768();
      }
      v7 += 64;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    return v10;
  }
  return result;
}

uint64_t sub_1D139D8FC(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_1D13F2B88();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_1D13F2B88();
    swift_bridgeObjectRelease();
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x1D25F54C0](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    unint64_t *v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = sub_1D139DAD8(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_1D13F2B88();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();
  return sub_1D13F2768();
}

ValueMetadata *type metadata accessor for SportsSuggestionGenerator()
{
  return &type metadata for SportsSuggestionGenerator;
}

uint64_t sub_1D139DAD8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_1D13F2B88();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1D13F2B88();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1D139DEE0(&qword_1EA64DCB8, &qword_1EA64DCB0);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64DCB0);
          uint64_t v12 = sub_1D139DCFC(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1D138FAF4();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = sub_1D13F2BC8();
  __break(1u);
  return result;
}

void (*sub_1D139DCFC(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1D139DDAC(v6, a2, a3);
  return sub_1D139DD64;
}

void sub_1D139DD64(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_1D139DDAC(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)MEMORY[0x1D25F54B0](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return destroy for MotionContextDependencies;
  }
  __break(1u);
  return result;
}

unint64_t sub_1D139DE2C()
{
  unint64_t result = qword_1EBD239C0;
  if (!qword_1EBD239C0)
  {
    sub_1D13F1FA8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBD239C0);
  }
  return result;
}

uint64_t sub_1D139DE84(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SportsContextEntry(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1D139DEE0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_1D139DF88(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1D139DFF0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1D139D2D4(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_1D139E01C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD239C8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_1D139E07C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1D13F2878();
  MEMORY[0x1F4188790](v2, v3);
  uint64_t v4 = sub_1D13F25A8();
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v6 = sub_1D13F2888();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = OBJC_IVAR___ATXContextHeuristicsScheduler____lazy_storage___queue;
  uint64_t v12 = *(void **)(v0 + OBJC_IVAR___ATXContextHeuristicsScheduler____lazy_storage___queue);
  if (v12)
  {
    id v13 = *(id *)(v0 + OBJC_IVAR___ATXContextHeuristicsScheduler____lazy_storage___queue);
  }
  else
  {
    sub_1D1384DE0(0, (unint64_t *)&qword_1EBD23970);
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v10, *MEMORY[0x1E4FBCC68], v6);
    sub_1D13F2598();
    v18[1] = MEMORY[0x1E4FBC860];
    sub_1D13A0650((unint64_t *)&qword_1EBD23A50, MEMORY[0x1E4FBCC10]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD239F0);
    sub_1D13A0698(qword_1EBD23A00, (uint64_t *)&unk_1EBD239F0);
    sub_1D13F29B8();
    id v14 = (void *)sub_1D13F28A8();
    uint64_t v15 = *(void **)(v0 + v11);
    *(void *)(v1 + v11) = v14;
    id v13 = v14;

    uint64_t v12 = 0;
  }
  id v16 = v12;
  return v13;
}

uint64_t sub_1D139E300()
{
  uint64_t v1 = v0 + OBJC_IVAR___ATXContextHeuristicsScheduler_repeatInterval;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_1D139E348(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___ATXContextHeuristicsScheduler_repeatInterval);
  uint64_t result = swift_beginAccess();
  void *v3 = a1;
  return result;
}

id ContextHeuristicsScheduler.__allocating_init(contextHeuristics:)(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  *(_DWORD *)&v3[OBJC_IVAR___ATXContextHeuristicsScheduler_debugRerunSportsNotificationToken] = 0;
  *(void *)&v3[OBJC_IVAR___ATXContextHeuristicsScheduler_favoritesChangedToken] = 0;
  *(void *)&v3[OBJC_IVAR___ATXContextHeuristicsScheduler_syncSportsChangedToken] = 0;
  *(void *)&v3[OBJC_IVAR___ATXContextHeuristicsScheduler____lazy_storage___queue] = 0;
  *(void *)&v3[OBJC_IVAR___ATXContextHeuristicsScheduler_timer] = 0;
  *(void *)&v3[OBJC_IVAR___ATXContextHeuristicsScheduler_contextHeuristics] = a1;
  *(void *)&v3[OBJC_IVAR___ATXContextHeuristicsScheduler_repeatInterval] = 7200;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id ContextHeuristicsScheduler.init(contextHeuristics:)(uint64_t a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(_DWORD *)&v1[OBJC_IVAR___ATXContextHeuristicsScheduler_debugRerunSportsNotificationToken] = 0;
  *(void *)&v1[OBJC_IVAR___ATXContextHeuristicsScheduler_favoritesChangedToken] = 0;
  *(void *)&v1[OBJC_IVAR___ATXContextHeuristicsScheduler_syncSportsChangedToken] = 0;
  *(void *)&v1[OBJC_IVAR___ATXContextHeuristicsScheduler____lazy_storage___queue] = 0;
  *(void *)&v1[OBJC_IVAR___ATXContextHeuristicsScheduler_timer] = 0;
  *(void *)&v1[OBJC_IVAR___ATXContextHeuristicsScheduler_contextHeuristics] = a1;
  *(void *)&v1[OBJC_IVAR___ATXContextHeuristicsScheduler_repeatInterval] = 7200;
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

Swift::Void __swiftcall ContextHeuristicsScheduler.start()()
{
  uint64_t v1 = v0;
  uint64_t v74 = sub_1D13F2588();
  uint64_t v73 = *(void *)(v74 - 8);
  MEMORY[0x1F4188790](v74, v2);
  uint64_t v72 = (char *)&v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_1D13F2568();
  uint64_t v69 = *(void *)(v70 - 8);
  MEMORY[0x1F4188790](v70, v4);
  char v68 = (uint64_t *)((char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v6, v7);
  uint64_t v66 = (uint64_t *)((char *)&v64 - v8);
  uint64_t v67 = sub_1D13F25C8();
  uint64_t v65 = *(void *)(v67 - 8);
  MEMORY[0x1F4188790](v67, v9);
  unsigned int v81 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1D13F2578();
  uint64_t v79 = *(void *)(v11 - 8);
  uint64_t v80 = v11;
  MEMORY[0x1F4188790](v11, v12);
  uint64_t v77 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = sub_1D13F25A8();
  uint64_t v76 = *(void *)(v78 - 8);
  MEMORY[0x1F4188790](v78, v14);
  char v75 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1D13F28C8();
  uint64_t ObjectType = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16, v17);
  uint64_t v19 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_1D13F2538();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20, v22);
  uint64_t v24 = (char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_1D13C3040();
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v24, v25, v20);
  uint64_t v26 = sub_1D13F2508();
  os_log_type_t v27 = sub_1D13F2858();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl(&dword_1D0FA3000, v26, v27, "Starting ContextHeuristicsScheduler", v28, 2u);
    MEMORY[0x1D25F77B0](v28, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
  uint64_t v29 = OBJC_IVAR___ATXContextHeuristicsScheduler_timer;
  if (*(void *)(v1 + OBJC_IVAR___ATXContextHeuristicsScheduler_timer))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1D13F28F8();
    swift_unknownObjectRelease();
  }
  *(void *)(v1 + v29) = 0;
  swift_unknownObjectRelease();
  uint64_t v30 = (int *)(v1 + OBJC_IVAR___ATXContextHeuristicsScheduler_debugRerunSportsNotificationToken);
  swift_beginAccess();
  if (*v30)
  {
    notify_cancel(*v30);
    *uint64_t v30 = 0;
  }
  uint64_t v71 = v30;
  sub_1D1384DE0(0, &qword_1EBD23A58);
  id v31 = sub_1D139E07C();
  uint64_t aBlock = MEMORY[0x1E4FBC860];
  sub_1D13A0650(&qword_1EBD23980, MEMORY[0x1E4FBCC70]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD23A18);
  sub_1D13A0698((unint64_t *)&unk_1EBD23A20, &qword_1EBD23A18);
  sub_1D13F29B8();
  uint64_t v32 = sub_1D13F28D8();

  (*(void (**)(char *, uint64_t))(ObjectType + 8))(v19, v16);
  *(void *)(v1 + v29) = v32;
  swift_unknownObjectRelease();
  if (*(void *)(v1 + v29))
  {
    swift_getObjectType();
    uint64_t v33 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v87 = sub_1D139F2BC;
    uint64_t v88 = v33;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v84 = 1107296256;
    char v85 = sub_1D13859D0;
    unsigned int v86 = &block_descriptor_3;
    unint64_t v34 = _Block_copy(&aBlock);
    swift_unknownObjectRetain();
    swift_retain();
    unint64_t v35 = v75;
    sub_1D13F2598();
    uint64_t v36 = v77;
    sub_1D139F568();
    sub_1D13F28E8();
    _Block_release(v34);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v79 + 8))(v36, v80);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v35, v78);
    swift_release();
    swift_release();
    if (*(void *)(v1 + v29))
    {
      uint64_t ObjectType = swift_getObjectType();
      swift_unknownObjectRetain();
      sub_1D13F25B8();
      uint64_t v37 = (void *)(v1 + OBJC_IVAR___ATXContextHeuristicsScheduler_repeatInterval);
      swift_beginAccess();
      unint64_t v38 = v66;
      *uint64_t v66 = *v37;
      uint64_t v39 = *MEMORY[0x1E4FBCAE8];
      uint64_t v40 = v69;
      BOOL v41 = *(void (**)(void *, uint64_t, uint64_t))(v69 + 104);
      uint64_t v42 = v70;
      v41(v38, v39, v70);
      uint64_t v43 = v68;
      *char v68 = 10;
      v41(v43, v39, v42);
      uint64_t v44 = v81;
      MEMORY[0x1D25F5320](v81, v38, v43, ObjectType);
      swift_unknownObjectRelease();
      unint64_t v45 = *(void (**)(void *, uint64_t))(v40 + 8);
      v45(v43, v42);
      v45(v38, v42);
      (*(void (**)(char *, uint64_t))(v65 + 8))(v44, v67);
      if (*(void *)(v1 + v29))
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        sub_1D13F2908();
        swift_unknownObjectRelease();
      }
    }
  }
  if (objc_msgSend(self, sel_isInternalBuild))
  {
    sub_1D1384DE0(0, (unint64_t *)&qword_1EBD23970);
    uint64_t v46 = v73;
    uint64_t v47 = v72;
    uint64_t v48 = v74;
    (*(void (**)(char *, void, uint64_t))(v73 + 104))(v72, *MEMORY[0x1E4FBCB28], v74);
    uint64_t v49 = sub_1D13F28B8();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v48);
    uint64_t v50 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v87 = sub_1D139FAE0;
    uint64_t v88 = v50;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v84 = 1107296256;
    char v85 = sub_1D139F7C0;
    unsigned int v86 = &block_descriptor_12;
    uint64_t v51 = _Block_copy(&aBlock);
    swift_release();
    uint64_t v52 = v71;
    swift_beginAccess();
    notify_register_dispatch("com.apple.duetexpertd.contextheuristics.donateSports", v52, v49, v51);
    swift_endAccess();
    _Block_release(v51);
  }
  uint64_t v53 = self;
  id v54 = objc_msgSend(v53, sel_defaultCenter);
  uint64_t v55 = *MEMORY[0x1E4FB52B8];
  uint64_t v56 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v87 = sub_1D139F814;
  uint64_t v88 = v56;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v84 = 1107296256;
  char v85 = sub_1D139F838;
  unsigned int v86 = &block_descriptor_4;
  unint64_t v57 = _Block_copy(&aBlock);
  swift_release();
  id v58 = objc_msgSend(v54, sel_addObserverForName_object_queue_usingBlock_, v55, 0, 0, v57);
  _Block_release(v57);

  *(void *)(v1 + OBJC_IVAR___ATXContextHeuristicsScheduler_favoritesChangedToken) = v58;
  swift_unknownObjectRelease();
  id v59 = objc_msgSend(v53, sel_defaultCenter);
  uint64_t v60 = *MEMORY[0x1E4FB52C0];
  uint64_t v61 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v87 = sub_1D139FABC;
  uint64_t v88 = v61;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v84 = 1107296256;
  char v85 = sub_1D139F838;
  unsigned int v86 = &block_descriptor_8_0;
  uint64_t v62 = _Block_copy(&aBlock);
  swift_release();
  id v63 = objc_msgSend(v59, sel_addObserverForName_object_queue_usingBlock_, v60, 0, 0, v62);
  _Block_release(v62);

  *(void *)(v1 + OBJC_IVAR___ATXContextHeuristicsScheduler_syncSportsChangedToken) = v63;
  swift_unknownObjectRelease();
}

uint64_t sub_1D139F0F4()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_1D139F12C(uint64_t a1)
{
  uint64_t v2 = sub_1D13F2538();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1 + 16;
  uint64_t v8 = sub_1D13834E4();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v8, v2);
  uint64_t v9 = sub_1D13F2508();
  os_log_type_t v10 = sub_1D13F2858();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_1D0FA3000, v9, v10, "Received context heuristics timer rerun", v11, 2u);
    MEMORY[0x1D25F77B0](v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  swift_beginAccess();
  uint64_t v12 = MEMORY[0x1D25F7870](v7);
  if (v12)
  {
    uint64_t v13 = (void *)v12;
    sub_1D139F2C4();
  }
}

void sub_1D139F2BC()
{
  sub_1D139F12C(v0);
}

uint64_t sub_1D139F2C4()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23A30);
  MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1D13F2538();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  os_log_type_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1D13C3040();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v11, v6);
  uint64_t v12 = sub_1D13F2508();
  os_log_type_t v13 = sub_1D13F2858();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_1D0FA3000, v12, v13, "Running ContextHeuristicsScheduler", v14, 2u);
    MEMORY[0x1D25F77B0](v14, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  uint64_t v15 = *(void **)(v1 + OBJC_IVAR___ATXContextHeuristicsScheduler_contextHeuristics);
  uint64_t v16 = (uint64_t *)(v1 + OBJC_IVAR___ATXContextHeuristicsScheduler_repeatInterval);
  swift_beginAccess();
  uint64_t v17 = *v16;
  id v18 = v15;
  uint64_t v19 = os_transaction_create();
  uint64_t v20 = sub_1D13F27D8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v5, 1, 1, v20);
  uint64_t v21 = (void *)swift_allocObject();
  void v21[2] = 0;
  v21[3] = 0;
  v21[4] = v17;
  v21[5] = v18;
  v21[6] = v19;
  id v22 = v18;
  sub_1D1388CB4((uint64_t)v5, (uint64_t)&unk_1EA64DDD8, (uint64_t)v21);

  return swift_release();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t sub_1D139F568()
{
  return sub_1D13F29B8();
}

void sub_1D139F630(uint64_t a1)
{
  uint64_t v2 = sub_1D13F2538();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1 + 16;
  uint64_t v8 = sub_1D13834E4();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v8, v2);
  uint64_t v9 = sub_1D13F2508();
  os_log_type_t v10 = sub_1D13F2858();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_1D0FA3000, v9, v10, "Received notification debug rerun sports", v11, 2u);
    MEMORY[0x1D25F77B0](v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  swift_beginAccess();
  uint64_t v12 = MEMORY[0x1D25F7870](v7);
  if (v12)
  {
    os_log_type_t v13 = (void *)v12;
    sub_1D139F2C4();
  }
}

uint64_t sub_1D139F7C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

void sub_1D139F814()
{
  sub_1D139F92C(v0, "Received notification favorites updated");
}

uint64_t sub_1D139F838(uint64_t a1)
{
  uint64_t v2 = sub_1D13F1E38();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void (**)(char *))(a1 + 32);
  sub_1D13F1E28();
  swift_retain();
  v7(v6);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

void sub_1D139F92C(uint64_t a1, const char *a2)
{
  uint64_t v4 = sub_1D13F2538();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = sub_1D13834E4();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v10, v4);
  uint64_t v11 = sub_1D13F2508();
  os_log_type_t v12 = sub_1D13F2858();
  if (os_log_type_enabled(v11, v12))
  {
    os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v13 = 0;
    _os_log_impl(&dword_1D0FA3000, v11, v12, a2, v13, 2u);
    MEMORY[0x1D25F77B0](v13, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  swift_beginAccess();
  uint64_t v14 = MEMORY[0x1D25F7870](v9);
  if (v14)
  {
    uint64_t v15 = (void *)v14;
    sub_1D139F2C4();
  }
}

void sub_1D139FABC()
{
  sub_1D139F92C(v0, "Received notification sync my sports setting changed");
}

void sub_1D139FAE0()
{
  sub_1D139F630(v0);
}

id ContextHeuristicsScheduler.__deallocating_deinit()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = OBJC_IVAR___ATXContextHeuristicsScheduler_timer;
  if (*(void *)&v0[OBJC_IVAR___ATXContextHeuristicsScheduler_timer])
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1D13F28F8();
    swift_unknownObjectRelease();
  }
  *(void *)&v0[v3] = 0;
  swift_unknownObjectRelease();
  uint64_t v4 = (int *)&v0[OBJC_IVAR___ATXContextHeuristicsScheduler_debugRerunSportsNotificationToken];
  swift_beginAccess();
  if (*v4)
  {
    notify_cancel(*v4);
    int *v4 = 0;
  }
  v6.receiver = v1;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, sel_dealloc);
}

uint64_t sub_1D139FCA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[5] = a4;
  v5[6] = a5;
  uint64_t v6 = sub_1D13F2538();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  v5[10] = swift_task_alloc();
  uint64_t v7 = sub_1D13F1FA8();
  v5[11] = v7;
  v5[12] = *(void *)(v7 - 8);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D139FDE0, 0, 0);
}

uint64_t sub_1D139FDE0()
{
  uint64_t v33 = v0;
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[12];
  uint64_t v5 = v0[10];
  uint64_t v6 = v0[7];
  uint64_t v7 = v0[8];
  sub_1D13F1F88();
  uint64_t v8 = sub_1D13834E4();
  v0[15] = v8;
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v0[16] = v9;
  v0[17] = (v7 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v9(v5, v8, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  uint64_t v10 = sub_1D13F2508();
  os_log_type_t v11 = sub_1D13F2858();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = v0[12];
    uint64_t v25 = v0[11];
    uint64_t v26 = v0[13];
    uint64_t v29 = v0[8];
    uint64_t v30 = v0[7];
    uint64_t v31 = v0[10];
    uint64_t v27 = v0[5];
    uint64_t v13 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v32 = v28;
    *(_DWORD *)uint64_t v13 = 136315394;
    sub_1D13A0650((unint64_t *)&qword_1EBD239C0, MEMORY[0x1E4F27928]);
    uint64_t v14 = sub_1D13F2C48();
    v0[3] = sub_1D138B264(v14, v15, &v32);
    sub_1D13F2978();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v26, v25);
    *(_WORD *)(v13 + 12) = 2048;
    v0[4] = v27;
    sub_1D13F2978();
    _os_log_impl(&dword_1D0FA3000, v10, v11, "Generating sports suggestions: %s, %ld", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D25F77B0](v28, -1, -1);
    MEMORY[0x1D25F77B0](v13, -1, -1);

    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v17(v31, v30);
  }
  else
  {
    uint64_t v18 = v0[10];
    uint64_t v19 = v0[7];
    uint64_t v20 = v0[8];
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v0[12] + 8);
    v16(v0[13], v0[11]);

    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v17(v18, v19);
  }
  v0[18] = v16;
  v0[19] = v17;
  uint64_t v21 = (void *)swift_task_alloc();
  v0[20] = v21;
  *uint64_t v21 = v0;
  v21[1] = sub_1D13A00E4;
  uint64_t v22 = v0[14];
  uint64_t v23 = v0[5];
  return sub_1D139C274(v22, v23);
}

uint64_t sub_1D13A00E4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 16_Block_object_dispose(&STACK[0x210], 8) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_1D13A01E4, 0, 0);
}

uint64_t sub_1D13A01E4()
{
  (*(void (**)(void, void, void))(v0 + 128))(*(void *)(v0 + 72), *(void *)(v0 + 120), *(void *)(v0 + 56));
  swift_bridgeObjectRetain_n();
  uint64_t v1 = sub_1D13F2508();
  os_log_type_t v2 = sub_1D13F2858();
  BOOL v3 = os_log_type_enabled(v1, v2);
  unint64_t v4 = *(void *)(v0 + 168);
  if (v3)
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134217984;
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = sub_1D13F2B88();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v6 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    *(void *)(v0 + 16) = v6;
    sub_1D13F2978();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D0FA3000, v1, v2, "Donating sports suggestions: %ld", v5, 0xCu);
    MEMORY[0x1D25F77B0](v5, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 144);
  uint64_t v8 = *(void *)(v0 + 112);
  uint64_t v9 = *(void *)(v0 + 88);
  uint64_t v10 = *(void **)(v0 + 48);
  (*(void (**)(void, void))(v0 + 152))(*(void *)(v0 + 72), *(void *)(v0 + 56));
  sub_1D1384DE0(0, (unint64_t *)&qword_1EBD23840);
  os_log_type_t v11 = (void *)sub_1D13F2738();
  swift_bridgeObjectRelease();
  uint64_t v12 = (void *)sub_1D13F2678();
  objc_msgSend(v10, sel_donateSuggestions_forHeuristic_, v11, v12);

  v7(v8, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

id ContextHeuristicsScheduler.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void ContextHeuristicsScheduler.init()()
{
}

uint64_t type metadata accessor for ContextHeuristicsScheduler()
{
  return self;
}

uint64_t method lookup function for ContextHeuristicsScheduler(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ContextHeuristicsScheduler);
}

uint64_t dispatch thunk of ContextHeuristicsScheduler.__allocating_init(contextHeuristics:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t sub_1D13A0538()
{
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t sub_1D13A0580()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  unint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_1D138DF50;
  return sub_1D139FCA4((uint64_t)v4, v5, v6, v2, v3);
}

uint64_t sub_1D13A0618()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D13A0650(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D13A0698(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D13A0700()
{
  uint64_t v0 = sub_1D13F2538();
  __swift_allocate_value_buffer(v0, qword_1EBD24928);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EBD24928);
  if (qword_1EBD24360 != -1) {
    swift_once();
  }
  id v1 = (id)qword_1EBD24958;
  return sub_1D13F2548();
}

uint64_t *sub_1D13A078C()
{
  if (qword_1EBD24360 != -1) {
    swift_once();
  }
  return &qword_1EBD24958;
}

uint64_t sub_1D13A07D8()
{
  if (qword_1EBD24358 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_1D13F2538();
  return __swift_project_value_buffer(v0, (uint64_t)qword_1EBD24928);
}

uint64_t sub_1D13A083C@<X0>(uint64_t a1@<X8>)
{
  if (qword_1EBD24358 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D13F2538();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBD24928);
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t sub_1D13A08E4()
{
  sub_1D13A09AC();
  uint64_t result = sub_1D13F2958();
  qword_1EBD24958 = result;
  return result;
}

id sub_1D13A0950()
{
  if (qword_1EBD24360 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1EBD24958;
  return v0;
}

unint64_t sub_1D13A09AC()
{
  unint64_t result = qword_1EBD23A60;
  if (!qword_1EBD23A60)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EBD23A60);
  }
  return result;
}

uint64_t sub_1D13A09EC()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1D13A0A1C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D13A0A24(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*sub_1D13A0A50())()
{
  return nullsub_1;
}

uint64_t sub_1D13A0A70@<X0>(uint64_t a1@<X8>)
{
  return sub_1D1386110(v1 + 24, a1);
}

uint64_t sub_1D13A0A7C(long long *a1)
{
  uint64_t v3 = v1 + 24;
  __swift_destroy_boxed_opaque_existential_0(v3);
  return sub_1D13A0AC0(a1, v3);
}

uint64_t sub_1D13A0AC0(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t (*sub_1D13A0AD8())()
{
  return nullsub_1;
}

uint64_t sub_1D13A0AF8(uint64_t result, char a2, uint64_t a3, char a4)
{
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v4 = result;
    }
    else {
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v4 = -result;
    if (__OFSUB__(0, result))
    {
      __break(1u);
      goto LABEL_13;
    }
  }
  if (a4)
  {
    if (a4 == 1) {
      uint64_t v5 = a3;
    }
    else {
      uint64_t v5 = 0;
    }
    return v4 < v5;
  }
  uint64_t v5 = -a3;
  if (!__OFSUB__(0, a3)) {
    return v4 < v5;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1D13A0B44(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    sub_1D13F2CF8();
  }
  return sub_1D13F2CF8();
}

uint64_t sub_1D13A0B98(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if (a2)
  {
    if (a2 == 1)
    {
      if (a4 != 1) {
        return 0;
      }
      return a1 == a3;
    }
    if (a4 == 2 && !a3) {
      return 1;
    }
  }
  else if (!a4)
  {
    return a1 == a3;
  }
  return 0;
}

uint64_t sub_1D13A0BEC(uint64_t a1, unsigned __int8 a2)
{
  if (a2 <= 1u) {
    sub_1D13F2CF8();
  }
  sub_1D13F2CF8();
  return sub_1D13F2D28();
}

uint64_t sub_1D13A0C64()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + 8);
  sub_1D13F2CE8();
  if (v1 <= 1) {
    sub_1D13F2CF8();
  }
  sub_1D13F2CF8();
  return sub_1D13F2D28();
}

uint64_t sub_1D13A0CDC()
{
  if (!*(unsigned char *)(v0 + 8) || *(unsigned char *)(v0 + 8) == 1) {
    sub_1D13F2CF8();
  }
  return sub_1D13F2CF8();
}

uint64_t sub_1D13A0D2C()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + 8);
  sub_1D13F2CE8();
  if (v1 <= 1) {
    sub_1D13F2CF8();
  }
  sub_1D13F2CF8();
  return sub_1D13F2D28();
}

uint64_t *sub_1D13A0DA0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = *a2;
  if (*((unsigned char *)result + 8))
  {
    if (*((unsigned char *)result + 8) != 1) {
      uint64_t v2 = 0;
    }
  }
  else
  {
    BOOL v4 = __OFSUB__(0, v2);
    uint64_t v2 = -v2;
    if (v4)
    {
      __break(1u);
      goto LABEL_13;
    }
  }
  if (*((unsigned char *)a2 + 8))
  {
    if (*((unsigned char *)a2 + 8) != 1) {
      uint64_t v3 = 0;
    }
    return (uint64_t *)(v2 < v3);
  }
  BOOL v4 = __OFSUB__(0, v3);
  uint64_t v3 = -v3;
  if (!v4) {
    return (uint64_t *)(v2 < v3);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t *sub_1D13A0DF4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = *a2;
  if (*((unsigned char *)a2 + 8))
  {
    if (*((unsigned char *)a2 + 8) != 1) {
      uint64_t v3 = 0;
    }
  }
  else
  {
    BOOL v4 = __OFSUB__(0, v3);
    uint64_t v3 = -v3;
    if (v4)
    {
      __break(1u);
      goto LABEL_13;
    }
  }
  if (*((unsigned char *)result + 8))
  {
    if (*((unsigned char *)result + 8) != 1) {
      uint64_t v2 = 0;
    }
    return (uint64_t *)(v3 >= v2);
  }
  BOOL v4 = __OFSUB__(0, v2);
  uint64_t v2 = -v2;
  if (!v4) {
    return (uint64_t *)(v3 >= v2);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t *sub_1D13A0E48(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = *a2;
  if (*((unsigned char *)result + 8))
  {
    if (*((unsigned char *)result + 8) != 1) {
      uint64_t v2 = 0;
    }
  }
  else
  {
    BOOL v4 = __OFSUB__(0, v2);
    uint64_t v2 = -v2;
    if (v4)
    {
      __break(1u);
      goto LABEL_13;
    }
  }
  if (*((unsigned char *)a2 + 8))
  {
    if (*((unsigned char *)a2 + 8) != 1) {
      uint64_t v3 = 0;
    }
    return (uint64_t *)(v2 >= v3);
  }
  BOOL v4 = __OFSUB__(0, v3);
  uint64_t v3 = -v3;
  if (!v4) {
    return (uint64_t *)(v2 >= v3);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t *sub_1D13A0E9C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = *a2;
  if (*((unsigned char *)a2 + 8))
  {
    if (*((unsigned char *)a2 + 8) != 1) {
      uint64_t v3 = 0;
    }
  }
  else
  {
    BOOL v4 = __OFSUB__(0, v3);
    uint64_t v3 = -v3;
    if (v4)
    {
      __break(1u);
      goto LABEL_13;
    }
  }
  if (*((unsigned char *)result + 8))
  {
    if (*((unsigned char *)result + 8) != 1) {
      uint64_t v2 = 0;
    }
    return (uint64_t *)(v3 < v2);
  }
  BOOL v4 = __OFSUB__(0, v2);
  uint64_t v2 = -v2;
  if (!v4) {
    return (uint64_t *)(v3 < v2);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1D13A0EF0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  int v4 = *((unsigned __int8 *)a2 + 8);
  if (*((unsigned char *)a2 + 8)) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v2 == v3;
  }
  unsigned int v6 = v5;
  BOOL v8 = v4 == 1 && v2 == v3;
  BOOL v10 = v4 == 2 && v3 == 0;
  if (*((unsigned char *)a1 + 8) != 1) {
    BOOL v8 = v10;
  }
  if (*((unsigned char *)a1 + 8)) {
    return v8;
  }
  else {
    return v6;
  }
}

uint64_t sub_1D13A0F38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_1D13F1FA8();
  uint64_t v18 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v9);
  os_log_type_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1D13A10D8(a1);
  if (v13 > 1u)
  {
    if (v13 == 2)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v11, a2, v8);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(a4, v11, v8);
    }
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
    return v16(a4, a2, v8);
  }
  else
  {
    if (v13)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v11, a3, v8);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(a4, v11, v8);
    }
    if ((v12 & 0x8000000000000000) == 0 || (v14 = __OFSUB__(0, v12), uint64_t result = -v12, !v14))
    {
      sub_1D13F1F38();
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(a4, v11, v8);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1D13A10D8(uint64_t result)
{
  uint64_t v1 = result + 56;
  char v2 = *(unsigned char *)(result + 32);
  uint64_t v3 = 1 << v2;
  uint64_t v4 = -1;
  if (1 << v2 < 64) {
    uint64_t v4 = ~(-1 << (1 << v2));
  }
  unint64_t v5 = v4 & *(void *)(result + 56);
  if (v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = __clz(__rbit64(v5));
    unint64_t v8 = (v5 - 1) & v5;
    int64_t v9 = (unint64_t)(v3 + 63) >> 6;
  }
  else
  {
    LODWORD(v6) = v2 & 0x3F;
    if (v6 <= 6) {
      return 0;
    }
    int64_t v9 = (unint64_t)(v3 + 63) >> 6;
    unint64_t v25 = *(void *)(result + 64);
    if (v25)
    {
      uint64_t v6 = 1;
    }
    else
    {
      if (v6 < 8) {
        return 0;
      }
      unint64_t v25 = *(void *)(result + 72);
      if (v25)
      {
        uint64_t v6 = 2;
      }
      else
      {
        unint64_t v25 = *(void *)(result + 80);
        if (v25)
        {
          uint64_t v6 = 3;
        }
        else
        {
LABEL_50:
          if (v6 < 9) {
            return 0;
          }
          unint64_t v25 = *(void *)(result + 88);
          if (v25)
          {
            uint64_t v6 = 4;
          }
          else
          {
            unint64_t v25 = *(void *)(result + 96);
            if (!v25) {
              goto LABEL_56;
            }
            uint64_t v6 = 5;
          }
        }
      }
    }
LABEL_41:
    unint64_t v8 = (v25 - 1) & v25;
    unint64_t v7 = __clz(__rbit64(v25)) + (v6 << 6);
  }
  uint64_t v10 = *(void *)(result + 48);
  os_log_type_t v11 = (uint64_t *)(v10 + 16 * v7);
  uint64_t v12 = *v11;
  LOBYTE(v13) = *((unsigned char *)v11 + 8);
LABEL_6:
  char v14 = v13;
  uint64_t result = v12;
  uint64_t v15 = -v12;
  BOOL v16 = __OFSUB__(0, v12);
  while (v8)
  {
    unint64_t v18 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v19 = v18 | (v6 << 6);
LABEL_29:
    uint64_t v23 = (uint64_t *)(v10 + 16 * v19);
    uint64_t v12 = *v23;
    int v13 = *((unsigned __int8 *)v23 + 8);
    if (v13)
    {
      if (v13 == 1) {
        uint64_t v24 = v12;
      }
      else {
        uint64_t v24 = 0;
      }
    }
    else
    {
      uint64_t v24 = -v12;
      if (__OFSUB__(0, v12)) {
        goto LABEL_49;
      }
    }
    if (v14)
    {
      uint64_t v17 = result;
      if (v14 == 1) {
        goto LABEL_10;
      }
      if (v24 < 0) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v17 = v15;
      if (v16) {
        goto LABEL_48;
      }
LABEL_10:
      if (v24 < v17) {
        goto LABEL_6;
      }
    }
  }
  int64_t v20 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if (v20 >= v9) {
    return result;
  }
  unint64_t v21 = *(void *)(v1 + 8 * v20);
  ++v6;
  if (v21) {
    goto LABEL_28;
  }
  uint64_t v6 = v20 + 1;
  if (v20 + 1 >= v9) {
    return result;
  }
  unint64_t v21 = *(void *)(v1 + 8 * v6);
  if (v21) {
    goto LABEL_28;
  }
  uint64_t v6 = v20 + 2;
  if (v20 + 2 >= v9) {
    return result;
  }
  unint64_t v21 = *(void *)(v1 + 8 * v6);
  if (v21) {
    goto LABEL_28;
  }
  uint64_t v6 = v20 + 3;
  if (v20 + 3 >= v9) {
    return result;
  }
  unint64_t v21 = *(void *)(v1 + 8 * v6);
  if (v21)
  {
LABEL_28:
    unint64_t v8 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v6 << 6);
    goto LABEL_29;
  }
  int64_t v22 = v20 + 4;
  if (v22 >= v9) {
    return result;
  }
  unint64_t v21 = *(void *)(v1 + 8 * v22);
  if (v21)
  {
    uint64_t v6 = v22;
    goto LABEL_28;
  }
  while (1)
  {
    uint64_t v6 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v6 >= v9) {
      return result;
    }
    unint64_t v21 = *(void *)(v1 + 8 * v6);
    ++v22;
    if (v21) {
      goto LABEL_28;
    }
  }
  __break(1u);
LABEL_56:
  uint64_t v26 = 0;
  uint64_t v27 = 6;
  if (v9 > 6) {
    uint64_t v27 = v9;
  }
  uint64_t v28 = v27 - 6;
  while (v28 != v26)
  {
    unint64_t v25 = *(void *)(result + 104 + 8 * v26++);
    if (v25)
    {
      uint64_t v6 = v26 + 5;
      goto LABEL_41;
    }
  }
  return 0;
}

uint64_t sub_1D13A132C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_1D13F1FA8();
  uint64_t v16 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v9);
  os_log_type_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D13A14BC(a1);
  if (v12 <= 1u)
  {
    if (v12) {
      sub_1D13F1F38();
    }
    else {
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v11, a2, v8);
    }
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(a4, v11, v8);
  }
  if (v12 == 2)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v11, a3, v8);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(a4, v11, v8);
  }
  char v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  return v14(a4, a3, v8);
}

uint64_t sub_1D13A14BC(uint64_t result)
{
  uint64_t v1 = result + 56;
  char v2 = *(unsigned char *)(result + 32);
  uint64_t v3 = 1 << v2;
  uint64_t v4 = -1;
  if (1 << v2 < 64) {
    uint64_t v4 = ~(-1 << (1 << v2));
  }
  unint64_t v5 = v4 & *(void *)(result + 56);
  if (v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = __clz(__rbit64(v5));
    unint64_t v8 = (v5 - 1) & v5;
    int64_t v9 = (unint64_t)(v3 + 63) >> 6;
  }
  else
  {
    LODWORD(v6) = v2 & 0x3F;
    if (v6 <= 6) {
      return 0;
    }
    int64_t v9 = (unint64_t)(v3 + 63) >> 6;
    unint64_t v25 = *(void *)(result + 64);
    if (v25)
    {
      uint64_t v6 = 1;
    }
    else
    {
      if (v6 < 8) {
        return 0;
      }
      unint64_t v25 = *(void *)(result + 72);
      if (v25)
      {
        uint64_t v6 = 2;
      }
      else
      {
        unint64_t v25 = *(void *)(result + 80);
        if (v25)
        {
          uint64_t v6 = 3;
        }
        else
        {
LABEL_50:
          if (v6 < 9) {
            return 0;
          }
          unint64_t v25 = *(void *)(result + 88);
          if (v25)
          {
            uint64_t v6 = 4;
          }
          else
          {
            unint64_t v25 = *(void *)(result + 96);
            if (!v25) {
              goto LABEL_56;
            }
            uint64_t v6 = 5;
          }
        }
      }
    }
LABEL_41:
    unint64_t v8 = (v25 - 1) & v25;
    unint64_t v7 = __clz(__rbit64(v25)) + (v6 << 6);
  }
  uint64_t v10 = *(void *)(result + 48);
  os_log_type_t v11 = (uint64_t *)(v10 + 16 * v7);
  uint64_t v12 = *v11;
  LOBYTE(v13) = *((unsigned char *)v11 + 8);
LABEL_6:
  char v14 = v13;
  uint64_t result = v12;
  uint64_t v15 = -v12;
  BOOL v16 = __OFSUB__(0, v12);
  while (v8)
  {
    unint64_t v18 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v19 = v18 | (v6 << 6);
LABEL_29:
    uint64_t v23 = (uint64_t *)(v10 + 16 * v19);
    uint64_t v12 = *v23;
    int v13 = *((unsigned __int8 *)v23 + 8);
    if (v14)
    {
      if (v14 == 1) {
        uint64_t v24 = result;
      }
      else {
        uint64_t v24 = 0;
      }
    }
    else
    {
      uint64_t v24 = v15;
      if (v16) {
        goto LABEL_49;
      }
    }
    if (v13)
    {
      uint64_t v17 = v12;
      if (v13 == 1) {
        goto LABEL_10;
      }
      if (v24 < 0) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v17 = -v12;
      if (__OFSUB__(0, v12)) {
        goto LABEL_48;
      }
LABEL_10:
      if (v24 < v17) {
        goto LABEL_6;
      }
    }
  }
  int64_t v20 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if (v20 >= v9) {
    return result;
  }
  unint64_t v21 = *(void *)(v1 + 8 * v20);
  ++v6;
  if (v21) {
    goto LABEL_28;
  }
  uint64_t v6 = v20 + 1;
  if (v20 + 1 >= v9) {
    return result;
  }
  unint64_t v21 = *(void *)(v1 + 8 * v6);
  if (v21) {
    goto LABEL_28;
  }
  uint64_t v6 = v20 + 2;
  if (v20 + 2 >= v9) {
    return result;
  }
  unint64_t v21 = *(void *)(v1 + 8 * v6);
  if (v21) {
    goto LABEL_28;
  }
  uint64_t v6 = v20 + 3;
  if (v20 + 3 >= v9) {
    return result;
  }
  unint64_t v21 = *(void *)(v1 + 8 * v6);
  if (v21)
  {
LABEL_28:
    unint64_t v8 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v6 << 6);
    goto LABEL_29;
  }
  int64_t v22 = v20 + 4;
  if (v22 >= v9) {
    return result;
  }
  unint64_t v21 = *(void *)(v1 + 8 * v22);
  if (v21)
  {
    uint64_t v6 = v22;
    goto LABEL_28;
  }
  while (1)
  {
    uint64_t v6 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v6 >= v9) {
      return result;
    }
    unint64_t v21 = *(void *)(v1 + 8 * v6);
    ++v22;
    if (v21) {
      goto LABEL_28;
    }
  }
  __break(1u);
LABEL_56:
  uint64_t v26 = 0;
  uint64_t v27 = 6;
  if (v9 > 6) {
    uint64_t v27 = v9;
  }
  uint64_t v28 = v27 - 6;
  while (v28 != v26)
  {
    unint64_t v25 = *(void *)(result + 104 + 8 * v26++);
    if (v25)
    {
      uint64_t v6 = v26 + 5;
      goto LABEL_41;
    }
  }
  return 0;
}

uint64_t sub_1D13A1710@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, long long *a4@<X3>, void *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  return sub_1D13A0AC0(a4, (uint64_t)(a5 + 3));
}

uint64_t sub_1D13A1724@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SportsDependencies(0) + 20);
  uint64_t v4 = sub_1D13F1FA8();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for SportsDependencies(uint64_t a1)
{
  return sub_1D13A1ED4(a1, (uint64_t *)&unk_1EA64F480);
}

uint64_t sub_1D13A17BC(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SportsDependencies(0) + 20);
  uint64_t v4 = sub_1D13F1FA8();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*sub_1D13A1834())(void)
{
  return nullsub_1;
}

uint64_t sub_1D13A187C()
{
  return sub_1D13F25F8();
}

uint64_t sub_1D13A1928(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (!v4 && (sub_1D13F2C58() & 1) == 0) {
    return 0;
  }
  uint64_t v5 = *(int *)(type metadata accessor for SportsDependencies(0) + 20);
  return MEMORY[0x1F40E52C0]((char *)a1 + v5, (char *)a2 + v5);
}

uint64_t sub_1D13A19A4()
{
  return sub_1D13F2D28();
}

uint64_t sub_1D13A1A68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  uint64_t v5 = (char *)a4 + *(int *)(type metadata accessor for SportsDependencies(0) + 20);
  uint64_t v6 = sub_1D13F1FA8();
  unint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  return v7(v5, a3, v6);
}

uint64_t sub_1D13A1AE8()
{
  return sub_1D13F2D28();
}

uint64_t sub_1D13A1BA8()
{
  return sub_1D13F25F8();
}

uint64_t sub_1D13A1C58()
{
  return sub_1D13F2D28();
}

uint64_t sub_1D13A1D14(void *a1, void *a2, uint64_t a3)
{
  BOOL v6 = *a1 == *a2 && a1[1] == a2[1];
  if (!v6 && (sub_1D13F2C58() & 1) == 0) {
    return 0;
  }
  uint64_t v7 = *(int *)(a3 + 20);
  return MEMORY[0x1F40E52C0]((char *)a1 + v7, (char *)a2 + v7);
}

void *sub_1D13A1D98()
{
  return &unk_1E68B6C88;
}

unint64_t sub_1D13A1DA4()
{
  return 0xD000000000000024;
}

uint64_t sub_1D13A1DC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1D13F1FA8();
  BOOL v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t sub_1D13A1E28(uint64_t a1)
{
  uint64_t v3 = sub_1D13F1FA8();
  BOOL v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t sub_1D13A1E90()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SportsContextEntry(0) + 20));
}

uint64_t type metadata accessor for SportsContextEntry(uint64_t a1)
{
  return sub_1D13A1ED4(a1, qword_1EA64F490);
}

uint64_t sub_1D13A1ED4(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1D13A1F0C(char a1)
{
  uint64_t result = type metadata accessor for SportsContextEntry(0);
  *(unsigned char *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*sub_1D13A1F3C())(void)
{
  return nullsub_1;
}

uint64_t sub_1D13A1F84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SportsContextEntry(0) + 24);
  return sub_1D13A1FC8(v3, a1);
}

uint64_t sub_1D13A1FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SportsDependencies(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D13A202C(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SportsContextEntry(0) + 24);
  return sub_1D13A2070(a1, v3);
}

uint64_t sub_1D13A2070(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SportsDependencies(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_1D13A20D4())(void)
{
  return nullsub_1;
}

uint64_t sub_1D13A211C@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_1D13F1FA8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t v9 = type metadata accessor for SportsContextEntry(0);
  *(unsigned char *)(a4 + *(int *)(v9 + 20)) = a2;
  uint64_t v10 = a4 + *(int *)(v9 + 24);
  return sub_1D13A21B8(a3, v10);
}

uint64_t sub_1D13A21B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SportsDependencies(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D13A221C()
{
  return sub_1D13F2C48();
}

unint64_t sub_1D13A234C()
{
  unint64_t result = qword_1EA64DE68;
  if (!qword_1EA64DE68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA64DE68);
  }
  return result;
}

uint64_t sub_1D13A23A0()
{
  return sub_1D13A23E8(&qword_1EA64DE70, (void (*)(uint64_t))type metadata accessor for SportsDependencies);
}

uint64_t sub_1D13A23E8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for SpotlightContextSuggestionEntry(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_0(a1 + 24);
}

uint64_t initializeWithCopy for SpotlightContextSuggestionEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = a2 + 24;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x210], 8) = v5;
  uint64_t v6 = v5;
  uint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7(a1 + 24, v4, v6);
  return a1;
}

void *assignWithCopy for SpotlightContextSuggestionEntry(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1(a1 + 3, a2 + 3);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        uint64_t *v3 = v12;
      }
      else
      {
        os_log_type_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          uint64_t *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x210], 8) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SpotlightContextSuggestionEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpotlightContextSuggestionEntry(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SpotlightContextSuggestionEntry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x210], 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(&STACK[0x210], 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpotlightContextSuggestionEntry()
{
  return &type metadata for SpotlightContextSuggestionEntry;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + _Block_object_dispose(&STACK[0x210], 8) = *((unsigned char *)a2 + 8);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for SpotlightContextSuggestionEntry.ValidTimeframe(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SpotlightContextSuggestionEntry.ValidTimeframe(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + _Block_object_dispose(&STACK[0x210], 8) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + _Block_object_dispose(&STACK[0x210], 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1D13A297C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1D13A2994(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + _Block_object_dispose(&STACK[0x210], 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SpotlightContextSuggestionEntry.ValidTimeframe()
{
  return &type metadata for SpotlightContextSuggestionEntry.ValidTimeframe;
}

uint64_t sub_1D13A29BC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_1D13A29D0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t *sub_1D13A29E4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    uint64_t *v3 = *a2;
    unsigned int v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = sub_1D13F1FA8();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_1D13A2ACC(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_1D13F1FA8();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *sub_1D13A2B44(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_1D13F1FA8();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *sub_1D13A2BDC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1D13F1FA8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *sub_1D13A2C78(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_1D13F1FA8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_1D13A2CF4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_1D13F1FA8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_1D13A2D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1D13A2D94);
}

uint64_t sub_1D13A2D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1D13F1FA8();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1D13A2E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1D13A2E58);
}

uint64_t sub_1D13A2E58(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + _Block_object_dispose(&STACK[0x210], 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1D13F1FA8();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1D13A2F00()
{
  uint64_t result = sub_1D13F1FA8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *sub_1D13A2F98(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1D13F1FA8();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 24);
    a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = *(void *)&a2[v9];
    uint64_t v13 = *(void *)&a2[v9 + 8];
    *(void *)uint64_t v10 = v12;
    *((void *)v10 + 1) = v13;
    uint64_t v14 = *(int *)(type metadata accessor for SportsDependencies(0) + 20);
    uint64_t v15 = &v10[v14];
    BOOL v16 = &v11[v14];
    swift_bridgeObjectRetain();
    v8(v15, v16, v7);
  }
  return a1;
}

uint64_t sub_1D13A30BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D13F1FA8();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v8)((void *)(v4 - 8), a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v6 = v5 + *(int *)(type metadata accessor for SportsDependencies(0) + 20);
  return v8(v6, v4);
}

uint64_t sub_1D13A3174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D13F1FA8();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = a2 + v8;
  uint64_t v11 = *(void *)(a2 + v8 + 8);
  void *v9 = *(void *)(a2 + v8);
  v9[1] = v11;
  uint64_t v12 = *(int *)(type metadata accessor for SportsDependencies(0) + 20);
  uint64_t v13 = (char *)v9 + v12;
  uint64_t v14 = v10 + v12;
  swift_bridgeObjectRetain();
  v7((uint64_t)v13, v14, v6);
  return a1;
}

char *sub_1D13A3248(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_1D13F1FA8();
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  *(void *)uint64_t v9 = *(void *)v10;
  *((void *)v9 + 1) = *((void *)v10 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = type metadata accessor for SportsDependencies(0);
  v7(&v9[*(int *)(v11 + 20)], &v10[*(int *)(v11 + 20)], v6);
  return a1;
}

uint64_t sub_1D13A3328(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_1D13F1FA8();
  uint64_t v7 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = a2[*(int *)(a3 + 20)];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = &a2[v8];
  *(_OWORD *)(a1 + v_Block_object_dispose(&STACK[0x210], 8) = *(_OWORD *)v10;
  uint64_t v11 = type metadata accessor for SportsDependencies(0);
  v7(v9 + *(int *)(v11 + 20), &v10[*(int *)(v11 + 20)], v6);
  return a1;
}

char *sub_1D13A33E4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_1D13F1FA8();
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = *((void *)v10 + 1);
  *(void *)uint64_t v9 = *(void *)v10;
  *((void *)v9 + 1) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = type metadata accessor for SportsDependencies(0);
  v7(&v9[*(int *)(v12 + 20)], &v10[*(int *)(v12 + 20)], v6);
  return a1;
}

uint64_t sub_1D13A34A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1D13A34BC);
}

uint64_t sub_1D13A34BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D13F1FA8();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 254)
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v11 = type metadata accessor for SportsDependencies(0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 24);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_1D13A35F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1D13A3608);
}

uint64_t sub_1D13A3608(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1D13F1FA8();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 254)
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
  else
  {
    uint64_t v11 = type metadata accessor for SportsDependencies(0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 24);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t sub_1D13A3730()
{
  uint64_t result = sub_1D13F1FA8();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for SportsDependencies(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

id sub_1D13A3800()
{
  uint64_t v1 = OBJC_IVAR____TtC21AppPredictionInternal26ContextualSuggestionServer____lazy_storage___xpcListener;
  unint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC21AppPredictionInternal26ContextualSuggestionServer____lazy_storage___xpcListener);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC21AppPredictionInternal26ContextualSuggestionServer____lazy_storage___xpcListener);
  }
  else
  {
    sub_1D13F22D8();
    id v4 = objc_allocWithZone(MEMORY[0x1E4F29290]);
    uint64_t v5 = (void *)sub_1D13F2678();
    swift_bridgeObjectRelease();
    id v6 = objc_msgSend(v4, sel_initWithMachServiceName_, v5);

    objc_msgSend(v6, sel_setDelegate_, v0);
    uint64_t v7 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v6;
    id v3 = v6;

    unint64_t v2 = 0;
  }
  id v8 = v2;
  return v3;
}

uint64_t sub_1D13A38C8()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23880);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = MEMORY[0x1E4FBC870];
  return result;
}

id sub_1D13A3904(uint64_t a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_1D13A3948(a1, a2);
}

id sub_1D13A3948(uint64_t a1, void *a2)
{
  uint64_t v5 = sub_1D13F2538();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v2[OBJC_IVAR____TtC21AppPredictionInternal26ContextualSuggestionServer____lazy_storage___xpcListener] = 0;
  uint64_t v10 = OBJC_IVAR____TtC21AppPredictionInternal26ContextualSuggestionServer_lock;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23880);
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = MEMORY[0x1E4FBC870];
  *(_DWORD *)(v11 + 24) = 0;
  *(void *)(v11 + 16) = v12;
  *(void *)&v2[v10] = v11;
  *(void *)&v2[OBJC_IVAR____TtC21AppPredictionInternal26ContextualSuggestionServer_contextStore] = a1;
  *(void *)&v2[OBJC_IVAR____TtC21AppPredictionInternal26ContextualSuggestionServer_suggestionStore] = a2;
  uint64_t v13 = (objc_class *)type metadata accessor for ContextualSuggestionServer();
  v24.receiver = v2;
  v24.super_class = v13;
  swift_retain();
  id v14 = a2;
  id v15 = objc_msgSendSuper2(&v24, sel_init);
  uint64_t v16 = sub_1D13A07D8();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v16, v5);
  uint64_t v17 = sub_1D13F2508();
  os_log_type_t v18 = sub_1D13F2858();
  if (os_log_type_enabled(v17, v18))
  {
    unint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v19 = 0;
    _os_log_impl(&dword_1D0FA3000, v17, v18, "ContextualSuggestionServer init", v19, 2u);
    MEMORY[0x1D25F77B0](v19, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  if (a1)
  {
    int64_t v20 = *(void (**)(id, _UNKNOWN **))(*(void *)a1 + 184);
    swift_retain();
    id v21 = v15;
    v20(v15, &off_1F2730150);
    swift_release();
  }
  id v22 = sub_1D13A3800();
  objc_msgSend(v22, sel_resume);

  swift_release();
  return v15;
}

uint64_t type metadata accessor for ContextualSuggestionServer()
{
  return self;
}

void sub_1D13A3BE4()
{
  swift_getObjectType();
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC21AppPredictionInternal26ContextualSuggestionServer_lock);
  unint64_t v2 = (uint64_t *)&v1[4];
  id v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1D13A57A0(v2);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_1D13A3C50(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v62 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23A30);
  MEMORY[0x1F4188790](v5 - 8, v6);
  uint64_t v61 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_1D13F2538();
  uint64_t v53 = *(void *)(v54 - 8);
  MEMORY[0x1F4188790](v54, v8);
  uint64_t v52 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  if ((*a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1D13F29E8();
    sub_1D13A74BC();
    sub_1D13A7534();
    sub_1D13F2808();
    uint64_t v10 = v74[4];
    uint64_t v59 = v74[5];
    uint64_t v11 = v74[6];
    int64_t v12 = v74[7];
    unint64_t v13 = v74[8];
  }
  else
  {
    uint64_t v14 = -1 << *(unsigned char *)(v10 + 32);
    uint64_t v15 = *(void *)(v10 + 56);
    uint64_t v59 = v10 + 56;
    uint64_t v16 = ~v14;
    uint64_t v17 = -v14;
    if (v17 < 64) {
      uint64_t v18 = ~(-1 << v17);
    }
    else {
      uint64_t v18 = -1;
    }
    unint64_t v13 = v18 & v15;
    swift_bridgeObjectRetain();
    uint64_t v11 = v16;
    int64_t v12 = 0;
  }
  uint64_t v57 = v10 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v55 = v11;
  int64_t v58 = (unint64_t)(v11 + 64) >> 6;
  uint64_t v64 = v74;
  uint64_t v63 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v60 = MEMORY[0x1E4FBC848] + 8;
  uint64_t v56 = MEMORY[0x1E4FBC838] + 8;
  while (v10 < 0)
  {
    uint64_t v22 = sub_1D13F2A18();
    if (!v22) {
      return sub_1D13A758C();
    }
    uint64_t v72 = v22;
    sub_1D13A74BC();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v23 = (id)aBlock[0];
    swift_unknownObjectRelease();
    int64_t v21 = v12;
    uint64_t v19 = v13;
    if (!v23) {
      return sub_1D13A758C();
    }
LABEL_26:
    v74[2] = sub_1D13A4480;
    v74[3] = 0;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    v74[0] = sub_1D13A46C0;
    v74[1] = &block_descriptor_20;
    uint64_t v26 = _Block_copy(aBlock);
    id v27 = objc_msgSend(v23, sel_remoteObjectProxyWithErrorHandler_, v26);
    _Block_release(v26);
    sub_1D13F29A8();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64DF90);
    if ((swift_dynamicCast() & 1) == 0)
    {
      uint64_t v46 = sub_1D13A07D8();
      (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v52, v46, v54);
      uint64_t v47 = sub_1D13F2508();
      os_log_type_t v48 = sub_1D13F2838();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v49 = 0;
        _os_log_impl(&dword_1D0FA3000, v47, v48, "ContextualSuggestionServer: error casting remote object to interface", v49, 2u);
        MEMORY[0x1D25F77B0](v49, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v53 + 8))(v52, v54);
      return sub_1D13A758C();
    }
    unint64_t v65 = v19;
    int64_t v67 = v21;
    uint64_t v28 = v72;
    uint64_t v29 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v62
                                                                     + OBJC_IVAR____TtC21AppPredictionInternal26ContextualSuggestionServer_suggestionStore))
                               + 0xB0))();
    uint64_t v30 = *(void *)(sub_1D13A4AEC(v29) + 16);
    id v66 = v23;
    if (v30)
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_1EA64D9A8);
      uint64_t v31 = sub_1D13F2BB8();
    }
    else
    {
      uint64_t v31 = MEMORY[0x1E4FBC868];
    }
    uint64_t v32 = v10;
    aBlock[0] = v31;
    uint64_t v33 = (void *)swift_bridgeObjectRetain();
    sub_1D1393A34(v33, 1, aBlock);
    if (v3) {
      goto LABEL_50;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v34 = aBlock[0];
    uint64_t v35 = sub_1D13F27D8();
    uint64_t v36 = *(void *)(v35 - 8);
    uint64_t v37 = (uint64_t)v61;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56))(v61, 1, 1, v35);
    unint64_t v38 = (void *)swift_allocObject();
    v38[2] = 0;
    v38[3] = 0;
    void v38[4] = v28;
    uint64_t v38[5] = v34;
    int v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v37, 1, v35);
    swift_unknownObjectRetain();
    if (v39 == 1)
    {
      sub_1D138FC1C(v37);
    }
    else
    {
      sub_1D13F27C8();
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v35);
    }
    uint64_t v3 = 0;
    if (v38[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v40 = sub_1D13F27B8();
      uint64_t v42 = v41;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v40 = 0;
      uint64_t v42 = 0;
    }
    uint64_t v44 = v66;
    int64_t v43 = v67;
    if (v42 | v40)
    {
      uint64_t v68 = 0;
      uint64_t v69 = 0;
      uint64_t v70 = v40;
      uint64_t v71 = v42;
    }
    swift_task_create();

    swift_unknownObjectRelease();
    swift_release();
    int64_t v12 = v43;
    unint64_t v13 = v65;
    uint64_t v10 = v32;
  }
  if (v13)
  {
    uint64_t v19 = (v13 - 1) & v13;
    unint64_t v20 = __clz(__rbit64(v13)) | (v12 << 6);
    int64_t v21 = v12;
LABEL_25:
    id v23 = *(id *)(*(void *)(v10 + 48) + 8 * v20);
    if (!v23) {
      return sub_1D13A758C();
    }
    goto LABEL_26;
  }
  int64_t v21 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v21 >= v58) {
      return sub_1D13A758C();
    }
    unint64_t v24 = *(void *)(v59 + 8 * v21);
    if (!v24)
    {
      int64_t v25 = v12 + 2;
      if (v12 + 2 >= v58) {
        return sub_1D13A758C();
      }
      unint64_t v24 = *(void *)(v59 + 8 * v25);
      if (v24) {
        goto LABEL_23;
      }
      int64_t v25 = v12 + 3;
      if (v12 + 3 >= v58) {
        return sub_1D13A758C();
      }
      unint64_t v24 = *(void *)(v59 + 8 * v25);
      if (v24)
      {
LABEL_23:
        int64_t v21 = v25;
      }
      else
      {
        int64_t v21 = v12 + 4;
        if (v12 + 4 >= v58) {
          return sub_1D13A758C();
        }
        unint64_t v24 = *(void *)(v59 + 8 * v21);
        if (!v24)
        {
          int64_t v45 = v12 + 5;
          while (v58 != v45)
          {
            unint64_t v24 = *(void *)(v59 + 8 * v45++);
            if (v24)
            {
              int64_t v21 = v45 - 1;
              goto LABEL_24;
            }
          }
          return sub_1D13A758C();
        }
      }
    }
LABEL_24:
    uint64_t v19 = (v24 - 1) & v24;
    unint64_t v20 = __clz(__rbit64(v24)) + (v21 << 6);
    goto LABEL_25;
  }
  __break(1u);
LABEL_50:
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_1D13A4480(void *a1)
{
  uint64_t v2 = sub_1D13F2538();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1D13A07D8();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v7, v2);
  id v8 = a1;
  id v9 = a1;
  uint64_t v10 = sub_1D13F2508();
  os_log_type_t v11 = sub_1D13F2838();
  if (os_log_type_enabled(v10, v11))
  {
    int64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v18 = v13;
    *(_DWORD *)int64_t v12 = 136315138;
    v17[1] = v12 + 4;
    swift_getErrorValue();
    uint64_t v14 = sub_1D13F2C98();
    v17[2] = sub_1D138B264(v14, v15, &v18);
    sub_1D13F2978();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1D0FA3000, v10, v11, "ContextualSuggestionServer: error grabbing remote object proxy: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1D25F77B0](v13, -1, -1);
    MEMORY[0x1D25F77B0](v12, -1, -1);
  }
  else
  {
  }
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

void sub_1D13A46C0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_1D13A4728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 120) = a4;
  *(void *)(v5 + 12_Block_object_dispose(&STACK[0x210], 8) = a5;
  return MEMORY[0x1F4188298](sub_1D13A4748, 0, 0);
}

uint64_t sub_1D13A4748()
{
  uint64_t v1 = (void *)v0[15];
  sub_1D13F23A8();
  uint64_t v2 = sub_1D13F25D8();
  v0[17] = v2;
  v0[2] = v0;
  v0[3] = sub_1D13A4870;
  uint64_t v3 = swift_continuation_init();
  v0[10] = MEMORY[0x1E4F143A8];
  v0[11] = 0x40000000;
  v0[12] = sub_1D13A4A54;
  v0[13] = &block_descriptor_25;
  v0[14] = v3;
  objc_msgSend(v1, sel_updateWith_completionHandler_, v2, v0 + 10);
  return MEMORY[0x1F41881E8](v0 + 2);
}

uint64_t sub_1D13A4870()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 144) = v1;
  if (v1) {
    uint64_t v2 = sub_1D13A49E4;
  }
  else {
    uint64_t v2 = sub_1D13A4980;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1D13A4980()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D13A49E4()
{
  uint64_t v1 = *(void **)(v0 + 136);
  swift_willThrow();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1D13A4A54(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD23900);
    uint64_t v4 = swift_allocError();
    void *v5 = a2;
    id v6 = a2;
    return MEMORY[0x1F4188208](v2, v4);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    return MEMORY[0x1F4188200](v7);
  }
}

uint64_t sub_1D13A4AEC(uint64_t a1)
{
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v6 = 0;
  uint64_t v7 = (void *)MEMORY[0x1E4FBC860];
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v8 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  for (unint64_t i = v8 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v6 << 6))
  {
    uint64_t v13 = *(void **)(*(void *)(a1 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    id v14 = v13;
    uint64_t v15 = sub_1D13F2718();
    uint64_t v17 = v16;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1D13A57BC(0, v7[2] + 1, 1, v7);
      uint64_t v7 = (void *)result;
    }
    unint64_t v19 = v7[2];
    unint64_t v18 = v7[3];
    if (v19 >= v18 >> 1)
    {
      uint64_t result = (uint64_t)sub_1D13A57BC((void *)(v18 > 1), v19 + 1, 1, v7);
      uint64_t v7 = (void *)result;
    }
    v7[2] = v19 + 1;
    unint64_t v20 = &v7[3 * v19];
    v20[4] = v15;
    v20[5] = v17;
    v20[6] = v14;
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v10 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v10 >= v22) {
      goto LABEL_27;
    }
    unint64_t v11 = *(void *)(v21 + 8 * v10);
    ++v6;
    if (!v11)
    {
      int64_t v6 = v10 + 1;
      if (v10 + 1 >= v22) {
        goto LABEL_27;
      }
      unint64_t v11 = *(void *)(v21 + 8 * v6);
      if (!v11)
      {
        int64_t v6 = v10 + 2;
        if (v10 + 2 >= v22) {
          goto LABEL_27;
        }
        unint64_t v11 = *(void *)(v21 + 8 * v6);
        if (!v11)
        {
          int64_t v6 = v10 + 3;
          if (v10 + 3 >= v22) {
            goto LABEL_27;
          }
          unint64_t v11 = *(void *)(v21 + 8 * v6);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v4 = (v11 - 1) & v11;
  }
  int64_t v12 = v10 + 4;
  if (v12 >= v22)
  {
LABEL_27:
    swift_release();
    return (uint64_t)v7;
  }
  unint64_t v11 = *(void *)(v21 + 8 * v12);
  if (v11)
  {
    int64_t v6 = v12;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v6 >= v22) {
      goto LABEL_27;
    }
    unint64_t v11 = *(void *)(v21 + 8 * v6);
    ++v12;
    if (v11) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1D13A4D44(uint64_t a1, void *a2)
{
  return sub_1D13A6C18(a2);
}

uint64_t sub_1D13A4D4C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1D13F2538();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  unint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 16;
  uint64_t v10 = sub_1D13A07D8();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v10, v4);
  unint64_t v11 = sub_1D13F2508();
  os_log_type_t v12 = sub_1D13F2838();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_1D0FA3000, v11, v12, "ContextualSuggestionServer: connection interrupted", v13, 2u);
    MEMORY[0x1D25F77B0](v13, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  objc_msgSend(a1, sel_invalidate);
  swift_beginAccess();
  uint64_t result = MEMORY[0x1D25F7870](v9);
  if (result)
  {
    uint64_t v15 = (void *)result;
    uint64_t v16 = *(os_unfair_lock_s **)(result + OBJC_IVAR____TtC21AppPredictionInternal26ContextualSuggestionServer_lock);
    swift_retain();

    MEMORY[0x1F4188790](v17, v18);
    *(&v19 - 2) = (uint64_t)a1;
    os_unfair_lock_lock(v16 + 6);
    sub_1D13A74FC();
    os_unfair_lock_unlock(v16 + 6);
    return swift_release();
  }
  return result;
}

uint64_t sub_1D13A4F58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D13F2538();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  unint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = sub_1D13A07D8();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v10, v4);
  unint64_t v11 = sub_1D13F2508();
  os_log_type_t v12 = sub_1D13F2858();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_1D0FA3000, v11, v12, "ContextualSuggestionServer: connection invalidated", v13, 2u);
    MEMORY[0x1D25F77B0](v13, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  swift_beginAccess();
  uint64_t result = MEMORY[0x1D25F7870](v9);
  if (result)
  {
    uint64_t v15 = (void *)result;
    uint64_t v16 = *(os_unfair_lock_s **)(result + OBJC_IVAR____TtC21AppPredictionInternal26ContextualSuggestionServer_lock);
    swift_retain();

    MEMORY[0x1F4188790](v17, v18);
    *(&v19 - 2) = a2;
    os_unfair_lock_lock(v16 + 6);
    sub_1D13A7698();
    os_unfair_lock_unlock(v16 + 6);
    return swift_release();
  }
  return result;
}

uint64_t sub_1D13A51B4(uint64_t a1, void (*a2)(void, void))
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_1D13F2538();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1D13A07D8();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v10, v5);
  unint64_t v11 = sub_1D13F2508();
  os_log_type_t v12 = sub_1D13F2858();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_1D0FA3000, v11, v12, "ContextualSuggestionServer: requestSnapshots(forEndpoints:completion:)", v13, 2u);
    MEMORY[0x1D25F77B0](v13, -1, -1);
  }

  uint64_t v14 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **(void **)(v3
                                                                                 + OBJC_IVAR____TtC21AppPredictionInternal26ContextualSuggestionServer_suggestionStore))
                                           + 0xB0))(v14);
  if (*(void *)(sub_1D13A4AEC(v15) + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_1EA64D9A8);
    uint64_t v16 = sub_1D13F2BB8();
  }
  else
  {
    uint64_t v16 = MEMORY[0x1E4FBC868];
  }
  v19[0] = v16;
  uint64_t v17 = (void *)swift_bridgeObjectRetain();
  sub_1D1393A34(v17, 1, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a2(v19[0], 0);
  return swift_release();
}

uint64_t sub_1D13A547C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_1D13F2538();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1D13A07D8();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v10, v5);
  swift_bridgeObjectRetain();
  unint64_t v11 = sub_1D13F2508();
  os_log_type_t v12 = sub_1D13F2858();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 134217984;
    v16[1] = *(void *)(a2 + 16);
    sub_1D13F2978();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D0FA3000, v11, v12, "contextualEngine didUpdateActiveContexts: %ld", v13, 0xCu);
    MEMORY[0x1D25F77B0](v13, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  uint64_t v14 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x90))(v14);
}

void sub_1D13A566C()
{
}

id sub_1D13A56CC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ContextualSuggestionServer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1D13A576C()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t sub_1D13A57A0(uint64_t *a1)
{
  return sub_1D13A3C50(a1, *(void *)(v1 + 16));
}

void *sub_1D13A57BC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64DA40);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      os_log_type_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      os_log_type_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1D13A6B08(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D13A58E4(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = sub_1D13F2A08();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_1D13A74BC();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v26;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = sub_1D13F29F8();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v21 = sub_1D13A5B64(v7, result + 1);
    uint64_t v27 = v21;
    if (*(void *)(v21 + 24) <= *(void *)(v21 + 16))
    {
      id v25 = v8;
      sub_1D13A5D4C();
      uint64_t v22 = v27;
    }
    else
    {
      uint64_t v22 = v21;
      id v23 = v8;
    }
    sub_1D13A5FEC((uint64_t)v8, v22);
    uint64_t *v3 = v22;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_1D13F2928();
    uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v13 = v11 & ~v12;
    if ((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
    {
      sub_1D13A74BC();
      id v14 = *(id *)(*(void *)(v6 + 48) + 8 * v13);
      char v15 = sub_1D13F2938();

      if (v15)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v19 = *(void **)(*(void *)(*v2 + 48) + 8 * v13);
        *a1 = v19;
        id v20 = v19;
        return 0;
      }
      uint64_t v16 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v16;
        if (((*(void *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
          break;
        }
        id v17 = *(id *)(*(void *)(v6 + 48) + 8 * v13);
        char v18 = sub_1D13F2938();

        if (v18) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    id v8 = a2;
    sub_1D13A6070((uint64_t)v8, v13, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v28;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_1D13A5B64(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA64DF78);
    uint64_t v2 = sub_1D13F2A58();
    uint64_t v14 = v2;
    sub_1D13F29E8();
    if (sub_1D13F2A18())
    {
      sub_1D13A74BC();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          sub_1D13A5D4C();
          uint64_t v2 = v14;
        }
        uint64_t result = sub_1D13F2928();
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v_Block_object_dispose(&STACK[0x210], 8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (sub_1D13F2A18());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E4FBC870];
  }
  return v2;
}

uint64_t sub_1D13A5D4C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA64DF78);
  uint64_t v3 = sub_1D13F2A48();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v28 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v28;
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      uint64_t result = sub_1D13F2928();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

unint64_t sub_1D13A5FEC(uint64_t a1, uint64_t a2)
{
  sub_1D13F2928();
  unint64_t result = sub_1D13F29D8();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

void sub_1D13A6070(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1D13A5D4C();
  }
  else
  {
    if (v7 > v6)
    {
      sub_1D13A61E8();
      goto LABEL_14;
    }
    sub_1D13A6394();
  }
  uint64_t v8 = *v3;
  uint64_t v9 = sub_1D13F2928();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    sub_1D13A74BC();
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = sub_1D13F2938();

    if (v12)
    {
LABEL_13:
      sub_1D13F2C78();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = sub_1D13F2938();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

id sub_1D13A61E8()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA64DF78);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1D13F2A38();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1D13A6394()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA64DF78);
  uint64_t v3 = sub_1D13F2A48();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v27 = v0;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    id v19 = *(id *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = sub_1D13F2928();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v10 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v27;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1D13A6610(void *a1)
{
  uint64_t v3 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    id v4 = a1;
    char v5 = sub_1D13F2A28();

    if (v5)
    {
      uint64_t v6 = sub_1D13A67D8();
      swift_bridgeObjectRelease();
      return v6;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1D13F2928();
  uint64_t v8 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
    goto LABEL_12;
  }
  sub_1D13A74BC();
  id v10 = *(id *)(*(void *)(v3 + 48) + 8 * v9);
  char v11 = sub_1D13F2938();

  if ((v11 & 1) == 0)
  {
    uint64_t v12 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v12;
      if (((*(void *)(v3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_12;
      }
      id v13 = *(id *)(*(void *)(v3 + 48) + 8 * v9);
      char v14 = sub_1D13F2938();
    }
    while ((v14 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v16 = *v1;
  uint64_t v18 = *v1;
  uint64_t *v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1D13A61E8();
    uint64_t v16 = v18;
  }
  uint64_t v6 = *(void *)(*(void *)(v16 + 48) + 8 * v9);
  sub_1D13A6964(v9);
  uint64_t *v1 = v18;
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1D13A67D8()
{
  uint64_t v1 = v0;
  swift_bridgeObjectRelease();
  uint64_t v2 = sub_1D13F29F8();
  uint64_t v3 = swift_unknownObjectRetain();
  uint64_t v4 = sub_1D13A5B64(v3, v2);
  uint64_t v15 = v4;
  swift_retain();
  uint64_t v5 = sub_1D13F2928();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if ((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
  {
    sub_1D13A74BC();
    id v8 = *(id *)(*(void *)(v4 + 48) + 8 * v7);
    char v9 = sub_1D13F2938();

    if (v9)
    {
LABEL_6:
      swift_release();
      uint64_t v13 = *(void *)(*(void *)(v4 + 48) + 8 * v7);
      sub_1D13A6964(v7);
      if (sub_1D13F2938())
      {
        uint64_t *v1 = v15;
        return v13;
      }
      __break(1u);
    }
    else
    {
      uint64_t v10 = ~v6;
      while (1)
      {
        unint64_t v7 = (v7 + 1) & v10;
        if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
          break;
        }
        id v11 = *(id *)(*(void *)(v4 + 48) + 8 * v7);
        char v12 = sub_1D13F2938();

        if (v12) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

unint64_t sub_1D13A6964(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = sub_1D13F29C8();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        id v10 = *(id *)(*(void *)(v3 + 48) + 8 * v6);
        uint64_t v11 = sub_1D13F2928();

        unint64_t v12 = v11 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= (uint64_t)v12)
          {
LABEL_16:
            uint64_t v15 = *(void *)(v3 + 48);
            uint64_t v16 = (void *)(v15 + 8 * v2);
            unint64_t v17 = (void *)(v15 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v16 >= v17 + 1))
            {
              void *v16 = *v17;
              int64_t v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v18 = *(void *)(v3 + 16);
  BOOL v19 = __OFSUB__(v18, 1);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_1D13A6B08(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64DA48);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1D13F2BC8();
  __break(1u);
  return result;
}

uint64_t sub_1D13A6C18(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1D13F2538();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1D13A07D8();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v9, v4);
  id v10 = sub_1D13F2508();
  os_log_type_t v11 = sub_1D13F2858();
  if (os_log_type_enabled(v10, v11))
  {
    unint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v12 = 0;
    _os_log_impl(&dword_1D0FA3000, v10, v11, "ContextualSuggestionServer: incoming connection", v12, 2u);
    MEMORY[0x1D25F77B0](v12, -1, -1);
  }

  uint64_t v13 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  MEMORY[0x1F4188790](v13, v14);
  *(&v28 - 2) = (uint64_t)a1;
  uint64_t v16 = v15 + 6;
  os_unfair_lock_lock(v15 + 6);
  sub_1D13A738C();
  os_unfair_lock_unlock(v16);
  unint64_t v17 = (void *)sub_1D13F22C8();
  objc_msgSend(a1, sel_setRemoteObjectInterface_, v17);

  uint64_t v18 = (void *)sub_1D13F22B8();
  objc_msgSend(a1, sel_setExportedInterface_, v18);

  objc_msgSend(a1, sel_setExportedObject_, v2);
  uint64_t v19 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a1;
  *(void *)(v20 + 24) = v19;
  uint64_t v33 = sub_1D13A7454;
  uint64_t v34 = v20;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v30 = 1107296256;
  uint64_t v31 = sub_1D13859D0;
  uint64_t v32 = &block_descriptor_4;
  unint64_t v21 = _Block_copy(&aBlock);
  id v22 = a1;
  swift_release();
  objc_msgSend(v22, sel_setInterruptionHandler_, v21);
  _Block_release(v21);
  uint64_t v23 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v23;
  *(void *)(v24 + 24) = v22;
  uint64_t v33 = sub_1D13A74B4;
  uint64_t v34 = v24;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v30 = 1107296256;
  uint64_t v31 = sub_1D13859D0;
  uint64_t v32 = &block_descriptor_17;
  BOOL v25 = _Block_copy(&aBlock);
  id v26 = v22;
  swift_release();
  objc_msgSend(v26, sel_setInvalidationHandler_, v25);
  _Block_release(v25);
  objc_msgSend(v26, sel_resume);
  return 1;
}

unint64_t sub_1D13A6FDC()
{
  unint64_t result = qword_1EA64DEA0;
  if (!qword_1EA64DEA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA64DEA0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ContextualSuggestionServerError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1D13A70CCLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContextualSuggestionServerError()
{
  return &type metadata for ContextualSuggestionServerError;
}

void sub_1D13A7104(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D13F2538();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1D13A07D8();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v9, v4);
  id v10 = sub_1D13F2508();
  os_log_type_t v11 = sub_1D13F2858();
  if (os_log_type_enabled(v10, v11))
  {
    unint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v12 = 0;
    _os_log_impl(&dword_1D0FA3000, v10, v11, "ContextualSuggestionServer: requestSnapshots(forEndpoints:completion:)", v12, 2u);
    MEMORY[0x1D25F77B0](v12, -1, -1);
  }

  uint64_t v13 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **(void **)(a1
                                                                                 + OBJC_IVAR____TtC21AppPredictionInternal26ContextualSuggestionServer_suggestionStore))
                                           + 0xB0))(v13);
  if (*(void *)(sub_1D13A4AEC(v14) + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_1EA64D9A8);
    uint64_t v15 = sub_1D13F2BB8();
  }
  else
  {
    uint64_t v15 = MEMORY[0x1E4FBC868];
  }
  v18[0] = v15;
  uint64_t v16 = (void *)swift_bridgeObjectRetain();
  sub_1D1393A34(v16, 1, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1D13F23A8();
  unint64_t v17 = (void *)sub_1D13F25D8();
  (*(void (**)(uint64_t, void *, void))(a2 + 16))(a2, v17, 0);
  swift_release();
}

void sub_1D13A738C()
{
  sub_1D13A58E4(&v1, *(id *)(v0 + 16));
}

uint64_t sub_1D13A73DC()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1D13A7414()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D13A7454()
{
  return sub_1D13A4D4C(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t sub_1D13A7474()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D13A74B4()
{
  return sub_1D13A4F58(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t sub_1D13A74BC()
{
  unint64_t result = qword_1EA64DF70;
  if (!qword_1EA64DF70)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EA64DF70);
  }
  return result;
}

void sub_1D13A74FC()
{
}

unint64_t sub_1D13A7534()
{
  unint64_t result = qword_1EA64DF88;
  if (!qword_1EA64DF88)
  {
    sub_1D13A74BC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA64DF88);
  }
  return result;
}

uint64_t sub_1D13A758C()
{
  return swift_release();
}

uint64_t sub_1D13A7594()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1D13A75DC()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + _Block_object_dispose(&STACK[0x210], 8) = sub_1D138DF50;
  *(_OWORD *)(v2 + 120) = v3;
  return MEMORY[0x1F4188298](sub_1D13A4748, 0, 0);
}

void sub_1D13A7698()
{
}

uint64_t sub_1D13A76B4()
{
  type metadata accessor for MeetingContextDependencies(0);
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for MeetingContextDependencies(uint64_t a1)
{
  return sub_1D13A1ED4(a1, (uint64_t *)&unk_1EA64F8B0);
}

uint64_t sub_1D13A7708@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1D13A77C8(a1, a2, type metadata accessor for MeetingContextDependencies, a3);
}

uint64_t sub_1D13A7720@<X0>(uint64_t a1@<X8>)
{
  return sub_1D13A7D44(v1 + OBJC_IVAR____TtC21AppPredictionInternal14MeetingContext_dependencies, a1, type metadata accessor for MeetingContext.Dependencies);
}

uint64_t type metadata accessor for MeetingContext.Dependencies(uint64_t a1)
{
  return sub_1D13A1ED4(a1, (uint64_t *)&unk_1EA64F8D0);
}

id sub_1D13A777C()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for MeetingContext.Dependencies(0) + 20));
  return v1;
}

uint64_t sub_1D13A77B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1D13A77C8(a1, a2, type metadata accessor for MeetingContext.Dependencies, a3);
}

uint64_t sub_1D13A77C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_1D13F1FA8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t result = a3(0);
  *(void *)(a4 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t sub_1D13A784C(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  sub_1D13AB21C(a1, v2 + OBJC_IVAR____TtC21AppPredictionInternal14MeetingContext_dependencies, type metadata accessor for MeetingContext.Dependencies);
  return v2;
}

uint64_t sub_1D13A78AC(uint64_t a1)
{
  sub_1D13AB21C(a1, v1 + OBJC_IVAR____TtC21AppPredictionInternal14MeetingContext_dependencies, type metadata accessor for MeetingContext.Dependencies);
  return v1;
}

uint64_t sub_1D13A78E8()
{
  return sub_1D13F26A8();
}

uint64_t sub_1D13A7920()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t sub_1D13A7990()
{
  sub_1D13A8368(v0 + OBJC_IVAR____TtC21AppPredictionInternal14MeetingContext_dependencies, type metadata accessor for MeetingContext.Dependencies);
  return v0;
}

uint64_t sub_1D13A79CC()
{
  sub_1D13A8368(v0 + OBJC_IVAR____TtC21AppPredictionInternal14MeetingContext_dependencies, type metadata accessor for MeetingContext.Dependencies);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t sub_1D13A7A44()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_1D13A7A58()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t sub_1D13A7A9C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))() & 1;
}

uint64_t sub_1D13A7AE4@<X0>(uint64_t a1@<X8>)
{
  return sub_1D13A7D44(*v1 + OBJC_IVAR____TtC21AppPredictionInternal14MeetingContext_dependencies, a1, type metadata accessor for MeetingContext.Dependencies);
}

uint64_t sub_1D13A7B24@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 96))();
  *a1 = result;
  return result;
}

uint64_t sub_1D13A7B5C@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for MeetingContext(0);
  sub_1D13A9A9C((unint64_t *)&qword_1EA64D888, (void (*)(uint64_t))type metadata accessor for MeetingContext);
  uint64_t result = sub_1D1387790();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1D13A7BD4()
{
  sub_1D13A95C4();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1D142D040;
  uint64_t result = type metadata accessor for MeetingContextStore.GenericMeetingContext(0);
  *(void *)(v0 + 32) = result;
  qword_1EA650010 = v0;
  return result;
}

uint64_t *sub_1D13A7C34()
{
  if (qword_1EA64F620 != -1) {
    swift_once();
  }
  return &qword_1EA650010;
}

uint64_t sub_1D13A7C80()
{
  if (qword_1EA64F620 != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D13A7CDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21AppPredictionInternal19MeetingContextStore_dependencies;
  swift_beginAccess();
  return sub_1D13A7D44(v3, a1, type metadata accessor for MeetingContextDependencies);
}

uint64_t sub_1D13A7D44(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1D13A7DAC(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21AppPredictionInternal19MeetingContextStore_dependencies;
  swift_beginAccess();
  sub_1D13A7E08(a1, v3);
  return swift_endAccess();
}

uint64_t sub_1D13A7E08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MeetingContextDependencies(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_1D13A7E6C())()
{
  return j__swift_endAccess;
}

uint64_t sub_1D13A7EC8(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  sub_1D13A7D44(a1, v2 + OBJC_IVAR____TtC21AppPredictionInternal19MeetingContextStore_dependencies, type metadata accessor for MeetingContextDependencies);
  unint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for MeetingContextDependencies(0) + 20));
  _OWORD v6[2] = a1;
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_1D13A81F8((void (*)(uint64_t *__return_ptr, id *))sub_1D13A817C, (uint64_t)v6, v3);
  swift_bridgeObjectRelease();
  sub_1D13A8368(a1, type metadata accessor for MeetingContextDependencies);
  *(void *)(v2 + OBJC_IVAR____TtC21AppPredictionInternal19MeetingContextStore_contexts) = v4;
  return v2;
}

uint64_t sub_1D13A7FAC(uint64_t a1)
{
  sub_1D13A7D44(a1, v1 + OBJC_IVAR____TtC21AppPredictionInternal19MeetingContextStore_dependencies, type metadata accessor for MeetingContextDependencies);
  unint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for MeetingContextDependencies(0) + 20));
  _OWORD v6[2] = a1;
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_1D13A81F8((void (*)(uint64_t *__return_ptr, id *))sub_1D13AB284, (uint64_t)v6, v3);
  swift_bridgeObjectRelease();
  sub_1D13A8368(a1, type metadata accessor for MeetingContextDependencies);
  *(void *)(v1 + OBJC_IVAR____TtC21AppPredictionInternal19MeetingContextStore_contexts) = v4;
  return v1;
}

uint64_t sub_1D13A8078@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for MeetingContext.Dependencies(0);
  uint64_t v7 = v6 - 8;
  MEMORY[0x1F4188790](v6, v8);
  id v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v11 = *a1;
  uint64_t v12 = sub_1D13F1FA8();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, a2, v12);
  *(void *)&v10[*(int *)(v7 + 28)] = v11;
  type metadata accessor for MeetingContextStore.GenericMeetingContext(0);
  uint64_t v13 = swift_allocObject();
  id v14 = v11;
  uint64_t v15 = sub_1D13A9624(v10, v13);
  uint64_t result = swift_release();
  *a3 = v15;
  return result;
}

uint64_t sub_1D13A817C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1D13A8078(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_1D13A81A8(char *a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = sub_1D13A9624(a1, v2);
  swift_release();
  return v3;
}

uint64_t sub_1D13A81F8(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62) {
    goto LABEL_16;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = MEMORY[0x1E4FBC860];
    if (!v6) {
      break;
    }
    uint64_t v13 = MEMORY[0x1E4FBC860];
    uint64_t result = sub_1D13F2B08();
    if (v6 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v8 = 0;
    while (v6 != v8)
    {
      if ((a3 & 0xC000000000000001) != 0) {
        id v9 = (id)MEMORY[0x1D25F54B0](v8, a3);
      }
      else {
        id v9 = *(id *)(a3 + 8 * v8 + 32);
      }
      id v10 = v9;
      id v11 = v9;
      a1(&v12, &v11);

      if (v3) {
        return swift_release();
      }
      ++v8;
      sub_1D13F2AE8();
      sub_1D13F2B18();
      sub_1D13F2B28();
      sub_1D13F2AF8();
      if (v6 == v8) {
        return v13;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_1D13F2B88();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1D13A8368(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1D13A83C8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D13A8414(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC21AppPredictionInternal19MeetingContextStore_contexts);
  swift_beginAccess();
  void *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1D13A8468())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1D13A84C4(char *a1)
{
  uint64_t v2 = sub_1D13A9624(a1, v1);
  swift_release();
  return v2;
}

uint64_t sub_1D13A84F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  *a7 = a1;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  uint64_t v10 = type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata(0);
  id v11 = (char *)a7 + *(int *)(v10 + 24);
  uint64_t v12 = sub_1D13F1FA8();
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32);
  ((void (*)(void *__return_ptr, char *, uint64_t, uint64_t))v15)((void *)(v12 - 8), v11, a5, v12);
  uint64_t v13 = (char *)a7 + *(int *)(v10 + 28);
  return v15(v13, a6, v12);
}

uint64_t sub_1D13A85C8@<X0>(uint64_t a1@<X8>)
{
  return sub_1D13A7D44(v1 + OBJC_IVAR____TtCC21AppPredictionInternal19MeetingContextStore21GenericMeetingContext_metadata, a1, type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata);
}

uint64_t sub_1D13A8604()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1D13A8634@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata(0) + 24);
  uint64_t v4 = sub_1D13F1FA8();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t sub_1D13A86AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata(0) + 28);
  uint64_t v4 = sub_1D13F1FA8();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

BOOL sub_1D13A8724(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1D13A8738()
{
  return sub_1D13F2D28();
}

uint64_t sub_1D13A8780()
{
  return sub_1D13F2CF8();
}

uint64_t sub_1D13A87AC()
{
  return sub_1D13F2D28();
}

uint64_t sub_1D13A87F0()
{
  uint64_t result = 0x656C746974;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6E6F697461636F6CLL;
      break;
    case 2:
      uint64_t result = 0x7461447472617473;
      break;
    case 3:
      uint64_t result = 0x65746144646E65;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D13A8880@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1D13AB05C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1D13A88A8()
{
  return 0;
}

void sub_1D13A88B4(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1D13A88C0(uint64_t a1)
{
  unint64_t v2 = sub_1D13A9A48();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1D13A88FC(uint64_t a1)
{
  unint64_t v2 = sub_1D13A9A48();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1D13A8938(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64DFB0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v5);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D13A9A48();
  sub_1D13F2D58();
  char v13 = 0;
  sub_1D13F2C18();
  if (!v1)
  {
    char v12 = 1;
    sub_1D13F2C08();
    type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata(0);
    char v11 = 2;
    sub_1D13F1FA8();
    sub_1D13A9A9C(&qword_1EA64DFB8, MEMORY[0x1E4F27928]);
    sub_1D13F2C28();
    char v10 = 3;
    sub_1D13F2C28();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1D13A8B58@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v34 = sub_1D13F1FA8();
  uint64_t v32 = *(void *)(v34 - 8);
  MEMORY[0x1F4188790](v34, v3);
  uint64_t v31 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5, v6);
  uint64_t v8 = (char *)&v27 - v7;
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64DFC0);
  uint64_t v33 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35, v9);
  char v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata(0);
  MEMORY[0x1F4188790](v12, v13);
  uint64_t v15 = (uint64_t *)((char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1D13A9A48();
  uint64_t v16 = (uint64_t)v36;
  sub_1D13F2D48();
  if (v16) {
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  uint64_t v17 = v8;
  uint64_t v36 = a1;
  uint64_t v19 = v33;
  uint64_t v18 = v34;
  char v40 = 0;
  uint64_t v20 = v35;
  *uint64_t v15 = sub_1D13F2BE8();
  v15[1] = v21;
  char v39 = 1;
  v15[2] = sub_1D13F2BD8();
  v15[3] = v22;
  char v38 = 2;
  sub_1D13A9A9C(&qword_1EA64DFC8, MEMORY[0x1E4F27928]);
  uint64_t v29 = 0;
  sub_1D13F2BF8();
  uint64_t v27 = v15;
  uint64_t v28 = v12;
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
  v23((char *)v15 + *(int *)(v12 + 24), v17, v18);
  char v37 = 3;
  uint64_t v24 = v31;
  sub_1D13F2BF8();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v20);
  uint64_t v25 = (uint64_t)v27;
  v23((char *)v27 + *(int *)(v28 + 28), v24, v18);
  sub_1D13A7D44(v25, v30, type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v36);
  return sub_1D13A8368(v25, type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata);
}

uint64_t sub_1D13A8FD0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1D13A8B58(a1, a2);
}

uint64_t sub_1D13A8FE8(void *a1)
{
  return sub_1D13A8938(a1);
}

uint64_t sub_1D13A9000()
{
  uint64_t v1 = sub_1D13F1FA8();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1, v3);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6, v7);
  uint64_t v9 = (char *)&v18 - v8;
  uint64_t v19 = sub_1D13F1E18();
  uint64_t v10 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19, v11);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = v0 + OBJC_IVAR____TtCC21AppPredictionInternal19MeetingContextStore21GenericMeetingContext_metadata;
  uint64_t v15 = type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata(0);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v16(v9, v14 + *(int *)(v15 + 24), v1);
  v16(v5, v14 + *(int *)(v15 + 28), v1);
  sub_1D13F1DF8();
  LOBYTE(v1) = sub_1D13F1E08();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v19);
  return v1 & 1;
}

uint64_t sub_1D13A91EC()
{
  return 0x7261646E656C6143;
}

uint64_t sub_1D13A9210()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28C10]), sel_init);
  objc_msgSend(v0, sel_setDateStyle_, 0);
  objc_msgSend(v0, sel_setTimeStyle_, 1);
  sub_1D13F2A78();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1D13F26F8();
  swift_bridgeObjectRelease();
  sub_1D13F26F8();
  type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata(0);
  uint64_t v1 = (void *)sub_1D13F1F48();
  id v2 = objc_msgSend(v0, sel_stringFromDate_, v1);

  sub_1D13F2688();
  sub_1D13F26F8();

  swift_bridgeObjectRelease();
  return 34;
}

uint64_t sub_1D13A9378()
{
  return sub_1D13A8368(v0 + OBJC_IVAR____TtCC21AppPredictionInternal19MeetingContextStore21GenericMeetingContext_metadata, type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata);
}

uint64_t sub_1D13A93B0()
{
  sub_1D13A8368(v0 + OBJC_IVAR____TtC21AppPredictionInternal14MeetingContext_dependencies, type metadata accessor for MeetingContext.Dependencies);
  sub_1D13A8368(v0 + OBJC_IVAR____TtCC21AppPredictionInternal19MeetingContextStore21GenericMeetingContext_metadata, type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata);
  return v0;
}

uint64_t sub_1D13A9410()
{
  sub_1D13A8368(v0 + OBJC_IVAR____TtC21AppPredictionInternal14MeetingContext_dependencies, type metadata accessor for MeetingContext.Dependencies);
  sub_1D13A8368(v0 + OBJC_IVAR____TtCC21AppPredictionInternal19MeetingContextStore21GenericMeetingContext_metadata, type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t sub_1D13A94AC()
{
  sub_1D13A8368(v0 + OBJC_IVAR____TtC21AppPredictionInternal19MeetingContextStore_dependencies, type metadata accessor for MeetingContextDependencies);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1D13A94F8()
{
  sub_1D13A8368(v0 + OBJC_IVAR____TtC21AppPredictionInternal19MeetingContextStore_dependencies, type metadata accessor for MeetingContextDependencies);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t sub_1D13A9580()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t sub_1D13A95C4()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64DFA8);
  if (swift_isClassType()) {
    uint64_t v1 = v0;
  }
  else {
    uint64_t v1 = 0;
  }
  if (v1) {
    uint64_t v2 = &qword_1EA64D850;
  }
  else {
    uint64_t v2 = (uint64_t *)&unk_1EA64DFD8;
  }
  return __swift_instantiateConcreteTypeFromMangledName(v2);
}

uint64_t sub_1D13A9624(char *a1, uint64_t a2)
{
  uint64_t v4 = sub_1D13F1FA8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD239C8);
  MEMORY[0x1F4188790](v9 - 8, v10);
  uint64_t v52 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12, v13);
  uint64_t v15 = (char *)&v43 - v14;
  uint64_t v16 = type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata(0);
  MEMORY[0x1F4188790](v16, v17);
  uint64_t v19 = (uint64_t *)((char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = *(void **)&a1[*(int *)(type metadata accessor for MeetingContext.Dependencies(0) + 20)];
  swift_retain();
  id v21 = objc_msgSend(v20, sel_title);
  if (!v21)
  {
    __break(1u);
LABEL_11:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v15, 1, 1, v4);
    goto LABEL_12;
  }
  uint64_t v22 = v21;
  uint64_t v23 = sub_1D13F2688();
  uint64_t v47 = v24;
  uint64_t v48 = v23;

  id v25 = objc_msgSend(v20, sel_location);
  if (v25)
  {
    id v26 = v25;
    uint64_t v27 = sub_1D13F2688();
    uint64_t v45 = v28;
    uint64_t v46 = v27;
  }
  else
  {
    uint64_t v45 = 0;
    uint64_t v46 = 0;
  }
  uint64_t v49 = v16;
  uint64_t v50 = (void (*)(void, void, void, void))a1;
  uint64_t v51 = a2;
  id v29 = objc_msgSend(v20, sel_startDate);
  if (!v29) {
    goto LABEL_11;
  }
  uint64_t v30 = v29;
  sub_1D13F1F78();

  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
  v31(v15, v8, v4);
  a1 = *(char **)(v5 + 56);
  ((void (*)(char *, void, uint64_t, uint64_t))a1)(v15, 0, 1, v4);
  uint64_t v32 = v15;
  uint64_t v33 = *(unsigned int (**)(void))(v5 + 48);
  uint64_t v44 = v32;
  if (v33() == 1)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  id v34 = objc_msgSend(v20, sel_endDate);
  if (!v34)
  {
LABEL_13:
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))a1)(v52, 1, 1, v4);
    goto LABEL_14;
  }
  uint64_t v35 = v34;
  sub_1D13F1F78();

  uint64_t v36 = v52;
  v31(v52, v8, v4);
  ((void (*)(char *, void, uint64_t, uint64_t))a1)(v36, 0, 1, v4);
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v33)(v36, 1, v4);
  if (result != 1)
  {
    uint64_t v38 = v49;
    uint64_t v39 = v47;
    *uint64_t v19 = v48;
    v19[1] = v39;
    char v40 = v44;
    uint64_t v41 = v45;
    void v19[2] = v46;
    v19[3] = v41;
    v31((char *)v19 + *(int *)(v38 + 24), v40, v4);
    v31((char *)v19 + *(int *)(v38 + 28), v36, v4);
    uint64_t v42 = v51;
    sub_1D13AB21C((uint64_t)v19, v51 + OBJC_IVAR____TtCC21AppPredictionInternal19MeetingContextStore21GenericMeetingContext_metadata, type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata);
    sub_1D13AB21C((uint64_t)v50, v42 + OBJC_IVAR____TtC21AppPredictionInternal14MeetingContext_dependencies, type metadata accessor for MeetingContext.Dependencies);
    return v42;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata(uint64_t a1)
{
  return sub_1D13A1ED4(a1, qword_1EA64F900);
}

unint64_t sub_1D13A9A48()
{
  unint64_t result = qword_1EA64F628[0];
  if (!qword_1EA64F628[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EA64F628);
  }
  return result;
}

uint64_t sub_1D13A9A9C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D13A9AE4(uint64_t a1)
{
  uint64_t result = sub_1D13A9A9C(&qword_1EA64DFD0, (void (*)(uint64_t))type metadata accessor for MeetingContext);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = result;
  return result;
}

uint64_t type metadata accessor for MeetingContext(uint64_t a1)
{
  return sub_1D13A1ED4(a1, (uint64_t *)&unk_1EA64F8C0);
}

uint64_t sub_1D13A9B5C()
{
  return sub_1D13A9A9C((unint64_t *)&qword_1EA64D888, (void (*)(uint64_t))type metadata accessor for MeetingContext);
}

uint64_t *sub_1D13A9BA4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1D13F1FA8();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1D13A9C74(uint64_t a1)
{
  uint64_t v2 = sub_1D13F1FA8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D13A9CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D13F1FA8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1D13A9D68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D13F1FA8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D13A9DF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D13F1FA8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1D13A9E7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm);
}

uint64_t sub_1D13A9E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm);
}

uint64_t sub_1D13A9EAC()
{
  return sub_1D13AA45C();
}

uint64_t sub_1D13A9EBC()
{
  return type metadata accessor for MeetingContext(0);
}

uint64_t sub_1D13A9EC4()
{
  uint64_t result = type metadata accessor for MeetingContext.Dependencies(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1D13A9F54(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1D13F1FA8();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v_Block_object_dispose(&STACK[0x210], 8) = (uint64_t)v9;
    id v10 = v9;
  }
  return a1;
}

void sub_1D13AA024(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D13F1FA8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = *(void **)(a1 + *(int *)(a2 + 20));
}

uint64_t sub_1D13AA098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D13F1FA8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v8;
  id v9 = v8;
  return a1;
}

uint64_t sub_1D13AA118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D13F1FA8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  id v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  return a1;
}

uint64_t sub_1D13AA1A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D13F1FA8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1D13AA21C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D13F1FA8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  return a1;
}

uint64_t sub_1D13AA2A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1D13AA2B4);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D13F1FA8();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1D13AA378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1D13AA38C);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1D13F1FA8();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1D13AA44C()
{
  return sub_1D13AA45C();
}

uint64_t sub_1D13AA45C()
{
  uint64_t result = sub_1D13F1FA8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1D13AA4EC()
{
  return type metadata accessor for MeetingContextStore(0);
}

uint64_t type metadata accessor for MeetingContextStore(uint64_t a1)
{
  return sub_1D13A1ED4(a1, (uint64_t *)&unk_1EA64F8E0);
}

uint64_t sub_1D13AA514()
{
  uint64_t result = type metadata accessor for MeetingContextDependencies(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1D13AA5B0()
{
  return type metadata accessor for MeetingContextStore.GenericMeetingContext(0);
}

uint64_t type metadata accessor for MeetingContextStore.GenericMeetingContext(uint64_t a1)
{
  return sub_1D13A1ED4(a1, (uint64_t *)&unk_1EA64F8F0);
}

uint64_t sub_1D13AA5D8()
{
  uint64_t result = type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

char *sub_1D13AA668(char *a1, char *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *(void *)a2;
    *(void *)uint64_t v4 = *(void *)a2;
    uint64_t v4 = (char *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *((void *)a2 + 1);
    *(void *)a1 = *(void *)a2;
    *((void *)a1 + 1) = v7;
    uint64_t v8 = *((void *)a2 + 3);
    *((void *)a1 + 2) = *((void *)a2 + 2);
    *((void *)a1 + 3) = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    unint64_t v10 = &a1[v9];
    uint64_t v11 = &a2[v9];
    uint64_t v12 = sub_1D13F1FA8();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    v13(&v4[*(int *)(a3 + 28)], &a2[*(int *)(a3 + 28)], v12);
  }
  return v4;
}

uint64_t sub_1D13AA78C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_1D13F1FA8();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v8)((void *)(v5 - 8), v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  return v8(v6, v5);
}

char *sub_1D13AA844(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = v6;
  uint64_t v7 = *((void *)a2 + 3);
  *((void *)a1 + 2) = *((void *)a2 + 2);
  *((void *)a1 + 3) = v7;
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = &a1[v8];
  unint64_t v10 = &a2[v8];
  uint64_t v11 = sub_1D13F1FA8();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  v12(&a1[*(int *)(a3 + 28)], &a2[*(int *)(a3 + 28)], v11);
  return a1;
}

char *sub_1D13AA918(char *a1, char *a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = *((void *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 2) = *((void *)a2 + 2);
  *((void *)a1 + 3) = *((void *)a2 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_1D13F1FA8();
  unint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v10(&a1[*(int *)(a3 + 28)], &a2[*(int *)(a3 + 28)], v9);
  return a1;
}

char *sub_1D13AAA04(char *a1, char *a2, uint64_t a3)
{
  long long v6 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = &a1[v7];
  uint64_t v9 = &a2[v7];
  uint64_t v10 = sub_1D13F1FA8();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v11(&a1[*(int *)(a3 + 28)], &a2[*(int *)(a3 + 28)], v10);
  return a1;
}

char *sub_1D13AAAB8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *((void *)a2 + 3);
  *((void *)a1 + 2) = *((void *)a2 + 2);
  *((void *)a1 + 3) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = sub_1D13F1FA8();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v12(&a1[*(int *)(a3 + 28)], &a2[*(int *)(a3 + 28)], v11);
  return a1;
}

uint64_t sub_1D13AAB84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1D13AAB98);
}

uint64_t sub_1D13AAB98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1D13F1FA8();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1D13AAC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1D13AAC5C);
}

uint64_t sub_1D13AAC5C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + _Block_object_dispose(&STACK[0x210], 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1D13F1FA8();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1D13AAD04()
{
  uint64_t result = sub_1D13F1FA8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MeetingContextStore.GenericMeetingContext.Metadata.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for MeetingContextStore.GenericMeetingContext.Metadata.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1D13AAF0CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t sub_1D13AAF34(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1D13AAF3C(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for MeetingContextStore.GenericMeetingContext.Metadata.CodingKeys()
{
  return &type metadata for MeetingContextStore.GenericMeetingContext.Metadata.CodingKeys;
}

unint64_t sub_1D13AAF58()
{
  unint64_t result = qword_1EA64FA10[0];
  if (!qword_1EA64FA10[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EA64FA10);
  }
  return result;
}

unint64_t sub_1D13AAFB0()
{
  unint64_t result = qword_1EA64FB20;
  if (!qword_1EA64FB20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA64FB20);
  }
  return result;
}

unint64_t sub_1D13AB008()
{
  unint64_t result = qword_1EA64FB28[0];
  if (!qword_1EA64FB28[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EA64FB28);
  }
  return result;
}

uint64_t sub_1D13AB05C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C746974 && a2 == 0xE500000000000000;
  if (v2 || (sub_1D13F2C58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000 || (sub_1D13F2C58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7461447472617473 && a2 == 0xE900000000000065 || (sub_1D13F2C58() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65746144646E65 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_1D13F2C58();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1D13AB21C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1D13AB284@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1D13A817C(a1, a2);
}

uint64_t sub_1D13AB29C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_1D13F1FD8();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D13F1FC8();
  sub_1D13F1FB8();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  (*(void (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  if (v2) {
    return swift_bridgeObjectRelease();
  }
  id v11 = objc_allocWithZone((Class)sub_1D13F22F8());
  return sub_1D13F22E8();
}

uint64_t sub_1D13AB3F4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_1D13AB408(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_1D13AB430(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

char *sub_1D13AB458()
{
  return aSports;
}

uint64_t sub_1D13AB464()
{
  swift_beginAccess();
  uint64_t v0 = *(void *)aSports;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_1D13AB4B8(uint64_t a1, uint64_t a2)
{
  *(void *)aSports = a1;
  qword_1EA64DFE8 = a2;
  return swift_bridgeObjectRelease();
}

void *sub_1D13AB514()
{
  return &unk_1D142D330;
}

uint64_t sub_1D13AB520()
{
  return 180;
}

uint64_t sub_1D13AB528()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD23890);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1D142D040;
  unint64_t v1 = (uint64_t *)sub_1D13A1D98();
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  *(void *)(inited + 32) = v3;
  *(void *)(inited + 40) = v2;
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_1D13AB7F8(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v4;
}

_OWORD *sub_1D13AB5BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64DFF0);
  MEMORY[0x1F4188790](v6 - 8, v7);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SportsDependencies(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v12);
  uint64_t v14 = (uint64_t *)((char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1D138E0F0(a3, (uint64_t)v32);
  int v15 = swift_dynamicCast();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (v15)
  {
    v16(v9, 0, 1, v10);
    sub_1D13A21B8((uint64_t)v9, (uint64_t)v14);
    uint64_t v17 = *v14;
    swift_bridgeObjectRetain();
    uint64_t v18 = nullsub_1(v17);
    uint64_t v20 = v19;
    swift_bridgeObjectRetain();
    uint64_t v21 = sub_1D13AB9FC((uint64_t)&unk_1F2730398);
    uint64_t v30 = &type metadata for SportsSuggestion;
    uint64_t v31 = &off_1F272F510;
    *(void *)&long long v29 = v18;
    *((void *)&v29 + 1) = v20;
    sub_1D13A1710(a1, a2, v21, &v29, v32);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64DFF8);
    uint64_t v22 = (_OWORD *)swift_allocObject();
    long long v23 = v32[0];
    long long v24 = v32[1];
    v22[1] = xmmword_1D142D040;
    v22[2] = v23;
    long long v25 = v32[2];
    long long v26 = v32[3];
    v22[3] = v24;
    v22[4] = v25;
    v22[5] = v26;
    sub_1D13ABB90((uint64_t)v14);
  }
  else
  {
    v16(v9, 1, 1, v10);
    sub_1D13AB99C((uint64_t)v9);
    return (_OWORD *)MEMORY[0x1E4FBC860];
  }
  return v22;
}

uint64_t sub_1D13AB7F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA64DA90);
    uint64_t v3 = sub_1D13F2A68();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      sub_1D13F2CE8();
      swift_bridgeObjectRetain();
      sub_1D13F26E8();
      uint64_t result = sub_1D13F2D28();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        uint64_t v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (uint64_t result = sub_1D13F2C58(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            uint64_t result = sub_1D13F2C58();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      uint64_t v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      *uint64_t v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return MEMORY[0x1E4FBC870];
}

uint64_t sub_1D13AB99C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64DFF0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1D13AB9FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64E000);
    uint64_t v3 = sub_1D13F2A68();
    uint64_t v4 = v3 + 56;
    uint64_t v22 = a1 + 32;
    sub_1D13ABC10();
    uint64_t v5 = 0;
    uint64_t v21 = v1;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v22 + 16 * v5);
      uint64_t v7 = *v6;
      char v8 = *((unsigned char *)v6 + 8);
      uint64_t result = sub_1D13F25E8();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v4 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v20 = v7;
        uint64_t v15 = ~v10;
        sub_1D13A234C();
        while (1)
        {
          uint64_t result = sub_1D13F2648();
          if (result) {
            break;
          }
          unint64_t v11 = (v11 + 1) & v15;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v4 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
          {
            uint64_t v7 = v20;
            goto LABEL_9;
          }
        }
      }
      else
      {
LABEL_9:
        *(void *)(v4 + 8 * v12) = v14 | v13;
        uint64_t v16 = *(void *)(v3 + 48) + 16 * v11;
        *(void *)uint64_t v16 = v7;
        *(unsigned char *)(v16 + _Block_object_dispose(&STACK[0x210], 8) = v8;
        uint64_t v17 = *(void *)(v3 + 16);
        BOOL v18 = __OFADD__(v17, 1);
        uint64_t v19 = v17 + 1;
        if (v18)
        {
          __break(1u);
          return result;
        }
        *(void *)(v3 + 16) = v19;
      }
      if (++v5 == v21) {
        return v3;
      }
    }
  }
  return MEMORY[0x1E4FBC870];
}

uint64_t sub_1D13ABB90(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SportsDependencies(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for SportsSuggestionProducer()
{
  return self;
}

unint64_t sub_1D13ABC10()
{
  unint64_t result = qword_1EA64E008;
  if (!qword_1EA64E008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA64E008);
  }
  return result;
}

uint64_t sub_1D13ABC64()
{
  return sub_1D13F24D8();
}

uint64_t BundleIdRedactor.redact(bundleIds:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x1F4188298](sub_1D13ABCB0, 0, 0);
}

uint64_t sub_1D13ABCB0()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  void *v1 = v0;
  v1[1] = sub_1D13ABD58;
  uint64_t v2 = *(void *)(v0 + 16);
  return MEMORY[0x1F4146130](v2);
}

uint64_t sub_1D13ABD58(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 40) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return MEMORY[0x1F4188298](sub_1D13ABE94, 0, 0);
  }
  else
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 8);
    return v5(a1);
  }
}

uint64_t sub_1D13ABE94()
{
  int64_t v1 = *(void *)(*(void *)(v0 + 16) + 16);
  if (v1)
  {
    uint64_t v10 = MEMORY[0x1E4FBC860];
    sub_1D1394C68(0, v1, 0);
    uint64_t v2 = v10;
    unint64_t v3 = *(void *)(v10 + 16);
    uint64_t v4 = 16 * v3;
    do
    {
      unint64_t v5 = *(void *)(v10 + 24);
      unint64_t v6 = v3 + 1;
      if (v3 >= v5 >> 1) {
        sub_1D1394C68(v5 > 1, v3 + 1, 1);
      }
      *(void *)(v10 + 16) = v6;
      uint64_t v7 = v10 + v4;
      *(void *)(v7 + 32) = 0xD000000000000013;
      *(void *)(v7 + 40) = 0x80000001D1484930;
      v4 += 16;
      unint64_t v3 = v6;
      --v1;
    }
    while (v1);
  }
  else
  {

    uint64_t v2 = MEMORY[0x1E4FBC860];
  }
  char v8 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v8(v2);
}

uint64_t sub_1D13AC144(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = sub_1D13F2748();
  v3[4] = v5;
  id v6 = a3;
  uint64_t v7 = (void *)swift_task_alloc();
  void v3[5] = v7;
  void *v7 = v3;
  v7[2] = v5;
  v7[3] = v6;
  v7[1] = sub_1D13AC230;
  return MEMORY[0x1F4188298](sub_1D13ABCB0, 0, 0);
}

uint64_t sub_1D13AC230()
{
  int64_t v1 = *(void (***)(void, void))(*v0 + 24);
  uint64_t v2 = *(void **)(*v0 + 16);
  uint64_t v6 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  unint64_t v3 = (void *)sub_1D13F2738();
  swift_bridgeObjectRelease();
  ((void (**)(void, void *))v1)[2](v1, v3);

  _Block_release(v1);
  uint64_t v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

id BundleIdRedactor.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id BundleIdRedactor.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = OBJC_IVAR___ATXBundleIdRedactor_summarizationPipelineClient;
  sub_1D13F24E8();
  unint64_t v3 = v0;
  *(void *)&v0[v2] = sub_1D13F24D8();

  v5.receiver = v3;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

id BundleIdRedactor.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for BundleIdRedactor()
{
  return self;
}

uint64_t sub_1D13AC550()
{
  _Block_release(*(const void **)(v0 + 24));
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1D13AC598()
{
  uint64_t v2 = v0[2];
  unint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  objc_super v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1D138DF50;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_1EA64E020 + dword_1EA64E020);
  return v6(v2, v3, v4);
}

uint64_t sub_1D13AC654()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D13AC68C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  objc_super v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1D138DF50;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1EA64DC00 + dword_1EA64DC00);
  return v6(a1, v4);
}

uint64_t sub_1D13AC744@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21AppPredictionInternal19LiveActivityContext_dependencies;
  swift_beginAccess();
  return sub_1D13AC798(v3, a1);
}

uint64_t sub_1D13AC798(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LiveActivityContext.Dependencies(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for LiveActivityContext.Dependencies(uint64_t a1)
{
  return sub_1D13A1ED4(a1, qword_1EA64FD50);
}

uint64_t sub_1D13AC81C(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21AppPredictionInternal19LiveActivityContext_dependencies;
  swift_beginAccess();
  sub_1D13AC878(a1, v3);
  return swift_endAccess();
}

uint64_t sub_1D13AC878(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LiveActivityContext.Dependencies(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_1D13AC8DC())()
{
  return j__swift_endAccess;
}

uint64_t sub_1D13AC938@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_1D13F2068();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t sub_1D13AC9A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_1D13F2068();
  objc_super v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);
  return v5(a2, a1, v4);
}

uint64_t sub_1D13ACA0C(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  sub_1D13ACA80(a1, v2 + OBJC_IVAR____TtC21AppPredictionInternal19LiveActivityContext_dependencies);
  return v2;
}

uint64_t sub_1D13ACA58(uint64_t a1)
{
  sub_1D13ACA80(a1, v1 + OBJC_IVAR____TtC21AppPredictionInternal19LiveActivityContext_dependencies);
  return v1;
}

uint64_t sub_1D13ACA80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LiveActivityContext.Dependencies(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D13ACAE4()
{
  return 0x746341206576694CLL;
}

unint64_t sub_1D13ACB08()
{
  uint64_t v1 = sub_1D13F2108();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1, v3);
  objc_super v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1D13F20E8();
  MEMORY[0x1F4188790](v6 - 8, v7);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for LiveActivityContext.Dependencies(0);
  double v12 = MEMORY[0x1F4188790](v10 - 8, v11);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(double))(*(void *)v0 + 88))(v12);
  sub_1D13F2058();
  uint64_t v15 = sub_1D13F2068();
  (*(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  sub_1D13F20D8();
  sub_1D13ACE04((uint64_t)v9, MEMORY[0x1E4F18058]);
  sub_1D13F20F8();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  uint64_t v16 = self;
  uint64_t v17 = (void *)sub_1D13F2678();
  id v18 = objc_msgSend(v16, sel_localizedNameForBundle_, v17);

  if (v18)
  {
    sub_1D13F2688();
    uint64_t v20 = v19;
  }
  else
  {
    uint64_t v20 = 0;
  }
  unint64_t v22 = 0;
  unint64_t v23 = 0xE000000000000000;
  sub_1D13F2A78();
  swift_bridgeObjectRelease();
  unint64_t v22 = 0xD000000000000013;
  unint64_t v23 = 0x80000001D14849C0;
  if (v20) {
    swift_bridgeObjectRelease();
  }
  sub_1D13F26F8();
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t sub_1D13ACDC8()
{
  sub_1D13ACE04(v0 + OBJC_IVAR____TtC21AppPredictionInternal19LiveActivityContext_dependencies, type metadata accessor for LiveActivityContext.Dependencies);
  return v0;
}

uint64_t sub_1D13ACE04(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1D13ACE64()
{
  sub_1D13ACE04(v0 + OBJC_IVAR____TtC21AppPredictionInternal19LiveActivityContext_dependencies, type metadata accessor for LiveActivityContext.Dependencies);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t sub_1D13ACEDC()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_1D13ACEF0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 136))();
}

uint64_t sub_1D13ACF34()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))() & 1;
}

uint64_t sub_1D13ACF7C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t sub_1D13ACFC0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 112))();
  *a1 = result;
  return result;
}

uint64_t sub_1D13ACFF8@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for LiveActivityContext(0);
  sub_1D13AD5BC(&qword_1EA64E050);
  uint64_t result = sub_1D1387790();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1D13AD05C()
{
  sub_1D13AD298();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1D142D040;
  uint64_t result = type metadata accessor for LiveActivityContext(0);
  *(void *)(v0 + 32) = result;
  qword_1EA650038 = v0;
  return result;
}

uint64_t *sub_1D13AD0BC()
{
  if (qword_1EA64FBB0 != -1) {
    swift_once();
  }
  return &qword_1EA650038;
}

uint64_t sub_1D13AD108()
{
  if (qword_1EA64FBB0 != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D13AD164()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D13AD16C(uint64_t a1)
{
  swift_allocObject();
  uint64_t v2 = sub_1D13AD2F8(a1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1D13AD1B8(uint64_t a1)
{
  uint64_t v1 = sub_1D13AD2F8(a1);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1D13AD1EC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1D13AD214()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186488](v0, 32, 7);
}

uint64_t sub_1D13AD254()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t sub_1D13AD298()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64E058);
  if (swift_isClassType()) {
    uint64_t v1 = v0;
  }
  else {
    uint64_t v1 = 0;
  }
  if (v1) {
    uint64_t v2 = &qword_1EA64D850;
  }
  else {
    uint64_t v2 = (uint64_t *)&unk_1EA64E060;
  }
  return __swift_instantiateConcreteTypeFromMangledName(v2);
}

uint64_t sub_1D13AD2F8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for LiveActivityContext.Dependencies(0);
  MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1D13F2068();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + 24) = a1;
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    uint64_t v20 = v1;
    uint64_t v23 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    sub_1D13F2B08();
    uint64_t v13 = v8 + 16;
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v15 = a1 + ((*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64));
    uint64_t v21 = *(void *)(v13 + 56);
    uint64_t v22 = v13;
    uint64_t v16 = (void (**)(char *, uint64_t))(v13 - 8);
    do
    {
      v14(v11, v15, v7);
      v14(v6, (uint64_t)v11, v7);
      type metadata accessor for LiveActivityContext(0);
      uint64_t v17 = swift_allocObject();
      sub_1D13ACA80((uint64_t)v6, v17 + OBJC_IVAR____TtC21AppPredictionInternal19LiveActivityContext_dependencies);
      (*v16)(v11, v7);
      sub_1D13F2AE8();
      sub_1D13F2B18();
      sub_1D13F2B28();
      sub_1D13F2AF8();
      v15 += v21;
      --v12;
    }
    while (v12);
    uint64_t v18 = v23;
    uint64_t v1 = v20;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = MEMORY[0x1E4FBC860];
  }
  *(void *)(v1 + 16) = v18;
  return v1;
}

uint64_t sub_1D13AD524(uint64_t a1)
{
  uint64_t result = sub_1D13AD5BC(&qword_1EA64E048);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = result;
  return result;
}

uint64_t type metadata accessor for LiveActivityContext(uint64_t a1)
{
  return sub_1D13A1ED4(a1, (uint64_t *)&unk_1EA64FD40);
}

uint64_t sub_1D13AD588()
{
  return sub_1D13AD5BC(&qword_1EA64E050);
}

uint64_t sub_1D13AD5BC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for LiveActivityContext(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for LiveActivityContextDependencies()
{
  return &type metadata for LiveActivityContextDependencies;
}

uint64_t sub_1D13AD610()
{
  return type metadata accessor for LiveActivityContext(0);
}

uint64_t sub_1D13AD618()
{
  uint64_t result = sub_1D13F2068();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1D13AD6A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D13F2068();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  return v5(a1, a2, v4);
}

uint64_t sub_1D13AD714(uint64_t a1)
{
  uint64_t v2 = sub_1D13F2068();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t sub_1D13AD778(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D13F2068();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1D13AD7DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D13F2068();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1D13AD840(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D13F2068();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1D13AD8A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D13F2068();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1D13AD908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1D13AD91C);
}

uint64_t sub_1D13AD91C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D13F2068();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t sub_1D13AD988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1D13AD99C);
}

uint64_t sub_1D13AD99C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D13F2068();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t sub_1D13ADA0C()
{
  uint64_t result = sub_1D13F2068();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for LiveActivityContextStore()
{
  return self;
}

uint64_t sub_1D13ADABC()
{
  uint64_t v0 = sub_1D13F2888();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1D13F2878();
  MEMORY[0x1F4188790](v5, v6);
  uint64_t v7 = sub_1D13F25A8();
  MEMORY[0x1F4188790](v7 - 8, v8);
  sub_1D1384DE0(0, (unint64_t *)&qword_1EBD23970);
  sub_1D13F2598();
  v10[1] = MEMORY[0x1E4FBC860];
  sub_1D13B2E20((unint64_t *)&qword_1EBD23A50, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD239F0);
  sub_1D139DEE0(qword_1EBD23A00, (uint64_t *)&unk_1EBD239F0);
  sub_1D13F29B8();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, *MEMORY[0x1E4FBCC58], v0);
  return sub_1D13F28A8();
}

id sub_1D13ADD18()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F22220]);
  return objc_msgSend(v0, sel_init);
}

uint64_t sub_1D13ADD50()
{
  swift_bridgeObjectRelease();
  sub_1D1396120(v0 + 24);
  return MEMORY[0x1F4186488](v0, 40, 7);
}

uint64_t sub_1D13ADD90()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for MeetingContextDependencies(0);
  MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1D13F1FA8();
  MEMORY[0x1F4188790](v6 - 8, v7);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TimeOfDayContextDependencies(0);
  MEMORY[0x1F4188790](v10 - 8, v11);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64E0A0);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1D142C4A0;
  uint64_t v15 = type metadata accessor for TimeOfDayContextStore();
  sub_1D13F1F98();
  sub_1D13B4D44((uint64_t)v9, (uint64_t)v13);
  uint64_t v16 = sub_1D13B57AC((uint64_t)v13);
  *(void *)(v14 + 56) = v15;
  *(void *)(v14 + 64) = sub_1D13B2E20(&qword_1EA64E0A8, (void (*)(uint64_t))type metadata accessor for TimeOfDayContextStore);
  *(void *)(v14 + 32) = v16;
  uint64_t v17 = type metadata accessor for MeetingContextStore(0);
  sub_1D13F1F98();
  uint64_t v18 = MEMORY[0x1E4FBC860];
  sub_1D13A7708((uint64_t)v9, MEMORY[0x1E4FBC860], (uint64_t)v5);
  uint64_t v19 = sub_1D13A7EC8((uint64_t)v5);
  *(void *)(v14 + 96) = v17;
  *(void *)(v14 + 104) = sub_1D13B2E20(&qword_1EA64E0B0, (void (*)(uint64_t))type metadata accessor for MeetingContextStore);
  *(void *)(v14 + 72) = v19;
  uint64_t v20 = type metadata accessor for LocationOfInterestContextStore();
  uint64_t v21 = (void *)nullsub_1(0);
  uint64_t v22 = sub_1D1386FD8(v21);
  *(void *)(v14 + 136) = v20;
  *(void *)(v14 + 144) = sub_1D13B2E20(&qword_1EA64E0B8, (void (*)(uint64_t))type metadata accessor for LocationOfInterestContextStore);
  *(void *)(v14 + 112) = v22;
  uint64_t v23 = type metadata accessor for MotionContextStore();
  uint64_t v24 = (void *)nullsub_1(0);
  uint64_t v25 = sub_1D1383C68(v24);
  *(void *)(v14 + 176) = v23;
  *(void *)(v14 + 184) = sub_1D13B2E20(&qword_1EA64E0C0, (void (*)(uint64_t))type metadata accessor for MotionContextStore);
  *(void *)(v14 + 152) = v25;
  uint64_t v26 = type metadata accessor for LiveActivityContextStore();
  uint64_t v27 = nullsub_1(v18);
  uint64_t v28 = sub_1D13AD16C(v27);
  *(void *)(v14 + 216) = v26;
  *(void *)(v14 + 224) = sub_1D13B2E20(&qword_1EA64E0C8, (void (*)(uint64_t))type metadata accessor for LiveActivityContextStore);
  *(void *)(v14 + 192) = v28;
  *(void *)(v1 + 16) = v14;
  *(void *)(v1 + 32) = 0;
  swift_unknownObjectWeakInit();
  return v1;
}

uint64_t sub_1D13AE0CC()
{
  type metadata accessor for ContextualEngineContextStore.GuardedData();
  uint64_t v0 = swift_allocObject();
  sub_1D13ADD90();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA64E070);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = v0;
  return result;
}

uint64_t type metadata accessor for ContextualEngineContextStore.GuardedData()
{
  return self;
}

uint64_t sub_1D13AE144()
{
  uint64_t v1 = *(void *)(v0 + 136);
  swift_getKeyPath();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  sub_1D13AE284((void *)(v1 + 16), &v4);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  uint64_t v2 = v4;
  swift_release_n();
  return v2;
}

uint64_t sub_1D13AE1E0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = MEMORY[0x1D25F7870](*a1 + 24);
  uint64_t v5 = *(void *)(v3 + 32);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_1D13AE214(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 32) = *(void *)(a1 + 8);
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1D13AE22C()
{
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  return v1;
}

uint64_t sub_1D13AE27C()
{
  return sub_1D13AE22C();
}

uint64_t sub_1D13AE284@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1D13B2EF8(a1, a2);
}

uint64_t sub_1D13AE29C()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 136);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1D13AE304(v2);
  os_unfair_lock_unlock(v3);
  return swift_unknownObjectRelease();
}

uint64_t sub_1D13AE304(uint64_t a1)
{
  return sub_1D13AE4A4(a1);
}

uint64_t (*sub_1D13AE31C(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(v1 + 136);
  a1[2] = v3;
  swift_getKeyPath();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  sub_1D13AE284((void *)(v3 + 16), v7);
  a1[3] = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  uint64_t v4 = v7[0];
  uint64_t v5 = v7[1];
  swift_release_n();
  *a1 = v4;
  a1[1] = v5;
  return sub_1D13AE3E4;
}

uint64_t sub_1D13AE3E4(uint64_t a1, char a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 16);
  uint64_t v3 = v2 + 6;
  uint64_t v4 = (uint64_t)&v2[4];
  if (a2)
  {
    swift_unknownObjectRetain();
    os_unfair_lock_lock(v3);
    sub_1D13AE304(v4);
    os_unfair_lock_unlock(v3);
    swift_unknownObjectRelease();
  }
  else
  {
    os_unfair_lock_lock(v2 + 6);
    sub_1D13AE304(v4);
    os_unfair_lock_unlock(v3);
  }
  return swift_unknownObjectRelease();
}

uint64_t sub_1D13AE4A4(uint64_t a1)
{
  *(void *)(*(void *)a1 + 32) = *(void *)(v1 + 24);
  return swift_unknownObjectWeakAssign();
}

unint64_t sub_1D13AE4CC()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 136);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1D13AE52C(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_1D13AE52C@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t result = *(void *)(*(void *)a1 + 16);
  unint64_t v3 = MEMORY[0x1E4FBC860];
  unint64_t v23 = MEMORY[0x1E4FBC860];
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    uint64_t v14 = a2;
    uint64_t v15 = result + 32;
    swift_bridgeObjectRetain_n();
    for (uint64_t i = 0; i != v4; ++i)
    {
      sub_1D1386110(v15 + 40 * i, (uint64_t)v20);
      uint64_t v7 = v21;
      uint64_t v8 = v22;
      __swift_project_boxed_opaque_existential_1(v20, v21);
      (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v7, v8);
      swift_getAssociatedTypeWitness();
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64DA70);
      uint64_t v9 = sub_1D13F2B38();
      swift_bridgeObjectRelease();
      uint64_t v10 = *(void *)(v9 + 16);
      if (v10)
      {
        unint64_t v19 = v3;
        sub_1D13F2B08();
        uint64_t v11 = v9 + 32;
        do
        {
          sub_1D1386110(v11, (uint64_t)v16);
          uint64_t v12 = v17;
          uint64_t v13 = v18;
          __swift_project_boxed_opaque_existential_1(v16, v17);
          (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v12, v13);
          __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
          sub_1D13F2AE8();
          sub_1D13F2B18();
          sub_1D13F2B28();
          sub_1D13F2AF8();
          v11 += 40;
          --v10;
        }
        while (v10);
        unint64_t v6 = v19;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v6 = v3;
      }
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v20);
      sub_1D13B2AE8(v6);
    }
    uint64_t result = swift_bridgeObjectRelease_n();
    unint64_t v3 = v23;
    a2 = v14;
  }
  *a2 = v3;
  return result;
}

uint64_t sub_1D13AE738()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 136);
  uint64_t v2 = (uint64_t)&v1[4];
  unint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1D13AE798(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_1D13AE798@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void *)(*(void *)a1 + 16);
  uint64_t v3 = *(void *)(result + 16);
  if (!v3)
  {
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
LABEL_25:
    *a2 = v5;
    return result;
  }
  uint64_t v18 = a2;
  uint64_t v4 = (void *)(result + 32);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
  while (1)
  {
    __swift_project_boxed_opaque_existential_1(v4, v4[3]);
    swift_getDynamicType();
    (*(void (**)(void))(v4[4] + 32))();
    swift_getAssociatedTypeWitness();
    swift_getMetatypeMetadata();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64E220);
    uint64_t v6 = sub_1D13F2B38();
    swift_bridgeObjectRelease();
    uint64_t v7 = *(void *)(v6 + 16);
    int64_t v8 = v5[2];
    int64_t v9 = v8 + v7;
    if (__OFADD__(v8, v7)) {
      break;
    }
    int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v9 <= v5[3] >> 1)
    {
      if (*(void *)(v6 + 16)) {
        goto LABEL_14;
      }
    }
    else
    {
      if (v8 <= v9) {
        int64_t v11 = v8 + v7;
      }
      else {
        int64_t v11 = v8;
      }
      uint64_t v5 = sub_1D13B28B4(isUniquelyReferenced_nonNull_native, v11, 1, v5);
      if (*(void *)(v6 + 16))
      {
LABEL_14:
        uint64_t v12 = v5[2];
        if ((v5[3] >> 1) - v12 < v7) {
          goto LABEL_28;
        }
        uint64_t v13 = &v5[2 * v12 + 4];
        if (v6 + 32 < (unint64_t)&v13[2 * v7] && (unint64_t)v13 < v6 + 32 + 16 * v7) {
          goto LABEL_30;
        }
        memcpy(v13, (const void *)(v6 + 32), 16 * v7);
        if (v7)
        {
          uint64_t v15 = v5[2];
          BOOL v16 = __OFADD__(v15, v7);
          uint64_t v17 = v15 + v7;
          if (v16) {
            goto LABEL_29;
          }
          v5[2] = v17;
        }
        goto LABEL_4;
      }
    }
    if (v7) {
      goto LABEL_27;
    }
LABEL_4:
    swift_bridgeObjectRelease();
    v4 += 5;
    if (!--v3)
    {
      uint64_t result = swift_bridgeObjectRelease_n();
      a2 = v18;
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  uint64_t result = sub_1D13F2BC8();
  __break(1u);
  return result;
}

uint64_t sub_1D13AE9E0()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 136);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_1D13AEA40(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_1D13AEA40@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)result + 16);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  uint64_t v13 = MEMORY[0x1E4FBC860];
  uint64_t v5 = *(void *)(v3 + 16);
  if (v5)
  {
    uint64_t v6 = v3 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_1D1386110(v6, (uint64_t)v10);
      uint64_t v7 = v11;
      uint64_t v8 = v12;
      __swift_project_boxed_opaque_existential_1(v10, v11);
      uint64_t v9 = sub_1D1387984(v7, v8);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v10);
      sub_1D13B2CB4(v9);
      v6 += 40;
      --v5;
    }
    while (v5);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v4 = v13;
  }
  *a2 = v4;
  return result;
}

uint64_t sub_1D13AEB14()
{
  uint64_t v0 = swift_allocObject();
  sub_1D13AEB4C();
  return v0;
}

void *sub_1D13AEB4C()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23A30);
  MEMORY[0x1F4188790](v2 - 8, v3);
  id v34 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1D13F2538();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v31 = v5;
  uint64_t v32 = v6;
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v33 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_1D13F2888();
  uint64_t v9 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30, v10);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1D13F2878();
  MEMORY[0x1F4188790](v13, v14);
  uint64_t v15 = sub_1D13F25A8();
  MEMORY[0x1F4188790](v15 - 8, v16);
  swift_defaultActor_initialize();
  sub_1D1384DE0(0, (unint64_t *)&qword_1EBD23970);
  sub_1D13F2598();
  uint64_t v35 = MEMORY[0x1E4FBC860];
  sub_1D13B2E20((unint64_t *)&qword_1EBD23A50, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD239F0);
  uint64_t v17 = v31;
  sub_1D139DEE0(qword_1EBD23A00, (uint64_t *)&unk_1EBD239F0);
  uint64_t v18 = v32;
  sub_1D13F29B8();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, *MEMORY[0x1E4FBCC58], v30);
  unint64_t v19 = v33;
  v0[14] = sub_1D13F28A8();
  v0[15] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F22220]), sel_init);
  v0[16] = 0;
  type metadata accessor for ContextualEngineContextStore.GuardedData();
  uint64_t v20 = swift_allocObject();
  sub_1D13ADD90();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA64E070);
  uint64_t v21 = swift_allocObject();
  *(_DWORD *)(v21 + 24) = 0;
  *(void *)(v21 + 16) = v20;
  v1[17] = v21;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  uint64_t v22 = sub_1D13A07D8();
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v19, v22, v17);
  unint64_t v23 = sub_1D13F2508();
  os_log_type_t v24 = sub_1D13F2858();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl(&dword_1D0FA3000, v23, v24, "ContextualEngineContextStore init", v25, 2u);
    MEMORY[0x1D25F77B0](v25, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v18 + 8))(v19, v17);
  uint64_t v26 = sub_1D13F27D8();
  uint64_t v27 = (uint64_t)v34;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v34, 1, 1, v26);
  uint64_t v28 = (void *)swift_allocObject();
  uint64_t v28[2] = 0;
  v28[3] = 0;
  v28[4] = v1;
  swift_retain();
  sub_1D1388CB4(v27, (uint64_t)&unk_1EA64E088, (uint64_t)v28);
  swift_release();
  return v1;
}

uint64_t sub_1D13AF028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return MEMORY[0x1F4188298](sub_1D13AF048, a4, 0);
}

uint64_t sub_1D13AF048()
{
  sub_1D13AF154();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D13AF0AC()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_1D138DF50;
  v3[2] = v2;
  return MEMORY[0x1F4188298](sub_1D13AF048, v2, 0);
}

void sub_1D13AF154()
{
  uint64_t v1 = v0;
  v33[0] = sub_1D13F2538();
  v33[2] = *(void *)(v33[0] - 8);
  MEMORY[0x1F4188790](v33[0], v2);
  v33[1] = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1D13F20C8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = objc_msgSend(self, sel_defaultCenter, v33[0]);
  uint64_t v10 = *MEMORY[0x1E4F25460];
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  uint64_t v38 = (uint64_t (*)(void))sub_1D13B2FAC;
  uint64_t v39 = v11;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v35 = 1107296256;
  uint64_t v36 = (uint64_t (*)())sub_1D139F838;
  char v37 = &block_descriptor_5;
  uint64_t v12 = _Block_copy(&aBlock);
  swift_release();
  id v13 = objc_msgSend(v9, sel_addObserverForName_object_queue_usingBlock_, v10, 0, 0, v12);
  _Block_release(v12);

  swift_unknownObjectRelease();
  uint64_t v14 = (void *)v0[15];
  id v15 = objc_msgSend(self, sel_mainQueue);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v38 = (uint64_t (*)(void))sub_1D13B2FCC;
  uint64_t v39 = v16;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v35 = 1107296256;
  uint64_t v36 = (uint64_t (*)())sub_1D13B0408;
  char v37 = &block_descriptor_36;
  uint64_t v17 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v14, sel_startActivityUpdatesToQueue_withHandler_, v15, v17);
  _Block_release(v17);

  uint64_t v18 = (void *)v1[14];
  id v19 = objc_allocWithZone(MEMORY[0x1E4F502E8]);
  id v20 = v18;
  uint64_t v21 = (void *)sub_1D13F2678();
  id v22 = objc_msgSend(v19, sel_initWithIdentifier_targetQueue_, v21, v20);

  v1[18] = v22;
  swift_unknownObjectRelease();
  id v23 = objc_msgSend((id)BiomeLibrary(), sel_App);
  swift_unknownObjectRelease();
  id v24 = objc_msgSend(v23, sel_Intent);
  swift_unknownObjectRelease();
  id v25 = objc_msgSend(v24, sel_DSLPublisherWithUseCase_, *MEMORY[0x1E4F4B5A0]);

  if (v1[18])
  {
    id v26 = objc_msgSend(v25, sel_subscribeOn_);

    uint64_t v38 = nullsub_1;
    uint64_t v39 = 0;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v35 = 1107296256;
    uint64_t v36 = sub_1D138AAF4;
    char v37 = &block_descriptor_39;
    uint64_t v27 = _Block_copy(&aBlock);
    uint64_t v28 = swift_allocObject();
    swift_weakInit();
    uint64_t v38 = (uint64_t (*)(void))sub_1D13B2FD4;
    uint64_t v39 = v28;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v35 = 1107296256;
    uint64_t v36 = (uint64_t (*)())sub_1D13B0A5C;
    char v37 = &block_descriptor_43;
    long long v29 = _Block_copy(&aBlock);
    swift_release();
    id v30 = objc_msgSend(v26, sel_sinkWithCompletion_receiveInput_, v27, v29);
    _Block_release(v29);
    _Block_release(v27);

    v1[19] = v30;
    swift_unknownObjectRelease();
    sub_1D13F20A8();
    sub_1D13F2098();
    sub_1D13F20B8();
    uint64_t v31 = sub_1D13F2088();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    swift_release();
    uint64_t aBlock = v31;
    swift_allocObject();
    swift_weakInit();
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64E1B8);
    sub_1D139DEE0(&qword_1EA64E1C0, &qword_1EA64E1B8);
    uint64_t v32 = sub_1D13F2558();
    swift_release();
    swift_release();
    v1[21] = v32;
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1D13AF940()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23A30);
  MEMORY[0x1F4188790](v0 - 8, v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = sub_1D13F27D8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v3, 1, 1, v6);
    uint64_t v7 = (void *)swift_allocObject();
    v7[2] = 0;
    uint64_t v7[3] = 0;
    void v7[4] = v5;
    sub_1D13AFCD8((uint64_t)v3, (uint64_t)&unk_1EA64E200, (uint64_t)v7);
    return swift_release();
  }
  return result;
}

uint64_t sub_1D13AFA60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  uint64_t v7 = (uint64_t (*)(void))(*(void *)(*(void *)a4 + 352) + **(int **)(*(void *)a4 + 352));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v5;
  void *v5 = v4;
  v5[1] = sub_1D13AFB64;
  return v7();
}

uint64_t sub_1D13AFB64(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(unsigned char *)(v4 + 32) = a1 & 1;
    return MEMORY[0x1F4188298](sub_1D13AFCB4, 0, 0);
  }
}

uint64_t sub_1D13AFCB4()
{
  **(unsigned char **)(v0 + 16) = *(unsigned char *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1D13AFCD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1D13F27D8();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_1D13F27C8();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_1D138E150(a1, (uint64_t *)&unk_1EBD23A30);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1D13F27B8();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_1D13AFE5C(void *a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23A30);
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1D13F2538();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a2 + 16;
  uint64_t v14 = sub_1D13A07D8();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v14, v8);
  id v15 = a1;
  uint64_t v16 = a1;
  uint64_t v17 = sub_1D13F2508();
  os_log_type_t v18 = sub_1D13F2858();
  if (os_log_type_enabled(v17, v18))
  {
    v27[1] = v13;
    uint64_t v28 = v8;
    long long v29 = v7;
    id v19 = (uint8_t *)swift_slowAlloc();
    v27[0] = swift_slowAlloc();
    *(_DWORD *)id v19 = 138412290;
    if (a1)
    {
      id v30 = v16;
      id v20 = v16;
      id v15 = a1;
    }
    else
    {
      id v15 = 0;
      id v30 = 0;
    }
    sub_1D13F2978();
    uint64_t v21 = v27[0];
    *(void *)v27[0] = v15;

    _os_log_impl(&dword_1D0FA3000, v17, v18, "activity updated: %@", v19, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23870);
    swift_arrayDestroy();
    MEMORY[0x1D25F77B0](v21, -1, -1);
    MEMORY[0x1D25F77B0](v19, -1, -1);
    uint64_t v8 = v28;
    uint64_t v7 = v29;
  }
  else
  {

    uint64_t v17 = v16;
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v23 = result;
    uint64_t v24 = sub_1D13F27D8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
    id v25 = (void *)swift_allocObject();
    v25[2] = 0;
    v25[3] = 0;
    v25[4] = v23;
    v25[5] = v15;
    id v26 = v16;
    sub_1D13AFCD8((uint64_t)v7, (uint64_t)&unk_1EA64E1F0, (uint64_t)v25);
    return swift_release();
  }
  return result;
}

uint64_t sub_1D13B01D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return MEMORY[0x1F4188298](sub_1D13B01F4, a4, 0);
}

uint64_t sub_1D13B01F4()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v1 = (void *)v0[3];
  uint64_t v3 = (void *)v2[16];
  uint8_t v2[16] = v1;
  id v4 = v1;

  uint64_t v7 = (uint64_t (*)(void))(*(void *)(*v2 + 352) + **(int **)(*v2 + 352));
  uint64_t v5 = (void *)swift_task_alloc();
  v0[4] = v5;
  void *v5 = v0;
  v5[1] = sub_1D13B0314;
  return v7();
}

uint64_t sub_1D13B0314()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void sub_1D13B0408(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t sub_1D13B0474()
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23A30);
  MEMORY[0x1F4188790](v0 - 8, v1);
  uint64_t v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1D13F2538();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v10 = result;
    swift_unknownObjectRetain();
    self;
    uint64_t v11 = swift_dynamicCastObjCClass();
    if (v11)
    {
      uint64_t v12 = (void *)v11;
      uint64_t v13 = sub_1D13A07D8();
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v13, v4);
      swift_unknownObjectRetain();
      uint64_t v14 = sub_1D13F2508();
      os_log_type_t v15 = sub_1D13F2858();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        uint64_t v27 = (void *)swift_slowAlloc();
        uint64_t v28 = v16;
        *(_DWORD *)uint64_t v16 = 138412290;
        id v17 = objc_msgSend(v12, sel_eventBody);
        id v18 = v17;
        os_log_t v26 = v14;
        if (v17) {
          id v29 = v17;
        }
        else {
          id v29 = 0;
        }
        sub_1D13F2978();
        id v19 = v27;
        *uint64_t v27 = v18;
        swift_unknownObjectRelease();
        os_log_type_t v20 = v15;
        os_log_t v21 = v26;
        id v22 = v28;
        _os_log_impl(&dword_1D0FA3000, v26, v20, "Intent: %@", v28, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23870);
        swift_arrayDestroy();
        uint64_t v23 = v19;
        uint64_t v14 = v21;
        MEMORY[0x1D25F77B0](v23, -1, -1);
        MEMORY[0x1D25F77B0](v22, -1, -1);
      }
      else
      {
        swift_unknownObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      uint64_t v24 = sub_1D13F27D8();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v3, 1, 1, v24);
      id v25 = (void *)swift_allocObject();
      v25[2] = 0;
      v25[3] = 0;
      v25[4] = v10;
      sub_1D13AFCD8((uint64_t)v3, (uint64_t)&unk_1EA64E1E0, (uint64_t)v25);
    }
    swift_release();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1D13B0808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  uint64_t v7 = (uint64_t (*)(void))(*(void *)(*(void *)a4 + 352) + **(int **)(*(void *)a4 + 352));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v5;
  void *v5 = v4;
  v5[1] = sub_1D13B090C;
  return v7();
}

uint64_t sub_1D13B090C(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(unsigned char *)(v4 + 32) = a1 & 1;
    return MEMORY[0x1F4188298](sub_1D13B389C, 0, 0);
  }
}

uint64_t sub_1D13B0A5C(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1D13B0ABC(void **a1)
{
  uint64_t v2 = sub_1D13F2538();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  uint64_t v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7, v8);
  uint64_t v10 = (char *)v29 - v9;
  uint64_t v11 = *a1;
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = sub_1D13A07D8();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v13, v2);
    id v14 = v11;
    id v15 = v11;
    uint64_t v16 = sub_1D13F2508();
    os_log_type_t v17 = sub_1D13F2838();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      v29[0] = v2;
      os_log_type_t v20 = (void *)v19;
      *(_DWORD *)id v18 = 138412290;
      id v21 = v11;
      uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
      v29[1] = v22;
      sub_1D13F2978();
      *os_log_type_t v20 = v22;

      _os_log_impl(&dword_1D0FA3000, v16, v17, "Error sinking activity descriptors: %@", v18, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23870);
      swift_arrayDestroy();
      uint64_t v23 = v20;
      uint64_t v2 = v29[0];
      MEMORY[0x1D25F77B0](v23, -1, -1);
      MEMORY[0x1D25F77B0](v18, -1, -1);
    }
    else
    {
    }
    uint64_t v10 = v6;
  }
  else
  {
    uint64_t v24 = sub_1D13A07D8();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v10, v24, v2);
    id v25 = sub_1D13F2508();
    uint64_t v26 = sub_1D13F2858();
    if (os_log_type_enabled(v25, (os_log_type_t)v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl(&dword_1D0FA3000, v25, (os_log_type_t)v26, "Finished sinking activity descriptors", v27, 2u);
      MEMORY[0x1D25F77B0](v27, -1, -1);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v10, v2);
}

uint64_t sub_1D13B0DC4(uint64_t *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23A30);
  MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v8 = result;
    uint64_t v9 = sub_1D13F27D8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v5, 1, 1, v9);
    uint64_t v10 = (void *)swift_allocObject();
    void v10[2] = 0;
    void v10[3] = 0;
    v10[4] = v8;
    v10[5] = v6;
    swift_bridgeObjectRetain();
    sub_1D13AFCD8((uint64_t)v5, (uint64_t)&unk_1EA64E1D0, (uint64_t)v10);
    return swift_release();
  }
  return result;
}

uint64_t sub_1D13B0F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  void *v7 = v5;
  v7[1] = sub_1D138DF50;
  return sub_1D13B0FA0(a5);
}

uint64_t sub_1D13B0FA0(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = sub_1D13F2538();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D13B1060, v1, 0);
}

uint64_t sub_1D13B1060()
{
  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[5];
  uint64_t v4 = sub_1D13A07D8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_1D13F2508();
  os_log_type_t v6 = sub_1D13F2858();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = v0[3];
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 134217984;
    v0[2] = *(void *)(v7 + 16);
    sub_1D13F2978();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D0FA3000, v5, v6, "Received %ld activity descriptors", v8, 0xCu);
    MEMORY[0x1D25F77B0](v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v9 = (void *)v0[4];
  uint64_t v10 = v0[3];
  (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[5]);
  v9[20] = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = (uint64_t (*)(void))(*(void *)(*v9 + 352) + **(int **)(*v9 + 352));
  uint64_t v11 = (void *)swift_task_alloc();
  v0[8] = v11;
  void *v11 = v0;
  v11[1] = sub_1D13B1298;
  return v13();
}

uint64_t sub_1D13B1298()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1D13B13A8()
{
  v1[22] = v0;
  type metadata accessor for MeetingContextDependencies(0);
  v1[23] = swift_task_alloc();
  type metadata accessor for TimeOfDayContextDependencies(0);
  v1[24] = swift_task_alloc();
  uint64_t v2 = sub_1D13F20C8();
  v1[25] = v2;
  v1[26] = *(void *)(v2 - 8);
  v1[27] = swift_task_alloc();
  uint64_t v3 = sub_1D13F2538();
  v1[28] = v3;
  v1[29] = *(void *)(v3 - 8);
  v1[30] = swift_task_alloc();
  v1[31] = swift_task_alloc();
  uint64_t v4 = sub_1D13F2028();
  v1[32] = v4;
  v1[33] = *(void *)(v4 - 8);
  v1[34] = swift_task_alloc();
  uint64_t v5 = sub_1D13F2048();
  v1[35] = v5;
  v1[36] = *(void *)(v5 - 8);
  v1[37] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD239C8);
  v1[38] = swift_task_alloc();
  v1[39] = swift_task_alloc();
  uint64_t v6 = sub_1D13F1FA8();
  v1[40] = v6;
  v1[41] = *(void *)(v6 - 8);
  v1[42] = swift_task_alloc();
  v1[43] = swift_task_alloc();
  v1[44] = swift_task_alloc();
  v1[45] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D13B16A8, v0, 0);
}

void sub_1D13B16A8()
{
  unsigned int v143 = v0;
  uint64_t v1 = v0 + 22;
  unsigned int v128 = *(uint64_t (**)(void))(*(void *)v0[22] + 216);
  uint64_t v2 = v128();
  int64_t v3 = *(void *)(v2 + 16);
  char v141 = v0;
  unsigned int v138 = v0 + 22;
  if (v3)
  {
    uint64_t v4 = v0 + 7;
    v142[0] = MEMORY[0x1E4FBC860];
    sub_1D1394C68(0, v3, 0);
    uint64_t v5 = v2 + 32;
    uint64_t v6 = v142[0];
    do
    {
      sub_1D1386110(v5, (uint64_t)v4);
      __swift_project_boxed_opaque_existential_1(v4, v0[10]);
      sub_1D13F2A98();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v4);
      uint64_t v8 = v0[17];
      uint64_t v7 = v0[18];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1D1394C68(0, *(void *)(v6 + 16) + 1, 1);
        uint64_t v6 = v142[0];
      }
      unint64_t v10 = *(void *)(v6 + 16);
      unint64_t v9 = *(void *)(v6 + 24);
      if (v10 >= v9 >> 1)
      {
        sub_1D1394C68(v9 > 1, v10 + 1, 1);
        uint64_t v6 = v142[0];
      }
      *(void *)(v6 + 16) = v10 + 1;
      uint64_t v11 = v6 + 16 * v10;
      *(void *)(v11 + 32) = v8;
      *(void *)(v11 + 40) = v7;
      v5 += 40;
      --v3;
      uint64_t v0 = v141;
    }
    while (v3);
    uint64_t v129 = (void *)v6;
    swift_bridgeObjectRelease();
    uint64_t v1 = v138;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v129 = (void *)MEMORY[0x1E4FBC860];
  }
  sub_1D13F1F98();
  v0[19] = MEMORY[0x1E4FBC860];
  id v139 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F25550]), sel_initWithEKOptions_, 128);
  if (!v139) {
    goto LABEL_31;
  }
  uint64_t v12 = v0[39];
  uint64_t v131 = v0[41];
  uint64_t v134 = v0[40];
  uint64_t v13 = v0[36];
  uint64_t v14 = v0[37];
  uint64_t v16 = v0[34];
  uint64_t v15 = v0[35];
  uint64_t v18 = v0[32];
  uint64_t v17 = v0[33];
  sub_1D13F2018();
  unsigned int v126 = *MEMORY[0x1E4F27BF0];
  uint64_t v124 = *(void (**)(uint64_t))(v17 + 104);
  v124(v16);
  sub_1D13F2008();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v19(v16, v18);
  os_log_type_t v20 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v20(v14, v15);
  id v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v131 + 48);
  if (v21(v12, 1, v134) != 1)
  {
    unint64_t v135 = v19;
    uint64_t v123 = v0[40];
    uint64_t v24 = v0[38];
    uint64_t v25 = v0[37];
    uint64_t v26 = v0[34];
    uint64_t v132 = v0[35];
    uint64_t v27 = v0[32];
    uint64_t v121 = *(void (**)(void, void))(v0[41] + 32);
    v121(v0[44], v0[39]);
    sub_1D13F2018();
    ((void (*)(uint64_t, void, uint64_t))v124)(v26, v126, v27);
    sub_1D13F2008();
    v135(v26, v27);
    v20(v25, v132);
    if (v21(v24, 1, v123) == 1)
    {
      uint64_t v28 = v0[38];
      (*(void (**)(void, void))(v0[41] + 8))(v0[44], v0[40]);

      uint64_t v23 = v28;
      goto LABEL_15;
    }
    ((void (*)(void, void, void))v121)(v0[43], v0[38], v0[40]);
    id v29 = (void *)sub_1D13F1F48();
    uint64_t v30 = (void *)sub_1D13F1F48();
    id v31 = objc_msgSend(v139, sel_predicateForEventsWithStartDate_endDate_calendars_, v29, v30, 0);

    id v32 = objc_msgSend(v139, sel_eventsMatchingPredicate_, v31);
    sub_1D1384DE0(0, (unint64_t *)&unk_1EA64E0D0);
    unint64_t v33 = sub_1D13F2748();

    v142[0] = MEMORY[0x1E4FBC860];
    uint64_t v1 = v138;
    if (v33 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v34 = sub_1D13F2B88();
      swift_bridgeObjectRelease();
      if (v34) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v34 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v34)
      {
LABEL_18:
        if (v34 < 1)
        {
          __break(1u);
          return;
        }
        for (uint64_t i = 0; i != v34; ++i)
        {
          if ((v33 & 0xC000000000000001) != 0) {
            id v36 = (id)MEMORY[0x1D25F54B0](i, v33);
          }
          else {
            id v36 = *(id *)(v33 + 8 * i + 32);
          }
          char v37 = v36;
          if (objc_msgSend(v36, sel_isAllDay))
          {
          }
          else
          {
            sub_1D13F2AE8();
            sub_1D13F2B18();
            sub_1D13F2B28();
            sub_1D13F2AF8();
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v38 = v142[0];
        uint64_t v1 = v138;
        goto LABEL_30;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v38 = MEMORY[0x1E4FBC860];
LABEL_30:
    uint64_t v39 = v0[43];
    uint64_t v40 = v0[44];
    uint64_t v41 = v141[41];
    uint64_t v42 = v141[40];

    uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    v43(v39, v42);
    v43(v40, v42);
    uint64_t v0 = v141;
    swift_bridgeObjectRelease();
    v141[19] = v38;
    goto LABEL_31;
  }
  uint64_t v22 = v0[39];

  uint64_t v23 = v22;
LABEL_15:
  sub_1D138E150(v23, &qword_1EBD239C8);
  uint64_t v1 = v138;
LABEL_31:
  uint64_t v44 = v0[31];
  uint64_t v45 = v0[28];
  uint64_t v46 = v0[29];
  uint64_t v47 = sub_1D13A07D8();
  unint64_t v125 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16);
  v125(v44, v47, v45);
  unint64_t v48 = v0[19];
  swift_bridgeObjectRetain_n();
  uint64_t v49 = sub_1D13F2508();
  os_log_type_t v50 = sub_1D13F2858();
  uint64_t v127 = v47;
  if (os_log_type_enabled(v49, v50))
  {
    uint64_t v51 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v51 = 134217984;
    if (v48 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v52 = sub_1D13F2B88();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v52 = *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    *(v1 - 1) = v52;
    sub_1D13F2978();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D0FA3000, v49, v50, "event count: %ld", v51, 0xCu);
    MEMORY[0x1D25F77B0](v51, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v53 = (void *)v0[22];
  uint64_t v54 = *(void (**)(void, void))(v0[29] + 8);
  v54(v0[31], v0[28]);
  id v55 = objc_msgSend(self, sel_sharedInstance);
  objc_msgSend(v55, sel_updateCurrentLocationOfInterestIfTimeElapsed);
  unint64_t v140 = v53;
  if (!v53[20])
  {
    sub_1D13F20A8();
    sub_1D13F2098();
    sub_1D13F20B8();
    uint64_t v105 = sub_1D13F2078();
    (*(void (**)(void, void))(v0[26] + 8))(v0[27], v0[25]);
    swift_release();
    v53[20] = v105;
    swift_bridgeObjectRelease();
  }
  char v122 = v54;
  id v136 = v55;
  uint64_t v56 = v0[45];
  uint64_t v58 = v0[41];
  uint64_t v57 = v0[42];
  uint64_t v59 = v0[40];
  uint64_t v60 = v0[23];
  uint64_t v61 = v0[24];
  uint64_t v62 = v0[22];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64E0A0);
  uint64_t v63 = swift_allocObject();
  *(_OWORD *)(v63 + 16) = xmmword_1D142C4A0;
  uint64_t v64 = type metadata accessor for TimeOfDayContextStore();
  unint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16);
  v65(v57, v56, v59);
  sub_1D13B4D44(v57, v61);
  uint64_t v66 = sub_1D13B57AC(v61);
  *(void *)(v63 + 56) = v64;
  *(void *)(v63 + 64) = sub_1D13B2E20(&qword_1EA64E0A8, (void (*)(uint64_t))type metadata accessor for TimeOfDayContextStore);
  *(void *)(v63 + 32) = v66;
  uint64_t v67 = type metadata accessor for MeetingContextStore(0);
  uint64_t v68 = v56;
  uint64_t v69 = v55;
  v65(v57, v68, v59);
  uint64_t v70 = v141;
  swift_beginAccess();
  uint64_t v71 = v141[19];
  swift_bridgeObjectRetain();
  sub_1D13A7708(v57, v71, v60);
  uint64_t v72 = sub_1D13A7EC8(v60);
  *(void *)(v63 + 96) = v67;
  *(void *)(v63 + 104) = sub_1D13B2E20(&qword_1EA64E0B0, (void (*)(uint64_t))type metadata accessor for MeetingContextStore);
  *(void *)(v63 + 72) = v72;
  uint64_t v73 = type metadata accessor for LocationOfInterestContextStore();
  uint64_t v74 = (void *)nullsub_1(objc_msgSend(v69, sel_cachedLocationOfInterestAtCurrentLocation));
  uint64_t v75 = sub_1D1386FD8(v74);
  *(void *)(v63 + 136) = v73;
  *(void *)(v63 + 144) = sub_1D13B2E20(&qword_1EA64E0B8, (void (*)(uint64_t))type metadata accessor for LocationOfInterestContextStore);
  *(void *)(v63 + 112) = v75;
  uint64_t v76 = type metadata accessor for MotionContextStore();
  uint64_t v77 = *(void **)(v62 + 128);
  id v78 = v77;
  uint64_t v79 = (void *)nullsub_1(v77);
  uint64_t v80 = sub_1D1383C68(v79);
  *(void *)(v63 + 176) = v76;
  *(void *)(v63 + 184) = sub_1D13B2E20(&qword_1EA64E0C0, (void (*)(uint64_t))type metadata accessor for MotionContextStore);
  *(void *)(v63 + 152) = v80;
  if (v140[20]) {
    uint64_t v81 = v140[20];
  }
  else {
    uint64_t v81 = MEMORY[0x1E4FBC860];
  }
  uint64_t v82 = type metadata accessor for LiveActivityContextStore();
  swift_bridgeObjectRetain();
  uint64_t v83 = nullsub_1(v81);
  uint64_t v84 = sub_1D13AD16C(v83);
  *(void *)(v63 + 216) = v82;
  *(void *)(v63 + 224) = sub_1D13B2E20(&qword_1EA64E0C8, (void (*)(uint64_t))type metadata accessor for LiveActivityContextStore);
  *(void *)(v63 + 192) = v84;
  char v85 = *(os_unfair_lock_s **)(v62 + 136);
  *(void *)(swift_task_alloc() + 16) = v63;
  unsigned int v86 = v85 + 6;
  os_unfair_lock_lock(v85 + 6);
  sub_1D13B2E68((uint64_t)&v85[4]);
  os_unfair_lock_unlock(v85 + 6);
  unsigned int v133 = v85 + 4;
  uint64_t v87 = v141[30];
  uint64_t v88 = v141[28];
  swift_bridgeObjectRelease();
  uint64_t v89 = swift_task_dealloc();
  uint64_t v90 = ((uint64_t (*)(uint64_t))v128)(v89);
  v125(v87, v127, v88);
  swift_bridgeObjectRetain();
  unsigned int v91 = sub_1D13F2508();
  os_log_type_t v92 = sub_1D13F2858();
  if (os_log_type_enabled(v91, v92))
  {
    unint64_t v93 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v93 = 134217984;
    uint64_t v70 = v141;
    *(v138 - 2) = *(void *)(v90 + 16);
    sub_1D13F2978();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D0FA3000, v91, v92, "new active contexts: %ld", v93, 0xCu);
    MEMORY[0x1D25F77B0](v93, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  v122(v70[30], v70[28]);
  int64_t v94 = *(void *)(v90 + 16);
  char v95 = (void *)MEMORY[0x1E4FBC860];
  if (v94)
  {
    unint64_t v130 = v86;
    unsigned int v96 = v138 - 20;
    v142[0] = MEMORY[0x1E4FBC860];
    sub_1D1394C68(0, v94, 0);
    uint64_t v97 = v90;
    uint64_t v98 = v90 + 32;
    char v95 = (void *)v142[0];
    do
    {
      sub_1D1386110(v98, (uint64_t)v96);
      __swift_project_boxed_opaque_existential_1(v96, v70[5]);
      sub_1D13F2A98();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v96);
      uint64_t v100 = v70[15];
      uint64_t v99 = v70[16];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1D1394C68(0, v95[2] + 1, 1);
        char v95 = (void *)v142[0];
      }
      unint64_t v102 = v95[2];
      unint64_t v101 = v95[3];
      if (v102 >= v101 >> 1)
      {
        sub_1D1394C68(v101 > 1, v102 + 1, 1);
        char v95 = (void *)v142[0];
      }
      v95[2] = v102 + 1;
      unint64_t v103 = &v95[2 * v102];
      v103[4] = v100;
      v103[5] = v99;
      v98 += 40;
      --v94;
      uint64_t v70 = v141;
    }
    while (v94);
    char v104 = v129;
    unsigned int v86 = v130;
    uint64_t v69 = v136;
    uint64_t v90 = v97;
  }
  else
  {
    char v104 = v129;
  }
  char v106 = sub_1D13B27EC(v104, v95);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v106)
  {
    char v137 = v106;
    uint64_t v107 = v70[45];
    uint64_t v108 = v70[40];
    uint64_t v109 = v70[41];
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v107, v108);
  }
  else
  {
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v112 = swift_task_alloc();
    *(void *)(v112 + 16) = sub_1D13B2EAC;
    *(void *)(v112 + 24) = KeyPath;
    swift_retain();
    os_unfair_lock_lock(v86);
    sub_1D13AE284(v133, v142);
    os_unfair_lock_unlock(v86);
    char v137 = v106;
    unint64_t v113 = v70;
    uint64_t v114 = v142[0];
    uint64_t v115 = v142[1];
    swift_release();
    swift_task_dealloc();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v116 = v113[45];
    uint64_t v117 = v113[40];
    uint64_t v118 = v113[41];
    if (v114)
    {
      uint64_t v119 = *v138;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v115 + 8))(v119, v90, ObjectType, v115);
      swift_bridgeObjectRelease();

      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v116, v117);
    }
    else
    {
      (*(void (**)(void, void))(v118 + 8))(v113[45], v113[40]);
      swift_bridgeObjectRelease();
    }
    uint64_t v70 = v141;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v110 = (void (*)(BOOL))v70[1];
  v110((v137 & 1) == 0);
}

id *sub_1D13B2754()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_1D13B27B4()
{
  sub_1D13B2754();
  return MEMORY[0x1F4188210](v0);
}

uint64_t sub_1D13B27E0()
{
  return v0;
}

uint64_t sub_1D13B27EC(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (char v6 = sub_1D13F2C58(), result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    unint64_t v9 = a1 + 7;
    for (uint64_t i = a2 + 7; ; i += 2)
    {
      BOOL v11 = *(v9 - 1) == *(i - 1) && *v9 == *i;
      if (!v11 && (sub_1D13F2C58() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

void *sub_1D13B28B4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64E228);
      unint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      void v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1D13B36A0(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1D13B29C4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64E218);
      unint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      void v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1D13B378C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D13B2AE8(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_1D13F2B88();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_1D13F2B88();
    swift_bridgeObjectRelease();
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x1D25F54C0](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    unint64_t *v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = sub_1D13B347C(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_1D13F2B88();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();
  return sub_1D13F2768();
}

uint64_t sub_1D13B2CB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_1D13B29C4(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[5 * v8 + 4];
  if (a1 + 32 < v9 + 40 * v2 && v9 < a1 + 32 + 40 * v2) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64DA70);
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_1D13F2BC8();
  __break(1u);
  return result;
}

uint64_t sub_1D13B2E20(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D13B2E68(uint64_t a1)
{
  *(void *)(*(void *)a1 + 16) = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D13B2EAC()
{
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  return v1;
}

uint64_t sub_1D13B2EF8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_1D13B2F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t type metadata accessor for ContextualEngineContextStore()
{
  return self;
}

uint64_t sub_1D13B2F74()
{
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1D13B2FAC()
{
  return sub_1D13AF940();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t sub_1D13B2FCC(void *a1)
{
  return sub_1D13AFE5C(a1, v1);
}

uint64_t sub_1D13B2FD4()
{
  return sub_1D13B0474();
}

uint64_t sub_1D13B2FDC(uint64_t *a1)
{
  return sub_1D13B0DC4(a1);
}

uint64_t sub_1D13B2FE4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1D13B302C()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_1D138E300;
  int64_t v4 = (void *)swift_task_alloc();
  v3[2] = v4;
  void *v4 = v3;
  v4[1] = sub_1D138DF50;
  return sub_1D13B0FA0(v2);
}

uint64_t sub_1D13B3114(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1D138E300;
  return sub_1D13B0808(a1, v5, v6, v4);
}

uint64_t sub_1D13B31B4()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1D13B31FC()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[2] = v2;
  void v4[3] = v3;
  v4[1] = sub_1D138E300;
  return MEMORY[0x1F4188298](sub_1D13B01F4, v2, 0);
}

uint64_t objectdestroyTm_1()
{
  swift_unknownObjectRelease();
  swift_release();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1D13B32EC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1D138DF50;
  return sub_1D13AFA60(a1, v5, v6, v4);
}

uint64_t sub_1D13B338C()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D13B33C4(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1D138E300;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1EA64DDE0 + dword_1EA64DDE0);
  return v6(a1, v4);
}

uint64_t sub_1D13B347C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_1D13F2B88();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1D13F2B88();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1D139DEE0((unint64_t *)&unk_1EA64E238, &qword_1EA64E230);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64E230);
          BOOL v12 = sub_1D139DCFC(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1D13F2408();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = sub_1D13F2BC8();
  __break(1u);
  return result;
}

char *sub_1D13B36A0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_1D13F2BC8();
  __break(1u);
  return result;
}

uint64_t sub_1D13B378C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64DA70);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1D13F2BC8();
  __break(1u);
  return result;
}

void sub_1D13B38B8()
{
  qword_1EA650048 = 0x7374726F7053;
  qword_1EA650050 = 0xE600000000000000;
}

uint64_t *sub_1D13B38D8()
{
  if (qword_1EA64FDF0 != -1) {
    swift_once();
  }
  return &qword_1EA650048;
}

uint64_t sub_1D13B3924()
{
  if (qword_1EA64FDF0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = qword_1EA650048;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_1D13B39A8(uint64_t a1, uint64_t a2)
{
  if (qword_1EA64FDF0 != -1) {
    swift_once();
  }
  swift_beginAccess();
  qword_1EA650048 = a1;
  qword_1EA650050 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D13B3A34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  v3[4] = a2;
  void v3[5] = v4;
  v3[3] = a1;
  uint64_t v5 = sub_1D13F2538();
  v3[6] = v5;
  v3[7] = *(void *)(v5 - 8);
  v3[8] = swift_task_alloc();
  uint64_t v6 = sub_1D13F2028();
  v3[9] = v6;
  v3[10] = *(void *)(v6 - 8);
  v3[11] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD239C8);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  uint64_t v7 = sub_1D13F1FA8();
  v3[14] = v7;
  v3[15] = *(void *)(v7 - 8);
  uint8_t v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  uint64_t v8 = sub_1D13F2048();
  v3[18] = v8;
  v3[19] = *(void *)(v8 - 8);
  v3[20] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D13B3C80, 0, 0);
}

uint64_t sub_1D13B3C80()
{
  uint64_t v2 = v0 + 13;
  uint64_t v1 = v0[13];
  uint64_t v3 = v0[15];
  uint64_t v39 = v0[14];
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[11];
  uint64_t v6 = v0[9];
  sub_1D13F2018();
  unsigned int v37 = *MEMORY[0x1E4F27C10];
  id v36 = *(void (**)(uint64_t))(v4 + 104);
  v36(v5);
  sub_1D13F2008();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v7(v5, v6);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v8(v1, 1, v39) == 1) {
    goto LABEL_4;
  }
  uint64_t v2 = v0 + 12;
  uint64_t v34 = v0[12];
  uint64_t v35 = v0[14];
  uint64_t v9 = v0[11];
  uint64_t v10 = v0[9];
  unint64_t v33 = *(void (**)(void, void))(v0[15] + 32);
  v33(v0[17], v0[13]);
  ((void (*)(uint64_t, void, uint64_t))v36)(v9, v37, v10);
  sub_1D13F2008();
  v7(v9, v10);
  if (v8(v34, 1, v35) == 1)
  {
    (*(void (**)(void, void))(v0[15] + 8))(v0[17], v0[14]);
LABEL_4:
    uint64_t v12 = v0[7];
    uint64_t v11 = v0[8];
    uint64_t v13 = v0[6];
    sub_1D139E01C(*v2);
    uint64_t v14 = sub_1D13C3040();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v14, v13);
    uint64_t v15 = sub_1D13F2508();
    os_log_type_t v16 = sub_1D13F2838();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_1D0FA3000, v15, v16, "Unable to subtract 5 hours from date", v17, 2u);
      MEMORY[0x1D25F77B0](v17, -1, -1);
    }
    uint64_t v19 = v0[19];
    uint64_t v18 = v0[20];
    uint64_t v20 = v0[18];
    uint64_t v22 = v0[7];
    uint64_t v21 = v0[8];
    uint64_t v23 = v0[6];

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = (uint64_t (*)(uint64_t))v0[1];
    uint64_t v25 = MEMORY[0x1E4FBC860];
    return v24(v25);
  }
  ((void (*)(void, void, void))v33)(v0[16], v0[12], v0[14]);
  uint64_t v27 = sub_1D13B9E90();
  uint64_t v28 = (void *)*v27;
  v0[21] = *v27;
  id v29 = *(int **)((*MEMORY[0x1E4FBC8C8] & *v28) + 0x78);
  uint64_t v38 = (uint64_t (*)(uint64_t, uint64_t))((char *)v29 + *v29);
  v28;
  uint64_t v30 = (void *)swift_task_alloc();
  v0[22] = v30;
  *uint64_t v30 = v0;
  v30[1] = sub_1D13B40D4;
  uint64_t v31 = v0[16];
  uint64_t v32 = v0[17];
  return v38(v32, v31);
}

uint64_t sub_1D13B40D4(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void **)(*v2 + 168);
  *(void *)(*v2 + 184) = v1;
  swift_task_dealloc();

  if (v1)
  {
    uint64_t v6 = sub_1D13B4394;
  }
  else
  {
    *(void *)(v4 + 192) = a1;
    uint64_t v6 = sub_1D13B421C;
  }
  return MEMORY[0x1F4188298](v6, 0, 0);
}

uint64_t sub_1D13B421C()
{
  uint64_t v1 = v0[24];
  uint64_t v3 = v0[19];
  uint64_t v2 = v0[20];
  uint64_t v14 = v0[18];
  uint64_t v4 = v0[16];
  uint64_t v13 = v0[17];
  uint64_t v6 = v0[14];
  uint64_t v5 = v0[15];
  uint64_t v7 = v0[5];
  uint64_t v8 = swift_task_alloc();
  *(void *)(v8 + 16) = v2;
  *(void *)(v8 + 24) = v7;
  uint64_t v9 = sub_1D13B4BC8(v1, sub_1D13B4A14);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v10(v4, v6);
  v10(v13, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v14);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(uint64_t))v0[1];
  return v11(v9);
}

uint64_t sub_1D13B4394()
{
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v4 = v0[17];
  uint64_t v3 = v0[18];
  uint64_t v5 = v0[14];
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v0[15] + 8);
  v6(v0[16], v5);
  v6(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1D13B44B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v59 = a4;
  uint64_t v54 = a2;
  uint64_t v55 = a3;
  uint64_t v5 = type metadata accessor for SportsDependencies(0);
  MEMORY[0x1F4188790](v5 - 8, v6);
  uint64_t v57 = (uint64_t)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8, v9);
  uint64_t v56 = (uint64_t *)((char *)&v52 - v10);
  uint64_t v11 = sub_1D13F2538();
  uint64_t v52 = *(void *)(v11 - 8);
  uint64_t v53 = v11;
  MEMORY[0x1F4188790](v11, v12);
  uint64_t v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1D13F2028();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15, v17);
  uint64_t v19 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD239C8);
  MEMORY[0x1F4188790](v20 - 8, v21);
  uint64_t v23 = (char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_1D13F1FA8();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24, v26);
  uint64_t v28 = (char *)&v52 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v31 = MEMORY[0x1F4188790](v29, v30);
  uint64_t v58 = (char *)&v52 - v32;
  (*(void (**)(char *, void, uint64_t, double))(v16 + 104))(v19, *MEMORY[0x1E4F27C10], v15, v31);
  uint64_t v33 = a1;
  sub_1D13F2008();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1)
  {
    sub_1D139E01C((uint64_t)v23);
    uint64_t v34 = sub_1D13C3040();
    uint64_t v36 = v52;
    uint64_t v35 = v53;
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v14, v34, v53);
    unsigned int v37 = sub_1D13F2508();
    os_log_type_t v38 = sub_1D13F2838();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl(&dword_1D0FA3000, v37, v38, "Unable to add 5 hours to game start date", v39, 2u);
      MEMORY[0x1D25F77B0](v39, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v35);
    return MEMORY[0x1E4FBC860];
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v58, v23, v24);
    uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
    v41(v28, a1, v24);
    uint64_t v42 = v55;
    swift_bridgeObjectRetain();
    uint64_t v43 = v56;
    sub_1D13A1A68(v54, v42, (uint64_t)v28, v56);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64E260);
    uint64_t v44 = *(void *)(type metadata accessor for SportsContextEntry(0) - 8);
    uint64_t v45 = *(void *)(v44 + 72);
    unint64_t v46 = (*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
    uint64_t v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_1D142C8C0;
    uint64_t v47 = v40 + v46;
    v41(v28, v33, v24);
    uint64_t v48 = v57;
    sub_1D13A1FC8((uint64_t)v43, v57);
    sub_1D13A211C((uint64_t)v28, 1, v48, v47);
    uint64_t v49 = v47 + v45;
    os_log_type_t v50 = v58;
    v41(v28, (uint64_t)v58, v24);
    sub_1D13A1FC8((uint64_t)v43, v48);
    sub_1D13A211C((uint64_t)v28, 0, v48, v49);
    sub_1D13ABB90((uint64_t)v43);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v50, v24);
  }
  return v40;
}

uint64_t sub_1D13B4A14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D13B44B0(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_1D13B4A1C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D13B4A3C(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1D13B4A3C(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64E250);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    void v10[2] = v8;
    void v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64E258);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1D13F2BC8();
  __break(1u);
  return result;
}

uint64_t sub_1D13B4BC8(uint64_t a1, uint64_t (*a2)(uint64_t, void, void))
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
    sub_1D13B4A1C(0, v2, 0);
    uint64_t v3 = v13;
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD239B8);
    uint64_t v6 = a1
       + ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80));
    uint64_t v7 = *(void *)(*(void *)(v5 - 8) + 72);
    do
    {
      uint64_t v8 = a2(v6, *(void *)(v6 + *(int *)(v5 + 48)), *(void *)(v6 + *(int *)(v5 + 48) + 8));
      unint64_t v10 = *(void *)(v13 + 16);
      unint64_t v9 = *(void *)(v13 + 24);
      if (v10 >= v9 >> 1) {
        sub_1D13B4A1C(v9 > 1, v10 + 1, 1);
      }
      *(void *)(v13 + 16) = v10 + 1;
      *(void *)(v13 + 8 * v10 + 32) = v8;
      v6 += v7;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t type metadata accessor for SportsContextProducer()
{
  return self;
}

uint64_t sub_1D13B4D44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_1D13F1FA8();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);
  return v5(a2, a1, v4);
}

uint64_t sub_1D13B4DB0()
{
  type metadata accessor for TimeOfDayContext(0);
  sub_1D13B5C20(&qword_1EA64E268);
  return sub_1D1387760();
}

uint64_t type metadata accessor for TimeOfDayContext(uint64_t a1)
{
  return sub_1D13A1ED4(a1, (uint64_t *)&unk_1EA64FFA0);
}

uint64_t sub_1D13B4E30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21AppPredictionInternal16TimeOfDayContext_dependencies;
  swift_beginAccess();
  return sub_1D13B4E84(v3, a1);
}

uint64_t sub_1D13B4E84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TimeOfDayContextDependencies(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for TimeOfDayContextDependencies(uint64_t a1)
{
  return sub_1D13A1ED4(a1, (uint64_t *)&unk_1EA64FF90);
}

uint64_t sub_1D13B4F08(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC21AppPredictionInternal16TimeOfDayContext_dependencies;
  swift_beginAccess();
  sub_1D13B4F64(a1, v3);
  return swift_endAccess();
}

uint64_t sub_1D13B4F64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TimeOfDayContextDependencies(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_1D13B4FC8())()
{
  return j__swift_endAccess;
}

uint64_t sub_1D13B5024(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  sub_1D13B5098(a1, v2 + OBJC_IVAR____TtC21AppPredictionInternal16TimeOfDayContext_dependencies);
  return v2;
}

uint64_t sub_1D13B5070(uint64_t a1)
{
  sub_1D13B5098(a1, v1 + OBJC_IVAR____TtC21AppPredictionInternal16TimeOfDayContext_dependencies);
  return v1;
}

uint64_t sub_1D13B5098(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TimeOfDayContextDependencies(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D13B50FC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for TimeOfDayContextDependencies(0);
  MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1D13F2028();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  unint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1D13F2048();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11, v13);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D13F2018();
  uint64_t v16 = (*(uint64_t (**)(char *, void, uint64_t))(v7 + 104))(v10, *MEMORY[0x1E4F27C10], v6);
  (*(void (**)(uint64_t))(*v0 + 112))(v16);
  uint64_t v17 = sub_1D13F2038();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  uint64_t v18 = sub_1D13F1FA8();
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v18 - 8) + 8))(v5, v18);
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(v1 + 96))(v19);
  uint64_t result = (*(uint64_t (**)(void))(v1 + 104))();
  if (result >= v20) {
    return v17 >= v20 && v17 < result;
  }
  __break(1u);
  return result;
}

uint64_t sub_1D13B53B4()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t sub_1D13B5424()
{
  sub_1D13B544C(v0 + OBJC_IVAR____TtC21AppPredictionInternal16TimeOfDayContext_dependencies);
  return v0;
}

uint64_t sub_1D13B544C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TimeOfDayContextDependencies(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1D13B54A8()
{
  sub_1D13B544C(v0 + OBJC_IVAR____TtC21AppPredictionInternal16TimeOfDayContext_dependencies);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t sub_1D13B550C()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_1D13B5520()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t sub_1D13B5564()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))() & 1;
}

uint64_t sub_1D13B55AC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t sub_1D13B55F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 136))();
  *a1 = result;
  return result;
}

uint64_t sub_1D13B5628@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for TimeOfDayContext(0);
  sub_1D13B5C20(&qword_1EA64E268);
  uint64_t result = sub_1D1387790();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1D13B568C()
{
  sub_1D13B623C();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1D142D670;
  *(void *)(v0 + 32) = type metadata accessor for TimeOfDayContextStore.MorningContext(0);
  *(void *)(v0 + 40) = type metadata accessor for TimeOfDayContextStore.AfternoonContext(0);
  uint64_t result = type metadata accessor for TimeOfDayContextStore.EveningContext(0);
  *(void *)(v0 + 4_Block_object_dispose(&STACK[0x210], 8) = result;
  qword_1EA650058 = v0;
  return result;
}

uint64_t *sub_1D13B5704()
{
  if (qword_1EA64FE00 != -1) {
    swift_once();
  }
  return &qword_1EA650058;
}

uint64_t sub_1D13B5750()
{
  if (qword_1EA64FE00 != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D13B57AC(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v4 = v2;
  if (qword_1EA64FE00 != -1) {
    uint64_t v2 = swift_once();
  }
  uint64_t v5 = qword_1EA650058;
  MEMORY[0x1F4188790](v2, v3);
  v8[2] = a1;
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1D13B5A1C((void (*)(uint64_t *__return_ptr, uint64_t *))sub_1D13B59F0, (uint64_t)v8, v5);
  swift_bridgeObjectRelease();
  sub_1D13B544C(a1);
  *(void *)(v4 + 16) = v6;
  return v4;
}

uint64_t sub_1D13B5898(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (qword_1EA64FE00 != -1) {
    a1 = swift_once();
  }
  uint64_t v4 = qword_1EA650058;
  MEMORY[0x1F4188790](a1, a2);
  v7[2] = v3;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_1D13B5A1C((void (*)(uint64_t *__return_ptr, uint64_t *))sub_1D13B62A0, (uint64_t)v7, v4);
  swift_bridgeObjectRelease();
  sub_1D13B544C(v3);
  *(void *)(v2 + 16) = v5;
  return v2;
}

uint64_t sub_1D13B5970(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = type metadata accessor for TimeOfDayContext(0);
  uint64_t v5 = sub_1D13B5C20(&qword_1EA64E268);
  return sub_1D1387878(v3, a2, v4, v4, v5, v5);
}

uint64_t sub_1D13B59F0(uint64_t *a1)
{
  return sub_1D13B5970(a1, *(void *)(v1 + 16));
}

uint64_t sub_1D13B5A1C(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v6)
  {
    uint64_t v12 = MEMORY[0x1E4FBC860];
    sub_1D13F2B08();
    for (unint64_t i = (uint64_t *)(a3 + 32); ; ++i)
    {
      uint64_t v10 = *i;
      a1(&v11, &v10);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      sub_1D13F2AE8();
      sub_1D13F2B18();
      sub_1D13F2B28();
      sub_1D13F2AF8();
      if (!--v6) {
        return v12;
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1D13B5B10()
{
  return 6;
}

uint64_t sub_1D13B5B18()
{
  return 12;
}

uint64_t sub_1D13B5B20()
{
  return 0x676E696E726F4DLL;
}

uint64_t sub_1D13B5B40()
{
  return 17;
}

uint64_t sub_1D13B5B48()
{
  return 0x6F6F6E7265746641;
}

uint64_t sub_1D13B5B64()
{
  return 24;
}

uint64_t sub_1D13B5B6C()
{
  return 0x676E696E657645;
}

uint64_t sub_1D13B5B84()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1D13B5BA4()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186488](v0, 24, 7);
}

uint64_t sub_1D13B5BDC(uint64_t a1)
{
  uint64_t result = sub_1D13B5C20(&qword_1EA64E270);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x210], 8) = result;
  return result;
}

uint64_t sub_1D13B5C20(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for TimeOfDayContext(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D13B5C64()
{
  return sub_1D13B5C20(&qword_1EA64E268);
}

uint64_t sub_1D13B5C98()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t sub_1D13B5CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D13F1FA8();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  return v5(a1, a2, v4);
}

uint64_t sub_1D13B5D48(uint64_t a1)
{
  uint64_t v2 = sub_1D13F1FA8();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t sub_1D13B5DAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D13F1FA8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1D13B5E10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D13F1FA8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1D13B5E74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D13F1FA8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1D13B5ED8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D13F1FA8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1D13B5F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1D13B5F50);
}

uint64_t sub_1D13B5F50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D13F1FA8();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t sub_1D13B5FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1D13B5FD0);
}

uint64_t sub_1D13B5FD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D13F1FA8();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t sub_1D13B6040()
{
  uint64_t result = sub_1D13F1FA8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1D13B60CC()
{
  return type metadata accessor for TimeOfDayContext(0);
}

uint64_t sub_1D13B60D4()
{
  uint64_t result = sub_1D13F1FA8();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for TimeOfDayContextStore()
{
  return self;
}

uint64_t sub_1D13B6188()
{
  return type metadata accessor for TimeOfDayContextStore.MorningContext(0);
}

uint64_t type metadata accessor for TimeOfDayContextStore.MorningContext(uint64_t a1)
{
  return sub_1D13A1ED4(a1, (uint64_t *)&unk_1EA64FFB0);
}

uint64_t sub_1D13B61B4()
{
  return type metadata accessor for TimeOfDayContextStore.AfternoonContext(0);
}

uint64_t type metadata accessor for TimeOfDayContextStore.AfternoonContext(uint64_t a1)
{
  return sub_1D13A1ED4(a1, (uint64_t *)&unk_1EA64FFC0);
}

uint64_t sub_1D13B61DC()
{
  return type metadata accessor for TimeOfDayContextStore.EveningContext(0);
}

uint64_t type metadata accessor for TimeOfDayContextStore.EveningContext(uint64_t a1)
{
  return sub_1D13A1ED4(a1, (uint64_t *)&unk_1EA64FFD0);
}

uint64_t sub_1D13B6204()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1D13B623C()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64E278);
  if (swift_isClassType()) {
    uint64_t v1 = v0;
  }
  else {
    uint64_t v1 = 0;
  }
  if (v1) {
    uint64_t v2 = (uint64_t *)&unk_1EA64D850;
  }
  else {
    uint64_t v2 = (uint64_t *)&unk_1EA64E280;
  }
  return __swift_instantiateConcreteTypeFromMangledName(v2);
}

uint64_t sub_1D13B62A0(uint64_t *a1)
{
  return sub_1D13B59F0(a1);
}

void *static RelevantContextConverter.context(from:)(void *a1)
{
  return sub_1D13B6E54(a1);
}

{
  return sub_1D13B6E54(a1);
}

id DateRelevantContext.__allocating_init(startDate:endDate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (char *)objc_allocWithZone(v2);
  uint64_t v6 = &v5[OBJC_IVAR___ATXDateRelevantContext_startDate];
  uint64_t v7 = sub_1D13F1FA8();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  sub_1D1386614(a2, (uint64_t)&v5[OBJC_IVAR___ATXDateRelevantContext_endDate]);
  v11.receiver = v5;
  v11.super_class = v2;
  id v9 = objc_msgSendSuper2(&v11, sel_init);
  sub_1D139E01C(a2);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return v9;
}

id RelevantContextConverter.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RelevantContextConverter();
  return objc_msgSendSuper2(&v2, sel_init);
}

id RelevantContextConverter.__deallocating_deinit(uint64_t a1)
{
  return sub_1D13B6D9C(a1, type metadata accessor for RelevantContextConverter);
}

uint64_t DateRelevantContext.startDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR___ATXDateRelevantContext_startDate;
  uint64_t v4 = sub_1D13F1FA8();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t DateRelevantContext.endDate.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1D1386614(v1 + OBJC_IVAR___ATXDateRelevantContext_endDate, a1);
}

id DateRelevantContext.init(startDate:endDate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &v2[OBJC_IVAR___ATXDateRelevantContext_startDate];
  uint64_t v6 = sub_1D13F1FA8();
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v5, a1, v6);
  sub_1D1386614(a2, (uint64_t)&v2[OBJC_IVAR___ATXDateRelevantContext_endDate]);
  v10.receiver = v2;
  v10.super_class = (Class)type metadata accessor for DateRelevantContext();
  id v8 = objc_msgSendSuper2(&v10, sel_init);
  sub_1D139E01C(a2);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
  return v8;
}

unint64_t sub_1D13B6A4C()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD239C8);
  MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1D13F1FA8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  objc_super v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D1386614(v1 + OBJC_IVAR___ATXDateRelevantContext_endDate, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_1D139E01C((uint64_t)v5);
    unint64_t v13 = 0;
    unint64_t v14 = 0xE000000000000000;
    sub_1D13F2A78();
    swift_bridgeObjectRelease();
    unint64_t v13 = 0xD000000000000018;
    unint64_t v14 = 0x80000001D1484DB0;
    sub_1D139DE2C();
    sub_1D13F2C48();
    sub_1D13F26F8();
    swift_bridgeObjectRelease();
    sub_1D13F26F8();
    return v13;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v5, v6);
    unint64_t v13 = 0;
    unint64_t v14 = 0xE000000000000000;
    sub_1D13F2A78();
    swift_bridgeObjectRelease();
    unint64_t v13 = 0xD000000000000018;
    unint64_t v14 = 0x80000001D1484DB0;
    sub_1D139DE2C();
    sub_1D13F2C48();
    sub_1D13F26F8();
    swift_bridgeObjectRelease();
    sub_1D13F26F8();
    sub_1D13F2C48();
    sub_1D13F26F8();
    swift_bridgeObjectRelease();
    sub_1D13F26F8();
    unint64_t v11 = v13;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  return v11;
}

id DateRelevantContext.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void DateRelevantContext.init()()
{
}

id DateRelevantContext.__deallocating_deinit()
{
  return sub_1D13B6D9C(0, type metadata accessor for DateRelevantContext);
}

id sub_1D13B6D9C(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

void *sub_1D13B6E54(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD239C8);
  MEMORY[0x1F4188790](v2 - 8, v3);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1D13F1FA8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  objc_super v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  self;
  unint64_t v11 = (void *)swift_dynamicCastObjCClass();
  if (v11)
  {
    id v12 = a1;
    id v13 = objc_msgSend(v11, sel_startDate);
    sub_1D13F1F78();

    id v14 = objc_msgSend(v11, sel_endDate);
    if (v14)
    {
      uint64_t v15 = v14;
      sub_1D13F1F78();

      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v16 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, v16, 1, v6);
    uint64_t v17 = (objc_class *)type metadata accessor for DateRelevantContext();
    id v18 = objc_allocWithZone(v17);
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))((uint64_t)v18 + OBJC_IVAR___ATXDateRelevantContext_startDate, v10, v6);
    sub_1D1386614((uint64_t)v5, (uint64_t)v18 + OBJC_IVAR___ATXDateRelevantContext_endDate);
    v20.receiver = v18;
    v20.super_class = v17;
    unint64_t v11 = objc_msgSendSuper2(&v20, sel_init);
    sub_1D139E01C((uint64_t)v5);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  return v11;
}

uint64_t type metadata accessor for RelevantContextConverter()
{
  return self;
}

uint64_t type metadata accessor for DateRelevantContext()
{
  uint64_t result = qword_1EBD24090;
  if (!qword_1EBD24090) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1D13B70FC()
{
  return type metadata accessor for DateRelevantContext();
}

void sub_1D13B7104()
{
  sub_1D13F1FA8();
  if (v0 <= 0x3F)
  {
    sub_1D13B71FC();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for DateRelevantContext(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DateRelevantContext);
}

uint64_t dispatch thunk of DateRelevantContext.__allocating_init(startDate:endDate:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

void sub_1D13B71FC()
{
  if (!qword_1EBD236E0)
  {
    sub_1D13F1FA8();
    unint64_t v0 = sub_1D13F2968();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBD236E0);
    }
  }
}

uint64_t sub_1D13B7258()
{
  return sub_1D13B8A68();
}

void sub_1D13B7270(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_1D13B72FC(uint64_t a1, unint64_t a2)
{
  return sub_1D13B8C04(a1, a2);
}

void *sub_1D13B732C()
{
  return sub_1D13B8D3C();
}

id sub_1D13B735C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t v7 = sub_1D13F2688();
  uint64_t v9 = v8;
  id v10 = a1;
  a5(v7, v9);
  swift_bridgeObjectRelease();

  unint64_t v11 = (void *)sub_1D13F2678();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1D13B7448(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1EA64E290 + dword_1EA64E290);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1D13B74FC;
  return v7(a1, a2);
}

uint64_t sub_1D13B74FC(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t sub_1D13B75FC(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1D13B88E0(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  uint64_t result = sub_1D13B7E98(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1D13B77E8(int a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v5 = sub_1D13F2688();
  uint64_t v7 = v6;
  v3[4] = v6;
  unint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1EA64E290 + dword_1EA64E290);
  id v8 = a3;
  uint64_t v9 = (void *)swift_task_alloc();
  void v3[5] = v9;
  void *v9 = v3;
  v9[1] = sub_1D13B78D0;
  return v11(v5, v7);
}

uint64_t sub_1D13B78D0()
{
  uint64_t v2 = v0;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void **)(*v1 + 16);
  uint64_t v5 = *v1;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  if (v2)
  {
    uint64_t v6 = sub_1D13F1E88();

    uint64_t v7 = 0;
    id v8 = (void *)v6;
  }
  else
  {
    uint64_t v7 = sub_1D13F2738();
    swift_bridgeObjectRelease();
    uint64_t v6 = 0;
    id v8 = (void *)v7;
  }
  uint64_t v9 = *(void (***)(void, void, void))(v3 + 24);
  v9[2](v9, v7, v6);

  _Block_release(v9);
  id v10 = *(uint64_t (**)(void))(v5 + 8);
  return v10();
}

id MegadomeContextualPersonRelationships.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id MegadomeContextualPersonRelationships.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MegadomeContextualPersonRelationships();
  return objc_msgSendSuper2(&v2, sel_init);
}

id MegadomeContextualPersonRelationships.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MegadomeContextualPersonRelationships();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

char *sub_1D13B7B5C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD23890);
    id v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    id v10 = (char *)MEMORY[0x1E4FBC860];
  }
  id v13 = v10 + 32;
  id v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_1D13B7C60(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64E2D0);
    id v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    void v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    id v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[3 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64E2D8);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1D13B7D9C(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64E2C8);
    id v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    id v10 = (char *)MEMORY[0x1E4FBC860];
  }
  id v13 = v10 + 32;
  id v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1D13B7E98(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_1D13F2C38();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_138;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v86 = *a1;
      uint64_t v87 = *a1 + 16;
      uint64_t v88 = -1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        double v90 = *(double *)(v86 + 24 * i + 16);
        uint64_t v91 = v88;
        uint64_t v92 = v87;
        do
        {
          if (*(double *)v92 >= v90) {
            break;
          }
          if (!v86) {
            goto LABEL_142;
          }
          uint64_t v93 = *(void *)(v92 + 8);
          uint64_t v94 = *(void *)(v92 + 16);
          *(_OWORD *)(v92 + _Block_object_dispose(&STACK[0x210], 8) = *(_OWORD *)(v92 - 16);
          *(void *)(v92 + 24) = *(void *)v92;
          *(void *)(v92 - 16) = v93;
          *(void *)(v92 - _Block_object_dispose(&STACK[0x210], 8) = v94;
          *(double *)uint64_t v92 = v90;
          v92 -= 24;
        }
        while (!__CFADD__(v91++, 1));
        v87 += 24;
        --v88;
      }
    }
  }
  else
  {
    if (v3 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v3 + 1;
    }
    if (v3 < -1) {
      goto LABEL_137;
    }
    uint64_t v6 = result;
    unint64_t v103 = a1;
    if (v3 > 1)
    {
      uint64_t v7 = v5 >> 1;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64E2D8);
      uint64_t result = sub_1D13F2788();
      *(void *)(result + 16) = v7;
      uint64_t v105 = result;
      uint64_t v109 = (double *)(result + 32);
LABEL_13:
      uint64_t v9 = 0;
      uint64_t v10 = *a1;
      uint64_t v104 = *a1 + 64;
      uint64_t v11 = MEMORY[0x1E4FBC860];
      uint64_t v106 = v6;
      uint64_t v107 = v3;
      uint64_t v108 = v10;
      while (1)
      {
        uint64_t v13 = v9++;
        if (v9 < v3)
        {
          double v14 = *(double *)(v10 + 24 * v9 + 16);
          double v15 = *(double *)(v10 + 24 * v13 + 16);
          uint64_t v9 = v13 + 2;
          if (v13 + 2 < v3)
          {
            uint64_t v16 = (double *)(v104 + 24 * v13);
            double v17 = v14;
            while (1)
            {
              double v18 = v17;
              double v17 = *v16;
              if (v15 < v14 == v18 >= *v16) {
                break;
              }
              ++v9;
              v16 += 3;
              if (v3 == v9)
              {
                uint64_t v9 = v3;
                break;
              }
            }
          }
          if (v15 < v14)
          {
            if (v9 < v13) {
              goto LABEL_139;
            }
            if (v13 < v9)
            {
              uint64_t v19 = 24 * v9;
              uint64_t v20 = 24 * v13;
              uint64_t v21 = v9;
              uint64_t v22 = v13;
              do
              {
                if (v22 != --v21)
                {
                  if (!v10) {
                    goto LABEL_145;
                  }
                  uint64_t v23 = v10 + v20;
                  uint64_t v24 = v10 + v19;
                  uint64_t v25 = *(void *)(v10 + v20);
                  uint64_t v26 = *(void *)(v10 + v20 + 8);
                  uint64_t v27 = *(void *)(v10 + v20 + 16);
                  uint64_t v28 = *(void *)(v10 + v19 - 8);
                  *(_OWORD *)uint64_t v23 = *(_OWORD *)(v10 + v19 - 24);
                  *(void *)(v23 + 16) = v28;
                  *(void *)(v24 - 24) = v25;
                  *(void *)(v24 - 16) = v26;
                  *(void *)(v24 - _Block_object_dispose(&STACK[0x210], 8) = v27;
                }
                ++v22;
                v19 -= 24;
                v20 += 24;
              }
              while (v22 < v21);
            }
          }
        }
        if (v9 < v3)
        {
          if (__OFSUB__(v9, v13)) {
            goto LABEL_136;
          }
          if (v9 - v13 < v6)
          {
            uint64_t v29 = v13 + v6;
            if (__OFADD__(v13, v6)) {
              goto LABEL_140;
            }
            if (v29 >= v3) {
              uint64_t v29 = v3;
            }
            if (v29 < v13)
            {
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
              return result;
            }
            if (v9 != v29)
            {
              uint64_t v30 = (double *)(v10 + 24 * v9);
              do
              {
                double v31 = *(double *)(v10 + 24 * v9 + 16);
                uint64_t v32 = v13;
                uint64_t v33 = v30;
                do
                {
                  if (*(v33 - 1) >= v31) {
                    break;
                  }
                  if (!v10) {
                    goto LABEL_143;
                  }
                  double v34 = *v33;
                  uint64_t v35 = *((void *)v33 + 1);
                  *(_OWORD *)uint64_t v33 = *(_OWORD *)(v33 - 3);
                  v33[2] = *(v33 - 1);
                  *((void *)v33 - 2) = v35;
                  *(v33 - 1) = v31;
                  *(v33 - 3) = v34;
                  v33 -= 3;
                  ++v32;
                }
                while (v9 != v32);
                ++v9;
                v30 += 3;
              }
              while (v9 != v29);
              uint64_t v9 = v29;
            }
          }
        }
        if (v9 < v13) {
          goto LABEL_131;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_1D13B87D0(0, *(void *)(v11 + 16) + 1, 1, (char *)v11);
          uint64_t v11 = result;
        }
        unint64_t v37 = *(void *)(v11 + 16);
        unint64_t v36 = *(void *)(v11 + 24);
        unint64_t v12 = v37 + 1;
        uint64_t v10 = v108;
        if (v37 >= v36 >> 1)
        {
          uint64_t result = (uint64_t)sub_1D13B87D0((char *)(v36 > 1), v37 + 1, 1, (char *)v11);
          uint64_t v10 = v108;
          uint64_t v11 = result;
        }
        *(void *)(v11 + 16) = v12;
        uint64_t v38 = v11 + 32;
        uint64_t v39 = (uint64_t *)(v11 + 32 + 16 * v37);
        *uint64_t v39 = v13;
        v39[1] = v9;
        if (v37)
        {
          while (1)
          {
            unint64_t v40 = v12 - 1;
            if (v12 >= 4)
            {
              unint64_t v45 = v38 + 16 * v12;
              uint64_t v46 = *(void *)(v45 - 64);
              uint64_t v47 = *(void *)(v45 - 56);
              BOOL v51 = __OFSUB__(v47, v46);
              uint64_t v48 = v47 - v46;
              if (v51) {
                goto LABEL_120;
              }
              uint64_t v50 = *(void *)(v45 - 48);
              uint64_t v49 = *(void *)(v45 - 40);
              BOOL v51 = __OFSUB__(v49, v50);
              uint64_t v43 = v49 - v50;
              char v44 = v51;
              if (v51) {
                goto LABEL_121;
              }
              unint64_t v52 = v12 - 2;
              uint64_t v53 = (uint64_t *)(v38 + 16 * (v12 - 2));
              uint64_t v55 = *v53;
              uint64_t v54 = v53[1];
              BOOL v51 = __OFSUB__(v54, v55);
              uint64_t v56 = v54 - v55;
              if (v51) {
                goto LABEL_122;
              }
              BOOL v51 = __OFADD__(v43, v56);
              uint64_t v57 = v43 + v56;
              if (v51) {
                goto LABEL_124;
              }
              if (v57 >= v48)
              {
                uint64_t v75 = (uint64_t *)(v38 + 16 * v40);
                uint64_t v77 = *v75;
                uint64_t v76 = v75[1];
                BOOL v51 = __OFSUB__(v76, v77);
                uint64_t v78 = v76 - v77;
                if (v51) {
                  goto LABEL_130;
                }
                BOOL v68 = v43 < v78;
                goto LABEL_83;
              }
            }
            else
            {
              if (v12 != 3)
              {
                uint64_t v69 = *(void *)(v11 + 32);
                uint64_t v70 = *(void *)(v11 + 40);
                BOOL v51 = __OFSUB__(v70, v69);
                uint64_t v62 = v70 - v69;
                char v63 = v51;
                goto LABEL_77;
              }
              uint64_t v42 = *(void *)(v11 + 32);
              uint64_t v41 = *(void *)(v11 + 40);
              BOOL v51 = __OFSUB__(v41, v42);
              uint64_t v43 = v41 - v42;
              char v44 = v51;
            }
            if (v44) {
              goto LABEL_123;
            }
            unint64_t v52 = v12 - 2;
            uint64_t v58 = (uint64_t *)(v38 + 16 * (v12 - 2));
            uint64_t v60 = *v58;
            uint64_t v59 = v58[1];
            BOOL v61 = __OFSUB__(v59, v60);
            uint64_t v62 = v59 - v60;
            char v63 = v61;
            if (v61) {
              goto LABEL_125;
            }
            uint64_t v64 = (uint64_t *)(v38 + 16 * v40);
            uint64_t v66 = *v64;
            uint64_t v65 = v64[1];
            BOOL v51 = __OFSUB__(v65, v66);
            uint64_t v67 = v65 - v66;
            if (v51) {
              goto LABEL_127;
            }
            if (__OFADD__(v62, v67)) {
              goto LABEL_129;
            }
            if (v62 + v67 >= v43)
            {
              BOOL v68 = v43 < v67;
LABEL_83:
              if (v68) {
                unint64_t v40 = v52;
              }
              goto LABEL_85;
            }
LABEL_77:
            if (v63) {
              goto LABEL_126;
            }
            uint64_t v71 = (uint64_t *)(v38 + 16 * v40);
            uint64_t v73 = *v71;
            uint64_t v72 = v71[1];
            BOOL v51 = __OFSUB__(v72, v73);
            uint64_t v74 = v72 - v73;
            if (v51) {
              goto LABEL_128;
            }
            if (v74 < v62) {
              goto LABEL_15;
            }
LABEL_85:
            unint64_t v79 = v40 - 1;
            if (v40 - 1 >= v12)
            {
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
              goto LABEL_141;
            }
            if (!v10) {
              goto LABEL_144;
            }
            uint64_t v80 = v11;
            uint64_t v81 = (uint64_t *)(v38 + 16 * v79);
            uint64_t v82 = *v81;
            uint64_t v83 = (void *)(v38 + 16 * v40);
            uint64_t v84 = v83[1];
            uint64_t result = sub_1D13B8570((double *)(v10 + 24 * *v81), (double *)(v10 + 24 * *v83), v10 + 24 * v84, v109);
            if (v1) {
              goto LABEL_93;
            }
            if (v84 < v82) {
              goto LABEL_117;
            }
            if (v40 > *(void *)(v80 + 16)) {
              goto LABEL_118;
            }
            *uint64_t v81 = v82;
            *(void *)(v38 + 16 * v79 + _Block_object_dispose(&STACK[0x210], 8) = v84;
            unint64_t v85 = *(void *)(v80 + 16);
            if (v40 >= v85) {
              goto LABEL_119;
            }
            uint64_t v11 = v80;
            unint64_t v12 = v85 - 1;
            uint64_t result = (uint64_t)memmove((void *)(v38 + 16 * v40), v83 + 2, 16 * (v85 - 1 - v40));
            *(void *)(v80 + 16) = v85 - 1;
            uint64_t v10 = v108;
            if (v85 <= 2) {
              goto LABEL_15;
            }
          }
        }
        unint64_t v12 = 1;
LABEL_15:
        uint64_t v6 = v106;
        uint64_t v3 = v107;
        if (v9 >= v107)
        {
          uint64_t v8 = v105;
          goto LABEL_103;
        }
      }
    }
    uint64_t v8 = MEMORY[0x1E4FBC860];
    uint64_t v109 = (double *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 == 1)
    {
      uint64_t v105 = MEMORY[0x1E4FBC860];
      goto LABEL_13;
    }
    unint64_t v12 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    uint64_t v11 = MEMORY[0x1E4FBC860];
LABEL_103:
    uint64_t result = v11;
    uint64_t v105 = v8;
    if (v12 >= 2)
    {
      uint64_t v96 = *v103;
      do
      {
        unint64_t v97 = v12 - 2;
        if (v12 < 2) {
          goto LABEL_132;
        }
        if (!v96) {
          goto LABEL_146;
        }
        uint64_t v98 = result;
        uint64_t v99 = *(void *)(result + 32 + 16 * v97);
        uint64_t v100 = *(void *)(result + 32 + 16 * (v12 - 1) + 8);
        uint64_t result = sub_1D13B8570((double *)(v96 + 24 * v99), (double *)(v96 + 24 * *(void *)(result + 32 + 16 * (v12 - 1))), v96 + 24 * v100, v109);
        if (v1) {
          break;
        }
        if (v100 < v99) {
          goto LABEL_133;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_1D13B88CC(v98);
          uint64_t v98 = result;
        }
        if (v97 >= *(void *)(v98 + 16)) {
          goto LABEL_134;
        }
        unint64_t v101 = (void *)(v98 + 32 + 16 * v97);
        *unint64_t v101 = v99;
        v101[1] = v100;
        unint64_t v102 = *(void *)(v98 + 16);
        if (v12 > v102) {
          goto LABEL_135;
        }
        memmove((void *)(v98 + 32 + 16 * (v12 - 1)), (const void *)(v98 + 32 + 16 * v12), 16 * (v102 - v12));
        uint64_t result = v98;
        *(void *)(v98 + 16) = v102 - 1;
        unint64_t v12 = v102 - 1;
      }
      while (v102 > 2);
    }
LABEL_93:
    swift_bridgeObjectRelease();
    *(void *)(v105 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1D13B8570(double *__dst, double *__src, unint64_t a3, double *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = (char *)__src - (char *)__dst;
  int64_t v9 = ((char *)__src - (char *)__dst) / 24;
  uint64_t v10 = a3 - (void)__src;
  uint64_t v11 = (uint64_t)(a3 - (void)__src) / 24;
  if (v9 >= v11)
  {
    if (a4 != __src || &__src[3 * v11] <= a4) {
      memmove(a4, __src, 24 * v11);
    }
    unint64_t v12 = &v4[3 * v11];
    if (v7 >= v6 || v10 < 24) {
      goto LABEL_39;
    }
    unint64_t v17 = a3 - 24;
    while (1)
    {
      double v18 = (double *)(v17 + 24);
      if (*(v6 - 1) >= *(v12 - 1))
      {
        uint64_t v19 = v12 - 3;
        if (v18 != v12)
        {
          v12 -= 3;
          goto LABEL_36;
        }
        BOOL v20 = v17 >= (unint64_t)v12;
        v12 -= 3;
        if (v20) {
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v19 = v6 - 3;
        if (v18 != v6)
        {
          v6 -= 3;
LABEL_36:
          long long v21 = *(_OWORD *)v19;
          *(double *)(v17 + 16) = v19[2];
          *(_OWORD *)unint64_t v17 = v21;
          goto LABEL_37;
        }
        BOOL v20 = v17 >= (unint64_t)v6;
        v6 -= 3;
        if (v20) {
          goto LABEL_36;
        }
      }
LABEL_37:
      if (v6 > v7)
      {
        v17 -= 24;
        if (v12 > v4) {
          continue;
        }
      }
      goto LABEL_39;
    }
  }
  if (a4 != __dst || &__dst[3 * v9] <= a4) {
    memmove(a4, __dst, 24 * v9);
  }
  unint64_t v12 = &v4[3 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 24)
  {
    while (1)
    {
      if (v4[2] >= v6[2])
      {
        double v15 = v4 + 3;
        double v14 = v4;
        uint64_t v13 = v6;
        if (v7 == v4)
        {
          v4 += 3;
          if (v7 < v15) {
            goto LABEL_16;
          }
        }
        else
        {
          v4 += 3;
        }
      }
      else
      {
        uint64_t v13 = v6 + 3;
        double v14 = v6;
        if (v7 == v6 && v7 < v13) {
          goto LABEL_16;
        }
      }
      long long v16 = *(_OWORD *)v14;
      v7[2] = v14[2];
      *(_OWORD *)uint64_t v7 = v16;
LABEL_16:
      v7 += 3;
      if (v4 < v12)
      {
        uint64_t v6 = v13;
        if ((unint64_t)v13 < a3) {
          continue;
        }
      }
      break;
    }
  }
  uint64_t v6 = v7;
LABEL_39:
  uint64_t v22 = (unsigned __int128)(((char *)v12 - (char *)v4) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
  uint64_t v23 = (v22 >> 2) + ((unint64_t)v22 >> 63);
  if (v6 != v4 || v6 >= &v4[3 * v23]) {
    memmove(v6, v4, 24 * v23);
  }
  return 1;
}

char *sub_1D13B87D0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64E2E0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  double v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1D13B88CC(uint64_t a1)
{
  return sub_1D13B87D0(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_1D13B88E0(void *a1)
{
  return sub_1D13B7C60(0, a1[2], 0, a1);
}

size_t sub_1D13B88F4(size_t result, void *a2)
{
  unint64_t v2 = *(void *)(result + 16);
  unint64_t v3 = a2[2];
  if (v3 >= v2) {
    uint64_t v4 = *(void *)(result + 16);
  }
  else {
    uint64_t v4 = a2[2];
  }
  if (!v4)
  {
    int64_t v7 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v13 = *(void *)(MEMORY[0x1E4FBC860] + 24) >> 1;
    if (!v2) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  size_t v6 = result;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64E2D0);
  int64_t v7 = (void *)swift_allocObject();
  uint64_t result = _swift_stdlib_malloc_size(v7);
  uint64_t v8 = (uint64_t)(result - 32) / 24;
  v7[2] = v4;
  uint64_t v7[3] = 2 * v8;
  uint64_t v9 = *(void *)(v6 + 40);
  uint64_t v10 = v8 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v11 = a2[4];
  if (v2 <= 1) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = v2;
  }
  uint64_t v13 = v10 - 1;
  void v7[4] = *(void *)(v6 + 32);
  void v7[5] = v9;
  v7[6] = v11;
  uint64_t v14 = v4 - 1;
  if (v14)
  {
    double v15 = v7 + 7;
    long long v16 = a2 + 5;
    size_t v17 = v6 + 56;
    uint64_t v18 = v12 - 1;
    while (v18)
    {
      uint64_t v19 = *(void *)(v17 - 8);
      uint64_t result = swift_bridgeObjectRetain();
      --v13;
      uint64_t v20 = *v16++;
      *double v15 = v19;
      v15[1] = result;
      v15[2] = v20;
      v17 += 16;
      --v18;
      v15 += 3;
      if (!--v14) {
        goto LABEL_12;
      }
    }
    __break(1u);
    goto LABEL_21;
  }
LABEL_12:
  uint64_t result = swift_bridgeObjectRetain();
  if (v2 > v3)
  {
LABEL_15:
    if (v2 <= v3)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
LABEL_16:
  unint64_t v21 = v7[3];
  if (v21 < 2) {
    return (size_t)v7;
  }
  unint64_t v22 = v21 >> 1;
  BOOL v23 = __OFSUB__(v22, v13);
  unint64_t v24 = v22 - v13;
  if (!v23)
  {
    v7[2] = v24;
    return (size_t)v7;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_1D13B8A68()
{
  sub_1D13F21A8();
  unint64_t v2 = (void *)sub_1D13F2188();
  unint64_t v3 = (void *)sub_1D13F2178();

  if (!v0)
  {
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = MEMORY[0x1E4FBC860];
    char v5 = (void *)sub_1D13F2678();
    void v8[4] = sub_1D13B9C64;
    void v8[5] = v4;
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 1107296256;
    v8[2] = sub_1D13B7270;
    v8[3] = &block_descriptor_6;
    size_t v6 = _Block_copy(v8);
    swift_retain();
    swift_release();
    objc_msgSend(v3, sel_enumeratePeopleMatchingName_block_, v5, v6);
    _Block_release(v6);

    swift_beginAccess();
    if (*(void *)(*(void *)(v4 + 16) + 16))
    {
      uint64_t v1 = *(void *)(*(void *)(v4 + 16) + 32);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v1 = 0;
    }
    swift_release();
    swift_unknownObjectRelease();
  }
  return v1;
}

uint64_t sub_1D13B8C04(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v4 = a1;
  sub_1D13F21A8();
  char v5 = (void *)sub_1D13F2188();
  size_t v6 = (void *)sub_1D13F2178();

  if (!v2)
  {
    int64_t v7 = (void *)sub_1D13F2678();
    id v8 = objc_msgSend(v6, sel_personForIdentifier_, v7);

    if (v8)
    {
      id v9 = objc_msgSend(v8, sel_entityIdentifier);
      id v10 = objc_msgSend(v9, sel_stringValue);

      if (v10)
      {
        uint64_t v4 = sub_1D13F2688();
        swift_unknownObjectRelease();

        return v4;
      }
    }
    swift_unknownObjectRelease();

    return 0;
  }
  return v4;
}

void *sub_1D13B8D3C()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64E2E8);
  MEMORY[0x1F4188790](v1 - 8, v2);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5, v6);
  id v8 = (char *)&v18 - v7;
  uint64_t v9 = sub_1D13F2138();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v11);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1D13F21A8();
  uint64_t v14 = (void *)sub_1D13F2188();
  sub_1D13F2198();

  if (!v0)
  {
    uint64_t v19 = v10;
    sub_1D13F2128();
    sub_1D13B9BC4((uint64_t)v8, (uint64_t)v4);
    uint64_t v15 = sub_1D13F21C8();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v4, 1, v15) == 1)
    {
      sub_1D138E150((uint64_t)v4, &qword_1EA64E2E8);
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = (void *)sub_1D13F21B8();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v4, v15);
    }
    sub_1D138E150((uint64_t)v8, &qword_1EA64E2E8);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v13, v9);
  }
  return v14;
}

uint64_t sub_1D13B8F98(uint64_t a1, uint64_t a2)
{
  void v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = sub_1D13F21E8();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D13B9058, 0, 0);
}

uint64_t sub_1D13B9058()
{
  unint64_t v1 = v0[3];
  if ((v1 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(v1) & 0xF;
  }
  else {
    uint64_t v2 = v0[2] & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    id v3 = objc_allocWithZone((Class)sub_1D13F2288());
    v0[7] = sub_1D13F2278();
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, void))((int)*MEMORY[0x1E4F70310] + MEMORY[0x1E4F70310]);
    uint64_t v7 = (void *)swift_task_alloc();
    v0[8] = v7;
    void *v7 = v0;
    v7[1] = sub_1D13B91D4;
    uint64_t v9 = v0[2];
    uint64_t v8 = v0[3];
    return v10(v9, v8, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
    uint64_t v5 = MEMORY[0x1E4FBC860];
    return v4(v5);
  }
}

uint64_t sub_1D13B91D4(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 72) = a1;
  *(void *)(v3 + 80) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1D13B96F0;
  }
  else {
    uint64_t v4 = sub_1D13B92E8;
  }
  return MEMORY[0x1F4188298](v4, 0, 0);
}

unint64_t sub_1D13B92E8()
{
  uint64_t v50 = v0;
  unint64_t result = sub_1D13F2268();
  unint64_t v2 = result;
  if (result >> 62)
  {
    unint64_t result = sub_1D13F2B88();
    uint64_t v3 = result;
  }
  else
  {
    uint64_t v3 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v4 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v47 = v0;
  if (v3)
  {
    if (v3 < 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(v0 + 40);
    unint64_t v7 = v2;
    unint64_t v8 = v2 & 0xC000000000000001;
    uint64_t v46 = (void (**)(uint64_t, uint64_t))(v6 + 8);
    uint64_t v9 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v4 = (char *)MEMORY[0x1E4FBC860];
    unint64_t v45 = v2;
    do
    {
      if (v8) {
        id v10 = (id)MEMORY[0x1D25F54B0](v5, v7);
      }
      else {
        id v10 = *(id *)(v7 + 8 * v5 + 32);
      }
      uint64_t v11 = v10;
      sub_1D13F2258();
      if (v12 > 0.5)
      {
        uint64_t v13 = v3;
        unint64_t v14 = v8;
        uint64_t v15 = v4;
        uint64_t v16 = *(void *)(v47 + 48);
        size_t v17 = v9;
        uint64_t v18 = *(void *)(v47 + 32);
        sub_1D13F2248();
        uint64_t v19 = sub_1D13F21D8();
        uint64_t v21 = v20;
        uint64_t v22 = v18;
        uint64_t v9 = v17;
        (*v46)(v16, v22);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = sub_1D13B7B5C(0, *((void *)v17 + 2) + 1, 1, v17);
        }
        unint64_t v24 = *((void *)v9 + 2);
        unint64_t v23 = *((void *)v9 + 3);
        if (v24 >= v23 >> 1) {
          uint64_t v9 = sub_1D13B7B5C((char *)(v23 > 1), v24 + 1, 1, v9);
        }
        *((void *)v9 + 2) = v24 + 1;
        uint64_t v25 = &v9[16 * v24];
        *((void *)v25 + 4) = v19;
        *((void *)v25 + 5) = v21;
        sub_1D13F2258();
        uint64_t v27 = v26;
        uint64_t v4 = v15;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v4 = sub_1D13B7D9C(0, *((void *)v15 + 2) + 1, 1, v15);
        }
        unint64_t v8 = v14;
        uint64_t v3 = v13;
        unint64_t v7 = v45;
        unint64_t v29 = *((void *)v4 + 2);
        unint64_t v28 = *((void *)v4 + 3);
        if (v29 >= v28 >> 1) {
          uint64_t v4 = sub_1D13B7D9C((char *)(v28 > 1), v29 + 1, 1, v4);
        }
        *((void *)v4 + 2) = v29 + 1;
        *(void *)&v4[8 * v29 + 32] = v27;
      }
      ++v5;
    }
    while (v3 != v5);
  }
  else
  {
    uint64_t v9 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v30 = v47;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  double v31 = (void *)sub_1D13B88F4((size_t)v9, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v48 = v31;
  sub_1D13B75FC(&v48);
  uint64_t v32 = v48;
  int64_t v33 = v48[2];
  if (v33)
  {
    uint64_t v49 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    sub_1D1394C68(0, v33, 0);
    uint64_t v34 = 0;
    uint64_t v35 = v49;
    unint64_t v36 = *(void *)(v49 + 16);
    uint64_t v37 = 16 * v36;
    do
    {
      uint64_t v38 = v32[v34 + 4];
      uint64_t v39 = v32[v34 + 5];
      uint64_t v49 = v35;
      unint64_t v40 = *(void *)(v35 + 24);
      swift_bridgeObjectRetain();
      if (v36 >= v40 >> 1)
      {
        sub_1D1394C68(v40 > 1, v36 + 1, 1);
        uint64_t v35 = v49;
      }
      *(void *)(v35 + 16) = v36 + 1;
      uint64_t v41 = v35 + v37;
      *(void *)(v41 + 32) = v38;
      *(void *)(v41 + 40) = v39;
      v37 += 16;
      v34 += 3;
      ++v36;
      --v33;
    }
    while (v33);
    uint64_t v30 = v47;
    uint64_t v42 = *(void **)(v47 + 56);

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v43 = *(void **)(v47 + 56);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v35 = MEMORY[0x1E4FBC860];
  }
  swift_task_dealloc();
  char v44 = *(uint64_t (**)(uint64_t))(v30 + 8);
  return v44(v35);
}

uint64_t sub_1D13B96F0()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t type metadata accessor for MegadomeContextualPersonRelationships()
{
  return self;
}

uint64_t method lookup function for MegadomeContextualPersonRelationships(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MegadomeContextualPersonRelationships);
}

uint64_t dispatch thunk of MegadomeContextualPersonRelationships.megadomePersonIDFromName(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x50))();
}

uint64_t dispatch thunk of MegadomeContextualPersonRelationships.megadomePersonIDFromContactID(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of MegadomeContextualPersonRelationships.megadomePersonIDFromPhoneNumber(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of MegadomeContextualPersonRelationships.entityRelationships(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x68);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_1D13B998C;
  return v9(a1, a2);
}

uint64_t sub_1D13B998C(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_1D13B9A88()
{
  _Block_release(*(const void **)(v0 + 24));
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1D13B9AD0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1D138DF50;
  uint64_t v6 = (uint64_t (*)(int, void *, void *))((char *)&dword_1EA64E2A0 + dword_1EA64E2A0);
  return v6(v2, v3, v4);
}

uint64_t sub_1D13B9B8C()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D13B9BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EA64E2E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1D13B9C2C()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_1D13B9C64(void *a1)
{
  id v2 = objc_msgSend(a1, sel_entityIdentifier);
  id v3 = objc_msgSend(v2, sel_stringValue);

  if (v3)
  {
    uint64_t v4 = (char **)(v1 + 16);
    uint64_t v5 = sub_1D13F2688();
    uint64_t v7 = v6;

    swift_beginAccess();
    uint64_t v8 = *v4;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    void *v4 = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v8 = sub_1D13B7B5C(0, *((void *)v8 + 2) + 1, 1, v8);
      void *v4 = v8;
    }
    unint64_t v11 = *((void *)v8 + 2);
    unint64_t v10 = *((void *)v8 + 3);
    if (v11 >= v10 >> 1)
    {
      uint64_t v8 = sub_1D13B7B5C((char *)(v10 > 1), v11 + 1, 1, v8);
      void *v4 = v8;
    }
    *((void *)v8 + 2) = v11 + 1;
    double v12 = &v8[16 * v11];
    *((void *)v12 + 4) = v5;
    *((void *)v12 + 5) = v7;
  }
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

id sub_1D13B9D8C()
{
  uint64_t v1 = OBJC_IVAR___ATXSportsServer____lazy_storage___listener;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR___ATXSportsServer____lazy_storage___listener);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR___ATXSportsServer____lazy_storage___listener);
  }
  else
  {
    sub_1D13F2688();
    id v4 = objc_allocWithZone(MEMORY[0x1E4F29290]);
    uint64_t v5 = (void *)sub_1D13F2678();
    swift_bridgeObjectRelease();
    id v6 = objc_msgSend(v4, sel_initWithMachServiceName_, v5);

    objc_msgSend(v6, sel_setDelegate_, v0);
    uint64_t v7 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v6;
    id v3 = v6;

    uint64_t v2 = 0;
  }
  id v8 = v2;
  return v3;
}

id sub_1D13B9E60()
{
  id result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SportsServer()), sel_init);
  qword_1EBD24338 = (uint64_t)result;
  return result;
}

uint64_t *sub_1D13B9E90()
{
  if (qword_1EBD24340 != -1) {
    swift_once();
  }
  return &qword_1EBD24338;
}

id static SportsServer.shared.getter()
{
  if (qword_1EBD24340 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1EBD24338;
  return v0;
}

id sub_1D13B9F94()
{
  uint64_t v1 = sub_1D13F2538();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1, v3);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v0[OBJC_IVAR___ATXSportsServer____lazy_storage___listener] = 0;
  id v6 = (objc_class *)type metadata accessor for SportsServer();
  v14.receiver = v0;
  v14.super_class = v6;
  id v7 = objc_msgSendSuper2(&v14, sel_init);
  uint64_t v8 = sub_1D13834E4();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v8, v1);
  uint64_t v9 = sub_1D13F2508();
  os_log_type_t v10 = sub_1D13F2858();
  if (os_log_type_enabled(v9, v10))
  {
    unint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v11 = 0;
    _os_log_impl(&dword_1D0FA3000, v9, v10, "SportsServer: init", v11, 2u);
    MEMORY[0x1D25F77B0](v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  id v12 = sub_1D13B9D8C();
  objc_msgSend(v12, sel_resume);

  return v7;
}

uint64_t type metadata accessor for SportsServer()
{
  return self;
}

uint64_t sub_1D13BA18C()
{
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1EA64E300 + dword_1EA64E300);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_1D13B74FC;
  return v3();
}

uint64_t sub_1D13BA22C(void **a1)
{
  uint64_t v2 = sub_1D13F2538();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  id v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = *a1;
  uint64_t v8 = sub_1D13834E4();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v8, v2);
  id v9 = v7;
  os_log_type_t v10 = sub_1D13F2508();
  os_log_type_t v11 = sub_1D13F2858();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    uint64_t v28 = v26;
    *(_DWORD *)uint64_t v12 = 136315394;
    id v13 = objc_msgSend(v9, sel_qid);
    if (v13)
    {
      objc_super v14 = v13;
      uint64_t v15 = sub_1D13F2688();
      unint64_t v17 = v16;
    }
    else
    {
      unint64_t v17 = 0xE300000000000000;
      uint64_t v15 = 7104878;
    }
    uint64_t v25 = v2;
    uint64_t v27 = sub_1D138B264(v15, v17, &v28);
    sub_1D13F2978();

    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    id v19 = objc_msgSend(v9, sel_umcid);
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = sub_1D13F2688();
      unint64_t v23 = v22;
    }
    else
    {
      unint64_t v23 = 0xE300000000000000;
      uint64_t v21 = 7104878;
    }
    uint64_t v27 = sub_1D138B264(v21, v23, &v28);
    sub_1D13F2978();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D0FA3000, v10, v11, "SportsServer: favorite team: %s : %s", (uint8_t *)v12, 0x16u);
    uint64_t v24 = v26;
    swift_arrayDestroy();
    MEMORY[0x1D25F77B0](v24, -1, -1);
    MEMORY[0x1D25F77B0](v12, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v25);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
}

uint64_t sub_1D13BA68C(const void *a1)
{
  *(void *)(v1 + 16) = _Block_copy(a1);
  uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_1EA64E300 + dword_1EA64E300);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  void *v2 = v1;
  v2[1] = sub_1D13BA734;
  return v4();
}

uint64_t sub_1D13BA734(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v6 = *v2;
  swift_task_dealloc();
  id v7 = *(void (***)(void, void, void))(v5 + 16);
  if (v3)
  {
    uint64_t v8 = (void *)sub_1D13F1E88();

    ((void (**)(void, void, void *))v7)[2](v7, 0, v8);
    _Block_release(v7);
  }
  else
  {
    ((void (**)(void, void *, void))v7)[2](v7, a1, 0);
    _Block_release(v7);
  }
  id v9 = *(uint64_t (**)(void))(v6 + 8);
  return v9();
}

uint64_t sub_1D13BA8B4(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD239B0);
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD239B8);
  v3[14] = v5;
  v3[15] = *(void *)(v5 - 8);
  uint8_t v3[16] = swift_task_alloc();
  uint64_t v6 = sub_1D13F1FA8();
  v3[17] = v6;
  v3[18] = *(void *)(v6 - 8);
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  uint64_t v7 = sub_1D13F2538();
  v3[21] = v7;
  v3[22] = *(void *)(v7 - 8);
  v3[23] = swift_task_alloc();
  v3[24] = swift_task_alloc();
  v3[25] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D13BAADC, 0, 0);
}

uint64_t sub_1D13BAADC()
{
  uint64_t v40 = v0;
  uint64_t v37 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v5 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v7 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 144);
  uint64_t v8 = *(void *)(v0 + 56);
  uint64_t v9 = sub_1D13834E4();
  *(void *)(v0 + 20_Block_object_dispose(&STACK[0x210], 8) = v9;
  os_log_type_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(void *)(v0 + 216) = v10;
  *(void *)(v0 + 224) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v10(v1, v9, v2);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  *(void *)(v0 + 232) = v11;
  *(void *)(v0 + 240) = (v6 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v11(v4, v37, v7);
  v11(v5, v8, v7);
  uint64_t v12 = sub_1D13F2508();
  os_log_type_t v13 = sub_1D13F2858();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v34 = *(void *)(v0 + 176);
    uint64_t v35 = *(void *)(v0 + 168);
    uint64_t v38 = *(void *)(v0 + 200);
    os_log_type_t type = v13;
    uint64_t v15 = *(void *)(v0 + 152);
    uint64_t v14 = *(void *)(v0 + 160);
    uint64_t v17 = *(void *)(v0 + 136);
    uint64_t v16 = *(void *)(v0 + 144);
    uint64_t v18 = swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v39 = v32;
    *(_DWORD *)uint64_t v18 = 136315394;
    sub_1D13C28F4((unint64_t *)&qword_1EBD239C0);
    uint64_t v19 = sub_1D13F2C48();
    *(void *)(v0 + 32) = sub_1D138B264(v19, v20, &v39);
    sub_1D13F2978();
    swift_bridgeObjectRelease();
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v21(v14, v17);
    *(_WORD *)(v18 + 12) = 2080;
    uint64_t v22 = sub_1D13F2C48();
    *(void *)(v0 + 40) = sub_1D138B264(v22, v23, &v39);
    sub_1D13F2978();
    swift_bridgeObjectRelease();
    v21(v15, v17);
    _os_log_impl(&dword_1D0FA3000, v12, type, "SportsServer: scheduledGameQIDs %s - %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D25F77B0](v32, -1, -1);
    MEMORY[0x1D25F77B0](v18, -1, -1);

    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v24(v38, v35);
  }
  else
  {
    uint64_t v25 = *(void *)(v0 + 200);
    uint64_t v26 = *(void *)(v0 + 168);
    uint64_t v27 = *(void *)(v0 + 176);
    uint64_t v28 = *(void *)(v0 + 152);
    uint64_t v29 = *(void *)(v0 + 136);
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 144) + 8);
    v21(*(void *)(v0 + 160), v29);
    v21(v28, v29);

    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v24(v25, v26);
  }
  *(void *)(v0 + 24_Block_object_dispose(&STACK[0x210], 8) = v21;
  *(void *)(v0 + 256) = v24;
  unint64_t v36 = (uint64_t (*)(void))(*(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 64)) + 0x70)
                          + **(int **)((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 64)) + 0x70));
  uint64_t v30 = (void *)swift_task_alloc();
  *(void *)(v0 + 264) = v30;
  *uint64_t v30 = v0;
  v30[1] = sub_1D13BAED0;
  return v36();
}

uint64_t sub_1D13BAED0(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[34] = a1;
  v3[35] = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v3[1];
    return v4();
  }
  else
  {
    return MEMORY[0x1F4188298](sub_1D13BB090, 0, 0);
  }
}

uint64_t sub_1D13BB090()
{
  uint64_t v67 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 56);
  id v5 = objc_msgSend(*(id *)(v0 + 272), sel_teams);
  sub_1D1384DE0(0, (unint64_t *)&unk_1EBD23830);
  unint64_t v6 = sub_1D13F2748();

  uint64_t v7 = sub_1D13BB760(v6);
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_1D1395168((uint64_t)v7);
  swift_bridgeObjectRelease();
  sub_1D13C1514(v3, v4);
  if (v2)
  {
    os_log_type_t v10 = *(void **)(v1 + 272);
    swift_bridgeObjectRelease();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v1 + 8);
    return v11();
  }
  else
  {
    uint64_t v13 = v9;
    (*(void (**)(void, void, void))(v1 + 216))(*(void *)(v1 + 192), *(void *)(v1 + 208), *(void *)(v1 + 168));
    swift_bridgeObjectRetain();
    uint64_t v14 = sub_1D13F2508();
    os_log_type_t v15 = sub_1D13F2858();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 134217984;
      *(void *)(v1 + 24) = *(void *)(v13 + 16);
      sub_1D13F2978();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D0FA3000, v14, v15, "SportsServer: games returned %ld", v16, 0xCu);
      MEMORY[0x1D25F77B0](v16, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    (*(void (**)(void, void))(v1 + 256))(*(void *)(v1 + 192), *(void *)(v1 + 168));
    uint64_t v17 = (void *)sub_1D13C1D1C(v13, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v66 = v17;
    swift_bridgeObjectRetain();
    sub_1D13BDD18(&v66);
    swift_bridgeObjectRelease();
    uint64_t v18 = v66;
    int64_t v19 = v66[2];
    if (v19)
    {
      uint64_t v20 = *(void *)(v1 + 144);
      uint64_t v56 = *(void *)(v1 + 112);
      uint64_t v57 = *(void *)(v1 + 120);
      uint64_t v21 = *(void *)(v1 + 80);
      uint64_t v55 = *(void *)(v1 + 72);
      uint64_t v66 = (void *)MEMORY[0x1E4FBC860];
      sub_1D13BF0B4(0, v19, 0);
      uint64_t v22 = (uint64_t)v18 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
      uint64_t v53 = (void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32);
      uint64_t v54 = *(void *)(v21 + 72);
      unint64_t v23 = v66;
      uint64_t v58 = v1;
      do
      {
        int64_t v64 = v19;
        uint64_t v65 = v23;
        uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v1 + 248);
        uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 232);
        uint64_t v26 = *(void *)(v1 + 128);
        uint64_t v25 = *(void *)(v1 + 136);
        uint64_t v59 = v26;
        uint64_t v60 = v24;
        uint64_t v28 = *(void *)(v1 + 96);
        uint64_t v27 = *(void *)(v1 + 104);
        uint64_t v29 = *(void *)(v1 + 88);
        uint64_t v63 = v22;
        sub_1D13C29CC(v22, v27, &qword_1EBD239B0);
        BOOL v61 = (void *)(v26 + *(int *)(v56 + 48));
        uint64_t v30 = *(int *)(v55 + 48);
        double v31 = (void *)(v28 + v30);
        uint64_t v32 = *(int *)(v55 + 64);
        int64_t v33 = (void *)(v28 + v32);
        uint64_t v34 = (uint64_t *)(v27 + v30);
        uint64_t v35 = (uint64_t *)(v27 + v32);
        v24(v28, v27, v25);
        uint64_t v36 = *v34;
        uint64_t v37 = v34[1];
        *double v31 = v36;
        v31[1] = v37;
        uint64_t v39 = *v35;
        uint64_t v38 = v35[1];
        *int64_t v33 = v39;
        v33[1] = v38;
        uint64_t v40 = v28;
        uint64_t v41 = v25;
        (*v53)(v59, v40, v25);
        uint64_t v42 = (void *)(v29 + *(int *)(v55 + 48));
        uint64_t v43 = (void *)(v29 + *(int *)(v55 + 64));
        v60(v29, v27, v41);
        *uint64_t v42 = v36;
        v42[1] = v37;
        *uint64_t v43 = v39;
        v43[1] = v38;
        *BOOL v61 = v36;
        v61[1] = v37;
        unint64_t v23 = v65;
        swift_bridgeObjectRetain();
        v62(v29, v41);
        sub_1D138E150(v27, &qword_1EBD239B0);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1D13BF0B4(0, v65[2] + 1, 1);
          unint64_t v23 = v66;
        }
        unint64_t v45 = v23[2];
        unint64_t v44 = v23[3];
        uint64_t v1 = v58;
        if (v45 >= v44 >> 1)
        {
          sub_1D13BF0B4(v44 > 1, v45 + 1, 1);
          unint64_t v23 = v66;
        }
        uint64_t v46 = *(void *)(v58 + 128);
        v23[2] = v45 + 1;
        sub_1D13C2938(v46, (uint64_t)v23+ ((*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80))+ *(void *)(v57 + 72) * v45, &qword_1EBD239B8);
        uint64_t v22 = v63 + v54;
        int64_t v19 = v64 - 1;
      }
      while (v64 != 1);
      swift_release();
    }
    else
    {
      swift_release();
      unint64_t v23 = (void *)MEMORY[0x1E4FBC860];
    }
    (*(void (**)(void, void, void))(v1 + 216))(*(void *)(v1 + 184), *(void *)(v1 + 208), *(void *)(v1 + 168));
    swift_bridgeObjectRetain();
    uint64_t v47 = sub_1D13F2508();
    os_log_type_t v48 = sub_1D13F2858();
    BOOL v49 = os_log_type_enabled(v47, v48);
    uint64_t v50 = *(void **)(v1 + 272);
    if (v49)
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 134217984;
      *(void *)(v1 + 16) = v23[2];
      sub_1D13F2978();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D0FA3000, v47, v48, "SportsServer: games filtered %ld", v51, 0xCu);
      MEMORY[0x1D25F77B0](v51, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    (*(void (**)(void, void))(v1 + 256))(*(void *)(v1 + 184), *(void *)(v1 + 168));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v52 = *(uint64_t (**)(void *))(v1 + 8);
    return v52(v23);
  }
}

char *sub_1D13BB760(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = sub_1D13F2B88())
  {
    uint64_t v3 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v4 = 4;
    while (1)
    {
      id v5 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1D25F54B0](v4 - 4, a1) : *(id *)(a1 + 8 * v4);
      unint64_t v6 = v5;
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      id v8 = objc_msgSend(v5, sel_umcid);
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = sub_1D13F2688();
        uint64_t v12 = v11;

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v3 = sub_1D13B7B5C(0, *((void *)v3 + 2) + 1, 1, v3);
        }
        unint64_t v14 = *((void *)v3 + 2);
        unint64_t v13 = *((void *)v3 + 3);
        if (v14 >= v13 >> 1) {
          uint64_t v3 = sub_1D13B7B5C((char *)(v13 > 1), v14 + 1, 1, v3);
        }
        *((void *)v3 + 2) = v14 + 1;
        os_log_type_t v15 = &v3[16 * v14];
        *((void *)v15 + 4) = v10;
        *((void *)v15 + 5) = v12;
      }
      else
      {
      }
      ++v4;
      if (v7 == v2) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  uint64_t v3 = (char *)MEMORY[0x1E4FBC860];
LABEL_19:
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1D13BB8F8(uint64_t a1, void *a2)
{
  return sub_1D13C2030(a2);
}

uint64_t sub_1D13BB900()
{
  return sub_1D13BB940(MEMORY[0x1E4FBD380], "SportsServer: connection interrupted");
}

uint64_t sub_1D13BB920()
{
  return sub_1D13BB940(MEMORY[0x1E4FBD390], "SportsServer: connection invalidated");
}

uint64_t sub_1D13BB940(uint64_t (*a1)(void), const char *a2)
{
  uint64_t v4 = sub_1D13F2538();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  id v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1D13834E4();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v9, v4);
  uint64_t v10 = sub_1D13F2508();
  os_log_type_t v11 = a1();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl(&dword_1D0FA3000, v10, v11, a2, v12, 2u);
    MEMORY[0x1D25F77B0](v12, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1D13BBB00(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD23900);
    uint64_t v5 = swift_allocError();
    void *v6 = a3;
    id v7 = a3;
    return MEMORY[0x1F4188208](v3, v5);
  }
  else
  {
    **(unsigned char **)(*(void *)(v3 + 64) + 40) = a2;
    return MEMORY[0x1F4188200](v3);
  }
}

uint64_t sub_1D13BBBB4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD23900);
    uint64_t v5 = swift_allocError();
    void *v6 = a3;
    id v7 = a3;
    return MEMORY[0x1F4188208](v3, v5);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA64E430);
    **(void **)(*(void *)(v3 + 64) + 40) = sub_1D13F2748();
    return MEMORY[0x1F4188200](v3);
  }
}

uint64_t sub_1D13BBC84(uint64_t a1, uint64_t a2, void (**a3)(uint64_t, char *, uint64_t), unint64_t *a4)
{
  uint64_t v248 = a4;
  unint64_t v257 = a3;
  uint64_t v241 = a2;
  uint64_t v246 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD239B0);
  uint64_t v247 = *(void *)(v246 - 8);
  MEMORY[0x1F4188790](v246, v4);
  uint64_t v254 = (uint64_t)&v238 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1D13F2228();
  uint64_t v272 = *(void *)(v6 - 8);
  uint64_t v273 = v6;
  MEMORY[0x1F4188790](v6, v7);
  unint64_t v269 = (char *)&v238 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9, v10);
  unint64_t v251 = (char *)&v238 - v11;
  MEMORY[0x1F4188790](v12, v13);
  unint64_t v253 = (char *)&v238 - v14;
  MEMORY[0x1F4188790](v15, v16);
  unint64_t v261 = (char *)&v238 - v17;
  MEMORY[0x1F4188790](v18, v19);
  uint64_t v258 = (uint64_t)&v238 - v20;
  MEMORY[0x1F4188790](v21, v22);
  char v270 = (char *)&v238 - v23;
  unint64_t v250 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23820);
  MEMORY[0x1F4188790](v250, v24);
  uint64_t v243 = (uint64_t)&v238 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26, v27);
  uint64_t v260 = (long long *)((char *)&v238 - v28);
  uint64_t v262 = sub_1D13F2538();
  uint64_t v255 = *(void *)(v262 - 8);
  MEMORY[0x1F4188790](v262, v29);
  unint64_t v259 = (char *)&v238 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v31, v32);
  uint64_t v252 = (char *)&v238 - v33;
  MEMORY[0x1F4188790](v34, v35);
  uint64_t v256 = (char *)&v238 - v36;
  MEMORY[0x1F4188790](v37, v38);
  uint64_t v245 = (uint64_t)&v238 - v39;
  MEMORY[0x1F4188790](v40, v41);
  uint64_t v242 = (char *)&v238 - v42;
  MEMORY[0x1F4188790](v43, v44);
  unint64_t v265 = (char *)&v238 - v45;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA64E390);
  MEMORY[0x1F4188790](v46 - 8, v47);
  BOOL v49 = (char *)&v238 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD239C8);
  MEMORY[0x1F4188790](v50 - 8, v51);
  uint64_t v271 = (char *)&v238 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v263 = sub_1D13F1FA8();
  uint64_t v266 = *(void *)(v263 - 8);
  MEMORY[0x1F4188790](v263, v53);
  unint64_t v249 = (char *)&v238 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v55, v56);
  uint64_t v58 = (char *)&v238 - v57;
  MEMORY[0x1F4188790](v59, v60);
  uint64_t v62 = (char *)&v238 - v61;
  MEMORY[0x1F4188790](v63, v64);
  uint64_t v66 = (char *)&v238 - v65;
  MEMORY[0x1F4188790](v67, v68);
  uint64_t v70 = (char *)&v238 - v69;
  MEMORY[0x1F4188790](v71, v72);
  uint64_t v74 = (char *)&v238 - v73;
  MEMORY[0x1F4188790](v75, v76);
  uint64_t v78 = (char *)&v238 - v77;
  sub_1D13F2238();
  uint64_t v79 = sub_1D13F22A8();
  uint64_t v80 = *(void *)(v79 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v49, 1, v79) != 1)
  {
    *(void *)&long long v240 = v74;
    uint64_t v239 = (uint64_t)v70;
    *(void *)&long long v238 = v66;
    unint64_t v267 = v62;
    uint64_t v268 = v78;
    uint64_t v244 = v58;
    uint64_t v81 = (uint64_t)v271;
    sub_1D13F2298();
    (*(void (**)(char *, uint64_t))(v80 + 8))(v49, v79);
    uint64_t v82 = v266;
    uint64_t v83 = v263;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v266 + 48))(v81, 1, v263) == 1) {
      goto LABEL_4;
    }
    uint64_t v93 = v268;
    (*(void (**)(char *, uint64_t, uint64_t))(v82 + 32))(v268, v81, v83);
    sub_1D13C28F4(&qword_1EBD236D8);
    uint64_t v94 = (uint64_t)v257;
    char v95 = sub_1D13F2638();
    uint64_t v96 = v240;
    uint64_t v264 = *(void (**)(void))(v82 + 16);
    unint64_t v265 = (char *)(v82 + 16);
    ((void (*)(void, char *, uint64_t))v264)(v240, v93, v83);
    unint64_t v97 = (void (*)(void, void))v260;
    sub_1D13C29CC(v94, (uint64_t)v260, (uint64_t *)&unk_1EBD23820);
    if (v95) {
      char v98 = sub_1D13F2628();
    }
    else {
      char v98 = 0;
    }
    uint64_t v99 = (uint64_t)v97;
    uint64_t v100 = v241;
    uint64_t v101 = v272;
    unint64_t v102 = v256;
    uint64_t v103 = (uint64_t)v267;
    sub_1D138E150(v99, (uint64_t *)&unk_1EBD23820);
    uint64_t v260 = *(long long **)(v82 + 8);
    ((void (*)(uint64_t, uint64_t))v260)(v96, v83);
    uint64_t v266 = v82 + 8;
    if ((v98 & 1) == 0)
    {
      uint64_t v104 = sub_1D13834E4();
      uint64_t v105 = v94;
      uint64_t v106 = v242;
      (*(void (**)(char *, uint64_t, uint64_t))(v255 + 16))(v242, v104, v262);
      uint64_t v107 = v239;
      ((void (*)(uint64_t, char *, uint64_t))v264)(v239, v268, v83);
      uint64_t v108 = v243;
      sub_1D13C29CC(v105, v243, (uint64_t *)&unk_1EBD23820);
      uint64_t v109 = sub_1D13F2508();
      os_log_type_t v110 = sub_1D13F2848();
      int v111 = v110;
      if (os_log_type_enabled(v109, v110))
      {
        uint64_t v112 = swift_slowAlloc();
        uint64_t v113 = swift_slowAlloc();
        v274[0] = v113;
        *(_DWORD *)uint64_t v112 = 136315394;
        sub_1D13C28F4((unint64_t *)&qword_1EBD239C0);
        LODWORD(v271) = v111;
        uint64_t v114 = sub_1D13F2C48();
        uint64_t v276 = sub_1D138B264(v114, v115, v274);
        sub_1D13F2978();
        swift_bridgeObjectRelease();
        ((void (*)(uint64_t, uint64_t))v260)(v107, v263);
        *(_WORD *)(v112 + 12) = 2080;
        uint64_t v276 = 0;
        unint64_t v277 = 0xE000000000000000;
        sub_1D13F2B48();
        sub_1D13F26F8();
        uint64_t v101 = v272;
        sub_1D13F2B48();
        uint64_t v276 = sub_1D138B264(v276, v277, v274);
        uint64_t v100 = v241;
        sub_1D13F2978();
        swift_bridgeObjectRelease();
        sub_1D138E150(v108, (uint64_t *)&unk_1EBD23820);
        _os_log_impl(&dword_1D0FA3000, v109, (os_log_type_t)v271, "SportsServer: Returned date is out of requested bounds [%s] %s", (uint8_t *)v112, 0x16u);
        swift_arrayDestroy();
        uint64_t v116 = v113;
        uint64_t v83 = v263;
        MEMORY[0x1D25F77B0](v116, -1, -1);
        MEMORY[0x1D25F77B0](v112, -1, -1);
      }
      else
      {
        ((void (*)(uint64_t, uint64_t))v260)(v107, v83);
        sub_1D138E150(v108, (uint64_t *)&unk_1EBD23820);
      }

      (*(void (**)(char *, uint64_t))(v255 + 8))(v106, v262);
      unint64_t v102 = v256;
      uint64_t v103 = (uint64_t)v267;
    }
    uint64_t v117 = MEMORY[0x1E4FBC860];
    uint64_t v275 = MEMORY[0x1E4FBC860];
    int64_t v118 = *(void *)(v100 + 16);
    swift_bridgeObjectRetain();
    uint64_t v271 = (char *)v118;
    if (v118)
    {
      int64_t v119 = v118;
      char v122 = *(void (**)(char *, uint64_t, uint64_t))(v101 + 16);
      uint64_t v120 = v101 + 16;
      uint64_t v121 = v122;
      uint64_t v123 = *(void *)(v120 + 56);
      unint64_t v250 = (*(unsigned __int8 *)(v120 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v120 + 64);
      uint64_t v124 = v100 + v250;
      unint64_t v257 = (void (**)(uint64_t, char *, uint64_t))(v120 + 16);
      v122(v270, v100 + v250, v273);
      while (1)
      {
        uint64_t v126 = sub_1D13F21F8();
        if (!v127) {
          goto LABEL_17;
        }
        uint64_t v276 = v126;
        unint64_t v277 = v127;
        v274[0] = 778268021;
        v274[1] = 0xE400000000000000;
        sub_1D13C2A30();
        sub_1D13C2A84();
        uint64_t v103 = (uint64_t)v267;
        char v128 = sub_1D13F2608();
        swift_bridgeObjectRelease();
        if (v128)
        {
          uint64_t v129 = *v257;
          (*v257)(v258, v270, v273);
          uint64_t v130 = v275;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1D13BF114(0, *(void *)(v130 + 16) + 1, 1);
            uint64_t v130 = v275;
          }
          unint64_t v132 = *(void *)(v130 + 16);
          unint64_t v131 = *(void *)(v130 + 24);
          if (v132 >= v131 >> 1)
          {
            sub_1D13BF114(v131 > 1, v132 + 1, 1);
            uint64_t v130 = v275;
          }
          *(void *)(v130 + 16) = v132 + 1;
          v129(v130 + v250 + v132 * v123, (char *)v258, v273);
          uint64_t v275 = v130;
          uint64_t v83 = v263;
          uint64_t v103 = (uint64_t)v267;
          unint64_t v125 = v270;
        }
        else
        {
LABEL_17:
          unint64_t v125 = v270;
          (*(void (**)(char *, uint64_t))(v120 - 8))(v270, v273);
        }
        v124 += v123;
        if (!--v119) {
          break;
        }
        v121(v125, v124, v273);
      }
      uint64_t v117 = v275;
      uint64_t v100 = v241;
      int64_t v118 = (int64_t)v271;
      uint64_t v101 = v272;
      unint64_t v102 = v256;
    }
    swift_bridgeObjectRelease();
    unsigned int v133 = *(char **)(v117 + 16);
    swift_release();
    uint64_t v134 = MEMORY[0x1E4FBC860];
    char v270 = v133;
    if (v118)
    {
      v274[0] = MEMORY[0x1E4FBC860];
      sub_1D1394C68(0, v118, 0);
      uint64_t v134 = v274[0];
      uint64_t v135 = v100 + ((*(unsigned __int8 *)(v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80));
      uint64_t v136 = *(void *)(v101 + 72);
      int64_t v137 = v118;
      do
      {
        uint64_t v276 = 10;
        unint64_t v277 = 0xE100000000000000;
        sub_1D13F2218();
        sub_1D13F26F8();
        swift_bridgeObjectRelease();
        sub_1D13F26F8();
        sub_1D13F2208();
        sub_1D13F26F8();
        swift_bridgeObjectRelease();
        sub_1D13F26F8();
        sub_1D13F21F8();
        sub_1D13F26F8();
        swift_bridgeObjectRelease();
        uint64_t v139 = v276;
        unint64_t v138 = v277;
        v274[0] = v134;
        unint64_t v141 = *(void *)(v134 + 16);
        unint64_t v140 = *(void *)(v134 + 24);
        if (v141 >= v140 >> 1)
        {
          sub_1D1394C68(v140 > 1, v141 + 1, 1);
          uint64_t v134 = v274[0];
        }
        *(void *)(v134 + 16) = v141 + 1;
        uint64_t v142 = v134 + 16 * v141;
        *(void *)(v142 + 32) = v139;
        *(void *)(v142 + 40) = v138;
        v135 += v136;
        --v137;
      }
      while (v137);
      uint64_t v83 = v263;
      unsigned int v143 = v249;
      int64_t v118 = (int64_t)v271;
      unint64_t v102 = v256;
      uint64_t v103 = (uint64_t)v267;
    }
    else
    {
      unsigned int v143 = v249;
    }
    uint64_t v276 = v134;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA64D9D0);
    sub_1D13C2AD8();
    uint64_t v258 = sub_1D13F2618();
    unint64_t v145 = v144;
    swift_bridgeObjectRelease();
    uint64_t v146 = v262;
    if (v270)
    {
      if (v270 == (char *)v118)
      {
LABEL_37:
        swift_bridgeObjectRelease();
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v147 = sub_1D13834E4();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v255 + 16))(v245, v147, v146);
      uint64_t v148 = v238;
      ((void (*)(void, char *, uint64_t))v264)(v238, v268, v83);
      swift_bridgeObjectRetain_n();
      uint64_t v149 = sub_1D13F2508();
      os_log_type_t v150 = sub_1D13F2848();
      if (os_log_type_enabled(v149, v150))
      {
        uint64_t v151 = swift_slowAlloc();
        uint64_t v152 = swift_slowAlloc();
        uint64_t v276 = v152;
        *(_DWORD *)uint64_t v151 = 136315394;
        sub_1D13C28F4((unint64_t *)&qword_1EBD239C0);
        unsigned int v153 = v149;
        uint64_t v154 = sub_1D13F2C48();
        v274[0] = sub_1D138B264(v154, v155, &v276);
        uint64_t v83 = v263;
        sub_1D13F2978();
        swift_bridgeObjectRelease();
        ((void (*)(uint64_t, uint64_t))v260)(v148, v83);
        *(_WORD *)(v151 + 12) = 2080;
        swift_bridgeObjectRetain();
        v274[0] = sub_1D138B264(v258, v145, &v276);
        int64_t v118 = (int64_t)v271;
        sub_1D13F2978();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1D0FA3000, v149, v150, "SportsServer: No umcids found for game at %s with teams: %s", (uint8_t *)v151, 0x16u);
        swift_arrayDestroy();
        uint64_t v156 = v152;
        uint64_t v103 = (uint64_t)v267;
        MEMORY[0x1D25F77B0](v156, -1, -1);
        uint64_t v157 = v262;
        MEMORY[0x1D25F77B0](v151, -1, -1);

        uint64_t v146 = v157;
        (*(void (**)(uint64_t, uint64_t))(v255 + 8))(v245, v157);
      }
      else
      {
        ((void (*)(uint64_t, uint64_t))v260)(v148, v83);

        swift_bridgeObjectRelease_n();
        (*(void (**)(uint64_t, uint64_t))(v255 + 8))(v245, v146);
      }
      unint64_t v102 = v256;
      if (v270 == (char *)v118) {
        goto LABEL_37;
      }
    }
    uint64_t v158 = sub_1D13834E4();
    (*(void (**)(char *, uint64_t, uint64_t))(v255 + 16))(v102, v158, v146);
    ((void (*)(uint64_t, char *, uint64_t))v264)(v103, v268, v83);
    swift_bridgeObjectRetain();
    BOOL v159 = sub_1D13F2508();
    os_log_type_t v160 = sub_1D13F2838();
    if (os_log_type_enabled(v159, v160))
    {
      uint64_t v161 = swift_slowAlloc();
      uint64_t v162 = swift_slowAlloc();
      uint64_t v276 = v162;
      *(_DWORD *)uint64_t v161 = 136315394;
      sub_1D13C28F4((unint64_t *)&qword_1EBD239C0);
      uint64_t v163 = sub_1D13F2C48();
      v274[0] = sub_1D138B264(v163, v164, &v276);
      uint64_t v83 = v263;
      sub_1D13F2978();
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))v260)(v103, v83);
      *(_WORD *)(v161 + 12) = 2080;
      swift_bridgeObjectRetain();
      v274[0] = sub_1D138B264(v258, v145, &v276);
      int64_t v118 = (int64_t)v271;
      unint64_t v165 = v269;
      sub_1D13F2978();
      swift_bridgeObjectRelease_n();
      os_log_type_t v166 = v160;
      unint64_t v167 = v165;
      _os_log_impl(&dword_1D0FA3000, v159, v166, "SportsServer: Missing umcid found for game at %s with teams: %s", (uint8_t *)v161, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1D25F77B0](v162, -1, -1);
      uint64_t v168 = v262;
      MEMORY[0x1D25F77B0](v161, -1, -1);

      (*(void (**)(char *, uint64_t))(v255 + 8))(v256, v168);
      uint64_t v169 = v241;
      uint64_t v170 = v272;
      unint64_t v171 = v261;
      uint64_t v172 = v273;
      if (!v118) {
        return ((uint64_t (*)(char *, uint64_t))v260)(v268, v83);
      }
      goto LABEL_47;
    }
    ((void (*)(uint64_t, uint64_t))v260)(v103, v83);

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v255 + 8))(v102, v146);
LABEL_46:
    uint64_t v169 = v241;
    uint64_t v170 = v272;
    unint64_t v171 = v261;
    unint64_t v167 = v269;
    uint64_t v168 = v146;
    uint64_t v172 = v273;
    if (!v118) {
      return ((uint64_t (*)(char *, uint64_t))v260)(v268, v83);
    }
LABEL_47:
    char v270 = *(char **)(v170 + 16);
    uint64_t v173 = v169 + ((*(unsigned __int8 *)(v170 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v170 + 80));
    uint64_t v258 = *(void *)(v170 + 72);
    unint64_t v257 = (void (**)(uint64_t, char *, uint64_t))(v255 + 16);
    uint64_t v272 = v170 + 16;
    uint64_t v256 = (char *)(v170 + 8);
    v255 += 8;
    swift_bridgeObjectRetain();
    *(void *)&long long v174 = 136315650;
    long long v240 = v174;
    uint64_t v239 = MEMORY[0x1E4FBC840] + 8;
    *(void *)&long long v174 = 136315906;
    long long v238 = v174;
    while (1)
    {
      uint64_t v178 = v167;
      uint64_t v271 = (char *)v118;
      ((void (*)(char *, uint64_t, uint64_t))v270)(v171, v173, v172);
      unint64_t v267 = (char *)sub_1D13F2208();
      if (v179)
      {
        unint64_t v180 = v179;
        uint64_t v181 = sub_1D13F21F8();
        if (v182)
        {
          uint64_t v183 = v181;
          unint64_t v184 = v182;
          unint64_t v185 = (void *)(v254 + *(int *)(v246 + 48));
          uint64_t v186 = (uint64_t *)(v254 + *(int *)(v246 + 64));
          v264();
          *unint64_t v185 = v267;
          v185[1] = v180;
          *uint64_t v186 = v183;
          v186[1] = v184;
          unint64_t v187 = v248;
          unint64_t v188 = *v248;
          swift_bridgeObjectRetain();
          unint64_t v250 = v184;
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *unint64_t v187 = v188;
          uint64_t v190 = v172;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            unint64_t v188 = sub_1D13BDAA8(0, *(void *)(v188 + 16) + 1, 1, v188);
            *unint64_t v187 = v188;
          }
          unint64_t v191 = v244;
          unint64_t v193 = *(void *)(v188 + 16);
          unint64_t v192 = *(void *)(v188 + 24);
          uint64_t v194 = v247;
          uint64_t v245 = v183;
          if (v193 >= v192 >> 1)
          {
            uint64_t v237 = sub_1D13BDAA8(v192 > 1, v193 + 1, 1, v188);
            uint64_t v194 = v247;
            unint64_t v188 = v237;
            *uint64_t v248 = v237;
          }
          *(void *)(v188 + 16) = v193 + 1;
          sub_1D13C2938(v254, v188+ ((*(unsigned __int8 *)(v194 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v194 + 80))+ *(void *)(v194 + 72) * v193, &qword_1EBD239B0);
          uint64_t v195 = sub_1D13834E4();
          uint64_t v168 = v262;
          (*v257)((uint64_t)v252, (char *)v195, v262);
          ((void (*)(char *, char *, uint64_t))v264)(v191, v268, v83);
          uint64_t v196 = v253;
          ((void (*)(char *, char *, uint64_t))v270)(v253, v261, v190);
          swift_bridgeObjectRetain();
          unint64_t v197 = v250;
          swift_bridgeObjectRetain();
          uint64_t v198 = sub_1D13F2508();
          os_log_type_t v199 = sub_1D13F2858();
          int v200 = v199;
          if (os_log_type_enabled(v198, v199))
          {
            uint64_t v201 = swift_slowAlloc();
            uint64_t v242 = (char *)swift_slowAlloc();
            uint64_t v276 = (uint64_t)v242;
            *(_DWORD *)uint64_t v201 = v238;
            sub_1D13C28F4((unint64_t *)&qword_1EBD239C0);
            LODWORD(v243) = v200;
            uint64_t v202 = sub_1D13F2C48();
            *(void *)(v201 + 4) = sub_1D138B264(v202, v203, &v276);
            swift_bridgeObjectRelease();
            ((void (*)(char *, uint64_t))v260)(v191, v83);
            *(_WORD *)(v201 + 12) = 2080;
            uint64_t v204 = sub_1D13F2218();
            if (v205)
            {
              unint64_t v206 = v205;
            }
            else
            {
              uint64_t v204 = 7104878;
              unint64_t v206 = 0xE300000000000000;
            }
            *(void *)(v201 + 14) = sub_1D138B264(v204, v206, &v276);
            swift_bridgeObjectRelease();
            unint64_t v207 = *(void (**)(char *, uint64_t))v256;
            (*(void (**)(char *, uint64_t))v256)(v253, v190);
            *(_WORD *)(v201 + 22) = 2080;
            swift_bridgeObjectRetain();
            *(void *)(v201 + 24) = sub_1D138B264((uint64_t)v267, v180, &v276);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v201 + 32) = 2080;
            swift_bridgeObjectRetain();
            *(void *)(v201 + 34) = sub_1D138B264(v245, v197, &v276);
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1D0FA3000, v198, (os_log_type_t)v243, "SportsServer: Game at %s with team %s : %s : %s", (uint8_t *)v201, 0x2Au);
            uint64_t v208 = v242;
            swift_arrayDestroy();
            MEMORY[0x1D25F77B0](v208, -1, -1);
            uint64_t v168 = v262;
            MEMORY[0x1D25F77B0](v201, -1, -1);

            (*(void (**)(char *, uint64_t))v255)(v252, v168);
            unint64_t v171 = v261;
            v207(v261, v190);
            uint64_t v172 = v190;
            unint64_t v167 = v269;
          }
          else
          {
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();

            unint64_t v235 = *(void (**)(char *, uint64_t))v256;
            (*(void (**)(char *, uint64_t))v256)(v196, v190);
            ((void (*)(char *, uint64_t))v260)(v191, v83);
            (*(void (**)(char *, uint64_t))v255)(v252, v168);
            uint64_t v236 = v261;
            v235(v261, v190);
            uint64_t v172 = v190;
            unint64_t v167 = v269;
            unint64_t v171 = v236;
          }
          unsigned int v143 = v249;
          unint64_t v177 = v271;
          goto LABEL_49;
        }
        swift_bridgeObjectRelease();
        uint64_t v178 = v269;
      }
      uint64_t v209 = sub_1D13834E4();
      uint64_t v210 = v259;
      (*v257)((uint64_t)v259, (char *)v209, v168);
      ((void (*)(char *, char *, uint64_t))v264)(v143, v268, v83);
      unint64_t v211 = v143;
      uint64_t v212 = v251;
      uint64_t v213 = v172;
      uint64_t v214 = v168;
      uint64_t v215 = v172;
      uint64_t v216 = v270;
      ((void (*)(char *, char *, uint64_t))v270)(v251, v171, v213);
      ((void (*)(char *, char *, uint64_t))v216)(v178, v171, v215);
      unint64_t v217 = v171;
      uint64_t v218 = sub_1D13F2508();
      os_log_type_t v219 = sub_1D13F2838();
      if (os_log_type_enabled(v218, v219))
      {
        uint64_t v220 = swift_slowAlloc();
        unint64_t v267 = (char *)swift_slowAlloc();
        uint64_t v276 = (uint64_t)v267;
        *(_DWORD *)uint64_t v220 = v240;
        sub_1D13C28F4((unint64_t *)&qword_1EBD239C0);
        uint64_t v221 = v263;
        uint64_t v222 = sub_1D13F2C48();
        *(void *)(v220 + 4) = sub_1D138B264(v222, v223, &v276);
        swift_bridgeObjectRelease();
        ((void (*)(char *, uint64_t))v260)(v211, v221);
        *(_WORD *)(v220 + 12) = 2080;
        sub_1D13F2208();
        uint64_t v225 = v224;
        swift_bridgeObjectRelease();
        if (v225) {
          uint64_t v226 = 0;
        }
        else {
          uint64_t v226 = 6580593;
        }
        if (v225) {
          unint64_t v227 = 0xE000000000000000;
        }
        else {
          unint64_t v227 = 0xE300000000000000;
        }
        *(void *)(v220 + 14) = sub_1D138B264(v226, v227, &v276);
        swift_bridgeObjectRelease();
        uint64_t v228 = *(void (**)(char *, uint64_t))v256;
        (*(void (**)(char *, uint64_t))v256)(v212, v273);
        *(_WORD *)(v220 + 22) = 2080;
        sub_1D13F21F8();
        uint64_t v230 = v229;
        swift_bridgeObjectRelease();
        if (v230) {
          uint64_t v231 = 0;
        }
        else {
          uint64_t v231 = 0x6469636D75;
        }
        if (v230) {
          unint64_t v232 = 0xE000000000000000;
        }
        else {
          unint64_t v232 = 0xE500000000000000;
        }
        *(void *)(v220 + 24) = sub_1D138B264(v231, v232, &v276);
        swift_bridgeObjectRelease();
        v228(v269, v273);
        _os_log_impl(&dword_1D0FA3000, v218, v219, "SportsServer: Game at %s missing identifier %s %s", (uint8_t *)v220, 0x20u);
        uint64_t v233 = (uint64_t)v267;
        swift_arrayDestroy();
        unint64_t v167 = v269;
        MEMORY[0x1D25F77B0](v233, -1, -1);
        uint64_t v234 = v262;
        MEMORY[0x1D25F77B0](v220, -1, -1);

        (*(void (**)(char *, uint64_t))v255)(v259, v234);
        unint64_t v171 = v261;
        v228(v261, v273);
        uint64_t v168 = v234;
        uint64_t v172 = v273;
        uint64_t v83 = v221;
        unsigned int v143 = v211;
        unint64_t v177 = v271;
      }
      else
      {

        unint64_t v175 = *(void (**)(char *, uint64_t))v256;
        (*(void (**)(char *, uint64_t))v256)(v178, v215);
        v175(v212, v215);
        uint64_t v83 = v263;
        ((void (*)(char *, uint64_t))v260)(v211, v263);
        (*(void (**)(char *, uint64_t))v255)(v210, v214);
        v175(v217, v215);
        unint64_t v171 = v217;
        uint64_t v176 = v211;
        unint64_t v177 = v271;
        unint64_t v167 = v178;
        uint64_t v172 = v215;
        uint64_t v168 = v214;
        unsigned int v143 = v176;
      }
LABEL_49:
      v173 += v258;
      int64_t v118 = (int64_t)(v177 - 1);
      if (!v118)
      {
        swift_bridgeObjectRelease();
        return ((uint64_t (*)(void, void))v260)(v268, v83);
      }
    }
  }
  sub_1D138E150((uint64_t)v49, (uint64_t *)&unk_1EA64E390);
  uint64_t v81 = (uint64_t)v271;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v266 + 56))(v271, 1, 1, v263);
LABEL_4:
  sub_1D138E150(v81, &qword_1EBD239C8);
  uint64_t v84 = sub_1D13834E4();
  uint64_t v85 = v255;
  uint64_t v86 = v265;
  uint64_t v87 = v262;
  (*(void (**)(char *, uint64_t, uint64_t))(v255 + 16))(v265, v84, v262);
  uint64_t v88 = sub_1D13F2508();
  os_log_type_t v89 = sub_1D13F2838();
  if (os_log_type_enabled(v88, v89))
  {
    double v90 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)double v90 = 0;
    _os_log_impl(&dword_1D0FA3000, v88, v89, "SportsServer: no date", v90, 2u);
    uint64_t v91 = v90;
    uint64_t v87 = v262;
    MEMORY[0x1D25F77B0](v91, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v86, v87);
}

id SportsServer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SportsServer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1D13BDAA8(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA64E380);
  uint64_t v10 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EBD239B0) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = sub_1D13F2B58();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EBD239B0) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1D13C2B34(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

void sub_1D13BDD18(void **a1)
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EBD239B0) - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_1D13BF5B4(v3);
  }
  uint64_t v4 = v3[2];
  v5[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_1D13BDDC4(v5);
  *a1 = v3;
}

void sub_1D13BDDC4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v134 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD239B0);
  uint64_t v4 = *(void *)(v134 - 8);
  MEMORY[0x1F4188790](v134, v5);
  uint64_t v130 = (uint64_t)&v125 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7, v8);
  uint64_t v140 = (uint64_t)&v125 - v9;
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v137 = (uint64_t)&v125 - v12;
  MEMORY[0x1F4188790](v13, v14);
  uint64_t v136 = (uint64_t)&v125 - v15;
  uint64_t v16 = a1;
  uint64_t v17 = a1[1];
  uint64_t v18 = sub_1D13F2C38();
  if (v18 >= v17)
  {
    if (v17 < 0) {
      goto LABEL_141;
    }
    if (v17) {
      sub_1D13BE818(0, v17, 1, a1);
    }
    return;
  }
  if (v17 >= 0) {
    uint64_t v19 = v17;
  }
  else {
    uint64_t v19 = v17 + 1;
  }
  if (v17 < -1) {
    goto LABEL_149;
  }
  uint64_t v133 = v4;
  uint64_t v127 = v18;
  if (v17 < 2)
  {
    uint64_t v24 = (char *)MEMORY[0x1E4FBC860];
    unint64_t v132 = MEMORY[0x1E4FBC860]
         + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v23 = a1;
    uint64_t v126 = MEMORY[0x1E4FBC860];
    if (v17 != 1)
    {
      unint64_t v26 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_107:
      int64_t v118 = v24;
      if (v26 >= 2)
      {
        uint64_t v119 = *v23;
        do
        {
          unint64_t v120 = v26 - 2;
          if (v26 < 2) {
            goto LABEL_136;
          }
          if (!v119) {
            goto LABEL_148;
          }
          uint64_t v121 = *(void *)&v118[16 * v120 + 32];
          uint64_t v122 = *(void *)&v118[16 * v26 + 24];
          sub_1D13BEA9C(v119 + *(void *)(v133 + 72) * v121, v119 + *(void *)(v133 + 72) * *(void *)&v118[16 * v26 + 16], v119 + *(void *)(v133 + 72) * v122, v132);
          if (v2) {
            break;
          }
          if (v122 < v121) {
            goto LABEL_137;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            int64_t v118 = sub_1D13B88CC((uint64_t)v118);
          }
          if (v120 >= *((void *)v118 + 2)) {
            goto LABEL_138;
          }
          uint64_t v123 = &v118[16 * v120 + 32];
          *(void *)uint64_t v123 = v121;
          *((void *)v123 + 1) = v122;
          unint64_t v124 = *((void *)v118 + 2);
          if (v26 > v124) {
            goto LABEL_139;
          }
          memmove(&v118[16 * v26 + 16], &v118[16 * v26 + 32], 16 * (v124 - v26));
          *((void *)v118 + 2) = v124 - 1;
          unint64_t v26 = v124 - 1;
        }
        while (v124 > 2);
      }
LABEL_118:
      swift_bridgeObjectRelease();
      *(void *)(v126 + 16) = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v20 = v19 >> 1;
    uint64_t v21 = sub_1D13F2788();
    *(void *)(v21 + 16) = v20;
    uint64_t v22 = *(unsigned __int8 *)(v4 + 80);
    uint64_t v126 = v21;
    unint64_t v132 = v21 + ((v22 + 32) & ~v22);
    uint64_t v23 = v16;
  }
  uint64_t v25 = 0;
  uint64_t v24 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v139 = v23;
  while (1)
  {
    uint64_t v27 = v25 + 1;
    uint64_t v131 = v25;
    if (v25 + 1 >= v17)
    {
      uint64_t v45 = v25 + 1;
      goto LABEL_58;
    }
    uint64_t v28 = *v23;
    uint64_t v29 = *(void *)(v133 + 72);
    uint64_t v30 = *v23 + v29 * v27;
    uint64_t v31 = v136;
    uint64_t v138 = v17;
    sub_1D13C29CC(v30, v136, &qword_1EBD239B0);
    uint64_t v32 = v28 + v29 * v25;
    uint64_t v33 = v137;
    sub_1D13C29CC(v32, v137, &qword_1EBD239B0);
    LODWORD(v135) = sub_1D13F1F58();
    uint64_t v34 = v33;
    uint64_t v25 = v131;
    sub_1D138E150(v34, &qword_1EBD239B0);
    uint64_t v35 = v138;
    sub_1D138E150(v31, &qword_1EBD239B0);
    uint64_t v36 = v25 + 2;
    uint64_t v129 = v28;
    uint64_t v141 = v29;
    if (v25 + 2 >= v35)
    {
      uint64_t v39 = v25 + 2;
      uint64_t v23 = v139;
      uint64_t v44 = v29;
      if ((v135 & 1) == 0) {
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v128 = v2;
      uint64_t v37 = v29 * v27;
      uint64_t v38 = v28;
      uint64_t v39 = v36;
      uint64_t v40 = v29 * v36;
      do
      {
        uint64_t v41 = v136;
        sub_1D13C29CC(v38 + v40, v136, &qword_1EBD239B0);
        uint64_t v42 = v137;
        sub_1D13C29CC(v38 + v37, v137, &qword_1EBD239B0);
        int v43 = sub_1D13F1F58();
        sub_1D138E150(v42, &qword_1EBD239B0);
        sub_1D138E150(v41, &qword_1EBD239B0);
        if ((v135 ^ v43))
        {
          uint64_t v35 = v138;
          uint64_t v23 = v139;
          uint64_t v2 = v128;
          uint64_t v28 = v129;
          uint64_t v25 = v131;
          uint64_t v44 = v141;
          if ((v135 & 1) == 0) {
            goto LABEL_37;
          }
          goto LABEL_24;
        }
        uint64_t v44 = v141;
        v38 += v141;
        ++v39;
        uint64_t v35 = v138;
      }
      while (v138 != v39);
      uint64_t v39 = v138;
      uint64_t v23 = v139;
      uint64_t v2 = v128;
      uint64_t v28 = v129;
      uint64_t v25 = v131;
      if ((v135 & 1) == 0)
      {
LABEL_37:
        uint64_t v45 = v39;
        break;
      }
    }
LABEL_24:
    if (v39 < v25) {
      goto LABEL_142;
    }
    uint64_t v45 = v39;
    if (v25 >= v39) {
      break;
    }
    uint64_t v128 = v2;
    uint64_t v46 = 0;
    uint64_t v47 = v44 * (v39 - 1);
    uint64_t v48 = v39 * v44;
    uint64_t v49 = v25 * v44;
    do
    {
      if (v25 != v45 + v46 - 1)
      {
        if (!v28) {
          goto LABEL_147;
        }
        uint64_t v135 = v28 + v47;
        sub_1D13C2938(v28 + v49, v130, &qword_1EBD239B0);
        if (v49 < v47 || v28 + v49 >= (unint64_t)(v28 + v48))
        {
          uint64_t v50 = v135;
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          uint64_t v50 = v135;
          if (v49 != v47) {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        sub_1D13C2938(v130, v50, &qword_1EBD239B0);
        uint64_t v23 = v139;
        uint64_t v45 = v39;
        uint64_t v28 = v129;
        uint64_t v44 = v141;
      }
      ++v25;
      --v46;
      v47 -= v44;
      v48 -= v44;
      v49 += v44;
    }
    while (v25 < v45 + v46);
    uint64_t v2 = v128;
    uint64_t v25 = v131;
    uint64_t v35 = v138;
    if (v45 < v138) {
      goto LABEL_39;
    }
LABEL_58:
    if (v45 < v25) {
      goto LABEL_135;
    }
    uint64_t v64 = v23;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v138 = v45;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v24 = sub_1D13B87D0(0, *((void *)v24 + 2) + 1, 1, v24);
    }
    unint64_t v67 = *((void *)v24 + 2);
    unint64_t v66 = *((void *)v24 + 3);
    unint64_t v26 = v67 + 1;
    if (v67 >= v66 >> 1) {
      uint64_t v24 = sub_1D13B87D0((char *)(v66 > 1), v67 + 1, 1, v24);
    }
    uint64_t v23 = v64;
    uint64_t v68 = v2;
    *((void *)v24 + 2) = v26;
    uint64_t v69 = v24 + 32;
    uint64_t v70 = &v24[16 * v67 + 32];
    uint64_t v71 = v138;
    *(void *)uint64_t v70 = v131;
    *((void *)v70 + 1) = v71;
    if (v67)
    {
      while (1)
      {
        unint64_t v72 = v26 - 1;
        if (v26 >= 4)
        {
          uint64_t v77 = &v69[16 * v26];
          uint64_t v78 = *((void *)v77 - 8);
          uint64_t v79 = *((void *)v77 - 7);
          BOOL v83 = __OFSUB__(v79, v78);
          uint64_t v80 = v79 - v78;
          if (v83) {
            goto LABEL_124;
          }
          uint64_t v82 = *((void *)v77 - 6);
          uint64_t v81 = *((void *)v77 - 5);
          BOOL v83 = __OFSUB__(v81, v82);
          uint64_t v75 = v81 - v82;
          char v76 = v83;
          if (v83) {
            goto LABEL_125;
          }
          unint64_t v84 = v26 - 2;
          uint64_t v85 = &v69[16 * v26 - 32];
          uint64_t v87 = *(void *)v85;
          uint64_t v86 = *((void *)v85 + 1);
          BOOL v83 = __OFSUB__(v86, v87);
          uint64_t v88 = v86 - v87;
          if (v83) {
            goto LABEL_127;
          }
          BOOL v83 = __OFADD__(v75, v88);
          uint64_t v89 = v75 + v88;
          if (v83) {
            goto LABEL_130;
          }
          if (v89 >= v80)
          {
            uint64_t v107 = &v69[16 * v72];
            uint64_t v109 = *(void *)v107;
            uint64_t v108 = *((void *)v107 + 1);
            BOOL v83 = __OFSUB__(v108, v109);
            uint64_t v110 = v108 - v109;
            if (v83) {
              goto LABEL_134;
            }
            BOOL v100 = v75 < v110;
            goto LABEL_95;
          }
        }
        else
        {
          if (v26 != 3)
          {
            uint64_t v101 = *((void *)v24 + 4);
            uint64_t v102 = *((void *)v24 + 5);
            BOOL v83 = __OFSUB__(v102, v101);
            uint64_t v94 = v102 - v101;
            char v95 = v83;
            goto LABEL_89;
          }
          uint64_t v74 = *((void *)v24 + 4);
          uint64_t v73 = *((void *)v24 + 5);
          BOOL v83 = __OFSUB__(v73, v74);
          uint64_t v75 = v73 - v74;
          char v76 = v83;
        }
        if (v76) {
          goto LABEL_126;
        }
        unint64_t v84 = v26 - 2;
        double v90 = &v69[16 * v26 - 32];
        uint64_t v92 = *(void *)v90;
        uint64_t v91 = *((void *)v90 + 1);
        BOOL v93 = __OFSUB__(v91, v92);
        uint64_t v94 = v91 - v92;
        char v95 = v93;
        if (v93) {
          goto LABEL_129;
        }
        uint64_t v96 = &v69[16 * v72];
        uint64_t v98 = *(void *)v96;
        uint64_t v97 = *((void *)v96 + 1);
        BOOL v83 = __OFSUB__(v97, v98);
        uint64_t v99 = v97 - v98;
        if (v83) {
          goto LABEL_132;
        }
        if (__OFADD__(v94, v99)) {
          goto LABEL_133;
        }
        if (v94 + v99 >= v75)
        {
          BOOL v100 = v75 < v99;
LABEL_95:
          if (v100) {
            unint64_t v72 = v84;
          }
          goto LABEL_97;
        }
LABEL_89:
        if (v95) {
          goto LABEL_128;
        }
        uint64_t v103 = &v69[16 * v72];
        uint64_t v105 = *(void *)v103;
        uint64_t v104 = *((void *)v103 + 1);
        BOOL v83 = __OFSUB__(v104, v105);
        uint64_t v106 = v104 - v105;
        if (v83) {
          goto LABEL_131;
        }
        if (v106 < v94) {
          goto LABEL_14;
        }
LABEL_97:
        unint64_t v111 = v72 - 1;
        if (v72 - 1 >= v26)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!*v23) {
          goto LABEL_146;
        }
        uint64_t v112 = v24;
        uint64_t v113 = &v69[16 * v111];
        uint64_t v114 = *(void *)v113;
        unint64_t v115 = &v69[16 * v72];
        uint64_t v116 = *((void *)v115 + 1);
        sub_1D13BEA9C(*v23 + *(void *)(v133 + 72) * *(void *)v113, *v23 + *(void *)(v133 + 72) * *(void *)v115, *v23 + *(void *)(v133 + 72) * v116, v132);
        if (v68) {
          goto LABEL_118;
        }
        if (v116 < v114) {
          goto LABEL_121;
        }
        if (v72 > *((void *)v112 + 2)) {
          goto LABEL_122;
        }
        *(void *)uint64_t v113 = v114;
        *(void *)&v69[16 * v111 + 8] = v116;
        unint64_t v117 = *((void *)v112 + 2);
        if (v72 >= v117) {
          goto LABEL_123;
        }
        uint64_t v24 = v112;
        unint64_t v26 = v117 - 1;
        memmove(&v69[16 * v72], v115 + 16, 16 * (v117 - 1 - v72));
        *((void *)v112 + 2) = v117 - 1;
        uint64_t v23 = v139;
        if (v117 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v26 = 1;
LABEL_14:
    uint64_t v17 = v23[1];
    uint64_t v25 = v138;
    uint64_t v2 = v68;
    if (v138 >= v17) {
      goto LABEL_107;
    }
  }
  if (v45 >= v35) {
    goto LABEL_58;
  }
LABEL_39:
  if (__OFSUB__(v45, v25)) {
    goto LABEL_140;
  }
  if (v45 - v25 >= v127) {
    goto LABEL_58;
  }
  if (__OFADD__(v25, v127)) {
    goto LABEL_143;
  }
  if (v25 + v127 >= v35) {
    uint64_t v51 = v35;
  }
  else {
    uint64_t v51 = v25 + v127;
  }
  if (v51 >= v25)
  {
    if (v45 != v51)
    {
      unint64_t v125 = v24;
      uint64_t v128 = v2;
      uint64_t v129 = v51;
      uint64_t v52 = *(void *)(v133 + 72);
      uint64_t v141 = v52 * (v45 - 1);
      uint64_t v135 = v52;
      uint64_t v53 = v45 * v52;
      do
      {
        uint64_t v55 = 0;
        uint64_t v138 = v45;
        while (1)
        {
          uint64_t v56 = *v23;
          uint64_t v57 = v53;
          uint64_t v58 = v53 + v55;
          uint64_t v59 = v23;
          uint64_t v60 = v136;
          sub_1D13C29CC(v58 + *v23, v136, &qword_1EBD239B0);
          uint64_t v61 = v137;
          sub_1D13C29CC(v141 + v55 + v56, v137, &qword_1EBD239B0);
          LOBYTE(v56) = sub_1D13F1F58();
          sub_1D138E150(v61, &qword_1EBD239B0);
          sub_1D138E150(v60, &qword_1EBD239B0);
          if ((v56 & 1) == 0) {
            break;
          }
          uint64_t v62 = *v59;
          if (!*v59) {
            goto LABEL_145;
          }
          uint64_t v53 = v57;
          uint64_t v63 = v62 + v141 + v55;
          sub_1D13C2938(v62 + v57 + v55, v140, &qword_1EBD239B0);
          swift_arrayInitWithTakeFrontToBack();
          sub_1D13C2938(v140, v63, &qword_1EBD239B0);
          v55 -= v135;
          ++v25;
          uint64_t v54 = v138;
          uint64_t v23 = v139;
          if (v138 == v25) {
            goto LABEL_49;
          }
        }
        uint64_t v54 = v138;
        uint64_t v23 = v59;
        uint64_t v53 = v57;
LABEL_49:
        uint64_t v45 = v54 + 1;
        v141 += v135;
        v53 += v135;
        uint64_t v25 = v131;
      }
      while (v45 != v129);
      uint64_t v45 = v129;
      uint64_t v2 = v128;
      uint64_t v24 = v125;
    }
    goto LABEL_58;
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  sub_1D13F2B58();
  __break(1u);
}

void sub_1D13BE818(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v27 = a1;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD239B0);
  MEMORY[0x1F4188790](v28, v7);
  uint64_t v32 = (uint64_t)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9, v10);
  uint64_t v29 = (uint64_t)&v25 - v11;
  MEMORY[0x1F4188790](v12, v13);
  uint64_t v16 = (char *)&v25 - v15;
  uint64_t v31 = a3;
  uint64_t v26 = a2;
  if (a3 != a2)
  {
    uint64_t v17 = *(void *)(v14 + 72);
    uint64_t v34 = v17 * (v31 - 1);
    uint64_t v30 = v17;
    uint64_t v33 = v17 * v31;
LABEL_5:
    uint64_t v18 = 0;
    uint64_t v19 = v27;
    while (1)
    {
      uint64_t v20 = *a4;
      sub_1D13C29CC(v33 + v18 + *a4, (uint64_t)v16, &qword_1EBD239B0);
      uint64_t v21 = v29;
      sub_1D13C29CC(v34 + v18 + v20, v29, &qword_1EBD239B0);
      LOBYTE(v20) = sub_1D13F1F58();
      sub_1D138E150(v21, &qword_1EBD239B0);
      sub_1D138E150((uint64_t)v16, &qword_1EBD239B0);
      if ((v20 & 1) == 0)
      {
LABEL_4:
        v34 += v30;
        v33 += v30;
        if (++v31 == v26) {
          return;
        }
        goto LABEL_5;
      }
      uint64_t v22 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v23 = a4;
      uint64_t v24 = v22 + v34 + v18;
      sub_1D13C2938(v22 + v33 + v18, v32, &qword_1EBD239B0);
      swift_arrayInitWithTakeFrontToBack();
      sub_1D13C2938(v32, v24, &qword_1EBD239B0);
      v18 -= v30;
      ++v19;
      a4 = v23;
      if (v31 == v19) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

uint64_t sub_1D13BEA9C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD239B0);
  MEMORY[0x1F4188790](v45, v8);
  uint64_t v46 = (uint64_t)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v13 = (char *)&v42 - v12;
  uint64_t v15 = *(void *)(v14 + 72);
  if (!v15)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v15 == -1) {
    goto LABEL_62;
  }
  int64_t v16 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v15 == -1) {
    goto LABEL_63;
  }
  uint64_t v17 = (uint64_t)(a2 - a1) / v15;
  unint64_t v49 = a1;
  unint64_t v48 = a4;
  uint64_t v18 = v16 / v15;
  if (v17 >= v16 / v15)
  {
    if ((v18 & 0x8000000000000000) == 0)
    {
      uint64_t v20 = v18 * v15;
      if (a4 < a2 || a2 + v20 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v27 = a4 + v20;
      unint64_t v47 = a4 + v20;
      unint64_t v49 = a2;
      if (v20 >= 1 && a1 < a2)
      {
        uint64_t v29 = -v15;
        unint64_t v43 = a4;
        unint64_t v44 = a1;
        do
        {
          unint64_t v30 = a3 + v29;
          sub_1D13C29CC(v27 + v29, (uint64_t)v13, &qword_1EBD239B0);
          unint64_t v31 = a2 + v29;
          unint64_t v32 = a3;
          uint64_t v33 = (uint64_t)v13;
          uint64_t v34 = v46;
          sub_1D13C29CC(a2 + v29, v46, &qword_1EBD239B0);
          char v35 = sub_1D13F1F58();
          uint64_t v36 = v34;
          uint64_t v13 = (char *)v33;
          sub_1D138E150(v36, &qword_1EBD239B0);
          sub_1D138E150(v33, &qword_1EBD239B0);
          if (v35)
          {
            if (v32 < a2 || v30 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v39 = v43;
              unint64_t v38 = v44;
            }
            else
            {
              BOOL v37 = v32 == a2;
              unint64_t v39 = v43;
              unint64_t v38 = v44;
              if (!v37) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v49 += v29;
          }
          else
          {
            unint64_t v40 = v47;
            v47 += v29;
            if (v32 < v40 || v30 >= v40)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v31 = a2;
              unint64_t v39 = v43;
              unint64_t v38 = v44;
            }
            else
            {
              BOOL v37 = v32 == v40;
              unint64_t v39 = v43;
              unint64_t v38 = v44;
              if (!v37) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v31 = a2;
            }
          }
          unint64_t v27 = v47;
          if (v47 <= v39) {
            break;
          }
          a2 = v31;
          a3 = v30;
        }
        while (v31 > v38);
      }
      goto LABEL_60;
    }
  }
  else if ((v17 & 0x8000000000000000) == 0)
  {
    uint64_t v19 = v17 * v15;
    if (a4 < a1 || a1 + v19 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v44 = a4 + v19;
    unint64_t v47 = a4 + v19;
    if (v19 >= 1 && a2 < a3)
    {
      uint64_t v22 = v46;
      do
      {
        sub_1D13C29CC(a2, (uint64_t)v13, &qword_1EBD239B0);
        sub_1D13C29CC(a4, v22, &qword_1EBD239B0);
        char v23 = sub_1D13F1F58();
        sub_1D138E150(v22, &qword_1EBD239B0);
        sub_1D138E150((uint64_t)v13, &qword_1EBD239B0);
        unint64_t v24 = v49;
        if (v23)
        {
          unint64_t v25 = a2 + v15;
          if (v49 < a2 || v49 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v49 == a2)
          {
            unint64_t v24 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          unint64_t v26 = v48 + v15;
          if (v49 < v48 || v49 >= v26)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v49 != v48)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v48 = v26;
          unint64_t v25 = a2;
        }
        unint64_t v49 = v24 + v15;
        a4 = v48;
        if (v48 >= v44) {
          break;
        }
        a2 = v25;
      }
      while (v25 < a3);
    }
LABEL_60:
    sub_1D13BEF70(&v49, &v48, (uint64_t *)&v47);
    return 1;
  }
LABEL_64:
  uint64_t result = sub_1D13F2BC8();
  __break(1u);
  return result;
}

uint64_t sub_1D13BEF70(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD239B0);
  uint64_t v7 = *(void *)(*(void *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1) {
    goto LABEL_18;
  }
  if (v8 / v7 < 0)
  {
LABEL_19:
    uint64_t result = sub_1D13F2BC8();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v3 != v4)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

uint64_t sub_1D13BF0B4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D13BF134(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_1EA64E370, &qword_1EBD239B8);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1D13BF0E4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D13BF134(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_1EA64E380, &qword_1EBD239B0);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1D13BF114(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D13BF374(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1D13BF134(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    int64_t v16 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  int64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  void v16[2] = v11;
  void v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  uint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  unint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = sub_1D13F2BC8();
  __break(1u);
  return result;
}

uint64_t sub_1D13BF374(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EA64E3B8);
  uint64_t v10 = *(void *)(sub_1D13F2228() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_1D13F2228() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (char *)v13 + v17;
  uint64_t v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  uint64_t v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = sub_1D13F2BC8();
  __break(1u);
  return result;
}

uint64_t sub_1D13BF5B4(void *a1)
{
  return sub_1D13BF134(0, a1[2], 0, a1, (uint64_t *)&unk_1EA64E380, &qword_1EBD239B0);
}

uint64_t sub_1D13BF5EC()
{
  uint64_t v1 = sub_1D13F2538();
  v0[30] = v1;
  v0[31] = *(void *)(v1 - 8);
  v0[32] = swift_task_alloc();
  v0[33] = swift_task_alloc();
  v0[34] = swift_task_alloc();
  v0[35] = swift_task_alloc();
  v0[36] = swift_task_alloc();
  v0[37] = swift_task_alloc();
  v0[38] = swift_task_alloc();
  v0[39] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D13BF700, 0, 0);
}

uint64_t sub_1D13BF700()
{
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 248);
  unsigned int v4 = objc_msgSend(self, sel_isOptOutAvailable);
  uint64_t v5 = sub_1D13834E4();
  *(void *)(v0 + 320) = v5;
  unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(void *)(v0 + 32_Block_object_dispose(&STACK[0x210], 8) = v6;
  *(void *)(v0 + 336) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v5, v2);
  int64_t v7 = sub_1D13F2508();
  os_log_type_t v8 = sub_1D13F2828();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 67109120;
    *(_DWORD *)(v0 + 384) = v4;
    sub_1D13F2978();
    _os_log_impl(&dword_1D0FA3000, v7, v8, "SportsServer: Check isOptOutAvailable %{BOOL}d", v9, 8u);
    MEMORY[0x1D25F77B0](v9, -1, -1);
  }

  uint64_t v10 = *(void *)(v0 + 312);
  uint64_t v11 = *(void *)(v0 + 240);
  uint64_t v12 = *(void *)(v0 + 248);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  *(void *)(v0 + 344) = v13;
  *(void *)(v0 + 352) = (v12 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v13(v10, v11);
  if (v4)
  {
    id v14 = objc_msgSend(self, sel_sharedInstance);
    id v15 = objc_msgSend(v14, sel_activeAccount);

    if (v15)
    {
      unsigned int v16 = objc_msgSend(v15, sel_isAuthenticated);
    }
    else
    {
      unsigned int v16 = 0;
    }
    v6(*(void *)(v0 + 304), v5, *(void *)(v0 + 240));
    unint64_t v22 = sub_1D13F2508();
    os_log_type_t v23 = sub_1D13F2828();
    if (os_log_type_enabled(v22, v23))
    {
      char v35 = v13;
      unint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v24 = 67109120;
      *(_DWORD *)(v0 + 392) = v16;
      sub_1D13F2978();
      _os_log_impl(&dword_1D0FA3000, v22, v23, "SportsServer: Check isAuthenticated %{BOOL}d", v24, 8u);
      unint64_t v25 = v24;
      uint64_t v13 = v35;
      MEMORY[0x1D25F77B0](v25, -1, -1);
    }
    uint64_t v26 = *(void *)(v0 + 304);
    uint64_t v27 = *(void *)(v0 + 240);

    v13(v26, v27);
    if (v16)
    {
      uint64_t v28 = self;
      *(void *)(v0 + 360) = v28;
      *(void *)(v0 + 16) = v0;
      *(void *)(v0 + 56) = v0 + 396;
      *(void *)(v0 + 24) = sub_1D13BFC34;
      uint64_t v29 = swift_continuation_init();
      *(void *)(v0 + 184) = MEMORY[0x1E4F143A8];
      *(void *)(v0 + 192) = 0x40000000;
      *(void *)(v0 + 200) = sub_1D13BBB00;
      *(void *)(v0 + 20_Block_object_dispose(&STACK[0x210], 8) = &block_descriptor_32;
      *(void *)(v0 + 216) = v29;
      objc_msgSend(v28, sel_isOnboarded_, v0 + 184);
      return MEMORY[0x1F41881E8](v0 + 16);
    }
    unint64_t v17 = (uint64_t *)(v0 + 264);
    v6(*(void *)(v0 + 264), v5, *(void *)(v0 + 240));
    uint64_t v18 = sub_1D13F2508();
    int v19 = sub_1D13F2858();
    if (os_log_type_enabled(v18, (os_log_type_t)v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      uint64_t v21 = "SportsServer: Returning no teams - Not authenticated";
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v0 + 256);
    v6(*(void *)(v0 + 256), v5, *(void *)(v0 + 240));
    uint64_t v18 = sub_1D13F2508();
    int v19 = sub_1D13F2858();
    if (os_log_type_enabled(v18, (os_log_type_t)v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      uint64_t v21 = "SportsServer: Returning no teams - Sports not available";
LABEL_17:
      _os_log_impl(&dword_1D0FA3000, v18, (os_log_type_t)v19, v21, v20, 2u);
      MEMORY[0x1D25F77B0](v20, -1, -1);
    }
  }
  uint64_t v30 = *v17;
  uint64_t v31 = *(void *)(v0 + 240);

  v13(v30, v31);
  id v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F4B318]), sel_init);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v33 = *(uint64_t (**)(id))(v0 + 8);
  return v33(v32);
}

uint64_t sub_1D13BFC34()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 36_Block_object_dispose(&STACK[0x210], 8) = v1;
  if (v1) {
    uint64_t v2 = sub_1D13C05CC;
  }
  else {
    uint64_t v2 = sub_1D13BFD44;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1D13BFD44()
{
  int v1 = *(unsigned __int8 *)(v0 + 396);
  (*(void (**)(void, void, void))(v0 + 328))(*(void *)(v0 + 296), *(void *)(v0 + 320), *(void *)(v0 + 240));
  uint64_t v2 = sub_1D13F2508();
  os_log_type_t v3 = sub_1D13F2828();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 67109120;
    *(_DWORD *)(v0 + 38_Block_object_dispose(&STACK[0x210], 8) = v1;
    sub_1D13F2978();
    _os_log_impl(&dword_1D0FA3000, v2, v3, "SportsServer: Check isOnboarded %{BOOL}d", v4, 8u);
    MEMORY[0x1D25F77B0](v4, -1, -1);
  }
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v0 + 344);
  uint64_t v6 = *(void *)(v0 + 296);
  uint64_t v7 = *(void *)(v0 + 240);

  v5(v6, v7);
  os_log_type_t v8 = *(void (**)(void, uint64_t, uint64_t))(v0 + 328);
  uint64_t v9 = *(void *)(v0 + 320);
  uint64_t v10 = *(void *)(v0 + 240);
  if (v1)
  {
    v8(*(void *)(v0 + 288), v9, v10);
    uint64_t v11 = sub_1D13F2508();
    os_log_type_t v12 = sub_1D13F2828();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_1D0FA3000, v11, v12, "SportsServer: Request start", v13, 2u);
      MEMORY[0x1D25F77B0](v13, -1, -1);
    }
    id v14 = *(void **)(v0 + 360);
    id v15 = *(void (**)(uint64_t, uint64_t))(v0 + 344);
    uint64_t v16 = *(void *)(v0 + 288);
    uint64_t v17 = *(void *)(v0 + 240);

    v15(v16, v17);
    *(void *)(v0 + 80) = v0;
    *(void *)(v0 + 120) = v0 + 224;
    *(void *)(v0 + 8_Block_object_dispose(&STACK[0x210], 8) = sub_1D13C0100;
    uint64_t v18 = swift_continuation_init();
    *(void *)(v0 + 144) = MEMORY[0x1E4F143A8];
    *(void *)(v0 + 152) = 0x40000000;
    *(void *)(v0 + 160) = sub_1D13BBBB4;
    *(void *)(v0 + 16_Block_object_dispose(&STACK[0x210], 8) = &block_descriptor_34;
    *(void *)(v0 + 176) = v18;
    objc_msgSend(v14, sel_favoritesWithCompletion_, v0 + 144);
    return MEMORY[0x1F41881E8](v0 + 80);
  }
  else
  {
    v8(*(void *)(v0 + 272), v9, v10);
    int v19 = sub_1D13F2508();
    os_log_type_t v20 = sub_1D13F2858();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl(&dword_1D0FA3000, v19, v20, "SportsServer: Returning no teams - Sync my sports not enabled", v21, 2u);
      MEMORY[0x1D25F77B0](v21, -1, -1);
    }
    unint64_t v22 = *(void (**)(uint64_t, uint64_t))(v0 + 344);
    uint64_t v23 = *(void *)(v0 + 272);
    uint64_t v24 = *(void *)(v0 + 240);

    v22(v23, v24);
    id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F4B318]), sel_init);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = *(uint64_t (**)(id))(v0 + 8);
    return v26(v25);
  }
}

uint64_t sub_1D13C0100()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 376) = v1;
  if (v1) {
    uint64_t v2 = sub_1D13C069C;
  }
  else {
    uint64_t v2 = sub_1D13C0210;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t sub_1D13C0210()
{
  uint64_t v20 = v0;
  unint64_t v3 = *(void *)(v0 + 224);
  (*(void (**)(void, void, void))(v0 + 328))(*(void *)(v0 + 280), *(void *)(v0 + 320), *(void *)(v0 + 240));
  swift_bridgeObjectRetain_n();
  uint64_t v4 = sub_1D13F2508();
  os_log_type_t v5 = sub_1D13F2828();
  unint64_t v6 = v3 >> 62;
  if (!os_log_type_enabled(v4, v5))
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_6;
  }
  uint64_t v2 = (uint64_t *)(v0 + 232);
  uint64_t v1 = (uint8_t *)swift_slowAlloc();
  *(_DWORD *)uint64_t v1 = 134217984;
  if (v6) {
    goto LABEL_20;
  }
  uint64_t v7 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    swift_bridgeObjectRelease();
    uint64_t *v2 = v7;
    sub_1D13F2978();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D0FA3000, v4, v5, "SportsServer: Request finish, count = %ld", v1, 0xCu);
    MEMORY[0x1D25F77B0](v1, -1, -1);
LABEL_6:

    (*(void (**)(void, void))(v0 + 344))(*(void *)(v0 + 280), *(void *)(v0 + 240));
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = sub_1D13F2B88();
      swift_bridgeObjectRelease();
      if (!v8) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v8 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v8) {
        goto LABEL_16;
      }
    }
    uint64_t v19 = MEMORY[0x1E4FBC860];
    uint64_t v4 = &v19;
    sub_1D13F2B08();
    if ((v8 & 0x8000000000000000) == 0) {
      break;
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_1D13F2B88();
    swift_bridgeObjectRelease();
  }
  uint64_t v9 = 0;
  do
  {
    if ((v3 & 0xC000000000000001) != 0)
    {
      uint64_t v10 = (void *)MEMORY[0x1D25F54B0](v9, v3);
    }
    else
    {
      uint64_t v10 = *(void **)(v3 + 8 * v9 + 32);
      swift_unknownObjectRetain();
    }
    ++v9;
    id v11 = objc_msgSend(v10, sel_ID);
    sub_1D13F2688();

    id v12 = objc_allocWithZone(MEMORY[0x1E4F4B320]);
    uint64_t v13 = (void *)sub_1D13F2678();
    swift_bridgeObjectRelease();
    objc_msgSend(v12, sel_initWithName_umcid_, 0, v13);

    swift_unknownObjectRelease();
    sub_1D13F2AE8();
    sub_1D13F2B18();
    sub_1D13F2B28();
    sub_1D13F2AF8();
  }
  while (v8 != v9);
LABEL_16:
  swift_bridgeObjectRelease();
  id v14 = objc_allocWithZone(MEMORY[0x1E4F4B318]);
  sub_1D1384DE0(0, (unint64_t *)&unk_1EBD23830);
  id v15 = (void *)sub_1D13F2738();
  swift_bridgeObjectRelease();
  id v16 = objc_msgSend(v14, sel_initWithTeams_, v15);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(id))(v0 + 8);
  return v17(v16);
}

uint64_t sub_1D13C05CC()
{
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D13C069C()
{
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1D13C076C()
{
  uint64_t v1 = sub_1D13F2538();
  v0[7] = v1;
  v0[8] = *(void *)(v1 - 8);
  v0[9] = swift_task_alloc();
  v0[10] = swift_task_alloc();
  v0[11] = swift_task_alloc();
  v0[12] = swift_task_alloc();
  return MEMORY[0x1F4188298](sub_1D13C0850, 0, 0);
}

uint64_t sub_1D13C0850()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v4 = sub_1D13834E4();
  v0[13] = v4;
  os_log_type_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[14] = v5;
  v0[15] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v1, v4, v2);
  unint64_t v6 = sub_1D13F2508();
  os_log_type_t v7 = sub_1D13F2858();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_1D0FA3000, v6, v7, "SportsServer: requestedSchedulesForTeams", v8, 2u);
    MEMORY[0x1D25F77B0](v8, -1, -1);
  }
  uint64_t v9 = v0[12];
  uint64_t v10 = v0[7];
  uint64_t v11 = v0[8];

  id v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v0[16] = v12;
  v0[17] = (v11 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v12(v9, v10);
  uint64_t v13 = (void *)swift_task_alloc();
  v0[18] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_1D13C09B4;
  return sub_1D13BF5EC();
}

uint64_t sub_1D13C09B4(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 152) = v1;
  swift_task_dealloc();
  if (v1)
  {
    os_log_type_t v5 = sub_1D13C0C6C;
  }
  else
  {
    *(void *)(v4 + 160) = a1;
    os_log_type_t v5 = sub_1D13C0ADC;
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

uint64_t sub_1D13C0ADC()
{
  uint64_t v11 = v0;
  uint64_t v1 = *(void **)(v0 + 160);
  id v2 = objc_msgSend(v1, sel_teams);
  sub_1D1384DE0(0, (unint64_t *)&unk_1EBD23830);
  unint64_t v3 = sub_1D13F2748();

  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = sub_1D13F2B88();
    uint64_t v4 = result;
    if (!result) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v4) {
      goto LABEL_10;
    }
  }
  if (v4 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v6 = 0;
  do
  {
    if ((v3 & 0xC000000000000001) != 0) {
      id v7 = (id)MEMORY[0x1D25F54B0](v6, v3);
    }
    else {
      id v7 = *(id *)(v3 + 8 * v6 + 32);
    }
    uint64_t v8 = v7;
    ++v6;
    uint64_t v10 = v7;
    sub_1D13BA22C(&v10);
  }
  while (v4 != v6);
LABEL_10:
  swift_bridgeObjectRelease_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void *))(v0 + 8);
  return v9(v1);
}

uint64_t sub_1D13C0C6C()
{
  uint64_t v74 = v0;
  uint64_t v1 = *(void **)(v0 + 152);
  *(void *)(v0 + 16) = v1;
  id v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD23900);
  sub_1D1384DE0(0, &qword_1EBD238F8);
  if (swift_dynamicCast())
  {
    id v3 = *(id *)(v0 + 24);
    id v4 = objc_msgSend(v3, sel_domain);
    uint64_t v5 = sub_1D13F2688();
    uint64_t v7 = v6;

    if (v5 == sub_1D13F2688() && v7 == v8)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v10 = sub_1D13F2C58();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v10 & 1) == 0)
      {

        id v11 = objc_msgSend(v3, sel_domain);
        uint64_t v12 = sub_1D13F2688();
        uint64_t v14 = v13;

        if (v12 == sub_1D13F2688() && v14 == v15)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v17 = sub_1D13F2C58();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v17 & 1) == 0)
          {

            goto LABEL_13;
          }
        }
        uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 112);
        uint64_t v51 = *(void *)(v0 + 104);
        uint64_t v52 = *(void *)(v0 + 80);
        uint64_t v53 = *(void *)(v0 + 56);

        v50(v52, v51, v53);
        uint64_t v54 = v3;
        uint64_t v55 = sub_1D13F2508();
        os_log_type_t v56 = sub_1D13F2838();
        if (os_log_type_enabled(v55, v56))
        {
          uint64_t v57 = (uint8_t *)swift_slowAlloc();
          uint64_t v58 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v57 = 138412290;
          *(void *)(v0 + 40) = v54;
          uint64_t v59 = v54;
          sub_1D13F2978();
          *uint64_t v58 = v54;

          _os_log_impl(&dword_1D0FA3000, v55, v56, "Sports response error - WLK error: %@", v57, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23870);
          swift_arrayDestroy();
          MEMORY[0x1D25F77B0](v58, -1, -1);
          MEMORY[0x1D25F77B0](v57, -1, -1);
        }
        else
        {

          uint64_t v55 = v54;
        }
        uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
        uint64_t v61 = *(void *)(v0 + 80);
        uint64_t v62 = *(void *)(v0 + 56);

        v60(v61, v62);
        id v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F4B318]), sel_init);

LABEL_27:
        BOOL v37 = *(void **)(v0 + 16);
        goto LABEL_28;
      }
    }
    uint64_t v38 = *(void *)(v0 + 56);
    unint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 112);
    uint64_t v40 = *(void *)(v0 + 104);
    uint64_t v41 = *(void *)(v0 + 88);

    v39(v41, v40, v38);
    uint64_t v42 = v3;
    unint64_t v43 = sub_1D13F2508();
    os_log_type_t v44 = sub_1D13F2838();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      unint64_t v72 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v45 = 138412290;
      *(void *)(v0 + 4_Block_object_dispose(&STACK[0x210], 8) = v42;
      uint64_t v46 = v42;
      sub_1D13F2978();
      *unint64_t v72 = v42;

      _os_log_impl(&dword_1D0FA3000, v43, v44, "Sports response error - WLK favorite error: %@", v45, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23870);
      swift_arrayDestroy();
      MEMORY[0x1D25F77B0](v72, -1, -1);
      MEMORY[0x1D25F77B0](v45, -1, -1);
    }
    else
    {

      unint64_t v43 = v42;
    }
    unint64_t v47 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
    uint64_t v48 = *(void *)(v0 + 88);
    uint64_t v49 = *(void *)(v0 + 56);

    v47(v48, v49);
    id v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F4B318]), sel_init);

    goto LABEL_27;
  }
LABEL_13:
  uint64_t v18 = *(void **)(v0 + 152);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 112);
  uint64_t v20 = *(void *)(v0 + 104);
  uint64_t v21 = *(void *)(v0 + 72);
  uint64_t v22 = *(void *)(v0 + 56);

  v19(v21, v20, v22);
  id v23 = v18;
  id v24 = v18;
  id v25 = sub_1D13F2508();
  os_log_type_t v26 = sub_1D13F2848();
  BOOL v27 = os_log_type_enabled(v25, v26);
  uint64_t v28 = *(void **)(v0 + 152);
  if (v27)
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v71 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 138412290;
    id v30 = v28;
    uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v31;
    sub_1D13F2978();
    *uint64_t v71 = v31;

    _os_log_impl(&dword_1D0FA3000, v25, v26, "Sports response error - Unexpected error: %@", v29, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23870);
    swift_arrayDestroy();
    MEMORY[0x1D25F77B0](v71, -1, -1);
    MEMORY[0x1D25F77B0](v29, -1, -1);
  }
  else
  {
  }
  id v32 = *(void **)(v0 + 152);
  uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
  uint64_t v34 = *(void *)(v0 + 72);
  uint64_t v35 = *(void *)(v0 + 56);

  v33(v34, v35);
  id v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F4B318]), sel_init);
  BOOL v37 = v32;
LABEL_28:

  id v63 = objc_msgSend(v36, sel_teams);
  sub_1D1384DE0(0, (unint64_t *)&unk_1EBD23830);
  unint64_t v64 = sub_1D13F2748();

  if (v64 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = sub_1D13F2B88();
    uint64_t v65 = result;
    if (!result) {
      goto LABEL_37;
    }
  }
  else
  {
    uint64_t v65 = *(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v65) {
      goto LABEL_37;
    }
  }
  if (v65 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v67 = 0;
  do
  {
    if ((v64 & 0xC000000000000001) != 0) {
      id v68 = (id)MEMORY[0x1D25F54B0](v67, v64);
    }
    else {
      id v68 = *(id *)(v64 + 8 * v67 + 32);
    }
    uint64_t v69 = v68;
    ++v67;
    uint64_t v73 = v68;
    sub_1D13BA22C(&v73);
  }
  while (v65 != v67);
LABEL_37:
  swift_bridgeObjectRelease_n();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v70 = *(uint64_t (**)(id))(v0 + 8);
  return v70(v36);
}

uint64_t sub_1D13C1420(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1D13F2BC8();
  __break(1u);
  return result;
}

void sub_1D13C1514(uint64_t a1, uint64_t a2)
{
  uint64_t v88 = a2;
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD236C8);
  MEMORY[0x1F4188790](v78, v3);
  uint64_t v79 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5, v6);
  uint64_t v75 = (char *)&v67 - v7;
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23820);
  MEMORY[0x1F4188790](v76, v8);
  uint64_t v77 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v82 = (uint64_t)&v67 - v12;
  uint64_t v13 = sub_1D13F2158();
  uint64_t v80 = *(void *)(v13 - 8);
  uint64_t v81 = v13;
  MEMORY[0x1F4188790](v13, v14);
  uint64_t v87 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1D13F1FA8();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16, v18);
  uint64_t v20 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21, v22);
  id v24 = (char *)&v67 - v23;
  uint64_t v25 = sub_1D13F2538();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25, v27);
  uint64_t v29 = (char *)&v67 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_1D13834E4();
  uint64_t v85 = (char *)v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v29, v30, v25);
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  uint64_t v83 = a1;
  v31(v24, a1, v16);
  unint64_t v84 = v20;
  uint64_t v32 = v88;
  unint64_t v72 = v31;
  uint64_t v73 = v17 + 16;
  ((void (*)(char *))v31)(v20);
  uint64_t v33 = sub_1D13F2508();
  os_log_type_t v34 = sub_1D13F2858();
  int v35 = v34;
  BOOL v36 = os_log_type_enabled(v33, v34);
  uint64_t v74 = v17;
  if (v36)
  {
    uint64_t v37 = swift_slowAlloc();
    uint64_t v71 = swift_slowAlloc();
    uint64_t v90 = v71;
    *(_DWORD *)uint64_t v37 = 136315394;
    sub_1D13C28F4((unint64_t *)&qword_1EBD239C0);
    int v69 = v35;
    os_log_t v68 = v33;
    uint64_t v38 = sub_1D13F2C48();
    uint64_t v89 = sub_1D138B264(v38, v39, &v90);
    uint64_t v70 = v25;
    sub_1D13F2978();
    swift_bridgeObjectRelease();
    uint64_t v40 = *(void (**)(char *, uint64_t))(v17 + 8);
    v40(v24, v16);
    *(_WORD *)(v37 + 12) = 2080;
    uint64_t v67 = v29;
    uint64_t v41 = v84;
    uint64_t v42 = sub_1D13F2C48();
    uint64_t v89 = sub_1D138B264(v42, v43, &v90);
    sub_1D13F2978();
    swift_bridgeObjectRelease();
    v40(v41, v16);
    os_log_t v44 = v68;
    _os_log_impl(&dword_1D0FA3000, v68, (os_log_type_t)v69, "SportsServer: _scheduledGames %s, %s", (uint8_t *)v37, 0x16u);
    uint64_t v45 = v71;
    swift_arrayDestroy();
    MEMORY[0x1D25F77B0](v45, -1, -1);
    uint64_t v46 = v37;
    uint64_t v32 = v88;
    MEMORY[0x1D25F77B0](v46, -1, -1);

    (*((void (**)(char *, uint64_t))v85 + 1))(v67, v70);
  }
  else
  {
    uint64_t v40 = *(void (**)(char *, uint64_t))(v17 + 8);
    v40(v24, v16);
    v40(v84, v16);

    (*((void (**)(char *, uint64_t))v85 + 1))(v29, v25);
  }
  uint64_t v90 = MEMORY[0x1E4FBC860];
  sub_1D13F21A8();
  unint64_t v47 = (void *)sub_1D13F2188();
  uint64_t v48 = v86;
  sub_1D13F2168();

  if (!v48)
  {
    sub_1D13C28F4(&qword_1EBD236D8);
    if (sub_1D13F2638())
    {
      uint64_t v86 = v40;
      uint64_t v49 = v78;
      uint64_t v50 = *(int *)(v78 + 48);
      uint64_t v88 = 0;
      uint64_t v51 = v75;
      uint64_t v52 = &v75[v50];
      uint64_t v53 = v72;
      v72(v75, v83, v16);
      uint64_t v85 = v52;
      v53(v52, v32, v16);
      uint64_t v54 = v79;
      uint64_t v55 = &v79[*(int *)(v49 + 48)];
      v53(v79, (uint64_t)v51, v16);
      v53(v55, (uint64_t)v52, v16);
      uint64_t v56 = v74 + 32;
      uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v74 + 32);
      uint64_t v58 = (uint64_t)v77;
      v57(v77, v54, v16);
      unint64_t v84 = (char *)(v56 - 24);
      uint64_t v59 = v55;
      uint64_t v60 = v86;
      v86(v59, v16);
      uint64_t v61 = &v54[*(int *)(v49 + 48)];
      v57(v54, v51, v16);
      v57(v61, v85, v16);
      v57((char *)(v58 + *(int *)(v76 + 36)), v61, v16);
      uint64_t v62 = v87;
      v60(v54, v16);
      uint64_t v63 = v82;
      uint64_t v64 = sub_1D13C2938(v58, v82, (uint64_t *)&unk_1EBD23820);
      MEMORY[0x1F4188790](v64, v65);
      *(&v67 - 2) = (char *)v63;
      *(&v67 - 1) = (char *)&v90;
      uint64_t v66 = v88;
      sub_1D13F2148();
      if (v66)
      {
        (*(void (**)(char *, uint64_t))(v80 + 8))(v62, v81);
        sub_1D138E150(v82, (uint64_t *)&unk_1EBD23820);
        swift_bridgeObjectRelease();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v80 + 8))(v62, v81);
        sub_1D138E150(v82, (uint64_t *)&unk_1EBD23820);
      }
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_1D13C1D1C(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EBD239B0);
  MEMORY[0x1F4188790](v37, v5);
  uint64_t v39 = (uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7, v8);
  uint64_t v11 = (char *)&v35 - v10;
  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v44 = MEMORY[0x1E4FBC860];
  uint64_t v41 = *(void *)(a1 + 16);
  if (v41)
  {
    uint64_t v13 = 0;
    unint64_t v14 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v15 = *(void *)(v9 + 72);
    uint64_t v35 = v2;
    unint64_t v36 = v14;
    uint64_t v40 = a1 + v14;
    uint64_t v42 = v15;
    uint64_t v43 = a2 + 56;
    uint64_t v38 = MEMORY[0x1E4FBC860];
    uint64_t v16 = &qword_1EBD239B0;
    while (1)
    {
      uint64_t v17 = v16;
      sub_1D13C29CC(v40 + v42 * v13, (uint64_t)v11, v16);
      uint64_t v18 = a2;
      if (*(void *)(a2 + 16))
      {
        uint64_t v19 = &v11[*(int *)(v37 + 64)];
        uint64_t v21 = *(void *)v19;
        uint64_t v20 = *((void *)v19 + 1);
        sub_1D13F2CE8();
        sub_1D13F26E8();
        uint64_t v22 = sub_1D13F2D28();
        uint64_t v23 = -1 << *(unsigned char *)(a2 + 32);
        unint64_t v24 = v22 & ~v23;
        if ((*(void *)(v43 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24))
        {
          uint64_t v25 = *(void *)(v18 + 48);
          uint64_t v26 = (void *)(v25 + 16 * v24);
          BOOL v27 = *v26 == v21 && v26[1] == v20;
          if (v27 || (sub_1D13F2C58() & 1) != 0)
          {
LABEL_12:
            uint64_t v16 = v17;
            sub_1D13C2938((uint64_t)v11, v39, v17);
            uint64_t v28 = v38;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              sub_1D13BF0E4(0, *(void *)(v28 + 16) + 1, 1);
            }
            uint64_t v29 = v44;
            unint64_t v31 = *(void *)(v44 + 16);
            unint64_t v30 = *(void *)(v44 + 24);
            if (v31 >= v30 >> 1)
            {
              sub_1D13BF0E4(v30 > 1, v31 + 1, 1);
              uint64_t v29 = v44;
            }
            *(void *)(v29 + 16) = v31 + 1;
            uint64_t v38 = v29;
            sub_1D13C2938(v39, v29 + v36 + v31 * v42, v17);
            goto LABEL_4;
          }
          uint64_t v32 = ~v23;
          while (1)
          {
            unint64_t v24 = (v24 + 1) & v32;
            if (((*(void *)(v43 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) == 0) {
              break;
            }
            uint64_t v33 = (void *)(v25 + 16 * v24);
            BOOL v34 = *v33 == v21 && v33[1] == v20;
            if (v34 || (sub_1D13F2C58() & 1) != 0) {
              goto LABEL_12;
            }
          }
        }
      }
      uint64_t v16 = v17;
      sub_1D138E150((uint64_t)v11, v17);
LABEL_4:
      ++v13;
      a2 = v18;
      if (v13 == v41) {
        return v44;
      }
    }
  }
  return result;
}

uint64_t sub_1D13C2030(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1D13F2538();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x1F4188790](v9, v10);
  uint64_t v13 = (char *)&v38 - v12;
  if (objc_msgSend(a1, sel_valueForEntitlement_, *MEMORY[0x1E4F4B568], v11))
  {
    sub_1D13F29A8();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v50, 0, sizeof(v50));
  }
  sub_1D13C2938((uint64_t)v50, (uint64_t)&aBlock, &qword_1EBD23898);
  if (v46)
  {
    if swift_dynamicCast() && (v49)
    {
      uint64_t v14 = sub_1D13834E4();
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v13, v14, v4);
      uint64_t v15 = a1;
      uint64_t v16 = sub_1D13F2508();
      os_log_type_t v17 = sub_1D13F2858();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        uint64_t v40 = swift_slowAlloc();
        uint64_t v41 = v2;
        *(_DWORD *)uint64_t v18 = 138412290;
        uint64_t aBlock = v15;
        uint64_t v19 = v15;
        uint64_t v42 = v5;
        uint64_t v20 = v19;
        uint64_t v2 = v41;
        sub_1D13F2978();
        uint64_t v21 = v40;
        v40->isa = (Class)v15;

        uint64_t v5 = v42;
        _os_log_impl(&dword_1D0FA3000, v16, v17, "SportsServer: connection accepted %@", v18, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23870);
        swift_arrayDestroy();
        MEMORY[0x1D25F77B0](v21, -1, -1);
        MEMORY[0x1D25F77B0](v18, -1, -1);
      }
      else
      {

        uint64_t v16 = v15;
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
      unint64_t v47 = sub_1D13BB900;
      uint64_t v48 = 0;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v44 = 1107296256;
      uint64_t v45 = sub_1D13859D0;
      uint64_t v46 = &block_descriptor_7;
      uint64_t v35 = _Block_copy(&aBlock);
      [v15 setInterruptionHandler:v35];
      _Block_release(v35);
      unint64_t v47 = sub_1D13BB920;
      uint64_t v48 = 0;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v44 = 1107296256;
      uint64_t v45 = sub_1D13859D0;
      uint64_t v46 = &block_descriptor_30;
      unint64_t v36 = _Block_copy(&aBlock);
      [v15 setInvalidationHandler:v36];
      _Block_release(v36);
      id v37 = (id)ATXSportsInterface();
      [v15 setExportedInterface:v37];

      [v15 setExportedObject:v2];
      [v15 resume];
      return 1;
    }
  }
  else
  {
    sub_1D138E150((uint64_t)&aBlock, &qword_1EBD23898);
  }
  uint64_t v22 = sub_1D13834E4();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v22, v4);
  id v23 = a1;
  unint64_t v24 = sub_1D13F2508();
  os_log_type_t v25 = sub_1D13F2838();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v39 = v8;
    uint64_t v27 = v26;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v42 = v5;
    uint64_t v29 = (void *)v28;
    uint64_t v40 = swift_slowAlloc();
    uint64_t aBlock = v40;
    *(_DWORD *)uint64_t v27 = 138412546;
    uint64_t v41 = v4;
    *(void *)&v50[0] = v23;
    id v30 = v23;
    sub_1D13F2978();
    *uint64_t v29 = v23;

    *(_WORD *)(v27 + 12) = 2080;
    uint64_t v31 = sub_1D13F2688();
    *(void *)&v50[0] = sub_1D138B264(v31, v32, (uint64_t *)&aBlock);
    sub_1D13F2978();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D0FA3000, v24, v25, "SportsServer: connection rejected %@ without entitlement %s", (uint8_t *)v27, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1EBD23870);
    swift_arrayDestroy();
    MEMORY[0x1D25F77B0](v29, -1, -1);
    uint64_t v33 = v40;
    swift_arrayDestroy();
    MEMORY[0x1D25F77B0](v33, -1, -1);
    MEMORY[0x1D25F77B0](v27, -1, -1);

    (*(void (**)(char *, uint64_t))(v42 + 8))(v39, v41);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return 0;
}

uint64_t method lookup function for SportsServer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SportsServer);
}

uint64_t dispatch thunk of SportsServer.requestedSchedulesForTeams()()
{
  uint64_t v2 = *(int **)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70);
  uint64_t v5 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_1D13B998C;
  return v5();
}

uint64_t dispatch thunk of SportsServer.listener(_:shouldAcceptNewConnection:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t sub_1D13C27B0()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D13C27F0()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_1D138DF50;
  uint64_t v4 = (uint64_t (*)(const void *))((char *)&dword_1EA64E328 + dword_1EA64E328);
  return v4(v2);
}

uint64_t sub_1D13C28A4()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t sub_1D13C28F4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1D13F1FA8();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D13C2938(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1D13C299C(uint64_t a1, uint64_t a2)
{
  sub_1D13BBC84(a1, a2, *(void (***)(uint64_t, char *, uint64_t))(v2 + 16), *(unint64_t **)(v2 + 24));
  return 1;
}

uint64_t sub_1D13C29CC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1D13C2A30()
{
  unint64_t result = qword_1EA64E3A0;
  if (!qword_1EA64E3A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA64E3A0);
  }
  return result;
}

unint64_t sub_1D13C2A84()
{
  unint64_t result = qword_1EA64E3A8;
  if (!qword_1EA64E3A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA64E3A8);
  }
  return result;
}

unint64_t sub_1D13C2AD8()
{
  unint64_t result = qword_1EA64DCC0;
  if (!qword_1EA64DCC0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1EA64D9D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA64DCC0);
  }
  return result;
}

uint64_t sub_1D13C2B34(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_1EBD239B0) - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = sub_1D13F2BC8();
  __break(1u);
  return result;
}

uint64_t sub_1D13C2C98()
{
  uint64_t v0 = sub_1D13F2538();
  __swift_allocate_value_buffer(v0, qword_1EA64FFE8);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EA64FFE8);
  return sub_1D13F2518();
}

void static NotificationCategorizationLogger.info(_:function:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
}

void static NotificationCategorizationLogger.debug(_:function:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
}

void static NotificationCategorizationLogger.log(_:function:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
}

void static NotificationCategorizationLogger.error(_:function:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
}

void static NotificationCategorizationLogger.fault(_:function:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
}

void sub_1D13C2D90(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(void))
{
  if (qword_1EA64FFE0 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_1D13F2538();
  __swift_project_value_buffer(v10, (uint64_t)qword_1EA64FFE8);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unint64_t v11 = sub_1D13F2508();
  os_log_type_t v12 = a5();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v15 = v14;
    *(_DWORD *)uint64_t v13 = 136315394;
    swift_bridgeObjectRetain();
    sub_1D138B264(a3, a4, &v15);
    sub_1D13F2978();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_1D138B264(a1, a2, &v15);
    sub_1D13F2978();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1D0FA3000, v11, v12, "%s: %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1D25F77B0](v14, -1, -1);
    MEMORY[0x1D25F77B0](v13, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

ValueMetadata *type metadata accessor for NotificationCategorizationLogger()
{
  return &type metadata for NotificationCategorizationLogger;
}

uint64_t sub_1D13C2FBC()
{
  uint64_t v0 = sub_1D13F2538();
  __swift_allocate_value_buffer(v0, qword_1EBD24910);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EBD24910);
  return sub_1D13F2518();
}

uint64_t sub_1D13C3040()
{
  if (qword_1EBD24310 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_1D13F2538();
  return __swift_project_value_buffer(v0, (uint64_t)qword_1EBD24910);
}

uint64_t sub_1D13C30A4@<X0>(uint64_t a1@<X8>)
{
  if (qword_1EBD24310 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D13F2538();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1EBD24910);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

void ATXSleepSuggestedHomePageWasCreatedDuringMigration_cold_1(os_log_t log)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  int v1 = 136315138;
  uint64_t v2 = "NSNumber * _Nullable ATXSleepSuggestedHomePageWasCreatedDuringMigration(void)";
  _os_log_error_impl(&dword_1D0FA3000, log, OS_LOG_TYPE_ERROR, "%s: Unable to read sleep settings because couldn't soft link HKSPSleepStore.", (uint8_t *)&v1, 0xCu);
}

void ATXSleepSuggestedHomePageWasCreatedDuringMigration_cold_2(uint64_t a1, NSObject *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v2 = 136315394;
  uint64_t v3 = "NSNumber * _Nullable ATXSleepSuggestedHomePageWasCreatedDuringMigration(void)";
  __int16 v4 = 2112;
  uint64_t v5 = a1;
  _os_log_error_impl(&dword_1D0FA3000, a2, OS_LOG_TYPE_ERROR, "%s: Failed to fetch sleep settings with error: %@", (uint8_t *)&v2, 0x16u);
}

void __getHKSPSleepStoreClass_block_invoke_cold_1(void *a1)
{
  int v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *SleepLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ATXSleepSuggestedHomePageWasCreatedDuringMigration.m", 16, @"%s", *a1);

  __break(1u);
}

void __getHKSPSleepStoreClass_block_invoke_cold_2()
{
  uint64_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  int v1 = [NSString stringWithUTF8String:"Class getHKSPSleepStoreClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"ATXSleepSuggestedHomePageWasCreatedDuringMigration.m", 17, @"Unable to find class %s", "HKSPSleepStore");

  __break(1u);
}

void engagementTypeForPrediction(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412290;
  *(void *)(buf + 4) = a1;
  _os_log_error_impl(&dword_1D0FA3000, log, OS_LOG_TYPE_ERROR, "%@ is not a valid engagment type to call engagementTypeForPrediction with engaged==YES", buf, 0xCu);
}

void ATXSmoothedProbability_cold_1()
{
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_5(&dword_1D0FA3000, v0, v1, "ATXSmoothedProbability called with invalid arguments. numerator: %f denominator: %f", v2, v3, v4, v5, v6);
}

void ATXSmoothedProbability_cold_2()
{
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_5(&dword_1D0FA3000, v0, v1, "Invalid probability found. numerator: %f denominator: %f", v2, v3, v4, v5, v6);
}

void ATXProbability_cold_1()
{
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_5(&dword_1D0FA3000, v0, v1, "ATXProbability called with invalid arguments. numerator: %f denominator: %f", v2, v3, v4, v5, v6);
}

void shouldReturnUndefined_cold_1()
{
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2(&dword_1D0FA3000, v0, v1, "App prediction interpreter stack underflow", v2, v3, v4, v5, v6);
}

void push_cold_1()
{
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2(&dword_1D0FA3000, v0, v1, "App prediction interpreter stack overflow", v2, v3, v4, v5, v6);
}

void linkChangedCallback_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl(&dword_1D0FA3000, a2, OS_LOG_TYPE_DEBUG, "WiFi link status change: %@", (uint8_t *)&v2, 0xCu);
}

void __linkChangedCallback_block_invoke_cold_1(uint64_t *a1, unsigned char *a2, os_log_t log)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  BOOL v4 = *a2 == 0;
  int v5 = 138412546;
  uint64_t v6 = v3;
  __int16 v7 = 1024;
  BOOL v8 = v4;
  _os_log_debug_impl(&dword_1D0FA3000, log, OS_LOG_TYPE_DEBUG, "SSID changed to '%@', link active: %i", (uint8_t *)&v5, 0x12u);
}

void __getAirplaneMode_block_invoke_2_cold_1(os_log_t log)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v1 = atomic_load(getAirplaneMode_inAirplaneMode);
  v2[0] = 67109120;
  v2[1] = v1 & 1;
  _os_log_debug_impl(&dword_1D0FA3000, log, OS_LOG_TYPE_DEBUG, "Airplane mode change detected. New status: %{BOOL}d", (uint8_t *)v2, 8u);
}

void ATXUpdatePredictions_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = +[ATXUpdatePredictionsReasons stringForUpdatePredictionsReason:a1];
  int v4 = 138412290;
  int v5 = v3;
  _os_log_error_impl(&dword_1D0FA3000, a2, OS_LOG_TYPE_ERROR, "ATXUpdatePredictions: Can not refresh predictions when class C locked! Reason: %@", (uint8_t *)&v4, 0xCu);
}

void __ATXUpdatePredictions_block_invoke_cold_1(os_log_t log)
{
  *(_WORD *)unsigned __int8 v1 = 0;
  _os_log_error_impl(&dword_1D0FA3000, log, OS_LOG_TYPE_ERROR, "successfully regenerated gallery after process restart due to language change", v1, 2u);
}

void __ATXUpdatePredictions_block_invoke_cold_2(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_1D0FA3000, a2, OS_LOG_TYPE_ERROR, "error regenerating gallery after process restart due to language change: %@", (uint8_t *)&v2, 0xCu);
}

void readWholeFile_cold_1()
{
  __error();
  OUTLINED_FUNCTION_0_9(&dword_1D0FA3000, v0, v1, "Could not read; errno=%i", v2, v3, v4, v5, 0);
}

void readWholeFile_cold_2(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v3 = 134218240;
  uint64_t v4 = a1;
  __int16 v5 = 2048;
  uint64_t v6 = a2;
  _os_log_error_impl(&dword_1D0FA3000, log, OS_LOG_TYPE_ERROR, "Wrong length; expected %lu, got %lu",
    (uint8_t *)&v3,
    0x16u);
}

void readWholeFile_cold_3()
{
  __error();
  OUTLINED_FUNCTION_0_9(&dword_1D0FA3000, v0, v1, "Could not stat fd, errno=%i", v2, v3, v4, v5, 0);
}

void _ATXCopySqliteDatabaseClassC_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_1D0FA3000, v0, v1, "Could not open DB for replacing: %@", v2, v3, v4, v5, v6);
}

void _ATXCopySqliteDatabaseClassC_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_1D0FA3000, v0, v1, "Could not open DB for reading: %@", v2, v3, v4, v5, v6);
}

void _ATXCopySqliteDatabaseDataClassC_cold_1(void *a1)
{
  uint64_t v1 = [a1 allKeys];
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_2(&dword_1D0FA3000, v2, v3, "Could not find .db file in %@", v4, v5, v6, v7, v8);
}

void _ATXCopySqliteDatabaseDataClassC_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_1D0FA3000, v0, v1, "Could not write to %@", v2, v3, v4, v5, v6);
}

void _ATXCopySqliteDatabaseDataClassC_cold_3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_1D0FA3000, v0, v1, "Error creating temporary directory: %@", v2, v3, v4, v5, v6);
}

void _ATXExtractFilesFromDECBackupArchiveIfExists_cold_1()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_1();
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  _os_log_error_impl(&dword_1D0FA3000, v1, OS_LOG_TYPE_ERROR, "Error opening %@: %@", v2, 0x16u);
}

void _ATXExtractFilesFromDECBackupArchiveIfExists_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_1D0FA3000, v0, v1, "Backup file truncated: %@", v2, v3, v4, v5, v6);
}

void _ATXExtractFilesFromDECBackupArchiveIfExists_cold_3()
{
  OUTLINED_FUNCTION_3();
  _os_log_error_impl(&dword_1D0FA3000, v0, OS_LOG_TYPE_ERROR, "Could not decompress backup buffer", v1, 2u);
}

void _ATXExtractFilesFromDECBackupArchiveIfExists_cold_4()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_1D0FA3000, v0, v1, "Error parsing app predictor backup: %@", v2, v3, v4, v5, v6);
}

void ATXEnableMobileAssetDataVault_cold_1()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_1();
  _os_log_fault_impl(&dword_1D0FA3000, v0, OS_LOG_TYPE_FAULT, "Failed to initialize datavault for DuetExpertCenterAsset: %@", v1, 0xCu);
}

void ATXEnableMobileAssetDataVault_cold_2()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_1D0FA3000, v0, v1, "Retrying after failure to initialize datavault for DuetExpertCenterAsset: %@", v2, v3, v4, v5, v6);
}

void __registerForRestoreStateNotifications_block_invoke_cold_1()
{
  dlerror();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_2(&dword_1D0FA3000, v0, v1, "Could not load symbol: %s", v2, v3, v4, v5, v6);
}

void __registerForWidgetOnboardingCTSJob_block_invoke_cold_1()
{
  OUTLINED_FUNCTION_3();
  _os_log_error_impl(&dword_1D0FA3000, v0, OS_LOG_TYPE_ERROR, "ATXOnboardingStackResultCacheManager: no widget cache file was generated, not updating result cache.", v1, 2u);
}

void __registerForFaceSuggestionsCTSJob_block_invoke_cold_1(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void __registerForFaceSuggestionsCTSJob_block_invoke_628_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v2 = 136315394;
  uint64_t v3 = "void registerForFaceSuggestionsCTSJob(void)_block_invoke";
  __int16 v4 = 2112;
  uint64_t v5 = a1;
  _os_log_error_impl(&dword_1D0FA3000, a2, OS_LOG_TYPE_ERROR, "%s: regenerating Lock Screen suggestions failed: %@", (uint8_t *)&v2, 0x16u);
}

void dateColumnNameForLaunchType_cold_1()
{
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2(&dword_1D0FA3000, v0, v1, "launchType must be a valid _ATXLaunchType.", v2, v3, v4, v5, v6);
}

void decodeSubGenresData_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0_0(&dword_1D0FA3000, v0, v1, "Error unarchiving subgenres: %@", v2, v3, v4, v5, v6);
}

void __getPRSServiceClass_block_invoke_cold_1(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *PosterBoardServicesLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ATXUserEducationSuggestionCustomizeFocusServer.m", 19, @"%s", *a1);

  __break(1u);
}

void __getPRSServiceClass_block_invoke_cold_2()
{
  os_log_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getPRSServiceClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"ATXUserEducationSuggestionCustomizeFocusServer.m", 20, @"Unable to find class %s", "PRSService");

  __break(1u);
}

void __getSGSuggestionsServiceClass_block_invoke_cold_1(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *CoreSuggestionsLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ATXActionFeedback.m", 29, @"%s", *a1);

  __break(1u);
}

void __getSGSuggestionsServiceClass_block_invoke_cold_2()
{
  os_log_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getSGSuggestionsServiceClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"ATXActionFeedback.m", 30, @"Unable to find class %s", "SGSuggestionsService");

  __break(1u);
}

void ATXUserEducationSuggestionStateToString_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v2 = 136315394;
  uint64_t v3 = "NSString * _Nonnull ATXUserEducationSuggestionStateToString(ATXUserEducationSuggestionState)";
  __int16 v4 = 2048;
  uint64_t v5 = a1;
  _os_log_fault_impl(&dword_1D0FA3000, a2, OS_LOG_TYPE_FAULT, "%s: Unknown state: %ld", (uint8_t *)&v2, 0x16u);
}

void atx_CMFBlockListIsItemBlocked_cold_1()
{
  os_log_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Boolean atx_CMFBlockListIsItemBlocked(CMFItemRef)"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"ATXActionPredictionsProcessor.m", 29, @"%s", dlerror());

  __break(1u);
}

void CommunicationsFilterLibrary_cold_1(void *a1)
{
  int v2 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v3 = [NSString stringWithUTF8String:"void *CommunicationsFilterLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ATXActionPredictionsProcessor.m", 26, @"%s", *a1);

  __break(1u);
}

void ATXSetInputAge_cold_1(void *a1, uint8_t *buf, os_log_t log, double a4)
{
  *(_DWORD *)buf = 138412546;
  *(void *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2048;
  *(double *)(buf + 14) = a4;
  _os_log_error_impl(&dword_1D0FA3000, log, OS_LOG_TYPE_ERROR, "Invalid age for %@: %f. last date cannot be in the future.", buf, 0x16u);
}

void runInstructionsAndPopResult_cold_1()
{
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_2(&dword_1D0FA3000, v0, v1, "App prediction interpreter stack overflow", v2, v3, v4, v5, v6);
}

void __atxRegisterCTSJobHandlerForNonClassCLocked_block_invoke_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = 136315138;
  uint64_t v4 = v2;
  _os_log_fault_impl(&dword_1D0FA3000, a2, OS_LOG_TYPE_FAULT, "Unexpected run of CTS job %s when device is class-C locked", (uint8_t *)&v3, 0xCu);
}

void __getPRSServiceClass_block_invoke_cold_1_0(void *a1)
{
  uint64_t v2 = [MEMORY[0x1E4F28B00] currentHandler];
  int v3 = [NSString stringWithUTF8String:"void *PosterBoardServicesLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"ATXFaceSuggestionServer.m", 39, @"%s", *a1);

  __break(1u);
}

void __getPRSServiceClass_block_invoke_cold_2_0()
{
  os_log_t v0 = [MEMORY[0x1E4F28B00] currentHandler];
  uint64_t v1 = [NSString stringWithUTF8String:"Class getPRSServiceClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"ATXFaceSuggestionServer.m", 40, @"Unable to find class %s", "PRSService");

  __break(1u);
}

void DNDModeSemanticTypeToSuggestedFaceType_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_fault_impl(&dword_1D0FA3000, a2, OS_LOG_TYPE_FAULT, "ATXModeFaceSuggestionGenerator: unhandled DNDModeSemanticType %ld", (uint8_t *)&v2, 0xCu);
}

void flushHistogram_cold_1(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_1D0FA3000, log, OS_LOG_TYPE_ERROR, "Flush called on histogram which isn't backed by persistent store", v1, 2u);
}

uint64_t sub_1D13F1DD8()
{
  return MEMORY[0x1F40E3368]();
}

uint64_t sub_1D13F1DE8()
{
  return MEMORY[0x1F40E3420]();
}

uint64_t sub_1D13F1DF8()
{
  return MEMORY[0x1F40E34E8]();
}

uint64_t sub_1D13F1E08()
{
  return MEMORY[0x1F40E3508]();
}

uint64_t sub_1D13F1E18()
{
  return MEMORY[0x1F40E3530]();
}

uint64_t sub_1D13F1E28()
{
  return MEMORY[0x1F40E3550]();
}

uint64_t sub_1D13F1E38()
{
  return MEMORY[0x1F40E35A8]();
}

uint64_t sub_1D13F1E48()
{
  return MEMORY[0x1F40E3A90]();
}

uint64_t sub_1D13F1E58()
{
  return MEMORY[0x1F40E3A98]();
}

uint64_t sub_1D13F1E68()
{
  return MEMORY[0x1F40E3AB0]();
}

uint64_t sub_1D13F1E78()
{
  return MEMORY[0x1F40E3AC0]();
}

uint64_t sub_1D13F1E88()
{
  return MEMORY[0x1F40E4540]();
}

uint64_t sub_1D13F1E98()
{
  return MEMORY[0x1F40E4550]();
}

uint64_t sub_1D13F1EA8()
{
  return MEMORY[0x1F40E4588]();
}

uint64_t sub_1D13F1EB8()
{
  return MEMORY[0x1F40E45B8]();
}

uint64_t sub_1D13F1EC8()
{
  return MEMORY[0x1F40E45C8]();
}

uint64_t sub_1D13F1ED8()
{
  return MEMORY[0x1F40E49A0]();
}

uint64_t sub_1D13F1EE8()
{
  return MEMORY[0x1F40E4A70]();
}

uint64_t sub_1D13F1EF8()
{
  return MEMORY[0x1F40E4B80]();
}

uint64_t sub_1D13F1F08()
{
  return MEMORY[0x1F40E4D48]();
}

uint64_t sub_1D13F1F18()
{
  return MEMORY[0x1F40E4DA8]();
}

uint64_t sub_1D13F1F28()
{
  return MEMORY[0x1F40E4EE0]();
}

uint64_t sub_1D13F1F38()
{
  return MEMORY[0x1F40E5158]();
}

uint64_t sub_1D13F1F48()
{
  return MEMORY[0x1F40E5188]();
}

uint64_t sub_1D13F1F58()
{
  return MEMORY[0x1F40E51A8]();
}

uint64_t sub_1D13F1F78()
{
  return MEMORY[0x1F40E52E0]();
}

uint64_t sub_1D13F1F88()
{
  return MEMORY[0x1F40E52F0]();
}

uint64_t sub_1D13F1F98()
{
  return MEMORY[0x1F40E5378]();
}

uint64_t sub_1D13F1FA8()
{
  return MEMORY[0x1F40E5388]();
}

uint64_t sub_1D13F1FB8()
{
  return MEMORY[0x1F40E53B0]();
}

uint64_t sub_1D13F1FC8()
{
  return MEMORY[0x1F40E5438]();
}

uint64_t sub_1D13F1FD8()
{
  return MEMORY[0x1F40E5448]();
}

uint64_t sub_1D13F1FE8()
{
  return MEMORY[0x1F40E5728]();
}

uint64_t sub_1D13F1FF8()
{
  return MEMORY[0x1F40E5890]();
}

uint64_t sub_1D13F2008()
{
  return MEMORY[0x1F40E5A58]();
}

uint64_t sub_1D13F2018()
{
  return MEMORY[0x1F40E5AB8]();
}

uint64_t sub_1D13F2028()
{
  return MEMORY[0x1F40E5AF0]();
}

uint64_t sub_1D13F2038()
{
  return MEMORY[0x1F40E5B00]();
}

uint64_t sub_1D13F2048()
{
  return MEMORY[0x1F40E5B18]();
}

uint64_t sub_1D13F2058()
{
  return MEMORY[0x1F40D32E8]();
}

uint64_t sub_1D13F2068()
{
  return MEMORY[0x1F40D3340]();
}

uint64_t sub_1D13F2078()
{
  return MEMORY[0x1F40D36A0]();
}

uint64_t sub_1D13F2088()
{
  return MEMORY[0x1F40D36B0]();
}

uint64_t sub_1D13F2098()
{
  return MEMORY[0x1F40D36D0]();
}

uint64_t sub_1D13F20A8()
{
  return MEMORY[0x1F40D36D8]();
}

uint64_t sub_1D13F20B8()
{
  return MEMORY[0x1F40D3798]();
}

uint64_t sub_1D13F20C8()
{
  return MEMORY[0x1F40D37A0]();
}

uint64_t sub_1D13F20D8()
{
  return MEMORY[0x1F40D37F0]();
}

uint64_t sub_1D13F20E8()
{
  return MEMORY[0x1F40D3808]();
}

uint64_t sub_1D13F20F8()
{
  return MEMORY[0x1F40D3860]();
}

uint64_t sub_1D13F2108()
{
  return MEMORY[0x1F40D38A8]();
}

uint64_t sub_1D13F2118()
{
  return MEMORY[0x1F41113E8]();
}

uint64_t sub_1D13F2128()
{
  return MEMORY[0x1F4125398]();
}

uint64_t sub_1D13F2138()
{
  return MEMORY[0x1F41253A8]();
}

uint64_t sub_1D13F2148()
{
  return MEMORY[0x1F4125920]();
}

uint64_t sub_1D13F2158()
{
  return MEMORY[0x1F4125928]();
}

uint64_t sub_1D13F2168()
{
  return MEMORY[0x1F4125930]();
}

uint64_t sub_1D13F2178()
{
  return MEMORY[0x1F4125950]();
}

uint64_t sub_1D13F2188()
{
  return MEMORY[0x1F41259F8]();
}

uint64_t sub_1D13F2198()
{
  return MEMORY[0x1F4125A00]();
}

uint64_t sub_1D13F21A8()
{
  return MEMORY[0x1F4125A20]();
}

uint64_t sub_1D13F21B8()
{
  return MEMORY[0x1F41263F0]();
}

uint64_t sub_1D13F21C8()
{
  return MEMORY[0x1F4126430]();
}

uint64_t sub_1D13F21D8()
{
  return MEMORY[0x1F4126600]();
}

uint64_t sub_1D13F21E8()
{
  return MEMORY[0x1F4126608]();
}

uint64_t sub_1D13F21F8()
{
  return MEMORY[0x1F4126658]();
}

uint64_t sub_1D13F2208()
{
  return MEMORY[0x1F4126660]();
}

uint64_t sub_1D13F2218()
{
  return MEMORY[0x1F4126668]();
}

uint64_t sub_1D13F2228()
{
  return MEMORY[0x1F4126670]();
}

uint64_t sub_1D13F2238()
{
  return MEMORY[0x1F4126968]();
}

uint64_t sub_1D13F2248()
{
  return MEMORY[0x1F4126998]();
}

uint64_t sub_1D13F2258()
{
  return MEMORY[0x1F41269A0]();
}

uint64_t sub_1D13F2268()
{
  return MEMORY[0x1F41269A8]();
}

uint64_t sub_1D13F2278()
{
  return MEMORY[0x1F41269B0]();
}

uint64_t sub_1D13F2288()
{
  return MEMORY[0x1F41269B8]();
}

uint64_t sub_1D13F2298()
{
  return MEMORY[0x1F4126A30]();
}

uint64_t sub_1D13F22A8()
{
  return MEMORY[0x1F4126A38]();
}

uint64_t sub_1D13F22B8()
{
  return MEMORY[0x1F4112ED8]();
}

uint64_t sub_1D13F22C8()
{
  return MEMORY[0x1F4112EE0]();
}

uint64_t sub_1D13F22D8()
{
  return MEMORY[0x1F4112EE8]();
}

uint64_t sub_1D13F22E8()
{
  return MEMORY[0x1F4112EF0]();
}

uint64_t sub_1D13F22F8()
{
  return MEMORY[0x1F4112EF8]();
}

uint64_t sub_1D13F2308()
{
  return MEMORY[0x1F4112F00]();
}

uint64_t sub_1D13F2318()
{
  return MEMORY[0x1F4112F08]();
}

uint64_t sub_1D13F2328()
{
  return MEMORY[0x1F4112F10]();
}

uint64_t sub_1D13F2338()
{
  return MEMORY[0x1F4112F18]();
}

uint64_t sub_1D13F2348()
{
  return MEMORY[0x1F4112F20]();
}

uint64_t sub_1D13F2358()
{
  return MEMORY[0x1F4112F28]();
}

uint64_t sub_1D13F2368()
{
  return MEMORY[0x1F4112F30]();
}

uint64_t sub_1D13F2378()
{
  return MEMORY[0x1F4112F38]();
}

uint64_t sub_1D13F2388()
{
  return MEMORY[0x1F4112F40]();
}

uint64_t sub_1D13F2398()
{
  return MEMORY[0x1F4112F48]();
}

uint64_t sub_1D13F23A8()
{
  return MEMORY[0x1F4112F50]();
}

uint64_t sub_1D13F23B8()
{
  return MEMORY[0x1F4112F58]();
}

uint64_t sub_1D13F23D8()
{
  return MEMORY[0x1F4112F68]();
}

uint64_t sub_1D13F23E8()
{
  return MEMORY[0x1F4112F70]();
}

uint64_t sub_1D13F23F8()
{
  return MEMORY[0x1F4112F78]();
}

uint64_t sub_1D13F2408()
{
  return MEMORY[0x1F4112F80]();
}

uint64_t sub_1D13F2428()
{
  return MEMORY[0x1F4112F90]();
}

uint64_t sub_1D13F2438()
{
  return MEMORY[0x1F4112F98]();
}

uint64_t sub_1D13F2448()
{
  return MEMORY[0x1F4112FA0]();
}

uint64_t sub_1D13F2458()
{
  return MEMORY[0x1F4112FA8]();
}

uint64_t sub_1D13F2468()
{
  return MEMORY[0x1F4112FB0]();
}

uint64_t sub_1D13F2478()
{
  return MEMORY[0x1F4112FB8]();
}

uint64_t sub_1D13F2488()
{
  return MEMORY[0x1F4112FC0]();
}

uint64_t sub_1D13F2498()
{
  return MEMORY[0x1F4112FC8]();
}

uint64_t sub_1D13F24A8()
{
  return MEMORY[0x1F4112FD0]();
}

uint64_t sub_1D13F24B8()
{
  return MEMORY[0x1F4112FD8]();
}

uint64_t sub_1D13F24D8()
{
  return MEMORY[0x1F4146138]();
}

uint64_t sub_1D13F24E8()
{
  return MEMORY[0x1F4146140]();
}

uint64_t sub_1D13F24F8()
{
  return MEMORY[0x1F4112FE0]();
}

uint64_t sub_1D13F2508()
{
  return MEMORY[0x1F4188670]();
}

uint64_t sub_1D13F2518()
{
  return MEMORY[0x1F4188680]();
}

uint64_t sub_1D13F2528()
{
  return MEMORY[0x1F4188690]();
}

uint64_t sub_1D13F2538()
{
  return MEMORY[0x1F41886A0]();
}

uint64_t sub_1D13F2548()
{
  return MEMORY[0x1F41886B0]();
}

uint64_t sub_1D13F2558()
{
  return MEMORY[0x1F40D6C98]();
}

uint64_t sub_1D13F2568()
{
  return MEMORY[0x1F4186C60]();
}

uint64_t sub_1D13F2578()
{
  return MEMORY[0x1F4186CB0]();
}

uint64_t sub_1D13F2588()
{
  return MEMORY[0x1F4186CE0]();
}

uint64_t sub_1D13F2598()
{
  return MEMORY[0x1F4186CF8]();
}

uint64_t sub_1D13F25A8()
{
  return MEMORY[0x1F4186D60]();
}

uint64_t sub_1D13F25B8()
{
  return MEMORY[0x1F4186E28]();
}

uint64_t sub_1D13F25C8()
{
  return MEMORY[0x1F4186E60]();
}

uint64_t sub_1D13F25D8()
{
  return MEMORY[0x1F40E6000]();
}

uint64_t sub_1D13F25E8()
{
  return MEMORY[0x1F41835C0]();
}

uint64_t sub_1D13F25F8()
{
  return MEMORY[0x1F41835C8]();
}

uint64_t sub_1D13F2608()
{
  return MEMORY[0x1F4188420]();
}

uint64_t sub_1D13F2618()
{
  return MEMORY[0x1F4183730]();
}

uint64_t sub_1D13F2628()
{
  return MEMORY[0x1F4183740]();
}

uint64_t sub_1D13F2638()
{
  return MEMORY[0x1F4183750]();
}

uint64_t sub_1D13F2648()
{
  return MEMORY[0x1F4183838]();
}

uint64_t sub_1D13F2658()
{
  return MEMORY[0x1F40E60A8]();
}

uint64_t sub_1D13F2668()
{
  return MEMORY[0x1F40E6158]();
}

uint64_t sub_1D13F2678()
{
  return MEMORY[0x1F40E6190]();
}

uint64_t sub_1D13F2688()
{
  return MEMORY[0x1F40E61D8]();
}

uint64_t sub_1D13F2698()
{
  return MEMORY[0x1F40E62E0]();
}

uint64_t sub_1D13F26A8()
{
  return MEMORY[0x1F4183880]();
}

uint64_t sub_1D13F26B8()
{
  return MEMORY[0x1F41838B8]();
}

uint64_t sub_1D13F26C8()
{
  return MEMORY[0x1F4112FE8]();
}

uint64_t sub_1D13F26D8()
{
  return MEMORY[0x1F4112FF0]();
}

uint64_t sub_1D13F26E8()
{
  return MEMORY[0x1F41839B0]();
}

uint64_t sub_1D13F26F8()
{
  return MEMORY[0x1F4183A38]();
}

uint64_t sub_1D13F2708()
{
  return MEMORY[0x1F4183A80]();
}

uint64_t sub_1D13F2718()
{
  return MEMORY[0x1F4183B90]();
}

uint64_t sub_1D13F2728()
{
  return MEMORY[0x1F4183E80]();
}

uint64_t sub_1D13F2738()
{
  return MEMORY[0x1F40E6338]();
}

uint64_t sub_1D13F2748()
{
  return MEMORY[0x1F40E6370]();
}

uint64_t sub_1D13F2758()
{
  return MEMORY[0x1F4183E90]();
}

uint64_t sub_1D13F2768()
{
  return MEMORY[0x1F4183E98]();
}

uint64_t sub_1D13F2778()
{
  return MEMORY[0x1F4183EC8]();
}

uint64_t sub_1D13F2788()
{
  return MEMORY[0x1F4183F08]();
}

uint64_t sub_1D13F2798()
{
  return MEMORY[0x1F4183F38]();
}

uint64_t sub_1D13F27A8()
{
  return MEMORY[0x1F4183FA8]();
}

uint64_t sub_1D13F27B8()
{
  return MEMORY[0x1F4187BF0]();
}

uint64_t sub_1D13F27C8()
{
  return MEMORY[0x1F4187CF8]();
}

uint64_t sub_1D13F27D8()
{
  return MEMORY[0x1F4187D00]();
}

uint64_t sub_1D13F27E8()
{
  return MEMORY[0x1F40E63C8]();
}

uint64_t sub_1D13F27F8()
{
  return MEMORY[0x1F4184138]();
}

uint64_t sub_1D13F2808()
{
  return MEMORY[0x1F41841D0]();
}

uint64_t sub_1D13F2818()
{
  return MEMORY[0x1F40E6478]();
}

uint64_t sub_1D13F2828()
{
  return MEMORY[0x1F41886C0]();
}

uint64_t sub_1D13F2838()
{
  return MEMORY[0x1F41886E0]();
}

uint64_t sub_1D13F2848()
{
  return MEMORY[0x1F41886E8]();
}

uint64_t sub_1D13F2858()
{
  return MEMORY[0x1F4188700]();
}

uint64_t sub_1D13F2868()
{
  return MEMORY[0x1F40E66C8]();
}

uint64_t sub_1D13F2878()
{
  return MEMORY[0x1F4186FD8]();
}

uint64_t sub_1D13F2888()
{
  return MEMORY[0x1F41870A0]();
}

uint64_t sub_1D13F2898()
{
  return MEMORY[0x1F41870E0]();
}

uint64_t sub_1D13F28A8()
{
  return MEMORY[0x1F4187100]();
}

uint64_t sub_1D13F28B8()
{
  return MEMORY[0x1F4187110]();
}

uint64_t sub_1D13F28C8()
{
  return MEMORY[0x1F4187130]();
}

uint64_t sub_1D13F28D8()
{
  return MEMORY[0x1F4187168]();
}

uint64_t sub_1D13F28E8()
{
  return MEMORY[0x1F41871D0]();
}

uint64_t sub_1D13F28F8()
{
  return MEMORY[0x1F4187218]();
}

uint64_t sub_1D13F2908()
{
  return MEMORY[0x1F4187248]();
}

uint64_t sub_1D13F2918()
{
  return MEMORY[0x1F41872D0]();
}

uint64_t sub_1D13F2928()
{
  return MEMORY[0x1F41874A8]();
}

uint64_t sub_1D13F2938()
{
  return MEMORY[0x1F41874C0]();
}

uint64_t sub_1D13F2948()
{
  return MEMORY[0x1F41874D0]();
}

uint64_t sub_1D13F2958()
{
  return MEMORY[0x1F4188758]();
}

uint64_t sub_1D13F2968()
{
  return MEMORY[0x1F4184640]();
}

uint64_t sub_1D13F2978()
{
  return MEMORY[0x1F41847C0]();
}

uint64_t sub_1D13F2988()
{
  return MEMORY[0x1F4184820]();
}

uint64_t sub_1D13F2998()
{
  return MEMORY[0x1F40E6C68]();
}

uint64_t sub_1D13F29A8()
{
  return MEMORY[0x1F4184978]();
}

uint64_t sub_1D13F29B8()
{
  return MEMORY[0x1F4184B18]();
}

uint64_t sub_1D13F29C8()
{
  return MEMORY[0x1F4184B20]();
}

uint64_t sub_1D13F29D8()
{
  return MEMORY[0x1F4184B30]();
}

uint64_t sub_1D13F29E8()
{
  return MEMORY[0x1F4184B60]();
}

uint64_t sub_1D13F29F8()
{
  return MEMORY[0x1F4184B90]();
}

uint64_t sub_1D13F2A08()
{
  return MEMORY[0x1F4184BA8]();
}

uint64_t sub_1D13F2A18()
{
  return MEMORY[0x1F4184BC0]();
}

uint64_t sub_1D13F2A28()
{
  return MEMORY[0x1F4184BC8]();
}

uint64_t sub_1D13F2A38()
{
  return MEMORY[0x1F4184C90]();
}

uint64_t sub_1D13F2A48()
{
  return MEMORY[0x1F4184C98]();
}

uint64_t sub_1D13F2A58()
{
  return MEMORY[0x1F4184CA0]();
}

uint64_t sub_1D13F2A68()
{
  return MEMORY[0x1F4184CA8]();
}

uint64_t sub_1D13F2A78()
{
  return MEMORY[0x1F4184CE8]();
}

uint64_t sub_1D13F2A88()
{
  return MEMORY[0x1F4184CF0]();
}

uint64_t sub_1D13F2A98()
{
  return MEMORY[0x1F4184D08]();
}

uint64_t sub_1D13F2AA8()
{
  return MEMORY[0x1F4184D80]();
}

uint64_t sub_1D13F2AB8()
{
  return MEMORY[0x1F4184D88]();
}

uint64_t sub_1D13F2AC8()
{
  return MEMORY[0x1F4184E68]();
}

uint64_t sub_1D13F2AD8()
{
  return MEMORY[0x1F4184EA8]();
}

uint64_t sub_1D13F2AE8()
{
  return MEMORY[0x1F4184EC8]();
}

uint64_t sub_1D13F2AF8()
{
  return MEMORY[0x1F4184ED8]();
}

uint64_t sub_1D13F2B08()
{
  return MEMORY[0x1F4184EF0]();
}

uint64_t sub_1D13F2B18()
{
  return MEMORY[0x1F4184F28]();
}

uint64_t sub_1D13F2B28()
{
  return MEMORY[0x1F4184F30]();
}

uint64_t sub_1D13F2B38()
{
  return MEMORY[0x1F4185048]();
}

uint64_t sub_1D13F2B48()
{
  return MEMORY[0x1F4185050]();
}

uint64_t sub_1D13F2B58()
{
  return MEMORY[0x1F4185298]();
}

uint64_t sub_1D13F2B68()
{
  return MEMORY[0x1F41852A0]();
}

uint64_t sub_1D13F2B78()
{
  return MEMORY[0x1F41852B0]();
}

uint64_t sub_1D13F2B88()
{
  return MEMORY[0x1F4185350]();
}

uint64_t sub_1D13F2B98()
{
  return MEMORY[0x1F4185368]();
}

uint64_t sub_1D13F2BA8()
{
  return MEMORY[0x1F4185370]();
}

uint64_t sub_1D13F2BB8()
{
  return MEMORY[0x1F4185380]();
}

uint64_t sub_1D13F2BC8()
{
  return MEMORY[0x1F4185398]();
}

uint64_t sub_1D13F2BD8()
{
  return MEMORY[0x1F41854F8]();
}

uint64_t sub_1D13F2BE8()
{
  return MEMORY[0x1F4185568]();
}

uint64_t sub_1D13F2BF8()
{
  return MEMORY[0x1F4185598]();
}

uint64_t sub_1D13F2C08()
{
  return MEMORY[0x1F4185628]();
}

uint64_t sub_1D13F2C18()
{
  return MEMORY[0x1F4185690]();
}

uint64_t sub_1D13F2C28()
{
  return MEMORY[0x1F41856C0]();
}

uint64_t sub_1D13F2C38()
{
  return MEMORY[0x1F4185740]();
}

uint64_t sub_1D13F2C48()
{
  return MEMORY[0x1F4185758]();
}

uint64_t sub_1D13F2C58()
{
  return MEMORY[0x1F4185A40]();
}

uint64_t sub_1D13F2C68()
{
  return MEMORY[0x1F4185B90]();
}

uint64_t sub_1D13F2C78()
{
  return MEMORY[0x1F4185DD8]();
}

uint64_t sub_1D13F2C88()
{
  return MEMORY[0x1F4185DE0]();
}

uint64_t sub_1D13F2C98()
{
  return MEMORY[0x1F40E6E30]();
}

uint64_t sub_1D13F2CA8()
{
  return MEMORY[0x1F4185E00]();
}

uint64_t sub_1D13F2CB8()
{
  return MEMORY[0x1F4185E08]();
}

uint64_t sub_1D13F2CC8()
{
  return MEMORY[0x1F4185E10]();
}

uint64_t sub_1D13F2CD8()
{
  return MEMORY[0x1F4185E18]();
}

uint64_t sub_1D13F2CE8()
{
  return MEMORY[0x1F4185EB0]();
}

uint64_t sub_1D13F2CF8()
{
  return MEMORY[0x1F4185EC8]();
}

uint64_t sub_1D13F2D08()
{
  return MEMORY[0x1F4185ED0]();
}

uint64_t sub_1D13F2D18()
{
  return MEMORY[0x1F4185EF0]();
}

uint64_t sub_1D13F2D28()
{
  return MEMORY[0x1F4185EF8]();
}

uint64_t sub_1D13F2D38()
{
  return MEMORY[0x1F4185F00]();
}

uint64_t sub_1D13F2D48()
{
  return MEMORY[0x1F4185FC8]();
}

uint64_t sub_1D13F2D58()
{
  return MEMORY[0x1F4185FF0]();
}

uint64_t sub_1D13F2D88()
{
  return MEMORY[0x1F4186318]();
}

uint64_t ASEnsureDataVault()
{
  return MEMORY[0x1F412F558]();
}

uint64_t ATXActionPredictionInterface()
{
  return MEMORY[0x1F4108D98]();
}

uint64_t ATXActivityTypeFromMode()
{
  return MEMORY[0x1F4108DA0]();
}

uint64_t ATXActivityTypeToBMUserFocusInferredModeType()
{
  return MEMORY[0x1F4145F20]();
}

uint64_t ATXActivityTypeToDNDModeSemanticType()
{
  return MEMORY[0x1F4108DA8]();
}