uint64_t EncodeDYMTLRenderPipelineFunctionsDescriptor(void *a1, void *a2, unint64_t a3, uint64_t a4)
{
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *entry;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (a3 > 7)
  {
    *a2 = 81;
    v8 = a1 + 9;
    v9 = a1[9];
    if (a3 < 0x10) {
      goto LABEL_6;
    }
    a2[1] = v9;
  }
  else
  {
    v8 = a1 + 9;
  }
  v9 = *v8;
LABEL_6:
  if (v9)
  {
    v10 = 0;
    v11 = 2;
    do
    {
      v42 = *(void *)(a1[8] + v10);
      v12 = *find_entry(a4, &v42, 8uLL, 0);
      if (v12) {
        v12 = *(void *)(v12 + 32);
      }
      if (v10 + 24 <= a3) {
        a2[v10 / 8 + 2] = *(void *)(v12 + 8);
      }
      v10 += 8;
      v13 = v11++ - 1;
    }
    while (*v8 > v13);
    v14 = v10 + 16;
  }
  else
  {
    v14 = 16;
  }
  v15 = a1[1];
  v16 = v14 + 8;
  if (v14 + 8 <= a3)
  {
    *(void *)((char *)a2 + v14) = v15;
    v15 = a1[1];
  }
  if (v15)
  {
    v17 = 0;
    do
    {
      v41 = *(void *)(*a1 + 8 * v17);
      entry = find_entry(a4, &v41, 8uLL, 0);
      if (*entry) {
        v19 = *(void *)(*entry + 32);
      }
      else {
        v19 = 0;
      }
      v20 = v16 + 8;
      if (v16 + 8 <= a3) {
        *(void *)((char *)a2 + v16) = *(void *)(v19 + 8);
      }
      ++v17;
      v16 += 8;
    }
    while (a1[1] > v17);
  }
  else
  {
    v20 = v14 + 8;
  }
  v21 = a1[7];
  v22 = v20 + 8;
  if (v20 + 8 <= a3)
  {
    *(void *)((char *)a2 + v20) = v21;
    v21 = a1[7];
  }
  if (v21)
  {
    v23 = 0;
    do
    {
      v40 = *(void *)(a1[6] + 8 * v23);
      v24 = find_entry(a4, &v40, 8uLL, 0);
      if (*v24) {
        v25 = *(void *)(*v24 + 32);
      }
      else {
        v25 = 0;
      }
      v26 = v22 + 8;
      if (v22 + 8 <= a3) {
        *(void *)((char *)a2 + v22) = *(void *)(v25 + 8);
      }
      ++v23;
      v22 += 8;
    }
    while (a1[7] > v23);
  }
  else
  {
    v26 = v20 + 8;
  }
  v27 = a1[3];
  v28 = v26 + 8;
  if (v26 + 8 <= a3)
  {
    *(void *)((char *)a2 + v26) = v27;
    v27 = a1[3];
  }
  if (v27)
  {
    v29 = 0;
    do
    {
      v39 = *(void *)(a1[2] + 8 * v29);
      v30 = find_entry(a4, &v39, 8uLL, 0);
      if (*v30) {
        v31 = *(void *)(*v30 + 32);
      }
      else {
        v31 = 0;
      }
      v32 = v28 + 8;
      if (v28 + 8 <= a3) {
        *(void *)((char *)a2 + v28) = *(void *)(v31 + 8);
      }
      ++v29;
      v28 += 8;
    }
    while (a1[3] > v29);
  }
  else
  {
    v32 = v26 + 8;
  }
  v33 = a1[5];
  v34 = v32 + 8;
  if (v32 + 8 <= a3)
  {
    *(void *)((char *)a2 + v32) = v33;
    v33 = a1[5];
  }
  if (!v33) {
    return v32 + 8;
  }
  v35 = 0;
  do
  {
    v38 = *(void *)(a1[4] + 8 * v35);
    v36 = *find_entry(a4, &v38, 8uLL, 0);
    if (v36) {
      v36 = *(void *)(v36 + 32);
    }
    result = v34 + 8;
    if (v34 + 8 <= a3) {
      *(void *)((char *)a2 + v34) = *(void *)(v36 + 8);
    }
    ++v35;
    v34 += 8;
  }
  while (a1[5] > v35);
  return result;
}

void *DecodeDYMTLAccelerationStructureAllocationDescriptor(void *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a3 + 16);
  *(void *)(a3 + 16) = v4 + 16;
  if (a4)
  {
    *(unsigned char *)(v4 + 9) = result[1];
    *(unsigned char *)(v4 + 8) = result[2];
    *(void *)uint64_t v4 = result[3];
  }
  return result;
}

uint64_t EncodeDYMTLAccelerationStructureAllocationDescriptor(uint64_t a1, void *a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *a2 = 81;
    if (a3 >= 0x10)
    {
      a2[1] = *(unsigned __int8 *)(a1 + 9);
      if (a3 >= 0x18)
      {
        a2[2] = *(unsigned __int8 *)(a1 + 8);
        if (a3 >= 0x20) {
          a2[3] = *(void *)a1;
        }
      }
    }
  }
  return 32;
}

size_t DecodeDYMTLIntersectionFunctionDescriptor(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  v7 = (const char *)(a1 + 16);
  char v8 = *(unsigned char *)(a1 + 8);
  v9 = (const char *)((strlen((const char *)(a1 + 16)) & 0xFFFFFFFFFFFFFFF8) + a1 + 16 + 8);
  if (*(unsigned char *)(a1 + 16))
  {
    size_t v10 = strlen(v7);
    v13 = a3 + 52;
    uint64_t v14 = a3[52];
    size_t v11 = v10 + 1;
    if (v10 != -1)
    {
      v12 = (void *)a3[52];
      goto LABEL_6;
    }
  }
  else
  {
    v7 = 0;
    v13 = a3 + 52;
    uint64_t v14 = a3[52];
  }
  size_t v11 = 0;
  v12 = 0;
LABEL_6:
  void *v13 = v14 + v11;
  if (a4) {
    memcpy(v12, v7, v11);
  }
  size_t result = strlen(v9);
  v16 = (uint64_t *)&v9[(result & 0xFFFFFFFFFFFFFFF8) + 8];
  int v17 = *(unsigned __int8 *)v9;
  if (!*v9) {
    v9 = 0;
  }
  if (v17)
  {
    size_t result = strlen(v9);
    v18 = a3 + 52;
    uint64_t v19 = a3[52];
    size_t v20 = result + 1;
    if (result != -1)
    {
      v21 = (void *)a3[52];
      goto LABEL_15;
    }
  }
  else
  {
    v18 = a3 + 52;
    uint64_t v19 = a3[52];
  }
  size_t v20 = 0;
  v21 = 0;
LABEL_15:
  void *v18 = v19 + v20;
  if (a4) {
    size_t result = (size_t)memcpy(v21, v9, v20);
  }
  if (*v16)
  {
    uint64_t v22 = a3[15];
    size_t result = DecodeDYMTLFunctionConstantValues((size_t)(v16 + 1), *v16, a3, a4);
  }
  else
  {
    uint64_t v22 = 0;
  }
  uint64_t v23 = a3[1];
  a3[1] = v23 + 48;
  if (a4)
  {
    *(void *)uint64_t v23 = v22;
    *(void *)(v23 + 8) = v12;
    *(void *)(v23 + 16) = 0;
    *(void *)(v23 + 24) = 0;
    *(void *)(v23 + 32) = v21;
    *(unsigned char *)(v23 + 40) = v8;
    *(_DWORD *)(v23 + 41) = 0;
    *(_DWORD *)(v23 + 44) = 0;
  }
  return result;
}

uint64_t EncodeDYMTLIntersectionFunctionDescriptor(uint64_t a1, void *a2, unint64_t a3)
{
  size_t v10 = a2;
  unint64_t v12 = a3;
  if (a3 >= 8)
  {
    *a2 = 81;
    if (a3 >= 0x10) {
      a2[1] = *(unsigned __int8 *)(a1 + 40);
    }
  }
  uint64_t v11 = 16;
  WriteDynamicBufferString(&v10, *(const char **)(a1 + 8));
  WriteDynamicBufferString(&v10, *(const char **)(a1 + 32));
  if (*(void *)a1)
  {
    uint64_t v4 = EncodeDYMTLFunctionConstantValues(*(uint64_t **)a1, 0, 0);
    uint64_t v5 = v4;
    unint64_t v6 = v12;
    uint64_t v7 = v11 + 8;
    unint64_t v8 = v12 - (v11 + 8);
    if (v12 >= v11 + 8) {
      v10[(unint64_t)v11 / 8] = v4;
    }
    if (v4 && v7 + v4 <= v6) {
      EncodeDYMTLFunctionConstantValues(*(uint64_t **)a1, (void *)((char *)v10 + v7), v8);
    }
  }
  else
  {
    uint64_t v7 = v11 + 8;
    uint64_t v5 = 0;
    if (v11 + 8 <= v12) {
      v10[(unint64_t)v11 / 8] = 0;
    }
  }
  return v7 + v5;
}

size_t DecodeDYMTLResidencySetDescriptor(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  int v8 = *(unsigned __int8 *)(a1 + 24);
  size_t result = a1 + 24;
  int v7 = v8;
  uint64_t v9 = *(void *)(result - 16);
  uint64_t v10 = *(void *)(result - 8);
  if (v8) {
    uint64_t v11 = (const char *)result;
  }
  else {
    uint64_t v11 = 0;
  }
  if (v7)
  {
    size_t result = strlen(v11);
    unint64_t v12 = a3 + 52;
    uint64_t v13 = a3[52];
    size_t v14 = result + 1;
    if (result != -1)
    {
      v15 = (void *)a3[52];
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v12 = a3 + 52;
    uint64_t v13 = a3[52];
  }
  size_t v14 = 0;
  v15 = 0;
LABEL_9:
  void *v12 = v13 + v14;
  if (a4)
  {
    size_t result = (size_t)memcpy(v15, v11, v14);
    uint64_t v16 = *a3;
    *a3 += 24;
    *(void *)uint64_t v16 = v10;
    *(void *)(v16 + 8) = v15;
    *(unsigned char *)(v16 + 16) = v9;
    *(_DWORD *)(v16 + 17) = 0;
    *(_DWORD *)(v16 + 20) = 0;
  }
  else
  {
    *a3 += 24;
  }
  return result;
}

uint64_t EncodeDYMTLResidencySetDescriptor(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v4 = a2;
  unint64_t v6 = a3;
  if (a3 >= 8)
  {
    *a2 = 81;
    if (a3 >= 0x10)
    {
      a2[1] = *(unsigned __int8 *)(a1 + 16);
      if (a3 >= 0x18) {
        a2[2] = *(void *)a1;
      }
    }
  }
  uint64_t v5 = 24;
  WriteDynamicBufferString(&v4, *(const char **)(a1 + 8));
  return v5;
}

int16x4_t DecodeDYIOSurface(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  memset(v30, 0, sizeof(v30));
  size_t v31 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  unsigned int v6 = *(_DWORD *)a1;
  long long v25 = *(_OWORD *)(a1 + 8);
  WORD6(v30[0]) = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 48);
  int16x4_t result = vmovn_s32(vuzp1q_s32(*(int32x4_t *)(a1 + 32), *(int32x4_t *)(a1 + 56)));
  *(int16x4_t *)((char *)v30 + 14) = result;
  uint64_t v9 = *(void *)(a1 + 80);
  *(void *)&v30[0] = __PAIR64__(*(void *)(a1 + 72), v7);
  uint64_t v10 = (int32x4_t *)(a1 + 88);
  BYTE6(v30[1]) = v9;
  uint64_t v11 = v9;
  if ((_BYTE)v9)
  {
    unint64_t v12 = (int16x4_t *)((char *)&v26 + 12);
    do
    {
      int32x4_t v13 = *v10;
      v12[-2].i32[1] = v10[1].i64[1];
      *(int32x2_t *)v13.i8 = vmovn_s64((int64x2_t)v13);
      LODWORD(v14) = v10[1].i32[0];
      HIDWORD(v14) = v10[2].i32[0];
      v13.i64[1] = v14;
      int16x4_t result = vmovn_s32(v13);
      v12[-1] = result;
      uint64_t v15 = v10[2].i64[1];
      v10 += 3;
      v12->i16[0] = v15;
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  DWORD2(v30[0]) = v10->i64[0];
  if (v6 <= 0x29)
  {
    v18 = (int32x4_t *)*((void *)&v30[1] + 1);
    size_t v16 = v31;
LABEL_15:
    uint64_t v19 = GTMTLDescriptorAllocator_copyPropertyList(a3, (uint64_t)v18, v16, a4);
    size_t v16 = v20;
    goto LABEL_16;
  }
  size_t v16 = v10->u64[1];
  int v17 = v10 + 1;
  if (v16) {
    v18 = v17;
  }
  else {
    v18 = 0;
  }
  if (v6 < 0x2E) {
    goto LABEL_15;
  }
  if (v16) {
    uint64_t v19 = *(void **)(a3 + 416);
  }
  else {
    uint64_t v19 = 0;
  }
  *(void *)(a3 + 416) += v16;
  if (a4) {
    memcpy(v19, v18, v16);
  }
LABEL_16:
  *((void *)&v30[1] + 1) = v19;
  size_t v31 = v16;
  uint64_t v21 = *(void *)(a3 + 384);
  *(void *)(a3 + 384) = v21 + 120;
  if (a4)
  {
    long long v22 = v30[0];
    *(_OWORD *)(v21 + 64) = v29;
    *(_OWORD *)(v21 + 80) = v22;
    *(_OWORD *)(v21 + 96) = v30[1];
    *(void *)(v21 + 112) = v31;
    long long v23 = v26;
    *(_OWORD *)uint64_t v21 = v25;
    *(_OWORD *)(v21 + 16) = v23;
    int16x4_t result = (int16x4_t)v27;
    long long v24 = v28;
    *(_OWORD *)(v21 + 32) = v27;
    *(_OWORD *)(v21 + 48) = v24;
  }
  return result;
}

uint64_t EncodeDYIOSurface(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v12 = a2;
  uint64_t v13 = 0;
  unint64_t v14 = a3;
  if (a3 < 8
    || (*a2 = 81, a3 < 0x10)
    || (a2[1] = *(void *)a1, a3 < 0x18)
    || (a2[2] = *(void *)(a1 + 8), a3 < 0x20)
    || (a2[3] = *(unsigned __int16 *)(a1 + 92), a3 <= 0x27))
  {
    uint64_t v13 = 40;
LABEL_7:
    v3 = (unsigned __int8 *)(a1 + 102);
LABEL_8:
    LODWORD(v4) = *v3;
    goto LABEL_9;
  }
  a2[4] = *(unsigned __int16 *)(a1 + 94);
  uint64_t v13 = 40;
  if (a3 < 0x30) {
    goto LABEL_7;
  }
  a2[5] = *(unsigned __int16 *)(a1 + 96);
  if (a3 < 0x38) {
    goto LABEL_7;
  }
  a2[6] = *(unsigned int *)(a1 + 80);
  if (a3 < 0x40) {
    goto LABEL_7;
  }
  a2[7] = *(unsigned __int16 *)(a1 + 98);
  if (a3 < 0x48) {
    goto LABEL_7;
  }
  a2[8] = *(unsigned __int16 *)(a1 + 100);
  if (a3 <= 0x4F) {
    goto LABEL_7;
  }
  a2[9] = *(unsigned int *)(a1 + 84);
  v3 = (unsigned __int8 *)(a1 + 102);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 102);
  if (a3 >= 0x58)
  {
    a2[10] = v4;
    goto LABEL_8;
  }
LABEL_9:
  uint64_t v5 = 88;
  uint64_t v13 = 88;
  if (v4)
  {
    unint64_t v6 = 0;
    uint64_t v5 = v13;
    unint64_t v7 = v14;
    int v8 = (unsigned __int16 *)(a1 + 28);
    uint64_t v9 = 88;
    do
    {
      uint64_t v10 = v9 + 8;
      if (v9 + 8 <= a3)
      {
        *(void *)((char *)a2 + v9) = *(v8 - 4);
        uint64_t v10 = v5 + 8;
        a3 = v7;
      }
      if (v10 + 8 <= a3)
      {
        *(void *)((char *)a2 + v10) = *(v8 - 3);
        a3 = v7;
      }
      if (v10 + 16 <= a3)
      {
        *(void *)((char *)a2 + v10 + 8) = *(v8 - 2);
        a3 = v7;
      }
      if (v10 + 24 <= a3)
      {
        *(void *)((char *)a2 + v10 + 16) = *((unsigned int *)v8 - 3);
        a3 = v7;
      }
      if (v10 + 32 <= a3)
      {
        *(void *)((char *)a2 + v10 + 24) = *(v8 - 1);
        a3 = v7;
      }
      uint64_t v5 = v10 + 40;
      if (v10 + 40 <= a3) {
        *(void *)((char *)a2 + v10 + 32) = *v8;
      }
      ++v6;
      v8 += 8;
      uint64_t v9 = v10 + 40;
    }
    while (v6 < *v3);
    uint64_t v13 = v10 + 40;
  }
  if (v5 + 8 <= a3) {
    *(void *)((char *)a2 + v5) = *(unsigned int *)(a1 + 88);
  }
  uint64_t v13 = v5 + 8;
  WriteGTData(&v12, *(const void **)(a1 + 104), *(void *)(a1 + 112));
  return v13;
}

size_t DecodeDYMTLDeviceDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  size_t v7 = *(void *)a1;
  uint64_t v8 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v9 = (const char *)(a1 + 16);
  size_t result = strlen((const char *)(a1 + 16));
  uint64_t v11 = &v9[result & 0xFFFFFFFFFFFFFFF8];
  int v12 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 16)) {
    uint64_t v13 = v9;
  }
  else {
    uint64_t v13 = 0;
  }
  v60 = v13;
  unint64_t v14 = v11 + 40;
  __int16 v57 = *((_WORD *)v11 + 4);
  char v58 = v11[32];
  __int16 v55 = *((_WORD *)v11 + 12);
  __int16 v56 = *((_WORD *)v11 + 8);
  if (v8 == 1)
  {
    uint64_t v15 = 0;
    size_t v16 = 0;
    int v17 = 0;
    char v18 = 0;
    char v54 = 0;
  }
  else
  {
    uint64_t v19 = &v14[strlen(v14) & 0xFFFFFFFFFFFFFFF8];
    if (*v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    char v20 = v8;
    char v21 = v7;
    size_t v7 = (size_t)&v19[(strlen(v19 + 8) & 0xFFFFFFFFFFFFFFF8) + 8];
    long long v22 = (const char *)(v7 + 8);
    if (v19[8]) {
      size_t v16 = v19 + 8;
    }
    else {
      size_t v16 = 0;
    }
    size_t result = strlen((const char *)(v7 + 8));
    long long v23 = &v22[result & 0xFFFFFFFFFFFFFFF8];
    int v24 = *(unsigned __int8 *)(v7 + 8);
    LOBYTE(v7) = v21;
    LOBYTE(v8) = v20;
    if (v24) {
      int v17 = v22;
    }
    else {
      int v17 = 0;
    }
    char v18 = v23[8];
    unint64_t v14 = v23 + 24;
    char v54 = v23[16];
  }
  if (v7 < 0xCu)
  {
    uint64_t v47 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    char v52 = 0;
    char v48 = 0;
    long long v53 = 0u;
    int16x8_t v51 = 0u;
    long long v59 = 0u;
    if (v12) {
      goto LABEL_34;
    }
    goto LABEL_39;
  }
  long long v53 = *(_OWORD *)v14;
  if (v7 < 0xFu)
  {
    uint64_t v47 = 0;
    BYTE4(v49) = 0;
    char v52 = 0;
    goto LABEL_25;
  }
  char v52 = v14[16];
  if (v7 < 0x19u)
  {
    uint64_t v47 = 0;
    BYTE4(v49) = 0;
LABEL_25:
    uint64_t v50 = 0;
    char v48 = 0;
    LOBYTE(v49) = 0;
    long long v59 = 0u;
    int16x8_t v51 = 0u;
    if (v12) {
      goto LABEL_34;
    }
    goto LABEL_39;
  }
  long long v25 = v14 + 32;
  int16x8_t v26 = 0uLL;
  long long v59 = 0u;
  if (*((void *)v14 + 3) == -1)
  {
    uint64_t v50 = 0;
  }
  else
  {
    v27.i32[0] = *((void *)v14 + 3);
    v27.i32[1] = *(_DWORD *)v25;
    int16x8_t v26 = vuzp1q_s16((int16x8_t)vmovn_hight_s64(v27, *(int64x2_t *)(v14 + 40)), (int16x8_t)vuzp1q_s32(*(int32x4_t *)(v14 + 56), *(int32x4_t *)(v14 + 72)));
    long long v25 = v14 + 104;
    LOWORD(v50) = *((_WORD *)v14 + 48);
    WORD2(v50) = *((_WORD *)v14 + 44);
  }
  int16x8_t v51 = v26;
  if (v7 < 0x1Cu)
  {
    uint64_t v47 = 0;
    BYTE4(v49) = 0;
    goto LABEL_32;
  }
  BYTE4(v49) = *v25;
  if (v7 == 28)
  {
    uint64_t v47 = 0;
LABEL_32:
    LOBYTE(v49) = 0;
    goto LABEL_33;
  }
  LOBYTE(v49) = v25[8];
  if (v7 < 0x2Cu)
  {
    uint64_t v47 = 0;
LABEL_33:
    char v48 = 0;
    if (v12) {
      goto LABEL_34;
    }
LABEL_39:
    long long v29 = (void *)(a3 + 416);
    uint64_t v30 = *(void *)(a3 + 416);
    long long v28 = v60;
    goto LABEL_40;
  }
  uint64_t v47 = *((void *)v25 + 2);
  if (v7 < 0x35u) {
    goto LABEL_33;
  }
  long long v59 = *(_OWORD *)(v25 + 24);
  char v48 = v25[40];
  if (!v12) {
    goto LABEL_39;
  }
LABEL_34:
  long long v28 = v60;
  size_t result = strlen(v60);
  long long v29 = (void *)(a3 + 416);
  uint64_t v30 = *(void *)(a3 + 416);
  size_t v31 = result + 1;
  if (result != -1)
  {
    v32 = *(void **)(a3 + 416);
    goto LABEL_41;
  }
LABEL_40:
  size_t v31 = 0;
  v32 = 0;
LABEL_41:
  *long long v29 = v30 + v31;
  if (a4) {
    size_t result = (size_t)memcpy(v32, v28, v31);
  }
  if (v15)
  {
    size_t result = strlen(v15);
    v33 = (void *)(a3 + 416);
    uint64_t v34 = *(void *)(a3 + 416);
    char v35 = v18;
    size_t v36 = result + 1;
    if (result != -1)
    {
      v37 = *(void **)(a3 + 416);
      goto LABEL_48;
    }
  }
  else
  {
    char v35 = v18;
    v33 = (void *)(a3 + 416);
    uint64_t v34 = *(void *)(a3 + 416);
  }
  size_t v36 = 0;
  v37 = 0;
LABEL_48:
  void *v33 = v34 + v36;
  if (a4) {
    size_t result = (size_t)memcpy(v37, v15, v36);
  }
  if (v16)
  {
    size_t result = strlen(v16);
    v38 = (void *)(a3 + 416);
    uint64_t v39 = *(void *)(a3 + 416);
    size_t v40 = result + 1;
    if (result != -1)
    {
      v41 = *(void **)(a3 + 416);
      goto LABEL_55;
    }
  }
  else
  {
    v38 = (void *)(a3 + 416);
    uint64_t v39 = *(void *)(a3 + 416);
  }
  size_t v40 = 0;
  v41 = 0;
LABEL_55:
  void *v38 = v39 + v40;
  if (a4) {
    size_t result = (size_t)memcpy(v41, v16, v40);
  }
  if (v17)
  {
    size_t result = strlen(v17);
    v42 = (void *)(a3 + 416);
    uint64_t v43 = *(void *)(a3 + 416);
    size_t v44 = result + 1;
    if (result != -1)
    {
      v45 = *(void **)(a3 + 416);
      goto LABEL_62;
    }
  }
  else
  {
    v42 = (void *)(a3 + 416);
    uint64_t v43 = *(void *)(a3 + 416);
  }
  size_t v44 = 0;
  v45 = 0;
LABEL_62:
  void *v42 = v43 + v44;
  if (a4)
  {
    size_t result = (size_t)memcpy(v45, v17, v44);
    uint64_t v46 = *(void *)(a3 + 312);
    *(void *)(a3 + 312) = v46 + 112;
    *(_OWORD *)uint64_t v46 = v53;
    *(void *)(v46 + 16) = v47;
    *(_OWORD *)(v46 + 24) = v59;
    *(int16x8_t *)(v46 + 40) = v51;
    *(_WORD *)(v46 + 56) = WORD2(v50);
    *(_WORD *)(v46 + 58) = v50;
    *(_DWORD *)(v46 + 60) = 0;
    *(void *)(v46 + 64) = v32;
    *(void *)(v46 + 72) = v37;
    *(void *)(v46 + 80) = v41;
    *(void *)(v46 + 88) = v45;
    *(_WORD *)(v46 + 96) = v57;
    *(_WORD *)(v46 + 98) = v56;
    *(_WORD *)(v46 + 100) = v55;
    *(unsigned char *)(v46 + 102) = v8;
    *(unsigned char *)(v46 + 103) = BYTE4(v49);
    *(unsigned char *)(v46 + 104) = v7;
    *(unsigned char *)(v46 + 105) = v58;
    *(unsigned char *)(v46 + 106) = v35;
    *(unsigned char *)(v46 + 107) = v54;
    *(unsigned char *)(v46 + 108) = v52;
    *(unsigned char *)(v46 + 109) = v49;
    *(unsigned char *)(v46 + 110) = v48;
    *(unsigned char *)(v46 + 111) = 0;
  }
  else
  {
    *(void *)(a3 + 312) += 112;
  }
  return result;
}

uint64_t EncodeDYMTLDeviceDescriptor(uint64_t a1, void *a2, unint64_t a3)
{
  v33 = a2;
  unint64_t v35 = a3;
  if (a3 > 7)
  {
    *a2 = 81;
    uint64_t v4 = (unsigned char *)(a1 + 102);
    if (a3 >= 0x10) {
      a2[1] = *v4;
    }
  }
  else
  {
    uint64_t v4 = (unsigned char *)(a1 + 102);
  }
  uint64_t v34 = 16;
  WriteDynamicBufferString(&v33, *(const char **)(a1 + 64));
  unint64_t v5 = v35;
  uint64_t v6 = v34 + 8;
  if (v34 + 8 <= v35)
  {
    *(void *)((char *)v33 + v34) = *(unsigned __int16 *)(a1 + 96);
    unint64_t v5 = v35;
    uint64_t v6 = v34 + 8;
  }
  uint64_t v34 = v6;
  uint64_t v7 = v6 + 8;
  if (v6 + 8 <= v5)
  {
    *(void *)((char *)v33 + v6) = *(unsigned __int16 *)(a1 + 98);
    unint64_t v5 = v35;
    uint64_t v7 = v34 + 8;
  }
  uint64_t v34 = v7;
  uint64_t v8 = v7 + 8;
  if (v7 + 8 <= v5)
  {
    *(void *)((char *)v33 + v7) = *(unsigned __int16 *)(a1 + 100);
    unint64_t v5 = v35;
    uint64_t v8 = v34 + 8;
  }
  uint64_t v34 = v8;
  uint64_t v9 = v8 + 8;
  if (v8 + 8 <= v5)
  {
    *(void *)((char *)v33 + v8) = *(unsigned __int8 *)(a1 + 105);
    uint64_t v9 = v34 + 8;
  }
  uint64_t v34 = v9;
  if (*v4 != 1)
  {
    WriteDynamicBufferString(&v33, *(const char **)(a1 + 72));
    WriteDynamicBufferString(&v33, *(const char **)(a1 + 80));
    WriteDynamicBufferString(&v33, *(const char **)(a1 + 88));
    unint64_t v10 = v35;
    uint64_t v11 = v34 + 8;
    if (v34 + 8 <= v35)
    {
      *(void *)((char *)v33 + v34) = *(unsigned __int8 *)(a1 + 106);
      unint64_t v10 = v35;
      uint64_t v11 = v34 + 8;
    }
    uint64_t v34 = v11;
    uint64_t v9 = v11 + 8;
    if (v11 + 8 <= v10)
    {
      *(void *)((char *)v33 + v11) = *(unsigned __int8 *)(a1 + 107);
      uint64_t v9 = v34 + 8;
    }
    uint64_t v34 = v9;
  }
  uint64_t v12 = v9 + 8;
  unint64_t v13 = v35;
  if (v9 + 8 <= v35)
  {
    *(void *)((char *)v33 + v9) = *(void *)a1;
    unint64_t v13 = v35;
    uint64_t v12 = v34 + 8;
  }
  uint64_t v34 = v12;
  uint64_t v14 = v12 + 8;
  if (v12 + 8 <= v13)
  {
    *(void *)((char *)v33 + v12) = *(void *)(a1 + 8);
    unint64_t v13 = v35;
    uint64_t v14 = v34 + 8;
  }
  uint64_t v34 = v14;
  uint64_t v15 = v14 + 8;
  if (v14 + 8 <= v13)
  {
    *(void *)((char *)v33 + v14) = *(unsigned __int8 *)(a1 + 108);
    unint64_t v13 = v35;
    uint64_t v15 = v34 + 8;
  }
  uint64_t v34 = v15;
  int v16 = *(unsigned __int16 *)(a1 + 40);
  uint64_t v17 = v15 + 8;
  if (v15 + 8 <= v13)
  {
    if (*(_WORD *)(a1 + 40)) {
      uint64_t v18 = *(unsigned __int16 *)(a1 + 40);
    }
    else {
      uint64_t v18 = -1;
    }
    *(void *)((char *)v33 + v15) = v18;
    unint64_t v13 = v35;
    uint64_t v17 = v34 + 8;
  }
  uint64_t v34 = v17;
  if (v16)
  {
    uint64_t v19 = v17 + 8;
    if (v17 + 8 <= v13)
    {
      *(void *)((char *)v33 + v17) = *(unsigned __int16 *)(a1 + 42);
      unint64_t v13 = v35;
      uint64_t v19 = v34 + 8;
    }
    uint64_t v34 = v19;
    uint64_t v20 = v19 + 8;
    if (v19 + 8 <= v13)
    {
      *(void *)((char *)v33 + v19) = *(unsigned __int16 *)(a1 + 44);
      unint64_t v13 = v35;
      uint64_t v20 = v34 + 8;
    }
    uint64_t v34 = v20;
    uint64_t v21 = v20 + 8;
    if (v20 + 8 <= v13)
    {
      *(void *)((char *)v33 + v20) = *(unsigned __int16 *)(a1 + 46);
      unint64_t v13 = v35;
      uint64_t v21 = v34 + 8;
    }
    uint64_t v34 = v21;
    uint64_t v22 = v21 + 8;
    if (v21 + 8 <= v13)
    {
      *(void *)((char *)v33 + v21) = *(unsigned __int16 *)(a1 + 48);
      unint64_t v13 = v35;
      uint64_t v22 = v34 + 8;
    }
    uint64_t v34 = v22;
    uint64_t v23 = v22 + 8;
    if (v22 + 8 <= v13)
    {
      *(void *)((char *)v33 + v22) = *(unsigned __int16 *)(a1 + 50);
      unint64_t v13 = v35;
      uint64_t v23 = v34 + 8;
    }
    uint64_t v34 = v23;
    uint64_t v24 = v23 + 8;
    if (v23 + 8 <= v13)
    {
      *(void *)((char *)v33 + v23) = *(unsigned __int16 *)(a1 + 52);
      unint64_t v13 = v35;
      uint64_t v24 = v34 + 8;
    }
    uint64_t v34 = v24;
    uint64_t v25 = v24 + 8;
    if (v24 + 8 <= v13)
    {
      *(void *)((char *)v33 + v24) = *(unsigned __int16 *)(a1 + 54);
      unint64_t v13 = v35;
      uint64_t v25 = v34 + 8;
    }
    uint64_t v34 = v25;
    uint64_t v26 = v25 + 8;
    if (v25 + 8 <= v13)
    {
      *(void *)((char *)v33 + v25) = *(unsigned __int16 *)(a1 + 56);
      unint64_t v13 = v35;
      uint64_t v26 = v34 + 8;
    }
    uint64_t v34 = v26;
    uint64_t v17 = v26 + 8;
    if (v26 + 8 <= v13)
    {
      *(void *)((char *)v33 + v26) = *(unsigned __int16 *)(a1 + 58);
      unint64_t v13 = v35;
      uint64_t v17 = v34 + 8;
    }
    uint64_t v34 = v17;
  }
  uint64_t v27 = v17 + 8;
  if (v17 + 8 <= v13)
  {
    *(void *)((char *)v33 + v17) = *(unsigned __int8 *)(a1 + 103);
    unint64_t v13 = v35;
    uint64_t v27 = v34 + 8;
  }
  uint64_t v34 = v27;
  uint64_t v28 = v27 + 8;
  if (v27 + 8 <= v13)
  {
    *(void *)((char *)v33 + v27) = *(unsigned __int8 *)(a1 + 109);
    unint64_t v13 = v35;
    uint64_t v28 = v34 + 8;
  }
  uint64_t v34 = v28;
  uint64_t v29 = v28 + 8;
  if (v28 + 8 <= v13)
  {
    *(void *)((char *)v33 + v28) = *(void *)(a1 + 16);
    unint64_t v13 = v35;
    uint64_t v29 = v34 + 8;
  }
  uint64_t v34 = v29;
  uint64_t v30 = v29 + 8;
  if (v29 + 8 <= v13)
  {
    *(void *)((char *)v33 + v29) = *(void *)(a1 + 24);
    unint64_t v13 = v35;
    uint64_t v30 = v34 + 8;
  }
  uint64_t v34 = v30;
  uint64_t v31 = v30 + 8;
  if (v30 + 8 <= v13)
  {
    *(void *)((char *)v33 + v30) = *(void *)(a1 + 32);
    unint64_t v13 = v35;
    uint64_t v31 = v34 + 8;
  }
  uint64_t v34 = v31;
  uint64_t result = v31 + 8;
  if (v31 + 8 <= v13)
  {
    *(void *)((char *)v33 + v31) = *(unsigned __int8 *)(a1 + 110);
    return v34 + 8;
  }
  return result;
}

size_t DecodeDYMTLCounterSampleBufferDescriptor(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v7 = (char *)(a1 + 8);
  size_t v8 = (strlen((const char *)(a1 + 8)) & 0xFFFFFFFFFFFFFFF8) + a1 + 8;
  int v9 = *(unsigned __int8 *)(a1 + 8);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v10 = v7;
  }
  else {
    unint64_t v10 = 0;
  }
  __s = v10;
  size_t v11 = (strlen((const char *)(v8 + 8)) & 0xFFFFFFFFFFFFFFF8) + v8 + 8;
  int v53 = *(unsigned __int8 *)(v8 + 8);
  if (*(unsigned char *)(v8 + 8)) {
    uint64_t v12 = (char *)(v8 + 8);
  }
  else {
    uint64_t v12 = 0;
  }
  __int16 v55 = v12;
  unsigned int v13 = *(_DWORD *)(v11 + 16);
  uint64_t v14 = (const char *)(v11 + 24);
  unsigned int v52 = v13;
  if (v13)
  {
    uint64_t v51 = a3[49];
    while (1)
    {
      uint64_t v15 = &v14[strlen(v14) & 0xFFFFFFFFFFFFFFF8];
      int v16 = v15 + 8;
      int v17 = *(unsigned __int8 *)v14;
      if (*v14) {
        uint64_t v18 = v14;
      }
      else {
        uint64_t v18 = 0;
      }
      size_t v19 = strlen(v15 + 8);
      int v20 = *((unsigned __int8 *)v15 + 8);
      if (v20) {
        uint64_t v21 = v16;
      }
      else {
        uint64_t v21 = 0;
      }
      if (v17)
      {
        size_t v22 = strlen(v18);
        uint64_t v23 = a3[52];
        size_t v24 = v22 + 1;
        if (v22 != -1)
        {
          uint64_t v25 = (void *)a3[52];
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v23 = a3[52];
      }
      size_t v24 = 0;
      uint64_t v25 = 0;
LABEL_20:
      a3[52] = v23 + v24;
      if (a4) {
        memcpy(v25, v18, v24);
      }
      if (!v20)
      {
        uint64_t v27 = a3[52];
LABEL_26:
        size_t v28 = 0;
        uint64_t v29 = 0;
        goto LABEL_27;
      }
      size_t v26 = strlen(v21);
      uint64_t v27 = a3[52];
      size_t v28 = v26 + 1;
      if (v26 == -1) {
        goto LABEL_26;
      }
      uint64_t v29 = (void *)a3[52];
LABEL_27:
      a3[52] = v27 + v28;
      if (a4)
      {
        memcpy(v29, v21, v28);
        uint64_t v30 = (void *)a3[49];
        a3[49] = v30 + 2;
        *uint64_t v30 = v25;
        v30[1] = v29;
      }
      else
      {
        a3[49] += 16;
      }
      uint64_t v14 = &v16[(v19 & 0xFFFFFFFFFFFFFFF8) + 8];
      if (!--v13) {
        goto LABEL_33;
      }
    }
  }
  uint64_t v51 = 0;
LABEL_33:
  size_t result = strlen(v14);
  v32 = &v14[result & 0xFFFFFFFFFFFFFFF8];
  int v33 = *(unsigned __int8 *)v14;
  if (*v14) {
    uint64_t v34 = v14;
  }
  else {
    uint64_t v34 = 0;
  }
  uint64_t v35 = *((void *)v32 + 1);
  uint64_t v36 = *((void *)v32 + 2);
  if (v9)
  {
    size_t result = strlen(__s);
    v37 = a3 + 52;
    uint64_t v38 = a3[52];
    size_t v39 = result + 1;
    if (result != -1)
    {
      size_t v40 = (void *)a3[52];
      v41 = v55;
      goto LABEL_41;
    }
  }
  else
  {
    v37 = a3 + 52;
    uint64_t v38 = a3[52];
  }
  v41 = v55;
  size_t v39 = 0;
  size_t v40 = 0;
LABEL_41:
  void *v37 = v38 + v39;
  if (a4) {
    size_t result = (size_t)memcpy(v40, __s, v39);
  }
  if (v53)
  {
    size_t result = strlen(v41);
    v42 = a3 + 52;
    uint64_t v43 = a3[52];
    size_t v44 = result + 1;
    if (result != -1)
    {
      v45 = (void *)a3[52];
      goto LABEL_48;
    }
  }
  else
  {
    v42 = a3 + 52;
    uint64_t v43 = a3[52];
  }
  size_t v44 = 0;
  v45 = 0;
LABEL_48:
  void *v42 = v43 + v44;
  if (a4) {
    size_t result = (size_t)memcpy(v45, v41, v44);
  }
  if (v33)
  {
    size_t result = strlen(v34);
    uint64_t v46 = a3 + 52;
    uint64_t v47 = a3[52];
    size_t v48 = result + 1;
    if (result != -1)
    {
      uint64_t v49 = (void *)a3[52];
      goto LABEL_55;
    }
  }
  else
  {
    uint64_t v46 = a3 + 52;
    uint64_t v47 = a3[52];
  }
  size_t v48 = 0;
  uint64_t v49 = 0;
LABEL_55:
  *uint64_t v46 = v47 + v48;
  if (a4)
  {
    size_t result = (size_t)memcpy(v49, v34, v48);
    uint64_t v50 = a3[38];
    a3[38] = v50 + 48;
    *(void *)uint64_t v50 = v49;
    *(void *)(v50 + 8) = v40;
    *(void *)(v50 + 16) = v45;
    *(void *)(v50 + 24) = v51;
    *(void *)(v50 + 32) = v52;
    *(_DWORD *)(v50 + 40) = v36;
    *(unsigned char *)(v50 + 44) = v35;
    *(_WORD *)(v50 + 45) = 0;
    *(unsigned char *)(v50 + 47) = 0;
  }
  else
  {
    a3[38] += 48;
  }
  return result;
}

uint64_t EncodeDYMTLCounterSampleBufferDescriptor(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v15 = a2;
  unint64_t v17 = a3;
  if (a3 >= 8) {
    *a2 = 81;
  }
  uint64_t v16 = 8;
  WriteDynamicBufferString(&v15, *(const char **)(a1 + 8));
  WriteDynamicBufferString(&v15, *(const char **)(a1 + 16));
  uint64_t v4 = v16;
  unint64_t v5 = v17;
  uint64_t v6 = v16 + 8;
  if (v16 + 8 <= v17)
  {
    uint64_t v7 = GTMTLCounterSet_structType(*(const char **)(a1 + 8));
    *(void *)((char *)v15 + v4) = v7;
  }
  uint64_t v8 = *(unsigned int *)(a1 + 32);
  if (v4 + 16 <= v5)
  {
    *(void *)((char *)v15 + v6) = v8;
    LODWORD(v8) = *(_DWORD *)(a1 + 32);
  }
  uint64_t v16 = v4 + 16;
  if (v8)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      WriteDynamicBufferString(&v15, *(const char **)(*(void *)(a1 + 24) + v9));
      WriteDynamicBufferString(&v15, *(const char **)(*(void *)(a1 + 24) + v9 + 8));
      ++v10;
      v9 += 16;
    }
    while (v10 < *(unsigned int *)(a1 + 32));
  }
  WriteDynamicBufferString(&v15, *(const char **)a1);
  uint64_t v11 = v16;
  unint64_t v12 = v17;
  uint64_t v13 = v16 + 8;
  if (v16 + 8 <= v17) {
    *(void *)((char *)v15 + v16) = *(unsigned __int8 *)(a1 + 44);
  }
  uint64_t result = v11 + 16;
  if (v11 + 16 <= v12) {
    *(void *)((char *)v15 + v13) = *(unsigned int *)(a1 + 40);
  }
  return result;
}

size_t DecodeDYMTLAccelerationStructureDescriptor(size_t result, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  unsigned int v8 = *(_DWORD *)result;
  int v9 = *(unsigned __int8 *)(result + 8);
  unsigned int v104 = *(unsigned __int8 *)(result + 16);
  char v105 = *(unsigned char *)(result + 8);
  if (v9 == 3)
  {
    if (v8 < 0x4E)
    {
      unint64_t v65 = 0;
      char v66 = 0;
      char v67 = 0;
      if (!a4) {
        goto LABEL_193;
      }
    }
    else
    {
      unint64_t v65 = *(void *)(result + 120);
      char v66 = *(unsigned char *)(result + 128);
      char v67 = *(unsigned char *)(result + 136);
      if (!a4) {
        goto LABEL_193;
      }
    }
    uint64_t v94 = *(void *)(result + 24);
    uint64_t v107 = *(void *)(result + 32);
    unint64_t v92 = *(void *)(result + 40);
    unint64_t v90 = *(void *)(result + 48);
    uint64_t v86 = *(void *)(result + 56);
    uint64_t v85 = *(void *)(result + 64);
    unint64_t v70 = *(void *)(result + 72);
    unint64_t v69 = *(void *)(result + 80);
    int64x2_t v95 = *(int64x2_t *)(result + 88);
    int v79 = *(_DWORD *)(result + 104);
    char v78 = *(unsigned char *)(result + 112);
    if (a5)
    {
      int64x2_t v125 = *(int64x2_t *)(result + 88);
      char v127 = *(unsigned char *)(result + 112);
      uint64_t v129 = *(void *)(result + 64);
      char v132 = v67;
      Stream_11288 = (uint64_t *)GetStream_11288(a5, v94);
      char v136 = v66;
      if (Stream_11288) {
        uint64_t v97 = *Stream_11288;
      }
      else {
        uint64_t v97 = 0;
      }
      v99 = (unint64_t *)GetStream_11288(a5, v92);
      if (v99) {
        unint64_t v92 = *v99;
      }
      else {
        unint64_t v92 = 0;
      }
      v100 = (uint64_t *)GetStream_11288(a5, v86);
      if (v100) {
        uint64_t v86 = *v100;
      }
      else {
        uint64_t v86 = 0;
      }
      v101 = (unint64_t *)GetStream_11288(a5, v70);
      if (v101) {
        unint64_t v70 = *v101;
      }
      else {
        unint64_t v70 = 0;
      }
      uint64_t result = v104;
      uint64_t v93 = v97;
      char v66 = v136;
      char v67 = v132;
      uint64_t v85 = v129;
      char v78 = v127;
      int64x2_t v95 = v125;
    }
    else
    {
      uint64_t result = *(unsigned __int8 *)(result + 16);
      uint64_t v93 = v94;
    }
    int32x2_t v98 = vmovn_s64(v95);
    unint64_t v91 = HIDWORD(v92);
    unint64_t v89 = HIDWORD(v90);
    unint64_t v88 = v90 >> 40;
    unint64_t v87 = HIWORD(v90);
    unint64_t v84 = HIDWORD(v70);
    uint64_t v83 = HIDWORD(v69);
    uint64_t v82 = v65 >> 8;
    unint64_t v80 = v65 & 0xFFFFFFFFFF000000;
    uint64_t v81 = v65 >> 16;
    goto LABEL_192;
  }
  unsigned int v126 = *(_DWORD *)result;
  if (v9 == 2)
  {
    uint64_t v107 = *(void *)(result + 24);
    unint64_t v135 = *(void *)(result + 32);
    int v68 = *(_DWORD *)(result + 40);
    LODWORD(v69) = *(_DWORD *)(result + 48);
    unint64_t v70 = *(unsigned int *)(result + 56);
    v71 = (uint64_t *)(result + 64);
    v72 = (uint64_t *)a3[50];
    a3[50] = &v72[v70];
    if (!a4) {
      goto LABEL_151;
    }
    if (a5)
    {
      uint64_t result = GetStream_11288(a5, v107);
      if (!result)
      {
        uint64_t v107 = 0;
        if (!v70) {
          goto LABEL_151;
        }
        goto LABEL_145;
      }
      uint64_t v107 = *(void *)result;
    }
    if (!v70) {
      goto LABEL_151;
    }
LABEL_145:
    v73 = v72;
    unint64_t v74 = v70;
    do
    {
      uint64_t v76 = *v71++;
      uint64_t v75 = v76;
      if (a5)
      {
        uint64_t result = GetStream_11288(a5, v75);
        if (result) {
          uint64_t v75 = *(void *)result;
        }
        else {
          uint64_t v75 = 0;
        }
      }
      *v73++ = v75;
      --v74;
    }
    while (v74);
LABEL_151:
    if (v126 < 0x39)
    {
      LOBYTE(v65) = 0;
      LODWORD(v83) = 0;
      uint64_t v86 = 0;
      unint64_t v77 = 0;
      uint64_t v85 = 0;
      LOBYTE(v82) = 0;
      LOBYTE(v81) = 0;
      uint64_t v93 = (uint64_t)v72;
      LODWORD(v84) = v68;
      if (!a4) {
        goto LABEL_193;
      }
    }
    else
    {
      LOBYTE(v65) = *(unsigned char *)v71;
      unint64_t v77 = v71[1];
      if (a5)
      {
        uint64_t result = GetStream_11288(a5, v77);
        if (result) {
          unint64_t v77 = *(void *)result;
        }
        else {
          unint64_t v77 = 0;
        }
      }
      uint64_t v93 = (uint64_t)v72;
      LODWORD(v84) = v68;
      uint64_t v86 = v71[2];
      uint64_t v83 = v71[3];
      if (v126 < 0x4E)
      {
        uint64_t v85 = 0;
        LOBYTE(v82) = 0;
        LOBYTE(v81) = 0;
        if (!a4) {
          goto LABEL_193;
        }
      }
      else
      {
        uint64_t v85 = v71[4];
        uint64_t v82 = v71[5];
        uint64_t v81 = v71[6];
        if (!a4) {
          goto LABEL_193;
        }
      }
    }
    char v67 = 0;
    char v66 = 0;
    char v78 = 0;
    int v79 = 0;
    unint64_t v80 = 0;
    unint64_t v91 = HIDWORD(v77);
    LODWORD(v90) = v135;
    unint64_t v89 = HIDWORD(v135);
    unint64_t v88 = v135 >> 40;
    unint64_t v87 = HIWORD(v135);
    int32x2_t v98 = 0;
    LODWORD(v92) = v77;
    goto LABEL_179;
  }
  if (v9 == 1)
  {
    unint64_t v10 = result + 32;
    uint64_t v107 = *(void *)(result + 24);
    if (v107)
    {
      uint64_t v11 = 0;
      uint64_t v103 = a3[37];
      while (2)
      {
        unint64_t v12 = (int32x2_t *)a3[37];
        a3[37] = v12 + 17;
        __int8 v115 = *(unsigned char *)(v10 + 16);
        __int8 v116 = *(unsigned char *)v10;
        __int32 v113 = *(_DWORD *)(v10 + 8);
        __int8 v114 = *(unsigned char *)(v10 + 24);
        switch(*(unsigned char *)v10)
        {
          case 1:
            if (v8 < 0x3C)
            {
              uint64_t v14 = 0;
              uint64_t v15 = 0;
              uint64_t v16 = 0;
              unint64_t v17 = (const char *)(v10 + 88);
              uint64_t v13 = 30;
              if (!a4) {
                goto LABEL_85;
              }
            }
            else
            {
              uint64_t v13 = *(unsigned __int8 *)(v10 + 88);
              uint64_t v15 = *(void *)(v10 + 96);
              uint64_t v14 = *(void *)(v10 + 104);
              if (v8 < 0x4E)
              {
                uint64_t v16 = 0;
                unint64_t v17 = (const char *)(v10 + 112);
                if (!a4) {
                  goto LABEL_85;
                }
              }
              else
              {
                uint64_t v16 = *(unsigned __int8 *)(v10 + 112);
                unint64_t v17 = (const char *)(v10 + 120);
                if (!a4) {
                  goto LABEL_85;
                }
              }
            }
            uint64_t v119 = v13;
            uint64_t v117 = v16;
            uint64_t v128 = v15;
            uint64_t v120 = v14;
            int32x2_t v130 = *(int32x2_t *)(v10 + 40);
            uint64_t v48 = *(void *)(v10 + 56);
            uint64_t v121 = *(void *)(v10 + 48);
            v124.i8[0] = *(unsigned char *)(v10 + 72);
            int32x2_t v122 = *(int32x2_t *)(v10 + 64);
            uint64_t v123 = *(void *)(v10 + 80);
            if (!a5)
            {
              uint64_t v118 = *(void *)(v10 + 32);
              uint64_t v133 = *(void *)(v10 + 56);
              goto LABEL_87;
            }
            uint64_t v49 = (uint64_t *)GetStream_11288(a5, *(void *)(v10 + 32));
            if (v49) {
              uint64_t v118 = *v49;
            }
            else {
              uint64_t v118 = 0;
            }
            unsigned int v52 = (uint64_t *)GetStream_11288(a5, v48);
            if (v52) {
              uint64_t v53 = *v52;
            }
            else {
              uint64_t v53 = 0;
            }
            uint64_t v55 = v128;
            uint64_t v133 = v53;
            uint64_t v54 = a5;
            goto LABEL_109;
          case 2:
            unint64_t v17 = (const char *)(v10 + 64);
            if (!a4) {
              goto LABEL_85;
            }
            int32x2_t v122 = *(int32x2_t *)(v10 + 40);
            uint64_t v120 = *(void *)(v10 + 48);
            uint64_t v128 = *(void *)(v10 + 56);
            if (a5)
            {
              uint64_t result = GetStream_11288(a5, *(void *)(v10 + 32));
              if (result)
              {
                uint64_t v123 = 0;
                uint64_t v118 = 0;
                int32x2_t v130 = 0;
                uint64_t v121 = 0;
                v124.i8[0] = 0;
                uint64_t v117 = 0;
                uint64_t v119 = 0;
                unint64_t v18 = 0;
                uint64_t v111 = 0;
                uint64_t v112 = 0;
                uint64_t v109 = 0;
                uint64_t v110 = 0;
                uint64_t v108 = 0;
                uint64_t v133 = *(void *)result;
                goto LABEL_111;
              }
              uint64_t v133 = 0;
            }
            else
            {
              uint64_t v133 = *(void *)(v10 + 32);
            }
            goto LABEL_86;
          case 3:
            int32x2_t v19 = *(int32x2_t *)(v10 + 32);
            unint64_t v20 = v10 + 40;
            int32x2_t v130 = v19;
            if (v19)
            {
              uint64_t v118 = a3[43];
              do
              {
                uint64_t v21 = (uint64_t *)a3[43];
                a3[43] = v21 + 2;
                if (a4)
                {
                  uint64_t v22 = *(void *)v20;
                  uint64_t v23 = *(void *)(v20 + 8);
                  if (a5)
                  {
                    uint64_t result = GetStream_11288(a5, v22);
                    if (result) {
                      uint64_t v22 = *(void *)result;
                    }
                    else {
                      uint64_t v22 = 0;
                    }
                  }
                  uint64_t *v21 = v22;
                  v21[1] = v23;
                }
                v20 += 16;
                --*(void *)&v19;
              }
              while (v19);
            }
            else
            {
              uint64_t v118 = 0;
            }
            uint64_t v121 = *(void *)(v20 + 8);
            uint64_t v133 = *(void *)(v20 + 16);
            v124.i8[0] = *(unsigned char *)(v20 + 32);
            uint64_t v123 = *(void *)(v20 + 40);
            if (v8 <= 0x3B)
            {
              uint64_t v120 = 0;
              uint64_t v128 = 0;
              uint64_t v117 = 0;
              unint64_t v17 = (const char *)(v20 + 48);
              uint64_t v119 = 30;
              if (!a4) {
                goto LABEL_85;
              }
            }
            else
            {
              uint64_t v119 = *(unsigned __int8 *)(v20 + 48);
              uint64_t v128 = *(void *)(v20 + 56);
              uint64_t v120 = *(void *)(v20 + 64);
              if (v8 < 0x4E)
              {
                uint64_t v117 = 0;
                unint64_t v17 = (const char *)(v20 + 72);
                if (!a4)
                {
LABEL_85:
                  uint64_t v133 = 0;
                  int32x2_t v122 = 0;
                  uint64_t v128 = 0;
                  uint64_t v120 = 0;
LABEL_86:
                  uint64_t v123 = 0;
                  uint64_t v118 = 0;
                  int32x2_t v130 = 0;
                  uint64_t v121 = 0;
                  v124.i8[0] = 0;
                  uint64_t v117 = 0;
                  uint64_t v119 = 0;
                  goto LABEL_87;
                }
              }
              else
              {
                uint64_t v117 = *(unsigned __int8 *)(v20 + 72);
                unint64_t v17 = (const char *)(v20 + 80);
                if (!a4) {
                  goto LABEL_85;
                }
              }
            }
            int32x2_t v122 = *(int32x2_t *)(v20 + 24);
            if (!a5) {
              goto LABEL_87;
            }
            uint64_t v50 = (uint64_t *)GetStream_11288(a5, v133);
            if (v50) {
              uint64_t v133 = *v50;
            }
            else {
              uint64_t v133 = 0;
            }
            uint64_t v54 = a5;
            uint64_t v55 = v128;
LABEL_109:
            uint64_t result = GetStream_11288(v54, v55);
            if (!result)
            {
              uint64_t v128 = 0;
LABEL_87:
              unint64_t v18 = 0;
              uint64_t v111 = 0;
              uint64_t v112 = 0;
              uint64_t v109 = 0;
              uint64_t v110 = 0;
              uint64_t v108 = 0;
              goto LABEL_111;
            }
            unint64_t v18 = 0;
            uint64_t v111 = 0;
            uint64_t v112 = 0;
            uint64_t v109 = 0;
            uint64_t v110 = 0;
            uint64_t v108 = 0;
            uint64_t v128 = *(void *)result;
LABEL_111:
            if (v8 < 0x38)
            {
              v60 = 0;
              uint64_t v61 = 0;
              int32x2_t v62 = 0;
              int32x2_t v63 = 0;
              unint64_t v10 = (unint64_t)v17;
              if (!a4) {
                goto LABEL_134;
              }
              goto LABEL_128;
            }
            uint64_t result = strlen(v17);
            size_t v56 = result;
            if (*v17) {
              __int16 v57 = v17;
            }
            else {
              __int16 v57 = 0;
            }
            if (*v17)
            {
              uint64_t result = strlen(v57);
              uint64_t v58 = a3[52];
              size_t v59 = result + 1;
              if (result != -1)
              {
                v60 = (void *)a3[52];
                goto LABEL_122;
              }
            }
            else
            {
              uint64_t v58 = a3[52];
            }
            size_t v59 = 0;
            v60 = 0;
LABEL_122:
            a3[52] = v58 + v59;
            if (a4) {
              uint64_t result = (size_t)memcpy(v60, v57, v59);
            }
            unint64_t v10 = (unint64_t)&v17[(v56 & 0xFFFFFFFFFFFFFFF8) + 8];
            if (v126 < 0x3D)
            {
              uint64_t v61 = 0;
              int32x2_t v62 = 0;
              int32x2_t v63 = 0;
              if (!a4) {
                goto LABEL_134;
              }
            }
            else
            {
              uint64_t v61 = *(void *)v10;
              int32x2_t v62 = *(int32x2_t *)&v17[(v56 & 0xFFFFFFFFFFFFFFF8) + 16];
              int64x2_t v64 = *(int64x2_t *)(v10 + 16);
              v10 += 32;
              int32x2_t v63 = vmovn_s64(v64);
              if (!a4) {
                goto LABEL_134;
              }
            }
LABEL_128:
            if (a5)
            {
              int32x2_t v106 = v63;
              uint64_t result = GetStream_11288(a5, v61);
              if (result) {
                uint64_t v61 = *(void *)result;
              }
              else {
                uint64_t v61 = 0;
              }
              int32x2_t v63 = v106;
            }
            int32x2_t *v12 = (int32x2_t)v60;
            v12[1] = (int32x2_t)v61;
            v12[2] = v62;
            v12[3] = v63;
            v12[4].i32[0] = v113;
            v12[4].i8[4] = v116;
            v12[4].i8[5] = v115;
            v12[4].i8[6] = v114;
            v12[4].i8[7] = 0;
            v12[5] = (int32x2_t)v133;
            v12[6] = v122;
            v12[7] = (int32x2_t)v128;
            v12[8] = (int32x2_t)v120;
            v12[9] = (int32x2_t)v123;
            v12[10] = (int32x2_t)v118;
            v12[11] = v130;
            v12[12] = (int32x2_t)v121;
            v12[13] = (int32x2_t)(v18 | (v119 << 16) | (v117 << 8) | v124.u8[0]);
            v12[14] = (int32x2_t)v112;
            v12[15] = (int32x2_t)v111;
            v12[16].i8[0] = BYTE4(v110);
            v12[16].i8[1] = v110;
            v12[16].i8[2] = BYTE4(v109);
            v12[16].i8[3] = v109;
            v12[16].i8[4] = BYTE4(v108);
            v12[16].i8[5] = v108;
            v12[16].i16[3] = 0;
LABEL_134:
            ++v11;
            unsigned int v8 = v126;
            if (v11 != v107) {
              continue;
            }
            uint64_t v93 = v103;
            break;
          case 4:
            int32x2_t v24 = *(int32x2_t *)(v10 + 32);
            uint64_t v25 = (uint64_t *)(v10 + 40);
            int32x2_t v122 = v24;
            if (v24)
            {
              uint64_t v133 = a3[43];
              do
              {
                size_t v26 = (uint64_t *)a3[43];
                a3[43] = v26 + 2;
                if (a4)
                {
                  uint64_t v27 = *v25;
                  uint64_t v28 = v25[1];
                  if (a5)
                  {
                    uint64_t result = GetStream_11288(a5, v27);
                    if (result) {
                      uint64_t v27 = *(void *)result;
                    }
                    else {
                      uint64_t v27 = 0;
                    }
                  }
                  *size_t v26 = v27;
                  v26[1] = v28;
                }
                v25 += 2;
                --*(void *)&v24;
              }
              while (v24);
            }
            else
            {
              uint64_t v133 = 0;
            }
            unint64_t v17 = (const char *)(v25 + 3);
            if ((a4 & 1) == 0) {
              goto LABEL_85;
            }
            uint64_t v123 = 0;
            uint64_t v118 = 0;
            int32x2_t v130 = 0;
            uint64_t v121 = 0;
            v124.i8[0] = 0;
            uint64_t v117 = 0;
            uint64_t v119 = 0;
            unint64_t v18 = 0;
            uint64_t v111 = 0;
            uint64_t v112 = 0;
            uint64_t v109 = 0;
            uint64_t v110 = 0;
            uint64_t v108 = 0;
            uint64_t v128 = v25[2];
            uint64_t v120 = v25[1];
            goto LABEL_111;
          case 5:
            unint64_t v17 = (const char *)(v10 + 168);
            if (!a4) {
              goto LABEL_85;
            }
            uint64_t v29 = *(void *)(v10 + 32);
            v124.i64[0] = *(void *)(v10 + 80);
            uint64_t result = *(unsigned __int8 *)(v10 + 144);
            uint64_t v121 = *(void *)(v10 + 56);
            int32x2_t v122 = *(int32x2_t *)(v10 + 40);
            uint64_t v120 = *(void *)(v10 + 72);
            uint64_t v128 = *(void *)(v10 + 64);
            uint64_t v118 = *(void *)(v10 + 96);
            uint64_t v123 = *(void *)(v10 + 88);
            uint64_t v111 = *(void *)(v10 + 104);
            uint64_t v112 = *(void *)(v10 + 112);
            LOBYTE(v110) = *(unsigned char *)(v10 + 152);
            BYTE4(v110) = *(unsigned char *)(v10 + 120);
            LOBYTE(v109) = *(unsigned char *)(v10 + 160);
            BYTE4(v109) = *(unsigned char *)(v10 + 144);
            LOBYTE(v108) = *(unsigned char *)(v10 + 128);
            BYTE4(v108) = *(unsigned char *)(v10 + 136);
            if (!a5)
            {
              int32x2_t v130 = *(int32x2_t *)(v10 + 48);
              uint64_t v133 = *(void *)(v10 + 32);
              goto LABEL_106;
            }
            uint64_t v30 = *(void *)(v10 + 48);
            uint64_t v31 = (uint64_t *)GetStream_11288(a5, v29);
            if (v31) {
              uint64_t v32 = *v31;
            }
            else {
              uint64_t v32 = 0;
            }
            uint64_t v51 = (int32x2_t *)GetStream_11288(a5, v30);
            if (v51) {
              int32x2_t v130 = *v51;
            }
            else {
              int32x2_t v130 = 0;
            }
            uint64_t v133 = v32;
            uint64_t v47 = a5;
            uint64_t v46 = v123;
            goto LABEL_103;
          case 6:
            int32x2_t v33 = *(int32x2_t *)(v10 + 32);
            uint64_t v34 = (uint64_t *)(v10 + 40);
            int32x2_t v122 = v33;
            if (v33)
            {
              uint64_t v134 = a3[43];
              do
              {
                uint64_t v35 = (uint64_t *)a3[43];
                a3[43] = v35 + 2;
                if (a4)
                {
                  uint64_t v36 = *v34;
                  uint64_t v37 = v34[1];
                  if (a5)
                  {
                    uint64_t result = GetStream_11288(a5, v36);
                    if (result) {
                      uint64_t v36 = *(void *)result;
                    }
                    else {
                      uint64_t v36 = 0;
                    }
                  }
                  *uint64_t v35 = v36;
                  v35[1] = v37;
                }
                v34 += 2;
                --*(void *)&v33;
              }
              while (v33);
              uint64_t v38 = v134;
            }
            else
            {
              uint64_t v38 = 0;
            }
            uint64_t v41 = *v34;
            size_t v39 = v34 + 1;
            uint64_t v40 = v41;
            uint64_t v133 = v38;
            uint64_t v121 = v41;
            if (v41)
            {
              int32x2_t v131 = (int32x2_t)a3[43];
              do
              {
                v42 = (uint64_t *)a3[43];
                a3[43] = v42 + 2;
                if (a4)
                {
                  uint64_t v43 = *v39;
                  uint64_t v44 = v39[1];
                  if (a5)
                  {
                    uint64_t result = GetStream_11288(a5, v43);
                    if (result) {
                      uint64_t v43 = *(void *)result;
                    }
                    else {
                      uint64_t v43 = 0;
                    }
                  }
                  uint64_t *v42 = v43;
                  v42[1] = v44;
                }
                v39 += 2;
                --v40;
              }
              while (v40);
              int32x2_t v45 = v131;
            }
            else
            {
              int32x2_t v45 = 0;
            }
            unint64_t v17 = (const char *)(v39 + 13);
            if ((a4 & 1) == 0) {
              goto LABEL_85;
            }
            uint64_t v128 = *v39;
            v124.i64[0] = v39[2];
            uint64_t v46 = v39[3];
            uint64_t v118 = v39[4];
            BYTE4(v110) = *((unsigned char *)v39 + 48);
            LOBYTE(v108) = *((unsigned char *)v39 + 56);
            BYTE4(v108) = *((unsigned char *)v39 + 64);
            uint64_t v111 = v39[5];
            uint64_t v112 = v39[9];
            BYTE4(v109) = *((unsigned char *)v39 + 80);
            LOBYTE(v110) = *((unsigned char *)v39 + 88);
            LOBYTE(v109) = *((unsigned char *)v39 + 96);
            int32x2_t v130 = v45;
            uint64_t v120 = v39[1];
            if (a5)
            {
              uint64_t v47 = a5;
LABEL_103:
              uint64_t result = GetStream_11288(v47, v46);
              if (result) {
                uint64_t v123 = *(void *)result;
              }
              else {
                uint64_t v123 = 0;
              }
            }
            else
            {
              uint64_t v123 = v39[3];
            }
LABEL_106:
            uint64_t v117 = v124.u8[1];
            uint64_t v119 = v124.u8[2];
            unint64_t v18 = v124.i64[0] & 0xFFFFFFFFFF000000;
            goto LABEL_111;
          default:
            uint64_t v133 = 0;
            int32x2_t v122 = 0;
            uint64_t v128 = 0;
            uint64_t v120 = 0;
            uint64_t v123 = 0;
            uint64_t v118 = 0;
            int32x2_t v130 = 0;
            uint64_t v121 = 0;
            v124.i8[0] = 0;
            uint64_t v117 = 0;
            uint64_t v119 = 0;
            unint64_t v18 = 0;
            uint64_t v111 = 0;
            uint64_t v112 = 0;
            uint64_t v109 = 0;
            uint64_t v110 = 0;
            uint64_t v108 = 0;
            unint64_t v17 = (const char *)(v10 + 32);
            goto LABEL_111;
        }
        break;
      }
    }
    else
    {
      uint64_t v93 = 0;
    }
    if (v8 > 0x38)
    {
      LODWORD(v90) = *(_DWORD *)v10;
      LODWORD(v92) = *(_DWORD *)(v10 + 8);
      LOBYTE(v88) = *(unsigned char *)(v10 + 16);
      LOBYTE(v89) = *(unsigned char *)(v10 + 24);
      LODWORD(v91) = *(_DWORD *)(v10 + 32);
      if ((a4 & 1) == 0) {
        goto LABEL_193;
      }
      goto LABEL_168;
    }
    LODWORD(v92) = 0;
    LODWORD(v90) = 0;
    LOBYTE(v89) = 0;
    LOBYTE(v88) = 0;
    LODWORD(v91) = 1;
    if (a4)
    {
LABEL_168:
      char v67 = 0;
      char v66 = 0;
      char v78 = 0;
      int v79 = 0;
      unint64_t v80 = 0;
      LOBYTE(v81) = 0;
      LOBYTE(v82) = 0;
      LOBYTE(v65) = 0;
      LODWORD(v83) = 0;
      LODWORD(v69) = 0;
      LODWORD(v84) = 0;
      LODWORD(v70) = 0;
      uint64_t v85 = 0;
      uint64_t v86 = 0;
      LOWORD(v87) = 0;
      goto LABEL_169;
    }
  }
  else if (a4)
  {
    char v67 = 0;
    char v66 = 0;
    char v78 = 0;
    int v79 = 0;
    unint64_t v80 = 0;
    LOBYTE(v81) = 0;
    LOBYTE(v82) = 0;
    LOBYTE(v65) = 0;
    LODWORD(v83) = 0;
    LODWORD(v69) = 0;
    LODWORD(v84) = 0;
    LODWORD(v70) = 0;
    uint64_t v85 = 0;
    uint64_t v86 = 0;
    LOWORD(v87) = 0;
    LOBYTE(v88) = 0;
    LOBYTE(v89) = 0;
    LODWORD(v90) = 0;
    LODWORD(v91) = 0;
    LODWORD(v92) = 0;
    uint64_t v107 = 0;
    uint64_t v93 = 0;
LABEL_169:
    int32x2_t v98 = 0;
LABEL_179:
    uint64_t result = v104;
LABEL_192:
    uint64_t v102 = a3[10];
    *(unsigned char *)uint64_t v102 = v105;
    *(unsigned char *)(v102 + 1) = result;
    *(_DWORD *)(v102 + 2) = 0;
    *(_WORD *)(v102 + 6) = 0;
    *(void *)(v102 + 8) = v93;
    *(void *)(v102 + 16) = v107;
    *(_DWORD *)(v102 + 24) = v92;
    *(_DWORD *)(v102 + 28) = v91;
    *(_DWORD *)(v102 + 32) = v90;
    *(unsigned char *)(v102 + 36) = v89;
    *(unsigned char *)(v102 + 37) = v88;
    *(_WORD *)(v102 + 38) = v87;
    *(void *)(v102 + 40) = v86;
    *(void *)(v102 + 48) = v85;
    *(void *)(v102 + 56) = v70 | ((unint64_t)v84 << 32);
    *(void *)(v102 + 64) = v69 | ((unint64_t)v83 << 32);
    *(void *)(v102 + 72) = ((unint64_t)v81 << 16) | v80 | ((unint64_t)v82 << 8) | v65;
    *(int32x2_t *)(v102 + 80) = v98;
    *(_DWORD *)(v102 + 88) = v79;
    *(unsigned char *)(v102 + 92) = v78;
    *(unsigned char *)(v102 + 93) = v66;
    *(unsigned char *)(v102 + 94) = v67;
    *(unsigned char *)(v102 + 95) = 0;
  }
LABEL_193:
  a3[10] += 96;
  return result;
}

uint64_t EncodeDYMTLAccelerationStructureDescriptor(unsigned __int8 *a1, void *a2, unint64_t a3, uint64_t a4)
{
  v201 = a2;
  unint64_t v203 = a3;
  if (a3 >= 8)
  {
    *a2 = 81;
    if (a3 >= 0x10)
    {
      a2[1] = *a1;
      if (a3 >= 0x18) {
        a2[2] = a1[1];
      }
    }
  }
  uint64_t result = 24;
  uint64_t v202 = 24;
  int v7 = *a1;
  switch(v7)
  {
    case 3:
      uint64_t v207 = *((void *)a1 + 1);
      entry = find_entry(a4, &v207, 8uLL, 0);
      if (*entry) {
        uint64_t v152 = *(void *)(*entry + 32);
      }
      else {
        uint64_t v152 = 0;
      }
      unint64_t v176 = v203;
      uint64_t v177 = v202 + 8;
      if (v202 + 8 <= v203)
      {
        *(void *)((char *)v201 + v202) = *(void *)(v152 + 8);
        unint64_t v176 = v203;
        uint64_t v177 = v202 + 8;
      }
      uint64_t v202 = v177;
      uint64_t v178 = v177 + 8;
      if (v177 + 8 <= v176)
      {
        *(void *)((char *)v201 + v177) = *((void *)a1 + 2);
        uint64_t v178 = v202 + 8;
      }
      uint64_t v202 = v178;
      uint64_t v206 = *((void *)a1 + 3);
      v179 = find_entry(a4, &v206, 8uLL, 0);
      if (*v179) {
        uint64_t v180 = *(void *)(*v179 + 32);
      }
      else {
        uint64_t v180 = 0;
      }
      unint64_t v181 = v203;
      uint64_t v182 = v202 + 8;
      if (v202 + 8 <= v203)
      {
        *(void *)((char *)v201 + v202) = *(void *)(v180 + 8);
        unint64_t v181 = v203;
        uint64_t v182 = v202 + 8;
      }
      uint64_t v202 = v182;
      uint64_t v183 = v182 + 8;
      if (v182 + 8 <= v181)
      {
        *(void *)((char *)v201 + v182) = *((void *)a1 + 4);
        uint64_t v183 = v202 + 8;
      }
      uint64_t v202 = v183;
      uint64_t v205 = *((void *)a1 + 5);
      v184 = find_entry(a4, &v205, 8uLL, 0);
      if (*v184 && (uint64_t v185 = *(void *)(*v184 + 32)) != 0) {
        uint64_t v186 = *(void *)(v185 + 8);
      }
      else {
        uint64_t v186 = 0;
      }
      unint64_t v187 = v203;
      uint64_t v188 = v202 + 8;
      if (v202 + 8 <= v203)
      {
        *(void *)((char *)v201 + v202) = v186;
        unint64_t v187 = v203;
        uint64_t v188 = v202 + 8;
      }
      uint64_t v202 = v188;
      uint64_t v189 = v188 + 8;
      if (v188 + 8 <= v187)
      {
        *(void *)((char *)v201 + v188) = *((void *)a1 + 6);
        uint64_t v189 = v202 + 8;
      }
      uint64_t v202 = v189;
      uint64_t v204 = *((void *)a1 + 7);
      v190 = find_entry(a4, &v204, 8uLL, 0);
      if (*v190 && (uint64_t v191 = *(void *)(*v190 + 32)) != 0) {
        uint64_t v192 = *(void *)(v191 + 8);
      }
      else {
        uint64_t v192 = 0;
      }
      unint64_t v193 = v203;
      uint64_t v194 = v202 + 8;
      if (v202 + 8 <= v203)
      {
        *(void *)((char *)v201 + v202) = v192;
        unint64_t v193 = v203;
        uint64_t v194 = v202 + 8;
      }
      uint64_t v202 = v194;
      uint64_t v195 = v194 + 8;
      if (v194 + 8 <= v193)
      {
        *(void *)((char *)v201 + v194) = *((void *)a1 + 8);
        unint64_t v193 = v203;
        uint64_t v195 = v202 + 8;
      }
      uint64_t v202 = v195;
      uint64_t v196 = v195 + 8;
      if (v195 + 8 <= v193)
      {
        *(void *)((char *)v201 + v195) = *((unsigned int *)a1 + 20);
        unint64_t v193 = v203;
        uint64_t v196 = v202 + 8;
      }
      uint64_t v202 = v196;
      uint64_t v197 = v196 + 8;
      if (v196 + 8 <= v193)
      {
        *(void *)((char *)v201 + v196) = *((unsigned int *)a1 + 21);
        unint64_t v193 = v203;
        uint64_t v197 = v202 + 8;
      }
      uint64_t v202 = v197;
      uint64_t v198 = v197 + 8;
      if (v197 + 8 <= v193)
      {
        *(void *)((char *)v201 + v197) = *((unsigned int *)a1 + 22);
        unint64_t v193 = v203;
        uint64_t v198 = v202 + 8;
      }
      uint64_t v202 = v198;
      uint64_t v199 = v198 + 8;
      if (v198 + 8 <= v193)
      {
        *(void *)((char *)v201 + v198) = a1[92];
        unint64_t v193 = v203;
        uint64_t v199 = v202 + 8;
      }
      uint64_t v202 = v199;
      uint64_t v200 = v199 + 8;
      if (v199 + 8 <= v193)
      {
        *(void *)((char *)v201 + v199) = *((void *)a1 + 9);
        unint64_t v193 = v203;
        uint64_t v200 = v202 + 8;
      }
      uint64_t v202 = v200;
      uint64_t v174 = v200 + 8;
      if (v200 + 8 <= v193)
      {
        *(void *)((char *)v201 + v200) = a1[93];
        unint64_t v193 = v203;
        uint64_t v174 = v202 + 8;
      }
      uint64_t v202 = v174;
      uint64_t result = v174 + 8;
      if (v174 + 8 > v193) {
        return result;
      }
      uint64_t v175 = a1[94];
LABEL_314:
      *(void *)((char *)v201 + v174) = v175;
      return v202 + 8;
    case 2:
      uint64_t v207 = *((void *)a1 + 2);
      v153 = find_entry(a4, &v207, 8uLL, 0);
      if (*v153 && (uint64_t v154 = *(void *)(*v153 + 32)) != 0) {
        uint64_t v155 = *(void *)(v154 + 8);
      }
      else {
        uint64_t v155 = 0;
      }
      unint64_t v156 = v203;
      uint64_t v157 = v202 + 8;
      if (v202 + 8 <= v203)
      {
        *(void *)((char *)v201 + v202) = v155;
        unint64_t v156 = v203;
        uint64_t v157 = v202 + 8;
      }
      uint64_t v202 = v157;
      uint64_t v158 = v157 + 8;
      if (v157 + 8 <= v156)
      {
        *(void *)((char *)v201 + v157) = *((void *)a1 + 4);
        unint64_t v156 = v203;
        uint64_t v158 = v202 + 8;
      }
      uint64_t v202 = v158;
      uint64_t v159 = v158 + 8;
      if (v158 + 8 <= v156)
      {
        *(void *)((char *)v201 + v158) = *((unsigned int *)a1 + 15);
        unint64_t v156 = v203;
        uint64_t v159 = v202 + 8;
      }
      uint64_t v202 = v159;
      uint64_t v160 = v159 + 8;
      if (v159 + 8 <= v156)
      {
        *(void *)((char *)v201 + v159) = *((unsigned int *)a1 + 16);
        unint64_t v156 = v203;
        uint64_t v160 = v202 + 8;
      }
      uint64_t v202 = v160;
      uint64_t v161 = *((unsigned int *)a1 + 14);
      uint64_t v162 = v160 + 8;
      if (v160 + 8 <= v156)
      {
        *(void *)((char *)v201 + v160) = v161;
        uint64_t v162 = v202 + 8;
        LODWORD(v161) = *((_DWORD *)a1 + 14);
      }
      uint64_t v202 = v162;
      if (v161)
      {
        unint64_t v163 = 0;
        do
        {
          uint64_t v206 = *(void *)(*((void *)a1 + 1) + 8 * v163);
          uint64_t v164 = *find_entry(a4, &v206, 8uLL, 0);
          if (v164) {
            uint64_t v164 = *(void *)(v164 + 32);
          }
          uint64_t v162 = v202 + 8;
          if (v202 + 8 <= v203)
          {
            *(void *)((char *)v201 + v202) = *(void *)(v164 + 8);
            uint64_t v162 = v202 + 8;
          }
          uint64_t v202 = v162;
          ++v163;
        }
        while (v163 < *((unsigned int *)a1 + 14));
      }
      uint64_t v165 = v162 + 8;
      if (v162 + 8 <= v203)
      {
        *(void *)((char *)v201 + v162) = a1[72];
        uint64_t v165 = v202 + 8;
      }
      uint64_t v202 = v165;
      uint64_t v205 = *((void *)a1 + 3);
      v166 = find_entry(a4, &v205, 8uLL, 0);
      if (*v166 && (uint64_t v167 = *(void *)(*v166 + 32)) != 0) {
        uint64_t v168 = *(void *)(v167 + 8);
      }
      else {
        uint64_t v168 = 0;
      }
      unint64_t v169 = v203;
      uint64_t v170 = v202 + 8;
      if (v202 + 8 <= v203)
      {
        *(void *)((char *)v201 + v202) = v168;
        unint64_t v169 = v203;
        uint64_t v170 = v202 + 8;
      }
      uint64_t v202 = v170;
      uint64_t v171 = v170 + 8;
      if (v170 + 8 <= v169)
      {
        *(void *)((char *)v201 + v170) = *((void *)a1 + 5);
        unint64_t v169 = v203;
        uint64_t v171 = v202 + 8;
      }
      uint64_t v202 = v171;
      uint64_t v172 = v171 + 8;
      if (v171 + 8 <= v169)
      {
        *(void *)((char *)v201 + v171) = *((unsigned int *)a1 + 17);
        unint64_t v169 = v203;
        uint64_t v172 = v202 + 8;
      }
      uint64_t v202 = v172;
      uint64_t v173 = v172 + 8;
      if (v172 + 8 <= v169)
      {
        *(void *)((char *)v201 + v172) = *((void *)a1 + 6);
        unint64_t v169 = v203;
        uint64_t v173 = v202 + 8;
      }
      uint64_t v202 = v173;
      uint64_t v174 = v173 + 8;
      if (v173 + 8 <= v169)
      {
        *(void *)((char *)v201 + v173) = a1[73];
        unint64_t v169 = v203;
        uint64_t v174 = v202 + 8;
      }
      uint64_t v202 = v174;
      uint64_t result = v174 + 8;
      if (v174 + 8 > v169) {
        return result;
      }
      uint64_t v175 = a1[74];
      goto LABEL_314;
    case 1:
      uint64_t v8 = *((void *)a1 + 2);
      if (a3 >= 0x20)
      {
        a2[3] = v8;
        uint64_t v8 = *((void *)a1 + 2);
      }
      uint64_t v9 = 32;
      uint64_t v202 = 32;
      if (v8)
      {
        unint64_t v10 = 0;
        uint64_t v9 = 32;
        do
        {
          uint64_t v11 = *((void *)a1 + 1);
          uint64_t v12 = v11 + 136 * v10;
          uint64_t v13 = (unsigned char *)(v12 + 36);
          uint64_t v14 = v9 + 8;
          unint64_t v15 = v203;
          if (v9 + 8 <= v203)
          {
            *(void *)((char *)v201 + v9) = *v13;
            unint64_t v15 = v203;
            uint64_t v14 = v202 + 8;
          }
          uint64_t v202 = v14;
          uint64_t v16 = v14 + 8;
          if (v14 + 8 <= v15)
          {
            *(void *)((char *)v201 + v14) = *(unsigned int *)(v11 + 136 * v10 + 32);
            unint64_t v15 = v203;
            uint64_t v16 = v202 + 8;
          }
          uint64_t v202 = v16;
          uint64_t v17 = v16 + 8;
          if (v16 + 8 <= v15)
          {
            *(void *)((char *)v201 + v16) = *(unsigned __int8 *)(v11 + 136 * v10 + 37);
            unint64_t v15 = v203;
            uint64_t v17 = v202 + 8;
          }
          uint64_t v202 = v17;
          uint64_t v18 = v17 + 8;
          if (v17 + 8 <= v15)
          {
            *(void *)((char *)v201 + v17) = *(unsigned __int8 *)(v11 + 136 * v10 + 38);
            uint64_t v18 = v202 + 8;
          }
          uint64_t v202 = v18;
          switch(*v13)
          {
            case 1:
              uint64_t v19 = v11 + 136 * v10;
              uint64_t v207 = *(void *)(v19 + 80);
              unint64_t v20 = find_entry(a4, &v207, 8uLL, 0);
              if (*v20 && (uint64_t v21 = *(void *)(*v20 + 32)) != 0) {
                uint64_t v22 = *(void *)(v21 + 8);
              }
              else {
                uint64_t v22 = 0;
              }
              unint64_t v71 = v203;
              uint64_t v72 = v202 + 8;
              if (v202 + 8 <= v203)
              {
                *(void *)((char *)v201 + v202) = v22;
                unint64_t v71 = v203;
                uint64_t v72 = v202 + 8;
              }
              uint64_t v202 = v72;
              uint64_t v73 = v72 + 8;
              if (v72 + 8 <= v71)
              {
                *(void *)((char *)v201 + v72) = *(void *)(v11 + 136 * v10 + 88);
                unint64_t v71 = v203;
                uint64_t v73 = v202 + 8;
              }
              uint64_t v202 = v73;
              uint64_t v74 = v73 + 8;
              if (v73 + 8 <= v71)
              {
                *(void *)((char *)v201 + v73) = *(void *)(v11 + 136 * v10 + 96);
                uint64_t v74 = v202 + 8;
              }
              uint64_t v202 = v74;
              uint64_t v206 = *(void *)(v19 + 40);
              uint64_t v75 = find_entry(a4, &v206, 8uLL, 0);
              if (*v75 && (uint64_t v76 = *(void *)(*v75 + 32)) != 0) {
                uint64_t v77 = *(void *)(v76 + 8);
              }
              else {
                uint64_t v77 = 0;
              }
              unint64_t v83 = v203;
              uint64_t v84 = v202 + 8;
              if (v202 + 8 <= v203)
              {
                *(void *)((char *)v201 + v202) = v77;
                unint64_t v83 = v203;
                uint64_t v84 = v202 + 8;
              }
              uint64_t v202 = v84;
              uint64_t v85 = v84 + 8;
              if (v84 + 8 <= v83)
              {
                *(void *)((char *)v201 + v84) = *(void *)(v11 + 136 * v10 + 48);
                unint64_t v83 = v203;
                uint64_t v85 = v202 + 8;
              }
              uint64_t v202 = v85;
              uint64_t v86 = v85 + 8;
              if (v85 + 8 <= v83)
              {
                *(void *)((char *)v201 + v85) = *(unsigned __int8 *)(v11 + 136 * v10 + 104);
                unint64_t v83 = v203;
                uint64_t v86 = v202 + 8;
              }
              uint64_t v202 = v86;
              uint64_t v87 = v86 + 8;
              if (v86 + 8 <= v83)
              {
                *(void *)((char *)v201 + v86) = *(void *)(v11 + 136 * v10 + 72);
                unint64_t v83 = v203;
                uint64_t v87 = v202 + 8;
              }
              uint64_t v202 = v87;
              uint64_t v88 = v87 + 8;
              if (v87 + 8 <= v83)
              {
                *(void *)((char *)v201 + v87) = *(unsigned __int8 *)(v12 + 106);
                uint64_t v88 = v202 + 8;
              }
              uint64_t v202 = v88;
              uint64_t v205 = *(void *)(v11 + 136 * v10 + 56);
              unint64_t v89 = find_entry(a4, &v205, 8uLL, 0);
              if (*v89 && (uint64_t v90 = *(void *)(*v89 + 32)) != 0) {
                uint64_t v91 = *(void *)(v90 + 8);
              }
              else {
                uint64_t v91 = 0;
              }
              unint64_t v92 = v203;
              uint64_t v93 = v202 + 8;
              if (v202 + 8 > v203) {
                goto LABEL_157;
              }
              *(void *)((char *)v201 + v202) = v91;
              goto LABEL_156;
            case 2:
              uint64_t v207 = *(void *)(v11 + 136 * v10 + 40);
              uint64_t v23 = find_entry(a4, &v207, 8uLL, 0);
              if (*v23 && (uint64_t v24 = *(void *)(*v23 + 32)) != 0) {
                uint64_t v25 = *(void *)(v24 + 8);
              }
              else {
                uint64_t v25 = 0;
              }
              unint64_t v78 = v203;
              uint64_t v79 = v202 + 8;
              if (v202 + 8 <= v203)
              {
                *(void *)((char *)v201 + v202) = v25;
                unint64_t v78 = v203;
                uint64_t v79 = v202 + 8;
              }
              uint64_t v202 = v79;
              uint64_t v80 = v79 + 8;
              if (v79 + 8 <= v78)
              {
                *(void *)((char *)v201 + v79) = *(void *)(v11 + 136 * v10 + 48);
                unint64_t v78 = v203;
                uint64_t v80 = v202 + 8;
              }
              uint64_t v202 = v80;
              uint64_t v81 = v80 + 8;
              if (v80 + 8 <= v78)
              {
                *(void *)((char *)v201 + v80) = *(void *)(v11 + 136 * v10 + 64);
                unint64_t v78 = v203;
                uint64_t v81 = v202 + 8;
              }
              uint64_t v202 = v81;
              uint64_t v48 = v81 + 8;
              if (v81 + 8 > v78) {
                goto LABEL_152;
              }
              uint64_t v82 = *(void *)(v11 + 136 * v10 + 56);
              goto LABEL_150;
            case 3:
              uint64_t v26 = v11 + 136 * v10;
              unint64_t v29 = *(void *)(v26 + 88);
              uint64_t v28 = (unint64_t *)(v26 + 88);
              unint64_t v27 = v29;
              uint64_t v30 = v18 + 8;
              if (v18 + 8 <= v203)
              {
                *(void *)((char *)v201 + v18) = v27;
                uint64_t v30 = v202 + 8;
                unint64_t v27 = *v28;
              }
              uint64_t v202 = v30;
              if (v27)
              {
                uint64_t v31 = 0;
                unint64_t v32 = 0;
                do
                {
                  SaveDYMTLMotionKeyframeData(&v201, (uint64_t *)(*(void *)(v11 + 136 * v10 + 80) + v31), a4);
                  ++v32;
                  v31 += 16;
                }
                while (*v28 > v32);
                uint64_t v30 = v202;
              }
              uint64_t v33 = v30 + 8;
              unint64_t v34 = v203;
              if (v30 + 8 <= v203)
              {
                *(void *)((char *)v201 + v30) = 0;
                unint64_t v34 = v203;
                uint64_t v33 = v202 + 8;
              }
              uint64_t v202 = v33;
              uint64_t v35 = v33 + 8;
              if (v33 + 8 <= v34)
              {
                *(void *)((char *)v201 + v33) = *(void *)(v11 + 136 * v10 + 96);
                uint64_t v35 = v202 + 8;
              }
              uint64_t v202 = v35;
              uint64_t v207 = *(v28 - 6);
              uint64_t v36 = find_entry(a4, &v207, 8uLL, 0);
              if (*v36) {
                uint64_t v37 = *(void *)(*v36 + 32);
              }
              else {
                uint64_t v37 = 0;
              }
              unint64_t v94 = v203;
              uint64_t v95 = v202 + 8;
              if (v202 + 8 <= v203)
              {
                *(void *)((char *)v201 + v202) = *(void *)(v37 + 8);
                unint64_t v94 = v203;
                uint64_t v95 = v202 + 8;
              }
              uint64_t v202 = v95;
              uint64_t v96 = v95 + 8;
              if (v95 + 8 <= v94)
              {
                *(void *)((char *)v201 + v95) = *(void *)(v11 + 136 * v10 + 48);
                unint64_t v94 = v203;
                uint64_t v96 = v202 + 8;
              }
              uint64_t v202 = v96;
              uint64_t v97 = v96 + 8;
              if (v96 + 8 <= v94)
              {
                *(void *)((char *)v201 + v96) = *(unsigned __int8 *)(v11 + 136 * v10 + 104);
                unint64_t v94 = v203;
                uint64_t v97 = v202 + 8;
              }
              uint64_t v202 = v97;
              uint64_t v98 = v97 + 8;
              if (v97 + 8 <= v94)
              {
                *(void *)((char *)v201 + v97) = *(void *)(v11 + 136 * v10 + 72);
                unint64_t v94 = v203;
                uint64_t v98 = v202 + 8;
              }
              uint64_t v202 = v98;
              uint64_t v99 = v98 + 8;
              if (v98 + 8 <= v94)
              {
                *(void *)((char *)v201 + v98) = *(unsigned __int8 *)(v12 + 106);
                uint64_t v99 = v202 + 8;
              }
              uint64_t v202 = v99;
              uint64_t v206 = *(void *)(v11 + 136 * v10 + 56);
              v100 = find_entry(a4, &v206, 8uLL, 0);
              if (*v100) {
                uint64_t v101 = *(void *)(*v100 + 32);
              }
              else {
                uint64_t v101 = 0;
              }
              unint64_t v92 = v203;
              uint64_t v93 = v202 + 8;
              if (v202 + 8 <= v203)
              {
                *(void *)((char *)v201 + v202) = *(void *)(v101 + 8);
LABEL_156:
                unint64_t v92 = v203;
                uint64_t v93 = v202 + 8;
              }
LABEL_157:
              uint64_t v202 = v93;
              uint64_t v116 = v93 + 8;
              if (v93 + 8 <= v92)
              {
                *(void *)((char *)v201 + v93) = *(void *)(v11 + 136 * v10 + 64);
                unint64_t v92 = v203;
                uint64_t v116 = v202 + 8;
              }
              uint64_t v202 = v116;
              uint64_t v117 = v116 + 8;
              if (v116 + 8 > v92) {
                goto LABEL_196;
              }
              uint64_t v118 = *(unsigned __int8 *)(v12 + 105);
              goto LABEL_195;
            case 4:
              uint64_t v38 = v11 + 136 * v10;
              unint64_t v41 = *(void *)(v38 + 48);
              uint64_t v40 = (unint64_t *)(v38 + 48);
              unint64_t v39 = v41;
              uint64_t v42 = v18 + 8;
              if (v18 + 8 <= v203)
              {
                *(void *)((char *)v201 + v18) = v39;
                uint64_t v42 = v202 + 8;
                unint64_t v39 = *v40;
              }
              uint64_t v202 = v42;
              if (v39)
              {
                uint64_t v43 = 0;
                unint64_t v44 = 0;
                do
                {
                  SaveDYMTLMotionKeyframeData(&v201, (uint64_t *)(*(v40 - 1) + v43), a4);
                  ++v44;
                  v43 += 16;
                }
                while (*v40 > v44);
                uint64_t v42 = v202;
              }
              uint64_t v45 = v42 + 8;
              unint64_t v46 = v203;
              if (v42 + 8 <= v203)
              {
                *(void *)((char *)v201 + v42) = 0;
                unint64_t v46 = v203;
                uint64_t v45 = v202 + 8;
              }
              uint64_t v202 = v45;
              uint64_t v47 = v45 + 8;
              if (v45 + 8 <= v46)
              {
                *(void *)((char *)v201 + v45) = *(void *)(v11 + 136 * v10 + 64);
                unint64_t v46 = v203;
                uint64_t v47 = v202 + 8;
              }
              uint64_t v202 = v47;
              uint64_t v48 = v47 + 8;
              if (v47 + 8 > v46) {
                goto LABEL_152;
              }
              *(void *)((char *)v201 + v47) = *(void *)(v11 + 136 * v10 + 56);
              goto LABEL_151;
            case 5:
              uint64_t v207 = *(void *)(v11 + 136 * v10 + 40);
              uint64_t v49 = find_entry(a4, &v207, 8uLL, 0);
              if (*v49) {
                uint64_t v50 = *(void *)(*v49 + 32);
              }
              else {
                uint64_t v50 = 0;
              }
              unint64_t v102 = v203;
              uint64_t v103 = v202 + 8;
              if (v202 + 8 <= v203)
              {
                *(void *)((char *)v201 + v202) = *(void *)(v50 + 8);
                unint64_t v102 = v203;
                uint64_t v103 = v202 + 8;
              }
              uint64_t v202 = v103;
              uint64_t v104 = v103 + 8;
              if (v103 + 8 <= v102)
              {
                *(void *)((char *)v201 + v103) = *(void *)(v11 + 136 * v10 + 48);
                uint64_t v104 = v202 + 8;
              }
              uint64_t v202 = v104;
              uint64_t v206 = *(void *)(v11 + 136 * v10 + 88);
              char v105 = find_entry(a4, &v206, 8uLL, 0);
              if (*v105) {
                uint64_t v106 = *(void *)(*v105 + 32);
              }
              else {
                uint64_t v106 = 0;
              }
              unint64_t v119 = v203;
              uint64_t v120 = v202 + 8;
              if (v202 + 8 <= v203)
              {
                *(void *)((char *)v201 + v202) = *(void *)(v106 + 8);
                unint64_t v119 = v203;
                uint64_t v120 = v202 + 8;
              }
              uint64_t v202 = v120;
              uint64_t v121 = v120 + 8;
              if (v120 + 8 <= v119)
              {
                *(void *)((char *)v201 + v120) = *(void *)(v11 + 136 * v10 + 96);
                unint64_t v119 = v203;
                uint64_t v121 = v202 + 8;
              }
              uint64_t v202 = v121;
              uint64_t v122 = v121 + 8;
              if (v121 + 8 <= v119)
              {
                *(void *)((char *)v201 + v121) = *(void *)(v11 + 136 * v10 + 56);
                unint64_t v119 = v203;
                uint64_t v122 = v202 + 8;
              }
              uint64_t v202 = v122;
              uint64_t v123 = v122 + 8;
              if (v122 + 8 <= v119)
              {
                *(void *)((char *)v201 + v122) = *(void *)(v11 + 136 * v10 + 64);
                unint64_t v119 = v203;
                uint64_t v123 = v202 + 8;
              }
              uint64_t v202 = v123;
              uint64_t v124 = v123 + 8;
              if (v123 + 8 <= v119)
              {
                *(void *)((char *)v201 + v123) = *(void *)(v11 + 136 * v10 + 104);
                uint64_t v124 = v202 + 8;
              }
              uint64_t v202 = v124;
              uint64_t v205 = *(void *)(v11 + 136 * v10 + 72);
              int64x2_t v125 = find_entry(a4, &v205, 8uLL, 0);
              if (*v125) {
                uint64_t v126 = *(void *)(*v125 + 32);
              }
              else {
                uint64_t v126 = 0;
              }
              unint64_t v127 = v203;
              uint64_t v128 = v202 + 8;
              if (v202 + 8 <= v203)
              {
                *(void *)((char *)v201 + v202) = *(void *)(v126 + 8);
                unint64_t v127 = v203;
                uint64_t v128 = v202 + 8;
              }
              uint64_t v202 = v128;
              uint64_t v129 = v128 + 8;
              if (v128 + 8 <= v127)
              {
                *(void *)((char *)v201 + v128) = *(void *)(v11 + 136 * v10 + 80);
                unint64_t v127 = v203;
                uint64_t v129 = v202 + 8;
              }
              uint64_t v202 = v129;
              uint64_t v130 = v129 + 8;
              if (v129 + 8 <= v127)
              {
                *(void *)((char *)v201 + v129) = *(void *)(v11 + 136 * v10 + 120);
                unint64_t v127 = v203;
                uint64_t v130 = v202 + 8;
              }
              uint64_t v202 = v130;
              uint64_t v131 = v130 + 8;
              if (v130 + 8 <= v127)
              {
                *(void *)((char *)v201 + v130) = *(void *)(v11 + 136 * v10 + 112);
                unint64_t v127 = v203;
                uint64_t v131 = v202 + 8;
              }
              uint64_t v202 = v131;
              uint64_t v132 = v131 + 8;
              if (v131 + 8 <= v127)
              {
                *(void *)((char *)v201 + v131) = *(unsigned __int8 *)(v11 + 136 * v10 + 128);
                unint64_t v127 = v203;
                uint64_t v132 = v202 + 8;
              }
              uint64_t v202 = v132;
              uint64_t v133 = v132 + 8;
              if (v132 + 8 <= v127)
              {
                *(void *)((char *)v201 + v132) = *(unsigned __int8 *)(v11 + 136 * v10 + 133);
                unint64_t v127 = v203;
                uint64_t v133 = v202 + 8;
              }
              uint64_t v202 = v133;
              uint64_t v134 = v133 + 8;
              if (v133 + 8 <= v127)
              {
                *(void *)((char *)v201 + v133) = *(unsigned __int8 *)(v11 + 136 * v10 + 132);
                unint64_t v127 = v203;
                uint64_t v134 = v202 + 8;
              }
              uint64_t v202 = v134;
              uint64_t v135 = v134 + 8;
              if (v134 + 8 <= v127)
              {
                *(void *)((char *)v201 + v134) = *(unsigned __int8 *)(v11 + 136 * v10 + 130);
                unint64_t v127 = v203;
                uint64_t v135 = v202 + 8;
              }
              uint64_t v202 = v135;
              uint64_t v116 = v135 + 8;
              if (v135 + 8 <= v127)
              {
                *(void *)((char *)v201 + v135) = *(unsigned __int8 *)(v11 + 136 * v10 + 129);
                unint64_t v127 = v203;
                uint64_t v116 = v202 + 8;
              }
              uint64_t v202 = v116;
              uint64_t v117 = v116 + 8;
              if (v116 + 8 > v127) {
                goto LABEL_196;
              }
              uint64_t v118 = *(unsigned __int8 *)(v11 + 136 * v10 + 131);
LABEL_195:
              *(void *)((char *)v201 + v116) = v118;
              uint64_t v117 = v202 + 8;
LABEL_196:
              uint64_t v202 = v117;
              break;
            case 6:
              uint64_t v51 = v11 + 136 * v10;
              unint64_t v54 = *(void *)(v51 + 48);
              uint64_t v53 = (unint64_t *)(v51 + 48);
              unint64_t v52 = v54;
              uint64_t v55 = v18 + 8;
              if (v18 + 8 <= v203)
              {
                *(void *)((char *)v201 + v18) = v52;
                uint64_t v55 = v202 + 8;
                unint64_t v52 = *v53;
              }
              uint64_t v202 = v55;
              if (v52)
              {
                uint64_t v56 = 0;
                unint64_t v57 = 0;
                do
                {
                  SaveDYMTLMotionKeyframeData(&v201, (uint64_t *)(*(v53 - 1) + v56), a4);
                  ++v57;
                  v56 += 16;
                }
                while (*v53 > v57);
                uint64_t v55 = v202;
              }
              uint64_t v58 = v11 + 136 * v10;
              unint64_t v61 = *(void *)(v58 + 96);
              v60 = (unint64_t *)(v58 + 96);
              unint64_t v59 = v61;
              uint64_t v62 = v55 + 8;
              if (v55 + 8 <= v203)
              {
                *(void *)((char *)v201 + v55) = v59;
                uint64_t v62 = v202 + 8;
                unint64_t v59 = *v60;
              }
              uint64_t v202 = v62;
              if (v59)
              {
                uint64_t v63 = 0;
                unint64_t v64 = 0;
                do
                {
                  SaveDYMTLMotionKeyframeData(&v201, (uint64_t *)(*(void *)(v11 + 136 * v10 + 88) + v63), a4);
                  ++v64;
                  v63 += 16;
                }
                while (*v60 > v64);
                uint64_t v62 = v202;
              }
              uint64_t v65 = v62 + 8;
              unint64_t v66 = v203;
              if (v62 + 8 <= v203)
              {
                *(void *)((char *)v201 + v62) = *(void *)(v11 + 136 * v10 + 56);
                unint64_t v66 = v203;
                uint64_t v65 = v202 + 8;
              }
              uint64_t v202 = v65;
              uint64_t v67 = v65 + 8;
              if (v65 + 8 <= v66)
              {
                *(void *)((char *)v201 + v65) = *(void *)(v11 + 136 * v10 + 64);
                unint64_t v66 = v203;
                uint64_t v67 = v202 + 8;
              }
              uint64_t v202 = v67;
              uint64_t v68 = v67 + 8;
              if (v67 + 8 <= v66)
              {
                *(void *)((char *)v201 + v67) = *(void *)(v11 + 136 * v10 + 104);
                uint64_t v68 = v202 + 8;
              }
              uint64_t v202 = v68;
              uint64_t v207 = *(void *)(v11 + 136 * v10 + 72);
              unint64_t v69 = find_entry(a4, &v207, 8uLL, 0);
              if (*v69) {
                uint64_t v70 = *(void *)(*v69 + 32);
              }
              else {
                uint64_t v70 = 0;
              }
              unint64_t v107 = v203;
              uint64_t v108 = v202 + 8;
              if (v202 + 8 <= v203)
              {
                *(void *)((char *)v201 + v202) = *(void *)(v70 + 8);
                unint64_t v107 = v203;
                uint64_t v108 = v202 + 8;
              }
              uint64_t v202 = v108;
              uint64_t v109 = v108 + 8;
              if (v108 + 8 <= v107)
              {
                *(void *)((char *)v201 + v108) = *(void *)(v11 + 136 * v10 + 80);
                unint64_t v107 = v203;
                uint64_t v109 = v202 + 8;
              }
              uint64_t v202 = v109;
              uint64_t v110 = v109 + 8;
              if (v109 + 8 <= v107)
              {
                *(void *)((char *)v201 + v109) = *(void *)(v11 + 136 * v10 + 120);
                unint64_t v107 = v203;
                uint64_t v110 = v202 + 8;
              }
              uint64_t v202 = v110;
              uint64_t v111 = v110 + 8;
              if (v110 + 8 <= v107)
              {
                *(void *)((char *)v201 + v110) = *(unsigned __int8 *)(v11 + 136 * v10 + 128);
                unint64_t v107 = v203;
                uint64_t v111 = v202 + 8;
              }
              uint64_t v202 = v111;
              uint64_t v112 = v111 + 8;
              if (v111 + 8 <= v107)
              {
                *(void *)((char *)v201 + v111) = *(unsigned __int8 *)(v11 + 136 * v10 + 133);
                unint64_t v107 = v203;
                uint64_t v112 = v202 + 8;
              }
              uint64_t v202 = v112;
              uint64_t v113 = v112 + 8;
              if (v112 + 8 <= v107)
              {
                *(void *)((char *)v201 + v112) = *(unsigned __int8 *)(v11 + 136 * v10 + 132);
                unint64_t v107 = v203;
                uint64_t v113 = v202 + 8;
              }
              uint64_t v202 = v113;
              uint64_t v114 = v113 + 8;
              if (v113 + 8 <= v107)
              {
                *(void *)((char *)v201 + v113) = *(void *)(v11 + 136 * v10 + 112);
                unint64_t v107 = v203;
                uint64_t v114 = v202 + 8;
              }
              uint64_t v202 = v114;
              uint64_t v115 = v114 + 8;
              if (v114 + 8 <= v107)
              {
                *(void *)((char *)v201 + v114) = *(unsigned __int8 *)(v11 + 136 * v10 + 130);
                unint64_t v107 = v203;
                uint64_t v115 = v202 + 8;
              }
              uint64_t v202 = v115;
              uint64_t v81 = v115 + 8;
              if (v115 + 8 <= v107)
              {
                *(void *)((char *)v201 + v115) = *(unsigned __int8 *)(v11 + 136 * v10 + 129);
                unint64_t v107 = v203;
                uint64_t v81 = v202 + 8;
              }
              uint64_t v202 = v81;
              uint64_t v48 = v81 + 8;
              if (v81 + 8 > v107) {
                goto LABEL_152;
              }
              uint64_t v82 = *(unsigned __int8 *)(v11 + 136 * v10 + 131);
LABEL_150:
              *(void *)((char *)v201 + v81) = v82;
LABEL_151:
              uint64_t v48 = v202 + 8;
LABEL_152:
              uint64_t v202 = v48;
              break;
            default:
              break;
          }
          WriteDynamicBufferString(&v201, *(const char **)v12);
          uint64_t v207 = *(void *)(v11 + 136 * v10 + 8);
          char v136 = find_entry(a4, &v207, 8uLL, 0);
          if (*v136 && (uint64_t v137 = *(void *)(*v136 + 32)) != 0) {
            uint64_t v138 = *(void *)(v137 + 8);
          }
          else {
            uint64_t v138 = 0;
          }
          unint64_t v139 = v203;
          uint64_t v140 = v202 + 8;
          if (v202 + 8 <= v203)
          {
            *(void *)((char *)v201 + v202) = v138;
            unint64_t v139 = v203;
            uint64_t v140 = v202 + 8;
          }
          uint64_t v202 = v140;
          uint64_t v141 = v140 + 8;
          if (v140 + 8 <= v139)
          {
            *(void *)((char *)v201 + v140) = *(void *)(v11 + 136 * v10 + 16);
            unint64_t v139 = v203;
            uint64_t v141 = v202 + 8;
          }
          uint64_t v202 = v141;
          uint64_t v142 = v141 + 8;
          if (v141 + 8 <= v139)
          {
            *(void *)((char *)v201 + v141) = *(unsigned int *)(v11 + 136 * v10 + 24);
            unint64_t v139 = v203;
            uint64_t v142 = v202 + 8;
          }
          uint64_t v202 = v142;
          uint64_t v9 = v142 + 8;
          if (v142 + 8 <= v139)
          {
            *(void *)((char *)v201 + v142) = *(unsigned int *)(v11 + 136 * v10 + 28);
            uint64_t v9 = v202 + 8;
          }
          uint64_t v202 = v9;
          ++v10;
        }
        while (*((void *)a1 + 2) > v10);
        a3 = v203;
      }
      unint64_t v143 = v9 + 4;
      if (v9 + 4 <= a3)
      {
        *(_DWORD *)((char *)v201 + v9) = *((_DWORD *)a1 + 8);
        a3 = v203;
        unint64_t v143 = v202 + 4;
      }
      uint64_t v202 = v143;
      if (a3 > v143)
      {
        if (a3 - v143 >= 4) {
          size_t v144 = 4;
        }
        else {
          size_t v144 = a3 - v143;
        }
        bzero((char *)v201 + v143, v144);
        unint64_t v143 = v202;
        a3 = v203;
      }
      unint64_t v145 = v143 + 4;
      uint64_t v202 = v143 + 4;
      unint64_t v146 = v143 + 8;
      if (v146 <= a3)
      {
        *(_DWORD *)((char *)v201 + v145) = *((_DWORD *)a1 + 6);
        a3 = v203;
        unint64_t v146 = v202 + 4;
      }
      uint64_t v202 = v146;
      if (a3 > v146)
      {
        if (a3 - v146 >= 4) {
          size_t v147 = 4;
        }
        else {
          size_t v147 = a3 - v146;
        }
        bzero((char *)v201 + v146, v147);
        unint64_t v146 = v202;
        a3 = v203;
      }
      unint64_t v148 = v146 + 4;
      uint64_t v202 = v146 + 4;
      unint64_t v149 = v146 + 12;
      if (v149 <= a3)
      {
        *(void *)((char *)v201 + v148) = a1[37];
        a3 = v203;
        unint64_t v149 = v202 + 8;
      }
      uint64_t v202 = v149;
      uint64_t v150 = v149 + 8;
      if (v149 + 8 <= a3)
      {
        *(void *)((char *)v201 + v149) = a1[36];
        a3 = v203;
        uint64_t v150 = v202 + 8;
      }
      uint64_t v202 = v150;
      uint64_t result = v150 + 8;
      if (v150 + 8 <= a3)
      {
        *(void *)((char *)v201 + v150) = *((unsigned int *)a1 + 7);
        return v202 + 8;
      }
      break;
  }
  return result;
}

void *SaveDYMTLMotionKeyframeData(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v12 = *a2;
  uint64_t result = find_entry(a3, &v12, 8uLL, 0);
  if (*result && (uint64_t v6 = *(void *)(*result + 32)) != 0) {
    uint64_t v7 = *(void *)(v6 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v9 = a1[1];
  unint64_t v8 = a1[2];
  uint64_t v10 = v9 + 8;
  if (v9 + 8 <= v8)
  {
    *(void *)(*a1 + v9) = v7;
    unint64_t v8 = a1[2];
    uint64_t v10 = a1[1] + 8;
  }
  a1[1] = v10;
  uint64_t v11 = v10 + 8;
  if (v10 + 8 <= v8)
  {
    *(void *)(*a1 + v10) = a2[1];
    uint64_t v11 = a1[1] + 8;
  }
  a1[1] = v11;
  return result;
}

uint64_t DecodeDYMTLImageFilterFunctionInfoSPI(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (char *)(a1 + 16);
    do
    {
      char v8 = *v7;
      uint64_t v9 = *((void *)v7 + 1);
      v7 += 16;
      uint64_t v10 = *(void *)(a3 + 328);
      uint64_t v11 = v9;
      for (uint64_t i = v10; v11; --v11)
      {
        if (a4)
        {
          uint64_t v13 = *((void *)v7 + 2);
          *(_OWORD *)uint64_t i = *(_OWORD *)v7;
          *(void *)(i + 16) = v13;
          uint64_t i = *(void *)(a3 + 328);
        }
        v7 += 24;
        i += 24;
        *(void *)(a3 + 328) = i;
      }
      uint64_t v14 = *(void *)(a3 + 256);
      if (a4)
      {
        *(unsigned char *)uint64_t v14 = v8;
        *(_DWORD *)(v14 + 4) = 0;
        *(_DWORD *)(v14 + 1) = 0;
        *(void *)(v14 + 8) = v9;
        *(void *)(v14 + 16) = v10;
        uint64_t v14 = *(void *)(a3 + 256);
      }
      *(void *)(a3 + 256) = v14 + 24;
      ++v6;
    }
    while (v6 != result);
  }
  return result;
}

uint64_t EncodeDYMTLImageFilterFunctionInfoSPI(uint64_t a1, uint64_t a2, void *a3, unint64_t a4)
{
  if (a4 >= 8)
  {
    *a3 = 81;
    if (a4 >= 0x10) {
      a3[1] = a2;
    }
  }
  if (!a2) {
    return 16;
  }
  uint64_t v4 = 0;
  uint64_t v5 = 16;
  do
  {
    if (v5 + 8 <= a4) {
      *(void *)((char *)a3 + v5) = *(unsigned __int8 *)(a1 + 24 * v4);
    }
    uint64_t v6 = a1 + 24 * v4;
    unint64_t v9 = *(void *)(v6 + 8);
    uint64_t v7 = (unint64_t *)(v6 + 8);
    unint64_t v8 = v9;
    if (v5 + 16 <= a4)
    {
      *(void *)((char *)a3 + v5 + 8) = v8;
      unint64_t v8 = *v7;
    }
    if (v8)
    {
      uint64_t v10 = 0;
      unint64_t v11 = 0;
      uint64_t v12 = (char *)a3 + v5 + 16;
      do
      {
        uint64_t v13 = *(void *)(a1 + 24 * v4 + 16);
        if (v5 + v10 + 24 <= a4) {
          *(void *)&v12[v10] = *(void *)(v13 + v10);
        }
        if (v5 + v10 + 32 <= a4) {
          *(void *)&v12[v10 + 8] = *(void *)(v13 + v10 + 8);
        }
        if (v5 + v10 + 40 <= a4) {
          *(void *)&v12[v10 + 16] = *(void *)(v13 + v10 + 16);
        }
        ++v11;
        v10 += 24;
      }
      while (*v7 > v11);
      v5 += v10 + 16;
    }
    else
    {
      v5 += 16;
    }
    ++v4;
  }
  while (v4 != a2);
  return v5;
}

uint64_t DecodeDYMTLTextureMipmapInfo(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(unsigned __int8 *)(result + 8);
  uint64_t v5 = *(void *)(a3 + 248);
  *(void *)(a3 + 248) = v5 + 16;
  uint64_t v6 = *(void *)(a3 + 352);
  *(void *)(a3 + 352) = v6 + 16 * v4;
  if (a4)
  {
    *(unsigned char *)(v5 + 8) = v4;
    if (v4) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    *(void *)uint64_t v5 = v7;
    if (v4)
    {
      unint64_t v8 = (_DWORD *)(v6 + 8);
      unint64_t v9 = (uint64_t *)(result + 40);
      do
      {
        *(v8 - 2) = *(v9 - 2);
        *(v8 - 1) = *(v9 - 1);
        uint64_t v10 = *v9;
        v9 += 4;
        *unint64_t v8 = v10;
        v8 += 4;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

uint64_t EncodeDYMTLTextureMipmapInfo2(uint64_t *a1, void *a2, unint64_t a3)
{
  if (a3 > 7)
  {
    *a2 = 81;
    v3 = (unsigned __int8 *)(a1 + 1);
    uint64_t v4 = *((unsigned __int8 *)a1 + 8);
    if (a3 < 0x10) {
      goto LABEL_6;
    }
    a2[1] = v4;
  }
  else
  {
    v3 = (unsigned __int8 *)(a1 + 1);
  }
  LODWORD(v4) = *v3;
LABEL_6:
  if (!v4) {
    return 16;
  }
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = a2 + 5;
  unint64_t v8 = 24;
  do
  {
    if (v8 <= a3) {
      v7[v8 / 8 - 6] = v6;
    }
    uint64_t v9 = *a1;
    if (v8 + 8 <= a3)
    {
      a2[v8 / 8] = *(unsigned int *)(v9 + v5);
      uint64_t v9 = *a1;
    }
    if (v8 + 16 <= a3)
    {
      v7[v8 / 8 - 4] = *(unsigned int *)(v9 + v5 + 4);
      uint64_t v9 = *a1;
    }
    if (v8 + 24 <= a3) {
      v7[v8 / 8 - 3] = *(unsigned int *)(v9 + v5 + 8);
    }
    ++v6;
    v8 += 32;
    v5 += 16;
  }
  while (v6 < *v3);
  return v8 - 8;
}

uint64_t EncodeDYMTLStitchedLibraryDescriptor(uint64_t *a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v33 = a2;
  uint64_t v34 = 0;
  unint64_t v35 = a3;
  if (a3 < 8 || (*a2 = 81, a3 < 0x10) || (a2[1] = 0, a3 < 0x18) || (a2[2] = 0, a3 <= 0x1F))
  {
    unint64_t v6 = (unsigned __int16 *)(a1 + 2);
LABEL_6:
    LODWORD(v7) = *v6;
    goto LABEL_7;
  }
  a2[3] = *((unsigned __int8 *)a1 + 20);
  unint64_t v6 = (unsigned __int16 *)(a1 + 2);
  uint64_t v7 = *((unsigned __int16 *)a1 + 8);
  if (a3 >= 0x28)
  {
    a2[4] = v7;
    goto LABEL_6;
  }
LABEL_7:
  uint64_t v8 = 40;
  uint64_t v34 = 40;
  if (v7)
  {
    unint64_t v9 = 0;
    uint64_t v8 = 40;
    do
    {
      uint64_t v10 = *a1;
      uint64_t v11 = v8 + 8;
      if (v8 + 8 <= v35)
      {
        *(void *)((char *)v33 + v8) = *(unsigned __int8 *)(v10 + 40 * v9 + 36);
        uint64_t v11 = v34 + 8;
      }
      uint64_t v34 = v11;
      WriteDynamicBufferString(&v33, *(const char **)(v10 + 40 * v9));
      uint64_t v12 = v10 + 40 * v9;
      unsigned int v15 = *(unsigned __int16 *)(v12 + 32);
      uint64_t v14 = (unsigned __int16 *)(v12 + 32);
      uint64_t v13 = v15;
      uint64_t v16 = v34 + 8;
      if (v34 + 8 <= v35)
      {
        *(void *)((char *)v33 + v34) = v13;
        uint64_t v16 = v34 + 8;
        LODWORD(v13) = *v14;
      }
      uint64_t v34 = v16;
      if (v13)
      {
        uint64_t v17 = 0;
        unint64_t v18 = 0;
        do
        {
          EncodeDYMTLFunctionStitchingFunctionNode(&v33, (unsigned __int8 *)(*(void *)(v10 + 40 * v9 + 8) + v17));
          ++v18;
          v17 += 48;
        }
        while (v18 < *v14);
      }
      uint64_t v19 = *(unsigned __int8 **)(v10 + 40 * v9 + 16);
      if (v19)
      {
        EncodeDYMTLFunctionStitchingFunctionNode(&v33, v19);
        uint64_t v20 = v34;
      }
      else
      {
        uint64_t v20 = v34 + 8;
        if (v34 + 8 <= v35)
        {
          *(void *)((char *)v33 + v34) = 0;
          uint64_t v20 = v34 + 8;
        }
        uint64_t v34 = v20;
      }
      uint64_t v21 = v10 + 40 * v9;
      unsigned int v24 = *(unsigned __int16 *)(v21 + 34);
      uint64_t v22 = (unsigned __int16 *)(v21 + 34);
      uint64_t v23 = v24;
      uint64_t v25 = v20 + 8;
      if (v20 + 8 <= v35)
      {
        *(void *)((char *)v33 + v20) = v23;
        uint64_t v25 = v34 + 8;
        LODWORD(v23) = *v22;
      }
      uint64_t v34 = v25;
      if (v23)
      {
        uint64_t v26 = 0;
        unint64_t v27 = 0;
        do
        {
          uint64_t v8 = v25 + 8;
          if (v25 + 8 <= v35)
          {
            *(void *)((char *)v33 + v25) = *(unsigned __int8 *)(*(void *)(v10 + 40 * v9 + 24) + v26);
            uint64_t v8 = v34 + 8;
            LODWORD(v23) = *v22;
          }
          uint64_t v34 = v8;
          ++v27;
          v26 += 8;
          uint64_t v25 = v8;
        }
        while (v27 < v23);
      }
      else
      {
        uint64_t v8 = v25;
      }
      ++v9;
    }
    while (v9 < *v6);
    a3 = v35;
  }
  uint64_t v28 = *((unsigned __int16 *)a1 + 9);
  uint64_t result = v8 + 8;
  if (v8 + 8 <= a3)
  {
    *(void *)((char *)v33 + v8) = v28;
    uint64_t result = v34 + 8;
    LODWORD(v28) = *((unsigned __int16 *)a1 + 9);
  }
  uint64_t v34 = result;
  if (v28)
  {
    unint64_t v30 = 0;
    do
    {
      uint64_t v32 = *(void *)(a1[1] + 8 * v30);
      uint64_t v31 = *find_entry(a4, &v32, 8uLL, 0);
      if (v31) {
        uint64_t v31 = *(void *)(v31 + 32);
      }
      uint64_t result = v34 + 8;
      if (v34 + 8 <= v35)
      {
        *(void *)((char *)v33 + v34) = *(void *)(v31 + 8);
        uint64_t result = v34 + 8;
      }
      uint64_t v34 = result;
      ++v30;
    }
    while (v30 < *((unsigned __int16 *)a1 + 9));
  }
  return result;
}

void EncodeDYMTLFunctionStitchingFunctionNode(void *a1, unsigned __int8 *a2)
{
  uint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  uint64_t v6 = v4 + 8;
  if (v4 + 8 <= v5)
  {
    *(void *)(*a1 + v4) = *a2;
    unint64_t v5 = a1[2];
    uint64_t v6 = a1[1] + 8;
  }
  a1[1] = v6;
  uint64_t v7 = v6 + 8;
  if (v6 + 8 <= v5)
  {
    *(void *)(*a1 + v6) = *((void *)a2 + 4);
    uint64_t v7 = a1[1] + 8;
  }
  a1[1] = v7;
  if (*a2 == 2)
  {
    uint64_t v8 = v7 + 8;
    if ((unint64_t)(v7 + 8) <= a1[2])
    {
      *(void *)(*a1 + v7) = a2[44];
      uint64_t v8 = a1[1] + 8;
    }
    a1[1] = v8;
  }
  WriteDynamicBufferString(a1, *((const char **)a2 + 1));
  uint64_t v9 = a1[1];
  uint64_t v10 = v9 + 8;
  if ((unint64_t)(v9 + 8) <= a1[2])
  {
    *(void *)(*a1 + v9) = *((unsigned __int16 *)a2 + 20);
    uint64_t v10 = a1[1] + 8;
  }
  a1[1] = v10;
  if (*((_WORD *)a2 + 20))
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      uint64_t v13 = *((void *)a2 + 2);
      uint64_t v14 = *(unsigned __int8 *)(v13 + v11);
      switch(*(unsigned char *)(v13 + v11))
      {
        case 1:
        case 2:
        case 0xC:
          EncodeDYMTLFunctionStitchingFunctionNode(a1);
          goto LABEL_40;
        case 3:
          uint64_t v23 = a1[1];
          unint64_t v22 = a1[2];
          uint64_t v24 = v23 + 8;
          if (v23 + 8 <= v22)
          {
            *(void *)(*a1 + v23) = 3;
            unint64_t v22 = a1[2];
            uint64_t v24 = a1[1] + 8;
          }
          a1[1] = v24;
          uint64_t v25 = v24 + 8;
          if (v24 + 8 <= v22)
          {
            *(void *)(*a1 + v24) = *(unsigned __int16 *)(v13 + v11 + 12);
            uint64_t v25 = a1[1] + 8;
          }
          a1[1] = v25;
          goto LABEL_40;
        case 4:
        case 6:
        case 7:
        case 8:
        case 9:
          uint64_t v16 = a1[1];
          unint64_t v15 = a1[2];
          uint64_t v17 = v16 + 8;
          if (v16 + 8 <= v15)
          {
            *(void *)(*a1 + v16) = v14;
            unint64_t v15 = a1[2];
            uint64_t v17 = a1[1] + 8;
          }
          a1[1] = v17;
          uint64_t v18 = v17 + 8;
          if (v17 + 8 > v15) {
            goto LABEL_19;
          }
          *(void *)(*a1 + v17) = *(unsigned __int16 *)(v13 + v11 + 12);
          goto LABEL_18;
        case 5:
          uint64_t v27 = a1[1];
          unint64_t v26 = a1[2];
          uint64_t v28 = v27 + 8;
          if (v27 + 8 <= v26)
          {
            *(void *)(*a1 + v27) = 5;
            unint64_t v26 = a1[2];
            uint64_t v28 = a1[1] + 8;
          }
          a1[1] = v28;
          uint64_t v29 = v13 + v11;
          uint64_t v30 = v28 + 8;
          if (v28 + 8 <= v26)
          {
            *(void *)(*a1 + v28) = *(unsigned __int16 *)(v29 + 12);
            unint64_t v26 = a1[2];
            uint64_t v30 = a1[1] + 8;
          }
          a1[1] = v30;
          uint64_t v31 = v30 + 8;
          if (v30 + 8 <= v26)
          {
            *(void *)(*a1 + v30) = *(unsigned int *)(v29 + 8);
            unint64_t v26 = a1[2];
            uint64_t v31 = a1[1] + 8;
          }
          a1[1] = v31;
          uint64_t v20 = v31 + 8;
          if (v31 + 8 > v26) {
            goto LABEL_39;
          }
          *(void *)(*a1 + v31) = *(unsigned __int8 *)(v13 + v11 + 14);
          break;
        case 0xA:
        case 0xB:
          uint64_t v19 = a1[1];
          uint64_t v20 = v19 + 8;
          if ((unint64_t)(v19 + 8) > a1[2]) {
            goto LABEL_39;
          }
          *(void *)(*a1 + v19) = v14;
          break;
        default:
          uint64_t v21 = a1[1];
          uint64_t v18 = v21 + 8;
          if ((unint64_t)(v21 + 8) <= a1[2])
          {
            *(void *)(*a1 + v21) = 0;
LABEL_18:
            uint64_t v18 = a1[1] + 8;
          }
LABEL_19:
          a1[1] = v18;
          goto LABEL_40;
      }
      uint64_t v20 = a1[1] + 8;
LABEL_39:
      a1[1] = v20;
LABEL_40:
      ++v12;
      v11 += 48;
    }
    while (v12 < *((unsigned __int16 *)a2 + 20));
    uint64_t v10 = a1[1];
  }
  uint64_t v32 = v10 + 8;
  if ((unint64_t)(v10 + 8) <= a1[2])
  {
    *(void *)(*a1 + v10) = *((unsigned __int16 *)a2 + 21);
    uint64_t v32 = a1[1] + 8;
  }
  a1[1] = v32;
  if (*((_WORD *)a2 + 21))
  {
    uint64_t v33 = 0;
    unint64_t v34 = 0;
    do
    {
      EncodeDYMTLFunctionStitchingFunctionNode(a1);
      ++v34;
      v33 += 48;
    }
    while (v34 < *((unsigned __int16 *)a2 + 21));
  }
}

size_t DecodeDYMTLStitchedLibraryDescriptor(size_t result, uint64_t a2, void *a3, int a4, uint64_t a5)
{
  uint64_t v5 = a5;
  uint64_t v8 = (_DWORD *)(result + 8);
  unsigned int v9 = *(_DWORD *)result;
  if (*(_DWORD *)result < 0x4Fu)
  {
    char v10 = 4;
  }
  else
  {
    uint64_t v8 = (_DWORD *)(result + 32);
    char v10 = *(unsigned char *)(result + 24);
  }
  int v12 = *v8;
  uint64_t v11 = (const char *)(v8 + 2);
  unint64_t v59 = v11;
  __int16 v54 = v12;
  int v55 = (unsigned __int16)v12;
  if ((_WORD)v12)
  {
    char v52 = v10;
    int v13 = 0;
    uint64_t v53 = a3[45];
    while (1)
    {
      uint64_t v14 = v59;
      unint64_t v15 = v59 + 8;
      char v16 = *v59;
      unint64_t v59 = v15;
      uint64_t result = strlen(v15);
      uint64_t v17 = &v15[(result & 0xFFFFFFFFFFFFFFF8) + 8];
      unint64_t v59 = v17;
      int v18 = *((unsigned __int8 *)v14 + 8);
      uint64_t v19 = v14[8] ? v15 : 0;
      if (!v18) {
        break;
      }
      uint64_t result = strlen(v19);
      uint64_t v20 = a3[52];
      size_t v21 = result + 1;
      if (result == -1) {
        goto LABEL_13;
      }
      unint64_t v22 = (void *)a3[52];
LABEL_14:
      a3[52] = v20 + v21;
      if (a4)
      {
        uint64_t result = (size_t)memcpy(v22, v19, v21);
        uint64_t v17 = v59;
      }
      uint64_t v25 = *(void *)v17;
      uint64_t v23 = v17 + 8;
      __int16 v24 = v25;
      unint64_t v59 = v23;
      unint64_t v26 = (_OWORD *)a3[46];
      a3[46] = &v26[3 * (unsigned __int16)v25];
      int v27 = (unsigned __int16)v25;
      if ((_WORD)v25)
      {
        uint64_t v28 = v26;
        do
        {
          long long v57 = 0u;
          long long v58 = 0u;
          long long v56 = 0u;
          int v29 = *(unsigned __int8 *)v59;
          v59 += 8;
          uint64_t result = DecodeDYMTLFunctionStitchingFunctionNode((uint64_t)&v56, &v59, v29, v9, (uint64_t)a3, a4);
          if (a4)
          {
            long long v30 = v56;
            long long v31 = v58;
            v28[1] = v57;
            v28[2] = v31;
            *uint64_t v28 = v30;
            v28 += 3;
          }
          --v27;
        }
        while (v27);
        uint64_t v23 = v59;
      }
      else
      {
        unint64_t v26 = 0;
      }
      int v34 = *(unsigned __int8 *)v23;
      uint64_t v33 = v23 + 8;
      int v32 = v34;
      unint64_t v59 = v33;
      if (v34)
      {
        unint64_t v35 = (_OWORD *)a3[46];
        a3[46] = v35 + 3;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v56 = 0u;
        uint64_t result = DecodeDYMTLFunctionStitchingFunctionNode((uint64_t)&v56, &v59, v32, v9, (uint64_t)a3, a4);
        if (a4)
        {
          long long v36 = v57;
          *unint64_t v35 = v56;
          v35[1] = v36;
          v35[2] = v58;
        }
        uint64_t v33 = v59;
      }
      else
      {
        unint64_t v35 = 0;
      }
      int v37 = *(_DWORD *)v33;
      unint64_t v59 = v33 + 8;
      uint64_t v38 = a3[47];
      int v39 = (unsigned __int16)v37;
      if ((_WORD)v37)
      {
        uint64_t v40 = v38 + 8;
        unint64_t v41 = v33 + 16;
        do
        {
          uint64_t v42 = *((void *)v41 - 1);
          unint64_t v59 = v41;
          if (a4) {
            *(unsigned char *)(v40 - 8) = v42;
          }
          v41 += 8;
          a3[47] = v40;
          v40 += 8;
          --v39;
        }
        while (v39);
      }
      uint64_t v43 = a3[45];
      if (a4)
      {
        *(void *)uint64_t v43 = v22;
        *(void *)(v43 + 8) = v26;
        *(void *)(v43 + 16) = v35;
        *(void *)(v43 + 24) = v38;
        *(_WORD *)(v43 + 32) = v24;
        *(_WORD *)(v43 + 34) = v37;
        *(unsigned char *)(v43 + 36) = v16;
        *(_WORD *)(v43 + 37) = 0;
        *(unsigned char *)(v43 + 39) = 0;
        uint64_t v43 = a3[45];
      }
      a3[45] = v43 + 40;
      if (++v13 == v55)
      {
        uint64_t v11 = v59;
        char v10 = v52;
        uint64_t v5 = a5;
        goto LABEL_38;
      }
    }
    uint64_t v20 = a3[52];
LABEL_13:
    size_t v21 = 0;
    unint64_t v22 = 0;
    goto LABEL_14;
  }
  uint64_t v53 = 0;
LABEL_38:
  int v45 = *(_DWORD *)v11;
  int v44 = *(_DWORD *)v11;
  unint64_t v59 = v11 + 8;
  int v46 = (unsigned __int16)v45;
  if (!(_WORD)v45)
  {
    uint64_t v47 = 0;
    if ((a4 & 1) == 0) {
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  uint64_t v47 = (uint64_t *)a3[50];
  uint64_t v48 = v47;
  do
  {
    uint64_t v49 = *(void *)v59;
    v59 += 8;
    if (a4)
    {
      if (v5)
      {
        uint64_t result = GetStream_11288(v5, v49);
        if (result) {
          uint64_t v49 = *(void *)result;
        }
        else {
          uint64_t v49 = 0;
        }
      }
      uint64_t v48 = (uint64_t *)a3[50];
      *uint64_t v48 = v49;
    }
    a3[50] = ++v48;
    --v46;
  }
  while (v46);
  if (a4)
  {
LABEL_48:
    uint64_t v50 = a3[33];
    *(void *)uint64_t v50 = v53;
    *(void *)(v50 + 8) = v47;
    *(_WORD *)(v50 + 16) = v54;
    *(_WORD *)(v50 + 18) = v44;
    *(unsigned char *)(v50 + 20) = v10;
    *(_WORD *)(v50 + 21) = 0;
    *(unsigned char *)(v50 + 23) = 0;
  }
LABEL_49:
  a3[33] += 24;
  return result;
}

uint64_t DecodeDYMTLFunctionStitchingFunctionNode(uint64_t a1, const char **a2, int a3, unsigned int a4, uint64_t a5, int a6)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)a1 = a3;
  char v10 = *a2;
  if (a4 >= 0x4F)
  {
    uint64_t v11 = *(void *)v10;
    v10 += 8;
    *a2 = v10;
    *(void *)(a1 + 32) = v11;
  }
  if (a3 == 2)
  {
    uint64_t v12 = *(void *)v10;
    v10 += 8;
    *a2 = v10;
    *(unsigned char *)(a1 + 44) = v12;
  }
  *a2 = &v10[(strlen(v10) & 0xFFFFFFFFFFFFFFF8) + 8];
  if (*v10) {
    int v13 = v10;
  }
  else {
    int v13 = "";
  }
  uint64_t result = strlen(v13);
  size_t v15 = result + 1;
  if (result == -1) {
    char v16 = 0;
  }
  else {
    char v16 = *(void **)(a5 + 416);
  }
  *(void *)(a5 + 416) += v15;
  if (a6) {
    uint64_t result = (uint64_t)memcpy(v16, v13, v15);
  }
  uint64_t v17 = *(void *)*a2;
  *a2 += 8;
  unsigned int v18 = (unsigned __int16)v17;
  *(_WORD *)(a1 + 40) = v17;
  if ((_WORD)v17) {
    uint64_t v19 = *(void *)(a5 + 368);
  }
  else {
    uint64_t v19 = 0;
  }
  *(void *)(a5 + 368) += 48 * (unsigned __int16)v17;
  *(void *)(a1 + 8) = v16;
  *(void *)(a1 + 16) = v19;
  if ((_WORD)v17)
  {
    int v20 = 0;
    long long v21 = 0uLL;
    while (2)
    {
      int v22 = 0;
      memset(v35, 0, 7);
      long long v37 = v21;
      long long v38 = v21;
      char v39 = 0;
      uint64_t v23 = *a2;
      int v24 = *(unsigned __int8 *)*a2;
      *a2 += 8;
      __int16 v25 = 0;
      char v26 = 0;
      switch(v24)
      {
        case 1:
        case 2:
        case 12:
          uint64_t result = DecodeDYMTLFunctionStitchingFunctionNode(v36, a2);
          long long v21 = 0uLL;
          LOBYTE(v24) = v36[0];
          v35[0] = *(_DWORD *)((char *)v36 + 1);
          *(_DWORD *)((char *)v35 + 3) = DWORD1(v36[0]);
          int v22 = DWORD2(v36[0]);
          __int16 v25 = WORD6(v36[0]);
          char v26 = BYTE14(v36[0]);
          long long v37 = *(_OWORD *)((char *)v36 + 15);
          long long v38 = *(_OWORD *)((char *)&v36[1] + 15);
          char v39 = HIBYTE(v36[2]);
          if (a6) {
            goto LABEL_25;
          }
          goto LABEL_26;
        case 3:
          int v22 = 0;
          char v26 = 0;
          __int16 v25 = *((_WORD *)v23 + 4);
          *a2 = v23 + 16;
          LOBYTE(v24) = 3;
          goto LABEL_24;
        case 4:
        case 6:
        case 7:
        case 8:
        case 9:
          int v22 = 0;
          char v26 = 0;
          __int16 v25 = *((_WORD *)v23 + 4);
          *a2 = v23 + 16;
          if (!a6) {
            goto LABEL_26;
          }
          goto LABEL_25;
        case 5:
          __int16 v25 = *((_WORD *)v23 + 4);
          *a2 = v23 + 16;
          int v22 = *((_DWORD *)v23 + 4);
          *a2 = v23 + 24;
          char v26 = v23[24];
          *a2 = v23 + 32;
          LOBYTE(v24) = 5;
          if (!a6) {
            goto LABEL_26;
          }
          goto LABEL_25;
        default:
LABEL_24:
          if (a6)
          {
LABEL_25:
            *(unsigned char *)uint64_t v19 = v24;
            *(_DWORD *)(v19 + 4) = *(_DWORD *)((char *)v35 + 3);
            *(_DWORD *)(v19 + 8) = v22;
            *(_DWORD *)(v19 + 1) = v35[0];
            *(_WORD *)(v19 + 12) = v25;
            *(unsigned char *)(v19 + 14) = v26;
            long long v27 = v37;
            long long v28 = v38;
            *(unsigned char *)(v19 + 47) = v39;
            *(_OWORD *)(v19 + 31) = v28;
            *(_OWORD *)(v19 + 15) = v27;
            v19 += 48;
            unsigned int v18 = *(unsigned __int16 *)(a1 + 40);
          }
LABEL_26:
          if (++v20 >= v18) {
            break;
          }
          continue;
      }
      break;
    }
  }
  uint64_t v29 = *(void *)*a2;
  *a2 += 8;
  unsigned int v30 = (unsigned __int16)v29;
  *(_WORD *)(a1 + 42) = v29;
  if ((_WORD)v29) {
    long long v31 = *(_OWORD **)(a5 + 368);
  }
  else {
    long long v31 = 0;
  }
  *(void *)(a5 + 368) += 48 * (unsigned __int16)v29;
  *(void *)(a1 + 24) = v31;
  if ((_WORD)v29)
  {
    unsigned int v32 = 0;
    do
    {
      memset(v36, 0, sizeof(v36));
      *a2 += 8;
      uint64_t result = DecodeDYMTLFunctionStitchingFunctionNode(v36, a2);
      if (a6)
      {
        long long v33 = v36[0];
        long long v34 = v36[2];
        v31[1] = v36[1];
        v31[2] = v34;
        *long long v31 = v33;
        v31 += 3;
        unsigned int v30 = *(unsigned __int16 *)(a1 + 42);
      }
      ++v32;
    }
    while (v32 < v30);
  }
  return result;
}

void *DecodeDYMTLFXSpatialScalerDescriptor(void *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a3 + 272);
  *(void *)(a3 + 272) = v4 + 40;
  if (a4)
  {
    *(void *)uint64_t v4 = result[1];
    *(void *)(v4 + 8) = result[2];
    *(void *)(v4 + 16) = result[3];
    *(void *)(v4 + 24) = result[4];
    *(_WORD *)(v4 + 32) = result[5];
    *(_WORD *)(v4 + 34) = result[6];
    *(unsigned char *)(v4 + 36) = result[7];
  }
  return result;
}

uint64_t DecodeDYMTLFXTemporalScalerDescriptor(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v4 = *(_DWORD *)result;
  uint64_t v5 = *(void *)(a3 + 280);
  *(void *)(a3 + 280) = v5 + 64;
  if (a4)
  {
    *(_WORD *)uint64_t v5 = *(void *)(result + 8);
    *(_WORD *)(v5 + 2) = *(void *)(result + 16);
    *(_WORD *)(v5 + 4) = *(void *)(result + 24);
    *(_WORD *)(v5 + 6) = *(void *)(result + 32);
    *(void *)(v5 + 16) = *(void *)(result + 40);
    *(void *)(v5 + 24) = *(void *)(result + 48);
    *(void *)(v5 + 32) = *(void *)(result + 56);
    *(void *)(v5 + 40) = *(void *)(result + 64);
    *(_DWORD *)(v5 + 48) = *(_DWORD *)(result + 72);
    *(_DWORD *)(v5 + 52) = *(_DWORD *)(result + 80);
    *(unsigned char *)(v5 + 56) = *(void *)(result + 88);
    *(unsigned char *)(v5 + 57) = *(void *)(result + 96);
    if (v4 >= 0x4D)
    {
      *(unsigned char *)(v5 + 58) = *(void *)(result + 104);
      *(_WORD *)(v5 + 8) = *(void *)(result + 112);
      if (v4 >= 0x50) {
        *(unsigned char *)(v5 + 59) = *(void *)(result + 120);
      }
    }
  }
  return result;
}

uint64_t EncodeDYMTLFXSpatialScalerDescriptor(uint64_t a1, void *a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *a2 = 81;
    if (a3 >= 0x10)
    {
      a2[1] = *(void *)a1;
      if (a3 >= 0x18)
      {
        a2[2] = *(void *)(a1 + 8);
        if (a3 >= 0x20)
        {
          a2[3] = *(void *)(a1 + 16);
          if (a3 >= 0x28)
          {
            a2[4] = *(void *)(a1 + 24);
            if (a3 >= 0x30)
            {
              a2[5] = *(unsigned __int16 *)(a1 + 32);
              if (a3 >= 0x38)
              {
                a2[6] = *(unsigned __int16 *)(a1 + 34);
                if (a3 >= 0x40) {
                  a2[7] = *(unsigned __int8 *)(a1 + 36);
                }
              }
            }
          }
        }
      }
    }
  }
  return 64;
}

uint64_t EncodeDYMTLFXTemporalScalerDescriptor(unsigned __int16 *a1, uint64_t a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *(void *)a2 = 81;
    if (a3 >= 0x10)
    {
      *(void *)(a2 + 8) = *a1;
      if (a3 >= 0x18)
      {
        *(void *)(a2 + 16) = a1[1];
        if (a3 >= 0x20)
        {
          *(void *)(a2 + 24) = a1[2];
          if (a3 >= 0x28)
          {
            *(void *)(a2 + 32) = a1[3];
            if (a3 >= 0x30)
            {
              *(void *)(a2 + 40) = *((void *)a1 + 2);
              if (a3 >= 0x38)
              {
                *(void *)(a2 + 48) = *((void *)a1 + 3);
                if (a3 >= 0x40)
                {
                  *(void *)(a2 + 56) = *((void *)a1 + 4);
                  if (a3 >= 0x48)
                  {
                    *(void *)(a2 + 64) = *((void *)a1 + 5);
                    if (a3 >= 0x4C)
                    {
                      *(_DWORD *)(a2 + 72) = *((_DWORD *)a1 + 12);
                      if (a3 >= 0x4D)
                      {
                        uint64_t v6 = (void *)(a2 + 76);
                        size_t v7 = a3 - 76 >= 4 ? 4 : a3 - 76;
                        bzero(v6, v7);
                        if (a3 >= 0x54)
                        {
                          *(_DWORD *)(a2 + 80) = *((_DWORD *)a1 + 13);
                          if (a3 >= 0x55)
                          {
                            if (a3 - 84 >= 4) {
                              size_t v8 = 4;
                            }
                            else {
                              size_t v8 = a3 - 84;
                            }
                            bzero((void *)(a2 + 84), v8);
                            if (a3 >= 0x60)
                            {
                              *(void *)(a2 + 88) = *((unsigned __int8 *)a1 + 56);
                              if (a3 >= 0x68)
                              {
                                *(void *)(a2 + 96) = *((unsigned __int8 *)a1 + 57);
                                if (a3 >= 0x70)
                                {
                                  *(void *)(a2 + 104) = *((unsigned __int8 *)a1 + 58);
                                  if (a3 >= 0x78)
                                  {
                                    *(void *)(a2 + 112) = a1[4];
                                    if (a3 >= 0x80) {
                                      *(void *)(a2 + 120) = *((unsigned __int8 *)a1 + 59);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 128;
}

void *DecodeDYMPSSourceTextureInfo(void *result, uint64_t a2, void **a3, int a4)
{
  unsigned int v4 = *a3;
  *a3 += 10;
  if (a4)
  {
    *unsigned int v4 = result[1];
    v4[1] = result[2];
    v4[2] = result[3];
    v4[3] = result[4];
    v4[4] = result[5];
    v4[5] = result[6];
    v4[6] = result[7];
    v4[7] = result[8];
    v4[8] = result[9];
    v4[9] = result[10];
  }
  return result;
}

uint64_t EncodeDYMPSSourceTextureInfo(void *a1, void *a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *a2 = 81;
    if (a3 >= 0x10)
    {
      a2[1] = *a1;
      if (a3 >= 0x18)
      {
        a2[2] = a1[1];
        if (a3 >= 0x20)
        {
          a2[3] = a1[2];
          if (a3 >= 0x28)
          {
            a2[4] = a1[3];
            if (a3 >= 0x30)
            {
              a2[5] = a1[4];
              if (a3 >= 0x38)
              {
                a2[6] = a1[5];
                if (a3 >= 0x40)
                {
                  a2[7] = a1[6];
                  if (a3 >= 0x48)
                  {
                    a2[8] = a1[7];
                    if (a3 >= 0x50)
                    {
                      a2[9] = a1[8];
                      if (a3 >= 0x58) {
                        a2[10] = a1[9];
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 88;
}

void *DecodeDYMPSDestinationTextureInfo(void *result, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v4 = *(void **)(a3 + 8);
  *(void *)(a3 + 8) = v4 + 10;
  if (a4)
  {
    *unsigned int v4 = result[1];
    v4[1] = result[2];
    v4[2] = result[3];
    v4[3] = result[4];
    v4[4] = result[5];
    v4[5] = result[6];
    v4[6] = result[7];
    v4[7] = result[8];
    v4[8] = result[9];
    v4[9] = result[10];
  }
  return result;
}

uint64_t EncodeDYMPSDestinationTextureInfo(void *a1, void *a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *a2 = 81;
    if (a3 >= 0x10)
    {
      a2[1] = *a1;
      if (a3 >= 0x18)
      {
        a2[2] = a1[1];
        if (a3 >= 0x20)
        {
          a2[3] = a1[2];
          if (a3 >= 0x28)
          {
            a2[4] = a1[3];
            if (a3 >= 0x30)
            {
              a2[5] = a1[4];
              if (a3 >= 0x38)
              {
                a2[6] = a1[5];
                if (a3 >= 0x40)
                {
                  a2[7] = a1[6];
                  if (a3 >= 0x48)
                  {
                    a2[8] = a1[7];
                    if (a3 >= 0x50)
                    {
                      a2[9] = a1[8];
                      if (a3 >= 0x58) {
                        a2[10] = a1[9];
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 88;
}

uint64_t EncodeDYMPSPluginCNNConvolutionDescriptor(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 < 8) {
    goto LABEL_20;
  }
  *(void *)a2 = 81;
  if (a3 < 0x10) {
    goto LABEL_20;
  }
  *(void *)(a2 + 8) = *(unsigned __int8 *)(a1 + 52);
  if (a3 < 0x14) {
    goto LABEL_20;
  }
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 12);
  if (a3 < 0x15) {
    goto LABEL_20;
  }
  uint64_t v6 = (void *)(a2 + 20);
  size_t v7 = a3 - 20 >= 4 ? 4 : a3 - 20;
  bzero(v6, v7);
  if (a3 < 0x1C) {
    goto LABEL_20;
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 16);
  if (a3 < 0x1D) {
    goto LABEL_20;
  }
  size_t v8 = a3 - 28 >= 4 ? 4 : a3 - 28;
  bzero((void *)(a2 + 28), v8);
  if (a3 < 0x24) {
    goto LABEL_20;
  }
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 20);
  if (a3 <= 0x24) {
    goto LABEL_20;
  }
  if (a3 - 36 >= 4) {
    size_t v9 = 4;
  }
  else {
    size_t v9 = a3 - 36;
  }
  bzero((void *)(a2 + 36), v9);
  size_t v10 = *(unsigned int *)(a1 + 8);
  if (a3 >= 0x30)
  {
    *(void *)(a2 + 40) = v10;
LABEL_20:
    size_t v10 = *(unsigned int *)(a1 + 8);
  }
  if (*(void *)a1) {
    BOOL v11 = v10 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11)
  {
    uint64_t v12 = 48;
  }
  else
  {
    size_t v13 = v10 + 48;
    if (a3 >= v10 + 48) {
      memcpy((void *)(a2 + 48), *(const void **)a1, v10);
    }
    uint64_t v14 = (v10 + 7) & 0x1FFFFFFF8;
    if (a3 > v13)
    {
      if (a3 - v13 >= v14 - v10) {
        size_t v15 = v14 - v10;
      }
      else {
        size_t v15 = a3 - v13;
      }
      bzero((void *)(a2 + v13), v15);
    }
    uint64_t v12 = v14 + 48;
  }
  if (v12 + 8 <= a3) {
    *(void *)(a2 + v12) = *(unsigned int *)(a1 + 24);
  }
  if (v12 + 16 <= a3) {
    *(void *)(a2 + v12 + 8) = *(unsigned int *)(a1 + 28);
  }
  if (v12 + 24 <= a3) {
    *(void *)(a2 + v12 + 16) = *(unsigned __int8 *)(a1 + 53);
  }
  if (v12 + 32 <= a3) {
    *(void *)(a2 + v12 + 24) = *(unsigned __int8 *)(a1 + 54);
  }
  if (v12 + 40 <= a3) {
    *(void *)(a2 + v12 + 32) = *(unsigned int *)(a1 + 32);
  }
  if (v12 + 48 <= a3) {
    *(void *)(a2 + v12 + 40) = *(unsigned int *)(a1 + 36);
  }
  if (v12 + 56 <= a3) {
    *(void *)(a2 + v12 + 48) = *(unsigned int *)(a1 + 40);
  }
  if (v12 + 64 <= a3) {
    *(void *)(a2 + v12 + 56) = *(unsigned int *)(a1 + 44);
  }
  if (v12 + 72 <= a3) {
    *(void *)(a2 + v12 + 64) = *(unsigned int *)(a1 + 48);
  }
  if (v12 + 80 <= a3) {
    *(void *)(a2 + v12 + 72) = *(unsigned __int8 *)(a1 + 55);
  }
  if (v12 + 88 <= a3) {
    *(void *)(a2 + v12 + 80) = *(unsigned __int8 *)(a1 + 56);
  }
  if (v12 + 96 <= a3) {
    *(void *)(a2 + v12 + 88) = *(unsigned __int8 *)(a1 + 57);
  }
  uint64_t result = v12 + 104;
  if (v12 + 104 <= a3) {
    *(void *)(a2 + v12 + 96) = *(unsigned __int8 *)(a1 + 58);
  }
  return result;
}

void *DecodeDYMPSPluginCNNConvolutionDescriptor(void *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = result[1];
  int v6 = *((_DWORD *)result + 4);
  int v7 = *((_DWORD *)result + 6);
  int v8 = *((_DWORD *)result + 8);
  size_t v9 = result[5];
  unint64_t v10 = (unint64_t)result + ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 48;
  int32x4_t v11 = *(int32x4_t *)v10;
  int64x2_t v12 = *(int64x2_t *)(v10 + 16);
  int32x4_t v13 = *(int32x4_t *)(v10 + 32);
  int64x2_t v14 = *(int64x2_t *)(v10 + 48);
  uint64_t v15 = *(void *)(v10 + 64);
  int64x2_t v16 = *(int64x2_t *)(v10 + 72);
  uint64_t v18 = *(void *)(v10 + 88);
  uint64_t v17 = *(void *)(v10 + 96);
  uint64_t v19 = *(char **)(a3 + 72);
  *(void *)(a3 + 72) = &v19[v9];
  if (a4)
  {
    if (v9) {
      int v20 = v19;
    }
    else {
      int v20 = 0;
    }
    if (v9) {
      long long v21 = result + 6;
    }
    else {
      long long v21 = 0;
    }
    int32x4_t v28 = v13;
    int32x4_t v29 = v11;
    int64x2_t v26 = v12;
    int64x2_t v27 = v14;
    int64x2_t v25 = v16;
    uint64_t result = memcpy(v20, v21, v9);
    v22.i64[1] = v26.i64[1];
    int32x2_t v23 = vmovn_s64(v25);
    *(int32x2_t *)v22.i8 = vmovn_s64(v26);
    uint64_t v24 = *(void *)(a3 + 16);
    *(void *)uint64_t v24 = v20;
    *(_DWORD *)(v24 + 8) = v9;
    *(_DWORD *)(v24 + 12) = v6;
    *(_DWORD *)(v24 + 16) = v7;
    *(_DWORD *)(v24 + 20) = v8;
    *(int32x4_t *)(v24 + 24) = vuzp1q_s32(v29, v28);
    *(int32x2_t *)(v24 + 40) = vmovn_s64(v27);
    *(_DWORD *)(v24 + 48) = v15;
    *(unsigned char *)(v24 + 52) = v5;
    v22.i16[1] = v22.i16[2];
    v22.i16[2] = v23.i16[0];
    v22.i16[3] = v23.i16[2];
    *(_DWORD *)(v24 + 53) = vmovn_s16(v22).u32[0];
    *(unsigned char *)(v24 + 57) = v18;
    *(unsigned char *)(v24 + 58) = v17;
    *(unsigned char *)(v24 + 63) = 0;
    *(_DWORD *)(v24 + 59) = 0;
  }
  *(void *)(a3 + 16) += 64;
  return result;
}

uint64_t EncodeDYMPSPluginCNNConvolutionData(unsigned int *a1, void *a2, unint64_t a3)
{
  uint64_t v6 = a1[15];
  size_t v7 = 4 * v6;
  unsigned int v8 = a1[2];
  if (v8 == 2)
  {
    char v11 = 0;
    size_t v10 = 0;
    size_t v9 = 1024;
  }
  else
  {
    size_t v9 = 0;
    if (v8 == 1) {
      size_t v10 = 8 * v6;
    }
    else {
      size_t v10 = 0;
    }
    char v11 = 1;
  }
  size_t v12 = a1[14];
  uint64_t v13 = *((void *)a1 + 6);
  if (v13)
  {
    int64x2_t v14 = *(const void **)v13;
    uint64_t v15 = *(const void **)(v13 + 8);
    size_t v16 = 4 * v6;
  }
  else
  {
    size_t v16 = 0;
    int64x2_t v14 = 0;
    uint64_t v15 = 0;
  }
  if (a3 >= 8)
  {
    *a2 = 81;
    if (a3 >= 0x10)
    {
      a2[1] = *a1;
      if (a3 >= 0x18)
      {
        a2[2] = (int)a1[1];
        if (a3 >= 0x20)
        {
          a2[3] = a1[2];
          if (a3 >= 0x28) {
            a2[4] = v12;
          }
        }
      }
    }
  }
  uint64_t v17 = (const void *)*((void *)a1 + 2);
  uint64_t v18 = 40;
  long long v56 = v15;
  size_t v57 = v10;
  if (v17 && v12)
  {
    int v55 = v14;
    size_t v19 = v12 + 40;
    if (a3 >= v12 + 40)
    {
      size_t v20 = v9;
      char v21 = v11;
      int v22 = v6;
      memcpy(a2 + 5, v17, v12);
      LODWORD(v6) = v22;
      char v11 = v21;
      size_t v9 = v20;
    }
    uint64_t v23 = (v12 + 7) & 0x1FFFFFFF8;
    if (a3 > v19)
    {
      char v53 = v11;
      uint64_t v24 = (char *)a2 + v19;
      if (a3 - v19 >= v23 - v12) {
        size_t v25 = v23 - v12;
      }
      else {
        size_t v25 = a3 - v19;
      }
      size_t v26 = v9;
      int v27 = v6;
      bzero(v24, v25);
      LODWORD(v6) = v27;
      char v11 = v53;
      size_t v9 = v26;
    }
    uint64_t v18 = v23 + 40;
    uint64_t v15 = v56;
    size_t v10 = v57;
    int64x2_t v14 = v55;
  }
  uint64_t v28 = v18 + 8;
  if (v18 + 8 <= a3) {
    *(void *)((char *)a2 + v18) = v7;
  }
  int32x4_t v29 = (const void *)*((void *)a1 + 3);
  if (v29 && v6)
  {
    unsigned int v30 = v14;
    size_t v31 = v28 + v7;
    if (a3 >= v28 + v7)
    {
      size_t v32 = v9;
      char v33 = v11;
      memcpy((char *)a2 + v28, v29, v7);
      char v11 = v33;
      size_t v9 = v32;
    }
    uint64_t v34 = (v7 + 7) & 0x7FFFFFFF8;
    if (a3 > v31)
    {
      char v54 = v11;
      unint64_t v35 = (char *)a2 + v31;
      if (a3 - v31 >= v34 - v7) {
        size_t v36 = v34 - v7;
      }
      else {
        size_t v36 = a3 - v31;
      }
      size_t v37 = v9;
      bzero(v35, v36);
      char v11 = v54;
      size_t v9 = v37;
    }
    v28 += v34;
    int64x2_t v14 = v30;
    uint64_t v15 = v56;
    size_t v10 = v57;
  }
  uint64_t v38 = v28 + 8;
  if (v28 + 8 <= a3) {
    *(void *)((char *)a2 + v28) = v9;
  }
  char v39 = (const void *)*((void *)a1 + 4);
  if (!v39) {
    char v11 = 1;
  }
  uint64_t v40 = v28 + 8;
  if ((v11 & 1) == 0)
  {
    uint64_t v40 = v38 + v9;
    if (v38 + v9 <= a3) {
      memcpy((char *)a2 + v38, v39, v9);
    }
  }
  uint64_t v41 = v40 + 8;
  if (v40 + 8 <= a3) {
    *(void *)((char *)a2 + v40) = v10;
  }
  uint64_t v42 = (const void *)*((void *)a1 + 5);
  if (v42 && v10)
  {
    uint64_t v43 = v41 + v10;
    if (v41 + v10 <= a3) {
      memcpy((char *)a2 + v41, v42, v10);
    }
    uint64_t v41 = v43;
  }
  uint64_t v44 = v41 + 8;
  if (v41 + 8 <= a3) {
    *(void *)((char *)a2 + v41) = v16;
  }
  if (v14 && v16)
  {
    size_t v45 = v44 + v16;
    if (a3 >= v44 + v16) {
      memcpy((char *)a2 + v44, v14, v16);
    }
    uint64_t v46 = (v16 + 7) & 0x7FFFFFFF8;
    if (a3 > v45)
    {
      if (a3 - v45 >= v46 - v16) {
        size_t v47 = v46 - v16;
      }
      else {
        size_t v47 = a3 - v45;
      }
      bzero((char *)a2 + v45, v47);
    }
    v44 += v46;
  }
  uint64_t v48 = v44 + 8;
  if (v44 + 8 <= a3) {
    *(void *)((char *)a2 + v44) = v16;
  }
  if (v15 && v16)
  {
    size_t v49 = v48 + v16;
    if (a3 >= v48 + v16) {
      memcpy((char *)a2 + v48, v15, v16);
    }
    uint64_t v50 = (v16 + 7) & 0x7FFFFFFF8;
    if (a3 > v49)
    {
      if (a3 - v49 >= v50 - v16) {
        size_t v51 = v50 - v16;
      }
      else {
        size_t v51 = a3 - v49;
      }
      bzero((char *)a2 + v49, v51);
    }
    v48 += v50;
  }
  return v48;
}

void *DecodeDYMPSPluginCNNConvolutionData(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  int32x2_t v6 = vmovn_s64(*(int64x2_t *)(a1 + 8));
  __int32 v7 = *(_DWORD *)(a1 + 24);
  size_t v8 = *(void *)(a1 + 32);
  size_t v9 = (const void *)(a1 + 40);
  size_t v10 = (unint64_t *)(a1 + 40 + ((v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v13 = *v10;
  char v11 = v10 + 1;
  unint64_t v12 = v13;
  int64x2_t v14 = (void *)((char *)v11 + ((v13 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v17 = *v14;
  uint64_t v15 = v14 + 1;
  uint64_t v16 = v17;
  if (v17) {
    uint64_t v18 = v15;
  }
  else {
    uint64_t v18 = 0;
  }
  size_t v19 = (void *)((char *)v15 + ((v16 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v22 = *v19;
  size_t v20 = v19 + 1;
  uint64_t v21 = v22;
  if (v22) {
    uint64_t v23 = v20;
  }
  else {
    uint64_t v23 = 0;
  }
  uint64_t v24 = (void *)((char *)v20 + ((v21 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v27 = *v24;
  size_t v25 = v24 + 1;
  uint64_t v26 = v27;
  if (v27) {
    uint64_t v28 = v25;
  }
  else {
    uint64_t v28 = 0;
  }
  int32x4_t v29 = (void *)((char *)v25 + ((v26 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v32 = *v29;
  unsigned int v30 = v29 + 1;
  uint64_t v31 = v32;
  if (v32) {
    char v33 = v30;
  }
  else {
    char v33 = 0;
  }
  if (v8) {
    uint64_t result = (void *)a3[9];
  }
  else {
    uint64_t result = 0;
  }
  a3[9] += v8;
  __int32 v53 = v7;
  int32x2_t v54 = v6;
  int32x2_t v52 = (int32x2_t)result;
  __src = v28;
  uint64_t v50 = v33;
  if (a4)
  {
    if (v12) {
      unint64_t v35 = v11;
    }
    else {
      unint64_t v35 = 0;
    }
    if (v8) {
      size_t v36 = v9;
    }
    else {
      size_t v36 = 0;
    }
    memcpy(result, v36, v8);
    uint64_t v37 = (v12 >> 2);
    if ((v12 >> 2)) {
      uint64_t v38 = (void *)a3[8];
    }
    else {
      uint64_t v38 = 0;
    }
    a3[8] += 4 * v37;
    int32x2_t v51 = (int32x2_t)v38;
    uint64_t result = memcpy(v38, v35, 4 * v37);
    int32x2_t v6 = v54;
  }
  else
  {
    uint64_t v37 = (v12 >> 2);
    if ((v12 >> 2)) {
      int32x2_t v39 = (int32x2_t)a3[8];
    }
    else {
      int32x2_t v39 = 0;
    }
    int32x2_t v51 = v39;
    a3[8] += 4 * v37;
  }
  if (v6.i32[0] == 2)
  {
    uint64_t v41 = (char *)a3[8];
    a3[8] = v41 + 1024;
    if (a4)
    {
      uint64_t result = memcpy(v41, v18, 0x400uLL);
      int32x2_t v6 = v54;
    }
    goto LABEL_42;
  }
  if (v6.i32[0] != 1)
  {
    uint64_t v41 = 0;
LABEL_42:
    uint64_t v40 = 0;
    goto LABEL_43;
  }
  if (v37) {
    uint64_t v40 = (void *)a3[7];
  }
  else {
    uint64_t v40 = 0;
  }
  a3[7] += 8 * v37;
  if (a4)
  {
    uint64_t result = memcpy(v40, v23, 8 * v37);
    int32x2_t v6 = v54;
  }
  uint64_t v41 = 0;
LABEL_43:
  if (!(v26 + v31))
  {
    int32x2_t v42 = 0;
    if (!a4) {
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  uint64_t v43 = (char *)a3[8];
  uint64_t v44 = &v43[4 * v37];
  a3[8] = v44;
  if (a4)
  {
    if (v37) {
      size_t v45 = v43;
    }
    else {
      size_t v45 = 0;
    }
    memcpy(v45, __src, 4 * v37);
    if (v37) {
      uint64_t v46 = (void *)a3[8];
    }
    else {
      uint64_t v46 = 0;
    }
    a3[8] += 4 * v37;
    uint64_t result = memcpy(v46, v50, 4 * v37);
    int32x2_t v6 = v54;
    size_t v47 = (void *)a3[6];
    *size_t v47 = v45;
    v47[1] = v46;
  }
  else
  {
    a3[8] = &v44[4 * v37];
  }
  int32x2_t v42 = (int32x2_t)a3[6];
  a3[6] = *(void *)&v42 + 16;
  if (a4)
  {
LABEL_56:
    uint64_t v48 = (int32x2_t *)a3[3];
    *uint64_t v48 = v6;
    v48[1].i32[0] = v53;
    v48[1].i32[1] = 0;
    v48[2] = v52;
    v48[3] = v51;
    v48[4] = (int32x2_t)v41;
    v48[5] = (int32x2_t)v40;
    v48[6] = v42;
    v48[7].i32[0] = v8;
    v48[7].i32[1] = v12 >> 2;
  }
LABEL_57:
  a3[3] += 64;
  return result;
}

uint64_t EncodeDYMPSPluginNDArrayConvolutionDescriptor(unsigned __int8 *a1, void *a2, unint64_t a3)
{
  if (a3 >= 8) {
    *a2 = 81;
  }
  uint64_t v3 = 0;
  unsigned int v4 = a1;
  do
  {
    if (v3 * 8 + 16 <= a3) {
      a2[v3 + 1] = *(unsigned int *)v4;
    }
    ++v3;
    v4 += 4;
  }
  while (v3 != 3);
  if (a3 >= 0x28)
  {
    a2[4] = a1[36];
    if (a3 >= 0x30) {
      a2[5] = a1[37];
    }
  }
  uint64_t v5 = 0;
  int32x2_t v6 = (unsigned int *)(a1 + 12);
  do
  {
    if (v5 * 8 + 56 <= a3) {
      a2[v5 + 6] = *v6;
    }
    ++v5;
    ++v6;
  }
  while (v5 != 3);
  uint64_t v7 = 0;
  size_t v8 = (unsigned int *)(a1 + 24);
  do
  {
    if (v7 * 8 + 80 <= a3) {
      a2[v7 + 9] = *v8;
    }
    ++v7;
    ++v8;
  }
  while (v7 != 3);
  if (a3 >= 0x68)
  {
    a2[12] = a1[38];
    if (a3 >= 0x70)
    {
      a2[13] = a1[39];
      if (a3 >= 0x78)
      {
        a2[14] = a1[40];
        if (a3 >= 0x80)
        {
          a2[15] = a1[41];
          if (a3 >= 0x88) {
            a2[16] = a1[42];
          }
        }
      }
    }
  }
  return 136;
}

uint64_t DecodeDYMPSPluginNDArrayConvolutionDescriptor(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v4 = *(unsigned char **)(a3 + 32);
  *(void *)(a3 + 32) = v4 + 44;
  if (a4)
  {
    uint64_t v5 = 0;
    int32x2_t v6 = (uint64_t *)(result + 8);
    do
    {
      uint64_t v7 = v6;
      uint64_t v8 = *v6++;
      *(_DWORD *)&v4[v5] = v8;
      v5 += 4;
    }
    while (v5 != 12);
    uint64_t v9 = 0;
    v4[36] = *v6;
    uint64_t v10 = v6[1];
    char v11 = v7 + 3;
    v4[37] = v10;
    do
    {
      uint64_t v12 = *v11++;
      *(_DWORD *)&v4[v9 + 12] = v12;
      v9 += 4;
    }
    while (v9 != 12);
    for (uint64_t i = 0; i != 12; i += 4)
    {
      uint64_t v14 = *v11++;
      *(_DWORD *)&v4[i + 24] = v14;
    }
    v4[38] = *v11;
    v4[39] = v11[1];
    v4[40] = v11[2];
    v4[41] = v11[3];
    v4[42] = v11[4];
  }
  return result;
}

uint64_t EncodeDYMPSNDArrayStructure(uint64_t a1, void *a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    *a2 = 81;
    if (a3 >= 0x10) {
      a2[1] = *(void *)a1;
    }
  }
  uint64_t v3 = 0;
  unsigned int v4 = (int *)(a1 + 8);
  do
  {
    if (v3 * 8 + 24 <= a3) {
      a2[v3 + 2] = *v4;
    }
    ++v3;
    ++v4;
  }
  while (v3 != 4);
  uint64_t v5 = 0;
  int32x2_t v6 = (int *)(a1 + 24);
  do
  {
    if (v5 * 8 + 56 <= a3) {
      a2[v5 + 6] = *v6;
    }
    ++v5;
    ++v6;
  }
  while (v5 != 4);
  if (a3 >= 0x58) {
    a2[10] = *(unsigned int *)(a1 + 40);
  }
  return 88;
}

uint64_t DecodeDYMPSNDArrayStructure(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(a3 + 40);
  *(void *)(a3 + 40) = v4 + 48;
  if (a4)
  {
    uint64_t v5 = 0;
    int32x2_t v6 = (uint64_t *)(result + 16);
    *(void *)uint64_t v4 = *(void *)(result + 8);
    do
    {
      uint64_t v7 = *v6++;
      *(_DWORD *)(v4 + 8 + v5) = v7;
      v5 += 4;
    }
    while (v5 != 16);
    uint64_t v8 = 0;
    uint64_t v9 = (_DWORD *)(v4 + 24);
    do
      *v9++ = v6[v8++];
    while (v8 != 4);
    *(_DWORD *)(v4 + 40) = v6[4];
  }
  return result;
}

unsigned char *GTMTLArgument_bufferPointerType(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16)) {
    return 0;
  }
  uint64_t result = *(unsigned char **)(a1 + 8);
  if (!result || *result != 60) {
    return 0;
  }
  return result;
}

unsigned __int8 *GTMTLBinding_bufferStructType(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) > 1u) {
    return 0;
  }
  uint64_t result = *(unsigned __int8 **)(a1 + 8);
  if (!result) {
    return 0;
  }
  int v2 = *result;
  if (v2 == 1) {
    return result;
  }
  if (v2 == 60 && result[22] == 1) {
    return (unsigned __int8 *)*((void *)result + 1);
  }
  else {
    return 0;
  }
}

uint64_t GTMTLBinding_imageBlockMasterStructMembers(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 != 17 && v1 != 16) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    return *(void *)(a1 + 8);
  }
  return v2;
}

BOOL GTMTLRenderPipelineReflection_isDrawCall(unsigned __int16 *a1)
{
  return a1[104] + a1[99] + a1[100] + a1[102] + a1[105] + a1[103] + a1[106] != 0;
}

uint64_t GTMTLRenderPipelineReflection_resourceAccess@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 272) = 0;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  uint64_t v4 = *(void *)(a1 + 72);
  if (v4) {
    CalculateBindingsAccess(v4, *(unsigned __int16 *)(a1 + 208), a2);
  }
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5) {
    CalculateBindingsAccess(v5, *(unsigned __int16 *)(a1 + 198), a2);
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    CalculateBindingsAccess(v6, *(unsigned __int16 *)(a1 + 200), a2 + 56);
  }
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    CalculateBindingsAccess(v7, *(unsigned __int16 *)(a1 + 204), a2 + 112);
  }
  uint64_t v8 = *(void *)(a1 + 80);
  if (v8) {
    CalculateBindingsAccess(v8, *(unsigned __int16 *)(a1 + 210), a2 + 112);
  }
  uint64_t v9 = *(void *)(a1 + 48);
  if (v9) {
    CalculateBindingsAccess(v9, *(unsigned __int16 *)(a1 + 206), a2 + 168);
  }
  uint64_t v10 = *(void *)(a1 + 88);
  if (v10) {
    CalculateBindingsAccess(v10, *(unsigned __int16 *)(a1 + 212), a2 + 168);
  }
  uint64_t result = *(void *)(a1 + 56);
  if (result)
  {
    int v12 = *(unsigned __int16 *)(a1 + 202);
    return CalculateBindingsAccess(result, v12, a2 + 224);
  }
  return result;
}

uint64_t CalculateBindingsAccess(uint64_t result, int a2, uint64_t a3)
{
  if (a2 >= 1)
  {
    uint64_t v4 = result;
    uint64_t v5 = a3 + 16;
    for (uint64_t i = a2; i; --i)
    {
      if ((*(unsigned char *)(v4 + 19) & 1) == 0) {
        goto LABEL_9;
      }
      int v7 = *(unsigned __int8 *)(v4 + 16);
      if ((v7 - 24) >= 4)
      {
        if (v7 == 2)
        {
          uint64_t v8 = (unsigned char *)v4;
          uint64_t v9 = v5;
          goto LABEL_8;
        }
        if (*(unsigned char *)(v4 + 16)) {
          goto LABEL_9;
        }
      }
      uint64_t v8 = (unsigned char *)v4;
      uint64_t v9 = a3;
LABEL_8:
      uint64_t result = (uint64_t)UpdateAccess(v8, v9);
LABEL_9:
      if (*(unsigned __int8 *)(v4 + 16) <= 1u)
      {
        uint64_t result = *(void *)(v4 + 8);
        if (result)
        {
          int v10 = *(unsigned __int8 *)result;
          if (v10 == 1 || v10 == 60 && *(unsigned char *)(result + 22) == 1 && (uint64_t result = *(void *)(result + 8)) != 0)
          {
            uint64_t result = GTMTLStructType_isArgumentBuffer(result);
            if (result) {
              *(void *)(a3 + (((unint64_t)*(unsigned __int8 *)(v4 + 18) >> 3) & 0x18) + 48) |= 1 << *(unsigned char *)(v4 + 18);
            }
          }
        }
      }
      v4 += 56;
    }
  }
  return result;
}

unsigned char *UpdateAccess(unsigned char *result, uint64_t a2)
{
  uint64_t v2 = result[18];
  if (result[16] != 2)
  {
    uint64_t v3 = v2 + 1;
    goto LABEL_5;
  }
  if (result[26])
  {
    uint64_t v3 = result[26] + v2;
LABEL_5:
    int v4 = result[17];
    while (1)
    {
      unsigned int v5 = v2 >> 6;
      if (v4 == 2) {
        break;
      }
      if (v4 == 1)
      {
        uint64_t v6 = 1 << v2;
        uint64_t v8 = (void *)(a2 + 16 * v5);
        *v8 |= 1 << v2;
        int v7 = v8 + 1;
        goto LABEL_12;
      }
      if (!v4)
      {
        uint64_t v6 = 1 << v2;
        int v7 = (void *)(a2 + 16 * v5);
LABEL_12:
        *v7 |= v6;
      }
      if (v3 == ++v2) {
        return result;
      }
    }
    uint64_t v6 = 1 << v2;
    int v7 = (void *)(a2 + 16 * v5 + 8);
    goto LABEL_12;
  }
  return result;
}

BOOL GTMTLStructType_isArgumentBuffer(uint64_t a1)
{
  if (a1)
  {
    unint64_t v1 = *(unsigned int *)(a1 + 16);
    if (v1)
    {
      uint64_t v2 = 0;
      uint64_t v3 = *(void *)(a1 + 8);
      BOOL v4 = 1;
      while (1)
      {
        unsigned int v5 = *(unsigned __int8 *)(v3 + 32 * v2 + 24);
        if (v5 <= 1)
        {
          if (v5 == 1)
          {
            uint64_t v6 = v3 + 32 * v2;
LABEL_17:
            if (GTMTLStructType_isArgumentBuffer(*(void *)(v6 + 8))) {
              return v4;
            }
          }
        }
        else if (v5 == 2)
        {
          uint64_t v6 = v3 + 32 * v2;
          do
          {
            uint64_t v6 = *(void *)(v6 + 8);
            int v7 = *(unsigned __int8 *)(v6 + 24);
          }
          while (v7 == 2);
          if ((v7 - 58) <= 0x3C && ((1 << (v7 - 58)) & 0x1E00000000700007) != 0) {
            return v4;
          }
          if (v7 == 1) {
            goto LABEL_17;
          }
        }
        else
        {
          BOOL v9 = v5 - 78 > 0x28 || ((1 << (v5 - 78)) & 0x1E000000007) == 0;
          if (!v9 || v5 - 58 < 3) {
            return v4;
          }
        }
        BOOL v4 = ++v2 < v1;
        if (v2 == v1) {
          return v4;
        }
      }
    }
  }
  return 0;
}

uint64_t GTMTLComputePipelineReflection_resourceAccess@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    CalculateBindingsAccess(v4, *(unsigned __int16 *)(a1 + 92), a2);
  }
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    int v6 = *(unsigned __int16 *)(a1 + 94);
    return CalculateBindingsAccess(result, v6, a2);
  }
  return result;
}

uint64_t DataTypeToPixelFormat(char a1)
{
  if ((a1 - 62) > 0xFu) {
    return 0;
  }
  else {
    return word_1DFC40[(a1 - 62)];
  }
}

void *GTMTLPipelineReflectionAllocator_copyData(uint64_t a1, const void *a2, size_t __n, int a4)
{
  if (__n) {
    uint64_t v4 = *(void **)(a1 + 184);
  }
  else {
    uint64_t v4 = 0;
  }
  *(void *)(a1 + 184) += __n;
  if (a4) {
    memcpy(v4, a2, __n);
  }
  return v4;
}

uint64_t GTMTLPipelineReflectionAllocator_size(uint64_t a1)
{
  uint64_t v1 = 0;
  int64x2_t v2 = 0uLL;
  int64x2_t v3 = vdupq_n_s64(7uLL);
  int8x16_t v4 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFF8);
  do
  {
    int64x2_t v2 = vaddq_s64((int64x2_t)vandq_s8((int8x16_t)vaddq_s64(*(int64x2_t *)(a1 + v1), v3), v4), v2);
    v1 += 16;
  }
  while (v1 != 192);
  return vaddvq_s64(v2);
}

uint64_t GTMTLPipelineReflectionAllocator_rebase(uint64_t result, uint64_t a2)
{
  for (uint64_t i = 0; i != 192; i += 8)
  {
    if (((*(void *)(result + i) + 7) & 0xFFFFFFFFFFFFFFF8) != 0) {
      uint64_t v3 = a2;
    }
    else {
      uint64_t v3 = 0;
    }
    a2 += (*(void *)(result + i) + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(result + i) = v3;
  }
  return result;
}

uint64_t GTTraceDump_writeDeviceResources(uint64_t a1, apr_pool_t *a2, apr_pool_t *p)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = (char *)apr_palloc(p, 0x100000uLL);
  uint64_t v52 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(*(void *)(*find_entry(v6, &v52, 8uLL, 0) + 32) + 8);
  snprintf(v8, 0x100000uLL, "device-resources-0x%llx", v9);
  uint64_t v43 = v9;
  uint64_t v44 = v8;
  int v10 = *(_DWORD *)(a1 + 484);
  int v45 = 0x100000;
  int v46 = v10;
  char v11 = fbstream_open(a2, (uint64_t)v8, p);
  data = v11;
  uint64_t v48 = a2;
  uint64_t v49 = 0;
  char v50 = *(unsigned char *)(a1 + 488);
  memset(v51, 0, sizeof(v51));
  Object = GTMTLSMContext_getObject(*(uint64_t **)(a1 + 568), v7, *(void *)(a1 + 40));
  uint64_t v52 = v9;
  int v53 = 7;
  long long v54 = 0u;
  long long v55 = 0u;
  int v56 = 0;
  DWORD1(v54) = 2;
  GTTrace_storePointer((uint64_t)&v43, -12272, (uint64_t)&v52, v8 + 1048064, 512, v6);
  DYTraceEncode_InternalData((uint64_t)&v52, (unsigned int *)v8, 0x100000uLL, v13, 0);
  unsigned int v14 = *((_DWORD *)v8 + 8);
  *((_DWORD *)v8 + 8) = v14 | 0x46;
  unint64_t v15 = *(unsigned int *)v8;
  if ((v14 & 0x1000) != 0)
  {
    uint64_t v16 = *(unsigned int *)v8;
    uint64_t v17 = (unsigned int *)v8;
    do
    {
      uint64_t v17 = (unsigned int *)((char *)v17 + v16);
      uint64_t v16 = *v17;
      v15 += v16;
    }
    while ((*((unsigned char *)v17 + 33) & 0x20) == 0);
  }
  fbstream_write((uint64_t)v11, (uint64_t)v8, v15);
  uint64_t v18 = Object[5];
  uint64_t v52 = 512;
  size_t v19 = (const char *)StoreMTLDeviceDescriptorUsingEncode((uint64_t)a2, v18, (uint64_t)(v8 + 1048064), &v52);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *((void *)v8 + 3) = 0;
  *((void *)v8 + 4) = 0x554300000000;
  *(void *)uint64_t v8 = 0xFFFFD80100000028;
  *((void *)v8 + 5) = v9;
  *(_DWORD *)uint64_t v8 = 48;
  AppendString(v19, (int *)v8);
  uint64_t v20 = *(unsigned int *)v8;
  unint64_t v21 = (v20 + 3) & 0xFFFFFFFC;
  bzero(&v8[v20], v21 - v20);
  *(_DWORD *)uint64_t v8 = v21;
  if ((v8[33] & 0x10) != 0)
  {
    LODWORD(v22) = v21;
    uint64_t v23 = (unsigned int *)v8;
    do
    {
      uint64_t v23 = (unsigned int *)((char *)v23 + v22);
      uint64_t v22 = *v23;
      v21 += v22;
    }
    while ((*((unsigned char *)v23 + 33) & 0x20) == 0);
  }
  fbstream_write((uint64_t)v11, (uint64_t)v8, v21);
  uint64_t v25 = 0;
  uint64_t v26 = (_OWORD **)(a1 + 64);
  do
  {
    uint64_t v27 = *v26++;
    uint64_t v28 = &v52 + v25;
    long long v29 = v27[1];
    *(_OWORD *)uint64_t v28 = *v27;
    *((_OWORD *)v28 + 1) = v29;
    unsigned int v30 = (const float *)(a1 + 344 + v25);
    float32x2_t v31 = vld1_dup_f32(v30);
    *(uint64_t *)((char *)v28 + 12) = (uint64_t)v31;
    *uint64_t v28 = 0;
    v25 += 4;
  }
  while (v25 != 140);
  v42[0] = v9;
  v42[1] = "root";
  v42[2] = 0;
  v42[3] = 0;
  DYTraceEncode_EnterStateGroup((uint64_t)v42, (unsigned int *)v8, 0x100000uLL, v24, 0);
  uint64_t v32 = *(unsigned int *)v8;
  if ((v8[33] & 0x10) != 0)
  {
    uint64_t v34 = (unsigned int *)v8;
    unint64_t v33 = *(unsigned int *)v8;
    do
    {
      uint64_t v34 = (unsigned int *)((char *)v34 + v32);
      uint64_t v32 = *v34;
      v33 += v32;
    }
    while ((*((unsigned char *)v34 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v33 = *(unsigned int *)v8;
  }
  fbstream_write((uint64_t)v11, (uint64_t)v8, v33);
  DumpDeviceResources((uint64_t)&v43, a1, (const apr_array_header_t *)&v52, (uint64_t)p);
  uint64_t v35 = v43;
  size_t v36 = v44;
  *((void *)v44 + 1) = 0;
  *((void *)v36 + 2) = 0;
  *((void *)v36 + 3) = 0;
  *((void *)v36 + 4) = 0x4300000046;
  *(void *)size_t v36 = 0xFFFFD00800000028;
  *((void *)v36 + 5) = v35;
  *(_DWORD *)size_t v36 = 48;
  uint64_t v37 = *(unsigned int *)v44;
  if ((v44[33] & 0x10) != 0)
  {
    int32x2_t v39 = (unsigned int *)v44;
    unint64_t v38 = *(unsigned int *)v44;
    do
    {
      int32x2_t v39 = (unsigned int *)((char *)v39 + v37);
      uint64_t v37 = *v39;
      v38 += v37;
    }
    while ((*((unsigned char *)v39 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v38 = *(unsigned int *)v44;
  }
  fbstream_write((uint64_t)data, (uint64_t)v44, v38);
  uint64_t v40 = data;
  apr_pool_cleanup_kill(*(apr_pool_t **)data, data, (apr_status_t (__cdecl *)(void *))fbstream_cleanup);
  return fbstream_cleanup((uint64_t)v40);
}

void DumpDeviceResources(uint64_t a1, uint64_t a2, const apr_array_header_t *a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v1575 = *(void *)(a2 + 496);
  uint64_t v9 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "heaps";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v9, *(unsigned int *)(a1 + 16), a4, 0);
  int v10 = *(unsigned int **)(a1 + 8);
  uint64_t v11 = *v10;
  if ((*((unsigned char *)v10 + 33) & 0x10) != 0)
  {
    uint64_t v13 = *(unsigned int **)(a1 + 8);
    unint64_t v12 = *v10;
    do
    {
      uint64_t v13 = (unsigned int *)((char *)v13 + v11);
      uint64_t v11 = *v13;
      v12 += v11;
    }
    while ((*((unsigned char *)v13 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v12 = *v10;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v10, v12);
  uint64_t v1582 = v8;
  v1567 = (apr_pool_t *)a4;
  if (a3[9].nelts < 1) {
    goto LABEL_224;
  }
  uint64_t v14 = 0;
  do
  {
    uint64_t v15 = *(void *)&a3[9].elts[8 * v14];
    if (v15) {
      uint64_t v16 = *(void *)(v15 + 8);
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = *(void *)(a2 + 16);
    *(void *)__str = v16;
    uint64_t v19 = *find_entry(v17, __str, 8uLL, 0);
    if (v19) {
      uint64_t v19 = *(void *)(v19 + 32);
    }
    uint64_t v1570 = v19;
    unint64_t v20 = *(void *)(v19 + 8);
    unint64_t v21 = *(unsigned int **)(a1 + 8);
    *(void *)__str = *(void *)a1;
    *(void *)&__str[8] = "heap";
    *(_OWORD *)&__str[16] = v20;
    DYTraceEncode_EnterStateGroup((uint64_t)__str, v21, *(unsigned int *)(a1 + 16), v18, 0);
    uint64_t v22 = *(unsigned int **)(a1 + 8);
    uint64_t v23 = *v22;
    uint64_t v1572 = v14;
    if ((*((unsigned char *)v22 + 33) & 0x10) != 0)
    {
      uint64_t v25 = *(unsigned int **)(a1 + 8);
      unint64_t v24 = *v22;
      do
      {
        uint64_t v25 = (unsigned int *)((char *)v25 + v23);
        uint64_t v23 = *v25;
        v24 += v23;
      }
      while ((*((unsigned char *)v25 + 33) & 0x20) == 0);
    }
    else
    {
      unint64_t v24 = *v22;
    }
    fbstream_write(*(void *)(a1 + 24), (uint64_t)v22, v24);
    uint64_t v26 = *(void *)(a1 + 8);
    *(void *)__str = *(void *)a1;
    *(void *)&__str[8] = v20;
    uint64_t v27 = *(void *)(v15 + 48);
    uint64_t v28 = v26 + *(unsigned int *)(a1 + 16) - 512;
    *(void *)__s = 512;
    *(void *)&__str[16] = StoreMTLHeapDescriptorUsingEncode(*(void *)(a1 + 32), v27, v28, __s);
    DYTraceEncode_MTLDevice_newHeapWithDescriptor((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
    long long v29 = *(unsigned int **)(a1 + 8);
    v29[8] |= 0x1000u;
    uint64_t v30 = *v29;
    float32x2_t v31 = (unsigned int *)((char *)v29 + v30);
    *(void *)__str = v20;
    *(_DWORD *)&__str[8] = 118;
    memset(&__str[12], 0, 36);
    *(void *)&__str[16] = *(unsigned int *)(v15 + 72);
    DYTraceEncode_InternalData((uint64_t)__str, (unsigned int *)((char *)v29 + v30), *(unsigned int *)(a1 + 16) - v30, v32, 0);
    unint64_t v33 = (unsigned int *)((char *)v31 + *v31);
    *(void *)__s = v20;
    LODWORD(v1615[0]) = 125;
    memset((char *)v1615 + 4, 0, 36);
    v1615[2] = *(unsigned int *)(v15 + 76);
    DYTraceEncode_InternalData((uint64_t)__s, v33, *(void *)(a1 + 8) - (void)v33 + *(unsigned int *)(a1 + 16), v34, 0);
    v33[8] |= 0x2000u;
    uint64_t v35 = *(unsigned int **)(a1 + 8);
    unint64_t v36 = *v35;
    if ((*((unsigned char *)v35 + 33) & 0x10) != 0)
    {
      uint64_t v37 = *v35;
      unint64_t v38 = *(unsigned int **)(a1 + 8);
      do
      {
        unint64_t v38 = (unsigned int *)((char *)v38 + v37);
        uint64_t v37 = *v38;
        v36 += v37;
      }
      while ((*((unsigned char *)v38 + 33) & 0x20) == 0);
    }
    fbstream_write(*(void *)(a1 + 24), (uint64_t)v35, v36);
    *(void *)__str = v20;
    *(_DWORD *)&__str[8] = 118;
    memset(&__str[12], 0, 36);
    *(void *)&__str[16] = *(unsigned int *)(v15 + 72);
    GTTrace_storePointer(a1, -12272, (uint64_t)__str, (char *)(*(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512), 512, v17);
    DYTraceEncode_InternalData((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), v39, 0);
    uint64_t v40 = *(unsigned int **)(a1 + 8);
    uint64_t v41 = *v40;
    if ((*((unsigned char *)v40 + 33) & 0x10) != 0)
    {
      uint64_t v43 = *(unsigned int **)(a1 + 8);
      unint64_t v42 = *v40;
      do
      {
        uint64_t v43 = (unsigned int *)((char *)v43 + v41);
        uint64_t v41 = *v43;
        v42 += v41;
      }
      while ((*((unsigned char *)v43 + 33) & 0x20) == 0);
    }
    else
    {
      unint64_t v42 = *v40;
    }
    fbstream_write(*(void *)(a1 + 24), (uint64_t)v40, v42);
    if (*(void *)(v15 + 56)) {
      uint64_t v44 = *(const char **)(v15 + 56);
    }
    else {
      uint64_t v44 = "";
    }
    int v45 = *(unsigned int **)(a1 + 8);
    *((void *)v45 + 1) = 0;
    *((void *)v45 + 2) = 0;
    *((void *)v45 + 3) = 0;
    *((void *)v45 + 4) = 0x534300000000;
    *(void *)int v45 = 0xFFFFC10900000028;
    *((void *)v45 + 5) = v20;
    unsigned int *v45 = 48;
    AppendString(v44, (int *)v45);
    uint64_t v46 = *v45;
    uint64_t v47 = (v46 + 3) & 0xFFFFFFFC;
    bzero((char *)v45 + v46, v47 - v46);
    unsigned int *v45 = v47;
    uint64_t v48 = *(unsigned int **)(a1 + 8);
    uint64_t v49 = *v48;
    if ((*((unsigned char *)v48 + 33) & 0x10) != 0)
    {
      int32x2_t v51 = *(unsigned int **)(a1 + 8);
      unint64_t v50 = *v48;
      do
      {
        int32x2_t v51 = (unsigned int *)((char *)v51 + v49);
        uint64_t v49 = *v51;
        v50 += v49;
      }
      while ((*((unsigned char *)v51 + 33) & 0x20) == 0);
    }
    else
    {
      unint64_t v50 = *v48;
    }
    fbstream_write(*(void *)(a1 + 24), (uint64_t)v48, v50);
    uint64_t v52 = *(unsigned __int16 *)(v15 + 80);
    int v53 = *(void **)(a1 + 8);
    v53[2] = 0;
    v53[3] = 0;
    v53[1] = 0;
    v53[4] = 0x6C754300000000;
    *int v53 = 0xFFFFC10D00000028;
    v53[5] = v20;
    v53[6] = v52;
    *(_DWORD *)int v53 = 56;
    long long v54 = *(unsigned int **)(a1 + 8);
    uint64_t v55 = *v54;
    if ((*((unsigned char *)v54 + 33) & 0x10) != 0)
    {
      size_t v57 = *(unsigned int **)(a1 + 8);
      unint64_t v56 = *v54;
      do
      {
        size_t v57 = (unsigned int *)((char *)v57 + v55);
        uint64_t v55 = *v57;
        v56 += v55;
      }
      while ((*((unsigned char *)v57 + 33) & 0x20) == 0);
    }
    else
    {
      unint64_t v56 = *v54;
    }
    fbstream_write(*(void *)(a1 + 24), (uint64_t)v54, v56);
    int v58 = *(unsigned __int8 *)(*(void *)(v15 + 48) + 19);
    unint64_t v1571 = v20;
    if (v58 == 2)
    {
      uint64_t v234 = *(void *)(a2 + 16);
      uint64_t v235 = *(void *)(a2 + 496);
      uint64_t v236 = *(void *)(a2 + 520);
      *(void *)__str = *(void *)(v15 + 8);
      uint64_t v237 = *find_entry(v236, __str, 8uLL, 0);
      if (v237)
      {
        uint64_t v238 = *(void *)(v237 + 32);
        if (v238)
        {
          qsort(*(void **)(v238 + 24), *(int *)(v238 + 12), *(int *)(v238 + 8), (int (__cdecl *)(const void *, const void *))GTMTLSMObject_compare);
          *(void *)__str = *(void *)(v15 + 8);
          entry = find_entry(v234, __str, 8uLL, 0);
          int v240 = *(_DWORD *)(v238 + 12);
          if (v240 >= 1)
          {
            uint64_t v241 = 0;
            uint64_t v1578 = *(void *)(*(void *)(*entry + 32) + 8);
            do
            {
              uint64_t v242 = *(void *)(*(void *)(v238 + 24) + 8 * v241);
              if (*(_DWORD *)v242 == 80)
              {
                *(void *)__str = *(void *)(v242 + 8);
                uint64_t v243 = *(void *)(*find_entry(v234, __str, 8uLL, 0) + 32);
                uint64_t v244 = *(void *)(v243 + 8);
                v245 = *(unsigned int **)(a1 + 8);
                *(void *)__str = *(void *)a1;
                *(void *)&__str[8] = "texture";
                *(_OWORD *)&__str[16] = (unint64_t)v244;
                DYTraceEncode_EnterStateGroup((uint64_t)__str, v245, *(unsigned int *)(a1 + 16), v246, 0);
                v247 = *(unsigned int **)(a1 + 8);
                uint64_t v248 = *v247;
                if ((*((unsigned char *)v247 + 33) & 0x10) != 0)
                {
                  v250 = *(unsigned int **)(a1 + 8);
                  unint64_t v249 = *v247;
                  do
                  {
                    v250 = (unsigned int *)((char *)v250 + v248);
                    uint64_t v248 = *v250;
                    v249 += v248;
                  }
                  while ((*((unsigned char *)v250 + 33) & 0x20) == 0);
                }
                else
                {
                  unint64_t v249 = *v247;
                }
                fbstream_write(*(void *)(a1 + 24), (uint64_t)v247, v249);
                *(void *)__str = v1578;
                *(void *)&__str[8] = v244;
                uint64_t v251 = *(void *)(v242 + 104);
                uint64_t v252 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512;
                *(void *)__s = 512;
                *(void *)&__str[16] = StoreMTLTextureDescriptorUsingEncode(*(void *)(a1 + 32), v251, v252, __s);
                DYTraceEncode_MTLHeap_newTextureWithDescriptor((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
                v253 = *(unsigned int **)(a1 + 8);
                uint64_t v254 = *v253;
                if ((*((unsigned char *)v253 + 33) & 0x10) != 0)
                {
                  v256 = *(unsigned int **)(a1 + 8);
                  unint64_t v255 = *v253;
                  do
                  {
                    v256 = (unsigned int *)((char *)v256 + v254);
                    uint64_t v254 = *v256;
                    v255 += v254;
                  }
                  while ((*((unsigned char *)v256 + 33) & 0x20) == 0);
                }
                else
                {
                  unint64_t v255 = *v253;
                }
                fbstream_write(*(void *)(a1 + 24), (uint64_t)v253, v255);
                WriteGTMTLSMTexture_properties((void *)a1, v242, v243, v234);
                *(void *)__str = *(void *)(v242 + 8);
                uint64_t v257 = *find_entry(v235, __str, 8uLL, 0);
                if (v257) {
                  uint64_t v258 = *(void *)(v257 + 32);
                }
                else {
                  uint64_t v258 = 0;
                }
                WriteGTMTLSMTexture_downloads(a1, v242, v258, 1, v244);
                WriteGTMTLSMTexture_textureViews((uint64_t *)a1, a2, v242);
                uint64_t v259 = *(void *)a1;
                uint64_t v260 = *(void *)(a1 + 8);
                *(void *)(v260 + 16) = 0;
                *(void *)(v260 + 24) = 0;
                *(void *)(v260 + 8) = 0;
                *(_DWORD *)(v260 + 32) = 70;
                *(_DWORD *)(v260 + 36) = 67;
                *(void *)uint64_t v260 = 0xFFFFD00800000028;
                *(void *)(v260 + 40) = v259;
                *(_DWORD *)uint64_t v260 = 48;
                v261 = *(unsigned int **)(a1 + 8);
                uint64_t v262 = *v261;
                if ((*((unsigned char *)v261 + 33) & 0x10) != 0)
                {
                  v264 = *(unsigned int **)(a1 + 8);
                  unint64_t v263 = *v261;
                  do
                  {
                    v264 = (unsigned int *)((char *)v264 + v262);
                    uint64_t v262 = *v264;
                    v263 += v262;
                  }
                  while ((*((unsigned char *)v264 + 33) & 0x20) == 0);
                }
                else
                {
                  unint64_t v263 = *v261;
                }
                fbstream_write(*(void *)(a1 + 24), (uint64_t)v261, v263);
                int v240 = *(_DWORD *)(v238 + 12);
              }
              ++v241;
            }
            while (v241 < v240);
          }
        }
      }
      goto LABEL_208;
    }
    if (v58 == 1)
    {
      uint64_t v155 = *(void *)(a2 + 16);
      uint64_t v156 = *(void *)(a2 + 496);
      uint64_t v157 = *(void *)(a2 + 520);
      *(void *)__str = *(void *)(v15 + 8);
      uint64_t v158 = *find_entry(v157, __str, 8uLL, 0);
      if (!v158) {
        goto LABEL_208;
      }
      uint64_t v159 = *(void *)(v158 + 32);
      if (!v159) {
        goto LABEL_208;
      }
      qsort(*(void **)(v159 + 24), *(int *)(v159 + 12), *(int *)(v159 + 8), (int (__cdecl *)(const void *, const void *))GTMTLSMObject_compare);
      *(void *)__str = *(void *)(v15 + 8);
      uint64_t v160 = find_entry(v155, __str, 8uLL, 0);
      if (*(int *)(v159 + 12) < 1) {
        goto LABEL_208;
      }
      uint64_t v161 = 0;
      uint64_t v1577 = *(void *)(*(void *)(*v160 + 32) + 8);
      while (1)
      {
        uint64_t v162 = *(void *)(*(void *)(v159 + 24) + 8 * v161);
        uint64_t v163 = v162 ? *(void *)(v162 + 8) : 0;
        *(void *)__str = v163;
        uint64_t v164 = find_entry(v155, __str, 8uLL, 0);
        v166 = *v164 ? *(void **)(*v164 + 32) : 0;
        uint64_t v167 = v166[1];
        int v168 = *(_DWORD *)v162;
        if (*(_DWORD *)v162 == 16) {
          break;
        }
        if (v168 == 80)
        {
          uint64_t v177 = *(unsigned int **)(a1 + 8);
          *(void *)__str = *(void *)a1;
          *(void *)&__str[8] = "texture";
          *(_OWORD *)&__str[16] = (unint64_t)v167;
          DYTraceEncode_EnterStateGroup((uint64_t)__str, v177, *(unsigned int *)(a1 + 16), v165, 0);
          uint64_t v178 = *(unsigned int **)(a1 + 8);
          uint64_t v179 = *v178;
          if ((*((unsigned char *)v178 + 33) & 0x10) != 0)
          {
            uint64_t v195 = *(unsigned int **)(a1 + 8);
            unint64_t v180 = *v178;
            do
            {
              uint64_t v195 = (unsigned int *)((char *)v195 + v179);
              uint64_t v179 = *v195;
              v180 += v179;
            }
            while ((*((unsigned char *)v195 + 33) & 0x20) == 0);
          }
          else
          {
            unint64_t v180 = *v178;
          }
          fbstream_write(*(void *)(a1 + 24), (uint64_t)v178, v180);
          *(void *)__str = v1577;
          *(void *)&__str[8] = v167;
          uint64_t v196 = *(void *)(v162 + 104);
          *(void *)&__str[24] = *(unsigned int *)(v162 + 80);
          uint64_t v197 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512;
          *(void *)__s = 512;
          *(void *)&__str[16] = StoreMTLTextureDescriptorUsingEncode(*(void *)(a1 + 32), v196, v197, __s);
          DYTraceEncode_MTLHeap_newTextureWithDescriptor_offset((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
          uint64_t v198 = *(unsigned int **)(a1 + 8);
          uint64_t v199 = *v198;
          if ((*((unsigned char *)v198 + 33) & 0x10) != 0)
          {
            v201 = *(unsigned int **)(a1 + 8);
            unint64_t v200 = *v198;
            do
            {
              v201 = (unsigned int *)((char *)v201 + v199);
              uint64_t v199 = *v201;
              v200 += v199;
            }
            while ((*((unsigned char *)v201 + 33) & 0x20) == 0);
          }
          else
          {
            unint64_t v200 = *v198;
          }
          fbstream_write(*(void *)(a1 + 24), (uint64_t)v198, v200);
          WriteGTMTLSMTexture_properties((void *)a1, v162, (uint64_t)v166, v155);
          *(void *)__str = *(void *)(v162 + 8);
          uint64_t v202 = *find_entry(v156, __str, 8uLL, 0);
          if (v202) {
            uint64_t v203 = *(void *)(v202 + 32);
          }
          else {
            uint64_t v203 = 0;
          }
          WriteGTMTLSMTexture_downloads(a1, v162, v203, 0, v167);
          WriteGTMTLSMTexture_textureViews((uint64_t *)a1, a2, v162);
          uint64_t v223 = *(void *)a1;
          uint64_t v224 = *(void *)(a1 + 8);
          *(void *)(v224 + 16) = 0;
          *(void *)(v224 + 24) = 0;
          *(void *)(v224 + 8) = 0;
          *(_DWORD *)(v224 + 32) = 70;
          *(_DWORD *)(v224 + 36) = 67;
          *(void *)uint64_t v224 = 0xFFFFD00800000028;
          *(void *)(v224 + 40) = v223;
          *(_DWORD *)uint64_t v224 = 48;
          uint64_t v206 = *(void *)(a1 + 24);
          uint64_t v207 = *(unsigned int **)(a1 + 8);
          unint64_t v208 = *v207;
          if ((*((unsigned char *)v207 + 33) & 0x10) != 0)
          {
            v225 = *(unsigned int **)(a1 + 8);
            unint64_t v210 = *v207;
            do
            {
              v225 = (unsigned int *)((char *)v225 + v208);
              unint64_t v208 = *v225;
              v210 += v208;
            }
            while ((*((unsigned char *)v225 + 33) & 0x20) == 0);
            goto LABEL_183;
          }
          goto LABEL_180;
        }
        if (v168 == 22)
        {
          unint64_t v169 = *(unsigned int **)(a1 + 8);
          *(void *)__str = *(void *)a1;
          *(void *)&__str[8] = "buffer";
          *(_OWORD *)&__str[16] = (unint64_t)v167;
          DYTraceEncode_EnterStateGroup((uint64_t)__str, v169, *(unsigned int *)(a1 + 16), v165, 0);
          uint64_t v170 = *(unsigned int **)(a1 + 8);
          uint64_t v171 = *v170;
          if ((*((unsigned char *)v170 + 33) & 0x10) != 0)
          {
            unint64_t v181 = *(unsigned int **)(a1 + 8);
            unint64_t v172 = *v170;
            do
            {
              unint64_t v181 = (unsigned int *)((char *)v181 + v171);
              uint64_t v171 = *v181;
              v172 += v171;
            }
            while ((*((unsigned char *)v181 + 33) & 0x20) == 0);
          }
          else
          {
            unint64_t v172 = *v170;
          }
          fbstream_write(*(void *)(a1 + 24), (uint64_t)v170, v172);
          uint64_t v182 = *(void *)(v162 + 104);
          uint64_t v183 = *(unsigned __int16 *)(v162 + 96);
          uint64_t v184 = *(unsigned int *)(v162 + 80);
          uint64_t v185 = *(void *)(a1 + 8);
          *(void *)(v185 + 8) = 0;
          *(void *)(v185 + 16) = 0;
          *(void *)(v185 + 24) = 0;
          *(_DWORD *)(v185 + 32) = 1;
          *(void *)(v185 + 36) = 0x6C756C756C7543;
          *(void *)uint64_t v185 = 0xFFFFC25E0000002CLL;
          *(void *)(v185 + 44) = v1577;
          *(void *)(v185 + 52) = v182;
          *(void *)(v185 + 60) = v183;
          *(void *)(v185 + 68) = v184;
          *(_DWORD *)(v185 + 76) = 116;
          *(void *)(v185 + 80) = v167;
          *(_DWORD *)uint64_t v185 = 88;
          uint64_t v186 = *(unsigned int **)(a1 + 8);
          unint64_t v187 = *v186;
          if ((*((unsigned char *)v186 + 33) & 0x10) != 0)
          {
            uint64_t v188 = *v186;
            uint64_t v189 = *(unsigned int **)(a1 + 8);
            do
            {
              uint64_t v189 = (unsigned int *)((char *)v189 + v188);
              uint64_t v188 = *v189;
              v187 += v188;
            }
            while ((*((unsigned char *)v189 + 33) & 0x20) == 0);
          }
          fbstream_write(*(void *)(a1 + 24), (uint64_t)v186, v187);
          *(void *)__str = *(void *)(v162 + 8);
          uint64_t v190 = *find_entry(v156, __str, 8uLL, 0);
          if (v190) {
            uint64_t v191 = *(void *)(v190 + 32);
          }
          else {
            uint64_t v191 = 0;
          }
          WriteGTMTLSMBuffer_restore(a1, v191, v167);
          WriteGTMTLSMBuffer_properties((void *)a1, v162, (uint64_t)v166, v155);
          WriteGTMTLSMBuffer_debugMarkers(a1, a2, v166);
          WriteGTMTLSMBuffer_resources(a1, a2, v162);
          uint64_t v204 = *(void *)a1;
          uint64_t v205 = *(void *)(a1 + 8);
          *(void *)(v205 + 16) = 0;
          *(void *)(v205 + 24) = 0;
          *(void *)(v205 + 8) = 0;
          *(_DWORD *)(v205 + 32) = 70;
          *(_DWORD *)(v205 + 36) = 67;
          *(void *)uint64_t v205 = 0xFFFFD00800000028;
          *(void *)(v205 + 40) = v204;
          *(_DWORD *)uint64_t v205 = 48;
          uint64_t v206 = *(void *)(a1 + 24);
          uint64_t v207 = *(unsigned int **)(a1 + 8);
          unint64_t v208 = *v207;
          if ((*((unsigned char *)v207 + 33) & 0x10) != 0)
          {
            v209 = *(unsigned int **)(a1 + 8);
            unint64_t v210 = *v207;
            do
            {
              v209 = (unsigned int *)((char *)v209 + v208);
              unint64_t v208 = *v209;
              v210 += v208;
            }
            while ((*((unsigned char *)v209 + 33) & 0x20) == 0);
            goto LABEL_183;
          }
LABEL_180:
          unint64_t v210 = v208;
LABEL_183:
          fbstream_write(v206, (uint64_t)v207, v210);
        }
        if (++v161 >= *(int *)(v159 + 12)) {
          goto LABEL_208;
        }
      }
      uint64_t v173 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "acceleration-structure";
      *(_OWORD *)&__str[16] = (unint64_t)v167;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v173, *(unsigned int *)(a1 + 16), v165, 0);
      uint64_t v174 = *(unsigned int **)(a1 + 8);
      uint64_t v175 = *v174;
      if ((*((unsigned char *)v174 + 33) & 0x10) != 0)
      {
        uint64_t v192 = *(unsigned int **)(a1 + 8);
        unint64_t v176 = *v174;
        do
        {
          uint64_t v192 = (unsigned int *)((char *)v192 + v175);
          uint64_t v175 = *v192;
          v176 += v175;
        }
        while ((*((unsigned char *)v192 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v176 = *v174;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v174, v176);
      *(void *)__str = *(void *)(v162 + 8);
      unint64_t v193 = find_entry(v155, __str, 8uLL, 0);
      if (*v193) {
        uint64_t v194 = *(void *)(*v193 + 32);
      }
      else {
        uint64_t v194 = 0;
      }
      *(void *)__str = *(void *)(v162 + 8);
      find_entry(v156, __str, 8uLL, 0);
      uint64_t v211 = *(void *)(v162 + 152);
      uint64_t v212 = *(void *)(v162 + 184);
      uint64_t v213 = *(unsigned int *)(v162 + 80);
      uint64_t v214 = *(void *)(a1 + 8);
      *(void *)(v214 + 8) = 0;
      *(void *)(v214 + 16) = 0;
      *(void *)(v214 + 24) = 0;
      if (v211)
      {
        int v215 = 88;
        uint64_t v216 = 52;
        *(_DWORD *)(v214 + 32) = 1;
        *(void *)(v214 + 36) = 0x77756C756C7543;
        uint64_t v217 = v212;
        uint64_t v218 = 60;
        uint64_t v212 = v213;
        uint64_t v219 = 68;
        *(void *)uint64_t v214 = 0xFFFFC4080000002CLL;
        uint64_t v213 = v211;
        *(void *)(v214 + 44) = v1577;
        uint64_t v220 = 76;
        uint64_t v221 = 78;
        uint64_t v222 = 80;
      }
      else
      {
        *(void *)uint64_t v214 = 0xFFFFC40700000024;
        int v215 = 80;
        uint64_t v216 = 44;
        uint64_t v217 = v1577;
        uint64_t v218 = 52;
        *(void *)(v214 + 32) = 0x756C754300000001;
        uint64_t v219 = 60;
        *(_DWORD *)(v214 + 40) = 108;
        uint64_t v220 = 68;
        uint64_t v221 = 70;
        uint64_t v222 = 72;
      }
      *(void *)(v214 + v216) = v217;
      *(void *)(v214 + v218) = v212;
      *(void *)(v214 + v219) = v213;
      *(_WORD *)(v214 + v220) = 116;
      *(_WORD *)(v214 + v221) = 0;
      *(void *)(v214 + v222) = v167;
      *(_DWORD *)uint64_t v214 = v215;
      v226 = *(unsigned int **)(a1 + 8);
      uint64_t v227 = *v226;
      if ((*((unsigned char *)v226 + 33) & 0x10) != 0)
      {
        v229 = *(unsigned int **)(a1 + 8);
        unint64_t v228 = *v226;
        do
        {
          v229 = (unsigned int *)((char *)v229 + v227);
          uint64_t v227 = *v229;
          v228 += v227;
        }
        while ((*((unsigned char *)v229 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v228 = *v226;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v226, v228);
      WriteAccelerationStructureInfo(a1, v162, v155, 4);
      WriteGTMTLSMAccelerationStructure_properties(a1, v162, v194, v155, v230);
      uint64_t v231 = *(void *)a1;
      uint64_t v232 = *(void *)(a1 + 8);
      *(void *)(v232 + 16) = 0;
      *(void *)(v232 + 24) = 0;
      *(void *)(v232 + 8) = 0;
      *(_DWORD *)(v232 + 32) = 70;
      *(_DWORD *)(v232 + 36) = 67;
      *(void *)uint64_t v232 = 0xFFFFD00800000028;
      *(void *)(v232 + 40) = v231;
      *(_DWORD *)uint64_t v232 = 48;
      uint64_t v206 = *(void *)(a1 + 24);
      uint64_t v207 = *(unsigned int **)(a1 + 8);
      unint64_t v208 = *v207;
      if ((*((unsigned char *)v207 + 33) & 0x10) != 0)
      {
        v233 = *(unsigned int **)(a1 + 8);
        unint64_t v210 = *v207;
        do
        {
          v233 = (unsigned int *)((char *)v233 + v208);
          unint64_t v208 = *v233;
          v210 += v208;
        }
        while ((*((unsigned char *)v233 + 33) & 0x20) == 0);
        goto LABEL_183;
      }
      goto LABEL_180;
    }
    if (*(unsigned char *)(*(void *)(v15 + 48) + 19)) {
      goto LABEL_208;
    }
    uint64_t v1576 = *(void *)(a2 + 16);
    uint64_t v59 = *(void *)(a2 + 520);
    uint64_t v1569 = *(void *)(a2 + 496);
    unint64_t v60 = *(void *)(a2 + 40);
    *(void *)__str = *(void *)(v15 + 8);
    uint64_t v61 = *find_entry(v59, __str, 8uLL, 0);
    if (!v61) {
      goto LABEL_208;
    }
    uint64_t v62 = *(void *)(v61 + 32);
    if (!v62) {
      goto LABEL_208;
    }
    qsort(*(void **)(v62 + 24), *(int *)(v62 + 12), *(int *)(v62 + 8), (int (__cdecl *)(const void *, const void *))GTMTLSMObject_compare);
    newpool[0] = 0;
    apr_pool_create_ex(newpool, 0, 0, 0);
    uint64_t v63 = newpool[0];
    unint64_t v64 = apr_array_make(newpool[0], 32, 8);
    *(void *)__str = *(void *)(v15 + 8);
    uint64_t v65 = find_entry(v1576, __str, 8uLL, 0);
    if (*(int *)(v62 + 12) < 1) {
      goto LABEL_122;
    }
    uint64_t v66 = 0;
    uint64_t v1568 = *(void *)(*(void *)(*v65 + 32) + 8);
    uint64_t v1573 = v62;
    do
    {
      uint64_t v67 = *(void *)(*(void *)(v62 + 24) + 8 * v66);
      if (v67) {
        uint64_t v68 = *(void *)(v67 + 8);
      }
      else {
        uint64_t v68 = 0;
      }
      *(void *)__str = v68;
      uint64_t v69 = *find_entry(v1576, __str, 8uLL, 0);
      if (v69) {
        uint64_t v70 = *(void **)(v69 + 32);
      }
      else {
        uint64_t v70 = 0;
      }
      uint64_t v71 = v70[1];
      WriteMakeAliasable(a1, a2, (uint64_t)v64, *(void *)(v67 + 16));
      int v73 = *(_DWORD *)v67;
      if (*(_DWORD *)v67 == 16)
      {
        uint64_t v82 = *(unsigned int **)(a1 + 8);
        *(void *)__str = *(void *)a1;
        *(void *)&__str[8] = "acceleration-structure";
        *(_OWORD *)&__str[16] = (unint64_t)v71;
        DYTraceEncode_EnterStateGroup((uint64_t)__str, v82, *(unsigned int *)(a1 + 16), v72, 0);
        unint64_t v83 = *(unsigned int **)(a1 + 8);
        uint64_t v84 = *v83;
        if ((*((unsigned char *)v83 + 33) & 0x10) != 0)
        {
          unint64_t v102 = *(unsigned int **)(a1 + 8);
          unint64_t v85 = *v83;
          do
          {
            unint64_t v102 = (unsigned int *)((char *)v102 + v84);
            uint64_t v84 = *v102;
            v85 += v84;
          }
          while ((*((unsigned char *)v102 + 33) & 0x20) == 0);
        }
        else
        {
          unint64_t v85 = *v83;
        }
        fbstream_write(*(void *)(a1 + 24), (uint64_t)v83, v85);
        *(void *)__str = *(void *)(v67 + 8);
        uint64_t v103 = find_entry(v1576, __str, 8uLL, 0);
        if (*v103) {
          uint64_t v104 = *(void *)(*v103 + 32);
        }
        else {
          uint64_t v104 = 0;
        }
        *(void *)__str = *(void *)(v67 + 8);
        find_entry(v1569, __str, 8uLL, 0);
        uint64_t v115 = *(void *)(v67 + 152);
        uint64_t v116 = *(void *)(v67 + 184);
        uint64_t v117 = *(void *)(a1 + 8);
        *(void *)(v117 + 8) = 0;
        *(void *)(v117 + 16) = 0;
        *(void *)(v117 + 24) = 0;
        if (v115)
        {
          *(void *)uint64_t v117 = 0xFFFFC40900000024;
          *(void *)(v117 + 32) = 0x756C754300000001;
          int v118 = 80;
          uint64_t v119 = 52;
          uint64_t v120 = v116;
          uint64_t v121 = 60;
          uint64_t v116 = v115;
          *(_DWORD *)(v117 + 40) = 119;
          uint64_t v122 = 68;
          uint64_t v123 = 70;
          *(void *)(v117 + 44) = v1568;
          uint64_t v124 = 72;
        }
        else
        {
          *(void *)(v117 + 32) = 0x6C754300000001;
          int v118 = 68;
          uint64_t v119 = 40;
          uint64_t v120 = v1568;
          *(void *)uint64_t v117 = 0xFFFFC40600000028;
          uint64_t v121 = 48;
          uint64_t v122 = 56;
          uint64_t v123 = 58;
          uint64_t v124 = 60;
        }
        *(void *)(v117 + v119) = v120;
        *(void *)(v117 + v121) = v116;
        *(_WORD *)(v117 + v122) = 116;
        *(_WORD *)(v117 + v123) = 0;
        *(void *)(v117 + v124) = v71;
        *(_DWORD *)uint64_t v117 = v118;
        uint64_t v128 = *(unsigned int **)(a1 + 8);
        uint64_t v129 = *v128;
        if ((*((unsigned char *)v128 + 33) & 0x10) != 0)
        {
          uint64_t v131 = *(unsigned int **)(a1 + 8);
          unint64_t v130 = *v128;
          do
          {
            uint64_t v131 = (unsigned int *)((char *)v131 + v129);
            uint64_t v129 = *v131;
            v130 += v129;
          }
          while ((*((unsigned char *)v131 + 33) & 0x20) == 0);
        }
        else
        {
          unint64_t v130 = *v128;
        }
        fbstream_write(*(void *)(a1 + 24), (uint64_t)v128, v130);
        WriteAccelerationStructureInfo(a1, v67, v1576, 4);
        WriteGTMTLSMAccelerationStructure_properties(a1, v67, v104, v1576, v132);
        uint64_t v133 = *(void *)a1;
        uint64_t v134 = *(void *)(a1 + 8);
        *(void *)(v134 + 16) = 0;
        *(void *)(v134 + 24) = 0;
        *(void *)(v134 + 8) = 0;
        *(_DWORD *)(v134 + 32) = 70;
        *(_DWORD *)(v134 + 36) = 67;
        *(void *)uint64_t v134 = 0xFFFFD00800000028;
        *(void *)(v134 + 40) = v133;
        *(_DWORD *)uint64_t v134 = 48;
        uint64_t v110 = *(void *)(a1 + 24);
        uint64_t v111 = *(unsigned int **)(a1 + 8);
        unint64_t v112 = *v111;
        if ((*((unsigned char *)v111 + 33) & 0x10) != 0)
        {
          uint64_t v135 = *(unsigned int **)(a1 + 8);
          unint64_t v114 = *v111;
          do
          {
            uint64_t v135 = (unsigned int *)((char *)v135 + v112);
            unint64_t v112 = *v135;
            v114 += v112;
          }
          while ((*((unsigned char *)v135 + 33) & 0x20) == 0);
          goto LABEL_98;
        }
      }
      else if (v73 == 80)
      {
        unint64_t v78 = *(unsigned int **)(a1 + 8);
        *(void *)__str = *(void *)a1;
        *(void *)&__str[8] = "texture";
        *(_OWORD *)&__str[16] = (unint64_t)v71;
        DYTraceEncode_EnterStateGroup((uint64_t)__str, v78, *(unsigned int *)(a1 + 16), v72, 0);
        uint64_t v79 = *(unsigned int **)(a1 + 8);
        uint64_t v80 = *v79;
        if ((*((unsigned char *)v79 + 33) & 0x10) != 0)
        {
          uint64_t v86 = *(unsigned int **)(a1 + 8);
          unint64_t v81 = *v79;
          do
          {
            uint64_t v86 = (unsigned int *)((char *)v86 + v80);
            uint64_t v80 = *v86;
            v81 += v80;
          }
          while ((*((unsigned char *)v86 + 33) & 0x20) == 0);
        }
        else
        {
          unint64_t v81 = *v79;
        }
        fbstream_write(*(void *)(a1 + 24), (uint64_t)v79, v81);
        *(void *)__str = v1568;
        *(void *)&__str[8] = v71;
        uint64_t v87 = *(void *)(v67 + 104);
        uint64_t v88 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512;
        *(void *)__s = 512;
        *(void *)&__str[16] = StoreMTLTextureDescriptorUsingEncode(*(void *)(a1 + 32), v87, v88, __s);
        DYTraceEncode_MTLHeap_newTextureWithDescriptor((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
        unint64_t v89 = *(unsigned int **)(a1 + 8);
        uint64_t v90 = *v89;
        if ((*((unsigned char *)v89 + 33) & 0x10) != 0)
        {
          unint64_t v92 = *(unsigned int **)(a1 + 8);
          unint64_t v91 = *v89;
          do
          {
            unint64_t v92 = (unsigned int *)((char *)v92 + v90);
            uint64_t v90 = *v92;
            v91 += v90;
          }
          while ((*((unsigned char *)v92 + 33) & 0x20) == 0);
        }
        else
        {
          unint64_t v91 = *v89;
        }
        fbstream_write(*(void *)(a1 + 24), (uint64_t)v89, v91);
        WriteGTMTLSMTexture_properties((void *)a1, v67, (uint64_t)v70, v1576);
        *(void *)__str = *(void *)(v67 + 8);
        uint64_t v93 = *find_entry(v1569, __str, 8uLL, 0);
        if (v93) {
          uint64_t v94 = *(void *)(v93 + 32);
        }
        else {
          uint64_t v94 = 0;
        }
        WriteGTMTLSMTexture_downloads(a1, v67, v94, 0, v71);
        WriteGTMTLSMTexture_textureViews((uint64_t *)a1, a2, v67);
        uint64_t v108 = *(void *)a1;
        uint64_t v109 = *(void *)(a1 + 8);
        *(void *)(v109 + 16) = 0;
        *(void *)(v109 + 24) = 0;
        *(void *)(v109 + 8) = 0;
        *(_DWORD *)(v109 + 32) = 70;
        *(_DWORD *)(v109 + 36) = 67;
        *(void *)uint64_t v109 = 0xFFFFD00800000028;
        *(void *)(v109 + 40) = v108;
        *(_DWORD *)uint64_t v109 = 48;
        uint64_t v110 = *(void *)(a1 + 24);
        uint64_t v111 = *(unsigned int **)(a1 + 8);
        unint64_t v112 = *v111;
        if ((*((unsigned char *)v111 + 33) & 0x10) != 0)
        {
          uint64_t v113 = *(unsigned int **)(a1 + 8);
          unint64_t v114 = *v111;
          do
          {
            uint64_t v113 = (unsigned int *)((char *)v113 + v112);
            unint64_t v112 = *v113;
            v114 += v112;
          }
          while ((*((unsigned char *)v113 + 33) & 0x20) == 0);
          goto LABEL_98;
        }
      }
      else
      {
        if (v73 != 22) {
          goto LABEL_99;
        }
        uint64_t v74 = *(unsigned int **)(a1 + 8);
        *(void *)__str = *(void *)a1;
        *(void *)&__str[8] = "buffer";
        *(_OWORD *)&__str[16] = (unint64_t)v71;
        DYTraceEncode_EnterStateGroup((uint64_t)__str, v74, *(unsigned int *)(a1 + 16), v72, 0);
        uint64_t v75 = *(unsigned int **)(a1 + 8);
        uint64_t v76 = *v75;
        if ((*((unsigned char *)v75 + 33) & 0x10) != 0)
        {
          uint64_t v95 = *(unsigned int **)(a1 + 8);
          unint64_t v77 = *v75;
          do
          {
            uint64_t v95 = (unsigned int *)((char *)v95 + v76);
            uint64_t v76 = *v95;
            v77 += v76;
          }
          while ((*((unsigned char *)v95 + 33) & 0x20) == 0);
        }
        else
        {
          unint64_t v77 = *v75;
        }
        fbstream_write(*(void *)(a1 + 24), (uint64_t)v75, v77);
        uint64_t v96 = *(void *)(v67 + 104);
        uint64_t v97 = *(unsigned __int16 *)(v67 + 96);
        uint64_t v98 = *(void *)(a1 + 8);
        *(void *)(v98 + 8) = 0;
        *(void *)(v98 + 16) = 0;
        *(void *)(v98 + 24) = 0;
        *(void *)uint64_t v98 = 0xFFFFC10B00000024;
        *(_DWORD *)(v98 + 32) = 1;
        *(void *)(v98 + 36) = 0x6C756C7543;
        *(void *)(v98 + 44) = v1568;
        *(void *)(v98 + 52) = v96;
        *(void *)(v98 + 60) = v97;
        *(_DWORD *)(v98 + 68) = 116;
        *(void *)(v98 + 72) = v71;
        *(_DWORD *)uint64_t v98 = 80;
        uint64_t v99 = *(unsigned int **)(a1 + 8);
        uint64_t v100 = *v99;
        if ((*((unsigned char *)v99 + 33) & 0x10) != 0)
        {
          char v105 = *(unsigned int **)(a1 + 8);
          unint64_t v101 = *v99;
          do
          {
            char v105 = (unsigned int *)((char *)v105 + v100);
            uint64_t v100 = *v105;
            v101 += v100;
          }
          while ((*((unsigned char *)v105 + 33) & 0x20) == 0);
        }
        else
        {
          unint64_t v101 = *v99;
        }
        fbstream_write(*(void *)(a1 + 24), (uint64_t)v99, v101);
        *(void *)__str = *(void *)(v67 + 8);
        uint64_t v106 = *find_entry(v1569, __str, 8uLL, 0);
        if (v106) {
          uint64_t v107 = *(void *)(v106 + 32);
        }
        else {
          uint64_t v107 = 0;
        }
        WriteGTMTLSMBuffer_restore(a1, v107, v71);
        WriteGTMTLSMBuffer_properties((void *)a1, v67, (uint64_t)v70, v1576);
        WriteGTMTLSMBuffer_debugMarkers(a1, a2, v70);
        WriteGTMTLSMBuffer_resources(a1, a2, v67);
        uint64_t v125 = *(void *)a1;
        uint64_t v126 = *(void *)(a1 + 8);
        *(void *)(v126 + 16) = 0;
        *(void *)(v126 + 24) = 0;
        *(void *)(v126 + 8) = 0;
        *(_DWORD *)(v126 + 32) = 70;
        *(_DWORD *)(v126 + 36) = 67;
        *(void *)uint64_t v126 = 0xFFFFD00800000028;
        *(void *)(v126 + 40) = v125;
        *(_DWORD *)uint64_t v126 = 48;
        uint64_t v110 = *(void *)(a1 + 24);
        uint64_t v111 = *(unsigned int **)(a1 + 8);
        unint64_t v112 = *v111;
        if ((*((unsigned char *)v111 + 33) & 0x10) != 0)
        {
          unint64_t v127 = *(unsigned int **)(a1 + 8);
          unint64_t v114 = *v111;
          do
          {
            unint64_t v127 = (unsigned int *)((char *)v127 + v112);
            unint64_t v112 = *v127;
            v114 += v112;
          }
          while ((*((unsigned char *)v127 + 33) & 0x20) == 0);
          goto LABEL_98;
        }
      }
      unint64_t v114 = v112;
LABEL_98:
      fbstream_write(v110, (uint64_t)v111, v114);
LABEL_99:
      uint64_t v136 = v70[4];
      if (v136)
      {
        unsigned int v137 = 0;
        uint64_t v62 = v1573;
        while (1)
        {
          unsigned int v138 = atomic_load((unsigned int *)(v136 + 4));
          uint64_t v139 = v137 + (v138 >> 6) - 1;
          if ((int)v139 > 0) {
            break;
          }
          uint64_t v136 = *(void *)(v136 + 40);
          unsigned int v137 = v139;
          if (!v136)
          {
            unsigned int v137 = v139;
            goto LABEL_106;
          }
        }
        uint64_t v139 = 0;
      }
      else
      {
        unsigned int v137 = 0;
        uint64_t v139 = 0;
        uint64_t v62 = v1573;
      }
LABEL_106:
      unint64_t v140 = v137 | (unint64_t)(v139 << 32);
LABEL_107:
      uint64_t v141 = v136 + 64;
      while (v136)
      {
        int v142 = HIDWORD(v140) - v140;
        if ((*(unsigned char *)(v141 + ((uint64_t)(HIDWORD(v140) - (int)v140) << 6) + 15) & 8) == 0
          || *(void *)(v141 + ((uint64_t)v142 << 6)) >= v60)
        {
          break;
        }
        uint64_t v143 = v141 + ((uint64_t)v142 << 6);
        if ((*(_DWORD *)(v143 + 8) | 8) == 0xFFFFC10E)
        {
          *(void *)apr_array_push(v64) = v143;
          uint64_t nelts = v64->nelts;
          uint64_t v148 = nelts - 1;
          elts = v64->elts;
          uint64_t v150 = *(unint64_t **)&elts[8 * nelts - 8];
          if ((int)nelts >= 2)
          {
            unint64_t v151 = *v150;
            while (1)
            {
              elts = v64->elts;
              uint64_t v152 = v148 >> 1;
              v153 = *(unint64_t **)&elts[8 * v152];
              uint64_t v148 = v148;
              if (*v153 <= v151) {
                break;
              }
              *(void *)&elts[8 * v148] = v153;
              BOOL v154 = v148 > 1;
              LODWORD(v148) = v148 >> 1;
              if (!v154)
              {
                elts = v64->elts;
                uint64_t v148 = v152;
                break;
              }
            }
          }
          *(void *)&elts[8 * v148] = v150;
          break;
        }
        unsigned int v144 = atomic_load((unsigned int *)(v136 + 4));
        uint64_t v145 = (HIDWORD(v140) + 1);
        int v146 = v140 + (v144 >> 6) - 1;
        unint64_t v140 = (v145 << 32) | v140;
        if (v145 == v146)
        {
          unint64_t v140 = (v145 << 32) | v145;
          uint64_t v136 = *(void *)(v136 + 40);
          goto LABEL_107;
        }
      }
      ++v66;
    }
    while (v66 < *(int *)(v62 + 12));
    uint64_t v63 = newpool[0];
LABEL_122:
    WriteMakeAliasable(a1, a2, (uint64_t)v64, v60);
    apr_pool_destroy(v63);
LABEL_208:
    if (v1570)
    {
      unint64_t v265 = atomic_load((unint64_t *)(v1570 + 56));
      unint64_t v266 = v265 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v267 = v1571;
      uint64_t v268 = v1572;
      if ((v265 & 0xFFFFFFFFFFFFFFE0) != 0)
      {
        uint64_t v269 = *(void *)(a1 + 32);
        unint64_t v270 = *(void *)(v269 + 440);
        BOOL v271 = v270 >= v266;
        unint64_t v272 = v270 - v266;
        if (v272 != 0 && v271) {
          unint64_t v273 = v272 * *(unsigned int *)(v269 + 448) / *(unsigned int *)(v269 + 452);
        }
        else {
          unint64_t v273 = 0;
        }
      }
      else
      {
        unint64_t v273 = -1;
      }
    }
    else
    {
      unint64_t v273 = -1;
      unint64_t v267 = v1571;
      uint64_t v268 = v1572;
    }
    v274 = *(void **)(a1 + 8);
    v274[2] = 0;
    v274[3] = 0;
    v274[1] = 0;
    v274[4] = 0x77754300000046;
    void *v274 = 0xFFFFD81D00000028;
    v274[5] = v267;
    v274[6] = v273;
    *(_DWORD *)v274 = 56;
    v275 = *(unsigned int **)(a1 + 8);
    uint64_t v276 = *v275;
    if ((*((unsigned char *)v275 + 33) & 0x10) != 0)
    {
      v278 = *(unsigned int **)(a1 + 8);
      unint64_t v277 = *v275;
      do
      {
        v278 = (unsigned int *)((char *)v278 + v276);
        uint64_t v276 = *v278;
        v277 += v276;
      }
      while ((*((unsigned char *)v278 + 33) & 0x20) == 0);
    }
    else
    {
      unint64_t v277 = *v275;
    }
    fbstream_write(*(void *)(a1 + 24), (uint64_t)v275, v277);
    uint64_t v279 = *(void *)a1;
    uint64_t v280 = *(void *)(a1 + 8);
    *(void *)(v280 + 16) = 0;
    *(void *)(v280 + 24) = 0;
    *(void *)(v280 + 8) = 0;
    *(_DWORD *)(v280 + 32) = 70;
    *(_DWORD *)(v280 + 36) = 67;
    *(void *)uint64_t v280 = 0xFFFFD00800000028;
    *(void *)(v280 + 40) = v279;
    *(_DWORD *)uint64_t v280 = 48;
    v281 = *(unsigned int **)(a1 + 8);
    uint64_t v282 = *v281;
    if ((*((unsigned char *)v281 + 33) & 0x10) != 0)
    {
      v284 = *(unsigned int **)(a1 + 8);
      unint64_t v283 = *v281;
      do
      {
        v284 = (unsigned int *)((char *)v284 + v282);
        uint64_t v282 = *v284;
        v283 += v282;
      }
      while ((*((unsigned char *)v284 + 33) & 0x20) == 0);
    }
    else
    {
      unint64_t v283 = *v281;
    }
    fbstream_write(*(void *)(a1 + 24), (uint64_t)v281, v283);
    uint64_t v14 = v268 + 1;
  }
  while (v14 < a3[9].nelts);
LABEL_224:
  uint64_t v285 = *(void *)a1;
  uint64_t v286 = *(void *)(a1 + 8);
  *(void *)(v286 + 16) = 0;
  *(void *)(v286 + 24) = 0;
  *(void *)(v286 + 8) = 0;
  *(_DWORD *)(v286 + 32) = 70;
  *(_DWORD *)(v286 + 36) = 67;
  *(void *)uint64_t v286 = 0xFFFFD00800000028;
  *(void *)(v286 + 40) = v285;
  *(_DWORD *)uint64_t v286 = 48;
  v287 = *(unsigned int **)(a1 + 8);
  uint64_t v288 = *v287;
  if ((*((unsigned char *)v287 + 33) & 0x10) != 0)
  {
    v290 = *(unsigned int **)(a1 + 8);
    unint64_t v289 = *v287;
    do
    {
      v290 = (unsigned int *)((char *)v290 + v288);
      uint64_t v288 = *v290;
      v289 += v288;
    }
    while ((*((unsigned char *)v290 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v289 = *v287;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v287, v289);
  v291 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "buffers";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v291, *(unsigned int *)(a1 + 16), v292, 0);
  v293 = *(unsigned int **)(a1 + 8);
  uint64_t v294 = *v293;
  if ((*((unsigned char *)v293 + 33) & 0x10) != 0)
  {
    v296 = *(unsigned int **)(a1 + 8);
    unint64_t v295 = *v293;
    do
    {
      v296 = (unsigned int *)((char *)v296 + v294);
      uint64_t v294 = *v296;
      v295 += v294;
    }
    while ((*((unsigned char *)v296 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v295 = *v293;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v293, v295);
  int v297 = a3->nelts;
  if (v297 >= 1)
  {
    for (uint64_t i = 0; i < v297; ++i)
    {
      uint64_t v299 = *(void *)&a3->elts[8 * i];
      if (!*(void *)(v299 + 48))
      {
        *(void *)__str = *(void *)(v299 + 8);
        v300 = find_entry(v1582, __str, 8uLL, 0);
        if (*v300) {
          v302 = *(void **)(*v300 + 32);
        }
        else {
          v302 = 0;
        }
        v303 = *(unsigned int **)(a1 + 8);
        *(void *)__str = *(void *)a1;
        *(void *)&__str[8] = "buffer";
        *(_OWORD *)&__str[16] = (unint64_t)v302[1];
        DYTraceEncode_EnterStateGroup((uint64_t)__str, v303, *(unsigned int *)(a1 + 16), v301, 0);
        v304 = *(unsigned int **)(a1 + 8);
        uint64_t v305 = *v304;
        if ((*((unsigned char *)v304 + 33) & 0x10) != 0)
        {
          v307 = *(unsigned int **)(a1 + 8);
          unint64_t v306 = *v304;
          do
          {
            v307 = (unsigned int *)((char *)v307 + v305);
            uint64_t v305 = *v307;
            v306 += v305;
          }
          while ((*((unsigned char *)v307 + 33) & 0x20) == 0);
        }
        else
        {
          unint64_t v306 = *v304;
        }
        fbstream_write(*(void *)(a1 + 24), (uint64_t)v304, v306);
        *(void *)__str = *(void *)(v299 + 8);
        v308 = find_entry(v1575, __str, 8uLL, 0);
        if (*v308) {
          uint64_t v309 = *(void *)(*v308 + 32);
        }
        else {
          uint64_t v309 = 0;
        }
        *(void *)__str = *(void *)(v299 + 8);
        uint64_t v310 = *(void *)(*(void *)(*find_entry(v1582, __str, 8uLL, 0) + 32) + 8);
        uint64_t v311 = *(void *)(v299 + 144);
        if (v311)
        {
          uint64_t v312 = *(void *)(a1 + 8);
          *(void *)__str = *(void *)a1;
          *(void *)&__str[8] = v310;
          uint64_t v313 = v312 + *(unsigned int *)(a1 + 16) - 512;
          *(void *)__s = 512;
          *(void *)&__str[16] = StoreIOSurfaceUsingEncode(*(void *)(a1 + 32), v311, v313, __s);
          DYTraceEncode_MTLDevice_newBufferWithIOSurface((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
          v314 = *(unsigned int **)(a1 + 8);
          unsigned int v315 = v314[8];
          v314[8] = v315 | 4;
          unint64_t v316 = *v314;
          if ((v315 & 0x1000) != 0)
          {
            uint64_t v317 = *v314;
            v318 = v314;
            do
            {
              v318 = (unsigned int *)((char *)v318 + v317);
              uint64_t v317 = *v318;
              v316 += v317;
            }
            while ((*((unsigned char *)v318 + 33) & 0x20) == 0);
          }
          fbstream_write(*(void *)(a1 + 24), (uint64_t)v314, v316);
          *(void *)__str = *(void *)(v299 + 8);
          uint64_t v319 = v1582;
          v320 = find_entry(v1582, __str, 8uLL, 0);
          WriteGTMTLSMBuffer_restore(a1, v309, *(void *)(*(void *)(*v320 + 32) + 8));
        }
        else
        {
          if (v309)
          {
            *(void *)__s = *(void *)a1;
            v1615[0] = v310;
            GTResourceDownloaderGetResourceFilename(v309, 0, __str, 0x80uLL);
            uint64_t v321 = *(void *)(v299 + 104);
            v1615[1] = __str;
            v1615[2] = v321;
            v1615[3] = *(unsigned __int16 *)(v299 + 96);
            newpool[0] = *(apr_pool_t **)(v299 + 120);
            v1615[4] = *(void *)(*(void *)(*find_entry(v1582, newpool, 8uLL, 0) + 32) + 8);
            DYTraceEncode_MTLDevice_newBufferWithBytes_length_options((uint64_t)__s, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
            v322 = *(unsigned int **)(a1 + 8);
            if (!*(_DWORD *)(a1 + 20)) {
              v322[1] = -10237;
            }
            unsigned int v323 = v322[8];
            v322[8] = v323 | 4;
            uint64_t v324 = *(void *)(a1 + 24);
            unint64_t v325 = *v322;
            if ((v323 & 0x1000) != 0)
            {
              uint64_t v326 = *v322;
              v327 = v322;
              do
              {
                v327 = (unsigned int *)((char *)v327 + v326);
                uint64_t v326 = *v327;
                v325 += v326;
              }
              while ((*((unsigned char *)v327 + 33) & 0x20) == 0);
            }
          }
          else
          {
            uint64_t v328 = *(void *)(a1 + 8);
            *(void *)__str = *(void *)a1;
            *(void *)&__str[8] = v310;
            uint64_t v329 = *(unsigned __int16 *)(v299 + 96);
            *(void *)&__str[16] = *(void *)(v299 + 104);
            *(void *)&__str[24] = v329;
            *(void *)&__str[32] = 0;
            DYTraceEncode_MTLDevice_newBufferWithLength_options(__str, v328, *(unsigned int *)(a1 + 16), 0, 0);
            v322 = *(unsigned int **)(a1 + 8);
            unsigned int v330 = v322[8];
            v322[8] = v330 | 4;
            unint64_t v325 = *v322;
            if ((v330 & 0x1000) != 0)
            {
              uint64_t v331 = *v322;
              v332 = v322;
              do
              {
                v332 = (unsigned int *)((char *)v332 + v331);
                uint64_t v331 = *v332;
                v325 += v331;
              }
              while ((*((unsigned char *)v332 + 33) & 0x20) == 0);
            }
            uint64_t v324 = *(void *)(a1 + 24);
          }
          fbstream_write(v324, (uint64_t)v322, v325);
          uint64_t v319 = v1582;
        }
        WriteGTMTLSMBuffer_properties((void *)a1, v299, (uint64_t)v302, v319);
        WriteGTMTLSMBuffer_debugMarkers(a1, a2, v302);
        WriteGTMTLSMBuffer_resources(a1, a2, v299);
        uint64_t v333 = *(void *)a1;
        uint64_t v334 = *(void *)(a1 + 8);
        *(void *)(v334 + 16) = 0;
        *(void *)(v334 + 24) = 0;
        *(void *)(v334 + 8) = 0;
        *(_DWORD *)(v334 + 32) = 70;
        *(_DWORD *)(v334 + 36) = 67;
        *(void *)uint64_t v334 = 0xFFFFD00800000028;
        *(void *)(v334 + 40) = v333;
        *(_DWORD *)uint64_t v334 = 48;
        v335 = *(unsigned int **)(a1 + 8);
        uint64_t v336 = *v335;
        if ((*((unsigned char *)v335 + 33) & 0x10) != 0)
        {
          v338 = *(unsigned int **)(a1 + 8);
          unint64_t v337 = *v335;
          do
          {
            v338 = (unsigned int *)((char *)v338 + v336);
            uint64_t v336 = *v338;
            v337 += v336;
          }
          while ((*((unsigned char *)v338 + 33) & 0x20) == 0);
        }
        else
        {
          unint64_t v337 = *v335;
        }
        fbstream_write(*(void *)(a1 + 24), (uint64_t)v335, v337);
        int v297 = a3->nelts;
      }
    }
  }
  uint64_t v339 = *(void *)a1;
  uint64_t v340 = *(void *)(a1 + 8);
  *(void *)(v340 + 16) = 0;
  *(void *)(v340 + 24) = 0;
  *(void *)(v340 + 8) = 0;
  *(_DWORD *)(v340 + 32) = 70;
  *(_DWORD *)(v340 + 36) = 67;
  *(void *)uint64_t v340 = 0xFFFFD00800000028;
  *(void *)(v340 + 40) = v339;
  *(_DWORD *)uint64_t v340 = 48;
  v341 = *(unsigned int **)(a1 + 8);
  uint64_t v342 = *v341;
  if ((*((unsigned char *)v341 + 33) & 0x10) != 0)
  {
    v345 = *(unsigned int **)(a1 + 8);
    unint64_t v343 = *v341;
    uint64_t v344 = v1582;
    do
    {
      v345 = (unsigned int *)((char *)v345 + v342);
      uint64_t v342 = *v345;
      v343 += v342;
    }
    while ((*((unsigned char *)v345 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v343 = *v341;
    uint64_t v344 = v1582;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v341, v343);
  v346 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "textures";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v346, *(unsigned int *)(a1 + 16), v347, 0);
  v348 = *(unsigned int **)(a1 + 8);
  uint64_t v349 = *v348;
  if ((*((unsigned char *)v348 + 33) & 0x10) != 0)
  {
    v351 = *(unsigned int **)(a1 + 8);
    unint64_t v350 = *v348;
    do
    {
      v351 = (unsigned int *)((char *)v351 + v349);
      uint64_t v349 = *v351;
      v350 += v349;
    }
    while ((*((unsigned char *)v351 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v350 = *v348;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v348, v350);
  int v352 = a3[1].nelts;
  if (v352 >= 1)
  {
    uint64_t v353 = 0;
    while (1)
    {
      uint64_t v354 = *(void *)&a3[1].elts[8 * v353];
      if (!*(void *)(v354 + 48) && !*(void *)(v354 + 136) && !*(void *)(v354 + 144) && !*(void *)(v354 + 192))
      {
        uint64_t v355 = *(void *)(v354 + 104);
        if (!v355 || !*(unsigned char *)(v355 + 44)) {
          break;
        }
      }
LABEL_314:
      if (++v353 >= v352) {
        goto LABEL_319;
      }
    }
    *(void *)__str = *(void *)(v354 + 8);
    uint64_t v356 = *(void *)(*find_entry(v344, __str, 8uLL, 0) + 32);
    uint64_t v357 = *(void *)(v356 + 8);
    v358 = *(unsigned int **)(a1 + 8);
    *(void *)__str = *(void *)a1;
    *(void *)&__str[8] = "texture";
    *(_OWORD *)&__str[16] = (unint64_t)v357;
    DYTraceEncode_EnterStateGroup((uint64_t)__str, v358, *(unsigned int *)(a1 + 16), v359, 0);
    v360 = *(unsigned int **)(a1 + 8);
    uint64_t v361 = *v360;
    if ((*((unsigned char *)v360 + 33) & 0x10) != 0)
    {
      v363 = *(unsigned int **)(a1 + 8);
      unint64_t v362 = *v360;
      do
      {
        v363 = (unsigned int *)((char *)v363 + v361);
        uint64_t v361 = *v363;
        v362 += v361;
      }
      while ((*((unsigned char *)v363 + 33) & 0x20) == 0);
    }
    else
    {
      unint64_t v362 = *v360;
    }
    fbstream_write(*(void *)(a1 + 24), (uint64_t)v360, v362);
    *(void *)__str = *(void *)(v354 + 8);
    v364 = (void *)*find_entry(v344, __str, 8uLL, 0);
    if (v364) {
      v364 = (void *)v364[4];
    }
    uint64_t v365 = v364[1];
    uint64_t v366 = *(void *)(v354 + 120);
    if (v366)
    {
      uint64_t v367 = *(void *)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = v365;
      uint64_t v368 = *(void *)(v354 + 104);
      *(void *)&__str[32] = *(void *)(v354 + 152);
      uint64_t v369 = v367 + *(unsigned int *)(a1 + 16);
      *(void *)__s = 512;
      uint64_t v370 = *(void *)(a1 + 32);
      *(void *)&__str[16] = StoreMTLTextureDescriptorUsingEncode(v370, v368, v369 - 512, __s);
      *(void *)&__str[24] = StoreIOSurfaceUsingEncode(v370, v366, v369 - *(void *)__s, __s);
      DYTraceEncode_MTLDevice_newTextureWithDescriptor_iosurface_plane((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
      uint64_t v371 = *(void *)(v354 + 120);
      v372 = *(unsigned int **)(a1 + 8);
      v372[8] |= 0x1000u;
      v373 = (unsigned int *)((char *)v372 + *v372);
      unsigned int v374 = *(_DWORD *)(v371 + 84);
      __s[0] = *(_DWORD *)(v371 + 88);
      __s[1] = 0;
      *(void *)__str = *(void *)v371;
      *(void *)&__str[8] = 119;
      *(void *)&__str[16] = __s;
      *(void *)&__str[24] = "";
      *(void *)&__str[32] = "";
      *(void *)&__str[40] = v374;
      DYTraceEncode_InternalData((uint64_t)__str, v373, *(unsigned int *)(a1 + 16), v375, 0);
      v373[8] |= 0x2000u;
      v376 = *(unsigned int **)(a1 + 8);
      uint64_t v377 = *v376;
      if ((*((unsigned char *)v376 + 33) & 0x10) != 0)
      {
        v387 = *(unsigned int **)(a1 + 8);
        unint64_t v378 = *v376;
        uint64_t v344 = v1582;
        do
        {
          v387 = (unsigned int *)((char *)v387 + v377);
          uint64_t v377 = *v387;
          v378 += v377;
        }
        while ((*((unsigned char *)v387 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v378 = *v376;
        uint64_t v344 = v1582;
      }
      goto LABEL_306;
    }
    if (*(unsigned char *)(v354 + 214))
    {
      uint64_t v379 = v364[4];
      if (v379) {
        uint64_t v380 = v379 + 64;
      }
      else {
        uint64_t v380 = 0;
      }
      v381 = GTTraceFunc_argumentBytesWithPool((uint64_t *)v380, *(unsigned __int8 *)(v380 + 13), v364[3]);
      uint64_t v382 = *(void *)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = v365;
      uint64_t v383 = *(void *)(v354 + 104);
      *(void *)&__str[24] = *((void *)v381 + 2);
      uint64_t v384 = v382 + *(unsigned int *)(a1 + 16) - 512;
      *(void *)__s = 512;
      *(void *)&__str[16] = StoreMTLTextureDescriptorUsingEncode(*(void *)(a1 + 32), v383, v384, __s);
      DYTraceEncode_MTLDevice_newSharedTextureWithDescriptor((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
      v376 = *(unsigned int **)(a1 + 8);
      unint64_t v385 = *v376;
      if ((*((unsigned char *)v376 + 33) & 0x10) != 0)
      {
        v386 = *(unsigned int **)(a1 + 8);
        unint64_t v378 = *v376;
        do
        {
          v386 = (unsigned int *)((char *)v386 + v385);
          unint64_t v385 = *v386;
          v378 += v385;
        }
        while ((*((unsigned char *)v386 + 33) & 0x20) == 0);
        goto LABEL_306;
      }
    }
    else
    {
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = v365;
      uint64_t v388 = *(void *)(v354 + 104);
      *(void *)__s = *(void *)(v354 + 184);
      *(void *)&__str[24] = *(void *)(*(void *)(*find_entry(v344, __s, 8uLL, 0) + 32) + 8);
      uint64_t v389 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512;
      *(void *)__s = 512;
      *(void *)&__str[16] = StoreMTLTextureDescriptorUsingEncode(*(void *)(a1 + 32), v388, v389, __s);
      DYTraceEncode_MTLDevice_newTextureWithDescriptor((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
      v376 = *(unsigned int **)(a1 + 8);
      unint64_t v385 = *v376;
      if ((*((unsigned char *)v376 + 33) & 0x10) != 0)
      {
        v398 = *(unsigned int **)(a1 + 8);
        unint64_t v378 = *v376;
        do
        {
          v398 = (unsigned int *)((char *)v398 + v385);
          unint64_t v385 = *v398;
          v378 += v385;
        }
        while ((*((unsigned char *)v398 + 33) & 0x20) == 0);
LABEL_306:
        fbstream_write(*(void *)(a1 + 24), (uint64_t)v376, v378);
        WriteGTMTLSMTexture_properties((void *)a1, v354, v356, v344);
        *(void *)__str = *(void *)(v354 + 8);
        uint64_t v390 = *find_entry(v1575, __str, 8uLL, 0);
        if (v390) {
          uint64_t v391 = *(void *)(v390 + 32);
        }
        else {
          uint64_t v391 = 0;
        }
        WriteGTMTLSMTexture_downloads(a1, v354, v391, 0, v357);
        WriteGTMTLSMTexture_textureViews((uint64_t *)a1, a2, v354);
        uint64_t v392 = *(void *)a1;
        uint64_t v393 = *(void *)(a1 + 8);
        *(void *)(v393 + 16) = 0;
        *(void *)(v393 + 24) = 0;
        *(void *)(v393 + 8) = 0;
        *(_DWORD *)(v393 + 32) = 70;
        *(_DWORD *)(v393 + 36) = 67;
        *(void *)uint64_t v393 = 0xFFFFD00800000028;
        *(void *)(v393 + 40) = v392;
        *(_DWORD *)uint64_t v393 = 48;
        v394 = *(unsigned int **)(a1 + 8);
        uint64_t v395 = *v394;
        if ((*((unsigned char *)v394 + 33) & 0x10) != 0)
        {
          v397 = *(unsigned int **)(a1 + 8);
          unint64_t v396 = *v394;
          do
          {
            v397 = (unsigned int *)((char *)v397 + v395);
            uint64_t v395 = *v397;
            v396 += v395;
          }
          while ((*((unsigned char *)v397 + 33) & 0x20) == 0);
        }
        else
        {
          unint64_t v396 = *v394;
        }
        fbstream_write(*(void *)(a1 + 24), (uint64_t)v394, v396);
        int v352 = a3[1].nelts;
        goto LABEL_314;
      }
    }
    unint64_t v378 = v385;
    goto LABEL_306;
  }
LABEL_319:
  uint64_t v399 = *(void *)a1;
  uint64_t v400 = *(void *)(a1 + 8);
  *(void *)(v400 + 16) = 0;
  *(void *)(v400 + 24) = 0;
  *(void *)(v400 + 8) = 0;
  *(_DWORD *)(v400 + 32) = 70;
  *(_DWORD *)(v400 + 36) = 67;
  *(void *)uint64_t v400 = 0xFFFFD00800000028;
  *(void *)(v400 + 40) = v399;
  *(_DWORD *)uint64_t v400 = 48;
  v401 = *(unsigned int **)(a1 + 8);
  uint64_t v402 = *v401;
  if ((*((unsigned char *)v401 + 33) & 0x10) != 0)
  {
    v405 = *(unsigned int **)(a1 + 8);
    unint64_t v403 = *v401;
    v404 = v1567;
    do
    {
      v405 = (unsigned int *)((char *)v405 + v402);
      uint64_t v402 = *v405;
      v403 += v402;
    }
    while ((*((unsigned char *)v405 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v403 = *v401;
    v404 = v1567;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v401, v403);
  v406 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "libraries";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v406, *(unsigned int *)(a1 + 16), v407, 0);
  v408 = *(unsigned int **)(a1 + 8);
  uint64_t v409 = *v408;
  if ((*((unsigned char *)v408 + 33) & 0x10) != 0)
  {
    v411 = *(unsigned int **)(a1 + 8);
    unint64_t v410 = *v408;
    do
    {
      v411 = (unsigned int *)((char *)v411 + v409);
      uint64_t v409 = *v411;
      v410 += v409;
    }
    while ((*((unsigned char *)v411 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v410 = *v408;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v408, v410);
  v412 = apr_array_copy(v404, a3 + 10);
  apr_array_cat(v412, a3 + 11);
  qsort(v412->elts, v412->nelts, v412->elt_size, (int (__cdecl *)(const void *, const void *))GTMTLSMObject_compare);
  if (v412->nelts >= 1)
  {
    uint64_t v413 = 0;
    do
    {
      v414 = *(void **)&v412->elts[8 * v413];
      if (*(_DWORD *)v414 == 37)
      {
        WriteGTMTLSMDynamicLibrary(a1, a2, v414, v344);
      }
      else if (*(_DWORD *)v414 == 62)
      {
        WriteGTMTLSMLibrary(a1, a2, (uint64_t)v414);
      }
      ++v413;
    }
    while (v413 < v412->nelts);
  }
  uint64_t v415 = *(void *)a1;
  uint64_t v416 = *(void *)(a1 + 8);
  *(void *)(v416 + 16) = 0;
  *(void *)(v416 + 24) = 0;
  *(void *)(v416 + 8) = 0;
  *(_DWORD *)(v416 + 32) = 70;
  *(_DWORD *)(v416 + 36) = 67;
  *(void *)uint64_t v416 = 0xFFFFD00800000028;
  *(void *)(v416 + 40) = v415;
  *(_DWORD *)uint64_t v416 = 48;
  v417 = *(unsigned int **)(a1 + 8);
  uint64_t v418 = *v417;
  if ((*((unsigned char *)v417 + 33) & 0x10) != 0)
  {
    v420 = *(unsigned int **)(a1 + 8);
    unint64_t v419 = *v417;
    do
    {
      v420 = (unsigned int *)((char *)v420 + v418);
      uint64_t v418 = *v420;
      v419 += v418;
    }
    while ((*((unsigned char *)v420 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v419 = *v417;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v417, v419);
  uint64_t v421 = *(void *)(a2 + 16);
  v422 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "gl-metal";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v422, *(unsigned int *)(a1 + 16), v423, 0);
  v424 = *(unsigned int **)(a1 + 8);
  uint64_t v425 = *v424;
  if ((*((unsigned char *)v424 + 33) & 0x10) != 0)
  {
    v427 = *(unsigned int **)(a1 + 8);
    unint64_t v426 = *v424;
    do
    {
      v427 = (unsigned int *)((char *)v427 + v425);
      uint64_t v425 = *v427;
      v426 += v425;
    }
    while ((*((unsigned char *)v427 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v426 = *v424;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v424, v426);
  v428 = (apr_pool_t **)apr_hash_make(v404);
  int v429 = a3[3].nelts;
  if (v429 >= 1)
  {
    for (uint64_t j = 0; j < v429; ++j)
    {
      uint64_t v431 = *(void *)&a3[3].elts[8 * j];
      uint64_t v432 = *(void *)(v431 + 48);
      if (v432)
      {
        uint64_t v433 = *(void *)(v431 + 56);
        WriteGLPluginDataFunction((uint64_t *)a1, a2, (uint64_t)a3, *(void *)(v432 + 1296), *(uint64_t **)(v433 + 128), *(const void **)(v433 + 136), v428);
        WriteGLPluginDataFunction((uint64_t *)a1, a2, (uint64_t)a3, *(void *)(v432 + 1176), *(uint64_t **)(v433 + 144), *(const void **)(v433 + 152), v428);
        int v429 = a3[3].nelts;
      }
    }
  }
  if (a3[4].nelts >= 1)
  {
    uint64_t v434 = 0;
    do
    {
      uint64_t v435 = *(void *)&a3[4].elts[8 * v434];
      uint64_t v436 = *(void *)(v435 + 64);
      long long v1611 = 0u;
      long long v1612 = 0u;
      long long v1609 = 0u;
      long long v1610 = 0u;
      long long v1607 = 0u;
      long long v1608 = 0u;
      long long v1605 = 0u;
      long long v1606 = 0u;
      long long v1603 = 0u;
      long long v1604 = 0u;
      long long v1601 = 0u;
      long long v1602 = 0u;
      long long v1599 = 0u;
      long long v1600 = 0u;
      long long v1597 = 0u;
      long long v1598 = 0u;
      long long v1595 = 0u;
      long long v1596 = 0u;
      long long v1593 = 0u;
      long long v1594 = 0u;
      long long v1591 = 0u;
      long long v1592 = 0u;
      long long v1589 = 0u;
      long long v1590 = 0u;
      long long v1587 = 0u;
      long long v1588 = 0u;
      long long v1585 = 0u;
      long long v1586 = 0u;
      memset(__str, 0, sizeof(__str));
      GTMTLSMComputePipelineState_computePipelineDescriptor(*(uint64_t **)(a2 + 568), v435, __str, v404);
      WriteGLPluginDataFunction((uint64_t *)a1, a2, (uint64_t)a3, v1613, *(uint64_t **)(v436 + 72), *(const void **)(v436 + 80), v428);
      ++v434;
    }
    while (v434 < a3[4].nelts);
  }
  if (a3[27].nelts >= 1)
  {
    uint64_t v437 = 0;
    do
    {
      uint64_t v438 = *(void *)&a3[27].elts[8 * v437];
      if (*(unsigned char *)(v438 + 132))
      {
        uint64_t v439 = *find_entry((uint64_t)v428, (unsigned char *)(v438 + 8), 8uLL, 0);
        if (!v439 || !*(void *)(v439 + 32)) {
          WriteGTMTLSMFunction(a1, v438, 0x80000, v421);
        }
      }
      ++v437;
    }
    while (v437 < a3[27].nelts);
  }
  uint64_t v440 = *(void *)a1;
  uint64_t v441 = *(void *)(a1 + 8);
  *(void *)(v441 + 16) = 0;
  *(void *)(v441 + 24) = 0;
  *(void *)(v441 + 8) = 0;
  *(_DWORD *)(v441 + 32) = 70;
  *(_DWORD *)(v441 + 36) = 67;
  *(void *)uint64_t v441 = 0xFFFFD00800000028;
  *(void *)(v441 + 40) = v440;
  *(_DWORD *)uint64_t v441 = 48;
  v442 = *(unsigned int **)(a1 + 8);
  uint64_t v443 = *v442;
  if ((*((unsigned char *)v442 + 33) & 0x10) != 0)
  {
    v445 = *(unsigned int **)(a1 + 8);
    unint64_t v444 = *v442;
    do
    {
      v445 = (unsigned int *)((char *)v445 + v443);
      uint64_t v443 = *v445;
      v444 += v443;
    }
    while ((*((unsigned char *)v445 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v444 = *v442;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v442, v444);
  v446 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "pipeline-libraries";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v446, *(unsigned int *)(a1 + 16), v447, 0);
  v448 = *(unsigned int **)(a1 + 8);
  uint64_t v449 = *v448;
  if ((*((unsigned char *)v448 + 33) & 0x10) != 0)
  {
    v451 = *(unsigned int **)(a1 + 8);
    unint64_t v450 = *v448;
    do
    {
      v451 = (unsigned int *)((char *)v451 + v449);
      uint64_t v449 = *v451;
      v450 += v449;
    }
    while ((*((unsigned char *)v451 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v450 = *v448;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v448, v450);
  if (a3[12].nelts >= 1)
  {
    uint64_t v452 = 0;
    do
    {
      uint64_t v453 = *(void *)&a3[12].elts[8 * v452];
      if (v453) {
        uint64_t v454 = *(void *)(v453 + 8);
      }
      else {
        uint64_t v454 = 0;
      }
      *(void *)__str = v454;
      unint64_t v455 = *(void *)(*(void *)(*find_entry(v344, __str, 8uLL, 0) + 32) + 8);
      if (IsAppleInternalLabel(*(void *)(v453 + 56))) {
        int v457 = 0x80000;
      }
      else {
        int v457 = 0;
      }
      v458 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "pipeline-library";
      *(_OWORD *)&__str[16] = v455;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v458, *(unsigned int *)(a1 + 16), v456, 0);
      v459 = *(unsigned int **)(a1 + 8);
      uint64_t v460 = *v459;
      if ((*((unsigned char *)v459 + 33) & 0x10) != 0)
      {
        v462 = *(unsigned int **)(a1 + 8);
        unint64_t v461 = *v459;
        do
        {
          v462 = (unsigned int *)((char *)v462 + v460);
          uint64_t v460 = *v462;
          v461 += v460;
        }
        while ((*((unsigned char *)v462 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v461 = *v459;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v459, v461);
      *(void *)__s = *(void *)a1;
      v1615[0] = v455;
      uint64_t v463 = *(void *)(a1 + 32);
      uint64_t v464 = *(void *)(v453 + 48);
      memset(__str, 0, sizeof(__str));
      LOBYTE(v1585) = 0;
      SaveDirPath(v463, v464, (uint64_t)__str);
      v1615[1] = __str;
      v1615[2] = 0;
      DYTraceEncode_MTLDevice_newPipelineLibraryWithFilePath_error((uint64_t)__s, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
      FlushChainedPipelineLibraryInfo((uint64_t *)a1, v453, v344, v457);
      if (*(void *)(v453 + 56)) {
        v465 = *(const char **)(v453 + 56);
      }
      else {
        v465 = "";
      }
      v466 = *(unsigned int **)(a1 + 8);
      *((void *)v466 + 1) = 0;
      *((void *)v466 + 2) = 0;
      *((void *)v466 + 3) = 0;
      *((void *)v466 + 4) = 0x534300000000;
      *(void *)v466 = 0xFFFFC28100000028;
      *((void *)v466 + 5) = v455;
      unsigned int *v466 = 48;
      AppendString(v465, (int *)v466);
      uint64_t v467 = *v466;
      uint64_t v468 = (v467 + 3) & 0xFFFFFFFC;
      bzero((char *)v466 + v467, v468 - v467);
      unsigned int *v466 = v468;
      v469 = *(unsigned int **)(a1 + 8);
      unsigned int v470 = v469[8];
      v469[8] = v470 | v457;
      unint64_t v471 = *v469;
      if ((v470 & 0x1000) != 0)
      {
        uint64_t v472 = *v469;
        v473 = v469;
        do
        {
          v473 = (unsigned int *)((char *)v473 + v472);
          uint64_t v472 = *v473;
          v471 += v472;
        }
        while ((*((unsigned char *)v473 + 33) & 0x20) == 0);
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v469, v471);
      int v474 = *(unsigned __int8 *)(v453 + 82);
      uint64_t v475 = *(void *)(a1 + 8);
      *(void *)(v475 + 16) = 0;
      *(void *)(v475 + 24) = 0;
      *(void *)(v475 + 8) = 0;
      *(void *)(v475 + 32) = 0x69754300000000;
      *(void *)uint64_t v475 = 0xFFFFC28000000028;
      *(void *)(v475 + 40) = v455;
      *(_DWORD *)(v475 + 48) = v474;
      *(_DWORD *)uint64_t v475 = 52;
      v476 = *(unsigned int **)(a1 + 8);
      unsigned int v477 = v476[8];
      v476[8] = v477 | v457;
      unint64_t v478 = *v476;
      uint64_t v344 = v1582;
      if ((v477 & 0x1000) != 0)
      {
        uint64_t v479 = *v476;
        v480 = v476;
        v404 = v1567;
        do
        {
          v480 = (unsigned int *)((char *)v480 + v479);
          uint64_t v479 = *v480;
          v478 += v479;
        }
        while ((*((unsigned char *)v480 + 33) & 0x20) == 0);
      }
      else
      {
        v404 = v1567;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v476, v478);
      uint64_t v481 = *(void *)a1;
      uint64_t v482 = *(void *)(a1 + 8);
      *(void *)(v482 + 16) = 0;
      *(void *)(v482 + 24) = 0;
      *(void *)(v482 + 8) = 0;
      *(_DWORD *)(v482 + 32) = 70;
      *(_DWORD *)(v482 + 36) = 67;
      *(void *)uint64_t v482 = 0xFFFFD00800000028;
      *(void *)(v482 + 40) = v481;
      *(_DWORD *)uint64_t v482 = 48;
      v483 = *(unsigned int **)(a1 + 8);
      uint64_t v484 = *v483;
      if ((*((unsigned char *)v483 + 33) & 0x10) != 0)
      {
        v486 = *(unsigned int **)(a1 + 8);
        unint64_t v485 = *v483;
        do
        {
          v486 = (unsigned int *)((char *)v486 + v484);
          uint64_t v484 = *v486;
          v485 += v484;
        }
        while ((*((unsigned char *)v486 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v485 = *v483;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v483, v485);
      ++v452;
    }
    while (v452 < a3[12].nelts);
  }
  uint64_t v487 = *(void *)a1;
  uint64_t v488 = *(void *)(a1 + 8);
  *(void *)(v488 + 16) = 0;
  *(void *)(v488 + 24) = 0;
  *(void *)(v488 + 8) = 0;
  *(_DWORD *)(v488 + 32) = 70;
  *(_DWORD *)(v488 + 36) = 67;
  *(void *)uint64_t v488 = 0xFFFFD00800000028;
  *(void *)(v488 + 40) = v487;
  *(_DWORD *)uint64_t v488 = 48;
  v489 = *(unsigned int **)(a1 + 8);
  uint64_t v490 = *v489;
  if ((*((unsigned char *)v489 + 33) & 0x10) != 0)
  {
    v492 = *(unsigned int **)(a1 + 8);
    unint64_t v491 = *v489;
    do
    {
      v492 = (unsigned int *)((char *)v492 + v490);
      uint64_t v490 = *v492;
      v491 += v490;
    }
    while ((*((unsigned char *)v492 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v491 = *v489;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v489, v491);
  v493 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "fences";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v493, *(unsigned int *)(a1 + 16), v494, 0);
  v495 = *(unsigned int **)(a1 + 8);
  uint64_t v496 = *v495;
  if ((*((unsigned char *)v495 + 33) & 0x10) != 0)
  {
    v498 = *(unsigned int **)(a1 + 8);
    unint64_t v497 = *v495;
    do
    {
      v498 = (unsigned int *)((char *)v498 + v496);
      uint64_t v496 = *v498;
      v497 += v496;
    }
    while ((*((unsigned char *)v498 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v497 = *v495;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v495, v497);
  if (a3[13].nelts >= 1)
  {
    uint64_t v499 = 0;
    do
    {
      uint64_t v500 = *(void *)&a3[13].elts[8 * v499];
      if (v500) {
        uint64_t v501 = *(void *)(v500 + 8);
      }
      else {
        uint64_t v501 = 0;
      }
      *(void *)__str = v501;
      v502 = find_entry(v344, __str, 8uLL, 0);
      WriteGTMTLSMFence((uint64_t *)a1, v500, *(void *)(*(void *)(*v502 + 32) + 8), v503);
      ++v499;
    }
    while (v499 < a3[13].nelts);
  }
  uint64_t v504 = *(void *)a1;
  uint64_t v505 = *(void *)(a1 + 8);
  *(void *)(v505 + 16) = 0;
  *(void *)(v505 + 24) = 0;
  *(void *)(v505 + 8) = 0;
  *(_DWORD *)(v505 + 32) = 70;
  *(_DWORD *)(v505 + 36) = 67;
  *(void *)uint64_t v505 = 0xFFFFD00800000028;
  *(void *)(v505 + 40) = v504;
  *(_DWORD *)uint64_t v505 = 48;
  v506 = *(unsigned int **)(a1 + 8);
  uint64_t v507 = *v506;
  if ((*((unsigned char *)v506 + 33) & 0x10) != 0)
  {
    v509 = *(unsigned int **)(a1 + 8);
    unint64_t v508 = *v506;
    do
    {
      v509 = (unsigned int *)((char *)v509 + v507);
      uint64_t v507 = *v509;
      v508 += v507;
    }
    while ((*((unsigned char *)v509 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v508 = *v506;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v506, v508);
  v510 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "events";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v510, *(unsigned int *)(a1 + 16), v511, 0);
  v512 = *(unsigned int **)(a1 + 8);
  uint64_t v513 = *v512;
  if ((*((unsigned char *)v512 + 33) & 0x10) != 0)
  {
    v515 = *(unsigned int **)(a1 + 8);
    unint64_t v514 = *v512;
    do
    {
      v515 = (unsigned int *)((char *)v515 + v513);
      uint64_t v513 = *v515;
      v514 += v513;
    }
    while ((*((unsigned char *)v515 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v514 = *v512;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v512, v514);
  if (a3[14].nelts >= 1)
  {
    uint64_t v516 = 0;
    do
    {
      uint64_t v517 = *(void *)&a3[14].elts[8 * v516];
      if (v517) {
        uint64_t v518 = *(void *)(v517 + 8);
      }
      else {
        uint64_t v518 = 0;
      }
      *(void *)__str = v518;
      v519 = find_entry(v344, __str, 8uLL, 0);
      WriteGTMTLSMEvent((uint64_t *)a1, v517, *(void *)(*(void *)(*v519 + 32) + 8), v520);
      ++v516;
    }
    while (v516 < a3[14].nelts);
  }
  uint64_t v521 = *(void *)a1;
  uint64_t v522 = *(void *)(a1 + 8);
  *(void *)(v522 + 16) = 0;
  *(void *)(v522 + 24) = 0;
  *(void *)(v522 + 8) = 0;
  *(_DWORD *)(v522 + 32) = 70;
  *(_DWORD *)(v522 + 36) = 67;
  *(void *)uint64_t v522 = 0xFFFFD00800000028;
  *(void *)(v522 + 40) = v521;
  *(_DWORD *)uint64_t v522 = 48;
  v523 = *(unsigned int **)(a1 + 8);
  uint64_t v524 = *v523;
  if ((*((unsigned char *)v523 + 33) & 0x10) != 0)
  {
    v526 = *(unsigned int **)(a1 + 8);
    unint64_t v525 = *v523;
    do
    {
      v526 = (unsigned int *)((char *)v526 + v524);
      uint64_t v524 = *v526;
      v525 += v524;
    }
    while ((*((unsigned char *)v526 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v525 = *v523;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v523, v525);
  v527 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "late-eval-events";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v527, *(unsigned int *)(a1 + 16), v528, 0);
  v529 = *(unsigned int **)(a1 + 8);
  uint64_t v530 = *v529;
  if ((*((unsigned char *)v529 + 33) & 0x10) != 0)
  {
    v532 = *(unsigned int **)(a1 + 8);
    unint64_t v531 = *v529;
    do
    {
      v532 = (unsigned int *)((char *)v532 + v530);
      uint64_t v530 = *v532;
      v531 += v530;
    }
    while ((*((unsigned char *)v532 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v531 = *v529;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v529, v531);
  if (a3[16].nelts >= 1)
  {
    uint64_t v533 = 0;
    do
    {
      uint64_t v534 = *(void *)&a3[16].elts[8 * v533];
      if (v534) {
        uint64_t v535 = *(void *)(v534 + 8);
      }
      else {
        uint64_t v535 = 0;
      }
      *(void *)__str = v535;
      v536 = find_entry(v344, __str, 8uLL, 0);
      WriteGTMTLSMLateEvalEvent((uint64_t *)a1, v534, *(void *)(*(void *)(*v536 + 32) + 8), v537);
      ++v533;
    }
    while (v533 < a3[16].nelts);
  }
  uint64_t v538 = *(void *)a1;
  uint64_t v539 = *(void *)(a1 + 8);
  *(void *)(v539 + 16) = 0;
  *(void *)(v539 + 24) = 0;
  *(void *)(v539 + 8) = 0;
  *(_DWORD *)(v539 + 32) = 70;
  *(_DWORD *)(v539 + 36) = 67;
  *(void *)uint64_t v539 = 0xFFFFD00800000028;
  *(void *)(v539 + 40) = v538;
  *(_DWORD *)uint64_t v539 = 48;
  v540 = *(unsigned int **)(a1 + 8);
  uint64_t v541 = *v540;
  if ((*((unsigned char *)v540 + 33) & 0x10) != 0)
  {
    v543 = *(unsigned int **)(a1 + 8);
    unint64_t v542 = *v540;
    do
    {
      v543 = (unsigned int *)((char *)v543 + v541);
      uint64_t v541 = *v543;
      v542 += v541;
    }
    while ((*((unsigned char *)v543 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v542 = *v540;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v540, v542);
  v544 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "shared-events";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v544, *(unsigned int *)(a1 + 16), v545, 0);
  v546 = *(unsigned int **)(a1 + 8);
  uint64_t v547 = *v546;
  if ((*((unsigned char *)v546 + 33) & 0x10) != 0)
  {
    v549 = *(unsigned int **)(a1 + 8);
    unint64_t v548 = *v546;
    do
    {
      v549 = (unsigned int *)((char *)v549 + v547);
      uint64_t v547 = *v549;
      v548 += v547;
    }
    while ((*((unsigned char *)v549 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v548 = *v546;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v546, v548);
  v550 = apr_hash_make(v404);
  if (a3[15].nelts >= 1)
  {
    v551 = v550;
    uint64_t v552 = 0;
    do
    {
      uint64_t v553 = *(void *)&a3[15].elts[8 * v552];
      if (v553) {
        uint64_t v554 = *(void *)(v553 + 8);
      }
      else {
        uint64_t v554 = 0;
      }
      *(void *)__str = v554;
      v555 = find_entry(v344, __str, 8uLL, 0);
      WriteGTMTLSMSharedEvent((uint64_t *)a1, v551, v553, *(void *)(*(void *)(*v555 + 32) + 8));
      ++v552;
    }
    while (v552 < a3[15].nelts);
  }
  uint64_t v556 = *(void *)a1;
  uint64_t v557 = *(void *)(a1 + 8);
  *(void *)(v557 + 16) = 0;
  *(void *)(v557 + 24) = 0;
  *(void *)(v557 + 8) = 0;
  *(_DWORD *)(v557 + 32) = 70;
  *(_DWORD *)(v557 + 36) = 67;
  *(void *)uint64_t v557 = 0xFFFFD00800000028;
  *(void *)(v557 + 40) = v556;
  *(_DWORD *)uint64_t v557 = 48;
  v558 = *(unsigned int **)(a1 + 8);
  uint64_t v559 = *v558;
  if ((*((unsigned char *)v558 + 33) & 0x10) != 0)
  {
    v561 = *(unsigned int **)(a1 + 8);
    unint64_t v560 = *v558;
    do
    {
      v561 = (unsigned int *)((char *)v561 + v559);
      uint64_t v559 = *v561;
      v560 += v559;
    }
    while ((*((unsigned char *)v561 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v560 = *v558;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v558, v560);
  if (a3[3].nelts <= a3[4].nelts) {
    int v562 = a3[4].nelts;
  }
  else {
    int v562 = a3[3].nelts;
  }
  v563 = apr_array_make(v404, v562, 8);
  v564 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "render-pipeline-states";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v564, *(unsigned int *)(a1 + 16), v565, 0);
  v566 = *(unsigned int **)(a1 + 8);
  uint64_t v567 = *v566;
  if ((*((unsigned char *)v566 + 33) & 0x10) != 0)
  {
    v569 = *(unsigned int **)(a1 + 8);
    unint64_t v568 = *v566;
    do
    {
      v569 = (unsigned int *)((char *)v569 + v567);
      uint64_t v567 = *v569;
      v568 += v567;
    }
    while ((*((unsigned char *)v569 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v568 = *v566;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v566, v568);
  v563->uint64_t nelts = 0;
  apr_array_cat(v563, a3 + 3);
  qsort(v563->elts, v563->nelts, v563->elt_size, (int (__cdecl *)(const void *, const void *))GTMTLSMObject_compare);
  if (v563->nelts >= 1)
  {
    uint64_t v570 = 0;
    do
    {
      v571 = *(void **)&v563->elts[8 * v570];
      if (v571) {
        uint64_t v572 = v571[1];
      }
      else {
        uint64_t v572 = 0;
      }
      uint64_t v573 = *(void *)(a2 + 16);
      *(void *)__str = v572;
      v574 = find_entry(v573, __str, 8uLL, 0);
      if (*v574) {
        uint64_t v576 = *(void *)(*v574 + 32);
      }
      else {
        uint64_t v576 = 0;
      }
      unint64_t v577 = *(void *)(v576 + 8);
      v578 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "render-pipeline-state";
      *(_OWORD *)&__str[16] = v577;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v578, *(unsigned int *)(a1 + 16), v575, 0);
      v579 = *(unsigned int **)(a1 + 8);
      uint64_t v580 = *v579;
      if ((*((unsigned char *)v579 + 33) & 0x10) != 0)
      {
        v582 = *(unsigned int **)(a1 + 8);
        unint64_t v581 = *v579;
        do
        {
          v582 = (unsigned int *)((char *)v582 + v580);
          uint64_t v580 = *v582;
          v581 += v580;
        }
        while ((*((unsigned char *)v582 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v581 = *v579;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v579, v581);
      uint64_t v583 = v571[8];
      if (v583)
      {
        uint64_t v584 = *(void *)(a1 + 8);
        *(void *)__str = *(void *)a1;
        *(void *)&__str[8] = v577;
        *(void *)&__str[24] = 0;
        uint64_t v585 = v584 + *(unsigned int *)(a1 + 16) - 512;
        *(void *)__s = 512;
        *(void *)&__str[16] = StoreMTLTileRenderPipelineDescriptorUsingEncode(*(void *)(a1 + 32), v583, v585, __s, v573);
        DYTraceEncode_MTLDevice_newRenderPipelineStateWithTileDescriptor_error((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
      }
      else
      {
        uint64_t v586 = v571[9];
        if (v586)
        {
          uint64_t v587 = *(void *)(a1 + 8);
          *(void *)__str = *(void *)a1;
          *(void *)&__str[8] = v577;
          *(void *)&__str[24] = 0;
          uint64_t v588 = v587 + *(unsigned int *)(a1 + 16) - 512;
          *(void *)__s = 512;
          *(void *)&__str[16] = StoreMTLMeshRenderPipelineDescriptorUsingEncode(*(void *)(a1 + 32), v586, v588, __s, v573);
          DYTraceEncode_MTLDevice_newRenderPipelineStateWithMeshDescriptor_error((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
        }
        else if (v571[11])
        {
          *(void *)__str = v571[5];
          *(void *)__str = *(void *)(*(void *)(*find_entry(v573, __str, 8uLL, 0) + 32) + 8);
          *(void *)&__str[8] = v577;
          *(_OWORD *)&__str[16] = (unint64_t)v571[11];
          *(_OWORD *)&__str[32] = 0uLL;
          DYTraceEncode_MTLPipelineLibrary_newRenderPipelineStateWithName_options_reflection_error((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
        }
        else
        {
          uint64_t v589 = v571[6];
          if (v589)
          {
            uint64_t v590 = *(void *)(a1 + 8);
            *(void *)__str = *(void *)a1;
            *(void *)&__str[8] = v577;
            *(void *)&__str[24] = 0;
            uint64_t v591 = v590 + *(unsigned int *)(a1 + 16) - 512;
            *(void *)__s = 512;
            *(void *)&__str[16] = StoreMTLRenderPipelineDescriptorUsingEncode(*(void *)(a1 + 32), v589, v591, __s, v573);
            DYTraceEncode_MTLDevice_newRenderPipelineStateWithDescriptor_error((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
          }
          else
          {
            uint64_t v660 = v571[5];
            if (v660 && v571[10])
            {
              GTMTLSMContext_getObject(*(uint64_t **)(a2 + 568), v660, v571[2]);
              *(void *)__str = v571[5];
              *(void *)__str = *(void *)(*(void *)(*find_entry(v573, __str, 8uLL, 0) + 32) + 8);
              *(void *)&__str[8] = v577;
              v661 = (void *)v571[10];
              *(void *)&__str[24] = 0;
              uint64_t v662 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512;
              *(void *)__s = 512;
              *(void *)&__str[16] = StoreMTLRenderPipelineFunctionsDescriptorUsingEncode(*(void *)(a1 + 32), v661, v662, __s, v573);
              DYTraceEncode_MTLRenderPipelineState_newRenderPipelineStateWithAdditionalBinaryFunctions_error((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
            }
          }
        }
      }
      FlushChainedRenderPipelineStateInfo(a1, (uint64_t)v571, v573, 0);
      if (v576
        && (uint64_t v592 = *(void *)(a1 + 32),
            unint64_t v593 = atomic_load((unint64_t *)(v576 + 56)),
            (unint64_t v594 = v593 & 0xFFFFFFFFFFFFFFE0) != 0))
      {
        unint64_t v595 = *(void *)(v592 + 440);
        BOOL v271 = v595 >= v594;
        unint64_t v596 = v595 - v594;
        if (v596 != 0 && v271) {
          unint64_t v597 = v596 * *(unsigned int *)(v592 + 448) / *(unsigned int *)(v592 + 452);
        }
        else {
          unint64_t v597 = 0;
        }
      }
      else
      {
        unint64_t v597 = -1;
      }
      v598 = *(void **)(a1 + 8);
      v598[2] = 0;
      v598[3] = 0;
      v598[1] = 0;
      v598[4] = 0x77754300000000;
      void *v598 = 0xFFFFD84400000028;
      v598[5] = v577;
      v598[6] = v597;
      *(_DWORD *)v598 = 56;
      v599 = *(unsigned int **)(a1 + 8);
      uint64_t v600 = *v599;
      if ((*((unsigned char *)v599 + 33) & 0x10) != 0)
      {
        v602 = *(unsigned int **)(a1 + 8);
        unint64_t v601 = *v599;
        do
        {
          v602 = (unsigned int *)((char *)v602 + v600);
          uint64_t v600 = *v602;
          v601 += v600;
        }
        while ((*((unsigned char *)v602 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v601 = *v599;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v599, v601);
      v603 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "function-handles";
      *(_OWORD *)&__str[16] = 0uLL;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v603, *(unsigned int *)(a1 + 16), v604, 0);
      v605 = *(unsigned int **)(a1 + 8);
      uint64_t v606 = *v605;
      if ((*((unsigned char *)v605 + 33) & 0x10) != 0)
      {
        v608 = *(unsigned int **)(a1 + 8);
        unint64_t v607 = *v605;
        do
        {
          v608 = (unsigned int *)((char *)v608 + v606);
          uint64_t v606 = *v608;
          v607 += v606;
        }
        while ((*((unsigned char *)v608 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v607 = *v605;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v605, v607);
      int v609 = a3[31].nelts;
      if (v609 >= 1)
      {
        for (uint64_t k = 0; k < v609; ++k)
        {
          uint64_t v611 = *(void *)&a3[31].elts[8 * k];
          if (*(void *)(v611 + 56) == v571[1])
          {
            WriteGTMTLSMFunctionHandle((uint64_t *)a1, v611, v573);
            int v609 = a3[31].nelts;
          }
        }
      }
      uint64_t v612 = *(void *)a1;
      uint64_t v613 = *(void *)(a1 + 8);
      *(void *)(v613 + 16) = 0;
      *(void *)(v613 + 24) = 0;
      *(void *)(v613 + 8) = 0;
      *(_DWORD *)(v613 + 32) = 70;
      *(_DWORD *)(v613 + 36) = 67;
      *(void *)uint64_t v613 = 0xFFFFD00800000028;
      *(void *)(v613 + 40) = v612;
      *(_DWORD *)uint64_t v613 = 48;
      v614 = *(unsigned int **)(a1 + 8);
      uint64_t v615 = *v614;
      if ((*((unsigned char *)v614 + 33) & 0x10) != 0)
      {
        v617 = *(unsigned int **)(a1 + 8);
        unint64_t v616 = *v614;
        do
        {
          v617 = (unsigned int *)((char *)v617 + v615);
          uint64_t v615 = *v617;
          v616 += v615;
        }
        while ((*((unsigned char *)v617 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v616 = *v614;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v614, v616);
      v618 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "visible-function-tables";
      *(_OWORD *)&__str[16] = 0uLL;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v618, *(unsigned int *)(a1 + 16), v619, 0);
      v620 = *(unsigned int **)(a1 + 8);
      uint64_t v621 = *v620;
      if ((*((unsigned char *)v620 + 33) & 0x10) != 0)
      {
        v623 = *(unsigned int **)(a1 + 8);
        unint64_t v622 = *v620;
        do
        {
          v623 = (unsigned int *)((char *)v623 + v621);
          uint64_t v621 = *v623;
          v622 += v621;
        }
        while ((*((unsigned char *)v623 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v622 = *v620;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v620, v622);
      int v624 = a3[6].nelts;
      if (v624 >= 1)
      {
        for (uint64_t m = 0; m < v624; ++m)
        {
          uint64_t v626 = *(void *)&a3[6].elts[8 * m];
          if (*(void *)(v626 + 128) == v571[1])
          {
            uint64_t v627 = *(void *)(a2 + 496);
            *(void *)__str = *(void *)(v626 + 8);
            uint64_t v628 = *find_entry(v627, __str, 8uLL, 0);
            if (v628) {
              uint64_t v629 = *(void *)(v628 + 32);
            }
            else {
              uint64_t v629 = 0;
            }
            WriteGTMTLSMVisibleFunctionTable(a1, *(void *)(a2 + 16), v626, v629);
            int v624 = a3[6].nelts;
          }
        }
      }
      uint64_t v630 = *(void *)a1;
      uint64_t v631 = *(void *)(a1 + 8);
      *(void *)(v631 + 16) = 0;
      *(void *)(v631 + 24) = 0;
      *(void *)(v631 + 8) = 0;
      *(_DWORD *)(v631 + 32) = 70;
      *(_DWORD *)(v631 + 36) = 67;
      *(void *)uint64_t v631 = 0xFFFFD00800000028;
      *(void *)(v631 + 40) = v630;
      *(_DWORD *)uint64_t v631 = 48;
      v632 = *(unsigned int **)(a1 + 8);
      uint64_t v633 = *v632;
      if ((*((unsigned char *)v632 + 33) & 0x10) != 0)
      {
        v635 = *(unsigned int **)(a1 + 8);
        unint64_t v634 = *v632;
        do
        {
          v635 = (unsigned int *)((char *)v635 + v633);
          uint64_t v633 = *v635;
          v634 += v633;
        }
        while ((*((unsigned char *)v635 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v634 = *v632;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v632, v634);
      v636 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "intersection-function-tables";
      *(_OWORD *)&__str[16] = 0uLL;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v636, *(unsigned int *)(a1 + 16), v637, 0);
      v638 = *(unsigned int **)(a1 + 8);
      uint64_t v639 = *v638;
      if ((*((unsigned char *)v638 + 33) & 0x10) != 0)
      {
        v641 = *(unsigned int **)(a1 + 8);
        unint64_t v640 = *v638;
        do
        {
          v641 = (unsigned int *)((char *)v641 + v639);
          uint64_t v639 = *v641;
          v640 += v639;
        }
        while ((*((unsigned char *)v641 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v640 = *v638;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v638, v640);
      int v642 = a3[7].nelts;
      if (v642 >= 1)
      {
        for (uint64_t n = 0; n < v642; ++n)
        {
          v644 = *(void **)&a3[7].elts[8 * n];
          if (v644[16] == v571[1])
          {
            uint64_t v645 = *(void *)(a2 + 496);
            *(void *)__str = v644[1];
            uint64_t v646 = *find_entry(v645, __str, 8uLL, 0);
            if (v646) {
              uint64_t v647 = *(void *)(v646 + 32);
            }
            else {
              uint64_t v647 = 0;
            }
            WriteGTMTLIntersectionFunctionTable((uint64_t *)a1, (void *)a2, v644, v647);
            int v642 = a3[7].nelts;
          }
        }
      }
      uint64_t v648 = *(void *)a1;
      uint64_t v649 = *(void *)(a1 + 8);
      *(void *)(v649 + 16) = 0;
      *(void *)(v649 + 24) = 0;
      *(void *)(v649 + 8) = 0;
      *(_DWORD *)(v649 + 32) = 70;
      *(_DWORD *)(v649 + 36) = 67;
      *(void *)uint64_t v649 = 0xFFFFD00800000028;
      *(void *)(v649 + 40) = v648;
      *(_DWORD *)uint64_t v649 = 48;
      v650 = *(unsigned int **)(a1 + 8);
      uint64_t v651 = *v650;
      if ((*((unsigned char *)v650 + 33) & 0x10) != 0)
      {
        v653 = *(unsigned int **)(a1 + 8);
        unint64_t v652 = *v650;
        do
        {
          v653 = (unsigned int *)((char *)v653 + v651);
          uint64_t v651 = *v653;
          v652 += v651;
        }
        while ((*((unsigned char *)v653 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v652 = *v650;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v650, v652);
      uint64_t v654 = *(void *)a1;
      uint64_t v655 = *(void *)(a1 + 8);
      *(void *)(v655 + 16) = 0;
      *(void *)(v655 + 24) = 0;
      *(void *)(v655 + 8) = 0;
      *(_DWORD *)(v655 + 32) = 70;
      *(_DWORD *)(v655 + 36) = 67;
      *(void *)uint64_t v655 = 0xFFFFD00800000028;
      *(void *)(v655 + 40) = v654;
      *(_DWORD *)uint64_t v655 = 48;
      v656 = *(unsigned int **)(a1 + 8);
      uint64_t v657 = *v656;
      if ((*((unsigned char *)v656 + 33) & 0x10) != 0)
      {
        v659 = *(unsigned int **)(a1 + 8);
        unint64_t v658 = *v656;
        do
        {
          v659 = (unsigned int *)((char *)v659 + v657);
          uint64_t v657 = *v659;
          v658 += v657;
        }
        while ((*((unsigned char *)v659 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v658 = *v656;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v656, v658);
      ++v570;
    }
    while (v570 < v563->nelts);
  }
  uint64_t v663 = *(void *)a1;
  uint64_t v664 = *(void *)(a1 + 8);
  *(void *)(v664 + 16) = 0;
  *(void *)(v664 + 24) = 0;
  *(void *)(v664 + 8) = 0;
  *(_DWORD *)(v664 + 32) = 70;
  *(_DWORD *)(v664 + 36) = 67;
  *(void *)uint64_t v664 = 0xFFFFD00800000028;
  *(void *)(v664 + 40) = v663;
  *(_DWORD *)uint64_t v664 = 48;
  v665 = *(unsigned int **)(a1 + 8);
  uint64_t v666 = *v665;
  if ((*((unsigned char *)v665 + 33) & 0x10) != 0)
  {
    v668 = *(unsigned int **)(a1 + 8);
    unint64_t v667 = *v665;
    do
    {
      v668 = (unsigned int *)((char *)v668 + v666);
      uint64_t v666 = *v668;
      v667 += v666;
    }
    while ((*((unsigned char *)v668 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v667 = *v665;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v665, v667);
  v669 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "compute-pipeline-states";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v669, *(unsigned int *)(a1 + 16), v670, 0);
  v671 = *(unsigned int **)(a1 + 8);
  uint64_t v672 = *v671;
  if ((*((unsigned char *)v671 + 33) & 0x10) != 0)
  {
    v674 = *(unsigned int **)(a1 + 8);
    unint64_t v673 = *v671;
    do
    {
      v674 = (unsigned int *)((char *)v674 + v672);
      uint64_t v672 = *v674;
      v673 += v672;
    }
    while ((*((unsigned char *)v674 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v673 = *v671;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v671, v673);
  v563->uint64_t nelts = 0;
  apr_array_cat(v563, a3 + 4);
  qsort(v563->elts, v563->nelts, v563->elt_size, (int (__cdecl *)(const void *, const void *))GTMTLSMObject_compare);
  if (v563->nelts >= 1)
  {
    uint64_t v675 = 0;
    do
    {
      v676 = *(void **)&v563->elts[8 * v675];
      if (v676) {
        uint64_t v677 = v676[1];
      }
      else {
        uint64_t v677 = 0;
      }
      uint64_t v678 = *(void *)(a2 + 16);
      *(void *)__str = v677;
      v679 = find_entry(v678, __str, 8uLL, 0);
      if (*v679) {
        uint64_t v681 = *(void *)(*v679 + 32);
      }
      else {
        uint64_t v681 = 0;
      }
      unint64_t v682 = *(void *)(v681 + 8);
      v683 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "compute-pipeline-state";
      *(_OWORD *)&__str[16] = v682;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v683, *(unsigned int *)(a1 + 16), v680, 0);
      v684 = *(unsigned int **)(a1 + 8);
      uint64_t v685 = *v684;
      if ((*((unsigned char *)v684 + 33) & 0x10) != 0)
      {
        v687 = *(unsigned int **)(a1 + 8);
        unint64_t v686 = *v684;
        do
        {
          v687 = (unsigned int *)((char *)v687 + v685);
          uint64_t v685 = *v687;
          v686 += v685;
        }
        while ((*((unsigned char *)v687 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v686 = *v684;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v684, v686);
      uint64_t v688 = v676[7];
      if (v688)
      {
        uint64_t v689 = *(void *)(a1 + 8);
        *(void *)__str = *(void *)a1;
        *(void *)&__str[8] = v682;
        *(void *)&__str[24] = 0;
        uint64_t v690 = v689 + *(unsigned int *)(a1 + 16) - 512;
        *(void *)__s = 512;
        *(void *)&__str[16] = StoreMTLComputePipelineDescriptorUsingEncode(*(void *)(a1 + 32), v688, v690, __s, v678);
        DYTraceEncode_MTLDevice_newComputePipelineStateWithDescriptor_error((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
      }
      else
      {
        uint64_t v691 = v676[9];
        if (v691)
        {
          uint64_t v692 = *(void *)(a1 + 8);
          *(void *)__str = *(void *)a1;
          *(void *)&__str[8] = v682;
          uint64_t v693 = v676[10];
          *(void *)&__str[16] = v691;
          *(void *)&__str[24] = v693;
          *(void *)&__str[32] = 0;
          GTTrace_storePointer(a1, -16101, (uint64_t)__str, (char *)(v692 + *(unsigned int *)(a1 + 16) - 512), 512, v678);
          DYTraceEncode_MTLDevice_newComputePipelineStateWithImageFilterFunctionsSPI_imageFilterFunctionInfo_error((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
        }
        else if (v676[11])
        {
          *(void *)__str = v676[5];
          *(void *)__str = *(void *)(*(void *)(*find_entry(v678, __str, 8uLL, 0) + 32) + 8);
          *(void *)&__str[8] = v682;
          *(_OWORD *)&__str[16] = (unint64_t)v676[11];
          *(_OWORD *)&__str[32] = 0uLL;
          DYTraceEncode_MTLPipelineLibrary_newComputePipelineStateWithName_options_reflection_error((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
        }
        else if (v676[6])
        {
          uint64_t v1574 = *(void *)a1;
          *(void *)__str = v676[6];
          uint64_t v694 = *(void *)(*(void *)(*find_entry(v678, __str, 8uLL, 0) + 32) + 8);
          uint64_t v695 = *(void *)(a1 + 8);
          *(void *)(v695 + 8) = 0;
          *(void *)(v695 + 16) = 0;
          *(void *)(v695 + 24) = 0;
          *(void *)(v695 + 32) = 0x74744300000001;
          *(void *)uint64_t v695 = 0xFFFFC05500000028;
          *(void *)(v695 + 40) = v1574;
          *(void *)(v695 + 48) = v694;
          *(void *)(v695 + 56) = 0;
          *(_DWORD *)(v695 + 64) = 116;
          *(void *)(v695 + 68) = v682;
          *(_DWORD *)uint64_t v695 = 76;
        }
        else
        {
          uint64_t v764 = v676[5];
          if (v764 && v676[23])
          {
            GTMTLSMContext_getObject(*(uint64_t **)(a2 + 568), v764, v676[2]);
            *(void *)__str = v676[5];
            *(void *)__str = *(void *)(*(void *)(*find_entry(v678, __str, 8uLL, 0) + 32) + 8);
            *(void *)&__str[8] = v682;
            v765 = (unint64_t *)v676[23];
            *(void *)&__str[24] = 0;
            uint64_t v766 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512;
            *(void *)__s = 512;
            *(void *)&__str[16] = UnwrapMTLArray_(*(void *)(a1 + 32), v765, v766, __s, v678);
            DYTraceEncode_MTLComputePipelineState_newComputePipelineStateWithAdditionalBinaryFunctions_error((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
          }
        }
      }
      FlushChainedComputePipelineStateInfo(a1, (uint64_t)v676, v678, 0);
      if (v681
        && (uint64_t v696 = *(void *)(a1 + 32),
            unint64_t v697 = atomic_load((unint64_t *)(v681 + 56)),
            (unint64_t v698 = v697 & 0xFFFFFFFFFFFFFFE0) != 0))
      {
        unint64_t v699 = *(void *)(v696 + 440);
        BOOL v271 = v699 >= v698;
        unint64_t v700 = v699 - v698;
        if (v700 != 0 && v271) {
          unint64_t v701 = v700 * *(unsigned int *)(v696 + 448) / *(unsigned int *)(v696 + 452);
        }
        else {
          unint64_t v701 = 0;
        }
      }
      else
      {
        unint64_t v701 = -1;
      }
      v702 = *(void **)(a1 + 8);
      v702[2] = 0;
      v702[3] = 0;
      v702[1] = 0;
      v702[4] = 0x77754300000000;
      void *v702 = 0xFFFFD84500000028;
      v702[5] = v682;
      v702[6] = v701;
      *(_DWORD *)v702 = 56;
      v703 = *(unsigned int **)(a1 + 8);
      uint64_t v704 = *v703;
      if ((*((unsigned char *)v703 + 33) & 0x10) != 0)
      {
        v706 = *(unsigned int **)(a1 + 8);
        unint64_t v705 = *v703;
        do
        {
          v706 = (unsigned int *)((char *)v706 + v704);
          uint64_t v704 = *v706;
          v705 += v704;
        }
        while ((*((unsigned char *)v706 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v705 = *v703;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v703, v705);
      v707 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "function-handles";
      *(_OWORD *)&__str[16] = 0uLL;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v707, *(unsigned int *)(a1 + 16), v708, 0);
      v709 = *(unsigned int **)(a1 + 8);
      uint64_t v710 = *v709;
      if ((*((unsigned char *)v709 + 33) & 0x10) != 0)
      {
        v712 = *(unsigned int **)(a1 + 8);
        unint64_t v711 = *v709;
        do
        {
          v712 = (unsigned int *)((char *)v712 + v710);
          uint64_t v710 = *v712;
          v711 += v710;
        }
        while ((*((unsigned char *)v712 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v711 = *v709;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v709, v711);
      int v713 = a3[31].nelts;
      if (v713 >= 1)
      {
        for (iuint64_t i = 0; ii < v713; ++ii)
        {
          uint64_t v715 = *(void *)&a3[31].elts[8 * ii];
          if (*(void *)(v715 + 48) == v676[1])
          {
            WriteGTMTLSMFunctionHandle((uint64_t *)a1, v715, v678);
            int v713 = a3[31].nelts;
          }
        }
      }
      uint64_t v716 = *(void *)a1;
      uint64_t v717 = *(void *)(a1 + 8);
      *(void *)(v717 + 16) = 0;
      *(void *)(v717 + 24) = 0;
      *(void *)(v717 + 8) = 0;
      *(_DWORD *)(v717 + 32) = 70;
      *(_DWORD *)(v717 + 36) = 67;
      *(void *)uint64_t v717 = 0xFFFFD00800000028;
      *(void *)(v717 + 40) = v716;
      *(_DWORD *)uint64_t v717 = 48;
      v718 = *(unsigned int **)(a1 + 8);
      uint64_t v719 = *v718;
      if ((*((unsigned char *)v718 + 33) & 0x10) != 0)
      {
        v721 = *(unsigned int **)(a1 + 8);
        unint64_t v720 = *v718;
        do
        {
          v721 = (unsigned int *)((char *)v721 + v719);
          uint64_t v719 = *v721;
          v720 += v719;
        }
        while ((*((unsigned char *)v721 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v720 = *v718;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v718, v720);
      v722 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "visible-function-tables";
      *(_OWORD *)&__str[16] = 0uLL;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v722, *(unsigned int *)(a1 + 16), v723, 0);
      v724 = *(unsigned int **)(a1 + 8);
      uint64_t v725 = *v724;
      if ((*((unsigned char *)v724 + 33) & 0x10) != 0)
      {
        v727 = *(unsigned int **)(a1 + 8);
        unint64_t v726 = *v724;
        do
        {
          v727 = (unsigned int *)((char *)v727 + v725);
          uint64_t v725 = *v727;
          v726 += v725;
        }
        while ((*((unsigned char *)v727 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v726 = *v724;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v724, v726);
      int v728 = a3[6].nelts;
      if (v728 >= 1)
      {
        for (juint64_t j = 0; jj < v728; ++jj)
        {
          uint64_t v730 = *(void *)&a3[6].elts[8 * jj];
          if (*(void *)(v730 + 120) == v676[1])
          {
            uint64_t v731 = *(void *)(a2 + 496);
            *(void *)__str = *(void *)(v730 + 8);
            uint64_t v732 = *find_entry(v731, __str, 8uLL, 0);
            if (v732) {
              uint64_t v733 = *(void *)(v732 + 32);
            }
            else {
              uint64_t v733 = 0;
            }
            WriteGTMTLSMVisibleFunctionTable(a1, *(void *)(a2 + 16), v730, v733);
            int v728 = a3[6].nelts;
          }
        }
      }
      uint64_t v734 = *(void *)a1;
      uint64_t v735 = *(void *)(a1 + 8);
      *(void *)(v735 + 16) = 0;
      *(void *)(v735 + 24) = 0;
      *(void *)(v735 + 8) = 0;
      *(_DWORD *)(v735 + 32) = 70;
      *(_DWORD *)(v735 + 36) = 67;
      *(void *)uint64_t v735 = 0xFFFFD00800000028;
      *(void *)(v735 + 40) = v734;
      *(_DWORD *)uint64_t v735 = 48;
      v736 = *(unsigned int **)(a1 + 8);
      uint64_t v737 = *v736;
      if ((*((unsigned char *)v736 + 33) & 0x10) != 0)
      {
        v739 = *(unsigned int **)(a1 + 8);
        unint64_t v738 = *v736;
        do
        {
          v739 = (unsigned int *)((char *)v739 + v737);
          uint64_t v737 = *v739;
          v738 += v737;
        }
        while ((*((unsigned char *)v739 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v738 = *v736;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v736, v738);
      v740 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "intersection-function-tables";
      *(_OWORD *)&__str[16] = 0uLL;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v740, *(unsigned int *)(a1 + 16), v741, 0);
      v742 = *(unsigned int **)(a1 + 8);
      uint64_t v743 = *v742;
      if ((*((unsigned char *)v742 + 33) & 0x10) != 0)
      {
        v745 = *(unsigned int **)(a1 + 8);
        unint64_t v744 = *v742;
        do
        {
          v745 = (unsigned int *)((char *)v745 + v743);
          uint64_t v743 = *v745;
          v744 += v743;
        }
        while ((*((unsigned char *)v745 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v744 = *v742;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v742, v744);
      int v746 = a3[7].nelts;
      if (v746 >= 1)
      {
        for (kuint64_t k = 0; kk < v746; ++kk)
        {
          v748 = *(void **)&a3[7].elts[8 * kk];
          if (v748[15] == v676[1])
          {
            uint64_t v749 = *(void *)(a2 + 496);
            *(void *)__str = v748[1];
            uint64_t v750 = *find_entry(v749, __str, 8uLL, 0);
            if (v750) {
              uint64_t v751 = *(void *)(v750 + 32);
            }
            else {
              uint64_t v751 = 0;
            }
            WriteGTMTLIntersectionFunctionTable((uint64_t *)a1, (void *)a2, v748, v751);
            int v746 = a3[7].nelts;
          }
        }
      }
      uint64_t v752 = *(void *)a1;
      uint64_t v753 = *(void *)(a1 + 8);
      *(void *)(v753 + 16) = 0;
      *(void *)(v753 + 24) = 0;
      *(void *)(v753 + 8) = 0;
      *(_DWORD *)(v753 + 32) = 70;
      *(_DWORD *)(v753 + 36) = 67;
      *(void *)uint64_t v753 = 0xFFFFD00800000028;
      *(void *)(v753 + 40) = v752;
      *(_DWORD *)uint64_t v753 = 48;
      v754 = *(unsigned int **)(a1 + 8);
      uint64_t v755 = *v754;
      if ((*((unsigned char *)v754 + 33) & 0x10) != 0)
      {
        v757 = *(unsigned int **)(a1 + 8);
        unint64_t v756 = *v754;
        do
        {
          v757 = (unsigned int *)((char *)v757 + v755);
          uint64_t v755 = *v757;
          v756 += v755;
        }
        while ((*((unsigned char *)v757 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v756 = *v754;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v754, v756);
      uint64_t v758 = *(void *)a1;
      uint64_t v759 = *(void *)(a1 + 8);
      *(void *)(v759 + 16) = 0;
      *(void *)(v759 + 24) = 0;
      *(void *)(v759 + 8) = 0;
      *(_DWORD *)(v759 + 32) = 70;
      *(_DWORD *)(v759 + 36) = 67;
      *(void *)uint64_t v759 = 0xFFFFD00800000028;
      *(void *)(v759 + 40) = v758;
      *(_DWORD *)uint64_t v759 = 48;
      v760 = *(unsigned int **)(a1 + 8);
      uint64_t v761 = *v760;
      if ((*((unsigned char *)v760 + 33) & 0x10) != 0)
      {
        v763 = *(unsigned int **)(a1 + 8);
        unint64_t v762 = *v760;
        do
        {
          v763 = (unsigned int *)((char *)v763 + v761);
          uint64_t v761 = *v763;
          v762 += v761;
        }
        while ((*((unsigned char *)v763 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v762 = *v760;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v760, v762);
      ++v675;
    }
    while (v675 < v563->nelts);
  }
  uint64_t v767 = *(void *)a1;
  uint64_t v768 = *(void *)(a1 + 8);
  *(void *)(v768 + 16) = 0;
  *(void *)(v768 + 24) = 0;
  *(void *)(v768 + 8) = 0;
  *(_DWORD *)(v768 + 32) = 70;
  *(_DWORD *)(v768 + 36) = 67;
  *(void *)uint64_t v768 = 0xFFFFD00800000028;
  *(void *)(v768 + 40) = v767;
  *(_DWORD *)uint64_t v768 = 48;
  v769 = *(unsigned int **)(a1 + 8);
  uint64_t v770 = *v769;
  if ((*((unsigned char *)v769 + 33) & 0x10) != 0)
  {
    v772 = *(unsigned int **)(a1 + 8);
    unint64_t v771 = *v769;
    do
    {
      v772 = (unsigned int *)((char *)v772 + v770);
      uint64_t v770 = *v772;
      v771 += v770;
    }
    while ((*((unsigned char *)v772 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v771 = *v769;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v769, v771);
  v773 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "motion-estimation-pipeline-states";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v773, *(unsigned int *)(a1 + 16), v774, 0);
  v775 = *(unsigned int **)(a1 + 8);
  uint64_t v776 = *v775;
  if ((*((unsigned char *)v775 + 33) & 0x10) != 0)
  {
    v778 = *(unsigned int **)(a1 + 8);
    unint64_t v777 = *v775;
    do
    {
      v778 = (unsigned int *)((char *)v778 + v776);
      uint64_t v776 = *v778;
      v777 += v776;
    }
    while ((*((unsigned char *)v778 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v777 = *v775;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v775, v777);
  if (a3[17].nelts >= 1)
  {
    uint64_t v779 = 0;
    do
    {
      uint64_t v780 = *(void *)&a3[17].elts[8 * v779];
      if (v780) {
        uint64_t v781 = *(void *)(v780 + 8);
      }
      else {
        uint64_t v781 = 0;
      }
      *(void *)__str = v781;
      unint64_t v782 = *(void *)(*(void *)(*find_entry(v1582, __str, 8uLL, 0) + 32) + 8);
      v783 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "motion-pipeline-state";
      *(_OWORD *)&__str[16] = v782;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v783, *(unsigned int *)(a1 + 16), v784, 0);
      v785 = *(unsigned int **)(a1 + 8);
      uint64_t v786 = *v785;
      if ((*((unsigned char *)v785 + 33) & 0x10) != 0)
      {
        v788 = *(unsigned int **)(a1 + 8);
        unint64_t v787 = *v785;
        do
        {
          v788 = (unsigned int *)((char *)v788 + v786);
          uint64_t v786 = *v788;
          v787 += v786;
        }
        while ((*((unsigned char *)v788 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v787 = *v785;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v785, v787);
      uint64_t v789 = *(void *)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = v782;
      v790 = *(unsigned __int16 **)(v780 + 48);
      uint64_t v791 = v789 + *(unsigned int *)(a1 + 16) - 512;
      *(void *)__s = 512;
      *(void *)&__str[16] = StoreMTLMotionEstimationPipelineDescriptorUsingEncode(*(void *)(a1 + 32), v790, v791, __s);
      DYTraceEncode_MTLDevice_newMotionEstimationPipelineWithDescriptor((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
      v792 = *(unsigned int **)(a1 + 8);
      uint64_t v793 = *v792;
      if ((*((unsigned char *)v792 + 33) & 0x10) != 0)
      {
        v795 = *(unsigned int **)(a1 + 8);
        unint64_t v794 = *v792;
        do
        {
          v795 = (unsigned int *)((char *)v795 + v793);
          uint64_t v793 = *v795;
          v794 += v793;
        }
        while ((*((unsigned char *)v795 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v794 = *v792;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v792, v794);
      uint64_t v796 = *(void *)a1;
      uint64_t v797 = *(void *)(a1 + 8);
      *(void *)(v797 + 16) = 0;
      *(void *)(v797 + 24) = 0;
      *(void *)(v797 + 8) = 0;
      *(_DWORD *)(v797 + 32) = 70;
      *(_DWORD *)(v797 + 36) = 67;
      *(void *)uint64_t v797 = 0xFFFFD00800000028;
      *(void *)(v797 + 40) = v796;
      *(_DWORD *)uint64_t v797 = 48;
      v798 = *(unsigned int **)(a1 + 8);
      uint64_t v799 = *v798;
      if ((*((unsigned char *)v798 + 33) & 0x10) != 0)
      {
        v801 = *(unsigned int **)(a1 + 8);
        unint64_t v800 = *v798;
        do
        {
          v801 = (unsigned int *)((char *)v801 + v799);
          uint64_t v799 = *v801;
          v800 += v799;
        }
        while ((*((unsigned char *)v801 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v800 = *v798;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v798, v800);
      ++v779;
    }
    while (v779 < a3[17].nelts);
  }
  uint64_t v802 = *(void *)a1;
  uint64_t v803 = *(void *)(a1 + 8);
  *(void *)(v803 + 16) = 0;
  *(void *)(v803 + 24) = 0;
  *(void *)(v803 + 8) = 0;
  *(_DWORD *)(v803 + 32) = 70;
  *(_DWORD *)(v803 + 36) = 67;
  *(void *)uint64_t v803 = 0xFFFFD00800000028;
  *(void *)(v803 + 40) = v802;
  *(_DWORD *)uint64_t v803 = 48;
  v804 = *(unsigned int **)(a1 + 8);
  uint64_t v805 = *v804;
  if ((*((unsigned char *)v804 + 33) & 0x10) != 0)
  {
    v807 = *(unsigned int **)(a1 + 8);
    unint64_t v806 = *v804;
    do
    {
      v807 = (unsigned int *)((char *)v807 + v805);
      uint64_t v805 = *v807;
      v806 += v805;
    }
    while ((*((unsigned char *)v807 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v806 = *v804;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v804, v806);
  v808 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "depth-stencil-states";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v808, *(unsigned int *)(a1 + 16), v809, 0);
  v810 = *(unsigned int **)(a1 + 8);
  uint64_t v811 = *v810;
  if ((*((unsigned char *)v810 + 33) & 0x10) != 0)
  {
    v813 = *(unsigned int **)(a1 + 8);
    unint64_t v812 = *v810;
    do
    {
      v813 = (unsigned int *)((char *)v813 + v811);
      uint64_t v811 = *v813;
      v812 += v811;
    }
    while ((*((unsigned char *)v813 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v812 = *v810;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v810, v812);
  if (a3[18].nelts >= 1)
  {
    uint64_t v814 = 0;
    do
    {
      uint64_t v815 = *(void *)&a3[18].elts[8 * v814];
      if (v815) {
        uint64_t v816 = *(void *)(v815 + 8);
      }
      else {
        uint64_t v816 = 0;
      }
      *(void *)__str = v816;
      unint64_t v817 = *(void *)(*(void *)(*find_entry(v1582, __str, 8uLL, 0) + 32) + 8);
      v818 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "depth-stencil-state";
      *(_OWORD *)&__str[16] = v817;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v818, *(unsigned int *)(a1 + 16), v819, 0);
      v820 = *(unsigned int **)(a1 + 8);
      uint64_t v821 = *v820;
      if ((*((unsigned char *)v820 + 33) & 0x10) != 0)
      {
        v823 = *(unsigned int **)(a1 + 8);
        unint64_t v822 = *v820;
        do
        {
          v823 = (unsigned int *)((char *)v823 + v821);
          uint64_t v821 = *v823;
          v822 += v821;
        }
        while ((*((unsigned char *)v823 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v822 = *v820;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v820, v822);
      uint64_t v824 = *(void *)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = v817;
      uint64_t v825 = *(void *)(v815 + 48);
      uint64_t v826 = v824 + *(unsigned int *)(a1 + 16) - 512;
      *(void *)__s = 512;
      *(void *)&__str[16] = StoreMTLDepthStencilDescriptorUsingEncode(*(void *)(a1 + 32), v825, v826, __s);
      DYTraceEncode_MTLDevice_newDepthStencilStateWithDescriptor((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
      v827 = *(unsigned int **)(a1 + 8);
      uint64_t v828 = *v827;
      if ((*((unsigned char *)v827 + 33) & 0x10) != 0)
      {
        v830 = *(unsigned int **)(a1 + 8);
        unint64_t v829 = *v827;
        do
        {
          v830 = (unsigned int *)((char *)v830 + v828);
          uint64_t v828 = *v830;
          v829 += v828;
        }
        while ((*((unsigned char *)v830 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v829 = *v827;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v827, v829);
      uint64_t v831 = *(void *)a1;
      uint64_t v832 = *(void *)(a1 + 8);
      *(void *)(v832 + 16) = 0;
      *(void *)(v832 + 24) = 0;
      *(void *)(v832 + 8) = 0;
      *(_DWORD *)(v832 + 32) = 70;
      *(_DWORD *)(v832 + 36) = 67;
      *(void *)uint64_t v832 = 0xFFFFD00800000028;
      *(void *)(v832 + 40) = v831;
      *(_DWORD *)uint64_t v832 = 48;
      v833 = *(unsigned int **)(a1 + 8);
      uint64_t v834 = *v833;
      if ((*((unsigned char *)v833 + 33) & 0x10) != 0)
      {
        v836 = *(unsigned int **)(a1 + 8);
        unint64_t v835 = *v833;
        do
        {
          v836 = (unsigned int *)((char *)v836 + v834);
          uint64_t v834 = *v836;
          v835 += v834;
        }
        while ((*((unsigned char *)v836 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v835 = *v833;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v833, v835);
      ++v814;
    }
    while (v814 < a3[18].nelts);
  }
  uint64_t v837 = *(void *)a1;
  uint64_t v838 = *(void *)(a1 + 8);
  *(void *)(v838 + 16) = 0;
  *(void *)(v838 + 24) = 0;
  *(void *)(v838 + 8) = 0;
  *(_DWORD *)(v838 + 32) = 70;
  *(_DWORD *)(v838 + 36) = 67;
  *(void *)uint64_t v838 = 0xFFFFD00800000028;
  *(void *)(v838 + 40) = v837;
  *(_DWORD *)uint64_t v838 = 48;
  v839 = *(unsigned int **)(a1 + 8);
  uint64_t v840 = *v839;
  if ((*((unsigned char *)v839 + 33) & 0x10) != 0)
  {
    v842 = *(unsigned int **)(a1 + 8);
    unint64_t v841 = *v839;
    do
    {
      v842 = (unsigned int *)((char *)v842 + v840);
      uint64_t v840 = *v842;
      v841 += v840;
    }
    while ((*((unsigned char *)v842 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v841 = *v839;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v839, v841);
  v843 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "samplers";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v843, *(unsigned int *)(a1 + 16), v844, 0);
  v845 = *(unsigned int **)(a1 + 8);
  uint64_t v846 = *v845;
  if ((*((unsigned char *)v845 + 33) & 0x10) != 0)
  {
    v848 = *(unsigned int **)(a1 + 8);
    unint64_t v847 = *v845;
    do
    {
      v848 = (unsigned int *)((char *)v848 + v846);
      uint64_t v846 = *v848;
      v847 += v846;
    }
    while ((*((unsigned char *)v848 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v847 = *v845;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v845, v847);
  if (a3[2].nelts >= 1)
  {
    uint64_t v849 = 0;
    do
    {
      uint64_t v850 = *(void *)&a3[2].elts[8 * v849];
      if (v850) {
        uint64_t v851 = *(void *)(v850 + 8);
      }
      else {
        uint64_t v851 = 0;
      }
      *(void *)__str = v851;
      unint64_t v852 = *(void *)(*(void *)(*find_entry(v1582, __str, 8uLL, 0) + 32) + 8);
      v853 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "sampler";
      *(_OWORD *)&__str[16] = v852;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v853, *(unsigned int *)(a1 + 16), v854, 0);
      v855 = *(unsigned int **)(a1 + 8);
      uint64_t v856 = *v855;
      if ((*((unsigned char *)v855 + 33) & 0x10) != 0)
      {
        v858 = *(unsigned int **)(a1 + 8);
        unint64_t v857 = *v855;
        do
        {
          v858 = (unsigned int *)((char *)v858 + v856);
          uint64_t v856 = *v858;
          v857 += v856;
        }
        while ((*((unsigned char *)v858 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v857 = *v855;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v855, v857);
      uint64_t v859 = *(void *)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = v852;
      uint64_t v860 = *(void *)(v850 + 48);
      uint64_t v861 = v859 + *(unsigned int *)(a1 + 16) - 512;
      *(void *)__s = 512;
      *(void *)&__str[16] = StoreMTLSamplerDescriptorUsingEncode(*(void *)(a1 + 32), v860, v861, __s);
      DYTraceEncode_MTLDevice_newSamplerStateWithDescriptor((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
      v862 = *(unsigned int **)(a1 + 8);
      uint64_t v863 = *v862;
      if ((*((unsigned char *)v862 + 33) & 0x10) != 0)
      {
        v865 = *(unsigned int **)(a1 + 8);
        unint64_t v864 = *v862;
        do
        {
          v865 = (unsigned int *)((char *)v865 + v863);
          uint64_t v863 = *v865;
          v864 += v863;
        }
        while ((*((unsigned char *)v865 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v864 = *v862;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v862, v864);
      WriteSamplerStateInfo(a1, v850, v1582, 0);
      uint64_t v866 = *(void *)a1;
      uint64_t v867 = *(void *)(a1 + 8);
      *(void *)(v867 + 16) = 0;
      *(void *)(v867 + 24) = 0;
      *(void *)(v867 + 8) = 0;
      *(_DWORD *)(v867 + 32) = 70;
      *(_DWORD *)(v867 + 36) = 67;
      *(void *)uint64_t v867 = 0xFFFFD00800000028;
      *(void *)(v867 + 40) = v866;
      *(_DWORD *)uint64_t v867 = 48;
      v868 = *(unsigned int **)(a1 + 8);
      uint64_t v869 = *v868;
      if ((*((unsigned char *)v868 + 33) & 0x10) != 0)
      {
        v871 = *(unsigned int **)(a1 + 8);
        unint64_t v870 = *v868;
        do
        {
          v871 = (unsigned int *)((char *)v871 + v869);
          uint64_t v869 = *v871;
          v870 += v869;
        }
        while ((*((unsigned char *)v871 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v870 = *v868;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v868, v870);
      ++v849;
    }
    while (v849 < a3[2].nelts);
  }
  uint64_t v872 = *(void *)a1;
  uint64_t v873 = *(void *)(a1 + 8);
  *(void *)(v873 + 16) = 0;
  *(void *)(v873 + 24) = 0;
  *(void *)(v873 + 8) = 0;
  *(_DWORD *)(v873 + 32) = 70;
  *(_DWORD *)(v873 + 36) = 67;
  *(void *)uint64_t v873 = 0xFFFFD00800000028;
  *(void *)(v873 + 40) = v872;
  *(_DWORD *)uint64_t v873 = 48;
  v874 = *(unsigned int **)(a1 + 8);
  uint64_t v875 = *v874;
  if ((*((unsigned char *)v874 + 33) & 0x10) != 0)
  {
    v878 = *(unsigned int **)(a1 + 8);
    unint64_t v876 = *v874;
    uint64_t v877 = v1582;
    do
    {
      v878 = (unsigned int *)((char *)v878 + v875);
      uint64_t v875 = *v878;
      v876 += v875;
    }
    while ((*((unsigned char *)v878 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v876 = *v874;
    uint64_t v877 = v1582;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v874, v876);
  v879 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "indirect-command-buffers";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v879, *(unsigned int *)(a1 + 16), v880, 0);
  v881 = *(unsigned int **)(a1 + 8);
  uint64_t v882 = *v881;
  if ((*((unsigned char *)v881 + 33) & 0x10) != 0)
  {
    v884 = *(unsigned int **)(a1 + 8);
    unint64_t v883 = *v881;
    do
    {
      v884 = (unsigned int *)((char *)v884 + v882);
      uint64_t v882 = *v884;
      v883 += v882;
    }
    while ((*((unsigned char *)v884 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v883 = *v881;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v881, v883);
  if (a3[5].nelts >= 1)
  {
    uint64_t v885 = 0;
    do
    {
      uint64_t v886 = *(void *)&a3[5].elts[8 * v885];
      *(void *)__str = *(void *)(v886 + 8);
      v887 = find_entry(v1575, __str, 8uLL, 0);
      if (*v887) {
        uint64_t v888 = *(void *)(*v887 + 32);
      }
      else {
        uint64_t v888 = 0;
      }
      *(void *)__str = *(void *)(v886 + 8);
      v889 = find_entry(v877, __str, 8uLL, 0);
      if (*v889) {
        uint64_t v891 = *(void *)(*v889 + 32);
      }
      else {
        uint64_t v891 = 0;
      }
      uint64_t v892 = *(void *)(v891 + 8);
      v893 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "buffer";
      *(_OWORD *)&__str[16] = (unint64_t)v892;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v893, *(unsigned int *)(a1 + 16), v890, 0);
      v894 = *(unsigned int **)(a1 + 8);
      uint64_t v895 = *v894;
      if ((*((unsigned char *)v894 + 33) & 0x10) != 0)
      {
        v897 = *(unsigned int **)(a1 + 8);
        unint64_t v896 = *v894;
        do
        {
          v897 = (unsigned int *)((char *)v897 + v895);
          uint64_t v895 = *v897;
          v896 += v895;
        }
        while ((*((unsigned char *)v897 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v896 = *v894;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v894, v896);
      uint64_t v898 = *(void *)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = v892;
      uint64_t v899 = *(void *)(v886 + 104);
      uint64_t v900 = *(unsigned __int16 *)(v886 + 96);
      *(void *)&__str[24] = *(unsigned int *)(v886 + 136);
      *(void *)&__str[32] = v900;
      uint64_t v901 = v898 + *(unsigned int *)(a1 + 16) - 512;
      *(void *)__s = 512;
      *(void *)&__str[16] = StoreMTLIndirectCommandBufferDescriptorUsingEncode(*(void *)(a1 + 32), v899, v901, __s);
      DYTraceEncode_MTLDevice_newIndirectCommandBufferWithDescriptor_maxCommandCount_options((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
      v902 = *(unsigned int **)(a1 + 8);
      unsigned int v903 = v902[8];
      v902[8] = v903 | 4;
      unint64_t v904 = *v902;
      if ((v903 & 0x1000) != 0)
      {
        uint64_t v905 = *v902;
        v906 = v902;
        do
        {
          v906 = (unsigned int *)((char *)v906 + v905);
          uint64_t v905 = *v906;
          v904 += v905;
        }
        while ((*((unsigned char *)v906 + 33) & 0x20) == 0);
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v902, v904);
      WriteIndirectCommandBufferInfo(a1, v886, v877, 0);
      if (*(void *)(v886 + 72)) {
        v907 = *(const char **)(v886 + 72);
      }
      else {
        v907 = "";
      }
      v908 = *(unsigned int **)(a1 + 8);
      *((void *)v908 + 1) = 0;
      *((void *)v908 + 2) = 0;
      *((void *)v908 + 3) = 0;
      *((void *)v908 + 4) = 0x534300000000;
      *(void *)v908 = 0xFFFFC1CB00000028;
      *((void *)v908 + 5) = v892;
      unsigned int *v908 = 48;
      AppendString(v907, (int *)v908);
      uint64_t v909 = *v908;
      uint64_t v910 = (v909 + 3) & 0xFFFFFFFC;
      bzero((char *)v908 + v909, v910 - v909);
      unsigned int *v908 = v910;
      v911 = *(unsigned int **)(a1 + 8);
      uint64_t v912 = *v911;
      if ((*((unsigned char *)v911 + 33) & 0x10) != 0)
      {
        v914 = *(unsigned int **)(a1 + 8);
        unint64_t v913 = *v911;
        do
        {
          v914 = (unsigned int *)((char *)v914 + v912);
          uint64_t v912 = *v914;
          v913 += v912;
        }
        while ((*((unsigned char *)v914 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v913 = *v911;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v911, v913);
      uint64_t v915 = *(unsigned __int16 *)(v886 + 98);
      v916 = *(void **)(a1 + 8);
      v916[2] = 0;
      v916[3] = 0;
      v916[1] = 0;
      v916[4] = 0x6C754300000000;
      void *v916 = 0xFFFFC1D000000028;
      v916[5] = v892;
      v916[6] = v915;
      *(_DWORD *)v916 = 56;
      v917 = *(unsigned int **)(a1 + 8);
      uint64_t v918 = *v917;
      uint64_t v877 = v1582;
      if ((*((unsigned char *)v917 + 33) & 0x10) != 0)
      {
        v920 = *(unsigned int **)(a1 + 8);
        unint64_t v919 = *v917;
        do
        {
          v920 = (unsigned int *)((char *)v920 + v918);
          uint64_t v918 = *v920;
          v919 += v918;
        }
        while ((*((unsigned char *)v920 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v919 = *v917;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v917, v919);
      WriteGTMTLSMIndirectCommandBuffer_restore(a1, v888, v892);
      if (v891
        && (unint64_t v921 = atomic_load((unint64_t *)(v891 + 56)),
            unint64_t v922 = v921 & 0xFFFFFFFFFFFFFFE0,
            (v921 & 0xFFFFFFFFFFFFFFE0) != 0))
      {
        uint64_t v923 = *(void *)(a1 + 32);
        unint64_t v924 = *(void *)(v923 + 440);
        BOOL v271 = v924 >= v922;
        unint64_t v925 = v924 - v922;
        if (v925 != 0 && v271) {
          unint64_t v926 = v925 * *(unsigned int *)(v923 + 448) / *(unsigned int *)(v923 + 452);
        }
        else {
          unint64_t v926 = 0;
        }
      }
      else
      {
        unint64_t v926 = -1;
      }
      v927 = *(void **)(a1 + 8);
      v927[2] = 0;
      v927[3] = 0;
      v927[1] = 0;
      v927[4] = 0x77754300000046;
      void *v927 = 0xFFFFD81F00000028;
      v927[5] = v892;
      v927[6] = v926;
      *(_DWORD *)v927 = 56;
      v928 = *(unsigned int **)(a1 + 8);
      uint64_t v929 = *v928;
      if ((*((unsigned char *)v928 + 33) & 0x10) != 0)
      {
        v931 = *(unsigned int **)(a1 + 8);
        unint64_t v930 = *v928;
        do
        {
          v931 = (unsigned int *)((char *)v931 + v929);
          uint64_t v929 = *v931;
          v930 += v929;
        }
        while ((*((unsigned char *)v931 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v930 = *v928;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v928, v930);
      uint64_t v932 = *(void *)a1;
      uint64_t v933 = *(void *)(a1 + 8);
      *(void *)(v933 + 16) = 0;
      *(void *)(v933 + 24) = 0;
      *(void *)(v933 + 8) = 0;
      *(_DWORD *)(v933 + 32) = 70;
      *(_DWORD *)(v933 + 36) = 67;
      *(void *)uint64_t v933 = 0xFFFFD00800000028;
      *(void *)(v933 + 40) = v932;
      *(_DWORD *)uint64_t v933 = 48;
      v934 = *(unsigned int **)(a1 + 8);
      uint64_t v935 = *v934;
      if ((*((unsigned char *)v934 + 33) & 0x10) != 0)
      {
        v937 = *(unsigned int **)(a1 + 8);
        unint64_t v936 = *v934;
        do
        {
          v937 = (unsigned int *)((char *)v937 + v935);
          uint64_t v935 = *v937;
          v936 += v935;
        }
        while ((*((unsigned char *)v937 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v936 = *v934;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v934, v936);
      ++v885;
    }
    while (v885 < a3[5].nelts);
  }
  uint64_t v938 = *(void *)a1;
  uint64_t v939 = *(void *)(a1 + 8);
  *(void *)(v939 + 16) = 0;
  *(void *)(v939 + 24) = 0;
  *(void *)(v939 + 8) = 0;
  *(_DWORD *)(v939 + 32) = 70;
  *(_DWORD *)(v939 + 36) = 67;
  *(void *)uint64_t v939 = 0xFFFFD00800000028;
  *(void *)(v939 + 40) = v938;
  *(_DWORD *)uint64_t v939 = 48;
  v940 = *(unsigned int **)(a1 + 8);
  uint64_t v941 = *v940;
  if ((*((unsigned char *)v940 + 33) & 0x10) != 0)
  {
    v943 = *(unsigned int **)(a1 + 8);
    unint64_t v942 = *v940;
    do
    {
      v943 = (unsigned int *)((char *)v943 + v941);
      uint64_t v941 = *v943;
      v942 += v941;
    }
    while ((*((unsigned char *)v943 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v942 = *v940;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v940, v942);
  v944 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "counterSampleBuffers";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v944, *(unsigned int *)(a1 + 16), v945, 0);
  v946 = *(unsigned int **)(a1 + 8);
  uint64_t v947 = *v946;
  if ((*((unsigned char *)v946 + 33) & 0x10) != 0)
  {
    v949 = *(unsigned int **)(a1 + 8);
    unint64_t v948 = *v946;
    do
    {
      v949 = (unsigned int *)((char *)v949 + v947);
      uint64_t v947 = *v949;
      v948 += v947;
    }
    while ((*((unsigned char *)v949 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v948 = *v946;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v946, v948);
  if (a3[19].nelts >= 1)
  {
    uint64_t v950 = 0;
    do
    {
      uint64_t v951 = *(void *)&a3[19].elts[8 * v950];
      if (v951) {
        uint64_t v952 = *(void *)(v951 + 8);
      }
      else {
        uint64_t v952 = 0;
      }
      *(void *)__str = v952;
      unint64_t v953 = *(void *)(*(void *)(*find_entry(v1582, __str, 8uLL, 0) + 32) + 8);
      v954 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "counterSampleBuffer";
      *(_OWORD *)&__str[16] = v953;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v954, *(unsigned int *)(a1 + 16), v955, 0);
      v956 = *(unsigned int **)(a1 + 8);
      uint64_t v957 = *v956;
      if ((*((unsigned char *)v956 + 33) & 0x10) != 0)
      {
        v959 = *(unsigned int **)(a1 + 8);
        unint64_t v958 = *v956;
        do
        {
          v959 = (unsigned int *)((char *)v959 + v957);
          uint64_t v957 = *v959;
          v958 += v957;
        }
        while ((*((unsigned char *)v959 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v958 = *v956;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v956, v958);
      uint64_t v960 = *(void *)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = v953;
      uint64_t v961 = *(void *)(v951 + 48);
      *(void *)&__str[24] = 0;
      uint64_t v962 = v960 + *(unsigned int *)(a1 + 16) - 512;
      *(void *)__s = 512;
      *(void *)&__str[16] = StoreMTLCounterSampleBufferDescriptorUsingEncode(*(void *)(a1 + 32), v961, v962, __s);
      DYTraceEncode_MTLDevice_newCounterSampleBufferWithDescriptor_error((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
      v963 = *(unsigned int **)(a1 + 8);
      uint64_t v964 = *v963;
      if ((*((unsigned char *)v963 + 33) & 0x10) != 0)
      {
        v966 = *(unsigned int **)(a1 + 8);
        unint64_t v965 = *v963;
        uint64_t v877 = v1582;
        do
        {
          v966 = (unsigned int *)((char *)v966 + v964);
          uint64_t v964 = *v966;
          v965 += v964;
        }
        while ((*((unsigned char *)v966 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v965 = *v963;
        uint64_t v877 = v1582;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v963, v965);
      uint64_t v967 = *(void *)a1;
      uint64_t v968 = *(void *)(a1 + 8);
      *(void *)(v968 + 16) = 0;
      *(void *)(v968 + 24) = 0;
      *(void *)(v968 + 8) = 0;
      *(_DWORD *)(v968 + 32) = 70;
      *(_DWORD *)(v968 + 36) = 67;
      *(void *)uint64_t v968 = 0xFFFFD00800000028;
      *(void *)(v968 + 40) = v967;
      *(_DWORD *)uint64_t v968 = 48;
      v969 = *(unsigned int **)(a1 + 8);
      uint64_t v970 = *v969;
      if ((*((unsigned char *)v969 + 33) & 0x10) != 0)
      {
        v972 = *(unsigned int **)(a1 + 8);
        unint64_t v971 = *v969;
        do
        {
          v972 = (unsigned int *)((char *)v972 + v970);
          uint64_t v970 = *v972;
          v971 += v970;
        }
        while ((*((unsigned char *)v972 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v971 = *v969;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v969, v971);
      ++v950;
    }
    while (v950 < a3[19].nelts);
  }
  uint64_t v973 = *(void *)a1;
  uint64_t v974 = *(void *)(a1 + 8);
  *(void *)(v974 + 16) = 0;
  *(void *)(v974 + 24) = 0;
  *(void *)(v974 + 8) = 0;
  *(_DWORD *)(v974 + 32) = 70;
  *(_DWORD *)(v974 + 36) = 67;
  *(void *)uint64_t v974 = 0xFFFFD00800000028;
  *(void *)(v974 + 40) = v973;
  *(_DWORD *)uint64_t v974 = 48;
  v975 = *(unsigned int **)(a1 + 8);
  uint64_t v976 = *v975;
  if ((*((unsigned char *)v975 + 33) & 0x10) != 0)
  {
    v978 = *(unsigned int **)(a1 + 8);
    unint64_t v977 = *v975;
    do
    {
      v978 = (unsigned int *)((char *)v978 + v976);
      uint64_t v976 = *v978;
      v977 += v976;
    }
    while ((*((unsigned char *)v978 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v977 = *v975;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v975, v977);
  v979 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "indirect-render-commands";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v979, *(unsigned int *)(a1 + 16), v980, 0);
  v981 = *(unsigned int **)(a1 + 8);
  uint64_t v982 = *v981;
  if ((*((unsigned char *)v981 + 33) & 0x10) != 0)
  {
    v984 = *(unsigned int **)(a1 + 8);
    unint64_t v983 = *v981;
    do
    {
      v984 = (unsigned int *)((char *)v984 + v982);
      uint64_t v982 = *v984;
      v983 += v982;
    }
    while ((*((unsigned char *)v984 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v983 = *v981;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v981, v983);
  if (a3[20].nelts >= 1)
  {
    uint64_t v985 = 0;
    do
    {
      v986 = *(void **)&a3[20].elts[8 * v985];
      *(void *)__str = v986[5];
      uint64_t v987 = *(void *)(*(void *)(*find_entry(v877, __str, 8uLL, 0) + 32) + 8);
      *(void *)__str = v986[1];
      uint64_t v988 = *(void *)(*(void *)(*find_entry(v877, __str, 8uLL, 0) + 32) + 8);
      uint64_t v989 = v986[6];
      uint64_t v990 = *(void *)(a1 + 8);
      *(void *)(v990 + 16) = 0;
      *(void *)(v990 + 24) = 0;
      *(void *)(v990 + 8) = 0;
      *(void *)(v990 + 32) = 0x6C754300000001;
      *(void *)uint64_t v990 = 0xFFFFC1CE00000028;
      *(void *)(v990 + 40) = v987;
      *(void *)(v990 + 48) = v989;
      *(_DWORD *)(v990 + 56) = 116;
      *(void *)(v990 + 60) = v988;
      *(_DWORD *)uint64_t v990 = 68;
      v991 = *(unsigned int **)(a1 + 8);
      uint64_t v992 = *v991;
      if ((*((unsigned char *)v991 + 33) & 0x10) != 0)
      {
        v994 = *(unsigned int **)(a1 + 8);
        unint64_t v993 = *v991;
        do
        {
          v994 = (unsigned int *)((char *)v994 + v992);
          uint64_t v992 = *v994;
          v993 += v992;
        }
        while ((*((unsigned char *)v994 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v993 = *v991;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v991, v993);
      ++v985;
    }
    while (v985 < a3[20].nelts);
  }
  uint64_t v995 = *(void *)a1;
  uint64_t v996 = *(void *)(a1 + 8);
  *(void *)(v996 + 16) = 0;
  *(void *)(v996 + 24) = 0;
  *(void *)(v996 + 8) = 0;
  *(_DWORD *)(v996 + 32) = 70;
  *(_DWORD *)(v996 + 36) = 67;
  *(void *)uint64_t v996 = 0xFFFFD00800000028;
  *(void *)(v996 + 40) = v995;
  *(_DWORD *)uint64_t v996 = 48;
  v997 = *(unsigned int **)(a1 + 8);
  uint64_t v998 = *v997;
  if ((*((unsigned char *)v997 + 33) & 0x10) != 0)
  {
    v1000 = *(unsigned int **)(a1 + 8);
    unint64_t v999 = *v997;
    do
    {
      v1000 = (unsigned int *)((char *)v1000 + v998);
      uint64_t v998 = *v1000;
      v999 += v998;
    }
    while ((*((unsigned char *)v1000 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v999 = *v997;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v997, v999);
  v1001 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "indirect-compute-commands";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v1001, *(unsigned int *)(a1 + 16), v1002, 0);
  v1003 = *(unsigned int **)(a1 + 8);
  uint64_t v1004 = *v1003;
  if ((*((unsigned char *)v1003 + 33) & 0x10) != 0)
  {
    v1006 = *(unsigned int **)(a1 + 8);
    unint64_t v1005 = *v1003;
    do
    {
      v1006 = (unsigned int *)((char *)v1006 + v1004);
      uint64_t v1004 = *v1006;
      v1005 += v1004;
    }
    while ((*((unsigned char *)v1006 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v1005 = *v1003;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1003, v1005);
  if (a3[21].nelts >= 1)
  {
    uint64_t v1007 = 0;
    do
    {
      v1008 = *(void **)&a3[21].elts[8 * v1007];
      *(void *)__str = v1008[5];
      uint64_t v1009 = *(void *)(*(void *)(*find_entry(v877, __str, 8uLL, 0) + 32) + 8);
      *(void *)__str = v1008[1];
      uint64_t v1010 = *(void *)(*(void *)(*find_entry(v877, __str, 8uLL, 0) + 32) + 8);
      uint64_t v1011 = v1008[6];
      uint64_t v1012 = *(void *)(a1 + 8);
      *(void *)(v1012 + 16) = 0;
      *(void *)(v1012 + 24) = 0;
      *(void *)(v1012 + 8) = 0;
      *(void *)(v1012 + 32) = 0x6C754300000001;
      *(void *)uint64_t v1012 = 0xFFFFC1CF00000028;
      *(void *)(v1012 + 40) = v1009;
      *(void *)(v1012 + 48) = v1011;
      *(_DWORD *)(v1012 + 56) = 116;
      *(void *)(v1012 + 60) = v1010;
      *(_DWORD *)uint64_t v1012 = 68;
      v1013 = *(unsigned int **)(a1 + 8);
      uint64_t v1014 = *v1013;
      if ((*((unsigned char *)v1013 + 33) & 0x10) != 0)
      {
        v1016 = *(unsigned int **)(a1 + 8);
        unint64_t v1015 = *v1013;
        do
        {
          v1016 = (unsigned int *)((char *)v1016 + v1014);
          uint64_t v1014 = *v1016;
          v1015 += v1014;
        }
        while ((*((unsigned char *)v1016 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v1015 = *v1013;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1013, v1015);
      ++v1007;
    }
    while (v1007 < a3[21].nelts);
  }
  uint64_t v1017 = *(void *)a1;
  uint64_t v1018 = *(void *)(a1 + 8);
  *(void *)(v1018 + 16) = 0;
  *(void *)(v1018 + 24) = 0;
  *(void *)(v1018 + 8) = 0;
  *(_DWORD *)(v1018 + 32) = 70;
  *(_DWORD *)(v1018 + 36) = 67;
  *(void *)uint64_t v1018 = 0xFFFFD00800000028;
  *(void *)(v1018 + 40) = v1017;
  *(_DWORD *)uint64_t v1018 = 48;
  v1019 = *(unsigned int **)(a1 + 8);
  uint64_t v1020 = *v1019;
  if ((*((unsigned char *)v1019 + 33) & 0x10) != 0)
  {
    v1022 = *(unsigned int **)(a1 + 8);
    unint64_t v1021 = *v1019;
    do
    {
      v1022 = (unsigned int *)((char *)v1022 + v1020);
      uint64_t v1020 = *v1022;
      v1021 += v1020;
    }
    while ((*((unsigned char *)v1022 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v1021 = *v1019;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1019, v1021);
  v1023 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "rasterization-rate-maps";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v1023, *(unsigned int *)(a1 + 16), v1024, 0);
  v1025 = *(unsigned int **)(a1 + 8);
  uint64_t v1026 = *v1025;
  if ((*((unsigned char *)v1025 + 33) & 0x10) != 0)
  {
    v1028 = *(unsigned int **)(a1 + 8);
    unint64_t v1027 = *v1025;
    do
    {
      v1028 = (unsigned int *)((char *)v1028 + v1026);
      uint64_t v1026 = *v1028;
      v1027 += v1026;
    }
    while ((*((unsigned char *)v1028 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v1027 = *v1025;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1025, v1027);
  if (a3[24].nelts >= 1)
  {
    uint64_t v1029 = 0;
    do
    {
      uint64_t v1030 = *(void *)&a3[24].elts[8 * v1029];
      if (v1030) {
        uint64_t v1031 = *(void *)(v1030 + 8);
      }
      else {
        uint64_t v1031 = 0;
      }
      *(void *)__str = v1031;
      unint64_t v1032 = *(void *)(*(void *)(*find_entry(v1582, __str, 8uLL, 0) + 32) + 8);
      v1033 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "rasterization-rate-map";
      *(_OWORD *)&__str[16] = v1032;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v1033, *(unsigned int *)(a1 + 16), v1034, 0);
      v1035 = *(unsigned int **)(a1 + 8);
      uint64_t v1036 = *v1035;
      if ((*((unsigned char *)v1035 + 33) & 0x10) != 0)
      {
        v1038 = *(unsigned int **)(a1 + 8);
        unint64_t v1037 = *v1035;
        do
        {
          v1038 = (unsigned int *)((char *)v1038 + v1036);
          uint64_t v1036 = *v1038;
          v1037 += v1036;
        }
        while ((*((unsigned char *)v1038 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v1037 = *v1035;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1035, v1037);
      v1039 = *(long long **)(v1030 + 48);
      long long v1040 = *v1039;
      long long v1041 = v1039[1];
      *(void *)&__str[32] = *((void *)v1039 + 4);
      *(_OWORD *)__str = v1040;
      *(_OWORD *)&__str[16] = v1041;
      *(_DWORD *)&__str[24] = *(_DWORD *)(v1030 + 56);
      __str[34] = *(unsigned char *)(v1030 + 60);
      uint64_t v1042 = *(void *)(a1 + 8);
      *(void *)__s = *(void *)a1;
      v1615[0] = v1032;
      uint64_t v1043 = v1042 + *(unsigned int *)(a1 + 16) - 512;
      newpool[0] = (apr_pool_t *)(&stru_1F8 + 8);
      v1615[1] = StoreMTLRasterizationRateMapDescriptorUsingEncode(*(void *)(a1 + 32), (const char **)__str, v1043, newpool);
      DYTraceEncode_MTLDevice_newRasterizationRateMapWithDescriptor((uint64_t)__s, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
      v1044 = *(unsigned int **)(a1 + 8);
      uint64_t v1045 = *v1044;
      if ((*((unsigned char *)v1044 + 33) & 0x10) != 0)
      {
        v1047 = *(unsigned int **)(a1 + 8);
        unint64_t v1046 = *v1044;
        do
        {
          v1047 = (unsigned int *)((char *)v1047 + v1045);
          uint64_t v1045 = *v1047;
          v1046 += v1045;
        }
        while ((*((unsigned char *)v1047 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v1046 = *v1044;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1044, v1046);
      uint64_t v1048 = *(void *)a1;
      uint64_t v1049 = *(void *)(a1 + 8);
      *(void *)(v1049 + 16) = 0;
      *(void *)(v1049 + 24) = 0;
      *(void *)(v1049 + 8) = 0;
      *(_DWORD *)(v1049 + 32) = 70;
      *(_DWORD *)(v1049 + 36) = 67;
      *(void *)uint64_t v1049 = 0xFFFFD00800000028;
      *(void *)(v1049 + 40) = v1048;
      *(_DWORD *)uint64_t v1049 = 48;
      v1050 = *(unsigned int **)(a1 + 8);
      uint64_t v1051 = *v1050;
      if ((*((unsigned char *)v1050 + 33) & 0x10) != 0)
      {
        v1053 = *(unsigned int **)(a1 + 8);
        unint64_t v1052 = *v1050;
        do
        {
          v1053 = (unsigned int *)((char *)v1053 + v1051);
          uint64_t v1051 = *v1053;
          v1052 += v1051;
        }
        while ((*((unsigned char *)v1053 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v1052 = *v1050;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1050, v1052);
      ++v1029;
    }
    while (v1029 < a3[24].nelts);
  }
  uint64_t v1054 = *(void *)a1;
  uint64_t v1055 = *(void *)(a1 + 8);
  *(void *)(v1055 + 16) = 0;
  *(void *)(v1055 + 24) = 0;
  *(void *)(v1055 + 8) = 0;
  *(_DWORD *)(v1055 + 32) = 70;
  *(_DWORD *)(v1055 + 36) = 67;
  *(void *)uint64_t v1055 = 0xFFFFD00800000028;
  *(void *)(v1055 + 40) = v1054;
  *(_DWORD *)uint64_t v1055 = 48;
  v1056 = *(unsigned int **)(a1 + 8);
  uint64_t v1057 = *v1056;
  if ((*((unsigned char *)v1056 + 33) & 0x10) != 0)
  {
    v1060 = *(unsigned int **)(a1 + 8);
    unint64_t v1058 = *v1056;
    uint64_t v1059 = v1582;
    do
    {
      v1060 = (unsigned int *)((char *)v1060 + v1057);
      uint64_t v1057 = *v1060;
      v1058 += v1057;
    }
    while ((*((unsigned char *)v1060 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v1058 = *v1056;
    uint64_t v1059 = v1582;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1056, v1058);
  v1061 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "resource-groups";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v1061, *(unsigned int *)(a1 + 16), v1062, 0);
  v1063 = *(unsigned int **)(a1 + 8);
  uint64_t v1064 = *v1063;
  if ((*((unsigned char *)v1063 + 33) & 0x10) != 0)
  {
    v1066 = *(unsigned int **)(a1 + 8);
    unint64_t v1065 = *v1063;
    do
    {
      v1066 = (unsigned int *)((char *)v1066 + v1064);
      uint64_t v1064 = *v1066;
      v1065 += v1064;
    }
    while ((*((unsigned char *)v1066 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v1065 = *v1063;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1063, v1065);
  if (a3[25].nelts >= 1)
  {
    uint64_t v1067 = 0;
    do
      WriteGTMTLSMResourceGroup((uint64_t *)a1, *(void *)&a3[25].elts[8 * v1067++], v1059);
    while (v1067 < a3[25].nelts);
  }
  uint64_t v1068 = *(void *)a1;
  uint64_t v1069 = *(void *)(a1 + 8);
  *(void *)(v1069 + 16) = 0;
  *(void *)(v1069 + 24) = 0;
  *(void *)(v1069 + 8) = 0;
  *(_DWORD *)(v1069 + 32) = 70;
  *(_DWORD *)(v1069 + 36) = 67;
  *(void *)uint64_t v1069 = 0xFFFFD00800000028;
  *(void *)(v1069 + 40) = v1068;
  *(_DWORD *)uint64_t v1069 = 48;
  v1070 = *(unsigned int **)(a1 + 8);
  uint64_t v1071 = *v1070;
  if ((*((unsigned char *)v1070 + 33) & 0x10) != 0)
  {
    v1073 = *(unsigned int **)(a1 + 8);
    unint64_t v1072 = *v1070;
    do
    {
      v1073 = (unsigned int *)((char *)v1073 + v1071);
      uint64_t v1071 = *v1073;
      v1072 += v1071;
    }
    while ((*((unsigned char *)v1073 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v1072 = *v1070;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1070, v1072);
  v1074 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "primitive-acceleration-structures";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v1074, *(unsigned int *)(a1 + 16), v1075, 0);
  v1076 = *(unsigned int **)(a1 + 8);
  uint64_t v1077 = *v1076;
  if ((*((unsigned char *)v1076 + 33) & 0x10) != 0)
  {
    v1079 = *(unsigned int **)(a1 + 8);
    unint64_t v1078 = *v1076;
    do
    {
      v1079 = (unsigned int *)((char *)v1079 + v1077);
      uint64_t v1077 = *v1079;
      v1078 += v1077;
    }
    while ((*((unsigned char *)v1079 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v1078 = *v1076;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1076, v1078);
  if (a3[8].nelts >= 1)
  {
    uint64_t v1080 = 0;
    do
    {
      uint64_t v1081 = *(void *)&a3[8].elts[8 * v1080];
      if (v1081)
      {
        *(void *)__str = *(void *)(v1081 + 8);
        v1082 = find_entry(v1582, __str, 8uLL, 0);
        if (*v1082) {
          uint64_t v1083 = *(void *)(*v1082 + 32);
        }
        else {
          uint64_t v1083 = 0;
        }
        uint64_t v1085 = *(void *)(v1081 + 8);
      }
      else
      {
        *(void *)__str = 0;
        v1084 = find_entry(v1582, __str, 8uLL, 0);
        if (*v1084) {
          uint64_t v1083 = *(void *)(*v1084 + 32);
        }
        else {
          uint64_t v1083 = 0;
        }
        uint64_t v1085 = 0;
      }
      *(void *)__str = v1085;
      v1086 = find_entry(v1582, __str, 8uLL, 0);
      if (!*(void *)(v1081 + 144) && !*(void *)(v1081 + 48) && !*(unsigned char *)(v1081 + 104))
      {
        unint64_t v1088 = *(void *)(*(void *)(*v1086 + 32) + 8);
        v1089 = *(unsigned int **)(a1 + 8);
        *(void *)__str = *(void *)a1;
        *(void *)&__str[8] = "primitive-acceleration-structure";
        *(_OWORD *)&__str[16] = v1088;
        DYTraceEncode_EnterStateGroup((uint64_t)__str, v1089, *(unsigned int *)(a1 + 16), v1087, 0);
        v1090 = *(unsigned int **)(a1 + 8);
        uint64_t v1091 = *v1090;
        if ((*((unsigned char *)v1090 + 33) & 0x10) != 0)
        {
          v1093 = *(unsigned int **)(a1 + 8);
          unint64_t v1092 = *v1090;
          do
          {
            v1093 = (unsigned int *)((char *)v1093 + v1091);
            uint64_t v1091 = *v1093;
            v1092 += v1091;
          }
          while ((*((unsigned char *)v1093 + 33) & 0x20) == 0);
        }
        else
        {
          unint64_t v1092 = *v1090;
        }
        fbstream_write(*(void *)(a1 + 24), (uint64_t)v1090, v1092);
        WriteGTMTLSMAccelerationStructure_new((uint64_t *)a1, *(void *)(a2 + 16), v1081, *(void *)(v1083 + 8));
        WriteGTMTLSMAccelerationStructure_properties(a1, v1081, v1083, v1582, v1094);
        uint64_t v1095 = *(void *)a1;
        uint64_t v1096 = *(void *)(a1 + 8);
        *(void *)(v1096 + 16) = 0;
        *(void *)(v1096 + 24) = 0;
        *(void *)(v1096 + 8) = 0;
        *(_DWORD *)(v1096 + 32) = 70;
        *(_DWORD *)(v1096 + 36) = 67;
        *(void *)uint64_t v1096 = 0xFFFFD00800000028;
        *(void *)(v1096 + 40) = v1095;
        *(_DWORD *)uint64_t v1096 = 48;
        v1097 = *(unsigned int **)(a1 + 8);
        uint64_t v1098 = *v1097;
        if ((*((unsigned char *)v1097 + 33) & 0x10) != 0)
        {
          v1100 = *(unsigned int **)(a1 + 8);
          unint64_t v1099 = *v1097;
          do
          {
            v1100 = (unsigned int *)((char *)v1100 + v1098);
            uint64_t v1098 = *v1100;
            v1099 += v1098;
          }
          while ((*((unsigned char *)v1100 + 33) & 0x20) == 0);
        }
        else
        {
          unint64_t v1099 = *v1097;
        }
        fbstream_write(*(void *)(a1 + 24), (uint64_t)v1097, v1099);
      }
      ++v1080;
    }
    while (v1080 < a3[8].nelts);
  }
  uint64_t v1101 = *(void *)a1;
  uint64_t v1102 = *(void *)(a1 + 8);
  *(void *)(v1102 + 16) = 0;
  *(void *)(v1102 + 24) = 0;
  *(void *)(v1102 + 8) = 0;
  *(_DWORD *)(v1102 + 32) = 70;
  *(_DWORD *)(v1102 + 36) = 67;
  *(void *)uint64_t v1102 = 0xFFFFD00800000028;
  *(void *)(v1102 + 40) = v1101;
  *(_DWORD *)uint64_t v1102 = 48;
  v1103 = *(unsigned int **)(a1 + 8);
  uint64_t v1104 = *v1103;
  if ((*((unsigned char *)v1103 + 33) & 0x10) != 0)
  {
    v1106 = *(unsigned int **)(a1 + 8);
    unint64_t v1105 = *v1103;
    do
    {
      v1106 = (unsigned int *)((char *)v1106 + v1104);
      uint64_t v1104 = *v1106;
      v1105 += v1104;
    }
    while ((*((unsigned char *)v1106 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v1105 = *v1103;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1103, v1105);
  v1107 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "instance-acceleration-structures";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v1107, *(unsigned int *)(a1 + 16), v1108, 0);
  v1109 = *(unsigned int **)(a1 + 8);
  uint64_t v1110 = *v1109;
  if ((*((unsigned char *)v1109 + 33) & 0x10) != 0)
  {
    v1112 = *(unsigned int **)(a1 + 8);
    unint64_t v1111 = *v1109;
    do
    {
      v1112 = (unsigned int *)((char *)v1112 + v1110);
      uint64_t v1110 = *v1112;
      v1111 += v1110;
    }
    while ((*((unsigned char *)v1112 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v1111 = *v1109;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1109, v1111);
  if (a3[8].nelts >= 1)
  {
    uint64_t v1113 = 0;
    do
    {
      uint64_t v1114 = *(void *)&a3[8].elts[8 * v1113];
      if (!*(void *)(v1114 + 144) && !*(void *)(v1114 + 48))
      {
        *(void *)__str = *(void *)(v1114 + 8);
        v1115 = find_entry(v1582, __str, 8uLL, 0);
        if (*v1115) {
          uint64_t v1116 = *(void *)(*v1115 + 32);
        }
        else {
          uint64_t v1116 = 0;
        }
        *(void *)__str = *(void *)(v1114 + 8);
        uint64_t v1118 = *find_entry(v1582, __str, 8uLL, 0);
        if (v1118) {
          uint64_t v1118 = *(void *)(v1118 + 32);
        }
        if (*(unsigned char *)(v1114 + 104))
        {
          unint64_t v1119 = *(void *)(v1118 + 8);
          v1120 = *(unsigned int **)(a1 + 8);
          *(void *)__str = *(void *)a1;
          *(void *)&__str[8] = "instance-acceleration-structure";
          *(_OWORD *)&__str[16] = v1119;
          DYTraceEncode_EnterStateGroup((uint64_t)__str, v1120, *(unsigned int *)(a1 + 16), v1117, 0);
          v1121 = *(unsigned int **)(a1 + 8);
          uint64_t v1122 = *v1121;
          if ((*((unsigned char *)v1121 + 33) & 0x10) != 0)
          {
            v1124 = *(unsigned int **)(a1 + 8);
            unint64_t v1123 = *v1121;
            do
            {
              v1124 = (unsigned int *)((char *)v1124 + v1122);
              uint64_t v1122 = *v1124;
              v1123 += v1122;
            }
            while ((*((unsigned char *)v1124 + 33) & 0x20) == 0);
          }
          else
          {
            unint64_t v1123 = *v1121;
          }
          fbstream_write(*(void *)(a1 + 24), (uint64_t)v1121, v1123);
          WriteGTMTLSMAccelerationStructure_new((uint64_t *)a1, *(void *)(a2 + 16), v1114, *(void *)(v1116 + 8));
          WriteGTMTLSMAccelerationStructure_properties(a1, v1114, v1116, v1582, v1125);
          uint64_t v1126 = *(void *)a1;
          uint64_t v1127 = *(void *)(a1 + 8);
          *(void *)(v1127 + 16) = 0;
          *(void *)(v1127 + 24) = 0;
          *(void *)(v1127 + 8) = 0;
          *(_DWORD *)(v1127 + 32) = 70;
          *(_DWORD *)(v1127 + 36) = 67;
          *(void *)uint64_t v1127 = 0xFFFFD00800000028;
          *(void *)(v1127 + 40) = v1126;
          *(_DWORD *)uint64_t v1127 = 48;
          v1128 = *(unsigned int **)(a1 + 8);
          uint64_t v1129 = *v1128;
          if ((*((unsigned char *)v1128 + 33) & 0x10) != 0)
          {
            v1131 = *(unsigned int **)(a1 + 8);
            unint64_t v1130 = *v1128;
            do
            {
              v1131 = (unsigned int *)((char *)v1131 + v1129);
              uint64_t v1129 = *v1131;
              v1130 += v1129;
            }
            while ((*((unsigned char *)v1131 + 33) & 0x20) == 0);
          }
          else
          {
            unint64_t v1130 = *v1128;
          }
          fbstream_write(*(void *)(a1 + 24), (uint64_t)v1128, v1130);
        }
      }
      ++v1113;
    }
    while (v1113 < a3[8].nelts);
  }
  uint64_t v1132 = *(void *)a1;
  uint64_t v1133 = *(void *)(a1 + 8);
  *(void *)(v1133 + 16) = 0;
  *(void *)(v1133 + 24) = 0;
  *(void *)(v1133 + 8) = 0;
  *(_DWORD *)(v1133 + 32) = 70;
  *(_DWORD *)(v1133 + 36) = 67;
  *(void *)uint64_t v1133 = 0xFFFFD00800000028;
  *(void *)(v1133 + 40) = v1132;
  *(_DWORD *)uint64_t v1133 = 48;
  v1134 = *(unsigned int **)(a1 + 8);
  uint64_t v1135 = *v1134;
  if ((*((unsigned char *)v1134 + 33) & 0x10) != 0)
  {
    v1138 = *(unsigned int **)(a1 + 8);
    unint64_t v1136 = *v1134;
    uint64_t v1137 = v1582;
    do
    {
      v1138 = (unsigned int *)((char *)v1138 + v1135);
      uint64_t v1135 = *v1138;
      v1136 += v1135;
    }
    while ((*((unsigned char *)v1138 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v1136 = *v1134;
    uint64_t v1137 = v1582;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1134, v1136);
  v1139 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "primitive-acceleration-structure-restores";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v1139, *(unsigned int *)(a1 + 16), v1140, 0);
  v1141 = *(unsigned int **)(a1 + 8);
  uint64_t v1142 = *v1141;
  if ((*((unsigned char *)v1141 + 33) & 0x10) != 0)
  {
    v1144 = *(unsigned int **)(a1 + 8);
    unint64_t v1143 = *v1141;
    do
    {
      v1144 = (unsigned int *)((char *)v1144 + v1142);
      uint64_t v1142 = *v1144;
      v1143 += v1142;
    }
    while ((*((unsigned char *)v1144 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v1143 = *v1141;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1141, v1143);
  if (a3[8].nelts >= 1)
  {
    uint64_t v1145 = 0;
    do
    {
      uint64_t v1146 = *(void *)&a3[8].elts[8 * v1145];
      if (*(unsigned char *)(v1146 + 105))
      {
        *(void *)__str = *(void *)(v1146 + 8);
        v1147 = find_entry(v1137, __str, 8uLL, 0);
        uint64_t v1148 = *v1147 ? *(void *)(*v1147 + 32) : 0;
        *(void *)__str = *(void *)(v1146 + 8);
        find_entry(v1137, __str, 8uLL, 0);
        *(void *)__str = *(void *)(v1146 + 8);
        uint64_t v1149 = *find_entry(v1575, __str, 8uLL, 0);
        if (v1149)
        {
          if (!*(unsigned char *)(v1146 + 104))
          {
            uint64_t v1150 = *(void *)(v1149 + 32);
            if (v1150)
            {
              uint64_t v1151 = *(void *)(v1148 + 8);
              GTResourceDownloaderGetResourceFilename(v1150, 0, __str, 0x80uLL);
              uint64_t FileSize = GTMTLCaptureState_getFileSize(*(void *)(a1 + 32), __str);
              if (FileSize)
              {
                *(void *)__s = v1151;
                v1615[0] = __str;
                v1615[1] = FileSize;
                DYTraceEncode_MTLAccelerationStructure_restoreMTLAccelerationStructure((uint64_t)__s, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
                v1153 = *(unsigned int **)(a1 + 8);
                uint64_t v1154 = *v1153;
                if ((*((unsigned char *)v1153 + 33) & 0x10) != 0)
                {
                  v1156 = *(unsigned int **)(a1 + 8);
                  unint64_t v1155 = *v1153;
                  do
                  {
                    v1156 = (unsigned int *)((char *)v1156 + v1154);
                    uint64_t v1154 = *v1156;
                    v1155 += v1154;
                  }
                  while ((*((unsigned char *)v1156 + 33) & 0x20) == 0);
                }
                else
                {
                  unint64_t v1155 = *v1153;
                }
                fbstream_write(*(void *)(a1 + 24), (uint64_t)v1153, v1155);
              }
            }
          }
        }
      }
      ++v1145;
    }
    while (v1145 < a3[8].nelts);
  }
  uint64_t v1157 = *(void *)a1;
  uint64_t v1158 = *(void *)(a1 + 8);
  *(void *)(v1158 + 16) = 0;
  *(void *)(v1158 + 24) = 0;
  *(void *)(v1158 + 8) = 0;
  *(_DWORD *)(v1158 + 32) = 70;
  *(_DWORD *)(v1158 + 36) = 67;
  *(void *)uint64_t v1158 = 0xFFFFD00800000028;
  *(void *)(v1158 + 40) = v1157;
  *(_DWORD *)uint64_t v1158 = 48;
  v1159 = *(unsigned int **)(a1 + 8);
  uint64_t v1160 = *v1159;
  if ((*((unsigned char *)v1159 + 33) & 0x10) != 0)
  {
    v1162 = *(unsigned int **)(a1 + 8);
    unint64_t v1161 = *v1159;
    do
    {
      v1162 = (unsigned int *)((char *)v1162 + v1160);
      uint64_t v1160 = *v1162;
      v1161 += v1160;
    }
    while ((*((unsigned char *)v1162 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v1161 = *v1159;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1159, v1161);
  v1163 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "instance-acceleration-structure-restores";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v1163, *(unsigned int *)(a1 + 16), v1164, 0);
  v1165 = *(unsigned int **)(a1 + 8);
  uint64_t v1166 = *v1165;
  if ((*((unsigned char *)v1165 + 33) & 0x10) != 0)
  {
    v1168 = *(unsigned int **)(a1 + 8);
    unint64_t v1167 = *v1165;
    do
    {
      v1168 = (unsigned int *)((char *)v1168 + v1166);
      uint64_t v1166 = *v1168;
      v1167 += v1166;
    }
    while ((*((unsigned char *)v1168 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v1167 = *v1165;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1165, v1167);
  if (a3[8].nelts >= 1)
  {
    uint64_t v1169 = 0;
    do
    {
      uint64_t v1170 = *(void *)&a3[8].elts[8 * v1169];
      if (*(unsigned char *)(v1170 + 105))
      {
        *(void *)__str = *(void *)(v1170 + 8);
        v1171 = find_entry(v1137, __str, 8uLL, 0);
        uint64_t v1172 = *v1171 ? *(void *)(*v1171 + 32) : 0;
        *(void *)__str = *(void *)(v1170 + 8);
        find_entry(v1137, __str, 8uLL, 0);
        *(void *)__str = *(void *)(v1170 + 8);
        uint64_t v1173 = *find_entry(v1575, __str, 8uLL, 0);
        if (v1173)
        {
          if (*(unsigned char *)(v1170 + 104))
          {
            uint64_t v1174 = *(void *)(v1173 + 32);
            if (v1174)
            {
              v1175 = *(apr_pool_t **)(v1172 + 8);
              GTResourceDownloaderGetResourceFilename(*(void *)(v1173 + 32), 0, __str, 0x80uLL);
              uint64_t v1176 = GTMTLCaptureState_getFileSize(*(void *)(a1 + 32), __str);
              if (v1176)
              {
                v1177 = (apr_pool_t *)v1176;
                GTResourceDownloaderGetResourceFilename(v1174, 1, __s, 0x80uLL);
                unint64_t v1178 = GTMTLCaptureState_getFileSize(*(void *)(a1 + 32), __s);
                newpool[0] = v1175;
                newpool[1] = (apr_pool_t *)__str;
                newpool[2] = v1177;
                newpool[3] = (apr_pool_t *)__s;
                newpool[4] = (apr_pool_t *)(v1178 >> 3);
                DYTraceEncode_MTLAccelerationStructure_restoreMTLAccelerationStructure_instance((uint64_t)newpool, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
                v1179 = *(unsigned int **)(a1 + 8);
                uint64_t v1180 = *v1179;
                if ((*((unsigned char *)v1179 + 33) & 0x10) != 0)
                {
                  v1182 = *(unsigned int **)(a1 + 8);
                  unint64_t v1181 = *v1179;
                  do
                  {
                    v1182 = (unsigned int *)((char *)v1182 + v1180);
                    uint64_t v1180 = *v1182;
                    v1181 += v1180;
                  }
                  while ((*((unsigned char *)v1182 + 33) & 0x20) == 0);
                }
                else
                {
                  unint64_t v1181 = *v1179;
                }
                fbstream_write(*(void *)(a1 + 24), (uint64_t)v1179, v1181);
              }
            }
          }
        }
      }
      ++v1169;
    }
    while (v1169 < a3[8].nelts);
  }
  uint64_t v1183 = *(void *)a1;
  uint64_t v1184 = *(void *)(a1 + 8);
  *(void *)(v1184 + 16) = 0;
  *(void *)(v1184 + 24) = 0;
  *(void *)(v1184 + 8) = 0;
  *(_DWORD *)(v1184 + 32) = 70;
  *(_DWORD *)(v1184 + 36) = 67;
  *(void *)uint64_t v1184 = 0xFFFFD00800000028;
  *(void *)(v1184 + 40) = v1183;
  *(_DWORD *)uint64_t v1184 = 48;
  v1185 = *(unsigned int **)(a1 + 8);
  uint64_t v1186 = *v1185;
  if ((*((unsigned char *)v1185 + 33) & 0x10) != 0)
  {
    v1188 = *(unsigned int **)(a1 + 8);
    unint64_t v1187 = *v1185;
    do
    {
      v1188 = (unsigned int *)((char *)v1188 + v1186);
      uint64_t v1186 = *v1188;
      v1187 += v1186;
    }
    while ((*((unsigned char *)v1188 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v1187 = *v1185;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1185, v1187);
  v1189 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "mps-filters";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v1189, *(unsigned int *)(a1 + 16), v1190, 0);
  v1191 = *(unsigned int **)(a1 + 8);
  uint64_t v1192 = *v1191;
  if ((*((unsigned char *)v1191 + 33) & 0x10) != 0)
  {
    v1194 = *(unsigned int **)(a1 + 8);
    unint64_t v1193 = *v1191;
    do
    {
      v1194 = (unsigned int *)((char *)v1194 + v1192);
      uint64_t v1192 = *v1194;
      v1193 += v1192;
    }
    while ((*((unsigned char *)v1194 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v1193 = *v1191;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1191, v1193);
  if (a3[26].nelts >= 1)
  {
    uint64_t v1195 = 0;
    do
    {
      uint64_t v1196 = *(void *)&a3[26].elts[8 * v1195];
      if (v1196) {
        uint64_t v1197 = *(void *)(v1196 + 8);
      }
      else {
        uint64_t v1197 = 0;
      }
      *(void *)__str = v1197;
      unint64_t v1198 = *(void *)(*(void *)(*find_entry(v1582, __str, 8uLL, 0) + 32) + 8);
      v1199 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "mps-filter";
      *(_OWORD *)&__str[16] = v1198;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v1199, *(unsigned int *)(a1 + 16), v1200, 0);
      v1201 = *(unsigned int **)(a1 + 8);
      uint64_t v1202 = *v1201;
      if ((*((unsigned char *)v1201 + 33) & 0x10) != 0)
      {
        v1204 = *(unsigned int **)(a1 + 8);
        unint64_t v1203 = *v1201;
        do
        {
          v1204 = (unsigned int *)((char *)v1204 + v1202);
          uint64_t v1202 = *v1204;
          v1203 += v1202;
        }
        while ((*((unsigned char *)v1204 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v1203 = *v1201;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1201, v1203);
      uint64_t v1205 = *(void *)(v1196 + 40);
      if (v1205 <= 4294961173)
      {
        switch(v1205)
        {
          case 4294961153:
            uint64_t v1208 = *(void *)(a1 + 8);
            *(void *)__str = *(void *)a1;
            *(void *)&__str[8] = v1198;
            long long v1579 = *(_OWORD *)(v1196 + 56);
            uint64_t v1209 = v1208 + *(unsigned int *)(a1 + 16);
            *(void *)__s = 512;
            uint64_t v1210 = *(void *)(a1 + 32);
            *(void *)&__str[16] = StoreMPSPluginCNNConvolutionDescriptorUsingEncode(v1210, v1579, v1209 - 512, __s);
            *(void *)&__str[24] = StoreMPSPluginCNNConvolutionDataUsingEncode(v1210, *((unsigned int **)&v1579 + 1), v1209 - *(void *)__s, __s);
            DYTraceEncode_MPSPlugin_newCNNConvolutionWithDescriptor_convolutionData((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
            goto LABEL_1004;
          case 4294961155:
            long long v1222 = *(_OWORD *)(v1196 + 56);
            long long v1223 = *(_OWORD *)(v1196 + 72);
            uint64_t v1224 = *(void *)a1;
            uint64_t v1215 = *(void *)(a1 + 8);
            *(void *)(v1215 + 8) = 0;
            *(void *)(v1215 + 16) = 0;
            *(void *)(v1215 + 24) = 0;
            *(void *)uint64_t v1215 = 0xFFFFE80300000024;
LABEL_997:
            *(_DWORD *)(v1215 + 32) = 1;
            *(void *)(v1215 + 36) = *(void *)"Culululul";
            *(_DWORD *)(v1215 + 44) = 108;
            *(void *)(v1215 + 48) = v1224;
            *(_OWORD *)(v1215 + 56) = v1222;
            *(_OWORD *)(v1215 + 72) = v1223;
            *(_DWORD *)(v1215 + 88) = 116;
            *(void *)(v1215 + 92) = v1198;
            int v1221 = 100;
LABEL_998:
            *(_DWORD *)uint64_t v1215 = v1221;
            goto LABEL_1004;
          case 4294961162:
            *(void *)&__str[8] = v1198;
            *(void *)&__str[16] = 0;
            uint64_t v1225 = *(void *)(a1 + 8);
            *(void *)__str = *(void *)a1;
            *(_DWORD *)&__str[16] = *(unsigned __int8 *)(v1196 + 96);
            *(_OWORD *)&__str[24] = *(_OWORD *)(v1196 + 56);
            *(_OWORD *)&__str[40] = *(_OWORD *)(v1196 + 80);
            DYTraceEncode_MPSPlugin_newMatrixVectorMultiplicationWithTranspose_rows_columns_alpha_beta((uint64_t)__str, v1225, *(unsigned int *)(a1 + 16), 0, 0);
            goto LABEL_1004;
          case 4294961163:
            uint64_t v1226 = *(void *)(v1196 + 56);
            uint64_t v1227 = *(void *)(v1196 + 64);
            int v1228 = *(_DWORD *)(v1196 + 72);
            uint64_t v1229 = *(void *)a1;
            uint64_t v1230 = *(void *)(a1 + 8);
            *(void *)(v1230 + 8) = 0;
            *(void *)(v1230 + 16) = 0;
            *(void *)(v1230 + 24) = 0;
            *(void *)uint64_t v1230 = 0xFFFFE80B00000024;
            *(_DWORD *)(v1230 + 32) = 1;
            *(void *)(v1230 + 36) = 0x6666666943;
            *(void *)(v1230 + 44) = v1229;
            *(_DWORD *)(v1230 + 52) = v1226;
            *(void *)(v1230 + 56) = v1227;
            *(_DWORD *)(v1230 + 64) = v1228;
            *(_DWORD *)(v1230 + 68) = 116;
            *(void *)(v1230 + 72) = v1198;
            *(_DWORD *)uint64_t v1230 = 80;
            goto LABEL_1004;
          case 4294961165:
            *(void *)&__str[32] = 0;
            uint64_t v1231 = *(void *)(a1 + 8);
            *(void *)__str = *(void *)a1;
            *(void *)&__str[8] = v1198;
            long long v1581 = *(_OWORD *)(v1196 + 56);
            *(_DWORD *)&__str[32] = *(unsigned __int8 *)(v1196 + 72);
            uint64_t v1232 = v1231 + *(unsigned int *)(a1 + 16);
            *(void *)__s = 512;
            uint64_t v1233 = *(void *)(a1 + 32);
            *(void *)&__str[16] = StoreMPSPluginCNNConvolutionDescriptorUsingEncode(v1233, v1581, v1232 - 512, __s);
            *(void *)&__str[24] = StoreMPSPluginCNNConvolutionDataUsingEncode(v1233, *((unsigned int **)&v1581 + 1), v1232 - *(void *)__s, __s);
            DYTraceEncode_MPSPlugin_newCNNConvolutionWithDescriptor_dataSource_fullyConnected((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
            goto LABEL_1004;
          case 4294961167:
            uint64_t v1234 = *(void *)(a1 + 8);
            *(void *)__str = *(void *)a1;
            *(void *)&__str[8] = v1198;
            uint64_t v1235 = *(void *)(v1196 + 64);
            uint64_t v1236 = *(void *)(v1196 + 56);
            *(void *)&__str[24] = *(void *)(v1196 + 72);
            *(void *)&__str[16] = v1236;
            *(void *)&__str[32] = v1235;
            GTTrace_storePointer(a1, -6129, (uint64_t)__str, (char *)(v1234 + *(unsigned int *)(a1 + 16) - 512), 512, v1582);
            DYTraceEncode_MPSPlugin_newCNNNeuronWithNeuronType_neuronParameterAArray_count((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
            goto LABEL_1004;
          default:
            break;
        }
      }
      else
      {
        switch(v1205)
        {
          case 4294961174:
            uint64_t v1206 = *(void *)(a1 + 8);
            *(void *)__str = *(void *)a1;
            *(void *)&__str[8] = v1198;
            int v1207 = *(unsigned __int8 *)(v1196 + 97);
            *(_DWORD *)&__str[16] = *(unsigned __int8 *)(v1196 + 96);
            *(_DWORD *)&__str[20] = v1207;
            *(_OWORD *)&__str[24] = *(_OWORD *)(v1196 + 56);
            *(void *)&__str[40] = *(void *)(v1196 + 72);
            *(_OWORD *)&__str[48] = *(_OWORD *)(v1196 + 80);
            DYTraceEncode_MPSPlugin_newMatrixMultiplicationWithTransposeLeft_transposeRight_resultRows_resultColumns_interiorColumns_alpha_beta((uint64_t)__str, v1206, *(unsigned int *)(a1 + 16), 0, 0);
            break;
          case 4294961175:
          case 4294961176:
          case 4294961178:
          case 4294961179:
          case 4294961181:
          case 4294961182:
          case 4294961183:
          case 4294961184:
            goto LABEL_1009;
          case 4294961177:
            uint64_t v1214 = *(void *)a1;
            uint64_t v1215 = *(void *)(a1 + 8);
            *(void *)(v1215 + 8) = 0;
            *(void *)(v1215 + 16) = 0;
            *(void *)(v1215 + 24) = 0;
            *(_DWORD *)(v1215 + 32) = 1;
            *(_DWORD *)(v1215 + 36) = 67;
            *(void *)uint64_t v1215 = 0xFFFFE81900000028;
            goto LABEL_994;
          case 4294961180:
            uint64_t v1216 = *(void *)(a1 + 8);
            *(void *)__str = *(void *)a1;
            *(void *)&__str[8] = v1198;
            long long v1217 = *(_OWORD *)(v1196 + 72);
            *(_OWORD *)&__str[16] = *(_OWORD *)(v1196 + 56);
            *(_OWORD *)&__str[32] = v1217;
            *(_OWORD *)&__str[48] = *(_OWORD *)(v1196 + 88);
            DYTraceEncode_MPSPlugin_newCNNDilatedPoolingMaxWithKernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY_dilationRateX_dilationRateY(__str, v1216, *(unsigned int *)(a1 + 16), 0, 0);
            break;
          case 4294961185:
            uint64_t v1218 = *(void *)(a1 + 8);
            *(void *)__str = *(void *)a1;
            *(void *)&__str[8] = v1198;
            long long v1580 = *(_OWORD *)(v1196 + 56);
            uint64_t v1219 = v1218 + *(unsigned int *)(a1 + 16);
            *(void *)__s = 512;
            uint64_t v1220 = *(void *)(a1 + 32);
            *(void *)&__str[16] = StoreMPSPluginCNNConvolutionDescriptorUsingEncode(v1220, v1580, v1219 - 512, __s);
            *(void *)&__str[24] = StoreMPSPluginCNNConvolutionDataUsingEncode(v1220, *((unsigned int **)&v1580 + 1), v1219 - *(void *)__s, __s);
            DYTraceEncode_MPSPlugin_newCNNConvolutionGradientWithDescriptor_convolutionData((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
            break;
          case 4294961186:
            uint64_t v1214 = *(void *)a1;
            uint64_t v1215 = *(void *)(a1 + 8);
            *(void *)(v1215 + 8) = 0;
            *(void *)(v1215 + 16) = 0;
            *(void *)(v1215 + 24) = 0;
            *(_DWORD *)(v1215 + 32) = 1;
            *(_DWORD *)(v1215 + 36) = 67;
            *(void *)uint64_t v1215 = 0xFFFFE82200000028;
LABEL_994:
            *(void *)(v1215 + 40) = v1214;
            *(_DWORD *)(v1215 + 48) = 116;
            *(void *)(v1215 + 52) = v1198;
            int v1221 = 60;
            goto LABEL_998;
          case 4294961187:
            long long v1222 = *(_OWORD *)(v1196 + 56);
            long long v1223 = *(_OWORD *)(v1196 + 72);
            uint64_t v1224 = *(void *)a1;
            uint64_t v1215 = *(void *)(a1 + 8);
            *(void *)(v1215 + 8) = 0;
            *(void *)(v1215 + 16) = 0;
            *(void *)(v1215 + 24) = 0;
            *(void *)uint64_t v1215 = 0xFFFFE82300000024;
            goto LABEL_997;
          default:
            if (v1205 == 4294961200)
            {
              uint64_t v1237 = *(void *)(a1 + 8);
              *(void *)__str = *(void *)a1;
              *(void *)&__str[8] = v1198;
              v1238 = *(unsigned __int8 **)(v1196 + 56);
              uint64_t v1239 = v1237 + *(unsigned int *)(a1 + 16) - 512;
              *(void *)__s = 512;
              *(void *)&__str[16] = StoreMPSPluginNDArrayConvolutionDescriptorUsingEncode(*(void *)(a1 + 32), v1238, v1239, __s);
              DYTraceEncode_MPSPlugin_newNDArrayConvolution2DGradientWithDescriptor((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
            }
            else
            {
              if (v1205 != 4294961201) {
                goto LABEL_1009;
              }
              uint64_t v1211 = *(void *)(a1 + 8);
              *(void *)__str = *(void *)a1;
              *(void *)&__str[8] = v1198;
              v1212 = *(unsigned __int8 **)(v1196 + 56);
              uint64_t v1213 = v1211 + *(unsigned int *)(a1 + 16) - 512;
              *(void *)__s = 512;
              *(void *)&__str[16] = StoreMPSPluginNDArrayConvolutionDescriptorUsingEncode(*(void *)(a1 + 32), v1212, v1213, __s);
              DYTraceEncode_MPSPlugin_newNDArrayConvolution2DWithDescriptor((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
            }
            break;
        }
LABEL_1004:
        v1240 = *(unsigned int **)(a1 + 8);
        uint64_t v1241 = *v1240;
        if ((*((unsigned char *)v1240 + 33) & 0x10) != 0)
        {
          v1243 = *(unsigned int **)(a1 + 8);
          unint64_t v1242 = *v1240;
          do
          {
            v1243 = (unsigned int *)((char *)v1243 + v1241);
            uint64_t v1241 = *v1243;
            v1242 += v1241;
          }
          while ((*((unsigned char *)v1243 + 33) & 0x20) == 0);
        }
        else
        {
          unint64_t v1242 = *v1240;
        }
        fbstream_write(*(void *)(a1 + 24), (uint64_t)v1240, v1242);
      }
LABEL_1009:
      uint64_t v1244 = *(void *)a1;
      uint64_t v1245 = *(void *)(a1 + 8);
      *(void *)(v1245 + 16) = 0;
      *(void *)(v1245 + 24) = 0;
      *(void *)(v1245 + 8) = 0;
      *(_DWORD *)(v1245 + 32) = 70;
      *(_DWORD *)(v1245 + 36) = 67;
      *(void *)uint64_t v1245 = 0xFFFFD00800000028;
      *(void *)(v1245 + 40) = v1244;
      *(_DWORD *)uint64_t v1245 = 48;
      v1246 = *(unsigned int **)(a1 + 8);
      uint64_t v1247 = *v1246;
      if ((*((unsigned char *)v1246 + 33) & 0x10) != 0)
      {
        v1249 = *(unsigned int **)(a1 + 8);
        unint64_t v1248 = *v1246;
        do
        {
          v1249 = (unsigned int *)((char *)v1249 + v1247);
          uint64_t v1247 = *v1249;
          v1248 += v1247;
        }
        while ((*((unsigned char *)v1249 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v1248 = *v1246;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1246, v1248);
      ++v1195;
    }
    while (v1195 < a3[26].nelts);
  }
  uint64_t v1250 = *(void *)a1;
  uint64_t v1251 = *(void *)(a1 + 8);
  *(void *)(v1251 + 16) = 0;
  *(void *)(v1251 + 24) = 0;
  *(void *)(v1251 + 8) = 0;
  *(_DWORD *)(v1251 + 32) = 70;
  *(_DWORD *)(v1251 + 36) = 67;
  *(void *)uint64_t v1251 = 0xFFFFD00800000028;
  *(void *)(v1251 + 40) = v1250;
  *(_DWORD *)uint64_t v1251 = 48;
  v1252 = *(unsigned int **)(a1 + 8);
  uint64_t v1253 = *v1252;
  if ((*((unsigned char *)v1252 + 33) & 0x10) != 0)
  {
    v1256 = *(unsigned int **)(a1 + 8);
    unint64_t v1254 = *v1252;
    uint64_t v1255 = v1582;
    do
    {
      v1256 = (unsigned int *)((char *)v1256 + v1253);
      uint64_t v1253 = *v1256;
      v1254 += v1253;
    }
    while ((*((unsigned char *)v1256 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v1254 = *v1252;
    uint64_t v1255 = v1582;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1252, v1254);
  v1257 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "metalfx-spatial-scalers";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v1257, *(unsigned int *)(a1 + 16), v1258, 0);
  v1259 = *(unsigned int **)(a1 + 8);
  uint64_t v1260 = *v1259;
  if ((*((unsigned char *)v1259 + 33) & 0x10) != 0)
  {
    v1262 = *(unsigned int **)(a1 + 8);
    unint64_t v1261 = *v1259;
    do
    {
      v1262 = (unsigned int *)((char *)v1262 + v1260);
      uint64_t v1260 = *v1262;
      v1261 += v1260;
    }
    while ((*((unsigned char *)v1262 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v1261 = *v1259;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1259, v1261);
  if (a3[32].nelts >= 1)
  {
    uint64_t v1263 = 0;
    do
    {
      v1264 = *(void **)&a3[32].elts[8 * v1263];
      if (v1264) {
        uint64_t v1265 = v1264[1];
      }
      else {
        uint64_t v1265 = 0;
      }
      *(void *)__str = v1265;
      uint64_t v1266 = *(void *)(*(void *)(*find_entry(v1255, __str, 8uLL, 0) + 32) + 8);
      uint64_t v1267 = *(void *)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = v1266;
      uint64_t v1268 = v1264[6];
      uint64_t v1269 = v1267 + *(unsigned int *)(a1 + 16) - 512;
      *(void *)__s = 512;
      *(void *)&__str[16] = StoreMTLFXSpatialScalerDescriptorUsingEncode(*(void *)(a1 + 32), v1268, v1269, __s);
      DYTraceEncode_MTLDevice_newSpatialScalerWithDescriptor((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
      v1270 = *(unsigned int **)(a1 + 8);
      uint64_t v1271 = *v1270;
      if ((*((unsigned char *)v1270 + 33) & 0x10) != 0)
      {
        v1273 = *(unsigned int **)(a1 + 8);
        unint64_t v1272 = *v1270;
        do
        {
          v1273 = (unsigned int *)((char *)v1273 + v1271);
          uint64_t v1271 = *v1273;
          v1272 += v1271;
        }
        while ((*((unsigned char *)v1273 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v1272 = *v1270;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1270, v1272);
      uint64_t v1274 = v1264[10];
      v1275 = *(void **)(a1 + 8);
      v1275[2] = 0;
      v1275[3] = 0;
      v1275[1] = 0;
      v1275[4] = 0x6C754300000000;
      void *v1275 = 0xFFFFB00300000028;
      v1275[5] = v1266;
      v1275[6] = v1274;
      *(_DWORD *)v1275 = 56;
      v1276 = *(unsigned int **)(a1 + 8);
      uint64_t v1277 = *v1276;
      if ((*((unsigned char *)v1276 + 33) & 0x10) != 0)
      {
        v1279 = *(unsigned int **)(a1 + 8);
        unint64_t v1278 = *v1276;
        do
        {
          v1279 = (unsigned int *)((char *)v1279 + v1277);
          uint64_t v1277 = *v1279;
          v1278 += v1277;
        }
        while ((*((unsigned char *)v1279 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v1278 = *v1276;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1276, v1278);
      uint64_t v1280 = v1264[11];
      v1281 = *(void **)(a1 + 8);
      v1281[2] = 0;
      v1281[3] = 0;
      v1281[1] = 0;
      v1281[4] = 0x6C754300000000;
      void *v1281 = 0xFFFFB00200000028;
      v1281[5] = v1266;
      v1281[6] = v1280;
      *(_DWORD *)v1281 = 56;
      v1282 = *(unsigned int **)(a1 + 8);
      uint64_t v1283 = *v1282;
      if ((*((unsigned char *)v1282 + 33) & 0x10) != 0)
      {
        v1285 = *(unsigned int **)(a1 + 8);
        unint64_t v1284 = *v1282;
        do
        {
          v1285 = (unsigned int *)((char *)v1285 + v1283);
          uint64_t v1283 = *v1285;
          v1284 += v1283;
        }
        while ((*((unsigned char *)v1285 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v1284 = *v1282;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1282, v1284);
      if (v1264[7])
      {
        *(void *)__str = v1264[7];
        uint64_t v1286 = *(void *)(*(void *)(*find_entry(v1255, __str, 8uLL, 0) + 32) + 8);
        v1287 = *(void **)(a1 + 8);
        v1287[1] = 0;
        v1287[2] = 0;
        v1287[3] = 0;
        v1287[4] = 0x744300000000;
        void *v1287 = 0xFFFFB00100000028;
        v1287[5] = v1266;
        v1287[6] = v1286;
        *(_DWORD *)v1287 = 56;
        v1288 = *(unsigned int **)(a1 + 8);
        uint64_t v1289 = *v1288;
        if ((*((unsigned char *)v1288 + 33) & 0x10) != 0)
        {
          v1291 = *(unsigned int **)(a1 + 8);
          unint64_t v1290 = *v1288;
          do
          {
            v1291 = (unsigned int *)((char *)v1291 + v1289);
            uint64_t v1289 = *v1291;
            v1290 += v1289;
          }
          while ((*((unsigned char *)v1291 + 33) & 0x20) == 0);
        }
        else
        {
          unint64_t v1290 = *v1288;
        }
        fbstream_write(*(void *)(a1 + 24), (uint64_t)v1288, v1290);
      }
      if (v1264[8])
      {
        *(void *)__str = v1264[8];
        uint64_t v1292 = *(void *)(*(void *)(*find_entry(v1255, __str, 8uLL, 0) + 32) + 8);
        v1293 = *(void **)(a1 + 8);
        v1293[1] = 0;
        v1293[2] = 0;
        v1293[3] = 0;
        v1293[4] = 0x744300000000;
        void *v1293 = 0xFFFFB00000000028;
        v1293[5] = v1266;
        v1293[6] = v1292;
        *(_DWORD *)v1293 = 56;
        v1294 = *(unsigned int **)(a1 + 8);
        uint64_t v1295 = *v1294;
        if ((*((unsigned char *)v1294 + 33) & 0x10) != 0)
        {
          v1297 = *(unsigned int **)(a1 + 8);
          unint64_t v1296 = *v1294;
          do
          {
            v1297 = (unsigned int *)((char *)v1297 + v1295);
            uint64_t v1295 = *v1297;
            v1296 += v1295;
          }
          while ((*((unsigned char *)v1297 + 33) & 0x20) == 0);
        }
        else
        {
          unint64_t v1296 = *v1294;
        }
        fbstream_write(*(void *)(a1 + 24), (uint64_t)v1294, v1296);
      }
      if (v1264[9])
      {
        *(void *)__str = v1264[9];
        uint64_t v1298 = *(void *)(*(void *)(*find_entry(v1255, __str, 8uLL, 0) + 32) + 8);
        v1299 = *(void **)(a1 + 8);
        v1299[1] = 0;
        v1299[2] = 0;
        v1299[3] = 0;
        v1299[4] = 0x744300000000;
        void *v1299 = 0xFFFFB00400000028;
        v1299[5] = v1266;
        v1299[6] = v1298;
        *(_DWORD *)v1299 = 56;
        v1300 = *(unsigned int **)(a1 + 8);
        uint64_t v1301 = *v1300;
        if ((*((unsigned char *)v1300 + 33) & 0x10) != 0)
        {
          v1303 = *(unsigned int **)(a1 + 8);
          unint64_t v1302 = *v1300;
          do
          {
            v1303 = (unsigned int *)((char *)v1303 + v1301);
            uint64_t v1301 = *v1303;
            v1302 += v1301;
          }
          while ((*((unsigned char *)v1303 + 33) & 0x20) == 0);
        }
        else
        {
          unint64_t v1302 = *v1300;
        }
        fbstream_write(*(void *)(a1 + 24), (uint64_t)v1300, v1302);
      }
      ++v1263;
    }
    while (v1263 < a3[32].nelts);
  }
  uint64_t v1304 = *(void *)a1;
  uint64_t v1305 = *(void *)(a1 + 8);
  *(void *)(v1305 + 16) = 0;
  *(void *)(v1305 + 24) = 0;
  *(void *)(v1305 + 8) = 0;
  *(_DWORD *)(v1305 + 32) = 70;
  *(_DWORD *)(v1305 + 36) = 67;
  *(void *)uint64_t v1305 = 0xFFFFD00800000028;
  *(void *)(v1305 + 40) = v1304;
  *(_DWORD *)uint64_t v1305 = 48;
  v1306 = *(unsigned int **)(a1 + 8);
  uint64_t v1307 = *v1306;
  if ((*((unsigned char *)v1306 + 33) & 0x10) != 0)
  {
    v1309 = *(unsigned int **)(a1 + 8);
    unint64_t v1308 = *v1306;
    do
    {
      v1309 = (unsigned int *)((char *)v1309 + v1307);
      uint64_t v1307 = *v1309;
      v1308 += v1307;
    }
    while ((*((unsigned char *)v1309 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v1308 = *v1306;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1306, v1308);
  v1310 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "metalfx-temporal-scalers";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v1310, *(unsigned int *)(a1 + 16), v1311, 0);
  v1312 = *(unsigned int **)(a1 + 8);
  uint64_t v1313 = *v1312;
  if ((*((unsigned char *)v1312 + 33) & 0x10) != 0)
  {
    v1315 = *(unsigned int **)(a1 + 8);
    unint64_t v1314 = *v1312;
    do
    {
      v1315 = (unsigned int *)((char *)v1315 + v1313);
      uint64_t v1313 = *v1315;
      v1314 += v1313;
    }
    while ((*((unsigned char *)v1315 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v1314 = *v1312;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1312, v1314);
  if (a3[33].nelts >= 1)
  {
    uint64_t v1316 = 0;
    do
    {
      uint64_t v1317 = *(void *)&a3[33].elts[8 * v1316];
      if (v1317) {
        uint64_t v1318 = *(void *)(v1317 + 8);
      }
      else {
        uint64_t v1318 = 0;
      }
      *(void *)__str = v1318;
      uint64_t v1319 = *(void *)(*(void *)(*find_entry(v1582, __str, 8uLL, 0) + 32) + 8);
      uint64_t v1320 = *(void *)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = v1319;
      v1321 = *(unsigned __int16 **)(v1317 + 48);
      uint64_t v1322 = v1320 + *(unsigned int *)(a1 + 16) - 512;
      *(void *)__s = 512;
      *(void *)&__str[16] = StoreMTLFXTemporalScalerDescriptorUsingEncode(*(void *)(a1 + 32), v1321, v1322, __s);
      DYTraceEncode_MTLDevice_newTemporalScalerWithDescriptor((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
      v1323 = *(unsigned int **)(a1 + 8);
      uint64_t v1324 = *v1323;
      if ((*((unsigned char *)v1323 + 33) & 0x10) != 0)
      {
        v1326 = *(unsigned int **)(a1 + 8);
        unint64_t v1325 = *v1323;
        do
        {
          v1326 = (unsigned int *)((char *)v1326 + v1324);
          uint64_t v1324 = *v1326;
          v1325 += v1324;
        }
        while ((*((unsigned char *)v1326 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v1325 = *v1323;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1323, v1325);
      uint64_t v1327 = *(void *)(v1317 + 112);
      v1328 = *(void **)(a1 + 8);
      v1328[2] = 0;
      v1328[3] = 0;
      v1328[1] = 0;
      v1328[4] = 0x6C754300000000;
      void *v1328 = 0xFFFFB00D00000028;
      v1328[5] = v1319;
      v1328[6] = v1327;
      *(_DWORD *)v1328 = 56;
      v1329 = *(unsigned int **)(a1 + 8);
      uint64_t v1330 = *v1329;
      if ((*((unsigned char *)v1329 + 33) & 0x10) != 0)
      {
        v1332 = *(unsigned int **)(a1 + 8);
        unint64_t v1331 = *v1329;
        do
        {
          v1332 = (unsigned int *)((char *)v1332 + v1330);
          uint64_t v1330 = *v1332;
          v1331 += v1330;
        }
        while ((*((unsigned char *)v1332 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v1331 = *v1329;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1329, v1331);
      uint64_t v1333 = *(void *)(v1317 + 120);
      v1334 = *(void **)(a1 + 8);
      v1334[2] = 0;
      v1334[3] = 0;
      v1334[1] = 0;
      v1334[4] = 0x6C754300000000;
      void *v1334 = 0xFFFFB00C00000028;
      v1334[5] = v1319;
      v1334[6] = v1333;
      *(_DWORD *)v1334 = 56;
      v1335 = *(unsigned int **)(a1 + 8);
      uint64_t v1336 = *v1335;
      if ((*((unsigned char *)v1335 + 33) & 0x10) != 0)
      {
        v1338 = *(unsigned int **)(a1 + 8);
        unint64_t v1337 = *v1335;
        do
        {
          v1338 = (unsigned int *)((char *)v1338 + v1336);
          uint64_t v1336 = *v1338;
          v1337 += v1336;
        }
        while ((*((unsigned char *)v1338 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v1337 = *v1335;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1335, v1337);
      int v1339 = *(_DWORD *)(v1317 + 144);
      uint64_t v1340 = *(void *)(a1 + 8);
      *(void *)(v1340 + 8) = 0;
      *(void *)(v1340 + 16) = 0;
      *(void *)(v1340 + 24) = 0;
      *(void *)(v1340 + 32) = 0x664300000000;
      *(void *)uint64_t v1340 = 0xFFFFB01400000028;
      *(void *)(v1340 + 40) = v1319;
      *(_DWORD *)(v1340 + 48) = v1339;
      *(_DWORD *)uint64_t v1340 = 52;
      v1341 = *(unsigned int **)(a1 + 8);
      uint64_t v1342 = *v1341;
      if ((*((unsigned char *)v1341 + 33) & 0x10) != 0)
      {
        v1344 = *(unsigned int **)(a1 + 8);
        unint64_t v1343 = *v1341;
        do
        {
          v1344 = (unsigned int *)((char *)v1344 + v1342);
          uint64_t v1342 = *v1344;
          v1343 += v1342;
        }
        while ((*((unsigned char *)v1344 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v1343 = *v1341;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1341, v1343);
      int v1345 = *(_DWORD *)(v1317 + 128);
      uint64_t v1346 = *(void *)(a1 + 8);
      *(void *)(v1346 + 8) = 0;
      *(void *)(v1346 + 16) = 0;
      *(void *)(v1346 + 24) = 0;
      *(void *)(v1346 + 32) = 0x664300000000;
      *(void *)uint64_t v1346 = 0xFFFFB00E00000028;
      *(void *)(v1346 + 40) = v1319;
      *(_DWORD *)(v1346 + 48) = v1345;
      *(_DWORD *)uint64_t v1346 = 52;
      v1347 = *(unsigned int **)(a1 + 8);
      uint64_t v1348 = *v1347;
      if ((*((unsigned char *)v1347 + 33) & 0x10) != 0)
      {
        v1350 = *(unsigned int **)(a1 + 8);
        unint64_t v1349 = *v1347;
        do
        {
          v1350 = (unsigned int *)((char *)v1350 + v1348);
          uint64_t v1348 = *v1350;
          v1349 += v1348;
        }
        while ((*((unsigned char *)v1350 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v1349 = *v1347;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1347, v1349);
      int v1351 = *(_DWORD *)(v1317 + 132);
      uint64_t v1352 = *(void *)(a1 + 8);
      *(void *)(v1352 + 8) = 0;
      *(void *)(v1352 + 16) = 0;
      *(void *)(v1352 + 24) = 0;
      *(void *)(v1352 + 32) = 0x664300000000;
      *(void *)uint64_t v1352 = 0xFFFFB00F00000028;
      *(void *)(v1352 + 40) = v1319;
      *(_DWORD *)(v1352 + 48) = v1351;
      *(_DWORD *)uint64_t v1352 = 52;
      v1353 = *(unsigned int **)(a1 + 8);
      uint64_t v1354 = *v1353;
      if ((*((unsigned char *)v1353 + 33) & 0x10) != 0)
      {
        v1356 = *(unsigned int **)(a1 + 8);
        unint64_t v1355 = *v1353;
        do
        {
          v1356 = (unsigned int *)((char *)v1356 + v1354);
          uint64_t v1354 = *v1356;
          v1355 += v1354;
        }
        while ((*((unsigned char *)v1356 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v1355 = *v1353;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1353, v1355);
      int v1357 = *(_DWORD *)(v1317 + 136);
      uint64_t v1358 = *(void *)(a1 + 8);
      *(void *)(v1358 + 8) = 0;
      *(void *)(v1358 + 16) = 0;
      *(void *)(v1358 + 24) = 0;
      *(void *)(v1358 + 32) = 0x664300000000;
      *(void *)uint64_t v1358 = 0xFFFFB01100000028;
      *(void *)(v1358 + 40) = v1319;
      *(_DWORD *)(v1358 + 48) = v1357;
      *(_DWORD *)uint64_t v1358 = 52;
      v1359 = *(unsigned int **)(a1 + 8);
      uint64_t v1360 = *v1359;
      if ((*((unsigned char *)v1359 + 33) & 0x10) != 0)
      {
        v1362 = *(unsigned int **)(a1 + 8);
        unint64_t v1361 = *v1359;
        do
        {
          v1362 = (unsigned int *)((char *)v1362 + v1360);
          uint64_t v1360 = *v1362;
          v1361 += v1360;
        }
        while ((*((unsigned char *)v1362 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v1361 = *v1359;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1359, v1361);
      int v1363 = *(_DWORD *)(v1317 + 140);
      uint64_t v1364 = *(void *)(a1 + 8);
      *(void *)(v1364 + 8) = 0;
      *(void *)(v1364 + 16) = 0;
      *(void *)(v1364 + 24) = 0;
      *(void *)(v1364 + 32) = 0x664300000000;
      *(void *)uint64_t v1364 = 0xFFFFB01200000028;
      *(void *)(v1364 + 40) = v1319;
      *(_DWORD *)(v1364 + 48) = v1363;
      *(_DWORD *)uint64_t v1364 = 52;
      v1365 = *(unsigned int **)(a1 + 8);
      uint64_t v1366 = *v1365;
      if ((*((unsigned char *)v1365 + 33) & 0x10) != 0)
      {
        v1368 = *(unsigned int **)(a1 + 8);
        unint64_t v1367 = *v1365;
        do
        {
          v1368 = (unsigned int *)((char *)v1368 + v1366);
          uint64_t v1366 = *v1368;
          v1367 += v1366;
        }
        while ((*((unsigned char *)v1368 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v1367 = *v1365;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1365, v1367);
      int v1369 = *(unsigned __int8 *)(v1317 + 148);
      uint64_t v1370 = *(void *)(a1 + 8);
      *(void *)(v1370 + 16) = 0;
      *(void *)(v1370 + 24) = 0;
      *(void *)(v1370 + 8) = 0;
      *(void *)(v1370 + 32) = 0x69754300000000;
      *(void *)uint64_t v1370 = 0xFFFFB00800000028;
      *(void *)(v1370 + 40) = v1319;
      *(_DWORD *)(v1370 + 48) = v1369;
      *(_DWORD *)uint64_t v1370 = 52;
      v1371 = *(unsigned int **)(a1 + 8);
      uint64_t v1372 = *v1371;
      if ((*((unsigned char *)v1371 + 33) & 0x10) != 0)
      {
        v1374 = *(unsigned int **)(a1 + 8);
        unint64_t v1373 = *v1371;
        do
        {
          v1374 = (unsigned int *)((char *)v1374 + v1372);
          uint64_t v1372 = *v1374;
          v1373 += v1372;
        }
        while ((*((unsigned char *)v1374 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v1373 = *v1371;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1371, v1373);
      int v1375 = *(unsigned __int8 *)(v1317 + 149);
      uint64_t v1376 = *(void *)(a1 + 8);
      *(void *)(v1376 + 16) = 0;
      *(void *)(v1376 + 24) = 0;
      *(void *)(v1376 + 8) = 0;
      *(void *)(v1376 + 32) = 0x69754300000000;
      *(void *)uint64_t v1376 = 0xFFFFB01500000028;
      *(void *)(v1376 + 40) = v1319;
      *(_DWORD *)(v1376 + 48) = v1375;
      *(_DWORD *)uint64_t v1376 = 52;
      v1377 = *(unsigned int **)(a1 + 8);
      uint64_t v1378 = *v1377;
      if ((*((unsigned char *)v1377 + 33) & 0x10) != 0)
      {
        v1380 = *(unsigned int **)(a1 + 8);
        unint64_t v1379 = *v1377;
        do
        {
          v1380 = (unsigned int *)((char *)v1380 + v1378);
          uint64_t v1378 = *v1380;
          v1379 += v1378;
        }
        while ((*((unsigned char *)v1380 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v1379 = *v1377;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1377, v1379);
      if (*(void *)(v1317 + 56))
      {
        *(void *)__str = *(void *)(v1317 + 56);
        uint64_t v1381 = *(void *)(*(void *)(*find_entry(v1582, __str, 8uLL, 0) + 32) + 8);
        v1382 = *(void **)(a1 + 8);
        v1382[1] = 0;
        v1382[2] = 0;
        v1382[3] = 0;
        v1382[4] = 0x744300000000;
        void *v1382 = 0xFFFFB00B00000028;
        v1382[5] = v1319;
        v1382[6] = v1381;
        *(_DWORD *)v1382 = 56;
        v1383 = *(unsigned int **)(a1 + 8);
        uint64_t v1384 = *v1383;
        if ((*((unsigned char *)v1383 + 33) & 0x10) != 0)
        {
          v1386 = *(unsigned int **)(a1 + 8);
          unint64_t v1385 = *v1383;
          do
          {
            v1386 = (unsigned int *)((char *)v1386 + v1384);
            uint64_t v1384 = *v1386;
            v1385 += v1384;
          }
          while ((*((unsigned char *)v1386 + 33) & 0x20) == 0);
        }
        else
        {
          unint64_t v1385 = *v1383;
        }
        fbstream_write(*(void *)(a1 + 24), (uint64_t)v1383, v1385);
      }
      if (*(void *)(v1317 + 64))
      {
        *(void *)__str = *(void *)(v1317 + 64);
        uint64_t v1387 = *(void *)(*(void *)(*find_entry(v1582, __str, 8uLL, 0) + 32) + 8);
        v1388 = *(void **)(a1 + 8);
        v1388[1] = 0;
        v1388[2] = 0;
        v1388[3] = 0;
        v1388[4] = 0x744300000000;
        void *v1388 = 0xFFFFB00700000028;
        v1388[5] = v1319;
        v1388[6] = v1387;
        *(_DWORD *)v1388 = 56;
        v1389 = *(unsigned int **)(a1 + 8);
        uint64_t v1390 = *v1389;
        if ((*((unsigned char *)v1389 + 33) & 0x10) != 0)
        {
          v1392 = *(unsigned int **)(a1 + 8);
          unint64_t v1391 = *v1389;
          do
          {
            v1392 = (unsigned int *)((char *)v1392 + v1390);
            uint64_t v1390 = *v1392;
            v1391 += v1390;
          }
          while ((*((unsigned char *)v1392 + 33) & 0x20) == 0);
        }
        else
        {
          unint64_t v1391 = *v1389;
        }
        fbstream_write(*(void *)(a1 + 24), (uint64_t)v1389, v1391);
      }
      if (*(void *)(v1317 + 72))
      {
        *(void *)__str = *(void *)(v1317 + 72);
        uint64_t v1393 = *(void *)(*(void *)(*find_entry(v1582, __str, 8uLL, 0) + 32) + 8);
        v1394 = *(void **)(a1 + 8);
        v1394[1] = 0;
        v1394[2] = 0;
        v1394[3] = 0;
        v1394[4] = 0x744300000000;
        void *v1394 = 0xFFFFB00900000028;
        v1394[5] = v1319;
        v1394[6] = v1393;
        *(_DWORD *)v1394 = 56;
        v1395 = *(unsigned int **)(a1 + 8);
        uint64_t v1396 = *v1395;
        if ((*((unsigned char *)v1395 + 33) & 0x10) != 0)
        {
          v1398 = *(unsigned int **)(a1 + 8);
          unint64_t v1397 = *v1395;
          do
          {
            v1398 = (unsigned int *)((char *)v1398 + v1396);
            uint64_t v1396 = *v1398;
            v1397 += v1396;
          }
          while ((*((unsigned char *)v1398 + 33) & 0x20) == 0);
        }
        else
        {
          unint64_t v1397 = *v1395;
        }
        fbstream_write(*(void *)(a1 + 24), (uint64_t)v1395, v1397);
      }
      if (*(void *)(v1317 + 80))
      {
        *(void *)__str = *(void *)(v1317 + 80);
        uint64_t v1399 = *(void *)(*(void *)(*find_entry(v1582, __str, 8uLL, 0) + 32) + 8);
        v1400 = *(void **)(a1 + 8);
        v1400[1] = 0;
        v1400[2] = 0;
        v1400[3] = 0;
        v1400[4] = 0x744300000000;
        void *v1400 = 0xFFFFB01000000028;
        v1400[5] = v1319;
        v1400[6] = v1399;
        *(_DWORD *)v1400 = 56;
        v1401 = *(unsigned int **)(a1 + 8);
        uint64_t v1402 = *v1401;
        if ((*((unsigned char *)v1401 + 33) & 0x10) != 0)
        {
          v1404 = *(unsigned int **)(a1 + 8);
          unint64_t v1403 = *v1401;
          do
          {
            v1404 = (unsigned int *)((char *)v1404 + v1402);
            uint64_t v1402 = *v1404;
            v1403 += v1402;
          }
          while ((*((unsigned char *)v1404 + 33) & 0x20) == 0);
        }
        else
        {
          unint64_t v1403 = *v1401;
        }
        fbstream_write(*(void *)(a1 + 24), (uint64_t)v1401, v1403);
      }
      if (*(void *)(v1317 + 88))
      {
        *(void *)__str = *(void *)(v1317 + 88);
        uint64_t v1405 = *(void *)(*(void *)(*find_entry(v1582, __str, 8uLL, 0) + 32) + 8);
        v1406 = *(void **)(a1 + 8);
        v1406[1] = 0;
        v1406[2] = 0;
        v1406[3] = 0;
        v1406[4] = 0x744300000000;
        void *v1406 = 0xFFFFB00A00000028;
        v1406[5] = v1319;
        v1406[6] = v1405;
        *(_DWORD *)v1406 = 56;
        v1407 = *(unsigned int **)(a1 + 8);
        uint64_t v1408 = *v1407;
        if ((*((unsigned char *)v1407 + 33) & 0x10) != 0)
        {
          v1410 = *(unsigned int **)(a1 + 8);
          unint64_t v1409 = *v1407;
          do
          {
            v1410 = (unsigned int *)((char *)v1410 + v1408);
            uint64_t v1408 = *v1410;
            v1409 += v1408;
          }
          while ((*((unsigned char *)v1410 + 33) & 0x20) == 0);
        }
        else
        {
          unint64_t v1409 = *v1407;
        }
        fbstream_write(*(void *)(a1 + 24), (uint64_t)v1407, v1409);
      }
      if (*(void *)(v1317 + 104))
      {
        *(void *)__str = *(void *)(v1317 + 104);
        uint64_t v1411 = *(void *)(*(void *)(*find_entry(v1582, __str, 8uLL, 0) + 32) + 8);
        v1412 = *(void **)(a1 + 8);
        v1412[1] = 0;
        v1412[2] = 0;
        v1412[3] = 0;
        v1412[4] = 0x744300000000;
        void *v1412 = 0xFFFFB01800000028;
        v1412[5] = v1319;
        v1412[6] = v1411;
        *(_DWORD *)v1412 = 56;
        v1413 = *(unsigned int **)(a1 + 8);
        uint64_t v1414 = *v1413;
        if ((*((unsigned char *)v1413 + 33) & 0x10) != 0)
        {
          v1416 = *(unsigned int **)(a1 + 8);
          unint64_t v1415 = *v1413;
          do
          {
            v1416 = (unsigned int *)((char *)v1416 + v1414);
            uint64_t v1414 = *v1416;
            v1415 += v1414;
          }
          while ((*((unsigned char *)v1416 + 33) & 0x20) == 0);
        }
        else
        {
          unint64_t v1415 = *v1413;
        }
        fbstream_write(*(void *)(a1 + 24), (uint64_t)v1413, v1415);
      }
      uint64_t v1417 = *(void *)(v1317 + 96);
      uint64_t v1255 = v1582;
      if (v1417)
      {
        *(void *)__str = v1417;
        uint64_t v1418 = *(void *)(*(void *)(*find_entry(v1582, __str, 8uLL, 0) + 32) + 8);
        v1419 = *(void **)(a1 + 8);
        v1419[1] = 0;
        v1419[2] = 0;
        v1419[3] = 0;
        v1419[4] = 0x744300000000;
        void *v1419 = 0xFFFFB01300000028;
        v1419[5] = v1319;
        v1419[6] = v1418;
        *(_DWORD *)v1419 = 56;
        v1420 = *(unsigned int **)(a1 + 8);
        uint64_t v1421 = *v1420;
        if ((*((unsigned char *)v1420 + 33) & 0x10) != 0)
        {
          v1423 = *(unsigned int **)(a1 + 8);
          unint64_t v1422 = *v1420;
          do
          {
            v1423 = (unsigned int *)((char *)v1423 + v1421);
            uint64_t v1421 = *v1423;
            v1422 += v1421;
          }
          while ((*((unsigned char *)v1423 + 33) & 0x20) == 0);
        }
        else
        {
          unint64_t v1422 = *v1420;
        }
        fbstream_write(*(void *)(a1 + 24), (uint64_t)v1420, v1422);
      }
      ++v1316;
    }
    while (v1316 < a3[33].nelts);
  }
  uint64_t v1424 = *(void *)a1;
  uint64_t v1425 = *(void *)(a1 + 8);
  *(void *)(v1425 + 16) = 0;
  *(void *)(v1425 + 24) = 0;
  *(void *)(v1425 + 8) = 0;
  *(_DWORD *)(v1425 + 32) = 70;
  *(_DWORD *)(v1425 + 36) = 67;
  *(void *)uint64_t v1425 = 0xFFFFD00800000028;
  *(void *)(v1425 + 40) = v1424;
  *(_DWORD *)uint64_t v1425 = 48;
  v1426 = *(unsigned int **)(a1 + 8);
  uint64_t v1427 = *v1426;
  if ((*((unsigned char *)v1426 + 33) & 0x10) != 0)
  {
    v1429 = *(unsigned int **)(a1 + 8);
    unint64_t v1428 = *v1426;
    do
    {
      v1429 = (unsigned int *)((char *)v1429 + v1427);
      uint64_t v1427 = *v1429;
      v1428 += v1427;
    }
    while ((*((unsigned char *)v1429 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v1428 = *v1426;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1426, v1428);
  v1430 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "residency-sets";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v1430, *(unsigned int *)(a1 + 16), v1431, 0);
  v1432 = *(unsigned int **)(a1 + 8);
  uint64_t v1433 = *v1432;
  if ((*((unsigned char *)v1432 + 33) & 0x10) != 0)
  {
    v1435 = *(unsigned int **)(a1 + 8);
    unint64_t v1434 = *v1432;
    do
    {
      v1435 = (unsigned int *)((char *)v1435 + v1433);
      uint64_t v1433 = *v1435;
      v1434 += v1433;
    }
    while ((*((unsigned char *)v1435 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v1434 = *v1432;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1432, v1434);
  if (a3[34].nelts >= 1)
  {
    uint64_t v1436 = 0;
    do
    {
      uint64_t v1437 = *(void *)&a3[34].elts[8 * v1436];
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "residency-set";
      if (v1437) {
        uint64_t v1438 = *(void *)(v1437 + 8);
      }
      else {
        uint64_t v1438 = 0;
      }
      *(void *)__s = v1438;
      *(_OWORD *)&__str[16] = *(unint64_t *)(*(void *)(*find_entry(v1255, __s, 8uLL, 0) + 32) + 8);
      DYTraceEncode_EnterStateGroup((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), v1439, 0);
      v1440 = *(unsigned int **)(a1 + 8);
      uint64_t v1441 = *v1440;
      if ((*((unsigned char *)v1440 + 33) & 0x10) != 0)
      {
        v1443 = *(unsigned int **)(a1 + 8);
        unint64_t v1442 = *v1440;
        do
        {
          v1443 = (unsigned int *)((char *)v1443 + v1441);
          uint64_t v1441 = *v1443;
          v1442 += v1441;
        }
        while ((*((unsigned char *)v1443 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v1442 = *v1440;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1440, v1442);
      WriteGTMTLSMResidencySet(a1, (void *)a2, v1437, 0);
      uint64_t v1444 = *(void *)a1;
      uint64_t v1445 = *(void *)(a1 + 8);
      *(void *)(v1445 + 16) = 0;
      *(void *)(v1445 + 24) = 0;
      *(void *)(v1445 + 8) = 0;
      *(_DWORD *)(v1445 + 32) = 70;
      *(_DWORD *)(v1445 + 36) = 67;
      *(void *)uint64_t v1445 = 0xFFFFD00800000028;
      *(void *)(v1445 + 40) = v1444;
      *(_DWORD *)uint64_t v1445 = 48;
      v1446 = *(unsigned int **)(a1 + 8);
      uint64_t v1447 = *v1446;
      if ((*((unsigned char *)v1446 + 33) & 0x10) != 0)
      {
        v1449 = *(unsigned int **)(a1 + 8);
        unint64_t v1448 = *v1446;
        do
        {
          v1449 = (unsigned int *)((char *)v1449 + v1447);
          uint64_t v1447 = *v1449;
          v1448 += v1447;
        }
        while ((*((unsigned char *)v1449 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v1448 = *v1446;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1446, v1448);
      ++v1436;
    }
    while (v1436 < a3[34].nelts);
  }
  uint64_t v1450 = *(void *)a1;
  uint64_t v1451 = *(void *)(a1 + 8);
  *(void *)(v1451 + 16) = 0;
  *(void *)(v1451 + 24) = 0;
  *(void *)(v1451 + 8) = 0;
  *(_DWORD *)(v1451 + 32) = 70;
  *(_DWORD *)(v1451 + 36) = 67;
  *(void *)uint64_t v1451 = 0xFFFFD00800000028;
  *(void *)(v1451 + 40) = v1450;
  *(_DWORD *)uint64_t v1451 = 48;
  v1452 = *(unsigned int **)(a1 + 8);
  uint64_t v1453 = *v1452;
  if ((*((unsigned char *)v1452 + 33) & 0x10) != 0)
  {
    v1455 = *(unsigned int **)(a1 + 8);
    unint64_t v1454 = *v1452;
    do
    {
      v1455 = (unsigned int *)((char *)v1455 + v1453);
      uint64_t v1453 = *v1455;
      v1454 += v1453;
    }
    while ((*((unsigned char *)v1455 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v1454 = *v1452;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1452, v1454);
  v1456 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "command-queue";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v1456, *(unsigned int *)(a1 + 16), v1457, 0);
  v1458 = *(unsigned int **)(a1 + 8);
  uint64_t v1459 = *v1458;
  if ((*((unsigned char *)v1458 + 33) & 0x10) != 0)
  {
    v1461 = *(unsigned int **)(a1 + 8);
    unint64_t v1460 = *v1458;
    do
    {
      v1461 = (unsigned int *)((char *)v1461 + v1459);
      uint64_t v1459 = *v1461;
      v1460 += v1459;
    }
    while ((*((unsigned char *)v1461 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v1460 = *v1458;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1458, v1460);
  if (a3[22].nelts >= 1)
  {
    uint64_t v1462 = 0;
    do
    {
      uint64_t v1463 = *(void *)&a3[22].elts[8 * v1462];
      uint64_t v1464 = *(void *)(a2 + 16);
      BOOL v1465 = IsAppleInternalLabel(*(void *)(v1463 + 48));
      *(void *)__str = *(void *)(v1463 + 8);
      unint64_t v1466 = *(void *)(*(void *)(*find_entry(v1464, __str, 8uLL, 0) + 32) + 8);
      v1467 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "command-queue";
      *(_OWORD *)&__str[16] = v1466;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v1467, *(unsigned int *)(a1 + 16), v1468, 0);
      v1469 = *(unsigned int **)(a1 + 8);
      uint64_t v1470 = *v1469;
      if ((*((unsigned char *)v1469 + 33) & 0x10) != 0)
      {
        v1472 = *(unsigned int **)(a1 + 8);
        unint64_t v1471 = *v1469;
        do
        {
          v1472 = (unsigned int *)((char *)v1472 + v1470);
          uint64_t v1470 = *v1472;
          v1471 += v1470;
        }
        while ((*((unsigned char *)v1472 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v1471 = *v1469;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1469, v1471);
      v1473 = *(unsigned __int8 **)(v1463 + 56);
      if (v1473)
      {
        uint64_t v1474 = *(void *)(a1 + 8);
        *(void *)__str = *(void *)a1;
        *(void *)&__str[8] = v1466;
        uint64_t v1475 = v1474 + *(unsigned int *)(a1 + 16) - 512;
        *(void *)__s = 512;
        *(void *)&__str[16] = StoreMTLCommandQueueDescriptorUsingEncode(*(void *)(a1 + 32), v1473, v1475, __s);
        DYTraceEncode_MTLDevice_newCommandQueueWithDescriptor((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
      }
      else
      {
        uint64_t v1476 = *(unsigned int *)(v1463 + 64);
        uint64_t v1477 = *(void *)a1;
        uint64_t v1478 = *(void *)(a1 + 8);
        *(void *)(v1478 + 8) = 0;
        *(void *)(v1478 + 16) = 0;
        *(void *)(v1478 + 24) = 0;
        *(void *)(v1478 + 32) = 0x6C754300000001;
        *(void *)uint64_t v1478 = 0xFFFFC04500000028;
        *(void *)(v1478 + 40) = v1477;
        *(void *)(v1478 + 48) = v1476;
        *(_DWORD *)(v1478 + 56) = 116;
        *(void *)(v1478 + 60) = v1466;
        *(_DWORD *)uint64_t v1478 = 68;
      }
      if (v1465) {
        int v1479 = 524292;
      }
      else {
        int v1479 = 4;
      }
      v1480 = *(unsigned int **)(a1 + 8);
      unsigned int v1481 = v1480[8];
      v1480[8] = v1481 | v1479;
      unint64_t v1482 = *v1480;
      if ((v1481 & 0x1000) != 0)
      {
        uint64_t v1483 = *v1480;
        v1484 = v1480;
        do
        {
          v1484 = (unsigned int *)((char *)v1484 + v1483);
          uint64_t v1483 = *v1484;
          v1482 += v1483;
        }
        while ((*((unsigned char *)v1484 + 33) & 0x20) == 0);
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1480, v1482);
      if (*(void *)(v1463 + 48)) {
        v1485 = *(const char **)(v1463 + 48);
      }
      else {
        v1485 = "";
      }
      v1486 = *(unsigned int **)(a1 + 8);
      *((void *)v1486 + 1) = 0;
      *((void *)v1486 + 2) = 0;
      *((void *)v1486 + 3) = 0;
      *((void *)v1486 + 4) = 0x534300000000;
      *(void *)v1486 = 0xFFFFC02300000028;
      *((void *)v1486 + 5) = v1466;
      unsigned int *v1486 = 48;
      AppendString(v1485, (int *)v1486);
      uint64_t v1487 = *v1486;
      uint64_t v1488 = (v1487 + 3) & 0xFFFFFFFC;
      bzero((char *)v1486 + v1487, v1488 - v1487);
      unsigned int *v1486 = v1488;
      v1489 = *(unsigned int **)(a1 + 8);
      unsigned int v1490 = v1489[8];
      v1489[8] = v1490 | v1479;
      unint64_t v1491 = *v1489;
      if ((v1490 & 0x1000) != 0)
      {
        uint64_t v1492 = *v1489;
        v1493 = v1489;
        do
        {
          v1493 = (unsigned int *)((char *)v1493 + v1492);
          uint64_t v1492 = *v1493;
          v1491 += v1492;
        }
        while ((*((unsigned char *)v1493 + 33) & 0x20) == 0);
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1489, v1491);
      int v1494 = *(unsigned __int8 *)(v1463 + 74);
      uint64_t v1495 = *(void *)(a1 + 8);
      *(void *)(v1495 + 16) = 0;
      *(void *)(v1495 + 24) = 0;
      *(void *)(v1495 + 8) = 0;
      *(void *)(v1495 + 32) = 0x69754300000000;
      *(void *)uint64_t v1495 = 0xFFFFC02700000028;
      *(void *)(v1495 + 40) = v1466;
      *(_DWORD *)(v1495 + 48) = v1494;
      *(_DWORD *)uint64_t v1495 = 52;
      v1496 = *(unsigned int **)(a1 + 8);
      unsigned int v1497 = v1496[8];
      v1496[8] = v1497 | v1479;
      unint64_t v1498 = *v1496;
      if ((v1497 & 0x1000) != 0)
      {
        uint64_t v1499 = *v1496;
        v1500 = v1496;
        do
        {
          v1500 = (unsigned int *)((char *)v1500 + v1499);
          uint64_t v1499 = *v1500;
          v1498 += v1499;
        }
        while ((*((unsigned char *)v1500 + 33) & 0x20) == 0);
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1496, v1498);
      int v1501 = *(_DWORD *)(v1463 + 68);
      uint64_t v1502 = *(void *)(a1 + 8);
      *(void *)(v1502 + 8) = 0;
      *(void *)(v1502 + 16) = 0;
      *(void *)(v1502 + 24) = 0;
      *(void *)(v1502 + 32) = 0x694300000000;
      *(void *)uint64_t v1502 = 0xFFFFC02400000028;
      *(void *)(v1502 + 40) = v1466;
      *(_DWORD *)(v1502 + 48) = v1501;
      *(_DWORD *)uint64_t v1502 = 52;
      v1503 = *(unsigned int **)(a1 + 8);
      unsigned int v1504 = v1503[8];
      v1503[8] = v1504 | v1479;
      unint64_t v1505 = *v1503;
      if ((v1504 & 0x1000) != 0)
      {
        uint64_t v1506 = *v1503;
        v1507 = v1503;
        do
        {
          v1507 = (unsigned int *)((char *)v1507 + v1506);
          uint64_t v1506 = *v1507;
          v1505 += v1506;
        }
        while ((*((unsigned char *)v1507 + 33) & 0x20) == 0);
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1503, v1505);
      int v1508 = *(unsigned __int8 *)(v1463 + 75);
      uint64_t v1509 = *(void *)(a1 + 8);
      *(void *)(v1509 + 16) = 0;
      *(void *)(v1509 + 24) = 0;
      *(void *)(v1509 + 8) = 0;
      *(void *)(v1509 + 32) = 0x69754300000000;
      *(void *)uint64_t v1509 = 0xFFFFC02500000028;
      *(void *)(v1509 + 40) = v1466;
      *(_DWORD *)(v1509 + 48) = v1508;
      *(_DWORD *)uint64_t v1509 = 52;
      v1510 = *(unsigned int **)(a1 + 8);
      unsigned int v1511 = v1510[8];
      v1510[8] = v1511 | v1479;
      unint64_t v1512 = *v1510;
      if ((v1511 & 0x1000) != 0)
      {
        uint64_t v1513 = *v1510;
        v1514 = v1510;
        do
        {
          v1514 = (unsigned int *)((char *)v1514 + v1513);
          uint64_t v1513 = *v1514;
          v1512 += v1513;
        }
        while ((*((unsigned char *)v1514 + 33) & 0x20) == 0);
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1510, v1512);
      int v1515 = *(unsigned __int8 *)(v1463 + 76);
      uint64_t v1516 = *(void *)(a1 + 8);
      *(void *)(v1516 + 16) = 0;
      *(void *)(v1516 + 24) = 0;
      *(void *)(v1516 + 8) = 0;
      *(void *)(v1516 + 32) = 0x69754300000000;
      *(void *)uint64_t v1516 = 0xFFFFC02600000028;
      *(void *)(v1516 + 40) = v1466;
      *(_DWORD *)(v1516 + 48) = v1515;
      *(_DWORD *)uint64_t v1516 = 52;
      v1517 = *(unsigned int **)(a1 + 8);
      unsigned int v1518 = v1517[8];
      v1517[8] = v1518 | v1479;
      unint64_t v1519 = *v1517;
      if ((v1518 & 0x1000) != 0)
      {
        uint64_t v1520 = *v1517;
        v1521 = v1517;
        do
        {
          v1521 = (unsigned int *)((char *)v1521 + v1520);
          uint64_t v1520 = *v1521;
          v1519 += v1520;
        }
        while ((*((unsigned char *)v1521 + 33) & 0x20) == 0);
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1517, v1519);
      WriteGTMTLSMCommandQueue_residencySets((uint64_t *)a1, (void *)a2, v1463);
      ++v1462;
    }
    while (v1462 < a3[22].nelts);
  }
  uint64_t v1522 = *(void *)a1;
  uint64_t v1523 = *(void *)(a1 + 8);
  *(void *)(v1523 + 16) = 0;
  *(void *)(v1523 + 24) = 0;
  *(void *)(v1523 + 8) = 0;
  *(_DWORD *)(v1523 + 32) = 70;
  *(_DWORD *)(v1523 + 36) = 67;
  *(void *)uint64_t v1523 = 0xFFFFD00800000028;
  *(void *)(v1523 + 40) = v1522;
  *(_DWORD *)uint64_t v1523 = 48;
  v1524 = *(unsigned int **)(a1 + 8);
  uint64_t v1525 = *v1524;
  if ((*((unsigned char *)v1524 + 33) & 0x10) != 0)
  {
    v1528 = *(unsigned int **)(a1 + 8);
    unint64_t v1526 = *v1524;
    uint64_t v1527 = v1582;
    do
    {
      v1528 = (unsigned int *)((char *)v1528 + v1525);
      uint64_t v1525 = *v1528;
      v1526 += v1525;
    }
    while ((*((unsigned char *)v1528 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v1526 = *v1524;
    uint64_t v1527 = v1582;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1524, v1526);
  v1529 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  *(void *)&__str[8] = "io-command-queue";
  *(_OWORD *)&__str[16] = 0uLL;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v1529, *(unsigned int *)(a1 + 16), v1530, 0);
  v1531 = *(unsigned int **)(a1 + 8);
  uint64_t v1532 = *v1531;
  if ((*((unsigned char *)v1531 + 33) & 0x10) != 0)
  {
    v1534 = *(unsigned int **)(a1 + 8);
    unint64_t v1533 = *v1531;
    do
    {
      v1534 = (unsigned int *)((char *)v1534 + v1532);
      uint64_t v1532 = *v1534;
      v1533 += v1532;
    }
    while ((*((unsigned char *)v1534 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v1533 = *v1531;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1531, v1533);
  if (a3[23].nelts >= 1)
  {
    uint64_t v1535 = 0;
    do
    {
      v1536 = *(void **)&a3[23].elts[8 * v1535];
      if (v1536) {
        uint64_t v1537 = v1536[1];
      }
      else {
        uint64_t v1537 = 0;
      }
      *(void *)__str = v1537;
      unint64_t v1538 = *(void *)(*(void *)(*find_entry(v1527, __str, 8uLL, 0) + 32) + 8);
      BOOL v1539 = IsAppleInternalLabel(v1536[6]);
      v1540 = *(unsigned int **)(a1 + 8);
      *(void *)__str = *(void *)a1;
      *(void *)&__str[8] = "io-command-queue";
      *(_OWORD *)&__str[16] = v1538;
      DYTraceEncode_EnterStateGroup((uint64_t)__str, v1540, *(unsigned int *)(a1 + 16), v1541, 0);
      v1542 = *(unsigned int **)(a1 + 8);
      uint64_t v1543 = *v1542;
      if ((*((unsigned char *)v1542 + 33) & 0x10) != 0)
      {
        v1545 = *(unsigned int **)(a1 + 8);
        unint64_t v1544 = *v1542;
        do
        {
          v1545 = (unsigned int *)((char *)v1545 + v1543);
          uint64_t v1543 = *v1545;
          v1544 += v1543;
        }
        while ((*((unsigned char *)v1545 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v1544 = *v1542;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1542, v1544);
      v1546 = (unsigned int *)v1536[7];
      if (v1546)
      {
        if (v1539) {
          int v1547 = 524292;
        }
        else {
          int v1547 = 4;
        }
        uint64_t v1548 = *(void *)(a1 + 8);
        *(void *)__str = *(void *)a1;
        *(void *)&__str[8] = v1538;
        *(void *)&__str[24] = 0;
        uint64_t v1549 = v1548 + *(unsigned int *)(a1 + 16) - 512;
        *(void *)__s = 512;
        *(void *)&__str[16] = StoreMTLIOCommandQueueDescriptorUsingEncode(*(void *)(a1 + 32), v1546, v1549, __s);
        DYTraceEncode_MTLDevice_newIOCommandQueueWithDescriptor_error((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
        v1550 = *(unsigned int **)(a1 + 8);
        unsigned int v1551 = v1550[8];
        v1550[8] = v1551 | v1547;
        unint64_t v1552 = *v1550;
        if ((v1551 & 0x1000) != 0)
        {
          uint64_t v1553 = *v1550;
          v1554 = v1550;
          do
          {
            v1554 = (unsigned int *)((char *)v1554 + v1553);
            uint64_t v1553 = *v1554;
            v1552 += v1553;
          }
          while ((*((unsigned char *)v1554 + 33) & 0x20) == 0);
        }
        fbstream_write(*(void *)(a1 + 24), (uint64_t)v1550, v1552);
      }
      uint64_t v1555 = *(void *)a1;
      uint64_t v1556 = *(void *)(a1 + 8);
      *(void *)(v1556 + 16) = 0;
      *(void *)(v1556 + 24) = 0;
      *(void *)(v1556 + 8) = 0;
      *(_DWORD *)(v1556 + 32) = 70;
      *(_DWORD *)(v1556 + 36) = 67;
      *(void *)uint64_t v1556 = 0xFFFFD00800000028;
      *(void *)(v1556 + 40) = v1555;
      *(_DWORD *)uint64_t v1556 = 48;
      v1557 = *(unsigned int **)(a1 + 8);
      uint64_t v1558 = *v1557;
      if ((*((unsigned char *)v1557 + 33) & 0x10) != 0)
      {
        v1560 = *(unsigned int **)(a1 + 8);
        unint64_t v1559 = *v1557;
        uint64_t v1527 = v1582;
        do
        {
          v1560 = (unsigned int *)((char *)v1560 + v1558);
          uint64_t v1558 = *v1560;
          v1559 += v1558;
        }
        while ((*((unsigned char *)v1560 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v1559 = *v1557;
        uint64_t v1527 = v1582;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v1557, v1559);
      ++v1535;
    }
    while (v1535 < a3[23].nelts);
  }
  uint64_t v1561 = *(void *)a1;
  uint64_t v1562 = *(void *)(a1 + 8);
  *(void *)(v1562 + 16) = 0;
  *(void *)(v1562 + 24) = 0;
  *(void *)(v1562 + 8) = 0;
  *(_DWORD *)(v1562 + 32) = 70;
  *(_DWORD *)(v1562 + 36) = 67;
  *(void *)uint64_t v1562 = 0xFFFFD00800000028;
  *(void *)(v1562 + 40) = v1561;
  *(_DWORD *)uint64_t v1562 = 48;
  v1563 = *(unsigned int **)(a1 + 8);
  uint64_t v1564 = *v1563;
  if ((*((unsigned char *)v1563 + 33) & 0x10) != 0)
  {
    v1566 = *(unsigned int **)(a1 + 8);
    unint64_t v1565 = *v1563;
    do
    {
      v1566 = (unsigned int *)((char *)v1566 + v1564);
      uint64_t v1564 = *v1566;
      v1565 += v1564;
    }
    while ((*((unsigned char *)v1566 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v1565 = *v1563;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v1563, v1565);
}

uint64_t WriteMakeAliasable(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v4 = *(_DWORD *)(a3 + 12);
  if (v4)
  {
    uint64_t v8 = result;
    do
    {
      uint64_t v9 = *(unint64_t ***)(a3 + 24);
      if (**v9 >= a4) {
        break;
      }
      uint64_t v10 = v4 - 1;
      uint64_t v11 = v9[(int)v10];
      v9[(int)v10] = *v9;
      if (v4 < 4)
      {
        LODWORD(v16) = 0;
      }
      else
      {
        int v12 = 0;
        int v13 = v4 - 2;
        unint64_t v14 = *v11;
        int v15 = 1;
        while (1)
        {
          uint64_t v16 = v15 + 1;
          uint64_t v17 = *(void *)(a3 + 24);
          if ((int)v16 >= v13)
          {
            LODWORD(v16) = v15;
          }
          else if (**(void **)(v17 + 8 * v16) >= **(void **)(v17 + 8 * v15))
          {
            LODWORD(v16) = v15;
          }
          uint64_t v18 = *(unint64_t **)(v17 + 8 * (int)v16);
          if (v14 <= *v18) {
            break;
          }
          *(void *)(v17 + 8 * v12) = v18;
          int v15 = 2 * v16;
          int v12 = v16;
          if (2 * (int)v16 >= v13) {
            goto LABEL_15;
          }
        }
        LODWORD(v16) = v12;
      }
LABEL_15:
      *(void *)(*(void *)(a3 + 24) + 8 * (int)v16) = v11;
      uint64_t v19 = *(void *)(a3 + 24);
      uint64_t v20 = *(int *)(a3 + 8);
      *(_DWORD *)(a3 + 12) = v10;
      uint64_t result = GTTraceFuncToFbuf(v8, a2, *(void *)(v19 + v10 * v20), 0);
      int v4 = *(_DWORD *)(a3 + 12);
    }
    while (v4);
  }
  return result;
}

void WriteGTMTLSMBuffer_restore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    v6[0] = 0;
    v6[1] = a3;
    GTResourceDownloaderGetResourceFilename(a2, 0, __str, 0x80uLL);
    v6[2] = __str;
    long long v7 = *(_OWORD *)(a2 + 48);
    DYTraceEncode_MTLCommandBuffer_restoreMTLBufferContents((uint64_t)v6, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
    unsigned int v5 = *(unsigned int **)(a1 + 8);
    v5[8] = 0;
    fbstream_write(*(void *)(a1 + 24), (uint64_t)v5, *v5);
  }
}

void WriteGTMTLSMBuffer_properties(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 + 8);
  WriteBufferInfo((uint64_t)a1, a2, a4, 0);
  if (*(void *)(a2 + 72)) {
    uint64_t v8 = *(const char **)(a2 + 72);
  }
  else {
    uint64_t v8 = "";
  }
  uint64_t v9 = (unsigned int *)a1[1];
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *((void *)v9 + 3) = 0;
  *((void *)v9 + 4) = 0x534300000000;
  *(void *)uint64_t v9 = 0xFFFFC00C00000028;
  *((void *)v9 + 5) = v7;
  unsigned int *v9 = 48;
  AppendString(v8, (int *)v9);
  uint64_t v10 = *v9;
  uint64_t v11 = (v10 + 3) & 0xFFFFFFFC;
  bzero((char *)v9 + v10, v11 - v10);
  unsigned int *v9 = v11;
  int v12 = (unsigned int *)a1[1];
  uint64_t v13 = *v12;
  if ((*((unsigned char *)v12 + 33) & 0x10) != 0)
  {
    int v15 = (unsigned int *)a1[1];
    unint64_t v14 = *v12;
    do
    {
      int v15 = (unsigned int *)((char *)v15 + v13);
      uint64_t v13 = *v15;
      v14 += v13;
    }
    while ((*((unsigned char *)v15 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v14 = *v12;
  }
  fbstream_write(a1[3], (uint64_t)v12, v14);
  if (*(void *)(a2 + 48))
  {
    if (a3)
    {
LABEL_10:
      char v16 = atomic_load((unint64_t *)(a3 + 56));
      int v17 = v16 & 3;
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v18 = *(unsigned __int16 *)(a2 + 98);
    uint64_t v19 = (void *)a1[1];
    v19[2] = 0;
    v19[3] = 0;
    v19[1] = 0;
    v19[4] = 0x6C754300000000;
    *uint64_t v19 = 0xFFFFC01100000028;
    v19[5] = v7;
    v19[6] = v18;
    *(_DWORD *)uint64_t v19 = 56;
    uint64_t v20 = (unsigned int *)a1[1];
    uint64_t v21 = *v20;
    if ((*((unsigned char *)v20 + 33) & 0x10) != 0)
    {
      uint64_t v23 = (unsigned int *)a1[1];
      unint64_t v22 = *v20;
      do
      {
        uint64_t v23 = (unsigned int *)((char *)v23 + v21);
        uint64_t v21 = *v23;
        v22 += v21;
      }
      while ((*((unsigned char *)v23 + 33) & 0x20) == 0);
    }
    else
    {
      unint64_t v22 = *v20;
    }
    fbstream_write(a1[3], (uint64_t)v20, v22);
    if (a3) {
      goto LABEL_10;
    }
  }
  int v17 = 0;
LABEL_17:
  uint64_t v24 = a1[1];
  *(void *)(v24 + 16) = 0;
  *(void *)(v24 + 24) = 0;
  *(void *)(v24 + 8) = 0;
  *(void *)(v24 + 32) = 0x69754300000006;
  *(void *)uint64_t v24 = 0xFFFFD80500000028;
  *(void *)(v24 + 40) = v7;
  *(_DWORD *)(v24 + 48) = v17;
  *(_DWORD *)uint64_t v24 = 52;
  uint64_t v25 = (unsigned int *)a1[1];
  uint64_t v26 = *v25;
  if ((*((unsigned char *)v25 + 33) & 0x10) != 0)
  {
    uint64_t v28 = (unsigned int *)a1[1];
    unint64_t v27 = *v25;
    do
    {
      uint64_t v28 = (unsigned int *)((char *)v28 + v26);
      uint64_t v26 = *v28;
      v27 += v26;
    }
    while ((*((unsigned char *)v28 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v27 = *v25;
  }
  fbstream_write(a1[3], (uint64_t)v25, v27);
  if (a3
    && (unint64_t v29 = atomic_load((unint64_t *)(a3 + 56)),
        unint64_t v30 = v29 & 0xFFFFFFFFFFFFFFE0,
        (v29 & 0xFFFFFFFFFFFFFFE0) != 0))
  {
    uint64_t v31 = a1[4];
    unint64_t v32 = *(void *)(v31 + 440);
    BOOL v33 = v32 >= v30;
    unint64_t v34 = v32 - v30;
    if (v34 != 0 && v33) {
      unint64_t v35 = v34 * *(unsigned int *)(v31 + 448) / *(unsigned int *)(v31 + 452);
    }
    else {
      unint64_t v35 = 0;
    }
  }
  else
  {
    unint64_t v35 = -1;
  }
  unint64_t v36 = (void *)a1[1];
  v36[2] = 0;
  _OWORD v36[3] = 0;
  v36[1] = 0;
  v36[4] = 0x77754300000046;
  *unint64_t v36 = 0xFFFFD81E00000028;
  v36[5] = v7;
  v36[6] = v35;
  *(_DWORD *)unint64_t v36 = 56;
  uint64_t v37 = (unsigned int *)a1[1];
  uint64_t v38 = a1[3];
  uint64_t v39 = *v37;
  if ((*((unsigned char *)v37 + 33) & 0x10) != 0)
  {
    uint64_t v41 = (unsigned int *)a1[1];
    unint64_t v40 = *v37;
    do
    {
      uint64_t v41 = (unsigned int *)((char *)v41 + v39);
      uint64_t v39 = *v41;
      v40 += v39;
    }
    while ((*((unsigned char *)v41 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v40 = *v37;
  }

  fbstream_write(v38, (uint64_t)v37, v40);
}

void WriteGTMTLSMBuffer_debugMarkers(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v21 = a3[1];
  uint64_t v5 = a3[3];
  uint64_t v6 = a3[4];
  if (v6)
  {
    unsigned int v7 = 0;
    while (1)
    {
      unsigned int v8 = atomic_load((unsigned int *)(v6 + 4));
      uint64_t v9 = v7 + (v8 >> 6) - 1;
      if ((int)v9 > 1) {
        break;
      }
      uint64_t v6 = *(void *)(v6 + 40);
      unsigned int v7 = v9;
      if (!v6)
      {
        unsigned int v7 = v9;
        goto LABEL_8;
      }
    }
    uint64_t v9 = 1;
  }
  else
  {
    unsigned int v7 = 0;
    uint64_t v9 = 0;
  }
LABEL_8:
  unint64_t v10 = v7 | (unint64_t)(v9 << 32);
LABEL_9:
  uint64_t v11 = v6 + 64;
  while (v6 && (*(unsigned char *)(v11 + ((uint64_t)(HIDWORD(v10) - (int)v10) << 6) + 15) & 8) != 0)
  {
    uint64_t v12 = v11 + ((uint64_t)(HIDWORD(v10) - (int)v10) << 6);
    if (*(_DWORD *)(v12 + 8) == -16103)
    {
      uint64_t v13 = GTTraceFunc_argumentBytesWithPool((uint64_t *)v12, *(unsigned __int8 *)(v12 + 13), v5);
      v22[0] = v21;
      v22[1] = GTTraceFunc_argumentBytesWithMap((void *)v12, v13[24], *(void *)(a2 + 24));
      long long v23 = *(_OWORD *)(v13 + 8);
      DYTraceEncode_MTLBuffer_addDebugMarker_range((uint64_t)v22, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
      unint64_t v14 = *(unsigned int **)(a1 + 8);
      uint64_t v15 = *v14;
      if ((*((unsigned char *)v14 + 33) & 0x10) != 0)
      {
        int v17 = *(unsigned int **)(a1 + 8);
        unint64_t v16 = *v14;
        do
        {
          int v17 = (unsigned int *)((char *)v17 + v15);
          uint64_t v15 = *v17;
          v16 += v15;
        }
        while ((*((unsigned char *)v17 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v16 = *v14;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v14, v16);
    }
    unsigned int v18 = atomic_load((unsigned int *)(v6 + 4));
    int v19 = v10 + (v18 >> 6);
    uint64_t v20 = (HIDWORD(v10) + 1);
    unint64_t v10 = (v20 << 32) | v10;
    if (v20 == v19 - 1)
    {
      unint64_t v10 = (v20 << 32) | v20;
      uint64_t v6 = *(void *)(v6 + 40);
      goto LABEL_9;
    }
  }
}

void WriteGTMTLSMBuffer_resources(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 520);
  if (a3) {
    uint64_t v6 = *(void *)(a3 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v79 = v6;
  entry = find_entry(v5, &v79, 8uLL, 0);
  if (*entry) {
    uint64_t v10 = *(void *)(*entry + 32);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(unsigned int **)(a1 + 8);
  uint64_t v75 = *(void *)a1;
  uint64_t v76 = "textures";
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  DYTraceEncode_EnterStateGroup((uint64_t)&v75, v11, *(unsigned int *)(a1 + 16), v9, 0);
  uint64_t v12 = *(unsigned int **)(a1 + 8);
  uint64_t v13 = *v12;
  if ((*((unsigned char *)v12 + 33) & 0x10) != 0)
  {
    uint64_t v15 = *(unsigned int **)(a1 + 8);
    unint64_t v14 = *v12;
    do
    {
      uint64_t v15 = (unsigned int *)((char *)v15 + v13);
      uint64_t v13 = *v15;
      v14 += v13;
    }
    while ((*((unsigned char *)v15 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v14 = *v12;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v12, v14);
  if (v10)
  {
    int v16 = *(_DWORD *)(v10 + 12);
    if (v16 >= 1)
    {
      uint64_t v17 = 0;
      while (1)
      {
        uint64_t v18 = *(void *)(*(void *)(v10 + 24) + 8 * v17);
        if (*(_DWORD *)v18 == 80) {
          break;
        }
LABEL_32:
        if (++v17 >= v16) {
          goto LABEL_33;
        }
      }
      uint64_t v75 = *(void *)(v18 + 8);
      int v19 = find_entry(v7, &v75, 8uLL, 0);
      if (*v19) {
        uint64_t v21 = *(void *)(*v19 + 32);
      }
      else {
        uint64_t v21 = 0;
      }
      unint64_t v22 = *(unsigned int **)(a1 + 8);
      uint64_t v75 = *(void *)a1;
      uint64_t v76 = "texture";
      uint64_t v77 = *(void *)(v21 + 8);
      uint64_t v78 = 0;
      DYTraceEncode_EnterStateGroup((uint64_t)&v75, v22, *(unsigned int *)(a1 + 16), v20, 0);
      uint64_t v23 = *(void *)(a1 + 24);
      uint64_t v24 = *(unsigned int **)(a1 + 8);
      unint64_t v25 = *v24;
      if ((*((unsigned char *)v24 + 33) & 0x10) != 0)
      {
        uint64_t v26 = *(unsigned int **)(a1 + 8);
        unint64_t v27 = *v24;
        do
        {
          uint64_t v26 = (unsigned int *)((char *)v26 + v25);
          unint64_t v25 = *v26;
          v27 += v25;
        }
        while ((*((unsigned char *)v26 + 33) & 0x20) == 0);
        fbstream_write(v23, (uint64_t)v24, v27);
        if (!v21) {
          goto LABEL_25;
        }
      }
      else
      {
        fbstream_write(v23, (uint64_t)v24, v25);
      }
      uint64_t v28 = *(void *)(v21 + 32);
      if (v28 && (*(unsigned char *)(v28 + 79) & 8) != 0)
      {
        uint64_t v29 = v28 + 64;
        goto LABEL_27;
      }
LABEL_25:
      uint64_t v29 = 0;
LABEL_27:
      GTTraceFuncToFbuf(a1, a2, v29, 0);
      WriteGTMTLSMTexture_properties((void *)a1, v18, v21, v7);
      WriteGTMTLSMTexture_textureViews((uint64_t *)a1, a2, v18);
      uint64_t v30 = *(void *)a1;
      uint64_t v31 = *(void *)(a1 + 8);
      *(void *)(v31 + 16) = 0;
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 8) = 0;
      *(_DWORD *)(v31 + 32) = 70;
      *(_DWORD *)(v31 + 36) = 67;
      *(void *)uint64_t v31 = 0xFFFFD00800000028;
      *(void *)(v31 + 40) = v30;
      *(_DWORD *)uint64_t v31 = 48;
      unint64_t v32 = *(unsigned int **)(a1 + 8);
      uint64_t v33 = *v32;
      if ((*((unsigned char *)v32 + 33) & 0x10) != 0)
      {
        unint64_t v35 = *(unsigned int **)(a1 + 8);
        unint64_t v34 = *v32;
        do
        {
          unint64_t v35 = (unsigned int *)((char *)v35 + v33);
          uint64_t v33 = *v35;
          v34 += v33;
        }
        while ((*((unsigned char *)v35 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v34 = *v32;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v32, v34);
      int v16 = *(_DWORD *)(v10 + 12);
      goto LABEL_32;
    }
  }
LABEL_33:
  uint64_t v36 = *(void *)a1;
  uint64_t v37 = *(void *)(a1 + 8);
  *(void *)(v37 + 16) = 0;
  *(void *)(v37 + 24) = 0;
  *(void *)(v37 + 8) = 0;
  *(_DWORD *)(v37 + 32) = 70;
  *(_DWORD *)(v37 + 36) = 67;
  *(void *)uint64_t v37 = 0xFFFFD00800000028;
  *(void *)(v37 + 40) = v36;
  *(_DWORD *)uint64_t v37 = 48;
  uint64_t v38 = *(unsigned int **)(a1 + 8);
  uint64_t v39 = *v38;
  if ((*((unsigned char *)v38 + 33) & 0x10) != 0)
  {
    uint64_t v41 = *(unsigned int **)(a1 + 8);
    unint64_t v40 = *v38;
    do
    {
      uint64_t v41 = (unsigned int *)((char *)v41 + v39);
      uint64_t v39 = *v41;
      v40 += v39;
    }
    while ((*((unsigned char *)v41 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v40 = *v38;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v38, v40);
  if (v10)
  {
    uint64_t v43 = *(unsigned int **)(a1 + 8);
    uint64_t v75 = *(void *)a1;
    uint64_t v76 = "acceleration-structures";
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    DYTraceEncode_EnterStateGroup((uint64_t)&v75, v43, *(unsigned int *)(a1 + 16), v42, 0);
    uint64_t v44 = *(unsigned int **)(a1 + 8);
    uint64_t v45 = *v44;
    if ((*((unsigned char *)v44 + 33) & 0x10) != 0)
    {
      uint64_t v47 = *(unsigned int **)(a1 + 8);
      unint64_t v46 = *v44;
      do
      {
        uint64_t v47 = (unsigned int *)((char *)v47 + v45);
        uint64_t v45 = *v47;
        v46 += v45;
      }
      while ((*((unsigned char *)v47 + 33) & 0x20) == 0);
    }
    else
    {
      unint64_t v46 = *v44;
    }
    fbstream_write(*(void *)(a1 + 24), (uint64_t)v44, v46);
    int v48 = *(_DWORD *)(v10 + 12);
    if (v48 >= 1)
    {
      for (uint64_t i = 0; i < v48; ++i)
      {
        uint64_t v50 = *(void *)(*(void *)(v10 + 24) + 8 * i);
        if (*(_DWORD *)v50 == 16)
        {
          uint64_t v75 = *(void *)(v50 + 8);
          int32x2_t v51 = find_entry(v7, &v75, 8uLL, 0);
          if (*v51) {
            uint64_t v52 = *(void *)(*v51 + 32);
          }
          else {
            uint64_t v52 = 0;
          }
          uint64_t v75 = *(void *)(v50 + 8);
          uint64_t v53 = *(void *)(*(void *)(*find_entry(v7, &v75, 8uLL, 0) + 32) + 8);
          long long v54 = *(unsigned int **)(a1 + 8);
          uint64_t v75 = *(void *)a1;
          uint64_t v76 = "acceleration-structure";
          uint64_t v77 = v53;
          uint64_t v78 = 0;
          DYTraceEncode_EnterStateGroup((uint64_t)&v75, v54, *(unsigned int *)(a1 + 16), v55, 0);
          unint64_t v56 = *(unsigned int **)(a1 + 8);
          uint64_t v57 = *v56;
          if ((*((unsigned char *)v56 + 33) & 0x10) != 0)
          {
            uint64_t v59 = *(unsigned int **)(a1 + 8);
            unint64_t v58 = *v56;
            do
            {
              uint64_t v59 = (unsigned int *)((char *)v59 + v57);
              uint64_t v57 = *v59;
              v58 += v57;
            }
            while ((*((unsigned char *)v59 + 33) & 0x20) == 0);
          }
          else
          {
            unint64_t v58 = *v56;
          }
          fbstream_write(*(void *)(a1 + 24), (uint64_t)v56, v58);
          if (v52 && (uint64_t v60 = *(void *)(v52 + 32)) != 0 && (*(unsigned char *)(v60 + 79) & 8) != 0) {
            uint64_t v61 = v60 + 64;
          }
          else {
            uint64_t v61 = 0;
          }
          GTTraceFuncToFbuf(a1, a2, v61, 0);
          WriteGTMTLSMAccelerationStructure_properties(a1, v50, v52, v7, v62);
          uint64_t v63 = *(void *)a1;
          uint64_t v64 = *(void *)(a1 + 8);
          *(void *)(v64 + 16) = 0;
          *(void *)(v64 + 24) = 0;
          *(void *)(v64 + 8) = 0;
          *(_DWORD *)(v64 + 32) = 70;
          *(_DWORD *)(v64 + 36) = 67;
          *(void *)uint64_t v64 = 0xFFFFD00800000028;
          *(void *)(v64 + 40) = v63;
          *(_DWORD *)uint64_t v64 = 48;
          uint64_t v65 = *(unsigned int **)(a1 + 8);
          uint64_t v66 = *v65;
          if ((*((unsigned char *)v65 + 33) & 0x10) != 0)
          {
            uint64_t v68 = *(unsigned int **)(a1 + 8);
            unint64_t v67 = *v65;
            do
            {
              uint64_t v68 = (unsigned int *)((char *)v68 + v66);
              uint64_t v66 = *v68;
              v67 += v66;
            }
            while ((*((unsigned char *)v68 + 33) & 0x20) == 0);
          }
          else
          {
            unint64_t v67 = *v65;
          }
          fbstream_write(*(void *)(a1 + 24), (uint64_t)v65, v67);
          int v48 = *(_DWORD *)(v10 + 12);
        }
      }
    }
    uint64_t v69 = *(void *)a1;
    uint64_t v70 = *(void *)(a1 + 8);
    *(void *)(v70 + 16) = 0;
    *(void *)(v70 + 24) = 0;
    *(void *)(v70 + 8) = 0;
    *(_DWORD *)(v70 + 32) = 70;
    *(_DWORD *)(v70 + 36) = 67;
    *(void *)uint64_t v70 = 0xFFFFD00800000028;
    *(void *)(v70 + 40) = v69;
    *(_DWORD *)uint64_t v70 = 48;
    uint64_t v71 = *(unsigned int **)(a1 + 8);
    uint64_t v72 = *v71;
    if ((*((unsigned char *)v71 + 33) & 0x10) != 0)
    {
      uint64_t v74 = *(unsigned int **)(a1 + 8);
      unint64_t v73 = *v71;
      do
      {
        uint64_t v74 = (unsigned int *)((char *)v74 + v72);
        uint64_t v72 = *v74;
        v73 += v72;
      }
      while ((*((unsigned char *)v74 + 33) & 0x20) == 0);
    }
    else
    {
      unint64_t v73 = *v71;
    }
    fbstream_write(*(void *)(a1 + 24), (uint64_t)v71, v73);
  }
}

void WriteGTMTLSMTexture_properties(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 + 8);
  WriteTextureInfo((uint64_t)a1, a2, a4, 0);
  if (*(void *)(a2 + 72)) {
    unsigned int v8 = *(const char **)(a2 + 72);
  }
  else {
    unsigned int v8 = "";
  }
  uint64_t v9 = (unsigned int *)a1[1];
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *((void *)v9 + 3) = 0;
  *((void *)v9 + 4) = 0x534300000000;
  *(void *)uint64_t v9 = 0xFFFFC09000000028;
  *((void *)v9 + 5) = v7;
  unsigned int *v9 = 48;
  AppendString(v8, (int *)v9);
  uint64_t v10 = *v9;
  uint64_t v11 = (v10 + 3) & 0xFFFFFFFC;
  bzero((char *)v9 + v10, v11 - v10);
  unsigned int *v9 = v11;
  uint64_t v12 = (unsigned int *)a1[1];
  uint64_t v13 = *v12;
  if ((*((unsigned char *)v12 + 33) & 0x10) != 0)
  {
    uint64_t v15 = (unsigned int *)a1[1];
    unint64_t v14 = *v12;
    do
    {
      uint64_t v15 = (unsigned int *)((char *)v15 + v13);
      uint64_t v13 = *v15;
      v14 += v13;
    }
    while ((*((unsigned char *)v15 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v14 = *v12;
  }
  fbstream_write(a1[3], (uint64_t)v12, v14);
  if (*(void *)(a2 + 48) || *(void *)(a2 + 136) || *(void *)(a2 + 144))
  {
    if (a3)
    {
LABEL_12:
      char v16 = atomic_load((unint64_t *)(a3 + 56));
      int v17 = v16 & 3;
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v18 = *(unsigned __int16 *)(a2 + 98);
    int v19 = (void *)a1[1];
    v19[2] = 0;
    v19[3] = 0;
    v19[1] = 0;
    v19[4] = 0x6C754300000000;
    *int v19 = 0xFFFFC09800000028;
    v19[5] = v7;
    v19[6] = v18;
    *(_DWORD *)int v19 = 56;
    uint64_t v20 = (unsigned int *)a1[1];
    uint64_t v21 = *v20;
    if ((*((unsigned char *)v20 + 33) & 0x10) != 0)
    {
      uint64_t v23 = (unsigned int *)a1[1];
      unint64_t v22 = *v20;
      do
      {
        uint64_t v23 = (unsigned int *)((char *)v23 + v21);
        uint64_t v21 = *v23;
        v22 += v21;
      }
      while ((*((unsigned char *)v23 + 33) & 0x20) == 0);
    }
    else
    {
      unint64_t v22 = *v20;
    }
    fbstream_write(a1[3], (uint64_t)v20, v22);
    if (a3) {
      goto LABEL_12;
    }
  }
  int v17 = 0;
LABEL_19:
  uint64_t v24 = a1[1];
  *(void *)(v24 + 16) = 0;
  *(void *)(v24 + 24) = 0;
  *(void *)(v24 + 8) = 0;
  *(void *)(v24 + 32) = 0x69754300000006;
  *(void *)uint64_t v24 = 0xFFFFD80600000028;
  *(void *)(v24 + 40) = v7;
  *(_DWORD *)(v24 + 48) = v17;
  *(_DWORD *)uint64_t v24 = 52;
  unint64_t v25 = (unsigned int *)a1[1];
  uint64_t v26 = *v25;
  if ((*((unsigned char *)v25 + 33) & 0x10) != 0)
  {
    uint64_t v28 = (unsigned int *)a1[1];
    unint64_t v27 = *v25;
    do
    {
      uint64_t v28 = (unsigned int *)((char *)v28 + v26);
      uint64_t v26 = *v28;
      v27 += v26;
    }
    while ((*((unsigned char *)v28 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v27 = *v25;
  }
  fbstream_write(a1[3], (uint64_t)v25, v27);
  if (a3
    && (unint64_t v29 = atomic_load((unint64_t *)(a3 + 56)),
        unint64_t v30 = v29 & 0xFFFFFFFFFFFFFFE0,
        (v29 & 0xFFFFFFFFFFFFFFE0) != 0))
  {
    uint64_t v31 = a1[4];
    unint64_t v32 = *(void *)(v31 + 440);
    BOOL v33 = v32 >= v30;
    unint64_t v34 = v32 - v30;
    if (v34 != 0 && v33) {
      unint64_t v35 = v34 * *(unsigned int *)(v31 + 448) / *(unsigned int *)(v31 + 452);
    }
    else {
      unint64_t v35 = 0;
    }
  }
  else
  {
    unint64_t v35 = -1;
  }
  uint64_t v36 = (void *)a1[1];
  v36[2] = 0;
  _OWORD v36[3] = 0;
  v36[1] = 0;
  v36[4] = 0x77754300000046;
  *uint64_t v36 = 0xFFFFD81C00000028;
  v36[5] = v7;
  v36[6] = v35;
  *(_DWORD *)uint64_t v36 = 56;
  uint64_t v37 = (unsigned int *)a1[1];
  uint64_t v38 = a1[3];
  uint64_t v39 = *v37;
  if ((*((unsigned char *)v37 + 33) & 0x10) != 0)
  {
    uint64_t v41 = (unsigned int *)a1[1];
    unint64_t v40 = *v37;
    do
    {
      uint64_t v41 = (unsigned int *)((char *)v41 + v39);
      uint64_t v39 = *v41;
      v40 += v39;
    }
    while ((*((unsigned char *)v41 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v40 = *v37;
  }

  fbstream_write(v38, (uint64_t)v37, v40);
}

void WriteGTMTLSMTexture_downloads(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  if (!a3) {
    return;
  }
  if (a4)
  {
    uint64_t v8 = *(void *)(a1 + 8);
    *(void *)(v8 + 8) = 0;
    *(void *)(v8 + 16) = 0;
    *(void *)(v8 + 24) = 0;
    *(void *)uint64_t v8 = 0xFFFFC25900000024;
    *(_DWORD *)(v8 + 32) = 0;
    strcpy((char *)(v8 + 36), "Ctul@6ululul");
    *(_WORD *)(v8 + 49) = 0;
    *(unsigned char *)(v8 + 51) = 0;
    *(void *)(v8 + 52) = a5;
    *(void *)(v8 + 60) = a5;
    *(void *)(v8 + 68) = 2;
    *(_OWORD *)(v8 + 76) = 0u;
    *(_OWORD *)(v8 + 92) = 0u;
    *(_OWORD *)(v8 + 108) = 0u;
    *(void *)(v8 + 132) = 0;
    *(void *)(v8 + 124) = 0;
    *(_DWORD *)uint64_t v8 = 140;
    uint64_t v9 = *(unsigned int **)(a1 + 8);
    v9[1] = -10213;
    unsigned int v10 = v9[8];
    v9[8] = v10 | 4;
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *v9;
    if ((v10 & 0x1000) != 0)
    {
      int v19 = v9;
      unint64_t v13 = *v9;
      do
      {
        int v19 = (unsigned int *)((char *)v19 + v12);
        uint64_t v12 = *v19;
        v13 += v12;
      }
      while ((*((unsigned char *)v19 + 33) & 0x20) == 0);
    }
    else
    {
      unint64_t v13 = *v9;
    }
    fbstream_write(v11, (uint64_t)v9, v13);
    unsigned int v20 = *(unsigned __int16 *)(a3 + 44);
    if (*(_WORD *)(a3 + 44))
    {
      unint64_t v21 = 0;
      do
      {
        if ((*(unsigned char *)(a3 + 88 * v21 + 47) & 2) == 0)
        {
          unint64_t v22 = a3 + 88 * v21;
          uint64_t v23 = *(unsigned int *)(v22 + 52);
          uint64_t v24 = *(unsigned __int16 *)(v22 + 56);
          uint64_t v25 = *(unsigned __int16 *)(v22 + 58);
          uint64_t v26 = *(unsigned int *)(v22 + 60);
          uint64_t v27 = *(unsigned __int16 *)(v22 + 64);
          uint64_t v28 = *(unsigned __int16 *)(v22 + 66);
          uint64_t v29 = *(unsigned __int16 *)(v22 + 50);
          uint64_t v30 = *(unsigned __int16 *)(v22 + 48);
          uint64_t v31 = *(void *)(a1 + 8);
          *(void *)(v31 + 8) = 0;
          *(void *)(v31 + 16) = 0;
          *(void *)(v31 + 24) = 0;
          *(void *)uint64_t v31 = 0xFFFFC25900000024;
          *(_DWORD *)(v31 + 32) = 0;
          strcpy((char *)(v31 + 36), "Ctul@6ululul");
          *(_WORD *)(v31 + 49) = 0;
          *(unsigned char *)(v31 + 51) = 0;
          *(void *)(v31 + 52) = a5;
          *(void *)(v31 + 60) = a5;
          *(void *)(v31 + 68) = 0;
          *(void *)(v31 + 76) = v23;
          *(void *)(v31 + 84) = v24;
          *(void *)(v31 + 92) = v25;
          *(void *)(v31 + 100) = v26;
          *(void *)(v31 + 108) = v27;
          *(void *)(v31 + 116) = v28;
          *(void *)(v31 + 124) = v29;
          *(void *)(v31 + 132) = v30;
          *(_DWORD *)uint64_t v31 = 140;
          unint64_t v32 = *(unsigned int **)(a1 + 8);
          v32[1] = -10213;
          LODWORD(v30) = v32[8];
          v32[8] = v30 | 4;
          unint64_t v33 = *v32;
          if ((v30 & 0x1000) != 0)
          {
            uint64_t v34 = *v32;
            unint64_t v35 = v32;
            do
            {
              unint64_t v35 = (unsigned int *)((char *)v35 + v34);
              uint64_t v34 = *v35;
              v33 += v34;
            }
            while ((*((unsigned char *)v35 + 33) & 0x20) == 0);
          }
          fbstream_write(*(void *)(a1 + 24), (uint64_t)v32, v33);
          unsigned int v20 = *(unsigned __int16 *)(a3 + 44);
        }
        ++v21;
      }
      while (v21 < v20);
    }
    goto LABEL_22;
  }
  if (!*(void *)(a2 + 120) || *(unsigned char *)(a3 + 46) != 86)
  {
LABEL_22:
    WriteGTMTLSMTexture_restoreTextureData(a3, a1, a5);
    return;
  }
  v36[0] = a5;
  GTResourceDownloaderGetResourceFilename(a3, *(_DWORD *)(a3 + 56), __str, 0x80uLL);
  v36[1] = __str;
  long long v37 = *(_OWORD *)(a3 + 48);
  DYTraceEncode_MTLTexture_restoreIOSurfaceData_length_forPlane((uint64_t)v36, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
  unint64_t v14 = *(unsigned int **)(a1 + 8);
  unsigned int v15 = v14[8];
  v14[8] = v15 | 4;
  unint64_t v16 = *v14;
  if ((v15 & 0x1000) != 0)
  {
    uint64_t v17 = *v14;
    uint64_t v18 = v14;
    do
    {
      uint64_t v18 = (unsigned int *)((char *)v18 + v17);
      uint64_t v17 = *v18;
      v16 += v17;
    }
    while ((*((unsigned char *)v18 + 33) & 0x20) == 0);
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v14, v16);
}

void WriteGTMTLSMTexture_textureViews(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 520);
  if (a3) {
    uint64_t v6 = *(void *)(a3 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v47 = v6;
  entry = find_entry(v5, &v47, 8uLL, 0);
  if (*entry) {
    uint64_t v10 = *(void *)(*entry + 32);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = (unsigned int *)a1[1];
  uint64_t v43 = *a1;
  uint64_t v44 = "texture-views";
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  DYTraceEncode_EnterStateGroup((uint64_t)&v43, v11, *((unsigned int *)a1 + 4), v9, 0);
  uint64_t v12 = (unsigned int *)a1[1];
  uint64_t v13 = *v12;
  if ((*((unsigned char *)v12 + 33) & 0x10) != 0)
  {
    unsigned int v15 = (unsigned int *)a1[1];
    unint64_t v14 = *v12;
    do
    {
      unsigned int v15 = (unsigned int *)((char *)v15 + v13);
      uint64_t v13 = *v15;
      v14 += v13;
    }
    while ((*((unsigned char *)v15 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v14 = *v12;
  }
  fbstream_write(a1[3], (uint64_t)v12, v14);
  if (v10 && *(int *)(v10 + 12) >= 1)
  {
    for (uint64_t i = 0; i < *(int *)(v10 + 12); ++i)
    {
      uint64_t v17 = *(void *)(*(void *)(v10 + 24) + 8 * i);
      if (v17) {
        uint64_t v18 = *(void *)(v17 + 8);
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v43 = v18;
      int v19 = find_entry(v7, &v43, 8uLL, 0);
      if (*v19) {
        uint64_t v21 = *(void *)(*v19 + 32);
      }
      else {
        uint64_t v21 = 0;
      }
      uint64_t v22 = *(void *)(v21 + 8);
      uint64_t v23 = (unsigned int *)a1[1];
      uint64_t v43 = *a1;
      uint64_t v44 = "texture";
      uint64_t v45 = v22;
      uint64_t v46 = 0;
      DYTraceEncode_EnterStateGroup((uint64_t)&v43, v23, *((unsigned int *)a1 + 4), v20, 0);
      uint64_t v24 = a1[3];
      uint64_t v25 = (unsigned int *)a1[1];
      unint64_t v26 = *v25;
      if ((*((unsigned char *)v25 + 33) & 0x10) != 0)
      {
        uint64_t v27 = (unsigned int *)a1[1];
        unint64_t v28 = *v25;
        do
        {
          uint64_t v27 = (unsigned int *)((char *)v27 + v26);
          unint64_t v26 = *v27;
          v28 += v26;
        }
        while ((*((unsigned char *)v27 + 33) & 0x20) == 0);
        fbstream_write(v24, (uint64_t)v25, v28);
        if (!v21) {
          goto LABEL_27;
        }
      }
      else
      {
        fbstream_write(v24, (uint64_t)v25, v26);
      }
      uint64_t v29 = *(void *)(v21 + 32);
      if (v29 && (*(unsigned char *)(v29 + 79) & 8) != 0)
      {
        uint64_t v30 = v29 + 64;
        goto LABEL_29;
      }
LABEL_27:
      uint64_t v30 = 0;
LABEL_29:
      GTTraceFuncToFbuf(a1, a2, v30, 0);
      WriteGTMTLSMTexture_properties(a1, v17, v21, v7);
      WriteGTMTLSMTexture_textureViews(a1, a2, v17);
      uint64_t v31 = *a1;
      uint64_t v32 = a1[1];
      *(void *)(v32 + 16) = 0;
      *(void *)(v32 + 24) = 0;
      *(void *)(v32 + 8) = 0;
      *(_DWORD *)(v32 + 32) = 70;
      *(_DWORD *)(v32 + 36) = 67;
      *(void *)uint64_t v32 = 0xFFFFD00800000028;
      *(void *)(v32 + 40) = v31;
      *(_DWORD *)uint64_t v32 = 48;
      unint64_t v33 = (unsigned int *)a1[1];
      uint64_t v34 = *v33;
      if ((*((unsigned char *)v33 + 33) & 0x10) != 0)
      {
        uint64_t v36 = (unsigned int *)a1[1];
        unint64_t v35 = *v33;
        do
        {
          uint64_t v36 = (unsigned int *)((char *)v36 + v34);
          uint64_t v34 = *v36;
          v35 += v34;
        }
        while ((*((unsigned char *)v36 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v35 = *v33;
      }
      fbstream_write(a1[3], (uint64_t)v33, v35);
    }
  }
  uint64_t v37 = *a1;
  uint64_t v38 = a1[1];
  *(void *)(v38 + 16) = 0;
  *(void *)(v38 + 24) = 0;
  *(void *)(v38 + 8) = 0;
  *(_DWORD *)(v38 + 32) = 70;
  *(_DWORD *)(v38 + 36) = 67;
  *(void *)uint64_t v38 = 0xFFFFD00800000028;
  *(void *)(v38 + 40) = v37;
  *(_DWORD *)uint64_t v38 = 48;
  uint64_t v39 = (unsigned int *)a1[1];
  uint64_t v40 = *v39;
  if ((*((unsigned char *)v39 + 33) & 0x10) != 0)
  {
    uint64_t v42 = (unsigned int *)a1[1];
    unint64_t v41 = *v39;
    do
    {
      uint64_t v42 = (unsigned int *)((char *)v42 + v40);
      uint64_t v40 = *v42;
      v41 += v40;
    }
    while ((*((unsigned char *)v42 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v41 = *v39;
  }
  fbstream_write(a1[3], (uint64_t)v39, v41);
}

void WriteGTMTLSMAccelerationStructure_properties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint8x8_t a5)
{
  uint64_t v8 = *(void *)(a3 + 8);
  uint64_t v9 = *(unsigned __int8 **)(a2 + 112);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512;
    uint64_t v57 = 512;
    uint64_t v11 = (const char *)StoreMTLAccelerationStructureDescriptorUsingEncode(*(void *)(a1 + 32), v9, v10, &v57, a4);
    uint64_t v12 = *(unsigned int **)(a1 + 8);
    *((void *)v12 + 1) = 0;
    *((void *)v12 + 2) = 0;
    *((void *)v12 + 3) = 0;
    *((void *)v12 + 4) = 0x554300000000;
    *(void *)uint64_t v12 = 0xFFFFC34000000028;
    *((void *)v12 + 5) = v8;
    unsigned int *v12 = 48;
    AppendString(v11, (int *)v12);
    uint64_t v13 = *v12;
    uint64_t v14 = (v13 + 3) & 0xFFFFFFFC;
    bzero((char *)v12 + v13, v14 - v13);
    unsigned int *v12 = v14;
    unsigned int v15 = *(unsigned int **)(a1 + 8);
    unsigned int v16 = v15[8];
    v15[8] = v16 | 4;
    unint64_t v17 = *v15;
    if ((v16 & 0x1000) != 0)
    {
      uint64_t v18 = *v15;
      int v19 = v15;
      do
      {
        int v19 = (unsigned int *)((char *)v19 + v18);
        uint64_t v18 = *v19;
        v17 += v18;
      }
      while ((*((unsigned char *)v19 + 33) & 0x20) == 0);
    }
    fbstream_write(*(void *)(a1 + 24), (uint64_t)v15, v17);
  }
  a5.i32[0] = *(_DWORD *)(a2 + 104);
  uint64_t v20 = *(void *)(a1 + 8);
  *(void *)(v20 + 8) = 0;
  *(void *)(v20 + 16) = 0;
  *(void *)(v20 + 24) = 0;
  *(void *)uint64_t v20 = 0xFFFFD85100000024;
  *(_DWORD *)(v20 + 32) = 4;
  *(void *)(v20 + 36) = *(void *)"Cuiuiuiui";
  *(_DWORD *)(v20 + 44) = 105;
  *(void *)(v20 + 48) = v8;
  *(uint32x4_t *)(v20 + 56) = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a5));
  *(_DWORD *)uint64_t v20 = 72;
  uint64_t v21 = *(unsigned int **)(a1 + 8);
  unsigned int v22 = v21[8];
  v21[8] = v22 | 4;
  uint64_t v23 = *v21;
  if ((v22 & 0x1000) != 0)
  {
    uint64_t v25 = v21;
    unint64_t v24 = *v21;
    do
    {
      uint64_t v25 = (unsigned int *)((char *)v25 + v23);
      uint64_t v23 = *v25;
      v24 += v23;
    }
    while ((*((unsigned char *)v25 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v24 = *v21;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v21, v24);
  if (*(void *)(a2 + 72)) {
    unint64_t v26 = *(const char **)(a2 + 72);
  }
  else {
    unint64_t v26 = "";
  }
  uint64_t v27 = *(unsigned int **)(a1 + 8);
  *((void *)v27 + 1) = 0;
  *((void *)v27 + 2) = 0;
  *((void *)v27 + 3) = 0;
  *((void *)v27 + 4) = 0x534300000000;
  *(void *)uint64_t v27 = 0xFFFFC2D300000028;
  *((void *)v27 + 5) = v8;
  *uint64_t v27 = 48;
  AppendString(v26, (int *)v27);
  uint64_t v28 = *v27;
  uint64_t v29 = (v28 + 3) & 0xFFFFFFFC;
  bzero((char *)v27 + v28, v29 - v28);
  *uint64_t v27 = v29;
  uint64_t v30 = *(unsigned int **)(a1 + 8);
  unsigned int v31 = v30[8];
  v30[8] = v31 | 4;
  unint64_t v32 = *v30;
  if ((v31 & 0x1000) != 0)
  {
    uint64_t v33 = *v30;
    uint64_t v34 = v30;
    do
    {
      uint64_t v34 = (unsigned int *)((char *)v34 + v33);
      uint64_t v33 = *v34;
      v32 += v33;
    }
    while ((*((unsigned char *)v34 + 33) & 0x20) == 0);
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v30, v32);
  if (a3)
  {
    char v35 = atomic_load((unint64_t *)(a3 + 56));
    int v36 = v35 & 3;
  }
  else
  {
    int v36 = 0;
  }
  uint64_t v37 = *(void *)(a1 + 8);
  *(void *)(v37 + 16) = 0;
  *(void *)(v37 + 24) = 0;
  *(void *)(v37 + 8) = 0;
  *(void *)(v37 + 32) = 0x69754300000006;
  *(void *)uint64_t v37 = 0xFFFFD82D00000028;
  *(void *)(v37 + 40) = v8;
  *(_DWORD *)(v37 + 48) = v36;
  *(_DWORD *)uint64_t v37 = 52;
  uint64_t v38 = *(unsigned int **)(a1 + 8);
  unsigned int v39 = v38[8];
  v38[8] = v39 | 4;
  unint64_t v40 = *v38;
  if ((v39 & 0x1000) != 0)
  {
    uint64_t v41 = *v38;
    uint64_t v42 = v38;
    do
    {
      uint64_t v42 = (unsigned int *)((char *)v42 + v41);
      uint64_t v41 = *v42;
      v40 += v41;
    }
    while ((*((unsigned char *)v42 + 33) & 0x20) == 0);
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v38, v40);
  if (a3
    && (uint64_t v43 = *(void *)(a1 + 32),
        unint64_t v44 = atomic_load((unint64_t *)(a3 + 56)),
        (unint64_t v45 = v44 & 0xFFFFFFFFFFFFFFE0) != 0))
  {
    unint64_t v46 = *(void *)(v43 + 440);
    BOOL v47 = v46 >= v45;
    unint64_t v48 = v46 - v45;
    if (v48 != 0 && v47) {
      unint64_t v49 = v48 * *(unsigned int *)(v43 + 448) / *(unsigned int *)(v43 + 452);
    }
    else {
      unint64_t v49 = 0;
    }
  }
  else
  {
    unint64_t v49 = -1;
  }
  uint64_t v50 = *(void **)(a1 + 8);
  v50[2] = 0;
  v50[3] = 0;
  v50[1] = 0;
  v50[4] = 0x77754300000004;
  *uint64_t v50 = 0xFFFFD84300000028;
  v50[5] = v8;
  v50[6] = v49;
  *(_DWORD *)uint64_t v50 = 56;
  int32x2_t v51 = *(unsigned int **)(a1 + 8);
  unsigned int v52 = v51[8];
  v51[8] = v52 | 4;
  uint64_t v53 = *(void *)(a1 + 24);
  unint64_t v54 = *v51;
  if ((v52 & 0x1000) != 0)
  {
    uint64_t v55 = *v51;
    unint64_t v56 = v51;
    do
    {
      unint64_t v56 = (unsigned int *)((char *)v56 + v55);
      uint64_t v55 = *v56;
      v54 += v55;
    }
    while ((*((unsigned char *)v56 + 33) & 0x20) == 0);
  }

  fbstream_write(v53, (uint64_t)v51, v54);
}

void WriteGLPluginDataFunction(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, const void *a6, apr_pool_t **a7)
{
  if (a4)
  {
    if (a6)
    {
      uint64_t v8 = *(unsigned int *)(a3 + 876);
      if ((int)v8 >= 1)
      {
        for (uint64_t i = *(uint64_t **)(a3 + 888); ; ++i)
        {
          uint64_t v14 = *i;
          uint64_t v15 = *i ? *(void *)(v14 + 8) : 0;
          if (v15 == a4) {
            break;
          }
          if (!--v8) {
            return;
          }
        }
        if (*(unsigned char *)(v14 + 132))
        {
          uint64_t v16 = *(void *)(a2 + 16);
          unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(*(void *)(a2 + 8) + 80), 1uLL);
          uint64_t v18 = (unsigned int *)a1[1];
          *(void *)__s = *a1;
          *(void *)&char __s[8] = "library";
          long long v71 = add;
          DYTraceEncode_EnterStateGroup((uint64_t)__s, v18, *((unsigned int *)a1 + 4), a4, 0);
          int v19 = (unsigned int *)a1[1];
          uint64_t v20 = *v19;
          if ((*((unsigned char *)v19 + 33) & 0x10) != 0)
          {
            unsigned int v22 = (unsigned int *)a1[1];
            unint64_t v21 = *v19;
            do
            {
              unsigned int v22 = (unsigned int *)((char *)v22 + v20);
              uint64_t v20 = *v22;
              v21 += v20;
            }
            while ((*((unsigned char *)v22 + 33) & 0x20) == 0);
          }
          else
          {
            unint64_t v21 = *v19;
          }
          fbstream_write(a1[3], (uint64_t)v19, v21);
          uint64_t v23 = a1[4];
          HashBytes(a5, (unint64_t)a6, __s);
          GTMTLCaptureState_storePointer(v23, __s, a5, a6);
          v68[2] = v72;
          v68[3] = v73;
          char v69 = v74;
          v68[0] = *(_OWORD *)__s;
          v68[1] = v71;
          unint64_t v24 = (unsigned int *)a1[1];
          v66[0] = *a1;
          v66[1] = add;
          v66[2] = v68;
          v66[3] = 0;
          DYTraceEncode_MTLDevice_newLibraryWithData_error((uint64_t)v66, v24, *((unsigned int *)a1 + 4), 0, 0);
          uint64_t v25 = (unsigned int *)a1[1];
          unsigned int v26 = v25[8];
          v25[8] = v26 | 0x80000;
          unint64_t v27 = *v25;
          if ((v26 & 0x1000) != 0)
          {
            uint64_t v28 = *v25;
            uint64_t v29 = v25;
            do
            {
              uint64_t v29 = (unsigned int *)((char *)v29 + v28);
              uint64_t v28 = *v29;
              v27 += v28;
            }
            while ((*((unsigned char *)v29 + 33) & 0x20) == 0);
          }
          fbstream_write(a1[3], (uint64_t)v25, v27);
          uint64_t v30 = (unsigned int *)a1[1];
          *(void *)__s = *a1;
          *(void *)&char __s[8] = "functions";
          long long v71 = 0uLL;
          DYTraceEncode_EnterStateGroup((uint64_t)__s, v30, *((unsigned int *)a1 + 4), v31, 0);
          unint64_t v32 = (unsigned int *)a1[1];
          uint64_t v33 = *v32;
          if ((*((unsigned char *)v32 + 33) & 0x10) != 0)
          {
            char v35 = (unsigned int *)a1[1];
            unint64_t v34 = *v32;
            do
            {
              char v35 = (unsigned int *)((char *)v35 + v33);
              uint64_t v33 = *v35;
              v34 += v33;
            }
            while ((*((unsigned char *)v35 + 33) & 0x20) == 0);
          }
          else
          {
            unint64_t v34 = *v32;
          }
          fbstream_write(a1[3], (uint64_t)v32, v34);
          int v36 = (unsigned int *)a1[1];
          *(void *)__s = *a1;
          *(void *)&char __s[8] = "function";
          long long v71 = (unint64_t)a4;
          DYTraceEncode_EnterStateGroup((uint64_t)__s, v36, *((unsigned int *)a1 + 4), v37, 0);
          uint64_t v38 = (unsigned int *)a1[1];
          uint64_t v39 = *v38;
          if ((*((unsigned char *)v38 + 33) & 0x10) != 0)
          {
            uint64_t v41 = (unsigned int *)a1[1];
            unint64_t v40 = *v38;
            do
            {
              uint64_t v41 = (unsigned int *)((char *)v41 + v39);
              uint64_t v39 = *v41;
              v40 += v39;
            }
            while ((*((unsigned char *)v41 + 33) & 0x20) == 0);
          }
          else
          {
            unint64_t v40 = *v38;
          }
          fbstream_write(a1[3], (uint64_t)v38, v40);
          *(void *)__s = add;
          uint64_t v67 = a4;
          *(void *)&char __s[8] = *(void *)(*(void *)(*find_entry(v16, &v67, 8uLL, 0) + 32) + 8);
          *(void *)&long long v71 = "__main";
          DYTraceEncode_MTLLibrary_newFunctionWithName((uint64_t)__s, (unsigned int *)a1[1], *((unsigned int *)a1 + 4), 0, 0);
          uint64_t v42 = (unsigned int *)a1[1];
          unsigned int v43 = v42[8];
          v42[8] = v43 | 0x80000;
          unint64_t v44 = *v42;
          if ((v43 & 0x1000) != 0)
          {
            uint64_t v45 = *v42;
            unint64_t v46 = v42;
            do
            {
              unint64_t v46 = (unsigned int *)((char *)v46 + v45);
              uint64_t v45 = *v46;
              v44 += v45;
            }
            while ((*((unsigned char *)v46 + 33) & 0x20) == 0);
          }
          fbstream_write(a1[3], (uint64_t)v42, v44);
          uint64_t v47 = *a1;
          uint64_t v48 = a1[1];
          *(void *)(v48 + 16) = 0;
          *(void *)(v48 + 24) = 0;
          *(void *)(v48 + 8) = 0;
          *(_DWORD *)(v48 + 32) = 70;
          *(_DWORD *)(v48 + 36) = 67;
          *(void *)uint64_t v48 = 0xFFFFD00800000028;
          *(void *)(v48 + 40) = v47;
          *(_DWORD *)uint64_t v48 = 48;
          unint64_t v49 = (unsigned int *)a1[1];
          uint64_t v50 = *v49;
          if ((*((unsigned char *)v49 + 33) & 0x10) != 0)
          {
            unsigned int v52 = (unsigned int *)a1[1];
            unint64_t v51 = *v49;
            do
            {
              unsigned int v52 = (unsigned int *)((char *)v52 + v50);
              uint64_t v50 = *v52;
              v51 += v50;
            }
            while ((*((unsigned char *)v52 + 33) & 0x20) == 0);
          }
          else
          {
            unint64_t v51 = *v49;
          }
          fbstream_write(a1[3], (uint64_t)v49, v51);
          uint64_t v53 = *a1;
          uint64_t v54 = a1[1];
          *(void *)(v54 + 16) = 0;
          *(void *)(v54 + 24) = 0;
          *(void *)(v54 + 8) = 0;
          *(_DWORD *)(v54 + 32) = 70;
          *(_DWORD *)(v54 + 36) = 67;
          *(void *)uint64_t v54 = 0xFFFFD00800000028;
          *(void *)(v54 + 40) = v53;
          *(_DWORD *)uint64_t v54 = 48;
          uint64_t v55 = (unsigned int *)a1[1];
          uint64_t v56 = *v55;
          if ((*((unsigned char *)v55 + 33) & 0x10) != 0)
          {
            unint64_t v58 = (unsigned int *)a1[1];
            unint64_t v57 = *v55;
            do
            {
              unint64_t v58 = (unsigned int *)((char *)v58 + v56);
              uint64_t v56 = *v58;
              v57 += v56;
            }
            while ((*((unsigned char *)v58 + 33) & 0x20) == 0);
          }
          else
          {
            unint64_t v57 = *v55;
          }
          fbstream_write(a1[3], (uint64_t)v55, v57);
          uint64_t v59 = *a1;
          uint64_t v60 = a1[1];
          *(void *)(v60 + 16) = 0;
          *(void *)(v60 + 24) = 0;
          *(void *)(v60 + 8) = 0;
          *(_DWORD *)(v60 + 32) = 70;
          *(_DWORD *)(v60 + 36) = 67;
          *(void *)uint64_t v60 = 0xFFFFD00800000028;
          *(void *)(v60 + 40) = v59;
          *(_DWORD *)uint64_t v60 = 48;
          uint64_t v61 = (unsigned int *)a1[1];
          uint64_t v62 = *v61;
          if ((*((unsigned char *)v61 + 33) & 0x10) != 0)
          {
            uint64_t v64 = (unsigned int *)a1[1];
            unint64_t v63 = *v61;
            do
            {
              uint64_t v64 = (unsigned int *)((char *)v64 + v62);
              uint64_t v62 = *v64;
              v63 += v62;
            }
            while ((*((unsigned char *)v64 + 33) & 0x20) == 0);
          }
          else
          {
            unint64_t v63 = *v61;
          }
          fbstream_write(a1[3], (uint64_t)v61, v63);
          uint64_t v65 = apr_palloc(*a7, 8uLL);
          *uint64_t v65 = a4;
          apr_hash_set((apr_hash_t *)a7, v65, 8, (char *)&def_CFBEC + 1);
        }
      }
    }
  }
}

void WriteGTMTLSMFunction(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a2) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v38 = v8;
  uint64_t v9 = *(const char **)(*(void *)(*find_entry(a4, &v38, 8uLL, 0) + 32) + 8);
  uint64_t v10 = *(unsigned int **)(a1 + 8);
  uint64_t v38 = *(void *)a1;
  uint64_t v39 = "function";
  uint64_t v40 = (uint64_t)v9;
  uint64_t v41 = 0;
  DYTraceEncode_EnterStateGroup((uint64_t)&v38, v10, *(unsigned int *)(a1 + 16), v11, 0);
  uint64_t v12 = *(unsigned int **)(a1 + 8);
  uint64_t v13 = *v12;
  if ((*((unsigned char *)v12 + 33) & 0x10) != 0)
  {
    uint64_t v15 = *(unsigned int **)(a1 + 8);
    unint64_t v14 = *v12;
    do
    {
      uint64_t v15 = (unsigned int *)((char *)v15 + v13);
      uint64_t v13 = *v15;
      v14 += v13;
    }
    while ((*((unsigned char *)v15 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v14 = *v12;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v12, v14);
  if (*(void *)(a2 + 72))
  {
    if (*(void *)(a2 + 48))
    {
      uint64_t v38 = *(void *)(a2 + 40);
      uint64_t v38 = *(void *)(*(void *)(*find_entry(a4, &v38, 8uLL, 0) + 32) + 8);
      uint64_t v39 = v9;
      uint64_t v16 = *(void *)(a2 + 48);
      uint64_t v40 = *(void *)(a2 + 56);
      unint64_t v17 = *(uint64_t **)(a2 + 72);
      uint64_t v44 = v16;
      uint64_t v42 = *(void *)(*(void *)(*find_entry(a4, &v44, 8uLL, 0) + 32) + 8);
      uint64_t v43 = 0;
      uint64_t v18 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512;
      uint64_t v44 = 512;
      uint64_t v41 = StoreMTLFunctionConstantValuesUsingEncode(*(void *)(a1 + 32), v17, v18, &v44);
      DYTraceEncode_MTLLibrary_newFunctionWithName_constantValues_pipelineLibrary_error((uint64_t)&v38, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
    }
    else
    {
      uint64_t v38 = *(void *)(a2 + 40);
      uint64_t v38 = *(void *)(*(void *)(*find_entry(a4, &v38, 8uLL, 0) + 32) + 8);
      uint64_t v39 = v9;
      int v19 = *(uint64_t **)(a2 + 72);
      uint64_t v40 = *(void *)(a2 + 56);
      uint64_t v42 = 0;
      uint64_t v20 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512;
      uint64_t v44 = 512;
      uint64_t v41 = StoreMTLFunctionConstantValuesUsingEncode(*(void *)(a1 + 32), v19, v20, &v44);
      DYTraceEncode_MTLLibrary_newFunctionWithName_constantValues_error((uint64_t)&v38, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
    }
  }
  else if (*(unsigned char *)(a2 + 131))
  {
    uint64_t v38 = *(void *)(a2 + 40);
    uint64_t v38 = *(void *)(*(void *)(*find_entry(a4, &v38, 8uLL, 0) + 32) + 8);
    uint64_t v39 = v9;
    uint64_t v40 = *(void *)(a2 + 56);
    DYTraceEncode_MTLLibrary_newExternFunctionWithName((uint64_t)&v38, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
  }
  else if (*(void *)(a2 + 120))
  {
    uint64_t v38 = *(void *)(a2 + 40);
    uint64_t v38 = *(void *)(*(void *)(*find_entry(a4, &v38, 8uLL, 0) + 32) + 8);
    uint64_t v39 = v9;
    uint64_t v21 = *(void *)(a2 + 120);
    uint64_t v41 = 0;
    uint64_t v22 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512;
    uint64_t v44 = 512;
    uint64_t v40 = StoreMTLIntersectionFunctionDescriptorUsingEncode(*(void *)(a1 + 32), v21, v22, &v44);
    DYTraceEncode_MTLLibrary_newIntersectionFunctionWithDescriptor_error((uint64_t)&v38, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
  }
  else if (*(unsigned char *)(a2 + 132))
  {
    uint64_t v29 = *(void *)(a2 + 88);
    if (v29)
    {
      int v30 = *(_DWORD *)(a2 + 4);
      if ((v30 + 15428) < 2)
      {
        uint64_t v35 = *(void *)(a1 + 8);
        uint64_t v38 = *(void *)a1;
        uint64_t v39 = v9;
        uint64_t v36 = *(void *)(a2 + 96);
        uint64_t v40 = v29;
        uint64_t v41 = v36;
        uint64_t v42 = *(unsigned __int16 *)(a2 + 128);
        GTTrace_storePointer(a1, -15427, (uint64_t)&v38, (char *)(v35 + *(unsigned int *)(a1 + 16) - 512), 512, a4);
        DYTraceEncode_MTLDevice_newFunctionWithGLESIR_inputsDescription_functionType((uint64_t)&v38, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
      }
      else
      {
        uint64_t v31 = *(void *)(a1 + 8);
        uint64_t v38 = *(void *)a1;
        uint64_t v39 = v9;
        if ((v30 + 15430) > 1)
        {
          uint64_t v37 = *(void *)(a2 + 96);
          uint64_t v40 = v29;
          uint64_t v41 = v37;
          uint64_t v42 = *(unsigned __int16 *)(a2 + 128);
          GTTrace_storePointer(a1, -15730, (uint64_t)&v38, (char *)(v31 + *(unsigned int *)(a1 + 16) - 512), 512, a4);
          DYTraceEncode_MTLDevice_newFunctionWithGLIR_inputsDescription_functionType((uint64_t)&v38, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
        }
        else
        {
          uint64_t v32 = *(void *)(a2 + 96);
          uint64_t v40 = v29;
          uint64_t v41 = v32;
          uint64_t v42 = *(unsigned __int16 *)(a2 + 128);
          GTTrace_storePointer(a1, -15429, (uint64_t)&v38, (char *)(v31 + *(unsigned int *)(a1 + 16) - 512), 512, a4);
          DYTraceEncode_MTLDevice_newFunctionWithGLCoreIR_inputsDescription_functionType((uint64_t)&v38, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
        }
      }
    }
    if (*(void *)(a2 + 104))
    {
      uint64_t v38 = *(void *)(a2 + 40);
      uint64_t v38 = *(void *)(*(void *)(*find_entry(a4, &v38, 8uLL, 0) + 32) + 8);
      uint64_t v39 = v9;
      uint64_t v40 = *(void *)(a2 + 104);
      LOBYTE(v41) = *(unsigned char *)(a2 + 130);
      *(_DWORD *)((char *)&v41 + 1) = 0;
      HIDWORD(v41) = 0;
      GTTrace_storePointer(a1, -15830, (uint64_t)&v38, (char *)(*(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512), 512, a4);
      DYTraceEncode_MTLFunction_newFunctionWithPluginData_bitcodeType((uint64_t)&v38, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
    }
  }
  else if (*(void *)(a2 + 112))
  {
    uint64_t v38 = *(void *)(a2 + 40);
    uint64_t v38 = *(void *)(*(void *)(*find_entry(a4, &v38, 8uLL, 0) + 32) + 8);
    uint64_t v39 = v9;
    uint64_t v33 = *(void *)(a2 + 112);
    uint64_t v41 = 0;
    uint64_t v34 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512;
    uint64_t v44 = 512;
    uint64_t v40 = StoreMTLFunctionDescriptorUsingEncode(*(void *)(a1 + 32), v33, v34, &v44, a4);
    DYTraceEncode_MTLLibrary_newFunctionWithDescriptor_error((uint64_t)&v38, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
  }
  else
  {
    uint64_t v38 = *(void *)(a2 + 40);
    uint64_t v38 = *(void *)(*(void *)(*find_entry(a4, &v38, 8uLL, 0) + 32) + 8);
    uint64_t v39 = v9;
    uint64_t v40 = *(void *)(a2 + 56);
    DYTraceEncode_MTLLibrary_newFunctionWithName((uint64_t)&v38, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
  }
  FlushChainedFunctionInfo(a1, a2, a4, a3);
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  *(void *)(v24 + 16) = 0;
  *(void *)(v24 + 24) = 0;
  *(void *)(v24 + 8) = 0;
  *(_DWORD *)(v24 + 32) = 70;
  *(_DWORD *)(v24 + 36) = 67;
  *(void *)uint64_t v24 = 0xFFFFD00800000028;
  *(void *)(v24 + 40) = v23;
  *(_DWORD *)uint64_t v24 = 48;
  uint64_t v25 = *(unsigned int **)(a1 + 8);
  uint64_t v26 = *v25;
  if ((*((unsigned char *)v25 + 33) & 0x10) != 0)
  {
    uint64_t v28 = *(unsigned int **)(a1 + 8);
    unint64_t v27 = *v25;
    do
    {
      uint64_t v28 = (unsigned int *)((char *)v28 + v26);
      uint64_t v26 = *v28;
      v27 += v26;
    }
    while ((*((unsigned char *)v28 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v27 = *v25;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v25, v27);
}

void WriteGTMTLSMLibrary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 520);
  uint64_t v7 = *(void *)(a2 + 16);
  if (IsAppleInternalLabel(*(void *)(a3 + 112))) {
    int v8 = 0x80000;
  }
  else {
    int v8 = 0;
  }
  uint64_t v101 = *(void *)(a3 + 8);
  uint64_t v9 = *(void *)(*find_entry(v7, &v101, 8uLL, 0) + 32);
  uint64_t v10 = *(const char **)(v9 + 8);
  uint64_t v11 = *(unsigned int **)(a1 + 8);
  uint64_t v101 = *(void *)a1;
  unint64_t v102 = "library";
  uint64_t v103 = (uint64_t)v10;
  uint64_t v104 = 0;
  DYTraceEncode_EnterStateGroup((uint64_t)&v101, v11, *(unsigned int *)(a1 + 16), v12, 0);
  uint64_t v13 = *(unsigned int **)(a1 + 8);
  uint64_t v14 = *v13;
  if ((*((unsigned char *)v13 + 33) & 0x10) != 0)
  {
    uint64_t v16 = *(unsigned int **)(a1 + 8);
    unint64_t v15 = *v13;
    do
    {
      uint64_t v16 = (unsigned int *)((char *)v16 + v14);
      uint64_t v14 = *v16;
      v15 += v14;
    }
    while ((*((unsigned char *)v16 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v15 = *v13;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v13, v15);
  switch(*(unsigned char *)(a3 + 161))
  {
    case 0:
      v108[0] = *(void *)a1;
      v108[1] = v10;
      uint64_t v19 = *(void *)(a1 + 32);
      uint64_t v20 = *(char **)(a3 + 96);
      if (*(void *)(a2 + 584))
      {
        CopyFilePath(v19, a2, *(char **)(a3 + 96));
      }
      else
      {
        uint64_t v39 = __chkstk_darwin(v19, v18);
        char v100 = 0;
        long long v98 = 0u;
        long long v99 = 0u;
        long long v96 = 0u;
        long long v97 = 0u;
        uint64_t v20 = SaveFileWithURL(v39, v20, (char *)&v96, 0, 1);
      }
      v108[2] = v20;
      v108[3] = 0;
      uint64_t v25 = *(unsigned int **)(a1 + 8);
      unint64_t v26 = *(unsigned int *)(a1 + 16);
      unint64_t v27 = v108;
      goto LABEL_32;
    case 1:
      v107[0] = *(void *)a1;
      v107[1] = v10;
      uint64_t v21 = *(void *)(a1 + 32);
      uint64_t v22 = *(char **)(a3 + 96);
      if (*(void *)(a2 + 584))
      {
        CopyFilePath(v21, a2, *(char **)(a3 + 96));
      }
      else
      {
        uint64_t v40 = __chkstk_darwin(v21, v18);
        char v100 = 0;
        long long v98 = 0u;
        long long v99 = 0u;
        long long v96 = 0u;
        long long v97 = 0u;
        uint64_t v22 = SaveFileWithURL(v40, v22, (char *)&v96, 0, 1);
      }
      v107[2] = v22;
      v107[3] = 0;
      uint64_t v25 = *(unsigned int **)(a1 + 8);
      unint64_t v26 = *(unsigned int *)(a1 + 16);
      unint64_t v27 = v107;
      goto LABEL_32;
    case 2:
      if (!EncodeDebugLibraryWithSource(a1, a3, v9, v7))
      {
        uint64_t v101 = *(void *)a1;
        unint64_t v102 = v10;
        uint64_t v23 = *(void *)(a3 + 96);
        if (*(unsigned char *)(a2 + 488)) {
          CopyFilePath(*(void *)(a1 + 32), a2, *(char **)(a3 + 96));
        }
        uint64_t v83 = *(void *)(a3 + 104);
        uint64_t v103 = v23;
        uint64_t v104 = v83;
        uint64_t v105 = 0;
        GTTrace_storePointer(a1, -16305, (uint64_t)&v101, (char *)(*(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512), 512, v7);
        DYTraceEncode_MTLDevice_newLibraryWithSource_options_error((uint64_t)&v101, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
      }
      goto LABEL_33;
    case 3:
      if (EncodeDebugLibraryWithData(a1, a3, v9)) {
        goto LABEL_33;
      }
      uint64_t v24 = *(void *)(a1 + 8);
      uint64_t v101 = *(void *)a1;
      unint64_t v102 = v10;
      uint64_t v103 = *(void *)(a3 + 96);
      uint64_t v104 = 0;
      GTTrace_storePointer(a1, -16306, (uint64_t)&v101, (char *)(v24 + *(unsigned int *)(a1 + 16) - 512), 512, v7);
      uint64_t v25 = *(unsigned int **)(a1 + 8);
      unint64_t v26 = *(unsigned int *)(a1 + 16);
      unint64_t v27 = &v101;
LABEL_32:
      DYTraceEncode_MTLDevice_newLibraryWithData_error((uint64_t)v27, v25, v26, 0, 0);
      goto LABEL_33;
    case 5:
      uint64_t v101 = *(void *)a1;
      unint64_t v102 = v10;
      uint64_t v28 = *(unsigned int *)(a3 + 152);
      __chkstk_darwin(v17, 8 * v28);
      int v30 = (char *)&v101 - ((v29 + 15) & 0xFFFFFFFF0);
      bzero(v30, v29);
      name_array_11364(v7, v30, *(uint64_t **)(a3 + 48), v28);
      uint64_t v31 = *(unsigned int *)(a3 + 152);
      uint64_t v103 = (uint64_t)v30;
      uint64_t v104 = v31;
      uint64_t v32 = *(void *)(a3 + 56);
      uint64_t v106 = 0;
      uint64_t v33 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512;
      uint64_t v109 = 512;
      uint64_t v105 = StoreMTLImageFilterFunctionInfoSPIUsingEncode(*(void *)(a1 + 32), v32, v33, &v109, v31);
      DYTraceEncode_MTLDevice_newLibraryWithImageFilterFunctionsSPI_imageFilterFunctionInfo_error((uint64_t)&v101, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
      goto LABEL_33;
    case 6:
      int v34 = *(_DWORD *)(a3 + 4);
      if (v34 > -15422)
      {
        if (v34 == -15421 || v34 == -15420)
        {
          uint64_t v80 = *(void *)(a1 + 8);
          uint64_t v101 = *(void *)a1;
          unint64_t v102 = v10;
          unint64_t v81 = *(uint64_t **)(a3 + 72);
          uint64_t v104 = 0;
          uint64_t v82 = v80 + *(unsigned int *)(a1 + 16) - 512;
          uint64_t v109 = 512;
          uint64_t v103 = StoreMTLStitchedLibraryDescriptorUsingEncode(*(void *)(a1 + 32), v81, v82, &v109, v7);
          DYTraceEncode_MTLDevice_newLibraryWithStitchedDescriptor_error((uint64_t)&v101, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
          goto LABEL_33;
        }
        int v35 = -15419;
LABEL_26:
        if (v34 == v35)
        {
          uint64_t v36 = *(void *)(a1 + 8);
          uint64_t v101 = *(void *)a1;
          unint64_t v102 = v10;
          uint64_t v37 = *(uint64_t **)(a3 + 72);
          uint64_t v104 = 0;
          uint64_t v38 = v36 + *(unsigned int *)(a1 + 16) - 512;
          uint64_t v109 = 512;
          uint64_t v103 = StoreMTLStitchedLibraryDescriptorUsingEncode(*(void *)(a1 + 32), v37, v38, &v109, v7);
          DYTraceEncode_MTLDevice_newLibraryWithDescriptorSPI_error((uint64_t)&v101, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
        }
        goto LABEL_33;
      }
      if (v34 != -15693)
      {
        if (v34 == -15435)
        {
          uint64_t v93 = *(void *)(a1 + 8);
          uint64_t v101 = *(void *)a1;
          unint64_t v102 = v10;
          uint64_t v94 = *(uint64_t **)(a3 + 72);
          uint64_t v104 = 0;
          uint64_t v95 = v93 + *(unsigned int *)(a1 + 16) - 512;
          uint64_t v109 = 512;
          uint64_t v103 = StoreMTLStitchedLibraryDescriptorUsingEncode(*(void *)(a1 + 32), v94, v95, &v109, v7);
          DYTraceEncode_MTLDevice_newLibraryWithDescriptor_error((uint64_t)&v101, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
          goto LABEL_33;
        }
        int v35 = -15434;
        goto LABEL_26;
      }
      unint64_t v84 = *(unsigned int *)(a3 + 156);
      __chkstk_darwin(v17, 8 * (v84 + 1));
      uint64_t v86 = (unint64_t *)((char *)&v101 - v85);
      bzero((char *)&v101 - v85, v87);
      *uint64_t v86 = v84;
      if (v84)
      {
        uint64_t v88 = *(uint64_t **)(a3 + 88);
        unint64_t v89 = v86 + 1;
        do
        {
          uint64_t v90 = *v88++;
          *v89++ = v90;
          --v84;
        }
        while (v84);
      }
      uint64_t v91 = *(void *)(a1 + 8);
      uint64_t v101 = *(void *)a1;
      unint64_t v102 = v10;
      uint64_t v103 = *(void *)(a3 + 80);
      uint64_t v105 = 0;
      uint64_t v92 = v91 + *(unsigned int *)(a1 + 16) - 512;
      uint64_t v109 = 512;
      uint64_t v104 = UnwrapMTLArray_(*(void *)(a1 + 32), v86, v92, &v109, v7);
      DYTraceEncode_MTLDevice_newLibraryWithDAG_functions_error((uint64_t)&v101, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
LABEL_33:
      FlushChainedLibraryInfo((uint64_t *)a1, a3, v7, v8);
      if (*(void *)(a3 + 112)) {
        uint64_t v41 = *(const char **)(a3 + 112);
      }
      else {
        uint64_t v41 = "";
      }
      uint64_t v42 = *(unsigned int **)(a1 + 8);
      *((void *)v42 + 1) = 0;
      *((void *)v42 + 2) = 0;
      *((void *)v42 + 3) = 0;
      *((void *)v42 + 4) = 0x534300000000;
      *(void *)uint64_t v42 = 0xFFFFC05C00000028;
      *((void *)v42 + 5) = v10;
      unsigned int *v42 = 48;
      AppendString(v41, (int *)v42);
      uint64_t v43 = *v42;
      uint64_t v44 = (v43 + 3) & 0xFFFFFFFC;
      bzero((char *)v42 + v43, v44 - v43);
      unsigned int *v42 = v44;
      uint64_t v45 = *(unsigned int **)(a1 + 8);
      unsigned int v46 = v45[8];
      v45[8] = v46 | v8;
      unint64_t v47 = *v45;
      if ((v46 & 0x1000) != 0)
      {
        uint64_t v48 = *v45;
        unint64_t v49 = v45;
        do
        {
          unint64_t v49 = (unsigned int *)((char *)v49 + v48);
          uint64_t v48 = *v49;
          v47 += v48;
        }
        while ((*((unsigned char *)v49 + 33) & 0x20) == 0);
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v45, v47);
      uint64_t v50 = *(const char **)(a3 + 120);
      if (v50)
      {
        unint64_t v51 = *(unsigned int **)(a1 + 8);
        *((void *)v51 + 1) = 0;
        *((void *)v51 + 2) = 0;
        *((void *)v51 + 3) = 0;
        *((void *)v51 + 4) = 0x534300000000;
        *(void *)unint64_t v51 = 0xFFFFC12D00000028;
        *((void *)v51 + 5) = v10;
        *unint64_t v51 = 48;
        AppendString(v50, (int *)v51);
        uint64_t v52 = *v51;
        uint64_t v53 = (v52 + 3) & 0xFFFFFFFC;
        bzero((char *)v51 + v52, v53 - v52);
        *unint64_t v51 = v53;
        uint64_t v54 = *(unsigned int **)(a1 + 8);
        unsigned int v55 = v54[8];
        v54[8] = v55 | v8;
        unint64_t v56 = *v54;
        if ((v55 & 0x1000) != 0)
        {
          uint64_t v57 = *v54;
          unint64_t v58 = v54;
          do
          {
            unint64_t v58 = (unsigned int *)((char *)v58 + v57);
            uint64_t v57 = *v58;
            v56 += v57;
          }
          while ((*((unsigned char *)v58 + 33) & 0x20) == 0);
        }
        fbstream_write(*(void *)(a1 + 24), (uint64_t)v54, v56);
      }
      uint64_t v101 = *(void *)(a3 + 8);
      entry = find_entry(v6, &v101, 8uLL, 0);
      if (*entry) {
        uint64_t v61 = *(void *)(*entry + 32);
      }
      else {
        uint64_t v61 = 0;
      }
      uint64_t v62 = *(unsigned int **)(a1 + 8);
      uint64_t v101 = *(void *)a1;
      unint64_t v102 = "functions";
      uint64_t v103 = 0;
      uint64_t v104 = 0;
      DYTraceEncode_EnterStateGroup((uint64_t)&v101, v62, *(unsigned int *)(a1 + 16), v60, 0);
      unint64_t v63 = *(unsigned int **)(a1 + 8);
      uint64_t v64 = *v63;
      if ((*((unsigned char *)v63 + 33) & 0x10) != 0)
      {
        uint64_t v66 = *(unsigned int **)(a1 + 8);
        unint64_t v65 = *v63;
        do
        {
          uint64_t v66 = (unsigned int *)((char *)v66 + v64);
          uint64_t v64 = *v66;
          v65 += v64;
        }
        while ((*((unsigned char *)v66 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v65 = *v63;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v63, v65);
      if (v61 && *(int *)(v61 + 12) >= 1)
      {
        uint64_t v67 = 0;
        do
          WriteGTMTLSMFunction(a1, *(void *)(*(void *)(v61 + 24) + 8 * v67++), v8, v7);
        while (v67 < *(int *)(v61 + 12));
      }
      uint64_t v68 = *(void *)a1;
      uint64_t v69 = *(void *)(a1 + 8);
      *(void *)(v69 + 16) = 0;
      *(void *)(v69 + 24) = 0;
      *(void *)(v69 + 8) = 0;
      *(_DWORD *)(v69 + 32) = 70;
      *(_DWORD *)(v69 + 36) = 67;
      *(void *)uint64_t v69 = 0xFFFFD00800000028;
      *(void *)(v69 + 40) = v68;
      *(_DWORD *)uint64_t v69 = 48;
      uint64_t v70 = *(unsigned int **)(a1 + 8);
      uint64_t v71 = *v70;
      if ((*((unsigned char *)v70 + 33) & 0x10) != 0)
      {
        long long v73 = *(unsigned int **)(a1 + 8);
        unint64_t v72 = *v70;
        do
        {
          long long v73 = (unsigned int *)((char *)v73 + v71);
          uint64_t v71 = *v73;
          v72 += v71;
        }
        while ((*((unsigned char *)v73 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v72 = *v70;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v70, v72);
      uint64_t v74 = *(void *)a1;
      uint64_t v75 = *(void *)(a1 + 8);
      *(void *)(v75 + 16) = 0;
      *(void *)(v75 + 24) = 0;
      *(void *)(v75 + 8) = 0;
      *(_DWORD *)(v75 + 32) = 70;
      *(_DWORD *)(v75 + 36) = 67;
      *(void *)uint64_t v75 = 0xFFFFD00800000028;
      *(void *)(v75 + 40) = v74;
      *(_DWORD *)uint64_t v75 = 48;
      uint64_t v76 = *(unsigned int **)(a1 + 8);
      uint64_t v77 = *v76;
      if ((*((unsigned char *)v76 + 33) & 0x10) != 0)
      {
        uint64_t v79 = *(unsigned int **)(a1 + 8);
        unint64_t v78 = *v76;
        do
        {
          uint64_t v79 = (unsigned int *)((char *)v79 + v77);
          uint64_t v77 = *v79;
          v78 += v77;
        }
        while ((*((unsigned char *)v79 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v78 = *v76;
      }
      fbstream_write(*(void *)(a1 + 24), (uint64_t)v76, v78);
      return;
    default:
      goto LABEL_33;
  }
}

void WriteGTMTLSMDynamicLibrary(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  BOOL v8 = IsAppleInternalLabel(a3[8]);
  v41[0] = a3[1];
  uint64_t v9 = *(void *)(*(void *)(*find_entry(a4, v41, 8uLL, 0) + 32) + 8);
  uint64_t v10 = *(unsigned int **)(a1 + 8);
  v41[0] = *(void *)a1;
  v41[1] = "dynamic-library";
  v41[2] = v9;
  v41[3] = 0;
  DYTraceEncode_EnterStateGroup((uint64_t)v41, v10, *(unsigned int *)(a1 + 16), v11, 0);
  uint64_t v12 = *(unsigned int **)(a1 + 8);
  uint64_t v13 = *v12;
  if ((*((unsigned char *)v12 + 33) & 0x10) != 0)
  {
    unint64_t v15 = *(unsigned int **)(a1 + 8);
    unint64_t v14 = *v12;
    do
    {
      unint64_t v15 = (unsigned int *)((char *)v15 + v13);
      uint64_t v13 = *v15;
      v14 += v13;
    }
    while ((*((unsigned char *)v15 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v14 = *v12;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v12, v14);
  if (a3[6])
  {
    uint64_t v17 = *(void *)a1;
    v41[0] = a3[6];
    uint64_t v18 = *(void *)(*(void *)(*find_entry(a4, v41, 8uLL, 0) + 32) + 8);
    uint64_t v19 = *(void *)(a1 + 8);
    *(void *)(v19 + 8) = 0;
    *(void *)(v19 + 16) = 0;
    *(void *)(v19 + 24) = 0;
    *(void *)(v19 + 32) = 0x74744300000001;
    *(void *)uint64_t v19 = 0xFFFFC2B100000028;
    *(void *)(v19 + 40) = v17;
    *(void *)(v19 + 48) = v18;
    *(void *)(v19 + 56) = 0;
    *(_DWORD *)(v19 + 64) = 116;
    *(void *)(v19 + 68) = v9;
    *(_DWORD *)uint64_t v19 = 76;
  }
  else
  {
    uint64_t v20 = (char *)a3[10];
    if (v20)
    {
      v40[0] = *(void *)a1;
      v40[1] = v9;
      uint64_t v21 = *(void *)(a1 + 32);
      if (*(void *)(a2 + 584))
      {
        CopyFilePath(v21, a2, v20);
      }
      else
      {
        uint64_t v22 = __chkstk_darwin(v21, v16);
        memset(v39, 0, 65);
        uint64_t v20 = SaveFileWithURL(v22, v20, v39, 0, 1);
      }
      v40[2] = v20;
      v40[3] = 0;
      DYTraceEncode_MTLDevice_newDynamicLibraryWithURL_error((uint64_t)v40, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
    }
  }
  if (v8) {
    int v23 = 0x80000;
  }
  else {
    int v23 = 0;
  }
  FlushChainedDynamicLibraryInfo(a1, (uint64_t)a3, a4, v23);
  if (a3[8]) {
    uint64_t v24 = (const char *)a3[8];
  }
  else {
    uint64_t v24 = "";
  }
  uint64_t v25 = *(unsigned int **)(a1 + 8);
  *((void *)v25 + 1) = 0;
  *((void *)v25 + 2) = 0;
  *((void *)v25 + 3) = 0;
  *((void *)v25 + 4) = 0x534300000000;
  *(void *)uint64_t v25 = 0xFFFFC2C400000028;
  *((void *)v25 + 5) = v9;
  *uint64_t v25 = 48;
  AppendString(v24, (int *)v25);
  uint64_t v26 = *v25;
  uint64_t v27 = (v26 + 3) & 0xFFFFFFFC;
  bzero((char *)v25 + v26, v27 - v26);
  *uint64_t v25 = v27;
  uint64_t v28 = *(unsigned int **)(a1 + 8);
  unsigned int v29 = v28[8];
  v28[8] = v29 | v23;
  unint64_t v30 = *v28;
  if ((v29 & 0x1000) != 0)
  {
    uint64_t v31 = *v28;
    uint64_t v32 = v28;
    do
    {
      uint64_t v32 = (unsigned int *)((char *)v32 + v31);
      uint64_t v31 = *v32;
      v30 += v31;
    }
    while ((*((unsigned char *)v32 + 33) & 0x20) == 0);
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v28, v30);
  uint64_t v33 = *(void *)a1;
  uint64_t v34 = *(void *)(a1 + 8);
  *(void *)(v34 + 16) = 0;
  *(void *)(v34 + 24) = 0;
  *(void *)(v34 + 8) = 0;
  *(_DWORD *)(v34 + 32) = 70;
  *(_DWORD *)(v34 + 36) = 67;
  *(void *)uint64_t v34 = 0xFFFFD00800000028;
  *(void *)(v34 + 40) = v33;
  *(_DWORD *)uint64_t v34 = 48;
  int v35 = *(unsigned int **)(a1 + 8);
  uint64_t v36 = *v35;
  if ((*((unsigned char *)v35 + 33) & 0x10) != 0)
  {
    uint64_t v38 = *(unsigned int **)(a1 + 8);
    unint64_t v37 = *v35;
    do
    {
      uint64_t v38 = (unsigned int *)((char *)v38 + v36);
      uint64_t v36 = *v38;
      v37 += v36;
    }
    while ((*((unsigned char *)v38 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v37 = *v35;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v35, v37);
}

void WriteGTMTLSMFence(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (unsigned int *)a1[1];
  v33[0] = *a1;
  v33[1] = "fence";
  v33[2] = a3;
  v33[3] = 0;
  DYTraceEncode_EnterStateGroup((uint64_t)v33, v7, *((unsigned int *)a1 + 4), a4, 0);
  BOOL v8 = (unsigned int *)a1[1];
  uint64_t v9 = *v8;
  if ((*((unsigned char *)v8 + 33) & 0x10) != 0)
  {
    uint64_t v11 = (unsigned int *)a1[1];
    unint64_t v10 = *v8;
    do
    {
      uint64_t v11 = (unsigned int *)((char *)v11 + v9);
      uint64_t v9 = *v11;
      v10 += v9;
    }
    while ((*((unsigned char *)v11 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v10 = *v8;
  }
  fbstream_write(a1[3], (uint64_t)v8, v10);
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = 0;
  *(void *)(v13 + 8) = 0;
  *(_DWORD *)(v13 + 32) = 1;
  *(_DWORD *)(v13 + 36) = 67;
  *(void *)uint64_t v13 = 0xFFFFC10000000028;
  *(void *)(v13 + 40) = v12;
  *(_DWORD *)(v13 + 48) = 116;
  *(void *)(v13 + 52) = a3;
  *(_DWORD *)uint64_t v13 = 60;
  unint64_t v14 = (unsigned int *)a1[1];
  uint64_t v15 = *v14;
  if ((*((unsigned char *)v14 + 33) & 0x10) != 0)
  {
    uint64_t v17 = (unsigned int *)a1[1];
    unint64_t v16 = *v14;
    do
    {
      uint64_t v17 = (unsigned int *)((char *)v17 + v15);
      uint64_t v15 = *v17;
      v16 += v15;
    }
    while ((*((unsigned char *)v17 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v16 = *v14;
  }
  fbstream_write(a1[3], (uint64_t)v14, v16);
  if (*(void *)(a2 + 48)) {
    uint64_t v18 = *(const char **)(a2 + 48);
  }
  else {
    uint64_t v18 = "";
  }
  uint64_t v19 = (unsigned int *)a1[1];
  *((void *)v19 + 1) = 0;
  *((void *)v19 + 2) = 0;
  *((void *)v19 + 3) = 0;
  *((void *)v19 + 4) = 0x534300000000;
  *(void *)uint64_t v19 = 0xFFFFC0F800000028;
  *((void *)v19 + 5) = a3;
  *uint64_t v19 = 48;
  AppendString(v18, (int *)v19);
  uint64_t v20 = *v19;
  uint64_t v21 = (v20 + 3) & 0xFFFFFFFC;
  bzero((char *)v19 + v20, v21 - v20);
  *uint64_t v19 = v21;
  uint64_t v22 = (unsigned int *)a1[1];
  uint64_t v23 = *v22;
  if ((*((unsigned char *)v22 + 33) & 0x10) != 0)
  {
    uint64_t v25 = (unsigned int *)a1[1];
    unint64_t v24 = *v22;
    do
    {
      uint64_t v25 = (unsigned int *)((char *)v25 + v23);
      uint64_t v23 = *v25;
      v24 += v23;
    }
    while ((*((unsigned char *)v25 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v24 = *v22;
  }
  fbstream_write(a1[3], (uint64_t)v22, v24);
  uint64_t v26 = *a1;
  uint64_t v27 = a1[1];
  *(void *)(v27 + 16) = 0;
  *(void *)(v27 + 24) = 0;
  *(void *)(v27 + 8) = 0;
  *(_DWORD *)(v27 + 32) = 70;
  *(_DWORD *)(v27 + 36) = 67;
  *(void *)uint64_t v27 = 0xFFFFD00800000028;
  *(void *)(v27 + 40) = v26;
  *(_DWORD *)uint64_t v27 = 48;
  uint64_t v28 = a1[3];
  unsigned int v29 = (unsigned int *)a1[1];
  uint64_t v30 = *v29;
  if ((*((unsigned char *)v29 + 33) & 0x10) != 0)
  {
    uint64_t v32 = (unsigned int *)a1[1];
    unint64_t v31 = *v29;
    do
    {
      uint64_t v32 = (unsigned int *)((char *)v32 + v30);
      uint64_t v30 = *v32;
      v31 += v30;
    }
    while ((*((unsigned char *)v32 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v31 = *v29;
  }

  fbstream_write(v28, (uint64_t)v29, v31);
}

void WriteGTMTLSMEvent(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (unsigned int *)a1[1];
  v33[0] = *a1;
  v33[1] = "event";
  v33[2] = a3;
  v33[3] = 0;
  DYTraceEncode_EnterStateGroup((uint64_t)v33, v7, *((unsigned int *)a1 + 4), a4, 0);
  BOOL v8 = (unsigned int *)a1[1];
  uint64_t v9 = *v8;
  if ((*((unsigned char *)v8 + 33) & 0x10) != 0)
  {
    uint64_t v11 = (unsigned int *)a1[1];
    unint64_t v10 = *v8;
    do
    {
      uint64_t v11 = (unsigned int *)((char *)v11 + v9);
      uint64_t v9 = *v11;
      v10 += v9;
    }
    while ((*((unsigned char *)v11 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v10 = *v8;
  }
  fbstream_write(a1[3], (uint64_t)v8, v10);
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = 0;
  *(void *)(v13 + 8) = 0;
  *(_DWORD *)(v13 + 32) = 1;
  *(_DWORD *)(v13 + 36) = 67;
  *(void *)uint64_t v13 = 0xFFFFC18300000028;
  *(void *)(v13 + 40) = v12;
  *(_DWORD *)(v13 + 48) = 116;
  *(void *)(v13 + 52) = a3;
  *(_DWORD *)uint64_t v13 = 60;
  unint64_t v14 = (unsigned int *)a1[1];
  uint64_t v15 = *v14;
  if ((*((unsigned char *)v14 + 33) & 0x10) != 0)
  {
    uint64_t v17 = (unsigned int *)a1[1];
    unint64_t v16 = *v14;
    do
    {
      uint64_t v17 = (unsigned int *)((char *)v17 + v15);
      uint64_t v15 = *v17;
      v16 += v15;
    }
    while ((*((unsigned char *)v17 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v16 = *v14;
  }
  fbstream_write(a1[3], (uint64_t)v14, v16);
  if (*(void *)(a2 + 48)) {
    uint64_t v18 = *(const char **)(a2 + 48);
  }
  else {
    uint64_t v18 = "";
  }
  uint64_t v19 = (unsigned int *)a1[1];
  *((void *)v19 + 1) = 0;
  *((void *)v19 + 2) = 0;
  *((void *)v19 + 3) = 0;
  *((void *)v19 + 4) = 0x534300000000;
  *(void *)uint64_t v19 = 0xFFFFC1F800000028;
  *((void *)v19 + 5) = a3;
  *uint64_t v19 = 48;
  AppendString(v18, (int *)v19);
  uint64_t v20 = *v19;
  uint64_t v21 = (v20 + 3) & 0xFFFFFFFC;
  bzero((char *)v19 + v20, v21 - v20);
  *uint64_t v19 = v21;
  uint64_t v22 = (unsigned int *)a1[1];
  uint64_t v23 = *v22;
  if ((*((unsigned char *)v22 + 33) & 0x10) != 0)
  {
    uint64_t v25 = (unsigned int *)a1[1];
    unint64_t v24 = *v22;
    do
    {
      uint64_t v25 = (unsigned int *)((char *)v25 + v23);
      uint64_t v23 = *v25;
      v24 += v23;
    }
    while ((*((unsigned char *)v25 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v24 = *v22;
  }
  fbstream_write(a1[3], (uint64_t)v22, v24);
  uint64_t v26 = *a1;
  uint64_t v27 = a1[1];
  *(void *)(v27 + 16) = 0;
  *(void *)(v27 + 24) = 0;
  *(void *)(v27 + 8) = 0;
  *(_DWORD *)(v27 + 32) = 70;
  *(_DWORD *)(v27 + 36) = 67;
  *(void *)uint64_t v27 = 0xFFFFD00800000028;
  *(void *)(v27 + 40) = v26;
  *(_DWORD *)uint64_t v27 = 48;
  uint64_t v28 = a1[3];
  unsigned int v29 = (unsigned int *)a1[1];
  uint64_t v30 = *v29;
  if ((*((unsigned char *)v29 + 33) & 0x10) != 0)
  {
    uint64_t v32 = (unsigned int *)a1[1];
    unint64_t v31 = *v29;
    do
    {
      uint64_t v32 = (unsigned int *)((char *)v32 + v30);
      uint64_t v30 = *v32;
      v31 += v30;
    }
    while ((*((unsigned char *)v32 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v31 = *v29;
  }

  fbstream_write(v28, (uint64_t)v29, v31);
}

void WriteGTMTLSMLateEvalEvent(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (unsigned int *)a1[1];
  v31[0] = *a1;
  v31[1] = "late-eval-event";
  v31[2] = a3;
  v31[3] = 0;
  DYTraceEncode_EnterStateGroup((uint64_t)v31, v7, *((unsigned int *)a1 + 4), a4, 0);
  BOOL v8 = (unsigned int *)a1[1];
  uint64_t v9 = *v8;
  if ((*((unsigned char *)v8 + 33) & 0x10) != 0)
  {
    uint64_t v11 = (unsigned int *)a1[1];
    unint64_t v10 = *v8;
    do
    {
      uint64_t v11 = (unsigned int *)((char *)v11 + v9);
      uint64_t v9 = *v11;
      v10 += v9;
    }
    while ((*((unsigned char *)v11 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v10 = *v8;
  }
  fbstream_write(a1[3], (uint64_t)v8, v10);
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  *(void *)(v13 + 16) = 0;
  *(void *)(v13 + 24) = 0;
  *(void *)(v13 + 8) = 0;
  *(_DWORD *)(v13 + 32) = 1;
  *(_DWORD *)(v13 + 36) = 67;
  *(void *)uint64_t v13 = 0xFFFFC37800000028;
  *(void *)(v13 + 40) = v12;
  *(_DWORD *)(v13 + 48) = 116;
  *(void *)(v13 + 52) = a3;
  *(_DWORD *)uint64_t v13 = 60;
  unint64_t v14 = (unsigned int *)a1[1];
  uint64_t v15 = *v14;
  if ((*((unsigned char *)v14 + 33) & 0x10) != 0)
  {
    uint64_t v17 = (unsigned int *)a1[1];
    unint64_t v16 = *v14;
    do
    {
      uint64_t v17 = (unsigned int *)((char *)v17 + v15);
      uint64_t v15 = *v17;
      v16 += v15;
    }
    while ((*((unsigned char *)v17 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v16 = *v14;
  }
  fbstream_write(a1[3], (uint64_t)v14, v16);
  uint64_t v18 = *(void *)(a2 + 64);
  uint64_t v19 = (void *)a1[1];
  v19[2] = 0;
  v19[3] = 0;
  v19[1] = 0;
  v19[4] = 0x77754300000000;
  *uint64_t v19 = 0xFFFFC37E00000028;
  v19[5] = a3;
  v19[6] = v18;
  *(_DWORD *)uint64_t v19 = 56;
  uint64_t v20 = (unsigned int *)a1[1];
  uint64_t v21 = *v20;
  if ((*((unsigned char *)v20 + 33) & 0x10) != 0)
  {
    uint64_t v23 = (unsigned int *)a1[1];
    unint64_t v22 = *v20;
    do
    {
      uint64_t v23 = (unsigned int *)((char *)v23 + v21);
      uint64_t v21 = *v23;
      v22 += v21;
    }
    while ((*((unsigned char *)v23 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v22 = *v20;
  }
  fbstream_write(a1[3], (uint64_t)v20, v22);
  uint64_t v24 = *a1;
  uint64_t v25 = a1[1];
  *(void *)(v25 + 16) = 0;
  *(void *)(v25 + 24) = 0;
  *(void *)(v25 + 8) = 0;
  *(_DWORD *)(v25 + 32) = 70;
  *(_DWORD *)(v25 + 36) = 67;
  *(void *)uint64_t v25 = 0xFFFFD00800000028;
  *(void *)(v25 + 40) = v24;
  *(_DWORD *)uint64_t v25 = 48;
  uint64_t v26 = a1[3];
  uint64_t v27 = (unsigned int *)a1[1];
  uint64_t v28 = *v27;
  if ((*((unsigned char *)v27 + 33) & 0x10) != 0)
  {
    uint64_t v30 = (unsigned int *)a1[1];
    unint64_t v29 = *v27;
    do
    {
      uint64_t v30 = (unsigned int *)((char *)v30 + v28);
      uint64_t v28 = *v30;
      v29 += v28;
    }
    while ((*((unsigned char *)v30 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v29 = *v27;
  }

  fbstream_write(v26, (uint64_t)v27, v29);
}

void WriteGTMTLSMSharedEvent(uint64_t *a1, apr_hash_t *a2, uint64_t a3, uint64_t a4)
{
  BOOL v8 = (unsigned int *)a1[1];
  v54[0] = *a1;
  v54[1] = "shared-event";
  v54[2] = a4;
  v54[3] = 0;
  DYTraceEncode_EnterStateGroup((uint64_t)v54, v8, *((unsigned int *)a1 + 4), a4, 0);
  uint64_t v9 = (unsigned int *)a1[1];
  uint64_t v10 = *v9;
  if ((*((unsigned char *)v9 + 33) & 0x10) != 0)
  {
    uint64_t v12 = (unsigned int *)a1[1];
    unint64_t v11 = *v9;
    do
    {
      uint64_t v12 = (unsigned int *)((char *)v12 + v10);
      uint64_t v10 = *v12;
      v11 += v10;
    }
    while ((*((unsigned char *)v12 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v11 = *v9;
  }
  fbstream_write(a1[3], (uint64_t)v9, v11);
  uint64_t v13 = *find_entry((uint64_t)a2, (unsigned char *)(a3 + 72), 4uLL, 0);
  if (v13 && (uint64_t v14 = *(void *)(v13 + 32)) != 0)
  {
    uint64_t v15 = *(void *)(v14 + 56);
    uint64_t v16 = *(void *)(a3 + 64);
    int v17 = *(_DWORD *)(a3 + 72);
    uint64_t v18 = *a1;
    uint64_t v19 = a1[1];
    *(void *)(v19 + 8) = 0;
    *(void *)(v19 + 16) = 0;
    *(void *)(v19 + 24) = 0;
    *(void *)uint64_t v19 = 0xFFFFC1DB00000024;
    *(_DWORD *)(v19 + 32) = 1;
    strcpy((char *)(v19 + 36), "Ctuiuw");
    *(unsigned char *)(v19 + 43) = 0;
    *(void *)(v19 + 44) = v18;
    *(void *)(v19 + 52) = v15;
    *(_DWORD *)(v19 + 60) = v17;
    *(void *)(v19 + 64) = v16;
    *(_DWORD *)(v19 + 72) = 116;
    *(void *)(v19 + 76) = a4;
    *(_DWORD *)uint64_t v19 = 84;
  }
  else
  {
    apr_hash_set(a2, (const void *)(a3 + 72), 4, (const void *)a3);
    int v20 = *(_DWORD *)(a3 + 72);
    uint64_t v21 = *a1;
    uint64_t v22 = a1[1];
    *(void *)(v22 + 16) = 0;
    *(void *)(v22 + 24) = 0;
    *(void *)(v22 + 8) = 0;
    *(void *)(v22 + 32) = 0x69754300000001;
    *(void *)uint64_t v22 = 0xFFFFC18400000028;
    *(void *)(v22 + 40) = v21;
    *(_DWORD *)(v22 + 48) = v20;
    *(_DWORD *)(v22 + 52) = 116;
    *(void *)(v22 + 56) = a4;
    *(_DWORD *)uint64_t v22 = 64;
    uint64_t v23 = (unsigned int *)a1[1];
    uint64_t v24 = *v23;
    if ((*((unsigned char *)v23 + 33) & 0x10) != 0)
    {
      uint64_t v26 = (unsigned int *)a1[1];
      unint64_t v25 = *v23;
      do
      {
        uint64_t v26 = (unsigned int *)((char *)v26 + v24);
        uint64_t v24 = *v26;
        v25 += v24;
      }
      while ((*((unsigned char *)v26 + 33) & 0x20) == 0);
    }
    else
    {
      unint64_t v25 = *v23;
    }
    fbstream_write(a1[3], (uint64_t)v23, v25);
    uint64_t v27 = *(void *)(a3 + 64);
    uint64_t v28 = (void *)a1[1];
    v28[2] = 0;
    v28[3] = 0;
    v28[1] = 0;
    v28[4] = 0x77754300000000;
    *uint64_t v28 = 0xFFFFC19900000028;
    v28[5] = a4;
    v28[6] = v27;
    *(_DWORD *)uint64_t v28 = 56;
    unint64_t v29 = (unsigned int *)a1[1];
    uint64_t v30 = *v29;
    if ((*((unsigned char *)v29 + 33) & 0x10) != 0)
    {
      uint64_t v32 = (unsigned int *)a1[1];
      unint64_t v31 = *v29;
      do
      {
        uint64_t v32 = (unsigned int *)((char *)v32 + v30);
        uint64_t v30 = *v32;
        v31 += v30;
      }
      while ((*((unsigned char *)v32 + 33) & 0x20) == 0);
    }
    else
    {
      unint64_t v31 = *v29;
    }
    fbstream_write(a1[3], (uint64_t)v29, v31);
    uint64_t v33 = *(void *)(a3 + 56);
    uint64_t v34 = a1[1];
    *(void *)(v34 + 8) = 0;
    *(void *)(v34 + 16) = 0;
    *(void *)(v34 + 24) = 0;
    *(_DWORD *)(v34 + 32) = 1;
    *(_DWORD *)(v34 + 36) = 67;
    *(void *)uint64_t v34 = 0xFFFFC1DD00000028;
    *(void *)(v34 + 40) = a4;
    *(_DWORD *)(v34 + 48) = 116;
    *(void *)(v34 + 52) = v33;
    *(_DWORD *)uint64_t v34 = 60;
  }
  int v35 = (unsigned int *)a1[1];
  uint64_t v36 = *v35;
  if ((*((unsigned char *)v35 + 33) & 0x10) != 0)
  {
    uint64_t v38 = (unsigned int *)a1[1];
    unint64_t v37 = *v35;
    do
    {
      uint64_t v38 = (unsigned int *)((char *)v38 + v36);
      uint64_t v36 = *v38;
      v37 += v36;
    }
    while ((*((unsigned char *)v38 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v37 = *v35;
  }
  fbstream_write(a1[3], (uint64_t)v35, v37);
  if (*(void *)(a3 + 48)) {
    uint64_t v39 = *(const char **)(a3 + 48);
  }
  else {
    uint64_t v39 = "";
  }
  uint64_t v40 = (unsigned int *)a1[1];
  *((void *)v40 + 1) = 0;
  *((void *)v40 + 2) = 0;
  *((void *)v40 + 3) = 0;
  *((void *)v40 + 4) = 0x534300000000;
  *(void *)uint64_t v40 = 0xFFFFC19A00000028;
  *((void *)v40 + 5) = a4;
  *uint64_t v40 = 48;
  AppendString(v39, (int *)v40);
  uint64_t v41 = *v40;
  uint64_t v42 = (v41 + 3) & 0xFFFFFFFC;
  bzero((char *)v40 + v41, v42 - v41);
  *uint64_t v40 = v42;
  uint64_t v43 = (unsigned int *)a1[1];
  uint64_t v44 = *v43;
  if ((*((unsigned char *)v43 + 33) & 0x10) != 0)
  {
    unsigned int v46 = (unsigned int *)a1[1];
    unint64_t v45 = *v43;
    do
    {
      unsigned int v46 = (unsigned int *)((char *)v46 + v44);
      uint64_t v44 = *v46;
      v45 += v44;
    }
    while ((*((unsigned char *)v46 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v45 = *v43;
  }
  fbstream_write(a1[3], (uint64_t)v43, v45);
  uint64_t v47 = *a1;
  uint64_t v48 = a1[1];
  *(void *)(v48 + 16) = 0;
  *(void *)(v48 + 24) = 0;
  *(void *)(v48 + 8) = 0;
  *(_DWORD *)(v48 + 32) = 70;
  *(_DWORD *)(v48 + 36) = 67;
  *(void *)uint64_t v48 = 0xFFFFD00800000028;
  *(void *)(v48 + 40) = v47;
  *(_DWORD *)uint64_t v48 = 48;
  uint64_t v49 = a1[3];
  uint64_t v50 = (unsigned int *)a1[1];
  uint64_t v51 = *v50;
  if ((*((unsigned char *)v50 + 33) & 0x10) != 0)
  {
    uint64_t v53 = (unsigned int *)a1[1];
    unint64_t v52 = *v50;
    do
    {
      uint64_t v53 = (unsigned int *)((char *)v53 + v51);
      uint64_t v51 = *v53;
      v52 += v51;
    }
    while ((*((unsigned char *)v53 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v52 = *v50;
  }

  fbstream_write(v49, (uint64_t)v50, v52);
}

void WriteGTMTLSMFunctionHandle(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v31[0] = *a1;
  v31[1] = "function-handle";
  if (a2) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v32 = v6;
  v31[2] = *(void *)(*(void *)(*find_entry(a3, &v32, 8uLL, 0) + 32) + 8);
  v31[3] = 0;
  DYTraceEncode_EnterStateGroup((uint64_t)v31, (unsigned int *)a1[1], *((unsigned int *)a1 + 4), v7, 0);
  BOOL v8 = (unsigned int *)a1[1];
  uint64_t v9 = *v8;
  if ((*((unsigned char *)v8 + 33) & 0x10) != 0)
  {
    unint64_t v11 = (unsigned int *)a1[1];
    unint64_t v10 = *v8;
    do
    {
      unint64_t v11 = (unsigned int *)((char *)v11 + v9);
      uint64_t v9 = *v11;
      v10 += v9;
    }
    while ((*((unsigned char *)v11 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v10 = *v8;
  }
  fbstream_write(a1[3], (uint64_t)v8, v10);
  if (*(void *)(a2 + 48))
  {
    v31[0] = *(void *)(a2 + 48);
    uint64_t v12 = *(void *)(*(void *)(*find_entry(a3, v31, 8uLL, 0) + 32) + 8);
    v31[0] = *(void *)(a2 + 8);
    uint64_t v13 = *(void *)(*(void *)(*find_entry(a3, v31, 8uLL, 0) + 32) + 8);
    v31[0] = *(void *)(a2 + 40);
    uint64_t v14 = *(void *)(*(void *)(*find_entry(a3, v31, 8uLL, 0) + 32) + 8);
    uint64_t v15 = a1[1];
    *(void *)(v15 + 8) = 0;
    *(void *)(v15 + 16) = 0;
    *(void *)(v15 + 24) = 0;
    *(_DWORD *)(v15 + 32) = 1;
    *(_DWORD *)(v15 + 36) = 29763;
    *(void *)uint64_t v15 = 0xFFFFC2FC00000028;
    *(void *)(v15 + 40) = v12;
    *(void *)(v15 + 48) = v14;
    *(_DWORD *)(v15 + 56) = 116;
    *(void *)(v15 + 60) = v13;
    *(_DWORD *)uint64_t v15 = 68;
  }
  else
  {
    if (!*(void *)(a2 + 56)) {
      goto LABEL_17;
    }
    v31[0] = *(void *)(a2 + 56);
    uint64_t v16 = *(void *)(*(void *)(*find_entry(a3, v31, 8uLL, 0) + 32) + 8);
    v31[0] = *(void *)(a2 + 8);
    uint64_t v17 = *(void *)(*(void *)(*find_entry(a3, v31, 8uLL, 0) + 32) + 8);
    v31[0] = *(void *)(a2 + 40);
    uint64_t v18 = *(void *)(*(void *)(*find_entry(a3, v31, 8uLL, 0) + 32) + 8);
    uint64_t v19 = *(unsigned __int8 *)(a2 + 64);
    uint64_t v20 = a1[1];
    *(void *)(v20 + 8) = 0;
    *(void *)(v20 + 16) = 0;
    *(void *)(v20 + 24) = 0;
    *(void *)uint64_t v20 = 0xFFFFC39900000024;
    *(_DWORD *)(v20 + 32) = 1;
    strcpy((char *)(v20 + 36), "Ctul");
    *(_WORD *)(v20 + 41) = 0;
    *(unsigned char *)(v20 + 43) = 0;
    *(void *)(v20 + 44) = v16;
    *(void *)(v20 + 52) = v18;
    *(void *)(v20 + 60) = v19;
    *(_DWORD *)(v20 + 68) = 116;
    *(void *)(v20 + 72) = v17;
    *(_DWORD *)uint64_t v20 = 80;
  }
  uint64_t v21 = (unsigned int *)a1[1];
  uint64_t v22 = *v21;
  if ((*((unsigned char *)v21 + 33) & 0x10) != 0)
  {
    uint64_t v24 = (unsigned int *)a1[1];
    unint64_t v23 = *v21;
    do
    {
      uint64_t v24 = (unsigned int *)((char *)v24 + v22);
      uint64_t v22 = *v24;
      v23 += v22;
    }
    while ((*((unsigned char *)v24 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v23 = *v21;
  }
  fbstream_write(a1[3], (uint64_t)v21, v23);
LABEL_17:
  uint64_t v25 = *a1;
  uint64_t v26 = a1[1];
  *(void *)(v26 + 16) = 0;
  *(void *)(v26 + 24) = 0;
  *(void *)(v26 + 8) = 0;
  *(_DWORD *)(v26 + 32) = 70;
  *(_DWORD *)(v26 + 36) = 67;
  *(void *)uint64_t v26 = 0xFFFFD00800000028;
  *(void *)(v26 + 40) = v25;
  *(_DWORD *)uint64_t v26 = 48;
  uint64_t v27 = (unsigned int *)a1[1];
  uint64_t v28 = *v27;
  if ((*((unsigned char *)v27 + 33) & 0x10) != 0)
  {
    uint64_t v30 = (unsigned int *)a1[1];
    unint64_t v29 = *v27;
    do
    {
      uint64_t v30 = (unsigned int *)((char *)v30 + v28);
      uint64_t v28 = *v30;
      v29 += v28;
    }
    while ((*((unsigned char *)v30 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v29 = *v27;
  }
  fbstream_write(a1[3], (uint64_t)v27, v29);
}

void WriteGTMTLSMVisibleFunctionTable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3) {
    uint64_t v8 = *(void *)(a3 + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  *(void *)__str = v8;
  entry = find_entry(a2, __str, 8uLL, 0);
  if (*entry) {
    uint64_t v11 = *(void *)(*entry + 32);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(const char **)(v11 + 8);
  uint64_t v13 = *(unsigned int **)(a1 + 8);
  *(void *)__str = *(void *)a1;
  uint64_t v59 = "visible-function-table";
  uint64_t v60 = (uint64_t)v12;
  uint64_t v61 = 0;
  DYTraceEncode_EnterStateGroup((uint64_t)__str, v13, *(unsigned int *)(a1 + 16), v10, 0);
  uint64_t v14 = *(unsigned int **)(a1 + 8);
  uint64_t v15 = *v14;
  if ((*((unsigned char *)v14 + 33) & 0x10) != 0)
  {
    uint64_t v17 = *(unsigned int **)(a1 + 8);
    unint64_t v16 = *v14;
    do
    {
      uint64_t v17 = (unsigned int *)((char *)v17 + v15);
      uint64_t v15 = *v17;
      v16 += v15;
    }
    while ((*((unsigned char *)v17 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v16 = *v14;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v14, v16);
  if (*(void *)(a3 + 120))
  {
    *(void *)__str = *(void *)(a3 + 120);
    *(void *)__str = *(void *)(*(void *)(*find_entry(a2, __str, 8uLL, 0) + 32) + 8);
    uint64_t v59 = v12;
    uint64_t v18 = *(void *)(a3 + 104);
    uint64_t v19 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512;
    uint64_t v57 = 512;
    uint64_t v60 = StoreMTLVisibleFunctionTableDescriptorUsingEncode(*(void *)(a1 + 32), v18, v19, &v57);
    DYTraceEncode_MTLComputePipelineState_newVisibleFunctionTableWithDescriptor((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
  }
  else
  {
    if (!*(void *)(a3 + 128)) {
      goto LABEL_20;
    }
    *(void *)__str = *(void *)(a3 + 128);
    *(void *)__str = *(void *)(*(void *)(*find_entry(a2, __str, 8uLL, 0) + 32) + 8);
    uint64_t v59 = v12;
    uint64_t v20 = *(void *)(a3 + 104);
    uint64_t v61 = *(unsigned __int8 *)(a3 + 168);
    uint64_t v21 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512;
    uint64_t v57 = 512;
    uint64_t v60 = StoreMTLVisibleFunctionTableDescriptorUsingEncode(*(void *)(a1 + 32), v20, v21, &v57);
    DYTraceEncode_MTLRenderPipelineState_newVisibleFunctionTableWithDescriptor_stage((uint64_t)__str, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
  }
  uint64_t v22 = *(unsigned int **)(a1 + 8);
  uint64_t v23 = *v22;
  if ((*((unsigned char *)v22 + 33) & 0x10) != 0)
  {
    uint64_t v25 = *(unsigned int **)(a1 + 8);
    unint64_t v24 = *v22;
    do
    {
      uint64_t v25 = (unsigned int *)((char *)v25 + v23);
      uint64_t v23 = *v25;
      v24 += v23;
    }
    while ((*((unsigned char *)v25 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v24 = *v22;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v22, v24);
LABEL_20:
  WriteVisibleFunctionTableInfo(a1, a3, a2, 0);
  if (*(void *)(a3 + 72)) {
    uint64_t v26 = *(const char **)(a3 + 72);
  }
  else {
    uint64_t v26 = "";
  }
  uint64_t v27 = *(unsigned int **)(a1 + 8);
  *((void *)v27 + 1) = 0;
  *((void *)v27 + 2) = 0;
  *((void *)v27 + 3) = 0;
  *((void *)v27 + 4) = 0x534300000000;
  *(void *)uint64_t v27 = 0xFFFFC30900000028;
  *((void *)v27 + 5) = v12;
  *uint64_t v27 = 48;
  AppendString(v26, (int *)v27);
  uint64_t v28 = *v27;
  uint64_t v29 = (v28 + 3) & 0xFFFFFFFC;
  bzero((char *)v27 + v28, v29 - v28);
  *uint64_t v27 = v29;
  uint64_t v30 = *(unsigned int **)(a1 + 8);
  uint64_t v31 = *v30;
  if ((*((unsigned char *)v30 + 33) & 0x10) != 0)
  {
    uint64_t v33 = *(unsigned int **)(a1 + 8);
    unint64_t v32 = *v30;
    do
    {
      uint64_t v33 = (unsigned int *)((char *)v33 + v31);
      uint64_t v31 = *v33;
      v32 += v31;
    }
    while ((*((unsigned char *)v33 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v32 = *v30;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v30, v32);
  if (v11
    && (uint64_t v34 = *(void *)(a1 + 32),
        unint64_t v35 = atomic_load((unint64_t *)(v11 + 56)),
        (unint64_t v36 = v35 & 0xFFFFFFFFFFFFFFE0) != 0))
  {
    unint64_t v37 = *(void *)(v34 + 440);
    BOOL v38 = v37 >= v36;
    unint64_t v39 = v37 - v36;
    if (v39 != 0 && v38) {
      unint64_t v40 = v39 * *(unsigned int *)(v34 + 448) / *(unsigned int *)(v34 + 452);
    }
    else {
      unint64_t v40 = 0;
    }
  }
  else
  {
    unint64_t v40 = -1;
  }
  uint64_t v41 = *(void **)(a1 + 8);
  v41[2] = 0;
  v41[3] = 0;
  v41[1] = 0;
  void v41[4] = 0x77754300000000;
  void *v41 = 0xFFFFD83E00000028;
  v41[5] = v12;
  v41[6] = v40;
  *(_DWORD *)uint64_t v41 = 56;
  uint64_t v42 = *(unsigned int **)(a1 + 8);
  uint64_t v43 = *v42;
  if ((*((unsigned char *)v42 + 33) & 0x10) != 0)
  {
    unint64_t v45 = *(unsigned int **)(a1 + 8);
    unint64_t v44 = *v42;
    do
    {
      unint64_t v45 = (unsigned int *)((char *)v45 + v43);
      uint64_t v43 = *v45;
      v44 += v43;
    }
    while ((*((unsigned char *)v45 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v44 = *v42;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v42, v44);
  if (a4)
  {
    v56[0] = v12;
    GTResourceDownloaderGetResourceFilename(a4, 0, __str, 0x80uLL);
    v56[1] = __str;
    v56[2] = 0;
    v56[3] = *(void *)(a4 + 48);
    DYTraceEncode_MTLVisibleFunctionTable_setFunctions_withRange((uint64_t)v56, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
    unsigned int v46 = *(unsigned int **)(a1 + 8);
    uint64_t v47 = *v46;
    if ((*((unsigned char *)v46 + 33) & 0x10) != 0)
    {
      uint64_t v49 = *(unsigned int **)(a1 + 8);
      unint64_t v48 = *v46;
      do
      {
        uint64_t v49 = (unsigned int *)((char *)v49 + v47);
        uint64_t v47 = *v49;
        v48 += v47;
      }
      while ((*((unsigned char *)v49 + 33) & 0x20) == 0);
    }
    else
    {
      unint64_t v48 = *v46;
    }
    fbstream_write(*(void *)(a1 + 24), (uint64_t)v46, v48);
  }
  uint64_t v50 = *(void *)a1;
  uint64_t v51 = *(void *)(a1 + 8);
  *(void *)(v51 + 16) = 0;
  *(void *)(v51 + 24) = 0;
  *(void *)(v51 + 8) = 0;
  *(_DWORD *)(v51 + 32) = 70;
  *(_DWORD *)(v51 + 36) = 67;
  *(void *)uint64_t v51 = 0xFFFFD00800000028;
  *(void *)(v51 + 40) = v50;
  *(_DWORD *)uint64_t v51 = 48;
  unint64_t v52 = *(unsigned int **)(a1 + 8);
  uint64_t v53 = *v52;
  if ((*((unsigned char *)v52 + 33) & 0x10) != 0)
  {
    unsigned int v55 = *(unsigned int **)(a1 + 8);
    unint64_t v54 = *v52;
    do
    {
      unsigned int v55 = (unsigned int *)((char *)v55 + v53);
      uint64_t v53 = *v55;
      v54 += v53;
    }
    while ((*((unsigned char *)v55 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v54 = *v52;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v52, v54);
}

void WriteGTMTLIntersectionFunctionTable(uint64_t *a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v8 = a2[2];
  if (a3) {
    uint64_t v9 = a3[1];
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = a2[5];
  v75[0] = v9;
  entry = find_entry(v8, v75, 8uLL, 0);
  if (*entry) {
    uint64_t v13 = *(void **)(*entry + 32);
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = v13[1];
  uint64_t v15 = (unsigned int *)a1[1];
  v75[0] = *a1;
  v75[1] = "intersection-function-table";
  v75[2] = v14;
  uint64_t v76 = 0;
  DYTraceEncode_EnterStateGroup((uint64_t)v75, v15, *((unsigned int *)a1 + 4), v12, 0);
  uint64_t v16 = a1[3];
  uint64_t v17 = (unsigned int *)a1[1];
  unint64_t v18 = *v17;
  if ((*((unsigned char *)v17 + 33) & 0x10) != 0)
  {
    uint64_t v19 = (unsigned int *)a1[1];
    unint64_t v20 = *v17;
    do
    {
      uint64_t v19 = (unsigned int *)((char *)v19 + v18);
      unint64_t v18 = *v19;
      v20 += v18;
    }
    while ((*((unsigned char *)v19 + 33) & 0x20) == 0);
    fbstream_write(v16, (uint64_t)v17, v20);
    if (!v13) {
      goto LABEL_14;
    }
  }
  else
  {
    fbstream_write(v16, (uint64_t)v17, v18);
  }
  uint64_t v21 = v13[4];
  if (!v21 || (*(unsigned char *)(v21 + 79) & 8) == 0)
  {
LABEL_14:
    uint64_t v22 = 0;
    goto LABEL_16;
  }
  uint64_t v22 = v21 + 64;
LABEL_16:
  GTTraceFuncToFbuf(a1, a2, v22, 0);
  if (a3[9]) {
    uint64_t v23 = (const char *)a3[9];
  }
  else {
    uint64_t v23 = "";
  }
  unint64_t v24 = (unsigned int *)a1[1];
  *((void *)v24 + 1) = 0;
  *((void *)v24 + 2) = 0;
  *((void *)v24 + 3) = 0;
  *((void *)v24 + 4) = 0x534300000000;
  *(void *)unint64_t v24 = 0xFFFFC32E00000028;
  *((void *)v24 + 5) = v14;
  *unint64_t v24 = 48;
  AppendString(v23, (int *)v24);
  uint64_t v25 = *v24;
  uint64_t v26 = (v25 + 3) & 0xFFFFFFFC;
  bzero((char *)v24 + v25, v26 - v25);
  *unint64_t v24 = v26;
  uint64_t v27 = (unsigned int *)a1[1];
  uint64_t v28 = *v27;
  if ((*((unsigned char *)v27 + 33) & 0x10) != 0)
  {
    uint64_t v30 = (unsigned int *)a1[1];
    unint64_t v29 = *v27;
    do
    {
      uint64_t v30 = (unsigned int *)((char *)v30 + v28);
      uint64_t v28 = *v30;
      v29 += v28;
    }
    while ((*((unsigned char *)v30 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v29 = *v27;
  }
  fbstream_write(a1[3], (uint64_t)v27, v29);
  if (v13 && (uint64_t v31 = a1[4], v32 = atomic_load(v13 + 7), (v33 = v32 & 0xFFFFFFFFFFFFFFE0) != 0))
  {
    unint64_t v34 = *(void *)(v31 + 440);
    BOOL v35 = v34 >= v33;
    unint64_t v36 = v34 - v33;
    if (v36 != 0 && v35) {
      unint64_t v37 = v36 * *(unsigned int *)(v31 + 448) / *(unsigned int *)(v31 + 452);
    }
    else {
      unint64_t v37 = 0;
    }
  }
  else
  {
    unint64_t v37 = -1;
  }
  BOOL v38 = (void *)a1[1];
  v38[2] = 0;
  v38[3] = 0;
  v38[1] = 0;
  v38[4] = 0x77754300000000;
  void *v38 = 0xFFFFD83C00000028;
  v38[5] = v14;
  v38[6] = v37;
  *(_DWORD *)BOOL v38 = 56;
  unint64_t v39 = (unsigned int *)a1[1];
  uint64_t v40 = *v39;
  if ((*((unsigned char *)v39 + 33) & 0x10) != 0)
  {
    uint64_t v42 = (unsigned int *)a1[1];
    unint64_t v41 = *v39;
    do
    {
      uint64_t v42 = (unsigned int *)((char *)v42 + v40);
      uint64_t v40 = *v42;
      v41 += v40;
    }
    while ((*((unsigned char *)v42 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v41 = *v39;
  }
  fbstream_write(a1[3], (uint64_t)v39, v41);
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, 0);
  bzero(v75, 0x3A0uLL);
  LODWORD(v75[0]) = 60;
  __int16 v78 = 2;
  uint64_t v76 = -1;
  uint64_t v77 = -1;
  unint64_t v80 = *(unsigned int *)(a3[13] + 8);
  uint64_t v79 = apr_palloc(newpool, 16 * v80);
  bzero(v79, 16 * v80);
  uint64_t v43 = v13[4];
  if (v43)
  {
    unsigned int v44 = 0;
    while (1)
    {
      unsigned int v45 = atomic_load((unsigned int *)(v43 + 4));
      uint64_t v46 = v44 + (v45 >> 6) - 1;
      if ((int)v46 > 0) {
        break;
      }
      uint64_t v43 = *(void *)(v43 + 40);
      unsigned int v44 = v46;
      if (!v43)
      {
        unsigned int v44 = v46;
        goto LABEL_40;
      }
    }
  }
  else
  {
    unsigned int v44 = 0;
  }
  uint64_t v46 = 0;
LABEL_40:
  unint64_t v47 = v44 | (unint64_t)(v46 << 32);
LABEL_41:
  uint64_t v48 = v43 + 64;
  while (v43)
  {
    if ((*(unsigned char *)(v48 + ((uint64_t)(HIDWORD(v47) - (int)v47) << 6) + 15) & 8) == 0) {
      break;
    }
    uint64_t v49 = (unint64_t *)(v48 + ((uint64_t)(HIDWORD(v47) - (int)v47) << 6));
    if (*v49 >= v10) {
      break;
    }
    GTMTLSMIntersectionFunctionTableStateful_processTraceFuncWithMap((uint64_t)v75, a2[3], (uint64_t)v49, 0);
    unsigned int v50 = atomic_load((unsigned int *)(v43 + 4));
    int v51 = v47 + (v50 >> 6);
    uint64_t v52 = (HIDWORD(v47) + 1);
    unint64_t v47 = (v52 << 32) | v47;
    if (v52 == v51 - 1)
    {
      unint64_t v47 = (v52 << 32) | v52;
      uint64_t v43 = *(void *)(v43 + 40);
      goto LABEL_41;
    }
  }
  unint64_t v53 = v80;
  if (v80)
  {
    uint64_t v54 = 0;
    while (1)
    {
      int v55 = *((_DWORD *)v79 + 4 * v54);
      if (v55 == 3) {
        break;
      }
      if (v55 == 2)
      {
        uint64_t v56 = *((void *)v79 + 2 * v54 + 1);
        uint64_t v57 = a1[1];
        *(void *)(v57 + 8) = 0;
        *(void *)(v57 + 16) = 0;
        *(void *)(v57 + 24) = 0;
        *(void *)uint64_t v57 = 0xFFFFC35600000024;
LABEL_55:
        *(_DWORD *)(v57 + 32) = 0;
        *(void *)(v57 + 36) = 0x6C756C7543;
        goto LABEL_56;
      }
      if (v55 == 1)
      {
        *(void *)__str = *((void *)v79 + 2 * v54 + 1);
        uint64_t v56 = *(void *)(*(void *)(*find_entry(v8, __str, 8uLL, 0) + 32) + 8);
        uint64_t v57 = a1[1];
        *(void *)(v57 + 8) = 0;
        *(void *)(v57 + 16) = 0;
        *(void *)(v57 + 24) = 0;
        *(void *)uint64_t v57 = 0xFFFFC33900000024;
        *(_DWORD *)(v57 + 32) = 0;
        strcpy((char *)(v57 + 36), "Ctul");
        *(_WORD *)(v57 + 41) = 0;
        *(unsigned char *)(v57 + 43) = 0;
LABEL_56:
        *(void *)(v57 + 44) = v14;
        *(void *)(v57 + 52) = v56;
        *(void *)(v57 + 60) = v54;
        *(_DWORD *)uint64_t v57 = 68;
        unint64_t v58 = (unsigned int *)a1[1];
        unint64_t v59 = *v58;
        if ((*((unsigned char *)v58 + 33) & 0x10) != 0)
        {
          uint64_t v60 = *v58;
          uint64_t v61 = (unsigned int *)a1[1];
          do
          {
            uint64_t v61 = (unsigned int *)((char *)v61 + v60);
            uint64_t v60 = *v61;
            v59 += v60;
          }
          while ((*((unsigned char *)v61 + 33) & 0x20) == 0);
        }
        fbstream_write(a1[3], (uint64_t)v58, v59);
        unint64_t v53 = v80;
      }
      if (v53 <= ++v54) {
        goto LABEL_61;
      }
    }
    uint64_t v56 = *((void *)v79 + 2 * v54 + 1);
    uint64_t v57 = a1[1];
    *(void *)(v57 + 8) = 0;
    *(void *)(v57 + 16) = 0;
    *(void *)(v57 + 24) = 0;
    *(void *)uint64_t v57 = 0xFFFFC46600000024;
    goto LABEL_55;
  }
LABEL_61:
  if (a4)
  {
    GTResourceDownloaderGetResourceFilename(a4, 1, __str, 0x80uLL);
    uint64_t v62 = (unsigned int *)a1[1];
    *((void *)v62 + 3) = 0;
    *((void *)v62 + 4) = 0x554300000000;
    *((void *)v62 + 1) = 0;
    *((void *)v62 + 2) = 0;
    *(void *)uint64_t v62 = 0xFFFFD85800000028;
    *((void *)v62 + 5) = v14;
    *uint64_t v62 = 48;
    AppendString(__str, (int *)v62);
    uint64_t v63 = *v62;
    uint64_t v64 = (v63 + 3) & 0xFFFFFFFC;
    bzero((char *)v62 + v63, v64 - v63);
    *uint64_t v62 = v64;
    unint64_t v65 = (unsigned int *)a1[1];
    uint64_t v66 = *v65;
    if ((*((unsigned char *)v65 + 33) & 0x10) != 0)
    {
      uint64_t v68 = (unsigned int *)a1[1];
      unint64_t v67 = *v65;
      do
      {
        uint64_t v68 = (unsigned int *)((char *)v68 + v66);
        uint64_t v66 = *v68;
        v67 += v66;
      }
      while ((*((unsigned char *)v68 + 33) & 0x20) == 0);
    }
    else
    {
      unint64_t v67 = *v65;
    }
    fbstream_write(a1[3], (uint64_t)v65, v67);
  }
  apr_pool_destroy(newpool);
  uint64_t v69 = *a1;
  uint64_t v70 = a1[1];
  *(void *)(v70 + 16) = 0;
  *(void *)(v70 + 24) = 0;
  *(void *)(v70 + 8) = 0;
  *(_DWORD *)(v70 + 32) = 70;
  *(_DWORD *)(v70 + 36) = 67;
  *(void *)uint64_t v70 = 0xFFFFD00800000028;
  *(void *)(v70 + 40) = v69;
  *(_DWORD *)uint64_t v70 = 48;
  uint64_t v71 = (unsigned int *)a1[1];
  uint64_t v72 = *v71;
  if ((*((unsigned char *)v71 + 33) & 0x10) != 0)
  {
    uint64_t v74 = (unsigned int *)a1[1];
    unint64_t v73 = *v71;
    do
    {
      uint64_t v74 = (unsigned int *)((char *)v74 + v72);
      uint64_t v72 = *v74;
      v73 += v72;
    }
    while ((*((unsigned char *)v74 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v73 = *v71;
  }
  fbstream_write(a1[3], (uint64_t)v71, v73);
}

void WriteGTMTLSMIndirectCommandBuffer_restore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    GTResourceDownloaderGetResourceFilename(a2, 0, __str, 0x80uLL);
    uint64_t v5 = *(unsigned int **)(a1 + 8);
    *((void *)v5 + 1) = 0;
    *((void *)v5 + 2) = 0;
    *((void *)v5 + 3) = 0;
    *((void *)v5 + 4) = 0x554300000004;
    *(void *)uint64_t v5 = 0xFFFFD81500000028;
    *((void *)v5 + 5) = a3;
    *uint64_t v5 = 48;
    AppendString(__str, (int *)v5);
    uint64_t v6 = *v5;
    uint64_t v7 = (v6 + 3) & 0xFFFFFFFC;
    bzero((char *)v5 + v6, v7 - v6);
    *uint64_t v5 = v7;
    uint64_t v8 = *(unsigned int **)(a1 + 8);
    uint64_t v9 = *v8;
    if ((*((unsigned char *)v8 + 33) & 0x10) != 0)
    {
      uint64_t v11 = *(unsigned int **)(a1 + 8);
      unint64_t v10 = *v8;
      do
      {
        uint64_t v11 = (unsigned int *)((char *)v11 + v9);
        uint64_t v9 = *v11;
        v10 += v9;
      }
      while ((*((unsigned char *)v11 + 33) & 0x20) == 0);
    }
    else
    {
      unint64_t v10 = *v8;
    }
    fbstream_write(*(void *)(a1 + 24), (uint64_t)v8, v10);
  }
}

void WriteGTMTLSMResourceGroup(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v30 = v6;
  uint64_t v7 = *(const char **)(*(void *)(*find_entry(a3, &v30, 8uLL, 0) + 32) + 8);
  uint64_t v8 = (unsigned int *)a1[1];
  uint64_t v30 = *a1;
  uint64_t v31 = "resource-group";
  unint64_t v32 = v7;
  uint64_t v33 = 0;
  DYTraceEncode_EnterStateGroup((uint64_t)&v30, v8, *((unsigned int *)a1 + 4), v9, 0);
  unint64_t v10 = (unsigned int *)a1[1];
  uint64_t v11 = *v10;
  if ((*((unsigned char *)v10 + 33) & 0x10) != 0)
  {
    uint64_t v13 = (unsigned int *)a1[1];
    unint64_t v12 = *v10;
    do
    {
      uint64_t v13 = (unsigned int *)((char *)v13 + v11);
      uint64_t v11 = *v13;
      v12 += v11;
    }
    while ((*((unsigned char *)v13 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v12 = *v10;
  }
  fbstream_write(a1[3], (uint64_t)v10, v12);
  uint64_t v30 = *a1;
  uint64_t v31 = v7;
  uint64_t v14 = *(unsigned int *)(a2 + 56);
  __chkstk_darwin(v15, 8 * v14);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFF0);
  bzero(v17, v16);
  name_array_11364(a3, v17, *(uint64_t **)(a2 + 48), v14);
  uint64_t v18 = *(unsigned int *)(a2 + 56);
  unint64_t v32 = v17;
  uint64_t v33 = v18;
  DYTraceEncode_MTLDevice_newResourceGroupFromResources_count((uint64_t)&v30, a1[1], *((unsigned int *)a1 + 4), 0, 0);
  uint64_t v19 = (unsigned int *)a1[1];
  uint64_t v20 = *v19;
  if ((*((unsigned char *)v19 + 33) & 0x10) != 0)
  {
    uint64_t v22 = (unsigned int *)a1[1];
    unint64_t v21 = *v19;
    do
    {
      uint64_t v22 = (unsigned int *)((char *)v22 + v20);
      uint64_t v20 = *v22;
      v21 += v20;
    }
    while ((*((unsigned char *)v22 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v21 = *v19;
  }
  fbstream_write(a1[3], (uint64_t)v19, v21);
  uint64_t v23 = *a1;
  uint64_t v24 = a1[1];
  *(void *)(v24 + 16) = 0;
  *(void *)(v24 + 24) = 0;
  *(void *)(v24 + 8) = 0;
  *(_DWORD *)(v24 + 32) = 70;
  *(_DWORD *)(v24 + 36) = 67;
  *(void *)uint64_t v24 = 0xFFFFD00800000028;
  *(void *)(v24 + 40) = v23;
  *(_DWORD *)uint64_t v24 = 48;
  uint64_t v25 = (unsigned int *)a1[1];
  uint64_t v26 = *v25;
  if ((*((unsigned char *)v25 + 33) & 0x10) != 0)
  {
    uint64_t v28 = (unsigned int *)a1[1];
    unint64_t v27 = *v25;
    do
    {
      uint64_t v28 = (unsigned int *)((char *)v28 + v26);
      uint64_t v26 = *v28;
      v27 += v26;
    }
    while ((*((unsigned char *)v28 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v27 = *v25;
  }
  fbstream_write(a1[3], (uint64_t)v25, v27);
}

void WriteGTMTLSMAccelerationStructure_new(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a3 + 120) + 32);
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  *(void *)(v9 + 16) = 0;
  *(void *)(v9 + 24) = 0;
  *(void *)(v9 + 8) = 0;
  *(void *)(v9 + 32) = 0x6C754300000001;
  *(void *)uint64_t v9 = 0xFFFFC30200000028;
  *(void *)(v9 + 40) = v8;
  *(void *)(v9 + 48) = v7;
  *(_DWORD *)(v9 + 56) = 116;
  *(void *)(v9 + 60) = a4;
  *(_DWORD *)uint64_t v9 = 68;
  unint64_t v10 = (unsigned int *)a1[1];
  uint64_t v11 = a1[3];
  uint64_t v12 = *v10;
  if ((*((unsigned char *)v10 + 33) & 0x10) != 0)
  {
    uint64_t v14 = v10;
    unint64_t v13 = *v10;
    do
    {
      uint64_t v14 = (unsigned int *)((char *)v14 + v12);
      uint64_t v12 = *v14;
      v13 += v12;
    }
    while ((*((unsigned char *)v14 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v13 = *v10;
  }
  fbstream_write(v11, (uint64_t)v10, v13);

  WriteAccelerationStructureInfo((uint64_t)a1, a3, a2, 4);
}

void WriteGTMTLSMResidencySet(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v8 = a2[2];
  if (a3) {
    uint64_t v9 = *(apr_pool_t ***)(a3 + 8);
  }
  else {
    uint64_t v9 = 0;
  }
  unint64_t v10 = a2[5];
  uint64_t v62 = v9;
  uint64_t v11 = *find_entry(v8, &v62, 8uLL, 0);
  if (v11) {
    uint64_t v12 = *(void *)(v11 + 32);
  }
  else {
    uint64_t v12 = 0;
  }
  unint64_t v13 = *(apr_pool_t ***)(v12 + 8);
  if ((a4 & 1) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v62 = *(apr_pool_t ***)a1;
    uint64_t v63 = v13;
    uint64_t v15 = *(void *)(a3 + 48);
    uint64_t v65 = 0;
    uint64_t v16 = v14 + *(unsigned int *)(a1 + 16) - 512;
    unint64_t v59 = (apr_pool_t **)(&stru_1F8 + 8);
    uint64_t v64 = StoreMTLResidencySetDescriptorUsingEncode(*(void *)(a1 + 32), v15, v16, &v59);
    DYTraceEncode_MTLDevice_newResidencySetWithDescriptor_error((uint64_t)&v62, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
    uint64_t v17 = *(unsigned int **)(a1 + 8);
    uint64_t v18 = *v17;
    if ((*((unsigned char *)v17 + 33) & 0x10) != 0)
    {
      uint64_t v20 = *(unsigned int **)(a1 + 8);
      unint64_t v19 = *v17;
      do
      {
        uint64_t v20 = (unsigned int *)((char *)v20 + v18);
        uint64_t v18 = *v20;
        v19 += v18;
      }
      while ((*((unsigned char *)v20 + 33) & 0x20) == 0);
    }
    else
    {
      unint64_t v19 = *v17;
    }
    fbstream_write(*(void *)(a1 + 24), (uint64_t)v17, v19);
  }
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, 0);
  unint64_t v21 = newpool;
  uint64_t v60 = (apr_pool_t **)apr_hash_make(newpool);
  unint64_t v59 = (apr_pool_t **)apr_hash_make(v21);
  GatherResidencySetAllocationsUpToIndexInternal((uint64_t)&v59, v12, a2[3], v10, 0xFFFFFFFFFFFFFFFFLL, 0);
  if (a4)
  {
    uint64_t v63 = (apr_pool_t **)apr_hash_make(v21);
    uint64_t v62 = (apr_pool_t **)apr_hash_make(v21);
    GatherResidencySetAllocationsUpToIndexInternal((uint64_t)&v62, v12, a2[3], 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    uint64_t v22 = v60;
    if (HashesEqual(v60, v63) && HashesEqual(v59, v62)) {
      goto LABEL_42;
    }
    uint64_t v23 = *(void **)(a1 + 8);
    v23[1] = 0;
    v23[2] = 0;
    v23[3] = 0;
    v23[4] = 0x4300000000;
    *uint64_t v23 = 0xFFFFC49800000028;
    v23[5] = v13;
    *(_DWORD *)uint64_t v23 = 48;
    uint64_t v24 = *(unsigned int **)(a1 + 8);
    unint64_t v25 = *v24;
    if ((*((unsigned char *)v24 + 33) & 0x10) != 0)
    {
      uint64_t v26 = *v24;
      unint64_t v27 = *(unsigned int **)(a1 + 8);
      do
      {
        unint64_t v27 = (unsigned int *)((char *)v27 + v26);
        uint64_t v26 = *v27;
        v25 += v26;
      }
      while ((*((unsigned char *)v27 + 33) & 0x20) == 0);
    }
    fbstream_write(*(void *)(a1 + 24), (uint64_t)v24, v25);
  }
  else
  {
    uint64_t v22 = v60;
  }
  uint64_t v28 = apr_array_make(v21, 16, 8);
  uint64_t v29 = apr_array_make(v21, 16, 8);
  uint64_t v30 = apr_array_make(v21, 16, 8);
  FillArrayFromHash(v28, v22);
  uint64_t v31 = v59;
  FillArrayFromHashDifference(v29, v59, (uint64_t)v22);
  unint64_t v32 = FillArrayFromHashDifference(v30, v22, (uint64_t)v31);
  uint64_t nelts = v28->nelts;
  if ((int)nelts >= 1)
  {
    uint64_t v62 = v13;
    __chkstk_darwin(v32, 8 * nelts);
    BOOL v35 = (char *)&v59 - ((v34 + 15) & 0xFFFFFFFF0);
    bzero(v35, v34);
    name_array_11364(v8, v35, (uint64_t *)v28->elts, nelts);
    uint64_t v63 = (apr_pool_t **)v35;
    uint64_t v64 = v28->nelts;
    DYTraceEncode_MTLResidencySet_addAllocations_count((uint64_t)&v62, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
    unint64_t v36 = *(unsigned int **)(a1 + 8);
    uint64_t v37 = *v36;
    if ((*((unsigned char *)v36 + 33) & 0x10) != 0)
    {
      unint64_t v39 = *(unsigned int **)(a1 + 8);
      unint64_t v38 = *v36;
      do
      {
        unint64_t v39 = (unsigned int *)((char *)v39 + v37);
        uint64_t v37 = *v39;
        v38 += v37;
      }
      while ((*((unsigned char *)v39 + 33) & 0x20) == 0);
    }
    else
    {
      unint64_t v38 = *v36;
    }
    fbstream_write(*(void *)(a1 + 24), (uint64_t)v36, v38);
    uint64_t v40 = *(void **)(a1 + 8);
    v40[1] = 0;
    v40[2] = 0;
    v40[3] = 0;
    void v40[4] = 0x4300000000;
    *uint64_t v40 = 0xFFFFC48C00000028;
    v40[5] = v13;
    *(_DWORD *)uint64_t v40 = 48;
    unint64_t v41 = *(unsigned int **)(a1 + 8);
    unint64_t v42 = *v41;
    if ((*((unsigned char *)v41 + 33) & 0x10) != 0)
    {
      uint64_t v43 = *v41;
      unsigned int v44 = *(unsigned int **)(a1 + 8);
      do
      {
        unsigned int v44 = (unsigned int *)((char *)v44 + v43);
        uint64_t v43 = *v44;
        v42 += v43;
      }
      while ((*((unsigned char *)v44 + 33) & 0x20) == 0);
    }
    fbstream_write(*(void *)(a1 + 24), (uint64_t)v41, v42);
  }
  uint64_t v45 = v29->nelts;
  if ((int)v45 >= 1)
  {
    uint64_t v62 = v13;
    __chkstk_darwin(v32, 8 * v45);
    unint64_t v47 = (char *)&v59 - ((v46 + 15) & 0xFFFFFFFF0);
    bzero(v47, v46);
    name_array_11364(v8, v47, (uint64_t *)v29->elts, v45);
    uint64_t v63 = (apr_pool_t **)v47;
    uint64_t v64 = v29->nelts;
    DYTraceEncode_MTLResidencySet_addAllocations_count((uint64_t)&v62, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
    uint64_t v48 = *(unsigned int **)(a1 + 8);
    uint64_t v49 = *v48;
    if ((*((unsigned char *)v48 + 33) & 0x10) != 0)
    {
      int v51 = *(unsigned int **)(a1 + 8);
      unint64_t v50 = *v48;
      do
      {
        int v51 = (unsigned int *)((char *)v51 + v49);
        uint64_t v49 = *v51;
        v50 += v49;
      }
      while ((*((unsigned char *)v51 + 33) & 0x20) == 0);
    }
    else
    {
      unint64_t v50 = *v48;
    }
    fbstream_write(*(void *)(a1 + 24), (uint64_t)v48, v50);
  }
  uint64_t v52 = v30->nelts;
  if ((int)v52 >= 1)
  {
    uint64_t v62 = v13;
    __chkstk_darwin(v32, 8 * v52);
    uint64_t v54 = (char *)&v59 - ((v53 + 15) & 0xFFFFFFFF0);
    bzero(v54, v53);
    name_array_11364(v8, v54, (uint64_t *)v30->elts, v52);
    uint64_t v63 = (apr_pool_t **)v54;
    uint64_t v64 = v30->nelts;
    DYTraceEncode_MTLResidencySet_removeAllocations_count((uint64_t)&v62, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
    int v55 = *(unsigned int **)(a1 + 8);
    uint64_t v56 = *v55;
    if ((*((unsigned char *)v55 + 33) & 0x10) != 0)
    {
      unint64_t v58 = *(unsigned int **)(a1 + 8);
      unint64_t v57 = *v55;
      do
      {
        unint64_t v58 = (unsigned int *)((char *)v58 + v56);
        uint64_t v56 = *v58;
        v57 += v56;
      }
      while ((*((unsigned char *)v58 + 33) & 0x20) == 0);
    }
    else
    {
      unint64_t v57 = *v55;
    }
    fbstream_write(*(void *)(a1 + 24), (uint64_t)v55, v57);
  }
LABEL_42:
  apr_pool_destroy(v21);
}

void WriteGTMTLSMCommandQueue_residencySets(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[2];
  if (a3) {
    uint64_t v6 = *(void *)(a3 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  v28[0] = v6;
  uint64_t v7 = *find_entry(v5, v28, 8uLL, 0);
  if (v7) {
    uint64_t v8 = *(void *)(v7 + 32);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void *)(v8 + 8);
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, 0);
  unint64_t v10 = newpool;
  uint64_t v11 = (apr_pool_t **)apr_hash_make(newpool);
  GatherCommandQueueResidencySetsUpToIndexInternal(v11, v8, a2[3], a2[5], a2[6] + a2[5], 0);
  uint64_t v12 = apr_array_make(v10, 16, 8);
  unint64_t v13 = FillArrayFromHash(v12, v11);
  uint64_t nelts = v12->nelts;
  if ((int)nelts >= 1)
  {
    v28[0] = v9;
    __chkstk_darwin(v13, 8 * nelts);
    uint64_t v16 = (char *)&v28[-1] - ((v15 + 15) & 0xFFFFFFFF0);
    bzero(v16, v15);
    name_array_11364(v5, v16, (uint64_t *)v12->elts, nelts);
    v28[1] = v16;
    v28[2] = v12->nelts;
    DYTraceEncode_MTLCommandQueue_addResidencySets_count((uint64_t)v28, a1[1], *((unsigned int *)a1 + 4), 0, 0);
    uint64_t v17 = (unsigned int *)a1[1];
    uint64_t v18 = *v17;
    if ((*((unsigned char *)v17 + 33) & 0x10) != 0)
    {
      uint64_t v20 = (unsigned int *)a1[1];
      unint64_t v19 = *v17;
      do
      {
        uint64_t v20 = (unsigned int *)((char *)v20 + v18);
        uint64_t v18 = *v20;
        v19 += v18;
      }
      while ((*((unsigned char *)v20 + 33) & 0x20) == 0);
    }
    else
    {
      unint64_t v19 = *v17;
    }
    fbstream_write(a1[3], (uint64_t)v17, v19);
  }
  apr_pool_destroy(v10);
  uint64_t v21 = *a1;
  uint64_t v22 = a1[1];
  *(void *)(v22 + 16) = 0;
  *(void *)(v22 + 24) = 0;
  *(void *)(v22 + 8) = 0;
  *(_DWORD *)(v22 + 32) = 70;
  *(_DWORD *)(v22 + 36) = 67;
  *(void *)uint64_t v22 = 0xFFFFD00800000028;
  *(void *)(v22 + 40) = v21;
  *(_DWORD *)uint64_t v22 = 48;
  uint64_t v23 = (unsigned int *)a1[1];
  uint64_t v24 = *v23;
  if ((*((unsigned char *)v23 + 33) & 0x10) != 0)
  {
    uint64_t v26 = (unsigned int *)a1[1];
    unint64_t v25 = *v23;
    do
    {
      uint64_t v26 = (unsigned int *)((char *)v26 + v24);
      uint64_t v24 = *v26;
      v25 += v24;
    }
    while ((*((unsigned char *)v26 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v25 = *v23;
  }
  fbstream_write(a1[3], (uint64_t)v23, v25);
}

apr_hash_index_t *FillArrayFromHash(apr_array_header_t *a1, apr_pool_t **a2)
{
  a1->uint64_t nelts = 0;
  uint64_t result = apr_hash_first(*a2, (apr_hash_t *)a2);
  if (result)
  {
    int v4 = result;
    do
    {
      uint64_t v5 = **(void **)(*((void *)v4 + 1) + 16);
      *(void *)apr_array_push(a1) = v5;
      uint64_t result = apr_hash_next(v4);
      int v4 = result;
    }
    while (result);
  }
  return result;
}

void *name_array_11364(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = a4;
    uint64_t v8 = a2;
    do
    {
      uint64_t v9 = *a3++;
      uint64_t v11 = v9;
      *v8++ = *(void *)(*(void *)(*find_entry(a1, &v11, 8uLL, 0) + 32) + 8);
      --v5;
    }
    while (v5);
  }
  return a2;
}

uint64_t HashesEqual(apr_pool_t **ht, apr_pool_t **a2)
{
  int v4 = apr_hash_first(*ht, (apr_hash_t *)ht);
  if (v4)
  {
    uint64_t v5 = v4;
    while (1)
    {
      entry = find_entry((uint64_t)a2, *(unsigned char **)(*((void *)v5 + 1) + 16), 8uLL, 0);
      if (!*entry || !*(void *)(*entry + 32)) {
        break;
      }
      uint64_t v5 = apr_hash_next(v5);
      if (!v5) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    uint64_t v7 = apr_hash_first(*a2, (apr_hash_t *)a2);
    if (!v7) {
      return 1;
    }
    uint64_t v8 = v7;
    while (1)
    {
      uint64_t v9 = find_entry((uint64_t)ht, *(unsigned char **)(*((void *)v8 + 1) + 16), 8uLL, 0);
      if (!*v9 || !*(void *)(*v9 + 32)) {
        break;
      }
      uint64_t v8 = apr_hash_next(v8);
      if (!v8) {
        return 1;
      }
    }
  }
  return 0;
}

apr_hash_index_t *FillArrayFromHashDifference(apr_array_header_t *a1, apr_pool_t **a2, uint64_t a3)
{
  a1->uint64_t nelts = 0;
  uint64_t result = apr_hash_first(*a2, (apr_hash_t *)a2);
  if (result)
  {
    uint64_t v6 = result;
    do
    {
      uint64_t v7 = *(unsigned char **)(*((void *)v6 + 1) + 16);
      uint64_t v8 = *find_entry(a3, v7, 8uLL, 0);
      if (!v8 || !*(void *)(v8 + 32))
      {
        uint64_t v9 = *(void *)v7;
        *(void *)apr_array_push(a1) = v9;
      }
      uint64_t result = apr_hash_next(v6);
      uint64_t v6 = result;
    }
    while (result);
  }
  return result;
}

void WriteGTMTLSMTexture_restoreTextureData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_WORD *)(a1 + 44))
  {
    unint64_t v6 = 0;
    do
    {
      unint64_t v7 = a1 + 88 * v6;
      uint64_t v8 = *(unsigned int *)(v7 + 52);
      v19[0] = a3;
      v19[1] = v8;
      uint64_t v9 = *(unsigned __int16 *)(v7 + 58);
      v19[2] = *(unsigned __int16 *)(v7 + 56);
      v19[3] = v9;
      uint64_t v10 = *(unsigned __int16 *)(v7 + 64);
      v19[4] = *(unsigned int *)(v7 + 60);
      v19[5] = v10;
      uint64_t v11 = *(unsigned __int16 *)(v7 + 50);
      v19[6] = *(unsigned __int16 *)(v7 + 66);
      v19[7] = v11;
      v19[8] = *(unsigned __int16 *)(v7 + 48);
      GTResourceDownloaderGetResourceFilename(a1, v6, __str, 0x80uLL);
      v19[9] = __str;
      uint64_t v12 = *(void *)(v7 + 68);
      *(void *)&long long v13 = v12;
      *((void *)&v13 + 1) = HIDWORD(v12);
      long long v20 = v13;
      uint64_t v21 = *(unsigned int *)(v7 + 76);
      DYTraceEncode_MTLTexture_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage((uint64_t)v19, *(unsigned int **)(a2 + 8), *(unsigned int *)(a2 + 16), 0, 0);
      uint64_t v14 = *(unsigned int **)(a2 + 8);
      v14[1] = -10236;
      unsigned int v15 = v14[8];
      v14[8] = v15 | 4;
      unint64_t v16 = *v14;
      if ((v15 & 0x1000) != 0)
      {
        uint64_t v17 = *v14;
        uint64_t v18 = v14;
        do
        {
          uint64_t v18 = (unsigned int *)((char *)v18 + v17);
          uint64_t v17 = *v18;
          v16 += v17;
        }
        while ((*((unsigned char *)v18 + 33) & 0x20) == 0);
      }
      fbstream_write(*(void *)(a2 + 24), (uint64_t)v14, v16);
      ++v6;
    }
    while (v6 < *(unsigned __int16 *)(a1 + 44));
  }
}

uint64_t GTTraceDump_writeUnusedDeviceResources(uint64_t a1, apr_pool_t *a2, apr_pool_t *p)
{
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(apr_pool_t **)(a1 + 56);
  uint64_t v8 = (char *)apr_palloc(p, 0x100000uLL);
  v28[0].pool = v7;
  uint64_t v9 = *(void *)(*(void *)(*find_entry(v6, v28, 8uLL, 0) + 32) + 8);
  snprintf(v8, 0x100000uLL, "unused-device-resources-0x%llx", v9);
  v20[0] = v9;
  v20[1] = v8;
  int v10 = *(_DWORD *)(a1 + 484);
  int v21 = 0x100000;
  int v22 = v10;
  uint64_t v11 = fbstream_open(a2, (uint64_t)v8, p);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  data = v11;
  uint64_t v24 = a2;
  uint64_t v25 = 0;
  char v26 = *(unsigned char *)(a1 + 488);
  memset(v27, 0, sizeof(v27));
  do
  {
    uint64_t v14 = &v28[v12];
    unsigned int v15 = *(_OWORD **)(a1 + 8 * v13 + 64);
    long long v16 = v15[1];
    *(_OWORD *)&v14->pool = *v15;
    *(_OWORD *)&v14->nalloc = v16;
    LODWORD(v15) = *(_DWORD *)(a1 + 344 + 4 * v13);
    int elt_size = v28[v12].elt_size;
    *(int32x2_t *)&v14->uint64_t nelts = vdup_n_s32(v28[v12].nelts - (int)v15);
    v14->elts = &v28[v12].elts[elt_size * (uint64_t)(int)v15];
    v14->pool = 0;
    ++v13;
    ++v12;
  }
  while (v12 != 35);
  SnapshotResidencySets(*(void *)(a1 + 16), (uint64_t)&v29);
  DumpDeviceResources((uint64_t)v20, a1, v28, (uint64_t)p);
  uint64_t v18 = data;
  apr_pool_cleanup_kill(*(apr_pool_t **)data, data, (apr_status_t (__cdecl *)(void *))fbstream_cleanup);
  return fbstream_cleanup((uint64_t)v18);
}

uint64_t GTTraceDump_writeDelta(uint64_t a1, apr_pool_t *a2, apr_pool_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 504);
  v67[0] = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(*(void *)(*find_entry(v6, v67, 8uLL, 0) + 32) + 8);
  uint64_t v9 = (char *)apr_palloc(a3, 0x100000uLL);
  snprintf(v9, 0x100000uLL, "delta-device-resources-0x%llx", v8);
  v67[0] = v8;
  v67[1] = (uint64_t)v9;
  v67[2] = 0x100000;
  int v10 = fbstream_open(a2, (uint64_t)v9, a3);
  v67[4] = 0;
  v67[5] = 0;
  v67[3] = (uint64_t)v10;
  char v68 = *(unsigned char *)(a1 + 488);
  memset(v69, 0, sizeof(v69));
  if (*(int *)(a1 + 432) >= 1)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 240) + 24) + 8 * v11);
      if (v12) {
        uint64_t v12 = *(void *)(v12 + 8);
      }
      uint64_t v70 = v12;
      uint64_t v13 = *(void *)(*(void *)(*find_entry(v6, &v70, 8uLL, 0) + 32) + 8);
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      *((_DWORD *)v9 + 8) = 0;
      *((void *)v9 + 3) = 0;
      *((_DWORD *)v9 + 9) = 67;
      *(void *)uint64_t v9 = 0xFFFFC02C00000028;
      *((void *)v9 + 5) = v13;
      *(_DWORD *)uint64_t v9 = 48;
      fbstream_write((uint64_t)v10, (uint64_t)v9, 0x30uLL);
      ++v11;
    }
    while (v11 < *(int *)(a1 + 432));
  }
  if (*(int *)(a1 + 348) >= 1)
  {
    for (uint64_t i = 0; i < *(int *)(a1 + 348); ++i)
    {
      unsigned int v15 = *(void **)(*(void *)(*(void *)(a1 + 72) + 24) + 8 * i);
      uint64_t v70 = v15[1];
      entry = find_entry(v7, &v70, 8uLL, 0);
      if (*entry) {
        uint64_t v17 = *(void *)(*entry + 32);
      }
      else {
        uint64_t v17 = 0;
      }
      if (v15[24]) {
        continue;
      }
      uint64_t v18 = v15[13];
      if (v18)
      {
        if (*(unsigned char *)(v18 + 44)) {
          BOOL v19 = 1;
        }
        else {
          BOOL v19 = v17 == 0;
        }
        if (v19) {
          continue;
        }
      }
      else if (!v17)
      {
        continue;
      }
      int v20 = *(unsigned char *)(v17 + 47) & 1;
      uint64_t v70 = v15[1];
      int v21 = find_entry(v6, &v70, 8uLL, 0);
      WriteGTMTLSMTexture_downloads((uint64_t)v67, (uint64_t)v15, v17, v20, *(void *)(*(void *)(*v21 + 32) + 8));
    }
  }
  if (*(int *)(a1 + 364) >= 1)
  {
    uint64_t v22 = 0;
    do
    {
      uint64_t v23 = *(void *)(*(void *)(*(void *)(a1 + 104) + 24) + 8 * v22);
      uint64_t v70 = *(void *)(v23 + 8);
      uint64_t v24 = find_entry(v7, &v70, 8uLL, 0);
      if (*v24)
      {
        uint64_t v25 = *(void *)(*v24 + 32);
        if (v25)
        {
          uint64_t v70 = *(void *)(v23 + 8);
          char v26 = find_entry(v6, &v70, 8uLL, 0);
          WriteGTMTLSMIndirectCommandBuffer_restore((uint64_t)v67, v25, *(void *)(*(void *)(*v26 + 32) + 8));
        }
      }
      ++v22;
    }
    while (v22 < *(int *)(a1 + 364));
  }
  if (*(int *)(a1 + 396) >= 1)
  {
    uint64_t v27 = 0;
    do
    {
      uint64_t v28 = *(void *)(*(void *)(*(void *)(a1 + 168) + 24) + 8 * v27);
      if (v28) {
        uint64_t v29 = *(void *)(v28 + 8);
      }
      else {
        uint64_t v29 = 0;
      }
      uint64_t v70 = v29;
      uint64_t v30 = find_entry(v6, &v70, 8uLL, 0);
      WriteGTMTLSMFence(v67, v28, *(void *)(*(void *)(*v30 + 32) + 8), v31);
      ++v27;
    }
    while (v27 < *(int *)(a1 + 396));
  }
  if (*(int *)(a1 + 400) >= 1)
  {
    uint64_t v32 = 0;
    do
    {
      uint64_t v33 = *(void *)(*(void *)(*(void *)(a1 + 176) + 24) + 8 * v32);
      if (v33) {
        uint64_t v34 = *(void *)(v33 + 8);
      }
      else {
        uint64_t v34 = 0;
      }
      uint64_t v70 = v34;
      BOOL v35 = find_entry(v6, &v70, 8uLL, 0);
      WriteGTMTLSMEvent(v67, v33, *(void *)(*(void *)(*v35 + 32) + 8), v36);
      ++v32;
    }
    while (v32 < *(int *)(a1 + 400));
  }
  if (*(int *)(a1 + 408) >= 1)
  {
    uint64_t v37 = 0;
    do
    {
      uint64_t v38 = *(void *)(*(void *)(*(void *)(a1 + 192) + 24) + 8 * v37);
      if (v38) {
        uint64_t v39 = *(void *)(v38 + 8);
      }
      else {
        uint64_t v39 = 0;
      }
      uint64_t v70 = v39;
      uint64_t v40 = find_entry(v6, &v70, 8uLL, 0);
      WriteGTMTLSMLateEvalEvent(v67, v38, *(void *)(*(void *)(*v40 + 32) + 8), v41);
      ++v37;
    }
    while (v37 < *(int *)(a1 + 408));
  }
  unint64_t v42 = apr_hash_make(a3);
  if (*(int *)(a1 + 404) >= 1)
  {
    uint64_t v43 = v42;
    uint64_t v44 = 0;
    do
    {
      uint64_t v45 = *(void *)(*(void *)(*(void *)(a1 + 184) + 24) + 8 * v44);
      if (v45) {
        uint64_t v46 = *(void *)(v45 + 8);
      }
      else {
        uint64_t v46 = 0;
      }
      uint64_t v70 = v46;
      unint64_t v47 = find_entry(v6, &v70, 8uLL, 0);
      WriteGTMTLSMSharedEvent(v67, v43, v45, *(void *)(*(void *)(*v47 + 32) + 8));
      ++v44;
    }
    while (v44 < *(int *)(a1 + 404));
  }
  int v48 = *(_DWORD *)(a1 + 440);
  if (v48 >= 1)
  {
    for (uint64_t j = 0; j < v48; ++j)
    {
      uint64_t v50 = *(void *)(*(void *)(*(void *)(a1 + 256) + 24) + 8 * j);
      if (*(unsigned char *)(v50 + 60) == 1)
      {
        int v51 = v10;
        uint64_t v70 = *(void *)(v50 + 8);
        uint64_t v52 = *(void *)(*(void *)(*find_entry(v6, &v70, 8uLL, 0) + 32) + 8);
        size_t v53 = *(const char ***)(v50 + 48);
        uint64_t v70 = 512;
        uint64_t v54 = (const char *)StoreMTLRasterizationRateMapDescriptorUsingEncode(0, v53, (uint64_t)(v9 + 1048064), &v70);
        *((void *)v9 + 1) = 0;
        *((void *)v9 + 2) = 0;
        *((_DWORD *)v9 + 8) = 0;
        *((void *)v9 + 3) = 0;
        strcpy(v9 + 36, "CU");
        v9[39] = 0;
        *(void *)uint64_t v9 = 0xFFFFC3CD00000028;
        *((void *)v9 + 5) = v52;
        *(_DWORD *)uint64_t v9 = 48;
        AppendString(v54, (int *)v9);
        uint64_t v55 = *(unsigned int *)v9;
        unint64_t v56 = (v55 + 3) & 0xFFFFFFFC;
        bzero(&v9[v55], v56 - v55);
        *(_DWORD *)uint64_t v9 = v56;
        if ((v9[33] & 0x10) != 0)
        {
          LODWORD(v57) = v56;
          unint64_t v58 = (unsigned int *)v9;
          int v10 = v51;
          do
          {
            unint64_t v58 = (unsigned int *)((char *)v58 + v57);
            uint64_t v57 = *v58;
            v56 += v57;
          }
          while ((*((unsigned char *)v58 + 33) & 0x20) == 0);
        }
        else
        {
          int v10 = v51;
        }
        fbstream_write((uint64_t)v10, (uint64_t)v9, v56);
        int v48 = *(_DWORD *)(a1 + 440);
      }
    }
  }
  if (*(int *)(a1 + 344) >= 1)
  {
    uint64_t v59 = 0;
    do
    {
      uint64_t v60 = *(void *)(*(void *)(*(void *)(a1 + 64) + 24) + 8 * v59);
      uint64_t v70 = *(void *)(v60 + 8);
      uint64_t v61 = find_entry(v7, &v70, 8uLL, 0);
      if (*v61) {
        uint64_t v62 = *(void *)(*v61 + 32);
      }
      else {
        uint64_t v62 = 0;
      }
      uint64_t v70 = *(void *)(v60 + 8);
      uint64_t v63 = find_entry(v6, &v70, 8uLL, 0);
      WriteGTMTLSMBuffer_restore((uint64_t)v67, v62, *(void *)(*(void *)(*v63 + 32) + 8));
      ++v59;
    }
    while (v59 < *(int *)(a1 + 344));
  }
  if (*(int *)(a1 + 480) >= 1)
  {
    uint64_t v64 = 0;
    do
      WriteGTMTLSMResidencySet((uint64_t)v67, (void *)a1, *(void *)(*(void *)(*(void *)(a1 + 336) + 24) + 8 * v64++), 1);
    while (v64 < *(int *)(a1 + 480));
  }
  if (*(int *)(a1 + 432) >= 1)
  {
    uint64_t v65 = 0;
    do
      WriteGTMTLSMCommandQueue_residencySetsDelta(v67, (void *)a1, *(void *)(*(void *)(*(void *)(a1 + 240) + 24) + 8 * v65++));
    while (v65 < *(int *)(a1 + 432));
  }
  apr_pool_cleanup_kill(*v10, v10, (apr_status_t (__cdecl *)(void *))fbstream_cleanup);
  return fbstream_cleanup((uint64_t)v10);
}

void WriteGTMTLSMCommandQueue_residencySetsDelta(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[2];
  if (a3) {
    uint64_t v6 = *(void *)(a3 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v38 = v6;
  uint64_t v7 = *find_entry(v5, &v38, 8uLL, 0);
  if (v7) {
    uint64_t v8 = *(void *)(v7 + 32);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void *)(v8 + 8);
  newpool = 0;
  apr_pool_create_ex(&newpool, 0, 0, 0);
  int v10 = newpool;
  uint64_t v11 = (apr_pool_t **)apr_hash_make(newpool);
  GatherCommandQueueResidencySetsUpToIndexInternal(v11, v8, a2[3], a2[5], a2[6] + a2[5], 0);
  uint64_t v12 = (apr_pool_t **)apr_hash_make(v10);
  unint64_t v13 = a2[6] + a2[5];
  GatherCommandQueueResidencySetsUpToIndexInternal(v12, v8, a2[3], v13, v13, 0);
  uint64_t v14 = apr_array_make(v10, 16, 8);
  unsigned int v15 = apr_array_make(v10, 16, 8);
  FillArrayFromHashDifference(v14, v11, (uint64_t)v12);
  long long v16 = FillArrayFromHashDifference(v15, v12, (uint64_t)v11);
  uint64_t nelts = v14->nelts;
  if ((int)nelts >= 1)
  {
    uint64_t v38 = v9;
    __chkstk_darwin(v16, 8 * nelts);
    BOOL v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFF0);
    bzero(v19, v18);
    name_array_11364(v5, v19, (uint64_t *)v14->elts, nelts);
    uint64_t v39 = v19;
    uint64_t v40 = v14->nelts;
    DYTraceEncode_MTLCommandQueue_addResidencySets_count((uint64_t)&v38, a1[1], *((unsigned int *)a1 + 4), 0, 0);
    int v20 = (unsigned int *)a1[1];
    uint64_t v21 = *v20;
    if ((*((unsigned char *)v20 + 33) & 0x10) != 0)
    {
      uint64_t v23 = (unsigned int *)a1[1];
      unint64_t v22 = *v20;
      do
      {
        uint64_t v23 = (unsigned int *)((char *)v23 + v21);
        uint64_t v21 = *v23;
        v22 += v21;
      }
      while ((*((unsigned char *)v23 + 33) & 0x20) == 0);
    }
    else
    {
      unint64_t v22 = *v20;
    }
    fbstream_write(a1[3], (uint64_t)v20, v22);
  }
  uint64_t v24 = v15->nelts;
  if ((int)v24 >= 1)
  {
    uint64_t v38 = v9;
    __chkstk_darwin(v16, 8 * v24);
    char v26 = (char *)&v37 - ((v25 + 15) & 0xFFFFFFFF0);
    bzero(v26, v25);
    name_array_11364(v5, v26, (uint64_t *)v15->elts, v24);
    uint64_t v39 = v26;
    uint64_t v40 = v15->nelts;
    DYTraceEncode_MTLCommandQueue_removeResidencySets_count((uint64_t)&v38, a1[1], *((unsigned int *)a1 + 4), 0, 0);
    uint64_t v27 = (unsigned int *)a1[1];
    uint64_t v28 = *v27;
    if ((*((unsigned char *)v27 + 33) & 0x10) != 0)
    {
      uint64_t v30 = (unsigned int *)a1[1];
      unint64_t v29 = *v27;
      do
      {
        uint64_t v30 = (unsigned int *)((char *)v30 + v28);
        uint64_t v28 = *v30;
        v29 += v28;
      }
      while ((*((unsigned char *)v30 + 33) & 0x20) == 0);
    }
    else
    {
      unint64_t v29 = *v27;
    }
    fbstream_write(a1[3], (uint64_t)v27, v29);
  }
  apr_pool_destroy(v10);
  uint64_t v31 = *a1;
  uint64_t v32 = a1[1];
  *(void *)(v32 + 16) = 0;
  *(void *)(v32 + 24) = 0;
  *(void *)(v32 + 8) = 0;
  *(_DWORD *)(v32 + 32) = 70;
  *(_DWORD *)(v32 + 36) = 67;
  *(void *)uint64_t v32 = 0xFFFFD00800000028;
  *(void *)(v32 + 40) = v31;
  *(_DWORD *)uint64_t v32 = 48;
  uint64_t v33 = (unsigned int *)a1[1];
  uint64_t v34 = *v33;
  if ((*((unsigned char *)v33 + 33) & 0x10) != 0)
  {
    uint64_t v36 = (unsigned int *)a1[1];
    unint64_t v35 = *v33;
    do
    {
      uint64_t v36 = (unsigned int *)((char *)v36 + v34);
      uint64_t v34 = *v36;
      v35 += v34;
    }
    while ((*((unsigned char *)v36 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v35 = *v33;
  }
  fbstream_write(a1[3], (uint64_t)v33, v35);
}

uint64_t GTTraceDump_writeStartup0(uint64_t a1, apr_pool_t *a2, apr_pool_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)__s = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)__s;
  uint64_t v8 = *(void *)(*(void *)(*find_entry(v6, __s, 8uLL, 0) + 32) + 8);
  uint64_t v9 = (unsigned int *)apr_palloc(a3, 0x100000uLL);
  int v10 = fbstream_open(a2, (uint64_t)"startup-0-platform", a3);
  uint64_t v11 = GTMTLSMContext_getObject(*(uint64_t **)(a1 + 568), v7, *(void *)(a1 + 40))[5];
  *(void *)__s = 512;
  uint64_t v12 = (const char *)StoreMTLDeviceDescriptorUsingEncode((uint64_t)a2, v11, (uint64_t)(v9 + 262016), __s);
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *((void *)v9 + 3) = 0;
  *((void *)v9 + 4) = 0x554300000000;
  *(void *)uint64_t v9 = 0xFFFFD80100000028;
  *((void *)v9 + 5) = v8;
  unsigned int *v9 = 48;
  AppendString(v12, (int *)v9);
  uint64_t v13 = *v9;
  unint64_t v14 = (v13 + 3) & 0xFFFFFFFC;
  bzero((char *)v9 + v13, v14 - v13);
  unsigned int *v9 = v14;
  unsigned int v15 = v9[8];
  v9[8] = v15 | 4;
  if ((v15 & 0x1000) != 0)
  {
    LODWORD(v16) = v14;
    uint64_t v17 = v9;
    do
    {
      uint64_t v17 = (unsigned int *)((char *)v17 + v16);
      uint64_t v16 = *v17;
      v14 += v16;
    }
    while ((*((unsigned char *)v17 + 33) & 0x20) == 0);
  }
  fbstream_write((uint64_t)v10, (uint64_t)v9, v14);
  size_t v18 = apr_array_make(a3, 128, 8);
  v18->size_t nelts = 0;
  uint64_t v19 = *(void *)(*(void *)(a1 + 568) + 16);
  int v20 = *(_DWORD *)(v19 + 12);
  if (v20 >= 1)
  {
    uint64_t v21 = 0;
    while (1)
    {
      uint64_t v22 = *(void *)(*(void *)(v19 + 24) + 8 * v21);
      uint64_t v23 = *(void *)(v22 + 104);
      if (!v23) {
        break;
      }
      uint64_t v24 = *(void *)(v23 + 8);
      if (v24) {
        goto LABEL_8;
      }
LABEL_9:
      if (++v21 >= v20)
      {
        size_t nelts = v18->nelts;
        if ((int)nelts > 0)
        {
          qsort(v18->elts, nelts, v18->elt_size, (int (__cdecl *)(const void *, const void *))ResourceIndicesCompare);
          v117[0] = v8;
          v117[1] = 0;
          elts = (uint64_t *)v18->elts;
          unint64_t v27 = v18->elt_size * (uint64_t)v18->nelts;
          HashBytes(elts, v27, __s);
          GTMTLCaptureState_storePointer((uint64_t)a2, __s, elts, (const void *)v27);
          long long v120 = v125;
          long long v121 = v126;
          char v122 = v127;
          long long v118 = *(_OWORD *)__s;
          long long v119 = v124;
          uint64_t v28 = v18->nelts;
          v117[2] = &v118;
          v117[3] = v28;
          DYTraceEncode_MTLDevice_reserveResourceIndicesForResourceType_indices_indexCount((uint64_t)v117, v9, 0x100000uLL, 0, 0);
          uint64_t v29 = *v9;
          if ((*((unsigned char *)v9 + 33) & 0x10) != 0)
          {
            uint64_t v31 = v9;
            unint64_t v30 = *v9;
            do
            {
              uint64_t v31 = (unsigned int *)((char *)v31 + v29);
              uint64_t v29 = *v31;
              v30 += v29;
            }
            while ((*((unsigned char *)v31 + 33) & 0x20) == 0);
          }
          else
          {
            unint64_t v30 = *v9;
          }
          fbstream_write((uint64_t)v10, (uint64_t)v9, v30);
        }
        goto LABEL_19;
      }
    }
    uint64_t v24 = *(void *)(v22 + 176);
    if (!v24) {
      goto LABEL_9;
    }
LABEL_8:
    *(void *)apr_array_push(v18) = v24;
    int v20 = *(_DWORD *)(v19 + 12);
    goto LABEL_9;
  }
LABEL_19:
  v18->size_t nelts = 0;
  uint64_t v32 = *(void *)(*(void *)(a1 + 568) + 24);
  int v33 = *(_DWORD *)(v32 + 12);
  if (v33 >= 1)
  {
    for (uint64_t i = 0; i < v33; ++i)
    {
      uint64_t v35 = *(void *)(*(void *)(*(void *)(v32 + 24) + 8 * i) + 48);
      if (v35)
      {
        uint64_t v36 = *(void *)(v35 + 16);
        if (v36)
        {
          *(void *)apr_array_push(v18) = v36;
          int v33 = *(_DWORD *)(v32 + 12);
        }
      }
    }
    size_t v37 = v18->nelts;
    if ((int)v37 > 0)
    {
      qsort(v18->elts, v37, v18->elt_size, (int (__cdecl *)(const void *, const void *))ResourceIndicesCompare);
      v116[0] = v8;
      v116[1] = 1;
      uint64_t v38 = (uint64_t *)v18->elts;
      unint64_t v39 = v18->elt_size * (uint64_t)v18->nelts;
      HashBytes(v38, v39, __s);
      GTMTLCaptureState_storePointer((uint64_t)a2, __s, v38, (const void *)v39);
      long long v120 = v125;
      long long v121 = v126;
      char v122 = v127;
      long long v118 = *(_OWORD *)__s;
      long long v119 = v124;
      uint64_t v40 = v18->nelts;
      v116[2] = &v118;
      v116[3] = v40;
      DYTraceEncode_MTLDevice_reserveResourceIndicesForResourceType_indices_indexCount((uint64_t)v116, v9, 0x100000uLL, 0, 0);
      uint64_t v41 = *v9;
      if ((*((unsigned char *)v9 + 33) & 0x10) != 0)
      {
        uint64_t v43 = v9;
        unint64_t v42 = *v9;
        do
        {
          uint64_t v43 = (unsigned int *)((char *)v43 + v41);
          uint64_t v41 = *v43;
          v42 += v41;
        }
        while ((*((unsigned char *)v43 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v42 = *v9;
      }
      fbstream_write((uint64_t)v10, (uint64_t)v9, v42);
    }
  }
  v18->size_t nelts = 0;
  uint64_t v44 = *(void *)(a1 + 568);
  uint64_t v45 = *(void *)(v44 + 32);
  int v46 = *(_DWORD *)(v45 + 12);
  if (v46 >= 1)
  {
    uint64_t v47 = 0;
    while (1)
    {
      uint64_t v48 = *(void *)(*(void *)(v45 + 24) + 8 * v47);
      uint64_t v49 = *(void *)(v48 + 48);
      if (v49)
      {
        uint64_t v50 = *(void *)(v49 + 1280);
        if (!v50) {
          goto LABEL_39;
        }
      }
      else
      {
        uint64_t v51 = *(void *)(v48 + 72);
        if (!v51) {
          goto LABEL_39;
        }
        uint64_t v50 = *(void *)(v51 + 384);
        if (!v50) {
          goto LABEL_39;
        }
      }
      *(void *)apr_array_push(v18) = v50;
      int v46 = *(_DWORD *)(v45 + 12);
LABEL_39:
      if (++v47 >= v46)
      {
        uint64_t v44 = *(void *)(a1 + 568);
        break;
      }
    }
  }
  uint64_t v52 = *(void *)(v44 + 40);
  int v53 = *(_DWORD *)(v52 + 12);
  if (v53 >= 1)
  {
    for (uint64_t j = 0; j < v53; ++j)
    {
      uint64_t v55 = *(void *)(*(void *)(*(void *)(v52 + 24) + 8 * j) + 104);
      if (v55)
      {
        *(void *)apr_array_push(v18) = v55;
        int v53 = *(_DWORD *)(v52 + 12);
      }
    }
  }
  size_t v56 = v18->nelts;
  if ((int)v56 > 0)
  {
    qsort(v18->elts, v56, v18->elt_size, (int (__cdecl *)(const void *, const void *))ResourceIndicesCompare);
    v115[0] = v8;
    v115[1] = 4;
    uint64_t v57 = (uint64_t *)v18->elts;
    unint64_t v58 = v18->elt_size * (uint64_t)v18->nelts;
    HashBytes(v57, v58, __s);
    GTMTLCaptureState_storePointer((uint64_t)a2, __s, v57, (const void *)v58);
    long long v120 = v125;
    long long v121 = v126;
    char v122 = v127;
    long long v118 = *(_OWORD *)__s;
    long long v119 = v124;
    uint64_t v59 = v18->nelts;
    v115[2] = &v118;
    v115[3] = v59;
    DYTraceEncode_MTLDevice_reserveResourceIndicesForResourceType_indices_indexCount((uint64_t)v115, v9, 0x100000uLL, 0, 0);
    uint64_t v60 = *v9;
    if ((*((unsigned char *)v9 + 33) & 0x10) != 0)
    {
      uint64_t v62 = v9;
      unint64_t v61 = *v9;
      do
      {
        uint64_t v62 = (unsigned int *)((char *)v62 + v60);
        uint64_t v60 = *v62;
        v61 += v60;
      }
      while ((*((unsigned char *)v62 + 33) & 0x20) == 0);
    }
    else
    {
      unint64_t v61 = *v9;
    }
    fbstream_write((uint64_t)v10, (uint64_t)v9, v61);
  }
  v18->size_t nelts = 0;
  uint64_t v63 = *(void *)(*(void *)(a1 + 568) + 48);
  int v64 = *(_DWORD *)(v63 + 12);
  if (v64 >= 1)
  {
    for (uint64_t k = 0; k < v64; ++k)
    {
      uint64_t v66 = *(uint64_t **)(*(void *)(*(void *)(v63 + 24) + 8 * k) + 104);
      if (v66 && *v66)
      {
        uint64_t v67 = *v66;
        *(void *)apr_array_push(v18) = v67;
        int v64 = *(_DWORD *)(v63 + 12);
      }
    }
    size_t v68 = v18->nelts;
    if ((int)v68 > 0)
    {
      qsort(v18->elts, v68, v18->elt_size, (int (__cdecl *)(const void *, const void *))ResourceIndicesCompare);
      v114[0] = v8;
      v114[1] = 5;
      uint64_t v69 = (uint64_t *)v18->elts;
      unint64_t v70 = v18->elt_size * (uint64_t)v18->nelts;
      HashBytes(v69, v70, __s);
      GTMTLCaptureState_storePointer((uint64_t)a2, __s, v69, (const void *)v70);
      long long v120 = v125;
      long long v121 = v126;
      char v122 = v127;
      long long v118 = *(_OWORD *)__s;
      long long v119 = v124;
      uint64_t v71 = v18->nelts;
      v114[2] = &v118;
      v114[3] = v71;
      DYTraceEncode_MTLDevice_reserveResourceIndicesForResourceType_indices_indexCount((uint64_t)v114, v9, 0x100000uLL, 0, 0);
      uint64_t v72 = *v9;
      if ((*((unsigned char *)v9 + 33) & 0x10) != 0)
      {
        uint64_t v74 = v9;
        unint64_t v73 = *v9;
        do
        {
          uint64_t v74 = (unsigned int *)((char *)v74 + v72);
          uint64_t v72 = *v74;
          v73 += v72;
        }
        while ((*((unsigned char *)v74 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v73 = *v9;
      }
      fbstream_write((uint64_t)v10, (uint64_t)v9, v73);
    }
  }
  v18->size_t nelts = 0;
  uint64_t v75 = *(void *)(*(void *)(a1 + 568) + 56);
  int v76 = *(_DWORD *)(v75 + 12);
  if (v76 >= 1)
  {
    for (uint64_t m = 0; m < v76; ++m)
    {
      uint64_t v78 = *(void *)(*(void *)(*(void *)(v75 + 24) + 8 * m) + 104);
      if (v78)
      {
        uint64_t v79 = *(void *)(v78 + 8);
        if (v79)
        {
          *(void *)apr_array_push(v18) = v79;
          int v76 = *(_DWORD *)(v75 + 12);
        }
      }
    }
    size_t v80 = v18->nelts;
    if ((int)v80 > 0)
    {
      qsort(v18->elts, v80, v18->elt_size, (int (__cdecl *)(const void *, const void *))ResourceIndicesCompare);
      v113[0] = v8;
      v113[1] = 6;
      unint64_t v81 = (uint64_t *)v18->elts;
      unint64_t v82 = v18->elt_size * (uint64_t)v18->nelts;
      HashBytes(v81, v82, __s);
      GTMTLCaptureState_storePointer((uint64_t)a2, __s, v81, (const void *)v82);
      long long v120 = v125;
      long long v121 = v126;
      char v122 = v127;
      long long v118 = *(_OWORD *)__s;
      long long v119 = v124;
      uint64_t v83 = v18->nelts;
      v113[2] = &v118;
      v113[3] = v83;
      DYTraceEncode_MTLDevice_reserveResourceIndicesForResourceType_indices_indexCount((uint64_t)v113, v9, 0x100000uLL, 0, 0);
      uint64_t v84 = *v9;
      if ((*((unsigned char *)v9 + 33) & 0x10) != 0)
      {
        uint64_t v86 = v9;
        unint64_t v85 = *v9;
        do
        {
          uint64_t v86 = (unsigned int *)((char *)v86 + v84);
          uint64_t v84 = *v86;
          v85 += v84;
        }
        while ((*((unsigned char *)v86 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v85 = *v9;
      }
      fbstream_write((uint64_t)v10, (uint64_t)v9, v85);
    }
  }
  v18->size_t nelts = 0;
  uint64_t v87 = *(void *)(*(void *)(a1 + 568) + 64);
  int v88 = *(_DWORD *)(v87 + 12);
  if (v88 >= 1)
  {
    for (uint64_t n = 0; n < v88; ++n)
    {
      uint64_t v90 = *(uint64_t **)(*(void *)(*(void *)(v87 + 24) + 8 * n) + 104);
      if (v90 && *v90)
      {
        uint64_t v91 = *v90;
        *(void *)apr_array_push(v18) = v91;
        int v88 = *(_DWORD *)(v87 + 12);
      }
    }
    size_t v92 = v18->nelts;
    if ((int)v92 > 0)
    {
      qsort(v18->elts, v92, v18->elt_size, (int (__cdecl *)(const void *, const void *))ResourceIndicesCompare);
      v112[0] = v8;
      v112[1] = 7;
      uint64_t v93 = (uint64_t *)v18->elts;
      unint64_t v94 = v18->elt_size * (uint64_t)v18->nelts;
      HashBytes(v93, v94, __s);
      GTMTLCaptureState_storePointer((uint64_t)a2, __s, v93, (const void *)v94);
      long long v120 = v125;
      long long v121 = v126;
      char v122 = v127;
      long long v118 = *(_OWORD *)__s;
      long long v119 = v124;
      uint64_t v95 = v18->nelts;
      v112[2] = &v118;
      v112[3] = v95;
      DYTraceEncode_MTLDevice_reserveResourceIndicesForResourceType_indices_indexCount((uint64_t)v112, v9, 0x100000uLL, 0, 0);
      uint64_t v96 = *v9;
      if ((*((unsigned char *)v9 + 33) & 0x10) != 0)
      {
        long long v98 = v9;
        unint64_t v97 = *v9;
        do
        {
          long long v98 = (unsigned int *)((char *)v98 + v96);
          uint64_t v96 = *v98;
          v97 += v96;
        }
        while ((*((unsigned char *)v98 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v97 = *v9;
      }
      fbstream_write((uint64_t)v10, (uint64_t)v9, v97);
    }
  }
  v18->size_t nelts = 0;
  uint64_t v99 = *(void *)(*(void *)(a1 + 568) + 72);
  int v100 = *(_DWORD *)(v99 + 12);
  if (v100 >= 1)
  {
    for (iuint64_t i = 0; ii < v100; ++ii)
    {
      uint64_t v102 = *(void *)(*(void *)(*(void *)(v99 + 24) + 8 * ii) + 152);
      if (v102)
      {
        *(void *)apr_array_push(v18) = v102;
        int v100 = *(_DWORD *)(v99 + 12);
      }
    }
    size_t v103 = v18->nelts;
    if ((int)v103 > 0)
    {
      qsort(v18->elts, v103, v18->elt_size, (int (__cdecl *)(const void *, const void *))ResourceIndicesCompare);
      v111[0] = v8;
      v111[1] = 8;
      uint64_t v104 = (uint64_t *)v18->elts;
      unint64_t v105 = v18->elt_size * (uint64_t)v18->nelts;
      HashBytes(v104, v105, __s);
      GTMTLCaptureState_storePointer((uint64_t)a2, __s, v104, (const void *)v105);
      long long v120 = v125;
      long long v121 = v126;
      char v122 = v127;
      long long v118 = *(_OWORD *)__s;
      long long v119 = v124;
      uint64_t v106 = v18->nelts;
      v111[2] = &v118;
      v111[3] = v106;
      DYTraceEncode_MTLDevice_reserveResourceIndicesForResourceType_indices_indexCount((uint64_t)v111, v9, 0x100000uLL, 0, 0);
      uint64_t v107 = *v9;
      if ((*((unsigned char *)v9 + 33) & 0x10) != 0)
      {
        uint64_t v109 = v9;
        unint64_t v108 = *v9;
        do
        {
          uint64_t v109 = (unsigned int *)((char *)v109 + v107);
          uint64_t v107 = *v109;
          v108 += v107;
        }
        while ((*((unsigned char *)v109 + 33) & 0x20) == 0);
      }
      else
      {
        unint64_t v108 = *v9;
      }
      fbstream_write((uint64_t)v10, (uint64_t)v9, v108);
    }
  }
  apr_pool_cleanup_kill(*v10, v10, (apr_status_t (__cdecl *)(void *))fbstream_cleanup);
  return fbstream_cleanup((uint64_t)v10);
}

uint64_t ResourceIndicesCompare(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 != *a2;
  }
}

void WriteGTMTLSMLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)a1;
  Object = GTMTLSMContext_getObject(*(uint64_t **)(a2 + 568), *(void *)(a3 + 40), *(void *)(a2 + 40));
  uint64_t v76 = v7;
  uint64_t v79 = *(void *)(a3 + 40);
  uint64_t v77 = *(const char **)(*(void *)(*find_entry(v6, &v79, 8uLL, 0) + 32) + 8);
  uint64_t v9 = Object[5];
  uint64_t v10 = *(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512;
  uint64_t v79 = 512;
  uint64_t v78 = StoreMTLDeviceDescriptorUsingEncode(*(void *)(a1 + 32), v9, v10, &v79);
  DYTraceEncode_CAMetalLayer_setDevice((uint64_t)&v76, *(unsigned int **)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);
  uint64_t v11 = *(unsigned int **)(a1 + 8);
  uint64_t v12 = *v11;
  if ((*((unsigned char *)v11 + 33) & 0x10) != 0)
  {
    unint64_t v14 = *(unsigned int **)(a1 + 8);
    unint64_t v13 = *v11;
    do
    {
      unint64_t v14 = (unsigned int *)((char *)v14 + v12);
      uint64_t v12 = *v14;
      v13 += v12;
    }
    while ((*((unsigned char *)v14 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v13 = *v11;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v11, v13);
  int v15 = *(unsigned __int8 *)(a3 + 274);
  uint64_t v16 = *(void *)(a1 + 8);
  *(void *)(v16 + 16) = 0;
  *(void *)(v16 + 24) = 0;
  *(void *)(v16 + 8) = 0;
  *(void *)(v16 + 32) = 0x69754300000000;
  *(void *)uint64_t v16 = 0xFFFFE40800000028;
  *(void *)(v16 + 40) = v7;
  *(_DWORD *)(v16 + 48) = v15;
  *(_DWORD *)uint64_t v16 = 52;
  uint64_t v17 = *(unsigned int **)(a1 + 8);
  uint64_t v18 = *v17;
  if ((*((unsigned char *)v17 + 33) & 0x10) != 0)
  {
    int v20 = *(unsigned int **)(a1 + 8);
    unint64_t v19 = *v17;
    do
    {
      int v20 = (unsigned int *)((char *)v20 + v18);
      uint64_t v18 = *v20;
      v19 += v18;
    }
    while ((*((unsigned char *)v20 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v19 = *v17;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v17, v19);
  uint64_t v21 = *(unsigned __int16 *)(a3 + 272);
  uint64_t v22 = *(void **)(a1 + 8);
  void v22[2] = 0;
  v22[3] = 0;
  v22[1] = 0;
  v22[4] = 0x6C754300000000;
  *uint64_t v22 = 0xFFFFE40300000028;
  v22[5] = v7;
  v22[6] = v21;
  *(_DWORD *)uint64_t v22 = 56;
  uint64_t v23 = *(unsigned int **)(a1 + 8);
  uint64_t v24 = *v23;
  if ((*((unsigned char *)v23 + 33) & 0x10) != 0)
  {
    char v26 = *(unsigned int **)(a1 + 8);
    unint64_t v25 = *v23;
    do
    {
      char v26 = (unsigned int *)((char *)v26 + v24);
      uint64_t v24 = *v26;
      v25 += v24;
    }
    while ((*((unsigned char *)v26 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v25 = *v23;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v23, v25);
  long long v27 = *(_OWORD *)(a3 + 176);
  uint64_t v28 = *(void *)(a1 + 8);
  *(void *)(v28 + 8) = 0;
  *(void *)(v28 + 16) = 0;
  *(void *)(v28 + 24) = 0;
  *(void *)uint64_t v28 = 0xFFFFE40400000024;
  *(_DWORD *)(v28 + 32) = 0;
  strcpy((char *)(v28 + 36), "C@2d");
  *(_WORD *)(v28 + 41) = 0;
  *(unsigned char *)(v28 + 43) = 0;
  *(void *)(v28 + 44) = v7;
  *(_OWORD *)(v28 + 52) = v27;
  *(_DWORD *)uint64_t v28 = 68;
  uint64_t v29 = *(unsigned int **)(a1 + 8);
  uint64_t v30 = *v29;
  if ((*((unsigned char *)v29 + 33) & 0x10) != 0)
  {
    uint64_t v32 = *(unsigned int **)(a1 + 8);
    unint64_t v31 = *v29;
    do
    {
      uint64_t v32 = (unsigned int *)((char *)v32 + v30);
      uint64_t v30 = *v32;
      v31 += v30;
    }
    while ((*((unsigned char *)v32 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v31 = *v29;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v29, v31);
  if (!*(_DWORD *)(a2 + 484))
  {
    int v33 = *(unsigned __int8 *)(a3 + 275);
    uint64_t v34 = *(void *)(a1 + 8);
    *(void *)(v34 + 16) = 0;
    *(void *)(v34 + 24) = 0;
    *(void *)(v34 + 8) = 0;
    *(void *)(v34 + 32) = 0x69754300000000;
    *(void *)uint64_t v34 = 0xFFFFE40E00000028;
    *(void *)(v34 + 40) = v7;
    *(_DWORD *)(v34 + 48) = v33;
    *(_DWORD *)uint64_t v34 = 52;
    uint64_t v35 = *(unsigned int **)(a1 + 8);
    uint64_t v36 = *v35;
    if ((*((unsigned char *)v35 + 33) & 0x10) != 0)
    {
      uint64_t v38 = *(unsigned int **)(a1 + 8);
      unint64_t v37 = *v35;
      do
      {
        uint64_t v38 = (unsigned int *)((char *)v38 + v36);
        uint64_t v36 = *v38;
        v37 += v36;
      }
      while ((*((unsigned char *)v38 + 33) & 0x20) == 0);
    }
    else
    {
      unint64_t v37 = *v35;
    }
    fbstream_write(*(void *)(a1 + 24), (uint64_t)v35, v37);
  }
  long long v39 = *(_OWORD *)(a3 + 216);
  long long v40 = *(_OWORD *)(a3 + 232);
  uint64_t v41 = *(void *)(a3 + 208);
  uint64_t v42 = *(void *)(a1 + 8);
  *(void *)(v42 + 8) = 0;
  *(void *)(v42 + 16) = 0;
  *(void *)(v42 + 24) = 0;
  *(void *)uint64_t v42 = 0xFFFFE40600000024;
  *(_DWORD *)(v42 + 32) = 0;
  *(void *)(v42 + 36) = 0x6464344043;
  *(void *)(v42 + 44) = v7;
  *(_OWORD *)(v42 + 52) = v39;
  *(_OWORD *)(v42 + 68) = v40;
  *(void *)(v42 + 84) = v41;
  *(_DWORD *)uint64_t v42 = 92;
  uint64_t v43 = *(unsigned int **)(a1 + 8);
  uint64_t v44 = *v43;
  if ((*((unsigned char *)v43 + 33) & 0x10) != 0)
  {
    int v46 = *(unsigned int **)(a1 + 8);
    unint64_t v45 = *v43;
    do
    {
      int v46 = (unsigned int *)((char *)v46 + v44);
      uint64_t v44 = *v46;
      v45 += v44;
    }
    while ((*((unsigned char *)v46 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v45 = *v43;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v43, v45);
  long long v47 = *(_OWORD *)(a3 + 48);
  long long v48 = *(_OWORD *)(a3 + 64);
  long long v49 = *(_OWORD *)(a3 + 80);
  long long v50 = *(_OWORD *)(a3 + 96);
  long long v51 = *(_OWORD *)(a3 + 112);
  long long v52 = *(_OWORD *)(a3 + 128);
  long long v53 = *(_OWORD *)(a3 + 144);
  long long v54 = *(_OWORD *)(a3 + 160);
  long long v55 = *(_OWORD *)(a3 + 248);
  uint64_t v56 = *(void *)(a1 + 8);
  *(void *)(v56 + 8) = 0;
  *(void *)(v56 + 16) = 0;
  *(void *)(v56 + 24) = 0;
  *(_DWORD *)(v56 + 32) = 0;
  *(void *)(v56 + 36) = 0x64646436314070;
  *(void *)uint64_t v56 = 0xFFFFE0090000002CLL;
  *(void *)(v56 + 44) = v7;
  *(_OWORD *)(v56 + 52) = v47;
  *(_OWORD *)(v56 + 68) = v48;
  *(_OWORD *)(v56 + 84) = v49;
  *(_OWORD *)(v56 + 100) = v50;
  *(_OWORD *)(v56 + 116) = v51;
  *(_OWORD *)(v56 + 132) = v52;
  *(_OWORD *)(v56 + 148) = v53;
  *(_OWORD *)(v56 + 164) = v54;
  *(_OWORD *)(v56 + 180) = v55;
  *(_DWORD *)uint64_t v56 = 196;
  uint64_t v57 = *(unsigned int **)(a1 + 8);
  unsigned int v58 = v57[8];
  v57[8] = v58 | 0x10004;
  uint64_t v59 = *v57;
  if ((v58 & 0x1000) != 0)
  {
    unint64_t v61 = v57;
    unint64_t v60 = *v57;
    do
    {
      unint64_t v61 = (unsigned int *)((char *)v61 + v59);
      uint64_t v59 = *v61;
      v60 += v59;
    }
    while ((*((unsigned char *)v61 + 33) & 0x20) == 0);
  }
  else
  {
    unint64_t v60 = *v57;
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v57, v60);
  long long v62 = *(_OWORD *)(a3 + 192);
  uint64_t v63 = *(void *)(a1 + 8);
  *(void *)(v63 + 8) = 0;
  *(void *)(v63 + 16) = 0;
  *(void *)(v63 + 24) = 0;
  *(void *)uint64_t v63 = 0xFFFFE00B00000024;
  *(_DWORD *)(v63 + 32) = 0;
  strcpy((char *)(v63 + 36), "p@2d");
  *(_WORD *)(v63 + 41) = 0;
  *(unsigned char *)(v63 + 43) = 0;
  *(void *)(v63 + 44) = v7;
  *(_OWORD *)(v63 + 52) = v62;
  *(_DWORD *)uint64_t v63 = 68;
  int v64 = *(unsigned int **)(a1 + 8);
  LODWORD(v63) = v64[8];
  v64[8] = v63 | 0x10004;
  unint64_t v65 = *v64;
  if ((v63 & 0x1000) != 0)
  {
    uint64_t v66 = *v64;
    uint64_t v67 = v64;
    do
    {
      uint64_t v67 = (unsigned int *)((char *)v67 + v66);
      uint64_t v66 = *v67;
      v65 += v66;
    }
    while ((*((unsigned char *)v67 + 33) & 0x20) == 0);
  }
  fbstream_write(*(void *)(a1 + 24), (uint64_t)v64, v65);
  size_t v68 = *(const char **)(a3 + 264);
  if (v68)
  {
    uint64_t v76 = v7;
    uint64_t v77 = v68;
    GTTrace_storePointer(a1, -7153, (uint64_t)&v76, (char *)(*(void *)(a1 + 8) + *(unsigned int *)(a1 + 16) - 512), 512, v6);
    uint64_t v69 = *(unsigned int **)(a1 + 8);
    *((void *)v69 + 1) = 0;
    *((void *)v69 + 2) = 0;
    *((void *)v69 + 3) = 0;
    *((void *)v69 + 4) = 0x554300000000;
    *(void *)uint64_t v69 = 0xFFFFE40F00000028;
    *((void *)v69 + 5) = v76;
    *uint64_t v69 = 48;
    AppendString(v77, (int *)v69);
    uint64_t v70 = *v69;
    uint64_t v71 = (v70 + 3) & 0xFFFFFFFC;
    bzero((char *)v69 + v70, v71 - v70);
    *uint64_t v69 = v71;
    uint64_t v72 = *(unsigned int **)(a1 + 8);
    uint64_t v73 = *v72;
    if ((*((unsigned char *)v72 + 33) & 0x10) != 0)
    {
      uint64_t v75 = *(unsigned int **)(a1 + 8);
      unint64_t v74 = *v72;
      do
      {
        uint64_t v75 = (unsigned int *)((char *)v75 + v73);
        uint64_t v73 = *v75;
        v74 += v73;
      }
      while ((*((unsigned char *)v75 + 33) & 0x20) == 0);
    }
    else
    {
      unint64_t v74 = *v72;
    }
    fbstream_write(*(void *)(a1 + 24), (uint64_t)v72, v74);
  }
}

void DYTraceEncode_CALayer_setAnchorPoint(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFE00B00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "p@2d");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(_OWORD *)(a2 + 52) = *(_OWORD *)(a1 + 8);
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_CALayer_setTransform(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    uint64_t v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x64646436314070;
  *(void *)a2 = 0xFFFFE0090000002CLL;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  long long v11 = *(_OWORD *)(a1 + 8);
  long long v12 = *(_OWORD *)(a1 + 24);
  long long v13 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 100) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 84) = v13;
  *(_OWORD *)(a2 + 68) = v12;
  *(_OWORD *)(a2 + 52) = v11;
  long long v14 = *(_OWORD *)(a1 + 72);
  long long v15 = *(_OWORD *)(a1 + 88);
  long long v16 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 164) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 148) = v16;
  *(_OWORD *)(a2 + 132) = v15;
  *(_OWORD *)(a2 + 116) = v14;
  *(_DWORD *)a2 = 180;
  *(void *)(a2 + 180) = *(void *)(a1 + 136);
  *(_DWORD *)a2 = 188;
  *(void *)(a2 + 188) = *(void *)(a1 + 144);
  unint64_t v17 = 196;
  *(_DWORD *)a2 = 196;
  if (__src)
  {
    int v18 = 8 * *__src;
    memcpy((void *)(a2 + 196), __src, v18 + 8);
    uint64_t v19 = (v18 + 204);
    unint64_t v17 = (v18 + 207) & 0xFFFFFFFC;
    bzero((void *)(a2 + v19), v17 - v19);
    *(_DWORD *)a2 = v17;
  }
  if (v17 > a3)
  {
    if (a5)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      uint64_t v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_CAMetalLayer_setBounds_contentsScale_windowBounds_windowProperties(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    uint64_t v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFE40900000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "C@4dd@4dull");
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  long long v11 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 72) = v11;
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = *(void *)(a1 + 40);
  *(_DWORD *)a2 = 96;
  long long v12 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 112) = v12;
  *(_DWORD *)a2 = 128;
  *(void *)(a2 + 128) = *(void *)(a1 + 80);
  *(void *)(a2 + 136) = *(int *)(a1 + 96);
  unint64_t v13 = 144;
  *(_DWORD *)a2 = 144;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 144), __src, v14 + 8);
    uint64_t v15 = (v14 + 152);
    unint64_t v13 = (v14 + 155) & 0xFFFFFFF8;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }
  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      uint64_t v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }
}

void DYTraceEncode_EnterStateGroup(uint64_t a1, unsigned int *a2, unint64_t a3, uint64_t a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v9 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v9;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0xFFFFD00700000024;
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0x7775534300000046;
  *(unsigned int *)((char *)a2 + 39) = 7828855;
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v10 = *a2;
  uint64_t v11 = (v10 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v10, v11 - v10);
  *a2 = v11;
  *(void *)((char *)a2 + v11) = *(void *)(a1 + 16);
  unsigned int v12 = *a2 + 8;
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 24);
  unint64_t v13 = *a2 + 8;
  *a2 = v13;
  if (a5)
  {
    if (v13 > a3)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

const char *AppendString(const char *result, int *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    size_t v4 = strlen(result);
    int v5 = v4 + 1;
    uint64_t result = (const char *)memcpy((char *)a2 + *a2, v3, v4 + 1);
    int v6 = *a2 + v5;
  }
  else
  {
    *(void *)((char *)a2 + *a2) = 0xFFFFFFFFLL;
    int v6 = *a2 + 8;
  }
  *a2 = v6;
  return result;
}

void DYTraceEncode_ExitStateGroup(void *a1, void *a2, unint64_t a3, uint64_t a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v9 = *a5;
    long long v14 = 0u;
    long long v15 = 0u;
    int v11 = v9;
    int v12 = 500;
    unint64_t v13 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v11);
  }
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  a2[4] = 0x4300000046;
  *a2 = 0xFFFFD00800000028;
  a2[5] = *a1;
  *(_DWORD *)a2 = 48;
  if (a3 <= 0x2F)
  {
    if (a5)
    {
      int v10 = *a5;
      long long v14 = 0u;
      long long v15 = 0u;
      int v11 = v10;
      int v12 = 500;
      unint64_t v13 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v11);
    }
  }
}

void DYTraceEncode_InternalData(uint64_t a1, unsigned int *a2, unint64_t a3, uint64_t a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v9 = *a5;
    long long v35 = 0u;
    long long v36 = 0u;
    int v32 = v9;
    int v33 = 500;
    uint64_t v34 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v32);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFD01000000024;
  a2[8] = 198;
  int v10 = *(_DWORD *)(a1 + 8);
  switch(v10)
  {
    case 101:
      uint64_t v20 = *(void *)(a1 + 40);
      if (v20)
      {
        *(void *)(a2 + 9) = 0x536C536C756943;
        uint64_t v21 = 44;
      }
      else
      {
        strcpy((char *)a2 + 36, "CiulSl");
        uint64_t v21 = 43;
      }
      bzero((char *)a2 + v21, 44 - v21);
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      *((void *)a2 + 7) = *(void *)(a1 + 16);
      *a2 = 64;
      AppendString(*(const char **)(a1 + 32), (int *)a2);
      uint64_t v29 = *a2;
      uint64_t v30 = (v29 + 3) & 0xFFFFFFFC;
      bzero((char *)a2 + v29, v30 - v29);
      *a2 = v30;
      *(void *)((char *)a2 + v30) = *(void *)(a1 + 24);
      unsigned int v31 = *a2 + 8;
      *a2 = v31;
      if (v20)
      {
        AppendString(*(const char **)(a1 + 40), (int *)a2);
        unsigned int v31 = *a2;
      }
      a1 = (v31 + 3) & 0xFFFFFFFC;
      bzero((char *)a2 + v31, a1 - v31);
      break;
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 112:
    case 113:
    case 114:
    case 115:
    case 121:
    case 122:
    case 123:
    case 124:
    case 130:
    case 131:
    case 133:
    case 134:
      goto LABEL_10;
    case 107:
      strcpy((char *)a2 + 36, "Ciulul");
      *((unsigned char *)a2 + 43) = 0;
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      *((void *)a2 + 7) = *(void *)(a1 + 16);
      *a2 = 64;
      *((void *)a2 + 8) = *(void *)(a1 + 24);
      LODWORD(a1) = 72;
      break;
    case 108:
      strcpy((char *)a2 + 36, "CitS");
      *(_WORD *)((char *)a2 + 41) = 0;
      *((unsigned char *)a2 + 43) = 0;
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      *((void *)a2 + 7) = *(void *)(a1 + 16);
      *a2 = 64;
      goto LABEL_24;
    case 109:
    case 120:
      strcpy((char *)a2 + 36, "CiSululb");
      *(_WORD *)((char *)a2 + 45) = 0;
      *((unsigned char *)a2 + 47) = 0;
      *a2 = 48;
      *((void *)a2 + 6) = *(void *)a1;
      *a2 = 56;
      a2[14] = *(_DWORD *)(a1 + 8);
      *a2 = 60;
      AppendString(*(const char **)(a1 + 32), (int *)a2);
      uint64_t v13 = *a2;
      uint64_t v14 = (v13 + 3) & 0xFFFFFFFC;
      bzero((char *)a2 + v13, v14 - v13);
      *a2 = v14;
      *(void *)((char *)a2 + v14) = *(void *)(a1 + 16);
      unsigned int v15 = *a2 + 8;
      *a2 = v15;
      *(void *)((char *)a2 + v15) = *(void *)(a1 + 24);
      unsigned int v16 = *a2 + 8;
      *a2 = v16;
      *((unsigned char *)a2 + v16) = *(unsigned char *)(a1 + 40);
      uint64_t v17 = *a2 + 1;
      a1 = (*a2 & 0xFFFFFFFC) + 4;
      long long v18 = (char *)a2 + v17;
      size_t v19 = a1 - v17;
      goto LABEL_26;
    case 110:
      *(void *)(a2 + 9) = 0x696C756943;
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      *((void *)a2 + 7) = *(void *)(a1 + 16);
      *a2 = 64;
      a2[16] = *(_DWORD *)(a1 + 24);
      LODWORD(a1) = 68;
      break;
    case 111:
      int v11 = 5597507;
      goto LABEL_6;
    case 116:
      *(void *)(a2 + 9) = 0x6C75556943;
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      AppendString(*(const char **)(a1 + 16), (int *)a2);
      uint64_t v22 = *a2;
      uint64_t v23 = (v22 + 3) & 0xFFFFFFFC;
      bzero((char *)a2 + v22, v23 - v22);
      *a2 = v23;
      *(void *)((char *)a2 + v23) = *(void *)(a1 + 24);
      LODWORD(a1) = *a2 + 8;
      break;
    case 117:
    case 127:
    case 128:
    case 129:
    case 132:
      int v11 = 5466435;
LABEL_6:
      a2[9] = v11;
      *a2 = 40;
      *((void *)a2 + 5) = *(void *)a1;
      *a2 = 48;
      a2[12] = *(_DWORD *)(a1 + 8);
      *a2 = 52;
      int v12 = *(const char **)(a1 + 16);
      goto LABEL_25;
    case 118:
      strcpy((char *)a2 + 36, "Ciul");
      *(_WORD *)((char *)a2 + 41) = 0;
      *((unsigned char *)a2 + 43) = 0;
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      uint64_t v24 = *(void *)(a1 + 16);
      goto LABEL_21;
    case 119:
      *(void *)(a2 + 9) = 0x53535369756943;
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      a2[14] = *(_DWORD *)(a1 + 40);
      *a2 = 60;
      AppendString(*(const char **)(a1 + 16), (int *)a2);
      AppendString(*(const char **)(a1 + 24), (int *)a2);
      int v12 = *(const char **)(a1 + 32);
      goto LABEL_25;
    case 125:
      strcpy((char *)a2 + 36, "Ciul");
      *(_WORD *)((char *)a2 + 41) = 0;
      *((unsigned char *)a2 + 43) = 0;
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      uint64_t v24 = *(void *)(a1 + 24);
LABEL_21:
      *((void *)a2 + 7) = v24;
      LODWORD(a1) = 64;
      break;
    case 126:
      strcpy((char *)a2 + 36, "CiSS");
      *(_WORD *)((char *)a2 + 41) = 0;
      *((unsigned char *)a2 + 43) = 0;
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      AppendString(*(const char **)(a1 + 16), (int *)a2);
      goto LABEL_24;
    case 135:
      strcpy((char *)a2 + 36, "CiSS");
      *(_WORD *)((char *)a2 + 41) = 0;
      *((unsigned char *)a2 + 43) = 0;
      *a2 = 44;
      *(void *)(a2 + 11) = *(void *)a1;
      *a2 = 52;
      a2[13] = *(_DWORD *)(a1 + 8);
      *a2 = 56;
      AppendString(*(const char **)(a1 + 16), (int *)a2);
      uint64_t v25 = *a2;
      uint64_t v26 = (v25 + 3) & 0xFFFFFFFC;
      bzero((char *)a2 + v25, v26 - v25);
      *a2 = v26;
LABEL_24:
      int v12 = *(const char **)(a1 + 24);
LABEL_25:
      AppendString(v12, (int *)a2);
      uint64_t v27 = *a2;
      a1 = (v27 + 3) & 0xFFFFFFFC;
      long long v18 = (char *)a2 + v27;
      size_t v19 = a1 - v27;
LABEL_26:
      bzero(v18, v19);
      break;
    default:
      if (v10 == 7)
      {
        strcpy((char *)a2 + 36, "Ciui");
        *(_WORD *)((char *)a2 + 41) = 0;
        *((unsigned char *)a2 + 43) = 0;
        *a2 = 44;
        *(void *)(a2 + 11) = *(void *)a1;
        *a2 = 52;
        a2[13] = *(_DWORD *)(a1 + 8);
        *a2 = 56;
        a2[14] = *(_DWORD *)(a1 + 16);
        LODWORD(a1) = 60;
      }
      else
      {
LABEL_10:
        a2[9] = 26947;
        *a2 = 40;
        *((void *)a2 + 5) = *(void *)a1;
        *a2 = 48;
        a2[12] = *(_DWORD *)(a1 + 8);
        LODWORD(a1) = 52;
      }
      break;
  }
  *a2 = a1;
  if (a5)
  {
    if (a1 > a3)
    {
      int v28 = *a5;
      long long v35 = 0u;
      long long v36 = 0u;
      int v32 = v28;
      int v33 = 500;
      uint64_t v34 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v32);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructure_allocatedSize(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFD82C00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructure_restoreMTLAccelerationStructure_instance(uint64_t a1, unsigned int *a2, unint64_t a3, uint64_t a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    long long v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFD83200000024;
  if (a4) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>ulU<b>ul");
  *((_WORD *)a2 + 25) = 0;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)a1;
  *a2 = 60;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 16);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v14 = *a2;
  uint64_t v15 = (v14 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v14, v15 - v14);
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 32);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a5)
  {
    if (v16 > a3)
    {
      int v17 = *a5;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      long long v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }
}

void DYTraceEncode_MTLBuffer_allocatedSize(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFD81100000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLBuffer_newTextureWithDescriptor_offset_bytesPerRow(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    uint64_t v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC01000000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CUulul");
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 116;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      uint64_t v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLBuffer_setPurgeableState(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC01100000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_indirectArgumentBufferData(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFD80B00000024;
  if (a4) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  a2[8] = v11;
  uint64_t v12 = *(void *)(a1 + 32);
  if (v12)
  {
    strcpy((char *)a2 + 36, "CUUUU");
    uint64_t v13 = 42;
  }
  else
  {
    strcpy((char *)a2 + 36, "CUUU");
    uint64_t v13 = 41;
  }
  bzero((char *)a2 + v13, 44 - v13);
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  if (v12) {
    AppendString(*(const char **)(a1 + 32), (int *)a2);
  }
  uint64_t v14 = *a2;
  unint64_t v15 = (v14 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v14, v15 - v14);
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (v15 > a3)
  {
    if (a5)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLCommandQueue_continueCommandBuffer_retainReferences(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 32781;
  }
  else {
    int v11 = 32773;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 6911043;
  *(void *)a2 = 0xFFFFCF0000000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 56;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a2 + 60) = 116;
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = *(void *)(a1 + 8);
  unint64_t v12 = 72;
  *(_DWORD *)a2 = 72;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 72), __src, v13 + 8);
    uint64_t v14 = (v13 + 80);
    unint64_t v12 = (v13 + 83) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLIOCommandQueue_continueCommandBuffer_retainReferences(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 32781;
  }
  else {
    int v11 = 32773;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 6911043;
  *(void *)a2 = 0xFFFFCF0100000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 56;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a2 + 60) = 116;
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = *(void *)(a1 + 8);
  unint64_t v12 = 72;
  *(_DWORD *)a2 = 72;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 72), __src, v13 + 8);
    uint64_t v14 = (v13 + 80);
    unint64_t v12 = (v13 + 83) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLComputePipelineState_resourceIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFC18B00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLComputePipelineState_uniqueIdentifier(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD81A00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_newArgumentEncoderWithArguments(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 11;
  }
  else {
    int v11 = 3;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC15B00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_newBufferWithLength_options(void *a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC04600000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  uint64_t v12 = a1[4];
  if (v12)
  {
    strcpy((char *)(a2 + 36), "Culult");
    uint64_t v13 = 43;
  }
  else
  {
    strcpy((char *)(a2 + 36), "Culul");
    uint64_t v13 = 42;
  }
  bzero((void *)(a2 + v13), 44 - v13);
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[2];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[3];
  unsigned int v14 = 68;
  *(_DWORD *)a2 = 68;
  if (v12)
  {
    *(void *)(a2 + 68) = a1[4];
    unsigned int v14 = 76;
  }
  *(_WORD *)(a2 + v14) = 116;
  uint64_t v15 = ((_BYTE)v14 + 5) & 0x58;
  bzero((void *)(a2 + (v14 | 2)), v15 - (v14 | 2));
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = a1[1];
  unint64_t v16 = (v15 + 8);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newBufferWithBytes_length_options(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v26 = 0u;
    long long v27 = 0u;
    int v23 = v10;
    int v24 = 500;
    long long v25 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v23);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC04700000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  uint64_t v12 = *(void *)(a1 + 40);
  if (v12)
  {
    strcpy((char *)a2 + 36, "CU<b>ulult");
    uint64_t v13 = 47;
  }
  else
  {
    strcpy((char *)a2 + 36, "CU<b>ulul");
    uint64_t v13 = 46;
  }
  bzero((char *)a2 + v13, 48 - v13);
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v14 = *a2;
  uint64_t v15 = (v14 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v14, v15 - v14);
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 24);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 32);
  unsigned int v17 = *a2 + 8;
  *a2 = v17;
  if (v12)
  {
    *(void *)((char *)a2 + v17) = *(void *)(a1 + 40);
    unsigned int v17 = *a2 + 8;
    *a2 = v17;
  }
  *(_WORD *)((char *)a2 + v17) = 116;
  uint64_t v18 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v18 - (*a2 + 2));
  *a2 = v18;
  *(void *)((char *)a2 + v18) = *(void *)(a1 + 8);
  unint64_t v19 = *a2 + 8;
  *a2 = v19;
  if (a4)
  {
    int v20 = 8 * *a4 + 8;
    memcpy((char *)a2 + v19, a4, v20);
    uint64_t v21 = v20 + *a2;
    unint64_t v19 = (v21 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v21, v19 - v21);
    *a2 = v19;
  }
  if (a5)
  {
    if (v19 > a3)
    {
      int v22 = *a5;
      long long v26 = 0u;
      long long v27 = 0u;
      int v23 = v22;
      int v24 = 500;
      long long v25 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v23);
    }
  }
}

void DYTraceEncode_MTLDevice_newComputePipelineStateWithDescriptor_options_reflection_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v25 = 0u;
    long long v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    int v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC0B900000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CUultt");
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = 0;
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 40);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(_WORD *)((char *)a2 + v16) = 116;
  uint64_t v17 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v17 - (*a2 + 2));
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 8);
  unint64_t v18 = *a2 + 8;
  *a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((char *)a2 + v18, a4, v19);
    uint64_t v20 = v19 + *a2;
    unint64_t v18 = (v20 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v20, v18 - v20);
    *a2 = v18;
  }
  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      long long v25 = 0u;
      long long v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      int v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }
}

void DYTraceEncode_MTLDevice_newComputePipelineStateWithFunction_options_reflection_error(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    unint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC05600000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctultt");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[2];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[3];
  *(void *)(a2 + 68) = 0;
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[5];
  *(_DWORD *)(a2 + 84) = 116;
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = a1[1];
  unint64_t v12 = 96;
  *(_DWORD *)a2 = 96;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 96), __src, v13 + 8);
    uint64_t v14 = (v13 + 104);
    unint64_t v12 = (v13 + 107) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      unint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_newComputePipelineStateWithImageFilterFunctionsSPI_imageFilterFunctionInfo_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC11B00000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>U<b>t");
  *((unsigned char *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newIndirectCommandBufferWithDescriptor_maxCommandCount_options(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC19F00000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[11] = 108;
  *(void *)(a2 + 9) = *(void *)"CU<b>ulul";
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 116;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLDevice_newLibraryWithImageFilterFunctionsSPI_imageFilterFunctionInfo_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v26 = 0u;
    long long v27 = 0u;
    int v23 = v10;
    int v24 = 500;
    long long v25 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v23);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC21900000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  int v12 = snprintf((char *)a2 + 36, a3 - 36, "C@%llutU<b>t", *(void *)(a1 + 24)) + *a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((char *)a2 + (v12 + 1), v13 - (v12 + 1));
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)a1;
  uint64_t v14 = *a2 + 8;
  *a2 = v14;
  memcpy((char *)a2 + v14, *(const void **)(a1 + 16), 8 * *(void *)(a1 + 24));
  *a2 += 8 * *(_DWORD *)(a1 + 24);
  AppendString(*(const char **)(a1 + 32), (int *)a2);
  uint64_t v15 = *a2;
  uint64_t v16 = (v15 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v15, v16 - v15);
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 40);
  unsigned int v17 = *a2 + 8;
  *a2 = v17;
  *(_WORD *)((char *)a2 + v17) = 116;
  uint64_t v18 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v18 - (*a2 + 2));
  *a2 = v18;
  *(void *)((char *)a2 + v18) = *(void *)(a1 + 8);
  unint64_t v19 = *a2 + 8;
  *a2 = v19;
  if (a4)
  {
    int v20 = 8 * *a4 + 8;
    memcpy((char *)a2 + v19, a4, v20);
    uint64_t v21 = v20 + *a2;
    unint64_t v19 = (v21 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v21, v19 - v21);
    *a2 = v19;
  }
  if (a5)
  {
    if (v19 > a3)
    {
      int v22 = *a5;
      long long v26 = 0u;
      long long v27 = 0u;
      int v23 = v22;
      int v24 = 500;
      long long v25 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v23);
    }
  }
}

void DYTraceEncode_MTLDevice_newLibraryWithFile_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC04D00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newLibraryWithSource_options_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v27 = 0u;
    long long v28 = 0u;
    int v24 = v10;
    int v25 = 500;
    long long v26 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v24);
  }
  *(void *)(a2 + 3) = 0;
  *(void *)(a2 + 1) = 0;
  *(void *)(a2 + 5) = 0;
  *a2 = 36;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[7] = 0;
  a2[8] = v11;
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = 0x74553E623C5543;
  if (!v12) {
    uint64_t v13 = 0x74743E623C5543;
  }
  *(void *)(a2 + 9) = v13;
  *(void *)a2 = 0xFFFFC04F0000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  if (v12)
  {
    AppendString(*(const char **)(a1 + 24), (int *)a2);
    uint64_t v14 = *a2;
    uint64_t v15 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v15 - v14);
  }
  else
  {
    uint64_t v16 = *a2;
    uint64_t v17 = (v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v17 - v16);
    *a2 = v17;
    *(void *)((char *)a2 + v17) = 0;
    uint64_t v15 = *a2 + 8;
  }
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 32);
  unsigned int v18 = *a2 + 8;
  *a2 = v18;
  *(_WORD *)((char *)a2 + v18) = 116;
  uint64_t v19 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v19 - (*a2 + 2));
  *a2 = v19;
  *(void *)((char *)a2 + v19) = *(void *)(a1 + 8);
  unint64_t v20 = *a2 + 8;
  *a2 = v20;
  if (a4)
  {
    int v21 = 8 * *a4 + 8;
    memcpy((char *)a2 + v20, a4, v21);
    uint64_t v22 = v21 + *a2;
    unint64_t v20 = (v22 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v22, v20 - v22);
    *a2 = v20;
  }
  if (a5)
  {
    if (v20 > a3)
    {
      int v23 = *a5;
      long long v27 = 0u;
      long long v28 = 0u;
      int v24 = v23;
      int v25 = 500;
      long long v26 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v24);
    }
  }
}

void DYTraceEncode_MTLDevice_newLibraryWithSource_options_completionHandler(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v27 = 0u;
    long long v28 = 0u;
    int v24 = v10;
    int v25 = 500;
    long long v26 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v24);
  }
  *(void *)(a2 + 3) = 0;
  *(void *)(a2 + 1) = 0;
  *(void *)(a2 + 5) = 0;
  *a2 = 36;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[7] = 0;
  a2[8] = v11;
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = 0x74553E623C5543;
  if (!v12) {
    uint64_t v13 = 0x74743E623C5543;
  }
  *(void *)(a2 + 9) = v13;
  *(void *)a2 = 0xFFFFC0500000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  if (v12)
  {
    AppendString(*(const char **)(a1 + 24), (int *)a2);
    uint64_t v14 = *a2;
    uint64_t v15 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v15 - v14);
  }
  else
  {
    uint64_t v16 = *a2;
    uint64_t v17 = (v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v17 - v16);
    *a2 = v17;
    *(void *)((char *)a2 + v17) = 0;
    uint64_t v15 = *a2 + 8;
  }
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 32);
  unsigned int v18 = *a2 + 8;
  *a2 = v18;
  *(_WORD *)((char *)a2 + v18) = 116;
  uint64_t v19 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v19 - (*a2 + 2));
  *a2 = v19;
  *(void *)((char *)a2 + v19) = *(void *)(a1 + 8);
  unint64_t v20 = *a2 + 8;
  *a2 = v20;
  if (a4)
  {
    int v21 = 8 * *a4 + 8;
    memcpy((char *)a2 + v20, a4, v21);
    uint64_t v22 = v21 + *a2;
    unint64_t v20 = (v22 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v22, v20 - v22);
    *a2 = v20;
  }
  if (a5)
  {
    if (v20 > a3)
    {
      int v23 = *a5;
      long long v27 = 0u;
      long long v28 = 0u;
      int v24 = v23;
      int v25 = 500;
      long long v26 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v24);
    }
  }
}

void DYTraceEncode_MTLDevice_newPipelineLibraryWithFilePath_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    uint64_t v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC13500000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      uint64_t v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newRenderPipelineStateWithDescriptor_options_reflection_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v25 = 0u;
    long long v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    long long v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC05200000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CUultt");
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = 0;
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 40);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(_WORD *)((char *)a2 + v16) = 116;
  uint64_t v17 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v17 - (*a2 + 2));
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 8);
  unint64_t v18 = *a2 + 8;
  *a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((char *)a2 + v18, a4, v19);
    uint64_t v20 = v19 + *a2;
    unint64_t v18 = (v20 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v20, v18 - v20);
    *a2 = v18;
  }
  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      long long v25 = 0u;
      long long v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      long long v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }
}

void DYTraceEncode_MTLDevice_newRenderPipelineStateWithTileDescriptor_options_reflection_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v25 = 0u;
    long long v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    long long v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC12600000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CUultt");
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = 0;
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 40);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(_WORD *)((char *)a2 + v16) = 116;
  uint64_t v17 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v17 - (*a2 + 2));
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 8);
  unint64_t v18 = *a2 + 8;
  *a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((char *)a2 + v18, a4, v19);
    uint64_t v20 = v19 + *a2;
    unint64_t v18 = (v20 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v20, v18 - v20);
    *a2 = v18;
  }
  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      long long v25 = 0u;
      long long v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      long long v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }
}

void DYTraceEncode_MTLDevice_newSharedTextureWithHandle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  if (a5)
  {
    int v5 = *a5;
    long long v8 = 0u;
    long long v9 = 0u;
    v6[0] = v5;
    v6[1] = 500;
    uint64_t v7 = "0";
    GTError_addError(a5, (uint64_t)v6);
  }
}

void DYTraceEncode_MTLDevice_newTextureWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    int v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC04A00000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  uint64_t v12 = *(void *)(a1 + 24);
  if (v12)
  {
    a2[9] = 7624003;
    uint64_t v13 = 40;
  }
  else
  {
    strcpy((char *)a2 + 36, "CU");
    uint64_t v13 = 39;
  }
  bzero((char *)a2 + v13, 40 - v13);
  *a2 = 40;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v14 = *a2;
  uint64_t v15 = (v14 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v14, v15 - v14);
  *a2 = v15;
  if (v12)
  {
    *(void *)((char *)a2 + v15) = *(void *)(a1 + 24);
    uint64_t v15 = *a2 + 8;
    *a2 = v15;
  }
  *(_WORD *)((char *)a2 + v15) = 116;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      int v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLDevice_setCapturingCommandQueueAddress(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFD80A00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLFunction_newArgumentEncoderWithBufferIndex_reflection(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC14D00000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Cult");
  *(_DWORD *)a2 = 41;
  *(void *)(a2 + 41) = *a1;
  *(_DWORD *)a2 = 49;
  *(void *)(a2 + 49) = a1[2];
  *(void *)(a2 + 57) = 0;
  *(_WORD *)(a2 + 65) = 116;
  *(unsigned char *)(a2 + 67) = 0;
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[1];
  unint64_t v12 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v13 + 8);
    uint64_t v14 = (v13 + 84);
    unint64_t v12 = (v13 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLHeap_setPurgeableState(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC10D00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIndirectCommandBuffer_allocatedSize(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFD81900000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLIndirectCommandBuffer_restoreData(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    long long v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFD81500000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  unint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = (v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }
  if (v13 > a3 && a5 != 0)
  {
    int v17 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v17;
    int v19 = 500;
    long long v20 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
}

void DYTraceEncode_MTLIndirectCommandBuffer_setPurgeableState(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC1D000000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setVertexAmplificationCount_viewMappings(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    long long v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC23200000024;
  a2[8] = 8 * (a4 != 0);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    *(void *)(a2 + 9) = 0x3E623C556C7543;
  }
  else
  {
    strcpy((char *)a2 + 36, "Cult");
    *(_WORD *)((char *)a2 + 41) = 0;
    *((unsigned char *)a2 + 43) = 0;
  }
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 8);
  *a2 = 60;
  if (v11)
  {
    AppendString(*(const char **)(a1 + 16), (int *)a2);
    uint64_t v12 = *a2;
    unint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v12, v13 - v12);
  }
  else
  {
    *(void *)(a2 + 15) = 0;
    LODWORD(v13) = 68;
  }
  *a2 = v13;
  unint64_t v13 = v13;
  if (a4)
  {
    int v14 = (char *)a2 + v13;
    int v15 = 8 * *a4 + 8;
    memcpy(v14, a4, v15);
    uint64_t v16 = v15 + *a2;
    unint64_t v13 = (v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v13 - v16);
    *a2 = v13;
  }
  if (v13 > a3 && a5 != 0)
  {
    int v18 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v18;
    int v20 = 500;
    long long v21 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
}

void DYTraceEncode_MTLLibrary_newFunctionWithName_constantValues_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC11500000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CSUt");
  *(_WORD *)((char *)a2 + 41) = 0;
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLLibrary_newIntersectionFunctionWithDescriptor_completionHandler(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC34100000024;
  a2[8] = 8 * (a4 != 0);
  strcpy((char *)a2 + 36, "CUttt");
  *a2 = 42;
  *(void *)((char *)a2 + 42) = *(void *)a1;
  *a2 = 50;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 8);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLPipelineLibrary_newComputePipelineStateWithName_options_reflection_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v25 = 0u;
    long long v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    long long v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC28400000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CSultt");
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = 0;
  uint64_t v15 = (*a2 + 11) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 8, v15 - (*a2 + 8));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 40);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(_WORD *)((char *)a2 + v16) = 116;
  uint64_t v17 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v17 - (*a2 + 2));
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 8);
  unint64_t v18 = *a2 + 8;
  *a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((char *)a2 + v18, a4, v19);
    uint64_t v20 = v19 + *a2;
    unint64_t v18 = (v20 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v20, v18 - v20);
    *a2 = v18;
  }
  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      long long v25 = 0u;
      long long v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      long long v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }
}

void DYTraceEncode_MTLPipelineLibrary_newRenderPipelineStateWithName_options_reflection_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v25 = 0u;
    long long v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    long long v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC28600000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CSultt");
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = 0;
  uint64_t v15 = (*a2 + 11) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 8, v15 - (*a2 + 8));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 40);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(_WORD *)((char *)a2 + v16) = 116;
  uint64_t v17 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v17 - (*a2 + 2));
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 8);
  unint64_t v18 = *a2 + 8;
  *a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((char *)a2 + v18, a4, v19);
    uint64_t v20 = v19 + *a2;
    unint64_t v18 = (v20 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v20, v18 - v20);
    *a2 = v18;
  }
  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      long long v25 = 0u;
      long long v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      long long v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setScissorRect(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    unint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC07700000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "C@4l");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  long long v11 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 68) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 52) = v11;
  unint64_t v12 = 84;
  *(_DWORD *)a2 = 84;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 84), __src, v13 + 8);
    uint64_t v14 = (v13 + 92);
    unint64_t v12 = (v13 + 95) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      unint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setScissorRects_count(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC13400000024;
  a2[8] = 8 * (a4 != 0);
  strcpy((char *)a2 + 36, "CUul");
  *(_WORD *)((char *)a2 + 41) = 0;
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 16);
  unint64_t v13 = *a2 + 8;
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = (v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }
  if (a5)
  {
    if (v13 > a3)
    {
      int v16 = *a5;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setViewports_count(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC13300000024;
  a2[8] = 8 * (a4 != 0);
  strcpy((char *)a2 + 36, "CUul");
  *(_WORD *)((char *)a2 + 41) = 0;
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 16);
  unint64_t v13 = *a2 + 8;
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = (v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }
  if (a5)
  {
    if (v13 > a3)
    {
      int v16 = *a5;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }
}

void DYTraceEncode_MTLRenderPipelineState_uniqueIdentifier(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD81400000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLTexture_getBytes_bytesPerRow_bytesPerImage_fromRegion_mipmapLevel_slice(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v26 = 0u;
    long long v27 = 0u;
    int v23 = v10;
    int v24 = 500;
    long long v25 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v23);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC09300000024;
  if (a4) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  a2[8] = v11;
  a2[13] = 108;
  *(_OWORD *)(a2 + 9) = *(_OWORD *)"CU<b>ulul@6ululul";
  *a2 = 56;
  *((void *)a2 + 7) = *(void *)a1;
  *a2 = 64;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 16);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 24);
  uint64_t v15 = *a2 + 8;
  *a2 = v15;
  int v16 = (_OWORD *)((char *)a2 + v15);
  long long v17 = *(_OWORD *)(a1 + 32);
  long long v18 = *(_OWORD *)(a1 + 64);
  v16[1] = *(_OWORD *)(a1 + 48);
  v16[2] = v18;
  _OWORD *v16 = v17;
  LODWORD(v16) = *a2 + 48;
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 80);
  LODWORD(v16) = *a2 + 8;
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 88);
  unint64_t v19 = *a2 + 8;
  *a2 = v19;
  if (a4)
  {
    int v20 = 8 * *a4 + 8;
    memcpy((char *)a2 + v19, a4, v20);
    uint64_t v21 = v20 + *a2;
    unint64_t v19 = (v21 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v21, v19 - v21);
    *a2 = v19;
  }
  if (a5)
  {
    if (v19 > a3)
    {
      int v22 = *a5;
      long long v26 = 0u;
      long long v27 = 0u;
      int v23 = v22;
      int v24 = 500;
      long long v25 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v23);
    }
  }
}

void DYTraceEncode_MTLTexture_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    int v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC09400000024;
  a2[8] = 8 * (a4 != 0);
  strcpy((char *)a2 + 36, "C@6ulululU<b>ululul");
  *a2 = 56;
  *((void *)a2 + 7) = *(void *)a1;
  *a2 = 64;
  long long v11 = *(_OWORD *)(a1 + 40);
  long long v12 = *(_OWORD *)(a1 + 24);
  *((_OWORD *)a2 + 4) = *(_OWORD *)(a1 + 8);
  *((_OWORD *)a2 + 5) = v12;
  *((_OWORD *)a2 + 6) = v11;
  *a2 = 112;
  *((void *)a2 + 14) = *(void *)(a1 + 56);
  *a2 = 120;
  *((void *)a2 + 15) = *(void *)(a1 + 64);
  *a2 = 128;
  AppendString(*(const char **)(a1 + 72), (int *)a2);
  uint64_t v13 = *a2;
  uint64_t v14 = (v13 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v13, v14 - v13);
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 80);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 88);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 96);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      int v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLTexture_restoreIOSurfaceData_length_forPlane(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFD80800000024;
  if (a4) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  a2[8] = v11;
  a2[11] = 108;
  *(void *)(a2 + 9) = *(void *)"CU<b>ulul";
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 16);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 24);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLTexture_setPurgeableState(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC09800000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_Boundary_Frame(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x74747474747443;
  *(void *)a2 = 0xFFFFD8480000002CLL;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[4];
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = a1[5];
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = a1[6];
  unint64_t v12 = 100;
  *(_DWORD *)a2 = 100;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 100), __src, v13 + 8);
    uint64_t v14 = (v13 + 108);
    unint64_t v12 = (v13 + 111) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_CAMetalDrawable_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFE40700000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_CAMetalDrawable_present(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFE40A00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_CAMetalDrawable_presentAfterMinimumDuration(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 25667;
  *(void *)a2 = 0xFFFFE40C00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_CAMetalDrawable_presentAtTime(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 25667;
  *(void *)a2 = 0xFFFFE40B00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_CAMetalDrawable_texture(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFE40100000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_CAMetalLayer_nextDrawable(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFE40200000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_CAMetalLayer_setBounds_contentsScale(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFE40600000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6464344043;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  long long v11 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 68) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 52) = v11;
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = *(void *)(a1 + 40);
  unint64_t v12 = 92;
  *(_DWORD *)a2 = 92;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 92), __src, v13 + 8);
    uint64_t v14 = (v13 + 100);
    unint64_t v12 = (v13 + 103) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_CAMetalLayer_setColorspace(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFE40F00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_CAMetalLayer_setDevice(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 5600323;
  *(void *)a2 = 0xFFFFE40500000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)(a1 + 8);
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_CAMetalLayer_setDrawableSize(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFE40400000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "C@2d");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(_OWORD *)(a2 + 52) = *(_OWORD *)(a1 + 8);
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_CAMetalLayer_setFramebufferOnly(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFE40800000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_CAMetalLayer_setPixelFormat(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFE40300000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_CAMetalLayer_setWantsExtendedDynamicRangeContent(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFE40E00000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructure_allocationID(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD82B00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructure_allocationInfo(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFD83A00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Cuwuwuwululul");
  *(_WORD *)(a2 + 50) = 0;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *a1;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[2];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[3];
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = a1[4];
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = a1[5];
  *(_DWORD *)a2 = 100;
  *(void *)(a2 + 100) = a1[6];
  unint64_t v11 = 108;
  *(_DWORD *)a2 = 108;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 108), __src, v12 + 8);
    uint64_t v13 = (v12 + 116);
    unint64_t v11 = (v12 + 119) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructure_children(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFD85400000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLAccelerationStructure_gpuResourceID(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD84900000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructure_heapOffset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFD84700000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructure_resourceIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD84600000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructure_resourceUsage(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFD82D00000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v13 + 8);
    uint64_t v14 = (v13 + 60);
    unint64_t v12 = (v13 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructure_restoreMTLAccelerationStructure(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    long long v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  a2[8] = v11;
  *(void *)(a2 + 9) = 0x6C753E623C5543;
  *(void *)a2 = 0xFFFFD82E0000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 16);
  unint64_t v14 = *a2 + 8;
  *a2 = v14;
  if (a4)
  {
    int v15 = 8 * *a4 + 8;
    memcpy((char *)a2 + v14, a4, v15);
    uint64_t v16 = v15 + *a2;
    unint64_t v14 = (v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v14 - v16);
    *a2 = v14;
  }
  if (a5)
  {
    if (v14 > a3)
    {
      int v17 = *a5;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      long long v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructure_state(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFD85100000024;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 44) = 105;
  *(void *)(a2 + 36) = *(void *)"Cuiuiuiui";
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)a2 = 64;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)a2 = 68;
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 20);
  unint64_t v12 = 72;
  *(_DWORD *)a2 = 72;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 72), __src, v13 + 8);
    uint64_t v14 = (v13 + 80);
    unint64_t v12 = (v13 + 83) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructure_timeSinceTouched(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD84300000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructure_uniqueIdentifier(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 13;
  }
  else {
    int v11 = 5;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFD83B00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 30581;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructure_setDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC34000000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLAccelerationStructure_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC2D300000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLAccelerationStructure_setResponsibleProcess(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 26947;
  *(void *)a2 = 0xFFFFC2D400000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v13 + 8);
    uint64_t v14 = (v13 + 60);
    unint64_t v12 = (v13 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructure_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC2D500000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructure_makeAliasable(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC2DD00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructure_setPurgeableState(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC2DE00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 27765;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructure_waitUntilComplete(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC2DF00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_setAccelerationStructureDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 5600323;
  *(void *)a2 = 0xFFFFD85600000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)(a1 + 8);
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_setAccelerationStructureState(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFD85200000024;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctuiuiuiui");
  *(unsigned char *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 64;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)a2 = 68;
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)a2 = 72;
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)a2 = 76;
  *(_DWORD *)(a2 + 76) = *(_DWORD *)(a1 + 28);
  unint64_t v12 = 80;
  *(_DWORD *)a2 = 80;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 80), __src, v13 + 8);
    uint64_t v14 = (v13 + 88);
    unint64_t v12 = (v13 + 91) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC2E000000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_buildAccelerationStructure_descriptor_scratchBuffer_scratchBufferOffset(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    long long v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC2E100000024;
  a2[8] = 8 * (a4 != 0);
  strcpy((char *)a2 + 36, "CtUtul");
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 8);
  *a2 = 60;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 24);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unint64_t v14 = *a2 + 8;
  *a2 = v14;
  if (a4)
  {
    int v15 = 8 * *a4 + 8;
    memcpy((char *)a2 + v14, a4, v15);
    uint64_t v16 = v15 + *a2;
    unint64_t v14 = (v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v14 - v16);
    *a2 = v14;
  }
  if (a5)
  {
    if (v14 > a3)
    {
      int v17 = *a5;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      long long v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_copyAccelerationStructure_toAccelerationStructure(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7631939;
  *(void *)a2 = 0xFFFFC2E200000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[2];
  unint64_t v11 = 64;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v12 + 8);
    uint64_t v13 = (v12 + 72);
    unint64_t v11 = (v12 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_copyAndCompactAccelerationStructure_toAccelerationStructure(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7631939;
  *(void *)a2 = 0xFFFFC2E300000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[2];
  unint64_t v11 = 64;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v12 + 8);
    uint64_t v13 = (v12 + 72);
    unint64_t v11 = (v12 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC2E400000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_deserializeInstanceAccelerationStructure_primitiveAccelerationStructures_fromBuffer_serializedBufferOffset(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    long long v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC35C00000024;
  a2[8] = 8 * (a4 != 0);
  strcpy((char *)a2 + 36, "CtUtul");
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 8);
  *a2 = 60;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 24);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unint64_t v14 = *a2 + 8;
  *a2 = v14;
  if (a4)
  {
    int v15 = 8 * *a4 + 8;
    memcpy((char *)a2 + v14, a4, v15);
    uint64_t v16 = v15 + *a2;
    unint64_t v14 = (v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v14 - v16);
    *a2 = v14;
  }
  if (a5)
  {
    if (v14 > a3)
    {
      int v17 = *a5;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      long long v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_deserializeInstanceAccelerationStructure_primitiveAccelerationStructures_fromBuffer_serializedBufferOffset_withDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    long long v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  *(void *)(a2 + 9) = 0x556C7574557443;
  *(void *)a2 = 0xFFFFC3960000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 8);
  *a2 = 60;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 24);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 40), (int *)a2);
  uint64_t v14 = *a2;
  unint64_t v15 = (v14 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v14, v15 - v14);
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (v15 > a3)
  {
    if (a5)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      long long v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_deserializePrimitiveAccelerationStructure_fromBuffer_serializedBufferOffset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC35D00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C75747443;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_deserializePrimitiveAccelerationStructure_fromBuffer_serializedBufferOffset_withDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC39700000024;
  a2[8] = 8 * (a4 != 0);
  strcpy((char *)a2 + 36, "CttulU");
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 8);
  *a2 = 60;
  *(void *)(a2 + 15) = *(void *)(a1 + 16);
  *a2 = 68;
  *(void *)(a2 + 17) = *(void *)(a1 + 24);
  *a2 = 76;
  AppendString(*(const char **)(a1 + 32), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_endEncoding(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC2E600000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_insertDebugSignpost(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC2E700000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_popDebugGroup(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC2E800000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_pushDebugGroup(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC2E900000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_refitAccelerationStructure_descriptor_destination_scratchBuffer_scratchBufferOffset(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    long long v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  *(void *)(a2 + 9) = 0x6C757474557443;
  *(void *)a2 = 0xFFFFC2EA0000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 8);
  *a2 = 60;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 24);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 40);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      long long v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_refitAccelerationStructure_descriptor_destination_scratchBuffer_scratchBufferOffset_options(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC3FA00000024;
  a2[8] = 8 * (a4 != 0);
  a2[11] = 108;
  *(void *)(a2 + 9) = *(void *)"CtUttulul";
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  *((void *)a2 + 7) = *(void *)(a1 + 8);
  *a2 = 64;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 24);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 40);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 48);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_sampleCountersInBuffer_atSampleIndex_withBarrier(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC2EB00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctului");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 68;
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 24);
  unint64_t v11 = 72;
  *(_DWORD *)a2 = 72;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 72), __src, v12 + 8);
    uint64_t v13 = (v12 + 80);
    unint64_t v11 = (v12 + 83) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_serializeInstanceAccelerationStructure_primitiveAccelerationStructures_toBuffer_serializedBufferOffset(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    int v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC35E00000024;
  a2[8] = 8 * (a4 != 0);
  strcpy((char *)a2 + 36, "CtUtul");
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 8);
  *a2 = 60;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 24);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unint64_t v14 = *a2 + 8;
  *a2 = v14;
  if (a4)
  {
    int v15 = 8 * *a4 + 8;
    memcpy((char *)a2 + v14, a4, v15);
    uint64_t v16 = v15 + *a2;
    unint64_t v14 = (v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v14 - v16);
    *a2 = v14;
  }
  if (a5)
  {
    if (v14 > a3)
    {
      int v17 = *a5;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      int v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_serializePrimitiveAccelerationStructure_toBuffer_serializedBufferOffset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC35F00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C75747443;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_updateFence(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC2ED00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_useHeap(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC2EE00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_useHeaps_count(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC2EF00000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_useResource_usage(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC2F000000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_useResources_count_usage(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC2F100000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutulul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unsigned int v16 = *(_DWORD *)a2 + 8;
  *(_DWORD *)a2 = v16;
  *(void *)(a2 + v16) = *(void *)(a1 + 24);
  unint64_t v17 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v17), a4, v18);
    uint64_t v19 = (v18 + *(_DWORD *)a2);
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v19), v17 - v19);
    *(_DWORD *)a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_waitForFence(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC2F200000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_writeAccelerationStructureSerializationData_toBuffer_offset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3FB00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C75747443;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_writeAccelerationStructureTraversalDepth_toBuffer_offset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC44900000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C75747443;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_writeCompactedAccelerationStructureSize_toBuffer_offset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC2F300000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C75747443;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_writeCompactedAccelerationStructureSize_toBuffer_offset_sizeDataType(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C756C75747443;
  *(void *)a2 = 0xFFFFC3720000002CLL;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[4];
  unint64_t v11 = 84;
  *(_DWORD *)a2 = 84;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 84), __src, v12 + 8);
    uint64_t v13 = (v12 + 92);
    unint64_t v11 = (v12 + 95) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_writeDeserializedAccelerationStructureSize_serializedOffset_toBuffer_sizeBufferOffset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C75746C757443;
  *(void *)a2 = 0xFFFFC3180000002CLL;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[4];
  unint64_t v11 = 84;
  *(_DWORD *)a2 = 84;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 84), __src, v12 + 8);
    uint64_t v13 = (v12 + 92);
    unint64_t v11 = (v12 + 95) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_writeDeserializedPrimitiveAccelerationStructureSizes_serializedOffset_toBuffer_sizesBufferOffset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C75746C757443;
  *(void *)a2 = 0xFFFFC3190000002CLL;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[4];
  unint64_t v11 = 84;
  *(_DWORD *)a2 = 84;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 84), __src, v12 + 8);
    uint64_t v13 = (v12 + 92);
    unint64_t v11 = (v12 + 95) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLAccelerationStructureCommandEncoder_writeSerializedAccelerationStructureSize_toBuffer_sizeBufferOffset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC31C00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C75747443;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLArgumentEncoder_constantDataAtIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 11;
  }
  else {
    int v11 = 3;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC14A00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 30581;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLArgumentEncoder_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    long long v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  a2[8] = v11;
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC14100000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  unint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = (v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }
  if (v13 > a3 && a5 != 0)
  {
    int v17 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v17;
    int v19 = 500;
    long long v20 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
}

void DYTraceEncode_MTLArgumentEncoder_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC14200000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v12 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v13 + 8);
    uint64_t v14 = (v13 + 56);
    unint64_t v12 = (v13 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLArgumentEncoder_newArgumentEncoderForBufferAtIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 11;
  }
  else {
    int v11 = 3;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC14B00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLArgumentEncoder_setAccelerationStructure_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC2F500000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLArgumentEncoder_setArgumentBuffer_offset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC14300000024;
  if (__src) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLArgumentEncoder_setArgumentBuffer_startOffset_arrayElement(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC15F00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLArgumentEncoder_setBuffer_offset_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC14400000024;
  if (__src) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctulul");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v12 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v13 + 8);
    uint64_t v14 = (v13 + 84);
    unint64_t v12 = (v13 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLArgumentEncoder_setBuffers_offsets_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC14500000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 32);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@%zuul@2ul", v11, v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  uint64_t v15 = (*(_DWORD *)a2 + v11);
  *(_DWORD *)a2 = v15;
  memcpy((void *)(a2 + v15), *(const void **)(a1 + 16), v11);
  unsigned int v16 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v16;
  *(_OWORD *)(a2 + v16) = *(_OWORD *)(a1 + 24);
  unint64_t v17 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v17), a4, v18);
    uint64_t v19 = (v18 + *(_DWORD *)a2);
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v19), v17 - v19);
    *(_DWORD *)a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLArgumentEncoder_setIndirectCommandBuffer_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC1D400000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLArgumentEncoder_setIndirectCommandBuffers_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC1D500000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLArgumentEncoder_setIntersectionFunctionTable_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC34D00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLArgumentEncoder_setIntersectionFunctionTables_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC34E00000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLArgumentEncoder_setRenderPipelineState_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC17E00000024;
  if (__src) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLArgumentEncoder_setRenderPipelineStates_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC17F00000024;
  if (a4) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  *(_DWORD *)(a2 + 32) = v11;
  size_t v12 = *(void *)(a1 + 24);
  int v13 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v12) + *(_DWORD *)a2;
  uint64_t v14 = (v13 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v13 + 1)), v14 - (v13 + 1));
  *(_DWORD *)a2 = v14;
  *(void *)(a2 + v14) = *(void *)a1;
  uint64_t v15 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v15;
  v12 *= 8;
  memcpy((void *)(a2 + v15), *(const void **)(a1 + 8), v12);
  unsigned int v16 = *(_DWORD *)a2 + v12;
  *(_DWORD *)a2 = v16;
  *(_OWORD *)(a2 + v16) = *(_OWORD *)(a1 + 16);
  unint64_t v17 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v17), a4, v18);
    uint64_t v19 = (v18 + *(_DWORD *)a2);
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v19), v17 - v19);
    *(_DWORD *)a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLArgumentEncoder_setSamplerState_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC14800000024;
  if (__src) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLArgumentEncoder_setSamplerStates_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC14900000024;
  if (a4) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  *(_DWORD *)(a2 + 32) = v11;
  size_t v12 = *(void *)(a1 + 24);
  int v13 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v12) + *(_DWORD *)a2;
  uint64_t v14 = (v13 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v13 + 1)), v14 - (v13 + 1));
  *(_DWORD *)a2 = v14;
  *(void *)(a2 + v14) = *(void *)a1;
  uint64_t v15 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v15;
  v12 *= 8;
  memcpy((void *)(a2 + v15), *(const void **)(a1 + 8), v12);
  unsigned int v16 = *(_DWORD *)a2 + v12;
  *(_DWORD *)a2 = v16;
  *(_OWORD *)(a2 + v16) = *(_OWORD *)(a1 + 16);
  unint64_t v17 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v17), a4, v18);
    uint64_t v19 = (v18 + *(_DWORD *)a2);
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v19), v17 - v19);
    *(_DWORD *)a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLArgumentEncoder_setTexture_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC14600000024;
  if (__src) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLArgumentEncoder_setTextures_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC14700000024;
  if (a4) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  *(_DWORD *)(a2 + 32) = v11;
  size_t v12 = *(void *)(a1 + 24);
  int v13 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v12) + *(_DWORD *)a2;
  uint64_t v14 = (v13 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v13 + 1)), v14 - (v13 + 1));
  *(_DWORD *)a2 = v14;
  *(void *)(a2 + v14) = *(void *)a1;
  uint64_t v15 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v15;
  v12 *= 8;
  memcpy((void *)(a2 + v15), *(const void **)(a1 + 8), v12);
  unsigned int v16 = *(_DWORD *)a2 + v12;
  *(_DWORD *)a2 = v16;
  *(_OWORD *)(a2 + v16) = *(_OWORD *)(a1 + 16);
  unint64_t v17 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v17), a4, v18);
    uint64_t v19 = (v18 + *(_DWORD *)a2);
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v19), v17 - v19);
    *(_DWORD *)a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLArgumentEncoder_setVisibleFunctionTable_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC34F00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLArgumentEncoder_setVisibleFunctionTables_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC35000000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLBinaryArchive_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    int v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC2CC00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    int v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLBinaryArchive_addComputePipelineFunctionsWithDescriptor_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC2CE00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 16);
  uint64_t v14 = *a2 + 8;
  *a2 = v14;
  strcpy((char *)a2 + v14, "ui");
  uint64_t v15 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v15 - (*a2 + 3));
  *a2 = v15;
  *(unsigned int *)((char *)a2 + v15) = *(_DWORD *)(a1 + 24);
  unint64_t v16 = *a2 + 4;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLBinaryArchive_addLibraryWithDescriptor_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC3BE00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 16);
  uint64_t v14 = *a2 + 8;
  *a2 = v14;
  strcpy((char *)a2 + v14, "ui");
  uint64_t v15 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v15 - (*a2 + 3));
  *a2 = v15;
  *(unsigned int *)((char *)a2 + v15) = *(_DWORD *)(a1 + 24);
  unint64_t v16 = *a2 + 4;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLBinaryArchive_addRenderPipelineFunctionsWithDescriptor_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC2CF00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 16);
  uint64_t v14 = *a2 + 8;
  *a2 = v14;
  strcpy((char *)a2 + v14, "ui");
  uint64_t v15 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v15 - (*a2 + 3));
  *a2 = v15;
  *(unsigned int *)((char *)a2 + v15) = *(_DWORD *)(a1 + 24);
  unint64_t v16 = *a2 + 4;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLBinaryArchive_addTileRenderPipelineFunctionsWithDescriptor_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC2D000000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 16);
  uint64_t v14 = *a2 + 8;
  *a2 = v14;
  strcpy((char *)a2 + v14, "ui");
  uint64_t v15 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v15 - (*a2 + 3));
  *a2 = v15;
  *(unsigned int *)((char *)a2 + v15) = *(_DWORD *)(a1 + 24);
  unint64_t v16 = *a2 + 4;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLBinaryArchive_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC2BB00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_resolveCounters_inRange_destinationBuffer_destinationOffset(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC27400000024;
  a2[8] = 8 * (a4 != 0);
  strcpy((char *)a2 + 36, "Ct@2ultulU<b>");
  *((_WORD *)a2 + 25) = 0;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)a1;
  *a2 = 60;
  *(void *)(a2 + 15) = *(void *)(a1 + 8);
  *a2 = 68;
  *(_OWORD *)(a2 + 17) = *(_OWORD *)(a1 + 16);
  *a2 = 84;
  *(void *)(a2 + 21) = *(void *)(a1 + 32);
  *a2 = 92;
  *(void *)(a2 + 23) = *(void *)(a1 + 40);
  *a2 = 100;
  AppendString(*(const char **)(a1 + 48), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC00000000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC00300000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctululul@3ultulul@3ul");
  *(_WORD *)(a2 + 58) = 0;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)a1;
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = *(void *)(a1 + 32);
  *(_DWORD *)a2 = 100;
  uint64_t v11 = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 100) = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 116) = v11;
  *(_DWORD *)a2 = 124;
  *(void *)(a2 + 124) = *(void *)(a1 + 64);
  *(_DWORD *)a2 = 132;
  *(void *)(a2 + 132) = *(void *)(a1 + 72);
  *(_DWORD *)a2 = 140;
  *(void *)(a2 + 140) = *(void *)(a1 + 80);
  *(_DWORD *)a2 = 148;
  uint64_t v12 = *(void *)(a1 + 104);
  *(_OWORD *)(a2 + 148) = *(_OWORD *)(a1 + 88);
  *(void *)(a2 + 164) = v12;
  unint64_t v13 = 172;
  *(_DWORD *)a2 = 172;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 172), __src, v14 + 8);
    uint64_t v15 = (v14 + 180);
    unint64_t v13 = (v14 + 183) & 0xFFFFFFFC;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }
  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_options(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC0AE00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctululul@3ultulul@3ulul");
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)a1;
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = *(void *)(a1 + 32);
  *(_DWORD *)a2 = 100;
  uint64_t v11 = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 100) = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 116) = v11;
  *(_DWORD *)a2 = 124;
  *(void *)(a2 + 124) = *(void *)(a1 + 64);
  *(_DWORD *)a2 = 132;
  *(void *)(a2 + 132) = *(void *)(a1 + 72);
  *(_DWORD *)a2 = 140;
  *(void *)(a2 + 140) = *(void *)(a1 + 80);
  *(_DWORD *)a2 = 148;
  uint64_t v12 = *(void *)(a1 + 104);
  *(_OWORD *)(a2 + 148) = *(_OWORD *)(a1 + 88);
  *(void *)(a2 + 164) = v12;
  *(_DWORD *)a2 = 172;
  *(void *)(a2 + 172) = *(void *)(a1 + 112);
  unint64_t v13 = 180;
  *(_DWORD *)a2 = 180;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 180), __src, v14 + 8);
    uint64_t v15 = (v14 + 188);
    unint64_t v13 = (v14 + 191) & 0xFFFFFFFC;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }
  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_copyFromBuffer_sourceOffset_toBuffer_destinationOffset_size(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC00700000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 44) = 108;
  *(void *)(a2 + 36) = *(void *)"Ctultulul";
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = a1[5];
  unint64_t v11 = 96;
  *(_DWORD *)a2 = 96;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 96), __src, v12 + 8);
    uint64_t v13 = (v12 + 104);
    unint64_t v11 = (v12 + 107) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_destinationOffset_destinationBytesPerRow_destinationBytesPerImage(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC00400000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctulul@3ul@3ultululul");
  *(_WORD *)(a2 + 58) = 0;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)a1;
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 92;
  uint64_t v11 = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 92) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 108) = v11;
  *(_DWORD *)a2 = 116;
  uint64_t v12 = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 116) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 132) = v12;
  *(_DWORD *)a2 = 140;
  *(void *)(a2 + 140) = *(void *)(a1 + 80);
  *(_DWORD *)a2 = 148;
  *(void *)(a2 + 148) = *(void *)(a1 + 88);
  *(_DWORD *)a2 = 156;
  *(void *)(a2 + 156) = *(void *)(a1 + 96);
  *(_DWORD *)a2 = 164;
  *(void *)(a2 + 164) = *(void *)(a1 + 104);
  unint64_t v13 = 172;
  *(_DWORD *)a2 = 172;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 172), __src, v14 + 8);
    uint64_t v15 = (v14 + 180);
    unint64_t v13 = (v14 + 183) & 0xFFFFFFFC;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }
  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_destinationOffset_destinationBytesPerRow_destinationBytesPerImage_options(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC0AF00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctulul@3ul@3ultulululul");
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)a1;
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 92;
  uint64_t v11 = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 92) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 108) = v11;
  *(_DWORD *)a2 = 116;
  uint64_t v12 = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 116) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 132) = v12;
  *(_DWORD *)a2 = 140;
  *(void *)(a2 + 140) = *(void *)(a1 + 80);
  *(_DWORD *)a2 = 148;
  *(void *)(a2 + 148) = *(void *)(a1 + 88);
  *(_DWORD *)a2 = 156;
  *(void *)(a2 + 156) = *(void *)(a1 + 96);
  *(_DWORD *)a2 = 164;
  *(void *)(a2 + 164) = *(void *)(a1 + 104);
  *(_DWORD *)a2 = 172;
  *(void *)(a2 + 172) = *(void *)(a1 + 112);
  unint64_t v13 = 180;
  *(_DWORD *)a2 = 180;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 180), __src, v14 + 8);
    uint64_t v15 = (v14 + 188);
    unint64_t v13 = (v14 + 191) & 0xFFFFFFFC;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }
  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    long long v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC00200000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctulul@3ul@3ultulul@3ul");
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)a1;
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 92;
  uint64_t v11 = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 92) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 108) = v11;
  *(_DWORD *)a2 = 116;
  uint64_t v12 = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 116) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 132) = v12;
  *(_DWORD *)a2 = 140;
  *(void *)(a2 + 140) = *(void *)(a1 + 80);
  *(_DWORD *)a2 = 148;
  *(void *)(a2 + 148) = *(void *)(a1 + 88);
  *(_DWORD *)a2 = 156;
  *(void *)(a2 + 156) = *(void *)(a1 + 96);
  *(_DWORD *)a2 = 164;
  uint64_t v13 = *(void *)(a1 + 120);
  *(_OWORD *)(a2 + 164) = *(_OWORD *)(a1 + 104);
  *(void *)(a2 + 180) = v13;
  unint64_t v14 = 188;
  *(_DWORD *)a2 = 188;
  if (__src)
  {
    int v15 = 8 * *__src;
    memcpy((void *)(a2 + 188), __src, v15 + 8);
    uint64_t v16 = (v15 + 196);
    unint64_t v14 = (v15 + 199) & 0xFFFFFFFC;
    bzero((void *)(a2 + v16), v14 - v16);
    *(_DWORD *)a2 = v14;
  }
  if (v14 > a3)
  {
    if (a5)
    {
      int v17 = *a5;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      long long v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_options(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    long long v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC0AD00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctulul@3ul@3ultulul@3ulul");
  *(_WORD *)(a2 + 62) = 0;
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = *(void *)a1;
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 96;
  uint64_t v11 = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 112) = v11;
  *(_DWORD *)a2 = 120;
  uint64_t v12 = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 136) = v12;
  *(_DWORD *)a2 = 144;
  *(void *)(a2 + 144) = *(void *)(a1 + 80);
  *(_DWORD *)a2 = 152;
  *(void *)(a2 + 152) = *(void *)(a1 + 88);
  *(_DWORD *)a2 = 160;
  *(void *)(a2 + 160) = *(void *)(a1 + 96);
  *(_DWORD *)a2 = 168;
  uint64_t v13 = *(void *)(a1 + 120);
  *(_OWORD *)(a2 + 168) = *(_OWORD *)(a1 + 104);
  *(void *)(a2 + 184) = v13;
  *(_DWORD *)a2 = 192;
  *(void *)(a2 + 192) = *(void *)(a1 + 128);
  unint64_t v14 = 200;
  *(_DWORD *)a2 = 200;
  if (__src)
  {
    int v15 = 8 * *__src;
    memcpy((void *)(a2 + 200), __src, v15 + 8);
    uint64_t v16 = (v15 + 208);
    unint64_t v14 = (v15 + 211) & 0xFFFFFFF8;
    bzero((void *)(a2 + v16), v14 - v16);
    *(_DWORD *)a2 = v14;
  }
  if (v14 > a3)
  {
    if (a5)
    {
      int v17 = *a5;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      long long v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_copyFromTexture_sourceSlice_sourceLevel_toTexture_destinationSlice_destinationLevel_sliceCount_levelCount(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC1FA00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctulultulululul");
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *a1;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[2];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[3];
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = a1[4];
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = a1[5];
  *(_DWORD *)a2 = 100;
  *(void *)(a2 + 100) = a1[6];
  *(_DWORD *)a2 = 108;
  *(void *)(a2 + 108) = a1[7];
  *(_DWORD *)a2 = 116;
  *(void *)(a2 + 116) = a1[8];
  unint64_t v11 = 124;
  *(_DWORD *)a2 = 124;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 124), __src, v12 + 8);
    uint64_t v13 = (v12 + 132);
    unint64_t v11 = (v12 + 135) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_copyFromTexture_toTexture(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7631939;
  *(void *)a2 = 0xFFFFC1FB00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[2];
  unint64_t v11 = 64;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v12 + 8);
    uint64_t v13 = (v12 + 72);
    unint64_t v11 = (v12 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_copyIndirectCommandBuffer_sourceRange_destination_destinationIndex(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC1A900000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 44) = 108;
  *(void *)(a2 + 36) = *(void *)"Ct@2ultul";
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 64;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 16);
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = *(void *)(a1 + 32);
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = *(void *)(a1 + 40);
  unint64_t v11 = 96;
  *(_DWORD *)a2 = 96;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 96), __src, v12 + 8);
    uint64_t v13 = (v12 + 104);
    unint64_t v11 = (v12 + 107) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC00100000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_endEncoding(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC00800000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_fillBuffer_range_pattern4(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC38E00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ct@2ului");
  *(_WORD *)(a2 + 45) = 0;
  *(unsigned char *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 64;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 16);
  *(_DWORD *)a2 = 80;
  *(_DWORD *)(a2 + 80) = *(_DWORD *)(a1 + 32);
  unint64_t v11 = 84;
  *(_DWORD *)a2 = 84;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 84), __src, v12 + 8);
    uint64_t v13 = (v12 + 92);
    unint64_t v11 = (v12 + 95) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_fillBuffer_range_value(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC00600000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ct@2ulub");
  *(_WORD *)(a2 + 45) = 0;
  *(unsigned char *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 64;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 16);
  *(_DWORD *)a2 = 80;
  *(unsigned char *)(a2 + 80) = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a2 + 83) = 0;
  *(_WORD *)(a2 + 81) = 0;
  unint64_t v11 = 84;
  *(_DWORD *)a2 = 84;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 84), __src, v12 + 8);
    uint64_t v13 = (v12 + 92);
    unint64_t v11 = (v12 + 95) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_fillTexture_level_slice_region_bytes_length(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    long long v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC38F00000024;
  a2[8] = 8 * (a4 != 0);
  strcpy((char *)a2 + 36, "Ctulul@6ulU<b>ul");
  *(_WORD *)((char *)a2 + 53) = 0;
  *((unsigned char *)a2 + 55) = 0;
  *a2 = 56;
  *((void *)a2 + 7) = *(void *)a1;
  *a2 = 64;
  *((void *)a2 + 8) = *(void *)(a1 + 8);
  *a2 = 72;
  *((void *)a2 + 9) = *(void *)(a1 + 16);
  *a2 = 80;
  *((void *)a2 + 10) = *(void *)(a1 + 24);
  *a2 = 88;
  long long v12 = *(_OWORD *)(a1 + 48);
  long long v11 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 22) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 26) = v12;
  *(_OWORD *)(a2 + 30) = v11;
  *a2 = 136;
  AppendString(*(const char **)(a1 + 80), (int *)a2);
  uint64_t v13 = *a2;
  uint64_t v14 = (v13 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v13, v14 - v13);
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 88);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      long long v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_fillTexture_level_slice_region_color(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    int v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC39000000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctulul@6ul@4d");
  *(_WORD *)(a2 + 50) = 0;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)a1;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 84;
  long long v12 = *(_OWORD *)(a1 + 48);
  long long v11 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 84) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 100) = v12;
  *(_OWORD *)(a2 + 116) = v11;
  *(_DWORD *)a2 = 132;
  long long v13 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 148) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 132) = v13;
  unint64_t v14 = 164;
  *(_DWORD *)a2 = 164;
  if (__src)
  {
    int v15 = 8 * *__src;
    memcpy((void *)(a2 + 164), __src, v15 + 8);
    uint64_t v16 = (v15 + 172);
    unint64_t v14 = (v15 + 175) & 0xFFFFFFFC;
    bzero((void *)(a2 + v16), v14 - v16);
    *(_DWORD *)a2 = v14;
  }
  if (v14 > a3)
  {
    if (a5)
    {
      int v17 = *a5;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      int v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_fillTexture_level_slice_region_color_pixelFormat(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    int v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC39100000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctulul@6ul@4dul");
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)a1;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 84;
  long long v12 = *(_OWORD *)(a1 + 48);
  long long v11 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 84) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 100) = v12;
  *(_OWORD *)(a2 + 116) = v11;
  *(_DWORD *)a2 = 132;
  long long v13 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 148) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 132) = v13;
  *(_DWORD *)a2 = 164;
  *(void *)(a2 + 164) = *(void *)(a1 + 112);
  unint64_t v14 = 172;
  *(_DWORD *)a2 = 172;
  if (__src)
  {
    int v15 = 8 * *__src;
    memcpy((void *)(a2 + 172), __src, v15 + 8);
    uint64_t v16 = (v15 + 180);
    unint64_t v14 = (v15 + 183) & 0xFFFFFFFC;
    bzero((void *)(a2 + v16), v14 - v16);
    *(_DWORD *)a2 = v14;
  }
  if (v14 > a3)
  {
    if (a5)
    {
      int v17 = *a5;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      int v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_generateMipmapsForTexture(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC00500000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_getTextureAccessCounters_region_mipLevel_slice_resetCounters_countersBuffer_countersBufferOffset(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC19700000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ct@6ulululuitul");
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)a1;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 68;
  long long v12 = *(_OWORD *)(a1 + 32);
  long long v11 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 68) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 84) = v12;
  *(_OWORD *)(a2 + 100) = v11;
  *(_DWORD *)a2 = 116;
  *(void *)(a2 + 116) = *(void *)(a1 + 64);
  *(_DWORD *)a2 = 124;
  *(void *)(a2 + 124) = *(void *)(a1 + 72);
  *(_DWORD *)a2 = 132;
  *(_DWORD *)(a2 + 132) = *(_DWORD *)(a1 + 96);
  *(_DWORD *)a2 = 136;
  *(void *)(a2 + 136) = *(void *)(a1 + 80);
  *(_DWORD *)a2 = 144;
  *(void *)(a2 + 144) = *(void *)(a1 + 88);
  unint64_t v13 = 152;
  *(_DWORD *)a2 = 152;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 152), __src, v14 + 8);
    uint64_t v15 = (v14 + 160);
    unint64_t v13 = (v14 + 163) & 0xFFFFFFF8;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }
  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_insertDebugSignpost(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC00900000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_invalidateCompressedTexture(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC39200000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_invalidateCompressedTexture_slice_level(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC39300000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_optimizeContentsForCPUAccess(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC18700000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_optimizeContentsForCPUAccess_slice_level(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC18800000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_optimizeContentsForGPUAccess(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC18500000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_optimizeContentsForGPUAccess_slice_level(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC18600000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_optimizeIndirectCommandBuffer_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC1AA00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ct@2ul");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(_OWORD *)(a2 + 60) = *(_OWORD *)(a1 + 16);
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_popDebugGroup(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC00B00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_pushDebugGroup(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC00A00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_resetCommandsInBuffer_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC1A800000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ct@2ul");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(_OWORD *)(a2 + 60) = *(_OWORD *)(a1 + 16);
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_resetTextureAccessCounters_region_mipLevel_slice(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)a2 = 0xFFFFC19800000024;
  strcpy((char *)(a2 + 36), "Ct@6ululul");
  *(unsigned char *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 64;
  long long v12 = *(_OWORD *)(a1 + 32);
  long long v11 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 80) = v12;
  *(_OWORD *)(a2 + 96) = v11;
  *(_DWORD *)a2 = 112;
  *(void *)(a2 + 112) = *(void *)(a1 + 64);
  *(_DWORD *)a2 = 120;
  *(void *)(a2 + 120) = *(void *)(a1 + 72);
  unint64_t v13 = 128;
  *(_DWORD *)a2 = 128;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 128), __src, v14 + 8);
    uint64_t v15 = (v14 + 136);
    unint64_t v13 = (v14 + 139) & 0xFFFFFFF8;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }
  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_sampleCountersInBuffer_atSampleIndex_withBarrier(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC27500000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctului");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 68;
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 24);
  unint64_t v11 = 72;
  *(_DWORD *)a2 = 72;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 72), __src, v12 + 8);
    uint64_t v13 = (v12 + 80);
    unint64_t v11 = (v12 + 83) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_synchronizeResource(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC0AB00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_synchronizeTexture_slice_level(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC0AC00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_updateFence(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC10400000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBlitCommandEncoder_waitForFence(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC0FD00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBuffer_allocationID(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD82500000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLBuffer_contents(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC00F00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLBuffer_gpuVirtualAddress(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD80C00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLBuffer_heapOffset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFD83500000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBuffer_parentGPUAddress_parentGPUSize(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFD83600000024;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x7775777543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLBuffer_resourceUsage(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFD80500000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v13 + 8);
    uint64_t v14 = (v13 + 60);
    unint64_t v12 = (v13 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLBuffer_saveContentsToPath(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    long long v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  a2[8] = v11;
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFD82800000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  unint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = (v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }
  if (v13 > a3 && a5 != 0)
  {
    int v17 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v17;
    int v19 = 500;
    long long v20 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
}

void DYTraceEncode_MTLBuffer_timeSinceTouched(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 78;
  }
  else {
    int v11 = 70;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD81E00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLBuffer_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC00C00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLBuffer_setParentGPUAddress(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFC36F00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBuffer_setParentGPUSize(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFC37000000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBuffer_setResponsibleProcess(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 26947;
  *(void *)a2 = 0xFFFFC00D00000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v13 + 8);
    uint64_t v14 = (v13 + 60);
    unint64_t v12 = (v13 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLBuffer_addDebugMarker_range(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC11900000024;
  a2[8] = 8 * (a4 != 0);
  strcpy((char *)a2 + 36, "CS@2ul");
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(_OWORD *)((char *)a2 + v12) = *(_OWORD *)(a1 + 16);
  unint64_t v13 = *a2 + 16;
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = (v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }
  if (a5)
  {
    if (v13 > a3)
    {
      int v16 = *a5;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }
}

void DYTraceEncode_MTLBuffer_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC00E00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBuffer_didModifyRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC0B000000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C75324043;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(_OWORD *)(a2 + 52) = *(_OWORD *)(a1 + 8);
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBuffer_isAliasable(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC10F00000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)(a2 + 48) = 26997;
  *(_DWORD *)a2 = 52;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLBuffer_isPurgeable(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC01200000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)(a2 + 48) = 26997;
  *(_DWORD *)a2 = 52;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLBuffer_makeAliasable(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC10600000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLBuffer_newLinearTextureWithDescriptor_offset_bytesPerRow_bytesPerImage(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v25 = 0u;
    long long v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    long long v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC11E00000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CUululul");
  *(_WORD *)((char *)a2 + 45) = 0;
  *((unsigned char *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 40);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(_WORD *)((char *)a2 + v16) = 116;
  uint64_t v17 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v17 - (*a2 + 2));
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 8);
  unint64_t v18 = *a2 + 8;
  *a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((char *)a2 + v18, a4, v19);
    uint64_t v20 = v19 + *a2;
    unint64_t v18 = (v20 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v20, v18 - v20);
    *a2 = v18;
  }
  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      long long v25 = 0u;
      long long v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      long long v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }
}

void DYTraceEncode_MTLBuffer_newRemoteBufferViewForDevice(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    unint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC1D600000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      unint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLBuffer_newTiledTextureWithDescriptor_offset_bytesPerRow(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    int v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC11800000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CUulul");
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 116;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      int v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLCaptureManager_newCaptureScopeWithCommandQueue(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 11;
  }
  else {
    int v11 = 3;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC28B00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLCaptureManager_newCaptureScopeWithDevice(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 11;
  }
  else {
    int v11 = 3;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC28A00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLCaptureManager_notifyPostPresentHandoffSPI(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC16D00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v12 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v13 + 8);
    uint64_t v14 = (v13 + 56);
    unint64_t v12 = (v13 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLCaptureManager_notifySubmissionForEyeSPI_iosurface_bounds_submitFlags(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC15E00000024;
  if (__src) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 44) = 108;
  *(void *)(a2 + 36) = *(void *)"Cult@4dul";
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 72;
  long long v12 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 88) = v12;
  *(_DWORD *)a2 = 104;
  *(void *)(a2 + 104) = *(void *)(a1 + 56);
  unint64_t v13 = 112;
  *(_DWORD *)a2 = 112;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 112), __src, v14 + 8);
    uint64_t v15 = (v14 + 120);
    unint64_t v13 = (v14 + 123) & 0xFFFFFFF8;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }
  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }
}

void DYTraceEncode_MTLCaptureManager_startCaptureWithCommandQueue(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC13C00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLCaptureManager_startCaptureWithDescriptor_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    long long v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC28800000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 16);
  unint64_t v14 = *a2 + 8;
  *a2 = v14;
  if (a4)
  {
    int v15 = 8 * *a4 + 8;
    memcpy((char *)a2 + v14, a4, v15);
    uint64_t v16 = v15 + *a2;
    unint64_t v14 = (v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v14 - v16);
    *a2 = v14;
  }
  if (a5)
  {
    if (v14 > a3)
    {
      int v17 = *a5;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      long long v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }
}

void DYTraceEncode_MTLCaptureManager_startCaptureWithDevice(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC13B00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLCaptureManager_startCaptureWithScope(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC28900000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCaptureManager_stopCapture(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC13D00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v12 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v13 + 8);
    uint64_t v14 = (v13 + 56);
    unint64_t v12 = (v13 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLCaptureScope_beginScope(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC13900000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCaptureScope_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC13800000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCaptureScope_endScope(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC13A00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCaptureScope_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC13700000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLCommandBuffer_restoreMTLBufferContents(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    long long v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFD80000000024;
  if (a4) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CtU<b>ulul");
  *((unsigned char *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  *((void *)a2 + 7) = *(void *)(a1 + 8);
  *a2 = 64;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      long long v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    int v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC01300000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    int v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLCommandBuffer_setProfilingEnabled(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC01400000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_setSharedIndirectionTable(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC35300000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_accelerationStructureCommandEncoder(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC2C700000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_accelerationStructureCommandEncoderWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    long long v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC3FC00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      long long v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_addCompletedHandler(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC01C00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_addPurgedHeap(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC1A200000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_addPurgedResource(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC1A100000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_addScheduledHandler(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC01800000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_blitCommandEncoder(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC01E00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_blitCommandEncoderWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    long long v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC31D00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      long long v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_commit(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC01700000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_commitAndHold(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC0B600000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_commitAndWaitUntilSubmitted(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC1DC00000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)(a2 + 48) = 26997;
  *(_DWORD *)a2 = 52;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_commitAndWaitUntilSubmittedWithDeadline(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFC42C00000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)(a1 + 8);
  *(_DWORD *)(a2 + 56) = 26997;
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 16);
  unint64_t v12 = 64;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v13 + 8);
    uint64_t v14 = (v13 + 72);
    unint64_t v12 = (v13 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_commitWithDeadline(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFC42A00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_computeCommandEncoder(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC02000000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_computeCommandEncoderWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    long long v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC31E00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      long long v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_computeCommandEncoderWithDispatchType(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC17200000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_computeCommandEncoderWithDispatchType_substreamCount(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC2A000000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x69756C7543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a2 + 64) = 116;
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 8);
  unint64_t v12 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v13 + 8);
    uint64_t v14 = (v13 + 84);
    unint64_t v12 = (v13 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC01500000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_debugCommandEncoder(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC02200000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_doCorruptCBSPI(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 26947;
  *(void *)a2 = 0xFFFFC17400000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_dropResourceGroups_count(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC1E700000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_encodeDashboardFinalizeForResourceGroup_dashboard_value_forIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC37300000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctululul");
  *(_WORD *)(a2 + 45) = 0;
  *(unsigned char *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  unint64_t v11 = 88;
  *(_DWORD *)a2 = 88;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 88), __src, v12 + 8);
    uint64_t v13 = (v12 + 96);
    unint64_t v11 = (v12 + 99) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_encodeDashboardFinalizeForResourceGroup_dashboard_values_indices_count(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v26 = 0u;
    long long v27 = 0u;
    int v23 = v10;
    int v24 = 500;
    long long v25 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v23);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3CE00000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 40);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "Ctul@%zuul@%zuulul", v11, v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  unsigned int v14 = *(_DWORD *)a2 + 8;
  *(_DWORD *)a2 = v14;
  *(void *)(a2 + v14) = *(void *)(a1 + 8);
  unsigned int v15 = *(_DWORD *)a2 + 8;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  uint64_t v16 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v16;
  v11 *= 8;
  memcpy((void *)(a2 + v16), *(const void **)(a1 + 24), v11);
  uint64_t v17 = (*(_DWORD *)a2 + v11);
  *(_DWORD *)a2 = v17;
  memcpy((void *)(a2 + v17), *(const void **)(a1 + 32), v11);
  unsigned int v18 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v18;
  *(void *)(a2 + v18) = *(void *)(a1 + 40);
  unint64_t v19 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v19;
  if (a4)
  {
    int v20 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v19), a4, v20);
    uint64_t v21 = (v20 + *(_DWORD *)a2);
    unint64_t v19 = (v21 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v21), v19 - v21);
    *(_DWORD *)a2 = v19;
  }
  if (a5)
  {
    if (v19 > a3)
    {
      int v22 = *a5;
      long long v26 = 0u;
      long long v27 = 0u;
      int v23 = v22;
      int v24 = 500;
      long long v25 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v23);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_encodeDashboardTagForResourceGroup(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC37400000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_encodeSignalEvent_value(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC18A00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctuw");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_encodeSignalEventScheduled_value(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC48F00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctuw");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_encodeWaitForEvent_value(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC18900000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctuw");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_encodeWaitForEvent_value_timeout(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC27B00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctuwui");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 68;
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 24);
  unint64_t v11 = 72;
  *(_DWORD *)a2 = 72;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 72), __src, v12 + 8);
    uint64_t v13 = (v12 + 80);
    unint64_t v11 = (v12 + 83) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_enqueue(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC01600000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_parallelRenderCommandEncoderWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    uint64_t v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC02100000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      uint64_t v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_popDebugGroup(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC14000000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_presentDrawable(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC01900000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_presentDrawable_afterMinimumDuration(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 6583363;
  *(void *)a2 = 0xFFFFC0FB00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[2];
  unint64_t v11 = 64;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v12 + 8);
    uint64_t v13 = (v12 + 72);
    unint64_t v11 = (v12 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_presentDrawable_atTime(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 6583363;
  *(void *)a2 = 0xFFFFC01A00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[2];
  unint64_t v11 = 64;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v12 + 8);
    uint64_t v13 = (v12 + 72);
    unint64_t v11 = (v12 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_pushDebugGroup(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC13F00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLCommandBuffer_renderCommandEncoderWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    long long v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC01F00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      long long v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_resourceStateCommandEncoder(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC20200000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_resourceStateCommandEncoderWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    long long v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC31F00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      long long v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_sampledComputeCommandEncoderWithDescriptor_programInfoBuffer_capacity(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC32000000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CUU<b>ul");
  *(_WORD *)((char *)a2 + 45) = 0;
  *((unsigned char *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_setResourceGroups_count(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC1E600000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_useResidencySet(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC46A00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_useResidencySets_count(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC46B00000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_videoCommandEncoder(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC17300000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_waitUntilCompleted(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC01D00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandBuffer_waitUntilScheduled(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC01B00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandQueue_setBackgroundTrackingPID(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 26947;
  *(void *)a2 = 0xFFFFC02400000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandQueue_setExecutionEnabled(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC02600000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandQueue_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC02300000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLCommandQueue_setProfilingEnabled(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC02700000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandQueue_setSkipRender(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC02500000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandQueue_addResidencySet(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC46C00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandQueue_addResidencySets_count(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC46D00000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLCommandQueue_commandBuffer(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC02900000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLCommandQueue_commandBufferWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC2AB00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLCommandQueue_commandBufferWithUnretainedReferences(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC02A00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLCommandQueue_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC02800000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandQueue_finish(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC02C00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandQueue_getSPIStats(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    long long v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 67;
  *(void *)a2 = 0xFFFFC2F800000028;
  *((void *)a2 + 5) = *(void *)a1;
  strcpy((char *)a2 + 48, "U<b>");
  *(_WORD *)((char *)a2 + 53) = 0;
  *((unsigned char *)a2 + 55) = 0;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  unint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = (v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }
  if (v13 > a3 && a5 != 0)
  {
    int v17 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v17;
    int v19 = 500;
    long long v20 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
}

void DYTraceEncode_MTLCommandQueue_insertDebugCaptureBoundary(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC02B00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandQueue_removeResidencySet(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC46E00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandQueue_removeResidencySets_count(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC46F00000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLCommandQueue_setBackgroundGPUPriority(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC23F00000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)(a1 + 8);
  *(_DWORD *)(a2 + 56) = 26997;
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 16);
  unint64_t v12 = 64;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v13 + 8);
    uint64_t v14 = (v13 + 72);
    unint64_t v12 = (v13 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLCommandQueue_setBackgroundGPUPriority_offset(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC24000000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x73756C7543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(_WORD *)(a2 + 60) = *(_WORD *)(a1 + 20);
  *(_DWORD *)(a2 + 62) = 1769275392;
  *(_WORD *)(a2 + 66) = 0;
  *(_DWORD *)a2 = 68;
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 16);
  unint64_t v12 = 72;
  *(_DWORD *)a2 = 72;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 72), __src, v13 + 8);
    uint64_t v14 = (v13 + 80);
    unint64_t v12 = (v13 + 83) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLCommandQueue_setCompletionQueue(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC24100000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCommandQueue_setGPUPriority(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC24200000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)(a1 + 8);
  *(_DWORD *)(a2 + 56) = 26997;
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 16);
  unint64_t v12 = 64;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v13 + 8);
    uint64_t v14 = (v13 + 72);
    unint64_t v12 = (v13 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLCommandQueue_setGPUPriority_offset(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC24300000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x73756C7543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(_WORD *)(a2 + 60) = *(_WORD *)(a1 + 20);
  *(_DWORD *)(a2 + 62) = 1769275392;
  *(_WORD *)(a2 + 66) = 0;
  *(_DWORD *)a2 = 68;
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 16);
  unint64_t v12 = 72;
  *(_DWORD *)a2 = 72;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 72), __src, v13 + 8);
    uint64_t v14 = (v13 + 80);
    unint64_t v12 = (v13 + 83) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLCommandQueue_setSubmissionQueue(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC24400000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_executeCommandsInBuffer_indirectBuffer_indirectBufferOffset(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  *(void *)(a2 + 9) = 0x55556C75747443;
  *(void *)a2 = 0xFFFFC1A50000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 8);
  *a2 = 60;
  *(void *)(a2 + 15) = *(void *)(a1 + 16);
  *a2 = 68;
  *(void *)(a2 + 17) = *(void *)(a1 + 24);
  *a2 = 76;
  AppendString(*(const char **)(a1 + 40), (int *)a2);
  AppendString(*(const char **)(a1 + 48), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_executeCommandsInBuffer_withRange(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  *(void *)(a2 + 9) = 0x556C7532407443;
  *(void *)a2 = 0xFFFFC1A40000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 8);
  *a2 = 60;
  *(_OWORD *)(a2 + 15) = *(_OWORD *)(a1 + 16);
  *a2 = 76;
  AppendString(*(const char **)(a1 + 40), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC02D00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC02E00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_dispatchThreadgroups_threadsPerThreadgroup(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC03900000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 44) = 108;
  *(void *)(a2 + 36) = *(void *)"C@3ul@3ul";
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  uint64_t v11 = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 72) = v11;
  *(_DWORD *)a2 = 80;
  uint64_t v12 = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 96) = v12;
  unint64_t v13 = 104;
  *(_DWORD *)a2 = 104;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 104), __src, v14 + 8);
    uint64_t v15 = (v14 + 112);
    unint64_t v13 = (v14 + 115) & 0xFFFFFFF8;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }
  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_dispatchThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerThreadgroup(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC0A400000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul@3ul");
  *(_WORD *)(a2 + 45) = 0;
  *(unsigned char *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 72;
  uint64_t v11 = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 88) = v11;
  unint64_t v12 = 96;
  *(_DWORD *)a2 = 96;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 96), __src, v13 + 8);
    uint64_t v14 = (v13 + 104);
    unint64_t v12 = (v13 + 107) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_dispatchThreads_threadsPerThreadgroup(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC13200000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 44) = 108;
  *(void *)(a2 + 36) = *(void *)"C@3ul@3ul";
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  uint64_t v11 = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 72) = v11;
  *(_DWORD *)a2 = 80;
  uint64_t v12 = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 96) = v12;
  unint64_t v13 = 104;
  *(_DWORD *)a2 = 104;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 104), __src, v14 + 8);
    uint64_t v15 = (v14 + 112);
    unint64_t v13 = (v14 + 115) & 0xFFFFFFF8;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }
  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_dispatchThreadsWithIndirectBuffer_indirectBufferOffset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC13100000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_enableNullBufferBinds(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC28C00000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_endEncoding(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC03B00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_insertCompressedTextureReinterpretationFlush(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC36900000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_insertDebugSignpost(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC03C00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_memoryBarrierWithResources_count(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC17800000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_memoryBarrierWithScope(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC17700000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_popDebugGroup(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC03E00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_pushDebugGroup(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC03D00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_sampleCountersInBuffer_atSampleIndex_withBarrier(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC27600000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctului");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 68;
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 24);
  unint64_t v11 = 72;
  *(_DWORD *)a2 = 72;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 72), __src, v12 + 8);
    uint64_t v13 = (v12 + 80);
    unint64_t v11 = (v12 + 83) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_setAccelerationStructure_atBufferIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC2F900000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_setBuffer_offset_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC03000000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_setBuffer_offset_attributeStride_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC44C00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctululul");
  *(_WORD *)(a2 + 45) = 0;
  *(unsigned char *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  unint64_t v11 = 88;
  *(_DWORD *)a2 = 88;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 88), __src, v12 + 8);
    uint64_t v13 = (v12 + 96);
    unint64_t v11 = (v12 + 99) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_setBufferOffset_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC09E00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C756C7543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_setBufferOffset_attributeStride_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C756C756C7543;
  *(void *)a2 = 0xFFFFC44D0000002CLL;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_setBuffers_offsets_attributeStrides_withRange(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC44E00000024;
  a2[8] = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 40);
  int v12 = snprintf((char *)a2 + 36, a3 - 36, "C@%zutU<b>U<b>@2ul", v11) + *a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((char *)a2 + (v12 + 1), v13 - (v12 + 1));
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)a1;
  uint64_t v14 = *a2 + 8;
  *a2 = v14;
  v11 *= 8;
  memcpy((char *)a2 + v14, *(const void **)(a1 + 8), v11);
  *a2 += v11;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v15 = *a2;
  uint64_t v16 = (v15 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v15, v16 - v15);
  *a2 = v16;
  *(_OWORD *)((char *)a2 + v16) = *(_OWORD *)(a1 + 32);
  unint64_t v17 = *a2 + 16;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_setBuffers_offsets_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC03100000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 32);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@%zuul@2ul", v11, v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  uint64_t v15 = (*(_DWORD *)a2 + v11);
  *(_DWORD *)a2 = v15;
  memcpy((void *)(a2 + v15), *(const void **)(a1 + 16), v11);
  unsigned int v16 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v16;
  *(_OWORD *)(a2 + v16) = *(_OWORD *)(a1 + 24);
  unint64_t v17 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v17), a4, v18);
    uint64_t v19 = (v18 + *(_DWORD *)a2);
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v19), v17 - v19);
    *(_DWORD *)a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_setBytes_length_atIndex(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    int v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC09D00000024;
  a2[8] = 8 * (a4 != 0);
  a2[11] = 108;
  *(void *)(a2 + 9) = *(void *)"CU<b>ulul";
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 16);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unint64_t v14 = *a2 + 8;
  *a2 = v14;
  if (a4)
  {
    int v15 = 8 * *a4 + 8;
    memcpy((char *)a2 + v14, a4, v15);
    uint64_t v16 = v15 + *a2;
    unint64_t v14 = (v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v14 - v16);
    *a2 = v14;
  }
  if (a5)
  {
    if (v14 > a3)
    {
      int v17 = *a5;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      int v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_setBytes_length_attributeStride_atIndex(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    long long v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC44F00000024;
  a2[8] = 8 * (a4 != 0);
  strcpy((char *)a2 + 36, "CU<b>ululul");
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 16);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      long long v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_setComputePipelineState(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC02F00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_setImageblockWidth_height(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC0EB00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C756C7543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_setIntersectionFunctionTable_atBufferIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC32100000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_setIntersectionFunctionTables_withBufferRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC32200000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_setSamplerState_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC03400000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_setSamplerState_lodMinClamp_lodMaxClamp_atIndex(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC03600000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctfful");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)a2 = 64;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 16);
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_setSamplerStates_lodMinClamps_lodMaxClamps_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v25 = 0u;
    long long v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    long long v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC03700000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  uint64_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@%zuf@%zuf@2ul", v11, v11, v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), 8 * v11);
  uint64_t v15 = (*(_DWORD *)a2 + 8 * v11);
  *(_DWORD *)a2 = v15;
  memcpy((void *)(a2 + v15), *(const void **)(a1 + 32), 4 * v11);
  uint64_t v16 = (*(_DWORD *)a2 + 4 * v11);
  *(_DWORD *)a2 = v16;
  memcpy((void *)(a2 + v16), *(const void **)(a1 + 40), 4 * v11);
  unsigned int v17 = *(_DWORD *)a2 + 4 * v11;
  *(_DWORD *)a2 = v17;
  *(_OWORD *)(a2 + v17) = *(_OWORD *)(a1 + 16);
  unint64_t v18 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v18), a4, v19);
    uint64_t v20 = (v19 + *(_DWORD *)a2);
    unint64_t v18 = (v20 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v20), v18 - v20);
    *(_DWORD *)a2 = v18;
  }
  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      long long v25 = 0u;
      long long v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      long long v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_setSamplerStates_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC03500000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_setStageInRegion(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    int v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC11C00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C75364043;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  long long v11 = *(_OWORD *)(a1 + 8);
  long long v12 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 84) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 68) = v12;
  *(_OWORD *)(a2 + 52) = v11;
  unint64_t v13 = 100;
  *(_DWORD *)a2 = 100;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 100), __src, v14 + 8);
    uint64_t v15 = (v14 + 108);
    unint64_t v13 = (v14 + 111) & 0xFFFFFFFC;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }
  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      int v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_setStageInRegionWithIndirectBuffer_indirectBufferOffset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC16F00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_setSubstream(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC2A100000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_setTexture_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC03200000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_setTextures_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC03300000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_setThreadgroupDistributionMode(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC45000000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_setThreadgroupDistributionModeWithClusterGroupIndex(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC45100000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_setThreadgroupMemoryLength_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC03800000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C756C7543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_setThreadgroupPackingDisabled(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC45200000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_setVisibleFunctionTable_atBufferIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC32300000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_setVisibleFunctionTables_withBufferRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC32400000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_signalProgress(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC2A200000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_updateFence(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC0FE00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_useHeap(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC15300000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_useHeaps_count(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC15400000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_useResource_usage(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC15100000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_useResources_count_usage(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC15200000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutulul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unsigned int v16 = *(_DWORD *)a2 + 8;
  *(_DWORD *)a2 = v16;
  *(void *)(a2 + v16) = *(void *)(a1 + 24);
  unint64_t v17 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v17), a4, v18);
    uint64_t v19 = (v18 + *(_DWORD *)a2);
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v19), v17 - v19);
    *(_DWORD *)a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_waitForFence(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC0FF00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputeCommandEncoder_waitForProgress(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC2A300000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputePipelineState_allocatedSize(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFD83100000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v13 + 8);
    uint64_t v14 = (v13 + 60);
    unint64_t v12 = (v13 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLComputePipelineState_gpuResourceID(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD84E00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLComputePipelineState_timeSinceTouched(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD84500000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputePipelineState_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC03F00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLComputePipelineState_functionHandleWithFunction(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC2FC00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLComputePipelineState_newComputePipelineStateWithAdditionalBinaryFunctions_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC34B00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLComputePipelineState_newIntersectionFunctionTableWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC34C00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLComputePipelineState_newVisibleFunctionTableWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC32600000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLCounterSampleBuffer_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC20500000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLCounterSampleBuffer_resolveCounterRange(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC27700000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)(a2 + 9) = 0x6C75324043;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(_OWORD *)(a2 + 13) = *(_OWORD *)(a1 + 16);
  strcpy((char *)a2 + 68, "U<b>");
  *(_WORD *)((char *)a2 + 73) = 0;
  *((unsigned char *)a2 + 75) = 0;
  *a2 = 76;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  unint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = (v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }
  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }
}

void DYTraceEncode_MTLDeadlineProfile_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC42800000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLDepthStencilState_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC04000000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLDevice_compileVisibleFunction_withDescriptor_completionHandler(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC2FF00000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CtUt");
  *(_WORD *)((char *)a2 + 41) = 0;
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 16);
  *a2 = 60;
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_deviceReference(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    int v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFD80100000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    int v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLDevice_newBufferWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    long long v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 5592387;
  *(void *)a2 = 0xFFFFC36B00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      long long v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLDevice_newSharedEvent(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC18400000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a2 + 52) = 116;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)(a1 + 8);
  unint64_t v12 = 64;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v13 + 8);
    uint64_t v14 = (v13 + 72);
    unint64_t v12 = (v13 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_newSharedEventWithHandle(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC1DB00000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctuiuw");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = *(void *)(a1 + 24);
  *(_DWORD *)(a2 + 72) = 116;
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = *(void *)(a1 + 8);
  unint64_t v12 = 84;
  *(_DWORD *)a2 = 84;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 84), __src, v13 + 8);
    uint64_t v14 = (v13 + 92);
    unint64_t v12 = (v13 + 95) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_newSharedEventWithMachPort(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC1D800000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x7775697543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)(a1 + 16);
  *(_DWORD *)(a2 + 64) = 116;
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 8);
  unint64_t v12 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v13 + 8);
    uint64_t v14 = (v13 + 84);
    unint64_t v12 = (v13 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_newSharedTextureWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC19400000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_reserveResourceIndicesForResourceType_indices_indexCount(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    int v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC19D00000024;
  a2[8] = 8 * (a4 != 0);
  strcpy((char *)a2 + 36, "CulUul");
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 8);
  *a2 = 60;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 24);
  unint64_t v13 = *a2 + 8;
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = (v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }
  if (a5)
  {
    if (v13 > a3)
    {
      int v16 = *a5;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      int v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }
}

void DYTraceEncode_MTLDevice_setCommandBufferErrorOptions(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC2AE00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLDevice_setMetalAssertionsEnabled(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC04200000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLDevice_setPluginData(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC37500000024;
  a2[8] = 8 * (a4 != 0);
  *(void *)(a2 + 9) = 0x3E623C5543;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLDevice_setWritableHeapsEnabled(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC47200000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLDevice_compileVisibleFunction_withDescriptor_destinationBinaryArchive_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    long long v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC38D00000024;
  a2[8] = 8 * (a4 != 0);
  *(void *)(a2 + 9) = 0x7474557443;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 8);
  *a2 = 60;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 24);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unint64_t v14 = *a2 + 8;
  *a2 = v14;
  if (a4)
  {
    int v15 = 8 * *a4 + 8;
    memcpy((char *)a2 + v14, a4, v15);
    uint64_t v16 = v15 + *a2;
    unint64_t v14 = (v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v14 - v16);
    *a2 = v14;
  }
  if (a5)
  {
    if (v14 > a3)
    {
      int v17 = *a5;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      long long v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }
}

void DYTraceEncode_MTLDevice_copyShaderCacheToPath(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    long long v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC27D00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  strcpy((char *)a2 + v13, "ui");
  uint64_t v14 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v14 - (*a2 + 3));
  *a2 = v14;
  *(unsigned int *)((char *)a2 + v14) = *(_DWORD *)(a1 + 16);
  unint64_t v15 = *a2 + 4;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      long long v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLDevice_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC04300000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLDevice_deserializeInstanceAccelerationStructure_fromBytes_primitiveAccelerationStructures_withDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC3FD00000024;
  a2[8] = 8 * (a4 != 0);
  strcpy((char *)a2 + 36, "CtU<b>UU");
  *(_WORD *)((char *)a2 + 45) = 0;
  *((unsigned char *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  *((void *)a2 + 7) = *(void *)(a1 + 8);
  *a2 = 64;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  AppendString(*(const char **)(a1 + 32), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_deserializePrimitiveAccelerationStructure_fromBytes_withDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  *(void *)(a2 + 9) = 0x553E623C557443;
  *(void *)a2 = 0xFFFFC3FE0000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 8);
  *a2 = 60;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLDevice_heapBufferSizeAndAlignWithLength_options(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC11100000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x6C756C7543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 32);
  strcpy((char *)(a2 + 68), "@2ul");
  *(_WORD *)(a2 + 73) = 0;
  *(unsigned char *)(a2 + 75) = 0;
  *(_DWORD *)a2 = 76;
  *(_OWORD *)(a2 + 76) = *(_OWORD *)(a1 + 8);
  unint64_t v12 = 92;
  *(_DWORD *)a2 = 92;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 92), __src, v13 + 8);
    uint64_t v14 = (v13 + 100);
    unint64_t v12 = (v13 + 103) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_heapTextureSizeAndAlignWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    long long v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC11000000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  strcpy((char *)a2 + v13, "@2ul");
  uint64_t v14 = (*a2 & 0xFFFFFFFC) + 8;
  bzero((char *)a2 + *a2 + 5, v14 - (*a2 + 5));
  *a2 = v14;
  *(_OWORD *)((char *)a2 + v14) = *(_OWORD *)(a1 + 8);
  unint64_t v15 = *a2 + 16;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      long long v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLDevice_loadDynamicLibrariesForComputeDescriptor_options_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v25 = 0u;
    long long v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    long long v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC37600000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)(a2 + 9) = 0x746C755543;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 85;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v17 = *a2;
  unint64_t v18 = (v17 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v17, v18 - v17);
  *a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((char *)a2 + v18, a4, v19);
    uint64_t v20 = v19 + *a2;
    unint64_t v18 = (v20 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v20, v18 - v20);
    *a2 = v18;
  }
  if (v18 > a3)
  {
    if (a5)
    {
      int v21 = *a5;
      long long v25 = 0u;
      long long v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      long long v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }
}

void DYTraceEncode_MTLDevice_loadDynamicLibrariesForFunction_insertLibraries_options_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v25 = 0u;
    long long v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    long long v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC37700000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[11] = 116;
  *(void *)(a2 + 9) = *(void *)"CU<b>Uult";
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 40);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 85;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v17 = *a2;
  unint64_t v18 = (v17 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v17, v18 - v17);
  *a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((char *)a2 + v18, a4, v19);
    uint64_t v20 = v19 + *a2;
    unint64_t v18 = (v20 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v20, v18 - v20);
    *a2 = v18;
  }
  if (v18 > a3)
  {
    if (a5)
    {
      int v21 = *a5;
      long long v25 = 0u;
      long long v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      long long v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }
}

void DYTraceEncode_MTLDevice_minLinearTextureAlignmentForPixelFormat(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    unint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC12300000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 27765;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      unint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_minLinearTextureBaseAddressAlignmentForDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC29900000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  strcpy((char *)a2 + v13, "ul");
  uint64_t v14 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v14 - (*a2 + 3));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLDevice_newAccelerationStructureWithBuffer_offset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC39800000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[2];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[3];
  *(_DWORD *)(a2 + 68) = 116;
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[1];
  unint64_t v12 = 80;
  *(_DWORD *)a2 = 80;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 80), __src, v13 + 8);
    uint64_t v14 = (v13 + 88);
    unint64_t v12 = (v13 + 91) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_newAccelerationStructureWithBuffer_offset_resourceIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC40100000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctuluw");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[2];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[3];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[4];
  *(_DWORD *)(a2 + 76) = 116;
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[1];
  unint64_t v12 = 88;
  *(_DWORD *)a2 = 88;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 88), __src, v13 + 8);
    uint64_t v14 = (v13 + 96);
    unint64_t v12 = (v13 + 99) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_newAccelerationStructureWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC30100000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLDevice_newAccelerationStructureWithSize(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC30200000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_newAccelerationStructureWithSize_resourceIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC36E00000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x77756C7543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[2];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[3];
  *(_DWORD *)(a2 + 68) = 116;
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[1];
  unint64_t v12 = 80;
  *(_DWORD *)a2 = 80;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 80), __src, v13 + 8);
    uint64_t v14 = (v13 + 88);
    unint64_t v12 = (v13 + 91) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_newAccelerationStructureWithSize_withDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC40200000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CulU");
  *(_WORD *)((char *)a2 + 41) = 0;
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 16);
  *a2 = 60;
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLDevice_newArgumentEncoderWithBufferBinding(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC46300000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_newBinaryArchiveWithDescriptor_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC29B00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newBufferWithBytes_length_options_gpuAddress(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v25 = 0u;
    long long v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    long long v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC2A500000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>ululuw");
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 40);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(_WORD *)((char *)a2 + v16) = 116;
  uint64_t v17 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v17 - (*a2 + 2));
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 8);
  unint64_t v18 = *a2 + 8;
  *a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((char *)a2 + v18, a4, v19);
    uint64_t v20 = v19 + *a2;
    unint64_t v18 = (v20 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v20, v18 - v20);
    *a2 = v18;
  }
  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      long long v25 = 0u;
      long long v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      long long v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }
}

void DYTraceEncode_MTLDevice_newBufferWithBytesNoCopy_length_options_deallocator(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v25 = 0u;
    long long v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    long long v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC04800000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>ulult");
  *((unsigned char *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 40);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(_WORD *)((char *)a2 + v16) = 116;
  uint64_t v17 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v17 - (*a2 + 2));
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 8);
  unint64_t v18 = *a2 + 8;
  *a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((char *)a2 + v18, a4, v19);
    uint64_t v20 = v19 + *a2;
    unint64_t v18 = (v20 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v20, v18 - v20);
    *a2 = v18;
  }
  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      long long v25 = 0u;
      long long v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      long long v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }
}

void DYTraceEncode_MTLDevice_newBufferWithIOSurface(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC0DD00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLDevice_newBufferWithLength_options_gpuAddress(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x77756C756C7543;
  *(void *)a2 = 0xFFFFC2A70000002CLL;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[2];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[3];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[4];
  *(_DWORD *)(a2 + 76) = 116;
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[1];
  unint64_t v12 = 88;
  *(_DWORD *)a2 = 88;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 88), __src, v13 + 8);
    uint64_t v14 = (v13 + 96);
    unint64_t v12 = (v13 + 99) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_newCommandQueue(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC04400000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_newCommandQueueWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC0DB00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLDevice_newCommandQueueWithMaxCommandBufferCount(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC04500000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_newComputePipelineStateWithDescriptor_completionHandler(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC0BA00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newComputePipelineStateWithDescriptor_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC0B800000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newComputePipelineStateWithDescriptor_options_completionHandler(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC0BB00000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)(a2 + 9) = 0x746C755543;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 116;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLDevice_newComputePipelineStateWithFunction_completionHandler(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7631939;
  *(void *)a2 = 0xFFFFC05700000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[3];
  *(_DWORD *)(a2 + 64) = 116;
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[1];
  unint64_t v12 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v13 + 8);
    uint64_t v14 = (v13 + 84);
    unint64_t v12 = (v13 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_newComputePipelineStateWithFunction_error(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7631939;
  *(void *)a2 = 0xFFFFC05500000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[3];
  *(_DWORD *)(a2 + 64) = 116;
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[1];
  unint64_t v12 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v13 + 8);
    uint64_t v14 = (v13 + 84);
    unint64_t v12 = (v13 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_newComputePipelineStateWithFunction_options_completionHandler(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC05800000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x746C757443;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[2];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[3];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[4];
  *(_DWORD *)(a2 + 76) = 116;
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[1];
  unint64_t v12 = 88;
  *(_DWORD *)a2 = 88;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 88), __src, v13 + 8);
    uint64_t v14 = (v13 + 96);
    unint64_t v12 = (v13 + 99) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_newCounterSampleBufferWithDescriptor_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC21800000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newDefaultLibrary(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC04C00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_newDefaultLibraryWithBundle_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC12100000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>t");
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newDepthStencilStateWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC04900000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLDevice_newDynamicLibrary_error(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7631939;
  *(void *)a2 = 0xFFFFC2B100000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[3];
  *(_DWORD *)(a2 + 64) = 116;
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[1];
  unint64_t v12 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v13 + 8);
    uint64_t v14 = (v13 + 84);
    unint64_t v12 = (v13 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_newDynamicLibraryWithURL_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC30300000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>t");
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newDynamicLibraryWithURL_options_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC35500000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>ult");
  *(_WORD *)((char *)a2 + 45) = 0;
  *((unsigned char *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 116;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLDevice_newEvent(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC18300000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_newFence(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC10000000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_newFunctionWithGLCoreIR_functionType(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)(a2 + 9) = 0x6C753E623C5543;
  *(void *)a2 = 0xFFFFC3BA0000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newFunctionWithGLCoreIR_inputsDescription_functionType(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC3BB00000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>U<b>ul");
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newFunctionWithGLESIR_functionType(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)(a2 + 9) = 0x6C753E623C5543;
  *(void *)a2 = 0xFFFFC3BC0000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newFunctionWithGLESIR_inputsDescription_functionType(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC3BD00000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>U<b>ul");
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newFunctionWithGLIR_functionType(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)(a2 + 9) = 0x6C753E623C5543;
  *(void *)a2 = 0xFFFFC28D0000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newFunctionWithGLIR_inputsDescription_functionType(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC28E00000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>U<b>ul");
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newHeapWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC10800000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLDevice_newIOCommandQueueWithDescriptor_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC40A00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newIOFileHandleWithURL_compressionMethod_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC46400000024;
  if (a4) {
    int v11 = 32777;
  }
  else {
    int v11 = 32769;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>ult");
  *(_WORD *)((char *)a2 + 45) = 0;
  *((unsigned char *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 116;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLDevice_newIOFileHandleWithURL_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC46500000024;
  if (a4) {
    int v11 = 32777;
  }
  else {
    int v11 = 32769;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>t");
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newIOHandleWithURL_compressionMethod_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC44000000024;
  if (a4) {
    int v11 = 32777;
  }
  else {
    int v11 = 32769;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>ult");
  *(_WORD *)((char *)a2 + 45) = 0;
  *((unsigned char *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 116;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLDevice_newIOHandleWithURL_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC40C00000024;
  if (a4) {
    int v11 = 32777;
  }
  else {
    int v11 = 32769;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>t");
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newIndirectCommandBufferWithDescriptor_maxCount_options(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC19C00000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CUulul");
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 116;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLDevice_newIntersectionFunctionTableWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC32700000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLDevice_newLateEvalEvent(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC37800000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_newLibraryWithCIFilters_imageFilterFunctionInfo_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC16300000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>U<b>t");
  *((unsigned char *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newLibraryWithCIFiltersForComputePipeline_imageFilterFunctionInfo_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC16E00000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>U<b>t");
  *((unsigned char *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newLibraryWithDAG_functions_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC2B300000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CSUt");
  *(_WORD *)((char *)a2 + 41) = 0;
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newLibraryWithData_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC04E00000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>t");
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newLibraryWithDescriptor_completionHandler(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC3BF00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newLibraryWithDescriptor_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC3B500000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newLibraryWithDescriptorSPI_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC3B600000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newLibraryWithStitchedDescriptor_completionHandler(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC3C300000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newLibraryWithStitchedDescriptor_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC3C400000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newLibraryWithStitchedDescriptorSPI_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC3C500000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newLibraryWithURL_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC15900000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>t");
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newMotionEstimationPipelineWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC1ED00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLDevice_newProfileWithExecutionSize(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC42B00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_newRasterizationRateMapWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC24F00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLDevice_newRenderPipelineStateWithDescriptor_completionHandler(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC05300000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newRenderPipelineStateWithDescriptor_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC05100000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newRenderPipelineStateWithDescriptor_options_completionHandler(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC05400000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)(a2 + 9) = 0x746C755543;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 116;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLDevice_newRenderPipelineStateWithMeshDescriptor_completionHandler(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC3D200000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newRenderPipelineStateWithMeshDescriptor_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC3D300000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newRenderPipelineStateWithMeshDescriptor_options_completionHandler(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC3D400000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)(a2 + 9) = 0x746C755543;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 116;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLDevice_newRenderPipelineStateWithMeshDescriptor_options_reflection_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v25 = 0u;
    long long v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    long long v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC3D500000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[11] = 116;
  *(void *)(a2 + 9) = *(void *)"CUulU<b>t";
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 32), (int *)a2);
  uint64_t v14 = *a2;
  uint64_t v15 = (v14 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v14, v15 - v14);
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 40);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(_WORD *)((char *)a2 + v16) = 116;
  uint64_t v17 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v17 - (*a2 + 2));
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 8);
  unint64_t v18 = *a2 + 8;
  *a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((char *)a2 + v18, a4, v19);
    uint64_t v20 = v19 + *a2;
    unint64_t v18 = (v20 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v20, v18 - v20);
    *a2 = v18;
  }
  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      long long v25 = 0u;
      long long v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      long long v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }
}

void DYTraceEncode_MTLDevice_newRenderPipelineStateWithTileDescriptor_completionHandler(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC12700000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newRenderPipelineStateWithTileDescriptor_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC12500000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newRenderPipelineStateWithTileDescriptor_options_completionHandler(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC12800000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)(a2 + 9) = 0x746C755543;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 116;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLDevice_newResidencySetWithDescriptor_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC47300000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newResourceGroupFromResources_count(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v26 = 0u;
    long long v27 = 0u;
    int v23 = v10;
    int v24 = 500;
    long long v25 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v23);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC1E400000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  size_t v12 = *(void *)(a1 + 24);
  int v13 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutul", v12) + *(_DWORD *)a2;
  uint64_t v14 = (v13 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v13 + 1)), v14 - (v13 + 1));
  *(_DWORD *)a2 = v14;
  *(void *)(a2 + v14) = *(void *)a1;
  uint64_t v15 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v15;
  v12 *= 8;
  memcpy((void *)(a2 + v15), *(const void **)(a1 + 16), v12);
  unsigned int v16 = *(_DWORD *)a2 + v12;
  *(_DWORD *)a2 = v16;
  *(void *)(a2 + v16) = *(void *)(a1 + 24);
  unsigned int v17 = *(_DWORD *)a2 + 8;
  *(_DWORD *)a2 = v17;
  *(_WORD *)(a2 + v17) = 116;
  uint64_t v18 = (*(_DWORD *)a2 + 5) & 0xFFFFFFFC;
  bzero((void *)(a2 + (*(_DWORD *)a2 + 2)), v18 - (*(_DWORD *)a2 + 2));
  *(_DWORD *)a2 = v18;
  *(void *)(a2 + v18) = *(void *)(a1 + 8);
  unint64_t v19 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v19;
  if (a4)
  {
    int v20 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v19), a4, v20);
    uint64_t v21 = (v20 + *(_DWORD *)a2);
    unint64_t v19 = (v21 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v21), v19 - v21);
    *(_DWORD *)a2 = v19;
  }
  if (a5)
  {
    if (v19 > a3)
    {
      int v22 = *a5;
      long long v26 = 0u;
      long long v27 = 0u;
      int v23 = v22;
      int v24 = 500;
      long long v25 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v23);
    }
  }
}

void DYTraceEncode_MTLDevice_newSamplerStateWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    uint64_t v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC04B00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      uint64_t v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLDevice_newTextureLayoutWithDescriptor_isHeapOrBufferBacked(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC11D00000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CUui");
  *(_WORD *)((char *)a2 + 41) = 0;
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(unsigned int *)((char *)a2 + v13) = *(_DWORD *)(a1 + 24);
  unsigned int v14 = *a2 + 4;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newTextureWithBytesNoCopy_length_descriptor_deallocator(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v25 = 0u;
    long long v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    long long v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC12000000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[11] = 116;
  *(void *)(a2 + 9) = *(void *)"CU<b>ulUt";
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 32), (int *)a2);
  uint64_t v14 = *a2;
  uint64_t v15 = (v14 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v14, v15 - v14);
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 40);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(_WORD *)((char *)a2 + v16) = 116;
  uint64_t v17 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v17 - (*a2 + 2));
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 8);
  unint64_t v18 = *a2 + 8;
  *a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((char *)a2 + v18, a4, v19);
    uint64_t v20 = v19 + *a2;
    unint64_t v18 = (v20 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v20, v18 - v20);
    *a2 = v18;
  }
  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      long long v25 = 0u;
      long long v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      long long v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }
}

void DYTraceEncode_MTLDevice_newTextureWithDescriptor_iosurface_plane(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC05A00000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)(a2 + 9) = 0x6C75555543;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLDevice_newTiledTextureWithBytesNoCopy_length_deallocator_descriptor_offset_bytesPerRow(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v27 = 0u;
    long long v28 = 0u;
    int v24 = v10;
    int v25 = 500;
    long long v26 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v24);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC16200000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>ultUulul");
  *((_WORD *)a2 + 25) = 0;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)a1;
  *a2 = 60;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 40), (int *)a2);
  uint64_t v15 = *a2;
  uint64_t v16 = (v15 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v15, v16 - v15);
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 48);
  unsigned int v17 = *a2 + 8;
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 56);
  unsigned int v18 = *a2 + 8;
  *a2 = v18;
  *(_WORD *)((char *)a2 + v18) = 116;
  uint64_t v19 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v19 - (*a2 + 2));
  *a2 = v19;
  *(void *)((char *)a2 + v19) = *(void *)(a1 + 8);
  unint64_t v20 = *a2 + 8;
  *a2 = v20;
  if (a4)
  {
    int v21 = 8 * *a4 + 8;
    memcpy((char *)a2 + v20, a4, v21);
    uint64_t v22 = v21 + *a2;
    unint64_t v20 = (v22 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v22, v20 - v22);
    *a2 = v20;
  }
  if (a5)
  {
    if (v20 > a3)
    {
      int v23 = *a5;
      long long v27 = 0u;
      long long v28 = 0u;
      int v24 = v23;
      int v25 = 500;
      long long v26 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v24);
    }
  }
}

void DYTraceEncode_MTLDevice_newTiledTextureWithBytesNoCopy_length_descriptor_offset_bytesPerRow(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v26 = 0u;
    long long v27 = 0u;
    int v23 = v10;
    int v24 = 500;
    int v25 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v23);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC16100000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>ulUulul");
  *(_WORD *)((char *)a2 + 49) = 0;
  *((unsigned char *)a2 + 51) = 0;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)a1;
  *a2 = 60;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 32), (int *)a2);
  uint64_t v14 = *a2;
  uint64_t v15 = (v14 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v14, v15 - v14);
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 40);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 48);
  unsigned int v17 = *a2 + 8;
  *a2 = v17;
  *(_WORD *)((char *)a2 + v17) = 116;
  uint64_t v18 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v18 - (*a2 + 2));
  *a2 = v18;
  *(void *)((char *)a2 + v18) = *(void *)(a1 + 8);
  unint64_t v19 = *a2 + 8;
  *a2 = v19;
  if (a4)
  {
    int v20 = 8 * *a4 + 8;
    memcpy((char *)a2 + v19, a4, v20);
    uint64_t v21 = v20 + *a2;
    unint64_t v19 = (v21 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v21, v19 - v21);
    *a2 = v19;
  }
  if (a5)
  {
    if (v19 > a3)
    {
      int v22 = *a5;
      long long v26 = 0u;
      long long v27 = 0u;
      int v23 = v22;
      int v24 = 500;
      int v25 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v23);
    }
  }
}

void DYTraceEncode_MTLDevice_requiredLinearTextureBytesPerRowForDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    uint64_t v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC29C00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  strcpy((char *)a2 + v13, "ul");
  uint64_t v14 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v14 - (*a2 + 3));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      uint64_t v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLDevice_serializeStructType_version(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)(a2 + 9) = 0x69753E623C5543;
  *(void *)a2 = 0xFFFFC27E0000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(unsigned int *)((char *)a2 + v13) = *(_DWORD *)(a1 + 24);
  uint64_t v14 = *a2 + 4;
  *a2 = v14;
  strcpy((char *)a2 + v14, "U<b>");
  uint64_t v15 = (*a2 & 0xFFFFFFFC) + 8;
  bzero((char *)a2 + *a2 + 5, v15 - (*a2 + 5));
  *a2 = v15;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v16 = *a2;
  unint64_t v17 = (v16 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v16, v17 - v16);
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }
  if (v17 > a3)
  {
    if (a5)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLDevice_sparseTileSizeInBytesForSparsePageSize(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC42D00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 27765;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_sparseTileSizeWithTextureType_pixelFormat_sampleCount(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x6C756C756C7543;
  *(void *)a2 = 0xFFFFC2870000002CLL;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 32);
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 40);
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 48);
  strcpy((char *)(a2 + 76), "@3ul");
  *(_WORD *)(a2 + 81) = 0;
  *(unsigned char *)(a2 + 83) = 0;
  *(_DWORD *)a2 = 84;
  long long v12 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 100) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 84) = v12;
  unint64_t v13 = 108;
  *(_DWORD *)a2 = 108;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 108), __src, v14 + 8);
    uint64_t v15 = (v14 + 116);
    unint64_t v13 = (v14 + 119) & 0xFFFFFFFC;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }
  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }
}

void DYTraceEncode_MTLDevice_sparseTileSizeWithTextureType_pixelFormat_sampleCount_sparsePageSize(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 44) = 108;
  *(void *)a2 = 0xFFFFC42E00000024;
  *(void *)(a2 + 36) = *(void *)"Culululul";
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)(a1 + 32);
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = *(void *)(a1 + 40);
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = *(void *)(a1 + 48);
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = *(void *)(a1 + 56);
  strcpy((char *)(a2 + 88), "@3ul");
  *(unsigned char *)(a2 + 95) = 0;
  *(_WORD *)(a2 + 93) = 0;
  *(_DWORD *)a2 = 96;
  long long v12 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 112) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 96) = v12;
  unint64_t v13 = 120;
  *(_DWORD *)a2 = 120;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 120), __src, v14 + 8);
    uint64_t v15 = (v14 + 128);
    unint64_t v13 = (v14 + 131) & 0xFFFFFFF8;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }
  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }
}

void DYTraceEncode_MTLDevice_supportsPrimitiveType(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC1E200000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)(a1 + 8);
  *(_DWORD *)(a2 + 56) = 26997;
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 16);
  unint64_t v12 = 64;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v13 + 8);
    uint64_t v14 = (v13 + 72);
    unint64_t v12 = (v13 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_supportsRasterizationRateMapWithLayerCount(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC25100000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)(a1 + 8);
  *(_DWORD *)(a2 + 56) = 26997;
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 16);
  unint64_t v12 = 64;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v13 + 8);
    uint64_t v14 = (v13 + 72);
    unint64_t v12 = (v13 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_supportsSampleCount(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC0B300000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)(a1 + 8);
  *(_DWORD *)(a2 + 56) = 26997;
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 16);
  unint64_t v12 = 64;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v13 + 8);
    uint64_t v14 = (v13 + 72);
    unint64_t v12 = (v13 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_supportsTextureSampleCount(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC0DA00000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)(a1 + 8);
  *(_DWORD *)(a2 + 56) = 26997;
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 16);
  unint64_t v12 = 64;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v13 + 8);
    uint64_t v14 = (v13 + 72);
    unint64_t v12 = (v13 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLDevice_tileSizeWithSparsePageSize_textureType_pixelFormat_sampleCount(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 44) = 108;
  *(void *)a2 = 0xFFFFC24C00000024;
  *(void *)(a2 + 36) = *(void *)"Culululul";
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)(a1 + 32);
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = *(void *)(a1 + 40);
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = *(void *)(a1 + 48);
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = *(void *)(a1 + 56);
  strcpy((char *)(a2 + 88), "@3ul");
  *(unsigned char *)(a2 + 95) = 0;
  *(_WORD *)(a2 + 93) = 0;
  *(_DWORD *)a2 = 96;
  long long v12 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 112) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 96) = v12;
  unint64_t v13 = 120;
  *(_DWORD *)a2 = 120;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 120), __src, v14 + 8);
    uint64_t v15 = (v14 + 128);
    unint64_t v13 = (v14 + 131) & 0xFFFFFFF8;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }
  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }
}

void DYTraceEncode_MTLDevice_unmapShaderSampleBuffer(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC05900000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLDynamicLibrary_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC2C400000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLDynamicLibrary_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC2C500000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLDynamicLibrary_serializeToURL_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC2C600000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>t");
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 16);
  uint64_t v14 = *a2 + 8;
  *a2 = v14;
  strcpy((char *)a2 + v14, "ui");
  uint64_t v15 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v15 - (*a2 + 3));
  *a2 = v15;
  *(unsigned int *)((char *)a2 + v15) = *(_DWORD *)(a1 + 24);
  unint64_t v16 = *a2 + 4;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLEvent_setEnableBarrier(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC42300000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLEvent_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC1F800000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLEvent_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC1F900000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLFence_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC0F800000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLFence_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC10100000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLFunction_setDescriptor_library(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFD85300000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 16);
  unint64_t v13 = *a2 + 8;
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = (v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }
  if (a5)
  {
    if (v13 > a3)
    {
      int v16 = *a5;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }
}

void DYTraceEncode_MTLFunction_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC10500000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLFunction_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC05B00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLFunction_newArgumentEncoderWithBufferIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC14C00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLFunction_newArgumentEncoderWithBufferIndex_pipelineLibrary(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC29D00000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Cult");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[2];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[3];
  *(_DWORD *)(a2 + 68) = 116;
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[1];
  unint64_t v12 = 80;
  *(_DWORD *)a2 = 80;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 80), __src, v13 + 8);
    uint64_t v14 = (v13 + 88);
    unint64_t v12 = (v13 + 91) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLFunction_newArgumentEncoderWithBufferIndex_reflection_pipelineLibrary(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC29E00000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CulU<b>t");
  *(_WORD *)((char *)a2 + 45) = 0;
  *((unsigned char *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  *((void *)a2 + 7) = *(void *)(a1 + 16);
  *a2 = 64;
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLFunction_newFunctionWithPluginData_bitcodeType(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    int v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)(a2 + 9) = 0x62753E623C5543;
  *(void *)a2 = 0xFFFFC22A0000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  *((unsigned char *)a2 + *a2) = *(unsigned char *)(a1 + 24);
  uint64_t v12 = (*a2 & 0xFFFFFFFC) + 4;
  bzero((char *)a2 + *a2 + 1, v12 - (*a2 + 1));
  *a2 = v12;
  *(_WORD *)((char *)a2 + v12) = 116;
  uint64_t v13 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v13 - (*a2 + 2));
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 8);
  unint64_t v14 = *a2 + 8;
  *a2 = v14;
  if (a4)
  {
    int v15 = 8 * *a4 + 8;
    memcpy((char *)a2 + v14, a4, v15);
    uint64_t v16 = v15 + *a2;
    unint64_t v14 = (v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v14 - v16);
    *a2 = v14;
  }
  if (a5)
  {
    if (v14 > a3)
    {
      int v17 = *a5;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      int v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }
}

void DYTraceEncode_MTLFunctionHandle_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC30600000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLFunctionPointerHandle_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC37900000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLFunctionPrivateArgument_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC37A00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLHeap_currentAllocatedSize(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFD82100000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLHeap_timeSinceTouched(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 78;
  }
  else {
    int v11 = 70;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD81D00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLHeap_usedSize(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFD82000000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLHeap_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC10900000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLHeap_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC10A00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLHeap_maxAvailableSizeWithAlignment(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC11700000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 27765;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLHeap_newAccelerationStructureWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    long long v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC40400000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      long long v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLHeap_newAccelerationStructureWithDescriptor_offset(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC40500000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CUul");
  *(_WORD *)((char *)a2 + 41) = 0;
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLHeap_newAccelerationStructureWithSize(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC40600000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLHeap_newAccelerationStructureWithSize_offset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC40700000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x6C756C7543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[2];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[3];
  *(_DWORD *)(a2 + 68) = 116;
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[1];
  unint64_t v12 = 80;
  *(_DWORD *)a2 = 80;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 80), __src, v13 + 8);
    uint64_t v14 = (v13 + 88);
    unint64_t v12 = (v13 + 91) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLHeap_newAccelerationStructureWithSize_offset_resourceIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x77756C756C7543;
  *(void *)a2 = 0xFFFFC4080000002CLL;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[2];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[3];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[4];
  *(_DWORD *)(a2 + 76) = 116;
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[1];
  unint64_t v12 = 88;
  *(_DWORD *)a2 = 88;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 88), __src, v13 + 8);
    uint64_t v14 = (v13 + 96);
    unint64_t v12 = (v13 + 99) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLHeap_newAccelerationStructureWithSize_resourceIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC40900000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x77756C7543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[2];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[3];
  *(_DWORD *)(a2 + 68) = 116;
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[1];
  unint64_t v12 = 80;
  *(_DWORD *)a2 = 80;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 80), __src, v13 + 8);
    uint64_t v14 = (v13 + 88);
    unint64_t v12 = (v13 + 91) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLHeap_newBufferWithLength_options(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC10B00000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x6C756C7543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[2];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[3];
  *(_DWORD *)(a2 + 68) = 116;
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[1];
  unint64_t v12 = 80;
  *(_DWORD *)a2 = 80;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 80), __src, v13 + 8);
    uint64_t v14 = (v13 + 88);
    unint64_t v12 = (v13 + 91) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLHeap_newBufferWithLength_options_offset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x6C756C756C7543;
  *(void *)a2 = 0xFFFFC25E0000002CLL;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[2];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[3];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[4];
  *(_DWORD *)(a2 + 76) = 116;
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[1];
  unint64_t v12 = 88;
  *(_DWORD *)a2 = 88;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 88), __src, v13 + 8);
    uint64_t v14 = (v13 + 96);
    unint64_t v12 = (v13 + 99) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLHeap_newTextureWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC10C00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLHeap_newTextureWithDescriptor_offset(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC25F00000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CUul");
  *(_WORD *)((char *)a2 + 41) = 0;
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLIOCommandBuffer_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    int v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC42F00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    int v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLIOCommandBuffer_addBarrier(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC44100000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v12 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v13 + 8);
    uint64_t v14 = (v13 + 56);
    unint64_t v12 = (v13 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLIOCommandBuffer_addCompletedHandler(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC40F00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLIOCommandBuffer_barrier(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC41000000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v12 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v13 + 8);
    uint64_t v14 = (v13 + 56);
    unint64_t v12 = (v13 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLIOCommandBuffer_commit(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC41100000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIOCommandBuffer_copyStatusToBuffer_offset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC41200000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIOCommandBuffer_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC41300000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIOCommandBuffer_encodeSignalEvent_value(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC41400000024;
  if (__src) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctuw");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLIOCommandBuffer_encodeWaitForEvent_value(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC41500000024;
  if (__src) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctuw");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLIOCommandBuffer_enqueue(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC43000000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIOCommandBuffer_loadBuffer_offset_size_sourceHandle_sourceHandleOffset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC43100000024;
  if (__src) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 44) = 108;
  *(void *)(a2 + 36) = *(void *)"Ctulultul";
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = a1[5];
  unint64_t v12 = 96;
  *(_DWORD *)a2 = 96;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 96), __src, v13 + 8);
    uint64_t v14 = (v13 + 104);
    unint64_t v12 = (v13 + 107) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLIOCommandBuffer_loadBytes_size_sourceHandle_sourceHandleOffset(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC44200000024;
  if (a4) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>ultul");
  *((unsigned char *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 16);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 24);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 32);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLIOCommandBuffer_loadTexture_slice_level_size_sourceBytesPerRow_sourceBytesPerImage_destinationOrigin_sourceHandle_sourceHandleOffset(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    int v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC43200000024;
  if (__src) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctulul@3ululul@3ultul");
  *(_WORD *)(a2 + 58) = 0;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)a1;
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 92;
  uint64_t v12 = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 92) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 108) = v12;
  *(_DWORD *)a2 = 116;
  *(void *)(a2 + 116) = *(void *)(a1 + 56);
  *(_DWORD *)a2 = 124;
  *(void *)(a2 + 124) = *(void *)(a1 + 64);
  *(_DWORD *)a2 = 132;
  uint64_t v13 = *(void *)(a1 + 88);
  *(_OWORD *)(a2 + 132) = *(_OWORD *)(a1 + 72);
  *(void *)(a2 + 148) = v13;
  *(_DWORD *)a2 = 156;
  *(void *)(a2 + 156) = *(void *)(a1 + 96);
  *(_DWORD *)a2 = 164;
  *(void *)(a2 + 164) = *(void *)(a1 + 104);
  unint64_t v14 = 172;
  *(_DWORD *)a2 = 172;
  if (__src)
  {
    int v15 = 8 * *__src;
    memcpy((void *)(a2 + 172), __src, v15 + 8);
    uint64_t v16 = (v15 + 180);
    unint64_t v14 = (v15 + 183) & 0xFFFFFFFC;
    bzero((void *)(a2 + v16), v14 - v16);
    *(_DWORD *)a2 = v14;
  }
  if (v14 > a3)
  {
    if (a5)
    {
      int v17 = *a5;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      int v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }
}

void DYTraceEncode_MTLIOCommandBuffer_popDebugGroup(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC44300000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v12 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v13 + 8);
    uint64_t v14 = (v13 + 56);
    unint64_t v12 = (v13 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLIOCommandBuffer_pushDebugGroup(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    long long v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  a2[8] = v11;
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC44400000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  unint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = (v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }
  if (v13 > a3 && a5 != 0)
  {
    int v17 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v17;
    int v19 = 500;
    long long v20 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
}

void DYTraceEncode_MTLIOCommandBuffer_signalEvent_value(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC43300000024;
  if (__src) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctuw");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLIOCommandBuffer_tryCancel(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC41800000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIOCommandBuffer_waitForEvent_value(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC43400000024;
  if (__src) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctuw");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLIOCommandBuffer_waitUntilCompleted(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC41900000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v12 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v13 + 8);
    uint64_t v14 = (v13 + 56);
    unint64_t v12 = (v13 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLIOCommandQueue_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC43500000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLIOCommandQueue_barrier(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC41A00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v12 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v13 + 8);
    uint64_t v14 = (v13 + 56);
    unint64_t v12 = (v13 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLIOCommandQueue_commandBuffer(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 32777;
  }
  else {
    int v11 = 32769;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC41B00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLIOCommandQueue_commandBufferWithUnretainedReferences(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC43600000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLIOCommandQueue_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC41C00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIOCommandQueue_enqueueBarrier(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC44500000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v12 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v13 + 8);
    uint64_t v14 = (v13 + 56);
    unint64_t v12 = (v13 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLIOFileHandle_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    long long v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  a2[8] = v11;
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC44600000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  unint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = (v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }
  if (v13 > a3 && a5 != 0)
  {
    int v17 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v17;
    int v19 = 500;
    long long v20 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
}

void DYTraceEncode_MTLIOFileHandle_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC44700000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIOHandle_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    long long v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 32776;
  }
  else {
    int v11 = 0x8000;
  }
  a2[8] = v11;
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC43700000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  unint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = (v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }
  if (v13 > a3 && a5 != 0)
  {
    int v17 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v17;
    int v19 = 500;
    long long v20 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
}

void DYTraceEncode_MTLIOScratchBuffer_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC41D00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIOScratchBufferAllocator_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC41F00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIOScratchBufferAllocator_newScratchBufferWithMinimumSize(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC43D00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLIndirectCommandBuffer_allocationID(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD82600000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLIndirectCommandBuffer_gpuResourceID(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD84A00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLIndirectCommandBuffer_timeSinceTouched(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 78;
  }
  else {
    int v11 = 70;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD81F00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLIndirectCommandBuffer_uniqueIdentifier(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD81600000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLIndirectCommandBuffer_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC1CB00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLIndirectCommandBuffer_setResponsibleProcess(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 26947;
  *(void *)a2 = 0xFFFFC1CC00000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v13 + 8);
    uint64_t v14 = (v13 + 60);
    unint64_t v12 = (v13 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLIndirectCommandBuffer_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC1CD00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIndirectCommandBuffer_indirectComputeCommandAtIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC1CF00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLIndirectCommandBuffer_indirectRenderCommandAtIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC1CE00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLIndirectCommandBuffer_isAliasable(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC1D200000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)(a2 + 48) = 26997;
  *(_DWORD *)a2 = 52;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLIndirectCommandBuffer_isPurgeable(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC1D300000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)(a2 + 48) = 26997;
  *(_DWORD *)a2 = 52;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLIndirectCommandBuffer_makeAliasable(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC1D100000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIndirectCommandBuffer_resetWithRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC1E800000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C75324043;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(_OWORD *)(a2 + 52) = *(_OWORD *)(a1 + 8);
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIndirectComputeCommand_concurrentDispatchThreadgroups_threadsPerThreadgroup(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC1C500000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 44) = 108;
  *(void *)(a2 + 36) = *(void *)"C@3ul@3ul";
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  uint64_t v11 = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 72) = v11;
  *(_DWORD *)a2 = 80;
  uint64_t v12 = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 96) = v12;
  unint64_t v13 = 104;
  *(_DWORD *)a2 = 104;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 104), __src, v14 + 8);
    uint64_t v15 = (v14 + 112);
    unint64_t v13 = (v14 + 115) & 0xFFFFFFF8;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }
  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }
}

void DYTraceEncode_MTLIndirectComputeCommand_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC1C100000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIndirectComputeCommand_reset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC1DF00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIndirectComputeCommand_setComputePipelineState(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC1C200000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIndirectComputeCommand_setKernelBuffer_offset_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC1C300000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIndirectComputeCommand_setKernelBuffer_offset_attributeStride_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC45300000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctululul");
  *(_WORD *)(a2 + 45) = 0;
  *(unsigned char *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  unint64_t v11 = 88;
  *(_DWORD *)a2 = 88;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 88), __src, v12 + 8);
    uint64_t v13 = (v12 + 96);
    unint64_t v11 = (v12 + 99) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIndirectComputeCommand_setStageInRegion(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC1CA00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C75364043;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  long long v11 = *(_OWORD *)(a1 + 8);
  long long v12 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 84) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 68) = v12;
  *(_OWORD *)(a2 + 52) = v11;
  unint64_t v13 = 100;
  *(_DWORD *)a2 = 100;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 100), __src, v14 + 8);
    uint64_t v15 = (v14 + 108);
    unint64_t v13 = (v14 + 111) & 0xFFFFFFFC;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }
  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }
}

void DYTraceEncode_MTLIndirectComputeCommand_setThreadgroupMemoryLength_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC1C900000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C756C7543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIndirectRenderCommand_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC1AB00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIndirectRenderCommand_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance_tessellationFactorBuffer_tessellationFactorBufferOffset_tessellationFactorBufferInstanceStride(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)a2 = 0xFFFFC1B200000024;
  strcpy((char *)(a2 + 36), "Cululultultululultulul");
  *(unsigned char *)(a2 + 59) = 0;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *a1;
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[1];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[2];
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = a1[3];
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = a1[4];
  *(_DWORD *)a2 = 100;
  *(void *)(a2 + 100) = a1[5];
  *(_DWORD *)a2 = 108;
  *(void *)(a2 + 108) = a1[6];
  *(_DWORD *)a2 = 116;
  *(void *)(a2 + 116) = a1[7];
  *(_DWORD *)a2 = 124;
  *(void *)(a2 + 124) = a1[8];
  *(_DWORD *)a2 = 132;
  *(void *)(a2 + 132) = a1[9];
  *(_DWORD *)a2 = 140;
  *(void *)(a2 + 140) = a1[10];
  *(_DWORD *)a2 = 148;
  *(void *)(a2 + 148) = a1[11];
  *(_DWORD *)a2 = 156;
  *(void *)(a2 + 156) = a1[12];
  unint64_t v11 = 164;
  *(_DWORD *)a2 = 164;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 164), __src, v12 + 8);
    uint64_t v13 = (v12 + 172);
    unint64_t v11 = (v12 + 175) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIndirectRenderCommand_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_baseVertex_baseInstance(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC1B400000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Cululultulullul");
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *a1;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[2];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[3];
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = a1[4];
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = a1[5];
  *(_DWORD *)a2 = 100;
  *(void *)(a2 + 100) = a1[6];
  *(_DWORD *)a2 = 108;
  *(void *)(a2 + 108) = a1[7];
  *(_DWORD *)a2 = 116;
  *(void *)(a2 + 116) = a1[8];
  unint64_t v11 = 124;
  *(_DWORD *)a2 = 124;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 124), __src, v12 + 8);
    uint64_t v13 = (v12 + 132);
    unint64_t v11 = (v12 + 135) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIndirectRenderCommand_drawMeshThreadgroups_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    long long v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC45E00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "C@3ul@3ul@3ul");
  *(_WORD *)(a2 + 50) = 0;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)a1;
  *(_DWORD *)a2 = 60;
  uint64_t v11 = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 60) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 76) = v11;
  *(_DWORD *)a2 = 84;
  uint64_t v12 = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 84) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 100) = v12;
  *(_DWORD *)a2 = 108;
  uint64_t v13 = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 108) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 124) = v13;
  unint64_t v14 = 132;
  *(_DWORD *)a2 = 132;
  if (__src)
  {
    int v15 = 8 * *__src;
    memcpy((void *)(a2 + 132), __src, v15 + 8);
    uint64_t v16 = (v15 + 140);
    unint64_t v14 = (v15 + 143) & 0xFFFFFFFC;
    bzero((void *)(a2 + v16), v14 - v16);
    *(_DWORD *)a2 = v14;
  }
  if (v14 > a3)
  {
    if (a5)
    {
      int v17 = *a5;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      long long v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }
}

void DYTraceEncode_MTLIndirectRenderCommand_drawMeshThreads_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    long long v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC45F00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "C@3ul@3ul@3ul");
  *(_WORD *)(a2 + 50) = 0;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)a1;
  *(_DWORD *)a2 = 60;
  uint64_t v11 = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 60) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 76) = v11;
  *(_DWORD *)a2 = 84;
  uint64_t v12 = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 84) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 100) = v12;
  *(_DWORD *)a2 = 108;
  uint64_t v13 = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 108) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 124) = v13;
  unint64_t v14 = 132;
  *(_DWORD *)a2 = 132;
  if (__src)
  {
    int v15 = 8 * *__src;
    memcpy((void *)(a2 + 132), __src, v15 + 8);
    uint64_t v16 = (v15 + 140);
    unint64_t v14 = (v15 + 143) & 0xFFFFFFFC;
    bzero((void *)(a2 + v16), v14 - v16);
    *(_DWORD *)a2 = v14;
  }
  if (v14 > a3)
  {
    if (a5)
    {
      int v17 = *a5;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      long long v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }
}

void DYTraceEncode_MTLIndirectRenderCommand_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_instanceCount_baseInstance_tessellationFactorBuffer_tessellationFactorBufferOffset_tessellationFactorBufferInstanceStride(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC1B000000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Cululultululultulul");
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *a1;
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[1];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[2];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[3];
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = a1[4];
  *(_DWORD *)a2 = 96;
  *(void *)(a2 + 96) = a1[5];
  *(_DWORD *)a2 = 104;
  *(void *)(a2 + 104) = a1[6];
  *(_DWORD *)a2 = 112;
  *(void *)(a2 + 112) = a1[7];
  *(_DWORD *)a2 = 120;
  *(void *)(a2 + 120) = a1[8];
  *(_DWORD *)a2 = 128;
  *(void *)(a2 + 128) = a1[9];
  *(_DWORD *)a2 = 136;
  *(void *)(a2 + 136) = a1[10];
  unint64_t v11 = 144;
  *(_DWORD *)a2 = 144;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 144), __src, v12 + 8);
    uint64_t v13 = (v12 + 152);
    unint64_t v11 = (v12 + 155) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIndirectRenderCommand_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC1B300000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Cululululul");
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = a1[5];
  unint64_t v11 = 96;
  *(_DWORD *)a2 = 96;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 96), __src, v12 + 8);
    uint64_t v13 = (v12 + 104);
    unint64_t v11 = (v12 + 107) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIndirectRenderCommand_reset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC1DE00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIndirectRenderCommand_setFragmentBuffer_offset_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC1AE00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIndirectRenderCommand_setMeshBuffer_offset_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC46000000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIndirectRenderCommand_setObjectBuffer_offset_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC46100000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIndirectRenderCommand_setObjectThreadgroupMemoryLength_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC46200000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C756C7543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIndirectRenderCommand_setRenderPipelineState(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC1AC00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIndirectRenderCommand_setVertexBuffer_offset_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC1AD00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIndirectRenderCommand_setVertexBuffer_offset_attributeStride_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC45400000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctululul");
  *(_WORD *)(a2 + 45) = 0;
  *(unsigned char *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  unint64_t v11 = 88;
  *(_DWORD *)a2 = 88;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 88), __src, v12 + 8);
    uint64_t v13 = (v12 + 96);
    unint64_t v11 = (v12 + 99) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIntersectionFunctionTable_allocatedSize(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFD83D00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIntersectionFunctionTable_allocationID(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD84000000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIntersectionFunctionTable_gpuResourceID(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD84F00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLIntersectionFunctionTable_setBuffers(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFD85800000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLIntersectionFunctionTable_timeSinceTouched(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD83C00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIntersectionFunctionTable_uniqueIdentifier(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFD84100000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 30581;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLIntersectionFunctionTable_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC32E00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLIntersectionFunctionTable_setResponsibleProcess(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 26947;
  *(void *)a2 = 0xFFFFC32F00000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIntersectionFunctionTable_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC33000000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIntersectionFunctionTable_makeAliasable(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC33800000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIntersectionFunctionTable_setBuffer_offset_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC34700000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIntersectionFunctionTable_setBuffers_offsets_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC34800000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 32);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@%zuul@2ul", v11, v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  uint64_t v15 = (*(_DWORD *)a2 + v11);
  *(_DWORD *)a2 = v15;
  memcpy((void *)(a2 + v15), *(const void **)(a1 + 16), v11);
  unsigned int v16 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v16;
  *(_OWORD *)(a2 + v16) = *(_OWORD *)(a1 + 24);
  unint64_t v17 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v17), a4, v18);
    uint64_t v19 = (v18 + *(_DWORD *)a2);
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v19), v17 - v19);
    *(_DWORD *)a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLIntersectionFunctionTable_setFunction_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC33900000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIntersectionFunctionTable_setFunctions_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC33A00000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLIntersectionFunctionTable_setOpaqueCurveIntersectionFunctionWithSignature_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC46600000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C756C7543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIntersectionFunctionTable_setOpaqueCurveIntersectionFunctionWithSignature_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C7532406C7543;
  *(void *)a2 = 0xFFFFC4670000002CLL;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(_OWORD *)(a2 + 60) = *(_OWORD *)(a1 + 16);
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIntersectionFunctionTable_setOpaqueTriangleIntersectionFunctionWithSignature_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC35600000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C756C7543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIntersectionFunctionTable_setOpaqueTriangleIntersectionFunctionWithSignature_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C7532406C7543;
  *(void *)a2 = 0xFFFFC3570000002CLL;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(_OWORD *)(a2 + 60) = *(_OWORD *)(a1 + 16);
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIntersectionFunctionTable_setPurgeableState(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC33B00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 27765;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLIntersectionFunctionTable_setVisibleFunctionTable_atBufferIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC35A00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLIntersectionFunctionTable_setVisibleFunctionTables_withBufferRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC35B00000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLLateEvalEvent_setEnableBarrier(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC42400000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLLateEvalEvent_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC37D00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLLateEvalEvent_setSignaledValue(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFC37E00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLLateEvalEvent_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC37F00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLLateEvalEvent_newSharedEventHandle(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC38000000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLLateEvalEvent_waitUntilSignaledValue_timeoutMS(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3C000000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x7775777543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 16);
  *(_DWORD *)(a2 + 68) = 26997;
  *(_DWORD *)a2 = 72;
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 24);
  unint64_t v12 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v13 + 8);
    uint64_t v14 = (v13 + 84);
    unint64_t v12 = (v13 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLLibrary_libraryIdentifier(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    long long v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  a2[8] = v11;
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFD83400000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  unint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = (v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }
  if (v13 > a3 && a5 != 0)
  {
    int v17 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v17;
    int v19 = 500;
    long long v20 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
}

void DYTraceEncode_MTLLibrary_type(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 13;
  }
  else {
    int v11 = 5;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFD83900000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 27765;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLLibrary_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC05C00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLLibrary_setOverrideTriple(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC12D00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLLibrary_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC05D00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLLibrary_newExternFunctionWithName(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    long long v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC15A00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      long long v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLLibrary_newFunctionWithDescriptor_completionHandler(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC30700000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLLibrary_newFunctionWithDescriptor_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC30800000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLLibrary_newFunctionWithName(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC05E00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLLibrary_newFunctionWithName_constantValues_completionHandler(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)(a2 + 9) = 0x743E623C555343;
  *(void *)a2 = 0xFFFFC1160000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLLibrary_newFunctionWithName_constantValues_pipelineLibrary_completionHandler(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC12F00000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CSU<b>tt");
  *(_WORD *)((char *)a2 + 45) = 0;
  *((unsigned char *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 40);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 116;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLLibrary_newFunctionWithName_constantValues_pipelineLibrary_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC12E00000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CSU<b>tt");
  *(_WORD *)((char *)a2 + 45) = 0;
  *((unsigned char *)a2 + 47) = 0;
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 40);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(_WORD *)((char *)a2 + v15) = 116;
  uint64_t v16 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v16 - (*a2 + 2));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLLibrary_newIntersectionFunctionWithDescriptor_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC34200000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLMotionEstimationPipeline_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC1EB00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLParallelRenderCommandEncoder_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC06000000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLParallelRenderCommandEncoder_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC06100000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLParallelRenderCommandEncoder_endEncoding(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC06300000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLParallelRenderCommandEncoder_insertDebugSignpost(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC06400000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLParallelRenderCommandEncoder_popDebugGroup(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC06600000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLParallelRenderCommandEncoder_pushDebugGroup(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC06500000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLParallelRenderCommandEncoder_renderCommandEncoder(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC06200000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLParallelRenderCommandEncoder_setColorStoreAction_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC0DE00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C756C7543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLParallelRenderCommandEncoder_setColorStoreActionOptions_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC16400000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C756C7543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLParallelRenderCommandEncoder_setDepthStoreAction(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC0DF00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLParallelRenderCommandEncoder_setDepthStoreActionOptions(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC16500000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLParallelRenderCommandEncoder_setStencilStoreAction(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC0E000000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLParallelRenderCommandEncoder_setStencilStoreActionOptions(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC16600000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLPipelineLibrary_setDisableRunTimeCompilation(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC28000000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLPipelineLibrary_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC28100000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLPipelineLibrary_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC28200000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLPipelineLibrary_newComputePipelineDescriptorWithName_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7623491;
  *(void *)a2 = 0xFFFFC28300000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 85;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v16 = *a2;
  unint64_t v17 = (v16 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v16, v17 - v16);
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }
  if (v17 > a3)
  {
    if (a5)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLPipelineLibrary_newRenderPipelineDescriptorWithName_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7623491;
  *(void *)a2 = 0xFFFFC28500000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 85;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v16 = *a2;
  unint64_t v17 = (v16 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v16, v17 - v16);
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }
  if (v17 > a3)
  {
    if (a5)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLRasterizationRateMap_copyParameterDataToBuffer_offset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC26000000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRasterizationRateMap_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC24700000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRasterizationRateMap_mapScreenToPhysicalCoordinates_forLayer(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC26600000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "C@2ful");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[3];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  *(_DWORD *)(a2 + 68) = 6697536;
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[2];
  unint64_t v12 = 80;
  *(_DWORD *)a2 = 80;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 80), __src, v13 + 8);
    uint64_t v14 = (v13 + 88);
    unint64_t v12 = (v13 + 91) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLRasterizationRateMap_physicalSizeForLayer(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC24B00000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)(a1 + 32);
  strcpy((char *)(a2 + 56), "@3ul");
  *(_WORD *)(a2 + 61) = 0;
  *(unsigned char *)(a2 + 63) = 0;
  *(_DWORD *)a2 = 64;
  long long v12 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 80) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 64) = v12;
  unint64_t v13 = 88;
  *(_DWORD *)a2 = 88;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 88), __src, v14 + 8);
    uint64_t v15 = (v14 + 96);
    unint64_t v13 = (v14 + 99) & 0xFFFFFFF8;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }
  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }
}

void DYTraceEncode_MTLRasterizationRateMap_resetUsingDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC3CD00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_executeCommandsInBuffer_indirectBuffer_indirectBufferOffset(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  *(void *)(a2 + 9) = 0x55556C75747443;
  *(void *)a2 = 0xFFFFC1A70000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 8);
  *a2 = 60;
  *(void *)(a2 + 15) = *(void *)(a1 + 16);
  *a2 = 68;
  *(void *)(a2 + 17) = *(void *)(a1 + 24);
  *a2 = 76;
  AppendString(*(const char **)(a1 + 40), (int *)a2);
  AppendString(*(const char **)(a1 + 48), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_executeCommandsInBuffer_withRange(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  *(void *)(a2 + 9) = 0x556C7532407443;
  *(void *)a2 = 0xFFFFC1A60000002CLL;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 8);
  *a2 = 60;
  *(_OWORD *)(a2 + 15) = *(_OWORD *)(a1 + 16);
  *a2 = 76;
  AppendString(*(const char **)(a1 + 40), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC06700000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC06800000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_dispatchThreadsPerTile(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC0F700000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C75334043;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  long long v11 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 68) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 52) = v11;
  unint64_t v12 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v13 + 8);
    uint64_t v14 = (v13 + 84);
    unint64_t v12 = (v13 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_dispatchThreadsPerTile_inRegion(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    long long v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC38200000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 44) = 108;
  *(void *)(a2 + 36) = *(void *)"C@3ul@6ul";
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  uint64_t v11 = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 72) = v11;
  *(_DWORD *)a2 = 80;
  long long v13 = *(_OWORD *)(a1 + 48);
  long long v12 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 96) = v13;
  *(_OWORD *)(a2 + 112) = v12;
  unint64_t v14 = 128;
  *(_DWORD *)a2 = 128;
  if (__src)
  {
    int v15 = 8 * *__src;
    memcpy((void *)(a2 + 128), __src, v15 + 8);
    uint64_t v16 = (v15 + 136);
    unint64_t v14 = (v15 + 139) & 0xFFFFFFF8;
    bzero((void *)(a2 + v16), v14 - v16);
    *(_DWORD *)a2 = v14;
  }
  if (v14 > a3)
  {
    if (a5)
    {
      int v17 = *a5;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      long long v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_dispatchThreadsPerTile_inRegion_withRenderTargetArrayIndex(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    long long v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC43F00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "C@3ul@6ului");
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  uint64_t v11 = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 72) = v11;
  *(_DWORD *)a2 = 80;
  long long v13 = *(_OWORD *)(a1 + 48);
  long long v12 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 96) = v13;
  *(_OWORD *)(a2 + 112) = v12;
  *(_DWORD *)a2 = 128;
  *(_DWORD *)(a2 + 128) = *(_DWORD *)(a1 + 80);
  unint64_t v14 = 132;
  *(_DWORD *)a2 = 132;
  if (__src)
  {
    int v15 = 8 * *__src;
    memcpy((void *)(a2 + 132), __src, v15 + 8);
    uint64_t v16 = (v15 + 140);
    unint64_t v14 = (v15 + 143) & 0xFFFFFFFC;
    bzero((void *)(a2 + v16), v14 - v16);
    *(_DWORD *)a2 = v14;
  }
  if (v14 > a3)
  {
    if (a5)
    {
      int v17 = *a5;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      long long v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_drawIndexedPatches_patchIndexBuffer_patchIndexBufferOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_indirectBuffer_indirectBufferOffset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC0F000000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Cultultultul");
  *(_WORD *)(a2 + 49) = 0;
  *(unsigned char *)(a2 + 51) = 0;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *a1;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[2];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[3];
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = a1[4];
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = a1[5];
  *(_DWORD *)a2 = 100;
  *(void *)(a2 + 100) = a1[6];
  *(_DWORD *)a2 = 108;
  *(void *)(a2 + 108) = a1[7];
  unint64_t v11 = 116;
  *(_DWORD *)a2 = 116;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 116), __src, v12 + 8);
    uint64_t v13 = (v12 + 124);
    unint64_t v11 = (v12 + 127) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_drawIndexedPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_controlPointIndexBuffer_controlPointIndexBufferOffset_instanceCount_baseInstance(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC0EF00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 52) = 108;
  *(_OWORD *)(a2 + 36) = *(_OWORD *)"Cululultultululul";
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *a1;
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[1];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[2];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[3];
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = a1[4];
  *(_DWORD *)a2 = 96;
  *(void *)(a2 + 96) = a1[5];
  *(_DWORD *)a2 = 104;
  *(void *)(a2 + 104) = a1[6];
  *(_DWORD *)a2 = 112;
  *(void *)(a2 + 112) = a1[7];
  *(_DWORD *)a2 = 120;
  *(void *)(a2 + 120) = a1[8];
  *(_DWORD *)a2 = 128;
  *(void *)(a2 + 128) = a1[9];
  unint64_t v11 = 136;
  *(_DWORD *)a2 = 136;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 136), __src, v12 + 8);
    uint64_t v13 = (v12 + 144);
    unint64_t v11 = (v12 + 147) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)a2 = 0xFFFFC08800000024;
  strcpy((char *)(a2 + 36), "Cululultul");
  *(unsigned char *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = a1[5];
  unint64_t v11 = 96;
  *(_DWORD *)a2 = 96;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 96), __src, v12 + 8);
    uint64_t v13 = (v12 + 104);
    unint64_t v11 = (v12 + 107) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC08700000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Cululultulul");
  *(_WORD *)(a2 + 49) = 0;
  *(unsigned char *)(a2 + 51) = 0;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *a1;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[2];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[3];
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = a1[4];
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = a1[5];
  *(_DWORD *)a2 = 100;
  *(void *)(a2 + 100) = a1[6];
  unint64_t v11 = 108;
  *(_DWORD *)a2 = 108;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 108), __src, v12 + 8);
    uint64_t v13 = (v12 + 116);
    unint64_t v11 = (v12 + 119) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_drawIndexedPrimitives_indexCount_indexType_indexBuffer_indexBufferOffset_instanceCount_baseVertex_baseInstance(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC0A700000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Cululultulullul");
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *a1;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[2];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[3];
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = a1[4];
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = a1[5];
  *(_DWORD *)a2 = 100;
  *(void *)(a2 + 100) = a1[6];
  *(_DWORD *)a2 = 108;
  *(void *)(a2 + 108) = a1[7];
  *(_DWORD *)a2 = 116;
  *(void *)(a2 + 116) = a1[8];
  unint64_t v11 = 124;
  *(_DWORD *)a2 = 124;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 124), __src, v12 + 8);
    uint64_t v13 = (v12 + 132);
    unint64_t v11 = (v12 + 135) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_drawIndexedPrimitives_indexType_indexBuffer_indexBufferOffset_indirectBuffer_indirectBufferOffset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC0A900000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Culultultul");
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = a1[5];
  *(_DWORD *)a2 = 96;
  *(void *)(a2 + 96) = a1[6];
  unint64_t v11 = 104;
  *(_DWORD *)a2 = 104;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 104), __src, v12 + 8);
    uint64_t v13 = (v12 + 112);
    unint64_t v11 = (v12 + 115) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_drawMeshThreadgroups_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    long long v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3C800000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "C@3ul@3ul@3ul");
  *(_WORD *)(a2 + 50) = 0;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)a1;
  *(_DWORD *)a2 = 60;
  uint64_t v11 = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 60) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 76) = v11;
  *(_DWORD *)a2 = 84;
  uint64_t v12 = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 84) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 100) = v12;
  *(_DWORD *)a2 = 108;
  uint64_t v13 = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 108) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 124) = v13;
  unint64_t v14 = 132;
  *(_DWORD *)a2 = 132;
  if (__src)
  {
    int v15 = 8 * *__src;
    memcpy((void *)(a2 + 132), __src, v15 + 8);
    uint64_t v16 = (v15 + 140);
    unint64_t v14 = (v15 + 143) & 0xFFFFFFFC;
    bzero((void *)(a2 + v16), v14 - v16);
    *(_DWORD *)a2 = v14;
  }
  if (v14 > a3)
  {
    if (a5)
    {
      int v17 = *a5;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      long long v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_drawMeshThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    int v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3C900000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul@3ul@3ul");
  *(_WORD *)(a2 + 49) = 0;
  *(unsigned char *)(a2 + 51) = 0;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)a1;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 76;
  uint64_t v11 = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 76) = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 92) = v11;
  *(_DWORD *)a2 = 100;
  uint64_t v12 = *(void *)(a1 + 64);
  *(_OWORD *)(a2 + 100) = *(_OWORD *)(a1 + 48);
  *(void *)(a2 + 116) = v12;
  unint64_t v13 = 124;
  *(_DWORD *)a2 = 124;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 124), __src, v14 + 8);
    uint64_t v15 = (v14 + 132);
    unint64_t v13 = (v14 + 135) & 0xFFFFFFFC;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }
  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      int v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_drawMeshThreads_threadsPerObjectThreadgroup_threadsPerMeshThreadgroup(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    long long v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3CA00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "C@3ul@3ul@3ul");
  *(_WORD *)(a2 + 50) = 0;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)a1;
  *(_DWORD *)a2 = 60;
  uint64_t v11 = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 60) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 76) = v11;
  *(_DWORD *)a2 = 84;
  uint64_t v12 = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 84) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 100) = v12;
  *(_DWORD *)a2 = 108;
  uint64_t v13 = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 108) = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 124) = v13;
  unint64_t v14 = 132;
  *(_DWORD *)a2 = 132;
  if (__src)
  {
    int v15 = 8 * *__src;
    memcpy((void *)(a2 + 132), __src, v15 + 8);
    uint64_t v16 = (v15 + 140);
    unint64_t v14 = (v15 + 143) & 0xFFFFFFFC;
    bzero((void *)(a2 + v16), v14 - v16);
    *(_DWORD *)a2 = v14;
  }
  if (v14 > a3)
  {
    if (a5)
    {
      int v17 = *a5;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      long long v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_drawPatches_patchIndexBuffer_patchIndexBufferOffset_indirectBuffer_indirectBufferOffset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC0EE00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 44) = 108;
  *(void *)(a2 + 36) = *(void *)"Cultultul";
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = a1[5];
  unint64_t v11 = 96;
  *(_DWORD *)a2 = 96;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 96), __src, v12 + 8);
    uint64_t v13 = (v12 + 104);
    unint64_t v11 = (v12 + 107) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_instanceCount_baseInstance(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC0ED00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Cululultululul");
  *(unsigned char *)(a2 + 51) = 0;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *a1;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[2];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[3];
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = a1[4];
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = a1[5];
  *(_DWORD *)a2 = 100;
  *(void *)(a2 + 100) = a1[6];
  *(_DWORD *)a2 = 108;
  *(void *)(a2 + 108) = a1[7];
  unint64_t v11 = 116;
  *(_DWORD *)a2 = 116;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 116), __src, v12 + 8);
    uint64_t v13 = (v12 + 124);
    unint64_t v11 = (v12 + 127) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_drawPrimitives_indirectBuffer_indirectBufferOffset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC0A800000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Cultul");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_drawPrimitives_vertexStart_vertexCount(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C756C756C7543;
  *(void *)a2 = 0xFFFFC0860000002CLL;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_drawPrimitives_vertexStart_vertexCount_instanceCount(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC08500000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 44) = 108;
  *(void *)(a2 + 36) = *(void *)"Culululul";
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  unint64_t v11 = 88;
  *(_DWORD *)a2 = 88;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 88), __src, v12 + 8);
    uint64_t v13 = (v12 + 96);
    unint64_t v11 = (v12 + 99) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_drawPrimitives_vertexStart_vertexCount_instanceCount_baseInstance(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC0A600000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Cululululul");
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = a1[5];
  unint64_t v11 = 96;
  *(_DWORD *)a2 = 96;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 96), __src, v12 + 8);
    uint64_t v13 = (v12 + 104);
    unint64_t v11 = (v12 + 107) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_endEncoding(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC08A00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_insertDebugSignpost(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC08B00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_memoryBarrierWithResources_count_afterStages_beforeStages(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v25 = 0u;
    long long v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    long long v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC17D00000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutululul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unsigned int v16 = *(_DWORD *)a2 + 8;
  *(_DWORD *)a2 = v16;
  *(void *)(a2 + v16) = *(void *)(a1 + 24);
  unsigned int v17 = *(_DWORD *)a2 + 8;
  *(_DWORD *)a2 = v17;
  *(void *)(a2 + v17) = *(void *)(a1 + 32);
  unint64_t v18 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v18), a4, v19);
    uint64_t v20 = (v19 + *(_DWORD *)a2);
    unint64_t v18 = (v20 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v20), v18 - v20);
    *(_DWORD *)a2 = v18;
  }
  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      long long v25 = 0u;
      long long v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      long long v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_memoryBarrierWithScope_afterStages_beforeStages(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unsigned int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C756C756C7543;
  *(void *)a2 = 0xFFFFC17C0000002CLL;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unsigned int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_popDebugGroup(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unsigned int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC08D00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unsigned int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_pushDebugGroup(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC08C00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_sampleCountersInBuffer_atSampleIndex_withBarrier(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC27A00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctului");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 68;
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 24);
  unint64_t v11 = 72;
  *(_DWORD *)a2 = 72;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 72), __src, v12 + 8);
    uint64_t v13 = (v12 + 80);
    unint64_t v11 = (v12 + 83) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setAlphaTestReferenceValue(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 26179;
  *(void *)a2 = 0xFFFFC28F00000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setBlendColorRed_green_blue_alpha(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC08100000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6666666643;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)a2 = 56;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)a2 = 64;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 20);
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setColorResolveTexture_slice_depthPlane_level_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)a2 = 0xFFFFC0E400000024;
  strcpy((char *)(a2 + 36), "Ctulululul");
  *(unsigned char *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = a1[5];
  unint64_t v11 = 96;
  *(_DWORD *)a2 = 96;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 96), __src, v12 + 8);
    uint64_t v13 = (v12 + 104);
    unint64_t v11 = (v12 + 107) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setColorResolveTexture_slice_depthPlane_level_yInvert_atIndex(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC29000000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctulululuiul");
  *(_WORD *)(a2 + 49) = 0;
  *(unsigned char *)(a2 + 51) = 0;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)a1;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = *(void *)(a1 + 32);
  *(_DWORD *)a2 = 92;
  *(_DWORD *)(a2 + 92) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)a2 = 96;
  *(void *)(a2 + 96) = *(void *)(a1 + 40);
  unint64_t v11 = 104;
  *(_DWORD *)a2 = 104;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 104), __src, v12 + 8);
    uint64_t v13 = (v12 + 112);
    unint64_t v11 = (v12 + 115) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setColorStoreAction_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC0E100000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C756C7543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setColorStoreActionOptions_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC16A00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C756C7543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setCullMode(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC07400000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setDepthBias_slopeScale_clamp(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC07600000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Cfff");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)a2 = 56;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 16);
  unint64_t v11 = 64;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v12 + 8);
    uint64_t v13 = (v12 + 72);
    unint64_t v11 = (v12 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setDepthCleared(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC29100000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setDepthClipMode(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC07500000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setDepthResolveTexture_slice_depthPlane_level(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC0E500000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctululul");
  *(_WORD *)(a2 + 45) = 0;
  *(unsigned char *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  unint64_t v11 = 88;
  *(_DWORD *)a2 = 88;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 88), __src, v12 + 8);
    uint64_t v13 = (v12 + 96);
    unint64_t v11 = (v12 + 99) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setDepthResolveTexture_slice_depthPlane_level_yInvert(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)a2 = 0xFFFFC29200000024;
  strcpy((char *)(a2 + 36), "Ctululului");
  *(unsigned char *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = *(void *)(a1 + 32);
  *(_DWORD *)a2 = 88;
  *(_DWORD *)(a2 + 88) = *(_DWORD *)(a1 + 40);
  unint64_t v11 = 92;
  *(_DWORD *)a2 = 92;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 92), __src, v12 + 8);
    uint64_t v13 = (v12 + 100);
    unint64_t v11 = (v12 + 103) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setDepthStencilState(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC08200000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setDepthStoreAction(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC0E200000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setDepthStoreActionOptions(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC16B00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentAccelerationStructure_atBufferIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC39D00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentBuffer_offset_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC07900000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentBufferOffset_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC0A200000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C756C7543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentBuffers_offsets_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    int v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC07A00000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 32);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@%zuul@2ul", v11, v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  uint64_t v15 = (*(_DWORD *)a2 + v11);
  *(_DWORD *)a2 = v15;
  memcpy((void *)(a2 + v15), *(const void **)(a1 + 16), v11);
  unsigned int v16 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v16;
  *(_OWORD *)(a2 + v16) = *(_OWORD *)(a1 + 24);
  unint64_t v17 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v17), a4, v18);
    uint64_t v19 = (v18 + *(_DWORD *)a2);
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v19), v17 - v19);
    *(_DWORD *)a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      int v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentBytes_length_atIndex(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    int v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC0A100000024;
  a2[8] = 8 * (a4 != 0);
  a2[11] = 108;
  *(void *)(a2 + 9) = *(void *)"CU<b>ulul";
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 16);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unint64_t v14 = *a2 + 8;
  *a2 = v14;
  if (a4)
  {
    int v15 = 8 * *a4 + 8;
    memcpy((char *)a2 + v14, a4, v15);
    uint64_t v16 = v15 + *a2;
    unint64_t v14 = (v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v14 - v16);
    *a2 = v14;
  }
  if (a5)
  {
    if (v14 > a3)
    {
      int v17 = *a5;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      int v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentIntersectionFunctionTable_atBufferIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC39E00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentIntersectionFunctionTables_withBufferRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC39F00000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentSamplerState_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC07D00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentSamplerState_lodMinClamp_lodMaxClamp_atIndex(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC07F00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctfful");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)a2 = 64;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 16);
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentSamplerStates_lodMinClamps_lodMaxClamps_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v25 = 0u;
    long long v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    long long v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC08000000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  uint64_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@%zuf@%zuf@2ul", v11, v11, v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), 8 * v11);
  uint64_t v15 = (*(_DWORD *)a2 + 8 * v11);
  *(_DWORD *)a2 = v15;
  memcpy((void *)(a2 + v15), *(const void **)(a1 + 32), 4 * v11);
  uint64_t v16 = (*(_DWORD *)a2 + 4 * v11);
  *(_DWORD *)a2 = v16;
  memcpy((void *)(a2 + v16), *(const void **)(a1 + 40), 4 * v11);
  unsigned int v17 = *(_DWORD *)a2 + 4 * v11;
  *(_DWORD *)a2 = v17;
  *(_OWORD *)(a2 + v17) = *(_OWORD *)(a1 + 16);
  unint64_t v18 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v18), a4, v19);
    uint64_t v20 = (v19 + *(_DWORD *)a2);
    unint64_t v18 = (v20 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v20), v18 - v20);
    *(_DWORD *)a2 = v18;
  }
  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      long long v25 = 0u;
      long long v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      long long v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentSamplerStates_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC07E00000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentTexture_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC07B00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentTexture_atTextureIndex_samplerState_atSamplerIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C75746C757443;
  *(void *)a2 = 0xFFFFC0AA0000002CLL;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[4];
  unint64_t v11 = 84;
  *(_DWORD *)a2 = 84;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 84), __src, v12 + 8);
    uint64_t v13 = (v12 + 92);
    unint64_t v11 = (v12 + 95) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentTextures_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC07C00000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentVisibleFunctionTable_atBufferIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3A000000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setFragmentVisibleFunctionTables_withBufferRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3A100000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setFrontFacingWinding(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC07300000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setLineWidth(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 26179;
  *(void *)a2 = 0xFFFFC08900000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setMeshBuffer_offset_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3D700000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setMeshBufferOffset_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3D800000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C756C7543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setMeshBuffers_offsets_withRange(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC3D900000024;
  a2[8] = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 32);
  int v12 = snprintf((char *)a2 + 36, a3 - 36, "C@%zutU<b>@2ul", v11) + *a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((char *)a2 + (v12 + 1), v13 - (v12 + 1));
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)a1;
  uint64_t v14 = *a2 + 8;
  *a2 = v14;
  v11 *= 8;
  memcpy((char *)a2 + v14, *(const void **)(a1 + 8), v11);
  *a2 += v11;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v15 = *a2;
  uint64_t v16 = (v15 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v15, v16 - v15);
  *a2 = v16;
  *(_OWORD *)((char *)a2 + v16) = *(_OWORD *)(a1 + 24);
  unint64_t v17 = *a2 + 16;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setMeshBytes_length_atIndex(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    int v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC3DA00000024;
  a2[8] = 8 * (a4 != 0);
  a2[11] = 108;
  *(void *)(a2 + 9) = *(void *)"CU<b>ulul";
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 16);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unint64_t v14 = *a2 + 8;
  *a2 = v14;
  if (a4)
  {
    int v15 = 8 * *a4 + 8;
    memcpy((char *)a2 + v14, a4, v15);
    uint64_t v16 = v15 + *a2;
    unint64_t v14 = (v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v14 - v16);
    *a2 = v14;
  }
  if (a5)
  {
    if (v14 > a3)
    {
      int v17 = *a5;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      int v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setMeshSamplerState_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3DB00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setMeshSamplerState_lodMinClamp_lodMaxClamp_atIndex(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3DC00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctfful");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)a2 = 64;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 16);
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setMeshSamplerStates_lodMinClamps_lodMaxClamps_withRange(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC3DD00000024;
  a2[8] = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 40);
  int v12 = snprintf((char *)a2 + 36, a3 - 36, "C@%zutU<b>U<b>@2ul", v11) + *a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((char *)a2 + (v12 + 1), v13 - (v12 + 1));
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)a1;
  uint64_t v14 = *a2 + 8;
  *a2 = v14;
  v11 *= 8;
  memcpy((char *)a2 + v14, *(const void **)(a1 + 8), v11);
  *a2 += v11;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v15 = *a2;
  uint64_t v16 = (v15 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v15, v16 - v15);
  *a2 = v16;
  *(_OWORD *)((char *)a2 + v16) = *(_OWORD *)(a1 + 32);
  unint64_t v17 = *a2 + 16;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setMeshSamplerStates_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3DE00000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setMeshTexture_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3DF00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setMeshTextures_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3E000000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setObjectBuffer_offset_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3E100000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setObjectBufferOffset_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3E200000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C756C7543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setObjectBuffers_offsets_withRange(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC3E300000024;
  a2[8] = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 32);
  int v12 = snprintf((char *)a2 + 36, a3 - 36, "C@%zutU<b>@2ul", v11) + *a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((char *)a2 + (v12 + 1), v13 - (v12 + 1));
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)a1;
  uint64_t v14 = *a2 + 8;
  *a2 = v14;
  v11 *= 8;
  memcpy((char *)a2 + v14, *(const void **)(a1 + 8), v11);
  *a2 += v11;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v15 = *a2;
  uint64_t v16 = (v15 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v15, v16 - v15);
  *a2 = v16;
  *(_OWORD *)((char *)a2 + v16) = *(_OWORD *)(a1 + 24);
  unint64_t v17 = *a2 + 16;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setObjectBytes_length_atIndex(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    int v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC3E400000024;
  a2[8] = 8 * (a4 != 0);
  a2[11] = 108;
  *(void *)(a2 + 9) = *(void *)"CU<b>ulul";
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 16);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unint64_t v14 = *a2 + 8;
  *a2 = v14;
  if (a4)
  {
    int v15 = 8 * *a4 + 8;
    memcpy((char *)a2 + v14, a4, v15);
    uint64_t v16 = v15 + *a2;
    unint64_t v14 = (v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v14 - v16);
    *a2 = v14;
  }
  if (a5)
  {
    if (v14 > a3)
    {
      int v17 = *a5;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      int v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setObjectSamplerState_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3E500000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setObjectSamplerState_lodMinClamp_lodMaxClamp_atIndex(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3E600000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctfful");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)a2 = 64;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 16);
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setObjectSamplerStates_lodMinClamps_lodMaxClamps_withRange(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC3E700000024;
  a2[8] = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 40);
  int v12 = snprintf((char *)a2 + 36, a3 - 36, "C@%zutU<b>U<b>@2ul", v11) + *a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((char *)a2 + (v12 + 1), v13 - (v12 + 1));
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)a1;
  uint64_t v14 = *a2 + 8;
  *a2 = v14;
  v11 *= 8;
  memcpy((char *)a2 + v14, *(const void **)(a1 + 8), v11);
  *a2 += v11;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v15 = *a2;
  uint64_t v16 = (v15 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v15, v16 - v15);
  *a2 = v16;
  *(_OWORD *)((char *)a2 + v16) = *(_OWORD *)(a1 + 32);
  unint64_t v17 = *a2 + 16;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setObjectSamplerStates_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3E800000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setObjectTexture_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3E900000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setObjectTextures_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3EA00000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setObjectThreadgroupMemoryLength_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3EB00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C756C7543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setPointSize(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 26179;
  *(void *)a2 = 0xFFFFC18C00000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setPrimitiveRestartEnabled(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC19E00000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setPrimitiveRestartEnabled_index(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC19000000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C75697543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)(a1 + 8);
  unint64_t v11 = 64;
  *(_DWORD *)a2 = 64;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 64), __src, v12 + 8);
    uint64_t v13 = (v12 + 72);
    unint64_t v11 = (v12 + 75) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setProvokingVertexMode(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC29300000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setRenderPipelineState(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC06900000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setStencilCleared(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC29400000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setStencilFrontReferenceValue_backReferenceValue(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC0A500000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6975697543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)a2 = 56;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 12);
  unint64_t v11 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v12 + 8);
    uint64_t v13 = (v12 + 68);
    unint64_t v11 = (v12 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setStencilReferenceValue(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC08300000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setStencilResolveTexture_slice_depthPlane_level(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC29500000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctululul");
  *(_WORD *)(a2 + 45) = 0;
  *(unsigned char *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  unint64_t v11 = 88;
  *(_DWORD *)a2 = 88;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 88), __src, v12 + 8);
    uint64_t v13 = (v12 + 96);
    unint64_t v11 = (v12 + 99) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setStencilResolveTexture_slice_depthPlane_level_yInvert(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)a2 = 0xFFFFC29600000024;
  strcpy((char *)(a2 + 36), "Ctululului");
  *(unsigned char *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = *(void *)(a1 + 32);
  *(_DWORD *)a2 = 88;
  *(_DWORD *)(a2 + 88) = *(_DWORD *)(a1 + 40);
  unint64_t v11 = 92;
  *(_DWORD *)a2 = 92;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 92), __src, v12 + 8);
    uint64_t v13 = (v12 + 100);
    unint64_t v11 = (v12 + 103) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setStencilStoreAction(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC0E300000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setStencilStoreActionOptions(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC16C00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setTessellationFactorBuffer_offset_instanceStride(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC0EC00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setTessellationFactorScale(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 26179;
  *(void *)a2 = 0xFFFFC0FC00000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setThreadgroupMemoryLength_offset_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C756C756C7543;
  *(void *)a2 = 0xFFFFC1360000002CLL;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setTileAccelerationStructure_atBufferIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3A200000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setTileBuffer_offset_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC0F200000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setTileBufferOffset_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC0F300000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C756C7543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setTileBuffers_offsets_withRange(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC12900000024;
  a2[8] = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 32);
  int v12 = snprintf((char *)a2 + 36, a3 - 36, "C@%zutU<b>@2ul", v11) + *a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((char *)a2 + (v12 + 1), v13 - (v12 + 1));
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)a1;
  uint64_t v14 = *a2 + 8;
  *a2 = v14;
  v11 *= 8;
  memcpy((char *)a2 + v14, *(const void **)(a1 + 8), v11);
  *a2 += v11;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v15 = *a2;
  uint64_t v16 = (v15 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v15, v16 - v15);
  *a2 = v16;
  *(_OWORD *)((char *)a2 + v16) = *(_OWORD *)(a1 + 24);
  unint64_t v17 = *a2 + 16;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setTileBytes_length_atIndex(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    int v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC0F100000024;
  a2[8] = 8 * (a4 != 0);
  a2[11] = 108;
  *(void *)(a2 + 9) = *(void *)"CU<b>ulul";
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 16);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unint64_t v14 = *a2 + 8;
  *a2 = v14;
  if (a4)
  {
    int v15 = 8 * *a4 + 8;
    memcpy((char *)a2 + v14, a4, v15);
    uint64_t v16 = v15 + *a2;
    unint64_t v14 = (v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v14 - v16);
    *a2 = v14;
  }
  if (a5)
  {
    if (v14 > a3)
    {
      int v17 = *a5;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      int v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setTileIntersectionFunctionTable_atBufferIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3A300000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setTileIntersectionFunctionTables_withBufferRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3A400000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setTileSamplerState_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC0F500000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setTileSamplerState_lodMinClamp_lodMaxClamp_atIndex(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC0F600000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctfful");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)a2 = 64;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 16);
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setTileSamplerStates_lodMinClamps_lodMaxClamps_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v25 = 0u;
    long long v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    long long v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC12C00000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  uint64_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@%zuf@%zuf@2ul", v11, v11, v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), 8 * v11);
  uint64_t v15 = (*(_DWORD *)a2 + 8 * v11);
  *(_DWORD *)a2 = v15;
  memcpy((void *)(a2 + v15), *(const void **)(a1 + 32), 4 * v11);
  uint64_t v16 = (*(_DWORD *)a2 + 4 * v11);
  *(_DWORD *)a2 = v16;
  memcpy((void *)(a2 + v16), *(const void **)(a1 + 40), 4 * v11);
  unsigned int v17 = *(_DWORD *)a2 + 4 * v11;
  *(_DWORD *)a2 = v17;
  *(_OWORD *)(a2 + v17) = *(_OWORD *)(a1 + 16);
  unint64_t v18 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v18), a4, v19);
    uint64_t v20 = (v19 + *(_DWORD *)a2);
    unint64_t v18 = (v20 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v20), v18 - v20);
    *(_DWORD *)a2 = v18;
  }
  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      long long v25 = 0u;
      long long v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      long long v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setTileSamplerStates_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC12B00000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setTileTexture_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC0F400000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setTileTextures_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC12A00000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setTileVisibleFunctionTable_atBufferIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3A500000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setTileVisibleFunctionTables_withBufferRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3A600000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setTriangleFillMode(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC07800000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setTriangleFrontFillMode_backFillMode(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC29700000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C756C7543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setVertexAccelerationStructure_atBufferIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3A700000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setVertexAmplificationMode_value(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC23C00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C756C7543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setVertexBuffer_offset_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC06A00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setVertexBuffer_offset_attributeStride_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC45500000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctululul");
  *(_WORD *)(a2 + 45) = 0;
  *(unsigned char *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  unint64_t v11 = 88;
  *(_DWORD *)a2 = 88;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 88), __src, v12 + 8);
    uint64_t v13 = (v12 + 96);
    unint64_t v11 = (v12 + 99) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setVertexBufferOffset_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC0A000000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C756C7543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setVertexBufferOffset_attributeStride_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C756C756C7543;
  *(void *)a2 = 0xFFFFC4560000002CLL;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setVertexBuffers_offsets_attributeStrides_withRange(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC45700000024;
  a2[8] = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 40);
  int v12 = snprintf((char *)a2 + 36, a3 - 36, "C@%zutU<b>U<b>@2ul", v11) + *a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((char *)a2 + (v12 + 1), v13 - (v12 + 1));
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)a1;
  uint64_t v14 = *a2 + 8;
  *a2 = v14;
  v11 *= 8;
  memcpy((char *)a2 + v14, *(const void **)(a1 + 8), v11);
  *a2 += v11;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v15 = *a2;
  uint64_t v16 = (v15 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v15, v16 - v15);
  *a2 = v16;
  *(_OWORD *)((char *)a2 + v16) = *(_OWORD *)(a1 + 32);
  unint64_t v17 = *a2 + 16;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setVertexBuffers_offsets_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC06B00000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 32);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@%zuul@2ul", v11, v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  uint64_t v15 = (*(_DWORD *)a2 + v11);
  *(_DWORD *)a2 = v15;
  memcpy((void *)(a2 + v15), *(const void **)(a1 + 16), v11);
  unsigned int v16 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v16;
  *(_OWORD *)(a2 + v16) = *(_OWORD *)(a1 + 24);
  unint64_t v17 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v17), a4, v18);
    uint64_t v19 = (v18 + *(_DWORD *)a2);
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v19), v17 - v19);
    *(_DWORD *)a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setVertexBytes_length_atIndex(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    int v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC09F00000024;
  a2[8] = 8 * (a4 != 0);
  a2[11] = 108;
  *(void *)(a2 + 9) = *(void *)"CU<b>ulul";
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 16);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unint64_t v14 = *a2 + 8;
  *a2 = v14;
  if (a4)
  {
    int v15 = 8 * *a4 + 8;
    memcpy((char *)a2 + v14, a4, v15);
    uint64_t v16 = v15 + *a2;
    unint64_t v14 = (v16 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v16, v14 - v16);
    *a2 = v14;
  }
  if (a5)
  {
    if (v14 > a3)
    {
      int v17 = *a5;
      long long v21 = 0u;
      long long v22 = 0u;
      int v18 = v17;
      int v19 = 500;
      int v20 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v18);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setVertexBytes_length_attributeStride_atIndex(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    long long v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC45800000024;
  a2[8] = 8 * (a4 != 0);
  strcpy((char *)a2 + 36, "CU<b>ululul");
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 16);
  unsigned int v13 = *a2 + 8;
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 32);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      long long v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setVertexIntersectionFunctionTable_atBufferIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3A800000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setVertexIntersectionFunctionTables_withBufferRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3A900000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setVertexSamplerState_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC06E00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setVertexSamplerState_lodMinClamp_lodMaxClamp_atIndex(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC07000000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctfful");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)a2 = 64;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 16);
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setVertexSamplerStates_lodMinClamps_lodMaxClamps_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v25 = 0u;
    long long v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    long long v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC07100000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  uint64_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@%zuf@%zuf@2ul", v11, v11, v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), 8 * v11);
  uint64_t v15 = (*(_DWORD *)a2 + 8 * v11);
  *(_DWORD *)a2 = v15;
  memcpy((void *)(a2 + v15), *(const void **)(a1 + 32), 4 * v11);
  uint64_t v16 = (*(_DWORD *)a2 + 4 * v11);
  *(_DWORD *)a2 = v16;
  memcpy((void *)(a2 + v16), *(const void **)(a1 + 40), 4 * v11);
  unsigned int v17 = *(_DWORD *)a2 + 4 * v11;
  *(_DWORD *)a2 = v17;
  *(_OWORD *)(a2 + v17) = *(_OWORD *)(a1 + 16);
  unint64_t v18 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v18), a4, v19);
    uint64_t v20 = (v19 + *(_DWORD *)a2);
    unint64_t v18 = (v20 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v20), v18 - v20);
    *(_DWORD *)a2 = v18;
  }
  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      long long v25 = 0u;
      long long v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      long long v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setVertexSamplerStates_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC06F00000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setVertexTexture_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC06C00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setVertexTextures_withRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC06D00000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setVertexVisibleFunctionTable_atBufferIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3AA00000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setVertexVisibleFunctionTables_withBufferRange(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3AB00000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 24);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zut@2ul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(_OWORD *)(a2 + v15) = *(_OWORD *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 16);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setViewport(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    int v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC07200000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "C@6d");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  long long v11 = *(_OWORD *)(a1 + 8);
  long long v12 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 84) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 68) = v12;
  *(_OWORD *)(a2 + 52) = v11;
  unint64_t v13 = 100;
  *(_DWORD *)a2 = 100;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 100), __src, v14 + 8);
    uint64_t v15 = (v14 + 108);
    unint64_t v13 = (v14 + 111) & 0xFFFFFFFC;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }
  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      int v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setViewportTransformEnabled(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC29800000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_setVisibilityResultMode_offset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC08400000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C756C7543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_textureBarrier(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC0B700000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_updateFence_afterStages(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC10200000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_useHeap(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC15700000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_useHeap_stages(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC23300000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_useHeaps_count(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    int v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC15800000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      int v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_useHeaps_count_stages(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC23400000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutulul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unsigned int v16 = *(_DWORD *)a2 + 8;
  *(_DWORD *)a2 = v16;
  *(void *)(a2 + v16) = *(void *)(a1 + 24);
  unint64_t v17 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v17), a4, v18);
    uint64_t v19 = (v18 + *(_DWORD *)a2);
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v19), v17 - v19);
    *(_DWORD *)a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_useResource_usage(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC15500000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_useResource_usage_stages(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC23500000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctulul");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  unint64_t v11 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v12 + 8);
    uint64_t v13 = (v12 + 84);
    unint64_t v11 = (v12 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_useResources_count_usage(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC15600000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutulul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unsigned int v16 = *(_DWORD *)a2 + 8;
  *(_DWORD *)a2 = v16;
  *(void *)(a2 + v16) = *(void *)(a1 + 24);
  unint64_t v17 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v17), a4, v18);
    uint64_t v19 = (v18 + *(_DWORD *)a2);
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v19), v17 - v19);
    *(_DWORD *)a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_useResources_count_usage_stages(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v25 = 0u;
    long long v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    long long v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC23600000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutululul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unsigned int v16 = *(_DWORD *)a2 + 8;
  *(_DWORD *)a2 = v16;
  *(void *)(a2 + v16) = *(void *)(a1 + 24);
  unsigned int v17 = *(_DWORD *)a2 + 8;
  *(_DWORD *)a2 = v17;
  *(void *)(a2 + v17) = *(void *)(a1 + 32);
  unint64_t v18 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v18), a4, v19);
    uint64_t v20 = (v19 + *(_DWORD *)a2);
    unint64_t v18 = (v20 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v20), v18 - v20);
    *(_DWORD *)a2 = v18;
  }
  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      long long v25 = 0u;
      long long v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      long long v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }
}

void DYTraceEncode_MTLRenderCommandEncoder_waitForFence_beforeStages(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    unsigned int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC10300000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      unsigned int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderPipelineState_allocatedSize(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFD83000000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v13 + 8);
    uint64_t v14 = (v13 + 60);
    unint64_t v12 = (v13 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLRenderPipelineState_gpuResourceID(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD84B00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLRenderPipelineState_imageblockSampleLength(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFD83800000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLRenderPipelineState_timeSinceTouched(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD84400000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderPipelineState_setEmulationPayloadMemoryLength(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC44800000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderPipelineState_setEmulationPrimitiveTopology(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC42900000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderPipelineState_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC08E00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLRenderPipelineState_fragmentFunctionHandleWithFunction(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC3AC00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLRenderPipelineState_functionHandleWithFunction_stage(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC39900000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[2];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[3];
  *(_DWORD *)(a2 + 68) = 116;
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[1];
  unint64_t v12 = 80;
  *(_DWORD *)a2 = 80;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 80), __src, v13 + 8);
    uint64_t v14 = (v13 + 88);
    unint64_t v12 = (v13 + 91) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLRenderPipelineState_newFragmentIntersectionFunctionTableWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC3AD00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLRenderPipelineState_newIntersectionFunctionTableWithDescriptor_stage(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC39A00000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CUul");
  *(_WORD *)((char *)a2 + 41) = 0;
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLRenderPipelineState_newRenderPipelineStateWithAdditionalBinaryFunctions_error(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 7624003;
  *(void *)a2 = 0xFFFFC39B00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLRenderPipelineState_newTileIntersectionFunctionTableWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC3AE00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLRenderPipelineState_newVertexIntersectionFunctionTableWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC3AF00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLRenderPipelineState_newVisibleFunctionTableFromFragmentStageWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC3B000000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLRenderPipelineState_newVisibleFunctionTableFromTileStageWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC3B100000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLRenderPipelineState_newVisibleFunctionTableFromVertexStageWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFC3B200000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLRenderPipelineState_newVisibleFunctionTableWithDescriptor_stage(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC39C00000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CUul");
  *(_WORD *)((char *)a2 + 41) = 0;
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 24);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLRenderPipelineState_tileFunctionHandleWithFunction(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC3B300000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLRenderPipelineState_vertexFunctionHandleWithFunction(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC3B400000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLResidencySet_addAllocation(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC49400000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLResidencySet_addAllocations_count(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC49500000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLResidencySet_commit(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC48C00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLResidencySet_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC48100000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLResidencySet_endResidency(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC48200000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLResidencySet_removeAllAllocations(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC49800000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLResidencySet_removeAllocation(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC49900000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLResidencySet_removeAllocations_count(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC49A00000024;
  *(_DWORD *)(a2 + 32) = 8 * (a4 != 0);
  size_t v11 = *(void *)(a1 + 16);
  int v12 = snprintf((char *)(a2 + 36), a3 - 36, "C@%zutul", v11) + *(_DWORD *)a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((void *)(a2 + (v12 + 1)), v13 - (v12 + 1));
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + v13) = *(void *)a1;
  uint64_t v14 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v14;
  v11 *= 8;
  memcpy((void *)(a2 + v14), *(const void **)(a1 + 8), v11);
  unsigned int v15 = *(_DWORD *)a2 + v11;
  *(_DWORD *)a2 = v15;
  *(void *)(a2 + v15) = *(void *)(a1 + 16);
  unint64_t v16 = (*(_DWORD *)a2 + 8);
  *(_DWORD *)a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((void *)(a2 + v16), a4, v17);
    uint64_t v18 = (v17 + *(_DWORD *)a2);
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MTLResidencySet_requestResidency(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC48900000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLResourceGroup_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC26700000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLResourceStateCommandEncoder_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC24E00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLResourceStateCommandEncoder_copyMappingStateFromTexture_mipLevel_slice_toBuffer_offset_numTiles(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC25000000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctulultulul");
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = a1[5];
  *(_DWORD *)a2 = 96;
  *(void *)(a2 + 96) = a1[6];
  unint64_t v11 = 104;
  *(_DWORD *)a2 = 104;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 104), __src, v12 + 8);
    uint64_t v13 = (v12 + 112);
    unint64_t v11 = (v12 + 115) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLResourceStateCommandEncoder_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC25200000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLResourceStateCommandEncoder_endEncoding(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC25300000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLResourceStateCommandEncoder_insertDebugSignpost(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC25400000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLResourceStateCommandEncoder_popDebugGroup(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC25500000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLResourceStateCommandEncoder_pushDebugGroup(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC25600000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLResourceStateCommandEncoder_updateFence(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC25700000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLResourceStateCommandEncoder_updateTextureMapping_mode_indirectBuffer_indirectBufferOffset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C75746C757443;
  *(void *)a2 = 0xFFFFC2580000002CLL;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[4];
  unint64_t v11 = 84;
  *(_DWORD *)a2 = 84;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 84), __src, v12 + 8);
    uint64_t v13 = (v12 + 92);
    unint64_t v11 = (v12 + 95) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLResourceStateCommandEncoder_updateTextureMapping_mode_region_mipLevel_slice(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC25900000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul@6ululul");
  *(_WORD *)(a2 + 49) = 0;
  *(unsigned char *)(a2 + 51) = 0;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)a1;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 76;
  long long v11 = *(_OWORD *)(a1 + 56);
  long long v12 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 76) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 92) = v12;
  *(_OWORD *)(a2 + 108) = v11;
  *(_DWORD *)a2 = 124;
  *(void *)(a2 + 124) = *(void *)(a1 + 72);
  *(_DWORD *)a2 = 132;
  *(void *)(a2 + 132) = *(void *)(a1 + 80);
  unint64_t v13 = 140;
  *(_DWORD *)a2 = 140;
  if (__src)
  {
    int v14 = 8 * *__src;
    memcpy((void *)(a2 + 140), __src, v14 + 8);
    uint64_t v15 = (v14 + 148);
    unint64_t v13 = (v14 + 151) & 0xFFFFFFFC;
    bzero((void *)(a2 + v15), v13 - v15);
    *(_DWORD *)a2 = v13;
  }
  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }
}

void DYTraceEncode_MTLResourceStateCommandEncoder_updateTextureMappings_mode_regions_mipLevels_slices_numRegions(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC25A00000024;
  a2[8] = 8 * (a4 != 0);
  strcpy((char *)a2 + 36, "CtulU<b>U<b>U<b>ul");
  *((unsigned char *)a2 + 55) = 0;
  *a2 = 56;
  *((void *)a2 + 7) = *(void *)a1;
  *a2 = 64;
  *((void *)a2 + 8) = *(void *)(a1 + 8);
  *a2 = 72;
  *((void *)a2 + 9) = *(void *)(a1 + 16);
  *a2 = 80;
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  AppendString(*(const char **)(a1 + 32), (int *)a2);
  AppendString(*(const char **)(a1 + 40), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(void *)((char *)a2 + v12) = *(void *)(a1 + 48);
  unint64_t v13 = *a2 + 8;
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = (v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }
  if (a5)
  {
    if (v13 > a3)
    {
      int v16 = *a5;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }
}

void DYTraceEncode_MTLResourceStateCommandEncoder_waitForFence(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC25B00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLSamplerState_gpuResourceID(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD84D00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLSamplerState_uniqueIdentifier(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD80E00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLSamplerState_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC08F00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLSharedEvent_setEnableBarrier(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFC42700000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLSharedEvent_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC19A00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLSharedEvent_setSignaledValue(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFC19900000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLSharedEvent_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC19B00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLSharedEvent_newSharedEventHandle(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC1DD00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLSharedEvent_waitUntilSignaledValue_timeoutMS(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC3C200000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x7775777543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 16);
  *(_DWORD *)(a2 + 68) = 26997;
  *(_DWORD *)a2 = 72;
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 24);
  unint64_t v12 = 76;
  *(_DWORD *)a2 = 76;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 76), __src, v13 + 8);
    uint64_t v14 = (v13 + 84);
    unint64_t v12 = (v13 + 87) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLTexture_allocatedSize(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFD81200000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v13 + 8);
    uint64_t v14 = (v13 + 60);
    unint64_t v12 = (v13 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLTexture_allocationID(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD82400000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLTexture_compressionFeedback(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFD82300000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v13 + 8);
    uint64_t v14 = (v13 + 60);
    unint64_t v12 = (v13 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLTexture_gpuResourceID(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD84C00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLTexture_heapOffset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFD83700000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLTexture_mipmapInfo(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v10;
    int v19 = 500;
    long long v20 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFD80900000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  unint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = (v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }
  if (v13 > a3 && a5 != 0)
  {
    int v17 = *a5;
    long long v21 = 0u;
    long long v22 = 0u;
    int v18 = v17;
    int v19 = 500;
    long long v20 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v18);
  }
}

void DYTraceEncode_MTLTexture_resourceIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD82A00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLTexture_resourceUsage(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 6911299;
  *(void *)a2 = 0xFFFFD80600000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v13 + 8);
    uint64_t v14 = (v13 + 60);
    unint64_t v12 = (v13 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLTexture_saveSlice_level_zPlane_normalize_blitOption_toPath(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFD82700000024;
  if (a4) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CulululuiulS");
  *(_WORD *)((char *)a2 + 49) = 0;
  *((unsigned char *)a2 + 51) = 0;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)a1;
  *a2 = 60;
  *(void *)(a2 + 15) = *(void *)(a1 + 8);
  *a2 = 68;
  *(void *)(a2 + 17) = *(void *)(a1 + 16);
  *a2 = 76;
  *(void *)(a2 + 19) = *(void *)(a1 + 24);
  *a2 = 84;
  a2[21] = *(_DWORD *)(a1 + 48);
  *a2 = 88;
  *((void *)a2 + 11) = *(void *)(a1 + 32);
  *a2 = 96;
  AppendString(*(const char **)(a1 + 40), (int *)a2);
  uint64_t v12 = *a2;
  unint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = (v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }
  if (v13 > a3)
  {
    if (a5)
    {
      int v16 = *a5;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }
}

void DYTraceEncode_MTLTexture_timeSinceTouched(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 78;
  }
  else {
    int v11 = 70;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD81C00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLTexture_uniqueIdentifier(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD80D00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLTexture_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC09000000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLTexture_setResponsibleProcess(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 14;
  }
  else {
    int v11 = 6;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 26947;
  *(void *)a2 = 0xFFFFC09100000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v13 + 8);
    uint64_t v14 = (v13 + 60);
    unint64_t v12 = (v13 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLTexture_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC09200000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLTexture_didModifyData(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC35200000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLTexture_getBytes_bytesPerRow_fromRegion_mipmapLevel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v25 = 0u;
    long long v26 = 0u;
    int v22 = v10;
    int v23 = 500;
    long long v24 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v22);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC09500000024;
  if (a4) {
    int v11 = 10;
  }
  else {
    int v11 = 2;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CU<b>ul@6ulul");
  *((_WORD *)a2 + 25) = 0;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)a1;
  *a2 = 60;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 16);
  uint64_t v14 = *a2 + 8;
  *a2 = v14;
  int v15 = (_OWORD *)((char *)a2 + v14);
  long long v16 = *(_OWORD *)(a1 + 24);
  long long v17 = *(_OWORD *)(a1 + 56);
  v15[1] = *(_OWORD *)(a1 + 40);
  v15[2] = v17;
  _OWORD *v15 = v16;
  LODWORD(v15) = *a2 + 48;
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 72);
  unint64_t v18 = *a2 + 8;
  *a2 = v18;
  if (a4)
  {
    int v19 = 8 * *a4 + 8;
    memcpy((char *)a2 + v18, a4, v19);
    uint64_t v20 = v19 + *a2;
    unint64_t v18 = (v20 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v20, v18 - v20);
    *a2 = v18;
  }
  if (a5)
  {
    if (v18 > a3)
    {
      int v21 = *a5;
      long long v25 = 0u;
      long long v26 = 0u;
      int v22 = v21;
      int v23 = 500;
      long long v24 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v22);
    }
  }
}

void DYTraceEncode_MTLTexture_isAliasable(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    unint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC11400000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)(a2 + 48) = 26997;
  *(_DWORD *)a2 = 52;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      unint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLTexture_isPurgeable(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    unint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC09900000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)(a2 + 48) = 26997;
  *(_DWORD *)a2 = 52;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 8);
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      unint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLTexture_makeAliasable(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC10E00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLTexture_newRemoteTextureViewForDevice(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC1D700000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLTexture_newSharedTextureHandle(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC1DA00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLTexture_newTextureViewWithPixelFormat(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFC09700000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[2];
  *(_DWORD *)(a2 + 56) = 116;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[1];
  unint64_t v12 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v13 + 8);
    uint64_t v14 = (v13 + 76);
    unint64_t v12 = (v13 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLTexture_newTextureViewWithPixelFormat_resourceIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC2B600000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x77756C7543;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[2];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[3];
  *(_DWORD *)(a2 + 68) = 116;
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[1];
  unint64_t v12 = 80;
  *(_DWORD *)a2 = 80;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 80), __src, v13 + 8);
    uint64_t v14 = (v13 + 88);
    unint64_t v12 = (v13 + 91) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC0BC00000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Culul@2ul@2ul");
  *(_WORD *)(a2 + 50) = 0;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)a1;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 76;
  *(_OWORD *)(a2 + 76) = *(_OWORD *)(a1 + 32);
  *(_DWORD *)a2 = 92;
  *(_OWORD *)(a2 + 92) = *(_OWORD *)(a1 + 48);
  *(_DWORD *)(a2 + 108) = 116;
  *(_DWORD *)a2 = 112;
  *(void *)(a2 + 112) = *(void *)(a1 + 8);
  unint64_t v12 = 120;
  *(_DWORD *)a2 = 120;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 120), __src, v13 + 8);
    uint64_t v14 = (v13 + 128);
    unint64_t v12 = (v13 + 131) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices_resourceIndex(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC2B700000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Culul@2ul@2uluw");
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *(void *)a1;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 76;
  *(_OWORD *)(a2 + 76) = *(_OWORD *)(a1 + 32);
  *(_DWORD *)a2 = 92;
  *(_OWORD *)(a2 + 92) = *(_OWORD *)(a1 + 48);
  *(_DWORD *)a2 = 108;
  *(void *)(a2 + 108) = *(void *)(a1 + 64);
  *(_DWORD *)(a2 + 116) = 116;
  *(_DWORD *)a2 = 120;
  *(void *)(a2 + 120) = *(void *)(a1 + 8);
  unint64_t v12 = 128;
  *(_DWORD *)a2 = 128;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 128), __src, v13 + 8);
    uint64_t v14 = (v13 + 136);
    unint64_t v12 = (v13 + 139) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices_swizzle(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC26100000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 52) = 98;
  *(_OWORD *)(a2 + 36) = *(_OWORD *)"Culul@2ul@2ul@4ub";
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)a1;
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 80;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 32);
  *(_DWORD *)a2 = 96;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 48);
  *(_DWORD *)a2 = 112;
  *(_DWORD *)(a2 + 112) = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(a2 + 116) = 116;
  *(_DWORD *)a2 = 120;
  *(void *)(a2 + 120) = *(void *)(a1 + 8);
  unint64_t v12 = 128;
  *(_DWORD *)a2 = 128;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 128), __src, v13 + 8);
    uint64_t v14 = (v13 + 136);
    unint64_t v12 = (v13 + 139) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLTexture_newTextureViewWithPixelFormat_textureType_levels_slices_swizzle_resourceIndex(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC2B800000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Culul@2ul@2ul@4ubuw");
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = *(void *)a1;
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 80;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 32);
  *(_DWORD *)a2 = 96;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 48);
  *(_DWORD *)a2 = 112;
  *(_DWORD *)(a2 + 112) = *(_DWORD *)(a1 + 72);
  *(_DWORD *)a2 = 116;
  *(void *)(a2 + 116) = *(void *)(a1 + 64);
  *(_DWORD *)(a2 + 124) = 116;
  *(_DWORD *)a2 = 128;
  *(void *)(a2 + 128) = *(void *)(a1 + 8);
  unint64_t v12 = 136;
  *(_DWORD *)a2 = 136;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 136), __src, v13 + 8);
    uint64_t v14 = (v13 + 144);
    unint64_t v12 = (v13 + 147) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLTexture_replaceRegion_mipmapLevel_withBytes_bytesPerRow(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC09600000024;
  a2[8] = 8 * (a4 != 0);
  strcpy((char *)a2 + 36, "C@6ululU<b>ul");
  *((_WORD *)a2 + 25) = 0;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)a1;
  *a2 = 60;
  long long v11 = *(_OWORD *)(a1 + 40);
  long long v12 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 15) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 19) = v12;
  *(_OWORD *)(a2 + 23) = v11;
  *a2 = 108;
  *(void *)(a2 + 27) = *(void *)(a1 + 56);
  *a2 = 116;
  AppendString(*(const char **)(a1 + 64), (int *)a2);
  uint64_t v13 = *a2;
  uint64_t v14 = (v13 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v13, v14 - v13);
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 72);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MTLTextureLayout_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC11F00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLVideoCommandEncoder_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC1EE00000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLVideoCommandEncoder_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC1EF00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLVideoCommandEncoder_endEncoding(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC1F400000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLVideoCommandEncoder_generateMotionVectorsForTexture_previousTexture_resultBuffer_bufferOffset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC1F100000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctttul");
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[4];
  unint64_t v11 = 84;
  *(_DWORD *)a2 = 84;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 84), __src, v12 + 8);
    uint64_t v13 = (v12 + 92);
    unint64_t v11 = (v12 + 95) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLVideoCommandEncoder_insertDebugSignpost(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC1F500000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLVideoCommandEncoder_popDebugGroup(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC1F700000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLVideoCommandEncoder_pushDebugGroup(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC1F600000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLVideoCommandEncoder_setMotionEstimationPipeline(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC1F000000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLVideoCommandEncoder_updateFence(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC1F300000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLVideoCommandEncoder_waitForFence(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 29763;
  *(void *)a2 = 0xFFFFC1F200000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLVisibleFunctionTable_allocatedSize(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFD84200000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLVisibleFunctionTable_allocationID(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD83F00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLVisibleFunctionTable_gpuAddress(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD85700000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLVisibleFunctionTable_gpuResourceID(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD85000000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLVisibleFunctionTable_setFunctions_withRange(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFC31300000024;
  a2[8] = 8 * (a4 != 0);
  strcpy((char *)a2 + 36, "CU@2ul");
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  uint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  *(_OWORD *)((char *)a2 + v12) = *(_OWORD *)(a1 + 16);
  unint64_t v13 = *a2 + 16;
  *a2 = v13;
  if (a4)
  {
    int v14 = 8 * *a4 + 8;
    memcpy((char *)a2 + v13, a4, v14);
    uint64_t v15 = v14 + *a2;
    unint64_t v13 = (v15 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v15, v13 - v15);
    *a2 = v13;
  }
  if (a5)
  {
    if (v13 > a3)
    {
      int v16 = *a5;
      long long v20 = 0u;
      long long v21 = 0u;
      int v17 = v16;
      int v18 = 500;
      long long v19 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v17);
    }
  }
}

void DYTraceEncode_MTLVisibleFunctionTable_timeSinceTouched(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD83E00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLVisibleFunctionTable_uniqueIdentifier(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 12;
  }
  else {
    int v11 = 4;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 7828803;
  *(void *)a2 = 0xFFFFD82F00000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v12 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v13 + 8);
    uint64_t v14 = (v13 + 64);
    unint64_t v12 = (v13 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MTLVisibleFunctionTable_setLabel(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21315;
  *(void *)a2 = 0xFFFFC30900000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MTLVisibleFunctionTable_setResponsibleProcess(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 26947;
  *(void *)a2 = 0xFFFFC30A00000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLVisibleFunctionTable_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFC30B00000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MTLVisibleFunctionTable_setFunction_atIndex(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFC31200000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctul");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_NSHMDMetalSession_initWithMetalDevice_deviceReference_hmdName(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    long long v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFE60200000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CtUS");
  *(_WORD *)((char *)a2 + 41) = 0;
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)(a1 + 16);
  *a2 = 60;
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  AppendString(*(const char **)(a1 + 32), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      long long v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_NSHMDMetalSession_nextDrawable(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFE60100000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_NSHMDMetalSession_setDrawablePixelFormat(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 7107907;
  *(void *)a2 = 0xFFFFE60000000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = a1[1];
  unint64_t v11 = 56;
  *(_DWORD *)a2 = 56;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 56), __src, v12 + 8);
    uint64_t v13 = (v12 + 64);
    unint64_t v11 = (v12 + 67) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_NSHMDMetalSession_setDrawableSize(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFE60300000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "C@2d");
  *(_WORD *)(a2 + 41) = 0;
  *(unsigned char *)(a2 + 43) = 0;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(_OWORD *)(a2 + 52) = *(_OWORD *)(a1 + 8);
  unint64_t v11 = 68;
  *(_DWORD *)a2 = 68;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 68), __src, v12 + 8);
    uint64_t v13 = (v12 + 76);
    unint64_t v11 = (v12 + 79) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_UIScreen_setInterfaceOrientation(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 26947;
  *(void *)a2 = 0xFFFFE40D00000028;
  *(void *)(a2 + 40) = *(void *)a1;
  *(_DWORD *)a2 = 48;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 8);
  unint64_t v11 = 52;
  *(_DWORD *)a2 = 52;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 52), __src, v12 + 8);
    uint64_t v13 = (v12 + 60);
    unint64_t v11 = (v12 + 63) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MPSPlugin_newCNNConvolutionWithDescriptor_dataSource_fullyConnected(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFE80D00000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CUUi");
  *(_WORD *)((char *)a2 + 41) = 0;
  *((unsigned char *)a2 + 43) = 0;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(unsigned int *)((char *)a2 + v13) = *(_DWORD *)(a1 + 32);
  unsigned int v14 = *a2 + 4;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MPSPlugin_newCNNConvolutionWithDescriptor_convolutionData(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 5592387;
  *(void *)a2 = 0xFFFFE80100000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MPSPlugin_newCNNConvolutionGradientWithDescriptor_convolutionData(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 5592387;
  *(void *)a2 = 0xFFFFE82100000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MPSPlugin_newCNNNeuronWithNeuronType_neuronParameterA_neuronParameterB_neuronParameterC(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    int v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFE80B00000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)(a2 + 36) = 0x6666666943;
  *(_DWORD *)a2 = 44;
  *(void *)(a2 + 44) = *(void *)a1;
  *(_DWORD *)a2 = 52;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)a2 = 56;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)a2 = 64;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a2 + 68) = 116;
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = *(void *)(a1 + 8);
  unint64_t v12 = 80;
  *(_DWORD *)a2 = 80;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 80), __src, v13 + 8);
    uint64_t v14 = (v13 + 88);
    unint64_t v12 = (v13 + 91) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      int v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MPSPlugin_newCNNNeuronWithNeuronType_neuronParameterAArray_count(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFE80F00000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)(a2 + 9) = 0x6C75556943;
  *a2 = 44;
  *(void *)(a2 + 11) = *(void *)a1;
  *a2 = 52;
  a2[13] = *(_DWORD *)(a1 + 16);
  *a2 = 56;
  AppendString(*(const char **)(a1 + 24), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 32);
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(_WORD *)((char *)a2 + v14) = 116;
  uint64_t v15 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v15 - (*a2 + 2));
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 8);
  unint64_t v16 = *a2 + 8;
  *a2 = v16;
  if (a4)
  {
    int v17 = 8 * *a4 + 8;
    memcpy((char *)a2 + v16, a4, v17);
    uint64_t v18 = v17 + *a2;
    unint64_t v16 = (v18 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v18, v16 - v18);
    *a2 = v16;
  }
  if (a5)
  {
    if (v16 > a3)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MPSPlugin_newMatrixMultiplicationWithTransposeLeft_transposeRight_resultRows_resultColumns_interiorColumns_alpha_beta(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFE81600000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ciiulululdd");
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)a2 = 60;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = *(void *)(a1 + 32);
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = *(void *)(a1 + 40);
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = *(void *)(a1 + 48);
  *(_DWORD *)a2 = 96;
  *(void *)(a2 + 96) = *(void *)(a1 + 56);
  unint64_t v12 = 116;
  *(_DWORD *)(a2 + 104) = 116;
  *(_DWORD *)a2 = 108;
  *(void *)(a2 + 108) = *(void *)(a1 + 8);
  *(_DWORD *)a2 = 116;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 116), __src, v13 + 8);
    unint64_t v12 = (v13 + 127) & 0xFFFFFFFC;
    bzero((void *)(a2 + (v13 + 124)), v12 - (v13 + 124));
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MPSPlugin_newMatrixVectorMultiplicationWithTranspose_rows_columns_alpha_beta(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFE80A00000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ciululdd");
  *(_WORD *)(a2 + 45) = 0;
  *(unsigned char *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *(void *)a1;
  *(_DWORD *)a2 = 56;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 32);
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = *(void *)(a1 + 40);
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = *(void *)(a1 + 48);
  *(_DWORD *)(a2 + 92) = 116;
  *(_DWORD *)a2 = 96;
  *(void *)(a2 + 96) = *(void *)(a1 + 8);
  unint64_t v12 = 104;
  *(_DWORD *)a2 = 104;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 104), __src, v13 + 8);
    uint64_t v14 = (v13 + 112);
    unint64_t v12 = (v13 + 115) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MPSPlugin_newMatrixFullyConnected(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFE82200000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MPSPlugin_newCNNPoolingMaxWithKernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFE80300000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 44) = 108;
  *(void *)(a2 + 36) = *(void *)"Culululul";
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[2];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[3];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[4];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[5];
  *(_DWORD *)(a2 + 88) = 116;
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = a1[1];
  unint64_t v12 = 100;
  *(_DWORD *)a2 = 100;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 100), __src, v13 + 8);
    uint64_t v14 = (v13 + 108);
    unint64_t v12 = (v13 + 111) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MPSPlugin_newCNNPoolingAverageWithKernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFE82300000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 44) = 108;
  *(void *)(a2 + 36) = *(void *)"Culululul";
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[2];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[3];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[4];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[5];
  *(_DWORD *)(a2 + 88) = 116;
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = a1[1];
  unint64_t v12 = 100;
  *(_DWORD *)a2 = 100;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 100), __src, v13 + 8);
    uint64_t v14 = (v13 + 108);
    unint64_t v12 = (v13 + 111) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MPSPlugin_newCNNDilatedPoolingMaxWithKernelWidth_kernelHeight_strideInPixelsX_strideInPixelsY_dilationRateX_dilationRateY(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFE81C00000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Culululululul");
  *(_WORD *)(a2 + 50) = 0;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = *a1;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[4];
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = a1[5];
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = a1[6];
  *(_DWORD *)a2 = 100;
  *(void *)(a2 + 100) = a1[7];
  *(_DWORD *)(a2 + 108) = 116;
  *(_DWORD *)a2 = 112;
  *(void *)(a2 + 112) = a1[1];
  unint64_t v12 = 120;
  *(_DWORD *)a2 = 120;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 120), __src, v13 + 8);
    uint64_t v14 = (v13 + 128);
    unint64_t v12 = (v13 + 131) & 0xFFFFFFF8;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MPSPlugin_newCNNSoftMax(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    long long v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFE81900000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 116;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      long long v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MPSPlugin_newNDArrayConvolution2DWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFE83100000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MPSPlugin_newNDArrayConvolution2DGradientWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFE83000000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MPSExternalPluginBase_dealloc(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    uint64_t v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFE80500000028;
  *(void *)(a2 + 40) = *a1;
  unint64_t v11 = 48;
  *(_DWORD *)a2 = 48;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 48), __src, v12 + 8);
    uint64_t v13 = (v12 + 56);
    unint64_t v11 = (v12 + 59) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      uint64_t v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MPSExternalCNNUnary_encodeToCommandBuffer_computeCommandEncoder_options_sourceTexture_sourceInfo_destinationTexture_destinationInfo(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFE80900000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[11] = 85;
  *(void *)(a2 + 9) = *(void *)"CttultUtU";
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  *((void *)a2 + 7) = *(void *)(a1 + 16);
  *a2 = 64;
  *((void *)a2 + 8) = *(void *)(a1 + 24);
  *a2 = 72;
  *((void *)a2 + 9) = *(void *)(a1 + 32);
  *a2 = 80;
  *((void *)a2 + 10) = *(void *)(a1 + 40);
  *a2 = 88;
  AppendString(*(const char **)(a1 + 48), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 56);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 64), (int *)a2);
  uint64_t v14 = *a2;
  uint64_t v15 = (v14 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v14, v15 - v14);
  *a2 = v15;
  strcpy((char *)a2 + v15, "ul");
  uint64_t v16 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v16 - (*a2 + 3));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MPSExternalCNNUnary_encodeToCommandBuffer_computeCommandEncoder_options_pluginOptions_sourceTexture_sourceInfo_destinationTexture_destinationInfo(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)a2 = 0xFFFFE81B00000024;
  strcpy((char *)a2 + 36, "CttulultUtU");
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  *((void *)a2 + 7) = *(void *)(a1 + 16);
  *a2 = 64;
  *((void *)a2 + 8) = *(void *)(a1 + 24);
  *a2 = 72;
  *((void *)a2 + 9) = *(void *)(a1 + 32);
  *a2 = 80;
  *((void *)a2 + 10) = *(void *)(a1 + 40);
  *a2 = 88;
  *((void *)a2 + 11) = *(void *)(a1 + 48);
  *a2 = 96;
  AppendString(*(const char **)(a1 + 56), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 64);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 72), (int *)a2);
  uint64_t v14 = *a2;
  uint64_t v15 = (v14 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v14, v15 - v14);
  *a2 = v15;
  strcpy((char *)a2 + v15, "ul");
  uint64_t v16 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v16 - (*a2 + 3));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MPSExternalCNNUnary_encodeBatchToCommandBuffer_computeCommandEncoder_options_pluginOptions_sourceTextures_sourceInfo_destinationTextures_destinationInfo_predicationBuffer_predicationOffset(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v33 = 0u;
    long long v34 = 0u;
    int v30 = v10;
    int v31 = 500;
    int v32 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v30);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFE81D00000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  int v12 = snprintf((char *)a2 + 36, a3 - 36, "Cttulul@%llutU@%llutUtul", *(void *)(a1 + 56), *(void *)(a1 + 80)) + *a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((char *)a2 + (v12 + 1), v13 - (v12 + 1));
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)a1;
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 16);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 24);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 32);
  unsigned int v17 = *a2 + 8;
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 40);
  uint64_t v18 = *a2 + 8;
  *a2 = v18;
  memcpy((char *)a2 + v18, *(const void **)(a1 + 48), 8 * *(void *)(a1 + 56));
  *a2 += 8 * *(_DWORD *)(a1 + 56);
  AppendString(*(const char **)(a1 + 64), (int *)a2);
  uint64_t v19 = *a2;
  uint64_t v20 = (v19 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v19, v20 - v19);
  *a2 = v20;
  memcpy((char *)a2 + v20, *(const void **)(a1 + 72), 8 * *(void *)(a1 + 80));
  *a2 += 8 * *(_DWORD *)(a1 + 80);
  AppendString(*(const char **)(a1 + 88), (int *)a2);
  uint64_t v21 = *a2;
  uint64_t v22 = (v21 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v21, v22 - v21);
  *a2 = v22;
  *(void *)((char *)a2 + v22) = *(void *)(a1 + 96);
  unsigned int v23 = *a2 + 8;
  *a2 = v23;
  *(void *)((char *)a2 + v23) = *(void *)(a1 + 104);
  uint64_t v24 = *a2 + 8;
  *a2 = v24;
  strcpy((char *)a2 + v24, "ul");
  uint64_t v25 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v25 - (*a2 + 3));
  *a2 = v25;
  *(void *)((char *)a2 + v25) = *(void *)(a1 + 8);
  unint64_t v26 = *a2 + 8;
  *a2 = v26;
  if (a4)
  {
    int v27 = 8 * *a4 + 8;
    memcpy((char *)a2 + v26, a4, v27);
    uint64_t v28 = v27 + *a2;
    unint64_t v26 = (v28 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v28, v26 - v28);
    *a2 = v26;
  }
  if (a5)
  {
    if (v26 > a3)
    {
      int v29 = *a5;
      long long v33 = 0u;
      long long v34 = 0u;
      int v30 = v29;
      int v31 = 500;
      int v32 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v30);
    }
  }
}

void DYTraceEncode_MPSExternalCNNUnary_maxBatchSize(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFE80600000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 27765;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MPSExternalCNNBinary_encodeToCommandBuffer_computeCommandEncoder_options_pluginOptions_primaryTexture_primaryInfo_secondaryTexture_secondaryInfo_destinationTexture_destinationInfo(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v26 = 0u;
    long long v27 = 0u;
    int v23 = v10;
    int v24 = 500;
    uint64_t v25 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v23);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFE81300000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CttulultUtUtU");
  *((_WORD *)a2 + 25) = 0;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)a1;
  *a2 = 60;
  *(void *)(a2 + 15) = *(void *)(a1 + 16);
  *a2 = 68;
  *(void *)(a2 + 17) = *(void *)(a1 + 24);
  *a2 = 76;
  *(void *)(a2 + 19) = *(void *)(a1 + 32);
  *a2 = 84;
  *(void *)(a2 + 21) = *(void *)(a1 + 40);
  *a2 = 92;
  *(void *)(a2 + 23) = *(void *)(a1 + 48);
  *a2 = 100;
  AppendString(*(const char **)(a1 + 56), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 64);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 72), (int *)a2);
  uint64_t v14 = *a2;
  uint64_t v15 = (v14 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v14, v15 - v14);
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 80);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 88), (int *)a2);
  uint64_t v16 = *a2;
  uint64_t v17 = (v16 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v16, v17 - v16);
  *a2 = v17;
  strcpy((char *)a2 + v17, "ul");
  uint64_t v18 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v18 - (*a2 + 3));
  *a2 = v18;
  *(void *)((char *)a2 + v18) = *(void *)(a1 + 8);
  unint64_t v19 = *a2 + 8;
  *a2 = v19;
  if (a4)
  {
    int v20 = 8 * *a4 + 8;
    memcpy((char *)a2 + v19, a4, v20);
    uint64_t v21 = v20 + *a2;
    unint64_t v19 = (v21 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v21, v19 - v21);
    *a2 = v19;
  }
  if (a5)
  {
    if (v19 > a3)
    {
      int v22 = *a5;
      long long v26 = 0u;
      long long v27 = 0u;
      int v23 = v22;
      int v24 = 500;
      uint64_t v25 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v23);
    }
  }
}

void DYTraceEncode_MPSExternalCNNBinary_encodeBatchToCommandBuffer_computeCommandEncoder_options_pluginOptions_primaryTextures_primaryInfo_secondaryTextures_secondaryInfo_destinationTextures_destinationInfo_predicationBuffer_predicationOffset(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v35 = 0u;
    long long v36 = 0u;
    int v32 = v10;
    int v33 = 500;
    long long v34 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v32);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFE81A00000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  int v12 = snprintf((char *)a2 + 36, a3 - 36, "Cttulul@%llutU@%llutU@%llutUtul", *(void *)(a1 + 56), *(void *)(a1 + 80), *(void *)(a1 + 104))+ *a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((char *)a2 + (v12 + 1), v13 - (v12 + 1));
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)a1;
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 16);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 24);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 32);
  unsigned int v17 = *a2 + 8;
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 40);
  uint64_t v18 = *a2 + 8;
  *a2 = v18;
  memcpy((char *)a2 + v18, *(const void **)(a1 + 48), 8 * *(void *)(a1 + 56));
  *a2 += 8 * *(_DWORD *)(a1 + 56);
  AppendString(*(const char **)(a1 + 64), (int *)a2);
  uint64_t v19 = *a2;
  uint64_t v20 = (v19 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v19, v20 - v19);
  *a2 = v20;
  memcpy((char *)a2 + v20, *(const void **)(a1 + 72), 8 * *(void *)(a1 + 80));
  *a2 += 8 * *(_DWORD *)(a1 + 80);
  AppendString(*(const char **)(a1 + 88), (int *)a2);
  uint64_t v21 = *a2;
  uint64_t v22 = (v21 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v21, v22 - v21);
  *a2 = v22;
  memcpy((char *)a2 + v22, *(const void **)(a1 + 96), 8 * *(void *)(a1 + 104));
  *a2 += 8 * *(_DWORD *)(a1 + 104);
  AppendString(*(const char **)(a1 + 112), (int *)a2);
  uint64_t v23 = *a2;
  uint64_t v24 = (v23 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v23, v24 - v23);
  *a2 = v24;
  *(void *)((char *)a2 + v24) = *(void *)(a1 + 120);
  unsigned int v25 = *a2 + 8;
  *a2 = v25;
  *(void *)((char *)a2 + v25) = *(void *)(a1 + 128);
  uint64_t v26 = *a2 + 8;
  *a2 = v26;
  strcpy((char *)a2 + v26, "ul");
  uint64_t v27 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v27 - (*a2 + 3));
  *a2 = v27;
  *(void *)((char *)a2 + v27) = *(void *)(a1 + 8);
  unint64_t v28 = *a2 + 8;
  *a2 = v28;
  if (a4)
  {
    int v29 = 8 * *a4 + 8;
    memcpy((char *)a2 + v28, a4, v29);
    uint64_t v30 = v29 + *a2;
    unint64_t v28 = (v30 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v30, v28 - v30);
    *a2 = v28;
  }
  if (a5)
  {
    if (v28 > a3)
    {
      int v31 = *a5;
      long long v35 = 0u;
      long long v36 = 0u;
      int v32 = v31;
      int v33 = 500;
      long long v34 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v32);
    }
  }
}

void DYTraceEncode_MPSExternalCNNBinary_maxBatchSize(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v19 = 0u;
    long long v20 = 0u;
    int v16 = v10;
    int v17 = 500;
    uint64_t v18 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v16);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(_DWORD *)(a2 + 36) = 67;
  *(void *)a2 = 0xFFFFE81500000028;
  *(void *)(a2 + 40) = *a1;
  *(_DWORD *)(a2 + 48) = 27765;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  unint64_t v12 = 60;
  *(_DWORD *)a2 = 60;
  if (__src)
  {
    int v13 = 8 * *__src;
    memcpy((void *)(a2 + 60), __src, v13 + 8);
    uint64_t v14 = (v13 + 68);
    unint64_t v12 = (v13 + 71) & 0xFFFFFFFC;
    bzero((void *)(a2 + v14), v12 - v14);
    *(_DWORD *)a2 = v12;
  }
  if (v12 > a3)
  {
    if (a5)
    {
      int v15 = *a5;
      long long v19 = 0u;
      long long v20 = 0u;
      int v16 = v15;
      int v17 = 500;
      uint64_t v18 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v16);
    }
  }
}

void DYTraceEncode_MPSExternalCNNConvolution_reloadWeightsAndBiases(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFE81800000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MPSExternalCNNConvolution_reloadWeightsAndBiasesWithCommandBuffer_encoder_weights_biases_predicationBuffer_predicationOffset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFE80800000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctttttul");
  *(_WORD *)(a2 + 45) = 0;
  *(unsigned char *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = a1[5];
  *(_DWORD *)a2 = 96;
  *(void *)(a2 + 96) = a1[6];
  unint64_t v11 = 104;
  *(_DWORD *)a2 = 104;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 104), __src, v12 + 8);
    uint64_t v13 = (v12 + 112);
    unint64_t v11 = (v12 + 115) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MPSExternalCNNConvolution_exportWeightsAndBiasesWithCommandBuffer_encoder_weights_biases_predicationBuffer_predicationOffset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFE82000000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctttttul");
  *(_WORD *)(a2 + 45) = 0;
  *(unsigned char *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = a1[5];
  *(_DWORD *)a2 = 96;
  *(void *)(a2 + 96) = a1[6];
  unint64_t v11 = 104;
  *(_DWORD *)a2 = 104;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 104), __src, v12 + 8);
    uint64_t v13 = (v12 + 112);
    unint64_t v11 = (v12 + 115) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MPSExternalCNNConvolution_reloadWeightsAndBiasesWithCommandBuffer_encoder_weights_weightsDataType_biases_predicationBuffer_predicationOffset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFE82400000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctttulttul");
  *(unsigned char *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = a1[5];
  *(_DWORD *)a2 = 96;
  *(void *)(a2 + 96) = a1[6];
  *(_DWORD *)a2 = 104;
  *(void *)(a2 + 104) = a1[7];
  unint64_t v11 = 112;
  *(_DWORD *)a2 = 112;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 112), __src, v12 + 8);
    uint64_t v13 = (v12 + 120);
    unint64_t v11 = (v12 + 123) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MPSExternalCNNConvolution_exportWeightsAndBiasesWithCommandBuffer_encoder_weights_weightsDataType_biases_predicationBuffer_predicationOffset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFE82600000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  strcpy((char *)(a2 + 36), "Ctttulttul");
  *(unsigned char *)(a2 + 47) = 0;
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = a1[5];
  *(_DWORD *)a2 = 96;
  *(void *)(a2 + 96) = a1[6];
  *(_DWORD *)a2 = 104;
  *(void *)(a2 + 104) = a1[7];
  unint64_t v11 = 112;
  *(_DWORD *)a2 = 112;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 112), __src, v12 + 8);
    uint64_t v13 = (v12 + 120);
    unint64_t v11 = (v12 + 123) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MPSExternalCNNConvolutionGradient_reloadWeights(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v10;
    int v18 = 500;
    long long v19 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  a2[8] = 8 * (a4 != 0);
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFE81100000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 8), (int *)a2);
  uint64_t v11 = *a2;
  unint64_t v12 = (v11 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v11, v12 - v11);
  *a2 = v12;
  if (a4)
  {
    int v13 = 8 * *a4 + 8;
    memcpy((char *)a2 + v12, a4, v13);
    uint64_t v14 = v13 + *a2;
    unint64_t v12 = (v14 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v14, v12 - v14);
    *a2 = v12;
  }
  if (v12 > a3 && a5 != 0)
  {
    int v16 = *a5;
    long long v20 = 0u;
    long long v21 = 0u;
    int v17 = v16;
    int v18 = 500;
    long long v19 = "bytes->length <= length";
    GTError_addError(a5, (uint64_t)&v17);
  }
}

void DYTraceEncode_MPSExternalCNNConvolutionGradient_reloadWeightsWithCommandBuffer_encoder_weights_predicationBuffer_predicationOffset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(void *)(a2 + 36) = 0x6C757474747443;
  *(void *)a2 = 0xFFFFE81F0000002CLL;
  *(void *)(a2 + 44) = *a1;
  *(_DWORD *)a2 = 52;
  *(void *)(a2 + 52) = a1[1];
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = a1[2];
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = a1[3];
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = a1[4];
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = a1[5];
  unint64_t v11 = 92;
  *(_DWORD *)a2 = 92;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 92), __src, v12 + 8);
    uint64_t v13 = (v12 + 100);
    unint64_t v11 = (v12 + 103) & 0xFFFFFFFC;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MPSExternalCNNConvolutionGradient_reloadWeightsWithCommandBuffer_encoder_weights_weightsDataType_predicationBuffer_predicationOffset(void *a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v18 = 0u;
    long long v19 = 0u;
    int v15 = v10;
    int v16 = 500;
    int v17 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v15);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFE82500000024;
  *(_DWORD *)(a2 + 32) = 8 * (__src != 0);
  *(_DWORD *)(a2 + 44) = 108;
  *(void *)(a2 + 36) = *(void *)"Ctttultul";
  *(_DWORD *)a2 = 48;
  *(void *)(a2 + 48) = *a1;
  *(_DWORD *)a2 = 56;
  *(void *)(a2 + 56) = a1[1];
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = a1[2];
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = a1[3];
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = a1[4];
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = a1[5];
  *(_DWORD *)a2 = 96;
  *(void *)(a2 + 96) = a1[6];
  unint64_t v11 = 104;
  *(_DWORD *)a2 = 104;
  if (__src)
  {
    int v12 = 8 * *__src;
    memcpy((void *)(a2 + 104), __src, v12 + 8);
    uint64_t v13 = (v12 + 112);
    unint64_t v11 = (v12 + 115) & 0xFFFFFFF8;
    bzero((void *)(a2 + v13), v11 - v13);
    *(_DWORD *)a2 = v11;
  }
  if (v11 > a3)
  {
    if (a5)
    {
      int v14 = *a5;
      long long v18 = 0u;
      long long v19 = 0u;
      int v15 = v14;
      int v16 = 500;
      int v17 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v15);
    }
  }
}

void DYTraceEncode_MPSExternalCNNConvolutionGradient_encodeBatchToCommandBuffer_computeCommandEncoder_options_pluginOptions_primaryTextures_primaryInfo_secondaryTextures_secondaryInfo_weightsGradient_biasesGradient_accumulate_predicationBuffer_predicationOffset(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v36 = 0u;
    long long v37 = 0u;
    int v33 = v10;
    int v34 = 500;
    long long v35 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v33);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFE81E00000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  int v12 = snprintf((char *)a2 + 36, a3 - 36, "Cttulul@%llutU@%llutUttitul", *(void *)(a1 + 56), *(void *)(a1 + 80))
      + *a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((char *)a2 + (v12 + 1), v13 - (v12 + 1));
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)a1;
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 16);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 24);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 32);
  unsigned int v17 = *a2 + 8;
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 40);
  uint64_t v18 = *a2 + 8;
  *a2 = v18;
  memcpy((char *)a2 + v18, *(const void **)(a1 + 48), 8 * *(void *)(a1 + 56));
  *a2 += 8 * *(_DWORD *)(a1 + 56);
  AppendString(*(const char **)(a1 + 64), (int *)a2);
  uint64_t v19 = *a2;
  uint64_t v20 = (v19 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v19, v20 - v19);
  *a2 = v20;
  memcpy((char *)a2 + v20, *(const void **)(a1 + 72), 8 * *(void *)(a1 + 80));
  *a2 += 8 * *(_DWORD *)(a1 + 80);
  AppendString(*(const char **)(a1 + 88), (int *)a2);
  uint64_t v21 = *a2;
  uint64_t v22 = (v21 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v21, v22 - v21);
  *a2 = v22;
  *(void *)((char *)a2 + v22) = *(void *)(a1 + 96);
  unsigned int v23 = *a2 + 8;
  *a2 = v23;
  *(void *)((char *)a2 + v23) = *(void *)(a1 + 104);
  unsigned int v24 = *a2 + 8;
  *a2 = v24;
  *(unsigned int *)((char *)a2 + v24) = *(_DWORD *)(a1 + 112);
  unsigned int v25 = *a2 + 4;
  *a2 = v25;
  *(void *)((char *)a2 + v25) = *(void *)(a1 + 120);
  unsigned int v26 = *a2 + 8;
  *a2 = v26;
  *(void *)((char *)a2 + v26) = *(void *)(a1 + 128);
  uint64_t v27 = *a2 + 8;
  *a2 = v27;
  strcpy((char *)a2 + v27, "ul");
  uint64_t v28 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v28 - (*a2 + 3));
  *a2 = v28;
  *(void *)((char *)a2 + v28) = *(void *)(a1 + 8);
  unint64_t v29 = *a2 + 8;
  *a2 = v29;
  if (a4)
  {
    int v30 = 8 * *a4 + 8;
    memcpy((char *)a2 + v29, a4, v30);
    uint64_t v31 = v30 + *a2;
    unint64_t v29 = (v31 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v31, v29 - v31);
    *a2 = v29;
  }
  if (a5)
  {
    if (v29 > a3)
    {
      int v32 = *a5;
      long long v36 = 0u;
      long long v37 = 0u;
      int v33 = v32;
      int v34 = 500;
      long long v35 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v33);
    }
  }
}

void DYTraceEncode_MPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_A_aInfo_B_bInfo_C_cInfo(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    uint64_t v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFE80E00000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Cttulult@4ult@4ult@4ul");
  *(unsigned char *)(a2 + 59) = 0;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)a1;
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = *(void *)(a1 + 32);
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = *(void *)(a1 + 40);
  *(_DWORD *)a2 = 100;
  *(void *)(a2 + 100) = *(void *)(a1 + 48);
  *(_DWORD *)a2 = 108;
  long long v12 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 108) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 124) = v12;
  *(_DWORD *)a2 = 140;
  *(void *)(a2 + 140) = *(void *)(a1 + 88);
  *(_DWORD *)a2 = 148;
  long long v13 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 148) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 164) = v13;
  *(_DWORD *)a2 = 180;
  *(void *)(a2 + 180) = *(void *)(a1 + 128);
  *(_DWORD *)a2 = 188;
  long long v14 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 188) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(a2 + 204) = v14;
  *(_DWORD *)(a2 + 220) = 27765;
  *(_DWORD *)a2 = 224;
  *(void *)(a2 + 224) = *(void *)(a1 + 8);
  unint64_t v15 = 232;
  *(_DWORD *)a2 = 232;
  if (__src)
  {
    int v16 = 8 * *__src;
    memcpy((void *)(a2 + 232), __src, v16 + 8);
    uint64_t v17 = (v16 + 240);
    unint64_t v15 = (v16 + 243) & 0xFFFFFFF8;
    bzero((void *)(a2 + v17), v15 - v17);
    *(_DWORD *)a2 = v15;
  }
  if (v15 > a3)
  {
    if (a5)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      uint64_t v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_resultRows_resultColumns_interiorColumns_alpha_beta_A_aInfo_B_bInfo_C_cInfo(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    uint64_t v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)a2 = 0xFFFFE80C00000024;
  strcpy((char *)(a2 + 36), "Cttulululululddt@4ult@4ult@4ul");
  *(unsigned char *)(a2 + 67) = 0;
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)a1;
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = *(void *)(a1 + 32);
  *(_DWORD *)a2 = 100;
  *(void *)(a2 + 100) = *(void *)(a1 + 40);
  *(_DWORD *)a2 = 108;
  *(void *)(a2 + 108) = *(void *)(a1 + 48);
  *(_DWORD *)a2 = 116;
  *(void *)(a2 + 116) = *(void *)(a1 + 56);
  *(_DWORD *)a2 = 124;
  *(void *)(a2 + 124) = *(void *)(a1 + 64);
  *(_DWORD *)a2 = 132;
  *(void *)(a2 + 132) = *(void *)(a1 + 72);
  *(_DWORD *)a2 = 140;
  *(void *)(a2 + 140) = *(void *)(a1 + 80);
  *(_DWORD *)a2 = 148;
  *(void *)(a2 + 148) = *(void *)(a1 + 88);
  *(_DWORD *)a2 = 156;
  long long v12 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 156) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 172) = v12;
  *(_DWORD *)a2 = 188;
  *(void *)(a2 + 188) = *(void *)(a1 + 128);
  *(_DWORD *)a2 = 196;
  long long v13 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 196) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(a2 + 212) = v13;
  *(_DWORD *)a2 = 228;
  *(void *)(a2 + 228) = *(void *)(a1 + 168);
  *(_DWORD *)a2 = 236;
  long long v14 = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(a2 + 236) = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a2 + 252) = v14;
  *(_DWORD *)(a2 + 268) = 27765;
  *(_DWORD *)a2 = 272;
  *(void *)(a2 + 272) = *(void *)(a1 + 8);
  unint64_t v15 = 280;
  *(_DWORD *)a2 = 280;
  if (__src)
  {
    int v16 = 8 * *__src;
    memcpy((void *)(a2 + 280), __src, v16 + 8);
    uint64_t v17 = (v16 + 288);
    unint64_t v15 = (v16 + 291) & 0xFFFFFFF8;
    bzero((void *)(a2 + v17), v15 - v17);
    *(_DWORD *)a2 = v15;
  }
  if (v15 > a3)
  {
    if (a5)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      uint64_t v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_resultRowsAndResultColumnsAndInteriorColumns_alphaAndBeta_A_aInfo_B_bInfo_C_cInfo_predicationBuffer_predicationOffset(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFE82700000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Cttulul@3ul@2dt@4ult@4ult@4ultul");
  *(_WORD *)(a2 + 69) = 0;
  *(unsigned char *)(a2 + 71) = 0;
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = *(void *)a1;
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 96;
  *(void *)(a2 + 96) = *(void *)(a1 + 32);
  *(_DWORD *)a2 = 104;
  *(void *)(a2 + 104) = *(void *)(a1 + 40);
  *(_DWORD *)a2 = 112;
  uint64_t v12 = *(void *)(a1 + 64);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a1 + 48);
  *(void *)(a2 + 128) = v12;
  *(_DWORD *)a2 = 136;
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 72);
  *(_DWORD *)a2 = 152;
  *(void *)(a2 + 152) = *(void *)(a1 + 88);
  *(_DWORD *)a2 = 160;
  long long v13 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 176) = v13;
  *(_DWORD *)a2 = 192;
  *(void *)(a2 + 192) = *(void *)(a1 + 128);
  *(_DWORD *)a2 = 200;
  long long v14 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 200) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(a2 + 216) = v14;
  *(_DWORD *)a2 = 232;
  *(void *)(a2 + 232) = *(void *)(a1 + 168);
  *(_DWORD *)a2 = 240;
  long long v15 = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(a2 + 240) = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a2 + 256) = v15;
  *(_DWORD *)a2 = 272;
  *(void *)(a2 + 272) = *(void *)(a1 + 208);
  *(_DWORD *)a2 = 280;
  *(void *)(a2 + 280) = *(void *)(a1 + 216);
  *(_DWORD *)(a2 + 288) = 27765;
  *(_DWORD *)a2 = 292;
  *(void *)(a2 + 292) = *(void *)(a1 + 8);
  unint64_t v16 = 300;
  *(_DWORD *)a2 = 300;
  if (__src)
  {
    int v17 = 8 * *__src;
    memcpy((void *)(a2 + 300), __src, v17 + 8);
    uint64_t v18 = (v17 + 308);
    unint64_t v16 = (v17 + 311) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (v16 > a3)
  {
    if (a5)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MPSExternalMatrixMultiplication_encodeToCommandBuffer_encoder_options_batchSize_resultRows_resultColumns_interiorColumns_alpha_beta_A_aInfo_B_bInfo_C_cInfo_predicationBuffer_predicationOffset_transA_transB(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v23 = 0u;
    long long v24 = 0u;
    int v20 = v10;
    int v21 = 500;
    long long v22 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v20);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFE82B00000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Cttulul@3ul@2dt@4ult@4ult@4ultulii");
  *(unsigned char *)(a2 + 71) = 0;
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = *(void *)a1;
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 96;
  *(void *)(a2 + 96) = *(void *)(a1 + 32);
  *(_DWORD *)a2 = 104;
  *(void *)(a2 + 104) = *(void *)(a1 + 40);
  *(_DWORD *)a2 = 112;
  uint64_t v12 = *(void *)(a1 + 64);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a1 + 48);
  *(void *)(a2 + 128) = v12;
  *(_DWORD *)a2 = 136;
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 72);
  *(_DWORD *)a2 = 152;
  *(void *)(a2 + 152) = *(void *)(a1 + 88);
  *(_DWORD *)a2 = 160;
  long long v13 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 176) = v13;
  *(_DWORD *)a2 = 192;
  *(void *)(a2 + 192) = *(void *)(a1 + 128);
  *(_DWORD *)a2 = 200;
  long long v14 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 200) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(a2 + 216) = v14;
  *(_DWORD *)a2 = 232;
  *(void *)(a2 + 232) = *(void *)(a1 + 168);
  *(_DWORD *)a2 = 240;
  long long v15 = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(a2 + 240) = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a2 + 256) = v15;
  *(_DWORD *)a2 = 272;
  *(void *)(a2 + 272) = *(void *)(a1 + 208);
  *(_DWORD *)a2 = 280;
  *(void *)(a2 + 280) = *(void *)(a1 + 216);
  *(_DWORD *)a2 = 288;
  *(_DWORD *)(a2 + 288) = *(_DWORD *)(a1 + 224);
  *(_DWORD *)a2 = 292;
  *(_DWORD *)(a2 + 292) = *(_DWORD *)(a1 + 228);
  *(_DWORD *)(a2 + 296) = 27765;
  *(_DWORD *)a2 = 300;
  *(void *)(a2 + 300) = *(void *)(a1 + 8);
  unint64_t v16 = 308;
  *(_DWORD *)a2 = 308;
  if (__src)
  {
    int v17 = 8 * *__src;
    memcpy((void *)(a2 + 308), __src, v17 + 8);
    uint64_t v18 = (v17 + 316);
    unint64_t v16 = (v17 + 319) & 0xFFFFFFFC;
    bzero((void *)(a2 + v18), v16 - v18);
    *(_DWORD *)a2 = v16;
  }
  if (v16 > a3)
  {
    if (a5)
    {
      int v19 = *a5;
      long long v23 = 0u;
      long long v24 = 0u;
      int v20 = v19;
      int v21 = 500;
      long long v22 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v20);
    }
  }
}

void DYTraceEncode_MPSExternalMatrixVectorMultiplication_encodeToCommandBuffer_encoder_options_batchSize_matrix_matrixStructure_vector_vectorStructure_result_resultStructure(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFE80700000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Cttulult@4ult@3ult@3ul");
  *(unsigned char *)(a2 + 59) = 0;
  *(_DWORD *)a2 = 60;
  *(void *)(a2 + 60) = *(void *)a1;
  *(_DWORD *)a2 = 68;
  *(void *)(a2 + 68) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = *(void *)(a1 + 32);
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = *(void *)(a1 + 40);
  *(_DWORD *)a2 = 100;
  *(void *)(a2 + 100) = *(void *)(a1 + 48);
  *(_DWORD *)a2 = 108;
  long long v12 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 108) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 124) = v12;
  *(_DWORD *)a2 = 140;
  *(void *)(a2 + 140) = *(void *)(a1 + 88);
  *(_DWORD *)a2 = 148;
  uint64_t v13 = *(void *)(a1 + 112);
  *(_OWORD *)(a2 + 148) = *(_OWORD *)(a1 + 96);
  *(void *)(a2 + 164) = v13;
  *(_DWORD *)a2 = 172;
  *(void *)(a2 + 172) = *(void *)(a1 + 120);
  *(_DWORD *)a2 = 180;
  uint64_t v14 = *(void *)(a1 + 144);
  *(_OWORD *)(a2 + 180) = *(_OWORD *)(a1 + 128);
  *(void *)(a2 + 196) = v14;
  *(_DWORD *)(a2 + 204) = 27765;
  *(_DWORD *)a2 = 208;
  *(void *)(a2 + 208) = *(void *)(a1 + 8);
  unint64_t v15 = 216;
  *(_DWORD *)a2 = 216;
  if (__src)
  {
    int v16 = 8 * *__src;
    memcpy((void *)(a2 + 216), __src, v16 + 8);
    uint64_t v17 = (v16 + 224);
    unint64_t v15 = (v16 + 227) & 0xFFFFFFF8;
    bzero((void *)(a2 + v17), v15 - v17);
    *(_DWORD *)a2 = v15;
  }
  if (v15 > a3)
  {
    if (a5)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MPSExternalMatrixVectorMultiplication_encodeToCommandBuffer_encoder_options_batchSize_matrix_matrixStructure_vector_vectorStructure_result_resultStructure_predicationBuffer_predicationOffset(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  *(void *)a2 = 0xFFFFE80400000024;
  strcpy((char *)(a2 + 36), "Cttulult@4ult@3ult@3ultul");
  *(_WORD *)(a2 + 62) = 0;
  *(_DWORD *)a2 = 64;
  *(void *)(a2 + 64) = *(void *)a1;
  *(_DWORD *)a2 = 72;
  *(void *)(a2 + 72) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 80;
  *(void *)(a2 + 80) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 88;
  *(void *)(a2 + 88) = *(void *)(a1 + 32);
  *(_DWORD *)a2 = 96;
  *(void *)(a2 + 96) = *(void *)(a1 + 40);
  *(_DWORD *)a2 = 104;
  *(void *)(a2 + 104) = *(void *)(a1 + 48);
  *(_DWORD *)a2 = 112;
  long long v12 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 128) = v12;
  *(_DWORD *)a2 = 144;
  *(void *)(a2 + 144) = *(void *)(a1 + 88);
  *(_DWORD *)a2 = 152;
  uint64_t v13 = *(void *)(a1 + 112);
  *(_OWORD *)(a2 + 152) = *(_OWORD *)(a1 + 96);
  *(void *)(a2 + 168) = v13;
  *(_DWORD *)a2 = 176;
  *(void *)(a2 + 176) = *(void *)(a1 + 120);
  *(_DWORD *)a2 = 184;
  uint64_t v14 = *(void *)(a1 + 144);
  *(_OWORD *)(a2 + 184) = *(_OWORD *)(a1 + 128);
  *(void *)(a2 + 200) = v14;
  *(_DWORD *)a2 = 208;
  *(void *)(a2 + 208) = *(void *)(a1 + 152);
  *(_DWORD *)a2 = 216;
  *(void *)(a2 + 216) = *(void *)(a1 + 160);
  *(_DWORD *)(a2 + 224) = 27765;
  *(_DWORD *)a2 = 228;
  *(void *)(a2 + 228) = *(void *)(a1 + 8);
  unint64_t v15 = 236;
  *(_DWORD *)a2 = 236;
  if (__src)
  {
    int v16 = 8 * *__src;
    memcpy((void *)(a2 + 236), __src, v16 + 8);
    uint64_t v17 = (v16 + 244);
    unint64_t v15 = (v16 + 247) & 0xFFFFFFFC;
    bzero((void *)(a2 + v17), v15 - v17);
    *(_DWORD *)a2 = v15;
  }
  if (v15 > a3)
  {
    if (a5)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}

void DYTraceEncode_MPSExternalMatrixFullyConnected_encodeToCommandBuffer_encoder_optionsAndBatchSize_inputMatrix_inputMatrixInfo_weightMatrix_weightMatrixInfo_biasVector_biasVectorInfo_resultMatrix_resultMatrixInfo_alpha_numberOfFeatureVectorsAndInputFeatureChannelsAndOutputFeatureChannels_neuronType_neuronParameters(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    long long v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFE82800000024;
  if (__src) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  *(_DWORD *)(a2 + 32) = v11;
  strcpy((char *)(a2 + 36), "Ctt@2ult@4ult@4ult@3ult@4uld@3uli@3f");
  *(_WORD *)(a2 + 73) = 0;
  *(unsigned char *)(a2 + 75) = 0;
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = *(void *)a1;
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 100;
  *(_OWORD *)(a2 + 100) = *(_OWORD *)(a1 + 32);
  *(_DWORD *)a2 = 116;
  *(void *)(a2 + 116) = *(void *)(a1 + 48);
  *(_DWORD *)a2 = 124;
  long long v12 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 124) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 140) = v12;
  *(_DWORD *)a2 = 156;
  *(void *)(a2 + 156) = *(void *)(a1 + 88);
  *(_DWORD *)a2 = 164;
  long long v13 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 164) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 180) = v13;
  *(_DWORD *)a2 = 196;
  *(void *)(a2 + 196) = *(void *)(a1 + 128);
  *(_DWORD *)a2 = 204;
  uint64_t v14 = *(void *)(a1 + 152);
  *(_OWORD *)(a2 + 204) = *(_OWORD *)(a1 + 136);
  *(void *)(a2 + 220) = v14;
  *(_DWORD *)a2 = 228;
  *(void *)(a2 + 228) = *(void *)(a1 + 160);
  *(_DWORD *)a2 = 236;
  long long v15 = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(a2 + 236) = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(a2 + 252) = v15;
  *(_DWORD *)a2 = 268;
  *(void *)(a2 + 268) = *(void *)(a1 + 200);
  *(_DWORD *)a2 = 276;
  uint64_t v16 = *(void *)(a1 + 224);
  *(_OWORD *)(a2 + 276) = *(_OWORD *)(a1 + 208);
  *(void *)(a2 + 292) = v16;
  *(_DWORD *)a2 = 300;
  *(_DWORD *)(a2 + 300) = *(_DWORD *)(a1 + 232);
  *(_DWORD *)a2 = 304;
  LODWORD(v14) = *(_DWORD *)(a1 + 244);
  *(void *)(a2 + 304) = *(void *)(a1 + 236);
  *(_DWORD *)(a2 + 312) = v14;
  *(_DWORD *)(a2 + 316) = 27765;
  *(_DWORD *)a2 = 320;
  *(void *)(a2 + 320) = *(void *)(a1 + 8);
  unint64_t v17 = 328;
  *(_DWORD *)a2 = 328;
  if (__src)
  {
    int v18 = 8 * *__src;
    memcpy((void *)(a2 + 328), __src, v18 + 8);
    uint64_t v19 = (v18 + 336);
    unint64_t v17 = (v18 + 339) & 0xFFFFFFF8;
    bzero((void *)(a2 + v19), v17 - v19);
    *(_DWORD *)a2 = v17;
  }
  if (v17 > a3)
  {
    if (a5)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      long long v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MPSExternalMatrixFullyConnected_encodeToCommandBuffer_encoder_optionsAndBatchSize_inputMatrix_inputMatrixInfo_weightMatrix_weightMatrixInfo_biasVector_biasVectorInfo_resultMatrix_resultMatrixInfo_alpha_numberOfFeatureVectorsAndInputFeatureChannelsAndOutputFeatureChannelsAndNeuronTypeAndPredicationOffset_neuronParameters_predicationBuffer(uint64_t a1, uint64_t a2, unint64_t a3, _DWORD *__src, int *a5)
{
  int v10 = (void *)(a2 + 268);
  if (a3 <= 0x23 && a5)
  {
    int v11 = *a5;
    long long v27 = 0u;
    long long v28 = 0u;
    int v24 = v11;
    int v25 = 500;
    unsigned int v26 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v24);
  }
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0xFFFFE82900000024;
  if (__src) {
    int v12 = 9;
  }
  else {
    int v12 = 1;
  }
  *(_DWORD *)(a2 + 32) = v12;
  strcpy((char *)(a2 + 36), "Ctt@2ult@4ult@4ult@3ult@4uld@5ul@3ft");
  *(_WORD *)(a2 + 73) = 0;
  *(unsigned char *)(a2 + 75) = 0;
  *(_DWORD *)a2 = 76;
  *(void *)(a2 + 76) = *(void *)a1;
  *(_DWORD *)a2 = 84;
  *(void *)(a2 + 84) = *(void *)(a1 + 16);
  *(_DWORD *)a2 = 92;
  *(void *)(a2 + 92) = *(void *)(a1 + 24);
  *(_DWORD *)a2 = 100;
  *(_OWORD *)(a2 + 100) = *(_OWORD *)(a1 + 32);
  *(_DWORD *)a2 = 116;
  *(void *)(a2 + 116) = *(void *)(a1 + 48);
  *(_DWORD *)a2 = 124;
  long long v13 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 124) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 140) = v13;
  *(_DWORD *)a2 = 156;
  *(void *)(a2 + 156) = *(void *)(a1 + 88);
  *(_DWORD *)a2 = 164;
  long long v14 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 164) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 180) = v14;
  *(_DWORD *)a2 = 196;
  *(void *)(a2 + 196) = *(void *)(a1 + 128);
  *(_DWORD *)a2 = 204;
  uint64_t v15 = *(void *)(a1 + 152);
  *(_OWORD *)(a2 + 204) = *(_OWORD *)(a1 + 136);
  *(void *)(a2 + 220) = v15;
  *(_DWORD *)a2 = 228;
  *(void *)(a2 + 228) = *(void *)(a1 + 160);
  *(_DWORD *)a2 = 236;
  long long v16 = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(a2 + 236) = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(a2 + 252) = v16;
  *(_DWORD *)a2 = 268;
  *int v10 = *(void *)(a1 + 200);
  *(_DWORD *)a2 = 276;
  uint64_t v17 = *(void *)(a1 + 240);
  long long v18 = *(_OWORD *)(a1 + 224);
  *(_OWORD *)(a2 + 276) = *(_OWORD *)(a1 + 208);
  *(_OWORD *)(a2 + 292) = v18;
  *(void *)(a2 + 308) = v17;
  *(_DWORD *)a2 = 316;
  uint64_t v19 = *(void *)(a1 + 248);
  *(_DWORD *)(a2 + 324) = *(_DWORD *)(a1 + 256);
  *(void *)(a2 + 316) = v19;
  *(_DWORD *)a2 = 328;
  *(void *)(a2 + 328) = *(void *)(a1 + 264);
  *(_DWORD *)(a2 + 336) = 27765;
  *(_DWORD *)a2 = 340;
  v10[9] = *(void *)(a1 + 8);
  unint64_t v20 = 348;
  *(_DWORD *)a2 = 348;
  if (__src)
  {
    int v21 = 8 * *__src;
    memcpy((void *)(a2 + 348), __src, v21 + 8);
    uint64_t v22 = (v21 + 356);
    unint64_t v20 = (v21 + 359) & 0xFFFFFFFC;
    bzero((void *)(a2 + v22), v20 - v22);
    *(_DWORD *)a2 = v20;
  }
  if (v20 > a3)
  {
    if (a5)
    {
      int v23 = *a5;
      long long v27 = 0u;
      long long v28 = 0u;
      int v24 = v23;
      int v25 = 500;
      unsigned int v26 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v24);
    }
  }
}

void DYTraceEncode_MPSExternalCNNPoolingAverage_encodeToCommandBuffer_computeCommandEncoder_options_sourceTexture_sourceInfo_destinationTexture_destinationInfo_zeroPadSizeX_zeroPadSizeY(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v26 = 0u;
    long long v27 = 0u;
    int v23 = v10;
    int v24 = 500;
    int v25 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v23);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFE81700000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CttultUtUulul");
  *((_WORD *)a2 + 25) = 0;
  *a2 = 52;
  *(void *)(a2 + 13) = *(void *)a1;
  *a2 = 60;
  *(void *)(a2 + 15) = *(void *)(a1 + 16);
  *a2 = 68;
  *(void *)(a2 + 17) = *(void *)(a1 + 24);
  *a2 = 76;
  *(void *)(a2 + 19) = *(void *)(a1 + 32);
  *a2 = 84;
  *(void *)(a2 + 21) = *(void *)(a1 + 40);
  *a2 = 92;
  AppendString(*(const char **)(a1 + 48), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 56);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 64), (int *)a2);
  uint64_t v14 = *a2;
  uint64_t v15 = (v14 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v14, v15 - v14);
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 72);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 80);
  uint64_t v17 = *a2 + 8;
  *a2 = v17;
  strcpy((char *)a2 + v17, "ul");
  uint64_t v18 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v18 - (*a2 + 3));
  *a2 = v18;
  *(void *)((char *)a2 + v18) = *(void *)(a1 + 8);
  unint64_t v19 = *a2 + 8;
  *a2 = v19;
  if (a4)
  {
    int v20 = 8 * *a4 + 8;
    memcpy((char *)a2 + v19, a4, v20);
    uint64_t v21 = v20 + *a2;
    unint64_t v19 = (v21 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v21, v19 - v21);
    *a2 = v19;
  }
  if (a5)
  {
    if (v19 > a3)
    {
      int v22 = *a5;
      long long v26 = 0u;
      long long v27 = 0u;
      int v23 = v22;
      int v24 = 500;
      int v25 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v23);
    }
  }
}

void DYTraceEncode_MPSExternalCNNPoolingAverage_encodeToCommandBuffer_computeCommandEncoder_options_sourceTexture_sourceInfo_destinationTexture_destinationInfo(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v24 = 0u;
    long long v25 = 0u;
    int v21 = v10;
    int v22 = 500;
    int v23 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v21);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFE81200000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[11] = 85;
  *(void *)(a2 + 9) = *(void *)"CttultUtU";
  *a2 = 48;
  *((void *)a2 + 6) = *(void *)a1;
  *a2 = 56;
  *((void *)a2 + 7) = *(void *)(a1 + 16);
  *a2 = 64;
  *((void *)a2 + 8) = *(void *)(a1 + 24);
  *a2 = 72;
  *((void *)a2 + 9) = *(void *)(a1 + 32);
  *a2 = 80;
  *((void *)a2 + 10) = *(void *)(a1 + 40);
  *a2 = 88;
  AppendString(*(const char **)(a1 + 48), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 56);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 64), (int *)a2);
  uint64_t v14 = *a2;
  uint64_t v15 = (v14 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v14, v15 - v14);
  *a2 = v15;
  strcpy((char *)a2 + v15, "ul");
  uint64_t v16 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v16 - (*a2 + 3));
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 8);
  unint64_t v17 = *a2 + 8;
  *a2 = v17;
  if (a4)
  {
    int v18 = 8 * *a4 + 8;
    memcpy((char *)a2 + v17, a4, v18);
    uint64_t v19 = v18 + *a2;
    unint64_t v17 = (v19 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v19, v17 - v19);
    *a2 = v17;
  }
  if (a5)
  {
    if (v17 > a3)
    {
      int v20 = *a5;
      long long v24 = 0u;
      long long v25 = 0u;
      int v21 = v20;
      int v22 = 500;
      int v23 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v21);
    }
  }
}

void DYTraceEncode_MPSExternalCNNPoolingAverage_encodeBatchToCommandBuffer_computeCommandEncoder_options_sourceTextures_sourceInfo_destinationTextures_destinationInfo_zeroPadSizeX_zeroPadSizeY_predicationBuffer_predicationOffset(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v34 = 0u;
    long long v35 = 0u;
    int v31 = v10;
    int v32 = 500;
    int v33 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v31);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFE80200000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  int v12 = snprintf((char *)a2 + 36, a3 - 36, "Cttul@%llutU@%llutUulultul", *(void *)(a1 + 48), *(void *)(a1 + 72))
      + *a2;
  uint64_t v13 = (v12 + 4) & 0xFFFFFFFC;
  bzero((char *)a2 + (v12 + 1), v13 - (v12 + 1));
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)a1;
  unsigned int v14 = *a2 + 8;
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 16);
  unsigned int v15 = *a2 + 8;
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 24);
  unsigned int v16 = *a2 + 8;
  *a2 = v16;
  *(void *)((char *)a2 + v16) = *(void *)(a1 + 32);
  uint64_t v17 = *a2 + 8;
  *a2 = v17;
  memcpy((char *)a2 + v17, *(const void **)(a1 + 40), 8 * *(void *)(a1 + 48));
  *a2 += 8 * *(_DWORD *)(a1 + 48);
  AppendString(*(const char **)(a1 + 56), (int *)a2);
  uint64_t v18 = *a2;
  uint64_t v19 = (v18 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v18, v19 - v18);
  *a2 = v19;
  memcpy((char *)a2 + v19, *(const void **)(a1 + 64), 8 * *(void *)(a1 + 72));
  *a2 += 8 * *(_DWORD *)(a1 + 72);
  AppendString(*(const char **)(a1 + 80), (int *)a2);
  uint64_t v20 = *a2;
  uint64_t v21 = (v20 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v20, v21 - v20);
  *a2 = v21;
  *(void *)((char *)a2 + v21) = *(void *)(a1 + 88);
  unsigned int v22 = *a2 + 8;
  *a2 = v22;
  *(void *)((char *)a2 + v22) = *(void *)(a1 + 96);
  unsigned int v23 = *a2 + 8;
  *a2 = v23;
  *(void *)((char *)a2 + v23) = *(void *)(a1 + 104);
  unsigned int v24 = *a2 + 8;
  *a2 = v24;
  *(void *)((char *)a2 + v24) = *(void *)(a1 + 112);
  uint64_t v25 = *a2 + 8;
  *a2 = v25;
  strcpy((char *)a2 + v25, "ul");
  uint64_t v26 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v26 - (*a2 + 3));
  *a2 = v26;
  *(void *)((char *)a2 + v26) = *(void *)(a1 + 8);
  unint64_t v27 = *a2 + 8;
  *a2 = v27;
  if (a4)
  {
    int v28 = 8 * *a4 + 8;
    memcpy((char *)a2 + v27, a4, v28);
    uint64_t v29 = v28 + *a2;
    unint64_t v27 = (v29 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v29, v27 - v29);
    *a2 = v27;
  }
  if (a5)
  {
    if (v27 > a3)
    {
      int v30 = *a5;
      long long v34 = 0u;
      long long v35 = 0u;
      int v31 = v30;
      int v32 = 500;
      int v33 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v31);
    }
  }
}

void DYTraceEncode_MPSExternalNDArrayBinary_encodeToCommandBuffer_encoder_options_pluginOptions_primaryBuffer_primaryInfo_secondaryBuffer_secondaryInfo_destinationBuffer_destinationInfo_predicationBuffer_predicationOffset(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v28 = 0u;
    long long v29 = 0u;
    int v25 = v10;
    int v26 = 500;
    unint64_t v27 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v25);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)a2 = 0xFFFFE82F00000024;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  strcpy((char *)a2 + 36, "CttulultUtUtUtul");
  *(_WORD *)((char *)a2 + 53) = 0;
  *((unsigned char *)a2 + 55) = 0;
  *a2 = 56;
  *((void *)a2 + 7) = *(void *)a1;
  *a2 = 64;
  *((void *)a2 + 8) = *(void *)(a1 + 16);
  *a2 = 72;
  *((void *)a2 + 9) = *(void *)(a1 + 24);
  *a2 = 80;
  *((void *)a2 + 10) = *(void *)(a1 + 32);
  *a2 = 88;
  *((void *)a2 + 11) = *(void *)(a1 + 40);
  *a2 = 96;
  *((void *)a2 + 12) = *(void *)(a1 + 48);
  *a2 = 104;
  AppendString(*(const char **)(a1 + 56), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 64);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 72), (int *)a2);
  uint64_t v14 = *a2;
  uint64_t v15 = (v14 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v14, v15 - v14);
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 80);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 88), (int *)a2);
  uint64_t v16 = *a2;
  uint64_t v17 = (v16 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v16, v17 - v16);
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 96);
  unsigned int v18 = *a2 + 8;
  *a2 = v18;
  *(void *)((char *)a2 + v18) = *(void *)(a1 + 104);
  uint64_t v19 = *a2 + 8;
  *a2 = v19;
  strcpy((char *)a2 + v19, "ul");
  uint64_t v20 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v20 - (*a2 + 3));
  *a2 = v20;
  *(void *)((char *)a2 + v20) = *(void *)(a1 + 8);
  unint64_t v21 = *a2 + 8;
  *a2 = v21;
  if (a4)
  {
    int v22 = 8 * *a4 + 8;
    memcpy((char *)a2 + v21, a4, v22);
    uint64_t v23 = v22 + *a2;
    unint64_t v21 = (v23 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v23, v21 - v23);
    *a2 = v21;
  }
  if (a5)
  {
    if (v21 > a3)
    {
      int v24 = *a5;
      long long v28 = 0u;
      long long v29 = 0u;
      int v25 = v24;
      int v26 = 500;
      unint64_t v27 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v25);
    }
  }
}

void DYTraceEncode_MPSExternalNDArrayBinaryGradient_encodePrimaryGradientToCommandBuffer_encoder_options_pluginOptions_primaryBuffer_primaryInfo_secondaryBuffer_secondaryInfo_gradientBuffer_gradientInfo_destination_destinationInfo_accumulate_predicationBuffer_predicationOffset(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v31 = 0u;
    long long v32 = 0u;
    int v28 = v10;
    int v29 = 500;
    int v30 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v28);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)a2 = 0xFFFFE82D00000024;
  strcpy((char *)a2 + 36, "CttulultUtUtUtUitul");
  *a2 = 56;
  *((void *)a2 + 7) = *(void *)a1;
  *a2 = 64;
  *((void *)a2 + 8) = *(void *)(a1 + 16);
  *a2 = 72;
  *((void *)a2 + 9) = *(void *)(a1 + 24);
  *a2 = 80;
  *((void *)a2 + 10) = *(void *)(a1 + 32);
  *a2 = 88;
  *((void *)a2 + 11) = *(void *)(a1 + 40);
  *a2 = 96;
  *((void *)a2 + 12) = *(void *)(a1 + 48);
  *a2 = 104;
  AppendString(*(const char **)(a1 + 56), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 64);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 72), (int *)a2);
  uint64_t v14 = *a2;
  uint64_t v15 = (v14 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v14, v15 - v14);
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 80);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 88), (int *)a2);
  uint64_t v16 = *a2;
  uint64_t v17 = (v16 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v16, v17 - v16);
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 96);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 104), (int *)a2);
  uint64_t v18 = *a2;
  uint64_t v19 = (v18 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v18, v19 - v18);
  *a2 = v19;
  *(unsigned int *)((char *)a2 + v19) = *(_DWORD *)(a1 + 112);
  unsigned int v20 = *a2 + 4;
  *a2 = v20;
  *(void *)((char *)a2 + v20) = *(void *)(a1 + 120);
  unsigned int v21 = *a2 + 8;
  *a2 = v21;
  *(void *)((char *)a2 + v21) = *(void *)(a1 + 128);
  uint64_t v22 = *a2 + 8;
  *a2 = v22;
  strcpy((char *)a2 + v22, "ul");
  uint64_t v23 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v23 - (*a2 + 3));
  *a2 = v23;
  *(void *)((char *)a2 + v23) = *(void *)(a1 + 8);
  unint64_t v24 = *a2 + 8;
  *a2 = v24;
  if (a4)
  {
    int v25 = 8 * *a4 + 8;
    memcpy((char *)a2 + v24, a4, v25);
    uint64_t v26 = v25 + *a2;
    unint64_t v24 = (v26 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v26, v24 - v26);
    *a2 = v24;
  }
  if (a5)
  {
    if (v24 > a3)
    {
      int v27 = *a5;
      long long v31 = 0u;
      long long v32 = 0u;
      int v28 = v27;
      int v29 = 500;
      int v30 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v28);
    }
  }
}

void DYTraceEncode_MPSExternalNDArrayBinaryGradient_encodeSecondaryGradientToCommandBuffer_encoder_options_pluginOptions_primaryBuffer_primaryInfo_secondaryBuffer_secondaryInfo_gradientBuffer_gradientInfo_destination_destinationInfo_accumulate_predicationBuffer_predicationOffset(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v31 = 0u;
    long long v32 = 0u;
    int v28 = v10;
    int v29 = 500;
    int v30 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v28);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)a2 = 0xFFFFE82E00000024;
  strcpy((char *)a2 + 36, "CttulultUtUtUtUitul");
  *a2 = 56;
  *((void *)a2 + 7) = *(void *)a1;
  *a2 = 64;
  *((void *)a2 + 8) = *(void *)(a1 + 16);
  *a2 = 72;
  *((void *)a2 + 9) = *(void *)(a1 + 24);
  *a2 = 80;
  *((void *)a2 + 10) = *(void *)(a1 + 32);
  *a2 = 88;
  *((void *)a2 + 11) = *(void *)(a1 + 40);
  *a2 = 96;
  *((void *)a2 + 12) = *(void *)(a1 + 48);
  *a2 = 104;
  AppendString(*(const char **)(a1 + 56), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 64);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 72), (int *)a2);
  uint64_t v14 = *a2;
  uint64_t v15 = (v14 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v14, v15 - v14);
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 80);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 88), (int *)a2);
  uint64_t v16 = *a2;
  uint64_t v17 = (v16 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v16, v17 - v16);
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 96);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 104), (int *)a2);
  uint64_t v18 = *a2;
  uint64_t v19 = (v18 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v18, v19 - v18);
  *a2 = v19;
  *(unsigned int *)((char *)a2 + v19) = *(_DWORD *)(a1 + 112);
  unsigned int v20 = *a2 + 4;
  *a2 = v20;
  *(void *)((char *)a2 + v20) = *(void *)(a1 + 120);
  unsigned int v21 = *a2 + 8;
  *a2 = v21;
  *(void *)((char *)a2 + v21) = *(void *)(a1 + 128);
  uint64_t v22 = *a2 + 8;
  *a2 = v22;
  strcpy((char *)a2 + v22, "ul");
  uint64_t v23 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v23 - (*a2 + 3));
  *a2 = v23;
  *(void *)((char *)a2 + v23) = *(void *)(a1 + 8);
  unint64_t v24 = *a2 + 8;
  *a2 = v24;
  if (a4)
  {
    int v25 = 8 * *a4 + 8;
    memcpy((char *)a2 + v24, a4, v25);
    uint64_t v26 = v25 + *a2;
    unint64_t v24 = (v26 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v26, v24 - v26);
    *a2 = v24;
  }
  if (a5)
  {
    if (v24 > a3)
    {
      int v27 = *a5;
      long long v31 = 0u;
      long long v32 = 0u;
      int v28 = v27;
      int v29 = 500;
      int v30 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v28);
    }
  }
}

void DYTraceEncode_MPSExternalNDArrayConvolution2DGradient_encodePrimaryGradientToCommandBuffer_encoder_options_pluginOptions_primary_primaryInfo_secondary_secondaryInfo_gradient_gradientInfo_destination_destinationInfo_accumulate_predicationBuffer_predicationOffset(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v31 = 0u;
    long long v32 = 0u;
    int v28 = v10;
    int v29 = 500;
    int v30 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v28);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)a2 = 0xFFFFE82A00000024;
  strcpy((char *)a2 + 36, "CttulultUtUtUtUitul");
  *a2 = 56;
  *((void *)a2 + 7) = *(void *)a1;
  *a2 = 64;
  *((void *)a2 + 8) = *(void *)(a1 + 16);
  *a2 = 72;
  *((void *)a2 + 9) = *(void *)(a1 + 24);
  *a2 = 80;
  *((void *)a2 + 10) = *(void *)(a1 + 32);
  *a2 = 88;
  *((void *)a2 + 11) = *(void *)(a1 + 40);
  *a2 = 96;
  *((void *)a2 + 12) = *(void *)(a1 + 48);
  *a2 = 104;
  AppendString(*(const char **)(a1 + 56), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 64);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 72), (int *)a2);
  uint64_t v14 = *a2;
  uint64_t v15 = (v14 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v14, v15 - v14);
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 80);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 88), (int *)a2);
  uint64_t v16 = *a2;
  uint64_t v17 = (v16 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v16, v17 - v16);
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 96);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 104), (int *)a2);
  uint64_t v18 = *a2;
  uint64_t v19 = (v18 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v18, v19 - v18);
  *a2 = v19;
  *(unsigned int *)((char *)a2 + v19) = *(_DWORD *)(a1 + 112);
  unsigned int v20 = *a2 + 4;
  *a2 = v20;
  *(void *)((char *)a2 + v20) = *(void *)(a1 + 120);
  unsigned int v21 = *a2 + 8;
  *a2 = v21;
  *(void *)((char *)a2 + v21) = *(void *)(a1 + 128);
  uint64_t v22 = *a2 + 8;
  *a2 = v22;
  strcpy((char *)a2 + v22, "ul");
  uint64_t v23 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v23 - (*a2 + 3));
  *a2 = v23;
  *(void *)((char *)a2 + v23) = *(void *)(a1 + 8);
  unint64_t v24 = *a2 + 8;
  *a2 = v24;
  if (a4)
  {
    int v25 = 8 * *a4 + 8;
    memcpy((char *)a2 + v24, a4, v25);
    uint64_t v26 = v25 + *a2;
    unint64_t v24 = (v26 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v26, v24 - v26);
    *a2 = v24;
  }
  if (a5)
  {
    if (v24 > a3)
    {
      int v27 = *a5;
      long long v31 = 0u;
      long long v32 = 0u;
      int v28 = v27;
      int v29 = 500;
      int v30 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v28);
    }
  }
}

void DYTraceEncode_MPSExternalNDArrayConvolution2DGradient_encodeSecondaryGradientToCommandBuffer_encoder_options_pluginOptions_primary_primaryInfo_secondary_secondaryInfo_gradient_gradientInfo_destination_destinationInfo_accumulate_predicationBuffer_predicationOffset(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v31 = 0u;
    long long v32 = 0u;
    int v28 = v10;
    int v29 = 500;
    int v30 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v28);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  *(void *)a2 = 0xFFFFE82C00000024;
  strcpy((char *)a2 + 36, "CttulultUtUtUtUitul");
  *a2 = 56;
  *((void *)a2 + 7) = *(void *)a1;
  *a2 = 64;
  *((void *)a2 + 8) = *(void *)(a1 + 16);
  *a2 = 72;
  *((void *)a2 + 9) = *(void *)(a1 + 24);
  *a2 = 80;
  *((void *)a2 + 10) = *(void *)(a1 + 32);
  *a2 = 88;
  *((void *)a2 + 11) = *(void *)(a1 + 40);
  *a2 = 96;
  *((void *)a2 + 12) = *(void *)(a1 + 48);
  *a2 = 104;
  AppendString(*(const char **)(a1 + 56), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(void *)((char *)a2 + v13) = *(void *)(a1 + 64);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 72), (int *)a2);
  uint64_t v14 = *a2;
  uint64_t v15 = (v14 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v14, v15 - v14);
  *a2 = v15;
  *(void *)((char *)a2 + v15) = *(void *)(a1 + 80);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 88), (int *)a2);
  uint64_t v16 = *a2;
  uint64_t v17 = (v16 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v16, v17 - v16);
  *a2 = v17;
  *(void *)((char *)a2 + v17) = *(void *)(a1 + 96);
  *a2 += 8;
  AppendString(*(const char **)(a1 + 104), (int *)a2);
  uint64_t v18 = *a2;
  uint64_t v19 = (v18 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v18, v19 - v18);
  *a2 = v19;
  *(unsigned int *)((char *)a2 + v19) = *(_DWORD *)(a1 + 112);
  unsigned int v20 = *a2 + 4;
  *a2 = v20;
  *(void *)((char *)a2 + v20) = *(void *)(a1 + 120);
  unsigned int v21 = *a2 + 8;
  *a2 = v21;
  *(void *)((char *)a2 + v21) = *(void *)(a1 + 128);
  uint64_t v22 = *a2 + 8;
  *a2 = v22;
  strcpy((char *)a2 + v22, "ul");
  uint64_t v23 = (*a2 + 6) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 3, v23 - (*a2 + 3));
  *a2 = v23;
  *(void *)((char *)a2 + v23) = *(void *)(a1 + 8);
  unint64_t v24 = *a2 + 8;
  *a2 = v24;
  if (a4)
  {
    int v25 = 8 * *a4 + 8;
    memcpy((char *)a2 + v24, a4, v25);
    uint64_t v26 = v25 + *a2;
    unint64_t v24 = (v26 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v26, v24 - v26);
    *a2 = v24;
  }
  if (a5)
  {
    if (v24 > a3)
    {
      int v27 = *a5;
      long long v31 = 0u;
      long long v32 = 0u;
      int v28 = v27;
      int v29 = 500;
      int v30 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v28);
    }
  }
}

void DYTraceEncode_MTLDevice_newSpatialScalerWithDescriptor(uint64_t a1, unsigned int *a2, unint64_t a3, _DWORD *a4, int *a5)
{
  if (a3 <= 0x23 && a5)
  {
    int v10 = *a5;
    long long v22 = 0u;
    long long v23 = 0u;
    int v19 = v10;
    int v20 = 500;
    unsigned int v21 = "36 <= length";
    GTError_addError(a5, (uint64_t)&v19);
  }
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  if (a4) {
    int v11 = 9;
  }
  else {
    int v11 = 1;
  }
  a2[8] = v11;
  a2[9] = 21827;
  *(void *)a2 = 0xFFFFB80000000028;
  *((void *)a2 + 5) = *(void *)a1;
  *a2 = 48;
  AppendString(*(const char **)(a1 + 16), (int *)a2);
  uint64_t v12 = *a2;
  uint64_t v13 = (v12 + 3) & 0xFFFFFFFC;
  bzero((char *)a2 + v12, v13 - v12);
  *a2 = v13;
  *(_WORD *)((char *)a2 + v13) = 116;
  uint64_t v14 = (*a2 + 5) & 0xFFFFFFFC;
  bzero((char *)a2 + *a2 + 2, v14 - (*a2 + 2));
  *a2 = v14;
  *(void *)((char *)a2 + v14) = *(void *)(a1 + 8);
  unint64_t v15 = *a2 + 8;
  *a2 = v15;
  if (a4)
  {
    int v16 = 8 * *a4 + 8;
    memcpy((char *)a2 + v15, a4, v16);
    uint64_t v17 = v16 + *a2;
    unint64_t v15 = (v17 + 3) & 0xFFFFFFFC;
    bzero((char *)a2 + v17, v15 - v17);
    *a2 = v15;
  }
  if (a5)
  {
    if (v15 > a3)
    {
      int v18 = *a5;
      long long v22 = 0u;
      long long v23 = 0u;
      int v19 = v18;
      int v20 = 500;
      unsigned int v21 = "bytes->length <= length";
      GTError_addError(a5, (uint64_t)&v19);
    }
  }
}